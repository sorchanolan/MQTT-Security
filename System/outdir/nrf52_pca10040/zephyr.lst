
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000ac28 	.word	0x2000ac28
       4:	00027d61 	.word	0x00027d61
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	00027dc1 	.word	0x00027dc1
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	00027bf5 	.word	0x00027bf5
	size_t padding = pad ? sizeof(crc) : 0;
      10:	00027bf5 	.word	0x00027bf5
      14:	00027bf5 	.word	0x00027bf5
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	00027bf5 	.word	0x00027bf5
		for (b = 0; b < 8; b++) {
      1c:	00027bf5 	.word	0x00027bf5
      20:	00027bf5 	.word	0x00027bf5
			crc = (crc << 1);
      24:	00027bf5 	.word	0x00027bf5
			if (i < len) {
      28:	00027bf5 	.word	0x00027bf5
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00027745 	.word	0x00027745
      30:	00027bf5 	.word	0x00027bf5
      34:	00027bf5 	.word	0x00027bf5
      38:	00027701 	.word	0x00027701
      3c:	00027bf5 	.word	0x00027bf5

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	00027d25 0001946d 00027d25 00027d25     %}..m...%}..%}..
	for (i = 0; i < len + padding; i++) {
      50:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
      90:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
      b0:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	00027d25 00027d25 00027d25 00027d25     %}..%}..%}..%}..
      d0:	00027d25 00027d25 00027d25              %}..%}..%}..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002a61 00000000 00027b61     ....a*......a{..
      ec:	2000d058 0000239b 00000000 00027b61     X.. .#......a{..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027b61 00000000 00027b61     ....a{......a{..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000d094 0000276f 00000000 00027b61     ... o'......a{..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027b61 00000000 0001948d     ....a{..........
     13c:	00000000 00027b61 00000000 000194cf     ....a{..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027b61 00000000 00027b61     ....a{......a{..
     15c:	00000000 00027b61 00000000 000024e1     ....a{.......$..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027b61 00000000 00027b61     ....a{......a{..
     17c:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 000194c5 00000000 00027b61     ............a{..
     1ac:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027b61 00000000 00027b61     ....a{......a{..
     1cc:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027b61 00000000 00027b61     ....a{......a{..
     1fc:	00000000 00027b61 00000000 00027b61     ....a{......a{..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027b61                       ....a{..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_drsub>:
     7dc:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
     7e0:	e002      	b.n	7e8 <__adddf3>
     7e2:	bf00      	nop

000007e4 <__aeabi_dsub>:
     7e4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000007e8 <__adddf3>:
     7e8:	b530      	push	{r4, r5, lr}
     7ea:	ea4f 0441 	mov.w	r4, r1, lsl #1
     7ee:	ea4f 0543 	mov.w	r5, r3, lsl #1
     7f2:	ea94 0f05 	teq	r4, r5
     7f6:	bf08      	it	eq
     7f8:	ea90 0f02 	teqeq	r0, r2
     7fc:	bf1f      	itttt	ne
     7fe:	ea54 0c00 	orrsne.w	ip, r4, r0
     802:	ea55 0c02 	orrsne.w	ip, r5, r2
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     806:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
     80a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     80e:	f000 80e2 	beq.w	9d6 <CONFIG_ISR_STACK_SIZE+0x1d6>
     812:	ea4f 5454 	mov.w	r4, r4, lsr #21
     816:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
     81a:	bfb8      	it	lt
     81c:	426d      	neglt	r5, r5
     81e:	dd0c      	ble.n	83a <CONFIG_ISR_STACK_SIZE+0x3a>
     820:	442c      	add	r4, r5
     822:	ea80 0202 	eor.w	r2, r0, r2
     826:	ea81 0303 	eor.w	r3, r1, r3
     82a:	ea82 0000 	eor.w	r0, r2, r0
     82e:	ea83 0101 	eor.w	r1, r3, r1
     832:	ea80 0202 	eor.w	r2, r0, r2
     836:	ea81 0303 	eor.w	r3, r1, r3
     83a:	2d36      	cmp	r5, #54	; 0x36
     83c:	bf88      	it	hi
     83e:	bd30      	pophi	{r4, r5, pc}
     840:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
     844:	ea4f 3101 	mov.w	r1, r1, lsl #12
     848:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
     84c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
     850:	d002      	beq.n	858 <CONFIG_ISR_STACK_SIZE+0x58>
     852:	4240      	negs	r0, r0
     854:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
     858:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
     85c:	ea4f 3303 	mov.w	r3, r3, lsl #12
     860:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
     864:	d002      	beq.n	86c <CONFIG_ISR_STACK_SIZE+0x6c>
     866:	4252      	negs	r2, r2
     868:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
     86c:	ea94 0f05 	teq	r4, r5
     870:	f000 80a7 	beq.w	9c2 <CONFIG_ISR_STACK_SIZE+0x1c2>
     874:	f1a4 0401 	sub.w	r4, r4, #1
     878:	f1d5 0e20 	rsbs	lr, r5, #32
     87c:	db0d      	blt.n	89a <CONFIG_ISR_STACK_SIZE+0x9a>
     87e:	fa02 fc0e 	lsl.w	ip, r2, lr
     882:	fa22 f205 	lsr.w	r2, r2, r5
     886:	1880      	adds	r0, r0, r2
     888:	f141 0100 	adc.w	r1, r1, #0
     88c:	fa03 f20e 	lsl.w	r2, r3, lr
     890:	1880      	adds	r0, r0, r2
     892:	fa43 f305 	asr.w	r3, r3, r5
     896:	4159      	adcs	r1, r3
     898:	e00e      	b.n	8b8 <CONFIG_ISR_STACK_SIZE+0xb8>
     89a:	f1a5 0520 	sub.w	r5, r5, #32
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	f10e 0e20 	add.w	lr, lr, #32
     8a2:	2a01      	cmp	r2, #1
     8a4:	fa03 fc0e 	lsl.w	ip, r3, lr
     8a8:	bf28      	it	cs
     8aa:	f04c 0c02 	orrcs.w	ip, ip, #2
     8ae:	fa43 f305 	asr.w	r3, r3, r5
     8b2:	18c0      	adds	r0, r0, r3
     8b4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
     8b8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     8bc:	d507      	bpl.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     8be:	f04f 0e00 	mov.w	lr, #0
     8c2:	f1dc 0c00 	rsbs	ip, ip, #0
     8c6:	eb7e 0000 	sbcs.w	r0, lr, r0
     8ca:	eb6e 0101 	sbc.w	r1, lr, r1
     8ce:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
     8d2:	d31b      	bcc.n	90c <CONFIG_ISR_STACK_SIZE+0x10c>
     8d4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
     8d8:	d30c      	bcc.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     8da:	0849      	lsrs	r1, r1, #1
     8dc:	ea5f 0030 	movs.w	r0, r0, rrx
     8e0:	ea4f 0c3c 	mov.w	ip, ip, rrx
     8e4:	f104 0401 	add.w	r4, r4, #1
     8e8:	ea4f 5244 	mov.w	r2, r4, lsl #21
     8ec:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
     8f0:	f080 809a 	bcs.w	a28 <CONFIG_ISR_STACK_SIZE+0x228>
     8f4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
     8f8:	bf08      	it	eq
     8fa:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     8fe:	f150 0000 	adcs.w	r0, r0, #0
     902:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     906:	ea41 0105 	orr.w	r1, r1, r5
     90a:	bd30      	pop	{r4, r5, pc}
     90c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
     910:	4140      	adcs	r0, r0
     912:	eb41 0101 	adc.w	r1, r1, r1
     916:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     91a:	f1a4 0401 	sub.w	r4, r4, #1
     91e:	d1e9      	bne.n	8f4 <CONFIG_ISR_STACK_SIZE+0xf4>
     920:	f091 0f00 	teq	r1, #0
     924:	bf04      	itt	eq
     926:	4601      	moveq	r1, r0
     928:	2000      	moveq	r0, #0
     92a:	fab1 f381 	clz	r3, r1
     92e:	bf08      	it	eq
     930:	3320      	addeq	r3, #32
     932:	f1a3 030b 	sub.w	r3, r3, #11
     936:	f1b3 0220 	subs.w	r2, r3, #32
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     93a:	da0c      	bge.n	956 <CONFIG_ISR_STACK_SIZE+0x156>
     93c:	320c      	adds	r2, #12
     93e:	dd08      	ble.n	952 <CONFIG_ISR_STACK_SIZE+0x152>
     940:	f102 0c14 	add.w	ip, r2, #20
     944:	f1c2 020c 	rsb	r2, r2, #12
     948:	fa01 f00c 	lsl.w	r0, r1, ip
     94c:	fa21 f102 	lsr.w	r1, r1, r2
     950:	e00c      	b.n	96c <CONFIG_ISR_STACK_SIZE+0x16c>
     952:	f102 0214 	add.w	r2, r2, #20
     956:	bfd8      	it	le
     958:	f1c2 0c20 	rsble	ip, r2, #32
     95c:	fa01 f102 	lsl.w	r1, r1, r2
     960:	fa20 fc0c 	lsr.w	ip, r0, ip
     964:	bfdc      	itt	le
     966:	ea41 010c 	orrle.w	r1, r1, ip
     96a:	4090      	lslle	r0, r2
     96c:	1ae4      	subs	r4, r4, r3
     96e:	bfa2      	ittt	ge
     970:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
     974:	4329      	orrge	r1, r5
     976:	bd30      	popge	{r4, r5, pc}
     978:	ea6f 0404 	mvn.w	r4, r4
     97c:	3c1f      	subs	r4, #31
     97e:	da1c      	bge.n	9ba <CONFIG_ISR_STACK_SIZE+0x1ba>
     980:	340c      	adds	r4, #12
     982:	dc0e      	bgt.n	9a2 <CONFIG_ISR_STACK_SIZE+0x1a2>
     984:	f104 0414 	add.w	r4, r4, #20
     988:	f1c4 0220 	rsb	r2, r4, #32
     98c:	fa20 f004 	lsr.w	r0, r0, r4
     990:	fa01 f302 	lsl.w	r3, r1, r2
     994:	ea40 0003 	orr.w	r0, r0, r3
     998:	fa21 f304 	lsr.w	r3, r1, r4
     99c:	ea45 0103 	orr.w	r1, r5, r3
     9a0:	bd30      	pop	{r4, r5, pc}
     9a2:	f1c4 040c 	rsb	r4, r4, #12
     9a6:	f1c4 0220 	rsb	r2, r4, #32
     9aa:	fa20 f002 	lsr.w	r0, r0, r2
     9ae:	fa01 f304 	lsl.w	r3, r1, r4
     9b2:	ea40 0003 	orr.w	r0, r0, r3
     9b6:	4629      	mov	r1, r5
     9b8:	bd30      	pop	{r4, r5, pc}
     9ba:	fa21 f004 	lsr.w	r0, r1, r4
     9be:	4629      	mov	r1, r5
     9c0:	bd30      	pop	{r4, r5, pc}
     9c2:	f094 0f00 	teq	r4, #0
     9c6:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
     9ca:	bf06      	itte	eq
     9cc:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
     9d0:	3401      	addeq	r4, #1
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d2:	3d01      	subne	r5, #1
     9d4:	e74e      	b.n	874 <CONFIG_ISR_STACK_SIZE+0x74>
     9d6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     9da:	bf18      	it	ne
     9dc:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
     9e0:	d029      	beq.n	a36 <CONFIG_ISR_STACK_SIZE+0x236>
     9e2:	ea94 0f05 	teq	r4, r5
     9e6:	bf08      	it	eq
     9e8:	ea90 0f02 	teqeq	r0, r2
     9ec:	d005      	beq.n	9fa <CONFIG_ISR_STACK_SIZE+0x1fa>
     9ee:	ea54 0c00 	orrs.w	ip, r4, r0
     9f2:	bf04      	itt	eq
     9f4:	4619      	moveq	r1, r3
     9f6:	4610      	moveq	r0, r2
     9f8:	bd30      	pop	{r4, r5, pc}
     9fa:	ea91 0f03 	teq	r1, r3
     9fe:	bf1e      	ittt	ne
     a00:	2100      	movne	r1, #0
     a02:	2000      	movne	r0, #0
     a04:	bd30      	popne	{r4, r5, pc}
     a06:	ea5f 5c54 	movs.w	ip, r4, lsr #21
     a0a:	d105      	bne.n	a18 <CONFIG_ISR_STACK_SIZE+0x218>
     a0c:	0040      	lsls	r0, r0, #1
     a0e:	4149      	adcs	r1, r1
     a10:	bf28      	it	cs
     a12:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
     a16:	bd30      	pop	{r4, r5, pc}
     a18:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
     a1c:	bf3c      	itt	cc
     a1e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
     a22:	bd30      	popcc	{r4, r5, pc}
     a24:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     a28:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
     a2c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     a30:	f04f 0000 	mov.w	r0, #0
     a34:	bd30      	pop	{r4, r5, pc}
     a36:	ea7f 5c64 	mvns.w	ip, r4, asr #21
     a3a:	bf1a      	itte	ne
     a3c:	4619      	movne	r1, r3
     a3e:	4610      	movne	r0, r2
     a40:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
     a44:	bf1c      	itt	ne
     a46:	460b      	movne	r3, r1
     a48:	4602      	movne	r2, r0
     a4a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     a4e:	bf06      	itte	eq
     a50:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
     a54:	ea91 0f03 	teqeq	r1, r3
     a58:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
     a5c:	bd30      	pop	{r4, r5, pc}
     a5e:	bf00      	nop

00000a60 <__aeabi_ui2d>:
     a60:	f090 0f00 	teq	r0, #0
     a64:	bf04      	itt	eq
     a66:	2100      	moveq	r1, #0
     a68:	4770      	bxeq	lr
     a6a:	b530      	push	{r4, r5, lr}
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a70:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a74:	f04f 0500 	mov.w	r5, #0
     a78:	f04f 0100 	mov.w	r1, #0
     a7c:	e750      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     a7e:	bf00      	nop

00000a80 <__aeabi_i2d>:
     a80:	f090 0f00 	teq	r0, #0
     a84:	bf04      	itt	eq
     a86:	2100      	moveq	r1, #0
     a88:	4770      	bxeq	lr
     a8a:	b530      	push	{r4, r5, lr}
     a8c:	f44f 6480 	mov.w	r4, #1024	; 0x400
     a90:	f104 0432 	add.w	r4, r4, #50	; 0x32
     a94:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
     a98:	bf48      	it	mi
     a9a:	4240      	negmi	r0, r0
     a9c:	f04f 0100 	mov.w	r1, #0
     aa0:	e73e      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     aa2:	bf00      	nop

00000aa4 <__aeabi_f2d>:
     aa4:	0042      	lsls	r2, r0, #1
     aa6:	ea4f 01e2 	mov.w	r1, r2, asr #3
     aaa:	ea4f 0131 	mov.w	r1, r1, rrx
     aae:	ea4f 7002 	mov.w	r0, r2, lsl #28
     ab2:	bf1f      	itttt	ne
     ab4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
     ab8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     abc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
     ac0:	4770      	bxne	lr
     ac2:	f092 0f00 	teq	r2, #0
     ac6:	bf14      	ite	ne
     ac8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
     acc:	4770      	bxeq	lr
     ace:	b530      	push	{r4, r5, lr}
     ad0:	f44f 7460 	mov.w	r4, #896	; 0x380
     ad4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
     ad8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
     adc:	e720      	b.n	920 <CONFIG_ISR_STACK_SIZE+0x120>
     ade:	bf00      	nop

00000ae0 <__aeabi_ul2d>:
     ae0:	ea50 0201 	orrs.w	r2, r0, r1
     ae4:	bf08      	it	eq
     ae6:	4770      	bxeq	lr
     ae8:	b530      	push	{r4, r5, lr}
     aea:	f04f 0500 	mov.w	r5, #0
     aee:	e00a      	b.n	b06 <__aeabi_l2d+0x16>

00000af0 <__aeabi_l2d>:
     af0:	ea50 0201 	orrs.w	r2, r0, r1
     af4:	bf08      	it	eq
     af6:	4770      	bxeq	lr
     af8:	b530      	push	{r4, r5, lr}
     afa:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
     afe:	d502      	bpl.n	b06 <__aeabi_l2d+0x16>
     b00:	4240      	negs	r0, r0
     b02:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	f44f 6480 	mov.w	r4, #1024	; 0x400
     b0a:	f104 0432 	add.w	r4, r4, #50	; 0x32
     b0e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
     b12:	f43f aedc 	beq.w	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b16:	f04f 0203 	mov.w	r2, #3
     b1a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b1e:	bf18      	it	ne
     b20:	3203      	addne	r2, #3
     b22:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
     b26:	bf18      	it	ne
     b28:	3203      	addne	r2, #3
     b2a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
     b2e:	f1c2 0320 	rsb	r3, r2, #32
     b32:	fa00 fc03 	lsl.w	ip, r0, r3
     b36:	fa20 f002 	lsr.w	r0, r0, r2
     b3a:	fa01 fe03 	lsl.w	lr, r1, r3
     b3e:	ea40 000e 	orr.w	r0, r0, lr
     b42:	fa21 f102 	lsr.w	r1, r1, r2
     b46:	4414      	add	r4, r2
     b48:	e6c1      	b.n	8ce <CONFIG_ISR_STACK_SIZE+0xce>
     b4a:	bf00      	nop

00000b4c <__aeabi_dmul>:
     b4c:	b570      	push	{r4, r5, r6, lr}
     b4e:	f04f 0cff 	mov.w	ip, #255	; 0xff
     b52:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     b56:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     b5a:	bf1d      	ittte	ne
     b5c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     b60:	ea94 0f0c 	teqne	r4, ip
     b64:	ea95 0f0c 	teqne	r5, ip
     b68:	f000 f8de 	bleq	d28 <__aeabi_dmul+0x1dc>
     b6c:	442c      	add	r4, r5
     b6e:	ea81 0603 	eor.w	r6, r1, r3
     b72:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
     b76:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
     b7a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
     b7e:	bf18      	it	ne
     b80:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
     b84:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     b88:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
     b8c:	d038      	beq.n	c00 <__aeabi_dmul+0xb4>
     b8e:	fba0 ce02 	umull	ip, lr, r0, r2
     b92:	f04f 0500 	mov.w	r5, #0
     b96:	fbe1 e502 	umlal	lr, r5, r1, r2
     b9a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
     b9e:	fbe0 e503 	umlal	lr, r5, r0, r3
	(void)_copy(s, sizeof(t), t, sizeof(t));
     ba2:	f04f 0600 	mov.w	r6, #0
     ba6:	fbe1 5603 	umlal	r5, r6, r1, r3
     baa:	f09c 0f00 	teq	ip, #0
	for (i = Nr - 1; i > 0; --i) {
     bae:	bf18      	it	ne
     bb0:	f04e 0e01 	orrne.w	lr, lr, #1
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     bb4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
     bb8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
     bbc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
     bc0:	d204      	bcs.n	bcc <__aeabi_dmul+0x80>
     bc2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
     bc6:	416d      	adcs	r5, r5
     bc8:	eb46 0606 	adc.w	r6, r6, r6
     bcc:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
     bd0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     bd4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
     bd8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
     bdc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
     be0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     be4:	bf88      	it	hi
     be6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     bea:	d81e      	bhi.n	c2a <__aeabi_dmul+0xde>
     bec:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
     bf0:	bf08      	it	eq
     bf2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     bf6:	f150 0000 	adcs.w	r0, r0, #0
     bfa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     bfe:	bd70      	pop	{r4, r5, r6, pc}
     c00:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
     c04:	ea46 0101 	orr.w	r1, r6, r1
     c08:	ea40 0002 	orr.w	r0, r0, r2
     c0c:	ea81 0103 	eor.w	r1, r1, r3
     c10:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     c14:	bfc2      	ittt	gt
     c16:	ebd4 050c 	rsbsgt	r5, r4, ip
     c1a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     c1e:	bd70      	popgt	{r4, r5, r6, pc}
     c20:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     c24:	f04f 0e00 	mov.w	lr, #0
     c28:	3c01      	subs	r4, #1
     c2a:	f300 80ab 	bgt.w	d84 <__aeabi_dmul+0x238>
     c2e:	f114 0f36 	cmn.w	r4, #54	; 0x36
     c32:	bfde      	ittt	le
	(void)_copy(s, sizeof(t), t, sizeof(t));
     c34:	2000      	movle	r0, #0
     c36:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
     c3a:	bd70      	pople	{r4, r5, r6, pc}
     c3c:	f1c4 0400 	rsb	r4, r4, #0
     c40:	3c20      	subs	r4, #32
	for (i = 0; i < (Nb*Nk); ++i) {
     c42:	da35      	bge.n	cb0 <__aeabi_dmul+0x164>
     c44:	340c      	adds	r4, #12
     c46:	dc1b      	bgt.n	c80 <__aeabi_dmul+0x134>
	t[0]  = s[0]; t[1] = s[13]; t[2] = s[10]; t[3] = s[7];
     c48:	f104 0414 	add.w	r4, r4, #20
     c4c:	f1c4 0520 	rsb	r5, r4, #32
     c50:	fa00 f305 	lsl.w	r3, r0, r5
     c54:	fa20 f004 	lsr.w	r0, r0, r4
     c58:	fa01 f205 	lsl.w	r2, r1, r5
     c5c:	ea40 0002 	orr.w	r0, r0, r2
     c60:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
     c64:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
	t[4]  = s[4]; t[5] = s[1]; t[6] = s[14]; t[7] = s[11];
     c68:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     c6c:	fa21 f604 	lsr.w	r6, r1, r4
     c70:	eb42 0106 	adc.w	r1, r2, r6
     c74:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     c78:	bf08      	it	eq
     c7a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     c7e:	bd70      	pop	{r4, r5, r6, pc}
     c80:	f1c4 040c 	rsb	r4, r4, #12
     c84:	f1c4 0520 	rsb	r5, r4, #32
	t[8]  = s[8]; t[9] = s[5]; t[10] = s[2]; t[11] = s[15];
     c88:	fa00 f304 	lsl.w	r3, r0, r4
     c8c:	fa20 f005 	lsr.w	r0, r0, r5
     c90:	fa01 f204 	lsl.w	r2, r1, r4
     c94:	ea40 0002 	orr.w	r0, r0, r2
     c98:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     c9c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
     ca0:	f141 0100 	adc.w	r1, r1, #0
     ca4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
	t[12] = s[12]; t[13] = s[9]; t[14] = s[6]; t[15] = s[3];
     ca8:	bf08      	it	eq
     caa:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     cae:	bd70      	pop	{r4, r5, r6, pc}
     cb0:	f1c4 0520 	rsb	r5, r4, #32
     cb4:	fa00 f205 	lsl.w	r2, r0, r5
     cb8:	ea4e 0e02 	orr.w	lr, lr, r2
     cbc:	fa20 f304 	lsr.w	r3, r0, r4
     cc0:	fa01 f205 	lsl.w	r2, r1, r5
     cc4:	ea43 0302 	orr.w	r3, r3, r2
	(void)_copy(s, sizeof(t), t, sizeof(t));
     cc8:	fa21 f004 	lsr.w	r0, r1, r4
     ccc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     cd0:	fa21 f204 	lsr.w	r2, r1, r4
     cd4:	ea20 0002 	bic.w	r0, r0, r2
		s[i] = inv_sbox[s[i]];
     cd8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
     cdc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
     ce0:	bf08      	it	eq
	for (i = 0; i < (Nb*Nk); ++i) {
     ce2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
     ce6:	bd70      	pop	{r4, r5, r6, pc}
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     ce8:	f094 0f00 	teq	r4, #0
     cec:	d10f      	bne.n	d0e <__aeabi_dmul+0x1c2>
     cee:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
     cf2:	0040      	lsls	r0, r0, #1
     cf4:	eb41 0101 	adc.w	r1, r1, r1
     cf8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     cfc:	bf08      	it	eq
     cfe:	3c01      	subeq	r4, #1
     d00:	d0f7      	beq.n	cf2 <__aeabi_dmul+0x1a6>
     d02:	ea41 0106 	orr.w	r1, r1, r6
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     d06:	f095 0f00 	teq	r5, #0
     d0a:	bf18      	it	ne
     d0c:	4770      	bxne	lr
     d0e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
     d12:	0052      	lsls	r2, r2, #1
     d14:	eb43 0303 	adc.w	r3, r3, r3
     d18:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
     d1c:	bf08      	it	eq
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     d1e:	3d01      	subeq	r5, #1
     d20:	d0f7      	beq.n	d12 <__aeabi_dmul+0x1c6>
     d22:	ea43 0306 	orr.w	r3, r3, r6
     d26:	4770      	bx	lr
     d28:	ea94 0f0c 	teq	r4, ip
     d2c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     d30:	bf18      	it	ne
     d32:	ea95 0f0c 	teqne	r5, ip
     d36:	d00c      	beq.n	d52 <__aeabi_dmul+0x206>
     d38:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     d3c:	bf18      	it	ne
     d3e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d42:	d1d1      	bne.n	ce8 <__aeabi_dmul+0x19c>
     d44:	ea81 0103 	eor.w	r1, r1, r3
     d48:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d4c:	f04f 0000 	mov.w	r0, #0
     d50:	bd70      	pop	{r4, r5, r6, pc}
     d52:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     d56:	bf06      	itte	eq
     d58:	4610      	moveq	r0, r2
     d5a:	4619      	moveq	r1, r3
     d5c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     d60:	d019      	beq.n	d96 <__aeabi_dmul+0x24a>
     d62:	ea94 0f0c 	teq	r4, ip
     d66:	d102      	bne.n	d6e <__aeabi_dmul+0x222>
     d68:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
     d6c:	d113      	bne.n	d96 <__aeabi_dmul+0x24a>
     d6e:	ea95 0f0c 	teq	r5, ip
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     d72:	d105      	bne.n	d80 <__aeabi_dmul+0x234>
     d74:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
     d78:	bf1c      	itt	ne
     d7a:	4610      	movne	r0, r2
     d7c:	4619      	movne	r1, r3
     d7e:	d10a      	bne.n	d96 <__aeabi_dmul+0x24a>
     d80:	ea81 0103 	eor.w	r1, r1, r3
     d84:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
     d88:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     d8c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
     d90:	f04f 0000 	mov.w	r0, #0
     d94:	bd70      	pop	{r4, r5, r6, pc}
     d96:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
     d9a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
     d9e:	bd70      	pop	{r4, r5, r6, pc}

00000da0 <__aeabi_ddiv>:
     da0:	b570      	push	{r4, r5, r6, lr}
     da2:	f04f 0cff 	mov.w	ip, #255	; 0xff
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     da6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
     daa:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
     dae:	bf1d      	ittte	ne
     db0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
     db4:	ea94 0f0c 	teqne	r4, ip
     db8:	ea95 0f0c 	teqne	r5, ip
     dbc:	f000 f8a7 	bleq	f0e <__aeabi_ddiv+0x16e>

	inv_shift_rows(state);
	inv_sub_bytes(state);
	add_round_key(state, s->words);

	(void)_copy(out, sizeof(state), state, sizeof(state));
     dc0:	eba4 0405 	sub.w	r4, r4, r5
     dc4:	ea81 0e03 	eor.w	lr, r1, r3
     dc8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     dcc:	ea4f 3101 	mov.w	r1, r1, lsl #12

	/*zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
     dd0:	f000 8088 	beq.w	ee4 <__aeabi_ddiv+0x144>
     dd4:	ea4f 3303 	mov.w	r3, r3, lsl #12
     dd8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000


	return TC_CRYPTO_SUCCESS;
}
     ddc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
     de0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
		return TC_CRYPTO_FAIL;
     de4:	ea4f 2202 	mov.w	r2, r2, lsl #8
		return TC_CRYPTO_FAIL;
     de8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
		return TC_CRYPTO_FAIL;
     dec:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
     df0:	ea4f 2600 	mov.w	r6, r0, lsl #8
     df4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
     df8:	429d      	cmp	r5, r3
     dfa:	bf08      	it	eq
     dfc:	4296      	cmpeq	r6, r2
     dfe:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
     e02:	f504 7440 	add.w	r4, r4, #768	; 0x300
     e06:	d202      	bcs.n	e0e <__aeabi_ddiv+0x6e>
     e08:	085b      	lsrs	r3, r3, #1
     e0a:	ea4f 0232 	mov.w	r2, r2, rrx
     e0e:	1ab6      	subs	r6, r6, r2
     e10:	eb65 0503 	sbc.w	r5, r5, r3
     e14:	085b      	lsrs	r3, r3, #1
     e16:	ea4f 0232 	mov.w	r2, r2, rrx
     e1a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
     e1e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
     e22:	ebb6 0e02 	subs.w	lr, r6, r2
     e26:	eb75 0e03 	sbcs.w	lr, r5, r3
     e2a:	bf22      	ittt	cs
     e2c:	1ab6      	subcs	r6, r6, r2
     e2e:	4675      	movcs	r5, lr
     e30:	ea40 000c 	orrcs.w	r0, r0, ip
     e34:	085b      	lsrs	r3, r3, #1
     e36:	ea4f 0232 	mov.w	r2, r2, rrx
     e3a:	ebb6 0e02 	subs.w	lr, r6, r2
     e3e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e42:	bf22      	ittt	cs
     e44:	1ab6      	subcs	r6, r6, r2
     e46:	4675      	movcs	r5, lr
     e48:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
     e4c:	085b      	lsrs	r3, r3, #1
     e4e:	ea4f 0232 	mov.w	r2, r2, rrx
     e52:	ebb6 0e02 	subs.w	lr, r6, r2
     e56:	eb75 0e03 	sbcs.w	lr, r5, r3
     e5a:	bf22      	ittt	cs
     e5c:	1ab6      	subcs	r6, r6, r2
     e5e:	4675      	movcs	r5, lr
     e60:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
     e64:	085b      	lsrs	r3, r3, #1
     e66:	ea4f 0232 	mov.w	r2, r2, rrx
     e6a:	ebb6 0e02 	subs.w	lr, r6, r2
     e6e:	eb75 0e03 	sbcs.w	lr, r5, r3
     e72:	bf22      	ittt	cs
     e74:	1ab6      	subcs	r6, r6, r2
     e76:	4675      	movcs	r5, lr
     e78:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
     e7c:	ea55 0e06 	orrs.w	lr, r5, r6
     e80:	d018      	beq.n	eb4 <__aeabi_ddiv+0x114>
     e82:	ea4f 1505 	mov.w	r5, r5, lsl #4
     e86:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
     e8a:	ea4f 1606 	mov.w	r6, r6, lsl #4
     e8e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
     e92:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
     e96:	ea4f 02c2 	mov.w	r2, r2, lsl #3
     e9a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
     e9e:	d1c0      	bne.n	e22 <__aeabi_ddiv+0x82>
     ea0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     ea4:	d10b      	bne.n	ebe <__aeabi_ddiv+0x11e>
     ea6:	ea41 0100 	orr.w	r1, r1, r0
     eaa:	f04f 0000 	mov.w	r0, #0
     eae:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
     eb2:	e7b6      	b.n	e22 <__aeabi_ddiv+0x82>
     eb4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
     eb8:	bf04      	itt	eq
     eba:	4301      	orreq	r1, r0
     ebc:	2000      	moveq	r0, #0
     ebe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
     ec2:	bf88      	it	hi
     ec4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
     ec8:	f63f aeaf 	bhi.w	c2a <__aeabi_dmul+0xde>
     ecc:	ebb5 0c03 	subs.w	ip, r5, r3
     ed0:	bf04      	itt	eq
     ed2:	ebb6 0c02 	subseq.w	ip, r6, r2
     ed6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
     eda:	f150 0000 	adcs.w	r0, r0, #0
     ede:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
     ee2:	bd70      	pop	{r4, r5, r6, pc}
     ee4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
     ee8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
     eec:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
     ef0:	bfc2      	ittt	gt
     ef2:	ebd4 050c 	rsbsgt	r5, r4, ip
     ef6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
     efa:	bd70      	popgt	{r4, r5, r6, pc}
     efc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
     f00:	f04f 0e00 	mov.w	lr, #0
     f04:	3c01      	subs	r4, #1
     f06:	e690      	b.n	c2a <__aeabi_dmul+0xde>
     f08:	ea45 0e06 	orr.w	lr, r5, r6
     f0c:	e68d      	b.n	c2a <__aeabi_dmul+0xde>
     f0e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
     f12:	ea94 0f0c 	teq	r4, ip
     f16:	bf08      	it	eq
     f18:	ea95 0f0c 	teqeq	r5, ip
     f1c:	f43f af3b 	beq.w	d96 <__aeabi_dmul+0x24a>
     f20:	ea94 0f0c 	teq	r4, ip
     f24:	d10a      	bne.n	f3c <__aeabi_ddiv+0x19c>
     f26:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
     f2a:	f47f af34 	bne.w	d96 <__aeabi_dmul+0x24a>
     f2e:	ea95 0f0c 	teq	r5, ip
     f32:	f47f af25 	bne.w	d80 <__aeabi_dmul+0x234>
     f36:	4610      	mov	r0, r2
     f38:	4619      	mov	r1, r3
     f3a:	e72c      	b.n	d96 <__aeabi_dmul+0x24a>
     f3c:	ea95 0f0c 	teq	r5, ip
     f40:	d106      	bne.n	f50 <__aeabi_ddiv+0x1b0>
     f42:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
     f46:	f43f aefd 	beq.w	d44 <__aeabi_dmul+0x1f8>
     f4a:	4610      	mov	r0, r2
     f4c:	4619      	mov	r1, r3
     f4e:	e722      	b.n	d96 <__aeabi_dmul+0x24a>
     f50:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
     f54:	bf18      	it	ne
     f56:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
     f5a:	f47f aec5 	bne.w	ce8 <__aeabi_dmul+0x19c>
     f5e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
     f62:	f47f af0d 	bne.w	d80 <__aeabi_dmul+0x234>
     f66:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
     f6a:	f47f aeeb 	bne.w	d44 <__aeabi_dmul+0x1f8>
     f6e:	e712      	b.n	d96 <__aeabi_dmul+0x24a>

00000f70 <__gedf2>:
     f70:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
     f74:	e006      	b.n	f84 <__cmpdf2+0x4>
     f76:	bf00      	nop

00000f78 <__ledf2>:
     f78:	f04f 0c01 	mov.w	ip, #1
     f7c:	e002      	b.n	f84 <__cmpdf2+0x4>
     f7e:	bf00      	nop

00000f80 <__cmpdf2>:
     f80:	f04f 0c01 	mov.w	ip, #1
     f84:	f84d cd04 	str.w	ip, [sp, #-4]!
     f88:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     f8c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     f90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     f94:	bf18      	it	ne
     f96:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
     f9a:	d01b      	beq.n	fd4 <__cmpdf2+0x54>
     f9c:	b001      	add	sp, #4
     f9e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
     fa2:	bf0c      	ite	eq
     fa4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
     fa8:	ea91 0f03 	teqne	r1, r3
     fac:	bf02      	ittt	eq
     fae:	ea90 0f02 	teqeq	r0, r2
     fb2:	2000      	moveq	r0, #0
     fb4:	4770      	bxeq	lr
     fb6:	f110 0f00 	cmn.w	r0, #0
     fba:	ea91 0f03 	teq	r1, r3
     fbe:	bf58      	it	pl
     fc0:	4299      	cmppl	r1, r3
     fc2:	bf08      	it	eq
     fc4:	4290      	cmpeq	r0, r2
     fc6:	bf2c      	ite	cs
     fc8:	17d8      	asrcs	r0, r3, #31
     fca:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
     fce:	f040 0001 	orr.w	r0, r0, #1
     fd2:	4770      	bx	lr
     fd4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
     fd8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fdc:	d102      	bne.n	fe4 <__cmpdf2+0x64>
     fde:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
     fe2:	d107      	bne.n	ff4 <__cmpdf2+0x74>
     fe4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
     fe8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
     fec:	d1d6      	bne.n	f9c <__cmpdf2+0x1c>
     fee:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
     ff2:	d0d3      	beq.n	f9c <__cmpdf2+0x1c>
     ff4:	f85d 0b04 	ldr.w	r0, [sp], #4
     ff8:	4770      	bx	lr
     ffa:	bf00      	nop

00000ffc <__aeabi_cdrcmple>:
     ffc:	4684      	mov	ip, r0
     ffe:	4610      	mov	r0, r2
    1000:	4662      	mov	r2, ip
    1002:	468c      	mov	ip, r1
    1004:	4619      	mov	r1, r3
    1006:	4663      	mov	r3, ip
    1008:	e000      	b.n	100c <__aeabi_cdcmpeq>
    100a:	bf00      	nop

0000100c <__aeabi_cdcmpeq>:
    100c:	b501      	push	{r0, lr}
    100e:	f7ff ffb7 	bl	f80 <__cmpdf2>
    1012:	2800      	cmp	r0, #0
    1014:	bf48      	it	mi
    1016:	f110 0f00 	cmnmi.w	r0, #0
    101a:	bd01      	pop	{r0, pc}

0000101c <__aeabi_dcmpeq>:
    101c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1020:	f7ff fff4 	bl	100c <__aeabi_cdcmpeq>
    1024:	bf0c      	ite	eq
    1026:	2001      	moveq	r0, #1
    1028:	2000      	movne	r0, #0
    102a:	f85d fb08 	ldr.w	pc, [sp], #8
    102e:	bf00      	nop

00001030 <__aeabi_dcmplt>:
    1030:	f84d ed08 	str.w	lr, [sp, #-8]!
    1034:	f7ff ffea 	bl	100c <__aeabi_cdcmpeq>
    1038:	bf34      	ite	cc
    103a:	2001      	movcc	r0, #1
    103c:	2000      	movcs	r0, #0
    103e:	f85d fb08 	ldr.w	pc, [sp], #8
    1042:	bf00      	nop

00001044 <__aeabi_dcmple>:
    1044:	f84d ed08 	str.w	lr, [sp, #-8]!
    1048:	f7ff ffe0 	bl	100c <__aeabi_cdcmpeq>
    104c:	bf94      	ite	ls
    104e:	2001      	movls	r0, #1
    1050:	2000      	movhi	r0, #0
    1052:	f85d fb08 	ldr.w	pc, [sp], #8
    1056:	bf00      	nop

00001058 <__aeabi_dcmpge>:
    1058:	f84d ed08 	str.w	lr, [sp, #-8]!
    105c:	f7ff ffce 	bl	ffc <__aeabi_cdrcmple>
    1060:	bf94      	ite	ls
    1062:	2001      	movls	r0, #1
    1064:	2000      	movhi	r0, #0
    1066:	f85d fb08 	ldr.w	pc, [sp], #8
    106a:	bf00      	nop

0000106c <__aeabi_dcmpgt>:
    106c:	f84d ed08 	str.w	lr, [sp, #-8]!
    1070:	f7ff ffc4 	bl	ffc <__aeabi_cdrcmple>
    1074:	bf34      	ite	cc
    1076:	2001      	movcc	r0, #1
    1078:	2000      	movcs	r0, #0
    107a:	f85d fb08 	ldr.w	pc, [sp], #8
    107e:	bf00      	nop

00001080 <__aeabi_dcmpun>:
    1080:	ea4f 0c41 	mov.w	ip, r1, lsl #1
    1084:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1088:	d102      	bne.n	1090 <__aeabi_dcmpun+0x10>
    108a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
    108e:	d10a      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    1090:	ea4f 0c43 	mov.w	ip, r3, lsl #1
    1094:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
    1098:	d102      	bne.n	10a0 <__aeabi_dcmpun+0x20>
    109a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
    109e:	d102      	bne.n	10a6 <__aeabi_dcmpun+0x26>
    10a0:	f04f 0000 	mov.w	r0, #0
    10a4:	4770      	bx	lr
    10a6:	f04f 0001 	mov.w	r0, #1
    10aa:	4770      	bx	lr

000010ac <__aeabi_d2iz>:
    10ac:	ea4f 0241 	mov.w	r2, r1, lsl #1
    10b0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
    10b4:	d215      	bcs.n	10e2 <__aeabi_d2iz+0x36>
    10b6:	d511      	bpl.n	10dc <__aeabi_d2iz+0x30>
    10b8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
    10bc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
    10c0:	d912      	bls.n	10e8 <__aeabi_d2iz+0x3c>
    10c2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
    10c6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    10ca:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
    10ce:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
    10d2:	fa23 f002 	lsr.w	r0, r3, r2
    10d6:	bf18      	it	ne
    10d8:	4240      	negne	r0, r0
    10da:	4770      	bx	lr
    10dc:	f04f 0000 	mov.w	r0, #0
    10e0:	4770      	bx	lr
    10e2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
    10e6:	d105      	bne.n	10f4 <__aeabi_d2iz+0x48>
    10e8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
    10ec:	bf08      	it	eq
    10ee:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
    10f2:	4770      	bx	lr
    10f4:	f04f 0000 	mov.w	r0, #0
    10f8:	4770      	bx	lr
    10fa:	bf00      	nop

000010fc <__aeabi_uldivmod>:
    10fc:	b953      	cbnz	r3, 1114 <__aeabi_uldivmod+0x18>
    10fe:	b94a      	cbnz	r2, 1114 <__aeabi_uldivmod+0x18>
    1100:	2900      	cmp	r1, #0
    1102:	bf08      	it	eq
    1104:	2800      	cmpeq	r0, #0
    1106:	bf1c      	itt	ne
    1108:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
    110c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
    1110:	f000 b98e 	b.w	1430 <__aeabi_idiv0>
    1114:	f1ad 0c08 	sub.w	ip, sp, #8
    1118:	e96d ce04 	strd	ip, lr, [sp, #-16]!
    111c:	f000 f81a 	bl	1154 <__udivmoddi4>
    1120:	f8dd e004 	ldr.w	lr, [sp, #4]
    1124:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    1128:	b004      	add	sp, #16
    112a:	4770      	bx	lr

0000112c <__popcountsi2>:
    112c:	0843      	lsrs	r3, r0, #1
    112e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
    1132:	1ac0      	subs	r0, r0, r3
    1134:	0883      	lsrs	r3, r0, #2
    1136:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
    113a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
    113e:	4418      	add	r0, r3
    1140:	eb00 1010 	add.w	r0, r0, r0, lsr #4
    1144:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
    1148:	eb00 2000 	add.w	r0, r0, r0, lsl #8
    114c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
    1150:	0e00      	lsrs	r0, r0, #24
    1152:	4770      	bx	lr

00001154 <__udivmoddi4>:
    1154:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1158:	468c      	mov	ip, r1
    115a:	460d      	mov	r5, r1
    115c:	4604      	mov	r4, r0
    115e:	9e08      	ldr	r6, [sp, #32]
    1160:	2b00      	cmp	r3, #0
    1162:	d151      	bne.n	1208 <__udivmoddi4+0xb4>
    1164:	428a      	cmp	r2, r1
    1166:	4617      	mov	r7, r2
    1168:	d96d      	bls.n	1246 <__udivmoddi4+0xf2>
    116a:	fab2 fe82 	clz	lr, r2
    116e:	f1be 0f00 	cmp.w	lr, #0
    1172:	d00b      	beq.n	118c <__udivmoddi4+0x38>
    1174:	f1ce 0c20 	rsb	ip, lr, #32
    1178:	fa01 f50e 	lsl.w	r5, r1, lr
    117c:	fa20 fc0c 	lsr.w	ip, r0, ip
    1180:	fa02 f70e 	lsl.w	r7, r2, lr
    1184:	ea4c 0c05 	orr.w	ip, ip, r5
    1188:	fa00 f40e 	lsl.w	r4, r0, lr
    118c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
    1190:	0c25      	lsrs	r5, r4, #16
    1192:	fbbc f8fa 	udiv	r8, ip, sl
    1196:	fa1f f987 	uxth.w	r9, r7
    119a:	fb0a cc18 	mls	ip, sl, r8, ip
    119e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
    11a2:	fb08 f309 	mul.w	r3, r8, r9
    11a6:	42ab      	cmp	r3, r5
    11a8:	d90a      	bls.n	11c0 <__udivmoddi4+0x6c>
    11aa:	19ed      	adds	r5, r5, r7
    11ac:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
    11b0:	f080 8123 	bcs.w	13fa <__udivmoddi4+0x2a6>
    11b4:	42ab      	cmp	r3, r5
    11b6:	f240 8120 	bls.w	13fa <__udivmoddi4+0x2a6>
    11ba:	f1a8 0802 	sub.w	r8, r8, #2
    11be:	443d      	add	r5, r7
    11c0:	1aed      	subs	r5, r5, r3
    11c2:	b2a4      	uxth	r4, r4
    11c4:	fbb5 f0fa 	udiv	r0, r5, sl
    11c8:	fb0a 5510 	mls	r5, sl, r0, r5
    11cc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
    11d0:	fb00 f909 	mul.w	r9, r0, r9
    11d4:	45a1      	cmp	r9, r4
    11d6:	d909      	bls.n	11ec <__udivmoddi4+0x98>
    11d8:	19e4      	adds	r4, r4, r7
    11da:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    11de:	f080 810a 	bcs.w	13f6 <__udivmoddi4+0x2a2>
    11e2:	45a1      	cmp	r9, r4
    11e4:	f240 8107 	bls.w	13f6 <__udivmoddi4+0x2a2>
    11e8:	3802      	subs	r0, #2
    11ea:	443c      	add	r4, r7
    11ec:	eba4 0409 	sub.w	r4, r4, r9
    11f0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    11f4:	2100      	movs	r1, #0
    11f6:	2e00      	cmp	r6, #0
    11f8:	d061      	beq.n	12be <__udivmoddi4+0x16a>
    11fa:	fa24 f40e 	lsr.w	r4, r4, lr
    11fe:	2300      	movs	r3, #0
    1200:	6034      	str	r4, [r6, #0]
    1202:	6073      	str	r3, [r6, #4]
    1204:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1208:	428b      	cmp	r3, r1
    120a:	d907      	bls.n	121c <__udivmoddi4+0xc8>
    120c:	2e00      	cmp	r6, #0
    120e:	d054      	beq.n	12ba <__udivmoddi4+0x166>
    1210:	2100      	movs	r1, #0
    1212:	e886 0021 	stmia.w	r6, {r0, r5}
    1216:	4608      	mov	r0, r1
    1218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    121c:	fab3 f183 	clz	r1, r3
    1220:	2900      	cmp	r1, #0
    1222:	f040 808e 	bne.w	1342 <__udivmoddi4+0x1ee>
    1226:	42ab      	cmp	r3, r5
    1228:	d302      	bcc.n	1230 <__udivmoddi4+0xdc>
    122a:	4282      	cmp	r2, r0
    122c:	f200 80fa 	bhi.w	1424 <__udivmoddi4+0x2d0>
    1230:	1a84      	subs	r4, r0, r2
    1232:	eb65 0503 	sbc.w	r5, r5, r3
    1236:	2001      	movs	r0, #1
    1238:	46ac      	mov	ip, r5
    123a:	2e00      	cmp	r6, #0
    123c:	d03f      	beq.n	12be <__udivmoddi4+0x16a>
    123e:	e886 1010 	stmia.w	r6, {r4, ip}
    1242:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    1246:	b912      	cbnz	r2, 124e <__udivmoddi4+0xfa>
    1248:	2701      	movs	r7, #1
    124a:	fbb7 f7f2 	udiv	r7, r7, r2
    124e:	fab7 fe87 	clz	lr, r7
    1252:	f1be 0f00 	cmp.w	lr, #0
    1256:	d134      	bne.n	12c2 <__udivmoddi4+0x16e>
    1258:	1beb      	subs	r3, r5, r7
    125a:	0c3a      	lsrs	r2, r7, #16
    125c:	fa1f fc87 	uxth.w	ip, r7
    1260:	2101      	movs	r1, #1
    1262:	fbb3 f8f2 	udiv	r8, r3, r2
    1266:	0c25      	lsrs	r5, r4, #16
    1268:	fb02 3318 	mls	r3, r2, r8, r3
    126c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1270:	fb0c f308 	mul.w	r3, ip, r8
    1274:	42ab      	cmp	r3, r5
    1276:	d907      	bls.n	1288 <__udivmoddi4+0x134>
    1278:	19ed      	adds	r5, r5, r7
    127a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
    127e:	d202      	bcs.n	1286 <__udivmoddi4+0x132>
    1280:	42ab      	cmp	r3, r5
    1282:	f200 80d1 	bhi.w	1428 <__udivmoddi4+0x2d4>
    1286:	4680      	mov	r8, r0
    1288:	1aed      	subs	r5, r5, r3
    128a:	b2a3      	uxth	r3, r4
    128c:	fbb5 f0f2 	udiv	r0, r5, r2
    1290:	fb02 5510 	mls	r5, r2, r0, r5
    1294:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
    1298:	fb0c fc00 	mul.w	ip, ip, r0
    129c:	45a4      	cmp	ip, r4
    129e:	d907      	bls.n	12b0 <__udivmoddi4+0x15c>
    12a0:	19e4      	adds	r4, r4, r7
    12a2:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
    12a6:	d202      	bcs.n	12ae <__udivmoddi4+0x15a>
    12a8:	45a4      	cmp	ip, r4
    12aa:	f200 80b8 	bhi.w	141e <__udivmoddi4+0x2ca>
    12ae:	4618      	mov	r0, r3
    12b0:	eba4 040c 	sub.w	r4, r4, ip
    12b4:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
    12b8:	e79d      	b.n	11f6 <__udivmoddi4+0xa2>
    12ba:	4631      	mov	r1, r6
    12bc:	4630      	mov	r0, r6
    12be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    12c2:	f1ce 0420 	rsb	r4, lr, #32
    12c6:	fa05 f30e 	lsl.w	r3, r5, lr
    12ca:	fa07 f70e 	lsl.w	r7, r7, lr
    12ce:	fa20 f804 	lsr.w	r8, r0, r4
    12d2:	0c3a      	lsrs	r2, r7, #16
    12d4:	fa25 f404 	lsr.w	r4, r5, r4
    12d8:	ea48 0803 	orr.w	r8, r8, r3
    12dc:	fbb4 f1f2 	udiv	r1, r4, r2
    12e0:	ea4f 4518 	mov.w	r5, r8, lsr #16
    12e4:	fb02 4411 	mls	r4, r2, r1, r4
    12e8:	fa1f fc87 	uxth.w	ip, r7
    12ec:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
    12f0:	fb01 f30c 	mul.w	r3, r1, ip
    12f4:	42ab      	cmp	r3, r5
    12f6:	fa00 f40e 	lsl.w	r4, r0, lr
    12fa:	d909      	bls.n	1310 <__udivmoddi4+0x1bc>
    12fc:	19ed      	adds	r5, r5, r7
    12fe:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
    1302:	f080 808a 	bcs.w	141a <__udivmoddi4+0x2c6>
    1306:	42ab      	cmp	r3, r5
    1308:	f240 8087 	bls.w	141a <__udivmoddi4+0x2c6>
    130c:	3902      	subs	r1, #2
    130e:	443d      	add	r5, r7
    1310:	1aeb      	subs	r3, r5, r3
    1312:	fa1f f588 	uxth.w	r5, r8
    1316:	fbb3 f0f2 	udiv	r0, r3, r2
    131a:	fb02 3310 	mls	r3, r2, r0, r3
    131e:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
    1322:	fb00 f30c 	mul.w	r3, r0, ip
    1326:	42ab      	cmp	r3, r5
    1328:	d907      	bls.n	133a <__udivmoddi4+0x1e6>
    132a:	19ed      	adds	r5, r5, r7
    132c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
    1330:	d26f      	bcs.n	1412 <__udivmoddi4+0x2be>
    1332:	42ab      	cmp	r3, r5
    1334:	d96d      	bls.n	1412 <__udivmoddi4+0x2be>
    1336:	3802      	subs	r0, #2
    1338:	443d      	add	r5, r7
    133a:	1aeb      	subs	r3, r5, r3
    133c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
    1340:	e78f      	b.n	1262 <__udivmoddi4+0x10e>
    1342:	f1c1 0720 	rsb	r7, r1, #32
    1346:	fa22 f807 	lsr.w	r8, r2, r7
    134a:	408b      	lsls	r3, r1
    134c:	fa05 f401 	lsl.w	r4, r5, r1
    1350:	ea48 0303 	orr.w	r3, r8, r3
    1354:	fa20 fe07 	lsr.w	lr, r0, r7
    1358:	ea4f 4c13 	mov.w	ip, r3, lsr #16
    135c:	40fd      	lsrs	r5, r7
    135e:	ea4e 0e04 	orr.w	lr, lr, r4
    1362:	fbb5 f9fc 	udiv	r9, r5, ip
    1366:	ea4f 441e 	mov.w	r4, lr, lsr #16
    136a:	fb0c 5519 	mls	r5, ip, r9, r5
    136e:	fa1f f883 	uxth.w	r8, r3
    1372:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
    1376:	fb09 f408 	mul.w	r4, r9, r8
    137a:	42ac      	cmp	r4, r5
    137c:	fa02 f201 	lsl.w	r2, r2, r1
    1380:	fa00 fa01 	lsl.w	sl, r0, r1
    1384:	d908      	bls.n	1398 <__udivmoddi4+0x244>
    1386:	18ed      	adds	r5, r5, r3
    1388:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
    138c:	d243      	bcs.n	1416 <__udivmoddi4+0x2c2>
    138e:	42ac      	cmp	r4, r5
    1390:	d941      	bls.n	1416 <__udivmoddi4+0x2c2>
    1392:	f1a9 0902 	sub.w	r9, r9, #2
    1396:	441d      	add	r5, r3
    1398:	1b2d      	subs	r5, r5, r4
    139a:	fa1f fe8e 	uxth.w	lr, lr
    139e:	fbb5 f0fc 	udiv	r0, r5, ip
    13a2:	fb0c 5510 	mls	r5, ip, r0, r5
    13a6:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
    13aa:	fb00 f808 	mul.w	r8, r0, r8
    13ae:	45a0      	cmp	r8, r4
    13b0:	d907      	bls.n	13c2 <__udivmoddi4+0x26e>
    13b2:	18e4      	adds	r4, r4, r3
    13b4:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
    13b8:	d229      	bcs.n	140e <__udivmoddi4+0x2ba>
    13ba:	45a0      	cmp	r8, r4
    13bc:	d927      	bls.n	140e <__udivmoddi4+0x2ba>
    13be:	3802      	subs	r0, #2
    13c0:	441c      	add	r4, r3
    13c2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
    13c6:	eba4 0408 	sub.w	r4, r4, r8
    13ca:	fba0 8902 	umull	r8, r9, r0, r2
    13ce:	454c      	cmp	r4, r9
    13d0:	46c6      	mov	lr, r8
    13d2:	464d      	mov	r5, r9
    13d4:	d315      	bcc.n	1402 <__udivmoddi4+0x2ae>
    13d6:	d012      	beq.n	13fe <__udivmoddi4+0x2aa>
    13d8:	b156      	cbz	r6, 13f0 <__udivmoddi4+0x29c>
    13da:	ebba 030e 	subs.w	r3, sl, lr
    13de:	eb64 0405 	sbc.w	r4, r4, r5
    13e2:	fa04 f707 	lsl.w	r7, r4, r7
    13e6:	40cb      	lsrs	r3, r1
    13e8:	431f      	orrs	r7, r3
    13ea:	40cc      	lsrs	r4, r1
    13ec:	6037      	str	r7, [r6, #0]
    13ee:	6074      	str	r4, [r6, #4]
    13f0:	2100      	movs	r1, #0
    13f2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
    13f6:	4618      	mov	r0, r3
    13f8:	e6f8      	b.n	11ec <__udivmoddi4+0x98>
    13fa:	4690      	mov	r8, r2
    13fc:	e6e0      	b.n	11c0 <__udivmoddi4+0x6c>
    13fe:	45c2      	cmp	sl, r8
    1400:	d2ea      	bcs.n	13d8 <__udivmoddi4+0x284>
    1402:	ebb8 0e02 	subs.w	lr, r8, r2
    1406:	eb69 0503 	sbc.w	r5, r9, r3
    140a:	3801      	subs	r0, #1
    140c:	e7e4      	b.n	13d8 <__udivmoddi4+0x284>
    140e:	4628      	mov	r0, r5
    1410:	e7d7      	b.n	13c2 <__udivmoddi4+0x26e>
    1412:	4640      	mov	r0, r8
    1414:	e791      	b.n	133a <__udivmoddi4+0x1e6>
    1416:	4681      	mov	r9, r0
    1418:	e7be      	b.n	1398 <__udivmoddi4+0x244>
    141a:	4601      	mov	r1, r0
    141c:	e778      	b.n	1310 <__udivmoddi4+0x1bc>
    141e:	3802      	subs	r0, #2
    1420:	443c      	add	r4, r7
    1422:	e745      	b.n	12b0 <__udivmoddi4+0x15c>
    1424:	4608      	mov	r0, r1
    1426:	e708      	b.n	123a <__udivmoddi4+0xe6>
    1428:	f1a8 0802 	sub.w	r8, r8, #2
    142c:	443d      	add	r5, r7
    142e:	e72b      	b.n	1288 <__udivmoddi4+0x134>

00001430 <__aeabi_idiv0>:
    1430:	4770      	bx	lr
    1432:	bf00      	nop

00001434 <publish_cb>:
	printk("\n");
}

static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
    1434:	b530      	push	{r4, r5, lr}
    1436:	b083      	sub	sp, #12
    1438:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
    143a:	2a05      	cmp	r2, #5
    143c:	d01b      	beq.n	1476 <publish_cb+0x42>
    143e:	2a07      	cmp	r2, #7
    1440:	d01c      	beq.n	147c <publish_cb+0x48>
    1442:	2a04      	cmp	r2, #4
    1444:	d003      	beq.n	144e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
    1446:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
    144a:	4b0e      	ldr	r3, [pc, #56]	; (1484 <publish_cb+0x50>)
    144c:	e001      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    144e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
    1450:	4b0d      	ldr	r3, [pc, #52]	; (1488 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
    1452:	9100      	str	r1, [sp, #0]
    1454:	22de      	movs	r2, #222	; 0xde
    1456:	490d      	ldr	r1, [pc, #52]	; (148c <publish_cb+0x58>)
    1458:	480d      	ldr	r0, [pc, #52]	; (1490 <publish_cb+0x5c>)
    145a:	f001 fdd7 	bl	300c <printk>

	if (client_ctx->publish_data) {
    145e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
    1462:	b111      	cbz	r1, 146a <publish_cb+0x36>
		printk(", user_data: %s",
    1464:	480b      	ldr	r0, [pc, #44]	; (1494 <publish_cb+0x60>)
    1466:	f001 fdd1 	bl	300c <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
    146a:	480b      	ldr	r0, [pc, #44]	; (1498 <publish_cb+0x64>)
    146c:	f001 fdce 	bl	300c <printk>

	return rc;
}
    1470:	4620      	mov	r0, r4
    1472:	b003      	add	sp, #12
    1474:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
    1476:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
    1478:	4b08      	ldr	r3, [pc, #32]	; (149c <publish_cb+0x68>)
		break;
    147a:	e7ea      	b.n	1452 <publish_cb+0x1e>
	int rc = 0;
    147c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
    147e:	4b08      	ldr	r3, [pc, #32]	; (14a0 <publish_cb+0x6c>)
    1480:	e7e7      	b.n	1452 <publish_cb+0x1e>
    1482:	bf00      	nop
    1484:	0002e920 	.word	0x0002e920
    1488:	0002e8f8 	.word	0x0002e8f8
    148c:	0002e800 	.word	0x0002e800
    1490:	0002e934 	.word	0x0002e934
    1494:	0002e950 	.word	0x0002e950
    1498:	00032548 	.word	0x00032548
    149c:	0002e914 	.word	0x0002e914
    14a0:	0002e904 	.word	0x0002e904

000014a4 <malformed_cb>:

static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
    14a4:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
    14a6:	460b      	mov	r3, r1
    14a8:	22ec      	movs	r2, #236	; 0xec
    14aa:	4902      	ldr	r1, [pc, #8]	; (14b4 <malformed_cb+0x10>)
    14ac:	4802      	ldr	r0, [pc, #8]	; (14b8 <malformed_cb+0x14>)
    14ae:	f001 fdad 	bl	300c <printk>
    14b2:	bd08      	pop	{r3, pc}
    14b4:	0002e80c 	.word	0x0002e80c
    14b8:	0002e848 	.word	0x0002e848

000014bc <disconnect_cb>:
{
    14bc:	b510      	push	{r4, lr}
    14be:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14c0:	22bc      	movs	r2, #188	; 0xbc
    14c2:	4907      	ldr	r1, [pc, #28]	; (14e0 <disconnect_cb+0x24>)
    14c4:	4807      	ldr	r0, [pc, #28]	; (14e4 <disconnect_cb+0x28>)
    14c6:	f001 fda1 	bl	300c <printk>
	if (client_ctx->disconnect_data) {
    14ca:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
    14ce:	b111      	cbz	r1, 14d6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
    14d0:	4805      	ldr	r0, [pc, #20]	; (14e8 <disconnect_cb+0x2c>)
    14d2:	f001 fd9b 	bl	300c <printk>
	printk("\n");
    14d6:	4805      	ldr	r0, [pc, #20]	; (14ec <disconnect_cb+0x30>)
    14d8:	f001 fd98 	bl	300c <printk>
    14dc:	bd10      	pop	{r4, pc}
    14de:	bf00      	nop
    14e0:	0002e7f0 	.word	0x0002e7f0
    14e4:	0002e830 	.word	0x0002e830
    14e8:	0002e838 	.word	0x0002e838
    14ec:	00032548 	.word	0x00032548

000014f0 <connect_cb>:
{
    14f0:	b510      	push	{r4, lr}
    14f2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
    14f4:	22ac      	movs	r2, #172	; 0xac
    14f6:	4907      	ldr	r1, [pc, #28]	; (1514 <connect_cb+0x24>)
    14f8:	4807      	ldr	r0, [pc, #28]	; (1518 <connect_cb+0x28>)
    14fa:	f001 fd87 	bl	300c <printk>
	if (client_ctx->connect_data) {
    14fe:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
    1502:	b111      	cbz	r1, 150a <connect_cb+0x1a>
		printk(" user_data: %s",
    1504:	4805      	ldr	r0, [pc, #20]	; (151c <connect_cb+0x2c>)
    1506:	f001 fd81 	bl	300c <printk>
	printk("\n");
    150a:	4805      	ldr	r0, [pc, #20]	; (1520 <connect_cb+0x30>)
    150c:	f001 fd7e 	bl	300c <printk>
    1510:	bd10      	pop	{r4, pc}
    1512:	bf00      	nop
    1514:	0002e7e4 	.word	0x0002e7e4
    1518:	0002e830 	.word	0x0002e830
    151c:	0002e838 	.word	0x0002e838
    1520:	00032548 	.word	0x00032548

00001524 <get_message_payload>:
}

static char *get_message_payload(enum mqtt_qos qos) 
{
    1524:	b510      	push	{r4, lr}
	static char pl[PAYLOAD_SIZE];
	snprintf(pl, sizeof(pl), "%s\n", payload);
    1526:	4c04      	ldr	r4, [pc, #16]	; (1538 <get_message_payload+0x14>)
    1528:	4623      	mov	r3, r4
    152a:	4a04      	ldr	r2, [pc, #16]	; (153c <get_message_payload+0x18>)
    152c:	217c      	movs	r1, #124	; 0x7c
    152e:	4804      	ldr	r0, [pc, #16]	; (1540 <get_message_payload+0x1c>)
    1530:	f029 faaa 	bl	2aa88 <snprintf>
	return payload;
}
    1534:	4620      	mov	r0, r4
    1536:	bd10      	pop	{r4, pc}
    1538:	200001a0 	.word	0x200001a0
    153c:	00031ff8 	.word	0x00031ff8
    1540:	2000021c 	.word	0x2000021c

00001544 <rand_string>:
{
    1544:	b570      	push	{r4, r5, r6, lr}
    1546:	b092      	sub	sp, #72	; 0x48
    1548:	4606      	mov	r6, r0
    154a:	460d      	mov	r5, r1
    const char charset[] = "abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789,.-#'?!";
    154c:	2246      	movs	r2, #70	; 0x46
    154e:	4911      	ldr	r1, [pc, #68]	; (1594 <rand_string+0x50>)
    1550:	4668      	mov	r0, sp
    1552:	f7fe feb5 	bl	2c0 <memcpy>
    if (size) {
    1556:	b1cd      	cbz	r5, 158c <rand_string+0x48>
        --size;
    1558:	3d01      	subs	r5, #1
        for (size_t n = 0; n < size; n++) {
    155a:	2400      	movs	r4, #0
    155c:	e012      	b.n	1584 <rand_string+0x40>
            int key = rand() % (int) (sizeof charset - 1);
    155e:	f029 fa61 	bl	2aa24 <rand>
    1562:	4a0d      	ldr	r2, [pc, #52]	; (1598 <rand_string+0x54>)
    1564:	fb82 3200 	smull	r3, r2, r2, r0
    1568:	17c3      	asrs	r3, r0, #31
    156a:	ebc3 1362 	rsb	r3, r3, r2, asr #5
    156e:	eb03 1203 	add.w	r2, r3, r3, lsl #4
    1572:	eb03 0382 	add.w	r3, r3, r2, lsl #2
    1576:	1ac3      	subs	r3, r0, r3
            str[n] = charset[key];
    1578:	aa12      	add	r2, sp, #72	; 0x48
    157a:	4413      	add	r3, r2
    157c:	f813 3c48 	ldrb.w	r3, [r3, #-72]
    1580:	5533      	strb	r3, [r6, r4]
        for (size_t n = 0; n < size; n++) {
    1582:	3401      	adds	r4, #1
    1584:	42ac      	cmp	r4, r5
    1586:	d3ea      	bcc.n	155e <rand_string+0x1a>
        str[size] = '\0';
    1588:	2300      	movs	r3, #0
    158a:	5573      	strb	r3, [r6, r5]
}
    158c:	4630      	mov	r0, r6
    158e:	b012      	add	sp, #72	; 0x48
    1590:	bd70      	pop	{r4, r5, r6, pc}
    1592:	bf00      	nop
    1594:	0002ea20 	.word	0x0002ea20
    1598:	76b981db 	.word	0x76b981db

0000159c <encrypt_aes_ctr>:
static void encrypt_aes_ctr(unsigned char* nonce, unsigned char* msg_to_send) {
    159c:	b5f0      	push	{r4, r5, r6, r7, lr}
    159e:	b0cd      	sub	sp, #308	; 0x134
    15a0:	af04      	add	r7, sp, #16
    15a2:	4605      	mov	r5, r0
    15a4:	460c      	mov	r4, r1
    size_t nc_offset = 0;
    15a6:	2300      	movs	r3, #0
    15a8:	f8c7 311c 	str.w	r3, [r7, #284]	; 0x11c
    unsigned char stream_block[strlen(msg_to_send)];
    15ac:	4608      	mov	r0, r1
    15ae:	f7ff f8a7 	bl	700 <strlen>
    15b2:	3007      	adds	r0, #7
    15b4:	f020 0007 	bic.w	r0, r0, #7
    15b8:	ebad 0d00 	sub.w	sp, sp, r0
    15bc:	ae04      	add	r6, sp, #16
    mbedtls_aes_init( &ctr );
    15be:	1d38      	adds	r0, r7, #4
    15c0:	f002 fb23 	bl	3c0a <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &ctr, keys[2], 256 );
    15c4:	f44f 7280 	mov.w	r2, #256	; 0x100
    15c8:	4b0c      	ldr	r3, [pc, #48]	; (15fc <encrypt_aes_ctr+0x60>)
    15ca:	6899      	ldr	r1, [r3, #8]
    15cc:	1d38      	adds	r0, r7, #4
    15ce:	f002 fb2b 	bl	3c28 <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ctr( &ctr, strlen(msg_to_send), &nc_offset, nonce, stream_block, msg_to_send, encrypted_msg );
    15d2:	4620      	mov	r0, r4
    15d4:	f7ff f894 	bl	700 <strlen>
    15d8:	4b09      	ldr	r3, [pc, #36]	; (1600 <encrypt_aes_ctr+0x64>)
    15da:	9302      	str	r3, [sp, #8]
    15dc:	9401      	str	r4, [sp, #4]
    15de:	9600      	str	r6, [sp, #0]
    15e0:	462b      	mov	r3, r5
    15e2:	f507 728e 	add.w	r2, r7, #284	; 0x11c
    15e6:	4601      	mov	r1, r0
    15e8:	1d38      	adds	r0, r7, #4
    15ea:	f002 ffcf 	bl	458c <mbedtls_aes_crypt_ctr>
	mbedtls_aes_free( &ctr );
    15ee:	1d38      	adds	r0, r7, #4
    15f0:	f002 fb12 	bl	3c18 <mbedtls_aes_free>
}
    15f4:	f507 7792 	add.w	r7, r7, #292	; 0x124
    15f8:	46bd      	mov	sp, r7
    15fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
    15fc:	2000b968 	.word	0x2000b968
    1600:	2000000c 	.word	0x2000000c

00001604 <prepare_msg>:

static void prepare_msg(struct mqtt_publish_msg *pub_msg,
				     enum mqtt_qos qos)
{
    1604:	b538      	push	{r3, r4, r5, lr}
    1606:	4604      	mov	r4, r0
    1608:	460d      	mov	r5, r1
	/* MQTT message payload may be anything, we use C strings */
	pub_msg->msg = get_message_payload(qos);
    160a:	4608      	mov	r0, r1
    160c:	f7ff ff8a 	bl	1524 <get_message_payload>
    1610:	6120      	str	r0, [r4, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
    1612:	f7ff f875 	bl	700 <strlen>
    1616:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
    1618:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
    161a:	4804      	ldr	r0, [pc, #16]	; (162c <prepare_msg+0x28>)
    161c:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
    161e:	f7ff f86f 	bl	700 <strlen>
    1622:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
    1624:	f000 fd58 	bl	20d8 <sys_rand32_get>
    1628:	80a0      	strh	r0, [r4, #4]
    162a:	bd38      	pop	{r3, r4, r5, pc}
    162c:	0002e9c0 	.word	0x0002e9c0

00001630 <message_thread>:
{
    1630:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    1634:	b08c      	sub	sp, #48	; 0x30
    1636:	af02      	add	r7, sp, #8
	int index = 0;
    1638:	2600      	movs	r6, #0
    163a:	e046      	b.n	16ca <message_thread+0x9a>
			index = 0;
    163c:	2600      	movs	r6, #0
    163e:	e06c      	b.n	171a <message_thread+0xea>
				fragment_offset = 0xff;
    1640:	23ff      	movs	r3, #255	; 0xff
    1642:	e01b      	b.n	167c <message_thread+0x4c>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    1644:	4b4c      	ldr	r3, [pc, #304]	; (1778 <message_thread+0x148>)
    1646:	9301      	str	r3, [sp, #4]
    1648:	f8cd 9000 	str.w	r9, [sp]
    164c:	4b4b      	ldr	r3, [pc, #300]	; (177c <message_thread+0x14c>)
    164e:	2292      	movs	r2, #146	; 0x92
    1650:	494b      	ldr	r1, [pc, #300]	; (1780 <message_thread+0x150>)
    1652:	484c      	ldr	r0, [pc, #304]	; (1784 <message_thread+0x154>)
    1654:	f001 fcda 	bl	300c <printk>
		 	if (rc < 0) 
    1658:	f1b9 0f00 	cmp.w	r9, #0
    165c:	db2a      	blt.n	16b4 <message_thread+0x84>

K_SYSCALL_DECLARE2_VOID(K_SYSCALL_K_OBJECT_ACCESS_REVOKE, k_object_access_revoke, void *, object, struct k_thread *, thread);

K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    165e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    1662:	f027 fd93 	bl	2918c <_impl_k_sleep>
		for (i = 1; i <= num_fragments; i++) {
    1666:	4a48      	ldr	r2, [pc, #288]	; (1788 <message_thread+0x158>)
    1668:	6813      	ldr	r3, [r2, #0]
    166a:	3301      	adds	r3, #1
    166c:	6013      	str	r3, [r2, #0]
    166e:	4b46      	ldr	r3, [pc, #280]	; (1788 <message_thread+0x158>)
    1670:	681a      	ldr	r2, [r3, #0]
    1672:	4294      	cmp	r4, r2
    1674:	db1e      	blt.n	16b4 <message_thread+0x84>
			char fragment_offset = (char) i;
    1676:	b2d3      	uxtb	r3, r2
			if (i == num_fragments)
    1678:	4294      	cmp	r4, r2
    167a:	d0e1      	beq.n	1640 <message_thread+0x10>
			snprintf(payload, sizeof(payload), "%c%s", fragment_offset, tmp + ((PAYLOAD_SIZE-2)*(i-1)));
    167c:	3a01      	subs	r2, #1
    167e:	217a      	movs	r1, #122	; 0x7a
    1680:	fb01 5202 	mla	r2, r1, r2, r5
    1684:	9200      	str	r2, [sp, #0]
    1686:	4a41      	ldr	r2, [pc, #260]	; (178c <message_thread+0x15c>)
    1688:	217c      	movs	r1, #124	; 0x7c
    168a:	4841      	ldr	r0, [pc, #260]	; (1790 <message_thread+0x160>)
    168c:	f029 f9fc 	bl	2aa88 <snprintf>
			prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0);
    1690:	f8df 9128 	ldr.w	r9, [pc, #296]	; 17bc <message_thread+0x18c>
    1694:	f109 0a30 	add.w	sl, r9, #48	; 0x30
    1698:	2100      	movs	r1, #0
    169a:	4650      	mov	r0, sl
    169c:	f7ff ffb2 	bl	1604 <prepare_msg>
		 	int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
    16a0:	4651      	mov	r1, sl
    16a2:	f109 0048 	add.w	r0, r9, #72	; 0x48
    16a6:	f024 fd5b 	bl	26160 <mqtt_tx_publish>
		 	PRINT_RESULT("mqtt_tx_publish", rc);
    16aa:	4681      	mov	r9, r0
    16ac:	2800      	cmp	r0, #0
    16ae:	d1c9      	bne.n	1644 <message_thread+0x14>
    16b0:	4b38      	ldr	r3, [pc, #224]	; (1794 <message_thread+0x164>)
    16b2:	e7c8      	b.n	1646 <message_thread+0x16>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    16b4:	4838      	ldr	r0, [pc, #224]	; (1798 <message_thread+0x168>)
    16b6:	f026 feef 	bl	28498 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    16ba:	4838      	ldr	r0, [pc, #224]	; (179c <message_thread+0x16c>)
    16bc:	f027 fea5 	bl	2940a <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    16c0:	f242 7010 	movw	r0, #10000	; 0x2710
    16c4:	f027 fd62 	bl	2918c <_impl_k_sleep>
    16c8:	46c5      	mov	sp, r8
	while(true) {
    16ca:	46e8      	mov	r8, sp
    16cc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    16d0:	f027 fd5c 	bl	2918c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    16d4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    16d8:	482f      	ldr	r0, [pc, #188]	; (1798 <message_thread+0x168>)
    16da:	f026 fe73 	bl	283c4 <_impl_k_mutex_lock>
		memset(&encrypted_msg, 0x00, sizeof(encrypted_msg));
    16de:	f44f 72c8 	mov.w	r2, #400	; 0x190
    16e2:	2100      	movs	r1, #0
    16e4:	482e      	ldr	r0, [pc, #184]	; (17a0 <message_thread+0x170>)
    16e6:	f029 f943 	bl	2a970 <memset>
    	rand_string(nonce_to_be_used, sizeof(nonce_counter));
    16ea:	2111      	movs	r1, #17
    16ec:	4638      	mov	r0, r7
    16ee:	f7ff ff29 	bl	1544 <rand_string>
    	strncpy(nonce_counter, nonce_to_be_used, sizeof(nonce_counter));
    16f2:	2211      	movs	r2, #17
    16f4:	4639      	mov	r1, r7
    16f6:	f107 0014 	add.w	r0, r7, #20
    16fa:	f029 fb55 	bl	2ada8 <strncpy>
		printk("\nMessage to send: %s\n", msgs_to_send[index]);
    16fe:	4b29      	ldr	r3, [pc, #164]	; (17a4 <message_thread+0x174>)
    1700:	f853 4026 	ldr.w	r4, [r3, r6, lsl #2]
    1704:	4621      	mov	r1, r4
    1706:	4828      	ldr	r0, [pc, #160]	; (17a8 <message_thread+0x178>)
    1708:	f001 fc80 	bl	300c <printk>
		encrypt_aes_ctr(nonce_to_be_used, msgs_to_send[index++]);
    170c:	3601      	adds	r6, #1
    170e:	4621      	mov	r1, r4
    1710:	4638      	mov	r0, r7
    1712:	f7ff ff43 	bl	159c <encrypt_aes_ctr>
		if (index == NELEMENTS(msgs_to_send))
    1716:	2e06      	cmp	r6, #6
    1718:	d090      	beq.n	163c <message_thread+0xc>
		size_t msg_size = strlen(encrypted_msg);
    171a:	4c21      	ldr	r4, [pc, #132]	; (17a0 <message_thread+0x170>)
    171c:	4620      	mov	r0, r4
    171e:	f7fe ffef 	bl	700 <strlen>
		unsigned char tmp[msg_size + sizeof(nonce_counter) + 1];
    1722:	f100 0912 	add.w	r9, r0, #18
    1726:	3019      	adds	r0, #25
    1728:	f020 0007 	bic.w	r0, r0, #7
    172c:	ebad 0d00 	sub.w	sp, sp, r0
    1730:	f10d 0a08 	add.w	sl, sp, #8
    1734:	4655      	mov	r5, sl
		snprintf(tmp, sizeof(tmp), "%s%s", nonce_counter, encrypted_msg);
    1736:	9400      	str	r4, [sp, #0]
    1738:	f107 0314 	add.w	r3, r7, #20
    173c:	4a1b      	ldr	r2, [pc, #108]	; (17ac <message_thread+0x17c>)
    173e:	4649      	mov	r1, r9
    1740:	4650      	mov	r0, sl
    1742:	f029 f9a1 	bl	2aa88 <snprintf>
	 	printk("\nEncrypted message with nonce: %s\n\n", tmp);
    1746:	4651      	mov	r1, sl
    1748:	4819      	ldr	r0, [pc, #100]	; (17b0 <message_thread+0x180>)
    174a:	f001 fc5f 	bl	300c <printk>
		int num_fragments = sizeof(tmp) / (PAYLOAD_SIZE-2);
    174e:	4c19      	ldr	r4, [pc, #100]	; (17b4 <message_thread+0x184>)
    1750:	fba4 3409 	umull	r3, r4, r4, r9
    1754:	0964      	lsrs	r4, r4, #5
		if (sizeof(tmp) % PAYLOAD_SIZE != 0)
    1756:	ea4f 0399 	mov.w	r3, r9, lsr #2
    175a:	4a17      	ldr	r2, [pc, #92]	; (17b8 <message_thread+0x188>)
    175c:	fba2 2303 	umull	r2, r3, r2, r3
    1760:	089b      	lsrs	r3, r3, #2
    1762:	ebc3 1343 	rsb	r3, r3, r3, lsl #5
    1766:	009a      	lsls	r2, r3, #2
    1768:	4591      	cmp	r9, r2
    176a:	d000      	beq.n	176e <message_thread+0x13e>
			num_fragments++;
    176c:	3401      	adds	r4, #1
		for (i = 1; i <= num_fragments; i++) {
    176e:	2201      	movs	r2, #1
    1770:	4b05      	ldr	r3, [pc, #20]	; (1788 <message_thread+0x158>)
    1772:	601a      	str	r2, [r3, #0]
    1774:	e77b      	b.n	166e <message_thread+0x3e>
    1776:	bf00      	nop
    1778:	0002e864 	.word	0x0002e864
    177c:	0002e8b8 	.word	0x0002e8b8
    1780:	0002e7d4 	.word	0x0002e7d4
    1784:	0002e8c8 	.word	0x0002e8c8
    1788:	200029dc 	.word	0x200029dc
    178c:	0002e8b0 	.word	0x0002e8b0
    1790:	200001a0 	.word	0x200001a0
    1794:	0002e860 	.word	0x0002e860
    1798:	2000d1dc 	.word	0x2000d1dc
    179c:	2000d168 	.word	0x2000d168
    17a0:	2000000c 	.word	0x2000000c
    17a4:	0002e8e0 	.word	0x0002e8e0
    17a8:	0002e86c 	.word	0x0002e86c
    17ac:	0002e884 	.word	0x0002e884
    17b0:	0002e88c 	.word	0x0002e88c
    17b4:	4325c53f 	.word	0x4325c53f
    17b8:	21084211 	.word	0x21084211
    17bc:	20000298 	.word	0x20000298

000017c0 <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
    17c0:	b530      	push	{r4, r5, lr}
    17c2:	b083      	sub	sp, #12
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
    17c4:	4c6f      	ldr	r4, [pc, #444]	; (1984 <publisher_thread+0x1c4>)
    17c6:	f44f 7280 	mov.w	r2, #256	; 0x100
    17ca:	2100      	movs	r1, #0
    17cc:	4620      	mov	r0, r4
    17ce:	f029 f8cf 	bl	2a970 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
    17d2:	4b6d      	ldr	r3, [pc, #436]	; (1988 <publisher_thread+0x1c8>)
    17d4:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
    17d8:	4b6c      	ldr	r3, [pc, #432]	; (198c <publisher_thread+0x1cc>)
    17da:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
    17de:	4b6c      	ldr	r3, [pc, #432]	; (1990 <publisher_thread+0x1d0>)
    17e0:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
    17e4:	f242 7310 	movw	r3, #10000	; 0x2710
    17e8:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
    17ec:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
    17f0:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
    17f4:	4b67      	ldr	r3, [pc, #412]	; (1994 <publisher_thread+0x1d4>)
    17f6:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
    17fa:	f240 735b 	movw	r3, #1883	; 0x75b
    17fe:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
    1802:	4b65      	ldr	r3, [pc, #404]	; (1998 <publisher_thread+0x1d8>)
    1804:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
    1808:	4864      	ldr	r0, [pc, #400]	; (199c <publisher_thread+0x1dc>)
    180a:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
    180c:	f7fe ff78 	bl	700 <strlen>
    1810:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
    1812:	7823      	ldrb	r3, [r4, #0]
    1814:	f043 0301 	orr.w	r3, r3, #1
    1818:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
    181a:	4b61      	ldr	r3, [pc, #388]	; (19a0 <publisher_thread+0x1e0>)
    181c:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
    1820:	4b60      	ldr	r3, [pc, #384]	; (19a4 <publisher_thread+0x1e4>)
    1822:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
    1826:	4b60      	ldr	r3, [pc, #384]	; (19a8 <publisher_thread+0x1e8>)
    1828:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    182c:	e085      	b.n	193a <publisher_thread+0x17a>

		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
    182e:	4b5f      	ldr	r3, [pc, #380]	; (19ac <publisher_thread+0x1ec>)
    1830:	e092      	b.n	1958 <publisher_thread+0x198>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
    1832:	4b5e      	ldr	r3, [pc, #376]	; (19ac <publisher_thread+0x1ec>)
    1834:	9301      	str	r3, [sp, #4]
    1836:	9400      	str	r4, [sp, #0]
    1838:	4b5d      	ldr	r3, [pc, #372]	; (19b0 <publisher_thread+0x1f0>)
    183a:	f240 123f 	movw	r2, #319	; 0x13f
    183e:	495d      	ldr	r1, [pc, #372]	; (19b4 <publisher_thread+0x1f4>)
    1840:	485d      	ldr	r0, [pc, #372]	; (19b8 <publisher_thread+0x1f8>)
    1842:	f001 fbe3 	bl	300c <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
    1846:	b15c      	cbz	r4, 1860 <publisher_thread+0xa0>
    1848:	1c6b      	adds	r3, r5, #1
    184a:	2d63      	cmp	r5, #99	; 0x63
    184c:	dc08      	bgt.n	1860 <publisher_thread+0xa0>
    184e:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
    1850:	485a      	ldr	r0, [pc, #360]	; (19bc <publisher_thread+0x1fc>)
    1852:	f024 fdcb 	bl	263ec <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
    1856:	4604      	mov	r4, r0
    1858:	2800      	cmp	r0, #0
    185a:	d1ea      	bne.n	1832 <publisher_thread+0x72>
    185c:	4b58      	ldr	r3, [pc, #352]	; (19c0 <publisher_thread+0x200>)
    185e:	e7e9      	b.n	1834 <publisher_thread+0x74>

		if (rc != 0) {
    1860:	b1cc      	cbz	r4, 1896 <publisher_thread+0xd6>
    1862:	e085      	b.n	1970 <publisher_thread+0x1b0>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
    1864:	4b51      	ldr	r3, [pc, #324]	; (19ac <publisher_thread+0x1ec>)
    1866:	9301      	str	r3, [sp, #4]
    1868:	9500      	str	r5, [sp, #0]
    186a:	4b56      	ldr	r3, [pc, #344]	; (19c4 <publisher_thread+0x204>)
    186c:	f240 1249 	movw	r2, #329	; 0x149
    1870:	4950      	ldr	r1, [pc, #320]	; (19b4 <publisher_thread+0x1f4>)
    1872:	4851      	ldr	r0, [pc, #324]	; (19b8 <publisher_thread+0x1f8>)
    1874:	f001 fbca 	bl	300c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    1878:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
    187c:	f027 fc86 	bl	2918c <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
    1880:	b99d      	cbnz	r5, 18aa <publisher_thread+0xea>
    1882:	1c63      	adds	r3, r4, #1
    1884:	2c13      	cmp	r4, #19
    1886:	dc10      	bgt.n	18aa <publisher_thread+0xea>
    1888:	4a3e      	ldr	r2, [pc, #248]	; (1984 <publisher_thread+0x1c4>)
    188a:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
    188e:	f012 0f02 	tst.w	r2, #2
    1892:	d10a      	bne.n	18aa <publisher_thread+0xea>
    1894:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
    1896:	483b      	ldr	r0, [pc, #236]	; (1984 <publisher_thread+0x1c4>)
    1898:	4601      	mov	r1, r0
    189a:	3048      	adds	r0, #72	; 0x48
    189c:	f024 fbd4 	bl	26048 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
    18a0:	4605      	mov	r5, r0
    18a2:	2800      	cmp	r0, #0
    18a4:	d1de      	bne.n	1864 <publisher_thread+0xa4>
    18a6:	4b46      	ldr	r3, [pc, #280]	; (19c0 <publisher_thread+0x200>)
    18a8:	e7dd      	b.n	1866 <publisher_thread+0xa6>

		if (!pub_ctx.mqtt_ctx.connected) {
    18aa:	4b36      	ldr	r3, [pc, #216]	; (1984 <publisher_thread+0x1c4>)
    18ac:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
    18b0:	f013 0f02 	tst.w	r3, #2
    18b4:	d10c      	bne.n	18d0 <publisher_thread+0x110>
			mqtt_close(&pub_ctx.mqtt_ctx);
    18b6:	4841      	ldr	r0, [pc, #260]	; (19bc <publisher_thread+0x1fc>)
    18b8:	f024 fdde 	bl	26478 <mqtt_close>
			goto exit_pub;
    18bc:	e058      	b.n	1970 <publisher_thread+0x1b0>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
    18be:	4842      	ldr	r0, [pc, #264]	; (19c8 <publisher_thread+0x208>)
    18c0:	f026 fdea 	bl	28498 <_impl_k_mutex_unlock>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    18c4:	f644 6120 	movw	r1, #20000	; 0x4e20
    18c8:	4840      	ldr	r0, [pc, #256]	; (19cc <publisher_thread+0x20c>)
    18ca:	f027 fdb1 	bl	29430 <_impl_k_sem_take>

			if (data_changed) {
				//rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				//PRINT_RESULT("mqtt_tx_publish", rc);
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
    18ce:	b960      	cbnz	r0, 18ea <publisher_thread+0x12a>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
    18d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    18d4:	483c      	ldr	r0, [pc, #240]	; (19c8 <publisher_thread+0x208>)
    18d6:	f026 fd75 	bl	283c4 <_impl_k_mutex_lock>
			if (message_changed) {
    18da:	4b3d      	ldr	r3, [pc, #244]	; (19d0 <publisher_thread+0x210>)
    18dc:	781b      	ldrb	r3, [r3, #0]
    18de:	2b00      	cmp	r3, #0
    18e0:	d0ed      	beq.n	18be <publisher_thread+0xfe>
				message_changed=false;
    18e2:	2200      	movs	r2, #0
    18e4:	4b3a      	ldr	r3, [pc, #232]	; (19d0 <publisher_thread+0x210>)
    18e6:	701a      	strb	r2, [r3, #0]
    18e8:	e7e9      	b.n	18be <publisher_thread+0xfe>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
    18ea:	4834      	ldr	r0, [pc, #208]	; (19bc <publisher_thread+0x1fc>)
    18ec:	f024 fbee 	bl	260cc <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    18f0:	4603      	mov	r3, r0
    18f2:	2800      	cmp	r0, #0
    18f4:	d141      	bne.n	197a <publisher_thread+0x1ba>
    18f6:	4a32      	ldr	r2, [pc, #200]	; (19c0 <publisher_thread+0x200>)
    18f8:	9201      	str	r2, [sp, #4]
    18fa:	9300      	str	r3, [sp, #0]
    18fc:	4b35      	ldr	r3, [pc, #212]	; (19d4 <publisher_thread+0x214>)
    18fe:	f240 1265 	movw	r2, #357	; 0x165
    1902:	492c      	ldr	r1, [pc, #176]	; (19b4 <publisher_thread+0x1f4>)
    1904:	482c      	ldr	r0, [pc, #176]	; (19b8 <publisher_thread+0x1f8>)
    1906:	f001 fb81 	bl	300c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
    190a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    190e:	f027 fc3d 	bl	2918c <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
    1912:	482a      	ldr	r0, [pc, #168]	; (19bc <publisher_thread+0x1fc>)
    1914:	f024 fdb0 	bl	26478 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
    1918:	4603      	mov	r3, r0
    191a:	2800      	cmp	r0, #0
    191c:	d12f      	bne.n	197e <publisher_thread+0x1be>
    191e:	4a28      	ldr	r2, [pc, #160]	; (19c0 <publisher_thread+0x200>)
    1920:	9201      	str	r2, [sp, #4]
    1922:	9300      	str	r3, [sp, #0]
    1924:	4b2c      	ldr	r3, [pc, #176]	; (19d8 <publisher_thread+0x218>)
    1926:	f44f 72b5 	mov.w	r2, #362	; 0x16a
    192a:	4922      	ldr	r1, [pc, #136]	; (19b4 <publisher_thread+0x1f4>)
    192c:	4822      	ldr	r0, [pc, #136]	; (19b8 <publisher_thread+0x1f8>)
    192e:	f001 fb6d 	bl	300c <printk>
    1932:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
    1936:	f027 fc29 	bl	2918c <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    193a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    193e:	4823      	ldr	r0, [pc, #140]	; (19cc <publisher_thread+0x20c>)
    1940:	f027 fd76 	bl	29430 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
    1944:	b9a0      	cbnz	r0, 1970 <publisher_thread+0x1b0>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
    1946:	2101      	movs	r1, #1
    1948:	481c      	ldr	r0, [pc, #112]	; (19bc <publisher_thread+0x1fc>)
    194a:	f024 fd83 	bl	26454 <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
    194e:	4605      	mov	r5, r0
    1950:	2800      	cmp	r0, #0
    1952:	f47f af6c 	bne.w	182e <publisher_thread+0x6e>
    1956:	4b1a      	ldr	r3, [pc, #104]	; (19c0 <publisher_thread+0x200>)
    1958:	9301      	str	r3, [sp, #4]
    195a:	9500      	str	r5, [sp, #0]
    195c:	4b1f      	ldr	r3, [pc, #124]	; (19dc <publisher_thread+0x21c>)
    195e:	f44f 729b 	mov.w	r2, #310	; 0x136
    1962:	4914      	ldr	r1, [pc, #80]	; (19b4 <publisher_thread+0x1f4>)
    1964:	4814      	ldr	r0, [pc, #80]	; (19b8 <publisher_thread+0x1f8>)
    1966:	f001 fb51 	bl	300c <printk>
		if (rc != 0) {
    196a:	2d00      	cmp	r5, #0
    196c:	f43f af70 	beq.w	1850 <publisher_thread+0x90>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
    1970:	481b      	ldr	r0, [pc, #108]	; (19e0 <publisher_thread+0x220>)
    1972:	f001 fb4b 	bl	300c <printk>
}
    1976:	b003      	add	sp, #12
    1978:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
    197a:	4a0c      	ldr	r2, [pc, #48]	; (19ac <publisher_thread+0x1ec>)
    197c:	e7bc      	b.n	18f8 <publisher_thread+0x138>
		PRINT_RESULT("mqtt_close", rc);
    197e:	4a0b      	ldr	r2, [pc, #44]	; (19ac <publisher_thread+0x1ec>)
    1980:	e7ce      	b.n	1920 <publisher_thread+0x160>
    1982:	bf00      	nop
    1984:	20000298 	.word	0x20000298
    1988:	000014f1 	.word	0x000014f1
    198c:	000014bd 	.word	0x000014bd
    1990:	000014a5 	.word	0x000014a5
    1994:	0002e960 	.word	0x0002e960
    1998:	00001435 	.word	0x00001435
    199c:	0002e97c 	.word	0x0002e97c
    19a0:	0002e994 	.word	0x0002e994
    19a4:	0002e9a0 	.word	0x0002e9a0
    19a8:	0002e9b0 	.word	0x0002e9b0
    19ac:	0002e864 	.word	0x0002e864
    19b0:	0002e9c4 	.word	0x0002e9c4
    19b4:	0002e81c 	.word	0x0002e81c
    19b8:	0002e8c8 	.word	0x0002e8c8
    19bc:	200002e0 	.word	0x200002e0
    19c0:	0002e860 	.word	0x0002e860
    19c4:	0002e9d4 	.word	0x0002e9d4
    19c8:	2000d1dc 	.word	0x2000d1dc
    19cc:	2000d168 	.word	0x2000d168
    19d0:	2000019c 	.word	0x2000019c
    19d4:	0002e9e4 	.word	0x0002e9e4
    19d8:	0002e9f8 	.word	0x0002e9f8
    19dc:	0002e9b8 	.word	0x0002e9b8
    19e0:	0002ea04 	.word	0x0002ea04

000019e4 <start_publisher>:


static void start_publisher()
{
    19e4:	b500      	push	{lr}
    19e6:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    19e8:	2300      	movs	r3, #0
    19ea:	9305      	str	r3, [sp, #20]
    19ec:	9304      	str	r3, [sp, #16]
    19ee:	2205      	movs	r2, #5
    19f0:	9203      	str	r2, [sp, #12]
    19f2:	9302      	str	r3, [sp, #8]
    19f4:	9301      	str	r3, [sp, #4]
    19f6:	9300      	str	r3, [sp, #0]
    19f8:	4b04      	ldr	r3, [pc, #16]	; (1a0c <start_publisher+0x28>)
    19fa:	f44f 6200 	mov.w	r2, #2048	; 0x800
    19fe:	4904      	ldr	r1, [pc, #16]	; (1a10 <start_publisher+0x2c>)
    1a00:	4804      	ldr	r0, [pc, #16]	; (1a14 <start_publisher+0x30>)
    1a02:	f027 ff81 	bl	29908 <_impl_k_thread_create>
	k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    1a06:	b007      	add	sp, #28
    1a08:	f85d fb04 	ldr.w	pc, [sp], #4
    1a0c:	000017c1 	.word	0x000017c1
    1a10:	20003518 	.word	0x20003518
    1a14:	20002a48 	.word	0x20002a48

00001a18 <start_message_thread>:
{
    1a18:	b500      	push	{lr}
    1a1a:	b087      	sub	sp, #28
    1a1c:	2300      	movs	r3, #0
    1a1e:	9305      	str	r3, [sp, #20]
    1a20:	9304      	str	r3, [sp, #16]
    1a22:	2205      	movs	r2, #5
    1a24:	9203      	str	r2, [sp, #12]
    1a26:	9302      	str	r3, [sp, #8]
    1a28:	9301      	str	r3, [sp, #4]
    1a2a:	9300      	str	r3, [sp, #0]
    1a2c:	4b04      	ldr	r3, [pc, #16]	; (1a40 <start_message_thread+0x28>)
    1a2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1a32:	4904      	ldr	r1, [pc, #16]	; (1a44 <start_message_thread+0x2c>)
    1a34:	4804      	ldr	r0, [pc, #16]	; (1a48 <start_message_thread+0x30>)
    1a36:	f027 ff67 	bl	29908 <_impl_k_thread_create>
}
    1a3a:	b007      	add	sp, #28
    1a3c:	f85d fb04 	ldr.w	pc, [sp], #4
    1a40:	00001631 	.word	0x00001631
    1a44:	20002d18 	.word	0x20002d18
    1a48:	200029e0 	.word	0x200029e0

00001a4c <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1a4c:	b508      	push	{r3, lr}
	start_publisher();
    1a4e:	f7ff ffc9 	bl	19e4 <start_publisher>
	start_message_thread();
    1a52:	f7ff ffe1 	bl	1a18 <start_message_thread>
    1a56:	bd08      	pop	{r3, pc}

00001a58 <main>:
}


void main(void)
{
    1a58:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    1a5a:	f019 fd1b 	bl	1b494 <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1a5e:	f3bf 8f5b 	dmb	ish
    1a62:	68c3      	ldr	r3, [r0, #12]
    1a64:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    1a68:	f013 0f01 	tst.w	r3, #1
    1a6c:	d000      	beq.n	1a70 <main+0x18>
    1a6e:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1a70:	4803      	ldr	r0, [pc, #12]	; (1a80 <main+0x28>)
    1a72:	4b04      	ldr	r3, [pc, #16]	; (1a84 <main+0x2c>)
    1a74:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    1a76:	4b04      	ldr	r3, [pc, #16]	; (1a88 <main+0x30>)
    1a78:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    1a7a:	f021 fb49 	bl	23110 <net_mgmt_add_event_callback>
	}
#else
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	return;
    1a7e:	e7f6      	b.n	1a6e <main+0x16>
    1a80:	20000000 	.word	0x20000000
    1a84:	00001a4d 	.word	0x00001a4d
    1a88:	d0010002 	.word	0xd0010002

00001a8c <_sbrk>:
}
FUNC_ALIAS(_lseek, lseek, int);

void *_sbrk(int count)
{
	void *ptr = heap_base + heap_sz;
    1a8c:	4b08      	ldr	r3, [pc, #32]	; (1ab0 <_sbrk+0x24>)
    1a8e:	681a      	ldr	r2, [r3, #0]
    1a90:	4b08      	ldr	r3, [pc, #32]	; (1ab4 <_sbrk+0x28>)
    1a92:	18d1      	adds	r1, r2, r3

	if ((heap_sz + count) < MAX_HEAP_SIZE) {
    1a94:	4410      	add	r0, r2
    1a96:	f1c3 5300 	rsb	r3, r3, #536870912	; 0x20000000
    1a9a:	f503 3380 	add.w	r3, r3, #65536	; 0x10000
    1a9e:	4298      	cmp	r0, r3
    1aa0:	d203      	bcs.n	1aaa <_sbrk+0x1e>
		heap_sz += count;
    1aa2:	4b03      	ldr	r3, [pc, #12]	; (1ab0 <_sbrk+0x24>)
    1aa4:	6018      	str	r0, [r3, #0]
		return ptr;
	} else {
		return (void *)-1;
	}
}
    1aa6:	4608      	mov	r0, r1
    1aa8:	4770      	bx	lr
		return (void *)-1;
    1aaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    1aae:	e7fa      	b.n	1aa6 <_sbrk+0x1a>
    1ab0:	20000398 	.word	0x20000398
    1ab4:	2000d5b4 	.word	0x2000d5b4

00001ab8 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    1ab8:	b510      	push	{r4, lr}
    1aba:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    1abc:	280a      	cmp	r0, #10
    1abe:	d007      	beq.n	1ad0 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    1ac0:	4b07      	ldr	r3, [pc, #28]	; (1ae0 <console_out+0x28>)
    1ac2:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    1ac4:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    1ac6:	685b      	ldr	r3, [r3, #4]
    1ac8:	b2e1      	uxtb	r1, r4
    1aca:	4798      	blx	r3

	return c;
}
    1acc:	4620      	mov	r0, r4
    1ace:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    1ad0:	4b03      	ldr	r3, [pc, #12]	; (1ae0 <console_out+0x28>)
    1ad2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ad4:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ad6:	685b      	ldr	r3, [r3, #4]
    1ad8:	210d      	movs	r1, #13
    1ada:	4798      	blx	r3
    1adc:	e7f0      	b.n	1ac0 <console_out+0x8>
    1ade:	bf00      	nop
    1ae0:	200003bc 	.word	0x200003bc

00001ae4 <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    1ae4:	b510      	push	{r4, lr}
    1ae6:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    1ae8:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    1aea:	691b      	ldr	r3, [r3, #16]
    1aec:	b11b      	cbz	r3, 1af6 <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    1aee:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    1af0:	2800      	cmp	r0, #0
    1af2:	db02      	blt.n	1afa <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    1af4:	bd10      	pop	{r4, pc}
	}

	return 0;
    1af6:	2000      	movs	r0, #0
    1af8:	e7fa      	b.n	1af0 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    1afa:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    1afc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1afe:	b123      	cbz	r3, 1b0a <read_uart+0x26>
		api->irq_rx_disable(dev);
    1b00:	4620      	mov	r0, r4
    1b02:	4798      	blx	r3
		return -EIO;
    1b04:	f06f 0004 	mvn.w	r0, #4
    1b08:	bd10      	pop	{r4, pc}
    1b0a:	f06f 0004 	mvn.w	r0, #4
    1b0e:	e7f1      	b.n	1af4 <read_uart+0x10>

00001b10 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    1b10:	b500      	push	{lr}
    1b12:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    1b14:	4b19      	ldr	r3, [pc, #100]	; (1b7c <console_input_init+0x6c>)
    1b16:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b18:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1b1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1b1c:	b103      	cbz	r3, 1b20 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1b1e:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1b20:	4b16      	ldr	r3, [pc, #88]	; (1b7c <console_input_init+0x6c>)
    1b22:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b24:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    1b26:	699b      	ldr	r3, [r3, #24]
    1b28:	b103      	cbz	r3, 1b2c <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1b2a:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1b2c:	4b13      	ldr	r3, [pc, #76]	; (1b7c <console_input_init+0x6c>)
    1b2e:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1b30:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    1b32:	b18b      	cbz	r3, 1b58 <console_input_init+0x48>
    1b34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    1b36:	b17b      	cbz	r3, 1b58 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1b38:	4911      	ldr	r1, [pc, #68]	; (1b80 <console_input_init+0x70>)
    1b3a:	4798      	blx	r3
    1b3c:	e00c      	b.n	1b58 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1b3e:	2201      	movs	r2, #1
    1b40:	f10d 0107 	add.w	r1, sp, #7
    1b44:	4798      	blx	r3
    1b46:	e007      	b.n	1b58 <console_input_init+0x48>
	return 0;
    1b48:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1b4a:	b168      	cbz	r0, 1b68 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1b4c:	4b0b      	ldr	r3, [pc, #44]	; (1b7c <console_input_init+0x6c>)
    1b4e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b50:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    1b52:	691b      	ldr	r3, [r3, #16]
    1b54:	2b00      	cmp	r3, #0
    1b56:	d1f2      	bne.n	1b3e <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1b58:	4b08      	ldr	r3, [pc, #32]	; (1b7c <console_input_init+0x6c>)
    1b5a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b5c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1b5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1b60:	2b00      	cmp	r3, #0
    1b62:	d0f1      	beq.n	1b48 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    1b64:	4798      	blx	r3
    1b66:	e7f0      	b.n	1b4a <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1b68:	4b04      	ldr	r3, [pc, #16]	; (1b7c <console_input_init+0x6c>)
    1b6a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b6c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1b6e:	6a1b      	ldr	r3, [r3, #32]
    1b70:	b103      	cbz	r3, 1b74 <console_input_init+0x64>
		api->irq_rx_enable(dev);
    1b72:	4798      	blx	r3
}
    1b74:	b003      	add	sp, #12
    1b76:	f85d fb04 	ldr.w	pc, [sp], #4
    1b7a:	bf00      	nop
    1b7c:	200003bc 	.word	0x200003bc
    1b80:	00001e7d 	.word	0x00001e7d

00001b84 <del_char>:
{
    1b84:	b570      	push	{r4, r5, r6, lr}
    1b86:	4606      	mov	r6, r0
    1b88:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1b8a:	4b17      	ldr	r3, [pc, #92]	; (1be8 <del_char+0x64>)
    1b8c:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1b8e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1b90:	685b      	ldr	r3, [r3, #4]
    1b92:	2108      	movs	r1, #8
    1b94:	4798      	blx	r3
	if (end == 0) {
    1b96:	b11d      	cbz	r5, 1ba0 <del_char+0x1c>
	printk("\x1b[s");
    1b98:	4814      	ldr	r0, [pc, #80]	; (1bec <del_char+0x68>)
    1b9a:	f001 fa37 	bl	300c <printk>
    1b9e:	e014      	b.n	1bca <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1ba0:	4c11      	ldr	r4, [pc, #68]	; (1be8 <del_char+0x64>)
    1ba2:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ba4:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1ba6:	685b      	ldr	r3, [r3, #4]
    1ba8:	2120      	movs	r1, #32
    1baa:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1bac:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bae:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bb0:	685b      	ldr	r3, [r3, #4]
    1bb2:	2108      	movs	r1, #8
    1bb4:	4798      	blx	r3
    1bb6:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    1bb8:	7871      	ldrb	r1, [r6, #1]
    1bba:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    1bbe:	4b0a      	ldr	r3, [pc, #40]	; (1be8 <del_char+0x64>)
    1bc0:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bc2:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bc4:	685b      	ldr	r3, [r3, #4]
    1bc6:	4798      	blx	r3
	while (end-- > 0) {
    1bc8:	4625      	mov	r5, r4
    1bca:	1e6b      	subs	r3, r5, #1
    1bcc:	b2dc      	uxtb	r4, r3
    1bce:	2d00      	cmp	r5, #0
    1bd0:	d1f2      	bne.n	1bb8 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    1bd2:	4b05      	ldr	r3, [pc, #20]	; (1be8 <del_char+0x64>)
    1bd4:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1bd6:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1bd8:	685b      	ldr	r3, [r3, #4]
    1bda:	2120      	movs	r1, #32
    1bdc:	4798      	blx	r3
	printk("\x1b[u");
    1bde:	4804      	ldr	r0, [pc, #16]	; (1bf0 <del_char+0x6c>)
    1be0:	f001 fa14 	bl	300c <printk>
    1be4:	bd70      	pop	{r4, r5, r6, pc}
    1be6:	bf00      	nop
    1be8:	200003bc 	.word	0x200003bc
    1bec:	0002ec04 	.word	0x0002ec04
    1bf0:	0002ec08 	.word	0x0002ec08

00001bf4 <insert_char>:
{
    1bf4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1bf8:	4605      	mov	r5, r0
    1bfa:	4688      	mov	r8, r1
    1bfc:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    1bfe:	4b14      	ldr	r3, [pc, #80]	; (1c50 <insert_char+0x5c>)
    1c00:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c02:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c04:	685b      	ldr	r3, [r3, #4]
    1c06:	4798      	blx	r3
	if (end == 0) {
    1c08:	b91c      	cbnz	r4, 1c12 <insert_char+0x1e>
		*pos = c;
    1c0a:	f885 8000 	strb.w	r8, [r5]
		return;
    1c0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    1c12:	462e      	mov	r6, r5
    1c14:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1c18:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1c1c:	480d      	ldr	r0, [pc, #52]	; (1c54 <insert_char+0x60>)
    1c1e:	f001 f9f5 	bl	300c <printk>
    1c22:	e00c      	b.n	1c3e <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    1c24:	4b0a      	ldr	r3, [pc, #40]	; (1c50 <insert_char+0x5c>)
    1c26:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1c28:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1c2a:	685b      	ldr	r3, [r3, #4]
    1c2c:	4639      	mov	r1, r7
    1c2e:	4798      	blx	r3
		c = *pos;
    1c30:	4633      	mov	r3, r6
    1c32:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    1c36:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1c38:	4617      	mov	r7, r2
	while (end-- > 0) {
    1c3a:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1c3c:	461e      	mov	r6, r3
	while (end-- > 0) {
    1c3e:	1e63      	subs	r3, r4, #1
    1c40:	b2dd      	uxtb	r5, r3
    1c42:	2c00      	cmp	r4, #0
    1c44:	d1ee      	bne.n	1c24 <insert_char+0x30>
	printk("\x1b[u");
    1c46:	4804      	ldr	r0, [pc, #16]	; (1c58 <insert_char+0x64>)
    1c48:	f001 f9e0 	bl	300c <printk>
    1c4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1c50:	200003bc 	.word	0x200003bc
    1c54:	0002ec04 	.word	0x0002ec04
    1c58:	0002ec08 	.word	0x0002ec08

00001c5c <handle_ansi>:
{
    1c5c:	b538      	push	{r3, r4, r5, lr}
    1c5e:	4604      	mov	r4, r0
    1c60:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1c62:	4b7f      	ldr	r3, [pc, #508]	; (1e60 <handle_ansi+0x204>)
    1c64:	f3bf 8f5b 	dmb	ish
    1c68:	e853 2f00 	ldrex	r2, [r3]
    1c6c:	f022 0104 	bic.w	r1, r2, #4
    1c70:	e843 1000 	strex	r0, r1, [r3]
    1c74:	2800      	cmp	r0, #0
    1c76:	d1f7      	bne.n	1c68 <handle_ansi+0xc>
    1c78:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1c7c:	f012 0f04 	tst.w	r2, #4
    1c80:	d03c      	beq.n	1cfc <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    1c82:	f028 fb0d 	bl	2a2a0 <__locale_ctype_ptr>
    1c86:	4420      	add	r0, r4
    1c88:	7843      	ldrb	r3, [r0, #1]
    1c8a:	f013 0f04 	tst.w	r3, #4
    1c8e:	d121      	bne.n	1cd4 <handle_ansi+0x78>
			ansi_val = 1;
    1c90:	2201      	movs	r2, #1
    1c92:	4b74      	ldr	r3, [pc, #464]	; (1e64 <handle_ansi+0x208>)
    1c94:	601a      	str	r2, [r3, #0]
	switch (byte) {
    1c96:	2c46      	cmp	r4, #70	; 0x46
    1c98:	f000 80d0 	beq.w	1e3c <handle_ansi+0x1e0>
    1c9c:	f200 8086 	bhi.w	1dac <handle_ansi+0x150>
    1ca0:	2c43      	cmp	r4, #67	; 0x43
    1ca2:	f000 80a7 	beq.w	1df4 <handle_ansi+0x198>
    1ca6:	2c44      	cmp	r4, #68	; 0x44
    1ca8:	d106      	bne.n	1cb8 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1caa:	4b6f      	ldr	r3, [pc, #444]	; (1e68 <handle_ansi+0x20c>)
    1cac:	781b      	ldrb	r3, [r3, #0]
    1cae:	4a6d      	ldr	r2, [pc, #436]	; (1e64 <handle_ansi+0x208>)
    1cb0:	6811      	ldr	r1, [r2, #0]
    1cb2:	428b      	cmp	r3, r1
    1cb4:	f080 8092 	bcs.w	1ddc <handle_ansi+0x180>
    1cb8:	4b69      	ldr	r3, [pc, #420]	; (1e60 <handle_ansi+0x204>)
    1cba:	f3bf 8f5b 	dmb	ish
    1cbe:	e853 2f00 	ldrex	r2, [r3]
    1cc2:	f022 0202 	bic.w	r2, r2, #2
    1cc6:	e843 2100 	strex	r1, r2, [r3]
    1cca:	2900      	cmp	r1, #0
    1ccc:	d1f7      	bne.n	1cbe <handle_ansi+0x62>
    1cce:	f3bf 8f5b 	dmb	ish
    1cd2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1cd4:	4b62      	ldr	r3, [pc, #392]	; (1e60 <handle_ansi+0x204>)
    1cd6:	f3bf 8f5b 	dmb	ish
    1cda:	e853 2f00 	ldrex	r2, [r3]
    1cde:	f042 0208 	orr.w	r2, r2, #8
    1ce2:	e843 2100 	strex	r1, r2, [r3]
    1ce6:	2900      	cmp	r1, #0
    1ce8:	d1f7      	bne.n	1cda <handle_ansi+0x7e>
    1cea:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    1cee:	3c30      	subs	r4, #48	; 0x30
    1cf0:	4b5c      	ldr	r3, [pc, #368]	; (1e64 <handle_ansi+0x208>)
    1cf2:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    1cf4:	2200      	movs	r2, #0
    1cf6:	4b5d      	ldr	r3, [pc, #372]	; (1e6c <handle_ansi+0x210>)
    1cf8:	601a      	str	r2, [r3, #0]
		return;
    1cfa:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1cfc:	f3bf 8f5b 	dmb	ish
    1d00:	4b57      	ldr	r3, [pc, #348]	; (1e60 <handle_ansi+0x204>)
    1d02:	681b      	ldr	r3, [r3, #0]
    1d04:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    1d08:	f013 0f08 	tst.w	r3, #8
    1d0c:	d0c3      	beq.n	1c96 <handle_ansi+0x3a>
		if (isdigit(byte)) {
    1d0e:	f028 fac7 	bl	2a2a0 <__locale_ctype_ptr>
    1d12:	4420      	add	r0, r4
    1d14:	7843      	ldrb	r3, [r0, #1]
    1d16:	f013 0f04 	tst.w	r3, #4
    1d1a:	d11b      	bne.n	1d54 <handle_ansi+0xf8>
		if (byte == ';' &&
    1d1c:	2c3b      	cmp	r4, #59	; 0x3b
    1d1e:	d034      	beq.n	1d8a <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1d20:	4b4f      	ldr	r3, [pc, #316]	; (1e60 <handle_ansi+0x204>)
    1d22:	f3bf 8f5b 	dmb	ish
    1d26:	e853 2f00 	ldrex	r2, [r3]
    1d2a:	f022 0208 	bic.w	r2, r2, #8
    1d2e:	e843 2100 	strex	r1, r2, [r3]
    1d32:	2900      	cmp	r1, #0
    1d34:	d1f7      	bne.n	1d26 <handle_ansi+0xca>
    1d36:	f3bf 8f5b 	dmb	ish
    1d3a:	f3bf 8f5b 	dmb	ish
    1d3e:	e853 2f00 	ldrex	r2, [r3]
    1d42:	f022 0210 	bic.w	r2, r2, #16
    1d46:	e843 2100 	strex	r1, r2, [r3]
    1d4a:	2900      	cmp	r1, #0
    1d4c:	d1f7      	bne.n	1d3e <handle_ansi+0xe2>
    1d4e:	f3bf 8f5b 	dmb	ish
    1d52:	e7a0      	b.n	1c96 <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1d54:	f3bf 8f5b 	dmb	ish
    1d58:	4b41      	ldr	r3, [pc, #260]	; (1e60 <handle_ansi+0x204>)
    1d5a:	681b      	ldr	r3, [r3, #0]
    1d5c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1d60:	f013 0f10 	tst.w	r3, #16
    1d64:	d008      	beq.n	1d78 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    1d66:	4941      	ldr	r1, [pc, #260]	; (1e6c <handle_ansi+0x210>)
    1d68:	680a      	ldr	r2, [r1, #0]
    1d6a:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d6e:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1d70:	4423      	add	r3, r4
    1d72:	3b30      	subs	r3, #48	; 0x30
    1d74:	600b      	str	r3, [r1, #0]
    1d76:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1d78:	493a      	ldr	r1, [pc, #232]	; (1e64 <handle_ansi+0x208>)
    1d7a:	680a      	ldr	r2, [r1, #0]
    1d7c:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1d80:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    1d82:	4423      	add	r3, r4
    1d84:	3b30      	subs	r3, #48	; 0x30
    1d86:	600b      	str	r3, [r1, #0]
    1d88:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1d8a:	4b35      	ldr	r3, [pc, #212]	; (1e60 <handle_ansi+0x204>)
    1d8c:	f3bf 8f5b 	dmb	ish
    1d90:	e853 2f00 	ldrex	r2, [r3]
    1d94:	f042 0110 	orr.w	r1, r2, #16
    1d98:	e843 1000 	strex	r0, r1, [r3]
    1d9c:	2800      	cmp	r0, #0
    1d9e:	d1f7      	bne.n	1d90 <handle_ansi+0x134>
    1da0:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    1da4:	f012 0f10 	tst.w	r2, #16
    1da8:	d1ba      	bne.n	1d20 <handle_ansi+0xc4>
    1daa:	e792      	b.n	1cd2 <handle_ansi+0x76>
	switch (byte) {
    1dac:	2c48      	cmp	r4, #72	; 0x48
    1dae:	d034      	beq.n	1e1a <handle_ansi+0x1be>
    1db0:	2c7e      	cmp	r4, #126	; 0x7e
    1db2:	d181      	bne.n	1cb8 <handle_ansi+0x5c>
		if (!end) {
    1db4:	4b2e      	ldr	r3, [pc, #184]	; (1e70 <handle_ansi+0x214>)
    1db6:	781b      	ldrb	r3, [r3, #0]
    1db8:	2b00      	cmp	r3, #0
    1dba:	f43f af7d 	beq.w	1cb8 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1dbe:	2101      	movs	r1, #1
    1dc0:	482c      	ldr	r0, [pc, #176]	; (1e74 <handle_ansi+0x218>)
    1dc2:	f001 f923 	bl	300c <printk>
		del_char(&line[cur], --end);
    1dc6:	4b28      	ldr	r3, [pc, #160]	; (1e68 <handle_ansi+0x20c>)
    1dc8:	7818      	ldrb	r0, [r3, #0]
    1dca:	4b29      	ldr	r3, [pc, #164]	; (1e70 <handle_ansi+0x214>)
    1dcc:	7819      	ldrb	r1, [r3, #0]
    1dce:	3901      	subs	r1, #1
    1dd0:	b2c9      	uxtb	r1, r1
    1dd2:	7019      	strb	r1, [r3, #0]
    1dd4:	4428      	add	r0, r5
    1dd6:	f7ff fed5 	bl	1b84 <del_char>
		break;
    1dda:	e76d      	b.n	1cb8 <handle_ansi+0x5c>
		end += ansi_val;
    1ddc:	b2c8      	uxtb	r0, r1
    1dde:	4c24      	ldr	r4, [pc, #144]	; (1e70 <handle_ansi+0x214>)
    1de0:	7822      	ldrb	r2, [r4, #0]
    1de2:	4402      	add	r2, r0
    1de4:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    1de6:	1a1b      	subs	r3, r3, r0
    1de8:	4a1f      	ldr	r2, [pc, #124]	; (1e68 <handle_ansi+0x20c>)
    1dea:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    1dec:	4822      	ldr	r0, [pc, #136]	; (1e78 <handle_ansi+0x21c>)
    1dee:	f001 f90d 	bl	300c <printk>
    1df2:	e761      	b.n	1cb8 <handle_ansi+0x5c>
		if (ansi_val > end) {
    1df4:	4b1e      	ldr	r3, [pc, #120]	; (1e70 <handle_ansi+0x214>)
    1df6:	781b      	ldrb	r3, [r3, #0]
    1df8:	4a1a      	ldr	r2, [pc, #104]	; (1e64 <handle_ansi+0x208>)
    1dfa:	6811      	ldr	r1, [r2, #0]
    1dfc:	428b      	cmp	r3, r1
    1dfe:	f4ff af5b 	bcc.w	1cb8 <handle_ansi+0x5c>
		end -= ansi_val;
    1e02:	b2ca      	uxtb	r2, r1
    1e04:	1a9b      	subs	r3, r3, r2
    1e06:	481a      	ldr	r0, [pc, #104]	; (1e70 <handle_ansi+0x214>)
    1e08:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    1e0a:	4b17      	ldr	r3, [pc, #92]	; (1e68 <handle_ansi+0x20c>)
    1e0c:	7818      	ldrb	r0, [r3, #0]
    1e0e:	4402      	add	r2, r0
    1e10:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    1e12:	4818      	ldr	r0, [pc, #96]	; (1e74 <handle_ansi+0x218>)
    1e14:	f001 f8fa 	bl	300c <printk>
    1e18:	e74e      	b.n	1cb8 <handle_ansi+0x5c>
		if (!cur) {
    1e1a:	4b13      	ldr	r3, [pc, #76]	; (1e68 <handle_ansi+0x20c>)
    1e1c:	7819      	ldrb	r1, [r3, #0]
    1e1e:	2900      	cmp	r1, #0
    1e20:	f43f af4a 	beq.w	1cb8 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    1e24:	4814      	ldr	r0, [pc, #80]	; (1e78 <handle_ansi+0x21c>)
    1e26:	f001 f8f1 	bl	300c <printk>
		end += cur;
    1e2a:	4911      	ldr	r1, [pc, #68]	; (1e70 <handle_ansi+0x214>)
    1e2c:	4a0e      	ldr	r2, [pc, #56]	; (1e68 <handle_ansi+0x20c>)
    1e2e:	780b      	ldrb	r3, [r1, #0]
    1e30:	7810      	ldrb	r0, [r2, #0]
    1e32:	4403      	add	r3, r0
    1e34:	700b      	strb	r3, [r1, #0]
		cur = 0;
    1e36:	2300      	movs	r3, #0
    1e38:	7013      	strb	r3, [r2, #0]
		break;
    1e3a:	e73d      	b.n	1cb8 <handle_ansi+0x5c>
		if (!end) {
    1e3c:	4b0c      	ldr	r3, [pc, #48]	; (1e70 <handle_ansi+0x214>)
    1e3e:	7819      	ldrb	r1, [r3, #0]
    1e40:	2900      	cmp	r1, #0
    1e42:	f43f af39 	beq.w	1cb8 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    1e46:	480b      	ldr	r0, [pc, #44]	; (1e74 <handle_ansi+0x218>)
    1e48:	f001 f8e0 	bl	300c <printk>
		cur += end;
    1e4c:	4906      	ldr	r1, [pc, #24]	; (1e68 <handle_ansi+0x20c>)
    1e4e:	4a08      	ldr	r2, [pc, #32]	; (1e70 <handle_ansi+0x214>)
    1e50:	780b      	ldrb	r3, [r1, #0]
    1e52:	7810      	ldrb	r0, [r2, #0]
    1e54:	4403      	add	r3, r0
    1e56:	700b      	strb	r3, [r1, #0]
		end = 0;
    1e58:	2300      	movs	r3, #0
    1e5a:	7013      	strb	r3, [r2, #0]
		break;
    1e5c:	e72c      	b.n	1cb8 <handle_ansi+0x5c>
    1e5e:	bf00      	nop
    1e60:	200003b4 	.word	0x200003b4
    1e64:	2000039c 	.word	0x2000039c
    1e68:	200003b0 	.word	0x200003b0
    1e6c:	200003a0 	.word	0x200003a0
    1e70:	200003b1 	.word	0x200003b1
    1e74:	0002ec14 	.word	0x0002ec14
    1e78:	0002ec0c 	.word	0x0002ec0c

00001e7c <uart_console_isr>:
{
    1e7c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1e80:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    1e82:	e001      	b.n	1e88 <uart_console_isr+0xc>
	return 0;
    1e84:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1e86:	b9d8      	cbnz	r0, 1ec0 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1e88:	4b78      	ldr	r3, [pc, #480]	; (206c <uart_console_isr+0x1f0>)
    1e8a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1e8c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1e8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1e90:	2b00      	cmp	r3, #0
    1e92:	f000 80e7 	beq.w	2064 <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    1e96:	4798      	blx	r3
    1e98:	2800      	cmp	r0, #0
    1e9a:	d037      	beq.n	1f0c <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1e9c:	4b73      	ldr	r3, [pc, #460]	; (206c <uart_console_isr+0x1f0>)
    1e9e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1ea0:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    1ea2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    1ea4:	2b00      	cmp	r3, #0
    1ea6:	f000 80df 	beq.w	2068 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1eaa:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1eac:	2800      	cmp	r0, #0
    1eae:	d02d      	beq.n	1f0c <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1eb0:	4b6e      	ldr	r3, [pc, #440]	; (206c <uart_console_isr+0x1f0>)
    1eb2:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1eb4:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1eb6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1eb8:	2b00      	cmp	r3, #0
    1eba:	d0e3      	beq.n	1e84 <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    1ebc:	4798      	blx	r3
    1ebe:	e7e2      	b.n	1e86 <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    1ec0:	2201      	movs	r2, #1
    1ec2:	f10d 0107 	add.w	r1, sp, #7
    1ec6:	4b69      	ldr	r3, [pc, #420]	; (206c <uart_console_isr+0x1f0>)
    1ec8:	6818      	ldr	r0, [r3, #0]
    1eca:	f7ff fe0b 	bl	1ae4 <read_uart>
		if (rx < 0) {
    1ece:	2800      	cmp	r0, #0
    1ed0:	db1c      	blt.n	1f0c <uart_console_isr+0x90>
		if (!cmd) {
    1ed2:	4b67      	ldr	r3, [pc, #412]	; (2070 <uart_console_isr+0x1f4>)
    1ed4:	681b      	ldr	r3, [r3, #0]
    1ed6:	b183      	cbz	r3, 1efa <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1ed8:	f3bf 8f5b 	dmb	ish
    1edc:	4b65      	ldr	r3, [pc, #404]	; (2074 <uart_console_isr+0x1f8>)
    1ede:	681b      	ldr	r3, [r3, #0]
    1ee0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    1ee4:	f013 0f02 	tst.w	r3, #2
    1ee8:	d013      	beq.n	1f12 <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    1eea:	4b61      	ldr	r3, [pc, #388]	; (2070 <uart_console_isr+0x1f4>)
    1eec:	6819      	ldr	r1, [r3, #0]
    1eee:	3104      	adds	r1, #4
    1ef0:	f89d 0007 	ldrb.w	r0, [sp, #7]
    1ef4:	f7ff feb2 	bl	1c5c <handle_ansi>
			continue;
    1ef8:	e7c6      	b.n	1e88 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    1efa:	2100      	movs	r1, #0
    1efc:	4b5e      	ldr	r3, [pc, #376]	; (2078 <uart_console_isr+0x1fc>)
    1efe:	6818      	ldr	r0, [r3, #0]
    1f00:	f026 ff14 	bl	28d2c <k_queue_get>
    1f04:	4b5a      	ldr	r3, [pc, #360]	; (2070 <uart_console_isr+0x1f4>)
    1f06:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    1f08:	2800      	cmp	r0, #0
    1f0a:	d1e5      	bne.n	1ed8 <uart_console_isr+0x5c>
}
    1f0c:	b002      	add	sp, #8
    1f0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1f12:	4b58      	ldr	r3, [pc, #352]	; (2074 <uart_console_isr+0x1f8>)
    1f14:	f3bf 8f5b 	dmb	ish
    1f18:	e853 2f00 	ldrex	r2, [r3]
    1f1c:	f022 0101 	bic.w	r1, r2, #1
    1f20:	e843 1000 	strex	r0, r1, [r3]
    1f24:	2800      	cmp	r0, #0
    1f26:	d1f7      	bne.n	1f18 <uart_console_isr+0x9c>
    1f28:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1f2c:	f012 0f01 	tst.w	r2, #1
    1f30:	d01d      	beq.n	1f6e <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    1f32:	f89d 3007 	ldrb.w	r3, [sp, #7]
    1f36:	2b5b      	cmp	r3, #91	; 0x5b
    1f38:	d1a6      	bne.n	1e88 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1f3a:	4b4e      	ldr	r3, [pc, #312]	; (2074 <uart_console_isr+0x1f8>)
    1f3c:	f3bf 8f5b 	dmb	ish
    1f40:	e853 2f00 	ldrex	r2, [r3]
    1f44:	f042 0202 	orr.w	r2, r2, #2
    1f48:	e843 2100 	strex	r1, r2, [r3]
    1f4c:	2900      	cmp	r1, #0
    1f4e:	d1f7      	bne.n	1f40 <uart_console_isr+0xc4>
    1f50:	f3bf 8f5b 	dmb	ish
    1f54:	f3bf 8f5b 	dmb	ish
    1f58:	e853 2f00 	ldrex	r2, [r3]
    1f5c:	f042 0204 	orr.w	r2, r2, #4
    1f60:	e843 2100 	strex	r1, r2, [r3]
    1f64:	2900      	cmp	r1, #0
    1f66:	d1f7      	bne.n	1f58 <uart_console_isr+0xdc>
    1f68:	f3bf 8f5b 	dmb	ish
			continue;
    1f6c:	e78c      	b.n	1e88 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1f6e:	f028 f997 	bl	2a2a0 <__locale_ctype_ptr>
    1f72:	f89d 1007 	ldrb.w	r1, [sp, #7]
    1f76:	4408      	add	r0, r1
    1f78:	7843      	ldrb	r3, [r0, #1]
    1f7a:	f013 0f97 	tst.w	r3, #151	; 0x97
    1f7e:	d15f      	bne.n	2040 <uart_console_isr+0x1c4>
			switch (byte) {
    1f80:	290d      	cmp	r1, #13
    1f82:	d03c      	beq.n	1ffe <uart_console_isr+0x182>
    1f84:	d916      	bls.n	1fb4 <uart_console_isr+0x138>
    1f86:	291b      	cmp	r1, #27
    1f88:	d02b      	beq.n	1fe2 <uart_console_isr+0x166>
    1f8a:	297f      	cmp	r1, #127	; 0x7f
    1f8c:	f47f af7c 	bne.w	1e88 <uart_console_isr+0xc>
				if (cur > 0) {
    1f90:	4b3a      	ldr	r3, [pc, #232]	; (207c <uart_console_isr+0x200>)
    1f92:	781b      	ldrb	r3, [r3, #0]
    1f94:	2b00      	cmp	r3, #0
    1f96:	f43f af77 	beq.w	1e88 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1f9a:	4a35      	ldr	r2, [pc, #212]	; (2070 <uart_console_isr+0x1f4>)
    1f9c:	6812      	ldr	r2, [r2, #0]
    1f9e:	3b01      	subs	r3, #1
    1fa0:	b2db      	uxtb	r3, r3
    1fa2:	4936      	ldr	r1, [pc, #216]	; (207c <uart_console_isr+0x200>)
    1fa4:	700b      	strb	r3, [r1, #0]
    1fa6:	4413      	add	r3, r2
    1fa8:	4a35      	ldr	r2, [pc, #212]	; (2080 <uart_console_isr+0x204>)
    1faa:	7811      	ldrb	r1, [r2, #0]
    1fac:	1d18      	adds	r0, r3, #4
    1fae:	f7ff fde9 	bl	1b84 <del_char>
    1fb2:	e769      	b.n	1e88 <uart_console_isr+0xc>
			switch (byte) {
    1fb4:	2909      	cmp	r1, #9
    1fb6:	f47f af67 	bne.w	1e88 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    1fba:	4b32      	ldr	r3, [pc, #200]	; (2084 <uart_console_isr+0x208>)
    1fbc:	681b      	ldr	r3, [r3, #0]
    1fbe:	2b00      	cmp	r3, #0
    1fc0:	f43f af62 	beq.w	1e88 <uart_console_isr+0xc>
    1fc4:	4a2e      	ldr	r2, [pc, #184]	; (2080 <uart_console_isr+0x204>)
    1fc6:	7812      	ldrb	r2, [r2, #0]
    1fc8:	2a00      	cmp	r2, #0
    1fca:	f47f af5d 	bne.w	1e88 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    1fce:	4a28      	ldr	r2, [pc, #160]	; (2070 <uart_console_isr+0x1f4>)
    1fd0:	6810      	ldr	r0, [r2, #0]
    1fd2:	4c2a      	ldr	r4, [pc, #168]	; (207c <uart_console_isr+0x200>)
    1fd4:	7821      	ldrb	r1, [r4, #0]
    1fd6:	3004      	adds	r0, #4
    1fd8:	4798      	blx	r3
    1fda:	7823      	ldrb	r3, [r4, #0]
    1fdc:	4403      	add	r3, r0
    1fde:	7023      	strb	r3, [r4, #0]
			continue;
    1fe0:	e752      	b.n	1e88 <uart_console_isr+0xc>
    1fe2:	4b24      	ldr	r3, [pc, #144]	; (2074 <uart_console_isr+0x1f8>)
    1fe4:	f3bf 8f5b 	dmb	ish
    1fe8:	e853 2f00 	ldrex	r2, [r3]
    1fec:	f042 0201 	orr.w	r2, r2, #1
    1ff0:	e843 2100 	strex	r1, r2, [r3]
    1ff4:	2900      	cmp	r1, #0
    1ff6:	d1f7      	bne.n	1fe8 <uart_console_isr+0x16c>
    1ff8:	f3bf 8f5b 	dmb	ish
    1ffc:	e744      	b.n	1e88 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    1ffe:	4d1c      	ldr	r5, [pc, #112]	; (2070 <uart_console_isr+0x1f4>)
    2000:	682b      	ldr	r3, [r5, #0]
    2002:	4f1e      	ldr	r7, [pc, #120]	; (207c <uart_console_isr+0x200>)
    2004:	783a      	ldrb	r2, [r7, #0]
    2006:	4e1e      	ldr	r6, [pc, #120]	; (2080 <uart_console_isr+0x204>)
    2008:	7831      	ldrb	r1, [r6, #0]
    200a:	440a      	add	r2, r1
    200c:	4413      	add	r3, r2
    200e:	2400      	movs	r4, #0
    2010:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    2012:	f8df 8058 	ldr.w	r8, [pc, #88]	; 206c <uart_console_isr+0x1f0>
    2016:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    201a:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    201c:	685b      	ldr	r3, [r3, #4]
    201e:	210d      	movs	r1, #13
    2020:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    2022:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    2026:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    2028:	685b      	ldr	r3, [r3, #4]
    202a:	210a      	movs	r1, #10
    202c:	4798      	blx	r3
				cur = 0;
    202e:	703c      	strb	r4, [r7, #0]
				end = 0;
    2030:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    2032:	6829      	ldr	r1, [r5, #0]
    2034:	4b14      	ldr	r3, [pc, #80]	; (2088 <uart_console_isr+0x20c>)
    2036:	6818      	ldr	r0, [r3, #0]
    2038:	f026 fe50 	bl	28cdc <k_queue_append>
				cmd = NULL;
    203c:	602c      	str	r4, [r5, #0]
				break;
    203e:	e723      	b.n	1e88 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    2040:	4b0e      	ldr	r3, [pc, #56]	; (207c <uart_console_isr+0x200>)
    2042:	781b      	ldrb	r3, [r3, #0]
    2044:	4a0e      	ldr	r2, [pc, #56]	; (2080 <uart_console_isr+0x204>)
    2046:	7812      	ldrb	r2, [r2, #0]
    2048:	18d0      	adds	r0, r2, r3
    204a:	287e      	cmp	r0, #126	; 0x7e
    204c:	f63f af1c 	bhi.w	1e88 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    2050:	4807      	ldr	r0, [pc, #28]	; (2070 <uart_console_isr+0x1f4>)
    2052:	6800      	ldr	r0, [r0, #0]
    2054:	1c5d      	adds	r5, r3, #1
    2056:	4c09      	ldr	r4, [pc, #36]	; (207c <uart_console_isr+0x200>)
    2058:	7025      	strb	r5, [r4, #0]
    205a:	4418      	add	r0, r3
    205c:	3004      	adds	r0, #4
    205e:	f7ff fdc9 	bl	1bf4 <insert_char>
    2062:	e711      	b.n	1e88 <uart_console_isr+0xc>
	return 0;
    2064:	2000      	movs	r0, #0
    2066:	e717      	b.n	1e98 <uart_console_isr+0x1c>
	return 0;
    2068:	2000      	movs	r0, #0
    206a:	e71f      	b.n	1eac <uart_console_isr+0x30>
    206c:	200003bc 	.word	0x200003bc
    2070:	200003a8 	.word	0x200003a8
    2074:	200003b4 	.word	0x200003b4
    2078:	200003a4 	.word	0x200003a4
    207c:	200003b0 	.word	0x200003b0
    2080:	200003b1 	.word	0x200003b1
    2084:	200003ac 	.word	0x200003ac
    2088:	200003b8 	.word	0x200003b8

0000208c <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    208c:	b508      	push	{r3, lr}
	avail_queue = avail;
    208e:	4b04      	ldr	r3, [pc, #16]	; (20a0 <uart_register_input+0x14>)
    2090:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    2092:	4b04      	ldr	r3, [pc, #16]	; (20a4 <uart_register_input+0x18>)
    2094:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    2096:	4b04      	ldr	r3, [pc, #16]	; (20a8 <uart_register_input+0x1c>)
    2098:	601a      	str	r2, [r3, #0]

	console_input_init();
    209a:	f7ff fd39 	bl	1b10 <console_input_init>
    209e:	bd08      	pop	{r3, pc}
    20a0:	200003a4 	.word	0x200003a4
    20a4:	200003b8 	.word	0x200003b8
    20a8:	200003ac 	.word	0x200003ac

000020ac <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    20ac:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    20ae:	4802      	ldr	r0, [pc, #8]	; (20b8 <uart_console_hook_install+0xc>)
    20b0:	f000 fe70 	bl	2d94 <__printk_hook_install>
    20b4:	bd08      	pop	{r3, pc}
    20b6:	bf00      	nop
    20b8:	00001ab9 	.word	0x00001ab9

000020bc <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    20bc:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    20be:	4804      	ldr	r0, [pc, #16]	; (20d0 <uart_console_init+0x14>)
    20c0:	f025 fedc 	bl	27e7c <device_get_binding>
    20c4:	4b03      	ldr	r3, [pc, #12]	; (20d4 <uart_console_init+0x18>)
    20c6:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    20c8:	f7ff fff0 	bl	20ac <uart_console_hook_install>

	return 0;
}
    20cc:	2000      	movs	r0, #0
    20ce:	bd08      	pop	{r3, pc}
    20d0:	0002ec1c 	.word	0x0002ec1c
    20d4:	200003bc 	.word	0x200003bc

000020d8 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    20d8:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    20da:	f000 fa73 	bl	25c4 <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    20de:	4b08      	ldr	r3, [pc, #32]	; (2100 <sys_rand32_get+0x28>)
    20e0:	f3bf 8f5b 	dmb	ish
    20e4:	e853 2f00 	ldrex	r2, [r3]
    20e8:	4906      	ldr	r1, [pc, #24]	; (2104 <sys_rand32_get+0x2c>)
    20ea:	1851      	adds	r1, r2, r1
    20ec:	e843 1e00 	strex	lr, r1, [r3]
    20f0:	f1be 0f00 	cmp.w	lr, #0
    20f4:	d1f6      	bne.n	20e4 <sys_rand32_get+0xc>
    20f6:	f3bf 8f5b 	dmb	ish
}
    20fa:	4410      	add	r0, r2
    20fc:	bd08      	pop	{r3, pc}
    20fe:	bf00      	nop
    2100:	200003c0 	.word	0x200003c0
    2104:	3b9aca0d 	.word	0x3b9aca0d

00002108 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2108:	6803      	ldr	r3, [r0, #0]
    210a:	689b      	ldr	r3, [r3, #8]
    210c:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    210e:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    2112:	d05b      	beq.n	21cc <baudrate_set+0xc4>
    2114:	d910      	bls.n	2138 <baudrate_set+0x30>
    2116:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    211a:	d05e      	beq.n	21da <baudrate_set+0xd2>
    211c:	d833      	bhi.n	2186 <baudrate_set+0x7e>
    211e:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    2122:	d055      	beq.n	21d0 <baudrate_set+0xc8>
    2124:	d929      	bls.n	217a <baudrate_set+0x72>
    2126:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    212a:	d054      	beq.n	21d6 <baudrate_set+0xce>
    212c:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    2130:	d11b      	bne.n	216a <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    2132:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    2136:	e03b      	b.n	21b0 <baudrate_set+0xa8>
	switch (baudrate) {
    2138:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    213c:	d03f      	beq.n	21be <baudrate_set+0xb6>
    213e:	d90b      	bls.n	2158 <baudrate_set+0x50>
    2140:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    2144:	d03e      	beq.n	21c4 <baudrate_set+0xbc>
    2146:	d913      	bls.n	2170 <baudrate_set+0x68>
    2148:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    214c:	d03c      	beq.n	21c8 <baudrate_set+0xc0>
    214e:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    2152:	d10a      	bne.n	216a <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    2154:	4a27      	ldr	r2, [pc, #156]	; (21f4 <baudrate_set+0xec>)
		break;
    2156:	e02b      	b.n	21b0 <baudrate_set+0xa8>
	switch (baudrate) {
    2158:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    215c:	d046      	beq.n	21ec <baudrate_set+0xe4>
    215e:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    2162:	d029      	beq.n	21b8 <baudrate_set+0xb0>
    2164:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    2168:	d020      	beq.n	21ac <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    216a:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    216e:	4770      	bx	lr
	switch (baudrate) {
    2170:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    2174:	d1f9      	bne.n	216a <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    2176:	4a20      	ldr	r2, [pc, #128]	; (21f8 <baudrate_set+0xf0>)
		break;
    2178:	e01a      	b.n	21b0 <baudrate_set+0xa8>
	switch (baudrate) {
    217a:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    217e:	d1f4      	bne.n	216a <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    2180:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    2184:	e014      	b.n	21b0 <baudrate_set+0xa8>
	switch (baudrate) {
    2186:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    218a:	d029      	beq.n	21e0 <baudrate_set+0xd8>
    218c:	d908      	bls.n	21a0 <baudrate_set+0x98>
    218e:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    2192:	d028      	beq.n	21e6 <baudrate_set+0xde>
    2194:	4a19      	ldr	r2, [pc, #100]	; (21fc <baudrate_set+0xf4>)
    2196:	4291      	cmp	r1, r2
    2198:	d1e7      	bne.n	216a <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    219a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    219e:	e007      	b.n	21b0 <baudrate_set+0xa8>
	switch (baudrate) {
    21a0:	4a17      	ldr	r2, [pc, #92]	; (2200 <baudrate_set+0xf8>)
    21a2:	4291      	cmp	r1, r2
    21a4:	d1e1      	bne.n	216a <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    21a6:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    21aa:	e001      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    21ac:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    21b0:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    21b4:	2000      	movs	r0, #0
    21b6:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    21b8:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    21bc:	e7f8      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    21be:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    21c2:	e7f5      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    21c4:	4a0f      	ldr	r2, [pc, #60]	; (2204 <baudrate_set+0xfc>)
		break;
    21c6:	e7f3      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    21c8:	4a0f      	ldr	r2, [pc, #60]	; (2208 <baudrate_set+0x100>)
		break;
    21ca:	e7f1      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    21cc:	4a0f      	ldr	r2, [pc, #60]	; (220c <baudrate_set+0x104>)
		break;
    21ce:	e7ef      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    21d0:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    21d4:	e7ec      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    21d6:	4a0e      	ldr	r2, [pc, #56]	; (2210 <baudrate_set+0x108>)
		break;
    21d8:	e7ea      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    21da:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    21de:	e7e7      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    21e0:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    21e4:	e7e4      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    21e6:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    21ea:	e7e1      	b.n	21b0 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    21ec:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    21f0:	e7de      	b.n	21b0 <baudrate_set+0xa8>
    21f2:	bf00      	nop
    21f4:	004ea000 	.word	0x004ea000
    21f8:	0013b000 	.word	0x0013b000
    21fc:	000f4240 	.word	0x000f4240
    2200:	0003d090 	.word	0x0003d090
    2204:	00275000 	.word	0x00275000
    2208:	003af000 	.word	0x003af000
    220c:	0075c000 	.word	0x0075c000
    2210:	013a9000 	.word	0x013a9000

00002214 <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2214:	6803      	ldr	r3, [r0, #0]
    2216:	689b      	ldr	r3, [r3, #8]
    2218:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    221a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    221e:	b132      	cbz	r2, 222e <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    2220:	2000      	movs	r0, #0
    2222:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    2226:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    222a:	700b      	strb	r3, [r1, #0]

	return 0;
    222c:	4770      	bx	lr
		return -1;
    222e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    2232:	4770      	bx	lr

00002234 <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2234:	6803      	ldr	r3, [r0, #0]
    2236:	689b      	ldr	r3, [r3, #8]
    2238:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    223a:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    223e:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    2242:	2b00      	cmp	r3, #0
    2244:	d0fb      	beq.n	223e <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    2246:	2300      	movs	r3, #0
    2248:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    224c:	4608      	mov	r0, r1
    224e:	4770      	bx	lr

00002250 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2250:	6803      	ldr	r3, [r0, #0]
    2252:	689b      	ldr	r3, [r3, #8]
    2254:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    2256:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    225a:	b132      	cbz	r2, 226a <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    225c:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    2260:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    2264:	f000 000f 	and.w	r0, r0, #15
    2268:	4770      	bx	lr
	u32_t error = 0;
    226a:	2000      	movs	r0, #0
    226c:	e7fa      	b.n	2264 <uart_nrf5_err_check+0x14>

0000226e <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    226e:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    2270:	6803      	ldr	r3, [r0, #0]
    2272:	689b      	ldr	r3, [r3, #8]
    2274:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    2276:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    2278:	e007      	b.n	228a <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    227a:	2000      	movs	r0, #0
    227c:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    2280:	1c58      	adds	r0, r3, #1
    2282:	5ccb      	ldrb	r3, [r1, r3]
    2284:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    2288:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    228a:	4618      	mov	r0, r3
    228c:	1ad5      	subs	r5, r2, r3
    228e:	2d00      	cmp	r5, #0
    2290:	dd03      	ble.n	229a <uart_nrf5_fifo_fill+0x2c>
    2292:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    2296:	2d00      	cmp	r5, #0
    2298:	d1ef      	bne.n	227a <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    229a:	bc30      	pop	{r4, r5}
    229c:	4770      	bx	lr

0000229e <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    229e:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    22a0:	6803      	ldr	r3, [r0, #0]
    22a2:	689b      	ldr	r3, [r3, #8]
    22a4:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    22a6:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    22a8:	e007      	b.n	22ba <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    22aa:	2000      	movs	r0, #0
    22ac:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    22b0:	1c58      	adds	r0, r3, #1
    22b2:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    22b6:	54cd      	strb	r5, [r1, r3]
    22b8:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    22ba:	4618      	mov	r0, r3
    22bc:	1ad5      	subs	r5, r2, r3
    22be:	2d00      	cmp	r5, #0
    22c0:	dd03      	ble.n	22ca <uart_nrf5_fifo_read+0x2c>
    22c2:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    22c6:	2d00      	cmp	r5, #0
    22c8:	d1ef      	bne.n	22aa <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    22ca:	bc30      	pop	{r4, r5}
    22cc:	4770      	bx	lr

000022ce <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22ce:	6803      	ldr	r3, [r0, #0]
    22d0:	689b      	ldr	r3, [r3, #8]
    22d2:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    22d4:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    22d8:	f043 0308 	orr.w	r3, r3, #8
    22dc:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    22e0:	4770      	bx	lr

000022e2 <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22e2:	6803      	ldr	r3, [r0, #0]
    22e4:	689b      	ldr	r3, [r3, #8]
    22e6:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    22e8:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    22ec:	f043 0308 	orr.w	r3, r3, #8
    22f0:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    22f4:	4770      	bx	lr

000022f6 <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    22f6:	6803      	ldr	r3, [r0, #0]
    22f8:	689b      	ldr	r3, [r3, #8]
    22fa:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    22fc:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2300:	4770      	bx	lr

00002302 <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2302:	6803      	ldr	r3, [r0, #0]
    2304:	689b      	ldr	r3, [r3, #8]
    2306:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    2308:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    230c:	f043 0304 	orr.w	r3, r3, #4
    2310:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    2314:	4770      	bx	lr

00002316 <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2316:	6803      	ldr	r3, [r0, #0]
    2318:	689b      	ldr	r3, [r3, #8]
    231a:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    231c:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2320:	f043 0304 	orr.w	r3, r3, #4
    2324:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    2328:	4770      	bx	lr

0000232a <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    232a:	6803      	ldr	r3, [r0, #0]
    232c:	689b      	ldr	r3, [r3, #8]
    232e:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    2330:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    2334:	fab0 f080 	clz	r0, r0
    2338:	0940      	lsrs	r0, r0, #5
    233a:	4770      	bx	lr

0000233c <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    233c:	6803      	ldr	r3, [r0, #0]
    233e:	689b      	ldr	r3, [r3, #8]
    2340:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    2342:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    2346:	4770      	bx	lr

00002348 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    2348:	6803      	ldr	r3, [r0, #0]
    234a:	689b      	ldr	r3, [r3, #8]
    234c:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    234e:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    2352:	f043 0310 	orr.w	r3, r3, #16
    2356:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    235a:	4770      	bx	lr

0000235c <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    235c:	6803      	ldr	r3, [r0, #0]
    235e:	689b      	ldr	r3, [r3, #8]
    2360:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    2362:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    2366:	f043 0310 	orr.w	r3, r3, #16
    236a:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    236e:	4770      	bx	lr

00002370 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    2370:	b510      	push	{r4, lr}
    2372:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2374:	f7ff ffbf 	bl	22f6 <uart_nrf5_irq_tx_ready>
    2378:	b110      	cbz	r0, 2380 <uart_nrf5_irq_is_pending+0x10>
    237a:	2301      	movs	r3, #1
}
    237c:	4618      	mov	r0, r3
    237e:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    2380:	4620      	mov	r0, r4
    2382:	f7ff ffdb 	bl	233c <uart_nrf5_irq_rx_ready>
    2386:	4603      	mov	r3, r0
    2388:	2800      	cmp	r0, #0
    238a:	d0f7      	beq.n	237c <uart_nrf5_irq_is_pending+0xc>
    238c:	2301      	movs	r3, #1
    238e:	e7f5      	b.n	237c <uart_nrf5_irq_is_pending+0xc>

00002390 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    2390:	2001      	movs	r0, #1
    2392:	4770      	bx	lr

00002394 <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    2394:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    2396:	6059      	str	r1, [r3, #4]
    2398:	4770      	bx	lr

0000239a <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    239a:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    239c:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    239e:	685b      	ldr	r3, [r3, #4]
    23a0:	b103      	cbz	r3, 23a4 <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    23a2:	4798      	blx	r3
    23a4:	bd08      	pop	{r3, pc}

000023a6 <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    23a6:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    23a8:	2200      	movs	r2, #0
    23aa:	2101      	movs	r1, #1
    23ac:	2002      	movs	r0, #2
    23ae:	f025 fbc1 	bl	27b34 <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    23b2:	2002      	movs	r0, #2
    23b4:	f025 fb94 	bl	27ae0 <_arch_irq_enable>
    23b8:	bd08      	pop	{r3, pc}
	...

000023bc <uart_nrf5_init>:
{
    23bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    23be:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    23c0:	6803      	ldr	r3, [r0, #0]
    23c2:	689b      	ldr	r3, [r3, #8]
    23c4:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    23c6:	481d      	ldr	r0, [pc, #116]	; (243c <uart_nrf5_init+0x80>)
    23c8:	f025 fd58 	bl	27e7c <device_get_binding>
    23cc:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    23ce:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    23d0:	681f      	ldr	r7, [r3, #0]
    23d2:	f240 1301 	movw	r3, #257	; 0x101
    23d6:	2206      	movs	r2, #6
    23d8:	2100      	movs	r1, #0
    23da:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    23dc:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    23de:	681f      	ldr	r7, [r3, #0]
    23e0:	2300      	movs	r3, #0
    23e2:	2208      	movs	r2, #8
    23e4:	4619      	mov	r1, r3
    23e6:	4630      	mov	r0, r6
    23e8:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    23ea:	2306      	movs	r3, #6
    23ec:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    23f0:	2308      	movs	r3, #8
    23f2:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    23f6:	68a3      	ldr	r3, [r4, #8]
    23f8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    23fc:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    23fe:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    2400:	6822      	ldr	r2, [r4, #0]
    2402:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    2404:	6852      	ldr	r2, [r2, #4]
    2406:	6819      	ldr	r1, [r3, #0]
    2408:	4620      	mov	r0, r4
    240a:	f7ff fe7d 	bl	2108 <baudrate_set>
	if (err) {
    240e:	4606      	mov	r6, r0
    2410:	b108      	cbz	r0, 2416 <uart_nrf5_init+0x5a>
}
    2412:	4630      	mov	r0, r6
    2414:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    2416:	2304      	movs	r3, #4
    2418:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    241c:	2300      	movs	r3, #0
    241e:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    2422:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    2426:	2301      	movs	r3, #1
    2428:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    242a:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    242c:	4b04      	ldr	r3, [pc, #16]	; (2440 <uart_nrf5_init+0x84>)
    242e:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    2430:	6823      	ldr	r3, [r4, #0]
    2432:	689b      	ldr	r3, [r3, #8]
    2434:	689b      	ldr	r3, [r3, #8]
    2436:	4620      	mov	r0, r4
    2438:	4798      	blx	r3
	return 0;
    243a:	e7ea      	b.n	2412 <uart_nrf5_init+0x56>
    243c:	0002ec30 	.word	0x0002ec30
    2440:	0002ec5c 	.word	0x0002ec5c

00002444 <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    2444:	4b08      	ldr	r3, [pc, #32]	; (2468 <rtc_compare_set+0x24>)
    2446:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    244a:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    244e:	1ac0      	subs	r0, r0, r3
    2450:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    2454:	3802      	subs	r0, #2
    2456:	4b05      	ldr	r3, [pc, #20]	; (246c <rtc_compare_set+0x28>)
    2458:	4298      	cmp	r0, r3
    245a:	d904      	bls.n	2466 <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    245c:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    2460:	4b03      	ldr	r3, [pc, #12]	; (2470 <rtc_compare_set+0x2c>)
    2462:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2466:	4770      	bx	lr
    2468:	40011000 	.word	0x40011000
    246c:	007ffffd 	.word	0x007ffffd
    2470:	e000e100 	.word	0xe000e100

00002474 <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    2474:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    2476:	4b15      	ldr	r3, [pc, #84]	; (24cc <rtc_announce_set_next+0x58>)
    2478:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    247c:	4a14      	ldr	r2, [pc, #80]	; (24d0 <rtc_announce_set_next+0x5c>)
    247e:	6811      	ldr	r1, [r2, #0]
    2480:	1a5b      	subs	r3, r3, r1
    2482:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    2486:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    248a:	d917      	bls.n	24bc <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    248c:	4a11      	ldr	r2, [pc, #68]	; (24d4 <rtc_announce_set_next+0x60>)
    248e:	fba2 0203 	umull	r0, r2, r2, r3
    2492:	1a9b      	subs	r3, r3, r2
    2494:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    2498:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    249a:	4a0f      	ldr	r2, [pc, #60]	; (24d8 <rtc_announce_set_next+0x64>)
    249c:	6810      	ldr	r0, [r2, #0]
    249e:	4283      	cmp	r3, r0
    24a0:	d800      	bhi.n	24a4 <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    24a2:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    24a4:	f240 1347 	movw	r3, #327	; 0x147
    24a8:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    24ac:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    24b0:	4a07      	ldr	r2, [pc, #28]	; (24d0 <rtc_announce_set_next+0x5c>)
    24b2:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    24b4:	4b09      	ldr	r3, [pc, #36]	; (24dc <rtc_announce_set_next+0x68>)
    24b6:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    24b8:	f027 f828 	bl	2950c <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    24bc:	4b04      	ldr	r3, [pc, #16]	; (24d0 <rtc_announce_set_next+0x5c>)
    24be:	6818      	ldr	r0, [r3, #0]
    24c0:	f200 1047 	addw	r0, r0, #327	; 0x147
    24c4:	f7ff ffbe 	bl	2444 <rtc_compare_set>
    24c8:	bd08      	pop	{r3, pc}
    24ca:	bf00      	nop
    24cc:	40011000 	.word	0x40011000
    24d0:	200003c8 	.word	0x200003c8
    24d4:	90d4f121 	.word	0x90d4f121
    24d8:	200003c4 	.word	0x200003c4
    24dc:	2000c680 	.word	0x2000c680

000024e0 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    24e0:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    24e2:	2200      	movs	r2, #0
    24e4:	4b02      	ldr	r3, [pc, #8]	; (24f0 <rtc1_nrf5_isr+0x10>)
    24e6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    24ea:	f7ff ffc3 	bl	2474 <rtc_announce_set_next>
    24ee:	bd08      	pop	{r3, pc}
    24f0:	40011000 	.word	0x40011000

000024f4 <_timer_idle_enter>:
{
    24f4:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    24f6:	f246 4335 	movw	r3, #25653	; 0x6435
    24fa:	4298      	cmp	r0, r3
    24fc:	d900      	bls.n	2500 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    24fe:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    2500:	4b05      	ldr	r3, [pc, #20]	; (2518 <_timer_idle_enter+0x24>)
    2502:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    2504:	4b05      	ldr	r3, [pc, #20]	; (251c <_timer_idle_enter+0x28>)
    2506:	681b      	ldr	r3, [r3, #0]
    2508:	f240 1247 	movw	r2, #327	; 0x147
    250c:	fb02 3000 	mla	r0, r2, r0, r3
    2510:	f7ff ff98 	bl	2444 <rtc_compare_set>
    2514:	bd08      	pop	{r3, pc}
    2516:	bf00      	nop
    2518:	200003c4 	.word	0x200003c4
    251c:	200003c8 	.word	0x200003c8

00002520 <_timer_idle_exit>:
{
    2520:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    2522:	2200      	movs	r2, #0
    2524:	4b06      	ldr	r3, [pc, #24]	; (2540 <_timer_idle_exit+0x20>)
    2526:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    252a:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    252e:	4b05      	ldr	r3, [pc, #20]	; (2544 <_timer_idle_exit+0x24>)
    2530:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    2534:	f7ff ff9e 	bl	2474 <rtc_announce_set_next>
	expected_sys_ticks = 1;
    2538:	2201      	movs	r2, #1
    253a:	4b03      	ldr	r3, [pc, #12]	; (2548 <_timer_idle_exit+0x28>)
    253c:	601a      	str	r2, [r3, #0]
    253e:	bd08      	pop	{r3, pc}
    2540:	40011000 	.word	0x40011000
    2544:	e000e100 	.word	0xe000e100
    2548:	200003c4 	.word	0x200003c4

0000254c <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    254c:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    254e:	4818      	ldr	r0, [pc, #96]	; (25b0 <_sys_clock_driver_init+0x64>)
    2550:	f025 fc94 	bl	27e7c <device_get_binding>
	if (!clock) {
    2554:	b348      	cbz	r0, 25aa <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    2556:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    2558:	6812      	ldr	r2, [r2, #0]
    255a:	2101      	movs	r1, #1
    255c:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    255e:	2400      	movs	r4, #0
    2560:	4b14      	ldr	r3, [pc, #80]	; (25b4 <_sys_clock_driver_init+0x68>)
    2562:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    2564:	2601      	movs	r6, #1
    2566:	4b14      	ldr	r3, [pc, #80]	; (25b8 <_sys_clock_driver_init+0x6c>)
    2568:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    256a:	4d14      	ldr	r5, [pc, #80]	; (25bc <_sys_clock_driver_init+0x70>)
    256c:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    2570:	f240 1347 	movw	r3, #327	; 0x147
    2574:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    2578:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    257c:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    2580:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    2584:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    2588:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    258c:	4b0c      	ldr	r3, [pc, #48]	; (25c0 <_sys_clock_driver_init+0x74>)
    258e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    2592:	4622      	mov	r2, r4
    2594:	4631      	mov	r1, r6
    2596:	2011      	movs	r0, #17
    2598:	f025 facc 	bl	27b34 <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    259c:	2011      	movs	r0, #17
    259e:	f025 fa9f 	bl	27ae0 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    25a2:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    25a4:	602e      	str	r6, [r5, #0]

	return 0;
    25a6:	4620      	mov	r0, r4
    25a8:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    25aa:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    25ae:	bd70      	pop	{r4, r5, r6, pc}
    25b0:	0002ec38 	.word	0x0002ec38
    25b4:	200003c8 	.word	0x200003c8
    25b8:	200003c4 	.word	0x200003c4
    25bc:	40011000 	.word	0x40011000
    25c0:	e000e100 	.word	0xe000e100

000025c4 <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    25c4:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    25c6:	4b0d      	ldr	r3, [pc, #52]	; (25fc <_timer_cycle_get_32+0x38>)
    25c8:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    25cc:	e000      	b.n	25d0 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    25ce:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    25d0:	4b0b      	ldr	r3, [pc, #44]	; (2600 <_timer_cycle_get_32+0x3c>)
    25d2:	e9d3 2300 	ldrd	r2, r3, [r3]
    25d6:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    25d8:	f240 1047 	movw	r0, #327	; 0x147
    25dc:	fb00 1212 	mls	r2, r0, r2, r1
    25e0:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    25e4:	4b05      	ldr	r3, [pc, #20]	; (25fc <_timer_cycle_get_32+0x38>)
    25e6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    25ea:	4299      	cmp	r1, r3
    25ec:	d1ef      	bne.n	25ce <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    25ee:	4b05      	ldr	r3, [pc, #20]	; (2604 <_timer_cycle_get_32+0x40>)
    25f0:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    25f2:	fb00 2004 	mla	r0, r0, r4, r2
    25f6:	bc10      	pop	{r4}
    25f8:	4770      	bx	lr
    25fa:	bf00      	nop
    25fc:	40011000 	.word	0x40011000
    2600:	20002c70 	.word	0x20002c70
    2604:	2000c684 	.word	0x2000c684

00002608 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    2608:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    260a:	6803      	ldr	r3, [r0, #0]
    260c:	689b      	ldr	r3, [r3, #8]
    260e:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2610:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    2612:	2000      	movs	r0, #0
    2614:	e000      	b.n	2618 <gpiote_find_channel+0x10>
    2616:	3001      	adds	r0, #1
    2618:	2807      	cmp	r0, #7
    261a:	dc0d      	bgt.n	2638 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    261c:	68d3      	ldr	r3, [r2, #12]
    261e:	40c3      	lsrs	r3, r0
    2620:	f013 0f01 	tst.w	r3, #1
    2624:	d0f7      	beq.n	2616 <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    2626:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    262a:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    262e:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    2632:	428b      	cmp	r3, r1
    2634:	d1ef      	bne.n	2616 <gpiote_find_channel+0xe>
    2636:	e001      	b.n	263c <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    2638:	f06f 0012 	mvn.w	r0, #18
}
    263c:	bc10      	pop	{r4}
    263e:	4770      	bx	lr

00002640 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2640:	6800      	ldr	r0, [r0, #0]
    2642:	6880      	ldr	r0, [r0, #8]
    2644:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2646:	b121      	cbz	r1, 2652 <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    2648:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    264c:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    264e:	2000      	movs	r0, #0
    2650:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    2652:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    2656:	fa21 f202 	lsr.w	r2, r1, r2
    265a:	f002 0201 	and.w	r2, r2, #1
    265e:	601a      	str	r2, [r3, #0]
    2660:	e7f5      	b.n	264e <gpio_nrf5_read+0xe>

00002662 <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2662:	6800      	ldr	r0, [r0, #0]
    2664:	6880      	ldr	r0, [r0, #8]
    2666:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    2668:	b961      	cbnz	r1, 2684 <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    266a:	b12b      	cbz	r3, 2678 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    266c:	2301      	movs	r3, #1
    266e:	fa03 f202 	lsl.w	r2, r3, r2
    2672:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    2676:	e007      	b.n	2688 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    2678:	2301      	movs	r3, #1
    267a:	fa03 f202 	lsl.w	r2, r3, r2
    267e:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    2682:	e001      	b.n	2688 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    2684:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    2688:	2000      	movs	r0, #0
    268a:	4770      	bx	lr

0000268c <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    268c:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    268e:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    2690:	b14a      	cbz	r2, 26a6 <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    2692:	6823      	ldr	r3, [r4, #0]
    2694:	600b      	str	r3, [r1, #0]
	list->head = node;
    2696:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    2698:	6863      	ldr	r3, [r4, #4]
    269a:	b113      	cbz	r3, 26a2 <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    269c:	2000      	movs	r0, #0
    269e:	bc10      	pop	{r4}
    26a0:	4770      	bx	lr
		list->tail = list->head;
    26a2:	6061      	str	r1, [r4, #4]
    26a4:	e7fa      	b.n	269c <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    26a6:	4608      	mov	r0, r1
	return list->head;
    26a8:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    26aa:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    26ac:	2b00      	cmp	r3, #0
    26ae:	d0f5      	beq.n	269c <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    26b0:	4298      	cmp	r0, r3
    26b2:	d002      	beq.n	26ba <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    26b4:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    26b6:	681b      	ldr	r3, [r3, #0]
    26b8:	e7f8      	b.n	26ac <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    26ba:	b13a      	cbz	r2, 26cc <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    26bc:	680b      	ldr	r3, [r1, #0]
    26be:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    26c0:	6863      	ldr	r3, [r4, #4]
    26c2:	4299      	cmp	r1, r3
    26c4:	d009      	beq.n	26da <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    26c6:	2300      	movs	r3, #0
    26c8:	600b      	str	r3, [r1, #0]
    26ca:	e7e7      	b.n	269c <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    26cc:	680b      	ldr	r3, [r1, #0]
    26ce:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    26d0:	6862      	ldr	r2, [r4, #4]
    26d2:	4291      	cmp	r1, r2
    26d4:	d1f7      	bne.n	26c6 <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    26d6:	6063      	str	r3, [r4, #4]
    26d8:	e7f5      	b.n	26c6 <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    26da:	6062      	str	r2, [r4, #4]
    26dc:	e7f3      	b.n	26c6 <gpio_nrf5_manage_callback+0x3a>

000026de <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    26de:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    26e0:	6803      	ldr	r3, [r0, #0]
    26e2:	689b      	ldr	r3, [r3, #8]
    26e4:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    26e6:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    26e8:	b9b9      	cbnz	r1, 271a <gpio_nrf5_enable_callback+0x3c>
    26ea:	460d      	mov	r5, r1
    26ec:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    26ee:	4611      	mov	r1, r2
    26f0:	f7ff ff8a 	bl	2608 <gpiote_find_channel>
		if (i < 0) {
    26f4:	2800      	cmp	r0, #0
    26f6:	db12      	blt.n	271e <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    26f8:	2301      	movs	r3, #1
    26fa:	fa03 f404 	lsl.w	r4, r3, r4
    26fe:	68ba      	ldr	r2, [r7, #8]
    2700:	4314      	orrs	r4, r2
    2702:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    2704:	f100 0240 	add.w	r2, r0, #64	; 0x40
    2708:	2100      	movs	r1, #0
    270a:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    270e:	fa03 f000 	lsl.w	r0, r3, r0
    2712:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    2716:	4628      	mov	r0, r5
    2718:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    271a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    271e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002720 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    2720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2722:	6803      	ldr	r3, [r0, #0]
    2724:	689b      	ldr	r3, [r3, #8]
    2726:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2728:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    272a:	b991      	cbnz	r1, 2752 <gpio_nrf5_disable_callback+0x32>
    272c:	460d      	mov	r5, r1
    272e:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    2730:	4611      	mov	r1, r2
    2732:	f7ff ff69 	bl	2608 <gpiote_find_channel>
		if (i < 0) {
    2736:	2800      	cmp	r0, #0
    2738:	db0d      	blt.n	2756 <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    273a:	2301      	movs	r3, #1
    273c:	fa03 f404 	lsl.w	r4, r3, r4
    2740:	68b2      	ldr	r2, [r6, #8]
    2742:	ea22 0404 	bic.w	r4, r2, r4
    2746:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    2748:	4083      	lsls	r3, r0
    274a:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    274e:	4628      	mov	r0, r5
    2750:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    2752:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    2756:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002758 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    2758:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    275a:	2200      	movs	r2, #0
    275c:	2101      	movs	r1, #1
    275e:	2006      	movs	r0, #6
    2760:	f025 f9e8 	bl	27b34 <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    2764:	2006      	movs	r0, #6
    2766:	f025 f9bb 	bl	27ae0 <_arch_irq_enable>

	return 0;
}
    276a:	2000      	movs	r0, #0
    276c:	bd08      	pop	{r3, pc}

0000276e <gpio_nrf5_port_isr>:
{
    276e:	b570      	push	{r4, r5, r6, lr}
    2770:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    2772:	6803      	ldr	r3, [r0, #0]
    2774:	689b      	ldr	r3, [r3, #8]
    2776:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    2778:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    277a:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    277c:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    277e:	e000      	b.n	2782 <gpio_nrf5_port_isr+0x14>
    2780:	3301      	adds	r3, #1
    2782:	2b07      	cmp	r3, #7
    2784:	dc14      	bgt.n	27b0 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    2786:	f103 0240 	add.w	r2, r3, #64	; 0x40
    278a:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    278e:	2a00      	cmp	r2, #0
    2790:	d0f6      	beq.n	2780 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    2792:	f103 0240 	add.w	r2, r3, #64	; 0x40
    2796:	2000      	movs	r0, #0
    2798:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    279c:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    27a0:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    27a4:	f3c0 2004 	ubfx	r0, r0, #8, #5
    27a8:	2201      	movs	r2, #1
    27aa:	4082      	lsls	r2, r0
    27ac:	4316      	orrs	r6, r2
    27ae:	e7e7      	b.n	2780 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    27b0:	68a3      	ldr	r3, [r4, #8]
    27b2:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    27b4:	2006      	movs	r0, #6
    27b6:	f025 f9a1 	bl	27afc <_arch_irq_disable>
	return list->head;
    27ba:	6824      	ldr	r4, [r4, #0]
    27bc:	e005      	b.n	27ca <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    27be:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    27c0:	b16c      	cbz	r4, 27de <gpio_nrf5_port_isr+0x70>
	return node->next;
    27c2:	6823      	ldr	r3, [r4, #0]
    27c4:	b16b      	cbz	r3, 27e2 <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    27c6:	b172      	cbz	r2, 27e6 <gpio_nrf5_port_isr+0x78>
	return node->next;
    27c8:	6824      	ldr	r4, [r4, #0]
    27ca:	b174      	cbz	r4, 27ea <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    27cc:	68a3      	ldr	r3, [r4, #8]
    27ce:	421e      	tst	r6, r3
    27d0:	d0f5      	beq.n	27be <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    27d2:	6863      	ldr	r3, [r4, #4]
    27d4:	4632      	mov	r2, r6
    27d6:	4621      	mov	r1, r4
    27d8:	4628      	mov	r0, r5
    27da:	4798      	blx	r3
    27dc:	e7ef      	b.n	27be <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    27de:	4623      	mov	r3, r4
    27e0:	e7f0      	b.n	27c4 <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    27e2:	2400      	movs	r4, #0
    27e4:	e7f1      	b.n	27ca <gpio_nrf5_port_isr+0x5c>
    27e6:	2400      	movs	r4, #0
    27e8:	e7ef      	b.n	27ca <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    27ea:	2006      	movs	r0, #6
    27ec:	f025 f978 	bl	27ae0 <_arch_irq_enable>
    27f0:	bd70      	pop	{r4, r5, r6, pc}
	...

000027f4 <gpio_nrf5_config>:
{
    27f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    27f8:	6804      	ldr	r4, [r0, #0]
    27fa:	68a5      	ldr	r5, [r4, #8]
    27fc:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    27fe:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    2800:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    2802:	2900      	cmp	r1, #0
    2804:	d17f      	bne.n	2906 <gpio_nrf5_config+0x112>
    2806:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    2808:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    280c:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    2810:	f403 7440 	and.w	r4, r3, #768	; 0x300
    2814:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    2818:	d025      	beq.n	2866 <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    281a:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    281e:	d024      	beq.n	286a <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    2820:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    2822:	f013 0f01 	tst.w	r3, #1
    2826:	d030      	beq.n	288a <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    2828:	2c0c      	cmp	r4, #12
    282a:	d020      	beq.n	286e <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    282c:	2c04      	cmp	r4, #4
    282e:	d025      	beq.n	287c <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    2830:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    2834:	4938      	ldr	r1, [pc, #224]	; (2918 <gpio_nrf5_config+0x124>)
    2836:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    283a:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    283c:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2840:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    2844:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    2848:	f013 0102 	ands.w	r1, r3, #2
    284c:	d04a      	beq.n	28e4 <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    284e:	f013 0f20 	tst.w	r3, #32
    2852:	d05b      	beq.n	290c <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    2854:	f013 0f40 	tst.w	r3, #64	; 0x40
    2858:	d123      	bne.n	28a2 <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    285a:	f013 0f04 	tst.w	r3, #4
    285e:	d044      	beq.n	28ea <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    2860:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    2864:	e01f      	b.n	28a6 <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    2866:	240c      	movs	r4, #12
    2868:	e7db      	b.n	2822 <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    286a:	2404      	movs	r4, #4
    286c:	e7d9      	b.n	2822 <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    286e:	f04f 0c01 	mov.w	ip, #1
    2872:	fa0c fc02 	lsl.w	ip, ip, r2
    2876:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    287a:	e7d9      	b.n	2830 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    287c:	f04f 0c01 	mov.w	ip, #1
    2880:	fa0c fc02 	lsl.w	ip, ip, r2
    2884:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    2888:	e7d2      	b.n	2830 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    288a:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    288e:	f8df e088 	ldr.w	lr, [pc, #136]	; 2918 <gpio_nrf5_config+0x124>
    2892:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    2896:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    2898:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    289c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    28a0:	e7d2      	b.n	2848 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    28a2:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    28a6:	4614      	mov	r4, r2
    28a8:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    28aa:	68f8      	ldr	r0, [r7, #12]
    28ac:	f7fe fc3e 	bl	112c <__popcountsi2>
    28b0:	2808      	cmp	r0, #8
    28b2:	d02e      	beq.n	2912 <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    28b4:	4621      	mov	r1, r4
    28b6:	4628      	mov	r0, r5
    28b8:	f7ff fea6 	bl	2608 <gpiote_find_channel>
		if (i < 0) {
    28bc:	2800      	cmp	r0, #0
    28be:	db17      	blt.n	28f0 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    28c0:	2301      	movs	r3, #1
    28c2:	fa03 f200 	lsl.w	r2, r3, r0
    28c6:	68fb      	ldr	r3, [r7, #12]
    28c8:	4313      	orrs	r3, r2
    28ca:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    28cc:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    28d0:	0224      	lsls	r4, r4, #8
    28d2:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    28d6:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    28da:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    28de:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    28e2:	4641      	mov	r1, r8
}
    28e4:	4608      	mov	r0, r1
    28e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    28ea:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    28ee:	e7da      	b.n	28a6 <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    28f0:	68fb      	ldr	r3, [r7, #12]
    28f2:	43db      	mvns	r3, r3
    28f4:	fa93 f0a3 	rbit	r0, r3
    28f8:	fab0 f080 	clz	r0, r0
    28fc:	2b00      	cmp	r3, #0
    28fe:	d1df      	bne.n	28c0 <gpio_nrf5_config+0xcc>
    2900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    2904:	e7dc      	b.n	28c0 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    2906:	f06f 0185 	mvn.w	r1, #133	; 0x85
    290a:	e7eb      	b.n	28e4 <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    290c:	f06f 0185 	mvn.w	r1, #133	; 0x85
    2910:	e7e8      	b.n	28e4 <gpio_nrf5_config+0xf0>
			return -EIO;
    2912:	f06f 0104 	mvn.w	r1, #4
    2916:	e7e5      	b.n	28e4 <gpio_nrf5_config+0xf0>
    2918:	0002eca0 	.word	0x0002eca0

0000291c <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    291c:	f04f 0320 	mov.w	r3, #32
    2920:	f3ef 8111 	mrs	r1, BASEPRI
    2924:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    2928:	4b12      	ldr	r3, [pc, #72]	; (2974 <_m16src_stop+0x58>)
    292a:	781a      	ldrb	r2, [r3, #0]
    292c:	b192      	cbz	r2, 2954 <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    292e:	1e53      	subs	r3, r2, #1
    2930:	b2db      	uxtb	r3, r3
    2932:	4810      	ldr	r0, [pc, #64]	; (2974 <_m16src_stop+0x58>)
    2934:	7003      	strb	r3, [r0, #0]
    2936:	b993      	cbnz	r3, 295e <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    2938:	4b0f      	ldr	r3, [pc, #60]	; (2978 <_m16src_stop+0x5c>)
    293a:	781b      	ldrb	r3, [r3, #0]
    293c:	b99b      	cbnz	r3, 2966 <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    293e:	4b0e      	ldr	r3, [pc, #56]	; (2978 <_m16src_stop+0x5c>)
    2940:	2201      	movs	r2, #1
    2942:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2944:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    2948:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    294c:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    294e:	2000      	movs	r0, #0
    2950:	7018      	strb	r0, [r3, #0]

	return 0;
}
    2952:	4770      	bx	lr
    2954:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    2958:	f06f 0077 	mvn.w	r0, #119	; 0x77
    295c:	4770      	bx	lr
    295e:	f381 8811 	msr	BASEPRI, r1
		return 0;
    2962:	2000      	movs	r0, #0
    2964:	4770      	bx	lr
		m16src_ref++;
    2966:	4b03      	ldr	r3, [pc, #12]	; (2974 <_m16src_stop+0x58>)
    2968:	701a      	strb	r2, [r3, #0]
    296a:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    296e:	f06f 000a 	mvn.w	r0, #10
    2972:	4770      	bx	lr
    2974:	200003de 	.word	0x200003de
    2978:	200003dd 	.word	0x200003dd

0000297c <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    297c:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    297e:	2200      	movs	r2, #0
    2980:	2101      	movs	r1, #1
    2982:	4610      	mov	r0, r2
    2984:	f025 f8d6 	bl	27b34 <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    2988:	2000      	movs	r0, #0
    298a:	f025 f8a9 	bl	27ae0 <_arch_irq_enable>

	return 0;
}
    298e:	2000      	movs	r0, #0
    2990:	bd08      	pop	{r3, pc}
	...

00002994 <_m16src_start>:
{
    2994:	b510      	push	{r4, lr}
	__asm__ volatile(
    2996:	f04f 0320 	mov.w	r3, #32
    299a:	f3ef 8411 	mrs	r4, BASEPRI
    299e:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    29a2:	4a2c      	ldr	r2, [pc, #176]	; (2a54 <_m16src_start+0xc0>)
    29a4:	7813      	ldrb	r3, [r2, #0]
    29a6:	1c58      	adds	r0, r3, #1
    29a8:	7010      	strb	r0, [r2, #0]
    29aa:	b153      	cbz	r3, 29c2 <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    29ac:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    29b0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29b4:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    29b8:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    29bc:	d047      	beq.n	2a4e <_m16src_start+0xba>
		return 0;
    29be:	2000      	movs	r0, #0
    29c0:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    29c2:	4a25      	ldr	r2, [pc, #148]	; (2a58 <_m16src_start+0xc4>)
    29c4:	7812      	ldrb	r2, [r2, #0]
    29c6:	b9a2      	cbnz	r2, 29f2 <_m16src_start+0x5e>
	m16src_grd = 1;
    29c8:	2201      	movs	r2, #1
    29ca:	4b23      	ldr	r3, [pc, #140]	; (2a58 <_m16src_start+0xc4>)
    29cc:	701a      	strb	r2, [r3, #0]
    29ce:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    29d2:	b3a1      	cbz	r1, 2a3e <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    29d4:	2000      	movs	r0, #0
    29d6:	f025 f891 	bl	27afc <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    29da:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    29de:	2200      	movs	r2, #0
    29e0:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    29e4:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    29e8:	2201      	movs	r2, #1
    29ea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    29ee:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    29f0:	e009      	b.n	2a06 <_m16src_start+0x72>
		m16src_ref--;
    29f2:	4a18      	ldr	r2, [pc, #96]	; (2a54 <_m16src_start+0xc0>)
    29f4:	7013      	strb	r3, [r2, #0]
    29f6:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    29fa:	f06f 000a 	mvn.w	r0, #10
    29fe:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    2a00:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    2a02:	bf40      	sev
  __ASM volatile ("wfe");
    2a04:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    2a06:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a0a:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    2a0e:	2b00      	cmp	r3, #0
    2a10:	d0f6      	beq.n	2a00 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a12:	2200      	movs	r2, #0
    2a14:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a18:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2a1c:	f011 0f01 	tst.w	r1, #1
    2a20:	d102      	bne.n	2a28 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2a22:	2201      	movs	r2, #1
    2a24:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2a28:	2201      	movs	r2, #1
    2a2a:	4b0c      	ldr	r3, [pc, #48]	; (2a5c <_m16src_start+0xc8>)
    2a2c:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2a30:	2000      	movs	r0, #0
    2a32:	f025 f855 	bl	27ae0 <_arch_irq_enable>
	m16src_grd = 0;
    2a36:	2200      	movs	r2, #0
    2a38:	4b07      	ldr	r3, [pc, #28]	; (2a58 <_m16src_start+0xc4>)
    2a3a:	701a      	strb	r2, [r3, #0]
    2a3c:	e7b8      	b.n	29b0 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a3e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a42:	2200      	movs	r2, #0
    2a44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2a48:	2201      	movs	r2, #1
    2a4a:	601a      	str	r2, [r3, #0]
    2a4c:	e7f3      	b.n	2a36 <_m16src_start+0xa2>
		return -EINPROGRESS;
    2a4e:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2a52:	bd10      	pop	{r4, pc}
    2a54:	200003de 	.word	0x200003de
    2a58:	200003dd 	.word	0x200003dd
    2a5c:	e000e100 	.word	0xe000e100

00002a60 <_power_clock_isr>:
{
    2a60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2a64:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    2a66:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2a6a:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2a6e:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    2a72:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    2a76:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2a7a:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2a7e:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    2a82:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    2a86:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2a8a:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2a8e:	b11d      	cbz	r5, 2a98 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2a90:	f04f 0e00 	mov.w	lr, #0
    2a94:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2a98:	b127      	cbz	r7, 2aa4 <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2a9a:	2700      	movs	r7, #0
    2a9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aa0:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    2aa4:	b132      	cbz	r2, 2ab4 <_power_clock_isr+0x54>
    2aa6:	b129      	cbz	r1, 2ab4 <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2aa8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2aac:	2201      	movs	r2, #1
    2aae:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    2ab2:	611a      	str	r2, [r3, #16]
	if (lf) {
    2ab4:	b126      	cbz	r6, 2ac0 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2ab6:	2200      	movs	r2, #0
    2ab8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2abc:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    2ac0:	b910      	cbnz	r0, 2ac8 <_power_clock_isr+0x68>
	if (ctto) {
    2ac2:	b964      	cbnz	r4, 2ade <_power_clock_isr+0x7e>
    2ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    2ac8:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    2acc:	2100      	movs	r1, #0
    2ace:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    2ad2:	4640      	mov	r0, r8
    2ad4:	f7ff ff22 	bl	291c <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    2ad8:	2301      	movs	r3, #1
    2ada:	6173      	str	r3, [r6, #20]
    2adc:	e7f1      	b.n	2ac2 <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    2ade:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2ae2:	2100      	movs	r1, #0
    2ae4:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2ae8:	2201      	movs	r2, #1
    2aea:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2aee:	4640      	mov	r0, r8
    2af0:	f7ff ff50 	bl	2994 <_m16src_start>
		if (!err) {
    2af4:	2800      	cmp	r0, #0
    2af6:	d1e5      	bne.n	2ac4 <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2af8:	2201      	movs	r2, #1
    2afa:	4b02      	ldr	r3, [pc, #8]	; (2b04 <_power_clock_isr+0xa4>)
    2afc:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    2b00:	e7e0      	b.n	2ac4 <_power_clock_isr+0x64>
    2b02:	bf00      	nop
    2b04:	e000e100 	.word	0xe000e100

00002b08 <_k32src_start>:
	__asm__ volatile(
    2b08:	f04f 0220 	mov.w	r2, #32
    2b0c:	f3ef 8311 	mrs	r3, BASEPRI
    2b10:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    2b14:	4a38      	ldr	r2, [pc, #224]	; (2bf8 <_k32src_start+0xf0>)
    2b16:	7812      	ldrb	r2, [r2, #0]
    2b18:	b152      	cbz	r2, 2b30 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2b1a:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2b1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b22:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2b26:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2b2a:	d062      	beq.n	2bf2 <_k32src_start+0xea>
		return 0;
    2b2c:	2000      	movs	r0, #0
    2b2e:	4770      	bx	lr
{
    2b30:	b570      	push	{r4, r5, r6, lr}
    2b32:	460d      	mov	r5, r1
    2b34:	4604      	mov	r4, r0
	k32src_initialized = 1;
    2b36:	2601      	movs	r6, #1
    2b38:	4a2f      	ldr	r2, [pc, #188]	; (2bf8 <_k32src_start+0xf0>)
    2b3a:	7016      	strb	r6, [r2, #0]
    2b3c:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2b40:	2000      	movs	r0, #0
    2b42:	f024 ffdb 	bl	27afc <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b46:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b4a:	2200      	movs	r2, #0
    2b4c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2b50:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    2b54:	2102      	movs	r1, #2
    2b56:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2b5a:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2b5e:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2b60:	e002      	b.n	2b68 <_k32src_start+0x60>
    2b62:	bf20      	wfe
  __ASM volatile ("sev");
    2b64:	bf40      	sev
  __ASM volatile ("wfe");
    2b66:	bf20      	wfe
    2b68:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b6c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2b70:	2b00      	cmp	r3, #0
    2b72:	d0f6      	beq.n	2b62 <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    2b74:	2100      	movs	r1, #0
    2b76:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b7a:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2b7e:	f012 0f02 	tst.w	r2, #2
    2b82:	d102      	bne.n	2b8a <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    2b84:	2202      	movs	r2, #2
    2b86:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2b8a:	2201      	movs	r2, #1
    2b8c:	4b1b      	ldr	r3, [pc, #108]	; (2bfc <_k32src_start+0xf4>)
    2b8e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    2b92:	2000      	movs	r0, #0
    2b94:	f024 ffa4 	bl	27ae0 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2b98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2b9c:	2218      	movs	r2, #24
    2b9e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    2ba2:	2200      	movs	r2, #0
    2ba4:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2ba8:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2bac:	f015 0f03 	tst.w	r5, #3
    2bb0:	d008      	beq.n	2bc4 <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2bb2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2bb6:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    2bba:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2bbe:	d015      	beq.n	2bec <_k32src_start+0xe4>
		return 0;
    2bc0:	2000      	movs	r0, #0
    2bc2:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    2bc4:	2210      	movs	r2, #16
    2bc6:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    2bca:	2218      	movs	r2, #24
    2bcc:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    2bd0:	2201      	movs	r2, #1
    2bd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    2bd6:	2100      	movs	r1, #0
    2bd8:	4620      	mov	r0, r4
    2bda:	f7ff fedb 	bl	2994 <_m16src_start>
		if (!err) {
    2bde:	2800      	cmp	r0, #0
    2be0:	d1e7      	bne.n	2bb2 <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2be2:	2201      	movs	r2, #1
    2be4:	4b05      	ldr	r3, [pc, #20]	; (2bfc <_k32src_start+0xf4>)
    2be6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    2bea:	e7e2      	b.n	2bb2 <_k32src_start+0xaa>
		return -EINPROGRESS;
    2bec:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    2bf0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    2bf2:	f06f 0076 	mvn.w	r0, #118	; 0x76
    2bf6:	4770      	bx	lr
    2bf8:	200003dc 	.word	0x200003dc
    2bfc:	e000e100 	.word	0xe000e100

00002c00 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    2c00:	2000      	movs	r0, #0
    2c02:	4770      	bx	lr

00002c04 <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    2c04:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    2c06:	680b      	ldr	r3, [r1, #0]
    2c08:	3301      	adds	r3, #1
    2c0a:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    2c0c:	4b01      	ldr	r3, [pc, #4]	; (2c14 <char_out+0x10>)
    2c0e:	681b      	ldr	r3, [r3, #0]
    2c10:	4798      	blx	r3
}
    2c12:	bd08      	pop	{r3, pc}
    2c14:	2000b97c 	.word	0x2000b97c

00002c18 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2c18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2c1c:	b083      	sub	sp, #12
    2c1e:	4606      	mov	r6, r0
    2c20:	9101      	str	r1, [sp, #4]
    2c22:	4691      	mov	r9, r2
    2c24:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    2c26:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2c28:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2c2c:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2c2e:	4653      	mov	r3, sl

	for (; size; size--) {
    2c30:	e009      	b.n	2c46 <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    2c32:	2809      	cmp	r0, #9
    2c34:	d91f      	bls.n	2c76 <_printk_hex_ulong+0x5e>
    2c36:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2c38:	9901      	ldr	r1, [sp, #4]
    2c3a:	4418      	add	r0, r3
    2c3c:	47b0      	blx	r6
			digits++;
    2c3e:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2c40:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    2c44:	462b      	mov	r3, r5
	for (; size; size--) {
    2c46:	b323      	cbz	r3, 2c92 <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2c48:	1e5d      	subs	r5, r3, #1
    2c4a:	00a8      	lsls	r0, r5, #2
    2c4c:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2c50:	f010 000f 	ands.w	r0, r0, #15
    2c54:	d1ed      	bne.n	2c32 <_printk_hex_ulong+0x1a>
    2c56:	f1b8 0f00 	cmp.w	r8, #0
    2c5a:	d1ea      	bne.n	2c32 <_printk_hex_ulong+0x1a>
    2c5c:	2b01      	cmp	r3, #1
    2c5e:	d0e8      	beq.n	2c32 <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2c60:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    2c64:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c66:	459a      	cmp	sl, r3
    2c68:	dc11      	bgt.n	2c8e <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2c6a:	2f01      	cmp	r7, #1
    2c6c:	d005      	beq.n	2c7a <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2c6e:	2f02      	cmp	r7, #2
    2c70:	d008      	beq.n	2c84 <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    2c72:	46da      	mov	sl, fp
    2c74:	e7e6      	b.n	2c44 <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    2c76:	2330      	movs	r3, #48	; 0x30
    2c78:	e7de      	b.n	2c38 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2c7a:	9901      	ldr	r1, [sp, #4]
    2c7c:	2030      	movs	r0, #48	; 0x30
    2c7e:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2c80:	46da      	mov	sl, fp
    2c82:	e7df      	b.n	2c44 <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    2c84:	9901      	ldr	r1, [sp, #4]
    2c86:	2020      	movs	r0, #32
    2c88:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2c8a:	46da      	mov	sl, fp
    2c8c:	e7da      	b.n	2c44 <_printk_hex_ulong+0x2c>
    2c8e:	46da      	mov	sl, fp
    2c90:	e7d8      	b.n	2c44 <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    2c92:	2f03      	cmp	r7, #3
    2c94:	d002      	beq.n	2c9c <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2c96:	b003      	add	sp, #12
    2c98:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2c9c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2c9e:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    2ca2:	1e65      	subs	r5, r4, #1
    2ca4:	2c00      	cmp	r4, #0
    2ca6:	ddf6      	ble.n	2c96 <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2ca8:	9901      	ldr	r1, [sp, #4]
    2caa:	2020      	movs	r0, #32
    2cac:	47b0      	blx	r6
		while (remaining-- > 0) {
    2cae:	462c      	mov	r4, r5
    2cb0:	e7f7      	b.n	2ca2 <_printk_hex_ulong+0x8a>
	...

00002cb4 <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2cb4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2cb8:	b083      	sub	sp, #12
    2cba:	4682      	mov	sl, r0
    2cbc:	9101      	str	r1, [sp, #4]
    2cbe:	469b      	mov	fp, r3
    2cc0:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    2cc2:	2f00      	cmp	r7, #0
    2cc4:	dd07      	ble.n	2cd6 <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    2cc6:	4615      	mov	r5, r2
    2cc8:	f04f 0901 	mov.w	r9, #1
    2ccc:	260a      	movs	r6, #10
    2cce:	f04f 0800 	mov.w	r8, #0
    2cd2:	4c22      	ldr	r4, [pc, #136]	; (2d5c <_printk_dec_ulong+0xa8>)
    2cd4:	e015      	b.n	2d02 <_printk_dec_ulong+0x4e>
		min_width = 1;
    2cd6:	2701      	movs	r7, #1
    2cd8:	e7f5      	b.n	2cc6 <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    2cda:	1c60      	adds	r0, r4, #1
    2cdc:	fbb5 f0f0 	udiv	r0, r5, r0
    2ce0:	9901      	ldr	r1, [sp, #4]
    2ce2:	3030      	adds	r0, #48	; 0x30
    2ce4:	47d0      	blx	sl
			digits++;
    2ce6:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    2cea:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    2cee:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    2cf0:	1c63      	adds	r3, r4, #1
    2cf2:	fbb5 f2f3 	udiv	r2, r5, r3
    2cf6:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    2cfa:	4b19      	ldr	r3, [pc, #100]	; (2d60 <_printk_dec_ulong+0xac>)
    2cfc:	fba3 3404 	umull	r3, r4, r3, r4
    2d00:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    2d02:	2c08      	cmp	r4, #8
    2d04:	d914      	bls.n	2d30 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    2d06:	f1b8 0f00 	cmp.w	r8, #0
    2d0a:	d1e6      	bne.n	2cda <_printk_dec_ulong+0x26>
    2d0c:	42ac      	cmp	r4, r5
    2d0e:	d3e4      	bcc.n	2cda <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    2d10:	42be      	cmp	r6, r7
    2d12:	dcec      	bgt.n	2cee <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    2d14:	f1bb 0f02 	cmp.w	fp, #2
    2d18:	d8e9      	bhi.n	2cee <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2d1a:	f1bb 0f01 	cmp.w	fp, #1
    2d1e:	d005      	beq.n	2d2c <_printk_dec_ulong+0x78>
    2d20:	2020      	movs	r0, #32
    2d22:	9901      	ldr	r1, [sp, #4]
    2d24:	47d0      	blx	sl
			digits++;
    2d26:	f109 0901 	add.w	r9, r9, #1
    2d2a:	e7e0      	b.n	2cee <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2d2c:	2030      	movs	r0, #48	; 0x30
    2d2e:	e7f8      	b.n	2d22 <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2d30:	9901      	ldr	r1, [sp, #4]
    2d32:	f105 0030 	add.w	r0, r5, #48	; 0x30
    2d36:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2d38:	f1bb 0f03 	cmp.w	fp, #3
    2d3c:	d002      	beq.n	2d44 <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2d3e:	b003      	add	sp, #12
    2d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    2d44:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2d48:	e003      	b.n	2d52 <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2d4a:	9901      	ldr	r1, [sp, #4]
    2d4c:	2020      	movs	r0, #32
    2d4e:	47d0      	blx	sl
		while (remaining-- > 0) {
    2d50:	4627      	mov	r7, r4
    2d52:	1e7c      	subs	r4, r7, #1
    2d54:	2f00      	cmp	r7, #0
    2d56:	dcf8      	bgt.n	2d4a <_printk_dec_ulong+0x96>
    2d58:	e7f1      	b.n	2d3e <_printk_dec_ulong+0x8a>
    2d5a:	bf00      	nop
    2d5c:	3b9ac9ff 	.word	0x3b9ac9ff
    2d60:	cccccccd 	.word	0xcccccccd

00002d64 <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    2d64:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    2d66:	680c      	ldr	r4, [r1, #0]
    2d68:	b154      	cbz	r4, 2d80 <str_out+0x1c>
    2d6a:	688b      	ldr	r3, [r1, #8]
    2d6c:	684a      	ldr	r2, [r1, #4]
    2d6e:	4293      	cmp	r3, r2
    2d70:	da06      	bge.n	2d80 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    2d72:	3a01      	subs	r2, #1
    2d74:	4293      	cmp	r3, r2
    2d76:	d008      	beq.n	2d8a <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2d78:	1c5a      	adds	r2, r3, #1
    2d7a:	608a      	str	r2, [r1, #8]
    2d7c:	54e0      	strb	r0, [r4, r3]
    2d7e:	e002      	b.n	2d86 <str_out+0x22>
		ctx->count++;
    2d80:	688b      	ldr	r3, [r1, #8]
    2d82:	3301      	adds	r3, #1
    2d84:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    2d86:	bc10      	pop	{r4}
    2d88:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2d8a:	1c5a      	adds	r2, r3, #1
    2d8c:	608a      	str	r2, [r1, #8]
    2d8e:	2200      	movs	r2, #0
    2d90:	54e2      	strb	r2, [r4, r3]
    2d92:	e7f8      	b.n	2d86 <str_out+0x22>

00002d94 <__printk_hook_install>:
	_char_out = fn;
    2d94:	4b01      	ldr	r3, [pc, #4]	; (2d9c <__printk_hook_install+0x8>)
    2d96:	6018      	str	r0, [r3, #0]
    2d98:	4770      	bx	lr
    2d9a:	bf00      	nop
    2d9c:	2000b97c 	.word	0x2000b97c

00002da0 <_vprintk>:
{
    2da0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    2da4:	b084      	sub	sp, #16
    2da6:	4607      	mov	r7, r0
    2da8:	460e      	mov	r6, r1
    2daa:	4614      	mov	r4, r2
    2dac:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2dae:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    2db2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    2db6:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    2db8:	4645      	mov	r5, r8
	while (*fmt) {
    2dba:	e104      	b.n	2fc6 <_vprintk+0x226>
			switch (*fmt) {
    2dbc:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    2dc0:	2b55      	cmp	r3, #85	; 0x55
    2dc2:	f200 80f1 	bhi.w	2fa8 <_vprintk+0x208>
    2dc6:	e8df f013 	tbh	[pc, r3, lsl #1]
    2dca:	00ea      	.short	0x00ea
    2dcc:	00ef00ef 	.word	0x00ef00ef
    2dd0:	00ef00ef 	.word	0x00ef00ef
    2dd4:	00ef00ef 	.word	0x00ef00ef
    2dd8:	010800ef 	.word	0x010800ef
    2ddc:	00ef00ef 	.word	0x00ef00ef
    2de0:	00590056 	.word	0x00590056
    2de4:	00590059 	.word	0x00590059
    2de8:	00590059 	.word	0x00590059
    2dec:	00590059 	.word	0x00590059
    2df0:	00590059 	.word	0x00590059
    2df4:	00ef00ef 	.word	0x00ef00ef
    2df8:	00ef00ef 	.word	0x00ef00ef
    2dfc:	00ef00ef 	.word	0x00ef00ef
    2e00:	00ef00ef 	.word	0x00ef00ef
    2e04:	00ef00ef 	.word	0x00ef00ef
    2e08:	00ef00ef 	.word	0x00ef00ef
    2e0c:	00ef00ef 	.word	0x00ef00ef
    2e10:	00ef00ef 	.word	0x00ef00ef
    2e14:	00ef00ef 	.word	0x00ef00ef
    2e18:	00ef00ef 	.word	0x00ef00ef
    2e1c:	00ef00ef 	.word	0x00ef00ef
    2e20:	00ef00ef 	.word	0x00ef00ef
    2e24:	00ef00ef 	.word	0x00ef00ef
    2e28:	00ef00ef 	.word	0x00ef00ef
    2e2c:	00ef00ef 	.word	0x00ef00ef
    2e30:	00ef00bc 	.word	0x00ef00bc
    2e34:	00ef00ef 	.word	0x00ef00ef
    2e38:	00ef00ef 	.word	0x00ef00ef
    2e3c:	00ef00ef 	.word	0x00ef00ef
    2e40:	00ef00ef 	.word	0x00ef00ef
    2e44:	00e200ef 	.word	0x00e200ef
    2e48:	00ef0076 	.word	0x00ef0076
    2e4c:	00ef00ef 	.word	0x00ef00ef
    2e50:	007600fd 	.word	0x007600fd
    2e54:	00ef00ef 	.word	0x00ef00ef
    2e58:	00ef0073 	.word	0x00ef0073
    2e5c:	00ef00ef 	.word	0x00ef00ef
    2e60:	00ef00b2 	.word	0x00ef00b2
    2e64:	00d500ef 	.word	0x00d500ef
    2e68:	009900ef 	.word	0x009900ef
    2e6c:	00ef00ef 	.word	0x00ef00ef
    2e70:	00ef00bc 	.word	0x00ef00bc
    2e74:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    2e76:	f1ba 0f00 	cmp.w	sl, #0
    2e7a:	db10      	blt.n	2e9e <_vprintk+0xfe>
				if (min_width < 0) {
    2e7c:	f1ba 0f00 	cmp.w	sl, #0
    2e80:	db13      	blt.n	2eaa <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    2e82:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    2e86:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2e8a:	4418      	add	r0, r3
    2e8c:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2e90:	f1b9 0f00 	cmp.w	r9, #0
    2e94:	f040 8096 	bne.w	2fc4 <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2e98:	f04f 0902 	mov.w	r9, #2
    2e9c:	e092      	b.n	2fc4 <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2e9e:	f1b9 0f00 	cmp.w	r9, #0
    2ea2:	d1eb      	bne.n	2e7c <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    2ea4:	f04f 0901 	mov.w	r9, #1
    2ea8:	e08c      	b.n	2fc4 <_vprintk+0x224>
					min_width = *fmt - '0';
    2eaa:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2eae:	e7ef      	b.n	2e90 <_vprintk+0xf0>
				long_ctr++;
    2eb0:	f108 0801 	add.w	r8, r8, #1
    2eb4:	e086      	b.n	2fc4 <_vprintk+0x224>
				if (long_ctr < 2) {
    2eb6:	f1b8 0f01 	cmp.w	r8, #1
    2eba:	dd13      	ble.n	2ee4 <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    2ebc:	9b03      	ldr	r3, [sp, #12]
    2ebe:	3307      	adds	r3, #7
    2ec0:	f023 0307 	bic.w	r3, r3, #7
    2ec4:	f103 0208 	add.w	r2, r3, #8
    2ec8:	9203      	str	r2, [sp, #12]
    2eca:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    2ecc:	2d00      	cmp	r5, #0
    2ece:	db0e      	blt.n	2eee <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    2ed0:	f8cd a000 	str.w	sl, [sp]
    2ed4:	464b      	mov	r3, r9
    2ed6:	462a      	mov	r2, r5
    2ed8:	4631      	mov	r1, r6
    2eda:	4638      	mov	r0, r7
    2edc:	f7ff feea 	bl	2cb4 <_printk_dec_ulong>
			might_format = 0;
    2ee0:	2500      	movs	r5, #0
				break;
    2ee2:	e06f      	b.n	2fc4 <_vprintk+0x224>
					d = va_arg(ap, long);
    2ee4:	9b03      	ldr	r3, [sp, #12]
    2ee6:	1d1a      	adds	r2, r3, #4
    2ee8:	9203      	str	r2, [sp, #12]
    2eea:	681d      	ldr	r5, [r3, #0]
    2eec:	e7ee      	b.n	2ecc <_vprintk+0x12c>
					out((int)'-', ctx);
    2eee:	4631      	mov	r1, r6
    2ef0:	202d      	movs	r0, #45	; 0x2d
    2ef2:	47b8      	blx	r7
					d = -d;
    2ef4:	426d      	negs	r5, r5
					min_width--;
    2ef6:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    2efa:	e7e9      	b.n	2ed0 <_vprintk+0x130>
				if (long_ctr < 2) {
    2efc:	f1b8 0f01 	cmp.w	r8, #1
    2f00:	dd10      	ble.n	2f24 <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    2f02:	9b03      	ldr	r3, [sp, #12]
    2f04:	3307      	adds	r3, #7
    2f06:	f023 0307 	bic.w	r3, r3, #7
    2f0a:	f103 0208 	add.w	r2, r3, #8
    2f0e:	9203      	str	r2, [sp, #12]
    2f10:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    2f12:	f8cd a000 	str.w	sl, [sp]
    2f16:	464b      	mov	r3, r9
    2f18:	4631      	mov	r1, r6
    2f1a:	4638      	mov	r0, r7
    2f1c:	f7ff feca 	bl	2cb4 <_printk_dec_ulong>
			might_format = 0;
    2f20:	2500      	movs	r5, #0
				break;
    2f22:	e04f      	b.n	2fc4 <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    2f24:	9b03      	ldr	r3, [sp, #12]
    2f26:	1d1a      	adds	r2, r3, #4
    2f28:	9203      	str	r2, [sp, #12]
    2f2a:	681a      	ldr	r2, [r3, #0]
    2f2c:	e7f1      	b.n	2f12 <_vprintk+0x172>
				  out('0', ctx);
    2f2e:	4631      	mov	r1, r6
    2f30:	2030      	movs	r0, #48	; 0x30
    2f32:	47b8      	blx	r7
				  out('x', ctx);
    2f34:	4631      	mov	r1, r6
    2f36:	2078      	movs	r0, #120	; 0x78
    2f38:	47b8      	blx	r7
				  min_width = 8;
    2f3a:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2f3e:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    2f42:	f1b8 0f01 	cmp.w	r8, #1
    2f46:	dd10      	ble.n	2f6a <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2f48:	9b03      	ldr	r3, [sp, #12]
    2f4a:	3307      	adds	r3, #7
    2f4c:	f023 0307 	bic.w	r3, r3, #7
    2f50:	f103 0208 	add.w	r2, r3, #8
    2f54:	9203      	str	r2, [sp, #12]
    2f56:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2f58:	f8cd a000 	str.w	sl, [sp]
    2f5c:	464b      	mov	r3, r9
    2f5e:	4631      	mov	r1, r6
    2f60:	4638      	mov	r0, r7
    2f62:	f7ff fe59 	bl	2c18 <_printk_hex_ulong>
			might_format = 0;
    2f66:	2500      	movs	r5, #0
				break;
    2f68:	e02c      	b.n	2fc4 <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2f6a:	9b03      	ldr	r3, [sp, #12]
    2f6c:	1d1a      	adds	r2, r3, #4
    2f6e:	9203      	str	r2, [sp, #12]
    2f70:	681a      	ldr	r2, [r3, #0]
    2f72:	e7f1      	b.n	2f58 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    2f74:	9b03      	ldr	r3, [sp, #12]
    2f76:	1d1a      	adds	r2, r3, #4
    2f78:	9203      	str	r2, [sp, #12]
    2f7a:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2f7c:	e002      	b.n	2f84 <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2f7e:	3501      	adds	r5, #1
    2f80:	4631      	mov	r1, r6
    2f82:	47b8      	blx	r7
				while (*s)
    2f84:	7828      	ldrb	r0, [r5, #0]
    2f86:	2800      	cmp	r0, #0
    2f88:	d1f9      	bne.n	2f7e <_vprintk+0x1de>
			might_format = 0;
    2f8a:	2500      	movs	r5, #0
    2f8c:	e01a      	b.n	2fc4 <_vprintk+0x224>
				int c = va_arg(ap, int);
    2f8e:	9b03      	ldr	r3, [sp, #12]
    2f90:	1d1a      	adds	r2, r3, #4
    2f92:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    2f94:	4631      	mov	r1, r6
    2f96:	6818      	ldr	r0, [r3, #0]
    2f98:	47b8      	blx	r7
			might_format = 0;
    2f9a:	2500      	movs	r5, #0
				break;
    2f9c:	e012      	b.n	2fc4 <_vprintk+0x224>
				out((int)'%', ctx);
    2f9e:	4631      	mov	r1, r6
    2fa0:	2025      	movs	r0, #37	; 0x25
    2fa2:	47b8      	blx	r7
			might_format = 0;
    2fa4:	2500      	movs	r5, #0
				break;
    2fa6:	e00d      	b.n	2fc4 <_vprintk+0x224>
				out((int)'%', ctx);
    2fa8:	4631      	mov	r1, r6
    2faa:	2025      	movs	r0, #37	; 0x25
    2fac:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2fae:	4631      	mov	r1, r6
    2fb0:	7820      	ldrb	r0, [r4, #0]
    2fb2:	47b8      	blx	r7
			might_format = 0;
    2fb4:	2500      	movs	r5, #0
				break;
    2fb6:	e005      	b.n	2fc4 <_vprintk+0x224>
				long_ctr = 0;
    2fb8:	46a8      	mov	r8, r5
				min_width = -1;
    2fba:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    2fbe:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    2fc2:	2501      	movs	r5, #1
		++fmt;
    2fc4:	3401      	adds	r4, #1
	while (*fmt) {
    2fc6:	7820      	ldrb	r0, [r4, #0]
    2fc8:	b150      	cbz	r0, 2fe0 <_vprintk+0x240>
		if (!might_format) {
    2fca:	2d00      	cmp	r5, #0
    2fcc:	f47f aef6 	bne.w	2dbc <_vprintk+0x1c>
			if (*fmt != '%') {
    2fd0:	2825      	cmp	r0, #37	; 0x25
    2fd2:	d0f1      	beq.n	2fb8 <_vprintk+0x218>
				out((int)*fmt, ctx);
    2fd4:	4631      	mov	r1, r6
    2fd6:	47b8      	blx	r7
    2fd8:	e7f4      	b.n	2fc4 <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    2fda:	f04f 0903 	mov.w	r9, #3
    2fde:	e7f1      	b.n	2fc4 <_vprintk+0x224>
}
    2fe0:	b004      	add	sp, #16
    2fe2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

00002fe8 <vprintk>:
{
    2fe8:	b510      	push	{r4, lr}
    2fea:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    2fec:	ac02      	add	r4, sp, #8
    2fee:	2300      	movs	r3, #0
    2ff0:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    2ff4:	460b      	mov	r3, r1
    2ff6:	4602      	mov	r2, r0
    2ff8:	4621      	mov	r1, r4
    2ffa:	4803      	ldr	r0, [pc, #12]	; (3008 <vprintk+0x20>)
    2ffc:	f7ff fed0 	bl	2da0 <_vprintk>
}
    3000:	9801      	ldr	r0, [sp, #4]
    3002:	b002      	add	sp, #8
    3004:	bd10      	pop	{r4, pc}
    3006:	bf00      	nop
    3008:	00002c05 	.word	0x00002c05

0000300c <printk>:
{
    300c:	b40f      	push	{r0, r1, r2, r3}
    300e:	b500      	push	{lr}
    3010:	b083      	sub	sp, #12
    3012:	a904      	add	r1, sp, #16
    3014:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    3018:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    301a:	f7ff ffe5 	bl	2fe8 <vprintk>
}
    301e:	b003      	add	sp, #12
    3020:	f85d eb04 	ldr.w	lr, [sp], #4
    3024:	b004      	add	sp, #16
    3026:	4770      	bx	lr

00003028 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    3028:	b40c      	push	{r2, r3}
    302a:	b510      	push	{r4, lr}
    302c:	b084      	sub	sp, #16
    302e:	4604      	mov	r4, r0
    3030:	ab06      	add	r3, sp, #24
    3032:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    3036:	9001      	str	r0, [sp, #4]
    3038:	9102      	str	r1, [sp, #8]
    303a:	2100      	movs	r1, #0
    303c:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    303e:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    3040:	a901      	add	r1, sp, #4
    3042:	4807      	ldr	r0, [pc, #28]	; (3060 <snprintk+0x38>)
    3044:	f7ff feac 	bl	2da0 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    3048:	9b03      	ldr	r3, [sp, #12]
    304a:	9a02      	ldr	r2, [sp, #8]
    304c:	4293      	cmp	r3, r2
    304e:	da01      	bge.n	3054 <snprintk+0x2c>
		str[ctx.count] = '\0';
    3050:	2200      	movs	r2, #0
    3052:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    3054:	9803      	ldr	r0, [sp, #12]
    3056:	b004      	add	sp, #16
    3058:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    305c:	b002      	add	sp, #8
    305e:	4770      	bx	lr
    3060:	00002d65 	.word	0x00002d65

00003064 <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    3064:	4770      	bx	lr

00003066 <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    3066:	428b      	cmp	r3, r1
    3068:	d901      	bls.n	306e <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    306a:	2000      	movs	r0, #0
    306c:	4770      	bx	lr
{
    306e:	b510      	push	{r4, lr}
    3070:	461c      	mov	r4, r3
    3072:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    3074:	461a      	mov	r2, r3
    3076:	f7fd f923 	bl	2c0 <memcpy>
		return from_len;
    307a:	4620      	mov	r0, r4
    307c:	bd10      	pop	{r4, pc}

0000307e <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    307e:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    3080:	f027 fc76 	bl	2a970 <memset>
    3084:	bd08      	pop	{r3, pc}

00003086 <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    3086:	09c3      	lsrs	r3, r0, #7
    3088:	005a      	lsls	r2, r3, #1
    308a:	4413      	add	r3, r2
    308c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    3090:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    3094:	b2c0      	uxtb	r0, r0
    3096:	4770      	bx	lr

00003098 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    3098:	b4f0      	push	{r4, r5, r6, r7}
    309a:	b08c      	sub	sp, #48	; 0x30
    309c:	4604      	mov	r4, r0
    309e:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    30a0:	ad01      	add	r5, sp, #4
    30a2:	4e2a      	ldr	r6, [pc, #168]	; (314c <tc_aes128_set_encrypt_key+0xb4>)
    30a4:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    30a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    30a8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    30aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    30ac:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    30b0:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    30b4:	2c00      	cmp	r4, #0
    30b6:	d044      	beq.n	3142 <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    30b8:	2f00      	cmp	r7, #0
    30ba:	d044      	beq.n	3146 <tc_aes128_set_encrypt_key+0xae>
    30bc:	2200      	movs	r2, #0
    30be:	e00f      	b.n	30e0 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    30c0:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    30c4:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    30c8:	784b      	ldrb	r3, [r1, #1]
    30ca:	041b      	lsls	r3, r3, #16
    30cc:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    30d0:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    30d2:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    30d6:	78c9      	ldrb	r1, [r1, #3]
    30d8:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    30da:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    30de:	3201      	adds	r2, #1
    30e0:	2a03      	cmp	r2, #3
    30e2:	d9ed      	bls.n	30c0 <tc_aes128_set_encrypt_key+0x28>
    30e4:	e006      	b.n	30f4 <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    30e6:	1f11      	subs	r1, r2, #4
    30e8:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    30ec:	404b      	eors	r3, r1
    30ee:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    30f2:	3201      	adds	r2, #1
    30f4:	2a2b      	cmp	r2, #43	; 0x2b
    30f6:	d820      	bhi.n	313a <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    30f8:	1e53      	subs	r3, r2, #1
    30fa:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    30fe:	f012 0f03 	tst.w	r2, #3
    3102:	d1f0      	bne.n	30e6 <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    3104:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    3108:	0e19      	lsrs	r1, r3, #24
    310a:	4811      	ldr	r0, [pc, #68]	; (3150 <tc_aes128_set_encrypt_key+0xb8>)
    310c:	5c45      	ldrb	r5, [r0, r1]
    310e:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3112:	5c41      	ldrb	r1, [r0, r1]
    3114:	0409      	lsls	r1, r1, #16
    3116:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    311a:	f3c3 2507 	ubfx	r5, r3, #8, #8
    311e:	5d45      	ldrb	r5, [r0, r5]
    3120:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    3124:	b2db      	uxtb	r3, r3
    3126:	5cc3      	ldrb	r3, [r0, r3]
    3128:	4319      	orrs	r1, r3
    312a:	f022 0303 	bic.w	r3, r2, #3
    312e:	a80c      	add	r0, sp, #48	; 0x30
    3130:	4403      	add	r3, r0
    3132:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    3136:	404b      	eors	r3, r1
    3138:	e7d5      	b.n	30e6 <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    313a:	2001      	movs	r0, #1
}
    313c:	b00c      	add	sp, #48	; 0x30
    313e:	bcf0      	pop	{r4, r5, r6, r7}
    3140:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    3142:	2000      	movs	r0, #0
    3144:	e7fa      	b.n	313c <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    3146:	2000      	movs	r0, #0
    3148:	e7f8      	b.n	313c <tc_aes128_set_encrypt_key+0xa4>
    314a:	bf00      	nop
    314c:	0002e758 	.word	0x0002e758
    3150:	0002ed20 	.word	0x0002ed20

00003154 <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    3154:	2800      	cmp	r0, #0
    3156:	f000 8367 	beq.w	3828 <tc_aes_encrypt+0x6d4>
{
    315a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    315e:	b088      	sub	sp, #32
    3160:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    3162:	2900      	cmp	r1, #0
    3164:	f000 8362 	beq.w	382c <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    3168:	2a00      	cmp	r2, #0
    316a:	f000 8361 	beq.w	3830 <tc_aes_encrypt+0x6dc>
    316e:	4617      	mov	r7, r2
    3170:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    3172:	2310      	movs	r3, #16
    3174:	4619      	mov	r1, r3
    3176:	eb0d 0003 	add.w	r0, sp, r3
    317a:	f7ff ff74 	bl	3066 <_copy>
	add_round_key(state, s->words);
    317e:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    3180:	683b      	ldr	r3, [r7, #0]
    3182:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3186:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    318a:	f88d 2010 	strb.w	r2, [sp, #16]
    318e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3192:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3196:	404a      	eors	r2, r1
    3198:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    319c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31a0:	f89d 1012 	ldrb.w	r1, [sp, #18]
    31a4:	404a      	eors	r2, r1
    31a6:	f88d 2012 	strb.w	r2, [sp, #18]
    31aa:	b2db      	uxtb	r3, r3
    31ac:	f89d 2013 	ldrb.w	r2, [sp, #19]
    31b0:	4053      	eors	r3, r2
    31b2:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    31b6:	687b      	ldr	r3, [r7, #4]
    31b8:	f89d 2014 	ldrb.w	r2, [sp, #20]
    31bc:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31c0:	f88d 2014 	strb.w	r2, [sp, #20]
    31c4:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31c8:	f89d 1015 	ldrb.w	r1, [sp, #21]
    31cc:	404a      	eors	r2, r1
    31ce:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    31d2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    31d6:	f89d 1016 	ldrb.w	r1, [sp, #22]
    31da:	404a      	eors	r2, r1
    31dc:	f88d 2016 	strb.w	r2, [sp, #22]
    31e0:	b2db      	uxtb	r3, r3
    31e2:	f89d 2017 	ldrb.w	r2, [sp, #23]
    31e6:	4053      	eors	r3, r2
    31e8:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    31ec:	68bb      	ldr	r3, [r7, #8]
    31ee:	f89d 2018 	ldrb.w	r2, [sp, #24]
    31f2:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    31f6:	f88d 2018 	strb.w	r2, [sp, #24]
    31fa:	f3c3 4207 	ubfx	r2, r3, #16, #8
    31fe:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3202:	404a      	eors	r2, r1
    3204:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    3208:	f3c3 2207 	ubfx	r2, r3, #8, #8
    320c:	f89d 101a 	ldrb.w	r1, [sp, #26]
    3210:	404a      	eors	r2, r1
    3212:	f88d 201a 	strb.w	r2, [sp, #26]
    3216:	b2db      	uxtb	r3, r3
    3218:	f89d 201b 	ldrb.w	r2, [sp, #27]
    321c:	4053      	eors	r3, r2
    321e:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3222:	68fb      	ldr	r3, [r7, #12]
    3224:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3228:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    322c:	f88d 201c 	strb.w	r2, [sp, #28]
    3230:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3234:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3238:	404a      	eors	r2, r1
    323a:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    323e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3242:	f89d 101e 	ldrb.w	r1, [sp, #30]
    3246:	404a      	eors	r2, r1
    3248:	f88d 201e 	strb.w	r2, [sp, #30]
    324c:	b2db      	uxtb	r3, r3
    324e:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3252:	4053      	eors	r3, r2
    3254:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    3258:	2500      	movs	r5, #0
    325a:	e210      	b.n	367e <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    325c:	a904      	add	r1, sp, #16
    325e:	5ccc      	ldrb	r4, [r1, r3]
    3260:	4a02      	ldr	r2, [pc, #8]	; (326c <tc_aes_encrypt+0x118>)
    3262:	5d14      	ldrb	r4, [r2, r4]
    3264:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3266:	3301      	adds	r3, #1
    3268:	e002      	b.n	3270 <tc_aes_encrypt+0x11c>
    326a:	bf00      	nop
    326c:	0002ed20 	.word	0x0002ed20
    3270:	2b0f      	cmp	r3, #15
    3272:	d9f3      	bls.n	325c <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    3274:	f89d 3010 	ldrb.w	r3, [sp, #16]
    3278:	f88d 3000 	strb.w	r3, [sp]
    327c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3280:	f88d 3001 	strb.w	r3, [sp, #1]
    3284:	f89d 301a 	ldrb.w	r3, [sp, #26]
    3288:	f88d 3002 	strb.w	r3, [sp, #2]
    328c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3290:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    3294:	f89d 3014 	ldrb.w	r3, [sp, #20]
    3298:	f88d 3004 	strb.w	r3, [sp, #4]
    329c:	f89d 3019 	ldrb.w	r3, [sp, #25]
    32a0:	f88d 3005 	strb.w	r3, [sp, #5]
    32a4:	f89d 301e 	ldrb.w	r3, [sp, #30]
    32a8:	f88d 3006 	strb.w	r3, [sp, #6]
    32ac:	f89d 3013 	ldrb.w	r3, [sp, #19]
    32b0:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    32b4:	f89d 3018 	ldrb.w	r3, [sp, #24]
    32b8:	f88d 3008 	strb.w	r3, [sp, #8]
    32bc:	f89d 301d 	ldrb.w	r3, [sp, #29]
    32c0:	f88d 3009 	strb.w	r3, [sp, #9]
    32c4:	f89d 3012 	ldrb.w	r3, [sp, #18]
    32c8:	f88d 300a 	strb.w	r3, [sp, #10]
    32cc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    32d0:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    32d4:	f89d 301c 	ldrb.w	r3, [sp, #28]
    32d8:	f88d 300c 	strb.w	r3, [sp, #12]
    32dc:	f89d 3011 	ldrb.w	r3, [sp, #17]
    32e0:	f88d 300d 	strb.w	r3, [sp, #13]
    32e4:	f89d 3016 	ldrb.w	r3, [sp, #22]
    32e8:	f88d 300e 	strb.w	r3, [sp, #14]
    32ec:	f89d 301b 	ldrb.w	r3, [sp, #27]
    32f0:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    32f4:	2310      	movs	r3, #16
    32f6:	466a      	mov	r2, sp
    32f8:	4619      	mov	r1, r3
    32fa:	eb0d 0003 	add.w	r0, sp, r3
    32fe:	f7ff feb2 	bl	3066 <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    3302:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3306:	f7ff febe 	bl	3086 <_double_byte>
    330a:	4604      	mov	r4, r0
    330c:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3310:	f7ff feb9 	bl	3086 <_double_byte>
    3314:	f89d 1011 	ldrb.w	r1, [sp, #17]
    3318:	f89d 2012 	ldrb.w	r2, [sp, #18]
    331c:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3320:	4048      	eors	r0, r1
    3322:	4044      	eors	r4, r0
    3324:	4062      	eors	r2, r4
    3326:	4053      	eors	r3, r2
    3328:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    332c:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3330:	4608      	mov	r0, r1
    3332:	f7ff fea8 	bl	3086 <_double_byte>
    3336:	4044      	eors	r4, r0
    3338:	b2e4      	uxtb	r4, r4
    333a:	f89d 0012 	ldrb.w	r0, [sp, #18]
    333e:	f7ff fea2 	bl	3086 <_double_byte>
    3342:	f89d 2012 	ldrb.w	r2, [sp, #18]
    3346:	f89d 3013 	ldrb.w	r3, [sp, #19]
    334a:	4050      	eors	r0, r2
    334c:	4044      	eors	r4, r0
    334e:	405c      	eors	r4, r3
    3350:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3354:	f89d 4010 	ldrb.w	r4, [sp, #16]
    3358:	f89d 0011 	ldrb.w	r0, [sp, #17]
    335c:	4044      	eors	r4, r0
    335e:	4610      	mov	r0, r2
    3360:	f7ff fe91 	bl	3086 <_double_byte>
    3364:	4044      	eors	r4, r0
    3366:	b2e4      	uxtb	r4, r4
    3368:	f89d 0013 	ldrb.w	r0, [sp, #19]
    336c:	f7ff fe8b 	bl	3086 <_double_byte>
    3370:	f89d 3013 	ldrb.w	r3, [sp, #19]
    3374:	4058      	eors	r0, r3
    3376:	4044      	eors	r4, r0
    3378:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    337c:	f89d 0010 	ldrb.w	r0, [sp, #16]
    3380:	f7ff fe81 	bl	3086 <_double_byte>
    3384:	f89d 2010 	ldrb.w	r2, [sp, #16]
    3388:	f89d 3011 	ldrb.w	r3, [sp, #17]
    338c:	f89d 4012 	ldrb.w	r4, [sp, #18]
    3390:	4050      	eors	r0, r2
    3392:	4043      	eors	r3, r0
    3394:	405c      	eors	r4, r3
    3396:	b2e4      	uxtb	r4, r4
    3398:	f89d 0013 	ldrb.w	r0, [sp, #19]
    339c:	f7ff fe73 	bl	3086 <_double_byte>
    33a0:	4060      	eors	r0, r4
    33a2:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    33a6:	f89d 0014 	ldrb.w	r0, [sp, #20]
    33aa:	f7ff fe6c 	bl	3086 <_double_byte>
    33ae:	4604      	mov	r4, r0
    33b0:	f89d 0015 	ldrb.w	r0, [sp, #21]
    33b4:	f7ff fe67 	bl	3086 <_double_byte>
    33b8:	f89d 1015 	ldrb.w	r1, [sp, #21]
    33bc:	f89d 2016 	ldrb.w	r2, [sp, #22]
    33c0:	f89d 3017 	ldrb.w	r3, [sp, #23]
    33c4:	4048      	eors	r0, r1
    33c6:	4044      	eors	r4, r0
    33c8:	4062      	eors	r2, r4
    33ca:	4053      	eors	r3, r2
    33cc:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    33d0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    33d4:	4608      	mov	r0, r1
    33d6:	f7ff fe56 	bl	3086 <_double_byte>
    33da:	4044      	eors	r4, r0
    33dc:	b2e4      	uxtb	r4, r4
    33de:	f89d 0016 	ldrb.w	r0, [sp, #22]
    33e2:	f7ff fe50 	bl	3086 <_double_byte>
    33e6:	f89d 2016 	ldrb.w	r2, [sp, #22]
    33ea:	f89d 3017 	ldrb.w	r3, [sp, #23]
    33ee:	4050      	eors	r0, r2
    33f0:	4044      	eors	r4, r0
    33f2:	405c      	eors	r4, r3
    33f4:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    33f8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    33fc:	f89d 0015 	ldrb.w	r0, [sp, #21]
    3400:	4044      	eors	r4, r0
    3402:	4610      	mov	r0, r2
    3404:	f7ff fe3f 	bl	3086 <_double_byte>
    3408:	4044      	eors	r4, r0
    340a:	b2e4      	uxtb	r4, r4
    340c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3410:	f7ff fe39 	bl	3086 <_double_byte>
    3414:	f89d 3017 	ldrb.w	r3, [sp, #23]
    3418:	4058      	eors	r0, r3
    341a:	4044      	eors	r4, r0
    341c:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3420:	f89d 0014 	ldrb.w	r0, [sp, #20]
    3424:	f7ff fe2f 	bl	3086 <_double_byte>
    3428:	f89d 2014 	ldrb.w	r2, [sp, #20]
    342c:	f89d 3015 	ldrb.w	r3, [sp, #21]
    3430:	f89d 4016 	ldrb.w	r4, [sp, #22]
    3434:	4050      	eors	r0, r2
    3436:	4043      	eors	r3, r0
    3438:	405c      	eors	r4, r3
    343a:	b2e4      	uxtb	r4, r4
    343c:	f89d 0017 	ldrb.w	r0, [sp, #23]
    3440:	f7ff fe21 	bl	3086 <_double_byte>
    3444:	4060      	eors	r0, r4
    3446:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    344a:	f89d 0018 	ldrb.w	r0, [sp, #24]
    344e:	f7ff fe1a 	bl	3086 <_double_byte>
    3452:	4604      	mov	r4, r0
    3454:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3458:	f7ff fe15 	bl	3086 <_double_byte>
    345c:	f89d 1019 	ldrb.w	r1, [sp, #25]
    3460:	f89d 201a 	ldrb.w	r2, [sp, #26]
    3464:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3468:	4048      	eors	r0, r1
    346a:	4044      	eors	r4, r0
    346c:	4062      	eors	r2, r4
    346e:	4053      	eors	r3, r2
    3470:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3474:	f89d 4018 	ldrb.w	r4, [sp, #24]
    3478:	4608      	mov	r0, r1
    347a:	f7ff fe04 	bl	3086 <_double_byte>
    347e:	4044      	eors	r4, r0
    3480:	b2e4      	uxtb	r4, r4
    3482:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3486:	f7ff fdfe 	bl	3086 <_double_byte>
    348a:	f89d 201a 	ldrb.w	r2, [sp, #26]
    348e:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3492:	4050      	eors	r0, r2
    3494:	4044      	eors	r4, r0
    3496:	405c      	eors	r4, r3
    3498:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    349c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    34a0:	f89d 0019 	ldrb.w	r0, [sp, #25]
    34a4:	4044      	eors	r4, r0
    34a6:	4610      	mov	r0, r2
    34a8:	f7ff fded 	bl	3086 <_double_byte>
    34ac:	4044      	eors	r4, r0
    34ae:	b2e4      	uxtb	r4, r4
    34b0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    34b4:	f7ff fde7 	bl	3086 <_double_byte>
    34b8:	f89d 301b 	ldrb.w	r3, [sp, #27]
    34bc:	4058      	eors	r0, r3
    34be:	4044      	eors	r4, r0
    34c0:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    34c4:	f89d 0018 	ldrb.w	r0, [sp, #24]
    34c8:	f7ff fddd 	bl	3086 <_double_byte>
    34cc:	f89d 2018 	ldrb.w	r2, [sp, #24]
    34d0:	f89d 3019 	ldrb.w	r3, [sp, #25]
    34d4:	f89d 401a 	ldrb.w	r4, [sp, #26]
    34d8:	4050      	eors	r0, r2
    34da:	4043      	eors	r3, r0
    34dc:	405c      	eors	r4, r3
    34de:	b2e4      	uxtb	r4, r4
    34e0:	f89d 001b 	ldrb.w	r0, [sp, #27]
    34e4:	f7ff fdcf 	bl	3086 <_double_byte>
    34e8:	4060      	eors	r0, r4
    34ea:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    34ee:	f89d 001c 	ldrb.w	r0, [sp, #28]
    34f2:	f7ff fdc8 	bl	3086 <_double_byte>
    34f6:	4604      	mov	r4, r0
    34f8:	f89d 001d 	ldrb.w	r0, [sp, #29]
    34fc:	f7ff fdc3 	bl	3086 <_double_byte>
    3500:	f89d 101d 	ldrb.w	r1, [sp, #29]
    3504:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3508:	f89d 301f 	ldrb.w	r3, [sp, #31]
    350c:	4048      	eors	r0, r1
    350e:	4044      	eors	r4, r0
    3510:	4062      	eors	r2, r4
    3512:	4053      	eors	r3, r2
    3514:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    3518:	f89d 401c 	ldrb.w	r4, [sp, #28]
    351c:	4608      	mov	r0, r1
    351e:	f7ff fdb2 	bl	3086 <_double_byte>
    3522:	4044      	eors	r4, r0
    3524:	b2e4      	uxtb	r4, r4
    3526:	f89d 001e 	ldrb.w	r0, [sp, #30]
    352a:	f7ff fdac 	bl	3086 <_double_byte>
    352e:	f89d 201e 	ldrb.w	r2, [sp, #30]
    3532:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3536:	4050      	eors	r0, r2
    3538:	4044      	eors	r4, r0
    353a:	405c      	eors	r4, r3
    353c:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    3540:	f89d 401c 	ldrb.w	r4, [sp, #28]
    3544:	f89d 001d 	ldrb.w	r0, [sp, #29]
    3548:	4044      	eors	r4, r0
    354a:	4610      	mov	r0, r2
    354c:	f7ff fd9b 	bl	3086 <_double_byte>
    3550:	4044      	eors	r4, r0
    3552:	b2e4      	uxtb	r4, r4
    3554:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3558:	f7ff fd95 	bl	3086 <_double_byte>
    355c:	f89d 301f 	ldrb.w	r3, [sp, #31]
    3560:	4058      	eors	r0, r3
    3562:	4044      	eors	r4, r0
    3564:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    3568:	f89d 001c 	ldrb.w	r0, [sp, #28]
    356c:	f7ff fd8b 	bl	3086 <_double_byte>
    3570:	f89d 201c 	ldrb.w	r2, [sp, #28]
    3574:	f89d 301d 	ldrb.w	r3, [sp, #29]
    3578:	f89d 401e 	ldrb.w	r4, [sp, #30]
    357c:	4050      	eors	r0, r2
    357e:	4043      	eors	r3, r0
    3580:	405c      	eors	r4, r3
    3582:	b2e4      	uxtb	r4, r4
    3584:	f89d 001f 	ldrb.w	r0, [sp, #31]
    3588:	f7ff fd7d 	bl	3086 <_double_byte>
    358c:	4060      	eors	r0, r4
    358e:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    3592:	2310      	movs	r3, #16
    3594:	466a      	mov	r2, sp
    3596:	4619      	mov	r1, r3
    3598:	eb0d 0003 	add.w	r0, sp, r3
    359c:	f7ff fd63 	bl	3066 <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    35a0:	3501      	adds	r5, #1
    35a2:	012b      	lsls	r3, r5, #4
    35a4:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    35a6:	58f3      	ldr	r3, [r6, r3]
    35a8:	f89d 1010 	ldrb.w	r1, [sp, #16]
    35ac:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    35b0:	f88d 1010 	strb.w	r1, [sp, #16]
    35b4:	f3c3 4107 	ubfx	r1, r3, #16, #8
    35b8:	f89d 0011 	ldrb.w	r0, [sp, #17]
    35bc:	4041      	eors	r1, r0
    35be:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    35c2:	f3c3 2107 	ubfx	r1, r3, #8, #8
    35c6:	f89d 0012 	ldrb.w	r0, [sp, #18]
    35ca:	4041      	eors	r1, r0
    35cc:	f88d 1012 	strb.w	r1, [sp, #18]
    35d0:	b2db      	uxtb	r3, r3
    35d2:	f89d 1013 	ldrb.w	r1, [sp, #19]
    35d6:	404b      	eors	r3, r1
    35d8:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    35dc:	6853      	ldr	r3, [r2, #4]
    35de:	f89d 1014 	ldrb.w	r1, [sp, #20]
    35e2:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    35e6:	f88d 1014 	strb.w	r1, [sp, #20]
    35ea:	f3c3 4107 	ubfx	r1, r3, #16, #8
    35ee:	f89d 0015 	ldrb.w	r0, [sp, #21]
    35f2:	4041      	eors	r1, r0
    35f4:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    35f8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    35fc:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3600:	4041      	eors	r1, r0
    3602:	f88d 1016 	strb.w	r1, [sp, #22]
    3606:	b2db      	uxtb	r3, r3
    3608:	f89d 1017 	ldrb.w	r1, [sp, #23]
    360c:	404b      	eors	r3, r1
    360e:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    3612:	6893      	ldr	r3, [r2, #8]
    3614:	f89d 1018 	ldrb.w	r1, [sp, #24]
    3618:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    361c:	f88d 1018 	strb.w	r1, [sp, #24]
    3620:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3624:	f89d 0019 	ldrb.w	r0, [sp, #25]
    3628:	4041      	eors	r1, r0
    362a:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    362e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3632:	f89d 001a 	ldrb.w	r0, [sp, #26]
    3636:	4041      	eors	r1, r0
    3638:	f88d 101a 	strb.w	r1, [sp, #26]
    363c:	b2db      	uxtb	r3, r3
    363e:	f89d 101b 	ldrb.w	r1, [sp, #27]
    3642:	404b      	eors	r3, r1
    3644:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    3648:	68d3      	ldr	r3, [r2, #12]
    364a:	f89d 201c 	ldrb.w	r2, [sp, #28]
    364e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    3652:	f88d 201c 	strb.w	r2, [sp, #28]
    3656:	f3c3 4207 	ubfx	r2, r3, #16, #8
    365a:	f89d 101d 	ldrb.w	r1, [sp, #29]
    365e:	404a      	eors	r2, r1
    3660:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    3664:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3668:	f89d 101e 	ldrb.w	r1, [sp, #30]
    366c:	404a      	eors	r2, r1
    366e:	f88d 201e 	strb.w	r2, [sp, #30]
    3672:	b2db      	uxtb	r3, r3
    3674:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3678:	4053      	eors	r3, r2
    367a:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    367e:	2d08      	cmp	r5, #8
    3680:	d801      	bhi.n	3686 <tc_aes_encrypt+0x532>
    3682:	2300      	movs	r3, #0
    3684:	e5f4      	b.n	3270 <tc_aes_encrypt+0x11c>
    3686:	2300      	movs	r3, #0
    3688:	e005      	b.n	3696 <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    368a:	aa04      	add	r2, sp, #16
    368c:	5cd1      	ldrb	r1, [r2, r3]
    368e:	4869      	ldr	r0, [pc, #420]	; (3834 <tc_aes_encrypt+0x6e0>)
    3690:	5c41      	ldrb	r1, [r0, r1]
    3692:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    3694:	3301      	adds	r3, #1
    3696:	2b0f      	cmp	r3, #15
    3698:	d9f7      	bls.n	368a <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    369a:	f89d 3010 	ldrb.w	r3, [sp, #16]
    369e:	f88d 3000 	strb.w	r3, [sp]
    36a2:	f89d 3015 	ldrb.w	r3, [sp, #21]
    36a6:	f88d 3001 	strb.w	r3, [sp, #1]
    36aa:	f89d 301a 	ldrb.w	r3, [sp, #26]
    36ae:	f88d 3002 	strb.w	r3, [sp, #2]
    36b2:	f89d 301f 	ldrb.w	r3, [sp, #31]
    36b6:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    36ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    36be:	f88d 3004 	strb.w	r3, [sp, #4]
    36c2:	f89d 3019 	ldrb.w	r3, [sp, #25]
    36c6:	f88d 3005 	strb.w	r3, [sp, #5]
    36ca:	f89d 301e 	ldrb.w	r3, [sp, #30]
    36ce:	f88d 3006 	strb.w	r3, [sp, #6]
    36d2:	f89d 3013 	ldrb.w	r3, [sp, #19]
    36d6:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    36da:	f89d 3018 	ldrb.w	r3, [sp, #24]
    36de:	f88d 3008 	strb.w	r3, [sp, #8]
    36e2:	f89d 301d 	ldrb.w	r3, [sp, #29]
    36e6:	f88d 3009 	strb.w	r3, [sp, #9]
    36ea:	f89d 3012 	ldrb.w	r3, [sp, #18]
    36ee:	f88d 300a 	strb.w	r3, [sp, #10]
    36f2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    36f6:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    36fa:	f89d 301c 	ldrb.w	r3, [sp, #28]
    36fe:	f88d 300c 	strb.w	r3, [sp, #12]
    3702:	f89d 3011 	ldrb.w	r3, [sp, #17]
    3706:	f88d 300d 	strb.w	r3, [sp, #13]
    370a:	f89d 3016 	ldrb.w	r3, [sp, #22]
    370e:	f88d 300e 	strb.w	r3, [sp, #14]
    3712:	f89d 301b 	ldrb.w	r3, [sp, #27]
    3716:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    371a:	2310      	movs	r3, #16
    371c:	466a      	mov	r2, sp
    371e:	4619      	mov	r1, r3
    3720:	eb0d 0003 	add.w	r0, sp, r3
    3724:	f7ff fc9f 	bl	3066 <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    3728:	1c6b      	adds	r3, r5, #1
    372a:	011b      	lsls	r3, r3, #4
    372c:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    372e:	58fb      	ldr	r3, [r7, r3]
    3730:	f89d 1010 	ldrb.w	r1, [sp, #16]
    3734:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    3738:	f88d 1010 	strb.w	r1, [sp, #16]
    373c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3740:	f89d 0011 	ldrb.w	r0, [sp, #17]
    3744:	4041      	eors	r1, r0
    3746:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    374a:	f3c3 2107 	ubfx	r1, r3, #8, #8
    374e:	f89d 0012 	ldrb.w	r0, [sp, #18]
    3752:	4041      	eors	r1, r0
    3754:	f88d 1012 	strb.w	r1, [sp, #18]
    3758:	b2db      	uxtb	r3, r3
    375a:	f89d 1013 	ldrb.w	r1, [sp, #19]
    375e:	404b      	eors	r3, r1
    3760:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    3764:	6853      	ldr	r3, [r2, #4]
    3766:	f89d 1014 	ldrb.w	r1, [sp, #20]
    376a:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    376e:	f88d 1014 	strb.w	r1, [sp, #20]
    3772:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3776:	f89d 0015 	ldrb.w	r0, [sp, #21]
    377a:	4041      	eors	r1, r0
    377c:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    3780:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3784:	f89d 0016 	ldrb.w	r0, [sp, #22]
    3788:	4041      	eors	r1, r0
    378a:	f88d 1016 	strb.w	r1, [sp, #22]
    378e:	b2db      	uxtb	r3, r3
    3790:	f89d 1017 	ldrb.w	r1, [sp, #23]
    3794:	404b      	eors	r3, r1
    3796:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    379a:	6893      	ldr	r3, [r2, #8]
    379c:	f89d 1018 	ldrb.w	r1, [sp, #24]
    37a0:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    37a4:	f88d 1018 	strb.w	r1, [sp, #24]
    37a8:	f3c3 4107 	ubfx	r1, r3, #16, #8
    37ac:	f89d 0019 	ldrb.w	r0, [sp, #25]
    37b0:	4041      	eors	r1, r0
    37b2:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    37b6:	f3c3 2107 	ubfx	r1, r3, #8, #8
    37ba:	f89d 001a 	ldrb.w	r0, [sp, #26]
    37be:	4041      	eors	r1, r0
    37c0:	f88d 101a 	strb.w	r1, [sp, #26]
    37c4:	b2db      	uxtb	r3, r3
    37c6:	f89d 101b 	ldrb.w	r1, [sp, #27]
    37ca:	404b      	eors	r3, r1
    37cc:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    37d0:	68d3      	ldr	r3, [r2, #12]
    37d2:	f89d 201c 	ldrb.w	r2, [sp, #28]
    37d6:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    37da:	f88d 201c 	strb.w	r2, [sp, #28]
    37de:	f3c3 4207 	ubfx	r2, r3, #16, #8
    37e2:	f89d 101d 	ldrb.w	r1, [sp, #29]
    37e6:	404a      	eors	r2, r1
    37e8:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    37ec:	f3c3 2207 	ubfx	r2, r3, #8, #8
    37f0:	f89d 101e 	ldrb.w	r1, [sp, #30]
    37f4:	404a      	eors	r2, r1
    37f6:	f88d 201e 	strb.w	r2, [sp, #30]
    37fa:	b2db      	uxtb	r3, r3
    37fc:	f89d 201f 	ldrb.w	r2, [sp, #31]
    3800:	4053      	eors	r3, r2
    3802:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    3806:	2310      	movs	r3, #16
    3808:	eb0d 0203 	add.w	r2, sp, r3
    380c:	4619      	mov	r1, r3
    380e:	4640      	mov	r0, r8
    3810:	f7ff fc29 	bl	3066 <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    3814:	2210      	movs	r2, #16
    3816:	2100      	movs	r1, #0
    3818:	eb0d 0002 	add.w	r0, sp, r2
    381c:	f7ff fc2f 	bl	307e <_set>

	return TC_CRYPTO_SUCCESS;
    3820:	2001      	movs	r0, #1
}
    3822:	b008      	add	sp, #32
    3824:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    3828:	2000      	movs	r0, #0
    382a:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    382c:	2000      	movs	r0, #0
    382e:	e7f8      	b.n	3822 <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    3830:	2000      	movs	r0, #0
    3832:	e7f6      	b.n	3822 <tc_aes_encrypt+0x6ce>
    3834:	0002ed20 	.word	0x0002ed20

00003838 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    3838:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    383a:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    383e:	f991 3000 	ldrsb.w	r3, [r1]
    3842:	2b00      	cmp	r3, #0
    3844:	db0d      	blt.n	3862 <gf_double+0x2a>
    3846:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    3848:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    384a:	1e45      	subs	r5, r0, #1
    384c:	7814      	ldrb	r4, [r2, #0]
    384e:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    3852:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    3854:	428a      	cmp	r2, r1
    3856:	d006      	beq.n	3866 <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    3858:	7813      	ldrb	r3, [r2, #0]
    385a:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    385c:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    385e:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    3860:	e7f3      	b.n	384a <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    3862:	2387      	movs	r3, #135	; 0x87
    3864:	e7f0      	b.n	3848 <gf_double+0x10>
	}
}
    3866:	bc30      	pop	{r4, r5}
    3868:	4770      	bx	lr

0000386a <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    386a:	b130      	cbz	r0, 387a <tc_cmac_erase+0x10>
{
    386c:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    386e:	2258      	movs	r2, #88	; 0x58
    3870:	2100      	movs	r1, #0
    3872:	f7ff fc04 	bl	307e <_set>

	return TC_CRYPTO_SUCCESS;
    3876:	2001      	movs	r0, #1
    3878:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    387a:	2000      	movs	r0, #0
    387c:	4770      	bx	lr

0000387e <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    387e:	b1a0      	cbz	r0, 38aa <tc_cmac_init+0x2c>
{
    3880:	b510      	push	{r4, lr}
    3882:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    3884:	2210      	movs	r2, #16
    3886:	2100      	movs	r1, #0
    3888:	f7ff fbf9 	bl	307e <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    388c:	2210      	movs	r2, #16
    388e:	2100      	movs	r1, #0
    3890:	f104 0030 	add.w	r0, r4, #48	; 0x30
    3894:	f7ff fbf3 	bl	307e <_set>
	s->leftover_offset = 0;
    3898:	2300      	movs	r3, #0
    389a:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    389c:	2200      	movs	r2, #0
    389e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    38a2:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    38a6:	2001      	movs	r0, #1
    38a8:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    38aa:	2000      	movs	r0, #0
    38ac:	4770      	bx	lr

000038ae <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    38ae:	b338      	cbz	r0, 3900 <tc_cmac_setup+0x52>
{
    38b0:	b570      	push	{r4, r5, r6, lr}
    38b2:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    38b4:	b331      	cbz	r1, 3904 <tc_cmac_setup+0x56>
    38b6:	4616      	mov	r6, r2
    38b8:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    38ba:	2258      	movs	r2, #88	; 0x58
    38bc:	2100      	movs	r1, #0
    38be:	f7ff fbde 	bl	307e <_set>
	s->sched = sched;
    38c2:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    38c4:	4629      	mov	r1, r5
    38c6:	4630      	mov	r0, r6
    38c8:	f7ff fbe6 	bl	3098 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    38cc:	2210      	movs	r2, #16
    38ce:	2100      	movs	r1, #0
    38d0:	4620      	mov	r0, r4
    38d2:	f7ff fbd4 	bl	307e <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    38d6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    38d8:	4621      	mov	r1, r4
    38da:	4620      	mov	r0, r4
    38dc:	f7ff fc3a 	bl	3154 <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    38e0:	f104 0510 	add.w	r5, r4, #16
    38e4:	4621      	mov	r1, r4
    38e6:	4628      	mov	r0, r5
    38e8:	f7ff ffa6 	bl	3838 <gf_double>
	gf_double (s->K2, s->K1);
    38ec:	4629      	mov	r1, r5
    38ee:	f104 0020 	add.w	r0, r4, #32
    38f2:	f7ff ffa1 	bl	3838 <gf_double>
	tc_cmac_init(s);
    38f6:	4620      	mov	r0, r4
    38f8:	f7ff ffc1 	bl	387e <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    38fc:	2001      	movs	r0, #1
    38fe:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3900:	2000      	movs	r0, #0
    3902:	4770      	bx	lr
    3904:	2000      	movs	r0, #0
}
    3906:	bd70      	pop	{r4, r5, r6, pc}

00003908 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    3908:	2800      	cmp	r0, #0
    390a:	d05f      	beq.n	39cc <tc_cmac_update+0xc4>
{
    390c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    390e:	460d      	mov	r5, r1
    3910:	4616      	mov	r6, r2
    3912:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    3914:	2a00      	cmp	r2, #0
    3916:	d05b      	beq.n	39d0 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    3918:	2900      	cmp	r1, #0
    391a:	d05b      	beq.n	39d4 <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    391c:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    3920:	ea52 0103 	orrs.w	r1, r2, r3
    3924:	d058      	beq.n	39d8 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    3926:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    392a:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    392e:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    3932:	6c40      	ldr	r0, [r0, #68]	; 0x44
    3934:	2800      	cmp	r0, #0
    3936:	d038      	beq.n	39aa <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    3938:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    393c:	42be      	cmp	r6, r7
    393e:	d30b      	bcc.n	3958 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    3940:	3030      	adds	r0, #48	; 0x30
    3942:	463b      	mov	r3, r7
    3944:	462a      	mov	r2, r5
    3946:	4639      	mov	r1, r7
    3948:	4420      	add	r0, r4
    394a:	f7ff fb8c 	bl	3066 <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    394e:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    3950:	443d      	add	r5, r7
		s->leftover_offset = 0;
    3952:	2300      	movs	r3, #0
    3954:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3956:	e012      	b.n	397e <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    3958:	3030      	adds	r0, #48	; 0x30
    395a:	4633      	mov	r3, r6
    395c:	462a      	mov	r2, r5
    395e:	4631      	mov	r1, r6
    3960:	4420      	add	r0, r4
    3962:	f7ff fb80 	bl	3066 <_copy>
			s->leftover_offset += data_length;
    3966:	6c63      	ldr	r3, [r4, #68]	; 0x44
    3968:	4433      	add	r3, r6
    396a:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    396c:	2001      	movs	r0, #1
    396e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    3970:	18e2      	adds	r2, r4, r3
    3972:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3976:	5ce1      	ldrb	r1, [r4, r3]
    3978:	404a      	eors	r2, r1
    397a:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    397c:	3301      	adds	r3, #1
    397e:	2b0f      	cmp	r3, #15
    3980:	d9f6      	bls.n	3970 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    3982:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    3984:	4621      	mov	r1, r4
    3986:	4620      	mov	r0, r4
    3988:	f7ff fbe4 	bl	3154 <tc_aes_encrypt>
    398c:	e00d      	b.n	39aa <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    398e:	5cea      	ldrb	r2, [r5, r3]
    3990:	5ce1      	ldrb	r1, [r4, r3]
    3992:	404a      	eors	r2, r1
    3994:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3996:	3301      	adds	r3, #1
    3998:	2b0f      	cmp	r3, #15
    399a:	d9f8      	bls.n	398e <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    399c:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    399e:	4621      	mov	r1, r4
    39a0:	4620      	mov	r0, r4
    39a2:	f7ff fbd7 	bl	3154 <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    39a6:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    39a8:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    39aa:	2e10      	cmp	r6, #16
    39ac:	d901      	bls.n	39b2 <tc_cmac_update+0xaa>
    39ae:	2300      	movs	r3, #0
    39b0:	e7f2      	b.n	3998 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    39b2:	b90e      	cbnz	r6, 39b8 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    39b4:	2001      	movs	r0, #1
}
    39b6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    39b8:	4633      	mov	r3, r6
    39ba:	462a      	mov	r2, r5
    39bc:	4631      	mov	r1, r6
    39be:	f104 0030 	add.w	r0, r4, #48	; 0x30
    39c2:	f7ff fb50 	bl	3066 <_copy>
		s->leftover_offset = data_length;
    39c6:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    39c8:	2001      	movs	r0, #1
    39ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    39cc:	2000      	movs	r0, #0
    39ce:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    39d0:	2001      	movs	r0, #1
    39d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    39d4:	2000      	movs	r0, #0
    39d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    39d8:	2000      	movs	r0, #0
    39da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000039dc <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    39dc:	b370      	cbz	r0, 3a3c <tc_cmac_final+0x60>
{
    39de:	b570      	push	{r4, r5, r6, lr}
    39e0:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    39e2:	b369      	cbz	r1, 3a40 <tc_cmac_final+0x64>
    39e4:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    39e6:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    39e8:	2a10      	cmp	r2, #16
    39ea:	d010      	beq.n	3a0e <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    39ec:	f102 0030 	add.w	r0, r2, #48	; 0x30
    39f0:	f1c2 0210 	rsb	r2, r2, #16
    39f4:	2100      	movs	r1, #0
    39f6:	4428      	add	r0, r5
    39f8:	f7ff fb41 	bl	307e <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    39fc:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    39fe:	442b      	add	r3, r5
    3a00:	2280      	movs	r2, #128	; 0x80
    3a02:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    3a06:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3a0a:	2300      	movs	r3, #0
    3a0c:	e00a      	b.n	3a24 <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    3a0e:	3110      	adds	r1, #16
    3a10:	e7fb      	b.n	3a0a <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    3a12:	18ea      	adds	r2, r5, r3
    3a14:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3a18:	5ccc      	ldrb	r4, [r1, r3]
    3a1a:	4054      	eors	r4, r2
    3a1c:	5cea      	ldrb	r2, [r5, r3]
    3a1e:	4062      	eors	r2, r4
    3a20:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    3a22:	3301      	adds	r3, #1
    3a24:	2b0f      	cmp	r3, #15
    3a26:	d9f4      	bls.n	3a12 <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3a28:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3a2a:	4629      	mov	r1, r5
    3a2c:	4630      	mov	r0, r6
    3a2e:	f7ff fb91 	bl	3154 <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    3a32:	4628      	mov	r0, r5
    3a34:	f7ff ff19 	bl	386a <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3a38:	2001      	movs	r0, #1
    3a3a:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3a3c:	2000      	movs	r0, #0
    3a3e:	4770      	bx	lr
    3a40:	2000      	movs	r0, #0
}
    3a42:	bd70      	pop	{r4, r5, r6, pc}

00003a44 <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    3a44:	2000      	movs	r0, #0
    3a46:	4770      	bx	lr

00003a48 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a48:	e003      	b.n	3a52 <mbedtls_zeroize+0xa>
    3a4a:	2200      	movs	r2, #0
    3a4c:	7002      	strb	r2, [r0, #0]
    3a4e:	3001      	adds	r0, #1
    3a50:	4619      	mov	r1, r3
    3a52:	1e4b      	subs	r3, r1, #1
    3a54:	2900      	cmp	r1, #0
    3a56:	d1f8      	bne.n	3a4a <mbedtls_zeroize+0x2>
}
    3a58:	4770      	bx	lr

00003a5a <mbedtls_zeroize>:

#if !defined(MBEDTLS_ARC4_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a5a:	e003      	b.n	3a64 <mbedtls_zeroize+0xa>
    3a5c:	2200      	movs	r2, #0
    3a5e:	7002      	strb	r2, [r0, #0]
    3a60:	3001      	adds	r0, #1
    3a62:	4619      	mov	r1, r3
    3a64:	1e4b      	subs	r3, r1, #1
    3a66:	2900      	cmp	r1, #0
    3a68:	d1f8      	bne.n	3a5c <mbedtls_zeroize+0x2>
}
    3a6a:	4770      	bx	lr

00003a6c <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a6c:	e003      	b.n	3a76 <mbedtls_zeroize+0xa>
    3a6e:	2200      	movs	r2, #0
    3a70:	7002      	strb	r2, [r0, #0]
    3a72:	3001      	adds	r0, #1
    3a74:	4619      	mov	r1, r3
    3a76:	1e4b      	subs	r3, r1, #1
    3a78:	2900      	cmp	r1, #0
    3a7a:	d1f8      	bne.n	3a6e <mbedtls_zeroize+0x2>
}
    3a7c:	4770      	bx	lr

00003a7e <mbedtls_zeroize>:

#if !defined(MBEDTLS_BLOWFISH_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a7e:	e003      	b.n	3a88 <mbedtls_zeroize+0xa>
    3a80:	2200      	movs	r2, #0
    3a82:	7002      	strb	r2, [r0, #0]
    3a84:	3001      	adds	r0, #1
    3a86:	4619      	mov	r1, r3
    3a88:	1e4b      	subs	r3, r1, #1
    3a8a:	2900      	cmp	r1, #0
    3a8c:	d1f8      	bne.n	3a80 <mbedtls_zeroize+0x2>
}
    3a8e:	4770      	bx	lr

00003a90 <mbedtls_zeroize>:

#if !defined(MBEDTLS_CAMELLIA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3a90:	e003      	b.n	3a9a <mbedtls_zeroize+0xa>
    3a92:	2200      	movs	r2, #0
    3a94:	7002      	strb	r2, [r0, #0]
    3a96:	3001      	adds	r0, #1
    3a98:	4619      	mov	r1, r3
    3a9a:	1e4b      	subs	r3, r1, #1
    3a9c:	2900      	cmp	r1, #0
    3a9e:	d1f8      	bne.n	3a92 <mbedtls_zeroize+0x2>
}
    3aa0:	4770      	bx	lr

00003aa2 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3aa2:	e003      	b.n	3aac <mbedtls_zeroize+0xa>
    3aa4:	2200      	movs	r2, #0
    3aa6:	7002      	strb	r2, [r0, #0]
    3aa8:	3001      	adds	r0, #1
    3aaa:	4619      	mov	r1, r3
    3aac:	1e4b      	subs	r3, r1, #1
    3aae:	2900      	cmp	r1, #0
    3ab0:	d1f8      	bne.n	3aa4 <mbedtls_zeroize+0x2>
}
    3ab2:	4770      	bx	lr

00003ab4 <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ab4:	e003      	b.n	3abe <mbedtls_zeroize+0xa>
    3ab6:	2200      	movs	r2, #0
    3ab8:	7002      	strb	r2, [r0, #0]
    3aba:	3001      	adds	r0, #1
    3abc:	4619      	mov	r1, r3
    3abe:	1e4b      	subs	r3, r1, #1
    3ac0:	2900      	cmp	r1, #0
    3ac2:	d1f8      	bne.n	3ab6 <mbedtls_zeroize+0x2>
}
    3ac4:	4770      	bx	lr

00003ac6 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3ac6:	e003      	b.n	3ad0 <mbedtls_zeroize+0xa>
    3ac8:	2200      	movs	r2, #0
    3aca:	7002      	strb	r2, [r0, #0]
    3acc:	3001      	adds	r0, #1
    3ace:	4619      	mov	r1, r3
    3ad0:	1e4b      	subs	r3, r1, #1
    3ad2:	2900      	cmp	r1, #0
    3ad4:	d1f8      	bne.n	3ac8 <mbedtls_zeroize+0x2>
}
    3ad6:	4770      	bx	lr

00003ad8 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3ad8:	e003      	b.n	3ae2 <mbedtls_zeroize+0xa>
    3ada:	2200      	movs	r2, #0
    3adc:	7002      	strb	r2, [r0, #0]
    3ade:	3001      	adds	r0, #1
    3ae0:	4619      	mov	r1, r3
    3ae2:	1e4b      	subs	r3, r1, #1
    3ae4:	2900      	cmp	r1, #0
    3ae6:	d1f8      	bne.n	3ada <mbedtls_zeroize+0x2>
}
    3ae8:	4770      	bx	lr

00003aea <mbedtls_zeroize>:

#if !defined(MBEDTLS_DES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3aea:	e003      	b.n	3af4 <mbedtls_zeroize+0xa>
    3aec:	2200      	movs	r2, #0
    3aee:	7002      	strb	r2, [r0, #0]
    3af0:	3001      	adds	r0, #1
    3af2:	4619      	mov	r1, r3
    3af4:	1e4b      	subs	r3, r1, #1
    3af6:	2900      	cmp	r1, #0
    3af8:	d1f8      	bne.n	3aec <mbedtls_zeroize+0x2>
}
    3afa:	4770      	bx	lr

00003afc <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3afc:	e003      	b.n	3b06 <mbedtls_zeroize+0xa>
    3afe:	2200      	movs	r2, #0
    3b00:	7002      	strb	r2, [r0, #0]
    3b02:	3001      	adds	r0, #1
    3b04:	4619      	mov	r1, r3
    3b06:	1e4b      	subs	r3, r1, #1
    3b08:	2900      	cmp	r1, #0
    3b0a:	d1f8      	bne.n	3afe <mbedtls_zeroize+0x2>
}
    3b0c:	4770      	bx	lr

00003b0e <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b0e:	e003      	b.n	3b18 <mbedtls_zeroize+0xa>
    3b10:	2200      	movs	r2, #0
    3b12:	7002      	strb	r2, [r0, #0]
    3b14:	3001      	adds	r0, #1
    3b16:	4619      	mov	r1, r3
    3b18:	1e4b      	subs	r3, r1, #1
    3b1a:	2900      	cmp	r1, #0
    3b1c:	d1f8      	bne.n	3b10 <mbedtls_zeroize+0x2>
}
    3b1e:	4770      	bx	lr

00003b20 <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b20:	e003      	b.n	3b2a <mbedtls_zeroize+0xa>
    3b22:	2200      	movs	r2, #0
    3b24:	7002      	strb	r2, [r0, #0]
    3b26:	3001      	adds	r0, #1
    3b28:	4619      	mov	r1, r3
    3b2a:	1e4b      	subs	r3, r1, #1
    3b2c:	2900      	cmp	r1, #0
    3b2e:	d1f8      	bne.n	3b22 <mbedtls_zeroize+0x2>
}
    3b30:	4770      	bx	lr

00003b32 <mbedtls_zeroize>:
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b32:	e003      	b.n	3b3c <mbedtls_zeroize+0xa>
    3b34:	2200      	movs	r2, #0
    3b36:	7002      	strb	r2, [r0, #0]
    3b38:	3001      	adds	r0, #1
    3b3a:	4619      	mov	r1, r3
    3b3c:	1e4b      	subs	r3, r1, #1
    3b3e:	2900      	cmp	r1, #0
    3b40:	d1f8      	bne.n	3b34 <mbedtls_zeroize+0x2>
}
    3b42:	4770      	bx	lr

00003b44 <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b44:	e003      	b.n	3b4e <mbedtls_zeroize+0xa>
    3b46:	2200      	movs	r2, #0
    3b48:	7002      	strb	r2, [r0, #0]
    3b4a:	3001      	adds	r0, #1
    3b4c:	4619      	mov	r1, r3
    3b4e:	1e4b      	subs	r3, r1, #1
    3b50:	2900      	cmp	r1, #0
    3b52:	d1f8      	bne.n	3b46 <mbedtls_zeroize+0x2>
}
    3b54:	4770      	bx	lr

00003b56 <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b56:	e003      	b.n	3b60 <mbedtls_zeroize+0xa>
    3b58:	2200      	movs	r2, #0
    3b5a:	7002      	strb	r2, [r0, #0]
    3b5c:	3001      	adds	r0, #1
    3b5e:	4619      	mov	r1, r3
    3b60:	1e4b      	subs	r3, r1, #1
    3b62:	2900      	cmp	r1, #0
    3b64:	d1f8      	bne.n	3b58 <mbedtls_zeroize+0x2>
}
    3b66:	4770      	bx	lr

00003b68 <mbedtls_zeroize>:

#if !defined(MBEDTLS_MD5_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b68:	e003      	b.n	3b72 <mbedtls_zeroize+0xa>
    3b6a:	2200      	movs	r2, #0
    3b6c:	7002      	strb	r2, [r0, #0]
    3b6e:	3001      	adds	r0, #1
    3b70:	4619      	mov	r1, r3
    3b72:	1e4b      	subs	r3, r1, #1
    3b74:	2900      	cmp	r1, #0
    3b76:	d1f8      	bne.n	3b6a <mbedtls_zeroize+0x2>
}
    3b78:	4770      	bx	lr

00003b7a <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b7a:	e003      	b.n	3b84 <mbedtls_zeroize+0xa>
    3b7c:	2200      	movs	r2, #0
    3b7e:	7002      	strb	r2, [r0, #0]
    3b80:	3001      	adds	r0, #1
    3b82:	4619      	mov	r1, r3
    3b84:	1e4b      	subs	r3, r1, #1
    3b86:	2900      	cmp	r1, #0
    3b88:	d1f8      	bne.n	3b7c <mbedtls_zeroize+0x2>
}
    3b8a:	4770      	bx	lr

00003b8c <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3b8c:	e003      	b.n	3b96 <mbedtls_zeroize+0xa>
    3b8e:	2200      	movs	r2, #0
    3b90:	7002      	strb	r2, [r0, #0]
    3b92:	3001      	adds	r0, #1
    3b94:	4619      	mov	r1, r3
    3b96:	1e4b      	subs	r3, r1, #1
    3b98:	2900      	cmp	r1, #0
    3b9a:	d1f8      	bne.n	3b8e <mbedtls_zeroize+0x2>
}
    3b9c:	4770      	bx	lr

00003b9e <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3b9e:	e003      	b.n	3ba8 <mbedtls_zeroize+0xa>
    3ba0:	2200      	movs	r2, #0
    3ba2:	7002      	strb	r2, [r0, #0]
    3ba4:	3001      	adds	r0, #1
    3ba6:	4619      	mov	r1, r3
    3ba8:	1e4b      	subs	r3, r1, #1
    3baa:	2900      	cmp	r1, #0
    3bac:	d1f8      	bne.n	3ba0 <mbedtls_zeroize+0x2>
}
    3bae:	4770      	bx	lr

00003bb0 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3bb0:	e003      	b.n	3bba <mbedtls_zeroize+0xa>
    3bb2:	2200      	movs	r2, #0
    3bb4:	7002      	strb	r2, [r0, #0]
    3bb6:	3001      	adds	r0, #1
    3bb8:	4619      	mov	r1, r3
    3bba:	1e4b      	subs	r3, r1, #1
    3bbc:	2900      	cmp	r1, #0
    3bbe:	d1f8      	bne.n	3bb2 <mbedtls_zeroize+0x2>
}
    3bc0:	4770      	bx	lr

00003bc2 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3bc2:	e003      	b.n	3bcc <mbedtls_zeroize+0xa>
    3bc4:	2200      	movs	r2, #0
    3bc6:	7002      	strb	r2, [r0, #0]
    3bc8:	3001      	adds	r0, #1
    3bca:	4619      	mov	r1, r3
    3bcc:	1e4b      	subs	r3, r1, #1
    3bce:	2900      	cmp	r1, #0
    3bd0:	d1f8      	bne.n	3bc4 <mbedtls_zeroize+0x2>
}
    3bd2:	4770      	bx	lr

00003bd4 <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3bd4:	e003      	b.n	3bde <mbedtls_zeroize+0xa>
    3bd6:	2200      	movs	r2, #0
    3bd8:	7002      	strb	r2, [r0, #0]
    3bda:	3001      	adds	r0, #1
    3bdc:	4619      	mov	r1, r3
    3bde:	1e4b      	subs	r3, r1, #1
    3be0:	2900      	cmp	r1, #0
    3be2:	d1f8      	bne.n	3bd6 <mbedtls_zeroize+0x2>
}
    3be4:	4770      	bx	lr

00003be6 <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3be6:	e003      	b.n	3bf0 <mbedtls_zeroize+0xa>
    3be8:	2200      	movs	r2, #0
    3bea:	7002      	strb	r2, [r0, #0]
    3bec:	3001      	adds	r0, #1
    3bee:	4619      	mov	r1, r3
    3bf0:	1e4b      	subs	r3, r1, #1
    3bf2:	2900      	cmp	r1, #0
    3bf4:	d1f8      	bne.n	3be8 <mbedtls_zeroize+0x2>
}
    3bf6:	4770      	bx	lr

00003bf8 <mbedtls_zeroize>:

#if !defined(MBEDTLS_XTEA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3bf8:	e003      	b.n	3c02 <mbedtls_zeroize+0xa>
    3bfa:	2200      	movs	r2, #0
    3bfc:	7002      	strb	r2, [r0, #0]
    3bfe:	3001      	adds	r0, #1
    3c00:	4619      	mov	r1, r3
    3c02:	1e4b      	subs	r3, r1, #1
    3c04:	2900      	cmp	r1, #0
    3c06:	d1f8      	bne.n	3bfa <mbedtls_zeroize+0x2>
}
    3c08:	4770      	bx	lr

00003c0a <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    3c0a:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    3c0c:	f44f 728c 	mov.w	r2, #280	; 0x118
    3c10:	2100      	movs	r1, #0
    3c12:	f026 fead 	bl	2a970 <memset>
    3c16:	bd08      	pop	{r3, pc}

00003c18 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3c18:	b128      	cbz	r0, 3c26 <mbedtls_aes_free+0xe>
{
    3c1a:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3c1c:	f44f 718c 	mov.w	r1, #280	; 0x118
    3c20:	f7ff ff12 	bl	3a48 <mbedtls_zeroize>
    3c24:	bd08      	pop	{r3, pc}
    3c26:	4770      	bx	lr

00003c28 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3c28:	2ac0      	cmp	r2, #192	; 0xc0
    3c2a:	d00f      	beq.n	3c4c <mbedtls_aes_setkey_enc+0x24>
    3c2c:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3c30:	d00f      	beq.n	3c52 <mbedtls_aes_setkey_enc+0x2a>
    3c32:	2a80      	cmp	r2, #128	; 0x80
    3c34:	d002      	beq.n	3c3c <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    3c36:	f06f 001f 	mvn.w	r0, #31
    3c3a:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3c3c:	230a      	movs	r3, #10
    3c3e:	6003      	str	r3, [r0, #0]
{
    3c40:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    3c42:	f100 0308 	add.w	r3, r0, #8
    3c46:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3c48:	2500      	movs	r5, #0
    3c4a:	e015      	b.n	3c78 <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3c4c:	230c      	movs	r3, #12
    3c4e:	6003      	str	r3, [r0, #0]
    3c50:	e7f6      	b.n	3c40 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    3c52:	230e      	movs	r3, #14
    3c54:	6003      	str	r3, [r0, #0]
    3c56:	e7f3      	b.n	3c40 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3c58:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3c5c:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3c60:	7877      	ldrb	r7, [r6, #1]
    3c62:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    3c66:	78b7      	ldrb	r7, [r6, #2]
    3c68:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3c6c:	78f6      	ldrb	r6, [r6, #3]
    3c6e:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    3c72:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    3c76:	3501      	adds	r5, #1
    3c78:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3c7c:	d3ec      	bcc.n	3c58 <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3c7e:	6802      	ldr	r2, [r0, #0]
    3c80:	2a0c      	cmp	r2, #12
    3c82:	d05d      	beq.n	3d40 <mbedtls_aes_setkey_enc+0x118>
    3c84:	2a0e      	cmp	r2, #14
    3c86:	f000 80a0 	beq.w	3dca <mbedtls_aes_setkey_enc+0x1a2>
    3c8a:	2a0a      	cmp	r2, #10
    3c8c:	d029      	beq.n	3ce2 <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3c8e:	2000      	movs	r0, #0
    3c90:	e025      	b.n	3cde <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    3c92:	681a      	ldr	r2, [r3, #0]
    3c94:	494e      	ldr	r1, [pc, #312]	; (3dd0 <mbedtls_aes_setkey_enc+0x1a8>)
    3c96:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3c9a:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3c9c:	68d9      	ldr	r1, [r3, #12]
    3c9e:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3ca2:	484c      	ldr	r0, [pc, #304]	; (3dd4 <mbedtls_aes_setkey_enc+0x1ac>)
    3ca4:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    3ca6:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3ca8:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3cac:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3cae:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3cb2:	0e0d      	lsrs	r5, r1, #24
    3cb4:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3cb6:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    3cba:	b2cd      	uxtb	r5, r1
    3cbc:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    3cbe:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    3cc2:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    3cc4:	6858      	ldr	r0, [r3, #4]
    3cc6:	4042      	eors	r2, r0
    3cc8:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    3cca:	6898      	ldr	r0, [r3, #8]
    3ccc:	4042      	eors	r2, r0
    3cce:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    3cd0:	404a      	eors	r2, r1
    3cd2:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    3cd4:	3401      	adds	r4, #1
    3cd6:	3310      	adds	r3, #16
    3cd8:	2c09      	cmp	r4, #9
    3cda:	d9da      	bls.n	3c92 <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    3cdc:	2000      	movs	r0, #0
}
    3cde:	bcf0      	pop	{r4, r5, r6, r7}
    3ce0:	4770      	bx	lr
    switch( ctx->nr )
    3ce2:	2400      	movs	r4, #0
    3ce4:	e7f8      	b.n	3cd8 <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    3ce6:	681a      	ldr	r2, [r3, #0]
    3ce8:	4939      	ldr	r1, [pc, #228]	; (3dd0 <mbedtls_aes_setkey_enc+0x1a8>)
    3cea:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    3cee:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3cf0:	6959      	ldr	r1, [r3, #20]
    3cf2:	f3c1 2507 	ubfx	r5, r1, #8, #8
    3cf6:	4c37      	ldr	r4, [pc, #220]	; (3dd4 <mbedtls_aes_setkey_enc+0x1ac>)
    3cf8:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    3cfa:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3cfc:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3d00:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    3d02:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3d06:	0e0d      	lsrs	r5, r1, #24
    3d08:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    3d0a:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    3d0e:	b2cd      	uxtb	r5, r1
    3d10:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    3d12:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    3d16:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3d18:	685c      	ldr	r4, [r3, #4]
    3d1a:	4062      	eors	r2, r4
    3d1c:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3d1e:	689c      	ldr	r4, [r3, #8]
    3d20:	4062      	eors	r2, r4
    3d22:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    3d24:	68dc      	ldr	r4, [r3, #12]
    3d26:	4062      	eors	r2, r4
    3d28:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3d2a:	691c      	ldr	r4, [r3, #16]
    3d2c:	4062      	eors	r2, r4
    3d2e:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3d30:	404a      	eors	r2, r1
    3d32:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    3d34:	3001      	adds	r0, #1
    3d36:	3318      	adds	r3, #24
    3d38:	2807      	cmp	r0, #7
    3d3a:	d9d4      	bls.n	3ce6 <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3d3c:	2000      	movs	r0, #0
    3d3e:	e7ce      	b.n	3cde <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3d40:	2000      	movs	r0, #0
    3d42:	e7f9      	b.n	3d38 <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    3d44:	681a      	ldr	r2, [r3, #0]
    3d46:	4822      	ldr	r0, [pc, #136]	; (3dd0 <mbedtls_aes_setkey_enc+0x1a8>)
    3d48:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3d4c:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3d4e:	69d8      	ldr	r0, [r3, #28]
    3d50:	f3c0 2407 	ubfx	r4, r0, #8, #8
    3d54:	4d1f      	ldr	r5, [pc, #124]	; (3dd4 <mbedtls_aes_setkey_enc+0x1ac>)
    3d56:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3d58:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d5a:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3d5e:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3d60:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d64:	0e04      	lsrs	r4, r0, #24
    3d66:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3d68:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3d6c:	b2c4      	uxtb	r4, r0
    3d6e:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3d70:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    3d74:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    3d76:	685c      	ldr	r4, [r3, #4]
    3d78:	4062      	eors	r2, r4
    3d7a:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3d7c:	689c      	ldr	r4, [r3, #8]
    3d7e:	4062      	eors	r2, r4
    3d80:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    3d82:	68dc      	ldr	r4, [r3, #12]
    3d84:	4062      	eors	r2, r4
    3d86:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3d88:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d8a:	b2d6      	uxtb	r6, r2
    3d8c:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3d8e:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3d90:	f3c2 2607 	ubfx	r6, r2, #8, #8
    3d94:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3d96:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3d9a:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3d9e:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3da0:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    3da4:	0e12      	lsrs	r2, r2, #24
    3da6:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3da8:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3dac:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3dae:	695c      	ldr	r4, [r3, #20]
    3db0:	4062      	eors	r2, r4
    3db2:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    3db4:	699c      	ldr	r4, [r3, #24]
    3db6:	4062      	eors	r2, r4
    3db8:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    3dba:	4042      	eors	r2, r0
    3dbc:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    3dbe:	3101      	adds	r1, #1
    3dc0:	3320      	adds	r3, #32
    3dc2:	2906      	cmp	r1, #6
    3dc4:	d9be      	bls.n	3d44 <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    3dc6:	2000      	movs	r0, #0
    3dc8:	e789      	b.n	3cde <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3dca:	2100      	movs	r1, #0
    3dcc:	e7f9      	b.n	3dc2 <mbedtls_aes_setkey_enc+0x19a>
    3dce:	bf00      	nop
    3dd0:	000305c0 	.word	0x000305c0
    3dd4:	0002f3c0 	.word	0x0002f3c0

00003dd8 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    3dd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3ddc:	b083      	sub	sp, #12
    3dde:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3de0:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3de2:	f891 9000 	ldrb.w	r9, [r1]
    3de6:	784b      	ldrb	r3, [r1, #1]
    3de8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    3dec:	788b      	ldrb	r3, [r1, #2]
    3dee:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    3df2:	78cb      	ldrb	r3, [r1, #3]
    3df4:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    3df8:	6813      	ldr	r3, [r2, #0]
    3dfa:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    3dfe:	f891 a004 	ldrb.w	sl, [r1, #4]
    3e02:	794b      	ldrb	r3, [r1, #5]
    3e04:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    3e08:	798b      	ldrb	r3, [r1, #6]
    3e0a:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    3e0e:	79cb      	ldrb	r3, [r1, #7]
    3e10:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    3e14:	6853      	ldr	r3, [r2, #4]
    3e16:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3e1a:	7a0c      	ldrb	r4, [r1, #8]
    3e1c:	7a4b      	ldrb	r3, [r1, #9]
    3e1e:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    3e22:	7a8b      	ldrb	r3, [r1, #10]
    3e24:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3e28:	7acb      	ldrb	r3, [r1, #11]
    3e2a:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3e2e:	6893      	ldr	r3, [r2, #8]
    3e30:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    3e32:	7b0b      	ldrb	r3, [r1, #12]
    3e34:	7b4d      	ldrb	r5, [r1, #13]
    3e36:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3e3a:	7b8d      	ldrb	r5, [r1, #14]
    3e3c:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3e40:	7bc9      	ldrb	r1, [r1, #15]
    3e42:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    3e46:	f102 0610 	add.w	r6, r2, #16
    3e4a:	68d3      	ldr	r3, [r2, #12]
    3e4c:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3e4e:	6803      	ldr	r3, [r0, #0]
    3e50:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3e54:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3e58:	460b      	mov	r3, r1
    3e5a:	e0bd      	b.n	3fd8 <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3e5c:	6832      	ldr	r2, [r6, #0]
    3e5e:	fa5f f089 	uxtb.w	r0, r9
    3e62:	49cb      	ldr	r1, [pc, #812]	; (4190 <mbedtls_internal_aes_encrypt+0x3b8>)
    3e64:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3e68:	ea82 0c00 	eor.w	ip, r2, r0
    3e6c:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3e70:	4dc8      	ldr	r5, [pc, #800]	; (4194 <mbedtls_internal_aes_encrypt+0x3bc>)
    3e72:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3e76:	ea8c 0c02 	eor.w	ip, ip, r2
    3e7a:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3e7e:	48c6      	ldr	r0, [pc, #792]	; (4198 <mbedtls_internal_aes_encrypt+0x3c0>)
    3e80:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3e84:	ea8c 0c02 	eor.w	ip, ip, r2
    3e88:	0e1f      	lsrs	r7, r3, #24
    3e8a:	4ac4      	ldr	r2, [pc, #784]	; (419c <mbedtls_internal_aes_encrypt+0x3c4>)
    3e8c:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3e90:	ea8c 0c07 	eor.w	ip, ip, r7
    3e94:	fa5f fe8a 	uxtb.w	lr, sl
    3e98:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3e9c:	6877      	ldr	r7, [r6, #4]
    3e9e:	ea87 080e 	eor.w	r8, r7, lr
    3ea2:	f3c4 2707 	ubfx	r7, r4, #8, #8
    3ea6:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3eaa:	ea88 0807 	eor.w	r8, r8, r7
    3eae:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3eb2:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3eb6:	ea88 0807 	eor.w	r8, r8, r7
    3eba:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3ebe:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3ec2:	ea88 0807 	eor.w	r8, r8, r7
    3ec6:	fa5f fe84 	uxtb.w	lr, r4
    3eca:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3ece:	68b7      	ldr	r7, [r6, #8]
    3ed0:	ea87 0e0e 	eor.w	lr, r7, lr
    3ed4:	f3c3 2707 	ubfx	r7, r3, #8, #8
    3ed8:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3edc:	ea8e 0e07 	eor.w	lr, lr, r7
    3ee0:	f3c9 4707 	ubfx	r7, r9, #16, #8
    3ee4:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    3ee8:	ea8e 0e07 	eor.w	lr, lr, r7
    3eec:	ea4f 671a 	mov.w	r7, sl, lsr #24
    3ef0:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3ef4:	ea8e 0e07 	eor.w	lr, lr, r7
    3ef8:	68f7      	ldr	r7, [r6, #12]
    3efa:	b2db      	uxtb	r3, r3
    3efc:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    3f00:	405f      	eors	r7, r3
    3f02:	f3c9 2907 	ubfx	r9, r9, #8, #8
    3f06:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    3f0a:	405f      	eors	r7, r3
    3f0c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3f10:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    3f14:	405f      	eors	r7, r3
    3f16:	0e24      	lsrs	r4, r4, #24
    3f18:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3f1c:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3f1e:	6933      	ldr	r3, [r6, #16]
    3f20:	fa5f f48c 	uxtb.w	r4, ip
    3f24:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3f28:	ea83 0904 	eor.w	r9, r3, r4
    3f2c:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3f30:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f34:	ea89 0903 	eor.w	r9, r9, r3
    3f38:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3f3c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f40:	ea89 0903 	eor.w	r9, r9, r3
    3f44:	0e3b      	lsrs	r3, r7, #24
    3f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f4a:	ea89 0903 	eor.w	r9, r9, r3
    3f4e:	6973      	ldr	r3, [r6, #20]
    3f50:	fa5f f488 	uxtb.w	r4, r8
    3f54:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3f58:	ea83 0a04 	eor.w	sl, r3, r4
    3f5c:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3f60:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f64:	ea8a 0a03 	eor.w	sl, sl, r3
    3f68:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3f6c:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f70:	ea8a 0a03 	eor.w	sl, sl, r3
    3f74:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3f78:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3f7c:	ea8a 0a03 	eor.w	sl, sl, r3
    3f80:	69b3      	ldr	r3, [r6, #24]
    3f82:	fa5f f48e 	uxtb.w	r4, lr
    3f86:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3f8a:	405c      	eors	r4, r3
    3f8c:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3f90:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3f94:	405c      	eors	r4, r3
    3f96:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3f9a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3f9e:	405c      	eors	r4, r3
    3fa0:	ea4f 6318 	mov.w	r3, r8, lsr #24
    3fa4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3fa8:	405c      	eors	r4, r3
    3faa:	69f3      	ldr	r3, [r6, #28]
    3fac:	b2ff      	uxtb	r7, r7
    3fae:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3fb2:	404b      	eors	r3, r1
    3fb4:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    3fb8:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    3fbc:	404b      	eors	r3, r1
    3fbe:	f3c8 4807 	ubfx	r8, r8, #16, #8
    3fc2:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    3fc6:	404b      	eors	r3, r1
    3fc8:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    3fcc:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    3fd0:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3fd2:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3fd6:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3fd8:	f1bb 0f00 	cmp.w	fp, #0
    3fdc:	f73f af3e 	bgt.w	3e5c <mbedtls_internal_aes_encrypt+0x84>
    3fe0:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3fe2:	6833      	ldr	r3, [r6, #0]
    3fe4:	fa5f f289 	uxtb.w	r2, r9
    3fe8:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 4190 <mbedtls_internal_aes_encrypt+0x3b8>
    3fec:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    3ff0:	405a      	eors	r2, r3
    3ff2:	f3ca 2307 	ubfx	r3, sl, #8, #8
    3ff6:	4f67      	ldr	r7, [pc, #412]	; (4194 <mbedtls_internal_aes_encrypt+0x3bc>)
    3ff8:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3ffc:	405a      	eors	r2, r3
    3ffe:	f3c4 4307 	ubfx	r3, r4, #16, #8
    4002:	4d65      	ldr	r5, [pc, #404]	; (4198 <mbedtls_internal_aes_encrypt+0x3c0>)
    4004:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4008:	405a      	eors	r2, r3
    400a:	0e0b      	lsrs	r3, r1, #24
    400c:	4863      	ldr	r0, [pc, #396]	; (419c <mbedtls_internal_aes_encrypt+0x3c4>)
    400e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4012:	405a      	eors	r2, r3
    4014:	fa5f fc8a 	uxtb.w	ip, sl
    4018:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    401c:	6873      	ldr	r3, [r6, #4]
    401e:	ea83 0c0c 	eor.w	ip, r3, ip
    4022:	f3c4 2307 	ubfx	r3, r4, #8, #8
    4026:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    402a:	ea8c 0c03 	eor.w	ip, ip, r3
    402e:	f3c1 4307 	ubfx	r3, r1, #16, #8
    4032:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4036:	ea8c 0c03 	eor.w	ip, ip, r3
    403a:	ea4f 6319 	mov.w	r3, r9, lsr #24
    403e:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4042:	ea8c 0c03 	eor.w	ip, ip, r3
    4046:	fa5f f884 	uxtb.w	r8, r4
    404a:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    404e:	68b3      	ldr	r3, [r6, #8]
    4050:	ea83 0808 	eor.w	r8, r3, r8
    4054:	f3c1 2307 	ubfx	r3, r1, #8, #8
    4058:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    405c:	ea88 0803 	eor.w	r8, r8, r3
    4060:	f3c9 4307 	ubfx	r3, r9, #16, #8
    4064:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4068:	ea88 0803 	eor.w	r8, r8, r3
    406c:	ea4f 631a 	mov.w	r3, sl, lsr #24
    4070:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    4074:	ea88 0803 	eor.w	r8, r8, r3
    4078:	68f3      	ldr	r3, [r6, #12]
    407a:	b2c9      	uxtb	r1, r1
    407c:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    4080:	404b      	eors	r3, r1
    4082:	f3c9 2907 	ubfx	r9, r9, #8, #8
    4086:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    408a:	405f      	eors	r7, r3
    408c:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    4090:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    4094:	405f      	eors	r7, r3
    4096:	0e24      	lsrs	r4, r4, #24
    4098:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    409c:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    409e:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    40a0:	b2d0      	uxtb	r0, r2
    40a2:	4b3f      	ldr	r3, [pc, #252]	; (41a0 <mbedtls_internal_aes_encrypt+0x3c8>)
    40a4:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    40a6:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    40a8:	f3cc 2107 	ubfx	r1, ip, #8, #8
    40ac:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    40ae:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    40b2:	f3c8 4107 	ubfx	r1, r8, #16, #8
    40b6:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    40b8:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    40bc:	0e39      	lsrs	r1, r7, #24
    40be:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    40c0:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    40c4:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    40c6:	fa5f f08c 	uxtb.w	r0, ip
    40ca:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    40cc:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    40ce:	f3c8 2107 	ubfx	r1, r8, #8, #8
    40d2:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    40d4:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    40d8:	f3c7 4107 	ubfx	r1, r7, #16, #8
    40dc:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    40de:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    40e2:	0e11      	lsrs	r1, r2, #24
    40e4:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    40e6:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    40ea:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    40ec:	fa5f f588 	uxtb.w	r5, r8
    40f0:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    40f2:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    40f4:	f3c7 2107 	ubfx	r1, r7, #8, #8
    40f8:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    40fa:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    40fe:	f3c2 4107 	ubfx	r1, r2, #16, #8
    4102:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4104:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4108:	ea4f 611c 	mov.w	r1, ip, lsr #24
    410c:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    410e:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    4112:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    4114:	b2ff      	uxtb	r7, r7
    4116:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    4118:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    411a:	f3c2 2207 	ubfx	r2, r2, #8, #8
    411e:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    4120:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    4124:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    4128:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    412c:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    4130:	ea4f 6818 	mov.w	r8, r8, lsr #24
    4134:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    4138:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    413c:	9e01      	ldr	r6, [sp, #4]
    413e:	7034      	strb	r4, [r6, #0]
    4140:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4144:	7072      	strb	r2, [r6, #1]
    4146:	f3c4 4207 	ubfx	r2, r4, #16, #8
    414a:	70b2      	strb	r2, [r6, #2]
    414c:	0e24      	lsrs	r4, r4, #24
    414e:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    4150:	7130      	strb	r0, [r6, #4]
    4152:	f3c0 2207 	ubfx	r2, r0, #8, #8
    4156:	7172      	strb	r2, [r6, #5]
    4158:	f3c0 4207 	ubfx	r2, r0, #16, #8
    415c:	71b2      	strb	r2, [r6, #6]
    415e:	0e00      	lsrs	r0, r0, #24
    4160:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    4162:	7235      	strb	r5, [r6, #8]
    4164:	f3c5 2207 	ubfx	r2, r5, #8, #8
    4168:	7272      	strb	r2, [r6, #9]
    416a:	f3c5 4207 	ubfx	r2, r5, #16, #8
    416e:	72b2      	strb	r2, [r6, #10]
    4170:	0e2d      	lsrs	r5, r5, #24
    4172:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    4174:	7333      	strb	r3, [r6, #12]
    4176:	f3c3 2207 	ubfx	r2, r3, #8, #8
    417a:	7372      	strb	r2, [r6, #13]
    417c:	f3c3 4207 	ubfx	r2, r3, #16, #8
    4180:	73b2      	strb	r2, [r6, #14]
    4182:	0e1b      	lsrs	r3, r3, #24
    4184:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    4186:	2000      	movs	r0, #0
    4188:	b003      	add	sp, #12
    418a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    418e:	bf00      	nop
    4190:	0002f5c0 	.word	0x0002f5c0
    4194:	0002f9c0 	.word	0x0002f9c0
    4198:	0002fdc0 	.word	0x0002fdc0
    419c:	000301c0 	.word	0x000301c0
    41a0:	0002f3c0 	.word	0x0002f3c0

000041a4 <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    41a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    41a8:	b083      	sub	sp, #12
    41aa:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    41ac:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    41ae:	f891 a000 	ldrb.w	sl, [r1]
    41b2:	784b      	ldrb	r3, [r1, #1]
    41b4:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    41b8:	788b      	ldrb	r3, [r1, #2]
    41ba:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    41be:	78cb      	ldrb	r3, [r1, #3]
    41c0:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    41c4:	6813      	ldr	r3, [r2, #0]
    41c6:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    41ca:	f891 9004 	ldrb.w	r9, [r1, #4]
    41ce:	794b      	ldrb	r3, [r1, #5]
    41d0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    41d4:	798b      	ldrb	r3, [r1, #6]
    41d6:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    41da:	79cb      	ldrb	r3, [r1, #7]
    41dc:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    41e0:	6853      	ldr	r3, [r2, #4]
    41e2:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    41e6:	7a0c      	ldrb	r4, [r1, #8]
    41e8:	7a4b      	ldrb	r3, [r1, #9]
    41ea:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    41ee:	7a8b      	ldrb	r3, [r1, #10]
    41f0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    41f4:	7acb      	ldrb	r3, [r1, #11]
    41f6:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    41fa:	6893      	ldr	r3, [r2, #8]
    41fc:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    41fe:	7b0b      	ldrb	r3, [r1, #12]
    4200:	7b4d      	ldrb	r5, [r1, #13]
    4202:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    4206:	7b8d      	ldrb	r5, [r1, #14]
    4208:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    420c:	7bc9      	ldrb	r1, [r1, #15]
    420e:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    4212:	f102 0610 	add.w	r6, r2, #16
    4216:	68d3      	ldr	r3, [r2, #12]
    4218:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    421a:	6803      	ldr	r3, [r0, #0]
    421c:	ea4f 0b63 	mov.w	fp, r3, asr #1
    4220:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    4224:	460b      	mov	r3, r1
    4226:	e0bd      	b.n	43a4 <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    4228:	6832      	ldr	r2, [r6, #0]
    422a:	fa5f f08a 	uxtb.w	r0, sl
    422e:	49cb      	ldr	r1, [pc, #812]	; (455c <mbedtls_internal_aes_decrypt+0x3b8>)
    4230:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    4234:	ea82 0800 	eor.w	r8, r2, r0
    4238:	f3c3 2207 	ubfx	r2, r3, #8, #8
    423c:	4dc8      	ldr	r5, [pc, #800]	; (4560 <mbedtls_internal_aes_decrypt+0x3bc>)
    423e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4242:	ea88 0802 	eor.w	r8, r8, r2
    4246:	f3c4 4207 	ubfx	r2, r4, #16, #8
    424a:	48c6      	ldr	r0, [pc, #792]	; (4564 <mbedtls_internal_aes_decrypt+0x3c0>)
    424c:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    4250:	ea88 0802 	eor.w	r8, r8, r2
    4254:	ea4f 6719 	mov.w	r7, r9, lsr #24
    4258:	4ac3      	ldr	r2, [pc, #780]	; (4568 <mbedtls_internal_aes_decrypt+0x3c4>)
    425a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    425e:	ea88 0807 	eor.w	r8, r8, r7
    4262:	fa5f fe89 	uxtb.w	lr, r9
    4266:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    426a:	6877      	ldr	r7, [r6, #4]
    426c:	ea87 0c0e 	eor.w	ip, r7, lr
    4270:	f3ca 2707 	ubfx	r7, sl, #8, #8
    4274:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    4278:	ea8c 0c07 	eor.w	ip, ip, r7
    427c:	f3c3 4707 	ubfx	r7, r3, #16, #8
    4280:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    4284:	ea8c 0c07 	eor.w	ip, ip, r7
    4288:	0e27      	lsrs	r7, r4, #24
    428a:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    428e:	ea8c 0c07 	eor.w	ip, ip, r7
    4292:	fa5f fe84 	uxtb.w	lr, r4
    4296:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    429a:	68b7      	ldr	r7, [r6, #8]
    429c:	ea87 0e0e 	eor.w	lr, r7, lr
    42a0:	f3c9 2707 	ubfx	r7, r9, #8, #8
    42a4:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    42a8:	ea8e 0e07 	eor.w	lr, lr, r7
    42ac:	f3ca 4707 	ubfx	r7, sl, #16, #8
    42b0:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    42b4:	ea8e 0e07 	eor.w	lr, lr, r7
    42b8:	0e1f      	lsrs	r7, r3, #24
    42ba:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    42be:	ea8e 0e07 	eor.w	lr, lr, r7
    42c2:	68f7      	ldr	r7, [r6, #12]
    42c4:	b2db      	uxtb	r3, r3
    42c6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    42ca:	405f      	eors	r7, r3
    42cc:	f3c4 2407 	ubfx	r4, r4, #8, #8
    42d0:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    42d4:	405f      	eors	r7, r3
    42d6:	f3c9 4907 	ubfx	r9, r9, #16, #8
    42da:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    42de:	405f      	eors	r7, r3
    42e0:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    42e4:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    42e8:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    42ea:	6933      	ldr	r3, [r6, #16]
    42ec:	fa5f f488 	uxtb.w	r4, r8
    42f0:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    42f4:	ea83 0a04 	eor.w	sl, r3, r4
    42f8:	f3c7 2307 	ubfx	r3, r7, #8, #8
    42fc:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4300:	ea8a 0a03 	eor.w	sl, sl, r3
    4304:	f3ce 4307 	ubfx	r3, lr, #16, #8
    4308:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    430c:	ea8a 0a03 	eor.w	sl, sl, r3
    4310:	ea4f 631c 	mov.w	r3, ip, lsr #24
    4314:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4318:	ea8a 0a03 	eor.w	sl, sl, r3
    431c:	6973      	ldr	r3, [r6, #20]
    431e:	fa5f f48c 	uxtb.w	r4, ip
    4322:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4326:	ea83 0904 	eor.w	r9, r3, r4
    432a:	f3c8 2307 	ubfx	r3, r8, #8, #8
    432e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4332:	ea89 0903 	eor.w	r9, r9, r3
    4336:	f3c7 4307 	ubfx	r3, r7, #16, #8
    433a:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    433e:	ea89 0903 	eor.w	r9, r9, r3
    4342:	ea4f 631e 	mov.w	r3, lr, lsr #24
    4346:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    434a:	ea89 0903 	eor.w	r9, r9, r3
    434e:	69b3      	ldr	r3, [r6, #24]
    4350:	fa5f f48e 	uxtb.w	r4, lr
    4354:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    4358:	405c      	eors	r4, r3
    435a:	f3cc 2307 	ubfx	r3, ip, #8, #8
    435e:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    4362:	405c      	eors	r4, r3
    4364:	f3c8 4307 	ubfx	r3, r8, #16, #8
    4368:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    436c:	405c      	eors	r4, r3
    436e:	0e3b      	lsrs	r3, r7, #24
    4370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    4374:	405c      	eors	r4, r3
    4376:	69f3      	ldr	r3, [r6, #28]
    4378:	b2ff      	uxtb	r7, r7
    437a:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    437e:	404b      	eors	r3, r1
    4380:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    4384:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    4388:	404b      	eors	r3, r1
    438a:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    438e:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    4392:	404b      	eors	r3, r1
    4394:	ea4f 6818 	mov.w	r8, r8, lsr #24
    4398:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    439c:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    439e:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    43a2:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    43a4:	f1bb 0f00 	cmp.w	fp, #0
    43a8:	f73f af3e 	bgt.w	4228 <mbedtls_internal_aes_decrypt+0x84>
    43ac:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    43ae:	6833      	ldr	r3, [r6, #0]
    43b0:	fa5f f28a 	uxtb.w	r2, sl
    43b4:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 455c <mbedtls_internal_aes_decrypt+0x3b8>
    43b8:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    43bc:	4053      	eors	r3, r2
    43be:	f3c1 2207 	ubfx	r2, r1, #8, #8
    43c2:	4f67      	ldr	r7, [pc, #412]	; (4560 <mbedtls_internal_aes_decrypt+0x3bc>)
    43c4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    43c8:	4053      	eors	r3, r2
    43ca:	f3c4 4207 	ubfx	r2, r4, #16, #8
    43ce:	4d65      	ldr	r5, [pc, #404]	; (4564 <mbedtls_internal_aes_decrypt+0x3c0>)
    43d0:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    43d4:	4053      	eors	r3, r2
    43d6:	ea4f 6219 	mov.w	r2, r9, lsr #24
    43da:	4863      	ldr	r0, [pc, #396]	; (4568 <mbedtls_internal_aes_decrypt+0x3c4>)
    43dc:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    43e0:	4053      	eors	r3, r2
    43e2:	fa5f fc89 	uxtb.w	ip, r9
    43e6:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    43ea:	6872      	ldr	r2, [r6, #4]
    43ec:	ea82 0c0c 	eor.w	ip, r2, ip
    43f0:	f3ca 2207 	ubfx	r2, sl, #8, #8
    43f4:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    43f8:	ea8c 0c02 	eor.w	ip, ip, r2
    43fc:	f3c1 4207 	ubfx	r2, r1, #16, #8
    4400:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4404:	ea8c 0c02 	eor.w	ip, ip, r2
    4408:	0e22      	lsrs	r2, r4, #24
    440a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    440e:	ea8c 0c02 	eor.w	ip, ip, r2
    4412:	fa5f f884 	uxtb.w	r8, r4
    4416:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    441a:	68b2      	ldr	r2, [r6, #8]
    441c:	ea82 0808 	eor.w	r8, r2, r8
    4420:	f3c9 2207 	ubfx	r2, r9, #8, #8
    4424:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    4428:	ea88 0802 	eor.w	r8, r8, r2
    442c:	f3ca 4207 	ubfx	r2, sl, #16, #8
    4430:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    4434:	ea88 0802 	eor.w	r8, r8, r2
    4438:	0e0a      	lsrs	r2, r1, #24
    443a:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    443e:	ea88 0802 	eor.w	r8, r8, r2
    4442:	68f2      	ldr	r2, [r6, #12]
    4444:	b2c9      	uxtb	r1, r1
    4446:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    444a:	404a      	eors	r2, r1
    444c:	f3c4 2407 	ubfx	r4, r4, #8, #8
    4450:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    4454:	4057      	eors	r7, r2
    4456:	f3c9 4907 	ubfx	r9, r9, #16, #8
    445a:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    445e:	4057      	eors	r7, r2
    4460:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    4464:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    4468:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    446a:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    446c:	b2d8      	uxtb	r0, r3
    446e:	4a3f      	ldr	r2, [pc, #252]	; (456c <mbedtls_internal_aes_decrypt+0x3c8>)
    4470:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    4472:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4474:	f3c7 2107 	ubfx	r1, r7, #8, #8
    4478:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    447a:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    447e:	f3c8 4107 	ubfx	r1, r8, #16, #8
    4482:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    4484:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    4488:	ea4f 611c 	mov.w	r1, ip, lsr #24
    448c:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    448e:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    4492:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    4494:	fa5f f08c 	uxtb.w	r0, ip
    4498:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    449a:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    449c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    44a0:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    44a2:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    44a6:	f3c7 4107 	ubfx	r1, r7, #16, #8
    44aa:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    44ac:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    44b0:	ea4f 6118 	mov.w	r1, r8, lsr #24
    44b4:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    44b6:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    44ba:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    44bc:	fa5f f588 	uxtb.w	r5, r8
    44c0:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    44c2:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    44c4:	f3cc 2107 	ubfx	r1, ip, #8, #8
    44c8:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    44ca:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    44ce:	f3c3 4107 	ubfx	r1, r3, #16, #8
    44d2:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    44d4:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    44d8:	0e39      	lsrs	r1, r7, #24
    44da:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    44dc:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    44e0:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    44e2:	b2ff      	uxtb	r7, r7
    44e4:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    44e6:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    44e8:	f3c8 2807 	ubfx	r8, r8, #8, #8
    44ec:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    44f0:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    44f4:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    44f8:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    44fc:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    4500:	0e1b      	lsrs	r3, r3, #24
    4502:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    4504:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    4508:	9e01      	ldr	r6, [sp, #4]
    450a:	7034      	strb	r4, [r6, #0]
    450c:	f3c4 2207 	ubfx	r2, r4, #8, #8
    4510:	7072      	strb	r2, [r6, #1]
    4512:	f3c4 4207 	ubfx	r2, r4, #16, #8
    4516:	70b2      	strb	r2, [r6, #2]
    4518:	0e24      	lsrs	r4, r4, #24
    451a:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    451c:	7130      	strb	r0, [r6, #4]
    451e:	f3c0 2207 	ubfx	r2, r0, #8, #8
    4522:	7172      	strb	r2, [r6, #5]
    4524:	f3c0 4207 	ubfx	r2, r0, #16, #8
    4528:	71b2      	strb	r2, [r6, #6]
    452a:	0e00      	lsrs	r0, r0, #24
    452c:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    452e:	7235      	strb	r5, [r6, #8]
    4530:	f3c5 2207 	ubfx	r2, r5, #8, #8
    4534:	7272      	strb	r2, [r6, #9]
    4536:	f3c5 4207 	ubfx	r2, r5, #16, #8
    453a:	72b2      	strb	r2, [r6, #10]
    453c:	0e2d      	lsrs	r5, r5, #24
    453e:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    4540:	7333      	strb	r3, [r6, #12]
    4542:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4546:	7372      	strb	r2, [r6, #13]
    4548:	f3c3 4207 	ubfx	r2, r3, #16, #8
    454c:	73b2      	strb	r2, [r6, #14]
    454e:	0e1b      	lsrs	r3, r3, #24
    4550:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    4552:	2000      	movs	r0, #0
    4554:	b003      	add	sp, #12
    4556:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    455a:	bf00      	nop
    455c:	000306e8 	.word	0x000306e8
    4560:	00030ae8 	.word	0x00030ae8
    4564:	00030ee8 	.word	0x00030ee8
    4568:	000312e8 	.word	0x000312e8
    456c:	000305e8 	.word	0x000305e8

00004570 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    4570:	b510      	push	{r4, lr}
    4572:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    4574:	2901      	cmp	r1, #1
    4576:	d004      	beq.n	4582 <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    4578:	461a      	mov	r2, r3
    457a:	4621      	mov	r1, r4
    457c:	f7ff fe12 	bl	41a4 <mbedtls_internal_aes_decrypt>
}
    4580:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    4582:	461a      	mov	r2, r3
    4584:	4621      	mov	r1, r4
    4586:	f7ff fc27 	bl	3dd8 <mbedtls_internal_aes_encrypt>
    458a:	bd10      	pop	{r4, pc}

0000458c <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
    458c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    4590:	4682      	mov	sl, r0
    4592:	4693      	mov	fp, r2
    4594:	461d      	mov	r5, r3
    4596:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    459a:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    459c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int c, i;
    size_t n = *nc_off;
    459e:	6814      	ldr	r4, [r2, #0]

    while( length-- )
    45a0:	e00a      	b.n	45b8 <mbedtls_aes_crypt_ctr+0x2c>

            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
    45a2:	783a      	ldrb	r2, [r7, #0]
        *output++ = (unsigned char)( c ^ stream_block[n] );
    45a4:	f919 3004 	ldrsb.w	r3, [r9, r4]
    45a8:	4053      	eors	r3, r2
    45aa:	7033      	strb	r3, [r6, #0]

        n = ( n + 1 ) & 0x0F;
    45ac:	3401      	adds	r4, #1
    45ae:	f004 040f 	and.w	r4, r4, #15
        *output++ = (unsigned char)( c ^ stream_block[n] );
    45b2:	3601      	adds	r6, #1
        c = *input++;
    45b4:	3701      	adds	r7, #1
    while( length-- )
    45b6:	4641      	mov	r1, r8
    45b8:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    45bc:	b199      	cbz	r1, 45e6 <mbedtls_aes_crypt_ctr+0x5a>
        if( n == 0 ) {
    45be:	2c00      	cmp	r4, #0
    45c0:	d1ef      	bne.n	45a2 <mbedtls_aes_crypt_ctr+0x16>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
    45c2:	464b      	mov	r3, r9
    45c4:	462a      	mov	r2, r5
    45c6:	2101      	movs	r1, #1
    45c8:	4650      	mov	r0, sl
    45ca:	f7ff ffd1 	bl	4570 <mbedtls_aes_crypt_ecb>
            for( i = 16; i > 0; i-- )
    45ce:	2210      	movs	r2, #16
    45d0:	2a00      	cmp	r2, #0
    45d2:	dde6      	ble.n	45a2 <mbedtls_aes_crypt_ctr+0x16>
                if( ++nonce_counter[i - 1] != 0 )
    45d4:	1e51      	subs	r1, r2, #1
    45d6:	5c6b      	ldrb	r3, [r5, r1]
    45d8:	3301      	adds	r3, #1
    45da:	b2db      	uxtb	r3, r3
    45dc:	546b      	strb	r3, [r5, r1]
    45de:	2b00      	cmp	r3, #0
    45e0:	d1df      	bne.n	45a2 <mbedtls_aes_crypt_ctr+0x16>
            for( i = 16; i > 0; i-- )
    45e2:	460a      	mov	r2, r1
    45e4:	e7f4      	b.n	45d0 <mbedtls_aes_crypt_ctr+0x44>
    }

    *nc_off = n;
    45e6:	f8cb 4000 	str.w	r4, [fp]

    return( 0 );
}
    45ea:	2000      	movs	r0, #0
    45ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000045f0 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    45f0:	b530      	push	{r4, r5, lr}
    45f2:	b085      	sub	sp, #20
    45f4:	4604      	mov	r4, r0
    45f6:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    45f8:	2203      	movs	r2, #3
    45fa:	4668      	mov	r0, sp
    45fc:	f7fb fe60 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    4600:	220d      	movs	r2, #13
    4602:	2100      	movs	r1, #0
    4604:	f10d 0003 	add.w	r0, sp, #3
    4608:	f026 f9b2 	bl	2a970 <memset>

	err = bt_encrypt_le(irk, res, res);
    460c:	466a      	mov	r2, sp
    460e:	4669      	mov	r1, sp
    4610:	4620      	mov	r0, r4
    4612:	f00d f8a1 	bl	11758 <bt_encrypt_le>
	if (err) {
    4616:	4604      	mov	r4, r0
    4618:	b110      	cbz	r0, 4620 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    461a:	4620      	mov	r0, r4
    461c:	b005      	add	sp, #20
    461e:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    4620:	2203      	movs	r2, #3
    4622:	4669      	mov	r1, sp
    4624:	4628      	mov	r0, r5
    4626:	f7fb fe4b 	bl	2c0 <memcpy>
	return 0;
    462a:	e7f6      	b.n	461a <ah+0x2a>

0000462c <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    462c:	b510      	push	{r4, lr}
    462e:	b082      	sub	sp, #8
    4630:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    4632:	aa01      	add	r2, sp, #4
    4634:	3103      	adds	r1, #3
    4636:	f7ff ffdb 	bl	45f0 <ah>
	if (err) {
    463a:	b110      	cbz	r0, 4642 <bt_rpa_irk_matches+0x16>
		return false;
    463c:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    463e:	b002      	add	sp, #8
    4640:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    4642:	2203      	movs	r2, #3
    4644:	a901      	add	r1, sp, #4
    4646:	4620      	mov	r0, r4
    4648:	f026 f8fe 	bl	2a848 <memcmp>
    464c:	fab0 f080 	clz	r0, r0
    4650:	0940      	lsrs	r0, r0, #5
    4652:	e7f4      	b.n	463e <bt_rpa_irk_matches+0x12>

00004654 <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    4654:	b570      	push	{r4, r5, r6, lr}
    4656:	4606      	mov	r6, r0
    4658:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    465a:	1ccd      	adds	r5, r1, #3
    465c:	2103      	movs	r1, #3
    465e:	4628      	mov	r0, r5
    4660:	f00d f85e 	bl	11720 <bt_rand>
	if (err) {
    4664:	4603      	mov	r3, r0
    4666:	b108      	cbz	r0, 466c <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    4668:	4618      	mov	r0, r3
    466a:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    466c:	f994 3005 	ldrsb.w	r3, [r4, #5]
    4670:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    4674:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    4678:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    467a:	4622      	mov	r2, r4
    467c:	4629      	mov	r1, r5
    467e:	4630      	mov	r0, r6
    4680:	f7ff ffb6 	bl	45f0 <ah>
    4684:	4603      	mov	r3, r0
    4686:	e7ef      	b.n	4668 <bt_rpa_create+0x14>

00004688 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    4688:	b570      	push	{r4, r5, r6, lr}
    468a:	4605      	mov	r5, r0
    468c:	460c      	mov	r4, r1
	switch (src->type) {
    468e:	7803      	ldrb	r3, [r0, #0]
    4690:	2b01      	cmp	r3, #1
    4692:	d010      	beq.n	46b6 <uuid_to_uuid128+0x2e>
    4694:	b113      	cbz	r3, 469c <uuid_to_uuid128+0x14>
    4696:	2b02      	cmp	r3, #2
    4698:	d01f      	beq.n	46da <uuid_to_uuid128+0x52>
    469a:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    469c:	4e12      	ldr	r6, [pc, #72]	; (46e8 <uuid_to_uuid128+0x60>)
    469e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    46a0:	6020      	str	r0, [r4, #0]
    46a2:	6061      	str	r1, [r4, #4]
    46a4:	60a2      	str	r2, [r4, #8]
    46a6:	60e3      	str	r3, [r4, #12]
    46a8:	7833      	ldrb	r3, [r6, #0]
    46aa:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    46ac:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    46ae:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    46b0:	0a1b      	lsrs	r3, r3, #8
    46b2:	73a3      	strb	r3, [r4, #14]
    46b4:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    46b6:	4e0c      	ldr	r6, [pc, #48]	; (46e8 <uuid_to_uuid128+0x60>)
    46b8:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    46ba:	6020      	str	r0, [r4, #0]
    46bc:	6061      	str	r1, [r4, #4]
    46be:	60a2      	str	r2, [r4, #8]
    46c0:	60e3      	str	r3, [r4, #12]
    46c2:	7833      	ldrb	r3, [r6, #0]
    46c4:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    46c6:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    46c8:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    46ca:	f3c3 2207 	ubfx	r2, r3, #8, #8
    46ce:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    46d0:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    46d2:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    46d4:	0a1b      	lsrs	r3, r3, #8
    46d6:	7423      	strb	r3, [r4, #16]
    46d8:	bd70      	pop	{r4, r5, r6, pc}
    46da:	4608      	mov	r0, r1
    46dc:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    46de:	2211      	movs	r2, #17
    46e0:	f7fb fdee 	bl	2c0 <memcpy>
    46e4:	bd70      	pop	{r4, r5, r6, pc}
    46e6:	bf00      	nop
    46e8:	000316e8 	.word	0x000316e8

000046ec <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    46ec:	b510      	push	{r4, lr}
    46ee:	b08a      	sub	sp, #40	; 0x28
    46f0:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    46f2:	a905      	add	r1, sp, #20
    46f4:	f7ff ffc8 	bl	4688 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    46f8:	4669      	mov	r1, sp
    46fa:	4620      	mov	r0, r4
    46fc:	f7ff ffc4 	bl	4688 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    4700:	2210      	movs	r2, #16
    4702:	f10d 0101 	add.w	r1, sp, #1
    4706:	f10d 0015 	add.w	r0, sp, #21
    470a:	f026 f89d 	bl	2a848 <memcmp>
}
    470e:	b00a      	add	sp, #40	; 0x28
    4710:	bd10      	pop	{r4, pc}

00004712 <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    4712:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    4714:	7803      	ldrb	r3, [r0, #0]
    4716:	780a      	ldrb	r2, [r1, #0]
    4718:	4293      	cmp	r3, r2
    471a:	d107      	bne.n	472c <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    471c:	2b01      	cmp	r3, #1
    471e:	d00c      	beq.n	473a <bt_uuid_cmp+0x28>
    4720:	b13b      	cbz	r3, 4732 <bt_uuid_cmp+0x20>
    4722:	2b02      	cmp	r3, #2
    4724:	d00d      	beq.n	4742 <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    4726:	f06f 0015 	mvn.w	r0, #21
}
    472a:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    472c:	f7ff ffde 	bl	46ec <uuid128_cmp>
    4730:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    4732:	8840      	ldrh	r0, [r0, #2]
    4734:	884b      	ldrh	r3, [r1, #2]
    4736:	1ac0      	subs	r0, r0, r3
    4738:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    473a:	6840      	ldr	r0, [r0, #4]
    473c:	684b      	ldr	r3, [r1, #4]
    473e:	1ac0      	subs	r0, r0, r3
    4740:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    4742:	2210      	movs	r2, #16
    4744:	3101      	adds	r1, #1
    4746:	3001      	adds	r0, #1
    4748:	f026 f87e 	bl	2a848 <memcmp>
    474c:	bd08      	pop	{r3, pc}
	...

00004750 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    4750:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    4752:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    4754:	4b06      	ldr	r3, [pc, #24]	; (4770 <le_dhkey_complete+0x20>)
    4756:	681b      	ldr	r3, [r3, #0]
    4758:	b133      	cbz	r3, 4768 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    475a:	7802      	ldrb	r2, [r0, #0]
    475c:	b92a      	cbnz	r2, 476a <le_dhkey_complete+0x1a>
    475e:	3001      	adds	r0, #1
    4760:	4798      	blx	r3
		dh_key_cb = NULL;
    4762:	2200      	movs	r2, #0
    4764:	4b02      	ldr	r3, [pc, #8]	; (4770 <le_dhkey_complete+0x20>)
    4766:	601a      	str	r2, [r3, #0]
    4768:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    476a:	2000      	movs	r0, #0
    476c:	e7f8      	b.n	4760 <le_dhkey_complete+0x10>
    476e:	bf00      	nop
    4770:	200003e0 	.word	0x200003e0

00004774 <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    4774:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    4776:	7851      	ldrb	r1, [r2, #1]
    4778:	4b06      	ldr	r3, [pc, #24]	; (4794 <read_local_ver_complete+0x20>)
    477a:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    477c:	8851      	ldrh	r1, [r2, #2]
    477e:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    4780:	7911      	ldrb	r1, [r2, #4]
    4782:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    4784:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    4788:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    478a:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    478e:	829a      	strh	r2, [r3, #20]
    4790:	4770      	bx	lr
    4792:	bf00      	nop
    4794:	2000b980 	.word	0x2000b980

00004798 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    4798:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    479a:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    479c:	7a1a      	ldrb	r2, [r3, #8]
    479e:	79dc      	ldrb	r4, [r3, #7]
    47a0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    47a4:	7999      	ldrb	r1, [r3, #6]
    47a6:	795a      	ldrb	r2, [r3, #5]
    47a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    47ac:	2000      	movs	r0, #0
    47ae:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    47b2:	791c      	ldrb	r4, [r3, #4]
    47b4:	78da      	ldrb	r2, [r3, #3]
    47b6:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    47ba:	789c      	ldrb	r4, [r3, #2]
    47bc:	785b      	ldrb	r3, [r3, #1]
    47be:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    47c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    47c6:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    47c8:	4b02      	ldr	r3, [pc, #8]	; (47d4 <le_read_supp_states_complete+0x3c>)
    47ca:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    47ce:	bc10      	pop	{r4}
    47d0:	4770      	bx	lr
    47d2:	bf00      	nop
    47d4:	2000b980 	.word	0x2000b980

000047d8 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    47d8:	7803      	ldrb	r3, [r0, #0]
    47da:	f013 0f01 	tst.w	r3, #1
    47de:	d106      	bne.n	47ee <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    47e0:	4b0c      	ldr	r3, [pc, #48]	; (4814 <valid_adv_param+0x3c>)
    47e2:	7b9b      	ldrb	r3, [r3, #14]
    47e4:	2b08      	cmp	r3, #8
    47e6:	d802      	bhi.n	47ee <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    47e8:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    47ea:	2b9f      	cmp	r3, #159	; 0x9f
    47ec:	d90c      	bls.n	4808 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    47ee:	8843      	ldrh	r3, [r0, #2]
    47f0:	8882      	ldrh	r2, [r0, #4]
    47f2:	4293      	cmp	r3, r2
    47f4:	d80a      	bhi.n	480c <valid_adv_param+0x34>
    47f6:	2b1f      	cmp	r3, #31
    47f8:	d90a      	bls.n	4810 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    47fa:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    47fe:	d801      	bhi.n	4804 <valid_adv_param+0x2c>
		return false;
	}

	return true;
    4800:	2001      	movs	r0, #1
}
    4802:	4770      	bx	lr
		return false;
    4804:	2000      	movs	r0, #0
    4806:	4770      	bx	lr
			return false;
    4808:	2000      	movs	r0, #0
    480a:	4770      	bx	lr
		return false;
    480c:	2000      	movs	r0, #0
    480e:	4770      	bx	lr
    4810:	2000      	movs	r0, #0
    4812:	4770      	bx	lr
    4814:	2000b980 	.word	0x2000b980

00004818 <hci_reset_complete>:
	u8_t status = buf->data[0];
    4818:	6883      	ldr	r3, [r0, #8]
    481a:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    481c:	b103      	cbz	r3, 4820 <hci_reset_complete+0x8>
    481e:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    4820:	2200      	movs	r2, #0
    4822:	4b07      	ldr	r3, [pc, #28]	; (4840 <hci_reset_complete+0x28>)
    4824:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    4826:	4b07      	ldr	r3, [pc, #28]	; (4844 <hci_reset_complete+0x2c>)
    4828:	2201      	movs	r2, #1
    482a:	f3bf 8f5b 	dmb	ish
    482e:	e853 1f00 	ldrex	r1, [r3]
    4832:	e843 2000 	strex	r0, r2, [r3]
    4836:	2800      	cmp	r0, #0
    4838:	d1f9      	bne.n	482e <hci_reset_complete+0x16>
    483a:	f3bf 8f5b 	dmb	ish
    483e:	e7ee      	b.n	481e <hci_reset_complete+0x6>
    4840:	2000042c 	.word	0x2000042c
    4844:	2000b9f0 	.word	0x2000b9f0

00004848 <read_local_features_complete>:
{
    4848:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    484a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    484c:	2208      	movs	r2, #8
    484e:	3101      	adds	r1, #1
    4850:	4801      	ldr	r0, [pc, #4]	; (4858 <read_local_features_complete+0x10>)
    4852:	f7fb fd35 	bl	2c0 <memcpy>
    4856:	bd08      	pop	{r3, pc}
    4858:	2000b996 	.word	0x2000b996

0000485c <read_bdaddr_complete>:
{
    485c:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    485e:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4860:	4c04      	ldr	r4, [pc, #16]	; (4874 <read_bdaddr_complete+0x18>)
    4862:	2206      	movs	r2, #6
    4864:	3101      	adds	r1, #1
    4866:	1c60      	adds	r0, r4, #1
    4868:	f7fb fd2a 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    486c:	2300      	movs	r3, #0
    486e:	7023      	strb	r3, [r4, #0]
    4870:	bd10      	pop	{r4, pc}
    4872:	bf00      	nop
    4874:	2000b980 	.word	0x2000b980

00004878 <read_supported_commands_complete>:
{
    4878:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    487a:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    487c:	2240      	movs	r2, #64	; 0x40
    487e:	3101      	adds	r1, #1
    4880:	4801      	ldr	r0, [pc, #4]	; (4888 <read_supported_commands_complete+0x10>)
    4882:	f7fb fd1d 	bl	2c0 <memcpy>
    4886:	bd08      	pop	{r3, pc}
    4888:	2000b99e 	.word	0x2000b99e

0000488c <read_le_features_complete>:
{
    488c:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    488e:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    4890:	2208      	movs	r2, #8
    4892:	3101      	adds	r1, #1
    4894:	4801      	ldr	r0, [pc, #4]	; (489c <read_le_features_complete+0x10>)
    4896:	f7fb fd13 	bl	2c0 <memcpy>
    489a:	bd08      	pop	{r3, pc}
    489c:	2000b9f8 	.word	0x2000b9f8

000048a0 <le_read_buffer_size_complete>:
{
    48a0:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    48a2:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    48a4:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    48a8:	b299      	uxth	r1, r3
    48aa:	4807      	ldr	r0, [pc, #28]	; (48c8 <le_read_buffer_size_complete+0x28>)
    48ac:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    48b0:	b901      	cbnz	r1, 48b4 <le_read_buffer_size_complete+0x14>
    48b2:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    48b4:	78d1      	ldrb	r1, [r2, #3]
    48b6:	2902      	cmp	r1, #2
    48b8:	bf28      	it	cs
    48ba:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    48bc:	460a      	mov	r2, r1
    48be:	308c      	adds	r0, #140	; 0x8c
    48c0:	f024 fd9a 	bl	293f8 <_impl_k_sem_init>
    48c4:	e7f5      	b.n	48b2 <le_read_buffer_size_complete+0x12>
    48c6:	bf00      	nop
    48c8:	2000b980 	.word	0x2000b980

000048cc <read_buffer_size_complete>:
{
    48cc:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    48ce:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    48d0:	4b09      	ldr	r3, [pc, #36]	; (48f8 <read_buffer_size_complete+0x2c>)
    48d2:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    48d6:	b103      	cbz	r3, 48da <read_buffer_size_complete+0xe>
    48d8:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    48da:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    48de:	4806      	ldr	r0, [pc, #24]	; (48f8 <read_buffer_size_complete+0x2c>)
    48e0:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    48e4:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    48e6:	2902      	cmp	r1, #2
    48e8:	bf28      	it	cs
    48ea:	2102      	movcs	r1, #2
    48ec:	460a      	mov	r2, r1
    48ee:	308c      	adds	r0, #140	; 0x8c
    48f0:	f024 fd82 	bl	293f8 <_impl_k_sem_init>
    48f4:	e7f0      	b.n	48d8 <read_buffer_size_complete+0xc>
    48f6:	bf00      	nop
    48f8:	2000b980 	.word	0x2000b980

000048fc <le_pkey_complete>:
{
    48fc:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    48fe:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4900:	4b17      	ldr	r3, [pc, #92]	; (4960 <le_pkey_complete+0x64>)
    4902:	f3bf 8f5b 	dmb	ish
    4906:	e853 2f00 	ldrex	r2, [r3]
    490a:	f022 0210 	bic.w	r2, r2, #16
    490e:	e843 2100 	strex	r1, r2, [r3]
    4912:	2900      	cmp	r1, #0
    4914:	d1f7      	bne.n	4906 <le_pkey_complete+0xa>
    4916:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    491a:	782b      	ldrb	r3, [r5, #0]
    491c:	b113      	cbz	r3, 4924 <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    491e:	4b11      	ldr	r3, [pc, #68]	; (4964 <le_pkey_complete+0x68>)
    4920:	681c      	ldr	r4, [r3, #0]
    4922:	e015      	b.n	4950 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    4924:	2240      	movs	r2, #64	; 0x40
    4926:	1c69      	adds	r1, r5, #1
    4928:	480f      	ldr	r0, [pc, #60]	; (4968 <le_pkey_complete+0x6c>)
    492a:	f7fb fcc9 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    492e:	4b0c      	ldr	r3, [pc, #48]	; (4960 <le_pkey_complete+0x64>)
    4930:	f3bf 8f5b 	dmb	ish
    4934:	e853 2f00 	ldrex	r2, [r3]
    4938:	f042 0208 	orr.w	r2, r2, #8
    493c:	e843 2100 	strex	r1, r2, [r3]
    4940:	2900      	cmp	r1, #0
    4942:	d1f7      	bne.n	4934 <le_pkey_complete+0x38>
    4944:	f3bf 8f5b 	dmb	ish
    4948:	e7e9      	b.n	491e <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    494a:	2000      	movs	r0, #0
    494c:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    494e:	6864      	ldr	r4, [r4, #4]
    4950:	b12c      	cbz	r4, 495e <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    4952:	6823      	ldr	r3, [r4, #0]
    4954:	782a      	ldrb	r2, [r5, #0]
    4956:	2a00      	cmp	r2, #0
    4958:	d1f7      	bne.n	494a <le_pkey_complete+0x4e>
    495a:	1c68      	adds	r0, r5, #1
    495c:	e7f6      	b.n	494c <le_pkey_complete+0x50>
}
    495e:	bd38      	pop	{r3, r4, r5, pc}
    4960:	2000b9f0 	.word	0x2000b9f0
    4964:	20000424 	.word	0x20000424
    4968:	200003e4 	.word	0x200003e4

0000496c <hci_acl>:
{
    496c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    496e:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    4970:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    4972:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    4974:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    4976:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    4978:	f100 0510 	add.w	r5, r0, #16
    497c:	89c3      	ldrh	r3, [r0, #14]
    497e:	442b      	add	r3, r5
    4980:	3303      	adds	r3, #3
    4982:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    4986:	f3c2 020b 	ubfx	r2, r2, #0, #12
    498a:	805a      	strh	r2, [r3, #2]
    498c:	89c3      	ldrh	r3, [r0, #14]
    498e:	442b      	add	r3, r5
    4990:	3303      	adds	r3, #3
    4992:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    4996:	22ff      	movs	r2, #255	; 0xff
    4998:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    499a:	2104      	movs	r1, #4
    499c:	3008      	adds	r0, #8
    499e:	f016 fa82 	bl	1aea6 <net_buf_simple_pull>
	if (buf->len != len) {
    49a2:	89a3      	ldrh	r3, [r4, #12]
    49a4:	429e      	cmp	r6, r3
    49a6:	d003      	beq.n	49b0 <hci_acl+0x44>
		net_buf_unref(buf);
    49a8:	4620      	mov	r0, r4
    49aa:	f016 f9e3 	bl	1ad74 <net_buf_unref>
		return;
    49ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    49b0:	89e3      	ldrh	r3, [r4, #14]
    49b2:	442b      	add	r3, r5
    49b4:	3303      	adds	r3, #3
    49b6:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    49ba:	8858      	ldrh	r0, [r3, #2]
    49bc:	f002 fc7e 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    49c0:	4606      	mov	r6, r0
    49c2:	b180      	cbz	r0, 49e6 <hci_acl+0x7a>
    49c4:	89e3      	ldrh	r3, [r4, #14]
    49c6:	441d      	add	r5, r3
    49c8:	3503      	adds	r5, #3
    49ca:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    49ce:	f003 f83b 	bl	7a48 <bt_conn_get_id>
    49d2:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    49d4:	463a      	mov	r2, r7
    49d6:	4621      	mov	r1, r4
    49d8:	4630      	mov	r0, r6
    49da:	f002 fb23 	bl	7024 <bt_conn_recv>
	bt_conn_unref(conn);
    49de:	4630      	mov	r0, r6
    49e0:	f002 fcf0 	bl	73c4 <bt_conn_unref>
    49e4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    49e6:	4620      	mov	r0, r4
    49e8:	f016 f9c4 	bl	1ad74 <net_buf_unref>
		return;
    49ec:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000049ee <update_sec_level>:
{
    49ee:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    49f0:	7a83      	ldrb	r3, [r0, #10]
    49f2:	b18b      	cbz	r3, 4a18 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    49f4:	6f03      	ldr	r3, [r0, #112]	; 0x70
    49f6:	b1ab      	cbz	r3, 4a24 <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    49f8:	f3bf 8f5b 	dmb	ish
    49fc:	689b      	ldr	r3, [r3, #8]
    49fe:	f3bf 8f5b 	dmb	ish
    4a02:	f013 0f01 	tst.w	r3, #1
    4a06:	d00d      	beq.n	4a24 <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    4a08:	6f03      	ldr	r3, [r0, #112]	; 0x70
    4a0a:	899b      	ldrh	r3, [r3, #12]
    4a0c:	f013 0f20 	tst.w	r3, #32
    4a10:	d005      	beq.n	4a1e <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    4a12:	2304      	movs	r3, #4
    4a14:	7203      	strb	r3, [r0, #8]
    4a16:	e007      	b.n	4a28 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    4a18:	2301      	movs	r3, #1
    4a1a:	7203      	strb	r3, [r0, #8]
		return;
    4a1c:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    4a1e:	2303      	movs	r3, #3
    4a20:	7203      	strb	r3, [r0, #8]
    4a22:	e001      	b.n	4a28 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    4a24:	2302      	movs	r3, #2
    4a26:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    4a28:	7a42      	ldrb	r2, [r0, #9]
    4a2a:	7a03      	ldrb	r3, [r0, #8]
    4a2c:	429a      	cmp	r2, r3
    4a2e:	d800      	bhi.n	4a32 <update_sec_level+0x44>
    4a30:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    4a32:	2105      	movs	r1, #5
    4a34:	f002 fe8a 	bl	774c <bt_conn_disconnect>
    4a38:	e7fa      	b.n	4a30 <update_sec_level+0x42>

00004a3a <hci_encrypt_change>:
{
    4a3a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    4a3c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4a3e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4a42:	f002 fc3b 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    4a46:	b1e0      	cbz	r0, 4a82 <hci_encrypt_change+0x48>
    4a48:	4604      	mov	r4, r0
	if (evt->status) {
    4a4a:	782b      	ldrb	r3, [r5, #0]
    4a4c:	b13b      	cbz	r3, 4a5e <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    4a4e:	7883      	ldrb	r3, [r0, #2]
    4a50:	b90b      	cbnz	r3, 4a56 <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    4a52:	7a03      	ldrb	r3, [r0, #8]
    4a54:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    4a56:	4620      	mov	r0, r4
    4a58:	f002 fcb4 	bl	73c4 <bt_conn_unref>
		return;
    4a5c:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    4a5e:	78eb      	ldrb	r3, [r5, #3]
    4a60:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    4a62:	7882      	ldrb	r2, [r0, #2]
    4a64:	b91a      	cbnz	r2, 4a6e <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    4a66:	b96b      	cbnz	r3, 4a84 <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    4a68:	4620      	mov	r0, r4
    4a6a:	f7ff ffc0 	bl	49ee <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    4a6e:	7829      	ldrb	r1, [r5, #0]
    4a70:	4620      	mov	r0, r4
    4a72:	f003 fbcb 	bl	820c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4a76:	4620      	mov	r0, r4
    4a78:	f002 fa9e 	bl	6fb8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4a7c:	4620      	mov	r0, r4
    4a7e:	f002 fca1 	bl	73c4 <bt_conn_unref>
    4a82:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    4a84:	f008 fafe 	bl	d084 <bt_smp_update_keys>
    4a88:	e7ee      	b.n	4a68 <hci_encrypt_change+0x2e>

00004a8a <hci_encrypt_key_refresh_complete>:
{
    4a8a:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    4a8c:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4a8e:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    4a92:	f002 fc13 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    4a96:	b170      	cbz	r0, 4ab6 <hci_encrypt_key_refresh_complete+0x2c>
    4a98:	4604      	mov	r4, r0
	if (evt->status) {
    4a9a:	7829      	ldrb	r1, [r5, #0]
    4a9c:	b961      	cbnz	r1, 4ab8 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    4a9e:	7883      	ldrb	r3, [r0, #2]
    4aa0:	b16b      	cbz	r3, 4abe <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    4aa2:	7829      	ldrb	r1, [r5, #0]
    4aa4:	4620      	mov	r0, r4
    4aa6:	f003 fbb1 	bl	820c <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4aaa:	4620      	mov	r0, r4
    4aac:	f002 fa84 	bl	6fb8 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4ab0:	4620      	mov	r0, r4
    4ab2:	f002 fc87 	bl	73c4 <bt_conn_unref>
    4ab6:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    4ab8:	f003 fba8 	bl	820c <bt_l2cap_encrypt_change>
		return;
    4abc:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    4abe:	f008 fae1 	bl	d084 <bt_smp_update_keys>
		update_sec_level(conn);
    4ac2:	4620      	mov	r0, r4
    4ac4:	f7ff ff93 	bl	49ee <update_sec_level>
    4ac8:	e7eb      	b.n	4aa2 <hci_encrypt_key_refresh_complete+0x18>

00004aca <find_id_addr>:
{
    4aca:	b510      	push	{r4, lr}
    4acc:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    4ace:	f008 fbe3 	bl	d298 <bt_keys_find_irk>
		if (keys) {
    4ad2:	b100      	cbz	r0, 4ad6 <find_id_addr+0xc>
			return &keys->addr;
    4ad4:	bd10      	pop	{r4, pc}
	return addr;
    4ad6:	4620      	mov	r0, r4
}
    4ad8:	bd10      	pop	{r4, pc}
	...

00004adc <update_conn_param>:
{
    4adc:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    4ade:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    4ae2:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    4ae4:	b12b      	cbz	r3, 4af2 <update_conn_param+0x16>
    4ae6:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    4aea:	4803      	ldr	r0, [pc, #12]	; (4af8 <update_conn_param+0x1c>)
    4aec:	f025 fad6 	bl	2a09c <k_delayed_work_submit_to_queue>
    4af0:	bd08      	pop	{r3, pc}
    4af2:	2200      	movs	r2, #0
    4af4:	e7f9      	b.n	4aea <update_conn_param+0xe>
    4af6:	bf00      	nop
    4af8:	20002c78 	.word	0x20002c78

00004afc <le_data_len_change>:
{
    4afc:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    4afe:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4b00:	8818      	ldrh	r0, [r3, #0]
    4b02:	f002 fbdb 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    4b06:	b198      	cbz	r0, 4b30 <le_data_len_change+0x34>
    4b08:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    4b0a:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4b0c:	f3bf 8f5b 	dmb	ish
    4b10:	e853 2f00 	ldrex	r2, [r3]
    4b14:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    4b18:	e843 1000 	strex	r0, r1, [r3]
    4b1c:	2800      	cmp	r0, #0
    4b1e:	d1f7      	bne.n	4b10 <le_data_len_change+0x14>
    4b20:	f3bf 8f5b 	dmb	ish
    4b24:	f412 7f80 	tst.w	r2, #256	; 0x100
    4b28:	d103      	bne.n	4b32 <le_data_len_change+0x36>
	bt_conn_unref(conn);
    4b2a:	4620      	mov	r0, r4
    4b2c:	f002 fc4a 	bl	73c4 <bt_conn_unref>
    4b30:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    4b32:	4620      	mov	r0, r4
    4b34:	f7ff ffd2 	bl	4adc <update_conn_param>
    4b38:	e7f7      	b.n	4b2a <le_data_len_change+0x2e>
	...

00004b3c <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    4b3c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b3e:	4b12      	ldr	r3, [pc, #72]	; (4b88 <le_data_len_change+0x4c>)
    4b40:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b44:	2400      	movs	r4, #0
    4b46:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4b4a:	ea54 0305 	orrs.w	r3, r4, r5
    4b4e:	d008      	beq.n	4b62 <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4b50:	4b0e      	ldr	r3, [pc, #56]	; (4b8c <le_data_len_change+0x50>)
    4b52:	e9d3 4500 	ldrd	r4, r5, [r3]
    4b56:	f004 0440 	and.w	r4, r4, #64	; 0x40
    4b5a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4b5c:	ea54 0305 	orrs.w	r3, r4, r5
    4b60:	d100      	bne.n	4b64 <le_data_len_change+0x28>
    4b62:	bd38      	pop	{r3, r4, r5, pc}
    4b64:	4613      	mov	r3, r2
    4b66:	460d      	mov	r5, r1
    4b68:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    4b6a:	220a      	movs	r2, #10
    4b6c:	2107      	movs	r1, #7
    4b6e:	4618      	mov	r0, r3
    4b70:	f008 fcf0 	bl	d554 <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    4b74:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    4b76:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4b78:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    4b7a:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    4b7c:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    4b7e:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    4b80:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    4b82:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    4b84:	8103      	strh	r3, [r0, #8]
    4b86:	e7ec      	b.n	4b62 <le_data_len_change+0x26>
    4b88:	2000bc70 	.word	0x2000bc70
    4b8c:	2000bc78 	.word	0x2000bc78

00004b90 <le_conn_update_complete>:
{
    4b90:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    4b92:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4b94:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4b98:	f002 fb90 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    4b9c:	b128      	cbz	r0, 4baa <le_conn_update_complete+0x1a>
    4b9e:	4605      	mov	r5, r0
	if (!evt->status) {
    4ba0:	7823      	ldrb	r3, [r4, #0]
    4ba2:	b11b      	cbz	r3, 4bac <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    4ba4:	4628      	mov	r0, r5
    4ba6:	f002 fc0d 	bl	73c4 <bt_conn_unref>
    4baa:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4bac:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    4bb0:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    4bb4:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    4bb8:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    4bbc:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    4bc0:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    4bc4:	f002 f912 	bl	6dec <notify_le_param_updated>
    4bc8:	e7ec      	b.n	4ba4 <le_conn_update_complete+0x14>
	...

00004bcc <le_conn_update_complete>:
{
    4bcc:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4bce:	4b14      	ldr	r3, [pc, #80]	; (4c20 <le_conn_update_complete+0x54>)
    4bd0:	e9d3 4500 	ldrd	r4, r5, [r3]
    4bd4:	2400      	movs	r4, #0
    4bd6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4bda:	ea54 0305 	orrs.w	r3, r4, r5
    4bde:	d008      	beq.n	4bf2 <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    4be0:	4b10      	ldr	r3, [pc, #64]	; (4c24 <le_conn_update_complete+0x58>)
    4be2:	e9d3 4500 	ldrd	r4, r5, [r3]
    4be6:	f004 0404 	and.w	r4, r4, #4
    4bea:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4bec:	ea54 0305 	orrs.w	r3, r4, r5
    4bf0:	d100      	bne.n	4bf4 <le_conn_update_complete+0x28>
    4bf2:	bd38      	pop	{r3, r4, r5, pc}
    4bf4:	4613      	mov	r3, r2
    4bf6:	460d      	mov	r5, r1
    4bf8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    4bfa:	2209      	movs	r2, #9
    4bfc:	2103      	movs	r1, #3
    4bfe:	4618      	mov	r0, r3
    4c00:	f008 fca8 	bl	d554 <meta_evt>
	sep->status = radio_cu->status;
    4c04:	78e3      	ldrb	r3, [r4, #3]
    4c06:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    4c08:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    4c0c:	88a3      	ldrh	r3, [r4, #4]
    4c0e:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    4c12:	88e3      	ldrh	r3, [r4, #6]
    4c14:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    4c18:	8923      	ldrh	r3, [r4, #8]
    4c1a:	f8a0 3007 	strh.w	r3, [r0, #7]
    4c1e:	e7e8      	b.n	4bf2 <le_conn_update_complete+0x26>
    4c20:	2000bc70 	.word	0x2000bc70
    4c24:	2000bc78 	.word	0x2000bc78

00004c28 <hci_cmd_done>:
{
    4c28:	b538      	push	{r3, r4, r5, lr}
    4c2a:	460d      	mov	r5, r1
    4c2c:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4c2e:	7990      	ldrb	r0, [r2, #6]
    4c30:	f016 f826 	bl	1ac80 <net_buf_pool_get>
    4c34:	4b0b      	ldr	r3, [pc, #44]	; (4c64 <hci_cmd_done+0x3c>)
    4c36:	4283      	cmp	r3, r0
    4c38:	d000      	beq.n	4c3c <hci_cmd_done+0x14>
    4c3a:	bd38      	pop	{r3, r4, r5, pc}
    4c3c:	f104 0210 	add.w	r2, r4, #16
    4c40:	89e3      	ldrh	r3, [r4, #14]
    4c42:	4413      	add	r3, r2
    4c44:	3303      	adds	r3, #3
    4c46:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4c4a:	6859      	ldr	r1, [r3, #4]
    4c4c:	2900      	cmp	r1, #0
    4c4e:	d0f4      	beq.n	4c3a <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4c50:	705d      	strb	r5, [r3, #1]
    4c52:	89e3      	ldrh	r3, [r4, #14]
    4c54:	441a      	add	r2, r3
    4c56:	3203      	adds	r2, #3
    4c58:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4c5c:	6850      	ldr	r0, [r2, #4]
    4c5e:	f024 fbd4 	bl	2940a <_impl_k_sem_give>
    4c62:	e7ea      	b.n	4c3a <hci_cmd_done+0x12>
    4c64:	2000d220 	.word	0x2000d220

00004c68 <hci_cmd_complete>:
{
    4c68:	b570      	push	{r4, r5, r6, lr}
    4c6a:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4c6c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4c70:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    4c74:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    4c76:	2103      	movs	r1, #3
    4c78:	f016 f915 	bl	1aea6 <net_buf_simple_pull>
	status = buf->data[0];
    4c7c:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4c7e:	4622      	mov	r2, r4
    4c80:	7819      	ldrb	r1, [r3, #0]
    4c82:	4630      	mov	r0, r6
    4c84:	f7ff ffd0 	bl	4c28 <hci_cmd_done>
	if (ncmd) {
    4c88:	b905      	cbnz	r5, 4c8c <hci_cmd_complete+0x24>
    4c8a:	bd70      	pop	{r4, r5, r6, pc}
    4c8c:	4801      	ldr	r0, [pc, #4]	; (4c94 <hci_cmd_complete+0x2c>)
    4c8e:	f024 fbbc 	bl	2940a <_impl_k_sem_give>
}
    4c92:	e7fa      	b.n	4c8a <hci_cmd_complete+0x22>
    4c94:	2000ba28 	.word	0x2000ba28

00004c98 <hci_cmd_status>:
{
    4c98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4c9a:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4c9c:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4ca0:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    4ca2:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    4ca4:	2104      	movs	r1, #4
    4ca6:	f016 f8fe 	bl	1aea6 <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4caa:	462a      	mov	r2, r5
    4cac:	7821      	ldrb	r1, [r4, #0]
    4cae:	4638      	mov	r0, r7
    4cb0:	f7ff ffba 	bl	4c28 <hci_cmd_done>
	if (ncmd) {
    4cb4:	b906      	cbnz	r6, 4cb8 <hci_cmd_status+0x20>
    4cb6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4cb8:	4801      	ldr	r0, [pc, #4]	; (4cc0 <hci_cmd_status+0x28>)
    4cba:	f024 fba6 	bl	2940a <_impl_k_sem_give>
}
    4cbe:	e7fa      	b.n	4cb6 <hci_cmd_status+0x1e>
    4cc0:	2000ba28 	.word	0x2000ba28

00004cc4 <hci_num_completed_packets>:
{
    4cc4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    4cc8:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    4ccc:	2700      	movs	r7, #0
    4cce:	e026      	b.n	4d1e <hci_num_completed_packets+0x5a>
    4cd0:	f386 8811 	msr	BASEPRI, r6
			continue;
    4cd4:	e022      	b.n	4d1c <hci_num_completed_packets+0x58>
    4cd6:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    4cda:	b1e1      	cbz	r1, 4d16 <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    4cdc:	f104 001c 	add.w	r0, r4, #28
    4ce0:	f023 fffc 	bl	28cdc <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    4ce4:	4620      	mov	r0, r4
    4ce6:	f002 f85f 	bl	6da8 <bt_conn_get_pkts>
    4cea:	f024 fb8e 	bl	2940a <_impl_k_sem_give>
		while (count--) {
    4cee:	4635      	mov	r5, r6
    4cf0:	1e6b      	subs	r3, r5, #1
    4cf2:	b29e      	uxth	r6, r3
    4cf4:	b17d      	cbz	r5, 4d16 <hci_num_completed_packets+0x52>
	__asm__ volatile(
    4cf6:	f04f 0220 	mov.w	r2, #32
    4cfa:	f3ef 8311 	mrs	r3, BASEPRI
    4cfe:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    4d02:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    4d04:	2900      	cmp	r1, #0
    4d06:	d0e6      	beq.n	4cd6 <hci_num_completed_packets+0x12>
	list->head = node->next;
    4d08:	680a      	ldr	r2, [r1, #0]
    4d0a:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    4d0c:	69a0      	ldr	r0, [r4, #24]
    4d0e:	4281      	cmp	r1, r0
    4d10:	d1e1      	bne.n	4cd6 <hci_num_completed_packets+0x12>
		list->tail = list->head;
    4d12:	61a2      	str	r2, [r4, #24]
    4d14:	e7df      	b.n	4cd6 <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    4d16:	4620      	mov	r0, r4
    4d18:	f002 fb54 	bl	73c4 <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4d1c:	3701      	adds	r7, #1
    4d1e:	f898 3000 	ldrb.w	r3, [r8]
    4d22:	429f      	cmp	r7, r3
    4d24:	da13      	bge.n	4d4e <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    4d26:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4d2a:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4d2e:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    4d32:	f04f 0320 	mov.w	r3, #32
    4d36:	f3ef 8611 	mrs	r6, BASEPRI
    4d3a:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4d3e:	f002 fabd 	bl	72bc <bt_conn_lookup_handle>
		if (!conn) {
    4d42:	4604      	mov	r4, r0
    4d44:	2800      	cmp	r0, #0
    4d46:	d0c3      	beq.n	4cd0 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4d48:	f386 8811 	msr	BASEPRI, r6
    4d4c:	e7d0      	b.n	4cf0 <hci_num_completed_packets+0x2c>
}
    4d4e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00004d54 <bt_hci_cmd_create>:
{
    4d54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4d56:	4607      	mov	r7, r0
    4d58:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4d5a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4d5e:	4812      	ldr	r0, [pc, #72]	; (4da8 <bt_hci_cmd_create+0x54>)
    4d60:	f015 ff9a 	bl	1ac98 <net_buf_alloc>
    4d64:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    4d66:	2100      	movs	r1, #0
    4d68:	f015 fff1 	bl	1ad4e <net_buf_reserve>
    4d6c:	f104 0310 	add.w	r3, r4, #16
    4d70:	89e2      	ldrh	r2, [r4, #14]
    4d72:	441a      	add	r2, r3
    4d74:	3203      	adds	r2, #3
    4d76:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4d7a:	2100      	movs	r1, #0
    4d7c:	7011      	strb	r1, [r2, #0]
    4d7e:	89e2      	ldrh	r2, [r4, #14]
    4d80:	441a      	add	r2, r3
    4d82:	3203      	adds	r2, #3
    4d84:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4d88:	8057      	strh	r7, [r2, #2]
    4d8a:	89e2      	ldrh	r2, [r4, #14]
    4d8c:	4413      	add	r3, r2
    4d8e:	3303      	adds	r3, #3
    4d90:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    4d94:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    4d96:	2103      	movs	r1, #3
    4d98:	f104 0008 	add.w	r0, r4, #8
    4d9c:	f016 f836 	bl	1ae0c <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4da0:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    4da2:	7085      	strb	r5, [r0, #2]
}
    4da4:	4620      	mov	r0, r4
    4da6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4da8:	2000d220 	.word	0x2000d220

00004dac <bt_hci_cmd_send_sync>:
{
    4dac:	b570      	push	{r4, r5, r6, lr}
    4dae:	b086      	sub	sp, #24
    4db0:	4616      	mov	r6, r2
	if (!buf) {
    4db2:	460d      	mov	r5, r1
    4db4:	b329      	cbz	r1, 4e02 <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    4db6:	2201      	movs	r2, #1
    4db8:	2100      	movs	r1, #0
    4dba:	4668      	mov	r0, sp
    4dbc:	f024 fb1c 	bl	293f8 <_impl_k_sem_init>
    4dc0:	f105 0410 	add.w	r4, r5, #16
    4dc4:	89eb      	ldrh	r3, [r5, #14]
    4dc6:	4423      	add	r3, r4
    4dc8:	3303      	adds	r3, #3
    4dca:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    4dce:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    4dd2:	4628      	mov	r0, r5
    4dd4:	f015 ffea 	bl	1adac <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4dd8:	4629      	mov	r1, r5
    4dda:	4813      	ldr	r0, [pc, #76]	; (4e28 <bt_hci_cmd_send_sync+0x7c>)
    4ddc:	f015 ffbc 	bl	1ad58 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    4de0:	f242 7110 	movw	r1, #10000	; 0x2710
    4de4:	4668      	mov	r0, sp
    4de6:	f024 fb23 	bl	29430 <_impl_k_sem_take>
    4dea:	89eb      	ldrh	r3, [r5, #14]
    4dec:	441c      	add	r4, r3
    4dee:	3403      	adds	r4, #3
    4df0:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    4df4:	7863      	ldrb	r3, [r4, #1]
    4df6:	b963      	cbnz	r3, 4e12 <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    4df8:	b18e      	cbz	r6, 4e1e <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    4dfa:	6035      	str	r5, [r6, #0]
		err = 0;
    4dfc:	2000      	movs	r0, #0
}
    4dfe:	b006      	add	sp, #24
    4e00:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4e02:	f7ff ffa7 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    4e06:	4605      	mov	r5, r0
    4e08:	2800      	cmp	r0, #0
    4e0a:	d1d4      	bne.n	4db6 <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    4e0c:	f06f 0068 	mvn.w	r0, #104	; 0x68
    4e10:	e7f5      	b.n	4dfe <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    4e12:	4628      	mov	r0, r5
    4e14:	f015 ffae 	bl	1ad74 <net_buf_unref>
		err = -EIO;
    4e18:	f06f 0004 	mvn.w	r0, #4
    4e1c:	e7ef      	b.n	4dfe <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4e1e:	4628      	mov	r0, r5
    4e20:	f015 ffa8 	bl	1ad74 <net_buf_unref>
		err = 0;
    4e24:	2000      	movs	r0, #0
    4e26:	e7ea      	b.n	4dfe <bt_hci_cmd_send_sync+0x52>
    4e28:	2000ba54 	.word	0x2000ba54

00004e2c <common_init>:
{
    4e2c:	b510      	push	{r4, lr}
    4e2e:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4e30:	aa01      	add	r2, sp, #4
    4e32:	2100      	movs	r1, #0
    4e34:	f640 4003 	movw	r0, #3075	; 0xc03
    4e38:	f7ff ffb8 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    4e3c:	4604      	mov	r4, r0
    4e3e:	b110      	cbz	r0, 4e46 <common_init+0x1a>
}
    4e40:	4620      	mov	r0, r4
    4e42:	b002      	add	sp, #8
    4e44:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    4e46:	9801      	ldr	r0, [sp, #4]
    4e48:	f7ff fce6 	bl	4818 <hci_reset_complete>
	net_buf_unref(rsp);
    4e4c:	ac02      	add	r4, sp, #8
    4e4e:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e52:	f015 ff8f 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    4e56:	4622      	mov	r2, r4
    4e58:	2100      	movs	r1, #0
    4e5a:	f241 0003 	movw	r0, #4099	; 0x1003
    4e5e:	f7ff ffa5 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    4e62:	4604      	mov	r4, r0
    4e64:	2800      	cmp	r0, #0
    4e66:	d1eb      	bne.n	4e40 <common_init+0x14>
	read_local_features_complete(rsp);
    4e68:	9801      	ldr	r0, [sp, #4]
    4e6a:	f7ff fced 	bl	4848 <read_local_features_complete>
	net_buf_unref(rsp);
    4e6e:	ac02      	add	r4, sp, #8
    4e70:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e74:	f015 ff7e 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4e78:	4622      	mov	r2, r4
    4e7a:	2100      	movs	r1, #0
    4e7c:	f241 0001 	movw	r0, #4097	; 0x1001
    4e80:	f7ff ff94 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    4e84:	4604      	mov	r4, r0
    4e86:	2800      	cmp	r0, #0
    4e88:	d1da      	bne.n	4e40 <common_init+0x14>
	read_local_ver_complete(rsp);
    4e8a:	9801      	ldr	r0, [sp, #4]
    4e8c:	f7ff fc72 	bl	4774 <read_local_ver_complete>
	net_buf_unref(rsp);
    4e90:	ac02      	add	r4, sp, #8
    4e92:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4e96:	f015 ff6d 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4e9a:	4622      	mov	r2, r4
    4e9c:	2100      	movs	r1, #0
    4e9e:	f241 0009 	movw	r0, #4105	; 0x1009
    4ea2:	f7ff ff83 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    4ea6:	4604      	mov	r4, r0
    4ea8:	2800      	cmp	r0, #0
    4eaa:	d1c9      	bne.n	4e40 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4eac:	9801      	ldr	r0, [sp, #4]
    4eae:	f7ff fcd5 	bl	485c <read_bdaddr_complete>
	net_buf_unref(rsp);
    4eb2:	ac02      	add	r4, sp, #8
    4eb4:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4eb8:	f015 ff5c 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    4ebc:	4622      	mov	r2, r4
    4ebe:	2100      	movs	r1, #0
    4ec0:	f241 0002 	movw	r0, #4098	; 0x1002
    4ec4:	f7ff ff72 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    4ec8:	4604      	mov	r4, r0
    4eca:	2800      	cmp	r0, #0
    4ecc:	d1b8      	bne.n	4e40 <common_init+0x14>
	read_supported_commands_complete(rsp);
    4ece:	9801      	ldr	r0, [sp, #4]
    4ed0:	f7ff fcd2 	bl	4878 <read_supported_commands_complete>
	net_buf_unref(rsp);
    4ed4:	9801      	ldr	r0, [sp, #4]
    4ed6:	f015 ff4d 	bl	1ad74 <net_buf_unref>
	return 0;
    4eda:	e7b1      	b.n	4e40 <common_init+0x14>

00004edc <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    4edc:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    4ede:	4b3a      	ldr	r3, [pc, #232]	; (4fc8 <common_init+0xec>)
    4ee0:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    4ee4:	2a00      	cmp	r2, #0
    4ee6:	d15e      	bne.n	4fa6 <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    4ee8:	2200      	movs	r2, #0
    4eea:	4b37      	ldr	r3, [pc, #220]	; (4fc8 <common_init+0xec>)
    4eec:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    4ef0:	4c35      	ldr	r4, [pc, #212]	; (4fc8 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    4ef2:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    4ef6:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    4efa:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    4efe:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    4f02:	f00a fa47 	bl	f394 <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    4f06:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    4f0a:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    4f0e:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    4f12:	462b      	mov	r3, r5
    4f14:	440a      	add	r2, r1
    4f16:	2108      	movs	r1, #8
    4f18:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4f1c:	f00a fa3a 	bl	f394 <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4f20:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    4f24:	2202      	movs	r2, #2
    4f26:	2124      	movs	r1, #36	; 0x24
    4f28:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4f2c:	f00a fa32 	bl	f394 <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4f30:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    4f34:	3a01      	subs	r2, #1
    4f36:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4f3a:	b292      	uxth	r2, r2
    4f3c:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4f40:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    4f44:	f00a fa26 	bl	f394 <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4f48:	4628      	mov	r0, r5
    4f4a:	f00a fa48 	bl	f3de <mem_acquire>
	LL_ASSERT(link);
    4f4e:	b3a0      	cbz	r0, 4fba <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4f50:	4c1d      	ldr	r4, [pc, #116]	; (4fc8 <common_init+0xec>)
    4f52:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    4f56:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4f5a:	f00a faa5 	bl	f4a8 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4f5e:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    4f62:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    4f66:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4f6a:	20ff      	movs	r0, #255	; 0xff
    4f6c:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4f70:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    4f74:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4f78:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4f7c:	231f      	movs	r3, #31
    4f7e:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    4f82:	2325      	movs	r3, #37	; 0x25
    4f84:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4f88:	231b      	movs	r3, #27
    4f8a:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4f8e:	f44f 73a4 	mov.w	r3, #328	; 0x148
    4f92:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    4f96:	2303      	movs	r3, #3
    4f98:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4f9c:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4fa0:	f00c ff5a 	bl	11e58 <packet_rx_allocate>
    4fa4:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    4fa6:	4618      	mov	r0, r3
    4fa8:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4fac:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4fb0:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    4fb4:	f00a f9ee 	bl	f394 <mem_init>
    4fb8:	e79a      	b.n	4ef0 <common_init+0x14>
	LL_ASSERT(link);
    4fba:	4040      	eors	r0, r0
    4fbc:	f380 8811 	msr	BASEPRI, r0
    4fc0:	f04f 0004 	mov.w	r0, #4
    4fc4:	df02      	svc	2
    4fc6:	bf00      	nop
    4fc8:	20000ff4 	.word	0x20000ff4

00004fcc <le_set_event_mask>:
{
    4fcc:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    4fce:	2108      	movs	r1, #8
    4fd0:	f242 0001 	movw	r0, #8193	; 0x2001
    4fd4:	f7ff febe 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    4fd8:	2800      	cmp	r0, #0
    4fda:	d042      	beq.n	5062 <le_set_event_mask+0x96>
    4fdc:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    4fde:	2108      	movs	r1, #8
    4fe0:	4408      	add	r0, r1
    4fe2:	f015 ff13 	bl	1ae0c <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    4fe6:	4b20      	ldr	r3, [pc, #128]	; (5068 <le_set_event_mask+0x9c>)
    4fe8:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    4fec:	f011 0f02 	tst.w	r1, #2
    4ff0:	d131      	bne.n	5056 <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    4ff2:	220f      	movs	r2, #15
    4ff4:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    4ff6:	f011 0f20 	tst.w	r1, #32
    4ffa:	d001      	beq.n	5000 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    4ffc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    5000:	4d19      	ldr	r5, [pc, #100]	; (5068 <le_set_event_mask+0x9c>)
    5002:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    5006:	f015 0f09 	tst.w	r5, #9
    500a:	d001      	beq.n	5010 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    500c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    5010:	f011 0f01 	tst.w	r1, #1
    5014:	d001      	beq.n	501a <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    5016:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    501a:	4913      	ldr	r1, [pc, #76]	; (5068 <le_set_event_mask+0x9c>)
    501c:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    5020:	f001 0106 	and.w	r1, r1, #6
    5024:	2906      	cmp	r1, #6
    5026:	d019      	beq.n	505c <le_set_event_mask+0x90>
	dst[0] = val;
    5028:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    502a:	f3c2 2107 	ubfx	r1, r2, #8, #8
    502e:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    5030:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    5032:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5034:	0a12      	lsrs	r2, r2, #8
    5036:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    5038:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    503a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    503e:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    5040:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    5042:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    5044:	0a1b      	lsrs	r3, r3, #8
    5046:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    5048:	2200      	movs	r2, #0
    504a:	4621      	mov	r1, r4
    504c:	f242 0001 	movw	r0, #8193	; 0x2001
    5050:	f7ff feac 	bl	4dac <bt_hci_cmd_send_sync>
    5054:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    5056:	222f      	movs	r2, #47	; 0x2f
    5058:	2300      	movs	r3, #0
    505a:	e7cc      	b.n	4ff6 <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    505c:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    5060:	e7e2      	b.n	5028 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    5062:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5066:	bd38      	pop	{r3, r4, r5, pc}
    5068:	2000b980 	.word	0x2000b980

0000506c <le_set_event_mask>:
{
    506c:	b570      	push	{r4, r5, r6, lr}
    506e:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    5070:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    5072:	79da      	ldrb	r2, [r3, #7]
    5074:	7999      	ldrb	r1, [r3, #6]
    5076:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    507a:	7958      	ldrb	r0, [r3, #5]
    507c:	791a      	ldrb	r2, [r3, #4]
    507e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    5082:	2400      	movs	r4, #0
    5084:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    5088:	78d9      	ldrb	r1, [r3, #3]
    508a:	789a      	ldrb	r2, [r3, #2]
    508c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    5090:	7859      	ldrb	r1, [r3, #1]
    5092:	781b      	ldrb	r3, [r3, #0]
    5094:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    5098:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    509c:	ea44 0003 	orr.w	r0, r4, r3
    50a0:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    50a2:	4b04      	ldr	r3, [pc, #16]	; (50b4 <le_set_event_mask+0x48>)
    50a4:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    50a8:	2101      	movs	r1, #1
    50aa:	4630      	mov	r0, r6
    50ac:	f008 f9b8 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    50b0:	7004      	strb	r4, [r0, #0]
    50b2:	bd70      	pop	{r4, r5, r6, pc}
    50b4:	2000bc78 	.word	0x2000bc78

000050b8 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    50b8:	4b4c      	ldr	r3, [pc, #304]	; (51ec <le_init+0x134>)
    50ba:	7e9b      	ldrb	r3, [r3, #26]
    50bc:	f013 0f40 	tst.w	r3, #64	; 0x40
    50c0:	f000 808c 	beq.w	51dc <le_init+0x124>
{
    50c4:	b570      	push	{r4, r5, r6, lr}
    50c6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    50c8:	aa01      	add	r2, sp, #4
    50ca:	2100      	movs	r1, #0
    50cc:	f242 0003 	movw	r0, #8195	; 0x2003
    50d0:	f7ff fe6c 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    50d4:	4603      	mov	r3, r0
    50d6:	b110      	cbz	r0, 50de <le_init+0x26>
}
    50d8:	4618      	mov	r0, r3
    50da:	b002      	add	sp, #8
    50dc:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    50de:	9801      	ldr	r0, [sp, #4]
    50e0:	f7ff fbd4 	bl	488c <read_le_features_complete>
	net_buf_unref(rsp);
    50e4:	ac02      	add	r4, sp, #8
    50e6:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    50ea:	f015 fe43 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    50ee:	4622      	mov	r2, r4
    50f0:	2100      	movs	r1, #0
    50f2:	f242 0002 	movw	r0, #8194	; 0x2002
    50f6:	f7ff fe59 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    50fa:	4603      	mov	r3, r0
    50fc:	2800      	cmp	r0, #0
    50fe:	d1eb      	bne.n	50d8 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    5100:	9801      	ldr	r0, [sp, #4]
    5102:	f7ff fbcd 	bl	48a0 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    5106:	9801      	ldr	r0, [sp, #4]
    5108:	f015 fe34 	bl	1ad74 <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    510c:	4b37      	ldr	r3, [pc, #220]	; (51ec <le_init+0x134>)
    510e:	7e9b      	ldrb	r3, [r3, #26]
    5110:	f013 0f20 	tst.w	r3, #32
    5114:	d037      	beq.n	5186 <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    5116:	4b35      	ldr	r3, [pc, #212]	; (51ec <le_init+0x134>)
    5118:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    511c:	f013 0f08 	tst.w	r3, #8
    5120:	d149      	bne.n	51b6 <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5122:	4b32      	ldr	r3, [pc, #200]	; (51ec <le_init+0x134>)
    5124:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    5128:	f013 0f20 	tst.w	r3, #32
    512c:	d027      	beq.n	517e <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    512e:	466a      	mov	r2, sp
    5130:	2100      	movs	r1, #0
    5132:	f242 002f 	movw	r0, #8239	; 0x202f
    5136:	f7ff fe39 	bl	4dac <bt_hci_cmd_send_sync>
		if (err) {
    513a:	4603      	mov	r3, r0
    513c:	2800      	cmp	r0, #0
    513e:	d1cb      	bne.n	50d8 <le_init+0x20>
		rp = (void *)rsp->data;
    5140:	9800      	ldr	r0, [sp, #0]
    5142:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5144:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5148:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    514c:	f015 fe12 	bl	1ad74 <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    5150:	2104      	movs	r1, #4
    5152:	f242 0024 	movw	r0, #8228	; 0x2024
    5156:	f7ff fdfd 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    515a:	4604      	mov	r4, r0
    515c:	2800      	cmp	r0, #0
    515e:	d03a      	beq.n	51d6 <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    5160:	2104      	movs	r1, #4
    5162:	3008      	adds	r0, #8
    5164:	f015 fe52 	bl	1ae0c <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    5168:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    516a:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    516c:	2200      	movs	r2, #0
    516e:	4621      	mov	r1, r4
    5170:	f242 0024 	movw	r0, #8228	; 0x2024
    5174:	f7ff fe1a 	bl	4dac <bt_hci_cmd_send_sync>
		if (err) {
    5178:	4603      	mov	r3, r0
    517a:	2800      	cmp	r0, #0
    517c:	d1ac      	bne.n	50d8 <le_init+0x20>
	return  le_set_event_mask();
    517e:	f7ff ff25 	bl	4fcc <le_set_event_mask>
    5182:	4603      	mov	r3, r0
    5184:	e7a8      	b.n	50d8 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    5186:	2102      	movs	r1, #2
    5188:	f640 406d 	movw	r0, #3181	; 0xc6d
    518c:	f7ff fde2 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    5190:	4604      	mov	r4, r0
    5192:	b338      	cbz	r0, 51e4 <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    5194:	2102      	movs	r1, #2
    5196:	3008      	adds	r0, #8
    5198:	f015 fe38 	bl	1ae0c <net_buf_simple_add>
		cp_le->le = 0x01;
    519c:	2301      	movs	r3, #1
    519e:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    51a0:	2200      	movs	r2, #0
    51a2:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    51a4:	4621      	mov	r1, r4
    51a6:	f640 406d 	movw	r0, #3181	; 0xc6d
    51aa:	f7ff fdff 	bl	4dac <bt_hci_cmd_send_sync>
		if (err) {
    51ae:	4603      	mov	r3, r0
    51b0:	2800      	cmp	r0, #0
    51b2:	d0b0      	beq.n	5116 <le_init+0x5e>
    51b4:	e790      	b.n	50d8 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    51b6:	aa01      	add	r2, sp, #4
    51b8:	2100      	movs	r1, #0
    51ba:	f242 001c 	movw	r0, #8220	; 0x201c
    51be:	f7ff fdf5 	bl	4dac <bt_hci_cmd_send_sync>
		if (err) {
    51c2:	4603      	mov	r3, r0
    51c4:	2800      	cmp	r0, #0
    51c6:	d187      	bne.n	50d8 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    51c8:	9801      	ldr	r0, [sp, #4]
    51ca:	f7ff fae5 	bl	4798 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    51ce:	9801      	ldr	r0, [sp, #4]
    51d0:	f015 fdd0 	bl	1ad74 <net_buf_unref>
    51d4:	e7a5      	b.n	5122 <le_init+0x6a>
			return -ENOBUFS;
    51d6:	f06f 0368 	mvn.w	r3, #104	; 0x68
    51da:	e77d      	b.n	50d8 <le_init+0x20>
		return -ENODEV;
    51dc:	f06f 0312 	mvn.w	r3, #18
}
    51e0:	4618      	mov	r0, r3
    51e2:	4770      	bx	lr
			return -ENOBUFS;
    51e4:	f06f 0368 	mvn.w	r3, #104	; 0x68
    51e8:	e776      	b.n	50d8 <le_init+0x20>
    51ea:	bf00      	nop
    51ec:	2000b980 	.word	0x2000b980

000051f0 <br_init>:
{
    51f0:	b510      	push	{r4, lr}
    51f2:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    51f4:	4b0b      	ldr	r3, [pc, #44]	; (5224 <br_init+0x34>)
    51f6:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    51fa:	b11b      	cbz	r3, 5204 <br_init+0x14>
		return 0;
    51fc:	2400      	movs	r4, #0
}
    51fe:	4620      	mov	r0, r4
    5200:	b002      	add	sp, #8
    5202:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    5204:	aa01      	add	r2, sp, #4
    5206:	2100      	movs	r1, #0
    5208:	f241 0005 	movw	r0, #4101	; 0x1005
    520c:	f7ff fdce 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    5210:	4604      	mov	r4, r0
    5212:	2800      	cmp	r0, #0
    5214:	d1f3      	bne.n	51fe <br_init+0xe>
	read_buffer_size_complete(rsp);
    5216:	9801      	ldr	r0, [sp, #4]
    5218:	f7ff fb58 	bl	48cc <read_buffer_size_complete>
	net_buf_unref(rsp);
    521c:	9801      	ldr	r0, [sp, #4]
    521e:	f015 fda9 	bl	1ad74 <net_buf_unref>
	return 0;
    5222:	e7ec      	b.n	51fe <br_init+0xe>
    5224:	2000b980 	.word	0x2000b980

00005228 <set_event_mask>:
{
    5228:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    522a:	2108      	movs	r1, #8
    522c:	f640 4001 	movw	r0, #3073	; 0xc01
    5230:	f7ff fd90 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5234:	b348      	cbz	r0, 528a <set_event_mask+0x62>
    5236:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    5238:	2108      	movs	r1, #8
    523a:	4408      	add	r0, r1
    523c:	f015 fde6 	bl	1ae0c <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    5240:	4b13      	ldr	r3, [pc, #76]	; (5290 <set_event_mask+0x68>)
    5242:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    5246:	f013 0f01 	tst.w	r3, #1
    524a:	d11b      	bne.n	5284 <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    524c:	4a11      	ldr	r2, [pc, #68]	; (5294 <set_event_mask+0x6c>)
    524e:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    5252:	b291      	uxth	r1, r2
	dst[0] = val;
    5254:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    5256:	0a09      	lsrs	r1, r1, #8
    5258:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    525a:	0c12      	lsrs	r2, r2, #16
    525c:	b291      	uxth	r1, r2
	dst[0] = val;
    525e:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    5260:	0a0a      	lsrs	r2, r1, #8
    5262:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    5264:	b29a      	uxth	r2, r3
	dst[0] = val;
    5266:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    5268:	0a12      	lsrs	r2, r2, #8
    526a:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    526c:	0c1b      	lsrs	r3, r3, #16
    526e:	b29a      	uxth	r2, r3
	dst[0] = val;
    5270:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    5272:	0a13      	lsrs	r3, r2, #8
    5274:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    5276:	2200      	movs	r2, #0
    5278:	4621      	mov	r1, r4
    527a:	f640 4001 	movw	r0, #3073	; 0xc01
    527e:	f7ff fd95 	bl	4dac <bt_hci_cmd_send_sync>
    5282:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    5284:	4a04      	ldr	r2, [pc, #16]	; (5298 <set_event_mask+0x70>)
    5286:	4b05      	ldr	r3, [pc, #20]	; (529c <set_event_mask+0x74>)
    5288:	e7e3      	b.n	5252 <set_event_mask+0x2a>
		return -ENOBUFS;
    528a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    528e:	bd10      	pop	{r4, pc}
    5290:	2000b980 	.word	0x2000b980
    5294:	02008810 	.word	0x02008810
    5298:	02008890 	.word	0x02008890
    529c:	20008000 	.word	0x20008000

000052a0 <set_event_mask>:
{
    52a0:	b570      	push	{r4, r5, r6, lr}
    52a2:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    52a4:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    52a6:	79da      	ldrb	r2, [r3, #7]
    52a8:	7999      	ldrb	r1, [r3, #6]
    52aa:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    52ae:	7958      	ldrb	r0, [r3, #5]
    52b0:	791a      	ldrb	r2, [r3, #4]
    52b2:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    52b6:	2400      	movs	r4, #0
    52b8:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    52bc:	78d9      	ldrb	r1, [r3, #3]
    52be:	789a      	ldrb	r2, [r3, #2]
    52c0:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    52c4:	7859      	ldrb	r1, [r3, #1]
    52c6:	781b      	ldrb	r3, [r3, #0]
    52c8:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    52cc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    52d0:	ea44 0003 	orr.w	r0, r4, r3
    52d4:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    52d6:	4b04      	ldr	r3, [pc, #16]	; (52e8 <set_event_mask+0x48>)
    52d8:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    52dc:	2101      	movs	r1, #1
    52de:	4630      	mov	r0, r6
    52e0:	f008 f89e 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    52e4:	7004      	strb	r4, [r0, #0]
    52e6:	bd70      	pop	{r4, r5, r6, pc}
    52e8:	2000bc70 	.word	0x2000bc70

000052ec <hci_vs_init>:
{
    52ec:	b510      	push	{r4, lr}
    52ee:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    52f0:	aa01      	add	r2, sp, #4
    52f2:	2100      	movs	r1, #0
    52f4:	f64f 4001 	movw	r0, #64513	; 0xfc01
    52f8:	f7ff fd58 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    52fc:	b108      	cbz	r0, 5302 <hci_vs_init+0x16>
}
    52fe:	b002      	add	sp, #8
    5300:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    5302:	ac02      	add	r4, sp, #8
    5304:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5308:	f015 fd34 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    530c:	4622      	mov	r2, r4
    530e:	2100      	movs	r1, #0
    5310:	f64f 4002 	movw	r0, #64514	; 0xfc02
    5314:	f7ff fd4a 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    5318:	2800      	cmp	r0, #0
    531a:	d1f0      	bne.n	52fe <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    531c:	9b01      	ldr	r3, [sp, #4]
    531e:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    5320:	2202      	movs	r2, #2
    5322:	3101      	adds	r1, #1
    5324:	480d      	ldr	r0, [pc, #52]	; (535c <hci_vs_init+0x70>)
    5326:	f7fa ffcb 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    532a:	ac02      	add	r4, sp, #8
    532c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    5330:	f015 fd20 	bl	1ad74 <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    5334:	4622      	mov	r2, r4
    5336:	2100      	movs	r1, #0
    5338:	f64f 4003 	movw	r0, #64515	; 0xfc03
    533c:	f7ff fd36 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    5340:	2800      	cmp	r0, #0
    5342:	d1dc      	bne.n	52fe <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    5344:	9b01      	ldr	r3, [sp, #4]
    5346:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    5348:	2201      	movs	r2, #1
    534a:	4411      	add	r1, r2
    534c:	4804      	ldr	r0, [pc, #16]	; (5360 <hci_vs_init+0x74>)
    534e:	f7fa ffb7 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    5352:	9801      	ldr	r0, [sp, #4]
    5354:	f015 fd0e 	bl	1ad74 <net_buf_unref>
    5358:	e7d1      	b.n	52fe <hci_vs_init+0x12>
    535a:	bf00      	nop
    535c:	2000b9df 	.word	0x2000b9df
    5360:	2000b9de 	.word	0x2000b9de

00005364 <set_random_address>:
{
    5364:	b570      	push	{r4, r5, r6, lr}
    5366:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    5368:	2206      	movs	r2, #6
    536a:	4914      	ldr	r1, [pc, #80]	; (53bc <set_random_address+0x58>)
    536c:	f025 fa6c 	bl	2a848 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    5370:	4604      	mov	r4, r0
    5372:	b908      	cbnz	r0, 5378 <set_random_address+0x14>
}
    5374:	4620      	mov	r0, r4
    5376:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    5378:	2106      	movs	r1, #6
    537a:	f242 0005 	movw	r0, #8197	; 0x2005
    537e:	f7ff fce9 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5382:	4604      	mov	r4, r0
    5384:	b1b8      	cbz	r0, 53b6 <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    5386:	2206      	movs	r2, #6
    5388:	4629      	mov	r1, r5
    538a:	3008      	adds	r0, #8
    538c:	f015 fd44 	bl	1ae18 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    5390:	2200      	movs	r2, #0
    5392:	4621      	mov	r1, r4
    5394:	f242 0005 	movw	r0, #8197	; 0x2005
    5398:	f7ff fd08 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    539c:	4604      	mov	r4, r0
    539e:	2800      	cmp	r0, #0
    53a0:	d1e8      	bne.n	5374 <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    53a2:	4e07      	ldr	r6, [pc, #28]	; (53c0 <set_random_address+0x5c>)
    53a4:	2206      	movs	r2, #6
    53a6:	4629      	mov	r1, r5
    53a8:	f106 0008 	add.w	r0, r6, #8
    53ac:	f7fa ff88 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    53b0:	2301      	movs	r3, #1
    53b2:	71f3      	strb	r3, [r6, #7]
	return 0;
    53b4:	e7de      	b.n	5374 <set_random_address+0x10>
		return -ENOBUFS;
    53b6:	f06f 0468 	mvn.w	r4, #104	; 0x68
    53ba:	e7db      	b.n	5374 <set_random_address+0x10>
    53bc:	2000b988 	.word	0x2000b988
    53c0:	2000b980 	.word	0x2000b980

000053c4 <le_set_private_addr>:
{
    53c4:	b500      	push	{lr}
    53c6:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    53c8:	2106      	movs	r1, #6
    53ca:	4668      	mov	r0, sp
    53cc:	f00c f9a8 	bl	11720 <bt_rand>
	if (err) {
    53d0:	4603      	mov	r3, r0
    53d2:	b118      	cbz	r0, 53dc <le_set_private_addr+0x18>
}
    53d4:	4618      	mov	r0, r3
    53d6:	b003      	add	sp, #12
    53d8:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    53dc:	f89d 3005 	ldrb.w	r3, [sp, #5]
    53e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    53e4:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    53e8:	4668      	mov	r0, sp
    53ea:	f7ff ffbb 	bl	5364 <set_random_address>
    53ee:	4603      	mov	r3, r0
    53f0:	e7f0      	b.n	53d4 <le_set_private_addr+0x10>
	...

000053f4 <bt_hci_stop_scanning>:
{
    53f4:	b530      	push	{r4, r5, lr}
    53f6:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    53f8:	f3bf 8f5b 	dmb	ish
    53fc:	4b26      	ldr	r3, [pc, #152]	; (5498 <bt_hci_stop_scanning+0xa4>)
    53fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5400:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5404:	f013 0f80 	tst.w	r3, #128	; 0x80
    5408:	d03f      	beq.n	548a <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    540a:	2102      	movs	r1, #2
    540c:	f242 000c 	movw	r0, #8204	; 0x200c
    5410:	f7ff fca0 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5414:	4604      	mov	r4, r0
    5416:	2800      	cmp	r0, #0
    5418:	d03a      	beq.n	5490 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    541a:	2102      	movs	r1, #2
    541c:	3008      	adds	r0, #8
    541e:	f015 fcf5 	bl	1ae0c <net_buf_simple_add>
    5422:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    5424:	2202      	movs	r2, #2
    5426:	2100      	movs	r1, #0
    5428:	f025 faa2 	bl	2a970 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    542c:	2300      	movs	r3, #0
    542e:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    5430:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    5432:	aa01      	add	r2, sp, #4
    5434:	4621      	mov	r1, r4
    5436:	f242 000c 	movw	r0, #8204	; 0x200c
    543a:	f7ff fcb7 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    543e:	4604      	mov	r4, r0
    5440:	b930      	cbnz	r0, 5450 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    5442:	9b01      	ldr	r3, [sp, #4]
    5444:	689b      	ldr	r3, [r3, #8]
    5446:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    5448:	b12c      	cbz	r4, 5456 <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    544a:	9801      	ldr	r0, [sp, #4]
    544c:	f015 fc92 	bl	1ad74 <net_buf_unref>
}
    5450:	4620      	mov	r0, r4
    5452:	b003      	add	sp, #12
    5454:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5456:	4b11      	ldr	r3, [pc, #68]	; (549c <bt_hci_stop_scanning+0xa8>)
    5458:	f3bf 8f5b 	dmb	ish
    545c:	e853 2f00 	ldrex	r2, [r3]
    5460:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    5464:	e843 2100 	strex	r1, r2, [r3]
    5468:	2900      	cmp	r1, #0
    546a:	d1f7      	bne.n	545c <bt_hci_stop_scanning+0x68>
    546c:	f3bf 8f5b 	dmb	ish
    5470:	f3bf 8f5b 	dmb	ish
    5474:	e853 2f00 	ldrex	r2, [r3]
    5478:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    547c:	e843 2100 	strex	r1, r2, [r3]
    5480:	2900      	cmp	r1, #0
    5482:	d1f7      	bne.n	5474 <bt_hci_stop_scanning+0x80>
    5484:	f3bf 8f5b 	dmb	ish
    5488:	e7df      	b.n	544a <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    548a:	f06f 0477 	mvn.w	r4, #119	; 0x77
    548e:	e7df      	b.n	5450 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    5490:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5494:	e7dc      	b.n	5450 <bt_hci_stop_scanning+0x5c>
    5496:	bf00      	nop
    5498:	2000b980 	.word	0x2000b980
    549c:	2000b9f0 	.word	0x2000b9f0

000054a0 <set_advertise_enable>:
{
    54a0:	b538      	push	{r3, r4, r5, lr}
    54a2:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    54a4:	2101      	movs	r1, #1
    54a6:	f242 000a 	movw	r0, #8202	; 0x200a
    54aa:	f7ff fc53 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    54ae:	b380      	cbz	r0, 5512 <set_advertise_enable+0x72>
    54b0:	4604      	mov	r4, r0
	if (enable) {
    54b2:	b1dd      	cbz	r5, 54ec <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    54b4:	2101      	movs	r1, #1
    54b6:	3008      	adds	r0, #8
    54b8:	f015 fcb9 	bl	1ae2e <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    54bc:	2200      	movs	r2, #0
    54be:	4621      	mov	r1, r4
    54c0:	f242 000a 	movw	r0, #8202	; 0x200a
    54c4:	f7ff fc72 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    54c8:	4603      	mov	r3, r0
    54ca:	b968      	cbnz	r0, 54e8 <set_advertise_enable+0x48>
	if (enable) {
    54cc:	b99d      	cbnz	r5, 54f6 <set_advertise_enable+0x56>
    54ce:	4a12      	ldr	r2, [pc, #72]	; (5518 <set_advertise_enable+0x78>)
    54d0:	f3bf 8f5b 	dmb	ish
    54d4:	e852 1f00 	ldrex	r1, [r2]
    54d8:	f021 0120 	bic.w	r1, r1, #32
    54dc:	e842 1000 	strex	r0, r1, [r2]
    54e0:	2800      	cmp	r0, #0
    54e2:	d1f7      	bne.n	54d4 <set_advertise_enable+0x34>
    54e4:	f3bf 8f5b 	dmb	ish
}
    54e8:	4618      	mov	r0, r3
    54ea:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    54ec:	2100      	movs	r1, #0
    54ee:	3008      	adds	r0, #8
    54f0:	f015 fc9d 	bl	1ae2e <net_buf_simple_add_u8>
    54f4:	e7e2      	b.n	54bc <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    54f6:	4a08      	ldr	r2, [pc, #32]	; (5518 <set_advertise_enable+0x78>)
    54f8:	f3bf 8f5b 	dmb	ish
    54fc:	e852 1f00 	ldrex	r1, [r2]
    5500:	f041 0120 	orr.w	r1, r1, #32
    5504:	e842 1000 	strex	r0, r1, [r2]
    5508:	2800      	cmp	r0, #0
    550a:	d1f7      	bne.n	54fc <set_advertise_enable+0x5c>
    550c:	f3bf 8f5b 	dmb	ish
    5510:	e7ea      	b.n	54e8 <set_advertise_enable+0x48>
		return -ENOBUFS;
    5512:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5516:	e7e7      	b.n	54e8 <set_advertise_enable+0x48>
    5518:	2000b9f0 	.word	0x2000b9f0

0000551c <hci_le_create_conn>:
{
    551c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    551e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    5520:	2119      	movs	r1, #25
    5522:	f242 000d 	movw	r0, #8205	; 0x200d
    5526:	f7ff fc15 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    552a:	b378      	cbz	r0, 558c <hci_le_create_conn+0x70>
    552c:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    552e:	2119      	movs	r1, #25
    5530:	3008      	adds	r0, #8
    5532:	f015 fc6b 	bl	1ae0c <net_buf_simple_add>
    5536:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    5538:	2219      	movs	r2, #25
    553a:	2100      	movs	r1, #0
    553c:	f025 fa18 	bl	2a970 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    5540:	2600      	movs	r6, #0
    5542:	2360      	movs	r3, #96	; 0x60
    5544:	7023      	strb	r3, [r4, #0]
    5546:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    5548:	70a3      	strb	r3, [r4, #2]
    554a:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    554c:	2207      	movs	r2, #7
    554e:	f105 0156 	add.w	r1, r5, #86	; 0x56
    5552:	1d60      	adds	r0, r4, #5
    5554:	f7fa feb4 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    5558:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    555c:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    555e:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    5562:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    5566:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    556a:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    556e:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    5572:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    5576:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    557a:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    557e:	4632      	mov	r2, r6
    5580:	4639      	mov	r1, r7
    5582:	f242 000d 	movw	r0, #8205	; 0x200d
    5586:	f7ff fc11 	bl	4dac <bt_hci_cmd_send_sync>
    558a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    558c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00005592 <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    5592:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    5596:	4682      	mov	sl, r0
    5598:	460f      	mov	r7, r1
    559a:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    559c:	2120      	movs	r1, #32
    559e:	f7ff fbd9 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    55a2:	2800      	cmp	r0, #0
    55a4:	d03c      	beq.n	5620 <set_ad+0x8e>
    55a6:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    55a8:	2120      	movs	r1, #32
    55aa:	3008      	adds	r0, #8
    55ac:	f015 fc2e 	bl	1ae0c <net_buf_simple_add>
    55b0:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    55b2:	2220      	movs	r2, #32
    55b4:	2100      	movs	r1, #0
    55b6:	f025 f9db 	bl	2a970 <memset>

	for (i = 0; i < ad_len; i++) {
    55ba:	2600      	movs	r6, #0
    55bc:	4546      	cmp	r6, r8
    55be:	d228      	bcs.n	5612 <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    55c0:	7822      	ldrb	r2, [r4, #0]
    55c2:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    55c6:	786b      	ldrb	r3, [r5, #1]
    55c8:	4413      	add	r3, r2
    55ca:	3302      	adds	r3, #2
    55cc:	2b1f      	cmp	r3, #31
    55ce:	dc19      	bgt.n	5604 <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    55d0:	1c53      	adds	r3, r2, #1
    55d2:	b2db      	uxtb	r3, r3
    55d4:	7023      	strb	r3, [r4, #0]
    55d6:	7869      	ldrb	r1, [r5, #1]
    55d8:	3101      	adds	r1, #1
    55da:	4422      	add	r2, r4
    55dc:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    55de:	1c58      	adds	r0, r3, #1
    55e0:	b2c0      	uxtb	r0, r0
    55e2:	7020      	strb	r0, [r4, #0]
    55e4:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    55e8:	4423      	add	r3, r4
    55ea:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    55ec:	4420      	add	r0, r4
    55ee:	786a      	ldrb	r2, [r5, #1]
    55f0:	6869      	ldr	r1, [r5, #4]
    55f2:	3001      	adds	r0, #1
    55f4:	f7fa fe64 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    55f8:	786b      	ldrb	r3, [r5, #1]
    55fa:	7822      	ldrb	r2, [r4, #0]
    55fc:	4413      	add	r3, r2
    55fe:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    5600:	3601      	adds	r6, #1
    5602:	e7db      	b.n	55bc <set_ad+0x2a>
			net_buf_unref(buf);
    5604:	4648      	mov	r0, r9
    5606:	f015 fbb5 	bl	1ad74 <net_buf_unref>
			return -EINVAL;
    560a:	f06f 0015 	mvn.w	r0, #21
    560e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    5612:	2200      	movs	r2, #0
    5614:	4649      	mov	r1, r9
    5616:	4650      	mov	r0, sl
    5618:	f7ff fbc8 	bl	4dac <bt_hci_cmd_send_sync>
    561c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    5620:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5624:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00005628 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    5628:	8802      	ldrh	r2, [r0, #0]
    562a:	8843      	ldrh	r3, [r0, #2]
    562c:	429a      	cmp	r2, r3
    562e:	d81a      	bhi.n	5666 <bt_le_conn_params_valid+0x3e>
    5630:	2a05      	cmp	r2, #5
    5632:	d91a      	bls.n	566a <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    5634:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    5638:	d819      	bhi.n	566e <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    563a:	8881      	ldrh	r1, [r0, #4]
    563c:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    5640:	d217      	bcs.n	5672 <bt_le_conn_params_valid+0x4a>
{
    5642:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    5644:	88c0      	ldrh	r0, [r0, #6]
    5646:	f1a0 020a 	sub.w	r2, r0, #10
    564a:	b292      	uxth	r2, r2
    564c:	f640 4476 	movw	r4, #3190	; 0xc76
    5650:	42a2      	cmp	r2, r4
    5652:	d810      	bhi.n	5676 <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    5654:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    5658:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    565c:	da01      	bge.n	5662 <bt_le_conn_params_valid+0x3a>
	return true;
    565e:	2001      	movs	r0, #1
    5660:	e00a      	b.n	5678 <bt_le_conn_params_valid+0x50>
		return false;
    5662:	2000      	movs	r0, #0
    5664:	e008      	b.n	5678 <bt_le_conn_params_valid+0x50>
		return false;
    5666:	2000      	movs	r0, #0
    5668:	4770      	bx	lr
    566a:	2000      	movs	r0, #0
    566c:	4770      	bx	lr
    566e:	2000      	movs	r0, #0
    5670:	4770      	bx	lr
		return false;
    5672:	2000      	movs	r0, #0
    5674:	4770      	bx	lr
		return false;
    5676:	2000      	movs	r0, #0
}
    5678:	bc10      	pop	{r4}
    567a:	4770      	bx	lr

0000567c <bt_addr_le_create_static>:
{
    567c:	b510      	push	{r4, lr}
    567e:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    5680:	2301      	movs	r3, #1
    5682:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    5686:	2106      	movs	r1, #6
    5688:	f00c f84a 	bl	11720 <bt_rand>
	if (err) {
    568c:	4602      	mov	r2, r0
    568e:	b918      	cbnz	r0, 5698 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    5690:	79a3      	ldrb	r3, [r4, #6]
    5692:	f063 033f 	orn	r3, r3, #63	; 0x3f
    5696:	71a3      	strb	r3, [r4, #6]
}
    5698:	4610      	mov	r0, r2
    569a:	bd10      	pop	{r4, pc}

0000569c <set_static_addr>:
{
    569c:	b510      	push	{r4, lr}
    569e:	b082      	sub	sp, #8
	if (bt_storage) {
    56a0:	4b2e      	ldr	r3, [pc, #184]	; (575c <set_static_addr+0xc0>)
    56a2:	681b      	ldr	r3, [r3, #0]
    56a4:	b13b      	cbz	r3, 56b6 <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    56a6:	681c      	ldr	r4, [r3, #0]
    56a8:	2307      	movs	r3, #7
    56aa:	4a2d      	ldr	r2, [pc, #180]	; (5760 <set_static_addr+0xc4>)
    56ac:	2100      	movs	r1, #0
    56ae:	4608      	mov	r0, r1
    56b0:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    56b2:	2807      	cmp	r0, #7
    56b4:	d02c      	beq.n	5710 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    56b6:	4b2a      	ldr	r3, [pc, #168]	; (5760 <set_static_addr+0xc4>)
    56b8:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    56bc:	f013 0f01 	tst.w	r3, #1
    56c0:	d018      	beq.n	56f4 <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    56c2:	aa01      	add	r2, sp, #4
    56c4:	2100      	movs	r1, #0
    56c6:	f64f 4009 	movw	r0, #64521	; 0xfc09
    56ca:	f7ff fb6f 	bl	4dac <bt_hci_cmd_send_sync>
		if (err) {
    56ce:	b988      	cbnz	r0, 56f4 <set_static_addr+0x58>
		rp = (void *)rsp->data;
    56d0:	9801      	ldr	r0, [sp, #4]
    56d2:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    56d4:	784b      	ldrb	r3, [r1, #1]
    56d6:	b15b      	cbz	r3, 56f0 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    56d8:	4821      	ldr	r0, [pc, #132]	; (5760 <set_static_addr+0xc4>)
    56da:	2301      	movs	r3, #1
    56dc:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    56e0:	2206      	movs	r2, #6
    56e2:	3102      	adds	r1, #2
    56e4:	f7fa fdec 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    56e8:	9801      	ldr	r0, [sp, #4]
    56ea:	f015 fb43 	bl	1ad74 <net_buf_unref>
    56ee:	e00f      	b.n	5710 <set_static_addr+0x74>
		net_buf_unref(rsp);
    56f0:	f015 fb40 	bl	1ad74 <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    56f4:	481a      	ldr	r0, [pc, #104]	; (5760 <set_static_addr+0xc4>)
    56f6:	f7ff ffc1 	bl	567c <bt_addr_le_create_static>
	if (err) {
    56fa:	4603      	mov	r3, r0
    56fc:	b9b8      	cbnz	r0, 572e <set_static_addr+0x92>
	if (bt_storage) {
    56fe:	4b17      	ldr	r3, [pc, #92]	; (575c <set_static_addr+0xc0>)
    5700:	681b      	ldr	r3, [r3, #0]
    5702:	b12b      	cbz	r3, 5710 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    5704:	685c      	ldr	r4, [r3, #4]
    5706:	2307      	movs	r3, #7
    5708:	4a15      	ldr	r2, [pc, #84]	; (5760 <set_static_addr+0xc4>)
    570a:	2100      	movs	r1, #0
    570c:	4608      	mov	r0, r1
    570e:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    5710:	4b13      	ldr	r3, [pc, #76]	; (5760 <set_static_addr+0xc4>)
    5712:	781b      	ldrb	r3, [r3, #0]
    5714:	2b01      	cmp	r3, #1
    5716:	d11b      	bne.n	5750 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    5718:	4b11      	ldr	r3, [pc, #68]	; (5760 <set_static_addr+0xc4>)
    571a:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    571c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5720:	2bc0      	cmp	r3, #192	; 0xc0
    5722:	d118      	bne.n	5756 <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    5724:	480f      	ldr	r0, [pc, #60]	; (5764 <set_static_addr+0xc8>)
    5726:	f7ff fe1d 	bl	5364 <set_random_address>
	if (err) {
    572a:	4603      	mov	r3, r0
    572c:	b110      	cbz	r0, 5734 <set_static_addr+0x98>
}
    572e:	4618      	mov	r0, r3
    5730:	b002      	add	sp, #8
    5732:	bd10      	pop	{r4, pc}
    5734:	4a0c      	ldr	r2, [pc, #48]	; (5768 <set_static_addr+0xcc>)
    5736:	f3bf 8f5b 	dmb	ish
    573a:	e852 1f00 	ldrex	r1, [r2]
    573e:	f041 0104 	orr.w	r1, r1, #4
    5742:	e842 1000 	strex	r0, r1, [r2]
    5746:	2800      	cmp	r0, #0
    5748:	d1f7      	bne.n	573a <set_static_addr+0x9e>
    574a:	f3bf 8f5b 	dmb	ish
	return 0;
    574e:	e7ee      	b.n	572e <set_static_addr+0x92>
		return -EINVAL;
    5750:	f06f 0315 	mvn.w	r3, #21
    5754:	e7eb      	b.n	572e <set_static_addr+0x92>
    5756:	f06f 0315 	mvn.w	r3, #21
    575a:	e7e8      	b.n	572e <set_static_addr+0x92>
    575c:	20002ac4 	.word	0x20002ac4
    5760:	2000b980 	.word	0x2000b980
    5764:	2000b981 	.word	0x2000b981
    5768:	2000b9f0 	.word	0x2000b9f0

0000576c <hci_init>:
{
    576c:	b510      	push	{r4, lr}
    576e:	b084      	sub	sp, #16
	err = common_init();
    5770:	f7ff fb5c 	bl	4e2c <common_init>
	if (err) {
    5774:	4604      	mov	r4, r0
    5776:	b110      	cbz	r0, 577e <hci_init+0x12>
}
    5778:	4620      	mov	r0, r4
    577a:	b004      	add	sp, #16
    577c:	bd10      	pop	{r4, pc}
	err = le_init();
    577e:	f7ff fc9b 	bl	50b8 <le_init>
	if (err) {
    5782:	4604      	mov	r4, r0
    5784:	2800      	cmp	r0, #0
    5786:	d1f7      	bne.n	5778 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    5788:	4b17      	ldr	r3, [pc, #92]	; (57e8 <hci_init+0x7c>)
    578a:	7e9b      	ldrb	r3, [r3, #26]
    578c:	f013 0f20 	tst.w	r3, #32
    5790:	d104      	bne.n	579c <hci_init+0x30>
		err = br_init();
    5792:	f7ff fd2d 	bl	51f0 <br_init>
		if (err) {
    5796:	4604      	mov	r4, r0
    5798:	2800      	cmp	r0, #0
    579a:	d1ed      	bne.n	5778 <hci_init+0xc>
	err = set_event_mask();
    579c:	f7ff fd44 	bl	5228 <set_event_mask>
	if (err) {
    57a0:	4604      	mov	r4, r0
    57a2:	2800      	cmp	r0, #0
    57a4:	d1e8      	bne.n	5778 <hci_init+0xc>
	hci_vs_init();
    57a6:	f7ff fda1 	bl	52ec <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    57aa:	2300      	movs	r3, #0
    57ac:	9300      	str	r3, [sp, #0]
    57ae:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    57b2:	2207      	movs	r2, #7
    57b4:	4669      	mov	r1, sp
    57b6:	480c      	ldr	r0, [pc, #48]	; (57e8 <hci_init+0x7c>)
    57b8:	f025 f846 	bl	2a848 <memcmp>
    57bc:	b178      	cbz	r0, 57de <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    57be:	4b0b      	ldr	r3, [pc, #44]	; (57ec <hci_init+0x80>)
    57c0:	e893 0003 	ldmia.w	r3, {r0, r1}
    57c4:	9002      	str	r0, [sp, #8]
    57c6:	f8ad 100c 	strh.w	r1, [sp, #12]
    57ca:	0c09      	lsrs	r1, r1, #16
    57cc:	f88d 100e 	strb.w	r1, [sp, #14]
    57d0:	2207      	movs	r2, #7
    57d2:	a902      	add	r1, sp, #8
    57d4:	4804      	ldr	r0, [pc, #16]	; (57e8 <hci_init+0x7c>)
    57d6:	f025 f837 	bl	2a848 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    57da:	2800      	cmp	r0, #0
    57dc:	d1cc      	bne.n	5778 <hci_init+0xc>
		err = set_static_addr();
    57de:	f7ff ff5d 	bl	569c <set_static_addr>
    57e2:	4604      	mov	r4, r0
    57e4:	e7c8      	b.n	5778 <hci_init+0xc>
    57e6:	bf00      	nop
    57e8:	2000b980 	.word	0x2000b980
    57ec:	0002e788 	.word	0x0002e788

000057f0 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    57f0:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    57f2:	2100      	movs	r1, #0
    57f4:	4608      	mov	r0, r1
    57f6:	f007 ffb1 	bl	d75c <reset>
    57fa:	bd08      	pop	{r3, pc}

000057fc <bt_send>:
{
    57fc:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    57fe:	4b03      	ldr	r3, [pc, #12]	; (580c <bt_send+0x10>)
    5800:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5804:	68db      	ldr	r3, [r3, #12]
    5806:	4798      	blx	r3
}
    5808:	bd08      	pop	{r3, pc}
    580a:	bf00      	nop
    580c:	2000b980 	.word	0x2000b980

00005810 <bt_hci_cmd_send>:
{
    5810:	b538      	push	{r3, r4, r5, lr}
    5812:	4605      	mov	r5, r0
	if (!buf) {
    5814:	460c      	mov	r4, r1
    5816:	b151      	cbz	r1, 582e <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    5818:	f640 4335 	movw	r3, #3125	; 0xc35
    581c:	429d      	cmp	r5, r3
    581e:	d00e      	beq.n	583e <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    5820:	4621      	mov	r1, r4
    5822:	480c      	ldr	r0, [pc, #48]	; (5854 <bt_hci_cmd_send+0x44>)
    5824:	f015 fa98 	bl	1ad58 <net_buf_put>
	return 0;
    5828:	2500      	movs	r5, #0
}
    582a:	4628      	mov	r0, r5
    582c:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    582e:	f7ff fa91 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    5832:	4604      	mov	r4, r0
    5834:	2800      	cmp	r0, #0
    5836:	d1ef      	bne.n	5818 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    5838:	f06f 0568 	mvn.w	r5, #104	; 0x68
    583c:	e7f5      	b.n	582a <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    583e:	4620      	mov	r0, r4
    5840:	f7ff ffdc 	bl	57fc <bt_send>
		if (err) {
    5844:	4605      	mov	r5, r0
    5846:	2800      	cmp	r0, #0
    5848:	d0ef      	beq.n	582a <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    584a:	4620      	mov	r0, r4
    584c:	f015 fa92 	bl	1ad74 <net_buf_unref>
    5850:	e7eb      	b.n	582a <bt_hci_cmd_send+0x1a>
    5852:	bf00      	nop
    5854:	2000ba54 	.word	0x2000ba54

00005858 <start_le_scan>:
{
    5858:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    585c:	b083      	sub	sp, #12
    585e:	4606      	mov	r6, r0
    5860:	4689      	mov	r9, r1
    5862:	4615      	mov	r5, r2
    5864:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    5866:	2107      	movs	r1, #7
    5868:	f242 000b 	movw	r0, #8203	; 0x200b
    586c:	f7ff fa72 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5870:	2800      	cmp	r0, #0
    5872:	d072      	beq.n	595a <start_le_scan+0x102>
    5874:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    5876:	2107      	movs	r1, #7
    5878:	3008      	adds	r0, #8
    587a:	f015 fac7 	bl	1ae0c <net_buf_simple_add>
    587e:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    5880:	2207      	movs	r2, #7
    5882:	2100      	movs	r1, #0
    5884:	f025 f874 	bl	2a970 <memset>
	set_param->scan_type = scan_type;
    5888:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    588a:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    588e:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    5892:	2300      	movs	r3, #0
    5894:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    5896:	4b34      	ldr	r3, [pc, #208]	; (5968 <start_le_scan+0x110>)
    5898:	781b      	ldrb	r3, [r3, #0]
    589a:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    589c:	2e01      	cmp	r6, #1
    589e:	d02c      	beq.n	58fa <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    58a0:	4639      	mov	r1, r7
    58a2:	f242 000b 	movw	r0, #8203	; 0x200b
    58a6:	f7ff ffb3 	bl	5810 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    58aa:	2102      	movs	r1, #2
    58ac:	f242 000c 	movw	r0, #8204	; 0x200c
    58b0:	f7ff fa50 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    58b4:	4604      	mov	r4, r0
    58b6:	2800      	cmp	r0, #0
    58b8:	d052      	beq.n	5960 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    58ba:	2102      	movs	r1, #2
    58bc:	3008      	adds	r0, #8
    58be:	f015 faa5 	bl	1ae0c <net_buf_simple_add>
    58c2:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    58c4:	2202      	movs	r2, #2
    58c6:	2100      	movs	r1, #0
    58c8:	f025 f852 	bl	2a970 <memset>
	scan_enable->filter_dup = filter_dup;
    58cc:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    58d0:	2301      	movs	r3, #1
    58d2:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    58d4:	aa01      	add	r2, sp, #4
    58d6:	4621      	mov	r1, r4
    58d8:	f242 000c 	movw	r0, #8204	; 0x200c
    58dc:	f7ff fa66 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    58e0:	4605      	mov	r5, r0
    58e2:	b930      	cbnz	r0, 58f2 <start_le_scan+0x9a>
	err = rsp->data[0];
    58e4:	9b01      	ldr	r3, [sp, #4]
    58e6:	689b      	ldr	r3, [r3, #8]
    58e8:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    58ea:	b1d5      	cbz	r5, 5922 <start_le_scan+0xca>
	net_buf_unref(rsp);
    58ec:	9801      	ldr	r0, [sp, #4]
    58ee:	f015 fa41 	bl	1ad74 <net_buf_unref>
}
    58f2:	4628      	mov	r0, r5
    58f4:	b003      	add	sp, #12
    58f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    58fa:	f3bf 8f5b 	dmb	ish
    58fe:	4b1a      	ldr	r3, [pc, #104]	; (5968 <start_le_scan+0x110>)
    5900:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5902:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    5906:	f013 0f20 	tst.w	r3, #32
    590a:	d1c9      	bne.n	58a0 <start_le_scan+0x48>
			err = le_set_private_addr();
    590c:	f7ff fd5a 	bl	53c4 <le_set_private_addr>
			if (err) {
    5910:	4605      	mov	r5, r0
    5912:	b910      	cbnz	r0, 591a <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    5914:	2301      	movs	r3, #1
    5916:	7163      	strb	r3, [r4, #5]
    5918:	e7c2      	b.n	58a0 <start_le_scan+0x48>
				net_buf_unref(buf);
    591a:	4638      	mov	r0, r7
    591c:	f015 fa2a 	bl	1ad74 <net_buf_unref>
				return err;
    5920:	e7e7      	b.n	58f2 <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5922:	4b12      	ldr	r3, [pc, #72]	; (596c <start_le_scan+0x114>)
    5924:	f3bf 8f5b 	dmb	ish
    5928:	e853 2f00 	ldrex	r2, [r3]
    592c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5930:	e843 2100 	strex	r1, r2, [r3]
    5934:	2900      	cmp	r1, #0
    5936:	d1f7      	bne.n	5928 <start_le_scan+0xd0>
    5938:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    593c:	2e01      	cmp	r6, #1
    593e:	d1d5      	bne.n	58ec <start_le_scan+0x94>
    5940:	f3bf 8f5b 	dmb	ish
    5944:	e853 2f00 	ldrex	r2, [r3]
    5948:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    594c:	e843 2100 	strex	r1, r2, [r3]
    5950:	2900      	cmp	r1, #0
    5952:	d1f7      	bne.n	5944 <start_le_scan+0xec>
    5954:	f3bf 8f5b 	dmb	ish
    5958:	e7c8      	b.n	58ec <start_le_scan+0x94>
		return -ENOBUFS;
    595a:	f06f 0568 	mvn.w	r5, #104	; 0x68
    595e:	e7c8      	b.n	58f2 <start_le_scan+0x9a>
		return -ENOBUFS;
    5960:	f06f 0568 	mvn.w	r5, #104	; 0x68
    5964:	e7c5      	b.n	58f2 <start_le_scan+0x9a>
    5966:	bf00      	nop
    5968:	2000b980 	.word	0x2000b980
    596c:	2000b9f0 	.word	0x2000b9f0

00005970 <bt_le_scan_update>:
{
    5970:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5972:	f3bf 8f5b 	dmb	ish
    5976:	4b17      	ldr	r3, [pc, #92]	; (59d4 <bt_le_scan_update+0x64>)
    5978:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    597a:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    597e:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5982:	b114      	cbz	r4, 598a <bt_le_scan_update+0x1a>
		return 0;
    5984:	2300      	movs	r3, #0
}
    5986:	4618      	mov	r0, r3
    5988:	bd38      	pop	{r3, r4, r5, pc}
    598a:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    598c:	f3bf 8f5b 	dmb	ish
    5990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5992:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    5996:	f013 0f80 	tst.w	r3, #128	; 0x80
    599a:	d004      	beq.n	59a6 <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    599c:	f7ff fd2a 	bl	53f4 <bt_hci_stop_scanning>
		if (err) {
    59a0:	4603      	mov	r3, r0
    59a2:	2800      	cmp	r0, #0
    59a4:	d1ef      	bne.n	5986 <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    59a6:	2101      	movs	r1, #1
    59a8:	2000      	movs	r0, #0
    59aa:	f001 fcd9 	bl	7360 <bt_conn_lookup_state_le>
		if (!conn) {
    59ae:	b170      	cbz	r0, 59ce <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    59b0:	f001 fd08 	bl	73c4 <bt_conn_unref>
		if (fast_scan) {
    59b4:	b13d      	cbz	r5, 59c6 <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    59b6:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    59b8:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    59ba:	2301      	movs	r3, #1
    59bc:	2000      	movs	r0, #0
    59be:	f7ff ff4b 	bl	5858 <start_le_scan>
    59c2:	4603      	mov	r3, r0
    59c4:	e7df      	b.n	5986 <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    59c6:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    59c8:	f44f 6100 	mov.w	r1, #2048	; 0x800
    59cc:	e7f5      	b.n	59ba <bt_le_scan_update+0x4a>
			return 0;
    59ce:	4623      	mov	r3, r4
    59d0:	e7d9      	b.n	5986 <bt_le_scan_update+0x16>
    59d2:	bf00      	nop
    59d4:	2000b980 	.word	0x2000b980

000059d8 <bt_init>:
{
    59d8:	b510      	push	{r4, lr}
	err = hci_init();
    59da:	f7ff fec7 	bl	576c <hci_init>
	if (err) {
    59de:	4604      	mov	r4, r0
    59e0:	b108      	cbz	r0, 59e6 <bt_init+0xe>
}
    59e2:	4620      	mov	r0, r4
    59e4:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    59e6:	f002 f83b 	bl	7a60 <bt_conn_init>
		if (err) {
    59ea:	4604      	mov	r4, r0
    59ec:	2800      	cmp	r0, #0
    59ee:	d1f8      	bne.n	59e2 <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    59f0:	4b07      	ldr	r3, [pc, #28]	; (5a10 <bt_init+0x38>)
    59f2:	f3bf 8f5b 	dmb	ish
    59f6:	e853 2f00 	ldrex	r2, [r3]
    59fa:	f042 0202 	orr.w	r2, r2, #2
    59fe:	e843 2100 	strex	r1, r2, [r3]
    5a02:	2900      	cmp	r1, #0
    5a04:	d1f7      	bne.n	59f6 <bt_init+0x1e>
    5a06:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    5a0a:	f7ff ffb1 	bl	5970 <bt_le_scan_update>
	return 0;
    5a0e:	e7e8      	b.n	59e2 <bt_init+0xa>
    5a10:	2000b9f0 	.word	0x2000b9f0

00005a14 <init_work>:
{
    5a14:	b508      	push	{r3, lr}
	err = bt_init();
    5a16:	f7ff ffdf 	bl	59d8 <bt_init>
	if (ready_cb) {
    5a1a:	4b02      	ldr	r3, [pc, #8]	; (5a24 <init_work+0x10>)
    5a1c:	681b      	ldr	r3, [r3, #0]
    5a1e:	b103      	cbz	r3, 5a22 <init_work+0xe>
		ready_cb(err);
    5a20:	4798      	blx	r3
    5a22:	bd08      	pop	{r3, pc}
    5a24:	20000428 	.word	0x20000428

00005a28 <hci_disconn_complete>:
{
    5a28:	b530      	push	{r4, r5, lr}
    5a2a:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5a2c:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5a2e:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    5a32:	7823      	ldrb	r3, [r4, #0]
    5a34:	b10b      	cbz	r3, 5a3a <hci_disconn_complete+0x12>
}
    5a36:	b005      	add	sp, #20
    5a38:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    5a3a:	f001 fc3f 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    5a3e:	4605      	mov	r5, r0
    5a40:	2800      	cmp	r0, #0
    5a42:	d034      	beq.n	5aae <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    5a44:	78e3      	ldrb	r3, [r4, #3]
    5a46:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    5a48:	f022 fafa 	bl	28040 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    5a4c:	2200      	movs	r2, #0
	size_t unused = 0;
    5a4e:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    5a50:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    5a54:	d206      	bcs.n	5a64 <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    5a56:	4927      	ldr	r1, [pc, #156]	; (5af4 <hci_disconn_complete+0xcc>)
    5a58:	5c89      	ldrb	r1, [r1, r2]
    5a5a:	29aa      	cmp	r1, #170	; 0xaa
    5a5c:	d102      	bne.n	5a64 <hci_disconn_complete+0x3c>
			unused++;
    5a5e:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    5a60:	3201      	adds	r2, #1
    5a62:	e7f5      	b.n	5a50 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    5a64:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    5a68:	2264      	movs	r2, #100	; 0x64
    5a6a:	fb02 f201 	mul.w	r2, r2, r1
    5a6e:	4822      	ldr	r0, [pc, #136]	; (5af8 <hci_disconn_complete+0xd0>)
    5a70:	fba0 0202 	umull	r0, r2, r0, r2
    5a74:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    5a76:	9202      	str	r2, [sp, #8]
    5a78:	f44f 7220 	mov.w	r2, #640	; 0x280
    5a7c:	9201      	str	r2, [sp, #4]
    5a7e:	9100      	str	r1, [sp, #0]
    5a80:	491e      	ldr	r1, [pc, #120]	; (5afc <hci_disconn_complete+0xd4>)
    5a82:	481f      	ldr	r0, [pc, #124]	; (5b00 <hci_disconn_complete+0xd8>)
    5a84:	f7fd fac2 	bl	300c <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5a88:	2100      	movs	r1, #0
    5a8a:	4628      	mov	r0, r5
    5a8c:	f001 fd28 	bl	74e0 <bt_conn_set_state>
	conn->handle = 0;
    5a90:	2300      	movs	r3, #0
    5a92:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    5a94:	78ab      	ldrb	r3, [r5, #2]
    5a96:	bb03      	cbnz	r3, 5ada <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5a98:	f3bf 8f5b 	dmb	ish
    5a9c:	686b      	ldr	r3, [r5, #4]
    5a9e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    5aa2:	f013 0f01 	tst.w	r3, #1
    5aa6:	d11c      	bne.n	5ae2 <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    5aa8:	4628      	mov	r0, r5
    5aaa:	f001 fc8b 	bl	73c4 <bt_conn_unref>
    5aae:	f3bf 8f5b 	dmb	ish
    5ab2:	4b14      	ldr	r3, [pc, #80]	; (5b04 <hci_disconn_complete+0xdc>)
    5ab4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5ab6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5aba:	f013 0f40 	tst.w	r3, #64	; 0x40
    5abe:	d0ba      	beq.n	5a36 <hci_disconn_complete+0xe>
    5ac0:	f3bf 8f5b 	dmb	ish
    5ac4:	4b0f      	ldr	r3, [pc, #60]	; (5b04 <hci_disconn_complete+0xdc>)
    5ac6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5ac8:	f3bf 8f5b 	dmb	ish
    5acc:	f013 0f20 	tst.w	r3, #32
    5ad0:	d1b1      	bne.n	5a36 <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    5ad2:	2001      	movs	r0, #1
    5ad4:	f7ff fce4 	bl	54a0 <set_advertise_enable>
    5ad8:	e7ad      	b.n	5a36 <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    5ada:	4628      	mov	r0, r5
    5adc:	f001 fc72 	bl	73c4 <bt_conn_unref>
		return;
    5ae0:	e7a9      	b.n	5a36 <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    5ae2:	2101      	movs	r1, #1
    5ae4:	4628      	mov	r0, r5
    5ae6:	f001 fcfb 	bl	74e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    5aea:	2000      	movs	r0, #0
    5aec:	f7ff ff40 	bl	5970 <bt_le_scan_update>
    5af0:	e7da      	b.n	5aa8 <hci_disconn_complete+0x80>
    5af2:	bf00      	nop
    5af4:	20003d18 	.word	0x20003d18
    5af8:	cccccccd 	.word	0xcccccccd
    5afc:	000316fc 	.word	0x000316fc
    5b00:	00031708 	.word	0x00031708
    5b04:	2000b980 	.word	0x2000b980

00005b08 <check_pending_conn>:
{
    5b08:	b538      	push	{r3, r4, r5, lr}
    5b0a:	f3bf 8f5b 	dmb	ish
    5b0e:	4b23      	ldr	r3, [pc, #140]	; (5b9c <check_pending_conn+0x94>)
    5b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5b12:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    5b16:	f413 7f80 	tst.w	r3, #256	; 0x100
    5b1a:	d101      	bne.n	5b20 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5b1c:	2a01      	cmp	r2, #1
    5b1e:	d900      	bls.n	5b22 <check_pending_conn+0x1a>
    5b20:	bd38      	pop	{r3, r4, r5, pc}
    5b22:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    5b24:	2101      	movs	r1, #1
    5b26:	f001 fc1b 	bl	7360 <bt_conn_lookup_state_le>
	if (!conn) {
    5b2a:	4605      	mov	r5, r0
    5b2c:	2800      	cmp	r0, #0
    5b2e:	d0f7      	beq.n	5b20 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5b30:	f7ff fc60 	bl	53f4 <bt_hci_stop_scanning>
    5b34:	b9c0      	cbnz	r0, 5b68 <check_pending_conn+0x60>
    5b36:	f3bf 8f5b 	dmb	ish
    5b3a:	4b18      	ldr	r3, [pc, #96]	; (5b9c <check_pending_conn+0x94>)
    5b3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5b3e:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    5b42:	f013 0f04 	tst.w	r3, #4
    5b46:	d11c      	bne.n	5b82 <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5b48:	2207      	movs	r2, #7
    5b4a:	4914      	ldr	r1, [pc, #80]	; (5b9c <check_pending_conn+0x94>)
    5b4c:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5b50:	f7fa fbb6 	bl	2c0 <memcpy>
    5b54:	2207      	movs	r2, #7
    5b56:	4621      	mov	r1, r4
    5b58:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5b5c:	f7fa fbb0 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5b60:	4628      	mov	r0, r5
    5b62:	f7ff fcdb 	bl	551c <hci_le_create_conn>
    5b66:	b180      	cbz	r0, 5b8a <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5b68:	231f      	movs	r3, #31
    5b6a:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5b6c:	2100      	movs	r1, #0
    5b6e:	4628      	mov	r0, r5
    5b70:	f001 fcb6 	bl	74e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    5b74:	4628      	mov	r0, r5
    5b76:	f001 fc25 	bl	73c4 <bt_conn_unref>
	bt_le_scan_update(false);
    5b7a:	2000      	movs	r0, #0
    5b7c:	f7ff fef8 	bl	5970 <bt_le_scan_update>
    5b80:	e7ce      	b.n	5b20 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    5b82:	4807      	ldr	r0, [pc, #28]	; (5ba0 <check_pending_conn+0x98>)
    5b84:	f7ff fbee 	bl	5364 <set_random_address>
    5b88:	e7de      	b.n	5b48 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5b8a:	2102      	movs	r1, #2
    5b8c:	4628      	mov	r0, r5
    5b8e:	f001 fca7 	bl	74e0 <bt_conn_set_state>
	bt_conn_unref(conn);
    5b92:	4628      	mov	r0, r5
    5b94:	f001 fc16 	bl	73c4 <bt_conn_unref>
	return;
    5b98:	bd38      	pop	{r3, r4, r5, pc}
    5b9a:	bf00      	nop
    5b9c:	2000b980 	.word	0x2000b980
    5ba0:	2000b981 	.word	0x2000b981

00005ba4 <le_adv_report>:
{
    5ba4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5ba8:	b083      	sub	sp, #12
    5baa:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5bac:	f100 0308 	add.w	r3, r0, #8
    5bb0:	9300      	str	r3, [sp, #0]
    5bb2:	4618      	mov	r0, r3
    5bb4:	f015 f97f 	bl	1aeb6 <net_buf_simple_pull_u8>
	while (num_reports--) {
    5bb8:	e00a      	b.n	5bd0 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    5bba:	7822      	ldrb	r2, [r4, #0]
    5bbc:	4631      	mov	r1, r6
    5bbe:	9801      	ldr	r0, [sp, #4]
    5bc0:	f7ff ffa2 	bl	5b08 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    5bc4:	7a21      	ldrb	r1, [r4, #8]
    5bc6:	3101      	adds	r1, #1
    5bc8:	9800      	ldr	r0, [sp, #0]
    5bca:	f015 f96c 	bl	1aea6 <net_buf_simple_pull>
	while (num_reports--) {
    5bce:	4638      	mov	r0, r7
    5bd0:	1e43      	subs	r3, r0, #1
    5bd2:	b2df      	uxtb	r7, r3
    5bd4:	b368      	cbz	r0, 5c32 <le_adv_report+0x8e>
		info = (void *)buf->data;
    5bd6:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    5bd8:	2109      	movs	r1, #9
    5bda:	f8dd 9000 	ldr.w	r9, [sp]
    5bde:	4648      	mov	r0, r9
    5be0:	f015 f961 	bl	1aea6 <net_buf_simple_pull>
		rssi = info->data[info->length];
    5be4:	7a23      	ldrb	r3, [r4, #8]
    5be6:	4423      	add	r3, r4
    5be8:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    5bec:	1c66      	adds	r6, r4, #1
    5bee:	4630      	mov	r0, r6
    5bf0:	f7fe ff6b 	bl	4aca <find_id_addr>
    5bf4:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    5bf6:	4b10      	ldr	r3, [pc, #64]	; (5c38 <le_adv_report+0x94>)
    5bf8:	681b      	ldr	r3, [r3, #0]
    5bfa:	2b00      	cmp	r3, #0
    5bfc:	d0dd      	beq.n	5bba <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    5bfe:	f8cd 9000 	str.w	r9, [sp]
    5c02:	4648      	mov	r0, r9
    5c04:	f015 f967 	bl	1aed6 <net_buf_simple_headroom>
    5c08:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    5c0c:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    5c10:	7a23      	ldrb	r3, [r4, #8]
    5c12:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    5c14:	4b08      	ldr	r3, [pc, #32]	; (5c38 <le_adv_report+0x94>)
    5c16:	f8d3 b000 	ldr.w	fp, [r3]
    5c1a:	9b00      	ldr	r3, [sp, #0]
    5c1c:	7822      	ldrb	r2, [r4, #0]
    5c1e:	4641      	mov	r1, r8
    5c20:	9801      	ldr	r0, [sp, #4]
    5c22:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    5c24:	f105 0310 	add.w	r3, r5, #16
    5c28:	4453      	add	r3, sl
    5c2a:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    5c2c:	f8a5 900c 	strh.w	r9, [r5, #12]
    5c30:	e7c3      	b.n	5bba <le_adv_report+0x16>
}
    5c32:	b003      	add	sp, #12
    5c34:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5c38:	2000042c 	.word	0x2000042c

00005c3c <hci_le_read_remote_features>:
{
    5c3c:	b538      	push	{r3, r4, r5, lr}
    5c3e:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5c40:	2102      	movs	r1, #2
    5c42:	f242 0016 	movw	r0, #8214	; 0x2016
    5c46:	f7ff f885 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5c4a:	b168      	cbz	r0, 5c68 <hci_le_read_remote_features+0x2c>
    5c4c:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5c4e:	2102      	movs	r1, #2
    5c50:	3008      	adds	r0, #8
    5c52:	f015 f8db 	bl	1ae0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c56:	882b      	ldrh	r3, [r5, #0]
    5c58:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5c5a:	4621      	mov	r1, r4
    5c5c:	f242 0016 	movw	r0, #8214	; 0x2016
    5c60:	f7ff fdd6 	bl	5810 <bt_hci_cmd_send>
	return 0;
    5c64:	2000      	movs	r0, #0
    5c66:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5c68:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5c6c:	bd38      	pop	{r3, r4, r5, pc}

00005c6e <hci_le_set_phy>:
{
    5c6e:	b538      	push	{r3, r4, r5, lr}
    5c70:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    5c72:	2107      	movs	r1, #7
    5c74:	f242 0032 	movw	r0, #8242	; 0x2032
    5c78:	f7ff f86c 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5c7c:	b1a0      	cbz	r0, 5ca8 <hci_le_set_phy+0x3a>
    5c7e:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5c80:	2107      	movs	r1, #7
    5c82:	3008      	adds	r0, #8
    5c84:	f015 f8c2 	bl	1ae0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5c88:	8823      	ldrh	r3, [r4, #0]
    5c8a:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5c8c:	2400      	movs	r4, #0
    5c8e:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5c90:	2302      	movs	r3, #2
    5c92:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5c94:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    5c96:	7144      	strb	r4, [r0, #5]
    5c98:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5c9a:	4629      	mov	r1, r5
    5c9c:	f242 0032 	movw	r0, #8242	; 0x2032
    5ca0:	f7ff fdb6 	bl	5810 <bt_hci_cmd_send>
	return 0;
    5ca4:	4620      	mov	r0, r4
    5ca6:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5ca8:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5cac:	bd38      	pop	{r3, r4, r5, pc}

00005cae <hci_le_set_data_len>:
{
    5cae:	b5f0      	push	{r4, r5, r6, r7, lr}
    5cb0:	b083      	sub	sp, #12
    5cb2:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    5cb4:	aa01      	add	r2, sp, #4
    5cb6:	2100      	movs	r1, #0
    5cb8:	f242 002f 	movw	r0, #8239	; 0x202f
    5cbc:	f7ff f876 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    5cc0:	4603      	mov	r3, r0
    5cc2:	b110      	cbz	r0, 5cca <hci_le_set_data_len+0x1c>
}
    5cc4:	4618      	mov	r0, r3
    5cc6:	b003      	add	sp, #12
    5cc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    5cca:	9801      	ldr	r0, [sp, #4]
    5ccc:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    5cce:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    5cd2:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    5cd6:	f015 f84d 	bl	1ad74 <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    5cda:	2106      	movs	r1, #6
    5cdc:	f242 0022 	movw	r0, #8226	; 0x2022
    5ce0:	f7ff f838 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    5ce4:	4605      	mov	r5, r0
    5ce6:	b170      	cbz	r0, 5d06 <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    5ce8:	2106      	movs	r1, #6
    5cea:	3008      	adds	r0, #8
    5cec:	f015 f88e 	bl	1ae0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5cf0:	8823      	ldrh	r3, [r4, #0]
    5cf2:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    5cf4:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    5cf6:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    5cf8:	4629      	mov	r1, r5
    5cfa:	f242 0022 	movw	r0, #8226	; 0x2022
    5cfe:	f7ff fd87 	bl	5810 <bt_hci_cmd_send>
    5d02:	4603      	mov	r3, r0
    5d04:	e7de      	b.n	5cc4 <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    5d06:	f06f 0368 	mvn.w	r3, #104	; 0x68
    5d0a:	e7db      	b.n	5cc4 <hci_le_set_data_len+0x16>

00005d0c <le_conn_complete>:
{
    5d0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    5d10:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5d12:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    5d16:	7823      	ldrb	r3, [r4, #0]
    5d18:	b17b      	cbz	r3, 5d3a <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5d1a:	2102      	movs	r1, #2
    5d1c:	2000      	movs	r0, #0
    5d1e:	f001 fb1f 	bl	7360 <bt_conn_lookup_state_le>
		if (!conn) {
    5d22:	4605      	mov	r5, r0
    5d24:	b3d0      	cbz	r0, 5d9c <le_conn_complete+0x90>
		conn->err = evt->status;
    5d26:	7823      	ldrb	r3, [r4, #0]
    5d28:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5d2a:	2100      	movs	r1, #0
    5d2c:	f001 fbd8 	bl	74e0 <bt_conn_set_state>
		bt_conn_unref(conn);
    5d30:	4628      	mov	r0, r5
    5d32:	f001 fb47 	bl	73c4 <bt_conn_unref>
		return;
    5d36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5d3a:	1d27      	adds	r7, r4, #4
    5d3c:	4638      	mov	r0, r7
    5d3e:	f7fe fec4 	bl	4aca <find_id_addr>
    5d42:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    5d44:	2102      	movs	r1, #2
    5d46:	f001 fb0b 	bl	7360 <bt_conn_lookup_state_le>
    5d4a:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5d4c:	78e3      	ldrb	r3, [r4, #3]
    5d4e:	2b01      	cmp	r3, #1
    5d50:	d026      	beq.n	5da0 <le_conn_complete+0x94>
	if (!conn) {
    5d52:	b31d      	cbz	r5, 5d9c <le_conn_complete+0x90>
	conn->handle   = handle;
    5d54:	4628      	mov	r0, r5
    5d56:	f820 6b48 	strh.w	r6, [r0], #72
    5d5a:	2207      	movs	r2, #7
    5d5c:	4641      	mov	r1, r8
    5d5e:	f7fa faaf 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    5d62:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    5d66:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5d6a:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5d6e:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    5d72:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    5d76:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5d7a:	78e3      	ldrb	r3, [r4, #3]
    5d7c:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5d7e:	2b01      	cmp	r3, #1
    5d80:	d022      	beq.n	5dc8 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    5d82:	2103      	movs	r1, #3
    5d84:	4628      	mov	r0, r5
    5d86:	f001 fbab 	bl	74e0 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5d8a:	7b2b      	ldrb	r3, [r5, #12]
    5d8c:	2b03      	cmp	r3, #3
    5d8e:	d03b      	beq.n	5e08 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5d90:	4628      	mov	r0, r5
    5d92:	f001 fb17 	bl	73c4 <bt_conn_unref>
	bt_le_scan_update(false);
    5d96:	2000      	movs	r0, #0
    5d98:	f7ff fdea 	bl	5970 <bt_le_scan_update>
    5d9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5da0:	4b3a      	ldr	r3, [pc, #232]	; (5e8c <le_conn_complete+0x180>)
    5da2:	f3bf 8f5b 	dmb	ish
    5da6:	e853 2f00 	ldrex	r2, [r3]
    5daa:	f022 0220 	bic.w	r2, r2, #32
    5dae:	e843 2100 	strex	r1, r2, [r3]
    5db2:	2900      	cmp	r1, #0
    5db4:	d1f7      	bne.n	5da6 <le_conn_complete+0x9a>
    5db6:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    5dba:	2d00      	cmp	r5, #0
    5dbc:	d1c9      	bne.n	5d52 <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    5dbe:	4640      	mov	r0, r8
    5dc0:	f001 fa30 	bl	7224 <bt_conn_add_le>
    5dc4:	4605      	mov	r5, r0
    5dc6:	e7c4      	b.n	5d52 <le_conn_complete+0x46>
    5dc8:	2207      	movs	r2, #7
    5dca:	4639      	mov	r1, r7
    5dcc:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5dd0:	f7fa fa76 	bl	2c0 <memcpy>
    5dd4:	4e2e      	ldr	r6, [pc, #184]	; (5e90 <le_conn_complete+0x184>)
    5dd6:	2207      	movs	r2, #7
    5dd8:	4631      	mov	r1, r6
    5dda:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5dde:	f7fa fa6f 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5de2:	f3bf 8f5b 	dmb	ish
    5de6:	6f33      	ldr	r3, [r6, #112]	; 0x70
    5de8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5dec:	f013 0f40 	tst.w	r3, #64	; 0x40
    5df0:	d0c7      	beq.n	5d82 <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    5df2:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    5df6:	2200      	movs	r2, #0
    5df8:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    5dfc:	4313      	orrs	r3, r2
    5dfe:	d0c0      	beq.n	5d82 <le_conn_complete+0x76>
			set_advertise_enable(true);
    5e00:	2001      	movs	r0, #1
    5e02:	f7ff fb4d 	bl	54a0 <set_advertise_enable>
    5e06:	e7bc      	b.n	5d82 <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5e08:	78e3      	ldrb	r3, [r4, #3]
    5e0a:	b12b      	cbz	r3, 5e18 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    5e0c:	4b20      	ldr	r3, [pc, #128]	; (5e90 <le_conn_complete+0x184>)
    5e0e:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    5e12:	f013 0f08 	tst.w	r3, #8
    5e16:	d004      	beq.n	5e22 <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5e18:	4628      	mov	r0, r5
    5e1a:	f7ff ff0f 	bl	5c3c <hci_le_read_remote_features>
		if (!err) {
    5e1e:	2800      	cmp	r0, #0
    5e20:	d0b6      	beq.n	5d90 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    5e22:	4b1b      	ldr	r3, [pc, #108]	; (5e90 <le_conn_complete+0x184>)
    5e24:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5e28:	f013 0f01 	tst.w	r3, #1
    5e2c:	d10d      	bne.n	5e4a <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5e2e:	4b18      	ldr	r3, [pc, #96]	; (5e90 <le_conn_complete+0x184>)
    5e30:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5e34:	f013 0f20 	tst.w	r3, #32
    5e38:	d003      	beq.n	5e42 <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5e3a:	4628      	mov	r0, r5
    5e3c:	f7ff ff37 	bl	5cae <hci_le_set_data_len>
		if (!err) {
    5e40:	b1b0      	cbz	r0, 5e70 <le_conn_complete+0x164>
	update_conn_param(conn);
    5e42:	4628      	mov	r0, r5
    5e44:	f7fe fe4a 	bl	4adc <update_conn_param>
    5e48:	e7a2      	b.n	5d90 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5e4a:	4628      	mov	r0, r5
    5e4c:	f7ff ff0f 	bl	5c6e <hci_le_set_phy>
		if (!err) {
    5e50:	2800      	cmp	r0, #0
    5e52:	d1ec      	bne.n	5e2e <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    5e54:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5e56:	f3bf 8f5b 	dmb	ish
    5e5a:	e853 2f00 	ldrex	r2, [r3]
    5e5e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    5e62:	e843 2100 	strex	r1, r2, [r3]
    5e66:	2900      	cmp	r1, #0
    5e68:	d1f7      	bne.n	5e5a <le_conn_complete+0x14e>
    5e6a:	f3bf 8f5b 	dmb	ish
    5e6e:	e78f      	b.n	5d90 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5e70:	1d2b      	adds	r3, r5, #4
    5e72:	f3bf 8f5b 	dmb	ish
    5e76:	e853 2f00 	ldrex	r2, [r3]
    5e7a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5e7e:	e843 2100 	strex	r1, r2, [r3]
    5e82:	2900      	cmp	r1, #0
    5e84:	d1f7      	bne.n	5e76 <le_conn_complete+0x16a>
    5e86:	f3bf 8f5b 	dmb	ish
    5e8a:	e781      	b.n	5d90 <le_conn_complete+0x84>
    5e8c:	2000b9f0 	.word	0x2000b9f0
    5e90:	2000b980 	.word	0x2000b980

00005e94 <le_conn_complete>:
{
    5e94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5e98:	4604      	mov	r4, r0
    5e9a:	460f      	mov	r7, r1
    5e9c:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5e9e:	1d85      	adds	r5, r0, #6
    5ea0:	f100 060c 	add.w	r6, r0, #12
    5ea4:	4633      	mov	r3, r6
    5ea6:	22ff      	movs	r2, #255	; 0xff
    5ea8:	4629      	mov	r1, r5
    5eaa:	7940      	ldrb	r0, [r0, #5]
    5eac:	f014 fafa 	bl	1a4a4 <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5eb0:	4b40      	ldr	r3, [pc, #256]	; (5fb4 <le_conn_complete+0x120>)
    5eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
    5eb6:	2200      	movs	r2, #0
    5eb8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    5ebc:	4313      	orrs	r3, r2
    5ebe:	d077      	beq.n	5fb0 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5ec0:	4b3d      	ldr	r3, [pc, #244]	; (5fb8 <le_conn_complete+0x124>)
    5ec2:	e9d3 2300 	ldrd	r2, r3, [r3]
    5ec6:	f002 0001 	and.w	r0, r2, #1
    5eca:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5ecc:	4301      	orrs	r1, r0
    5ece:	d104      	bne.n	5eda <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    5ed0:	f402 7000 	and.w	r0, r2, #512	; 0x200
    5ed4:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    5ed6:	4301      	orrs	r1, r0
    5ed8:	d06a      	beq.n	5fb0 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    5eda:	78e1      	ldrb	r1, [r4, #3]
    5edc:	b919      	cbnz	r1, 5ee6 <le_conn_complete+0x52>
		conn_count++;
    5ede:	4837      	ldr	r0, [pc, #220]	; (5fbc <le_conn_complete+0x128>)
    5ee0:	6801      	ldr	r1, [r0, #0]
    5ee2:	3101      	adds	r1, #1
    5ee4:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    5ee6:	f402 7200 	and.w	r2, r2, #512	; 0x200
    5eea:	2300      	movs	r3, #0
    5eec:	4313      	orrs	r3, r2
    5eee:	d03e      	beq.n	5f6e <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    5ef0:	221e      	movs	r2, #30
    5ef2:	210a      	movs	r1, #10
    5ef4:	4640      	mov	r0, r8
    5ef6:	f007 fb2d 	bl	d554 <meta_evt>
    5efa:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    5efc:	78e3      	ldrb	r3, [r4, #3]
    5efe:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    5f00:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    5f04:	7923      	ldrb	r3, [r4, #4]
    5f06:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    5f08:	7963      	ldrb	r3, [r4, #5]
    5f0a:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    5f0c:	2206      	movs	r2, #6
    5f0e:	4629      	mov	r1, r5
    5f10:	3005      	adds	r0, #5
    5f12:	f7fa f9d5 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    5f16:	7ca3      	ldrb	r3, [r4, #18]
    5f18:	b123      	cbz	r3, 5f24 <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5f1a:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5f1c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5f20:	2b40      	cmp	r3, #64	; 0x40
    5f22:	d01c      	beq.n	5f5e <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    5f24:	2206      	movs	r2, #6
    5f26:	2100      	movs	r1, #0
    5f28:	f108 000b 	add.w	r0, r8, #11
    5f2c:	f024 fd20 	bl	2a970 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5f30:	2206      	movs	r2, #6
    5f32:	4631      	mov	r1, r6
    5f34:	f108 0011 	add.w	r0, r8, #17
    5f38:	f7fa f9c2 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5f3c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5f40:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5f44:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5f48:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5f4c:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5f50:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    5f54:	7fe3      	ldrb	r3, [r4, #31]
    5f56:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5f5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5f5e:	2206      	movs	r2, #6
    5f60:	f104 0113 	add.w	r1, r4, #19
    5f64:	f108 000b 	add.w	r0, r8, #11
    5f68:	f7fa f9aa 	bl	2c0 <memcpy>
    5f6c:	e7e0      	b.n	5f30 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5f6e:	2212      	movs	r2, #18
    5f70:	2101      	movs	r1, #1
    5f72:	4640      	mov	r0, r8
    5f74:	f007 faee 	bl	d554 <meta_evt>
    5f78:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5f7a:	78e3      	ldrb	r3, [r4, #3]
    5f7c:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5f7e:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    5f82:	7923      	ldrb	r3, [r4, #4]
    5f84:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    5f86:	7963      	ldrb	r3, [r4, #5]
    5f88:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5f8a:	2206      	movs	r2, #6
    5f8c:	4629      	mov	r1, r5
    5f8e:	3005      	adds	r0, #5
    5f90:	f7fa f996 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5f94:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5f98:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5f9c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5fa0:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5fa4:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5fa8:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5fac:	7fe3      	ldrb	r3, [r4, #31]
    5fae:	7473      	strb	r3, [r6, #17]
    5fb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    5fb4:	2000bc70 	.word	0x2000bc70
    5fb8:	2000bc78 	.word	0x2000bc78
    5fbc:	20000b44 	.word	0x20000b44

00005fc0 <le_remote_feat_complete>:
{
    5fc0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    5fc2:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    5fc4:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    5fc8:	f001 f978 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    5fcc:	b1f0      	cbz	r0, 600c <le_remote_feat_complete+0x4c>
    5fce:	4604      	mov	r4, r0
	if (!evt->status) {
    5fd0:	782b      	ldrb	r3, [r5, #0]
    5fd2:	b1e3      	cbz	r3, 600e <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5fd4:	4b24      	ldr	r3, [pc, #144]	; (6068 <le_remote_feat_complete+0xa8>)
    5fd6:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5fda:	f013 0f01 	tst.w	r3, #1
    5fde:	d004      	beq.n	5fea <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    5fe0:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    5fe4:	f013 0f01 	tst.w	r3, #1
    5fe8:	d117      	bne.n	601a <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5fea:	4b1f      	ldr	r3, [pc, #124]	; (6068 <le_remote_feat_complete+0xa8>)
    5fec:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    5ff0:	f013 0f20 	tst.w	r3, #32
    5ff4:	d004      	beq.n	6000 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    5ff6:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    5ffa:	f013 0f20 	tst.w	r3, #32
    5ffe:	d11f      	bne.n	6040 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    6000:	4620      	mov	r0, r4
    6002:	f7fe fd6b 	bl	4adc <update_conn_param>
	bt_conn_unref(conn);
    6006:	4620      	mov	r0, r4
    6008:	f001 f9dc 	bl	73c4 <bt_conn_unref>
    600c:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    600e:	2208      	movs	r2, #8
    6010:	1ce9      	adds	r1, r5, #3
    6012:	3068      	adds	r0, #104	; 0x68
    6014:	f7fa f954 	bl	2c0 <memcpy>
    6018:	e7dc      	b.n	5fd4 <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    601a:	4620      	mov	r0, r4
    601c:	f7ff fe27 	bl	5c6e <hci_le_set_phy>
		if (!err) {
    6020:	2800      	cmp	r0, #0
    6022:	d1e2      	bne.n	5fea <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    6024:	1d23      	adds	r3, r4, #4
    6026:	f3bf 8f5b 	dmb	ish
    602a:	e853 2f00 	ldrex	r2, [r3]
    602e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    6032:	e843 2100 	strex	r1, r2, [r3]
    6036:	2900      	cmp	r1, #0
    6038:	d1f7      	bne.n	602a <le_remote_feat_complete+0x6a>
    603a:	f3bf 8f5b 	dmb	ish
    603e:	e7e2      	b.n	6006 <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    6040:	4620      	mov	r0, r4
    6042:	f7ff fe34 	bl	5cae <hci_le_set_data_len>
		if (!err) {
    6046:	2800      	cmp	r0, #0
    6048:	d1da      	bne.n	6000 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    604a:	1d23      	adds	r3, r4, #4
    604c:	f3bf 8f5b 	dmb	ish
    6050:	e853 2f00 	ldrex	r2, [r3]
    6054:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    6058:	e843 2100 	strex	r1, r2, [r3]
    605c:	2900      	cmp	r1, #0
    605e:	d1f7      	bne.n	6050 <le_remote_feat_complete+0x90>
    6060:	f3bf 8f5b 	dmb	ish
    6064:	e7cf      	b.n	6006 <le_remote_feat_complete+0x46>
    6066:	bf00      	nop
    6068:	2000b980 	.word	0x2000b980

0000606c <le_remote_feat_complete>:
{
    606c:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    606e:	4c14      	ldr	r4, [pc, #80]	; (60c0 <le_remote_feat_complete+0x54>)
    6070:	e9d4 4500 	ldrd	r4, r5, [r4]
    6074:	2400      	movs	r4, #0
    6076:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    607a:	432c      	orrs	r4, r5
    607c:	d007      	beq.n	608e <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    607e:	4c11      	ldr	r4, [pc, #68]	; (60c4 <le_remote_feat_complete+0x58>)
    6080:	e9d4 4500 	ldrd	r4, r5, [r4]
    6084:	f004 0408 	and.w	r4, r4, #8
    6088:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    608a:	432c      	orrs	r4, r5
    608c:	d100      	bne.n	6090 <le_remote_feat_complete+0x24>
    608e:	bd70      	pop	{r4, r5, r6, pc}
    6090:	4615      	mov	r5, r2
    6092:	460e      	mov	r6, r1
    6094:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    6096:	220b      	movs	r2, #11
    6098:	2104      	movs	r1, #4
    609a:	4618      	mov	r0, r3
    609c:	f007 fa5a 	bl	d554 <meta_evt>
	sep->status = status;
    60a0:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    60a2:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    60a6:	b12c      	cbz	r4, 60b4 <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    60a8:	2208      	movs	r2, #8
    60aa:	2100      	movs	r1, #0
    60ac:	3003      	adds	r0, #3
    60ae:	f024 fc5f 	bl	2a970 <memset>
    60b2:	e7ec      	b.n	608e <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    60b4:	2208      	movs	r2, #8
    60b6:	1d31      	adds	r1, r6, #4
    60b8:	3003      	adds	r0, #3
    60ba:	f7fa f901 	bl	2c0 <memcpy>
    60be:	bd70      	pop	{r4, r5, r6, pc}
    60c0:	2000bc70 	.word	0x2000bc70
    60c4:	2000bc78 	.word	0x2000bc78

000060c8 <le_phy_update_complete>:
{
    60c8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    60ca:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    60cc:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    60d0:	f001 f8f4 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    60d4:	b308      	cbz	r0, 611a <le_phy_update_complete+0x52>
    60d6:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    60d8:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    60da:	f3bf 8f5b 	dmb	ish
    60de:	e855 3f00 	ldrex	r3, [r5]
    60e2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    60e6:	e845 2100 	strex	r1, r2, [r5]
    60ea:	2900      	cmp	r1, #0
    60ec:	d1f7      	bne.n	60de <le_phy_update_complete+0x16>
    60ee:	f3bf 8f5b 	dmb	ish
    60f2:	f013 0f80 	tst.w	r3, #128	; 0x80
    60f6:	d00d      	beq.n	6114 <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    60f8:	4b11      	ldr	r3, [pc, #68]	; (6140 <le_phy_update_complete+0x78>)
    60fa:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    60fe:	f013 0f20 	tst.w	r3, #32
    6102:	d004      	beq.n	610e <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    6104:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    6108:	f013 0f20 	tst.w	r3, #32
    610c:	d106      	bne.n	611c <le_phy_update_complete+0x54>
	update_conn_param(conn);
    610e:	4620      	mov	r0, r4
    6110:	f7fe fce4 	bl	4adc <update_conn_param>
	bt_conn_unref(conn);
    6114:	4620      	mov	r0, r4
    6116:	f001 f955 	bl	73c4 <bt_conn_unref>
    611a:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    611c:	4620      	mov	r0, r4
    611e:	f7ff fdc6 	bl	5cae <hci_le_set_data_len>
		if (!err) {
    6122:	2800      	cmp	r0, #0
    6124:	d1f3      	bne.n	610e <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6126:	f3bf 8f5b 	dmb	ish
    612a:	e855 3f00 	ldrex	r3, [r5]
    612e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    6132:	e845 3200 	strex	r2, r3, [r5]
    6136:	2a00      	cmp	r2, #0
    6138:	d1f7      	bne.n	612a <le_phy_update_complete+0x62>
    613a:	f3bf 8f5b 	dmb	ish
    613e:	e7e9      	b.n	6114 <le_phy_update_complete+0x4c>
    6140:	2000b980 	.word	0x2000b980

00006144 <le_conn_param_neg_reply>:
{
    6144:	b570      	push	{r4, r5, r6, lr}
    6146:	4606      	mov	r6, r0
    6148:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    614a:	2103      	movs	r1, #3
    614c:	f242 0021 	movw	r0, #8225	; 0x2021
    6150:	f7fe fe00 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    6154:	b160      	cbz	r0, 6170 <le_conn_param_neg_reply+0x2c>
    6156:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6158:	2103      	movs	r1, #3
    615a:	3008      	adds	r0, #8
    615c:	f014 fe56 	bl	1ae0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    6160:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    6162:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    6164:	4621      	mov	r1, r4
    6166:	f242 0021 	movw	r0, #8225	; 0x2021
    616a:	f7ff fb51 	bl	5810 <bt_hci_cmd_send>
    616e:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    6170:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6174:	bd70      	pop	{r4, r5, r6, pc}

00006176 <le_conn_param_req_reply>:
{
    6176:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6178:	4607      	mov	r7, r0
    617a:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    617c:	210e      	movs	r1, #14
    617e:	f242 0020 	movw	r0, #8224	; 0x2020
    6182:	f7fe fde7 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    6186:	b1c0      	cbz	r0, 61ba <le_conn_param_req_reply+0x44>
    6188:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    618a:	210e      	movs	r1, #14
    618c:	3008      	adds	r0, #8
    618e:	f014 fe3d 	bl	1ae0c <net_buf_simple_add>
    6192:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    6194:	220e      	movs	r2, #14
    6196:	2100      	movs	r1, #0
    6198:	f024 fbea 	bl	2a970 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    619c:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    619e:	882b      	ldrh	r3, [r5, #0]
    61a0:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    61a2:	886b      	ldrh	r3, [r5, #2]
    61a4:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    61a6:	88ab      	ldrh	r3, [r5, #4]
    61a8:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    61aa:	88eb      	ldrh	r3, [r5, #6]
    61ac:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    61ae:	4631      	mov	r1, r6
    61b0:	f242 0020 	movw	r0, #8224	; 0x2020
    61b4:	f7ff fb2c 	bl	5810 <bt_hci_cmd_send>
    61b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    61ba:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    61be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000061c0 <le_conn_param_req_reply>:
{
    61c0:	b570      	push	{r4, r5, r6, lr}
    61c2:	b082      	sub	sp, #8
    61c4:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    61c6:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    61c8:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    61ca:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    61cc:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    61ce:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    61d0:	9201      	str	r2, [sp, #4]
    61d2:	9100      	str	r1, [sp, #0]
    61d4:	2200      	movs	r2, #0
    61d6:	2102      	movs	r1, #2
    61d8:	b2a0      	uxth	r0, r4
    61da:	f012 f929 	bl	18430 <ll_conn_update>
    61de:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    61e0:	2103      	movs	r1, #3
    61e2:	4630      	mov	r0, r6
    61e4:	f007 f91c 	bl	d420 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    61e8:	b12d      	cbz	r5, 61f6 <le_conn_param_req_reply+0x36>
    61ea:	230c      	movs	r3, #12
    61ec:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    61ee:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    61f2:	b002      	add	sp, #8
    61f4:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    61f6:	2300      	movs	r3, #0
    61f8:	e7f8      	b.n	61ec <le_conn_param_req_reply+0x2c>
	...

000061fc <le_conn_param_req>:
{
    61fc:	b530      	push	{r4, r5, lr}
    61fe:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    6200:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    6202:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    6204:	885a      	ldrh	r2, [r3, #2]
    6206:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    620a:	889a      	ldrh	r2, [r3, #4]
    620c:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    6210:	88da      	ldrh	r2, [r3, #6]
    6212:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    6216:	891b      	ldrh	r3, [r3, #8]
    6218:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    621c:	4620      	mov	r0, r4
    621e:	f001 f84d 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    6222:	b178      	cbz	r0, 6244 <le_conn_param_req+0x48>
    6224:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    6226:	4669      	mov	r1, sp
    6228:	f000 fdf6 	bl	6e18 <le_param_req>
    622c:	b980      	cbnz	r0, 6250 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    622e:	211e      	movs	r1, #30
    6230:	4620      	mov	r0, r4
    6232:	f7ff ff87 	bl	6144 <le_conn_param_neg_reply>
    6236:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    6238:	4628      	mov	r0, r5
    623a:	f001 f8c3 	bl	73c4 <bt_conn_unref>
}
    623e:	4620      	mov	r0, r4
    6240:	b003      	add	sp, #12
    6242:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    6244:	2102      	movs	r1, #2
    6246:	4620      	mov	r0, r4
    6248:	f7ff ff7c 	bl	6144 <le_conn_param_neg_reply>
    624c:	4604      	mov	r4, r0
    624e:	e7f6      	b.n	623e <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    6250:	4669      	mov	r1, sp
    6252:	4620      	mov	r0, r4
    6254:	f7ff ff8f 	bl	6176 <le_conn_param_req_reply>
    6258:	4604      	mov	r4, r0
    625a:	e7ed      	b.n	6238 <le_conn_param_req+0x3c>

0000625c <le_conn_param_req>:
{
    625c:	b530      	push	{r4, r5, lr}
    625e:	b083      	sub	sp, #12
    6260:	4604      	mov	r4, r0
    6262:	460d      	mov	r5, r1
    6264:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6266:	4b14      	ldr	r3, [pc, #80]	; (62b8 <le_conn_param_req+0x5c>)
    6268:	e9d3 2300 	ldrd	r2, r3, [r3]
    626c:	2200      	movs	r2, #0
    626e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    6272:	4313      	orrs	r3, r2
    6274:	d007      	beq.n	6286 <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    6276:	4b11      	ldr	r3, [pc, #68]	; (62bc <le_conn_param_req+0x60>)
    6278:	e9d3 2300 	ldrd	r2, r3, [r3]
    627c:	f002 0220 	and.w	r2, r2, #32
    6280:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6282:	4313      	orrs	r3, r2
    6284:	d109      	bne.n	629a <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    6286:	2300      	movs	r3, #0
    6288:	9301      	str	r3, [sp, #4]
    628a:	9300      	str	r3, [sp, #0]
    628c:	221a      	movs	r2, #26
    628e:	2102      	movs	r1, #2
    6290:	4628      	mov	r0, r5
    6292:	f012 f8cd 	bl	18430 <ll_conn_update>
}
    6296:	b003      	add	sp, #12
    6298:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    629a:	220a      	movs	r2, #10
    629c:	2106      	movs	r1, #6
    629e:	f007 f959 	bl	d554 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    62a2:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    62a4:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    62a6:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    62a8:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    62aa:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    62ac:	8923      	ldrh	r3, [r4, #8]
    62ae:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    62b0:	8963      	ldrh	r3, [r4, #10]
    62b2:	8103      	strh	r3, [r0, #8]
    62b4:	e7ef      	b.n	6296 <le_conn_param_req+0x3a>
    62b6:	bf00      	nop
    62b8:	2000bc70 	.word	0x2000bc70
    62bc:	2000bc78 	.word	0x2000bc78

000062c0 <le_ltk_request>:
{
    62c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    62c2:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    62c4:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    62c6:	8820      	ldrh	r0, [r4, #0]
    62c8:	f000 fff8 	bl	72bc <bt_conn_lookup_handle>
	if (!conn) {
    62cc:	2800      	cmp	r0, #0
    62ce:	d040      	beq.n	6352 <le_ltk_request+0x92>
    62d0:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    62d2:	f8d4 2002 	ldr.w	r2, [r4, #2]
    62d6:	f8d4 3006 	ldr.w	r3, [r4, #6]
    62da:	4313      	orrs	r3, r2
    62dc:	d102      	bne.n	62e4 <le_ltk_request+0x24>
    62de:	8963      	ldrh	r3, [r4, #10]
    62e0:	2b00      	cmp	r3, #0
    62e2:	d038      	beq.n	6356 <le_ltk_request+0x96>
	if (!conn->le.keys) {
    62e4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    62e6:	2b00      	cmp	r3, #0
    62e8:	d053      	beq.n	6392 <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    62ea:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    62ec:	b16b      	cbz	r3, 630a <le_ltk_request+0x4a>
    62ee:	899a      	ldrh	r2, [r3, #12]
    62f0:	f012 0f20 	tst.w	r2, #32
    62f4:	d009      	beq.n	630a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    62f6:	f8d4 0002 	ldr.w	r0, [r4, #2]
    62fa:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    62fe:	ea50 0201 	orrs.w	r2, r0, r1
    6302:	d102      	bne.n	630a <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    6304:	8962      	ldrh	r2, [r4, #10]
    6306:	2a00      	cmp	r2, #0
    6308:	d052      	beq.n	63b0 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    630a:	b16b      	cbz	r3, 6328 <le_ltk_request+0x68>
    630c:	899a      	ldrh	r2, [r3, #12]
    630e:	f012 0f01 	tst.w	r2, #1
    6312:	d009      	beq.n	6328 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    6314:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    6318:	f8d4 6002 	ldr.w	r6, [r4, #2]
    631c:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    6320:	42b9      	cmp	r1, r7
    6322:	bf08      	it	eq
    6324:	42b0      	cmpeq	r0, r6
    6326:	d06a      	beq.n	63fe <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    6328:	2102      	movs	r1, #2
    632a:	f242 001b 	movw	r0, #8219	; 0x201b
    632e:	f7fe fd11 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    6332:	4606      	mov	r6, r0
    6334:	b150      	cbz	r0, 634c <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    6336:	2102      	movs	r1, #2
    6338:	3008      	adds	r0, #8
    633a:	f014 fd67 	bl	1ae0c <net_buf_simple_add>
	cp->handle = evt->handle;
    633e:	8823      	ldrh	r3, [r4, #0]
    6340:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    6342:	4631      	mov	r1, r6
    6344:	f242 001b 	movw	r0, #8219	; 0x201b
    6348:	f7ff fa62 	bl	5810 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    634c:	4628      	mov	r0, r5
    634e:	f001 f839 	bl	73c4 <bt_conn_unref>
}
    6352:	b005      	add	sp, #20
    6354:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    6356:	4669      	mov	r1, sp
    6358:	f006 ff14 	bl	d184 <bt_smp_get_tk>
    635c:	2800      	cmp	r0, #0
    635e:	d0c1      	beq.n	62e4 <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6360:	2112      	movs	r1, #18
    6362:	f242 001a 	movw	r0, #8218	; 0x201a
    6366:	f7fe fcf5 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    636a:	4606      	mov	r6, r0
    636c:	2800      	cmp	r0, #0
    636e:	d0ed      	beq.n	634c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6370:	2112      	movs	r1, #18
    6372:	3008      	adds	r0, #8
    6374:	f014 fd4a 	bl	1ae0c <net_buf_simple_add>
		cp->handle = evt->handle;
    6378:	8823      	ldrh	r3, [r4, #0]
    637a:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    637e:	2210      	movs	r2, #16
    6380:	4669      	mov	r1, sp
    6382:	f7f9 ff9d 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    6386:	4631      	mov	r1, r6
    6388:	f242 001a 	movw	r0, #8218	; 0x201a
    638c:	f7ff fa40 	bl	5810 <bt_hci_cmd_send>
		goto done;
    6390:	e7dc      	b.n	634c <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    6392:	f105 0648 	add.w	r6, r5, #72	; 0x48
    6396:	4631      	mov	r1, r6
    6398:	2020      	movs	r0, #32
    639a:	f006 ff59 	bl	d250 <bt_keys_find>
    639e:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    63a0:	2800      	cmp	r0, #0
    63a2:	d1a2      	bne.n	62ea <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    63a4:	4631      	mov	r1, r6
    63a6:	2001      	movs	r0, #1
    63a8:	f006 ff52 	bl	d250 <bt_keys_find>
    63ac:	6728      	str	r0, [r5, #112]	; 0x70
    63ae:	e79c      	b.n	62ea <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    63b0:	2112      	movs	r1, #18
    63b2:	f242 001a 	movw	r0, #8218	; 0x201a
    63b6:	f7fe fccd 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    63ba:	4606      	mov	r6, r0
    63bc:	2800      	cmp	r0, #0
    63be:	d0c5      	beq.n	634c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    63c0:	2112      	movs	r1, #18
    63c2:	3008      	adds	r0, #8
    63c4:	f014 fd22 	bl	1ae0c <net_buf_simple_add>
		cp->handle = evt->handle;
    63c8:	8823      	ldrh	r3, [r4, #0]
    63ca:	4604      	mov	r4, r0
    63cc:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    63d0:	6f29      	ldr	r1, [r5, #112]	; 0x70
    63d2:	79ca      	ldrb	r2, [r1, #7]
    63d4:	311a      	adds	r1, #26
    63d6:	4620      	mov	r0, r4
    63d8:	f7f9 ff72 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    63dc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    63de:	79d8      	ldrb	r0, [r3, #7]
    63e0:	280f      	cmp	r0, #15
    63e2:	d905      	bls.n	63f0 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    63e4:	4631      	mov	r1, r6
    63e6:	f242 001a 	movw	r0, #8218	; 0x201a
    63ea:	f7ff fa11 	bl	5810 <bt_hci_cmd_send>
		goto done;
    63ee:	e7ad      	b.n	634c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    63f0:	f1c0 0210 	rsb	r2, r0, #16
    63f4:	2100      	movs	r1, #0
    63f6:	4420      	add	r0, r4
    63f8:	f024 faba 	bl	2a970 <memset>
    63fc:	e7f2      	b.n	63e4 <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    63fe:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    6402:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    6404:	429a      	cmp	r2, r3
    6406:	d18f      	bne.n	6328 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    6408:	2112      	movs	r1, #18
    640a:	f242 001a 	movw	r0, #8218	; 0x201a
    640e:	f7fe fca1 	bl	4d54 <bt_hci_cmd_create>
		if (!buf) {
    6412:	4606      	mov	r6, r0
    6414:	2800      	cmp	r0, #0
    6416:	d099      	beq.n	634c <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    6418:	2112      	movs	r1, #18
    641a:	3008      	adds	r0, #8
    641c:	f014 fcf6 	bl	1ae0c <net_buf_simple_add>
		cp->handle = evt->handle;
    6420:	8823      	ldrh	r3, [r4, #0]
    6422:	4604      	mov	r4, r0
    6424:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    6428:	6f29      	ldr	r1, [r5, #112]	; 0x70
    642a:	79ca      	ldrb	r2, [r1, #7]
    642c:	317a      	adds	r1, #122	; 0x7a
    642e:	4620      	mov	r0, r4
    6430:	f7f9 ff46 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    6434:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    6436:	79d8      	ldrb	r0, [r3, #7]
    6438:	280f      	cmp	r0, #15
    643a:	d905      	bls.n	6448 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    643c:	4631      	mov	r1, r6
    643e:	f242 001a 	movw	r0, #8218	; 0x201a
    6442:	f7ff f9e5 	bl	5810 <bt_hci_cmd_send>
		goto done;
    6446:	e781      	b.n	634c <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    6448:	f1c0 0210 	rsb	r2, r0, #16
    644c:	2100      	movs	r1, #0
    644e:	4420      	add	r0, r4
    6450:	f024 fa8e 	bl	2a970 <memset>
    6454:	e7f2      	b.n	643c <le_ltk_request+0x17c>
	...

00006458 <le_ltk_request>:
{
    6458:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    645a:	4b15      	ldr	r3, [pc, #84]	; (64b0 <le_ltk_request+0x58>)
    645c:	e9d3 4500 	ldrd	r4, r5, [r3]
    6460:	2400      	movs	r4, #0
    6462:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    6466:	ea54 0305 	orrs.w	r3, r4, r5
    646a:	d008      	beq.n	647e <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    646c:	4b11      	ldr	r3, [pc, #68]	; (64b4 <le_ltk_request+0x5c>)
    646e:	e9d3 4500 	ldrd	r4, r5, [r3]
    6472:	f004 0410 	and.w	r4, r4, #16
    6476:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    6478:	ea54 0305 	orrs.w	r3, r4, r5
    647c:	d100      	bne.n	6480 <le_ltk_request+0x28>
    647e:	bd70      	pop	{r4, r5, r6, pc}
    6480:	4613      	mov	r3, r2
    6482:	460d      	mov	r5, r1
    6484:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    6486:	220c      	movs	r2, #12
    6488:	2105      	movs	r1, #5
    648a:	4618      	mov	r0, r3
    648c:	f007 f862 	bl	d554 <meta_evt>
    6490:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    6492:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    6496:	2208      	movs	r2, #8
    6498:	1d21      	adds	r1, r4, #4
    649a:	f7f9 ff11 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    649e:	2202      	movs	r2, #2
    64a0:	f104 010c 	add.w	r1, r4, #12
    64a4:	f106 000a 	add.w	r0, r6, #10
    64a8:	f7f9 ff0a 	bl	2c0 <memcpy>
    64ac:	e7e7      	b.n	647e <le_ltk_request+0x26>
    64ae:	bf00      	nop
    64b0:	2000bc70 	.word	0x2000bc70
    64b4:	2000bc78 	.word	0x2000bc78

000064b8 <hci_le_meta_event>:
{
    64b8:	b538      	push	{r3, r4, r5, lr}
    64ba:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    64bc:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    64c0:	2101      	movs	r1, #1
    64c2:	f014 fcf0 	bl	1aea6 <net_buf_simple_pull>
	switch (evt->subevent) {
    64c6:	782b      	ldrb	r3, [r5, #0]
    64c8:	3b01      	subs	r3, #1
    64ca:	2b0b      	cmp	r3, #11
    64cc:	d82e      	bhi.n	652c <hci_le_meta_event+0x74>
    64ce:	e8df f003 	tbb	[pc, r3]
    64d2:	2a06      	.short	0x2a06
    64d4:	121e0e0a 	.word	0x121e0e0a
    64d8:	2d262216 	.word	0x2d262216
    64dc:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    64de:	4620      	mov	r0, r4
    64e0:	f7ff fc14 	bl	5d0c <le_conn_complete>
		break;
    64e4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    64e6:	4620      	mov	r0, r4
    64e8:	f7fe fb52 	bl	4b90 <le_conn_update_complete>
		break;
    64ec:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    64ee:	4620      	mov	r0, r4
    64f0:	f7ff fd66 	bl	5fc0 <le_remote_feat_complete>
		break;
    64f4:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    64f6:	4620      	mov	r0, r4
    64f8:	f7ff fe80 	bl	61fc <le_conn_param_req>
		break;
    64fc:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    64fe:	4620      	mov	r0, r4
    6500:	f7fe fafc 	bl	4afc <le_data_len_change>
		break;
    6504:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    6506:	4620      	mov	r0, r4
    6508:	f7ff fdde 	bl	60c8 <le_phy_update_complete>
		break;
    650c:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    650e:	4620      	mov	r0, r4
    6510:	f7ff fed6 	bl	62c0 <le_ltk_request>
		break;
    6514:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    6516:	4620      	mov	r0, r4
    6518:	f7fe f9f0 	bl	48fc <le_pkey_complete>
		break;
    651c:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    651e:	4620      	mov	r0, r4
    6520:	f7fe f916 	bl	4750 <le_dhkey_complete>
		break;
    6524:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    6526:	4620      	mov	r0, r4
    6528:	f7ff fb3c 	bl	5ba4 <le_adv_report>
    652c:	bd38      	pop	{r3, r4, r5, pc}

0000652e <hci_event>:
{
    652e:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6530:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    6532:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    6534:	2b0e      	cmp	r3, #14
    6536:	d316      	bcc.n	6566 <hci_event+0x38>
    6538:	2b0f      	cmp	r3, #15
    653a:	d901      	bls.n	6540 <hci_event+0x12>
    653c:	2b13      	cmp	r3, #19
    653e:	d112      	bne.n	6566 <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    6540:	2301      	movs	r3, #1
    6542:	b993      	cbnz	r3, 656a <hci_event+0x3c>
    6544:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6546:	2102      	movs	r1, #2
    6548:	3008      	adds	r0, #8
    654a:	f014 fcac 	bl	1aea6 <net_buf_simple_pull>
	switch (hdr->evt) {
    654e:	782b      	ldrb	r3, [r5, #0]
    6550:	2b08      	cmp	r3, #8
    6552:	d019      	beq.n	6588 <hci_event+0x5a>
    6554:	d90f      	bls.n	6576 <hci_event+0x48>
    6556:	2b30      	cmp	r3, #48	; 0x30
    6558:	d01a      	beq.n	6590 <hci_event+0x62>
    655a:	2b3e      	cmp	r3, #62	; 0x3e
    655c:	d110      	bne.n	6580 <hci_event+0x52>
		hci_le_meta_event(buf);
    655e:	4620      	mov	r0, r4
    6560:	f7ff ffaa 	bl	64b8 <hci_le_meta_event>
		break;
    6564:	e00c      	b.n	6580 <hci_event+0x52>
	default:
		return false;
    6566:	2300      	movs	r3, #0
    6568:	e7eb      	b.n	6542 <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    656a:	4040      	eors	r0, r0
    656c:	f380 8811 	msr	BASEPRI, r0
    6570:	f04f 0004 	mov.w	r0, #4
    6574:	df02      	svc	2
	switch (hdr->evt) {
    6576:	2b05      	cmp	r3, #5
    6578:	d102      	bne.n	6580 <hci_event+0x52>
		hci_disconn_complete(buf);
    657a:	4620      	mov	r0, r4
    657c:	f7ff fa54 	bl	5a28 <hci_disconn_complete>
	net_buf_unref(buf);
    6580:	4620      	mov	r0, r4
    6582:	f014 fbf7 	bl	1ad74 <net_buf_unref>
    6586:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    6588:	4620      	mov	r0, r4
    658a:	f7fe fa56 	bl	4a3a <hci_encrypt_change>
		break;
    658e:	e7f7      	b.n	6580 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    6590:	4620      	mov	r0, r4
    6592:	f7fe fa7a 	bl	4a8a <hci_encrypt_key_refresh_complete>
		break;
    6596:	e7f3      	b.n	6580 <hci_event+0x52>

00006598 <send_cmd>:
{
    6598:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    659a:	2100      	movs	r1, #0
    659c:	4820      	ldr	r0, [pc, #128]	; (6620 <send_cmd+0x88>)
    659e:	f014 fbbc 	bl	1ad1a <net_buf_get>
	BT_ASSERT(buf);
    65a2:	b1d0      	cbz	r0, 65da <send_cmd+0x42>
    65a4:	4604      	mov	r4, r0
    65a6:	4d1f      	ldr	r5, [pc, #124]	; (6624 <send_cmd+0x8c>)
    65a8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    65ac:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    65b0:	f022 ff3e 	bl	29430 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    65b4:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    65b8:	b120      	cbz	r0, 65c4 <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    65ba:	f014 fbdb 	bl	1ad74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    65be:	2200      	movs	r2, #0
    65c0:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    65c4:	4620      	mov	r0, r4
    65c6:	f014 fbf1 	bl	1adac <net_buf_ref>
    65ca:	4b16      	ldr	r3, [pc, #88]	; (6624 <send_cmd+0x8c>)
    65cc:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    65d0:	4620      	mov	r0, r4
    65d2:	f7ff f913 	bl	57fc <bt_send>
	if (err) {
    65d6:	b930      	cbnz	r0, 65e6 <send_cmd+0x4e>
    65d8:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    65da:	4040      	eors	r0, r0
    65dc:	f380 8811 	msr	BASEPRI, r0
    65e0:	f04f 0004 	mov.w	r0, #4
    65e4:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    65e6:	4d0f      	ldr	r5, [pc, #60]	; (6624 <send_cmd+0x8c>)
    65e8:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    65ec:	f022 ff0d 	bl	2940a <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    65f0:	f104 0310 	add.w	r3, r4, #16
    65f4:	89e2      	ldrh	r2, [r4, #14]
    65f6:	4413      	add	r3, r2
    65f8:	3303      	adds	r3, #3
    65fa:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    65fe:	2200      	movs	r2, #0
    6600:	211f      	movs	r1, #31
    6602:	8858      	ldrh	r0, [r3, #2]
    6604:	f7fe fb10 	bl	4c28 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    6608:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    660c:	f014 fbb2 	bl	1ad74 <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    6610:	2300      	movs	r3, #0
    6612:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    6616:	4620      	mov	r0, r4
    6618:	f014 fbac 	bl	1ad74 <net_buf_unref>
}
    661c:	e7dc      	b.n	65d8 <send_cmd+0x40>
    661e:	bf00      	nop
    6620:	2000ba54 	.word	0x2000ba54
    6624:	2000b980 	.word	0x2000b980

00006628 <process_events>:
{
    6628:	b538      	push	{r3, r4, r5, lr}
    662a:	4604      	mov	r4, r0
    662c:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    662e:	e003      	b.n	6638 <process_events+0x10>
				send_cmd();
    6630:	f7ff ffb2 	bl	6598 <send_cmd>
	for (; count; ev++, count--) {
    6634:	3414      	adds	r4, #20
    6636:	3d01      	subs	r5, #1
    6638:	b1a5      	cbz	r5, 6664 <process_events+0x3c>
		switch (ev->state) {
    663a:	7b63      	ldrb	r3, [r4, #13]
    663c:	091b      	lsrs	r3, r3, #4
    663e:	2b04      	cmp	r3, #4
    6640:	d1f8      	bne.n	6634 <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    6642:	7b23      	ldrb	r3, [r4, #12]
    6644:	2b00      	cmp	r3, #0
    6646:	d0f3      	beq.n	6630 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    6648:	2b01      	cmp	r3, #1
    664a:	d006      	beq.n	665a <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    664c:	2b02      	cmp	r3, #2
    664e:	d1f1      	bne.n	6634 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    6650:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    6652:	382c      	subs	r0, #44	; 0x2c
    6654:	f001 f9c8 	bl	79e8 <bt_conn_process_tx>
    6658:	e7ec      	b.n	6634 <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    665a:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    665c:	381c      	subs	r0, #28
    665e:	f000 fd65 	bl	712c <bt_conn_notify_tx>
    6662:	e7e7      	b.n	6634 <process_events+0xc>
}
    6664:	bd38      	pop	{r3, r4, r5, pc}
	...

00006668 <hci_tx_thread>:
{
    6668:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    666a:	4c0f      	ldr	r4, [pc, #60]	; (66a8 <hci_tx_thread+0x40>)
    666c:	7b63      	ldrb	r3, [r4, #13]
    666e:	f36f 1307 	bfc	r3, #4, #4
    6672:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    6674:	f104 0014 	add.w	r0, r4, #20
    6678:	f000 feca 	bl	7410 <bt_conn_prepare_events>
    667c:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    667e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    6682:	4629      	mov	r1, r5
    6684:	4620      	mov	r0, r4
    6686:	f022 f81f 	bl	286c8 <k_poll>
		BT_ASSERT(err == 0);
    668a:	b930      	cbnz	r0, 669a <hci_tx_thread+0x32>
		process_events(events, ev_count);
    668c:	4629      	mov	r1, r5
    668e:	4806      	ldr	r0, [pc, #24]	; (66a8 <hci_tx_thread+0x40>)
    6690:	f7ff ffca 	bl	6628 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    6694:	f022 fd60 	bl	29158 <_impl_k_yield>
    6698:	e7e7      	b.n	666a <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    669a:	4040      	eors	r0, r0
    669c:	f380 8811 	msr	BASEPRI, r0
    66a0:	f04f 0004 	mov.w	r0, #4
    66a4:	df02      	svc	2
    66a6:	bf00      	nop
    66a8:	2000ba68 	.word	0x2000ba68

000066ac <bt_recv>:
{
    66ac:	b510      	push	{r4, lr}
    66ae:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    66b0:	7980      	ldrb	r0, [r0, #6]
    66b2:	f014 fae5 	bl	1ac80 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    66b6:	8ac3      	ldrh	r3, [r0, #22]
    66b8:	2b03      	cmp	r3, #3
    66ba:	d910      	bls.n	66de <bt_recv+0x32>
    66bc:	f104 0310 	add.w	r3, r4, #16
    66c0:	89e2      	ldrh	r2, [r4, #14]
    66c2:	4413      	add	r3, r2
    66c4:	3303      	adds	r3, #3
    66c6:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    66ca:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    66cc:	2b01      	cmp	r3, #1
    66ce:	d00c      	beq.n	66ea <bt_recv+0x3e>
    66d0:	2b03      	cmp	r3, #3
    66d2:	d10f      	bne.n	66f4 <bt_recv+0x48>
		hci_acl(buf);
    66d4:	4620      	mov	r0, r4
    66d6:	f7fe f949 	bl	496c <hci_acl>
		return 0;
    66da:	2000      	movs	r0, #0
    66dc:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    66de:	4620      	mov	r0, r4
    66e0:	f014 fb48 	bl	1ad74 <net_buf_unref>
		return -EINVAL;
    66e4:	f06f 0015 	mvn.w	r0, #21
    66e8:	bd10      	pop	{r4, pc}
		hci_event(buf);
    66ea:	4620      	mov	r0, r4
    66ec:	f7ff ff1f 	bl	652e <hci_event>
		return 0;
    66f0:	2000      	movs	r0, #0
    66f2:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    66f4:	4620      	mov	r0, r4
    66f6:	f014 fb3d 	bl	1ad74 <net_buf_unref>
		return -EINVAL;
    66fa:	f06f 0015 	mvn.w	r0, #21
}
    66fe:	bd10      	pop	{r4, pc}

00006700 <bt_recv_prio>:
{
    6700:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    6702:	6885      	ldr	r5, [r0, #8]
    6704:	f100 0310 	add.w	r3, r0, #16
    6708:	89c2      	ldrh	r2, [r0, #14]
    670a:	4413      	add	r3, r2
    670c:	3303      	adds	r3, #3
    670e:	f023 0303 	bic.w	r3, r3, #3
    6712:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    6714:	2b01      	cmp	r3, #1
    6716:	d120      	bne.n	675a <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6718:	8983      	ldrh	r3, [r0, #12]
    671a:	2b01      	cmp	r3, #1
    671c:	d923      	bls.n	6766 <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    671e:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    6720:	2b0e      	cmp	r3, #14
    6722:	d326      	bcc.n	6772 <bt_recv_prio+0x72>
    6724:	2b0f      	cmp	r3, #15
    6726:	d901      	bls.n	672c <bt_recv_prio+0x2c>
    6728:	2b13      	cmp	r3, #19
    672a:	d122      	bne.n	6772 <bt_recv_prio+0x72>
		return true;
    672c:	2301      	movs	r3, #1
    672e:	b313      	cbz	r3, 6776 <bt_recv_prio+0x76>
    6730:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    6732:	2102      	movs	r1, #2
    6734:	3008      	adds	r0, #8
    6736:	f014 fbb6 	bl	1aea6 <net_buf_simple_pull>
	switch (hdr->evt) {
    673a:	782b      	ldrb	r3, [r5, #0]
    673c:	2b0f      	cmp	r3, #15
    673e:	d028      	beq.n	6792 <bt_recv_prio+0x92>
    6740:	2b13      	cmp	r3, #19
    6742:	d02a      	beq.n	679a <bt_recv_prio+0x9a>
    6744:	2b0e      	cmp	r3, #14
    6746:	d01c      	beq.n	6782 <bt_recv_prio+0x82>
		net_buf_unref(buf);
    6748:	4620      	mov	r0, r4
    674a:	f014 fb13 	bl	1ad74 <net_buf_unref>
		BT_ASSERT(0);
    674e:	4040      	eors	r0, r0
    6750:	f380 8811 	msr	BASEPRI, r0
    6754:	f04f 0004 	mov.w	r0, #4
    6758:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    675a:	4040      	eors	r0, r0
    675c:	f380 8811 	msr	BASEPRI, r0
    6760:	f04f 0004 	mov.w	r0, #4
    6764:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    6766:	4040      	eors	r0, r0
    6768:	f380 8811 	msr	BASEPRI, r0
    676c:	f04f 0004 	mov.w	r0, #4
    6770:	df02      	svc	2
		return false;
    6772:	2300      	movs	r3, #0
    6774:	e7db      	b.n	672e <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    6776:	4040      	eors	r0, r0
    6778:	f380 8811 	msr	BASEPRI, r0
    677c:	f04f 0004 	mov.w	r0, #4
    6780:	df02      	svc	2
		hci_cmd_complete(buf);
    6782:	4620      	mov	r0, r4
    6784:	f7fe fa70 	bl	4c68 <hci_cmd_complete>
	net_buf_unref(buf);
    6788:	4620      	mov	r0, r4
    678a:	f014 faf3 	bl	1ad74 <net_buf_unref>
}
    678e:	2000      	movs	r0, #0
    6790:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    6792:	4620      	mov	r0, r4
    6794:	f7fe fa80 	bl	4c98 <hci_cmd_status>
		break;
    6798:	e7f6      	b.n	6788 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    679a:	4620      	mov	r0, r4
    679c:	f7fe fa92 	bl	4cc4 <hci_num_completed_packets>
		break;
    67a0:	e7f2      	b.n	6788 <bt_recv_prio+0x88>
	...

000067a4 <bt_hci_driver_register>:
	if (bt_dev.drv) {
    67a4:	4b0a      	ldr	r3, [pc, #40]	; (67d0 <bt_hci_driver_register+0x2c>)
    67a6:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    67aa:	b943      	cbnz	r3, 67be <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    67ac:	6883      	ldr	r3, [r0, #8]
    67ae:	b14b      	cbz	r3, 67c4 <bt_hci_driver_register+0x20>
    67b0:	68c3      	ldr	r3, [r0, #12]
    67b2:	b153      	cbz	r3, 67ca <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    67b4:	4b06      	ldr	r3, [pc, #24]	; (67d0 <bt_hci_driver_register+0x2c>)
    67b6:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    67ba:	2000      	movs	r0, #0
    67bc:	4770      	bx	lr
		return -EALREADY;
    67be:	f06f 0077 	mvn.w	r0, #119	; 0x77
    67c2:	4770      	bx	lr
		return -EINVAL;
    67c4:	f06f 0015 	mvn.w	r0, #21
    67c8:	4770      	bx	lr
    67ca:	f06f 0015 	mvn.w	r0, #21
}
    67ce:	4770      	bx	lr
    67d0:	2000b980 	.word	0x2000b980

000067d4 <bt_enable>:
{
    67d4:	b530      	push	{r4, r5, lr}
    67d6:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    67d8:	4b29      	ldr	r3, [pc, #164]	; (6880 <bt_enable+0xac>)
    67da:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    67de:	2b00      	cmp	r3, #0
    67e0:	d047      	beq.n	6872 <bt_enable+0x9e>
    67e2:	4b28      	ldr	r3, [pc, #160]	; (6884 <bt_enable+0xb0>)
    67e4:	f3bf 8f5b 	dmb	ish
    67e8:	e853 2f00 	ldrex	r2, [r3]
    67ec:	f042 0101 	orr.w	r1, r2, #1
    67f0:	e843 1400 	strex	r4, r1, [r3]
    67f4:	2c00      	cmp	r4, #0
    67f6:	d1f7      	bne.n	67e8 <bt_enable+0x14>
    67f8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    67fc:	f012 0f01 	tst.w	r2, #1
    6800:	d13a      	bne.n	6878 <bt_enable+0xa4>
    6802:	4604      	mov	r4, r0
	ready_cb = cb;
    6804:	4b20      	ldr	r3, [pc, #128]	; (6888 <bt_enable+0xb4>)
    6806:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    6808:	2300      	movs	r3, #0
    680a:	9305      	str	r3, [sp, #20]
    680c:	9304      	str	r3, [sp, #16]
    680e:	f06f 0208 	mvn.w	r2, #8
    6812:	9203      	str	r2, [sp, #12]
    6814:	9302      	str	r3, [sp, #8]
    6816:	9301      	str	r3, [sp, #4]
    6818:	9300      	str	r3, [sp, #0]
    681a:	4b1c      	ldr	r3, [pc, #112]	; (688c <bt_enable+0xb8>)
    681c:	f44f 7220 	mov.w	r2, #640	; 0x280
    6820:	491b      	ldr	r1, [pc, #108]	; (6890 <bt_enable+0xbc>)
    6822:	481c      	ldr	r0, [pc, #112]	; (6894 <bt_enable+0xc0>)
    6824:	f023 f870 	bl	29908 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    6828:	4b15      	ldr	r3, [pc, #84]	; (6880 <bt_enable+0xac>)
    682a:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    682e:	689b      	ldr	r3, [r3, #8]
    6830:	4798      	blx	r3
	if (err) {
    6832:	4605      	mov	r5, r0
    6834:	b980      	cbnz	r0, 6858 <bt_enable+0x84>
	if (!cb) {
    6836:	b194      	cbz	r4, 685e <bt_enable+0x8a>
    6838:	4b17      	ldr	r3, [pc, #92]	; (6898 <bt_enable+0xc4>)
    683a:	f3bf 8f5b 	dmb	ish
    683e:	e853 2f00 	ldrex	r2, [r3]
    6842:	f042 0101 	orr.w	r1, r2, #1
    6846:	e843 1000 	strex	r0, r1, [r3]
    684a:	2800      	cmp	r0, #0
    684c:	d1f7      	bne.n	683e <bt_enable+0x6a>
    684e:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    6852:	f012 0f01 	tst.w	r2, #1
    6856:	d006      	beq.n	6866 <bt_enable+0x92>
}
    6858:	4628      	mov	r0, r5
    685a:	b007      	add	sp, #28
    685c:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    685e:	f7ff f8bb 	bl	59d8 <bt_init>
    6862:	4605      	mov	r5, r0
    6864:	e7f8      	b.n	6858 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    6866:	f1a3 0108 	sub.w	r1, r3, #8
    686a:	480c      	ldr	r0, [pc, #48]	; (689c <bt_enable+0xc8>)
    686c:	f022 fa36 	bl	28cdc <k_queue_append>
    6870:	e7f2      	b.n	6858 <bt_enable+0x84>
		return -ENODEV;
    6872:	f06f 0512 	mvn.w	r5, #18
    6876:	e7ef      	b.n	6858 <bt_enable+0x84>
		return -EALREADY;
    6878:	f06f 0577 	mvn.w	r5, #119	; 0x77
    687c:	e7ec      	b.n	6858 <bt_enable+0x84>
    687e:	bf00      	nop
    6880:	2000b980 	.word	0x2000b980
    6884:	2000b9f0 	.word	0x2000b9f0
    6888:	20000428 	.word	0x20000428
    688c:	00006669 	.word	0x00006669
    6890:	20003d18 	.word	0x20003d18
    6894:	20000430 	.word	0x20000430
    6898:	2000b9ec 	.word	0x2000b9ec
    689c:	20002c78 	.word	0x20002c78

000068a0 <bt_addr_le_is_bonded>:
{
    68a0:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    68a2:	f006 fd51 	bl	d348 <bt_keys_find_addr>
		return keys && keys->keys;
    68a6:	b118      	cbz	r0, 68b0 <bt_addr_le_is_bonded+0x10>
    68a8:	8983      	ldrh	r3, [r0, #12]
    68aa:	b91b      	cbnz	r3, 68b4 <bt_addr_le_is_bonded+0x14>
    68ac:	2000      	movs	r0, #0
    68ae:	bd08      	pop	{r3, pc}
    68b0:	2000      	movs	r0, #0
    68b2:	bd08      	pop	{r3, pc}
    68b4:	2001      	movs	r0, #1
}
    68b6:	bd08      	pop	{r3, pc}

000068b8 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    68b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    68bc:	4605      	mov	r5, r0
    68be:	460c      	mov	r4, r1
    68c0:	4617      	mov	r7, r2
    68c2:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    68c4:	f7fd ff88 	bl	47d8 <valid_adv_param>
    68c8:	2800      	cmp	r0, #0
    68ca:	f000 808d 	beq.w	69e8 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    68ce:	f3bf 8f5b 	dmb	ish
    68d2:	4b4b      	ldr	r3, [pc, #300]	; (6a00 <bt_le_adv_start+0x148>)
    68d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    68d6:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    68da:	f013 0f20 	tst.w	r3, #32
    68de:	f040 8086 	bne.w	69ee <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    68e2:	463a      	mov	r2, r7
    68e4:	4621      	mov	r1, r4
    68e6:	f242 0008 	movw	r0, #8200	; 0x2008
    68ea:	f7fe fe52 	bl	5592 <set_ad>
	if (err) {
    68ee:	4604      	mov	r4, r0
    68f0:	2800      	cmp	r0, #0
    68f2:	d13b      	bne.n	696c <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    68f4:	2e00      	cmp	r6, #0
    68f6:	d03c      	beq.n	6972 <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    68f8:	9a06      	ldr	r2, [sp, #24]
    68fa:	4631      	mov	r1, r6
    68fc:	f242 0009 	movw	r0, #8201	; 0x2009
    6900:	f7fe fe47 	bl	5592 <set_ad>
		if (err) {
    6904:	4604      	mov	r4, r0
    6906:	bb88      	cbnz	r0, 696c <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    6908:	210f      	movs	r1, #15
    690a:	f242 0006 	movw	r0, #8198	; 0x2006
    690e:	f7fe fa21 	bl	4d54 <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    6912:	4680      	mov	r8, r0
    6914:	2800      	cmp	r0, #0
    6916:	d06d      	beq.n	69f4 <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    6918:	210f      	movs	r1, #15
    691a:	3008      	adds	r0, #8
    691c:	f014 fa76 	bl	1ae0c <net_buf_simple_add>
    6920:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    6922:	220f      	movs	r2, #15
    6924:	2100      	movs	r1, #0
    6926:	f024 f823 	bl	2a970 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    692a:	886b      	ldrh	r3, [r5, #2]
    692c:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    692e:	88ab      	ldrh	r3, [r5, #4]
    6930:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    6932:	2307      	movs	r3, #7
    6934:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    6936:	782b      	ldrb	r3, [r5, #0]
    6938:	f013 0f01 	tst.w	r3, #1
    693c:	d11e      	bne.n	697c <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    693e:	68a8      	ldr	r0, [r5, #8]
    6940:	b378      	cbz	r0, 69a2 <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    6942:	7943      	ldrb	r3, [r0, #5]
    6944:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    6948:	d157      	bne.n	69fa <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    694a:	f7fe fd0b 	bl	5364 <set_random_address>
    694e:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    6950:	bb5c      	cbnz	r4, 69aa <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    6952:	2301      	movs	r3, #1
    6954:	717b      	strb	r3, [r7, #5]

		if (sd) {
    6956:	b366      	cbz	r6, 69b2 <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    6958:	2302      	movs	r3, #2
    695a:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    695c:	2200      	movs	r2, #0
    695e:	4641      	mov	r1, r8
    6960:	f242 0006 	movw	r0, #8198	; 0x2006
    6964:	f7fe fa22 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    6968:	4604      	mov	r4, r0
    696a:	b328      	cbz	r0, 69b8 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    696c:	4620      	mov	r0, r4
    696e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    6972:	782b      	ldrb	r3, [r5, #0]
    6974:	f013 0f01 	tst.w	r3, #1
    6978:	d0c6      	beq.n	6908 <bt_le_adv_start+0x50>
    697a:	e7bd      	b.n	68f8 <bt_le_adv_start+0x40>
    697c:	f3bf 8f5b 	dmb	ish
    6980:	4b1f      	ldr	r3, [pc, #124]	; (6a00 <bt_le_adv_start+0x148>)
    6982:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6984:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    6988:	f013 0f04 	tst.w	r3, #4
    698c:	d105      	bne.n	699a <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    698e:	4b1c      	ldr	r3, [pc, #112]	; (6a00 <bt_le_adv_start+0x148>)
    6990:	781b      	ldrb	r3, [r3, #0]
    6992:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    6994:	2300      	movs	r3, #0
    6996:	713b      	strb	r3, [r7, #4]
    6998:	e7e0      	b.n	695c <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    699a:	481a      	ldr	r0, [pc, #104]	; (6a04 <bt_le_adv_start+0x14c>)
    699c:	f7fe fce2 	bl	5364 <set_random_address>
    69a0:	e7f5      	b.n	698e <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    69a2:	f7fe fd0f 	bl	53c4 <le_set_private_addr>
    69a6:	4604      	mov	r4, r0
    69a8:	e7d2      	b.n	6950 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    69aa:	4640      	mov	r0, r8
    69ac:	f014 f9e2 	bl	1ad74 <net_buf_unref>
			return err;
    69b0:	e7dc      	b.n	696c <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    69b2:	2303      	movs	r3, #3
    69b4:	713b      	strb	r3, [r7, #4]
    69b6:	e7d1      	b.n	695c <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    69b8:	2001      	movs	r0, #1
    69ba:	f7fe fd71 	bl	54a0 <set_advertise_enable>
	if (err) {
    69be:	4604      	mov	r4, r0
    69c0:	2800      	cmp	r0, #0
    69c2:	d1d3      	bne.n	696c <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    69c4:	782b      	ldrb	r3, [r5, #0]
    69c6:	f013 0f02 	tst.w	r3, #2
    69ca:	d1cf      	bne.n	696c <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    69cc:	4b0e      	ldr	r3, [pc, #56]	; (6a08 <bt_le_adv_start+0x150>)
    69ce:	f3bf 8f5b 	dmb	ish
    69d2:	e853 2f00 	ldrex	r2, [r3]
    69d6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    69da:	e843 2100 	strex	r1, r2, [r3]
    69de:	2900      	cmp	r1, #0
    69e0:	d1f7      	bne.n	69d2 <bt_le_adv_start+0x11a>
    69e2:	f3bf 8f5b 	dmb	ish
    69e6:	e7c1      	b.n	696c <bt_le_adv_start+0xb4>
		return -EINVAL;
    69e8:	f06f 0415 	mvn.w	r4, #21
    69ec:	e7be      	b.n	696c <bt_le_adv_start+0xb4>
		return -EALREADY;
    69ee:	f06f 0477 	mvn.w	r4, #119	; 0x77
    69f2:	e7bb      	b.n	696c <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    69f4:	f06f 0468 	mvn.w	r4, #104	; 0x68
    69f8:	e7b8      	b.n	696c <bt_le_adv_start+0xb4>
				return -EINVAL;
    69fa:	f06f 0415 	mvn.w	r4, #21
    69fe:	e7b5      	b.n	696c <bt_le_adv_start+0xb4>
    6a00:	2000b980 	.word	0x2000b980
    6a04:	2000b981 	.word	0x2000b981
    6a08:	2000b9f0 	.word	0x2000b9f0

00006a0c <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    6a0c:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a0e:	4b16      	ldr	r3, [pc, #88]	; (6a68 <bt_le_adv_stop+0x5c>)
    6a10:	f103 0270 	add.w	r2, r3, #112	; 0x70
    6a14:	f3bf 8f5b 	dmb	ish
    6a18:	e852 1f00 	ldrex	r1, [r2]
    6a1c:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    6a20:	e842 1000 	strex	r0, r1, [r2]
    6a24:	2800      	cmp	r0, #0
    6a26:	d1f7      	bne.n	6a18 <bt_le_adv_stop+0xc>
    6a28:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a2c:	f3bf 8f5b 	dmb	ish
    6a30:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    6a32:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6a36:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6a3a:	b90c      	cbnz	r4, 6a40 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    6a3c:	4620      	mov	r0, r4
    6a3e:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6a40:	2000      	movs	r0, #0
    6a42:	f7fe fd2d 	bl	54a0 <set_advertise_enable>
	if (err) {
    6a46:	4604      	mov	r4, r0
    6a48:	2800      	cmp	r0, #0
    6a4a:	d1f7      	bne.n	6a3c <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a4c:	f3bf 8f5b 	dmb	ish
    6a50:	4b05      	ldr	r3, [pc, #20]	; (6a68 <bt_le_adv_stop+0x5c>)
    6a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6a54:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6a58:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    6a5c:	b90b      	cbnz	r3, 6a62 <bt_le_adv_stop+0x56>
	return 0;
    6a5e:	461c      	mov	r4, r3
    6a60:	e7ec      	b.n	6a3c <bt_le_adv_stop+0x30>
			le_set_private_addr();
    6a62:	f7fe fcaf 	bl	53c4 <le_set_private_addr>
    6a66:	e7e9      	b.n	6a3c <bt_le_adv_stop+0x30>
    6a68:	2000b980 	.word	0x2000b980

00006a6c <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    6a6c:	b538      	push	{r3, r4, r5, lr}
    6a6e:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6a70:	4808      	ldr	r0, [pc, #32]	; (6a94 <bt_buf_get_rx+0x28>)
    6a72:	f014 f911 	bl	1ac98 <net_buf_alloc>
#endif

	if (buf) {
    6a76:	4604      	mov	r4, r0
    6a78:	b150      	cbz	r0, 6a90 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6a7a:	2100      	movs	r1, #0
    6a7c:	f014 f967 	bl	1ad4e <net_buf_reserve>
    6a80:	f104 0310 	add.w	r3, r4, #16
    6a84:	89e2      	ldrh	r2, [r4, #14]
    6a86:	4413      	add	r3, r2
    6a88:	3303      	adds	r3, #3
    6a8a:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    6a8e:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6a90:	4620      	mov	r0, r4
    6a92:	bd38      	pop	{r3, r4, r5, pc}
    6a94:	2000d240 	.word	0x2000d240

00006a98 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    6a98:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6a9a:	f04f 0320 	mov.w	r3, #32
    6a9e:	f3ef 8211 	mrs	r2, BASEPRI
    6aa2:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    6aa6:	4b0f      	ldr	r3, [pc, #60]	; (6ae4 <bt_buf_get_cmd_complete+0x4c>)
    6aa8:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    6aac:	2500      	movs	r5, #0
    6aae:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6ab2:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    6ab6:	b17c      	cbz	r4, 6ad8 <bt_buf_get_cmd_complete+0x40>
    6ab8:	f104 0310 	add.w	r3, r4, #16
    6abc:	89e2      	ldrh	r2, [r4, #14]
    6abe:	4413      	add	r3, r2
    6ac0:	3303      	adds	r3, #3
    6ac2:	f023 0303 	bic.w	r3, r3, #3
    6ac6:	2201      	movs	r2, #1
    6ac8:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    6aca:	4629      	mov	r1, r5
    6acc:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6ace:	4620      	mov	r0, r4
    6ad0:	f014 f93d 	bl	1ad4e <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    6ad4:	4620      	mov	r0, r4
    6ad6:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    6ad8:	4601      	mov	r1, r0
    6ada:	2001      	movs	r0, #1
    6adc:	f7ff ffc6 	bl	6a6c <bt_buf_get_rx>
    6ae0:	4604      	mov	r4, r0
    6ae2:	e7f7      	b.n	6ad4 <bt_buf_get_cmd_complete+0x3c>
    6ae4:	2000b980 	.word	0x2000b980

00006ae8 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    6ae8:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    6aea:	4b29      	ldr	r3, [pc, #164]	; (6b90 <bt_pub_key_gen+0xa8>)
    6aec:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    6af0:	f003 0306 	and.w	r3, r3, #6
    6af4:	2b06      	cmp	r3, #6
    6af6:	d148      	bne.n	6b8a <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    6af8:	4b26      	ldr	r3, [pc, #152]	; (6b94 <bt_pub_key_gen+0xac>)
    6afa:	681a      	ldr	r2, [r3, #0]
    6afc:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    6afe:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b00:	4b25      	ldr	r3, [pc, #148]	; (6b98 <bt_pub_key_gen+0xb0>)
    6b02:	f3bf 8f5b 	dmb	ish
    6b06:	e853 2f00 	ldrex	r2, [r3]
    6b0a:	f042 0110 	orr.w	r1, r2, #16
    6b0e:	e843 1400 	strex	r4, r1, [r3]
    6b12:	2c00      	cmp	r4, #0
    6b14:	d1f7      	bne.n	6b06 <bt_pub_key_gen+0x1e>
    6b16:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6b1a:	f012 0f10 	tst.w	r2, #16
    6b1e:	d002      	beq.n	6b26 <bt_pub_key_gen+0x3e>
		return 0;
    6b20:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    6b22:	4630      	mov	r0, r6
    6b24:	bd70      	pop	{r4, r5, r6, pc}
    6b26:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6b28:	f3bf 8f5b 	dmb	ish
    6b2c:	e853 2f00 	ldrex	r2, [r3]
    6b30:	f022 0208 	bic.w	r2, r2, #8
    6b34:	e843 2100 	strex	r1, r2, [r3]
    6b38:	2900      	cmp	r1, #0
    6b3a:	d1f7      	bne.n	6b2c <bt_pub_key_gen+0x44>
    6b3c:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6b40:	2200      	movs	r2, #0
    6b42:	4611      	mov	r1, r2
    6b44:	f242 0025 	movw	r0, #8229	; 0x2025
    6b48:	f7fe f930 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    6b4c:	4606      	mov	r6, r0
    6b4e:	b910      	cbnz	r0, 6b56 <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6b50:	4b10      	ldr	r3, [pc, #64]	; (6b94 <bt_pub_key_gen+0xac>)
    6b52:	681c      	ldr	r4, [r3, #0]
    6b54:	e011      	b.n	6b7a <bt_pub_key_gen+0x92>
    6b56:	4b10      	ldr	r3, [pc, #64]	; (6b98 <bt_pub_key_gen+0xb0>)
    6b58:	f3bf 8f5b 	dmb	ish
    6b5c:	e853 2f00 	ldrex	r2, [r3]
    6b60:	f022 0210 	bic.w	r2, r2, #16
    6b64:	e843 2100 	strex	r1, r2, [r3]
    6b68:	2900      	cmp	r1, #0
    6b6a:	d1f7      	bne.n	6b5c <bt_pub_key_gen+0x74>
    6b6c:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6b70:	2200      	movs	r2, #0
    6b72:	4b08      	ldr	r3, [pc, #32]	; (6b94 <bt_pub_key_gen+0xac>)
    6b74:	601a      	str	r2, [r3, #0]
		return err;
    6b76:	e7d4      	b.n	6b22 <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6b78:	6864      	ldr	r4, [r4, #4]
    6b7a:	2c00      	cmp	r4, #0
    6b7c:	d0d1      	beq.n	6b22 <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    6b7e:	42ac      	cmp	r4, r5
    6b80:	d0fa      	beq.n	6b78 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    6b82:	6823      	ldr	r3, [r4, #0]
    6b84:	2000      	movs	r0, #0
    6b86:	4798      	blx	r3
    6b88:	e7f6      	b.n	6b78 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    6b8a:	f06f 0685 	mvn.w	r6, #133	; 0x85
    6b8e:	e7c8      	b.n	6b22 <bt_pub_key_gen+0x3a>
    6b90:	2000b980 	.word	0x2000b980
    6b94:	20000424 	.word	0x20000424
    6b98:	2000b9f0 	.word	0x2000b9f0

00006b9c <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6b9c:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6b9e:	4b21      	ldr	r3, [pc, #132]	; (6c24 <bt_dh_key_gen+0x88>)
    6ba0:	681b      	ldr	r3, [r3, #0]
    6ba2:	bbab      	cbnz	r3, 6c10 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6ba4:	f3bf 8f5b 	dmb	ish
    6ba8:	4b1f      	ldr	r3, [pc, #124]	; (6c28 <bt_dh_key_gen+0x8c>)
    6baa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6bac:	f3bf 8f5b 	dmb	ish
    6bb0:	f013 0f10 	tst.w	r3, #16
    6bb4:	d130      	bne.n	6c18 <bt_dh_key_gen+0x7c>
    6bb6:	f3bf 8f5b 	dmb	ish
    6bba:	4b1b      	ldr	r3, [pc, #108]	; (6c28 <bt_dh_key_gen+0x8c>)
    6bbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6bbe:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    6bc2:	f013 0f08 	tst.w	r3, #8
    6bc6:	d02a      	beq.n	6c1e <bt_dh_key_gen+0x82>
    6bc8:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    6bca:	4b16      	ldr	r3, [pc, #88]	; (6c24 <bt_dh_key_gen+0x88>)
    6bcc:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    6bce:	2140      	movs	r1, #64	; 0x40
    6bd0:	f242 0026 	movw	r0, #8230	; 0x2026
    6bd4:	f7fe f8be 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    6bd8:	4605      	mov	r5, r0
    6bda:	b198      	cbz	r0, 6c04 <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    6bdc:	2140      	movs	r1, #64	; 0x40
    6bde:	3008      	adds	r0, #8
    6be0:	f014 f914 	bl	1ae0c <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    6be4:	2240      	movs	r2, #64	; 0x40
    6be6:	4621      	mov	r1, r4
    6be8:	f7f9 fb6a 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    6bec:	2200      	movs	r2, #0
    6bee:	4629      	mov	r1, r5
    6bf0:	f242 0026 	movw	r0, #8230	; 0x2026
    6bf4:	f7fe f8da 	bl	4dac <bt_hci_cmd_send_sync>
	if (err) {
    6bf8:	4603      	mov	r3, r0
    6bfa:	b158      	cbz	r0, 6c14 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6bfc:	2100      	movs	r1, #0
    6bfe:	4a09      	ldr	r2, [pc, #36]	; (6c24 <bt_dh_key_gen+0x88>)
    6c00:	6011      	str	r1, [r2, #0]
		return err;
    6c02:	e007      	b.n	6c14 <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    6c04:	2200      	movs	r2, #0
    6c06:	4b07      	ldr	r3, [pc, #28]	; (6c24 <bt_dh_key_gen+0x88>)
    6c08:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    6c0a:	f06f 0368 	mvn.w	r3, #104	; 0x68
    6c0e:	e001      	b.n	6c14 <bt_dh_key_gen+0x78>
		return -EBUSY;
    6c10:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    6c14:	4618      	mov	r0, r3
    6c16:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    6c18:	f06f 030f 	mvn.w	r3, #15
    6c1c:	e7fa      	b.n	6c14 <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    6c1e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    6c22:	e7f7      	b.n	6c14 <bt_dh_key_gen+0x78>
    6c24:	200003e0 	.word	0x200003e0
    6c28:	2000b980 	.word	0x2000b980

00006c2c <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6c2c:	b538      	push	{r3, r4, r5, lr}
    6c2e:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6c30:	4b06      	ldr	r3, [pc, #24]	; (6c4c <notify_connected+0x20>)
    6c32:	681c      	ldr	r4, [r3, #0]
    6c34:	e000      	b.n	6c38 <notify_connected+0xc>
    6c36:	69a4      	ldr	r4, [r4, #24]
    6c38:	b134      	cbz	r4, 6c48 <notify_connected+0x1c>
		if (cb->connected) {
    6c3a:	6823      	ldr	r3, [r4, #0]
    6c3c:	2b00      	cmp	r3, #0
    6c3e:	d0fa      	beq.n	6c36 <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6c40:	7ae9      	ldrb	r1, [r5, #11]
    6c42:	4628      	mov	r0, r5
    6c44:	4798      	blx	r3
    6c46:	e7f6      	b.n	6c36 <notify_connected+0xa>
		}
	}
}
    6c48:	bd38      	pop	{r3, r4, r5, pc}
    6c4a:	bf00      	nop
    6c4c:	20000500 	.word	0x20000500

00006c50 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6c50:	b538      	push	{r3, r4, r5, lr}
    6c52:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6c54:	4b06      	ldr	r3, [pc, #24]	; (6c70 <notify_disconnected+0x20>)
    6c56:	681c      	ldr	r4, [r3, #0]
    6c58:	e000      	b.n	6c5c <notify_disconnected+0xc>
    6c5a:	69a4      	ldr	r4, [r4, #24]
    6c5c:	b134      	cbz	r4, 6c6c <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6c5e:	6863      	ldr	r3, [r4, #4]
    6c60:	2b00      	cmp	r3, #0
    6c62:	d0fa      	beq.n	6c5a <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    6c64:	7ae9      	ldrb	r1, [r5, #11]
    6c66:	4628      	mov	r0, r5
    6c68:	4798      	blx	r3
    6c6a:	e7f6      	b.n	6c5a <notify_disconnected+0xa>
		}
	}
}
    6c6c:	bd38      	pop	{r3, r4, r5, pc}
    6c6e:	bf00      	nop
    6c70:	20000500 	.word	0x20000500

00006c74 <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    6c74:	2300      	movs	r3, #0
    6c76:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6c78:	4b04      	ldr	r3, [pc, #16]	; (6c8c <tx_free+0x18>)
    6c7a:	681a      	ldr	r2, [r3, #0]
    6c7c:	6002      	str	r2, [r0, #0]
	list->head = node;
    6c7e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6c80:	685b      	ldr	r3, [r3, #4]
    6c82:	b103      	cbz	r3, 6c86 <tx_free+0x12>
    6c84:	4770      	bx	lr
		list->tail = list->head;
    6c86:	4b01      	ldr	r3, [pc, #4]	; (6c8c <tx_free+0x18>)
    6c88:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6c8a:	e7fb      	b.n	6c84 <tx_free+0x10>
    6c8c:	200006a0 	.word	0x200006a0

00006c90 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6c90:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    6c92:	4a0f      	ldr	r2, [pc, #60]	; (6cd0 <add_pending_tx+0x40>)
    6c94:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    6c96:	681c      	ldr	r4, [r3, #0]
    6c98:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6c9a:	6852      	ldr	r2, [r2, #4]
    6c9c:	4293      	cmp	r3, r2
    6c9e:	d011      	beq.n	6cc4 <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6ca0:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    6ca2:	f04f 0220 	mov.w	r2, #32
    6ca6:	f3ef 8111 	mrs	r1, BASEPRI
    6caa:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6cae:	2200      	movs	r2, #0
    6cb0:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    6cb2:	6982      	ldr	r2, [r0, #24]
    6cb4:	b14a      	cbz	r2, 6cca <add_pending_tx+0x3a>
		list->tail->next = node;
    6cb6:	6013      	str	r3, [r2, #0]
		list->tail = node;
    6cb8:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6cba:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    6cbe:	4618      	mov	r0, r3
    6cc0:	bc10      	pop	{r4}
    6cc2:	4770      	bx	lr
		list->tail = list->head;
    6cc4:	4a02      	ldr	r2, [pc, #8]	; (6cd0 <add_pending_tx+0x40>)
    6cc6:	6054      	str	r4, [r2, #4]
    6cc8:	e7ea      	b.n	6ca0 <add_pending_tx+0x10>
		list->tail = node;
    6cca:	6183      	str	r3, [r0, #24]
		list->head = node;
    6ccc:	6143      	str	r3, [r0, #20]
    6cce:	e7f4      	b.n	6cba <add_pending_tx+0x2a>
    6cd0:	200006a0 	.word	0x200006a0

00006cd4 <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    6cd4:	b510      	push	{r4, lr}
	__asm__ volatile(
    6cd6:	f04f 0320 	mov.w	r3, #32
    6cda:	f3ef 8411 	mrs	r4, BASEPRI
    6cde:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    6ce2:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    6ce4:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6ce6:	b163      	cbz	r3, 6d02 <remove_pending_tx+0x2e>
		if (test == node) {
    6ce8:	4299      	cmp	r1, r3
    6cea:	d002      	beq.n	6cf2 <remove_pending_tx+0x1e>
		prev = test;
    6cec:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    6cee:	681b      	ldr	r3, [r3, #0]
    6cf0:	e7f9      	b.n	6ce6 <remove_pending_tx+0x12>
	if (!prev_node) {
    6cf2:	b162      	cbz	r2, 6d0e <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    6cf4:	680b      	ldr	r3, [r1, #0]
    6cf6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    6cf8:	6983      	ldr	r3, [r0, #24]
    6cfa:	4299      	cmp	r1, r3
    6cfc:	d00e      	beq.n	6d1c <remove_pending_tx+0x48>
	node->next = NULL;
    6cfe:	2300      	movs	r3, #0
    6d00:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    6d02:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6d06:	4608      	mov	r0, r1
    6d08:	f7ff ffb4 	bl	6c74 <tx_free>
    6d0c:	bd10      	pop	{r4, pc}
		list->head = node->next;
    6d0e:	680b      	ldr	r3, [r1, #0]
    6d10:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    6d12:	6982      	ldr	r2, [r0, #24]
    6d14:	4291      	cmp	r1, r2
    6d16:	d1f2      	bne.n	6cfe <remove_pending_tx+0x2a>
			list->tail = list->head;
    6d18:	6183      	str	r3, [r0, #24]
    6d1a:	e7f0      	b.n	6cfe <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6d1c:	6182      	str	r2, [r0, #24]
    6d1e:	e7ee      	b.n	6cfe <remove_pending_tx+0x2a>

00006d20 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6d20:	884b      	ldrh	r3, [r1, #2]
    6d22:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    6d26:	888b      	ldrh	r3, [r1, #4]
    6d28:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6d2c:	88cb      	ldrh	r3, [r1, #6]
    6d2e:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    6d32:	4770      	bx	lr

00006d34 <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    6d34:	89c3      	ldrh	r3, [r0, #14]
    6d36:	b903      	cbnz	r3, 6d3a <bt_conn_reset_rx_state+0x6>
    6d38:	4770      	bx	lr
{
    6d3a:	b510      	push	{r4, lr}
    6d3c:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6d3e:	6900      	ldr	r0, [r0, #16]
    6d40:	f014 f818 	bl	1ad74 <net_buf_unref>
	conn->rx = NULL;
    6d44:	2300      	movs	r3, #0
    6d46:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6d48:	81e3      	strh	r3, [r4, #14]
    6d4a:	bd10      	pop	{r4, pc}

00006d4c <conn_new>:
{
    6d4c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6d4e:	2300      	movs	r3, #0
    6d50:	b1ab      	cbz	r3, 6d7e <conn_new+0x32>
	struct bt_conn *conn = NULL;
    6d52:	2400      	movs	r4, #0
	if (!conn) {
    6d54:	b18c      	cbz	r4, 6d7a <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    6d56:	229c      	movs	r2, #156	; 0x9c
    6d58:	2100      	movs	r1, #0
    6d5a:	4620      	mov	r0, r4
    6d5c:	f023 fe08 	bl	2a970 <memset>
	atomic_set(&conn->ref, 1);
    6d60:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    6d64:	2201      	movs	r2, #1
    6d66:	f3bf 8f5b 	dmb	ish
    6d6a:	e853 1f00 	ldrex	r1, [r3]
    6d6e:	e843 2000 	strex	r0, r2, [r3]
    6d72:	2800      	cmp	r0, #0
    6d74:	d1f9      	bne.n	6d6a <conn_new+0x1e>
    6d76:	f3bf 8f5b 	dmb	ish
}
    6d7a:	4620      	mov	r0, r4
    6d7c:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6d7e:	229c      	movs	r2, #156	; 0x9c
    6d80:	fb02 f203 	mul.w	r2, r2, r3
    6d84:	3240      	adds	r2, #64	; 0x40
    6d86:	4907      	ldr	r1, [pc, #28]	; (6da4 <conn_new+0x58>)
    6d88:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d8a:	f3bf 8f5b 	dmb	ish
    6d8e:	6852      	ldr	r2, [r2, #4]
    6d90:	f3bf 8f5b 	dmb	ish
    6d94:	b10a      	cbz	r2, 6d9a <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6d96:	3301      	adds	r3, #1
    6d98:	e7da      	b.n	6d50 <conn_new+0x4>
			conn = &conns[i];
    6d9a:	229c      	movs	r2, #156	; 0x9c
    6d9c:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6da0:	e7d8      	b.n	6d54 <conn_new+0x8>
    6da2:	bf00      	nop
    6da4:	20000514 	.word	0x20000514

00006da8 <bt_conn_get_pkts>:
}
    6da8:	4800      	ldr	r0, [pc, #0]	; (6dac <bt_conn_get_pkts+0x4>)
    6daa:	4770      	bx	lr
    6dac:	2000ba0c 	.word	0x2000ba0c

00006db0 <process_unack_tx>:
{
    6db0:	b510      	push	{r4, lr}
    6db2:	4604      	mov	r4, r0
    6db4:	e009      	b.n	6dca <process_unack_tx+0x1a>
    6db6:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    6dba:	b1b0      	cbz	r0, 6dea <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    6dbc:	f7ff ff5a 	bl	6c74 <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    6dc0:	4620      	mov	r0, r4
    6dc2:	f7ff fff1 	bl	6da8 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    6dc6:	f022 fb20 	bl	2940a <_impl_k_sem_give>
	__asm__ volatile(
    6dca:	f04f 0220 	mov.w	r2, #32
    6dce:	f3ef 8311 	mrs	r3, BASEPRI
    6dd2:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    6dd6:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    6dd8:	2800      	cmp	r0, #0
    6dda:	d0ec      	beq.n	6db6 <process_unack_tx+0x6>
	list->head = node->next;
    6ddc:	6802      	ldr	r2, [r0, #0]
    6dde:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    6de0:	69a1      	ldr	r1, [r4, #24]
    6de2:	4288      	cmp	r0, r1
    6de4:	d1e7      	bne.n	6db6 <process_unack_tx+0x6>
		list->tail = list->head;
    6de6:	61a2      	str	r2, [r4, #24]
    6de8:	e7e5      	b.n	6db6 <process_unack_tx+0x6>
    6dea:	bd10      	pop	{r4, pc}

00006dec <notify_le_param_updated>:
{
    6dec:	b570      	push	{r4, r5, r6, lr}
    6dee:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6df0:	4b08      	ldr	r3, [pc, #32]	; (6e14 <notify_le_param_updated+0x28>)
    6df2:	681c      	ldr	r4, [r3, #0]
    6df4:	e000      	b.n	6df8 <notify_le_param_updated+0xc>
    6df6:	69a4      	ldr	r4, [r4, #24]
    6df8:	b15c      	cbz	r4, 6e12 <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    6dfa:	68e6      	ldr	r6, [r4, #12]
    6dfc:	2e00      	cmp	r6, #0
    6dfe:	d0fa      	beq.n	6df6 <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    6e00:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    6e04:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    6e08:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    6e0c:	4628      	mov	r0, r5
    6e0e:	47b0      	blx	r6
    6e10:	e7f1      	b.n	6df6 <notify_le_param_updated+0xa>
}
    6e12:	bd70      	pop	{r4, r5, r6, pc}
    6e14:	20000500 	.word	0x20000500

00006e18 <le_param_req>:
{
    6e18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6e1a:	4606      	mov	r6, r0
    6e1c:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6e1e:	4608      	mov	r0, r1
    6e20:	f7fe fc02 	bl	5628 <bt_le_conn_params_valid>
    6e24:	4607      	mov	r7, r0
    6e26:	b198      	cbz	r0, 6e50 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e28:	4b0a      	ldr	r3, [pc, #40]	; (6e54 <le_param_req+0x3c>)
    6e2a:	681c      	ldr	r4, [r3, #0]
    6e2c:	e000      	b.n	6e30 <le_param_req+0x18>
    6e2e:	69a4      	ldr	r4, [r4, #24]
    6e30:	b174      	cbz	r4, 6e50 <le_param_req+0x38>
		if (!cb->le_param_req) {
    6e32:	68a3      	ldr	r3, [r4, #8]
    6e34:	2b00      	cmp	r3, #0
    6e36:	d0fa      	beq.n	6e2e <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6e38:	4629      	mov	r1, r5
    6e3a:	4630      	mov	r0, r6
    6e3c:	4798      	blx	r3
    6e3e:	b130      	cbz	r0, 6e4e <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6e40:	4628      	mov	r0, r5
    6e42:	f7fe fbf1 	bl	5628 <bt_le_conn_params_valid>
    6e46:	2800      	cmp	r0, #0
    6e48:	d1f1      	bne.n	6e2e <le_param_req+0x16>
			return false;
    6e4a:	4607      	mov	r7, r0
    6e4c:	e000      	b.n	6e50 <le_param_req+0x38>
			return false;
    6e4e:	4607      	mov	r7, r0
}
    6e50:	4638      	mov	r0, r7
    6e52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    6e54:	20000500 	.word	0x20000500

00006e58 <bt_conn_identity_resolved>:
{
    6e58:	b570      	push	{r4, r5, r6, lr}
    6e5a:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6e5c:	78c3      	ldrb	r3, [r0, #3]
    6e5e:	b923      	cbnz	r3, 6e6a <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6e60:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    6e64:	4b08      	ldr	r3, [pc, #32]	; (6e88 <bt_conn_identity_resolved+0x30>)
    6e66:	681c      	ldr	r4, [r3, #0]
    6e68:	e003      	b.n	6e72 <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6e6a:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6e6e:	e7f9      	b.n	6e64 <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6e70:	69a4      	ldr	r4, [r4, #24]
    6e72:	b144      	cbz	r4, 6e86 <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    6e74:	6923      	ldr	r3, [r4, #16]
    6e76:	2b00      	cmp	r3, #0
    6e78:	d0fa      	beq.n	6e70 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6e7a:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6e7e:	4631      	mov	r1, r6
    6e80:	4628      	mov	r0, r5
    6e82:	4798      	blx	r3
    6e84:	e7f4      	b.n	6e70 <bt_conn_identity_resolved+0x18>
}
    6e86:	bd70      	pop	{r4, r5, r6, pc}
    6e88:	20000500 	.word	0x20000500

00006e8c <bt_conn_le_start_encryption>:
{
    6e8c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6e90:	4680      	mov	r8, r0
    6e92:	4617      	mov	r7, r2
    6e94:	461c      	mov	r4, r3
    6e96:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6e98:	211c      	movs	r1, #28
    6e9a:	f242 0019 	movw	r0, #8217	; 0x2019
    6e9e:	f7fd ff59 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    6ea2:	b338      	cbz	r0, 6ef4 <bt_conn_le_start_encryption+0x68>
    6ea4:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    6ea6:	211c      	movs	r1, #28
    6ea8:	3008      	adds	r0, #8
    6eaa:	f013 ffaf 	bl	1ae0c <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6eae:	f8b8 2000 	ldrh.w	r2, [r8]
    6eb2:	4603      	mov	r3, r0
    6eb4:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    6eb8:	f8c0 7002 	str.w	r7, [r0, #2]
    6ebc:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    6ebe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    6ec2:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    6ec4:	f100 040c 	add.w	r4, r0, #12
    6ec8:	462a      	mov	r2, r5
    6eca:	9907      	ldr	r1, [sp, #28]
    6ecc:	4620      	mov	r0, r4
    6ece:	f7f9 f9f7 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    6ed2:	2d0f      	cmp	r5, #15
    6ed4:	d907      	bls.n	6ee6 <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    6ed6:	2200      	movs	r2, #0
    6ed8:	4631      	mov	r1, r6
    6eda:	f242 0019 	movw	r0, #8217	; 0x2019
    6ede:	f7fd ff65 	bl	4dac <bt_hci_cmd_send_sync>
    6ee2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    6ee6:	f1c5 0210 	rsb	r2, r5, #16
    6eea:	2100      	movs	r1, #0
    6eec:	1960      	adds	r0, r4, r5
    6eee:	f023 fd3f 	bl	2a970 <memset>
    6ef2:	e7f0      	b.n	6ed6 <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    6ef4:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

00006efc <start_security>:
{
    6efc:	b530      	push	{r4, r5, lr}
    6efe:	b085      	sub	sp, #20
    6f00:	4604      	mov	r4, r0
	switch (conn->role) {
    6f02:	78c3      	ldrb	r3, [r0, #3]
    6f04:	b123      	cbz	r3, 6f10 <start_security+0x14>
    6f06:	2b01      	cmp	r3, #1
    6f08:	d052      	beq.n	6fb0 <start_security+0xb4>
		return -EINVAL;
    6f0a:	f06f 0015 	mvn.w	r0, #21
    6f0e:	e051      	b.n	6fb4 <start_security+0xb8>
		if (!conn->le.keys) {
    6f10:	6f03      	ldr	r3, [r0, #112]	; 0x70
    6f12:	b353      	cbz	r3, 6f6a <start_security+0x6e>
		if (!conn->le.keys ||
    6f14:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6f16:	2b00      	cmp	r3, #0
    6f18:	d036      	beq.n	6f88 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6f1a:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6f1c:	f012 0f24 	tst.w	r2, #36	; 0x24
    6f20:	d032      	beq.n	6f88 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6f22:	7a62      	ldrb	r2, [r4, #9]
    6f24:	2a02      	cmp	r2, #2
    6f26:	d833      	bhi.n	6f90 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6f28:	7a63      	ldrb	r3, [r4, #9]
    6f2a:	2b03      	cmp	r3, #3
    6f2c:	d90d      	bls.n	6f4a <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6f2e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6f30:	f3bf 8f5b 	dmb	ish
    6f34:	689b      	ldr	r3, [r3, #8]
    6f36:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6f3a:	f013 0f01 	tst.w	r3, #1
    6f3e:	d104      	bne.n	6f4a <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6f40:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6f42:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    6f44:	f013 0f20 	tst.w	r3, #32
    6f48:	d02e      	beq.n	6fa8 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6f4a:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6f4c:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6f50:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    6f52:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    6f56:	9502      	str	r5, [sp, #8]
    6f58:	9201      	str	r2, [sp, #4]
    6f5a:	8b1b      	ldrh	r3, [r3, #24]
    6f5c:	9300      	str	r3, [sp, #0]
    6f5e:	4602      	mov	r2, r0
    6f60:	460b      	mov	r3, r1
    6f62:	4620      	mov	r0, r4
    6f64:	f7ff ff92 	bl	6e8c <bt_conn_le_start_encryption>
    6f68:	e024      	b.n	6fb4 <start_security+0xb8>
						     &conn->le.dst);
    6f6a:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6f6e:	4629      	mov	r1, r5
    6f70:	2020      	movs	r0, #32
    6f72:	f006 f96d 	bl	d250 <bt_keys_find>
    6f76:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6f78:	2800      	cmp	r0, #0
    6f7a:	d1cb      	bne.n	6f14 <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6f7c:	4629      	mov	r1, r5
    6f7e:	2004      	movs	r0, #4
    6f80:	f006 f966 	bl	d250 <bt_keys_find>
    6f84:	6720      	str	r0, [r4, #112]	; 0x70
    6f86:	e7c5      	b.n	6f14 <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6f88:	4620      	mov	r0, r4
    6f8a:	f005 ff14 	bl	cdb6 <bt_smp_send_pairing_req>
    6f8e:	e011      	b.n	6fb4 <start_security+0xb8>
    6f90:	f3bf 8f5b 	dmb	ish
    6f94:	689b      	ldr	r3, [r3, #8]
    6f96:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6f9a:	f013 0f01 	tst.w	r3, #1
    6f9e:	d1c3      	bne.n	6f28 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6fa0:	4620      	mov	r0, r4
    6fa2:	f005 ff08 	bl	cdb6 <bt_smp_send_pairing_req>
    6fa6:	e005      	b.n	6fb4 <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6fa8:	4620      	mov	r0, r4
    6faa:	f005 ff04 	bl	cdb6 <bt_smp_send_pairing_req>
    6fae:	e001      	b.n	6fb4 <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6fb0:	f005 feae 	bl	cd10 <bt_smp_send_security_req>
}
    6fb4:	b005      	add	sp, #20
    6fb6:	bd30      	pop	{r4, r5, pc}

00006fb8 <bt_conn_security_changed>:
{
    6fb8:	b538      	push	{r3, r4, r5, lr}
    6fba:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    6fbc:	4b06      	ldr	r3, [pc, #24]	; (6fd8 <bt_conn_security_changed+0x20>)
    6fbe:	681c      	ldr	r4, [r3, #0]
    6fc0:	e000      	b.n	6fc4 <bt_conn_security_changed+0xc>
    6fc2:	69a4      	ldr	r4, [r4, #24]
    6fc4:	b134      	cbz	r4, 6fd4 <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    6fc6:	6963      	ldr	r3, [r4, #20]
    6fc8:	2b00      	cmp	r3, #0
    6fca:	d0fa      	beq.n	6fc2 <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    6fcc:	7a29      	ldrb	r1, [r5, #8]
    6fce:	4628      	mov	r0, r5
    6fd0:	4798      	blx	r3
    6fd2:	e7f6      	b.n	6fc2 <bt_conn_security_changed+0xa>
}
    6fd4:	bd38      	pop	{r3, r4, r5, pc}
    6fd6:	bf00      	nop
    6fd8:	20000500 	.word	0x20000500

00006fdc <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    6fdc:	7b03      	ldrb	r3, [r0, #12]
    6fde:	2b03      	cmp	r3, #3
    6fe0:	d112      	bne.n	7008 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    6fe2:	7a03      	ldrb	r3, [r0, #8]
    6fe4:	428b      	cmp	r3, r1
    6fe6:	d212      	bcs.n	700e <bt_conn_security+0x32>
    6fe8:	7a43      	ldrb	r3, [r0, #9]
    6fea:	4299      	cmp	r1, r3
    6fec:	d801      	bhi.n	6ff2 <bt_conn_security+0x16>
		return 0;
    6fee:	2300      	movs	r3, #0
    6ff0:	e00e      	b.n	7010 <bt_conn_security+0x34>
{
    6ff2:	b510      	push	{r4, lr}
    6ff4:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    6ff6:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    6ff8:	f7ff ff80 	bl	6efc <start_security>
	if (err) {
    6ffc:	4603      	mov	r3, r0
    6ffe:	b108      	cbz	r0, 7004 <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    7000:	7a22      	ldrb	r2, [r4, #8]
    7002:	7262      	strb	r2, [r4, #9]
}
    7004:	4618      	mov	r0, r3
    7006:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    7008:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    700c:	e000      	b.n	7010 <bt_conn_security+0x34>
		return 0;
    700e:	2300      	movs	r3, #0
}
    7010:	4618      	mov	r0, r3
    7012:	4770      	bx	lr

00007014 <bt_conn_cb_register>:
	cb->_next = callback_list;
    7014:	4b02      	ldr	r3, [pc, #8]	; (7020 <bt_conn_cb_register+0xc>)
    7016:	681a      	ldr	r2, [r3, #0]
    7018:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    701a:	6018      	str	r0, [r3, #0]
    701c:	4770      	bx	lr
    701e:	bf00      	nop
    7020:	20000500 	.word	0x20000500

00007024 <bt_conn_recv>:
{
    7024:	b570      	push	{r4, r5, r6, lr}
    7026:	4605      	mov	r5, r0
    7028:	460c      	mov	r4, r1
	switch (flags) {
    702a:	2a01      	cmp	r2, #1
    702c:	d01a      	beq.n	7064 <bt_conn_recv+0x40>
    702e:	2a02      	cmp	r2, #2
    7030:	d149      	bne.n	70c6 <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    7032:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    7034:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    7036:	89c3      	ldrh	r3, [r0, #14]
    7038:	b97b      	cbnz	r3, 705a <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    703a:	89a3      	ldrh	r3, [r4, #12]
    703c:	1af3      	subs	r3, r6, r3
    703e:	3304      	adds	r3, #4
    7040:	b29b      	uxth	r3, r3
    7042:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    7044:	b963      	cbnz	r3, 7060 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    7046:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    7048:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    704a:	3304      	adds	r3, #4
    704c:	89a2      	ldrh	r2, [r4, #12]
    704e:	4293      	cmp	r3, r2
    7050:	d03f      	beq.n	70d2 <bt_conn_recv+0xae>
		net_buf_unref(buf);
    7052:	4620      	mov	r0, r4
    7054:	f013 fe8e 	bl	1ad74 <net_buf_unref>
		return;
    7058:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    705a:	f7ff fe6b 	bl	6d34 <bt_conn_reset_rx_state>
    705e:	e7ec      	b.n	703a <bt_conn_recv+0x16>
			conn->rx = buf;
    7060:	612c      	str	r4, [r5, #16]
			return;
    7062:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    7064:	89c3      	ldrh	r3, [r0, #14]
    7066:	b1db      	cbz	r3, 70a0 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    7068:	898e      	ldrh	r6, [r1, #12]
    706a:	42b3      	cmp	r3, r6
    706c:	d31e      	bcc.n	70ac <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    706e:	6900      	ldr	r0, [r0, #16]
    7070:	3008      	adds	r0, #8
    7072:	f013 ff34 	bl	1aede <net_buf_simple_tailroom>
    7076:	4286      	cmp	r6, r0
    7078:	d81e      	bhi.n	70b8 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    707a:	6928      	ldr	r0, [r5, #16]
    707c:	89a2      	ldrh	r2, [r4, #12]
    707e:	68a1      	ldr	r1, [r4, #8]
    7080:	3008      	adds	r0, #8
    7082:	f013 fec9 	bl	1ae18 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    7086:	89a2      	ldrh	r2, [r4, #12]
    7088:	89eb      	ldrh	r3, [r5, #14]
    708a:	1a9b      	subs	r3, r3, r2
    708c:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    708e:	4620      	mov	r0, r4
    7090:	f013 fe70 	bl	1ad74 <net_buf_unref>
		if (conn->rx_len) {
    7094:	89eb      	ldrh	r3, [r5, #14]
    7096:	bb03      	cbnz	r3, 70da <bt_conn_recv+0xb6>
		buf = conn->rx;
    7098:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    709a:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    709c:	81eb      	strh	r3, [r5, #14]
		break;
    709e:	e7d2      	b.n	7046 <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    70a0:	f7ff fe48 	bl	6d34 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    70a4:	4620      	mov	r0, r4
    70a6:	f013 fe65 	bl	1ad74 <net_buf_unref>
			return;
    70aa:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    70ac:	f7ff fe42 	bl	6d34 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    70b0:	4620      	mov	r0, r4
    70b2:	f013 fe5f 	bl	1ad74 <net_buf_unref>
			return;
    70b6:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    70b8:	4628      	mov	r0, r5
    70ba:	f7ff fe3b 	bl	6d34 <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    70be:	4620      	mov	r0, r4
    70c0:	f013 fe58 	bl	1ad74 <net_buf_unref>
			return;
    70c4:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    70c6:	f7ff fe35 	bl	6d34 <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    70ca:	4620      	mov	r0, r4
    70cc:	f013 fe52 	bl	1ad74 <net_buf_unref>
		return;
    70d0:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    70d2:	4621      	mov	r1, r4
    70d4:	4628      	mov	r0, r5
    70d6:	f001 fd06 	bl	8ae6 <bt_l2cap_recv>
    70da:	bd70      	pop	{r4, r5, r6, pc}

000070dc <bt_conn_send_cb>:
{
    70dc:	b570      	push	{r4, r5, r6, lr}
    70de:	4605      	mov	r5, r0
    70e0:	460c      	mov	r4, r1
    70e2:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    70e4:	7988      	ldrb	r0, [r1, #6]
    70e6:	f013 fdcb 	bl	1ac80 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    70ea:	8ac3      	ldrh	r3, [r0, #22]
    70ec:	2b03      	cmp	r3, #3
    70ee:	d911      	bls.n	7114 <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    70f0:	7b2b      	ldrb	r3, [r5, #12]
    70f2:	2b03      	cmp	r3, #3
    70f4:	d114      	bne.n	7120 <bt_conn_send_cb+0x44>
    70f6:	f104 0310 	add.w	r3, r4, #16
    70fa:	89e2      	ldrh	r2, [r4, #14]
    70fc:	4413      	add	r3, r2
    70fe:	3303      	adds	r3, #3
    7100:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    7104:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    7106:	4621      	mov	r1, r4
    7108:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    710c:	f013 fe24 	bl	1ad58 <net_buf_put>
	return 0;
    7110:	2000      	movs	r0, #0
}
    7112:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7114:	4620      	mov	r0, r4
    7116:	f013 fe2d 	bl	1ad74 <net_buf_unref>
		return -EINVAL;
    711a:	f06f 0015 	mvn.w	r0, #21
    711e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    7120:	4620      	mov	r0, r4
    7122:	f013 fe27 	bl	1ad74 <net_buf_unref>
		return -ENOTCONN;
    7126:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    712a:	bd70      	pop	{r4, r5, r6, pc}

0000712c <bt_conn_notify_tx>:
{
    712c:	b538      	push	{r3, r4, r5, lr}
    712e:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    7130:	e002      	b.n	7138 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    7132:	4620      	mov	r0, r4
    7134:	f7ff fd9e 	bl	6c74 <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    7138:	2100      	movs	r1, #0
    713a:	f105 001c 	add.w	r0, r5, #28
    713e:	f021 fdf5 	bl	28d2c <k_queue_get>
    7142:	4604      	mov	r4, r0
    7144:	b128      	cbz	r0, 7152 <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    7146:	6863      	ldr	r3, [r4, #4]
    7148:	2b00      	cmp	r3, #0
    714a:	d0f2      	beq.n	7132 <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    714c:	4628      	mov	r0, r5
    714e:	4798      	blx	r3
    7150:	e7ef      	b.n	7132 <bt_conn_notify_tx+0x6>
}
    7152:	bd38      	pop	{r3, r4, r5, pc}

00007154 <notify_tx>:
{
    7154:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7156:	2400      	movs	r4, #0
    7158:	b104      	cbz	r4, 715c <notify_tx+0x8>
}
    715a:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    715c:	239c      	movs	r3, #156	; 0x9c
    715e:	fb03 f304 	mul.w	r3, r3, r4
    7162:	3340      	adds	r3, #64	; 0x40
    7164:	4a0b      	ldr	r2, [pc, #44]	; (7194 <notify_tx+0x40>)
    7166:	4413      	add	r3, r2
    7168:	f3bf 8f5b 	dmb	ish
    716c:	685b      	ldr	r3, [r3, #4]
    716e:	f3bf 8f5b 	dmb	ish
    7172:	b13b      	cbz	r3, 7184 <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    7174:	239c      	movs	r3, #156	; 0x9c
    7176:	fb03 2304 	mla	r3, r3, r4, r2
    717a:	7b1b      	ldrb	r3, [r3, #12]
    717c:	3b03      	subs	r3, #3
    717e:	b2db      	uxtb	r3, r3
    7180:	2b01      	cmp	r3, #1
    7182:	d901      	bls.n	7188 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7184:	3401      	adds	r4, #1
    7186:	e7e7      	b.n	7158 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    7188:	209c      	movs	r0, #156	; 0x9c
    718a:	fb00 2004 	mla	r0, r0, r4, r2
    718e:	f7ff ffcd 	bl	712c <bt_conn_notify_tx>
    7192:	e7f7      	b.n	7184 <notify_tx+0x30>
    7194:	20000514 	.word	0x20000514

00007198 <send_frag>:
{
    7198:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    719c:	4606      	mov	r6, r0
    719e:	460d      	mov	r5, r1
    71a0:	4690      	mov	r8, r2
    71a2:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    71a4:	f7ff fe00 	bl	6da8 <bt_conn_get_pkts>
    71a8:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    71aa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    71ae:	f022 f93f 	bl	29430 <_impl_k_sem_take>
	notify_tx();
    71b2:	f7ff ffcf 	bl	7154 <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    71b6:	7b33      	ldrb	r3, [r6, #12]
    71b8:	2b03      	cmp	r3, #3
    71ba:	d006      	beq.n	71ca <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    71bc:	4638      	mov	r0, r7
    71be:	f022 f924 	bl	2940a <_impl_k_sem_give>
	if (always_consume) {
    71c2:	bb4c      	cbnz	r4, 7218 <send_frag+0x80>
}
    71c4:	4620      	mov	r0, r4
    71c6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    71ca:	2104      	movs	r1, #4
    71cc:	f105 0008 	add.w	r0, r5, #8
    71d0:	f013 fe53 	bl	1ae7a <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    71d4:	f9b6 3000 	ldrsh.w	r3, [r6]
    71d8:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    71dc:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    71e0:	89ab      	ldrh	r3, [r5, #12]
    71e2:	3b04      	subs	r3, #4
    71e4:	8043      	strh	r3, [r0, #2]
    71e6:	f105 0310 	add.w	r3, r5, #16
    71ea:	89ea      	ldrh	r2, [r5, #14]
    71ec:	4413      	add	r3, r2
    71ee:	3303      	adds	r3, #3
    71f0:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    71f4:	6819      	ldr	r1, [r3, #0]
    71f6:	2202      	movs	r2, #2
    71f8:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    71fa:	4630      	mov	r0, r6
    71fc:	f7ff fd48 	bl	6c90 <add_pending_tx>
    7200:	4680      	mov	r8, r0
	err = bt_send(buf);
    7202:	4628      	mov	r0, r5
    7204:	f7fe fafa 	bl	57fc <bt_send>
	if (err) {
    7208:	b908      	cbnz	r0, 720e <send_frag+0x76>
	return true;
    720a:	2401      	movs	r4, #1
    720c:	e7da      	b.n	71c4 <send_frag+0x2c>
		remove_pending_tx(conn, node);
    720e:	4641      	mov	r1, r8
    7210:	4630      	mov	r0, r6
    7212:	f7ff fd5f 	bl	6cd4 <remove_pending_tx>
		goto fail;
    7216:	e7d1      	b.n	71bc <send_frag+0x24>
		net_buf_unref(buf);
    7218:	4628      	mov	r0, r5
    721a:	f013 fdab 	bl	1ad74 <net_buf_unref>
	return false;
    721e:	2400      	movs	r4, #0
    7220:	e7d0      	b.n	71c4 <send_frag+0x2c>
	...

00007224 <bt_conn_add_le>:
{
    7224:	b538      	push	{r3, r4, r5, lr}
    7226:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    7228:	f7ff fd90 	bl	6d4c <conn_new>
	if (!conn) {
    722c:	4604      	mov	r4, r0
    722e:	b1a0      	cbz	r0, 725a <bt_conn_add_le+0x36>
    7230:	2207      	movs	r2, #7
    7232:	4629      	mov	r1, r5
    7234:	3048      	adds	r0, #72	; 0x48
    7236:	f7f9 f843 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    723a:	2301      	movs	r3, #1
    723c:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    723e:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    7240:	2300      	movs	r3, #0
    7242:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    7244:	2318      	movs	r3, #24
    7246:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    724a:	2328      	movs	r3, #40	; 0x28
    724c:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    7250:	4903      	ldr	r1, [pc, #12]	; (7260 <bt_conn_add_le+0x3c>)
    7252:	f104 0074 	add.w	r0, r4, #116	; 0x74
    7256:	f022 fea9 	bl	29fac <k_delayed_work_init>
}
    725a:	4620      	mov	r0, r4
    725c:	bd38      	pop	{r3, r4, r5, pc}
    725e:	bf00      	nop
    7260:	00007861 	.word	0x00007861

00007264 <bt_conn_addr_le_cmp>:
{
    7264:	b538      	push	{r3, r4, r5, lr}
    7266:	4604      	mov	r4, r0
    7268:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    726a:	2207      	movs	r2, #7
    726c:	f100 0148 	add.w	r1, r0, #72	; 0x48
    7270:	4628      	mov	r0, r5
    7272:	f023 fae9 	bl	2a848 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    7276:	4603      	mov	r3, r0
    7278:	b140      	cbz	r0, 728c <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    727a:	78e3      	ldrb	r3, [r4, #3]
    727c:	b143      	cbz	r3, 7290 <bt_conn_addr_le_cmp+0x2c>
    727e:	2207      	movs	r2, #7
    7280:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    7284:	4628      	mov	r0, r5
    7286:	f023 fadf 	bl	2a848 <memcmp>
    728a:	4603      	mov	r3, r0
}
    728c:	4618      	mov	r0, r3
    728e:	bd38      	pop	{r3, r4, r5, pc}
    7290:	2207      	movs	r2, #7
    7292:	f104 0156 	add.w	r1, r4, #86	; 0x56
    7296:	4628      	mov	r0, r5
    7298:	f023 fad6 	bl	2a848 <memcmp>
    729c:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    729e:	e7f5      	b.n	728c <bt_conn_addr_le_cmp+0x28>

000072a0 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    72a0:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    72a4:	f3bf 8f5b 	dmb	ish
    72a8:	e853 2f00 	ldrex	r2, [r3]
    72ac:	3201      	adds	r2, #1
    72ae:	e843 2100 	strex	r1, r2, [r3]
    72b2:	2900      	cmp	r1, #0
    72b4:	d1f8      	bne.n	72a8 <bt_conn_ref+0x8>
    72b6:	f3bf 8f5b 	dmb	ish
}
    72ba:	4770      	bx	lr

000072bc <bt_conn_lookup_handle>:
{
    72bc:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72be:	2300      	movs	r3, #0
    72c0:	b10b      	cbz	r3, 72c6 <bt_conn_lookup_handle+0xa>
	return NULL;
    72c2:	2000      	movs	r0, #0
}
    72c4:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    72c6:	229c      	movs	r2, #156	; 0x9c
    72c8:	fb02 f203 	mul.w	r2, r2, r3
    72cc:	3240      	adds	r2, #64	; 0x40
    72ce:	490f      	ldr	r1, [pc, #60]	; (730c <bt_conn_lookup_handle+0x50>)
    72d0:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    72d2:	f3bf 8f5b 	dmb	ish
    72d6:	6852      	ldr	r2, [r2, #4]
    72d8:	f3bf 8f5b 	dmb	ish
    72dc:	b13a      	cbz	r2, 72ee <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    72de:	229c      	movs	r2, #156	; 0x9c
    72e0:	fb02 1203 	mla	r2, r2, r3, r1
    72e4:	7b12      	ldrb	r2, [r2, #12]
    72e6:	3a03      	subs	r2, #3
    72e8:	b2d2      	uxtb	r2, r2
    72ea:	2a01      	cmp	r2, #1
    72ec:	d901      	bls.n	72f2 <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    72ee:	3301      	adds	r3, #1
    72f0:	e7e6      	b.n	72c0 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    72f2:	229c      	movs	r2, #156	; 0x9c
    72f4:	fb02 f203 	mul.w	r2, r2, r3
    72f8:	5a8a      	ldrh	r2, [r1, r2]
    72fa:	4282      	cmp	r2, r0
    72fc:	d1f7      	bne.n	72ee <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    72fe:	209c      	movs	r0, #156	; 0x9c
    7300:	fb00 1003 	mla	r0, r0, r3, r1
    7304:	f7ff ffcc 	bl	72a0 <bt_conn_ref>
    7308:	bd08      	pop	{r3, pc}
    730a:	bf00      	nop
    730c:	20000514 	.word	0x20000514

00007310 <bt_conn_lookup_addr_le>:
{
    7310:	b570      	push	{r4, r5, r6, lr}
    7312:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7314:	2400      	movs	r4, #0
    7316:	b10c      	cbz	r4, 731c <bt_conn_lookup_addr_le+0xc>
	return NULL;
    7318:	2000      	movs	r0, #0
}
    731a:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    731c:	239c      	movs	r3, #156	; 0x9c
    731e:	fb03 f304 	mul.w	r3, r3, r4
    7322:	3340      	adds	r3, #64	; 0x40
    7324:	4a0d      	ldr	r2, [pc, #52]	; (735c <bt_conn_lookup_addr_le+0x4c>)
    7326:	4413      	add	r3, r2
    7328:	f3bf 8f5b 	dmb	ish
    732c:	685b      	ldr	r3, [r3, #4]
    732e:	f3bf 8f5b 	dmb	ish
    7332:	b123      	cbz	r3, 733e <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7334:	239c      	movs	r3, #156	; 0x9c
    7336:	fb03 2304 	mla	r3, r3, r4, r2
    733a:	789b      	ldrb	r3, [r3, #2]
    733c:	b10b      	cbz	r3, 7342 <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    733e:	3401      	adds	r4, #1
    7340:	e7e9      	b.n	7316 <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    7342:	269c      	movs	r6, #156	; 0x9c
    7344:	fb06 2604 	mla	r6, r6, r4, r2
    7348:	4629      	mov	r1, r5
    734a:	4630      	mov	r0, r6
    734c:	f7ff ff8a 	bl	7264 <bt_conn_addr_le_cmp>
    7350:	2800      	cmp	r0, #0
    7352:	d1f4      	bne.n	733e <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    7354:	4630      	mov	r0, r6
    7356:	f7ff ffa3 	bl	72a0 <bt_conn_ref>
    735a:	bd70      	pop	{r4, r5, r6, pc}
    735c:	20000514 	.word	0x20000514

00007360 <bt_conn_lookup_state_le>:
{
    7360:	b570      	push	{r4, r5, r6, lr}
    7362:	4605      	mov	r5, r0
    7364:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7366:	2400      	movs	r4, #0
    7368:	b10c      	cbz	r4, 736e <bt_conn_lookup_state_le+0xe>
	return NULL;
    736a:	2000      	movs	r0, #0
}
    736c:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    736e:	239c      	movs	r3, #156	; 0x9c
    7370:	fb03 f304 	mul.w	r3, r3, r4
    7374:	3340      	adds	r3, #64	; 0x40
    7376:	4a12      	ldr	r2, [pc, #72]	; (73c0 <bt_conn_lookup_state_le+0x60>)
    7378:	4413      	add	r3, r2
    737a:	f3bf 8f5b 	dmb	ish
    737e:	685b      	ldr	r3, [r3, #4]
    7380:	f3bf 8f5b 	dmb	ish
    7384:	b19b      	cbz	r3, 73ae <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    7386:	239c      	movs	r3, #156	; 0x9c
    7388:	fb03 2304 	mla	r3, r3, r4, r2
    738c:	789b      	ldrb	r3, [r3, #2]
    738e:	b973      	cbnz	r3, 73ae <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    7390:	b135      	cbz	r5, 73a0 <bt_conn_lookup_state_le+0x40>
    7392:	4629      	mov	r1, r5
    7394:	209c      	movs	r0, #156	; 0x9c
    7396:	fb00 2004 	mla	r0, r0, r4, r2
    739a:	f7ff ff63 	bl	7264 <bt_conn_addr_le_cmp>
    739e:	b930      	cbnz	r0, 73ae <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    73a0:	239c      	movs	r3, #156	; 0x9c
    73a2:	4a07      	ldr	r2, [pc, #28]	; (73c0 <bt_conn_lookup_state_le+0x60>)
    73a4:	fb03 2304 	mla	r3, r3, r4, r2
    73a8:	7b1b      	ldrb	r3, [r3, #12]
    73aa:	42b3      	cmp	r3, r6
    73ac:	d001      	beq.n	73b2 <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    73ae:	3401      	adds	r4, #1
    73b0:	e7da      	b.n	7368 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    73b2:	209c      	movs	r0, #156	; 0x9c
    73b4:	fb00 2004 	mla	r0, r0, r4, r2
    73b8:	f7ff ff72 	bl	72a0 <bt_conn_ref>
    73bc:	bd70      	pop	{r4, r5, r6, pc}
    73be:	bf00      	nop
    73c0:	20000514 	.word	0x20000514

000073c4 <bt_conn_unref>:
	atomic_dec(&conn->ref);
    73c4:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    73c6:	f3bf 8f5b 	dmb	ish
    73ca:	e850 3f00 	ldrex	r3, [r0]
    73ce:	3b01      	subs	r3, #1
    73d0:	e840 3200 	strex	r2, r3, [r0]
    73d4:	2a00      	cmp	r2, #0
    73d6:	d1f8      	bne.n	73ca <bt_conn_unref+0x6>
    73d8:	f3bf 8f5b 	dmb	ish
    73dc:	4770      	bx	lr

000073de <conn_cleanup>:
{
    73de:	b510      	push	{r4, lr}
    73e0:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    73e2:	e002      	b.n	73ea <conn_cleanup+0xc>
		net_buf_unref(buf);
    73e4:	4618      	mov	r0, r3
    73e6:	f013 fcc5 	bl	1ad74 <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    73ea:	2100      	movs	r1, #0
    73ec:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    73f0:	f013 fc93 	bl	1ad1a <net_buf_get>
    73f4:	4603      	mov	r3, r0
    73f6:	2800      	cmp	r0, #0
    73f8:	d1f4      	bne.n	73e4 <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    73fa:	4620      	mov	r0, r4
    73fc:	f7ff fe96 	bl	712c <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    7400:	4620      	mov	r0, r4
    7402:	f7ff fc97 	bl	6d34 <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    7406:	4620      	mov	r0, r4
    7408:	f7ff ffdc 	bl	73c4 <bt_conn_unref>
    740c:	bd10      	pop	{r4, pc}
	...

00007410 <bt_conn_prepare_events>:
{
    7410:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7414:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    7416:	4b30      	ldr	r3, [pc, #192]	; (74d8 <bt_conn_prepare_events+0xc8>)
    7418:	2400      	movs	r4, #0
    741a:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    741c:	4622      	mov	r2, r4
    741e:	2101      	movs	r1, #1
    7420:	f021 f93e 	bl	286a0 <k_poll_event_init>
    7424:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7426:	b114      	cbz	r4, 742e <bt_conn_prepare_events+0x1e>
}
    7428:	4628      	mov	r0, r5
    742a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    742e:	4a2b      	ldr	r2, [pc, #172]	; (74dc <bt_conn_prepare_events+0xcc>)
    7430:	239c      	movs	r3, #156	; 0x9c
    7432:	fb03 f304 	mul.w	r3, r3, r4
    7436:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    7438:	3340      	adds	r3, #64	; 0x40
    743a:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    743c:	f3bf 8f5b 	dmb	ish
    7440:	685b      	ldr	r3, [r3, #4]
    7442:	f3bf 8f5b 	dmb	ish
    7446:	b143      	cbz	r3, 745a <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    7448:	7b03      	ldrb	r3, [r0, #12]
    744a:	b143      	cbz	r3, 745e <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    744c:	239c      	movs	r3, #156	; 0x9c
    744e:	4a23      	ldr	r2, [pc, #140]	; (74dc <bt_conn_prepare_events+0xcc>)
    7450:	fb03 2304 	mla	r3, r3, r4, r2
    7454:	7b1b      	ldrb	r3, [r3, #12]
    7456:	2b03      	cmp	r3, #3
    7458:	d015      	beq.n	7486 <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    745a:	3401      	adds	r4, #1
    745c:	e7e3      	b.n	7426 <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    745e:	4603      	mov	r3, r0
    7460:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    7462:	f3bf 8f5b 	dmb	ish
    7466:	e853 2f00 	ldrex	r2, [r3]
    746a:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    746e:	e843 1700 	strex	r7, r1, [r3]
    7472:	2f00      	cmp	r7, #0
    7474:	d1f7      	bne.n	7466 <bt_conn_prepare_events+0x56>
    7476:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    747a:	f012 0f40 	tst.w	r2, #64	; 0x40
    747e:	d0e5      	beq.n	744c <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    7480:	f7ff ffad 	bl	73de <conn_cleanup>
			continue;
    7484:	e7e9      	b.n	745a <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    7486:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    748a:	ea4f 0883 	mov.w	r8, r3, lsl #2
    748e:	44b0      	add	r8, r6
				  &conn->tx_notify);
    7490:	4691      	mov	r9, r2
    7492:	279c      	movs	r7, #156	; 0x9c
    7494:	fb07 f704 	mul.w	r7, r7, r4
    7498:	f107 0318 	add.w	r3, r7, #24
    749c:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    749e:	3304      	adds	r3, #4
    74a0:	2200      	movs	r2, #0
    74a2:	2104      	movs	r1, #4
    74a4:	4640      	mov	r0, r8
    74a6:	f021 f8fb 	bl	286a0 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    74aa:	1c6b      	adds	r3, r5, #1
    74ac:	2201      	movs	r2, #1
    74ae:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    74b2:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    74b6:	ea4f 0883 	mov.w	r8, r3, lsl #2
    74ba:	44b0      	add	r8, r6
				  &conn->tx_queue);
    74bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
    74c0:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    74c2:	3304      	adds	r3, #4
    74c4:	2200      	movs	r2, #0
    74c6:	2104      	movs	r1, #4
    74c8:	4640      	mov	r0, r8
    74ca:	f021 f8e9 	bl	286a0 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    74ce:	3502      	adds	r5, #2
    74d0:	2302      	movs	r3, #2
    74d2:	f888 300c 	strb.w	r3, [r8, #12]
    74d6:	e7c0      	b.n	745a <bt_conn_prepare_events+0x4a>
    74d8:	2000bab8 	.word	0x2000bab8
    74dc:	20000514 	.word	0x20000514

000074e0 <bt_conn_set_state>:
{
    74e0:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    74e2:	7b05      	ldrb	r5, [r0, #12]
    74e4:	428d      	cmp	r5, r1
    74e6:	d00a      	beq.n	74fe <bt_conn_set_state+0x1e>
    74e8:	4604      	mov	r4, r0
	conn->state = state;
    74ea:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    74ec:	b145      	cbz	r5, 7500 <bt_conn_set_state+0x20>
    74ee:	2d02      	cmp	r5, #2
    74f0:	d009      	beq.n	7506 <bt_conn_set_state+0x26>
	switch (conn->state) {
    74f2:	7b23      	ldrb	r3, [r4, #12]
    74f4:	2b02      	cmp	r3, #2
    74f6:	d068      	beq.n	75ca <bt_conn_set_state+0xea>
    74f8:	2b03      	cmp	r3, #3
    74fa:	d00b      	beq.n	7514 <bt_conn_set_state+0x34>
    74fc:	b31b      	cbz	r3, 7546 <bt_conn_set_state+0x66>
    74fe:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    7500:	f7ff fece 	bl	72a0 <bt_conn_ref>
		break;
    7504:	e7f5      	b.n	74f2 <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    7506:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7508:	2b00      	cmp	r3, #0
    750a:	d1f2      	bne.n	74f2 <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    750c:	3074      	adds	r0, #116	; 0x74
    750e:	f022 fd6b 	bl	29fe8 <k_delayed_work_cancel>
    7512:	e7ee      	b.n	74f2 <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    7514:	78a3      	ldrb	r3, [r4, #2]
    7516:	2b02      	cmp	r3, #2
    7518:	d0f1      	beq.n	74fe <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    751a:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    751e:	f021 fbaa 	bl	28c76 <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    7522:	f104 001c 	add.w	r0, r4, #28
    7526:	f021 fba6 	bl	28c76 <k_queue_init>
		k_poll_signal(&conn_change, 0);
    752a:	2100      	movs	r1, #0
    752c:	482d      	ldr	r0, [pc, #180]	; (75e4 <bt_conn_set_state+0x104>)
    752e:	f021 fb43 	bl	28bb8 <k_poll_signal>
	list->head = NULL;
    7532:	2300      	movs	r3, #0
    7534:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    7536:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    7538:	4620      	mov	r0, r4
    753a:	f001 f87d 	bl	8638 <bt_l2cap_connected>
		notify_connected(conn);
    753e:	4620      	mov	r0, r4
    7540:	f7ff fb74 	bl	6c2c <notify_connected>
		break;
    7544:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    7546:	78a3      	ldrb	r3, [r4, #2]
    7548:	2b02      	cmp	r3, #2
    754a:	d00d      	beq.n	7568 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    754c:	1eeb      	subs	r3, r5, #3
    754e:	b2db      	uxtb	r3, r3
    7550:	2b01      	cmp	r3, #1
    7552:	d90d      	bls.n	7570 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    7554:	2d02      	cmp	r5, #2
    7556:	d02d      	beq.n	75b4 <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    7558:	2d01      	cmp	r5, #1
    755a:	d1d0      	bne.n	74fe <bt_conn_set_state+0x1e>
			if (conn->err) {
    755c:	7ae3      	ldrb	r3, [r4, #11]
    755e:	bb83      	cbnz	r3, 75c2 <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    7560:	4620      	mov	r0, r4
    7562:	f7ff ff2f 	bl	73c4 <bt_conn_unref>
    7566:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    7568:	4620      	mov	r0, r4
    756a:	f7ff ff2b 	bl	73c4 <bt_conn_unref>
			break;
    756e:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    7570:	4620      	mov	r0, r4
    7572:	f000 fd21 	bl	7fb8 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    7576:	4620      	mov	r0, r4
    7578:	f7ff fb6a 	bl	6c50 <notify_disconnected>
			process_unack_tx(conn);
    757c:	4620      	mov	r0, r4
    757e:	f7ff fc17 	bl	6db0 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    7582:	78a3      	ldrb	r3, [r4, #2]
    7584:	b18b      	cbz	r3, 75aa <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    7586:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    7588:	f3bf 8f5b 	dmb	ish
    758c:	e854 3f00 	ldrex	r3, [r4]
    7590:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    7594:	e844 3200 	strex	r2, r3, [r4]
    7598:	2a00      	cmp	r2, #0
    759a:	d1f7      	bne.n	758c <bt_conn_set_state+0xac>
    759c:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    75a0:	2100      	movs	r1, #0
    75a2:	4810      	ldr	r0, [pc, #64]	; (75e4 <bt_conn_set_state+0x104>)
    75a4:	f021 fb08 	bl	28bb8 <k_poll_signal>
    75a8:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    75aa:	f104 0074 	add.w	r0, r4, #116	; 0x74
    75ae:	f022 fd1b 	bl	29fe8 <k_delayed_work_cancel>
    75b2:	e7e8      	b.n	7586 <bt_conn_set_state+0xa6>
			notify_connected(conn);
    75b4:	4620      	mov	r0, r4
    75b6:	f7ff fb39 	bl	6c2c <notify_connected>
			bt_conn_unref(conn);
    75ba:	4620      	mov	r0, r4
    75bc:	f7ff ff02 	bl	73c4 <bt_conn_unref>
    75c0:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    75c2:	4620      	mov	r0, r4
    75c4:	f7ff fb32 	bl	6c2c <notify_connected>
    75c8:	e7ca      	b.n	7560 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    75ca:	78a3      	ldrb	r3, [r4, #2]
    75cc:	2b02      	cmp	r3, #2
    75ce:	d096      	beq.n	74fe <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    75d0:	2b00      	cmp	r3, #0
    75d2:	d194      	bne.n	74fe <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    75d4:	f640 32b8 	movw	r2, #3000	; 0xbb8
    75d8:	f104 0174 	add.w	r1, r4, #116	; 0x74
    75dc:	4802      	ldr	r0, [pc, #8]	; (75e8 <bt_conn_set_state+0x108>)
    75de:	f022 fd5d 	bl	2a09c <k_delayed_work_submit_to_queue>
    75e2:	e78c      	b.n	74fe <bt_conn_set_state+0x1e>
    75e4:	2000bab8 	.word	0x2000bab8
    75e8:	20002c78 	.word	0x20002c78

000075ec <bt_hci_disconnect>:
{
    75ec:	b570      	push	{r4, r5, r6, lr}
    75ee:	4605      	mov	r5, r0
    75f0:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    75f2:	2103      	movs	r1, #3
    75f4:	f240 4006 	movw	r0, #1030	; 0x406
    75f8:	f7fd fbac 	bl	4d54 <bt_hci_cmd_create>
	if (!buf) {
    75fc:	b1a8      	cbz	r0, 762a <bt_hci_disconnect+0x3e>
    75fe:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    7600:	2103      	movs	r1, #3
    7602:	3008      	adds	r0, #8
    7604:	f013 fc02 	bl	1ae0c <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    7608:	882b      	ldrh	r3, [r5, #0]
    760a:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    760c:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    760e:	4621      	mov	r1, r4
    7610:	f240 4006 	movw	r0, #1030	; 0x406
    7614:	f7fe f8fc 	bl	5810 <bt_hci_cmd_send>
	if (err) {
    7618:	4604      	mov	r4, r0
    761a:	b108      	cbz	r0, 7620 <bt_hci_disconnect+0x34>
}
    761c:	4620      	mov	r0, r4
    761e:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    7620:	2104      	movs	r1, #4
    7622:	4628      	mov	r0, r5
    7624:	f7ff ff5c 	bl	74e0 <bt_conn_set_state>
	return 0;
    7628:	e7f8      	b.n	761c <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    762a:	f06f 0468 	mvn.w	r4, #104	; 0x68
    762e:	e7f5      	b.n	761c <bt_hci_disconnect+0x30>

00007630 <bt_conn_get_info>:
	info->type = conn->type;
    7630:	7883      	ldrb	r3, [r0, #2]
    7632:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    7634:	78c3      	ldrb	r3, [r0, #3]
    7636:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    7638:	7883      	ldrb	r3, [r0, #2]
    763a:	b9cb      	cbnz	r3, 7670 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    763c:	78c3      	ldrb	r3, [r0, #3]
    763e:	b983      	cbnz	r3, 7662 <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    7640:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    7644:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    7646:	f100 0356 	add.w	r3, r0, #86	; 0x56
    764a:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    764c:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    7650:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    7652:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    7656:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    7658:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    765c:	820b      	strh	r3, [r1, #16]
		return 0;
    765e:	2000      	movs	r0, #0
    7660:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    7662:	f100 0356 	add.w	r3, r0, #86	; 0x56
    7666:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    7668:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    766c:	608b      	str	r3, [r1, #8]
    766e:	e7ed      	b.n	764c <bt_conn_get_info+0x1c>
	return -EINVAL;
    7670:	f06f 0015 	mvn.w	r0, #21
}
    7674:	4770      	bx	lr
	...

00007678 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    7678:	b570      	push	{r4, r5, r6, lr}
    767a:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    767c:	460d      	mov	r5, r1
    767e:	b121      	cbz	r1, 768a <bt_le_set_auto_conn+0x12>
    7680:	4608      	mov	r0, r1
    7682:	f7fd ffd1 	bl	5628 <bt_le_conn_params_valid>
    7686:	2800      	cmp	r0, #0
    7688:	d05a      	beq.n	7740 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    768a:	4630      	mov	r0, r6
    768c:	f7ff fe40 	bl	7310 <bt_conn_lookup_addr_le>
	if (!conn) {
    7690:	4604      	mov	r4, r0
    7692:	b1d8      	cbz	r0, 76cc <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    7694:	b33d      	cbz	r5, 76e6 <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    7696:	4629      	mov	r1, r5
    7698:	4620      	mov	r0, r4
    769a:	f7ff fb41 	bl	6d20 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    769e:	1d23      	adds	r3, r4, #4
    76a0:	f3bf 8f5b 	dmb	ish
    76a4:	e853 2f00 	ldrex	r2, [r3]
    76a8:	f042 0101 	orr.w	r1, r2, #1
    76ac:	e843 1000 	strex	r0, r1, [r3]
    76b0:	2800      	cmp	r0, #0
    76b2:	d1f7      	bne.n	76a4 <bt_le_set_auto_conn+0x2c>
    76b4:	f3bf 8f5b 	dmb	ish
    76b8:	f012 0f01 	tst.w	r2, #1
    76bc:	d00f      	beq.n	76de <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    76be:	7b23      	ldrb	r3, [r4, #12]
    76c0:	b363      	cbz	r3, 771c <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    76c2:	4620      	mov	r0, r4
    76c4:	f7ff fe7e 	bl	73c4 <bt_conn_unref>

	return 0;
    76c8:	2000      	movs	r0, #0
    76ca:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    76cc:	4630      	mov	r0, r6
    76ce:	f7ff fda9 	bl	7224 <bt_conn_add_le>
		if (!conn) {
    76d2:	4604      	mov	r4, r0
    76d4:	2800      	cmp	r0, #0
    76d6:	d1dd      	bne.n	7694 <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    76d8:	f06f 000b 	mvn.w	r0, #11
}
    76dc:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    76de:	4620      	mov	r0, r4
    76e0:	f7ff fdde 	bl	72a0 <bt_conn_ref>
    76e4:	e7eb      	b.n	76be <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    76e6:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    76e8:	f3bf 8f5b 	dmb	ish
    76ec:	e853 2f00 	ldrex	r2, [r3]
    76f0:	f022 0101 	bic.w	r1, r2, #1
    76f4:	e843 1000 	strex	r0, r1, [r3]
    76f8:	2800      	cmp	r0, #0
    76fa:	d1f7      	bne.n	76ec <bt_le_set_auto_conn+0x74>
    76fc:	f3bf 8f5b 	dmb	ish
    7700:	f012 0f01 	tst.w	r2, #1
    7704:	d0db      	beq.n	76be <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    7706:	4620      	mov	r0, r4
    7708:	f7ff fe5c 	bl	73c4 <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    770c:	7b23      	ldrb	r3, [r4, #12]
    770e:	2b01      	cmp	r3, #1
    7710:	d1d5      	bne.n	76be <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7712:	2100      	movs	r1, #0
    7714:	4620      	mov	r0, r4
    7716:	f7ff fee3 	bl	74e0 <bt_conn_set_state>
    771a:	e7d0      	b.n	76be <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    771c:	f3bf 8f5b 	dmb	ish
    7720:	4b09      	ldr	r3, [pc, #36]	; (7748 <bt_le_set_auto_conn+0xd0>)
    7722:	681b      	ldr	r3, [r3, #0]
    7724:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7728:	f013 0f02 	tst.w	r3, #2
    772c:	d0c9      	beq.n	76c2 <bt_le_set_auto_conn+0x4a>
		if (param) {
    772e:	b11d      	cbz	r5, 7738 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7730:	2101      	movs	r1, #1
    7732:	4620      	mov	r0, r4
    7734:	f7ff fed4 	bl	74e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    7738:	2000      	movs	r0, #0
    773a:	f7fe f919 	bl	5970 <bt_le_scan_update>
    773e:	e7c0      	b.n	76c2 <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    7740:	f06f 0015 	mvn.w	r0, #21
    7744:	bd70      	pop	{r4, r5, r6, pc}
    7746:	bf00      	nop
    7748:	2000b9f0 	.word	0x2000b9f0

0000774c <bt_conn_disconnect>:
{
    774c:	b538      	push	{r3, r4, r5, lr}
    774e:	4604      	mov	r4, r0
    7750:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    7752:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    7754:	b13b      	cbz	r3, 7766 <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    7756:	7b23      	ldrb	r3, [r4, #12]
    7758:	3b01      	subs	r3, #1
    775a:	2b03      	cmp	r3, #3
    775c:	d823      	bhi.n	77a6 <bt_conn_disconnect+0x5a>
    775e:	e8df f003 	tbb	[pc, r3]
    7762:	1309      	.short	0x1309
    7764:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    7766:	2100      	movs	r1, #0
    7768:	3048      	adds	r0, #72	; 0x48
    776a:	f7ff ff85 	bl	7678 <bt_le_set_auto_conn>
    776e:	e7f2      	b.n	7756 <bt_conn_disconnect+0xa>
		return 0;
    7770:	2000      	movs	r0, #0
    7772:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    7774:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    7776:	2100      	movs	r1, #0
    7778:	4620      	mov	r0, r4
    777a:	f7ff feb1 	bl	74e0 <bt_conn_set_state>
		bt_le_scan_update(false);
    777e:	2000      	movs	r0, #0
    7780:	f7fe f8f6 	bl	5970 <bt_le_scan_update>
		return 0;
    7784:	2000      	movs	r0, #0
    7786:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    7788:	f104 0074 	add.w	r0, r4, #116	; 0x74
    778c:	f022 fc2c 	bl	29fe8 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    7790:	2100      	movs	r1, #0
    7792:	f242 000e 	movw	r0, #8206	; 0x200e
    7796:	f7fe f83b 	bl	5810 <bt_hci_cmd_send>
    779a:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    779c:	4629      	mov	r1, r5
    779e:	4620      	mov	r0, r4
    77a0:	f7ff ff24 	bl	75ec <bt_hci_disconnect>
    77a4:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    77a6:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    77aa:	bd38      	pop	{r3, r4, r5, pc}

000077ac <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    77ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    77ae:	4607      	mov	r7, r0
    77b0:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    77b2:	210e      	movs	r1, #14
    77b4:	f242 0013 	movw	r0, #8211	; 0x2013
    77b8:	f7fd facc 	bl	4d54 <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    77bc:	b1c8      	cbz	r0, 77f2 <bt_conn_le_conn_update+0x46>
    77be:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    77c0:	210e      	movs	r1, #14
    77c2:	3008      	adds	r0, #8
    77c4:	f013 fb22 	bl	1ae0c <net_buf_simple_add>
    77c8:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    77ca:	220e      	movs	r2, #14
    77cc:	2100      	movs	r1, #0
    77ce:	f023 f8cf 	bl	2a970 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    77d2:	883b      	ldrh	r3, [r7, #0]
    77d4:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    77d6:	882b      	ldrh	r3, [r5, #0]
    77d8:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    77da:	886b      	ldrh	r3, [r5, #2]
    77dc:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    77de:	88ab      	ldrh	r3, [r5, #4]
    77e0:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    77e2:	88eb      	ldrh	r3, [r5, #6]
    77e4:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    77e6:	4631      	mov	r1, r6
    77e8:	f242 0013 	movw	r0, #8211	; 0x2013
    77ec:	f7fe f810 	bl	5810 <bt_hci_cmd_send>
    77f0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    77f2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    77f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000077f8 <bt_conn_le_param_update>:
{
    77f8:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    77fa:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    77fe:	880a      	ldrh	r2, [r1, #0]
    7800:	4293      	cmp	r3, r2
    7802:	d307      	bcc.n	7814 <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    7804:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    7806:	4293      	cmp	r3, r2
    7808:	d804      	bhi.n	7814 <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    780a:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    780e:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    7810:	429a      	cmp	r2, r3
    7812:	d016      	beq.n	7842 <bt_conn_le_param_update+0x4a>
    7814:	460d      	mov	r5, r1
    7816:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    7818:	3074      	adds	r0, #116	; 0x74
    781a:	f022 fbe5 	bl	29fe8 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    781e:	4b0f      	ldr	r3, [pc, #60]	; (785c <bt_conn_le_param_update+0x64>)
    7820:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    7824:	f013 0f02 	tst.w	r3, #2
    7828:	d004      	beq.n	7834 <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    782a:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    782e:	f013 0f02 	tst.w	r3, #2
    7832:	d101      	bne.n	7838 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    7834:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    7836:	b963      	cbnz	r3, 7852 <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    7838:	4629      	mov	r1, r5
    783a:	4620      	mov	r0, r4
    783c:	f7ff ffb6 	bl	77ac <bt_conn_le_conn_update>
    7840:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    7842:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    7846:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    7848:	429a      	cmp	r2, r3
    784a:	d1e3      	bne.n	7814 <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    784c:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7850:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    7852:	4629      	mov	r1, r5
    7854:	4620      	mov	r0, r4
    7856:	f001 f821 	bl	889c <bt_l2cap_update_conn_param>
    785a:	bd38      	pop	{r3, r4, r5, pc}
    785c:	2000b980 	.word	0x2000b980

00007860 <le_conn_update>:
{
    7860:	b500      	push	{lr}
    7862:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    7864:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    7868:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    786c:	2b02      	cmp	r3, #2
    786e:	d016      	beq.n	789e <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    7870:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    7874:	f8ad 3000 	strh.w	r3, [sp]
    7878:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    787c:	f8ad 3002 	strh.w	r3, [sp, #2]
    7880:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    7884:	f8ad 3004 	strh.w	r3, [sp, #4]
    7888:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    788c:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    7890:	4669      	mov	r1, sp
    7892:	4610      	mov	r0, r2
    7894:	f7ff ffb0 	bl	77f8 <bt_conn_le_param_update>
}
    7898:	b003      	add	sp, #12
    789a:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    789e:	2113      	movs	r1, #19
    78a0:	4610      	mov	r0, r2
    78a2:	f7ff ff53 	bl	774c <bt_conn_disconnect>
		return;
    78a6:	e7f7      	b.n	7898 <le_conn_update+0x38>

000078a8 <le_conn_update>:
{
    78a8:	b510      	push	{r4, lr}
    78aa:	b082      	sub	sp, #8
    78ac:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    78ae:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    78b0:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    78b2:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    78b4:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    78b6:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    78b8:	9201      	str	r2, [sp, #4]
    78ba:	9100      	str	r1, [sp, #0]
    78bc:	2200      	movs	r2, #0
    78be:	4611      	mov	r1, r2
    78c0:	f010 fdb6 	bl	18430 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    78c4:	b100      	cbz	r0, 78c8 <le_conn_update+0x20>
    78c6:	200c      	movs	r0, #12
    78c8:	f005 fd82 	bl	d3d0 <cmd_status>
    78cc:	6020      	str	r0, [r4, #0]
}
    78ce:	b002      	add	sp, #8
    78d0:	bd10      	pop	{r4, pc}
	...

000078d4 <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    78d4:	b538      	push	{r3, r4, r5, lr}
    78d6:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    78d8:	4603      	mov	r3, r0
    78da:	b150      	cbz	r0, 78f2 <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    78dc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    78e0:	4618      	mov	r0, r3
    78e2:	f013 f9d9 	bl	1ac98 <net_buf_alloc>
    78e6:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    78e8:	1d29      	adds	r1, r5, #4
    78ea:	f013 fa30 	bl	1ad4e <net_buf_reserve>

	return buf;
}
    78ee:	4620      	mov	r0, r4
    78f0:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    78f2:	4b01      	ldr	r3, [pc, #4]	; (78f8 <bt_conn_create_pdu+0x24>)
    78f4:	e7f2      	b.n	78dc <bt_conn_create_pdu+0x8>
    78f6:	bf00      	nop
    78f8:	2000d200 	.word	0x2000d200

000078fc <create_frag>:
{
    78fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    78fe:	4606      	mov	r6, r0
    7900:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    7902:	2100      	movs	r1, #0
    7904:	4608      	mov	r0, r1
    7906:	f7ff ffe5 	bl	78d4 <bt_conn_create_pdu>
    790a:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    790c:	7b33      	ldrb	r3, [r6, #12]
    790e:	2b03      	cmp	r3, #3
    7910:	d121      	bne.n	7956 <create_frag+0x5a>
    7912:	f100 0310 	add.w	r3, r0, #16
    7916:	89c2      	ldrh	r2, [r0, #14]
    7918:	4413      	add	r3, r2
    791a:	3303      	adds	r3, #3
    791c:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    7920:	2200      	movs	r2, #0
    7922:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    7924:	4b10      	ldr	r3, [pc, #64]	; (7968 <create_frag+0x6c>)
    7926:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    792a:	f100 0608 	add.w	r6, r0, #8
    792e:	4630      	mov	r0, r6
    7930:	f013 fad5 	bl	1aede <net_buf_simple_tailroom>
    7934:	4287      	cmp	r7, r0
    7936:	d212      	bcs.n	795e <create_frag+0x62>
	return bt_dev.le.mtu;
    7938:	4b0b      	ldr	r3, [pc, #44]	; (7968 <create_frag+0x6c>)
    793a:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    793e:	463a      	mov	r2, r7
    7940:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7944:	4630      	mov	r0, r6
    7946:	f013 fa67 	bl	1ae18 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    794a:	4639      	mov	r1, r7
    794c:	4620      	mov	r0, r4
    794e:	f013 faaa 	bl	1aea6 <net_buf_simple_pull>
}
    7952:	4628      	mov	r0, r5
    7954:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    7956:	f013 fa0d 	bl	1ad74 <net_buf_unref>
		return NULL;
    795a:	2500      	movs	r5, #0
    795c:	e7f9      	b.n	7952 <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    795e:	4630      	mov	r0, r6
    7960:	f013 fabd 	bl	1aede <net_buf_simple_tailroom>
    7964:	b287      	uxth	r7, r0
    7966:	e7ea      	b.n	793e <create_frag+0x42>
    7968:	2000b980 	.word	0x2000b980

0000796c <send_buf>:
{
    796c:	b538      	push	{r3, r4, r5, lr}
    796e:	4605      	mov	r5, r0
    7970:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    7972:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    7974:	4b1b      	ldr	r3, [pc, #108]	; (79e4 <send_buf+0x78>)
    7976:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    797a:	429a      	cmp	r2, r3
    797c:	d91f      	bls.n	79be <send_buf+0x52>
	frag = create_frag(conn, buf);
    797e:	f7ff ffbd 	bl	78fc <create_frag>
	if (!frag) {
    7982:	4601      	mov	r1, r0
    7984:	b350      	cbz	r0, 79dc <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    7986:	2301      	movs	r3, #1
    7988:	2200      	movs	r2, #0
    798a:	4628      	mov	r0, r5
    798c:	f7ff fc04 	bl	7198 <send_frag>
    7990:	4603      	mov	r3, r0
    7992:	b1c8      	cbz	r0, 79c8 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    7994:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    7996:	4a13      	ldr	r2, [pc, #76]	; (79e4 <send_buf+0x78>)
    7998:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    799c:	429a      	cmp	r2, r3
    799e:	d215      	bcs.n	79cc <send_buf+0x60>
		frag = create_frag(conn, buf);
    79a0:	4621      	mov	r1, r4
    79a2:	4628      	mov	r0, r5
    79a4:	f7ff ffaa 	bl	78fc <create_frag>
		if (!frag) {
    79a8:	4601      	mov	r1, r0
    79aa:	b1c8      	cbz	r0, 79e0 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    79ac:	2301      	movs	r3, #1
    79ae:	461a      	mov	r2, r3
    79b0:	4628      	mov	r0, r5
    79b2:	f7ff fbf1 	bl	7198 <send_frag>
    79b6:	4603      	mov	r3, r0
    79b8:	2800      	cmp	r0, #0
    79ba:	d1eb      	bne.n	7994 <send_buf+0x28>
    79bc:	e004      	b.n	79c8 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    79be:	2300      	movs	r3, #0
    79c0:	461a      	mov	r2, r3
    79c2:	f7ff fbe9 	bl	7198 <send_frag>
    79c6:	4603      	mov	r3, r0
}
    79c8:	4618      	mov	r0, r3
    79ca:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    79cc:	2300      	movs	r3, #0
    79ce:	2201      	movs	r2, #1
    79d0:	4621      	mov	r1, r4
    79d2:	4628      	mov	r0, r5
    79d4:	f7ff fbe0 	bl	7198 <send_frag>
    79d8:	4603      	mov	r3, r0
    79da:	e7f5      	b.n	79c8 <send_buf+0x5c>
		return false;
    79dc:	2300      	movs	r3, #0
    79de:	e7f3      	b.n	79c8 <send_buf+0x5c>
			return false;
    79e0:	2300      	movs	r3, #0
    79e2:	e7f1      	b.n	79c8 <send_buf+0x5c>
    79e4:	2000b980 	.word	0x2000b980

000079e8 <bt_conn_process_tx>:
{
    79e8:	b538      	push	{r3, r4, r5, lr}
    79ea:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    79ec:	7b03      	ldrb	r3, [r0, #12]
    79ee:	b97b      	cbnz	r3, 7a10 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    79f0:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    79f2:	f3bf 8f5b 	dmb	ish
    79f6:	e853 2f00 	ldrex	r2, [r3]
    79fa:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    79fe:	e843 1000 	strex	r0, r1, [r3]
    7a02:	2800      	cmp	r0, #0
    7a04:	d1f7      	bne.n	79f6 <bt_conn_process_tx+0xe>
    7a06:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    7a0a:	f012 0f40 	tst.w	r2, #64	; 0x40
    7a0e:	d10c      	bne.n	7a2a <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    7a10:	2100      	movs	r1, #0
    7a12:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    7a16:	f013 f980 	bl	1ad1a <net_buf_get>
	BT_ASSERT(buf);
    7a1a:	4605      	mov	r5, r0
    7a1c:	b148      	cbz	r0, 7a32 <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    7a1e:	4601      	mov	r1, r0
    7a20:	4620      	mov	r0, r4
    7a22:	f7ff ffa3 	bl	796c <send_buf>
    7a26:	b150      	cbz	r0, 7a3e <bt_conn_process_tx+0x56>
    7a28:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    7a2a:	4620      	mov	r0, r4
    7a2c:	f7ff fcd7 	bl	73de <conn_cleanup>
		return;
    7a30:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    7a32:	4040      	eors	r0, r0
    7a34:	f380 8811 	msr	BASEPRI, r0
    7a38:	f04f 0004 	mov.w	r0, #4
    7a3c:	df02      	svc	2
		net_buf_unref(buf);
    7a3e:	4628      	mov	r0, r5
    7a40:	f013 f998 	bl	1ad74 <net_buf_unref>
    7a44:	e7f0      	b.n	7a28 <bt_conn_process_tx+0x40>
	...

00007a48 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    7a48:	4b03      	ldr	r3, [pc, #12]	; (7a58 <bt_conn_get_id+0x10>)
    7a4a:	1ac0      	subs	r0, r0, r3
    7a4c:	1080      	asrs	r0, r0, #2
    7a4e:	4b03      	ldr	r3, [pc, #12]	; (7a5c <bt_conn_get_id+0x14>)
    7a50:	fb03 f000 	mul.w	r0, r3, r0
}
    7a54:	b2c0      	uxtb	r0, r0
    7a56:	4770      	bx	lr
    7a58:	20000514 	.word	0x20000514
    7a5c:	96f96f97 	.word	0x96f96f97

00007a60 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7a60:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    7a62:	2300      	movs	r3, #0
    7a64:	e000      	b.n	7a68 <bt_conn_init+0x8>
    7a66:	3301      	adds	r3, #1
    7a68:	2b01      	cmp	r3, #1
    7a6a:	d80d      	bhi.n	7a88 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    7a6c:	491a      	ldr	r1, [pc, #104]	; (7ad8 <bt_conn_init+0x78>)
    7a6e:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    7a72:	4a1a      	ldr	r2, [pc, #104]	; (7adc <bt_conn_init+0x7c>)
    7a74:	6814      	ldr	r4, [r2, #0]
    7a76:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    7a7a:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    7a7c:	6852      	ldr	r2, [r2, #4]
    7a7e:	2a00      	cmp	r2, #0
    7a80:	d1f1      	bne.n	7a66 <bt_conn_init+0x6>
		list->tail = list->head;
    7a82:	4a16      	ldr	r2, [pc, #88]	; (7adc <bt_conn_init+0x7c>)
    7a84:	6050      	str	r0, [r2, #4]
    7a86:	e7ee      	b.n	7a66 <bt_conn_init+0x6>
	}

	bt_att_init();
    7a88:	f002 fa68 	bl	9f5c <bt_att_init>

	err = bt_smp_init();
    7a8c:	f005 fba2 	bl	d1d4 <bt_smp_init>
	if (err) {
    7a90:	4605      	mov	r5, r0
    7a92:	b108      	cbz	r0, 7a98 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    7a94:	4628      	mov	r0, r5
    7a96:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    7a98:	f000 ff20 	bl	88dc <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7a9c:	462c      	mov	r4, r5
    7a9e:	2c00      	cmp	r4, #0
    7aa0:	d1f8      	bne.n	7a94 <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    7aa2:	4a0f      	ldr	r2, [pc, #60]	; (7ae0 <bt_conn_init+0x80>)
    7aa4:	239c      	movs	r3, #156	; 0x9c
    7aa6:	fb03 f304 	mul.w	r3, r3, r4
    7aaa:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    7aac:	3340      	adds	r3, #64	; 0x40
    7aae:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7ab0:	f3bf 8f5b 	dmb	ish
    7ab4:	685b      	ldr	r3, [r3, #4]
    7ab6:	f3bf 8f5b 	dmb	ish
    7aba:	b90b      	cbnz	r3, 7ac0 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7abc:	3401      	adds	r4, #1
    7abe:	e7ee      	b.n	7a9e <bt_conn_init+0x3e>
    7ac0:	f3bf 8f5b 	dmb	ish
    7ac4:	6843      	ldr	r3, [r0, #4]
    7ac6:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    7aca:	f013 0f01 	tst.w	r3, #1
    7ace:	d0f5      	beq.n	7abc <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    7ad0:	2101      	movs	r1, #1
    7ad2:	f7ff fd05 	bl	74e0 <bt_conn_set_state>
    7ad6:	e7f1      	b.n	7abc <bt_conn_init+0x5c>
    7ad8:	20000504 	.word	0x20000504
    7adc:	200006a0 	.word	0x200006a0
    7ae0:	20000514 	.word	0x20000514

00007ae4 <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    7ae4:	4a05      	ldr	r2, [pc, #20]	; (7afc <get_ident+0x18>)
    7ae6:	7813      	ldrb	r3, [r2, #0]
    7ae8:	3301      	adds	r3, #1
    7aea:	b2db      	uxtb	r3, r3
    7aec:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    7aee:	b90b      	cbnz	r3, 7af4 <get_ident+0x10>
		ident++;
    7af0:	3301      	adds	r3, #1
    7af2:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    7af4:	4b01      	ldr	r3, [pc, #4]	; (7afc <get_ident+0x18>)
    7af6:	7818      	ldrb	r0, [r3, #0]
    7af8:	4770      	bx	lr
    7afa:	bf00      	nop
    7afc:	20000744 	.word	0x20000744

00007b00 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    7b00:	b430      	push	{r4, r5}
	return list->head;
    7b02:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b04:	b113      	cbz	r3, 7b0c <__l2cap_lookup_ident+0xc>
    7b06:	3b08      	subs	r3, #8
    7b08:	2400      	movs	r4, #0
    7b0a:	e01b      	b.n	7b44 <__l2cap_lookup_ident+0x44>
    7b0c:	2300      	movs	r3, #0
    7b0e:	e7fb      	b.n	7b08 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    7b10:	b35a      	cbz	r2, 7b6a <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    7b12:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    7b16:	b144      	cbz	r4, 7b2a <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    7b18:	6899      	ldr	r1, [r3, #8]
    7b1a:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    7b1c:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7b1e:	428a      	cmp	r2, r1
    7b20:	d00a      	beq.n	7b38 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    7b22:	2200      	movs	r2, #0
    7b24:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    7b26:	4618      	mov	r0, r3
    7b28:	e01d      	b.n	7b66 <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    7b2a:	6899      	ldr	r1, [r3, #8]
    7b2c:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7b2e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7b30:	4294      	cmp	r4, r2
    7b32:	d1f6      	bne.n	7b22 <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    7b34:	6401      	str	r1, [r0, #64]	; 0x40
    7b36:	e7f4      	b.n	7b22 <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7b38:	6404      	str	r4, [r0, #64]	; 0x40
    7b3a:	e7f2      	b.n	7b22 <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b3c:	4625      	mov	r5, r4
    7b3e:	e00a      	b.n	7b56 <__l2cap_lookup_ident+0x56>
    7b40:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b42:	3b08      	subs	r3, #8
    7b44:	b173      	cbz	r3, 7b64 <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    7b46:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    7b4a:	428d      	cmp	r5, r1
    7b4c:	d0e0      	beq.n	7b10 <__l2cap_lookup_ident+0x10>
    7b4e:	f113 0408 	adds.w	r4, r3, #8
    7b52:	d0f3      	beq.n	7b3c <__l2cap_lookup_ident+0x3c>
	return node->next;
    7b54:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b56:	b11d      	cbz	r5, 7b60 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b58:	2c00      	cmp	r4, #0
    7b5a:	d0f1      	beq.n	7b40 <__l2cap_lookup_ident+0x40>
	return node->next;
    7b5c:	689b      	ldr	r3, [r3, #8]
    7b5e:	e7f0      	b.n	7b42 <__l2cap_lookup_ident+0x42>
    7b60:	2300      	movs	r3, #0
    7b62:	e7ef      	b.n	7b44 <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    7b64:	2000      	movs	r0, #0
}
    7b66:	bc30      	pop	{r4, r5}
    7b68:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    7b6a:	4618      	mov	r0, r3
    7b6c:	e7fb      	b.n	7b66 <__l2cap_lookup_ident+0x66>
	...

00007b70 <l2cap_server_lookup_psm>:
	return list->head;
    7b70:	4b0d      	ldr	r3, [pc, #52]	; (7ba8 <l2cap_server_lookup_psm+0x38>)
    7b72:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b74:	b10b      	cbz	r3, 7b7a <l2cap_server_lookup_psm+0xa>
    7b76:	3b08      	subs	r3, #8
    7b78:	e006      	b.n	7b88 <l2cap_server_lookup_psm+0x18>
    7b7a:	2300      	movs	r3, #0
    7b7c:	e004      	b.n	7b88 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b7e:	4611      	mov	r1, r2
    7b80:	e00a      	b.n	7b98 <l2cap_server_lookup_psm+0x28>
	return node->next;
    7b82:	689a      	ldr	r2, [r3, #8]
    7b84:	f1a2 0308 	sub.w	r3, r2, #8
    7b88:	b163      	cbz	r3, 7ba4 <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    7b8a:	881a      	ldrh	r2, [r3, #0]
    7b8c:	4282      	cmp	r2, r0
    7b8e:	d009      	beq.n	7ba4 <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b90:	f113 0208 	adds.w	r2, r3, #8
    7b94:	d0f3      	beq.n	7b7e <l2cap_server_lookup_psm+0xe>
	return node->next;
    7b96:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7b98:	b111      	cbz	r1, 7ba0 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b9a:	2a00      	cmp	r2, #0
    7b9c:	d1f1      	bne.n	7b82 <l2cap_server_lookup_psm+0x12>
    7b9e:	e7f1      	b.n	7b84 <l2cap_server_lookup_psm+0x14>
    7ba0:	2300      	movs	r3, #0
    7ba2:	e7f1      	b.n	7b88 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    7ba4:	4618      	mov	r0, r3
    7ba6:	4770      	bx	lr
    7ba8:	20000750 	.word	0x20000750

00007bac <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    7bac:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    7bb0:	b29b      	uxth	r3, r3
    7bb2:	2b3f      	cmp	r3, #63	; 0x3f
    7bb4:	d835      	bhi.n	7c22 <l2cap_remove_tx_cid+0x76>
	return list->head;
    7bb6:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7bb8:	b12b      	cbz	r3, 7bc6 <l2cap_remove_tx_cid+0x1a>
    7bba:	3b08      	subs	r3, #8
    7bbc:	2200      	movs	r2, #0
    7bbe:	2b00      	cmp	r3, #0
    7bc0:	d031      	beq.n	7c26 <l2cap_remove_tx_cid+0x7a>
{
    7bc2:	b410      	push	{r4}
    7bc4:	e01c      	b.n	7c00 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7bc6:	2300      	movs	r3, #0
    7bc8:	e7f8      	b.n	7bbc <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7bca:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7bce:	b14a      	cbz	r2, 7be4 <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    7bd0:	689c      	ldr	r4, [r3, #8]
    7bd2:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7bd4:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7bd6:	42a1      	cmp	r1, r4
    7bd8:	d00b      	beq.n	7bf2 <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    7bda:	2200      	movs	r2, #0
    7bdc:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    7bde:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    7be0:	bc10      	pop	{r4}
    7be2:	4770      	bx	lr
		list->head = node->next;
    7be4:	689a      	ldr	r2, [r3, #8]
    7be6:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7be8:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7bea:	428c      	cmp	r4, r1
    7bec:	d1f5      	bne.n	7bda <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    7bee:	6402      	str	r2, [r0, #64]	; 0x40
    7bf0:	e7f3      	b.n	7bda <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    7bf2:	6402      	str	r2, [r0, #64]	; 0x40
    7bf4:	e7f1      	b.n	7bda <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7bf6:	4614      	mov	r4, r2
    7bf8:	e00a      	b.n	7c10 <l2cap_remove_tx_cid+0x64>
    7bfa:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7bfc:	3b08      	subs	r3, #8
    7bfe:	b173      	cbz	r3, 7c1e <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7c00:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    7c04:	42a1      	cmp	r1, r4
    7c06:	d0e0      	beq.n	7bca <l2cap_remove_tx_cid+0x1e>
    7c08:	f113 0208 	adds.w	r2, r3, #8
    7c0c:	d0f3      	beq.n	7bf6 <l2cap_remove_tx_cid+0x4a>
	return node->next;
    7c0e:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7c10:	b11c      	cbz	r4, 7c1a <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c12:	2a00      	cmp	r2, #0
    7c14:	d0f1      	beq.n	7bfa <l2cap_remove_tx_cid+0x4e>
	return node->next;
    7c16:	689b      	ldr	r3, [r3, #8]
    7c18:	e7f0      	b.n	7bfc <l2cap_remove_tx_cid+0x50>
    7c1a:	2300      	movs	r3, #0
    7c1c:	e7ef      	b.n	7bfe <l2cap_remove_tx_cid+0x52>
	return NULL;
    7c1e:	2000      	movs	r0, #0
    7c20:	e7de      	b.n	7be0 <l2cap_remove_tx_cid+0x34>
		return NULL;
    7c22:	2000      	movs	r0, #0
    7c24:	4770      	bx	lr
	return NULL;
    7c26:	2000      	movs	r0, #0
}
    7c28:	4770      	bx	lr

00007c2a <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    7c2a:	4770      	bx	lr

00007c2c <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    7c2c:	4770      	bx	lr
	...

00007c30 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7c30:	2000      	movs	r0, #0
    7c32:	b110      	cbz	r0, 7c3a <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    7c34:	f06f 000b 	mvn.w	r0, #11
}
    7c38:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7c3a:	239c      	movs	r3, #156	; 0x9c
    7c3c:	fb03 f300 	mul.w	r3, r3, r0
    7c40:	4a06      	ldr	r2, [pc, #24]	; (7c5c <l2cap_accept+0x2c>)
    7c42:	58d3      	ldr	r3, [r2, r3]
    7c44:	b10b      	cbz	r3, 7c4a <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7c46:	3001      	adds	r0, #1
    7c48:	e7f3      	b.n	7c32 <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7c4a:	239c      	movs	r3, #156	; 0x9c
    7c4c:	4a03      	ldr	r2, [pc, #12]	; (7c5c <l2cap_accept+0x2c>)
    7c4e:	fb03 2300 	mla	r3, r3, r0, r2
    7c52:	4a03      	ldr	r2, [pc, #12]	; (7c60 <l2cap_accept+0x30>)
    7c54:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    7c56:	600b      	str	r3, [r1, #0]
		return 0;
    7c58:	4770      	bx	lr
    7c5a:	bf00      	nop
    7c5c:	200006a8 	.word	0x200006a8
    7c60:	2000bad4 	.word	0x2000bad4

00007c64 <l2cap_alloc_frag>:
{
    7c64:	b538      	push	{r3, r4, r5, lr}
    7c66:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7c68:	6843      	ldr	r3, [r0, #4]
    7c6a:	68db      	ldr	r3, [r3, #12]
    7c6c:	4798      	blx	r3
	if (!frag) {
    7c6e:	4604      	mov	r4, r0
    7c70:	b120      	cbz	r0, 7c7c <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    7c72:	4601      	mov	r1, r0
    7c74:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7c78:	f013 f8ad 	bl	1add6 <net_buf_frag_add>
}
    7c7c:	4620      	mov	r0, r4
    7c7e:	bd38      	pop	{r3, r4, r5, pc}

00007c80 <l2cap_chan_rx_give_credits>:
{
    7c80:	b538      	push	{r3, r4, r5, lr}
    7c82:	4605      	mov	r5, r0
	while (credits--) {
    7c84:	e004      	b.n	7c90 <l2cap_chan_rx_give_credits+0x10>
    7c86:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7c8a:	f021 fbbe 	bl	2940a <_impl_k_sem_give>
    7c8e:	4621      	mov	r1, r4
    7c90:	1e4b      	subs	r3, r1, #1
    7c92:	b29c      	uxth	r4, r3
    7c94:	2900      	cmp	r1, #0
    7c96:	d1f6      	bne.n	7c86 <l2cap_chan_rx_give_credits+0x6>
}
    7c98:	bd38      	pop	{r3, r4, r5, pc}

00007c9a <l2cap_chan_tx_give_credits>:
{
    7c9a:	b538      	push	{r3, r4, r5, lr}
    7c9c:	4605      	mov	r5, r0
	while (credits--) {
    7c9e:	e004      	b.n	7caa <l2cap_chan_tx_give_credits+0x10>
    7ca0:	f105 0068 	add.w	r0, r5, #104	; 0x68
    7ca4:	f021 fbb1 	bl	2940a <_impl_k_sem_give>
    7ca8:	4621      	mov	r1, r4
    7caa:	1e4b      	subs	r3, r1, #1
    7cac:	b29c      	uxth	r4, r3
    7cae:	2900      	cmp	r1, #0
    7cb0:	d1f6      	bne.n	7ca0 <l2cap_chan_tx_give_credits+0x6>
}
    7cb2:	bd38      	pop	{r3, r4, r5, pc}

00007cb4 <l2cap_chan_destroy>:
{
    7cb4:	b510      	push	{r4, lr}
    7cb6:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    7cb8:	3010      	adds	r0, #16
    7cba:	f022 f995 	bl	29fe8 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7cbe:	e002      	b.n	7cc6 <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    7cc0:	4618      	mov	r0, r3
    7cc2:	f013 f857 	bl	1ad74 <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    7cc6:	2100      	movs	r1, #0
    7cc8:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7ccc:	f013 f825 	bl	1ad1a <net_buf_get>
    7cd0:	4603      	mov	r3, r0
    7cd2:	2800      	cmp	r0, #0
    7cd4:	d1f4      	bne.n	7cc0 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    7cd6:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    7cda:	b130      	cbz	r0, 7cea <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    7cdc:	f013 f84a 	bl	1ad74 <net_buf_unref>
		ch->_sdu = NULL;
    7ce0:	2300      	movs	r3, #0
    7ce2:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    7ce6:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    7cea:	bd10      	pop	{r4, pc}

00007cec <l2cap_chan_le_get_tx_buf>:
{
    7cec:	b508      	push	{r3, lr}
    7cee:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    7cf0:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    7cf4:	b118      	cbz	r0, 7cfe <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    7cf6:	2200      	movs	r2, #0
    7cf8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    7cfc:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    7cfe:	2100      	movs	r1, #0
    7d00:	f103 0080 	add.w	r0, r3, #128	; 0x80
    7d04:	f013 f809 	bl	1ad1a <net_buf_get>
}
    7d08:	bd08      	pop	{r3, pc}

00007d0a <l2cap_chan_tx_init>:
{
    7d0a:	b510      	push	{r4, lr}
    7d0c:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    7d0e:	2220      	movs	r2, #32
    7d10:	2100      	movs	r1, #0
    7d12:	3060      	adds	r0, #96	; 0x60
    7d14:	f022 fe2c 	bl	2a970 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7d18:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d1c:	2100      	movs	r1, #0
    7d1e:	f104 0068 	add.w	r0, r4, #104	; 0x68
    7d22:	f021 fb69 	bl	293f8 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    7d26:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7d2a:	f020 ffa4 	bl	28c76 <k_queue_init>
    7d2e:	bd10      	pop	{r4, pc}

00007d30 <l2cap_chan_rx_init>:
{
    7d30:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    7d32:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7d36:	b913      	cbnz	r3, 7d3e <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7d38:	2342      	movs	r3, #66	; 0x42
    7d3a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7d3e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    7d42:	b96b      	cbnz	r3, 7d60 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    7d44:	6843      	ldr	r3, [r0, #4]
    7d46:	68db      	ldr	r3, [r3, #12]
    7d48:	b1cb      	cbz	r3, 7d7e <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7d4a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7d4e:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7d50:	4a0d      	ldr	r2, [pc, #52]	; (7d88 <l2cap_chan_rx_init+0x58>)
    7d52:	fb82 1203 	smull	r1, r2, r2, r3
    7d56:	17db      	asrs	r3, r3, #31
    7d58:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7d5c:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7d60:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7d64:	3302      	adds	r3, #2
    7d66:	2b44      	cmp	r3, #68	; 0x44
    7d68:	bfa8      	it	ge
    7d6a:	2344      	movge	r3, #68	; 0x44
    7d6c:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7d70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7d74:	2100      	movs	r1, #0
    7d76:	3048      	adds	r0, #72	; 0x48
    7d78:	f021 fb3e 	bl	293f8 <_impl_k_sem_init>
    7d7c:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7d7e:	2302      	movs	r3, #2
    7d80:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    7d84:	e7ec      	b.n	7d60 <l2cap_chan_rx_init+0x30>
    7d86:	bf00      	nop
    7d88:	78787879 	.word	0x78787879

00007d8c <l2cap_change_security>:
{
    7d8c:	b508      	push	{r3, lr}
	switch (err) {
    7d8e:	2905      	cmp	r1, #5
    7d90:	d00e      	beq.n	7db0 <l2cap_change_security+0x24>
    7d92:	2908      	cmp	r1, #8
    7d94:	d120      	bne.n	7dd8 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    7d96:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7d9a:	2b01      	cmp	r3, #1
    7d9c:	d81f      	bhi.n	7dde <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7d9e:	2302      	movs	r3, #2
    7da0:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    7da4:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7da8:	6800      	ldr	r0, [r0, #0]
    7daa:	f7ff f917 	bl	6fdc <bt_conn_security>
    7dae:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7db0:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7db4:	2b01      	cmp	r3, #1
    7db6:	d905      	bls.n	7dc4 <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    7db8:	2b02      	cmp	r3, #2
    7dba:	d807      	bhi.n	7dcc <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    7dbc:	2303      	movs	r3, #3
    7dbe:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7dc2:	e7ef      	b.n	7da4 <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7dc4:	2302      	movs	r3, #2
    7dc6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7dca:	e7eb      	b.n	7da4 <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    7dcc:	2b03      	cmp	r3, #3
    7dce:	d809      	bhi.n	7de4 <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    7dd0:	2304      	movs	r3, #4
    7dd2:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    7dd6:	e7e5      	b.n	7da4 <l2cap_change_security+0x18>
		return -EINVAL;
    7dd8:	f06f 0015 	mvn.w	r0, #21
    7ddc:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7dde:	f06f 0077 	mvn.w	r0, #119	; 0x77
    7de2:	bd08      	pop	{r3, pc}
			return -EALREADY;
    7de4:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    7de8:	bd08      	pop	{r3, pc}
	...

00007dec <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    7dec:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    7df0:	2200      	movs	r2, #0
    7df2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    7df4:	4a05      	ldr	r2, [pc, #20]	; (7e0c <bt_l2cap_le_fixed_chan_register+0x20>)
    7df6:	6852      	ldr	r2, [r2, #4]
    7df8:	b11a      	cbz	r2, 7e02 <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    7dfa:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7dfc:	4a03      	ldr	r2, [pc, #12]	; (7e0c <bt_l2cap_le_fixed_chan_register+0x20>)
    7dfe:	6053      	str	r3, [r2, #4]
    7e00:	4770      	bx	lr
		list->tail = node;
    7e02:	4a02      	ldr	r2, [pc, #8]	; (7e0c <bt_l2cap_le_fixed_chan_register+0x20>)
    7e04:	6053      	str	r3, [r2, #4]
		list->head = node;
    7e06:	6013      	str	r3, [r2, #0]
    7e08:	4770      	bx	lr
    7e0a:	bf00      	nop
    7e0c:	20000748 	.word	0x20000748

00007e10 <bt_l2cap_chan_remove>:
	return list->head;
    7e10:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7e12:	b123      	cbz	r3, 7e1e <bt_l2cap_chan_remove+0xe>
    7e14:	3b08      	subs	r3, #8
    7e16:	2200      	movs	r2, #0
    7e18:	b35b      	cbz	r3, 7e72 <bt_l2cap_chan_remove+0x62>
{
    7e1a:	b410      	push	{r4}
    7e1c:	e01c      	b.n	7e58 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7e1e:	2300      	movs	r3, #0
    7e20:	e7f9      	b.n	7e16 <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    7e22:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    7e26:	b142      	cbz	r2, 7e3a <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7e28:	689c      	ldr	r4, [r3, #8]
    7e2a:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7e2c:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7e2e:	42a1      	cmp	r1, r4
    7e30:	d00a      	beq.n	7e48 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    7e32:	2200      	movs	r2, #0
    7e34:	609a      	str	r2, [r3, #8]
}
    7e36:	bc10      	pop	{r4}
    7e38:	4770      	bx	lr
		list->head = node->next;
    7e3a:	689a      	ldr	r2, [r3, #8]
    7e3c:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7e3e:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7e40:	428c      	cmp	r4, r1
    7e42:	d1f6      	bne.n	7e32 <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    7e44:	6402      	str	r2, [r0, #64]	; 0x40
    7e46:	e7f4      	b.n	7e32 <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7e48:	6402      	str	r2, [r0, #64]	; 0x40
    7e4a:	e7f2      	b.n	7e32 <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7e4c:	4614      	mov	r4, r2
    7e4e:	e009      	b.n	7e64 <bt_l2cap_chan_remove+0x54>
    7e50:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7e52:	3b08      	subs	r3, #8
    7e54:	2b00      	cmp	r3, #0
    7e56:	d0ee      	beq.n	7e36 <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7e58:	428b      	cmp	r3, r1
    7e5a:	d0e2      	beq.n	7e22 <bt_l2cap_chan_remove+0x12>
    7e5c:	f113 0208 	adds.w	r2, r3, #8
    7e60:	d0f4      	beq.n	7e4c <bt_l2cap_chan_remove+0x3c>
	return node->next;
    7e62:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7e64:	b11c      	cbz	r4, 7e6e <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7e66:	2a00      	cmp	r2, #0
    7e68:	d0f2      	beq.n	7e50 <bt_l2cap_chan_remove+0x40>
	return node->next;
    7e6a:	689b      	ldr	r3, [r3, #8]
    7e6c:	e7f1      	b.n	7e52 <bt_l2cap_chan_remove+0x42>
    7e6e:	2300      	movs	r3, #0
    7e70:	e7f0      	b.n	7e54 <bt_l2cap_chan_remove+0x44>
    7e72:	4770      	bx	lr

00007e74 <bt_l2cap_chan_set_state>:
	chan->state = state;
    7e74:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7e78:	4770      	bx	lr

00007e7a <bt_l2cap_chan_del>:
{
    7e7a:	b510      	push	{r4, lr}
    7e7c:	4604      	mov	r4, r0
	if (!chan->conn) {
    7e7e:	6803      	ldr	r3, [r0, #0]
    7e80:	b12b      	cbz	r3, 7e8e <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    7e82:	6843      	ldr	r3, [r0, #4]
    7e84:	685b      	ldr	r3, [r3, #4]
    7e86:	b103      	cbz	r3, 7e8a <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7e88:	4798      	blx	r3
	chan->conn = NULL;
    7e8a:	2300      	movs	r3, #0
    7e8c:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7e8e:	2100      	movs	r1, #0
    7e90:	4620      	mov	r0, r4
    7e92:	f7ff ffef 	bl	7e74 <bt_l2cap_chan_set_state>
	chan->psm = 0;
    7e96:	2300      	movs	r3, #0
    7e98:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7e9a:	68e3      	ldr	r3, [r4, #12]
    7e9c:	b10b      	cbz	r3, 7ea2 <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7e9e:	4620      	mov	r0, r4
    7ea0:	4798      	blx	r3
    7ea2:	bd10      	pop	{r4, pc}

00007ea4 <l2cap_rtx_timeout>:
{
    7ea4:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    7ea6:	f1a0 0410 	sub.w	r4, r0, #16
    7eaa:	4621      	mov	r1, r4
    7eac:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7eb0:	f7ff ffae 	bl	7e10 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    7eb4:	4620      	mov	r0, r4
    7eb6:	f7ff ffe0 	bl	7e7a <bt_l2cap_chan_del>
    7eba:	bd10      	pop	{r4, pc}

00007ebc <le_conn_rsp>:
{
    7ebc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7ec0:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    7ec2:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7ec4:	8992      	ldrh	r2, [r2, #12]
    7ec6:	2a09      	cmp	r2, #9
    7ec8:	d927      	bls.n	7f1a <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    7eca:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    7ece:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    7ed2:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    7ed6:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    7ed8:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    7eda:	b14d      	cbz	r5, 7ef0 <le_conn_rsp+0x34>
    7edc:	2d05      	cmp	r5, #5
    7ede:	d007      	beq.n	7ef0 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    7ee0:	2d08      	cmp	r5, #8
    7ee2:	d005      	beq.n	7ef0 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    7ee4:	2201      	movs	r2, #1
    7ee6:	4630      	mov	r0, r6
    7ee8:	f7ff fe0a 	bl	7b00 <__l2cap_lookup_ident>
    7eec:	4604      	mov	r4, r0
    7eee:	e004      	b.n	7efa <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    7ef0:	2200      	movs	r2, #0
    7ef2:	4630      	mov	r0, r6
    7ef4:	f7ff fe04 	bl	7b00 <__l2cap_lookup_ident>
    7ef8:	4604      	mov	r4, r0
	if (!chan) {
    7efa:	b174      	cbz	r4, 7f1a <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    7efc:	f104 0010 	add.w	r0, r4, #16
    7f00:	f022 f872 	bl	29fe8 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    7f04:	2300      	movs	r3, #0
    7f06:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    7f0a:	2d05      	cmp	r5, #5
    7f0c:	d021      	beq.n	7f52 <le_conn_rsp+0x96>
    7f0e:	2d08      	cmp	r5, #8
    7f10:	d01f      	beq.n	7f52 <le_conn_rsp+0x96>
    7f12:	b125      	cbz	r5, 7f1e <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    7f14:	4620      	mov	r0, r4
    7f16:	f7ff ffb0 	bl	7e7a <bt_l2cap_chan_del>
    7f1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7f1e:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    7f22:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    7f26:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7f2a:	2103      	movs	r1, #3
    7f2c:	4620      	mov	r0, r4
    7f2e:	f7ff ffa1 	bl	7e74 <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    7f32:	6863      	ldr	r3, [r4, #4]
    7f34:	681b      	ldr	r3, [r3, #0]
    7f36:	b10b      	cbz	r3, 7f3c <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7f38:	4620      	mov	r0, r4
    7f3a:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7f3c:	4639      	mov	r1, r7
    7f3e:	4620      	mov	r0, r4
    7f40:	f7ff feab 	bl	7c9a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    7f44:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7f48:	4620      	mov	r0, r4
    7f4a:	f7ff fe99 	bl	7c80 <l2cap_chan_rx_give_credits>
		break;
    7f4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    7f52:	4629      	mov	r1, r5
    7f54:	4620      	mov	r0, r4
    7f56:	f7ff ff19 	bl	7d8c <l2cap_change_security>
    7f5a:	2800      	cmp	r0, #0
    7f5c:	d0dd      	beq.n	7f1a <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7f5e:	4621      	mov	r1, r4
    7f60:	4630      	mov	r0, r6
    7f62:	f7ff ff55 	bl	7e10 <bt_l2cap_chan_remove>
    7f66:	e7d5      	b.n	7f14 <le_conn_rsp+0x58>

00007f68 <le_disconn_rsp>:
{
    7f68:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7f6a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7f6c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7f6e:	8993      	ldrh	r3, [r2, #12]
    7f70:	2b03      	cmp	r3, #3
    7f72:	d800      	bhi.n	7f76 <le_disconn_rsp+0xe>
    7f74:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    7f76:	8809      	ldrh	r1, [r1, #0]
    7f78:	f7ff fe18 	bl	7bac <l2cap_remove_tx_cid>
	if (!chan) {
    7f7c:	2800      	cmp	r0, #0
    7f7e:	d0f9      	beq.n	7f74 <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7f80:	f7ff ff7b 	bl	7e7a <bt_l2cap_chan_del>
    7f84:	e7f6      	b.n	7f74 <le_disconn_rsp+0xc>

00007f86 <reject_cmd>:
{
    7f86:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7f88:	2201      	movs	r2, #1
    7f8a:	6800      	ldr	r0, [r0, #0]
    7f8c:	f7ff fdb8 	bl	7b00 <__l2cap_lookup_ident>
	if (!chan) {
    7f90:	b108      	cbz	r0, 7f96 <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    7f92:	f7ff ff72 	bl	7e7a <bt_l2cap_chan_del>
    7f96:	bd08      	pop	{r3, pc}

00007f98 <bt_l2cap_chan_add>:
{
    7f98:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7f9a:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7f9e:	2400      	movs	r4, #0
    7fa0:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    7fa2:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7fa4:	b12c      	cbz	r4, 7fb2 <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    7fa6:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7fa8:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7faa:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7fac:	60ca      	str	r2, [r1, #12]
}
    7fae:	bc10      	pop	{r4}
    7fb0:	4770      	bx	lr
		list->tail = node;
    7fb2:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    7fb4:	63c3      	str	r3, [r0, #60]	; 0x3c
    7fb6:	e7f8      	b.n	7faa <bt_l2cap_chan_add+0x12>

00007fb8 <bt_l2cap_disconnected>:
{
    7fb8:	b510      	push	{r4, lr}
	return list->head;
    7fba:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7fbc:	b140      	cbz	r0, 7fd0 <bt_l2cap_disconnected+0x18>
    7fbe:	3808      	subs	r0, #8
    7fc0:	b140      	cbz	r0, 7fd4 <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7fc2:	f110 0408 	adds.w	r4, r0, #8
    7fc6:	d000      	beq.n	7fca <bt_l2cap_disconnected+0x12>
	return node->next;
    7fc8:	6884      	ldr	r4, [r0, #8]
    7fca:	b12c      	cbz	r4, 7fd8 <bt_l2cap_disconnected+0x20>
    7fcc:	3c08      	subs	r4, #8
    7fce:	e00a      	b.n	7fe6 <bt_l2cap_disconnected+0x2e>
    7fd0:	2000      	movs	r0, #0
    7fd2:	e7f5      	b.n	7fc0 <bt_l2cap_disconnected+0x8>
    7fd4:	4604      	mov	r4, r0
    7fd6:	e006      	b.n	7fe6 <bt_l2cap_disconnected+0x2e>
    7fd8:	2400      	movs	r4, #0
    7fda:	e004      	b.n	7fe6 <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7fdc:	461a      	mov	r2, r3
    7fde:	e00a      	b.n	7ff6 <bt_l2cap_disconnected+0x3e>
    7fe0:	3b08      	subs	r3, #8
    7fe2:	4620      	mov	r0, r4
    7fe4:	461c      	mov	r4, r3
    7fe6:	b178      	cbz	r0, 8008 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x8>
		bt_l2cap_chan_del(chan);
    7fe8:	f7ff ff47 	bl	7e7a <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    7fec:	b144      	cbz	r4, 8000 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC>
    7fee:	f114 0308 	adds.w	r3, r4, #8
    7ff2:	d0f3      	beq.n	7fdc <bt_l2cap_disconnected+0x24>
	return node->next;
    7ff4:	68a2      	ldr	r2, [r4, #8]
    7ff6:	b12a      	cbz	r2, 8004 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7ff8:	2b00      	cmp	r3, #0
    7ffa:	d0f1      	beq.n	7fe0 <bt_l2cap_disconnected+0x28>
	return node->next;
    7ffc:	68a3      	ldr	r3, [r4, #8]
    7ffe:	e7ef      	b.n	7fe0 <bt_l2cap_disconnected+0x28>
    8000:	4623      	mov	r3, r4
    8002:	e7ee      	b.n	7fe2 <bt_l2cap_disconnected+0x2a>
    8004:	2300      	movs	r3, #0
    8006:	e7ec      	b.n	7fe2 <bt_l2cap_disconnected+0x2a>
}
    8008:	bd10      	pop	{r4, pc}

0000800a <bt_l2cap_create_pdu>:
{
    800a:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    800c:	3104      	adds	r1, #4
    800e:	f7ff fc61 	bl	78d4 <bt_conn_create_pdu>
}
    8012:	bd08      	pop	{r3, pc}

00008014 <l2cap_create_le_sig_pdu>:
{
    8014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    8016:	460f      	mov	r7, r1
    8018:	4616      	mov	r6, r2
    801a:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    801c:	2100      	movs	r1, #0
    801e:	4608      	mov	r0, r1
    8020:	f7ff fff3 	bl	800a <bt_l2cap_create_pdu>
    8024:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8026:	2104      	movs	r1, #4
    8028:	3008      	adds	r0, #8
    802a:	f012 feef 	bl	1ae0c <net_buf_simple_add>
	hdr->code = code;
    802e:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    8030:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    8032:	8045      	strh	r5, [r0, #2]
}
    8034:	4620      	mov	r0, r4
    8036:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00008038 <l2cap_chan_create_seg>:
{
    8038:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    803c:	4605      	mov	r5, r0
    803e:	460c      	mov	r4, r1
    8040:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    8042:	7988      	ldrb	r0, [r1, #6]
    8044:	f012 fe1c 	bl	1ac80 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    8048:	89a3      	ldrh	r3, [r4, #12]
    804a:	4443      	add	r3, r8
    804c:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    8050:	4293      	cmp	r3, r2
    8052:	d802      	bhi.n	805a <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    8054:	8ac3      	ldrh	r3, [r0, #22]
    8056:	2b03      	cmp	r3, #3
    8058:	d815      	bhi.n	8086 <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    805a:	79a0      	ldrb	r0, [r4, #6]
    805c:	f012 fe10 	bl	1ac80 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    8060:	8ac3      	ldrh	r3, [r0, #22]
    8062:	2b03      	cmp	r3, #3
    8064:	d902      	bls.n	806c <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    8066:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    8068:	2b4b      	cmp	r3, #75	; 0x4b
    806a:	d82e      	bhi.n	80ca <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    806c:	2100      	movs	r1, #0
    806e:	4608      	mov	r0, r1
    8070:	f7ff ffcb 	bl	800a <bt_l2cap_create_pdu>
    8074:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    8076:	f1b8 0f00 	cmp.w	r8, #0
    807a:	d038      	beq.n	80ee <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    807c:	f106 0008 	add.w	r0, r6, #8
    8080:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    8082:	2100      	movs	r1, #0
    8084:	e02e      	b.n	80e4 <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    8086:	fa1f f688 	uxth.w	r6, r8
    808a:	3608      	adds	r6, #8
    808c:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    808e:	f104 0708 	add.w	r7, r4, #8
    8092:	4638      	mov	r0, r7
    8094:	f012 ff1f 	bl	1aed6 <net_buf_simple_headroom>
    8098:	42b0      	cmp	r0, r6
    809a:	d3de      	bcc.n	805a <l2cap_chan_create_seg+0x22>
    809c:	6823      	ldr	r3, [r4, #0]
    809e:	2b00      	cmp	r3, #0
    80a0:	d1db      	bne.n	805a <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    80a2:	f1b8 0f00 	cmp.w	r8, #0
    80a6:	d00b      	beq.n	80c0 <l2cap_chan_create_seg+0x88>
    80a8:	4623      	mov	r3, r4
    80aa:	2100      	movs	r1, #0
    80ac:	e002      	b.n	80b4 <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    80ae:	899a      	ldrh	r2, [r3, #12]
    80b0:	4411      	add	r1, r2
		buf = buf->frags;
    80b2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    80b4:	2b00      	cmp	r3, #0
    80b6:	d1fa      	bne.n	80ae <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    80b8:	b289      	uxth	r1, r1
    80ba:	4638      	mov	r0, r7
    80bc:	f012 fee5 	bl	1ae8a <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    80c0:	4620      	mov	r0, r4
    80c2:	f012 fe73 	bl	1adac <net_buf_ref>
    80c6:	4606      	mov	r6, r0
    80c8:	e02f      	b.n	812a <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    80ca:	2100      	movs	r1, #0
    80cc:	f012 fde4 	bl	1ac98 <net_buf_alloc>
		if (seg) {
    80d0:	4606      	mov	r6, r0
    80d2:	2800      	cmp	r0, #0
    80d4:	d0ca      	beq.n	806c <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    80d6:	2108      	movs	r1, #8
    80d8:	f012 fe39 	bl	1ad4e <net_buf_reserve>
    80dc:	e7cb      	b.n	8076 <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    80de:	899a      	ldrh	r2, [r3, #12]
    80e0:	4411      	add	r1, r2
		buf = buf->frags;
    80e2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    80e4:	2b00      	cmp	r3, #0
    80e6:	d1fa      	bne.n	80de <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    80e8:	b289      	uxth	r1, r1
    80ea:	f012 fea7 	bl	1ae3c <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    80ee:	f106 0708 	add.w	r7, r6, #8
    80f2:	4638      	mov	r0, r7
    80f4:	f012 fef3 	bl	1aede <net_buf_simple_tailroom>
    80f8:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    80fc:	eba5 0308 	sub.w	r3, r5, r8
    8100:	4298      	cmp	r0, r3
    8102:	d315      	bcc.n	8130 <l2cap_chan_create_seg+0xf8>
    8104:	fa1f f888 	uxth.w	r8, r8
    8108:	eba5 0508 	sub.w	r5, r5, r8
    810c:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    810e:	89a0      	ldrh	r0, [r4, #12]
    8110:	4285      	cmp	r5, r0
    8112:	bf28      	it	cs
    8114:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    8116:	462a      	mov	r2, r5
    8118:	f854 1f08 	ldr.w	r1, [r4, #8]!
    811c:	4638      	mov	r0, r7
    811e:	f012 fe7b 	bl	1ae18 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    8122:	4629      	mov	r1, r5
    8124:	4620      	mov	r0, r4
    8126:	f012 febe 	bl	1aea6 <net_buf_simple_pull>
}
    812a:	4630      	mov	r0, r6
    812c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    8130:	4638      	mov	r0, r7
    8132:	f012 fed4 	bl	1aede <net_buf_simple_tailroom>
    8136:	b285      	uxth	r5, r0
    8138:	e7e9      	b.n	810e <l2cap_chan_create_seg+0xd6>

0000813a <bt_l2cap_send_cb>:
{
    813a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    813c:	4605      	mov	r5, r0
    813e:	460f      	mov	r7, r1
    8140:	4614      	mov	r4, r2
    8142:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    8144:	2104      	movs	r1, #4
    8146:	f102 0008 	add.w	r0, r2, #8
    814a:	f012 fe96 	bl	1ae7a <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    814e:	89a3      	ldrh	r3, [r4, #12]
    8150:	3b04      	subs	r3, #4
    8152:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    8154:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    8156:	4632      	mov	r2, r6
    8158:	4621      	mov	r1, r4
    815a:	4628      	mov	r0, r5
    815c:	f7fe ffbe 	bl	70dc <bt_conn_send_cb>
    8160:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

00008164 <l2cap_chan_send_req>:
{
    8164:	b538      	push	{r3, r4, r5, lr}
    8166:	4604      	mov	r4, r0
    8168:	460d      	mov	r5, r1
	if (timeout) {
    816a:	b94a      	cbnz	r2, 8180 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    816c:	3010      	adds	r0, #16
    816e:	f021 ff3b 	bl	29fe8 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    8172:	2300      	movs	r3, #0
    8174:	462a      	mov	r2, r5
    8176:	2105      	movs	r1, #5
    8178:	6820      	ldr	r0, [r4, #0]
    817a:	f7ff ffde 	bl	813a <bt_l2cap_send_cb>
    817e:	bd38      	pop	{r3, r4, r5, pc}
    8180:	f100 0110 	add.w	r1, r0, #16
    8184:	4801      	ldr	r0, [pc, #4]	; (818c <l2cap_chan_send_req+0x28>)
    8186:	f021 ff89 	bl	2a09c <k_delayed_work_submit_to_queue>
    818a:	e7f2      	b.n	8172 <l2cap_chan_send_req+0xe>
    818c:	20002c78 	.word	0x20002c78

00008190 <l2cap_le_conn_req>:
{
    8190:	b538      	push	{r3, r4, r5, lr}
    8192:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    8194:	f7ff fca6 	bl	7ae4 <get_ident>
    8198:	4602      	mov	r2, r0
    819a:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    819e:	230a      	movs	r3, #10
    81a0:	2114      	movs	r1, #20
    81a2:	2000      	movs	r0, #0
    81a4:	f7ff ff36 	bl	8014 <l2cap_create_le_sig_pdu>
    81a8:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    81aa:	210a      	movs	r1, #10
    81ac:	3008      	adds	r0, #8
    81ae:	f012 fe2d 	bl	1ae0c <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    81b2:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    81b4:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    81b6:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    81ba:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    81bc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    81c0:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    81c2:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    81c6:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    81c8:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    81cc:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    81ce:	f649 4240 	movw	r2, #40000	; 0x9c40
    81d2:	4629      	mov	r1, r5
    81d4:	4620      	mov	r0, r4
    81d6:	f7ff ffc5 	bl	8164 <l2cap_chan_send_req>
}
    81da:	2000      	movs	r0, #0
    81dc:	bd38      	pop	{r3, r4, r5, pc}

000081de <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    81de:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    81e2:	2b01      	cmp	r3, #1
    81e4:	d000      	beq.n	81e8 <l2cap_le_encrypt_change+0xa>
    81e6:	4770      	bx	lr
    81e8:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    81ec:	2b00      	cmp	r3, #0
    81ee:	d1fa      	bne.n	81e6 <l2cap_le_encrypt_change+0x8>
{
    81f0:	b510      	push	{r4, lr}
    81f2:	4604      	mov	r4, r0
	if (status) {
    81f4:	b911      	cbnz	r1, 81fc <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    81f6:	f7ff ffcb 	bl	8190 <l2cap_le_conn_req>
    81fa:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    81fc:	4601      	mov	r1, r0
    81fe:	6800      	ldr	r0, [r0, #0]
    8200:	f7ff fe06 	bl	7e10 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    8204:	4620      	mov	r0, r4
    8206:	f7ff fe38 	bl	7e7a <bt_l2cap_chan_del>
		return;
    820a:	bd10      	pop	{r4, pc}

0000820c <bt_l2cap_encrypt_change>:
{
    820c:	b538      	push	{r3, r4, r5, lr}
    820e:	460d      	mov	r5, r1
	return list->head;
    8210:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8212:	b10c      	cbz	r4, 8218 <bt_l2cap_encrypt_change+0xc>
    8214:	3c08      	subs	r4, #8
    8216:	e00a      	b.n	822e <bt_l2cap_encrypt_change+0x22>
    8218:	2400      	movs	r4, #0
    821a:	e008      	b.n	822e <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    821c:	f114 0308 	adds.w	r3, r4, #8
    8220:	d012      	beq.n	8248 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    8222:	68a2      	ldr	r2, [r4, #8]
    8224:	b192      	cbz	r2, 824c <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8226:	b103      	cbz	r3, 822a <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    8228:	68a3      	ldr	r3, [r4, #8]
    822a:	f1a3 0408 	sub.w	r4, r3, #8
    822e:	b17c      	cbz	r4, 8250 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    8230:	4629      	mov	r1, r5
    8232:	4620      	mov	r0, r4
    8234:	f7ff ffd3 	bl	81de <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    8238:	6863      	ldr	r3, [r4, #4]
    823a:	689b      	ldr	r3, [r3, #8]
    823c:	2b00      	cmp	r3, #0
    823e:	d0ed      	beq.n	821c <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    8240:	4629      	mov	r1, r5
    8242:	4620      	mov	r0, r4
    8244:	4798      	blx	r3
    8246:	e7e9      	b.n	821c <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8248:	461a      	mov	r2, r3
    824a:	e7eb      	b.n	8224 <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    824c:	2400      	movs	r4, #0
    824e:	e7ee      	b.n	822e <bt_l2cap_encrypt_change+0x22>
}
    8250:	bd38      	pop	{r3, r4, r5, pc}

00008252 <l2cap_chan_update_credits>:
{
    8252:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    8254:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    8256:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    825a:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    825e:	d900      	bls.n	8262 <l2cap_chan_update_credits+0x10>
    8260:	bd70      	pop	{r4, r5, r6, pc}
    8262:	460e      	mov	r6, r1
    8264:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    8266:	b2a4      	uxth	r4, r4
    8268:	1b1b      	subs	r3, r3, r4
    826a:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    826c:	4621      	mov	r1, r4
    826e:	f7ff fd07 	bl	7c80 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    8272:	f7ff fc37 	bl	7ae4 <get_ident>
    8276:	2304      	movs	r3, #4
    8278:	4602      	mov	r2, r0
    827a:	2116      	movs	r1, #22
    827c:	4630      	mov	r0, r6
    827e:	f7ff fec9 	bl	8014 <l2cap_create_le_sig_pdu>
    8282:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    8284:	2104      	movs	r1, #4
    8286:	3008      	adds	r0, #8
    8288:	f012 fdc0 	bl	1ae0c <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    828c:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8290:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    8292:	8044      	strh	r4, [r0, #2]
    8294:	2300      	movs	r3, #0
    8296:	4632      	mov	r2, r6
    8298:	2105      	movs	r1, #5
    829a:	6828      	ldr	r0, [r5, #0]
    829c:	f7ff ff4d 	bl	813a <bt_l2cap_send_cb>
}
    82a0:	e7de      	b.n	8260 <l2cap_chan_update_credits+0xe>

000082a2 <l2cap_chan_le_send>:
{
    82a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    82a4:	4604      	mov	r4, r0
    82a6:	460d      	mov	r5, r1
    82a8:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    82aa:	2100      	movs	r1, #0
    82ac:	3068      	adds	r0, #104	; 0x68
    82ae:	f021 f8bf 	bl	29430 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    82b2:	b9b0      	cbnz	r0, 82e2 <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    82b4:	4632      	mov	r2, r6
    82b6:	4629      	mov	r1, r5
    82b8:	4620      	mov	r0, r4
    82ba:	f7ff febd 	bl	8038 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    82be:	6827      	ldr	r7, [r4, #0]
    82c0:	b157      	cbz	r7, 82d8 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    82c2:	8985      	ldrh	r5, [r0, #12]
    82c4:	1bad      	subs	r5, r5, r6
    82c6:	2300      	movs	r3, #0
    82c8:	4602      	mov	r2, r0
    82ca:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    82ce:	4638      	mov	r0, r7
    82d0:	f7ff ff33 	bl	813a <bt_l2cap_send_cb>
}
    82d4:	4628      	mov	r0, r5
    82d6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    82d8:	f012 fd4c 	bl	1ad74 <net_buf_unref>
		return -ECONNRESET;
    82dc:	f06f 0567 	mvn.w	r5, #103	; 0x67
    82e0:	e7f8      	b.n	82d4 <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    82e2:	f06f 050a 	mvn.w	r5, #10
    82e6:	e7f5      	b.n	82d4 <l2cap_chan_le_send+0x32>

000082e8 <l2cap_chan_le_send_sdu>:
{
    82e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    82ec:	b082      	sub	sp, #8
    82ee:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    82f0:	680d      	ldr	r5, [r1, #0]
    82f2:	462b      	mov	r3, r5
	size_t bytes = 0;
    82f4:	2200      	movs	r2, #0
    82f6:	e002      	b.n	82fe <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    82f8:	899c      	ldrh	r4, [r3, #12]
    82fa:	4422      	add	r2, r4
		buf = buf->frags;
    82fc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    82fe:	2b00      	cmp	r3, #0
    8300:	d1fa      	bne.n	82f8 <l2cap_chan_le_send_sdu+0x10>
    8302:	9b01      	ldr	r3, [sp, #4]
    8304:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    8306:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    830a:	4294      	cmp	r4, r2
    830c:	dc54      	bgt.n	83b8 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    830e:	89aa      	ldrh	r2, [r5, #12]
    8310:	b912      	cbnz	r2, 8318 <l2cap_chan_le_send_sdu+0x30>
    8312:	682a      	ldr	r2, [r5, #0]
    8314:	b102      	cbz	r2, 8318 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    8316:	4615      	mov	r5, r2
    8318:	4688      	mov	r8, r1
    831a:	4607      	mov	r7, r0
	if (!sent) {
    831c:	b10b      	cbz	r3, 8322 <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    831e:	2600      	movs	r6, #0
    8320:	e024      	b.n	836c <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    8322:	2202      	movs	r2, #2
    8324:	4629      	mov	r1, r5
    8326:	f7ff ffbc 	bl	82a2 <l2cap_chan_le_send>
		if (ret < 0) {
    832a:	1e06      	subs	r6, r0, #0
    832c:	db01      	blt.n	8332 <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    832e:	9601      	str	r6, [sp, #4]
    8330:	e7f5      	b.n	831e <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    8332:	f116 0f0b 	cmn.w	r6, #11
    8336:	d002      	beq.n	833e <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    8338:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    833c:	e038      	b.n	83b0 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    833e:	f105 0010 	add.w	r0, r5, #16
    8342:	89eb      	ldrh	r3, [r5, #14]
    8344:	4418      	add	r0, r3
    8346:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    8348:	2204      	movs	r2, #4
    834a:	eb0d 0102 	add.w	r1, sp, r2
    834e:	f020 0003 	bic.w	r0, r0, #3
    8352:	f7f7 ffb5 	bl	2c0 <memcpy>
    8356:	e7ef      	b.n	8338 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    8358:	2200      	movs	r2, #0
    835a:	4629      	mov	r1, r5
    835c:	4638      	mov	r0, r7
    835e:	f7ff ffa0 	bl	82a2 <l2cap_chan_le_send>
		if (ret < 0) {
    8362:	1e06      	subs	r6, r0, #0
    8364:	db0e      	blt.n	8384 <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    8366:	9b01      	ldr	r3, [sp, #4]
    8368:	4433      	add	r3, r6
    836a:	9301      	str	r3, [sp, #4]
    836c:	9b01      	ldr	r3, [sp, #4]
    836e:	429c      	cmp	r4, r3
    8370:	dd1b      	ble.n	83aa <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    8372:	89ab      	ldrh	r3, [r5, #12]
    8374:	2b00      	cmp	r3, #0
    8376:	d1ef      	bne.n	8358 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    8378:	4629      	mov	r1, r5
    837a:	2000      	movs	r0, #0
    837c:	f012 fd3a 	bl	1adf4 <net_buf_frag_del>
    8380:	4605      	mov	r5, r0
    8382:	e7e9      	b.n	8358 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    8384:	f116 0f0b 	cmn.w	r6, #11
    8388:	d002      	beq.n	8390 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    838a:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    838e:	e00f      	b.n	83b0 <l2cap_chan_le_send_sdu+0xc8>
    8390:	f105 0010 	add.w	r0, r5, #16
    8394:	89eb      	ldrh	r3, [r5, #14]
    8396:	4418      	add	r0, r3
    8398:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    839a:	2204      	movs	r2, #4
    839c:	eb0d 0102 	add.w	r1, sp, r2
    83a0:	f020 0003 	bic.w	r0, r0, #3
    83a4:	f7f7 ff8c 	bl	2c0 <memcpy>
    83a8:	e7ef      	b.n	838a <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    83aa:	4628      	mov	r0, r5
    83ac:	f012 fce2 	bl	1ad74 <net_buf_unref>
}
    83b0:	4630      	mov	r0, r6
    83b2:	b002      	add	sp, #8
    83b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    83b8:	f06f 0679 	mvn.w	r6, #121	; 0x79
    83bc:	e7f8      	b.n	83b0 <l2cap_chan_le_send_sdu+0xc8>

000083be <l2cap_chan_le_send_resume>:
{
    83be:	b510      	push	{r4, lr}
    83c0:	b082      	sub	sp, #8
    83c2:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    83c4:	4620      	mov	r0, r4
    83c6:	f7ff fc91 	bl	7cec <l2cap_chan_le_get_tx_buf>
    83ca:	9001      	str	r0, [sp, #4]
    83cc:	b180      	cbz	r0, 83f0 <l2cap_chan_le_send_resume+0x32>
    83ce:	f100 0310 	add.w	r3, r0, #16
    83d2:	89c2      	ldrh	r2, [r0, #14]
    83d4:	4413      	add	r3, r2
    83d6:	3303      	adds	r3, #3
    83d8:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    83dc:	681a      	ldr	r2, [r3, #0]
    83de:	a901      	add	r1, sp, #4
    83e0:	4620      	mov	r0, r4
    83e2:	f7ff ff81 	bl	82e8 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    83e6:	2800      	cmp	r0, #0
    83e8:	daec      	bge.n	83c4 <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    83ea:	f110 0f0b 	cmn.w	r0, #11
    83ee:	d001      	beq.n	83f4 <l2cap_chan_le_send_resume+0x36>
}
    83f0:	b002      	add	sp, #8
    83f2:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    83f4:	9b01      	ldr	r3, [sp, #4]
    83f6:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    83fa:	e7f9      	b.n	83f0 <l2cap_chan_le_send_resume+0x32>

000083fc <l2cap_send_reject>:
{
    83fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    8400:	4680      	mov	r8, r0
    8402:	4691      	mov	r9, r2
    8404:	461e      	mov	r6, r3
    8406:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    840a:	1cbb      	adds	r3, r7, #2
    840c:	460a      	mov	r2, r1
    840e:	2101      	movs	r1, #1
    8410:	2000      	movs	r0, #0
    8412:	f7ff fdff 	bl	8014 <l2cap_create_le_sig_pdu>
    8416:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    8418:	f100 0508 	add.w	r5, r0, #8
    841c:	2102      	movs	r1, #2
    841e:	4628      	mov	r0, r5
    8420:	f012 fcf4 	bl	1ae0c <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    8424:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    8428:	b126      	cbz	r6, 8434 <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    842a:	463a      	mov	r2, r7
    842c:	4631      	mov	r1, r6
    842e:	4628      	mov	r0, r5
    8430:	f012 fcf2 	bl	1ae18 <net_buf_simple_add_mem>
    8434:	2300      	movs	r3, #0
    8436:	4622      	mov	r2, r4
    8438:	2105      	movs	r1, #5
    843a:	4640      	mov	r0, r8
    843c:	f7ff fe7d 	bl	813a <bt_l2cap_send_cb>
    8440:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00008444 <le_conn_param_update_req>:
{
    8444:	b570      	push	{r4, r5, r6, lr}
    8446:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8448:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    844a:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    844c:	8990      	ldrh	r0, [r2, #12]
    844e:	2807      	cmp	r0, #7
    8450:	d908      	bls.n	8464 <le_conn_param_update_req+0x20>
    8452:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    8454:	78e2      	ldrb	r2, [r4, #3]
    8456:	b13a      	cbz	r2, 8468 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    8458:	2200      	movs	r2, #0
    845a:	9200      	str	r2, [sp, #0]
    845c:	4613      	mov	r3, r2
    845e:	4620      	mov	r0, r4
    8460:	f7ff ffcc 	bl	83fc <l2cap_send_reject>
}
    8464:	b004      	add	sp, #16
    8466:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    8468:	881a      	ldrh	r2, [r3, #0]
    846a:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    846e:	885a      	ldrh	r2, [r3, #2]
    8470:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    8474:	889a      	ldrh	r2, [r3, #4]
    8476:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    847a:	88db      	ldrh	r3, [r3, #6]
    847c:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    8480:	2302      	movs	r3, #2
    8482:	460a      	mov	r2, r1
    8484:	2113      	movs	r1, #19
    8486:	f7ff fdc5 	bl	8014 <l2cap_create_le_sig_pdu>
    848a:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    848c:	a902      	add	r1, sp, #8
    848e:	4620      	mov	r0, r4
    8490:	f7fe fcc2 	bl	6e18 <le_param_req>
    8494:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8496:	2102      	movs	r1, #2
    8498:	f106 0008 	add.w	r0, r6, #8
    849c:	f012 fcb6 	bl	1ae0c <net_buf_simple_add>
	if (accepted) {
    84a0:	b17d      	cbz	r5, 84c2 <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    84a2:	2300      	movs	r3, #0
    84a4:	7003      	strb	r3, [r0, #0]
    84a6:	7043      	strb	r3, [r0, #1]
    84a8:	2300      	movs	r3, #0
    84aa:	4632      	mov	r2, r6
    84ac:	2105      	movs	r1, #5
    84ae:	4620      	mov	r0, r4
    84b0:	f7ff fe43 	bl	813a <bt_l2cap_send_cb>
	if (accepted) {
    84b4:	2d00      	cmp	r5, #0
    84b6:	d0d5      	beq.n	8464 <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    84b8:	a902      	add	r1, sp, #8
    84ba:	4620      	mov	r0, r4
    84bc:	f7ff f976 	bl	77ac <bt_conn_le_conn_update>
    84c0:	e7d0      	b.n	8464 <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    84c2:	2301      	movs	r3, #1
    84c4:	7003      	strb	r3, [r0, #0]
    84c6:	2300      	movs	r3, #0
    84c8:	7043      	strb	r3, [r0, #1]
    84ca:	e7ed      	b.n	84a8 <le_conn_param_update_req+0x64>

000084cc <le_disconn_req>:
{
    84cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    84d0:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    84d2:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    84d4:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    84d6:	8993      	ldrh	r3, [r2, #12]
    84d8:	2b03      	cmp	r3, #3
    84da:	d802      	bhi.n	84e2 <le_disconn_req+0x16>
}
    84dc:	b004      	add	sp, #16
    84de:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    84e2:	4614      	mov	r4, r2
    84e4:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    84e6:	8879      	ldrh	r1, [r7, #2]
    84e8:	4630      	mov	r0, r6
    84ea:	f7ff fb5f 	bl	7bac <l2cap_remove_tx_cid>
	if (!chan) {
    84ee:	4680      	mov	r8, r0
    84f0:	b1d0      	cbz	r0, 8528 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    84f2:	2304      	movs	r3, #4
    84f4:	462a      	mov	r2, r5
    84f6:	2107      	movs	r1, #7
    84f8:	4620      	mov	r0, r4
    84fa:	f7ff fd8b 	bl	8014 <l2cap_create_le_sig_pdu>
    84fe:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    8500:	2104      	movs	r1, #4
    8502:	3008      	adds	r0, #8
    8504:	f012 fc82 	bl	1ae0c <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    8508:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    850c:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    850e:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    8512:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    8514:	4640      	mov	r0, r8
    8516:	f7ff fcb0 	bl	7e7a <bt_l2cap_chan_del>
    851a:	2300      	movs	r3, #0
    851c:	4622      	mov	r2, r4
    851e:	2105      	movs	r1, #5
    8520:	4630      	mov	r0, r6
    8522:	f7ff fe0a 	bl	813a <bt_l2cap_send_cb>
    8526:	e7d9      	b.n	84dc <le_disconn_req+0x10>
		data.scid = req->scid;
    8528:	887b      	ldrh	r3, [r7, #2]
    852a:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    852e:	883b      	ldrh	r3, [r7, #0]
    8530:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    8534:	2304      	movs	r3, #4
    8536:	9300      	str	r3, [sp, #0]
    8538:	ab03      	add	r3, sp, #12
    853a:	2202      	movs	r2, #2
    853c:	4629      	mov	r1, r5
    853e:	4630      	mov	r0, r6
    8540:	f7ff ff5c 	bl	83fc <l2cap_send_reject>
    8544:	e7ca      	b.n	84dc <le_disconn_req+0x10>

00008546 <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    8546:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    8548:	b108      	cbz	r0, 854e <bt_l2cap_le_lookup_tx_cid+0x8>
    854a:	3808      	subs	r0, #8
    854c:	e006      	b.n	855c <bt_l2cap_le_lookup_tx_cid+0x16>
    854e:	2000      	movs	r0, #0
    8550:	e004      	b.n	855c <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8552:	461a      	mov	r2, r3
    8554:	e00b      	b.n	856e <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    8556:	6883      	ldr	r3, [r0, #8]
    8558:	f1a3 0008 	sub.w	r0, r3, #8
    855c:	b168      	cbz	r0, 857a <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    855e:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    8562:	428b      	cmp	r3, r1
    8564:	d009      	beq.n	857a <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8566:	f110 0308 	adds.w	r3, r0, #8
    856a:	d0f2      	beq.n	8552 <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    856c:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    856e:	b112      	cbz	r2, 8576 <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8570:	2b00      	cmp	r3, #0
    8572:	d1f0      	bne.n	8556 <bt_l2cap_le_lookup_tx_cid+0x10>
    8574:	e7f0      	b.n	8558 <bt_l2cap_le_lookup_tx_cid+0x12>
    8576:	2000      	movs	r0, #0
    8578:	e7f0      	b.n	855c <bt_l2cap_le_lookup_tx_cid+0x16>
}
    857a:	4770      	bx	lr

0000857c <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    857c:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    857e:	b108      	cbz	r0, 8584 <bt_l2cap_le_lookup_rx_cid+0x8>
    8580:	3808      	subs	r0, #8
    8582:	e006      	b.n	8592 <bt_l2cap_le_lookup_rx_cid+0x16>
    8584:	2000      	movs	r0, #0
    8586:	e004      	b.n	8592 <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8588:	461a      	mov	r2, r3
    858a:	e00b      	b.n	85a4 <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    858c:	6883      	ldr	r3, [r0, #8]
    858e:	f1a3 0008 	sub.w	r0, r3, #8
    8592:	b168      	cbz	r0, 85b0 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    8594:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8598:	428b      	cmp	r3, r1
    859a:	d009      	beq.n	85b0 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    859c:	f110 0308 	adds.w	r3, r0, #8
    85a0:	d0f2      	beq.n	8588 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    85a2:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    85a4:	b112      	cbz	r2, 85ac <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    85a6:	2b00      	cmp	r3, #0
    85a8:	d1f0      	bne.n	858c <bt_l2cap_le_lookup_rx_cid+0x10>
    85aa:	e7f0      	b.n	858e <bt_l2cap_le_lookup_rx_cid+0x12>
    85ac:	2000      	movs	r0, #0
    85ae:	e7f0      	b.n	8592 <bt_l2cap_le_lookup_rx_cid+0x16>
}
    85b0:	4770      	bx	lr

000085b2 <l2cap_chan_alloc_cid>:
{
    85b2:	b570      	push	{r4, r5, r6, lr}
    85b4:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    85b6:	460d      	mov	r5, r1
    85b8:	b1a1      	cbz	r1, 85e4 <l2cap_chan_alloc_cid+0x32>
    85ba:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    85be:	b9ab      	cbnz	r3, 85ec <l2cap_chan_alloc_cid+0x3a>
    85c0:	2440      	movs	r4, #64	; 0x40
    85c2:	e001      	b.n	85c8 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    85c4:	3401      	adds	r4, #1
    85c6:	b2a4      	uxth	r4, r4
    85c8:	2c7f      	cmp	r4, #127	; 0x7f
    85ca:	d80d      	bhi.n	85e8 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    85cc:	2d00      	cmp	r5, #0
    85ce:	d0f9      	beq.n	85c4 <l2cap_chan_alloc_cid+0x12>
    85d0:	4621      	mov	r1, r4
    85d2:	4630      	mov	r0, r6
    85d4:	f7ff ffd2 	bl	857c <bt_l2cap_le_lookup_rx_cid>
    85d8:	2800      	cmp	r0, #0
    85da:	d1f3      	bne.n	85c4 <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    85dc:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    85e0:	4628      	mov	r0, r5
    85e2:	bd70      	pop	{r4, r5, r6, pc}
    85e4:	2440      	movs	r4, #64	; 0x40
    85e6:	e7ef      	b.n	85c8 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    85e8:	2000      	movs	r0, #0
    85ea:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    85ec:	4608      	mov	r0, r1
}
    85ee:	bd70      	pop	{r4, r5, r6, pc}

000085f0 <l2cap_chan_add>:
{
    85f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    85f2:	4606      	mov	r6, r0
    85f4:	460c      	mov	r4, r1
    85f6:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    85f8:	f7ff ffdb 	bl	85b2 <l2cap_chan_alloc_cid>
	if (!ch) {
    85fc:	b1c0      	cbz	r0, 8630 <l2cap_chan_add+0x40>
    85fe:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    8600:	490c      	ldr	r1, [pc, #48]	; (8634 <l2cap_chan_add+0x44>)
    8602:	f104 0010 	add.w	r0, r4, #16
    8606:	f021 fcd1 	bl	29fac <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    860a:	463a      	mov	r2, r7
    860c:	4621      	mov	r1, r4
    860e:	4630      	mov	r0, r6
    8610:	f7ff fcc2 	bl	7f98 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8614:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    8618:	3b40      	subs	r3, #64	; 0x40
    861a:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    861c:	2b3f      	cmp	r3, #63	; 0x3f
    861e:	d901      	bls.n	8624 <l2cap_chan_add+0x34>
	return true;
    8620:	2001      	movs	r0, #1
}
    8622:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    8624:	2101      	movs	r1, #1
    8626:	4620      	mov	r0, r4
    8628:	f7ff fc24 	bl	7e74 <bt_l2cap_chan_set_state>
	return true;
    862c:	2001      	movs	r0, #1
    862e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    8630:	2000      	movs	r0, #0
    8632:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8634:	00007ea5 	.word	0x00007ea5

00008638 <bt_l2cap_connected>:
{
    8638:	b530      	push	{r4, r5, lr}
    863a:	b083      	sub	sp, #12
    863c:	4605      	mov	r5, r0
	return list->head;
    863e:	4b18      	ldr	r3, [pc, #96]	; (86a0 <bt_l2cap_connected+0x68>)
    8640:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8642:	b10c      	cbz	r4, 8648 <bt_l2cap_connected+0x10>
    8644:	3c08      	subs	r4, #8
    8646:	e00a      	b.n	865e <bt_l2cap_connected+0x26>
    8648:	2400      	movs	r4, #0
    864a:	e008      	b.n	865e <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    864c:	f114 0308 	adds.w	r3, r4, #8
    8650:	d01f      	beq.n	8692 <bt_l2cap_connected+0x5a>
	return node->next;
    8652:	68a2      	ldr	r2, [r4, #8]
    8654:	b1fa      	cbz	r2, 8696 <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8656:	b103      	cbz	r3, 865a <bt_l2cap_connected+0x22>
	return node->next;
    8658:	68a3      	ldr	r3, [r4, #8]
    865a:	f1a3 0408 	sub.w	r4, r3, #8
    865e:	b1e4      	cbz	r4, 869a <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    8660:	6863      	ldr	r3, [r4, #4]
    8662:	a901      	add	r1, sp, #4
    8664:	4628      	mov	r0, r5
    8666:	4798      	blx	r3
    8668:	2800      	cmp	r0, #0
    866a:	dbef      	blt.n	864c <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    866c:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    866e:	8823      	ldrh	r3, [r4, #0]
    8670:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    8674:	8823      	ldrh	r3, [r4, #0]
    8676:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    867a:	2200      	movs	r2, #0
    867c:	4628      	mov	r0, r5
    867e:	f7ff ffb7 	bl	85f0 <l2cap_chan_add>
    8682:	b150      	cbz	r0, 869a <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    8684:	9801      	ldr	r0, [sp, #4]
    8686:	6843      	ldr	r3, [r0, #4]
    8688:	681b      	ldr	r3, [r3, #0]
    868a:	2b00      	cmp	r3, #0
    868c:	d0de      	beq.n	864c <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    868e:	4798      	blx	r3
    8690:	e7dc      	b.n	864c <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8692:	461a      	mov	r2, r3
    8694:	e7de      	b.n	8654 <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    8696:	2400      	movs	r4, #0
    8698:	e7e1      	b.n	865e <bt_l2cap_connected+0x26>
}
    869a:	b003      	add	sp, #12
    869c:	bd30      	pop	{r4, r5, pc}
    869e:	bf00      	nop
    86a0:	20000748 	.word	0x20000748

000086a4 <le_conn_req>:
{
    86a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    86a8:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    86aa:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    86ac:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    86ae:	8990      	ldrh	r0, [r2, #12]
    86b0:	2809      	cmp	r0, #9
    86b2:	d912      	bls.n	86da <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    86b4:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    86b8:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    86bc:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    86c0:	889e      	ldrh	r6, [r3, #4]
    86c2:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    86c4:	88df      	ldrh	r7, [r3, #6]
    86c6:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    86ca:	891d      	ldrh	r5, [r3, #8]
    86cc:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    86d0:	2816      	cmp	r0, #22
    86d2:	d902      	bls.n	86da <le_conn_req+0x36>
    86d4:	f1be 0f16 	cmp.w	lr, #22
    86d8:	d802      	bhi.n	86e0 <le_conn_req+0x3c>
}
    86da:	b005      	add	sp, #20
    86dc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    86e0:	4610      	mov	r0, r2
    86e2:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    86e4:	230a      	movs	r3, #10
    86e6:	2115      	movs	r1, #21
    86e8:	f7ff fc94 	bl	8014 <l2cap_create_le_sig_pdu>
    86ec:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    86ee:	210a      	movs	r1, #10
    86f0:	3008      	adds	r0, #8
    86f2:	f012 fb8b 	bl	1ae0c <net_buf_simple_add>
    86f6:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    86f8:	220a      	movs	r2, #10
    86fa:	2100      	movs	r1, #0
    86fc:	f022 f938 	bl	2a970 <memset>
	server = l2cap_server_lookup_psm(psm);
    8700:	4648      	mov	r0, r9
    8702:	f7ff fa35 	bl	7b70 <l2cap_server_lookup_psm>
	if (!server) {
    8706:	4681      	mov	r9, r0
    8708:	b168      	cbz	r0, 8726 <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    870a:	7a22      	ldrb	r2, [r4, #8]
    870c:	7883      	ldrb	r3, [r0, #2]
    870e:	429a      	cmp	r2, r3
    8710:	d20d      	bcs.n	872e <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    8712:	2305      	movs	r3, #5
    8714:	9a01      	ldr	r2, [sp, #4]
    8716:	8113      	strh	r3, [r2, #8]
    8718:	2300      	movs	r3, #0
    871a:	9a00      	ldr	r2, [sp, #0]
    871c:	2105      	movs	r1, #5
    871e:	4620      	mov	r0, r4
    8720:	f7ff fd0b 	bl	813a <bt_l2cap_send_cb>
    8724:	e7d9      	b.n	86da <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    8726:	2302      	movs	r3, #2
    8728:	9a01      	ldr	r2, [sp, #4]
    872a:	8113      	strh	r3, [r2, #8]
		goto rsp;
    872c:	e7f4      	b.n	8718 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    872e:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    8732:	b29b      	uxth	r3, r3
    8734:	2b3f      	cmp	r3, #63	; 0x3f
    8736:	d903      	bls.n	8740 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    8738:	2309      	movs	r3, #9
    873a:	9a01      	ldr	r2, [sp, #4]
    873c:	8113      	strh	r3, [r2, #8]
		goto rsp;
    873e:	e7eb      	b.n	8718 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    8740:	4651      	mov	r1, sl
    8742:	4620      	mov	r0, r4
    8744:	f7ff feff 	bl	8546 <bt_l2cap_le_lookup_tx_cid>
    8748:	9003      	str	r0, [sp, #12]
	if (chan) {
    874a:	b118      	cbz	r0, 8754 <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    874c:	230a      	movs	r3, #10
    874e:	9a01      	ldr	r2, [sp, #4]
    8750:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8752:	e7e1      	b.n	8718 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    8754:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8758:	a903      	add	r1, sp, #12
    875a:	4620      	mov	r0, r4
    875c:	4798      	blx	r3
    875e:	2800      	cmp	r0, #0
    8760:	da03      	bge.n	876a <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    8762:	2304      	movs	r3, #4
    8764:	9a01      	ldr	r2, [sp, #4]
    8766:	8113      	strh	r3, [r2, #8]
		goto rsp;
    8768:	e7d6      	b.n	8718 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    876a:	9903      	ldr	r1, [sp, #12]
    876c:	f899 3002 	ldrb.w	r3, [r9, #2]
    8770:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    8774:	4a1e      	ldr	r2, [pc, #120]	; (87f0 <le_conn_req+0x14c>)
    8776:	4620      	mov	r0, r4
    8778:	f7ff ff3a 	bl	85f0 <l2cap_chan_add>
    877c:	b918      	cbnz	r0, 8786 <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    877e:	2304      	movs	r3, #4
    8780:	9a01      	ldr	r2, [sp, #4]
    8782:	8113      	strh	r3, [r2, #8]
    8784:	e7c8      	b.n	8718 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    8786:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    878a:	4650      	mov	r0, sl
    878c:	f7ff fabd 	bl	7d0a <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    8790:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    8794:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    8798:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    879c:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    87a0:	4659      	mov	r1, fp
    87a2:	4650      	mov	r0, sl
    87a4:	f7ff fa79 	bl	7c9a <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    87a8:	4650      	mov	r0, sl
    87aa:	f7ff fac1 	bl	7d30 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    87ae:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    87b2:	4650      	mov	r0, sl
    87b4:	f7ff fa64 	bl	7c80 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    87b8:	9803      	ldr	r0, [sp, #12]
    87ba:	f8b9 3000 	ldrh.w	r3, [r9]
    87be:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    87c0:	2103      	movs	r1, #3
    87c2:	f7ff fb57 	bl	7e74 <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    87c6:	9803      	ldr	r0, [sp, #12]
    87c8:	6843      	ldr	r3, [r0, #4]
    87ca:	681b      	ldr	r3, [r3, #0]
    87cc:	b103      	cbz	r3, 87d0 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    87ce:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    87d0:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    87d4:	9901      	ldr	r1, [sp, #4]
    87d6:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    87d8:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    87dc:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    87de:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    87e2:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    87e4:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    87e8:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    87ea:	2300      	movs	r3, #0
    87ec:	810b      	strh	r3, [r1, #8]
    87ee:	e793      	b.n	8718 <le_conn_req+0x74>
    87f0:	00007cb5 	.word	0x00007cb5

000087f4 <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    87f4:	1e53      	subs	r3, r2, #1
    87f6:	b29b      	uxth	r3, r3
    87f8:	2bfe      	cmp	r3, #254	; 0xfe
    87fa:	d814      	bhi.n	8826 <l2cap_le_connect+0x32>
{
    87fc:	b570      	push	{r4, r5, r6, lr}
    87fe:	4615      	mov	r5, r2
    8800:	460c      	mov	r4, r1
    8802:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    8804:	4608      	mov	r0, r1
    8806:	f7ff fa80 	bl	7d0a <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    880a:	4620      	mov	r0, r4
    880c:	f7ff fa90 	bl	7d30 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    8810:	4a08      	ldr	r2, [pc, #32]	; (8834 <l2cap_le_connect+0x40>)
    8812:	4621      	mov	r1, r4
    8814:	4630      	mov	r0, r6
    8816:	f7ff feeb 	bl	85f0 <l2cap_chan_add>
    881a:	b138      	cbz	r0, 882c <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    881c:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    881e:	4620      	mov	r0, r4
    8820:	f7ff fcb6 	bl	8190 <l2cap_le_conn_req>
    8824:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    8826:	f06f 0015 	mvn.w	r0, #21
    882a:	4770      	bx	lr
		return -ENOMEM;
    882c:	f06f 000b 	mvn.w	r0, #11
}
    8830:	bd70      	pop	{r4, r5, r6, pc}
    8832:	bf00      	nop
    8834:	00007cb5 	.word	0x00007cb5

00008838 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    8838:	8802      	ldrh	r2, [r0, #0]
    883a:	1e53      	subs	r3, r2, #1
    883c:	b29b      	uxth	r3, r3
    883e:	2bfe      	cmp	r3, #254	; 0xfe
    8840:	d81d      	bhi.n	887e <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    8842:	6843      	ldr	r3, [r0, #4]
    8844:	b1f3      	cbz	r3, 8884 <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    8846:	7883      	ldrb	r3, [r0, #2]
    8848:	2b04      	cmp	r3, #4
    884a:	d81e      	bhi.n	888a <bt_l2cap_server_register+0x52>
{
    884c:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    884e:	b90b      	cbnz	r3, 8854 <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    8850:	2301      	movs	r3, #1
    8852:	7083      	strb	r3, [r0, #2]
    8854:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    8856:	4610      	mov	r0, r2
    8858:	f7ff f98a 	bl	7b70 <l2cap_server_lookup_psm>
    885c:	b9c0      	cbnz	r0, 8890 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    885e:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    8862:	2200      	movs	r2, #0
    8864:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    8866:	4a0c      	ldr	r2, [pc, #48]	; (8898 <bt_l2cap_server_register+0x60>)
    8868:	6852      	ldr	r2, [r2, #4]
    886a:	b122      	cbz	r2, 8876 <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    886c:	6013      	str	r3, [r2, #0]
		list->tail = node;
    886e:	4a0a      	ldr	r2, [pc, #40]	; (8898 <bt_l2cap_server_register+0x60>)
    8870:	6053      	str	r3, [r2, #4]
	return 0;
    8872:	2000      	movs	r0, #0
    8874:	bd10      	pop	{r4, pc}
		list->tail = node;
    8876:	4a08      	ldr	r2, [pc, #32]	; (8898 <bt_l2cap_server_register+0x60>)
    8878:	6053      	str	r3, [r2, #4]
		list->head = node;
    887a:	6013      	str	r3, [r2, #0]
    887c:	bd10      	pop	{r4, pc}
		return -EINVAL;
    887e:	f06f 0015 	mvn.w	r0, #21
    8882:	4770      	bx	lr
    8884:	f06f 0015 	mvn.w	r0, #21
    8888:	4770      	bx	lr
		return -EINVAL;
    888a:	f06f 0015 	mvn.w	r0, #21
    888e:	4770      	bx	lr
		return -EADDRINUSE;
    8890:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    8894:	bd10      	pop	{r4, pc}
    8896:	bf00      	nop
    8898:	20000750 	.word	0x20000750

0000889c <bt_l2cap_update_conn_param>:
{
    889c:	b570      	push	{r4, r5, r6, lr}
    889e:	4606      	mov	r6, r0
    88a0:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    88a2:	f7ff f91f 	bl	7ae4 <get_ident>
    88a6:	2308      	movs	r3, #8
    88a8:	4602      	mov	r2, r0
    88aa:	2112      	movs	r1, #18
    88ac:	2000      	movs	r0, #0
    88ae:	f7ff fbb1 	bl	8014 <l2cap_create_le_sig_pdu>
    88b2:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    88b4:	2108      	movs	r1, #8
    88b6:	4408      	add	r0, r1
    88b8:	f012 faa8 	bl	1ae0c <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    88bc:	8823      	ldrh	r3, [r4, #0]
    88be:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    88c0:	8863      	ldrh	r3, [r4, #2]
    88c2:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    88c4:	88a3      	ldrh	r3, [r4, #4]
    88c6:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    88c8:	88e3      	ldrh	r3, [r4, #6]
    88ca:	80c3      	strh	r3, [r0, #6]
    88cc:	2300      	movs	r3, #0
    88ce:	462a      	mov	r2, r5
    88d0:	2105      	movs	r1, #5
    88d2:	4630      	mov	r0, r6
    88d4:	f7ff fc31 	bl	813a <bt_l2cap_send_cb>
}
    88d8:	2000      	movs	r0, #0
    88da:	bd70      	pop	{r4, r5, r6, pc}

000088dc <bt_l2cap_init>:
{
    88dc:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    88de:	4802      	ldr	r0, [pc, #8]	; (88e8 <bt_l2cap_init+0xc>)
    88e0:	f7ff fa84 	bl	7dec <bt_l2cap_le_fixed_chan_register>
    88e4:	bd08      	pop	{r3, pc}
    88e6:	bf00      	nop
    88e8:	2000bac8 	.word	0x2000bac8

000088ec <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    88ec:	b188      	cbz	r0, 8912 <bt_l2cap_chan_connect+0x26>
{
    88ee:	b508      	push	{r3, lr}
    88f0:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    88f2:	7b00      	ldrb	r0, [r0, #12]
    88f4:	2803      	cmp	r0, #3
    88f6:	d10f      	bne.n	8918 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    88f8:	b189      	cbz	r1, 891e <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    88fa:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    88fe:	2804      	cmp	r0, #4
    8900:	d810      	bhi.n	8924 <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    8902:	b910      	cbnz	r0, 890a <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    8904:	2001      	movs	r0, #1
    8906:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    890a:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    890c:	f7ff ff72 	bl	87f4 <l2cap_le_connect>
    8910:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    8912:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8916:	4770      	bx	lr
    8918:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    891c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    891e:	f06f 0015 	mvn.w	r0, #21
    8922:	bd08      	pop	{r3, pc}
		return -EINVAL;
    8924:	f06f 0015 	mvn.w	r0, #21
}
    8928:	bd08      	pop	{r3, pc}

0000892a <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    892a:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    892c:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    892e:	b30b      	cbz	r3, 8974 <bt_l2cap_chan_disconnect+0x4a>
    8930:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    8932:	f7ff f8d7 	bl	7ae4 <get_ident>
    8936:	4602      	mov	r2, r0
    8938:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    893c:	2304      	movs	r3, #4
    893e:	2106      	movs	r1, #6
    8940:	2000      	movs	r0, #0
    8942:	f7ff fb67 	bl	8014 <l2cap_create_le_sig_pdu>
    8946:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    8948:	2104      	movs	r1, #4
    894a:	3008      	adds	r0, #8
    894c:	f012 fa5e 	bl	1ae0c <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    8950:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    8954:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    8956:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    895a:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    895c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    8960:	4629      	mov	r1, r5
    8962:	4620      	mov	r0, r4
    8964:	f7ff fbfe 	bl	8164 <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    8968:	2104      	movs	r1, #4
    896a:	4620      	mov	r0, r4
    896c:	f7ff fa82 	bl	7e74 <bt_l2cap_chan_set_state>

	return 0;
    8970:	2000      	movs	r0, #0
    8972:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    8974:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    8978:	bd38      	pop	{r3, r4, r5, pc}

0000897a <l2cap_chan_le_recv_sdu>:
{
    897a:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    897e:	4681      	mov	r9, r0
    8980:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    8982:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    8986:	4603      	mov	r3, r0
	size_t bytes = 0;
    8988:	2200      	movs	r2, #0
    898a:	e002      	b.n	8992 <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    898c:	8999      	ldrh	r1, [r3, #12]
    898e:	440a      	add	r2, r1
		buf = buf->frags;
    8990:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8992:	2b00      	cmp	r3, #0
    8994:	d1fa      	bne.n	898c <l2cap_chan_le_recv_sdu+0x12>
    8996:	89b3      	ldrh	r3, [r6, #12]
    8998:	441a      	add	r2, r3
    899a:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    899e:	429a      	cmp	r2, r3
    89a0:	d803      	bhi.n	89aa <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    89a2:	f012 fa07 	bl	1adb4 <net_buf_frag_last>
    89a6:	4680      	mov	r8, r0
	while (buf->len) {
    89a8:	e017      	b.n	89da <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    89aa:	4648      	mov	r0, r9
    89ac:	f7ff ffbd 	bl	892a <bt_l2cap_chan_disconnect>
		return;
    89b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    89b4:	f108 0708 	add.w	r7, r8, #8
    89b8:	4638      	mov	r0, r7
    89ba:	f012 fa90 	bl	1aede <net_buf_simple_tailroom>
    89be:	89b4      	ldrh	r4, [r6, #12]
    89c0:	42a0      	cmp	r0, r4
    89c2:	d31d      	bcc.n	8a00 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    89c4:	4635      	mov	r5, r6
    89c6:	4622      	mov	r2, r4
    89c8:	f855 1f08 	ldr.w	r1, [r5, #8]!
    89cc:	4638      	mov	r0, r7
    89ce:	f012 fa23 	bl	1ae18 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    89d2:	4621      	mov	r1, r4
    89d4:	4628      	mov	r0, r5
    89d6:	f012 fa66 	bl	1aea6 <net_buf_simple_pull>
	while (buf->len) {
    89da:	89b3      	ldrh	r3, [r6, #12]
    89dc:	b1ab      	cbz	r3, 8a0a <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    89de:	f108 0008 	add.w	r0, r8, #8
    89e2:	f012 fa7c 	bl	1aede <net_buf_simple_tailroom>
    89e6:	2800      	cmp	r0, #0
    89e8:	d1e4      	bne.n	89b4 <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    89ea:	4648      	mov	r0, r9
    89ec:	f7ff f93a 	bl	7c64 <l2cap_alloc_frag>
			if (!frag) {
    89f0:	4680      	mov	r8, r0
    89f2:	2800      	cmp	r0, #0
    89f4:	d1de      	bne.n	89b4 <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    89f6:	4648      	mov	r0, r9
    89f8:	f7ff ff97 	bl	892a <bt_l2cap_chan_disconnect>
				return;
    89fc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    8a00:	4638      	mov	r0, r7
    8a02:	f012 fa6c 	bl	1aede <net_buf_simple_tailroom>
    8a06:	b284      	uxth	r4, r0
    8a08:	e7dc      	b.n	89c4 <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    8a0a:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    8a0e:	460b      	mov	r3, r1
	size_t bytes = 0;
    8a10:	2200      	movs	r2, #0
    8a12:	e002      	b.n	8a1a <l2cap_chan_le_recv_sdu+0xa0>
		bytes += buf->len;
    8a14:	8998      	ldrh	r0, [r3, #12]
    8a16:	4402      	add	r2, r0
		buf = buf->frags;
    8a18:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8a1a:	2b00      	cmp	r3, #0
    8a1c:	d1fa      	bne.n	8a14 <l2cap_chan_le_recv_sdu+0x9a>
    8a1e:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    8a22:	4293      	cmp	r3, r2
    8a24:	d005      	beq.n	8a32 <l2cap_chan_le_recv_sdu+0xb8>
	l2cap_chan_update_credits(chan, buf);
    8a26:	4631      	mov	r1, r6
    8a28:	4648      	mov	r0, r9
    8a2a:	f7ff fc12 	bl	8252 <l2cap_chan_update_credits>
    8a2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    8a32:	f8d9 3004 	ldr.w	r3, [r9, #4]
    8a36:	691b      	ldr	r3, [r3, #16]
    8a38:	4648      	mov	r0, r9
    8a3a:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    8a3c:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    8a40:	f012 f998 	bl	1ad74 <net_buf_unref>
		chan->_sdu = NULL;
    8a44:	2300      	movs	r3, #0
    8a46:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    8a4a:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    8a4e:	e7ea      	b.n	8a26 <l2cap_chan_le_recv_sdu+0xac>

00008a50 <l2cap_chan_le_recv>:
{
    8a50:	b570      	push	{r4, r5, r6, lr}
    8a52:	4604      	mov	r4, r0
    8a54:	460d      	mov	r5, r1
    8a56:	2100      	movs	r1, #0
    8a58:	3048      	adds	r0, #72	; 0x48
    8a5a:	f020 fce9 	bl	29430 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    8a5e:	b938      	cbnz	r0, 8a70 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    8a60:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    8a64:	b143      	cbz	r3, 8a78 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    8a66:	4629      	mov	r1, r5
    8a68:	4620      	mov	r0, r4
    8a6a:	f7ff ff86 	bl	897a <l2cap_chan_le_recv_sdu>
		return;
    8a6e:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8a70:	4620      	mov	r0, r4
    8a72:	f7ff ff5a 	bl	892a <bt_l2cap_chan_disconnect>
		return;
    8a76:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    8a78:	f105 0008 	add.w	r0, r5, #8
    8a7c:	f012 fa23 	bl	1aec6 <net_buf_simple_pull_le16>
    8a80:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    8a82:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    8a86:	4298      	cmp	r0, r3
    8a88:	d80e      	bhi.n	8aa8 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    8a8a:	6862      	ldr	r2, [r4, #4]
    8a8c:	68d3      	ldr	r3, [r2, #12]
    8a8e:	b19b      	cbz	r3, 8ab8 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    8a90:	4620      	mov	r0, r4
    8a92:	4798      	blx	r3
    8a94:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    8a98:	b150      	cbz	r0, 8ab0 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    8a9a:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    8a9e:	4629      	mov	r1, r5
    8aa0:	4620      	mov	r0, r4
    8aa2:	f7ff ff6a 	bl	897a <l2cap_chan_le_recv_sdu>
		return;
    8aa6:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8aa8:	4620      	mov	r0, r4
    8aaa:	f7ff ff3e 	bl	892a <bt_l2cap_chan_disconnect>
		return;
    8aae:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    8ab0:	4620      	mov	r0, r4
    8ab2:	f7ff ff3a 	bl	892a <bt_l2cap_chan_disconnect>
			return;
    8ab6:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    8ab8:	6913      	ldr	r3, [r2, #16]
    8aba:	4629      	mov	r1, r5
    8abc:	4620      	mov	r0, r4
    8abe:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    8ac0:	4629      	mov	r1, r5
    8ac2:	4620      	mov	r0, r4
    8ac4:	f7ff fbc5 	bl	8252 <l2cap_chan_update_credits>
    8ac8:	bd70      	pop	{r4, r5, r6, pc}

00008aca <l2cap_chan_recv>:
{
    8aca:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    8acc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    8ad0:	3b40      	subs	r3, #64	; 0x40
    8ad2:	b29b      	uxth	r3, r3
    8ad4:	2b3f      	cmp	r3, #63	; 0x3f
    8ad6:	d903      	bls.n	8ae0 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    8ad8:	6843      	ldr	r3, [r0, #4]
    8ada:	691b      	ldr	r3, [r3, #16]
    8adc:	4798      	blx	r3
    8ade:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    8ae0:	f7ff ffb6 	bl	8a50 <l2cap_chan_le_recv>
		return;
    8ae4:	bd08      	pop	{r3, pc}

00008ae6 <bt_l2cap_recv>:
{
    8ae6:	b570      	push	{r4, r5, r6, lr}
    8ae8:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    8aea:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8aec:	898b      	ldrh	r3, [r1, #12]
    8aee:	2b03      	cmp	r3, #3
    8af0:	d912      	bls.n	8b18 <bt_l2cap_recv+0x32>
    8af2:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    8af4:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8af6:	2104      	movs	r1, #4
    8af8:	f104 0008 	add.w	r0, r4, #8
    8afc:	f012 f9d3 	bl	1aea6 <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    8b00:	4631      	mov	r1, r6
    8b02:	4628      	mov	r0, r5
    8b04:	f7ff fd3a 	bl	857c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8b08:	b150      	cbz	r0, 8b20 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    8b0a:	4621      	mov	r1, r4
    8b0c:	f7ff ffdd 	bl	8aca <l2cap_chan_recv>
	net_buf_unref(buf);
    8b10:	4620      	mov	r0, r4
    8b12:	f012 f92f 	bl	1ad74 <net_buf_unref>
    8b16:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8b18:	4608      	mov	r0, r1
    8b1a:	f012 f92b 	bl	1ad74 <net_buf_unref>
		return;
    8b1e:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8b20:	4620      	mov	r0, r4
    8b22:	f012 f927 	bl	1ad74 <net_buf_unref>
		return;
    8b26:	bd70      	pop	{r4, r5, r6, pc}

00008b28 <le_credits>:
{
    8b28:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8b2a:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    8b2c:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    8b2e:	8993      	ldrh	r3, [r2, #12]
    8b30:	2b03      	cmp	r3, #3
    8b32:	d800      	bhi.n	8b36 <le_credits+0xe>
    8b34:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    8b36:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8b38:	8809      	ldrh	r1, [r1, #0]
    8b3a:	f7ff fd04 	bl	8546 <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    8b3e:	4604      	mov	r4, r0
    8b40:	2800      	cmp	r0, #0
    8b42:	d0f7      	beq.n	8b34 <le_credits+0xc>
    8b44:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    8b46:	442b      	add	r3, r5
    8b48:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8b4c:	d206      	bcs.n	8b5c <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    8b4e:	4629      	mov	r1, r5
    8b50:	f7ff f8a3 	bl	7c9a <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    8b54:	4620      	mov	r0, r4
    8b56:	f7ff fc32 	bl	83be <l2cap_chan_le_send_resume>
    8b5a:	e7eb      	b.n	8b34 <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    8b5c:	f7ff fee5 	bl	892a <bt_l2cap_chan_disconnect>
		return;
    8b60:	bd38      	pop	{r3, r4, r5, pc}
	...

00008b64 <l2cap_recv>:
{
    8b64:	b5f0      	push	{r4, r5, r6, r7, lr}
    8b66:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8b68:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8b6a:	898b      	ldrh	r3, [r1, #12]
    8b6c:	2b03      	cmp	r3, #3
    8b6e:	d801      	bhi.n	8b74 <l2cap_recv+0x10>
}
    8b70:	b003      	add	sp, #12
    8b72:	bdf0      	pop	{r4, r5, r6, r7, pc}
    8b74:	460c      	mov	r4, r1
    8b76:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8b78:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8b7a:	2104      	movs	r1, #4
    8b7c:	f104 0008 	add.w	r0, r4, #8
    8b80:	f012 f991 	bl	1aea6 <net_buf_simple_pull>
	if (buf->len != len) {
    8b84:	89a3      	ldrh	r3, [r4, #12]
    8b86:	429f      	cmp	r7, r3
    8b88:	d1f2      	bne.n	8b70 <l2cap_recv+0xc>
	if (!hdr->ident) {
    8b8a:	7871      	ldrb	r1, [r6, #1]
    8b8c:	2900      	cmp	r1, #0
    8b8e:	d0ef      	beq.n	8b70 <l2cap_recv+0xc>
	switch (hdr->code) {
    8b90:	7833      	ldrb	r3, [r6, #0]
    8b92:	3b01      	subs	r3, #1
    8b94:	2b15      	cmp	r3, #21
    8b96:	d852      	bhi.n	8c3e <l2cap_recv+0xda>
    8b98:	a201      	add	r2, pc, #4	; (adr r2, 8ba0 <l2cap_recv+0x3c>)
    8b9a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8b9e:	bf00      	nop
    8ba0:	00008c35 	.word	0x00008c35
    8ba4:	00008c3f 	.word	0x00008c3f
    8ba8:	00008c3f 	.word	0x00008c3f
    8bac:	00008c3f 	.word	0x00008c3f
    8bb0:	00008c3f 	.word	0x00008c3f
    8bb4:	00008c17 	.word	0x00008c17
    8bb8:	00008c21 	.word	0x00008c21
    8bbc:	00008c3f 	.word	0x00008c3f
    8bc0:	00008c3f 	.word	0x00008c3f
    8bc4:	00008c3f 	.word	0x00008c3f
    8bc8:	00008c3f 	.word	0x00008c3f
    8bcc:	00008c3f 	.word	0x00008c3f
    8bd0:	00008c3f 	.word	0x00008c3f
    8bd4:	00008c3f 	.word	0x00008c3f
    8bd8:	00008c3f 	.word	0x00008c3f
    8bdc:	00008c3f 	.word	0x00008c3f
    8be0:	00008c3f 	.word	0x00008c3f
    8be4:	00008bf9 	.word	0x00008bf9
    8be8:	00008b71 	.word	0x00008b71
    8bec:	00008c03 	.word	0x00008c03
    8bf0:	00008c0d 	.word	0x00008c0d
    8bf4:	00008c2b 	.word	0x00008c2b
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    8bf8:	4622      	mov	r2, r4
    8bfa:	4628      	mov	r0, r5
    8bfc:	f7ff fc22 	bl	8444 <le_conn_param_update_req>
		break;
    8c00:	e7b6      	b.n	8b70 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    8c02:	4622      	mov	r2, r4
    8c04:	4628      	mov	r0, r5
    8c06:	f7ff fd4d 	bl	86a4 <le_conn_req>
		break;
    8c0a:	e7b1      	b.n	8b70 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    8c0c:	4622      	mov	r2, r4
    8c0e:	4628      	mov	r0, r5
    8c10:	f7ff f954 	bl	7ebc <le_conn_rsp>
		break;
    8c14:	e7ac      	b.n	8b70 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    8c16:	4622      	mov	r2, r4
    8c18:	4628      	mov	r0, r5
    8c1a:	f7ff fc57 	bl	84cc <le_disconn_req>
		break;
    8c1e:	e7a7      	b.n	8b70 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    8c20:	4622      	mov	r2, r4
    8c22:	4628      	mov	r0, r5
    8c24:	f7ff f9a0 	bl	7f68 <le_disconn_rsp>
		break;
    8c28:	e7a2      	b.n	8b70 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    8c2a:	4622      	mov	r2, r4
    8c2c:	4628      	mov	r0, r5
    8c2e:	f7ff ff7b 	bl	8b28 <le_credits>
		break;
    8c32:	e79d      	b.n	8b70 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    8c34:	4622      	mov	r2, r4
    8c36:	4628      	mov	r0, r5
    8c38:	f7ff f9a5 	bl	7f86 <reject_cmd>
		break;
    8c3c:	e798      	b.n	8b70 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8c3e:	6828      	ldr	r0, [r5, #0]
    8c40:	2200      	movs	r2, #0
    8c42:	9200      	str	r2, [sp, #0]
    8c44:	4613      	mov	r3, r2
    8c46:	f7ff fbd9 	bl	83fc <l2cap_send_reject>
		break;
    8c4a:	e791      	b.n	8b70 <l2cap_recv+0xc>

00008c4c <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8c4c:	b510      	push	{r4, lr}
    8c4e:	b082      	sub	sp, #8
    8c50:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    8c52:	b1f9      	cbz	r1, 8c94 <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    8c54:	6803      	ldr	r3, [r0, #0]
    8c56:	b303      	cbz	r3, 8c9a <bt_l2cap_chan_send+0x4e>
    8c58:	7b1b      	ldrb	r3, [r3, #12]
    8c5a:	2b03      	cmp	r3, #3
    8c5c:	d120      	bne.n	8ca0 <bt_l2cap_chan_send+0x54>
    8c5e:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8c60:	2200      	movs	r2, #0
    8c62:	a901      	add	r1, sp, #4
    8c64:	f7ff fb40 	bl	82e8 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8c68:	2800      	cmp	r0, #0
    8c6a:	db01      	blt.n	8c70 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8c6c:	b002      	add	sp, #8
    8c6e:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8c70:	f110 0f0b 	cmn.w	r0, #11
    8c74:	d1fa      	bne.n	8c6c <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    8c76:	9901      	ldr	r1, [sp, #4]
    8c78:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8c7c:	f012 f86c 	bl	1ad58 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8c80:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    8c82:	f102 0310 	add.w	r3, r2, #16
    8c86:	89d2      	ldrh	r2, [r2, #14]
    8c88:	4413      	add	r3, r2
    8c8a:	3303      	adds	r3, #3
    8c8c:	f023 0303 	bic.w	r3, r3, #3
    8c90:	6818      	ldr	r0, [r3, #0]
    8c92:	e7eb      	b.n	8c6c <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    8c94:	f06f 0015 	mvn.w	r0, #21
    8c98:	e7e8      	b.n	8c6c <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8c9a:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8c9e:	e7e5      	b.n	8c6c <bt_l2cap_chan_send+0x20>
    8ca0:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8ca4:	e7e2      	b.n	8c6c <bt_l2cap_chan_send+0x20>

00008ca6 <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    8ca6:	b100      	cbz	r0, 8caa <range_is_valid+0x4>
    8ca8:	b919      	cbnz	r1, 8cb2 <range_is_valid+0xc>
		if (err) {
    8caa:	b142      	cbz	r2, 8cbe <range_is_valid+0x18>
			*err = 0;
    8cac:	2000      	movs	r0, #0
    8cae:	8010      	strh	r0, [r2, #0]
    8cb0:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    8cb2:	4288      	cmp	r0, r1
    8cb4:	d905      	bls.n	8cc2 <range_is_valid+0x1c>
		if (err) {
    8cb6:	b132      	cbz	r2, 8cc6 <range_is_valid+0x20>
			*err = start;
    8cb8:	8010      	strh	r0, [r2, #0]
		}
		return false;
    8cba:	2000      	movs	r0, #0
    8cbc:	4770      	bx	lr
		return false;
    8cbe:	2000      	movs	r0, #0
    8cc0:	4770      	bx	lr
	}

	return true;
    8cc2:	2001      	movs	r0, #1
    8cc4:	4770      	bx	lr
		return false;
    8cc6:	2000      	movs	r0, #0
}
    8cc8:	4770      	bx	lr

00008cca <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    8cca:	f012 0f01 	tst.w	r2, #1
    8cce:	d007      	beq.n	8ce0 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8cd0:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    8cd2:	f013 0f15 	tst.w	r3, #21
    8cd6:	d101      	bne.n	8cdc <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8cd8:	2002      	movs	r0, #2
    8cda:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    8cdc:	684b      	ldr	r3, [r1, #4]
    8cde:	b1eb      	cbz	r3, 8d1c <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    8ce0:	f012 0f02 	tst.w	r2, #2
    8ce4:	d007      	beq.n	8cf6 <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8ce6:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    8ce8:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    8cec:	d101      	bne.n	8cf2 <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8cee:	2003      	movs	r0, #3
    8cf0:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    8cf2:	688b      	ldr	r3, [r1, #8]
    8cf4:	b1a3      	cbz	r3, 8d20 <check_perm+0x56>
	}

	mask &= attr->perm;
    8cf6:	7c8b      	ldrb	r3, [r1, #18]
    8cf8:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    8cfa:	f012 0f30 	tst.w	r2, #48	; 0x30
    8cfe:	d004      	beq.n	8d0a <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    8d00:	7a03      	ldrb	r3, [r0, #8]
    8d02:	2b02      	cmp	r3, #2
    8d04:	d801      	bhi.n	8d0a <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    8d06:	2005      	movs	r0, #5
    8d08:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    8d0a:	f012 0f0c 	tst.w	r2, #12
    8d0e:	d009      	beq.n	8d24 <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    8d10:	7a83      	ldrb	r3, [r0, #10]
    8d12:	b90b      	cbnz	r3, 8d18 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    8d14:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    8d16:	4770      	bx	lr
	return 0;
    8d18:	2000      	movs	r0, #0
    8d1a:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8d1c:	2002      	movs	r0, #2
    8d1e:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8d20:	2003      	movs	r0, #3
    8d22:	4770      	bx	lr
	return 0;
    8d24:	2000      	movs	r0, #0
    8d26:	4770      	bx	lr

00008d28 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8d28:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8d2c:	2bfe      	cmp	r3, #254	; 0xfe
    8d2e:	d901      	bls.n	8d34 <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8d30:	200e      	movs	r0, #14
}
    8d32:	4770      	bx	lr
		return -err;
    8d34:	4240      	negs	r0, r0
    8d36:	b2c0      	uxtb	r0, r0
    8d38:	4770      	bx	lr

00008d3a <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8d3a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8d3e:	b082      	sub	sp, #8
    8d40:	4606      	mov	r6, r0
    8d42:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    8d44:	680f      	ldr	r7, [r1, #0]
    8d46:	222a      	movs	r2, #42	; 0x2a
    8d48:	4601      	mov	r1, r0
    8d4a:	4638      	mov	r0, r7
    8d4c:	f7ff ffbd 	bl	8cca <check_perm>
    8d50:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    8d52:	b120      	cbz	r0, 8d5e <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    8d54:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    8d56:	4628      	mov	r0, r5
    8d58:	b002      	add	sp, #8
    8d5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d5e:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8d60:	f8d6 8008 	ldr.w	r8, [r6, #8]
    8d64:	7c23      	ldrb	r3, [r4, #16]
    8d66:	8a62      	ldrh	r2, [r4, #18]
    8d68:	2100      	movs	r1, #0
    8d6a:	9101      	str	r1, [sp, #4]
    8d6c:	9200      	str	r2, [sp, #0]
    8d6e:	68e2      	ldr	r2, [r4, #12]
    8d70:	4631      	mov	r1, r6
    8d72:	4638      	mov	r0, r7
    8d74:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    8d76:	2800      	cmp	r0, #0
    8d78:	db02      	blt.n	8d80 <write_cb+0x46>
    8d7a:	7c23      	ldrb	r3, [r4, #16]
    8d7c:	4298      	cmp	r0, r3
    8d7e:	d003      	beq.n	8d88 <write_cb+0x4e>
		data->err = err_to_att(write);
    8d80:	f7ff ffd2 	bl	8d28 <err_to_att>
    8d84:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8d86:	e7e6      	b.n	8d56 <write_cb+0x1c>
	data->err = 0;
    8d88:	2300      	movs	r3, #0
    8d8a:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8d8c:	2501      	movs	r5, #1
    8d8e:	e7e2      	b.n	8d56 <write_cb+0x1c>

00008d90 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8d90:	2006      	movs	r0, #6
    8d92:	4770      	bx	lr

00008d94 <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8d94:	2006      	movs	r0, #6
    8d96:	4770      	bx	lr

00008d98 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8d98:	2300      	movs	r3, #0
    8d9a:	2b1a      	cmp	r3, #26
    8d9c:	d80b      	bhi.n	8db6 <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8d9e:	4a09      	ldr	r2, [pc, #36]	; (8dc4 <att_op_get_type+0x2c>)
    8da0:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8da4:	4282      	cmp	r2, r0
    8da6:	d001      	beq.n	8dac <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8da8:	3301      	adds	r3, #1
    8daa:	e7f6      	b.n	8d9a <att_op_get_type+0x2>
			return handlers[i].type;
    8dac:	4a05      	ldr	r2, [pc, #20]	; (8dc4 <att_op_get_type+0x2c>)
    8dae:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    8db2:	7898      	ldrb	r0, [r3, #2]
    8db4:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    8db6:	f010 0f40 	tst.w	r0, #64	; 0x40
    8dba:	d101      	bne.n	8dc0 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    8dbc:	2006      	movs	r0, #6
}
    8dbe:	4770      	bx	lr
		return ATT_COMMAND;
    8dc0:	2000      	movs	r0, #0
    8dc2:	4770      	bx	lr
    8dc4:	0003173c 	.word	0x0003173c

00008dc8 <att_cb>:
{
    8dc8:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    8dca:	6883      	ldr	r3, [r0, #8]
    8dcc:	7818      	ldrb	r0, [r3, #0]
    8dce:	f7ff ffe3 	bl	8d98 <att_op_get_type>
    8dd2:	3801      	subs	r0, #1
    8dd4:	2804      	cmp	r0, #4
    8dd6:	d808      	bhi.n	8dea <att_cb+0x22>
    8dd8:	e8df f000 	tbb	[pc, r0]
    8ddc:	09070305 	.word	0x09070305
    8de0:	05          	.byte	0x05
    8de1:	00          	.byte	0x00
		return att_rsp_sent;
    8de2:	4804      	ldr	r0, [pc, #16]	; (8df4 <att_cb+0x2c>)
    8de4:	bd08      	pop	{r3, pc}
		return att_req_sent;
    8de6:	4804      	ldr	r0, [pc, #16]	; (8df8 <att_cb+0x30>)
    8de8:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    8dea:	4804      	ldr	r0, [pc, #16]	; (8dfc <att_cb+0x34>)
    8dec:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    8dee:	4804      	ldr	r0, [pc, #16]	; (8e00 <att_cb+0x38>)
}
    8df0:	bd08      	pop	{r3, pc}
    8df2:	bf00      	nop
    8df4:	00008f3b 	.word	0x00008f3b
    8df8:	00008fad 	.word	0x00008fad
    8dfc:	00008f65 	.word	0x00008f65
    8e00:	00008f73 	.word	0x00008f73

00008e04 <read_cb>:
{
    8e04:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    8e08:	b083      	sub	sp, #12
    8e0a:	4606      	mov	r6, r0
    8e0c:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8e0e:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    8e12:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    8e16:	6888      	ldr	r0, [r1, #8]
    8e18:	2100      	movs	r1, #0
    8e1a:	3008      	adds	r0, #8
    8e1c:	f011 fff6 	bl	1ae0c <net_buf_simple_add>
    8e20:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    8e22:	2300      	movs	r3, #0
    8e24:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    8e26:	2215      	movs	r2, #21
    8e28:	4631      	mov	r1, r6
    8e2a:	4638      	mov	r0, r7
    8e2c:	f7ff ff4d 	bl	8cca <check_perm>
    8e30:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    8e32:	b120      	cbz	r0, 8e3e <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    8e34:	2500      	movs	r5, #0
}
    8e36:	4628      	mov	r0, r5
    8e38:	b003      	add	sp, #12
    8e3a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8e3e:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e40:	f8d6 9004 	ldr.w	r9, [r6, #4]
    8e44:	68a3      	ldr	r3, [r4, #8]
    8e46:	6899      	ldr	r1, [r3, #8]
    8e48:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8e4a:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8e4e:	1a9b      	subs	r3, r3, r2
    8e50:	88a0      	ldrh	r0, [r4, #4]
    8e52:	9000      	str	r0, [sp, #0]
    8e54:	b29b      	uxth	r3, r3
    8e56:	440a      	add	r2, r1
    8e58:	4631      	mov	r1, r6
    8e5a:	4638      	mov	r0, r7
    8e5c:	47c8      	blx	r9
	if (read < 0) {
    8e5e:	1e01      	subs	r1, r0, #0
    8e60:	db05      	blt.n	8e6e <read_cb+0x6a>
	net_buf_add(data->buf, read);
    8e62:	68a0      	ldr	r0, [r4, #8]
    8e64:	3008      	adds	r0, #8
    8e66:	f011 ffd1 	bl	1ae0c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8e6a:	2501      	movs	r5, #1
    8e6c:	e7e3      	b.n	8e36 <read_cb+0x32>
		data->err = err_to_att(read);
    8e6e:	4608      	mov	r0, r1
    8e70:	f7ff ff5a 	bl	8d28 <err_to_att>
    8e74:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    8e76:	e7de      	b.n	8e36 <read_cb+0x32>

00008e78 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8e78:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8e7a:	7b03      	ldrb	r3, [r0, #12]
    8e7c:	2b03      	cmp	r3, #3
    8e7e:	d10f      	bne.n	8ea0 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8e80:	2104      	movs	r1, #4
    8e82:	f7ff fb7b 	bl	857c <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    8e86:	b168      	cbz	r0, 8ea4 <att_chan_get+0x2c>
    8e88:	f3bf 8f5b 	dmb	ish
    8e8c:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8e90:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    8e94:	f012 0f04 	tst.w	r2, #4
    8e98:	d100      	bne.n	8e9c <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8e9a:	bd08      	pop	{r3, pc}
		return NULL;
    8e9c:	2000      	movs	r0, #0
    8e9e:	bd08      	pop	{r3, pc}
		return NULL;
    8ea0:	2000      	movs	r0, #0
    8ea2:	bd08      	pop	{r3, pc}
		return NULL;
    8ea4:	2000      	movs	r0, #0
    8ea6:	bd08      	pop	{r3, pc}

00008ea8 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8ea8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8eaa:	2400      	movs	r4, #0
    8eac:	b11c      	cbz	r4, 8eb6 <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8eae:	f06f 040b 	mvn.w	r4, #11
}
    8eb2:	4620      	mov	r0, r4
    8eb4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    8eb6:	23ec      	movs	r3, #236	; 0xec
    8eb8:	fb03 f304 	mul.w	r3, r3, r4
    8ebc:	4a12      	ldr	r2, [pc, #72]	; (8f08 <bt_att_accept+0x60>)
    8ebe:	58d3      	ldr	r3, [r2, r3]
    8ec0:	b10b      	cbz	r3, 8ec6 <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8ec2:	3401      	adds	r4, #1
    8ec4:	e7f2      	b.n	8eac <bt_att_accept+0x4>
    8ec6:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    8ec8:	480f      	ldr	r0, [pc, #60]	; (8f08 <bt_att_accept+0x60>)
    8eca:	23ec      	movs	r3, #236	; 0xec
    8ecc:	fb03 f304 	mul.w	r3, r3, r4
    8ed0:	18c6      	adds	r6, r0, r3
    8ed2:	4a0e      	ldr	r2, [pc, #56]	; (8f0c <bt_att_accept+0x64>)
    8ed4:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    8ed6:	f103 0298 	add.w	r2, r3, #152	; 0x98
    8eda:	4402      	add	r2, r0
    8edc:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    8ede:	2100      	movs	r1, #0
    8ee0:	f3bf 8f5b 	dmb	ish
    8ee4:	e852 7f00 	ldrex	r7, [r2]
    8ee8:	e842 1e00 	strex	lr, r1, [r2]
    8eec:	f1be 0f00 	cmp.w	lr, #0
    8ef0:	d1f8      	bne.n	8ee4 <bt_att_accept+0x3c>
    8ef2:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    8ef6:	33d0      	adds	r3, #208	; 0xd0
    8ef8:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    8efa:	2202      	movs	r2, #2
    8efc:	4611      	mov	r1, r2
    8efe:	3004      	adds	r0, #4
    8f00:	f020 fa7a 	bl	293f8 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    8f04:	602e      	str	r6, [r5, #0]
		return 0;
    8f06:	e7d4      	b.n	8eb2 <bt_att_accept+0xa>
    8f08:	20000758 	.word	0x20000758
    8f0c:	2000baf4 	.word	0x2000baf4

00008f10 <att_req_destroy>:
{
    8f10:	b510      	push	{r4, lr}
    8f12:	4604      	mov	r4, r0
	if (req->buf) {
    8f14:	6900      	ldr	r0, [r0, #16]
    8f16:	b108      	cbz	r0, 8f1c <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8f18:	f011 ff2c 	bl	1ad74 <net_buf_unref>
	if (req->destroy) {
    8f1c:	68a3      	ldr	r3, [r4, #8]
    8f1e:	b10b      	cbz	r3, 8f24 <att_req_destroy+0x14>
		req->destroy(req);
    8f20:	4620      	mov	r0, r4
    8f22:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    8f24:	2218      	movs	r2, #24
    8f26:	2100      	movs	r1, #0
    8f28:	4620      	mov	r0, r4
    8f2a:	f021 fd21 	bl	2a970 <memset>
    8f2e:	bd10      	pop	{r4, pc}

00008f30 <att_get>:
{
    8f30:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    8f32:	2104      	movs	r1, #4
    8f34:	f7ff fb07 	bl	8546 <bt_l2cap_le_lookup_tx_cid>
}
    8f38:	bd08      	pop	{r3, pc}

00008f3a <att_rsp_sent>:
{
    8f3a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8f3c:	f7ff fff8 	bl	8f30 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8f40:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    8f44:	f3bf 8f5b 	dmb	ish
    8f48:	e853 2f00 	ldrex	r2, [r3]
    8f4c:	f022 0201 	bic.w	r2, r2, #1
    8f50:	e843 2100 	strex	r1, r2, [r3]
    8f54:	2900      	cmp	r1, #0
    8f56:	d1f7      	bne.n	8f48 <att_rsp_sent+0xe>
    8f58:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8f5c:	30d4      	adds	r0, #212	; 0xd4
    8f5e:	f020 fa54 	bl	2940a <_impl_k_sem_give>
    8f62:	bd08      	pop	{r3, pc}

00008f64 <att_pdu_sent>:
{
    8f64:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8f66:	f7ff ffe3 	bl	8f30 <att_get>
    8f6a:	30d4      	adds	r0, #212	; 0xd4
    8f6c:	f020 fa4d 	bl	2940a <_impl_k_sem_give>
    8f70:	bd08      	pop	{r3, pc}

00008f72 <att_cfm_sent>:
{
    8f72:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8f74:	f7ff ffdc 	bl	8f30 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8f78:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8f7c:	f3bf 8f5b 	dmb	ish
    8f80:	e853 2f00 	ldrex	r2, [r3]
    8f84:	f022 0202 	bic.w	r2, r2, #2
    8f88:	e843 2100 	strex	r1, r2, [r3]
    8f8c:	2900      	cmp	r1, #0
    8f8e:	d1f7      	bne.n	8f80 <att_cfm_sent+0xe>
    8f90:	f3bf 8f5b 	dmb	ish
    8f94:	30d4      	adds	r0, #212	; 0xd4
    8f96:	f020 fa38 	bl	2940a <_impl_k_sem_give>
    8f9a:	bd08      	pop	{r3, pc}

00008f9c <att_notify>:
{
    8f9c:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8f9e:	f101 0008 	add.w	r0, r1, #8
    8fa2:	f011 ff90 	bl	1aec6 <net_buf_simple_pull_le16>
}
    8fa6:	2000      	movs	r0, #0
    8fa8:	bd08      	pop	{r3, pc}
	...

00008fac <att_req_sent>:
{
    8fac:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8fae:	f7ff ffbf 	bl	8f30 <att_get>
    8fb2:	4604      	mov	r4, r0
    8fb4:	30d4      	adds	r0, #212	; 0xd4
    8fb6:	f020 fa28 	bl	2940a <_impl_k_sem_give>
	if (att->req) {
    8fba:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8fbe:	b133      	cbz	r3, 8fce <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    8fc0:	f247 5230 	movw	r2, #30000	; 0x7530
    8fc4:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    8fc8:	4801      	ldr	r0, [pc, #4]	; (8fd0 <att_req_sent+0x24>)
    8fca:	f021 f867 	bl	2a09c <k_delayed_work_submit_to_queue>
    8fce:	bd10      	pop	{r4, pc}
    8fd0:	20002c78 	.word	0x20002c78

00008fd4 <read_group_cb>:
{
    8fd4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8fd8:	b084      	sub	sp, #16
    8fda:	4605      	mov	r5, r0
    8fdc:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    8fde:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    8fe0:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    8fe2:	2300      	movs	r3, #0
    8fe4:	f88d 3008 	strb.w	r3, [sp, #8]
    8fe8:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    8fec:	f8ad 300a 	strh.w	r3, [sp, #10]
    8ff0:	a902      	add	r1, sp, #8
    8ff2:	6800      	ldr	r0, [r0, #0]
    8ff4:	f7fb fb8d 	bl	4712 <bt_uuid_cmp>
    8ff8:	b1a8      	cbz	r0, 9026 <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    8ffa:	2300      	movs	r3, #0
    8ffc:	f88d 300c 	strb.w	r3, [sp, #12]
    9000:	f642 0301 	movw	r3, #10241	; 0x2801
    9004:	f8ad 300e 	strh.w	r3, [sp, #14]
    9008:	a903      	add	r1, sp, #12
    900a:	6828      	ldr	r0, [r5, #0]
    900c:	f7fb fb81 	bl	4712 <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    9010:	b148      	cbz	r0, 9026 <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    9012:	6923      	ldr	r3, [r4, #16]
    9014:	2b00      	cmp	r3, #0
    9016:	d04c      	beq.n	90b2 <read_group_cb+0xde>
    9018:	8a2a      	ldrh	r2, [r5, #16]
    901a:	8859      	ldrh	r1, [r3, #2]
    901c:	428a      	cmp	r2, r1
    901e:	d94a      	bls.n	90b6 <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9020:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    9022:	2001      	movs	r0, #1
    9024:	e039      	b.n	909a <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    9026:	6861      	ldr	r1, [r4, #4]
    9028:	6828      	ldr	r0, [r5, #0]
    902a:	f7fb fb72 	bl	4712 <bt_uuid_cmp>
    902e:	2800      	cmp	r0, #0
    9030:	d130      	bne.n	9094 <read_group_cb+0xc0>
	if (data->rsp->len &&
    9032:	68e3      	ldr	r3, [r4, #12]
    9034:	781a      	ldrb	r2, [r3, #0]
    9036:	b132      	cbz	r2, 9046 <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    9038:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    903c:	68a1      	ldr	r1, [r4, #8]
    903e:	8989      	ldrh	r1, [r1, #12]
    9040:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    9042:	4293      	cmp	r3, r2
    9044:	db39      	blt.n	90ba <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9046:	68a0      	ldr	r0, [r4, #8]
    9048:	2104      	movs	r1, #4
    904a:	3008      	adds	r0, #8
    904c:	f011 fede 	bl	1ae0c <net_buf_simple_add>
    9050:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    9052:	8a2b      	ldrh	r3, [r5, #16]
    9054:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9056:	6923      	ldr	r3, [r4, #16]
    9058:	8a2a      	ldrh	r2, [r5, #16]
    905a:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    905c:	f8d5 8004 	ldr.w	r8, [r5, #4]
    9060:	68a3      	ldr	r3, [r4, #8]
    9062:	6899      	ldr	r1, [r3, #8]
    9064:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    9066:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    906a:	1a9b      	subs	r3, r3, r2
    906c:	2000      	movs	r0, #0
    906e:	9000      	str	r0, [sp, #0]
    9070:	b29b      	uxth	r3, r3
    9072:	440a      	add	r2, r1
    9074:	4629      	mov	r1, r5
    9076:	4638      	mov	r0, r7
    9078:	47c0      	blx	r8
	if (read < 0) {
    907a:	1e01      	subs	r1, r0, #0
    907c:	db1f      	blt.n	90be <read_group_cb+0xea>
	if (!data->rsp->len) {
    907e:	68e2      	ldr	r2, [r4, #12]
    9080:	7813      	ldrb	r3, [r2, #0]
    9082:	b96b      	cbnz	r3, 90a0 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    9084:	1d0b      	adds	r3, r1, #4
    9086:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    9088:	68a0      	ldr	r0, [r4, #8]
    908a:	3008      	adds	r0, #8
    908c:	f011 febe 	bl	1ae0c <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    9090:	2001      	movs	r0, #1
    9092:	e002      	b.n	909a <read_group_cb+0xc6>
		data->group = NULL;
    9094:	2300      	movs	r3, #0
    9096:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    9098:	2001      	movs	r0, #1
}
    909a:	b004      	add	sp, #16
    909c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    90a0:	1d0a      	adds	r2, r1, #4
    90a2:	4293      	cmp	r3, r2
    90a4:	d0f0      	beq.n	9088 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    90a6:	68a2      	ldr	r2, [r4, #8]
    90a8:	8993      	ldrh	r3, [r2, #12]
    90aa:	3b04      	subs	r3, #4
    90ac:	8193      	strh	r3, [r2, #12]
		return false;
    90ae:	2000      	movs	r0, #0
    90b0:	e7f3      	b.n	909a <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    90b2:	2001      	movs	r0, #1
    90b4:	e7f1      	b.n	909a <read_group_cb+0xc6>
    90b6:	2001      	movs	r0, #1
    90b8:	e7ef      	b.n	909a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    90ba:	2000      	movs	r0, #0
    90bc:	e7ed      	b.n	909a <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    90be:	2000      	movs	r0, #0
    90c0:	e7eb      	b.n	909a <read_group_cb+0xc6>

000090c2 <read_type_cb>:
{
    90c2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    90c6:	b082      	sub	sp, #8
    90c8:	4606      	mov	r6, r0
    90ca:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    90cc:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    90ce:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    90d2:	6849      	ldr	r1, [r1, #4]
    90d4:	6800      	ldr	r0, [r0, #0]
    90d6:	f7fb fb1c 	bl	4712 <bt_uuid_cmp>
    90da:	2800      	cmp	r0, #0
    90dc:	d14d      	bne.n	917a <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    90de:	2215      	movs	r2, #21
    90e0:	4631      	mov	r1, r6
    90e2:	4640      	mov	r0, r8
    90e4:	f7ff fdf1 	bl	8cca <check_perm>
    90e8:	4605      	mov	r5, r0
    90ea:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    90ec:	b130      	cbz	r0, 90fc <read_type_cb+0x3a>
		if (data->rsp->len) {
    90ee:	68e3      	ldr	r3, [r4, #12]
    90f0:	781d      	ldrb	r5, [r3, #0]
    90f2:	2d00      	cmp	r5, #0
    90f4:	d042      	beq.n	917c <read_type_cb+0xba>
			data->err = 0x00;
    90f6:	2500      	movs	r5, #0
    90f8:	7525      	strb	r5, [r4, #20]
    90fa:	e03f      	b.n	917c <read_type_cb+0xba>
	data->err = 0x00;
    90fc:	f04f 0900 	mov.w	r9, #0
    9100:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    9104:	68a0      	ldr	r0, [r4, #8]
    9106:	2102      	movs	r1, #2
    9108:	3008      	adds	r0, #8
    910a:	f011 fe7f 	bl	1ae0c <net_buf_simple_add>
    910e:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    9110:	8a33      	ldrh	r3, [r6, #16]
    9112:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    9114:	f8d6 a004 	ldr.w	sl, [r6, #4]
    9118:	68a3      	ldr	r3, [r4, #8]
    911a:	6899      	ldr	r1, [r3, #8]
    911c:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    911e:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    9122:	1a9b      	subs	r3, r3, r2
    9124:	f8cd 9000 	str.w	r9, [sp]
    9128:	b29b      	uxth	r3, r3
    912a:	440a      	add	r2, r1
    912c:	4631      	mov	r1, r6
    912e:	4640      	mov	r0, r8
    9130:	47d0      	blx	sl
	if (read < 0) {
    9132:	1e01      	subs	r1, r0, #0
    9134:	db14      	blt.n	9160 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    9136:	68e2      	ldr	r2, [r4, #12]
    9138:	7813      	ldrb	r3, [r2, #0]
    913a:	b9b3      	cbnz	r3, 916a <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    913c:	1c8b      	adds	r3, r1, #2
    913e:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    9140:	68a0      	ldr	r0, [r4, #8]
    9142:	3008      	adds	r0, #8
    9144:	f011 fe62 	bl	1ae0c <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    9148:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    914c:	68a3      	ldr	r3, [r4, #8]
    914e:	899b      	ldrh	r3, [r3, #12]
    9150:	1aed      	subs	r5, r5, r3
    9152:	68e3      	ldr	r3, [r4, #12]
    9154:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    9156:	429d      	cmp	r5, r3
    9158:	bfd4      	ite	le
    915a:	2500      	movle	r5, #0
    915c:	2501      	movgt	r5, #1
    915e:	e00d      	b.n	917c <read_type_cb+0xba>
		data->err = err_to_att(read);
    9160:	4608      	mov	r0, r1
    9162:	f7ff fde1 	bl	8d28 <err_to_att>
    9166:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    9168:	e008      	b.n	917c <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    916a:	1c8a      	adds	r2, r1, #2
    916c:	4293      	cmp	r3, r2
    916e:	d0e7      	beq.n	9140 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    9170:	68a2      	ldr	r2, [r4, #8]
    9172:	8993      	ldrh	r3, [r2, #12]
    9174:	3b02      	subs	r3, #2
    9176:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    9178:	e000      	b.n	917c <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    917a:	2501      	movs	r5, #1
}
    917c:	4628      	mov	r0, r5
    917e:	b002      	add	sp, #8
    9180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00009184 <uuid_create>:
{
    9184:	b510      	push	{r4, lr}
    9186:	4604      	mov	r4, r0
	switch (buf->len) {
    9188:	898b      	ldrh	r3, [r1, #12]
    918a:	2b02      	cmp	r3, #2
    918c:	d003      	beq.n	9196 <uuid_create+0x12>
    918e:	2b10      	cmp	r3, #16
    9190:	d00a      	beq.n	91a8 <uuid_create+0x24>
	return false;
    9192:	2000      	movs	r0, #0
}
    9194:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    9196:	2300      	movs	r3, #0
    9198:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    919a:	f101 0008 	add.w	r0, r1, #8
    919e:	f011 fe92 	bl	1aec6 <net_buf_simple_pull_le16>
    91a2:	8060      	strh	r0, [r4, #2]
		return true;
    91a4:	2001      	movs	r0, #1
    91a6:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    91a8:	2302      	movs	r3, #2
    91aa:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    91ae:	898a      	ldrh	r2, [r1, #12]
    91b0:	6889      	ldr	r1, [r1, #8]
    91b2:	f7f7 f885 	bl	2c0 <memcpy>
		return true;
    91b6:	2001      	movs	r0, #1
    91b8:	bd10      	pop	{r4, pc}

000091ba <find_info_cb>:
{
    91ba:	b570      	push	{r4, r5, r6, lr}
    91bc:	4605      	mov	r5, r0
    91be:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    91c0:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    91c2:	688b      	ldr	r3, [r1, #8]
    91c4:	b13b      	cbz	r3, 91d6 <find_info_cb+0x1c>
	switch (data->rsp->format) {
    91c6:	68a3      	ldr	r3, [r4, #8]
    91c8:	781b      	ldrb	r3, [r3, #0]
    91ca:	2b01      	cmp	r3, #1
    91cc:	d011      	beq.n	91f2 <find_info_cb+0x38>
    91ce:	2b02      	cmp	r3, #2
    91d0:	d02b      	beq.n	922a <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    91d2:	2000      	movs	r0, #0
    91d4:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    91d6:	6848      	ldr	r0, [r1, #4]
    91d8:	2101      	movs	r1, #1
    91da:	3008      	adds	r0, #8
    91dc:	f011 fe16 	bl	1ae0c <net_buf_simple_add>
    91e0:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    91e2:	682b      	ldr	r3, [r5, #0]
    91e4:	781b      	ldrb	r3, [r3, #0]
    91e6:	b913      	cbnz	r3, 91ee <find_info_cb+0x34>
    91e8:	2301      	movs	r3, #1
    91ea:	7003      	strb	r3, [r0, #0]
    91ec:	e7eb      	b.n	91c6 <find_info_cb+0xc>
    91ee:	2302      	movs	r3, #2
    91f0:	e7fb      	b.n	91ea <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    91f2:	682b      	ldr	r3, [r5, #0]
    91f4:	781b      	ldrb	r3, [r3, #0]
    91f6:	b10b      	cbz	r3, 91fc <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    91f8:	2000      	movs	r0, #0
    91fa:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    91fc:	6860      	ldr	r0, [r4, #4]
    91fe:	2104      	movs	r1, #4
    9200:	3008      	adds	r0, #8
    9202:	f011 fe03 	bl	1ae0c <net_buf_simple_add>
    9206:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    9208:	8a2b      	ldrh	r3, [r5, #16]
    920a:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    920c:	68e3      	ldr	r3, [r4, #12]
    920e:	682a      	ldr	r2, [r5, #0]
    9210:	8852      	ldrh	r2, [r2, #2]
    9212:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    9214:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9218:	6862      	ldr	r2, [r4, #4]
    921a:	8992      	ldrh	r2, [r2, #12]
    921c:	1a9b      	subs	r3, r3, r2
    921e:	2b04      	cmp	r3, #4
    9220:	d801      	bhi.n	9226 <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    9222:	2000      	movs	r0, #0
    9224:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    9226:	2001      	movs	r0, #1
    9228:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    922a:	682b      	ldr	r3, [r5, #0]
    922c:	781b      	ldrb	r3, [r3, #0]
    922e:	2b02      	cmp	r3, #2
    9230:	d001      	beq.n	9236 <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    9232:	2000      	movs	r0, #0
    9234:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    9236:	6860      	ldr	r0, [r4, #4]
    9238:	2112      	movs	r1, #18
    923a:	3008      	adds	r0, #8
    923c:	f011 fde6 	bl	1ae0c <net_buf_simple_add>
    9240:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    9242:	8a2b      	ldrh	r3, [r5, #16]
    9244:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    9246:	68e0      	ldr	r0, [r4, #12]
    9248:	6829      	ldr	r1, [r5, #0]
    924a:	2210      	movs	r2, #16
    924c:	3101      	adds	r1, #1
    924e:	3002      	adds	r0, #2
    9250:	f7f7 f836 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    9254:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    9258:	6862      	ldr	r2, [r4, #4]
    925a:	8992      	ldrh	r2, [r2, #12]
    925c:	1a9b      	subs	r3, r3, r2
    925e:	2b12      	cmp	r3, #18
    9260:	d901      	bls.n	9266 <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    9262:	2001      	movs	r0, #1
    9264:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    9266:	2000      	movs	r0, #0
}
    9268:	bd70      	pop	{r4, r5, r6, pc}

0000926a <find_type_cb>:
{
    926a:	b5f0      	push	{r4, r5, r6, r7, lr}
    926c:	b089      	sub	sp, #36	; 0x24
    926e:	4605      	mov	r5, r0
    9270:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    9272:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    9274:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    9276:	2300      	movs	r3, #0
    9278:	f88d 3018 	strb.w	r3, [sp, #24]
    927c:	f642 0301 	movw	r3, #10241	; 0x2801
    9280:	f8ad 301a 	strh.w	r3, [sp, #26]
    9284:	a906      	add	r1, sp, #24
    9286:	6800      	ldr	r0, [r0, #0]
    9288:	f7fb fa43 	bl	4712 <bt_uuid_cmp>
    928c:	b920      	cbnz	r0, 9298 <find_type_cb+0x2e>
		data->group = NULL;
    928e:	2300      	movs	r3, #0
    9290:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    9292:	2001      	movs	r0, #1
}
    9294:	b009      	add	sp, #36	; 0x24
    9296:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    9298:	2300      	movs	r3, #0
    929a:	f88d 301c 	strb.w	r3, [sp, #28]
    929e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    92a2:	f8ad 301e 	strh.w	r3, [sp, #30]
    92a6:	a907      	add	r1, sp, #28
    92a8:	6828      	ldr	r0, [r5, #0]
    92aa:	f7fb fa32 	bl	4712 <bt_uuid_cmp>
    92ae:	b148      	cbz	r0, 92c4 <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    92b0:	68a3      	ldr	r3, [r4, #8]
    92b2:	2b00      	cmp	r3, #0
    92b4:	d039      	beq.n	932a <find_type_cb+0xc0>
    92b6:	8a2a      	ldrh	r2, [r5, #16]
    92b8:	8859      	ldrh	r1, [r3, #2]
    92ba:	428a      	cmp	r2, r1
    92bc:	d937      	bls.n	932e <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    92be:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    92c0:	2001      	movs	r0, #1
    92c2:	e7e7      	b.n	9294 <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    92c4:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    92c8:	6862      	ldr	r2, [r4, #4]
    92ca:	8992      	ldrh	r2, [r2, #12]
    92cc:	1a9b      	subs	r3, r3, r2
    92ce:	2b03      	cmp	r3, #3
    92d0:	d801      	bhi.n	92d6 <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    92d2:	2000      	movs	r0, #0
    92d4:	e7de      	b.n	9294 <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    92d6:	686e      	ldr	r6, [r5, #4]
    92d8:	2300      	movs	r3, #0
    92da:	9300      	str	r3, [sp, #0]
    92dc:	2310      	movs	r3, #16
    92de:	aa02      	add	r2, sp, #8
    92e0:	4629      	mov	r1, r5
    92e2:	4638      	mov	r0, r7
    92e4:	47b0      	blx	r6
	if (read < 0) {
    92e6:	1e02      	subs	r2, r0, #0
    92e8:	db06      	blt.n	92f8 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    92ea:	7c23      	ldrb	r3, [r4, #16]
    92ec:	429a      	cmp	r2, r3
    92ee:	d007      	beq.n	9300 <find_type_cb+0x96>
		data->group = NULL;
    92f0:	2300      	movs	r3, #0
    92f2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    92f4:	2001      	movs	r0, #1
    92f6:	e7cd      	b.n	9294 <find_type_cb+0x2a>
		data->group = NULL;
    92f8:	2300      	movs	r3, #0
    92fa:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    92fc:	2001      	movs	r0, #1
    92fe:	e7c9      	b.n	9294 <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    9300:	a902      	add	r1, sp, #8
    9302:	68e0      	ldr	r0, [r4, #12]
    9304:	f021 faa0 	bl	2a848 <memcmp>
    9308:	2800      	cmp	r0, #0
    930a:	d1f1      	bne.n	92f0 <find_type_cb+0x86>
	data->err = 0x00;
    930c:	2300      	movs	r3, #0
    930e:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    9310:	6860      	ldr	r0, [r4, #4]
    9312:	2104      	movs	r1, #4
    9314:	3008      	adds	r0, #8
    9316:	f011 fd79 	bl	1ae0c <net_buf_simple_add>
    931a:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    931c:	8a2b      	ldrh	r3, [r5, #16]
    931e:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    9320:	68a3      	ldr	r3, [r4, #8]
    9322:	8a2a      	ldrh	r2, [r5, #16]
    9324:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    9326:	2001      	movs	r0, #1
    9328:	e7b4      	b.n	9294 <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    932a:	2001      	movs	r0, #1
    932c:	e7b2      	b.n	9294 <find_type_cb+0x2a>
    932e:	2001      	movs	r0, #1
    9330:	e7b0      	b.n	9294 <find_type_cb+0x2a>

00009332 <att_change_security>:
{
    9332:	b508      	push	{r3, lr}
	switch (err) {
    9334:	2905      	cmp	r1, #5
    9336:	d008      	beq.n	934a <att_change_security+0x18>
    9338:	290f      	cmp	r1, #15
    933a:	d113      	bne.n	9364 <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    933c:	7a03      	ldrb	r3, [r0, #8]
    933e:	2b01      	cmp	r3, #1
    9340:	d813      	bhi.n	936a <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    9342:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    9344:	f7fd fe4a 	bl	6fdc <bt_conn_security>
    9348:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    934a:	7a03      	ldrb	r3, [r0, #8]
    934c:	2b01      	cmp	r3, #1
    934e:	d905      	bls.n	935c <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    9350:	2b02      	cmp	r3, #2
    9352:	d905      	bls.n	9360 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    9354:	2b03      	cmp	r3, #3
    9356:	d80b      	bhi.n	9370 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    9358:	2104      	movs	r1, #4
    935a:	e7f3      	b.n	9344 <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    935c:	2102      	movs	r1, #2
    935e:	e7f1      	b.n	9344 <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    9360:	2103      	movs	r1, #3
    9362:	e7ef      	b.n	9344 <att_change_security+0x12>
		return -EINVAL;
    9364:	f06f 0015 	mvn.w	r0, #21
    9368:	bd08      	pop	{r3, pc}
			return -EALREADY;
    936a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    936e:	bd08      	pop	{r3, pc}
			return -EALREADY;
    9370:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    9374:	bd08      	pop	{r3, pc}
	...

00009378 <bt_att_connected>:
{
    9378:	b510      	push	{r4, lr}
    937a:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    937c:	2317      	movs	r3, #23
    937e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    9382:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    9386:	4906      	ldr	r1, [pc, #24]	; (93a0 <bt_att_connected+0x28>)
    9388:	30ac      	adds	r0, #172	; 0xac
    938a:	f020 fe0f 	bl	29fac <k_delayed_work_init>
	list->head = NULL;
    938e:	2300      	movs	r3, #0
    9390:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    9394:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    9398:	6820      	ldr	r0, [r4, #0]
    939a:	f001 fadd 	bl	a958 <bt_gatt_connected>
    939e:	bd10      	pop	{r4, pc}
    93a0:	000096ff 	.word	0x000096ff

000093a4 <att_send_req>:
{
    93a4:	b570      	push	{r4, r5, r6, lr}
    93a6:	4605      	mov	r5, r0
    93a8:	460c      	mov	r4, r1
	att->req = req;
    93aa:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    93ae:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    93b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    93b6:	4630      	mov	r0, r6
    93b8:	f020 f83a 	bl	29430 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    93bc:	682b      	ldr	r3, [r5, #0]
    93be:	7b1b      	ldrb	r3, [r3, #12]
    93c0:	2b03      	cmp	r3, #3
    93c2:	d019      	beq.n	93f8 <att_send_req+0x54>
    93c4:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    93c6:	b323      	cbz	r3, 9412 <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    93c8:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    93ca:	f106 0008 	add.w	r0, r6, #8
    93ce:	f011 fd82 	bl	1aed6 <net_buf_simple_headroom>
    93d2:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    93d4:	89b3      	ldrh	r3, [r6, #12]
    93d6:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    93d8:	682d      	ldr	r5, [r5, #0]
    93da:	6920      	ldr	r0, [r4, #16]
    93dc:	f011 fce6 	bl	1adac <net_buf_ref>
    93e0:	4606      	mov	r6, r0
    93e2:	6920      	ldr	r0, [r4, #16]
    93e4:	f7ff fcf0 	bl	8dc8 <att_cb>
    93e8:	4603      	mov	r3, r0
    93ea:	4632      	mov	r2, r6
    93ec:	2104      	movs	r1, #4
    93ee:	4628      	mov	r0, r5
    93f0:	f7fe fea3 	bl	813a <bt_l2cap_send_cb>
	return 0;
    93f4:	2000      	movs	r0, #0
}
    93f6:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    93f8:	f3bf 8f5b 	dmb	ish
    93fc:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9400:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9404:	f013 0f04 	tst.w	r3, #4
    9408:	d101      	bne.n	940e <att_send_req+0x6a>
    940a:	2301      	movs	r3, #1
    940c:	e7db      	b.n	93c6 <att_send_req+0x22>
    940e:	2300      	movs	r3, #0
    9410:	e7d9      	b.n	93c6 <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9412:	4630      	mov	r0, r6
    9414:	f01f fff9 	bl	2940a <_impl_k_sem_give>
		return -ENOTCONN;
    9418:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    941c:	bd70      	pop	{r4, r5, r6, pc}

0000941e <att_process>:
{
    941e:	b508      	push	{r3, lr}
	return (!list->head);
    9420:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    9424:	b131      	cbz	r1, 9434 <att_process+0x16>
	list->head = node->next;
    9426:	680b      	ldr	r3, [r1, #0]
    9428:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    942c:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9430:	4291      	cmp	r1, r2
    9432:	d003      	beq.n	943c <att_process+0x1e>
	if (!node) {
    9434:	b109      	cbz	r1, 943a <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    9436:	f7ff ffb5 	bl	93a4 <att_send_req>
    943a:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    943c:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    9440:	e7f8      	b.n	9434 <att_process+0x16>

00009442 <att_handle_rsp>:
{
    9442:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9446:	b082      	sub	sp, #8
    9448:	4604      	mov	r4, r0
    944a:	460e      	mov	r6, r1
    944c:	4617      	mov	r7, r2
    944e:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    9450:	30ac      	adds	r0, #172	; 0xac
    9452:	f020 fdc9 	bl	29fe8 <k_delayed_work_cancel>
	if (!att->req) {
    9456:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    945a:	b1e3      	cbz	r3, 9496 <att_handle_rsp+0x54>
	if (att->req->buf) {
    945c:	6918      	ldr	r0, [r3, #16]
    945e:	b128      	cbz	r0, 946c <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    9460:	f011 fc88 	bl	1ad74 <net_buf_unref>
		att->req->buf = NULL;
    9464:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9468:	2200      	movs	r2, #0
    946a:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    946c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9470:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    9474:	2200      	movs	r2, #0
    9476:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    9478:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    947c:	9300      	str	r3, [sp, #0]
    947e:	463b      	mov	r3, r7
    9480:	4632      	mov	r2, r6
    9482:	4629      	mov	r1, r5
    9484:	6820      	ldr	r0, [r4, #0]
    9486:	47c0      	blx	r8
	if (!att->req->func) {
    9488:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    948c:	6843      	ldr	r3, [r0, #4]
    948e:	b14b      	cbz	r3, 94a4 <att_handle_rsp+0x62>
	att->req = NULL;
    9490:	2300      	movs	r3, #0
    9492:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    9496:	4620      	mov	r0, r4
    9498:	f7ff ffc1 	bl	941e <att_process>
}
    949c:	2000      	movs	r0, #0
    949e:	b002      	add	sp, #8
    94a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    94a4:	f7ff fd34 	bl	8f10 <att_req_destroy>
    94a8:	e7f2      	b.n	9490 <att_handle_rsp+0x4e>

000094aa <att_confirm>:
{
    94aa:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94ac:	2300      	movs	r3, #0
    94ae:	898a      	ldrh	r2, [r1, #12]
    94b0:	6889      	ldr	r1, [r1, #8]
    94b2:	f7ff ffc6 	bl	9442 <att_handle_rsp>
}
    94b6:	bd08      	pop	{r3, pc}

000094b8 <att_handle_exec_write_rsp>:
{
    94b8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94ba:	2300      	movs	r3, #0
    94bc:	898a      	ldrh	r2, [r1, #12]
    94be:	6889      	ldr	r1, [r1, #8]
    94c0:	f7ff ffbf 	bl	9442 <att_handle_rsp>
}
    94c4:	bd08      	pop	{r3, pc}

000094c6 <att_handle_prepare_write_rsp>:
{
    94c6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94c8:	2300      	movs	r3, #0
    94ca:	898a      	ldrh	r2, [r1, #12]
    94cc:	6889      	ldr	r1, [r1, #8]
    94ce:	f7ff ffb8 	bl	9442 <att_handle_rsp>
}
    94d2:	bd08      	pop	{r3, pc}

000094d4 <att_handle_write_rsp>:
{
    94d4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94d6:	2300      	movs	r3, #0
    94d8:	898a      	ldrh	r2, [r1, #12]
    94da:	6889      	ldr	r1, [r1, #8]
    94dc:	f7ff ffb1 	bl	9442 <att_handle_rsp>
}
    94e0:	bd08      	pop	{r3, pc}

000094e2 <att_handle_read_mult_rsp>:
{
    94e2:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94e4:	2300      	movs	r3, #0
    94e6:	898a      	ldrh	r2, [r1, #12]
    94e8:	6889      	ldr	r1, [r1, #8]
    94ea:	f7ff ffaa 	bl	9442 <att_handle_rsp>
}
    94ee:	bd08      	pop	{r3, pc}

000094f0 <att_handle_read_blob_rsp>:
{
    94f0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    94f2:	2300      	movs	r3, #0
    94f4:	898a      	ldrh	r2, [r1, #12]
    94f6:	6889      	ldr	r1, [r1, #8]
    94f8:	f7ff ffa3 	bl	9442 <att_handle_rsp>
}
    94fc:	bd08      	pop	{r3, pc}

000094fe <att_handle_read_rsp>:
{
    94fe:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    9500:	2300      	movs	r3, #0
    9502:	898a      	ldrh	r2, [r1, #12]
    9504:	6889      	ldr	r1, [r1, #8]
    9506:	f7ff ff9c 	bl	9442 <att_handle_rsp>
}
    950a:	bd08      	pop	{r3, pc}

0000950c <att_handle_read_type_rsp>:
{
    950c:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    950e:	2300      	movs	r3, #0
    9510:	898a      	ldrh	r2, [r1, #12]
    9512:	6889      	ldr	r1, [r1, #8]
    9514:	f7ff ff95 	bl	9442 <att_handle_rsp>
}
    9518:	bd08      	pop	{r3, pc}

0000951a <att_handle_find_type_rsp>:
{
    951a:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    951c:	2300      	movs	r3, #0
    951e:	898a      	ldrh	r2, [r1, #12]
    9520:	6889      	ldr	r1, [r1, #8]
    9522:	f7ff ff8e 	bl	9442 <att_handle_rsp>
}
    9526:	bd08      	pop	{r3, pc}

00009528 <att_handle_find_info_rsp>:
{
    9528:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    952a:	2300      	movs	r3, #0
    952c:	898a      	ldrh	r2, [r1, #12]
    952e:	6889      	ldr	r1, [r1, #8]
    9530:	f7ff ff87 	bl	9442 <att_handle_rsp>
}
    9534:	bd08      	pop	{r3, pc}

00009536 <att_mtu_rsp>:
	if (!att) {
    9536:	b1b8      	cbz	r0, 9568 <att_mtu_rsp+0x32>
{
    9538:	b508      	push	{r3, lr}
    953a:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    953c:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    953e:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    9540:	2b16      	cmp	r3, #22
    9542:	d90b      	bls.n	955c <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    9544:	2b41      	cmp	r3, #65	; 0x41
    9546:	bf28      	it	cs
    9548:	2341      	movcs	r3, #65	; 0x41
    954a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    954e:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    9552:	2300      	movs	r3, #0
    9554:	8992      	ldrh	r2, [r2, #12]
    9556:	f7ff ff74 	bl	9442 <att_handle_rsp>
    955a:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    955c:	2304      	movs	r3, #4
    955e:	2200      	movs	r2, #0
    9560:	4611      	mov	r1, r2
    9562:	f7ff ff6e 	bl	9442 <att_handle_rsp>
    9566:	bd08      	pop	{r3, pc}
		return 0;
    9568:	2000      	movs	r0, #0
    956a:	4770      	bx	lr

0000956c <bt_att_encrypt_change>:
{
    956c:	b570      	push	{r4, r5, r6, lr}
    956e:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    9570:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    9572:	b941      	cbnz	r1, 9586 <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    9574:	7a2b      	ldrb	r3, [r5, #8]
    9576:	2b01      	cmp	r3, #1
    9578:	d004      	beq.n	9584 <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    957a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    957e:	b10b      	cbz	r3, 9584 <bt_att_encrypt_change+0x18>
    9580:	7d1b      	ldrb	r3, [r3, #20]
    9582:	b933      	cbnz	r3, 9592 <bt_att_encrypt_change+0x26>
    9584:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    9586:	2305      	movs	r3, #5
    9588:	2200      	movs	r2, #0
    958a:	4611      	mov	r1, r2
    958c:	f7ff ff59 	bl	9442 <att_handle_rsp>
		return;
    9590:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    9592:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9596:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    959a:	4630      	mov	r0, r6
    959c:	f01f ff48 	bl	29430 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    95a0:	6823      	ldr	r3, [r4, #0]
    95a2:	7b1b      	ldrb	r3, [r3, #12]
    95a4:	2b03      	cmp	r3, #3
    95a6:	d012      	beq.n	95ce <bt_att_encrypt_change+0x62>
    95a8:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    95aa:	b1eb      	cbz	r3, 95e8 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    95ac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95b0:	691e      	ldr	r6, [r3, #16]
    95b2:	4630      	mov	r0, r6
    95b4:	f7ff fc08 	bl	8dc8 <att_cb>
    95b8:	4603      	mov	r3, r0
    95ba:	4632      	mov	r2, r6
    95bc:	2104      	movs	r1, #4
    95be:	4628      	mov	r0, r5
    95c0:	f7fe fdbb 	bl	813a <bt_l2cap_send_cb>
	att->req->buf = NULL;
    95c4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95c8:	2200      	movs	r2, #0
    95ca:	611a      	str	r2, [r3, #16]
    95cc:	e7da      	b.n	9584 <bt_att_encrypt_change+0x18>
    95ce:	f3bf 8f5b 	dmb	ish
    95d2:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    95d6:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    95da:	f013 0f04 	tst.w	r3, #4
    95de:	d101      	bne.n	95e4 <bt_att_encrypt_change+0x78>
    95e0:	2301      	movs	r3, #1
    95e2:	e7e2      	b.n	95aa <bt_att_encrypt_change+0x3e>
    95e4:	2300      	movs	r3, #0
    95e6:	e7e0      	b.n	95aa <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    95e8:	4630      	mov	r0, r6
    95ea:	f01f ff0e 	bl	2940a <_impl_k_sem_give>
    95ee:	bd70      	pop	{r4, r5, r6, pc}

000095f0 <att_error_rsp>:
{
    95f0:	b538      	push	{r3, r4, r5, lr}
    95f2:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    95f4:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    95f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    95fa:	b1fb      	cbz	r3, 963c <att_error_rsp+0x4c>
	if (att->req->buf) {
    95fc:	691a      	ldr	r2, [r3, #16]
    95fe:	b132      	cbz	r2, 960e <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    9600:	f102 0110 	add.w	r1, r2, #16
    9604:	899d      	ldrh	r5, [r3, #12]
    9606:	4429      	add	r1, r5
    9608:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    960a:	89db      	ldrh	r3, [r3, #14]
    960c:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    960e:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    9610:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9614:	7d1b      	ldrb	r3, [r3, #20]
    9616:	b133      	cbz	r3, 9626 <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    9618:	462b      	mov	r3, r5
    961a:	2200      	movs	r2, #0
    961c:	4611      	mov	r1, r2
    961e:	4620      	mov	r0, r4
    9620:	f7ff ff0f 	bl	9442 <att_handle_rsp>
}
    9624:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    9626:	4629      	mov	r1, r5
    9628:	6820      	ldr	r0, [r4, #0]
    962a:	f7ff fe82 	bl	9332 <att_change_security>
    962e:	2800      	cmp	r0, #0
    9630:	d1f2      	bne.n	9618 <att_error_rsp+0x28>
		att->req->retrying = true;
    9632:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    9636:	2201      	movs	r2, #1
    9638:	751a      	strb	r2, [r3, #20]
		return 0;
    963a:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    963c:	250e      	movs	r5, #14
    963e:	e7eb      	b.n	9618 <att_error_rsp+0x28>

00009640 <att_reset>:
{
    9640:	b5f0      	push	{r4, r5, r6, r7, lr}
    9642:	b083      	sub	sp, #12
    9644:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    9646:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    964a:	f3bf 8f5b 	dmb	ish
    964e:	e853 2f00 	ldrex	r2, [r3]
    9652:	f042 0204 	orr.w	r2, r2, #4
    9656:	e843 2100 	strex	r1, r2, [r3]
    965a:	2900      	cmp	r1, #0
    965c:	d1f7      	bne.n	964e <att_reset+0xe>
    965e:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    9662:	2400      	movs	r4, #0
    9664:	e004      	b.n	9670 <att_reset+0x30>
    9666:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    966a:	f01f fece 	bl	2940a <_impl_k_sem_give>
    966e:	3401      	adds	r4, #1
    9670:	2c01      	cmp	r4, #1
    9672:	ddf8      	ble.n	9666 <att_reset+0x26>
	return list->head;
    9674:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    9678:	b11d      	cbz	r5, 9682 <att_reset+0x42>
    967a:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    967c:	b145      	cbz	r5, 9690 <att_reset+0x50>
	return node->next;
    967e:	682c      	ldr	r4, [r5, #0]
    9680:	e006      	b.n	9690 <att_reset+0x50>
    9682:	462c      	mov	r4, r5
    9684:	e004      	b.n	9690 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9686:	4623      	mov	r3, r4
    9688:	e014      	b.n	96b4 <att_reset+0x74>
    968a:	4623      	mov	r3, r4
    968c:	4625      	mov	r5, r4
    968e:	461c      	mov	r4, r3
    9690:	b1c5      	cbz	r5, 96c4 <att_reset+0x84>
		if (req->func) {
    9692:	686e      	ldr	r6, [r5, #4]
    9694:	b12e      	cbz	r6, 96a2 <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    9696:	9500      	str	r5, [sp, #0]
    9698:	2300      	movs	r3, #0
    969a:	461a      	mov	r2, r3
    969c:	210e      	movs	r1, #14
    969e:	4618      	mov	r0, r3
    96a0:	47b0      	blx	r6
		att_req_destroy(req);
    96a2:	4628      	mov	r0, r5
    96a4:	f7ff fc34 	bl	8f10 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    96a8:	2c00      	cmp	r4, #0
    96aa:	d0ee      	beq.n	968a <att_reset+0x4a>
    96ac:	4622      	mov	r2, r4
    96ae:	2c00      	cmp	r4, #0
    96b0:	d0e9      	beq.n	9686 <att_reset+0x46>
	return node->next;
    96b2:	6823      	ldr	r3, [r4, #0]
    96b4:	b113      	cbz	r3, 96bc <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    96b6:	b11a      	cbz	r2, 96c0 <att_reset+0x80>
	return node->next;
    96b8:	6823      	ldr	r3, [r4, #0]
    96ba:	e7e7      	b.n	968c <att_reset+0x4c>
    96bc:	2300      	movs	r3, #0
    96be:	e7e5      	b.n	968c <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    96c0:	2300      	movs	r3, #0
    96c2:	e7e3      	b.n	968c <att_reset+0x4c>
	list->head = NULL;
    96c4:	2300      	movs	r3, #0
    96c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    96ca:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    96ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    96d2:	b12b      	cbz	r3, 96e0 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    96d4:	230e      	movs	r3, #14
    96d6:	2200      	movs	r2, #0
    96d8:	4611      	mov	r1, r2
    96da:	4638      	mov	r0, r7
    96dc:	f7ff feb1 	bl	9442 <att_handle_rsp>
}
    96e0:	b003      	add	sp, #12
    96e2:	bdf0      	pop	{r4, r5, r6, r7, pc}

000096e4 <bt_att_disconnected>:
{
    96e4:	b510      	push	{r4, lr}
    96e6:	4604      	mov	r4, r0
	att_reset(att);
    96e8:	f7ff ffaa 	bl	9640 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    96ec:	6820      	ldr	r0, [r4, #0]
    96ee:	f001 f93f 	bl	a970 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    96f2:	22ec      	movs	r2, #236	; 0xec
    96f4:	2100      	movs	r1, #0
    96f6:	4620      	mov	r0, r4
    96f8:	f021 f93a 	bl	2a970 <memset>
    96fc:	bd10      	pop	{r4, pc}

000096fe <att_timeout>:
{
    96fe:	b510      	push	{r4, lr}
    9700:	4604      	mov	r4, r0
	att_reset(att);
    9702:	38ac      	subs	r0, #172	; 0xac
    9704:	f7ff ff9c 	bl	9640 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    9708:	f854 0cac 	ldr.w	r0, [r4, #-172]
    970c:	f001 f930 	bl	a970 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    9710:	2300      	movs	r3, #0
    9712:	f844 3cac 	str.w	r3, [r4, #-172]
    9716:	bd10      	pop	{r4, pc}

00009718 <bt_att_create_pdu>:
{
    9718:	b538      	push	{r3, r4, r5, lr}
    971a:	460d      	mov	r5, r1
    971c:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    971e:	f7ff fbab 	bl	8e78 <att_chan_get>
	if (!att) {
    9722:	b180      	cbz	r0, 9746 <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    9724:	3401      	adds	r4, #1
    9726:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    972a:	429c      	cmp	r4, r3
    972c:	d80d      	bhi.n	974a <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    972e:	2100      	movs	r1, #0
    9730:	4608      	mov	r0, r1
    9732:	f7fe fc6a 	bl	800a <bt_l2cap_create_pdu>
    9736:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    9738:	2101      	movs	r1, #1
    973a:	3008      	adds	r0, #8
    973c:	f011 fb66 	bl	1ae0c <net_buf_simple_add>
	hdr->code = op;
    9740:	7005      	strb	r5, [r0, #0]
}
    9742:	4620      	mov	r0, r4
    9744:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    9746:	2400      	movs	r4, #0
    9748:	e7fb      	b.n	9742 <bt_att_create_pdu+0x2a>
		return NULL;
    974a:	2400      	movs	r4, #0
    974c:	e7f9      	b.n	9742 <bt_att_create_pdu+0x2a>
	...

00009750 <att_indicate>:
{
    9750:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9752:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9754:	f101 0008 	add.w	r0, r1, #8
    9758:	f011 fbb5 	bl	1aec6 <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    975c:	2200      	movs	r2, #0
    975e:	211e      	movs	r1, #30
    9760:	4620      	mov	r0, r4
    9762:	f7ff ffd9 	bl	9718 <bt_att_create_pdu>
	if (!buf) {
    9766:	b128      	cbz	r0, 9774 <att_indicate+0x24>
    9768:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    976a:	4b03      	ldr	r3, [pc, #12]	; (9778 <att_indicate+0x28>)
    976c:	2104      	movs	r1, #4
    976e:	4620      	mov	r0, r4
    9770:	f7fe fce3 	bl	813a <bt_l2cap_send_cb>
}
    9774:	2000      	movs	r0, #0
    9776:	bd10      	pop	{r4, pc}
    9778:	00008f73 	.word	0x00008f73

0000977c <att_mtu_req>:
{
    977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    9780:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9782:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    9784:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    9786:	2d16      	cmp	r5, #22
    9788:	d802      	bhi.n	9790 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    978a:	2004      	movs	r0, #4
    978c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9790:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    9792:	2202      	movs	r2, #2
    9794:	2103      	movs	r1, #3
    9796:	4638      	mov	r0, r7
    9798:	f7ff ffbe 	bl	9718 <bt_att_create_pdu>
	if (!pdu) {
    979c:	4680      	mov	r8, r0
    979e:	b1b8      	cbz	r0, 97d0 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    97a0:	2102      	movs	r1, #2
    97a2:	3008      	adds	r0, #8
    97a4:	f011 fb32 	bl	1ae0c <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    97a8:	2600      	movs	r6, #0
    97aa:	2341      	movs	r3, #65	; 0x41
    97ac:	7003      	strb	r3, [r0, #0]
    97ae:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    97b0:	4b09      	ldr	r3, [pc, #36]	; (97d8 <att_mtu_req+0x5c>)
    97b2:	4642      	mov	r2, r8
    97b4:	2104      	movs	r1, #4
    97b6:	4638      	mov	r0, r7
    97b8:	f7fe fcbf 	bl	813a <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    97bc:	2d41      	cmp	r5, #65	; 0x41
    97be:	bf28      	it	cs
    97c0:	2541      	movcs	r5, #65	; 0x41
    97c2:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    97c6:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    97ca:	4630      	mov	r0, r6
    97cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    97d0:	200e      	movs	r0, #14
}
    97d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    97d6:	bf00      	nop
    97d8:	00008f3b 	.word	0x00008f3b

000097dc <send_err_rsp>:
	if (!req) {
    97dc:	b901      	cbnz	r1, 97e0 <send_err_rsp+0x4>
    97de:	4770      	bx	lr
{
    97e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    97e4:	460f      	mov	r7, r1
    97e6:	461d      	mov	r5, r3
    97e8:	4616      	mov	r6, r2
    97ea:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    97ec:	2204      	movs	r2, #4
    97ee:	2101      	movs	r1, #1
    97f0:	f7ff ff92 	bl	9718 <bt_att_create_pdu>
	if (!buf) {
    97f4:	4680      	mov	r8, r0
    97f6:	b168      	cbz	r0, 9814 <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    97f8:	2104      	movs	r1, #4
    97fa:	3008      	adds	r0, #8
    97fc:	f011 fb06 	bl	1ae0c <net_buf_simple_add>
	rsp->request = req;
    9800:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    9802:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    9806:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    9808:	4b03      	ldr	r3, [pc, #12]	; (9818 <send_err_rsp+0x3c>)
    980a:	4642      	mov	r2, r8
    980c:	2104      	movs	r1, #4
    980e:	4620      	mov	r0, r4
    9810:	f7fe fc93 	bl	813a <bt_l2cap_send_cb>
    9814:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9818:	00008f3b 	.word	0x00008f3b

0000981c <bt_att_recv>:
{
    981c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    981e:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    9820:	898b      	ldrh	r3, [r1, #12]
    9822:	b903      	cbnz	r3, 9826 <bt_att_recv+0xa>
    9824:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    9826:	460e      	mov	r6, r1
    9828:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    982a:	2101      	movs	r1, #1
    982c:	f106 0008 	add.w	r0, r6, #8
    9830:	f011 fb39 	bl	1aea6 <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9834:	2300      	movs	r3, #0
    9836:	2b1a      	cmp	r3, #26
    9838:	d822      	bhi.n	9880 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    983a:	782c      	ldrb	r4, [r5, #0]
    983c:	4a2c      	ldr	r2, [pc, #176]	; (98f0 <bt_att_recv+0xd4>)
    983e:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    9842:	4294      	cmp	r4, r2
    9844:	d001      	beq.n	984a <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9846:	3301      	adds	r3, #1
    9848:	e7f5      	b.n	9836 <bt_att_recv+0x1a>
			handler = &handlers[i];
    984a:	4c29      	ldr	r4, [pc, #164]	; (98f0 <bt_att_recv+0xd4>)
    984c:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    9850:	b1c4      	cbz	r4, 9884 <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    9852:	78a3      	ldrb	r3, [r4, #2]
    9854:	2b01      	cmp	r3, #1
    9856:	d022      	beq.n	989e <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    9858:	78a3      	ldrb	r3, [r4, #2]
    985a:	2b05      	cmp	r3, #5
    985c:	d031      	beq.n	98c2 <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    985e:	89b2      	ldrh	r2, [r6, #12]
    9860:	7863      	ldrb	r3, [r4, #1]
    9862:	429a      	cmp	r2, r3
    9864:	d23f      	bcs.n	98e6 <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    9866:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    9868:	78a2      	ldrb	r2, [r4, #2]
    986a:	2a01      	cmp	r2, #1
    986c:	d1da      	bne.n	9824 <bt_att_recv+0x8>
    986e:	2800      	cmp	r0, #0
    9870:	d0d8      	beq.n	9824 <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    9872:	4603      	mov	r3, r0
    9874:	2200      	movs	r2, #0
    9876:	7829      	ldrb	r1, [r5, #0]
    9878:	6838      	ldr	r0, [r7, #0]
    987a:	f7ff ffaf 	bl	97dc <send_err_rsp>
    987e:	e7d1      	b.n	9824 <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    9880:	2400      	movs	r4, #0
    9882:	e7e5      	b.n	9850 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    9884:	782c      	ldrb	r4, [r5, #0]
    9886:	4620      	mov	r0, r4
    9888:	f7ff fa86 	bl	8d98 <att_op_get_type>
    988c:	2800      	cmp	r0, #0
    988e:	d0c9      	beq.n	9824 <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    9890:	2306      	movs	r3, #6
    9892:	2200      	movs	r2, #0
    9894:	4621      	mov	r1, r4
    9896:	6838      	ldr	r0, [r7, #0]
    9898:	f7ff ffa0 	bl	97dc <send_err_rsp>
    989c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    989e:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    98a2:	f3bf 8f5b 	dmb	ish
    98a6:	e853 2f00 	ldrex	r2, [r3]
    98aa:	f042 0101 	orr.w	r1, r2, #1
    98ae:	e843 1000 	strex	r0, r1, [r3]
    98b2:	2800      	cmp	r0, #0
    98b4:	d1f7      	bne.n	98a6 <bt_att_recv+0x8a>
    98b6:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    98ba:	f012 0f01 	tst.w	r2, #1
    98be:	d0cb      	beq.n	9858 <bt_att_recv+0x3c>
    98c0:	e7b0      	b.n	9824 <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    98c2:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    98c6:	f3bf 8f5b 	dmb	ish
    98ca:	e853 2f00 	ldrex	r2, [r3]
    98ce:	f042 0102 	orr.w	r1, r2, #2
    98d2:	e843 1000 	strex	r0, r1, [r3]
    98d6:	2800      	cmp	r0, #0
    98d8:	d1f7      	bne.n	98ca <bt_att_recv+0xae>
    98da:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    98de:	f012 0f02 	tst.w	r2, #2
    98e2:	d0bc      	beq.n	985e <bt_att_recv+0x42>
    98e4:	e79e      	b.n	9824 <bt_att_recv+0x8>
		err = handler->func(att, buf);
    98e6:	6863      	ldr	r3, [r4, #4]
    98e8:	4631      	mov	r1, r6
    98ea:	4638      	mov	r0, r7
    98ec:	4798      	blx	r3
    98ee:	e7bb      	b.n	9868 <bt_att_recv+0x4c>
    98f0:	0003173c 	.word	0x0003173c

000098f4 <att_write_rsp>:
{
    98f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    98f8:	b086      	sub	sp, #24
	if (!handle) {
    98fa:	b923      	cbnz	r3, 9906 <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    98fc:	2401      	movs	r4, #1
}
    98fe:	4620      	mov	r0, r4
    9900:	b006      	add	sp, #24
    9902:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9906:	4698      	mov	r8, r3
    9908:	4617      	mov	r7, r2
    990a:	460e      	mov	r6, r1
    990c:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    990e:	2218      	movs	r2, #24
    9910:	2100      	movs	r1, #0
    9912:	4668      	mov	r0, sp
    9914:	f021 f82c 	bl	2a970 <memset>
	if (rsp) {
    9918:	b137      	cbz	r7, 9928 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    991a:	2200      	movs	r2, #0
    991c:	4639      	mov	r1, r7
    991e:	4628      	mov	r0, r5
    9920:	f7ff fefa 	bl	9718 <bt_att_create_pdu>
    9924:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    9926:	b3a0      	cbz	r0, 9992 <att_write_rsp+0x9e>
	data.conn = conn;
    9928:	9500      	str	r5, [sp, #0]
	data.op = op;
    992a:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    992e:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9932:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    9936:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    9938:	9303      	str	r3, [sp, #12]
	data.len = len;
    993a:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    993e:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9942:	2301      	movs	r3, #1
    9944:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    9948:	466b      	mov	r3, sp
    994a:	4a13      	ldr	r2, [pc, #76]	; (9998 <att_write_rsp+0xa4>)
    994c:	4641      	mov	r1, r8
    994e:	4640      	mov	r0, r8
    9950:	f000 ff26 	bl	a7a0 <bt_gatt_foreach_attr>
	if (data.err) {
    9954:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9958:	b194      	cbz	r4, 9980 <att_write_rsp+0x8c>
		if (rsp) {
    995a:	b91f      	cbnz	r7, 9964 <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    995c:	2e18      	cmp	r6, #24
    995e:	d00c      	beq.n	997a <att_write_rsp+0x86>
    9960:	2400      	movs	r4, #0
    9962:	e7cc      	b.n	98fe <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    9964:	9801      	ldr	r0, [sp, #4]
    9966:	f011 fa05 	bl	1ad74 <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    996a:	f89d 3014 	ldrb.w	r3, [sp, #20]
    996e:	4642      	mov	r2, r8
    9970:	4631      	mov	r1, r6
    9972:	4628      	mov	r0, r5
    9974:	f7ff ff32 	bl	97dc <send_err_rsp>
    9978:	e7f0      	b.n	995c <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    997a:	f89d 4014 	ldrb.w	r4, [sp, #20]
    997e:	e7be      	b.n	98fe <att_write_rsp+0xa>
	if (data.buf) {
    9980:	9a01      	ldr	r2, [sp, #4]
    9982:	2a00      	cmp	r2, #0
    9984:	d0bb      	beq.n	98fe <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    9986:	4b05      	ldr	r3, [pc, #20]	; (999c <att_write_rsp+0xa8>)
    9988:	2104      	movs	r1, #4
    998a:	4628      	mov	r0, r5
    998c:	f7fe fbd5 	bl	813a <bt_l2cap_send_cb>
    9990:	e7b5      	b.n	98fe <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    9992:	240e      	movs	r4, #14
    9994:	e7b3      	b.n	98fe <att_write_rsp+0xa>
    9996:	bf00      	nop
    9998:	00008d3b 	.word	0x00008d3b
    999c:	00008f3b 	.word	0x00008f3b

000099a0 <att_signed_write_cmd>:
{
    99a0:	b5f0      	push	{r4, r5, r6, r7, lr}
    99a2:	b085      	sub	sp, #20
    99a4:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    99a6:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    99a8:	460c      	mov	r4, r1
    99aa:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    99ae:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    99b0:	2101      	movs	r1, #1
    99b2:	4620      	mov	r0, r4
    99b4:	f011 fa61 	bl	1ae7a <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    99b8:	4629      	mov	r1, r5
    99ba:	4630      	mov	r0, r6
    99bc:	f003 faf2 	bl	cfa4 <bt_smp_sign_verify>
	if (err) {
    99c0:	b110      	cbz	r0, 99c8 <att_signed_write_cmd+0x28>
		return 0;
    99c2:	2000      	movs	r0, #0
}
    99c4:	b005      	add	sp, #20
    99c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    99c8:	2101      	movs	r1, #1
    99ca:	4620      	mov	r0, r4
    99cc:	f011 fa6b 	bl	1aea6 <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    99d0:	2102      	movs	r1, #2
    99d2:	4620      	mov	r0, r4
    99d4:	f011 fa67 	bl	1aea6 <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    99d8:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    99da:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    99dc:	3b0c      	subs	r3, #12
    99de:	b2db      	uxtb	r3, r3
    99e0:	9302      	str	r3, [sp, #8]
    99e2:	9201      	str	r2, [sp, #4]
    99e4:	2100      	movs	r1, #0
    99e6:	9100      	str	r1, [sp, #0]
    99e8:	463b      	mov	r3, r7
    99ea:	460a      	mov	r2, r1
    99ec:	4630      	mov	r0, r6
    99ee:	f7ff ff81 	bl	98f4 <att_write_rsp>
    99f2:	e7e7      	b.n	99c4 <att_signed_write_cmd+0x24>

000099f4 <att_write_cmd>:
{
    99f4:	b530      	push	{r4, r5, lr}
    99f6:	b085      	sub	sp, #20
    99f8:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    99fa:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    99fc:	f101 0008 	add.w	r0, r1, #8
    9a00:	f011 fa61 	bl	1aec6 <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    9a04:	68a3      	ldr	r3, [r4, #8]
    9a06:	7b22      	ldrb	r2, [r4, #12]
    9a08:	9202      	str	r2, [sp, #8]
    9a0a:	9301      	str	r3, [sp, #4]
    9a0c:	2100      	movs	r1, #0
    9a0e:	9100      	str	r1, [sp, #0]
    9a10:	4603      	mov	r3, r0
    9a12:	460a      	mov	r2, r1
    9a14:	4628      	mov	r0, r5
    9a16:	f7ff ff6d 	bl	98f4 <att_write_rsp>
}
    9a1a:	b005      	add	sp, #20
    9a1c:	bd30      	pop	{r4, r5, pc}

00009a1e <att_write_req>:
{
    9a1e:	b530      	push	{r4, r5, lr}
    9a20:	b085      	sub	sp, #20
    9a22:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9a24:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    9a26:	f101 0008 	add.w	r0, r1, #8
    9a2a:	f011 fa4c 	bl	1aec6 <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    9a2e:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9a30:	7b22      	ldrb	r2, [r4, #12]
    9a32:	9202      	str	r2, [sp, #8]
    9a34:	9301      	str	r3, [sp, #4]
    9a36:	2300      	movs	r3, #0
    9a38:	9300      	str	r3, [sp, #0]
    9a3a:	4603      	mov	r3, r0
    9a3c:	2213      	movs	r2, #19
    9a3e:	2112      	movs	r1, #18
    9a40:	4628      	mov	r0, r5
    9a42:	f7ff ff57 	bl	98f4 <att_write_rsp>
}
    9a46:	b005      	add	sp, #20
    9a48:	bd30      	pop	{r4, r5, pc}
	...

00009a4c <att_read_group_rsp>:
{
    9a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9a50:	b086      	sub	sp, #24
    9a52:	4604      	mov	r4, r0
    9a54:	4688      	mov	r8, r1
    9a56:	4616      	mov	r6, r2
    9a58:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9a5a:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9a5c:	2214      	movs	r2, #20
    9a5e:	2100      	movs	r1, #0
    9a60:	a801      	add	r0, sp, #4
    9a62:	f020 ff85 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    9a66:	2201      	movs	r2, #1
    9a68:	2111      	movs	r1, #17
    9a6a:	4628      	mov	r0, r5
    9a6c:	f7ff fe54 	bl	9718 <bt_att_create_pdu>
    9a70:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9a72:	b328      	cbz	r0, 9ac0 <att_read_group_rsp+0x74>
	data.att = att;
    9a74:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    9a76:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9a7a:	2101      	movs	r1, #1
    9a7c:	3008      	adds	r0, #8
    9a7e:	f011 f9c5 	bl	1ae0c <net_buf_simple_add>
    9a82:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    9a84:	2300      	movs	r3, #0
    9a86:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    9a88:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9a8a:	ab01      	add	r3, sp, #4
    9a8c:	4a0f      	ldr	r2, [pc, #60]	; (9acc <att_read_group_rsp+0x80>)
    9a8e:	4639      	mov	r1, r7
    9a90:	4630      	mov	r0, r6
    9a92:	f000 fe85 	bl	a7a0 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    9a96:	9b04      	ldr	r3, [sp, #16]
    9a98:	781c      	ldrb	r4, [r3, #0]
    9a9a:	b13c      	cbz	r4, 9aac <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9a9c:	4b0c      	ldr	r3, [pc, #48]	; (9ad0 <att_read_group_rsp+0x84>)
    9a9e:	9a03      	ldr	r2, [sp, #12]
    9aa0:	2104      	movs	r1, #4
    9aa2:	4628      	mov	r0, r5
    9aa4:	f7fe fb49 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9aa8:	2400      	movs	r4, #0
    9aaa:	e00a      	b.n	9ac2 <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    9aac:	9803      	ldr	r0, [sp, #12]
    9aae:	f011 f961 	bl	1ad74 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9ab2:	230a      	movs	r3, #10
    9ab4:	4632      	mov	r2, r6
    9ab6:	2110      	movs	r1, #16
    9ab8:	4628      	mov	r0, r5
    9aba:	f7ff fe8f 	bl	97dc <send_err_rsp>
		return 0;
    9abe:	e000      	b.n	9ac2 <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    9ac0:	240e      	movs	r4, #14
}
    9ac2:	4620      	mov	r0, r4
    9ac4:	b006      	add	sp, #24
    9ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9aca:	bf00      	nop
    9acc:	00008fd5 	.word	0x00008fd5
    9ad0:	00008f3b 	.word	0x00008f3b

00009ad4 <att_read_group_req>:
{
    9ad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ad8:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    9ada:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9adc:	898b      	ldrh	r3, [r1, #12]
    9ade:	2b06      	cmp	r3, #6
    9ae0:	d005      	beq.n	9aee <att_read_group_req+0x1a>
    9ae2:	2b14      	cmp	r3, #20
    9ae4:	d003      	beq.n	9aee <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9ae6:	2004      	movs	r0, #4
}
    9ae8:	b008      	add	sp, #32
    9aea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9aee:	460c      	mov	r4, r1
    9af0:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9af2:	4608      	mov	r0, r1
    9af4:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9af8:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9afa:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9afe:	2104      	movs	r1, #4
    9b00:	f011 f9d1 	bl	1aea6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9b04:	4621      	mov	r1, r4
    9b06:	a801      	add	r0, sp, #4
    9b08:	f7ff fb3c 	bl	9184 <uuid_create>
    9b0c:	b908      	cbnz	r0, 9b12 <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9b0e:	200e      	movs	r0, #14
    9b10:	e7ea      	b.n	9ae8 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9b12:	f10d 0216 	add.w	r2, sp, #22
    9b16:	4641      	mov	r1, r8
    9b18:	4638      	mov	r0, r7
    9b1a:	f7ff f8c4 	bl	8ca6 <range_is_valid>
    9b1e:	b1f0      	cbz	r0, 9b5e <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9b20:	2300      	movs	r3, #0
    9b22:	f88d 3018 	strb.w	r3, [sp, #24]
    9b26:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9b2a:	f8ad 301a 	strh.w	r3, [sp, #26]
    9b2e:	a906      	add	r1, sp, #24
    9b30:	a801      	add	r0, sp, #4
    9b32:	f7fa fdee 	bl	4712 <bt_uuid_cmp>
    9b36:	b158      	cbz	r0, 9b50 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9b38:	2300      	movs	r3, #0
    9b3a:	f88d 301c 	strb.w	r3, [sp, #28]
    9b3e:	f642 0301 	movw	r3, #10241	; 0x2801
    9b42:	f8ad 301e 	strh.w	r3, [sp, #30]
    9b46:	a907      	add	r1, sp, #28
    9b48:	a801      	add	r0, sp, #4
    9b4a:	f7fa fde2 	bl	4712 <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9b4e:	b978      	cbnz	r0, 9b70 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9b50:	4643      	mov	r3, r8
    9b52:	463a      	mov	r2, r7
    9b54:	a901      	add	r1, sp, #4
    9b56:	4628      	mov	r0, r5
    9b58:	f7ff ff78 	bl	9a4c <att_read_group_rsp>
    9b5c:	e7c4      	b.n	9ae8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    9b5e:	2301      	movs	r3, #1
    9b60:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9b64:	2110      	movs	r1, #16
    9b66:	4630      	mov	r0, r6
    9b68:	f7ff fe38 	bl	97dc <send_err_rsp>
		return 0;
    9b6c:	2000      	movs	r0, #0
    9b6e:	e7bb      	b.n	9ae8 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9b70:	2310      	movs	r3, #16
    9b72:	463a      	mov	r2, r7
    9b74:	4619      	mov	r1, r3
    9b76:	4630      	mov	r0, r6
    9b78:	f7ff fe30 	bl	97dc <send_err_rsp>
		return 0;
    9b7c:	2000      	movs	r0, #0
    9b7e:	e7b3      	b.n	9ae8 <att_read_group_req+0x14>

00009b80 <att_read_mult_req>:
{
    9b80:	b570      	push	{r4, r5, r6, lr}
    9b82:	b086      	sub	sp, #24
    9b84:	4605      	mov	r5, r0
    9b86:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9b88:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    9b8a:	2214      	movs	r2, #20
    9b8c:	2100      	movs	r1, #0
    9b8e:	a801      	add	r0, sp, #4
    9b90:	f020 feee 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    9b94:	2200      	movs	r2, #0
    9b96:	210f      	movs	r1, #15
    9b98:	4630      	mov	r0, r6
    9b9a:	f7ff fdbd 	bl	9718 <bt_att_create_pdu>
    9b9e:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9ba0:	b348      	cbz	r0, 9bf6 <att_read_mult_req+0x76>
	data.att = att;
    9ba2:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    9ba4:	89a3      	ldrh	r3, [r4, #12]
    9ba6:	2b01      	cmp	r3, #1
    9ba8:	d91c      	bls.n	9be4 <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    9baa:	f104 0008 	add.w	r0, r4, #8
    9bae:	f011 f98a 	bl	1aec6 <net_buf_simple_pull_le16>
    9bb2:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    9bb4:	2301      	movs	r3, #1
    9bb6:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9bba:	ab01      	add	r3, sp, #4
    9bbc:	4a0f      	ldr	r2, [pc, #60]	; (9bfc <att_read_mult_req+0x7c>)
    9bbe:	4601      	mov	r1, r0
    9bc0:	f000 fdee 	bl	a7a0 <bt_gatt_foreach_attr>
		if (data.err) {
    9bc4:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9bc8:	2b00      	cmp	r3, #0
    9bca:	d0eb      	beq.n	9ba4 <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    9bcc:	9803      	ldr	r0, [sp, #12]
    9bce:	f011 f8d1 	bl	1ad74 <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    9bd2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9bd6:	462a      	mov	r2, r5
    9bd8:	210e      	movs	r1, #14
    9bda:	4630      	mov	r0, r6
    9bdc:	f7ff fdfe 	bl	97dc <send_err_rsp>
			return 0;
    9be0:	2000      	movs	r0, #0
    9be2:	e006      	b.n	9bf2 <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9be4:	4b06      	ldr	r3, [pc, #24]	; (9c00 <att_read_mult_req+0x80>)
    9be6:	9a03      	ldr	r2, [sp, #12]
    9be8:	2104      	movs	r1, #4
    9bea:	4630      	mov	r0, r6
    9bec:	f7fe faa5 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9bf0:	2000      	movs	r0, #0
}
    9bf2:	b006      	add	sp, #24
    9bf4:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    9bf6:	200e      	movs	r0, #14
    9bf8:	e7fb      	b.n	9bf2 <att_read_mult_req+0x72>
    9bfa:	bf00      	nop
    9bfc:	00008e05 	.word	0x00008e05
    9c00:	00008f3b 	.word	0x00008f3b

00009c04 <att_read_rsp>:
{
    9c04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9c08:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9c0a:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    9c0c:	b923      	cbnz	r3, 9c18 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    9c0e:	2401      	movs	r4, #1
}
    9c10:	4620      	mov	r0, r4
    9c12:	b006      	add	sp, #24
    9c14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9c18:	461d      	mov	r5, r3
    9c1a:	4616      	mov	r6, r2
    9c1c:	4688      	mov	r8, r1
    9c1e:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    9c20:	2214      	movs	r2, #20
    9c22:	2100      	movs	r1, #0
    9c24:	a801      	add	r0, sp, #4
    9c26:	f020 fea3 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9c2a:	2200      	movs	r2, #0
    9c2c:	4631      	mov	r1, r6
    9c2e:	4638      	mov	r0, r7
    9c30:	f7ff fd72 	bl	9718 <bt_att_create_pdu>
    9c34:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9c36:	b318      	cbz	r0, 9c80 <att_read_rsp+0x7c>
	data.att = att;
    9c38:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9c3a:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9c3e:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    9c42:	2301      	movs	r3, #1
    9c44:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9c48:	ab01      	add	r3, sp, #4
    9c4a:	4a0e      	ldr	r2, [pc, #56]	; (9c84 <att_read_rsp+0x80>)
    9c4c:	4629      	mov	r1, r5
    9c4e:	4628      	mov	r0, r5
    9c50:	f000 fda6 	bl	a7a0 <bt_gatt_foreach_attr>
	if (data.err) {
    9c54:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9c58:	b934      	cbnz	r4, 9c68 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9c5a:	4b0b      	ldr	r3, [pc, #44]	; (9c88 <att_read_rsp+0x84>)
    9c5c:	9a03      	ldr	r2, [sp, #12]
    9c5e:	2104      	movs	r1, #4
    9c60:	4638      	mov	r0, r7
    9c62:	f7fe fa6a 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9c66:	e7d3      	b.n	9c10 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9c68:	9803      	ldr	r0, [sp, #12]
    9c6a:	f011 f883 	bl	1ad74 <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9c6e:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9c72:	462a      	mov	r2, r5
    9c74:	4641      	mov	r1, r8
    9c76:	4638      	mov	r0, r7
    9c78:	f7ff fdb0 	bl	97dc <send_err_rsp>
		return 0;
    9c7c:	2400      	movs	r4, #0
    9c7e:	e7c7      	b.n	9c10 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9c80:	240e      	movs	r4, #14
    9c82:	e7c5      	b.n	9c10 <att_read_rsp+0xc>
    9c84:	00008e05 	.word	0x00008e05
    9c88:	00008f3b 	.word	0x00008f3b

00009c8c <att_read_blob_req>:
{
    9c8c:	b500      	push	{lr}
    9c8e:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9c90:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9c92:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    9c94:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    9c96:	9200      	str	r2, [sp, #0]
    9c98:	220d      	movs	r2, #13
    9c9a:	210c      	movs	r1, #12
    9c9c:	f7ff ffb2 	bl	9c04 <att_read_rsp>
}
    9ca0:	b003      	add	sp, #12
    9ca2:	f85d fb04 	ldr.w	pc, [sp], #4

00009ca6 <att_read_req>:
{
    9ca6:	b500      	push	{lr}
    9ca8:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9caa:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9cac:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9cae:	2200      	movs	r2, #0
    9cb0:	9200      	str	r2, [sp, #0]
    9cb2:	220b      	movs	r2, #11
    9cb4:	210a      	movs	r1, #10
    9cb6:	f7ff ffa5 	bl	9c04 <att_read_rsp>
}
    9cba:	b003      	add	sp, #12
    9cbc:	f85d fb04 	ldr.w	pc, [sp], #4

00009cc0 <att_read_type_rsp>:
{
    9cc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cc4:	b086      	sub	sp, #24
    9cc6:	4604      	mov	r4, r0
    9cc8:	4688      	mov	r8, r1
    9cca:	4616      	mov	r6, r2
    9ccc:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9cce:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9cd0:	2218      	movs	r2, #24
    9cd2:	2100      	movs	r1, #0
    9cd4:	4668      	mov	r0, sp
    9cd6:	f020 fe4b 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    9cda:	2201      	movs	r2, #1
    9cdc:	2109      	movs	r1, #9
    9cde:	4628      	mov	r0, r5
    9ce0:	f7ff fd1a 	bl	9718 <bt_att_create_pdu>
    9ce4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9ce6:	b340      	cbz	r0, 9d3a <att_read_type_rsp+0x7a>
	data.att = att;
    9ce8:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    9cea:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9cee:	2101      	movs	r1, #1
    9cf0:	3008      	adds	r0, #8
    9cf2:	f011 f88b 	bl	1ae0c <net_buf_simple_add>
    9cf6:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    9cf8:	2300      	movs	r3, #0
    9cfa:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9cfc:	230a      	movs	r3, #10
    9cfe:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    9d02:	466b      	mov	r3, sp
    9d04:	4a0f      	ldr	r2, [pc, #60]	; (9d44 <att_read_type_rsp+0x84>)
    9d06:	4639      	mov	r1, r7
    9d08:	4630      	mov	r0, r6
    9d0a:	f000 fd49 	bl	a7a0 <bt_gatt_foreach_attr>
	if (data.err) {
    9d0e:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9d12:	b934      	cbnz	r4, 9d22 <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9d14:	4b0c      	ldr	r3, [pc, #48]	; (9d48 <att_read_type_rsp+0x88>)
    9d16:	9a02      	ldr	r2, [sp, #8]
    9d18:	2104      	movs	r1, #4
    9d1a:	4628      	mov	r0, r5
    9d1c:	f7fe fa0d 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9d20:	e00c      	b.n	9d3c <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    9d22:	9802      	ldr	r0, [sp, #8]
    9d24:	f011 f826 	bl	1ad74 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9d28:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9d2c:	4632      	mov	r2, r6
    9d2e:	2108      	movs	r1, #8
    9d30:	4628      	mov	r0, r5
    9d32:	f7ff fd53 	bl	97dc <send_err_rsp>
		return 0;
    9d36:	2400      	movs	r4, #0
    9d38:	e000      	b.n	9d3c <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9d3a:	240e      	movs	r4, #14
}
    9d3c:	4620      	mov	r0, r4
    9d3e:	b006      	add	sp, #24
    9d40:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d44:	000090c3 	.word	0x000090c3
    9d48:	00008f3b 	.word	0x00008f3b

00009d4c <att_read_type_req>:
{
    9d4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9d50:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    9d52:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    9d54:	898b      	ldrh	r3, [r1, #12]
    9d56:	2b06      	cmp	r3, #6
    9d58:	d005      	beq.n	9d66 <att_read_type_req+0x1a>
    9d5a:	2b14      	cmp	r3, #20
    9d5c:	d003      	beq.n	9d66 <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9d5e:	2004      	movs	r0, #4
}
    9d60:	b006      	add	sp, #24
    9d62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9d66:	460c      	mov	r4, r1
    9d68:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9d6a:	4608      	mov	r0, r1
    9d6c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9d70:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9d72:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    9d76:	2104      	movs	r1, #4
    9d78:	f011 f895 	bl	1aea6 <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9d7c:	4621      	mov	r1, r4
    9d7e:	a801      	add	r0, sp, #4
    9d80:	f7ff fa00 	bl	9184 <uuid_create>
    9d84:	b908      	cbnz	r0, 9d8a <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    9d86:	200e      	movs	r0, #14
    9d88:	e7ea      	b.n	9d60 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9d8a:	f10d 0216 	add.w	r2, sp, #22
    9d8e:	4641      	mov	r1, r8
    9d90:	4638      	mov	r0, r7
    9d92:	f7fe ff88 	bl	8ca6 <range_is_valid>
    9d96:	b130      	cbz	r0, 9da6 <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9d98:	4643      	mov	r3, r8
    9d9a:	463a      	mov	r2, r7
    9d9c:	a901      	add	r1, sp, #4
    9d9e:	4628      	mov	r0, r5
    9da0:	f7ff ff8e 	bl	9cc0 <att_read_type_rsp>
    9da4:	e7dc      	b.n	9d60 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    9da6:	2301      	movs	r3, #1
    9da8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9dac:	2108      	movs	r1, #8
    9dae:	4630      	mov	r0, r6
    9db0:	f7ff fd14 	bl	97dc <send_err_rsp>
		return 0;
    9db4:	2000      	movs	r0, #0
    9db6:	e7d3      	b.n	9d60 <att_read_type_req+0x14>

00009db8 <att_find_type_rsp>:
{
    9db8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9dbc:	b086      	sub	sp, #24
    9dbe:	4604      	mov	r4, r0
    9dc0:	460e      	mov	r6, r1
    9dc2:	4617      	mov	r7, r2
    9dc4:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9dc6:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9dc8:	2214      	movs	r2, #20
    9dca:	2100      	movs	r1, #0
    9dcc:	a801      	add	r0, sp, #4
    9dce:	f020 fdcf 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    9dd2:	2200      	movs	r2, #0
    9dd4:	2107      	movs	r1, #7
    9dd6:	4628      	mov	r0, r5
    9dd8:	f7ff fc9e 	bl	9718 <bt_att_create_pdu>
    9ddc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    9dde:	b338      	cbz	r0, 9e30 <att_find_type_rsp+0x78>
	data.att = att;
    9de0:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    9de2:	2300      	movs	r3, #0
    9de4:	9303      	str	r3, [sp, #12]
	data.value = value;
    9de6:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    9dea:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    9dee:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    9df2:	230a      	movs	r3, #10
    9df4:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    9df8:	ab01      	add	r3, sp, #4
    9dfa:	4a10      	ldr	r2, [pc, #64]	; (9e3c <att_find_type_rsp+0x84>)
    9dfc:	4639      	mov	r1, r7
    9dfe:	4630      	mov	r0, r6
    9e00:	f000 fcce 	bl	a7a0 <bt_gatt_foreach_attr>
	if (data.err) {
    9e04:	f89d 4015 	ldrb.w	r4, [sp, #21]
    9e08:	b934      	cbnz	r4, 9e18 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9e0a:	4b0d      	ldr	r3, [pc, #52]	; (9e40 <att_find_type_rsp+0x88>)
    9e0c:	9a02      	ldr	r2, [sp, #8]
    9e0e:	2104      	movs	r1, #4
    9e10:	4628      	mov	r0, r5
    9e12:	f7fe f992 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9e16:	e00c      	b.n	9e32 <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9e18:	9802      	ldr	r0, [sp, #8]
    9e1a:	f010 ffab 	bl	1ad74 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9e1e:	f89d 3015 	ldrb.w	r3, [sp, #21]
    9e22:	4632      	mov	r2, r6
    9e24:	2106      	movs	r1, #6
    9e26:	4628      	mov	r0, r5
    9e28:	f7ff fcd8 	bl	97dc <send_err_rsp>
		return 0;
    9e2c:	2400      	movs	r4, #0
    9e2e:	e000      	b.n	9e32 <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9e30:	240e      	movs	r4, #14
}
    9e32:	4620      	mov	r0, r4
    9e34:	b006      	add	sp, #24
    9e36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9e3a:	bf00      	nop
    9e3c:	0000926b 	.word	0x0000926b
    9e40:	00008f3b 	.word	0x00008f3b

00009e44 <att_find_type_req>:
{
    9e44:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9e48:	b084      	sub	sp, #16
    9e4a:	4605      	mov	r5, r0
    9e4c:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9e4e:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    9e52:	4608      	mov	r0, r1
    9e54:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9e58:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9e5a:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9e5c:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9e60:	2106      	movs	r1, #6
    9e62:	f011 f820 	bl	1aea6 <net_buf_simple_pull>
    9e66:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9e68:	f10d 020e 	add.w	r2, sp, #14
    9e6c:	4631      	mov	r1, r6
    9e6e:	4620      	mov	r0, r4
    9e70:	f7fe ff19 	bl	8ca6 <range_is_valid>
    9e74:	b160      	cbz	r0, 9e90 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    9e76:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9e7a:	d012      	beq.n	9ea2 <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9e7c:	230a      	movs	r3, #10
    9e7e:	4622      	mov	r2, r4
    9e80:	2106      	movs	r1, #6
    9e82:	4648      	mov	r0, r9
    9e84:	f7ff fcaa 	bl	97dc <send_err_rsp>
		return 0;
    9e88:	2000      	movs	r0, #0
}
    9e8a:	b004      	add	sp, #16
    9e8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9e90:	2301      	movs	r3, #1
    9e92:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    9e96:	2106      	movs	r1, #6
    9e98:	4648      	mov	r0, r9
    9e9a:	f7ff fc9f 	bl	97dc <send_err_rsp>
		return 0;
    9e9e:	2000      	movs	r0, #0
    9ea0:	e7f3      	b.n	9e8a <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    9ea2:	7b3b      	ldrb	r3, [r7, #12]
    9ea4:	9300      	str	r3, [sp, #0]
    9ea6:	4653      	mov	r3, sl
    9ea8:	4632      	mov	r2, r6
    9eaa:	4621      	mov	r1, r4
    9eac:	4628      	mov	r0, r5
    9eae:	f7ff ff83 	bl	9db8 <att_find_type_rsp>
    9eb2:	e7ea      	b.n	9e8a <att_find_type_req+0x46>

00009eb4 <att_find_info_rsp>:
{
    9eb4:	b5f0      	push	{r4, r5, r6, r7, lr}
    9eb6:	b085      	sub	sp, #20
    9eb8:	4605      	mov	r5, r0
    9eba:	460e      	mov	r6, r1
    9ebc:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    9ebe:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    9ec0:	2210      	movs	r2, #16
    9ec2:	2100      	movs	r1, #0
    9ec4:	4668      	mov	r0, sp
    9ec6:	f020 fd53 	bl	2a970 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    9eca:	2200      	movs	r2, #0
    9ecc:	2105      	movs	r1, #5
    9ece:	4620      	mov	r0, r4
    9ed0:	f7ff fc22 	bl	9718 <bt_att_create_pdu>
    9ed4:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    9ed6:	b1e8      	cbz	r0, 9f14 <att_find_info_rsp+0x60>
	data.att = att;
    9ed8:	ab04      	add	r3, sp, #16
    9eda:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    9ede:	4a0e      	ldr	r2, [pc, #56]	; (9f18 <att_find_info_rsp+0x64>)
    9ee0:	4639      	mov	r1, r7
    9ee2:	4630      	mov	r0, r6
    9ee4:	f000 fc5c 	bl	a7a0 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    9ee8:	9b02      	ldr	r3, [sp, #8]
    9eea:	b143      	cbz	r3, 9efe <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9eec:	4b0b      	ldr	r3, [pc, #44]	; (9f1c <att_find_info_rsp+0x68>)
    9eee:	9a01      	ldr	r2, [sp, #4]
    9ef0:	2104      	movs	r1, #4
    9ef2:	4620      	mov	r0, r4
    9ef4:	f7fe f921 	bl	813a <bt_l2cap_send_cb>
	return 0;
    9ef8:	2000      	movs	r0, #0
}
    9efa:	b005      	add	sp, #20
    9efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    9efe:	9801      	ldr	r0, [sp, #4]
    9f00:	f010 ff38 	bl	1ad74 <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    9f04:	230a      	movs	r3, #10
    9f06:	4632      	mov	r2, r6
    9f08:	2104      	movs	r1, #4
    9f0a:	4620      	mov	r0, r4
    9f0c:	f7ff fc66 	bl	97dc <send_err_rsp>
		return 0;
    9f10:	2000      	movs	r0, #0
    9f12:	e7f2      	b.n	9efa <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    9f14:	200e      	movs	r0, #14
    9f16:	e7f0      	b.n	9efa <att_find_info_rsp+0x46>
    9f18:	000091bb 	.word	0x000091bb
    9f1c:	00008f3b 	.word	0x00008f3b

00009f20 <att_find_info_req>:
{
    9f20:	b5f0      	push	{r4, r5, r6, r7, lr}
    9f22:	b083      	sub	sp, #12
    9f24:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    9f26:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9f28:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9f2a:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9f2c:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9f2e:	f10d 0206 	add.w	r2, sp, #6
    9f32:	4631      	mov	r1, r6
    9f34:	4628      	mov	r0, r5
    9f36:	f7fe feb6 	bl	8ca6 <range_is_valid>
    9f3a:	b130      	cbz	r0, 9f4a <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9f3c:	4632      	mov	r2, r6
    9f3e:	4629      	mov	r1, r5
    9f40:	4620      	mov	r0, r4
    9f42:	f7ff ffb7 	bl	9eb4 <att_find_info_rsp>
}
    9f46:	b003      	add	sp, #12
    9f48:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9f4a:	2301      	movs	r3, #1
    9f4c:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9f50:	2104      	movs	r1, #4
    9f52:	4638      	mov	r0, r7
    9f54:	f7ff fc42 	bl	97dc <send_err_rsp>
		return 0;
    9f58:	2000      	movs	r0, #0
    9f5a:	e7f4      	b.n	9f46 <att_find_info_req+0x26>

00009f5c <bt_att_init>:

void bt_att_init(void)
{
    9f5c:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9f5e:	4803      	ldr	r0, [pc, #12]	; (9f6c <bt_att_init+0x10>)
    9f60:	f7fd ff44 	bl	7dec <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    9f64:	f000 fb3c 	bl	a5e0 <bt_gatt_init>
    9f68:	bd08      	pop	{r3, pc}
    9f6a:	bf00      	nop
    9f6c:	2000bae8 	.word	0x2000bae8

00009f70 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9f70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    9f72:	2800      	cmp	r0, #0
    9f74:	d043      	beq.n	9ffe <bt_att_send+0x8e>
    9f76:	4606      	mov	r6, r0
    9f78:	2900      	cmp	r1, #0
    9f7a:	d043      	beq.n	a004 <bt_att_send+0x94>
    9f7c:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9f7e:	f7fe ff7b 	bl	8e78 <att_chan_get>
	if (!att) {
    9f82:	4605      	mov	r5, r0
    9f84:	2800      	cmp	r0, #0
    9f86:	d040      	beq.n	a00a <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9f88:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9f90:	4638      	mov	r0, r7
    9f92:	f01f fa4d 	bl	29430 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9f96:	682b      	ldr	r3, [r5, #0]
    9f98:	7b1b      	ldrb	r3, [r3, #12]
    9f9a:	2b03      	cmp	r3, #3
    9f9c:	d011      	beq.n	9fc2 <bt_att_send+0x52>
    9f9e:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9fa0:	b1e3      	cbz	r3, 9fdc <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    9fa2:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    9fa4:	781b      	ldrb	r3, [r3, #0]
    9fa6:	2bd2      	cmp	r3, #210	; 0xd2
    9fa8:	d01e      	beq.n	9fe8 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9faa:	4620      	mov	r0, r4
    9fac:	f7fe ff0c 	bl	8dc8 <att_cb>
    9fb0:	4603      	mov	r3, r0
    9fb2:	4622      	mov	r2, r4
    9fb4:	2104      	movs	r1, #4
    9fb6:	4630      	mov	r0, r6
    9fb8:	f7fe f8bf 	bl	813a <bt_l2cap_send_cb>

	return 0;
    9fbc:	2500      	movs	r5, #0
}
    9fbe:	4628      	mov	r0, r5
    9fc0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9fc2:	f3bf 8f5b 	dmb	ish
    9fc6:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    9fca:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    9fce:	f013 0f04 	tst.w	r3, #4
    9fd2:	d101      	bne.n	9fd8 <bt_att_send+0x68>
    9fd4:	2301      	movs	r3, #1
    9fd6:	e7e3      	b.n	9fa0 <bt_att_send+0x30>
    9fd8:	2300      	movs	r3, #0
    9fda:	e7e1      	b.n	9fa0 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    9fdc:	4638      	mov	r0, r7
    9fde:	f01f fa14 	bl	2940a <_impl_k_sem_give>
		return -ENOTCONN;
    9fe2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    9fe6:	e7ea      	b.n	9fbe <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    9fe8:	4621      	mov	r1, r4
    9fea:	4630      	mov	r0, r6
    9fec:	f003 f81a 	bl	d024 <bt_smp_sign>
		if (err) {
    9ff0:	4605      	mov	r5, r0
    9ff2:	2800      	cmp	r0, #0
    9ff4:	d0d9      	beq.n	9faa <bt_att_send+0x3a>
    9ff6:	4638      	mov	r0, r7
    9ff8:	f01f fa07 	bl	2940a <_impl_k_sem_give>
			return err;
    9ffc:	e7df      	b.n	9fbe <bt_att_send+0x4e>
		return -EINVAL;
    9ffe:	f06f 0515 	mvn.w	r5, #21
    a002:	e7dc      	b.n	9fbe <bt_att_send+0x4e>
    a004:	f06f 0515 	mvn.w	r5, #21
    a008:	e7d9      	b.n	9fbe <bt_att_send+0x4e>
		return -ENOTCONN;
    a00a:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    a00e:	e7d6      	b.n	9fbe <bt_att_send+0x4e>

0000a010 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    a010:	b1e0      	cbz	r0, a04c <bt_att_req_send+0x3c>
    a012:	b1f1      	cbz	r1, a052 <bt_att_req_send+0x42>
{
    a014:	b510      	push	{r4, lr}
    a016:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    a018:	f7fe ff2e 	bl	8e78 <att_chan_get>
	if (!att) {
    a01c:	b1e0      	cbz	r0, a058 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    a01e:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    a022:	b17a      	cbz	r2, a044 <bt_att_req_send+0x34>
	node->next = NULL;
    a024:	2200      	movs	r2, #0
    a026:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    a028:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    a02c:	b122      	cbz	r2, a038 <bt_att_req_send+0x28>
		list->tail->next = node;
    a02e:	6014      	str	r4, [r2, #0]
		list->tail = node;
    a030:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    a034:	2000      	movs	r0, #0
    a036:	bd10      	pop	{r4, pc}
		list->tail = node;
    a038:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    a03c:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    a040:	2000      	movs	r0, #0
    a042:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    a044:	4621      	mov	r1, r4
    a046:	f7ff f9ad 	bl	93a4 <att_send_req>
    a04a:	bd10      	pop	{r4, pc}
		return -EINVAL;
    a04c:	f06f 0015 	mvn.w	r0, #21
    a050:	4770      	bx	lr
    a052:	f06f 0015 	mvn.w	r0, #21
    a056:	4770      	bx	lr
		return -ENOTCONN;
    a058:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    a05c:	bd10      	pop	{r4, pc}

0000a05e <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    a05e:	4770      	bx	lr

0000a060 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    a060:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    a062:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    a064:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    a066:	4a1c      	ldr	r2, [pc, #112]	; (a0d8 <gatt_register+0x78>)
    a068:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    a06a:	b172      	cbz	r2, a08a <gatt_register+0x2a>
	return list->tail;
    a06c:	4a1a      	ldr	r2, [pc, #104]	; (a0d8 <gatt_register+0x78>)
    a06e:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a070:	b14a      	cbz	r2, a086 <gatt_register+0x26>
    a072:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    a074:	6815      	ldr	r5, [r2, #0]
    a076:	8892      	ldrh	r2, [r2, #4]
    a078:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a07c:	0091      	lsls	r1, r2, #2
    a07e:	3914      	subs	r1, #20
    a080:	4429      	add	r1, r5
    a082:	8a0a      	ldrh	r2, [r1, #16]
    a084:	e009      	b.n	a09a <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    a086:	2200      	movs	r2, #0
    a088:	e7f4      	b.n	a074 <gatt_register+0x14>
		handle = 0;
    a08a:	2200      	movs	r2, #0
    a08c:	e005      	b.n	a09a <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    a08e:	428a      	cmp	r2, r1
    a090:	d21e      	bcs.n	a0d0 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    a092:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    a094:	3414      	adds	r4, #20
    a096:	3b01      	subs	r3, #1
    a098:	b29b      	uxth	r3, r3
    a09a:	b13c      	cbz	r4, a0ac <gatt_register+0x4c>
    a09c:	b133      	cbz	r3, a0ac <gatt_register+0x4c>
		if (!attrs->handle) {
    a09e:	8a21      	ldrh	r1, [r4, #16]
    a0a0:	2900      	cmp	r1, #0
    a0a2:	d1f4      	bne.n	a08e <gatt_register+0x2e>
			attrs->handle = ++handle;
    a0a4:	3201      	adds	r2, #1
    a0a6:	b292      	uxth	r2, r2
    a0a8:	8222      	strh	r2, [r4, #16]
    a0aa:	e7f3      	b.n	a094 <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    a0ac:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    a0b0:	2200      	movs	r2, #0
    a0b2:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    a0b4:	4a08      	ldr	r2, [pc, #32]	; (a0d8 <gatt_register+0x78>)
    a0b6:	6852      	ldr	r2, [r2, #4]
    a0b8:	b12a      	cbz	r2, a0c6 <gatt_register+0x66>
		list->tail->next = node;
    a0ba:	6013      	str	r3, [r2, #0]
		list->tail = node;
    a0bc:	4a06      	ldr	r2, [pc, #24]	; (a0d8 <gatt_register+0x78>)
    a0be:	6053      	str	r3, [r2, #4]

	return 0;
    a0c0:	2000      	movs	r0, #0
}
    a0c2:	bc30      	pop	{r4, r5}
    a0c4:	4770      	bx	lr
		list->tail = node;
    a0c6:	4a04      	ldr	r2, [pc, #16]	; (a0d8 <gatt_register+0x78>)
    a0c8:	6053      	str	r3, [r2, #4]
		list->head = node;
    a0ca:	6013      	str	r3, [r2, #0]
	return 0;
    a0cc:	2000      	movs	r0, #0
    a0ce:	e7f8      	b.n	a0c2 <gatt_register+0x62>
			return -EINVAL;
    a0d0:	f06f 0015 	mvn.w	r0, #21
    a0d4:	e7f5      	b.n	a0c2 <gatt_register+0x62>
    a0d6:	bf00      	nop
    a0d8:	20000844 	.word	0x20000844

0000a0dc <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    a0dc:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    a0de:	8804      	ldrh	r4, [r0, #0]
    a0e0:	4294      	cmp	r4, r2
    a0e2:	d802      	bhi.n	a0ea <update_range+0xe>
    a0e4:	880d      	ldrh	r5, [r1, #0]
    a0e6:	429d      	cmp	r5, r3
    a0e8:	d209      	bcs.n	a0fe <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    a0ea:	4294      	cmp	r4, r2
    a0ec:	d900      	bls.n	a0f0 <update_range+0x14>
		*start = new_start;
    a0ee:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    a0f0:	880a      	ldrh	r2, [r1, #0]
    a0f2:	4293      	cmp	r3, r2
    a0f4:	d905      	bls.n	a102 <update_range+0x26>
		*end = new_end;
    a0f6:	800b      	strh	r3, [r1, #0]
	}

	return true;
    a0f8:	2001      	movs	r0, #1
}
    a0fa:	bc30      	pop	{r4, r5}
    a0fc:	4770      	bx	lr
		return false;
    a0fe:	2000      	movs	r0, #0
    a100:	e7fb      	b.n	a0fa <update_range+0x1e>
	return true;
    a102:	2001      	movs	r0, #1
    a104:	e7f9      	b.n	a0fa <update_range+0x1e>

0000a106 <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    a106:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    a108:	2000      	movs	r0, #0
    a10a:	4770      	bx	lr

0000a10c <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    a10c:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    a10e:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    a110:	4623      	mov	r3, r4
    a112:	e000      	b.n	a116 <gatt_ccc_changed+0xa>
    a114:	3301      	adds	r3, #1
    a116:	684a      	ldr	r2, [r1, #4]
    a118:	429a      	cmp	r2, r3
    a11a:	d907      	bls.n	a12c <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    a11c:	680a      	ldr	r2, [r1, #0]
    a11e:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    a122:	8912      	ldrh	r2, [r2, #8]
    a124:	4294      	cmp	r4, r2
    a126:	d2f5      	bcs.n	a114 <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    a128:	4614      	mov	r4, r2
    a12a:	e7f3      	b.n	a114 <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    a12c:	890b      	ldrh	r3, [r1, #8]
    a12e:	429c      	cmp	r4, r3
    a130:	d003      	beq.n	a13a <gatt_ccc_changed+0x2e>
		ccc->value = value;
    a132:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    a134:	68cb      	ldr	r3, [r1, #12]
    a136:	4621      	mov	r1, r4
    a138:	4798      	blx	r3
    a13a:	bd10      	pop	{r4, pc}

0000a13c <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    a13c:	b510      	push	{r4, lr}
    a13e:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    a140:	69dc      	ldr	r4, [r3, #28]
    a142:	460a      	mov	r2, r1
    a144:	6999      	ldr	r1, [r3, #24]
    a146:	47a0      	blx	r4
    a148:	bd10      	pop	{r4, pc}
	...

0000a14c <sc_indicate_rsp>:
{
    a14c:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a14e:	4b0f      	ldr	r3, [pc, #60]	; (a18c <sc_indicate_rsp+0x40>)
    a150:	f103 0254 	add.w	r2, r3, #84	; 0x54
    a154:	f3bf 8f5b 	dmb	ish
    a158:	e852 1f00 	ldrex	r1, [r2]
    a15c:	f021 0102 	bic.w	r1, r1, #2
    a160:	e842 1000 	strex	r0, r1, [r2]
    a164:	2800      	cmp	r0, #0
    a166:	d1f7      	bne.n	a158 <sc_indicate_rsp+0xc>
    a168:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a16c:	f3bf 8f5b 	dmb	ish
    a170:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    a172:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    a176:	f013 0f01 	tst.w	r3, #1
    a17a:	d100      	bne.n	a17e <sc_indicate_rsp+0x32>
    a17c:	bd08      	pop	{r3, pc}
    a17e:	2200      	movs	r2, #0
    a180:	4903      	ldr	r1, [pc, #12]	; (a190 <sc_indicate_rsp+0x44>)
    a182:	4804      	ldr	r0, [pc, #16]	; (a194 <sc_indicate_rsp+0x48>)
    a184:	f01f ff8a 	bl	2a09c <k_delayed_work_submit_to_queue>
}
    a188:	e7f8      	b.n	a17c <sc_indicate_rsp+0x30>
    a18a:	bf00      	nop
    a18c:	2000084c 	.word	0x2000084c
    a190:	20000878 	.word	0x20000878
    a194:	20002c78 	.word	0x20002c78

0000a198 <sc_indicate>:
{
    a198:	b510      	push	{r4, lr}
    a19a:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    a19c:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a19e:	f3bf 8f5b 	dmb	ish
    a1a2:	e850 3f00 	ldrex	r3, [r0]
    a1a6:	f043 0e01 	orr.w	lr, r3, #1
    a1aa:	e840 ec00 	strex	ip, lr, [r0]
    a1ae:	f1bc 0f00 	cmp.w	ip, #0
    a1b2:	d1f6      	bne.n	a1a2 <sc_indicate+0xa>
    a1b4:	f3bf 8f5b 	dmb	ish
    a1b8:	f013 0f01 	tst.w	r3, #1
    a1bc:	d10a      	bne.n	a1d4 <sc_indicate+0x3c>
		sc->start = start;
    a1be:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    a1c0:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    a1c2:	f3bf 8f5b 	dmb	ish
    a1c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
    a1c8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    a1cc:	f013 0f02 	tst.w	r3, #2
    a1d0:	d00b      	beq.n	a1ea <sc_indicate+0x52>
    a1d2:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    a1d4:	4613      	mov	r3, r2
    a1d6:	460a      	mov	r2, r1
    a1d8:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    a1dc:	f104 0028 	add.w	r0, r4, #40	; 0x28
    a1e0:	f7ff ff7c 	bl	a0dc <update_range>
    a1e4:	2800      	cmp	r0, #0
    a1e6:	d1ec      	bne.n	a1c2 <sc_indicate+0x2a>
    a1e8:	e7f3      	b.n	a1d2 <sc_indicate+0x3a>
    a1ea:	220a      	movs	r2, #10
    a1ec:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    a1f0:	4801      	ldr	r0, [pc, #4]	; (a1f8 <sc_indicate+0x60>)
    a1f2:	f01f ff53 	bl	2a09c <k_delayed_work_submit_to_queue>
    a1f6:	e7ec      	b.n	a1d2 <sc_indicate+0x3a>
    a1f8:	20002c78 	.word	0x20002c78

0000a1fc <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    a1fc:	b510      	push	{r4, lr}
    a1fe:	b082      	sub	sp, #8
    a200:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    a202:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    a204:	6a09      	ldr	r1, [r1, #32]
    a206:	a801      	add	r0, sp, #4
    a208:	f7f6 f85a 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    a20c:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    a210:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    a214:	89a1      	ldrh	r1, [r4, #12]
    a216:	b909      	cbnz	r1, a21c <sc_save+0x20>
    a218:	89e1      	ldrh	r1, [r4, #14]
    a21a:	b139      	cbz	r1, a22c <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    a21c:	f104 010e 	add.w	r1, r4, #14
    a220:	f104 000c 	add.w	r0, r4, #12
    a224:	f7ff ff5a 	bl	a0dc <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    a228:	b002      	add	sp, #8
    a22a:	bd10      	pop	{r4, pc}
		*stored = data;
    a22c:	9801      	ldr	r0, [sp, #4]
    a22e:	60e0      	str	r0, [r4, #12]
		goto done;
    a230:	e7fa      	b.n	a228 <sc_save+0x2c>

0000a232 <bt_gatt_attr_write_ccc>:
{
    a232:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a236:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a23a:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    a23c:	2c02      	cmp	r4, #2
    a23e:	d84f      	bhi.n	a2e0 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    a240:	4698      	mov	r8, r3
    a242:	441c      	add	r4, r3
    a244:	2c02      	cmp	r4, #2
    a246:	d84e      	bhi.n	a2e6 <bt_gatt_attr_write_ccc+0xb4>
    a248:	460f      	mov	r7, r1
    a24a:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    a24c:	7853      	ldrb	r3, [r2, #1]
    a24e:	7816      	ldrb	r6, [r2, #0]
    a250:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    a254:	2400      	movs	r4, #0
    a256:	686b      	ldr	r3, [r5, #4]
    a258:	429c      	cmp	r4, r3
    a25a:	d209      	bcs.n	a270 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a25c:	6829      	ldr	r1, [r5, #0]
    a25e:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    a262:	3101      	adds	r1, #1
    a264:	4648      	mov	r0, r9
    a266:	f7fc fffd 	bl	7264 <bt_conn_addr_le_cmp>
    a26a:	b108      	cbz	r0, a270 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    a26c:	3401      	adds	r4, #1
    a26e:	e7f2      	b.n	a256 <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    a270:	686b      	ldr	r3, [r5, #4]
    a272:	429c      	cmp	r4, r3
    a274:	d026      	beq.n	a2c4 <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    a276:	b91e      	cbnz	r6, a280 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    a278:	682a      	ldr	r2, [r5, #0]
    a27a:	0123      	lsls	r3, r4, #4
    a27c:	2100      	movs	r1, #0
    a27e:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    a280:	682b      	ldr	r3, [r5, #0]
    a282:	0124      	lsls	r4, r4, #4
    a284:	4423      	add	r3, r4
    a286:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    a288:	682b      	ldr	r3, [r5, #0]
    a28a:	441c      	add	r4, r3
    a28c:	8922      	ldrh	r2, [r4, #8]
    a28e:	892b      	ldrh	r3, [r5, #8]
    a290:	429a      	cmp	r2, r3
    a292:	d003      	beq.n	a29c <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    a294:	4629      	mov	r1, r5
    a296:	4638      	mov	r0, r7
    a298:	f7ff ff38 	bl	a10c <gatt_ccc_changed>
}
    a29c:	4640      	mov	r0, r8
    a29e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    a2a2:	2207      	movs	r2, #7
    a2a4:	f109 0148 	add.w	r1, r9, #72	; 0x48
    a2a8:	3001      	adds	r0, #1
    a2aa:	f7f6 f809 	bl	2c0 <memcpy>
			if (value) {
    a2ae:	b11e      	cbz	r6, a2b8 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    a2b0:	682b      	ldr	r3, [r5, #0]
    a2b2:	2201      	movs	r2, #1
    a2b4:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    a2b8:	686b      	ldr	r3, [r5, #4]
    a2ba:	429c      	cmp	r4, r3
    a2bc:	d1e0      	bne.n	a280 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    a2be:	f06f 0810 	mvn.w	r8, #16
    a2c2:	e7eb      	b.n	a29c <bt_gatt_attr_write_ccc+0x6a>
    a2c4:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    a2c6:	429c      	cmp	r4, r3
    a2c8:	d2f6      	bcs.n	a2b8 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    a2ca:	682a      	ldr	r2, [r5, #0]
    a2cc:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    a2d0:	eb02 000a 	add.w	r0, r2, sl
    a2d4:	f812 200a 	ldrb.w	r2, [r2, sl]
    a2d8:	2a00      	cmp	r2, #0
    a2da:	d0e2      	beq.n	a2a2 <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    a2dc:	3401      	adds	r4, #1
    a2de:	e7f2      	b.n	a2c6 <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a2e0:	f06f 0806 	mvn.w	r8, #6
    a2e4:	e7da      	b.n	a29c <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    a2e6:	f06f 080c 	mvn.w	r8, #12
    a2ea:	e7d7      	b.n	a29c <bt_gatt_attr_write_ccc+0x6a>

0000a2ec <gatt_send>:
{
    a2ec:	b538      	push	{r3, r4, r5, lr}
    a2ee:	460d      	mov	r5, r1
	if (params) {
    a2f0:	b153      	cbz	r3, a308 <gatt_send+0x1c>
    a2f2:	4619      	mov	r1, r3
		req->buf = buf;
    a2f4:	611d      	str	r5, [r3, #16]
		req->func = func;
    a2f6:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    a2f8:	9b04      	ldr	r3, [sp, #16]
    a2fa:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    a2fc:	f7ff fe88 	bl	a010 <bt_att_req_send>
    a300:	4604      	mov	r4, r0
	if (err) {
    a302:	b92c      	cbnz	r4, a310 <gatt_send+0x24>
}
    a304:	4620      	mov	r0, r4
    a306:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    a308:	f7ff fe32 	bl	9f70 <bt_att_send>
    a30c:	4604      	mov	r4, r0
    a30e:	e7f8      	b.n	a302 <gatt_send+0x16>
		net_buf_unref(buf);
    a310:	4628      	mov	r0, r5
    a312:	f010 fd2f 	bl	1ad74 <net_buf_unref>
	return err;
    a316:	e7f5      	b.n	a304 <gatt_send+0x18>

0000a318 <gatt_indicate>:
{
    a318:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a31c:	b082      	sub	sp, #8
    a31e:	4680      	mov	r8, r0
    a320:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    a322:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    a324:	3202      	adds	r2, #2
    a326:	211d      	movs	r1, #29
    a328:	f7ff f9f6 	bl	9718 <bt_att_create_pdu>
	if (!buf) {
    a32c:	b1f8      	cbz	r0, a36e <gatt_indicate+0x56>
    a32e:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    a330:	f100 0708 	add.w	r7, r0, #8
    a334:	2102      	movs	r1, #2
    a336:	4638      	mov	r0, r7
    a338:	f010 fd68 	bl	1ae0c <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    a33c:	69a3      	ldr	r3, [r4, #24]
    a33e:	8a1b      	ldrh	r3, [r3, #16]
    a340:	4605      	mov	r5, r0
    a342:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    a346:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    a348:	4638      	mov	r0, r7
    a34a:	f010 fd5f 	bl	1ae0c <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    a34e:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    a350:	6a21      	ldr	r1, [r4, #32]
    a352:	4628      	mov	r0, r5
    a354:	f7f5 ffb4 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    a358:	2300      	movs	r3, #0
    a35a:	9300      	str	r3, [sp, #0]
    a35c:	4623      	mov	r3, r4
    a35e:	4a05      	ldr	r2, [pc, #20]	; (a374 <gatt_indicate+0x5c>)
    a360:	4631      	mov	r1, r6
    a362:	4640      	mov	r0, r8
    a364:	f7ff ffc2 	bl	a2ec <gatt_send>
}
    a368:	b002      	add	sp, #8
    a36a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    a36e:	f06f 000b 	mvn.w	r0, #11
    a372:	e7f9      	b.n	a368 <gatt_indicate+0x50>
    a374:	0000a13d 	.word	0x0000a13d

0000a378 <gatt_notify>:
{
    a378:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a37c:	4680      	mov	r8, r0
    a37e:	468a      	mov	sl, r1
    a380:	4691      	mov	r9, r2
    a382:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    a384:	1c9a      	adds	r2, r3, #2
    a386:	211b      	movs	r1, #27
    a388:	f7ff f9c6 	bl	9718 <bt_att_create_pdu>
	if (!buf) {
    a38c:	b1d8      	cbz	r0, a3c6 <gatt_notify+0x4e>
    a38e:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    a390:	f100 0708 	add.w	r7, r0, #8
    a394:	2102      	movs	r1, #2
    a396:	4638      	mov	r0, r7
    a398:	f010 fd38 	bl	1ae0c <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    a39c:	4605      	mov	r5, r0
    a39e:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    a3a2:	4621      	mov	r1, r4
    a3a4:	4638      	mov	r0, r7
    a3a6:	f010 fd31 	bl	1ae0c <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    a3aa:	4622      	mov	r2, r4
    a3ac:	4649      	mov	r1, r9
    a3ae:	4628      	mov	r0, r5
    a3b0:	f7f5 ff86 	bl	2c0 <memcpy>
    a3b4:	2300      	movs	r3, #0
    a3b6:	4632      	mov	r2, r6
    a3b8:	2104      	movs	r1, #4
    a3ba:	4640      	mov	r0, r8
    a3bc:	f7fd febd 	bl	813a <bt_l2cap_send_cb>
	return 0;
    a3c0:	2000      	movs	r0, #0
    a3c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    a3c6:	f06f 000b 	mvn.w	r0, #11
}
    a3ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

0000a3d0 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a3d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a3d4:	b082      	sub	sp, #8
    a3d6:	4604      	mov	r4, r0
    a3d8:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    a3da:	2300      	movs	r3, #0
    a3dc:	f88d 3000 	strb.w	r3, [sp]
    a3e0:	f642 1302 	movw	r3, #10498	; 0x2902
    a3e4:	f8ad 3002 	strh.w	r3, [sp, #2]
    a3e8:	4669      	mov	r1, sp
    a3ea:	6800      	ldr	r0, [r0, #0]
    a3ec:	f7fa f991 	bl	4712 <bt_uuid_cmp>
    a3f0:	b938      	cbnz	r0, a402 <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a3f2:	68a2      	ldr	r2, [r4, #8]
    a3f4:	4b29      	ldr	r3, [pc, #164]	; (a49c <notify_cb+0xcc>)
    a3f6:	429a      	cmp	r2, r3
    a3f8:	d012      	beq.n	a420 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    a3fa:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    a3fc:	b002      	add	sp, #8
    a3fe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    a402:	6820      	ldr	r0, [r4, #0]
    a404:	2300      	movs	r3, #0
    a406:	f88d 3004 	strb.w	r3, [sp, #4]
    a40a:	f642 0303 	movw	r3, #10243	; 0x2803
    a40e:	f8ad 3006 	strh.w	r3, [sp, #6]
    a412:	a901      	add	r1, sp, #4
    a414:	f7fa f97d 	bl	4712 <bt_uuid_cmp>
    a418:	2800      	cmp	r0, #0
    a41a:	d0ef      	beq.n	a3fc <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    a41c:	2001      	movs	r0, #1
    a41e:	e7ed      	b.n	a3fc <notify_cb+0x2c>
	ccc = attr->user_data;
    a420:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a422:	2400      	movs	r4, #0
    a424:	e01a      	b.n	a45c <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    a426:	6828      	ldr	r0, [r5, #0]
    a428:	4b1d      	ldr	r3, [pc, #116]	; (a4a0 <notify_cb+0xd0>)
    a42a:	4298      	cmp	r0, r3
    a42c:	d115      	bne.n	a45a <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    a42e:	6979      	ldr	r1, [r7, #20]
    a430:	4430      	add	r0, r6
    a432:	f7ff fee3 	bl	a1fc <sc_save>
			continue;
    a436:	e010      	b.n	a45a <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    a438:	88bb      	ldrh	r3, [r7, #4]
    a43a:	2b02      	cmp	r3, #2
    a43c:	d024      	beq.n	a488 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    a43e:	68b9      	ldr	r1, [r7, #8]
    a440:	8a3b      	ldrh	r3, [r7, #16]
    a442:	68fa      	ldr	r2, [r7, #12]
    a444:	8a09      	ldrh	r1, [r1, #16]
    a446:	f7ff ff97 	bl	a378 <gatt_notify>
    a44a:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    a44c:	4640      	mov	r0, r8
    a44e:	f7fc ffb9 	bl	73c4 <bt_conn_unref>
		if (err < 0) {
    a452:	2e00      	cmp	r6, #0
    a454:	db1f      	blt.n	a496 <notify_cb+0xc6>
		data->err = 0;
    a456:	2300      	movs	r3, #0
    a458:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    a45a:	3401      	adds	r4, #1
    a45c:	686b      	ldr	r3, [r5, #4]
    a45e:	429c      	cmp	r4, r3
    a460:	d217      	bcs.n	a492 <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    a462:	6828      	ldr	r0, [r5, #0]
    a464:	0126      	lsls	r6, r4, #4
    a466:	4430      	add	r0, r6
    a468:	8902      	ldrh	r2, [r0, #8]
    a46a:	88bb      	ldrh	r3, [r7, #4]
    a46c:	429a      	cmp	r2, r3
    a46e:	d1f4      	bne.n	a45a <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a470:	3001      	adds	r0, #1
    a472:	f7fc ff4d 	bl	7310 <bt_conn_lookup_addr_le>
		if (!conn) {
    a476:	4680      	mov	r8, r0
    a478:	2800      	cmp	r0, #0
    a47a:	d0d4      	beq.n	a426 <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    a47c:	7b03      	ldrb	r3, [r0, #12]
    a47e:	2b03      	cmp	r3, #3
    a480:	d0da      	beq.n	a438 <notify_cb+0x68>
			bt_conn_unref(conn);
    a482:	f7fc ff9f 	bl	73c4 <bt_conn_unref>
			continue;
    a486:	e7e8      	b.n	a45a <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    a488:	6979      	ldr	r1, [r7, #20]
    a48a:	f7ff ff45 	bl	a318 <gatt_indicate>
    a48e:	4606      	mov	r6, r0
    a490:	e7dc      	b.n	a44c <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    a492:	2001      	movs	r0, #1
    a494:	e7b2      	b.n	a3fc <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    a496:	2000      	movs	r0, #0
    a498:	e7b0      	b.n	a3fc <notify_cb+0x2c>
    a49a:	bf00      	nop
    a49c:	0000a233 	.word	0x0000a233
    a4a0:	200008a4 	.word	0x200008a4

0000a4a4 <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    a4a4:	8981      	ldrh	r1, [r0, #12]
    a4a6:	b909      	cbnz	r1, a4ac <sc_restore+0x8>
    a4a8:	89c3      	ldrh	r3, [r0, #14]
    a4aa:	b163      	cbz	r3, a4c6 <sc_restore+0x22>
{
    a4ac:	b510      	push	{r4, lr}
    a4ae:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    a4b0:	89c2      	ldrh	r2, [r0, #14]
    a4b2:	4805      	ldr	r0, [pc, #20]	; (a4c8 <sc_restore+0x24>)
    a4b4:	f7ff fe70 	bl	a198 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    a4b8:	2204      	movs	r2, #4
    a4ba:	2100      	movs	r1, #0
    a4bc:	f104 000c 	add.w	r0, r4, #12
    a4c0:	f020 fa56 	bl	2a970 <memset>
    a4c4:	bd10      	pop	{r4, pc}
    a4c6:	4770      	bx	lr
    a4c8:	2000084c 	.word	0x2000084c

0000a4cc <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a4cc:	6882      	ldr	r2, [r0, #8]
    a4ce:	4b16      	ldr	r3, [pc, #88]	; (a528 <connected_cb+0x5c>)
    a4d0:	429a      	cmp	r2, r3
    a4d2:	d001      	beq.n	a4d8 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    a4d4:	2001      	movs	r0, #1
    a4d6:	4770      	bx	lr
{
    a4d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a4dc:	460f      	mov	r7, r1
    a4de:	4680      	mov	r8, r0
	ccc = attr->user_data;
    a4e0:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a4e2:	2400      	movs	r4, #0
    a4e4:	e004      	b.n	a4f0 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    a4e6:	4430      	add	r0, r6
    a4e8:	f7ff ffdc 	bl	a4a4 <sc_restore>
    a4ec:	e019      	b.n	a522 <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    a4ee:	3401      	adds	r4, #1
    a4f0:	686b      	ldr	r3, [r5, #4]
    a4f2:	429c      	cmp	r4, r3
    a4f4:	d215      	bcs.n	a522 <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a4f6:	6829      	ldr	r1, [r5, #0]
    a4f8:	0126      	lsls	r6, r4, #4
    a4fa:	4431      	add	r1, r6
    a4fc:	3101      	adds	r1, #1
    a4fe:	4638      	mov	r0, r7
    a500:	f7fc feb0 	bl	7264 <bt_conn_addr_le_cmp>
    a504:	2800      	cmp	r0, #0
    a506:	d1f2      	bne.n	a4ee <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    a508:	682b      	ldr	r3, [r5, #0]
    a50a:	4433      	add	r3, r6
    a50c:	891b      	ldrh	r3, [r3, #8]
    a50e:	2b00      	cmp	r3, #0
    a510:	d0ed      	beq.n	a4ee <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    a512:	4629      	mov	r1, r5
    a514:	4640      	mov	r0, r8
    a516:	f7ff fdf9 	bl	a10c <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    a51a:	6828      	ldr	r0, [r5, #0]
    a51c:	4b03      	ldr	r3, [pc, #12]	; (a52c <connected_cb+0x60>)
    a51e:	4298      	cmp	r0, r3
    a520:	d0e1      	beq.n	a4e6 <connected_cb+0x1a>
}
    a522:	2001      	movs	r0, #1
    a524:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a528:	0000a233 	.word	0x0000a233
    a52c:	200008a4 	.word	0x200008a4

0000a530 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    a530:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    a534:	6882      	ldr	r2, [r0, #8]
    a536:	4b29      	ldr	r3, [pc, #164]	; (a5dc <disconnected_cb+0xac>)
    a538:	429a      	cmp	r2, r3
    a53a:	d002      	beq.n	a542 <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    a53c:	2001      	movs	r0, #1
    a53e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    a542:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    a544:	892b      	ldrh	r3, [r5, #8]
    a546:	2b00      	cmp	r3, #0
    a548:	d0f8      	beq.n	a53c <disconnected_cb+0xc>
    a54a:	4688      	mov	r8, r1
    a54c:	4607      	mov	r7, r0
    a54e:	2400      	movs	r4, #0
    a550:	e012      	b.n	a578 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    a552:	f7fc ff37 	bl	73c4 <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    a556:	e7f1      	b.n	a53c <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    a558:	f108 0948 	add.w	r9, r8, #72	; 0x48
    a55c:	4648      	mov	r0, r9
    a55e:	f7fc f99f 	bl	68a0 <bt_addr_le_is_bonded>
    a562:	bb28      	cbnz	r0, a5b0 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    a564:	682b      	ldr	r3, [r5, #0]
    a566:	2100      	movs	r1, #0
    a568:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    a56a:	6828      	ldr	r0, [r5, #0]
    a56c:	4430      	add	r0, r6
    a56e:	2202      	movs	r2, #2
    a570:	3008      	adds	r0, #8
    a572:	f020 f9fd 	bl	2a970 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    a576:	3401      	adds	r4, #1
    a578:	686b      	ldr	r3, [r5, #4]
    a57a:	429c      	cmp	r4, r3
    a57c:	d220      	bcs.n	a5c0 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    a57e:	6829      	ldr	r1, [r5, #0]
    a580:	0126      	lsls	r6, r4, #4
    a582:	4431      	add	r1, r6
    a584:	890b      	ldrh	r3, [r1, #8]
    a586:	2b00      	cmp	r3, #0
    a588:	d0f5      	beq.n	a576 <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a58a:	3101      	adds	r1, #1
    a58c:	4640      	mov	r0, r8
    a58e:	f7fc fe69 	bl	7264 <bt_conn_addr_le_cmp>
    a592:	2800      	cmp	r0, #0
    a594:	d0e0      	beq.n	a558 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    a596:	6828      	ldr	r0, [r5, #0]
    a598:	4430      	add	r0, r6
    a59a:	3001      	adds	r0, #1
    a59c:	f7fc feb8 	bl	7310 <bt_conn_lookup_addr_le>
			if (tmp) {
    a5a0:	2800      	cmp	r0, #0
    a5a2:	d0e8      	beq.n	a576 <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    a5a4:	7b02      	ldrb	r2, [r0, #12]
    a5a6:	2a03      	cmp	r2, #3
    a5a8:	d0d3      	beq.n	a552 <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    a5aa:	f7fc ff0b 	bl	73c4 <bt_conn_unref>
    a5ae:	e7e2      	b.n	a576 <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    a5b0:	6828      	ldr	r0, [r5, #0]
    a5b2:	4430      	add	r0, r6
    a5b4:	2207      	movs	r2, #7
    a5b6:	4649      	mov	r1, r9
    a5b8:	3001      	adds	r0, #1
    a5ba:	f7f5 fe81 	bl	2c0 <memcpy>
    a5be:	e7da      	b.n	a576 <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    a5c0:	2202      	movs	r2, #2
    a5c2:	2100      	movs	r1, #0
    a5c4:	f105 0008 	add.w	r0, r5, #8
    a5c8:	f020 f9d2 	bl	2a970 <memset>
	if (ccc->cfg_changed) {
    a5cc:	68eb      	ldr	r3, [r5, #12]
    a5ce:	2b00      	cmp	r3, #0
    a5d0:	d0b4      	beq.n	a53c <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    a5d2:	8929      	ldrh	r1, [r5, #8]
    a5d4:	4638      	mov	r0, r7
    a5d6:	4798      	blx	r3
    a5d8:	e7b0      	b.n	a53c <disconnected_cb+0xc>
    a5da:	bf00      	nop
    a5dc:	0000a233 	.word	0x0000a233

0000a5e0 <bt_gatt_init>:
{
    a5e0:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    a5e2:	4805      	ldr	r0, [pc, #20]	; (a5f8 <bt_gatt_init+0x18>)
    a5e4:	f7ff fd3c 	bl	a060 <gatt_register>
	gatt_register(&gatt_svc);
    a5e8:	4804      	ldr	r0, [pc, #16]	; (a5fc <bt_gatt_init+0x1c>)
    a5ea:	f7ff fd39 	bl	a060 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    a5ee:	4904      	ldr	r1, [pc, #16]	; (a600 <bt_gatt_init+0x20>)
    a5f0:	4804      	ldr	r0, [pc, #16]	; (a604 <bt_gatt_init+0x24>)
    a5f2:	f01f fcdb 	bl	29fac <k_delayed_work_init>
    a5f6:	bd08      	pop	{r3, pc}
    a5f8:	2000bbdc 	.word	0x2000bbdc
    a5fc:	2000bc38 	.word	0x2000bc38
    a600:	0000a8d5 	.word	0x0000a8d5
    a604:	20000878 	.word	0x20000878

0000a608 <bt_gatt_service_register>:
{
    a608:	b510      	push	{r4, lr}
    a60a:	b082      	sub	sp, #8
    a60c:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a60e:	6803      	ldr	r3, [r0, #0]
    a610:	6818      	ldr	r0, [r3, #0]
    a612:	2300      	movs	r3, #0
    a614:	f88d 3000 	strb.w	r3, [sp]
    a618:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    a61c:	f8ad 3002 	strh.w	r3, [sp, #2]
    a620:	4669      	mov	r1, sp
    a622:	f7fa f876 	bl	4712 <bt_uuid_cmp>
    a626:	b300      	cbz	r0, a66a <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    a628:	6823      	ldr	r3, [r4, #0]
    a62a:	6818      	ldr	r0, [r3, #0]
    a62c:	2300      	movs	r3, #0
    a62e:	f88d 3004 	strb.w	r3, [sp, #4]
    a632:	f641 0301 	movw	r3, #6145	; 0x1801
    a636:	f8ad 3006 	strh.w	r3, [sp, #6]
    a63a:	a901      	add	r1, sp, #4
    a63c:	f7fa f869 	bl	4712 <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    a640:	b1b0      	cbz	r0, a670 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    a642:	4620      	mov	r0, r4
    a644:	f7ff fd0c 	bl	a060 <gatt_register>
	if (err < 0) {
    a648:	2800      	cmp	r0, #0
    a64a:	db0c      	blt.n	a666 <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a64c:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    a64e:	88a2      	ldrh	r2, [r4, #4]
    a650:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    a654:	0093      	lsls	r3, r2, #2
    a656:	3b14      	subs	r3, #20
    a658:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    a65a:	8a1a      	ldrh	r2, [r3, #16]
    a65c:	8a09      	ldrh	r1, [r1, #16]
    a65e:	4806      	ldr	r0, [pc, #24]	; (a678 <bt_gatt_service_register+0x70>)
    a660:	f7ff fd9a 	bl	a198 <sc_indicate>
	return 0;
    a664:	2000      	movs	r0, #0
}
    a666:	b002      	add	sp, #8
    a668:	bd10      	pop	{r4, pc}
		return -EALREADY;
    a66a:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a66e:	e7fa      	b.n	a666 <bt_gatt_service_register+0x5e>
    a670:	f06f 0077 	mvn.w	r0, #119	; 0x77
    a674:	e7f7      	b.n	a666 <bt_gatt_service_register+0x5e>
    a676:	bf00      	nop
    a678:	2000084c 	.word	0x2000084c

0000a67c <bt_gatt_attr_read>:
{
    a67c:	b510      	push	{r4, lr}
    a67e:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    a682:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    a686:	42a1      	cmp	r1, r4
    a688:	d80c      	bhi.n	a6a4 <bt_gatt_attr_read+0x28>
    a68a:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    a68c:	1a64      	subs	r4, r4, r1
    a68e:	42a3      	cmp	r3, r4
    a690:	bfa8      	it	ge
    a692:	4623      	movge	r3, r4
    a694:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    a696:	4622      	mov	r2, r4
    a698:	9b03      	ldr	r3, [sp, #12]
    a69a:	4419      	add	r1, r3
    a69c:	f7f5 fe10 	bl	2c0 <memcpy>
}
    a6a0:	4620      	mov	r0, r4
    a6a2:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    a6a4:	f06f 0406 	mvn.w	r4, #6
    a6a8:	e7fa      	b.n	a6a0 <bt_gatt_attr_read+0x24>

0000a6aa <read_appearance>:
{
    a6aa:	b530      	push	{r4, r5, lr}
    a6ac:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    a6ae:	ac06      	add	r4, sp, #24
    a6b0:	2500      	movs	r5, #0
    a6b2:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    a6b6:	2502      	movs	r5, #2
    a6b8:	9502      	str	r5, [sp, #8]
    a6ba:	9401      	str	r4, [sp, #4]
    a6bc:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    a6c0:	9400      	str	r4, [sp, #0]
    a6c2:	f7ff ffdb 	bl	a67c <bt_gatt_attr_read>
}
    a6c6:	b007      	add	sp, #28
    a6c8:	bd30      	pop	{r4, r5, pc}
	...

0000a6cc <read_name>:
{
    a6cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a6d0:	b084      	sub	sp, #16
    a6d2:	4605      	mov	r5, r0
    a6d4:	460e      	mov	r6, r1
    a6d6:	4617      	mov	r7, r2
    a6d8:	4698      	mov	r8, r3
				 strlen(gap_name));
    a6da:	4c09      	ldr	r4, [pc, #36]	; (a700 <read_name+0x34>)
    a6dc:	4620      	mov	r0, r4
    a6de:	f7f6 f80f 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    a6e2:	b280      	uxth	r0, r0
    a6e4:	9002      	str	r0, [sp, #8]
    a6e6:	9401      	str	r4, [sp, #4]
    a6e8:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    a6ec:	9300      	str	r3, [sp, #0]
    a6ee:	4643      	mov	r3, r8
    a6f0:	463a      	mov	r2, r7
    a6f2:	4631      	mov	r1, r6
    a6f4:	4628      	mov	r0, r5
    a6f6:	f7ff ffc1 	bl	a67c <bt_gatt_attr_read>
}
    a6fa:	b004      	add	sp, #16
    a6fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    a700:	00031884 	.word	0x00031884

0000a704 <bt_gatt_attr_read_service>:
{
    a704:	b570      	push	{r4, r5, r6, lr}
    a706:	b086      	sub	sp, #24
    a708:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    a70c:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    a70e:	7826      	ldrb	r6, [r4, #0]
    a710:	b146      	cbz	r6, a724 <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    a712:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a714:	2610      	movs	r6, #16
    a716:	9602      	str	r6, [sp, #8]
    a718:	9401      	str	r4, [sp, #4]
    a71a:	9500      	str	r5, [sp, #0]
    a71c:	f7ff ffae 	bl	a67c <bt_gatt_attr_read>
}
    a720:	b006      	add	sp, #24
    a722:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    a724:	8866      	ldrh	r6, [r4, #2]
    a726:	ac06      	add	r4, sp, #24
    a728:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    a72c:	2602      	movs	r6, #2
    a72e:	9602      	str	r6, [sp, #8]
    a730:	9401      	str	r4, [sp, #4]
    a732:	9500      	str	r5, [sp, #0]
    a734:	f7ff ffa2 	bl	a67c <bt_gatt_attr_read>
    a738:	e7f2      	b.n	a720 <bt_gatt_attr_read_service+0x1c>

0000a73a <bt_gatt_attr_read_ccc>:
{
    a73a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    a73e:	b086      	sub	sp, #24
    a740:	4607      	mov	r7, r0
    a742:	4688      	mov	r8, r1
    a744:	4691      	mov	r9, r2
    a746:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    a748:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    a74a:	2400      	movs	r4, #0
    a74c:	686b      	ldr	r3, [r5, #4]
    a74e:	429c      	cmp	r4, r3
    a750:	d20e      	bcs.n	a770 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    a752:	6829      	ldr	r1, [r5, #0]
    a754:	0126      	lsls	r6, r4, #4
    a756:	4431      	add	r1, r6
    a758:	3101      	adds	r1, #1
    a75a:	4638      	mov	r0, r7
    a75c:	f7fc fd82 	bl	7264 <bt_conn_addr_le_cmp>
    a760:	b108      	cbz	r0, a766 <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    a762:	3401      	adds	r4, #1
    a764:	e7f2      	b.n	a74c <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    a766:	682b      	ldr	r3, [r5, #0]
    a768:	441e      	add	r6, r3
    a76a:	8933      	ldrh	r3, [r6, #8]
    a76c:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    a770:	686b      	ldr	r3, [r5, #4]
    a772:	429c      	cmp	r4, r3
    a774:	d010      	beq.n	a798 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    a776:	2302      	movs	r3, #2
    a778:	9302      	str	r3, [sp, #8]
    a77a:	f10d 0316 	add.w	r3, sp, #22
    a77e:	9301      	str	r3, [sp, #4]
    a780:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    a784:	9300      	str	r3, [sp, #0]
    a786:	4653      	mov	r3, sl
    a788:	464a      	mov	r2, r9
    a78a:	4641      	mov	r1, r8
    a78c:	4638      	mov	r0, r7
    a78e:	f7ff ff75 	bl	a67c <bt_gatt_attr_read>
}
    a792:	b006      	add	sp, #24
    a794:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    a798:	2300      	movs	r3, #0
    a79a:	f8ad 3016 	strh.w	r3, [sp, #22]
    a79e:	e7ea      	b.n	a776 <bt_gatt_attr_read_ccc+0x3c>

0000a7a0 <bt_gatt_foreach_attr>:
{
    a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    a7a4:	4606      	mov	r6, r0
    a7a6:	460f      	mov	r7, r1
    a7a8:	4690      	mov	r8, r2
    a7aa:	4699      	mov	r9, r3
	return list->head;
    a7ac:	4b15      	ldr	r3, [pc, #84]	; (a804 <bt_gatt_foreach_attr+0x64>)
    a7ae:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a7b0:	b10d      	cbz	r5, a7b6 <bt_gatt_foreach_attr+0x16>
    a7b2:	3d08      	subs	r5, #8
    a7b4:	e01e      	b.n	a7f4 <bt_gatt_foreach_attr+0x54>
    a7b6:	2500      	movs	r5, #0
    a7b8:	e01c      	b.n	a7f4 <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    a7ba:	3401      	adds	r4, #1
    a7bc:	88ab      	ldrh	r3, [r5, #4]
    a7be:	429c      	cmp	r4, r3
    a7c0:	da0f      	bge.n	a7e2 <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    a7c2:	6828      	ldr	r0, [r5, #0]
    a7c4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    a7c8:	0093      	lsls	r3, r2, #2
    a7ca:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    a7cc:	8a03      	ldrh	r3, [r0, #16]
    a7ce:	42b3      	cmp	r3, r6
    a7d0:	d3f3      	bcc.n	a7ba <bt_gatt_foreach_attr+0x1a>
    a7d2:	42bb      	cmp	r3, r7
    a7d4:	d8f1      	bhi.n	a7ba <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    a7d6:	4649      	mov	r1, r9
    a7d8:	47c0      	blx	r8
    a7da:	2800      	cmp	r0, #0
    a7dc:	d1ed      	bne.n	a7ba <bt_gatt_foreach_attr+0x1a>
    a7de:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a7e2:	f115 0308 	adds.w	r3, r5, #8
    a7e6:	d009      	beq.n	a7fc <bt_gatt_foreach_attr+0x5c>
	return node->next;
    a7e8:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    a7ea:	b14a      	cbz	r2, a800 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a7ec:	b103      	cbz	r3, a7f0 <bt_gatt_foreach_attr+0x50>
	return node->next;
    a7ee:	68ab      	ldr	r3, [r5, #8]
    a7f0:	f1a3 0508 	sub.w	r5, r3, #8
    a7f4:	2d00      	cmp	r5, #0
    a7f6:	d0f2      	beq.n	a7de <bt_gatt_foreach_attr+0x3e>
    a7f8:	2400      	movs	r4, #0
    a7fa:	e7df      	b.n	a7bc <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    a7fc:	461a      	mov	r2, r3
    a7fe:	e7f4      	b.n	a7ea <bt_gatt_foreach_attr+0x4a>
    a800:	2500      	movs	r5, #0
    a802:	e7f7      	b.n	a7f4 <bt_gatt_foreach_attr+0x54>
    a804:	20000844 	.word	0x20000844

0000a808 <bt_gatt_attr_next>:
{
    a808:	b500      	push	{lr}
    a80a:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    a80c:	ab02      	add	r3, sp, #8
    a80e:	2200      	movs	r2, #0
    a810:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    a814:	8a00      	ldrh	r0, [r0, #16]
    a816:	3001      	adds	r0, #1
    a818:	b280      	uxth	r0, r0
    a81a:	4a04      	ldr	r2, [pc, #16]	; (a82c <bt_gatt_attr_next+0x24>)
    a81c:	4601      	mov	r1, r0
    a81e:	f7ff ffbf 	bl	a7a0 <bt_gatt_foreach_attr>
}
    a822:	9801      	ldr	r0, [sp, #4]
    a824:	b003      	add	sp, #12
    a826:	f85d fb04 	ldr.w	pc, [sp], #4
    a82a:	bf00      	nop
    a82c:	0000a107 	.word	0x0000a107

0000a830 <bt_gatt_attr_read_chrc>:
{
    a830:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a834:	b08a      	sub	sp, #40	; 0x28
    a836:	4606      	mov	r6, r0
    a838:	460c      	mov	r4, r1
    a83a:	4617      	mov	r7, r2
    a83c:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    a83e:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    a840:	792b      	ldrb	r3, [r5, #4]
    a842:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    a846:	4608      	mov	r0, r1
    a848:	f7ff ffde 	bl	a808 <bt_gatt_attr_next>
	if (!next) {
    a84c:	b1c0      	cbz	r0, a880 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    a84e:	8a03      	ldrh	r3, [r0, #16]
    a850:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    a854:	6829      	ldr	r1, [r5, #0]
    a856:	780b      	ldrb	r3, [r1, #0]
    a858:	b9c3      	cbnz	r3, a88c <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    a85a:	884b      	ldrh	r3, [r1, #2]
    a85c:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    a860:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    a862:	9302      	str	r3, [sp, #8]
    a864:	ab05      	add	r3, sp, #20
    a866:	9301      	str	r3, [sp, #4]
    a868:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    a86c:	9300      	str	r3, [sp, #0]
    a86e:	4643      	mov	r3, r8
    a870:	463a      	mov	r2, r7
    a872:	4621      	mov	r1, r4
    a874:	4630      	mov	r0, r6
    a876:	f7ff ff01 	bl	a67c <bt_gatt_attr_read>
}
    a87a:	b00a      	add	sp, #40	; 0x28
    a87c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    a880:	2300      	movs	r3, #0
    a882:	f88d 3015 	strb.w	r3, [sp, #21]
    a886:	f88d 3016 	strb.w	r3, [sp, #22]
    a88a:	e7e3      	b.n	a854 <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    a88c:	2210      	movs	r2, #16
    a88e:	3101      	adds	r1, #1
    a890:	f10d 0017 	add.w	r0, sp, #23
    a894:	f7f5 fd14 	bl	2c0 <memcpy>
		value_len += 16;
    a898:	2313      	movs	r3, #19
    a89a:	e7e2      	b.n	a862 <bt_gatt_attr_read_chrc+0x32>

0000a89c <bt_gatt_indicate>:
{
    a89c:	b500      	push	{lr}
    a89e:	b087      	sub	sp, #28
	if (conn) {
    a8a0:	b120      	cbz	r0, a8ac <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    a8a2:	f7ff fd39 	bl	a318 <gatt_indicate>
}
    a8a6:	b007      	add	sp, #28
    a8a8:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    a8ac:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    a8b0:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    a8b2:	2302      	movs	r3, #2
    a8b4:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    a8b8:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    a8ba:	6988      	ldr	r0, [r1, #24]
    a8bc:	466b      	mov	r3, sp
    a8be:	4a04      	ldr	r2, [pc, #16]	; (a8d0 <bt_gatt_indicate+0x34>)
    a8c0:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a8c4:	8a00      	ldrh	r0, [r0, #16]
    a8c6:	f7ff ff6b 	bl	a7a0 <bt_gatt_foreach_attr>
	return nfy.err;
    a8ca:	9800      	ldr	r0, [sp, #0]
    a8cc:	e7eb      	b.n	a8a6 <bt_gatt_indicate+0xa>
    a8ce:	bf00      	nop
    a8d0:	0000a3d1 	.word	0x0000a3d1

0000a8d4 <sc_process>:
{
    a8d4:	b510      	push	{r4, lr}
    a8d6:	b082      	sub	sp, #8
    a8d8:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    a8da:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    a8de:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    a8e2:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    a8e6:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    a8ea:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    a8ee:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a8f2:	f3bf 8f5b 	dmb	ish
    a8f6:	e854 2f00 	ldrex	r2, [r4]
    a8fa:	f022 0201 	bic.w	r2, r2, #1
    a8fe:	e844 2000 	strex	r0, r2, [r4]
    a902:	2800      	cmp	r0, #0
    a904:	d1f7      	bne.n	a8f6 <sc_process+0x22>
    a906:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    a90a:	2000      	movs	r0, #0
    a90c:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    a910:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    a914:	4a0e      	ldr	r2, [pc, #56]	; (a950 <sc_process+0x7c>)
    a916:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    a91a:	4a0e      	ldr	r2, [pc, #56]	; (a954 <sc_process+0x80>)
    a91c:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    a920:	aa01      	add	r2, sp, #4
    a922:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    a926:	2204      	movs	r2, #4
    a928:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    a92c:	f7ff ffb6 	bl	a89c <bt_gatt_indicate>
    a930:	b108      	cbz	r0, a936 <sc_process+0x62>
}
    a932:	b002      	add	sp, #8
    a934:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    a936:	f3bf 8f5b 	dmb	ish
    a93a:	e854 3f00 	ldrex	r3, [r4]
    a93e:	f043 0302 	orr.w	r3, r3, #2
    a942:	e844 3200 	strex	r2, r3, [r4]
    a946:	2a00      	cmp	r2, #0
    a948:	d1f7      	bne.n	a93a <sc_process+0x66>
    a94a:	f3bf 8f5b 	dmb	ish
    a94e:	e7f0      	b.n	a932 <sc_process+0x5e>
    a950:	2000bc10 	.word	0x2000bc10
    a954:	0000a14d 	.word	0x0000a14d

0000a958 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    a958:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    a95a:	4603      	mov	r3, r0
    a95c:	4a03      	ldr	r2, [pc, #12]	; (a96c <bt_gatt_connected+0x14>)
    a95e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a962:	2001      	movs	r0, #1
    a964:	f7ff ff1c 	bl	a7a0 <bt_gatt_foreach_attr>
    a968:	bd08      	pop	{r3, pc}
    a96a:	bf00      	nop
    a96c:	0000a4cd 	.word	0x0000a4cd

0000a970 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    a970:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    a972:	4603      	mov	r3, r0
    a974:	4a03      	ldr	r2, [pc, #12]	; (a984 <bt_gatt_disconnected+0x14>)
    a976:	f64f 71ff 	movw	r1, #65535	; 0xffff
    a97a:	2001      	movs	r0, #1
    a97c:	f7ff ff10 	bl	a7a0 <bt_gatt_foreach_attr>
    a980:	bd08      	pop	{r3, pc}
    a982:	bf00      	nop
    a984:	0000a531 	.word	0x0000a531

0000a988 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    a988:	4b11      	ldr	r3, [pc, #68]	; (a9d0 <get_io_capa+0x48>)
    a98a:	681b      	ldr	r3, [r3, #0]
    a98c:	b1db      	cbz	r3, a9c6 <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a98e:	681a      	ldr	r2, [r3, #0]
    a990:	b152      	cbz	r2, a9a8 <get_io_capa+0x20>
    a992:	6859      	ldr	r1, [r3, #4]
    a994:	b141      	cbz	r1, a9a8 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a996:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    a998:	b109      	cbz	r1, a99e <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a99a:	2004      	movs	r0, #4
    a99c:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    a99e:	490d      	ldr	r1, [pc, #52]	; (a9d4 <get_io_capa+0x4c>)
    a9a0:	7809      	ldrb	r1, [r1, #0]
    a9a2:	b909      	cbnz	r1, a9a8 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    a9a4:	2004      	movs	r0, #4
    a9a6:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    a9a8:	490a      	ldr	r1, [pc, #40]	; (a9d4 <get_io_capa+0x4c>)
    a9aa:	7809      	ldrb	r1, [r1, #0]
    a9ac:	b121      	cbz	r1, a9b8 <get_io_capa+0x30>
    a9ae:	b11a      	cbz	r2, a9b8 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    a9b0:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    a9b2:	b109      	cbz	r1, a9b8 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    a9b4:	2001      	movs	r0, #1
    a9b6:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    a9b8:	685b      	ldr	r3, [r3, #4]
    a9ba:	b10b      	cbz	r3, a9c0 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    a9bc:	2002      	movs	r0, #2
    a9be:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    a9c0:	b11a      	cbz	r2, a9ca <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    a9c2:	2000      	movs	r0, #0
    a9c4:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    a9c6:	2003      	movs	r0, #3
    a9c8:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    a9ca:	2003      	movs	r0, #3
}
    a9cc:	4770      	bx	lr
    a9ce:	bf00      	nop
    a9d0:	20002ab0 	.word	0x20002ab0
    a9d4:	20000aac 	.word	0x20000aac

0000a9d8 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a9d8:	2904      	cmp	r1, #4
    a9da:	d811      	bhi.n	aa00 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a9dc:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a9e0:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a9e4:	4313      	orrs	r3, r2
    a9e6:	f013 0f04 	tst.w	r3, #4
    a9ea:	d00b      	beq.n	aa04 <get_pair_method+0x2c>
{
    a9ec:	b510      	push	{r4, lr}
    a9ee:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    a9f0:	f7ff ffca 	bl	a988 <get_io_capa>
    a9f4:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a9f8:	4c03      	ldr	r4, [pc, #12]	; (aa08 <get_pair_method+0x30>)
    a9fa:	4421      	add	r1, r4
    a9fc:	5c08      	ldrb	r0, [r1, r0]
    a9fe:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    aa00:	2000      	movs	r0, #0
    aa02:	4770      	bx	lr
		return JUST_WORKS;
    aa04:	2000      	movs	r0, #0
    aa06:	4770      	bx	lr
    aa08:	000318a8 	.word	0x000318a8

0000aa0c <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    aa0c:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    aa10:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    aa14:	4290      	cmp	r0, r2
    aa16:	bf28      	it	cs
    aa18:	4610      	movcs	r0, r2
    aa1a:	4770      	bx	lr

0000aa1c <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    aa1c:	b430      	push	{r4, r5}
	size_t len = 16;
    aa1e:	2310      	movs	r3, #16

	while (len--) {
    aa20:	e007      	b.n	aa32 <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    aa22:	7803      	ldrb	r3, [r0, #0]
    aa24:	780d      	ldrb	r5, [r1, #0]
    aa26:	406b      	eors	r3, r5
    aa28:	7013      	strb	r3, [r2, #0]
	while (len--) {
    aa2a:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    aa2c:	3201      	adds	r2, #1
    aa2e:	3101      	adds	r1, #1
    aa30:	3001      	adds	r0, #1
	while (len--) {
    aa32:	1e5c      	subs	r4, r3, #1
    aa34:	2b00      	cmp	r3, #0
    aa36:	d1f4      	bne.n	aa22 <xor_128+0x6>
	}
}
    aa38:	bc30      	pop	{r4, r5}
    aa3a:	4770      	bx	lr

0000aa3c <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    aa3c:	2904      	cmp	r1, #4
    aa3e:	d819      	bhi.n	aa74 <legacy_get_pair_method+0x38>
{
    aa40:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    aa42:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    aa46:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    aa4a:	4313      	orrs	r3, r2
    aa4c:	f013 0f04 	tst.w	r3, #4
    aa50:	d012      	beq.n	aa78 <legacy_get_pair_method+0x3c>
    aa52:	460c      	mov	r4, r1
    aa54:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    aa56:	f7ff ff97 	bl	a988 <get_io_capa>
    aa5a:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    aa5e:	4c08      	ldr	r4, [pc, #32]	; (aa80 <legacy_get_pair_method+0x44>)
    aa60:	4421      	add	r1, r4
    aa62:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    aa64:	2804      	cmp	r0, #4
    aa66:	d000      	beq.n	aa6a <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    aa68:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aa6a:	682b      	ldr	r3, [r5, #0]
    aa6c:	78db      	ldrb	r3, [r3, #3]
    aa6e:	b92b      	cbnz	r3, aa7c <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    aa70:	2002      	movs	r0, #2
    aa72:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    aa74:	2000      	movs	r0, #0
    aa76:	4770      	bx	lr
		return JUST_WORKS;
    aa78:	2000      	movs	r0, #0
    aa7a:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    aa7c:	2001      	movs	r0, #1
    aa7e:	e7f3      	b.n	aa68 <legacy_get_pair_method+0x2c>
    aa80:	0003188c 	.word	0x0003188c

0000aa84 <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    aa84:	b510      	push	{r4, lr}
	if (sc_supported) {
    aa86:	4b09      	ldr	r3, [pc, #36]	; (aaac <get_auth+0x28>)
    aa88:	781b      	ldrb	r3, [r3, #0]
    aa8a:	b143      	cbz	r3, aa9e <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    aa8c:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    aa90:	f7ff ff7a 	bl	a988 <get_io_capa>
    aa94:	2803      	cmp	r0, #3
    aa96:	d005      	beq.n	aaa4 <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    aa98:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    aa9c:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    aa9e:	f000 0407 	and.w	r4, r0, #7
    aaa2:	e7f5      	b.n	aa90 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    aaa4:	f004 000b 	and.w	r0, r4, #11
    aaa8:	bd10      	pop	{r4, pc}
    aaaa:	bf00      	nop
    aaac:	20000aac 	.word	0x20000aac

0000aab0 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    aab0:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    aab2:	7a43      	ldrb	r3, [r0, #9]
    aab4:	3b01      	subs	r3, #1
    aab6:	2b03      	cmp	r3, #3
    aab8:	d818      	bhi.n	aaec <sec_level_reachable+0x3c>
    aaba:	e8df f003 	tbb	[pc, r3]
    aabe:	0202      	.short	0x0202
    aac0:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    aac2:	2001      	movs	r0, #1
    aac4:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    aac6:	f7ff ff5f 	bl	a988 <get_io_capa>
    aaca:	3803      	subs	r0, #3
    aacc:	bf18      	it	ne
    aace:	2001      	movne	r0, #1
    aad0:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    aad2:	f7ff ff59 	bl	a988 <get_io_capa>
    aad6:	2803      	cmp	r0, #3
    aad8:	d004      	beq.n	aae4 <sec_level_reachable+0x34>
    aada:	4b05      	ldr	r3, [pc, #20]	; (aaf0 <sec_level_reachable+0x40>)
    aadc:	781b      	ldrb	r3, [r3, #0]
    aade:	b91b      	cbnz	r3, aae8 <sec_level_reachable+0x38>
    aae0:	2000      	movs	r0, #0
    aae2:	bd08      	pop	{r3, pc}
    aae4:	2000      	movs	r0, #0
    aae6:	bd08      	pop	{r3, pc}
    aae8:	2001      	movs	r0, #1
    aaea:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    aaec:	2000      	movs	r0, #0
	}
}
    aaee:	bd08      	pop	{r3, pc}
    aaf0:	20000aac 	.word	0x20000aac

0000aaf4 <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    aaf4:	2000      	movs	r0, #0
    aaf6:	b110      	cbz	r0, aafe <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    aaf8:	f06f 000b 	mvn.w	r0, #11
}
    aafc:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    aafe:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ab02:	fb03 f300 	mul.w	r3, r3, r0
    ab06:	4a07      	ldr	r2, [pc, #28]	; (ab24 <bt_smp_accept+0x30>)
    ab08:	58d3      	ldr	r3, [r2, r3]
    ab0a:	b10b      	cbz	r3, ab10 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ab0c:	3001      	adds	r0, #1
    ab0e:	e7f2      	b.n	aaf6 <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    ab10:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ab14:	4a03      	ldr	r2, [pc, #12]	; (ab24 <bt_smp_accept+0x30>)
    ab16:	fb03 2300 	mla	r3, r3, r0, r2
    ab1a:	4a03      	ldr	r2, [pc, #12]	; (ab28 <bt_smp_accept+0x34>)
    ab1c:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    ab1e:	600b      	str	r3, [r1, #0]
		return 0;
    ab20:	4770      	bx	lr
    ab22:	bf00      	nop
    ab24:	200008c4 	.word	0x200008c4
    ab28:	2000bc50 	.word	0x2000bc50

0000ab2c <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    ab2c:	4b04      	ldr	r3, [pc, #16]	; (ab40 <le_sc_supported+0x14>)
    ab2e:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    ab32:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    ab36:	2806      	cmp	r0, #6
    ab38:	bf14      	ite	ne
    ab3a:	2000      	movne	r0, #0
    ab3c:	2001      	moveq	r0, #1
    ab3e:	4770      	bx	lr
    ab40:	2000b980 	.word	0x2000b980

0000ab44 <smp_chan_get>:
{
    ab44:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    ab46:	2106      	movs	r1, #6
    ab48:	f7fd fd18 	bl	857c <bt_l2cap_le_lookup_rx_cid>
}
    ab4c:	bd08      	pop	{r3, pc}

0000ab4e <smp_create_pdu>:
{
    ab4e:	b538      	push	{r3, r4, r5, lr}
    ab50:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    ab52:	2100      	movs	r1, #0
    ab54:	4608      	mov	r0, r1
    ab56:	f7fd fa58 	bl	800a <bt_l2cap_create_pdu>
    ab5a:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    ab5c:	2101      	movs	r1, #1
    ab5e:	3008      	adds	r0, #8
    ab60:	f010 f954 	bl	1ae0c <net_buf_simple_add>
	hdr->code = op;
    ab64:	7005      	strb	r5, [r0, #0]
}
    ab66:	4620      	mov	r0, r4
    ab68:	bd38      	pop	{r3, r4, r5, pc}

0000ab6a <smp_init>:
{
    ab6a:	b510      	push	{r4, lr}
    ab6c:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    ab6e:	22e0      	movs	r2, #224	; 0xe0
    ab70:	2100      	movs	r1, #0
    ab72:	309c      	adds	r0, #156	; 0x9c
    ab74:	f01f fefc 	bl	2a970 <memset>
	if (bt_rand(smp->prnd, 16)) {
    ab78:	2110      	movs	r1, #16
    ab7a:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    ab7e:	f006 fdcf 	bl	11720 <bt_rand>
    ab82:	b110      	cbz	r0, ab8a <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    ab84:	2308      	movs	r3, #8
}
    ab86:	4618      	mov	r0, r3
    ab88:	bd10      	pop	{r4, pc}
    ab8a:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    ab8c:	349c      	adds	r4, #156	; 0x9c
    ab8e:	f3bf 8f5b 	dmb	ish
    ab92:	e854 2f00 	ldrex	r2, [r4]
    ab96:	f042 0220 	orr.w	r2, r2, #32
    ab9a:	e844 2100 	strex	r1, r2, [r4]
    ab9e:	2900      	cmp	r1, #0
    aba0:	d1f7      	bne.n	ab92 <smp_init+0x28>
    aba2:	f3bf 8f5b 	dmb	ish
	return 0;
    aba6:	e7ee      	b.n	ab86 <smp_init+0x1c>

0000aba8 <display_passkey>:
{
    aba8:	b538      	push	{r3, r4, r5, lr}
    abaa:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    abac:	2104      	movs	r1, #4
    abae:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    abb2:	f006 fdb5 	bl	11720 <bt_rand>
    abb6:	b108      	cbz	r0, abbc <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    abb8:	2008      	movs	r0, #8
}
    abba:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    abbc:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    abc0:	4909      	ldr	r1, [pc, #36]	; (abe8 <display_passkey+0x40>)
    abc2:	fba1 2103 	umull	r2, r1, r1, r3
    abc6:	0c89      	lsrs	r1, r1, #18
    abc8:	4a08      	ldr	r2, [pc, #32]	; (abec <display_passkey+0x44>)
    abca:	fb02 3111 	mls	r1, r2, r1, r3
    abce:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    abd2:	2500      	movs	r5, #0
    abd4:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    abd8:	4b05      	ldr	r3, [pc, #20]	; (abf0 <display_passkey+0x48>)
    abda:	681b      	ldr	r3, [r3, #0]
    abdc:	681b      	ldr	r3, [r3, #0]
    abde:	6820      	ldr	r0, [r4, #0]
    abe0:	4798      	blx	r3
	return 0;
    abe2:	4628      	mov	r0, r5
    abe4:	bd38      	pop	{r3, r4, r5, pc}
    abe6:	bf00      	nop
    abe8:	431bde83 	.word	0x431bde83
    abec:	000f4240 	.word	0x000f4240
    abf0:	20002ab0 	.word	0x20002ab0

0000abf4 <smp_send>:
{
    abf4:	b510      	push	{r4, lr}
    abf6:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    abf8:	4613      	mov	r3, r2
    abfa:	460a      	mov	r2, r1
    abfc:	2106      	movs	r1, #6
    abfe:	6800      	ldr	r0, [r0, #0]
    ac00:	f7fd fa9b 	bl	813a <bt_l2cap_send_cb>
    ac04:	f247 5230 	movw	r2, #30000	; 0x7530
    ac08:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    ac0c:	4801      	ldr	r0, [pc, #4]	; (ac14 <smp_send+0x20>)
    ac0e:	f01f fa45 	bl	2a09c <k_delayed_work_submit_to_queue>
    ac12:	bd10      	pop	{r4, pc}
    ac14:	20002c78 	.word	0x20002c78

0000ac18 <sc_smp_send_dhkey_check>:
{
    ac18:	b570      	push	{r4, r5, r6, lr}
    ac1a:	4604      	mov	r4, r0
    ac1c:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    ac1e:	2210      	movs	r2, #16
    ac20:	210d      	movs	r1, #13
    ac22:	6800      	ldr	r0, [r0, #0]
    ac24:	f7ff ff93 	bl	ab4e <smp_create_pdu>
	if (!buf) {
    ac28:	b178      	cbz	r0, ac4a <sc_smp_send_dhkey_check+0x32>
    ac2a:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    ac2c:	2110      	movs	r1, #16
    ac2e:	3008      	adds	r0, #8
    ac30:	f010 f8ec 	bl	1ae0c <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    ac34:	2210      	movs	r2, #16
    ac36:	4631      	mov	r1, r6
    ac38:	f7f5 fb42 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    ac3c:	2200      	movs	r2, #0
    ac3e:	4629      	mov	r1, r5
    ac40:	4620      	mov	r0, r4
    ac42:	f7ff ffd7 	bl	abf4 <smp_send>
	return 0;
    ac46:	2000      	movs	r0, #0
    ac48:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac4a:	2008      	movs	r0, #8
}
    ac4c:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ac50 <sc_send_public_key>:
{
    ac50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    ac52:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    ac54:	2240      	movs	r2, #64	; 0x40
    ac56:	210c      	movs	r1, #12
    ac58:	6800      	ldr	r0, [r0, #0]
    ac5a:	f7ff ff78 	bl	ab4e <smp_create_pdu>
	if (!req_buf) {
    ac5e:	b1b0      	cbz	r0, ac8e <sc_send_public_key+0x3e>
    ac60:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    ac62:	2140      	movs	r1, #64	; 0x40
    ac64:	3008      	adds	r0, #8
    ac66:	f010 f8d1 	bl	1ae0c <net_buf_simple_add>
    ac6a:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    ac6c:	4e09      	ldr	r6, [pc, #36]	; (ac94 <sc_send_public_key+0x44>)
    ac6e:	2220      	movs	r2, #32
    ac70:	4631      	mov	r1, r6
    ac72:	f7f5 fb25 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    ac76:	2220      	movs	r2, #32
    ac78:	18b1      	adds	r1, r6, r2
    ac7a:	18b8      	adds	r0, r7, r2
    ac7c:	f7f5 fb20 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    ac80:	2200      	movs	r2, #0
    ac82:	4629      	mov	r1, r5
    ac84:	4620      	mov	r0, r4
    ac86:	f7ff ffb5 	bl	abf4 <smp_send>
	return 0;
    ac8a:	2000      	movs	r0, #0
    ac8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac8e:	2008      	movs	r0, #8
}
    ac90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    ac92:	bf00      	nop
    ac94:	20000a6c 	.word	0x20000a6c

0000ac98 <send_pairing_rsp>:
{
    ac98:	b538      	push	{r3, r4, r5, lr}
    ac9a:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    ac9c:	2206      	movs	r2, #6
    ac9e:	2102      	movs	r1, #2
    aca0:	6800      	ldr	r0, [r0, #0]
    aca2:	f7ff ff54 	bl	ab4e <smp_create_pdu>
	if (!rsp_buf) {
    aca6:	b180      	cbz	r0, acca <send_pairing_rsp+0x32>
    aca8:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    acaa:	2106      	movs	r1, #6
    acac:	3008      	adds	r0, #8
    acae:	f010 f8ad 	bl	1ae0c <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    acb2:	2206      	movs	r2, #6
    acb4:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    acb8:	f7f5 fb02 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    acbc:	2200      	movs	r2, #0
    acbe:	4629      	mov	r1, r5
    acc0:	4620      	mov	r0, r4
    acc2:	f7ff ff97 	bl	abf4 <smp_send>
	return 0;
    acc6:	2000      	movs	r0, #0
    acc8:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    acca:	2008      	movs	r0, #8
}
    accc:	bd38      	pop	{r3, r4, r5, pc}

0000acce <smp_send_pairing_random>:
{
    acce:	b538      	push	{r3, r4, r5, lr}
    acd0:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    acd2:	2210      	movs	r2, #16
    acd4:	2104      	movs	r1, #4
    acd6:	6800      	ldr	r0, [r0, #0]
    acd8:	f7ff ff39 	bl	ab4e <smp_create_pdu>
	if (!rsp_buf) {
    acdc:	b180      	cbz	r0, ad00 <smp_send_pairing_random+0x32>
    acde:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    ace0:	2110      	movs	r1, #16
    ace2:	3008      	adds	r0, #8
    ace4:	f010 f892 	bl	1ae0c <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    ace8:	2210      	movs	r2, #16
    acea:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    acee:	f7f5 fae7 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    acf2:	2200      	movs	r2, #0
    acf4:	4629      	mov	r1, r5
    acf6:	4620      	mov	r0, r4
    acf8:	f7ff ff7c 	bl	abf4 <smp_send>
	return 0;
    acfc:	2000      	movs	r0, #0
    acfe:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ad00:	2008      	movs	r0, #8
}
    ad02:	bd38      	pop	{r3, r4, r5, pc}

0000ad04 <bt_smp_aes_cmac>:
{
    ad04:	b570      	push	{r4, r5, r6, lr}
    ad06:	b0c2      	sub	sp, #264	; 0x108
    ad08:	460c      	mov	r4, r1
    ad0a:	4615      	mov	r5, r2
    ad0c:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    ad0e:	aa16      	add	r2, sp, #88	; 0x58
    ad10:	4601      	mov	r1, r0
    ad12:	4668      	mov	r0, sp
    ad14:	f7f8 fdcb 	bl	38ae <tc_cmac_setup>
    ad18:	b180      	cbz	r0, ad3c <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    ad1a:	462a      	mov	r2, r5
    ad1c:	4621      	mov	r1, r4
    ad1e:	4668      	mov	r0, sp
    ad20:	f7f8 fdf2 	bl	3908 <tc_cmac_update>
    ad24:	b168      	cbz	r0, ad42 <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    ad26:	4669      	mov	r1, sp
    ad28:	4630      	mov	r0, r6
    ad2a:	f7f8 fe57 	bl	39dc <tc_cmac_final>
    ad2e:	b110      	cbz	r0, ad36 <bt_smp_aes_cmac+0x32>
	return 0;
    ad30:	2000      	movs	r0, #0
}
    ad32:	b042      	add	sp, #264	; 0x108
    ad34:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    ad36:	f06f 0004 	mvn.w	r0, #4
    ad3a:	e7fa      	b.n	ad32 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ad3c:	f06f 0004 	mvn.w	r0, #4
    ad40:	e7f7      	b.n	ad32 <bt_smp_aes_cmac+0x2e>
		return -EIO;
    ad42:	f06f 0004 	mvn.w	r0, #4
    ad46:	e7f4      	b.n	ad32 <bt_smp_aes_cmac+0x2e>

0000ad48 <smp_sign_buf>:
{
    ad48:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    ad4c:	b08b      	sub	sp, #44	; 0x2c
    ad4e:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    ad50:	188f      	adds	r7, r1, r2
    ad52:	683b      	ldr	r3, [r7, #0]
    ad54:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    ad56:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    ad58:	2300      	movs	r3, #0
    ad5a:	e006      	b.n	ad6a <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    ad5c:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ad5e:	1af1      	subs	r1, r6, r3
    ad60:	3901      	subs	r1, #1
    ad62:	5c6c      	ldrb	r4, [r5, r1]
    ad64:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ad66:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    ad68:	3301      	adds	r3, #1
    ad6a:	ea4f 0856 	mov.w	r8, r6, lsr #1
    ad6e:	4543      	cmp	r3, r8
    ad70:	d3f4      	bcc.n	ad5c <smp_sign_buf+0x14>
	src += length - 1;
    ad72:	300f      	adds	r0, #15
    ad74:	2410      	movs	r4, #16
    ad76:	ab05      	add	r3, sp, #20
    ad78:	e004      	b.n	ad84 <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad7a:	7802      	ldrb	r2, [r0, #0]
    ad7c:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    ad7e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ad80:	3801      	subs	r0, #1
    ad82:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ad84:	2c00      	cmp	r4, #0
    ad86:	d1f8      	bne.n	ad7a <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    ad88:	ab01      	add	r3, sp, #4
    ad8a:	4632      	mov	r2, r6
    ad8c:	4629      	mov	r1, r5
    ad8e:	a805      	add	r0, sp, #20
    ad90:	f7ff ffb8 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    ad94:	4681      	mov	r9, r0
    ad96:	bb08      	cbnz	r0, addc <smp_sign_buf+0x94>
    ad98:	4623      	mov	r3, r4
    ad9a:	e009      	b.n	adb0 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    ad9c:	aa01      	add	r2, sp, #4
    ad9e:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ada0:	f1c3 010f 	rsb	r1, r3, #15
    ada4:	f812 e001 	ldrb.w	lr, [r2, r1]
    ada8:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    adac:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    adae:	3301      	adds	r3, #1
    adb0:	2b07      	cmp	r3, #7
    adb2:	d9f3      	bls.n	ad9c <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    adb4:	2204      	movs	r2, #4
    adb6:	a909      	add	r1, sp, #36	; 0x24
    adb8:	a802      	add	r0, sp, #8
    adba:	f7f5 fa81 	bl	2c0 <memcpy>
    adbe:	e006      	b.n	adce <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    adc0:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    adc2:	1b33      	subs	r3, r6, r4
    adc4:	3b01      	subs	r3, #1
    adc6:	5ce9      	ldrb	r1, [r5, r3]
    adc8:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    adca:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    adcc:	3401      	adds	r4, #1
    adce:	45a0      	cmp	r8, r4
    add0:	d8f6      	bhi.n	adc0 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    add2:	220c      	movs	r2, #12
    add4:	a902      	add	r1, sp, #8
    add6:	4638      	mov	r0, r7
    add8:	f7f5 fa72 	bl	2c0 <memcpy>
}
    addc:	4648      	mov	r0, r9
    adde:	b00b      	add	sp, #44	; 0x2c
    ade0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000ade4 <smp_f4>:
{
    ade4:	b5f0      	push	{r4, r5, r6, r7, lr}
    ade6:	b097      	sub	sp, #92	; 0x5c
    ade8:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    adea:	301f      	adds	r0, #31
    adec:	2420      	movs	r4, #32
    adee:	ad01      	add	r5, sp, #4
    adf0:	e004      	b.n	adfc <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    adf2:	7807      	ldrb	r7, [r0, #0]
    adf4:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    adf6:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    adf8:	3801      	subs	r0, #1
    adfa:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    adfc:	2c00      	cmp	r4, #0
    adfe:	d1f8      	bne.n	adf2 <smp_f4+0xe>
	src += length - 1;
    ae00:	311f      	adds	r1, #31
    ae02:	2020      	movs	r0, #32
    ae04:	ac09      	add	r4, sp, #36	; 0x24
    ae06:	e004      	b.n	ae12 <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae08:	780d      	ldrb	r5, [r1, #0]
    ae0a:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    ae0c:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae0e:	3901      	subs	r1, #1
    ae10:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    ae12:	2800      	cmp	r0, #0
    ae14:	d1f8      	bne.n	ae08 <smp_f4+0x24>
	m[64] = z;
    ae16:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    ae1a:	320f      	adds	r2, #15
    ae1c:	2410      	movs	r4, #16
    ae1e:	ab12      	add	r3, sp, #72	; 0x48
    ae20:	e004      	b.n	ae2c <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae22:	7811      	ldrb	r1, [r2, #0]
    ae24:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    ae26:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    ae28:	3a01      	subs	r2, #1
    ae2a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    ae2c:	2c00      	cmp	r4, #0
    ae2e:	d1f8      	bne.n	ae22 <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    ae30:	4633      	mov	r3, r6
    ae32:	2241      	movs	r2, #65	; 0x41
    ae34:	a901      	add	r1, sp, #4
    ae36:	a812      	add	r0, sp, #72	; 0x48
    ae38:	f7ff ff64 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    ae3c:	4605      	mov	r5, r0
    ae3e:	b138      	cbz	r0, ae50 <smp_f4+0x6c>
    ae40:	e008      	b.n	ae54 <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    ae42:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    ae44:	f1c4 030f 	rsb	r3, r4, #15
    ae48:	5cf1      	ldrb	r1, [r6, r3]
    ae4a:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    ae4c:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    ae4e:	3401      	adds	r4, #1
    ae50:	2c07      	cmp	r4, #7
    ae52:	d9f6      	bls.n	ae42 <smp_f4+0x5e>
}
    ae54:	4628      	mov	r0, r5
    ae56:	b017      	add	sp, #92	; 0x5c
    ae58:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000ae5c <sc_smp_check_confirm>:
	switch (smp->method) {
    ae5c:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    ae60:	2b03      	cmp	r3, #3
    ae62:	d827      	bhi.n	aeb4 <sc_smp_check_confirm+0x58>
    ae64:	e8df f003 	tbb	[pc, r3]
    ae68:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    ae6c:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    ae70:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    ae74:	40d3      	lsrs	r3, r2
    ae76:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    ae7a:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ae7e:	b2db      	uxtb	r3, r3
		break;
    ae80:	e000      	b.n	ae84 <sc_smp_check_confirm+0x28>
		r = 0;
    ae82:	2300      	movs	r3, #0
{
    ae84:	b510      	push	{r4, lr}
    ae86:	b086      	sub	sp, #24
    ae88:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    ae8a:	aa02      	add	r2, sp, #8
    ae8c:	9200      	str	r2, [sp, #0]
    ae8e:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    ae92:	490a      	ldr	r1, [pc, #40]	; (aebc <sc_smp_check_confirm+0x60>)
    ae94:	30f3      	adds	r0, #243	; 0xf3
    ae96:	f7ff ffa5 	bl	ade4 <smp_f4>
    ae9a:	b110      	cbz	r0, aea2 <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    ae9c:	2008      	movs	r0, #8
}
    ae9e:	b006      	add	sp, #24
    aea0:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    aea2:	2210      	movs	r2, #16
    aea4:	a902      	add	r1, sp, #8
    aea6:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    aeaa:	f01f fccd 	bl	2a848 <memcmp>
    aeae:	b118      	cbz	r0, aeb8 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    aeb0:	2004      	movs	r0, #4
    aeb2:	e7f4      	b.n	ae9e <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    aeb4:	2008      	movs	r0, #8
    aeb6:	4770      	bx	lr
	return 0;
    aeb8:	2000      	movs	r0, #0
    aeba:	e7f0      	b.n	ae9e <sc_smp_check_confirm+0x42>
    aebc:	20000a6c 	.word	0x20000a6c

0000aec0 <smp_f5>:
{
    aec0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    aec4:	b09b      	sub	sp, #108	; 0x6c
    aec6:	4604      	mov	r4, r0
    aec8:	460e      	mov	r6, r1
    aeca:	4615      	mov	r5, r2
    aecc:	461f      	mov	r7, r3
    aece:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    aed2:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    aed6:	2235      	movs	r2, #53	; 0x35
    aed8:	2100      	movs	r1, #0
    aeda:	a80c      	add	r0, sp, #48	; 0x30
    aedc:	f01f fd48 	bl	2a970 <memset>
    aee0:	2362      	movs	r3, #98	; 0x62
    aee2:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    aee6:	2374      	movs	r3, #116	; 0x74
    aee8:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    aeec:	236c      	movs	r3, #108	; 0x6c
    aeee:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    aef2:	2365      	movs	r3, #101	; 0x65
    aef4:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    aef8:	2301      	movs	r3, #1
    aefa:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    aefe:	f104 001f 	add.w	r0, r4, #31
    af02:	2320      	movs	r3, #32
    af04:	466a      	mov	r2, sp
    af06:	e004      	b.n	af12 <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af08:	7801      	ldrb	r1, [r0, #0]
    af0a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af0c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af0e:	3801      	subs	r0, #1
    af10:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af12:	2b00      	cmp	r3, #0
    af14:	d1f8      	bne.n	af08 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    af16:	ab08      	add	r3, sp, #32
    af18:	2220      	movs	r2, #32
    af1a:	4669      	mov	r1, sp
    af1c:	4838      	ldr	r0, [pc, #224]	; (b000 <smp_f5+0x140>)
    af1e:	f7ff fef1 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    af22:	4686      	mov	lr, r0
    af24:	2800      	cmp	r0, #0
    af26:	d166      	bne.n	aff6 <smp_f5+0x136>
	src += length - 1;
    af28:	360f      	adds	r6, #15
    af2a:	2310      	movs	r3, #16
    af2c:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    af30:	e004      	b.n	af3c <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af32:	7831      	ldrb	r1, [r6, #0]
    af34:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af36:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af38:	3e01      	subs	r6, #1
    af3a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af3c:	2b00      	cmp	r3, #0
    af3e:	d1f8      	bne.n	af32 <smp_f5+0x72>
	src += length - 1;
    af40:	350f      	adds	r5, #15
    af42:	2310      	movs	r3, #16
    af44:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    af48:	e004      	b.n	af54 <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af4a:	7829      	ldrb	r1, [r5, #0]
    af4c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af4e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af50:	3d01      	subs	r5, #1
    af52:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af54:	2b00      	cmp	r3, #0
    af56:	d1f8      	bne.n	af4a <smp_f5+0x8a>
	m[37] = a1->type;
    af58:	f817 3b06 	ldrb.w	r3, [r7], #6
    af5c:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    af60:	2306      	movs	r3, #6
    af62:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    af66:	e004      	b.n	af72 <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af68:	7839      	ldrb	r1, [r7, #0]
    af6a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af6c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af6e:	3f01      	subs	r7, #1
    af70:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af72:	2b00      	cmp	r3, #0
    af74:	d1f8      	bne.n	af68 <smp_f5+0xa8>
	m[44] = a2->type;
    af76:	9b22      	ldr	r3, [sp, #136]	; 0x88
    af78:	f813 2b06 	ldrb.w	r2, [r3], #6
    af7c:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    af80:	2406      	movs	r4, #6
    af82:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    af86:	e004      	b.n	af92 <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    af88:	7819      	ldrb	r1, [r3, #0]
    af8a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    af8c:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    af8e:	3b01      	subs	r3, #1
    af90:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    af92:	2c00      	cmp	r4, #0
    af94:	d1f8      	bne.n	af88 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    af96:	4643      	mov	r3, r8
    af98:	2235      	movs	r2, #53	; 0x35
    af9a:	a90c      	add	r1, sp, #48	; 0x30
    af9c:	a808      	add	r0, sp, #32
    af9e:	f7ff feb1 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    afa2:	4686      	mov	lr, r0
    afa4:	bb38      	cbnz	r0, aff6 <smp_f5+0x136>
    afa6:	4623      	mov	r3, r4
    afa8:	e00a      	b.n	afc0 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    afaa:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    afae:	f1c3 020f 	rsb	r2, r3, #15
    afb2:	f818 0002 	ldrb.w	r0, [r8, r2]
    afb6:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    afba:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    afbe:	3301      	adds	r3, #1
    afc0:	2b07      	cmp	r3, #7
    afc2:	d9f2      	bls.n	afaa <smp_f5+0xea>
	m[0] = 0x01;
    afc4:	a91a      	add	r1, sp, #104	; 0x68
    afc6:	2301      	movs	r3, #1
    afc8:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    afcc:	464b      	mov	r3, r9
    afce:	2235      	movs	r2, #53	; 0x35
    afd0:	a808      	add	r0, sp, #32
    afd2:	f7ff fe97 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    afd6:	4686      	mov	lr, r0
    afd8:	b158      	cbz	r0, aff2 <smp_f5+0x132>
    afda:	e00c      	b.n	aff6 <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    afdc:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    afe0:	f1c4 030f 	rsb	r3, r4, #15
    afe4:	f819 1003 	ldrb.w	r1, [r9, r3]
    afe8:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    afec:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    aff0:	3401      	adds	r4, #1
    aff2:	2c07      	cmp	r4, #7
    aff4:	d9f2      	bls.n	afdc <smp_f5+0x11c>
}
    aff6:	4670      	mov	r0, lr
    aff8:	b01b      	add	sp, #108	; 0x6c
    affa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    affe:	bf00      	nop
    b000:	000318c4 	.word	0x000318c4

0000b004 <smp_f6>:
{
    b004:	b5f0      	push	{r4, r5, r6, r7, lr}
    b006:	b097      	sub	sp, #92	; 0x5c
    b008:	4604      	mov	r4, r0
    b00a:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    b00c:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    b00e:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    b010:	310f      	adds	r1, #15
    b012:	2010      	movs	r0, #16
    b014:	f10d 0e04 	add.w	lr, sp, #4
    b018:	e007      	b.n	b02a <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b01a:	f891 c000 	ldrb.w	ip, [r1]
    b01e:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    b022:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b024:	3901      	subs	r1, #1
    b026:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    b02a:	2800      	cmp	r0, #0
    b02c:	d1f5      	bne.n	b01a <smp_f6+0x16>
	src += length - 1;
    b02e:	320f      	adds	r2, #15
    b030:	2110      	movs	r1, #16
    b032:	a805      	add	r0, sp, #20
    b034:	e006      	b.n	b044 <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b036:	f892 e000 	ldrb.w	lr, [r2]
    b03a:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    b03e:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b040:	3a01      	subs	r2, #1
    b042:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b044:	2900      	cmp	r1, #0
    b046:	d1f6      	bne.n	b036 <smp_f6+0x32>
	src += length - 1;
    b048:	330f      	adds	r3, #15
    b04a:	2210      	movs	r2, #16
    b04c:	a909      	add	r1, sp, #36	; 0x24
    b04e:	e004      	b.n	b05a <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b050:	7818      	ldrb	r0, [r3, #0]
    b052:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b054:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b056:	3b01      	subs	r3, #1
    b058:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b05a:	2a00      	cmp	r2, #0
    b05c:	d1f8      	bne.n	b050 <smp_f6+0x4c>
	src += length - 1;
    b05e:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    b060:	3302      	adds	r3, #2
    b062:	2203      	movs	r2, #3
    b064:	a90d      	add	r1, sp, #52	; 0x34
    b066:	e004      	b.n	b072 <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b068:	7818      	ldrb	r0, [r3, #0]
    b06a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b06c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b06e:	3b01      	subs	r3, #1
    b070:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b072:	2a00      	cmp	r2, #0
    b074:	d1f8      	bne.n	b068 <smp_f6+0x64>
	m[51] = a1->type;
    b076:	4631      	mov	r1, r6
    b078:	f811 3b01 	ldrb.w	r3, [r1], #1
    b07c:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    b080:	2206      	movs	r2, #6
    b082:	a80e      	add	r0, sp, #56	; 0x38
    b084:	f7f5 f91c 	bl	2c0 <memcpy>
	src += length - 1;
    b088:	3606      	adds	r6, #6
    b08a:	2306      	movs	r3, #6
    b08c:	aa0e      	add	r2, sp, #56	; 0x38
    b08e:	e004      	b.n	b09a <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b090:	7831      	ldrb	r1, [r6, #0]
    b092:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b094:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b096:	3e01      	subs	r6, #1
    b098:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b09a:	2b00      	cmp	r3, #0
    b09c:	d1f8      	bne.n	b090 <smp_f6+0x8c>
	m[58] = a2->type;
    b09e:	4629      	mov	r1, r5
    b0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
    b0a4:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    b0a8:	2206      	movs	r2, #6
    b0aa:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    b0ae:	f7f5 f907 	bl	2c0 <memcpy>
	src += length - 1;
    b0b2:	3506      	adds	r5, #6
    b0b4:	2306      	movs	r3, #6
    b0b6:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    b0ba:	e004      	b.n	b0c6 <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0bc:	7829      	ldrb	r1, [r5, #0]
    b0be:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    b0c0:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0c2:	3d01      	subs	r5, #1
    b0c4:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    b0c6:	2b00      	cmp	r3, #0
    b0c8:	d1f8      	bne.n	b0bc <smp_f6+0xb8>
	src += length - 1;
    b0ca:	f104 000f 	add.w	r0, r4, #15
    b0ce:	2410      	movs	r4, #16
    b0d0:	ab12      	add	r3, sp, #72	; 0x48
    b0d2:	e004      	b.n	b0de <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0d4:	7802      	ldrb	r2, [r0, #0]
    b0d6:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    b0d8:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b0da:	3801      	subs	r0, #1
    b0dc:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    b0de:	2c00      	cmp	r4, #0
    b0e0:	d1f8      	bne.n	b0d4 <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    b0e2:	463b      	mov	r3, r7
    b0e4:	2241      	movs	r2, #65	; 0x41
    b0e6:	a901      	add	r1, sp, #4
    b0e8:	a812      	add	r0, sp, #72	; 0x48
    b0ea:	f7ff fe0b 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    b0ee:	4605      	mov	r5, r0
    b0f0:	b138      	cbz	r0, b102 <smp_f6+0xfe>
    b0f2:	e008      	b.n	b106 <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    b0f4:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    b0f6:	f1c4 030f 	rsb	r3, r4, #15
    b0fa:	5cf9      	ldrb	r1, [r7, r3]
    b0fc:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    b0fe:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    b100:	3401      	adds	r4, #1
    b102:	2c07      	cmp	r4, #7
    b104:	d9f6      	bls.n	b0f4 <smp_f6+0xf0>
}
    b106:	4628      	mov	r0, r5
    b108:	b017      	add	sp, #92	; 0x5c
    b10a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000b10c <compute_and_send_master_dhcheck>:
{
    b10c:	b5f0      	push	{r4, r5, r6, r7, lr}
    b10e:	b08d      	sub	sp, #52	; 0x34
    b110:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b112:	2210      	movs	r2, #16
    b114:	2100      	movs	r1, #0
    b116:	eb0d 0002 	add.w	r0, sp, r2
    b11a:	f01f fc29 	bl	2a970 <memset>
	switch (smp->method) {
    b11e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b122:	2b03      	cmp	r3, #3
    b124:	d84a      	bhi.n	b1bc <compute_and_send_master_dhcheck+0xb0>
    b126:	e8df f003 	tbb	[pc, r3]
    b12a:	0208      	.short	0x0208
    b12c:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b12e:	2204      	movs	r2, #4
    b130:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b134:	a804      	add	r0, sp, #16
    b136:	f7f5 f8c3 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b13a:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    b13e:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    b142:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b144:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b148:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b14c:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    b150:	9102      	str	r1, [sp, #8]
    b152:	9501      	str	r5, [sp, #4]
    b154:	9200      	str	r2, [sp, #0]
    b156:	334f      	adds	r3, #79	; 0x4f
    b158:	463a      	mov	r2, r7
    b15a:	4631      	mov	r1, r6
    b15c:	f204 1033 	addw	r0, r4, #307	; 0x133
    b160:	f7ff feae 	bl	aec0 <smp_f5>
    b164:	b110      	cbz	r0, b16c <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b166:	2008      	movs	r0, #8
}
    b168:	b00d      	add	sp, #52	; 0x34
    b16a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b16c:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b170:	6823      	ldr	r3, [r4, #0]
    b172:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    b176:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    b178:	a808      	add	r0, sp, #32
    b17a:	9003      	str	r0, [sp, #12]
    b17c:	9302      	str	r3, [sp, #8]
    b17e:	9101      	str	r1, [sp, #4]
    b180:	9200      	str	r2, [sp, #0]
    b182:	ab04      	add	r3, sp, #16
    b184:	463a      	mov	r2, r7
    b186:	4631      	mov	r1, r6
    b188:	4628      	mov	r0, r5
    b18a:	f7ff ff3b 	bl	b004 <smp_f6>
    b18e:	b108      	cbz	r0, b194 <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b190:	2008      	movs	r0, #8
    b192:	e7e9      	b.n	b168 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b194:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b198:	f3bf 8f5b 	dmb	ish
    b19c:	e853 2f00 	ldrex	r2, [r3]
    b1a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b1a4:	e843 2100 	strex	r1, r2, [r3]
    b1a8:	2900      	cmp	r1, #0
    b1aa:	d1f7      	bne.n	b19c <compute_and_send_master_dhcheck+0x90>
    b1ac:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    b1b0:	a908      	add	r1, sp, #32
    b1b2:	4620      	mov	r0, r4
    b1b4:	f7ff fd30 	bl	ac18 <sc_smp_send_dhkey_check>
	return 0;
    b1b8:	2000      	movs	r0, #0
    b1ba:	e7d5      	b.n	b168 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b1bc:	2008      	movs	r0, #8
    b1be:	e7d3      	b.n	b168 <compute_and_send_master_dhcheck+0x5c>

0000b1c0 <compute_and_check_and_send_slave_dhcheck>:
{
    b1c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    b1c2:	b091      	sub	sp, #68	; 0x44
    b1c4:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    b1c6:	2210      	movs	r2, #16
    b1c8:	2100      	movs	r1, #0
    b1ca:	eb0d 0002 	add.w	r0, sp, r2
    b1ce:	f01f fbcf 	bl	2a970 <memset>
	switch (smp->method) {
    b1d2:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b1d6:	2b03      	cmp	r3, #3
    b1d8:	d866      	bhi.n	b2a8 <compute_and_check_and_send_slave_dhcheck+0xe8>
    b1da:	e8df f003 	tbb	[pc, r3]
    b1de:	0208      	.short	0x0208
    b1e0:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b1e2:	2204      	movs	r2, #4
    b1e4:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    b1e8:	a804      	add	r0, sp, #16
    b1ea:	f7f5 f869 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b1ee:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    b1f2:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    b1f6:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    b1f8:	f103 0256 	add.w	r2, r3, #86	; 0x56
    b1fc:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    b200:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    b204:	9102      	str	r1, [sp, #8]
    b206:	9501      	str	r5, [sp, #4]
    b208:	9200      	str	r2, [sp, #0]
    b20a:	334f      	adds	r3, #79	; 0x4f
    b20c:	463a      	mov	r2, r7
    b20e:	4631      	mov	r1, r6
    b210:	f204 1033 	addw	r0, r4, #307	; 0x133
    b214:	f7ff fe54 	bl	aec0 <smp_f5>
    b218:	b110      	cbz	r0, b220 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    b21a:	2008      	movs	r0, #8
}
    b21c:	b011      	add	sp, #68	; 0x44
    b21e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b220:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    b224:	6823      	ldr	r3, [r4, #0]
    b226:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    b22a:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    b22c:	a808      	add	r0, sp, #32
    b22e:	9003      	str	r0, [sp, #12]
    b230:	9302      	str	r3, [sp, #8]
    b232:	9101      	str	r1, [sp, #4]
    b234:	9200      	str	r2, [sp, #0]
    b236:	ab04      	add	r3, sp, #16
    b238:	4632      	mov	r2, r6
    b23a:	4639      	mov	r1, r7
    b23c:	4628      	mov	r0, r5
    b23e:	f7ff fee1 	bl	b004 <smp_f6>
    b242:	b108      	cbz	r0, b248 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    b244:	2008      	movs	r0, #8
    b246:	e7e9      	b.n	b21c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b248:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    b24c:	6823      	ldr	r3, [r4, #0]
    b24e:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    b252:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    b254:	a80c      	add	r0, sp, #48	; 0x30
    b256:	9003      	str	r0, [sp, #12]
    b258:	9302      	str	r3, [sp, #8]
    b25a:	9101      	str	r1, [sp, #4]
    b25c:	9200      	str	r2, [sp, #0]
    b25e:	ab04      	add	r3, sp, #16
    b260:	463a      	mov	r2, r7
    b262:	4631      	mov	r1, r6
    b264:	4628      	mov	r0, r5
    b266:	f7ff fecd 	bl	b004 <smp_f6>
    b26a:	b108      	cbz	r0, b270 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    b26c:	2008      	movs	r0, #8
    b26e:	e7d5      	b.n	b21c <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    b270:	2210      	movs	r2, #16
    b272:	a90c      	add	r1, sp, #48	; 0x30
    b274:	f204 1053 	addw	r0, r4, #339	; 0x153
    b278:	f01f fae6 	bl	2a848 <memcmp>
    b27c:	b108      	cbz	r0, b282 <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b27e:	200b      	movs	r0, #11
    b280:	e7cc      	b.n	b21c <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    b282:	a908      	add	r1, sp, #32
    b284:	4620      	mov	r0, r4
    b286:	f7ff fcc7 	bl	ac18 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b28a:	34a0      	adds	r4, #160	; 0xa0
    b28c:	f3bf 8f5b 	dmb	ish
    b290:	e854 3f00 	ldrex	r3, [r4]
    b294:	f043 0302 	orr.w	r3, r3, #2
    b298:	e844 3200 	strex	r2, r3, [r4]
    b29c:	2a00      	cmp	r2, #0
    b29e:	d1f7      	bne.n	b290 <compute_and_check_and_send_slave_dhcheck+0xd0>
    b2a0:	f3bf 8f5b 	dmb	ish
	return 0;
    b2a4:	2000      	movs	r0, #0
    b2a6:	e7b9      	b.n	b21c <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    b2a8:	2008      	movs	r0, #8
    b2aa:	e7b7      	b.n	b21c <compute_and_check_and_send_slave_dhcheck+0x5c>

0000b2ac <smp_g2>:
{
    b2ac:	b5f0      	push	{r4, r5, r6, r7, lr}
    b2ae:	b099      	sub	sp, #100	; 0x64
    b2b0:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    b2b2:	301f      	adds	r0, #31
    b2b4:	2520      	movs	r5, #32
    b2b6:	ae04      	add	r6, sp, #16
    b2b8:	e004      	b.n	b2c4 <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2ba:	7807      	ldrb	r7, [r0, #0]
    b2bc:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    b2be:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2c0:	3801      	subs	r0, #1
    b2c2:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    b2c4:	2d00      	cmp	r5, #0
    b2c6:	d1f8      	bne.n	b2ba <smp_g2+0xe>
	src += length - 1;
    b2c8:	311f      	adds	r1, #31
    b2ca:	2020      	movs	r0, #32
    b2cc:	ad0c      	add	r5, sp, #48	; 0x30
    b2ce:	e004      	b.n	b2da <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2d0:	780e      	ldrb	r6, [r1, #0]
    b2d2:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    b2d4:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2d6:	3901      	subs	r1, #1
    b2d8:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    b2da:	2800      	cmp	r0, #0
    b2dc:	d1f8      	bne.n	b2d0 <smp_g2+0x24>
	src += length - 1;
    b2de:	330f      	adds	r3, #15
    b2e0:	2110      	movs	r1, #16
    b2e2:	a814      	add	r0, sp, #80	; 0x50
    b2e4:	e004      	b.n	b2f0 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2e6:	781d      	ldrb	r5, [r3, #0]
    b2e8:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    b2ea:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2ec:	3b01      	subs	r3, #1
    b2ee:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    b2f0:	2900      	cmp	r1, #0
    b2f2:	d1f8      	bne.n	b2e6 <smp_g2+0x3a>
	src += length - 1;
    b2f4:	320f      	adds	r2, #15
    b2f6:	2310      	movs	r3, #16
    b2f8:	4669      	mov	r1, sp
    b2fa:	e004      	b.n	b306 <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    b2fc:	7810      	ldrb	r0, [r2, #0]
    b2fe:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    b300:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    b302:	3a01      	subs	r2, #1
    b304:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    b306:	2b00      	cmp	r3, #0
    b308:	d1f8      	bne.n	b2fc <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    b30a:	466b      	mov	r3, sp
    b30c:	2250      	movs	r2, #80	; 0x50
    b30e:	a904      	add	r1, sp, #16
    b310:	4668      	mov	r0, sp
    b312:	f7ff fcf7 	bl	ad04 <bt_smp_aes_cmac>
	if (err) {
    b316:	4605      	mov	r5, r0
    b318:	b110      	cbz	r0, b320 <smp_g2+0x74>
}
    b31a:	4628      	mov	r0, r5
    b31c:	b019      	add	sp, #100	; 0x64
    b31e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    b320:	2204      	movs	r2, #4
    b322:	a903      	add	r1, sp, #12
    b324:	4620      	mov	r0, r4
    b326:	f7f4 ffcb 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    b32a:	6822      	ldr	r2, [r4, #0]
    b32c:	0a13      	lsrs	r3, r2, #8
    b32e:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    b332:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    b336:	0211      	lsls	r1, r2, #8
    b338:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    b33c:	430b      	orrs	r3, r1
    b33e:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    b342:	4a04      	ldr	r2, [pc, #16]	; (b354 <smp_g2+0xa8>)
    b344:	fba2 1203 	umull	r1, r2, r2, r3
    b348:	0c92      	lsrs	r2, r2, #18
    b34a:	4903      	ldr	r1, [pc, #12]	; (b358 <smp_g2+0xac>)
    b34c:	fb01 3212 	mls	r2, r1, r2, r3
    b350:	6022      	str	r2, [r4, #0]
	return 0;
    b352:	e7e2      	b.n	b31a <smp_g2+0x6e>
    b354:	431bde83 	.word	0x431bde83
    b358:	000f4240 	.word	0x000f4240

0000b35c <smp_send_pairing_confirm>:
{
    b35c:	b570      	push	{r4, r5, r6, lr}
    b35e:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    b360:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    b362:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    b366:	2b03      	cmp	r3, #3
    b368:	d83f      	bhi.n	b3ea <smp_send_pairing_confirm+0x8e>
    b36a:	e8df f003 	tbb	[pc, r3]
    b36e:	020d      	.short	0x020d
    b370:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    b372:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    b376:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    b37a:	40dd      	lsrs	r5, r3
    b37c:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    b380:	f065 057f 	orn	r5, r5, #127	; 0x7f
    b384:	b2ed      	uxtb	r5, r5
		break;
    b386:	e000      	b.n	b38a <smp_send_pairing_confirm+0x2e>
		r = 0;
    b388:	2500      	movs	r5, #0
    b38a:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b38c:	2210      	movs	r2, #16
    b38e:	2103      	movs	r1, #3
    b390:	4630      	mov	r0, r6
    b392:	f7ff fbdc 	bl	ab4e <smp_create_pdu>
	if (!buf) {
    b396:	4606      	mov	r6, r0
    b398:	b348      	cbz	r0, b3ee <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    b39a:	2110      	movs	r1, #16
    b39c:	3008      	adds	r0, #8
    b39e:	f00f fd35 	bl	1ae0c <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    b3a2:	9000      	str	r0, [sp, #0]
    b3a4:	462b      	mov	r3, r5
    b3a6:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b3aa:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b3ae:	4811      	ldr	r0, [pc, #68]	; (b3f4 <smp_send_pairing_confirm+0x98>)
    b3b0:	f7ff fd18 	bl	ade4 <smp_f4>
    b3b4:	b120      	cbz	r0, b3c0 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    b3b6:	4630      	mov	r0, r6
    b3b8:	f00f fcdc 	bl	1ad74 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b3bc:	2008      	movs	r0, #8
    b3be:	e017      	b.n	b3f0 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    b3c0:	2200      	movs	r2, #0
    b3c2:	4631      	mov	r1, r6
    b3c4:	4620      	mov	r0, r4
    b3c6:	f7ff fc15 	bl	abf4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b3ca:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b3ce:	f3bf 8f5b 	dmb	ish
    b3d2:	e850 3f00 	ldrex	r3, [r0]
    b3d6:	f023 0301 	bic.w	r3, r3, #1
    b3da:	e840 3200 	strex	r2, r3, [r0]
    b3de:	2a00      	cmp	r2, #0
    b3e0:	d1f7      	bne.n	b3d2 <smp_send_pairing_confirm+0x76>
    b3e2:	f3bf 8f5b 	dmb	ish
	return 0;
    b3e6:	2000      	movs	r0, #0
    b3e8:	e002      	b.n	b3f0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b3ea:	2008      	movs	r0, #8
    b3ec:	e000      	b.n	b3f0 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    b3ee:	2008      	movs	r0, #8
}
    b3f0:	b002      	add	sp, #8
    b3f2:	bd70      	pop	{r4, r5, r6, pc}
    b3f4:	20000a6c 	.word	0x20000a6c

0000b3f8 <smp_c1>:
{
    b3f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3fc:	b088      	sub	sp, #32
    b3fe:	4604      	mov	r4, r0
    b400:	460f      	mov	r7, r1
    b402:	4611      	mov	r1, r2
    b404:	4698      	mov	r8, r3
    b406:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    b408:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    b40a:	782b      	ldrb	r3, [r5, #0]
    b40c:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    b410:	7833      	ldrb	r3, [r6, #0]
    b412:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    b416:	2207      	movs	r2, #7
    b418:	f10d 0012 	add.w	r0, sp, #18
    b41c:	f7f4 ff50 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    b420:	2207      	movs	r2, #7
    b422:	4641      	mov	r1, r8
    b424:	f10d 0019 	add.w	r0, sp, #25
    b428:	f7f4 ff4a 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    b42c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b42e:	a904      	add	r1, sp, #16
    b430:	4638      	mov	r0, r7
    b432:	f7ff faf3 	bl	aa1c <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    b436:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b438:	4611      	mov	r1, r2
    b43a:	4620      	mov	r0, r4
    b43c:	f006 f98c 	bl	11758 <bt_encrypt_le>
	if (err) {
    b440:	4603      	mov	r3, r0
    b442:	b118      	cbz	r0, b44c <smp_c1+0x54>
}
    b444:	4618      	mov	r0, r3
    b446:	b008      	add	sp, #32
    b448:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    b44c:	2206      	movs	r2, #6
    b44e:	1c71      	adds	r1, r6, #1
    b450:	4668      	mov	r0, sp
    b452:	f7f4 ff35 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    b456:	2206      	movs	r2, #6
    b458:	1c69      	adds	r1, r5, #1
    b45a:	eb0d 0002 	add.w	r0, sp, r2
    b45e:	f7f4 ff2f 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    b462:	2204      	movs	r2, #4
    b464:	2100      	movs	r1, #0
    b466:	a803      	add	r0, sp, #12
    b468:	f01f fa82 	bl	2a970 <memset>
	xor_128(enc_data, p2, enc_data);
    b46c:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b46e:	4669      	mov	r1, sp
    b470:	4610      	mov	r0, r2
    b472:	f7ff fad3 	bl	aa1c <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    b476:	9a10      	ldr	r2, [sp, #64]	; 0x40
    b478:	4611      	mov	r1, r2
    b47a:	4620      	mov	r0, r4
    b47c:	f006 f96c 	bl	11758 <bt_encrypt_le>
    b480:	4603      	mov	r3, r0
    b482:	e7df      	b.n	b444 <smp_c1+0x4c>

0000b484 <legacy_send_pairing_confirm>:
{
    b484:	b570      	push	{r4, r5, r6, lr}
    b486:	b084      	sub	sp, #16
    b488:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b48a:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    b48c:	2210      	movs	r2, #16
    b48e:	2103      	movs	r1, #3
    b490:	4628      	mov	r0, r5
    b492:	f7ff fb5c 	bl	ab4e <smp_create_pdu>
	if (!buf) {
    b496:	b370      	cbz	r0, b4f6 <legacy_send_pairing_confirm+0x72>
    b498:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    b49a:	2110      	movs	r1, #16
    b49c:	3008      	adds	r0, #8
    b49e:	f00f fcb5 	bl	1ae0c <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    b4a2:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    b4a6:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    b4a8:	9002      	str	r0, [sp, #8]
    b4aa:	9501      	str	r5, [sp, #4]
    b4ac:	9300      	str	r3, [sp, #0]
    b4ae:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    b4b2:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    b4b6:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b4ba:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    b4be:	f7ff ff9b 	bl	b3f8 <smp_c1>
    b4c2:	b120      	cbz	r0, b4ce <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    b4c4:	4630      	mov	r0, r6
    b4c6:	f00f fc55 	bl	1ad74 <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    b4ca:	2008      	movs	r0, #8
    b4cc:	e014      	b.n	b4f8 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    b4ce:	2200      	movs	r2, #0
    b4d0:	4631      	mov	r1, r6
    b4d2:	4620      	mov	r0, r4
    b4d4:	f7ff fb8e 	bl	abf4 <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    b4d8:	34a0      	adds	r4, #160	; 0xa0
    b4da:	f3bf 8f5b 	dmb	ish
    b4de:	e854 3f00 	ldrex	r3, [r4]
    b4e2:	f023 0301 	bic.w	r3, r3, #1
    b4e6:	e844 3200 	strex	r2, r3, [r4]
    b4ea:	2a00      	cmp	r2, #0
    b4ec:	d1f7      	bne.n	b4de <legacy_send_pairing_confirm+0x5a>
    b4ee:	f3bf 8f5b 	dmb	ish
	return 0;
    b4f2:	2000      	movs	r0, #0
    b4f4:	e000      	b.n	b4f8 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    b4f6:	2008      	movs	r0, #8
}
    b4f8:	b004      	add	sp, #16
    b4fa:	bd70      	pop	{r4, r5, r6, pc}

0000b4fc <legacy_pairing_confirm>:
{
    b4fc:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b4fe:	6803      	ldr	r3, [r0, #0]
    b500:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b502:	b1c3      	cbz	r3, b536 <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b504:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b508:	f3bf 8f5b 	dmb	ish
    b50c:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    b510:	f3bf 8f5b 	dmb	ish
    b514:	f412 7f00 	tst.w	r2, #512	; 0x200
    b518:	d01e      	beq.n	b558 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b51a:	f3bf 8f5b 	dmb	ish
    b51e:	e853 2f00 	ldrex	r2, [r3]
    b522:	f042 0201 	orr.w	r2, r2, #1
    b526:	e843 2100 	strex	r1, r2, [r3]
    b52a:	2900      	cmp	r1, #0
    b52c:	d1f7      	bne.n	b51e <legacy_pairing_confirm+0x22>
    b52e:	f3bf 8f5b 	dmb	ish
	return 0;
    b532:	2000      	movs	r0, #0
}
    b534:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b536:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b53a:	f3bf 8f5b 	dmb	ish
    b53e:	e853 2f00 	ldrex	r2, [r3]
    b542:	f042 0208 	orr.w	r2, r2, #8
    b546:	e843 2100 	strex	r1, r2, [r3]
    b54a:	2900      	cmp	r1, #0
    b54c:	d1f7      	bne.n	b53e <legacy_pairing_confirm+0x42>
    b54e:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    b552:	f7ff ff97 	bl	b484 <legacy_send_pairing_confirm>
    b556:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    b558:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    b55c:	f3bf 8f5b 	dmb	ish
    b560:	e853 2f00 	ldrex	r2, [r3]
    b564:	f042 0210 	orr.w	r2, r2, #16
    b568:	e843 2100 	strex	r1, r2, [r3]
    b56c:	2900      	cmp	r1, #0
    b56e:	d1f7      	bne.n	b560 <legacy_pairing_confirm+0x64>
    b570:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    b574:	f7ff ff86 	bl	b484 <legacy_send_pairing_confirm>
    b578:	bd08      	pop	{r3, pc}

0000b57a <smp_pairing_confirm>:
{
    b57a:	b510      	push	{r4, lr}
    b57c:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    b57e:	2210      	movs	r2, #16
    b580:	6889      	ldr	r1, [r1, #8]
    b582:	30b3      	adds	r0, #179	; 0xb3
    b584:	f7f4 fe9c 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b588:	6823      	ldr	r3, [r4, #0]
    b58a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b58c:	b313      	cbz	r3, b5d4 <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b58e:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b592:	f3bf 8f5b 	dmb	ish
    b596:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b59a:	f3bf 8f5b 	dmb	ish
    b59e:	f013 0f20 	tst.w	r3, #32
    b5a2:	d029      	beq.n	b5f8 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    b5a4:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b5a8:	2b01      	cmp	r3, #1
    b5aa:	d029      	beq.n	b600 <smp_pairing_confirm+0x86>
    b5ac:	2b02      	cmp	r3, #2
    b5ae:	d150      	bne.n	b652 <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b5b0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b5b4:	f3bf 8f5b 	dmb	ish
    b5b8:	e853 2f00 	ldrex	r2, [r3]
    b5bc:	f042 0210 	orr.w	r2, r2, #16
    b5c0:	e843 2100 	strex	r1, r2, [r3]
    b5c4:	2900      	cmp	r1, #0
    b5c6:	d1f7      	bne.n	b5b8 <smp_pairing_confirm+0x3e>
    b5c8:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b5cc:	4620      	mov	r0, r4
    b5ce:	f7ff fec5 	bl	b35c <smp_send_pairing_confirm>
    b5d2:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b5d4:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b5d8:	f3bf 8f5b 	dmb	ish
    b5dc:	e853 2f00 	ldrex	r2, [r3]
    b5e0:	f042 0210 	orr.w	r2, r2, #16
    b5e4:	e843 2100 	strex	r1, r2, [r3]
    b5e8:	2900      	cmp	r1, #0
    b5ea:	d1f7      	bne.n	b5dc <smp_pairing_confirm+0x62>
    b5ec:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    b5f0:	4620      	mov	r0, r4
    b5f2:	f7ff fb6c 	bl	acce <smp_send_pairing_random>
    b5f6:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    b5f8:	4620      	mov	r0, r4
    b5fa:	f7ff ff7f 	bl	b4fc <legacy_pairing_confirm>
    b5fe:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b600:	f3bf 8f5b 	dmb	ish
    b604:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b608:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b60c:	f413 7f00 	tst.w	r3, #512	; 0x200
    b610:	d111      	bne.n	b636 <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b612:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b616:	f3bf 8f5b 	dmb	ish
    b61a:	e853 2f00 	ldrex	r2, [r3]
    b61e:	f042 0210 	orr.w	r2, r2, #16
    b622:	e843 2100 	strex	r1, r2, [r3]
    b626:	2900      	cmp	r1, #0
    b628:	d1f7      	bne.n	b61a <smp_pairing_confirm+0xa0>
    b62a:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    b62e:	4620      	mov	r0, r4
    b630:	f7ff fe94 	bl	b35c <smp_send_pairing_confirm>
    b634:	bd10      	pop	{r4, pc}
    b636:	f3bf 8f5b 	dmb	ish
    b63a:	e852 3f00 	ldrex	r3, [r2]
    b63e:	f043 0301 	orr.w	r3, r3, #1
    b642:	e842 3100 	strex	r1, r3, [r2]
    b646:	2900      	cmp	r1, #0
    b648:	d1f7      	bne.n	b63a <smp_pairing_confirm+0xc0>
    b64a:	f3bf 8f5b 	dmb	ish
			return 0;
    b64e:	2000      	movs	r0, #0
    b650:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b652:	2008      	movs	r0, #8
}
    b654:	bd10      	pop	{r4, pc}

0000b656 <smp_s1>:
{
    b656:	b570      	push	{r4, r5, r6, lr}
    b658:	4605      	mov	r5, r0
    b65a:	460e      	mov	r6, r1
    b65c:	4611      	mov	r1, r2
    b65e:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    b660:	2208      	movs	r2, #8
    b662:	4618      	mov	r0, r3
    b664:	f7f4 fe2c 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    b668:	2208      	movs	r2, #8
    b66a:	4631      	mov	r1, r6
    b66c:	18a0      	adds	r0, r4, r2
    b66e:	f7f4 fe27 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    b672:	4622      	mov	r2, r4
    b674:	4621      	mov	r1, r4
    b676:	4628      	mov	r0, r5
    b678:	f006 f86e 	bl	11758 <bt_encrypt_le>
}
    b67c:	bd70      	pop	{r4, r5, r6, pc}

0000b67e <smp_reset>:
{
    b67e:	b538      	push	{r3, r4, r5, lr}
    b680:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b682:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    b684:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b688:	f01e fcae 	bl	29fe8 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    b68c:	2200      	movs	r2, #0
    b68e:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    b692:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    b696:	f3bf 8f5b 	dmb	ish
    b69a:	e853 1f00 	ldrex	r1, [r3]
    b69e:	e843 2000 	strex	r0, r2, [r3]
    b6a2:	2800      	cmp	r0, #0
    b6a4:	d1f9      	bne.n	b69a <smp_reset+0x1c>
    b6a6:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    b6aa:	34a0      	adds	r4, #160	; 0xa0
    b6ac:	f3bf 8f5b 	dmb	ish
    b6b0:	e854 1f00 	ldrex	r1, [r4]
    b6b4:	e844 2000 	strex	r0, r2, [r4]
    b6b8:	2800      	cmp	r0, #0
    b6ba:	d1f9      	bne.n	b6b0 <smp_reset+0x32>
    b6bc:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    b6c0:	7a69      	ldrb	r1, [r5, #9]
    b6c2:	7a2a      	ldrb	r2, [r5, #8]
    b6c4:	4291      	cmp	r1, r2
    b6c6:	d000      	beq.n	b6ca <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    b6c8:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    b6ca:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b6cc:	b162      	cbz	r2, b6e8 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b6ce:	f3bf 8f5b 	dmb	ish
    b6d2:	e853 2f00 	ldrex	r2, [r3]
    b6d6:	f042 0202 	orr.w	r2, r2, #2
    b6da:	e843 2100 	strex	r1, r2, [r3]
    b6de:	2900      	cmp	r1, #0
    b6e0:	d1f7      	bne.n	b6d2 <smp_reset+0x54>
    b6e2:	f3bf 8f5b 	dmb	ish
    b6e6:	bd38      	pop	{r3, r4, r5, pc}
    b6e8:	f3bf 8f5b 	dmb	ish
    b6ec:	e853 2f00 	ldrex	r2, [r3]
    b6f0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b6f4:	e843 2100 	strex	r1, r2, [r3]
    b6f8:	2900      	cmp	r1, #0
    b6fa:	d1f7      	bne.n	b6ec <smp_reset+0x6e>
    b6fc:	f3bf 8f5b 	dmb	ish
    b700:	bd38      	pop	{r3, r4, r5, pc}

0000b702 <smp_pairing_complete>:
{
    b702:	b508      	push	{r3, lr}
	smp_reset(smp);
    b704:	f7ff ffbb 	bl	b67e <smp_reset>
    b708:	bd08      	pop	{r3, pc}

0000b70a <smp_error>:
{
    b70a:	b570      	push	{r4, r5, r6, lr}
    b70c:	4604      	mov	r4, r0
    b70e:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    b710:	f7ff fff7 	bl	b702 <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    b714:	2201      	movs	r2, #1
    b716:	2105      	movs	r1, #5
    b718:	6820      	ldr	r0, [r4, #0]
    b71a:	f7ff fa18 	bl	ab4e <smp_create_pdu>
	if (!buf) {
    b71e:	b168      	cbz	r0, b73c <smp_error+0x32>
    b720:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    b722:	2101      	movs	r1, #1
    b724:	3008      	adds	r0, #8
    b726:	f00f fb71 	bl	1ae0c <net_buf_simple_add>
	rsp->reason = reason;
    b72a:	7006      	strb	r6, [r0, #0]
    b72c:	2300      	movs	r3, #0
    b72e:	462a      	mov	r2, r5
    b730:	2106      	movs	r1, #6
    b732:	6820      	ldr	r0, [r4, #0]
    b734:	f7fc fd01 	bl	813a <bt_l2cap_send_cb>
	return 0;
    b738:	2000      	movs	r0, #0
    b73a:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    b73c:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    b740:	bd70      	pop	{r4, r5, r6, pc}
	...

0000b744 <bt_smp_dhkey_ready>:
{
    b744:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b746:	2400      	movs	r4, #0
    b748:	b384      	cbz	r4, b7ac <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    b74a:	2400      	movs	r4, #0
	if (!smp) {
    b74c:	b36c      	cbz	r4, b7aa <bt_smp_dhkey_ready+0x66>
    b74e:	4601      	mov	r1, r0
	if (!dhkey) {
    b750:	2800      	cmp	r0, #0
    b752:	d04b      	beq.n	b7ec <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    b754:	2220      	movs	r2, #32
    b756:	f204 1033 	addw	r0, r4, #307	; 0x133
    b75a:	f7f4 fdb1 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b75e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b762:	f3bf 8f5b 	dmb	ish
    b766:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b76a:	f3bf 8f5b 	dmb	ish
    b76e:	f412 7f00 	tst.w	r2, #512	; 0x200
    b772:	d140      	bne.n	b7f6 <bt_smp_dhkey_ready+0xb2>
    b774:	f3bf 8f5b 	dmb	ish
    b778:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    b77c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    b780:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    b784:	d144      	bne.n	b810 <bt_smp_dhkey_ready+0xcc>
    b786:	f3bf 8f5b 	dmb	ish
    b78a:	681b      	ldr	r3, [r3, #0]
    b78c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    b790:	f413 7f80 	tst.w	r3, #256	; 0x100
    b794:	d009      	beq.n	b7aa <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b796:	6823      	ldr	r3, [r4, #0]
    b798:	78db      	ldrb	r3, [r3, #3]
    b79a:	2b00      	cmp	r3, #0
    b79c:	d149      	bne.n	b832 <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    b79e:	4620      	mov	r0, r4
    b7a0:	f7ff fcb4 	bl	b10c <compute_and_send_master_dhcheck>
			if (err) {
    b7a4:	4601      	mov	r1, r0
    b7a6:	2800      	cmp	r0, #0
    b7a8:	d13f      	bne.n	b82a <bt_smp_dhkey_ready+0xe6>
    b7aa:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    b7ac:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b7b0:	fb03 f304 	mul.w	r3, r3, r4
    b7b4:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    b7b8:	4b23      	ldr	r3, [pc, #140]	; (b848 <bt_smp_dhkey_ready+0x104>)
    b7ba:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b7bc:	f3bf 8f5b 	dmb	ish
    b7c0:	e853 2f00 	ldrex	r2, [r3]
    b7c4:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    b7c8:	e843 1e00 	strex	lr, r1, [r3]
    b7cc:	f1be 0f00 	cmp.w	lr, #0
    b7d0:	d1f6      	bne.n	b7c0 <bt_smp_dhkey_ready+0x7c>
    b7d2:	f3bf 8f5b 	dmb	ish
    b7d6:	f012 0f80 	tst.w	r2, #128	; 0x80
    b7da:	d101      	bne.n	b7e0 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b7dc:	3401      	adds	r4, #1
    b7de:	e7b3      	b.n	b748 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    b7e0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b7e4:	4b18      	ldr	r3, [pc, #96]	; (b848 <bt_smp_dhkey_ready+0x104>)
    b7e6:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    b7ea:	e7af      	b.n	b74c <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    b7ec:	210b      	movs	r1, #11
    b7ee:	4620      	mov	r0, r4
    b7f0:	f7ff ff8b 	bl	b70a <smp_error>
		return;
    b7f4:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b7f6:	f3bf 8f5b 	dmb	ish
    b7fa:	e853 2f00 	ldrex	r2, [r3]
    b7fe:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b802:	e843 2100 	strex	r1, r2, [r3]
    b806:	2900      	cmp	r1, #0
    b808:	d1f7      	bne.n	b7fa <bt_smp_dhkey_ready+0xb6>
    b80a:	f3bf 8f5b 	dmb	ish
    b80e:	bd10      	pop	{r4, pc}
    b810:	f3bf 8f5b 	dmb	ish
    b814:	e853 2f00 	ldrex	r2, [r3]
    b818:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    b81c:	e843 2100 	strex	r1, r2, [r3]
    b820:	2900      	cmp	r1, #0
    b822:	d1f7      	bne.n	b814 <bt_smp_dhkey_ready+0xd0>
    b824:	f3bf 8f5b 	dmb	ish
    b828:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    b82a:	4620      	mov	r0, r4
    b82c:	f7ff ff6d 	bl	b70a <smp_error>
    b830:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    b832:	4620      	mov	r0, r4
    b834:	f7ff fcc4 	bl	b1c0 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    b838:	4601      	mov	r1, r0
    b83a:	2800      	cmp	r0, #0
    b83c:	d0b5      	beq.n	b7aa <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    b83e:	4620      	mov	r0, r4
    b840:	f7ff ff63 	bl	b70a <smp_error>
    b844:	e7b1      	b.n	b7aa <bt_smp_dhkey_ready+0x66>
    b846:	bf00      	nop
    b848:	200008c4 	.word	0x200008c4

0000b84c <smp_pairing_failed>:
{
    b84c:	b538      	push	{r3, r4, r5, lr}
    b84e:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b850:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    b852:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    b854:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b858:	3b01      	subs	r3, #1
    b85a:	2b02      	cmp	r3, #2
    b85c:	d913      	bls.n	b886 <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b85e:	f3bf 8f5b 	dmb	ish
    b862:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b866:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b86a:	f013 0f04 	tst.w	r3, #4
    b86e:	d004      	beq.n	b87a <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    b870:	6823      	ldr	r3, [r4, #0]
    b872:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b874:	b108      	cbz	r0, b87a <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b876:	f001 fd98 	bl	d3aa <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    b87a:	7829      	ldrb	r1, [r5, #0]
    b87c:	4620      	mov	r0, r4
    b87e:	f7ff ff40 	bl	b702 <smp_pairing_complete>
}
    b882:	2000      	movs	r0, #0
    b884:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    b886:	4b02      	ldr	r3, [pc, #8]	; (b890 <smp_pairing_failed+0x44>)
    b888:	681b      	ldr	r3, [r3, #0]
    b88a:	68db      	ldr	r3, [r3, #12]
    b88c:	4798      	blx	r3
		break;
    b88e:	e7e6      	b.n	b85e <smp_pairing_failed+0x12>
    b890:	20002ab0 	.word	0x20002ab0

0000b894 <bt_smp_disconnected>:
{
    b894:	b538      	push	{r3, r4, r5, lr}
    b896:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    b898:	6803      	ldr	r3, [r0, #0]
    b89a:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    b89c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    b8a0:	f01e fba2 	bl	29fe8 <k_delayed_work_cancel>
	if (keys) {
    b8a4:	b164      	cbz	r4, b8c0 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    b8a6:	89a3      	ldrh	r3, [r4, #12]
    b8a8:	b13b      	cbz	r3, b8ba <bt_smp_disconnected+0x26>
    b8aa:	f3bf 8f5b 	dmb	ish
    b8ae:	68a3      	ldr	r3, [r4, #8]
    b8b0:	f3bf 8f5b 	dmb	ish
    b8b4:	f013 0f02 	tst.w	r3, #2
    b8b8:	d002      	beq.n	b8c0 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    b8ba:	4620      	mov	r0, r4
    b8bc:	f001 fd75 	bl	d3aa <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    b8c0:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    b8c4:	2100      	movs	r1, #0
    b8c6:	4628      	mov	r0, r5
    b8c8:	f01f f852 	bl	2a970 <memset>
    b8cc:	bd38      	pop	{r3, r4, r5, pc}

0000b8ce <smp_timeout>:
{
    b8ce:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    b8d0:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b8d4:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    b8d8:	f3bf 8f5b 	dmb	ish
    b8dc:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    b8e0:	f3bf 8f5b 	dmb	ish
    b8e4:	f013 0f04 	tst.w	r3, #4
    b8e8:	d004      	beq.n	b8f4 <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    b8ea:	682b      	ldr	r3, [r5, #0]
    b8ec:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    b8ee:	b108      	cbz	r0, b8f4 <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    b8f0:	f001 fd5b 	bl	d3aa <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    b8f4:	2108      	movs	r1, #8
    b8f6:	4628      	mov	r0, r5
    b8f8:	f7ff ff03 	bl	b702 <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b8fc:	f3bf 8f5b 	dmb	ish
    b900:	e854 3f00 	ldrex	r3, [r4]
    b904:	f043 0310 	orr.w	r3, r3, #16
    b908:	e844 3200 	strex	r2, r3, [r4]
    b90c:	2a00      	cmp	r2, #0
    b90e:	d1f7      	bne.n	b900 <smp_timeout+0x32>
    b910:	f3bf 8f5b 	dmb	ish
    b914:	bd38      	pop	{r3, r4, r5, pc}
	...

0000b918 <legacy_distribute_keys>:
{
    b918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b91c:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    b91e:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    b920:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    b922:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    b926:	f013 0f01 	tst.w	r3, #1
    b92a:	d102      	bne.n	b932 <legacy_distribute_keys+0x1a>
}
    b92c:	b008      	add	sp, #32
    b92e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    b932:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    b934:	2110      	movs	r1, #16
    b936:	eb0d 0001 	add.w	r0, sp, r1
    b93a:	f005 fef1 	bl	11720 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    b93e:	2108      	movs	r1, #8
    b940:	eb0d 0001 	add.w	r0, sp, r1
    b944:	f005 feec 	bl	11720 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    b948:	2102      	movs	r1, #2
    b94a:	f10d 0006 	add.w	r0, sp, #6
    b94e:	f005 fee7 	bl	11720 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    b952:	2210      	movs	r2, #16
    b954:	2106      	movs	r1, #6
    b956:	4628      	mov	r0, r5
    b958:	f7ff f8f9 	bl	ab4e <smp_create_pdu>
		if (!buf) {
    b95c:	4607      	mov	r7, r0
    b95e:	2800      	cmp	r0, #0
    b960:	d0e4      	beq.n	b92c <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    b962:	2110      	movs	r1, #16
    b964:	3008      	adds	r0, #8
    b966:	f00f fa51 	bl	1ae0c <net_buf_simple_add>
    b96a:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    b96c:	79f2      	ldrb	r2, [r6, #7]
    b96e:	a904      	add	r1, sp, #16
    b970:	f7f4 fca6 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    b974:	79f0      	ldrb	r0, [r6, #7]
    b976:	280f      	cmp	r0, #15
    b978:	d93b      	bls.n	b9f2 <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    b97a:	2200      	movs	r2, #0
    b97c:	4639      	mov	r1, r7
    b97e:	4620      	mov	r0, r4
    b980:	f7ff f938 	bl	abf4 <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    b984:	220a      	movs	r2, #10
    b986:	2107      	movs	r1, #7
    b988:	4628      	mov	r0, r5
    b98a:	f7ff f8e0 	bl	ab4e <smp_create_pdu>
		if (!buf) {
    b98e:	4605      	mov	r5, r0
    b990:	2800      	cmp	r0, #0
    b992:	d0cb      	beq.n	b92c <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    b994:	210a      	movs	r1, #10
    b996:	3008      	adds	r0, #8
    b998:	f00f fa38 	bl	1ae0c <net_buf_simple_add>
		ident->rand = rand;
    b99c:	9b03      	ldr	r3, [sp, #12]
    b99e:	9a02      	ldr	r2, [sp, #8]
    b9a0:	f8c0 2002 	str.w	r2, [r0, #2]
    b9a4:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    b9a8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b9ac:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    b9ae:	4a14      	ldr	r2, [pc, #80]	; (ba00 <legacy_distribute_keys+0xe8>)
    b9b0:	4629      	mov	r1, r5
    b9b2:	4620      	mov	r0, r4
    b9b4:	f7ff f91e 	bl	abf4 <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b9b8:	f3bf 8f5b 	dmb	ish
    b9bc:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b9c0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b9c4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b9c8:	d0b0      	beq.n	b92c <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    b9ca:	2101      	movs	r1, #1
    b9cc:	4630      	mov	r0, r6
    b9ce:	f001 fcd5 	bl	d37c <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    b9d2:	2210      	movs	r2, #16
    b9d4:	eb0d 0102 	add.w	r1, sp, r2
    b9d8:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    b9dc:	f7f4 fc70 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    b9e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    b9e4:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    b9e8:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    b9ec:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    b9f0:	e79c      	b.n	b92c <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    b9f2:	f1c0 0210 	rsb	r2, r0, #16
    b9f6:	2100      	movs	r1, #0
    b9f8:	4440      	add	r0, r8
    b9fa:	f01e ffb9 	bl	2a970 <memset>
    b9fe:	e7bc      	b.n	b97a <legacy_distribute_keys+0x62>
    ba00:	0000c633 	.word	0x0000c633

0000ba04 <bt_smp_distribute_keys>:
{
    ba04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    ba06:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    ba08:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    ba0a:	b176      	cbz	r6, ba2a <bt_smp_distribute_keys+0x26>
    ba0c:	4604      	mov	r4, r0
    ba0e:	f3bf 8f5b 	dmb	ish
    ba12:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ba16:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ba1a:	f013 0f20 	tst.w	r3, #32
    ba1e:	d005      	beq.n	ba2c <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    ba20:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    ba24:	f013 0f04 	tst.w	r3, #4
    ba28:	d103      	bne.n	ba32 <bt_smp_distribute_keys+0x2e>
    ba2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    ba2c:	f7ff ff74 	bl	b918 <legacy_distribute_keys>
    ba30:	e7f6      	b.n	ba20 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    ba32:	2210      	movs	r2, #16
    ba34:	210a      	movs	r1, #10
    ba36:	4628      	mov	r0, r5
    ba38:	f7ff f889 	bl	ab4e <smp_create_pdu>
		if (!buf) {
    ba3c:	4605      	mov	r5, r0
    ba3e:	2800      	cmp	r0, #0
    ba40:	d0f3      	beq.n	ba2a <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    ba42:	2110      	movs	r1, #16
    ba44:	3008      	adds	r0, #8
    ba46:	f00f f9e1 	bl	1ae0c <net_buf_simple_add>
    ba4a:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    ba4c:	2110      	movs	r1, #16
    ba4e:	f005 fe67 	bl	11720 <bt_rand>
    ba52:	f3bf 8f5b 	dmb	ish
    ba56:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ba5a:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba5e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba62:	d105      	bne.n	ba70 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    ba64:	4a09      	ldr	r2, [pc, #36]	; (ba8c <bt_smp_distribute_keys+0x88>)
    ba66:	4629      	mov	r1, r5
    ba68:	4620      	mov	r0, r4
    ba6a:	f7ff f8c3 	bl	abf4 <smp_send>
    ba6e:	e7dc      	b.n	ba2a <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    ba70:	2108      	movs	r1, #8
    ba72:	4630      	mov	r0, r6
    ba74:	f001 fc82 	bl	d37c <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    ba78:	2210      	movs	r2, #16
    ba7a:	4639      	mov	r1, r7
    ba7c:	f106 0048 	add.w	r0, r6, #72	; 0x48
    ba80:	f7f4 fc1e 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    ba84:	2300      	movs	r3, #0
    ba86:	65b3      	str	r3, [r6, #88]	; 0x58
    ba88:	e7ec      	b.n	ba64 <bt_smp_distribute_keys+0x60>
    ba8a:	bf00      	nop
    ba8c:	0000c629 	.word	0x0000c629

0000ba90 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    ba90:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    ba92:	b911      	cbnz	r1, ba9a <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    ba94:	b108      	cbz	r0, ba9a <bt_smp_encrypt_change+0xa>
    ba96:	7a9a      	ldrb	r2, [r3, #10]
    ba98:	b902      	cbnz	r2, ba9c <bt_smp_encrypt_change+0xc>
    ba9a:	4770      	bx	lr
{
    ba9c:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    ba9e:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    baa2:	f3bf 8f5b 	dmb	ish
    baa6:	e852 1f00 	ldrex	r1, [r2]
    baaa:	f021 0402 	bic.w	r4, r1, #2
    baae:	e842 4e00 	strex	lr, r4, [r2]
    bab2:	f1be 0f00 	cmp.w	lr, #0
    bab6:	d1f6      	bne.n	baa6 <bt_smp_encrypt_change+0x16>
    bab8:	f3bf 8f5b 	dmb	ish
    babc:	f011 0f02 	tst.w	r1, #2
    bac0:	d100      	bne.n	bac4 <bt_smp_encrypt_change+0x34>
    bac2:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bac4:	f3bf 8f5b 	dmb	ish
    bac8:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    bacc:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    bad0:	f011 0f08 	tst.w	r1, #8
    bad4:	d04b      	beq.n	bb6e <bt_smp_encrypt_change+0xde>
    bad6:	f3bf 8f5b 	dmb	ish
    bada:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    bade:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bae2:	f011 0f20 	tst.w	r1, #32
    bae6:	d015      	beq.n	bb14 <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    bae8:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    baec:	f011 0f08 	tst.w	r1, #8
    baf0:	d004      	beq.n	bafc <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    baf2:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    baf6:	f011 0f08 	tst.w	r1, #8
    bafa:	d146      	bne.n	bb8a <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    bafc:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    bb00:	f021 0108 	bic.w	r1, r1, #8
    bb04:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    bb08:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    bb0c:	f021 0108 	bic.w	r1, r1, #8
    bb10:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    bb14:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    bb18:	f011 0f01 	tst.w	r1, #1
    bb1c:	d142      	bne.n	bba4 <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    bb1e:	f011 0f02 	tst.w	r1, #2
    bb22:	d14f      	bne.n	bbc4 <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bb24:	f011 0f04 	tst.w	r1, #4
    bb28:	d15c      	bne.n	bbe4 <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb2a:	f3bf 8f5b 	dmb	ish
    bb2e:	e852 1f00 	ldrex	r1, [r2]
    bb32:	f041 0104 	orr.w	r1, r1, #4
    bb36:	e842 1400 	strex	r4, r1, [r2]
    bb3a:	2c00      	cmp	r4, #0
    bb3c:	d1f7      	bne.n	bb2e <bt_smp_encrypt_change+0x9e>
    bb3e:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    bb42:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bb44:	b91b      	cbnz	r3, bb4e <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    bb46:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    bb4a:	2b00      	cmp	r3, #0
    bb4c:	d1b9      	bne.n	bac2 <bt_smp_encrypt_change+0x32>
    bb4e:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    bb50:	f7ff ff58 	bl	ba04 <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    bb54:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    bb58:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb5c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bb60:	2b00      	cmp	r3, #0
    bb62:	d1ae      	bne.n	bac2 <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    bb64:	2100      	movs	r1, #0
    bb66:	4620      	mov	r0, r4
    bb68:	f7ff fdcb 	bl	b702 <smp_pairing_complete>
    bb6c:	e7a9      	b.n	bac2 <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    bb6e:	309c      	adds	r0, #156	; 0x9c
    bb70:	f3bf 8f5b 	dmb	ish
    bb74:	e850 3f00 	ldrex	r3, [r0]
    bb78:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    bb7c:	e840 3200 	strex	r2, r3, [r0]
    bb80:	2a00      	cmp	r2, #0
    bb82:	d1f7      	bne.n	bb74 <bt_smp_encrypt_change+0xe4>
    bb84:	f3bf 8f5b 	dmb	ish
    bb88:	bd10      	pop	{r4, pc}
    bb8a:	f3bf 8f5b 	dmb	ish
    bb8e:	e852 1f00 	ldrex	r1, [r2]
    bb92:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    bb96:	e842 1400 	strex	r4, r1, [r2]
    bb9a:	2c00      	cmp	r4, #0
    bb9c:	d1f7      	bne.n	bb8e <bt_smp_encrypt_change+0xfe>
    bb9e:	f3bf 8f5b 	dmb	ish
    bba2:	e7ab      	b.n	bafc <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    bba4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bba8:	f3bf 8f5b 	dmb	ish
    bbac:	e851 4f00 	ldrex	r4, [r1]
    bbb0:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    bbb4:	e841 4e00 	strex	lr, r4, [r1]
    bbb8:	f1be 0f00 	cmp.w	lr, #0
    bbbc:	d1f6      	bne.n	bbac <bt_smp_encrypt_change+0x11c>
    bbbe:	f3bf 8f5b 	dmb	ish
    bbc2:	e7b2      	b.n	bb2a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bbc4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bbc8:	f3bf 8f5b 	dmb	ish
    bbcc:	e851 4f00 	ldrex	r4, [r1]
    bbd0:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    bbd4:	e841 4e00 	strex	lr, r4, [r1]
    bbd8:	f1be 0f00 	cmp.w	lr, #0
    bbdc:	d1f6      	bne.n	bbcc <bt_smp_encrypt_change+0x13c>
    bbde:	f3bf 8f5b 	dmb	ish
    bbe2:	e7a2      	b.n	bb2a <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bbe4:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    bbe8:	f3bf 8f5b 	dmb	ish
    bbec:	e851 4f00 	ldrex	r4, [r1]
    bbf0:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    bbf4:	e841 4e00 	strex	lr, r4, [r1]
    bbf8:	f1be 0f00 	cmp.w	lr, #0
    bbfc:	d1f6      	bne.n	bbec <bt_smp_encrypt_change+0x15c>
    bbfe:	f3bf 8f5b 	dmb	ish
    bc02:	e792      	b.n	bb2a <bt_smp_encrypt_change+0x9a>

0000bc04 <bt_smp_recv>:
{
    bc04:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    bc06:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    bc08:	898b      	ldrh	r3, [r1, #12]
    bc0a:	b903      	cbnz	r3, bc0e <bt_smp_recv+0xa>
    bc0c:	bd70      	pop	{r4, r5, r6, pc}
    bc0e:	460c      	mov	r4, r1
    bc10:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    bc12:	2101      	movs	r1, #1
    bc14:	f104 0008 	add.w	r0, r4, #8
    bc18:	f00f f945 	bl	1aea6 <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc1c:	f3bf 8f5b 	dmb	ish
    bc20:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bc24:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    bc28:	f013 0f10 	tst.w	r3, #16
    bc2c:	d1ee      	bne.n	bc0c <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    bc2e:	7833      	ldrb	r3, [r6, #0]
    bc30:	2b0d      	cmp	r3, #13
    bc32:	d824      	bhi.n	bc7e <bt_smp_recv+0x7a>
    bc34:	4a21      	ldr	r2, [pc, #132]	; (bcbc <bt_smp_recv+0xb8>)
    bc36:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    bc3a:	b302      	cbz	r2, bc7e <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    bc3c:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    bc40:	f003 001f 	and.w	r0, r3, #31
    bc44:	2101      	movs	r1, #1
    bc46:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    bc48:	095b      	lsrs	r3, r3, #5
    bc4a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    bc4e:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bc50:	f3bf 8f5b 	dmb	ish
    bc54:	e853 2f00 	ldrex	r2, [r3]
    bc58:	ea02 0e00 	and.w	lr, r2, r0
    bc5c:	e843 ec00 	strex	ip, lr, [r3]
    bc60:	f1bc 0f00 	cmp.w	ip, #0
    bc64:	d1f6      	bne.n	bc54 <bt_smp_recv+0x50>
    bc66:	f3bf 8f5b 	dmb	ish
    bc6a:	4211      	tst	r1, r2
    bc6c:	d10c      	bne.n	bc88 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    bc6e:	7833      	ldrb	r3, [r6, #0]
    bc70:	2b05      	cmp	r3, #5
    bc72:	d0cb      	beq.n	bc0c <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    bc74:	2108      	movs	r1, #8
    bc76:	4628      	mov	r0, r5
    bc78:	f7ff fd47 	bl	b70a <smp_error>
    bc7c:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    bc7e:	2107      	movs	r1, #7
    bc80:	4628      	mov	r0, r5
    bc82:	f7ff fd42 	bl	b70a <smp_error>
		return;
    bc86:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    bc88:	89a1      	ldrh	r1, [r4, #12]
    bc8a:	7832      	ldrb	r2, [r6, #0]
    bc8c:	4b0b      	ldr	r3, [pc, #44]	; (bcbc <bt_smp_recv+0xb8>)
    bc8e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    bc92:	791b      	ldrb	r3, [r3, #4]
    bc94:	4299      	cmp	r1, r3
    bc96:	d004      	beq.n	bca2 <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    bc98:	210a      	movs	r1, #10
    bc9a:	4628      	mov	r0, r5
    bc9c:	f7ff fd35 	bl	b70a <smp_error>
		return;
    bca0:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    bca2:	4b06      	ldr	r3, [pc, #24]	; (bcbc <bt_smp_recv+0xb8>)
    bca4:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    bca8:	4621      	mov	r1, r4
    bcaa:	4628      	mov	r0, r5
    bcac:	4798      	blx	r3
	if (err) {
    bcae:	4601      	mov	r1, r0
    bcb0:	2800      	cmp	r0, #0
    bcb2:	d0ab      	beq.n	bc0c <bt_smp_recv+0x8>
		smp_error(smp, err);
    bcb4:	4628      	mov	r0, r5
    bcb6:	f7ff fd28 	bl	b70a <smp_error>
    bcba:	e7a7      	b.n	bc0c <bt_smp_recv+0x8>
    bcbc:	00031814 	.word	0x00031814

0000bcc0 <smp_dhkey_check>:
{
    bcc0:	b570      	push	{r4, r5, r6, lr}
    bcc2:	b08c      	sub	sp, #48	; 0x30
    bcc4:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    bcc6:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bcc8:	6803      	ldr	r3, [r0, #0]
    bcca:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bccc:	b12c      	cbz	r4, bcda <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    bcce:	2c01      	cmp	r4, #1
    bcd0:	d058      	beq.n	bd84 <smp_dhkey_check+0xc4>
	return 0;
    bcd2:	2400      	movs	r4, #0
}
    bcd4:	4620      	mov	r0, r4
    bcd6:	b00c      	add	sp, #48	; 0x30
    bcd8:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    bcda:	2210      	movs	r2, #16
    bcdc:	2100      	movs	r1, #0
    bcde:	a808      	add	r0, sp, #32
    bce0:	f01e fe46 	bl	2a970 <memset>
		switch (smp->method) {
    bce4:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    bce8:	2b03      	cmp	r3, #3
    bcea:	d847      	bhi.n	bd7c <smp_dhkey_check+0xbc>
    bcec:	e8df f003 	tbb	[pc, r3]
    bcf0:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    bcf4:	2204      	movs	r2, #4
    bcf6:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    bcfa:	a808      	add	r0, sp, #32
    bcfc:	f7f4 fae0 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bd00:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    bd04:	682b      	ldr	r3, [r5, #0]
    bd06:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    bd0a:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    bd0c:	a804      	add	r0, sp, #16
    bd0e:	9003      	str	r0, [sp, #12]
    bd10:	9302      	str	r3, [sp, #8]
    bd12:	9101      	str	r1, [sp, #4]
    bd14:	9200      	str	r2, [sp, #0]
    bd16:	ab08      	add	r3, sp, #32
    bd18:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    bd1c:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    bd20:	f205 1063 	addw	r0, r5, #355	; 0x163
    bd24:	f7ff f96e 	bl	b004 <smp_f6>
    bd28:	b108      	cbz	r0, bd2e <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    bd2a:	2408      	movs	r4, #8
    bd2c:	e7d2      	b.n	bcd4 <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    bd2e:	2210      	movs	r2, #16
    bd30:	4631      	mov	r1, r6
    bd32:	eb0d 0002 	add.w	r0, sp, r2
    bd36:	f01e fd87 	bl	2a848 <memcmp>
    bd3a:	b108      	cbz	r0, bd40 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    bd3c:	240b      	movs	r4, #11
    bd3e:	e7c9      	b.n	bcd4 <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    bd40:	4628      	mov	r0, r5
    bd42:	f7fe fe63 	bl	aa0c <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    bd46:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    bd4a:	9002      	str	r0, [sp, #8]
    bd4c:	9301      	str	r3, [sp, #4]
    bd4e:	2300      	movs	r3, #0
    bd50:	9300      	str	r3, [sp, #0]
    bd52:	2200      	movs	r2, #0
    bd54:	2300      	movs	r3, #0
    bd56:	6828      	ldr	r0, [r5, #0]
    bd58:	f7fb f898 	bl	6e8c <bt_conn_le_start_encryption>
    bd5c:	2800      	cmp	r0, #0
    bd5e:	db0f      	blt.n	bd80 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bd60:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd62:	f3bf 8f5b 	dmb	ish
    bd66:	e855 3f00 	ldrex	r3, [r5]
    bd6a:	f043 0302 	orr.w	r3, r3, #2
    bd6e:	e845 3200 	strex	r2, r3, [r5]
    bd72:	2a00      	cmp	r2, #0
    bd74:	d1f7      	bne.n	bd66 <smp_dhkey_check+0xa6>
    bd76:	f3bf 8f5b 	dmb	ish
		return 0;
    bd7a:	e7ab      	b.n	bcd4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bd7c:	2408      	movs	r4, #8
    bd7e:	e7a9      	b.n	bcd4 <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    bd80:	2408      	movs	r4, #8
    bd82:	e7a7      	b.n	bcd4 <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    bd84:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    bd88:	f3bf 8f5b 	dmb	ish
    bd8c:	e854 3f00 	ldrex	r3, [r4]
    bd90:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    bd94:	e844 3200 	strex	r2, r3, [r4]
    bd98:	2a00      	cmp	r2, #0
    bd9a:	d1f7      	bne.n	bd8c <smp_dhkey_check+0xcc>
    bd9c:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    bda0:	2210      	movs	r2, #16
    bda2:	4631      	mov	r1, r6
    bda4:	f205 1053 	addw	r0, r5, #339	; 0x153
    bda8:	f7f4 fa8a 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bdac:	f3bf 8f5b 	dmb	ish
    bdb0:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bdb4:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    bdb8:	f013 0f80 	tst.w	r3, #128	; 0x80
    bdbc:	d10d      	bne.n	bdda <smp_dhkey_check+0x11a>
    bdbe:	f3bf 8f5b 	dmb	ish
    bdc2:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    bdc6:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    bdca:	f413 7f00 	tst.w	r3, #512	; 0x200
    bdce:	d112      	bne.n	bdf6 <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    bdd0:	4628      	mov	r0, r5
    bdd2:	f7ff f9f5 	bl	b1c0 <compute_and_check_and_send_slave_dhcheck>
    bdd6:	4604      	mov	r4, r0
    bdd8:	e77c      	b.n	bcd4 <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdda:	f3bf 8f5b 	dmb	ish
    bdde:	e854 3f00 	ldrex	r3, [r4]
    bde2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bde6:	e844 3200 	strex	r2, r3, [r4]
    bdea:	2a00      	cmp	r2, #0
    bdec:	d1f7      	bne.n	bdde <smp_dhkey_check+0x11e>
    bdee:	f3bf 8f5b 	dmb	ish
			return 0;
    bdf2:	2400      	movs	r4, #0
    bdf4:	e76e      	b.n	bcd4 <smp_dhkey_check+0x14>
    bdf6:	f3bf 8f5b 	dmb	ish
    bdfa:	e854 3f00 	ldrex	r3, [r4]
    bdfe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    be02:	e844 3200 	strex	r2, r3, [r4]
    be06:	2a00      	cmp	r2, #0
    be08:	d1f7      	bne.n	bdfa <smp_dhkey_check+0x13a>
    be0a:	f3bf 8f5b 	dmb	ish
			return 0;
    be0e:	2400      	movs	r4, #0
    be10:	e760      	b.n	bcd4 <smp_dhkey_check+0x14>

0000be12 <legacy_pairing_random>:
{
    be12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    be16:	b088      	sub	sp, #32
    be18:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    be1a:	4605      	mov	r5, r0
    be1c:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    be20:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    be24:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    be28:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    be2c:	a904      	add	r1, sp, #16
    be2e:	9102      	str	r1, [sp, #8]
    be30:	9201      	str	r2, [sp, #4]
    be32:	9300      	str	r3, [sp, #0]
    be34:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    be38:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    be3c:	4641      	mov	r1, r8
    be3e:	4628      	mov	r0, r5
    be40:	f7ff fada 	bl	b3f8 <smp_c1>
	if (err) {
    be44:	b120      	cbz	r0, be50 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    be46:	2708      	movs	r7, #8
}
    be48:	4638      	mov	r0, r7
    be4a:	b008      	add	sp, #32
    be4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    be50:	2210      	movs	r2, #16
    be52:	eb0d 0102 	add.w	r1, sp, r2
    be56:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    be5a:	f01e fcf5 	bl	2a848 <memcmp>
    be5e:	b108      	cbz	r0, be64 <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    be60:	2704      	movs	r7, #4
    be62:	e7f1      	b.n	be48 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    be64:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    be66:	bb3f      	cbnz	r7, beb8 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    be68:	ab04      	add	r3, sp, #16
    be6a:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    be6e:	4641      	mov	r1, r8
    be70:	4628      	mov	r0, r5
    be72:	f7ff fbf0 	bl	b656 <smp_s1>
		if (err) {
    be76:	b108      	cbz	r0, be7c <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    be78:	2708      	movs	r7, #8
    be7a:	e7e5      	b.n	be48 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    be7c:	4620      	mov	r0, r4
    be7e:	f7fe fdc5 	bl	aa0c <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    be82:	9002      	str	r0, [sp, #8]
    be84:	ab04      	add	r3, sp, #16
    be86:	9301      	str	r3, [sp, #4]
    be88:	2300      	movs	r3, #0
    be8a:	9300      	str	r3, [sp, #0]
    be8c:	2200      	movs	r2, #0
    be8e:	2300      	movs	r3, #0
    be90:	4630      	mov	r0, r6
    be92:	f7fa fffb 	bl	6e8c <bt_conn_le_start_encryption>
    be96:	b108      	cbz	r0, be9c <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    be98:	2708      	movs	r7, #8
    be9a:	e7d5      	b.n	be48 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    be9c:	34a0      	adds	r4, #160	; 0xa0
    be9e:	f3bf 8f5b 	dmb	ish
    bea2:	e854 3f00 	ldrex	r3, [r4]
    bea6:	f043 0302 	orr.w	r3, r3, #2
    beaa:	e844 3200 	strex	r2, r3, [r4]
    beae:	2a00      	cmp	r2, #0
    beb0:	d1f7      	bne.n	bea2 <legacy_pairing_random+0x90>
    beb2:	f3bf 8f5b 	dmb	ish
		return 0;
    beb6:	e7c7      	b.n	be48 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    beb8:	ab04      	add	r3, sp, #16
    beba:	4642      	mov	r2, r8
    bebc:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    bec0:	4628      	mov	r0, r5
    bec2:	f7ff fbc8 	bl	b656 <smp_s1>
		if (err) {
    bec6:	b108      	cbz	r0, becc <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    bec8:	2708      	movs	r7, #8
    beca:	e7bd      	b.n	be48 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    becc:	2210      	movs	r2, #16
    bece:	eb0d 0102 	add.w	r1, sp, r2
    bed2:	4628      	mov	r0, r5
    bed4:	f7f4 f9f4 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    bed8:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bedc:	f3bf 8f5b 	dmb	ish
    bee0:	e853 2f00 	ldrex	r2, [r3]
    bee4:	f042 0202 	orr.w	r2, r2, #2
    bee8:	e843 2100 	strex	r1, r2, [r3]
    beec:	2900      	cmp	r1, #0
    beee:	d1f7      	bne.n	bee0 <legacy_pairing_random+0xce>
    bef0:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    bef4:	4620      	mov	r0, r4
    bef6:	f7fe feea 	bl	acce <smp_send_pairing_random>
	return 0;
    befa:	2700      	movs	r7, #0
    befc:	e7a4      	b.n	be48 <legacy_pairing_random+0x36>
	...

0000bf00 <smp_pairing_random>:
{
    bf00:	b5f0      	push	{r4, r5, r6, r7, lr}
    bf02:	b085      	sub	sp, #20
    bf04:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    bf06:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    bf0a:	2210      	movs	r2, #16
    bf0c:	6889      	ldr	r1, [r1, #8]
    bf0e:	4628      	mov	r0, r5
    bf10:	f7f4 f9d6 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf14:	f3bf 8f5b 	dmb	ish
    bf18:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf1c:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bf20:	f013 0f20 	tst.w	r3, #32
    bf24:	d00d      	beq.n	bf42 <smp_pairing_random+0x42>
    bf26:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    bf2a:	6823      	ldr	r3, [r4, #0]
    bf2c:	78db      	ldrb	r3, [r3, #3]
    bf2e:	b17b      	cbz	r3, bf50 <smp_pairing_random+0x50>
	switch (smp->method) {
    bf30:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bf34:	2b03      	cmp	r3, #3
    bf36:	f200 8106 	bhi.w	c146 <smp_pairing_random+0x246>
    bf3a:	e8df f003 	tbb	[pc, r3]
    bf3e:	bfa0      	.short	0xbfa0
    bf40:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    bf42:	4620      	mov	r0, r4
    bf44:	f7ff ff65 	bl	be12 <legacy_pairing_random>
    bf48:	4606      	mov	r6, r0
}
    bf4a:	4630      	mov	r0, r6
    bf4c:	b005      	add	sp, #20
    bf4e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    bf50:	4620      	mov	r0, r4
    bf52:	f7fe ff83 	bl	ae5c <sc_smp_check_confirm>
		if (err) {
    bf56:	4606      	mov	r6, r0
    bf58:	2800      	cmp	r0, #0
    bf5a:	d1f6      	bne.n	bf4a <smp_pairing_random+0x4a>
		switch (smp->method) {
    bf5c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bf60:	2b03      	cmp	r3, #3
    bf62:	f200 80ee 	bhi.w	c142 <smp_pairing_random+0x242>
    bf66:	e8df f003 	tbb	[pc, r3]
    bf6a:	2e50      	.short	0x2e50
    bf6c:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    bf6e:	ab03      	add	r3, sp, #12
    bf70:	9300      	str	r3, [sp, #0]
    bf72:	462b      	mov	r3, r5
    bf74:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    bf78:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    bf7c:	4873      	ldr	r0, [pc, #460]	; (c14c <smp_pairing_random+0x24c>)
    bf7e:	f7ff f995 	bl	b2ac <smp_g2>
    bf82:	b108      	cbz	r0, bf88 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    bf84:	2608      	movs	r6, #8
    bf86:	e7e0      	b.n	bf4a <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf88:	f3bf 8f5b 	dmb	ish
    bf8c:	e857 3f00 	ldrex	r3, [r7]
    bf90:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bf94:	e847 3200 	strex	r2, r3, [r7]
    bf98:	2a00      	cmp	r2, #0
    bf9a:	d1f7      	bne.n	bf8c <smp_pairing_random+0x8c>
    bf9c:	f3bf 8f5b 	dmb	ish
    bfa0:	f3bf 8f5b 	dmb	ish
    bfa4:	e857 3f00 	ldrex	r3, [r7]
    bfa8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    bfac:	e847 3200 	strex	r2, r3, [r7]
    bfb0:	2a00      	cmp	r2, #0
    bfb2:	d1f7      	bne.n	bfa4 <smp_pairing_random+0xa4>
    bfb4:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    bfb8:	4b65      	ldr	r3, [pc, #404]	; (c150 <smp_pairing_random+0x250>)
    bfba:	681b      	ldr	r3, [r3, #0]
    bfbc:	689b      	ldr	r3, [r3, #8]
    bfbe:	9903      	ldr	r1, [sp, #12]
    bfc0:	6820      	ldr	r0, [r4, #0]
    bfc2:	4798      	blx	r3
			return 0;
    bfc4:	e7c1      	b.n	bf4a <smp_pairing_random+0x4a>
			smp->passkey_round++;
    bfc6:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    bfca:	3301      	adds	r3, #1
    bfcc:	b2db      	uxtb	r3, r3
    bfce:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    bfd2:	2b14      	cmp	r3, #20
    bfd4:	d019      	beq.n	c00a <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    bfd6:	2110      	movs	r1, #16
    bfd8:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    bfdc:	f005 fba0 	bl	11720 <bt_rand>
    bfe0:	b108      	cbz	r0, bfe6 <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    bfe2:	2608      	movs	r6, #8
    bfe4:	e7b1      	b.n	bf4a <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    bfe6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bfea:	f3bf 8f5b 	dmb	ish
    bfee:	e853 2f00 	ldrex	r2, [r3]
    bff2:	f042 0208 	orr.w	r2, r2, #8
    bff6:	e843 2100 	strex	r1, r2, [r3]
    bffa:	2900      	cmp	r1, #0
    bffc:	d1f7      	bne.n	bfee <smp_pairing_random+0xee>
    bffe:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    c002:	4620      	mov	r0, r4
    c004:	f7ff f9aa 	bl	b35c <smp_send_pairing_confirm>
			return 0;
    c008:	e79f      	b.n	bf4a <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c00a:	f3bf 8f5b 	dmb	ish
    c00e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c012:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    c016:	f013 0f80 	tst.w	r3, #128	; 0x80
    c01a:	d00c      	beq.n	c036 <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c01c:	f3bf 8f5b 	dmb	ish
    c020:	e857 3f00 	ldrex	r3, [r7]
    c024:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    c028:	e847 3200 	strex	r2, r3, [r7]
    c02c:	2a00      	cmp	r2, #0
    c02e:	d1f7      	bne.n	c020 <smp_pairing_random+0x120>
    c030:	f3bf 8f5b 	dmb	ish
			return 0;
    c034:	e789      	b.n	bf4a <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    c036:	4620      	mov	r0, r4
    c038:	f7ff f868 	bl	b10c <compute_and_send_master_dhcheck>
    c03c:	4606      	mov	r6, r0
    c03e:	e784      	b.n	bf4a <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    c040:	ab03      	add	r3, sp, #12
    c042:	9300      	str	r3, [sp, #0]
    c044:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    c048:	462a      	mov	r2, r5
    c04a:	4940      	ldr	r1, [pc, #256]	; (c14c <smp_pairing_random+0x24c>)
    c04c:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    c050:	f7ff f92c 	bl	b2ac <smp_g2>
    c054:	b108      	cbz	r0, c05a <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    c056:	2608      	movs	r6, #8
    c058:	e777      	b.n	bf4a <smp_pairing_random+0x4a>
    c05a:	f3bf 8f5b 	dmb	ish
    c05e:	e857 3f00 	ldrex	r3, [r7]
    c062:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c066:	e847 3200 	strex	r2, r3, [r7]
    c06a:	2a00      	cmp	r2, #0
    c06c:	d1f7      	bne.n	c05e <smp_pairing_random+0x15e>
    c06e:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    c072:	4b37      	ldr	r3, [pc, #220]	; (c150 <smp_pairing_random+0x250>)
    c074:	681b      	ldr	r3, [r3, #0]
    c076:	689b      	ldr	r3, [r3, #8]
    c078:	9903      	ldr	r1, [sp, #12]
    c07a:	6820      	ldr	r0, [r4, #0]
    c07c:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    c07e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c082:	f3bf 8f5b 	dmb	ish
    c086:	e853 2f00 	ldrex	r2, [r3]
    c08a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    c08e:	e843 2100 	strex	r1, r2, [r3]
    c092:	2900      	cmp	r1, #0
    c094:	d1f7      	bne.n	c086 <smp_pairing_random+0x186>
    c096:	f3bf 8f5b 	dmb	ish
    c09a:	f3bf 8f5b 	dmb	ish
    c09e:	e857 3f00 	ldrex	r3, [r7]
    c0a2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c0a6:	e847 3200 	strex	r2, r3, [r7]
    c0aa:	2a00      	cmp	r2, #0
    c0ac:	d1f7      	bne.n	c09e <smp_pairing_random+0x19e>
    c0ae:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    c0b2:	4620      	mov	r0, r4
    c0b4:	f7fe fe0b 	bl	acce <smp_send_pairing_random>
	return 0;
    c0b8:	2600      	movs	r6, #0
    c0ba:	e746      	b.n	bf4a <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    c0bc:	4620      	mov	r0, r4
    c0be:	f7fe fecd 	bl	ae5c <sc_smp_check_confirm>
		if (err) {
    c0c2:	4606      	mov	r6, r0
    c0c4:	2800      	cmp	r0, #0
    c0c6:	f47f af40 	bne.w	bf4a <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    c0ca:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    c0ce:	f3bf 8f5b 	dmb	ish
    c0d2:	e855 3f00 	ldrex	r3, [r5]
    c0d6:	f043 0308 	orr.w	r3, r3, #8
    c0da:	e845 3200 	strex	r2, r3, [r5]
    c0de:	2a00      	cmp	r2, #0
    c0e0:	d1f7      	bne.n	c0d2 <smp_pairing_random+0x1d2>
    c0e2:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    c0e6:	4620      	mov	r0, r4
    c0e8:	f7fe fdf1 	bl	acce <smp_send_pairing_random>
		smp->passkey_round++;
    c0ec:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    c0f0:	3301      	adds	r3, #1
    c0f2:	b2db      	uxtb	r3, r3
    c0f4:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    c0f8:	2b14      	cmp	r3, #20
    c0fa:	d009      	beq.n	c110 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    c0fc:	2110      	movs	r1, #16
    c0fe:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    c102:	f005 fb0d 	bl	11720 <bt_rand>
    c106:	2800      	cmp	r0, #0
    c108:	f43f af1f 	beq.w	bf4a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c10c:	2608      	movs	r6, #8
    c10e:	e71c      	b.n	bf4a <smp_pairing_random+0x4a>
    c110:	f3bf 8f5b 	dmb	ish
    c114:	e855 3f00 	ldrex	r3, [r5]
    c118:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c11c:	e845 3200 	strex	r2, r3, [r5]
    c120:	2a00      	cmp	r2, #0
    c122:	d1f7      	bne.n	c114 <smp_pairing_random+0x214>
    c124:	f3bf 8f5b 	dmb	ish
    c128:	f3bf 8f5b 	dmb	ish
    c12c:	e857 3f00 	ldrex	r3, [r7]
    c130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    c134:	e847 3200 	strex	r2, r3, [r7]
    c138:	2a00      	cmp	r2, #0
    c13a:	d1f7      	bne.n	c12c <smp_pairing_random+0x22c>
    c13c:	f3bf 8f5b 	dmb	ish
			return 0;
    c140:	e703      	b.n	bf4a <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    c142:	2608      	movs	r6, #8
    c144:	e701      	b.n	bf4a <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    c146:	2608      	movs	r6, #8
    c148:	e6ff      	b.n	bf4a <smp_pairing_random+0x4a>
    c14a:	bf00      	nop
    c14c:	20000a6c 	.word	0x20000a6c
    c150:	20002ab0 	.word	0x20002ab0

0000c154 <generate_dhkey>:
{
    c154:	b510      	push	{r4, lr}
    c156:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    c158:	490a      	ldr	r1, [pc, #40]	; (c184 <generate_dhkey+0x30>)
    c15a:	30f3      	adds	r0, #243	; 0xf3
    c15c:	f7fa fd1e 	bl	6b9c <bt_dh_key_gen>
    c160:	b108      	cbz	r0, c166 <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    c162:	2008      	movs	r0, #8
}
    c164:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    c166:	34a0      	adds	r4, #160	; 0xa0
    c168:	f3bf 8f5b 	dmb	ish
    c16c:	e854 3f00 	ldrex	r3, [r4]
    c170:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c174:	e844 3200 	strex	r2, r3, [r4]
    c178:	2a00      	cmp	r2, #0
    c17a:	d1f7      	bne.n	c16c <generate_dhkey+0x18>
    c17c:	f3bf 8f5b 	dmb	ish
	return 0;
    c180:	bd10      	pop	{r4, pc}
    c182:	bf00      	nop
    c184:	0000b745 	.word	0x0000b745

0000c188 <smp_public_key_slave>:
{
    c188:	b510      	push	{r4, lr}
    c18a:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    c18c:	f7fe fd60 	bl	ac50 <sc_send_public_key>
	if (err) {
    c190:	4603      	mov	r3, r0
    c192:	2800      	cmp	r0, #0
    c194:	d154      	bne.n	c240 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    c196:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c19a:	2b03      	cmp	r3, #3
    c19c:	d852      	bhi.n	c244 <smp_public_key_slave+0xbc>
    c19e:	e8df f003 	tbb	[pc, r3]
    c1a2:	2a02      	.short	0x2a02
    c1a4:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    c1a6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c1aa:	f3bf 8f5b 	dmb	ish
    c1ae:	e853 2f00 	ldrex	r2, [r3]
    c1b2:	f042 0210 	orr.w	r2, r2, #16
    c1b6:	e843 2100 	strex	r1, r2, [r3]
    c1ba:	2900      	cmp	r1, #0
    c1bc:	d1f7      	bne.n	c1ae <smp_public_key_slave+0x26>
    c1be:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    c1c2:	4620      	mov	r0, r4
    c1c4:	f7ff f8ca 	bl	b35c <smp_send_pairing_confirm>
		if (err) {
    c1c8:	4603      	mov	r3, r0
    c1ca:	b3a8      	cbz	r0, c238 <smp_public_key_slave+0xb0>
    c1cc:	e038      	b.n	c240 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    c1ce:	4620      	mov	r0, r4
    c1d0:	f7fe fcea 	bl	aba8 <display_passkey>
		if (err) {
    c1d4:	4603      	mov	r3, r0
    c1d6:	bb98      	cbnz	r0, c240 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c1d8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c1dc:	f3bf 8f5b 	dmb	ish
    c1e0:	e853 2f00 	ldrex	r2, [r3]
    c1e4:	f042 0208 	orr.w	r2, r2, #8
    c1e8:	e843 2100 	strex	r1, r2, [r3]
    c1ec:	2900      	cmp	r1, #0
    c1ee:	d1f7      	bne.n	c1e0 <smp_public_key_slave+0x58>
    c1f0:	f3bf 8f5b 	dmb	ish
    c1f4:	e020      	b.n	c238 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c1f6:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c1fa:	f3bf 8f5b 	dmb	ish
    c1fe:	e853 2f00 	ldrex	r2, [r3]
    c202:	f042 0208 	orr.w	r2, r2, #8
    c206:	e843 2100 	strex	r1, r2, [r3]
    c20a:	2900      	cmp	r1, #0
    c20c:	d1f7      	bne.n	c1fe <smp_public_key_slave+0x76>
    c20e:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c212:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c216:	f3bf 8f5b 	dmb	ish
    c21a:	e853 2f00 	ldrex	r2, [r3]
    c21e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c222:	e843 2100 	strex	r1, r2, [r3]
    c226:	2900      	cmp	r1, #0
    c228:	d1f7      	bne.n	c21a <smp_public_key_slave+0x92>
    c22a:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    c22e:	4b06      	ldr	r3, [pc, #24]	; (c248 <smp_public_key_slave+0xc0>)
    c230:	681b      	ldr	r3, [r3, #0]
    c232:	685b      	ldr	r3, [r3, #4]
    c234:	6820      	ldr	r0, [r4, #0]
    c236:	4798      	blx	r3
	return generate_dhkey(smp);
    c238:	4620      	mov	r0, r4
    c23a:	f7ff ff8b 	bl	c154 <generate_dhkey>
    c23e:	4603      	mov	r3, r0
}
    c240:	4618      	mov	r0, r3
    c242:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    c244:	2308      	movs	r3, #8
    c246:	e7fb      	b.n	c240 <smp_public_key_slave+0xb8>
    c248:	20002ab0 	.word	0x20002ab0

0000c24c <bt_smp_pkey_ready>:
{
    c24c:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    c24e:	b150      	cbz	r0, c266 <bt_smp_pkey_ready+0x1a>
    c250:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    c252:	2240      	movs	r2, #64	; 0x40
    c254:	4826      	ldr	r0, [pc, #152]	; (c2f0 <bt_smp_pkey_ready+0xa4>)
    c256:	f7f4 f833 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    c25a:	2201      	movs	r2, #1
    c25c:	4b25      	ldr	r3, [pc, #148]	; (c2f4 <bt_smp_pkey_ready+0xa8>)
    c25e:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c260:	2400      	movs	r4, #0
    c262:	b124      	cbz	r4, c26e <bt_smp_pkey_ready+0x22>
    c264:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    c266:	2200      	movs	r2, #0
    c268:	4b22      	ldr	r3, [pc, #136]	; (c2f4 <bt_smp_pkey_ready+0xa8>)
    c26a:	701a      	strb	r2, [r3, #0]
		return;
    c26c:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    c26e:	4a22      	ldr	r2, [pc, #136]	; (c2f8 <bt_smp_pkey_ready+0xac>)
    c270:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c274:	fb03 f304 	mul.w	r3, r3, r4
    c278:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    c27a:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c27c:	f3bf 8f5b 	dmb	ish
    c280:	58d3      	ldr	r3, [r2, r3]
    c282:	f3bf 8f5b 	dmb	ish
    c286:	f013 0f40 	tst.w	r3, #64	; 0x40
    c28a:	d020      	beq.n	c2ce <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c28c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c290:	fb03 f304 	mul.w	r3, r3, r4
    c294:	58d3      	ldr	r3, [r2, r3]
    c296:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c298:	b9fb      	cbnz	r3, c2da <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    c29a:	4628      	mov	r0, r5
    c29c:	f7fe fcd8 	bl	ac50 <sc_send_public_key>
			if (err) {
    c2a0:	4601      	mov	r1, r0
    c2a2:	b9b0      	cbnz	r0, c2d2 <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    c2a4:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    c2a8:	fb03 f304 	mul.w	r3, r3, r4
    c2ac:	f103 0298 	add.w	r2, r3, #152	; 0x98
    c2b0:	4b11      	ldr	r3, [pc, #68]	; (c2f8 <bt_smp_pkey_ready+0xac>)
    c2b2:	4413      	add	r3, r2
    c2b4:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c2b6:	f3bf 8f5b 	dmb	ish
    c2ba:	e853 2f00 	ldrex	r2, [r3]
    c2be:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c2c2:	e843 2100 	strex	r1, r2, [r3]
    c2c6:	2900      	cmp	r1, #0
    c2c8:	d1f7      	bne.n	c2ba <bt_smp_pkey_ready+0x6e>
    c2ca:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    c2ce:	3401      	adds	r4, #1
    c2d0:	e7c7      	b.n	c262 <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    c2d2:	4628      	mov	r0, r5
    c2d4:	f7ff fa19 	bl	b70a <smp_error>
    c2d8:	e7e4      	b.n	c2a4 <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    c2da:	4628      	mov	r0, r5
    c2dc:	f7ff ff54 	bl	c188 <smp_public_key_slave>
		if (err) {
    c2e0:	4601      	mov	r1, r0
    c2e2:	2800      	cmp	r0, #0
    c2e4:	d0f3      	beq.n	c2ce <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    c2e6:	4628      	mov	r0, r5
    c2e8:	f7ff fa0f 	bl	b70a <smp_error>
    c2ec:	e7ef      	b.n	c2ce <bt_smp_pkey_ready+0x82>
    c2ee:	bf00      	nop
    c2f0:	20000a6c 	.word	0x20000a6c
    c2f4:	20000a68 	.word	0x20000a68
    c2f8:	200008c4 	.word	0x200008c4

0000c2fc <smp_public_key>:
{
    c2fc:	b570      	push	{r4, r5, r6, lr}
    c2fe:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    c300:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    c302:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    c306:	2220      	movs	r2, #32
    c308:	4631      	mov	r1, r6
    c30a:	4628      	mov	r0, r5
    c30c:	f7f3 ffd8 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    c310:	2220      	movs	r2, #32
    c312:	18b1      	adds	r1, r6, r2
    c314:	f204 1013 	addw	r0, r4, #275	; 0x113
    c318:	f7f3 ffd2 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    c31c:	2240      	movs	r2, #64	; 0x40
    c31e:	493d      	ldr	r1, [pc, #244]	; (c414 <smp_public_key+0x118>)
    c320:	4628      	mov	r0, r5
    c322:	f01e fa91 	bl	2a848 <memcmp>
    c326:	b158      	cbz	r0, c340 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    c328:	6823      	ldr	r3, [r4, #0]
    c32a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c32c:	2b00      	cmp	r3, #0
    c32e:	d156      	bne.n	c3de <smp_public_key+0xe2>
		switch (smp->method) {
    c330:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c334:	2b03      	cmp	r3, #3
    c336:	d86a      	bhi.n	c40e <smp_public_key+0x112>
    c338:	e8df f003 	tbb	[pc, r3]
    c33c:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    c340:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c344:	f3bf 8f5b 	dmb	ish
    c348:	e853 2f00 	ldrex	r2, [r3]
    c34c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    c350:	e843 2100 	strex	r1, r2, [r3]
    c354:	2900      	cmp	r1, #0
    c356:	d1f7      	bne.n	c348 <smp_public_key+0x4c>
    c358:	f3bf 8f5b 	dmb	ish
    c35c:	e7e4      	b.n	c328 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    c35e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c362:	f3bf 8f5b 	dmb	ish
    c366:	e853 2f00 	ldrex	r2, [r3]
    c36a:	f042 0208 	orr.w	r2, r2, #8
    c36e:	e843 2100 	strex	r1, r2, [r3]
    c372:	2900      	cmp	r1, #0
    c374:	d1f7      	bne.n	c366 <smp_public_key+0x6a>
    c376:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    c37a:	4620      	mov	r0, r4
    c37c:	f7ff feea 	bl	c154 <generate_dhkey>
    c380:	4603      	mov	r3, r0
    c382:	e033      	b.n	c3ec <smp_public_key+0xf0>
			err = display_passkey(smp);
    c384:	4620      	mov	r0, r4
    c386:	f7fe fc0f 	bl	aba8 <display_passkey>
			if (err) {
    c38a:	4603      	mov	r3, r0
    c38c:	bb70      	cbnz	r0, c3ec <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    c38e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c392:	f3bf 8f5b 	dmb	ish
    c396:	e853 2f00 	ldrex	r2, [r3]
    c39a:	f042 0208 	orr.w	r2, r2, #8
    c39e:	e843 2100 	strex	r1, r2, [r3]
    c3a2:	2900      	cmp	r1, #0
    c3a4:	d1f7      	bne.n	c396 <smp_public_key+0x9a>
    c3a6:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    c3aa:	4620      	mov	r0, r4
    c3ac:	f7fe ffd6 	bl	b35c <smp_send_pairing_confirm>
			if (err) {
    c3b0:	4603      	mov	r3, r0
    c3b2:	b9d8      	cbnz	r0, c3ec <smp_public_key+0xf0>
    c3b4:	e7e1      	b.n	c37a <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c3b6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c3ba:	f3bf 8f5b 	dmb	ish
    c3be:	e853 2f00 	ldrex	r2, [r3]
    c3c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    c3c6:	e843 2100 	strex	r1, r2, [r3]
    c3ca:	2900      	cmp	r1, #0
    c3cc:	d1f7      	bne.n	c3be <smp_public_key+0xc2>
    c3ce:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    c3d2:	4b11      	ldr	r3, [pc, #68]	; (c418 <smp_public_key+0x11c>)
    c3d4:	681b      	ldr	r3, [r3, #0]
    c3d6:	685b      	ldr	r3, [r3, #4]
    c3d8:	6820      	ldr	r0, [r4, #0]
    c3da:	4798      	blx	r3
			break;
    c3dc:	e7cd      	b.n	c37a <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    c3de:	4b0f      	ldr	r3, [pc, #60]	; (c41c <smp_public_key+0x120>)
    c3e0:	781b      	ldrb	r3, [r3, #0]
    c3e2:	b12b      	cbz	r3, c3f0 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    c3e4:	4620      	mov	r0, r4
    c3e6:	f7ff fecf 	bl	c188 <smp_public_key_slave>
    c3ea:	4603      	mov	r3, r0
}
    c3ec:	4618      	mov	r0, r3
    c3ee:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    c3f0:	34a0      	adds	r4, #160	; 0xa0
    c3f2:	f3bf 8f5b 	dmb	ish
    c3f6:	e854 3f00 	ldrex	r3, [r4]
    c3fa:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c3fe:	e844 3200 	strex	r2, r3, [r4]
    c402:	2a00      	cmp	r2, #0
    c404:	d1f7      	bne.n	c3f6 <smp_public_key+0xfa>
    c406:	f3bf 8f5b 	dmb	ish
		return 0;
    c40a:	2300      	movs	r3, #0
    c40c:	e7ee      	b.n	c3ec <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    c40e:	2308      	movs	r3, #8
    c410:	e7ec      	b.n	c3ec <smp_public_key+0xf0>
    c412:	bf00      	nop
    c414:	000318d4 	.word	0x000318d4
    c418:	20002ab0 	.word	0x20002ab0
    c41c:	20000a68 	.word	0x20000a68

0000c420 <smp_signing_info>:
{
    c420:	b570      	push	{r4, r5, r6, lr}
    c422:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c424:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c426:	f3bf 8f5b 	dmb	ish
    c42a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c42e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c432:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c436:	d111      	bne.n	c45c <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    c438:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c43c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    c440:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c444:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c446:	b902      	cbnz	r2, c44a <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c448:	b1ab      	cbz	r3, c476 <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    c44a:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c44e:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c452:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c456:	b193      	cbz	r3, c47e <smp_signing_info+0x5e>
	return 0;
    c458:	2000      	movs	r0, #0
}
    c45a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    c45c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c45e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c462:	2010      	movs	r0, #16
    c464:	f000 ff8e 	bl	d384 <bt_keys_get_type>
		if (!keys) {
    c468:	b178      	cbz	r0, c48a <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    c46a:	2210      	movs	r2, #16
    c46c:	4631      	mov	r1, r6
    c46e:	305c      	adds	r0, #92	; 0x5c
    c470:	f7f3 ff26 	bl	2c0 <memcpy>
    c474:	e7e0      	b.n	c438 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    c476:	4620      	mov	r0, r4
    c478:	f7ff fac4 	bl	ba04 <bt_smp_distribute_keys>
    c47c:	e7e5      	b.n	c44a <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    c47e:	2100      	movs	r1, #0
    c480:	4620      	mov	r0, r4
    c482:	f7ff f93e 	bl	b702 <smp_pairing_complete>
	return 0;
    c486:	2000      	movs	r0, #0
    c488:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c48a:	2008      	movs	r0, #8
    c48c:	bd70      	pop	{r4, r5, r6, pc}

0000c48e <smp_ident_info>:
{
    c48e:	b538      	push	{r3, r4, r5, lr}
    c490:	4604      	mov	r4, r0
    c492:	f3bf 8f5b 	dmb	ish
    c496:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c49a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c49e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c4a2:	d00b      	beq.n	c4bc <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    c4a4:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c4a6:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c4a8:	3148      	adds	r1, #72	; 0x48
    c4aa:	2002      	movs	r0, #2
    c4ac:	f000 ff6a 	bl	d384 <bt_keys_get_type>
		if (!keys) {
    c4b0:	b198      	cbz	r0, c4da <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    c4b2:	2210      	movs	r2, #16
    c4b4:	4629      	mov	r1, r5
    c4b6:	3030      	adds	r0, #48	; 0x30
    c4b8:	f7f3 ff02 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    c4bc:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c4be:	f3bf 8f5b 	dmb	ish
    c4c2:	e854 3f00 	ldrex	r3, [r4]
    c4c6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c4ca:	e844 3200 	strex	r2, r3, [r4]
    c4ce:	2a00      	cmp	r2, #0
    c4d0:	d1f7      	bne.n	c4c2 <smp_ident_info+0x34>
    c4d2:	f3bf 8f5b 	dmb	ish
	return 0;
    c4d6:	2000      	movs	r0, #0
    c4d8:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c4da:	2008      	movs	r0, #8
}
    c4dc:	bd38      	pop	{r3, r4, r5, pc}

0000c4de <smp_master_ident>:
{
    c4de:	b570      	push	{r4, r5, r6, lr}
    c4e0:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c4e2:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c4e4:	f3bf 8f5b 	dmb	ish
    c4e8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c4ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c4f0:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c4f4:	d116      	bne.n	c524 <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    c4f6:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c4fa:	f013 0f02 	tst.w	r3, #2
    c4fe:	d127      	bne.n	c550 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c500:	f013 0f04 	tst.w	r3, #4
    c504:	d133      	bne.n	c56e <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c506:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c508:	b91b      	cbnz	r3, c512 <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c50a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c50e:	2b00      	cmp	r3, #0
    c510:	d03c      	beq.n	c58c <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    c512:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c516:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c51a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c51e:	b3cb      	cbz	r3, c594 <smp_master_ident+0xb6>
	return 0;
    c520:	2000      	movs	r0, #0
}
    c522:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    c524:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c526:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c52a:	2004      	movs	r0, #4
    c52c:	f000 ff2a 	bl	d384 <bt_keys_get_type>
		if (!keys) {
    c530:	b3b0      	cbz	r0, c5a0 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    c532:	8832      	ldrh	r2, [r6, #0]
    c534:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    c536:	f8d6 1002 	ldr.w	r1, [r6, #2]
    c53a:	f8d6 2006 	ldr.w	r2, [r6, #6]
    c53e:	6101      	str	r1, [r0, #16]
    c540:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    c542:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c546:	f023 0301 	bic.w	r3, r3, #1
    c54a:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    c54e:	e7d2      	b.n	c4f6 <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    c550:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c554:	f3bf 8f5b 	dmb	ish
    c558:	e853 2f00 	ldrex	r2, [r3]
    c55c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    c560:	e843 2100 	strex	r1, r2, [r3]
    c564:	2900      	cmp	r1, #0
    c566:	d1f7      	bne.n	c558 <smp_master_ident+0x7a>
    c568:	f3bf 8f5b 	dmb	ish
    c56c:	e7cb      	b.n	c506 <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c56e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c572:	f3bf 8f5b 	dmb	ish
    c576:	e853 2f00 	ldrex	r2, [r3]
    c57a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c57e:	e843 2100 	strex	r1, r2, [r3]
    c582:	2900      	cmp	r1, #0
    c584:	d1f7      	bne.n	c576 <smp_master_ident+0x98>
    c586:	f3bf 8f5b 	dmb	ish
    c58a:	e7bc      	b.n	c506 <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    c58c:	4620      	mov	r0, r4
    c58e:	f7ff fa39 	bl	ba04 <bt_smp_distribute_keys>
    c592:	e7be      	b.n	c512 <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    c594:	2100      	movs	r1, #0
    c596:	4620      	mov	r0, r4
    c598:	f7ff f8b3 	bl	b702 <smp_pairing_complete>
	return 0;
    c59c:	2000      	movs	r0, #0
    c59e:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c5a0:	2008      	movs	r0, #8
    c5a2:	bd70      	pop	{r4, r5, r6, pc}

0000c5a4 <smp_encrypt_info>:
{
    c5a4:	b538      	push	{r3, r4, r5, lr}
    c5a6:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c5a8:	f3bf 8f5b 	dmb	ish
    c5ac:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c5b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c5b4:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c5b8:	d00b      	beq.n	c5d2 <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    c5ba:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    c5bc:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    c5be:	3148      	adds	r1, #72	; 0x48
    c5c0:	2004      	movs	r0, #4
    c5c2:	f000 fedf 	bl	d384 <bt_keys_get_type>
		if (!keys) {
    c5c6:	b198      	cbz	r0, c5f0 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    c5c8:	2210      	movs	r2, #16
    c5ca:	4629      	mov	r1, r5
    c5cc:	301a      	adds	r0, #26
    c5ce:	f7f3 fe77 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    c5d2:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c5d4:	f3bf 8f5b 	dmb	ish
    c5d8:	e854 3f00 	ldrex	r3, [r4]
    c5dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    c5e0:	e844 3200 	strex	r2, r3, [r4]
    c5e4:	2a00      	cmp	r2, #0
    c5e6:	d1f7      	bne.n	c5d8 <smp_encrypt_info+0x34>
    c5e8:	f3bf 8f5b 	dmb	ish
	return 0;
    c5ec:	2000      	movs	r0, #0
    c5ee:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c5f0:	2008      	movs	r0, #8
}
    c5f2:	bd38      	pop	{r3, r4, r5, pc}

0000c5f4 <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    c5f4:	7883      	ldrb	r3, [r0, #2]
    c5f6:	b103      	cbz	r3, c5fa <smp_check_complete+0x6>
    c5f8:	4770      	bx	lr
{
    c5fa:	b510      	push	{r4, lr}
    c5fc:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    c5fe:	2106      	movs	r1, #6
    c600:	f7fb ffa1 	bl	8546 <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    c604:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    c608:	ea21 0104 	bic.w	r1, r1, r4
    c60c:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    c610:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    c614:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c618:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c61c:	b103      	cbz	r3, c620 <smp_check_complete+0x2c>
    c61e:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    c620:	2100      	movs	r1, #0
    c622:	f7ff f86e 	bl	b702 <smp_pairing_complete>
    c626:	e7fa      	b.n	c61e <smp_check_complete+0x2a>

0000c628 <sign_info_sent>:
{
    c628:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    c62a:	2104      	movs	r1, #4
    c62c:	f7ff ffe2 	bl	c5f4 <smp_check_complete>
    c630:	bd08      	pop	{r3, pc}

0000c632 <ident_sent>:
{
    c632:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    c634:	2101      	movs	r1, #1
    c636:	f7ff ffdd 	bl	c5f4 <smp_check_complete>
    c63a:	bd08      	pop	{r3, pc}

0000c63c <smp_ident_addr_info>:
{
    c63c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    c640:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    c642:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c644:	782b      	ldrb	r3, [r5, #0]
    c646:	b153      	cbz	r3, c65e <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    c648:	79ab      	ldrb	r3, [r5, #6]
    c64a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c64e:	2bc0      	cmp	r3, #192	; 0xc0
    c650:	bf14      	ite	ne
    c652:	2300      	movne	r3, #0
    c654:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    c656:	b923      	cbnz	r3, c662 <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    c658:	200a      	movs	r0, #10
    c65a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    c65e:	2301      	movs	r3, #1
    c660:	e7f9      	b.n	c656 <smp_ident_addr_info+0x1a>
    c662:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c664:	f3bf 8f5b 	dmb	ish
    c668:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c66c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    c670:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c674:	d119      	bne.n	c6aa <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    c676:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c67a:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    c67e:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    c682:	f013 0f04 	tst.w	r3, #4
    c686:	d14f      	bne.n	c728 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c688:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    c68a:	b91b      	cbnz	r3, c694 <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    c68c:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c690:	2b00      	cmp	r3, #0
    c692:	d058      	beq.n	c746 <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    c694:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    c698:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    c69c:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    c6a0:	2b00      	cmp	r3, #0
    c6a2:	d054      	beq.n	c74e <smp_ident_addr_info+0x112>
	return 0;
    c6a4:	2000      	movs	r0, #0
}
    c6a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    c6aa:	f106 0848 	add.w	r8, r6, #72	; 0x48
    c6ae:	4641      	mov	r1, r8
    c6b0:	2002      	movs	r0, #2
    c6b2:	f000 fe67 	bl	d384 <bt_keys_get_type>
		if (!keys) {
    c6b6:	4681      	mov	r9, r0
    c6b8:	2800      	cmp	r0, #0
    c6ba:	d04f      	beq.n	c75c <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    c6bc:	78f3      	ldrb	r3, [r6, #3]
    c6be:	bb43      	cbnz	r3, c712 <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    c6c0:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c6c4:	780b      	ldrb	r3, [r1, #0]
    c6c6:	2b01      	cmp	r3, #1
    c6c8:	d026      	beq.n	c718 <smp_ident_addr_info+0xdc>
		return false;
    c6ca:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    c6cc:	2f00      	cmp	r7, #0
    c6ce:	d0d2      	beq.n	c676 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c6d0:	2206      	movs	r2, #6
    c6d2:	3101      	adds	r1, #1
    c6d4:	f109 0040 	add.w	r0, r9, #64	; 0x40
    c6d8:	f7f3 fdf2 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    c6dc:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    c6e0:	b13b      	cbz	r3, c6f2 <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    c6e2:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    c6e6:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c6ea:	2fc0      	cmp	r7, #192	; 0xc0
    c6ec:	bf14      	ite	ne
    c6ee:	2700      	movne	r7, #0
    c6f0:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    c6f2:	2f00      	cmp	r7, #0
    c6f4:	d1bf      	bne.n	c676 <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    c6f6:	2207      	movs	r2, #7
    c6f8:	4629      	mov	r1, r5
    c6fa:	4648      	mov	r0, r9
    c6fc:	f7f3 fde0 	bl	2c0 <memcpy>
    c700:	2207      	movs	r2, #7
    c702:	4629      	mov	r1, r5
    c704:	4640      	mov	r0, r8
    c706:	f7f3 fddb 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    c70a:	4630      	mov	r0, r6
    c70c:	f7fa fba4 	bl	6e58 <bt_conn_identity_resolved>
    c710:	e7b1      	b.n	c676 <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    c712:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    c716:	e7d5      	b.n	c6c4 <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    c718:	798f      	ldrb	r7, [r1, #6]
    c71a:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    c71e:	2f40      	cmp	r7, #64	; 0x40
    c720:	bf14      	ite	ne
    c722:	2700      	movne	r7, #0
    c724:	2701      	moveq	r7, #1
    c726:	e7d1      	b.n	c6cc <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    c728:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c72c:	f3bf 8f5b 	dmb	ish
    c730:	e853 2f00 	ldrex	r2, [r3]
    c734:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c738:	e843 2100 	strex	r1, r2, [r3]
    c73c:	2900      	cmp	r1, #0
    c73e:	d1f7      	bne.n	c730 <smp_ident_addr_info+0xf4>
    c740:	f3bf 8f5b 	dmb	ish
    c744:	e7a0      	b.n	c688 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    c746:	4620      	mov	r0, r4
    c748:	f7ff f95c 	bl	ba04 <bt_smp_distribute_keys>
    c74c:	e7a2      	b.n	c694 <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    c74e:	2100      	movs	r1, #0
    c750:	4620      	mov	r0, r4
    c752:	f7fe ffd6 	bl	b702 <smp_pairing_complete>
	return 0;
    c756:	2000      	movs	r0, #0
    c758:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    c75c:	2008      	movs	r0, #8
    c75e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000c764 <legacy_request_tk>:
{
    c764:	b570      	push	{r4, r5, r6, lr}
    c766:	b082      	sub	sp, #8
    c768:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c76a:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    c76c:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c770:	f000 fdea 	bl	d348 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c774:	b168      	cbz	r0, c792 <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c776:	f3bf 8f5b 	dmb	ish
    c77a:	6883      	ldr	r3, [r0, #8]
    c77c:	f3bf 8f5b 	dmb	ish
    c780:	f013 0f01 	tst.w	r3, #1
    c784:	d005      	beq.n	c792 <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    c786:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    c78a:	b913      	cbnz	r3, c792 <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    c78c:	2008      	movs	r0, #8
}
    c78e:	b002      	add	sp, #8
    c790:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    c792:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    c796:	2b01      	cmp	r3, #1
    c798:	d025      	beq.n	c7e6 <legacy_request_tk+0x82>
    c79a:	2b00      	cmp	r3, #0
    c79c:	d037      	beq.n	c80e <legacy_request_tk+0xaa>
    c79e:	2b02      	cmp	r3, #2
    c7a0:	d001      	beq.n	c7a6 <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    c7a2:	2008      	movs	r0, #8
    c7a4:	e7f3      	b.n	c78e <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    c7a6:	2104      	movs	r1, #4
    c7a8:	eb0d 0001 	add.w	r0, sp, r1
    c7ac:	f004 ffb8 	bl	11720 <bt_rand>
    c7b0:	b108      	cbz	r0, c7b6 <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    c7b2:	2008      	movs	r0, #8
    c7b4:	e7eb      	b.n	c78e <legacy_request_tk+0x2a>
		passkey %= 1000000;
    c7b6:	9b01      	ldr	r3, [sp, #4]
    c7b8:	4916      	ldr	r1, [pc, #88]	; (c814 <legacy_request_tk+0xb0>)
    c7ba:	fba1 2103 	umull	r2, r1, r1, r3
    c7be:	0c89      	lsrs	r1, r1, #18
    c7c0:	4a15      	ldr	r2, [pc, #84]	; (c818 <legacy_request_tk+0xb4>)
    c7c2:	fb02 3111 	mls	r1, r2, r1, r3
    c7c6:	ae02      	add	r6, sp, #8
    c7c8:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    c7cc:	4b13      	ldr	r3, [pc, #76]	; (c81c <legacy_request_tk+0xb8>)
    c7ce:	681b      	ldr	r3, [r3, #0]
    c7d0:	681b      	ldr	r3, [r3, #0]
    c7d2:	4628      	mov	r0, r5
    c7d4:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    c7d6:	2204      	movs	r2, #4
    c7d8:	4631      	mov	r1, r6
    c7da:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    c7de:	f7f3 fd6f 	bl	2c0 <memcpy>
	return 0;
    c7e2:	2000      	movs	r0, #0
		break;
    c7e4:	e7d3      	b.n	c78e <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    c7e6:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c7e8:	f3bf 8f5b 	dmb	ish
    c7ec:	e854 3f00 	ldrex	r3, [r4]
    c7f0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c7f4:	e844 3200 	strex	r2, r3, [r4]
    c7f8:	2a00      	cmp	r2, #0
    c7fa:	d1f7      	bne.n	c7ec <legacy_request_tk+0x88>
    c7fc:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    c800:	4b06      	ldr	r3, [pc, #24]	; (c81c <legacy_request_tk+0xb8>)
    c802:	681b      	ldr	r3, [r3, #0]
    c804:	685b      	ldr	r3, [r3, #4]
    c806:	4628      	mov	r0, r5
    c808:	4798      	blx	r3
	return 0;
    c80a:	2000      	movs	r0, #0
		break;
    c80c:	e7bf      	b.n	c78e <legacy_request_tk+0x2a>
	return 0;
    c80e:	2000      	movs	r0, #0
    c810:	e7bd      	b.n	c78e <legacy_request_tk+0x2a>
    c812:	bf00      	nop
    c814:	431bde83 	.word	0x431bde83
    c818:	000f4240 	.word	0x000f4240
    c81c:	20002ab0 	.word	0x20002ab0

0000c820 <legacy_pairing_rsp>:
{
    c820:	b538      	push	{r3, r4, r5, lr}
    c822:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c824:	f7fe f90a 	bl	aa3c <legacy_get_pair_method>
    c828:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c82c:	bb10      	cbnz	r0, c874 <legacy_pairing_rsp+0x54>
    c82e:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c830:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c834:	f3bf 8f5b 	dmb	ish
    c838:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c83c:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c840:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c844:	d016      	beq.n	c874 <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c846:	4b24      	ldr	r3, [pc, #144]	; (c8d8 <legacy_pairing_rsp+0xb8>)
    c848:	681b      	ldr	r3, [r3, #0]
    c84a:	b19b      	cbz	r3, c874 <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c84c:	691b      	ldr	r3, [r3, #16]
    c84e:	b18b      	cbz	r3, c874 <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c850:	f3bf 8f5b 	dmb	ish
    c854:	e852 3f00 	ldrex	r3, [r2]
    c858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c85c:	e842 3100 	strex	r1, r3, [r2]
    c860:	2900      	cmp	r1, #0
    c862:	d1f7      	bne.n	c854 <legacy_pairing_rsp+0x34>
    c864:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c868:	4b1b      	ldr	r3, [pc, #108]	; (c8d8 <legacy_pairing_rsp+0xb8>)
    c86a:	681b      	ldr	r3, [r3, #0]
    c86c:	691b      	ldr	r3, [r3, #16]
    c86e:	6828      	ldr	r0, [r5, #0]
    c870:	4798      	blx	r3
		return 0;
    c872:	e004      	b.n	c87e <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    c874:	4628      	mov	r0, r5
    c876:	f7ff ff75 	bl	c764 <legacy_request_tk>
	if (ret) {
    c87a:	4604      	mov	r4, r0
    c87c:	b108      	cbz	r0, c882 <legacy_pairing_rsp+0x62>
}
    c87e:	4620      	mov	r0, r4
    c880:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    c882:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c886:	f3bf 8f5b 	dmb	ish
    c88a:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    c88e:	f3bf 8f5b 	dmb	ish
    c892:	f412 7f00 	tst.w	r2, #512	; 0x200
    c896:	d00c      	beq.n	c8b2 <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c898:	f3bf 8f5b 	dmb	ish
    c89c:	e853 2f00 	ldrex	r2, [r3]
    c8a0:	f042 0201 	orr.w	r2, r2, #1
    c8a4:	e843 2100 	strex	r1, r2, [r3]
    c8a8:	2900      	cmp	r1, #0
    c8aa:	d1f7      	bne.n	c89c <legacy_pairing_rsp+0x7c>
    c8ac:	f3bf 8f5b 	dmb	ish
	return 0;
    c8b0:	e7e5      	b.n	c87e <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c8b2:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c8b6:	f3bf 8f5b 	dmb	ish
    c8ba:	e853 2f00 	ldrex	r2, [r3]
    c8be:	f042 0208 	orr.w	r2, r2, #8
    c8c2:	e843 2100 	strex	r1, r2, [r3]
    c8c6:	2900      	cmp	r1, #0
    c8c8:	d1f7      	bne.n	c8ba <legacy_pairing_rsp+0x9a>
    c8ca:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    c8ce:	4628      	mov	r0, r5
    c8d0:	f7fe fdd8 	bl	b484 <legacy_send_pairing_confirm>
    c8d4:	4604      	mov	r4, r0
    c8d6:	e7d2      	b.n	c87e <legacy_pairing_rsp+0x5e>
    c8d8:	20002ab0 	.word	0x20002ab0

0000c8dc <smp_pairing_rsp>:
{
    c8dc:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    c8de:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c8e0:	78eb      	ldrb	r3, [r5, #3]
    c8e2:	3b07      	subs	r3, #7
    c8e4:	b2db      	uxtb	r3, r3
    c8e6:	2b09      	cmp	r3, #9
    c8e8:	d902      	bls.n	c8f0 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c8ea:	2506      	movs	r5, #6
}
    c8ec:	4628      	mov	r0, r5
    c8ee:	bd70      	pop	{r4, r5, r6, pc}
    c8f0:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    c8f2:	792b      	ldrb	r3, [r5, #4]
    c8f4:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    c8f8:	4013      	ands	r3, r2
    c8fa:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    c8fe:	796b      	ldrb	r3, [r5, #5]
    c900:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    c904:	4013      	ands	r3, r2
    c906:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c90a:	2302      	movs	r3, #2
    c90c:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    c910:	2206      	movs	r2, #6
    c912:	4629      	mov	r1, r5
    c914:	30ad      	adds	r0, #173	; 0xad
    c916:	f7f3 fcd3 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c91a:	78ab      	ldrb	r3, [r5, #2]
    c91c:	f013 0f08 	tst.w	r3, #8
    c920:	d004      	beq.n	c92c <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c922:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c926:	f013 0f08 	tst.w	r3, #8
    c92a:	d148      	bne.n	c9be <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c92c:	78ab      	ldrb	r3, [r5, #2]
    c92e:	f013 0f20 	tst.w	r3, #32
    c932:	d004      	beq.n	c93e <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c934:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c938:	f013 0f20 	tst.w	r3, #32
    c93c:	d14e      	bne.n	c9dc <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c93e:	78ab      	ldrb	r3, [r5, #2]
    c940:	f013 0f01 	tst.w	r3, #1
    c944:	d004      	beq.n	c950 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c946:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c94a:	f013 0f01 	tst.w	r3, #1
    c94e:	d154      	bne.n	c9fa <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c950:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c954:	f3bf 8f5b 	dmb	ish
    c958:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c95c:	f3bf 8f5b 	dmb	ish
    c960:	f013 0f20 	tst.w	r3, #32
    c964:	d058      	beq.n	ca18 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    c966:	7829      	ldrb	r1, [r5, #0]
    c968:	4620      	mov	r0, r4
    c96a:	f7fe f835 	bl	a9d8 <get_pair_method>
    c96e:	4605      	mov	r5, r0
    c970:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    c974:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    c978:	f003 0304 	and.w	r3, r3, #4
    c97c:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    c980:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    c984:	f003 0306 	and.w	r3, r3, #6
    c988:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    c98c:	2800      	cmp	r0, #0
    c98e:	d049      	beq.n	ca24 <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    c990:	4b3c      	ldr	r3, [pc, #240]	; (ca84 <smp_pairing_rsp+0x1a8>)
    c992:	781b      	ldrb	r3, [r3, #0]
    c994:	2b00      	cmp	r3, #0
    c996:	d067      	beq.n	ca68 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c998:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c99c:	f3bf 8f5b 	dmb	ish
    c9a0:	e853 2f00 	ldrex	r2, [r3]
    c9a4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c9a8:	e843 2100 	strex	r1, r2, [r3]
    c9ac:	2900      	cmp	r1, #0
    c9ae:	d1f7      	bne.n	c9a0 <smp_pairing_rsp+0xc4>
    c9b0:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    c9b4:	4620      	mov	r0, r4
    c9b6:	f7fe f94b 	bl	ac50 <sc_send_public_key>
    c9ba:	4605      	mov	r5, r0
    c9bc:	e796      	b.n	c8ec <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c9be:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c9c2:	f3bf 8f5b 	dmb	ish
    c9c6:	e853 2f00 	ldrex	r2, [r3]
    c9ca:	f042 0220 	orr.w	r2, r2, #32
    c9ce:	e843 2100 	strex	r1, r2, [r3]
    c9d2:	2900      	cmp	r1, #0
    c9d4:	d1f7      	bne.n	c9c6 <smp_pairing_rsp+0xea>
    c9d6:	f3bf 8f5b 	dmb	ish
    c9da:	e7a7      	b.n	c92c <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c9dc:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c9e0:	f3bf 8f5b 	dmb	ish
    c9e4:	e853 2f00 	ldrex	r2, [r3]
    c9e8:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c9ec:	e843 2100 	strex	r1, r2, [r3]
    c9f0:	2900      	cmp	r1, #0
    c9f2:	d1f7      	bne.n	c9e4 <smp_pairing_rsp+0x108>
    c9f4:	f3bf 8f5b 	dmb	ish
    c9f8:	e7a1      	b.n	c93e <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c9fa:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c9fe:	f3bf 8f5b 	dmb	ish
    ca02:	e853 2f00 	ldrex	r2, [r3]
    ca06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ca0a:	e843 2100 	strex	r1, r2, [r3]
    ca0e:	2900      	cmp	r1, #0
    ca10:	d1f7      	bne.n	ca02 <smp_pairing_rsp+0x126>
    ca12:	f3bf 8f5b 	dmb	ish
    ca16:	e79b      	b.n	c950 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    ca18:	7829      	ldrb	r1, [r5, #0]
    ca1a:	4620      	mov	r0, r4
    ca1c:	f7ff ff00 	bl	c820 <legacy_pairing_rsp>
    ca20:	4605      	mov	r5, r0
    ca22:	e763      	b.n	c8ec <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ca24:	f3bf 8f5b 	dmb	ish
    ca28:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ca2c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ca30:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    ca34:	d0ac      	beq.n	c990 <smp_pairing_rsp+0xb4>
    ca36:	4b14      	ldr	r3, [pc, #80]	; (ca88 <smp_pairing_rsp+0x1ac>)
    ca38:	681b      	ldr	r3, [r3, #0]
    ca3a:	2b00      	cmp	r3, #0
    ca3c:	d0a8      	beq.n	c990 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    ca3e:	691b      	ldr	r3, [r3, #16]
    ca40:	2b00      	cmp	r3, #0
    ca42:	d0a5      	beq.n	c990 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ca44:	f3bf 8f5b 	dmb	ish
    ca48:	e856 3f00 	ldrex	r3, [r6]
    ca4c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    ca50:	e846 3200 	strex	r2, r3, [r6]
    ca54:	2a00      	cmp	r2, #0
    ca56:	d1f7      	bne.n	ca48 <smp_pairing_rsp+0x16c>
    ca58:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    ca5c:	4b0a      	ldr	r3, [pc, #40]	; (ca88 <smp_pairing_rsp+0x1ac>)
    ca5e:	681b      	ldr	r3, [r3, #0]
    ca60:	691b      	ldr	r3, [r3, #16]
    ca62:	6820      	ldr	r0, [r4, #0]
    ca64:	4798      	blx	r3
			return 0;
    ca66:	e741      	b.n	c8ec <smp_pairing_rsp+0x10>
    ca68:	f3bf 8f5b 	dmb	ish
    ca6c:	e856 3f00 	ldrex	r3, [r6]
    ca70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    ca74:	e846 3200 	strex	r2, r3, [r6]
    ca78:	2a00      	cmp	r2, #0
    ca7a:	d1f7      	bne.n	ca6c <smp_pairing_rsp+0x190>
    ca7c:	f3bf 8f5b 	dmb	ish
		return 0;
    ca80:	2500      	movs	r5, #0
    ca82:	e733      	b.n	c8ec <smp_pairing_rsp+0x10>
    ca84:	20000a68 	.word	0x20000a68
    ca88:	20002ab0 	.word	0x20002ab0

0000ca8c <legacy_pairing_req>:
{
    ca8c:	b538      	push	{r3, r4, r5, lr}
    ca8e:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    ca90:	f7fd ffd4 	bl	aa3c <legacy_get_pair_method>
    ca94:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    ca98:	bb10      	cbnz	r0, cae0 <legacy_pairing_req+0x54>
    ca9a:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    ca9c:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    caa0:	f3bf 8f5b 	dmb	ish
    caa4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    caa8:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    caac:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cab0:	d116      	bne.n	cae0 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    cab2:	4b18      	ldr	r3, [pc, #96]	; (cb14 <legacy_pairing_req+0x88>)
    cab4:	681b      	ldr	r3, [r3, #0]
    cab6:	b19b      	cbz	r3, cae0 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    cab8:	691b      	ldr	r3, [r3, #16]
    caba:	b18b      	cbz	r3, cae0 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cabc:	f3bf 8f5b 	dmb	ish
    cac0:	e852 3f00 	ldrex	r3, [r2]
    cac4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cac8:	e842 3100 	strex	r1, r3, [r2]
    cacc:	2900      	cmp	r1, #0
    cace:	d1f7      	bne.n	cac0 <legacy_pairing_req+0x34>
    cad0:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    cad4:	4b0f      	ldr	r3, [pc, #60]	; (cb14 <legacy_pairing_req+0x88>)
    cad6:	681b      	ldr	r3, [r3, #0]
    cad8:	691b      	ldr	r3, [r3, #16]
    cada:	6828      	ldr	r0, [r5, #0]
    cadc:	4798      	blx	r3
		return 0;
    cade:	e004      	b.n	caea <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    cae0:	4628      	mov	r0, r5
    cae2:	f7fe f8d9 	bl	ac98 <send_pairing_rsp>
	if (ret) {
    cae6:	4604      	mov	r4, r0
    cae8:	b108      	cbz	r0, caee <legacy_pairing_req+0x62>
}
    caea:	4620      	mov	r0, r4
    caec:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    caee:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    caf2:	f3bf 8f5b 	dmb	ish
    caf6:	e853 2f00 	ldrex	r2, [r3]
    cafa:	f042 0208 	orr.w	r2, r2, #8
    cafe:	e843 2100 	strex	r1, r2, [r3]
    cb02:	2900      	cmp	r1, #0
    cb04:	d1f7      	bne.n	caf6 <legacy_pairing_req+0x6a>
    cb06:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    cb0a:	4628      	mov	r0, r5
    cb0c:	f7ff fe2a 	bl	c764 <legacy_request_tk>
    cb10:	4604      	mov	r4, r0
    cb12:	e7ea      	b.n	caea <legacy_pairing_req+0x5e>
    cb14:	20002ab0 	.word	0x20002ab0

0000cb18 <smp_pairing_req>:
{
    cb18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    cb1a:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    cb1c:	78f3      	ldrb	r3, [r6, #3]
    cb1e:	3b07      	subs	r3, #7
    cb20:	b2db      	uxtb	r3, r3
    cb22:	2b09      	cmp	r3, #9
    cb24:	d902      	bls.n	cb2c <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    cb26:	2506      	movs	r5, #6
}
    cb28:	4628      	mov	r0, r5
    cb2a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    cb2c:	4604      	mov	r4, r0
	ret = smp_init(smp);
    cb2e:	f7fe f81c 	bl	ab6a <smp_init>
	if (ret) {
    cb32:	b108      	cbz	r0, cb38 <smp_pairing_req+0x20>
		return ret;
    cb34:	b2c5      	uxtb	r5, r0
    cb36:	e7f7      	b.n	cb28 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    cb38:	2301      	movs	r3, #1
    cb3a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    cb3e:	2206      	movs	r2, #6
    cb40:	4631      	mov	r1, r6
    cb42:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    cb46:	f7f3 fbbb 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    cb4a:	2302      	movs	r3, #2
    cb4c:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    cb50:	78b0      	ldrb	r0, [r6, #2]
    cb52:	f7fd ff97 	bl	aa84 <get_auth>
    cb56:	4605      	mov	r5, r0
    cb58:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    cb5c:	f7fd ff14 	bl	a988 <get_io_capa>
    cb60:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    cb64:	2300      	movs	r3, #0
    cb66:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    cb6a:	2310      	movs	r3, #16
    cb6c:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    cb70:	7933      	ldrb	r3, [r6, #4]
    cb72:	f003 0307 	and.w	r3, r3, #7
    cb76:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    cb7a:	7973      	ldrb	r3, [r6, #5]
    cb7c:	f003 0305 	and.w	r3, r3, #5
    cb80:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cb84:	f015 0f08 	tst.w	r5, #8
    cb88:	d003      	beq.n	cb92 <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    cb8a:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    cb8c:	f013 0f08 	tst.w	r3, #8
    cb90:	d15b      	bne.n	cc4a <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cb92:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cb96:	f013 0f20 	tst.w	r3, #32
    cb9a:	d003      	beq.n	cba4 <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    cb9c:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    cb9e:	f013 0f20 	tst.w	r3, #32
    cba2:	d16d      	bne.n	cc80 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    cba4:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cba8:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    cbac:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    cbb0:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cbb4:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    cbb8:	f013 0f01 	tst.w	r3, #1
    cbbc:	d003      	beq.n	cbc6 <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    cbbe:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    cbc0:	f013 0f01 	tst.w	r3, #1
    cbc4:	d16b      	bne.n	cc9e <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    cbc6:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    cbca:	f3bf 8f5b 	dmb	ish
    cbce:	e857 3f00 	ldrex	r3, [r7]
    cbd2:	f043 0308 	orr.w	r3, r3, #8
    cbd6:	e847 3200 	strex	r2, r3, [r7]
    cbda:	2a00      	cmp	r2, #0
    cbdc:	d1f7      	bne.n	cbce <smp_pairing_req+0xb6>
    cbde:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cbe2:	f3bf 8f5b 	dmb	ish
    cbe6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cbea:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    cbee:	f013 0f20 	tst.w	r3, #32
    cbf2:	d063      	beq.n	ccbc <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    cbf4:	7831      	ldrb	r1, [r6, #0]
    cbf6:	4620      	mov	r0, r4
    cbf8:	f7fd feee 	bl	a9d8 <get_pair_method>
    cbfc:	4605      	mov	r5, r0
    cbfe:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    cc02:	2800      	cmp	r0, #0
    cc04:	d160      	bne.n	ccc8 <smp_pairing_req+0x1b0>
    cc06:	f3bf 8f5b 	dmb	ish
    cc0a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    cc0e:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    cc12:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    cc16:	d157      	bne.n	ccc8 <smp_pairing_req+0x1b0>
    cc18:	4b35      	ldr	r3, [pc, #212]	; (ccf0 <smp_pairing_req+0x1d8>)
    cc1a:	681b      	ldr	r3, [r3, #0]
    cc1c:	2b00      	cmp	r3, #0
    cc1e:	d053      	beq.n	ccc8 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    cc20:	691b      	ldr	r3, [r3, #16]
    cc22:	2b00      	cmp	r3, #0
    cc24:	d050      	beq.n	ccc8 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cc26:	f3bf 8f5b 	dmb	ish
    cc2a:	e857 3f00 	ldrex	r3, [r7]
    cc2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    cc32:	e847 3200 	strex	r2, r3, [r7]
    cc36:	2a00      	cmp	r2, #0
    cc38:	d1f7      	bne.n	cc2a <smp_pairing_req+0x112>
    cc3a:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    cc3e:	4b2c      	ldr	r3, [pc, #176]	; (ccf0 <smp_pairing_req+0x1d8>)
    cc40:	681b      	ldr	r3, [r3, #0]
    cc42:	691b      	ldr	r3, [r3, #16]
    cc44:	6820      	ldr	r0, [r4, #0]
    cc46:	4798      	blx	r3
			return 0;
    cc48:	e76e      	b.n	cb28 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    cc4a:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cc4e:	f3bf 8f5b 	dmb	ish
    cc52:	e853 2f00 	ldrex	r2, [r3]
    cc56:	f042 0220 	orr.w	r2, r2, #32
    cc5a:	e843 2100 	strex	r1, r2, [r3]
    cc5e:	2900      	cmp	r1, #0
    cc60:	d1f7      	bne.n	cc52 <smp_pairing_req+0x13a>
    cc62:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    cc66:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    cc6a:	f003 0306 	and.w	r3, r3, #6
    cc6e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    cc72:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    cc76:	f003 0304 	and.w	r3, r3, #4
    cc7a:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    cc7e:	e788      	b.n	cb92 <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    cc80:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cc84:	f3bf 8f5b 	dmb	ish
    cc88:	e853 2f00 	ldrex	r2, [r3]
    cc8c:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    cc90:	e843 2100 	strex	r1, r2, [r3]
    cc94:	2900      	cmp	r1, #0
    cc96:	d1f7      	bne.n	cc88 <smp_pairing_req+0x170>
    cc98:	f3bf 8f5b 	dmb	ish
    cc9c:	e782      	b.n	cba4 <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    cc9e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    cca2:	f3bf 8f5b 	dmb	ish
    cca6:	e853 2f00 	ldrex	r2, [r3]
    ccaa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    ccae:	e843 2100 	strex	r1, r2, [r3]
    ccb2:	2900      	cmp	r1, #0
    ccb4:	d1f7      	bne.n	cca6 <smp_pairing_req+0x18e>
    ccb6:	f3bf 8f5b 	dmb	ish
    ccba:	e784      	b.n	cbc6 <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    ccbc:	7831      	ldrb	r1, [r6, #0]
    ccbe:	4620      	mov	r0, r4
    ccc0:	f7ff fee4 	bl	ca8c <legacy_pairing_req>
    ccc4:	4605      	mov	r5, r0
    ccc6:	e72f      	b.n	cb28 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    ccc8:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    cccc:	f3bf 8f5b 	dmb	ish
    ccd0:	e853 2f00 	ldrex	r2, [r3]
    ccd4:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    ccd8:	e843 2100 	strex	r1, r2, [r3]
    ccdc:	2900      	cmp	r1, #0
    ccde:	d1f7      	bne.n	ccd0 <smp_pairing_req+0x1b8>
    cce0:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    cce4:	4620      	mov	r0, r4
    cce6:	f7fd ffd7 	bl	ac98 <send_pairing_rsp>
    ccea:	4605      	mov	r5, r0
    ccec:	e71c      	b.n	cb28 <smp_pairing_req+0x10>
    ccee:	bf00      	nop
    ccf0:	20002ab0 	.word	0x20002ab0

0000ccf4 <bt_smp_connected>:
{
    ccf4:	b510      	push	{r4, lr}
    ccf6:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    ccf8:	4904      	ldr	r1, [pc, #16]	; (cd0c <bt_smp_connected+0x18>)
    ccfa:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ccfe:	f01d f955 	bl	29fac <k_delayed_work_init>
	smp_reset(smp);
    cd02:	4620      	mov	r0, r4
    cd04:	f7fe fcbb 	bl	b67e <smp_reset>
    cd08:	bd10      	pop	{r4, pc}
    cd0a:	bf00      	nop
    cd0c:	0000b8cf 	.word	0x0000b8cf

0000cd10 <bt_smp_send_security_req>:
{
    cd10:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    cd14:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    cd16:	f7fd ff15 	bl	ab44 <smp_chan_get>
	if (!smp) {
    cd1a:	b3e8      	cbz	r0, cd98 <bt_smp_send_security_req+0x88>
    cd1c:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cd1e:	f3bf 8f5b 	dmb	ish
    cd22:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cd26:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cd2a:	f013 0f10 	tst.w	r3, #16
    cd2e:	d136      	bne.n	cd9e <bt_smp_send_security_req+0x8e>
    cd30:	f3bf 8f5b 	dmb	ish
    cd34:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    cd38:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    cd3c:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cd40:	bb85      	cbnz	r5, cda4 <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    cd42:	4630      	mov	r0, r6
    cd44:	f7fd feb4 	bl	aab0 <sec_level_reachable>
    cd48:	b378      	cbz	r0, cdaa <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    cd4a:	2201      	movs	r2, #1
    cd4c:	210b      	movs	r1, #11
    cd4e:	4630      	mov	r0, r6
    cd50:	f7fd fefd 	bl	ab4e <smp_create_pdu>
	if (!req_buf) {
    cd54:	4607      	mov	r7, r0
    cd56:	b358      	cbz	r0, cdb0 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    cd58:	2101      	movs	r1, #1
    cd5a:	3008      	adds	r0, #8
    cd5c:	f00e f856 	bl	1ae0c <net_buf_simple_add>
    cd60:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    cd62:	2009      	movs	r0, #9
    cd64:	f7fd fe8e 	bl	aa84 <get_auth>
    cd68:	f888 0000 	strb.w	r0, [r8]
    cd6c:	2300      	movs	r3, #0
    cd6e:	463a      	mov	r2, r7
    cd70:	2106      	movs	r1, #6
    cd72:	4630      	mov	r0, r6
    cd74:	f7fb f9e1 	bl	813a <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    cd78:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cd7a:	f3bf 8f5b 	dmb	ish
    cd7e:	e854 3f00 	ldrex	r3, [r4]
    cd82:	f043 0320 	orr.w	r3, r3, #32
    cd86:	e844 3200 	strex	r2, r3, [r4]
    cd8a:	2a00      	cmp	r2, #0
    cd8c:	d1f7      	bne.n	cd7e <bt_smp_send_security_req+0x6e>
    cd8e:	f3bf 8f5b 	dmb	ish
}
    cd92:	4628      	mov	r0, r5
    cd94:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    cd98:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    cd9c:	e7f9      	b.n	cd92 <bt_smp_send_security_req+0x82>
		return -EIO;
    cd9e:	f06f 0504 	mvn.w	r5, #4
    cda2:	e7f6      	b.n	cd92 <bt_smp_send_security_req+0x82>
		return -EBUSY;
    cda4:	f06f 050f 	mvn.w	r5, #15
    cda8:	e7f3      	b.n	cd92 <bt_smp_send_security_req+0x82>
		return -EINVAL;
    cdaa:	f06f 0515 	mvn.w	r5, #21
    cdae:	e7f0      	b.n	cd92 <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    cdb0:	f06f 0568 	mvn.w	r5, #104	; 0x68
    cdb4:	e7ed      	b.n	cd92 <bt_smp_send_security_req+0x82>

0000cdb6 <bt_smp_send_pairing_req>:
{
    cdb6:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    cdba:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    cdbc:	f7fd fec2 	bl	ab44 <smp_chan_get>
	if (!smp) {
    cdc0:	2800      	cmp	r0, #0
    cdc2:	d06b      	beq.n	ce9c <bt_smp_send_pairing_req+0xe6>
    cdc4:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    cdc6:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cdca:	f3bf 8f5b 	dmb	ish
    cdce:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cdd2:	f3bf 8f5b 	dmb	ish
    cdd6:	f013 0f10 	tst.w	r3, #16
    cdda:	d162      	bne.n	cea2 <bt_smp_send_pairing_req+0xec>
    cddc:	f3bf 8f5b 	dmb	ish
    cde0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    cde4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    cde8:	f013 0f08 	tst.w	r3, #8
    cdec:	d15c      	bne.n	cea8 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    cdee:	4628      	mov	r0, r5
    cdf0:	f7fd fe5e 	bl	aab0 <sec_level_reachable>
    cdf4:	2800      	cmp	r0, #0
    cdf6:	d05a      	beq.n	ceae <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    cdf8:	4620      	mov	r0, r4
    cdfa:	f7fd feb6 	bl	ab6a <smp_init>
    cdfe:	4680      	mov	r8, r0
    ce00:	2800      	cmp	r0, #0
    ce02:	d157      	bne.n	ceb4 <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    ce04:	2206      	movs	r2, #6
    ce06:	2101      	movs	r1, #1
    ce08:	4628      	mov	r0, r5
    ce0a:	f7fd fea0 	bl	ab4e <smp_create_pdu>
	if (!req_buf) {
    ce0e:	4607      	mov	r7, r0
    ce10:	2800      	cmp	r0, #0
    ce12:	d052      	beq.n	ceba <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    ce14:	2106      	movs	r1, #6
    ce16:	3008      	adds	r0, #8
    ce18:	f00d fff8 	bl	1ae0c <net_buf_simple_add>
    ce1c:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    ce1e:	2009      	movs	r0, #9
    ce20:	f7fd fe30 	bl	aa84 <get_auth>
    ce24:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    ce26:	f7fd fdaf 	bl	a988 <get_io_capa>
    ce2a:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    ce2c:	f04f 0900 	mov.w	r9, #0
    ce30:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    ce34:	2310      	movs	r3, #16
    ce36:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    ce38:	2205      	movs	r2, #5
    ce3a:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    ce3c:	2307      	movs	r3, #7
    ce3e:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    ce40:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    ce44:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    ce48:	2301      	movs	r3, #1
    ce4a:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    ce4e:	2206      	movs	r2, #6
    ce50:	4629      	mov	r1, r5
    ce52:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    ce56:	f7f3 fa33 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    ce5a:	464a      	mov	r2, r9
    ce5c:	4639      	mov	r1, r7
    ce5e:	4620      	mov	r0, r4
    ce60:	f7fd fec8 	bl	abf4 <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    ce64:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ce66:	f3bf 8f5b 	dmb	ish
    ce6a:	e854 3f00 	ldrex	r3, [r4]
    ce6e:	f043 0304 	orr.w	r3, r3, #4
    ce72:	e844 3200 	strex	r2, r3, [r4]
    ce76:	2a00      	cmp	r2, #0
    ce78:	d1f7      	bne.n	ce6a <bt_smp_send_pairing_req+0xb4>
    ce7a:	f3bf 8f5b 	dmb	ish
    ce7e:	f3bf 8f5b 	dmb	ish
    ce82:	e856 3f00 	ldrex	r3, [r6]
    ce86:	f043 0308 	orr.w	r3, r3, #8
    ce8a:	e846 3200 	strex	r2, r3, [r6]
    ce8e:	2a00      	cmp	r2, #0
    ce90:	d1f7      	bne.n	ce82 <bt_smp_send_pairing_req+0xcc>
    ce92:	f3bf 8f5b 	dmb	ish
}
    ce96:	4640      	mov	r0, r8
    ce98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    ce9c:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    cea0:	e7f9      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    cea2:	f06f 0804 	mvn.w	r8, #4
    cea6:	e7f6      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    cea8:	f06f 080f 	mvn.w	r8, #15
    ceac:	e7f3      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    ceae:	f06f 0815 	mvn.w	r8, #21
    ceb2:	e7f0      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ceb4:	f06f 0868 	mvn.w	r8, #104	; 0x68
    ceb8:	e7ed      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    ceba:	f06f 0868 	mvn.w	r8, #104	; 0x68
    cebe:	e7ea      	b.n	ce96 <bt_smp_send_pairing_req+0xe0>

0000cec0 <smp_security_request>:
{
    cec0:	b5f0      	push	{r4, r5, r6, r7, lr}
    cec2:	b085      	sub	sp, #20
    cec4:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    cec6:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    cec8:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    ceca:	4a35      	ldr	r2, [pc, #212]	; (cfa0 <smp_security_request+0xe0>)
    cecc:	7812      	ldrb	r2, [r2, #0]
    cece:	b332      	cbz	r2, cf1e <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    ced0:	781d      	ldrb	r5, [r3, #0]
    ced2:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    ced6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ced8:	b32b      	cbz	r3, cf26 <smp_security_request+0x66>
	if (!conn->le.keys) {
    ceda:	6f23      	ldr	r3, [r4, #112]	; 0x70
    cedc:	2b00      	cmp	r3, #0
    cede:	d039      	beq.n	cf54 <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    cee0:	f015 0f04 	tst.w	r5, #4
    cee4:	d12e      	bne.n	cf44 <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    cee6:	f015 0f08 	tst.w	r5, #8
    ceea:	d004      	beq.n	cef6 <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    ceec:	6f23      	ldr	r3, [r4, #112]	; 0x70
    ceee:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    cef0:	f013 0f20 	tst.w	r3, #32
    cef4:	d02e      	beq.n	cf54 <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    cef6:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    cef8:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    cefc:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    cefe:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    cf02:	9502      	str	r5, [sp, #8]
    cf04:	9201      	str	r2, [sp, #4]
    cf06:	8b1b      	ldrh	r3, [r3, #24]
    cf08:	9300      	str	r3, [sp, #0]
    cf0a:	4602      	mov	r2, r0
    cf0c:	460b      	mov	r3, r1
    cf0e:	4620      	mov	r0, r4
    cf10:	f7f9 ffbc 	bl	6e8c <bt_conn_le_start_encryption>
    cf14:	2800      	cmp	r0, #0
    cf16:	da24      	bge.n	cf62 <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    cf18:	2008      	movs	r0, #8
}
    cf1a:	b005      	add	sp, #20
    cf1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    cf1e:	781d      	ldrb	r5, [r3, #0]
    cf20:	f005 0507 	and.w	r5, r5, #7
    cf24:	e7d7      	b.n	ced6 <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    cf26:	f104 0748 	add.w	r7, r4, #72	; 0x48
    cf2a:	4639      	mov	r1, r7
    cf2c:	2020      	movs	r0, #32
    cf2e:	f000 f98f 	bl	d250 <bt_keys_find>
    cf32:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    cf34:	2800      	cmp	r0, #0
    cf36:	d1d0      	bne.n	ceda <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    cf38:	4639      	mov	r1, r7
    cf3a:	2004      	movs	r0, #4
    cf3c:	f000 f988 	bl	d250 <bt_keys_find>
    cf40:	6720      	str	r0, [r4, #112]	; 0x70
    cf42:	e7ca      	b.n	ceda <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    cf44:	f3bf 8f5b 	dmb	ish
    cf48:	689b      	ldr	r3, [r3, #8]
    cf4a:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    cf4e:	f013 0f01 	tst.w	r3, #1
    cf52:	d1c8      	bne.n	cee6 <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    cf54:	4620      	mov	r0, r4
    cf56:	f7ff ff2e 	bl	cdb6 <bt_smp_send_pairing_req>
    cf5a:	2800      	cmp	r0, #0
    cf5c:	da10      	bge.n	cf80 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    cf5e:	2008      	movs	r0, #8
    cf60:	e7db      	b.n	cf1a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    cf62:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    cf64:	f3bf 8f5b 	dmb	ish
    cf68:	e856 3f00 	ldrex	r3, [r6]
    cf6c:	f043 0302 	orr.w	r3, r3, #2
    cf70:	e846 3200 	strex	r2, r3, [r6]
    cf74:	2a00      	cmp	r2, #0
    cf76:	d1f7      	bne.n	cf68 <smp_security_request+0xa8>
    cf78:	f3bf 8f5b 	dmb	ish
	return 0;
    cf7c:	2000      	movs	r0, #0
    cf7e:	e7cc      	b.n	cf1a <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    cf80:	36a0      	adds	r6, #160	; 0xa0
    cf82:	f3bf 8f5b 	dmb	ish
    cf86:	e856 3f00 	ldrex	r3, [r6]
    cf8a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    cf8e:	e846 3200 	strex	r2, r3, [r6]
    cf92:	2a00      	cmp	r2, #0
    cf94:	d1f7      	bne.n	cf86 <smp_security_request+0xc6>
    cf96:	f3bf 8f5b 	dmb	ish
	return 0;
    cf9a:	2000      	movs	r0, #0
    cf9c:	e7bd      	b.n	cf1a <smp_security_request+0x5a>
    cf9e:	bf00      	nop
    cfa0:	20000aac 	.word	0x20000aac

0000cfa4 <bt_smp_sign_verify>:
{
    cfa4:	b530      	push	{r4, r5, lr}
    cfa6:	b085      	sub	sp, #20
    cfa8:	4605      	mov	r5, r0
    cfaa:	460c      	mov	r4, r1
	return buf->data + buf->len;
    cfac:	6889      	ldr	r1, [r1, #8]
    cfae:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    cfb0:	3b0c      	subs	r3, #12
    cfb2:	220c      	movs	r2, #12
    cfb4:	4419      	add	r1, r3
    cfb6:	a801      	add	r0, sp, #4
    cfb8:	f7f3 f982 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    cfbc:	f105 0148 	add.w	r1, r5, #72	; 0x48
    cfc0:	2010      	movs	r0, #16
    cfc2:	f000 f945 	bl	d250 <bt_keys_find>
	if (!keys) {
    cfc6:	b320      	cbz	r0, d012 <bt_smp_sign_verify+0x6e>
    cfc8:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    cfca:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    cfcc:	a904      	add	r1, sp, #16
    cfce:	f841 3d10 	str.w	r3, [r1, #-16]!
    cfd2:	68a0      	ldr	r0, [r4, #8]
    cfd4:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    cfd6:	3b0c      	subs	r3, #12
    cfd8:	2204      	movs	r2, #4
    cfda:	4418      	add	r0, r3
    cfdc:	f7f3 f970 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    cfe0:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    cfe2:	3a0c      	subs	r2, #12
    cfe4:	b292      	uxth	r2, r2
    cfe6:	68a1      	ldr	r1, [r4, #8]
    cfe8:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    cfec:	f7fd feac 	bl	ad48 <smp_sign_buf>
	if (err) {
    cff0:	b990      	cbnz	r0, d018 <bt_smp_sign_verify+0x74>
    cff2:	68a1      	ldr	r1, [r4, #8]
    cff4:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    cff6:	3b0c      	subs	r3, #12
    cff8:	220c      	movs	r2, #12
    cffa:	4419      	add	r1, r3
    cffc:	a801      	add	r0, sp, #4
    cffe:	f01d fc23 	bl	2a848 <memcmp>
    d002:	4602      	mov	r2, r0
    d004:	b958      	cbnz	r0, d01e <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    d006:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    d008:	3301      	adds	r3, #1
    d00a:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    d00c:	4610      	mov	r0, r2
    d00e:	b005      	add	sp, #20
    d010:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    d012:	f06f 0201 	mvn.w	r2, #1
    d016:	e7f9      	b.n	d00c <bt_smp_sign_verify+0x68>
		return -EIO;
    d018:	f06f 0204 	mvn.w	r2, #4
    d01c:	e7f6      	b.n	d00c <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    d01e:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    d022:	e7f3      	b.n	d00c <bt_smp_sign_verify+0x68>

0000d024 <bt_smp_sign>:
{
    d024:	b530      	push	{r4, r5, lr}
    d026:	b083      	sub	sp, #12
    d028:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    d02a:	f100 0148 	add.w	r1, r0, #72	; 0x48
    d02e:	2008      	movs	r0, #8
    d030:	f000 f90e 	bl	d250 <bt_keys_find>
	if (!keys) {
    d034:	b300      	cbz	r0, d078 <bt_smp_sign+0x54>
    d036:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    d038:	210c      	movs	r1, #12
    d03a:	f104 0008 	add.w	r0, r4, #8
    d03e:	f00d fee5 	bl	1ae0c <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    d042:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d044:	a902      	add	r1, sp, #8
    d046:	f841 3d04 	str.w	r3, [r1, #-4]!
    d04a:	68a0      	ldr	r0, [r4, #8]
    d04c:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    d04e:	3b0c      	subs	r3, #12
    d050:	2204      	movs	r2, #4
    d052:	4418      	add	r0, r3
    d054:	f7f3 f934 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    d058:	89a2      	ldrh	r2, [r4, #12]
    d05a:	3a0c      	subs	r2, #12
    d05c:	b292      	uxth	r2, r2
    d05e:	68a1      	ldr	r1, [r4, #8]
    d060:	f105 0048 	add.w	r0, r5, #72	; 0x48
    d064:	f7fd fe70 	bl	ad48 <smp_sign_buf>
	if (err) {
    d068:	4602      	mov	r2, r0
    d06a:	b940      	cbnz	r0, d07e <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    d06c:	6dab      	ldr	r3, [r5, #88]	; 0x58
    d06e:	3301      	adds	r3, #1
    d070:	65ab      	str	r3, [r5, #88]	; 0x58
}
    d072:	4610      	mov	r0, r2
    d074:	b003      	add	sp, #12
    d076:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    d078:	f06f 0201 	mvn.w	r2, #1
    d07c:	e7f9      	b.n	d072 <bt_smp_sign+0x4e>
		return -EIO;
    d07e:	f06f 0204 	mvn.w	r2, #4
    d082:	e7f6      	b.n	d072 <bt_smp_sign+0x4e>

0000d084 <bt_smp_update_keys>:
{
    d084:	b570      	push	{r4, r5, r6, lr}
    d086:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    d088:	f7fd fd5c 	bl	ab44 <smp_chan_get>
	if (!smp) {
    d08c:	2800      	cmp	r0, #0
    d08e:	d03d      	beq.n	d10c <bt_smp_update_keys+0x88>
    d090:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d092:	f3bf 8f5b 	dmb	ish
    d096:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d09a:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d09e:	f013 0f08 	tst.w	r3, #8
    d0a2:	d033      	beq.n	d10c <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    d0a4:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d0a6:	b108      	cbz	r0, d0ac <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    d0a8:	f000 f97f 	bl	d3aa <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    d0ac:	f104 0048 	add.w	r0, r4, #72	; 0x48
    d0b0:	f000 f8a4 	bl	d1fc <bt_keys_get_addr>
    d0b4:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    d0b6:	b348      	cbz	r0, d10c <bt_smp_update_keys+0x88>
    d0b8:	f3bf 8f5b 	dmb	ish
    d0bc:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d0c0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    d0c4:	f413 6f00 	tst.w	r3, #2048	; 0x800
    d0c8:	d121      	bne.n	d10e <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    d0ca:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    d0ce:	3b01      	subs	r3, #1
    d0d0:	2b02      	cmp	r3, #2
    d0d2:	d82b      	bhi.n	d12c <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d0d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d0d6:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d0d8:	f3bf 8f5b 	dmb	ish
    d0dc:	e853 2f00 	ldrex	r2, [r3]
    d0e0:	f042 0201 	orr.w	r2, r2, #1
    d0e4:	e843 2100 	strex	r1, r2, [r3]
    d0e8:	2900      	cmp	r1, #0
    d0ea:	d1f7      	bne.n	d0dc <bt_smp_update_keys+0x58>
    d0ec:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    d0f0:	6f26      	ldr	r6, [r4, #112]	; 0x70
    d0f2:	4628      	mov	r0, r5
    d0f4:	f7fd fc8a 	bl	aa0c <get_encryption_key_size>
    d0f8:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d0fa:	f3bf 8f5b 	dmb	ish
    d0fe:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d102:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d106:	f013 0f20 	tst.w	r3, #32
    d10a:	d11e      	bne.n	d14a <bt_smp_update_keys+0xc6>
    d10c:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    d10e:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d110:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    d112:	f3bf 8f5b 	dmb	ish
    d116:	e853 2f00 	ldrex	r2, [r3]
    d11a:	f042 0202 	orr.w	r2, r2, #2
    d11e:	e843 2100 	strex	r1, r2, [r3]
    d122:	2900      	cmp	r1, #0
    d124:	d1f7      	bne.n	d116 <bt_smp_update_keys+0x92>
    d126:	f3bf 8f5b 	dmb	ish
    d12a:	e7ce      	b.n	d0ca <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    d12c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d12e:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    d130:	f3bf 8f5b 	dmb	ish
    d134:	e853 2f00 	ldrex	r2, [r3]
    d138:	f022 0201 	bic.w	r2, r2, #1
    d13c:	e843 2100 	strex	r1, r2, [r3]
    d140:	2900      	cmp	r1, #0
    d142:	d1f7      	bne.n	d134 <bt_smp_update_keys+0xb0>
    d144:	f3bf 8f5b 	dmb	ish
    d148:	e7d2      	b.n	d0f0 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    d14a:	f3bf 8f5b 	dmb	ish
    d14e:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    d152:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    d156:	f413 6f80 	tst.w	r3, #1024	; 0x400
    d15a:	d0d7      	beq.n	d10c <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    d15c:	2120      	movs	r1, #32
    d15e:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d160:	f000 f90c 	bl	d37c <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    d164:	6f20      	ldr	r0, [r4, #112]	; 0x70
    d166:	2210      	movs	r2, #16
    d168:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    d16c:	301a      	adds	r0, #26
    d16e:	f7f3 f8a7 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    d172:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d174:	2000      	movs	r0, #0
    d176:	2100      	movs	r1, #0
    d178:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    d17c:	6f23      	ldr	r3, [r4, #112]	; 0x70
    d17e:	2200      	movs	r2, #0
    d180:	831a      	strh	r2, [r3, #24]
    d182:	e7c3      	b.n	d10c <bt_smp_update_keys+0x88>

0000d184 <bt_smp_get_tk>:
{
    d184:	b570      	push	{r4, r5, r6, lr}
    d186:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    d188:	f7fd fcdc 	bl	ab44 <smp_chan_get>
	if (!smp) {
    d18c:	b300      	cbz	r0, d1d0 <bt_smp_get_tk+0x4c>
    d18e:	4604      	mov	r4, r0
    d190:	f3bf 8f5b 	dmb	ish
    d194:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    d198:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    d19c:	f013 0f08 	tst.w	r3, #8
    d1a0:	d101      	bne.n	d1a6 <bt_smp_get_tk+0x22>
		return false;
    d1a2:	2000      	movs	r0, #0
    d1a4:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    d1a6:	f7fd fc31 	bl	aa0c <get_encryption_key_size>
    d1aa:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    d1ac:	4602      	mov	r2, r0
    d1ae:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    d1b2:	4628      	mov	r0, r5
    d1b4:	f7f3 f884 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    d1b8:	2e0f      	cmp	r6, #15
    d1ba:	d901      	bls.n	d1c0 <bt_smp_get_tk+0x3c>
	return true;
    d1bc:	2001      	movs	r0, #1
}
    d1be:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    d1c0:	f1c6 0210 	rsb	r2, r6, #16
    d1c4:	2100      	movs	r1, #0
    d1c6:	19a8      	adds	r0, r5, r6
    d1c8:	f01d fbd2 	bl	2a970 <memset>
	return true;
    d1cc:	2001      	movs	r0, #1
    d1ce:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    d1d0:	2000      	movs	r0, #0
    d1d2:	bd70      	pop	{r4, r5, r6, pc}

0000d1d4 <bt_smp_init>:

int bt_smp_init(void)
{
    d1d4:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    d1d6:	f7fd fca9 	bl	ab2c <le_sc_supported>
    d1da:	4b05      	ldr	r3, [pc, #20]	; (d1f0 <bt_smp_init+0x1c>)
    d1dc:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    d1de:	4805      	ldr	r0, [pc, #20]	; (d1f4 <bt_smp_init+0x20>)
    d1e0:	f7fa fe04 	bl	7dec <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    d1e4:	4804      	ldr	r0, [pc, #16]	; (d1f8 <bt_smp_init+0x24>)
    d1e6:	f7f9 fc7f 	bl	6ae8 <bt_pub_key_gen>

	return smp_self_test();
}
    d1ea:	2000      	movs	r0, #0
    d1ec:	bd08      	pop	{r3, pc}
    d1ee:	bf00      	nop
    d1f0:	20000aac 	.word	0x20000aac
    d1f4:	2000bc44 	.word	0x2000bc44
    d1f8:	2000bc64 	.word	0x2000bc64

0000d1fc <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    d1fc:	b5f0      	push	{r4, r5, r6, r7, lr}
    d1fe:	b083      	sub	sp, #12
    d200:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d202:	2500      	movs	r5, #0
    d204:	b11d      	cbz	r5, d20e <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    d206:	2400      	movs	r4, #0
}
    d208:	4620      	mov	r0, r4
    d20a:	b003      	add	sp, #12
    d20c:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    d20e:	00eb      	lsls	r3, r5, #3
    d210:	442b      	add	r3, r5
    d212:	011a      	lsls	r2, r3, #4
    d214:	4c0d      	ldr	r4, [pc, #52]	; (d24c <bt_keys_get_addr+0x50>)
    d216:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    d218:	2207      	movs	r2, #7
    d21a:	4631      	mov	r1, r6
    d21c:	4620      	mov	r0, r4
    d21e:	f01d fb13 	bl	2a848 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    d222:	2800      	cmp	r0, #0
    d224:	d0f0      	beq.n	d208 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    d226:	2300      	movs	r3, #0
    d228:	9300      	str	r3, [sp, #0]
    d22a:	f8cd 3003 	str.w	r3, [sp, #3]
    d22e:	2207      	movs	r2, #7
    d230:	4669      	mov	r1, sp
    d232:	4620      	mov	r0, r4
    d234:	f01d fb08 	bl	2a848 <memcmp>
    d238:	b108      	cbz	r0, d23e <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d23a:	3501      	adds	r5, #1
    d23c:	e7e2      	b.n	d204 <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    d23e:	2207      	movs	r2, #7
    d240:	4631      	mov	r1, r6
    d242:	4620      	mov	r0, r4
    d244:	f7f3 f83c 	bl	2c0 <memcpy>
			return keys;
    d248:	e7de      	b.n	d208 <bt_keys_get_addr+0xc>
    d24a:	bf00      	nop
    d24c:	20000ab0 	.word	0x20000ab0

0000d250 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    d250:	b570      	push	{r4, r5, r6, lr}
    d252:	4605      	mov	r5, r0
    d254:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d256:	2400      	movs	r4, #0
    d258:	b10c      	cbz	r4, d25e <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d25a:	2000      	movs	r0, #0
}
    d25c:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    d25e:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d262:	011a      	lsls	r2, r3, #4
    d264:	4b0b      	ldr	r3, [pc, #44]	; (d294 <bt_keys_find+0x44>)
    d266:	4413      	add	r3, r2
    d268:	899b      	ldrh	r3, [r3, #12]
    d26a:	422b      	tst	r3, r5
    d26c:	d101      	bne.n	d272 <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d26e:	3401      	adds	r4, #1
    d270:	e7f2      	b.n	d258 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d272:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d276:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d278:	2207      	movs	r2, #7
    d27a:	4631      	mov	r1, r6
    d27c:	4805      	ldr	r0, [pc, #20]	; (d294 <bt_keys_find+0x44>)
    d27e:	4418      	add	r0, r3
    d280:	f01d fae2 	bl	2a848 <memcmp>
		if ((key_pool[i].keys & type) &&
    d284:	2800      	cmp	r0, #0
    d286:	d1f2      	bne.n	d26e <bt_keys_find+0x1e>
			return &key_pool[i];
    d288:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d28c:	0123      	lsls	r3, r4, #4
    d28e:	4801      	ldr	r0, [pc, #4]	; (d294 <bt_keys_find+0x44>)
    d290:	4418      	add	r0, r3
    d292:	bd70      	pop	{r4, r5, r6, pc}
    d294:	20000ab0 	.word	0x20000ab0

0000d298 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    d298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    d29a:	7803      	ldrb	r3, [r0, #0]
    d29c:	2b01      	cmp	r3, #1
    d29e:	d004      	beq.n	d2aa <bt_keys_find_irk+0x12>
		return false;
    d2a0:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    d2a2:	b153      	cbz	r3, d2ba <bt_keys_find_irk+0x22>
    d2a4:	4605      	mov	r5, r0
    d2a6:	2400      	movs	r4, #0
    d2a8:	e00a      	b.n	d2c0 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    d2aa:	7983      	ldrb	r3, [r0, #6]
    d2ac:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    d2b0:	2b40      	cmp	r3, #64	; 0x40
    d2b2:	bf14      	ite	ne
    d2b4:	2300      	movne	r3, #0
    d2b6:	2301      	moveq	r3, #1
    d2b8:	e7f3      	b.n	d2a2 <bt_keys_find_irk+0xa>
		return NULL;
    d2ba:	2000      	movs	r0, #0
    d2bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d2be:	3401      	adds	r4, #1
    d2c0:	b9c4      	cbnz	r4, d2f4 <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d2c2:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d2c6:	011a      	lsls	r2, r3, #4
    d2c8:	4b1e      	ldr	r3, [pc, #120]	; (d344 <bt_keys_find_irk+0xac>)
    d2ca:	4413      	add	r3, r2
    d2cc:	899b      	ldrh	r3, [r3, #12]
    d2ce:	f013 0f02 	tst.w	r3, #2
    d2d2:	d0f4      	beq.n	d2be <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    d2d4:	4611      	mov	r1, r2
    d2d6:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    d2d8:	2206      	movs	r2, #6
    d2da:	4b1a      	ldr	r3, [pc, #104]	; (d344 <bt_keys_find_irk+0xac>)
    d2dc:	4419      	add	r1, r3
    d2de:	1c68      	adds	r0, r5, #1
    d2e0:	f01d fab2 	bl	2a848 <memcmp>
    d2e4:	2800      	cmp	r0, #0
    d2e6:	d1ea      	bne.n	d2be <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    d2e8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d2ec:	0123      	lsls	r3, r4, #4
    d2ee:	4815      	ldr	r0, [pc, #84]	; (d344 <bt_keys_find_irk+0xac>)
    d2f0:	4418      	add	r0, r3
    d2f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d2f4:	2400      	movs	r4, #0
    d2f6:	e000      	b.n	d2fa <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d2f8:	3401      	adds	r4, #1
    d2fa:	bb04      	cbnz	r4, d33e <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    d2fc:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    d300:	011a      	lsls	r2, r3, #4
    d302:	4b10      	ldr	r3, [pc, #64]	; (d344 <bt_keys_find_irk+0xac>)
    d304:	4413      	add	r3, r2
    d306:	899b      	ldrh	r3, [r3, #12]
    d308:	f013 0f02 	tst.w	r3, #2
    d30c:	d0f4      	beq.n	d2f8 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    d30e:	4610      	mov	r0, r2
    d310:	3030      	adds	r0, #48	; 0x30
    d312:	1c6e      	adds	r6, r5, #1
    d314:	4631      	mov	r1, r6
    d316:	4b0b      	ldr	r3, [pc, #44]	; (d344 <bt_keys_find_irk+0xac>)
    d318:	4418      	add	r0, r3
    d31a:	f7f7 f987 	bl	462c <bt_rpa_irk_matches>
    d31e:	2800      	cmp	r0, #0
    d320:	d0ea      	beq.n	d2f8 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    d322:	4d08      	ldr	r5, [pc, #32]	; (d344 <bt_keys_find_irk+0xac>)
    d324:	00e7      	lsls	r7, r4, #3
    d326:	193a      	adds	r2, r7, r4
    d328:	0113      	lsls	r3, r2, #4
    d32a:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    d32c:	2206      	movs	r2, #6
    d32e:	4631      	mov	r1, r6
    d330:	18e8      	adds	r0, r5, r3
    d332:	f7f2 ffc5 	bl	2c0 <memcpy>

			return &key_pool[i];
    d336:	443c      	add	r4, r7
    d338:	0120      	lsls	r0, r4, #4
    d33a:	4428      	add	r0, r5
    d33c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    d33e:	2000      	movs	r0, #0
}
    d340:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    d342:	bf00      	nop
    d344:	20000ab0 	.word	0x20000ab0

0000d348 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    d348:	b538      	push	{r3, r4, r5, lr}
    d34a:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d34c:	2400      	movs	r4, #0
    d34e:	b10c      	cbz	r4, d354 <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    d350:	2000      	movs	r0, #0
}
    d352:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    d354:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    d358:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    d35a:	2207      	movs	r2, #7
    d35c:	4629      	mov	r1, r5
    d35e:	4806      	ldr	r0, [pc, #24]	; (d378 <bt_keys_find_addr+0x30>)
    d360:	4418      	add	r0, r3
    d362:	f01d fa71 	bl	2a848 <memcmp>
    d366:	b108      	cbz	r0, d36c <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    d368:	3401      	adds	r4, #1
    d36a:	e7f0      	b.n	d34e <bt_keys_find_addr+0x6>
			return &key_pool[i];
    d36c:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    d370:	0123      	lsls	r3, r4, #4
    d372:	4801      	ldr	r0, [pc, #4]	; (d378 <bt_keys_find_addr+0x30>)
    d374:	4418      	add	r0, r3
    d376:	bd38      	pop	{r3, r4, r5, pc}
    d378:	20000ab0 	.word	0x20000ab0

0000d37c <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    d37c:	8983      	ldrh	r3, [r0, #12]
    d37e:	4319      	orrs	r1, r3
    d380:	8181      	strh	r1, [r0, #12]
    d382:	4770      	bx	lr

0000d384 <bt_keys_get_type>:
{
    d384:	b570      	push	{r4, r5, r6, lr}
    d386:	4606      	mov	r6, r0
    d388:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    d38a:	f7ff ff61 	bl	d250 <bt_keys_find>
	if (keys) {
    d38e:	4604      	mov	r4, r0
    d390:	b108      	cbz	r0, d396 <bt_keys_get_type+0x12>
}
    d392:	4620      	mov	r0, r4
    d394:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    d396:	4628      	mov	r0, r5
    d398:	f7ff ff30 	bl	d1fc <bt_keys_get_addr>
	if (!keys) {
    d39c:	4604      	mov	r4, r0
    d39e:	2800      	cmp	r0, #0
    d3a0:	d0f7      	beq.n	d392 <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    d3a2:	4631      	mov	r1, r6
    d3a4:	f7ff ffea 	bl	d37c <bt_keys_add_type>
	return keys;
    d3a8:	e7f3      	b.n	d392 <bt_keys_get_type+0xe>

0000d3aa <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    d3aa:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    d3ac:	2290      	movs	r2, #144	; 0x90
    d3ae:	2100      	movs	r1, #0
    d3b0:	f01d fade 	bl	2a970 <memset>
    d3b4:	bd08      	pop	{r3, pc}

0000d3b6 <status_cmd_handle>:
}
    d3b6:	f06f 0015 	mvn.w	r0, #21
    d3ba:	4770      	bx	lr

0000d3bc <evt_create>:
{
    d3bc:	b538      	push	{r3, r4, r5, lr}
    d3be:	460d      	mov	r5, r1
    d3c0:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    d3c2:	2102      	movs	r1, #2
    d3c4:	3008      	adds	r0, #8
    d3c6:	f00d fd21 	bl	1ae0c <net_buf_simple_add>
	hdr->evt = evt;
    d3ca:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    d3cc:	7044      	strb	r4, [r0, #1]
    d3ce:	bd38      	pop	{r3, r4, r5, pc}

0000d3d0 <cmd_status>:
{
    d3d0:	b538      	push	{r3, r4, r5, lr}
    d3d2:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    d3d4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d3d8:	f7f9 fb5e 	bl	6a98 <bt_buf_get_cmd_complete>
    d3dc:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    d3de:	2204      	movs	r2, #4
    d3e0:	210f      	movs	r1, #15
    d3e2:	f7ff ffeb 	bl	d3bc <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    d3e6:	2104      	movs	r1, #4
    d3e8:	f104 0008 	add.w	r0, r4, #8
    d3ec:	f00d fd0e 	bl	1ae0c <net_buf_simple_add>
	cs->status = status;
    d3f0:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    d3f2:	2301      	movs	r3, #1
    d3f4:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    d3f6:	4b02      	ldr	r3, [pc, #8]	; (d400 <cmd_status+0x30>)
    d3f8:	881b      	ldrh	r3, [r3, #0]
    d3fa:	8043      	strh	r3, [r0, #2]
}
    d3fc:	4620      	mov	r0, r4
    d3fe:	bd38      	pop	{r3, r4, r5, pc}
    d400:	20000b40 	.word	0x20000b40

0000d404 <disconnect>:
{
    d404:	b510      	push	{r4, lr}
    d406:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    d408:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    d40a:	7899      	ldrb	r1, [r3, #2]
    d40c:	8818      	ldrh	r0, [r3, #0]
    d40e:	f00b f966 	bl	186de <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d412:	b100      	cbz	r0, d416 <disconnect+0x12>
    d414:	200c      	movs	r0, #12
    d416:	f7ff ffdb 	bl	d3d0 <cmd_status>
    d41a:	6020      	str	r0, [r4, #0]
    d41c:	bd10      	pop	{r4, pc}
	...

0000d420 <cmd_complete>:
{
    d420:	b538      	push	{r3, r4, r5, lr}
    d422:	4604      	mov	r4, r0
    d424:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    d426:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    d42a:	f7f9 fb35 	bl	6a98 <bt_buf_get_cmd_complete>
    d42e:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    d430:	1cea      	adds	r2, r5, #3
    d432:	b2d2      	uxtb	r2, r2
    d434:	210e      	movs	r1, #14
    d436:	f7ff ffc1 	bl	d3bc <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    d43a:	6820      	ldr	r0, [r4, #0]
    d43c:	2103      	movs	r1, #3
    d43e:	3008      	adds	r0, #8
    d440:	f00d fce4 	bl	1ae0c <net_buf_simple_add>
	cc->ncmd = 1;
    d444:	2301      	movs	r3, #1
    d446:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    d448:	4b04      	ldr	r3, [pc, #16]	; (d45c <cmd_complete+0x3c>)
    d44a:	881b      	ldrh	r3, [r3, #0]
    d44c:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    d450:	6820      	ldr	r0, [r4, #0]
    d452:	4629      	mov	r1, r5
    d454:	3008      	adds	r0, #8
    d456:	f00d fcd9 	bl	1ae0c <net_buf_simple_add>
}
    d45a:	bd38      	pop	{r3, r4, r5, pc}
    d45c:	20000b40 	.word	0x20000b40

0000d460 <set_event_mask_page_2>:
{
    d460:	b570      	push	{r4, r5, r6, lr}
    d462:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    d464:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    d466:	79da      	ldrb	r2, [r3, #7]
    d468:	7999      	ldrb	r1, [r3, #6]
    d46a:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    d46e:	7958      	ldrb	r0, [r3, #5]
    d470:	791a      	ldrb	r2, [r3, #4]
    d472:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d476:	2400      	movs	r4, #0
    d478:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    d47c:	78d9      	ldrb	r1, [r3, #3]
    d47e:	789a      	ldrb	r2, [r3, #2]
    d480:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    d484:	7859      	ldrb	r1, [r3, #1]
    d486:	781b      	ldrb	r3, [r3, #0]
    d488:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    d48c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    d490:	ea44 0003 	orr.w	r0, r4, r3
    d494:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    d496:	4b04      	ldr	r3, [pc, #16]	; (d4a8 <set_event_mask_page_2+0x48>)
    d498:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d49c:	2101      	movs	r1, #1
    d49e:	4630      	mov	r0, r6
    d4a0:	f7ff ffbe 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    d4a4:	7004      	strb	r4, [r0, #0]
    d4a6:	bd70      	pop	{r4, r5, r6, pc}
    d4a8:	20000bd0 	.word	0x20000bd0

0000d4ac <read_local_version_info>:
{
    d4ac:	b508      	push	{r3, lr}
    d4ae:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d4b0:	2109      	movs	r1, #9
    d4b2:	f7ff ffb5 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d4b6:	2300      	movs	r3, #0
    d4b8:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    d4ba:	2209      	movs	r2, #9
    d4bc:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    d4be:	7083      	strb	r3, [r0, #2]
    d4c0:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    d4c2:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    d4c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d4c8:	7143      	strb	r3, [r0, #5]
    d4ca:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    d4cc:	71c3      	strb	r3, [r0, #7]
    d4ce:	7203      	strb	r3, [r0, #8]
    d4d0:	bd08      	pop	{r3, pc}

0000d4d2 <le_read_buffer_size>:
{
    d4d2:	b508      	push	{r3, lr}
    d4d4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d4d6:	2104      	movs	r1, #4
    d4d8:	f7ff ffa2 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d4dc:	2300      	movs	r3, #0
    d4de:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    d4e0:	221b      	movs	r2, #27
    d4e2:	7042      	strb	r2, [r0, #1]
    d4e4:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    d4e6:	2302      	movs	r3, #2
    d4e8:	70c3      	strb	r3, [r0, #3]
    d4ea:	bd08      	pop	{r3, pc}

0000d4ec <le_read_supp_states>:
{
    d4ec:	b508      	push	{r3, lr}
    d4ee:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d4f0:	2109      	movs	r1, #9
    d4f2:	f7ff ff95 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d4f6:	2200      	movs	r2, #0
    d4f8:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    d4fa:	23ff      	movs	r3, #255	; 0xff
    d4fc:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d4fe:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    d500:	213f      	movs	r1, #63	; 0x3f
    d502:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    d504:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    d506:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d508:	2303      	movs	r3, #3
    d50a:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    d50c:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    d50e:	7202      	strb	r2, [r0, #8]
    d510:	bd08      	pop	{r3, pc}

0000d512 <le_read_adv_chan_tx_power>:
{
    d512:	b508      	push	{r3, lr}
    d514:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d516:	2102      	movs	r1, #2
    d518:	f7ff ff82 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d51c:	2300      	movs	r3, #0
    d51e:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    d520:	7043      	strb	r3, [r0, #1]
    d522:	bd08      	pop	{r3, pc}

0000d524 <vs_read_version_info>:
{
    d524:	b508      	push	{r3, lr}
    d526:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d528:	210d      	movs	r1, #13
    d52a:	f7ff ff79 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d52e:	2300      	movs	r3, #0
    d530:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    d532:	2202      	movs	r2, #2
    d534:	7042      	strb	r2, [r0, #1]
    d536:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    d538:	70c2      	strb	r2, [r0, #3]
    d53a:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    d53c:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    d53e:	2201      	movs	r2, #1
    d540:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    d542:	2209      	movs	r2, #9
    d544:	71c2      	strb	r2, [r0, #7]
    d546:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    d548:	2263      	movs	r2, #99	; 0x63
    d54a:	7242      	strb	r2, [r0, #9]
    d54c:	7283      	strb	r3, [r0, #10]
    d54e:	72c3      	strb	r3, [r0, #11]
    d550:	7303      	strb	r3, [r0, #12]
    d552:	bd08      	pop	{r3, pc}

0000d554 <meta_evt>:
{
    d554:	b570      	push	{r4, r5, r6, lr}
    d556:	4604      	mov	r4, r0
    d558:	460e      	mov	r6, r1
    d55a:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    d55c:	3201      	adds	r2, #1
    d55e:	b2d2      	uxtb	r2, r2
    d560:	213e      	movs	r1, #62	; 0x3e
    d562:	f7ff ff2b 	bl	d3bc <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    d566:	3408      	adds	r4, #8
    d568:	2101      	movs	r1, #1
    d56a:	4620      	mov	r0, r4
    d56c:	f00d fc4e 	bl	1ae0c <net_buf_simple_add>
	me->subevent = subevt;
    d570:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    d572:	4629      	mov	r1, r5
    d574:	4620      	mov	r0, r4
    d576:	f00d fc49 	bl	1ae0c <net_buf_simple_add>
}
    d57a:	bd70      	pop	{r4, r5, r6, pc}

0000d57c <le_chan_sel_algo>:
{
    d57c:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d57e:	4b0f      	ldr	r3, [pc, #60]	; (d5bc <le_chan_sel_algo+0x40>)
    d580:	e9d3 4500 	ldrd	r4, r5, [r3]
    d584:	2400      	movs	r4, #0
    d586:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d58a:	ea54 0305 	orrs.w	r3, r4, r5
    d58e:	d008      	beq.n	d5a2 <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    d590:	4b0b      	ldr	r3, [pc, #44]	; (d5c0 <le_chan_sel_algo+0x44>)
    d592:	e9d3 4500 	ldrd	r4, r5, [r3]
    d596:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    d59a:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d59c:	ea54 0305 	orrs.w	r3, r4, r5
    d5a0:	d100      	bne.n	d5a4 <le_chan_sel_algo+0x28>
    d5a2:	bd38      	pop	{r3, r4, r5, pc}
    d5a4:	4613      	mov	r3, r2
    d5a6:	460d      	mov	r5, r1
    d5a8:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    d5aa:	2203      	movs	r2, #3
    d5ac:	2114      	movs	r1, #20
    d5ae:	4618      	mov	r0, r3
    d5b0:	f7ff ffd0 	bl	d554 <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    d5b4:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    d5b6:	78e3      	ldrb	r3, [r4, #3]
    d5b8:	7083      	strb	r3, [r0, #2]
    d5ba:	e7f2      	b.n	d5a2 <le_chan_sel_algo+0x26>
    d5bc:	2000bc70 	.word	0x2000bc70
    d5c0:	2000bc78 	.word	0x2000bc78

0000d5c4 <disconn_complete>:
{
    d5c4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    d5c6:	4b11      	ldr	r3, [pc, #68]	; (d60c <disconn_complete+0x48>)
    d5c8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d5cc:	f004 0410 	and.w	r4, r4, #16
    d5d0:	2500      	movs	r5, #0
    d5d2:	ea54 0305 	orrs.w	r3, r4, r5
    d5d6:	d100      	bne.n	d5da <disconn_complete+0x16>
    d5d8:	bd70      	pop	{r4, r5, r6, pc}
    d5da:	4614      	mov	r4, r2
    d5dc:	460e      	mov	r6, r1
    d5de:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    d5e0:	2204      	movs	r2, #4
    d5e2:	2105      	movs	r1, #5
    d5e4:	4620      	mov	r0, r4
    d5e6:	f7ff fee9 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d5ea:	2104      	movs	r1, #4
    d5ec:	f104 0008 	add.w	r0, r4, #8
    d5f0:	f00d fc0c 	bl	1ae0c <net_buf_simple_add>
	ep->status = 0x00;
    d5f4:	2300      	movs	r3, #0
    d5f6:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d5f8:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    d5fc:	782b      	ldrb	r3, [r5, #0]
    d5fe:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    d600:	4a03      	ldr	r2, [pc, #12]	; (d610 <disconn_complete+0x4c>)
    d602:	6813      	ldr	r3, [r2, #0]
    d604:	3b01      	subs	r3, #1
    d606:	6013      	str	r3, [r2, #0]
    d608:	e7e6      	b.n	d5d8 <disconn_complete+0x14>
    d60a:	bf00      	nop
    d60c:	2000bc70 	.word	0x2000bc70
    d610:	20000b44 	.word	0x20000b44

0000d614 <enc_refresh_complete>:
{
    d614:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    d616:	4b0d      	ldr	r3, [pc, #52]	; (d64c <enc_refresh_complete+0x38>)
    d618:	e9d3 4500 	ldrd	r4, r5, [r3]
    d61c:	2400      	movs	r4, #0
    d61e:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    d622:	ea54 0305 	orrs.w	r3, r4, r5
    d626:	d100      	bne.n	d62a <enc_refresh_complete+0x16>
    d628:	bd38      	pop	{r3, r4, r5, pc}
    d62a:	4614      	mov	r4, r2
    d62c:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    d62e:	2203      	movs	r2, #3
    d630:	2130      	movs	r1, #48	; 0x30
    d632:	4620      	mov	r0, r4
    d634:	f7ff fec2 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d638:	2103      	movs	r1, #3
    d63a:	f104 0008 	add.w	r0, r4, #8
    d63e:	f00d fbe5 	bl	1ae0c <net_buf_simple_add>
	ep->status = 0x00;
    d642:	2300      	movs	r3, #0
    d644:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d646:	f8a0 5001 	strh.w	r5, [r0, #1]
    d64a:	e7ed      	b.n	d628 <enc_refresh_complete+0x14>
    d64c:	2000bc70 	.word	0x2000bc70

0000d650 <auth_payload_timeout_exp>:
{
    d650:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    d652:	4b0c      	ldr	r3, [pc, #48]	; (d684 <auth_payload_timeout_exp+0x34>)
    d654:	e9d3 4500 	ldrd	r4, r5, [r3]
    d658:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    d65c:	2500      	movs	r5, #0
    d65e:	ea54 0305 	orrs.w	r3, r4, r5
    d662:	d100      	bne.n	d666 <auth_payload_timeout_exp+0x16>
    d664:	bd38      	pop	{r3, r4, r5, pc}
    d666:	4614      	mov	r4, r2
    d668:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    d66a:	2202      	movs	r2, #2
    d66c:	2157      	movs	r1, #87	; 0x57
    d66e:	4620      	mov	r0, r4
    d670:	f7ff fea4 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d674:	2102      	movs	r1, #2
    d676:	f104 0008 	add.w	r0, r4, #8
    d67a:	f00d fbc7 	bl	1ae0c <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    d67e:	8005      	strh	r5, [r0, #0]
    d680:	e7f0      	b.n	d664 <auth_payload_timeout_exp+0x14>
    d682:	bf00      	nop
    d684:	20000bd0 	.word	0x20000bd0

0000d688 <remote_version_info>:
{
    d688:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    d68a:	4b11      	ldr	r3, [pc, #68]	; (d6d0 <remote_version_info+0x48>)
    d68c:	e9d3 4500 	ldrd	r4, r5, [r3]
    d690:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d694:	2500      	movs	r5, #0
    d696:	ea54 0305 	orrs.w	r3, r4, r5
    d69a:	d100      	bne.n	d69e <remote_version_info+0x16>
    d69c:	bd70      	pop	{r4, r5, r6, pc}
    d69e:	4615      	mov	r5, r2
    d6a0:	460e      	mov	r6, r1
    d6a2:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    d6a4:	2208      	movs	r2, #8
    d6a6:	210c      	movs	r1, #12
    d6a8:	4628      	mov	r0, r5
    d6aa:	f7ff fe87 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d6ae:	2108      	movs	r1, #8
    d6b0:	1868      	adds	r0, r5, r1
    d6b2:	f00d fbab 	bl	1ae0c <net_buf_simple_add>
	ep->status = 0x00;
    d6b6:	2300      	movs	r3, #0
    d6b8:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d6ba:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    d6be:	7923      	ldrb	r3, [r4, #4]
    d6c0:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    d6c2:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    d6c6:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    d6c8:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    d6cc:	80c3      	strh	r3, [r0, #6]
    d6ce:	e7e5      	b.n	d69c <remote_version_info+0x14>
    d6d0:	2000bc70 	.word	0x2000bc70

0000d6d4 <encrypt_change>:
{
    d6d4:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    d6d6:	4b0f      	ldr	r3, [pc, #60]	; (d714 <encrypt_change+0x40>)
    d6d8:	e9d3 4500 	ldrd	r4, r5, [r3]
    d6dc:	f004 0480 	and.w	r4, r4, #128	; 0x80
    d6e0:	2500      	movs	r5, #0
    d6e2:	ea54 0305 	orrs.w	r3, r4, r5
    d6e6:	d100      	bne.n	d6ea <encrypt_change+0x16>
    d6e8:	bd70      	pop	{r4, r5, r6, pc}
    d6ea:	4615      	mov	r5, r2
    d6ec:	460e      	mov	r6, r1
    d6ee:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    d6f0:	2204      	movs	r2, #4
    d6f2:	2108      	movs	r1, #8
    d6f4:	4628      	mov	r0, r5
    d6f6:	f7ff fe61 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    d6fa:	2104      	movs	r1, #4
    d6fc:	f105 0008 	add.w	r0, r5, #8
    d700:	f00d fb84 	bl	1ae0c <net_buf_simple_add>
	ep->status = err;
    d704:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    d706:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    d70a:	fab4 f384 	clz	r3, r4
    d70e:	095b      	lsrs	r3, r3, #5
    d710:	70c3      	strb	r3, [r0, #3]
    d712:	e7e9      	b.n	d6e8 <encrypt_change+0x14>
    d714:	2000bc70 	.word	0x2000bc70

0000d718 <read_remote_ver_info>:
{
    d718:	b510      	push	{r4, lr}
    d71a:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    d71c:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    d71e:	8818      	ldrh	r0, [r3, #0]
    d720:	f00a ffc7 	bl	186b2 <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d724:	b100      	cbz	r0, d728 <read_remote_ver_info+0x10>
    d726:	200c      	movs	r0, #12
    d728:	f7ff fe52 	bl	d3d0 <cmd_status>
    d72c:	6020      	str	r0, [r4, #0]
    d72e:	bd10      	pop	{r4, pc}

0000d730 <link_control_cmd_handle>:
{
    d730:	b508      	push	{r3, lr}
    d732:	460b      	mov	r3, r1
	switch (ocf) {
    d734:	2806      	cmp	r0, #6
    d736:	d004      	beq.n	d742 <link_control_cmd_handle+0x12>
    d738:	281d      	cmp	r0, #29
    d73a:	d008      	beq.n	d74e <link_control_cmd_handle+0x1e>
		return -EINVAL;
    d73c:	f06f 0015 	mvn.w	r0, #21
}
    d740:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    d742:	4611      	mov	r1, r2
    d744:	4618      	mov	r0, r3
    d746:	f7ff fe5d 	bl	d404 <disconnect>
	return 0;
    d74a:	2000      	movs	r0, #0
		break;
    d74c:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    d74e:	4611      	mov	r1, r2
    d750:	4618      	mov	r0, r3
    d752:	f7ff ffe1 	bl	d718 <read_remote_ver_info>
	return 0;
    d756:	2000      	movs	r0, #0
		break;
    d758:	bd08      	pop	{r3, pc}
	...

0000d75c <reset>:
{
    d75c:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    d75e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    d762:	4b0f      	ldr	r3, [pc, #60]	; (d7a0 <reset+0x44>)
    d764:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    d766:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    d76a:	f641 75ff 	movw	r5, #8191	; 0x1fff
    d76e:	4b0d      	ldr	r3, [pc, #52]	; (d7a4 <reset+0x48>)
    d770:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    d774:	2400      	movs	r4, #0
    d776:	2500      	movs	r5, #0
    d778:	4b0b      	ldr	r3, [pc, #44]	; (d7a8 <reset+0x4c>)
    d77a:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    d77e:	241f      	movs	r4, #31
    d780:	2500      	movs	r5, #0
    d782:	4b0a      	ldr	r3, [pc, #40]	; (d7ac <reset+0x50>)
    d784:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    d788:	b140      	cbz	r0, d79c <reset+0x40>
    d78a:	460c      	mov	r4, r1
		ll_reset();
    d78c:	f00a fc8c 	bl	180a8 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    d790:	2101      	movs	r1, #1
    d792:	4620      	mov	r0, r4
    d794:	f7ff fe44 	bl	d420 <cmd_complete>
		ccst->status = 0x00;
    d798:	2300      	movs	r3, #0
    d79a:	7003      	strb	r3, [r0, #0]
    d79c:	bd38      	pop	{r3, r4, r5, pc}
    d79e:	bf00      	nop
    d7a0:	20000b48 	.word	0x20000b48
    d7a4:	2000bc70 	.word	0x2000bc70
    d7a8:	20000bd0 	.word	0x20000bd0
    d7ac:	2000bc78 	.word	0x2000bc78

0000d7b0 <read_tx_power_level>:
{
    d7b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    d7b2:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    d7b4:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d7b6:	881d      	ldrh	r5, [r3, #0]
    d7b8:	b2ae      	uxth	r6, r5
	type = cmd->type;
    d7ba:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    d7bc:	2104      	movs	r1, #4
    d7be:	4610      	mov	r0, r2
    d7c0:	f7ff fe2e 	bl	d420 <cmd_complete>
    d7c4:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    d7c6:	1cc2      	adds	r2, r0, #3
    d7c8:	4639      	mov	r1, r7
    d7ca:	4630      	mov	r0, r6
    d7cc:	f00a ff9d 	bl	1870a <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d7d0:	b120      	cbz	r0, d7dc <read_tx_power_level+0x2c>
    d7d2:	2302      	movs	r3, #2
    d7d4:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d7d6:	f8a4 5001 	strh.w	r5, [r4, #1]
    d7da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d7dc:	2300      	movs	r3, #0
    d7de:	e7f9      	b.n	d7d4 <read_tx_power_level+0x24>

0000d7e0 <read_auth_payload_timeout>:
{
    d7e0:	b570      	push	{r4, r5, r6, lr}
    d7e2:	b082      	sub	sp, #8
    d7e4:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    d7e6:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d7e8:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    d7ea:	f10d 0106 	add.w	r1, sp, #6
    d7ee:	b2a0      	uxth	r0, r4
    d7f0:	f00a ff9a 	bl	18728 <ll_apto_get>
    d7f4:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d7f6:	2105      	movs	r1, #5
    d7f8:	4630      	mov	r0, r6
    d7fa:	f7ff fe11 	bl	d420 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d7fe:	b14d      	cbz	r5, d814 <read_auth_payload_timeout+0x34>
    d800:	230c      	movs	r3, #12
    d802:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d804:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    d808:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    d80c:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    d810:	b002      	add	sp, #8
    d812:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d814:	2300      	movs	r3, #0
    d816:	e7f4      	b.n	d802 <read_auth_payload_timeout+0x22>

0000d818 <write_auth_payload_timeout>:
{
    d818:	b570      	push	{r4, r5, r6, lr}
    d81a:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    d81c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d81e:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    d820:	8859      	ldrh	r1, [r3, #2]
    d822:	b2a0      	uxth	r0, r4
    d824:	f00a ff9c 	bl	18760 <ll_apto_set>
    d828:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d82a:	2103      	movs	r1, #3
    d82c:	4630      	mov	r0, r6
    d82e:	f7ff fdf7 	bl	d420 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d832:	b125      	cbz	r5, d83e <write_auth_payload_timeout+0x26>
    d834:	230c      	movs	r3, #12
    d836:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d838:	f8a0 4001 	strh.w	r4, [r0, #1]
    d83c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d83e:	2300      	movs	r3, #0
    d840:	e7f9      	b.n	d836 <write_auth_payload_timeout+0x1e>

0000d842 <ctrl_bb_cmd_handle>:
{
    d842:	b508      	push	{r3, lr}
    d844:	460b      	mov	r3, r1
	switch (ocf) {
    d846:	282d      	cmp	r0, #45	; 0x2d
    d848:	d01f      	beq.n	d88a <ctrl_bb_cmd_handle+0x48>
    d84a:	d908      	bls.n	d85e <ctrl_bb_cmd_handle+0x1c>
    d84c:	287b      	cmp	r0, #123	; 0x7b
    d84e:	d022      	beq.n	d896 <ctrl_bb_cmd_handle+0x54>
    d850:	287c      	cmp	r0, #124	; 0x7c
    d852:	d026      	beq.n	d8a2 <ctrl_bb_cmd_handle+0x60>
    d854:	2863      	cmp	r0, #99	; 0x63
    d856:	d012      	beq.n	d87e <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    d858:	f06f 0015 	mvn.w	r0, #21
}
    d85c:	bd08      	pop	{r3, pc}
	switch (ocf) {
    d85e:	2801      	cmp	r0, #1
    d860:	d007      	beq.n	d872 <ctrl_bb_cmd_handle+0x30>
    d862:	2803      	cmp	r0, #3
    d864:	d1f8      	bne.n	d858 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    d866:	4611      	mov	r1, r2
    d868:	4618      	mov	r0, r3
    d86a:	f7ff ff77 	bl	d75c <reset>
	return 0;
    d86e:	2000      	movs	r0, #0
		break;
    d870:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    d872:	4611      	mov	r1, r2
    d874:	4618      	mov	r0, r3
    d876:	f7f7 fd13 	bl	52a0 <set_event_mask>
	return 0;
    d87a:	2000      	movs	r0, #0
		break;
    d87c:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    d87e:	4611      	mov	r1, r2
    d880:	4618      	mov	r0, r3
    d882:	f7ff fded 	bl	d460 <set_event_mask_page_2>
	return 0;
    d886:	2000      	movs	r0, #0
		break;
    d888:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    d88a:	4611      	mov	r1, r2
    d88c:	4618      	mov	r0, r3
    d88e:	f7ff ff8f 	bl	d7b0 <read_tx_power_level>
	return 0;
    d892:	2000      	movs	r0, #0
		break;
    d894:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    d896:	4611      	mov	r1, r2
    d898:	4618      	mov	r0, r3
    d89a:	f7ff ffa1 	bl	d7e0 <read_auth_payload_timeout>
	return 0;
    d89e:	2000      	movs	r0, #0
		break;
    d8a0:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    d8a2:	4611      	mov	r1, r2
    d8a4:	4618      	mov	r0, r3
    d8a6:	f7ff ffb7 	bl	d818 <write_auth_payload_timeout>
	return 0;
    d8aa:	2000      	movs	r0, #0
		break;
    d8ac:	bd08      	pop	{r3, pc}

0000d8ae <read_supported_commands>:
{
    d8ae:	b510      	push	{r4, lr}
    d8b0:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d8b2:	2141      	movs	r1, #65	; 0x41
    d8b4:	f7ff fdb4 	bl	d420 <cmd_complete>
    d8b8:	4604      	mov	r4, r0
	rp->status = 0x00;
    d8ba:	2100      	movs	r1, #0
    d8bc:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d8c0:	2240      	movs	r2, #64	; 0x40
    d8c2:	f01d f855 	bl	2a970 <memset>
	rp->commands[2] |= BIT(7);
    d8c6:	78e3      	ldrb	r3, [r4, #3]
    d8c8:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d8cc:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    d8ce:	79a3      	ldrb	r3, [r4, #6]
    d8d0:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d8d4:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    d8d6:	7ae3      	ldrb	r3, [r4, #11]
    d8d8:	f043 0304 	orr.w	r3, r3, #4
    d8dc:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    d8de:	7be3      	ldrb	r3, [r4, #15]
    d8e0:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    d8e4:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    d8e6:	7c23      	ldrb	r3, [r4, #16]
    d8e8:	f043 0302 	orr.w	r3, r3, #2
    d8ec:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    d8ee:	7de3      	ldrb	r3, [r4, #23]
    d8f0:	f043 0304 	orr.w	r3, r3, #4
    d8f4:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    d8f6:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    d8f8:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    d8fa:	f062 0208 	orn	r2, r2, #8
    d8fe:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    d900:	22ff      	movs	r2, #255	; 0xff
    d902:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    d904:	f043 030f 	orr.w	r3, r3, #15
    d908:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    d90a:	7863      	ldrb	r3, [r4, #1]
    d90c:	f043 0320 	orr.w	r3, r3, #32
    d910:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    d912:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    d914:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    d918:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    d91c:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    d920:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    d924:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    d928:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    d92c:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    d930:	f040 0004 	orr.w	r0, r0, #4
    d934:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    d938:	f061 010f 	orn	r1, r1, #15
    d93c:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    d940:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    d944:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    d948:	f043 030f 	orr.w	r3, r3, #15
    d94c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    d950:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    d954:	f063 037f 	orn	r3, r3, #127	; 0x7f
    d958:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    d95c:	bd10      	pop	{r4, pc}

0000d95e <read_local_features>:
{
    d95e:	b510      	push	{r4, lr}
    d960:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d962:	2109      	movs	r1, #9
    d964:	f7ff fd5c 	bl	d420 <cmd_complete>
    d968:	4604      	mov	r4, r0
	rp->status = 0x00;
    d96a:	2100      	movs	r1, #0
    d96c:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d970:	2208      	movs	r2, #8
    d972:	f01c fffd 	bl	2a970 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    d976:	2360      	movs	r3, #96	; 0x60
    d978:	7163      	strb	r3, [r4, #5]
    d97a:	bd10      	pop	{r4, pc}

0000d97c <le_read_local_features>:
{
    d97c:	b510      	push	{r4, lr}
    d97e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d980:	2109      	movs	r1, #9
    d982:	f7ff fd4d 	bl	d420 <cmd_complete>
    d986:	4604      	mov	r4, r0
	rp->status = 0x00;
    d988:	2100      	movs	r1, #0
    d98a:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d98e:	2208      	movs	r2, #8
    d990:	f01c ffee 	bl	2a970 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    d994:	23ff      	movs	r3, #255	; 0xff
    d996:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    d998:	2341      	movs	r3, #65	; 0x41
    d99a:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    d99c:	2301      	movs	r3, #1
    d99e:	70e3      	strb	r3, [r4, #3]
    d9a0:	bd10      	pop	{r4, pc}

0000d9a2 <vs_read_supported_commands>:
{
    d9a2:	b510      	push	{r4, lr}
    d9a4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d9a6:	2141      	movs	r1, #65	; 0x41
    d9a8:	f7ff fd3a 	bl	d420 <cmd_complete>
    d9ac:	4604      	mov	r4, r0
	rp->status = 0x00;
    d9ae:	2100      	movs	r1, #0
    d9b0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    d9b4:	2240      	movs	r2, #64	; 0x40
    d9b6:	f01c ffdb 	bl	2a970 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    d9ba:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    d9bc:	f063 0358 	orn	r3, r3, #88	; 0x58
    d9c0:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    d9c2:	78a3      	ldrb	r3, [r4, #2]
    d9c4:	f043 0303 	orr.w	r3, r3, #3
    d9c8:	70a3      	strb	r3, [r4, #2]
    d9ca:	bd10      	pop	{r4, pc}

0000d9cc <vs_read_supported_features>:
{
    d9cc:	b508      	push	{r3, lr}
    d9ce:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d9d0:	2109      	movs	r1, #9
    d9d2:	f7ff fd25 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    d9d6:	2100      	movs	r1, #0
    d9d8:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    d9dc:	2208      	movs	r2, #8
    d9de:	f01c ffc7 	bl	2a970 <memset>
    d9e2:	bd08      	pop	{r3, pc}

0000d9e4 <vs_read_static_addrs>:
{
    d9e4:	b510      	push	{r4, lr}
    d9e6:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d9e8:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9ec:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    d9f0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d9f4:	d00d      	beq.n	da12 <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    d9f6:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d9fa:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    d9fe:	f013 0f01 	tst.w	r3, #1
    da02:	d110      	bne.n	da26 <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    da04:	2102      	movs	r1, #2
    da06:	f7ff fd0b 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    da0a:	2300      	movs	r3, #0
    da0c:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    da0e:	7043      	strb	r3, [r0, #1]
    da10:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    da12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da16:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    da1a:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    da1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
    da20:	4293      	cmp	r3, r2
    da22:	d1e8      	bne.n	d9f6 <vs_read_static_addrs+0x12>
    da24:	e7ee      	b.n	da04 <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    da26:	2118      	movs	r1, #24
    da28:	f7ff fcfa 	bl	d420 <cmd_complete>
		rp->status = 0x00;
    da2c:	2100      	movs	r1, #0
    da2e:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    da30:	2301      	movs	r3, #1
    da32:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    da34:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    da38:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    da3c:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    da3e:	f3c3 2407 	ubfx	r4, r3, #8, #8
    da42:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    da44:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    da46:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    da48:	0a1b      	lsrs	r3, r3, #8
    da4a:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    da4c:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    da50:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    da54:	b29b      	uxth	r3, r3
	dst[0] = val;
    da56:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    da58:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    da5a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    da5e:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    da60:	2210      	movs	r2, #16
    da62:	3008      	adds	r0, #8
    da64:	f01c ff84 	bl	2a970 <memset>
		return;
    da68:	bd10      	pop	{r4, pc}

0000da6a <vs_read_key_hierarchy_roots>:
{
    da6a:	b510      	push	{r4, lr}
    da6c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    da6e:	2121      	movs	r1, #33	; 0x21
    da70:	f7ff fcd6 	bl	d420 <cmd_complete>
    da74:	4604      	mov	r4, r0
	rp->status = 0x00;
    da76:	2300      	movs	r3, #0
    da78:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    da7a:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da7e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    da82:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da86:	d03f      	beq.n	db08 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    da88:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da8c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    da90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    da94:	d038      	beq.n	db08 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    da96:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    da9a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    da9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    daa2:	d031      	beq.n	db08 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    daa4:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    daa8:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    daac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    dab0:	d02a      	beq.n	db08 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    dab2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    dab6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    daba:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    dabc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dac0:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    dac2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dac4:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    dac6:	0a1b      	lsrs	r3, r3, #8
    dac8:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    daca:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    dace:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    dad0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dad4:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    dad6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    dad8:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    dada:	0a1b      	lsrs	r3, r3, #8
    dadc:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    dade:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    dae2:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    dae4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    dae8:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    daea:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    daec:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    daee:	0a1b      	lsrs	r3, r3, #8
    daf0:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    daf2:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    daf6:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    daf8:	f3c3 2207 	ubfx	r2, r3, #8, #8
    dafc:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    dafe:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db00:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    db02:	0a1b      	lsrs	r3, r3, #8
    db04:	7403      	strb	r3, [r0, #16]
    db06:	e004      	b.n	db12 <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    db08:	2210      	movs	r2, #16
    db0a:	2100      	movs	r1, #0
    db0c:	1c60      	adds	r0, r4, #1
    db0e:	f01c ff2f 	bl	2a970 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    db12:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    db16:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    db1a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    db1e:	d040      	beq.n	dba2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    db20:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    db24:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    db28:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    db2c:	d039      	beq.n	dba2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    db2e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    db32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    db36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    db3a:	d032      	beq.n	dba2 <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    db3c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    db40:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    db44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    db48:	d02b      	beq.n	dba2 <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    db4a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    db4e:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    db52:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    db54:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db58:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    db5a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db5c:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    db5e:	0a1b      	lsrs	r3, r3, #8
    db60:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    db62:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    db66:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    db68:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db6c:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    db6e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db70:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    db72:	0a1b      	lsrs	r3, r3, #8
    db74:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    db76:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    db7a:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    db7c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    db80:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    db82:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db84:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    db86:	0a1b      	lsrs	r3, r3, #8
    db88:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    db8a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    db8e:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    db90:	f3c3 2207 	ubfx	r2, r3, #8, #8
    db94:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    db96:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    db98:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    db9a:	0a1b      	lsrs	r3, r3, #8
    db9c:	f884 3020 	strb.w	r3, [r4, #32]
    dba0:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    dba2:	2210      	movs	r2, #16
    dba4:	2100      	movs	r1, #0
    dba6:	f104 0011 	add.w	r0, r4, #17
    dbaa:	f01c fee1 	bl	2a970 <memset>
    dbae:	bd10      	pop	{r4, pc}

0000dbb0 <read_bd_addr>:
{
    dbb0:	b508      	push	{r3, lr}
    dbb2:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dbb4:	2107      	movs	r1, #7
    dbb6:	f7ff fc33 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    dbba:	2300      	movs	r3, #0
    dbbc:	4601      	mov	r1, r0
    dbbe:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    dbc2:	4618      	mov	r0, r3
    dbc4:	f00b fd64 	bl	19690 <ll_addr_get>
    dbc8:	bd08      	pop	{r3, pc}

0000dbca <info_cmd_handle>:
{
    dbca:	b508      	push	{r3, lr}
    dbcc:	460b      	mov	r3, r1
	switch (ocf) {
    dbce:	3801      	subs	r0, #1
    dbd0:	2808      	cmp	r0, #8
    dbd2:	d81e      	bhi.n	dc12 <info_cmd_handle+0x48>
    dbd4:	e8df f000 	tbb	[pc, r0]
    dbd8:	1d110b05 	.word	0x1d110b05
    dbdc:	1d1d1d1d 	.word	0x1d1d1d1d
    dbe0:	17          	.byte	0x17
    dbe1:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    dbe2:	4611      	mov	r1, r2
    dbe4:	4618      	mov	r0, r3
    dbe6:	f7ff fc61 	bl	d4ac <read_local_version_info>
	return 0;
    dbea:	2000      	movs	r0, #0
		break;
    dbec:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    dbee:	4611      	mov	r1, r2
    dbf0:	4618      	mov	r0, r3
    dbf2:	f7ff fe5c 	bl	d8ae <read_supported_commands>
	return 0;
    dbf6:	2000      	movs	r0, #0
		break;
    dbf8:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    dbfa:	4611      	mov	r1, r2
    dbfc:	4618      	mov	r0, r3
    dbfe:	f7ff feae 	bl	d95e <read_local_features>
	return 0;
    dc02:	2000      	movs	r0, #0
		break;
    dc04:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    dc06:	4611      	mov	r1, r2
    dc08:	4618      	mov	r0, r3
    dc0a:	f7ff ffd1 	bl	dbb0 <read_bd_addr>
	return 0;
    dc0e:	2000      	movs	r0, #0
		break;
    dc10:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dc12:	f06f 0015 	mvn.w	r0, #21
}
    dc16:	bd08      	pop	{r3, pc}

0000dc18 <le_set_random_address>:
{
    dc18:	b510      	push	{r4, lr}
    dc1a:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    dc1c:	6881      	ldr	r1, [r0, #8]
    dc1e:	2001      	movs	r0, #1
    dc20:	f00b fd58 	bl	196d4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc24:	2101      	movs	r1, #1
    dc26:	4620      	mov	r0, r4
    dc28:	f7ff fbfa 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    dc2c:	2300      	movs	r3, #0
    dc2e:	7003      	strb	r3, [r0, #0]
    dc30:	bd10      	pop	{r4, pc}

0000dc32 <vs_write_bd_addr>:
{
    dc32:	b510      	push	{r4, lr}
    dc34:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    dc36:	6881      	ldr	r1, [r0, #8]
    dc38:	2000      	movs	r0, #0
    dc3a:	f00b fd4b 	bl	196d4 <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc3e:	2101      	movs	r1, #1
    dc40:	4620      	mov	r0, r4
    dc42:	f7ff fbed 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    dc46:	2300      	movs	r3, #0
    dc48:	7003      	strb	r3, [r0, #0]
    dc4a:	bd10      	pop	{r4, pc}

0000dc4c <le_read_wl_size>:
{
    dc4c:	b510      	push	{r4, lr}
    dc4e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dc50:	2102      	movs	r1, #2
    dc52:	f7ff fbe5 	bl	d420 <cmd_complete>
    dc56:	4604      	mov	r4, r0
	rp->status = 0x00;
    dc58:	2300      	movs	r3, #0
    dc5a:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    dc5c:	f00b ff3a 	bl	19ad4 <ll_wl_size_get>
    dc60:	7060      	strb	r0, [r4, #1]
    dc62:	bd10      	pop	{r4, pc}

0000dc64 <le_clear_wl>:
{
    dc64:	b510      	push	{r4, lr}
    dc66:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc68:	2101      	movs	r1, #1
    dc6a:	f7ff fbd9 	bl	d420 <cmd_complete>
    dc6e:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    dc70:	f00b ff32 	bl	19ad8 <ll_wl_clear>
    dc74:	7020      	strb	r0, [r4, #0]
    dc76:	bd10      	pop	{r4, pc}

0000dc78 <le_add_dev_to_wl>:
{
    dc78:	b538      	push	{r3, r4, r5, lr}
    dc7a:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    dc7c:	6880      	ldr	r0, [r0, #8]
    dc7e:	f00c f81d 	bl	19cbc <ll_wl_add>
    dc82:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc84:	2101      	movs	r1, #1
    dc86:	4628      	mov	r0, r5
    dc88:	f7ff fbca 	bl	d420 <cmd_complete>
	ccst->status = status;
    dc8c:	7004      	strb	r4, [r0, #0]
    dc8e:	bd38      	pop	{r3, r4, r5, pc}

0000dc90 <le_rem_dev_from_wl>:
{
    dc90:	b538      	push	{r3, r4, r5, lr}
    dc92:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    dc94:	6880      	ldr	r0, [r0, #8]
    dc96:	f00b ff35 	bl	19b04 <ll_wl_remove>
    dc9a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    dc9c:	2101      	movs	r1, #1
    dc9e:	4628      	mov	r0, r5
    dca0:	f7ff fbbe 	bl	d420 <cmd_complete>
	ccst->status = status;
    dca4:	7004      	strb	r4, [r0, #0]
    dca6:	bd38      	pop	{r3, r4, r5, pc}

0000dca8 <le_encrypt>:
{
    dca8:	b510      	push	{r4, lr}
    dcaa:	b084      	sub	sp, #16
    dcac:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    dcae:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    dcb0:	2300      	movs	r3, #0
    dcb2:	466a      	mov	r2, sp
    dcb4:	f100 0110 	add.w	r1, r0, #16
    dcb8:	f001 fc9e 	bl	f5f8 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    dcbc:	2111      	movs	r1, #17
    dcbe:	4620      	mov	r0, r4
    dcc0:	f7ff fbae 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    dcc4:	2300      	movs	r3, #0
    dcc6:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    dcca:	2210      	movs	r2, #16
    dccc:	4669      	mov	r1, sp
    dcce:	f7f2 faf7 	bl	2c0 <memcpy>
}
    dcd2:	b004      	add	sp, #16
    dcd4:	bd10      	pop	{r4, pc}
	...

0000dcd8 <vs_read_build_info>:
{
    dcd8:	b570      	push	{r4, r5, r6, lr}
    dcda:	b08a      	sub	sp, #40	; 0x28
    dcdc:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    dcde:	466c      	mov	r4, sp
    dce0:	4d0c      	ldr	r5, [pc, #48]	; (dd14 <vs_read_build_info+0x3c>)
    dce2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dce4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dce6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    dce8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    dcea:	e895 0003 	ldmia.w	r5, {r0, r1}
    dcee:	f844 0b04 	str.w	r0, [r4], #4
    dcf2:	f824 1b02 	strh.w	r1, [r4], #2
    dcf6:	0c09      	lsrs	r1, r1, #16
    dcf8:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    dcfa:	2128      	movs	r1, #40	; 0x28
    dcfc:	4630      	mov	r0, r6
    dcfe:	f7ff fb8f 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    dd02:	2300      	movs	r3, #0
    dd04:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    dd08:	2227      	movs	r2, #39	; 0x27
    dd0a:	4669      	mov	r1, sp
    dd0c:	f7f2 fad8 	bl	2c0 <memcpy>
}
    dd10:	b00a      	add	sp, #40	; 0x28
    dd12:	bd70      	pop	{r4, r5, r6, pc}
    dd14:	00031968 	.word	0x00031968

0000dd18 <vendor_cmd_handle>:
{
    dd18:	b508      	push	{r3, lr}
    dd1a:	460b      	mov	r3, r1
	switch (ocf) {
    dd1c:	3801      	subs	r0, #1
    dd1e:	2809      	cmp	r0, #9
    dd20:	d830      	bhi.n	dd84 <vendor_cmd_handle+0x6c>
    dd22:	e8df f000 	tbb	[pc, r0]
    dd26:	0b05      	.short	0x0b05
    dd28:	1d2f2f11 	.word	0x1d2f2f11
    dd2c:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    dd30:	4611      	mov	r1, r2
    dd32:	4618      	mov	r0, r3
    dd34:	f7ff fbf6 	bl	d524 <vs_read_version_info>
	return 0;
    dd38:	2000      	movs	r0, #0
		break;
    dd3a:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    dd3c:	4611      	mov	r1, r2
    dd3e:	4618      	mov	r0, r3
    dd40:	f7ff fe2f 	bl	d9a2 <vs_read_supported_commands>
	return 0;
    dd44:	2000      	movs	r0, #0
		break;
    dd46:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    dd48:	4611      	mov	r1, r2
    dd4a:	4618      	mov	r0, r3
    dd4c:	f7ff fe3e 	bl	d9cc <vs_read_supported_features>
	return 0;
    dd50:	2000      	movs	r0, #0
		break;
    dd52:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    dd54:	4611      	mov	r1, r2
    dd56:	4618      	mov	r0, r3
    dd58:	f7ff ffbe 	bl	dcd8 <vs_read_build_info>
	return 0;
    dd5c:	2000      	movs	r0, #0
		break;
    dd5e:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    dd60:	4611      	mov	r1, r2
    dd62:	4618      	mov	r0, r3
    dd64:	f7ff ff65 	bl	dc32 <vs_write_bd_addr>
	return 0;
    dd68:	2000      	movs	r0, #0
		break;
    dd6a:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    dd6c:	4611      	mov	r1, r2
    dd6e:	4618      	mov	r0, r3
    dd70:	f7ff fe38 	bl	d9e4 <vs_read_static_addrs>
	return 0;
    dd74:	2000      	movs	r0, #0
		break;
    dd76:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    dd78:	4611      	mov	r1, r2
    dd7a:	4618      	mov	r0, r3
    dd7c:	f7ff fe75 	bl	da6a <vs_read_key_hierarchy_roots>
	return 0;
    dd80:	2000      	movs	r0, #0
		break;
    dd82:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dd84:	f06f 0015 	mvn.w	r0, #21
}
    dd88:	bd08      	pop	{r3, pc}

0000dd8a <le_unknown_rsp>:
{
    dd8a:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    dd8c:	7903      	ldrb	r3, [r0, #4]
    dd8e:	2b0e      	cmp	r3, #14
    dd90:	d000      	beq.n	dd94 <le_unknown_rsp+0xa>
    dd92:	bd08      	pop	{r3, pc}
    dd94:	4613      	mov	r3, r2
    dd96:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    dd98:	2100      	movs	r1, #0
    dd9a:	201a      	movs	r0, #26
    dd9c:	f7f8 f966 	bl	606c <le_remote_feat_complete>
}
    dda0:	e7f7      	b.n	dd92 <le_unknown_rsp+0x8>

0000dda2 <le_rand>:
{
    dda2:	b508      	push	{r3, lr}
    dda4:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    dda6:	2109      	movs	r1, #9
    dda8:	f7ff fb3a 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    ddac:	2300      	movs	r3, #0
    ddae:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    ddb2:	2108      	movs	r1, #8
    ddb4:	f003 fcb4 	bl	11720 <bt_rand>
    ddb8:	bd08      	pop	{r3, pc}

0000ddba <le_set_adv_param>:
{
    ddba:	b570      	push	{r4, r5, r6, lr}
    ddbc:	b08c      	sub	sp, #48	; 0x30
    ddbe:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    ddc0:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    ddc2:	460c      	mov	r4, r1
    ddc4:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    ddc8:	790b      	ldrb	r3, [r1, #4]
    ddca:	2000      	movs	r0, #0
    ddcc:	900a      	str	r0, [sp, #40]	; 0x28
    ddce:	9009      	str	r0, [sp, #36]	; 0x24
    ddd0:	9008      	str	r0, [sp, #32]
    ddd2:	9007      	str	r0, [sp, #28]
    ddd4:	9006      	str	r0, [sp, #24]
    ddd6:	9005      	str	r0, [sp, #20]
    ddd8:	7b8e      	ldrb	r6, [r1, #14]
    ddda:	9604      	str	r6, [sp, #16]
    dddc:	7b4e      	ldrb	r6, [r1, #13]
    ddde:	9603      	str	r6, [sp, #12]
    dde0:	9402      	str	r4, [sp, #8]
    dde2:	798c      	ldrb	r4, [r1, #6]
    dde4:	9401      	str	r4, [sp, #4]
    dde6:	7949      	ldrb	r1, [r1, #5]
    dde8:	9100      	str	r1, [sp, #0]
    ddea:	4601      	mov	r1, r0
    ddec:	f00c fc42 	bl	1a674 <ll_adv_params_set>
    ddf0:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    ddf2:	2101      	movs	r1, #1
    ddf4:	4628      	mov	r0, r5
    ddf6:	f7ff fb13 	bl	d420 <cmd_complete>
	ccst->status = status;
    ddfa:	7004      	strb	r4, [r0, #0]
}
    ddfc:	b00c      	add	sp, #48	; 0x30
    ddfe:	bd70      	pop	{r4, r5, r6, pc}

0000de00 <le_set_adv_data>:
{
    de00:	b510      	push	{r4, lr}
    de02:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    de04:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    de06:	1c59      	adds	r1, r3, #1
    de08:	7818      	ldrb	r0, [r3, #0]
    de0a:	f00c fd57 	bl	1a8bc <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    de0e:	2101      	movs	r1, #1
    de10:	4620      	mov	r0, r4
    de12:	f7ff fb05 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    de16:	2300      	movs	r3, #0
    de18:	7003      	strb	r3, [r0, #0]
    de1a:	bd10      	pop	{r4, pc}

0000de1c <le_set_scan_rsp_data>:
{
    de1c:	b510      	push	{r4, lr}
    de1e:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    de20:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    de22:	1c59      	adds	r1, r3, #1
    de24:	7818      	ldrb	r0, [r3, #0]
    de26:	f00c fda2 	bl	1a96e <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    de2a:	2101      	movs	r1, #1
    de2c:	4620      	mov	r0, r4
    de2e:	f7ff faf7 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    de32:	2300      	movs	r3, #0
    de34:	7003      	strb	r3, [r0, #0]
    de36:	bd10      	pop	{r4, pc}

0000de38 <le_set_adv_enable>:
{
    de38:	b538      	push	{r3, r4, r5, lr}
    de3a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    de3c:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    de3e:	7818      	ldrb	r0, [r3, #0]
    de40:	f00c fdda 	bl	1a9f8 <ll_adv_enable>
    de44:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de46:	2101      	movs	r1, #1
    de48:	4628      	mov	r0, r5
    de4a:	f7ff fae9 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de4e:	b114      	cbz	r4, de56 <le_set_adv_enable+0x1e>
    de50:	230c      	movs	r3, #12
    de52:	7003      	strb	r3, [r0, #0]
    de54:	bd38      	pop	{r3, r4, r5, pc}
    de56:	2300      	movs	r3, #0
    de58:	e7fb      	b.n	de52 <le_set_adv_enable+0x1a>

0000de5a <le_set_scan_param>:
{
    de5a:	b530      	push	{r4, r5, lr}
    de5c:	b083      	sub	sp, #12
    de5e:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    de60:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    de62:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    de66:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    de6a:	7820      	ldrb	r0, [r4, #0]
    de6c:	7963      	ldrb	r3, [r4, #5]
    de6e:	79a4      	ldrb	r4, [r4, #6]
    de70:	9400      	str	r4, [sp, #0]
    de72:	f00c fe53 	bl	1ab1c <ll_scan_params_set>
    de76:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    de78:	2101      	movs	r1, #1
    de7a:	4628      	mov	r0, r5
    de7c:	f7ff fad0 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de80:	b11c      	cbz	r4, de8a <le_set_scan_param+0x30>
    de82:	230c      	movs	r3, #12
    de84:	7003      	strb	r3, [r0, #0]
}
    de86:	b003      	add	sp, #12
    de88:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    de8a:	2300      	movs	r3, #0
    de8c:	e7fa      	b.n	de84 <le_set_scan_param+0x2a>
	...

0000de90 <le_set_scan_enable>:
{
    de90:	b538      	push	{r3, r4, r5, lr}
    de92:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    de94:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    de96:	781a      	ldrb	r2, [r3, #0]
    de98:	b13a      	cbz	r2, deaa <le_set_scan_enable+0x1a>
    de9a:	785a      	ldrb	r2, [r3, #1]
    de9c:	b12a      	cbz	r2, deaa <le_set_scan_enable+0x1a>
		dup_count = 0;
    de9e:	2200      	movs	r2, #0
    dea0:	490b      	ldr	r1, [pc, #44]	; (ded0 <le_set_scan_enable+0x40>)
    dea2:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    dea4:	490b      	ldr	r1, [pc, #44]	; (ded4 <le_set_scan_enable+0x44>)
    dea6:	600a      	str	r2, [r1, #0]
    dea8:	e003      	b.n	deb2 <le_set_scan_enable+0x22>
		dup_count = -1;
    deaa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    deae:	4a08      	ldr	r2, [pc, #32]	; (ded0 <le_set_scan_enable+0x40>)
    deb0:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    deb2:	7818      	ldrb	r0, [r3, #0]
    deb4:	f00c fe4e 	bl	1ab54 <ll_scan_enable>
    deb8:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    deba:	2101      	movs	r1, #1
    debc:	4628      	mov	r0, r5
    debe:	f7ff faaf 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dec2:	b114      	cbz	r4, deca <le_set_scan_enable+0x3a>
    dec4:	230c      	movs	r3, #12
    dec6:	7003      	strb	r3, [r0, #0]
    dec8:	bd38      	pop	{r3, r4, r5, pc}
    deca:	2300      	movs	r3, #0
    decc:	e7fb      	b.n	dec6 <le_set_scan_enable+0x36>
    dece:	bf00      	nop
    ded0:	20000b48 	.word	0x20000b48
    ded4:	20000b4c 	.word	0x20000b4c

0000ded8 <le_create_connection>:
{
    ded8:	b5f0      	push	{r4, r5, r6, r7, lr}
    deda:	b087      	sub	sp, #28
    dedc:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    dede:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    dee0:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    dee2:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    dee4:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    dee8:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    deec:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    def0:	7922      	ldrb	r2, [r4, #4]
    def2:	7963      	ldrb	r3, [r4, #5]
    def4:	1da6      	adds	r6, r4, #6
    def6:	7b24      	ldrb	r4, [r4, #12]
    def8:	f8cd c010 	str.w	ip, [sp, #16]
    defc:	f8cd e00c 	str.w	lr, [sp, #12]
    df00:	9702      	str	r7, [sp, #8]
    df02:	9401      	str	r4, [sp, #4]
    df04:	9600      	str	r6, [sp, #0]
    df06:	f00c fe65 	bl	1abd4 <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    df0a:	b100      	cbz	r0, df0e <le_create_connection+0x36>
    df0c:	200c      	movs	r0, #12
    df0e:	f7ff fa5f 	bl	d3d0 <cmd_status>
    df12:	6028      	str	r0, [r5, #0]
}
    df14:	b007      	add	sp, #28
    df16:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000df18 <le_create_conn_cancel>:
{
    df18:	b538      	push	{r3, r4, r5, lr}
    df1a:	460d      	mov	r5, r1
	status = ll_connect_disable();
    df1c:	f00b fa00 	bl	19320 <ll_connect_disable>
    df20:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    df22:	2101      	movs	r1, #1
    df24:	4628      	mov	r0, r5
    df26:	f7ff fa7b 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df2a:	b114      	cbz	r4, df32 <le_create_conn_cancel+0x1a>
    df2c:	230c      	movs	r3, #12
    df2e:	7003      	strb	r3, [r0, #0]
    df30:	bd38      	pop	{r3, r4, r5, pc}
    df32:	2300      	movs	r3, #0
    df34:	e7fb      	b.n	df2e <le_create_conn_cancel+0x16>

0000df36 <le_set_host_chan_classif>:
{
    df36:	b538      	push	{r3, r4, r5, lr}
    df38:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    df3a:	6880      	ldr	r0, [r0, #8]
    df3c:	f00a fb08 	bl	18550 <ll_chm_update>
    df40:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    df42:	2101      	movs	r1, #1
    df44:	4628      	mov	r0, r5
    df46:	f7ff fa6b 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df4a:	b114      	cbz	r4, df52 <le_set_host_chan_classif+0x1c>
    df4c:	230c      	movs	r3, #12
    df4e:	7003      	strb	r3, [r0, #0]
    df50:	bd38      	pop	{r3, r4, r5, pc}
    df52:	2300      	movs	r3, #0
    df54:	e7fb      	b.n	df4e <le_set_host_chan_classif+0x18>

0000df56 <le_start_encryption>:
{
    df56:	b510      	push	{r4, lr}
    df58:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    df5a:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    df5c:	4611      	mov	r1, r2
    df5e:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    df62:	f102 030c 	add.w	r3, r2, #12
    df66:	320a      	adds	r2, #10
    df68:	f00a fe2c 	bl	18bc4 <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    df6c:	b100      	cbz	r0, df70 <le_start_encryption+0x1a>
    df6e:	200c      	movs	r0, #12
    df70:	f7ff fa2e 	bl	d3d0 <cmd_status>
    df74:	6020      	str	r0, [r4, #0]
    df76:	bd10      	pop	{r4, pc}

0000df78 <le_ltk_req_reply>:
{
    df78:	b570      	push	{r4, r5, r6, lr}
    df7a:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    df7c:	6882      	ldr	r2, [r0, #8]
    df7e:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    df82:	2100      	movs	r1, #0
    df84:	b2a0      	uxth	r0, r4
    df86:	f00a fb36 	bl	185f6 <ll_start_enc_req_send>
    df8a:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    df8c:	2103      	movs	r1, #3
    df8e:	4630      	mov	r0, r6
    df90:	f7ff fa46 	bl	d420 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    df94:	b125      	cbz	r5, dfa0 <le_ltk_req_reply+0x28>
    df96:	230c      	movs	r3, #12
    df98:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    df9a:	f8a0 4001 	strh.w	r4, [r0, #1]
    df9e:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfa0:	2300      	movs	r3, #0
    dfa2:	e7f9      	b.n	df98 <le_ltk_req_reply+0x20>

0000dfa4 <le_ltk_req_neg_reply>:
{
    dfa4:	b570      	push	{r4, r5, r6, lr}
    dfa6:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    dfa8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dfaa:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    dfac:	2200      	movs	r2, #0
    dfae:	2106      	movs	r1, #6
    dfb0:	b2a0      	uxth	r0, r4
    dfb2:	f00a fb20 	bl	185f6 <ll_start_enc_req_send>
    dfb6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    dfb8:	2103      	movs	r1, #3
    dfba:	4630      	mov	r0, r6
    dfbc:	f7ff fa30 	bl	d420 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfc0:	b125      	cbz	r5, dfcc <le_ltk_req_neg_reply+0x28>
    dfc2:	230c      	movs	r3, #12
    dfc4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    dfc6:	f8a0 4001 	strh.w	r4, [r0, #1]
    dfca:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    dfcc:	2300      	movs	r3, #0
    dfce:	e7f9      	b.n	dfc4 <le_ltk_req_neg_reply+0x20>

0000dfd0 <le_read_chan_map>:
{
    dfd0:	b570      	push	{r4, r5, r6, lr}
    dfd2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    dfd4:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    dfd6:	8815      	ldrh	r5, [r2, #0]
    dfd8:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    dfda:	2108      	movs	r1, #8
    dfdc:	4618      	mov	r0, r3
    dfde:	f7ff fa1f 	bl	d420 <cmd_complete>
    dfe2:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    dfe4:	1cc1      	adds	r1, r0, #3
    dfe6:	4630      	mov	r0, r6
    dfe8:	f00a faf0 	bl	185cc <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    dfec:	b120      	cbz	r0, dff8 <le_read_chan_map+0x28>
    dfee:	2302      	movs	r3, #2
    dff0:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    dff2:	f8a4 5001 	strh.w	r5, [r4, #1]
    dff6:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    dff8:	2300      	movs	r3, #0
    dffa:	e7f9      	b.n	dff0 <le_read_chan_map+0x20>

0000dffc <le_read_remote_features>:
{
    dffc:	b510      	push	{r4, lr}
    dffe:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    e000:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    e002:	8818      	ldrh	r0, [r3, #0]
    e004:	f00a fb3f 	bl	18686 <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e008:	b100      	cbz	r0, e00c <le_read_remote_features+0x10>
    e00a:	200c      	movs	r0, #12
    e00c:	f7ff f9e0 	bl	d3d0 <cmd_status>
    e010:	6020      	str	r0, [r4, #0]
    e012:	bd10      	pop	{r4, pc}

0000e014 <le_conn_param_req_neg_reply>:
{
    e014:	b570      	push	{r4, r5, r6, lr}
    e016:	b082      	sub	sp, #8
    e018:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    e01a:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e01c:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    e01e:	789a      	ldrb	r2, [r3, #2]
    e020:	2300      	movs	r3, #0
    e022:	9301      	str	r3, [sp, #4]
    e024:	9300      	str	r3, [sp, #0]
    e026:	2102      	movs	r1, #2
    e028:	b2a0      	uxth	r0, r4
    e02a:	f00a fa01 	bl	18430 <ll_conn_update>
    e02e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e030:	2103      	movs	r1, #3
    e032:	4630      	mov	r0, r6
    e034:	f7ff f9f4 	bl	d420 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e038:	b12d      	cbz	r5, e046 <le_conn_param_req_neg_reply+0x32>
    e03a:	230c      	movs	r3, #12
    e03c:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e03e:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    e042:	b002      	add	sp, #8
    e044:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e046:	2300      	movs	r3, #0
    e048:	e7f8      	b.n	e03c <le_conn_param_req_neg_reply+0x28>

0000e04a <le_set_data_len>:
{
    e04a:	b570      	push	{r4, r5, r6, lr}
    e04c:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    e04e:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e050:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    e052:	889a      	ldrh	r2, [r3, #4]
    e054:	8859      	ldrh	r1, [r3, #2]
    e056:	b2a0      	uxth	r0, r4
    e058:	f00a fb99 	bl	1878e <ll_length_req_send>
    e05c:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    e05e:	2103      	movs	r1, #3
    e060:	4630      	mov	r0, r6
    e062:	f7ff f9dd 	bl	d420 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e066:	b125      	cbz	r5, e072 <le_set_data_len+0x28>
    e068:	230c      	movs	r3, #12
    e06a:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e06c:	f8a0 4001 	strh.w	r4, [r0, #1]
    e070:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e072:	2300      	movs	r3, #0
    e074:	e7f9      	b.n	e06a <le_set_data_len+0x20>

0000e076 <le_read_default_data_len>:
{
    e076:	b510      	push	{r4, lr}
    e078:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e07a:	2105      	movs	r1, #5
    e07c:	f7ff f9d0 	bl	d420 <cmd_complete>
    e080:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    e082:	1cc1      	adds	r1, r0, #3
    e084:	3001      	adds	r0, #1
    e086:	f00a fba9 	bl	187dc <ll_length_default_get>
	rp->status = 0x00;
    e08a:	2300      	movs	r3, #0
    e08c:	7023      	strb	r3, [r4, #0]
    e08e:	bd10      	pop	{r4, pc}

0000e090 <le_write_default_data_len>:
{
    e090:	b538      	push	{r3, r4, r5, lr}
    e092:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    e094:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    e096:	8859      	ldrh	r1, [r3, #2]
    e098:	8818      	ldrh	r0, [r3, #0]
    e09a:	f00a fba9 	bl	187f0 <ll_length_default_set>
    e09e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e0a0:	2101      	movs	r1, #1
    e0a2:	4628      	mov	r0, r5
    e0a4:	f7ff f9bc 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e0a8:	b114      	cbz	r4, e0b0 <le_write_default_data_len+0x20>
    e0aa:	231e      	movs	r3, #30
    e0ac:	7003      	strb	r3, [r0, #0]
    e0ae:	bd38      	pop	{r3, r4, r5, pc}
    e0b0:	2300      	movs	r3, #0
    e0b2:	e7fb      	b.n	e0ac <le_write_default_data_len+0x1c>

0000e0b4 <le_read_max_data_len>:
{
    e0b4:	b510      	push	{r4, lr}
    e0b6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e0b8:	2109      	movs	r1, #9
    e0ba:	f7ff f9b1 	bl	d420 <cmd_complete>
    e0be:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    e0c0:	1dc3      	adds	r3, r0, #7
    e0c2:	1d42      	adds	r2, r0, #5
    e0c4:	1cc1      	adds	r1, r0, #3
    e0c6:	3001      	adds	r0, #1
    e0c8:	f00a fb9c 	bl	18804 <ll_length_max_get>
	rp->status = 0x00;
    e0cc:	2300      	movs	r3, #0
    e0ce:	7023      	strb	r3, [r4, #0]
    e0d0:	bd10      	pop	{r4, pc}
	...

0000e0d4 <le_phy_upd_complete>:
{
    e0d4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0d6:	4b1a      	ldr	r3, [pc, #104]	; (e140 <le_phy_upd_complete+0x6c>)
    e0d8:	e9d3 4500 	ldrd	r4, r5, [r3]
    e0dc:	2400      	movs	r4, #0
    e0de:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    e0e2:	ea54 0305 	orrs.w	r3, r4, r5
    e0e6:	d008      	beq.n	e0fa <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    e0e8:	4b16      	ldr	r3, [pc, #88]	; (e144 <le_phy_upd_complete+0x70>)
    e0ea:	e9d3 4500 	ldrd	r4, r5, [r3]
    e0ee:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    e0f2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e0f4:	ea54 0305 	orrs.w	r3, r4, r5
    e0f8:	d100      	bne.n	e0fc <le_phy_upd_complete+0x28>
    e0fa:	bd38      	pop	{r3, r4, r5, pc}
    e0fc:	4613      	mov	r3, r2
    e0fe:	460c      	mov	r4, r1
    e100:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    e102:	2205      	movs	r2, #5
    e104:	210c      	movs	r1, #12
    e106:	4618      	mov	r0, r3
    e108:	f7ff fa24 	bl	d554 <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    e10c:	78eb      	ldrb	r3, [r5, #3]
    e10e:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    e110:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    e114:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    e116:	fa92 f3a2 	rbit	r3, r2
    e11a:	fab3 f383 	clz	r3, r3
    e11e:	b90a      	cbnz	r2, e124 <le_phy_upd_complete+0x50>
    e120:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e124:	3301      	adds	r3, #1
    e126:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    e128:	796a      	ldrb	r2, [r5, #5]
    e12a:	fa92 f3a2 	rbit	r3, r2
    e12e:	fab3 f383 	clz	r3, r3
    e132:	b90a      	cbnz	r2, e138 <le_phy_upd_complete+0x64>
    e134:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e138:	3301      	adds	r3, #1
    e13a:	7103      	strb	r3, [r0, #4]
    e13c:	e7dd      	b.n	e0fa <le_phy_upd_complete+0x26>
    e13e:	bf00      	nop
    e140:	2000bc70 	.word	0x2000bc70
    e144:	2000bc78 	.word	0x2000bc78

0000e148 <le_read_phy>:
{
    e148:	b570      	push	{r4, r5, r6, lr}
    e14a:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    e14c:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e14e:	8815      	ldrh	r5, [r2, #0]
    e150:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    e152:	2105      	movs	r1, #5
    e154:	4618      	mov	r0, r3
    e156:	f7ff f963 	bl	d420 <cmd_complete>
    e15a:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    e15c:	1d02      	adds	r2, r0, #4
    e15e:	1cc1      	adds	r1, r0, #3
    e160:	4630      	mov	r0, r6
    e162:	f00a fb59 	bl	18818 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e166:	b1c0      	cbz	r0, e19a <le_read_phy+0x52>
    e168:	230c      	movs	r3, #12
    e16a:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    e16c:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    e170:	78e2      	ldrb	r2, [r4, #3]
    e172:	fa92 f3a2 	rbit	r3, r2
    e176:	fab3 f383 	clz	r3, r3
    e17a:	b90a      	cbnz	r2, e180 <le_read_phy+0x38>
    e17c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e180:	3301      	adds	r3, #1
    e182:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    e184:	7922      	ldrb	r2, [r4, #4]
    e186:	fa92 f3a2 	rbit	r3, r2
    e18a:	fab3 f383 	clz	r3, r3
    e18e:	b90a      	cbnz	r2, e194 <le_read_phy+0x4c>
    e190:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    e194:	3301      	adds	r3, #1
    e196:	7123      	strb	r3, [r4, #4]
    e198:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    e19a:	2300      	movs	r3, #0
    e19c:	e7e5      	b.n	e16a <le_read_phy+0x22>

0000e19e <le_set_default_phy>:
{
    e19e:	b538      	push	{r3, r4, r5, lr}
    e1a0:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    e1a2:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e1a4:	781a      	ldrb	r2, [r3, #0]
    e1a6:	f012 0f01 	tst.w	r2, #1
    e1aa:	d001      	beq.n	e1b0 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    e1ac:	2107      	movs	r1, #7
    e1ae:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e1b0:	f012 0f02 	tst.w	r2, #2
    e1b4:	d001      	beq.n	e1ba <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    e1b6:	2207      	movs	r2, #7
    e1b8:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    e1ba:	7899      	ldrb	r1, [r3, #2]
    e1bc:	7858      	ldrb	r0, [r3, #1]
    e1be:	f00a fb3f 	bl	18840 <ll_phy_default_set>
    e1c2:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e1c4:	2101      	movs	r1, #1
    e1c6:	4628      	mov	r0, r5
    e1c8:	f7ff f92a 	bl	d420 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    e1cc:	b114      	cbz	r4, e1d4 <le_set_default_phy+0x36>
    e1ce:	231e      	movs	r3, #30
    e1d0:	7003      	strb	r3, [r0, #0]
    e1d2:	bd38      	pop	{r3, r4, r5, pc}
    e1d4:	2300      	movs	r3, #0
    e1d6:	e7fb      	b.n	e1d0 <le_set_default_phy+0x32>

0000e1d8 <le_set_phy>:
{
    e1d8:	b538      	push	{r3, r4, r5, lr}
    e1da:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    e1dc:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    e1de:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    e1e0:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    e1e4:	788b      	ldrb	r3, [r1, #2]
    e1e6:	f013 0f01 	tst.w	r3, #1
    e1ea:	d001      	beq.n	e1f0 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    e1ec:	2507      	movs	r5, #7
    e1ee:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    e1f0:	f013 0f02 	tst.w	r3, #2
    e1f4:	d001      	beq.n	e1fa <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    e1f6:	2307      	movs	r3, #7
    e1f8:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    e1fa:	f012 0f03 	tst.w	r2, #3
    e1fe:	d00c      	beq.n	e21a <le_set_phy+0x42>
		phy_opts -= 1;
    e200:	3a01      	subs	r2, #1
		phy_opts &= 1;
    e202:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    e206:	790b      	ldrb	r3, [r1, #4]
    e208:	78c9      	ldrb	r1, [r1, #3]
    e20a:	f00a fb23 	bl	18854 <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    e20e:	b100      	cbz	r0, e212 <le_set_phy+0x3a>
    e210:	200c      	movs	r0, #12
    e212:	f7ff f8dd 	bl	d3d0 <cmd_status>
    e216:	6020      	str	r0, [r4, #0]
    e218:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    e21a:	2200      	movs	r2, #0
    e21c:	e7f3      	b.n	e206 <le_set_phy+0x2e>

0000e21e <le_add_dev_to_rl>:
{
    e21e:	b538      	push	{r3, r4, r5, lr}
    e220:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    e222:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    e224:	f100 0217 	add.w	r2, r0, #23
    e228:	1dc1      	adds	r1, r0, #7
    e22a:	f00b fffd 	bl	1a228 <ll_rl_add>
    e22e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e230:	2101      	movs	r1, #1
    e232:	4628      	mov	r0, r5
    e234:	f7ff f8f4 	bl	d420 <cmd_complete>
	ccst->status = status;
    e238:	7004      	strb	r4, [r0, #0]
    e23a:	bd38      	pop	{r3, r4, r5, pc}

0000e23c <le_rem_dev_from_rl>:
{
    e23c:	b538      	push	{r3, r4, r5, lr}
    e23e:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    e240:	6880      	ldr	r0, [r0, #8]
    e242:	f00c f8af 	bl	1a3a4 <ll_rl_remove>
    e246:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e248:	2101      	movs	r1, #1
    e24a:	4628      	mov	r0, r5
    e24c:	f7ff f8e8 	bl	d420 <cmd_complete>
	ccst->status = status;
    e250:	7004      	strb	r4, [r0, #0]
    e252:	bd38      	pop	{r3, r4, r5, pc}

0000e254 <le_clear_rl>:
{
    e254:	b510      	push	{r4, lr}
    e256:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    e258:	2101      	movs	r1, #1
    e25a:	f7ff f8e1 	bl	d420 <cmd_complete>
    e25e:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    e260:	f00b ffd6 	bl	1a210 <ll_rl_clear>
    e264:	7020      	strb	r0, [r4, #0]
    e266:	bd10      	pop	{r4, pc}

0000e268 <le_read_rl_size>:
{
    e268:	b510      	push	{r4, lr}
    e26a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e26c:	2102      	movs	r1, #2
    e26e:	f7ff f8d7 	bl	d420 <cmd_complete>
    e272:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    e274:	f00b ffca 	bl	1a20c <ll_rl_size_get>
    e278:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    e27a:	2300      	movs	r3, #0
    e27c:	7023      	strb	r3, [r4, #0]
    e27e:	bd10      	pop	{r4, pc}

0000e280 <le_read_peer_rpa>:
{
    e280:	b510      	push	{r4, lr}
    e282:	b082      	sub	sp, #8
    e284:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    e286:	2207      	movs	r2, #7
    e288:	6881      	ldr	r1, [r0, #8]
    e28a:	4668      	mov	r0, sp
    e28c:	f7f2 f818 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e290:	2107      	movs	r1, #7
    e292:	4620      	mov	r0, r4
    e294:	f7ff f8c4 	bl	d420 <cmd_complete>
    e298:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    e29a:	1c41      	adds	r1, r0, #1
    e29c:	4668      	mov	r0, sp
    e29e:	f00c f925 	bl	1a4ec <ll_rl_crpa_get>
    e2a2:	7020      	strb	r0, [r4, #0]
}
    e2a4:	b002      	add	sp, #8
    e2a6:	bd10      	pop	{r4, pc}

0000e2a8 <le_read_local_rpa>:
{
    e2a8:	b510      	push	{r4, lr}
    e2aa:	b082      	sub	sp, #8
    e2ac:	460c      	mov	r4, r1
    e2ae:	2207      	movs	r2, #7
    e2b0:	6881      	ldr	r1, [r0, #8]
    e2b2:	4668      	mov	r0, sp
    e2b4:	f7f2 f804 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    e2b8:	2107      	movs	r1, #7
    e2ba:	4620      	mov	r0, r4
    e2bc:	f7ff f8b0 	bl	d420 <cmd_complete>
    e2c0:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    e2c2:	1c41      	adds	r1, r0, #1
    e2c4:	4668      	mov	r0, sp
    e2c6:	f00c f939 	bl	1a53c <ll_rl_lrpa_get>
    e2ca:	7020      	strb	r0, [r4, #0]
}
    e2cc:	b002      	add	sp, #8
    e2ce:	bd10      	pop	{r4, pc}

0000e2d0 <le_set_addr_res_enable>:
{
    e2d0:	b538      	push	{r3, r4, r5, lr}
    e2d2:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    e2d4:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    e2d6:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2d8:	2101      	movs	r1, #1
    e2da:	4618      	mov	r0, r3
    e2dc:	f7ff f8a0 	bl	d420 <cmd_complete>
    e2e0:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    e2e2:	4628      	mov	r0, r5
    e2e4:	f00c f944 	bl	1a570 <ll_rl_enable>
    e2e8:	7020      	strb	r0, [r4, #0]
    e2ea:	bd38      	pop	{r3, r4, r5, pc}

0000e2ec <le_set_rpa_timeout>:
{
    e2ec:	b510      	push	{r4, lr}
    e2ee:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    e2f0:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    e2f2:	8818      	ldrh	r0, [r3, #0]
    e2f4:	f00c f954 	bl	1a5a0 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    e2f8:	2101      	movs	r1, #1
    e2fa:	4620      	mov	r0, r4
    e2fc:	f7ff f890 	bl	d420 <cmd_complete>
	ccst->status = 0x00;
    e300:	2300      	movs	r3, #0
    e302:	7003      	strb	r3, [r0, #0]
    e304:	bd10      	pop	{r4, pc}

0000e306 <le_set_privacy_mode>:
{
    e306:	b538      	push	{r3, r4, r5, lr}
    e308:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    e30a:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    e30c:	79c1      	ldrb	r1, [r0, #7]
    e30e:	f00c f951 	bl	1a5b4 <ll_priv_mode_set>
    e312:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    e314:	2101      	movs	r1, #1
    e316:	4628      	mov	r0, r5
    e318:	f7ff f882 	bl	d420 <cmd_complete>
	ccst->status = status;
    e31c:	7004      	strb	r4, [r0, #0]
    e31e:	bd38      	pop	{r3, r4, r5, pc}

0000e320 <le_read_tx_power>:
{
    e320:	b508      	push	{r3, lr}
    e322:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    e324:	2103      	movs	r1, #3
    e326:	f7ff f87b 	bl	d420 <cmd_complete>
	rp->status = 0x00;
    e32a:	4601      	mov	r1, r0
    e32c:	2300      	movs	r3, #0
    e32e:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    e332:	3001      	adds	r0, #1
    e334:	f00a f9f3 	bl	1871e <ll_tx_power_get>
    e338:	bd08      	pop	{r3, pc}

0000e33a <controller_cmd_handle>:
{
    e33a:	b508      	push	{r3, lr}
    e33c:	460b      	mov	r3, r1
	switch (ocf) {
    e33e:	3801      	subs	r0, #1
    e340:	284d      	cmp	r0, #77	; 0x4d
    e342:	f200 8164 	bhi.w	e60e <controller_cmd_handle+0x2d4>
    e346:	e8df f010 	tbh	[pc, r0, lsl #1]
    e34a:	004e      	.short	0x004e
    e34c:	005a0054 	.word	0x005a0054
    e350:	00600162 	.word	0x00600162
    e354:	00960090 	.word	0x00960090
    e358:	00a2009c 	.word	0x00a2009c
    e35c:	00ae00a8 	.word	0x00ae00a8
    e360:	00ba00b4 	.word	0x00ba00b4
    e364:	006600c0 	.word	0x006600c0
    e368:	0072006c 	.word	0x0072006c
    e36c:	00ea0078 	.word	0x00ea0078
    e370:	00de00c6 	.word	0x00de00c6
    e374:	007e00e4 	.word	0x007e00e4
    e378:	00cc0084 	.word	0x00cc0084
    e37c:	00d800d2 	.word	0x00d800d2
    e380:	0162008a 	.word	0x0162008a
    e384:	01620162 	.word	0x01620162
    e388:	00f600f0 	.word	0x00f600f0
    e38c:	010200fc 	.word	0x010200fc
    e390:	01620108 	.word	0x01620108
    e394:	01260162 	.word	0x01260162
    e398:	0132012c 	.word	0x0132012c
    e39c:	013e0138 	.word	0x013e0138
    e3a0:	014a0144 	.word	0x014a0144
    e3a4:	010e0150 	.word	0x010e0150
    e3a8:	011a0114 	.word	0x011a0114
    e3ac:	01620120 	.word	0x01620120
    e3b0:	01620162 	.word	0x01620162
    e3b4:	01620162 	.word	0x01620162
    e3b8:	01620162 	.word	0x01620162
    e3bc:	01620162 	.word	0x01620162
    e3c0:	01620162 	.word	0x01620162
    e3c4:	01620162 	.word	0x01620162
    e3c8:	01620162 	.word	0x01620162
    e3cc:	01620162 	.word	0x01620162
    e3d0:	01620162 	.word	0x01620162
    e3d4:	01620162 	.word	0x01620162
    e3d8:	01620162 	.word	0x01620162
    e3dc:	015c0162 	.word	0x015c0162
    e3e0:	01620162 	.word	0x01620162
    e3e4:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    e3e6:	4611      	mov	r1, r2
    e3e8:	4618      	mov	r0, r3
    e3ea:	f7f6 fe3f 	bl	506c <le_set_event_mask>
	return 0;
    e3ee:	2000      	movs	r0, #0
		break;
    e3f0:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    e3f2:	4611      	mov	r1, r2
    e3f4:	4618      	mov	r0, r3
    e3f6:	f7ff f86c 	bl	d4d2 <le_read_buffer_size>
	return 0;
    e3fa:	2000      	movs	r0, #0
		break;
    e3fc:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    e3fe:	4611      	mov	r1, r2
    e400:	4618      	mov	r0, r3
    e402:	f7ff fabb 	bl	d97c <le_read_local_features>
	return 0;
    e406:	2000      	movs	r0, #0
		break;
    e408:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    e40a:	4611      	mov	r1, r2
    e40c:	4618      	mov	r0, r3
    e40e:	f7ff fc03 	bl	dc18 <le_set_random_address>
	return 0;
    e412:	2000      	movs	r0, #0
		break;
    e414:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    e416:	4611      	mov	r1, r2
    e418:	4618      	mov	r0, r3
    e41a:	f7ff fc17 	bl	dc4c <le_read_wl_size>
	return 0;
    e41e:	2000      	movs	r0, #0
		break;
    e420:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    e422:	4611      	mov	r1, r2
    e424:	4618      	mov	r0, r3
    e426:	f7ff fc1d 	bl	dc64 <le_clear_wl>
	return 0;
    e42a:	2000      	movs	r0, #0
		break;
    e42c:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    e42e:	4611      	mov	r1, r2
    e430:	4618      	mov	r0, r3
    e432:	f7ff fc21 	bl	dc78 <le_add_dev_to_wl>
	return 0;
    e436:	2000      	movs	r0, #0
		break;
    e438:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    e43a:	4611      	mov	r1, r2
    e43c:	4618      	mov	r0, r3
    e43e:	f7ff fc27 	bl	dc90 <le_rem_dev_from_wl>
	return 0;
    e442:	2000      	movs	r0, #0
		break;
    e444:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    e446:	4611      	mov	r1, r2
    e448:	4618      	mov	r0, r3
    e44a:	f7ff fc2d 	bl	dca8 <le_encrypt>
	return 0;
    e44e:	2000      	movs	r0, #0
		break;
    e450:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    e452:	4611      	mov	r1, r2
    e454:	4618      	mov	r0, r3
    e456:	f7ff fca4 	bl	dda2 <le_rand>
	return 0;
    e45a:	2000      	movs	r0, #0
		break;
    e45c:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    e45e:	4611      	mov	r1, r2
    e460:	4618      	mov	r0, r3
    e462:	f7ff f843 	bl	d4ec <le_read_supp_states>
	return 0;
    e466:	2000      	movs	r0, #0
		break;
    e468:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    e46a:	4611      	mov	r1, r2
    e46c:	4618      	mov	r0, r3
    e46e:	f7ff fca4 	bl	ddba <le_set_adv_param>
	return 0;
    e472:	2000      	movs	r0, #0
		break;
    e474:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    e476:	4611      	mov	r1, r2
    e478:	4618      	mov	r0, r3
    e47a:	f7ff f84a 	bl	d512 <le_read_adv_chan_tx_power>
	return 0;
    e47e:	2000      	movs	r0, #0
		break;
    e480:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    e482:	4611      	mov	r1, r2
    e484:	4618      	mov	r0, r3
    e486:	f7ff fcbb 	bl	de00 <le_set_adv_data>
	return 0;
    e48a:	2000      	movs	r0, #0
		break;
    e48c:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    e48e:	4611      	mov	r1, r2
    e490:	4618      	mov	r0, r3
    e492:	f7ff fcc3 	bl	de1c <le_set_scan_rsp_data>
	return 0;
    e496:	2000      	movs	r0, #0
		break;
    e498:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    e49a:	4611      	mov	r1, r2
    e49c:	4618      	mov	r0, r3
    e49e:	f7ff fccb 	bl	de38 <le_set_adv_enable>
	return 0;
    e4a2:	2000      	movs	r0, #0
		break;
    e4a4:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    e4a6:	4611      	mov	r1, r2
    e4a8:	4618      	mov	r0, r3
    e4aa:	f7ff fcd6 	bl	de5a <le_set_scan_param>
	return 0;
    e4ae:	2000      	movs	r0, #0
		break;
    e4b0:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    e4b2:	4611      	mov	r1, r2
    e4b4:	4618      	mov	r0, r3
    e4b6:	f7ff fceb 	bl	de90 <le_set_scan_enable>
	return 0;
    e4ba:	2000      	movs	r0, #0
		break;
    e4bc:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    e4be:	4611      	mov	r1, r2
    e4c0:	4618      	mov	r0, r3
    e4c2:	f7ff fd09 	bl	ded8 <le_create_connection>
	return 0;
    e4c6:	2000      	movs	r0, #0
		break;
    e4c8:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    e4ca:	4611      	mov	r1, r2
    e4cc:	4618      	mov	r0, r3
    e4ce:	f7ff fd23 	bl	df18 <le_create_conn_cancel>
	return 0;
    e4d2:	2000      	movs	r0, #0
		break;
    e4d4:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    e4d6:	4611      	mov	r1, r2
    e4d8:	4618      	mov	r0, r3
    e4da:	f7ff fd2c 	bl	df36 <le_set_host_chan_classif>
	return 0;
    e4de:	2000      	movs	r0, #0
		break;
    e4e0:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    e4e2:	4611      	mov	r1, r2
    e4e4:	4618      	mov	r0, r3
    e4e6:	f7ff fd36 	bl	df56 <le_start_encryption>
	return 0;
    e4ea:	2000      	movs	r0, #0
		break;
    e4ec:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    e4ee:	4611      	mov	r1, r2
    e4f0:	4618      	mov	r0, r3
    e4f2:	f7ff fd41 	bl	df78 <le_ltk_req_reply>
	return 0;
    e4f6:	2000      	movs	r0, #0
		break;
    e4f8:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    e4fa:	4611      	mov	r1, r2
    e4fc:	4618      	mov	r0, r3
    e4fe:	f7ff fd51 	bl	dfa4 <le_ltk_req_neg_reply>
	return 0;
    e502:	2000      	movs	r0, #0
		break;
    e504:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    e506:	4611      	mov	r1, r2
    e508:	4618      	mov	r0, r3
    e50a:	f7ff fd61 	bl	dfd0 <le_read_chan_map>
	return 0;
    e50e:	2000      	movs	r0, #0
		break;
    e510:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    e512:	4611      	mov	r1, r2
    e514:	4618      	mov	r0, r3
    e516:	f7ff fd71 	bl	dffc <le_read_remote_features>
	return 0;
    e51a:	2000      	movs	r0, #0
		break;
    e51c:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    e51e:	4611      	mov	r1, r2
    e520:	4618      	mov	r0, r3
    e522:	f7f9 f9c1 	bl	78a8 <le_conn_update>
	return 0;
    e526:	2000      	movs	r0, #0
		break;
    e528:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    e52a:	4611      	mov	r1, r2
    e52c:	4618      	mov	r0, r3
    e52e:	f7f7 fe47 	bl	61c0 <le_conn_param_req_reply>
	return 0;
    e532:	2000      	movs	r0, #0
		break;
    e534:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    e536:	4611      	mov	r1, r2
    e538:	4618      	mov	r0, r3
    e53a:	f7ff fd6b 	bl	e014 <le_conn_param_req_neg_reply>
	return 0;
    e53e:	2000      	movs	r0, #0
		break;
    e540:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    e542:	4611      	mov	r1, r2
    e544:	4618      	mov	r0, r3
    e546:	f7ff fd80 	bl	e04a <le_set_data_len>
	return 0;
    e54a:	2000      	movs	r0, #0
		break;
    e54c:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    e54e:	4611      	mov	r1, r2
    e550:	4618      	mov	r0, r3
    e552:	f7ff fd90 	bl	e076 <le_read_default_data_len>
	return 0;
    e556:	2000      	movs	r0, #0
		break;
    e558:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    e55a:	4611      	mov	r1, r2
    e55c:	4618      	mov	r0, r3
    e55e:	f7ff fd97 	bl	e090 <le_write_default_data_len>
	return 0;
    e562:	2000      	movs	r0, #0
		break;
    e564:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    e566:	4611      	mov	r1, r2
    e568:	4618      	mov	r0, r3
    e56a:	f7ff fda3 	bl	e0b4 <le_read_max_data_len>
	return 0;
    e56e:	2000      	movs	r0, #0
		break;
    e570:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    e572:	4611      	mov	r1, r2
    e574:	4618      	mov	r0, r3
    e576:	f7ff fde7 	bl	e148 <le_read_phy>
	return 0;
    e57a:	2000      	movs	r0, #0
		break;
    e57c:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    e57e:	4611      	mov	r1, r2
    e580:	4618      	mov	r0, r3
    e582:	f7ff fe0c 	bl	e19e <le_set_default_phy>
	return 0;
    e586:	2000      	movs	r0, #0
		break;
    e588:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    e58a:	4611      	mov	r1, r2
    e58c:	4618      	mov	r0, r3
    e58e:	f7ff fe23 	bl	e1d8 <le_set_phy>
	return 0;
    e592:	2000      	movs	r0, #0
		break;
    e594:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    e596:	4611      	mov	r1, r2
    e598:	4618      	mov	r0, r3
    e59a:	f7ff fe40 	bl	e21e <le_add_dev_to_rl>
	return 0;
    e59e:	2000      	movs	r0, #0
		break;
    e5a0:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    e5a2:	4611      	mov	r1, r2
    e5a4:	4618      	mov	r0, r3
    e5a6:	f7ff fe49 	bl	e23c <le_rem_dev_from_rl>
	return 0;
    e5aa:	2000      	movs	r0, #0
		break;
    e5ac:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    e5ae:	4611      	mov	r1, r2
    e5b0:	4618      	mov	r0, r3
    e5b2:	f7ff fe4f 	bl	e254 <le_clear_rl>
	return 0;
    e5b6:	2000      	movs	r0, #0
		break;
    e5b8:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    e5ba:	4611      	mov	r1, r2
    e5bc:	4618      	mov	r0, r3
    e5be:	f7ff fe53 	bl	e268 <le_read_rl_size>
	return 0;
    e5c2:	2000      	movs	r0, #0
		break;
    e5c4:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    e5c6:	4611      	mov	r1, r2
    e5c8:	4618      	mov	r0, r3
    e5ca:	f7ff fe59 	bl	e280 <le_read_peer_rpa>
	return 0;
    e5ce:	2000      	movs	r0, #0
		break;
    e5d0:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    e5d2:	4611      	mov	r1, r2
    e5d4:	4618      	mov	r0, r3
    e5d6:	f7ff fe67 	bl	e2a8 <le_read_local_rpa>
	return 0;
    e5da:	2000      	movs	r0, #0
		break;
    e5dc:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    e5de:	4611      	mov	r1, r2
    e5e0:	4618      	mov	r0, r3
    e5e2:	f7ff fe75 	bl	e2d0 <le_set_addr_res_enable>
	return 0;
    e5e6:	2000      	movs	r0, #0
		break;
    e5e8:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    e5ea:	4611      	mov	r1, r2
    e5ec:	4618      	mov	r0, r3
    e5ee:	f7ff fe7d 	bl	e2ec <le_set_rpa_timeout>
	return 0;
    e5f2:	2000      	movs	r0, #0
		break;
    e5f4:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    e5f6:	4611      	mov	r1, r2
    e5f8:	4618      	mov	r0, r3
    e5fa:	f7ff fe84 	bl	e306 <le_set_privacy_mode>
	return 0;
    e5fe:	2000      	movs	r0, #0
		break;
    e600:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    e602:	4611      	mov	r1, r2
    e604:	4618      	mov	r0, r3
    e606:	f7ff fe8b 	bl	e320 <le_read_tx_power>
	return 0;
    e60a:	2000      	movs	r0, #0
		break;
    e60c:	bd08      	pop	{r3, pc}
		return -EINVAL;
    e60e:	f06f 0015 	mvn.w	r0, #21
}
    e612:	bd08      	pop	{r3, pc}

0000e614 <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    e614:	4b0e      	ldr	r3, [pc, #56]	; (e650 <data_buf_overflow+0x3c>)
    e616:	e9d3 2300 	ldrd	r2, r3, [r3]
    e61a:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    e61e:	2300      	movs	r3, #0
    e620:	4313      	orrs	r3, r2
    e622:	d100      	bne.n	e626 <data_buf_overflow+0x12>
    e624:	4770      	bx	lr
{
    e626:	b510      	push	{r4, lr}
    e628:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e62a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e62e:	2001      	movs	r0, #1
    e630:	f7f8 fa1c 	bl	6a6c <bt_buf_get_rx>
    e634:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    e636:	2201      	movs	r2, #1
    e638:	211a      	movs	r1, #26
    e63a:	f7fe febf 	bl	d3bc <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    e63e:	6820      	ldr	r0, [r4, #0]
    e640:	2101      	movs	r1, #1
    e642:	3008      	adds	r0, #8
    e644:	f00c fbe2 	bl	1ae0c <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    e648:	2301      	movs	r3, #1
    e64a:	7003      	strb	r3, [r0, #0]
    e64c:	bd10      	pop	{r4, pc}
    e64e:	bf00      	nop
    e650:	2000bc70 	.word	0x2000bc70

0000e654 <encode_data_ctrl>:
{
    e654:	b510      	push	{r4, lr}
    e656:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    e658:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    e65a:	78e0      	ldrb	r0, [r4, #3]
    e65c:	3803      	subs	r0, #3
    e65e:	2812      	cmp	r0, #18
    e660:	d82e      	bhi.n	e6c0 <encode_data_ctrl+0x6c>
    e662:	e8df f000 	tbb	[pc, r0]
    e666:	2d0a      	.short	0x2d0a
    e668:	2d290e2d 	.word	0x2d290e2d
    e66c:	192d2d12 	.word	0x192d2d12
    e670:	2d212d1d 	.word	0x2d212d1d
    e674:	252d2d2d 	.word	0x252d2d2d
    e678:	25          	.byte	0x25
    e679:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    e67a:	4620      	mov	r0, r4
    e67c:	f7f7 feec 	bl	6458 <le_ltk_request>
		break;
    e680:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    e682:	2000      	movs	r0, #0
    e684:	f7ff f826 	bl	d6d4 <encrypt_change>
		break;
    e688:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    e68a:	4613      	mov	r3, r2
    e68c:	460a      	mov	r2, r1
    e68e:	4621      	mov	r1, r4
    e690:	2000      	movs	r0, #0
    e692:	f7f7 fceb 	bl	606c <le_remote_feat_complete>
		break;
    e696:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    e698:	4620      	mov	r0, r4
    e69a:	f7fe fff5 	bl	d688 <remote_version_info>
		break;
    e69e:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    e6a0:	7920      	ldrb	r0, [r4, #4]
    e6a2:	f7ff f817 	bl	d6d4 <encrypt_change>
		break;
    e6a6:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    e6a8:	4620      	mov	r0, r4
    e6aa:	f7f7 fdd7 	bl	625c <le_conn_param_req>
		break;
    e6ae:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    e6b0:	4620      	mov	r0, r4
    e6b2:	f7f6 fa43 	bl	4b3c <le_data_len_change>
		break;
    e6b6:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    e6b8:	4620      	mov	r0, r4
    e6ba:	f7ff fb66 	bl	dd8a <le_unknown_rsp>
		break;
    e6be:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e6c0:	4040      	eors	r0, r0
    e6c2:	f380 8811 	msr	BASEPRI, r0
    e6c6:	f04f 0004 	mov.w	r0, #4
    e6ca:	df02      	svc	2

0000e6cc <le_advertising_report>:
{
    e6cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    e6d0:	b082      	sub	sp, #8
    e6d2:	4605      	mov	r5, r0
    e6d4:	460e      	mov	r6, r1
    e6d6:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    e6d8:	4b90      	ldr	r3, [pc, #576]	; (e91c <le_advertising_report+0x250>)
    e6da:	e893 0003 	ldmia.w	r3, {r0, r1}
    e6de:	9000      	str	r0, [sp, #0]
    e6e0:	f8ad 1004 	strh.w	r1, [sp, #4]
    e6e4:	0c09      	lsrs	r1, r1, #16
    e6e6:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e6ea:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e6ec:	330b      	adds	r3, #11
    e6ee:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    e6f2:	782b      	ldrb	r3, [r5, #0]
    e6f4:	f013 0f40 	tst.w	r3, #64	; 0x40
    e6f8:	d125      	bne.n	e746 <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    e6fa:	4b89      	ldr	r3, [pc, #548]	; (e920 <le_advertising_report+0x254>)
    e6fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    e700:	2200      	movs	r2, #0
    e702:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e706:	4313      	orrs	r3, r2
    e708:	f000 80b0 	beq.w	e86c <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    e70c:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e70e:	330c      	adds	r3, #12
    e710:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    e712:	b947      	cbnz	r7, e726 <le_advertising_report+0x5a>
    e714:	4b83      	ldr	r3, [pc, #524]	; (e924 <le_advertising_report+0x258>)
    e716:	e9d3 2300 	ldrd	r2, r3, [r3]
    e71a:	f002 0202 	and.w	r2, r2, #2
    e71e:	2300      	movs	r3, #0
    e720:	4313      	orrs	r3, r2
    e722:	f000 80a3 	beq.w	e86c <le_advertising_report+0x1a0>
    e726:	b147      	cbz	r7, e73a <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    e728:	4b7e      	ldr	r3, [pc, #504]	; (e924 <le_advertising_report+0x258>)
    e72a:	e9d3 2300 	ldrd	r2, r3, [r3]
    e72e:	f002 020b 	and.w	r2, r2, #11
    e732:	2300      	movs	r3, #0
    e734:	4313      	orrs	r3, r2
    e736:	f000 8099 	beq.w	e86c <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    e73a:	4b7b      	ldr	r3, [pc, #492]	; (e928 <le_advertising_report+0x25c>)
    e73c:	681b      	ldr	r3, [r3, #0]
    e73e:	2b00      	cmp	r3, #0
    e740:	db08      	blt.n	e754 <le_advertising_report+0x88>
    e742:	2400      	movs	r4, #0
    e744:	e009      	b.n	e75a <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    e746:	1cab      	adds	r3, r5, #2
    e748:	4642      	mov	r2, r8
    e74a:	2100      	movs	r1, #0
    e74c:	4608      	mov	r0, r1
    e74e:	f00b fea9 	bl	1a4a4 <ll_rl_crpa_set>
    e752:	e7d2      	b.n	e6fa <le_advertising_report+0x2e>
	return false;
    e754:	2300      	movs	r3, #0
    e756:	e054      	b.n	e802 <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    e758:	3401      	adds	r4, #1
    e75a:	4b73      	ldr	r3, [pc, #460]	; (e928 <le_advertising_report+0x25c>)
    e75c:	681b      	ldr	r3, [r3, #0]
    e75e:	429c      	cmp	r4, r3
    e760:	da26      	bge.n	e7b0 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    e762:	4972      	ldr	r1, [pc, #456]	; (e92c <le_advertising_report+0x260>)
    e764:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    e768:	2206      	movs	r2, #6
    e76a:	3102      	adds	r1, #2
    e76c:	1ca8      	adds	r0, r5, #2
    e76e:	f01c f86b 	bl	2a848 <memcmp>
    e772:	2800      	cmp	r0, #0
    e774:	d1f0      	bne.n	e758 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    e776:	782b      	ldrb	r3, [r5, #0]
    e778:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e77c:	4a6b      	ldr	r2, [pc, #428]	; (e92c <le_advertising_report+0x260>)
    e77e:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    e782:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    e784:	4293      	cmp	r3, r2
    e786:	d1e7      	bne.n	e758 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    e788:	4b68      	ldr	r3, [pc, #416]	; (e92c <le_advertising_report+0x260>)
    e78a:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    e78e:	782b      	ldrb	r3, [r5, #0]
    e790:	f003 030f 	and.w	r3, r3, #15
    e794:	fa22 f103 	lsr.w	r1, r2, r3
    e798:	f011 0f01 	tst.w	r1, #1
    e79c:	d171      	bne.n	e882 <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    e79e:	2101      	movs	r1, #1
    e7a0:	fa01 f303 	lsl.w	r3, r1, r3
    e7a4:	431a      	orrs	r2, r3
    e7a6:	4b61      	ldr	r3, [pc, #388]	; (e92c <le_advertising_report+0x260>)
    e7a8:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    e7ac:	2300      	movs	r3, #0
    e7ae:	e028      	b.n	e802 <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    e7b0:	f8df a17c 	ldr.w	sl, [pc, #380]	; e930 <le_advertising_report+0x264>
    e7b4:	f8da 0000 	ldr.w	r0, [sl]
    e7b8:	4c5c      	ldr	r4, [pc, #368]	; (e92c <le_advertising_report+0x260>)
    e7ba:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    e7be:	2206      	movs	r2, #6
    e7c0:	1ca9      	adds	r1, r5, #2
    e7c2:	3002      	adds	r0, #2
    e7c4:	f7f1 fd7c 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    e7c8:	f8da 3000 	ldr.w	r3, [sl]
    e7cc:	782a      	ldrb	r2, [r5, #0]
    e7ce:	f3c2 1280 	ubfx	r2, r2, #6, #1
    e7d2:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    e7d6:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    e7d8:	782a      	ldrb	r2, [r5, #0]
    e7da:	f002 010f 	and.w	r1, r2, #15
    e7de:	2201      	movs	r2, #1
    e7e0:	408a      	lsls	r2, r1
    e7e2:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e7e6:	4a50      	ldr	r2, [pc, #320]	; (e928 <le_advertising_report+0x25c>)
    e7e8:	6812      	ldr	r2, [r2, #0]
    e7ea:	2a0f      	cmp	r2, #15
    e7ec:	dc41      	bgt.n	e872 <le_advertising_report+0x1a6>
			dup_count++;
    e7ee:	3201      	adds	r2, #1
    e7f0:	4b4d      	ldr	r3, [pc, #308]	; (e928 <le_advertising_report+0x25c>)
    e7f2:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    e7f4:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    e7f8:	4b4d      	ldr	r3, [pc, #308]	; (e930 <le_advertising_report+0x264>)
    e7fa:	681b      	ldr	r3, [r3, #0]
    e7fc:	2b10      	cmp	r3, #16
    e7fe:	d03c      	beq.n	e87a <le_advertising_report+0x1ae>
	return false;
    e800:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    e802:	bb9b      	cbnz	r3, e86c <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    e804:	782b      	ldrb	r3, [r5, #0]
    e806:	f003 030f 	and.w	r3, r3, #15
    e80a:	2b01      	cmp	r3, #1
    e80c:	d03b      	beq.n	e886 <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    e80e:	786c      	ldrb	r4, [r5, #1]
    e810:	3c06      	subs	r4, #6
    e812:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    e814:	786a      	ldrb	r2, [r5, #1]
    e816:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e818:	f816 a002 	ldrb.w	sl, [r6, r2]
    e81c:	f1ca 0a00 	rsb	sl, sl, #0
    e820:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    e824:	2f00      	cmp	r7, #0
    e826:	d041      	beq.n	e8ac <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e828:	2b01      	cmp	r3, #1
    e82a:	d12e      	bne.n	e88a <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    e82c:	2211      	movs	r2, #17
    e82e:	210b      	movs	r1, #11
    e830:	4648      	mov	r0, r9
    e832:	f7fe fe8f 	bl	d554 <meta_evt>
    e836:	4604      	mov	r4, r0
		drp->num_reports = 1;
    e838:	2301      	movs	r3, #1
    e83a:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    e83c:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    e83e:	f00b fce5 	bl	1a20c <ll_rl_size_get>
    e842:	4580      	cmp	r8, r0
    e844:	d227      	bcs.n	e896 <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    e846:	1ce2      	adds	r2, r4, #3
    e848:	1ca1      	adds	r1, r4, #2
    e84a:	4640      	mov	r0, r8
    e84c:	f00b fa86 	bl	19d5c <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    e850:	78a3      	ldrb	r3, [r4, #2]
    e852:	3302      	adds	r3, #2
    e854:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    e856:	2301      	movs	r3, #1
    e858:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    e85a:	2206      	movs	r2, #6
    e85c:	f105 0108 	add.w	r1, r5, #8
    e860:	f104 000a 	add.w	r0, r4, #10
    e864:	f7f1 fd2c 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    e868:	f884 a010 	strb.w	sl, [r4, #16]
}
    e86c:	b002      	add	sp, #8
    e86e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    e872:	3301      	adds	r3, #1
    e874:	4a2e      	ldr	r2, [pc, #184]	; (e930 <le_advertising_report+0x264>)
    e876:	6013      	str	r3, [r2, #0]
    e878:	e7be      	b.n	e7f8 <le_advertising_report+0x12c>
			dup_curr = 0;
    e87a:	2300      	movs	r3, #0
    e87c:	4a2c      	ldr	r2, [pc, #176]	; (e930 <le_advertising_report+0x264>)
    e87e:	6013      	str	r3, [r2, #0]
    e880:	e7bf      	b.n	e802 <le_advertising_report+0x136>
					return true;
    e882:	2301      	movs	r3, #1
    e884:	e7bd      	b.n	e802 <le_advertising_report+0x136>
		data_len = 0;
    e886:	2400      	movs	r4, #0
    e888:	e7c4      	b.n	e814 <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    e88a:	4040      	eors	r0, r0
    e88c:	f380 8811 	msr	BASEPRI, r0
    e890:	f04f 0004 	mov.w	r0, #4
    e894:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    e896:	4629      	mov	r1, r5
    e898:	f811 3b02 	ldrb.w	r3, [r1], #2
    e89c:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e8a0:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    e8a2:	2206      	movs	r2, #6
    e8a4:	1ce0      	adds	r0, r4, #3
    e8a6:	f7f1 fd0b 	bl	2c0 <memcpy>
    e8aa:	e7d4      	b.n	e856 <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    e8ac:	f104 020b 	add.w	r2, r4, #11
    e8b0:	b2d2      	uxtb	r2, r2
    e8b2:	2102      	movs	r1, #2
    e8b4:	4648      	mov	r0, r9
    e8b6:	f7fe fe4d 	bl	d554 <meta_evt>
    e8ba:	4607      	mov	r7, r0
	sep->num_reports = 1;
    e8bc:	2301      	movs	r3, #1
    e8be:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    e8c0:	782b      	ldrb	r3, [r5, #0]
    e8c2:	f003 030f 	and.w	r3, r3, #15
    e8c6:	aa02      	add	r2, sp, #8
    e8c8:	4413      	add	r3, r2
    e8ca:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    e8ce:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    e8d0:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    e8d2:	330b      	adds	r3, #11
    e8d4:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    e8d6:	f00b fc99 	bl	1a20c <ll_rl_size_get>
    e8da:	4286      	cmp	r6, r0
    e8dc:	d212      	bcs.n	e904 <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    e8de:	1cfa      	adds	r2, r7, #3
    e8e0:	1cb9      	adds	r1, r7, #2
    e8e2:	4630      	mov	r0, r6
    e8e4:	f00b fa3a 	bl	19d5c <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    e8e8:	78bb      	ldrb	r3, [r7, #2]
    e8ea:	3302      	adds	r3, #2
    e8ec:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    e8ee:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    e8f0:	370a      	adds	r7, #10
    e8f2:	4622      	mov	r2, r4
    e8f4:	f105 0108 	add.w	r1, r5, #8
    e8f8:	4638      	mov	r0, r7
    e8fa:	f7f1 fce1 	bl	2c0 <memcpy>
	*prssi = rssi;
    e8fe:	f807 a004 	strb.w	sl, [r7, r4]
    e902:	e7b3      	b.n	e86c <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    e904:	4629      	mov	r1, r5
    e906:	f811 3b02 	ldrb.w	r3, [r1], #2
    e90a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e90e:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    e910:	2206      	movs	r2, #6
    e912:	1cf8      	adds	r0, r7, #3
    e914:	f7f1 fcd4 	bl	2c0 <memcpy>
    e918:	e7e9      	b.n	e8ee <le_advertising_report+0x222>
    e91a:	bf00      	nop
    e91c:	0002e790 	.word	0x0002e790
    e920:	2000bc70 	.word	0x2000bc70
    e924:	2000bc78 	.word	0x2000bc78
    e928:	20000b48 	.word	0x20000b48
    e92c:	20000b50 	.word	0x20000b50
    e930:	20000b4c 	.word	0x20000b4c

0000e934 <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    e934:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    e936:	7803      	ldrb	r3, [r0, #0]
    e938:	f003 030f 	and.w	r3, r3, #15
    e93c:	2b07      	cmp	r3, #7
    e93e:	d000      	beq.n	e942 <le_adv_ext_report+0xe>
    e940:	4770      	bx	lr
    e942:	2a00      	cmp	r2, #0
    e944:	d0fc      	beq.n	e940 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    e946:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    e948:	7883      	ldrb	r3, [r0, #2]
    e94a:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    e94e:	d0f7      	beq.n	e940 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    e950:	78c3      	ldrb	r3, [r0, #3]
    e952:	f013 0f01 	tst.w	r3, #1
    e956:	d0f3      	beq.n	e940 <le_adv_ext_report+0xc>
{
    e958:	b570      	push	{r4, r5, r6, lr}
    e95a:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    e95c:	7803      	ldrb	r3, [r0, #0]
    e95e:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e962:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    e966:	2206      	movs	r2, #6
    e968:	f10d 0019 	add.w	r0, sp, #25
    e96c:	f7f1 fca8 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    e970:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e974:	2b03      	cmp	r3, #3
    e976:	d830      	bhi.n	e9da <le_adv_ext_report+0xa6>
    e978:	e8df f003 	tbb	[pc, r3]
    e97c:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    e980:	4919      	ldr	r1, [pc, #100]	; (e9e8 <le_adv_ext_report+0xb4>)
    e982:	a808      	add	r0, sp, #32
    e984:	f01c f960 	bl	2ac48 <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e988:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e98c:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e990:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e994:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e998:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e99c:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e9a0:	ae08      	add	r6, sp, #32
    e9a2:	9605      	str	r6, [sp, #20]
    e9a4:	9504      	str	r5, [sp, #16]
    e9a6:	9403      	str	r4, [sp, #12]
    e9a8:	9002      	str	r0, [sp, #8]
    e9aa:	9101      	str	r1, [sp, #4]
    e9ac:	9200      	str	r2, [sp, #0]
    e9ae:	4a0f      	ldr	r2, [pc, #60]	; (e9ec <le_adv_ext_report+0xb8>)
    e9b0:	211b      	movs	r1, #27
    e9b2:	a80b      	add	r0, sp, #44	; 0x2c
    e9b4:	f7f4 fb38 	bl	3028 <snprintk>
}
    e9b8:	b012      	add	sp, #72	; 0x48
    e9ba:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e9bc:	490c      	ldr	r1, [pc, #48]	; (e9f0 <le_adv_ext_report+0xbc>)
    e9be:	a808      	add	r0, sp, #32
    e9c0:	f01c f942 	bl	2ac48 <strcpy>
    e9c4:	e7e0      	b.n	e988 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    e9c6:	490b      	ldr	r1, [pc, #44]	; (e9f4 <le_adv_ext_report+0xc0>)
    e9c8:	a808      	add	r0, sp, #32
    e9ca:	f01c f93d 	bl	2ac48 <strcpy>
    e9ce:	e7db      	b.n	e988 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    e9d0:	4909      	ldr	r1, [pc, #36]	; (e9f8 <le_adv_ext_report+0xc4>)
    e9d2:	a808      	add	r0, sp, #32
    e9d4:	f01c f938 	bl	2ac48 <strcpy>
    e9d8:	e7d6      	b.n	e988 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e9da:	4a08      	ldr	r2, [pc, #32]	; (e9fc <le_adv_ext_report+0xc8>)
    e9dc:	210a      	movs	r1, #10
    e9de:	a808      	add	r0, sp, #32
    e9e0:	f7f4 fb22 	bl	3028 <snprintk>
    e9e4:	e7d0      	b.n	e988 <le_adv_ext_report+0x54>
    e9e6:	bf00      	nop
    e9e8:	00031914 	.word	0x00031914
    e9ec:	00031944 	.word	0x00031944
    e9f0:	0003191c 	.word	0x0003191c
    e9f4:	00031924 	.word	0x00031924
    e9f8:	00031930 	.word	0x00031930
    e9fc:	0003193c 	.word	0x0003193c

0000ea00 <le_adv_ext_1M_report>:
{
    ea00:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    ea02:	2301      	movs	r3, #1
    ea04:	f7ff ff96 	bl	e934 <le_adv_ext_report>
    ea08:	bd08      	pop	{r3, pc}

0000ea0a <le_adv_ext_coded_report>:
{
    ea0a:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    ea0c:	2304      	movs	r3, #4
    ea0e:	f7ff ff91 	bl	e934 <le_adv_ext_report>
    ea12:	bd08      	pop	{r3, pc}

0000ea14 <le_scan_req_received>:
{
    ea14:	b570      	push	{r4, r5, r6, lr}
    ea16:	b092      	sub	sp, #72	; 0x48
    ea18:	4604      	mov	r4, r0
    ea1a:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ea1c:	4b33      	ldr	r3, [pc, #204]	; (eaec <le_scan_req_received+0xd8>)
    ea1e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea22:	2200      	movs	r2, #0
    ea24:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    ea28:	4313      	orrs	r3, r2
    ea2a:	d007      	beq.n	ea3c <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    ea2c:	4b30      	ldr	r3, [pc, #192]	; (eaf0 <le_scan_req_received+0xdc>)
    ea2e:	e9d3 2300 	ldrd	r2, r3, [r3]
    ea32:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    ea36:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    ea38:	4313      	orrs	r3, r2
    ea3a:	d146      	bne.n	eaca <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    ea3c:	4621      	mov	r1, r4
    ea3e:	f811 3b02 	ldrb.w	r3, [r1], #2
    ea42:	f3c3 1380 	ubfx	r3, r3, #6, #1
    ea46:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    ea4a:	2206      	movs	r2, #6
    ea4c:	f10d 0019 	add.w	r0, sp, #25
    ea50:	f7f1 fc36 	bl	2c0 <memcpy>
	switch (addr->type) {
    ea54:	f89d 3018 	ldrb.w	r3, [sp, #24]
    ea58:	2b03      	cmp	r3, #3
    ea5a:	d830      	bhi.n	eabe <le_scan_req_received+0xaa>
    ea5c:	e8df f003 	tbb	[pc, r3]
    ea60:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    ea64:	4923      	ldr	r1, [pc, #140]	; (eaf4 <le_scan_req_received+0xe0>)
    ea66:	a808      	add	r0, sp, #32
    ea68:	f01c f8ee 	bl	2ac48 <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    ea6c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    ea70:	f89d 201d 	ldrb.w	r2, [sp, #29]
    ea74:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    ea78:	f89d 001b 	ldrb.w	r0, [sp, #27]
    ea7c:	f89d 401a 	ldrb.w	r4, [sp, #26]
    ea80:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    ea84:	ae08      	add	r6, sp, #32
    ea86:	9605      	str	r6, [sp, #20]
    ea88:	9504      	str	r5, [sp, #16]
    ea8a:	9403      	str	r4, [sp, #12]
    ea8c:	9002      	str	r0, [sp, #8]
    ea8e:	9101      	str	r1, [sp, #4]
    ea90:	9200      	str	r2, [sp, #0]
    ea92:	4a19      	ldr	r2, [pc, #100]	; (eaf8 <le_scan_req_received+0xe4>)
    ea94:	211b      	movs	r1, #27
    ea96:	a80b      	add	r0, sp, #44	; 0x2c
    ea98:	f7f4 fac6 	bl	3028 <snprintk>
}
    ea9c:	b012      	add	sp, #72	; 0x48
    ea9e:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    eaa0:	4916      	ldr	r1, [pc, #88]	; (eafc <le_scan_req_received+0xe8>)
    eaa2:	a808      	add	r0, sp, #32
    eaa4:	f01c f8d0 	bl	2ac48 <strcpy>
    eaa8:	e7e0      	b.n	ea6c <le_scan_req_received+0x58>
		strcpy(type, "public id");
    eaaa:	4915      	ldr	r1, [pc, #84]	; (eb00 <le_scan_req_received+0xec>)
    eaac:	a808      	add	r0, sp, #32
    eaae:	f01c f8cb 	bl	2ac48 <strcpy>
    eab2:	e7db      	b.n	ea6c <le_scan_req_received+0x58>
		strcpy(type, "random id");
    eab4:	4913      	ldr	r1, [pc, #76]	; (eb04 <le_scan_req_received+0xf0>)
    eab6:	a808      	add	r0, sp, #32
    eab8:	f01c f8c6 	bl	2ac48 <strcpy>
    eabc:	e7d6      	b.n	ea6c <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    eabe:	4a12      	ldr	r2, [pc, #72]	; (eb08 <le_scan_req_received+0xf4>)
    eac0:	210a      	movs	r1, #10
    eac2:	a808      	add	r0, sp, #32
    eac4:	f7f4 fab0 	bl	3028 <snprintk>
    eac8:	e7d0      	b.n	ea6c <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    eaca:	2208      	movs	r2, #8
    eacc:	2113      	movs	r1, #19
    eace:	f7fe fd41 	bl	d554 <meta_evt>
	sep->handle = 0;
    ead2:	2300      	movs	r3, #0
    ead4:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    ead6:	4621      	mov	r1, r4
    ead8:	f811 3b02 	ldrb.w	r3, [r1], #2
    eadc:	f3c3 1380 	ubfx	r3, r3, #6, #1
    eae0:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    eae2:	2206      	movs	r2, #6
    eae4:	3002      	adds	r0, #2
    eae6:	f7f1 fbeb 	bl	2c0 <memcpy>
    eaea:	e7d7      	b.n	ea9c <le_scan_req_received+0x88>
    eaec:	2000bc70 	.word	0x2000bc70
    eaf0:	2000bc78 	.word	0x2000bc78
    eaf4:	00031914 	.word	0x00031914
    eaf8:	00031944 	.word	0x00031944
    eafc:	0003191c 	.word	0x0003191c
    eb00:	00031924 	.word	0x00031924
    eb04:	00031930 	.word	0x00031930
    eb08:	0003193c 	.word	0x0003193c

0000eb0c <encode_control>:
{
    eb0c:	b510      	push	{r4, lr}
    eb0e:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    eb10:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    eb12:	7903      	ldrb	r3, [r0, #4]
    eb14:	3b02      	subs	r3, #2
    eb16:	2b0a      	cmp	r3, #10
    eb18:	d837      	bhi.n	eb8a <encode_control+0x7e>
    eb1a:	e8df f003 	tbb	[pc, r3]
    eb1e:	0b06      	.short	0x0b06
    eb20:	1e1a1510 	.word	0x1e1a1510
    eb24:	2e2a2622 	.word	0x2e2a2622
    eb28:	32          	.byte	0x32
    eb29:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    eb2a:	4601      	mov	r1, r0
    eb2c:	4620      	mov	r0, r4
    eb2e:	f7ff fdcd 	bl	e6cc <le_advertising_report>
		break;
    eb32:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    eb34:	4601      	mov	r1, r0
    eb36:	4620      	mov	r0, r4
    eb38:	f7ff ff62 	bl	ea00 <le_adv_ext_1M_report>
		break;
    eb3c:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    eb3e:	4601      	mov	r1, r0
    eb40:	4620      	mov	r0, r4
    eb42:	f7ff ff62 	bl	ea0a <le_adv_ext_coded_report>
		break;
    eb46:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    eb48:	4601      	mov	r1, r0
    eb4a:	4620      	mov	r0, r4
    eb4c:	f7ff ff62 	bl	ea14 <le_scan_req_received>
		break;
    eb50:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    eb52:	4620      	mov	r0, r4
    eb54:	f7f7 f99e 	bl	5e94 <le_conn_complete>
		break;
    eb58:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    eb5a:	4620      	mov	r0, r4
    eb5c:	f7fe fd32 	bl	d5c4 <disconn_complete>
		break;
    eb60:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    eb62:	4620      	mov	r0, r4
    eb64:	f7f6 f832 	bl	4bcc <le_conn_update_complete>
		break;
    eb68:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    eb6a:	4620      	mov	r0, r4
    eb6c:	f7fe fd52 	bl	d614 <enc_refresh_complete>
		break;
    eb70:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    eb72:	4620      	mov	r0, r4
    eb74:	f7fe fd6c 	bl	d650 <auth_payload_timeout_exp>
		break;
    eb78:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    eb7a:	4620      	mov	r0, r4
    eb7c:	f7fe fcfe 	bl	d57c <le_chan_sel_algo>
		break;
    eb80:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    eb82:	4620      	mov	r0, r4
    eb84:	f7ff faa6 	bl	e0d4 <le_phy_upd_complete>
		return;
    eb88:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    eb8a:	4040      	eors	r0, r0
    eb8c:	f380 8811 	msr	BASEPRI, r0
    eb90:	f04f 0004 	mov.w	r0, #4
    eb94:	df02      	svc	2
	...

0000eb98 <hci_cmd_handle>:
{
    eb98:	b510      	push	{r4, lr}
    eb9a:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    eb9c:	2300      	movs	r3, #0
    eb9e:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    eba0:	8983      	ldrh	r3, [r0, #12]
    eba2:	2b02      	cmp	r3, #2
    eba4:	d94a      	bls.n	ec3c <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    eba6:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    eba8:	8814      	ldrh	r4, [r2, #0]
    ebaa:	4926      	ldr	r1, [pc, #152]	; (ec44 <hci_cmd_handle+0xac>)
    ebac:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    ebae:	7892      	ldrb	r2, [r2, #2]
    ebb0:	4293      	cmp	r3, r2
    ebb2:	d345      	bcc.n	ec40 <hci_cmd_handle+0xa8>
    ebb4:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    ebb6:	2103      	movs	r1, #3
    ebb8:	3008      	adds	r0, #8
    ebba:	f00c f974 	bl	1aea6 <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    ebbe:	4b21      	ldr	r3, [pc, #132]	; (ec44 <hci_cmd_handle+0xac>)
    ebc0:	881b      	ldrh	r3, [r3, #0]
    ebc2:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    ebc6:	0a9b      	lsrs	r3, r3, #10
    ebc8:	2b04      	cmp	r3, #4
    ebca:	d01c      	beq.n	ec06 <hci_cmd_handle+0x6e>
    ebcc:	d908      	bls.n	ebe0 <hci_cmd_handle+0x48>
    ebce:	2b08      	cmp	r3, #8
    ebd0:	d023      	beq.n	ec1a <hci_cmd_handle+0x82>
    ebd2:	2b3f      	cmp	r3, #63	; 0x3f
    ebd4:	d026      	beq.n	ec24 <hci_cmd_handle+0x8c>
    ebd6:	2b05      	cmp	r3, #5
    ebd8:	d01a      	beq.n	ec10 <hci_cmd_handle+0x78>
		err = -EINVAL;
    ebda:	f06f 0015 	mvn.w	r0, #21
    ebde:	e00c      	b.n	ebfa <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    ebe0:	2b01      	cmp	r3, #1
    ebe2:	d006      	beq.n	ebf2 <hci_cmd_handle+0x5a>
    ebe4:	2b03      	cmp	r3, #3
    ebe6:	d1f8      	bne.n	ebda <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    ebe8:	aa01      	add	r2, sp, #4
    ebea:	4621      	mov	r1, r4
    ebec:	f7fe fe29 	bl	d842 <ctrl_bb_cmd_handle>
		break;
    ebf0:	e003      	b.n	ebfa <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    ebf2:	aa01      	add	r2, sp, #4
    ebf4:	4621      	mov	r1, r4
    ebf6:	f7fe fd9b 	bl	d730 <link_control_cmd_handle>
	if (err == -EINVAL) {
    ebfa:	f110 0f16 	cmn.w	r0, #22
    ebfe:	d016      	beq.n	ec2e <hci_cmd_handle+0x96>
	return evt;
    ec00:	9801      	ldr	r0, [sp, #4]
}
    ec02:	b002      	add	sp, #8
    ec04:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    ec06:	aa01      	add	r2, sp, #4
    ec08:	4621      	mov	r1, r4
    ec0a:	f7fe ffde 	bl	dbca <info_cmd_handle>
		break;
    ec0e:	e7f4      	b.n	ebfa <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    ec10:	aa01      	add	r2, sp, #4
    ec12:	4621      	mov	r1, r4
    ec14:	f7fe fbcf 	bl	d3b6 <status_cmd_handle>
		break;
    ec18:	e7ef      	b.n	ebfa <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    ec1a:	aa01      	add	r2, sp, #4
    ec1c:	4621      	mov	r1, r4
    ec1e:	f7ff fb8c 	bl	e33a <controller_cmd_handle>
		break;
    ec22:	e7ea      	b.n	ebfa <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    ec24:	aa01      	add	r2, sp, #4
    ec26:	4621      	mov	r1, r4
    ec28:	f7ff f876 	bl	dd18 <vendor_cmd_handle>
		break;
    ec2c:	e7e5      	b.n	ebfa <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    ec2e:	2101      	movs	r1, #1
    ec30:	a801      	add	r0, sp, #4
    ec32:	f7fe fbf5 	bl	d420 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    ec36:	2301      	movs	r3, #1
    ec38:	7003      	strb	r3, [r0, #0]
    ec3a:	e7e1      	b.n	ec00 <hci_cmd_handle+0x68>
		return NULL;
    ec3c:	2000      	movs	r0, #0
    ec3e:	e7e0      	b.n	ec02 <hci_cmd_handle+0x6a>
		return NULL;
    ec40:	2000      	movs	r0, #0
    ec42:	e7de      	b.n	ec02 <hci_cmd_handle+0x6a>
    ec44:	20000b40 	.word	0x20000b40

0000ec48 <hci_acl_handle>:
{
    ec48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    ec4c:	2300      	movs	r3, #0
    ec4e:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    ec50:	8983      	ldrh	r3, [r0, #12]
    ec52:	2b03      	cmp	r3, #3
    ec54:	d93e      	bls.n	ecd4 <hci_acl_handle+0x8c>
    ec56:	4689      	mov	r9, r1
    ec58:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    ec5a:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    ec5e:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    ec62:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    ec64:	2104      	movs	r1, #4
    ec66:	f00c f91e 	bl	1aea6 <net_buf_simple_pull>
	if (buf->len < len) {
    ec6a:	89a3      	ldrh	r3, [r4, #12]
    ec6c:	4598      	cmp	r8, r3
    ec6e:	d835      	bhi.n	ecdc <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    ec70:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    ec72:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    ec76:	f009 ff1f 	bl	18ab8 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    ec7a:	4605      	mov	r5, r0
    ec7c:	b140      	cbz	r0, ec90 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    ec7e:	b177      	cbz	r7, ec9e <hci_acl_handle+0x56>
    ec80:	2f02      	cmp	r7, #2
    ec82:	d00c      	beq.n	ec9e <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    ec84:	7903      	ldrb	r3, [r0, #4]
    ec86:	2201      	movs	r2, #1
    ec88:	f362 0301 	bfi	r3, r2, #0, #2
    ec8c:	7103      	strb	r3, [r0, #4]
    ec8e:	e00b      	b.n	eca8 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    ec90:	4648      	mov	r0, r9
    ec92:	f7ff fcbf 	bl	e614 <data_buf_overflow>
		return -ENOBUFS;
    ec96:	f06f 0068 	mvn.w	r0, #104	; 0x68
    ec9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    ec9e:	792b      	ldrb	r3, [r5, #4]
    eca0:	2202      	movs	r2, #2
    eca2:	f362 0301 	bfi	r3, r2, #0, #2
    eca6:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    eca8:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    ecac:	4642      	mov	r2, r8
    ecae:	68a1      	ldr	r1, [r4, #8]
    ecb0:	1de8      	adds	r0, r5, #7
    ecb2:	f7f1 fb05 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    ecb6:	4629      	mov	r1, r5
    ecb8:	4630      	mov	r0, r6
    ecba:	f009 ff0d 	bl	18ad8 <radio_tx_mem_enqueue>
    ecbe:	b910      	cbnz	r0, ecc6 <hci_acl_handle+0x7e>
	return 0;
    ecc0:	2000      	movs	r0, #0
}
    ecc2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    ecc6:	4628      	mov	r0, r5
    ecc8:	f009 fefe 	bl	18ac8 <radio_tx_mem_release>
		return -EINVAL;
    eccc:	f06f 0015 	mvn.w	r0, #21
    ecd0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ecd4:	f06f 0015 	mvn.w	r0, #21
    ecd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    ecdc:	f06f 0015 	mvn.w	r0, #21
    ece0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000ece4 <hci_acl_encode>:
{
    ece4:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    ece6:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    ece8:	7a03      	ldrb	r3, [r0, #8]
    ecea:	f003 0303 	and.w	r3, r3, #3
    ecee:	3b01      	subs	r3, #1
    ecf0:	2b01      	cmp	r3, #1
    ecf2:	d81d      	bhi.n	ed30 <hci_acl_encode+0x4c>
    ecf4:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    ecf6:	f101 0508 	add.w	r5, r1, #8
    ecfa:	2104      	movs	r1, #4
    ecfc:	4628      	mov	r0, r5
    ecfe:	f00c f885 	bl	1ae0c <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    ed02:	7a23      	ldrb	r3, [r4, #8]
    ed04:	f003 0303 	and.w	r3, r3, #3
    ed08:	2b02      	cmp	r3, #2
    ed0a:	d00e      	beq.n	ed2a <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    ed0c:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    ed10:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    ed12:	7a63      	ldrb	r3, [r4, #9]
    ed14:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    ed16:	7a61      	ldrb	r1, [r4, #9]
    ed18:	4628      	mov	r0, r5
    ed1a:	f00c f877 	bl	1ae0c <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    ed1e:	7a62      	ldrb	r2, [r4, #9]
    ed20:	f104 010b 	add.w	r1, r4, #11
    ed24:	f7f1 facc 	bl	2c0 <memcpy>
}
    ed28:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    ed2a:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    ed2e:	e7ef      	b.n	ed10 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    ed30:	4040      	eors	r0, r0
    ed32:	f380 8811 	msr	BASEPRI, r0
    ed36:	f04f 0004 	mov.w	r0, #4
    ed3a:	df02      	svc	2

0000ed3c <hci_evt_encode>:
{
    ed3c:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    ed3e:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ed42:	7903      	ldrb	r3, [r0, #4]
    ed44:	2b01      	cmp	r3, #1
    ed46:	d004      	beq.n	ed52 <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    ed48:	460a      	mov	r2, r1
    ed4a:	4621      	mov	r1, r4
    ed4c:	f7ff fede 	bl	eb0c <encode_control>
    ed50:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    ed52:	460a      	mov	r2, r1
    ed54:	4621      	mov	r1, r4
    ed56:	f7ff fc7d 	bl	e654 <encode_data_ctrl>
    ed5a:	bd10      	pop	{r4, pc}

0000ed5c <hci_num_cmplt_encode>:
{
    ed5c:	b570      	push	{r4, r5, r6, lr}
    ed5e:	4606      	mov	r6, r0
    ed60:	460d      	mov	r5, r1
    ed62:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    ed64:	2205      	movs	r2, #5
    ed66:	2113      	movs	r1, #19
    ed68:	f7fe fb28 	bl	d3bc <evt_create>
	ep = net_buf_add(buf, len);
    ed6c:	2105      	movs	r1, #5
    ed6e:	f106 0008 	add.w	r0, r6, #8
    ed72:	f00c f84b 	bl	1ae0c <net_buf_simple_add>
	ep->num_handles = num_handles;
    ed76:	2301      	movs	r3, #1
    ed78:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    ed7a:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    ed7e:	f8a0 4003 	strh.w	r4, [r0, #3]
    ed82:	bd70      	pop	{r4, r5, r6, pc}

0000ed84 <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    ed84:	7903      	ldrb	r3, [r0, #4]
    ed86:	2b01      	cmp	r3, #1
    ed88:	d011      	beq.n	edae <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    ed8a:	3b02      	subs	r3, #2
    ed8c:	2b0a      	cmp	r3, #10
    ed8e:	d80b      	bhi.n	eda8 <hci_get_class+0x24>
    ed90:	e8df f003 	tbb	[pc, r3]
    ed94:	06060606 	.word	0x06060606
    ed98:	08080816 	.word	0x08080816
    ed9c:	0808      	.short	0x0808
    ed9e:	08          	.byte	0x08
    ed9f:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    eda0:	2001      	movs	r0, #1
    eda2:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    eda4:	2002      	movs	r0, #2
    eda6:	4770      	bx	lr
			return -1;
    eda8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    edac:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    edae:	7a03      	ldrb	r3, [r0, #8]
    edb0:	f003 0303 	and.w	r3, r3, #3
    edb4:	2b03      	cmp	r3, #3
    edb6:	d001      	beq.n	edbc <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    edb8:	2003      	movs	r0, #3
}
    edba:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    edbc:	2002      	movs	r0, #2
    edbe:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    edc0:	2000      	movs	r0, #0
    edc2:	4770      	bx	lr

0000edc4 <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    edc4:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    edc6:	4802      	ldr	r0, [pc, #8]	; (edd0 <_hci_driver_init+0xc>)
    edc8:	f7f7 fcec 	bl	67a4 <bt_hci_driver_register>

	return 0;
}
    edcc:	2000      	movs	r0, #0
    edce:	bd08      	pop	{r3, pc}
    edd0:	00031990 	.word	0x00031990

0000edd4 <acl_handle>:
{
    edd4:	b510      	push	{r4, lr}
    edd6:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    edd8:	a901      	add	r1, sp, #4
    edda:	f7ff ff35 	bl	ec48 <hci_acl_handle>
    edde:	4604      	mov	r4, r0
	if (evt) {
    ede0:	9801      	ldr	r0, [sp, #4]
    ede2:	b108      	cbz	r0, ede8 <acl_handle+0x14>
		bt_recv_prio(evt);
    ede4:	f7f7 fc8c 	bl	6700 <bt_recv_prio>
}
    ede8:	4620      	mov	r0, r4
    edea:	b002      	add	sp, #8
    edec:	bd10      	pop	{r4, pc}

0000edee <cmd_handle>:
{
    edee:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    edf0:	f7ff fed2 	bl	eb98 <hci_cmd_handle>
	if (evt) {
    edf4:	b108      	cbz	r0, edfa <cmd_handle+0xc>
		bt_recv_prio(evt);
    edf6:	f7f7 fc83 	bl	6700 <bt_recv_prio>
}
    edfa:	2000      	movs	r0, #0
    edfc:	bd08      	pop	{r3, pc}

0000edfe <hci_driver_send>:
{
    edfe:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    ee00:	8983      	ldrh	r3, [r0, #12]
    ee02:	b1cb      	cbz	r3, ee38 <hci_driver_send+0x3a>
    ee04:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    ee06:	f100 0310 	add.w	r3, r0, #16
    ee0a:	89c2      	ldrh	r2, [r0, #14]
    ee0c:	4413      	add	r3, r2
    ee0e:	3303      	adds	r3, #3
    ee10:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    ee14:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    ee16:	b13b      	cbz	r3, ee28 <hci_driver_send+0x2a>
    ee18:	2b02      	cmp	r3, #2
    ee1a:	d110      	bne.n	ee3e <hci_driver_send+0x40>
		err = acl_handle(buf);
    ee1c:	f7ff ffda 	bl	edd4 <acl_handle>
    ee20:	4605      	mov	r5, r0
	if (!err) {
    ee22:	b12d      	cbz	r5, ee30 <hci_driver_send+0x32>
}
    ee24:	4628      	mov	r0, r5
    ee26:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    ee28:	f7ff ffe1 	bl	edee <cmd_handle>
    ee2c:	4605      	mov	r5, r0
		break;
    ee2e:	e7f8      	b.n	ee22 <hci_driver_send+0x24>
		net_buf_unref(buf);
    ee30:	4620      	mov	r0, r4
    ee32:	f00b ff9f 	bl	1ad74 <net_buf_unref>
    ee36:	e7f5      	b.n	ee24 <hci_driver_send+0x26>
		return -EINVAL;
    ee38:	f06f 0515 	mvn.w	r5, #21
    ee3c:	e7f2      	b.n	ee24 <hci_driver_send+0x26>
		return -EINVAL;
    ee3e:	f06f 0515 	mvn.w	r5, #21
    ee42:	e7ef      	b.n	ee24 <hci_driver_send+0x26>

0000ee44 <prio_recv_thread>:
{
    ee44:	b530      	push	{r4, r5, lr}
    ee46:	b087      	sub	sp, #28
    ee48:	e00f      	b.n	ee6a <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ee4a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ee4e:	2001      	movs	r0, #1
    ee50:	f7f7 fe0c 	bl	6a6c <bt_buf_get_rx>
    ee54:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    ee56:	4622      	mov	r2, r4
    ee58:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    ee5c:	f7ff ff7e 	bl	ed5c <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    ee60:	4628      	mov	r0, r5
    ee62:	f7f7 fc4d 	bl	6700 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    ee66:	f01a f977 	bl	29158 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    ee6a:	f10d 0112 	add.w	r1, sp, #18
    ee6e:	a805      	add	r0, sp, #20
    ee70:	f009 fd22 	bl	188b8 <radio_rx_get>
    ee74:	4604      	mov	r4, r0
    ee76:	2800      	cmp	r0, #0
    ee78:	d1e7      	bne.n	ee4a <prio_recv_thread+0x6>
		if (node_rx) {
    ee7a:	9b05      	ldr	r3, [sp, #20]
    ee7c:	b133      	cbz	r3, ee8c <prio_recv_thread+0x48>
			radio_rx_dequeue();
    ee7e:	f00a fa5b 	bl	19338 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    ee82:	9905      	ldr	r1, [sp, #20]
    ee84:	481a      	ldr	r0, [pc, #104]	; (eef0 <prio_recv_thread+0xac>)
    ee86:	f019 ff29 	bl	28cdc <k_queue_append>
    ee8a:	e7ee      	b.n	ee6a <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    ee8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ee90:	4818      	ldr	r0, [pc, #96]	; (eef4 <prio_recv_thread+0xb0>)
    ee92:	f01a facd 	bl	29430 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    ee96:	f01a fb17 	bl	294c8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    ee9a:	4b17      	ldr	r3, [pc, #92]	; (eef8 <prio_recv_thread+0xb4>)
    ee9c:	681b      	ldr	r3, [r3, #0]
    ee9e:	1ac3      	subs	r3, r0, r3
    eea0:	f241 3288 	movw	r2, #5000	; 0x1388
    eea4:	4293      	cmp	r3, r2
    eea6:	d9e0      	bls.n	ee6a <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    eea8:	2200      	movs	r2, #0
	size_t unused = 0;
    eeaa:	4613      	mov	r3, r2
    eeac:	e001      	b.n	eeb2 <prio_recv_thread+0x6e>
			unused++;
    eeae:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    eeb0:	3201      	adds	r2, #1
    eeb2:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    eeb6:	d203      	bcs.n	eec0 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    eeb8:	4910      	ldr	r1, [pc, #64]	; (eefc <prio_recv_thread+0xb8>)
    eeba:	5c89      	ldrb	r1, [r1, r2]
    eebc:	29aa      	cmp	r1, #170	; 0xaa
    eebe:	d0f6      	beq.n	eeae <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    eec0:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    eec4:	2264      	movs	r2, #100	; 0x64
    eec6:	fb02 f201 	mul.w	r2, r2, r1
    eeca:	0992      	lsrs	r2, r2, #6
    eecc:	480c      	ldr	r0, [pc, #48]	; (ef00 <prio_recv_thread+0xbc>)
    eece:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    eed2:	9202      	str	r2, [sp, #8]
    eed4:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    eed8:	9201      	str	r2, [sp, #4]
    eeda:	9100      	str	r1, [sp, #0]
    eedc:	4909      	ldr	r1, [pc, #36]	; (ef04 <prio_recv_thread+0xc0>)
    eede:	480a      	ldr	r0, [pc, #40]	; (ef08 <prio_recv_thread+0xc4>)
    eee0:	f7f4 f894 	bl	300c <printk>
    eee4:	f01a faf0 	bl	294c8 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    eee8:	4b03      	ldr	r3, [pc, #12]	; (eef8 <prio_recv_thread+0xb4>)
    eeea:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    eeec:	e7bd      	b.n	ee6a <prio_recv_thread+0x26>
    eeee:	bf00      	nop
    eef0:	2000d1f0 	.word	0x2000d1f0
    eef4:	2000d180 	.word	0x2000d180
    eef8:	20000bd8 	.word	0x20000bd8
    eefc:	200042a0 	.word	0x200042a0
    ef00:	2492492d 	.word	0x2492492d
    ef04:	000319a0 	.word	0x000319a0
    ef08:	00031708 	.word	0x00031708

0000ef0c <hci_driver_open>:
{
    ef0c:	b530      	push	{r4, r5, lr}
    ef0e:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    ef10:	4814      	ldr	r0, [pc, #80]	; (ef64 <hci_driver_open+0x58>)
    ef12:	f00a fb39 	bl	19588 <ll_init>
	if (err) {
    ef16:	4605      	mov	r5, r0
    ef18:	b110      	cbz	r0, ef20 <hci_driver_open+0x14>
}
    ef1a:	4628      	mov	r0, r5
    ef1c:	b007      	add	sp, #28
    ef1e:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    ef20:	f7f6 fc66 	bl	57f0 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    ef24:	2400      	movs	r4, #0
    ef26:	9405      	str	r4, [sp, #20]
    ef28:	9404      	str	r4, [sp, #16]
    ef2a:	f06f 0309 	mvn.w	r3, #9
    ef2e:	9303      	str	r3, [sp, #12]
    ef30:	9402      	str	r4, [sp, #8]
    ef32:	9401      	str	r4, [sp, #4]
    ef34:	9400      	str	r4, [sp, #0]
    ef36:	4b0c      	ldr	r3, [pc, #48]	; (ef68 <hci_driver_open+0x5c>)
    ef38:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    ef3c:	490b      	ldr	r1, [pc, #44]	; (ef6c <hci_driver_open+0x60>)
    ef3e:	480c      	ldr	r0, [pc, #48]	; (ef70 <hci_driver_open+0x64>)
    ef40:	f01a fce2 	bl	29908 <_impl_k_thread_create>
    ef44:	9405      	str	r4, [sp, #20]
    ef46:	9404      	str	r4, [sp, #16]
    ef48:	f06f 0307 	mvn.w	r3, #7
    ef4c:	9303      	str	r3, [sp, #12]
    ef4e:	9402      	str	r4, [sp, #8]
    ef50:	9401      	str	r4, [sp, #4]
    ef52:	9400      	str	r4, [sp, #0]
    ef54:	4b07      	ldr	r3, [pc, #28]	; (ef74 <hci_driver_open+0x68>)
    ef56:	f44f 6280 	mov.w	r2, #1024	; 0x400
    ef5a:	4907      	ldr	r1, [pc, #28]	; (ef78 <hci_driver_open+0x6c>)
    ef5c:	4807      	ldr	r0, [pc, #28]	; (ef7c <hci_driver_open+0x70>)
    ef5e:	f01a fcd3 	bl	29908 <_impl_k_thread_create>
	return 0;
    ef62:	e7da      	b.n	ef1a <hci_driver_open+0xe>
    ef64:	2000d180 	.word	0x2000d180
    ef68:	0000ee45 	.word	0x0000ee45
    ef6c:	200042a0 	.word	0x200042a0
    ef70:	20002bfc 	.word	0x20002bfc
    ef74:	0000ef81 	.word	0x0000ef81
    ef78:	20004460 	.word	0x20004460
    ef7c:	20002ac8 	.word	0x20002ac8

0000ef80 <recv_thread>:
{
    ef80:	b510      	push	{r4, lr}
    ef82:	b086      	sub	sp, #24
    ef84:	e029      	b.n	efda <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    ef86:	2801      	cmp	r0, #1
    ef88:	d042      	beq.n	f010 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    ef8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    ef8e:	2001      	movs	r0, #1
    ef90:	f7f7 fd6c 	bl	6a6c <bt_buf_get_rx>
    ef94:	4604      	mov	r4, r0
		if (buf) {
    ef96:	b11c      	cbz	r4, efa0 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    ef98:	4621      	mov	r1, r4
    ef9a:	9805      	ldr	r0, [sp, #20]
    ef9c:	f7ff fece 	bl	ed3c <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    efa0:	2100      	movs	r1, #0
    efa2:	9b05      	ldr	r3, [sp, #20]
    efa4:	88d8      	ldrh	r0, [r3, #6]
    efa6:	f009 fd4b 	bl	18a40 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    efaa:	a806      	add	r0, sp, #24
    efac:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    efb0:	2200      	movs	r2, #0
    efb2:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    efb4:	f009 fcc0 	bl	18938 <radio_rx_mem_release>
		if (buf) {
    efb8:	b124      	cbz	r4, efc4 <recv_thread+0x44>
			if (buf->len) {
    efba:	89a3      	ldrh	r3, [r4, #12]
    efbc:	b3ab      	cbz	r3, f02a <recv_thread+0xaa>
				bt_recv(buf);
    efbe:	4620      	mov	r0, r4
    efc0:	f7f7 fb74 	bl	66ac <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    efc4:	f01a f8c8 	bl	29158 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    efc8:	f01a fa7e 	bl	294c8 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    efcc:	4b29      	ldr	r3, [pc, #164]	; (f074 <recv_thread+0xf4>)
    efce:	681b      	ldr	r3, [r3, #0]
    efd0:	1ac0      	subs	r0, r0, r3
    efd2:	f241 3388 	movw	r3, #5000	; 0x1388
    efd6:	4298      	cmp	r0, r3
    efd8:	d82b      	bhi.n	f032 <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    efda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    efde:	4826      	ldr	r0, [pc, #152]	; (f078 <recv_thread+0xf8>)
    efe0:	f019 fea4 	bl	28d2c <k_queue_get>
		if (node_rx && !buf) {
    efe4:	b1f8      	cbz	r0, f026 <recv_thread+0xa6>
    efe6:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    efe8:	f7ff fecc 	bl	ed84 <hci_get_class>
    efec:	9405      	str	r4, [sp, #20]
	switch (class) {
    efee:	2800      	cmp	r0, #0
    eff0:	db13      	blt.n	f01a <recv_thread+0x9a>
    eff2:	2802      	cmp	r0, #2
    eff4:	ddc7      	ble.n	ef86 <recv_thread+0x6>
    eff6:	2803      	cmp	r0, #3
    eff8:	d10f      	bne.n	f01a <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    effa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    effe:	2003      	movs	r0, #3
    f000:	f7f7 fd34 	bl	6a6c <bt_buf_get_rx>
    f004:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    f006:	4601      	mov	r1, r0
    f008:	9805      	ldr	r0, [sp, #20]
    f00a:	f7ff fe6b 	bl	ece4 <hci_acl_encode>
    f00e:	e7c7      	b.n	efa0 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    f010:	2100      	movs	r1, #0
    f012:	f7f7 fd2b 	bl	6a6c <bt_buf_get_rx>
    f016:	4604      	mov	r4, r0
    f018:	e7bd      	b.n	ef96 <recv_thread+0x16>
		LL_ASSERT(0);
    f01a:	4040      	eors	r0, r0
    f01c:	f380 8811 	msr	BASEPRI, r0
    f020:	f04f 0004 	mov.w	r0, #4
    f024:	df02      	svc	2
		struct net_buf *buf = NULL;
    f026:	2400      	movs	r4, #0
    f028:	e7c6      	b.n	efb8 <recv_thread+0x38>
				net_buf_unref(buf);
    f02a:	4620      	mov	r0, r4
    f02c:	f00b fea2 	bl	1ad74 <net_buf_unref>
    f030:	e7c8      	b.n	efc4 <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    f032:	2200      	movs	r2, #0
	size_t unused = 0;
    f034:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    f036:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    f03a:	d206      	bcs.n	f04a <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    f03c:	490f      	ldr	r1, [pc, #60]	; (f07c <recv_thread+0xfc>)
    f03e:	5c89      	ldrb	r1, [r1, r2]
    f040:	29aa      	cmp	r1, #170	; 0xaa
    f042:	d102      	bne.n	f04a <recv_thread+0xca>
			unused++;
    f044:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    f046:	3201      	adds	r2, #1
    f048:	e7f5      	b.n	f036 <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    f04a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    f04e:	2264      	movs	r2, #100	; 0x64
    f050:	fb02 f201 	mul.w	r2, r2, r1
    f054:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    f056:	9202      	str	r2, [sp, #8]
    f058:	f44f 6280 	mov.w	r2, #1024	; 0x400
    f05c:	9201      	str	r2, [sp, #4]
    f05e:	9100      	str	r1, [sp, #0]
    f060:	4907      	ldr	r1, [pc, #28]	; (f080 <recv_thread+0x100>)
    f062:	4808      	ldr	r0, [pc, #32]	; (f084 <recv_thread+0x104>)
    f064:	f7f3 ffd2 	bl	300c <printk>
    f068:	f01a fa2e 	bl	294c8 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    f06c:	4b01      	ldr	r3, [pc, #4]	; (f074 <recv_thread+0xf4>)
    f06e:	6018      	str	r0, [r3, #0]
    f070:	e7b3      	b.n	efda <recv_thread+0x5a>
    f072:	bf00      	nop
    f074:	20000bdc 	.word	0x20000bdc
    f078:	2000d1f0 	.word	0x2000d1f0
    f07c:	20004460 	.word	0x20004460
    f080:	000319b8 	.word	0x000319b8
    f084:	00031708 	.word	0x00031708

0000f088 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    f088:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    f08a:	2304      	movs	r3, #4
	while (callee_id--) {
    f08c:	e01d      	b.n	f0ca <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    f08e:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    f092:	4911      	ldr	r1, [pc, #68]	; (f0d8 <mayfly_init+0x50>)
    f094:	0065      	lsls	r5, r4, #1
    f096:	192b      	adds	r3, r5, r4
    f098:	009a      	lsls	r2, r3, #2
    f09a:	0073      	lsls	r3, r6, #1
    f09c:	eb03 0e06 	add.w	lr, r3, r6
    f0a0:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f0a4:	46be      	mov	lr, r7
    f0a6:	443a      	add	r2, r7
    f0a8:	440a      	add	r2, r1
    f0aa:	4425      	add	r5, r4
    f0ac:	00af      	lsls	r7, r5, #2
    f0ae:	4477      	add	r7, lr
    f0b0:	3204      	adds	r2, #4
    f0b2:	4439      	add	r1, r7
    f0b4:	4b09      	ldr	r3, [pc, #36]	; (f0dc <mayfly_init+0x54>)
    f0b6:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    f0ba:	f000 f9f5 	bl	f4a8 <memq_init>
		while (caller_id--) {
    f0be:	4623      	mov	r3, r4
    f0c0:	1e5c      	subs	r4, r3, #1
    f0c2:	b2e4      	uxtb	r4, r4
    f0c4:	2b00      	cmp	r3, #0
    f0c6:	d1e2      	bne.n	f08e <mayfly_init+0x6>
	while (callee_id--) {
    f0c8:	4633      	mov	r3, r6
    f0ca:	1e5e      	subs	r6, r3, #1
    f0cc:	b2f6      	uxtb	r6, r6
    f0ce:	b10b      	cbz	r3, f0d4 <mayfly_init+0x4c>
    f0d0:	2304      	movs	r3, #4
    f0d2:	e7f5      	b.n	f0c0 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    f0d4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f0d6:	bf00      	nop
    f0d8:	20000c60 	.word	0x20000c60
    f0dc:	20000be0 	.word	0x20000be0

0000f0e0 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    f0e0:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    f0e2:	b1ea      	cbz	r2, f120 <mayfly_enable+0x40>
    f0e4:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    f0e6:	0042      	lsls	r2, r0, #1
    f0e8:	4402      	add	r2, r0
    f0ea:	0093      	lsls	r3, r2, #2
    f0ec:	004c      	lsls	r4, r1, #1
    f0ee:	440c      	add	r4, r1
    f0f0:	0122      	lsls	r2, r4, #4
    f0f2:	441a      	add	r2, r3
    f0f4:	4b18      	ldr	r3, [pc, #96]	; (f158 <mayfly_enable+0x78>)
    f0f6:	4413      	add	r3, r2
    f0f8:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f0fa:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    f0fc:	429a      	cmp	r2, r3
    f0fe:	d003      	beq.n	f108 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    f100:	462a      	mov	r2, r5
    f102:	f00a f9e8 	bl	194d6 <mayfly_enable_cb>
    f106:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    f108:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f10c:	00a3      	lsls	r3, r4, #2
    f10e:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    f112:	0134      	lsls	r4, r6, #4
    f114:	4423      	add	r3, r4
    f116:	4c10      	ldr	r4, [pc, #64]	; (f158 <mayfly_enable+0x78>)
    f118:	4423      	add	r3, r4
    f11a:	3201      	adds	r2, #1
    f11c:	721a      	strb	r2, [r3, #8]
    f11e:	e7ef      	b.n	f100 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    f120:	0042      	lsls	r2, r0, #1
    f122:	4402      	add	r2, r0
    f124:	0093      	lsls	r3, r2, #2
    f126:	004c      	lsls	r4, r1, #1
    f128:	440c      	add	r4, r1
    f12a:	0122      	lsls	r2, r4, #4
    f12c:	441a      	add	r2, r3
    f12e:	4b0a      	ldr	r3, [pc, #40]	; (f158 <mayfly_enable+0x78>)
    f130:	4413      	add	r3, r2
    f132:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f134:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    f136:	429a      	cmp	r2, r3
    f138:	d000      	beq.n	f13c <mayfly_enable+0x5c>
    f13a:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    f13c:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    f140:	00a3      	lsls	r3, r4, #2
    f142:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    f146:	012c      	lsls	r4, r5, #4
    f148:	4423      	add	r3, r4
    f14a:	4c03      	ldr	r4, [pc, #12]	; (f158 <mayfly_enable+0x78>)
    f14c:	4423      	add	r3, r4
    f14e:	3201      	adds	r2, #1
    f150:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    f152:	f00a f9f7 	bl	19544 <mayfly_pend>
		}
	}
}
    f156:	e7f0      	b.n	f13a <mayfly_enable+0x5a>
    f158:	20000c60 	.word	0x20000c60

0000f15c <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    f15c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    f15e:	4605      	mov	r5, r0
    f160:	460e      	mov	r6, r1
    f162:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    f164:	b19a      	cbz	r2, f18e <mayfly_enqueue+0x32>
    f166:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f168:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    f16a:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    f16c:	7823      	ldrb	r3, [r4, #0]
    f16e:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    f170:	f013 0303 	ands.w	r3, r3, #3
    f174:	d032      	beq.n	f1dc <mayfly_enqueue+0x80>
		if (chain) {
    f176:	b371      	cbz	r1, f1d6 <mayfly_enqueue+0x7a>
			if (state != 1) {
    f178:	2b01      	cmp	r3, #1
    f17a:	d04c      	beq.n	f216 <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    f17c:	3201      	adds	r2, #1
    f17e:	b2d2      	uxtb	r2, r2
    f180:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    f182:	4631      	mov	r1, r6
    f184:	4628      	mov	r0, r5
    f186:	f00a f9dd 	bl	19544 <mayfly_pend>

				return 0;
    f18a:	2000      	movs	r0, #0
    f18c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f18e:	f00a f9c6 	bl	1951e <mayfly_prio_is_equal>
    f192:	b908      	cbnz	r0, f198 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    f194:	2101      	movs	r1, #1
    f196:	e7e7      	b.n	f168 <mayfly_enqueue+0xc>
    f198:	4631      	mov	r1, r6
    f19a:	4628      	mov	r0, r5
    f19c:	f00a f9ad 	bl	194fa <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    f1a0:	b1b8      	cbz	r0, f1d2 <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    f1a2:	481e      	ldr	r0, [pc, #120]	; (f21c <mayfly_enqueue+0xc0>)
    f1a4:	0069      	lsls	r1, r5, #1
    f1a6:	194a      	adds	r2, r1, r5
    f1a8:	0093      	lsls	r3, r2, #2
    f1aa:	0072      	lsls	r2, r6, #1
    f1ac:	eb02 0e06 	add.w	lr, r2, r6
    f1b0:	ea4f 170e 	mov.w	r7, lr, lsl #4
    f1b4:	46be      	mov	lr, r7
    f1b6:	443b      	add	r3, r7
    f1b8:	4403      	add	r3, r0
    f1ba:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    f1bc:	194b      	adds	r3, r1, r5
    f1be:	0099      	lsls	r1, r3, #2
    f1c0:	4471      	add	r1, lr
    f1c2:	4408      	add	r0, r1
    f1c4:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    f1c6:	429f      	cmp	r7, r3
    f1c8:	d001      	beq.n	f1ce <mayfly_enqueue+0x72>
    f1ca:	2101      	movs	r1, #1
    f1cc:	e7cc      	b.n	f168 <mayfly_enqueue+0xc>
    f1ce:	2100      	movs	r1, #0
    f1d0:	e7ca      	b.n	f168 <mayfly_enqueue+0xc>
    f1d2:	2101      	movs	r1, #1
    f1d4:	e7c8      	b.n	f168 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    f1d6:	1c93      	adds	r3, r2, #2
    f1d8:	b2db      	uxtb	r3, r3
    f1da:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    f1dc:	b1b1      	cbz	r1, f20c <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    f1de:	3201      	adds	r2, #1
    f1e0:	b2d2      	uxtb	r2, r2
    f1e2:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    f1e4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    f1e8:	009a      	lsls	r2, r3, #2
    f1ea:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    f1ee:	010b      	lsls	r3, r1, #4
    f1f0:	441a      	add	r2, r3
    f1f2:	4b0a      	ldr	r3, [pc, #40]	; (f21c <mayfly_enqueue+0xc0>)
    f1f4:	441a      	add	r2, r3
    f1f6:	3204      	adds	r2, #4
    f1f8:	6861      	ldr	r1, [r4, #4]
    f1fa:	4620      	mov	r0, r4
    f1fc:	f000 f957 	bl	f4ae <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    f200:	4631      	mov	r1, r6
    f202:	4628      	mov	r0, r5
    f204:	f00a f99e 	bl	19544 <mayfly_pend>

	return 0;
    f208:	2000      	movs	r0, #0
    f20a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    f20c:	68e3      	ldr	r3, [r4, #12]
    f20e:	68a0      	ldr	r0, [r4, #8]
    f210:	4798      	blx	r3
		return 0;
    f212:	2000      	movs	r0, #0
    f214:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    f216:	2001      	movs	r0, #1
}
    f218:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    f21a:	bf00      	nop
    f21c:	20000c60 	.word	0x20000c60

0000f220 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    f220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    f224:	b085      	sub	sp, #20
    f226:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    f228:	2304      	movs	r3, #4
	u8_t enable = 0;
    f22a:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    f22e:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    f232:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    f236:	fa5f f989 	uxtb.w	r9, r9
    f23a:	2b00      	cmp	r3, #0
    f23c:	f000 809b 	beq.w	f376 <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    f240:	aa04      	add	r2, sp, #16
    f242:	2300      	movs	r3, #0
    f244:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    f248:	4657      	mov	r7, sl
    f24a:	464e      	mov	r6, r9
    f24c:	4850      	ldr	r0, [pc, #320]	; (f390 <mayfly_run+0x170>)
    f24e:	ea4f 0149 	mov.w	r1, r9, lsl #1
    f252:	4449      	add	r1, r9
    f254:	008b      	lsls	r3, r1, #2
    f256:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f25a:	4451      	add	r1, sl
    f25c:	010c      	lsls	r4, r1, #4
    f25e:	4423      	add	r3, r4
    f260:	18c4      	adds	r4, r0, r3
    f262:	58c1      	ldr	r1, [r0, r3]
    f264:	6860      	ldr	r0, [r4, #4]
    f266:	f000 f929 	bl	f4bc <memq_peek>
    f26a:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    f26c:	e017      	b.n	f29e <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    f26e:	3a01      	subs	r2, #1
    f270:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    f272:	9b03      	ldr	r3, [sp, #12]
    f274:	68da      	ldr	r2, [r3, #12]
    f276:	6898      	ldr	r0, [r3, #8]
    f278:	4790      	blx	r2
    f27a:	e01b      	b.n	f2b4 <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    f27c:	4944      	ldr	r1, [pc, #272]	; (f390 <mayfly_run+0x170>)
    f27e:	0072      	lsls	r2, r6, #1
    f280:	4432      	add	r2, r6
    f282:	0093      	lsls	r3, r2, #2
    f284:	007a      	lsls	r2, r7, #1
    f286:	443a      	add	r2, r7
    f288:	0110      	lsls	r0, r2, #4
    f28a:	4403      	add	r3, r0
    f28c:	18c8      	adds	r0, r1, r3
    f28e:	aa03      	add	r2, sp, #12
    f290:	58c9      	ldr	r1, [r1, r3]
    f292:	6840      	ldr	r0, [r0, #4]
    f294:	f000 f912 	bl	f4bc <memq_peek>
    f298:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    f29a:	2c01      	cmp	r4, #1
    f29c:	d026      	beq.n	f2ec <mayfly_run+0xcc>
		while (link) {
    f29e:	f1b8 0f00 	cmp.w	r8, #0
    f2a2:	d030      	beq.n	f306 <mayfly_run+0xe6>
			req = m->_req;
    f2a4:	9b03      	ldr	r3, [sp, #12]
    f2a6:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    f2a8:	785a      	ldrb	r2, [r3, #1]
    f2aa:	1aa4      	subs	r4, r4, r2
    f2ac:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    f2b0:	2c01      	cmp	r4, #1
    f2b2:	d0dc      	beq.n	f26e <mayfly_run+0x4e>
			req = m->_req;
    f2b4:	9b03      	ldr	r3, [sp, #12]
    f2b6:	781d      	ldrb	r5, [r3, #0]
    f2b8:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    f2ba:	785b      	ldrb	r3, [r3, #1]
    f2bc:	1aeb      	subs	r3, r5, r3
    f2be:	f003 0303 	and.w	r3, r3, #3
    f2c2:	2b01      	cmp	r3, #1
    f2c4:	d0da      	beq.n	f27c <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    f2c6:	0072      	lsls	r2, r6, #1
    f2c8:	4432      	add	r2, r6
    f2ca:	0093      	lsls	r3, r2, #2
    f2cc:	0079      	lsls	r1, r7, #1
    f2ce:	4439      	add	r1, r7
    f2d0:	010a      	lsls	r2, r1, #4
    f2d2:	441a      	add	r2, r3
    f2d4:	4b2e      	ldr	r3, [pc, #184]	; (f390 <mayfly_run+0x170>)
    f2d6:	4413      	add	r3, r2
    f2d8:	2200      	movs	r2, #0
    f2da:	4619      	mov	r1, r3
    f2dc:	6858      	ldr	r0, [r3, #4]
    f2de:	f000 f8f6 	bl	f4ce <memq_dequeue>
				m->_link = link;
    f2e2:	9b03      	ldr	r3, [sp, #12]
    f2e4:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    f2e8:	705d      	strb	r5, [r3, #1]
    f2ea:	e7c7      	b.n	f27c <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    f2ec:	f1b9 0f00 	cmp.w	r9, #0
    f2f0:	d006      	beq.n	f300 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    f2f2:	4651      	mov	r1, sl
    f2f4:	4650      	mov	r0, sl
    f2f6:	f00a f925 	bl	19544 <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    f2fa:	b005      	add	sp, #20
    f2fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    f300:	2800      	cmp	r0, #0
    f302:	d0cc      	beq.n	f29e <mayfly_run+0x7e>
    f304:	e7f5      	b.n	f2f2 <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    f306:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f30a:	444a      	add	r2, r9
    f30c:	0093      	lsls	r3, r2, #2
    f30e:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f312:	4451      	add	r1, sl
    f314:	010a      	lsls	r2, r1, #4
    f316:	441a      	add	r2, r3
    f318:	4b1d      	ldr	r3, [pc, #116]	; (f390 <mayfly_run+0x170>)
    f31a:	4413      	add	r3, r2
    f31c:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    f31e:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    f320:	4299      	cmp	r1, r3
    f322:	d00b      	beq.n	f33c <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    f324:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f328:	0093      	lsls	r3, r2, #2
    f32a:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f32e:	0102      	lsls	r2, r0, #4
    f330:	4413      	add	r3, r2
    f332:	4a17      	ldr	r2, [pc, #92]	; (f390 <mayfly_run+0x170>)
    f334:	4413      	add	r3, r2
    f336:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    f338:	2301      	movs	r3, #1
    f33a:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    f33c:	ea4f 0249 	mov.w	r2, r9, lsl #1
    f340:	444a      	add	r2, r9
    f342:	0093      	lsls	r3, r2, #2
    f344:	ea4f 014a 	mov.w	r1, sl, lsl #1
    f348:	4451      	add	r1, sl
    f34a:	010a      	lsls	r2, r1, #4
    f34c:	441a      	add	r2, r3
    f34e:	4b10      	ldr	r3, [pc, #64]	; (f390 <mayfly_run+0x170>)
    f350:	4413      	add	r3, r2
    f352:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    f354:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    f356:	4299      	cmp	r1, r3
    f358:	d00b      	beq.n	f372 <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    f35a:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    f35e:	0093      	lsls	r3, r2, #2
    f360:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    f364:	0102      	lsls	r2, r0, #4
    f366:	4413      	add	r3, r2
    f368:	4a09      	ldr	r2, [pc, #36]	; (f390 <mayfly_run+0x170>)
    f36a:	4413      	add	r3, r2
    f36c:	7259      	strb	r1, [r3, #9]
			enable = 1;
    f36e:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    f372:	464b      	mov	r3, r9
    f374:	e75d      	b.n	f232 <mayfly_run+0x12>
	if (disable && !enable) {
    f376:	9b01      	ldr	r3, [sp, #4]
    f378:	2b00      	cmp	r3, #0
    f37a:	d0be      	beq.n	f2fa <mayfly_run+0xda>
    f37c:	f1bb 0f00 	cmp.w	fp, #0
    f380:	d1bb      	bne.n	f2fa <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    f382:	2200      	movs	r2, #0
    f384:	4651      	mov	r1, sl
    f386:	4650      	mov	r0, sl
    f388:	f00a f8a5 	bl	194d6 <mayfly_enable_cb>
    f38c:	e7b5      	b.n	f2fa <mayfly_run+0xda>
    f38e:	bf00      	nop
    f390:	20000c60 	.word	0x20000c60

0000f394 <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    f394:	b5f0      	push	{r4, r5, r6, r7, lr}
    f396:	b083      	sub	sp, #12
    f398:	4607      	mov	r7, r0
    f39a:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    f39c:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    f39e:	1dfb      	adds	r3, r7, #7
    f3a0:	f023 0303 	bic.w	r3, r3, #3
    f3a4:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    f3a6:	460e      	mov	r6, r1
    f3a8:	3a01      	subs	r2, #1
    f3aa:	b295      	uxth	r5, r2
    f3ac:	2204      	movs	r2, #4
    f3ae:	2100      	movs	r1, #0
    f3b0:	fb05 7000 	mla	r0, r5, r0, r7
    f3b4:	f01b fadc 	bl	2a970 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    f3b8:	e00b      	b.n	f3d2 <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    f3ba:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    f3be:	443b      	add	r3, r7
    f3c0:	a902      	add	r1, sp, #8
    f3c2:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    f3c6:	2204      	movs	r2, #4
    f3c8:	fb04 7006 	mla	r0, r4, r6, r7
    f3cc:	f7f0 ff78 	bl	2c0 <memcpy>
	while (mem_count--) {
    f3d0:	4625      	mov	r5, r4
    f3d2:	1e6c      	subs	r4, r5, #1
    f3d4:	b2a4      	uxth	r4, r4
    f3d6:	2d00      	cmp	r5, #0
    f3d8:	d1ef      	bne.n	f3ba <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    f3da:	b003      	add	sp, #12
    f3dc:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000f3de <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    f3de:	b570      	push	{r4, r5, r6, lr}
    f3e0:	b082      	sub	sp, #8
	if (*mem_head) {
    f3e2:	6805      	ldr	r5, [r0, #0]
    f3e4:	b1a5      	cbz	r5, f410 <mem_acquire+0x32>
    f3e6:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f3e8:	1deb      	adds	r3, r5, #7
    f3ea:	f023 0303 	bic.w	r3, r3, #3
    f3ee:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    f3f0:	3b01      	subs	r3, #1
    f3f2:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    f3f4:	2204      	movs	r2, #4
    f3f6:	4629      	mov	r1, r5
    f3f8:	eb0d 0002 	add.w	r0, sp, r2
    f3fc:	f7f0 ff60 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    f400:	9b01      	ldr	r3, [sp, #4]
    f402:	b11b      	cbz	r3, f40c <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    f404:	3307      	adds	r3, #7
    f406:	f023 0303 	bic.w	r3, r3, #3
    f40a:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    f40c:	9b01      	ldr	r3, [sp, #4]
    f40e:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    f410:	4628      	mov	r0, r5
    f412:	b002      	add	sp, #8
    f414:	bd70      	pop	{r4, r5, r6, pc}

0000f416 <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    f416:	b570      	push	{r4, r5, r6, lr}
    f418:	4606      	mov	r6, r0
    f41a:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    f41c:	680b      	ldr	r3, [r1, #0]
    f41e:	b183      	cbz	r3, f442 <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    f420:	3307      	adds	r3, #7
    f422:	f023 0303 	bic.w	r3, r3, #3
    f426:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    f428:	3401      	adds	r4, #1
    f42a:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    f42c:	2204      	movs	r2, #4
    f42e:	4629      	mov	r1, r5
    f430:	4630      	mov	r0, r6
    f432:	f7f0 ff45 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    f436:	1df3      	adds	r3, r6, #7
    f438:	f023 0303 	bic.w	r3, r3, #3
    f43c:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    f43e:	602e      	str	r6, [r5, #0]
    f440:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    f442:	2400      	movs	r4, #0
    f444:	e7f0      	b.n	f428 <mem_release+0x12>

0000f446 <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    f446:	4603      	mov	r3, r0
    f448:	b120      	cbz	r0, f454 <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    f44a:	3307      	adds	r3, #7
    f44c:	f023 0303 	bic.w	r3, r3, #3
    f450:	8818      	ldrh	r0, [r3, #0]
    f452:	4770      	bx	lr
	u16_t free_count = 0;
    f454:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    f456:	4770      	bx	lr

0000f458 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    f458:	fb02 0001 	mla	r0, r2, r1, r0
    f45c:	4770      	bx	lr

0000f45e <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    f45e:	1a40      	subs	r0, r0, r1
    f460:	b280      	uxth	r0, r0
}
    f462:	fbb0 f0f2 	udiv	r0, r0, r2
    f466:	4770      	bx	lr

0000f468 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    f468:	4411      	add	r1, r2
	while (len--) {
    f46a:	e004      	b.n	f476 <mem_rcopy+0xe>
		*dst++ = *--src;
    f46c:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    f470:	7002      	strb	r2, [r0, #0]
	while (len--) {
    f472:	461a      	mov	r2, r3
		*dst++ = *--src;
    f474:	3001      	adds	r0, #1
	while (len--) {
    f476:	1e53      	subs	r3, r2, #1
    f478:	b29b      	uxth	r3, r3
    f47a:	2a00      	cmp	r2, #0
    f47c:	d1f6      	bne.n	f46c <mem_rcopy+0x4>
	}
}
    f47e:	4770      	bx	lr

0000f480 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    f480:	1e4b      	subs	r3, r1, #1
    f482:	b29b      	uxth	r3, r3
    f484:	b171      	cbz	r1, f4a4 <mem_nz+0x24>
{
    f486:	b410      	push	{r4}
		if (*src++) {
    f488:	1c44      	adds	r4, r0, #1
    f48a:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    f48c:	4619      	mov	r1, r3
		if (*src++) {
    f48e:	b93a      	cbnz	r2, f4a0 <mem_nz+0x20>
    f490:	4620      	mov	r0, r4
	while (len--) {
    f492:	3b01      	subs	r3, #1
    f494:	b29b      	uxth	r3, r3
    f496:	2900      	cmp	r1, #0
    f498:	d1f6      	bne.n	f488 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    f49a:	2000      	movs	r0, #0
}
    f49c:	bc10      	pop	{r4}
    f49e:	4770      	bx	lr
			return 1;
    f4a0:	2001      	movs	r0, #1
    f4a2:	e7fb      	b.n	f49c <mem_nz+0x1c>
	return 0;
    f4a4:	2000      	movs	r0, #0
}
    f4a6:	4770      	bx	lr

0000f4a8 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    f4a8:	6010      	str	r0, [r2, #0]
    f4aa:	6008      	str	r0, [r1, #0]

	return link;
}
    f4ac:	4770      	bx	lr

0000f4ae <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    f4ae:	6813      	ldr	r3, [r2, #0]
    f4b0:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    f4b2:	6813      	ldr	r3, [r2, #0]
    f4b4:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    f4b6:	6011      	str	r1, [r2, #0]

	return link;
}
    f4b8:	4608      	mov	r0, r1
    f4ba:	4770      	bx	lr

0000f4bc <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    f4bc:	4281      	cmp	r1, r0
    f4be:	d004      	beq.n	f4ca <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    f4c0:	b10a      	cbz	r2, f4c6 <memq_peek+0xa>
		*mem = *((void **)link + 1);
    f4c2:	684b      	ldr	r3, [r1, #4]
    f4c4:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    f4c6:	4608      	mov	r0, r1
    f4c8:	4770      	bx	lr
		return 0;
    f4ca:	2100      	movs	r1, #0
    f4cc:	e7fb      	b.n	f4c6 <memq_peek+0xa>

0000f4ce <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    f4ce:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    f4d0:	4283      	cmp	r3, r0
    f4d2:	d006      	beq.n	f4e2 <memq_dequeue+0x14>
	if (mem) {
    f4d4:	b10a      	cbz	r2, f4da <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    f4d6:	6858      	ldr	r0, [r3, #4]
    f4d8:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    f4da:	681a      	ldr	r2, [r3, #0]
    f4dc:	600a      	str	r2, [r1, #0]

	return link;
}
    f4de:	4618      	mov	r0, r3
    f4e0:	4770      	bx	lr
		return 0;
    f4e2:	2300      	movs	r3, #0
    f4e4:	e7f9      	b.n	f4da <memq_dequeue+0xc>

0000f4e6 <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    f4e6:	b410      	push	{r4}
	u8_t one_count = 0;
    f4e8:	2200      	movs	r2, #0

	while (octets_len--) {
    f4ea:	e008      	b.n	f4fe <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    f4ec:	1e59      	subs	r1, r3, #1
    f4ee:	b249      	sxtb	r1, r1
    f4f0:	400b      	ands	r3, r1
			one_count++;
    f4f2:	3201      	adds	r2, #1
    f4f4:	b2d2      	uxtb	r2, r2
		while (bite) {
    f4f6:	2b00      	cmp	r3, #0
    f4f8:	d1f8      	bne.n	f4ec <util_ones_count_get+0x6>
		}
		octets++;
    f4fa:	3001      	adds	r0, #1
	while (octets_len--) {
    f4fc:	4621      	mov	r1, r4
    f4fe:	1e4b      	subs	r3, r1, #1
    f500:	b2dc      	uxtb	r4, r3
    f502:	b109      	cbz	r1, f508 <util_ones_count_get+0x22>
		bite = *octets;
    f504:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    f506:	e7f6      	b.n	f4f6 <util_ones_count_get+0x10>
	}

	return one_count;
}
    f508:	4610      	mov	r0, r2
    f50a:	bc10      	pop	{r4}
    f50c:	4770      	bx	lr
	...

0000f510 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    f510:	4b05      	ldr	r3, [pc, #20]	; (f528 <cntr_init+0x18>)
    f512:	2200      	movs	r2, #0
    f514:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    f518:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    f51c:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    f520:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    f524:	4770      	bx	lr
    f526:	bf00      	nop
    f528:	4000b000 	.word	0x4000b000

0000f52c <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    f52c:	4a05      	ldr	r2, [pc, #20]	; (f544 <cntr_start+0x18>)
    f52e:	7813      	ldrb	r3, [r2, #0]
    f530:	1c59      	adds	r1, r3, #1
    f532:	7011      	strb	r1, [r2, #0]
    f534:	b923      	cbnz	r3, f540 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    f536:	2201      	movs	r2, #1
    f538:	4b03      	ldr	r3, [pc, #12]	; (f548 <cntr_start+0x1c>)
    f53a:	601a      	str	r2, [r3, #0]

	return 0;
    f53c:	2000      	movs	r0, #0
    f53e:	4770      	bx	lr
		return 1;
    f540:	2001      	movs	r0, #1
}
    f542:	4770      	bx	lr
    f544:	20000d20 	.word	0x20000d20
    f548:	4000b000 	.word	0x4000b000

0000f54c <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    f54c:	4b0a      	ldr	r3, [pc, #40]	; (f578 <cntr_stop+0x2c>)
    f54e:	781b      	ldrb	r3, [r3, #0]
    f550:	b14b      	cbz	r3, f566 <cntr_stop+0x1a>

	if (--_refcount) {
    f552:	3b01      	subs	r3, #1
    f554:	b2db      	uxtb	r3, r3
    f556:	4a08      	ldr	r2, [pc, #32]	; (f578 <cntr_stop+0x2c>)
    f558:	7013      	strb	r3, [r2, #0]
    f55a:	b953      	cbnz	r3, f572 <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    f55c:	2201      	movs	r2, #1
    f55e:	4b07      	ldr	r3, [pc, #28]	; (f57c <cntr_stop+0x30>)
    f560:	605a      	str	r2, [r3, #4]

	return 0;
    f562:	2000      	movs	r0, #0
    f564:	4770      	bx	lr
	LL_ASSERT(_refcount);
    f566:	4040      	eors	r0, r0
    f568:	f380 8811 	msr	BASEPRI, r0
    f56c:	f04f 0004 	mov.w	r0, #4
    f570:	df02      	svc	2
		return 1;
    f572:	2001      	movs	r0, #1
}
    f574:	4770      	bx	lr
    f576:	bf00      	nop
    f578:	20000d20 	.word	0x20000d20
    f57c:	4000b000 	.word	0x4000b000

0000f580 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    f580:	4b01      	ldr	r3, [pc, #4]	; (f588 <cntr_cnt_get+0x8>)
    f582:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    f586:	4770      	bx	lr
    f588:	4000b000 	.word	0x4000b000

0000f58c <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    f58c:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    f590:	4b01      	ldr	r3, [pc, #4]	; (f598 <cntr_cmp_set+0xc>)
    f592:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    f596:	4770      	bx	lr
    f598:	4000b000 	.word	0x4000b000

0000f59c <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    f59c:	e009      	b.n	f5b2 <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    f59e:	4b15      	ldr	r3, [pc, #84]	; (f5f4 <do_ecb+0x58>)
    f5a0:	2201      	movs	r2, #1
    f5a2:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    f5a4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f5a8:	b91b      	cbnz	r3, f5b2 <do_ecb+0x16>
    f5aa:	4b12      	ldr	r3, [pc, #72]	; (f5f4 <do_ecb+0x58>)
    f5ac:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f5b0:	b9d3      	cbnz	r3, f5e8 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    f5b2:	4b10      	ldr	r3, [pc, #64]	; (f5f4 <do_ecb+0x58>)
    f5b4:	2201      	movs	r2, #1
    f5b6:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    f5b8:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    f5bc:	2100      	movs	r1, #0
    f5be:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    f5c2:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    f5c6:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f5c8:	4b0a      	ldr	r3, [pc, #40]	; (f5f4 <do_ecb+0x58>)
    f5ca:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    f5ce:	2b00      	cmp	r3, #0
    f5d0:	d1e5      	bne.n	f59e <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f5d2:	4b08      	ldr	r3, [pc, #32]	; (f5f4 <do_ecb+0x58>)
    f5d4:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    f5d8:	2b00      	cmp	r3, #0
    f5da:	d1e0      	bne.n	f59e <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    f5dc:	4b05      	ldr	r3, [pc, #20]	; (f5f4 <do_ecb+0x58>)
    f5de:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    f5e2:	2b00      	cmp	r3, #0
    f5e4:	d1f0      	bne.n	f5c8 <do_ecb+0x2c>
    f5e6:	e7da      	b.n	f59e <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    f5e8:	2200      	movs	r2, #0
    f5ea:	4b02      	ldr	r3, [pc, #8]	; (f5f4 <do_ecb+0x58>)
    f5ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f5f0:	4770      	bx	lr
    f5f2:	bf00      	nop
    f5f4:	4000e000 	.word	0x4000e000

0000f5f8 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    f5f8:	b570      	push	{r4, r5, r6, lr}
    f5fa:	b08c      	sub	sp, #48	; 0x30
    f5fc:	460e      	mov	r6, r1
    f5fe:	4615      	mov	r5, r2
    f600:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    f602:	2210      	movs	r2, #16
    f604:	4601      	mov	r1, r0
    f606:	4668      	mov	r0, sp
    f608:	f7ff ff2e 	bl	f468 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    f60c:	2210      	movs	r2, #16
    f60e:	4631      	mov	r1, r6
    f610:	eb0d 0002 	add.w	r0, sp, r2
    f614:	f7ff ff28 	bl	f468 <mem_rcopy>

	do_ecb(&ecb);
    f618:	4668      	mov	r0, sp
    f61a:	f7ff ffbf 	bl	f59c <do_ecb>

	if (cipher_text_le) {
    f61e:	b125      	cbz	r5, f62a <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    f620:	2210      	movs	r2, #16
    f622:	a908      	add	r1, sp, #32
    f624:	4628      	mov	r0, r5
    f626:	f7ff ff1f 	bl	f468 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    f62a:	b124      	cbz	r4, f636 <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    f62c:	2210      	movs	r2, #16
    f62e:	a908      	add	r1, sp, #32
    f630:	4620      	mov	r0, r4
    f632:	f7f0 fe45 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    f636:	b00c      	add	sp, #48	; 0x30
    f638:	bd70      	pop	{r4, r5, r6, pc}
	...

0000f63c <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    f63c:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    f63e:	4b02      	ldr	r3, [pc, #8]	; (f648 <isr_radio+0xc>)
    f640:	681b      	ldr	r3, [r3, #0]
    f642:	b103      	cbz	r3, f646 <isr_radio+0xa>
		sfp_radio_isr();
    f644:	4798      	blx	r3
    f646:	bd08      	pop	{r3, pc}
    f648:	20000f40 	.word	0x20000f40

0000f64c <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    f64c:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    f64e:	4b07      	ldr	r3, [pc, #28]	; (f66c <radio_isr_set+0x20>)
    f650:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    f652:	2210      	movs	r2, #16
    f654:	4b06      	ldr	r3, [pc, #24]	; (f670 <radio_isr_set+0x24>)
    f656:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    f65a:	2202      	movs	r2, #2
    f65c:	4b05      	ldr	r3, [pc, #20]	; (f674 <radio_isr_set+0x28>)
    f65e:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    f662:	2001      	movs	r0, #1
    f664:	f018 fa3c 	bl	27ae0 <_arch_irq_enable>
    f668:	bd08      	pop	{r3, pc}
    f66a:	bf00      	nop
    f66c:	20000f40 	.word	0x20000f40
    f670:	40001000 	.word	0x40001000
    f674:	e000e100 	.word	0xe000e100

0000f678 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    f678:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    f67c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    f680:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    f684:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    f688:	2100      	movs	r1, #0
    f68a:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    f68e:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    f692:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    f696:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    f69a:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    f69e:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    f6a2:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    f6a6:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    f6aa:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    f6ae:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    f6b2:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    f6b6:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    f6ba:	4770      	bx	lr

0000f6bc <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    f6bc:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    f6be:	2001      	movs	r0, #1
    f6c0:	f018 fa1c 	bl	27afc <_arch_irq_disable>

	NRF_RADIO->POWER =
    f6c4:	4b03      	ldr	r3, [pc, #12]	; (f6d4 <radio_reset+0x18>)
    f6c6:	2200      	movs	r2, #0
    f6c8:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    f6cc:	2201      	movs	r2, #1
    f6ce:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    f6d2:	bd08      	pop	{r3, pc}
    f6d4:	40001000 	.word	0x40001000

0000f6d8 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    f6d8:	2802      	cmp	r0, #2
    f6da:	d106      	bne.n	f6ea <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    f6dc:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    f6de:	f003 030f 	and.w	r3, r3, #15
    f6e2:	4a03      	ldr	r2, [pc, #12]	; (f6f0 <radio_phy_set+0x18>)
    f6e4:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    f6e8:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    f6ea:	2303      	movs	r3, #3
    f6ec:	e7f7      	b.n	f6de <radio_phy_set+0x6>
    f6ee:	bf00      	nop
    f6f0:	40001000 	.word	0x40001000

0000f6f4 <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    f6f4:	4b01      	ldr	r3, [pc, #4]	; (f6fc <radio_tx_power_set+0x8>)
    f6f6:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    f6fa:	4770      	bx	lr
    f6fc:	40001000 	.word	0x40001000

0000f700 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    f700:	4b01      	ldr	r3, [pc, #4]	; (f708 <radio_freq_chan_set+0x8>)
    f702:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    f706:	4770      	bx	lr
    f708:	40001000 	.word	0x40001000

0000f70c <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    f70c:	4b07      	ldr	r3, [pc, #28]	; (f72c <radio_whiten_iv_set+0x20>)
    f70e:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    f712:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f716:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    f71a:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    f71e:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    f722:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    f726:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    f72a:	4770      	bx	lr
    f72c:	40001000 	.word	0x40001000

0000f730 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    f730:	4a0a      	ldr	r2, [pc, #40]	; (f75c <radio_aa_set+0x2c>)
    f732:	2300      	movs	r3, #0
    f734:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    f738:	2301      	movs	r3, #1
    f73a:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    f73e:	78c3      	ldrb	r3, [r0, #3]
    f740:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    f744:	7881      	ldrb	r1, [r0, #2]
    f746:	7843      	ldrb	r3, [r0, #1]
    f748:	041b      	lsls	r3, r3, #16
    f74a:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    f74e:	7801      	ldrb	r1, [r0, #0]
    f750:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    f754:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    f758:	4770      	bx	lr
    f75a:	bf00      	nop
    f75c:	40001000 	.word	0x40001000

0000f760 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    f760:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    f762:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    f766:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    f76a:	2a02      	cmp	r2, #2
    f76c:	d020      	beq.n	f7b0 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    f76e:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    f770:	b10c      	cbz	r4, f776 <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    f772:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    f776:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    f77a:	f1c0 0008 	rsb	r0, r0, #8
    f77e:	0400      	lsls	r0, r0, #16
    f780:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    f784:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    f786:	4303      	orrs	r3, r0
    f788:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    f78c:	4a0a      	ldr	r2, [pc, #40]	; (f7b8 <radio_pkt_configure+0x58>)
    f78e:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    f792:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    f796:	4b09      	ldr	r3, [pc, #36]	; (f7bc <radio_pkt_configure+0x5c>)
    f798:	4003      	ands	r3, r0
    f79a:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    f79e:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    f7a2:	4319      	orrs	r1, r3
    f7a4:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    f7a8:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    f7ac:	bc10      	pop	{r4}
    f7ae:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    f7b0:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    f7b4:	e7dc      	b.n	f770 <radio_pkt_configure+0x10>
    f7b6:	bf00      	nop
    f7b8:	40001000 	.word	0x40001000
    f7bc:	fef80000 	.word	0xfef80000

0000f7c0 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    f7c0:	4b01      	ldr	r3, [pc, #4]	; (f7c8 <radio_pkt_rx_set+0x8>)
    f7c2:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f7c6:	4770      	bx	lr
    f7c8:	40001000 	.word	0x40001000

0000f7cc <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    f7cc:	4b01      	ldr	r3, [pc, #4]	; (f7d4 <radio_pkt_tx_set+0x8>)
    f7ce:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    f7d2:	4770      	bx	lr
    f7d4:	40001000 	.word	0x40001000

0000f7d8 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f7d8:	208c      	movs	r0, #140	; 0x8c
    f7da:	4770      	bx	lr

0000f7dc <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f7dc:	2001      	movs	r0, #1
    f7de:	4770      	bx	lr

0000f7e0 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f7e0:	208c      	movs	r0, #140	; 0x8c
    f7e2:	4770      	bx	lr

0000f7e4 <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    f7e4:	2802      	cmp	r0, #2
    f7e6:	d101      	bne.n	f7ec <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    f7e8:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    f7ea:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    f7ec:	200a      	movs	r0, #10
    f7ee:	4770      	bx	lr

0000f7f0 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    f7f0:	2201      	movs	r2, #1
    f7f2:	4b01      	ldr	r3, [pc, #4]	; (f7f8 <radio_rx_enable+0x8>)
    f7f4:	605a      	str	r2, [r3, #4]
    f7f6:	4770      	bx	lr
    f7f8:	40001000 	.word	0x40001000

0000f7fc <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    f7fc:	2201      	movs	r2, #1
    f7fe:	4b01      	ldr	r3, [pc, #4]	; (f804 <radio_tx_enable+0x8>)
    f800:	601a      	str	r2, [r3, #0]
    f802:	4770      	bx	lr
    f804:	40001000 	.word	0x40001000

0000f808 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    f808:	4b03      	ldr	r3, [pc, #12]	; (f818 <radio_disable+0x10>)
    f80a:	2200      	movs	r2, #0
    f80c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    f810:	2201      	movs	r2, #1
    f812:	611a      	str	r2, [r3, #16]
    f814:	4770      	bx	lr
    f816:	bf00      	nop
    f818:	40001000 	.word	0x40001000

0000f81c <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    f81c:	4b06      	ldr	r3, [pc, #24]	; (f838 <radio_status_reset+0x1c>)
    f81e:	2200      	movs	r2, #0
    f820:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    f824:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    f828:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    f82c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    f830:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    f834:	4770      	bx	lr
    f836:	bf00      	nop
    f838:	40001000 	.word	0x40001000

0000f83c <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    f83c:	4b03      	ldr	r3, [pc, #12]	; (f84c <radio_is_ready+0x10>)
    f83e:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    f842:	3000      	adds	r0, #0
    f844:	bf18      	it	ne
    f846:	2001      	movne	r0, #1
    f848:	4770      	bx	lr
    f84a:	bf00      	nop
    f84c:	40001000 	.word	0x40001000

0000f850 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    f850:	4b03      	ldr	r3, [pc, #12]	; (f860 <radio_is_done+0x10>)
    f852:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    f856:	3000      	adds	r0, #0
    f858:	bf18      	it	ne
    f85a:	2001      	movne	r0, #1
    f85c:	4770      	bx	lr
    f85e:	bf00      	nop
    f860:	40001000 	.word	0x40001000

0000f864 <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    f864:	4b03      	ldr	r3, [pc, #12]	; (f874 <radio_is_idle+0x10>)
    f866:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    f86a:	fab0 f080 	clz	r0, r0
    f86e:	0940      	lsrs	r0, r0, #5
    f870:	4770      	bx	lr
    f872:	bf00      	nop
    f874:	40001000 	.word	0x40001000

0000f878 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    f878:	4b04      	ldr	r3, [pc, #16]	; (f88c <radio_crc_configure+0x14>)
    f87a:	f240 1203 	movw	r2, #259	; 0x103
    f87e:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    f882:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    f886:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    f88a:	4770      	bx	lr
    f88c:	40001000 	.word	0x40001000

0000f890 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    f890:	4b03      	ldr	r3, [pc, #12]	; (f8a0 <radio_crc_is_valid+0x10>)
    f892:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f896:	3000      	adds	r0, #0
    f898:	bf18      	it	ne
    f89a:	2001      	movne	r0, #1
    f89c:	4770      	bx	lr
    f89e:	bf00      	nop
    f8a0:	40001000 	.word	0x40001000

0000f8a4 <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    f8a4:	4800      	ldr	r0, [pc, #0]	; (f8a8 <radio_pkt_empty_get+0x4>)
    f8a6:	4770      	bx	lr
    f8a8:	20000e34 	.word	0x20000e34

0000f8ac <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    f8ac:	4800      	ldr	r0, [pc, #0]	; (f8b0 <radio_pkt_scratch_get+0x4>)
    f8ae:	4770      	bx	lr
    f8b0:	20000e38 	.word	0x20000e38

0000f8b4 <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f8b4:	220b      	movs	r2, #11
    f8b6:	4b02      	ldr	r3, [pc, #8]	; (f8c0 <radio_switch_complete_and_rx+0xc>)
    f8b8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f8bc:	4770      	bx	lr
    f8be:	bf00      	nop
    f8c0:	40001000 	.word	0x40001000

0000f8c4 <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    f8c4:	2207      	movs	r2, #7
    f8c6:	4b02      	ldr	r3, [pc, #8]	; (f8d0 <radio_switch_complete_and_tx+0xc>)
    f8c8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f8cc:	4770      	bx	lr
    f8ce:	bf00      	nop
    f8d0:	40001000 	.word	0x40001000

0000f8d4 <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    f8d4:	2203      	movs	r2, #3
    f8d6:	4b02      	ldr	r3, [pc, #8]	; (f8e0 <radio_switch_complete_and_disable+0xc>)
    f8d8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f8dc:	4770      	bx	lr
    f8de:	bf00      	nop
    f8e0:	40001000 	.word	0x40001000

0000f8e4 <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    f8e4:	4a03      	ldr	r2, [pc, #12]	; (f8f4 <radio_rssi_measure+0x10>)
    f8e6:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    f8ea:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    f8ee:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    f8f2:	4770      	bx	lr
    f8f4:	40001000 	.word	0x40001000

0000f8f8 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    f8f8:	4b01      	ldr	r3, [pc, #4]	; (f900 <radio_rssi_get+0x8>)
    f8fa:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f8fe:	4770      	bx	lr
    f900:	40001000 	.word	0x40001000

0000f904 <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    f904:	2200      	movs	r2, #0
    f906:	4b02      	ldr	r3, [pc, #8]	; (f910 <radio_rssi_status_reset+0xc>)
    f908:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    f90c:	4770      	bx	lr
    f90e:	bf00      	nop
    f910:	40001000 	.word	0x40001000

0000f914 <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    f914:	4b03      	ldr	r3, [pc, #12]	; (f924 <radio_rssi_is_ready+0x10>)
    f916:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    f91a:	3000      	adds	r0, #0
    f91c:	bf18      	it	ne
    f91e:	2001      	movne	r0, #1
    f920:	4770      	bx	lr
    f922:	bf00      	nop
    f924:	40001000 	.word	0x40001000

0000f928 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    f928:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    f92a:	2400      	movs	r4, #0
    f92c:	e019      	b.n	f962 <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f92e:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    f930:	7893      	ldrb	r3, [r2, #2]
    f932:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f934:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    f938:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    f93a:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    f93e:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    f940:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    f942:	4d0c      	ldr	r5, [pc, #48]	; (f974 <radio_filter_configure+0x4c>)
    f944:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    f948:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    f94c:	7956      	ldrb	r6, [r2, #5]
    f94e:	7913      	ldrb	r3, [r2, #4]
    f950:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    f954:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    f958:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    f95c:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    f95e:	3401      	adds	r4, #1
    f960:	b2e4      	uxtb	r4, r4
    f962:	2c07      	cmp	r4, #7
    f964:	d9e3      	bls.n	f92e <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    f966:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    f96a:	4b02      	ldr	r3, [pc, #8]	; (f974 <radio_filter_configure+0x4c>)
    f96c:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    f970:	bc70      	pop	{r4, r5, r6}
    f972:	4770      	bx	lr
    f974:	40001000 	.word	0x40001000

0000f978 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    f978:	4a03      	ldr	r2, [pc, #12]	; (f988 <radio_filter_disable+0x10>)
    f97a:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    f97e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    f982:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    f986:	4770      	bx	lr
    f988:	40001000 	.word	0x40001000

0000f98c <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    f98c:	4b03      	ldr	r3, [pc, #12]	; (f99c <radio_filter_status_reset+0x10>)
    f98e:	2200      	movs	r2, #0
    f990:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    f994:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    f998:	4770      	bx	lr
    f99a:	bf00      	nop
    f99c:	40001000 	.word	0x40001000

0000f9a0 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    f9a0:	4b03      	ldr	r3, [pc, #12]	; (f9b0 <radio_filter_has_match+0x10>)
    f9a2:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    f9a6:	3000      	adds	r0, #0
    f9a8:	bf18      	it	ne
    f9aa:	2001      	movne	r0, #1
    f9ac:	4770      	bx	lr
    f9ae:	bf00      	nop
    f9b0:	40001000 	.word	0x40001000

0000f9b4 <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    f9b4:	4b01      	ldr	r3, [pc, #4]	; (f9bc <radio_filter_match_get+0x8>)
    f9b6:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    f9ba:	4770      	bx	lr
    f9bc:	40001000 	.word	0x40001000

0000f9c0 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    f9c0:	4b04      	ldr	r3, [pc, #16]	; (f9d4 <radio_bc_configure+0x14>)
    f9c2:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    f9c6:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    f9ca:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    f9ce:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    f9d2:	4770      	bx	lr
    f9d4:	40001000 	.word	0x40001000

0000f9d8 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    f9d8:	2200      	movs	r2, #0
    f9da:	4b02      	ldr	r3, [pc, #8]	; (f9e4 <radio_bc_status_reset+0xc>)
    f9dc:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    f9e0:	4770      	bx	lr
    f9e2:	bf00      	nop
    f9e4:	40001000 	.word	0x40001000

0000f9e8 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    f9e8:	4b03      	ldr	r3, [pc, #12]	; (f9f8 <radio_bc_has_match+0x10>)
    f9ea:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    f9ee:	3000      	adds	r0, #0
    f9f0:	bf18      	it	ne
    f9f2:	2001      	movne	r0, #1
    f9f4:	4770      	bx	lr
    f9f6:	bf00      	nop
    f9f8:	40001000 	.word	0x40001000

0000f9fc <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    f9fc:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    fa00:	4b04      	ldr	r3, [pc, #16]	; (fa14 <radio_tmr_status_reset+0x18>)
    fa02:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    fa06:	f248 027f 	movw	r2, #32895	; 0x807f
    fa0a:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    fa0e:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    fa12:	4770      	bx	lr
    fa14:	4000b000 	.word	0x4000b000

0000fa18 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    fa18:	4b01      	ldr	r3, [pc, #4]	; (fa20 <radio_tmr_tifs_set+0x8>)
    fa1a:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    fa1e:	4770      	bx	lr
    fa20:	40001000 	.word	0x40001000

0000fa24 <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    fa24:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    fa26:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    fa2a:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    fa2e:	4c21      	ldr	r4, [pc, #132]	; (fab4 <radio_tmr_start+0x90>)
    fa30:	42a3      	cmp	r3, r4
    fa32:	d906      	bls.n	fa42 <radio_tmr_start+0x1e>
		ticks_start--;
    fa34:	3901      	subs	r1, #1
		remainder += 30517578UL;
    fa36:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    fa3a:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    fa3e:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    fa42:	4b1d      	ldr	r3, [pc, #116]	; (fab8 <radio_tmr_start+0x94>)
    fa44:	fba3 3202 	umull	r3, r2, r3, r2
    fa48:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    fa4a:	4b1c      	ldr	r3, [pc, #112]	; (fabc <radio_tmr_start+0x98>)
    fa4c:	2401      	movs	r4, #1
    fa4e:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    fa50:	2500      	movs	r5, #0
    fa52:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    fa56:	2404      	movs	r4, #4
    fa58:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    fa5c:	2602      	movs	r6, #2
    fa5e:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    fa62:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    fa66:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    fa6a:	4c15      	ldr	r4, [pc, #84]	; (fac0 <radio_tmr_start+0x9c>)
    fa6c:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    fa70:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    fa74:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    fa78:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    fa7c:	4911      	ldr	r1, [pc, #68]	; (fac4 <radio_tmr_start+0xa0>)
    fa7e:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    fa82:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    fa86:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    fa8a:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    fa8e:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    fa92:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    fa96:	b948      	cbnz	r0, faac <radio_tmr_start+0x88>
    fa98:	490b      	ldr	r1, [pc, #44]	; (fac8 <radio_tmr_start+0xa4>)
    fa9a:	4b0a      	ldr	r3, [pc, #40]	; (fac4 <radio_tmr_start+0xa0>)
    fa9c:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    faa0:	2101      	movs	r1, #1
    faa2:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    faa6:	4610      	mov	r0, r2
    faa8:	bc70      	pop	{r4, r5, r6}
    faaa:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    faac:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    fab0:	e7f3      	b.n	fa9a <radio_tmr_start+0x76>
    fab2:	bf00      	nop
    fab4:	7ff0bdbf 	.word	0x7ff0bdbf
    fab8:	431bde83 	.word	0x431bde83
    fabc:	40008000 	.word	0x40008000
    fac0:	4000b000 	.word	0x4000b000
    fac4:	4001f000 	.word	0x4001f000
    fac8:	40001004 	.word	0x40001004

0000facc <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    facc:	4b02      	ldr	r3, [pc, #8]	; (fad8 <radio_tmr_stop+0xc>)
    face:	2201      	movs	r2, #1
    fad0:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    fad2:	611a      	str	r2, [r3, #16]
    fad4:	4770      	bx	lr
    fad6:	bf00      	nop
    fad8:	40008000 	.word	0x40008000

0000fadc <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    fadc:	4b0e      	ldr	r3, [pc, #56]	; (fb18 <radio_tmr_hcto_configure+0x3c>)
    fade:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    fae2:	2200      	movs	r2, #0
    fae4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fae8:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    faec:	4a0b      	ldr	r2, [pc, #44]	; (fb1c <radio_tmr_hcto_configure+0x40>)
    faee:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    faf2:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    faf6:	3240      	adds	r2, #64	; 0x40
    faf8:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    fafc:	f502 7280 	add.w	r2, r2, #256	; 0x100
    fb00:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    fb04:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    fb08:	3a34      	subs	r2, #52	; 0x34
    fb0a:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    fb0e:	2218      	movs	r2, #24
    fb10:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fb14:	4770      	bx	lr
    fb16:	bf00      	nop
    fb18:	40008000 	.word	0x40008000
    fb1c:	40001104 	.word	0x40001104

0000fb20 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    fb20:	4b0b      	ldr	r3, [pc, #44]	; (fb50 <radio_tmr_aa_capture+0x30>)
    fb22:	4a0c      	ldr	r2, [pc, #48]	; (fb54 <radio_tmr_aa_capture+0x34>)
    fb24:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    fb28:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fb2c:	3240      	adds	r2, #64	; 0x40
    fb2e:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fb32:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    fb36:	3a3c      	subs	r2, #60	; 0x3c
    fb38:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    fb3c:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fb40:	3240      	adds	r2, #64	; 0x40
    fb42:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    fb46:	220c      	movs	r2, #12
    fb48:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fb4c:	4770      	bx	lr
    fb4e:	bf00      	nop
    fb50:	4001f000 	.word	0x4001f000
    fb54:	40001100 	.word	0x40001100

0000fb58 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    fb58:	4b01      	ldr	r3, [pc, #4]	; (fb60 <radio_tmr_aa_get+0x8>)
    fb5a:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    fb5e:	4770      	bx	lr
    fb60:	40008000 	.word	0x40008000

0000fb64 <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    fb64:	4b01      	ldr	r3, [pc, #4]	; (fb6c <radio_tmr_aa_save+0x8>)
    fb66:	6018      	str	r0, [r3, #0]
    fb68:	4770      	bx	lr
    fb6a:	bf00      	nop
    fb6c:	20000f3c 	.word	0x20000f3c

0000fb70 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    fb70:	4b01      	ldr	r3, [pc, #4]	; (fb78 <radio_tmr_aa_restore+0x8>)
    fb72:	6818      	ldr	r0, [r3, #0]
    fb74:	4770      	bx	lr
    fb76:	bf00      	nop
    fb78:	20000f3c 	.word	0x20000f3c

0000fb7c <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    fb7c:	4b01      	ldr	r3, [pc, #4]	; (fb84 <radio_tmr_ready_get+0x8>)
    fb7e:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    fb82:	4770      	bx	lr
    fb84:	40008000 	.word	0x40008000

0000fb88 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    fb88:	4b06      	ldr	r3, [pc, #24]	; (fba4 <radio_tmr_end_capture+0x1c>)
    fb8a:	4a07      	ldr	r2, [pc, #28]	; (fba8 <radio_tmr_end_capture+0x20>)
    fb8c:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    fb90:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    fb94:	323c      	adds	r2, #60	; 0x3c
    fb96:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    fb9a:	2220      	movs	r2, #32
    fb9c:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fba0:	4770      	bx	lr
    fba2:	bf00      	nop
    fba4:	4001f000 	.word	0x4001f000
    fba8:	4000110c 	.word	0x4000110c

0000fbac <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    fbac:	4b01      	ldr	r3, [pc, #4]	; (fbb4 <radio_tmr_end_get+0x8>)
    fbae:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    fbb2:	4770      	bx	lr
    fbb4:	40008000 	.word	0x40008000

0000fbb8 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    fbb8:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fbba:	4b18      	ldr	r3, [pc, #96]	; (fc1c <radio_ccm_rx_pkt_set+0x64>)
    fbbc:	2400      	movs	r4, #0
    fbbe:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fbc2:	2402      	movs	r4, #2
    fbc4:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    fbc8:	42a1      	cmp	r1, r4
    fbca:	d125      	bne.n	fc18 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    fbcc:	4914      	ldr	r1, [pc, #80]	; (fc20 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    fbce:	4b13      	ldr	r3, [pc, #76]	; (fc1c <radio_ccm_rx_pkt_set+0x64>)
    fbd0:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fbd4:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    fbd8:	4812      	ldr	r0, [pc, #72]	; (fc24 <radio_ccm_rx_pkt_set+0x6c>)
    fbda:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    fbde:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fbe2:	4a11      	ldr	r2, [pc, #68]	; (fc28 <radio_ccm_rx_pkt_set+0x70>)
    fbe4:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    fbe8:	2200      	movs	r2, #0
    fbea:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fbee:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fbf2:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fbf6:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    fbfa:	4a0c      	ldr	r2, [pc, #48]	; (fc2c <radio_ccm_rx_pkt_set+0x74>)
    fbfc:	490c      	ldr	r1, [pc, #48]	; (fc30 <radio_ccm_rx_pkt_set+0x78>)
    fbfe:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    fc02:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    fc06:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fc0a:	2140      	movs	r1, #64	; 0x40
    fc0c:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    fc10:	2201      	movs	r2, #1
    fc12:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    fc14:	bc10      	pop	{r4}
    fc16:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    fc18:	4906      	ldr	r1, [pc, #24]	; (fc34 <radio_ccm_rx_pkt_set+0x7c>)
    fc1a:	e7d8      	b.n	fbce <radio_ccm_rx_pkt_set+0x16>
    fc1c:	4000f000 	.word	0x4000f000
    fc20:	01010001 	.word	0x01010001
    fc24:	20000e38 	.word	0x20000e38
    fc28:	20000d28 	.word	0x20000d28
    fc2c:	4001f000 	.word	0x4001f000
    fc30:	40001104 	.word	0x40001104
    fc34:	01000001 	.word	0x01000001

0000fc38 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    fc38:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    fc3a:	4b10      	ldr	r3, [pc, #64]	; (fc7c <radio_ccm_tx_pkt_set+0x44>)
    fc3c:	2200      	movs	r2, #0
    fc3e:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    fc42:	2402      	movs	r4, #2
    fc44:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    fc48:	4c0d      	ldr	r4, [pc, #52]	; (fc80 <radio_ccm_tx_pkt_set+0x48>)
    fc4a:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    fc4e:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    fc52:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    fc56:	480b      	ldr	r0, [pc, #44]	; (fc84 <radio_ccm_tx_pkt_set+0x4c>)
    fc58:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    fc5c:	490a      	ldr	r1, [pc, #40]	; (fc88 <radio_ccm_tx_pkt_set+0x50>)
    fc5e:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    fc62:	2101      	movs	r1, #1
    fc64:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    fc68:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    fc6c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    fc70:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    fc74:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    fc76:	bc10      	pop	{r4}
    fc78:	4770      	bx	lr
    fc7a:	bf00      	nop
    fc7c:	4000f000 	.word	0x4000f000
    fc80:	01010000 	.word	0x01010000
    fc84:	20000e38 	.word	0x20000e38
    fc88:	20000d28 	.word	0x20000d28

0000fc8c <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    fc8c:	2202      	movs	r2, #2
    fc8e:	4b0d      	ldr	r3, [pc, #52]	; (fcc4 <radio_ccm_is_done+0x38>)
    fc90:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    fc94:	e002      	b.n	fc9c <radio_ccm_is_done+0x10>
    fc96:	bf20      	wfe
  __ASM volatile ("sev");
    fc98:	bf40      	sev
  __ASM volatile ("wfe");
    fc9a:	bf20      	wfe
    fc9c:	4b09      	ldr	r3, [pc, #36]	; (fcc4 <radio_ccm_is_done+0x38>)
    fc9e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    fca2:	2b00      	cmp	r3, #0
    fca4:	d0f7      	beq.n	fc96 <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    fca6:	4b07      	ldr	r3, [pc, #28]	; (fcc4 <radio_ccm_is_done+0x38>)
    fca8:	2202      	movs	r2, #2
    fcaa:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    fcae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    fcb2:	4a05      	ldr	r2, [pc, #20]	; (fcc8 <radio_ccm_is_done+0x3c>)
    fcb4:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    fcb8:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    fcbc:	fab0 f080 	clz	r0, r0
    fcc0:	0940      	lsrs	r0, r0, #5
    fcc2:	4770      	bx	lr
    fcc4:	4000f000 	.word	0x4000f000
    fcc8:	e000e100 	.word	0xe000e100

0000fccc <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    fccc:	4b03      	ldr	r3, [pc, #12]	; (fcdc <radio_ccm_mic_is_valid+0x10>)
    fcce:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fcd2:	3000      	adds	r0, #0
    fcd4:	bf18      	it	ne
    fcd6:	2001      	movne	r0, #1
    fcd8:	4770      	bx	lr
    fcda:	bf00      	nop
    fcdc:	4000f000 	.word	0x4000f000

0000fce0 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    fce0:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    fce2:	4c13      	ldr	r4, [pc, #76]	; (fd30 <radio_ar_configure+0x50>)
    fce4:	2303      	movs	r3, #3
    fce6:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    fcea:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    fcee:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    fcf2:	4b10      	ldr	r3, [pc, #64]	; (fd34 <radio_ar_configure+0x54>)
    fcf4:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    fcf8:	3b01      	subs	r3, #1
    fcfa:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    fcfe:	4b0e      	ldr	r3, [pc, #56]	; (fd38 <radio_ar_configure+0x58>)
    fd00:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    fd04:	2300      	movs	r3, #0
    fd06:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    fd0a:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    fd0e:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    fd12:	2040      	movs	r0, #64	; 0x40
    fd14:	f7ff fe54 	bl	f9c0 <radio_bc_configure>
	radio_bc_status_reset();
    fd18:	f7ff fe5e 	bl	f9d8 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    fd1c:	4b07      	ldr	r3, [pc, #28]	; (fd3c <radio_ar_configure+0x5c>)
    fd1e:	4a08      	ldr	r2, [pc, #32]	; (fd40 <radio_ar_configure+0x60>)
    fd20:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    fd24:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    fd28:	2240      	movs	r2, #64	; 0x40
    fd2a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    fd2e:	bd10      	pop	{r4, pc}
    fd30:	4000f000 	.word	0x4000f000
    fd34:	40001000 	.word	0x40001000
    fd38:	20000d24 	.word	0x20000d24
    fd3c:	4001f000 	.word	0x4001f000
    fd40:	40001128 	.word	0x40001128

0000fd44 <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    fd44:	4b01      	ldr	r3, [pc, #4]	; (fd4c <radio_ar_match_get+0x8>)
    fd46:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    fd4a:	4770      	bx	lr
    fd4c:	4000f000 	.word	0x4000f000

0000fd50 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    fd50:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    fd52:	f7ff fe41 	bl	f9d8 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    fd56:	2200      	movs	r2, #0
    fd58:	4b01      	ldr	r3, [pc, #4]	; (fd60 <radio_ar_status_reset+0x10>)
    fd5a:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    fd5e:	bd08      	pop	{r3, pc}
    fd60:	4000f000 	.word	0x4000f000

0000fd64 <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    fd64:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    fd66:	f7ff fe3f 	bl	f9e8 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    fd6a:	b168      	cbz	r0, fd88 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    fd6c:	4b0a      	ldr	r3, [pc, #40]	; (fd98 <radio_ar_has_match+0x34>)
    fd6e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    fd72:	b15b      	cbz	r3, fd8c <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    fd74:	4b08      	ldr	r3, [pc, #32]	; (fd98 <radio_ar_has_match+0x34>)
    fd76:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    fd7a:	b14b      	cbz	r3, fd90 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    fd7c:	4b06      	ldr	r3, [pc, #24]	; (fd98 <radio_ar_has_match+0x34>)
    fd7e:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    fd82:	b13b      	cbz	r3, fd94 <radio_ar_has_match+0x30>
    fd84:	2000      	movs	r0, #0
    fd86:	bd08      	pop	{r3, pc}
    fd88:	2000      	movs	r0, #0
    fd8a:	bd08      	pop	{r3, pc}
    fd8c:	2000      	movs	r0, #0
    fd8e:	bd08      	pop	{r3, pc}
    fd90:	2000      	movs	r0, #0
    fd92:	bd08      	pop	{r3, pc}
    fd94:	2001      	movs	r0, #1
}
    fd96:	bd08      	pop	{r3, pc}
    fd98:	4000f000 	.word	0x4000f000
    fd9c:	00000000 	.word	0x00000000

0000fda0 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    fda0:	b1f0      	cbz	r0, fde0 <isr+0x40>
{
    fda2:	b430      	push	{r4, r5}
    fda4:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    fda6:	78c0      	ldrb	r0, [r0, #3]
    fda8:	1c43      	adds	r3, r0, #1
    fdaa:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fdac:	7815      	ldrb	r5, [r2, #0]
    fdae:	42ab      	cmp	r3, r5
    fdb0:	d012      	beq.n	fdd8 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    fdb2:	7894      	ldrb	r4, [r2, #2]
    fdb4:	42a3      	cmp	r3, r4
    fdb6:	d016      	beq.n	fde6 <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    fdb8:	b1c1      	cbz	r1, fdec <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    fdba:	490f      	ldr	r1, [pc, #60]	; (fdf8 <isr+0x58>)
    fdbc:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    fdc0:	4410      	add	r0, r2
    fdc2:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    fdc4:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    fdc6:	3301      	adds	r3, #1
    fdc8:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    fdca:	429d      	cmp	r5, r3
    fdcc:	d006      	beq.n	fddc <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    fdce:	42a3      	cmp	r3, r4
    fdd0:	d10f      	bne.n	fdf2 <isr+0x52>
		return 0;
    fdd2:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    fdd4:	bc30      	pop	{r4, r5}
    fdd6:	4770      	bx	lr
		last = 0;
    fdd8:	2300      	movs	r3, #0
    fdda:	e7ea      	b.n	fdb2 <isr+0x12>
		last = 0;
    fddc:	2300      	movs	r3, #0
    fdde:	e7f6      	b.n	fdce <isr+0x2e>
		return -ENOBUFS;
    fde0:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fde4:	4770      	bx	lr
		return -ENOBUFS;
    fde6:	f06f 0068 	mvn.w	r0, #104	; 0x68
    fdea:	e7f3      	b.n	fdd4 <isr+0x34>
		return -EBUSY;
    fdec:	f06f 000f 	mvn.w	r0, #15
    fdf0:	e7f0      	b.n	fdd4 <isr+0x34>
	return -EBUSY;
    fdf2:	f06f 000f 	mvn.w	r0, #15
    fdf6:	e7ed      	b.n	fdd4 <isr+0x34>
    fdf8:	4000d000 	.word	0x4000d000
    fdfc:	00000000 	.word	0x00000000

0000fe00 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    fe00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    fe04:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    fe06:	f7ff fd23 	bl	f850 <radio_is_done>
    fe0a:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    fe0c:	b9e4      	cbnz	r4, fe48 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    fe0e:	46a0      	mov	r8, r4
    fe10:	46a1      	mov	r9, r4
    fe12:	4627      	mov	r7, r4
    fe14:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    fe16:	25ff      	movs	r5, #255	; 0xff
    fe18:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    fe1a:	f7ff fcff 	bl	f81c <radio_status_reset>
	radio_tmr_status_reset();
    fe1e:	f7ff fded 	bl	f9fc <radio_tmr_status_reset>
	radio_filter_status_reset();
    fe22:	f7ff fdb3 	bl	f98c <radio_filter_status_reset>
	radio_ar_status_reset();
    fe26:	f7ff ff93 	bl	fd50 <radio_ar_status_reset>
	radio_rssi_status_reset();
    fe2a:	f7ff fd6b 	bl	f904 <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    fe2e:	4bb6      	ldr	r3, [pc, #728]	; (10108 <__kernel_ram_size+0x108>)
    fe30:	7c1b      	ldrb	r3, [r3, #16]
    fe32:	2b05      	cmp	r3, #5
    fe34:	f200 8456 	bhi.w	106e4 <__kernel_ram_size+0x6e4>
    fe38:	e8df f013 	tbh	[pc, r3, lsl #1]
    fe3c:	00e801f3 	.word	0x00e801f3
    fe40:	016e001c 	.word	0x016e001c
    fe44:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    fe48:	f7ff fd22 	bl	f890 <radio_crc_is_valid>
    fe4c:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    fe4e:	f7ff fda7 	bl	f9a0 <radio_filter_has_match>
    fe52:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    fe54:	f7ff fdae 	bl	f9b4 <radio_filter_match_get>
    fe58:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    fe5c:	f7ff ff82 	bl	fd64 <radio_ar_has_match>
    fe60:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    fe64:	f7ff ff6e 	bl	fd44 <radio_ar_match_get>
    fe68:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    fe6a:	f7ff fd53 	bl	f914 <radio_rssi_is_ready>
    fe6e:	fa5f f880 	uxtb.w	r8, r0
    fe72:	e7d2      	b.n	fe1a <isr+0x1a>
	_radio.state = STATE_RX;
    fe74:	4da4      	ldr	r5, [pc, #656]	; (10108 <__kernel_ram_size+0x108>)
    fe76:	2301      	movs	r3, #1
    fe78:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    fe7a:	f7ff fe97 	bl	fbac <radio_tmr_end_get>
    fe7e:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    fe82:	2096      	movs	r0, #150	; 0x96
    fe84:	f7ff fdc8 	bl	fa18 <radio_tmr_tifs_set>
	switch (_radio.role) {
    fe88:	7beb      	ldrb	r3, [r5, #15]
    fe8a:	3b01      	subs	r3, #1
    fe8c:	2b03      	cmp	r3, #3
    fe8e:	f200 80b7 	bhi.w	10000 <__kernel_ram_size>
    fe92:	e8df f003 	tbb	[pc, r3]
    fe96:	3202      	.short	0x3202
    fe98:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fe9a:	2300      	movs	r3, #0
    fe9c:	461a      	mov	r2, r3
    fe9e:	4619      	mov	r1, r3
    fea0:	4618      	mov	r0, r3
    fea2:	f7ff fd0f 	bl	f8c4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    fea6:	f7ff fd01 	bl	f8ac <radio_pkt_scratch_get>
    feaa:	f7ff fc89 	bl	f7c0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    feae:	f7ff fcc5 	bl	f83c <radio_is_ready>
    feb2:	b990      	cbnz	r0, feda <isr+0xda>
		if (ctrl_rl_enabled()) {
    feb4:	f00a f802 	bl	19ebc <ctrl_rl_enabled>
    feb8:	b9a8      	cbnz	r0, fee6 <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    feba:	2100      	movs	r1, #0
    febc:	4608      	mov	r0, r1
    febe:	f7ff fc91 	bl	f7e4 <radio_rx_chain_delay_get>
    fec2:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    fec4:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    fec6:	2100      	movs	r1, #0
    fec8:	4608      	mov	r0, r1
    feca:	f7ff fc87 	bl	f7dc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    fece:	1a20      	subs	r0, r4, r0
    fed0:	f7ff fe04 	bl	fadc <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    fed4:	f7ff fe58 	bl	fb88 <radio_tmr_end_capture>
    fed8:	e1a3      	b.n	10222 <__kernel_ram_size+0x222>
		LL_ASSERT(!radio_is_ready());
    feda:	4040      	eors	r0, r0
    fedc:	f380 8811 	msr	BASEPRI, r0
    fee0:	f04f 0004 	mov.w	r0, #4
    fee4:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    fee6:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    feea:	f009 fd63 	bl	199b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    feee:	4601      	mov	r1, r0
    fef0:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    fef4:	f7ff fef4 	bl	fce0 <radio_ar_configure>
    fef8:	e7df      	b.n	feba <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    fefa:	2300      	movs	r3, #0
    fefc:	461a      	mov	r2, r3
    fefe:	4619      	mov	r1, r3
    ff00:	4618      	mov	r0, r3
    ff02:	f7ff fcdf 	bl	f8c4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    ff06:	4b80      	ldr	r3, [pc, #512]	; (10108 <__kernel_ram_size+0x108>)
    ff08:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    ff0c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    ff10:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    ff14:	3008      	adds	r0, #8
    ff16:	f7ff fc53 	bl	f7c0 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    ff1a:	f7ff fc8f 	bl	f83c <radio_is_ready>
    ff1e:	b990      	cbnz	r0, ff46 <isr+0x146>
		if (ctrl_rl_enabled()) {
    ff20:	f009 ffcc 	bl	19ebc <ctrl_rl_enabled>
    ff24:	b9a8      	cbnz	r0, ff52 <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    ff26:	2100      	movs	r1, #0
    ff28:	4608      	mov	r0, r1
    ff2a:	f7ff fc5b 	bl	f7e4 <radio_rx_chain_delay_get>
    ff2e:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    ff30:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    ff32:	2100      	movs	r1, #0
    ff34:	4608      	mov	r0, r1
    ff36:	f7ff fc51 	bl	f7dc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ff3a:	1a20      	subs	r0, r4, r0
    ff3c:	f7ff fdce 	bl	fadc <radio_tmr_hcto_configure>
		radio_rssi_measure();
    ff40:	f7ff fcd0 	bl	f8e4 <radio_rssi_measure>
    ff44:	e16d      	b.n	10222 <__kernel_ram_size+0x222>
		LL_ASSERT(!radio_is_ready());
    ff46:	4040      	eors	r0, r0
    ff48:	f380 8811 	msr	BASEPRI, r0
    ff4c:	f04f 0004 	mov.w	r0, #4
    ff50:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    ff52:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    ff56:	f009 fd2d 	bl	199b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
    ff5a:	4601      	mov	r1, r0
    ff5c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    ff60:	f7ff febe 	bl	fce0 <radio_ar_configure>
    ff64:	e7df      	b.n	ff26 <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ff66:	4d68      	ldr	r5, [pc, #416]	; (10108 <__kernel_ram_size+0x108>)
    ff68:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    ff6c:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    ff70:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    ff74:	09d3      	lsrs	r3, r2, #7
    ff76:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    ff7a:	2100      	movs	r1, #0
    ff7c:	f000 0007 	and.w	r0, r0, #7
    ff80:	f7ff fca0 	bl	f8c4 <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    ff84:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    ff88:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    ff8c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    ff90:	3108      	adds	r1, #8
    ff92:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    ff96:	f002 fad3 	bl	12540 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    ff9a:	f7ff fc4f 	bl	f83c <radio_is_ready>
    ff9e:	bb20      	cbnz	r0, ffea <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    ffa0:	4d59      	ldr	r5, [pc, #356]	; (10108 <__kernel_ram_size+0x108>)
    ffa2:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    ffa6:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    ffaa:	2101      	movs	r1, #1
    ffac:	f000 0007 	and.w	r0, r0, #7
    ffb0:	f7ff fc18 	bl	f7e4 <radio_rx_chain_delay_get>
    ffb4:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ffb6:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    ffba:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    ffbe:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    ffc2:	2b02      	cmp	r3, #2
    ffc4:	d01a      	beq.n	fffc <isr+0x1fc>
    ffc6:	2b04      	cmp	r3, #4
    ffc8:	d015      	beq.n	fff6 <isr+0x1f6>
		return 40;
    ffca:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    ffcc:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    ffce:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    ffd2:	09c1      	lsrs	r1, r0, #7
    ffd4:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    ffd8:	f7ff fc00 	bl	f7dc <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    ffdc:	1a20      	subs	r0, r4, r0
    ffde:	f7ff fd7d 	bl	fadc <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    ffe2:	2001      	movs	r0, #1
    ffe4:	f002 fb0a 	bl	125fc <packet_tx_enqueue>
    ffe8:	e11b      	b.n	10222 <__kernel_ram_size+0x222>
		LL_ASSERT(!radio_is_ready());
    ffea:	4040      	eors	r0, r0
    ffec:	f380 8811 	msr	BASEPRI, r0
    fff0:	f04f 0004 	mov.w	r0, #4
    fff4:	df02      	svc	2
		return 376;
    fff6:	f44f 74bc 	mov.w	r4, #376	; 0x178
    fffa:	e7e7      	b.n	ffcc <isr+0x1cc>
		return 24;
    fffc:	2418      	movs	r4, #24
    fffe:	e7e5      	b.n	ffcc <isr+0x1cc>
		LL_ASSERT(0);
   10000:	4040      	eors	r0, r0
   10002:	f380 8811 	msr	BASEPRI, r0
   10006:	f04f 0004 	mov.w	r0, #4
   1000a:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
   1000c:	b144      	cbz	r4, 10020 <__kernel_ram_size+0x20>
	switch (_radio.role) {
   1000e:	4b3e      	ldr	r3, [pc, #248]	; (10108 <__kernel_ram_size+0x108>)
   10010:	7bdb      	ldrb	r3, [r3, #15]
   10012:	3b01      	subs	r3, #1
   10014:	2b03      	cmp	r3, #3
   10016:	d879      	bhi.n	1010c <__kernel_ram_size+0x10c>
   10018:	e8df f003 	tbb	[pc, r3]
   1001c:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
   10020:	2203      	movs	r2, #3
   10022:	4b39      	ldr	r3, [pc, #228]	; (10108 <__kernel_ram_size+0x108>)
   10024:	741a      	strb	r2, [r3, #16]
		radio_disable();
   10026:	f7ff fbef 	bl	f808 <radio_disable>
   1002a:	e0fa      	b.n	10222 <__kernel_ram_size+0x222>
		if (crc_ok) {
   1002c:	b94e      	cbnz	r6, 10042 <__kernel_ram_size+0x42>
			err = 1;
   1002e:	2001      	movs	r0, #1
		if (err) {
   10030:	2800      	cmp	r0, #0
   10032:	f000 80f6 	beq.w	10222 <__kernel_ram_size+0x222>
			_radio.state = STATE_CLOSE;
   10036:	2203      	movs	r2, #3
   10038:	4b33      	ldr	r3, [pc, #204]	; (10108 <__kernel_ram_size+0x108>)
   1003a:	741a      	strb	r2, [r3, #16]
			radio_disable();
   1003c:	f7ff fbe4 	bl	f808 <radio_disable>
   10040:	e0ef      	b.n	10222 <__kernel_ram_size+0x222>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
   10042:	f8cd 8000 	str.w	r8, [sp]
   10046:	462b      	mov	r3, r5
   10048:	464a      	mov	r2, r9
   1004a:	4651      	mov	r1, sl
   1004c:	4638      	mov	r0, r7
   1004e:	f007 fc37 	bl	178c0 <isr_rx_adv>
   10052:	e7ed      	b.n	10030 <__kernel_ram_size+0x30>
		rl_idx = devmatch_ok ?
   10054:	b9a7      	cbnz	r7, 10080 <__kernel_ram_size+0x80>
   10056:	f1b9 0f00 	cmp.w	r9, #0
   1005a:	d11b      	bne.n	10094 <__kernel_ram_size+0x94>
   1005c:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
   1005e:	b9f6      	cbnz	r6, 1009e <__kernel_ram_size+0x9e>
			err = 1;
   10060:	2001      	movs	r0, #1
		if (err) {
   10062:	2800      	cmp	r0, #0
   10064:	f000 80dd 	beq.w	10222 <__kernel_ram_size+0x222>
			_radio.state = STATE_CLOSE;
   10068:	4c27      	ldr	r4, [pc, #156]	; (10108 <__kernel_ram_size+0x108>)
   1006a:	2303      	movs	r3, #3
   1006c:	7423      	strb	r3, [r4, #16]
			radio_disable();
   1006e:	f7ff fbcb 	bl	f808 <radio_disable>
			_radio.scanner.state = 0;
   10072:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   10076:	f36f 0341 	bfc	r3, #1, #1
   1007a:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   1007e:	e0d0      	b.n	10222 <__kernel_ram_size+0x222>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
   10080:	4b21      	ldr	r3, [pc, #132]	; (10108 <__kernel_ram_size+0x108>)
   10082:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
   10086:	4651      	mov	r1, sl
   10088:	f3c0 1000 	ubfx	r0, r0, #4, #1
   1008c:	f009 fc9c 	bl	199c8 <ctrl_rl_idx>
   10090:	4604      	mov	r4, r0
   10092:	e7e4      	b.n	1005e <__kernel_ram_size+0x5e>
   10094:	4628      	mov	r0, r5
   10096:	f009 fccd 	bl	19a34 <ctrl_rl_irk_idx>
   1009a:	4604      	mov	r4, r0
   1009c:	e7df      	b.n	1005e <__kernel_ram_size+0x5e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   1009e:	4b1a      	ldr	r3, [pc, #104]	; (10108 <__kernel_ram_size+0x108>)
   100a0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100a4:	f013 0f10 	tst.w	r3, #16
   100a8:	d109      	bne.n	100be <__kernel_ram_size+0xbe>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
   100aa:	b91f      	cbnz	r7, 100b4 <__kernel_ram_size+0xb4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100ac:	2301      	movs	r3, #1
		if (crc_ok &&
   100ae:	b9db      	cbnz	r3, 100e8 <__kernel_ram_size+0xe8>
			err = 1;
   100b0:	2001      	movs	r0, #1
   100b2:	e7d6      	b.n	10062 <__kernel_ram_size+0x62>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100b4:	4621      	mov	r1, r4
   100b6:	4648      	mov	r0, r9
   100b8:	f009 fe1c 	bl	19cf4 <ctrl_rl_idx_allowed>
   100bc:	b980      	cbnz	r0, 100e0 <__kernel_ram_size+0xe0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   100be:	4b12      	ldr	r3, [pc, #72]	; (10108 <__kernel_ram_size+0x108>)
   100c0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100c4:	f013 0f10 	tst.w	r3, #16
   100c8:	d00c      	beq.n	100e4 <__kernel_ram_size+0xe4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
   100ca:	b10f      	cbz	r7, 100d0 <__kernel_ram_size+0xd0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100cc:	2301      	movs	r3, #1
   100ce:	e7ee      	b.n	100ae <__kernel_ram_size+0xae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
   100d0:	4620      	mov	r0, r4
   100d2:	f009 fcd9 	bl	19a88 <ctrl_irk_whitelisted>
   100d6:	b108      	cbz	r0, 100dc <__kernel_ram_size+0xdc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
   100d8:	2301      	movs	r3, #1
   100da:	e7e8      	b.n	100ae <__kernel_ram_size+0xae>
   100dc:	2300      	movs	r3, #0
   100de:	e7e6      	b.n	100ae <__kernel_ram_size+0xae>
   100e0:	2301      	movs	r3, #1
   100e2:	e7e4      	b.n	100ae <__kernel_ram_size+0xae>
   100e4:	2300      	movs	r3, #0
   100e6:	e7e2      	b.n	100ae <__kernel_ram_size+0xae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
   100e8:	f8cd 8004 	str.w	r8, [sp, #4]
   100ec:	9400      	str	r4, [sp, #0]
   100ee:	462b      	mov	r3, r5
   100f0:	464a      	mov	r2, r9
   100f2:	4651      	mov	r1, sl
   100f4:	4638      	mov	r0, r7
   100f6:	f006 ffb7 	bl	17068 <isr_rx_scan>
   100fa:	e7b2      	b.n	10062 <__kernel_ram_size+0x62>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
   100fc:	4642      	mov	r2, r8
   100fe:	4621      	mov	r1, r4
   10100:	4630      	mov	r0, r6
   10102:	f004 fabb 	bl	1467c <isr_rx_conn>
   10106:	e08c      	b.n	10222 <__kernel_ram_size+0x222>
   10108:	20000ff4 	.word	0x20000ff4
		LL_ASSERT(0);
   1010c:	4040      	eors	r0, r0
   1010e:	f380 8811 	msr	BASEPRI, r0
   10112:	f04f 0004 	mov.w	r0, #4
   10116:	df02      	svc	2
	switch (_radio.role) {
   10118:	4bb3      	ldr	r3, [pc, #716]	; (103e8 <__kernel_ram_size+0x3e8>)
   1011a:	7bdb      	ldrb	r3, [r3, #15]
   1011c:	b2db      	uxtb	r3, r3
   1011e:	2b04      	cmp	r3, #4
   10120:	f200 82b2 	bhi.w	10688 <__kernel_ram_size+0x688>
   10124:	e8df f013 	tbh	[pc, r3, lsl #1]
   10128:	000502a0 	.word	0x000502a0
   1012c:	00b5006f 	.word	0x00b5006f
   10130:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
   10132:	4bad      	ldr	r3, [pc, #692]	; (103e8 <__kernel_ram_size+0x3e8>)
   10134:	7c1b      	ldrb	r3, [r3, #16]
   10136:	2b03      	cmp	r3, #3
   10138:	d00f      	beq.n	1015a <__kernel_ram_size+0x15a>
		radio_filter_disable();
   1013a:	f7ff fc1d 	bl	f978 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
   1013e:	4aaa      	ldr	r2, [pc, #680]	; (103e8 <__kernel_ram_size+0x3e8>)
   10140:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
   10144:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   10148:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
   1014c:	3320      	adds	r3, #32
   1014e:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
   10150:	7c12      	ldrb	r2, [r2, #16]
   10152:	2a03      	cmp	r2, #3
   10154:	d00f      	beq.n	10176 <__kernel_ram_size+0x176>
	u32_t dont_close = 0;
   10156:	2300      	movs	r3, #0
   10158:	e060      	b.n	1021c <__kernel_ram_size+0x21c>
	    (_radio.advertiser.chan_map_current != 0)) {
   1015a:	4ba3      	ldr	r3, [pc, #652]	; (103e8 <__kernel_ram_size+0x3e8>)
   1015c:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
   10160:	f013 0f0e 	tst.w	r3, #14
   10164:	d0e9      	beq.n	1013a <__kernel_ram_size+0x13a>
		adv_setup();
   10166:	f002 fca5 	bl	12ab4 <adv_setup>
		radio_tx_enable();
   1016a:	f7ff fb47 	bl	f7fc <radio_tx_enable>
		radio_tmr_end_capture();
   1016e:	f7ff fd0b 	bl	fb88 <radio_tmr_end_capture>
		dont_close = 1;
   10172:	2301      	movs	r3, #1
   10174:	e052      	b.n	1021c <__kernel_ram_size+0x21c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
   10176:	79db      	ldrb	r3, [r3, #7]
   10178:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
   1017c:	2b01      	cmp	r3, #1
   1017e:	d040      	beq.n	10202 <__kernel_ram_size+0x202>
			rand_isr_get(sizeof(random_delay), &random_delay);
   10180:	f10d 0127 	add.w	r1, sp, #39	; 0x27
   10184:	2001      	movs	r0, #1
   10186:	f000 fb7d 	bl	10884 <rand_isr_get>
			random_delay %= 10;
   1018a:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
   1018e:	4a97      	ldr	r2, [pc, #604]	; (103ec <__kernel_ram_size+0x3ec>)
   10190:	fba2 1203 	umull	r1, r2, r2, r3
   10194:	08d2      	lsrs	r2, r2, #3
   10196:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1019a:	0051      	lsls	r1, r2, #1
   1019c:	1a5a      	subs	r2, r3, r1
   1019e:	b2d2      	uxtb	r2, r2
			random_delay += 1;
   101a0:	3201      	adds	r2, #1
   101a2:	b2d2      	uxtb	r2, r2
   101a4:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
   101a8:	b2d2      	uxtb	r2, r2
   101aa:	4891      	ldr	r0, [pc, #580]	; (103f0 <__kernel_ram_size+0x3f0>)
   101ac:	fba2 0100 	umull	r0, r1, r2, r0
   101b0:	23e8      	movs	r3, #232	; 0xe8
   101b2:	fb03 1102 	mla	r1, r3, r2, r1
   101b6:	a38a      	add	r3, pc, #552	; (adr r3, 103e0 <__kernel_ram_size+0x3e0>)
   101b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   101bc:	f7f0 ff9e 	bl	10fc <__aeabi_uldivmod>
			ticker_status =
   101c0:	f640 63a2 	movw	r3, #3746	; 0xea2
   101c4:	9306      	str	r3, [sp, #24]
   101c6:	4b8b      	ldr	r3, [pc, #556]	; (103f4 <__kernel_ram_size+0x3f4>)
   101c8:	9305      	str	r3, [sp, #20]
   101ca:	2400      	movs	r4, #0
   101cc:	9404      	str	r4, [sp, #16]
   101ce:	9403      	str	r4, [sp, #12]
   101d0:	9402      	str	r4, [sp, #8]
   101d2:	9401      	str	r4, [sp, #4]
   101d4:	9400      	str	r4, [sp, #0]
   101d6:	b283      	uxth	r3, r0
   101d8:	2205      	movs	r2, #5
   101da:	4621      	mov	r1, r4
   101dc:	4620      	mov	r0, r4
   101de:	f000 fe1d 	bl	10e1c <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   101e2:	b130      	cbz	r0, 101f2 <__kernel_ram_size+0x1f2>
   101e4:	2802      	cmp	r0, #2
   101e6:	d004      	beq.n	101f2 <__kernel_ram_size+0x1f2>
   101e8:	4b7f      	ldr	r3, [pc, #508]	; (103e8 <__kernel_ram_size+0x3e8>)
   101ea:	7b9b      	ldrb	r3, [r3, #14]
   101ec:	b2db      	uxtb	r3, r3
   101ee:	2b05      	cmp	r3, #5
   101f0:	d101      	bne.n	101f6 <__kernel_ram_size+0x1f6>
	u32_t dont_close = 0;
   101f2:	2300      	movs	r3, #0
   101f4:	e012      	b.n	1021c <__kernel_ram_size+0x21c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   101f6:	4040      	eors	r0, r0
   101f8:	f380 8811 	msr	BASEPRI, r0
   101fc:	f04f 0004 	mov.w	r0, #4
   10200:	df02      	svc	2
	u32_t dont_close = 0;
   10202:	2300      	movs	r3, #0
   10204:	e00a      	b.n	1021c <__kernel_ram_size+0x21c>
	if (_radio.state == STATE_CLOSE) {
   10206:	4b78      	ldr	r3, [pc, #480]	; (103e8 <__kernel_ram_size+0x3e8>)
   10208:	7c1b      	ldrb	r3, [r3, #16]
   1020a:	2b03      	cmp	r3, #3
   1020c:	d00c      	beq.n	10228 <__kernel_ram_size+0x228>
		radio_filter_disable();
   1020e:	f7ff fbb3 	bl	f978 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
   10212:	4b75      	ldr	r3, [pc, #468]	; (103e8 <__kernel_ram_size+0x3e8>)
   10214:	7c1b      	ldrb	r3, [r3, #16]
   10216:	2b05      	cmp	r3, #5
   10218:	d031      	beq.n	1027e <__kernel_ram_size+0x27e>
	u32_t dont_close = 0;
   1021a:	2300      	movs	r3, #0
	if (dont_close) {
   1021c:	2b00      	cmp	r3, #0
   1021e:	f000 8249 	beq.w	106b4 <__kernel_ram_size+0x6b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
   10222:	b00a      	add	sp, #40	; 0x28
   10224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
   10228:	2096      	movs	r0, #150	; 0x96
   1022a:	f7ff fbf5 	bl	fa18 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
   1022e:	2300      	movs	r3, #0
   10230:	461a      	mov	r2, r3
   10232:	4619      	mov	r1, r3
   10234:	4618      	mov	r0, r3
   10236:	f7ff fb45 	bl	f8c4 <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
   1023a:	4b6b      	ldr	r3, [pc, #428]	; (103e8 <__kernel_ram_size+0x3e8>)
   1023c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   10240:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   10244:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   10248:	3008      	adds	r0, #8
   1024a:	f7ff fab9 	bl	f7c0 <radio_pkt_rx_set>
		radio_rssi_measure();
   1024e:	f7ff fb49 	bl	f8e4 <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
   10252:	f009 fe33 	bl	19ebc <ctrl_rl_enabled>
   10256:	b940      	cbnz	r0, 1026a <__kernel_ram_size+0x26a>
		_radio.state = STATE_RX;
   10258:	2401      	movs	r4, #1
   1025a:	4b63      	ldr	r3, [pc, #396]	; (103e8 <__kernel_ram_size+0x3e8>)
   1025c:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
   1025e:	f7ff fac7 	bl	f7f0 <radio_rx_enable>
		radio_tmr_end_capture();
   10262:	f7ff fc91 	bl	fb88 <radio_tmr_end_capture>
		dont_close = 1;
   10266:	4623      	mov	r3, r4
   10268:	e7d8      	b.n	1021c <__kernel_ram_size+0x21c>
			u8_t count, *irks = ctrl_irks_get(&count);
   1026a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
   1026e:	f009 fba1 	bl	199b4 <ctrl_irks_get>
			radio_ar_configure(count, irks);
   10272:	4601      	mov	r1, r0
   10274:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
   10278:	f7ff fd32 	bl	fce0 <radio_ar_configure>
   1027c:	e7ec      	b.n	10258 <__kernel_ram_size+0x258>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1027e:	2400      	movs	r4, #0
   10280:	9400      	str	r4, [sp, #0]
   10282:	4623      	mov	r3, r4
   10284:	2204      	movs	r2, #4
   10286:	4621      	mov	r1, r4
   10288:	4620      	mov	r0, r4
   1028a:	f000 fe15 	bl	10eb8 <ticker_stop>
	u32_t dont_close = 0;
   1028e:	4623      	mov	r3, r4
   10290:	e7c4      	b.n	1021c <__kernel_ram_size+0x21c>
	if (_radio.conn_curr == 0) {
   10292:	4b55      	ldr	r3, [pc, #340]	; (103e8 <__kernel_ram_size+0x3e8>)
   10294:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   10298:	2800      	cmp	r0, #0
   1029a:	f000 81fb 	beq.w	10694 <__kernel_ram_size+0x694>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
   1029e:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
   102a2:	b141      	cbz	r1, 102b6 <__kernel_ram_size+0x2b6>
   102a4:	7bdb      	ldrb	r3, [r3, #15]
   102a6:	b2db      	uxtb	r3, r3
   102a8:	2b03      	cmp	r3, #3
   102aa:	d046      	beq.n	1033a <__kernel_ram_size+0x33a>
   102ac:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   102b0:	f013 0f01 	tst.w	r3, #1
   102b4:	d141      	bne.n	1033a <__kernel_ram_size+0x33a>
	latency_event = _radio.conn_curr->latency_event;
   102b6:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
   102ba:	f108 0401 	add.w	r4, r8, #1
   102be:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
   102c0:	4b49      	ldr	r3, [pc, #292]	; (103e8 <__kernel_ram_size+0x3e8>)
   102c2:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
   102c6:	2b00      	cmp	r3, #0
   102c8:	f000 80b8 	beq.w	1043c <__kernel_ram_size+0x43c>
		if (_radio.role == ROLE_SLAVE) {
   102cc:	4b46      	ldr	r3, [pc, #280]	; (103e8 <__kernel_ram_size+0x3e8>)
   102ce:	7bdb      	ldrb	r3, [r3, #15]
   102d0:	b2db      	uxtb	r3, r3
   102d2:	2b03      	cmp	r3, #3
   102d4:	d03c      	beq.n	10350 <__kernel_ram_size+0x350>
		} else if (reason_peer) {
   102d6:	2900      	cmp	r1, #0
   102d8:	f000 80ad 	beq.w	10436 <__kernel_ram_size+0x436>
			_radio.conn_curr->master.terminate_ack = 1;
   102dc:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   102e0:	f043 0301 	orr.w	r3, r3, #1
   102e4:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
   102e8:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   102ea:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
   102ec:	4b3e      	ldr	r3, [pc, #248]	; (103e8 <__kernel_ram_size+0x3e8>)
   102ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   102f2:	2200      	movs	r2, #0
   102f4:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
   102f6:	4b3c      	ldr	r3, [pc, #240]	; (103e8 <__kernel_ram_size+0x3e8>)
   102f8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   102fc:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
   10300:	2b00      	cmp	r3, #0
   10302:	f000 80d8 	beq.w	104b6 <__kernel_ram_size+0x4b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
   10306:	429c      	cmp	r4, r3
   10308:	f080 80c9 	bcs.w	1049e <__kernel_ram_size+0x49e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
   1030c:	1b1b      	subs	r3, r3, r4
   1030e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
   10312:	4b35      	ldr	r3, [pc, #212]	; (103e8 <__kernel_ram_size+0x3e8>)
   10314:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10318:	2100      	movs	r1, #0
   1031a:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
   1031c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10320:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   10324:	2a06      	cmp	r2, #6
   10326:	f240 8130 	bls.w	1058a <__kernel_ram_size+0x58a>
			else if (_radio.role == ROLE_SLAVE) {
   1032a:	4a2f      	ldr	r2, [pc, #188]	; (103e8 <__kernel_ram_size+0x3e8>)
   1032c:	7bd2      	ldrb	r2, [r2, #15]
   1032e:	b2d2      	uxtb	r2, r2
   10330:	2a03      	cmp	r2, #3
   10332:	f000 80a2 	beq.w	1047a <__kernel_ram_size+0x47a>
	force = 0;
   10336:	2700      	movs	r7, #0
   10338:	e0be      	b.n	104b8 <__kernel_ram_size+0x4b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
   1033a:	f004 f90b 	bl	14554 <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
   1033e:	4c2a      	ldr	r4, [pc, #168]	; (103e8 <__kernel_ram_size+0x3e8>)
   10340:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   10344:	f002 f9b2 	bl	126ac <connection_release>
		_radio.conn_curr = NULL;
   10348:	2300      	movs	r3, #0
   1034a:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   1034e:	e765      	b.n	1021c <__kernel_ram_size+0x21c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   10350:	f7ff fc0e 	bl	fb70 <radio_tmr_aa_restore>
   10354:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
   10356:	f7ff fc11 	bl	fb7c <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
   1035a:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
   1035e:	4b22      	ldr	r3, [pc, #136]	; (103e8 <__kernel_ram_size+0x3e8>)
   10360:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
   10364:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
   10368:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
   1036c:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
   10370:	2b02      	cmp	r3, #2
   10372:	d031      	beq.n	103d8 <__kernel_ram_size+0x3d8>
   10374:	2b04      	cmp	r3, #4
   10376:	d02c      	beq.n	103d2 <__kernel_ram_size+0x3d2>
		return 40;
   10378:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
   1037a:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
   1037c:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
   1037e:	45ba      	cmp	sl, r7
   10380:	d83c      	bhi.n	103fc <__kernel_ram_size+0x3fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
   10382:	4e1d      	ldr	r6, [pc, #116]	; (103f8 <__kernel_ram_size+0x3f8>)
   10384:	a316      	add	r3, pc, #88	; (adr r3, 103e0 <__kernel_ram_size+0x3e0>)
   10386:	e9d3 2300 	ldrd	r2, r3, [r3]
   1038a:	fba0 0106 	umull	r0, r1, r0, r6
   1038e:	f7f0 feb5 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   10392:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
   10394:	eba7 000a 	sub.w	r0, r7, sl
   10398:	a311      	add	r3, pc, #68	; (adr r3, 103e0 <__kernel_ram_size+0x3e0>)
   1039a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1039e:	fba0 0106 	umull	r0, r1, r0, r6
   103a2:	f7f0 feab 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   103a6:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
   103a8:	2200      	movs	r2, #0
   103aa:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
   103ae:	4b0e      	ldr	r3, [pc, #56]	; (103e8 <__kernel_ram_size+0x3e8>)
   103b0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   103b4:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
   103b6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   103ba:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   103be:	b38a      	cbz	r2, 10424 <__kernel_ram_size+0x424>
				if (pdu_data_tx->len ||
   103c0:	7952      	ldrb	r2, [r2, #5]
   103c2:	b91a      	cbnz	r2, 103cc <__kernel_ram_size+0x3cc>
				    _radio.conn_curr->packet_tx_head_offset) {
   103c4:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
   103c8:	2a00      	cmp	r2, #0
   103ca:	d08f      	beq.n	102ec <__kernel_ram_size+0x2ec>
					_radio.conn_curr->latency_event = 0;
   103cc:	2200      	movs	r2, #0
   103ce:	855a      	strh	r2, [r3, #42]	; 0x2a
   103d0:	e78c      	b.n	102ec <__kernel_ram_size+0x2ec>
		return 376;
   103d2:	f44f 76bc 	mov.w	r6, #376	; 0x178
   103d6:	e7d0      	b.n	1037a <__kernel_ram_size+0x37a>
		return 24;
   103d8:	2618      	movs	r6, #24
   103da:	e7ce      	b.n	1037a <__kernel_ram_size+0x37a>
   103dc:	f3af 8000 	nop.w
   103e0:	1afd498d 	.word	0x1afd498d
   103e4:	00000007 	.word	0x00000007
   103e8:	20000ff4 	.word	0x20000ff4
   103ec:	cccccccd 	.word	0xcccccccd
   103f0:	d4a51000 	.word	0xd4a51000
   103f4:	00011dfd 	.word	0x00011dfd
   103f8:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
   103fc:	4faa      	ldr	r7, [pc, #680]	; (106a8 <__kernel_ram_size+0x6a8>)
   103fe:	a3a8      	add	r3, pc, #672	; (adr r3, 106a0 <__kernel_ram_size+0x6a0>)
   10400:	e9d3 2300 	ldrd	r2, r3, [r3]
   10404:	fbaa 0107 	umull	r0, r1, sl, r7
   10408:	f7f0 fe78 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_plus =
   1040c:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
   1040e:	f106 0030 	add.w	r0, r6, #48	; 0x30
   10412:	a3a3      	add	r3, pc, #652	; (adr r3, 106a0 <__kernel_ram_size+0x6a0>)
   10414:	e9d3 2300 	ldrd	r2, r3, [r3]
   10418:	fba0 0107 	umull	r0, r1, r0, r7
   1041c:	f7f0 fe6e 	bl	10fc <__aeabi_uldivmod>
				ticks_drift_minus =
   10420:	b286      	uxth	r6, r0
   10422:	e7c1      	b.n	103a8 <__kernel_ram_size+0x3a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
   10424:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
   10428:	f012 0f01 	tst.w	r2, #1
   1042c:	f43f af5e 	beq.w	102ec <__kernel_ram_size+0x2ec>
					_radio.conn_curr->latency;
   10430:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
   10432:	855a      	strh	r2, [r3, #42]	; 0x2a
   10434:	e75a      	b.n	102ec <__kernel_ram_size+0x2ec>
	ticks_drift_minus = 0;
   10436:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
   10438:	4635      	mov	r5, r6
   1043a:	e757      	b.n	102ec <__kernel_ram_size+0x2ec>
	else if (_radio.conn_curr->connect_expire) {
   1043c:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
   1043e:	b195      	cbz	r5, 10466 <__kernel_ram_size+0x466>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
   10440:	42ac      	cmp	r4, r5
   10442:	d204      	bcs.n	1044e <__kernel_ram_size+0x44e>
			_radio.conn_curr->connect_expire -= elapsed_event;
   10444:	1b2d      	subs	r5, r5, r4
   10446:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
   10448:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
   1044a:	462e      	mov	r6, r5
   1044c:	e753      	b.n	102f6 <__kernel_ram_size+0x2f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
   1044e:	213e      	movs	r1, #62	; 0x3e
   10450:	f004 f880 	bl	14554 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10454:	4c95      	ldr	r4, [pc, #596]	; (106ac <__kernel_ram_size+0x6ac>)
   10456:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1045a:	f002 f927 	bl	126ac <connection_release>
			_radio.conn_curr = NULL;
   1045e:	2300      	movs	r3, #0
   10460:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   10464:	e6da      	b.n	1021c <__kernel_ram_size+0x21c>
		if (!_radio.conn_curr->supervision_expire) {
   10466:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
   1046a:	b926      	cbnz	r6, 10476 <__kernel_ram_size+0x476>
				_radio.conn_curr->supervision_reload;
   1046c:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   1046e:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
   10472:	4635      	mov	r5, r6
   10474:	e73f      	b.n	102f6 <__kernel_ram_size+0x2f6>
	ticks_drift_minus = 0;
   10476:	462e      	mov	r6, r5
   10478:	e73d      	b.n	102f6 <__kernel_ram_size+0x2f6>
				if (latency_event != 0) {
   1047a:	f1b8 0f00 	cmp.w	r8, #0
   1047e:	f040 8086 	bne.w	1058e <__kernel_ram_size+0x58e>
					force = _radio.conn_curr->slave.force & 0x01;
   10482:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
   10484:	087a      	lsrs	r2, r7, #1
   10486:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
   10488:	f017 0701 	ands.w	r7, r7, #1
   1048c:	d014      	beq.n	104b8 <__kernel_ram_size+0x4b8>
						_radio.conn_curr->slave.force |=
   1048e:	4b87      	ldr	r3, [pc, #540]	; (106ac <__kernel_ram_size+0x6ac>)
   10490:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10494:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   10496:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   1049a:	66d3      	str	r3, [r2, #108]	; 0x6c
   1049c:	e00c      	b.n	104b8 <__kernel_ram_size+0x4b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
   1049e:	2108      	movs	r1, #8
   104a0:	f004 f858 	bl	14554 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   104a4:	4c81      	ldr	r4, [pc, #516]	; (106ac <__kernel_ram_size+0x6ac>)
   104a6:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   104aa:	f002 f8ff 	bl	126ac <connection_release>
			_radio.conn_curr = NULL;
   104ae:	2300      	movs	r3, #0
   104b0:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   104b4:	e6b2      	b.n	1021c <__kernel_ram_size+0x21c>
	force = 0;
   104b6:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
   104b8:	4b7c      	ldr	r3, [pc, #496]	; (106ac <__kernel_ram_size+0x6ac>)
   104ba:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   104be:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
   104c2:	b123      	cbz	r3, 104ce <__kernel_ram_size+0x4ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
   104c4:	429c      	cmp	r4, r3
   104c6:	d264      	bcs.n	10592 <__kernel_ram_size+0x592>
			_radio.conn_curr->procedure_expire -= elapsed_event;
   104c8:	1b1b      	subs	r3, r3, r4
   104ca:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
   104ce:	4b77      	ldr	r3, [pc, #476]	; (106ac <__kernel_ram_size+0x6ac>)
   104d0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   104d4:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
   104d8:	b123      	cbz	r3, 104e4 <__kernel_ram_size+0x4e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
   104da:	429c      	cmp	r4, r3
   104dc:	d265      	bcs.n	105aa <__kernel_ram_size+0x5aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
   104de:	1b1b      	subs	r3, r3, r4
   104e0:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
   104e4:	4b71      	ldr	r3, [pc, #452]	; (106ac <__kernel_ram_size+0x6ac>)
   104e6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   104ea:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
   104ee:	b12b      	cbz	r3, 104fc <__kernel_ram_size+0x4fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
   104f0:	429c      	cmp	r4, r3
   104f2:	f080 8090 	bcs.w	10616 <__kernel_ram_size+0x616>
			_radio.conn_curr->appto_expire -= elapsed_event;
   104f6:	1b1b      	subs	r3, r3, r4
   104f8:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   104fc:	4b6b      	ldr	r3, [pc, #428]	; (106ac <__kernel_ram_size+0x6ac>)
   104fe:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10502:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   10506:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   1050a:	4299      	cmp	r1, r3
   1050c:	d006      	beq.n	1051c <__kernel_ram_size+0x51c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
   1050e:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
   10512:	3b01      	subs	r3, #1
   10514:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
   10516:	2b01      	cmp	r3, #1
   10518:	f240 809b 	bls.w	10652 <__kernel_ram_size+0x652>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
   1051c:	b937      	cbnz	r7, 1052c <__kernel_ram_size+0x52c>
   1051e:	4b63      	ldr	r3, [pc, #396]	; (106ac <__kernel_ram_size+0x6ac>)
   10520:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10524:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10526:	4598      	cmp	r8, r3
   10528:	f000 8096 	beq.w	10658 <__kernel_ram_size+0x658>
		lazy = _radio.conn_curr->latency_event + 1;
   1052c:	4b5f      	ldr	r3, [pc, #380]	; (106ac <__kernel_ram_size+0x6ac>)
   1052e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10532:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
   10534:	3301      	adds	r3, #1
   10536:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
   10538:	b925      	cbnz	r5, 10544 <__kernel_ram_size+0x544>
   1053a:	b91e      	cbnz	r6, 10544 <__kernel_ram_size+0x544>
   1053c:	b913      	cbnz	r3, 10544 <__kernel_ram_size+0x544>
	    (lazy != 0) || (force != 0)) {
   1053e:	2f00      	cmp	r7, #0
   10540:	f000 80aa 	beq.w	10698 <__kernel_ram_size+0x698>
				    _radio.conn_curr->handle;
   10544:	4a59      	ldr	r2, [pc, #356]	; (106ac <__kernel_ram_size+0x6ac>)
   10546:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
   1054a:	f892 4020 	ldrb.w	r4, [r2, #32]
   1054e:	3407      	adds	r4, #7
   10550:	b2e4      	uxtb	r4, r4
		ticker_status =
   10552:	9406      	str	r4, [sp, #24]
   10554:	4a56      	ldr	r2, [pc, #344]	; (106b0 <__kernel_ram_size+0x6b0>)
   10556:	9205      	str	r2, [sp, #20]
   10558:	9704      	str	r7, [sp, #16]
   1055a:	9303      	str	r3, [sp, #12]
   1055c:	2000      	movs	r0, #0
   1055e:	9002      	str	r0, [sp, #8]
   10560:	9001      	str	r0, [sp, #4]
   10562:	9600      	str	r6, [sp, #0]
   10564:	462b      	mov	r3, r5
   10566:	4622      	mov	r2, r4
   10568:	4601      	mov	r1, r0
   1056a:	f000 fc57 	bl	10e1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1056e:	4603      	mov	r3, r0
   10570:	2800      	cmp	r0, #0
   10572:	f43f ae53 	beq.w	1021c <__kernel_ram_size+0x21c>
   10576:	2802      	cmp	r0, #2
   10578:	f000 8090 	beq.w	1069c <__kernel_ram_size+0x69c>
   1057c:	4b4b      	ldr	r3, [pc, #300]	; (106ac <__kernel_ram_size+0x6ac>)
   1057e:	7b9b      	ldrb	r3, [r3, #14]
   10580:	b2db      	uxtb	r3, r3
   10582:	429c      	cmp	r4, r3
   10584:	d16a      	bne.n	1065c <__kernel_ram_size+0x65c>
	u32_t dont_close = 0;
   10586:	2300      	movs	r3, #0
   10588:	e648      	b.n	1021c <__kernel_ram_size+0x21c>
				force = 1;
   1058a:	2701      	movs	r7, #1
   1058c:	e794      	b.n	104b8 <__kernel_ram_size+0x4b8>
					force = 1;
   1058e:	2701      	movs	r7, #1
   10590:	e792      	b.n	104b8 <__kernel_ram_size+0x4b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
   10592:	2122      	movs	r1, #34	; 0x22
   10594:	f003 ffde 	bl	14554 <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
   10598:	4c44      	ldr	r4, [pc, #272]	; (106ac <__kernel_ram_size+0x6ac>)
   1059a:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   1059e:	f002 f885 	bl	126ac <connection_release>
			_radio.conn_curr = NULL;
   105a2:	2300      	movs	r3, #0
   105a4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
   105a8:	e638      	b.n	1021c <__kernel_ram_size+0x21c>
			_radio.conn_curr->apto_expire = 0;
   105aa:	2300      	movs	r3, #0
   105ac:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
   105b0:	4b3e      	ldr	r3, [pc, #248]	; (106ac <__kernel_ram_size+0x6ac>)
   105b2:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   105b6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   105ba:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   105bc:	429a      	cmp	r2, r3
   105be:	d318      	bcc.n	105f2 <__kernel_ram_size+0x5f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
   105c0:	4b3a      	ldr	r3, [pc, #232]	; (106ac <__kernel_ram_size+0x6ac>)
   105c2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   105c6:	1ad3      	subs	r3, r2, r3
   105c8:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
   105ca:	2b01      	cmp	r3, #1
   105cc:	d91b      	bls.n	10606 <__kernel_ram_size+0x606>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
   105ce:	4b37      	ldr	r3, [pc, #220]	; (106ac <__kernel_ram_size+0x6ac>)
   105d0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   105d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   105d8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   105dc:	b1ab      	cbz	r3, 1060a <__kernel_ram_size+0x60a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   105de:	4a33      	ldr	r2, [pc, #204]	; (106ac <__kernel_ram_size+0x6ac>)
   105e0:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
   105e4:	8c12      	ldrh	r2, [r2, #32]
   105e6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
   105e8:	220a      	movs	r2, #10
   105ea:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
   105ec:	f003 ff3e 	bl	1446c <packet_rx_enqueue>
   105f0:	e778      	b.n	104e4 <__kernel_ram_size+0x4e4>
		return (_radio.packet_rx_count -
   105f2:	492e      	ldr	r1, [pc, #184]	; (106ac <__kernel_ram_size+0x6ac>)
   105f4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   105f8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   105fc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   105fe:	fa52 f383 	uxtab	r3, r2, r3
   10602:	b2db      	uxtb	r3, r3
   10604:	e7e1      	b.n	105ca <__kernel_ram_size+0x5ca>
		return 0;
   10606:	2300      	movs	r3, #0
   10608:	e7e8      	b.n	105dc <__kernel_ram_size+0x5dc>
			LL_ASSERT(radio_pdu_node_rx);
   1060a:	4040      	eors	r0, r0
   1060c:	f380 8811 	msr	BASEPRI, r0
   10610:	f04f 0004 	mov.w	r0, #4
   10614:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   10616:	2300      	movs	r3, #0
   10618:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
   1061c:	4b23      	ldr	r3, [pc, #140]	; (106ac <__kernel_ram_size+0x6ac>)
   1061e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   10622:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
   10626:	2a00      	cmp	r2, #0
   10628:	f47f af68 	bne.w	104fc <__kernel_ram_size+0x4fc>
			    (_radio.conn_curr->llcp_req ==
   1062c:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
   10630:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
   10634:	4291      	cmp	r1, r2
   10636:	f47f af61 	bne.w	104fc <__kernel_ram_size+0x4fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
   1063a:	2207      	movs	r2, #7
   1063c:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
   10640:	4b1a      	ldr	r3, [pc, #104]	; (106ac <__kernel_ram_size+0x6ac>)
   10642:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   10646:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   1064a:	3b01      	subs	r3, #1
   1064c:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   10650:	e754      	b.n	104fc <__kernel_ram_size+0x4fc>
		_radio.conn_curr->latency_event = 0;
   10652:	2300      	movs	r3, #0
   10654:	8553      	strh	r3, [r2, #42]	; 0x2a
   10656:	e761      	b.n	1051c <__kernel_ram_size+0x51c>
	lazy = 0;
   10658:	2300      	movs	r3, #0
   1065a:	e76d      	b.n	10538 <__kernel_ram_size+0x538>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1065c:	4040      	eors	r0, r0
   1065e:	f380 8811 	msr	BASEPRI, r0
   10662:	f04f 0004 	mov.w	r0, #4
   10666:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
   10668:	4b10      	ldr	r3, [pc, #64]	; (106ac <__kernel_ram_size+0x6ac>)
   1066a:	7c1b      	ldrb	r3, [r3, #16]
   1066c:	3b04      	subs	r3, #4
   1066e:	b2db      	uxtb	r3, r3
   10670:	2b01      	cmp	r3, #1
   10672:	d803      	bhi.n	1067c <__kernel_ram_size+0x67c>
		_radio.state = STATE_NONE;
   10674:	2200      	movs	r2, #0
   10676:	4b0d      	ldr	r3, [pc, #52]	; (106ac <__kernel_ram_size+0x6ac>)
   10678:	741a      	strb	r2, [r3, #16]
   1067a:	e5d2      	b.n	10222 <__kernel_ram_size+0x222>
		LL_ASSERT((_radio.state == STATE_STOP) ||
   1067c:	4040      	eors	r0, r0
   1067e:	f380 8811 	msr	BASEPRI, r0
   10682:	f04f 0004 	mov.w	r0, #4
   10686:	df02      	svc	2
		LL_ASSERT(0);
   10688:	4040      	eors	r0, r0
   1068a:	f380 8811 	msr	BASEPRI, r0
   1068e:	f04f 0004 	mov.w	r0, #4
   10692:	df02      	svc	2
	u32_t dont_close = 0;
   10694:	2300      	movs	r3, #0
   10696:	e5c1      	b.n	1021c <__kernel_ram_size+0x21c>
   10698:	2300      	movs	r3, #0
   1069a:	e5bf      	b.n	1021c <__kernel_ram_size+0x21c>
   1069c:	2300      	movs	r3, #0
   1069e:	e5bd      	b.n	1021c <__kernel_ram_size+0x21c>
   106a0:	1afd498d 	.word	0x1afd498d
   106a4:	00000007 	.word	0x00000007
   106a8:	3b9aca00 	.word	0x3b9aca00
   106ac:	20000ff4 	.word	0x20000ff4
   106b0:	00011e1d 	.word	0x00011e1d
	_radio.role = ROLE_NONE;
   106b4:	4d0e      	ldr	r5, [pc, #56]	; (106f0 <__kernel_ram_size+0x6f0>)
   106b6:	2400      	movs	r4, #0
   106b8:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
   106ba:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
   106bc:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
   106be:	f7ff fa05 	bl	facc <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
   106c2:	4623      	mov	r3, r4
   106c4:	4622      	mov	r2, r4
   106c6:	4621      	mov	r1, r4
   106c8:	4620      	mov	r0, r4
   106ca:	f001 fe29 	bl	12320 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
   106ce:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
   106d0:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
   106d2:	685b      	ldr	r3, [r3, #4]
   106d4:	4621      	mov	r1, r4
   106d6:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   106d8:	2201      	movs	r2, #1
   106da:	4611      	mov	r1, r2
   106dc:	4620      	mov	r0, r4
   106de:	f7fe fcff 	bl	f0e0 <mayfly_enable>
   106e2:	e59e      	b.n	10222 <__kernel_ram_size+0x222>
		LL_ASSERT(0);
   106e4:	4040      	eors	r0, r0
   106e6:	f380 8811 	msr	BASEPRI, r0
   106ea:	f04f 0004 	mov.w	r0, #4
   106ee:	df02      	svc	2
   106f0:	20000ff4 	.word	0x20000ff4

000106f4 <init>:
{
   106f4:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   106f6:	1d1c      	adds	r4, r3, #4
   106f8:	42a2      	cmp	r2, r4
   106fa:	d90e      	bls.n	1071a <init+0x26>
	*rng = (struct rand *)context;
   106fc:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
   106fe:	3a04      	subs	r2, #4
   10700:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
   10702:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
   10704:	2300      	movs	r3, #0
   10706:	70cb      	strb	r3, [r1, #3]
   10708:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
   1070a:	4b0c      	ldr	r3, [pc, #48]	; (1073c <init+0x48>)
   1070c:	681b      	ldr	r3, [r3, #0]
   1070e:	b153      	cbz	r3, 10726 <init+0x32>
   10710:	4b0b      	ldr	r3, [pc, #44]	; (10740 <init+0x4c>)
   10712:	681b      	ldr	r3, [r3, #0]
   10714:	b13b      	cbz	r3, 10726 <init+0x32>
}
   10716:	bc10      	pop	{r4}
   10718:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
   1071a:	4040      	eors	r0, r0
   1071c:	f380 8811 	msr	BASEPRI, r0
   10720:	f04f 0004 	mov.w	r0, #4
   10724:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
   10726:	4b07      	ldr	r3, [pc, #28]	; (10744 <init+0x50>)
   10728:	2201      	movs	r2, #1
   1072a:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
   1072e:	2100      	movs	r1, #0
   10730:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
   10734:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
   10738:	601a      	str	r2, [r3, #0]
}
   1073a:	e7ec      	b.n	10716 <init+0x22>
   1073c:	20000f44 	.word	0x20000f44
   10740:	20000f48 	.word	0x20000f48
   10744:	4000d000 	.word	0x4000d000

00010748 <get>:
	LL_ASSERT(rng);
   10748:	b1d0      	cbz	r0, 10780 <get+0x38>
{
   1074a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1074e:	4607      	mov	r7, r0
	first = rng->first;
   10750:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
   10754:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
   10756:	45ae      	cmp	lr, r5
   10758:	d82e      	bhi.n	107b8 <get+0x70>
		d = &rand[octets];
   1075a:	440a      	add	r2, r1
		s = &rng->rand[first];
   1075c:	eb00 060e 	add.w	r6, r0, lr
   10760:	3604      	adds	r6, #4
		avail = last - first;
   10762:	eba5 040e 	sub.w	r4, r5, lr
   10766:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   10768:	42a1      	cmp	r1, r4
   1076a:	d20f      	bcs.n	1078c <get+0x44>
			remaining = avail - octets;
   1076c:	b2cb      	uxtb	r3, r1
   1076e:	1ae4      	subs	r4, r4, r3
   10770:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
   10774:	461c      	mov	r4, r3
		first += avail;
   10776:	44a6      	add	lr, r4
   10778:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   1077c:	1b08      	subs	r0, r1, r4
		while (avail--) {
   1077e:	e00d      	b.n	1079c <get+0x54>
	LL_ASSERT(rng);
   10780:	4040      	eors	r0, r0
   10782:	f380 8811 	msr	BASEPRI, r0
   10786:	f04f 0004 	mov.w	r0, #4
   1078a:	df02      	svc	2
			remaining = 0;
   1078c:	f04f 0c00 	mov.w	ip, #0
   10790:	e7f1      	b.n	10776 <get+0x2e>
			*(--d) = *s++;
   10792:	7835      	ldrb	r5, [r6, #0]
   10794:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
   10798:	461c      	mov	r4, r3
			*(--d) = *s++;
   1079a:	3601      	adds	r6, #1
		while (avail--) {
   1079c:	1e63      	subs	r3, r4, #1
   1079e:	b2db      	uxtb	r3, r3
   107a0:	2c00      	cmp	r4, #0
   107a2:	d1f6      	bne.n	10792 <get+0x4a>
		rng->first = first;
   107a4:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
   107a8:	787b      	ldrb	r3, [r7, #1]
   107aa:	459c      	cmp	ip, r3
   107ac:	d202      	bcs.n	107b4 <get+0x6c>
		NRF_RNG->TASKS_START = 1;
   107ae:	2201      	movs	r2, #1
   107b0:	4b24      	ldr	r3, [pc, #144]	; (10844 <get+0xfc>)
   107b2:	601a      	str	r2, [r3, #0]
}
   107b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
   107b8:	440a      	add	r2, r1
		s = &rng->rand[first];
   107ba:	eb00 080e 	add.w	r8, r0, lr
   107be:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
   107c2:	7804      	ldrb	r4, [r0, #0]
   107c4:	eba4 040e 	sub.w	r4, r4, lr
   107c8:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
   107ca:	42a1      	cmp	r1, r4
   107cc:	d20d      	bcs.n	107ea <get+0xa2>
			remaining = avail + last - octets;
   107ce:	eb05 0c04 	add.w	ip, r5, r4
   107d2:	fa5f fc8c 	uxtb.w	ip, ip
   107d6:	b2cc      	uxtb	r4, r1
   107d8:	ebac 0c04 	sub.w	ip, ip, r4
   107dc:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
   107e0:	44a6      	add	lr, r4
   107e2:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
   107e6:	1b08      	subs	r0, r1, r4
		while (avail--) {
   107e8:	e00a      	b.n	10800 <get+0xb8>
			remaining = last;
   107ea:	46ac      	mov	ip, r5
			first = 0;
   107ec:	f04f 0e00 	mov.w	lr, #0
   107f0:	e7f9      	b.n	107e6 <get+0x9e>
			*(--d) = *s++;
   107f2:	f898 6000 	ldrb.w	r6, [r8]
   107f6:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
   107fa:	461c      	mov	r4, r3
			*(--d) = *s++;
   107fc:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
   10800:	1e63      	subs	r3, r4, #1
   10802:	b2db      	uxtb	r3, r3
   10804:	2c00      	cmp	r4, #0
   10806:	d1f4      	bne.n	107f2 <get+0xaa>
		if (octets && last) {
   10808:	b1c8      	cbz	r0, 1083e <get+0xf6>
   1080a:	b1c5      	cbz	r5, 1083e <get+0xf6>
			s = &rng->rand[0];
   1080c:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
   1080e:	42a8      	cmp	r0, r5
   10810:	d206      	bcs.n	10820 <get+0xd8>
				remaining = last - octets;
   10812:	fa5f fe80 	uxtb.w	lr, r0
   10816:	eba5 040e 	sub.w	r4, r5, lr
   1081a:	fa5f fc84 	uxtb.w	ip, r4
   1081e:	e001      	b.n	10824 <get+0xdc>
				remaining = 0;
   10820:	46a4      	mov	ip, r4
	last = rng->last;
   10822:	46ae      	mov	lr, r5
			octets -= last;
   10824:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
   10828:	4671      	mov	r1, lr
   1082a:	e004      	b.n	10836 <get+0xee>
				*(--d) = *s++;
   1082c:	7831      	ldrb	r1, [r6, #0]
   1082e:	f802 1d01 	strb.w	r1, [r2, #-1]!
   10832:	3601      	adds	r6, #1
			while (last--) {
   10834:	4619      	mov	r1, r3
   10836:	1e4b      	subs	r3, r1, #1
   10838:	b2db      	uxtb	r3, r3
   1083a:	2900      	cmp	r1, #0
   1083c:	d1f6      	bne.n	1082c <get+0xe4>
		rng->first = first;
   1083e:	f887 e002 	strb.w	lr, [r7, #2]
   10842:	e7b1      	b.n	107a8 <get+0x60>
   10844:	4000d000 	.word	0x4000d000

00010848 <rand_init>:
{
   10848:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
   1084a:	4613      	mov	r3, r2
   1084c:	460a      	mov	r2, r1
   1084e:	4601      	mov	r1, r0
   10850:	4801      	ldr	r0, [pc, #4]	; (10858 <rand_init+0x10>)
   10852:	f7ff ff4f 	bl	106f4 <init>
   10856:	bd08      	pop	{r3, pc}
   10858:	20000f48 	.word	0x20000f48

0001085c <rand_isr_init>:
{
   1085c:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
   1085e:	4613      	mov	r3, r2
   10860:	460a      	mov	r2, r1
   10862:	4601      	mov	r1, r0
   10864:	4801      	ldr	r0, [pc, #4]	; (1086c <rand_isr_init+0x10>)
   10866:	f7ff ff45 	bl	106f4 <init>
   1086a:	bd08      	pop	{r3, pc}
   1086c:	20000f44 	.word	0x20000f44

00010870 <rand_get>:
{
   10870:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
   10872:	460a      	mov	r2, r1
   10874:	4601      	mov	r1, r0
   10876:	4b02      	ldr	r3, [pc, #8]	; (10880 <rand_get+0x10>)
   10878:	6818      	ldr	r0, [r3, #0]
   1087a:	f7ff ff65 	bl	10748 <get>
}
   1087e:	bd08      	pop	{r3, pc}
   10880:	20000f48 	.word	0x20000f48

00010884 <rand_isr_get>:
{
   10884:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
   10886:	460a      	mov	r2, r1
   10888:	4601      	mov	r1, r0
   1088a:	4b02      	ldr	r3, [pc, #8]	; (10894 <rand_isr_get+0x10>)
   1088c:	6818      	ldr	r0, [r3, #0]
   1088e:	f7ff ff5b 	bl	10748 <get>
}
   10892:	bd08      	pop	{r3, pc}
   10894:	20000f44 	.word	0x20000f44

00010898 <isr_rand>:

void isr_rand(void *param)
{
   10898:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
   1089a:	4b10      	ldr	r3, [pc, #64]	; (108dc <isr_rand+0x44>)
   1089c:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   108a0:	b903      	cbnz	r3, 108a4 <isr_rand+0xc>
   108a2:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
   108a4:	2101      	movs	r1, #1
   108a6:	4b0e      	ldr	r3, [pc, #56]	; (108e0 <isr_rand+0x48>)
   108a8:	6818      	ldr	r0, [r3, #0]
   108aa:	f7ff fa79 	bl	fda0 <isr>
		if (ret != -EBUSY) {
   108ae:	f110 0f10 	cmn.w	r0, #16
   108b2:	d008      	beq.n	108c6 <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
   108b4:	f110 0f69 	cmn.w	r0, #105	; 0x69
   108b8:	bf14      	ite	ne
   108ba:	2100      	movne	r1, #0
   108bc:	2101      	moveq	r1, #1
   108be:	4b09      	ldr	r3, [pc, #36]	; (108e4 <isr_rand+0x4c>)
   108c0:	6818      	ldr	r0, [r3, #0]
   108c2:	f7ff fa6d 	bl	fda0 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
   108c6:	2200      	movs	r2, #0
   108c8:	4b04      	ldr	r3, [pc, #16]	; (108dc <isr_rand+0x44>)
   108ca:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
   108ce:	f110 0f10 	cmn.w	r0, #16
   108d2:	d0e6      	beq.n	108a2 <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
   108d4:	2201      	movs	r2, #1
   108d6:	605a      	str	r2, [r3, #4]
		}
	}
}
   108d8:	e7e3      	b.n	108a2 <isr_rand+0xa>
   108da:	bf00      	nop
   108dc:	4000d000 	.word	0x4000d000
   108e0:	20000f44 	.word	0x20000f44
   108e4:	20000f48 	.word	0x20000f48

000108e8 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
   108e8:	29ff      	cmp	r1, #255	; 0xff
   108ea:	d012      	beq.n	10912 <ticker_by_slot_get+0x2a>
{
   108ec:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
   108ee:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
   108f2:	00a3      	lsls	r3, r4, #2
   108f4:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
   108f6:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
   108f8:	42aa      	cmp	r2, r5
   108fa:	d906      	bls.n	1090a <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
   108fc:	8ae4      	ldrh	r4, [r4, #22]
   108fe:	b92c      	cbnz	r4, 1090c <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
   10900:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
   10902:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
   10904:	29ff      	cmp	r1, #255	; 0xff
   10906:	d1f2      	bne.n	108ee <ticker_by_slot_get+0x6>
   10908:	e000      	b.n	1090c <ticker_by_slot_get+0x24>
			return TICKER_NULL;
   1090a:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
   1090c:	4608      	mov	r0, r1
   1090e:	bc30      	pop	{r4, r5}
   10910:	4770      	bx	lr
   10912:	4608      	mov	r0, r1
   10914:	4770      	bx	lr

00010916 <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
   10916:	b5f0      	push	{r4, r5, r6, r7, lr}
   10918:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
   1091a:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
   1091c:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
   10920:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
   10922:	f1be 0fff 	cmp.w	lr, #255	; 0xff
   10926:	d004      	beq.n	10932 <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
   10928:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
   1092a:	f8dc 4000 	ldr.w	r4, [ip]
   1092e:	4294      	cmp	r4, r2
   10930:	d005      	beq.n	1093e <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
   10932:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
   10934:	6940      	ldr	r0, [r0, #20]
   10936:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
   1093a:	2600      	movs	r6, #0
   1093c:	e00a      	b.n	10954 <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
   1093e:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
   10942:	ea4f 028e 	mov.w	r2, lr, lsl #2
   10946:	4696      	mov	lr, r2
   10948:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
   1094a:	5cbc      	ldrb	r4, [r7, r2]
   1094c:	e002      	b.n	10954 <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
   1094e:	68a8      	ldr	r0, [r5, #8]
   10950:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
   10952:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
   10954:	2cff      	cmp	r4, #255	; 0xff
   10956:	d006      	beq.n	10966 <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
   10958:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
   1095c:	0082      	lsls	r2, r0, #2
   1095e:	18bd      	adds	r5, r7, r2
   10960:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
   10962:	2800      	cmp	r0, #0
   10964:	d0f3      	beq.n	1094e <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
   10966:	2cff      	cmp	r4, #255	; 0xff
   10968:	d001      	beq.n	1096e <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
   1096a:	68aa      	ldr	r2, [r5, #8]
   1096c:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
   1096e:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
   10970:	601e      	str	r6, [r3, #0]
   10972:	bdf0      	pop	{r4, r5, r6, r7, pc}

00010974 <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
   10974:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   10978:	b085      	sub	sp, #20
   1097a:	4681      	mov	r9, r0
   1097c:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
   1097e:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
   10980:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
   10984:	009b      	lsls	r3, r3, #2
   10986:	9303      	str	r3, [sp, #12]
   10988:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
   1098c:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
   10990:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
   10994:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
   10996:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
   10998:	23ff      	movs	r3, #255	; 0xff
   1099a:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
   1099c:	e004      	b.n	109a8 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
   1099e:	4297      	cmp	r7, r2
   109a0:	d912      	bls.n	109c8 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
   109a2:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
   109a4:	46a0      	mov	r8, r4
		current = ticker_current->next;
   109a6:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
   109a8:	2cff      	cmp	r4, #255	; 0xff
   109aa:	d00f      	beq.n	109cc <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
   109ac:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   109b0:	0093      	lsls	r3, r2, #2
   109b2:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
   109b4:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
   109b6:	4295      	cmp	r5, r2
   109b8:	d908      	bls.n	109cc <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
   109ba:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
   109bc:	8ac9      	ldrh	r1, [r1, #22]
   109be:	2900      	cmp	r1, #0
   109c0:	d0ed      	beq.n	1099e <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
   109c2:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
   109c4:	9401      	str	r4, [sp, #4]
   109c6:	e7ed      	b.n	109a4 <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
   109c8:	2700      	movs	r7, #0
   109ca:	e7eb      	b.n	109a4 <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
   109cc:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
   109d0:	eb05 020b 	add.w	r2, r5, fp
   109d4:	4621      	mov	r1, r4
   109d6:	4630      	mov	r0, r6
   109d8:	f7ff ff86 	bl	108e8 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
   109dc:	f1bb 0f00 	cmp.w	fp, #0
   109e0:	d007      	beq.n	109f2 <ticker_enqueue+0x7e>
   109e2:	42af      	cmp	r7, r5
   109e4:	d801      	bhi.n	109ea <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
   109e6:	28ff      	cmp	r0, #255	; 0xff
   109e8:	d003      	beq.n	109f2 <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
   109ea:	42af      	cmp	r7, r5
   109ec:	d918      	bls.n	10a20 <ticker_enqueue+0xac>
			id = ticker_id_slot_previous;
   109ee:	9801      	ldr	r0, [sp, #4]
   109f0:	e016      	b.n	10a20 <ticker_enqueue+0xac>
		ticker_new->ticks_to_expire = ticks_to_expire;
   109f2:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
   109f6:	9b03      	ldr	r3, [sp, #12]
   109f8:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
   109fa:	45a0      	cmp	r8, r4
   109fc:	d013      	beq.n	10a26 <ticker_enqueue+0xb2>
			node[previous].next = id;
   109fe:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
   10a02:	ea4f 0388 	mov.w	r3, r8, lsl #2
   10a06:	f89d 2008 	ldrb.w	r2, [sp, #8]
   10a0a:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
   10a0c:	2cff      	cmp	r4, #255	; 0xff
   10a0e:	d00f      	beq.n	10a30 <ticker_enqueue+0xbc>
			node[current].ticks_to_expire -= ticks_to_expire;
   10a10:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   10a14:	00a3      	lsls	r3, r4, #2
   10a16:	441e      	add	r6, r3
   10a18:	68b3      	ldr	r3, [r6, #8]
   10a1a:	1b5d      	subs	r5, r3, r5
   10a1c:	60b5      	str	r5, [r6, #8]
   10a1e:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   10a20:	b005      	add	sp, #20
   10a22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   10a26:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10a2a:	f889 3018 	strb.w	r3, [r9, #24]
   10a2e:	e7ed      	b.n	10a0c <ticker_enqueue+0x98>
   10a30:	9802      	ldr	r0, [sp, #8]
   10a32:	e7f5      	b.n	10a20 <ticker_enqueue+0xac>

00010a34 <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   10a34:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   10a36:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   10a38:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   10a3a:	463b      	mov	r3, r7
	total = 0;
   10a3c:	2500      	movs	r5, #0
	ticker_current = 0;
   10a3e:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   10a40:	2bff      	cmp	r3, #255	; 0xff
   10a42:	d00a      	beq.n	10a5a <ticker_dequeue+0x26>

		ticker_current = &node[current];
   10a44:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   10a48:	00a2      	lsls	r2, r4, #2
   10a4a:	18b4      	adds	r4, r6, r2

		if (current == id) {
   10a4c:	428b      	cmp	r3, r1
   10a4e:	d004      	beq.n	10a5a <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10a50:	68a7      	ldr	r7, [r4, #8]
   10a52:	443d      	add	r5, r7
		previous = current;
   10a54:	461f      	mov	r7, r3
		current = ticker_current->next;
   10a56:	5cb3      	ldrb	r3, [r6, r2]
   10a58:	e7f2      	b.n	10a40 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   10a5a:	2bff      	cmp	r3, #255	; 0xff
   10a5c:	d017      	beq.n	10a8e <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   10a5e:	429f      	cmp	r7, r3
   10a60:	d012      	beq.n	10a88 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   10a62:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   10a64:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   10a68:	00bb      	lsls	r3, r7, #2
   10a6a:	7822      	ldrb	r2, [r4, #0]
   10a6c:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   10a6e:	7823      	ldrb	r3, [r4, #0]
   10a70:	2bff      	cmp	r3, #255	; 0xff
   10a72:	d006      	beq.n	10a82 <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   10a74:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10a78:	009a      	lsls	r2, r3, #2
   10a7a:	4416      	add	r6, r2
   10a7c:	68b3      	ldr	r3, [r6, #8]
   10a7e:	4403      	add	r3, r0
   10a80:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   10a82:	4428      	add	r0, r5
}
   10a84:	bcf0      	pop	{r4, r5, r6, r7}
   10a86:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   10a88:	7823      	ldrb	r3, [r4, #0]
   10a8a:	7603      	strb	r3, [r0, #24]
   10a8c:	e7e9      	b.n	10a62 <ticker_dequeue+0x2e>
		return 0;
   10a8e:	2000      	movs	r0, #0
   10a90:	e7f8      	b.n	10a84 <ticker_dequeue+0x50>
	...

00010a94 <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   10a94:	69c3      	ldr	r3, [r0, #28]
   10a96:	6a02      	ldr	r2, [r0, #32]
   10a98:	4413      	add	r3, r2
   10a9a:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   10a9c:	4a05      	ldr	r2, [pc, #20]	; (10ab4 <ticker_remainder_inc+0x20>)
   10a9e:	441a      	add	r2, r3
   10aa0:	4905      	ldr	r1, [pc, #20]	; (10ab8 <ticker_remainder_inc+0x24>)
   10aa2:	428a      	cmp	r2, r1
   10aa4:	d804      	bhi.n	10ab0 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   10aa6:	4a05      	ldr	r2, [pc, #20]	; (10abc <ticker_remainder_inc+0x28>)
   10aa8:	441a      	add	r2, r3
   10aaa:	6202      	str	r2, [r0, #32]
		return 1;
   10aac:	2001      	movs	r0, #1
   10aae:	4770      	bx	lr
	}
	return 0;
   10ab0:	2000      	movs	r0, #0
}
   10ab2:	4770      	bx	lr
   10ab4:	ff172b5a 	.word	0xff172b5a
   10ab8:	7f172b59 	.word	0x7f172b59
   10abc:	fe2e56b6 	.word	0xfe2e56b6

00010ac0 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   10ac0:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   10ac2:	6a01      	ldr	r1, [r0, #32]
   10ac4:	4a07      	ldr	r2, [pc, #28]	; (10ae4 <ticker_remainder_dec+0x24>)
   10ac6:	440a      	add	r2, r1
   10ac8:	4807      	ldr	r0, [pc, #28]	; (10ae8 <ticker_remainder_dec+0x28>)
   10aca:	4282      	cmp	r2, r0
   10acc:	d908      	bls.n	10ae0 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   10ace:	4a07      	ldr	r2, [pc, #28]	; (10aec <ticker_remainder_dec+0x2c>)
   10ad0:	440a      	add	r2, r1
   10ad2:	621a      	str	r2, [r3, #32]
		decrement++;
   10ad4:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   10ad6:	69d9      	ldr	r1, [r3, #28]
   10ad8:	6a1a      	ldr	r2, [r3, #32]
   10ada:	1a52      	subs	r2, r2, r1
   10adc:	621a      	str	r2, [r3, #32]

	return decrement;
}
   10ade:	4770      	bx	lr
	u8_t decrement = 0;
   10ae0:	2000      	movs	r0, #0
   10ae2:	e7f8      	b.n	10ad6 <ticker_remainder_dec+0x16>
   10ae4:	ff172b5a 	.word	0xff172b5a
   10ae8:	7f172b59 	.word	0x7f172b59
   10aec:	01d1a94a 	.word	0x01d1a94a

00010af0 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   10af0:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   10af2:	2300      	movs	r3, #0
   10af4:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   10af6:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   10af8:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10afa:	b11c      	cbz	r4, 10b04 <ticker_job_op_cb+0x14>
   10afc:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   10afe:	6a81      	ldr	r1, [r0, #40]	; 0x28
   10b00:	4610      	mov	r0, r2
   10b02:	47a0      	blx	r4
   10b04:	bd10      	pop	{r4, pc}

00010b06 <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   10b06:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   10b08:	4601      	mov	r1, r0
   10b0a:	2001      	movs	r0, #1
   10b0c:	f7fe fd3e 	bl	f58c <cntr_cmp_set>
   10b10:	bd08      	pop	{r3, pc}

00010b12 <ticker_instance0_cmp_set>:
{
   10b12:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   10b14:	4601      	mov	r1, r0
   10b16:	2000      	movs	r0, #0
   10b18:	f7fe fd38 	bl	f58c <cntr_cmp_set>
   10b1c:	bd08      	pop	{r3, pc}
	...

00010b20 <ticker_instance1_sched>:
{
   10b20:	b508      	push	{r3, lr}
	switch (caller_id) {
   10b22:	2803      	cmp	r0, #3
   10b24:	d841      	bhi.n	10baa <ticker_instance1_sched+0x8a>
   10b26:	e8df f000 	tbb	[pc, r0]
   10b2a:	1002      	.short	0x1002
   10b2c:	331d      	.short	0x331d
		switch (callee_id) {
   10b2e:	2901      	cmp	r1, #1
   10b30:	d105      	bne.n	10b3e <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10b32:	4b21      	ldr	r3, [pc, #132]	; (10bb8 <ticker_instance1_sched+0x98>)
   10b34:	2102      	movs	r1, #2
   10b36:	2000      	movs	r0, #0
   10b38:	f7fe fb10 	bl	f15c <mayfly_enqueue>
		break;
   10b3c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b3e:	4040      	eors	r0, r0
   10b40:	f380 8811 	msr	BASEPRI, r0
   10b44:	f04f 0004 	mov.w	r0, #4
   10b48:	df02      	svc	2
		switch (callee_id) {
   10b4a:	2902      	cmp	r1, #2
   10b4c:	d104      	bne.n	10b58 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10b4e:	4b1b      	ldr	r3, [pc, #108]	; (10bbc <ticker_instance1_sched+0x9c>)
   10b50:	4608      	mov	r0, r1
   10b52:	f7fe fb03 	bl	f15c <mayfly_enqueue>
		break;
   10b56:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b58:	4040      	eors	r0, r0
   10b5a:	f380 8811 	msr	BASEPRI, r0
   10b5e:	f04f 0004 	mov.w	r0, #4
   10b62:	df02      	svc	2
		switch (callee_id) {
   10b64:	2901      	cmp	r1, #1
   10b66:	d007      	beq.n	10b78 <ticker_instance1_sched+0x58>
   10b68:	2902      	cmp	r1, #2
   10b6a:	d00b      	beq.n	10b84 <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   10b6c:	4040      	eors	r0, r0
   10b6e:	f380 8811 	msr	BASEPRI, r0
   10b72:	f04f 0004 	mov.w	r0, #4
   10b76:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10b78:	4b11      	ldr	r3, [pc, #68]	; (10bc0 <ticker_instance1_sched+0xa0>)
   10b7a:	2102      	movs	r1, #2
   10b7c:	4608      	mov	r0, r1
   10b7e:	f7fe faed 	bl	f15c <mayfly_enqueue>
		break;
   10b82:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10b84:	4b0f      	ldr	r3, [pc, #60]	; (10bc4 <ticker_instance1_sched+0xa4>)
   10b86:	2102      	movs	r1, #2
   10b88:	4608      	mov	r0, r1
   10b8a:	f7fe fae7 	bl	f15c <mayfly_enqueue>
		break;
   10b8e:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10b90:	2902      	cmp	r1, #2
   10b92:	d104      	bne.n	10b9e <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10b94:	4b0c      	ldr	r3, [pc, #48]	; (10bc8 <ticker_instance1_sched+0xa8>)
   10b96:	2003      	movs	r0, #3
   10b98:	f7fe fae0 	bl	f15c <mayfly_enqueue>
		break;
   10b9c:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10b9e:	4040      	eors	r0, r0
   10ba0:	f380 8811 	msr	BASEPRI, r0
   10ba4:	f04f 0004 	mov.w	r0, #4
   10ba8:	df02      	svc	2
		LL_ASSERT(0);
   10baa:	4040      	eors	r0, r0
   10bac:	f380 8811 	msr	BASEPRI, r0
   10bb0:	f04f 0004 	mov.w	r0, #4
   10bb4:	df02      	svc	2
   10bb6:	bf00      	nop
   10bb8:	2000bcd0 	.word	0x2000bcd0
   10bbc:	2000bce0 	.word	0x2000bce0
   10bc0:	2000bcf0 	.word	0x2000bcf0
   10bc4:	2000bd00 	.word	0x2000bd00
   10bc8:	2000bd10 	.word	0x2000bd10

00010bcc <ticker_instance1_caller_id_get>:
	switch (user_id) {
   10bcc:	1e83      	subs	r3, r0, #2
   10bce:	2b01      	cmp	r3, #1
   10bd0:	d800      	bhi.n	10bd4 <ticker_instance1_caller_id_get+0x8>
}
   10bd2:	4770      	bx	lr
		LL_ASSERT(0);
   10bd4:	4040      	eors	r0, r0
   10bd6:	f380 8811 	msr	BASEPRI, r0
   10bda:	f04f 0004 	mov.w	r0, #4
   10bde:	df02      	svc	2

00010be0 <ticker_instance0_sched>:
{
   10be0:	b508      	push	{r3, lr}
	switch (caller_id) {
   10be2:	2803      	cmp	r0, #3
   10be4:	d843      	bhi.n	10c6e <ticker_instance0_sched+0x8e>
   10be6:	e8df f000 	tbb	[pc, r0]
   10bea:	1002      	.short	0x1002
   10bec:	341e      	.short	0x341e
		switch (callee_id) {
   10bee:	2901      	cmp	r1, #1
   10bf0:	d105      	bne.n	10bfe <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10bf2:	4b22      	ldr	r3, [pc, #136]	; (10c7c <ticker_instance0_sched+0x9c>)
   10bf4:	2100      	movs	r1, #0
   10bf6:	4608      	mov	r0, r1
   10bf8:	f7fe fab0 	bl	f15c <mayfly_enqueue>
		break;
   10bfc:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10bfe:	4040      	eors	r0, r0
   10c00:	f380 8811 	msr	BASEPRI, r0
   10c04:	f04f 0004 	mov.w	r0, #4
   10c08:	df02      	svc	2
		switch (callee_id) {
   10c0a:	2902      	cmp	r1, #2
   10c0c:	d105      	bne.n	10c1a <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   10c0e:	4b1c      	ldr	r3, [pc, #112]	; (10c80 <ticker_instance0_sched+0xa0>)
   10c10:	2101      	movs	r1, #1
   10c12:	2000      	movs	r0, #0
   10c14:	f7fe faa2 	bl	f15c <mayfly_enqueue>
		break;
   10c18:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10c1a:	4040      	eors	r0, r0
   10c1c:	f380 8811 	msr	BASEPRI, r0
   10c20:	f04f 0004 	mov.w	r0, #4
   10c24:	df02      	svc	2
		switch (callee_id) {
   10c26:	2901      	cmp	r1, #1
   10c28:	d007      	beq.n	10c3a <ticker_instance0_sched+0x5a>
   10c2a:	2902      	cmp	r1, #2
   10c2c:	d00b      	beq.n	10c46 <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   10c2e:	4040      	eors	r0, r0
   10c30:	f380 8811 	msr	BASEPRI, r0
   10c34:	f04f 0004 	mov.w	r0, #4
   10c38:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10c3a:	4b12      	ldr	r3, [pc, #72]	; (10c84 <ticker_instance0_sched+0xa4>)
   10c3c:	2100      	movs	r1, #0
   10c3e:	2001      	movs	r0, #1
   10c40:	f7fe fa8c 	bl	f15c <mayfly_enqueue>
		break;
   10c44:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10c46:	4b10      	ldr	r3, [pc, #64]	; (10c88 <ticker_instance0_sched+0xa8>)
   10c48:	2101      	movs	r1, #1
   10c4a:	4608      	mov	r0, r1
   10c4c:	f7fe fa86 	bl	f15c <mayfly_enqueue>
		break;
   10c50:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10c52:	2902      	cmp	r1, #2
   10c54:	d105      	bne.n	10c62 <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   10c56:	4b0d      	ldr	r3, [pc, #52]	; (10c8c <ticker_instance0_sched+0xac>)
   10c58:	2101      	movs	r1, #1
   10c5a:	2003      	movs	r0, #3
   10c5c:	f7fe fa7e 	bl	f15c <mayfly_enqueue>
		break;
   10c60:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10c62:	4040      	eors	r0, r0
   10c64:	f380 8811 	msr	BASEPRI, r0
   10c68:	f04f 0004 	mov.w	r0, #4
   10c6c:	df02      	svc	2
		LL_ASSERT(0);
   10c6e:	4040      	eors	r0, r0
   10c70:	f380 8811 	msr	BASEPRI, r0
   10c74:	f04f 0004 	mov.w	r0, #4
   10c78:	df02      	svc	2
   10c7a:	bf00      	nop
   10c7c:	2000bc80 	.word	0x2000bc80
   10c80:	2000bc90 	.word	0x2000bc90
   10c84:	2000bca0 	.word	0x2000bca0
   10c88:	2000bcb0 	.word	0x2000bcb0
   10c8c:	2000bcc0 	.word	0x2000bcc0

00010c90 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10c90:	2801      	cmp	r0, #1
   10c92:	d00a      	beq.n	10caa <ticker_instance0_caller_id_get+0x1a>
   10c94:	b138      	cbz	r0, 10ca6 <ticker_instance0_caller_id_get+0x16>
   10c96:	2803      	cmp	r0, #3
   10c98:	d008      	beq.n	10cac <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10c9a:	4040      	eors	r0, r0
   10c9c:	f380 8811 	msr	BASEPRI, r0
   10ca0:	f04f 0004 	mov.w	r0, #4
   10ca4:	df02      	svc	2
		return CALL_ID_WORKER;
   10ca6:	2001      	movs	r0, #1
   10ca8:	4770      	bx	lr
		return CALL_ID_JOB;
   10caa:	2002      	movs	r0, #2
}
   10cac:	4770      	bx	lr
	...

00010cb0 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10cb0:	b5f0      	push	{r4, r5, r6, r7, lr}
   10cb2:	9d05      	ldr	r5, [sp, #20]
   10cb4:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   10cb8:	4606      	mov	r6, r0
   10cba:	b118      	cbz	r0, 10cc4 <ticker_init+0x14>
   10cbc:	2801      	cmp	r0, #1
   10cbe:	d019      	beq.n	10cf4 <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   10cc0:	2001      	movs	r0, #1
   10cc2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   10cc4:	202c      	movs	r0, #44	; 0x2c
   10cc6:	4f20      	ldr	r7, [pc, #128]	; (10d48 <ticker_init+0x98>)
   10cc8:	fb00 7006 	mla	r0, r0, r6, r7
   10ccc:	4f1f      	ldr	r7, [pc, #124]	; (10d4c <ticker_init+0x9c>)
   10cce:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   10cd0:	4f1f      	ldr	r7, [pc, #124]	; (10d50 <ticker_init+0xa0>)
   10cd2:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   10cd4:	4f1f      	ldr	r7, [pc, #124]	; (10d54 <ticker_init+0xa4>)
   10cd6:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   10cd8:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10d48 <ticker_init+0x98>
   10cdc:	202c      	movs	r0, #44	; 0x2c
   10cde:	fb00 f006 	mul.w	r0, r0, r6
   10ce2:	eb0e 0700 	add.w	r7, lr, r0
   10ce6:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   10ce8:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   10cec:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   10cee:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   10cf0:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   10cf2:	e015      	b.n	10d20 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   10cf4:	202c      	movs	r0, #44	; 0x2c
   10cf6:	4f14      	ldr	r7, [pc, #80]	; (10d48 <ticker_init+0x98>)
   10cf8:	fb00 7006 	mla	r0, r0, r6, r7
   10cfc:	4f16      	ldr	r7, [pc, #88]	; (10d58 <ticker_init+0xa8>)
   10cfe:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   10d00:	4f16      	ldr	r7, [pc, #88]	; (10d5c <ticker_init+0xac>)
   10d02:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   10d04:	4f16      	ldr	r7, [pc, #88]	; (10d60 <ticker_init+0xb0>)
   10d06:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   10d08:	e7e6      	b.n	10cd8 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   10d0a:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   10d0e:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   10d10:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   10d14:	202c      	movs	r0, #44	; 0x2c
   10d16:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10d1a:	1ae3      	subs	r3, r4, r3
   10d1c:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10d1e:	4613      	mov	r3, r2
   10d20:	1e5a      	subs	r2, r3, #1
   10d22:	b2d2      	uxtb	r2, r2
   10d24:	2b00      	cmp	r3, #0
   10d26:	d1f0      	bne.n	10d0a <ticker_init+0x5a>
	}

	if (count_op) {
   10d28:	b964      	cbnz	r4, 10d44 <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10d2a:	222c      	movs	r2, #44	; 0x2c
   10d2c:	4b06      	ldr	r3, [pc, #24]	; (10d48 <ticker_init+0x98>)
   10d2e:	fb02 3606 	mla	r6, r2, r6, r3
   10d32:	23ff      	movs	r3, #255	; 0xff
   10d34:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   10d36:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10d38:	2000      	movs	r0, #0
   10d3a:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10d3c:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10d3e:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10d40:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   10d42:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   10d44:	2001      	movs	r0, #1
}
   10d46:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10d48:	20000f4c 	.word	0x20000f4c
   10d4c:	00010c91 	.word	0x00010c91
   10d50:	00010be1 	.word	0x00010be1
   10d54:	00010b13 	.word	0x00010b13
   10d58:	00010bcd 	.word	0x00010bcd
   10d5c:	00010b21 	.word	0x00010b21
   10d60:	00010b07 	.word	0x00010b07

00010d64 <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   10d64:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   10d66:	232c      	movs	r3, #44	; 0x2c
   10d68:	4a04      	ldr	r2, [pc, #16]	; (10d7c <ticker_trigger+0x18>)
   10d6a:	fb03 2000 	mla	r0, r3, r0, r2
   10d6e:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10d70:	b11b      	cbz	r3, 10d7a <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   10d72:	2201      	movs	r2, #1
   10d74:	4611      	mov	r1, r2
   10d76:	2000      	movs	r0, #0
   10d78:	4798      	blx	r3
   10d7a:	bd08      	pop	{r3, pc}
   10d7c:	20000f4c 	.word	0x20000f4c

00010d80 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10d80:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10d84:	242c      	movs	r4, #44	; 0x2c
   10d86:	4d24      	ldr	r5, [pc, #144]	; (10e18 <ticker_start+0x98>)
   10d88:	fb04 5400 	mla	r4, r4, r0, r5
   10d8c:	6866      	ldr	r6, [r4, #4]
   10d8e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10d92:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10d96:	1c65      	adds	r5, r4, #1
   10d98:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10d9a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10d9e:	42b5      	cmp	r5, r6
   10da0:	d300      	bcc.n	10da4 <ticker_start+0x24>
		last = 0;
   10da2:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10da4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10da8:	42b5      	cmp	r5, r6
   10daa:	d032      	beq.n	10e12 <ticker_start+0x92>
   10dac:	469c      	mov	ip, r3
   10dae:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10db0:	f8de 3004 	ldr.w	r3, [lr, #4]
   10db4:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10db8:	fb08 f604 	mul.w	r6, r8, r4
   10dbc:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   10dbe:	2003      	movs	r0, #3
   10dc0:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10dc2:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   10dc4:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   10dc8:	9b06      	ldr	r3, [sp, #24]
   10dca:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   10dcc:	9b07      	ldr	r3, [sp, #28]
   10dce:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   10dd0:	9b08      	ldr	r3, [sp, #32]
   10dd2:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   10dd4:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   10dd8:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   10dda:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10dde:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   10de0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10de2:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   10de4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10de6:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   10de8:	2602      	movs	r6, #2
   10dea:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10dec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   10dee:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10df0:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   10df2:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10df4:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10df8:	4b07      	ldr	r3, [pc, #28]	; (10e18 <ticker_start+0x98>)
   10dfa:	fb08 3307 	mla	r3, r8, r7, r3
   10dfe:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10e00:	6a1b      	ldr	r3, [r3, #32]
   10e02:	4608      	mov	r0, r1
   10e04:	4798      	blx	r3
   10e06:	2200      	movs	r2, #0
   10e08:	4631      	mov	r1, r6
   10e0a:	47a8      	blx	r5

	return user_op->status;
   10e0c:	6a20      	ldr	r0, [r4, #32]
   10e0e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10e12:	2001      	movs	r0, #1
}
   10e14:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10e18:	20000f4c 	.word	0x20000f4c

00010e1c <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10e1c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10e20:	242c      	movs	r4, #44	; 0x2c
   10e22:	4d24      	ldr	r5, [pc, #144]	; (10eb4 <ticker_update+0x98>)
   10e24:	fb04 5400 	mla	r4, r4, r0, r5
   10e28:	6866      	ldr	r6, [r4, #4]
   10e2a:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10e2e:	f89e 4003 	ldrb.w	r4, [lr, #3]
   10e32:	1c65      	adds	r5, r4, #1
   10e34:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10e36:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10e3a:	42b5      	cmp	r5, r6
   10e3c:	d300      	bcc.n	10e40 <ticker_update+0x24>
		last = 0;
   10e3e:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10e40:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10e44:	42b5      	cmp	r5, r6
   10e46:	d031      	beq.n	10eac <ticker_update+0x90>
   10e48:	469c      	mov	ip, r3
   10e4a:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10e4c:	f8de 3004 	ldr.w	r3, [lr, #4]
   10e50:	f04f 082c 	mov.w	r8, #44	; 0x2c
   10e54:	fb08 f604 	mul.w	r6, r8, r4
   10e58:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10e5a:	2004      	movs	r0, #4
   10e5c:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10e5e:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10e60:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   10e64:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10e68:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10e6a:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10e6e:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10e70:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   10e74:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   10e76:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10e7a:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10e7c:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10e80:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   10e82:	2602      	movs	r6, #2
   10e84:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   10e86:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10e88:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10e8a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10e8c:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10e8e:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10e92:	4b08      	ldr	r3, [pc, #32]	; (10eb4 <ticker_update+0x98>)
   10e94:	fb08 3307 	mla	r3, r8, r7, r3
   10e98:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10e9a:	6a1b      	ldr	r3, [r3, #32]
   10e9c:	4608      	mov	r0, r1
   10e9e:	4798      	blx	r3
   10ea0:	2200      	movs	r2, #0
   10ea2:	4631      	mov	r1, r6
   10ea4:	47a8      	blx	r5

	return user_op->status;
   10ea6:	6a20      	ldr	r0, [r4, #32]
   10ea8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10eac:	2001      	movs	r0, #1
}
   10eae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10eb2:	bf00      	nop
   10eb4:	20000f4c 	.word	0x20000f4c

00010eb8 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   10eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10ebc:	242c      	movs	r4, #44	; 0x2c
   10ebe:	4d1b      	ldr	r5, [pc, #108]	; (10f2c <ticker_stop+0x74>)
   10ec0:	fb04 5400 	mla	r4, r4, r0, r5
   10ec4:	6866      	ldr	r6, [r4, #4]
   10ec6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10eca:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10ece:	1c6c      	adds	r4, r5, #1
   10ed0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10ed2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10ed6:	42b4      	cmp	r4, r6
   10ed8:	d300      	bcc.n	10edc <ticker_stop+0x24>
		last = 0;
   10eda:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10edc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10ee0:	42b4      	cmp	r4, r6
   10ee2:	d020      	beq.n	10f26 <ticker_stop+0x6e>
   10ee4:	4698      	mov	r8, r3
   10ee6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10ee8:	f8de 3004 	ldr.w	r3, [lr, #4]
   10eec:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10ef0:	fb0c f505 	mul.w	r5, ip, r5
   10ef4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   10ef6:	2005      	movs	r0, #5
   10ef8:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   10efa:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10efc:	2502      	movs	r5, #2
   10efe:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   10f00:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   10f04:	9b06      	ldr	r3, [sp, #24]
   10f06:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   10f08:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10f0c:	4b07      	ldr	r3, [pc, #28]	; (10f2c <ticker_stop+0x74>)
   10f0e:	fb0c 3307 	mla	r3, ip, r7, r3
   10f12:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10f14:	6a1b      	ldr	r3, [r3, #32]
   10f16:	4608      	mov	r0, r1
   10f18:	4798      	blx	r3
   10f1a:	2200      	movs	r2, #0
   10f1c:	4629      	mov	r1, r5
   10f1e:	47a0      	blx	r4

	return user_op->status;
   10f20:	6a30      	ldr	r0, [r6, #32]
   10f22:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10f26:	2001      	movs	r0, #1
}
   10f28:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10f2c:	20000f4c 	.word	0x20000f4c

00010f30 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10f30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10f34:	242c      	movs	r4, #44	; 0x2c
   10f36:	4d1f      	ldr	r5, [pc, #124]	; (10fb4 <ticker_next_slot_get+0x84>)
   10f38:	fb04 5400 	mla	r4, r4, r0, r5
   10f3c:	6866      	ldr	r6, [r4, #4]
   10f3e:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10f42:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10f46:	1c6c      	adds	r4, r5, #1
   10f48:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10f4a:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10f4e:	42b4      	cmp	r4, r6
   10f50:	d300      	bcc.n	10f54 <ticker_next_slot_get+0x24>
		last = 0;
   10f52:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10f54:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10f58:	42b4      	cmp	r4, r6
   10f5a:	d027      	beq.n	10fac <ticker_next_slot_get+0x7c>
   10f5c:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10f5e:	f8de 3004 	ldr.w	r3, [lr, #4]
   10f62:	f04f 092c 	mov.w	r9, #44	; 0x2c
   10f66:	fb09 f605 	mul.w	r6, r9, r5
   10f6a:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10f6c:	f04f 0802 	mov.w	r8, #2
   10f70:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   10f74:	23ff      	movs	r3, #255	; 0xff
   10f76:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10f78:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10f7a:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10f7e:	9b08      	ldr	r3, [sp, #32]
   10f80:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   10f82:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   10f86:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10f88:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10f8a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10f8c:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10f8e:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   10f92:	4b08      	ldr	r3, [pc, #32]	; (10fb4 <ticker_next_slot_get+0x84>)
   10f94:	fb09 3300 	mla	r3, r9, r0, r3
   10f98:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10f9a:	6a1b      	ldr	r3, [r3, #32]
   10f9c:	4608      	mov	r0, r1
   10f9e:	4798      	blx	r3
   10fa0:	2200      	movs	r2, #0
   10fa2:	4641      	mov	r1, r8
   10fa4:	47a0      	blx	r4

	return user_op->status;
   10fa6:	6a28      	ldr	r0, [r5, #32]
   10fa8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10fac:	2001      	movs	r0, #1
}
   10fae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   10fb2:	bf00      	nop
   10fb4:	20000f4c 	.word	0x20000f4c

00010fb8 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   10fb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10fbc:	242c      	movs	r4, #44	; 0x2c
   10fbe:	4d1b      	ldr	r5, [pc, #108]	; (1102c <ticker_job_idle_get+0x74>)
   10fc0:	fb04 5400 	mla	r4, r4, r0, r5
   10fc4:	6866      	ldr	r6, [r4, #4]
   10fc6:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10fca:	f89e 5003 	ldrb.w	r5, [lr, #3]
   10fce:	1c6c      	adds	r4, r5, #1
   10fd0:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10fd2:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10fd6:	42b4      	cmp	r4, r6
   10fd8:	d300      	bcc.n	10fdc <ticker_job_idle_get+0x24>
		last = 0;
   10fda:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   10fdc:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10fe0:	42b4      	cmp	r4, r6
   10fe2:	d020      	beq.n	11026 <ticker_job_idle_get+0x6e>
   10fe4:	4698      	mov	r8, r3
   10fe6:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10fe8:	f8de 3004 	ldr.w	r3, [lr, #4]
   10fec:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   10ff0:	fb0c f505 	mul.w	r5, ip, r5
   10ff4:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   10ff6:	2001      	movs	r0, #1
   10ff8:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   10ffa:	23ff      	movs	r3, #255	; 0xff
   10ffc:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   10ffe:	2502      	movs	r5, #2
   11000:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   11002:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   11004:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   11008:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1100c:	4b07      	ldr	r3, [pc, #28]	; (1102c <ticker_job_idle_get+0x74>)
   1100e:	fb0c 3307 	mla	r3, ip, r7, r3
   11012:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   11014:	6a1b      	ldr	r3, [r3, #32]
   11016:	4608      	mov	r0, r1
   11018:	4798      	blx	r3
   1101a:	2200      	movs	r2, #0
   1101c:	4629      	mov	r1, r5
   1101e:	47a0      	blx	r4

	return user_op->status;
   11020:	6a30      	ldr	r0, [r6, #32]
   11022:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   11026:	2001      	movs	r0, #1
}
   11028:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1102c:	20000f4c 	.word	0x20000f4c

00011030 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   11030:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   11032:	232c      	movs	r3, #44	; 0x2c
   11034:	4a05      	ldr	r2, [pc, #20]	; (1104c <ticker_job_sched+0x1c>)
   11036:	fb03 2000 	mla	r0, r3, r0, r2
   1103a:	6a44      	ldr	r4, [r0, #36]	; 0x24
   1103c:	6a03      	ldr	r3, [r0, #32]
   1103e:	4608      	mov	r0, r1
   11040:	4798      	blx	r3
   11042:	2200      	movs	r2, #0
   11044:	2102      	movs	r1, #2
   11046:	47a0      	blx	r4
   11048:	bd10      	pop	{r4, pc}
   1104a:	bf00      	nop
   1104c:	20000f4c 	.word	0x20000f4c

00011050 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   11050:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   11052:	f7fe fa95 	bl	f580 <cntr_cnt_get>
}
   11056:	bd08      	pop	{r3, pc}

00011058 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   11058:	1a40      	subs	r0, r0, r1
}
   1105a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   1105e:	4770      	bx	lr

00011060 <ticker_worker>:
{
   11060:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   11064:	2301      	movs	r3, #1
   11066:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   11068:	f890 901c 	ldrb.w	r9, [r0, #28]
   1106c:	f1b9 0f00 	cmp.w	r9, #0
   11070:	d147      	bne.n	11102 <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   11072:	7e03      	ldrb	r3, [r0, #24]
   11074:	2bff      	cmp	r3, #255	; 0xff
   11076:	d030      	beq.n	110da <ticker_worker+0x7a>
   11078:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   1107a:	f7fe fa81 	bl	f580 <cntr_cnt_get>
   1107e:	6979      	ldr	r1, [r7, #20]
   11080:	f7ff ffea 	bl	11058 <ticker_ticks_diff_get>
   11084:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   11086:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   11088:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   1108c:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   1108e:	2cff      	cmp	r4, #255	; 0xff
   11090:	d027      	beq.n	110e2 <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   11092:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   11096:	00a3      	lsls	r3, r4, #2
   11098:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   1109c:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1109e:	4295      	cmp	r5, r2
   110a0:	d31f      	bcc.n	110e2 <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   110a2:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   110a4:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   110a6:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   110aa:	784b      	ldrb	r3, [r1, #1]
   110ac:	788a      	ldrb	r2, [r1, #2]
   110ae:	1a9b      	subs	r3, r3, r2
   110b0:	b2db      	uxtb	r3, r3
   110b2:	2b01      	cmp	r3, #1
   110b4:	d1eb      	bne.n	1108e <ticker_worker+0x2e>
		ticker->ack--;
   110b6:	3a01      	subs	r2, #1
   110b8:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   110ba:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   110be:	f1ba 0f00 	cmp.w	sl, #0
   110c2:	d0e4      	beq.n	1108e <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   110c4:	6978      	ldr	r0, [r7, #20]
   110c6:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   110c8:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   110ca:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   110cc:	690b      	ldr	r3, [r1, #16]
   110ce:	8b4a      	ldrh	r2, [r1, #26]
   110d0:	6a09      	ldr	r1, [r1, #32]
   110d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   110d6:	47d0      	blx	sl
   110d8:	e7d9      	b.n	1108e <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   110da:	2300      	movs	r3, #0
   110dc:	7743      	strb	r3, [r0, #29]
		return;
   110de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   110e2:	7aba      	ldrb	r2, [r7, #10]
   110e4:	7afb      	ldrb	r3, [r7, #11]
   110e6:	429a      	cmp	r2, r3
   110e8:	d00d      	beq.n	11106 <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   110ea:	7afb      	ldrb	r3, [r7, #11]
   110ec:	3302      	adds	r3, #2
   110ee:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   110f2:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   110f4:	2300      	movs	r3, #0
   110f6:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   110f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   110fa:	2201      	movs	r2, #1
   110fc:	2102      	movs	r1, #2
   110fe:	4610      	mov	r0, r2
   11100:	4798      	blx	r3
   11102:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   11106:	3301      	adds	r3, #1
   11108:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   1110a:	2b02      	cmp	r3, #2
   1110c:	d001      	beq.n	11112 <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   1110e:	72fb      	strb	r3, [r7, #11]
   11110:	e7eb      	b.n	110ea <ticker_worker+0x8a>
			last = 0;
   11112:	464b      	mov	r3, r9
   11114:	e7fb      	b.n	1110e <ticker_worker+0xae>

00011116 <ticks_to_expire_prep>:
{
   11116:	b570      	push	{r4, r5, r6, lr}
   11118:	4606      	mov	r6, r0
   1111a:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   1111c:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   1111e:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   11120:	1a51      	subs	r1, r2, r1
   11122:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   11126:	d10c      	bne.n	11142 <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   11128:	4601      	mov	r1, r0
   1112a:	4610      	mov	r0, r2
   1112c:	f7ff ff94 	bl	11058 <ticker_ticks_diff_get>
   11130:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   11132:	42a8      	cmp	r0, r5
   11134:	d812      	bhi.n	1115c <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   11136:	1a28      	subs	r0, r5, r0
   11138:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   1113a:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   1113c:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   1113e:	82b5      	strh	r5, [r6, #20]
   11140:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   11142:	4611      	mov	r1, r2
   11144:	f7ff ff88 	bl	11058 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   11148:	4284      	cmp	r4, r0
   1114a:	d901      	bls.n	11150 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   1114c:	1a20      	subs	r0, r4, r0
   1114e:	e7f0      	b.n	11132 <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   11150:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   11152:	fa15 f080 	uxtah	r0, r5, r0
   11156:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   11158:	2000      	movs	r0, #0
   1115a:	e7ea      	b.n	11132 <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   1115c:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   1115e:	2500      	movs	r5, #0
   11160:	e7ec      	b.n	1113c <ticks_to_expire_prep+0x26>

00011162 <ticker_job>:
{
   11162:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   11166:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   11168:	7f43      	ldrb	r3, [r0, #29]
   1116a:	9301      	str	r3, [sp, #4]
   1116c:	2b00      	cmp	r3, #0
   1116e:	f040 8254 	bne.w	1161a <ticker_job+0x4b8>
	instance->job_guard = 1;
   11172:	2301      	movs	r3, #1
   11174:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   11176:	6943      	ldr	r3, [r0, #20]
   11178:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   1117a:	7a83      	ldrb	r3, [r0, #10]
   1117c:	7ac2      	ldrb	r2, [r0, #11]
   1117e:	4293      	cmp	r3, r2
   11180:	d021      	beq.n	111c6 <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   11182:	3301      	adds	r3, #1
   11184:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   11186:	2b02      	cmp	r3, #2
   11188:	d100      	bne.n	1118c <ticker_job+0x2a>
			first = 0;
   1118a:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   1118c:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   1118e:	3302      	adds	r3, #2
   11190:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   11194:	685b      	ldr	r3, [r3, #4]
   11196:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   11198:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1119a:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   1119c:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   111a0:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   111a2:	2301      	movs	r3, #1
   111a4:	9304      	str	r3, [sp, #16]
   111a6:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   111a8:	7e03      	ldrb	r3, [r0, #24]
   111aa:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   111ac:	6803      	ldr	r3, [r0, #0]
   111ae:	4619      	mov	r1, r3
	users = &instance->user[0];
   111b0:	6843      	ldr	r3, [r0, #4]
   111b2:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   111b4:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   111b6:	9a01      	ldr	r2, [sp, #4]
   111b8:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   111ba:	f04f 0bff 	mov.w	fp, #255	; 0xff
   111be:	f8cd b01c 	str.w	fp, [sp, #28]
   111c2:	468b      	mov	fp, r1
   111c4:	e0cc      	b.n	11360 <ticker_job+0x1fe>
		flag_elapsed = 0;
   111c6:	9b01      	ldr	r3, [sp, #4]
   111c8:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   111ca:	2300      	movs	r3, #0
   111cc:	9303      	str	r3, [sp, #12]
   111ce:	e7ea      	b.n	111a6 <ticker_job+0x44>
				middle = 0;
   111d0:	9b01      	ldr	r3, [sp, #4]
   111d2:	e01d      	b.n	11210 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   111d4:	6872      	ldr	r2, [r6, #4]
   111d6:	bb82      	cbnz	r2, 1123a <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   111d8:	68b2      	ldr	r2, [r6, #8]
   111da:	bb72      	cbnz	r2, 1123a <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   111dc:	68f2      	ldr	r2, [r6, #12]
   111de:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   111e2:	d12a      	bne.n	1123a <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   111e4:	2101      	movs	r1, #1
   111e6:	4630      	mov	r0, r6
   111e8:	f7ff fc82 	bl	10af0 <ticker_job_op_cb>
		while (user->middle != user->last) {
   111ec:	f894 a002 	ldrb.w	sl, [r4, #2]
   111f0:	78e3      	ldrb	r3, [r4, #3]
   111f2:	459a      	cmp	sl, r3
   111f4:	f000 80b3 	beq.w	1135e <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   111f8:	f04f 092c 	mov.w	r9, #44	; 0x2c
   111fc:	fb09 f90a 	mul.w	r9, r9, sl
   11200:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   11204:	f10a 0301 	add.w	r3, sl, #1
   11208:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   1120a:	7822      	ldrb	r2, [r4, #0]
   1120c:	4293      	cmp	r3, r2
   1120e:	d0df      	beq.n	111d0 <ticker_job+0x6e>
			user->middle = middle;
   11210:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   11212:	7873      	ldrb	r3, [r6, #1]
   11214:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   11218:	009f      	lsls	r7, r3, #2
   1121a:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   1121e:	f818 2009 	ldrb.w	r2, [r8, r9]
   11222:	2a03      	cmp	r2, #3
   11224:	d9e2      	bls.n	111ec <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   11226:	786b      	ldrb	r3, [r5, #1]
   11228:	78a9      	ldrb	r1, [r5, #2]
   1122a:	1a5b      	subs	r3, r3, r1
   1122c:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   1122e:	2a05      	cmp	r2, #5
   11230:	d8d8      	bhi.n	111e4 <ticker_job+0x82>
   11232:	2b00      	cmp	r3, #0
   11234:	d0d6      	beq.n	111e4 <ticker_job+0x82>
			    (state == 0) ||
   11236:	2a04      	cmp	r2, #4
   11238:	d0cc      	beq.n	111d4 <ticker_job+0x72>
			if (state == 1) {
   1123a:	2b01      	cmp	r3, #1
   1123c:	f040 8085 	bne.w	1134a <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   11240:	7871      	ldrb	r1, [r6, #1]
   11242:	9800      	ldr	r0, [sp, #0]
   11244:	f7ff fbf6 	bl	10a34 <ticker_dequeue>
   11248:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   1124a:	f818 3009 	ldrb.w	r3, [r8, r9]
   1124e:	2b04      	cmp	r3, #4
   11250:	d00b      	beq.n	1126a <ticker_job+0x108>
		ticker->req = ticker->ack;
   11252:	78ab      	ldrb	r3, [r5, #2]
   11254:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   11256:	9b00      	ldr	r3, [sp, #0]
   11258:	7e5a      	ldrb	r2, [r3, #25]
   1125a:	7873      	ldrb	r3, [r6, #1]
   1125c:	429a      	cmp	r2, r3
   1125e:	d06e      	beq.n	1133e <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   11260:	2100      	movs	r1, #0
   11262:	4630      	mov	r0, r6
   11264:	f7ff fc44 	bl	10af0 <ticker_job_op_cb>
   11268:	e7c0      	b.n	111ec <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   1126a:	9b00      	ldr	r3, [sp, #0]
   1126c:	695b      	ldr	r3, [r3, #20]
   1126e:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   11270:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   11272:	f7fe f985 	bl	f580 <cntr_cnt_get>
   11276:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   11278:	9906      	ldr	r1, [sp, #24]
   1127a:	f7ff feed 	bl	11058 <ticker_ticks_diff_get>
   1127e:	9b03      	ldr	r3, [sp, #12]
   11280:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   11282:	4581      	cmp	r9, r0
   11284:	d909      	bls.n	1129a <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   11286:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   1128a:	686b      	ldr	r3, [r5, #4]
   1128c:	b37b      	cbz	r3, 112ee <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   1128e:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   11290:	b36b      	cbz	r3, 112ee <ticker_job+0x18c>
		user_op->params.update.lazy--;
   11292:	3b01      	subs	r3, #1
   11294:	81b3      	strh	r3, [r6, #12]
   11296:	46a2      	mov	sl, r4
   11298:	e011      	b.n	112be <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   1129a:	eba0 0909 	sub.w	r9, r0, r9
   1129e:	8aab      	ldrh	r3, [r5, #20]
   112a0:	fa13 f389 	uxtah	r3, r3, r9
   112a4:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   112a6:	f04f 0900 	mov.w	r9, #0
   112aa:	e7ee      	b.n	1128a <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   112ac:	4628      	mov	r0, r5
   112ae:	f7ff fc07 	bl	10ac0 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   112b2:	4420      	add	r0, r4
   112b4:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   112b8:	8b6b      	ldrh	r3, [r5, #26]
   112ba:	3b01      	subs	r3, #1
   112bc:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   112be:	686c      	ldr	r4, [r5, #4]
   112c0:	454c      	cmp	r4, r9
   112c2:	d237      	bcs.n	11334 <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   112c4:	8b6a      	ldrh	r2, [r5, #26]
   112c6:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   112c8:	429a      	cmp	r2, r3
   112ca:	d8ef      	bhi.n	112ac <ticker_job+0x14a>
   112cc:	4654      	mov	r4, sl
   112ce:	e009      	b.n	112e4 <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   112d0:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   112d4:	4628      	mov	r0, r5
   112d6:	f7ff fbdd 	bl	10a94 <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   112da:	4450      	add	r0, sl
   112dc:	4481      	add	r9, r0
			ticker->lazy_current++;
   112de:	8b6b      	ldrh	r3, [r5, #26]
   112e0:	3301      	adds	r3, #1
   112e2:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   112e4:	8b6a      	ldrh	r2, [r5, #26]
   112e6:	89b3      	ldrh	r3, [r6, #12]
   112e8:	429a      	cmp	r2, r3
   112ea:	d3f1      	bcc.n	112d0 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   112ec:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   112ee:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   112f0:	444b      	add	r3, r9
   112f2:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   112f4:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   112f6:	8aaa      	ldrh	r2, [r5, #20]
   112f8:	4413      	add	r3, r2
   112fa:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   112fc:	9a08      	ldr	r2, [sp, #32]
   112fe:	9906      	ldr	r1, [sp, #24]
   11300:	4628      	mov	r0, r5
   11302:	f7ff ff08 	bl	11116 <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   11306:	8933      	ldrh	r3, [r6, #8]
   11308:	8aea      	ldrh	r2, [r5, #22]
   1130a:	4413      	add	r3, r2
   1130c:	b29b      	uxth	r3, r3
   1130e:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   11310:	8972      	ldrh	r2, [r6, #10]
   11312:	4293      	cmp	r3, r2
   11314:	d910      	bls.n	11338 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   11316:	1a9b      	subs	r3, r3, r2
   11318:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   1131a:	7bb3      	ldrb	r3, [r6, #14]
   1131c:	b103      	cbz	r3, 11320 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   1131e:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   11320:	f89d 301c 	ldrb.w	r3, [sp, #28]
   11324:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   11328:	7873      	ldrb	r3, [r6, #1]
   1132a:	9307      	str	r3, [sp, #28]
		ticker->req++;
   1132c:	786b      	ldrb	r3, [r5, #1]
   1132e:	3301      	adds	r3, #1
   11330:	706b      	strb	r3, [r5, #1]
   11332:	e795      	b.n	11260 <ticker_job+0xfe>
   11334:	4654      	mov	r4, sl
   11336:	e7d5      	b.n	112e4 <ticker_job+0x182>
		ticker->ticks_slot = 0;
   11338:	2300      	movs	r3, #0
   1133a:	82eb      	strh	r3, [r5, #22]
   1133c:	e7ed      	b.n	1131a <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   1133e:	23ff      	movs	r3, #255	; 0xff
   11340:	9900      	ldr	r1, [sp, #0]
   11342:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   11344:	2300      	movs	r3, #0
   11346:	834b      	strh	r3, [r1, #26]
   11348:	e78a      	b.n	11260 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   1134a:	9b00      	ldr	r3, [sp, #0]
   1134c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   1134e:	2201      	movs	r2, #1
   11350:	2102      	movs	r1, #2
   11352:	4608      	mov	r0, r1
   11354:	4798      	blx	r3
				user->middle = prev;
   11356:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   1135a:	2301      	movs	r3, #1
   1135c:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   1135e:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   11360:	1e5a      	subs	r2, r3, #1
   11362:	b2d2      	uxtb	r2, r2
   11364:	9202      	str	r2, [sp, #8]
   11366:	b133      	cbz	r3, 11376 <ticker_job+0x214>
		user = &users[count_user];
   11368:	9b05      	ldr	r3, [sp, #20]
   1136a:	9a02      	ldr	r2, [sp, #8]
   1136c:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   11370:	f8d4 8004 	ldr.w	r8, [r4, #4]
   11374:	e73a      	b.n	111ec <ticker_job+0x8a>
   11376:	9306      	str	r3, [sp, #24]
   11378:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   1137c:	9b00      	ldr	r3, [sp, #0]
   1137e:	7e1b      	ldrb	r3, [r3, #24]
   11380:	9a09      	ldr	r2, [sp, #36]	; 0x24
   11382:	429a      	cmp	r2, r3
   11384:	d00a      	beq.n	1139c <ticker_job+0x23a>
		flag_compare_update = 1;
   11386:	2301      	movs	r3, #1
   11388:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   1138a:	9b04      	ldr	r3, [sp, #16]
   1138c:	b94b      	cbnz	r3, 113a2 <ticker_job+0x240>
	node = &instance->node[0];
   1138e:	9a00      	ldr	r2, [sp, #0]
   11390:	6813      	ldr	r3, [r2, #0]
   11392:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   11394:	6853      	ldr	r3, [r2, #4]
   11396:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   11398:	7a53      	ldrb	r3, [r2, #9]
   1139a:	e117      	b.n	115cc <ticker_job+0x46a>
	flag_compare_update = 0;
   1139c:	9b06      	ldr	r3, [sp, #24]
   1139e:	9308      	str	r3, [sp, #32]
   113a0:	e7f3      	b.n	1138a <ticker_job+0x228>
	node = &instance->node[0];
   113a2:	9e00      	ldr	r6, [sp, #0]
   113a4:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   113a8:	f04f 0a00 	mov.w	sl, #0
   113ac:	f8cd b004 	str.w	fp, [sp, #4]
   113b0:	e02f      	b.n	11412 <ticker_job+0x2b0>
   113b2:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   113b6:	1a9b      	subs	r3, r3, r2
   113b8:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   113ba:	9b00      	ldr	r3, [sp, #0]
   113bc:	7e1b      	ldrb	r3, [r3, #24]
   113be:	9a09      	ldr	r2, [sp, #36]	; 0x24
   113c0:	429a      	cmp	r2, r3
   113c2:	d0e4      	beq.n	1138e <ticker_job+0x22c>
			flag_compare_update = 1;
   113c4:	9b04      	ldr	r3, [sp, #16]
   113c6:	9308      	str	r3, [sp, #32]
   113c8:	e7e1      	b.n	1138e <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   113ca:	23ff      	movs	r3, #255	; 0xff
   113cc:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   113ce:	2300      	movs	r3, #0
   113d0:	8373      	strh	r3, [r6, #26]
   113d2:	e036      	b.n	11442 <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   113d4:	686c      	ldr	r4, [r5, #4]
   113d6:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   113d8:	4628      	mov	r0, r5
   113da:	f7ff fb5b 	bl	10a94 <ticker_remainder_inc>
   113de:	4420      	add	r0, r4
			while (count--) {
   113e0:	463b      	mov	r3, r7
   113e2:	1e5f      	subs	r7, r3, #1
   113e4:	2b00      	cmp	r3, #0
   113e6:	d1f5      	bne.n	113d4 <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   113e8:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   113ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   113ec:	eb03 020a 	add.w	r2, r3, sl
   113f0:	6971      	ldr	r1, [r6, #20]
   113f2:	4628      	mov	r0, r5
   113f4:	f7ff fe8f 	bl	11116 <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   113f8:	8b2b      	ldrh	r3, [r5, #24]
   113fa:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   113fc:	2300      	movs	r3, #0
   113fe:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   11400:	f89d 3004 	ldrb.w	r3, [sp, #4]
   11404:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   11408:	786b      	ldrb	r3, [r5, #1]
   1140a:	3301      	adds	r3, #1
   1140c:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   1140e:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   11412:	f896 8018 	ldrb.w	r8, [r6, #24]
   11416:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1141a:	d026      	beq.n	1146a <ticker_job+0x308>
		ticker = &node[id_expired];
   1141c:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   11420:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   11424:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   11428:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   1142a:	9a03      	ldr	r2, [sp, #12]
   1142c:	4293      	cmp	r3, r2
   1142e:	d8c0      	bhi.n	113b2 <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   11430:	9a03      	ldr	r2, [sp, #12]
   11432:	1ad2      	subs	r2, r2, r3
   11434:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   11436:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   11438:	8b72      	ldrh	r2, [r6, #26]
   1143a:	4293      	cmp	r3, r2
   1143c:	d2c5      	bcs.n	113ca <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   1143e:	1ad3      	subs	r3, r2, r3
   11440:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   11442:	8aeb      	ldrh	r3, [r5, #22]
   11444:	b11b      	cbz	r3, 1144e <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   11446:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   1144a:	8aeb      	ldrh	r3, [r5, #22]
   1144c:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   1144e:	2300      	movs	r3, #0
   11450:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   11452:	f819 300b 	ldrb.w	r3, [r9, fp]
   11456:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   11458:	686b      	ldr	r3, [r5, #4]
   1145a:	b11b      	cbz	r3, 11464 <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   1145c:	8b2b      	ldrh	r3, [r5, #24]
   1145e:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   11460:	2000      	movs	r0, #0
   11462:	e7be      	b.n	113e2 <ticker_job+0x280>
			ticker->req = ticker->ack;
   11464:	78ab      	ldrb	r3, [r5, #2]
   11466:	706b      	strb	r3, [r5, #1]
   11468:	e7d3      	b.n	11412 <ticker_job+0x2b0>
   1146a:	f8dd b004 	ldr.w	fp, [sp, #4]
   1146e:	e7a4      	b.n	113ba <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   11470:	232c      	movs	r3, #44	; 0x2c
   11472:	9a03      	ldr	r2, [sp, #12]
   11474:	fb03 f302 	mul.w	r3, r3, r2
   11478:	9905      	ldr	r1, [sp, #20]
   1147a:	4419      	add	r1, r3
   1147c:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   1147e:	3201      	adds	r2, #1
   11480:	b2d2      	uxtb	r2, r2
   11482:	4611      	mov	r1, r2
   11484:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   11486:	9a04      	ldr	r2, [sp, #16]
   11488:	7812      	ldrb	r2, [r2, #0]
   1148a:	4291      	cmp	r1, r2
   1148c:	d013      	beq.n	114b6 <ticker_job+0x354>
				id_insert = user_op->id;
   1148e:	9a01      	ldr	r2, [sp, #4]
   11490:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   11492:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   11496:	0094      	lsls	r4, r2, #2
   11498:	9a02      	ldr	r2, [sp, #8]
   1149a:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   1149c:	9a05      	ldr	r2, [sp, #20]
   1149e:	5cd3      	ldrb	r3, [r2, r3]
   114a0:	2b03      	cmp	r3, #3
   114a2:	d16b      	bne.n	1157c <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   114a4:	7862      	ldrb	r2, [r4, #1]
   114a6:	78a3      	ldrb	r3, [r4, #2]
   114a8:	429a      	cmp	r2, r3
   114aa:	d007      	beq.n	114bc <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   114ac:	2101      	movs	r1, #1
   114ae:	9801      	ldr	r0, [sp, #4]
   114b0:	f7ff fb1e 	bl	10af0 <ticker_job_op_cb>
   114b4:	e062      	b.n	1157c <ticker_job+0x41a>
					first = 0;
   114b6:	9a06      	ldr	r2, [sp, #24]
   114b8:	9203      	str	r2, [sp, #12]
   114ba:	e7e8      	b.n	1148e <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   114bc:	9b00      	ldr	r3, [sp, #0]
   114be:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   114c0:	9801      	ldr	r0, [sp, #4]
   114c2:	68c3      	ldr	r3, [r0, #12]
   114c4:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   114c6:	6903      	ldr	r3, [r0, #16]
   114c8:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   114ca:	8a83      	ldrh	r3, [r0, #20]
   114cc:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   114ce:	8ac3      	ldrh	r3, [r0, #22]
   114d0:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   114d2:	6983      	ldr	r3, [r0, #24]
   114d4:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   114d6:	69c3      	ldr	r3, [r0, #28]
   114d8:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   114da:	6883      	ldr	r3, [r0, #8]
   114dc:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   114de:	2500      	movs	r5, #0
   114e0:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   114e2:	6842      	ldr	r2, [r0, #4]
   114e4:	4620      	mov	r0, r4
   114e6:	f7ff fe16 	bl	11116 <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   114ea:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   114ec:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   114ee:	2301      	movs	r3, #1
   114f0:	70e3      	strb	r3, [r4, #3]
   114f2:	e054      	b.n	1159e <ticker_job+0x43c>
		skip = 0;
   114f4:	f04f 0a00 	mov.w	sl, #0
   114f8:	e00e      	b.n	11518 <ticker_job+0x3b6>
				skip_collide = 0;
   114fa:	2300      	movs	r3, #0
   114fc:	e021      	b.n	11542 <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   114fe:	6865      	ldr	r5, [r4, #4]
   11500:	2d00      	cmp	r5, #0
   11502:	d05b      	beq.n	115bc <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   11504:	4620      	mov	r0, r4
   11506:	f7ff fac5 	bl	10a94 <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   1150a:	4428      	add	r0, r5
   1150c:	68a5      	ldr	r5, [r4, #8]
   1150e:	4405      	add	r5, r0
   11510:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   11512:	8b63      	ldrh	r3, [r4, #26]
   11514:	3301      	adds	r3, #1
   11516:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   11518:	4639      	mov	r1, r7
   1151a:	9800      	ldr	r0, [sp, #0]
   1151c:	f7ff fa2a 	bl	10974 <ticker_enqueue>
   11520:	4605      	mov	r5, r0
   11522:	4287      	cmp	r7, r0
   11524:	d021      	beq.n	1156a <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   11526:	2dff      	cmp	r5, #255	; 0xff
   11528:	d0e9      	beq.n	114fe <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   1152a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1152e:	ea4f 0883 	mov.w	r8, r3, lsl #2
   11532:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   11536:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   11538:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   1153a:	4293      	cmp	r3, r2
   1153c:	d9dd      	bls.n	114fa <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   1153e:	1a9b      	subs	r3, r3, r2
   11540:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   11542:	6872      	ldr	r2, [r6, #4]
   11544:	2a00      	cmp	r2, #0
   11546:	d0da      	beq.n	114fe <ticker_job+0x39c>
   11548:	4553      	cmp	r3, sl
   1154a:	d8d8      	bhi.n	114fe <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   1154c:	78f2      	ldrb	r2, [r6, #3]
   1154e:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   11550:	429a      	cmp	r2, r3
   11552:	d2d4      	bcs.n	114fe <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   11554:	4629      	mov	r1, r5
   11556:	9800      	ldr	r0, [sp, #0]
   11558:	f7ff fa6c 	bl	10a34 <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   1155c:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   1155e:	78b3      	ldrb	r3, [r6, #2]
   11560:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   11562:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   11566:	46ab      	mov	fp, r5
   11568:	e7d6      	b.n	11518 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   1156a:	78a3      	ldrb	r3, [r4, #2]
   1156c:	3301      	adds	r3, #1
   1156e:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   11570:	2100      	movs	r1, #0
			if (user_op) {
   11572:	9b01      	ldr	r3, [sp, #4]
   11574:	b113      	cbz	r3, 1157c <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   11576:	4618      	mov	r0, r3
   11578:	f7ff faba 	bl	10af0 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   1157c:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11580:	d01e      	beq.n	115c0 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   11582:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   11586:	f43f af73 	beq.w	11470 <ticker_job+0x30e>
				ticker = &node[id_insert];
   1158a:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   1158e:	0093      	lsls	r3, r2, #2
   11590:	9a02      	ldr	r2, [sp, #8]
   11592:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   11594:	465f      	mov	r7, fp
				insert_head = ticker->next;
   11596:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   1159a:	2300      	movs	r3, #0
   1159c:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   1159e:	9b00      	ldr	r3, [sp, #0]
   115a0:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   115a4:	23ff      	movs	r3, #255	; 0xff
   115a6:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   115a8:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   115ac:	8b23      	ldrh	r3, [r4, #24]
   115ae:	459a      	cmp	sl, r3
   115b0:	d9a0      	bls.n	114f4 <ticker_job+0x392>
		skip = ticker->lazy_current -
   115b2:	ebaa 0a03 	sub.w	sl, sl, r3
   115b6:	fa1f fa8a 	uxth.w	sl, sl
   115ba:	e7ad      	b.n	11518 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   115bc:	2101      	movs	r1, #1
   115be:	e7d8      	b.n	11572 <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   115c0:	9b04      	ldr	r3, [sp, #16]
   115c2:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   115c4:	9a03      	ldr	r2, [sp, #12]
   115c6:	429a      	cmp	r2, r3
   115c8:	d1db      	bne.n	11582 <ticker_job+0x420>
	while (count_user--) {
   115ca:	9b07      	ldr	r3, [sp, #28]
   115cc:	1e5a      	subs	r2, r3, #1
   115ce:	b2d2      	uxtb	r2, r2
   115d0:	9207      	str	r2, [sp, #28]
   115d2:	b153      	cbz	r3, 115ea <ticker_job+0x488>
		user = &users[count_user];
   115d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   115d6:	9a07      	ldr	r2, [sp, #28]
   115d8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   115dc:	461a      	mov	r2, r3
   115de:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   115e0:	685b      	ldr	r3, [r3, #4]
   115e2:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   115e4:	7853      	ldrb	r3, [r2, #1]
   115e6:	9303      	str	r3, [sp, #12]
   115e8:	e7c8      	b.n	1157c <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   115ea:	9b00      	ldr	r3, [sp, #0]
   115ec:	7e1b      	ldrb	r3, [r3, #24]
   115ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
   115f0:	429a      	cmp	r2, r3
   115f2:	d001      	beq.n	115f8 <ticker_job+0x496>
		flag_compare_update = 1;
   115f4:	2301      	movs	r3, #1
   115f6:	9308      	str	r3, [sp, #32]
	if (!pending) {
   115f8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   115fa:	b18b      	cbz	r3, 11620 <ticker_job+0x4be>
	instance->job_guard = 0;
   115fc:	2300      	movs	r3, #0
   115fe:	9a00      	ldr	r2, [sp, #0]
   11600:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   11602:	9b08      	ldr	r3, [sp, #32]
   11604:	2b00      	cmp	r3, #0
   11606:	d13f      	bne.n	11688 <ticker_job+0x526>
	if (instance->worker_trigger) {
   11608:	9b00      	ldr	r3, [sp, #0]
   1160a:	7f5b      	ldrb	r3, [r3, #29]
   1160c:	b12b      	cbz	r3, 1161a <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   1160e:	9b00      	ldr	r3, [sp, #0]
   11610:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   11612:	2201      	movs	r2, #1
   11614:	4611      	mov	r1, r2
   11616:	2002      	movs	r0, #2
   11618:	4798      	blx	r3
}
   1161a:	b00d      	add	sp, #52	; 0x34
   1161c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   11620:	9a00      	ldr	r2, [sp, #0]
   11622:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   11626:	7a53      	ldrb	r3, [r2, #9]
   11628:	e026      	b.n	11678 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   1162a:	2300      	movs	r3, #0
   1162c:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   1162e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   11630:	b113      	cbz	r3, 11638 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   11632:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   11634:	6a38      	ldr	r0, [r7, #32]
   11636:	4798      	blx	r3
			first = user->first + 1;
   11638:	7863      	ldrb	r3, [r4, #1]
   1163a:	3301      	adds	r3, #1
   1163c:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   1163e:	7822      	ldrb	r2, [r4, #0]
   11640:	4293      	cmp	r3, r2
   11642:	d016      	beq.n	11672 <ticker_job+0x510>
			user->first = first;
   11644:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   11646:	7862      	ldrb	r2, [r4, #1]
   11648:	78e3      	ldrb	r3, [r4, #3]
   1164a:	429a      	cmp	r2, r3
   1164c:	d013      	beq.n	11676 <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   1164e:	232c      	movs	r3, #44	; 0x2c
   11650:	fb03 f302 	mul.w	r3, r3, r2
   11654:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   11656:	5ceb      	ldrb	r3, [r5, r3]
   11658:	2b01      	cmp	r3, #1
   1165a:	d0e6      	beq.n	1162a <ticker_job+0x4c8>
   1165c:	2b02      	cmp	r3, #2
   1165e:	d106      	bne.n	1166e <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   11660:	68fb      	ldr	r3, [r7, #12]
   11662:	68ba      	ldr	r2, [r7, #8]
   11664:	6879      	ldr	r1, [r7, #4]
   11666:	9800      	ldr	r0, [sp, #0]
   11668:	f7ff f955 	bl	10916 <ticker_by_next_slot_get>
   1166c:	e7dd      	b.n	1162a <ticker_job+0x4c8>
	fp_op_func = NULL;
   1166e:	2300      	movs	r3, #0
   11670:	e7de      	b.n	11630 <ticker_job+0x4ce>
				first = 0;
   11672:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   11674:	e7e6      	b.n	11644 <ticker_job+0x4e2>
	while (count_user--) {
   11676:	4633      	mov	r3, r6
   11678:	1e5e      	subs	r6, r3, #1
   1167a:	b2f6      	uxtb	r6, r6
   1167c:	2b00      	cmp	r3, #0
   1167e:	d0bd      	beq.n	115fc <ticker_job+0x49a>
		user = &users[count_user];
   11680:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   11684:	6865      	ldr	r5, [r4, #4]
   11686:	e7de      	b.n	11646 <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   11688:	7e13      	ldrb	r3, [r2, #24]
   1168a:	2bff      	cmp	r3, #255	; 0xff
   1168c:	d02f      	beq.n	116ee <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   1168e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   11690:	2bff      	cmp	r3, #255	; 0xff
   11692:	d034      	beq.n	116fe <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   11694:	9800      	ldr	r0, [sp, #0]
   11696:	6802      	ldr	r2, [r0, #0]
   11698:	7e03      	ldrb	r3, [r0, #24]
   1169a:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   1169e:	0099      	lsls	r1, r3, #2
   116a0:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   116a2:	6897      	ldr	r7, [r2, #8]
	i = 10;
   116a4:	250a      	movs	r5, #10
   116a6:	4680      	mov	r8, r0
		LL_ASSERT(i);
   116a8:	b39d      	cbz	r5, 11712 <ticker_job+0x5b0>
		i--;
   116aa:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   116ac:	f7fd ff68 	bl	f580 <cntr_cnt_get>
   116b0:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   116b2:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   116b6:	4621      	mov	r1, r4
   116b8:	f7ff fcce 	bl	11058 <ticker_ticks_diff_get>
   116bc:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   116be:	4287      	cmp	r7, r0
   116c0:	bf2c      	ite	cs
   116c2:	19e4      	addcs	r4, r4, r7
   116c4:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   116c6:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   116ca:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   116ce:	4620      	mov	r0, r4
   116d0:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   116d2:	f7fd ff55 	bl	f580 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   116d6:	4631      	mov	r1, r6
   116d8:	f7ff fcbe 	bl	11058 <ticker_ticks_diff_get>
   116dc:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   116e0:	4631      	mov	r1, r6
   116e2:	4620      	mov	r0, r4
   116e4:	f7ff fcb8 	bl	11058 <ticker_ticks_diff_get>
   116e8:	4581      	cmp	r9, r0
   116ea:	d8dd      	bhi.n	116a8 <ticker_job+0x546>
   116ec:	e78c      	b.n	11608 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   116ee:	f7fd ff2d 	bl	f54c <cntr_stop>
   116f2:	2800      	cmp	r0, #0
   116f4:	d188      	bne.n	11608 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   116f6:	2300      	movs	r3, #0
   116f8:	9a00      	ldr	r2, [sp, #0]
   116fa:	8353      	strh	r3, [r2, #26]
   116fc:	e784      	b.n	11608 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   116fe:	f7fd ff3f 	bl	f580 <cntr_cnt_get>
   11702:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   11704:	f7fd ff12 	bl	f52c <cntr_start>
   11708:	2800      	cmp	r0, #0
   1170a:	d1c3      	bne.n	11694 <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   1170c:	9b00      	ldr	r3, [sp, #0]
   1170e:	615c      	str	r4, [r3, #20]
   11710:	e7c0      	b.n	11694 <ticker_job+0x532>
		LL_ASSERT(i);
   11712:	4040      	eors	r0, r0
   11714:	f380 8811 	msr	BASEPRI, r0
   11718:	f04f 0004 	mov.w	r0, #4
   1171c:	df02      	svc	2
	...

00011720 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   11720:	b570      	push	{r4, r5, r6, lr}
   11722:	4606      	mov	r6, r0
   11724:	460c      	mov	r4, r1
	while (len) {
   11726:	b19c      	cbz	r4, 11750 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   11728:	4d0a      	ldr	r5, [pc, #40]	; (11754 <bt_rand+0x34>)
   1172a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1172e:	4628      	mov	r0, r5
   11730:	f016 fe48 	bl	283c4 <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   11734:	4631      	mov	r1, r6
   11736:	4620      	mov	r0, r4
   11738:	f7ff f89a 	bl	10870 <rand_get>
   1173c:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   1173e:	4628      	mov	r0, r5
   11740:	f016 feaa 	bl	28498 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   11744:	2c00      	cmp	r4, #0
   11746:	d0ee      	beq.n	11726 <bt_rand+0x6>
   11748:	bf20      	wfe
  __ASM volatile ("sev");
   1174a:	bf40      	sev
  __ASM volatile ("wfe");
   1174c:	bf20      	wfe
   1174e:	e7ea      	b.n	11726 <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   11750:	2000      	movs	r0, #0
   11752:	bd70      	pop	{r4, r5, r6, pc}
   11754:	2000d1c8 	.word	0x2000d1c8

00011758 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   11758:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   1175a:	2300      	movs	r3, #0
   1175c:	f7fd ff4c 	bl	f5f8 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   11760:	2000      	movs	r0, #0
   11762:	bd08      	pop	{r3, pc}

00011764 <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   11764:	6008      	str	r0, [r1, #0]
   11766:	4770      	bx	lr

00011768 <mayfly_xtal_start>:
{
   11768:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   1176a:	4b03      	ldr	r3, [pc, #12]	; (11778 <mayfly_xtal_start+0x10>)
   1176c:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   1176e:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   11770:	681b      	ldr	r3, [r3, #0]
   11772:	2100      	movs	r1, #0
   11774:	4798      	blx	r3
   11776:	bd08      	pop	{r3, pc}
   11778:	20000ff4 	.word	0x20000ff4

0001177c <mayfly_xtal_stop>:
{
   1177c:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   1177e:	4b03      	ldr	r3, [pc, #12]	; (1178c <mayfly_xtal_stop+0x10>)
   11780:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   11782:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   11784:	685b      	ldr	r3, [r3, #4]
   11786:	2100      	movs	r1, #0
   11788:	4798      	blx	r3
   1178a:	bd08      	pop	{r3, pc}
   1178c:	20000ff4 	.word	0x20000ff4

00011790 <prepare_reduced>:
	if (status == 0) {
   11790:	b918      	cbnz	r0, 1179a <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   11792:	680b      	ldr	r3, [r1, #0]
   11794:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   11798:	600b      	str	r3, [r1, #0]
   1179a:	4770      	bx	lr

0001179c <prepare_normal>:
	if (status == 0) {
   1179c:	b918      	cbnz	r0, 117a6 <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   1179e:	680b      	ldr	r3, [r1, #0]
   117a0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   117a4:	600b      	str	r3, [r1, #0]
   117a6:	4770      	bx	lr

000117a8 <chan_sel_remap>:
{
   117a8:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   117aa:	2405      	movs	r4, #5
	chan_next = 0;
   117ac:	2200      	movs	r2, #0
	while (byte_count--) {
   117ae:	e011      	b.n	117d4 <chan_sel_remap+0x2c>
			chan_next++;
   117b0:	3201      	adds	r2, #1
   117b2:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   117b4:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   117b6:	461c      	mov	r4, r3
   117b8:	1e63      	subs	r3, r4, #1
   117ba:	b2db      	uxtb	r3, r3
   117bc:	b134      	cbz	r4, 117cc <chan_sel_remap+0x24>
			if (bite & 0x01) {
   117be:	f015 0f01 	tst.w	r5, #1
   117c2:	d0f5      	beq.n	117b0 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   117c4:	b111      	cbz	r1, 117cc <chan_sel_remap+0x24>
				chan_index--;
   117c6:	3901      	subs	r1, #1
   117c8:	b2c9      	uxtb	r1, r1
   117ca:	e7f1      	b.n	117b0 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   117cc:	2b07      	cmp	r3, #7
   117ce:	d907      	bls.n	117e0 <chan_sel_remap+0x38>
		chan_map++;
   117d0:	3001      	adds	r0, #1
	while (byte_count--) {
   117d2:	4634      	mov	r4, r6
   117d4:	1e63      	subs	r3, r4, #1
   117d6:	b2de      	uxtb	r6, r3
   117d8:	b114      	cbz	r4, 117e0 <chan_sel_remap+0x38>
		bite = *chan_map;
   117da:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   117dc:	2408      	movs	r4, #8
		while (bit_count--) {
   117de:	e7eb      	b.n	117b8 <chan_sel_remap+0x10>
}
   117e0:	4610      	mov	r0, r2
   117e2:	bc70      	pop	{r4, r5, r6}
   117e4:	4770      	bx	lr
	...

000117e8 <chan_sel_1>:
{
   117e8:	b570      	push	{r4, r5, r6, lr}
   117ea:	4605      	mov	r5, r0
   117ec:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   117f0:	7804      	ldrb	r4, [r0, #0]
   117f2:	fb02 1101 	mla	r1, r2, r1, r1
   117f6:	4421      	add	r1, r4
   117f8:	4c0f      	ldr	r4, [pc, #60]	; (11838 <chan_sel_1+0x50>)
   117fa:	fb84 2401 	smull	r2, r4, r4, r1
   117fe:	1862      	adds	r2, r4, r1
   11800:	17cc      	asrs	r4, r1, #31
   11802:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   11806:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1180a:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   1180e:	1b0c      	subs	r4, r1, r4
   11810:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   11812:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   11814:	08c2      	lsrs	r2, r0, #3
   11816:	5c9a      	ldrb	r2, [r3, r2]
   11818:	f004 0407 	and.w	r4, r4, #7
   1181c:	fa42 f404 	asr.w	r4, r2, r4
   11820:	f014 0f01 	tst.w	r4, #1
   11824:	d107      	bne.n	11836 <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   11826:	fbb0 f1f6 	udiv	r1, r0, r6
   1182a:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   1182e:	b2c9      	uxtb	r1, r1
   11830:	4618      	mov	r0, r3
   11832:	f7ff ffb9 	bl	117a8 <chan_sel_remap>
}
   11836:	bd70      	pop	{r4, r5, r6, pc}
   11838:	dd67c8a7 	.word	0xdd67c8a7

0001183c <chan_rev_8>:
	o = 0;
   1183c:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   1183e:	461a      	mov	r2, r3
   11840:	e007      	b.n	11852 <chan_rev_8+0x16>
		o <<= 1;
   11842:	005b      	lsls	r3, r3, #1
   11844:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   11846:	f000 0101 	and.w	r1, r0, #1
   1184a:	430b      	orrs	r3, r1
		i >>= 1;
   1184c:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   1184e:	3201      	adds	r2, #1
   11850:	b2d2      	uxtb	r2, r2
   11852:	2a07      	cmp	r2, #7
   11854:	d9f5      	bls.n	11842 <chan_rev_8+0x6>
}
   11856:	4618      	mov	r0, r3
   11858:	4770      	bx	lr

0001185a <chan_perm>:
{
   1185a:	b538      	push	{r3, r4, r5, lr}
   1185c:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   1185e:	0a00      	lsrs	r0, r0, #8
   11860:	f7ff ffec 	bl	1183c <chan_rev_8>
   11864:	0205      	lsls	r5, r0, #8
   11866:	b2e0      	uxtb	r0, r4
   11868:	f7ff ffe8 	bl	1183c <chan_rev_8>
   1186c:	b200      	sxth	r0, r0
   1186e:	4328      	orrs	r0, r5
}
   11870:	b280      	uxth	r0, r0
   11872:	bd38      	pop	{r3, r4, r5, pc}

00011874 <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   11874:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   11878:	fa11 f080 	uxtah	r0, r1, r0
}
   1187c:	b280      	uxth	r0, r0
   1187e:	4770      	bx	lr

00011880 <chan_prn>:
{
   11880:	b538      	push	{r3, r4, r5, lr}
   11882:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   11884:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   11886:	2400      	movs	r4, #0
   11888:	e006      	b.n	11898 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   1188a:	f7ff ffe6 	bl	1185a <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   1188e:	4629      	mov	r1, r5
   11890:	f7ff fff0 	bl	11874 <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   11894:	3401      	adds	r4, #1
   11896:	b2e4      	uxtb	r4, r4
   11898:	2c02      	cmp	r4, #2
   1189a:	d9f6      	bls.n	1188a <chan_prn+0xa>
	prn_e ^= chan_id;
   1189c:	4068      	eors	r0, r5
}
   1189e:	b280      	uxth	r0, r0
   118a0:	bd38      	pop	{r3, r4, r5, pc}
	...

000118a4 <chan_sel_2>:
{
   118a4:	b538      	push	{r3, r4, r5, lr}
   118a6:	4615      	mov	r5, r2
   118a8:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   118aa:	f7ff ffe9 	bl	11880 <chan_prn>
   118ae:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   118b0:	4a0e      	ldr	r2, [pc, #56]	; (118ec <chan_sel_2+0x48>)
   118b2:	fba2 3200 	umull	r3, r2, r2, r0
   118b6:	1a80      	subs	r0, r0, r2
   118b8:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   118bc:	0952      	lsrs	r2, r2, #5
   118be:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   118c2:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   118c6:	1a8a      	subs	r2, r1, r2
   118c8:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   118ca:	08c3      	lsrs	r3, r0, #3
   118cc:	5ceb      	ldrb	r3, [r5, r3]
   118ce:	f000 0207 	and.w	r2, r0, #7
   118d2:	4113      	asrs	r3, r2
   118d4:	f013 0f01 	tst.w	r3, #1
   118d8:	d106      	bne.n	118e8 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   118da:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   118de:	f3c1 4107 	ubfx	r1, r1, #16, #8
   118e2:	4628      	mov	r0, r5
   118e4:	f7ff ff60 	bl	117a8 <chan_sel_remap>
}
   118e8:	bd38      	pop	{r3, r4, r5, pc}
   118ea:	bf00      	nop
   118ec:	bacf914d 	.word	0xbacf914d

000118f0 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   118f0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   118f4:	681b      	ldr	r3, [r3, #0]
   118f6:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   118f8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   118fc:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   118fe:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   11902:	4770      	bx	lr

00011904 <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   11904:	b538      	push	{r3, r4, r5, lr}
   11906:	4604      	mov	r4, r0
   11908:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   1190a:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   1190e:	f013 0f80 	tst.w	r3, #128	; 0x80
   11912:	d11f      	bne.n	11954 <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   11914:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   11918:	b1e2      	cbz	r2, 11954 <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   1191a:	f013 0f08 	tst.w	r3, #8
   1191e:	d119      	bne.n	11954 <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   11920:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   11924:	429a      	cmp	r2, r3
   11926:	d007      	beq.n	11938 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   11928:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   1192c:	b143      	cbz	r3, 11940 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   1192e:	4629      	mov	r1, r5
   11930:	4620      	mov	r0, r4
   11932:	f7ff ffdd 	bl	118f0 <ctrl_tx_last_enqueue>
   11936:	e014      	b.n	11962 <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   11938:	681b      	ldr	r3, [r3, #0]
   1193a:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   1193e:	e7f3      	b.n	11928 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   11940:	6813      	ldr	r3, [r2, #0]
   11942:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   11944:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11948:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   1194a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   1194e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   11952:	e006      	b.n	11962 <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   11954:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11958:	b133      	cbz	r3, 11968 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   1195a:	4629      	mov	r1, r5
   1195c:	4620      	mov	r0, r4
   1195e:	f7ff ffc7 	bl	118f0 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   11962:	682b      	ldr	r3, [r5, #0]
   11964:	b153      	cbz	r3, 1197c <ctrl_tx_enqueue+0x78>
   11966:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   11968:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   1196c:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   1196e:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   11972:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   11976:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   1197a:	e7f2      	b.n	11962 <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   1197c:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   11980:	e7f1      	b.n	11966 <ctrl_tx_enqueue+0x62>

00011982 <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   11982:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   11984:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11988:	f013 0f08 	tst.w	r3, #8
   1198c:	d010      	beq.n	119b0 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   1198e:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11992:	b13b      	cbz	r3, 119a4 <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   11994:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   11998:	681b      	ldr	r3, [r3, #0]
   1199a:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   1199c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   119a0:	6019      	str	r1, [r3, #0]
   119a2:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   119a4:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   119a8:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   119aa:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   119ae:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   119b0:	f7ff ffa8 	bl	11904 <ctrl_tx_enqueue>
   119b4:	bd08      	pop	{r3, pc}
	...

000119b8 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   119b8:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   119bc:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   119c0:	428b      	cmp	r3, r1
   119c2:	d001      	beq.n	119c8 <conn_update_req+0x10>
		return 1;
   119c4:	2001      	movs	r0, #1
   119c6:	4770      	bx	lr
{
   119c8:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   119ca:	f990 301d 	ldrsb.w	r3, [r0, #29]
   119ce:	2b00      	cmp	r3, #0
   119d0:	db2a      	blt.n	11a28 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   119d2:	2401      	movs	r4, #1
   119d4:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   119d8:	2200      	movs	r2, #0
   119da:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   119de:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   119e0:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   119e4:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   119e6:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   119ea:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   119ec:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   119f0:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   119f4:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   119f8:	4d26      	ldr	r5, [pc, #152]	; (11a94 <conn_update_req+0xdc>)
   119fa:	fb85 e503 	smull	lr, r5, r5, r3
   119fe:	17db      	asrs	r3, r3, #31
   11a00:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   11a04:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   11a08:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   11a0c:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   11a10:	b2db      	uxtb	r3, r3
   11a12:	f043 0304 	orr.w	r3, r3, #4
   11a16:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   11a1a:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   11a1e:	3901      	subs	r1, #1
   11a20:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   11a24:	4610      	mov	r0, r2
   11a26:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   11a28:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   11a2c:	f013 0f20 	tst.w	r3, #32
   11a30:	d101      	bne.n	11a36 <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   11a32:	2002      	movs	r0, #2
   11a34:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   11a36:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   11a3a:	f013 0f02 	tst.w	r3, #2
   11a3e:	d101      	bne.n	11a44 <conn_update_req+0x8c>
	return 2;
   11a40:	2002      	movs	r0, #2
}
   11a42:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   11a44:	2300      	movs	r3, #0
   11a46:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   11a4a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   11a4c:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   11a50:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   11a52:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   11a56:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11a58:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   11a5c:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   11a60:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   11a64:	490b      	ldr	r1, [pc, #44]	; (11a94 <conn_update_req+0xdc>)
   11a66:	fb81 4102 	smull	r4, r1, r1, r2
   11a6a:	17d2      	asrs	r2, r2, #31
   11a6c:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11a70:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   11a74:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   11a78:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   11a7c:	f363 02c3 	bfi	r2, r3, #3, #1
   11a80:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   11a84:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11a88:	3a01      	subs	r2, #1
   11a8a:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   11a8e:	4618      	mov	r0, r3
   11a90:	bd30      	pop	{r4, r5, pc}
   11a92:	bf00      	nop
   11a94:	10624dd3 	.word	0x10624dd3

00011a98 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   11a98:	4a0d      	ldr	r2, [pc, #52]	; (11ad0 <rx_fc_lock+0x38>)
   11a9a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11a9e:	b2db      	uxtb	r3, r3
   11aa0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   11aa4:	4293      	cmp	r3, r2
   11aa6:	d000      	beq.n	11aaa <rx_fc_lock+0x12>
   11aa8:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   11aaa:	4a09      	ldr	r2, [pc, #36]	; (11ad0 <rx_fc_lock+0x38>)
   11aac:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11ab0:	33b8      	adds	r3, #184	; 0xb8
   11ab2:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   11ab6:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   11ab8:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11abc:	3301      	adds	r3, #1
   11abe:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   11ac0:	2b03      	cmp	r3, #3
   11ac2:	d003      	beq.n	11acc <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   11ac4:	4a02      	ldr	r2, [pc, #8]	; (11ad0 <rx_fc_lock+0x38>)
   11ac6:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   11aca:	e7ed      	b.n	11aa8 <rx_fc_lock+0x10>
			req = 0;
   11acc:	2300      	movs	r3, #0
   11ace:	e7f9      	b.n	11ac4 <rx_fc_lock+0x2c>
   11ad0:	20000ff4 	.word	0x20000ff4

00011ad4 <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   11ad4:	b900      	cbnz	r0, 11ad8 <ticker_success_assert+0x4>
   11ad6:	4770      	bx	lr
   11ad8:	4040      	eors	r0, r0
   11ada:	f380 8811 	msr	BASEPRI, r0
   11ade:	f04f 0004 	mov.w	r0, #4
   11ae2:	df02      	svc	2

00011ae4 <start_enc_rsp_send>:
{
   11ae4:	b510      	push	{r4, lr}
   11ae6:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   11ae8:	b171      	cbz	r1, 11b08 <start_enc_rsp_send+0x24>
   11aea:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   11aec:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11aee:	781a      	ldrb	r2, [r3, #0]
   11af0:	f042 0203 	orr.w	r2, r2, #3
   11af4:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11af6:	2201      	movs	r2, #1
   11af8:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11afa:	2206      	movs	r2, #6
   11afc:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   11afe:	b111      	cbz	r1, 11b06 <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   11b00:	4620      	mov	r0, r4
   11b02:	f7ff feff 	bl	11904 <ctrl_tx_enqueue>
   11b06:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11b08:	4806      	ldr	r0, [pc, #24]	; (11b24 <start_enc_rsp_send+0x40>)
   11b0a:	f7fd fc68 	bl	f3de <mem_acquire>
		LL_ASSERT(node_tx);
   11b0e:	4601      	mov	r1, r0
   11b10:	b108      	cbz	r0, 11b16 <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   11b12:	1d03      	adds	r3, r0, #4
   11b14:	e7eb      	b.n	11aee <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   11b16:	4040      	eors	r0, r0
   11b18:	f380 8811 	msr	BASEPRI, r0
   11b1c:	f04f 0004 	mov.w	r0, #4
   11b20:	df02      	svc	2
   11b22:	bf00      	nop
   11b24:	2000114c 	.word	0x2000114c

00011b28 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11b28:	2801      	cmp	r0, #1
   11b2a:	d005      	beq.n	11b38 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11b2c:	4b0d      	ldr	r3, [pc, #52]	; (11b64 <ticker_stop_adv_assert+0x3c>)
   11b2e:	7b1b      	ldrb	r3, [r3, #12]
   11b30:	b2db      	uxtb	r3, r3
   11b32:	2b05      	cmp	r3, #5
   11b34:	d00f      	beq.n	11b56 <ticker_stop_adv_assert+0x2e>
   11b36:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11b38:	4b0a      	ldr	r3, [pc, #40]	; (11b64 <ticker_stop_adv_assert+0x3c>)
   11b3a:	7b9b      	ldrb	r3, [r3, #14]
   11b3c:	b2db      	uxtb	r3, r3
   11b3e:	2b05      	cmp	r3, #5
   11b40:	d103      	bne.n	11b4a <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   11b42:	2200      	movs	r2, #0
   11b44:	4b07      	ldr	r3, [pc, #28]	; (11b64 <ticker_stop_adv_assert+0x3c>)
   11b46:	739a      	strb	r2, [r3, #14]
   11b48:	4770      	bx	lr
			LL_ASSERT(0);
   11b4a:	4040      	eors	r0, r0
   11b4c:	f380 8811 	msr	BASEPRI, r0
   11b50:	f04f 0004 	mov.w	r0, #4
   11b54:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11b56:	4040      	eors	r0, r0
   11b58:	f380 8811 	msr	BASEPRI, r0
   11b5c:	f04f 0004 	mov.w	r0, #4
   11b60:	df02      	svc	2
   11b62:	bf00      	nop
   11b64:	20000ff4 	.word	0x20000ff4

00011b68 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11b68:	2801      	cmp	r0, #1
   11b6a:	d005      	beq.n	11b78 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11b6c:	4b0d      	ldr	r3, [pc, #52]	; (11ba4 <ticker_stop_scan_assert+0x3c>)
   11b6e:	7b1b      	ldrb	r3, [r3, #12]
   11b70:	b2db      	uxtb	r3, r3
   11b72:	2b06      	cmp	r3, #6
   11b74:	d00f      	beq.n	11b96 <ticker_stop_scan_assert+0x2e>
   11b76:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11b78:	4b0a      	ldr	r3, [pc, #40]	; (11ba4 <ticker_stop_scan_assert+0x3c>)
   11b7a:	7b9b      	ldrb	r3, [r3, #14]
   11b7c:	b2db      	uxtb	r3, r3
   11b7e:	2b06      	cmp	r3, #6
   11b80:	d103      	bne.n	11b8a <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   11b82:	2200      	movs	r2, #0
   11b84:	4b07      	ldr	r3, [pc, #28]	; (11ba4 <ticker_stop_scan_assert+0x3c>)
   11b86:	739a      	strb	r2, [r3, #14]
   11b88:	4770      	bx	lr
			LL_ASSERT(0);
   11b8a:	4040      	eors	r0, r0
   11b8c:	f380 8811 	msr	BASEPRI, r0
   11b90:	f04f 0004 	mov.w	r0, #4
   11b94:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11b96:	4040      	eors	r0, r0
   11b98:	f380 8811 	msr	BASEPRI, r0
   11b9c:	f04f 0004 	mov.w	r0, #4
   11ba0:	df02      	svc	2
   11ba2:	bf00      	nop
   11ba4:	20000ff4 	.word	0x20000ff4

00011ba8 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11ba8:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11bac:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11bae:	1a9b      	subs	r3, r3, r2
   11bb0:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11bb2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11bb6:	da5b      	bge.n	11c70 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11bb8:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11bbc:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11bc0:	429a      	cmp	r2, r3
   11bc2:	d13d      	bne.n	11c40 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   11bc4:	4b2c      	ldr	r3, [pc, #176]	; (11c78 <conn_update+0xd0>)
   11bc6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11bca:	2b00      	cmp	r3, #0
   11bcc:	d03e      	beq.n	11c4c <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   11bce:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   11bd0:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   11bd4:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   11bd8:	f240 43e2 	movw	r3, #1250	; 0x4e2
   11bdc:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   11be0:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   11be4:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   11be8:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   11bec:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   11bf0:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   11bf4:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   11bf8:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   11bfc:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   11c00:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   11c04:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   11c08:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   11c0c:	f36f 0382 	bfc	r3, #2, #1
   11c10:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   11c14:	2301      	movs	r3, #1
   11c16:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   11c1a:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11c1e:	3b01      	subs	r3, #1
   11c20:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11c24:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   11c28:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11c2c:	429a      	cmp	r2, r3
   11c2e:	d021      	beq.n	11c74 <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11c30:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   11c34:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11c38:	2b04      	cmp	r3, #4
   11c3a:	d015      	beq.n	11c68 <conn_update+0xc0>
	return 0;
   11c3c:	2000      	movs	r0, #0
}
   11c3e:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11c40:	4040      	eors	r0, r0
   11c42:	f380 8811 	msr	BASEPRI, r0
   11c46:	f04f 0004 	mov.w	r0, #4
   11c4a:	df02      	svc	2
		LL_ASSERT(conn->role);
   11c4c:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11c50:	2b00      	cmp	r3, #0
   11c52:	da03      	bge.n	11c5c <conn_update+0xb4>
		_radio.conn_upd = conn;
   11c54:	4b08      	ldr	r3, [pc, #32]	; (11c78 <conn_update+0xd0>)
   11c56:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11c5a:	e7b8      	b.n	11bce <conn_update+0x26>
		LL_ASSERT(conn->role);
   11c5c:	4040      	eors	r0, r0
   11c5e:	f380 8811 	msr	BASEPRI, r0
   11c62:	f04f 0004 	mov.w	r0, #4
   11c66:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11c68:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11c6c:	2000      	movs	r0, #0
   11c6e:	4770      	bx	lr
		return 1;
   11c70:	2001      	movs	r0, #1
   11c72:	4770      	bx	lr
	return 0;
   11c74:	2000      	movs	r0, #0
   11c76:	4770      	bx	lr
   11c78:	20000ff4 	.word	0x20000ff4

00011c7c <pause_enc_rsp_send>:
{
   11c7c:	b510      	push	{r4, lr}
   11c7e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11c80:	480b      	ldr	r0, [pc, #44]	; (11cb0 <pause_enc_rsp_send+0x34>)
   11c82:	f7fd fbac 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11c86:	b160      	cbz	r0, 11ca2 <pause_enc_rsp_send+0x26>
   11c88:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11c8a:	7903      	ldrb	r3, [r0, #4]
   11c8c:	f043 0303 	orr.w	r3, r3, #3
   11c90:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11c92:	2301      	movs	r3, #1
   11c94:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11c96:	230b      	movs	r3, #11
   11c98:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11c9a:	4620      	mov	r0, r4
   11c9c:	f7ff fe32 	bl	11904 <ctrl_tx_enqueue>
   11ca0:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11ca2:	4040      	eors	r0, r0
   11ca4:	f380 8811 	msr	BASEPRI, r0
   11ca8:	f04f 0004 	mov.w	r0, #4
   11cac:	df02      	svc	2
   11cae:	bf00      	nop
   11cb0:	2000114c 	.word	0x2000114c

00011cb4 <ping_resp_send>:
{
   11cb4:	b510      	push	{r4, lr}
   11cb6:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11cb8:	480b      	ldr	r0, [pc, #44]	; (11ce8 <ping_resp_send+0x34>)
   11cba:	f7fd fb90 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11cbe:	b160      	cbz	r0, 11cda <ping_resp_send+0x26>
   11cc0:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11cc2:	7903      	ldrb	r3, [r0, #4]
   11cc4:	f043 0303 	orr.w	r3, r3, #3
   11cc8:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   11cca:	2301      	movs	r3, #1
   11ccc:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   11cce:	2313      	movs	r3, #19
   11cd0:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11cd2:	4620      	mov	r0, r4
   11cd4:	f7ff fe16 	bl	11904 <ctrl_tx_enqueue>
   11cd8:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11cda:	4040      	eors	r0, r0
   11cdc:	f380 8811 	msr	BASEPRI, r0
   11ce0:	f04f 0004 	mov.w	r0, #4
   11ce4:	df02      	svc	2
   11ce6:	bf00      	nop
   11ce8:	2000114c 	.word	0x2000114c

00011cec <length_resp_send>:
{
   11cec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11cee:	4604      	mov	r4, r0
   11cf0:	460f      	mov	r7, r1
   11cf2:	4615      	mov	r5, r2
   11cf4:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11cf6:	480e      	ldr	r0, [pc, #56]	; (11d30 <length_resp_send+0x44>)
   11cf8:	f7fd fb71 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11cfc:	b190      	cbz	r0, 11d24 <length_resp_send+0x38>
   11cfe:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d00:	7903      	ldrb	r3, [r0, #4]
   11d02:	f043 0303 	orr.w	r3, r3, #3
   11d06:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d08:	2309      	movs	r3, #9
   11d0a:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11d0c:	2315      	movs	r3, #21
   11d0e:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   11d10:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   11d12:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   11d14:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   11d16:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11d1a:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11d1c:	4620      	mov	r0, r4
   11d1e:	f7ff fdf1 	bl	11904 <ctrl_tx_enqueue>
   11d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   11d24:	4040      	eors	r0, r0
   11d26:	f380 8811 	msr	BASEPRI, r0
   11d2a:	f04f 0004 	mov.w	r0, #4
   11d2e:	df02      	svc	2
   11d30:	2000114c 	.word	0x2000114c

00011d34 <reject_ext_ind_send>:
{
   11d34:	b570      	push	{r4, r5, r6, lr}
   11d36:	4604      	mov	r4, r0
   11d38:	460e      	mov	r6, r1
   11d3a:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d3c:	480c      	ldr	r0, [pc, #48]	; (11d70 <reject_ext_ind_send+0x3c>)
   11d3e:	f7fd fb4e 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11d42:	b170      	cbz	r0, 11d62 <reject_ext_ind_send+0x2e>
   11d44:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d46:	7903      	ldrb	r3, [r0, #4]
   11d48:	f043 0303 	orr.w	r3, r3, #3
   11d4c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d4e:	2303      	movs	r3, #3
   11d50:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   11d52:	2311      	movs	r3, #17
   11d54:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   11d56:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11d58:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11d5a:	4620      	mov	r0, r4
   11d5c:	f7ff fdd2 	bl	11904 <ctrl_tx_enqueue>
   11d60:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   11d62:	4040      	eors	r0, r0
   11d64:	f380 8811 	msr	BASEPRI, r0
   11d68:	f04f 0004 	mov.w	r0, #4
   11d6c:	df02      	svc	2
   11d6e:	bf00      	nop
   11d70:	2000114c 	.word	0x2000114c

00011d74 <phy_rsp_send>:
{
   11d74:	b510      	push	{r4, lr}
   11d76:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11d78:	4810      	ldr	r0, [pc, #64]	; (11dbc <phy_rsp_send+0x48>)
   11d7a:	f7fd fb30 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11d7e:	b1b0      	cbz	r0, 11dae <phy_rsp_send+0x3a>
   11d80:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11d82:	7903      	ldrb	r3, [r0, #4]
   11d84:	f043 0303 	orr.w	r3, r3, #3
   11d88:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11d8a:	2303      	movs	r3, #3
   11d8c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11d8e:	2317      	movs	r3, #23
   11d90:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   11d92:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   11d96:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11d9a:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11d9c:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11da0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   11da4:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11da6:	4620      	mov	r0, r4
   11da8:	f7ff fdac 	bl	11904 <ctrl_tx_enqueue>
   11dac:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11dae:	4040      	eors	r0, r0
   11db0:	f380 8811 	msr	BASEPRI, r0
   11db4:	f04f 0004 	mov.w	r0, #4
   11db8:	df02      	svc	2
   11dba:	bf00      	nop
   11dbc:	2000114c 	.word	0x2000114c

00011dc0 <unknown_rsp_send>:
{
   11dc0:	b538      	push	{r3, r4, r5, lr}
   11dc2:	4604      	mov	r4, r0
   11dc4:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11dc6:	480c      	ldr	r0, [pc, #48]	; (11df8 <unknown_rsp_send+0x38>)
   11dc8:	f7fd fb09 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   11dcc:	b168      	cbz	r0, 11dea <unknown_rsp_send+0x2a>
   11dce:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11dd0:	7903      	ldrb	r3, [r0, #4]
   11dd2:	f043 0303 	orr.w	r3, r3, #3
   11dd6:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   11dd8:	2302      	movs	r3, #2
   11dda:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   11ddc:	2307      	movs	r3, #7
   11dde:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   11de0:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   11de2:	4620      	mov	r0, r4
   11de4:	f7ff fd8e 	bl	11904 <ctrl_tx_enqueue>
   11de8:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11dea:	4040      	eors	r0, r0
   11dec:	f380 8811 	msr	BASEPRI, r0
   11df0:	f04f 0004 	mov.w	r0, #4
   11df4:	df02      	svc	2
   11df6:	bf00      	nop
   11df8:	2000114c 	.word	0x2000114c

00011dfc <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11dfc:	b120      	cbz	r0, 11e08 <ticker_update_adv_assert+0xc>
   11dfe:	4b06      	ldr	r3, [pc, #24]	; (11e18 <ticker_update_adv_assert+0x1c>)
   11e00:	7b9b      	ldrb	r3, [r3, #14]
   11e02:	b2db      	uxtb	r3, r3
   11e04:	2b05      	cmp	r3, #5
   11e06:	d100      	bne.n	11e0a <ticker_update_adv_assert+0xe>
   11e08:	4770      	bx	lr
   11e0a:	4040      	eors	r0, r0
   11e0c:	f380 8811 	msr	BASEPRI, r0
   11e10:	f04f 0004 	mov.w	r0, #4
   11e14:	df02      	svc	2
   11e16:	bf00      	nop
   11e18:	20000ff4 	.word	0x20000ff4

00011e1c <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11e1c:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11e1e:	b120      	cbz	r0, 11e2a <ticker_update_slave_assert+0xe>
   11e20:	4b05      	ldr	r3, [pc, #20]	; (11e38 <ticker_update_slave_assert+0x1c>)
   11e22:	7b9b      	ldrb	r3, [r3, #14]
   11e24:	b2db      	uxtb	r3, r3
   11e26:	4299      	cmp	r1, r3
   11e28:	d100      	bne.n	11e2c <ticker_update_slave_assert+0x10>
   11e2a:	4770      	bx	lr
   11e2c:	4040      	eors	r0, r0
   11e2e:	f380 8811 	msr	BASEPRI, r0
   11e32:	f04f 0004 	mov.w	r0, #4
   11e36:	df02      	svc	2
   11e38:	20000ff4 	.word	0x20000ff4

00011e3c <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11e3c:	b930      	cbnz	r0, 11e4c <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11e3e:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   11e42:	f36f 0341 	bfc	r3, #1, #1
   11e46:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11e4a:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11e4c:	4040      	eors	r0, r0
   11e4e:	f380 8811 	msr	BASEPRI, r0
   11e52:	f04f 0004 	mov.w	r0, #4
   11e56:	df02      	svc	2

00011e58 <packet_rx_allocate>:
{
   11e58:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11e5a:	4b22      	ldr	r3, [pc, #136]	; (11ee4 <packet_rx_allocate+0x8c>)
   11e5c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11e60:	4283      	cmp	r3, r0
   11e62:	d300      	bcc.n	11e66 <packet_rx_allocate+0xe>
   11e64:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   11e66:	4a1f      	ldr	r2, [pc, #124]	; (11ee4 <packet_rx_allocate+0x8c>)
   11e68:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11e6c:	3401      	adds	r4, #1
   11e6e:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11e70:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   11e74:	4294      	cmp	r4, r2
   11e76:	d10d      	bne.n	11e94 <packet_rx_allocate+0x3c>
		acquire = 0;
   11e78:	2400      	movs	r4, #0
   11e7a:	e00b      	b.n	11e94 <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11e7c:	491a      	ldr	r1, [pc, #104]	; (11ee8 <packet_rx_allocate+0x90>)
   11e7e:	4630      	mov	r0, r6
   11e80:	f7fd fac9 	bl	f416 <mem_release>
			break;
   11e84:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   11e86:	4a17      	ldr	r2, [pc, #92]	; (11ee4 <packet_rx_allocate+0x8c>)
   11e88:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11e8c:	3b01      	subs	r3, #1
   11e8e:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   11e92:	462b      	mov	r3, r5
   11e94:	1e5d      	subs	r5, r3, #1
   11e96:	b2ed      	uxtb	r5, r5
   11e98:	b313      	cbz	r3, 11ee0 <packet_rx_allocate+0x88>
   11e9a:	4b12      	ldr	r3, [pc, #72]	; (11ee4 <packet_rx_allocate+0x8c>)
   11e9c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11ea0:	b2db      	uxtb	r3, r3
   11ea2:	429c      	cmp	r4, r3
   11ea4:	d01c      	beq.n	11ee0 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   11ea6:	4810      	ldr	r0, [pc, #64]	; (11ee8 <packet_rx_allocate+0x90>)
   11ea8:	f7fd fa99 	bl	f3de <mem_acquire>
		if (!link) {
   11eac:	4606      	mov	r6, r0
   11eae:	b1b8      	cbz	r0, 11ee0 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11eb0:	480e      	ldr	r0, [pc, #56]	; (11eec <packet_rx_allocate+0x94>)
   11eb2:	f7fd fa94 	bl	f3de <mem_acquire>
		if (!radio_pdu_node_rx) {
   11eb6:	4602      	mov	r2, r0
   11eb8:	2800      	cmp	r0, #0
   11eba:	d0df      	beq.n	11e7c <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   11ebc:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   11ebe:	4b09      	ldr	r3, [pc, #36]	; (11ee4 <packet_rx_allocate+0x8c>)
   11ec0:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   11ec4:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   11ec8:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   11ecc:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   11ed0:	3401      	adds	r4, #1
   11ed2:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   11ed4:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   11ed8:	429c      	cmp	r4, r3
   11eda:	d1d4      	bne.n	11e86 <packet_rx_allocate+0x2e>
			acquire = 0;
   11edc:	2400      	movs	r4, #0
   11ede:	e7d2      	b.n	11e86 <packet_rx_allocate+0x2e>
   11ee0:	bd70      	pop	{r4, r5, r6, pc}
   11ee2:	bf00      	nop
   11ee4:	20000ff4 	.word	0x20000ff4
   11ee8:	20001138 	.word	0x20001138
   11eec:	20001120 	.word	0x20001120

00011ef0 <tx_cmplt_get>:
{
   11ef0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   11ef4:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   11ef6:	4294      	cmp	r4, r2
   11ef8:	d043      	beq.n	11f82 <tx_cmplt_get+0x92>
   11efa:	4690      	mov	r8, r2
   11efc:	4689      	mov	r9, r1
   11efe:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   11f00:	4b21      	ldr	r3, [pc, #132]	; (11f88 <tx_cmplt_get+0x98>)
   11f02:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11f06:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11f0a:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   11f0c:	2600      	movs	r6, #0
   11f0e:	e00f      	b.n	11f30 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   11f10:	2301      	movs	r3, #1
   11f12:	606b      	str	r3, [r5, #4]
			cmplt++;
   11f14:	441e      	add	r6, r3
   11f16:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11f18:	f030 0303 	bics.w	r3, r0, #3
   11f1c:	d126      	bne.n	11f6c <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11f1e:	3401      	adds	r4, #1
   11f20:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   11f22:	4b19      	ldr	r3, [pc, #100]	; (11f88 <tx_cmplt_get+0x98>)
   11f24:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11f28:	429c      	cmp	r4, r3
   11f2a:	d023      	beq.n	11f74 <tx_cmplt_get+0x84>
	} while (_first != last);
   11f2c:	4544      	cmp	r4, r8
   11f2e:	d023      	beq.n	11f78 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11f30:	883a      	ldrh	r2, [r7, #0]
   11f32:	4b15      	ldr	r3, [pc, #84]	; (11f88 <tx_cmplt_get+0x98>)
   11f34:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11f38:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11f3c:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11f40:	429a      	cmp	r2, r3
   11f42:	d119      	bne.n	11f78 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   11f44:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   11f46:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11f48:	2801      	cmp	r0, #1
   11f4a:	d9e1      	bls.n	11f10 <tx_cmplt_get+0x20>
   11f4c:	f030 0203 	bics.w	r2, r0, #3
   11f50:	d009      	beq.n	11f66 <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   11f52:	b143      	cbz	r3, 11f66 <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11f54:	7943      	ldrb	r3, [r0, #5]
   11f56:	b133      	cbz	r3, 11f66 <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11f58:	7903      	ldrb	r3, [r0, #4]
   11f5a:	f003 0303 	and.w	r3, r3, #3
   11f5e:	3b01      	subs	r3, #1
   11f60:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   11f62:	2b01      	cmp	r3, #1
   11f64:	d9d4      	bls.n	11f10 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   11f66:	2302      	movs	r3, #2
   11f68:	606b      	str	r3, [r5, #4]
   11f6a:	e7d5      	b.n	11f18 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11f6c:	4907      	ldr	r1, [pc, #28]	; (11f8c <tx_cmplt_get+0x9c>)
   11f6e:	f7fd fa52 	bl	f416 <mem_release>
   11f72:	e7d4      	b.n	11f1e <tx_cmplt_get+0x2e>
			_first = 0;
   11f74:	2400      	movs	r4, #0
   11f76:	e7d9      	b.n	11f2c <tx_cmplt_get+0x3c>
	*first = _first;
   11f78:	f889 4000 	strb.w	r4, [r9]
}
   11f7c:	4630      	mov	r0, r6
   11f7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   11f82:	2600      	movs	r6, #0
   11f84:	e7fa      	b.n	11f7c <tx_cmplt_get+0x8c>
   11f86:	bf00      	nop
   11f88:	20000ff4 	.word	0x20000ff4
   11f8c:	20001154 	.word	0x20001154

00011f90 <ticker_job_disable>:
{
   11f90:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   11f92:	4b05      	ldr	r3, [pc, #20]	; (11fa8 <ticker_job_disable+0x18>)
   11f94:	7c1b      	ldrb	r3, [r3, #16]
   11f96:	b903      	cbnz	r3, 11f9a <ticker_job_disable+0xa>
   11f98:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11f9a:	2200      	movs	r2, #0
   11f9c:	2101      	movs	r1, #1
   11f9e:	4608      	mov	r0, r1
   11fa0:	f7fd f89e 	bl	f0e0 <mayfly_enable>
}
   11fa4:	e7f8      	b.n	11f98 <ticker_job_disable+0x8>
   11fa6:	bf00      	nop
   11fa8:	20000ff4 	.word	0x20000ff4

00011fac <connection_get>:
	if (handle < _radio.connection_count) {
   11fac:	4b0d      	ldr	r3, [pc, #52]	; (11fe4 <connection_get+0x38>)
   11fae:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   11fb2:	4283      	cmp	r3, r0
   11fb4:	d910      	bls.n	11fd8 <connection_get+0x2c>
{
   11fb6:	b510      	push	{r4, lr}
   11fb8:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   11fba:	4602      	mov	r2, r0
   11fbc:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11fc0:	4b08      	ldr	r3, [pc, #32]	; (11fe4 <connection_get+0x38>)
   11fc2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11fc6:	f7fd fa47 	bl	f458 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   11fca:	4603      	mov	r3, r0
   11fcc:	b110      	cbz	r0, 11fd4 <connection_get+0x28>
   11fce:	8c02      	ldrh	r2, [r0, #32]
   11fd0:	4294      	cmp	r4, r2
   11fd2:	d104      	bne.n	11fde <connection_get+0x32>
}
   11fd4:	4618      	mov	r0, r3
   11fd6:	bd10      	pop	{r4, pc}
	return 0;
   11fd8:	2300      	movs	r3, #0
}
   11fda:	4618      	mov	r0, r3
   11fdc:	4770      	bx	lr
	return 0;
   11fde:	2300      	movs	r3, #0
   11fe0:	e7f8      	b.n	11fd4 <connection_get+0x28>
   11fe2:	bf00      	nop
   11fe4:	20000ff4 	.word	0x20000ff4

00011fe8 <role_disable>:
{
   11fe8:	b5f0      	push	{r4, r5, r6, r7, lr}
   11fea:	b087      	sub	sp, #28
   11fec:	4604      	mov	r4, r0
   11fee:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   11ff0:	2302      	movs	r3, #2
   11ff2:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   11ff4:	2805      	cmp	r0, #5
   11ff6:	d00d      	beq.n	12014 <role_disable+0x2c>
   11ff8:	2806      	cmp	r0, #6
   11ffa:	d02a      	beq.n	12052 <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   11ffc:	2806      	cmp	r0, #6
   11ffe:	d957      	bls.n	120b0 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   12000:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   12002:	b280      	uxth	r0, r0
   12004:	f7ff ffd2 	bl	11fac <connection_get>
			if (!conn) {
   12008:	2800      	cmp	r0, #0
   1200a:	f000 8153 	beq.w	122b4 <role_disable+0x2cc>
			ticks_xtal_to_start =
   1200e:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   12010:	6847      	ldr	r7, [r0, #4]
		break;
   12012:	e023      	b.n	1205c <role_disable+0x74>
		ticks_xtal_to_start =
   12014:	4b9f      	ldr	r3, [pc, #636]	; (12294 <role_disable+0x2ac>)
   12016:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   12018:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1201a:	ab05      	add	r3, sp, #20
   1201c:	9300      	str	r3, [sp, #0]
   1201e:	4b9e      	ldr	r3, [pc, #632]	; (12298 <role_disable+0x2b0>)
   12020:	460a      	mov	r2, r1
   12022:	2103      	movs	r1, #3
   12024:	2000      	movs	r0, #0
   12026:	f7fe ff47 	bl	10eb8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1202a:	2802      	cmp	r0, #2
   1202c:	d00d      	beq.n	1204a <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1202e:	9b05      	ldr	r3, [sp, #20]
   12030:	b1a3      	cbz	r3, 1205c <role_disable+0x74>
   12032:	9b05      	ldr	r3, [sp, #20]
   12034:	2b01      	cmp	r3, #1
   12036:	d011      	beq.n	1205c <role_disable+0x74>
   12038:	4040      	eors	r0, r0
   1203a:	f380 8811 	msr	BASEPRI, r0
   1203e:	f04f 0004 	mov.w	r0, #4
   12042:	df02      	svc	2
   12044:	bf20      	wfe
  __ASM volatile ("sev");
   12046:	bf40      	sev
  __ASM volatile ("wfe");
   12048:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   1204a:	9b05      	ldr	r3, [sp, #20]
   1204c:	2b02      	cmp	r3, #2
   1204e:	d0f9      	beq.n	12044 <role_disable+0x5c>
   12050:	e7ed      	b.n	1202e <role_disable+0x46>
		ticks_xtal_to_start =
   12052:	4b90      	ldr	r3, [pc, #576]	; (12294 <role_disable+0x2ac>)
   12054:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   12058:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   1205c:	4b8d      	ldr	r3, [pc, #564]	; (12294 <role_disable+0x2ac>)
   1205e:	7b9b      	ldrb	r3, [r3, #14]
   12060:	2b00      	cmp	r3, #0
   12062:	d12b      	bne.n	120bc <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   12064:	4b8b      	ldr	r3, [pc, #556]	; (12294 <role_disable+0x2ac>)
   12066:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   12068:	ab06      	add	r3, sp, #24
   1206a:	2202      	movs	r2, #2
   1206c:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12070:	9300      	str	r3, [sp, #0]
   12072:	4b89      	ldr	r3, [pc, #548]	; (12298 <role_disable+0x2b0>)
   12074:	4622      	mov	r2, r4
   12076:	2103      	movs	r1, #3
   12078:	2000      	movs	r0, #0
   1207a:	f7fe ff1d 	bl	10eb8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   1207e:	2802      	cmp	r0, #2
   12080:	d022      	beq.n	120c8 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   12082:	9b05      	ldr	r3, [sp, #20]
   12084:	b973      	cbnz	r3, 120a4 <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   12086:	4b83      	ldr	r3, [pc, #524]	; (12294 <role_disable+0x2ac>)
   12088:	7b1b      	ldrb	r3, [r3, #12]
   1208a:	b2db      	uxtb	r3, r3
   1208c:	429c      	cmp	r4, r3
   1208e:	d02d      	beq.n	120ec <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   12090:	4b80      	ldr	r3, [pc, #512]	; (12294 <role_disable+0x2ac>)
   12092:	7b5b      	ldrb	r3, [r3, #13]
   12094:	b2db      	uxtb	r3, r3
   12096:	429c      	cmp	r4, r3
   12098:	d028      	beq.n	120ec <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   1209a:	4b7e      	ldr	r3, [pc, #504]	; (12294 <role_disable+0x2ac>)
   1209c:	7b9b      	ldrb	r3, [r3, #14]
   1209e:	b90b      	cbnz	r3, 120a4 <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   120a0:	2301      	movs	r3, #1
   120a2:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   120a4:	2200      	movs	r2, #0
   120a6:	4b7b      	ldr	r3, [pc, #492]	; (12294 <role_disable+0x2ac>)
   120a8:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   120aa:	9805      	ldr	r0, [sp, #20]
}
   120ac:	b007      	add	sp, #28
   120ae:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   120b0:	4040      	eors	r0, r0
   120b2:	f380 8811 	msr	BASEPRI, r0
   120b6:	f04f 0004 	mov.w	r0, #4
   120ba:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   120bc:	4040      	eors	r0, r0
   120be:	f380 8811 	msr	BASEPRI, r0
   120c2:	f04f 0004 	mov.w	r0, #4
   120c6:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   120c8:	4b72      	ldr	r3, [pc, #456]	; (12294 <role_disable+0x2ac>)
   120ca:	7b5b      	ldrb	r3, [r3, #13]
   120cc:	b2db      	uxtb	r3, r3
   120ce:	429c      	cmp	r4, r3
   120d0:	d108      	bne.n	120e4 <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   120d2:	2201      	movs	r2, #1
   120d4:	4611      	mov	r1, r2
   120d6:	2003      	movs	r0, #3
   120d8:	f7fd f802 	bl	f0e0 <mayfly_enable>
   120dc:	e002      	b.n	120e4 <role_disable+0xfc>
   120de:	bf20      	wfe
  __ASM volatile ("sev");
   120e0:	bf40      	sev
  __ASM volatile ("wfe");
   120e2:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   120e4:	9b05      	ldr	r3, [sp, #20]
   120e6:	2b02      	cmp	r3, #2
   120e8:	d0f9      	beq.n	120de <role_disable+0xf6>
   120ea:	e7ca      	b.n	12082 <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   120ec:	ab06      	add	r3, sp, #24
   120ee:	2202      	movs	r2, #2
   120f0:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   120f4:	9300      	str	r3, [sp, #0]
   120f6:	4b68      	ldr	r3, [pc, #416]	; (12298 <role_disable+0x2b0>)
   120f8:	2200      	movs	r2, #0
   120fa:	2103      	movs	r1, #3
   120fc:	4610      	mov	r0, r2
   120fe:	f7fe fedb 	bl	10eb8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12102:	2802      	cmp	r0, #2
   12104:	d029      	beq.n	1215a <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12106:	9b02      	ldr	r3, [sp, #8]
   12108:	2b00      	cmp	r3, #0
   1210a:	d17c      	bne.n	12206 <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1210c:	2302      	movs	r3, #2
   1210e:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12110:	4b60      	ldr	r3, [pc, #384]	; (12294 <role_disable+0x2ac>)
   12112:	7b1b      	ldrb	r3, [r3, #12]
   12114:	2b00      	cmp	r3, #0
   12116:	d02e      	beq.n	12176 <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   12118:	2000      	movs	r0, #0
   1211a:	4b5e      	ldr	r3, [pc, #376]	; (12294 <role_disable+0x2ac>)
   1211c:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1211e:	ab03      	add	r3, sp, #12
   12120:	9300      	str	r3, [sp, #0]
   12122:	4b5d      	ldr	r3, [pc, #372]	; (12298 <role_disable+0x2b0>)
   12124:	2201      	movs	r2, #1
   12126:	2103      	movs	r1, #3
   12128:	f7fe fec6 	bl	10eb8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   1212c:	2802      	cmp	r0, #2
   1212e:	d028      	beq.n	12182 <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12130:	9b03      	ldr	r3, [sp, #12]
   12132:	2b00      	cmp	r3, #0
   12134:	d142      	bne.n	121bc <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   12136:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   1213a:	42b7      	cmp	r7, r6
   1213c:	d92f      	bls.n	1219e <role_disable+0x1b6>
				retval = mayfly_enqueue(
   1213e:	4b57      	ldr	r3, [pc, #348]	; (1229c <role_disable+0x2b4>)
   12140:	2200      	movs	r2, #0
   12142:	4611      	mov	r1, r2
   12144:	2003      	movs	r0, #3
   12146:	f7fd f809 	bl	f15c <mayfly_enqueue>
				LL_ASSERT(!retval);
   1214a:	2800      	cmp	r0, #0
   1214c:	d0a5      	beq.n	1209a <role_disable+0xb2>
   1214e:	4040      	eors	r0, r0
   12150:	f380 8811 	msr	BASEPRI, r0
   12154:	f04f 0004 	mov.w	r0, #4
   12158:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1215a:	2201      	movs	r2, #1
   1215c:	4611      	mov	r1, r2
   1215e:	2003      	movs	r0, #3
   12160:	f7fc ffbe 	bl	f0e0 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   12164:	9b02      	ldr	r3, [sp, #8]
   12166:	2b02      	cmp	r3, #2
   12168:	d1cd      	bne.n	12106 <role_disable+0x11e>
   1216a:	4040      	eors	r0, r0
   1216c:	f380 8811 	msr	BASEPRI, r0
   12170:	f04f 0004 	mov.w	r0, #4
   12174:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   12176:	4040      	eors	r0, r0
   12178:	f380 8811 	msr	BASEPRI, r0
   1217c:	f04f 0004 	mov.w	r0, #4
   12180:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   12182:	2201      	movs	r2, #1
   12184:	4611      	mov	r1, r2
   12186:	2003      	movs	r0, #3
   12188:	f7fc ffaa 	bl	f0e0 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1218c:	9b03      	ldr	r3, [sp, #12]
   1218e:	2b02      	cmp	r3, #2
   12190:	d1ce      	bne.n	12130 <role_disable+0x148>
   12192:	4040      	eors	r0, r0
   12194:	f380 8811 	msr	BASEPRI, r0
   12198:	f04f 0004 	mov.w	r0, #4
   1219c:	df02      	svc	2
				retval = mayfly_enqueue(
   1219e:	4b40      	ldr	r3, [pc, #256]	; (122a0 <role_disable+0x2b8>)
   121a0:	2200      	movs	r2, #0
   121a2:	4611      	mov	r1, r2
   121a4:	2003      	movs	r0, #3
   121a6:	f7fc ffd9 	bl	f15c <mayfly_enqueue>
				LL_ASSERT(!retval);
   121aa:	2800      	cmp	r0, #0
   121ac:	f43f af75 	beq.w	1209a <role_disable+0xb2>
   121b0:	4040      	eors	r0, r0
   121b2:	f380 8811 	msr	BASEPRI, r0
   121b6:	f04f 0004 	mov.w	r0, #4
   121ba:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   121bc:	9b03      	ldr	r3, [sp, #12]
   121be:	2b01      	cmp	r3, #1
   121c0:	d11b      	bne.n	121fa <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   121c2:	4b36      	ldr	r3, [pc, #216]	; (1229c <role_disable+0x2b4>)
   121c4:	2200      	movs	r2, #0
   121c6:	4611      	mov	r1, r2
   121c8:	2003      	movs	r0, #3
   121ca:	f7fc ffc7 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   121ce:	b970      	cbnz	r0, 121ee <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   121d0:	4b33      	ldr	r3, [pc, #204]	; (122a0 <role_disable+0x2b8>)
   121d2:	2200      	movs	r2, #0
   121d4:	4611      	mov	r1, r2
   121d6:	2003      	movs	r0, #3
   121d8:	f7fc ffc0 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   121dc:	2800      	cmp	r0, #0
   121de:	f43f af5c 	beq.w	1209a <role_disable+0xb2>
   121e2:	4040      	eors	r0, r0
   121e4:	f380 8811 	msr	BASEPRI, r0
   121e8:	f04f 0004 	mov.w	r0, #4
   121ec:	df02      	svc	2
			LL_ASSERT(!retval);
   121ee:	4040      	eors	r0, r0
   121f0:	f380 8811 	msr	BASEPRI, r0
   121f4:	f04f 0004 	mov.w	r0, #4
   121f8:	df02      	svc	2
			LL_ASSERT(0);
   121fa:	4040      	eors	r0, r0
   121fc:	f380 8811 	msr	BASEPRI, r0
   12200:	f04f 0004 	mov.w	r0, #4
   12204:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12206:	9b02      	ldr	r3, [sp, #8]
   12208:	2b01      	cmp	r3, #1
   1220a:	d14d      	bne.n	122a8 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   1220c:	2dff      	cmp	r5, #255	; 0xff
   1220e:	d011      	beq.n	12234 <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12210:	ab06      	add	r3, sp, #24
   12212:	2202      	movs	r2, #2
   12214:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12218:	9300      	str	r3, [sp, #0]
   1221a:	4b1f      	ldr	r3, [pc, #124]	; (12298 <role_disable+0x2b0>)
   1221c:	462a      	mov	r2, r5
   1221e:	2103      	movs	r1, #3
   12220:	2000      	movs	r0, #0
   12222:	f7fe fe49 	bl	10eb8 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   12226:	2802      	cmp	r0, #2
   12228:	d018      	beq.n	1225c <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   1222a:	9b04      	ldr	r3, [sp, #16]
   1222c:	b113      	cbz	r3, 12234 <role_disable+0x24c>
   1222e:	9b04      	ldr	r3, [sp, #16]
   12230:	2b01      	cmp	r3, #1
   12232:	d121      	bne.n	12278 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   12234:	4b17      	ldr	r3, [pc, #92]	; (12294 <role_disable+0x2ac>)
   12236:	7bdb      	ldrb	r3, [r3, #15]
   12238:	2b00      	cmp	r3, #0
   1223a:	f43f af2e 	beq.w	1209a <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   1223e:	4b19      	ldr	r3, [pc, #100]	; (122a4 <role_disable+0x2bc>)
   12240:	2204      	movs	r2, #4
   12242:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   12244:	2200      	movs	r2, #0
   12246:	4611      	mov	r1, r2
   12248:	2003      	movs	r0, #3
   1224a:	f7fc ff87 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   1224e:	b1e0      	cbz	r0, 1228a <role_disable+0x2a2>
   12250:	4040      	eors	r0, r0
   12252:	f380 8811 	msr	BASEPRI, r0
   12256:	f04f 0004 	mov.w	r0, #4
   1225a:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1225c:	2201      	movs	r2, #1
   1225e:	4611      	mov	r1, r2
   12260:	2003      	movs	r0, #3
   12262:	f7fc ff3d 	bl	f0e0 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   12266:	9b04      	ldr	r3, [sp, #16]
   12268:	2b02      	cmp	r3, #2
   1226a:	d1de      	bne.n	1222a <role_disable+0x242>
   1226c:	4040      	eors	r0, r0
   1226e:	f380 8811 	msr	BASEPRI, r0
   12272:	f04f 0004 	mov.w	r0, #4
   12276:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   12278:	4040      	eors	r0, r0
   1227a:	f380 8811 	msr	BASEPRI, r0
   1227e:	f04f 0004 	mov.w	r0, #4
   12282:	df02      	svc	2
   12284:	bf20      	wfe
  __ASM volatile ("sev");
   12286:	bf40      	sev
  __ASM volatile ("wfe");
   12288:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   1228a:	4b02      	ldr	r3, [pc, #8]	; (12294 <role_disable+0x2ac>)
   1228c:	7bdb      	ldrb	r3, [r3, #15]
   1228e:	2b00      	cmp	r3, #0
   12290:	d1f8      	bne.n	12284 <role_disable+0x29c>
   12292:	e702      	b.n	1209a <role_disable+0xb2>
   12294:	20000ff4 	.word	0x20000ff4
   12298:	00011765 	.word	0x00011765
   1229c:	2000bd60 	.word	0x2000bd60
   122a0:	2000be20 	.word	0x2000be20
   122a4:	2000bd90 	.word	0x2000bd90
		LL_ASSERT(0);
   122a8:	4040      	eors	r0, r0
   122aa:	f380 8811 	msr	BASEPRI, r0
   122ae:	f04f 0004 	mov.w	r0, #4
   122b2:	df02      	svc	2
				return 1;
   122b4:	2001      	movs	r0, #1
   122b6:	e6f9      	b.n	120ac <role_disable+0xc4>

000122b8 <event_stop>:
{
   122b8:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   122ba:	4a08      	ldr	r2, [pc, #32]	; (122dc <event_stop+0x24>)
   122bc:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   122be:	4613      	mov	r3, r2
   122c0:	2200      	movs	r2, #0
   122c2:	4611      	mov	r1, r2
   122c4:	4610      	mov	r0, r2
   122c6:	f7fc ff49 	bl	f15c <mayfly_enqueue>
	LL_ASSERT(!retval);
   122ca:	b900      	cbnz	r0, 122ce <event_stop+0x16>
   122cc:	bd08      	pop	{r3, pc}
   122ce:	4040      	eors	r0, r0
   122d0:	f380 8811 	msr	BASEPRI, r0
   122d4:	f04f 0004 	mov.w	r0, #4
   122d8:	df02      	svc	2
   122da:	bf00      	nop
   122dc:	2000bd70 	.word	0x2000bd70

000122e0 <event_adv_stop>:
{
   122e0:	b500      	push	{lr}
   122e2:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   122e4:	2305      	movs	r3, #5
   122e6:	2200      	movs	r2, #0
   122e8:	4611      	mov	r1, r2
   122ea:	4610      	mov	r0, r2
   122ec:	f7ff ffe4 	bl	122b8 <event_stop>
	ticker_status =
   122f0:	f241 73e4 	movw	r3, #6116	; 0x17e4
   122f4:	9300      	str	r3, [sp, #0]
   122f6:	4b09      	ldr	r3, [pc, #36]	; (1231c <event_adv_stop+0x3c>)
   122f8:	2205      	movs	r2, #5
   122fa:	2100      	movs	r1, #0
   122fc:	4608      	mov	r0, r1
   122fe:	f7fe fddb 	bl	10eb8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12302:	b108      	cbz	r0, 12308 <event_adv_stop+0x28>
   12304:	2802      	cmp	r0, #2
   12306:	d102      	bne.n	1230e <event_adv_stop+0x2e>
}
   12308:	b003      	add	sp, #12
   1230a:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1230e:	4040      	eors	r0, r0
   12310:	f380 8811 	msr	BASEPRI, r0
   12314:	f04f 0004 	mov.w	r0, #4
   12318:	df02      	svc	2
   1231a:	bf00      	nop
   1231c:	00012ba1 	.word	0x00012ba1

00012320 <event_inactive>:
{
   12320:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   12322:	4b07      	ldr	r3, [pc, #28]	; (12340 <event_inactive+0x20>)
   12324:	2200      	movs	r2, #0
   12326:	4611      	mov	r1, r2
   12328:	4610      	mov	r0, r2
   1232a:	f7fc ff17 	bl	f15c <mayfly_enqueue>
	LL_ASSERT(!retval);
   1232e:	b900      	cbnz	r0, 12332 <event_inactive+0x12>
   12330:	bd08      	pop	{r3, pc}
   12332:	4040      	eors	r0, r0
   12334:	f380 8811 	msr	BASEPRI, r0
   12338:	f04f 0004 	mov.w	r0, #4
   1233c:	df02      	svc	2
   1233e:	bf00      	nop
   12340:	2000bd40 	.word	0x2000bd40

00012344 <mayfly_xtal_retain>:
{
   12344:	b508      	push	{r3, lr}
	if (retain) {
   12346:	b1d1      	cbz	r1, 1237e <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   12348:	4b1c      	ldr	r3, [pc, #112]	; (123bc <mayfly_xtal_retain+0x78>)
   1234a:	781b      	ldrb	r3, [r3, #0]
   1234c:	b953      	cbnz	r3, 12364 <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1234e:	2801      	cmp	r0, #1
   12350:	d109      	bne.n	12366 <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   12352:	2201      	movs	r2, #1
   12354:	4b19      	ldr	r3, [pc, #100]	; (123bc <mayfly_xtal_retain+0x78>)
   12356:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   12358:	4b19      	ldr	r3, [pc, #100]	; (123c0 <mayfly_xtal_retain+0x7c>)
   1235a:	2200      	movs	r2, #0
   1235c:	4611      	mov	r1, r2
   1235e:	f7fc fefd 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12362:	b930      	cbnz	r0, 12372 <mayfly_xtal_retain+0x2e>
   12364:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   12366:	4040      	eors	r0, r0
   12368:	f380 8811 	msr	BASEPRI, r0
   1236c:	f04f 0004 	mov.w	r0, #4
   12370:	df02      	svc	2
			LL_ASSERT(!retval);
   12372:	4040      	eors	r0, r0
   12374:	f380 8811 	msr	BASEPRI, r0
   12378:	f04f 0004 	mov.w	r0, #4
   1237c:	df02      	svc	2
		if (s_xtal_retained) {
   1237e:	4b0f      	ldr	r3, [pc, #60]	; (123bc <mayfly_xtal_retain+0x78>)
   12380:	781b      	ldrb	r3, [r3, #0]
   12382:	2b00      	cmp	r3, #0
   12384:	d0ee      	beq.n	12364 <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   12386:	2200      	movs	r2, #0
   12388:	4b0c      	ldr	r3, [pc, #48]	; (123bc <mayfly_xtal_retain+0x78>)
   1238a:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   1238c:	b138      	cbz	r0, 1239e <mayfly_xtal_retain+0x5a>
   1238e:	2801      	cmp	r0, #1
   12390:	d012      	beq.n	123b8 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   12392:	4040      	eors	r0, r0
   12394:	f380 8811 	msr	BASEPRI, r0
   12398:	f04f 0004 	mov.w	r0, #4
   1239c:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   1239e:	4b09      	ldr	r3, [pc, #36]	; (123c4 <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   123a0:	2200      	movs	r2, #0
   123a2:	4611      	mov	r1, r2
   123a4:	f7fc feda 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   123a8:	2800      	cmp	r0, #0
   123aa:	d0db      	beq.n	12364 <mayfly_xtal_retain+0x20>
   123ac:	4040      	eors	r0, r0
   123ae:	f380 8811 	msr	BASEPRI, r0
   123b2:	f04f 0004 	mov.w	r0, #4
   123b6:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   123b8:	4b03      	ldr	r3, [pc, #12]	; (123c8 <mayfly_xtal_retain+0x84>)
   123ba:	e7f1      	b.n	123a0 <mayfly_xtal_retain+0x5c>
   123bc:	2000156c 	.word	0x2000156c
   123c0:	2000bde0 	.word	0x2000bde0
   123c4:	2000bdf0 	.word	0x2000bdf0
   123c8:	2000be00 	.word	0x2000be00

000123cc <event_active>:
{
   123cc:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   123ce:	4b07      	ldr	r3, [pc, #28]	; (123ec <event_active+0x20>)
   123d0:	2200      	movs	r2, #0
   123d2:	4611      	mov	r1, r2
   123d4:	4610      	mov	r0, r2
   123d6:	f7fc fec1 	bl	f15c <mayfly_enqueue>
	LL_ASSERT(!retval);
   123da:	b900      	cbnz	r0, 123de <event_active+0x12>
   123dc:	bd08      	pop	{r3, pc}
   123de:	4040      	eors	r0, r0
   123e0:	f380 8811 	msr	BASEPRI, r0
   123e4:	f04f 0004 	mov.w	r0, #4
   123e8:	df02      	svc	2
   123ea:	bf00      	nop
   123ec:	2000bd30 	.word	0x2000bd30

000123f0 <event_xtal>:
{
   123f0:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   123f2:	4b07      	ldr	r3, [pc, #28]	; (12410 <event_xtal+0x20>)
   123f4:	2200      	movs	r2, #0
   123f6:	4611      	mov	r1, r2
   123f8:	4610      	mov	r0, r2
   123fa:	f7fc feaf 	bl	f15c <mayfly_enqueue>
	LL_ASSERT(!retval);
   123fe:	b900      	cbnz	r0, 12402 <event_xtal+0x12>
   12400:	bd08      	pop	{r3, pc}
   12402:	4040      	eors	r0, r0
   12404:	f380 8811 	msr	BASEPRI, r0
   12408:	f04f 0004 	mov.w	r0, #4
   1240c:	df02      	svc	2
   1240e:	bf00      	nop
   12410:	2000bdd0 	.word	0x2000bdd0

00012414 <mayfly_radio_active>:
{
   12414:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   12416:	b148      	cbz	r0, 1242c <mayfly_radio_active+0x18>
		if (s_active++) {
   12418:	4a0e      	ldr	r2, [pc, #56]	; (12454 <mayfly_radio_active+0x40>)
   1241a:	7813      	ldrb	r3, [r2, #0]
   1241c:	1c59      	adds	r1, r3, #1
   1241e:	7011      	strb	r1, [r2, #0]
   12420:	b103      	cbz	r3, 12424 <mayfly_radio_active+0x10>
   12422:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   12424:	2001      	movs	r0, #1
   12426:	f007 f8a5 	bl	19574 <radio_active_callback>
   1242a:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   1242c:	4b09      	ldr	r3, [pc, #36]	; (12454 <mayfly_radio_active+0x40>)
   1242e:	781b      	ldrb	r3, [r3, #0]
   12430:	b14b      	cbz	r3, 12446 <mayfly_radio_active+0x32>
		if (--s_active) {
   12432:	3b01      	subs	r3, #1
   12434:	b2db      	uxtb	r3, r3
   12436:	4a07      	ldr	r2, [pc, #28]	; (12454 <mayfly_radio_active+0x40>)
   12438:	7013      	strb	r3, [r2, #0]
   1243a:	2b00      	cmp	r3, #0
   1243c:	d1f1      	bne.n	12422 <mayfly_radio_active+0xe>
		radio_active_callback(0);
   1243e:	2000      	movs	r0, #0
   12440:	f007 f898 	bl	19574 <radio_active_callback>
   12444:	e7ed      	b.n	12422 <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   12446:	4040      	eors	r0, r0
   12448:	f380 8811 	msr	BASEPRI, r0
   1244c:	f04f 0004 	mov.w	r0, #4
   12450:	df02      	svc	2
   12452:	bf00      	nop
   12454:	200014d8 	.word	0x200014d8

00012458 <mayfly_radio_inactive>:
{
   12458:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   1245a:	2000      	movs	r0, #0
   1245c:	f7ff ffda 	bl	12414 <mayfly_radio_active>
   12460:	bd08      	pop	{r3, pc}
	...

00012464 <mayfly_radio_stop>:
{
   12464:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   12466:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12468:	1f23      	subs	r3, r4, #4
   1246a:	b2db      	uxtb	r3, r3
   1246c:	2b01      	cmp	r3, #1
   1246e:	d808      	bhi.n	12482 <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12470:	4b10      	ldr	r3, [pc, #64]	; (124b4 <mayfly_radio_stop+0x50>)
   12472:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   12474:	b16b      	cbz	r3, 12492 <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   12476:	2b04      	cmp	r3, #4
   12478:	d014      	beq.n	124a4 <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   1247a:	2b05      	cmp	r3, #5
   1247c:	d007      	beq.n	1248e <mayfly_radio_stop+0x2a>
   1247e:	2301      	movs	r3, #1
   12480:	e008      	b.n	12494 <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   12482:	4040      	eors	r0, r0
   12484:	f380 8811 	msr	BASEPRI, r0
   12488:	f04f 0004 	mov.w	r0, #4
   1248c:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   1248e:	2300      	movs	r3, #0
   12490:	e000      	b.n	12494 <mayfly_radio_stop+0x30>
   12492:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   12494:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   12496:	b13b      	cbz	r3, 124a8 <mayfly_radio_stop+0x44>
		if (radio_used) {
   12498:	b10d      	cbz	r5, 1249e <mayfly_radio_stop+0x3a>
			_radio.state = state;
   1249a:	4b06      	ldr	r3, [pc, #24]	; (124b4 <mayfly_radio_stop+0x50>)
   1249c:	741c      	strb	r4, [r3, #16]
		radio_disable();
   1249e:	f7fd f9b3 	bl	f808 <radio_disable>
   124a2:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   124a4:	2300      	movs	r3, #0
   124a6:	e7f5      	b.n	12494 <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   124a8:	f7fd f9dc 	bl	f864 <radio_is_idle>
   124ac:	2800      	cmp	r0, #0
   124ae:	d0f3      	beq.n	12498 <mayfly_radio_stop+0x34>
   124b0:	e7f7      	b.n	124a2 <mayfly_radio_stop+0x3e>
   124b2:	bf00      	nop
   124b4:	20000ff4 	.word	0x20000ff4

000124b8 <adv_scan_conn_configure>:
{
   124b8:	b508      	push	{r3, lr}
	radio_reset();
   124ba:	f7fd f8ff 	bl	f6bc <radio_reset>
	radio_tx_power_set(0);
   124be:	2000      	movs	r0, #0
   124c0:	f7fd f918 	bl	f6f4 <radio_tx_power_set>
	radio_isr_set(isr);
   124c4:	4801      	ldr	r0, [pc, #4]	; (124cc <adv_scan_conn_configure+0x14>)
   124c6:	f7fd f8c1 	bl	f64c <radio_isr_set>
   124ca:	bd08      	pop	{r3, pc}
   124cc:	0000fe01 	.word	0x0000fe01

000124d0 <adv_scan_configure>:
{
   124d0:	b570      	push	{r4, r5, r6, lr}
   124d2:	b082      	sub	sp, #8
   124d4:	4604      	mov	r4, r0
   124d6:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   124d8:	ad02      	add	r5, sp, #8
   124da:	4b0d      	ldr	r3, [pc, #52]	; (12510 <adv_scan_configure+0x40>)
   124dc:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   124e0:	f7ff ffea 	bl	124b8 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   124e4:	4631      	mov	r1, r6
   124e6:	4620      	mov	r0, r4
   124e8:	f7fd f8f6 	bl	f6d8 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   124ec:	4628      	mov	r0, r5
   124ee:	f7fd f91f 	bl	f730 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   124f2:	0062      	lsls	r2, r4, #1
   124f4:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   124f8:	2125      	movs	r1, #37	; 0x25
   124fa:	2008      	movs	r0, #8
   124fc:	f7fd f930 	bl	f760 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12500:	4904      	ldr	r1, [pc, #16]	; (12514 <adv_scan_configure+0x44>)
   12502:	f240 605b 	movw	r0, #1627	; 0x65b
   12506:	f7fd f9b7 	bl	f878 <radio_crc_configure>
}
   1250a:	b002      	add	sp, #8
   1250c:	bd70      	pop	{r4, r5, r6, pc}
   1250e:	bf00      	nop
   12510:	8e89bed6 	.word	0x8e89bed6
   12514:	00555555 	.word	0x00555555

00012518 <connection_configure>:
{
   12518:	b510      	push	{r4, lr}
   1251a:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   1251c:	f7ff ffcc 	bl	124b8 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   12520:	f104 0010 	add.w	r0, r4, #16
   12524:	f7fd f904 	bl	f730 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   12528:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   1252a:	7d63      	ldrb	r3, [r4, #21]
   1252c:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   1252e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   12532:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   12534:	4319      	orrs	r1, r3
   12536:	f240 605b 	movw	r0, #1627	; 0x65b
   1253a:	f7fd f99d 	bl	f878 <radio_crc_configure>
   1253e:	bd10      	pop	{r4, pc}

00012540 <rx_packet_set>:
{
   12540:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12542:	4605      	mov	r5, r0
   12544:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   12546:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   12548:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   1254c:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   12550:	2100      	movs	r1, #0
   12552:	4620      	mov	r0, r4
   12554:	f7fd f8c0 	bl	f6d8 <radio_phy_set>
	if (conn->enc_rx) {
   12558:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1255c:	f013 0f10 	tst.w	r3, #16
   12560:	d10a      	bne.n	12578 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   12562:	0062      	lsls	r2, r4, #1
   12564:	f042 0201 	orr.w	r2, r2, #1
   12568:	b2f1      	uxtb	r1, r6
   1256a:	2008      	movs	r0, #8
   1256c:	f7fd f8f8 	bl	f760 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   12570:	4638      	mov	r0, r7
   12572:	f7fd f925 	bl	f7c0 <radio_pkt_rx_set>
   12576:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   12578:	0062      	lsls	r2, r4, #1
   1257a:	1d31      	adds	r1, r6, #4
   1257c:	f042 0201 	orr.w	r2, r2, #1
   12580:	b2c9      	uxtb	r1, r1
   12582:	2008      	movs	r0, #8
   12584:	f7fd f8ec 	bl	f760 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   12588:	463a      	mov	r2, r7
   1258a:	4621      	mov	r1, r4
   1258c:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   12590:	f7fd fb12 	bl	fbb8 <radio_ccm_rx_pkt_set>
   12594:	f7fd f914 	bl	f7c0 <radio_pkt_rx_set>
   12598:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001259a <packet_rx_callback>:
{
   1259a:	b508      	push	{r3, lr}
	radio_event_callback();
   1259c:	f006 ffec 	bl	19578 <radio_event_callback>
   125a0:	bd08      	pop	{r3, pc}
	...

000125a4 <pdu_node_tx_release>:
{
   125a4:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   125a6:	4a14      	ldr	r2, [pc, #80]	; (125f8 <pdu_node_tx_release+0x54>)
   125a8:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   125ac:	3301      	adds	r3, #1
   125ae:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   125b0:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   125b4:	4293      	cmp	r3, r2
   125b6:	d017      	beq.n	125e8 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   125b8:	4a0f      	ldr	r2, [pc, #60]	; (125f8 <pdu_node_tx_release+0x54>)
   125ba:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   125be:	4293      	cmp	r3, r2
   125c0:	d014      	beq.n	125ec <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   125c2:	4a0d      	ldr	r2, [pc, #52]	; (125f8 <pdu_node_tx_release+0x54>)
   125c4:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   125c8:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   125cc:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   125d0:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   125d4:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   125d8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   125dc:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   125de:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   125e2:	f7ff ffda 	bl	1259a <packet_rx_callback>
   125e6:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   125e8:	2300      	movs	r3, #0
   125ea:	e7e5      	b.n	125b8 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   125ec:	4040      	eors	r0, r0
   125ee:	f380 8811 	msr	BASEPRI, r0
   125f2:	f04f 0004 	mov.w	r0, #4
   125f6:	df02      	svc	2
   125f8:	20000ff4 	.word	0x20000ff4

000125fc <packet_tx_enqueue>:
{
   125fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   125fe:	e016      	b.n	1262e <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   12600:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   12604:	2b00      	cmp	r3, #0
   12606:	d040      	beq.n	1268a <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   12608:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   1260c:	b103      	cbz	r3, 12610 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   1260e:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   12610:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   12614:	4a24      	ldr	r2, [pc, #144]	; (126a8 <packet_tx_enqueue+0xac>)
   12616:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   1261a:	3301      	adds	r3, #1
   1261c:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   1261e:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   12622:	4293      	cmp	r3, r2
   12624:	d03c      	beq.n	126a0 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   12626:	4a20      	ldr	r2, [pc, #128]	; (126a8 <packet_tx_enqueue+0xac>)
   12628:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   1262c:	4638      	mov	r0, r7
   1262e:	1e47      	subs	r7, r0, #1
   12630:	b2ff      	uxtb	r7, r7
   12632:	2800      	cmp	r0, #0
   12634:	d036      	beq.n	126a4 <packet_tx_enqueue+0xa8>
   12636:	4a1c      	ldr	r2, [pc, #112]	; (126a8 <packet_tx_enqueue+0xac>)
   12638:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   1263c:	b2db      	uxtb	r3, r3
   1263e:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   12642:	4293      	cmp	r3, r2
   12644:	d02e      	beq.n	126a4 <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   12646:	4b18      	ldr	r3, [pc, #96]	; (126a8 <packet_tx_enqueue+0xac>)
   12648:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   1264c:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   12650:	b2e4      	uxtb	r4, r4
   12652:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   12656:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   12658:	2200      	movs	r2, #0
   1265a:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1265c:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   12660:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12664:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12668:	f7fc fef6 	bl	f458 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   1266c:	8c02      	ldrh	r2, [r0, #32]
   1266e:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   12672:	429a      	cmp	r2, r3
   12674:	d0c4      	beq.n	12600 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12676:	792b      	ldrb	r3, [r5, #4]
   12678:	f36f 0301 	bfc	r3, #0, #2
   1267c:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   1267e:	4629      	mov	r1, r5
   12680:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   12684:	f7ff ff8e 	bl	125a4 <pdu_node_tx_release>
   12688:	e7c4      	b.n	12614 <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   1268a:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   1268e:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   12692:	2b00      	cmp	r3, #0
   12694:	d1b8      	bne.n	12608 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   12696:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   1269a:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   1269e:	e7b3      	b.n	12608 <packet_tx_enqueue+0xc>
			first = 0;
   126a0:	2300      	movs	r3, #0
   126a2:	e7c0      	b.n	12626 <packet_tx_enqueue+0x2a>
   126a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   126a6:	bf00      	nop
   126a8:	20000ff4 	.word	0x20000ff4

000126ac <connection_release>:
{
   126ac:	b510      	push	{r4, lr}
   126ae:	b082      	sub	sp, #8
   126b0:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   126b2:	2201      	movs	r2, #1
   126b4:	4611      	mov	r1, r2
   126b6:	2000      	movs	r0, #0
   126b8:	f7fc fd12 	bl	f0e0 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   126bc:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   126be:	3207      	adds	r2, #7
	ticker_status =
   126c0:	f242 2345 	movw	r3, #8773	; 0x2245
   126c4:	9300      	str	r3, [sp, #0]
   126c6:	4b46      	ldr	r3, [pc, #280]	; (127e0 <connection_release+0x134>)
   126c8:	b2d2      	uxtb	r2, r2
   126ca:	2100      	movs	r1, #0
   126cc:	4608      	mov	r0, r1
   126ce:	f7fe fbf3 	bl	10eb8 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   126d2:	b108      	cbz	r0, 126d8 <connection_release+0x2c>
   126d4:	2802      	cmp	r0, #2
   126d6:	d12a      	bne.n	1272e <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   126d8:	4b42      	ldr	r3, [pc, #264]	; (127e4 <connection_release+0x138>)
   126da:	7c1b      	ldrb	r3, [r3, #16]
   126dc:	2b05      	cmp	r3, #5
   126de:	d13e      	bne.n	1275e <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   126e0:	4b40      	ldr	r3, [pc, #256]	; (127e4 <connection_release+0x138>)
   126e2:	7b1a      	ldrb	r2, [r3, #12]
   126e4:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   126e6:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   126e8:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   126ea:	429a      	cmp	r2, r3
   126ec:	d137      	bne.n	1275e <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   126ee:	2000      	movs	r0, #0
   126f0:	4b3c      	ldr	r3, [pc, #240]	; (127e4 <connection_release+0x138>)
   126f2:	7318      	strb	r0, [r3, #12]
		ticker_status =
   126f4:	f242 2356 	movw	r3, #8790	; 0x2256
   126f8:	9300      	str	r3, [sp, #0]
   126fa:	4b39      	ldr	r3, [pc, #228]	; (127e0 <connection_release+0x134>)
   126fc:	2201      	movs	r2, #1
   126fe:	4601      	mov	r1, r0
   12700:	f7fe fbda 	bl	10eb8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   12704:	b108      	cbz	r0, 1270a <connection_release+0x5e>
   12706:	2802      	cmp	r0, #2
   12708:	d117      	bne.n	1273a <connection_release+0x8e>
		ticker_status =
   1270a:	f242 235d 	movw	r3, #8797	; 0x225d
   1270e:	9300      	str	r3, [sp, #0]
   12710:	4b33      	ldr	r3, [pc, #204]	; (127e0 <connection_release+0x134>)
   12712:	2200      	movs	r2, #0
   12714:	4611      	mov	r1, r2
   12716:	4610      	mov	r0, r2
   12718:	f7fe fbce 	bl	10eb8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1271c:	b1f8      	cbz	r0, 1275e <connection_release+0xb2>
   1271e:	2802      	cmp	r0, #2
   12720:	d01d      	beq.n	1275e <connection_release+0xb2>
   12722:	4040      	eors	r0, r0
   12724:	f380 8811 	msr	BASEPRI, r0
   12728:	f04f 0004 	mov.w	r0, #4
   1272c:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1272e:	4040      	eors	r0, r0
   12730:	f380 8811 	msr	BASEPRI, r0
   12734:	f04f 0004 	mov.w	r0, #4
   12738:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1273a:	4040      	eors	r0, r0
   1273c:	f380 8811 	msr	BASEPRI, r0
   12740:	f04f 0004 	mov.w	r0, #4
   12744:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   12746:	790b      	ldrb	r3, [r1, #4]
   12748:	f36f 0301 	bfc	r3, #0, #2
   1274c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   1274e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   12752:	681b      	ldr	r3, [r3, #0]
   12754:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   12758:	8c20      	ldrh	r0, [r4, #32]
   1275a:	f7ff ff23 	bl	125a4 <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1275e:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   12762:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   12766:	4299      	cmp	r1, r3
   12768:	d00c      	beq.n	12784 <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   1276a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   1276e:	4299      	cmp	r1, r3
   12770:	d1e9      	bne.n	12746 <connection_release+0x9a>
   12772:	e007      	b.n	12784 <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   12774:	6803      	ldr	r3, [r0, #0]
   12776:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1277a:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   1277e:	491a      	ldr	r1, [pc, #104]	; (127e8 <connection_release+0x13c>)
   12780:	f7fc fe49 	bl	f416 <mem_release>
	while ((conn->pkt_tx_head) &&
   12784:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   12788:	b118      	cbz	r0, 12792 <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   1278a:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   1278e:	4298      	cmp	r0, r3
   12790:	d1f0      	bne.n	12774 <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   12792:	2300      	movs	r3, #0
   12794:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   12798:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   1279c:	e00d      	b.n	127ba <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   1279e:	790b      	ldrb	r3, [r1, #4]
   127a0:	f36f 0301 	bfc	r3, #0, #2
   127a4:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   127a6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   127aa:	681b      	ldr	r3, [r3, #0]
   127ac:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   127b0:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   127b4:	8c20      	ldrh	r0, [r4, #32]
   127b6:	f7ff fef5 	bl	125a4 <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   127ba:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   127be:	2900      	cmp	r1, #0
   127c0:	d1ed      	bne.n	1279e <connection_release+0xf2>
	conn->handle = 0xffff;
   127c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   127c6:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   127c8:	4b06      	ldr	r3, [pc, #24]	; (127e4 <connection_release+0x138>)
   127ca:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   127ce:	429c      	cmp	r4, r3
   127d0:	d001      	beq.n	127d6 <connection_release+0x12a>
}
   127d2:	b002      	add	sp, #8
   127d4:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   127d6:	2200      	movs	r2, #0
   127d8:	4b02      	ldr	r3, [pc, #8]	; (127e4 <connection_release+0x138>)
   127da:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   127de:	e7f8      	b.n	127d2 <connection_release+0x126>
   127e0:	00011ad5 	.word	0x00011ad5
   127e4:	20000ff4 	.word	0x20000ff4
   127e8:	2000114c 	.word	0x2000114c

000127ec <chan_map_update>:
{
   127ec:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   127ee:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   127f2:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   127f4:	1a9b      	subs	r3, r3, r2
   127f6:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   127f8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   127fc:	da22      	bge.n	12844 <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   127fe:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   12802:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   12806:	429a      	cmp	r2, r3
   12808:	d116      	bne.n	12838 <chan_map_update+0x4c>
   1280a:	460d      	mov	r5, r1
   1280c:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   1280e:	2205      	movs	r2, #5
   12810:	3104      	adds	r1, #4
   12812:	3079      	adds	r0, #121	; 0x79
   12814:	f7ed fd54 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   12818:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   1281c:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   12820:	2000      	movs	r0, #0
   12822:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   12826:	2302      	movs	r3, #2
   12828:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   1282c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   12830:	3b01      	subs	r3, #1
   12832:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   12836:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   12838:	4040      	eors	r0, r0
   1283a:	f380 8811 	msr	BASEPRI, r0
   1283e:	f04f 0004 	mov.w	r0, #4
   12842:	df02      	svc	2
		return 1;
   12844:	2001      	movs	r0, #1
}
   12846:	bd38      	pop	{r3, r4, r5, pc}

00012848 <feature_rsp_send>:
{
   12848:	b538      	push	{r3, r4, r5, lr}
   1284a:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1284c:	4812      	ldr	r0, [pc, #72]	; (12898 <feature_rsp_send+0x50>)
   1284e:	f7fc fdc6 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   12852:	b1d8      	cbz	r0, 1288c <feature_rsp_send+0x44>
   12854:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12856:	7903      	ldrb	r3, [r0, #4]
   12858:	f043 0303 	orr.w	r3, r3, #3
   1285c:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1285e:	2309      	movs	r3, #9
   12860:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   12862:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   12864:	2208      	movs	r2, #8
   12866:	2100      	movs	r1, #0
   12868:	4410      	add	r0, r2
   1286a:	f018 f881 	bl	2a970 <memset>
		conn->llcp_features & 0xFF;
   1286e:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   12872:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   12874:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   12878:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   1287a:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   1287c:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   12880:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   12882:	4621      	mov	r1, r4
   12884:	4628      	mov	r0, r5
   12886:	f7ff f87c 	bl	11982 <ctrl_tx_sec_enqueue>
   1288a:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   1288c:	4040      	eors	r0, r0
   1288e:	f380 8811 	msr	BASEPRI, r0
   12892:	f04f 0004 	mov.w	r0, #4
   12896:	df02      	svc	2
   12898:	2000114c 	.word	0x2000114c

0001289c <empty_tx_enqueue>:
{
   1289c:	b510      	push	{r4, lr}
   1289e:	4604      	mov	r4, r0
	conn->empty = 1;
   128a0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   128a4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   128a8:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   128ac:	f7fc fffa 	bl	f8a4 <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   128b0:	7803      	ldrb	r3, [r0, #0]
   128b2:	2201      	movs	r2, #1
   128b4:	f362 0301 	bfi	r3, r2, #0, #2
   128b8:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   128ba:	2300      	movs	r3, #0
   128bc:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   128be:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   128c2:	b123      	cbz	r3, 128ce <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   128c4:	7803      	ldrb	r3, [r0, #0]
   128c6:	f043 0310 	orr.w	r3, r3, #16
   128ca:	7003      	strb	r3, [r0, #0]
   128cc:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   128ce:	7803      	ldrb	r3, [r0, #0]
   128d0:	f36f 1304 	bfc	r3, #4, #1
   128d4:	7003      	strb	r3, [r0, #0]
}
   128d6:	bd10      	pop	{r4, pc}

000128d8 <prepare_pdu_data_tx>:
{
   128d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   128da:	460c      	mov	r4, r1
	    conn->empty ||
   128dc:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   128e0:	f012 0f80 	tst.w	r2, #128	; 0x80
   128e4:	d109      	bne.n	128fa <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   128e6:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   128ea:	b133      	cbz	r3, 128fa <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   128ec:	f012 0f08 	tst.w	r2, #8
   128f0:	d00e      	beq.n	12910 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   128f2:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   128f6:	4293      	cmp	r3, r2
   128f8:	d00a      	beq.n	12910 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   128fa:	f7ff ffcf 	bl	1289c <empty_tx_enqueue>
   128fe:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   12900:	7813      	ldrb	r3, [r2, #0]
   12902:	f36f 1347 	bfc	r3, #5, #3
   12906:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   12908:	2300      	movs	r3, #0
   1290a:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   1290c:	6022      	str	r2, [r4, #0]
   1290e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12910:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   12912:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   12916:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   12918:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   1291c:	b911      	cbnz	r1, 12924 <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   1291e:	7851      	ldrb	r1, [r2, #1]
   12920:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   12924:	b126      	cbz	r6, 12930 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   12926:	5d99      	ldrb	r1, [r3, r6]
   12928:	2501      	movs	r5, #1
   1292a:	f365 0101 	bfi	r1, r5, #0, #2
   1292e:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12930:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   12934:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   12938:	1a6d      	subs	r5, r5, r1
   1293a:	b2ed      	uxtb	r5, r5
   1293c:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   1293e:	5d99      	ldrb	r1, [r3, r6]
   12940:	f36f 1104 	bfc	r1, #4, #1
   12944:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   12946:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   1294a:	f001 0107 	and.w	r1, r1, #7
   1294e:	2902      	cmp	r1, #2
   12950:	d02d      	beq.n	129ae <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   12952:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   12954:	08c9      	lsrs	r1, r1, #3
   12956:	390a      	subs	r1, #10
   12958:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   1295a:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   1295e:	f017 0f20 	tst.w	r7, #32
   12962:	d001      	beq.n	12968 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   12964:	3904      	subs	r1, #4
   12966:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   12968:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   1296a:	42b9      	cmp	r1, r7
   1296c:	d800      	bhi.n	12970 <prepare_pdu_data_tx+0x98>
   1296e:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   12970:	b2ad      	uxth	r5, r5
   12972:	42af      	cmp	r7, r5
   12974:	d204      	bcs.n	12980 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   12976:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   12978:	5d99      	ldrb	r1, [r3, r6]
   1297a:	f041 0110 	orr.w	r1, r1, #16
   1297e:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   12980:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   12984:	6809      	ldr	r1, [r1, #0]
   12986:	b119      	cbz	r1, 12990 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   12988:	5d99      	ldrb	r1, [r3, r6]
   1298a:	f041 0110 	orr.w	r1, r1, #16
   1298e:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   12990:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   12994:	2b00      	cmp	r3, #0
   12996:	d1b3      	bne.n	12900 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   12998:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   1299c:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   129a0:	428b      	cmp	r3, r1
   129a2:	d0ad      	beq.n	12900 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   129a4:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   129a8:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   129ac:	e7a8      	b.n	12900 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   129ae:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   129b0:	0889      	lsrs	r1, r1, #2
   129b2:	390b      	subs	r1, #11
   129b4:	b289      	uxth	r1, r1
			break;
   129b6:	e7d0      	b.n	1295a <prepare_pdu_data_tx+0x82>

000129b8 <version_ind_send>:
{
   129b8:	b510      	push	{r4, lr}
   129ba:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   129bc:	4810      	ldr	r0, [pc, #64]	; (12a00 <version_ind_send+0x48>)
   129be:	f7fc fd0e 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   129c2:	b1b8      	cbz	r0, 129f4 <version_ind_send+0x3c>
   129c4:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   129c6:	7903      	ldrb	r3, [r0, #4]
   129c8:	f043 0303 	orr.w	r3, r3, #3
   129cc:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   129ce:	2306      	movs	r3, #6
   129d0:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   129d2:	230c      	movs	r3, #12
   129d4:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   129d6:	2309      	movs	r3, #9
   129d8:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   129da:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   129de:	7243      	strb	r3, [r0, #9]
   129e0:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   129e2:	72c3      	strb	r3, [r0, #11]
   129e4:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   129e6:	4620      	mov	r0, r4
   129e8:	f7fe ffcb 	bl	11982 <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   129ec:	4620      	mov	r0, r4
   129ee:	f7ff ff55 	bl	1289c <empty_tx_enqueue>
   129f2:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   129f4:	4040      	eors	r0, r0
   129f6:	f380 8811 	msr	BASEPRI, r0
   129fa:	f04f 0004 	mov.w	r0, #4
   129fe:	df02      	svc	2
   12a00:	2000114c 	.word	0x2000114c

00012a04 <tx_packet_set>:
{
   12a04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   12a06:	4605      	mov	r5, r0
   12a08:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   12a0a:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   12a0c:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   12a10:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   12a14:	09c9      	lsrs	r1, r1, #7
   12a16:	4620      	mov	r0, r4
   12a18:	f7fc fe5e 	bl	f6d8 <radio_phy_set>
	if (conn->enc_tx) {
   12a1c:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12a20:	f013 0f20 	tst.w	r3, #32
   12a24:	d10a      	bne.n	12a3c <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   12a26:	0062      	lsls	r2, r4, #1
   12a28:	f042 0201 	orr.w	r2, r2, #1
   12a2c:	b2f1      	uxtb	r1, r6
   12a2e:	2008      	movs	r0, #8
   12a30:	f7fc fe96 	bl	f760 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   12a34:	4638      	mov	r0, r7
   12a36:	f7fc fec9 	bl	f7cc <radio_pkt_tx_set>
   12a3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   12a3c:	0062      	lsls	r2, r4, #1
   12a3e:	1d31      	adds	r1, r6, #4
   12a40:	f042 0201 	orr.w	r2, r2, #1
   12a44:	b2c9      	uxtb	r1, r1
   12a46:	2008      	movs	r0, #8
   12a48:	f7fc fe8a 	bl	f760 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   12a4c:	4639      	mov	r1, r7
   12a4e:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   12a52:	f7fd f8f1 	bl	fc38 <radio_ccm_tx_pkt_set>
   12a56:	f7fc feb9 	bl	f7cc <radio_pkt_tx_set>
   12a5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012a5c <chan_set>:
{
   12a5c:	b510      	push	{r4, lr}
   12a5e:	4604      	mov	r4, r0
	switch (chan) {
   12a60:	2826      	cmp	r0, #38	; 0x26
   12a62:	d013      	beq.n	12a8c <chan_set+0x30>
   12a64:	2827      	cmp	r0, #39	; 0x27
   12a66:	d015      	beq.n	12a94 <chan_set+0x38>
   12a68:	2825      	cmp	r0, #37	; 0x25
   12a6a:	d008      	beq.n	12a7e <chan_set+0x22>
		if (chan < 11) {
   12a6c:	280a      	cmp	r0, #10
   12a6e:	d915      	bls.n	12a9c <chan_set+0x40>
		} else if (chan < 40) {
   12a70:	2827      	cmp	r0, #39	; 0x27
   12a72:	d818      	bhi.n	12aa6 <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   12a74:	3003      	adds	r0, #3
   12a76:	0040      	lsls	r0, r0, #1
   12a78:	f7fc fe42 	bl	f700 <radio_freq_chan_set>
   12a7c:	e002      	b.n	12a84 <chan_set+0x28>
		radio_freq_chan_set(2);
   12a7e:	2002      	movs	r0, #2
   12a80:	f7fc fe3e 	bl	f700 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   12a84:	4620      	mov	r0, r4
   12a86:	f7fc fe41 	bl	f70c <radio_whiten_iv_set>
   12a8a:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   12a8c:	201a      	movs	r0, #26
   12a8e:	f7fc fe37 	bl	f700 <radio_freq_chan_set>
		break;
   12a92:	e7f7      	b.n	12a84 <chan_set+0x28>
		radio_freq_chan_set(80);
   12a94:	2050      	movs	r0, #80	; 0x50
   12a96:	f7fc fe33 	bl	f700 <radio_freq_chan_set>
		break;
   12a9a:	e7f3      	b.n	12a84 <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   12a9c:	3002      	adds	r0, #2
   12a9e:	0040      	lsls	r0, r0, #1
   12aa0:	f7fc fe2e 	bl	f700 <radio_freq_chan_set>
   12aa4:	e7ee      	b.n	12a84 <chan_set+0x28>
			LL_ASSERT(0);
   12aa6:	4040      	eors	r0, r0
   12aa8:	f380 8811 	msr	BASEPRI, r0
   12aac:	f04f 0004 	mov.w	r0, #4
   12ab0:	df02      	svc	2
	...

00012ab4 <adv_setup>:
{
   12ab4:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   12ab6:	4a39      	ldr	r2, [pc, #228]	; (12b9c <adv_setup+0xe8>)
   12ab8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   12abc:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   12ac0:	4293      	cmp	r3, r2
   12ac2:	d037      	beq.n	12b34 <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   12ac4:	3301      	adds	r3, #1
   12ac6:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12ac8:	2b02      	cmp	r3, #2
   12aca:	d031      	beq.n	12b30 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   12acc:	4a33      	ldr	r2, [pc, #204]	; (12b9c <adv_setup+0xe8>)
   12ace:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   12ad2:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   12ad4:	4a31      	ldr	r2, [pc, #196]	; (12b9c <adv_setup+0xe8>)
   12ad6:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   12ada:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   12ade:	4293      	cmp	r3, r2
   12ae0:	d007      	beq.n	12af2 <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   12ae2:	3301      	adds	r3, #1
   12ae4:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   12ae6:	2b02      	cmp	r3, #2
   12ae8:	d026      	beq.n	12b38 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   12aea:	4a2c      	ldr	r2, [pc, #176]	; (12b9c <adv_setup+0xe8>)
   12aec:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   12af0:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   12af2:	4c2a      	ldr	r4, [pc, #168]	; (12b9c <adv_setup+0xe8>)
   12af4:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   12af8:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12afc:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12b00:	3320      	adds	r3, #32
   12b02:	441c      	add	r4, r3
   12b04:	1de5      	adds	r5, r4, #7
	if (upd) {
   12b06:	b9c9      	cbnz	r1, 12b3c <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   12b08:	4628      	mov	r0, r5
   12b0a:	f7fc fe5f 	bl	f7cc <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   12b0e:	79e3      	ldrb	r3, [r4, #7]
   12b10:	f003 030f 	and.w	r3, r3, #15
   12b14:	2b02      	cmp	r3, #2
   12b16:	d020      	beq.n	12b5a <adv_setup+0xa6>
   12b18:	2b07      	cmp	r3, #7
   12b1a:	d01e      	beq.n	12b5a <adv_setup+0xa6>
		_radio.state = STATE_TX;
   12b1c:	2202      	movs	r2, #2
   12b1e:	4b1f      	ldr	r3, [pc, #124]	; (12b9c <adv_setup+0xe8>)
   12b20:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   12b22:	2096      	movs	r0, #150	; 0x96
   12b24:	f7fc ff78 	bl	fa18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12b28:	2000      	movs	r0, #0
   12b2a:	f7fc fec3 	bl	f8b4 <radio_switch_complete_and_rx>
   12b2e:	e019      	b.n	12b64 <adv_setup+0xb0>
			first = 0;
   12b30:	2300      	movs	r3, #0
   12b32:	e7cb      	b.n	12acc <adv_setup+0x18>
	u8_t upd = 0;
   12b34:	2100      	movs	r1, #0
   12b36:	e7cd      	b.n	12ad4 <adv_setup+0x20>
			first = 0;
   12b38:	2300      	movs	r3, #0
   12b3a:	e7d6      	b.n	12aea <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   12b3c:	4817      	ldr	r0, [pc, #92]	; (12b9c <adv_setup+0xe8>)
   12b3e:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   12b42:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   12b46:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12b4a:	3370      	adds	r3, #112	; 0x70
   12b4c:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   12b4e:	2206      	movs	r2, #6
   12b50:	1ca9      	adds	r1, r5, #2
   12b52:	3009      	adds	r0, #9
   12b54:	f7ed fbb4 	bl	2c0 <memcpy>
   12b58:	e7d6      	b.n	12b08 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   12b5a:	2203      	movs	r2, #3
   12b5c:	4b0f      	ldr	r3, [pc, #60]	; (12b9c <adv_setup+0xe8>)
   12b5e:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12b60:	f7fc feb8 	bl	f8d4 <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   12b64:	4b0d      	ldr	r3, [pc, #52]	; (12b9c <adv_setup+0xe8>)
   12b66:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   12b6a:	f3c2 0142 	ubfx	r1, r2, #1, #3
   12b6e:	b2ca      	uxtb	r2, r1
   12b70:	4613      	mov	r3, r2
	chan = 0;
   12b72:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   12b74:	e002      	b.n	12b7c <adv_setup+0xc8>
		chan++;
   12b76:	3001      	adds	r0, #1
   12b78:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   12b7a:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   12b7c:	f013 0f01 	tst.w	r3, #1
   12b80:	d0f9      	beq.n	12b76 <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   12b82:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   12b84:	4b05      	ldr	r3, [pc, #20]	; (12b9c <adv_setup+0xe8>)
   12b86:	400a      	ands	r2, r1
   12b88:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   12b8c:	f362 0143 	bfi	r1, r2, #1, #3
   12b90:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   12b94:	3025      	adds	r0, #37	; 0x25
   12b96:	f7ff ff61 	bl	12a5c <chan_set>
   12b9a:	bd38      	pop	{r3, r4, r5, pc}
   12b9c:	20000ff4 	.word	0x20000ff4

00012ba0 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   12ba0:	b158      	cbz	r0, 12bba <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   12ba2:	4b6c      	ldr	r3, [pc, #432]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12ba4:	7b9b      	ldrb	r3, [r3, #14]
   12ba6:	b2db      	uxtb	r3, r3
   12ba8:	2b05      	cmp	r3, #5
   12baa:	d100      	bne.n	12bae <ticker_stop_adv_stop+0xe>
   12bac:	4770      	bx	lr
   12bae:	4040      	eors	r0, r0
   12bb0:	f380 8811 	msr	BASEPRI, r0
   12bb4:	f04f 0004 	mov.w	r0, #4
   12bb8:	df02      	svc	2
{
   12bba:	b500      	push	{lr}
   12bbc:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12bbe:	4b65      	ldr	r3, [pc, #404]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12bc0:	7b1b      	ldrb	r3, [r3, #12]
   12bc2:	b2db      	uxtb	r3, r3
   12bc4:	2b05      	cmp	r3, #5
   12bc6:	d010      	beq.n	12bea <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   12bc8:	4b62      	ldr	r3, [pc, #392]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12bca:	7b5b      	ldrb	r3, [r3, #13]
   12bcc:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   12bce:	2b05      	cmp	r3, #5
   12bd0:	d00b      	beq.n	12bea <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12bd2:	4b61      	ldr	r3, [pc, #388]	; (12d58 <ticker_stop_adv_stop+0x1b8>)
   12bd4:	2200      	movs	r2, #0
   12bd6:	4611      	mov	r1, r2
   12bd8:	2001      	movs	r0, #1
   12bda:	f7fc fabf 	bl	f15c <mayfly_enqueue>
	LL_ASSERT(!retval);
   12bde:	2800      	cmp	r0, #0
   12be0:	f040 80b1 	bne.w	12d46 <ticker_stop_adv_stop+0x1a6>
}
   12be4:	b005      	add	sp, #20
   12be6:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12bea:	ab04      	add	r3, sp, #16
   12bec:	2202      	movs	r2, #2
   12bee:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12bf2:	9300      	str	r3, [sp, #0]
   12bf4:	4b59      	ldr	r3, [pc, #356]	; (12d5c <ticker_stop_adv_stop+0x1bc>)
   12bf6:	2200      	movs	r2, #0
   12bf8:	2101      	movs	r1, #1
   12bfa:	4610      	mov	r0, r2
   12bfc:	f7fe f95c 	bl	10eb8 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   12c00:	2802      	cmp	r0, #2
   12c02:	d02c      	beq.n	12c5e <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   12c04:	9b02      	ldr	r3, [sp, #8]
   12c06:	2b00      	cmp	r3, #0
   12c08:	d17e      	bne.n	12d08 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12c0a:	2302      	movs	r3, #2
   12c0c:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   12c0e:	4b51      	ldr	r3, [pc, #324]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12c10:	7b1b      	ldrb	r3, [r3, #12]
   12c12:	2b00      	cmp	r3, #0
   12c14:	d031      	beq.n	12c7a <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   12c16:	2000      	movs	r0, #0
   12c18:	4b4e      	ldr	r3, [pc, #312]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12c1a:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c1c:	ab03      	add	r3, sp, #12
   12c1e:	9300      	str	r3, [sp, #0]
   12c20:	4b4e      	ldr	r3, [pc, #312]	; (12d5c <ticker_stop_adv_stop+0x1bc>)
   12c22:	2201      	movs	r2, #1
   12c24:	4611      	mov	r1, r2
   12c26:	f7fe f947 	bl	10eb8 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12c2a:	2802      	cmp	r0, #2
   12c2c:	d02b      	beq.n	12c86 <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12c2e:	9b03      	ldr	r3, [sp, #12]
   12c30:	2b00      	cmp	r3, #0
   12c32:	d144      	bne.n	12cbe <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12c34:	4b47      	ldr	r3, [pc, #284]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12c36:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12c38:	695b      	ldr	r3, [r3, #20]
   12c3a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12c3e:	429a      	cmp	r2, r3
   12c40:	d92f      	bls.n	12ca2 <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   12c42:	4b47      	ldr	r3, [pc, #284]	; (12d60 <ticker_stop_adv_stop+0x1c0>)
   12c44:	2200      	movs	r2, #0
   12c46:	4611      	mov	r1, r2
   12c48:	2001      	movs	r0, #1
   12c4a:	f7fc fa87 	bl	f15c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12c4e:	2800      	cmp	r0, #0
   12c50:	d0bf      	beq.n	12bd2 <ticker_stop_adv_stop+0x32>
   12c52:	4040      	eors	r0, r0
   12c54:	f380 8811 	msr	BASEPRI, r0
   12c58:	f04f 0004 	mov.w	r0, #4
   12c5c:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12c5e:	2201      	movs	r2, #1
   12c60:	4611      	mov	r1, r2
   12c62:	4610      	mov	r0, r2
   12c64:	f7fc fa3c 	bl	f0e0 <mayfly_enable>
   12c68:	e003      	b.n	12c72 <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c6a:	2101      	movs	r1, #1
   12c6c:	2000      	movs	r0, #0
   12c6e:	f7fe f9df 	bl	11030 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   12c72:	9b02      	ldr	r3, [sp, #8]
   12c74:	2b02      	cmp	r3, #2
   12c76:	d0f8      	beq.n	12c6a <ticker_stop_adv_stop+0xca>
   12c78:	e7c4      	b.n	12c04 <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12c7a:	4040      	eors	r0, r0
   12c7c:	f380 8811 	msr	BASEPRI, r0
   12c80:	f04f 0004 	mov.w	r0, #4
   12c84:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12c86:	2201      	movs	r2, #1
   12c88:	4611      	mov	r1, r2
   12c8a:	4610      	mov	r0, r2
   12c8c:	f7fc fa28 	bl	f0e0 <mayfly_enable>
   12c90:	e003      	b.n	12c9a <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12c92:	2101      	movs	r1, #1
   12c94:	2000      	movs	r0, #0
   12c96:	f7fe f9cb 	bl	11030 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12c9a:	9b03      	ldr	r3, [sp, #12]
   12c9c:	2b02      	cmp	r3, #2
   12c9e:	d0f8      	beq.n	12c92 <ticker_stop_adv_stop+0xf2>
   12ca0:	e7c5      	b.n	12c2e <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   12ca2:	4b30      	ldr	r3, [pc, #192]	; (12d64 <ticker_stop_adv_stop+0x1c4>)
   12ca4:	2200      	movs	r2, #0
   12ca6:	4611      	mov	r1, r2
   12ca8:	2001      	movs	r0, #1
   12caa:	f7fc fa57 	bl	f15c <mayfly_enqueue>
				LL_ASSERT(!retval);
   12cae:	2800      	cmp	r0, #0
   12cb0:	d08f      	beq.n	12bd2 <ticker_stop_adv_stop+0x32>
   12cb2:	4040      	eors	r0, r0
   12cb4:	f380 8811 	msr	BASEPRI, r0
   12cb8:	f04f 0004 	mov.w	r0, #4
   12cbc:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12cbe:	9b03      	ldr	r3, [sp, #12]
   12cc0:	2b01      	cmp	r3, #1
   12cc2:	d11b      	bne.n	12cfc <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12cc4:	4b26      	ldr	r3, [pc, #152]	; (12d60 <ticker_stop_adv_stop+0x1c0>)
   12cc6:	2200      	movs	r2, #0
   12cc8:	4611      	mov	r1, r2
   12cca:	2001      	movs	r0, #1
   12ccc:	f7fc fa46 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12cd0:	b970      	cbnz	r0, 12cf0 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12cd2:	4b24      	ldr	r3, [pc, #144]	; (12d64 <ticker_stop_adv_stop+0x1c4>)
   12cd4:	2200      	movs	r2, #0
   12cd6:	4611      	mov	r1, r2
   12cd8:	2001      	movs	r0, #1
   12cda:	f7fc fa3f 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12cde:	2800      	cmp	r0, #0
   12ce0:	f43f af77 	beq.w	12bd2 <ticker_stop_adv_stop+0x32>
   12ce4:	4040      	eors	r0, r0
   12ce6:	f380 8811 	msr	BASEPRI, r0
   12cea:	f04f 0004 	mov.w	r0, #4
   12cee:	df02      	svc	2
			LL_ASSERT(!retval);
   12cf0:	4040      	eors	r0, r0
   12cf2:	f380 8811 	msr	BASEPRI, r0
   12cf6:	f04f 0004 	mov.w	r0, #4
   12cfa:	df02      	svc	2
			LL_ASSERT(0);
   12cfc:	4040      	eors	r0, r0
   12cfe:	f380 8811 	msr	BASEPRI, r0
   12d02:	f04f 0004 	mov.w	r0, #4
   12d06:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   12d08:	9b02      	ldr	r3, [sp, #8]
   12d0a:	2b01      	cmp	r3, #1
   12d0c:	d115      	bne.n	12d3a <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   12d0e:	4b11      	ldr	r3, [pc, #68]	; (12d54 <ticker_stop_adv_stop+0x1b4>)
   12d10:	7bdb      	ldrb	r3, [r3, #15]
   12d12:	2b00      	cmp	r3, #0
   12d14:	f43f af5d 	beq.w	12bd2 <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12d18:	4b13      	ldr	r3, [pc, #76]	; (12d68 <ticker_stop_adv_stop+0x1c8>)
   12d1a:	2204      	movs	r2, #4
   12d1c:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12d1e:	2200      	movs	r2, #0
   12d20:	4611      	mov	r1, r2
   12d22:	2001      	movs	r0, #1
   12d24:	f7fc fa1a 	bl	f15c <mayfly_enqueue>
			LL_ASSERT(!retval);
   12d28:	2800      	cmp	r0, #0
   12d2a:	f43f af52 	beq.w	12bd2 <ticker_stop_adv_stop+0x32>
   12d2e:	4040      	eors	r0, r0
   12d30:	f380 8811 	msr	BASEPRI, r0
   12d34:	f04f 0004 	mov.w	r0, #4
   12d38:	df02      	svc	2
		LL_ASSERT(0);
   12d3a:	4040      	eors	r0, r0
   12d3c:	f380 8811 	msr	BASEPRI, r0
   12d40:	f04f 0004 	mov.w	r0, #4
   12d44:	df02      	svc	2
	LL_ASSERT(!retval);
   12d46:	4040      	eors	r0, r0
   12d48:	f380 8811 	msr	BASEPRI, r0
   12d4c:	f04f 0004 	mov.w	r0, #4
   12d50:	df02      	svc	2
   12d52:	bf00      	nop
   12d54:	20000ff4 	.word	0x20000ff4
   12d58:	2000bd20 	.word	0x2000bd20
   12d5c:	00011765 	.word	0x00011765
   12d60:	2000bd50 	.word	0x2000bd50
   12d64:	2000be10 	.word	0x2000be10
   12d68:	2000bd80 	.word	0x2000bd80
   12d6c:	00000000 	.word	0x00000000

00012d70 <sched_free_win_offset_calc>:
{
   12d70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   12d74:	b091      	sub	sp, #68	; 0x44
   12d76:	9009      	str	r0, [sp, #36]	; 0x24
   12d78:	910a      	str	r1, [sp, #40]	; 0x28
   12d7a:	9207      	str	r2, [sp, #28]
   12d7c:	469b      	mov	fp, r3
   12d7e:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12d80:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   12d84:	6803      	ldr	r3, [r0, #0]
   12d86:	2b00      	cmp	r3, #0
   12d88:	db0f      	blt.n	12daa <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12d8a:	2300      	movs	r3, #0
   12d8c:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12d8e:	27ff      	movs	r7, #255	; 0xff
   12d90:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d94:	2300      	movs	r3, #0
   12d96:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12d9a:	930f      	str	r3, [sp, #60]	; 0x3c
   12d9c:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12d9e:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12da0:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   12da2:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12da4:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12da6:	4698      	mov	r8, r3
   12da8:	e06d      	b.n	12e86 <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12daa:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12dac:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12dae:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   12db2:	4291      	cmp	r1, r2
   12db4:	bf2c      	ite	cs
   12db6:	1a5b      	subcs	r3, r3, r1
   12db8:	1a9b      	subcc	r3, r3, r2
   12dba:	930b      	str	r3, [sp, #44]	; 0x2c
   12dbc:	e7e7      	b.n	12d8e <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12dbe:	2101      	movs	r1, #1
   12dc0:	2000      	movs	r0, #0
   12dc2:	f7fe f935 	bl	11030 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12dc6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12dc8:	2b02      	cmp	r3, #2
   12dca:	d0f8      	beq.n	12dbe <sched_free_win_offset_calc+0x4e>
   12dcc:	e06c      	b.n	12ea8 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12dce:	4040      	eors	r0, r0
   12dd0:	f380 8811 	msr	BASEPRI, r0
   12dd4:	f04f 0004 	mov.w	r0, #4
   12dd8:	df02      	svc	2
			LL_ASSERT(0);
   12dda:	4040      	eors	r0, r0
   12ddc:	f380 8811 	msr	BASEPRI, r0
   12de0:	f04f 0004 	mov.w	r0, #4
   12de4:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12de6:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   12dea:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   12dee:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12df2:	4291      	cmp	r1, r2
   12df4:	bf2c      	ite	cs
   12df6:	ebc3 0301 	rsbcs	r3, r3, r1
   12dfa:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   12dfe:	9a05      	ldr	r2, [sp, #20]
   12e00:	441a      	add	r2, r3
   12e02:	9205      	str	r2, [sp, #20]
   12e04:	e085      	b.n	12f12 <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   12e06:	2202      	movs	r2, #2
   12e08:	a90d      	add	r1, sp, #52	; 0x34
   12e0a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12e0e:	f7ed fa57 	bl	2c0 <memcpy>
					offset_index++;
   12e12:	3401      	adds	r4, #1
   12e14:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   12e16:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12e18:	782b      	ldrb	r3, [r5, #0]
   12e1a:	429c      	cmp	r4, r3
   12e1c:	d21f      	bcs.n	12e5e <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12e1e:	4639      	mov	r1, r7
   12e20:	9805      	ldr	r0, [sp, #20]
   12e22:	f7fe f919 	bl	11058 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   12e26:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12e2a:	4433      	add	r3, r6
   12e2c:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12e2e:	4298      	cmp	r0, r3
   12e30:	d315      	bcc.n	12e5e <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12e32:	19bb      	adds	r3, r7, r6
   12e34:	485a      	ldr	r0, [pc, #360]	; (12fa0 <sched_free_win_offset_calc+0x230>)
   12e36:	fba3 0100 	umull	r0, r1, r3, r0
   12e3a:	2207      	movs	r2, #7
   12e3c:	fb02 1103 	mla	r1, r2, r3, r1
   12e40:	a355      	add	r3, pc, #340	; (adr r3, 12f98 <sched_free_win_offset_calc+0x228>)
   12e42:	e9d3 2300 	ldrd	r2, r3, [r3]
   12e46:	f7ee f959 	bl	10fc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12e4a:	4b56      	ldr	r3, [pc, #344]	; (12fa4 <sched_free_win_offset_calc+0x234>)
   12e4c:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12e50:	f3c0 208f 	ubfx	r0, r0, #10, #16
   12e54:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12e58:	4558      	cmp	r0, fp
   12e5a:	d3d4      	bcc.n	12e06 <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12e5c:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12e5e:	9b07      	ldr	r3, [sp, #28]
   12e60:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   12e62:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   12e66:	459b      	cmp	fp, r3
   12e68:	d95e      	bls.n	12f28 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12e6a:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12e6e:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   12e72:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   12e76:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12e78:	9b05      	ldr	r3, [sp, #20]
   12e7a:	9308      	str	r3, [sp, #32]
   12e7c:	e000      	b.n	12e80 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12e7e:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12e80:	782b      	ldrb	r3, [r5, #0]
   12e82:	429c      	cmp	r4, r3
   12e84:	d251      	bcs.n	12f2a <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   12e86:	2302      	movs	r3, #2
   12e88:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12e8a:	ab0c      	add	r3, sp, #48	; 0x30
   12e8c:	9302      	str	r3, [sp, #8]
   12e8e:	4b46      	ldr	r3, [pc, #280]	; (12fa8 <sched_free_win_offset_calc+0x238>)
   12e90:	9301      	str	r3, [sp, #4]
   12e92:	ab0e      	add	r3, sp, #56	; 0x38
   12e94:	9300      	str	r3, [sp, #0]
   12e96:	ab0f      	add	r3, sp, #60	; 0x3c
   12e98:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12e9c:	2101      	movs	r1, #1
   12e9e:	2000      	movs	r0, #0
   12ea0:	f7fe f846 	bl	10f30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   12ea4:	2802      	cmp	r0, #2
   12ea6:	d08e      	beq.n	12dc6 <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12ea8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12eaa:	2b00      	cmp	r3, #0
   12eac:	d18f      	bne.n	12dce <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12eae:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   12eb2:	2aff      	cmp	r2, #255	; 0xff
   12eb4:	d039      	beq.n	12f2a <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   12eb6:	2fff      	cmp	r7, #255	; 0xff
   12eb8:	d002      	beq.n	12ec0 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   12eba:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   12ebc:	4598      	cmp	r8, r3
   12ebe:	d18c      	bne.n	12dda <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12ec0:	2a05      	cmp	r2, #5
   12ec2:	d9dd      	bls.n	12e80 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   12ec4:	4b39      	ldr	r3, [pc, #228]	; (12fac <sched_free_win_offset_calc+0x23c>)
   12ec6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   12eca:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   12ecc:	429a      	cmp	r2, r3
   12ece:	dad7      	bge.n	12e80 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   12ed0:	2a06      	cmp	r2, #6
   12ed2:	d9d4      	bls.n	12e7e <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   12ed4:	9b06      	ldr	r3, [sp, #24]
   12ed6:	2bff      	cmp	r3, #255	; 0xff
   12ed8:	d127      	bne.n	12f2a <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   12eda:	3a07      	subs	r2, #7
   12edc:	b292      	uxth	r2, r2
   12ede:	f44f 71aa 	mov.w	r1, #340	; 0x154
   12ee2:	4b32      	ldr	r3, [pc, #200]	; (12fac <sched_free_win_offset_calc+0x23c>)
   12ee4:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   12ee8:	f7fc fab6 	bl	f458 <mem_get>
   12eec:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   12eee:	9b09      	ldr	r3, [sp, #36]	; 0x24
   12ef0:	4283      	cmp	r3, r0
   12ef2:	d0c5      	beq.n	12e80 <sched_free_win_offset_calc+0x110>
   12ef4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   12ef6:	b91b      	cbnz	r3, 12f00 <sched_free_win_offset_calc+0x190>
   12ef8:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12efc:	2b00      	cmp	r3, #0
   12efe:	dbbf      	blt.n	12e80 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   12f00:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   12f02:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   12f04:	18d3      	adds	r3, r2, r3
   12f06:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   12f08:	f8d9 3000 	ldr.w	r3, [r9]
   12f0c:	2b00      	cmp	r3, #0
   12f0e:	f6ff af6a 	blt.w	12de6 <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   12f12:	9b07      	ldr	r3, [sp, #28]
   12f14:	681f      	ldr	r7, [r3, #0]
   12f16:	9b05      	ldr	r3, [sp, #20]
   12f18:	42bb      	cmp	r3, r7
   12f1a:	d9a6      	bls.n	12e6a <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12f1c:	9a08      	ldr	r2, [sp, #32]
   12f1e:	42ba      	cmp	r2, r7
   12f20:	f4ff af7a 	bcc.w	12e18 <sched_free_win_offset_calc+0xa8>
   12f24:	4617      	mov	r7, r2
   12f26:	e777      	b.n	12e18 <sched_free_win_offset_calc+0xa8>
   12f28:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12f2a:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12f2e:	2bff      	cmp	r3, #255	; 0xff
   12f30:	d003      	beq.n	12f3a <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   12f32:	702c      	strb	r4, [r5, #0]
}
   12f34:	b011      	add	sp, #68	; 0x44
   12f36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12f3a:	9b07      	ldr	r3, [sp, #28]
   12f3c:	681f      	ldr	r7, [r3, #0]
   12f3e:	9a08      	ldr	r2, [sp, #32]
   12f40:	42ba      	cmp	r2, r7
   12f42:	d300      	bcc.n	12f46 <sched_free_win_offset_calc+0x1d6>
   12f44:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   12f46:	782b      	ldrb	r3, [r5, #0]
   12f48:	429c      	cmp	r4, r3
   12f4a:	d21f      	bcs.n	12f8c <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12f4c:	19bb      	adds	r3, r7, r6
   12f4e:	4814      	ldr	r0, [pc, #80]	; (12fa0 <sched_free_win_offset_calc+0x230>)
   12f50:	fba3 0100 	umull	r0, r1, r3, r0
   12f54:	2207      	movs	r2, #7
   12f56:	fb02 1103 	mla	r1, r2, r3, r1
   12f5a:	a30f      	add	r3, pc, #60	; (adr r3, 12f98 <sched_free_win_offset_calc+0x228>)
   12f5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12f60:	f7ee f8cc 	bl	10fc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   12f64:	4b0f      	ldr	r3, [pc, #60]	; (12fa4 <sched_free_win_offset_calc+0x234>)
   12f66:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12f6a:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12f6e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   12f72:	459b      	cmp	fp, r3
   12f74:	d909      	bls.n	12f8a <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   12f76:	2202      	movs	r2, #2
   12f78:	a90d      	add	r1, sp, #52	; 0x34
   12f7a:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12f7e:	f7ed f99f 	bl	2c0 <memcpy>
			offset_index++;
   12f82:	3401      	adds	r4, #1
   12f84:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   12f86:	3728      	adds	r7, #40	; 0x28
   12f88:	e7dd      	b.n	12f46 <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12f8a:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12f8c:	9b07      	ldr	r3, [sp, #28]
   12f8e:	601f      	str	r7, [r3, #0]
   12f90:	e7cf      	b.n	12f32 <sched_free_win_offset_calc+0x1c2>
   12f92:	bf00      	nop
   12f94:	f3af 8000 	nop.w
   12f98:	3b9aca00 	.word	0x3b9aca00
   12f9c:	00000000 	.word	0x00000000
   12fa0:	1afd498d 	.word	0x1afd498d
   12fa4:	d1b71759 	.word	0xd1b71759
   12fa8:	00011765 	.word	0x00011765
   12fac:	20000ff4 	.word	0x20000ff4

00012fb0 <mayfly_sched_free_win_offset_calc>:
{
   12fb0:	b500      	push	{lr}
   12fb2:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   12fb4:	2300      	movs	r3, #0
   12fb6:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   12fb8:	2306      	movs	r3, #6
   12fba:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   12fbe:	f990 301d 	ldrsb.w	r3, [r0, #29]
   12fc2:	2b00      	cmp	r3, #0
   12fc4:	db0e      	blt.n	12fe4 <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   12fc6:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   12fc8:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   12fcc:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   12fd0:	9101      	str	r1, [sp, #4]
   12fd2:	f10d 010b 	add.w	r1, sp, #11
   12fd6:	9100      	str	r1, [sp, #0]
   12fd8:	2100      	movs	r1, #0
   12fda:	f7ff fec9 	bl	12d70 <sched_free_win_offset_calc>
}
   12fde:	b005      	add	sp, #20
   12fe0:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   12fe4:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   12fe6:	4602      	mov	r2, r0
   12fe8:	f842 3fe4 	str.w	r3, [r2, #228]!
   12fec:	e7ec      	b.n	12fc8 <mayfly_sched_free_win_offset_calc+0x18>
	...

00012ff0 <mayfly_sched_win_offset_select>:
{
   12ff0:	b570      	push	{r4, r5, r6, lr}
   12ff2:	b088      	sub	sp, #32
   12ff4:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   12ff6:	ac05      	add	r4, sp, #20
   12ff8:	2500      	movs	r5, #0
   12ffa:	9505      	str	r5, [sp, #20]
   12ffc:	9506      	str	r5, [sp, #24]
   12ffe:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   13000:	2306      	movs	r3, #6
   13002:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   13006:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   1300a:	4843      	ldr	r0, [pc, #268]	; (13118 <mayfly_sched_win_offset_select+0x128>)
   1300c:	fba2 0100 	umull	r0, r1, r2, r0
   13010:	f240 1323 	movw	r3, #291	; 0x123
   13014:	fb03 1102 	mla	r1, r3, r2, r1
   13018:	a33d      	add	r3, pc, #244	; (adr r3, 13110 <mayfly_sched_win_offset_select+0x120>)
   1301a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1301e:	f7ee f86d 	bl	10fc <__aeabi_uldivmod>
   13022:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   13026:	aa08      	add	r2, sp, #32
   13028:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   1302c:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   13030:	9401      	str	r4, [sp, #4]
   13032:	f10d 0113 	add.w	r1, sp, #19
   13036:	9100      	str	r1, [sp, #0]
   13038:	2101      	movs	r1, #1
   1303a:	4630      	mov	r0, r6
   1303c:	f7ff fe98 	bl	12d70 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   13040:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   13042:	e018      	b.n	13076 <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   13044:	3301      	adds	r3, #1
   13046:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   13048:	f89d 1013 	ldrb.w	r1, [sp, #19]
   1304c:	428b      	cmp	r3, r1
   1304e:	d20e      	bcs.n	1306e <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   13050:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   13054:	f64f 70ff 	movw	r0, #65535	; 0xffff
   13058:	4282      	cmp	r2, r0
   1305a:	d0f3      	beq.n	13044 <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   1305c:	a808      	add	r0, sp, #32
   1305e:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   13062:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   13066:	4282      	cmp	r2, r0
   13068:	d001      	beq.n	1306e <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   1306a:	2401      	movs	r4, #1
   1306c:	e7ea      	b.n	13044 <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   1306e:	428b      	cmp	r3, r1
   13070:	d30e      	bcc.n	13090 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   13072:	3501      	adds	r5, #1
   13074:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   13076:	2d05      	cmp	r5, #5
   13078:	d80a      	bhi.n	13090 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   1307a:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   1307e:	2202      	movs	r2, #2
   13080:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   13084:	f10d 000a 	add.w	r0, sp, #10
   13088:	f7ed f91a 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   1308c:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   1308e:	e7db      	b.n	13048 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   13090:	2d05      	cmp	r5, #5
   13092:	d91d      	bls.n	130d0 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   13094:	b35c      	cbz	r4, 130ee <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   13096:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   1309a:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   1309e:	2200      	movs	r2, #0
   130a0:	4b1e      	ldr	r3, [pc, #120]	; (1311c <mayfly_sched_win_offset_select+0x12c>)
   130a2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   130a6:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   130aa:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   130ae:	f042 0203 	orr.w	r2, r2, #3
   130b2:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   130b6:	2203      	movs	r2, #3
   130b8:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   130bc:	2211      	movs	r2, #17
   130be:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   130c2:	220f      	movs	r2, #15
   130c4:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   130c8:	2220      	movs	r2, #32
   130ca:	701a      	strb	r2, [r3, #0]
}
   130cc:	b008      	add	sp, #32
   130ce:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   130d0:	a908      	add	r1, sp, #32
   130d2:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   130d6:	f240 43e2 	movw	r3, #1250	; 0x4e2
   130da:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   130de:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   130e2:	2202      	movs	r2, #2
   130e4:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   130e8:	f7ed f8ea 	bl	2c0 <memcpy>
   130ec:	e7ee      	b.n	130cc <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   130ee:	a908      	add	r1, sp, #32
   130f0:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   130f4:	f240 43e2 	movw	r3, #1250	; 0x4e2
   130f8:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   130fc:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   13100:	2202      	movs	r2, #2
   13102:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   13106:	f7ed f8db 	bl	2c0 <memcpy>
   1310a:	e7df      	b.n	130cc <mayfly_sched_win_offset_select+0xdc>
   1310c:	f3af 8000 	nop.w
   13110:	1afd498d 	.word	0x1afd498d
   13114:	00000007 	.word	0x00000007
   13118:	09ce5400 	.word	0x09ce5400
   1311c:	20000ff4 	.word	0x20000ff4

00013120 <sched_after_mstr_free_slot_get>:
{
   13120:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   13124:	b08b      	sub	sp, #44	; 0x2c
   13126:	4604      	mov	r4, r0
   13128:	468b      	mov	fp, r1
   1312a:	4615      	mov	r5, r2
   1312c:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   1312e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   13132:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   13136:	2300      	movs	r3, #0
   13138:	f8ca 3000 	str.w	r3, [sl]
   1313c:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   1313e:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   13140:	9305      	str	r3, [sp, #20]
   13142:	e01f      	b.n	13184 <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   13144:	4621      	mov	r1, r4
   13146:	2000      	movs	r0, #0
   13148:	f7fd ff72 	bl	11030 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1314c:	9b07      	ldr	r3, [sp, #28]
   1314e:	2b02      	cmp	r3, #2
   13150:	d0f8      	beq.n	13144 <sched_after_mstr_free_slot_get+0x24>
   13152:	e028      	b.n	131a6 <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   13154:	4040      	eors	r0, r0
   13156:	f380 8811 	msr	BASEPRI, r0
   1315a:	f04f 0004 	mov.w	r0, #4
   1315e:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   13160:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   13162:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   13164:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   13168:	4291      	cmp	r1, r2
   1316a:	bf2c      	ite	cs
   1316c:	ebc3 0301 	rsbcs	r3, r3, r1
   13170:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   13174:	4499      	add	r9, r3
   13176:	e03a      	b.n	131ee <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   13178:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   1317c:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   1317e:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   13180:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   13184:	2302      	movs	r3, #2
   13186:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   13188:	ab07      	add	r3, sp, #28
   1318a:	9302      	str	r3, [sp, #8]
   1318c:	4b2c      	ldr	r3, [pc, #176]	; (13240 <sched_after_mstr_free_slot_get+0x120>)
   1318e:	9301      	str	r3, [sp, #4]
   13190:	ab08      	add	r3, sp, #32
   13192:	9300      	str	r3, [sp, #0]
   13194:	462b      	mov	r3, r5
   13196:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   1319a:	4621      	mov	r1, r4
   1319c:	2000      	movs	r0, #0
   1319e:	f7fd fec7 	bl	10f30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   131a2:	2802      	cmp	r0, #2
   131a4:	d0d2      	beq.n	1314c <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   131a6:	9b07      	ldr	r3, [sp, #28]
   131a8:	2b00      	cmp	r3, #0
   131aa:	d1d3      	bne.n	13154 <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   131ac:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   131b0:	2aff      	cmp	r2, #255	; 0xff
   131b2:	d028      	beq.n	13206 <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   131b4:	2a06      	cmp	r2, #6
   131b6:	d9e5      	bls.n	13184 <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   131b8:	4b22      	ldr	r3, [pc, #136]	; (13244 <sched_after_mstr_free_slot_get+0x124>)
   131ba:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   131be:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   131c0:	429a      	cmp	r2, r3
   131c2:	dadf      	bge.n	13184 <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   131c4:	3a07      	subs	r2, #7
   131c6:	b292      	uxth	r2, r2
   131c8:	f44f 71aa 	mov.w	r1, #340	; 0x154
   131cc:	4b1d      	ldr	r3, [pc, #116]	; (13244 <sched_after_mstr_free_slot_get+0x124>)
   131ce:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   131d2:	f7fc f941 	bl	f458 <mem_get>
		if (conn && !conn->role) {
   131d6:	4606      	mov	r6, r0
   131d8:	2800      	cmp	r0, #0
   131da:	d0d3      	beq.n	13184 <sched_after_mstr_free_slot_get+0x64>
   131dc:	f990 301d 	ldrsb.w	r3, [r0, #29]
   131e0:	2b00      	cmp	r3, #0
   131e2:	dbcf      	blt.n	13184 <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   131e4:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   131e8:	6803      	ldr	r3, [r0, #0]
   131ea:	2b00      	cmp	r3, #0
   131ec:	dbb8      	blt.n	13160 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   131ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   131f2:	d0c1      	beq.n	13178 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   131f4:	9905      	ldr	r1, [sp, #20]
   131f6:	4648      	mov	r0, r9
   131f8:	f7fd ff2e 	bl	11058 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   131fc:	eb07 030b 	add.w	r3, r7, fp
   13200:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   13202:	4298      	cmp	r0, r3
   13204:	d9b8      	bls.n	13178 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   13206:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   1320a:	d010      	beq.n	1322e <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1320c:	9b05      	ldr	r3, [sp, #20]
   1320e:	443b      	add	r3, r7
   13210:	461f      	mov	r7, r3
   13212:	480d      	ldr	r0, [pc, #52]	; (13248 <sched_after_mstr_free_slot_get+0x128>)
   13214:	fba3 0100 	umull	r0, r1, r3, r0
   13218:	2307      	movs	r3, #7
   1321a:	fb03 1107 	mla	r1, r3, r7, r1
   1321e:	a306      	add	r3, pc, #24	; (adr r3, 13238 <sched_after_mstr_free_slot_get+0x118>)
   13220:	e9d3 2300 	ldrd	r2, r3, [r3]
   13224:	f7ed ff6a 	bl	10fc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   13228:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1322a:	f8ca 0000 	str.w	r0, [sl]
}
   1322e:	b00b      	add	sp, #44	; 0x2c
   13230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   13234:	f3af 8000 	nop.w
   13238:	3b9aca00 	.word	0x3b9aca00
   1323c:	00000000 	.word	0x00000000
   13240:	00011765 	.word	0x00011765
   13244:	20000ff4 	.word	0x20000ff4
   13248:	1afd498d 	.word	0x1afd498d
   1324c:	00000000 	.word	0x00000000

00013250 <sched_after_mstr_free_offset_get>:
{
   13250:	b570      	push	{r4, r5, r6, lr}
   13252:	b082      	sub	sp, #8
   13254:	4606      	mov	r6, r0
   13256:	4615      	mov	r5, r2
   13258:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   1325a:	aa02      	add	r2, sp, #8
   1325c:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   13260:	3127      	adds	r1, #39	; 0x27
   13262:	2001      	movs	r0, #1
   13264:	f7ff ff5c 	bl	13120 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   13268:	9801      	ldr	r0, [sp, #4]
   1326a:	4285      	cmp	r5, r0
   1326c:	d011      	beq.n	13292 <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   1326e:	4629      	mov	r1, r5
   13270:	f7fd fef2 	bl	11058 <ticker_ticks_diff_get>
   13274:	4602      	mov	r2, r0
   13276:	4810      	ldr	r0, [pc, #64]	; (132b8 <sched_after_mstr_free_offset_get+0x68>)
   13278:	fba2 0100 	umull	r0, r1, r2, r0
   1327c:	2307      	movs	r3, #7
   1327e:	fb03 1102 	mla	r1, r3, r2, r1
   13282:	a30b      	add	r3, pc, #44	; (adr r3, 132b0 <sched_after_mstr_free_offset_get+0x60>)
   13284:	e9d3 2300 	ldrd	r2, r3, [r3]
   13288:	f7ed ff38 	bl	10fc <__aeabi_uldivmod>
		*win_offset_us +=
   1328c:	6823      	ldr	r3, [r4, #0]
   1328e:	4418      	add	r0, r3
   13290:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   13292:	6823      	ldr	r3, [r4, #0]
   13294:	2b00      	cmp	r3, #0
   13296:	db09      	blt.n	132ac <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   13298:	f240 40e2 	movw	r0, #1250	; 0x4e2
   1329c:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   132a0:	e001      	b.n	132a6 <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   132a2:	1a1b      	subs	r3, r3, r0
   132a4:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   132a6:	6823      	ldr	r3, [r4, #0]
   132a8:	4298      	cmp	r0, r3
   132aa:	d3fa      	bcc.n	132a2 <sched_after_mstr_free_offset_get+0x52>
}
   132ac:	b002      	add	sp, #8
   132ae:	bd70      	pop	{r4, r5, r6, pc}
   132b0:	3b9aca00 	.word	0x3b9aca00
   132b4:	00000000 	.word	0x00000000
   132b8:	1afd498d 	.word	0x1afd498d

000132bc <mayfly_sched_win_offset_use>:
{
   132bc:	b510      	push	{r4, lr}
   132be:	b082      	sub	sp, #8
   132c0:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   132c2:	f100 0384 	add.w	r3, r0, #132	; 0x84
   132c6:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   132ca:	68c1      	ldr	r1, [r0, #12]
   132cc:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   132ce:	f7ff ffbf 	bl	13250 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   132d2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   132d6:	4a07      	ldr	r2, [pc, #28]	; (132f4 <mayfly_sched_win_offset_use+0x38>)
   132d8:	fba2 2303 	umull	r2, r3, r2, r3
   132dc:	0a9b      	lsrs	r3, r3, #10
   132de:	a902      	add	r1, sp, #8
   132e0:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   132e4:	2202      	movs	r2, #2
   132e6:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   132ea:	f7ec ffe9 	bl	2c0 <memcpy>
}
   132ee:	b002      	add	sp, #8
   132f0:	bd10      	pop	{r4, pc}
   132f2:	bf00      	nop
   132f4:	d1b71759 	.word	0xd1b71759

000132f8 <mayfly_sched_after_mstr_free_offset_get>:
{
   132f8:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   132fa:	4c05      	ldr	r4, [pc, #20]	; (13310 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   132fc:	f504 7380 	add.w	r3, r4, #256	; 0x100
   13300:	4602      	mov	r2, r0
   13302:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   13306:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   1330a:	f7ff ffa1 	bl	13250 <sched_after_mstr_free_offset_get>
   1330e:	bd10      	pop	{r4, pc}
   13310:	20000ff4 	.word	0x20000ff4

00013314 <enc_rsp_send>:
{
   13314:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   13318:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1331a:	4818      	ldr	r0, [pc, #96]	; (1337c <enc_rsp_send+0x68>)
   1331c:	f7fc f85f 	bl	f3de <mem_acquire>
	LL_ASSERT(node_tx);
   13320:	b330      	cbz	r0, 13370 <enc_rsp_send+0x5c>
   13322:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13324:	7903      	ldrb	r3, [r0, #4]
   13326:	f043 0303 	orr.w	r3, r3, #3
   1332a:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1332c:	230d      	movs	r3, #13
   1332e:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   13330:	2604      	movs	r6, #4
   13332:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   13334:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   13338:	4641      	mov	r1, r8
   1333a:	2008      	movs	r0, #8
   1333c:	f7fd faa2 	bl	10884 <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   13340:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   13344:	4639      	mov	r1, r7
   13346:	4630      	mov	r0, r6
   13348:	f7fd fa9c 	bl	10884 <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   1334c:	2208      	movs	r2, #8
   1334e:	4641      	mov	r1, r8
   13350:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13354:	f7ec ffb4 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   13358:	4632      	mov	r2, r6
   1335a:	4639      	mov	r1, r7
   1335c:	f505 708b 	add.w	r0, r5, #278	; 0x116
   13360:	f7ec ffae 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   13364:	4621      	mov	r1, r4
   13366:	4628      	mov	r0, r5
   13368:	f7fe facc 	bl	11904 <ctrl_tx_enqueue>
   1336c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   13370:	4040      	eors	r0, r0
   13372:	f380 8811 	msr	BASEPRI, r0
   13376:	f04f 0004 	mov.w	r0, #4
   1337a:	df02      	svc	2
   1337c:	2000114c 	.word	0x2000114c

00013380 <enc_req_reused_send>:
{
   13380:	b538      	push	{r3, r4, r5, lr}
   13382:	4605      	mov	r5, r0
   13384:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   13386:	790b      	ldrb	r3, [r1, #4]
   13388:	f043 0303 	orr.w	r3, r3, #3
   1338c:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   1338e:	2317      	movs	r3, #23
   13390:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   13392:	2303      	movs	r3, #3
   13394:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   13396:	2208      	movs	r2, #8
   13398:	f100 0179 	add.w	r1, r0, #121	; 0x79
   1339c:	18a0      	adds	r0, r4, r2
   1339e:	f7ec ff8f 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   133a2:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   133a6:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   133a8:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   133ac:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   133ae:	f104 0112 	add.w	r1, r4, #18
   133b2:	2008      	movs	r0, #8
   133b4:	f7fd fa66 	bl	10884 <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   133b8:	f104 011a 	add.w	r1, r4, #26
   133bc:	2004      	movs	r0, #4
   133be:	f7fd fa61 	bl	10884 <rand_isr_get>
   133c2:	bd38      	pop	{r3, r4, r5, pc}

000133c4 <isr_rx_conn_pkt_ctrl>:
{
   133c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   133c8:	b082      	sub	sp, #8
   133ca:	4604      	mov	r4, r0
   133cc:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   133ce:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   133d2:	4ba0      	ldr	r3, [pc, #640]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   133d4:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   133d8:	f995 301d 	ldrsb.w	r3, [r5, #29]
   133dc:	2b00      	cmp	r3, #0
   133de:	db11      	blt.n	13404 <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   133e0:	7ac1      	ldrb	r1, [r0, #11]
   133e2:	2918      	cmp	r1, #24
   133e4:	d82c      	bhi.n	13440 <isr_rx_conn_pkt_ctrl+0x7c>
   133e6:	e8df f001 	tbb	[pc, r1]
   133ea:	2323      	.short	0x2323
   133ec:	2b2b232b 	.word	0x2b2b232b
   133f0:	2b232b2b 	.word	0x2b232b2b
   133f4:	2b2b2b23 	.word	0x2b2b2b23
   133f8:	2b2b2b2b 	.word	0x2b2b2b2b
   133fc:	2b2b2b2b 	.word	0x2b2b2b2b
   13400:	2b2b      	.short	0x2b2b
   13402:	23          	.byte	0x23
   13403:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   13404:	7ac1      	ldrb	r1, [r0, #11]
   13406:	1f0a      	subs	r2, r1, #4
   13408:	2a15      	cmp	r2, #21
   1340a:	d819      	bhi.n	13440 <isr_rx_conn_pkt_ctrl+0x7c>
   1340c:	e8df f002 	tbb	[pc, r2]
   13410:	18180b0b 	.word	0x18180b0b
   13414:	18181818 	.word	0x18181818
   13418:	180b1818 	.word	0x180b1818
   1341c:	1818180b 	.word	0x1818180b
   13420:	0b181818 	.word	0x0b181818
   13424:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   13426:	4628      	mov	r0, r5
   13428:	f7fe fcca 	bl	11dc0 <unknown_rsp_send>
			return 0;
   1342c:	2400      	movs	r4, #0
   1342e:	e003      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   13430:	4628      	mov	r0, r5
   13432:	f7fe fcc5 	bl	11dc0 <unknown_rsp_send>
			return 0;
   13436:	2400      	movs	r4, #0
}
   13438:	4620      	mov	r0, r4
   1343a:	b002      	add	sp, #8
   1343c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   13440:	7ae1      	ldrb	r1, [r4, #11]
   13442:	2919      	cmp	r1, #25
   13444:	f200 87e6 	bhi.w	14414 <isr_rx_conn_pkt_ctrl+0x1050>
   13448:	e8df f011 	tbh	[pc, r1, lsl #1]
   1344c:	002e001a 	.word	0x002e001a
   13450:	0042003d 	.word	0x0042003d
   13454:	00800065 	.word	0x00800065
   13458:	04c60099 	.word	0x04c60099
   1345c:	010600de 	.word	0x010600de
   13460:	014b012d 	.word	0x014b012d
   13464:	01ad0170 	.word	0x01ad0170
   13468:	01c400de 	.word	0x01c400de
   1346c:	0395032d 	.word	0x0395032d
   13470:	04c104bb 	.word	0x04c104bb
   13474:	05180518 	.word	0x05180518
   13478:	06de0606 	.word	0x06de0606
   1347c:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   13480:	4631      	mov	r1, r6
   13482:	4628      	mov	r0, r5
   13484:	f7fe fb90 	bl	11ba8 <conn_update>
   13488:	b930      	cbnz	r0, 13498 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   1348a:	4b72      	ldr	r3, [pc, #456]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   1348c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13490:	2400      	movs	r4, #0
   13492:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   13496:	e7cf      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   13498:	4b6e      	ldr	r3, [pc, #440]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   1349a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1349e:	2228      	movs	r2, #40	; 0x28
   134a0:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   134a4:	2400      	movs	r4, #0
   134a6:	e7c7      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   134a8:	4631      	mov	r1, r6
   134aa:	4628      	mov	r0, r5
   134ac:	f7ff f99e 	bl	127ec <chan_map_update>
   134b0:	2800      	cmp	r0, #0
   134b2:	f000 87b5 	beq.w	14420 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   134b6:	4b67      	ldr	r3, [pc, #412]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   134b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   134bc:	2228      	movs	r2, #40	; 0x28
   134be:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   134c2:	2400      	movs	r4, #0
   134c4:	e7b8      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   134c6:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   134c8:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   134cc:	2400      	movs	r4, #0
		break;
   134ce:	e7b3      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   134d0:	2208      	movs	r2, #8
   134d2:	f104 0116 	add.w	r1, r4, #22
   134d6:	f105 0093 	add.w	r0, r5, #147	; 0x93
   134da:	f7ec fef1 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   134de:	4d5d      	ldr	r5, [pc, #372]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   134e0:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   134e4:	2204      	movs	r2, #4
   134e6:	f104 011e 	add.w	r1, r4, #30
   134ea:	f500 7089 	add.w	r0, r0, #274	; 0x112
   134ee:	f7ec fee7 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   134f2:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   134f6:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   134fa:	f043 0304 	orr.w	r3, r3, #4
   134fe:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13502:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13506:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   1350a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   1350e:	2301      	movs	r3, #1
   13510:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13512:	2400      	movs	r4, #0
		break;
   13514:	e790      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   13516:	2208      	movs	r2, #8
   13518:	f104 010c 	add.w	r1, r4, #12
   1351c:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   13520:	f7ec fece 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   13524:	4d4b      	ldr	r5, [pc, #300]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   13526:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   1352a:	2204      	movs	r2, #4
   1352c:	f104 0114 	add.w	r1, r4, #20
   13530:	f500 708b 	add.w	r0, r0, #278	; 0x116
   13534:	f7ec fec4 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   13538:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   1353c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13540:	f043 0304 	orr.w	r3, r3, #4
   13544:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   13548:	2400      	movs	r4, #0
		break;
   1354a:	e775      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   1354c:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13550:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   13554:	429a      	cmp	r2, r3
   13556:	d10c      	bne.n	13572 <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   13558:	2303      	movs	r3, #3
   1355a:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   1355e:	4b3d      	ldr	r3, [pc, #244]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   13560:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13564:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   13568:	3b01      	subs	r3, #1
   1356a:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   1356e:	2400      	movs	r4, #0
		break;
   13570:	e762      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   13572:	4040      	eors	r0, r0
   13574:	f380 8811 	msr	BASEPRI, r0
   13578:	f04f 0004 	mov.w	r0, #4
   1357c:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   1357e:	4b35      	ldr	r3, [pc, #212]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   13580:	7bdb      	ldrb	r3, [r3, #15]
   13582:	b2db      	uxtb	r3, r3
   13584:	2b03      	cmp	r3, #3
   13586:	d027      	beq.n	135d8 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   13588:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   1358c:	f36f 0382 	bfc	r3, #2, #1
   13590:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13594:	4b2f      	ldr	r3, [pc, #188]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   13596:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1359a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1359e:	f36f 02c3 	bfc	r2, #3, #1
   135a2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   135a6:	4b2b      	ldr	r3, [pc, #172]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   135a8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   135ac:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   135b0:	f012 0f40 	tst.w	r2, #64	; 0x40
   135b4:	d007      	beq.n	135c6 <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   135b6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   135ba:	f36f 1286 	bfc	r2, #6, #1
   135be:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   135c2:	2309      	movs	r3, #9
   135c4:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   135c6:	2301      	movs	r3, #1
   135c8:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   135ca:	4b22      	ldr	r3, [pc, #136]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   135cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   135d0:	2400      	movs	r4, #0
   135d2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   135d6:	e72f      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   135d8:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   135dc:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   135e0:	429a      	cmp	r2, r3
   135e2:	d10b      	bne.n	135fc <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   135e4:	2303      	movs	r3, #3
   135e6:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   135ea:	4b1a      	ldr	r3, [pc, #104]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   135ec:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135f0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   135f4:	3b01      	subs	r3, #1
   135f6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   135fa:	e7d4      	b.n	135a6 <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   135fc:	4040      	eors	r0, r0
   135fe:	f380 8811 	msr	BASEPRI, r0
   13602:	f04f 0004 	mov.w	r0, #4
   13606:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13608:	7b23      	ldrb	r3, [r4, #12]
   1360a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1360e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13612:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13616:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   1361a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1361c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13620:	7ba2      	ldrb	r2, [r4, #14]
   13622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13626:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   1362a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   1362e:	4013      	ands	r3, r2
   13630:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13634:	4a07      	ldr	r2, [pc, #28]	; (13654 <isr_rx_conn_pkt_ctrl+0x290>)
   13636:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1363a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1363e:	f043 0320 	orr.w	r3, r3, #32
   13642:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   13646:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1364a:	f7ff f8fd 	bl	12848 <feature_rsp_send>
	u8_t nack = 0;
   1364e:	2400      	movs	r4, #0
	break;
   13650:	e6f2      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
   13652:	bf00      	nop
   13654:	20000ff4 	.word	0x20000ff4
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   13658:	7b23      	ldrb	r3, [r4, #12]
   1365a:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   1365e:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   13662:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   13666:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   1366a:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   1366c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   13670:	7ba2      	ldrb	r2, [r4, #14]
   13672:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   13676:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   1367a:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   1367e:	4013      	ands	r3, r2
   13680:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   13684:	4ad2      	ldr	r2, [pc, #840]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13686:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1368a:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1368e:	f043 0320 	orr.w	r3, r3, #32
   13692:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   13696:	2301      	movs	r3, #1
   13698:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   1369a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1369e:	2400      	movs	r4, #0
   136a0:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   136a4:	e6c8      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   136a6:	4628      	mov	r0, r5
   136a8:	f7fe fae8 	bl	11c7c <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   136ac:	4bc8      	ldr	r3, [pc, #800]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   136ae:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   136b2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   136b6:	f042 0204 	orr.w	r2, r2, #4
   136ba:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   136be:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   136c2:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   136c6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   136ca:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   136ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   136d2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   136d6:	f36f 1204 	bfc	r2, #4, #1
   136da:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   136de:	2400      	movs	r4, #0
		break;
   136e0:	e6aa      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   136e2:	4bbb      	ldr	r3, [pc, #748]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   136e4:	7bdb      	ldrb	r3, [r3, #15]
   136e6:	b2db      	uxtb	r3, r3
   136e8:	2b04      	cmp	r3, #4
   136ea:	d00a      	beq.n	13702 <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   136ec:	4bb8      	ldr	r3, [pc, #736]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   136ee:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   136f2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   136f6:	f36f 1245 	bfc	r2, #5, #1
   136fa:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   136fe:	2400      	movs	r4, #0
		break;
   13700:	e69a      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   13702:	4628      	mov	r0, r5
   13704:	f7fe faba 	bl	11c7c <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   13708:	4ab1      	ldr	r2, [pc, #708]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1370a:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   1370e:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13712:	f043 0304 	orr.w	r3, r3, #4
   13716:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   1371a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   1371e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13722:	f36f 1204 	bfc	r2, #4, #1
   13726:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   1372a:	e7df      	b.n	136ec <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   1372c:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   1372e:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   13732:	4ba7      	ldr	r3, [pc, #668]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13734:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   13738:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   1373c:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   13740:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   13744:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   13748:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   1374c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13750:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   13754:	f003 0303 	and.w	r3, r3, #3
   13758:	2b01      	cmp	r3, #1
   1375a:	d011      	beq.n	13780 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   1375c:	4a9c      	ldr	r2, [pc, #624]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1375e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   13762:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   13766:	f043 0302 	orr.w	r3, r3, #2
   1376a:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   1376e:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13772:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   13776:	f012 0f01 	tst.w	r2, #1
   1377a:	d009      	beq.n	13790 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   1377c:	2400      	movs	r4, #0
   1377e:	e65b      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   13780:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   13782:	4b93      	ldr	r3, [pc, #588]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13784:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13788:	2200      	movs	r2, #0
   1378a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   1378e:	e7e5      	b.n	1375c <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   13790:	f042 0201 	orr.w	r2, r2, #1
   13794:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   13798:	4b8d      	ldr	r3, [pc, #564]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1379a:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1379e:	f7ff f90b 	bl	129b8 <version_ind_send>
	u8_t nack = 0;
   137a2:	2400      	movs	r4, #0
   137a4:	e648      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   137a6:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   137aa:	f36f 0382 	bfc	r3, #2, #1
   137ae:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   137b2:	4b87      	ldr	r3, [pc, #540]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   137b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   137b8:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   137bc:	f36f 01c3 	bfc	r1, #3, #1
   137c0:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   137c4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   137c8:	2400      	movs	r4, #0
   137ca:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   137ce:	2301      	movs	r3, #1
   137d0:	703b      	strb	r3, [r7, #0]
		break;
   137d2:	e631      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   137d4:	4a7e      	ldr	r2, [pc, #504]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   137d6:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   137da:	b142      	cbz	r2, 137ee <isr_rx_conn_pkt_ctrl+0x42a>
   137dc:	4295      	cmp	r5, r2
   137de:	d006      	beq.n	137ee <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   137e0:	2220      	movs	r2, #32
   137e2:	210f      	movs	r1, #15
   137e4:	4628      	mov	r0, r5
   137e6:	f7fe faa5 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   137ea:	2400      	movs	r4, #0
			break;
   137ec:	e624      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   137ee:	2b00      	cmp	r3, #0
   137f0:	f2c0 80bc 	blt.w	1396c <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   137f4:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   137f8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   137fc:	429a      	cmp	r2, r3
   137fe:	d008      	beq.n	13812 <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   13800:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   13804:	f013 0307 	ands.w	r3, r3, #7
   13808:	d016      	beq.n	13838 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   1380a:	2b04      	cmp	r3, #4
   1380c:	d014      	beq.n	13838 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   1380e:	2b05      	cmp	r3, #5
   13810:	d012      	beq.n	13838 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13812:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   13816:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   1381a:	429a      	cmp	r2, r3
   1381c:	d105      	bne.n	1382a <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   1381e:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   13822:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   13826:	429a      	cmp	r2, r3
   13828:	d00d      	beq.n	13846 <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   1382a:	222a      	movs	r2, #42	; 0x2a
   1382c:	210f      	movs	r1, #15
   1382e:	4628      	mov	r0, r5
   13830:	f7fe fa80 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   13834:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13836:	e5ff      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   13838:	2223      	movs	r2, #35	; 0x23
   1383a:	210f      	movs	r1, #15
   1383c:	4628      	mov	r0, r5
   1383e:	f7fe fa79 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   13842:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13844:	e5f8      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   13846:	89a0      	ldrh	r0, [r4, #12]
   13848:	b282      	uxth	r2, r0
   1384a:	2a05      	cmp	r2, #5
   1384c:	d970      	bls.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   1384e:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   13850:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13854:	d86c      	bhi.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   13856:	429a      	cmp	r2, r3
   13858:	d86a      	bhi.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   1385a:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   1385c:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13860:	d266      	bcs.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13862:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   13864:	2909      	cmp	r1, #9
   13866:	d963      	bls.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   13868:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   1386c:	d860      	bhi.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   1386e:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   13872:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13876:	da5b      	bge.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   13878:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   1387a:	4293      	cmp	r3, r2
   1387c:	d358      	bcc.n	13930 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   1387e:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   13882:	8a23      	ldrh	r3, [r4, #16]
   13884:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   13888:	8a62      	ldrh	r2, [r4, #18]
   1388a:	b293      	uxth	r3, r2
   1388c:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   13890:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   13892:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   13896:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   1389a:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   1389e:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   138a2:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   138a6:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   138aa:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   138ae:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   138b2:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   138b6:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   138ba:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   138be:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   138c2:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   138c6:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   138ca:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   138ce:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   138d2:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   138d4:	4291      	cmp	r1, r2
   138d6:	d10f      	bne.n	138f8 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   138d8:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   138da:	f240 42e2 	movw	r2, #1250	; 0x4e2
   138de:	fb02 f201 	mul.w	r2, r2, r1
   138e2:	f242 7110 	movw	r1, #10000	; 0x2710
   138e6:	fb01 2303 	mla	r3, r1, r3, r2
   138ea:	3b01      	subs	r3, #1
   138ec:	fb93 f3f2 	sdiv	r3, r3, r2
   138f0:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   138f2:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   138f4:	4293      	cmp	r3, r2
   138f6:	d02c      	beq.n	13952 <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   138f8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   138fc:	f013 0f08 	tst.w	r3, #8
   13900:	d01d      	beq.n	1393e <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   13902:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13906:	2202      	movs	r2, #2
   13908:	f362 0302 	bfi	r3, r2, #0, #3
   1390c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   13910:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13914:	3b01      	subs	r3, #1
   13916:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   1391a:	4b2d      	ldr	r3, [pc, #180]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   1391c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13920:	2b00      	cmp	r3, #0
   13922:	f040 8580 	bne.w	14426 <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   13926:	4b2a      	ldr	r3, [pc, #168]	; (139d0 <isr_rx_conn_pkt_ctrl+0x60c>)
   13928:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   1392c:	2400      	movs	r4, #0
   1392e:	e583      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   13930:	221e      	movs	r2, #30
   13932:	210f      	movs	r1, #15
   13934:	4628      	mov	r0, r5
   13936:	f7fe f9fd 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   1393a:	2400      	movs	r4, #0
					break;
   1393c:	e57c      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   1393e:	2301      	movs	r3, #1
   13940:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   13942:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13946:	2203      	movs	r2, #3
   13948:	f362 0302 	bfi	r3, r2, #0, #3
   1394c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13950:	e7de      	b.n	13910 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   13952:	2300      	movs	r3, #0
   13954:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   13958:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   1395c:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13960:	2201      	movs	r2, #1
   13962:	f362 0302 	bfi	r3, r2, #0, #3
   13966:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   1396a:	e7d1      	b.n	13910 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   1396c:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   13970:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   13974:	429a      	cmp	r2, r3
   13976:	d007      	beq.n	13988 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   13978:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   1397c:	f013 0307 	ands.w	r3, r3, #7
   13980:	d002      	beq.n	13988 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   13982:	2b04      	cmp	r3, #4
   13984:	f040 8089 	bne.w	13a9a <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   13988:	89a1      	ldrh	r1, [r4, #12]
   1398a:	b28a      	uxth	r2, r1
   1398c:	2a05      	cmp	r2, #5
   1398e:	d917      	bls.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13990:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13992:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13996:	d813      	bhi.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   13998:	429a      	cmp	r2, r3
   1399a:	d811      	bhi.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   1399c:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   1399e:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   139a2:	d20d      	bcs.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   139a4:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   139a6:	2809      	cmp	r0, #9
   139a8:	d90a      	bls.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   139aa:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   139ae:	d807      	bhi.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   139b0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   139b4:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   139b8:	da02      	bge.n	139c0 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   139ba:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   139bc:	4293      	cmp	r3, r2
   139be:	d209      	bcs.n	139d4 <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   139c0:	221e      	movs	r2, #30
   139c2:	210f      	movs	r1, #15
   139c4:	4628      	mov	r0, r5
   139c6:	f7fe f9b5 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   139ca:	2400      	movs	r4, #0
				break;
   139cc:	e534      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
   139ce:	bf00      	nop
   139d0:	20000ff4 	.word	0x20000ff4
			conn->llcp_conn_param.interval = cpr->interval_min;
   139d4:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   139d8:	8a23      	ldrh	r3, [r4, #16]
   139da:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   139de:	8a62      	ldrh	r2, [r4, #18]
   139e0:	b293      	uxth	r3, r2
   139e2:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   139e6:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   139e8:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   139ec:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   139f0:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   139f4:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   139f8:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   139fc:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13a00:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13a04:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13a08:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13a0c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13a10:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13a14:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13a18:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13a1c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13a20:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   13a24:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   13a28:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   13a2a:	4291      	cmp	r1, r2
   13a2c:	d013      	beq.n	13a56 <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   13a2e:	2301      	movs	r3, #1
   13a30:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   13a32:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13a36:	2203      	movs	r2, #3
   13a38:	f362 0302 	bfi	r3, r2, #0, #3
   13a3c:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13a40:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   13a44:	3b01      	subs	r3, #1
   13a46:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   13a4a:	4bcb      	ldr	r3, [pc, #812]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a4c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13a50:	b1f3      	cbz	r3, 13a90 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   13a52:	2400      	movs	r4, #0
   13a54:	e4f0      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   13a56:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13a58:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13a5c:	fb02 f201 	mul.w	r2, r2, r1
   13a60:	f242 7110 	movw	r1, #10000	; 0x2710
   13a64:	fb01 2303 	mla	r3, r1, r3, r2
   13a68:	3b01      	subs	r3, #1
   13a6a:	fb93 f3f2 	sdiv	r3, r3, r2
   13a6e:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   13a70:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   13a72:	4293      	cmp	r3, r2
   13a74:	d1db      	bne.n	13a2e <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   13a76:	2300      	movs	r3, #0
   13a78:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   13a7c:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   13a80:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   13a84:	2201      	movs	r2, #1
   13a86:	f362 0302 	bfi	r3, r2, #0, #3
   13a8a:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13a8e:	e7d7      	b.n	13a40 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   13a90:	4bb9      	ldr	r3, [pc, #740]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13a92:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   13a96:	2400      	movs	r4, #0
   13a98:	e4ce      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   13a9a:	4040      	eors	r0, r0
   13a9c:	f380 8811 	msr	BASEPRI, r0
   13aa0:	f04f 0004 	mov.w	r0, #4
   13aa4:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   13aa6:	2b00      	cmp	r3, #0
   13aa8:	f2c0 84c0 	blt.w	1442c <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   13aac:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13ab0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   13ab4:	429a      	cmp	r2, r3
   13ab6:	f000 84bc 	beq.w	14432 <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   13aba:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   13abe:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13ac2:	2b04      	cmp	r3, #4
   13ac4:	d001      	beq.n	13aca <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   13ac6:	2400      	movs	r4, #0
   13ac8:	e4b6      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   13aca:	89a2      	ldrh	r2, [r4, #12]
   13acc:	2a05      	cmp	r2, #5
   13ace:	d917      	bls.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13ad0:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   13ad2:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   13ad6:	d813      	bhi.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   13ad8:	429a      	cmp	r2, r3
   13ada:	d811      	bhi.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   13adc:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   13ade:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   13ae2:	d20d      	bcs.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13ae4:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   13ae6:	2909      	cmp	r1, #9
   13ae8:	d90a      	bls.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13aea:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   13aee:	d807      	bhi.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   13af0:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   13af4:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   13af8:	da02      	bge.n	13b00 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   13afa:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   13afc:	4293      	cmp	r3, r2
   13afe:	d206      	bcs.n	13b0e <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   13b00:	221e      	movs	r2, #30
   13b02:	2110      	movs	r1, #16
   13b04:	4628      	mov	r0, r5
   13b06:	f7fe f915 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   13b0a:	2400      	movs	r4, #0
				break;
   13b0c:	e494      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   13b0e:	2300      	movs	r3, #0
   13b10:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   13b14:	89a2      	ldrh	r2, [r4, #12]
   13b16:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13b1a:	8a22      	ldrh	r2, [r4, #16]
   13b1c:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13b20:	8a62      	ldrh	r2, [r4, #18]
   13b22:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   13b26:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13b28:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13b2c:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13b30:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   13b34:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13b38:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   13b3c:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13b40:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   13b44:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13b48:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13b4c:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13b50:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   13b54:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13b58:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13b5c:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13b60:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   13b64:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13b68:	2101      	movs	r1, #1
   13b6a:	f361 0202 	bfi	r2, r1, #0, #3
   13b6e:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   13b72:	461c      	mov	r4, r3
   13b74:	e460      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13b76:	4b80      	ldr	r3, [pc, #512]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13b78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13b7c:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13b80:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   13b84:	4291      	cmp	r1, r2
   13b86:	d112      	bne.n	13bae <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13b88:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   13b8c:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13b90:	4291      	cmp	r1, r2
   13b92:	d14c      	bne.n	13c2e <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   13b94:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   13b98:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   13b9c:	4291      	cmp	r1, r2
   13b9e:	f000 80ef 	beq.w	13d80 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   13ba2:	7b21      	ldrb	r1, [r4, #12]
   13ba4:	2914      	cmp	r1, #20
   13ba6:	f000 80cb 	beq.w	13d40 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   13baa:	2400      	movs	r4, #0
   13bac:	e444      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   13bae:	7b23      	ldrb	r3, [r4, #12]
   13bb0:	2b16      	cmp	r3, #22
   13bb2:	d001      	beq.n	13bb8 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   13bb4:	2400      	movs	r4, #0
   13bb6:	e43f      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   13bb8:	7b63      	ldrb	r3, [r4, #13]
   13bba:	2b23      	cmp	r3, #35	; 0x23
   13bbc:	d017      	beq.n	13bee <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   13bbe:	4b6e      	ldr	r3, [pc, #440]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13bc0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   13bc4:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   13bc8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13bcc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13bd0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13bd4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   13bd8:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   13bdc:	f361 0002 	bfi	r0, r1, #0, #3
   13be0:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   13be4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13be8:	2200      	movs	r2, #0
   13bea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   13bee:	4b62      	ldr	r3, [pc, #392]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13bf0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13bf4:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13bf8:	f013 0f02 	tst.w	r3, #2
   13bfc:	f000 841c 	beq.w	14438 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   13c00:	230c      	movs	r3, #12
   13c02:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   13c04:	7b63      	ldrb	r3, [r4, #13]
   13c06:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   13c08:	4a5b      	ldr	r2, [pc, #364]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13c0a:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13c0e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13c12:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13c16:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   13c18:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13c1c:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13c20:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13c24:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   13c26:	2301      	movs	r3, #1
   13c28:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13c2a:	2400      	movs	r4, #0
   13c2c:	e404      	b.n	13438 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   13c2e:	7b23      	ldrb	r3, [r4, #12]
   13c30:	2b0f      	cmp	r3, #15
   13c32:	d002      	beq.n	13c3a <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   13c34:	2400      	movs	r4, #0
   13c36:	f7ff bbff 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13c3a:	4b4f      	ldr	r3, [pc, #316]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13c3c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13c40:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13c44:	2a00      	cmp	r2, #0
   13c46:	db02      	blt.n	13c4e <isr_rx_conn_pkt_ctrl+0x88a>
   13c48:	7b62      	ldrb	r2, [r4, #13]
   13c4a:	2a1a      	cmp	r2, #26
   13c4c:	d037      	beq.n	13cbe <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13c4e:	7b62      	ldrb	r2, [r4, #13]
   13c50:	2a23      	cmp	r2, #35	; 0x23
   13c52:	d012      	beq.n	13c7a <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   13c54:	4a48      	ldr	r2, [pc, #288]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13c56:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13c5a:	4293      	cmp	r3, r2
   13c5c:	d166      	bne.n	13d2c <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13c5e:	2200      	movs	r2, #0
   13c60:	4945      	ldr	r1, [pc, #276]	; (13d78 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13c62:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   13c66:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13c6a:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13c6e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   13c72:	f993 201d 	ldrsb.w	r2, [r3, #29]
   13c76:	2a00      	cmp	r2, #0
   13c78:	db5e      	blt.n	13d38 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13c7a:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13c7e:	f012 0f08 	tst.w	r2, #8
   13c82:	f000 83dc 	beq.w	1443e <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   13c86:	2208      	movs	r2, #8
   13c88:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13c8a:	7b62      	ldrb	r2, [r4, #13]
   13c8c:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13c8e:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13c90:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   13c92:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   13c94:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   13c96:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13c98:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13c9a:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13c9e:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   13ca2:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   13ca6:	4a35      	ldr	r2, [pc, #212]	; (13d7c <isr_rx_conn_pkt_ctrl+0x9b8>)
   13ca8:	fb82 1203 	smull	r1, r2, r2, r3
   13cac:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13cae:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   13cb2:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   13cb4:	2301      	movs	r3, #1
   13cb6:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13cb8:	2400      	movs	r4, #0
   13cba:	f7ff bbbd 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13cbe:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   13cc2:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   13cc6:	4282      	cmp	r2, r0
   13cc8:	d12a      	bne.n	13d20 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   13cca:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13cce:	2105      	movs	r1, #5
   13cd0:	f361 0202 	bfi	r2, r1, #0, #3
   13cd4:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   13cd8:	2501      	movs	r5, #1
   13cda:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   13cde:	2400      	movs	r4, #0
   13ce0:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   13ce4:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   13ce8:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   13cec:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   13cf0:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   13cf4:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   13cf8:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   13cfc:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   13d00:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   13d04:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   13d08:	406a      	eors	r2, r5
   13d0a:	f362 0182 	bfi	r1, r2, #2, #1
   13d0e:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   13d12:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   13d16:	3801      	subs	r0, #1
   13d18:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13d1c:	f7ff bb8c 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13d20:	4040      	eors	r0, r0
   13d22:	f380 8811 	msr	BASEPRI, r0
   13d26:	f04f 0004 	mov.w	r0, #4
   13d2a:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13d2c:	4040      	eors	r0, r0
   13d2e:	f380 8811 	msr	BASEPRI, r0
   13d32:	f04f 0004 	mov.w	r0, #4
   13d36:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13d38:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13d3c:	671a      	str	r2, [r3, #112]	; 0x70
   13d3e:	e79c      	b.n	13c7a <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13d40:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   13d44:	2200      	movs	r2, #0
   13d46:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13d4a:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13d4e:	f362 01c3 	bfi	r1, r2, #3, #1
   13d52:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   13d56:	2109      	movs	r1, #9
   13d58:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13d5a:	2115      	movs	r1, #21
   13d5c:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13d5e:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13d60:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   13d62:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   13d64:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   13d66:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13d68:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13d6a:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13d6c:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13d6e:	2301      	movs	r3, #1
   13d70:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13d72:	4614      	mov	r4, r2
   13d74:	f7ff bb60 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   13d78:	20000ff4 	.word	0x20000ff4
   13d7c:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13d80:	7b22      	ldrb	r2, [r4, #12]
   13d82:	2a03      	cmp	r2, #3
   13d84:	f040 835e 	bne.w	14444 <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13d88:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d8c:	f36f 0282 	bfc	r2, #2, #1
   13d90:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   13d94:	4bcb      	ldr	r3, [pc, #812]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13d96:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13d9a:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13d9e:	f36f 01c3 	bfc	r1, #3, #1
   13da2:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   13da6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13daa:	2300      	movs	r3, #0
   13dac:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13db0:	220d      	movs	r2, #13
   13db2:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   13db4:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   13db6:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   13db8:	2201      	movs	r2, #1
   13dba:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   13dbc:	461c      	mov	r4, r3
   13dbe:	f7ff bb3b 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   13dc2:	4628      	mov	r0, r5
   13dc4:	f7fd ff76 	bl	11cb4 <ping_resp_send>
	u8_t nack = 0;
   13dc8:	2400      	movs	r4, #0
		break;
   13dca:	f7ff bb35 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   13dce:	2400      	movs	r4, #0
   13dd0:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   13dd4:	f7ff bb30 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   13dd8:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   13ddc:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   13de0:	4293      	cmp	r3, r2
   13de2:	d014      	beq.n	13e0e <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   13de4:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   13de8:	4bb6      	ldr	r3, [pc, #728]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13dea:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13dee:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13df2:	f36f 02c3 	bfc	r2, #3, #1
   13df6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   13dfa:	2301      	movs	r3, #1
   13dfc:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   13dfe:	4bb1      	ldr	r3, [pc, #708]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13e04:	2400      	movs	r4, #0
   13e06:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   13e0a:	f7ff bb15 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   13e0e:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   13e12:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   13e16:	4293      	cmp	r3, r2
   13e18:	d02a      	beq.n	13e70 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13e1a:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13e1e:	49a9      	ldr	r1, [pc, #676]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e20:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   13e24:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13e28:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13e2c:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13e30:	f362 0002 	bfi	r0, r2, #0, #3
   13e34:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13e38:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13e3c:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13e40:	f013 0f02 	tst.w	r3, #2
   13e44:	d0db      	beq.n	13dfe <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   13e46:	230c      	movs	r3, #12
   13e48:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13e4a:	2300      	movs	r3, #0
   13e4c:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13e4e:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13e52:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   13e56:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13e5a:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13e5c:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13e60:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13e64:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13e68:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13e6a:	2301      	movs	r3, #1
   13e6c:	703b      	strb	r3, [r7, #0]
   13e6e:	e7c6      	b.n	13dfe <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13e70:	7b23      	ldrb	r3, [r4, #12]
   13e72:	2b12      	cmp	r3, #18
   13e74:	d0c3      	beq.n	13dfe <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   13e76:	2301      	movs	r3, #1
   13e78:	703b      	strb	r3, [r7, #0]
				break;
   13e7a:	e7c0      	b.n	13dfe <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13e7c:	4b91      	ldr	r3, [pc, #580]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13e7e:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13e82:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   13e84:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   13e86:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13e8a:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13e8e:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   13e92:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   13e96:	429a      	cmp	r2, r3
   13e98:	d020      	beq.n	13edc <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13e9a:	429a      	cmp	r2, r3
   13e9c:	d007      	beq.n	13eae <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13e9e:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   13ea2:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   13ea6:	2b01      	cmp	r3, #1
   13ea8:	d960      	bls.n	13f6c <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13eaa:	2b02      	cmp	r3, #2
   13eac:	d062      	beq.n	13f74 <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13eae:	78f3      	ldrb	r3, [r6, #3]
   13eb0:	2b15      	cmp	r3, #21
   13eb2:	f040 80cb 	bne.w	1404c <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   13eb6:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13eb8:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   13eba:	2b14      	cmp	r3, #20
   13ebc:	f47f aabc 	bne.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   13ec0:	2c00      	cmp	r4, #0
   13ec2:	f47f aab9 	bne.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   13ec6:	4b7f      	ldr	r3, [pc, #508]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13ec8:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13ecc:	f8cd 8000 	str.w	r8, [sp]
   13ed0:	462b      	mov	r3, r5
   13ed2:	464a      	mov	r2, r9
   13ed4:	f7fd ff0a 	bl	11cec <length_resp_send>
		break;
   13ed8:	f7ff baae 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   13edc:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   13ede:	2c14      	cmp	r4, #20
   13ee0:	d1db      	bne.n	13e9a <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13ee2:	88b3      	ldrh	r3, [r6, #4]
   13ee4:	2b1a      	cmp	r3, #26
   13ee6:	d903      	bls.n	13ef0 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   13ee8:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   13eea:	429d      	cmp	r5, r3
   13eec:	bf28      	it	cs
   13eee:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   13ef0:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   13ef4:	f1ba 0f1a 	cmp.w	sl, #26
   13ef8:	d942      	bls.n	13f80 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   13efa:	f1ba 0f1b 	cmp.w	sl, #27
   13efe:	bf28      	it	cs
   13f00:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   13f04:	88f3      	ldrh	r3, [r6, #6]
   13f06:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13f0a:	d304      	bcc.n	13f16 <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   13f0c:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   13f10:	4598      	cmp	r8, r3
   13f12:	bf28      	it	cs
   13f14:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   13f16:	8973      	ldrh	r3, [r6, #10]
   13f18:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13f1c:	d305      	bcc.n	13f2a <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13f1e:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13f22:	bf28      	it	cs
   13f24:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13f28:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13f2a:	4551      	cmp	r1, sl
   13f2c:	d066      	beq.n	13ffc <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13f2e:	4b65      	ldr	r3, [pc, #404]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13f30:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13f34:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13f38:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13f3a:	429a      	cmp	r2, r3
   13f3c:	d322      	bcc.n	13f84 <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13f3e:	4b61      	ldr	r3, [pc, #388]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13f40:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13f44:	1b14      	subs	r4, r2, r4
   13f46:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13f48:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13f4a:	4b5e      	ldr	r3, [pc, #376]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13f4c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13f50:	f7fb fa79 	bl	f446 <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   13f54:	1823      	adds	r3, r4, r0
   13f56:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13f58:	2bff      	cmp	r3, #255	; 0xff
   13f5a:	d81d      	bhi.n	13f98 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13f5c:	4a59      	ldr	r2, [pc, #356]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13f5e:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   13f62:	4293      	cmp	r3, r2
   13f64:	d01e      	beq.n	13fa4 <isr_rx_conn_pkt_ctrl+0xbe0>
   13f66:	4651      	mov	r1, sl
				nack = 1;
   13f68:	2401      	movs	r4, #1
   13f6a:	e7a5      	b.n	13eb8 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13f6c:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13f6e:	2a14      	cmp	r2, #20
   13f70:	d19b      	bne.n	13eaa <isr_rx_conn_pkt_ctrl+0xae6>
   13f72:	e7b6      	b.n	13ee2 <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   13f74:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   13f76:	3b14      	subs	r3, #20
   13f78:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13f7a:	2b01      	cmp	r3, #1
   13f7c:	d897      	bhi.n	13eae <isr_rx_conn_pkt_ctrl+0xaea>
   13f7e:	e7b0      	b.n	13ee2 <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13f80:	468a      	mov	sl, r1
   13f82:	e7bf      	b.n	13f04 <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   13f84:	4b4f      	ldr	r3, [pc, #316]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13f86:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13f8a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13f8e:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13f90:	fa52 f484 	uxtab	r4, r2, r4
   13f94:	b2e4      	uxtb	r4, r4
   13f96:	e7d7      	b.n	13f48 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13f98:	4040      	eors	r0, r0
   13f9a:	f380 8811 	msr	BASEPRI, r0
   13f9e:	f04f 0004 	mov.w	r0, #4
   13fa2:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   13fa4:	4b47      	ldr	r3, [pc, #284]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   13fa6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13faa:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13fac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fb0:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   13fb4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fb8:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   13fbc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fc0:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   13fc4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fc8:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   13fcc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13fd0:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   13fd4:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   13fd8:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   13fdc:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   13fde:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   13fe2:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13fe6:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   13fea:	f042 0203 	orr.w	r2, r2, #3
   13fee:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   13ff2:	2203      	movs	r2, #3
   13ff4:	741a      	strb	r2, [r3, #16]
   13ff6:	4651      	mov	r1, sl
	u8_t nack = 0;
   13ff8:	2400      	movs	r4, #0
   13ffa:	e75d      	b.n	13eb8 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   13ffc:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   14000:	f36f 03c3 	bfc	r3, #3, #1
   14004:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   14008:	4b2e      	ldr	r3, [pc, #184]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1400a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1400e:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   14010:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14014:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   14018:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1401c:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   14020:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   14024:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   14028:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   1402c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14030:	2400      	movs	r4, #0
   14032:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   14036:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   1403a:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   1403c:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   14040:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   14044:	2301      	movs	r3, #1
   14046:	703b      	strb	r3, [r7, #0]
   14048:	4651      	mov	r1, sl
   1404a:	e735      	b.n	13eb8 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   1404c:	4040      	eors	r0, r0
   1404e:	f380 8811 	msr	BASEPRI, r0
   14052:	f04f 0004 	mov.w	r0, #4
   14056:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   14058:	4b1a      	ldr	r3, [pc, #104]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   1405a:	7bdb      	ldrb	r3, [r3, #15]
   1405c:	b2db      	uxtb	r3, r3
   1405e:	2b04      	cmp	r3, #4
   14060:	d032      	beq.n	140c8 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   14062:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14066:	2202      	movs	r2, #2
   14068:	f362 0301 	bfi	r3, r2, #0, #2
   1406c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   14070:	4b14      	ldr	r3, [pc, #80]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   14072:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14076:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   1407a:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   1407e:	428a      	cmp	r2, r1
   14080:	f000 8099 	beq.w	141b6 <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14084:	4a0f      	ldr	r2, [pc, #60]	; (140c4 <isr_rx_conn_pkt_ctrl+0xd00>)
   14086:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1408a:	7b61      	ldrb	r1, [r4, #13]
   1408c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14090:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14094:	4029      	ands	r1, r5
   14096:	f361 0384 	bfi	r3, r1, #2, #3
   1409a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1409e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   140a2:	7b21      	ldrb	r1, [r4, #12]
   140a4:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   140a8:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   140ac:	f361 1347 	bfi	r3, r1, #5, #3
   140b0:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   140b4:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   140b8:	f7fd fe5c 	bl	11d74 <phy_rsp_send>
	u8_t nack = 0;
   140bc:	2400      	movs	r4, #0
   140be:	f7ff b9bb 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   140c2:	bf00      	nop
   140c4:	20000ff4 	.word	0x20000ff4
			if ((_radio.conn_curr->llcp_phy.ack !=
   140c8:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   140cc:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   140d0:	429a      	cmp	r2, r3
   140d2:	d007      	beq.n	140e4 <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   140d4:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   140d8:	f003 0303 	and.w	r3, r3, #3
   140dc:	3b01      	subs	r3, #1
   140de:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   140e0:	2b02      	cmp	r3, #2
   140e2:	d913      	bls.n	1410c <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   140e4:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   140e8:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   140ec:	429a      	cmp	r2, r3
   140ee:	d105      	bne.n	140fc <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   140f0:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   140f4:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   140f8:	429a      	cmp	r2, r3
   140fa:	d00f      	beq.n	1411c <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   140fc:	222a      	movs	r2, #42	; 0x2a
   140fe:	2116      	movs	r1, #22
   14100:	4628      	mov	r0, r5
   14102:	f7fd fe17 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   14106:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14108:	f7ff b996 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   1410c:	2223      	movs	r2, #35	; 0x23
   1410e:	2116      	movs	r1, #22
   14110:	4628      	mov	r0, r5
   14112:	f7fd fe0f 	bl	11d34 <reject_ext_ind_send>
	u8_t nack = 0;
   14116:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   14118:	f7ff b98e 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   1411c:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   14120:	f043 0303 	orr.w	r3, r3, #3
   14124:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   14128:	4bce      	ldr	r3, [pc, #824]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1412a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1412e:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   14132:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   14136:	428b      	cmp	r3, r1
   14138:	d01a      	beq.n	14170 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1413a:	49ca      	ldr	r1, [pc, #808]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1413c:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   14140:	7b62      	ldrb	r2, [r4, #13]
   14142:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14146:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1414a:	402a      	ands	r2, r5
   1414c:	f362 0384 	bfi	r3, r2, #2, #3
   14150:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   14154:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   14158:	7b22      	ldrb	r2, [r4, #12]
   1415a:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   1415e:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   14162:	f362 1347 	bfi	r3, r2, #5, #3
   14166:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   1416a:	2400      	movs	r4, #0
   1416c:	f7ff b964 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   14170:	3b01      	subs	r3, #1
   14172:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   14176:	4bbb      	ldr	r3, [pc, #748]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14178:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1417c:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   14180:	f36f 0141 	bfc	r1, #1, #1
   14184:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   14188:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   1418c:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   14190:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   14194:	f360 0184 	bfi	r1, r0, #2, #3
   14198:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   1419c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   141a0:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   141a4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   141a8:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   141ac:	f362 1147 	bfi	r1, r2, #5, #3
   141b0:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   141b4:	e7c1      	b.n	1413a <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   141b6:	3a01      	subs	r2, #1
   141b8:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   141bc:	4ba9      	ldr	r3, [pc, #676]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   141be:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   141c2:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   141c6:	f36f 0141 	bfc	r1, #1, #1
   141ca:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   141ce:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   141d2:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   141d6:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   141da:	f360 0184 	bfi	r1, r0, #2, #3
   141de:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   141e2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   141e6:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   141ea:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   141ee:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   141f2:	f361 1047 	bfi	r0, r1, #5, #3
   141f6:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   141fa:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   141fe:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   14202:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   14206:	e73d      	b.n	14084 <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   14208:	4b96      	ldr	r3, [pc, #600]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   1420a:	7bdb      	ldrb	r3, [r3, #15]
   1420c:	b2db      	uxtb	r3, r3
   1420e:	2b04      	cmp	r3, #4
   14210:	d002      	beq.n	14218 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   14212:	2400      	movs	r4, #0
   14214:	f7ff b910 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   14218:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   1421c:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   14220:	429a      	cmp	r2, r3
   14222:	f000 8112 	beq.w	1444a <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   14226:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1422a:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   1422e:	2b02      	cmp	r3, #2
   14230:	d002      	beq.n	14238 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   14232:	2400      	movs	r4, #0
   14234:	f7ff b900 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   14238:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1423c:	f043 0303 	orr.w	r3, r3, #3
   14240:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   14244:	4a87      	ldr	r2, [pc, #540]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14246:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1424a:	7b61      	ldrb	r1, [r4, #13]
   1424c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14250:	f3c3 0582 	ubfx	r5, r3, #2, #3
   14254:	4029      	ands	r1, r5
   14256:	f361 0384 	bfi	r3, r1, #2, #3
   1425a:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1425e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   14262:	7b21      	ldrb	r1, [r4, #12]
   14264:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   14268:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   1426c:	f361 1347 	bfi	r3, r1, #5, #3
   14270:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   14274:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14278:	2400      	movs	r4, #0
   1427a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   1427e:	f7ff b8db 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   14282:	4b78      	ldr	r3, [pc, #480]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   14284:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   14288:	7b23      	ldrb	r3, [r4, #12]
   1428a:	7b61      	ldrb	r1, [r4, #13]
   1428c:	430b      	orrs	r3, r1
   1428e:	f013 0f07 	tst.w	r3, #7
   14292:	d134      	bne.n	142fe <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   14294:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   14298:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   1429c:	428b      	cmp	r3, r1
   1429e:	f000 8086 	beq.w	143ae <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   142a2:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   142a6:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   142aa:	2b02      	cmp	r3, #2
   142ac:	d00c      	beq.n	142c8 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   142ae:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   142b0:	2b00      	cmp	r3, #0
   142b2:	f000 80cd 	beq.w	14450 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   142b6:	4b6b      	ldr	r3, [pc, #428]	; (14464 <isr_rx_conn_pkt_ctrl+0x10a0>)
   142b8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   142bc:	2228      	movs	r2, #40	; 0x28
   142be:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   142c2:	2400      	movs	r4, #0
   142c4:	f7ff b8b8 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   142c8:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   142cc:	2300      	movs	r3, #0
   142ce:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   142d2:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   142d6:	f013 0f02 	tst.w	r3, #2
   142da:	d06a      	beq.n	143b2 <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   142dc:	230c      	movs	r3, #12
   142de:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   142e0:	2300      	movs	r3, #0
   142e2:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   142e4:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   142e8:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   142ec:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   142ee:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   142f2:	f3c2 0202 	ubfx	r2, r2, #0, #3
   142f6:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   142f8:	2201      	movs	r2, #1
   142fa:	703a      	strb	r2, [r7, #0]
   142fc:	e7d8      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   142fe:	89e3      	ldrh	r3, [r4, #14]
   14300:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   14302:	1a5b      	subs	r3, r3, r1
   14304:	b29b      	uxth	r3, r3
   14306:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1430a:	da54      	bge.n	143b6 <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1430c:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   14310:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   14314:	428b      	cmp	r3, r1
   14316:	d134      	bne.n	14382 <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   14318:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   1431c:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   14320:	4283      	cmp	r3, r0
   14322:	d005      	beq.n	14330 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   14324:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   14328:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   1432c:	2b02      	cmp	r3, #2
   1432e:	d02e      	beq.n	1438e <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   14330:	7b60      	ldrb	r0, [r4, #13]
   14332:	f000 0007 	and.w	r0, r0, #7
   14336:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   1433a:	f360 0384 	bfi	r3, r0, #2, #3
   1433e:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   14342:	7b25      	ldrb	r5, [r4, #12]
   14344:	b2db      	uxtb	r3, r3
   14346:	f365 1347 	bfi	r3, r5, #5, #3
   1434a:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   1434e:	89e3      	ldrh	r3, [r4, #14]
   14350:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   14354:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   14358:	f36f 0300 	bfc	r3, #0, #1
   1435c:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   14360:	2408      	movs	r4, #8
   14362:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   14366:	3901      	subs	r1, #1
   14368:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   1436c:	f003 031c 	and.w	r3, r3, #28
   14370:	b31b      	cbz	r3, 143ba <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   14372:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   14376:	f360 0302 	bfi	r3, r0, #0, #3
   1437a:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   1437e:	2300      	movs	r3, #0
   14380:	e796      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   14382:	4040      	eors	r0, r0
   14384:	f380 8811 	msr	BASEPRI, r0
   14388:	f04f 0004 	mov.w	r0, #4
   1438c:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1438e:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14392:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   14396:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1439a:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   1439e:	f363 0041 	bfi	r0, r3, #1, #1
   143a2:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   143a6:	2300      	movs	r3, #0
   143a8:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   143ac:	e7c0      	b.n	14330 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   143ae:	2300      	movs	r3, #0
   143b0:	e77e      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   143b2:	2300      	movs	r3, #0
   143b4:	e77c      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   143b6:	2301      	movs	r3, #1
   143b8:	e77a      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   143ba:	2300      	movs	r3, #0
   143bc:	e778      	b.n	142b0 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   143be:	2b00      	cmp	r3, #0
   143c0:	db49      	blt.n	14456 <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   143c2:	7b21      	ldrb	r1, [r4, #12]
   143c4:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   143c8:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   143cc:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   143d0:	f002 0207 	and.w	r2, r2, #7
   143d4:	4313      	orrs	r3, r2
   143d6:	4219      	tst	r1, r3
   143d8:	d040      	beq.n	1445c <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   143da:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   143de:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   143e2:	429a      	cmp	r2, r3
   143e4:	d002      	beq.n	143ec <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   143e6:	2400      	movs	r4, #0
   143e8:	f7ff b826 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   143ec:	2205      	movs	r2, #5
   143ee:	491e      	ldr	r1, [pc, #120]	; (14468 <isr_rx_conn_pkt_ctrl+0x10a4>)
   143f0:	f105 0079 	add.w	r0, r5, #121	; 0x79
   143f4:	f7eb ff64 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   143f8:	2301      	movs	r3, #1
   143fa:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   143fe:	2302      	movs	r3, #2
   14400:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   14404:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   14408:	3b01      	subs	r3, #1
   1440a:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   1440e:	2400      	movs	r4, #0
   14410:	f7ff b812 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   14414:	4628      	mov	r0, r5
   14416:	f7fd fcd3 	bl	11dc0 <unknown_rsp_send>
	u8_t nack = 0;
   1441a:	2400      	movs	r4, #0
		break;
   1441c:	f7ff b80c 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   14420:	2400      	movs	r4, #0
   14422:	f7ff b809 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14426:	2400      	movs	r4, #0
   14428:	f7ff b806 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   1442c:	2400      	movs	r4, #0
   1442e:	f7ff b803 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14432:	2400      	movs	r4, #0
   14434:	f7ff b800 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14438:	2400      	movs	r4, #0
   1443a:	f7fe bffd 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   1443e:	2400      	movs	r4, #0
   14440:	f7fe bffa 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14444:	2400      	movs	r4, #0
   14446:	f7fe bff7 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   1444a:	2400      	movs	r4, #0
   1444c:	f7fe bff4 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14450:	2400      	movs	r4, #0
   14452:	f7fe bff1 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14456:	2400      	movs	r4, #0
   14458:	f7fe bfee 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   1445c:	2400      	movs	r4, #0
   1445e:	f7fe bfeb 	b.w	13438 <isr_rx_conn_pkt_ctrl+0x74>
   14462:	bf00      	nop
   14464:	20000ff4 	.word	0x20000ff4
   14468:	2000110a 	.word	0x2000110a

0001446c <packet_rx_enqueue>:
{
   1446c:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   1446e:	4a1a      	ldr	r2, [pc, #104]	; (144d8 <packet_rx_enqueue+0x6c>)
   14470:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14474:	b2db      	uxtb	r3, r3
   14476:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   1447a:	4293      	cmp	r3, r2
   1447c:	d01d      	beq.n	144ba <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   1447e:	4a16      	ldr	r2, [pc, #88]	; (144d8 <packet_rx_enqueue+0x6c>)
   14480:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   14484:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   14488:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   1448c:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   1448e:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14492:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   14494:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   14498:	3301      	adds	r3, #1
   1449a:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   1449c:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   144a0:	4293      	cmp	r3, r2
   144a2:	d010      	beq.n	144c6 <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   144a4:	4a0c      	ldr	r2, [pc, #48]	; (144d8 <packet_rx_enqueue+0x6c>)
   144a6:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   144aa:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   144ae:	f7fa fffe 	bl	f4ae <memq_enqueue>
	LL_ASSERT(link);
   144b2:	b150      	cbz	r0, 144ca <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   144b4:	f7fe f871 	bl	1259a <packet_rx_callback>
   144b8:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   144ba:	4040      	eors	r0, r0
   144bc:	f380 8811 	msr	BASEPRI, r0
   144c0:	f04f 0004 	mov.w	r0, #4
   144c4:	df02      	svc	2
		last = 0;
   144c6:	2300      	movs	r3, #0
   144c8:	e7ec      	b.n	144a4 <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   144ca:	4040      	eors	r0, r0
   144cc:	f380 8811 	msr	BASEPRI, r0
   144d0:	f04f 0004 	mov.w	r0, #4
   144d4:	df02      	svc	2
   144d6:	bf00      	nop
   144d8:	20000ff4 	.word	0x20000ff4

000144dc <mayfly_adv_stop>:
{
   144dc:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   144de:	4b1c      	ldr	r3, [pc, #112]	; (14550 <mayfly_adv_stop+0x74>)
   144e0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   144e4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   144e8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   144ea:	429a      	cmp	r2, r3
   144ec:	d31d      	bcc.n	1452a <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   144ee:	4b18      	ldr	r3, [pc, #96]	; (14550 <mayfly_adv_stop+0x74>)
   144f0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   144f4:	1ad3      	subs	r3, r2, r3
   144f6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   144f8:	b30b      	cbz	r3, 1453e <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   144fa:	4b15      	ldr	r3, [pc, #84]	; (14550 <mayfly_adv_stop+0x74>)
   144fc:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14500:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14504:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   14508:	b1dc      	cbz	r4, 14542 <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   1450a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1450e:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   14510:	2306      	movs	r3, #6
   14512:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   14514:	221d      	movs	r2, #29
   14516:	2100      	movs	r1, #0
   14518:	f104 000b 	add.w	r0, r4, #11
   1451c:	f016 fa28 	bl	2a970 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   14520:	233c      	movs	r3, #60	; 0x3c
   14522:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   14524:	f7ff ffa2 	bl	1446c <packet_rx_enqueue>
   14528:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   1452a:	4909      	ldr	r1, [pc, #36]	; (14550 <mayfly_adv_stop+0x74>)
   1452c:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14530:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14534:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14536:	fa52 f383 	uxtab	r3, r2, r3
   1453a:	b2db      	uxtb	r3, r3
   1453c:	e7dc      	b.n	144f8 <mayfly_adv_stop+0x1c>
		return 0;
   1453e:	2400      	movs	r4, #0
   14540:	e7e2      	b.n	14508 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   14542:	4040      	eors	r0, r0
   14544:	f380 8811 	msr	BASEPRI, r0
   14548:	f04f 0004 	mov.w	r0, #4
   1454c:	df02      	svc	2
   1454e:	bf00      	nop
   14550:	20000ff4 	.word	0x20000ff4

00014554 <terminate_ind_rx_enqueue>:
{
   14554:	b510      	push	{r4, lr}
   14556:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   14558:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   1455c:	b1bc      	cbz	r4, 1458e <terminate_ind_rx_enqueue+0x3a>
   1455e:	30b4      	adds	r0, #180	; 0xb4
   14560:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   14562:	8c19      	ldrh	r1, [r3, #32]
   14564:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   14568:	2107      	movs	r1, #7
   1456a:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   1456e:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   14572:	4a0d      	ldr	r2, [pc, #52]	; (145a8 <terminate_ind_rx_enqueue+0x54>)
   14574:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   14578:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   1457c:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   14580:	4621      	mov	r1, r4
   14582:	f7fa ff94 	bl	f4ae <memq_enqueue>
	LL_ASSERT(link);
   14586:	b140      	cbz	r0, 1459a <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   14588:	f7fe f807 	bl	1259a <packet_rx_callback>
   1458c:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   1458e:	4040      	eors	r0, r0
   14590:	f380 8811 	msr	BASEPRI, r0
   14594:	f04f 0004 	mov.w	r0, #4
   14598:	df02      	svc	2
	LL_ASSERT(link);
   1459a:	4040      	eors	r0, r0
   1459c:	f380 8811 	msr	BASEPRI, r0
   145a0:	f04f 0004 	mov.w	r0, #4
   145a4:	df02      	svc	2
   145a6:	bf00      	nop
   145a8:	20000ff4 	.word	0x20000ff4

000145ac <isr_rx_scan_report>:
{
   145ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   145b0:	4b31      	ldr	r3, [pc, #196]	; (14678 <isr_rx_scan_report+0xcc>)
   145b2:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   145b6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   145ba:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   145bc:	429c      	cmp	r4, r3
   145be:	d327      	bcc.n	14610 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   145c0:	4b2d      	ldr	r3, [pc, #180]	; (14678 <isr_rx_scan_report+0xcc>)
   145c2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   145c6:	1ae3      	subs	r3, r4, r3
   145c8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   145ca:	2b02      	cmp	r3, #2
   145cc:	d92a      	bls.n	14624 <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   145ce:	4b2a      	ldr	r3, [pc, #168]	; (14678 <isr_rx_scan_report+0xcc>)
   145d0:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   145d4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   145d8:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   145dc:	2c00      	cmp	r4, #0
   145de:	d047      	beq.n	14670 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   145e0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   145e4:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   145e6:	4b24      	ldr	r3, [pc, #144]	; (14678 <isr_rx_scan_report+0xcc>)
   145e8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   145ec:	f013 0f07 	tst.w	r3, #7
   145f0:	d020      	beq.n	14634 <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   145f2:	4b21      	ldr	r3, [pc, #132]	; (14678 <isr_rx_scan_report+0xcc>)
   145f4:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   145f8:	f003 0307 	and.w	r3, r3, #7
   145fc:	2b01      	cmp	r3, #1
   145fe:	d013      	beq.n	14628 <isr_rx_scan_report+0x7c>
   14600:	2b04      	cmp	r3, #4
   14602:	d014      	beq.n	1462e <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   14604:	4040      	eors	r0, r0
   14606:	f380 8811 	msr	BASEPRI, r0
   1460a:	f04f 0004 	mov.w	r0, #4
   1460e:	df02      	svc	2
		return (_radio.packet_rx_count -
   14610:	4d19      	ldr	r5, [pc, #100]	; (14678 <isr_rx_scan_report+0xcc>)
   14612:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   14616:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1461a:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   1461c:	fa54 f383 	uxtab	r3, r4, r3
   14620:	b2db      	uxtb	r3, r3
   14622:	e7d2      	b.n	145ca <isr_rx_scan_report+0x1e>
		return 0;
   14624:	2400      	movs	r4, #0
   14626:	e7d9      	b.n	145dc <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   14628:	2303      	movs	r3, #3
   1462a:	7123      	strb	r3, [r4, #4]
			break;
   1462c:	e004      	b.n	14638 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   1462e:	2304      	movs	r3, #4
   14630:	7123      	strb	r3, [r4, #4]
			break;
   14632:	e001      	b.n	14638 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   14634:	2302      	movs	r3, #2
   14636:	7123      	strb	r3, [r4, #4]
   14638:	4615      	mov	r5, r2
   1463a:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   1463c:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   14640:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14644:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   14648:	b968      	cbnz	r0, 14666 <isr_rx_scan_report+0xba>
   1464a:	207f      	movs	r0, #127	; 0x7f
   1464c:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   14650:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14652:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   14654:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   14656:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   14658:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   1465a:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   1465c:	f7ff ff06 	bl	1446c <packet_rx_enqueue>
	return 0;
   14660:	2000      	movs	r0, #0
   14662:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   14666:	f7fb f947 	bl	f8f8 <radio_rssi_get>
			     pdu_adv_rx->len] =
   1466a:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   1466e:	e7ed      	b.n	1464c <isr_rx_scan_report+0xa0>
		return 1;
   14670:	2001      	movs	r0, #1
}
   14672:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   14676:	bf00      	nop
   14678:	20000ff4 	.word	0x20000ff4

0001467c <isr_rx_conn>:
{
   1467c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14680:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   14682:	2300      	movs	r3, #0
   14684:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   14688:	4bc1      	ldr	r3, [pc, #772]	; (14990 <isr_rx_conn+0x314>)
   1468a:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   1468e:	3201      	adds	r2, #1
   14690:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   14694:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14698:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1469c:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   146a0:	2301      	movs	r3, #1
   146a2:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   146a4:	4607      	mov	r7, r0
   146a6:	2800      	cmp	r0, #0
   146a8:	d143      	bne.n	14732 <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   146aa:	4bb9      	ldr	r3, [pc, #740]	; (14990 <isr_rx_conn+0x314>)
   146ac:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   146b0:	b91b      	cbnz	r3, 146ba <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   146b2:	2202      	movs	r2, #2
   146b4:	4bb6      	ldr	r3, [pc, #728]	; (14990 <isr_rx_conn+0x314>)
   146b6:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   146ba:	4bb5      	ldr	r3, [pc, #724]	; (14990 <isr_rx_conn+0x314>)
   146bc:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   146c0:	3c01      	subs	r4, #1
   146c2:	b2e4      	uxtb	r4, r4
   146c4:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   146c8:	fab4 f484 	clz	r4, r4
   146cc:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   146ce:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   146d2:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   146d6:	2a00      	cmp	r2, #0
   146d8:	f040 8387 	bne.w	14dea <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   146dc:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   146de:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   146e2:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   146e4:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 14990 <isr_rx_conn+0x314>
   146e8:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   146ec:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   146f0:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   146f4:	a903      	add	r1, sp, #12
   146f6:	f7fe f8ef 	bl	128d8 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   146fa:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   146fe:	2b03      	cmp	r3, #3
   14700:	f000 8376 	beq.w	14df0 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14704:	2c00      	cmp	r4, #0
   14706:	f040 8372 	bne.w	14dee <isr_rx_conn+0x772>
   1470a:	b147      	cbz	r7, 1471e <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   1470c:	7a2b      	ldrb	r3, [r5, #8]
   1470e:	f013 0f10 	tst.w	r3, #16
   14712:	d104      	bne.n	1471e <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   14714:	9b03      	ldr	r3, [sp, #12]
   14716:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   14718:	2b00      	cmp	r3, #0
   1471a:	f000 83aa 	beq.w	14e72 <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   1471e:	4b9c      	ldr	r3, [pc, #624]	; (14990 <isr_rx_conn+0x314>)
   14720:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14724:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   14728:	2b00      	cmp	r3, #0
   1472a:	f000 83a4 	beq.w	14e76 <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   1472e:	2303      	movs	r3, #3
   14730:	e35e      	b.n	14df0 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   14732:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   14736:	7a2a      	ldrb	r2, [r5, #8]
   14738:	f3c2 0280 	ubfx	r2, r2, #2, #1
   1473c:	4b94      	ldr	r3, [pc, #592]	; (14990 <isr_rx_conn+0x314>)
   1473e:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14742:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14746:	f003 0301 	and.w	r3, r3, #1
   1474a:	429a      	cmp	r2, r3
   1474c:	f000 81cd 	beq.w	14aea <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   14750:	f083 0301 	eor.w	r3, r3, #1
   14754:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   14758:	f363 0200 	bfi	r2, r3, #0, #1
   1475c:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   14760:	4b8b      	ldr	r3, [pc, #556]	; (14990 <isr_rx_conn+0x314>)
   14762:	7bdb      	ldrb	r3, [r3, #15]
   14764:	b2db      	uxtb	r3, r3
   14766:	2b03      	cmp	r3, #3
   14768:	d02c      	beq.n	147c4 <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   1476a:	4b89      	ldr	r3, [pc, #548]	; (14990 <isr_rx_conn+0x314>)
   1476c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14770:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14774:	f012 0f80 	tst.w	r2, #128	; 0x80
   14778:	f040 81ae 	bne.w	14ad8 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   1477c:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   14780:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   14784:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   14788:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   1478c:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   14790:	2c00      	cmp	r4, #0
   14792:	f000 8145 	beq.w	14a20 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   14796:	f012 0f20 	tst.w	r2, #32
   1479a:	d00a      	beq.n	147b2 <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   1479c:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   147a0:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   147a4:	3001      	adds	r0, #1
   147a6:	f141 0100 	adc.w	r1, r1, #0
   147aa:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   147ae:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   147b2:	f81c 300e 	ldrb.w	r3, [ip, lr]
   147b6:	f003 0303 	and.w	r3, r3, #3
   147ba:	2b03      	cmp	r3, #3
   147bc:	d00c      	beq.n	147d8 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   147be:	f04f 0900 	mov.w	r9, #0
   147c2:	e12e      	b.n	14a22 <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   147c4:	4b72      	ldr	r3, [pc, #456]	; (14990 <isr_rx_conn+0x314>)
   147c6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   147ca:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   147ce:	f043 0301 	orr.w	r3, r3, #1
   147d2:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   147d6:	e7c8      	b.n	1476a <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   147d8:	f899 3003 	ldrb.w	r3, [r9, #3]
   147dc:	3b02      	subs	r3, #2
   147de:	2b16      	cmp	r3, #22
   147e0:	f200 8118 	bhi.w	14a14 <isr_rx_conn+0x398>
   147e4:	e8df f013 	tbh	[pc, r3, lsl #1]
   147e8:	00330017 	.word	0x00330017
   147ec:	01160057 	.word	0x01160057
   147f0:	01160116 	.word	0x01160116
   147f4:	01160116 	.word	0x01160116
   147f8:	007d0063 	.word	0x007d0063
   147fc:	00970116 	.word	0x00970116
   14800:	01160116 	.word	0x01160116
   14804:	01160116 	.word	0x01160116
   14808:	01160116 	.word	0x01160116
   1480c:	011600af 	.word	0x011600af
   14810:	00e000d6 	.word	0x00e000d6
   14814:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   14816:	2203      	movs	r2, #3
   14818:	4b5d      	ldr	r3, [pc, #372]	; (14990 <isr_rx_conn+0x314>)
   1481a:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1481c:	f7fa fff4 	bl	f808 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   14820:	f7fb f80c 	bl	f83c <radio_is_ready>
   14824:	b958      	cbnz	r0, 1483e <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14826:	4b5a      	ldr	r3, [pc, #360]	; (14990 <isr_rx_conn+0x314>)
   14828:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   1482c:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   14830:	2913      	cmp	r1, #19
   14832:	d00a      	beq.n	1484a <isr_rx_conn+0x1ce>
   14834:	f7ff fe8e 	bl	14554 <terminate_ind_rx_enqueue>
		terminate = 1;
   14838:	f04f 0901 	mov.w	r9, #1
   1483c:	e0f1      	b.n	14a22 <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   1483e:	4040      	eors	r0, r0
   14840:	f380 8811 	msr	BASEPRI, r0
   14844:	f04f 0004 	mov.w	r0, #4
   14848:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   1484a:	2116      	movs	r1, #22
   1484c:	e7f2      	b.n	14834 <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   1484e:	f8df a140 	ldr.w	sl, [pc, #320]	; 14990 <isr_rx_conn+0x314>
   14852:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14856:	2208      	movs	r2, #8
   14858:	f109 010e 	add.w	r1, r9, #14
   1485c:	3093      	adds	r0, #147	; 0x93
   1485e:	f7eb fd2f 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   14862:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   14866:	2204      	movs	r2, #4
   14868:	f109 0116 	add.w	r1, r9, #22
   1486c:	f500 7089 	add.w	r0, r0, #274	; 0x112
   14870:	f7eb fd26 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   14874:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   14878:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1487c:	f043 0308 	orr.w	r3, r3, #8
   14880:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   14884:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   14888:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   1488c:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   14890:	f04f 0900 	mov.w	r9, #0
   14894:	e0c5      	b.n	14a22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   14896:	4b3e      	ldr	r3, [pc, #248]	; (14990 <isr_rx_conn+0x314>)
   14898:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1489c:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   148a0:	f043 0308 	orr.w	r3, r3, #8
   148a4:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   148a8:	f04f 0900 	mov.w	r9, #0
   148ac:	e0b9      	b.n	14a22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   148ae:	4b38      	ldr	r3, [pc, #224]	; (14990 <isr_rx_conn+0x314>)
   148b0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   148b4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   148b8:	f042 0208 	orr.w	r2, r2, #8
   148bc:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   148c0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   148c4:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   148c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   148cc:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   148d0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   148d4:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   148d8:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   148dc:	f04f 0900 	mov.w	r9, #0
   148e0:	e09f      	b.n	14a22 <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   148e2:	4b2b      	ldr	r3, [pc, #172]	; (14990 <isr_rx_conn+0x314>)
   148e4:	7bdb      	ldrb	r3, [r3, #15]
   148e6:	b2db      	uxtb	r3, r3
   148e8:	2b04      	cmp	r3, #4
   148ea:	d00b      	beq.n	14904 <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   148ec:	4b28      	ldr	r3, [pc, #160]	; (14990 <isr_rx_conn+0x314>)
   148ee:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   148f2:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   148f6:	f043 0308 	orr.w	r3, r3, #8
   148fa:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   148fe:	f04f 0900 	mov.w	r9, #0
   14902:	e08e      	b.n	14a22 <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   14904:	4631      	mov	r1, r6
   14906:	4b22      	ldr	r3, [pc, #136]	; (14990 <isr_rx_conn+0x314>)
   14908:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1490c:	f7fe fd38 	bl	13380 <enc_req_reused_send>
			*node_tx = NULL;
   14910:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14912:	46b1      	mov	r9, r6
   14914:	e085      	b.n	14a22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   14916:	4b1e      	ldr	r3, [pc, #120]	; (14990 <isr_rx_conn+0x314>)
   14918:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1491c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14920:	f36f 0182 	bfc	r1, #2, #1
   14924:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   14928:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   1492c:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   14930:	f36f 01c3 	bfc	r1, #3, #1
   14934:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   14938:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1493c:	f04f 0900 	mov.w	r9, #0
   14940:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   14944:	e06d      	b.n	14a22 <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   14946:	4b12      	ldr	r3, [pc, #72]	; (14990 <isr_rx_conn+0x314>)
   14948:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1494c:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   14950:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   14954:	4291      	cmp	r1, r2
   14956:	d060      	beq.n	14a1a <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   14958:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   1495c:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   14960:	2a01      	cmp	r2, #1
   14962:	d002      	beq.n	1496a <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   14964:	f04f 0900 	mov.w	r9, #0
   14968:	e05b      	b.n	14a22 <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   1496a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1496e:	f042 0208 	orr.w	r2, r2, #8
   14972:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   14976:	4b06      	ldr	r3, [pc, #24]	; (14990 <isr_rx_conn+0x314>)
   14978:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1497c:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   14980:	2102      	movs	r1, #2
   14982:	f361 0201 	bfi	r2, r1, #0, #2
   14986:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   1498a:	f04f 0900 	mov.w	r9, #0
   1498e:	e048      	b.n	14a22 <isr_rx_conn+0x3a6>
   14990:	20000ff4 	.word	0x20000ff4
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   14994:	4bbe      	ldr	r3, [pc, #760]	; (14c90 <isr_rx_conn+0x614>)
   14996:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1499a:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   1499e:	2102      	movs	r1, #2
   149a0:	f361 0201 	bfi	r2, r1, #0, #2
   149a4:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   149a8:	4bb9      	ldr	r3, [pc, #740]	; (14c90 <isr_rx_conn+0x614>)
   149aa:	7bdb      	ldrb	r3, [r3, #15]
   149ac:	b2db      	uxtb	r3, r3
   149ae:	2b03      	cmp	r3, #3
   149b0:	d002      	beq.n	149b8 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   149b2:	f04f 0900 	mov.w	r9, #0
   149b6:	e034      	b.n	14a22 <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   149b8:	4ab6      	ldr	r2, [pc, #728]	; (14c94 <isr_rx_conn+0x618>)
   149ba:	e892 0003 	ldmia.w	r2, {r0, r1}
   149be:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   149c2:	4bb3      	ldr	r3, [pc, #716]	; (14c90 <isr_rx_conn+0x614>)
   149c4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   149c8:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   149cc:	f3c3 0382 	ubfx	r3, r3, #2, #3
   149d0:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   149d4:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   149d8:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   149da:	a904      	add	r1, sp, #16
   149dc:	440b      	add	r3, r1
   149de:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   149e2:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   149e6:	f361 0302 	bfi	r3, r1, #0, #3
   149ea:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   149ee:	f04f 0900 	mov.w	r9, #0
   149f2:	e016      	b.n	14a22 <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   149f4:	4ba6      	ldr	r3, [pc, #664]	; (14c90 <isr_rx_conn+0x614>)
   149f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   149fa:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   149fe:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   14a02:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   14a06:	f362 0102 	bfi	r1, r2, #0, #3
   14a0a:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   14a0e:	f04f 0900 	mov.w	r9, #0
   14a12:	e006      	b.n	14a22 <isr_rx_conn+0x3a6>
   14a14:	f04f 0900 	mov.w	r9, #0
   14a18:	e003      	b.n	14a22 <isr_rx_conn+0x3a6>
   14a1a:	f04f 0900 	mov.w	r9, #0
   14a1e:	e000      	b.n	14a22 <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   14a20:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   14a22:	4b9b      	ldr	r3, [pc, #620]	; (14c90 <isr_rx_conn+0x614>)
   14a24:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a28:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   14a2c:	4414      	add	r4, r2
   14a2e:	b2e4      	uxtb	r4, r4
   14a30:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   14a34:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   14a38:	429c      	cmp	r4, r3
   14a3a:	d01c      	beq.n	14a76 <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   14a3c:	2600      	movs	r6, #0
	if (terminate) {
   14a3e:	f1b9 0f00 	cmp.w	r9, #0
   14a42:	d155      	bne.n	14af0 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14a44:	7a2a      	ldrb	r2, [r5, #8]
   14a46:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14a4a:	4b91      	ldr	r3, [pc, #580]	; (14c90 <isr_rx_conn+0x614>)
   14a4c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14a50:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14a54:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14a58:	429a      	cmp	r2, r3
   14a5a:	d053      	beq.n	14b04 <isr_rx_conn+0x488>
	return 0;
   14a5c:	2300      	movs	r3, #0
		if (terminate) {
   14a5e:	2b00      	cmp	r3, #0
   14a60:	f040 81f5 	bne.w	14e4e <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   14a64:	4b8a      	ldr	r3, [pc, #552]	; (14c90 <isr_rx_conn+0x614>)
   14a66:	2400      	movs	r4, #0
   14a68:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   14a6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14a70:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   14a74:	e636      	b.n	146e4 <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   14a76:	4b86      	ldr	r3, [pc, #536]	; (14c90 <isr_rx_conn+0x614>)
   14a78:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   14a7c:	2200      	movs	r2, #0
   14a7e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   14a82:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   14a86:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   14a8a:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   14a8e:	428a      	cmp	r2, r1
   14a90:	d007      	beq.n	14aa2 <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   14a92:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   14a96:	428a      	cmp	r2, r1
   14a98:	d01a      	beq.n	14ad0 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14a9a:	6812      	ldr	r2, [r2, #0]
   14a9c:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   14aa0:	e7cd      	b.n	14a3e <isr_rx_conn+0x3c2>
		if (node_tx) {
   14aa2:	2e00      	cmp	r6, #0
   14aa4:	d0cb      	beq.n	14a3e <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   14aa6:	6812      	ldr	r2, [r2, #0]
   14aa8:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14aac:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   14ab0:	4281      	cmp	r1, r0
   14ab2:	d007      	beq.n	14ac4 <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   14ab4:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   14ab8:	4977      	ldr	r1, [pc, #476]	; (14c98 <isr_rx_conn+0x61c>)
   14aba:	4630      	mov	r0, r6
   14abc:	f7fa fcab 	bl	f416 <mem_release>
	return NULL;
   14ac0:	2600      	movs	r6, #0
   14ac2:	e7bc      	b.n	14a3e <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   14ac4:	2200      	movs	r2, #0
   14ac6:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   14aca:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   14ace:	e7f3      	b.n	14ab8 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   14ad0:	6809      	ldr	r1, [r1, #0]
   14ad2:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   14ad6:	e7e0      	b.n	14a9a <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   14ad8:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14adc:	f36f 12c7 	bfc	r2, #7, #1
   14ae0:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   14ae4:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14ae6:	46b1      	mov	r9, r6
   14ae8:	e7a9      	b.n	14a3e <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14aea:	2600      	movs	r6, #0
	u8_t terminate = 0;
   14aec:	46b1      	mov	r9, r6
   14aee:	e7a6      	b.n	14a3e <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   14af0:	4c67      	ldr	r4, [pc, #412]	; (14c90 <isr_rx_conn+0x614>)
   14af2:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14af6:	f7fd fdd9 	bl	126ac <connection_release>
		_radio.conn_curr = NULL;
   14afa:	2300      	movs	r3, #0
   14afc:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   14b00:	464b      	mov	r3, r9
   14b02:	e7ac      	b.n	14a5e <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   14b04:	4a62      	ldr	r2, [pc, #392]	; (14c90 <isr_rx_conn+0x614>)
   14b06:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14b0a:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   14b0e:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   14b10:	4290      	cmp	r0, r2
   14b12:	d347      	bcc.n	14ba4 <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   14b14:	4b5e      	ldr	r3, [pc, #376]	; (14c90 <isr_rx_conn+0x614>)
   14b16:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14b1a:	1ac3      	subs	r3, r0, r3
   14b1c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14b1e:	2b02      	cmp	r3, #2
   14b20:	d94a      	bls.n	14bb8 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   14b22:	4b5b      	ldr	r3, [pc, #364]	; (14c90 <isr_rx_conn+0x614>)
   14b24:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14b28:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14b2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14b30:	2b00      	cmp	r3, #0
   14b32:	f000 814e 	beq.w	14dd2 <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   14b36:	4b56      	ldr	r3, [pc, #344]	; (14c90 <isr_rx_conn+0x614>)
   14b38:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   14b3c:	2b00      	cmp	r3, #0
   14b3e:	d045      	beq.n	14bcc <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14b40:	4b53      	ldr	r3, [pc, #332]	; (14c90 <isr_rx_conn+0x614>)
   14b42:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   14b46:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   14b4a:	429a      	cmp	r2, r3
   14b4c:	d036      	beq.n	14bbc <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14b4e:	4b50      	ldr	r3, [pc, #320]	; (14c90 <isr_rx_conn+0x614>)
   14b50:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   14b54:	429a      	cmp	r2, r3
   14b56:	f000 813e 	beq.w	14dd6 <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   14b5a:	4a4d      	ldr	r2, [pc, #308]	; (14c90 <isr_rx_conn+0x614>)
   14b5c:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14b60:	b2db      	uxtb	r3, r3
   14b62:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14b66:	4293      	cmp	r3, r2
   14b68:	f000 8137 	beq.w	14dda <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   14b6c:	4b48      	ldr	r3, [pc, #288]	; (14c90 <isr_rx_conn+0x614>)
   14b6e:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   14b72:	b92b      	cbnz	r3, 14b80 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   14b74:	4b46      	ldr	r3, [pc, #280]	; (14c90 <isr_rx_conn+0x614>)
   14b76:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   14b7a:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   14b7c:	429a      	cmp	r2, r3
   14b7e:	d025      	beq.n	14bcc <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   14b80:	4b43      	ldr	r3, [pc, #268]	; (14c90 <isr_rx_conn+0x614>)
   14b82:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   14b86:	2b00      	cmp	r3, #0
   14b88:	f000 8129 	beq.w	14dde <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14b8c:	4b40      	ldr	r3, [pc, #256]	; (14c90 <isr_rx_conn+0x614>)
   14b8e:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   14b92:	32b7      	adds	r2, #183	; 0xb7
   14b94:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14b98:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   14b9a:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   14b9c:	429a      	cmp	r2, r3
   14b9e:	d015      	beq.n	14bcc <isr_rx_conn+0x550>
	return 0;
   14ba0:	2300      	movs	r3, #0
   14ba2:	e75c      	b.n	14a5e <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   14ba4:	4a3a      	ldr	r2, [pc, #232]	; (14c90 <isr_rx_conn+0x614>)
   14ba6:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   14baa:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14bae:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   14bb0:	fa50 f383 	uxtab	r3, r0, r3
   14bb4:	b2db      	uxtb	r3, r3
   14bb6:	e7b2      	b.n	14b1e <isr_rx_conn+0x4a2>
		return 0;
   14bb8:	2300      	movs	r3, #0
   14bba:	e7b9      	b.n	14b30 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   14bbc:	4834      	ldr	r0, [pc, #208]	; (14c90 <isr_rx_conn+0x614>)
   14bbe:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   14bc2:	b2db      	uxtb	r3, r3
   14bc4:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14bc8:	4283      	cmp	r3, r0
   14bca:	d1c0      	bne.n	14b4e <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   14bcc:	7a68      	ldrb	r0, [r5, #9]
   14bce:	2800      	cmp	r0, #0
   14bd0:	f000 80b8 	beq.w	14d44 <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   14bd4:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14bd8:	f013 0f10 	tst.w	r3, #16
   14bdc:	d133      	bne.n	14c46 <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   14bde:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   14be0:	4b2b      	ldr	r3, [pc, #172]	; (14c90 <isr_rx_conn+0x614>)
   14be2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14be6:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   14bea:	f013 0f10 	tst.w	r3, #16
   14bee:	d135      	bne.n	14c5c <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   14bf0:	4b27      	ldr	r3, [pc, #156]	; (14c90 <isr_rx_conn+0x614>)
   14bf2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14bf6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   14bfa:	f012 0f04 	tst.w	r2, #4
   14bfe:	f000 8082 	beq.w	14d06 <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   14c02:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14c06:	7a2a      	ldrb	r2, [r5, #8]
   14c08:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c0c:	2a03      	cmp	r2, #3
   14c0e:	d02a      	beq.n	14c66 <isr_rx_conn+0x5ea>
   14c10:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   14c12:	2a00      	cmp	r2, #0
   14c14:	d077      	beq.n	14d06 <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   14c16:	2203      	movs	r2, #3
   14c18:	4b1d      	ldr	r3, [pc, #116]	; (14c90 <isr_rx_conn+0x614>)
   14c1a:	741a      	strb	r2, [r3, #16]
				radio_disable();
   14c1c:	f7fa fdf4 	bl	f808 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14c20:	f7fa fe0c 	bl	f83c <radio_is_ready>
   14c24:	2800      	cmp	r0, #0
   14c26:	d168      	bne.n	14cfa <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14c28:	4c19      	ldr	r4, [pc, #100]	; (14c90 <isr_rx_conn+0x614>)
   14c2a:	213d      	movs	r1, #61	; 0x3d
   14c2c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14c30:	f7ff fc90 	bl	14554 <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   14c34:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14c38:	f7fd fd38 	bl	126ac <connection_release>
				_radio.conn_curr = NULL;
   14c3c:	2300      	movs	r3, #0
   14c3e:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   14c42:	2301      	movs	r3, #1
   14c44:	e70b      	b.n	14a5e <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   14c46:	f7fb f821 	bl	fc8c <radio_ccm_is_done>
				LL_ASSERT(done);
   14c4a:	b108      	cbz	r0, 14c50 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14c4c:	2401      	movs	r4, #1
   14c4e:	e7c7      	b.n	14be0 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14c50:	4040      	eors	r0, r0
   14c52:	f380 8811 	msr	BASEPRI, r0
   14c56:	f04f 0004 	mov.w	r0, #4
   14c5a:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14c5c:	f7fb f836 	bl	fccc <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14c60:	2800      	cmp	r0, #0
   14c62:	d0d8      	beq.n	14c16 <isr_rx_conn+0x59a>
   14c64:	e7c4      	b.n	14bf0 <isr_rx_conn+0x574>
   14c66:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14c6a:	2a00      	cmp	r2, #0
   14c6c:	db1d      	blt.n	14caa <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14c6e:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   14c72:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   14c76:	d111      	bne.n	14c9c <isr_rx_conn+0x620>
		((!conn->refresh &&
   14c78:	2902      	cmp	r1, #2
   14c7a:	d00f      	beq.n	14c9c <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c7c:	2905      	cmp	r1, #5
   14c7e:	d014      	beq.n	14caa <isr_rx_conn+0x62e>
   14c80:	2906      	cmp	r1, #6
   14c82:	d012      	beq.n	14caa <isr_rx_conn+0x62e>
   14c84:	290d      	cmp	r1, #13
   14c86:	d010      	beq.n	14caa <isr_rx_conn+0x62e>
   14c88:	2911      	cmp	r1, #17
   14c8a:	d00e      	beq.n	14caa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14c8c:	2201      	movs	r2, #1
   14c8e:	e7c0      	b.n	14c12 <isr_rx_conn+0x596>
   14c90:	20000ff4 	.word	0x20000ff4
   14c94:	0002e7a8 	.word	0x0002e7a8
   14c98:	2000114c 	.word	0x2000114c
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14c9c:	b128      	cbz	r0, 14caa <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14c9e:	2902      	cmp	r1, #2
   14ca0:	d003      	beq.n	14caa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14ca2:	290b      	cmp	r1, #11
   14ca4:	d001      	beq.n	14caa <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14ca6:	2904      	cmp	r1, #4
   14ca8:	d1e8      	bne.n	14c7c <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14caa:	2a00      	cmp	r2, #0
   14cac:	db01      	blt.n	14cb2 <isr_rx_conn+0x636>
   14cae:	2200      	movs	r2, #0
   14cb0:	e7af      	b.n	14c12 <isr_rx_conn+0x596>
		((!conn->refresh &&
   14cb2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   14cb6:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   14cba:	d109      	bne.n	14cd0 <isr_rx_conn+0x654>
		((!conn->refresh &&
   14cbc:	2902      	cmp	r1, #2
   14cbe:	d007      	beq.n	14cd0 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14cc0:	2906      	cmp	r1, #6
   14cc2:	d014      	beq.n	14cee <isr_rx_conn+0x672>
   14cc4:	290d      	cmp	r1, #13
   14cc6:	d014      	beq.n	14cf2 <isr_rx_conn+0x676>
   14cc8:	2911      	cmp	r1, #17
   14cca:	d114      	bne.n	14cf6 <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14ccc:	2200      	movs	r2, #0
   14cce:	e7a0      	b.n	14c12 <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14cd0:	b13a      	cbz	r2, 14ce2 <isr_rx_conn+0x666>
		 (conn->refresh &&
   14cd2:	2902      	cmp	r1, #2
   14cd4:	d007      	beq.n	14ce6 <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   14cd6:	290b      	cmp	r1, #11
   14cd8:	d007      	beq.n	14cea <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   14cda:	2903      	cmp	r1, #3
   14cdc:	d1f0      	bne.n	14cc0 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14cde:	2200      	movs	r2, #0
   14ce0:	e797      	b.n	14c12 <isr_rx_conn+0x596>
   14ce2:	2200      	movs	r2, #0
   14ce4:	e795      	b.n	14c12 <isr_rx_conn+0x596>
   14ce6:	2200      	movs	r2, #0
   14ce8:	e793      	b.n	14c12 <isr_rx_conn+0x596>
   14cea:	2200      	movs	r2, #0
   14cec:	e791      	b.n	14c12 <isr_rx_conn+0x596>
   14cee:	2200      	movs	r2, #0
   14cf0:	e78f      	b.n	14c12 <isr_rx_conn+0x596>
   14cf2:	2200      	movs	r2, #0
   14cf4:	e78d      	b.n	14c12 <isr_rx_conn+0x596>
   14cf6:	2201      	movs	r2, #1
   14cf8:	e78b      	b.n	14c12 <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   14cfa:	4040      	eors	r0, r0
   14cfc:	f380 8811 	msr	BASEPRI, r0
   14d00:	f04f 0004 	mov.w	r0, #4
   14d04:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   14d06:	2200      	movs	r2, #0
   14d08:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   14d0c:	4b70      	ldr	r3, [pc, #448]	; (14ed0 <isr_rx_conn+0x854>)
   14d0e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14d12:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   14d16:	7a2b      	ldrb	r3, [r5, #8]
   14d18:	f013 0303 	ands.w	r3, r3, #3
   14d1c:	d00c      	beq.n	14d38 <isr_rx_conn+0x6bc>
   14d1e:	2b02      	cmp	r3, #2
   14d20:	d905      	bls.n	14d2e <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   14d22:	f10d 010b 	add.w	r1, sp, #11
   14d26:	4628      	mov	r0, r5
   14d28:	f7fe fb4c 	bl	133c4 <isr_rx_conn_pkt_ctrl>
   14d2c:	e030      	b.n	14d90 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14d2e:	2301      	movs	r3, #1
   14d30:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   14d34:	4648      	mov	r0, r9
   14d36:	e02b      	b.n	14d90 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14d38:	4040      	eors	r0, r0
   14d3a:	f380 8811 	msr	BASEPRI, r0
   14d3e:	f04f 0004 	mov.w	r0, #4
   14d42:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   14d44:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14d48:	f013 0f14 	tst.w	r3, #20
   14d4c:	d01f      	beq.n	14d8e <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14d4e:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   14d52:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   14d54:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   14d56:	42a2      	cmp	r2, r4
   14d58:	dd04      	ble.n	14d64 <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14d5a:	1ad3      	subs	r3, r2, r3
   14d5c:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14d5e:	3b06      	subs	r3, #6
   14d60:	b29b      	uxth	r3, r3
   14d62:	e000      	b.n	14d66 <isr_rx_conn+0x6ea>
   14d64:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   14d66:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14d6a:	429c      	cmp	r4, r3
   14d6c:	d004      	beq.n	14d78 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14d6e:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   14d72:	2300      	movs	r3, #0
   14d74:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14d78:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14d7c:	bb3b      	cbnz	r3, 14dce <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14d7e:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   14d82:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   14d86:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14d8a:	4604      	mov	r4, r0
   14d8c:	e000      	b.n	14d90 <isr_rx_conn+0x714>
   14d8e:	4604      	mov	r4, r0
		if (!nack) {
   14d90:	bb38      	cbnz	r0, 14de2 <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   14d92:	4b4f      	ldr	r3, [pc, #316]	; (14ed0 <isr_rx_conn+0x854>)
   14d94:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14d98:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14d9c:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14da0:	f082 0201 	eor.w	r2, r2, #1
   14da4:	f362 0341 	bfi	r3, r2, #1, #1
   14da8:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14dac:	b1dc      	cbz	r4, 14de6 <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14dae:	4b48      	ldr	r3, [pc, #288]	; (14ed0 <isr_rx_conn+0x854>)
   14db0:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14db4:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   14db8:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   14dbc:	3201      	adds	r2, #1
   14dbe:	f143 0300 	adc.w	r3, r3, #0
   14dc2:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   14dc6:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   14dca:	2300      	movs	r3, #0
   14dcc:	e647      	b.n	14a5e <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   14dce:	4604      	mov	r4, r0
   14dd0:	e7de      	b.n	14d90 <isr_rx_conn+0x714>
	return 0;
   14dd2:	2300      	movs	r3, #0
   14dd4:	e643      	b.n	14a5e <isr_rx_conn+0x3e2>
   14dd6:	2300      	movs	r3, #0
   14dd8:	e641      	b.n	14a5e <isr_rx_conn+0x3e2>
   14dda:	2300      	movs	r3, #0
   14ddc:	e63f      	b.n	14a5e <isr_rx_conn+0x3e2>
   14dde:	2300      	movs	r3, #0
   14de0:	e63d      	b.n	14a5e <isr_rx_conn+0x3e2>
   14de2:	2300      	movs	r3, #0
   14de4:	e63b      	b.n	14a5e <isr_rx_conn+0x3e2>
   14de6:	2300      	movs	r3, #0
   14de8:	e639      	b.n	14a5e <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   14dea:	2600      	movs	r6, #0
   14dec:	e47a      	b.n	146e4 <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   14dee:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   14df0:	4a37      	ldr	r2, [pc, #220]	; (14ed0 <isr_rx_conn+0x854>)
   14df2:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   14df4:	2b03      	cmp	r3, #3
   14df6:	d040      	beq.n	14e7a <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   14df8:	2096      	movs	r0, #150	; 0x96
   14dfa:	f7fa fe0d 	bl	fa18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   14dfe:	4b34      	ldr	r3, [pc, #208]	; (14ed0 <isr_rx_conn+0x854>)
   14e00:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14e04:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   14e08:	f000 0007 	and.w	r0, r0, #7
   14e0c:	f7fa fd52 	bl	f8b4 <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   14e10:	f7fa feba 	bl	fb88 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   14e14:	9a03      	ldr	r2, [sp, #12]
   14e16:	4b2e      	ldr	r3, [pc, #184]	; (14ed0 <isr_rx_conn+0x854>)
   14e18:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14e1c:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14e20:	7811      	ldrb	r1, [r2, #0]
   14e22:	f360 01c3 	bfi	r1, r0, #3, #1
   14e26:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14e28:	9903      	ldr	r1, [sp, #12]
   14e2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14e2e:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   14e32:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14e36:	7808      	ldrb	r0, [r1, #0]
   14e38:	f362 0082 	bfi	r0, r2, #2, #1
   14e3c:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14e3e:	9903      	ldr	r1, [sp, #12]
   14e40:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   14e44:	f7fd fdde 	bl	12a04 <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14e48:	f7fa fcf8 	bl	f83c <radio_is_ready>
   14e4c:	bb38      	cbnz	r0, 14e9e <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14e4e:	f7fa fe8f 	bl	fb70 <radio_tmr_aa_restore>
   14e52:	b350      	cbz	r0, 14eaa <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   14e54:	4b1e      	ldr	r3, [pc, #120]	; (14ed0 <isr_rx_conn+0x854>)
   14e56:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14e5a:	b13b      	cbz	r3, 14e6c <isr_rx_conn+0x7f0>
	if (tx_release) {
   14e5c:	b11e      	cbz	r6, 14e66 <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14e5e:	4631      	mov	r1, r6
   14e60:	8c18      	ldrh	r0, [r3, #32]
   14e62:	f7fd fb9f 	bl	125a4 <pdu_node_tx_release>
	if (rx_enqueue) {
   14e66:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14e6a:	bb1b      	cbnz	r3, 14eb4 <isr_rx_conn+0x838>
}
   14e6c:	b004      	add	sp, #16
   14e6e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   14e72:	2303      	movs	r3, #3
   14e74:	e7bc      	b.n	14df0 <isr_rx_conn+0x774>
   14e76:	2302      	movs	r3, #2
   14e78:	e7ba      	b.n	14df0 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14e7a:	7bd3      	ldrb	r3, [r2, #15]
   14e7c:	b2db      	uxtb	r3, r3
   14e7e:	2b04      	cmp	r3, #4
   14e80:	d002      	beq.n	14e88 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   14e82:	f7fa fd27 	bl	f8d4 <radio_switch_complete_and_disable>
   14e86:	e7c5      	b.n	14e14 <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14e88:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14e8c:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14e90:	f368 12c7 	bfi	r2, r8, #7, #1
   14e94:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14e98:	f7fa fcb6 	bl	f808 <radio_disable>
			goto isr_rx_conn_exit;
   14e9c:	e7d7      	b.n	14e4e <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14e9e:	4040      	eors	r0, r0
   14ea0:	f380 8811 	msr	BASEPRI, r0
   14ea4:	f04f 0004 	mov.w	r0, #4
   14ea8:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14eaa:	f7fa fe55 	bl	fb58 <radio_tmr_aa_get>
   14eae:	f7fa fe59 	bl	fb64 <radio_tmr_aa_save>
   14eb2:	e7cf      	b.n	14e54 <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   14eb4:	4c06      	ldr	r4, [pc, #24]	; (14ed0 <isr_rx_conn+0x854>)
   14eb6:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14eba:	8c18      	ldrh	r0, [r3, #32]
   14ebc:	f7fc fdec 	bl	11a98 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   14ec0:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   14ec4:	8c1b      	ldrh	r3, [r3, #32]
   14ec6:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   14ec8:	f7ff fad0 	bl	1446c <packet_rx_enqueue>
	return;
   14ecc:	e7ce      	b.n	14e6c <isr_rx_conn+0x7f0>
   14ece:	bf00      	nop
   14ed0:	20000ff4 	.word	0x20000ff4

00014ed4 <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14ed4:	6803      	ldr	r3, [r0, #0]
   14ed6:	2b00      	cmp	r3, #0
   14ed8:	db00      	blt.n	14edc <prepare_normal_set+0x8>
   14eda:	4770      	bx	lr
{
   14edc:	b530      	push	{r4, r5, lr}
   14ede:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   14ee0:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   14ee2:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   14ee4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   14ee8:	42a5      	cmp	r5, r4
   14eea:	bf2c      	ite	cs
   14eec:	1b5b      	subcs	r3, r3, r5
   14eee:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ef0:	b29b      	uxth	r3, r3
		ticker_status =
   14ef2:	9006      	str	r0, [sp, #24]
   14ef4:	480a      	ldr	r0, [pc, #40]	; (14f20 <prepare_normal_set+0x4c>)
   14ef6:	9005      	str	r0, [sp, #20]
   14ef8:	2000      	movs	r0, #0
   14efa:	9004      	str	r0, [sp, #16]
   14efc:	9003      	str	r0, [sp, #12]
   14efe:	9002      	str	r0, [sp, #8]
   14f00:	9301      	str	r3, [sp, #4]
   14f02:	9300      	str	r3, [sp, #0]
   14f04:	4603      	mov	r3, r0
   14f06:	f7fb ff89 	bl	10e1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f0a:	b108      	cbz	r0, 14f10 <prepare_normal_set+0x3c>
   14f0c:	2802      	cmp	r0, #2
   14f0e:	d101      	bne.n	14f14 <prepare_normal_set+0x40>
}
   14f10:	b009      	add	sp, #36	; 0x24
   14f12:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f14:	4040      	eors	r0, r0
   14f16:	f380 8811 	msr	BASEPRI, r0
   14f1a:	f04f 0004 	mov.w	r0, #4
   14f1e:	df02      	svc	2
   14f20:	0001179d 	.word	0x0001179d

00014f24 <event_common_prepare>:
{
   14f24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14f28:	b08a      	sub	sp, #40	; 0x28
   14f2a:	4681      	mov	r9, r0
   14f2c:	468a      	mov	sl, r1
   14f2e:	4616      	mov	r6, r2
   14f30:	461f      	mov	r7, r3
   14f32:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   14f36:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14f38:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14f3c:	2c00      	cmp	r4, #0
   14f3e:	db25      	blt.n	14f8c <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14f40:	4544      	cmp	r4, r8
   14f42:	d828      	bhi.n	14f96 <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   14f44:	4544      	cmp	r4, r8
   14f46:	d251      	bcs.n	14fec <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14f48:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14f4c:	2300      	movs	r3, #0
   14f4e:	461a      	mov	r2, r3
   14f50:	4619      	mov	r1, r3
   14f52:	4618      	mov	r0, r3
   14f54:	f7fd fa3a 	bl	123cc <event_active>
		ticker_status =
   14f58:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14f5c:	9308      	str	r3, [sp, #32]
   14f5e:	4b5e      	ldr	r3, [pc, #376]	; (150d8 <event_common_prepare+0x1b4>)
   14f60:	9307      	str	r3, [sp, #28]
   14f62:	2000      	movs	r0, #0
   14f64:	9006      	str	r0, [sp, #24]
   14f66:	4b5d      	ldr	r3, [pc, #372]	; (150dc <event_common_prepare+0x1b8>)
   14f68:	9305      	str	r3, [sp, #20]
   14f6a:	9004      	str	r0, [sp, #16]
   14f6c:	9003      	str	r0, [sp, #12]
   14f6e:	9002      	str	r0, [sp, #8]
   14f70:	9001      	str	r0, [sp, #4]
   14f72:	9400      	str	r4, [sp, #0]
   14f74:	464b      	mov	r3, r9
   14f76:	2201      	movs	r2, #1
   14f78:	4601      	mov	r1, r0
   14f7a:	f7fb ff01 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f7e:	2800      	cmp	r0, #0
   14f80:	f000 8091 	beq.w	150a6 <event_common_prepare+0x182>
   14f84:	2802      	cmp	r0, #2
   14f86:	d12b      	bne.n	14fe0 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14f88:	4644      	mov	r4, r8
   14f8a:	e03b      	b.n	15004 <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14f8c:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14f8e:	4544      	cmp	r4, r8
   14f90:	bf38      	it	cc
   14f92:	4644      	movcc	r4, r8
   14f94:	e7d4      	b.n	14f40 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   14f96:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14f9a:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14f9e:	9208      	str	r2, [sp, #32]
   14fa0:	4a4d      	ldr	r2, [pc, #308]	; (150d8 <event_common_prepare+0x1b4>)
   14fa2:	9207      	str	r2, [sp, #28]
   14fa4:	2000      	movs	r0, #0
   14fa6:	9006      	str	r0, [sp, #24]
   14fa8:	4a4d      	ldr	r2, [pc, #308]	; (150e0 <event_common_prepare+0x1bc>)
   14faa:	9205      	str	r2, [sp, #20]
   14fac:	9004      	str	r0, [sp, #16]
   14fae:	9003      	str	r0, [sp, #12]
   14fb0:	9002      	str	r0, [sp, #8]
   14fb2:	9001      	str	r0, [sp, #4]
   14fb4:	9300      	str	r3, [sp, #0]
   14fb6:	464b      	mov	r3, r9
   14fb8:	2201      	movs	r2, #1
   14fba:	4601      	mov	r1, r0
   14fbc:	f7fb fee0 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fc0:	b108      	cbz	r0, 14fc6 <event_common_prepare+0xa2>
   14fc2:	2802      	cmp	r0, #2
   14fc4:	d106      	bne.n	14fd4 <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   14fc6:	2300      	movs	r3, #0
   14fc8:	461a      	mov	r2, r3
   14fca:	4619      	mov	r1, r3
   14fcc:	4618      	mov	r0, r3
   14fce:	f7fd fa0f 	bl	123f0 <event_xtal>
   14fd2:	e017      	b.n	15004 <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fd4:	4040      	eors	r0, r0
   14fd6:	f380 8811 	msr	BASEPRI, r0
   14fda:	f04f 0004 	mov.w	r0, #4
   14fde:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14fe0:	4040      	eors	r0, r0
   14fe2:	f380 8811 	msr	BASEPRI, r0
   14fe6:	f04f 0004 	mov.w	r0, #4
   14fea:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   14fec:	2300      	movs	r3, #0
   14fee:	461a      	mov	r2, r3
   14ff0:	4619      	mov	r1, r3
   14ff2:	4618      	mov	r0, r3
   14ff4:	f7fd f9ea 	bl	123cc <event_active>
		event_xtal(0, 0, 0, NULL);
   14ff8:	2300      	movs	r3, #0
   14ffa:	461a      	mov	r2, r3
   14ffc:	4619      	mov	r1, r3
   14ffe:	4618      	mov	r0, r3
   15000:	f7fd f9f6 	bl	123f0 <event_xtal>
	_radio.remainder_anchor = remainder;
   15004:	4b37      	ldr	r3, [pc, #220]	; (150e4 <event_common_prepare+0x1c0>)
   15006:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   1500a:	f241 43e9 	movw	r3, #5353	; 0x14e9
   1500e:	9308      	str	r3, [sp, #32]
   15010:	4b31      	ldr	r3, [pc, #196]	; (150d8 <event_common_prepare+0x1b4>)
   15012:	9307      	str	r3, [sp, #28]
   15014:	9b15      	ldr	r3, [sp, #84]	; 0x54
   15016:	9306      	str	r3, [sp, #24]
   15018:	9b14      	ldr	r3, [sp, #80]	; 0x50
   1501a:	9305      	str	r3, [sp, #20]
   1501c:	2000      	movs	r0, #0
   1501e:	9004      	str	r0, [sp, #16]
   15020:	9003      	str	r0, [sp, #12]
   15022:	9002      	str	r0, [sp, #8]
   15024:	9001      	str	r0, [sp, #4]
   15026:	9400      	str	r4, [sp, #0]
   15028:	464b      	mov	r3, r9
   1502a:	4602      	mov	r2, r0
   1502c:	4601      	mov	r1, r0
   1502e:	f7fb fea7 	bl	10d80 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15032:	b108      	cbz	r0, 15038 <event_common_prepare+0x114>
   15034:	2802      	cmp	r0, #2
   15036:	d138      	bne.n	150aa <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   15038:	2305      	movs	r3, #5
   1503a:	2200      	movs	r2, #0
   1503c:	4611      	mov	r1, r2
   1503e:	4610      	mov	r0, r2
   15040:	f7fd f93a 	bl	122b8 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   15044:	4b27      	ldr	r3, [pc, #156]	; (150e4 <event_common_prepare+0x1c0>)
   15046:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   1504a:	4598      	cmp	r8, r3
   1504c:	d01d      	beq.n	1508a <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   1504e:	6832      	ldr	r2, [r6, #0]
   15050:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   15054:	429a      	cmp	r2, r3
   15056:	bf38      	it	cc
   15058:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   1505a:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   1505c:	6833      	ldr	r3, [r6, #0]
   1505e:	2b00      	cmp	r3, #0
   15060:	db29      	blt.n	150b6 <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   15062:	b2a3      	uxth	r3, r4
   15064:	b292      	uxth	r2, r2
		ticker_status =
   15066:	f241 5116 	movw	r1, #5398	; 0x1516
   1506a:	9106      	str	r1, [sp, #24]
   1506c:	491a      	ldr	r1, [pc, #104]	; (150d8 <event_common_prepare+0x1b4>)
   1506e:	9105      	str	r1, [sp, #20]
   15070:	2000      	movs	r0, #0
   15072:	9004      	str	r0, [sp, #16]
   15074:	9003      	str	r0, [sp, #12]
   15076:	9302      	str	r3, [sp, #8]
   15078:	9201      	str	r2, [sp, #4]
   1507a:	9200      	str	r2, [sp, #0]
   1507c:	462a      	mov	r2, r5
   1507e:	4601      	mov	r1, r0
   15080:	f7fb fecc 	bl	10e1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15084:	b108      	cbz	r0, 1508a <event_common_prepare+0x166>
   15086:	2802      	cmp	r0, #2
   15088:	d119      	bne.n	150be <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   1508a:	20ff      	movs	r0, #255	; 0xff
   1508c:	f7fd fab6 	bl	125fc <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   15090:	4b15      	ldr	r3, [pc, #84]	; (150e8 <event_common_prepare+0x1c4>)
   15092:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15094:	2201      	movs	r2, #1
   15096:	4611      	mov	r1, r2
   15098:	2000      	movs	r0, #0
   1509a:	f7fa f85f 	bl	f15c <mayfly_enqueue>
		LL_ASSERT(!retval);
   1509e:	b9a0      	cbnz	r0, 150ca <event_common_prepare+0x1a6>
}
   150a0:	b00a      	add	sp, #40	; 0x28
   150a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   150a6:	4644      	mov	r4, r8
   150a8:	e7ac      	b.n	15004 <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   150aa:	4040      	eors	r0, r0
   150ac:	f380 8811 	msr	BASEPRI, r0
   150b0:	f04f 0004 	mov.w	r0, #4
   150b4:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   150b6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   150ba:	6033      	str	r3, [r6, #0]
   150bc:	e7d1      	b.n	15062 <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   150be:	4040      	eors	r0, r0
   150c0:	f380 8811 	msr	BASEPRI, r0
   150c4:	f04f 0004 	mov.w	r0, #4
   150c8:	df02      	svc	2
		LL_ASSERT(!retval);
   150ca:	4040      	eors	r0, r0
   150cc:	f380 8811 	msr	BASEPRI, r0
   150d0:	f04f 0004 	mov.w	r0, #4
   150d4:	df02      	svc	2
   150d6:	bf00      	nop
   150d8:	00011ad5 	.word	0x00011ad5
   150dc:	000123f1 	.word	0x000123f1
   150e0:	000123cd 	.word	0x000123cd
   150e4:	20000ff4 	.word	0x20000ff4
   150e8:	2000be30 	.word	0x2000be30

000150ec <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   150ec:	4b0d      	ldr	r3, [pc, #52]	; (15124 <radio_event_adv_prepare+0x38>)
   150ee:	7b1b      	ldrb	r3, [r3, #12]
   150f0:	b993      	cbnz	r3, 15118 <radio_event_adv_prepare+0x2c>
{
   150f2:	b510      	push	{r4, lr}
   150f4:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   150f6:	4a0b      	ldr	r2, [pc, #44]	; (15124 <radio_event_adv_prepare+0x38>)
   150f8:	2305      	movs	r3, #5
   150fa:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   150fc:	2400      	movs	r4, #0
   150fe:	9403      	str	r4, [sp, #12]
   15100:	4c09      	ldr	r4, [pc, #36]	; (15128 <radio_event_adv_prepare+0x3c>)
   15102:	9402      	str	r4, [sp, #8]
   15104:	9301      	str	r3, [sp, #4]
   15106:	69d3      	ldr	r3, [r2, #28]
   15108:	9300      	str	r3, [sp, #0]
   1510a:	f102 0318 	add.w	r3, r2, #24
   1510e:	3214      	adds	r2, #20
   15110:	f7ff ff08 	bl	14f24 <event_common_prepare>
}
   15114:	b004      	add	sp, #16
   15116:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15118:	4040      	eors	r0, r0
   1511a:	f380 8811 	msr	BASEPRI, r0
   1511e:	f04f 0004 	mov.w	r0, #4
   15122:	df02      	svc	2
   15124:	20000ff4 	.word	0x20000ff4
   15128:	000169e9 	.word	0x000169e9
   1512c:	00000000 	.word	0x00000000

00015130 <event_connection_prepare>:
{
   15130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   15134:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   15136:	4ccb      	ldr	r4, [pc, #812]	; (15464 <event_connection_prepare+0x334>)
   15138:	7b24      	ldrb	r4, [r4, #12]
   1513a:	2c00      	cmp	r4, #0
   1513c:	d135      	bne.n	151aa <event_connection_prepare+0x7a>
				   conn->handle;
   1513e:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   15140:	3507      	adds	r5, #7
   15142:	b2ed      	uxtb	r5, r5
   15144:	4cc7      	ldr	r4, [pc, #796]	; (15464 <event_connection_prepare+0x334>)
   15146:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   15148:	f993 401d 	ldrsb.w	r4, [r3, #29]
   1514c:	2c00      	cmp	r4, #0
   1514e:	db32      	blt.n	151b6 <event_connection_prepare+0x86>
   15150:	461c      	mov	r4, r3
   15152:	910a      	str	r1, [sp, #40]	; 0x28
   15154:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   15156:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   15158:	4415      	add	r5, r2
   1515a:	b2ad      	uxth	r5, r5
   1515c:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   1515e:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   15160:	441d      	add	r5, r3
   15162:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   15164:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   15168:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1516c:	429a      	cmp	r2, r3
   1516e:	d02d      	beq.n	151cc <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   15170:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   15174:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15178:	429a      	cmp	r2, r3
   1517a:	f000 861a 	beq.w	15db2 <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   1517e:	2305      	movs	r3, #5
   15180:	2200      	movs	r2, #0
   15182:	4611      	mov	r1, r2
   15184:	4610      	mov	r0, r2
   15186:	f7fd f897 	bl	122b8 <event_stop>
		switch (conn->llcp_type) {
   1518a:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   1518e:	3b01      	subs	r3, #1
   15190:	2b07      	cmp	r3, #7
   15192:	f201 80d6 	bhi.w	16342 <event_connection_prepare+0x1212>
   15196:	e8df f013 	tbh	[pc, r3, lsl #1]
   1519a:	029f      	.short	0x029f
   1519c:	05b1054e 	.word	0x05b1054e
   151a0:	072706ee 	.word	0x072706ee
   151a4:	07ac08d4 	.word	0x07ac08d4
   151a8:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   151aa:	4040      	eors	r0, r0
   151ac:	f380 8811 	msr	BASEPRI, r0
   151b0:	f04f 0004 	mov.w	r0, #4
   151b4:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   151b6:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   151b8:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   151bc:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   151be:	442c      	add	r4, r5
   151c0:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   151c2:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   151c4:	42ac      	cmp	r4, r5
   151c6:	d9c3      	bls.n	15150 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   151c8:	65dd      	str	r5, [r3, #92]	; 0x5c
   151ca:	e7c1      	b.n	15150 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   151cc:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   151d0:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   151d4:	429a      	cmp	r2, r3
   151d6:	d00b      	beq.n	151f0 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   151d8:	2305      	movs	r3, #5
   151da:	2200      	movs	r2, #0
   151dc:	4611      	mov	r1, r2
   151de:	4610      	mov	r0, r2
   151e0:	f7fd f86a 	bl	122b8 <event_stop>
	conn_upd = _radio.conn_upd;
   151e4:	4b9f      	ldr	r3, [pc, #636]	; (15464 <event_connection_prepare+0x334>)
   151e6:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   151ea:	b1fb      	cbz	r3, 1522c <event_connection_prepare+0xfc>
   151ec:	429c      	cmp	r4, r3
   151ee:	d01d      	beq.n	1522c <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   151f0:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   151f4:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   151f8:	429a      	cmp	r2, r3
   151fa:	d0b9      	beq.n	15170 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   151fc:	2305      	movs	r3, #5
   151fe:	2200      	movs	r2, #0
   15200:	4611      	mov	r1, r2
   15202:	4610      	mov	r0, r2
   15204:	f7fd f858 	bl	122b8 <event_stop>
	switch (conn->llcp_phy.state) {
   15208:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1520c:	f003 0303 	and.w	r3, r3, #3
   15210:	2b03      	cmp	r3, #3
   15212:	f200 8257 	bhi.w	156c4 <event_connection_prepare+0x594>
   15216:	a201      	add	r2, pc, #4	; (adr r2, 1521c <event_connection_prepare+0xec>)
   15218:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1521c:	00015515 	.word	0x00015515
   15220:	00015171 	.word	0x00015171
   15224:	00015171 	.word	0x00015171
   15228:	0001558f 	.word	0x0001558f
	switch (conn->llcp_conn_param.state) {
   1522c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15230:	f003 0307 	and.w	r3, r3, #7
   15234:	2b05      	cmp	r3, #5
   15236:	f200 8167 	bhi.w	15508 <event_connection_prepare+0x3d8>
   1523a:	a201      	add	r2, pc, #4	; (adr r2, 15240 <event_connection_prepare+0x110>)
   1523c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   15240:	00015259 	.word	0x00015259
   15244:	00015323 	.word	0x00015323
   15248:	00015471 	.word	0x00015471
   1524c:	000151f1 	.word	0x000151f1
   15250:	000151f1 	.word	0x000151f1
   15254:	000151f1 	.word	0x000151f1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15258:	4883      	ldr	r0, [pc, #524]	; (15468 <event_connection_prepare+0x338>)
   1525a:	f7fa f8c0 	bl	f3de <mem_acquire>
	if (!node_tx) {
   1525e:	4680      	mov	r8, r0
   15260:	2800      	cmp	r0, #0
   15262:	d0c5      	beq.n	151f0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   15264:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   15268:	2204      	movs	r2, #4
   1526a:	f362 0302 	bfi	r3, r2, #0, #3
   1526e:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15272:	7903      	ldrb	r3, [r0, #4]
   15274:	f043 0303 	orr.w	r3, r3, #3
   15278:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   1527a:	2318      	movs	r3, #24
   1527c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1527e:	230f      	movs	r3, #15
   15280:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   15282:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   15286:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   15288:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1528c:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   1528e:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15292:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15294:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   15298:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   1529a:	2300      	movs	r3, #0
   1529c:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   1529e:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   152a2:	74c3      	strb	r3, [r0, #19]
   152a4:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   152a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   152aa:	7543      	strb	r3, [r0, #21]
   152ac:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   152ae:	75c3      	strb	r3, [r0, #23]
   152b0:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   152b2:	7643      	strb	r3, [r0, #25]
   152b4:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   152b6:	76c3      	strb	r3, [r0, #27]
   152b8:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   152ba:	7743      	strb	r3, [r0, #29]
   152bc:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   152be:	4601      	mov	r1, r0
   152c0:	4620      	mov	r0, r4
   152c2:	f7fc fb1f 	bl	11904 <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   152c6:	4b67      	ldr	r3, [pc, #412]	; (15464 <event_connection_prepare+0x334>)
   152c8:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   152cc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   152d0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   152d4:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   152d8:	6823      	ldr	r3, [r4, #0]
   152da:	2b00      	cmp	r3, #0
   152dc:	db13      	blt.n	15306 <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   152de:	f108 0313 	add.w	r3, r8, #19
   152e2:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   152e6:	4b61      	ldr	r3, [pc, #388]	; (1546c <event_connection_prepare+0x33c>)
   152e8:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   152ea:	2201      	movs	r2, #1
   152ec:	4611      	mov	r1, r2
   152ee:	2000      	movs	r0, #0
   152f0:	f7f9 ff34 	bl	f15c <mayfly_enqueue>
		LL_ASSERT(!retval);
   152f4:	2800      	cmp	r0, #0
   152f6:	f43f af7b 	beq.w	151f0 <event_connection_prepare+0xc0>
   152fa:	4040      	eors	r0, r0
   152fc:	f380 8811 	msr	BASEPRI, r0
   15300:	f04f 0004 	mov.w	r0, #4
   15304:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15306:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15308:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   1530a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   1530e:	4291      	cmp	r1, r2
   15310:	bf2c      	ite	cs
   15312:	ebc3 0301 	rsbcs	r3, r3, r1
   15316:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   1531a:	4433      	add	r3, r6
   1531c:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   15320:	e7dd      	b.n	152de <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   15322:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   15326:	bbb3      	cbnz	r3, 15396 <event_connection_prepare+0x266>
	if (!conn->role) {
   15328:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1532c:	2b00      	cmp	r3, #0
   1532e:	db52      	blt.n	153d6 <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   15330:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   15334:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   15338:	429a      	cmp	r2, r3
   1533a:	f47f af59 	bne.w	151f0 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   1533e:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   15342:	2105      	movs	r1, #5
   15344:	f361 0202 	bfi	r2, r1, #0, #3
   15348:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   1534c:	2001      	movs	r0, #1
   1534e:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   15352:	2100      	movs	r1, #0
   15354:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   15358:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   1535c:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   15360:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   15364:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   15368:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   1536c:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   15370:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   15374:	f04f 0e02 	mov.w	lr, #2
   15378:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   1537c:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   15380:	4042      	eors	r2, r0
   15382:	f362 0182 	bfi	r1, r2, #2, #1
   15386:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   1538a:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   1538e:	3b01      	subs	r3, #1
   15390:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15394:	e72c      	b.n	151f0 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15396:	4834      	ldr	r0, [pc, #208]	; (15468 <event_connection_prepare+0x338>)
   15398:	f7fa f821 	bl	f3de <mem_acquire>
		if (!node_tx) {
   1539c:	4601      	mov	r1, r0
   1539e:	2800      	cmp	r0, #0
   153a0:	f43f af26 	beq.w	151f0 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   153a4:	7903      	ldrb	r3, [r0, #4]
   153a6:	f043 0303 	orr.w	r3, r3, #3
   153aa:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   153ac:	2311      	movs	r3, #17
   153ae:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   153b0:	2303      	movs	r3, #3
   153b2:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   153b4:	230f      	movs	r3, #15
   153b6:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   153b8:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   153bc:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   153be:	4620      	mov	r0, r4
   153c0:	f7fc faa0 	bl	11904 <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   153c4:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   153c8:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   153cc:	2200      	movs	r2, #0
   153ce:	4b25      	ldr	r3, [pc, #148]	; (15464 <event_connection_prepare+0x334>)
   153d0:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   153d4:	e70c      	b.n	151f0 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   153d6:	4824      	ldr	r0, [pc, #144]	; (15468 <event_connection_prepare+0x338>)
   153d8:	f7fa f801 	bl	f3de <mem_acquire>
	if (!node_tx) {
   153dc:	4601      	mov	r1, r0
   153de:	2800      	cmp	r0, #0
   153e0:	f43f af06 	beq.w	151f0 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   153e4:	7903      	ldrb	r3, [r0, #4]
   153e6:	f043 0303 	orr.w	r3, r3, #3
   153ea:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   153ec:	2318      	movs	r3, #24
   153ee:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   153f0:	2310      	movs	r3, #16
   153f2:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   153f4:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   153f8:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   153fa:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   153fe:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   15400:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   15404:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   15406:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   1540a:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   1540c:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   15410:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   15412:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   15416:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   1541a:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   1541e:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   15422:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   15426:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   1542a:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   1542e:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   15432:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   15436:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   1543a:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   1543e:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   15442:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   15446:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   1544a:	4620      	mov	r0, r4
   1544c:	f7fc fa5a 	bl	11904 <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15450:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   15454:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   15458:	2200      	movs	r2, #0
   1545a:	4b02      	ldr	r3, [pc, #8]	; (15464 <event_connection_prepare+0x334>)
   1545c:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15460:	e6c6      	b.n	151f0 <event_connection_prepare+0xc0>
   15462:	bf00      	nop
   15464:	20000ff4 	.word	0x20000ff4
   15468:	2000114c 	.word	0x2000114c
   1546c:	2000bdc0 	.word	0x2000bdc0
	if (conn->pause_tx) {
   15470:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15474:	f013 0f08 	tst.w	r3, #8
   15478:	f47f aeba 	bne.w	151f0 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   1547c:	4b94      	ldr	r3, [pc, #592]	; (156d0 <event_connection_prepare+0x5a0>)
   1547e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15482:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15486:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15488:	429a      	cmp	r2, r3
   1548a:	d331      	bcc.n	154f0 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   1548c:	4b90      	ldr	r3, [pc, #576]	; (156d0 <event_connection_prepare+0x5a0>)
   1548e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15492:	1ad3      	subs	r3, r2, r3
   15494:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15496:	2b01      	cmp	r3, #1
   15498:	d934      	bls.n	15504 <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   1549a:	4b8d      	ldr	r3, [pc, #564]	; (156d0 <event_connection_prepare+0x5a0>)
   1549c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   154a0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   154a4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   154a8:	2b00      	cmp	r3, #0
   154aa:	f43f aea1 	beq.w	151f0 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   154ae:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   154b2:	2103      	movs	r1, #3
   154b4:	f361 0202 	bfi	r2, r1, #0, #3
   154b8:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   154bc:	8c22      	ldrh	r2, [r4, #32]
   154be:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   154c0:	2201      	movs	r2, #1
   154c2:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   154c4:	7a1a      	ldrb	r2, [r3, #8]
   154c6:	430a      	orrs	r2, r1
   154c8:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   154ca:	2218      	movs	r2, #24
   154cc:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   154ce:	220f      	movs	r2, #15
   154d0:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   154d2:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   154d6:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   154d8:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   154dc:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   154de:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   154e2:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   154e4:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   154e8:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   154ea:	f7fe ffbf 	bl	1446c <packet_rx_enqueue>
   154ee:	e67f      	b.n	151f0 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   154f0:	4977      	ldr	r1, [pc, #476]	; (156d0 <event_connection_prepare+0x5a0>)
   154f2:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   154f6:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   154fa:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   154fc:	fa52 f383 	uxtab	r3, r2, r3
   15500:	b2db      	uxtb	r3, r3
   15502:	e7c8      	b.n	15496 <event_connection_prepare+0x366>
		return 0;
   15504:	2300      	movs	r3, #0
   15506:	e7cf      	b.n	154a8 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   15508:	4040      	eors	r0, r0
   1550a:	f380 8811 	msr	BASEPRI, r0
   1550e:	f04f 0004 	mov.w	r0, #4
   15512:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15514:	486f      	ldr	r0, [pc, #444]	; (156d4 <event_connection_prepare+0x5a4>)
   15516:	f7f9 ff62 	bl	f3de <mem_acquire>
		if (!node_tx) {
   1551a:	4601      	mov	r1, r0
   1551c:	2800      	cmp	r0, #0
   1551e:	f43f ae27 	beq.w	15170 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   15522:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15526:	2201      	movs	r2, #1
   15528:	f362 0301 	bfi	r3, r2, #0, #2
   1552c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   15530:	b2db      	uxtb	r3, r3
   15532:	f3c3 0082 	ubfx	r0, r3, #2, #3
   15536:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1553a:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   1553e:	095b      	lsrs	r3, r3, #5
   15540:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   15544:	f363 00c5 	bfi	r0, r3, #3, #3
   15548:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   1554c:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   15550:	4613      	mov	r3, r2
   15552:	f360 1386 	bfi	r3, r0, #6, #1
   15556:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1555a:	790b      	ldrb	r3, [r1, #4]
   1555c:	f043 0303 	orr.w	r3, r3, #3
   15560:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15562:	2303      	movs	r3, #3
   15564:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15566:	2316      	movs	r3, #22
   15568:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   1556a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1556e:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15572:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   15574:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15578:	f3c3 1342 	ubfx	r3, r3, #5, #3
   1557c:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   1557e:	4620      	mov	r0, r4
   15580:	f7fc f9c0 	bl	11904 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15584:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15588:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1558c:	e5f0      	b.n	15170 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   1558e:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   15592:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   15596:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1559a:	f3c3 0382 	ubfx	r3, r3, #2, #3
   1559e:	f013 0f02 	tst.w	r3, #2
   155a2:	d047      	beq.n	15634 <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   155a4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155a8:	2202      	movs	r2, #2
   155aa:	f362 0384 	bfi	r3, r2, #2, #3
   155ae:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   155b2:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155b6:	095b      	lsrs	r3, r3, #5
   155b8:	f013 0f02 	tst.w	r3, #2
   155bc:	d057      	beq.n	1566e <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   155be:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155c2:	2202      	movs	r2, #2
   155c4:	f362 1347 	bfi	r3, r2, #5, #3
   155c8:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   155cc:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155d0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   155d4:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   155d8:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   155dc:	4293      	cmp	r3, r2
   155de:	d063      	beq.n	156a8 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   155e0:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   155e4:	f363 0284 	bfi	r2, r3, #2, #3
   155e8:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   155ec:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   155f0:	095b      	lsrs	r3, r3, #5
   155f2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   155f6:	f002 0207 	and.w	r2, r2, #7
   155fa:	4293      	cmp	r3, r2
   155fc:	d05b      	beq.n	156b6 <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   155fe:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15602:	f363 1247 	bfi	r2, r3, #5, #3
   15606:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   1560a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1560e:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   15612:	f3c2 0240 	ubfx	r2, r2, #1, #1
   15616:	f043 0301 	orr.w	r3, r3, #1
   1561a:	f362 0341 	bfi	r3, r2, #1, #1
   1561e:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   15622:	2308      	movs	r3, #8
   15624:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   15628:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   1562c:	3b01      	subs	r3, #1
   1562e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   15632:	e59d      	b.n	15170 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   15634:	f013 0f01 	tst.w	r3, #1
   15638:	d007      	beq.n	1564a <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   1563a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1563e:	2201      	movs	r2, #1
   15640:	f362 0384 	bfi	r3, r2, #2, #3
   15644:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15648:	e7b3      	b.n	155b2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   1564a:	f013 0f04 	tst.w	r3, #4
   1564e:	d007      	beq.n	15660 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   15650:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15654:	2204      	movs	r2, #4
   15656:	f362 0384 	bfi	r3, r2, #2, #3
   1565a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1565e:	e7a8      	b.n	155b2 <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   15660:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15664:	f36f 0384 	bfc	r3, #2, #3
   15668:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   1566c:	e7a1      	b.n	155b2 <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   1566e:	f013 0f01 	tst.w	r3, #1
   15672:	d007      	beq.n	15684 <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   15674:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   15678:	2201      	movs	r2, #1
   1567a:	f362 1347 	bfi	r3, r2, #5, #3
   1567e:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15682:	e7a3      	b.n	155cc <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   15684:	f013 0f04 	tst.w	r3, #4
   15688:	d007      	beq.n	1569a <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   1568a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1568e:	2204      	movs	r2, #4
   15690:	f362 1347 	bfi	r3, r2, #5, #3
   15694:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   15698:	e798      	b.n	155cc <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   1569a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   1569e:	f36f 1347 	bfc	r3, #5, #3
   156a2:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   156a6:	e791      	b.n	155cc <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   156a8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156ac:	f36f 0384 	bfc	r3, #2, #3
   156b0:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   156b4:	e79a      	b.n	155ec <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   156b6:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156ba:	f36f 1347 	bfc	r3, #5, #3
   156be:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   156c2:	e7a2      	b.n	1560a <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   156c4:	4040      	eors	r0, r0
   156c6:	f380 8811 	msr	BASEPRI, r0
   156ca:	f04f 0004 	mov.w	r0, #4
   156ce:	df02      	svc	2
   156d0:	20000ff4 	.word	0x20000ff4
   156d4:	2000114c 	.word	0x2000114c
	conn_upd = _radio.conn_upd;
   156d8:	4bb7      	ldr	r3, [pc, #732]	; (159b8 <event_connection_prepare+0x888>)
   156da:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   156de:	2b00      	cmp	r3, #0
   156e0:	f000 814b 	beq.w	1597a <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   156e4:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   156e8:	eba5 0808 	sub.w	r8, r5, r8
   156ec:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   156f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   156f4:	f013 0f03 	tst.w	r3, #3
   156f8:	f040 8143 	bne.w	15982 <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   156fc:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   15700:	f040 8296 	bne.w	15c30 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   15704:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15708:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1570c:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   15710:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   15714:	429a      	cmp	r2, r3
   15716:	d006      	beq.n	15726 <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   15718:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   1571c:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   15720:	2b05      	cmp	r3, #5
   15722:	f000 81bb 	beq.w	15a9c <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   15726:	4ba4      	ldr	r3, [pc, #656]	; (159b8 <event_connection_prepare+0x888>)
   15728:	2200      	movs	r2, #0
   1572a:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   1572c:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   15730:	429c      	cmp	r4, r3
   15732:	f000 81b9 	beq.w	15aa8 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   15736:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   1573a:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   1573c:	429a      	cmp	r2, r3
   1573e:	f000 81b7 	beq.w	15ab0 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   15742:	4b9d      	ldr	r3, [pc, #628]	; (159b8 <event_connection_prepare+0x888>)
   15744:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15748:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1574c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1574e:	429a      	cmp	r2, r3
   15750:	f0c0 81c7 	bcc.w	15ae2 <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   15754:	4b98      	ldr	r3, [pc, #608]	; (159b8 <event_connection_prepare+0x888>)
   15756:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1575a:	1ad3      	subs	r3, r2, r3
   1575c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1575e:	2b01      	cmp	r3, #1
   15760:	f240 81c9 	bls.w	15af6 <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15764:	4b94      	ldr	r3, [pc, #592]	; (159b8 <event_connection_prepare+0x888>)
   15766:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1576a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1576e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   15772:	2b00      	cmp	r3, #0
   15774:	f000 81c1 	beq.w	15afa <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   15778:	8c22      	ldrh	r2, [r4, #32]
   1577a:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1577c:	2208      	movs	r2, #8
   1577e:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   15780:	2200      	movs	r2, #0
   15782:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   15784:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15788:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   1578a:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1578e:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   15790:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15794:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   15796:	f7fe fe69 	bl	1446c <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1579a:	6823      	ldr	r3, [r4, #0]
   1579c:	2b00      	cmp	r3, #0
   1579e:	f2c0 81b2 	blt.w	15b06 <event_connection_prepare+0x9d6>
   157a2:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   157a4:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   157a6:	fb18 f303 	smulbb	r3, r8, r3
   157aa:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   157ac:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   157b0:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   157b4:	fb1a f00b 	smulbb	r0, sl, fp
   157b8:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   157ba:	4283      	cmp	r3, r0
   157bc:	f080 81b1 	bcs.w	15b22 <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   157c0:	1ac3      	subs	r3, r0, r3
   157c2:	17d9      	asrs	r1, r3, #31
   157c4:	487d      	ldr	r0, [pc, #500]	; (159bc <event_connection_prepare+0x88c>)
   157c6:	f240 1223 	movw	r2, #291	; 0x123
   157ca:	fb02 f203 	mul.w	r2, r2, r3
   157ce:	fb00 2201 	mla	r2, r0, r1, r2
   157d2:	fba3 0100 	umull	r0, r1, r3, r0
   157d6:	4411      	add	r1, r2
   157d8:	a375      	add	r3, pc, #468	; (adr r3, 159b0 <event_connection_prepare+0x880>)
   157da:	e9d3 2300 	ldrd	r2, r3, [r3]
   157de:	f7eb fc8d 	bl	10fc <__aeabi_uldivmod>
   157e2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   157e6:	eb00 0309 	add.w	r3, r0, r9
   157ea:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   157ec:	ebab 0308 	sub.w	r3, fp, r8
   157f0:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   157f2:	fa12 f383 	uxtah	r3, r2, r3
   157f6:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   157f8:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   157fa:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   157fc:	429a      	cmp	r2, r3
   157fe:	bf38      	it	cc
   15800:	461a      	movcc	r2, r3
   15802:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   15804:	f240 49e2 	movw	r9, #1250	; 0x4e2
   15808:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   1580c:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15810:	2b00      	cmp	r3, #0
   15812:	f2c0 819d 	blt.w	15b50 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   15816:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   1581a:	a365      	add	r3, pc, #404	; (adr r3, 159b0 <event_connection_prepare+0x880>)
   1581c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15820:	4967      	ldr	r1, [pc, #412]	; (159c0 <event_connection_prepare+0x890>)
   15822:	fba0 0101 	umull	r0, r1, r0, r1
   15826:	f7eb fc69 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   1582a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   1582e:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   15832:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   15834:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   15838:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   1583c:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   1583e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15842:	f242 7110 	movw	r1, #10000	; 0x2710
   15846:	fb01 9303 	mla	r3, r1, r3, r9
   1584a:	3b01      	subs	r3, #1
   1584c:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   15850:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   15852:	4b5c      	ldr	r3, [pc, #368]	; (159c4 <event_connection_prepare+0x894>)
   15854:	444b      	add	r3, r9
   15856:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   1585a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1585e:	4b5a      	ldr	r3, [pc, #360]	; (159c8 <event_connection_prepare+0x898>)
   15860:	444b      	add	r3, r9
   15862:	fbb3 f9f9 	udiv	r9, r3, r9
   15866:	fa1f f989 	uxth.w	r9, r9
   1586a:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1586e:	1d93      	adds	r3, r2, #6
   15870:	4599      	cmp	r9, r3
   15872:	dd07      	ble.n	15884 <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   15874:	eba9 0902 	sub.w	r9, r9, r2
   15878:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1587c:	f1a9 0906 	sub.w	r9, r9, #6
   15880:	fa1f f989 	uxth.w	r9, r9
   15884:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   15888:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1588c:	f013 0f04 	tst.w	r3, #4
   15890:	d102      	bne.n	15898 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   15892:	2300      	movs	r3, #0
   15894:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   15898:	2101      	movs	r1, #1
   1589a:	2000      	movs	r0, #0
   1589c:	f003 fe2d 	bl	194fa <mayfly_is_enabled>
   158a0:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   158a2:	2200      	movs	r2, #0
   158a4:	2101      	movs	r1, #1
   158a6:	4610      	mov	r0, r2
   158a8:	f7f9 fc1a 	bl	f0e0 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   158ac:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   158ae:	3207      	adds	r2, #7
		ticker_status =
   158b0:	f641 13e3 	movw	r3, #6627	; 0x19e3
   158b4:	9300      	str	r3, [sp, #0]
   158b6:	4b45      	ldr	r3, [pc, #276]	; (159cc <event_connection_prepare+0x89c>)
   158b8:	b2d2      	uxtb	r2, r2
   158ba:	2100      	movs	r1, #0
   158bc:	4608      	mov	r0, r1
   158be:	f7fb fafb 	bl	10eb8 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   158c2:	b110      	cbz	r0, 158ca <event_connection_prepare+0x79a>
   158c4:	2802      	cmp	r0, #2
   158c6:	f040 819a 	bne.w	15bfe <event_connection_prepare+0xace>
				     conn->handle,
   158ca:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   158ce:	f10a 0a07 	add.w	sl, sl, #7
   158d2:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   158d6:	4b3a      	ldr	r3, [pc, #232]	; (159c0 <event_connection_prepare+0x890>)
   158d8:	fba8 2303 	umull	r2, r3, r8, r3
   158dc:	4617      	mov	r7, r2
   158de:	4698      	mov	r8, r3
   158e0:	a333      	add	r3, pc, #204	; (adr r3, 159b0 <event_connection_prepare+0x880>)
   158e2:	e9d3 2300 	ldrd	r2, r3, [r3]
   158e6:	4638      	mov	r0, r7
   158e8:	4641      	mov	r1, r8
   158ea:	f7eb fc07 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   158ee:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   158f2:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   158f4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   158f8:	2100      	movs	r1, #0
   158fa:	4a35      	ldr	r2, [pc, #212]	; (159d0 <event_connection_prepare+0x8a0>)
   158fc:	2307      	movs	r3, #7
   158fe:	fb03 f300 	mul.w	r3, r3, r0
   15902:	fb02 3301 	mla	r3, r2, r1, r3
   15906:	fba0 0102 	umull	r0, r1, r0, r2
   1590a:	4419      	add	r1, r3
   1590c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   15910:	2300      	movs	r3, #0
   15912:	1a3f      	subs	r7, r7, r0
   15914:	eb68 0801 	sbc.w	r8, r8, r1
   15918:	4638      	mov	r0, r7
   1591a:	4641      	mov	r1, r8
   1591c:	f7eb fbee 	bl	10fc <__aeabi_uldivmod>
   15920:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   15922:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15924:	990c      	ldr	r1, [sp, #48]	; 0x30
   15926:	440b      	add	r3, r1
   15928:	b29b      	uxth	r3, r3
   1592a:	f994 101d 	ldrsb.w	r1, [r4, #29]
   1592e:	2900      	cmp	r1, #0
   15930:	f2c0 816b 	blt.w	15c0a <event_connection_prepare+0xada>
   15934:	4927      	ldr	r1, [pc, #156]	; (159d4 <event_connection_prepare+0x8a4>)
		ticker_status =
   15936:	f641 10f3 	movw	r0, #6643	; 0x19f3
   1593a:	9008      	str	r0, [sp, #32]
   1593c:	4823      	ldr	r0, [pc, #140]	; (159cc <event_connection_prepare+0x89c>)
   1593e:	9007      	str	r0, [sp, #28]
   15940:	9406      	str	r4, [sp, #24]
   15942:	9105      	str	r1, [sp, #20]
   15944:	9304      	str	r3, [sp, #16]
   15946:	2000      	movs	r0, #0
   15948:	9003      	str	r0, [sp, #12]
   1594a:	9202      	str	r2, [sp, #8]
   1594c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1594e:	9301      	str	r3, [sp, #4]
   15950:	f8cd b000 	str.w	fp, [sp]
   15954:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15956:	4652      	mov	r2, sl
   15958:	4601      	mov	r1, r0
   1595a:	f7fb fa11 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1595e:	b110      	cbz	r0, 15966 <event_connection_prepare+0x836>
   15960:	2802      	cmp	r0, #2
   15962:	f040 8154 	bne.w	15c0e <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   15966:	f1b9 0f00 	cmp.w	r9, #0
   1596a:	f040 8156 	bne.w	15c1a <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   1596e:	f1b9 0f00 	cmp.w	r9, #0
   15972:	f040 821e 	bne.w	15db2 <event_connection_prepare+0xc82>
   15976:	f000 be59 	b.w	1662c <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   1597a:	4b0f      	ldr	r3, [pc, #60]	; (159b8 <event_connection_prepare+0x888>)
   1597c:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   15980:	e6b0      	b.n	156e4 <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15982:	4815      	ldr	r0, [pc, #84]	; (159d8 <event_connection_prepare+0x8a8>)
   15984:	f7f9 fd2b 	bl	f3de <mem_acquire>
		if (!node_tx) {
   15988:	4680      	mov	r8, r0
   1598a:	2800      	cmp	r0, #0
   1598c:	f000 814d 	beq.w	15c2a <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   15990:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   15992:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15996:	f002 0203 	and.w	r2, r2, #3
   1599a:	2a01      	cmp	r2, #1
   1599c:	d01e      	beq.n	159dc <event_connection_prepare+0x8ac>
   1599e:	2a02      	cmp	r2, #2
   159a0:	d066      	beq.n	15a70 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   159a2:	4040      	eors	r0, r0
   159a4:	f380 8811 	msr	BASEPRI, r0
   159a8:	f04f 0004 	mov.w	r0, #4
   159ac:	df02      	svc	2
   159ae:	bf00      	nop
   159b0:	1afd498d 	.word	0x1afd498d
   159b4:	00000007 	.word	0x00000007
   159b8:	20000ff4 	.word	0x20000ff4
   159bc:	09ce5400 	.word	0x09ce5400
   159c0:	3b9aca00 	.word	0x3b9aca00
   159c4:	026259ff 	.word	0x026259ff
   159c8:	01c9c37f 	.word	0x01c9c37f
   159cc:	00011ad5 	.word	0x00011ad5
   159d0:	1afd498d 	.word	0x1afd498d
   159d4:	00016695 	.word	0x00016695
   159d8:	2000114c 	.word	0x2000114c
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   159dc:	49bc      	ldr	r1, [pc, #752]	; (15cd0 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   159de:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   159e2:	f36f 0201 	bfc	r2, #0, #2
   159e6:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   159ea:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   159ec:	442a      	add	r2, r5
   159ee:	b292      	uxth	r2, r2
   159f0:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   159f2:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   159f6:	f898 2004 	ldrb.w	r2, [r8, #4]
   159fa:	f042 0203 	orr.w	r2, r2, #3
   159fe:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15a02:	220c      	movs	r2, #12
   15a04:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   15a06:	2200      	movs	r2, #0
   15a08:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   15a0a:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   15a0e:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   15a10:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   15a14:	48af      	ldr	r0, [pc, #700]	; (15cd4 <event_connection_prepare+0xba4>)
   15a16:	fba0 0202 	umull	r0, r2, r0, r2
   15a1a:	0a92      	lsrs	r2, r2, #10
   15a1c:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   15a20:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   15a24:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   15a28:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15a2c:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   15a30:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15a34:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   15a38:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   15a3c:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   15a40:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15a44:	6820      	ldr	r0, [r4, #0]
   15a46:	2800      	cmp	r0, #0
   15a48:	db14      	blt.n	15a74 <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   15a4a:	3305      	adds	r3, #5
   15a4c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15a50:	4ba1      	ldr	r3, [pc, #644]	; (15cd8 <event_connection_prepare+0xba8>)
   15a52:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   15a54:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15a56:	2201      	movs	r2, #1
   15a58:	4611      	mov	r1, r2
   15a5a:	2000      	movs	r0, #0
   15a5c:	f7f9 fb7e 	bl	f15c <mayfly_enqueue>
		LL_ASSERT(!retval);
   15a60:	b9b0      	cbnz	r0, 15a90 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   15a62:	4641      	mov	r1, r8
   15a64:	4620      	mov	r0, r4
   15a66:	f7fb ff4d 	bl	11904 <ctrl_tx_enqueue>
	return 1;
   15a6a:	f04f 0901 	mov.w	r9, #1
   15a6e:	e77e      	b.n	1596e <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   15a70:	499a      	ldr	r1, [pc, #616]	; (15cdc <event_connection_prepare+0xbac>)
   15a72:	e7b4      	b.n	159de <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   15a74:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15a76:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15a78:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15a7c:	4297      	cmp	r7, r2
   15a7e:	bf2c      	ite	cs
   15a80:	ebce 0207 	rsbcs	r2, lr, r7
   15a84:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   15a88:	4432      	add	r2, r6
   15a8a:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   15a8e:	e7dc      	b.n	15a4a <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   15a90:	4040      	eors	r0, r0
   15a92:	f380 8811 	msr	BASEPRI, r0
   15a96:	f04f 0004 	mov.w	r0, #4
   15a9a:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15a9c:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   15aa0:	2300      	movs	r3, #0
   15aa2:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15aa6:	e63e      	b.n	15726 <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   15aa8:	4b8d      	ldr	r3, [pc, #564]	; (15ce0 <event_connection_prepare+0xbb0>)
   15aaa:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15aae:	e642      	b.n	15736 <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15ab0:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   15ab4:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   15ab6:	4291      	cmp	r1, r2
   15ab8:	f47f ae43 	bne.w	15742 <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   15abc:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   15ac0:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15ac4:	fb01 f103 	mul.w	r1, r1, r3
   15ac8:	f242 7310 	movw	r3, #10000	; 0x2710
   15acc:	fb03 1302 	mla	r3, r3, r2, r1
   15ad0:	3b01      	subs	r3, #1
   15ad2:	fb93 f3f1 	sdiv	r3, r3, r1
   15ad6:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   15ad8:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15ada:	4293      	cmp	r3, r2
   15adc:	f47f ae31 	bne.w	15742 <event_connection_prepare+0x612>
   15ae0:	e65b      	b.n	1579a <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   15ae2:	497f      	ldr	r1, [pc, #508]	; (15ce0 <event_connection_prepare+0xbb0>)
   15ae4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15ae8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15aec:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15aee:	fa52 f383 	uxtab	r3, r2, r3
   15af2:	b2db      	uxtb	r3, r3
   15af4:	e633      	b.n	1575e <event_connection_prepare+0x62e>
		return 0;
   15af6:	2300      	movs	r3, #0
   15af8:	e63b      	b.n	15772 <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   15afa:	4040      	eors	r0, r0
   15afc:	f380 8811 	msr	BASEPRI, r0
   15b00:	f04f 0004 	mov.w	r0, #4
   15b04:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   15b06:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   15b08:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   15b0a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   15b0e:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   15b10:	4291      	cmp	r1, r2
   15b12:	bf2c      	ite	cs
   15b14:	ebc3 0301 	rsbcs	r3, r3, r1
   15b18:	ebc3 0302 	rsbcc	r3, r3, r2
   15b1c:	eb06 0903 	add.w	r9, r6, r3
   15b20:	e640      	b.n	157a4 <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   15b22:	1a1b      	subs	r3, r3, r0
   15b24:	17d9      	asrs	r1, r3, #31
   15b26:	486f      	ldr	r0, [pc, #444]	; (15ce4 <event_connection_prepare+0xbb4>)
   15b28:	f240 1223 	movw	r2, #291	; 0x123
   15b2c:	fb02 f203 	mul.w	r2, r2, r3
   15b30:	fb00 2201 	mla	r2, r0, r1, r2
   15b34:	fba3 0100 	umull	r0, r1, r3, r0
   15b38:	4411      	add	r1, r2
   15b3a:	a363      	add	r3, pc, #396	; (adr r3, 15cc8 <event_connection_prepare+0xb98>)
   15b3c:	e9d3 2300 	ldrd	r2, r3, [r3]
   15b40:	f7eb fadc 	bl	10fc <__aeabi_uldivmod>
   15b44:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15b48:	eba9 0300 	sub.w	r3, r9, r0
   15b4c:	930b      	str	r3, [sp, #44]	; 0x2c
   15b4e:	e64d      	b.n	157ec <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15b50:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   15b52:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   15b54:	fb02 3218 	mls	r2, r2, r8, r3
   15b58:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   15b5a:	4b61      	ldr	r3, [pc, #388]	; (15ce0 <event_connection_prepare+0xbb0>)
   15b5c:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15b60:	4861      	ldr	r0, [pc, #388]	; (15ce8 <event_connection_prepare+0xbb8>)
   15b62:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   15b66:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   15b6a:	f3c1 0182 	ubfx	r1, r1, #2, #3
   15b6e:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   15b72:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   15b74:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15b78:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   15b7c:	f203 233f 	addw	r3, r3, #575	; 0x23f
   15b80:	495a      	ldr	r1, [pc, #360]	; (15cec <event_connection_prepare+0xbbc>)
   15b82:	fba1 1303 	umull	r1, r3, r1, r3
   15b86:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   15b8a:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   15b8e:	ea4f 0359 	mov.w	r3, r9, lsr #1
   15b92:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   15b94:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   15b96:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   15b9a:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15b9e:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   15ba2:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   15ba4:	2100      	movs	r1, #0
   15ba6:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   15ba8:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   15bac:	4402      	add	r2, r0
   15bae:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   15bb0:	4293      	cmp	r3, r2
   15bb2:	d200      	bcs.n	15bb6 <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   15bb4:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   15bb6:	f8df b140 	ldr.w	fp, [pc, #320]	; 15cf8 <event_connection_prepare+0xbc8>
   15bba:	a343      	add	r3, pc, #268	; (adr r3, 15cc8 <event_connection_prepare+0xb98>)
   15bbc:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bc0:	fba0 010b 	umull	r0, r1, r0, fp
   15bc4:	f7eb fa9a 	bl	10fc <__aeabi_uldivmod>
   15bc8:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15bcc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15bce:	1a1b      	subs	r3, r3, r0
   15bd0:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   15bd2:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   15bd6:	4a3f      	ldr	r2, [pc, #252]	; (15cd4 <event_connection_prepare+0xba4>)
   15bd8:	fba2 2303 	umull	r2, r3, r2, r3
   15bdc:	0a9b      	lsrs	r3, r3, #10
   15bde:	f240 40e2 	movw	r0, #1250	; 0x4e2
   15be2:	fb00 f003 	mul.w	r0, r0, r3
   15be6:	a338      	add	r3, pc, #224	; (adr r3, 15cc8 <event_connection_prepare+0xb98>)
   15be8:	e9d3 2300 	ldrd	r2, r3, [r3]
   15bec:	fba0 010b 	umull	r0, r1, r0, fp
   15bf0:	f7eb fa84 	bl	10fc <__aeabi_uldivmod>
			ticks_win_offset =
   15bf4:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   15bf8:	eba9 0808 	sub.w	r8, r9, r8
   15bfc:	e61a      	b.n	15834 <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15bfe:	4040      	eors	r0, r0
   15c00:	f380 8811 	msr	BASEPRI, r0
   15c04:	f04f 0004 	mov.w	r0, #4
   15c08:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   15c0a:	4939      	ldr	r1, [pc, #228]	; (15cf0 <event_connection_prepare+0xbc0>)
   15c0c:	e693      	b.n	15936 <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   15c0e:	4040      	eors	r0, r0
   15c10:	f380 8811 	msr	BASEPRI, r0
   15c14:	f04f 0004 	mov.w	r0, #4
   15c18:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15c1a:	2201      	movs	r2, #1
   15c1c:	4611      	mov	r1, r2
   15c1e:	2000      	movs	r0, #0
   15c20:	f7f9 fa5e 	bl	f0e0 <mayfly_enable>
		return 0;
   15c24:	f04f 0900 	mov.w	r9, #0
   15c28:	e6a1      	b.n	1596e <event_connection_prepare+0x83e>
			return 1;
   15c2a:	f04f 0901 	mov.w	r9, #1
   15c2e:	e69e      	b.n	1596e <event_connection_prepare+0x83e>
	return 1;
   15c30:	f04f 0901 	mov.w	r9, #1
   15c34:	e69b      	b.n	1596e <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   15c36:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15c3a:	b9f3      	cbnz	r3, 15c7a <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15c3c:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15c40:	1aeb      	subs	r3, r5, r3
   15c42:	b29b      	uxth	r3, r3
   15c44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15c48:	f280 80b3 	bge.w	15db2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15c4c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15c50:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   15c54:	f104 0817 	add.w	r8, r4, #23
   15c58:	2205      	movs	r2, #5
   15c5a:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15c5e:	4640      	mov	r0, r8
   15c60:	f7ea fb2e 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   15c64:	2105      	movs	r1, #5
   15c66:	4640      	mov	r0, r8
   15c68:	f7f9 fc3d 	bl	f4e6 <util_ones_count_get>
		conn->data_chan_count =
   15c6c:	7f63      	ldrb	r3, [r4, #29]
   15c6e:	f360 0305 	bfi	r3, r0, #0, #6
   15c72:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   15c74:	2301      	movs	r3, #1
   15c76:	7723      	strb	r3, [r4, #28]
   15c78:	e09b      	b.n	15db2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15c7a:	481e      	ldr	r0, [pc, #120]	; (15cf4 <event_connection_prepare+0xbc4>)
   15c7c:	f7f9 fbaf 	bl	f3de <mem_acquire>
		if (node_tx) {
   15c80:	4680      	mov	r8, r0
   15c82:	2800      	cmp	r0, #0
   15c84:	f000 8095 	beq.w	15db2 <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15c88:	2300      	movs	r3, #0
   15c8a:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15c8e:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15c90:	442b      	add	r3, r5
   15c92:	b29b      	uxth	r3, r3
   15c94:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   15c96:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15c9a:	7903      	ldrb	r3, [r0, #4]
   15c9c:	f043 0303 	orr.w	r3, r3, #3
   15ca0:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15ca2:	2308      	movs	r3, #8
   15ca4:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15ca6:	2301      	movs	r3, #1
   15ca8:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15caa:	2205      	movs	r2, #5
   15cac:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15cb0:	3008      	adds	r0, #8
   15cb2:	f7ea fb05 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   15cb6:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15cba:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   15cbe:	4641      	mov	r1, r8
   15cc0:	4620      	mov	r0, r4
   15cc2:	f7fb fe1f 	bl	11904 <ctrl_tx_enqueue>
   15cc6:	e074      	b.n	15db2 <event_connection_prepare+0xc82>
   15cc8:	1afd498d 	.word	0x1afd498d
   15ccc:	00000007 	.word	0x00000007
   15cd0:	000132bd 	.word	0x000132bd
   15cd4:	d1b71759 	.word	0xd1b71759
   15cd8:	2000bdb0 	.word	0x2000bdb0
   15cdc:	00012ff1 	.word	0x00012ff1
   15ce0:	20000ff4 	.word	0x20000ff4
   15ce4:	09ce5400 	.word	0x09ce5400
   15ce8:	00031e00 	.word	0x00031e00
   15cec:	431bde83 	.word	0x431bde83
   15cf0:	0001668d 	.word	0x0001668d
   15cf4:	2000114c 	.word	0x2000114c
   15cf8:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15cfc:	48d9      	ldr	r0, [pc, #868]	; (16064 <event_connection_prepare+0xf34>)
   15cfe:	f7f9 fb6e 	bl	f3de <mem_acquire>
	if (node_tx) {
   15d02:	4680      	mov	r8, r0
   15d04:	2800      	cmp	r0, #0
   15d06:	d054      	beq.n	15db2 <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   15d08:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   15d0c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15d10:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   15d14:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15d18:	2b00      	cmp	r3, #0
   15d1a:	f2c0 808c 	blt.w	15e36 <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15d1e:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   15d22:	4653      	mov	r3, sl
   15d24:	2200      	movs	r2, #0
   15d26:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15d2a:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15d2e:	f7f9 fc63 	bl	f5f8 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   15d32:	2210      	movs	r2, #16
   15d34:	4651      	mov	r1, sl
   15d36:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15d3a:	f7ea fac1 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15d3e:	2208      	movs	r2, #8
   15d40:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15d44:	f204 1033 	addw	r0, r4, #307	; 0x133
   15d48:	f7ea faba 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15d4c:	2300      	movs	r3, #0
   15d4e:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15d52:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15d56:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15d5a:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15d5e:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15d62:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15d66:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15d6a:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15d6e:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15d72:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15d76:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15d7a:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15d7e:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15d82:	f363 0200 	bfi	r2, r3, #0, #1
   15d86:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15d8a:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15d8e:	f043 0301 	orr.w	r3, r3, #1
   15d92:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   15d96:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15d9a:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15d9e:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   15da2:	4649      	mov	r1, r9
   15da4:	4620      	mov	r0, r4
   15da6:	f7fb fe9d 	bl	11ae4 <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15daa:	4641      	mov	r1, r8
   15dac:	4620      	mov	r0, r4
   15dae:	f7fb fda9 	bl	11904 <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   15db2:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   15db6:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15dba:	429a      	cmp	r2, r3
   15dbc:	d021      	beq.n	15e02 <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15dbe:	2305      	movs	r3, #5
   15dc0:	2200      	movs	r2, #0
   15dc2:	4611      	mov	r1, r2
   15dc4:	4610      	mov	r0, r2
   15dc6:	f7fc fa77 	bl	122b8 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15dca:	48a6      	ldr	r0, [pc, #664]	; (16064 <event_connection_prepare+0xf34>)
   15dcc:	f7f9 fb07 	bl	f3de <mem_acquire>
		if (node_tx) {
   15dd0:	4601      	mov	r1, r0
   15dd2:	b1b0      	cbz	r0, 15e02 <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   15dd4:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   15dd8:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15ddc:	7903      	ldrb	r3, [r0, #4]
   15dde:	f043 0303 	orr.w	r3, r3, #3
   15de2:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   15de4:	2302      	movs	r3, #2
   15de6:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15de8:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   15dea:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   15dee:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   15df0:	4620      	mov	r0, r4
   15df2:	f7fb fd87 	bl	11904 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   15df6:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   15df8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   15dfc:	2b01      	cmp	r3, #1
   15dfe:	f240 82a6 	bls.w	1634e <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   15e02:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   15e06:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15e0a:	429a      	cmp	r2, r3
   15e0c:	f000 83f9 	beq.w	16602 <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   15e10:	2305      	movs	r3, #5
   15e12:	2200      	movs	r2, #0
   15e14:	4611      	mov	r1, r2
   15e16:	4610      	mov	r0, r2
   15e18:	f7fc fa4e 	bl	122b8 <event_stop>
	switch (conn->llcp_length.state) {
   15e1c:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15e20:	f003 0303 	and.w	r3, r3, #3
   15e24:	2b03      	cmp	r3, #3
   15e26:	f200 8427 	bhi.w	16678 <event_connection_prepare+0x1548>
   15e2a:	e8df f013 	tbh	[pc, r3, lsl #1]
   15e2e:	0299      	.short	0x0299
   15e30:	03ea03ea 	.word	0x03ea03ea
   15e34:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   15e36:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15e3a:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15e3e:	2b08      	cmp	r3, #8
   15e40:	d079      	beq.n	15f36 <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15e42:	7903      	ldrb	r3, [r0, #4]
   15e44:	f043 0303 	orr.w	r3, r3, #3
   15e48:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15e4a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15e4e:	b333      	cbz	r3, 15e9e <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15e50:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   15e54:	f013 0f20 	tst.w	r3, #32
   15e58:	d00e      	beq.n	15e78 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15e5a:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15e5e:	f013 0f04 	tst.w	r3, #4
   15e62:	d009      	beq.n	15e78 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   15e64:	2311      	movs	r3, #17
   15e66:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15e68:	2303      	movs	r3, #3
   15e6a:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15e6c:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15e70:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   15e72:	2302      	movs	r3, #2
   15e74:	7143      	strb	r3, [r0, #5]
   15e76:	e009      	b.n	15e8c <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15e78:	230d      	movs	r3, #13
   15e7a:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15e7e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15e82:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   15e86:	2301      	movs	r3, #1
   15e88:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15e8c:	f898 3005 	ldrb.w	r3, [r8, #5]
   15e90:	3301      	adds	r3, #1
   15e92:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   15e96:	2300      	movs	r3, #0
   15e98:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15e9c:	e785      	b.n	15daa <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15e9e:	4620      	mov	r0, r4
   15ea0:	f7fd fa38 	bl	13314 <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15ea4:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15ea8:	464b      	mov	r3, r9
   15eaa:	2200      	movs	r2, #0
   15eac:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15eb0:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15eb4:	f7f9 fba0 	bl	f5f8 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   15eb8:	2210      	movs	r2, #16
   15eba:	4649      	mov	r1, r9
   15ebc:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15ec0:	f7ea f9fe 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15ec4:	2208      	movs	r2, #8
   15ec6:	f504 7189 	add.w	r1, r4, #274	; 0x112
   15eca:	f204 1033 	addw	r0, r4, #307	; 0x133
   15ece:	f7ea f9f7 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   15ed2:	2300      	movs	r3, #0
   15ed4:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   15ed8:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   15edc:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15ee0:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15ee4:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   15ee8:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   15eec:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15ef0:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   15ef4:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   15ef8:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   15efc:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15f00:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   15f04:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   15f08:	f042 0201 	orr.w	r2, r2, #1
   15f0c:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   15f10:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   15f14:	f363 0200 	bfi	r2, r3, #0, #1
   15f18:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15f1c:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15f20:	f043 0310 	orr.w	r3, r3, #16
   15f24:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15f28:	2301      	movs	r3, #1
   15f2a:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15f2e:	2305      	movs	r3, #5
   15f30:	f888 3007 	strb.w	r3, [r8, #7]
   15f34:	e739      	b.n	15daa <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   15f36:	f8df 9134 	ldr.w	r9, [pc, #308]	; 1606c <event_connection_prepare+0xf3c>
   15f3a:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15f3e:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   15f42:	f043 0320 	orr.w	r3, r3, #32
   15f46:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15f4a:	2100      	movs	r1, #0
   15f4c:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15f50:	f7fb fdc8 	bl	11ae4 <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   15f54:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15f58:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15f5c:	f36f 0282 	bfc	r2, #2, #1
   15f60:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   15f64:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15f68:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15f6c:	f36f 02c3 	bfc	r2, #3, #1
   15f70:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   15f74:	e719      	b.n	15daa <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15f76:	483b      	ldr	r0, [pc, #236]	; (16064 <event_connection_prepare+0xf34>)
   15f78:	f7f9 fa31 	bl	f3de <mem_acquire>
	if (node_tx) {
   15f7c:	4680      	mov	r8, r0
   15f7e:	2800      	cmp	r0, #0
   15f80:	f43f af17 	beq.w	15db2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15f84:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15f88:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15f8c:	4b36      	ldr	r3, [pc, #216]	; (16068 <event_connection_prepare+0xf38>)
   15f8e:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15f92:	7903      	ldrb	r3, [r0, #4]
   15f94:	f043 0303 	orr.w	r3, r3, #3
   15f98:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15f9a:	2309      	movs	r3, #9
   15f9c:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15f9e:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15fa2:	2b00      	cmp	r3, #0
   15fa4:	db1e      	blt.n	15fe4 <event_connection_prepare+0xeb4>
   15fa6:	2308      	movs	r3, #8
   15fa8:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15fac:	2208      	movs	r2, #8
   15fae:	2100      	movs	r1, #0
   15fb0:	eb08 0002 	add.w	r0, r8, r2
   15fb4:	f014 fcdc 	bl	2a970 <memset>
			conn->llcp_features & 0xFF;
   15fb8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   15fbc:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   15fc0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   15fc4:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   15fc6:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   15fca:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   15fce:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   15fd2:	4641      	mov	r1, r8
   15fd4:	4620      	mov	r0, r4
   15fd6:	f7fb fc95 	bl	11904 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15fda:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   15fde:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   15fe2:	e6e6      	b.n	15db2 <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   15fe4:	230e      	movs	r3, #14
   15fe6:	e7df      	b.n	15fa8 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   15fe8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15fec:	f013 0f01 	tst.w	r3, #1
   15ff0:	d03e      	beq.n	16070 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   15ff2:	f013 0f02 	tst.w	r3, #2
   15ff6:	d076      	beq.n	160e6 <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   15ff8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15ffc:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   16000:	4b1a      	ldr	r3, [pc, #104]	; (1606c <event_connection_prepare+0xf3c>)
   16002:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16006:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1600a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1600c:	429a      	cmp	r2, r3
   1600e:	d358      	bcc.n	160c2 <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   16010:	4b16      	ldr	r3, [pc, #88]	; (1606c <event_connection_prepare+0xf3c>)
   16012:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16016:	1ad3      	subs	r3, r2, r3
   16018:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1601a:	2b01      	cmp	r3, #1
   1601c:	d95b      	bls.n	160d6 <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   1601e:	4b13      	ldr	r3, [pc, #76]	; (1606c <event_connection_prepare+0xf3c>)
   16020:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16024:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16028:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   1602c:	2b00      	cmp	r3, #0
   1602e:	d054      	beq.n	160da <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   16030:	8c22      	ldrh	r2, [r4, #32]
   16032:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   16034:	2201      	movs	r2, #1
   16036:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   16038:	7a1a      	ldrb	r2, [r3, #8]
   1603a:	f042 0203 	orr.w	r2, r2, #3
   1603e:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   16040:	2206      	movs	r2, #6
   16042:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   16044:	220c      	movs	r2, #12
   16046:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   16048:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   1604c:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   1604e:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   16052:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   16056:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   1605a:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   1605e:	f7fe fa05 	bl	1446c <packet_rx_enqueue>
   16062:	e6a6      	b.n	15db2 <event_connection_prepare+0xc82>
   16064:	2000114c 	.word	0x2000114c
   16068:	000141ff 	.word	0x000141ff
   1606c:	20000ff4 	.word	0x20000ff4
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   16070:	48b9      	ldr	r0, [pc, #740]	; (16358 <event_connection_prepare+0x1228>)
   16072:	f7f9 f9b4 	bl	f3de <mem_acquire>
		if (node_tx) {
   16076:	4601      	mov	r1, r0
   16078:	2800      	cmp	r0, #0
   1607a:	f43f ae9a 	beq.w	15db2 <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   1607e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16082:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   16086:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1608a:	f043 0301 	orr.w	r3, r3, #1
   1608e:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16092:	7903      	ldrb	r3, [r0, #4]
   16094:	f043 0303 	orr.w	r3, r3, #3
   16098:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1609a:	2306      	movs	r3, #6
   1609c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1609e:	230c      	movs	r3, #12
   160a0:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   160a2:	2309      	movs	r3, #9
   160a4:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   160a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   160aa:	7243      	strb	r3, [r0, #9]
   160ac:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   160ae:	72c3      	strb	r3, [r0, #11]
   160b0:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   160b2:	4620      	mov	r0, r4
   160b4:	f7fb fc26 	bl	11904 <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   160b8:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   160bc:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   160c0:	e677      	b.n	15db2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   160c2:	49a6      	ldr	r1, [pc, #664]	; (1635c <event_connection_prepare+0x122c>)
   160c4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   160c8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   160cc:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   160ce:	fa52 f383 	uxtab	r3, r2, r3
   160d2:	b2db      	uxtb	r3, r3
   160d4:	e7a1      	b.n	1601a <event_connection_prepare+0xeea>
		return 0;
   160d6:	2300      	movs	r3, #0
   160d8:	e7a8      	b.n	1602c <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   160da:	4040      	eors	r0, r0
   160dc:	f380 8811 	msr	BASEPRI, r0
   160e0:	f04f 0004 	mov.w	r0, #4
   160e4:	df02      	svc	2
		LL_ASSERT(0);
   160e6:	4040      	eors	r0, r0
   160e8:	f380 8811 	msr	BASEPRI, r0
   160ec:	f04f 0004 	mov.w	r0, #4
   160f0:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   160f2:	4899      	ldr	r0, [pc, #612]	; (16358 <event_connection_prepare+0x1228>)
   160f4:	f7f9 f973 	bl	f3de <mem_acquire>
	if (node_tx) {
   160f8:	4601      	mov	r1, r0
   160fa:	2800      	cmp	r0, #0
   160fc:	f43f ae59 	beq.w	15db2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   16100:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16104:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   16108:	7903      	ldrb	r3, [r0, #4]
   1610a:	f043 0303 	orr.w	r3, r3, #3
   1610e:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   16110:	2301      	movs	r3, #1
   16112:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   16114:	2312      	movs	r3, #18
   16116:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   16118:	4620      	mov	r0, r4
   1611a:	f7fb fbf3 	bl	11904 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   1611e:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   16122:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16126:	e644      	b.n	15db2 <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   16128:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   1612c:	f012 0f01 	tst.w	r2, #1
   16130:	d16b      	bne.n	1620a <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   16132:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16136:	1aeb      	subs	r3, r5, r3
   16138:	b29b      	uxth	r3, r3
   1613a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1613e:	f6bf ae38 	bge.w	15db2 <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   16142:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16146:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   1614a:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   1614e:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   16152:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16156:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   1615a:	f012 0f1c 	tst.w	r2, #28
   1615e:	d009      	beq.n	16174 <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   16160:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16164:	f3c3 0382 	ubfx	r3, r3, #2, #3
   16168:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   1616c:	f363 0ec5 	bfi	lr, r3, #3, #3
   16170:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   16174:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   16178:	d008      	beq.n	1618c <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   1617a:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1617e:	095b      	lsrs	r3, r3, #5
   16180:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   16184:	f363 0e02 	bfi	lr, r3, #0, #3
   16188:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   1618c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   16190:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   16194:	f36e 13c7 	bfi	r3, lr, #7, #1
   16198:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   1619c:	f012 0f02 	tst.w	r2, #2
   161a0:	d105      	bne.n	161ae <event_connection_prepare+0x107e>
   161a2:	b2db      	uxtb	r3, r3
   161a4:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   161a8:	4299      	cmp	r1, r3
   161aa:	f000 80b0 	beq.w	1630e <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   161ae:	4b6b      	ldr	r3, [pc, #428]	; (1635c <event_connection_prepare+0x122c>)
   161b0:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   161b4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161b8:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   161ba:	429a      	cmp	r2, r3
   161bc:	f0c0 80af 	bcc.w	1631e <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   161c0:	4b66      	ldr	r3, [pc, #408]	; (1635c <event_connection_prepare+0x122c>)
   161c2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   161c6:	1ad3      	subs	r3, r2, r3
   161c8:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   161ca:	2b01      	cmp	r3, #1
   161cc:	f240 80b1 	bls.w	16332 <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   161d0:	4b62      	ldr	r3, [pc, #392]	; (1635c <event_connection_prepare+0x122c>)
   161d2:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   161d6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   161da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   161de:	2b00      	cmp	r3, #0
   161e0:	f000 80a9 	beq.w	16336 <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   161e4:	8c22      	ldrh	r2, [r4, #32]
   161e6:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   161e8:	220c      	movs	r2, #12
   161ea:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   161ec:	2200      	movs	r2, #0
   161ee:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   161f0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   161f4:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   161f8:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   161fa:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   161fe:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16202:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   16204:	f7fe f932 	bl	1446c <packet_rx_enqueue>
   16208:	e5d3      	b.n	15db2 <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1620a:	4853      	ldr	r0, [pc, #332]	; (16358 <event_connection_prepare+0x1228>)
   1620c:	f7f9 f8e7 	bl	f3de <mem_acquire>
		if (node_tx) {
   16210:	4680      	mov	r8, r0
   16212:	2800      	cmp	r0, #0
   16214:	f43f adcd 	beq.w	15db2 <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   16218:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1621c:	f36f 0300 	bfc	r3, #0, #1
   16220:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   16224:	b2db      	uxtb	r3, r3
   16226:	f3c3 0282 	ubfx	r2, r3, #2, #3
   1622a:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   1622e:	d147      	bne.n	162c0 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   16230:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   16234:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   16238:	2300      	movs	r3, #0
   1623a:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   1623e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   16242:	f013 0f02 	tst.w	r3, #2
   16246:	d041      	beq.n	162cc <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   16248:	4b44      	ldr	r3, [pc, #272]	; (1635c <event_connection_prepare+0x122c>)
   1624a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1624e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16252:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   16254:	429a      	cmp	r2, r3
   16256:	d321      	bcc.n	1629c <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   16258:	4b40      	ldr	r3, [pc, #256]	; (1635c <event_connection_prepare+0x122c>)
   1625a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1625e:	1ad3      	subs	r3, r2, r3
   16260:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16262:	2b01      	cmp	r3, #1
   16264:	d924      	bls.n	162b0 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   16266:	4b3d      	ldr	r3, [pc, #244]	; (1635c <event_connection_prepare+0x122c>)
   16268:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1626c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16270:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   16274:	b1f3      	cbz	r3, 162b4 <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   16276:	8c22      	ldrh	r2, [r4, #32]
   16278:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   1627a:	220c      	movs	r2, #12
   1627c:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   1627e:	2200      	movs	r2, #0
   16280:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   16282:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16286:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   1628a:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   1628c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   16290:	f3c2 0202 	ubfx	r2, r2, #0, #3
   16294:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   16296:	f7fe f8e9 	bl	1446c <packet_rx_enqueue>
   1629a:	e017      	b.n	162cc <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   1629c:	492f      	ldr	r1, [pc, #188]	; (1635c <event_connection_prepare+0x122c>)
   1629e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   162a2:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   162a6:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   162a8:	fa52 f383 	uxtab	r3, r2, r3
   162ac:	b2db      	uxtb	r3, r3
   162ae:	e7d8      	b.n	16262 <event_connection_prepare+0x1132>
		return 0;
   162b0:	2300      	movs	r3, #0
   162b2:	e7df      	b.n	16274 <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   162b4:	4040      	eors	r0, r0
   162b6:	f380 8811 	msr	BASEPRI, r0
   162ba:	f04f 0004 	mov.w	r0, #4
   162be:	df02      	svc	2
								 conn->latency +
   162c0:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   162c2:	442b      	add	r3, r5
   162c4:	b29b      	uxth	r3, r3
								 conn->latency +
   162c6:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   162c8:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   162cc:	f898 3004 	ldrb.w	r3, [r8, #4]
   162d0:	f043 0303 	orr.w	r3, r3, #3
   162d4:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   162d8:	2305      	movs	r3, #5
   162da:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   162de:	2318      	movs	r3, #24
   162e0:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   162e4:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   162e8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   162ec:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   162f0:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   162f4:	f3c3 1342 	ubfx	r3, r3, #5, #3
   162f8:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   162fc:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   16300:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   16304:	4641      	mov	r1, r8
   16306:	4620      	mov	r0, r4
   16308:	f7fb fafc 	bl	11904 <ctrl_tx_enqueue>
   1630c:	e551      	b.n	15db2 <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   1630e:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   16312:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   16316:	4298      	cmp	r0, r3
   16318:	f47f af49 	bne.w	161ae <event_connection_prepare+0x107e>
   1631c:	e549      	b.n	15db2 <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   1631e:	490f      	ldr	r1, [pc, #60]	; (1635c <event_connection_prepare+0x122c>)
   16320:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   16324:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16328:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1632a:	fa52 f383 	uxtab	r3, r2, r3
   1632e:	b2db      	uxtb	r3, r3
   16330:	e74b      	b.n	161ca <event_connection_prepare+0x109a>
		return 0;
   16332:	2300      	movs	r3, #0
   16334:	e753      	b.n	161de <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   16336:	4040      	eors	r0, r0
   16338:	f380 8811 	msr	BASEPRI, r0
   1633c:	f04f 0004 	mov.w	r0, #4
   16340:	df02      	svc	2
			LL_ASSERT(0);
   16342:	4040      	eors	r0, r0
   16344:	f380 8811 	msr	BASEPRI, r0
   16348:	f04f 0004 	mov.w	r0, #4
   1634c:	df02      	svc	2
				conn->procedure_expire++;
   1634e:	3301      	adds	r3, #1
   16350:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   16354:	e555      	b.n	15e02 <event_connection_prepare+0xcd2>
   16356:	bf00      	nop
   16358:	2000114c 	.word	0x2000114c
   1635c:	20000ff4 	.word	0x20000ff4
	if (_radio.packet_rx_acquire >=
   16360:	4bbf      	ldr	r3, [pc, #764]	; (16660 <event_connection_prepare+0x1530>)
   16362:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16366:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1636a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1636c:	429a      	cmp	r2, r3
   1636e:	d346      	bcc.n	163fe <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   16370:	4bbb      	ldr	r3, [pc, #748]	; (16660 <event_connection_prepare+0x1530>)
   16372:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16376:	eba2 0808 	sub.w	r8, r2, r8
   1637a:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   1637e:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16382:	4bb7      	ldr	r3, [pc, #732]	; (16660 <event_connection_prepare+0x1530>)
   16384:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   16388:	f7f9 f85d 	bl	f446 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1638c:	4440      	add	r0, r8
   1638e:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16390:	28ff      	cmp	r0, #255	; 0xff
   16392:	d840      	bhi.n	16416 <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16394:	4bb2      	ldr	r3, [pc, #712]	; (16660 <event_connection_prepare+0x1530>)
   16396:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1639a:	4298      	cmp	r0, r3
   1639c:	f040 8131 	bne.w	16602 <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   163a0:	48b0      	ldr	r0, [pc, #704]	; (16664 <event_connection_prepare+0x1534>)
   163a2:	f7f9 f81c 	bl	f3de <mem_acquire>
		if (!node_tx) {
   163a6:	4601      	mov	r1, r0
   163a8:	2800      	cmp	r0, #0
   163aa:	f000 812a 	beq.w	16602 <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   163ae:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   163b2:	2201      	movs	r2, #1
   163b4:	f362 0301 	bfi	r3, r2, #0, #2
   163b8:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   163bc:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   163c0:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   163c2:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   163c6:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   163c8:	7903      	ldrb	r3, [r0, #4]
   163ca:	f043 0303 	orr.w	r3, r3, #3
   163ce:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   163d0:	2309      	movs	r3, #9
   163d2:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   163d4:	2314      	movs	r3, #20
   163d6:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   163d8:	231b      	movs	r3, #27
   163da:	7203      	strb	r3, [r0, #8]
   163dc:	2300      	movs	r3, #0
   163de:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   163e0:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   163e2:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   163e4:	2348      	movs	r3, #72	; 0x48
   163e6:	7283      	strb	r3, [r0, #10]
   163e8:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   163ea:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   163ec:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   163ee:	4620      	mov	r0, r4
   163f0:	f7fb fa88 	bl	11904 <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   163f4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   163f8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   163fc:	e101      	b.n	16602 <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   163fe:	4b98      	ldr	r3, [pc, #608]	; (16660 <event_connection_prepare+0x1530>)
   16400:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   16404:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16408:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   1640c:	fa52 f888 	uxtab	r8, r2, r8
   16410:	fa5f f888 	uxtb.w	r8, r8
   16414:	e7b3      	b.n	1637e <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   16416:	4040      	eors	r0, r0
   16418:	f380 8811 	msr	BASEPRI, r0
   1641c:	f04f 0004 	mov.w	r0, #4
   16420:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   16422:	4b8f      	ldr	r3, [pc, #572]	; (16660 <event_connection_prepare+0x1530>)
   16424:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16428:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1642c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1642e:	429a      	cmp	r2, r3
   16430:	d352      	bcc.n	164d8 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   16432:	4b8b      	ldr	r3, [pc, #556]	; (16660 <event_connection_prepare+0x1530>)
   16434:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16438:	eba2 0808 	sub.w	r8, r2, r8
   1643c:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   16440:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   16444:	4b86      	ldr	r3, [pc, #536]	; (16660 <event_connection_prepare+0x1530>)
   16446:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   1644a:	f7f8 fffc 	bl	f446 <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   1644e:	4440      	add	r0, r8
   16450:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   16452:	28ff      	cmp	r0, #255	; 0xff
   16454:	d84c      	bhi.n	164f0 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   16456:	4b82      	ldr	r3, [pc, #520]	; (16660 <event_connection_prepare+0x1530>)
   16458:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   1645c:	4298      	cmp	r0, r3
   1645e:	d14d      	bne.n	164fc <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   16460:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   16464:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   16468:	2100      	movs	r1, #0
   1646a:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   1646e:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 16660 <event_connection_prepare+0x1530>
   16472:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   16476:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   1647a:	f361 02c3 	bfi	r2, r1, #3, #1
   1647e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   16482:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   16486:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   16488:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   1648c:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   1648e:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   16492:	f7f8 ffd8 	bl	f446 <mem_free_count_get>
		if (_radio.advertiser.conn) {
   16496:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   1649a:	b10b      	cbz	r3, 164a0 <event_connection_prepare+0x1370>
			free_count_conn++;
   1649c:	3001      	adds	r0, #1
   1649e:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   164a0:	4b6f      	ldr	r3, [pc, #444]	; (16660 <event_connection_prepare+0x1530>)
   164a2:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   164a6:	b10b      	cbz	r3, 164ac <event_connection_prepare+0x137c>
			free_count_conn++;
   164a8:	3001      	adds	r0, #1
   164aa:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   164ac:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   164b0:	f109 090e 	add.w	r9, r9, #14
   164b4:	fa1f f989 	uxth.w	r9, r9
   164b8:	f029 0903 	bic.w	r9, r9, #3
   164bc:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   164c0:	3001      	adds	r0, #1
   164c2:	4b67      	ldr	r3, [pc, #412]	; (16660 <event_connection_prepare+0x1530>)
   164c4:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   164c8:	4298      	cmp	r0, r3
   164ca:	d038      	beq.n	1653e <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   164cc:	4b64      	ldr	r3, [pc, #400]	; (16660 <event_connection_prepare+0x1530>)
   164ce:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   164d2:	4599      	cmp	r9, r3
   164d4:	d833      	bhi.n	1653e <event_connection_prepare+0x140e>
   164d6:	e066      	b.n	165a6 <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   164d8:	4b61      	ldr	r3, [pc, #388]	; (16660 <event_connection_prepare+0x1530>)
   164da:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   164de:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   164e2:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   164e6:	fa52 f888 	uxtab	r8, r2, r8
   164ea:	fa5f f888 	uxtb.w	r8, r8
   164ee:	e7a7      	b.n	16440 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   164f0:	4040      	eors	r0, r0
   164f2:	f380 8811 	msr	BASEPRI, r0
   164f6:	f04f 0004 	mov.w	r0, #4
   164fa:	df02      	svc	2
			LL_ASSERT(0);
   164fc:	4040      	eors	r0, r0
   164fe:	f380 8811 	msr	BASEPRI, r0
   16502:	f04f 0004 	mov.w	r0, #4
   16506:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   16508:	3b01      	subs	r3, #1
   1650a:	4a55      	ldr	r2, [pc, #340]	; (16660 <event_connection_prepare+0x1530>)
   1650c:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   16510:	4f53      	ldr	r7, [pc, #332]	; (16660 <event_connection_prepare+0x1530>)
   16512:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   16516:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   1651a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   1651e:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   16522:	6818      	ldr	r0, [r3, #0]
   16524:	f7f8 ff77 	bl	f416 <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   16528:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   1652c:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   16530:	3a01      	subs	r2, #1
   16532:	4293      	cmp	r3, r2
   16534:	da14      	bge.n	16560 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   16536:	3301      	adds	r3, #1
   16538:	4a49      	ldr	r2, [pc, #292]	; (16660 <event_connection_prepare+0x1530>)
   1653a:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   1653e:	4a48      	ldr	r2, [pc, #288]	; (16660 <event_connection_prepare+0x1530>)
   16540:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   16544:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   16548:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   1654a:	4293      	cmp	r3, r2
   1654c:	d00e      	beq.n	1656c <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   1654e:	2b00      	cmp	r3, #0
   16550:	d1da      	bne.n	16508 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   16552:	4a43      	ldr	r2, [pc, #268]	; (16660 <event_connection_prepare+0x1530>)
   16554:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   16558:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   1655a:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   1655e:	e7d7      	b.n	16510 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   16560:	4040      	eors	r0, r0
   16562:	f380 8811 	msr	BASEPRI, r0
   16566:	f04f 0004 	mov.w	r0, #4
   1656a:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   1656c:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   1656e:	2b29      	cmp	r3, #41	; 0x29
   16570:	d85f      	bhi.n	16632 <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   16572:	2234      	movs	r2, #52	; 0x34
   16574:	4b3a      	ldr	r3, [pc, #232]	; (16660 <event_connection_prepare+0x1530>)
   16576:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   1657a:	4b39      	ldr	r3, [pc, #228]	; (16660 <event_connection_prepare+0x1530>)
   1657c:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   16580:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   16584:	fbb2 f2f1 	udiv	r2, r2, r1
   16588:	b2d2      	uxtb	r2, r2
   1658a:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   1658e:	2a00      	cmp	r2, #0
   16590:	d053      	beq.n	1663a <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   16592:	4833      	ldr	r0, [pc, #204]	; (16660 <event_connection_prepare+0x1530>)
   16594:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   16598:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   1659c:	f7f8 fefa 	bl	f394 <mem_init>
			packet_rx_allocate(4);
   165a0:	2004      	movs	r0, #4
   165a2:	f7fb fc59 	bl	11e58 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   165a6:	4b2e      	ldr	r3, [pc, #184]	; (16660 <event_connection_prepare+0x1530>)
   165a8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   165ac:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   165b0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   165b2:	429a      	cmp	r2, r3
   165b4:	d347      	bcc.n	16646 <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   165b6:	4b2a      	ldr	r3, [pc, #168]	; (16660 <event_connection_prepare+0x1530>)
   165b8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   165bc:	1ad3      	subs	r3, r2, r3
   165be:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   165c0:	2b01      	cmp	r3, #1
   165c2:	d94a      	bls.n	1665a <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   165c4:	4b26      	ldr	r3, [pc, #152]	; (16660 <event_connection_prepare+0x1530>)
   165c6:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   165ca:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   165ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   165d2:	2b00      	cmp	r3, #0
   165d4:	d04a      	beq.n	1666c <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   165d6:	8c22      	ldrh	r2, [r4, #32]
   165d8:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   165da:	2201      	movs	r2, #1
   165dc:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   165de:	7a1a      	ldrb	r2, [r3, #8]
   165e0:	f042 0203 	orr.w	r2, r2, #3
   165e4:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   165e6:	2209      	movs	r2, #9
   165e8:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   165ea:	2215      	movs	r2, #21
   165ec:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   165ee:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   165f0:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   165f2:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   165f4:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   165f6:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   165f8:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   165fa:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   165fc:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   165fe:	f7fd ff35 	bl	1446c <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   16602:	1d23      	adds	r3, r4, #4
   16604:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   16606:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   16608:	3207      	adds	r2, #7
   1660a:	b2d2      	uxtb	r2, r2
   1660c:	f994 001d 	ldrsb.w	r0, [r4, #29]
   16610:	2800      	cmp	r0, #0
   16612:	db37      	blt.n	16684 <event_connection_prepare+0x1554>
   16614:	4814      	ldr	r0, [pc, #80]	; (16668 <event_connection_prepare+0x1538>)
   16616:	9403      	str	r4, [sp, #12]
   16618:	9002      	str	r0, [sp, #8]
   1661a:	9201      	str	r2, [sp, #4]
   1661c:	9100      	str	r1, [sp, #0]
   1661e:	4622      	mov	r2, r4
   16620:	990a      	ldr	r1, [sp, #40]	; 0x28
   16622:	4630      	mov	r0, r6
   16624:	f7fe fc7e 	bl	14f24 <event_common_prepare>
	conn->event_counter = event_counter + 1;
   16628:	3501      	adds	r5, #1
   1662a:	8465      	strh	r5, [r4, #34]	; 0x22
}
   1662c:	b00f      	add	sp, #60	; 0x3c
   1662e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   16632:	4b0b      	ldr	r3, [pc, #44]	; (16660 <event_connection_prepare+0x1530>)
   16634:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   16638:	e79f      	b.n	1657a <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   1663a:	4040      	eors	r0, r0
   1663c:	f380 8811 	msr	BASEPRI, r0
   16640:	f04f 0004 	mov.w	r0, #4
   16644:	df02      	svc	2
		return (_radio.packet_rx_count -
   16646:	4906      	ldr	r1, [pc, #24]	; (16660 <event_connection_prepare+0x1530>)
   16648:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1664c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16650:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   16652:	fa52 f383 	uxtab	r3, r2, r3
   16656:	b2db      	uxtb	r3, r3
   16658:	e7b2      	b.n	165c0 <event_connection_prepare+0x1490>
		return 0;
   1665a:	2300      	movs	r3, #0
   1665c:	e7b9      	b.n	165d2 <event_connection_prepare+0x14a2>
   1665e:	bf00      	nop
   16660:	20000ff4 	.word	0x20000ff4
   16664:	2000114c 	.word	0x2000114c
   16668:	00016ae1 	.word	0x00016ae1
		LL_ASSERT(node_rx);
   1666c:	4040      	eors	r0, r0
   1666e:	f380 8811 	msr	BASEPRI, r0
   16672:	f04f 0004 	mov.w	r0, #4
   16676:	df02      	svc	2
		LL_ASSERT(0);
   16678:	4040      	eors	r0, r0
   1667a:	f380 8811 	msr	BASEPRI, r0
   1667e:	f04f 0004 	mov.w	r0, #4
   16682:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   16684:	4800      	ldr	r0, [pc, #0]	; (16688 <event_connection_prepare+0x1558>)
   16686:	e7c6      	b.n	16616 <event_connection_prepare+0x14e6>
   16688:	00016c1d 	.word	0x00016c1d

0001668c <event_slave_prepare>:
{
   1668c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   1668e:	f7fe fd4f 	bl	15130 <event_connection_prepare>
   16692:	bd08      	pop	{r3, pc}

00016694 <event_master_prepare>:
{
   16694:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   16696:	f7fe fd4b 	bl	15130 <event_connection_prepare>
   1669a:	bd08      	pop	{r3, pc}

0001669c <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   1669c:	4b20      	ldr	r3, [pc, #128]	; (16720 <event_scan_prepare+0x84>)
   1669e:	7b1b      	ldrb	r3, [r3, #12]
   166a0:	bb23      	cbnz	r3, 166ec <event_scan_prepare+0x50>
{
   166a2:	b530      	push	{r4, r5, lr}
   166a4:	b085      	sub	sp, #20
   166a6:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   166a8:	4c1d      	ldr	r4, [pc, #116]	; (16720 <event_scan_prepare+0x84>)
   166aa:	2306      	movs	r3, #6
   166ac:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   166ae:	2200      	movs	r2, #0
   166b0:	9203      	str	r2, [sp, #12]
   166b2:	4a1c      	ldr	r2, [pc, #112]	; (16724 <event_scan_prepare+0x88>)
   166b4:	9202      	str	r2, [sp, #8]
   166b6:	9301      	str	r3, [sp, #4]
   166b8:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   166bc:	9300      	str	r3, [sp, #0]
   166be:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   166c2:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   166c6:	f7fe fc2d 	bl	14f24 <event_common_prepare>
	if (_radio.scanner.conn) {
   166ca:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   166ce:	b15b      	cbz	r3, 166e8 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   166d0:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   166d4:	2b00      	cmp	r3, #0
   166d6:	db0f      	blt.n	166f8 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   166d8:	4b13      	ldr	r3, [pc, #76]	; (16728 <event_scan_prepare+0x8c>)
   166da:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   166dc:	2201      	movs	r2, #1
   166de:	4611      	mov	r1, r2
   166e0:	2000      	movs	r0, #0
   166e2:	f7f8 fd3b 	bl	f15c <mayfly_enqueue>
		LL_ASSERT(!retval);
   166e6:	b9a8      	cbnz	r0, 16714 <event_scan_prepare+0x78>
}
   166e8:	b005      	add	sp, #20
   166ea:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   166ec:	4040      	eors	r0, r0
   166ee:	f380 8811 	msr	BASEPRI, r0
   166f2:	f04f 0004 	mov.w	r0, #4
   166f6:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   166f8:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   166fc:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   16700:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   16704:	4291      	cmp	r1, r2
   16706:	bf2c      	ite	cs
   16708:	ebc3 0301 	rsbcs	r3, r3, r1
   1670c:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   16710:	441d      	add	r5, r3
   16712:	e7e1      	b.n	166d8 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   16714:	4040      	eors	r0, r0
   16716:	f380 8811 	msr	BASEPRI, r0
   1671a:	f04f 0004 	mov.w	r0, #4
   1671e:	df02      	svc	2
   16720:	20000ff4 	.word	0x20000ff4
   16724:	00016db9 	.word	0x00016db9
   16728:	2000bda0 	.word	0x2000bda0
   1672c:	00000000 	.word	0x00000000

00016730 <mayfly_xtal_stop_calc>:
{
   16730:	b530      	push	{r4, r5, lr}
   16732:	b08d      	sub	sp, #52	; 0x34
   16734:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   16736:	2302      	movs	r3, #2
   16738:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   1673a:	23ff      	movs	r3, #255	; 0xff
   1673c:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   16740:	2300      	movs	r3, #0
   16742:	930a      	str	r3, [sp, #40]	; 0x28
   16744:	e012      	b.n	1676c <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   16746:	2101      	movs	r1, #1
   16748:	2000      	movs	r0, #0
   1674a:	f7fa fc71 	bl	11030 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   1674e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16750:	2b02      	cmp	r3, #2
   16752:	d0f8      	beq.n	16746 <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   16754:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   16756:	b9cb      	cbnz	r3, 1678c <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   16758:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   1675c:	2aff      	cmp	r2, #255	; 0xff
   1675e:	d01b      	beq.n	16798 <mayfly_xtal_stop_calc+0x68>
   16760:	4b8b      	ldr	r3, [pc, #556]	; (16990 <mayfly_xtal_stop_calc+0x260>)
   16762:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   16766:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   16768:	429a      	cmp	r2, r3
   1676a:	db15      	blt.n	16798 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   1676c:	ab0b      	add	r3, sp, #44	; 0x2c
   1676e:	9302      	str	r3, [sp, #8]
   16770:	4b88      	ldr	r3, [pc, #544]	; (16994 <mayfly_xtal_stop_calc+0x264>)
   16772:	9301      	str	r3, [sp, #4]
   16774:	ab0a      	add	r3, sp, #40	; 0x28
   16776:	9300      	str	r3, [sp, #0]
   16778:	ab09      	add	r3, sp, #36	; 0x24
   1677a:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   1677e:	2101      	movs	r1, #1
   16780:	2000      	movs	r0, #0
   16782:	f7fa fbd5 	bl	10f30 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   16786:	2802      	cmp	r0, #2
   16788:	d1e4      	bne.n	16754 <mayfly_xtal_stop_calc+0x24>
   1678a:	e7e0      	b.n	1674e <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1678c:	4040      	eors	r0, r0
   1678e:	f380 8811 	msr	BASEPRI, r0
   16792:	f04f 0004 	mov.w	r0, #4
   16796:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   16798:	2aff      	cmp	r2, #255	; 0xff
   1679a:	d002      	beq.n	167a2 <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   1679c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   1679e:	2ba8      	cmp	r3, #168	; 0xa8
   167a0:	d91a      	bls.n	167d8 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   167a2:	2100      	movs	r1, #0
   167a4:	2001      	movs	r0, #1
   167a6:	f7fb fdcd 	bl	12344 <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   167aa:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   167ae:	1f53      	subs	r3, r2, #5
   167b0:	b2db      	uxtb	r3, r3
   167b2:	2bf9      	cmp	r3, #249	; 0xf9
   167b4:	d80e      	bhi.n	167d4 <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   167b6:	2a06      	cmp	r2, #6
   167b8:	f200 80d1 	bhi.w	1695e <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   167bc:	2a05      	cmp	r2, #5
   167be:	f000 80de 	beq.w	1697e <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   167c2:	2a06      	cmp	r2, #6
   167c4:	f040 80d5 	bne.w	16972 <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   167c8:	4873      	ldr	r0, [pc, #460]	; (16998 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   167ca:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   167ce:	2101      	movs	r1, #1
   167d0:	f7fe fb80 	bl	14ed4 <prepare_normal_set>
}
   167d4:	b00d      	add	sp, #52	; 0x34
   167d6:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   167d8:	2101      	movs	r1, #1
   167da:	4608      	mov	r0, r1
   167dc:	f7fb fdb2 	bl	12344 <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   167e0:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   167e4:	2b04      	cmp	r3, #4
   167e6:	d9f5      	bls.n	167d4 <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   167e8:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   167ea:	2b06      	cmp	r3, #6
   167ec:	d82a      	bhi.n	16844 <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   167ee:	2b05      	cmp	r3, #5
   167f0:	d03a      	beq.n	16868 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   167f2:	2b06      	cmp	r3, #6
   167f4:	d132      	bne.n	1685c <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   167f6:	4968      	ldr	r1, [pc, #416]	; (16998 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   167f8:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   167fa:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   167fc:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   167fe:	429a      	cmp	r2, r3
   16800:	bf38      	it	cc
   16802:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   16804:	680b      	ldr	r3, [r1, #0]
   16806:	2b00      	cmp	r3, #0
   16808:	db31      	blt.n	1686e <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   1680a:	429a      	cmp	r2, r3
   1680c:	d336      	bcc.n	1687c <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   1680e:	2c06      	cmp	r4, #6
   16810:	d84e      	bhi.n	168b0 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   16812:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   16814:	2d00      	cmp	r5, #0
   16816:	d0dd      	beq.n	167d4 <mayfly_xtal_stop_calc+0xa4>
   16818:	2c00      	cmp	r4, #0
   1681a:	d0db      	beq.n	167d4 <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   1681c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   1681e:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   16820:	4293      	cmp	r3, r2
   16822:	d1d7      	bne.n	167d4 <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   16824:	b292      	uxth	r2, r2
   16826:	485d      	ldr	r0, [pc, #372]	; (1699c <mayfly_xtal_stop_calc+0x26c>)
   16828:	fba2 0100 	umull	r0, r1, r2, r0
   1682c:	f240 1323 	movw	r3, #291	; 0x123
   16830:	fb03 1102 	mla	r1, r3, r2, r1
   16834:	a354      	add	r3, pc, #336	; (adr r3, 16988 <mayfly_xtal_stop_calc+0x258>)
   16836:	e9d3 2300 	ldrd	r2, r3, [r3]
   1683a:	f7ea fc5f 	bl	10fc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   1683e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   16842:	e050      	b.n	168e6 <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   16844:	3b07      	subs	r3, #7
   16846:	b29a      	uxth	r2, r3
   16848:	f44f 71aa 	mov.w	r1, #340	; 0x154
   1684c:	4b50      	ldr	r3, [pc, #320]	; (16990 <mayfly_xtal_stop_calc+0x260>)
   1684e:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   16852:	f7f8 fe01 	bl	f458 <mem_get>
   16856:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   16858:	4601      	mov	r1, r0
   1685a:	e7ce      	b.n	167fa <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   1685c:	4040      	eors	r0, r0
   1685e:	f380 8811 	msr	BASEPRI, r0
   16862:	f04f 0004 	mov.w	r0, #4
   16866:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   16868:	494d      	ldr	r1, [pc, #308]	; (169a0 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   1686a:	2500      	movs	r5, #0
   1686c:	e7c5      	b.n	167fa <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   1686e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   16872:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   16874:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   16876:	4413      	add	r3, r2
   16878:	930a      	str	r3, [sp, #40]	; 0x28
   1687a:	e7c8      	b.n	1680e <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   1687c:	1a9b      	subs	r3, r3, r2
						ticker_update(
   1687e:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   16882:	b29b      	uxth	r3, r3
					ticker_status =
   16884:	9106      	str	r1, [sp, #24]
   16886:	4947      	ldr	r1, [pc, #284]	; (169a4 <mayfly_xtal_stop_calc+0x274>)
   16888:	9105      	str	r1, [sp, #20]
   1688a:	2000      	movs	r0, #0
   1688c:	9004      	str	r0, [sp, #16]
   1688e:	9003      	str	r0, [sp, #12]
   16890:	9302      	str	r3, [sp, #8]
   16892:	9001      	str	r0, [sp, #4]
   16894:	9000      	str	r0, [sp, #0]
   16896:	2101      	movs	r1, #1
   16898:	f7fa fac0 	bl	10e1c <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   1689c:	2800      	cmp	r0, #0
   1689e:	d0b6      	beq.n	1680e <mayfly_xtal_stop_calc+0xde>
   168a0:	2802      	cmp	r0, #2
   168a2:	d0b4      	beq.n	1680e <mayfly_xtal_stop_calc+0xde>
   168a4:	4040      	eors	r0, r0
   168a6:	f380 8811 	msr	BASEPRI, r0
   168aa:	f04f 0004 	mov.w	r0, #4
   168ae:	df02      	svc	2
					mem_get(_radio.conn_pool,
   168b0:	3c07      	subs	r4, #7
				conn_curr =
   168b2:	b2a2      	uxth	r2, r4
   168b4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   168b8:	4b35      	ldr	r3, [pc, #212]	; (16990 <mayfly_xtal_stop_calc+0x260>)
   168ba:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   168be:	f7f8 fdcb 	bl	f458 <mem_get>
   168c2:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   168c4:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   168c6:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   168c8:	429a      	cmp	r2, r3
   168ca:	bf38      	it	cc
   168cc:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   168ce:	6803      	ldr	r3, [r0, #0]
   168d0:	2b00      	cmp	r3, #0
   168d2:	da9f      	bge.n	16814 <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   168d4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   168d8:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   168da:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   168dc:	4413      	add	r3, r2
   168de:	930a      	str	r3, [sp, #40]	; 0x28
   168e0:	e798      	b.n	16814 <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   168e2:	1a1b      	subs	r3, r3, r0
   168e4:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   168e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   168e8:	4298      	cmp	r0, r3
   168ea:	d3fa      	bcc.n	168e2 <mayfly_xtal_stop_calc+0x1b2>
   168ec:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   168f0:	2900      	cmp	r1, #0
   168f2:	db1c      	blt.n	1692e <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   168f4:	2900      	cmp	r1, #0
   168f6:	f6ff af6d 	blt.w	167d4 <mayfly_xtal_stop_calc+0xa4>
   168fa:	f995 201d 	ldrsb.w	r2, [r5, #29]
   168fe:	2a00      	cmp	r2, #0
   16900:	f6bf af68 	bge.w	167d4 <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   16904:	68e2      	ldr	r2, [r4, #12]
								625) +
   16906:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   16908:	4293      	cmp	r3, r2
   1690a:	f4bf af63 	bcs.w	167d4 <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   1690e:	4628      	mov	r0, r5
   16910:	f7fb f852 	bl	119b8 <conn_update_req>
					if ((status == 2) &&
   16914:	2802      	cmp	r0, #2
   16916:	f47f af5d 	bne.w	167d4 <mayfly_xtal_stop_calc+0xa4>
   1691a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   1691e:	f013 0f02 	tst.w	r3, #2
   16922:	f43f af57 	beq.w	167d4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   16926:	4620      	mov	r0, r4
   16928:	f7fb f846 	bl	119b8 <conn_update_req>
   1692c:	e752      	b.n	167d4 <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   1692e:	f995 201d 	ldrsb.w	r2, [r5, #29]
   16932:	2a00      	cmp	r2, #0
   16934:	dbde      	blt.n	168f4 <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   16936:	68e2      	ldr	r2, [r4, #12]
							 625) +
   16938:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   1693a:	4293      	cmp	r3, r2
   1693c:	d2da      	bcs.n	168f4 <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   1693e:	4620      	mov	r0, r4
   16940:	f7fb f83a 	bl	119b8 <conn_update_req>
					if ((status == 2) &&
   16944:	2802      	cmp	r0, #2
   16946:	f47f af45 	bne.w	167d4 <mayfly_xtal_stop_calc+0xa4>
   1694a:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   1694e:	f013 0f02 	tst.w	r3, #2
   16952:	f43f af3f 	beq.w	167d4 <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   16956:	4628      	mov	r0, r5
   16958:	f7fb f82e 	bl	119b8 <conn_update_req>
   1695c:	e73a      	b.n	167d4 <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   1695e:	3a07      	subs	r2, #7
   16960:	b292      	uxth	r2, r2
   16962:	f44f 71aa 	mov.w	r1, #340	; 0x154
   16966:	4b0a      	ldr	r3, [pc, #40]	; (16990 <mayfly_xtal_stop_calc+0x260>)
   16968:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   1696c:	f7f8 fd74 	bl	f458 <mem_get>
   16970:	e72b      	b.n	167ca <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   16972:	4040      	eors	r0, r0
   16974:	f380 8811 	msr	BASEPRI, r0
   16978:	f04f 0004 	mov.w	r0, #4
   1697c:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   1697e:	4808      	ldr	r0, [pc, #32]	; (169a0 <mayfly_xtal_stop_calc+0x270>)
   16980:	e723      	b.n	167ca <mayfly_xtal_stop_calc+0x9a>
   16982:	bf00      	nop
   16984:	f3af 8000 	nop.w
   16988:	1afd498d 	.word	0x1afd498d
   1698c:	00000007 	.word	0x00000007
   16990:	20000ff4 	.word	0x20000ff4
   16994:	00011765 	.word	0x00011765
   16998:	200010c0 	.word	0x200010c0
   1699c:	09ce5400 	.word	0x09ce5400
   169a0:	20001008 	.word	0x20001008
   169a4:	00011791 	.word	0x00011791

000169a8 <preempt_calc>:
{
   169a8:	b570      	push	{r4, r5, r6, lr}
   169aa:	4605      	mov	r5, r0
   169ac:	460e      	mov	r6, r1
   169ae:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   169b0:	f7fa fb4e 	bl	11050 <ticker_ticks_now_get>
	u32_t diff =
   169b4:	4621      	mov	r1, r4
   169b6:	f7fa fb4f 	bl	11058 <ticker_ticks_diff_get>
	diff += 3;
   169ba:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   169bc:	2c09      	cmp	r4, #9
   169be:	d801      	bhi.n	169c4 <preempt_calc+0x1c>
	return 0;
   169c0:	2000      	movs	r0, #0
   169c2:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   169c4:	2100      	movs	r1, #0
   169c6:	4608      	mov	r0, r1
   169c8:	f7fb fcbc 	bl	12344 <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   169cc:	4632      	mov	r2, r6
   169ce:	2100      	movs	r1, #0
   169d0:	4628      	mov	r0, r5
   169d2:	f7fe fa7f 	bl	14ed4 <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   169d6:	68ab      	ldr	r3, [r5, #8]
   169d8:	441c      	add	r4, r3
		if (diff <
   169da:	2c26      	cmp	r4, #38	; 0x26
   169dc:	d802      	bhi.n	169e4 <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   169de:	60ac      	str	r4, [r5, #8]
		return 1;
   169e0:	2001      	movs	r0, #1
   169e2:	bd70      	pop	{r4, r5, r6, pc}
   169e4:	2001      	movs	r0, #1
}
   169e6:	bd70      	pop	{r4, r5, r6, pc}

000169e8 <event_adv>:
{
   169e8:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   169ea:	4b3b      	ldr	r3, [pc, #236]	; (16ad8 <event_adv+0xf0>)
   169ec:	7bdb      	ldrb	r3, [r3, #15]
   169ee:	2b00      	cmp	r3, #0
   169f0:	d142      	bne.n	16a78 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   169f2:	4b39      	ldr	r3, [pc, #228]	; (16ad8 <event_adv+0xf0>)
   169f4:	7b1b      	ldrb	r3, [r3, #12]
   169f6:	b2db      	uxtb	r3, r3
   169f8:	2b05      	cmp	r3, #5
   169fa:	d143      	bne.n	16a84 <event_adv+0x9c>
   169fc:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   169fe:	4c36      	ldr	r4, [pc, #216]	; (16ad8 <event_adv+0xf0>)
   16a00:	2101      	movs	r1, #1
   16a02:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   16a04:	2300      	movs	r3, #0
   16a06:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   16a08:	2305      	movs	r3, #5
   16a0a:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16a0c:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   16a0e:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   16a12:	f000 0007 	and.w	r0, r0, #7
   16a16:	f7fb fd5b 	bl	124d0 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   16a1a:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16a1e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   16a22:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   16a26:	f363 0243 	bfi	r2, r3, #1, #3
   16a2a:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   16a2e:	f7fc f841 	bl	12ab4 <adv_setup>
	if (ctrl_rl_enabled()) {
   16a32:	f003 fa43 	bl	19ebc <ctrl_rl_enabled>
   16a36:	bb58      	cbnz	r0, 16a90 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   16a38:	4b27      	ldr	r3, [pc, #156]	; (16ad8 <event_adv+0xf0>)
   16a3a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   16a3e:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   16a42:	d134      	bne.n	16aae <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   16a44:	4c24      	ldr	r4, [pc, #144]	; (16ad8 <event_adv+0xf0>)
   16a46:	68a2      	ldr	r2, [r4, #8]
   16a48:	f105 0109 	add.w	r1, r5, #9
   16a4c:	2001      	movs	r0, #1
   16a4e:	f7f8 ffe9 	bl	fa24 <radio_tmr_start>
	radio_tmr_end_capture();
   16a52:	f7f9 f899 	bl	fb88 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   16a56:	462a      	mov	r2, r5
   16a58:	2105      	movs	r1, #5
   16a5a:	f104 0014 	add.w	r0, r4, #20
   16a5e:	f7ff ffa3 	bl	169a8 <preempt_calc>
   16a62:	bb68      	cbnz	r0, 16ac0 <event_adv+0xd8>
		ticker_status =
   16a64:	2300      	movs	r3, #0
   16a66:	4a1d      	ldr	r2, [pc, #116]	; (16adc <event_adv+0xf4>)
   16a68:	4619      	mov	r1, r3
   16a6a:	4618      	mov	r0, r3
   16a6c:	f7fa faa4 	bl	10fb8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16a70:	b108      	cbz	r0, 16a76 <event_adv+0x8e>
   16a72:	2802      	cmp	r0, #2
   16a74:	d129      	bne.n	16aca <event_adv+0xe2>
   16a76:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16a78:	4040      	eors	r0, r0
   16a7a:	f380 8811 	msr	BASEPRI, r0
   16a7e:	f04f 0004 	mov.w	r0, #4
   16a82:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   16a84:	4040      	eors	r0, r0
   16a86:	f380 8811 	msr	BASEPRI, r0
   16a8a:	f04f 0004 	mov.w	r0, #4
   16a8e:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   16a90:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16a94:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   16a98:	bf14      	ite	ne
   16a9a:	2001      	movne	r0, #1
   16a9c:	2000      	moveq	r0, #0
   16a9e:	f003 f80f 	bl	19ac0 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   16aa2:	1c82      	adds	r2, r0, #2
   16aa4:	7841      	ldrb	r1, [r0, #1]
   16aa6:	7800      	ldrb	r0, [r0, #0]
   16aa8:	f7f8 ff3e 	bl	f928 <radio_filter_configure>
   16aac:	e7ca      	b.n	16a44 <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   16aae:	2001      	movs	r0, #1
   16ab0:	f003 f806 	bl	19ac0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16ab4:	1c82      	adds	r2, r0, #2
   16ab6:	7841      	ldrb	r1, [r0, #1]
   16ab8:	7800      	ldrb	r0, [r0, #0]
   16aba:	f7f8 ff35 	bl	f928 <radio_filter_configure>
   16abe:	e7c1      	b.n	16a44 <event_adv+0x5c>
		_radio.state = STATE_STOP;
   16ac0:	2204      	movs	r2, #4
   16ac2:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16ac4:	f7f8 fea0 	bl	f808 <radio_disable>
   16ac8:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16aca:	4040      	eors	r0, r0
   16acc:	f380 8811 	msr	BASEPRI, r0
   16ad0:	f04f 0004 	mov.w	r0, #4
   16ad4:	df02      	svc	2
   16ad6:	bf00      	nop
   16ad8:	20000ff4 	.word	0x20000ff4
   16adc:	00011f91 	.word	0x00011f91

00016ae0 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16ae0:	4a4c      	ldr	r2, [pc, #304]	; (16c14 <event_master+0x134>)
   16ae2:	7bd2      	ldrb	r2, [r2, #15]
   16ae4:	2a00      	cmp	r2, #0
   16ae6:	d174      	bne.n	16bd2 <event_master+0xf2>
{
   16ae8:	b530      	push	{r4, r5, lr}
   16aea:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   16aec:	4a49      	ldr	r2, [pc, #292]	; (16c14 <event_master+0x134>)
   16aee:	7b12      	ldrb	r2, [r2, #12]
   16af0:	b2d2      	uxtb	r2, r2
   16af2:	8c19      	ldrh	r1, [r3, #32]
   16af4:	1dcc      	adds	r4, r1, #7
   16af6:	42a2      	cmp	r2, r4
   16af8:	d171      	bne.n	16bde <event_master+0xfe>
   16afa:	461c      	mov	r4, r3
   16afc:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   16afe:	4b45      	ldr	r3, [pc, #276]	; (16c14 <event_master+0x134>)
   16b00:	2204      	movs	r2, #4
   16b02:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   16b04:	2002      	movs	r0, #2
   16b06:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   16b08:	2200      	movs	r2, #0
   16b0a:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16b0c:	3107      	adds	r1, #7
   16b0e:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   16b10:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16b12:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   16b14:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   16b18:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   16b1c:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16b20:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16b22:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16b24:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   16b26:	f7fb fd69 	bl	125fc <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   16b2a:	a903      	add	r1, sp, #12
   16b2c:	4620      	mov	r0, r4
   16b2e:	f7fb fed3 	bl	128d8 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   16b32:	9b03      	ldr	r3, [sp, #12]
   16b34:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16b38:	781a      	ldrb	r2, [r3, #0]
   16b3a:	f361 02c3 	bfi	r2, r1, #3, #1
   16b3e:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16b40:	9a03      	ldr	r2, [sp, #12]
   16b42:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   16b46:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16b4a:	7811      	ldrb	r1, [r2, #0]
   16b4c:	f363 0182 	bfi	r1, r3, #2, #1
   16b50:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   16b52:	4620      	mov	r0, r4
   16b54:	f7fb fce0 	bl	12518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16b58:	2096      	movs	r0, #150	; 0x96
   16b5a:	f7f8 ff5d 	bl	fa18 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   16b5e:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16b62:	f000 0007 	and.w	r0, r0, #7
   16b66:	f7f8 fea5 	bl	f8b4 <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   16b6a:	9903      	ldr	r1, [sp, #12]
   16b6c:	4620      	mov	r0, r4
   16b6e:	f7fb ff49 	bl	12a04 <tx_packet_set>
	if (conn->data_chan_sel) {
   16b72:	7f63      	ldrb	r3, [r4, #29]
   16b74:	f013 0f40 	tst.w	r3, #64	; 0x40
   16b78:	d037      	beq.n	16bea <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16b7a:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16b7c:	3801      	subs	r0, #1
   16b7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16b82:	f104 0217 	add.w	r2, r4, #23
   16b86:	8be1      	ldrh	r1, [r4, #30]
   16b88:	b280      	uxth	r0, r0
   16b8a:	f7fa fe8b 	bl	118a4 <chan_sel_2>
	chan_set(data_chan_use);
   16b8e:	f7fb ff65 	bl	12a5c <chan_set>
		remainder_us = radio_tmr_start(1,
   16b92:	4b20      	ldr	r3, [pc, #128]	; (16c14 <event_master+0x134>)
   16b94:	689a      	ldr	r2, [r3, #8]
   16b96:	f105 0109 	add.w	r1, r5, #9
   16b9a:	2001      	movs	r0, #1
   16b9c:	f7f8 ff42 	bl	fa24 <radio_tmr_start>
		radio_tmr_end_capture();
   16ba0:	f7f8 fff2 	bl	fb88 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   16ba4:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16ba6:	3107      	adds	r1, #7
   16ba8:	462a      	mov	r2, r5
   16baa:	b2c9      	uxtb	r1, r1
   16bac:	4620      	mov	r0, r4
   16bae:	f7ff fefb 	bl	169a8 <preempt_calc>
	if (0 !=
   16bb2:	bb38      	cbnz	r0, 16c04 <event_master+0x124>
		ticker_status =
   16bb4:	2300      	movs	r3, #0
   16bb6:	4a18      	ldr	r2, [pc, #96]	; (16c18 <event_master+0x138>)
   16bb8:	4619      	mov	r1, r3
   16bba:	4618      	mov	r0, r3
   16bbc:	f7fa f9fc 	bl	10fb8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16bc0:	b328      	cbz	r0, 16c0e <event_master+0x12e>
   16bc2:	2802      	cmp	r0, #2
   16bc4:	d023      	beq.n	16c0e <event_master+0x12e>
   16bc6:	4040      	eors	r0, r0
   16bc8:	f380 8811 	msr	BASEPRI, r0
   16bcc:	f04f 0004 	mov.w	r0, #4
   16bd0:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16bd2:	4040      	eors	r0, r0
   16bd4:	f380 8811 	msr	BASEPRI, r0
   16bd8:	f04f 0004 	mov.w	r0, #4
   16bdc:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16bde:	4040      	eors	r0, r0
   16be0:	f380 8811 	msr	BASEPRI, r0
   16be4:	f04f 0004 	mov.w	r0, #4
   16be8:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16bea:	7fa1      	ldrb	r1, [r4, #30]
   16bec:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16bee:	7f63      	ldrb	r3, [r4, #29]
   16bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16bf4:	9300      	str	r3, [sp, #0]
   16bf6:	f104 0317 	add.w	r3, r4, #23
   16bfa:	f104 001f 	add.w	r0, r4, #31
   16bfe:	f7fa fdf3 	bl	117e8 <chan_sel_1>
   16c02:	e7c4      	b.n	16b8e <event_master+0xae>
		_radio.state = STATE_STOP;
   16c04:	2204      	movs	r2, #4
   16c06:	4b03      	ldr	r3, [pc, #12]	; (16c14 <event_master+0x134>)
   16c08:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16c0a:	f7f8 fdfd 	bl	f808 <radio_disable>
}
   16c0e:	b005      	add	sp, #20
   16c10:	bd30      	pop	{r4, r5, pc}
   16c12:	bf00      	nop
   16c14:	20000ff4 	.word	0x20000ff4
   16c18:	00011f91 	.word	0x00011f91

00016c1c <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16c1c:	4a64      	ldr	r2, [pc, #400]	; (16db0 <event_slave+0x194>)
   16c1e:	7bd2      	ldrb	r2, [r2, #15]
   16c20:	2a00      	cmp	r2, #0
   16c22:	f040 809d 	bne.w	16d60 <event_slave+0x144>
{
   16c26:	b5f0      	push	{r4, r5, r6, r7, lr}
   16c28:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   16c2a:	4a61      	ldr	r2, [pc, #388]	; (16db0 <event_slave+0x194>)
   16c2c:	7b11      	ldrb	r1, [r2, #12]
   16c2e:	b2c9      	uxtb	r1, r1
   16c30:	8c1a      	ldrh	r2, [r3, #32]
   16c32:	1dd4      	adds	r4, r2, #7
   16c34:	42a1      	cmp	r1, r4
   16c36:	f040 8099 	bne.w	16d6c <event_slave+0x150>
   16c3a:	461c      	mov	r4, r3
   16c3c:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16c3e:	4d5c      	ldr	r5, [pc, #368]	; (16db0 <event_slave+0x194>)
   16c40:	2303      	movs	r3, #3
   16c42:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   16c44:	2301      	movs	r3, #1
   16c46:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16c48:	2700      	movs	r7, #0
   16c4a:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16c4c:	3207      	adds	r2, #7
   16c4e:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16c50:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16c52:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   16c54:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16c58:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16c5c:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16c60:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   16c62:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   16c64:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   16c66:	4620      	mov	r0, r4
   16c68:	f7fb fc56 	bl	12518 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16c6c:	2096      	movs	r0, #150	; 0x96
   16c6e:	f7f8 fed3 	bl	fa18 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   16c72:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16c76:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16c7a:	09d3      	lsrs	r3, r2, #7
   16c7c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16c80:	4639      	mov	r1, r7
   16c82:	f000 0007 	and.w	r0, r0, #7
   16c86:	f7f8 fe1d 	bl	f8c4 <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16c8a:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16c8e:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16c92:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   16c96:	3108      	adds	r1, #8
   16c98:	4620      	mov	r0, r4
   16c9a:	f7fb fc51 	bl	12540 <rx_packet_set>
	if (conn->data_chan_sel) {
   16c9e:	7f63      	ldrb	r3, [r4, #29]
   16ca0:	f013 0f40 	tst.w	r3, #64	; 0x40
   16ca4:	d068      	beq.n	16d78 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16ca6:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16ca8:	3801      	subs	r0, #1
   16caa:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16cae:	f104 0217 	add.w	r2, r4, #23
   16cb2:	8be1      	ldrh	r1, [r4, #30]
   16cb4:	b280      	uxth	r0, r0
   16cb6:	f7fa fdf5 	bl	118a4 <chan_sel_2>
	chan_set(data_chan_use);
   16cba:	f7fb fecf 	bl	12a5c <chan_set>
		conn->slave.window_widening_prepare_us;
   16cbe:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   16cc0:	6e22      	ldr	r2, [r4, #96]	; 0x60
   16cc2:	4413      	add	r3, r2
   16cc4:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   16cc6:	2200      	movs	r2, #0
   16cc8:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   16cca:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   16ccc:	4293      	cmp	r3, r2
   16cce:	d900      	bls.n	16cd2 <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   16cd0:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   16cd2:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   16cd4:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   16cd6:	4413      	add	r3, r2
   16cd8:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   16cda:	2700      	movs	r7, #0
   16cdc:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   16cde:	4b34      	ldr	r3, [pc, #208]	; (16db0 <event_slave+0x194>)
   16ce0:	689a      	ldr	r2, [r3, #8]
   16ce2:	f106 0109 	add.w	r1, r6, #9
   16ce6:	4638      	mov	r0, r7
   16ce8:	f7f8 fe9c 	bl	fa24 <radio_tmr_start>
   16cec:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   16cee:	f7f8 ff17 	bl	fb20 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   16cf2:	4638      	mov	r0, r7
   16cf4:	f7f8 ff36 	bl	fb64 <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   16cf8:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   16cfa:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   16cfe:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   16d00:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   16d02:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   16d04:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16d08:	f000 0007 	and.w	r0, r0, #7
   16d0c:	f7f8 fd68 	bl	f7e0 <radio_rx_ready_delay_get>
   16d10:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   16d12:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   16d16:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16d1a:	2802      	cmp	r0, #2
   16d1c:	d03c      	beq.n	16d98 <event_slave+0x17c>
   16d1e:	2804      	cmp	r0, #4
   16d20:	d037      	beq.n	16d92 <event_slave+0x176>
		return 40;
   16d22:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   16d24:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   16d26:	2101      	movs	r1, #1
   16d28:	f7f8 fd5c 	bl	f7e4 <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16d2c:	4428      	add	r0, r5
   16d2e:	f7f8 fed5 	bl	fadc <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   16d32:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   16d34:	3107      	adds	r1, #7
   16d36:	4632      	mov	r2, r6
   16d38:	b2c9      	uxtb	r1, r1
   16d3a:	4620      	mov	r0, r4
   16d3c:	f7ff fe34 	bl	169a8 <preempt_calc>
   16d40:	bb60      	cbnz	r0, 16d9c <event_slave+0x180>
		ticker_status =
   16d42:	2300      	movs	r3, #0
   16d44:	4a1b      	ldr	r2, [pc, #108]	; (16db4 <event_slave+0x198>)
   16d46:	4619      	mov	r1, r3
   16d48:	4618      	mov	r0, r3
   16d4a:	f7fa f935 	bl	10fb8 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16d4e:	b350      	cbz	r0, 16da6 <event_slave+0x18a>
   16d50:	2802      	cmp	r0, #2
   16d52:	d028      	beq.n	16da6 <event_slave+0x18a>
   16d54:	4040      	eors	r0, r0
   16d56:	f380 8811 	msr	BASEPRI, r0
   16d5a:	f04f 0004 	mov.w	r0, #4
   16d5e:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16d60:	4040      	eors	r0, r0
   16d62:	f380 8811 	msr	BASEPRI, r0
   16d66:	f04f 0004 	mov.w	r0, #4
   16d6a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16d6c:	4040      	eors	r0, r0
   16d6e:	f380 8811 	msr	BASEPRI, r0
   16d72:	f04f 0004 	mov.w	r0, #4
   16d76:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16d78:	7fa1      	ldrb	r1, [r4, #30]
   16d7a:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16d7c:	7f63      	ldrb	r3, [r4, #29]
   16d7e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16d82:	9300      	str	r3, [sp, #0]
   16d84:	f104 0317 	add.w	r3, r4, #23
   16d88:	f104 001f 	add.w	r0, r4, #31
   16d8c:	f7fa fd2c 	bl	117e8 <chan_sel_1>
   16d90:	e793      	b.n	16cba <event_slave+0x9e>
		return 376;
   16d92:	f44f 73bc 	mov.w	r3, #376	; 0x178
   16d96:	e7c5      	b.n	16d24 <event_slave+0x108>
		return 24;
   16d98:	2318      	movs	r3, #24
   16d9a:	e7c3      	b.n	16d24 <event_slave+0x108>
		_radio.state = STATE_STOP;
   16d9c:	2204      	movs	r2, #4
   16d9e:	4b04      	ldr	r3, [pc, #16]	; (16db0 <event_slave+0x194>)
   16da0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   16da2:	f7f8 fd31 	bl	f808 <radio_disable>
	packet_tx_enqueue(2);
   16da6:	2002      	movs	r0, #2
   16da8:	f7fb fc28 	bl	125fc <packet_tx_enqueue>
}
   16dac:	b003      	add	sp, #12
   16dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16db0:	20000ff4 	.word	0x20000ff4
   16db4:	00011f91 	.word	0x00011f91

00016db8 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16db8:	4b67      	ldr	r3, [pc, #412]	; (16f58 <event_scan+0x1a0>)
   16dba:	7bdb      	ldrb	r3, [r3, #15]
   16dbc:	2b00      	cmp	r3, #0
   16dbe:	f040 808b 	bne.w	16ed8 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16dc2:	4b65      	ldr	r3, [pc, #404]	; (16f58 <event_scan+0x1a0>)
   16dc4:	7b1b      	ldrb	r3, [r3, #12]
   16dc6:	b2db      	uxtb	r3, r3
   16dc8:	2b06      	cmp	r3, #6
   16dca:	f040 808b 	bne.w	16ee4 <event_scan+0x12c>
{
   16dce:	b570      	push	{r4, r5, r6, lr}
   16dd0:	b08c      	sub	sp, #48	; 0x30
   16dd2:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   16dd4:	4c60      	ldr	r4, [pc, #384]	; (16f58 <event_scan+0x1a0>)
   16dd6:	2302      	movs	r3, #2
   16dd8:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   16dda:	2101      	movs	r1, #1
   16ddc:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   16dde:	2200      	movs	r2, #0
   16de0:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   16de2:	2306      	movs	r3, #6
   16de4:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   16de6:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   16de8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16dec:	f362 0341 	bfi	r3, r2, #1, #1
   16df0:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   16df4:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   16df8:	f000 0007 	and.w	r0, r0, #7
   16dfc:	f7fb fb68 	bl	124d0 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   16e00:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16e04:	f3c3 0081 	ubfx	r0, r3, #2, #2
   16e08:	1c42      	adds	r2, r0, #1
   16e0a:	f362 0383 	bfi	r3, r2, #2, #2
   16e0e:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   16e12:	3025      	adds	r0, #37	; 0x25
   16e14:	f7fb fe22 	bl	12a5c <chan_set>
	if (_radio.scanner.chan == 3) {
   16e18:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16e1c:	f003 030c 	and.w	r3, r3, #12
   16e20:	2b0c      	cmp	r3, #12
   16e22:	d065      	beq.n	16ef0 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   16e24:	2096      	movs	r0, #150	; 0x96
   16e26:	f7f8 fdf7 	bl	fa18 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16e2a:	2300      	movs	r3, #0
   16e2c:	461a      	mov	r2, r3
   16e2e:	4619      	mov	r1, r3
   16e30:	4618      	mov	r0, r3
   16e32:	f7f8 fd47 	bl	f8c4 <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16e36:	4b48      	ldr	r3, [pc, #288]	; (16f58 <event_scan+0x1a0>)
   16e38:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16e3c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16e40:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   16e44:	3008      	adds	r0, #8
   16e46:	f7f8 fcbb 	bl	f7c0 <radio_pkt_rx_set>
	radio_rssi_measure();
   16e4a:	f7f8 fd4b 	bl	f8e4 <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16e4e:	f003 f835 	bl	19ebc <ctrl_rl_enabled>
   16e52:	2800      	cmp	r0, #0
   16e54:	d153      	bne.n	16efe <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   16e56:	4b40      	ldr	r3, [pc, #256]	; (16f58 <event_scan+0x1a0>)
   16e58:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16e5c:	f013 0f30 	tst.w	r3, #48	; 0x30
   16e60:	d165      	bne.n	16f2e <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   16e62:	4c3d      	ldr	r4, [pc, #244]	; (16f58 <event_scan+0x1a0>)
   16e64:	68a2      	ldr	r2, [r4, #8]
   16e66:	f105 0109 	add.w	r1, r5, #9
   16e6a:	2000      	movs	r0, #0
   16e6c:	f7f8 fdda 	bl	fa24 <radio_tmr_start>
	radio_tmr_end_capture();
   16e70:	f7f8 fe8a 	bl	fb88 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   16e74:	462a      	mov	r2, r5
   16e76:	2106      	movs	r1, #6
   16e78:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16e7c:	f7ff fd94 	bl	169a8 <preempt_calc>
   16e80:	2800      	cmp	r0, #0
   16e82:	d15d      	bne.n	16f40 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   16e84:	4b34      	ldr	r3, [pc, #208]	; (16f58 <event_scan+0x1a0>)
   16e86:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16e8a:	3309      	adds	r3, #9
		ticker_status =
   16e8c:	f641 0287 	movw	r2, #6279	; 0x1887
   16e90:	9208      	str	r2, [sp, #32]
   16e92:	4a32      	ldr	r2, [pc, #200]	; (16f5c <event_scan+0x1a4>)
   16e94:	9207      	str	r2, [sp, #28]
   16e96:	2204      	movs	r2, #4
   16e98:	9206      	str	r2, [sp, #24]
   16e9a:	4931      	ldr	r1, [pc, #196]	; (16f60 <event_scan+0x1a8>)
   16e9c:	9105      	str	r1, [sp, #20]
   16e9e:	2000      	movs	r0, #0
   16ea0:	9004      	str	r0, [sp, #16]
   16ea2:	9003      	str	r0, [sp, #12]
   16ea4:	9002      	str	r0, [sp, #8]
   16ea6:	9001      	str	r0, [sp, #4]
   16ea8:	9300      	str	r3, [sp, #0]
   16eaa:	462b      	mov	r3, r5
   16eac:	4601      	mov	r1, r0
   16eae:	f7f9 ff67 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16eb2:	b108      	cbz	r0, 16eb8 <event_scan+0x100>
   16eb4:	2802      	cmp	r0, #2
   16eb6:	d149      	bne.n	16f4c <event_scan+0x194>
			ticker_status =
   16eb8:	2300      	movs	r3, #0
   16eba:	4a2a      	ldr	r2, [pc, #168]	; (16f64 <event_scan+0x1ac>)
   16ebc:	4619      	mov	r1, r3
   16ebe:	4618      	mov	r0, r3
   16ec0:	f7fa f87a 	bl	10fb8 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16ec4:	2800      	cmp	r0, #0
   16ec6:	d03f      	beq.n	16f48 <event_scan+0x190>
   16ec8:	2802      	cmp	r0, #2
   16eca:	d03d      	beq.n	16f48 <event_scan+0x190>
   16ecc:	4040      	eors	r0, r0
   16ece:	f380 8811 	msr	BASEPRI, r0
   16ed2:	f04f 0004 	mov.w	r0, #4
   16ed6:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16ed8:	4040      	eors	r0, r0
   16eda:	f380 8811 	msr	BASEPRI, r0
   16ede:	f04f 0004 	mov.w	r0, #4
   16ee2:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   16ee4:	4040      	eors	r0, r0
   16ee6:	f380 8811 	msr	BASEPRI, r0
   16eea:	f04f 0004 	mov.w	r0, #4
   16eee:	df02      	svc	2
		_radio.scanner.chan = 0;
   16ef0:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   16ef4:	f36f 0283 	bfc	r2, #2, #2
   16ef8:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   16efc:	e792      	b.n	16e24 <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   16efe:	4b16      	ldr	r3, [pc, #88]	; (16f58 <event_scan+0x1a0>)
   16f00:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   16f04:	f3c0 1000 	ubfx	r0, r0, #4, #1
   16f08:	f002 fdda 	bl	19ac0 <ctrl_filter_get>
   16f0c:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   16f0e:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   16f12:	f002 fd4f 	bl	199b4 <ctrl_irks_get>
   16f16:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16f18:	1ca2      	adds	r2, r4, #2
   16f1a:	7861      	ldrb	r1, [r4, #1]
   16f1c:	7820      	ldrb	r0, [r4, #0]
   16f1e:	f7f8 fd03 	bl	f928 <radio_filter_configure>
		radio_ar_configure(count, irks);
   16f22:	4631      	mov	r1, r6
   16f24:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16f28:	f7f8 feda 	bl	fce0 <radio_ar_configure>
   16f2c:	e799      	b.n	16e62 <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16f2e:	2001      	movs	r0, #1
   16f30:	f002 fdc6 	bl	19ac0 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   16f34:	1c82      	adds	r2, r0, #2
   16f36:	7841      	ldrb	r1, [r0, #1]
   16f38:	7800      	ldrb	r0, [r0, #0]
   16f3a:	f7f8 fcf5 	bl	f928 <radio_filter_configure>
   16f3e:	e790      	b.n	16e62 <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16f40:	2204      	movs	r2, #4
   16f42:	7422      	strb	r2, [r4, #16]
		radio_disable();
   16f44:	f7f8 fc60 	bl	f808 <radio_disable>
}
   16f48:	b00c      	add	sp, #48	; 0x30
   16f4a:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16f4c:	4040      	eors	r0, r0
   16f4e:	f380 8811 	msr	BASEPRI, r0
   16f52:	f04f 0004 	mov.w	r0, #4
   16f56:	df02      	svc	2
   16f58:	20000ff4 	.word	0x20000ff4
   16f5c:	00011ad5 	.word	0x00011ad5
   16f60:	000122b9 	.word	0x000122b9
   16f64:	00011f91 	.word	0x00011f91

00016f68 <access_addr_get>:
{
   16f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   16f6a:	b083      	sub	sp, #12
	retry = 3;
   16f6c:	2403      	movs	r4, #3
   16f6e:	e059      	b.n	17024 <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16f70:	4040      	eors	r0, r0
   16f72:	f380 8811 	msr	BASEPRI, r0
   16f76:	f04f 0004 	mov.w	r0, #4
   16f7a:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16f7c:	9900      	ldr	r1, [sp, #0]
   16f7e:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16f80:	4607      	mov	r7, r0
	bit_idx = 31;
   16f82:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   16f84:	2501      	movs	r5, #1
	while (bit_idx--) {
   16f86:	e010      	b.n	16faa <access_addr_get+0x42>
			consecutive_cnt++;
   16f88:	3501      	adds	r5, #1
   16f8a:	b2ed      	uxtb	r5, r5
   16f8c:	e01c      	b.n	16fc8 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16f8e:	b9ff      	cbnz	r7, 16fd0 <access_addr_get+0x68>
			if (consecutive_bit) {
   16f90:	b319      	cbz	r1, 16fda <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   16f92:	2201      	movs	r2, #1
   16f94:	409a      	lsls	r2, r3
   16f96:	ea26 0602 	bic.w	r6, r6, r2
   16f9a:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16f9c:	4601      	mov	r1, r0
			transitions++;
   16f9e:	3701      	adds	r7, #1
   16fa0:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   16fa2:	2501      	movs	r5, #1
	while (bit_idx--) {
   16fa4:	461a      	mov	r2, r3
		if (transitions > 24) {
   16fa6:	2f18      	cmp	r7, #24
   16fa8:	d81d      	bhi.n	16fe6 <access_addr_get+0x7e>
	while (bit_idx--) {
   16faa:	1e53      	subs	r3, r2, #1
   16fac:	b2db      	uxtb	r3, r3
   16fae:	b32a      	cbz	r2, 16ffc <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16fb0:	9e00      	ldr	r6, [sp, #0]
   16fb2:	469e      	mov	lr, r3
   16fb4:	fa26 f203 	lsr.w	r2, r6, r3
   16fb8:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   16fbc:	4291      	cmp	r1, r2
   16fbe:	d0e3      	beq.n	16f88 <access_addr_get+0x20>
			transitions++;
   16fc0:	3701      	adds	r7, #1
   16fc2:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   16fc4:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   16fc6:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   16fc8:	2d06      	cmp	r5, #6
   16fca:	d8e1      	bhi.n	16f90 <access_addr_get+0x28>
   16fcc:	2b1b      	cmp	r3, #27
   16fce:	d9de      	bls.n	16f8e <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16fd0:	2b1a      	cmp	r3, #26
   16fd2:	d8e7      	bhi.n	16fa4 <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   16fd4:	2f01      	cmp	r7, #1
   16fd6:	d8e5      	bhi.n	16fa4 <access_addr_get+0x3c>
   16fd8:	e7da      	b.n	16f90 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   16fda:	2101      	movs	r1, #1
   16fdc:	fa01 f203 	lsl.w	r2, r1, r3
   16fe0:	4316      	orrs	r6, r2
   16fe2:	9600      	str	r6, [sp, #0]
   16fe4:	e7db      	b.n	16f9e <access_addr_get+0x36>
			if (consecutive_bit) {
   16fe6:	2900      	cmp	r1, #0
   16fe8:	d02d      	beq.n	17046 <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   16fea:	f10e 0e01 	add.w	lr, lr, #1
   16fee:	2301      	movs	r3, #1
   16ff0:	fa03 f30e 	lsl.w	r3, r3, lr
   16ff4:	425b      	negs	r3, r3
   16ff6:	9a00      	ldr	r2, [sp, #0]
   16ff8:	4013      	ands	r3, r2
   16ffa:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   16ffc:	4b19      	ldr	r3, [pc, #100]	; (17064 <access_addr_get+0xfc>)
   16ffe:	9a00      	ldr	r2, [sp, #0]
   17000:	4053      	eors	r3, r2
   17002:	a802      	add	r0, sp, #8
   17004:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   17008:	2104      	movs	r1, #4
   1700a:	f7f8 fa6c 	bl	f4e6 <util_ones_count_get>
   1700e:	2801      	cmp	r0, #1
   17010:	d908      	bls.n	17024 <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   17012:	9800      	ldr	r0, [sp, #0]
   17014:	b283      	uxth	r3, r0
   17016:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   1701a:	d120      	bne.n	1705e <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   1701c:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   1701e:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   17022:	d11c      	bne.n	1705e <access_addr_get+0xf6>
	LL_ASSERT(retry);
   17024:	2c00      	cmp	r4, #0
   17026:	d0a3      	beq.n	16f70 <access_addr_get+0x8>
	retry--;
   17028:	3c01      	subs	r4, #1
   1702a:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   1702c:	2004      	movs	r0, #4
	while (len) {
   1702e:	2800      	cmp	r0, #0
   17030:	d0a4      	beq.n	16f7c <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   17032:	4669      	mov	r1, sp
   17034:	f7f9 fc1c 	bl	10870 <rand_get>
   17038:	b2c0      	uxtb	r0, r0
		if (len) {
   1703a:	2800      	cmp	r0, #0
   1703c:	d0f7      	beq.n	1702e <access_addr_get+0xc6>
   1703e:	bf20      	wfe
  __ASM volatile ("sev");
   17040:	bf40      	sev
  __ASM volatile ("wfe");
   17042:	bf20      	wfe
   17044:	e7f3      	b.n	1702e <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   17046:	f10e 0e01 	add.w	lr, lr, #1
   1704a:	2301      	movs	r3, #1
   1704c:	fa03 fe0e 	lsl.w	lr, r3, lr
   17050:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   17054:	9b00      	ldr	r3, [sp, #0]
   17056:	ea43 030e 	orr.w	r3, r3, lr
   1705a:	9300      	str	r3, [sp, #0]
   1705c:	e7ce      	b.n	16ffc <access_addr_get+0x94>
}
   1705e:	b003      	add	sp, #12
   17060:	bdf0      	pop	{r4, r5, r6, r7, pc}
   17062:	bf00      	nop
   17064:	8e89bed6 	.word	0x8e89bed6

00017068 <isr_rx_scan>:
{
   17068:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1706c:	b08f      	sub	sp, #60	; 0x3c
   1706e:	4617      	mov	r7, r2
   17070:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   17074:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   17078:	4b99      	ldr	r3, [pc, #612]	; (172e0 <isr_rx_scan+0x278>)
   1707a:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1707e:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   17082:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   17086:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1708a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1708e:	b15b      	cbz	r3, 170a8 <isr_rx_scan+0x40>
   17090:	4b93      	ldr	r3, [pc, #588]	; (172e0 <isr_rx_scan+0x278>)
   17092:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   17096:	b34b      	cbz	r3, 170ec <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   17098:	4a91      	ldr	r2, [pc, #580]	; (172e0 <isr_rx_scan+0x278>)
   1709a:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   1709e:	b2db      	uxtb	r3, r3
   170a0:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   170a4:	4293      	cmp	r3, r2
   170a6:	d021      	beq.n	170ec <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   170a8:	7a23      	ldrb	r3, [r4, #8]
   170aa:	f013 030f 	ands.w	r3, r3, #15
   170ae:	f000 82e9 	beq.w	17684 <isr_rx_scan+0x61c>
   170b2:	2b06      	cmp	r3, #6
   170b4:	f000 82e6 	beq.w	17684 <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   170b8:	2b00      	cmp	r3, #0
   170ba:	f000 83d9 	beq.w	17870 <isr_rx_scan+0x808>
   170be:	2b01      	cmp	r3, #1
   170c0:	f000 8355 	beq.w	1776e <isr_rx_scan+0x706>
	bool dir_report = false;
   170c4:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   170c8:	7a23      	ldrb	r3, [r4, #8]
   170ca:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   170ce:	2b02      	cmp	r3, #2
   170d0:	f000 83d0 	beq.w	17874 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   170d4:	2b06      	cmp	r3, #6
   170d6:	f000 83cd 	beq.w	17874 <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   170da:	2b07      	cmp	r3, #7
   170dc:	f000 839f 	beq.w	1781e <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   170e0:	2b04      	cmp	r3, #4
   170e2:	f000 83a3 	beq.w	1782c <isr_rx_scan+0x7c4>
		return 1;
   170e6:	f04f 0a01 	mov.w	sl, #1
   170ea:	e3cb      	b.n	17884 <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   170ec:	4b7c      	ldr	r3, [pc, #496]	; (172e0 <isr_rx_scan+0x278>)
   170ee:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   170f2:	f013 0f10 	tst.w	r3, #16
   170f6:	d072      	beq.n	171de <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   170f8:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   170fa:	f013 030f 	ands.w	r3, r3, #15
   170fe:	f000 80da 	beq.w	172b6 <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   17102:	2b01      	cmp	r3, #1
   17104:	f000 808f 	beq.w	17226 <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17108:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   1710a:	2b00      	cmp	r3, #0
   1710c:	d0cc      	beq.n	170a8 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   1710e:	f7f8 fd4d 	bl	fbac <radio_tmr_end_get>
   17112:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   17116:	4b72      	ldr	r3, [pc, #456]	; (172e0 <isr_rx_scan+0x278>)
   17118:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   1711c:	4871      	ldr	r0, [pc, #452]	; (172e4 <isr_rx_scan+0x27c>)
   1711e:	fba3 0100 	umull	r0, r1, r3, r0
   17122:	2207      	movs	r2, #7
   17124:	fb02 1103 	mla	r1, r2, r3, r1
   17128:	a36b      	add	r3, pc, #428	; (adr r3, 172d8 <isr_rx_scan+0x270>)
   1712a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1712e:	f7e9 ffe5 	bl	10fc <__aeabi_uldivmod>
   17132:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   17136:	4581      	cmp	r9, r0
   17138:	d2b6      	bcs.n	170a8 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   1713a:	4b69      	ldr	r3, [pc, #420]	; (172e0 <isr_rx_scan+0x278>)
   1713c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17140:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17144:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17146:	429a      	cmp	r2, r3
   17148:	f0c0 80b7 	bcc.w	172ba <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   1714c:	4b64      	ldr	r3, [pc, #400]	; (172e0 <isr_rx_scan+0x278>)
   1714e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17152:	1ad3      	subs	r3, r2, r3
   17154:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17156:	2b03      	cmp	r3, #3
   17158:	f240 80b9 	bls.w	172ce <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   1715c:	4b60      	ldr	r3, [pc, #384]	; (172e0 <isr_rx_scan+0x278>)
   1715e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17162:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17166:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   1716a:	f1b9 0f00 	cmp.w	r9, #0
   1716e:	f000 839a 	beq.w	178a6 <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   17172:	f8df a16c 	ldr.w	sl, [pc, #364]	; 172e0 <isr_rx_scan+0x278>
   17176:	2304      	movs	r3, #4
   17178:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   1717c:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   17180:	2300      	movs	r3, #0
   17182:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   17186:	f7f8 fb91 	bl	f8ac <radio_pkt_scratch_get>
   1718a:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   1718c:	7803      	ldrb	r3, [r0, #0]
   1718e:	2205      	movs	r2, #5
   17190:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   17194:	b2db      	uxtb	r3, r3
   17196:	f043 0320 	orr.w	r3, r3, #32
   1719a:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   1719c:	7a23      	ldrb	r3, [r4, #8]
   1719e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   171a2:	7802      	ldrb	r2, [r0, #0]
   171a4:	f363 12c7 	bfi	r2, r3, #7, #1
   171a8:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   171aa:	2322      	movs	r3, #34	; 0x22
   171ac:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   171ae:	4628      	mov	r0, r5
   171b0:	f002 fbde 	bl	19970 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   171b4:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   171b8:	f013 0f01 	tst.w	r3, #1
   171bc:	f000 8098 	beq.w	172f0 <isr_rx_scan+0x288>
   171c0:	2800      	cmp	r0, #0
   171c2:	f000 8095 	beq.w	172f0 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   171c6:	7832      	ldrb	r2, [r6, #0]
   171c8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   171cc:	4633      	mov	r3, r6
   171ce:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   171d2:	2206      	movs	r2, #6
   171d4:	4601      	mov	r1, r0
   171d6:	4618      	mov	r0, r3
   171d8:	f7e9 f872 	bl	2c0 <memcpy>
   171dc:	e096      	b.n	1730c <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   171de:	2dff      	cmp	r5, #255	; 0xff
   171e0:	d00a      	beq.n	171f8 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   171e2:	4b3f      	ldr	r3, [pc, #252]	; (172e0 <isr_rx_scan+0x278>)
   171e4:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   171e8:	429d      	cmp	r5, r3
   171ea:	bf14      	ite	ne
   171ec:	2300      	movne	r3, #0
   171ee:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   171f0:	2b00      	cmp	r3, #0
   171f2:	d181      	bne.n	170f8 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   171f4:	2300      	movs	r3, #0
   171f6:	e788      	b.n	1710a <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   171f8:	4b39      	ldr	r3, [pc, #228]	; (172e0 <isr_rx_scan+0x278>)
   171fa:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   171fe:	f3c2 1280 	ubfx	r2, r2, #6, #1
   17202:	7a23      	ldrb	r3, [r4, #8]
   17204:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17208:	429a      	cmp	r2, r3
   1720a:	d001      	beq.n	17210 <isr_rx_scan+0x1a8>
   1720c:	2300      	movs	r3, #0
   1720e:	e7ef      	b.n	171f0 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   17210:	2206      	movs	r2, #6
   17212:	f108 0102 	add.w	r1, r8, #2
   17216:	4834      	ldr	r0, [pc, #208]	; (172e8 <isr_rx_scan+0x280>)
   17218:	f013 fb16 	bl	2a848 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   1721c:	b908      	cbnz	r0, 17222 <isr_rx_scan+0x1ba>
   1721e:	2301      	movs	r3, #1
   17220:	e7e6      	b.n	171f0 <isr_rx_scan+0x188>
   17222:	2300      	movs	r3, #0
   17224:	e7e4      	b.n	171f0 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17226:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17228:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1722c:	462a      	mov	r2, r5
   1722e:	4651      	mov	r1, sl
   17230:	09c0      	lsrs	r0, r0, #7
   17232:	f002 fe17 	bl	19e64 <ctrl_rl_addr_resolve>
   17236:	4681      	mov	r9, r0
   17238:	b9d0      	cbnz	r0, 17270 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1723a:	4b29      	ldr	r3, [pc, #164]	; (172e0 <isr_rx_scan+0x278>)
   1723c:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   17240:	f013 0f01 	tst.w	r3, #1
   17244:	d119      	bne.n	1727a <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17246:	4b26      	ldr	r3, [pc, #152]	; (172e0 <isr_rx_scan+0x278>)
   17248:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1724c:	7a23      	ldrb	r3, [r4, #8]
   1724e:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   17250:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17254:	d017      	beq.n	17286 <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17256:	4b22      	ldr	r3, [pc, #136]	; (172e0 <isr_rx_scan+0x278>)
   17258:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1725c:	f013 0f20 	tst.w	r3, #32
   17260:	d003      	beq.n	1726a <isr_rx_scan+0x202>
   17262:	f994 3008 	ldrsb.w	r3, [r4, #8]
   17266:	2b00      	cmp	r3, #0
   17268:	db17      	blt.n	1729a <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   1726a:	f1b9 0f00 	cmp.w	r9, #0
   1726e:	d11d      	bne.n	172ac <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17270:	f1b9 0f00 	cmp.w	r9, #0
   17274:	d01d      	beq.n	172b2 <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   17276:	2301      	movs	r3, #1
   17278:	e747      	b.n	1710a <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   1727a:	4628      	mov	r0, r5
   1727c:	f002 fb78 	bl	19970 <ctrl_lrpa_get>
   17280:	2800      	cmp	r0, #0
   17282:	d1f5      	bne.n	17270 <isr_rx_scan+0x208>
   17284:	e7df      	b.n	17246 <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   17286:	2206      	movs	r2, #6
   17288:	4651      	mov	r1, sl
   1728a:	4818      	ldr	r0, [pc, #96]	; (172ec <isr_rx_scan+0x284>)
   1728c:	f013 fadc 	bl	2a848 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17290:	2800      	cmp	r0, #0
   17292:	d1e0      	bne.n	17256 <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   17294:	f04f 0901 	mov.w	r9, #1
   17298:	e7ea      	b.n	17270 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   1729a:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   1729e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   172a2:	2b40      	cmp	r3, #64	; 0x40
   172a4:	d1e1      	bne.n	1726a <isr_rx_scan+0x202>
		return true;
   172a6:	f04f 0901 	mov.w	r9, #1
   172aa:	e7de      	b.n	1726a <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   172ac:	f04f 0901 	mov.w	r9, #1
   172b0:	e7de      	b.n	17270 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   172b2:	2300      	movs	r3, #0
   172b4:	e729      	b.n	1710a <isr_rx_scan+0xa2>
   172b6:	2301      	movs	r3, #1
   172b8:	e727      	b.n	1710a <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   172ba:	4909      	ldr	r1, [pc, #36]	; (172e0 <isr_rx_scan+0x278>)
   172bc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   172c0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   172c4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   172c6:	fa52 f383 	uxtab	r3, r2, r3
   172ca:	b2db      	uxtb	r3, r3
   172cc:	e743      	b.n	17156 <isr_rx_scan+0xee>
		return 0;
   172ce:	f04f 0900 	mov.w	r9, #0
   172d2:	e74a      	b.n	1716a <isr_rx_scan+0x102>
   172d4:	f3af 8000 	nop.w
   172d8:	3b9aca00 	.word	0x3b9aca00
   172dc:	00000000 	.word	0x00000000
   172e0:	20000ff4 	.word	0x20000ff4
   172e4:	1afd498d 	.word	0x1afd498d
   172e8:	200010da 	.word	0x200010da
   172ec:	200010d4 	.word	0x200010d4
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   172f0:	4962      	ldr	r1, [pc, #392]	; (1747c <isr_rx_scan+0x414>)
   172f2:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   172f6:	09db      	lsrs	r3, r3, #7
   172f8:	7832      	ldrb	r2, [r6, #0]
   172fa:	f363 1286 	bfi	r2, r3, #6, #1
   172fe:	4630      	mov	r0, r6
   17300:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   17304:	2206      	movs	r2, #6
   17306:	31e0      	adds	r1, #224	; 0xe0
   17308:	f7e8 ffda 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   1730c:	f106 0308 	add.w	r3, r6, #8
   17310:	930b      	str	r3, [sp, #44]	; 0x2c
   17312:	2206      	movs	r2, #6
   17314:	f104 010a 	add.w	r1, r4, #10
   17318:	4618      	mov	r0, r3
   1731a:	f7e8 ffd1 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   1731e:	2204      	movs	r2, #4
   17320:	f108 0110 	add.w	r1, r8, #16
   17324:	f106 000e 	add.w	r0, r6, #14
   17328:	f7e8 ffca 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   1732c:	2203      	movs	r2, #3
   1732e:	f108 0114 	add.w	r1, r8, #20
   17332:	f106 0012 	add.w	r0, r6, #18
   17336:	f7e8 ffc3 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   1733a:	2301      	movs	r3, #1
   1733c:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   1733e:	4b4f      	ldr	r3, [pc, #316]	; (1747c <isr_rx_scan+0x414>)
   17340:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   17344:	f240 42e2 	movw	r2, #1250	; 0x4e2
   17348:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   1734c:	f7f8 fc2e 	bl	fbac <radio_tmr_end_get>
   17350:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   17354:	4b49      	ldr	r3, [pc, #292]	; (1747c <isr_rx_scan+0x414>)
   17356:	689b      	ldr	r3, [r3, #8]
   17358:	2b00      	cmp	r3, #0
   1735a:	dd75      	ble.n	17448 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   1735c:	4b47      	ldr	r3, [pc, #284]	; (1747c <isr_rx_scan+0x414>)
   1735e:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   17362:	2b00      	cmp	r3, #0
   17364:	d174      	bne.n	17450 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   17366:	75b3      	strb	r3, [r6, #22]
   17368:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   1736a:	2100      	movs	r1, #0
   1736c:	4608      	mov	r0, r1
   1736e:	f7f8 fa33 	bl	f7d8 <radio_tx_ready_delay_get>
   17372:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   17376:	2100      	movs	r1, #0
   17378:	4608      	mov	r0, r1
   1737a:	f7f8 fa2f 	bl	f7dc <radio_tx_chain_delay_get>
   1737e:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   17382:	f10a 031e 	add.w	r3, sl, #30
   17386:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   17388:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 1747c <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   1738c:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   17390:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   17392:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   17396:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   17398:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   1739c:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   1739e:	2205      	movs	r2, #5
   173a0:	f108 0117 	add.w	r1, r8, #23
   173a4:	f106 001e 	add.w	r0, r6, #30
   173a8:	f7e8 ff8a 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   173ac:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   173b0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   173b4:	f362 0304 	bfi	r3, r2, #0, #5
   173b8:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   173bc:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   173c0:	b2db      	uxtb	r3, r3
   173c2:	f362 1347 	bfi	r3, r2, #5, #3
   173c6:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   173ca:	f7f8 fa83 	bl	f8d4 <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   173ce:	4630      	mov	r0, r6
   173d0:	f7f8 f9fc 	bl	f7cc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   173d4:	f7f8 fa32 	bl	f83c <radio_is_ready>
   173d8:	4682      	mov	sl, r0
   173da:	2800      	cmp	r0, #0
   173dc:	d148      	bne.n	17470 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   173de:	f44f 72aa 	mov.w	r2, #340	; 0x154
   173e2:	4b26      	ldr	r3, [pc, #152]	; (1747c <isr_rx_scan+0x414>)
   173e4:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   173e8:	4640      	mov	r0, r8
   173ea:	f7f8 f838 	bl	f45e <mem_index_get>
   173ee:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   173f2:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   173f6:	2206      	movs	r2, #6
   173f8:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   173fc:	2300      	movs	r3, #0
   173fe:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   17402:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   17406:	4631      	mov	r1, r6
   17408:	f811 3b02 	ldrb.w	r3, [r1], #2
   1740c:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17410:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17414:	f109 001b 	add.w	r0, r9, #27
   17418:	f7e8 ff52 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   1741c:	b397      	cbz	r7, 17484 <isr_rx_scan+0x41c>
   1741e:	2dff      	cmp	r5, #255	; 0xff
   17420:	d030      	beq.n	17484 <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   17422:	f109 020e 	add.w	r2, r9, #14
   17426:	f109 010d 	add.w	r1, r9, #13
   1742a:	4628      	mov	r0, r5
   1742c:	f002 fc96 	bl	19d5c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17430:	f899 300d 	ldrb.w	r3, [r9, #13]
   17434:	3302      	adds	r3, #2
   17436:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   1743a:	2206      	movs	r2, #6
   1743c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1743e:	f109 0014 	add.w	r0, r9, #20
   17442:	f7e8 ff3d 	bl	2c0 <memcpy>
   17446:	e02e      	b.n	174a6 <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   17448:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   1744c:	e786      	b.n	1735c <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   1744e:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   17450:	2b00      	cmp	r3, #0
   17452:	dbfc      	blt.n	1744e <isr_rx_scan+0x3e6>
   17454:	459a      	cmp	sl, r3
   17456:	d8fa      	bhi.n	1744e <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   17458:	eba3 020a 	sub.w	r2, r3, sl
   1745c:	4908      	ldr	r1, [pc, #32]	; (17480 <isr_rx_scan+0x418>)
   1745e:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   17462:	0a92      	lsrs	r2, r2, #10
   17464:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   17466:	7d72      	ldrb	r2, [r6, #21]
   17468:	3201      	adds	r2, #1
   1746a:	7572      	strb	r2, [r6, #21]
   1746c:	469a      	mov	sl, r3
   1746e:	e77c      	b.n	1736a <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   17470:	4040      	eors	r0, r0
   17472:	f380 8811 	msr	BASEPRI, r0
   17476:	f04f 0004 	mov.w	r0, #4
   1747a:	df02      	svc	2
   1747c:	20000ff4 	.word	0x20000ff4
   17480:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17484:	2206      	movs	r2, #6
   17486:	2100      	movs	r1, #0
   17488:	f109 0014 	add.w	r0, r9, #20
   1748c:	f013 fa70 	bl	2a970 <memset>
				pdu_adv_tx->rx_addr;
   17490:	7833      	ldrb	r3, [r6, #0]
   17492:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   17496:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   1749a:	2206      	movs	r2, #6
   1749c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   1749e:	f109 000e 	add.w	r0, r9, #14
   174a2:	f7e8 ff0d 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   174a6:	4dce      	ldr	r5, [pc, #824]	; (177e0 <isr_rx_scan+0x778>)
   174a8:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   174ac:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   174b0:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   174b4:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   174b8:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   174bc:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   174c0:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   174c4:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   174c8:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   174cc:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   174d0:	f7fa fae2 	bl	11a98 <rx_fc_lock>
		packet_rx_enqueue();
   174d4:	f7fc ffca 	bl	1446c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   174d8:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   174dc:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   174e0:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   174e2:	4291      	cmp	r1, r2
   174e4:	f0c0 80b9 	bcc.w	1765a <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   174e8:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   174ec:	1acb      	subs	r3, r1, r3
   174ee:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   174f0:	2b02      	cmp	r3, #2
   174f2:	f240 80bc 	bls.w	1766e <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   174f6:	4bba      	ldr	r3, [pc, #744]	; (177e0 <isr_rx_scan+0x778>)
   174f8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   174fc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17500:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17504:	2b00      	cmp	r3, #0
   17506:	f000 80b4 	beq.w	17672 <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   1750a:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   1750e:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17510:	220b      	movs	r2, #11
   17512:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   17514:	7a22      	ldrb	r2, [r4, #8]
   17516:	f012 0f20 	tst.w	r2, #32
   1751a:	f000 80b0 	beq.w	1767e <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   1751e:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   17522:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   17526:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   1752a:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   1752e:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   17532:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17536:	f898 001d 	ldrb.w	r0, [r8, #29]
   1753a:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1753e:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17542:	404a      	eors	r2, r1
   17544:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17548:	2201      	movs	r2, #1
   1754a:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   1754c:	f7fc ff8e 	bl	1446c <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   17550:	4ea3      	ldr	r6, [pc, #652]	; (177e0 <isr_rx_scan+0x778>)
   17552:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   17556:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   1755a:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   1755e:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   17562:	2327      	movs	r3, #39	; 0x27
   17564:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   17568:	2400      	movs	r4, #0
   1756a:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   1756e:	429d      	cmp	r5, r3
   17570:	bf38      	it	cc
   17572:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17574:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   17578:	9300      	str	r3, [sp, #0]
   1757a:	4b9a      	ldr	r3, [pc, #616]	; (177e4 <isr_rx_scan+0x77c>)
   1757c:	2206      	movs	r2, #6
   1757e:	4621      	mov	r1, r4
   17580:	4620      	mov	r0, r4
   17582:	f7f9 fc99 	bl	10eb8 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   17586:	f240 6131 	movw	r1, #1585	; 0x631
   1758a:	f7fa faed 	bl	11b68 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1758e:	9400      	str	r4, [sp, #0]
   17590:	4623      	mov	r3, r4
   17592:	2204      	movs	r2, #4
   17594:	4621      	mov	r1, r4
   17596:	4620      	mov	r0, r4
   17598:	f7f9 fc8e 	bl	10eb8 <ticker_stop>
				     conn->handle,
   1759c:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   175a0:	3307      	adds	r3, #7
   175a2:	b2db      	uxtb	r3, r3
   175a4:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   175a6:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   175a8:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   175aa:	4f8f      	ldr	r7, [pc, #572]	; (177e8 <isr_rx_scan+0x780>)
   175ac:	a38a      	add	r3, pc, #552	; (adr r3, 177d8 <isr_rx_scan+0x770>)
   175ae:	e9d3 2300 	ldrd	r2, r3, [r3]
   175b2:	990c      	ldr	r1, [sp, #48]	; 0x30
   175b4:	fba1 0107 	umull	r0, r1, r1, r7
   175b8:	f7e9 fda0 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   175bc:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   175c0:	fbab 1207 	umull	r1, r2, fp, r7
   175c4:	468b      	mov	fp, r1
   175c6:	4694      	mov	ip, r2
   175c8:	a383      	add	r3, pc, #524	; (adr r3, 177d8 <isr_rx_scan+0x770>)
   175ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   175ce:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   175d2:	4658      	mov	r0, fp
   175d4:	4661      	mov	r1, ip
   175d6:	f7e9 fd91 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   175da:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   175de:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   175e2:	2100      	movs	r1, #0
   175e4:	4a81      	ldr	r2, [pc, #516]	; (177ec <isr_rx_scan+0x784>)
   175e6:	2307      	movs	r3, #7
   175e8:	fb03 f300 	mul.w	r3, r3, r0
   175ec:	fb02 3301 	mla	r3, r2, r1, r3
   175f0:	fba0 0102 	umull	r0, r1, r0, r2
   175f4:	4419      	add	r1, r3
   175f6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   175fa:	2300      	movs	r3, #0
   175fc:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   17600:	ebbb 0b00 	subs.w	fp, fp, r0
   17604:	eb6c 0c01 	sbc.w	ip, ip, r1
   17608:	4658      	mov	r0, fp
   1760a:	4661      	mov	r1, ip
   1760c:	f7e9 fd76 	bl	10fc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   17610:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17614:	442b      	add	r3, r5
   17616:	b29b      	uxth	r3, r3
		ticker_status =
   17618:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   1761c:	9208      	str	r2, [sp, #32]
   1761e:	4a74      	ldr	r2, [pc, #464]	; (177f0 <isr_rx_scan+0x788>)
   17620:	9207      	str	r2, [sp, #28]
   17622:	f8cd 8018 	str.w	r8, [sp, #24]
   17626:	4a73      	ldr	r2, [pc, #460]	; (177f4 <isr_rx_scan+0x78c>)
   17628:	9205      	str	r2, [sp, #20]
   1762a:	9304      	str	r3, [sp, #16]
   1762c:	9403      	str	r4, [sp, #12]
   1762e:	9002      	str	r0, [sp, #8]
   17630:	9701      	str	r7, [sp, #4]
   17632:	f8cd 9000 	str.w	r9, [sp]
   17636:	4633      	mov	r3, r6
   17638:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   1763a:	4621      	mov	r1, r4
   1763c:	4620      	mov	r0, r4
   1763e:	f7f9 fb9f 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17642:	2800      	cmp	r0, #0
   17644:	f000 8132 	beq.w	178ac <isr_rx_scan+0x844>
   17648:	2802      	cmp	r0, #2
   1764a:	f000 811b 	beq.w	17884 <isr_rx_scan+0x81c>
   1764e:	4040      	eors	r0, r0
   17650:	f380 8811 	msr	BASEPRI, r0
   17654:	f04f 0004 	mov.w	r0, #4
   17658:	df02      	svc	2
		return (_radio.packet_rx_count -
   1765a:	4a61      	ldr	r2, [pc, #388]	; (177e0 <isr_rx_scan+0x778>)
   1765c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   17660:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17664:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   17666:	fa51 f383 	uxtab	r3, r1, r3
   1766a:	b2db      	uxtb	r3, r3
   1766c:	e740      	b.n	174f0 <isr_rx_scan+0x488>
		return 0;
   1766e:	2300      	movs	r3, #0
   17670:	e748      	b.n	17504 <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   17672:	4040      	eors	r0, r0
   17674:	f380 8811 	msr	BASEPRI, r0
   17678:	f04f 0004 	mov.w	r0, #4
   1767c:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   1767e:	2200      	movs	r2, #0
   17680:	72da      	strb	r2, [r3, #11]
   17682:	e763      	b.n	1754c <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   17684:	4a56      	ldr	r2, [pc, #344]	; (177e0 <isr_rx_scan+0x778>)
   17686:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   1768a:	f012 0f08 	tst.w	r2, #8
   1768e:	f43f ad13 	beq.w	170b8 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   17692:	4a53      	ldr	r2, [pc, #332]	; (177e0 <isr_rx_scan+0x778>)
   17694:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   17698:	2a00      	cmp	r2, #0
   1769a:	f47f ad0d 	bne.w	170b8 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   1769e:	b37f      	cbz	r7, 17700 <isr_rx_scan+0x698>
   176a0:	4629      	mov	r1, r5
   176a2:	2200      	movs	r2, #0
   176a4:	4630      	mov	r0, r6
   176a6:	f7fc ff81 	bl	145ac <isr_rx_scan_report>
		if (err) {
   176aa:	4682      	mov	sl, r0
   176ac:	2800      	cmp	r0, #0
   176ae:	f040 80e9 	bne.w	17884 <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   176b2:	f7f8 f8fb 	bl	f8ac <radio_pkt_scratch_get>
   176b6:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   176b8:	7803      	ldrb	r3, [r0, #0]
   176ba:	2203      	movs	r2, #3
   176bc:	f362 0303 	bfi	r3, r2, #0, #4
   176c0:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   176c2:	7a23      	ldrb	r3, [r4, #8]
   176c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   176c8:	7802      	ldrb	r2, [r0, #0]
   176ca:	f363 12c7 	bfi	r2, r3, #7, #1
   176ce:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   176d0:	230c      	movs	r3, #12
   176d2:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   176d4:	4628      	mov	r0, r5
   176d6:	f002 f94b 	bl	19970 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   176da:	4b41      	ldr	r3, [pc, #260]	; (177e0 <isr_rx_scan+0x778>)
   176dc:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   176e0:	f013 0f01 	tst.w	r3, #1
   176e4:	d00e      	beq.n	17704 <isr_rx_scan+0x69c>
   176e6:	b168      	cbz	r0, 17704 <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   176e8:	7832      	ldrb	r2, [r6, #0]
   176ea:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   176ee:	4633      	mov	r3, r6
   176f0:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   176f4:	2206      	movs	r2, #6
   176f6:	4601      	mov	r1, r0
   176f8:	4618      	mov	r0, r3
   176fa:	f7e8 fde1 	bl	2c0 <memcpy>
   176fe:	e00f      	b.n	17720 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   17700:	21ff      	movs	r1, #255	; 0xff
   17702:	e7ce      	b.n	176a2 <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   17704:	4936      	ldr	r1, [pc, #216]	; (177e0 <isr_rx_scan+0x778>)
   17706:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   1770a:	09db      	lsrs	r3, r3, #7
   1770c:	7832      	ldrb	r2, [r6, #0]
   1770e:	f363 1286 	bfi	r2, r3, #6, #1
   17712:	4630      	mov	r0, r6
   17714:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   17718:	2206      	movs	r2, #6
   1771a:	31e0      	adds	r1, #224	; 0xe0
   1771c:	f7e8 fdd0 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   17720:	2206      	movs	r2, #6
   17722:	f104 010a 	add.w	r1, r4, #10
   17726:	f106 0008 	add.w	r0, r6, #8
   1772a:	f7e8 fdc9 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   1772e:	4b2c      	ldr	r3, [pc, #176]	; (177e0 <isr_rx_scan+0x778>)
   17730:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   17734:	f042 0202 	orr.w	r2, r2, #2
   17738:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   1773c:	2202      	movs	r2, #2
   1773e:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   17740:	2096      	movs	r0, #150	; 0x96
   17742:	f7f8 f969 	bl	fa18 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   17746:	2000      	movs	r0, #0
   17748:	f7f8 f8b4 	bl	f8b4 <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   1774c:	4630      	mov	r0, r6
   1774e:	f7f8 f83d 	bl	f7cc <radio_pkt_tx_set>
		radio_tmr_end_capture();
   17752:	f7f8 fa19 	bl	fb88 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   17756:	f7f8 f871 	bl	f83c <radio_is_ready>
   1775a:	4682      	mov	sl, r0
   1775c:	2800      	cmp	r0, #0
   1775e:	f000 8091 	beq.w	17884 <isr_rx_scan+0x81c>
   17762:	4040      	eors	r0, r0
   17764:	f380 8811 	msr	BASEPRI, r0
   17768:	f04f 0004 	mov.w	r0, #4
   1776c:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1776e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   17770:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   17774:	462a      	mov	r2, r5
   17776:	4649      	mov	r1, r9
   17778:	09c0      	lsrs	r0, r0, #7
   1777a:	f002 fb73 	bl	19e64 <ctrl_rl_addr_resolve>
   1777e:	4682      	mov	sl, r0
   17780:	2800      	cmp	r0, #0
   17782:	d146      	bne.n	17812 <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   17784:	4b16      	ldr	r3, [pc, #88]	; (177e0 <isr_rx_scan+0x778>)
   17786:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   1778a:	7a23      	ldrb	r3, [r4, #8]
   1778c:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   1778e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17792:	d00b      	beq.n	177ac <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   17794:	4b12      	ldr	r3, [pc, #72]	; (177e0 <isr_rx_scan+0x778>)
   17796:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   1779a:	f013 0f20 	tst.w	r3, #32
   1779e:	d02d      	beq.n	177fc <isr_rx_scan+0x794>
   177a0:	f994 3008 	ldrsb.w	r3, [r4, #8]
   177a4:	2b00      	cmp	r3, #0
   177a6:	db0c      	blt.n	177c2 <isr_rx_scan+0x75a>
	bool dir_report = false;
   177a8:	46d1      	mov	r9, sl
   177aa:	e028      	b.n	177fe <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   177ac:	2206      	movs	r2, #6
   177ae:	4649      	mov	r1, r9
   177b0:	4811      	ldr	r0, [pc, #68]	; (177f8 <isr_rx_scan+0x790>)
   177b2:	f013 f849 	bl	2a848 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   177b6:	2800      	cmp	r0, #0
   177b8:	d1ec      	bne.n	17794 <isr_rx_scan+0x72c>
	bool dir_report = false;
   177ba:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   177bc:	f04f 0a01 	mov.w	sl, #1
   177c0:	e029      	b.n	17816 <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   177c2:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   177c6:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   177ca:	2b40      	cmp	r3, #64	; 0x40
   177cc:	d01d      	beq.n	1780a <isr_rx_scan+0x7a2>
	bool dir_report = false;
   177ce:	46d1      	mov	r9, sl
   177d0:	e015      	b.n	177fe <isr_rx_scan+0x796>
   177d2:	bf00      	nop
   177d4:	f3af 8000 	nop.w
   177d8:	1afd498d 	.word	0x1afd498d
   177dc:	00000007 	.word	0x00000007
   177e0:	20000ff4 	.word	0x20000ff4
   177e4:	00011b69 	.word	0x00011b69
   177e8:	3b9aca00 	.word	0x3b9aca00
   177ec:	1afd498d 	.word	0x1afd498d
   177f0:	00011ad5 	.word	0x00011ad5
   177f4:	00016695 	.word	0x00016695
   177f8:	200010d4 	.word	0x200010d4
   177fc:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   177fe:	f1ba 0f00 	cmp.w	sl, #0
   17802:	d008      	beq.n	17816 <isr_rx_scan+0x7ae>
   17804:	f04f 0a01 	mov.w	sl, #1
   17808:	e005      	b.n	17816 <isr_rx_scan+0x7ae>
			*dir_report = true;
   1780a:	f04f 0901 	mov.w	r9, #1
		return true;
   1780e:	46ca      	mov	sl, r9
   17810:	e7f5      	b.n	177fe <isr_rx_scan+0x796>
	bool dir_report = false;
   17812:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17816:	f1ba 0f00 	cmp.w	sl, #0
   1781a:	d12b      	bne.n	17874 <isr_rx_scan+0x80c>
   1781c:	e454      	b.n	170c8 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   1781e:	4a26      	ldr	r2, [pc, #152]	; (178b8 <isr_rx_scan+0x850>)
   17820:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   17824:	f012 0f07 	tst.w	r2, #7
   17828:	d124      	bne.n	17874 <isr_rx_scan+0x80c>
   1782a:	e459      	b.n	170e0 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   1782c:	4b22      	ldr	r3, [pc, #136]	; (178b8 <isr_rx_scan+0x850>)
   1782e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   17832:	f013 0f02 	tst.w	r3, #2
   17836:	d102      	bne.n	1783e <isr_rx_scan+0x7d6>
		return 1;
   17838:	f04f 0a01 	mov.w	sl, #1
   1783c:	e022      	b.n	17884 <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   1783e:	f7f8 f835 	bl	f8ac <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17842:	7802      	ldrb	r2, [r0, #0]
   17844:	7a23      	ldrb	r3, [r4, #8]
   17846:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1784a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1784e:	d004      	beq.n	1785a <isr_rx_scan+0x7f2>
   17850:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   17852:	b97b      	cbnz	r3, 17874 <isr_rx_scan+0x80c>
		return 1;
   17854:	f04f 0a01 	mov.w	sl, #1
   17858:	e014      	b.n	17884 <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   1785a:	2206      	movs	r2, #6
   1785c:	f108 0102 	add.w	r1, r8, #2
   17860:	3008      	adds	r0, #8
   17862:	f012 fff1 	bl	2a848 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   17866:	b108      	cbz	r0, 1786c <isr_rx_scan+0x804>
   17868:	2300      	movs	r3, #0
   1786a:	e7f2      	b.n	17852 <isr_rx_scan+0x7ea>
   1786c:	2301      	movs	r3, #1
   1786e:	e7f0      	b.n	17852 <isr_rx_scan+0x7ea>
	bool dir_report = false;
   17870:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17874:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   17876:	b1db      	cbz	r3, 178b0 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   17878:	4b0f      	ldr	r3, [pc, #60]	; (178b8 <isr_rx_scan+0x850>)
   1787a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1787e:	b12b      	cbz	r3, 1788c <isr_rx_scan+0x824>
		return 1;
   17880:	f04f 0a01 	mov.w	sl, #1
}
   17884:	4650      	mov	r0, sl
   17886:	b00f      	add	sp, #60	; 0x3c
   17888:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   1788c:	b907      	cbnz	r7, 17890 <isr_rx_scan+0x828>
   1788e:	25ff      	movs	r5, #255	; 0xff
   17890:	464a      	mov	r2, r9
   17892:	4629      	mov	r1, r5
   17894:	4630      	mov	r0, r6
   17896:	f7fc fe89 	bl	145ac <isr_rx_scan_report>
		if (err) {
   1789a:	4682      	mov	sl, r0
   1789c:	2800      	cmp	r0, #0
   1789e:	d1f1      	bne.n	17884 <isr_rx_scan+0x81c>
	return 1;
   178a0:	f04f 0a01 	mov.w	sl, #1
   178a4:	e7ee      	b.n	17884 <isr_rx_scan+0x81c>
			return 1;
   178a6:	f04f 0a01 	mov.w	sl, #1
   178aa:	e7eb      	b.n	17884 <isr_rx_scan+0x81c>
		return 0;
   178ac:	4682      	mov	sl, r0
   178ae:	e7e9      	b.n	17884 <isr_rx_scan+0x81c>
		return 1;
   178b0:	f04f 0a01 	mov.w	sl, #1
   178b4:	e7e6      	b.n	17884 <isr_rx_scan+0x81c>
   178b6:	bf00      	nop
   178b8:	20000ff4 	.word	0x20000ff4
   178bc:	00000000 	.word	0x00000000

000178c0 <isr_rx_adv>:
{
   178c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   178c4:	b08f      	sub	sp, #60	; 0x3c
   178c6:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   178c8:	b9fa      	cbnz	r2, 1790a <isr_rx_adv+0x4a>
   178ca:	20ff      	movs	r0, #255	; 0xff
   178cc:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   178d0:	f7f7 ffec 	bl	f8ac <radio_pkt_scratch_get>
   178d4:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   178d6:	4f9d      	ldr	r7, [pc, #628]	; (17b4c <isr_rx_adv+0x28c>)
   178d8:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   178dc:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   178e0:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   178e4:	3320      	adds	r3, #32
   178e6:	441f      	add	r7, r3
   178e8:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   178ea:	7803      	ldrb	r3, [r0, #0]
   178ec:	f003 030f 	and.w	r3, r3, #15
   178f0:	2b03      	cmp	r3, #3
   178f2:	d00e      	beq.n	17912 <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   178f4:	f898 3000 	ldrb.w	r3, [r8]
   178f8:	f003 030f 	and.w	r3, r3, #15
   178fc:	2b05      	cmp	r3, #5
   178fe:	d065      	beq.n	179cc <isr_rx_adv+0x10c>
	return 1;
   17900:	2301      	movs	r3, #1
}
   17902:	4618      	mov	r0, r3
   17904:	b00f      	add	sp, #60	; 0x3c
   17906:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   1790a:	4618      	mov	r0, r3
   1790c:	f002 f892 	bl	19a34 <ctrl_rl_irk_idx>
   17910:	e7dc      	b.n	178cc <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   17912:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   17914:	2b0c      	cmp	r3, #12
   17916:	d1ed      	bne.n	178f4 <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17918:	4b8c      	ldr	r3, [pc, #560]	; (17b4c <isr_rx_adv+0x28c>)
   1791a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1791e:	f013 0f40 	tst.w	r3, #64	; 0x40
   17922:	d030      	beq.n	17986 <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17924:	4b89      	ldr	r3, [pc, #548]	; (17b4c <isr_rx_adv+0x28c>)
   17926:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   1792a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1792e:	d04b      	beq.n	179c8 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   17930:	2c00      	cmp	r4, #0
   17932:	d034      	beq.n	1799e <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   17934:	79fb      	ldrb	r3, [r7, #7]
   17936:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1793a:	f898 2000 	ldrb.w	r2, [r8]
   1793e:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17942:	d034      	beq.n	179ae <isr_rx_adv+0xee>
   17944:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17946:	2b00      	cmp	r3, #0
   17948:	d13c      	bne.n	179c4 <isr_rx_adv+0x104>
   1794a:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   1794c:	2b00      	cmp	r3, #0
   1794e:	d0d1      	beq.n	178f4 <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   17950:	4c7e      	ldr	r4, [pc, #504]	; (17b4c <isr_rx_adv+0x28c>)
   17952:	2303      	movs	r3, #3
   17954:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   17956:	f7f7 ffbd 	bl	f8d4 <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   1795a:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   1795e:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   17962:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   17966:	3370      	adds	r3, #112	; 0x70
   17968:	4423      	add	r3, r4
   1796a:	1dd8      	adds	r0, r3, #7
   1796c:	f7f7 ff2e 	bl	f7cc <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   17970:	f7f7 ff64 	bl	f83c <radio_is_ready>
   17974:	4603      	mov	r3, r0
   17976:	2800      	cmp	r0, #0
   17978:	d0c3      	beq.n	17902 <isr_rx_adv+0x42>
   1797a:	4040      	eors	r0, r0
   1797c:	f380 8811 	msr	BASEPRI, r0
   17980:	f04f 0004 	mov.w	r0, #4
   17984:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   17986:	4601      	mov	r1, r0
   17988:	f811 0b02 	ldrb.w	r0, [r1], #2
   1798c:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17990:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17994:	f002 fa0e 	bl	19db4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   17998:	2800      	cmp	r0, #0
   1799a:	d1cb      	bne.n	17934 <isr_rx_adv+0x74>
   1799c:	e7c2      	b.n	17924 <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1799e:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   179a2:	f002 f871 	bl	19a88 <ctrl_irk_whitelisted>
   179a6:	2800      	cmp	r0, #0
   179a8:	d1c4      	bne.n	17934 <isr_rx_adv+0x74>
   179aa:	2300      	movs	r3, #0
   179ac:	e7ce      	b.n	1794c <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   179ae:	2206      	movs	r2, #6
   179b0:	f108 0108 	add.w	r1, r8, #8
   179b4:	1ca8      	adds	r0, r5, #2
   179b6:	f012 ff47 	bl	2a848 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   179ba:	b908      	cbnz	r0, 179c0 <isr_rx_adv+0x100>
   179bc:	2301      	movs	r3, #1
   179be:	e7c2      	b.n	17946 <isr_rx_adv+0x86>
   179c0:	2300      	movs	r3, #0
   179c2:	e7c0      	b.n	17946 <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   179c4:	2301      	movs	r3, #1
   179c6:	e7c1      	b.n	1794c <isr_rx_adv+0x8c>
   179c8:	2300      	movs	r3, #0
   179ca:	e7bf      	b.n	1794c <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   179cc:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   179d0:	2b22      	cmp	r3, #34	; 0x22
   179d2:	d001      	beq.n	179d8 <isr_rx_adv+0x118>
	return 1;
   179d4:	2301      	movs	r3, #1
   179d6:	e794      	b.n	17902 <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   179d8:	79fb      	ldrb	r3, [r7, #7]
   179da:	f003 030f 	and.w	r3, r3, #15
   179de:	2b01      	cmp	r3, #1
   179e0:	d01a      	beq.n	17a18 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   179e2:	4b5a      	ldr	r3, [pc, #360]	; (17b4c <isr_rx_adv+0x28c>)
   179e4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   179e8:	09db      	lsrs	r3, r3, #7
   179ea:	d06d      	beq.n	17ac8 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   179ec:	4b57      	ldr	r3, [pc, #348]	; (17b4c <isr_rx_adv+0x28c>)
   179ee:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   179f2:	09db      	lsrs	r3, r3, #7
   179f4:	f000 8096 	beq.w	17b24 <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   179f8:	2c00      	cmp	r4, #0
   179fa:	d071      	beq.n	17ae0 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   179fc:	79fb      	ldrb	r3, [r7, #7]
   179fe:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a02:	f898 2000 	ldrb.w	r2, [r8]
   17a06:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17a0a:	d071      	beq.n	17af0 <isr_rx_adv+0x230>
   17a0c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17a0e:	2b00      	cmp	r3, #0
   17a10:	f000 809a 	beq.w	17b48 <isr_rx_adv+0x288>
   17a14:	2301      	movs	r3, #1
   17a16:	e086      	b.n	17b26 <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   17a18:	4641      	mov	r1, r8
   17a1a:	f811 0b02 	ldrb.w	r0, [r1], #2
   17a1e:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17a22:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17a26:	f002 f9c5 	bl	19db4 <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   17a2a:	b908      	cbnz	r0, 17a30 <isr_rx_adv+0x170>
   17a2c:	2300      	movs	r3, #0
   17a2e:	e07a      	b.n	17b26 <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   17a30:	79fb      	ldrb	r3, [r7, #7]
   17a32:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17a36:	f898 2000 	ldrb.w	r2, [r8]
   17a3a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17a3e:	d003      	beq.n	17a48 <isr_rx_adv+0x188>
   17a40:	2300      	movs	r3, #0
					    rl_idx) &&
   17a42:	b9db      	cbnz	r3, 17a7c <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   17a44:	2300      	movs	r3, #0
   17a46:	e06e      	b.n	17b26 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a48:	79fb      	ldrb	r3, [r7, #7]
   17a4a:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17a4e:	2b01      	cmp	r3, #1
   17a50:	d008      	beq.n	17a64 <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   17a52:	2206      	movs	r2, #6
   17a54:	f108 0108 	add.w	r1, r8, #8
   17a58:	1ca8      	adds	r0, r5, #2
   17a5a:	f012 fef5 	bl	2a848 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17a5e:	b958      	cbnz	r0, 17a78 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   17a60:	2301      	movs	r3, #1
   17a62:	e7ee      	b.n	17a42 <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17a64:	2206      	movs	r2, #6
   17a66:	f108 0108 	add.w	r1, r8, #8
   17a6a:	1ca8      	adds	r0, r5, #2
   17a6c:	f012 feec 	bl	2a848 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17a70:	2800      	cmp	r0, #0
   17a72:	d1ee      	bne.n	17a52 <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   17a74:	2301      	movs	r3, #1
   17a76:	e7e4      	b.n	17a42 <isr_rx_adv+0x182>
   17a78:	2300      	movs	r3, #0
   17a7a:	e7e2      	b.n	17a42 <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   17a7c:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   17a80:	2bff      	cmp	r3, #255	; 0xff
   17a82:	d009      	beq.n	17a98 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   17a84:	4a31      	ldr	r2, [pc, #196]	; (17b4c <isr_rx_adv+0x28c>)
   17a86:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   17a8a:	4293      	cmp	r3, r2
   17a8c:	bf14      	ite	ne
   17a8e:	2300      	movne	r3, #0
   17a90:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   17a92:	b9bb      	cbnz	r3, 17ac4 <isr_rx_adv+0x204>
   17a94:	2300      	movs	r3, #0
   17a96:	e046      	b.n	17b26 <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   17a98:	79fa      	ldrb	r2, [r7, #7]
   17a9a:	f898 3000 	ldrb.w	r3, [r8]
   17a9e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17aa2:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17aa6:	d001      	beq.n	17aac <isr_rx_adv+0x1ec>
   17aa8:	2300      	movs	r3, #0
   17aaa:	e7f2      	b.n	17a92 <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   17aac:	2206      	movs	r2, #6
   17aae:	f108 0102 	add.w	r1, r8, #2
   17ab2:	f105 0008 	add.w	r0, r5, #8
   17ab6:	f012 fec7 	bl	2a848 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   17aba:	b908      	cbnz	r0, 17ac0 <isr_rx_adv+0x200>
   17abc:	2301      	movs	r3, #1
   17abe:	e7e8      	b.n	17a92 <isr_rx_adv+0x1d2>
   17ac0:	2300      	movs	r3, #0
   17ac2:	e7e6      	b.n	17a92 <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   17ac4:	2301      	movs	r3, #1
   17ac6:	e02e      	b.n	17b26 <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   17ac8:	4641      	mov	r1, r8
   17aca:	f811 0b02 	ldrb.w	r0, [r1], #2
   17ace:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   17ad2:	f3c0 1080 	ubfx	r0, r0, #6, #1
   17ad6:	f002 f96d 	bl	19db4 <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   17ada:	2800      	cmp	r0, #0
   17adc:	d18e      	bne.n	179fc <isr_rx_adv+0x13c>
   17ade:	e785      	b.n	179ec <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17ae0:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17ae4:	f001 ffd0 	bl	19a88 <ctrl_irk_whitelisted>
   17ae8:	2800      	cmp	r0, #0
   17aea:	d187      	bne.n	179fc <isr_rx_adv+0x13c>
   17aec:	2300      	movs	r3, #0
   17aee:	e01a      	b.n	17b26 <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17af0:	79fb      	ldrb	r3, [r7, #7]
   17af2:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17af6:	2b01      	cmp	r3, #1
   17af8:	d008      	beq.n	17b0c <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   17afa:	2206      	movs	r2, #6
   17afc:	f108 0108 	add.w	r1, r8, #8
   17b00:	1ca8      	adds	r0, r5, #2
   17b02:	f012 fea1 	bl	2a848 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17b06:	b958      	cbnz	r0, 17b20 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   17b08:	2301      	movs	r3, #1
   17b0a:	e780      	b.n	17a0e <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   17b0c:	2206      	movs	r2, #6
   17b0e:	f108 0108 	add.w	r1, r8, #8
   17b12:	1ca8      	adds	r0, r5, #2
   17b14:	f012 fe98 	bl	2a848 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17b18:	2800      	cmp	r0, #0
   17b1a:	d1ee      	bne.n	17afa <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   17b1c:	2301      	movs	r3, #1
   17b1e:	e776      	b.n	17a0e <isr_rx_adv+0x14e>
   17b20:	2300      	movs	r3, #0
   17b22:	e774      	b.n	17a0e <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17b24:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   17b26:	2b00      	cmp	r3, #0
   17b28:	f000 8232 	beq.w	17f90 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17b2c:	4b07      	ldr	r3, [pc, #28]	; (17b4c <isr_rx_adv+0x28c>)
   17b2e:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   17b32:	b16b      	cbz	r3, 17b50 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17b34:	4a05      	ldr	r2, [pc, #20]	; (17b4c <isr_rx_adv+0x28c>)
   17b36:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   17b3a:	b2db      	uxtb	r3, r3
   17b3c:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17b40:	4293      	cmp	r3, r2
   17b42:	d005      	beq.n	17b50 <isr_rx_adv+0x290>
	return 1;
   17b44:	2301      	movs	r3, #1
   17b46:	e6dc      	b.n	17902 <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17b48:	2300      	movs	r3, #0
   17b4a:	e7ec      	b.n	17b26 <isr_rx_adv+0x266>
   17b4c:	20000ff4 	.word	0x20000ff4
		   (_radio.advertiser.conn)) {
   17b50:	4bd9      	ldr	r3, [pc, #868]	; (17eb8 <isr_rx_adv+0x5f8>)
   17b52:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17b56:	2b00      	cmp	r3, #0
   17b58:	f000 821c 	beq.w	17f94 <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   17b5c:	4bd6      	ldr	r3, [pc, #856]	; (17eb8 <isr_rx_adv+0x5f8>)
   17b5e:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17b62:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b66:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17b68:	429a      	cmp	r2, r3
   17b6a:	f0c0 81cf 	bcc.w	17f0c <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   17b6e:	4bd2      	ldr	r3, [pc, #840]	; (17eb8 <isr_rx_adv+0x5f8>)
   17b70:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17b74:	1ad3      	subs	r3, r2, r3
   17b76:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17b78:	2b03      	cmp	r3, #3
   17b7a:	f240 81d1 	bls.w	17f20 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   17b7e:	4bce      	ldr	r3, [pc, #824]	; (17eb8 <isr_rx_adv+0x5f8>)
   17b80:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17b84:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17b88:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   17b8c:	2d00      	cmp	r5, #0
   17b8e:	f000 8203 	beq.w	17f98 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   17b92:	4ec9      	ldr	r6, [pc, #804]	; (17eb8 <isr_rx_adv+0x5f8>)
   17b94:	f04f 0904 	mov.w	r9, #4
   17b98:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   17b9c:	f7f7 fe34 	bl	f808 <radio_disable>
		conn = _radio.advertiser.conn;
   17ba0:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   17ba4:	2300      	movs	r3, #0
   17ba6:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17baa:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17bae:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   17bb2:	4620      	mov	r0, r4
   17bb4:	f7f7 fc53 	bl	f45e <mem_index_get>
   17bb8:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   17bba:	2203      	movs	r2, #3
   17bbc:	f108 0112 	add.w	r1, r8, #18
   17bc0:	f104 0014 	add.w	r0, r4, #20
   17bc4:	f7e8 fb7c 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   17bc8:	f104 0a10 	add.w	sl, r4, #16
   17bcc:	464a      	mov	r2, r9
   17bce:	f108 010e 	add.w	r1, r8, #14
   17bd2:	4650      	mov	r0, sl
   17bd4:	f7e8 fb74 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   17bd8:	f104 0617 	add.w	r6, r4, #23
   17bdc:	2205      	movs	r2, #5
   17bde:	f108 011e 	add.w	r1, r8, #30
   17be2:	4630      	mov	r0, r6
   17be4:	f7e8 fb6c 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   17be8:	2105      	movs	r1, #5
   17bea:	4630      	mov	r0, r6
   17bec:	f7f7 fc7b 	bl	f4e6 <util_ones_count_get>
		conn->data_chan_count =
   17bf0:	7f63      	ldrb	r3, [r4, #29]
   17bf2:	f360 0305 	bfi	r3, r0, #0, #6
   17bf6:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   17bf8:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17bfc:	f3c3 0304 	ubfx	r3, r3, #0, #5
   17c00:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   17c02:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   17c06:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   17c08:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   17c0c:	f240 46e2 	movw	r6, #1250	; 0x4e2
   17c10:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   17c14:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   17c18:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17c1a:	464a      	mov	r2, r9
   17c1c:	4651      	mov	r1, sl
   17c1e:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   17c22:	f7e8 fb4d 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   17c26:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   17c2a:	f242 7210 	movw	r2, #10000	; 0x2710
   17c2e:	fb02 6303 	mla	r3, r2, r3, r6
   17c32:	3b01      	subs	r3, #1
   17c34:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17c38:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17c3a:	4ba0      	ldr	r3, [pc, #640]	; (17ebc <isr_rx_adv+0x5fc>)
   17c3c:	4433      	add	r3, r6
   17c3e:	fbb3 f3f6 	udiv	r3, r3, r6
   17c42:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17c46:	4b9e      	ldr	r3, [pc, #632]	; (17ec0 <isr_rx_adv+0x600>)
   17c48:	4433      	add	r3, r6
   17c4a:	fbb3 f3f6 	udiv	r3, r3, r6
   17c4e:	b29b      	uxth	r3, r3
   17c50:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17c54:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   17c56:	1d91      	adds	r1, r2, #6
   17c58:	428b      	cmp	r3, r1
   17c5a:	dd03      	ble.n	17c64 <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17c5c:	1a9b      	subs	r3, r3, r2
   17c5e:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17c60:	3b06      	subs	r3, #6
   17c62:	b29b      	uxth	r3, r3
   17c64:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17c68:	8c23      	ldrh	r3, [r4, #32]
   17c6a:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17c6c:	2206      	movs	r2, #6
   17c6e:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17c70:	2300      	movs	r3, #0
   17c72:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   17c74:	2301      	movs	r3, #1
   17c76:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17c78:	4641      	mov	r1, r8
   17c7a:	f811 3b08 	ldrb.w	r3, [r1], #8
   17c7e:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   17c82:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   17c84:	f105 001b 	add.w	r0, r5, #27
   17c88:	f7e8 fb1a 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17c8c:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17c90:	28ff      	cmp	r0, #255	; 0xff
   17c92:	f000 8147 	beq.w	17f24 <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   17c96:	f105 020e 	add.w	r2, r5, #14
   17c9a:	f105 010d 	add.w	r1, r5, #13
   17c9e:	f002 f85d 	bl	19d5c <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   17ca2:	7b6b      	ldrb	r3, [r5, #13]
   17ca4:	3302      	adds	r3, #2
   17ca6:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17ca8:	2206      	movs	r2, #6
   17caa:	f108 0102 	add.w	r1, r8, #2
   17cae:	f105 0014 	add.w	r0, r5, #20
   17cb2:	f7e8 fb05 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   17cb6:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   17cba:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   17cbe:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   17cc2:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   17cc6:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   17cca:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   17cce:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   17cd2:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   17cd6:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   17cda:	8c20      	ldrh	r0, [r4, #32]
   17cdc:	f7f9 fedc 	bl	11a98 <rx_fc_lock>
		packet_rx_enqueue();
   17ce0:	f7fc fbc4 	bl	1446c <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   17ce4:	4b74      	ldr	r3, [pc, #464]	; (17eb8 <isr_rx_adv+0x5f8>)
   17ce6:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   17cea:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17cee:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17cf0:	429a      	cmp	r2, r3
   17cf2:	f0c0 8129 	bcc.w	17f48 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   17cf6:	4b70      	ldr	r3, [pc, #448]	; (17eb8 <isr_rx_adv+0x5f8>)
   17cf8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   17cfc:	1ad3      	subs	r3, r2, r3
   17cfe:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17d00:	2b02      	cmp	r3, #2
   17d02:	f240 812b 	bls.w	17f5c <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   17d06:	4b6c      	ldr	r3, [pc, #432]	; (17eb8 <isr_rx_adv+0x5f8>)
   17d08:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   17d0c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17d10:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   17d14:	2b00      	cmp	r3, #0
   17d16:	f000 8123 	beq.w	17f60 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17d1a:	8c22      	ldrh	r2, [r4, #32]
   17d1c:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17d1e:	220b      	movs	r2, #11
   17d20:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   17d22:	f898 2000 	ldrb.w	r2, [r8]
   17d26:	f012 0f20 	tst.w	r2, #32
   17d2a:	f000 811f 	beq.w	17f6c <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17d2e:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17d30:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   17d32:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   17d36:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17d38:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17d3a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17d3e:	7f60      	ldrb	r0, [r4, #29]
   17d40:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   17d44:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   17d46:	404a      	eors	r2, r1
   17d48:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17d4a:	2201      	movs	r2, #1
   17d4c:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17d4e:	f7fc fb8d 	bl	1446c <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   17d52:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   17d56:	0952      	lsrs	r2, r2, #5
   17d58:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17d5c:	f362 0384 	bfi	r3, r2, #2, #3
   17d60:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   17d64:	4d54      	ldr	r5, [pc, #336]	; (17eb8 <isr_rx_adv+0x5f8>)
   17d66:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17d6a:	4956      	ldr	r1, [pc, #344]	; (17ec4 <isr_rx_adv+0x604>)
   17d6c:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17d70:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   17d74:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   17d76:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17d7a:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17d7e:	f203 233f 	addw	r3, r3, #575	; 0x23f
   17d82:	4a51      	ldr	r2, [pc, #324]	; (17ec8 <isr_rx_adv+0x608>)
   17d84:	fba2 2303 	umull	r2, r3, r2, r3
   17d88:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17d8a:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17d8c:	0873      	lsrs	r3, r6, #1
   17d8e:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17d90:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   17d92:	f898 3015 	ldrb.w	r3, [r8, #21]
   17d96:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17d9a:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17d9e:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17da0:	f04f 0b00 	mov.w	fp, #0
   17da4:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17da8:	4658      	mov	r0, fp
   17daa:	f7f7 fd19 	bl	f7e0 <radio_rx_ready_delay_get>
   17dae:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17db0:	f200 4052 	addw	r0, r0, #1106	; 0x452
   17db4:	a33e      	add	r3, pc, #248	; (adr r3, 17eb0 <isr_rx_adv+0x5f0>)
   17db6:	e9d3 2300 	ldrd	r2, r3, [r3]
   17dba:	4944      	ldr	r1, [pc, #272]	; (17ecc <isr_rx_adv+0x60c>)
   17dbc:	fba0 0101 	umull	r0, r1, r0, r1
   17dc0:	f7e9 f99c 	bl	10fc <__aeabi_uldivmod>
   17dc4:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   17dc8:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   17dca:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   17dce:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   17dd0:	2327      	movs	r3, #39	; 0x27
   17dd2:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   17dd4:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   17dd8:	429d      	cmp	r5, r3
   17dda:	bf38      	it	cc
   17ddc:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   17dde:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   17de0:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   17de2:	f7f7 fee3 	bl	fbac <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   17de6:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   17dea:	b292      	uxth	r2, r2
		conn_offset_us +=
   17dec:	fb09 9902 	mla	r9, r9, r2, r9
   17df0:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   17df2:	4659      	mov	r1, fp
   17df4:	4658      	mov	r0, fp
   17df6:	f7f7 fcf1 	bl	f7dc <radio_tx_chain_delay_get>
   17dfa:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   17dfe:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   17e02:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e06:	f240 4372 	movw	r3, #1138	; 0x472
   17e0a:	9300      	str	r3, [sp, #0]
   17e0c:	4b30      	ldr	r3, [pc, #192]	; (17ed0 <isr_rx_adv+0x610>)
   17e0e:	2205      	movs	r2, #5
   17e10:	4659      	mov	r1, fp
   17e12:	4658      	mov	r0, fp
   17e14:	f7f9 f850 	bl	10eb8 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17e18:	f240 4173 	movw	r1, #1139	; 0x473
   17e1c:	f7f9 fe84 	bl	11b28 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17e20:	79fb      	ldrb	r3, [r7, #7]
   17e22:	f003 030f 	and.w	r3, r3, #15
   17e26:	2b01      	cmp	r3, #1
   17e28:	f000 80a3 	beq.w	17f72 <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17e2c:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e2e:	3307      	adds	r3, #7
   17e30:	b2db      	uxtb	r3, r3
   17e32:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   17e34:	4b20      	ldr	r3, [pc, #128]	; (17eb8 <isr_rx_adv+0x5f8>)
   17e36:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e38:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17e3c:	f04f 0800 	mov.w	r8, #0
   17e40:	4f22      	ldr	r7, [pc, #136]	; (17ecc <isr_rx_adv+0x60c>)
   17e42:	a31b      	add	r3, pc, #108	; (adr r3, 17eb0 <isr_rx_adv+0x5f0>)
   17e44:	e9d3 2300 	ldrd	r2, r3, [r3]
   17e48:	fbaa 0107 	umull	r0, r1, sl, r7
   17e4c:	f7e9 f956 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e50:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   17e54:	fba6 6707 	umull	r6, r7, r6, r7
   17e58:	a315      	add	r3, pc, #84	; (adr r3, 17eb0 <isr_rx_adv+0x5f0>)
   17e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
   17e5e:	4630      	mov	r0, r6
   17e60:	4639      	mov	r1, r7
   17e62:	f7e9 f94b 	bl	10fc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e66:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17e6a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17e6e:	2100      	movs	r1, #0
   17e70:	4a18      	ldr	r2, [pc, #96]	; (17ed4 <isr_rx_adv+0x614>)
   17e72:	2307      	movs	r3, #7
   17e74:	fb03 f300 	mul.w	r3, r3, r0
   17e78:	fb02 3301 	mla	r3, r2, r1, r3
   17e7c:	fba0 0102 	umull	r0, r1, r0, r2
   17e80:	4419      	add	r1, r3
   17e82:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   17e86:	2300      	movs	r3, #0
   17e88:	1a30      	subs	r0, r6, r0
   17e8a:	eb67 0101 	sbc.w	r1, r7, r1
   17e8e:	f7e9 f935 	bl	10fc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   17e92:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17e94:	442b      	add	r3, r5
   17e96:	b29b      	uxth	r3, r3
   17e98:	f240 428a 	movw	r2, #1162	; 0x48a
   17e9c:	9208      	str	r2, [sp, #32]
   17e9e:	4a0e      	ldr	r2, [pc, #56]	; (17ed8 <isr_rx_adv+0x618>)
   17ea0:	9207      	str	r2, [sp, #28]
   17ea2:	9406      	str	r4, [sp, #24]
   17ea4:	4a0d      	ldr	r2, [pc, #52]	; (17edc <isr_rx_adv+0x61c>)
   17ea6:	9205      	str	r2, [sp, #20]
   17ea8:	e01a      	b.n	17ee0 <isr_rx_adv+0x620>
   17eaa:	bf00      	nop
   17eac:	f3af 8000 	nop.w
   17eb0:	1afd498d 	.word	0x1afd498d
   17eb4:	00000007 	.word	0x00000007
   17eb8:	20000ff4 	.word	0x20000ff4
   17ebc:	026259ff 	.word	0x026259ff
   17ec0:	01c9c37f 	.word	0x01c9c37f
   17ec4:	00031e00 	.word	0x00031e00
   17ec8:	431bde83 	.word	0x431bde83
   17ecc:	3b9aca00 	.word	0x3b9aca00
   17ed0:	00011b29 	.word	0x00011b29
   17ed4:	1afd498d 	.word	0x1afd498d
   17ed8:	00011ad5 	.word	0x00011ad5
   17edc:	0001668d 	.word	0x0001668d
   17ee0:	9304      	str	r3, [sp, #16]
   17ee2:	f8cd 800c 	str.w	r8, [sp, #12]
   17ee6:	9002      	str	r0, [sp, #8]
   17ee8:	f8cd b004 	str.w	fp, [sp, #4]
   17eec:	f8cd a000 	str.w	sl, [sp]
   17ef0:	464b      	mov	r3, r9
   17ef2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   17ef4:	4641      	mov	r1, r8
   17ef6:	4640      	mov	r0, r8
   17ef8:	f7f8 ff42 	bl	10d80 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17efc:	4603      	mov	r3, r0
   17efe:	2800      	cmp	r0, #0
   17f00:	f43f acff 	beq.w	17902 <isr_rx_adv+0x42>
   17f04:	2802      	cmp	r0, #2
   17f06:	d13d      	bne.n	17f84 <isr_rx_adv+0x6c4>
		return 0;
   17f08:	2300      	movs	r3, #0
   17f0a:	e4fa      	b.n	17902 <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   17f0c:	4923      	ldr	r1, [pc, #140]	; (17f9c <isr_rx_adv+0x6dc>)
   17f0e:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17f12:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17f16:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17f18:	fa52 f383 	uxtab	r3, r2, r3
   17f1c:	b2db      	uxtb	r3, r3
   17f1e:	e62b      	b.n	17b78 <isr_rx_adv+0x2b8>
		return 0;
   17f20:	2500      	movs	r5, #0
   17f22:	e633      	b.n	17b8c <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   17f24:	2206      	movs	r2, #6
   17f26:	2100      	movs	r1, #0
   17f28:	f105 0014 	add.w	r0, r5, #20
   17f2c:	f012 fd20 	bl	2a970 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17f30:	4641      	mov	r1, r8
   17f32:	f811 3b02 	ldrb.w	r3, [r1], #2
   17f36:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17f3a:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17f3c:	2206      	movs	r2, #6
   17f3e:	f105 000e 	add.w	r0, r5, #14
   17f42:	f7e8 f9bd 	bl	2c0 <memcpy>
   17f46:	e6b6      	b.n	17cb6 <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17f48:	4914      	ldr	r1, [pc, #80]	; (17f9c <isr_rx_adv+0x6dc>)
   17f4a:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17f4e:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   17f52:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17f54:	fa52 f383 	uxtab	r3, r2, r3
   17f58:	b2db      	uxtb	r3, r3
   17f5a:	e6d1      	b.n	17d00 <isr_rx_adv+0x440>
		return 0;
   17f5c:	2300      	movs	r3, #0
   17f5e:	e6d9      	b.n	17d14 <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17f60:	4040      	eors	r0, r0
   17f62:	f380 8811 	msr	BASEPRI, r0
   17f66:	f04f 0004 	mov.w	r0, #4
   17f6a:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17f6c:	2200      	movs	r2, #0
   17f6e:	72da      	strb	r2, [r3, #11]
   17f70:	e6ed      	b.n	17d4e <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   17f72:	4658      	mov	r0, fp
   17f74:	f8cd b000 	str.w	fp, [sp]
   17f78:	465b      	mov	r3, fp
   17f7a:	2203      	movs	r2, #3
   17f7c:	4659      	mov	r1, fp
   17f7e:	f7f8 ff9b 	bl	10eb8 <ticker_stop>
   17f82:	e753      	b.n	17e2c <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   17f84:	4040      	eors	r0, r0
   17f86:	f380 8811 	msr	BASEPRI, r0
   17f8a:	f04f 0004 	mov.w	r0, #4
   17f8e:	df02      	svc	2
	return 1;
   17f90:	2301      	movs	r3, #1
   17f92:	e4b6      	b.n	17902 <isr_rx_adv+0x42>
   17f94:	2301      	movs	r3, #1
   17f96:	e4b4      	b.n	17902 <isr_rx_adv+0x42>
			return 1;
   17f98:	2301      	movs	r3, #1
   17f9a:	e4b2      	b.n	17902 <isr_rx_adv+0x42>
   17f9c:	20000ff4 	.word	0x20000ff4

00017fa0 <radio_init>:
{
   17fa0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17fa4:	f89d e018 	ldrb.w	lr, [sp, #24]
   17fa8:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17fac:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17fae:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   17fb2:	4c3b      	ldr	r4, [pc, #236]	; (180a0 <radio_init+0x100>)
   17fb4:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   17fb6:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   17fba:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   17fbc:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   17fc0:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   17fc4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17fc8:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   17fcc:	f103 0803 	add.w	r8, r3, #3
   17fd0:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   17fd4:	f10e 0701 	add.w	r7, lr, #1
   17fd8:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   17fda:	3304      	adds	r3, #4
   17fdc:	b2dd      	uxtb	r5, r3
   17fde:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   17fe2:	f10e 0e02 	add.w	lr, lr, #2
   17fe6:	fa5f fe8e 	uxtb.w	lr, lr
   17fea:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   17fee:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   17ff2:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   17ff6:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   17ffa:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   17ffe:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   18002:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   18004:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   18008:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   1800a:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   1800e:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   18012:	2b2a      	cmp	r3, #42	; 0x2a
   18014:	d931      	bls.n	1807a <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   18016:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   1801a:	f02c 0c03 	bic.w	ip, ip, #3
   1801e:	fb1c f808 	smulbb	r8, ip, r8
   18022:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   18026:	4c1e      	ldr	r4, [pc, #120]	; (180a0 <radio_init+0x100>)
   18028:	2334      	movs	r3, #52	; 0x34
   1802a:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   1802e:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   18032:	4b1c      	ldr	r3, [pc, #112]	; (180a4 <radio_init+0x104>)
   18034:	fba3 c30e 	umull	ip, r3, r3, lr
   18038:	091b      	lsrs	r3, r3, #4
   1803a:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   1803e:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   18042:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   18044:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   18048:	442a      	add	r2, r5
   1804a:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   1804e:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   18052:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   18054:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   18058:	330a      	adds	r3, #10
   1805a:	b29b      	uxth	r3, r3
   1805c:	f023 0303 	bic.w	r3, r3, #3
   18060:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   18062:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   18066:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   1806a:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   1806e:	1a3f      	subs	r7, r7, r0
   18070:	d00d      	beq.n	1808e <radio_init+0xee>
		return (retcode + mem_size);
   18072:	4437      	add	r7, r6
}
   18074:	4638      	mov	r0, r7
   18076:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   1807a:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   1807e:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   18082:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   18086:	4c06      	ldr	r4, [pc, #24]	; (180a0 <radio_init+0x100>)
   18088:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   1808c:	e7cb      	b.n	18026 <radio_init+0x86>
	_radio.fc_ena = 1;
   1808e:	2201      	movs	r2, #1
   18090:	4b03      	ldr	r3, [pc, #12]	; (180a0 <radio_init+0x100>)
   18092:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   18096:	f7ec ff21 	bl	4edc <common_init>
	radio_setup();
   1809a:	f7f7 faed 	bl	f678 <radio_setup>
	return retcode;
   1809e:	e7e9      	b.n	18074 <radio_init+0xd4>
   180a0:	20000ff4 	.word	0x20000ff4
   180a4:	4ec4ec4f 	.word	0x4ec4ec4f

000180a8 <ll_reset>:
{
   180a8:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   180aa:	2103      	movs	r1, #3
   180ac:	2005      	movs	r0, #5
   180ae:	f7f9 ff9b 	bl	11fe8 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   180b2:	2104      	movs	r1, #4
   180b4:	2006      	movs	r0, #6
   180b6:	f7f9 ff97 	bl	11fe8 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   180ba:	2400      	movs	r4, #0
   180bc:	e006      	b.n	180cc <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   180be:	1de0      	adds	r0, r4, #7
   180c0:	21ff      	movs	r1, #255	; 0xff
   180c2:	b2c0      	uxtb	r0, r0
   180c4:	f7f9 ff90 	bl	11fe8 <role_disable>
	     conn_handle++) {
   180c8:	3401      	adds	r4, #1
   180ca:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   180cc:	4b1d      	ldr	r3, [pc, #116]	; (18144 <ll_reset+0x9c>)
   180ce:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   180d2:	429c      	cmp	r4, r3
   180d4:	d3f3      	bcc.n	180be <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   180d6:	4b1b      	ldr	r3, [pc, #108]	; (18144 <ll_reset+0x9c>)
   180d8:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   180dc:	f36f 0200 	bfc	r2, #0, #1
   180e0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   180e4:	2000      	movs	r0, #0
   180e6:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   180ea:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   180ee:	f360 0200 	bfi	r2, r0, #0, #1
   180f2:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   180f6:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   180fa:	2234      	movs	r2, #52	; 0x34
   180fc:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   18100:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   18104:	4910      	ldr	r1, [pc, #64]	; (18148 <ll_reset+0xa0>)
   18106:	fba1 1202 	umull	r1, r2, r1, r2
   1810a:	0912      	lsrs	r2, r2, #4
   1810c:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   18110:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   18114:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   18118:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   1811c:	3a01      	subs	r2, #1
   1811e:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   18122:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   18126:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   1812a:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   1812e:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   18132:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18136:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   1813a:	f002 fa69 	bl	1a610 <ll_filter_reset>
	common_init();
   1813e:	f7ec fecd 	bl	4edc <common_init>
   18142:	bd10      	pop	{r4, pc}
   18144:	20000ff4 	.word	0x20000ff4
   18148:	4ec4ec4f 	.word	0x4ec4ec4f

0001814c <radio_adv_data_get>:
}
   1814c:	4800      	ldr	r0, [pc, #0]	; (18150 <radio_adv_data_get+0x4>)
   1814e:	4770      	bx	lr
   18150:	2000101b 	.word	0x2000101b

00018154 <radio_scan_data_get>:
}
   18154:	4800      	ldr	r0, [pc, #0]	; (18158 <radio_scan_data_get+0x4>)
   18156:	4770      	bx	lr
   18158:	2000106b 	.word	0x2000106b

0001815c <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   1815c:	4b02      	ldr	r3, [pc, #8]	; (18168 <radio_adv_is_enabled+0xc>)
   1815e:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   18162:	f000 0001 	and.w	r0, r0, #1
   18166:	4770      	bx	lr
   18168:	20000ff4 	.word	0x20000ff4

0001816c <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   1816c:	4b06      	ldr	r3, [pc, #24]	; (18188 <radio_adv_filter_pol_get+0x1c>)
   1816e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   18172:	f013 0f01 	tst.w	r3, #1
   18176:	d004      	beq.n	18182 <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   18178:	4b03      	ldr	r3, [pc, #12]	; (18188 <radio_adv_filter_pol_get+0x1c>)
   1817a:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   1817e:	0980      	lsrs	r0, r0, #6
   18180:	4770      	bx	lr
	return 0;
   18182:	2000      	movs	r0, #0
}
   18184:	4770      	bx	lr
   18186:	bf00      	nop
   18188:	20000ff4 	.word	0x20000ff4

0001818c <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   1818c:	4b02      	ldr	r3, [pc, #8]	; (18198 <radio_scan_is_enabled+0xc>)
   1818e:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   18192:	f000 0001 	and.w	r0, r0, #1
   18196:	4770      	bx	lr
   18198:	20000ff4 	.word	0x20000ff4

0001819c <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   1819c:	4b06      	ldr	r3, [pc, #24]	; (181b8 <radio_scan_filter_pol_get+0x1c>)
   1819e:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   181a2:	f013 0f01 	tst.w	r3, #1
   181a6:	d005      	beq.n	181b4 <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   181a8:	4b03      	ldr	r3, [pc, #12]	; (181b8 <radio_scan_filter_pol_get+0x1c>)
   181aa:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   181ae:	f3c0 1001 	ubfx	r0, r0, #4, #2
   181b2:	4770      	bx	lr
	return 0;
   181b4:	2000      	movs	r0, #0
}
   181b6:	4770      	bx	lr
   181b8:	20000ff4 	.word	0x20000ff4
   181bc:	00000000 	.word	0x00000000

000181c0 <radio_connect_enable>:
{
   181c0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   181c4:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   181c6:	4c94      	ldr	r4, [pc, #592]	; (18418 <radio_connect_enable+0x258>)
   181c8:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   181cc:	b11c      	cbz	r4, 181d6 <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   181ce:	200c      	movs	r0, #12
}
   181d0:	b003      	add	sp, #12
   181d2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   181d6:	461f      	mov	r7, r3
   181d8:	4616      	mov	r6, r2
   181da:	460d      	mov	r5, r1
   181dc:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   181de:	488f      	ldr	r0, [pc, #572]	; (1841c <radio_connect_enable+0x25c>)
   181e0:	f7f7 f8fd 	bl	f3de <mem_acquire>
	if (!link) {
   181e4:	4681      	mov	r9, r0
   181e6:	2800      	cmp	r0, #0
   181e8:	f000 810f 	beq.w	1840a <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   181ec:	488c      	ldr	r0, [pc, #560]	; (18420 <radio_connect_enable+0x260>)
   181ee:	f7f7 f8f6 	bl	f3de <mem_acquire>
   181f2:	9001      	str	r0, [sp, #4]
	if (!conn) {
   181f4:	2800      	cmp	r0, #0
   181f6:	f000 8102 	beq.w	183fe <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   181fa:	f8df 821c 	ldr.w	r8, [pc, #540]	; 18418 <radio_connect_enable+0x258>
   181fe:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   18202:	f364 1386 	bfi	r3, r4, #6, #1
   18206:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   1820a:	2206      	movs	r2, #6
   1820c:	4629      	mov	r1, r5
   1820e:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   18212:	f7e8 f855 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   18216:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   1821a:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   1821e:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   18222:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   18226:	2100      	movs	r1, #0
   18228:	4608      	mov	r0, r1
   1822a:	f7f7 fad5 	bl	f7d8 <radio_tx_ready_delay_get>
   1822e:	f200 4052 	addw	r0, r0, #1106	; 0x452
   18232:	2400      	movs	r4, #0
   18234:	a376      	add	r3, pc, #472	; (adr r3, 18410 <radio_connect_enable+0x250>)
   18236:	e9d3 2300 	ldrd	r2, r3, [r3]
   1823a:	497a      	ldr	r1, [pc, #488]	; (18424 <radio_connect_enable+0x264>)
   1823c:	fba0 0101 	umull	r0, r1, r0, r1
   18240:	f7e8 ff5c 	bl	10fc <__aeabi_uldivmod>
   18244:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   18248:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   1824c:	9b01      	ldr	r3, [sp, #4]
   1824e:	f64f 72ff 	movw	r2, #65535	; 0xffff
   18252:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   18254:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   18258:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   1825c:	f7fe fe84 	bl	16f68 <access_addr_get>
   18260:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   18262:	2204      	movs	r2, #4
   18264:	4669      	mov	r1, sp
   18266:	9801      	ldr	r0, [sp, #4]
   18268:	3010      	adds	r0, #16
   1826a:	f7e8 f829 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   1826e:	a902      	add	r1, sp, #8
   18270:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   18274:	2203      	movs	r2, #3
   18276:	3014      	adds	r0, #20
   18278:	f7e8 f822 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   1827c:	2205      	movs	r2, #5
   1827e:	f508 718b 	add.w	r1, r8, #278	; 0x116
   18282:	9801      	ldr	r0, [sp, #4]
   18284:	3017      	adds	r0, #23
   18286:	f7e8 f81b 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   1828a:	9b01      	ldr	r3, [sp, #4]
   1828c:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   18290:	7f5a      	ldrb	r2, [r3, #29]
   18292:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   18296:	f364 1286 	bfi	r2, r4, #6, #1
   1829a:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   1829c:	2506      	movs	r5, #6
   1829e:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   182a0:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   182a2:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   182a4:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   182a8:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   182aa:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   182ac:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   182ae:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   182b2:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   182b4:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   182b8:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   182ba:	221b      	movs	r2, #27
   182bc:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   182be:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   182c0:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   182c4:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   182c6:	f44f 72a4 	mov.w	r2, #328	; 0x148
   182ca:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   182cc:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   182ce:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   182d2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   182d6:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   182da:	2101      	movs	r1, #1
   182dc:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   182e0:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   182e4:	f364 12c7 	bfi	r2, r4, #7, #1
   182e8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   182ec:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   182f0:	f361 0202 	bfi	r2, r1, #0, #3
   182f4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   182f8:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   182fc:	b2d2      	uxtb	r2, r2
   182fe:	f366 02c5 	bfi	r2, r6, #3, #3
   18302:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   18306:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   1830a:	f361 0202 	bfi	r2, r1, #0, #3
   1830e:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   18312:	7f5a      	ldrb	r2, [r3, #29]
   18314:	f364 12c7 	bfi	r2, r4, #7, #1
   18318:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   1831a:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   1831c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   18320:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   18324:	f364 0200 	bfi	r2, r4, #0, #1
   18328:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   1832c:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   18330:	f240 42e2 	movw	r2, #1250	; 0x4e2
   18334:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   18338:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   1833c:	f242 7510 	movw	r5, #10000	; 0x2710
   18340:	fb05 1202 	mla	r2, r5, r2, r1
   18344:	3a01      	subs	r2, #1
   18346:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   1834a:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   1834c:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   18350:	4a35      	ldr	r2, [pc, #212]	; (18428 <radio_connect_enable+0x268>)
   18352:	440a      	add	r2, r1
   18354:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   18358:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   1835c:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   18360:	4a32      	ldr	r2, [pc, #200]	; (1842c <radio_connect_enable+0x26c>)
   18362:	440a      	add	r2, r1
   18364:	fbb2 f2f1 	udiv	r2, r2, r1
   18368:	b292      	uxth	r2, r2
   1836a:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1836e:	1d81      	adds	r1, r0, #6
   18370:	428a      	cmp	r2, r1
   18372:	dd03      	ble.n	1837c <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   18374:	1a12      	subs	r2, r2, r0
   18376:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   18378:	3a06      	subs	r2, #6
   1837a:	b292      	uxth	r2, r2
   1837c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   18380:	2000      	movs	r0, #0
   18382:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   18386:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   1838a:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   1838e:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   18392:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   18396:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   1839a:	f360 0241 	bfi	r2, r0, #1, #1
   1839e:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   183a2:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   183a6:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   183aa:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   183ae:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   183b2:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   183b6:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   183ba:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   183be:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   183c2:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   183c6:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   183ca:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   183ce:	f002 0280 	and.w	r2, r2, #128	; 0x80
   183d2:	f360 12c7 	bfi	r2, r0, #7, #1
   183d6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   183da:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   183de:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   183e2:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   183e6:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   183ea:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   183ee:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   183f2:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   183f6:	4a08      	ldr	r2, [pc, #32]	; (18418 <radio_connect_enable+0x258>)
   183f8:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   183fc:	e6e8      	b.n	181d0 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   183fe:	4907      	ldr	r1, [pc, #28]	; (1841c <radio_connect_enable+0x25c>)
   18400:	4648      	mov	r0, r9
   18402:	f7f7 f808 	bl	f416 <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18406:	2007      	movs	r0, #7
   18408:	e6e2      	b.n	181d0 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1840a:	2007      	movs	r0, #7
   1840c:	e6e0      	b.n	181d0 <radio_connect_enable+0x10>
   1840e:	bf00      	nop
   18410:	1afd498d 	.word	0x1afd498d
   18414:	00000007 	.word	0x00000007
   18418:	20000ff4 	.word	0x20000ff4
   1841c:	20001138 	.word	0x20001138
   18420:	200010fc 	.word	0x200010fc
   18424:	3b9aca00 	.word	0x3b9aca00
   18428:	026259ff 	.word	0x026259ff
   1842c:	01c9c37f 	.word	0x01c9c37f

00018430 <ll_conn_update>:
{
   18430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   18434:	460c      	mov	r4, r1
   18436:	4690      	mov	r8, r2
   18438:	461f      	mov	r7, r3
   1843a:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   1843e:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   18442:	f7f9 fdb3 	bl	11fac <connection_get>
	if (!conn) {
   18446:	2800      	cmp	r0, #0
   18448:	d078      	beq.n	1853c <ll_conn_update+0x10c>
   1844a:	4603      	mov	r3, r0
	if (!cmd) {
   1844c:	b984      	cbnz	r4, 18470 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   1844e:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   18452:	f012 0f20 	tst.w	r2, #32
   18456:	d007      	beq.n	18468 <ll_conn_update+0x38>
		    (conn->llcp_features &
   18458:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   1845c:	f012 0f02 	tst.w	r2, #2
   18460:	d002      	beq.n	18468 <ll_conn_update+0x38>
			cmd++;
   18462:	3401      	adds	r4, #1
   18464:	b2e4      	uxtb	r4, r4
   18466:	e003      	b.n	18470 <ll_conn_update+0x40>
		} else if (conn->role) {
   18468:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1846c:	2a00      	cmp	r2, #0
   1846e:	db68      	blt.n	18542 <ll_conn_update+0x112>
	if (!cmd) {
   18470:	bb1c      	cbnz	r4, 184ba <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   18472:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   18476:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   1847a:	428a      	cmp	r2, r1
   1847c:	d002      	beq.n	18484 <ll_conn_update+0x54>
			return 1;
   1847e:	2001      	movs	r0, #1
   18480:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   18484:	2401      	movs	r4, #1
   18486:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1848a:	2000      	movs	r0, #0
   1848c:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   18490:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   18494:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   18498:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   1849c:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   184a0:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   184a4:	f360 0182 	bfi	r1, r0, #2, #1
   184a8:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   184ac:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   184b0:	4422      	add	r2, r4
   184b2:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   184b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   184ba:	3c01      	subs	r4, #1
		if (cmd) {
   184bc:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   184c0:	d01c      	beq.n	184fc <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   184c2:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   184c6:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   184ca:	4291      	cmp	r1, r2
   184cc:	d03c      	beq.n	18548 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   184ce:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   184d2:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   184d6:	2a03      	cmp	r2, #3
   184d8:	d002      	beq.n	184e0 <ll_conn_update+0xb0>
				return 1;
   184da:	2001      	movs	r0, #1
   184dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   184e0:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   184e4:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   184e8:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   184ec:	b2d2      	uxtb	r2, r2
   184ee:	f042 0208 	orr.w	r2, r2, #8
   184f2:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   184f6:	2000      	movs	r0, #0
   184f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   184fc:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   18500:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   18504:	428a      	cmp	r2, r1
   18506:	d002      	beq.n	1850e <ll_conn_update+0xde>
				return 1;
   18508:	2001      	movs	r0, #1
}
   1850a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   1850e:	2000      	movs	r0, #0
   18510:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   18514:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   18518:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   1851c:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   18520:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   18524:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   18528:	b2c9      	uxtb	r1, r1
   1852a:	f041 0108 	orr.w	r1, r1, #8
   1852e:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   18532:	3201      	adds	r2, #1
   18534:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   18538:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   1853c:	2001      	movs	r0, #1
   1853e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   18542:	2001      	movs	r0, #1
   18544:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   18548:	2001      	movs	r0, #1
   1854a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00018550 <ll_chm_update>:
{
   18550:	b570      	push	{r4, r5, r6, lr}
   18552:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   18554:	4c1c      	ldr	r4, [pc, #112]	; (185c8 <ll_chm_update+0x78>)
   18556:	f504 758b 	add.w	r5, r4, #278	; 0x116
   1855a:	2205      	movs	r2, #5
   1855c:	4601      	mov	r1, r0
   1855e:	4628      	mov	r0, r5
   18560:	f7e7 feae 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   18564:	2105      	movs	r1, #5
   18566:	4628      	mov	r0, r5
   18568:	f7f6 ffbd 	bl	f4e6 <util_ones_count_get>
	_radio.data_chan_count =
   1856c:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   18570:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   18574:	e000      	b.n	18578 <ll_chm_update+0x28>
{
   18576:	462b      	mov	r3, r5
	while (instance--) {
   18578:	1e5d      	subs	r5, r3, #1
   1857a:	b2ed      	uxtb	r5, r5
   1857c:	b303      	cbz	r3, 185c0 <ll_chm_update+0x70>
		conn = connection_get(instance);
   1857e:	4628      	mov	r0, r5
   18580:	f7f9 fd14 	bl	11fac <connection_get>
		if (!conn || conn->role) {
   18584:	4604      	mov	r4, r0
   18586:	2800      	cmp	r0, #0
   18588:	d0f5      	beq.n	18576 <ll_chm_update+0x26>
   1858a:	f990 301d 	ldrsb.w	r3, [r0, #29]
   1858e:	2b00      	cmp	r3, #0
   18590:	dbf1      	blt.n	18576 <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   18592:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18596:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   1859a:	429a      	cmp	r2, r3
   1859c:	d112      	bne.n	185c4 <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   1859e:	2205      	movs	r2, #5
   185a0:	4631      	mov	r1, r6
   185a2:	3079      	adds	r0, #121	; 0x79
   185a4:	f7e7 fe8c 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   185a8:	2301      	movs	r3, #1
   185aa:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   185ae:	2302      	movs	r3, #2
   185b0:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   185b4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   185b8:	3301      	adds	r3, #1
   185ba:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   185be:	e7da      	b.n	18576 <ll_chm_update+0x26>
	return 0;
   185c0:	2000      	movs	r0, #0
   185c2:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   185c4:	2001      	movs	r0, #1
}
   185c6:	bd70      	pop	{r4, r5, r6, pc}
   185c8:	20000ff4 	.word	0x20000ff4

000185cc <ll_chm_get>:
{
   185cc:	b538      	push	{r3, r4, r5, lr}
   185ce:	460d      	mov	r5, r1
	conn = connection_get(handle);
   185d0:	f7f9 fcec 	bl	11fac <connection_get>
	if (!conn) {
   185d4:	4604      	mov	r4, r0
   185d6:	b160      	cbz	r0, 185f2 <ll_chm_get+0x26>
		conn->chm_update = 0;
   185d8:	2300      	movs	r3, #0
   185da:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   185dc:	2205      	movs	r2, #5
   185de:	f104 0117 	add.w	r1, r4, #23
   185e2:	4628      	mov	r0, r5
   185e4:	f7e7 fe6c 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   185e8:	7f23      	ldrb	r3, [r4, #28]
   185ea:	2b00      	cmp	r3, #0
   185ec:	d1f4      	bne.n	185d8 <ll_chm_get+0xc>
	return 0;
   185ee:	2000      	movs	r0, #0
   185f0:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   185f2:	2001      	movs	r0, #1
}
   185f4:	bd38      	pop	{r3, r4, r5, pc}

000185f6 <ll_start_enc_req_send>:
{
   185f6:	b570      	push	{r4, r5, r6, lr}
   185f8:	460d      	mov	r5, r1
   185fa:	4616      	mov	r6, r2
	conn = connection_get(handle);
   185fc:	f7f9 fcd6 	bl	11fac <connection_get>
	if (!conn) {
   18600:	2800      	cmp	r0, #0
   18602:	d03e      	beq.n	18682 <ll_start_enc_req_send+0x8c>
   18604:	4604      	mov	r4, r0
	if (error_code) {
   18606:	b32d      	cbz	r5, 18654 <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   18608:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   1860c:	f013 0f40 	tst.w	r3, #64	; 0x40
   18610:	d111      	bne.n	18636 <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   18612:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   18616:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1861a:	4293      	cmp	r3, r2
   1861c:	d001      	beq.n	18622 <ll_start_enc_req_send+0x2c>
				return 1;
   1861e:	2001      	movs	r0, #1
   18620:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   18622:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   18626:	2203      	movs	r2, #3
   18628:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   1862c:	3301      	adds	r3, #1
   1862e:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   18632:	2000      	movs	r0, #0
   18634:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   18636:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   1863a:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   1863e:	429a      	cmp	r2, r3
   18640:	d001      	beq.n	18646 <ll_start_enc_req_send+0x50>
				return 1;
   18642:	2001      	movs	r0, #1
   18644:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   18646:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   1864a:	3301      	adds	r3, #1
   1864c:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   18650:	2000      	movs	r0, #0
   18652:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18654:	2210      	movs	r2, #16
   18656:	4631      	mov	r1, r6
   18658:	3083      	adds	r0, #131	; 0x83
   1865a:	f7e7 fe31 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   1865e:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   18662:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   18666:	4293      	cmp	r3, r2
   18668:	d001      	beq.n	1866e <ll_start_enc_req_send+0x78>
			return 1;
   1866a:	2001      	movs	r0, #1
}
   1866c:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   1866e:	2000      	movs	r0, #0
   18670:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   18674:	2203      	movs	r2, #3
   18676:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   1867a:	3301      	adds	r3, #1
   1867c:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   18680:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   18682:	2001      	movs	r0, #1
   18684:	bd70      	pop	{r4, r5, r6, pc}

00018686 <ll_feature_req_send>:
{
   18686:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   18688:	f7f9 fc90 	bl	11fac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   1868c:	b178      	cbz	r0, 186ae <ll_feature_req_send+0x28>
   1868e:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   18692:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   18696:	428a      	cmp	r2, r1
   18698:	d001      	beq.n	1869e <ll_feature_req_send+0x18>
		return 1;
   1869a:	2001      	movs	r0, #1
}
   1869c:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   1869e:	2104      	movs	r1, #4
   186a0:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   186a4:	3201      	adds	r2, #1
   186a6:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   186aa:	2000      	movs	r0, #0
   186ac:	bd08      	pop	{r3, pc}
		return 1;
   186ae:	2001      	movs	r0, #1
   186b0:	bd08      	pop	{r3, pc}

000186b2 <ll_version_ind_send>:
{
   186b2:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   186b4:	f7f9 fc7a 	bl	11fac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   186b8:	b178      	cbz	r0, 186da <ll_version_ind_send+0x28>
   186ba:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   186be:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   186c2:	428a      	cmp	r2, r1
   186c4:	d001      	beq.n	186ca <ll_version_ind_send+0x18>
		return 1;
   186c6:	2001      	movs	r0, #1
}
   186c8:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   186ca:	2105      	movs	r1, #5
   186cc:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   186d0:	3201      	adds	r2, #1
   186d2:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   186d6:	2000      	movs	r0, #0
   186d8:	bd08      	pop	{r3, pc}
		return 1;
   186da:	2001      	movs	r0, #1
   186dc:	bd08      	pop	{r3, pc}

000186de <ll_terminate_ind_send>:
{
   186de:	b510      	push	{r4, lr}
   186e0:	460c      	mov	r4, r1
	conn = connection_get(handle);
   186e2:	f7f9 fc63 	bl	11fac <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   186e6:	b170      	cbz	r0, 18706 <ll_terminate_ind_send+0x28>
   186e8:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   186ec:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   186f0:	4291      	cmp	r1, r2
   186f2:	d001      	beq.n	186f8 <ll_terminate_ind_send+0x1a>
		return 1;
   186f4:	2001      	movs	r0, #1
}
   186f6:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   186f8:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   186fc:	3201      	adds	r2, #1
   186fe:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   18702:	2000      	movs	r0, #0
   18704:	bd10      	pop	{r4, pc}
		return 1;
   18706:	2001      	movs	r0, #1
   18708:	bd10      	pop	{r4, pc}

0001870a <ll_tx_power_level_get>:
{
   1870a:	b510      	push	{r4, lr}
   1870c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1870e:	f7f9 fc4d 	bl	11fac <connection_get>
	if (!conn) {
   18712:	b110      	cbz	r0, 1871a <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   18714:	2000      	movs	r0, #0
   18716:	7020      	strb	r0, [r4, #0]
	return 0;
   18718:	bd10      	pop	{r4, pc}
		return 1;
   1871a:	2001      	movs	r0, #1
}
   1871c:	bd10      	pop	{r4, pc}

0001871e <ll_tx_power_get>:
	*min = 0;
   1871e:	2300      	movs	r3, #0
   18720:	7003      	strb	r3, [r0, #0]
	*max = 0;
   18722:	700b      	strb	r3, [r1, #0]
   18724:	4770      	bx	lr
	...

00018728 <ll_apto_get>:
{
   18728:	b510      	push	{r4, lr}
   1872a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   1872c:	f7f9 fc3e 	bl	11fac <connection_get>
	if (!conn) {
   18730:	b188      	cbz	r0, 18756 <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   18732:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   18736:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   18738:	fb03 f301 	mul.w	r3, r3, r1
   1873c:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   18740:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   18744:	4a05      	ldr	r2, [pc, #20]	; (1875c <ll_apto_get+0x34>)
   18746:	fb82 1203 	smull	r1, r2, r2, r3
   1874a:	17db      	asrs	r3, r3, #31
   1874c:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   18750:	8023      	strh	r3, [r4, #0]
	return 0;
   18752:	2000      	movs	r0, #0
   18754:	bd10      	pop	{r4, pc}
		return 1;
   18756:	2001      	movs	r0, #1
}
   18758:	bd10      	pop	{r4, pc}
   1875a:	bf00      	nop
   1875c:	10624dd3 	.word	0x10624dd3

00018760 <ll_apto_set>:
{
   18760:	b510      	push	{r4, lr}
   18762:	460c      	mov	r4, r1
	conn = connection_get(handle);
   18764:	f7f9 fc22 	bl	11fac <connection_get>
	if (!conn) {
   18768:	b178      	cbz	r0, 1878a <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   1876a:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   1876c:	f240 43e2 	movw	r3, #1250	; 0x4e2
   18770:	fb03 f301 	mul.w	r3, r3, r1
   18774:	f242 7110 	movw	r1, #10000	; 0x2710
   18778:	fb01 3404 	mla	r4, r1, r4, r3
   1877c:	3c01      	subs	r4, #1
   1877e:	fb94 f4f3 	sdiv	r4, r4, r3
   18782:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   18786:	2000      	movs	r0, #0
   18788:	bd10      	pop	{r4, pc}
		return 1;
   1878a:	2001      	movs	r0, #1
}
   1878c:	bd10      	pop	{r4, pc}

0001878e <ll_length_req_send>:
{
   1878e:	b538      	push	{r3, r4, r5, lr}
   18790:	460d      	mov	r5, r1
   18792:	4614      	mov	r4, r2
	conn = connection_get(handle);
   18794:	f7f9 fc0a 	bl	11fac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18798:	b1f0      	cbz	r0, 187d8 <ll_length_req_send+0x4a>
   1879a:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   1879e:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   187a2:	4291      	cmp	r1, r2
   187a4:	d001      	beq.n	187aa <ll_length_req_send+0x1c>
		return 1;
   187a6:	2001      	movs	r0, #1
   187a8:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   187aa:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   187ae:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   187b2:	428a      	cmp	r2, r1
   187b4:	d001      	beq.n	187ba <ll_length_req_send+0x2c>
		return 1;
   187b6:	2001      	movs	r0, #1
}
   187b8:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   187ba:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   187be:	f36f 0101 	bfc	r1, #0, #2
   187c2:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   187c6:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   187ca:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   187ce:	3201      	adds	r2, #1
   187d0:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   187d4:	2000      	movs	r0, #0
   187d6:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   187d8:	2001      	movs	r0, #1
   187da:	bd38      	pop	{r3, r4, r5, pc}

000187dc <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   187dc:	4b03      	ldr	r3, [pc, #12]	; (187ec <ll_length_default_get+0x10>)
   187de:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   187e2:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   187e4:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   187e8:	800b      	strh	r3, [r1, #0]
   187ea:	4770      	bx	lr
   187ec:	20000ff4 	.word	0x20000ff4

000187f0 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   187f0:	4b03      	ldr	r3, [pc, #12]	; (18800 <ll_length_default_set+0x10>)
   187f2:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   187f6:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   187fa:	2000      	movs	r0, #0
   187fc:	4770      	bx	lr
   187fe:	bf00      	nop
   18800:	20000ff4 	.word	0x20000ff4

00018804 <ll_length_max_get>:
{
   18804:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18806:	241b      	movs	r4, #27
   18808:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   1880a:	f44f 70a4 	mov.w	r0, #328	; 0x148
   1880e:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   18810:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   18812:	8018      	strh	r0, [r3, #0]
}
   18814:	bc10      	pop	{r4}
   18816:	4770      	bx	lr

00018818 <ll_phy_get>:
{
   18818:	b538      	push	{r3, r4, r5, lr}
   1881a:	460d      	mov	r5, r1
   1881c:	4614      	mov	r4, r2
	conn = connection_get(handle);
   1881e:	f7f9 fbc5 	bl	11fac <connection_get>
	if (!conn) {
   18822:	b158      	cbz	r0, 1883c <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   18824:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   18828:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1882c:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   1882e:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   18832:	f3c3 0302 	ubfx	r3, r3, #0, #3
   18836:	7023      	strb	r3, [r4, #0]
	return 0;
   18838:	2000      	movs	r0, #0
   1883a:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   1883c:	2001      	movs	r0, #1
}
   1883e:	bd38      	pop	{r3, r4, r5, pc}

00018840 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   18840:	4b03      	ldr	r3, [pc, #12]	; (18850 <ll_phy_default_set+0x10>)
   18842:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   18846:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   1884a:	2000      	movs	r0, #0
   1884c:	4770      	bx	lr
   1884e:	bf00      	nop
   18850:	20000ff4 	.word	0x20000ff4

00018854 <ll_phy_req_send>:
{
   18854:	b570      	push	{r4, r5, r6, lr}
   18856:	460e      	mov	r6, r1
   18858:	4615      	mov	r5, r2
   1885a:	461c      	mov	r4, r3
	conn = connection_get(handle);
   1885c:	f7f9 fba6 	bl	11fac <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   18860:	b338      	cbz	r0, 188b2 <ll_phy_req_send+0x5e>
   18862:	4603      	mov	r3, r0
   18864:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   18868:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   1886c:	4291      	cmp	r1, r2
   1886e:	d001      	beq.n	18874 <ll_phy_req_send+0x20>
		return 1;
   18870:	2001      	movs	r0, #1
   18872:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   18874:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   18878:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   1887c:	428a      	cmp	r2, r1
   1887e:	d001      	beq.n	18884 <ll_phy_req_send+0x30>
		return 1;
   18880:	2001      	movs	r0, #1
}
   18882:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   18884:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   18888:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   1888c:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   18890:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   18894:	f040 0002 	orr.w	r0, r0, #2
   18898:	f365 0000 	bfi	r0, r5, #0, #1
   1889c:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   188a0:	f364 1147 	bfi	r1, r4, #5, #3
   188a4:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   188a8:	3201      	adds	r2, #1
   188aa:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   188ae:	2000      	movs	r0, #0
   188b0:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   188b2:	2001      	movs	r0, #1
   188b4:	bd70      	pop	{r4, r5, r6, pc}
	...

000188b8 <radio_rx_get>:
{
   188b8:	b5f0      	push	{r4, r5, r6, r7, lr}
   188ba:	b083      	sub	sp, #12
   188bc:	4606      	mov	r6, r0
   188be:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   188c0:	4b1b      	ldr	r3, [pc, #108]	; (18930 <radio_rx_get+0x78>)
   188c2:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   188c6:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   188ca:	429a      	cmp	r2, r3
   188cc:	d024      	beq.n	18918 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   188ce:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   188d0:	783a      	ldrb	r2, [r7, #0]
   188d2:	4918      	ldr	r1, [pc, #96]	; (18934 <radio_rx_get+0x7c>)
   188d4:	f7f9 fb0c 	bl	11ef0 <tx_cmplt_get>
		if (!cmplt) {
   188d8:	4605      	mov	r5, r0
   188da:	b9d0      	cbnz	r0, 18912 <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   188dc:	4b14      	ldr	r3, [pc, #80]	; (18930 <radio_rx_get+0x78>)
   188de:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   188e2:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   188e6:	4604      	mov	r4, r0
   188e8:	e000      	b.n	188ec <radio_rx_get+0x34>
   188ea:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   188ec:	4b10      	ldr	r3, [pc, #64]	; (18930 <radio_rx_get+0x78>)
   188ee:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   188f2:	f10d 0105 	add.w	r1, sp, #5
   188f6:	f10d 0006 	add.w	r0, sp, #6
   188fa:	f7f9 faf9 	bl	11ef0 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   188fe:	2c00      	cmp	r4, #0
   18900:	d1f3      	bne.n	188ea <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   18902:	4284      	cmp	r4, r0
   18904:	d001      	beq.n	1890a <radio_rx_get+0x52>
   18906:	4604      	mov	r4, r0
   18908:	e7f0      	b.n	188ec <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   1890a:	6037      	str	r7, [r6, #0]
}
   1890c:	4628      	mov	r0, r5
   1890e:	b003      	add	sp, #12
   18910:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   18912:	2300      	movs	r3, #0
   18914:	6033      	str	r3, [r6, #0]
   18916:	e7f9      	b.n	1890c <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   18918:	4905      	ldr	r1, [pc, #20]	; (18930 <radio_rx_get+0x78>)
   1891a:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   1891e:	f201 1173 	addw	r1, r1, #371	; 0x173
   18922:	f7f9 fae5 	bl	11ef0 <tx_cmplt_get>
   18926:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   18928:	2300      	movs	r3, #0
   1892a:	6033      	str	r3, [r6, #0]
   1892c:	e7ee      	b.n	1890c <radio_rx_get+0x54>
   1892e:	bf00      	nop
   18930:	20000ff4 	.word	0x20000ff4
   18934:	20001167 	.word	0x20001167

00018938 <radio_rx_mem_release>:
{
   18938:	b570      	push	{r4, r5, r6, lr}
   1893a:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   1893c:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   1893e:	e003      	b.n	18948 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   18940:	491e      	ldr	r1, [pc, #120]	; (189bc <radio_rx_mem_release+0x84>)
   18942:	f7f6 fd68 	bl	f416 <mem_release>
{
   18946:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   18948:	b398      	cbz	r0, 189b2 <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   1894a:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   1894c:	7903      	ldrb	r3, [r0, #4]
   1894e:	3b01      	subs	r3, #1
   18950:	2b0b      	cmp	r3, #11
   18952:	d828      	bhi.n	189a6 <radio_rx_mem_release+0x6e>
   18954:	a201      	add	r2, pc, #4	; (adr r2, 1895c <radio_rx_mem_release+0x24>)
   18956:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1895a:	bf00      	nop
   1895c:	00018941 	.word	0x00018941
   18960:	00018941 	.word	0x00018941
   18964:	00018941 	.word	0x00018941
   18968:	00018941 	.word	0x00018941
   1896c:	00018941 	.word	0x00018941
   18970:	00018941 	.word	0x00018941
   18974:	0001898d 	.word	0x0001898d
   18978:	00018941 	.word	0x00018941
   1897c:	00018941 	.word	0x00018941
   18980:	00018941 	.word	0x00018941
   18984:	00018941 	.word	0x00018941
   18988:	00018941 	.word	0x00018941
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   1898c:	4d0c      	ldr	r5, [pc, #48]	; (189c0 <radio_rx_mem_release+0x88>)
   1898e:	88c2      	ldrh	r2, [r0, #6]
   18990:	f44f 71aa 	mov.w	r1, #340	; 0x154
   18994:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   18998:	f7f6 fd5e 	bl	f458 <mem_get>
			mem_release(conn, &_radio.conn_free);
   1899c:	f505 7184 	add.w	r1, r5, #264	; 0x108
   189a0:	f7f6 fd39 	bl	f416 <mem_release>
			break;
   189a4:	e7cf      	b.n	18946 <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   189a6:	4040      	eors	r0, r0
   189a8:	f380 8811 	msr	BASEPRI, r0
   189ac:	f04f 0004 	mov.w	r0, #4
   189b0:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   189b2:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   189b4:	20ff      	movs	r0, #255	; 0xff
   189b6:	f7f9 fa4f 	bl	11e58 <packet_rx_allocate>
   189ba:	bd70      	pop	{r4, r5, r6, pc}
   189bc:	20001120 	.word	0x20001120
   189c0:	20000ff4 	.word	0x20000ff4

000189c4 <do_radio_rx_fc_set>:
	if (req == ack) {
   189c4:	4291      	cmp	r1, r2
   189c6:	d007      	beq.n	189d8 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   189c8:	bb41      	cbnz	r1, 18a1c <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   189ca:	4b1c      	ldr	r3, [pc, #112]	; (18a3c <do_radio_rx_fc_set+0x78>)
   189cc:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   189d0:	4298      	cmp	r0, r3
   189d2:	d023      	beq.n	18a1c <do_radio_rx_fc_set+0x58>
		return 1;
   189d4:	2001      	movs	r0, #1
   189d6:	4770      	bx	lr
{
   189d8:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   189da:	4b18      	ldr	r3, [pc, #96]	; (18a3c <do_radio_rx_fc_set+0x78>)
   189dc:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   189e0:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   189e4:	429c      	cmp	r4, r3
   189e6:	d002      	beq.n	189ee <do_radio_rx_fc_set+0x2a>
			return 1;
   189e8:	2001      	movs	r0, #1
}
   189ea:	bc30      	pop	{r4, r5}
   189ec:	4770      	bx	lr
			if (ack1 == 0) {
   189ee:	b19a      	cbz	r2, 18a18 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   189f0:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   189f2:	3b01      	subs	r3, #1
   189f4:	b2db      	uxtb	r3, r3
   189f6:	4c11      	ldr	r4, [pc, #68]	; (18a3c <do_radio_rx_fc_set+0x78>)
   189f8:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   189fc:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   18a00:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   18a02:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   18a06:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   18a0a:	b2db      	uxtb	r3, r3
   18a0c:	4299      	cmp	r1, r3
   18a0e:	d00f      	beq.n	18a30 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   18a10:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   18a14:	2001      	movs	r0, #1
   18a16:	e7e8      	b.n	189ea <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   18a18:	2303      	movs	r3, #3
   18a1a:	e7ea      	b.n	189f2 <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   18a1c:	b151      	cbz	r1, 18a34 <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   18a1e:	31b7      	adds	r1, #183	; 0xb7
   18a20:	4b06      	ldr	r3, [pc, #24]	; (18a3c <do_radio_rx_fc_set+0x78>)
   18a22:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   18a26:	88cb      	ldrh	r3, [r1, #6]
   18a28:	4298      	cmp	r0, r3
   18a2a:	d005      	beq.n	18a38 <do_radio_rx_fc_set+0x74>
		return 1;
   18a2c:	2001      	movs	r0, #1
   18a2e:	4770      	bx	lr
	return 0;
   18a30:	2000      	movs	r0, #0
   18a32:	e7da      	b.n	189ea <do_radio_rx_fc_set+0x26>
   18a34:	4608      	mov	r0, r1
   18a36:	4770      	bx	lr
   18a38:	2000      	movs	r0, #0
   18a3a:	4770      	bx	lr
   18a3c:	20000ff4 	.word	0x20000ff4

00018a40 <radio_rx_fc_set>:
{
   18a40:	b538      	push	{r3, r4, r5, lr}
   18a42:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   18a44:	4b1b      	ldr	r3, [pc, #108]	; (18ab4 <radio_rx_fc_set+0x74>)
   18a46:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   18a4a:	b338      	cbz	r0, 18a9c <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   18a4c:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18a50:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   18a52:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   18a56:	b141      	cbz	r1, 18a6a <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   18a58:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18a5c:	429c      	cmp	r4, r3
   18a5e:	d023      	beq.n	18aa8 <radio_rx_fc_set+0x68>
   18a60:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   18a62:	4629      	mov	r1, r5
   18a64:	f7ff ffae 	bl	189c4 <do_radio_rx_fc_set>
   18a68:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18a6a:	4b12      	ldr	r3, [pc, #72]	; (18ab4 <radio_rx_fc_set+0x74>)
   18a6c:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   18a70:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18a74:	4298      	cmp	r0, r3
   18a76:	d001      	beq.n	18a7c <radio_rx_fc_set+0x3c>
	return 0;
   18a78:	4608      	mov	r0, r1
   18a7a:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18a7c:	4295      	cmp	r5, r2
   18a7e:	d015      	beq.n	18aac <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   18a80:	4b0c      	ldr	r3, [pc, #48]	; (18ab4 <radio_rx_fc_set+0x74>)
   18a82:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18a86:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18a8a:	4298      	cmp	r0, r3
   18a8c:	d010      	beq.n	18ab0 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   18a8e:	4b09      	ldr	r3, [pc, #36]	; (18ab4 <radio_rx_fc_set+0x74>)
   18a90:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   18a94:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   18a96:	429d      	cmp	r5, r3
   18a98:	d001      	beq.n	18a9e <radio_rx_fc_set+0x5e>
	return 0;
   18a9a:	4608      	mov	r0, r1
}
   18a9c:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   18a9e:	4b05      	ldr	r3, [pc, #20]	; (18ab4 <radio_rx_fc_set+0x74>)
   18aa0:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   18aa4:	4608      	mov	r0, r1
   18aa6:	bd38      	pop	{r3, r4, r5, pc}
   18aa8:	2000      	movs	r0, #0
   18aaa:	bd38      	pop	{r3, r4, r5, pc}
   18aac:	4608      	mov	r0, r1
   18aae:	bd38      	pop	{r3, r4, r5, pc}
   18ab0:	4608      	mov	r0, r1
   18ab2:	bd38      	pop	{r3, r4, r5, pc}
   18ab4:	20000ff4 	.word	0x20000ff4

00018ab8 <radio_tx_mem_acquire>:
{
   18ab8:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   18aba:	4802      	ldr	r0, [pc, #8]	; (18ac4 <radio_tx_mem_acquire+0xc>)
   18abc:	f7f6 fc8f 	bl	f3de <mem_acquire>
}
   18ac0:	bd08      	pop	{r3, pc}
   18ac2:	bf00      	nop
   18ac4:	20001154 	.word	0x20001154

00018ac8 <radio_tx_mem_release>:
{
   18ac8:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   18aca:	4902      	ldr	r1, [pc, #8]	; (18ad4 <radio_tx_mem_release+0xc>)
   18acc:	f7f6 fca3 	bl	f416 <mem_release>
   18ad0:	bd08      	pop	{r3, pc}
   18ad2:	bf00      	nop
   18ad4:	20001154 	.word	0x20001154

00018ad8 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   18ad8:	b570      	push	{r4, r5, r6, lr}
   18ada:	b088      	sub	sp, #32
   18adc:	4605      	mov	r5, r0
   18ade:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   18ae0:	4b36      	ldr	r3, [pc, #216]	; (18bbc <radio_tx_mem_enqueue+0xe4>)
   18ae2:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   18ae6:	3401      	adds	r4, #1
   18ae8:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   18aea:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   18aee:	429c      	cmp	r4, r3
   18af0:	d02a      	beq.n	18b48 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   18af2:	4628      	mov	r0, r5
   18af4:	f7f9 fa5a 	bl	11fac <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   18af8:	4601      	mov	r1, r0
   18afa:	2800      	cmp	r0, #0
   18afc:	d057      	beq.n	18bae <radio_tx_mem_enqueue+0xd6>
   18afe:	4b2f      	ldr	r3, [pc, #188]	; (18bbc <radio_tx_mem_enqueue+0xe4>)
   18b00:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   18b04:	b2db      	uxtb	r3, r3
   18b06:	429c      	cmp	r4, r3
   18b08:	d053      	beq.n	18bb2 <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18b0a:	7972      	ldrb	r2, [r6, #5]
   18b0c:	4b2b      	ldr	r3, [pc, #172]	; (18bbc <radio_tx_mem_enqueue+0xe4>)
   18b0e:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   18b12:	3b07      	subs	r3, #7
   18b14:	429a      	cmp	r2, r3
   18b16:	d819      	bhi.n	18b4c <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   18b18:	4b28      	ldr	r3, [pc, #160]	; (18bbc <radio_tx_mem_enqueue+0xe4>)
   18b1a:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18b1e:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18b22:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   18b26:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18b2a:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18b2e:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   18b32:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   18b34:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18b38:	f991 301d 	ldrsb.w	r3, [r1, #29]
   18b3c:	2b00      	cmp	r3, #0
   18b3e:	db0b      	blt.n	18b58 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18b40:	2300      	movs	r3, #0
}
   18b42:	4618      	mov	r0, r3
   18b44:	b008      	add	sp, #32
   18b46:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18b48:	2400      	movs	r4, #0
   18b4a:	e7d2      	b.n	18af2 <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18b4c:	4040      	eors	r0, r0
   18b4e:	f380 8811 	msr	BASEPRI, r0
   18b52:	f04f 0004 	mov.w	r0, #4
   18b56:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18b58:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   18b5a:	b363      	cbz	r3, 18bb6 <radio_tx_mem_enqueue+0xde>
   18b5c:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18b60:	f013 0f02 	tst.w	r3, #2
   18b64:	d001      	beq.n	18b6a <radio_tx_mem_enqueue+0x92>
	return 0;
   18b66:	2300      	movs	r3, #0
   18b68:	e7eb      	b.n	18b42 <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   18b6a:	f043 0302 	orr.w	r3, r3, #2
   18b6e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   18b72:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   18b74:	3207      	adds	r2, #7
   18b76:	9106      	str	r1, [sp, #24]
   18b78:	4b11      	ldr	r3, [pc, #68]	; (18bc0 <radio_tx_mem_enqueue+0xe8>)
   18b7a:	9305      	str	r3, [sp, #20]
   18b7c:	2000      	movs	r0, #0
   18b7e:	9004      	str	r0, [sp, #16]
   18b80:	2301      	movs	r3, #1
   18b82:	9303      	str	r3, [sp, #12]
   18b84:	9002      	str	r0, [sp, #8]
   18b86:	9001      	str	r0, [sp, #4]
   18b88:	9000      	str	r0, [sp, #0]
   18b8a:	4603      	mov	r3, r0
   18b8c:	b2d2      	uxtb	r2, r2
   18b8e:	2103      	movs	r1, #3
   18b90:	f7f8 f944 	bl	10e1c <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18b94:	4603      	mov	r3, r0
   18b96:	2800      	cmp	r0, #0
   18b98:	d0d3      	beq.n	18b42 <radio_tx_mem_enqueue+0x6a>
   18b9a:	2802      	cmp	r0, #2
   18b9c:	d101      	bne.n	18ba2 <radio_tx_mem_enqueue+0xca>
	return 0;
   18b9e:	2300      	movs	r3, #0
   18ba0:	e7cf      	b.n	18b42 <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   18ba2:	4040      	eors	r0, r0
   18ba4:	f380 8811 	msr	BASEPRI, r0
   18ba8:	f04f 0004 	mov.w	r0, #4
   18bac:	df02      	svc	2
		return 1;
   18bae:	2301      	movs	r3, #1
   18bb0:	e7c7      	b.n	18b42 <radio_tx_mem_enqueue+0x6a>
   18bb2:	2301      	movs	r3, #1
   18bb4:	e7c5      	b.n	18b42 <radio_tx_mem_enqueue+0x6a>
	return 0;
   18bb6:	2300      	movs	r3, #0
   18bb8:	e7c3      	b.n	18b42 <radio_tx_mem_enqueue+0x6a>
   18bba:	bf00      	nop
   18bbc:	20000ff4 	.word	0x20000ff4
   18bc0:	00011e3d 	.word	0x00011e3d

00018bc4 <ll_enc_req_send>:
{
   18bc4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   18bc8:	4680      	mov	r8, r0
   18bca:	4689      	mov	r9, r1
   18bcc:	4616      	mov	r6, r2
   18bce:	461f      	mov	r7, r3
	conn = connection_get(handle);
   18bd0:	f7f9 f9ec 	bl	11fac <connection_get>
	if (!conn) {
   18bd4:	2800      	cmp	r0, #0
   18bd6:	d055      	beq.n	18c84 <ll_enc_req_send+0xc0>
   18bd8:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   18bda:	f7ff ff6d 	bl	18ab8 <radio_tx_mem_acquire>
	if (node_tx) {
   18bde:	4604      	mov	r4, r0
   18be0:	2800      	cmp	r0, #0
   18be2:	d051      	beq.n	18c88 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   18be4:	2210      	movs	r2, #16
   18be6:	4639      	mov	r1, r7
   18be8:	f105 0083 	add.w	r0, r5, #131	; 0x83
   18bec:	f7e7 fb68 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   18bf0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   18bf4:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   18bf8:	d008      	beq.n	18c0c <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   18bfa:	2b30      	cmp	r3, #48	; 0x30
   18bfc:	d02d      	beq.n	18c5a <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   18bfe:	4620      	mov	r0, r4
   18c00:	f7ff ff62 	bl	18ac8 <radio_tx_mem_release>
			return 1;
   18c04:	2301      	movs	r3, #1
}
   18c06:	4618      	mov	r0, r3
   18c08:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c0c:	7923      	ldrb	r3, [r4, #4]
   18c0e:	f043 0303 	orr.w	r3, r3, #3
   18c12:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   18c14:	2317      	movs	r3, #23
   18c16:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18c18:	2303      	movs	r3, #3
   18c1a:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18c1c:	2208      	movs	r2, #8
   18c1e:	4649      	mov	r1, r9
   18c20:	18a0      	adds	r0, r4, r2
   18c22:	f7e7 fb4d 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   18c26:	7833      	ldrb	r3, [r6, #0]
   18c28:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   18c2a:	7873      	ldrb	r3, [r6, #1]
   18c2c:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   18c2e:	2108      	movs	r1, #8
   18c30:	f104 0012 	add.w	r0, r4, #18
   18c34:	f7f8 fd74 	bl	11720 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18c38:	2104      	movs	r1, #4
   18c3a:	f104 001a 	add.w	r0, r4, #26
   18c3e:	f7f8 fd6f 	bl	11720 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   18c42:	4621      	mov	r1, r4
   18c44:	4640      	mov	r0, r8
   18c46:	f7ff ff47 	bl	18ad8 <radio_tx_mem_enqueue>
   18c4a:	4603      	mov	r3, r0
   18c4c:	2800      	cmp	r0, #0
   18c4e:	d0da      	beq.n	18c06 <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18c50:	4620      	mov	r0, r4
   18c52:	f7ff ff39 	bl	18ac8 <radio_tx_mem_release>
			return 1;
   18c56:	2301      	movs	r3, #1
   18c58:	e7d5      	b.n	18c06 <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18c5a:	2208      	movs	r2, #8
   18c5c:	4649      	mov	r1, r9
   18c5e:	f105 0079 	add.w	r0, r5, #121	; 0x79
   18c62:	f7e7 fb2d 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   18c66:	7833      	ldrb	r3, [r6, #0]
   18c68:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18c6c:	7873      	ldrb	r3, [r6, #1]
   18c6e:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   18c72:	7923      	ldrb	r3, [r4, #4]
   18c74:	f043 0303 	orr.w	r3, r3, #3
   18c78:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18c7a:	2301      	movs	r3, #1
   18c7c:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18c7e:	230a      	movs	r3, #10
   18c80:	71e3      	strb	r3, [r4, #7]
   18c82:	e7de      	b.n	18c42 <ll_enc_req_send+0x7e>
		return 1;
   18c84:	2301      	movs	r3, #1
   18c86:	e7be      	b.n	18c06 <ll_enc_req_send+0x42>
	return 1;
   18c88:	2301      	movs	r3, #1
   18c8a:	e7bc      	b.n	18c06 <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18c8c:	4770      	bx	lr

00018c8e <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18c8e:	b508      	push	{r3, lr}
	if (bm) {
   18c90:	b910      	cbnz	r0, 18c98 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   18c92:	f000 fe5f 	bl	19954 <rpa_refresh_stop>
   18c96:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18c98:	f000 fe48 	bl	1992c <rpa_refresh_start>
   18c9c:	bd08      	pop	{r3, pc}
	...

00018ca0 <radio_adv_enable>:
{
   18ca0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   18ca4:	b08f      	sub	sp, #60	; 0x3c
   18ca6:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18caa:	2202      	movs	r2, #2
   18cac:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18cae:	4aca      	ldr	r2, [pc, #808]	; (18fd8 <radio_adv_enable+0x338>)
   18cb0:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   18cb4:	f012 0f01 	tst.w	r2, #1
   18cb8:	d003      	beq.n	18cc2 <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18cba:	200c      	movs	r0, #12
}
   18cbc:	b00f      	add	sp, #60	; 0x3c
   18cbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   18cc2:	461d      	mov	r5, r3
   18cc4:	460c      	mov	r4, r1
   18cc6:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   18cc8:	4bc3      	ldr	r3, [pc, #780]	; (18fd8 <radio_adv_enable+0x338>)
   18cca:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   18cce:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   18cd2:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   18cd6:	3220      	adds	r2, #32
   18cd8:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   18cdc:	f898 3007 	ldrb.w	r3, [r8, #7]
   18ce0:	f003 030f 	and.w	r3, r3, #15
   18ce4:	2b01      	cmp	r3, #1
   18ce6:	d97f      	bls.n	18de8 <radio_adv_enable+0x148>
		conn = NULL;
   18ce8:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   18cea:	4abb      	ldr	r2, [pc, #748]	; (18fd8 <radio_adv_enable+0x338>)
   18cec:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   18cf0:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   18cf4:	a80e      	add	r0, sp, #56	; 0x38
   18cf6:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   18cfa:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   18cfe:	f365 1387 	bfi	r3, r5, #6, #2
   18d02:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   18d06:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   18d0a:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   18d0e:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   18d12:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   18d14:	2327      	movs	r3, #39	; 0x27
   18d16:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18d18:	2300      	movs	r3, #0
   18d1a:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18d1c:	2101      	movs	r1, #1
   18d1e:	f7f6 fbe2 	bl	f4e6 <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   18d22:	f898 5007 	ldrb.w	r5, [r8, #7]
   18d26:	f005 050f 	and.w	r5, r5, #15
   18d2a:	2d01      	cmp	r5, #1
   18d2c:	f000 8108 	beq.w	18f40 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18d30:	2d02      	cmp	r5, #2
   18d32:	f000 8111 	beq.w	18f58 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   18d36:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18d38:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18d3c:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18d40:	0080      	lsls	r0, r0, #2
   18d42:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   18d44:	a3a2      	add	r3, pc, #648	; (adr r3, 18fd0 <radio_adv_enable+0x330>)
   18d46:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d4a:	49a4      	ldr	r1, [pc, #656]	; (18fdc <radio_adv_enable+0x33c>)
   18d4c:	fba0 0101 	umull	r0, r1, r0, r1
   18d50:	f7e8 f9d4 	bl	10fc <__aeabi_uldivmod>
   18d54:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18d58:	4a9f      	ldr	r2, [pc, #636]	; (18fd8 <radio_adv_enable+0x338>)
   18d5a:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18d5c:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18d5e:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18d60:	4299      	cmp	r1, r3
   18d62:	bf38      	it	cc
   18d64:	4619      	movcc	r1, r3
   18d66:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18d68:	2d01      	cmp	r5, #1
   18d6a:	f000 80ff 	beq.w	18f6c <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d6e:	f7f8 f96f 	bl	11050 <ticker_ticks_now_get>
   18d72:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   18d74:	b2a4      	uxth	r4, r4
   18d76:	489a      	ldr	r0, [pc, #616]	; (18fe0 <radio_adv_enable+0x340>)
   18d78:	fba4 0100 	umull	r0, r1, r4, r0
   18d7c:	2391      	movs	r3, #145	; 0x91
   18d7e:	fb03 1104 	mla	r1, r3, r4, r1
   18d82:	a393      	add	r3, pc, #588	; (adr r3, 18fd0 <radio_adv_enable+0x330>)
   18d84:	e9d3 2300 	ldrd	r2, r3, [r3]
   18d88:	f7e8 f9b8 	bl	10fc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d8c:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18d90:	4b91      	ldr	r3, [pc, #580]	; (18fd8 <radio_adv_enable+0x338>)
   18d92:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18d94:	4443      	add	r3, r8
   18d96:	b29b      	uxth	r3, r3
		ret =
   18d98:	a90d      	add	r1, sp, #52	; 0x34
   18d9a:	9108      	str	r1, [sp, #32]
   18d9c:	4991      	ldr	r1, [pc, #580]	; (18fe4 <radio_adv_enable+0x344>)
   18d9e:	9107      	str	r1, [sp, #28]
   18da0:	2000      	movs	r0, #0
   18da2:	9006      	str	r0, [sp, #24]
   18da4:	4990      	ldr	r1, [pc, #576]	; (18fe8 <radio_adv_enable+0x348>)
   18da6:	9105      	str	r1, [sp, #20]
   18da8:	9304      	str	r3, [sp, #16]
   18daa:	9003      	str	r0, [sp, #12]
   18dac:	9002      	str	r0, [sp, #8]
   18dae:	9201      	str	r2, [sp, #4]
   18db0:	9000      	str	r0, [sp, #0]
   18db2:	463b      	mov	r3, r7
   18db4:	2205      	movs	r2, #5
   18db6:	2103      	movs	r1, #3
   18db8:	f7f7 ffe2 	bl	10d80 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18dbc:	2802      	cmp	r0, #2
   18dbe:	f000 813b 	beq.w	19038 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   18dc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18dc4:	2b00      	cmp	r3, #0
   18dc6:	f040 80f2 	bne.w	18fae <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   18dca:	4b83      	ldr	r3, [pc, #524]	; (18fd8 <radio_adv_enable+0x338>)
   18dcc:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18dd0:	f042 0201 	orr.w	r2, r2, #1
   18dd4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18dd8:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18ddc:	f013 0f01 	tst.w	r3, #1
   18de0:	f000 812e 	beq.w	19040 <radio_adv_enable+0x3a0>
		return 0;
   18de4:	2000      	movs	r0, #0
   18de6:	e769      	b.n	18cbc <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   18de8:	4b7b      	ldr	r3, [pc, #492]	; (18fd8 <radio_adv_enable+0x338>)
   18dea:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   18dee:	b10b      	cbz	r3, 18df4 <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   18df0:	200c      	movs	r0, #12
   18df2:	e763      	b.n	18cbc <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   18df4:	487d      	ldr	r0, [pc, #500]	; (18fec <radio_adv_enable+0x34c>)
   18df6:	f7f6 faf2 	bl	f3de <mem_acquire>
		if (!link) {
   18dfa:	4681      	mov	r9, r0
   18dfc:	2800      	cmp	r0, #0
   18dfe:	f000 8124 	beq.w	1904a <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   18e02:	487b      	ldr	r0, [pc, #492]	; (18ff0 <radio_adv_enable+0x350>)
   18e04:	f7f6 faeb 	bl	f3de <mem_acquire>
		if (!conn) {
   18e08:	4606      	mov	r6, r0
   18e0a:	2800      	cmp	r0, #0
   18e0c:	f000 8092 	beq.w	18f34 <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   18e10:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18e14:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   18e16:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18e1a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18e1e:	7f43      	ldrb	r3, [r0, #29]
   18e20:	f36f 1386 	bfc	r3, #6, #1
   18e24:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   18e26:	2300      	movs	r3, #0
   18e28:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18e2a:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18e2c:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18e2e:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18e30:	4969      	ldr	r1, [pc, #420]	; (18fd8 <radio_adv_enable+0x338>)
   18e32:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   18e36:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18e38:	221b      	movs	r2, #27
   18e3a:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18e3c:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18e3e:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   18e42:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   18e44:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18e48:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18e4a:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18e4c:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18e50:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   18e54:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18e58:	2001      	movs	r0, #1
   18e5a:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18e5e:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   18e62:	f363 12c7 	bfi	r2, r3, #7, #1
   18e66:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18e6a:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18e6e:	f360 0202 	bfi	r2, r0, #0, #3
   18e72:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   18e76:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18e7a:	b2d2      	uxtb	r2, r2
   18e7c:	f36e 02c5 	bfi	r2, lr, #3, #3
   18e80:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   18e84:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18e88:	f360 0202 	bfi	r2, r0, #0, #3
   18e8c:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18e90:	7f72      	ldrb	r2, [r6, #29]
   18e92:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   18e96:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18e98:	2206      	movs	r2, #6
   18e9a:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18e9c:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18ea0:	f002 02de 	and.w	r2, r2, #222	; 0xde
   18ea4:	f363 0241 	bfi	r2, r3, #1, #1
   18ea8:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18eac:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18eae:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18eb0:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   18eb2:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   18eb6:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   18eba:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   18ebe:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   18ec2:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   18ec6:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   18eca:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   18ece:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   18ed2:	f363 0241 	bfi	r2, r3, #1, #1
   18ed6:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   18eda:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   18ede:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   18ee2:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   18ee6:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   18eea:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   18eee:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   18ef2:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   18ef6:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   18efa:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   18efe:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   18f02:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   18f06:	f002 0280 	and.w	r2, r2, #128	; 0x80
   18f0a:	f363 12c7 	bfi	r2, r3, #7, #1
   18f0e:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   18f12:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   18f16:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18f1a:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18f1e:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   18f22:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   18f26:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18f2a:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18f2e:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   18f32:	e6da      	b.n	18cea <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   18f34:	492d      	ldr	r1, [pc, #180]	; (18fec <radio_adv_enable+0x34c>)
   18f36:	4648      	mov	r0, r9
   18f38:	f7f6 fa6d 	bl	f416 <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18f3c:	2007      	movs	r0, #7
   18f3e:	e6bd      	b.n	18cbc <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18f40:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18f44:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18f48:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18f4c:	0080      	lsls	r0, r0, #2
   18f4e:	b280      	uxth	r0, r0
   18f50:	f500 709c 	add.w	r0, r0, #312	; 0x138
   18f54:	b280      	uxth	r0, r0
   18f56:	e6f5      	b.n	18d44 <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18f58:	b280      	uxth	r0, r0
   18f5a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18f5e:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18f62:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   18f66:	0080      	lsls	r0, r0, #2
   18f68:	b280      	uxth	r0, r0
   18f6a:	e6eb      	b.n	18d44 <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18f6c:	2c00      	cmp	r4, #0
   18f6e:	f47f aefe 	bne.w	18d6e <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   18f72:	f7f8 f86d 	bl	11050 <ticker_ticks_now_get>
   18f76:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18f78:	4b17      	ldr	r3, [pc, #92]	; (18fd8 <radio_adv_enable+0x338>)
   18f7a:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18f7c:	eb08 0203 	add.w	r2, r8, r3
   18f80:	b293      	uxth	r3, r2
   18f82:	a90d      	add	r1, sp, #52	; 0x34
   18f84:	9108      	str	r1, [sp, #32]
   18f86:	4917      	ldr	r1, [pc, #92]	; (18fe4 <radio_adv_enable+0x344>)
   18f88:	9107      	str	r1, [sp, #28]
   18f8a:	2000      	movs	r0, #0
   18f8c:	9006      	str	r0, [sp, #24]
   18f8e:	4916      	ldr	r1, [pc, #88]	; (18fe8 <radio_adv_enable+0x348>)
   18f90:	9105      	str	r1, [sp, #20]
   18f92:	9304      	str	r3, [sp, #16]
   18f94:	9003      	str	r0, [sp, #12]
   18f96:	9002      	str	r0, [sp, #8]
   18f98:	9201      	str	r2, [sp, #4]
   18f9a:	9000      	str	r0, [sp, #0]
   18f9c:	4623      	mov	r3, r4
   18f9e:	2205      	movs	r2, #5
   18fa0:	2103      	movs	r1, #3
   18fa2:	f7f7 feed 	bl	10d80 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   18fa6:	2802      	cmp	r0, #2
   18fa8:	d027      	beq.n	18ffa <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18faa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18fac:	b34b      	cbz	r3, 19002 <radio_adv_enable+0x362>
	if (conn) {
   18fae:	2e00      	cmp	r6, #0
   18fb0:	d04d      	beq.n	1904e <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   18fb2:	4c09      	ldr	r4, [pc, #36]	; (18fd8 <radio_adv_enable+0x338>)
   18fb4:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   18fb8:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   18fbc:	f7f6 fa2b 	bl	f416 <mem_release>
		mem_release(conn, &_radio.conn_free);
   18fc0:	f504 7184 	add.w	r1, r4, #264	; 0x108
   18fc4:	4630      	mov	r0, r6
   18fc6:	f7f6 fa26 	bl	f416 <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18fca:	200c      	movs	r0, #12
   18fcc:	e676      	b.n	18cbc <radio_adv_enable+0x1c>
   18fce:	bf00      	nop
   18fd0:	1afd498d 	.word	0x1afd498d
   18fd4:	00000007 	.word	0x00000007
   18fd8:	20000ff4 	.word	0x20000ff4
   18fdc:	3b9aca00 	.word	0x3b9aca00
   18fe0:	84e72a00 	.word	0x84e72a00
   18fe4:	00011765 	.word	0x00011765
   18fe8:	000150ed 	.word	0x000150ed
   18fec:	20001138 	.word	0x20001138
   18ff0:	200010fc 	.word	0x200010fc
   18ff4:	bf20      	wfe
  __ASM volatile ("sev");
   18ff6:	bf40      	sev
  __ASM volatile ("wfe");
   18ff8:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   18ffa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18ffc:	2b02      	cmp	r3, #2
   18ffe:	d0f9      	beq.n	18ff4 <radio_adv_enable+0x354>
   19000:	e7d3      	b.n	18faa <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   19002:	ab0e      	add	r3, sp, #56	; 0x38
   19004:	2202      	movs	r2, #2
   19006:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   1900a:	9308      	str	r3, [sp, #32]
   1900c:	4b11      	ldr	r3, [pc, #68]	; (19054 <radio_adv_enable+0x3b4>)
   1900e:	9307      	str	r3, [sp, #28]
   19010:	2000      	movs	r0, #0
   19012:	9006      	str	r0, [sp, #24]
   19014:	4b10      	ldr	r3, [pc, #64]	; (19058 <radio_adv_enable+0x3b8>)
   19016:	9305      	str	r3, [sp, #20]
   19018:	9004      	str	r0, [sp, #16]
   1901a:	9003      	str	r0, [sp, #12]
   1901c:	9002      	str	r0, [sp, #8]
   1901e:	9001      	str	r0, [sp, #4]
   19020:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   19024:	9300      	str	r3, [sp, #0]
   19026:	4623      	mov	r3, r4
   19028:	2203      	movs	r2, #3
   1902a:	4611      	mov	r1, r2
   1902c:	f7f7 fea8 	bl	10d80 <ticker_start>
	    !interval) {
   19030:	e6c4      	b.n	18dbc <radio_adv_enable+0x11c>
   19032:	bf20      	wfe
  __ASM volatile ("sev");
   19034:	bf40      	sev
  __ASM volatile ("wfe");
   19036:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   19038:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1903a:	2b02      	cmp	r3, #2
   1903c:	d0f9      	beq.n	19032 <radio_adv_enable+0x392>
   1903e:	e6c0      	b.n	18dc2 <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   19040:	2001      	movs	r0, #1
   19042:	f7ff fe24 	bl	18c8e <ll_adv_scan_state_cb>
		return 0;
   19046:	2000      	movs	r0, #0
   19048:	e638      	b.n	18cbc <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1904a:	2007      	movs	r0, #7
   1904c:	e636      	b.n	18cbc <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   1904e:	200c      	movs	r0, #12
   19050:	e634      	b.n	18cbc <radio_adv_enable+0x1c>
   19052:	bf00      	nop
   19054:	00011765 	.word	0x00011765
   19058:	000122e1 	.word	0x000122e1

0001905c <radio_adv_disable>:
{
   1905c:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   1905e:	2103      	movs	r1, #3
   19060:	2005      	movs	r0, #5
   19062:	f7f8 ffc1 	bl	11fe8 <role_disable>
	if (!status) {
   19066:	4604      	mov	r4, r0
   19068:	b9f0      	cbnz	r0, 190a8 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   1906a:	4b13      	ldr	r3, [pc, #76]	; (190b8 <radio_adv_disable+0x5c>)
   1906c:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   19070:	f36f 0200 	bfc	r2, #0, #1
   19074:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   19078:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1907c:	f013 0f01 	tst.w	r3, #1
   19080:	d016      	beq.n	190b0 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   19082:	4b0d      	ldr	r3, [pc, #52]	; (190b8 <radio_adv_disable+0x5c>)
   19084:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   19088:	b175      	cbz	r5, 190a8 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   1908a:	461e      	mov	r6, r3
   1908c:	2300      	movs	r3, #0
   1908e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   19092:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   19096:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   1909a:	f7f6 f9bc 	bl	f416 <mem_release>
			mem_release(conn, &_radio.conn_free);
   1909e:	f506 7184 	add.w	r1, r6, #264	; 0x108
   190a2:	4628      	mov	r0, r5
   190a4:	f7f6 f9b7 	bl	f416 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   190a8:	b104      	cbz	r4, 190ac <radio_adv_disable+0x50>
   190aa:	240c      	movs	r4, #12
}
   190ac:	4620      	mov	r0, r4
   190ae:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   190b0:	f7ff fded 	bl	18c8e <ll_adv_scan_state_cb>
   190b4:	e7e5      	b.n	19082 <radio_adv_disable+0x26>
   190b6:	bf00      	nop
   190b8:	20000ff4 	.word	0x20000ff4
   190bc:	00000000 	.word	0x00000000

000190c0 <radio_scan_enable>:
{
   190c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   190c4:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   190c6:	2402      	movs	r4, #2
   190c8:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   190ca:	4c77      	ldr	r4, [pc, #476]	; (192a8 <radio_scan_enable+0x1e8>)
   190cc:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   190d0:	f014 0f01 	tst.w	r4, #1
   190d4:	d003      	beq.n	190de <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   190d6:	200c      	movs	r0, #12
}
   190d8:	b00f      	add	sp, #60	; 0x3c
   190da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   190de:	461d      	mov	r5, r3
   190e0:	4617      	mov	r7, r2
   190e2:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   190e4:	4c70      	ldr	r4, [pc, #448]	; (192a8 <radio_scan_enable+0x1e8>)
   190e6:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   190ea:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   190ee:	f3c0 0042 	ubfx	r0, r0, #1, #3
   190f2:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   190f6:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   190fa:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   190fe:	f361 0200 	bfi	r2, r1, #0, #1
   19102:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   19106:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   1910a:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   1910e:	f366 13c7 	bfi	r3, r6, #7, #1
   19112:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   19116:	2206      	movs	r2, #6
   19118:	4639      	mov	r1, r7
   1911a:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   1911e:	f7e7 f8cf 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   19122:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   19126:	4e61      	ldr	r6, [pc, #388]	; (192ac <radio_scan_enable+0x1ec>)
   19128:	f04f 0a91 	mov.w	sl, #145	; 0x91
   1912c:	fba2 0106 	umull	r0, r1, r2, r6
   19130:	fb0a 1102 	mla	r1, sl, r2, r1
   19134:	a35a      	add	r3, pc, #360	; (adr r3, 192a0 <radio_scan_enable+0x1e0>)
   19136:	e9d3 2300 	ldrd	r2, r3, [r3]
   1913a:	f7e7 ffdf 	bl	10fc <__aeabi_uldivmod>
   1913e:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   19142:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   19146:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   1914a:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   1914e:	f362 1305 	bfi	r3, r2, #4, #2
   19152:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   19156:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   1915a:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   1915e:	2327      	movs	r3, #39	; 0x27
   19160:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   19164:	2300      	movs	r3, #0
   19166:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   1916a:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   1916e:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   19172:	b2aa      	uxth	r2, r5
   19174:	fba2 6706 	umull	r6, r7, r2, r6
   19178:	fb0a 7702 	mla	r7, sl, r2, r7
   1917c:	a348      	add	r3, pc, #288	; (adr r3, 192a0 <radio_scan_enable+0x1e0>)
   1917e:	e9d3 2300 	ldrd	r2, r3, [r3]
   19182:	4630      	mov	r0, r6
   19184:	4639      	mov	r1, r7
   19186:	f7e7 ffb9 	bl	10fc <__aeabi_uldivmod>
   1918a:	4604      	mov	r4, r0
   1918c:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   19190:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   19194:	4598      	cmp	r8, r3
   19196:	d902      	bls.n	1919e <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   19198:	4a43      	ldr	r2, [pc, #268]	; (192a8 <radio_scan_enable+0x1e8>)
   1919a:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   1919e:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   191a2:	bf38      	it	cc
   191a4:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   191a8:	f7f7 ff52 	bl	11050 <ticker_ticks_now_get>
   191ac:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   191ae:	4b3e      	ldr	r3, [pc, #248]	; (192a8 <radio_scan_enable+0x1e8>)
   191b0:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   191b4:	2b00      	cmp	r3, #0
   191b6:	d045      	beq.n	19244 <radio_scan_enable+0x184>
		us_offset = 0;
   191b8:	2300      	movs	r3, #0
   191ba:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   191bc:	f04f 0800 	mov.w	r8, #0
   191c0:	a337      	add	r3, pc, #220	; (adr r3, 192a0 <radio_scan_enable+0x1e0>)
   191c2:	e9d3 2300 	ldrd	r2, r3, [r3]
   191c6:	493a      	ldr	r1, [pc, #232]	; (192b0 <radio_scan_enable+0x1f0>)
   191c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   191ca:	fba0 0101 	umull	r0, r1, r0, r1
   191ce:	f7e7 ff95 	bl	10fc <__aeabi_uldivmod>
   191d2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   191d6:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   191d8:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   191dc:	2500      	movs	r5, #0
   191de:	4835      	ldr	r0, [pc, #212]	; (192b4 <radio_scan_enable+0x1f4>)
   191e0:	2307      	movs	r3, #7
   191e2:	fb03 f304 	mul.w	r3, r3, r4
   191e6:	fb00 3305 	mla	r3, r0, r5, r3
   191ea:	fba4 0100 	umull	r0, r1, r4, r0
   191ee:	4419      	add	r1, r3
   191f0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   191f4:	2300      	movs	r3, #0
   191f6:	1a30      	subs	r0, r6, r0
   191f8:	eb67 0101 	sbc.w	r1, r7, r1
   191fc:	f7e7 ff7e 	bl	10fc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   19200:	4b29      	ldr	r3, [pc, #164]	; (192a8 <radio_scan_enable+0x1e8>)
   19202:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   19206:	4499      	add	r9, r3
   19208:	fa1f f389 	uxth.w	r3, r9
   1920c:	aa0d      	add	r2, sp, #52	; 0x34
   1920e:	9208      	str	r2, [sp, #32]
   19210:	4a29      	ldr	r2, [pc, #164]	; (192b8 <radio_scan_enable+0x1f8>)
   19212:	9207      	str	r2, [sp, #28]
   19214:	f8cd 8018 	str.w	r8, [sp, #24]
   19218:	4a28      	ldr	r2, [pc, #160]	; (192bc <radio_scan_enable+0x1fc>)
   1921a:	9205      	str	r2, [sp, #20]
   1921c:	9304      	str	r3, [sp, #16]
   1921e:	f8cd 800c 	str.w	r8, [sp, #12]
   19222:	9002      	str	r0, [sp, #8]
   19224:	f8cd a004 	str.w	sl, [sp, #4]
   19228:	f8cd 8000 	str.w	r8, [sp]
   1922c:	465b      	mov	r3, fp
   1922e:	2206      	movs	r2, #6
   19230:	2103      	movs	r1, #3
   19232:	4640      	mov	r0, r8
   19234:	f7f7 fda4 	bl	10d80 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   19238:	2802      	cmp	r0, #2
   1923a:	d017      	beq.n	1926c <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1923c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1923e:	b1cb      	cbz	r3, 19274 <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19240:	200c      	movs	r0, #12
   19242:	e749      	b.n	190d8 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   19244:	2300      	movs	r3, #0
   19246:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   19248:	4b17      	ldr	r3, [pc, #92]	; (192a8 <radio_scan_enable+0x1e8>)
   1924a:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   1924e:	ab0c      	add	r3, sp, #48	; 0x30
   19250:	aa0b      	add	r2, sp, #44	; 0x2c
   19252:	4449      	add	r1, r9
   19254:	2003      	movs	r0, #3
   19256:	f7f9 ff63 	bl	13120 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   1925a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1925c:	2b00      	cmp	r3, #0
   1925e:	d0ad      	beq.n	191bc <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   19260:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   19264:	e7aa      	b.n	191bc <radio_scan_enable+0xfc>
   19266:	bf20      	wfe
  __ASM volatile ("sev");
   19268:	bf40      	sev
  __ASM volatile ("wfe");
   1926a:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   1926c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   1926e:	2b02      	cmp	r3, #2
   19270:	d0f9      	beq.n	19266 <radio_scan_enable+0x1a6>
   19272:	e7e3      	b.n	1923c <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   19274:	4b0c      	ldr	r3, [pc, #48]	; (192a8 <radio_scan_enable+0x1e8>)
   19276:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1927a:	f042 0201 	orr.w	r2, r2, #1
   1927e:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   19282:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   19286:	f013 0f01 	tst.w	r3, #1
   1928a:	d001      	beq.n	19290 <radio_scan_enable+0x1d0>
	return 0;
   1928c:	2000      	movs	r0, #0
   1928e:	e723      	b.n	190d8 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   19290:	2002      	movs	r0, #2
   19292:	f7ff fcfc 	bl	18c8e <ll_adv_scan_state_cb>
	return 0;
   19296:	2000      	movs	r0, #0
   19298:	e71e      	b.n	190d8 <radio_scan_enable+0x18>
   1929a:	bf00      	nop
   1929c:	f3af 8000 	nop.w
   192a0:	1afd498d 	.word	0x1afd498d
   192a4:	00000007 	.word	0x00000007
   192a8:	20000ff4 	.word	0x20000ff4
   192ac:	84e72a00 	.word	0x84e72a00
   192b0:	3b9aca00 	.word	0x3b9aca00
   192b4:	1afd498d 	.word	0x1afd498d
   192b8:	00011765 	.word	0x00011765
   192bc:	0001669d 	.word	0x0001669d

000192c0 <radio_scan_disable>:
{
   192c0:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   192c2:	2104      	movs	r1, #4
   192c4:	2006      	movs	r0, #6
   192c6:	f7f8 fe8f 	bl	11fe8 <role_disable>
	if (!status) {
   192ca:	4604      	mov	r4, r0
   192cc:	b9f0      	cbnz	r0, 1930c <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   192ce:	4b13      	ldr	r3, [pc, #76]	; (1931c <radio_scan_disable+0x5c>)
   192d0:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   192d4:	f36f 0200 	bfc	r2, #0, #1
   192d8:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   192dc:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   192e0:	f013 0f01 	tst.w	r3, #1
   192e4:	d016      	beq.n	19314 <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   192e6:	4b0d      	ldr	r3, [pc, #52]	; (1931c <radio_scan_disable+0x5c>)
   192e8:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   192ec:	b175      	cbz	r5, 1930c <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   192ee:	461e      	mov	r6, r3
   192f0:	2300      	movs	r3, #0
   192f2:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   192f6:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   192fa:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   192fe:	f7f6 f88a 	bl	f416 <mem_release>
			mem_release(conn, &_radio.conn_free);
   19302:	f506 7184 	add.w	r1, r6, #264	; 0x108
   19306:	4628      	mov	r0, r5
   19308:	f7f6 f885 	bl	f416 <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   1930c:	b104      	cbz	r4, 19310 <radio_scan_disable+0x50>
   1930e:	240c      	movs	r4, #12
}
   19310:	4620      	mov	r0, r4
   19312:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   19314:	f7ff fcbb 	bl	18c8e <ll_adv_scan_state_cb>
   19318:	e7e5      	b.n	192e6 <radio_scan_disable+0x26>
   1931a:	bf00      	nop
   1931c:	20000ff4 	.word	0x20000ff4

00019320 <ll_connect_disable>:
{
   19320:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   19322:	4b04      	ldr	r3, [pc, #16]	; (19334 <ll_connect_disable+0x14>)
   19324:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   19328:	b113      	cbz	r3, 19330 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   1932a:	f7ff ffc9 	bl	192c0 <radio_scan_disable>
	return status;
   1932e:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   19330:	200c      	movs	r0, #12
}
   19332:	bd08      	pop	{r3, pc}
   19334:	20000ff4 	.word	0x20000ff4

00019338 <radio_rx_dequeue>:
{
   19338:	b530      	push	{r4, r5, lr}
   1933a:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   1933c:	aa02      	add	r2, sp, #8
   1933e:	2300      	movs	r3, #0
   19340:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   19344:	4947      	ldr	r1, [pc, #284]	; (19464 <radio_rx_dequeue+0x12c>)
   19346:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   1934a:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   1934e:	f7f6 f8be 	bl	f4ce <memq_dequeue>
	LL_ASSERT(link);
   19352:	b178      	cbz	r0, 19374 <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   19354:	4944      	ldr	r1, [pc, #272]	; (19468 <radio_rx_dequeue+0x130>)
   19356:	f7f6 f85e 	bl	f416 <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   1935a:	9a01      	ldr	r2, [sp, #4]
   1935c:	7913      	ldrb	r3, [r2, #4]
   1935e:	3b01      	subs	r3, #1
   19360:	2b0b      	cmp	r3, #11
   19362:	d824      	bhi.n	193ae <radio_rx_dequeue+0x76>
   19364:	e8df f003 	tbb	[pc, r3]
   19368:	0c0c0c0c 	.word	0x0c0c0c0c
   1936c:	0c180c0c 	.word	0x0c180c0c
   19370:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   19374:	4040      	eors	r0, r0
   19376:	f380 8811 	msr	BASEPRI, r0
   1937a:	f04f 0004 	mov.w	r0, #4
   1937e:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   19380:	4938      	ldr	r1, [pc, #224]	; (19464 <radio_rx_dequeue+0x12c>)
   19382:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   19386:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   1938a:	3901      	subs	r1, #1
   1938c:	428b      	cmp	r3, r1
   1938e:	da08      	bge.n	193a2 <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   19390:	3301      	adds	r3, #1
   19392:	4934      	ldr	r1, [pc, #208]	; (19464 <radio_rx_dequeue+0x12c>)
   19394:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   19398:	7913      	ldrb	r3, [r2, #4]
   1939a:	2b06      	cmp	r3, #6
   1939c:	d00d      	beq.n	193ba <radio_rx_dequeue+0x82>
}
   1939e:	b003      	add	sp, #12
   193a0:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   193a2:	4040      	eors	r0, r0
   193a4:	f380 8811 	msr	BASEPRI, r0
   193a8:	f04f 0004 	mov.w	r0, #4
   193ac:	df02      	svc	2
		LL_ASSERT(0);
   193ae:	4040      	eors	r0, r0
   193b0:	f380 8811 	msr	BASEPRI, r0
   193b4:	f04f 0004 	mov.w	r0, #4
   193b8:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   193ba:	7ad3      	ldrb	r3, [r2, #11]
   193bc:	2b3c      	cmp	r3, #60	; 0x3c
   193be:	d002      	beq.n	193c6 <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   193c0:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   193c2:	2a00      	cmp	r2, #0
   193c4:	d039      	beq.n	1943a <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   193c6:	2b3c      	cmp	r3, #60	; 0x3c
   193c8:	d02a      	beq.n	19420 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   193ca:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   193cc:	4b25      	ldr	r3, [pc, #148]	; (19464 <radio_rx_dequeue+0x12c>)
   193ce:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   193d2:	f013 0f01 	tst.w	r3, #1
   193d6:	d02a      	beq.n	1942e <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   193d8:	4b22      	ldr	r3, [pc, #136]	; (19464 <radio_rx_dequeue+0x12c>)
   193da:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   193de:	f36f 0200 	bfc	r2, #0, #1
   193e2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   193e6:	b15c      	cbz	r4, 19400 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   193e8:	4d1e      	ldr	r5, [pc, #120]	; (19464 <radio_rx_dequeue+0x12c>)
   193ea:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   193ee:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   193f2:	f7f6 f810 	bl	f416 <mem_release>
			mem_release(conn, &_radio.conn_free);
   193f6:	f505 7184 	add.w	r1, r5, #264	; 0x108
   193fa:	4620      	mov	r0, r4
   193fc:	f7f6 f80b 	bl	f416 <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   19400:	4b18      	ldr	r3, [pc, #96]	; (19464 <radio_rx_dequeue+0x12c>)
   19402:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   19406:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   1940a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1940e:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   19412:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   19416:	d1c2      	bne.n	1939e <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   19418:	2000      	movs	r0, #0
   1941a:	f7ff fc38 	bl	18c8e <ll_adv_scan_state_cb>
}
   1941e:	e7be      	b.n	1939e <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   19420:	4b10      	ldr	r3, [pc, #64]	; (19464 <radio_rx_dequeue+0x12c>)
   19422:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   19426:	2200      	movs	r2, #0
   19428:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   1942c:	e7ce      	b.n	193cc <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   1942e:	4040      	eors	r0, r0
   19430:	f380 8811 	msr	BASEPRI, r0
   19434:	f04f 0004 	mov.w	r0, #4
   19438:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   1943a:	4b0a      	ldr	r3, [pc, #40]	; (19464 <radio_rx_dequeue+0x12c>)
   1943c:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   19440:	f013 0f01 	tst.w	r3, #1
   19444:	d008      	beq.n	19458 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   19446:	4b07      	ldr	r3, [pc, #28]	; (19464 <radio_rx_dequeue+0x12c>)
   19448:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   1944c:	f36f 0200 	bfc	r2, #0, #1
   19450:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   19454:	2400      	movs	r4, #0
   19456:	e7c6      	b.n	193e6 <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   19458:	4040      	eors	r0, r0
   1945a:	f380 8811 	msr	BASEPRI, r0
   1945e:	f04f 0004 	mov.w	r0, #4
   19462:	df02      	svc	2
   19464:	20000ff4 	.word	0x20000ff4
   19468:	20001138 	.word	0x20001138

0001946c <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   1946c:	4668      	mov	r0, sp
   1946e:	f020 0107 	bic.w	r1, r0, #7
   19472:	468d      	mov	sp, r1
   19474:	b501      	push	{r0, lr}
{
	isr_radio();
   19476:	f7f6 f8e1 	bl	f63c <isr_radio>

	ISR_DIRECT_PM();
   1947a:	f00e fb75 	bl	27b68 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   1947e:	f00e f90f 	bl	276a0 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   19482:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   19486:	4685      	mov	sp, r0
   19488:	4770      	bx	lr
	...

0001948c <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   1948c:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   1948e:	4b0c      	ldr	r3, [pc, #48]	; (194c0 <rtc0_nrf5_isr+0x34>)
   19490:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   19494:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   19498:	b922      	cbnz	r2, 194a4 <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   1949a:	b94c      	cbnz	r4, 194b0 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   1949c:	2000      	movs	r0, #0
   1949e:	f7f5 febf 	bl	f220 <mayfly_run>
   194a2:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   194a4:	2000      	movs	r0, #0
   194a6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   194aa:	f7f7 fc5b 	bl	10d64 <ticker_trigger>
   194ae:	e7f4      	b.n	1949a <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   194b0:	2200      	movs	r2, #0
   194b2:	4b03      	ldr	r3, [pc, #12]	; (194c0 <rtc0_nrf5_isr+0x34>)
   194b4:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   194b8:	2001      	movs	r0, #1
   194ba:	f7f7 fc53 	bl	10d64 <ticker_trigger>
   194be:	e7ed      	b.n	1949c <rtc0_nrf5_isr+0x10>
   194c0:	4000b000 	.word	0x4000b000

000194c4 <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   194c4:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   194c6:	2001      	movs	r0, #1
   194c8:	f7f5 feaa 	bl	f220 <mayfly_run>
   194cc:	bd08      	pop	{r3, pc}

000194ce <rng_nrf5_isr>:
{
   194ce:	b508      	push	{r3, lr}
	isr_rand(arg);
   194d0:	f7f7 f9e2 	bl	10898 <isr_rand>
   194d4:	bd08      	pop	{r3, pc}

000194d6 <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   194d6:	2901      	cmp	r1, #1
   194d8:	d105      	bne.n	194e6 <mayfly_enable_cb+0x10>
{
   194da:	b508      	push	{r3, lr}
	if (enable) {
   194dc:	b94a      	cbnz	r2, 194f2 <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   194de:	2018      	movs	r0, #24
   194e0:	f00e fb0c 	bl	27afc <_arch_irq_disable>
   194e4:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   194e6:	4040      	eors	r0, r0
   194e8:	f380 8811 	msr	BASEPRI, r0
   194ec:	f04f 0004 	mov.w	r0, #4
   194f0:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   194f2:	2018      	movs	r0, #24
   194f4:	f00e faf4 	bl	27ae0 <_arch_irq_enable>
   194f8:	bd08      	pop	{r3, pc}

000194fa <mayfly_is_enabled>:
{
   194fa:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   194fc:	b129      	cbz	r1, 1950a <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   194fe:	2901      	cmp	r1, #1
   19500:	d107      	bne.n	19512 <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   19502:	2018      	movs	r0, #24
   19504:	f00e fb08 	bl	27b18 <_arch_irq_is_enabled>
   19508:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   1950a:	200b      	movs	r0, #11
   1950c:	f00e fb04 	bl	27b18 <_arch_irq_is_enabled>
   19510:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   19512:	4040      	eors	r0, r0
   19514:	f380 8811 	msr	BASEPRI, r0
   19518:	f04f 0004 	mov.w	r0, #4
   1951c:	df02      	svc	2

0001951e <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   1951e:	4288      	cmp	r0, r1
   19520:	d009      	beq.n	19536 <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   19522:	b908      	cbnz	r0, 19528 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   19524:	2901      	cmp	r1, #1
   19526:	d008      	beq.n	1953a <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19528:	2801      	cmp	r0, #1
   1952a:	d001      	beq.n	19530 <mayfly_prio_is_equal+0x12>
   1952c:	2000      	movs	r0, #0
   1952e:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   19530:	b129      	cbz	r1, 1953e <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   19532:	2000      	movs	r0, #0
   19534:	4770      	bx	lr
   19536:	2001      	movs	r0, #1
   19538:	4770      	bx	lr
   1953a:	2001      	movs	r0, #1
   1953c:	4770      	bx	lr
   1953e:	2001      	movs	r0, #1
}
   19540:	4770      	bx	lr
	...

00019544 <mayfly_pend>:
	switch (callee_id) {
   19544:	b139      	cbz	r1, 19556 <mayfly_pend+0x12>
   19546:	2901      	cmp	r1, #1
   19548:	d00b      	beq.n	19562 <mayfly_pend+0x1e>
		LL_ASSERT(0);
   1954a:	4040      	eors	r0, r0
   1954c:	f380 8811 	msr	BASEPRI, r0
   19550:	f04f 0004 	mov.w	r0, #4
   19554:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   19556:	f44f 6200 	mov.w	r2, #2048	; 0x800
   1955a:	4b05      	ldr	r3, [pc, #20]	; (19570 <mayfly_pend+0x2c>)
   1955c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   19560:	4770      	bx	lr
   19562:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   19566:	4b02      	ldr	r3, [pc, #8]	; (19570 <mayfly_pend+0x2c>)
   19568:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   1956c:	4770      	bx	lr
   1956e:	bf00      	nop
   19570:	e000e100 	.word	0xe000e100

00019574 <radio_active_callback>:
{
   19574:	4770      	bx	lr
	...

00019578 <radio_event_callback>:
{
   19578:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1957a:	4b02      	ldr	r3, [pc, #8]	; (19584 <radio_event_callback+0xc>)
   1957c:	6818      	ldr	r0, [r3, #0]
   1957e:	f00f ff44 	bl	2940a <_impl_k_sem_give>
   19582:	bd08      	pop	{r3, pc}
   19584:	20001918 	.word	0x20001918

00019588 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   19588:	b510      	push	{r4, lr}
   1958a:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   1958c:	4b37      	ldr	r3, [pc, #220]	; (1966c <ll_init+0xe4>)
   1958e:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   19590:	2204      	movs	r2, #4
   19592:	2109      	movs	r1, #9
   19594:	4836      	ldr	r0, [pc, #216]	; (19670 <ll_init+0xe8>)
   19596:	f7f7 f957 	bl	10848 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   1959a:	220c      	movs	r2, #12
   1959c:	2111      	movs	r1, #17
   1959e:	4835      	ldr	r0, [pc, #212]	; (19674 <ll_init+0xec>)
   195a0:	f7f7 f95c 	bl	1085c <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   195a4:	4834      	ldr	r0, [pc, #208]	; (19678 <ll_init+0xf0>)
   195a6:	f00e fc69 	bl	27e7c <device_get_binding>
	if (!clk_k32) {
   195aa:	2800      	cmp	r0, #0
   195ac:	d054      	beq.n	19658 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   195ae:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   195b0:	6812      	ldr	r2, [r2, #0]
   195b2:	2101      	movs	r1, #1
   195b4:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   195b6:	f7f5 ffab 	bl	f510 <cntr_init>

	mayfly_init();
   195ba:	f7f5 fd65 	bl	f088 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   195be:	4b2f      	ldr	r3, [pc, #188]	; (1967c <ll_init+0xf4>)
   195c0:	2108      	movs	r1, #8
   195c2:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   195c4:	2203      	movs	r2, #3
   195c6:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   195c8:	2000      	movs	r0, #0
   195ca:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   195cc:	2202      	movs	r2, #2
   195ce:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   195d0:	4a2b      	ldr	r2, [pc, #172]	; (19680 <ll_init+0xf8>)
   195d2:	9202      	str	r2, [sp, #8]
   195d4:	220d      	movs	r2, #13
   195d6:	9201      	str	r2, [sp, #4]
   195d8:	9300      	str	r3, [sp, #0]
   195da:	2304      	movs	r3, #4
   195dc:	4a29      	ldr	r2, [pc, #164]	; (19684 <ll_init+0xfc>)
   195de:	f7f7 fb67 	bl	10cb0 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   195e2:	4829      	ldr	r0, [pc, #164]	; (19688 <ll_init+0x100>)
   195e4:	f00e fc4a 	bl	27e7c <device_get_binding>
	if (!clk_m16) {
   195e8:	2800      	cmp	r0, #0
   195ea:	d038      	beq.n	1965e <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   195ec:	f44f 7357 	mov.w	r3, #860	; 0x35c
   195f0:	9304      	str	r3, [sp, #16]
   195f2:	4b26      	ldr	r3, [pc, #152]	; (1968c <ll_init+0x104>)
   195f4:	9303      	str	r3, [sp, #12]
   195f6:	231b      	movs	r3, #27
   195f8:	9302      	str	r3, [sp, #8]
   195fa:	9301      	str	r3, [sp, #4]
   195fc:	2302      	movs	r3, #2
   195fe:	9300      	str	r3, [sp, #0]
   19600:	2301      	movs	r3, #1
   19602:	461a      	mov	r2, r3
   19604:	2107      	movs	r1, #7
   19606:	f7fe fccb 	bl	17fa0 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   1960a:	bb58      	cbnz	r0, 19664 <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   1960c:	2001      	movs	r0, #1
   1960e:	f000 ffff 	bl	1a610 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   19612:	2200      	movs	r2, #0
   19614:	4611      	mov	r1, r2
   19616:	2001      	movs	r0, #1
   19618:	f00e fa8c 	bl	27b34 <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   1961c:	2200      	movs	r2, #0
   1961e:	4611      	mov	r1, r2
   19620:	200b      	movs	r0, #11
   19622:	f00e fa87 	bl	27b34 <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   19626:	2200      	movs	r2, #0
   19628:	4611      	mov	r1, r2
   1962a:	2018      	movs	r0, #24
   1962c:	f00e fa82 	bl	27b34 <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   19630:	2200      	movs	r2, #0
   19632:	2101      	movs	r1, #1
   19634:	200d      	movs	r0, #13
   19636:	f00e fa7d 	bl	27b34 <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   1963a:	2001      	movs	r0, #1
   1963c:	f00e fa50 	bl	27ae0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   19640:	200b      	movs	r0, #11
   19642:	f00e fa4d 	bl	27ae0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   19646:	2018      	movs	r0, #24
   19648:	f00e fa4a 	bl	27ae0 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   1964c:	200d      	movs	r0, #13
   1964e:	f00e fa47 	bl	27ae0 <_arch_irq_enable>

	return 0;
   19652:	2000      	movs	r0, #0
}
   19654:	b006      	add	sp, #24
   19656:	bd10      	pop	{r4, pc}
		return -ENODEV;
   19658:	f06f 0012 	mvn.w	r0, #18
   1965c:	e7fa      	b.n	19654 <ll_init+0xcc>
		return -ENODEV;
   1965e:	f06f 0012 	mvn.w	r0, #18
   19662:	e7f7      	b.n	19654 <ll_init+0xcc>
		return -ENOMEM;
   19664:	f06f 000b 	mvn.w	r0, #11
   19668:	e7f4      	b.n	19654 <ll_init+0xcc>
   1966a:	bf00      	nop
   1966c:	20001918 	.word	0x20001918
   19670:	200018f8 	.word	0x200018f8
   19674:	20001904 	.word	0x20001904
   19678:	0002ec38 	.word	0x0002ec38
   1967c:	200018d8 	.word	0x200018d8
   19680:	2000169c 	.word	0x2000169c
   19684:	2000157c 	.word	0x2000157c
   19688:	0002ec44 	.word	0x0002ec44
   1968c:	2000117c 	.word	0x2000117c

00019690 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   19690:	2801      	cmp	r0, #1
   19692:	d814      	bhi.n	196be <ll_addr_get+0x2e>
{
   19694:	b538      	push	{r3, r4, r5, lr}
   19696:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   19698:	b140      	cbz	r0, 196ac <ll_addr_get+0x1c>
		if (bdaddr) {
   1969a:	b191      	cbz	r1, 196c2 <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   1969c:	4d0b      	ldr	r5, [pc, #44]	; (196cc <ll_addr_get+0x3c>)
   1969e:	2206      	movs	r2, #6
   196a0:	4629      	mov	r1, r5
   196a2:	4620      	mov	r0, r4
   196a4:	f7e6 fe0c 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   196a8:	4628      	mov	r0, r5
   196aa:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   196ac:	b159      	cbz	r1, 196c6 <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   196ae:	4d08      	ldr	r5, [pc, #32]	; (196d0 <ll_addr_get+0x40>)
   196b0:	2206      	movs	r2, #6
   196b2:	4629      	mov	r1, r5
   196b4:	4620      	mov	r0, r4
   196b6:	f7e6 fe03 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   196ba:	4628      	mov	r0, r5
   196bc:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   196be:	2000      	movs	r0, #0
   196c0:	4770      	bx	lr
		return _ll_context.rnd_addr;
   196c2:	4802      	ldr	r0, [pc, #8]	; (196cc <ll_addr_get+0x3c>)
   196c4:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   196c6:	4802      	ldr	r0, [pc, #8]	; (196d0 <ll_addr_get+0x40>)
}
   196c8:	bd38      	pop	{r3, r4, r5, pc}
   196ca:	bf00      	nop
   196cc:	20001576 	.word	0x20001576
   196d0:	20001570 	.word	0x20001570

000196d4 <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   196d4:	b508      	push	{r3, lr}
	if (addr_type) {
   196d6:	b920      	cbnz	r0, 196e2 <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   196d8:	2206      	movs	r2, #6
   196da:	4804      	ldr	r0, [pc, #16]	; (196ec <ll_addr_set+0x18>)
   196dc:	f7e6 fdf0 	bl	2c0 <memcpy>
   196e0:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   196e2:	2206      	movs	r2, #6
   196e4:	4802      	ldr	r0, [pc, #8]	; (196f0 <ll_addr_set+0x1c>)
   196e6:	f7e6 fdeb 	bl	2c0 <memcpy>
   196ea:	bd08      	pop	{r3, pc}
   196ec:	20001570 	.word	0x20001570
   196f0:	20001576 	.word	0x20001576

000196f4 <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   196f4:	2300      	movs	r3, #0
   196f6:	e007      	b.n	19708 <wl_clear+0x14>
		wl[i].taken = 0;
   196f8:	4a05      	ldr	r2, [pc, #20]	; (19710 <wl_clear+0x1c>)
   196fa:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   196fe:	f36f 0100 	bfc	r1, #0, #1
   19702:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   19706:	3301      	adds	r3, #1
   19708:	2b07      	cmp	r3, #7
   1970a:	ddf5      	ble.n	196f8 <wl_clear+0x4>
}
   1970c:	4770      	bx	lr
   1970e:	bf00      	nop
   19710:	20001b50 	.word	0x20001b50

00019714 <filter_clear>:
	filter->enable_bitmask = 0;
   19714:	2300      	movs	r3, #0
   19716:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   19718:	7043      	strb	r3, [r0, #1]
   1971a:	4770      	bx	lr

0001971c <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1971c:	2300      	movs	r3, #0
   1971e:	e009      	b.n	19734 <rl_clear+0x18>
		rl[i].taken = 0;
   19720:	4907      	ldr	r1, [pc, #28]	; (19740 <rl_clear+0x24>)
   19722:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19726:	00c2      	lsls	r2, r0, #3
   19728:	5c88      	ldrb	r0, [r1, r2]
   1972a:	f36f 0000 	bfc	r0, #0, #1
   1972e:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19730:	3301      	adds	r3, #1
   19732:	b2db      	uxtb	r3, r3
   19734:	2b07      	cmp	r3, #7
   19736:	d9f3      	bls.n	19720 <rl_clear+0x4>
	peer_irk_count = 0;
   19738:	2200      	movs	r2, #0
   1973a:	4b02      	ldr	r3, [pc, #8]	; (19744 <rl_clear+0x28>)
   1973c:	701a      	strb	r2, [r3, #0]
   1973e:	4770      	bx	lr
   19740:	200019d8 	.word	0x200019d8
   19744:	2000194c 	.word	0x2000194c

00019748 <wl_find>:
{
   19748:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1974a:	4606      	mov	r6, r0
   1974c:	460f      	mov	r7, r1
	if (free) {
   1974e:	4615      	mov	r5, r2
   19750:	b10a      	cbz	r2, 19756 <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   19752:	23ff      	movs	r3, #255	; 0xff
   19754:	7013      	strb	r3, [r2, #0]
{
   19756:	2400      	movs	r4, #0
   19758:	e00c      	b.n	19774 <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   1975a:	4816      	ldr	r0, [pc, #88]	; (197b4 <wl_find+0x6c>)
   1975c:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   19760:	2206      	movs	r2, #6
   19762:	4639      	mov	r1, r7
   19764:	3002      	adds	r0, #2
   19766:	f011 f86f 	bl	2a848 <memcmp>
   1976a:	b9a0      	cbnz	r0, 19796 <wl_find+0x4e>
			return i;
   1976c:	b2e0      	uxtb	r0, r4
   1976e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   19770:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   19772:	3401      	adds	r4, #1
   19774:	2c07      	cmp	r4, #7
   19776:	dc1a      	bgt.n	197ae <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   19778:	4b0e      	ldr	r3, [pc, #56]	; (197b4 <wl_find+0x6c>)
   1977a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1977e:	f013 0f01 	tst.w	r3, #1
   19782:	d008      	beq.n	19796 <wl_find+0x4e>
   19784:	4b0b      	ldr	r3, [pc, #44]	; (197b4 <wl_find+0x6c>)
   19786:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   1978a:	f3c3 0340 	ubfx	r3, r3, #1, #1
   1978e:	f006 0201 	and.w	r2, r6, #1
   19792:	4293      	cmp	r3, r2
   19794:	d0e1      	beq.n	1975a <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   19796:	2d00      	cmp	r5, #0
   19798:	d0eb      	beq.n	19772 <wl_find+0x2a>
   1979a:	4b06      	ldr	r3, [pc, #24]	; (197b4 <wl_find+0x6c>)
   1979c:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   197a0:	f013 0f01 	tst.w	r3, #1
   197a4:	d1e5      	bne.n	19772 <wl_find+0x2a>
   197a6:	782b      	ldrb	r3, [r5, #0]
   197a8:	2bff      	cmp	r3, #255	; 0xff
   197aa:	d1e2      	bne.n	19772 <wl_find+0x2a>
   197ac:	e7e0      	b.n	19770 <wl_find+0x28>
	return FILTER_IDX_NONE;
   197ae:	20ff      	movs	r0, #255	; 0xff
}
   197b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   197b2:	bf00      	nop
   197b4:	20001b50 	.word	0x20001b50

000197b8 <wl_remove>:
{
   197b8:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   197ba:	4601      	mov	r1, r0
   197bc:	f811 0b01 	ldrb.w	r0, [r1], #1
   197c0:	2200      	movs	r2, #0
   197c2:	f7ff ffc1 	bl	19748 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   197c6:	2807      	cmp	r0, #7
   197c8:	d901      	bls.n	197ce <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   197ca:	2002      	movs	r0, #2
}
   197cc:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   197ce:	4b0b      	ldr	r3, [pc, #44]	; (197fc <wl_remove+0x44>)
   197d0:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   197d4:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   197d6:	2b07      	cmp	r3, #7
   197d8:	d807      	bhi.n	197ea <wl_remove+0x32>
			rl[j].wl = 0;
   197da:	4909      	ldr	r1, [pc, #36]	; (19800 <wl_remove+0x48>)
   197dc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   197e0:	00da      	lsls	r2, r3, #3
   197e2:	5c8b      	ldrb	r3, [r1, r2]
   197e4:	f36f 1345 	bfc	r3, #5, #1
   197e8:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   197ea:	4b04      	ldr	r3, [pc, #16]	; (197fc <wl_remove+0x44>)
   197ec:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   197f0:	f36f 0200 	bfc	r2, #0, #1
   197f4:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   197f8:	2000      	movs	r0, #0
   197fa:	bd08      	pop	{r3, pc}
   197fc:	20001b50 	.word	0x20001b50
   19800:	200019d8 	.word	0x200019d8

00019804 <filter_insert>:
{
   19804:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   19806:	2401      	movs	r4, #1
   19808:	fa04 f501 	lsl.w	r5, r4, r1
   1980c:	7804      	ldrb	r4, [r0, #0]
   1980e:	432c      	orrs	r4, r5
   19810:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   19812:	f002 0201 	and.w	r2, r2, #1
   19816:	fa02 f401 	lsl.w	r4, r2, r1
   1981a:	7842      	ldrb	r2, [r0, #1]
   1981c:	4322      	orrs	r2, r4
   1981e:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   19820:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   19824:	004a      	lsls	r2, r1, #1
   19826:	4410      	add	r0, r2
   19828:	2206      	movs	r2, #6
   1982a:	4619      	mov	r1, r3
   1982c:	3002      	adds	r0, #2
   1982e:	f7e6 fd47 	bl	2c0 <memcpy>
   19832:	bd38      	pop	{r3, r4, r5, pc}

00019834 <filter_wl_update>:
{
   19834:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   19836:	481b      	ldr	r0, [pc, #108]	; (198a4 <filter_wl_update+0x70>)
   19838:	f7ff ff6c 	bl	19714 <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   1983c:	2400      	movs	r4, #0
   1983e:	e00c      	b.n	1985a <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   19840:	4b19      	ldr	r3, [pc, #100]	; (198a8 <filter_wl_update+0x74>)
   19842:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   19846:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   1984a:	3302      	adds	r3, #2
   1984c:	f3c2 0240 	ubfx	r2, r2, #1, #1
   19850:	4814      	ldr	r0, [pc, #80]	; (198a4 <filter_wl_update+0x70>)
   19852:	f7ff ffd7 	bl	19804 <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   19856:	3401      	adds	r4, #1
   19858:	b2e4      	uxtb	r4, r4
   1985a:	2c07      	cmp	r4, #7
   1985c:	d820      	bhi.n	198a0 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   1985e:	4621      	mov	r1, r4
   19860:	4b11      	ldr	r3, [pc, #68]	; (198a8 <filter_wl_update+0x74>)
   19862:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   19866:	f013 0f01 	tst.w	r3, #1
   1986a:	d0f4      	beq.n	19856 <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   1986c:	4b0e      	ldr	r3, [pc, #56]	; (198a8 <filter_wl_update+0x74>)
   1986e:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   19872:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19874:	4a0d      	ldr	r2, [pc, #52]	; (198ac <filter_wl_update+0x78>)
   19876:	7812      	ldrb	r2, [r2, #0]
   19878:	2a00      	cmp	r2, #0
   1987a:	d0e1      	beq.n	19840 <filter_wl_update+0xc>
   1987c:	2b07      	cmp	r3, #7
   1987e:	d8df      	bhi.n	19840 <filter_wl_update+0xc>
   19880:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   19884:	00c2      	lsls	r2, r0, #3
   19886:	480a      	ldr	r0, [pc, #40]	; (198b0 <filter_wl_update+0x7c>)
   19888:	5c82      	ldrb	r2, [r0, r2]
   1988a:	f012 0f04 	tst.w	r2, #4
   1988e:	d0d7      	beq.n	19840 <filter_wl_update+0xc>
		    rl[j].dev) {
   19890:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   19894:	00da      	lsls	r2, r3, #3
   19896:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   19898:	f013 0f10 	tst.w	r3, #16
   1989c:	d0db      	beq.n	19856 <filter_wl_update+0x22>
   1989e:	e7cf      	b.n	19840 <filter_wl_update+0xc>
}
   198a0:	bd10      	pop	{r4, pc}
   198a2:	bf00      	nop
   198a4:	20001b90 	.word	0x20001b90
   198a8:	20001b50 	.word	0x20001b50
   198ac:	20001b18 	.word	0x20001b18
   198b0:	200019d8 	.word	0x200019d8

000198b4 <filter_rl_update>:
{
   198b4:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   198b6:	4810      	ldr	r0, [pc, #64]	; (198f8 <filter_rl_update+0x44>)
   198b8:	f7ff ff2c 	bl	19714 <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   198bc:	2400      	movs	r4, #0
   198be:	e001      	b.n	198c4 <filter_rl_update+0x10>
   198c0:	3401      	adds	r4, #1
   198c2:	b2e4      	uxtb	r4, r4
   198c4:	2c07      	cmp	r4, #7
   198c6:	d815      	bhi.n	198f4 <filter_rl_update+0x40>
		if (rl[i].taken) {
   198c8:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   198cc:	00d3      	lsls	r3, r2, #3
   198ce:	4a0b      	ldr	r2, [pc, #44]	; (198fc <filter_rl_update+0x48>)
   198d0:	5cd3      	ldrb	r3, [r2, r3]
   198d2:	f013 0f01 	tst.w	r3, #1
   198d6:	d0f3      	beq.n	198c0 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   198d8:	4611      	mov	r1, r2
   198da:	00a3      	lsls	r3, r4, #2
   198dc:	4423      	add	r3, r4
   198de:	00da      	lsls	r2, r3, #3
   198e0:	188b      	adds	r3, r1, r2
   198e2:	5c8a      	ldrb	r2, [r1, r2]
   198e4:	3301      	adds	r3, #1
   198e6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   198ea:	4621      	mov	r1, r4
   198ec:	4802      	ldr	r0, [pc, #8]	; (198f8 <filter_rl_update+0x44>)
   198ee:	f7ff ff89 	bl	19804 <filter_insert>
   198f2:	e7e5      	b.n	198c0 <filter_rl_update+0xc>
}
   198f4:	bd10      	pop	{r4, pc}
   198f6:	bf00      	nop
   198f8:	20001b1c 	.word	0x20001b1c
   198fc:	200019d8 	.word	0x200019d8

00019900 <rl_access_check>:
{
   19900:	b508      	push	{r3, lr}
	if (check_ar) {
   19902:	b110      	cbz	r0, 1990a <rl_access_check+0xa>
		if (!rl_enable) {
   19904:	4b08      	ldr	r3, [pc, #32]	; (19928 <rl_access_check+0x28>)
   19906:	781b      	ldrb	r3, [r3, #0]
   19908:	b15b      	cbz	r3, 19922 <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1990a:	f7fe fc27 	bl	1815c <radio_adv_is_enabled>
   1990e:	b108      	cbz	r0, 19914 <rl_access_check+0x14>
   19910:	2000      	movs	r0, #0
   19912:	bd08      	pop	{r3, pc}
   19914:	f7fe fc3a 	bl	1818c <radio_scan_is_enabled>
   19918:	b108      	cbz	r0, 1991e <rl_access_check+0x1e>
   1991a:	2000      	movs	r0, #0
}
   1991c:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   1991e:	2001      	movs	r0, #1
   19920:	bd08      	pop	{r3, pc}
			return -1;
   19922:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19926:	bd08      	pop	{r3, pc}
   19928:	20001b18 	.word	0x20001b18

0001992c <rpa_refresh_start>:
{
   1992c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   1992e:	4b05      	ldr	r3, [pc, #20]	; (19944 <rpa_refresh_start+0x18>)
   19930:	781b      	ldrb	r3, [r3, #0]
   19932:	b903      	cbnz	r3, 19936 <rpa_refresh_start+0xa>
   19934:	bd08      	pop	{r3, pc}
   19936:	4b04      	ldr	r3, [pc, #16]	; (19948 <rpa_refresh_start+0x1c>)
   19938:	681a      	ldr	r2, [r3, #0]
   1993a:	4904      	ldr	r1, [pc, #16]	; (1994c <rpa_refresh_start+0x20>)
   1993c:	4804      	ldr	r0, [pc, #16]	; (19950 <rpa_refresh_start+0x24>)
   1993e:	f010 fbad 	bl	2a09c <k_delayed_work_submit_to_queue>
   19942:	e7f7      	b.n	19934 <rpa_refresh_start+0x8>
   19944:	20001b18 	.word	0x20001b18
   19948:	20002c64 	.word	0x20002c64
   1994c:	20002b30 	.word	0x20002b30
   19950:	20002c78 	.word	0x20002c78

00019954 <rpa_refresh_stop>:
{
   19954:	b508      	push	{r3, lr}
	if (!rl_enable) {
   19956:	4b04      	ldr	r3, [pc, #16]	; (19968 <rpa_refresh_stop+0x14>)
   19958:	781b      	ldrb	r3, [r3, #0]
   1995a:	b903      	cbnz	r3, 1995e <rpa_refresh_stop+0xa>
   1995c:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   1995e:	4803      	ldr	r0, [pc, #12]	; (1996c <rpa_refresh_stop+0x18>)
   19960:	f010 fb42 	bl	29fe8 <k_delayed_work_cancel>
   19964:	e7fa      	b.n	1995c <rpa_refresh_stop+0x8>
   19966:	bf00      	nop
   19968:	20001b18 	.word	0x20001b18
   1996c:	20002b30 	.word	0x20002b30

00019970 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   19970:	2807      	cmp	r0, #7
   19972:	d816      	bhi.n	199a2 <ctrl_lrpa_get+0x32>
   19974:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19978:	00d3      	lsls	r3, r2, #3
   1997a:	4a0d      	ldr	r2, [pc, #52]	; (199b0 <ctrl_lrpa_get+0x40>)
   1997c:	5cd3      	ldrb	r3, [r2, r3]
   1997e:	f013 0f08 	tst.w	r3, #8
   19982:	d010      	beq.n	199a6 <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   19984:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19988:	00d3      	lsls	r3, r2, #3
   1998a:	4a09      	ldr	r2, [pc, #36]	; (199b0 <ctrl_lrpa_get+0x40>)
   1998c:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   1998e:	f013 0f02 	tst.w	r3, #2
   19992:	d00a      	beq.n	199aa <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   19994:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19998:	00c2      	lsls	r2, r0, #3
   1999a:	4b05      	ldr	r3, [pc, #20]	; (199b0 <ctrl_lrpa_get+0x40>)
   1999c:	4413      	add	r3, r2
   1999e:	6a58      	ldr	r0, [r3, #36]	; 0x24
   199a0:	4770      	bx	lr
		return NULL;
   199a2:	2000      	movs	r0, #0
   199a4:	4770      	bx	lr
   199a6:	2000      	movs	r0, #0
   199a8:	4770      	bx	lr
   199aa:	2000      	movs	r0, #0
}
   199ac:	4770      	bx	lr
   199ae:	bf00      	nop
   199b0:	200019d8 	.word	0x200019d8

000199b4 <ctrl_irks_get>:
	*count = peer_irk_count;
   199b4:	4b02      	ldr	r3, [pc, #8]	; (199c0 <ctrl_irks_get+0xc>)
   199b6:	781b      	ldrb	r3, [r3, #0]
   199b8:	7003      	strb	r3, [r0, #0]
}
   199ba:	4802      	ldr	r0, [pc, #8]	; (199c4 <ctrl_irks_get+0x10>)
   199bc:	4770      	bx	lr
   199be:	bf00      	nop
   199c0:	2000194c 	.word	0x2000194c
   199c4:	20001958 	.word	0x20001958

000199c8 <ctrl_rl_idx>:
	if (whitelist) {
   199c8:	b1c8      	cbz	r0, 199fe <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   199ca:	2907      	cmp	r1, #7
   199cc:	d80b      	bhi.n	199e6 <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   199ce:	4b17      	ldr	r3, [pc, #92]	; (19a2c <ctrl_rl_idx+0x64>)
   199d0:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   199d4:	f013 0f01 	tst.w	r3, #1
   199d8:	d00b      	beq.n	199f2 <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   199da:	4b14      	ldr	r3, [pc, #80]	; (19a2c <ctrl_rl_idx+0x64>)
   199dc:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   199e0:	7849      	ldrb	r1, [r1, #1]
}
   199e2:	4608      	mov	r0, r1
   199e4:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   199e6:	4040      	eors	r0, r0
   199e8:	f380 8811 	msr	BASEPRI, r0
   199ec:	f04f 0004 	mov.w	r0, #4
   199f0:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   199f2:	4040      	eors	r0, r0
   199f4:	f380 8811 	msr	BASEPRI, r0
   199f8:	f04f 0004 	mov.w	r0, #4
   199fc:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   199fe:	2907      	cmp	r1, #7
   19a00:	d80d      	bhi.n	19a1e <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   19a02:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19a06:	00d3      	lsls	r3, r2, #3
   19a08:	4a09      	ldr	r2, [pc, #36]	; (19a30 <ctrl_rl_idx+0x68>)
   19a0a:	5cd3      	ldrb	r3, [r2, r3]
   19a0c:	f013 0f01 	tst.w	r3, #1
   19a10:	d1e7      	bne.n	199e2 <ctrl_rl_idx+0x1a>
   19a12:	4040      	eors	r0, r0
   19a14:	f380 8811 	msr	BASEPRI, r0
   19a18:	f04f 0004 	mov.w	r0, #4
   19a1c:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19a1e:	4040      	eors	r0, r0
   19a20:	f380 8811 	msr	BASEPRI, r0
   19a24:	f04f 0004 	mov.w	r0, #4
   19a28:	df02      	svc	2
   19a2a:	bf00      	nop
   19a2c:	20001b50 	.word	0x20001b50
   19a30:	200019d8 	.word	0x200019d8

00019a34 <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19a34:	4b11      	ldr	r3, [pc, #68]	; (19a7c <ctrl_rl_irk_idx+0x48>)
   19a36:	781b      	ldrb	r3, [r3, #0]
   19a38:	4283      	cmp	r3, r0
   19a3a:	d90c      	bls.n	19a56 <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   19a3c:	4b10      	ldr	r3, [pc, #64]	; (19a80 <ctrl_rl_irk_idx+0x4c>)
   19a3e:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19a40:	2807      	cmp	r0, #7
   19a42:	d80e      	bhi.n	19a62 <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   19a44:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19a48:	00d3      	lsls	r3, r2, #3
   19a4a:	4a0e      	ldr	r2, [pc, #56]	; (19a84 <ctrl_rl_irk_idx+0x50>)
   19a4c:	5cd3      	ldrb	r3, [r2, r3]
   19a4e:	f013 0f01 	tst.w	r3, #1
   19a52:	d00c      	beq.n	19a6e <ctrl_rl_irk_idx+0x3a>
}
   19a54:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   19a56:	4040      	eors	r0, r0
   19a58:	f380 8811 	msr	BASEPRI, r0
   19a5c:	f04f 0004 	mov.w	r0, #4
   19a60:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19a62:	4040      	eors	r0, r0
   19a64:	f380 8811 	msr	BASEPRI, r0
   19a68:	f04f 0004 	mov.w	r0, #4
   19a6c:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   19a6e:	4040      	eors	r0, r0
   19a70:	f380 8811 	msr	BASEPRI, r0
   19a74:	f04f 0004 	mov.w	r0, #4
   19a78:	df02      	svc	2
   19a7a:	bf00      	nop
   19a7c:	2000194c 	.word	0x2000194c
   19a80:	20001950 	.word	0x20001950
   19a84:	200019d8 	.word	0x200019d8

00019a88 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19a88:	2807      	cmp	r0, #7
   19a8a:	d815      	bhi.n	19ab8 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   19a8c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19a90:	00d3      	lsls	r3, r2, #3
   19a92:	4a0a      	ldr	r2, [pc, #40]	; (19abc <ctrl_irk_whitelisted+0x34>)
   19a94:	5cd3      	ldrb	r3, [r2, r3]
   19a96:	f013 0f01 	tst.w	r3, #1
   19a9a:	d007      	beq.n	19aac <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   19a9c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19aa0:	00c3      	lsls	r3, r0, #3
   19aa2:	4a06      	ldr	r2, [pc, #24]	; (19abc <ctrl_irk_whitelisted+0x34>)
   19aa4:	5cd0      	ldrb	r0, [r2, r3]
   19aa6:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19aaa:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19aac:	4040      	eors	r0, r0
   19aae:	f380 8811 	msr	BASEPRI, r0
   19ab2:	f04f 0004 	mov.w	r0, #4
   19ab6:	df02      	svc	2
		return false;
   19ab8:	2000      	movs	r0, #0
}
   19aba:	4770      	bx	lr
   19abc:	200019d8 	.word	0x200019d8

00019ac0 <ctrl_filter_get>:
	if (whitelist) {
   19ac0:	b908      	cbnz	r0, 19ac6 <ctrl_filter_get+0x6>
	return &rl_filter;
   19ac2:	4802      	ldr	r0, [pc, #8]	; (19acc <ctrl_filter_get+0xc>)
}
   19ac4:	4770      	bx	lr
		return &wl_filter;
   19ac6:	4802      	ldr	r0, [pc, #8]	; (19ad0 <ctrl_filter_get+0x10>)
   19ac8:	4770      	bx	lr
   19aca:	bf00      	nop
   19acc:	20001b1c 	.word	0x20001b1c
   19ad0:	20001b90 	.word	0x20001b90

00019ad4 <ll_wl_size_get>:
}
   19ad4:	2008      	movs	r0, #8
   19ad6:	4770      	bx	lr

00019ad8 <ll_wl_clear>:
{
   19ad8:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19ada:	f7fe fb47 	bl	1816c <radio_adv_filter_pol_get>
   19ade:	b110      	cbz	r0, 19ae6 <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19ae0:	240c      	movs	r4, #12
}
   19ae2:	4620      	mov	r0, r4
   19ae4:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19ae6:	f7fe fb59 	bl	1819c <radio_scan_filter_pol_get>
   19aea:	f010 0401 	ands.w	r4, r0, #1
   19aee:	d001      	beq.n	19af4 <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19af0:	240c      	movs	r4, #12
   19af2:	e7f6      	b.n	19ae2 <ll_wl_clear+0xa>
	wl_clear();
   19af4:	f7ff fdfe 	bl	196f4 <wl_clear>
	wl_anon = 0;
   19af8:	2200      	movs	r2, #0
   19afa:	4b01      	ldr	r3, [pc, #4]	; (19b00 <ll_wl_clear+0x28>)
   19afc:	701a      	strb	r2, [r3, #0]
	return 0;
   19afe:	e7f0      	b.n	19ae2 <ll_wl_clear+0xa>
   19b00:	20002ac0 	.word	0x20002ac0

00019b04 <ll_wl_remove>:
{
   19b04:	b510      	push	{r4, lr}
   19b06:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19b08:	f7fe fb30 	bl	1816c <radio_adv_filter_pol_get>
   19b0c:	b108      	cbz	r0, 19b12 <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19b0e:	200c      	movs	r0, #12
   19b10:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19b12:	f7fe fb43 	bl	1819c <radio_scan_filter_pol_get>
   19b16:	f010 0001 	ands.w	r0, r0, #1
   19b1a:	d001      	beq.n	19b20 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19b1c:	200c      	movs	r0, #12
}
   19b1e:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19b20:	7823      	ldrb	r3, [r4, #0]
   19b22:	2bff      	cmp	r3, #255	; 0xff
   19b24:	d003      	beq.n	19b2e <ll_wl_remove+0x2a>
	return wl_remove(addr);
   19b26:	4620      	mov	r0, r4
   19b28:	f7ff fe46 	bl	197b8 <wl_remove>
   19b2c:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   19b2e:	2200      	movs	r2, #0
   19b30:	4b01      	ldr	r3, [pc, #4]	; (19b38 <ll_wl_remove+0x34>)
   19b32:	701a      	strb	r2, [r3, #0]
		return 0;
   19b34:	bd10      	pop	{r4, pc}
   19b36:	bf00      	nop
   19b38:	20002ac0 	.word	0x20002ac0

00019b3c <ll_filters_adv_update>:
{
   19b3c:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19b3e:	b918      	cbnz	r0, 19b48 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19b40:	4b09      	ldr	r3, [pc, #36]	; (19b68 <ll_filters_adv_update+0x2c>)
   19b42:	781b      	ldrb	r3, [r3, #0]
   19b44:	b943      	cbnz	r3, 19b58 <ll_filters_adv_update+0x1c>
   19b46:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19b48:	f7fe fb28 	bl	1819c <radio_scan_filter_pol_get>
   19b4c:	f010 0f01 	tst.w	r0, #1
   19b50:	d1f6      	bne.n	19b40 <ll_filters_adv_update+0x4>
		filter_wl_update();
   19b52:	f7ff fe6f 	bl	19834 <filter_wl_update>
   19b56:	e7f3      	b.n	19b40 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19b58:	f7fe fb18 	bl	1818c <radio_scan_is_enabled>
   19b5c:	2800      	cmp	r0, #0
   19b5e:	d1f2      	bne.n	19b46 <ll_filters_adv_update+0xa>
		filter_rl_update();
   19b60:	f7ff fea8 	bl	198b4 <filter_rl_update>
}
   19b64:	e7ef      	b.n	19b46 <ll_filters_adv_update+0xa>
   19b66:	bf00      	nop
   19b68:	20001b18 	.word	0x20001b18

00019b6c <ll_filters_scan_update>:
{
   19b6c:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19b6e:	f010 0f01 	tst.w	r0, #1
   19b72:	d103      	bne.n	19b7c <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   19b74:	4b08      	ldr	r3, [pc, #32]	; (19b98 <ll_filters_scan_update+0x2c>)
   19b76:	781b      	ldrb	r3, [r3, #0]
   19b78:	b93b      	cbnz	r3, 19b8a <ll_filters_scan_update+0x1e>
   19b7a:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19b7c:	f7fe faf6 	bl	1816c <radio_adv_filter_pol_get>
   19b80:	2800      	cmp	r0, #0
   19b82:	d1f7      	bne.n	19b74 <ll_filters_scan_update+0x8>
		filter_wl_update();
   19b84:	f7ff fe56 	bl	19834 <filter_wl_update>
   19b88:	e7f4      	b.n	19b74 <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   19b8a:	f7fe fae7 	bl	1815c <radio_adv_is_enabled>
   19b8e:	2800      	cmp	r0, #0
   19b90:	d1f3      	bne.n	19b7a <ll_filters_scan_update+0xe>
		filter_rl_update();
   19b92:	f7ff fe8f 	bl	198b4 <filter_rl_update>
}
   19b96:	e7f0      	b.n	19b7a <ll_filters_scan_update+0xe>
   19b98:	20001b18 	.word	0x20001b18

00019b9c <ll_rl_find>:
{
   19b9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ba0:	4607      	mov	r7, r0
   19ba2:	4688      	mov	r8, r1
	if (free) {
   19ba4:	4616      	mov	r6, r2
   19ba6:	b10a      	cbz	r2, 19bac <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   19ba8:	23ff      	movs	r3, #255	; 0xff
   19baa:	7013      	strb	r3, [r2, #0]
{
   19bac:	2400      	movs	r4, #0
   19bae:	e00e      	b.n	19bce <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19bb0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19bb4:	00d3      	lsls	r3, r2, #3
   19bb6:	481a      	ldr	r0, [pc, #104]	; (19c20 <ll_rl_find+0x84>)
   19bb8:	4418      	add	r0, r3
   19bba:	2206      	movs	r2, #6
   19bbc:	4641      	mov	r1, r8
   19bbe:	3001      	adds	r0, #1
   19bc0:	f010 fe42 	bl	2a848 <memcmp>
   19bc4:	b9c8      	cbnz	r0, 19bfa <ll_rl_find+0x5e>
   19bc6:	e027      	b.n	19c18 <ll_rl_find+0x7c>
			*free = i;
   19bc8:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19bca:	3401      	adds	r4, #1
   19bcc:	b2e4      	uxtb	r4, r4
   19bce:	2c07      	cmp	r4, #7
   19bd0:	d821      	bhi.n	19c16 <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19bd2:	4625      	mov	r5, r4
   19bd4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19bd8:	00d3      	lsls	r3, r2, #3
   19bda:	4a11      	ldr	r2, [pc, #68]	; (19c20 <ll_rl_find+0x84>)
   19bdc:	5cd3      	ldrb	r3, [r2, r3]
   19bde:	f013 0f01 	tst.w	r3, #1
   19be2:	d00a      	beq.n	19bfa <ll_rl_find+0x5e>
   19be4:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19be8:	00d3      	lsls	r3, r2, #3
   19bea:	4a0d      	ldr	r2, [pc, #52]	; (19c20 <ll_rl_find+0x84>)
   19bec:	5cd3      	ldrb	r3, [r2, r3]
   19bee:	f3c3 1380 	ubfx	r3, r3, #6, #1
   19bf2:	f007 0201 	and.w	r2, r7, #1
   19bf6:	4293      	cmp	r3, r2
   19bf8:	d0da      	beq.n	19bb0 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   19bfa:	2e00      	cmp	r6, #0
   19bfc:	d0e5      	beq.n	19bca <ll_rl_find+0x2e>
   19bfe:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19c02:	00eb      	lsls	r3, r5, #3
   19c04:	4a06      	ldr	r2, [pc, #24]	; (19c20 <ll_rl_find+0x84>)
   19c06:	5cd3      	ldrb	r3, [r2, r3]
   19c08:	f013 0f01 	tst.w	r3, #1
   19c0c:	d1dd      	bne.n	19bca <ll_rl_find+0x2e>
   19c0e:	7833      	ldrb	r3, [r6, #0]
   19c10:	2bff      	cmp	r3, #255	; 0xff
   19c12:	d1da      	bne.n	19bca <ll_rl_find+0x2e>
   19c14:	e7d8      	b.n	19bc8 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   19c16:	24ff      	movs	r4, #255	; 0xff
}
   19c18:	4620      	mov	r0, r4
   19c1a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19c1e:	bf00      	nop
   19c20:	200019d8 	.word	0x200019d8

00019c24 <wl_add>:
{
   19c24:	b570      	push	{r4, r5, r6, lr}
   19c26:	b082      	sub	sp, #8
   19c28:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19c2a:	4604      	mov	r4, r0
   19c2c:	f814 0b01 	ldrb.w	r0, [r4], #1
   19c30:	f10d 0207 	add.w	r2, sp, #7
   19c34:	4621      	mov	r1, r4
   19c36:	f7ff fd87 	bl	19748 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19c3a:	2807      	cmp	r0, #7
   19c3c:	d802      	bhi.n	19c44 <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19c3e:	2012      	movs	r0, #18
}
   19c40:	b002      	add	sp, #8
   19c42:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   19c44:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19c48:	2e07      	cmp	r6, #7
   19c4a:	d901      	bls.n	19c50 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19c4c:	2007      	movs	r0, #7
   19c4e:	e7f7      	b.n	19c40 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19c50:	4629      	mov	r1, r5
   19c52:	f811 2b01 	ldrb.w	r2, [r1], #1
   19c56:	4817      	ldr	r0, [pc, #92]	; (19cb4 <wl_add+0x90>)
   19c58:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19c5c:	f362 0341 	bfi	r3, r2, #1, #1
   19c60:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   19c64:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19c68:	2206      	movs	r2, #6
   19c6a:	3002      	adds	r0, #2
   19c6c:	f7e6 fb28 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19c70:	2200      	movs	r2, #0
   19c72:	4621      	mov	r1, r4
   19c74:	7828      	ldrb	r0, [r5, #0]
   19c76:	f7ff ff91 	bl	19b9c <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19c7a:	2807      	cmp	r0, #7
   19c7c:	d814      	bhi.n	19ca8 <wl_add+0x84>
		wl[i].rl_idx = j;
   19c7e:	4b0d      	ldr	r3, [pc, #52]	; (19cb4 <wl_add+0x90>)
   19c80:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19c84:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   19c86:	490c      	ldr	r1, [pc, #48]	; (19cb8 <wl_add+0x94>)
   19c88:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19c8c:	00c3      	lsls	r3, r0, #3
   19c8e:	5cca      	ldrb	r2, [r1, r3]
   19c90:	f042 0220 	orr.w	r2, r2, #32
   19c94:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   19c96:	4a07      	ldr	r2, [pc, #28]	; (19cb4 <wl_add+0x90>)
   19c98:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19c9c:	f043 0301 	orr.w	r3, r3, #1
   19ca0:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   19ca4:	2000      	movs	r0, #0
   19ca6:	e7cb      	b.n	19c40 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19ca8:	4b02      	ldr	r3, [pc, #8]	; (19cb4 <wl_add+0x90>)
   19caa:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19cae:	22ff      	movs	r2, #255	; 0xff
   19cb0:	705a      	strb	r2, [r3, #1]
   19cb2:	e7f0      	b.n	19c96 <wl_add+0x72>
   19cb4:	20001b50 	.word	0x20001b50
   19cb8:	200019d8 	.word	0x200019d8

00019cbc <ll_wl_add>:
{
   19cbc:	b510      	push	{r4, lr}
   19cbe:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19cc0:	f7fe fa54 	bl	1816c <radio_adv_filter_pol_get>
   19cc4:	b108      	cbz	r0, 19cca <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19cc6:	200c      	movs	r0, #12
   19cc8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   19cca:	f7fe fa67 	bl	1819c <radio_scan_filter_pol_get>
   19cce:	f010 0001 	ands.w	r0, r0, #1
   19cd2:	d001      	beq.n	19cd8 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19cd4:	200c      	movs	r0, #12
}
   19cd6:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19cd8:	7823      	ldrb	r3, [r4, #0]
   19cda:	2bff      	cmp	r3, #255	; 0xff
   19cdc:	d003      	beq.n	19ce6 <ll_wl_add+0x2a>
	return wl_add(addr);
   19cde:	4620      	mov	r0, r4
   19ce0:	f7ff ffa0 	bl	19c24 <wl_add>
   19ce4:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   19ce6:	2201      	movs	r2, #1
   19ce8:	4b01      	ldr	r3, [pc, #4]	; (19cf0 <ll_wl_add+0x34>)
   19cea:	701a      	strb	r2, [r3, #0]
		return 0;
   19cec:	bd10      	pop	{r4, pc}
   19cee:	bf00      	nop
   19cf0:	20002ac0 	.word	0x20002ac0

00019cf4 <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   19cf4:	4b17      	ldr	r3, [pc, #92]	; (19d54 <ctrl_rl_idx_allowed+0x60>)
   19cf6:	781b      	ldrb	r3, [r3, #0]
   19cf8:	b32b      	cbz	r3, 19d46 <ctrl_rl_idx_allowed+0x52>
   19cfa:	2907      	cmp	r1, #7
   19cfc:	d825      	bhi.n	19d4a <ctrl_rl_idx_allowed+0x56>
   19cfe:	bb30      	cbnz	r0, 19d4e <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   19d00:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19d04:	00d3      	lsls	r3, r2, #3
   19d06:	4a14      	ldr	r2, [pc, #80]	; (19d58 <ctrl_rl_idx_allowed+0x64>)
   19d08:	5cd3      	ldrb	r3, [r2, r3]
   19d0a:	f013 0f01 	tst.w	r3, #1
   19d0e:	d010      	beq.n	19d32 <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19d10:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   19d14:	00d3      	lsls	r3, r2, #3
   19d16:	4a10      	ldr	r2, [pc, #64]	; (19d58 <ctrl_rl_idx_allowed+0x64>)
   19d18:	5cd3      	ldrb	r3, [r2, r3]
   19d1a:	f013 0f04 	tst.w	r3, #4
   19d1e:	d00e      	beq.n	19d3e <ctrl_rl_idx_allowed+0x4a>
   19d20:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   19d24:	00cb      	lsls	r3, r1, #3
   19d26:	5cd3      	ldrb	r3, [r2, r3]
   19d28:	f013 0f10 	tst.w	r3, #16
   19d2c:	d009      	beq.n	19d42 <ctrl_rl_idx_allowed+0x4e>
   19d2e:	2001      	movs	r0, #1
   19d30:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19d32:	4040      	eors	r0, r0
   19d34:	f380 8811 	msr	BASEPRI, r0
   19d38:	f04f 0004 	mov.w	r0, #4
   19d3c:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19d3e:	2001      	movs	r0, #1
   19d40:	4770      	bx	lr
   19d42:	2000      	movs	r0, #0
   19d44:	4770      	bx	lr
		return true;
   19d46:	2001      	movs	r0, #1
   19d48:	4770      	bx	lr
   19d4a:	2001      	movs	r0, #1
   19d4c:	4770      	bx	lr
   19d4e:	2001      	movs	r0, #1
}
   19d50:	4770      	bx	lr
   19d52:	bf00      	nop
   19d54:	20001b18 	.word	0x20001b18
   19d58:	200019d8 	.word	0x200019d8

00019d5c <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d5c:	2807      	cmp	r0, #7
   19d5e:	d81a      	bhi.n	19d96 <ll_rl_id_addr_get+0x3a>
{
   19d60:	b570      	push	{r4, r5, r6, lr}
   19d62:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   19d64:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19d68:	00ec      	lsls	r4, r5, #3
   19d6a:	4811      	ldr	r0, [pc, #68]	; (19db0 <ll_rl_id_addr_get+0x54>)
   19d6c:	5d00      	ldrb	r0, [r0, r4]
   19d6e:	f010 0f01 	tst.w	r0, #1
   19d72:	d016      	beq.n	19da2 <ll_rl_id_addr_get+0x46>
   19d74:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   19d76:	4d0e      	ldr	r5, [pc, #56]	; (19db0 <ll_rl_id_addr_get+0x54>)
   19d78:	009c      	lsls	r4, r3, #2
   19d7a:	18e6      	adds	r6, r4, r3
   19d7c:	00f2      	lsls	r2, r6, #3
   19d7e:	4616      	mov	r6, r2
   19d80:	5caa      	ldrb	r2, [r5, r2]
   19d82:	f3c2 1280 	ubfx	r2, r2, #6, #1
   19d86:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19d88:	4631      	mov	r1, r6
   19d8a:	4429      	add	r1, r5
   19d8c:	2206      	movs	r2, #6
   19d8e:	3101      	adds	r1, #1
   19d90:	f7e6 fa96 	bl	2c0 <memcpy>
   19d94:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19d96:	4040      	eors	r0, r0
   19d98:	f380 8811 	msr	BASEPRI, r0
   19d9c:	f04f 0004 	mov.w	r0, #4
   19da0:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   19da2:	4040      	eors	r0, r0
   19da4:	f380 8811 	msr	BASEPRI, r0
   19da8:	f04f 0004 	mov.w	r0, #4
   19dac:	df02      	svc	2
   19dae:	bf00      	nop
   19db0:	200019d8 	.word	0x200019d8

00019db4 <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   19db4:	4b29      	ldr	r3, [pc, #164]	; (19e5c <ctrl_rl_addr_allowed+0xa8>)
   19db6:	781b      	ldrb	r3, [r3, #0]
   19db8:	2b00      	cmp	r3, #0
   19dba:	d04a      	beq.n	19e52 <ctrl_rl_addr_allowed+0x9e>
   19dbc:	7813      	ldrb	r3, [r2, #0]
   19dbe:	2bff      	cmp	r3, #255	; 0xff
   19dc0:	d001      	beq.n	19dc6 <ctrl_rl_addr_allowed+0x12>
		return true;
   19dc2:	2001      	movs	r0, #1
   19dc4:	4770      	bx	lr
   19dc6:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dc8:	2b07      	cmp	r3, #7
   19dca:	d844      	bhi.n	19e56 <ctrl_rl_addr_allowed+0xa2>
{
   19dcc:	b5f0      	push	{r4, r5, r6, r7, lr}
   19dce:	e005      	b.n	19ddc <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   19dd0:	2c06      	cmp	r4, #6
   19dd2:	d026      	beq.n	19e22 <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   19dd4:	3301      	adds	r3, #1
   19dd6:	b2db      	uxtb	r3, r3
   19dd8:	2b07      	cmp	r3, #7
   19dda:	d838      	bhi.n	19e4e <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   19ddc:	461e      	mov	r6, r3
   19dde:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19de2:	00ec      	lsls	r4, r5, #3
   19de4:	4d1e      	ldr	r5, [pc, #120]	; (19e60 <ctrl_rl_addr_allowed+0xac>)
   19de6:	5d2c      	ldrb	r4, [r5, r4]
   19de8:	f014 0f01 	tst.w	r4, #1
   19dec:	d0f2      	beq.n	19dd4 <ctrl_rl_addr_allowed+0x20>
   19dee:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19df2:	00ec      	lsls	r4, r5, #3
   19df4:	4d1a      	ldr	r5, [pc, #104]	; (19e60 <ctrl_rl_addr_allowed+0xac>)
   19df6:	5d2c      	ldrb	r4, [r5, r4]
   19df8:	f3c4 1480 	ubfx	r4, r4, #6, #1
   19dfc:	4284      	cmp	r4, r0
   19dfe:	d1e9      	bne.n	19dd4 <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   19e00:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   19e04:	00ec      	lsls	r4, r5, #3
   19e06:	4d16      	ldr	r5, [pc, #88]	; (19e60 <ctrl_rl_addr_allowed+0xac>)
   19e08:	4425      	add	r5, r4
   19e0a:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   19e0c:	2400      	movs	r4, #0
   19e0e:	2c05      	cmp	r4, #5
   19e10:	d8de      	bhi.n	19dd0 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   19e12:	f815 e004 	ldrb.w	lr, [r5, r4]
   19e16:	5d0f      	ldrb	r7, [r1, r4]
   19e18:	45be      	cmp	lr, r7
   19e1a:	d1d9      	bne.n	19dd0 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19e1c:	3401      	adds	r4, #1
   19e1e:	b2e4      	uxtb	r4, r4
   19e20:	e7f5      	b.n	19e0e <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   19e22:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   19e24:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19e28:	00d3      	lsls	r3, r2, #3
   19e2a:	4a0d      	ldr	r2, [pc, #52]	; (19e60 <ctrl_rl_addr_allowed+0xac>)
   19e2c:	5cd3      	ldrb	r3, [r2, r3]
   19e2e:	f013 0f04 	tst.w	r3, #4
   19e32:	d00a      	beq.n	19e4a <ctrl_rl_addr_allowed+0x96>
   19e34:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19e38:	00f3      	lsls	r3, r6, #3
   19e3a:	5cd3      	ldrb	r3, [r2, r3]
   19e3c:	f013 0f10 	tst.w	r3, #16
   19e40:	d101      	bne.n	19e46 <ctrl_rl_addr_allowed+0x92>
   19e42:	2000      	movs	r0, #0
   19e44:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e46:	2001      	movs	r0, #1
   19e48:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19e4a:	2001      	movs	r0, #1
   19e4c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19e4e:	2001      	movs	r0, #1
   19e50:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   19e52:	2001      	movs	r0, #1
   19e54:	4770      	bx	lr
	return true;
   19e56:	2001      	movs	r0, #1
}
   19e58:	4770      	bx	lr
   19e5a:	bf00      	nop
   19e5c:	20001b18 	.word	0x20001b18
   19e60:	200019d8 	.word	0x200019d8

00019e64 <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19e64:	4b13      	ldr	r3, [pc, #76]	; (19eb4 <ctrl_rl_addr_resolve+0x50>)
   19e66:	781b      	ldrb	r3, [r3, #0]
   19e68:	b1db      	cbz	r3, 19ea2 <ctrl_rl_addr_resolve+0x3e>
   19e6a:	2a07      	cmp	r2, #7
   19e6c:	d81b      	bhi.n	19ea6 <ctrl_rl_addr_resolve+0x42>
{
   19e6e:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19e70:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   19e74:	00e3      	lsls	r3, r4, #3
   19e76:	4c10      	ldr	r4, [pc, #64]	; (19eb8 <ctrl_rl_addr_resolve+0x54>)
   19e78:	5ce3      	ldrb	r3, [r4, r3]
   19e7a:	f013 0f08 	tst.w	r3, #8
   19e7e:	d014      	beq.n	19eaa <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19e80:	b1a8      	cbz	r0, 19eae <ctrl_rl_addr_resolve+0x4a>
   19e82:	794b      	ldrb	r3, [r1, #5]
   19e84:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19e88:	2b40      	cmp	r3, #64	; 0x40
   19e8a:	d001      	beq.n	19e90 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19e8c:	2000      	movs	r0, #0
}
   19e8e:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19e90:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19e94:	00d3      	lsls	r3, r2, #3
   19e96:	4620      	mov	r0, r4
   19e98:	4418      	add	r0, r3
   19e9a:	3007      	adds	r0, #7
   19e9c:	f7ea fbc6 	bl	462c <bt_rpa_irk_matches>
   19ea0:	bd10      	pop	{r4, pc}
		return false;
   19ea2:	2000      	movs	r0, #0
   19ea4:	4770      	bx	lr
   19ea6:	2000      	movs	r0, #0
   19ea8:	4770      	bx	lr
   19eaa:	2000      	movs	r0, #0
   19eac:	bd10      	pop	{r4, pc}
	return false;
   19eae:	2000      	movs	r0, #0
   19eb0:	bd10      	pop	{r4, pc}
   19eb2:	bf00      	nop
   19eb4:	20001b18 	.word	0x20001b18
   19eb8:	200019d8 	.word	0x200019d8

00019ebc <ctrl_rl_enabled>:
	return rl_enable;
   19ebc:	4b02      	ldr	r3, [pc, #8]	; (19ec8 <ctrl_rl_enabled+0xc>)
   19ebe:	7818      	ldrb	r0, [r3, #0]
}
   19ec0:	3000      	adds	r0, #0
   19ec2:	bf18      	it	ne
   19ec4:	2001      	movne	r0, #1
   19ec6:	4770      	bx	lr
   19ec8:	20001b18 	.word	0x20001b18

00019ecc <ll_rl_pdu_adv_update>:
{
   19ecc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   19ece:	4605      	mov	r5, r0
   19ed0:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   19ed2:	780b      	ldrb	r3, [r1, #0]
   19ed4:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   19ed8:	2b04      	cmp	r3, #4
   19eda:	d024      	beq.n	19f26 <ll_rl_pdu_adv_update+0x5a>
   19edc:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   19ede:	f000 fbc5 	bl	1a66c <ll_adv_set_get>
   19ee2:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   19ee4:	2d07      	cmp	r5, #7
   19ee6:	d826      	bhi.n	19f36 <ll_rl_pdu_adv_update+0x6a>
   19ee8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19eec:	00d3      	lsls	r3, r2, #3
   19eee:	4a30      	ldr	r2, [pc, #192]	; (19fb0 <ll_rl_pdu_adv_update+0xe4>)
   19ef0:	5cd3      	ldrb	r3, [r2, r3]
   19ef2:	f013 0f08 	tst.w	r3, #8
   19ef6:	d01e      	beq.n	19f36 <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   19ef8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19efc:	00d3      	lsls	r3, r2, #3
   19efe:	4a2c      	ldr	r2, [pc, #176]	; (19fb0 <ll_rl_pdu_adv_update+0xe4>)
   19f00:	5cd3      	ldrb	r3, [r2, r3]
   19f02:	f013 0f02 	tst.w	r3, #2
   19f06:	d010      	beq.n	19f2a <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   19f08:	7823      	ldrb	r3, [r4, #0]
   19f0a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   19f0e:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   19f10:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19f14:	00da      	lsls	r2, r3, #3
   19f16:	4b26      	ldr	r3, [pc, #152]	; (19fb0 <ll_rl_pdu_adv_update+0xe4>)
   19f18:	4413      	add	r3, r2
   19f1a:	2206      	movs	r2, #6
   19f1c:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19f1e:	4638      	mov	r0, r7
   19f20:	f7e6 f9ce 	bl	2c0 <memcpy>
   19f24:	e014      	b.n	19f50 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   19f26:	1c8f      	adds	r7, r1, #2
   19f28:	e7d9      	b.n	19ede <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19f2a:	4040      	eors	r0, r0
   19f2c:	f380 8811 	msr	BASEPRI, r0
   19f30:	f04f 0004 	mov.w	r0, #4
   19f34:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   19f36:	7833      	ldrb	r3, [r6, #0]
   19f38:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19f3c:	7822      	ldrb	r2, [r4, #0]
   19f3e:	f363 1286 	bfi	r2, r3, #6, #1
   19f42:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   19f44:	7830      	ldrb	r0, [r6, #0]
   19f46:	4639      	mov	r1, r7
   19f48:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19f4c:	f7ff fba0 	bl	19690 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19f50:	7823      	ldrb	r3, [r4, #0]
   19f52:	f003 030f 	and.w	r3, r3, #15
   19f56:	2b01      	cmp	r3, #1
   19f58:	d000      	beq.n	19f5c <ll_rl_pdu_adv_update+0x90>
   19f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19f5c:	2d07      	cmp	r5, #7
   19f5e:	d807      	bhi.n	19f70 <ll_rl_pdu_adv_update+0xa4>
   19f60:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f64:	00d3      	lsls	r3, r2, #3
   19f66:	4a12      	ldr	r2, [pc, #72]	; (19fb0 <ll_rl_pdu_adv_update+0xe4>)
   19f68:	5cd3      	ldrb	r3, [r2, r3]
   19f6a:	f013 0f04 	tst.w	r3, #4
   19f6e:	d10d      	bne.n	19f8c <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19f70:	4631      	mov	r1, r6
   19f72:	f811 3b02 	ldrb.w	r3, [r1], #2
   19f76:	09db      	lsrs	r3, r3, #7
   19f78:	7822      	ldrb	r2, [r4, #0]
   19f7a:	f363 12c7 	bfi	r2, r3, #7, #1
   19f7e:	4620      	mov	r0, r4
   19f80:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19f84:	2206      	movs	r2, #6
   19f86:	f7e6 f99b 	bl	2c0 <memcpy>
}
   19f8a:	e7e6      	b.n	19f5a <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19f8c:	7823      	ldrb	r3, [r4, #0]
   19f8e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   19f92:	4620      	mov	r0, r4
   19f94:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19f98:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19f9c:	00eb      	lsls	r3, r5, #3
   19f9e:	3318      	adds	r3, #24
   19fa0:	4611      	mov	r1, r2
   19fa2:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   19fa4:	2206      	movs	r2, #6
   19fa6:	4411      	add	r1, r2
   19fa8:	f7e6 f98a 	bl	2c0 <memcpy>
   19fac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19fae:	bf00      	nop
   19fb0:	200019d8 	.word	0x200019d8

00019fb4 <rpa_adv_refresh>:
{
   19fb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   19fb8:	f000 fb58 	bl	1a66c <ll_adv_set_get>
   19fbc:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   19fbe:	7803      	ldrb	r3, [r0, #0]
   19fc0:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19fc4:	2b40      	cmp	r3, #64	; 0x40
   19fc6:	d003      	beq.n	19fd0 <rpa_adv_refresh+0x1c>
   19fc8:	2b60      	cmp	r3, #96	; 0x60
   19fca:	d001      	beq.n	19fd0 <rpa_adv_refresh+0x1c>
   19fcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19fd0:	f7fe f8bc 	bl	1814c <radio_adv_data_get>
   19fd4:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19fd6:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19fda:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19fde:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19fe2:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   19fe4:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19fe8:	429d      	cmp	r5, r3
   19fea:	d02d      	beq.n	1a048 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19fec:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19ff0:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19ff4:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19ff8:	5ca0      	ldrb	r0, [r4, r2]
   19ffa:	5ce1      	ldrb	r1, [r4, r3]
   19ffc:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   1a000:	f36f 1104 	bfc	r1, #4, #1
   1a004:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   1a006:	5ca2      	ldrb	r2, [r4, r2]
   1a008:	f3c2 1240 	ubfx	r2, r2, #5, #1
   1a00c:	b2c9      	uxtb	r1, r1
   1a00e:	f362 1145 	bfi	r1, r2, #5, #1
   1a012:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   1a014:	4631      	mov	r1, r6
   1a016:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a01a:	2200      	movs	r2, #0
   1a01c:	09c0      	lsrs	r0, r0, #7
   1a01e:	f7ff fdbd 	bl	19b9c <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1a022:	2807      	cmp	r0, #7
   1a024:	d816      	bhi.n	1a054 <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   1a026:	4641      	mov	r1, r8
   1a028:	f7ff ff50 	bl	19ecc <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   1a02c:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   1a02e:	3a06      	subs	r2, #6
   1a030:	f107 0108 	add.w	r1, r7, #8
   1a034:	f108 0008 	add.w	r0, r8, #8
   1a038:	f7e6 f942 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   1a03c:	787b      	ldrb	r3, [r7, #1]
   1a03e:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1a042:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a046:	e7c1      	b.n	19fcc <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   1a048:	3501      	adds	r5, #1
   1a04a:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a04c:	2d02      	cmp	r5, #2
   1a04e:	d1cd      	bne.n	19fec <rpa_adv_refresh+0x38>
			last = 0;
   1a050:	2500      	movs	r5, #0
   1a052:	e7cb      	b.n	19fec <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1a054:	4040      	eors	r0, r0
   1a056:	f380 8811 	msr	BASEPRI, r0
   1a05a:	f04f 0004 	mov.w	r0, #4
   1a05e:	df02      	svc	2

0001a060 <ll_rl_rpa_update>:
{
   1a060:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a064:	b085      	sub	sp, #20
   1a066:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   1a068:	f00f fa44 	bl	294f4 <_impl_k_uptime_get>
   1a06c:	4606      	mov	r6, r0
   1a06e:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   1a070:	f1b9 0f00 	cmp.w	r9, #0
   1a074:	d115      	bne.n	1a0a2 <ll_rl_rpa_update+0x42>
   1a076:	4b57      	ldr	r3, [pc, #348]	; (1a1d4 <ll_rl_rpa_update+0x174>)
   1a078:	e9d3 0100 	ldrd	r0, r1, [r3]
   1a07c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1a080:	bf08      	it	eq
   1a082:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1a086:	d010      	beq.n	1a0aa <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   1a088:	1a30      	subs	r0, r6, r0
   1a08a:	eb67 0101 	sbc.w	r1, r7, r1
   1a08e:	4b52      	ldr	r3, [pc, #328]	; (1a1d8 <ll_rl_rpa_update+0x178>)
   1a090:	681a      	ldr	r2, [r3, #0]
   1a092:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1a094:	4290      	cmp	r0, r2
   1a096:	eb71 0303 	sbcs.w	r3, r1, r3
   1a09a:	db09      	blt.n	1a0b0 <ll_rl_rpa_update+0x50>
   1a09c:	f04f 0801 	mov.w	r8, #1
   1a0a0:	e001      	b.n	1a0a6 <ll_rl_rpa_update+0x46>
   1a0a2:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0a6:	2400      	movs	r4, #0
   1a0a8:	e02a      	b.n	1a100 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   1a0aa:	f04f 0801 	mov.w	r8, #1
   1a0ae:	e7fa      	b.n	1a0a6 <ll_rl_rpa_update+0x46>
   1a0b0:	f04f 0800 	mov.w	r8, #0
   1a0b4:	e7f7      	b.n	1a0a6 <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a0b6:	7818      	ldrb	r0, [r3, #0]
   1a0b8:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1a0ba:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a0bc:	3b01      	subs	r3, #1
   1a0be:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1a0c0:	2a00      	cmp	r2, #0
   1a0c2:	d1f8      	bne.n	1a0b6 <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   1a0c4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a0c8:	00d3      	lsls	r3, r2, #3
   1a0ca:	3318      	adds	r3, #24
   1a0cc:	4943      	ldr	r1, [pc, #268]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a0ce:	4419      	add	r1, r3
   1a0d0:	3106      	adds	r1, #6
   1a0d2:	4668      	mov	r0, sp
   1a0d4:	f7ea fabe 	bl	4654 <bt_rpa_create>
				LL_ASSERT(!err);
   1a0d8:	2800      	cmp	r0, #0
   1a0da:	d13c      	bne.n	1a156 <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   1a0dc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a0e0:	00d3      	lsls	r3, r2, #3
   1a0e2:	4a3e      	ldr	r2, [pc, #248]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a0e4:	5cd3      	ldrb	r3, [r2, r3]
   1a0e6:	f013 0f08 	tst.w	r3, #8
   1a0ea:	d13a      	bne.n	1a162 <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   1a0ec:	493b      	ldr	r1, [pc, #236]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a0ee:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a0f2:	00eb      	lsls	r3, r5, #3
   1a0f4:	5cca      	ldrb	r2, [r1, r3]
   1a0f6:	f042 0202 	orr.w	r2, r2, #2
   1a0fa:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1a0fc:	3401      	adds	r4, #1
   1a0fe:	b2e4      	uxtb	r4, r4
   1a100:	2c07      	cmp	r4, #7
   1a102:	d854      	bhi.n	1a1ae <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   1a104:	4625      	mov	r5, r4
   1a106:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a10a:	00d3      	lsls	r3, r2, #3
   1a10c:	4a33      	ldr	r2, [pc, #204]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a10e:	5cd3      	ldrb	r3, [r2, r3]
   1a110:	f013 0f01 	tst.w	r3, #1
   1a114:	d0f2      	beq.n	1a0fc <ll_rl_rpa_update+0x9c>
   1a116:	f1b8 0f00 	cmp.w	r8, #0
   1a11a:	d107      	bne.n	1a12c <ll_rl_rpa_update+0xcc>
   1a11c:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1a120:	00d3      	lsls	r3, r2, #3
   1a122:	4a2e      	ldr	r2, [pc, #184]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a124:	5cd3      	ldrb	r3, [r2, r3]
   1a126:	f013 0f02 	tst.w	r3, #2
   1a12a:	d1e7      	bne.n	1a0fc <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   1a12c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a130:	00d3      	lsls	r3, r2, #3
   1a132:	4a2a      	ldr	r2, [pc, #168]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a134:	5cd3      	ldrb	r3, [r2, r3]
   1a136:	f013 0f04 	tst.w	r3, #4
   1a13a:	d0cf      	beq.n	1a0dc <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   1a13c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a140:	00da      	lsls	r2, r3, #3
   1a142:	4b26      	ldr	r3, [pc, #152]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a144:	4413      	add	r3, r2
   1a146:	7dda      	ldrb	r2, [r3, #23]
   1a148:	4b25      	ldr	r3, [pc, #148]	; (1a1e0 <ll_rl_rpa_update+0x180>)
   1a14a:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   1a14e:	330f      	adds	r3, #15
   1a150:	2210      	movs	r2, #16
   1a152:	4669      	mov	r1, sp
   1a154:	e7b4      	b.n	1a0c0 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1a156:	4040      	eors	r0, r0
   1a158:	f380 8811 	msr	BASEPRI, r0
   1a15c:	f04f 0004 	mov.w	r0, #4
   1a160:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1a162:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a166:	00d3      	lsls	r3, r2, #3
   1a168:	481c      	ldr	r0, [pc, #112]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a16a:	4418      	add	r0, r3
   1a16c:	4669      	mov	r1, sp
   1a16e:	3007      	adds	r0, #7
   1a170:	f7ea fa70 	bl	4654 <bt_rpa_create>
				LL_ASSERT(!err);
   1a174:	b9a8      	cbnz	r0, 1a1a2 <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1a176:	00ab      	lsls	r3, r5, #2
   1a178:	442b      	add	r3, r5
   1a17a:	00da      	lsls	r2, r3, #3
   1a17c:	4b17      	ldr	r3, [pc, #92]	; (1a1dc <ll_rl_rpa_update+0x17c>)
   1a17e:	eb03 0a02 	add.w	sl, r3, r2
   1a182:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1a186:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   1a18a:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   1a18e:	4b15      	ldr	r3, [pc, #84]	; (1a1e4 <ll_rl_rpa_update+0x184>)
   1a190:	449b      	add	fp, r3
   1a192:	2206      	movs	r2, #6
   1a194:	4669      	mov	r1, sp
   1a196:	4658      	mov	r0, fp
   1a198:	f7e6 f892 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   1a19c:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   1a1a0:	e7a4      	b.n	1a0ec <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1a1a2:	4040      	eors	r0, r0
   1a1a4:	f380 8811 	msr	BASEPRI, r0
   1a1a8:	f04f 0004 	mov.w	r0, #4
   1a1ac:	df02      	svc	2
	if (all) {
   1a1ae:	f1b8 0f00 	cmp.w	r8, #0
   1a1b2:	d002      	beq.n	1a1ba <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1a1b4:	4b07      	ldr	r3, [pc, #28]	; (1a1d4 <ll_rl_rpa_update+0x174>)
   1a1b6:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   1a1ba:	f1b9 0f00 	cmp.w	r9, #0
   1a1be:	d102      	bne.n	1a1c6 <ll_rl_rpa_update+0x166>
}
   1a1c0:	b005      	add	sp, #20
   1a1c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   1a1c6:	f7fd ffc9 	bl	1815c <radio_adv_is_enabled>
   1a1ca:	2800      	cmp	r0, #0
   1a1cc:	d0f8      	beq.n	1a1c0 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   1a1ce:	f7ff fef1 	bl	19fb4 <rpa_adv_refresh>
}
   1a1d2:	e7f5      	b.n	1a1c0 <ll_rl_rpa_update+0x160>
   1a1d4:	20002ab8 	.word	0x20002ab8
   1a1d8:	20002c64 	.word	0x20002c64
   1a1dc:	200019d8 	.word	0x200019d8
   1a1e0:	20001958 	.word	0x20001958
   1a1e4:	2000191c 	.word	0x2000191c

0001a1e8 <rpa_timeout>:
{
   1a1e8:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   1a1ea:	2001      	movs	r0, #1
   1a1ec:	f7ff ff38 	bl	1a060 <ll_rl_rpa_update>
   1a1f0:	4b03      	ldr	r3, [pc, #12]	; (1a200 <rpa_timeout+0x18>)
   1a1f2:	681a      	ldr	r2, [r3, #0]
   1a1f4:	4903      	ldr	r1, [pc, #12]	; (1a204 <rpa_timeout+0x1c>)
   1a1f6:	4804      	ldr	r0, [pc, #16]	; (1a208 <rpa_timeout+0x20>)
   1a1f8:	f00f ff50 	bl	2a09c <k_delayed_work_submit_to_queue>
   1a1fc:	bd08      	pop	{r3, pc}
   1a1fe:	bf00      	nop
   1a200:	20002c64 	.word	0x20002c64
   1a204:	20002b30 	.word	0x20002b30
   1a208:	20002c78 	.word	0x20002c78

0001a20c <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   1a20c:	2008      	movs	r0, #8
   1a20e:	4770      	bx	lr

0001a210 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   1a210:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   1a212:	2000      	movs	r0, #0
   1a214:	f7ff fb74 	bl	19900 <rl_access_check>
   1a218:	b908      	cbnz	r0, 1a21e <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a21a:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   1a21c:	bd08      	pop	{r3, pc}
	rl_clear();
   1a21e:	f7ff fa7d 	bl	1971c <rl_clear>
	return 0;
   1a222:	2000      	movs	r0, #0
   1a224:	bd08      	pop	{r3, pc}
	...

0001a228 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   1a228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1a22c:	b082      	sub	sp, #8
   1a22e:	4605      	mov	r5, r0
   1a230:	460c      	mov	r4, r1
   1a232:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1a234:	2000      	movs	r0, #0
   1a236:	f7ff fb63 	bl	19900 <rl_access_check>
   1a23a:	b918      	cbnz	r0, 1a244 <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a23c:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   1a23e:	b002      	add	sp, #8
   1a240:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1a244:	462f      	mov	r7, r5
   1a246:	f817 0b01 	ldrb.w	r0, [r7], #1
   1a24a:	f10d 0207 	add.w	r2, sp, #7
   1a24e:	4639      	mov	r1, r7
   1a250:	f7ff fca4 	bl	19b9c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a254:	2807      	cmp	r0, #7
   1a256:	d801      	bhi.n	1a25c <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   1a258:	2012      	movs	r0, #18
   1a25a:	e7f0      	b.n	1a23e <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   1a25c:	f89d 8007 	ldrb.w	r8, [sp, #7]
   1a260:	f1b8 0f07 	cmp.w	r8, #7
   1a264:	d901      	bls.n	1a26a <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1a266:	2007      	movs	r0, #7
   1a268:	e7e9      	b.n	1a23e <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   1a26a:	f8df a130 	ldr.w	sl, [pc, #304]	; 1a39c <ll_rl_add+0x174>
   1a26e:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a272:	4443      	add	r3, r8
   1a274:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   1a278:	eb0a 0009 	add.w	r0, sl, r9
   1a27c:	2206      	movs	r2, #6
   1a27e:	4639      	mov	r1, r7
   1a280:	3001      	adds	r0, #1
   1a282:	f7e6 f81d 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1a286:	782a      	ldrb	r2, [r5, #0]
   1a288:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a28c:	f362 1386 	bfi	r3, r2, #6, #1
   1a290:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1a294:	2110      	movs	r1, #16
   1a296:	4620      	mov	r0, r4
   1a298:	f7f5 f8f2 	bl	f480 <mem_nz>
   1a29c:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a2a0:	f360 0382 	bfi	r3, r0, #2, #1
   1a2a4:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   1a2a8:	2110      	movs	r1, #16
   1a2aa:	4630      	mov	r0, r6
   1a2ac:	f7f5 f8e8 	bl	f480 <mem_nz>
   1a2b0:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1a2b4:	f360 03c3 	bfi	r3, r0, #3, #1
   1a2b8:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   1a2bc:	f013 0f04 	tst.w	r3, #4
   1a2c0:	d016      	beq.n	1a2f0 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   1a2c2:	4933      	ldr	r1, [pc, #204]	; (1a390 <ll_rl_add+0x168>)
   1a2c4:	780a      	ldrb	r2, [r1, #0]
   1a2c6:	4653      	mov	r3, sl
   1a2c8:	444b      	add	r3, r9
   1a2ca:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   1a2cc:	4b31      	ldr	r3, [pc, #196]	; (1a394 <ll_rl_add+0x16c>)
   1a2ce:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   1a2d2:	1c53      	adds	r3, r2, #1
   1a2d4:	700b      	strb	r3, [r1, #0]
   1a2d6:	340f      	adds	r4, #15
   1a2d8:	4b2f      	ldr	r3, [pc, #188]	; (1a398 <ll_rl_add+0x170>)
   1a2da:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   1a2de:	2210      	movs	r2, #16
   1a2e0:	e004      	b.n	1a2ec <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a2e2:	7821      	ldrb	r1, [r4, #0]
   1a2e4:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   1a2e6:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1a2e8:	3c01      	subs	r4, #1
   1a2ea:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   1a2ec:	2a00      	cmp	r2, #0
   1a2ee:	d1f8      	bne.n	1a2e2 <ll_rl_add+0xba>
	if (rl[i].lirk) {
   1a2f0:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   1a2f4:	00d3      	lsls	r3, r2, #3
   1a2f6:	4a29      	ldr	r2, [pc, #164]	; (1a39c <ll_rl_add+0x174>)
   1a2f8:	5cd3      	ldrb	r3, [r2, r3]
   1a2fa:	f013 0f08 	tst.w	r3, #8
   1a2fe:	d12f      	bne.n	1a360 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   1a300:	4e26      	ldr	r6, [pc, #152]	; (1a39c <ll_rl_add+0x174>)
   1a302:	ea4f 0488 	mov.w	r4, r8, lsl #2
   1a306:	eb04 0208 	add.w	r2, r4, r8
   1a30a:	00d3      	lsls	r3, r2, #3
   1a30c:	3318      	adds	r3, #24
   1a30e:	2206      	movs	r2, #6
   1a310:	2100      	movs	r1, #0
   1a312:	18f0      	adds	r0, r6, r3
   1a314:	f010 fb2c 	bl	2a970 <memset>
	rl[i].rpas_ready = 0;
   1a318:	4444      	add	r4, r8
   1a31a:	00e2      	lsls	r2, r4, #3
   1a31c:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   1a31e:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1a322:	f36f 1304 	bfc	r3, #4, #1
   1a326:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a328:	2200      	movs	r2, #0
   1a32a:	4639      	mov	r1, r7
   1a32c:	7828      	ldrb	r0, [r5, #0]
   1a32e:	f7ff fa0b 	bl	19748 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1a332:	2807      	cmp	r0, #7
   1a334:	d822      	bhi.n	1a37c <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1a336:	4b1a      	ldr	r3, [pc, #104]	; (1a3a0 <ll_rl_add+0x178>)
   1a338:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a33c:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   1a340:	00e3      	lsls	r3, r4, #3
   1a342:	5cf2      	ldrb	r2, [r6, r3]
   1a344:	f042 0220 	orr.w	r2, r2, #32
   1a348:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   1a34a:	4914      	ldr	r1, [pc, #80]	; (1a39c <ll_rl_add+0x174>)
   1a34c:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   1a350:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1a354:	5cca      	ldrb	r2, [r1, r3]
   1a356:	f042 0201 	orr.w	r2, r2, #1
   1a35a:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a35c:	2000      	movs	r0, #0
   1a35e:	e76e      	b.n	1a23e <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   1a360:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1a364:	4443      	add	r3, r8
   1a366:	00da      	lsls	r2, r3, #3
   1a368:	4c0c      	ldr	r4, [pc, #48]	; (1a39c <ll_rl_add+0x174>)
   1a36a:	4414      	add	r4, r2
   1a36c:	2210      	movs	r2, #16
   1a36e:	4631      	mov	r1, r6
   1a370:	1de0      	adds	r0, r4, #7
   1a372:	f7e5 ffa5 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1a376:	2300      	movs	r3, #0
   1a378:	6263      	str	r3, [r4, #36]	; 0x24
   1a37a:	e7c1      	b.n	1a300 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   1a37c:	4a07      	ldr	r2, [pc, #28]	; (1a39c <ll_rl_add+0x174>)
   1a37e:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1a382:	00cb      	lsls	r3, r1, #3
   1a384:	5cd1      	ldrb	r1, [r2, r3]
   1a386:	f36f 1145 	bfc	r1, #5, #1
   1a38a:	54d1      	strb	r1, [r2, r3]
   1a38c:	e7dd      	b.n	1a34a <ll_rl_add+0x122>
   1a38e:	bf00      	nop
   1a390:	2000194c 	.word	0x2000194c
   1a394:	20001950 	.word	0x20001950
   1a398:	20001958 	.word	0x20001958
   1a39c:	200019d8 	.word	0x200019d8
   1a3a0:	20001b50 	.word	0x20001b50

0001a3a4 <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1a3a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a3a8:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   1a3aa:	2000      	movs	r0, #0
   1a3ac:	f7ff faa8 	bl	19900 <rl_access_check>
   1a3b0:	b910      	cbnz	r0, 1a3b8 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a3b2:	200c      	movs	r0, #12
   1a3b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a3b8:	4626      	mov	r6, r4
   1a3ba:	f816 0b01 	ldrb.w	r0, [r6], #1
   1a3be:	2200      	movs	r2, #0
   1a3c0:	4631      	mov	r1, r6
   1a3c2:	f7ff fbeb 	bl	19b9c <ll_rl_find>
   1a3c6:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   1a3c8:	2807      	cmp	r0, #7
   1a3ca:	d902      	bls.n	1a3d2 <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a3cc:	2002      	movs	r0, #2
}
   1a3ce:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   1a3d2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   1a3d6:	00d3      	lsls	r3, r2, #3
   1a3d8:	4a2d      	ldr	r2, [pc, #180]	; (1a490 <ll_rl_remove+0xec>)
   1a3da:	5cd3      	ldrb	r3, [r2, r3]
   1a3dc:	f013 0f04 	tst.w	r3, #4
   1a3e0:	d03e      	beq.n	1a460 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   1a3e2:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a3e6:	00da      	lsls	r2, r3, #3
   1a3e8:	4b29      	ldr	r3, [pc, #164]	; (1a490 <ll_rl_remove+0xec>)
   1a3ea:	4413      	add	r3, r2
   1a3ec:	7ddf      	ldrb	r7, [r3, #23]
   1a3ee:	4b29      	ldr	r3, [pc, #164]	; (1a494 <ll_rl_remove+0xf0>)
   1a3f0:	781b      	ldrb	r3, [r3, #0]
   1a3f2:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   1a3f4:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   1a3f8:	d02e      	beq.n	1a458 <ll_rl_remove+0xb4>
   1a3fa:	4547      	cmp	r7, r8
   1a3fc:	d02c      	beq.n	1a458 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   1a3fe:	4826      	ldr	r0, [pc, #152]	; (1a498 <ll_rl_remove+0xf4>)
   1a400:	2210      	movs	r2, #16
   1a402:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   1a406:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   1a40a:	f7e5 ff59 	bl	2c0 <memcpy>
				for (k = 0;
   1a40e:	2300      	movs	r3, #0
   1a410:	e001      	b.n	1a416 <ll_rl_remove+0x72>
				     k++) {
   1a412:	3301      	adds	r3, #1
   1a414:	b2db      	uxtb	r3, r3
				for (k = 0;
   1a416:	2b07      	cmp	r3, #7
   1a418:	d81e      	bhi.n	1a458 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   1a41a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a41e:	00ca      	lsls	r2, r1, #3
   1a420:	491b      	ldr	r1, [pc, #108]	; (1a490 <ll_rl_remove+0xec>)
   1a422:	5c8a      	ldrb	r2, [r1, r2]
   1a424:	f012 0f01 	tst.w	r2, #1
   1a428:	d0f3      	beq.n	1a412 <ll_rl_remove+0x6e>
   1a42a:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   1a42e:	00ca      	lsls	r2, r1, #3
   1a430:	4917      	ldr	r1, [pc, #92]	; (1a490 <ll_rl_remove+0xec>)
   1a432:	5c8a      	ldrb	r2, [r1, r2]
   1a434:	f012 0f04 	tst.w	r2, #4
   1a438:	d0eb      	beq.n	1a412 <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   1a43a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a43e:	00d1      	lsls	r1, r2, #3
   1a440:	4a13      	ldr	r2, [pc, #76]	; (1a490 <ll_rl_remove+0xec>)
   1a442:	440a      	add	r2, r1
   1a444:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   1a446:	4590      	cmp	r8, r2
   1a448:	d1e3      	bne.n	1a412 <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   1a44a:	2128      	movs	r1, #40	; 0x28
   1a44c:	4a10      	ldr	r2, [pc, #64]	; (1a490 <ll_rl_remove+0xec>)
   1a44e:	fb01 2003 	mla	r0, r1, r3, r2
   1a452:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   1a454:	4a11      	ldr	r2, [pc, #68]	; (1a49c <ll_rl_remove+0xf8>)
   1a456:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   1a458:	4a0e      	ldr	r2, [pc, #56]	; (1a494 <ll_rl_remove+0xf0>)
   1a45a:	7813      	ldrb	r3, [r2, #0]
   1a45c:	3b01      	subs	r3, #1
   1a45e:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   1a460:	2200      	movs	r2, #0
   1a462:	4631      	mov	r1, r6
   1a464:	7820      	ldrb	r0, [r4, #0]
   1a466:	f7ff f96f 	bl	19748 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   1a46a:	2807      	cmp	r0, #7
   1a46c:	d804      	bhi.n	1a478 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   1a46e:	4b0c      	ldr	r3, [pc, #48]	; (1a4a0 <ll_rl_remove+0xfc>)
   1a470:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   1a474:	23ff      	movs	r3, #255	; 0xff
   1a476:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   1a478:	4a05      	ldr	r2, [pc, #20]	; (1a490 <ll_rl_remove+0xec>)
   1a47a:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   1a47e:	00eb      	lsls	r3, r5, #3
   1a480:	5cd1      	ldrb	r1, [r2, r3]
   1a482:	f36f 0100 	bfc	r1, #0, #1
   1a486:	54d1      	strb	r1, [r2, r3]
		return 0;
   1a488:	2000      	movs	r0, #0
   1a48a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1a48e:	bf00      	nop
   1a490:	200019d8 	.word	0x200019d8
   1a494:	2000194c 	.word	0x2000194c
   1a498:	20001958 	.word	0x20001958
   1a49c:	20001950 	.word	0x20001950
   1a4a0:	20001b50 	.word	0x20001b50

0001a4a4 <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   1a4a4:	b510      	push	{r4, lr}
   1a4a6:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   1a4a8:	795b      	ldrb	r3, [r3, #5]
   1a4aa:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1a4ae:	2b40      	cmp	r3, #64	; 0x40
   1a4b0:	d000      	beq.n	1a4b4 <ll_rl_crpa_set+0x10>
   1a4b2:	bd10      	pop	{r4, pc}

		if (id_addr) {
   1a4b4:	b119      	cbz	r1, 1a4be <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   1a4b6:	2200      	movs	r2, #0
   1a4b8:	f7ff fb70 	bl	19b9c <ll_rl_find>
   1a4bc:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   1a4be:	2a07      	cmp	r2, #7
   1a4c0:	d8f7      	bhi.n	1a4b2 <ll_rl_crpa_set+0xe>
   1a4c2:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   1a4c6:	00cb      	lsls	r3, r1, #3
   1a4c8:	4907      	ldr	r1, [pc, #28]	; (1a4e8 <ll_rl_crpa_set+0x44>)
   1a4ca:	5ccb      	ldrb	r3, [r1, r3]
   1a4cc:	f013 0f01 	tst.w	r3, #1
   1a4d0:	d0ef      	beq.n	1a4b2 <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   1a4d2:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1a4d6:	00d0      	lsls	r0, r2, #3
   1a4d8:	3018      	adds	r0, #24
   1a4da:	2206      	movs	r2, #6
   1a4dc:	4621      	mov	r1, r4
   1a4de:	4b02      	ldr	r3, [pc, #8]	; (1a4e8 <ll_rl_crpa_set+0x44>)
   1a4e0:	4418      	add	r0, r3
   1a4e2:	f7e5 feed 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   1a4e6:	e7e4      	b.n	1a4b2 <ll_rl_crpa_set+0xe>
   1a4e8:	200019d8 	.word	0x200019d8

0001a4ec <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   1a4ec:	b538      	push	{r3, r4, r5, lr}
   1a4ee:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a4f0:	4601      	mov	r1, r0
   1a4f2:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a4f6:	2200      	movs	r2, #0
   1a4f8:	f7ff fb50 	bl	19b9c <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   1a4fc:	2807      	cmp	r0, #7
   1a4fe:	d901      	bls.n	1a504 <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a500:	2002      	movs	r0, #2
   1a502:	bd38      	pop	{r3, r4, r5, pc}
   1a504:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   1a506:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   1a50a:	00d8      	lsls	r0, r3, #3
   1a50c:	3018      	adds	r0, #24
   1a50e:	2106      	movs	r1, #6
   1a510:	4b09      	ldr	r3, [pc, #36]	; (1a538 <ll_rl_crpa_get+0x4c>)
   1a512:	4418      	add	r0, r3
   1a514:	f7f4 ffb4 	bl	f480 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   1a518:	b908      	cbnz	r0, 1a51e <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a51a:	2002      	movs	r0, #2
}
   1a51c:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   1a51e:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   1a522:	00e1      	lsls	r1, r4, #3
   1a524:	3118      	adds	r1, #24
   1a526:	2206      	movs	r2, #6
   1a528:	4b03      	ldr	r3, [pc, #12]	; (1a538 <ll_rl_crpa_get+0x4c>)
   1a52a:	4419      	add	r1, r3
   1a52c:	4628      	mov	r0, r5
   1a52e:	f7e5 fec7 	bl	2c0 <memcpy>
			return 0;
   1a532:	2000      	movs	r0, #0
   1a534:	bd38      	pop	{r3, r4, r5, pc}
   1a536:	bf00      	nop
   1a538:	200019d8 	.word	0x200019d8

0001a53c <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   1a53c:	b510      	push	{r4, lr}
   1a53e:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a540:	4601      	mov	r1, r0
   1a542:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a546:	2200      	movs	r2, #0
   1a548:	f7ff fb28 	bl	19b9c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a54c:	2807      	cmp	r0, #7
   1a54e:	d901      	bls.n	1a554 <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a550:	2002      	movs	r0, #2
}
   1a552:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   1a554:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a558:	00c2      	lsls	r2, r0, #3
   1a55a:	4b04      	ldr	r3, [pc, #16]	; (1a56c <ll_rl_lrpa_get+0x30>)
   1a55c:	4413      	add	r3, r2
   1a55e:	2206      	movs	r2, #6
   1a560:	6a59      	ldr	r1, [r3, #36]	; 0x24
   1a562:	4620      	mov	r0, r4
   1a564:	f7e5 feac 	bl	2c0 <memcpy>
		return 0;
   1a568:	2000      	movs	r0, #0
   1a56a:	bd10      	pop	{r4, pc}
   1a56c:	200019d8 	.word	0x200019d8

0001a570 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   1a570:	b510      	push	{r4, lr}
   1a572:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   1a574:	2000      	movs	r0, #0
   1a576:	f7ff f9c3 	bl	19900 <rl_access_check>
   1a57a:	b908      	cbnz	r0, 1a580 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a57c:	200c      	movs	r0, #12
   1a57e:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   1a580:	b11c      	cbz	r4, 1a58a <ll_rl_enable+0x1a>
   1a582:	2c01      	cmp	r4, #1
   1a584:	d005      	beq.n	1a592 <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   1a586:	2012      	movs	r0, #18
	}

	return 0;
}
   1a588:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   1a58a:	2000      	movs	r0, #0
   1a58c:	4b03      	ldr	r3, [pc, #12]	; (1a59c <ll_rl_enable+0x2c>)
   1a58e:	7018      	strb	r0, [r3, #0]
		break;
   1a590:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   1a592:	2201      	movs	r2, #1
   1a594:	4b01      	ldr	r3, [pc, #4]	; (1a59c <ll_rl_enable+0x2c>)
   1a596:	701a      	strb	r2, [r3, #0]
	return 0;
   1a598:	2000      	movs	r0, #0
		break;
   1a59a:	bd10      	pop	{r4, pc}
   1a59c:	20001b18 	.word	0x20001b18

0001a5a0 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   1a5a0:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1a5a4:	fb03 f000 	mul.w	r0, r3, r0
   1a5a8:	4b01      	ldr	r3, [pc, #4]	; (1a5b0 <ll_rl_timeout_set+0x10>)
   1a5aa:	6018      	str	r0, [r3, #0]
   1a5ac:	4770      	bx	lr
   1a5ae:	bf00      	nop
   1a5b0:	20002c64 	.word	0x20002c64

0001a5b4 <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   1a5b4:	b538      	push	{r3, r4, r5, lr}
   1a5b6:	4604      	mov	r4, r0
   1a5b8:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   1a5ba:	2000      	movs	r0, #0
   1a5bc:	f7ff f9a0 	bl	19900 <rl_access_check>
   1a5c0:	b908      	cbnz	r0, 1a5c6 <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a5c2:	200c      	movs	r0, #12
   1a5c4:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   1a5c6:	4621      	mov	r1, r4
   1a5c8:	f811 0b01 	ldrb.w	r0, [r1], #1
   1a5cc:	2200      	movs	r2, #0
   1a5ce:	f7ff fae5 	bl	19b9c <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1a5d2:	2807      	cmp	r0, #7
   1a5d4:	d901      	bls.n	1a5da <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   1a5d6:	2002      	movs	r0, #2
   1a5d8:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   1a5da:	b11d      	cbz	r5, 1a5e4 <ll_priv_mode_set+0x30>
   1a5dc:	2d01      	cmp	r5, #1
   1a5de:	d00b      	beq.n	1a5f8 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   1a5e0:	2012      	movs	r0, #18
	}

	return 0;
}
   1a5e2:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   1a5e4:	4a09      	ldr	r2, [pc, #36]	; (1a60c <ll_priv_mode_set+0x58>)
   1a5e6:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a5ea:	00c3      	lsls	r3, r0, #3
   1a5ec:	5cd1      	ldrb	r1, [r2, r3]
   1a5ee:	f36f 1104 	bfc	r1, #4, #1
   1a5f2:	54d1      	strb	r1, [r2, r3]
	return 0;
   1a5f4:	2000      	movs	r0, #0
			break;
   1a5f6:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   1a5f8:	4904      	ldr	r1, [pc, #16]	; (1a60c <ll_priv_mode_set+0x58>)
   1a5fa:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   1a5fe:	00c3      	lsls	r3, r0, #3
   1a600:	5cca      	ldrb	r2, [r1, r3]
   1a602:	f042 0210 	orr.w	r2, r2, #16
   1a606:	54ca      	strb	r2, [r1, r3]
	return 0;
   1a608:	2000      	movs	r0, #0
			break;
   1a60a:	bd38      	pop	{r3, r4, r5, pc}
   1a60c:	200019d8 	.word	0x200019d8

0001a610 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   1a610:	b538      	push	{r3, r4, r5, lr}
   1a612:	4605      	mov	r5, r0
	wl_anon = 0;
   1a614:	2400      	movs	r4, #0
   1a616:	4b0e      	ldr	r3, [pc, #56]	; (1a650 <ll_filter_reset+0x40>)
   1a618:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   1a61a:	f7ff f86b 	bl	196f4 <wl_clear>

	rl_enable = 0;
   1a61e:	4b0d      	ldr	r3, [pc, #52]	; (1a654 <ll_filter_reset+0x44>)
   1a620:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   1a622:	4a0d      	ldr	r2, [pc, #52]	; (1a658 <ll_filter_reset+0x48>)
   1a624:	4b0d      	ldr	r3, [pc, #52]	; (1a65c <ll_filter_reset+0x4c>)
   1a626:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   1a628:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   1a62c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a630:	4b0b      	ldr	r3, [pc, #44]	; (1a660 <ll_filter_reset+0x50>)
   1a632:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   1a636:	f7ff f871 	bl	1971c <rl_clear>
	if (init) {
   1a63a:	b91d      	cbnz	r5, 1a644 <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   1a63c:	4809      	ldr	r0, [pc, #36]	; (1a664 <ll_filter_reset+0x54>)
   1a63e:	f00f fcd3 	bl	29fe8 <k_delayed_work_cancel>
   1a642:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   1a644:	4908      	ldr	r1, [pc, #32]	; (1a668 <ll_filter_reset+0x58>)
   1a646:	4807      	ldr	r0, [pc, #28]	; (1a664 <ll_filter_reset+0x54>)
   1a648:	f00f fcb0 	bl	29fac <k_delayed_work_init>
   1a64c:	bd38      	pop	{r3, r4, r5, pc}
   1a64e:	bf00      	nop
   1a650:	20002ac0 	.word	0x20002ac0
   1a654:	20001b18 	.word	0x20001b18
   1a658:	000dbba0 	.word	0x000dbba0
   1a65c:	20002c64 	.word	0x20002c64
   1a660:	20002ab8 	.word	0x20002ab8
   1a664:	20002b30 	.word	0x20002b30
   1a668:	0001a1e9 	.word	0x0001a1e9

0001a66c <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   1a66c:	4800      	ldr	r0, [pc, #0]	; (1a670 <ll_adv_set_get+0x4>)
   1a66e:	4770      	bx	lr
   1a670:	20001bc4 	.word	0x20001bc4

0001a674 <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   1a674:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1a678:	b087      	sub	sp, #28
   1a67a:	4689      	mov	r9, r1
   1a67c:	4614      	mov	r4, r2
   1a67e:	461e      	mov	r6, r3
   1a680:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   1a684:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   1a688:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   1a68c:	4b89      	ldr	r3, [pc, #548]	; (1a8b4 <ll_adv_params_set+0x240>)
   1a68e:	e893 0003 	ldmia.w	r3, {r0, r1}
   1a692:	9004      	str	r0, [sp, #16]
   1a694:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   1a698:	f7fd fd60 	bl	1815c <radio_adv_is_enabled>
   1a69c:	9001      	str	r0, [sp, #4]
   1a69e:	b128      	cbz	r0, 1a6ac <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a6a0:	230c      	movs	r3, #12
   1a6a2:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   1a6a4:	9801      	ldr	r0, [sp, #4]
   1a6a6:	b007      	add	sp, #28
   1a6a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   1a6ac:	4b82      	ldr	r3, [pc, #520]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a6ae:	7a1a      	ldrb	r2, [r3, #8]
   1a6b0:	2101      	movs	r1, #1
   1a6b2:	f361 0202 	bfi	r2, r1, #0, #3
   1a6b6:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   1a6b8:	2e04      	cmp	r6, #4
   1a6ba:	d90f      	bls.n	1a6dc <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   1a6bc:	f019 0f10 	tst.w	r9, #16
   1a6c0:	d071      	beq.n	1a7a6 <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   1a6c2:	4b7c      	ldr	r3, [pc, #496]	; (1a8b4 <ll_adv_params_set+0x240>)
   1a6c4:	689b      	ldr	r3, [r3, #8]
   1a6c6:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   1a6c8:	f009 0303 	and.w	r3, r9, #3
   1a6cc:	aa06      	add	r2, sp, #24
   1a6ce:	4413      	add	r3, r2
   1a6d0:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   1a6d4:	f019 0f08 	tst.w	r9, #8
   1a6d8:	d000      	beq.n	1a6dc <ll_adv_params_set+0x68>
				adv_type = 0x01;
   1a6da:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   1a6dc:	2e01      	cmp	r6, #1
   1a6de:	d071      	beq.n	1a7c4 <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   1a6e0:	4b75      	ldr	r3, [pc, #468]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a6e2:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   1a6e4:	4a74      	ldr	r2, [pc, #464]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a6e6:	7813      	ldrb	r3, [r2, #0]
   1a6e8:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   1a6ec:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   1a6f0:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   1a6f4:	f361 03c4 	bfi	r3, r1, #3, #2
   1a6f8:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   1a6fa:	f7fd fd27 	bl	1814c <radio_adv_data_get>
   1a6fe:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a700:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   1a704:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1a708:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   1a70c:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   1a710:	ab06      	add	r3, sp, #24
   1a712:	441e      	add	r6, r3
   1a714:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   1a718:	5d03      	ldrb	r3, [r0, r4]
   1a71a:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   1a71e:	f36f 1304 	bfc	r3, #4, #1
   1a722:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   1a724:	f003 030f 	and.w	r3, r3, #15
   1a728:	2b01      	cmp	r3, #1
   1a72a:	d94f      	bls.n	1a7cc <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   1a72c:	5d03      	ldrb	r3, [r0, r4]
   1a72e:	f36f 1345 	bfc	r3, #5, #1
   1a732:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   1a734:	4a60      	ldr	r2, [pc, #384]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a736:	7813      	ldrb	r3, [r2, #0]
   1a738:	f368 1346 	bfi	r3, r8, #5, #2
   1a73c:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a73e:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a742:	2b40      	cmp	r3, #64	; 0x40
   1a744:	d047      	beq.n	1a7d6 <ll_adv_params_set+0x162>
   1a746:	2b60      	cmp	r3, #96	; 0x60
   1a748:	d045      	beq.n	1a7d6 <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   1a74a:	f008 0801 	and.w	r8, r8, #1
   1a74e:	5d3b      	ldrb	r3, [r7, r4]
   1a750:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a754:	f36f 13c7 	bfc	r3, #7, #1
   1a758:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   1a75a:	f003 030f 	and.w	r3, r3, #15
   1a75e:	2b01      	cmp	r3, #1
   1a760:	d044      	beq.n	1a7ec <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   1a762:	2b07      	cmp	r3, #7
   1a764:	d050      	beq.n	1a808 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   1a766:	f89a 3001 	ldrb.w	r3, [sl, #1]
   1a76a:	b913      	cbnz	r3, 1a772 <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   1a76c:	2306      	movs	r3, #6
   1a76e:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   1a772:	f7fd fcef 	bl	18154 <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a776:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   1a77a:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   1a77e:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   1a782:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a784:	5c83      	ldrb	r3, [r0, r2]
   1a786:	2404      	movs	r4, #4
   1a788:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   1a78c:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   1a790:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   1a794:	f36f 13c7 	bfc	r3, #7, #1
   1a798:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   1a79a:	784b      	ldrb	r3, [r1, #1]
   1a79c:	2b00      	cmp	r3, #0
   1a79e:	d181      	bne.n	1a6a4 <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   1a7a0:	2306      	movs	r3, #6
   1a7a2:	704b      	strb	r3, [r1, #1]
   1a7a4:	e77e      	b.n	1a6a4 <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   1a7a6:	f009 0303 	and.w	r3, r9, #3
   1a7aa:	2b03      	cmp	r3, #3
   1a7ac:	d07c      	beq.n	1a8a8 <ll_adv_params_set+0x234>
   1a7ae:	f009 030c 	and.w	r3, r9, #12
   1a7b2:	2b0c      	cmp	r3, #12
   1a7b4:	d07b      	beq.n	1a8ae <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   1a7b6:	4b40      	ldr	r3, [pc, #256]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a7b8:	7a1a      	ldrb	r2, [r3, #8]
   1a7ba:	f365 0202 	bfi	r2, r5, #0, #3
   1a7be:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   1a7c0:	2605      	movs	r6, #5
   1a7c2:	e78b      	b.n	1a6dc <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   1a7c4:	2200      	movs	r2, #0
   1a7c6:	4b3c      	ldr	r3, [pc, #240]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a7c8:	60da      	str	r2, [r3, #12]
   1a7ca:	e78b      	b.n	1a6e4 <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   1a7cc:	5d03      	ldrb	r3, [r0, r4]
   1a7ce:	f043 0320 	orr.w	r3, r3, #32
   1a7d2:	5503      	strb	r3, [r0, r4]
   1a7d4:	e7ae      	b.n	1a734 <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   1a7d6:	4838      	ldr	r0, [pc, #224]	; (1a8b8 <ll_adv_params_set+0x244>)
   1a7d8:	7803      	ldrb	r3, [r0, #0]
   1a7da:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a7de:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   1a7e2:	2206      	movs	r2, #6
   1a7e4:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a7e6:	f7e5 fd6b 	bl	2c0 <memcpy>
   1a7ea:	e7ae      	b.n	1a74a <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   1a7ec:	5d3b      	ldrb	r3, [r7, r4]
   1a7ee:	f36b 13c7 	bfi	r3, fp, #7, #1
   1a7f2:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   1a7f4:	2206      	movs	r2, #6
   1a7f6:	9912      	ldr	r1, [sp, #72]	; 0x48
   1a7f8:	f10a 0008 	add.w	r0, sl, #8
   1a7fc:	f7e5 fd60 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   1a800:	230c      	movs	r3, #12
   1a802:	f88a 3001 	strb.w	r3, [sl, #1]
   1a806:	e7b4      	b.n	1a772 <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   1a808:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   1a80c:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   1a810:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   1a814:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   1a818:	f369 1287 	bfi	r2, r9, #6, #2
   1a81c:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   1a820:	2200      	movs	r2, #0
   1a822:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   1a826:	f019 0f20 	tst.w	r9, #32
   1a82a:	d10e      	bne.n	1a84a <ll_adv_params_set+0x1d6>
   1a82c:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a830:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   1a834:	d109      	bne.n	1a84a <ll_adv_params_set+0x1d6>
   1a836:	2d04      	cmp	r5, #4
   1a838:	d007      	beq.n	1a84a <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   1a83a:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a83e:	f042 0201 	orr.w	r2, r2, #1
   1a842:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   1a846:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   1a84a:	f019 0f40 	tst.w	r9, #64	; 0x40
   1a84e:	d006      	beq.n	1a85e <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   1a850:	f89a 2003 	ldrb.w	r2, [sl, #3]
   1a854:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1a858:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   1a85c:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   1a85e:	1acb      	subs	r3, r1, r3
   1a860:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   1a862:	2b02      	cmp	r3, #2
   1a864:	d916      	bls.n	1a894 <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   1a866:	1e58      	subs	r0, r3, #1
   1a868:	f89a 2002 	ldrb.w	r2, [sl, #2]
   1a86c:	f360 0205 	bfi	r2, r0, #0, #6
   1a870:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   1a874:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   1a878:	f89a 3003 	ldrb.w	r3, [sl, #3]
   1a87c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1a880:	f43f af77 	beq.w	1a772 <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   1a884:	9b15      	ldr	r3, [sp, #84]	; 0x54
   1a886:	b16b      	cbz	r3, 1a8a4 <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   1a888:	781b      	ldrb	r3, [r3, #0]
   1a88a:	2b7f      	cmp	r3, #127	; 0x7f
   1a88c:	d006      	beq.n	1a89c <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   1a88e:	f801 3c01 	strb.w	r3, [r1, #-1]
   1a892:	e76e      	b.n	1a772 <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   1a894:	2301      	movs	r3, #1
   1a896:	f88a 3001 	strb.w	r3, [sl, #1]
   1a89a:	e7ed      	b.n	1a878 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   1a89c:	2300      	movs	r3, #0
   1a89e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   1a8a0:	7013      	strb	r3, [r2, #0]
   1a8a2:	e7f4      	b.n	1a88e <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   1a8a4:	2300      	movs	r3, #0
   1a8a6:	e7f2      	b.n	1a88e <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   1a8a8:	2312      	movs	r3, #18
   1a8aa:	9301      	str	r3, [sp, #4]
   1a8ac:	e6fa      	b.n	1a6a4 <ll_adv_params_set+0x30>
   1a8ae:	2312      	movs	r3, #18
   1a8b0:	9301      	str	r3, [sp, #4]
   1a8b2:	e6f7      	b.n	1a6a4 <ll_adv_params_set+0x30>
   1a8b4:	0002e7b0 	.word	0x0002e7b0
   1a8b8:	20001bc4 	.word	0x20001bc4

0001a8bc <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   1a8bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a8c0:	4606      	mov	r6, r0
   1a8c2:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   1a8c4:	f7fd fc42 	bl	1814c <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   1a8c8:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   1a8cc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a8d0:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a8d4:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   1a8d6:	5c83      	ldrb	r3, [r0, r2]
   1a8d8:	f003 030f 	and.w	r3, r3, #15
   1a8dc:	2b01      	cmp	r3, #1
   1a8de:	d03e      	beq.n	1a95e <ll_adv_data_set+0xa2>
   1a8e0:	4604      	mov	r4, r0
   1a8e2:	2b07      	cmp	r3, #7
   1a8e4:	d03b      	beq.n	1a95e <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   1a8e6:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   1a8ea:	429d      	cmp	r5, r3
   1a8ec:	d039      	beq.n	1a962 <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   1a8ee:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   1a8f2:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   1a8f6:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   1a8fa:	f814 e002 	ldrb.w	lr, [r4, r2]
   1a8fe:	5ce0      	ldrb	r0, [r4, r3]
   1a900:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   1a904:	f36f 1004 	bfc	r0, #4, #1
   1a908:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   1a90a:	5ca0      	ldrb	r0, [r4, r2]
   1a90c:	f3c0 1040 	ubfx	r0, r0, #5, #1
   1a910:	f814 e003 	ldrb.w	lr, [r4, r3]
   1a914:	f360 1e45 	bfi	lr, r0, #5, #1
   1a918:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   1a91c:	5ca0      	ldrb	r0, [r4, r2]
   1a91e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a922:	fa5f fe8e 	uxtb.w	lr, lr
   1a926:	f360 1e86 	bfi	lr, r0, #6, #1
   1a92a:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   1a92e:	5ca2      	ldrb	r2, [r4, r2]
   1a930:	09d2      	lsrs	r2, r2, #7
   1a932:	fa5f f08e 	uxtb.w	r0, lr
   1a936:	f362 10c7 	bfi	r0, r2, #7, #1
   1a93a:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   1a93c:	2206      	movs	r2, #6
   1a93e:	3102      	adds	r1, #2
   1a940:	f108 0002 	add.w	r0, r8, #2
   1a944:	f7e5 fcbc 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   1a948:	4632      	mov	r2, r6
   1a94a:	4639      	mov	r1, r7
   1a94c:	f108 0008 	add.w	r0, r8, #8
   1a950:	f7e5 fcb6 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   1a954:	3606      	adds	r6, #6
   1a956:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   1a95a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a95e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   1a962:	3501      	adds	r5, #1
   1a964:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a966:	2d02      	cmp	r5, #2
   1a968:	d1c1      	bne.n	1a8ee <ll_adv_data_set+0x32>
			last = 0;
   1a96a:	2500      	movs	r5, #0
   1a96c:	e7bf      	b.n	1a8ee <ll_adv_data_set+0x32>

0001a96e <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   1a96e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a972:	4606      	mov	r6, r0
   1a974:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   1a976:	f7fd fbed 	bl	18154 <radio_scan_data_get>
   1a97a:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   1a97c:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   1a980:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   1a984:	429a      	cmp	r2, r3
   1a986:	d031      	beq.n	1a9ec <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   1a988:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   1a98a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a98e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a992:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   1a994:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1a998:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   1a99c:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   1a9a0:	5ca0      	ldrb	r0, [r4, r2]
   1a9a2:	f04f 0e04 	mov.w	lr, #4
   1a9a6:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   1a9aa:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   1a9ae:	f36f 1045 	bfc	r0, #5, #1
   1a9b2:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   1a9b4:	5ce0      	ldrb	r0, [r4, r3]
   1a9b6:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a9ba:	5ca3      	ldrb	r3, [r4, r2]
   1a9bc:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   1a9c0:	f36f 13c7 	bfc	r3, #7, #1
   1a9c4:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   1a9c6:	1db3      	adds	r3, r6, #6
   1a9c8:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   1a9cc:	2206      	movs	r2, #6
   1a9ce:	3102      	adds	r1, #2
   1a9d0:	f108 0002 	add.w	r0, r8, #2
   1a9d4:	f7e5 fc74 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   1a9d8:	4632      	mov	r2, r6
   1a9da:	4639      	mov	r1, r7
   1a9dc:	f108 0008 	add.w	r0, r8, #8
   1a9e0:	f7e5 fc6e 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   1a9e4:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1a9e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   1a9ec:	1c5d      	adds	r5, r3, #1
   1a9ee:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   1a9f0:	2d02      	cmp	r5, #2
   1a9f2:	d1ca      	bne.n	1a98a <ll_scan_data_set+0x1c>
			last = 0;
   1a9f4:	2500      	movs	r5, #0
   1a9f6:	e7c8      	b.n	1a98a <ll_scan_data_set+0x1c>

0001a9f8 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   1a9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1a9fc:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   1a9fe:	b120      	cbz	r0, 1aa0a <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   1aa00:	f7fd fbac 	bl	1815c <radio_adv_is_enabled>
   1aa04:	b130      	cbz	r0, 1aa14 <ll_adv_enable+0x1c>
		return 0;
   1aa06:	2000      	movs	r0, #0
   1aa08:	e001      	b.n	1aa0e <ll_adv_enable+0x16>
		return radio_adv_disable();
   1aa0a:	f7fe fb27 	bl	1905c <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   1aa0e:	b002      	add	sp, #8
   1aa10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   1aa14:	f7fd fb9a 	bl	1814c <radio_adv_data_get>
   1aa18:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1aa1a:	f7fd fb9b 	bl	18154 <radio_scan_data_get>
			[radio_adv_data->last][0];
   1aa1e:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1aa22:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1aa26:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1aa2a:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1aa2c:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1aa30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1aa34:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1aa38:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1aa3a:	5d2b      	ldrb	r3, [r5, r4]
   1aa3c:	f003 030f 	and.w	r3, r3, #15
   1aa40:	2b07      	cmp	r3, #7
   1aa42:	d023      	beq.n	1aa8c <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1aa44:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1ab18 <ll_adv_enable+0x120>
   1aa48:	f898 0000 	ldrb.w	r0, [r8]
   1aa4c:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1aa50:	f7ff f874 	bl	19b3c <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1aa54:	f898 3000 	ldrb.w	r3, [r8]
   1aa58:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1aa5c:	2b40      	cmp	r3, #64	; 0x40
   1aa5e:	d02b      	beq.n	1aab8 <ll_adv_enable+0xc0>
   1aa60:	2b60      	cmp	r3, #96	; 0x60
   1aa62:	d029      	beq.n	1aab8 <ll_adv_enable+0xc0>
		bool priv = false;
   1aa64:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aa66:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1aa6a:	2b00      	cmp	r3, #0
   1aa6c:	d03b      	beq.n	1aae6 <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1aa6e:	4b2a      	ldr	r3, [pc, #168]	; (1ab18 <ll_adv_enable+0x120>)
   1aa70:	7a18      	ldrb	r0, [r3, #8]
   1aa72:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1aa74:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1aa76:	f8cd 8000 	str.w	r8, [sp]
   1aa7a:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1aa7e:	f002 0207 	and.w	r2, r2, #7
   1aa82:	f000 0007 	and.w	r0, r0, #7
   1aa86:	f7fe f90b 	bl	18ca0 <radio_adv_enable>
	return status;
   1aa8a:	e7c0      	b.n	1aa0e <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1aa8c:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1aa8e:	78f3      	ldrb	r3, [r6, #3]
   1aa90:	f013 0f01 	tst.w	r3, #1
   1aa94:	d102      	bne.n	1aa9c <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aa96:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1aa9a:	e7e8      	b.n	1aa6e <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1aa9c:	5d28      	ldrb	r0, [r5, r4]
   1aa9e:	2100      	movs	r1, #0
   1aaa0:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aaa4:	f7fe fdf4 	bl	19690 <ll_addr_get>
   1aaa8:	2206      	movs	r2, #6
   1aaaa:	4601      	mov	r1, r0
   1aaac:	4638      	mov	r0, r7
   1aaae:	f7e5 fc07 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1aab2:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1aab6:	e7da      	b.n	1aa6e <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1aab8:	4917      	ldr	r1, [pc, #92]	; (1ab18 <ll_adv_enable+0x120>)
   1aaba:	f811 0b02 	ldrb.w	r0, [r1], #2
   1aabe:	2200      	movs	r2, #0
   1aac0:	09c0      	lsrs	r0, r0, #7
   1aac2:	f7ff f86b 	bl	19b9c <ll_rl_find>
   1aac6:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1aac8:	28ff      	cmp	r0, #255	; 0xff
   1aaca:	d002      	beq.n	1aad2 <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1aacc:	2000      	movs	r0, #0
   1aace:	f7ff fac7 	bl	1a060 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1aad2:	4631      	mov	r1, r6
   1aad4:	4640      	mov	r0, r8
   1aad6:	f7ff f9f9 	bl	19ecc <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1aada:	4639      	mov	r1, r7
   1aadc:	4640      	mov	r0, r8
   1aade:	f7ff f9f5 	bl	19ecc <ll_rl_pdu_adv_update>
			priv = true;
   1aae2:	2301      	movs	r3, #1
   1aae4:	e7c1      	b.n	1aa6a <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aae6:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1aae8:	5d28      	ldrb	r0, [r5, r4]
   1aaea:	2100      	movs	r1, #0
   1aaec:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1aaf0:	f7fe fdce 	bl	19690 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1aaf4:	2206      	movs	r2, #6
   1aaf6:	4601      	mov	r1, r0
   1aaf8:	4630      	mov	r0, r6
   1aafa:	f7e5 fbe1 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1aafe:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1ab00:	5d28      	ldrb	r0, [r5, r4]
   1ab02:	2100      	movs	r1, #0
   1ab04:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1ab08:	f7fe fdc2 	bl	19690 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1ab0c:	2206      	movs	r2, #6
   1ab0e:	4601      	mov	r1, r0
   1ab10:	4638      	mov	r0, r7
   1ab12:	f7e5 fbd5 	bl	2c0 <memcpy>
   1ab16:	e7aa      	b.n	1aa6e <ll_adv_enable+0x76>
   1ab18:	20001bc4 	.word	0x20001bc4

0001ab1c <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1ab1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ab1e:	4607      	mov	r7, r0
   1ab20:	460e      	mov	r6, r1
   1ab22:	4615      	mov	r5, r2
   1ab24:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1ab26:	f7fd fb31 	bl	1818c <radio_scan_is_enabled>
   1ab2a:	b110      	cbz	r0, 1ab32 <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1ab2c:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1ab2e:	4610      	mov	r0, r2
   1ab30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ab32:	4602      	mov	r2, r0
	ll_scan.type = type;
   1ab34:	4906      	ldr	r1, [pc, #24]	; (1ab50 <ll_scan_params_set+0x34>)
   1ab36:	790b      	ldrb	r3, [r1, #4]
   1ab38:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1ab3c:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1ab3e:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1ab40:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1ab44:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1ab48:	f360 1387 	bfi	r3, r0, #6, #2
   1ab4c:	710b      	strb	r3, [r1, #4]
	return 0;
   1ab4e:	e7ee      	b.n	1ab2e <ll_scan_params_set+0x12>
   1ab50:	20001bd4 	.word	0x20001bd4

0001ab54 <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1ab54:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ab56:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1ab58:	b120      	cbz	r0, 1ab64 <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1ab5a:	f7fd fb17 	bl	1818c <radio_scan_is_enabled>
   1ab5e:	b128      	cbz	r0, 1ab6c <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1ab60:	2000      	movs	r0, #0
   1ab62:	e001      	b.n	1ab68 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1ab64:	f7fe fbac 	bl	192c0 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1ab68:	b005      	add	sp, #20
   1ab6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1ab6c:	4c18      	ldr	r4, [pc, #96]	; (1abd0 <ll_scan_enable+0x7c>)
   1ab6e:	7920      	ldrb	r0, [r4, #4]
   1ab70:	0980      	lsrs	r0, r0, #6
   1ab72:	f7fe fffb 	bl	19b6c <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1ab76:	7923      	ldrb	r3, [r4, #4]
   1ab78:	f013 0f01 	tst.w	r3, #1
   1ab7c:	d00d      	beq.n	1ab9a <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ab7e:	7923      	ldrb	r3, [r4, #4]
   1ab80:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1ab84:	2b20      	cmp	r3, #32
   1ab86:	d003      	beq.n	1ab90 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ab88:	2b30      	cmp	r3, #48	; 0x30
   1ab8a:	d001      	beq.n	1ab90 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1ab8c:	2700      	movs	r7, #0
   1ab8e:	e005      	b.n	1ab9c <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1ab90:	2000      	movs	r0, #0
   1ab92:	f7ff fa65 	bl	1a060 <ll_rl_rpa_update>
		rpa_gen = 1;
   1ab96:	2701      	movs	r7, #1
   1ab98:	e000      	b.n	1ab9c <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1ab9a:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1ab9c:	4d0c      	ldr	r5, [pc, #48]	; (1abd0 <ll_scan_enable+0x7c>)
   1ab9e:	792c      	ldrb	r4, [r5, #4]
   1aba0:	f004 060f 	and.w	r6, r4, #15
   1aba4:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1aba8:	2100      	movs	r1, #0
   1abaa:	4620      	mov	r0, r4
   1abac:	f7fe fd70 	bl	19690 <ll_addr_get>
   1abb0:	882b      	ldrh	r3, [r5, #0]
   1abb2:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1abb4:	792a      	ldrb	r2, [r5, #4]
   1abb6:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1abb8:	25ff      	movs	r5, #255	; 0xff
   1abba:	9503      	str	r5, [sp, #12]
   1abbc:	9702      	str	r7, [sp, #8]
   1abbe:	9201      	str	r2, [sp, #4]
   1abc0:	9100      	str	r1, [sp, #0]
   1abc2:	4602      	mov	r2, r0
   1abc4:	4621      	mov	r1, r4
   1abc6:	4630      	mov	r0, r6
   1abc8:	f7fe fa7a 	bl	190c0 <radio_scan_enable>
	return status;
   1abcc:	e7cc      	b.n	1ab68 <ll_scan_enable+0x14>
   1abce:	bf00      	nop
   1abd0:	20001bd4 	.word	0x20001bd4

0001abd4 <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1abd4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1abd8:	b085      	sub	sp, #20
   1abda:	4607      	mov	r7, r0
   1abdc:	4688      	mov	r8, r1
   1abde:	4615      	mov	r5, r2
   1abe0:	461e      	mov	r6, r3
   1abe2:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1abe6:	f7fd fad1 	bl	1818c <radio_scan_is_enabled>
   1abea:	b120      	cbz	r0, 1abf6 <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1abec:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1abee:	4618      	mov	r0, r3
   1abf0:	b005      	add	sp, #20
   1abf2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1abf6:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1abfa:	9300      	str	r3, [sp, #0]
   1abfc:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1ac00:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1ac04:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ac06:	4630      	mov	r0, r6
   1ac08:	f7fd fada 	bl	181c0 <radio_connect_enable>
	if (status) {
   1ac0c:	4603      	mov	r3, r0
   1ac0e:	2800      	cmp	r0, #0
   1ac10:	d1ed      	bne.n	1abee <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1ac12:	4628      	mov	r0, r5
   1ac14:	f7fe ffaa 	bl	19b6c <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1ac18:	b1c5      	cbz	r5, 1ac4c <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1ac1a:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1ac1e:	1ea3      	subs	r3, r4, #2
   1ac20:	b2db      	uxtb	r3, r3
   1ac22:	2b01      	cmp	r3, #1
   1ac24:	d91f      	bls.n	1ac66 <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1ac26:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1ac28:	2100      	movs	r1, #0
   1ac2a:	4620      	mov	r0, r4
   1ac2c:	f7fe fd30 	bl	19690 <ll_addr_get>
   1ac30:	f8cd 900c 	str.w	r9, [sp, #12]
   1ac34:	9602      	str	r6, [sp, #8]
   1ac36:	9501      	str	r5, [sp, #4]
   1ac38:	f8cd 8000 	str.w	r8, [sp]
   1ac3c:	463b      	mov	r3, r7
   1ac3e:	4602      	mov	r2, r0
   1ac40:	4621      	mov	r1, r4
   1ac42:	2000      	movs	r0, #0
   1ac44:	f7fe fa3c 	bl	190c0 <radio_scan_enable>
   1ac48:	4603      	mov	r3, r0
   1ac4a:	e7d0      	b.n	1abee <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1ac4c:	f7ff f936 	bl	19ebc <ctrl_rl_enabled>
   1ac50:	b910      	cbnz	r0, 1ac58 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1ac52:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1ac56:	e7e2      	b.n	1ac1e <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1ac58:	2200      	movs	r2, #0
   1ac5a:	990c      	ldr	r1, [sp, #48]	; 0x30
   1ac5c:	4630      	mov	r0, r6
   1ac5e:	f7fe ff9d 	bl	19b9c <ll_rl_find>
   1ac62:	4681      	mov	r9, r0
   1ac64:	e7db      	b.n	1ac1e <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1ac66:	2000      	movs	r0, #0
   1ac68:	f7ff f9fa 	bl	1a060 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1ac6c:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1ac70:	2601      	movs	r6, #1
   1ac72:	e7d9      	b.n	1ac28 <ll_create_connection+0x54>

0001ac74 <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1ac74:	4b01      	ldr	r3, [pc, #4]	; (1ac7c <pool_id+0x8>)
   1ac76:	1ac0      	subs	r0, r0, r3
}
   1ac78:	1140      	asrs	r0, r0, #5
   1ac7a:	4770      	bx	lr
   1ac7c:	2000d200 	.word	0x2000d200

0001ac80 <net_buf_pool_get>:
}
   1ac80:	4b01      	ldr	r3, [pc, #4]	; (1ac88 <net_buf_pool_get+0x8>)
   1ac82:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1ac86:	4770      	bx	lr
   1ac88:	2000d200 	.word	0x2000d200

0001ac8c <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1ac8c:	2300      	movs	r3, #0
   1ac8e:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1ac90:	f100 0310 	add.w	r3, r0, #16
   1ac94:	6083      	str	r3, [r0, #8]
   1ac96:	4770      	bx	lr

0001ac98 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1ac98:	b570      	push	{r4, r5, r6, lr}
   1ac9a:	4605      	mov	r5, r0
	__asm__ volatile(
   1ac9c:	f04f 0320 	mov.w	r3, #32
   1aca0:	f3ef 8611 	mrs	r6, BASEPRI
   1aca4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1aca8:	8a43      	ldrh	r3, [r0, #18]
   1acaa:	b373      	cbz	r3, 1ad0a <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1acac:	8a02      	ldrh	r2, [r0, #16]
   1acae:	4293      	cmp	r3, r2
   1acb0:	d207      	bcs.n	1acc2 <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1acb2:	2100      	movs	r1, #0
   1acb4:	f00e f83a 	bl	28d2c <k_queue_get>
			if (buf) {
   1acb8:	4604      	mov	r4, r0
   1acba:	b110      	cbz	r0, 1acc2 <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1acbc:	f386 8811 	msr	BASEPRI, r6
   1acc0:	e019      	b.n	1acf6 <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1acc2:	8a6b      	ldrh	r3, [r5, #18]
   1acc4:	1e5a      	subs	r2, r3, #1
   1acc6:	826a      	strh	r2, [r5, #18]
   1acc8:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1accc:	69ea      	ldr	r2, [r5, #28]
   1acce:	8a2c      	ldrh	r4, [r5, #16]
   1acd0:	1ae4      	subs	r4, r4, r3
   1acd2:	8aab      	ldrh	r3, [r5, #20]
   1acd4:	3303      	adds	r3, #3
   1acd6:	f023 0303 	bic.w	r3, r3, #3
   1acda:	8ae9      	ldrh	r1, [r5, #22]
   1acdc:	3103      	adds	r1, #3
   1acde:	f021 0103 	bic.w	r1, r1, #3
   1ace2:	440b      	add	r3, r1
   1ace4:	3310      	adds	r3, #16
   1ace6:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1acea:	4628      	mov	r0, r5
   1acec:	f7ff ffc2 	bl	1ac74 <pool_id>
   1acf0:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1acf2:	8aab      	ldrh	r3, [r5, #20]
   1acf4:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1acf6:	2301      	movs	r3, #1
   1acf8:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1acfa:	2300      	movs	r3, #0
   1acfc:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1acfe:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1ad00:	4620      	mov	r0, r4
   1ad02:	f7ff ffc3 	bl	1ac8c <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1ad06:	4620      	mov	r0, r4
   1ad08:	bd70      	pop	{r4, r5, r6, pc}
   1ad0a:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1ad0e:	f00e f80d 	bl	28d2c <k_queue_get>
	if (!buf) {
   1ad12:	4604      	mov	r4, r0
   1ad14:	2800      	cmp	r0, #0
   1ad16:	d1ee      	bne.n	1acf6 <net_buf_alloc+0x5e>
   1ad18:	e7f5      	b.n	1ad06 <net_buf_alloc+0x6e>

0001ad1a <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1ad1a:	b570      	push	{r4, r5, r6, lr}
   1ad1c:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1ad1e:	f00e f805 	bl	28d2c <k_queue_get>
	if (!buf) {
   1ad22:	4606      	mov	r6, r0
   1ad24:	b188      	cbz	r0, 1ad4a <net_buf_get+0x30>
   1ad26:	4604      	mov	r4, r0
   1ad28:	e009      	b.n	1ad3e <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1ad2a:	2100      	movs	r1, #0
   1ad2c:	4628      	mov	r0, r5
   1ad2e:	f00d fffd 	bl	28d2c <k_queue_get>
   1ad32:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1ad34:	7963      	ldrb	r3, [r4, #5]
   1ad36:	f023 0301 	bic.w	r3, r3, #1
   1ad3a:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1ad3c:	4604      	mov	r4, r0
   1ad3e:	7963      	ldrb	r3, [r4, #5]
   1ad40:	f013 0f01 	tst.w	r3, #1
   1ad44:	d1f1      	bne.n	1ad2a <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1ad46:	2300      	movs	r3, #0
   1ad48:	6023      	str	r3, [r4, #0]

	return buf;
}
   1ad4a:	4630      	mov	r0, r6
   1ad4c:	bd70      	pop	{r4, r5, r6, pc}

0001ad4e <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1ad4e:	f100 0310 	add.w	r3, r0, #16
   1ad52:	4419      	add	r1, r3
   1ad54:	6081      	str	r1, [r0, #8]
   1ad56:	4770      	bx	lr

0001ad58 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1ad58:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1ad5a:	460a      	mov	r2, r1
   1ad5c:	e004      	b.n	1ad68 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1ad5e:	7953      	ldrb	r3, [r2, #5]
   1ad60:	f043 0301 	orr.w	r3, r3, #1
   1ad64:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1ad66:	4622      	mov	r2, r4
   1ad68:	6814      	ldr	r4, [r2, #0]
   1ad6a:	2c00      	cmp	r4, #0
   1ad6c:	d1f7      	bne.n	1ad5e <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1ad6e:	f00d ffc1 	bl	28cf4 <k_queue_append_list>
   1ad72:	bd10      	pop	{r4, pc}

0001ad74 <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1ad74:	b538      	push	{r3, r4, r5, lr}
   1ad76:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1ad78:	e006      	b.n	1ad88 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1ad7a:	79a0      	ldrb	r0, [r4, #6]
   1ad7c:	f7ff ff80 	bl	1ac80 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1ad80:	4621      	mov	r1, r4
   1ad82:	f00d ffb1 	bl	28ce8 <k_queue_prepend>
{
   1ad86:	462c      	mov	r4, r5
	while (buf) {
   1ad88:	b17c      	cbz	r4, 1adaa <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1ad8a:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1ad8c:	7923      	ldrb	r3, [r4, #4]
   1ad8e:	3b01      	subs	r3, #1
   1ad90:	b2db      	uxtb	r3, r3
   1ad92:	7123      	strb	r3, [r4, #4]
   1ad94:	b94b      	cbnz	r3, 1adaa <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1ad96:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1ad98:	79a0      	ldrb	r0, [r4, #6]
   1ad9a:	f7ff ff71 	bl	1ac80 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1ad9e:	6983      	ldr	r3, [r0, #24]
   1ada0:	2b00      	cmp	r3, #0
   1ada2:	d0ea      	beq.n	1ad7a <net_buf_unref+0x6>
			pool->destroy(buf);
   1ada4:	4620      	mov	r0, r4
   1ada6:	4798      	blx	r3
   1ada8:	e7ed      	b.n	1ad86 <net_buf_unref+0x12>
   1adaa:	bd38      	pop	{r3, r4, r5, pc}

0001adac <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1adac:	7903      	ldrb	r3, [r0, #4]
   1adae:	3301      	adds	r3, #1
   1adb0:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1adb2:	4770      	bx	lr

0001adb4 <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1adb4:	e000      	b.n	1adb8 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1adb6:	4618      	mov	r0, r3
	while (buf->frags) {
   1adb8:	6803      	ldr	r3, [r0, #0]
   1adba:	2b00      	cmp	r3, #0
   1adbc:	d1fb      	bne.n	1adb6 <net_buf_frag_last+0x2>
	}

	return buf;
}
   1adbe:	4770      	bx	lr

0001adc0 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1adc0:	b570      	push	{r4, r5, r6, lr}
   1adc2:	4604      	mov	r4, r0
   1adc4:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1adc6:	6806      	ldr	r6, [r0, #0]
   1adc8:	b11e      	cbz	r6, 1add2 <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1adca:	4608      	mov	r0, r1
   1adcc:	f7ff fff2 	bl	1adb4 <net_buf_frag_last>
   1add0:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1add2:	6025      	str	r5, [r4, #0]
   1add4:	bd70      	pop	{r4, r5, r6, pc}

0001add6 <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1add6:	b538      	push	{r3, r4, r5, lr}
   1add8:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1adda:	b138      	cbz	r0, 1adec <net_buf_frag_add+0x16>
   1addc:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1adde:	f7ff ffe9 	bl	1adb4 <net_buf_frag_last>
   1ade2:	4629      	mov	r1, r5
   1ade4:	f7ff ffec 	bl	1adc0 <net_buf_frag_insert>

	return head;
   1ade8:	4620      	mov	r0, r4
}
   1adea:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1adec:	4608      	mov	r0, r1
   1adee:	f7ff ffdd 	bl	1adac <net_buf_ref>
   1adf2:	bd38      	pop	{r3, r4, r5, pc}

0001adf4 <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1adf4:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1adf6:	b108      	cbz	r0, 1adfc <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1adf8:	680a      	ldr	r2, [r1, #0]
   1adfa:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1adfc:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1adfe:	2300      	movs	r3, #0
   1ae00:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1ae02:	4608      	mov	r0, r1
   1ae04:	f7ff ffb6 	bl	1ad74 <net_buf_unref>
#endif

	return next_frag;
}
   1ae08:	4620      	mov	r0, r4
   1ae0a:	bd10      	pop	{r4, pc}

0001ae0c <net_buf_simple_add>:
	return buf->data + buf->len;
   1ae0c:	6802      	ldr	r2, [r0, #0]
   1ae0e:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1ae10:	4419      	add	r1, r3
   1ae12:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1ae14:	18d0      	adds	r0, r2, r3
   1ae16:	4770      	bx	lr

0001ae18 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1ae18:	b538      	push	{r3, r4, r5, lr}
   1ae1a:	460d      	mov	r5, r1
   1ae1c:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1ae1e:	4611      	mov	r1, r2
   1ae20:	f7ff fff4 	bl	1ae0c <net_buf_simple_add>
   1ae24:	4622      	mov	r2, r4
   1ae26:	4629      	mov	r1, r5
   1ae28:	f7e5 fa4a 	bl	2c0 <memcpy>
}
   1ae2c:	bd38      	pop	{r3, r4, r5, pc}

0001ae2e <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1ae2e:	b510      	push	{r4, lr}
   1ae30:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1ae32:	2101      	movs	r1, #1
   1ae34:	f7ff ffea 	bl	1ae0c <net_buf_simple_add>
	*u8 = val;
   1ae38:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1ae3a:	bd10      	pop	{r4, pc}

0001ae3c <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1ae3c:	b510      	push	{r4, lr}
   1ae3e:	b082      	sub	sp, #8
   1ae40:	ac02      	add	r4, sp, #8
   1ae42:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ae46:	2102      	movs	r1, #2
   1ae48:	f7ff ffe0 	bl	1ae0c <net_buf_simple_add>
   1ae4c:	2202      	movs	r2, #2
   1ae4e:	4621      	mov	r1, r4
   1ae50:	f7e5 fa36 	bl	2c0 <memcpy>
}
   1ae54:	b002      	add	sp, #8
   1ae56:	bd10      	pop	{r4, pc}

0001ae58 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1ae58:	b510      	push	{r4, lr}
   1ae5a:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1ae5c:	0a0b      	lsrs	r3, r1, #8
   1ae5e:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1ae62:	ac02      	add	r4, sp, #8
   1ae64:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1ae68:	2102      	movs	r1, #2
   1ae6a:	f7ff ffcf 	bl	1ae0c <net_buf_simple_add>
   1ae6e:	2202      	movs	r2, #2
   1ae70:	4621      	mov	r1, r4
   1ae72:	f7e5 fa25 	bl	2c0 <memcpy>
}
   1ae76:	b002      	add	sp, #8
   1ae78:	bd10      	pop	{r4, pc}

0001ae7a <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1ae7a:	6803      	ldr	r3, [r0, #0]
   1ae7c:	1a5b      	subs	r3, r3, r1
   1ae7e:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1ae80:	8882      	ldrh	r2, [r0, #4]
   1ae82:	4411      	add	r1, r2
   1ae84:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1ae86:	4618      	mov	r0, r3
   1ae88:	4770      	bx	lr

0001ae8a <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1ae8a:	b510      	push	{r4, lr}
   1ae8c:	b082      	sub	sp, #8
   1ae8e:	ac02      	add	r4, sp, #8
   1ae90:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1ae94:	2102      	movs	r1, #2
   1ae96:	f7ff fff0 	bl	1ae7a <net_buf_simple_push>
   1ae9a:	2202      	movs	r2, #2
   1ae9c:	4621      	mov	r1, r4
   1ae9e:	f7e5 fa0f 	bl	2c0 <memcpy>
}
   1aea2:	b002      	add	sp, #8
   1aea4:	bd10      	pop	{r4, pc}

0001aea6 <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1aea6:	8883      	ldrh	r3, [r0, #4]
   1aea8:	1a5b      	subs	r3, r3, r1
   1aeaa:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1aeac:	6803      	ldr	r3, [r0, #0]
   1aeae:	4419      	add	r1, r3
   1aeb0:	6001      	str	r1, [r0, #0]
}
   1aeb2:	4608      	mov	r0, r1
   1aeb4:	4770      	bx	lr

0001aeb6 <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1aeb6:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1aeb8:	6803      	ldr	r3, [r0, #0]
   1aeba:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1aebc:	2101      	movs	r1, #1
   1aebe:	f7ff fff2 	bl	1aea6 <net_buf_simple_pull>

	return val;
}
   1aec2:	4620      	mov	r0, r4
   1aec4:	bd10      	pop	{r4, pc}

0001aec6 <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1aec6:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1aec8:	6803      	ldr	r3, [r0, #0]
   1aeca:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1aecc:	2102      	movs	r1, #2
   1aece:	f7ff ffea 	bl	1aea6 <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1aed2:	4620      	mov	r0, r4
   1aed4:	bd10      	pop	{r4, pc}

0001aed6 <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1aed6:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1aeda:	1a18      	subs	r0, r3, r0
   1aedc:	4770      	bx	lr

0001aede <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1aede:	b538      	push	{r3, r4, r5, lr}
   1aee0:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1aee2:	88c4      	ldrh	r4, [r0, #6]
   1aee4:	f7ff fff7 	bl	1aed6 <net_buf_simple_headroom>
   1aee8:	1a20      	subs	r0, r4, r0
   1aeea:	88ab      	ldrh	r3, [r5, #4]
}
   1aeec:	1ac0      	subs	r0, r0, r3
   1aeee:	bd38      	pop	{r3, r4, r5, pc}

0001aef0 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1aef0:	b510      	push	{r4, lr}
   1aef2:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1aef4:	6883      	ldr	r3, [r0, #8]
   1aef6:	b18b      	cbz	r3, 1af1c <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1aef8:	b1b1      	cbz	r1, 1af28 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1aefa:	68a3      	ldr	r3, [r4, #8]
   1aefc:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1aefe:	781b      	ldrb	r3, [r3, #0]
   1af00:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1af04:	2b60      	cmp	r3, #96	; 0x60
   1af06:	d01d      	beq.n	1af44 <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1af08:	4b18      	ldr	r3, [pc, #96]	; (1af6c <processing_data+0x7c>)
   1af0a:	6a1a      	ldr	r2, [r3, #32]
   1af0c:	3201      	adds	r2, #1
   1af0e:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1af10:	68da      	ldr	r2, [r3, #12]
   1af12:	3201      	adds	r2, #1
   1af14:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1af16:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1af18:	bb18      	cbnz	r0, 1af62 <processing_data+0x72>
   1af1a:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1af1c:	4a13      	ldr	r2, [pc, #76]	; (1af6c <processing_data+0x7c>)
   1af1e:	6813      	ldr	r3, [r2, #0]
   1af20:	3301      	adds	r3, #1
   1af22:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1af24:	2002      	movs	r0, #2
   1af26:	e7f7      	b.n	1af18 <processing_data+0x28>
	return pkt->iface;
   1af28:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1af2a:	6843      	ldr	r3, [r0, #4]
   1af2c:	681b      	ldr	r3, [r3, #0]
   1af2e:	4621      	mov	r1, r4
   1af30:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1af32:	2801      	cmp	r0, #1
   1af34:	d0e1      	beq.n	1aefa <processing_data+0xa>
			if (ret == NET_DROP) {
   1af36:	2802      	cmp	r0, #2
   1af38:	d1ee      	bne.n	1af18 <processing_data+0x28>
   1af3a:	4a0c      	ldr	r2, [pc, #48]	; (1af6c <processing_data+0x7c>)
   1af3c:	6813      	ldr	r3, [r2, #0]
   1af3e:	3301      	adds	r3, #1
   1af40:	6013      	str	r3, [r2, #0]
   1af42:	e7e9      	b.n	1af18 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1af44:	4a09      	ldr	r2, [pc, #36]	; (1af6c <processing_data+0x7c>)
   1af46:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1af48:	3301      	adds	r3, #1
   1af4a:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1af4c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1af50:	220a      	movs	r2, #10
   1af52:	f362 03c6 	bfi	r3, r2, #3, #4
   1af56:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1af5a:	4620      	mov	r0, r4
   1af5c:	f006 fd1e 	bl	2199c <net_ipv6_process_pkt>
   1af60:	e7da      	b.n	1af18 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1af62:	4620      	mov	r0, r4
   1af64:	f002 fc75 	bl	1d852 <net_pkt_unref>
		break;
	}
}
   1af68:	e7d7      	b.n	1af1a <processing_data+0x2a>
   1af6a:	bf00      	nop
   1af6c:	20002b58 	.word	0x20002b58

0001af70 <net_rx_thread>:

static void net_rx_thread(void)
{
   1af70:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1af72:	4c16      	ldr	r4, [pc, #88]	; (1afcc <net_rx_thread+0x5c>)
   1af74:	4620      	mov	r0, r4
   1af76:	f001 faaf 	bl	1c4d8 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1af7a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1af7e:	4620      	mov	r0, r4
   1af80:	f00e fa56 	bl	29430 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1af84:	f001 faee 	bl	1c564 <net_if_post_init>
   1af88:	e010      	b.n	1afac <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1af8a:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1af8c:	2200      	movs	r2, #0
   1af8e:	e002      	b.n	1af96 <net_rx_thread+0x26>
		bytes += buf->len;
   1af90:	8999      	ldrh	r1, [r3, #12]
   1af92:	440a      	add	r2, r1
		buf = buf->frags;
   1af94:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1af96:	2b00      	cmp	r3, #0
   1af98:	d1fa      	bne.n	1af90 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1af9a:	490d      	ldr	r1, [pc, #52]	; (1afd0 <net_rx_thread+0x60>)
   1af9c:	688b      	ldr	r3, [r1, #8]
   1af9e:	441a      	add	r2, r3
   1afa0:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1afa2:	2100      	movs	r1, #0
   1afa4:	f7ff ffa4 	bl	1aef0 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1afa8:	f00e f8d6 	bl	29158 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1afac:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1afb0:	4808      	ldr	r0, [pc, #32]	; (1afd4 <net_rx_thread+0x64>)
   1afb2:	f00d febb 	bl	28d2c <k_queue_get>
	for (i = 0; i < size; i++) {
   1afb6:	2300      	movs	r3, #0
   1afb8:	f240 52db 	movw	r2, #1499	; 0x5db
   1afbc:	4293      	cmp	r3, r2
   1afbe:	d8e4      	bhi.n	1af8a <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1afc0:	4a05      	ldr	r2, [pc, #20]	; (1afd8 <net_rx_thread+0x68>)
   1afc2:	5cd2      	ldrb	r2, [r2, r3]
   1afc4:	2aaa      	cmp	r2, #170	; 0xaa
   1afc6:	d1e0      	bne.n	1af8a <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1afc8:	3301      	adds	r3, #1
   1afca:	e7f5      	b.n	1afb8 <net_rx_thread+0x48>
   1afcc:	2000d198 	.word	0x2000d198
   1afd0:	20002b58 	.word	0x20002b58
   1afd4:	20001bdc 	.word	0x20001bdc
   1afd8:	20004860 	.word	0x20004860

0001afdc <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1afdc:	b500      	push	{lr}
   1afde:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1afe0:	480b      	ldr	r0, [pc, #44]	; (1b010 <init_rx_queue+0x34>)
   1afe2:	f00d fe48 	bl	28c76 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1afe6:	2300      	movs	r3, #0
   1afe8:	9305      	str	r3, [sp, #20]
   1afea:	2201      	movs	r2, #1
   1afec:	9204      	str	r2, [sp, #16]
   1afee:	f06f 0207 	mvn.w	r2, #7
   1aff2:	9203      	str	r2, [sp, #12]
   1aff4:	9302      	str	r3, [sp, #8]
   1aff6:	9301      	str	r3, [sp, #4]
   1aff8:	9300      	str	r3, [sp, #0]
   1affa:	4b06      	ldr	r3, [pc, #24]	; (1b014 <init_rx_queue+0x38>)
   1affc:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1b000:	4905      	ldr	r1, [pc, #20]	; (1b018 <init_rx_queue+0x3c>)
   1b002:	4806      	ldr	r0, [pc, #24]	; (1b01c <init_rx_queue+0x40>)
   1b004:	f00e fc80 	bl	29908 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1b008:	b007      	add	sp, #28
   1b00a:	f85d fb04 	ldr.w	pc, [sp], #4
   1b00e:	bf00      	nop
   1b010:	20001bdc 	.word	0x20001bdc
   1b014:	0001af71 	.word	0x0001af71
   1b018:	20004860 	.word	0x20004860
   1b01c:	20001bec 	.word	0x20001bec

0001b020 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1b020:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1b022:	f002 ffb2 	bl	1df8a <net_pkt_init>

	net_context_init();
   1b026:	f002 faf1 	bl	1d60c <net_context_init>
	net_icmpv6_init();
   1b02a:	f004 fa0b 	bl	1f444 <net_icmpv6_init>
	net_ipv6_init();
   1b02e:	f006 fe89 	bl	21d44 <net_ipv6_init>
	net_conn_init();
   1b032:	f00a fb55 	bl	256e0 <net_conn_init>
	net_udp_init();
   1b036:	f008 fa6b 	bl	23510 <net_udp_init>
	net_tcp_init();
   1b03a:	f008 fc4f 	bl	238dc <net_tcp_init>
	net_route_init();
   1b03e:	f007 ffca 	bl	22fd6 <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1b042:	f008 f8b3 	bl	231ac <net_mgmt_event_init>

	init_rx_queue();
   1b046:	f7ff ffc9 	bl	1afdc <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1b04a:	2000      	movs	r0, #0
   1b04c:	bd08      	pop	{r3, pc}
	...

0001b050 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1b050:	2800      	cmp	r0, #0
   1b052:	f000 80bc 	beq.w	1b1ce <net_send_data+0x17e>
{
   1b056:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b058:	b091      	sub	sp, #68	; 0x44
   1b05a:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1b05c:	6883      	ldr	r3, [r0, #8]
   1b05e:	2b00      	cmp	r3, #0
   1b060:	f000 80b8 	beq.w	1b1d4 <net_send_data+0x184>
	return pkt->iface;
   1b064:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1b066:	2b00      	cmp	r3, #0
   1b068:	f000 80b7 	beq.w	1b1da <net_send_data+0x18a>
	return pkt->family;
   1b06c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1b070:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1b074:	2b0a      	cmp	r3, #10
   1b076:	d103      	bne.n	1b080 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1b078:	4a59      	ldr	r2, [pc, #356]	; (1b1e0 <net_send_data+0x190>)
   1b07a:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1b07c:	3301      	adds	r3, #1
   1b07e:	6293      	str	r3, [r2, #40]	; 0x28
   1b080:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b084:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b088:	2b0a      	cmp	r3, #10
   1b08a:	d00b      	beq.n	1b0a4 <net_send_data+0x54>
	return 0;
   1b08c:	2000      	movs	r0, #0
	if (status < 0) {
   1b08e:	2800      	cmp	r0, #0
   1b090:	db06      	blt.n	1b0a0 <net_send_data+0x50>
	} else if (status > 0) {
   1b092:	f340 8091 	ble.w	1b1b8 <net_send_data+0x168>
		processing_data(pkt, true);
   1b096:	2101      	movs	r1, #1
   1b098:	4620      	mov	r0, r4
   1b09a:	f7ff ff29 	bl	1aef0 <processing_data>
		return 0;
   1b09e:	2000      	movs	r0, #0
}
   1b0a0:	b011      	add	sp, #68	; 0x44
   1b0a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1b0a4:	68a3      	ldr	r3, [r4, #8]
   1b0a6:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1b0a8:	3518      	adds	r5, #24
   1b0aa:	f004 fd93 	bl	1fbd4 <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b0ae:	2210      	movs	r2, #16
   1b0b0:	4601      	mov	r1, r0
   1b0b2:	4628      	mov	r0, r5
   1b0b4:	f00f fbc8 	bl	2a848 <memcmp>
   1b0b8:	2800      	cmp	r0, #0
   1b0ba:	d07a      	beq.n	1b1b2 <net_send_data+0x162>
   1b0bc:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b0be:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b0c0:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0c4:	b9ab      	cbnz	r3, 1b0f2 <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b0c6:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b0c8:	2b00      	cmp	r3, #0
   1b0ca:	d141      	bne.n	1b150 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0cc:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b0ce:	2b00      	cmp	r3, #0
   1b0d0:	d140      	bne.n	1b154 <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b0d2:	68c2      	ldr	r2, [r0, #12]
   1b0d4:	0a13      	lsrs	r3, r2, #8
   1b0d6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b0da:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b0de:	0211      	lsls	r1, r2, #8
   1b0e0:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b0e4:	430b      	orrs	r3, r1
   1b0e6:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b0ea:	2b01      	cmp	r3, #1
   1b0ec:	d034      	beq.n	1b158 <net_send_data+0x108>
   1b0ee:	2300      	movs	r3, #0
   1b0f0:	e000      	b.n	1b0f4 <net_send_data+0xa4>
   1b0f2:	2300      	movs	r3, #0
   1b0f4:	b393      	cbz	r3, 1b15c <net_send_data+0x10c>
   1b0f6:	68a3      	ldr	r3, [r4, #8]
   1b0f8:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1b0fc:	ae0c      	add	r6, sp, #48	; 0x30
   1b0fe:	4675      	mov	r5, lr
   1b100:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1b104:	6869      	ldr	r1, [r5, #4]
   1b106:	68aa      	ldr	r2, [r5, #8]
   1b108:	68eb      	ldr	r3, [r5, #12]
   1b10a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1b10c:	ab10      	add	r3, sp, #64	; 0x40
   1b10e:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1b112:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1b116:	af08      	add	r7, sp, #32
   1b118:	4673      	mov	r3, lr
   1b11a:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1b11e:	6859      	ldr	r1, [r3, #4]
   1b120:	689a      	ldr	r2, [r3, #8]
   1b122:	68db      	ldr	r3, [r3, #12]
   1b124:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1b126:	af08      	add	r7, sp, #32
   1b128:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1b12a:	f8ce 0008 	str.w	r0, [lr, #8]
   1b12e:	6069      	str	r1, [r5, #4]
   1b130:	60aa      	str	r2, [r5, #8]
   1b132:	60eb      	str	r3, [r5, #12]
   1b134:	68a3      	ldr	r3, [r4, #8]
   1b136:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1b138:	ad04      	add	r5, sp, #16
   1b13a:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1b13e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1b142:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b144:	61b8      	str	r0, [r7, #24]
   1b146:	61f9      	str	r1, [r7, #28]
   1b148:	623a      	str	r2, [r7, #32]
   1b14a:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1b14c:	2001      	movs	r0, #1
   1b14e:	e79e      	b.n	1b08e <net_send_data+0x3e>
   1b150:	2300      	movs	r3, #0
   1b152:	e7cf      	b.n	1b0f4 <net_send_data+0xa4>
   1b154:	2300      	movs	r3, #0
   1b156:	e7cd      	b.n	1b0f4 <net_send_data+0xa4>
   1b158:	2301      	movs	r3, #1
   1b15a:	e7cb      	b.n	1b0f4 <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1b15c:	2100      	movs	r1, #0
   1b15e:	f000 f9c5 	bl	1b4ec <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1b162:	2800      	cmp	r0, #0
   1b164:	d1c7      	bne.n	1b0f6 <net_send_data+0xa6>
   1b166:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1b168:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b16a:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b16e:	b99a      	cbnz	r2, 1b198 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b170:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1b172:	b9aa      	cbnz	r2, 1b1a0 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b174:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1b176:	b9aa      	cbnz	r2, 1b1a4 <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1b178:	68da      	ldr	r2, [r3, #12]
   1b17a:	0a13      	lsrs	r3, r2, #8
   1b17c:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1b180:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1b184:	0211      	lsls	r1, r2, #8
   1b186:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1b18a:	430b      	orrs	r3, r1
   1b18c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1b190:	2b01      	cmp	r3, #1
   1b192:	d009      	beq.n	1b1a8 <net_send_data+0x158>
   1b194:	2300      	movs	r3, #0
   1b196:	e000      	b.n	1b19a <net_send_data+0x14a>
   1b198:	2300      	movs	r3, #0
   1b19a:	b93b      	cbnz	r3, 1b1ac <net_send_data+0x15c>
	return 0;
   1b19c:	2000      	movs	r0, #0
   1b19e:	e776      	b.n	1b08e <net_send_data+0x3e>
   1b1a0:	2300      	movs	r3, #0
   1b1a2:	e7fa      	b.n	1b19a <net_send_data+0x14a>
   1b1a4:	2300      	movs	r3, #0
   1b1a6:	e7f8      	b.n	1b19a <net_send_data+0x14a>
   1b1a8:	2301      	movs	r3, #1
   1b1aa:	e7f6      	b.n	1b19a <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1b1ac:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b1b0:	e76d      	b.n	1b08e <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1b1b2:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1b1b6:	e76a      	b.n	1b08e <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1b1b8:	4621      	mov	r1, r4
   1b1ba:	6960      	ldr	r0, [r4, #20]
   1b1bc:	f000 ffe0 	bl	1c180 <net_if_send_data>
   1b1c0:	2802      	cmp	r0, #2
   1b1c2:	d001      	beq.n	1b1c8 <net_send_data+0x178>
	return 0;
   1b1c4:	2000      	movs	r0, #0
   1b1c6:	e76b      	b.n	1b0a0 <net_send_data+0x50>
		return -EIO;
   1b1c8:	f06f 0004 	mvn.w	r0, #4
   1b1cc:	e768      	b.n	1b0a0 <net_send_data+0x50>
		return -ENODATA;
   1b1ce:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b1d2:	4770      	bx	lr
   1b1d4:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b1d8:	e762      	b.n	1b0a0 <net_send_data+0x50>
		return -EINVAL;
   1b1da:	f06f 0015 	mvn.w	r0, #21
   1b1de:	e75f      	b.n	1b0a0 <net_send_data+0x50>
   1b1e0:	20002b58 	.word	0x20002b58

0001b1e4 <net_recv_data>:
{
   1b1e4:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1b1e6:	688b      	ldr	r3, [r1, #8]
   1b1e8:	b19b      	cbz	r3, 1b212 <net_recv_data+0x2e>
   1b1ea:	f3bf 8f5b 	dmb	ish
   1b1ee:	68c3      	ldr	r3, [r0, #12]
   1b1f0:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b1f4:	f013 0f01 	tst.w	r3, #1
   1b1f8:	d00e      	beq.n	1b218 <net_recv_data+0x34>
	pkt->iface = iface;
   1b1fa:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1b1fc:	7d43      	ldrb	r3, [r0, #21]
   1b1fe:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1b202:	7d43      	ldrb	r3, [r0, #21]
   1b204:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1b208:	4805      	ldr	r0, [pc, #20]	; (1b220 <net_recv_data+0x3c>)
   1b20a:	f00d fd67 	bl	28cdc <k_queue_append>
	return 0;
   1b20e:	2000      	movs	r0, #0
   1b210:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1b212:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1b216:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1b218:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1b21c:	bd08      	pop	{r3, pc}
   1b21e:	bf00      	nop
   1b220:	20001bdc 	.word	0x20001bdc

0001b224 <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1b224:	2302      	movs	r3, #2
   1b226:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1b22a:	4770      	bx	lr

0001b22c <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1b22c:	2300      	movs	r3, #0
   1b22e:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1b232:	4770      	bx	lr

0001b234 <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1b234:	2300      	movs	r3, #0
   1b236:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1b23a:	4770      	bx	lr

0001b23c <ipv6_addr_find>:
{
   1b23c:	b570      	push	{r4, r5, r6, lr}
   1b23e:	4605      	mov	r5, r0
   1b240:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b242:	2400      	movs	r4, #0
   1b244:	e000      	b.n	1b248 <ipv6_addr_find+0xc>
   1b246:	3401      	adds	r4, #1
   1b248:	2c02      	cmp	r4, #2
   1b24a:	dc19      	bgt.n	1b280 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1b24c:	236c      	movs	r3, #108	; 0x6c
   1b24e:	fb03 5304 	mla	r3, r3, r4, r5
   1b252:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b256:	2b00      	cmp	r3, #0
   1b258:	d0f5      	beq.n	1b246 <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1b25a:	216c      	movs	r1, #108	; 0x6c
   1b25c:	fb01 f104 	mul.w	r1, r1, r4
   1b260:	3120      	adds	r1, #32
   1b262:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b264:	2210      	movs	r2, #16
   1b266:	4411      	add	r1, r2
   1b268:	4630      	mov	r0, r6
   1b26a:	f00f faed 	bl	2a848 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1b26e:	2800      	cmp	r0, #0
   1b270:	d1e9      	bne.n	1b246 <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1b272:	206c      	movs	r0, #108	; 0x6c
   1b274:	fb00 f004 	mul.w	r0, r0, r4
   1b278:	3020      	adds	r0, #32
   1b27a:	4428      	add	r0, r5
   1b27c:	300c      	adds	r0, #12
   1b27e:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b280:	2000      	movs	r0, #0
}
   1b282:	bd70      	pop	{r4, r5, r6, pc}

0001b284 <ipv6_prefix_find>:
{
   1b284:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b286:	4605      	mov	r5, r0
   1b288:	460e      	mov	r6, r1
   1b28a:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b28c:	2400      	movs	r4, #0
   1b28e:	e000      	b.n	1b292 <ipv6_prefix_find+0xe>
   1b290:	3401      	adds	r4, #1
   1b292:	2c01      	cmp	r4, #1
   1b294:	dc21      	bgt.n	1b2da <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1b296:	236c      	movs	r3, #108	; 0x6c
   1b298:	fb03 5304 	mla	r3, r3, r4, r5
   1b29c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b2a0:	2b00      	cmp	r3, #0
   1b2a2:	d0f5      	beq.n	1b290 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b2a4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1b2a8:	0099      	lsls	r1, r3, #2
   1b2aa:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1b2ae:	4429      	add	r1, r5
   1b2b0:	2210      	movs	r2, #16
   1b2b2:	4411      	add	r1, r2
   1b2b4:	4630      	mov	r0, r6
   1b2b6:	f00f fac7 	bl	2a848 <memcmp>
   1b2ba:	2800      	cmp	r0, #0
   1b2bc:	d1e8      	bne.n	1b290 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1b2be:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b2c2:	0093      	lsls	r3, r2, #2
   1b2c4:	461a      	mov	r2, r3
   1b2c6:	442b      	add	r3, r5
   1b2c8:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1b2cc:	42bb      	cmp	r3, r7
   1b2ce:	d1df      	bne.n	1b290 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1b2d0:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1b2d4:	4428      	add	r0, r5
   1b2d6:	3010      	adds	r0, #16
   1b2d8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1b2da:	2000      	movs	r0, #0
}
   1b2dc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001b2e0 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1b2e0:	2300      	movs	r3, #0
   1b2e2:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1b2e6:	f3bf 8f5b 	dmb	ish
   1b2ea:	68c3      	ldr	r3, [r0, #12]
   1b2ec:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1b2f0:	f013 0f01 	tst.w	r3, #1
   1b2f4:	d100      	bne.n	1b2f8 <net_if_ipv6_start_dad+0x18>
   1b2f6:	4770      	bx	lr
{
   1b2f8:	b510      	push	{r4, lr}
   1b2fa:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1b2fc:	2301      	movs	r3, #1
   1b2fe:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1b302:	f006 f969 	bl	215d8 <net_ipv6_start_dad>
   1b306:	b100      	cbz	r0, 1b30a <net_if_ipv6_start_dad+0x2a>
   1b308:	bd10      	pop	{r4, pc}
   1b30a:	2264      	movs	r2, #100	; 0x64
   1b30c:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1b310:	4801      	ldr	r0, [pc, #4]	; (1b318 <net_if_ipv6_start_dad+0x38>)
   1b312:	f00e fec3 	bl	2a09c <k_delayed_work_submit_to_queue>
}
   1b316:	e7f7      	b.n	1b308 <net_if_ipv6_start_dad+0x28>
   1b318:	20002c78 	.word	0x20002c78

0001b31c <net_if_ipv6_prefix_init>:
{
   1b31c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1b31e:	b085      	sub	sp, #20
   1b320:	4605      	mov	r5, r0
   1b322:	460e      	mov	r6, r1
   1b324:	461f      	mov	r7, r3
	prefix->is_used = true;
   1b326:	2301      	movs	r3, #1
   1b328:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1b32c:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1b330:	466c      	mov	r4, sp
   1b332:	6808      	ldr	r0, [r1, #0]
   1b334:	6849      	ldr	r1, [r1, #4]
   1b336:	68b2      	ldr	r2, [r6, #8]
   1b338:	68f3      	ldr	r3, [r6, #12]
   1b33a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1b33c:	466c      	mov	r4, sp
   1b33e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1b340:	62a8      	str	r0, [r5, #40]	; 0x28
   1b342:	62e9      	str	r1, [r5, #44]	; 0x2c
   1b344:	632a      	str	r2, [r5, #48]	; 0x30
   1b346:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1b348:	4907      	ldr	r1, [pc, #28]	; (1b368 <net_if_ipv6_prefix_init+0x4c>)
   1b34a:	4628      	mov	r0, r5
   1b34c:	f00e fe2e 	bl	29fac <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1b350:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1b354:	d004      	beq.n	1b360 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1b356:	2300      	movs	r3, #0
   1b358:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1b35c:	b005      	add	sp, #20
   1b35e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1b360:	2301      	movs	r3, #1
   1b362:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1b366:	e7f9      	b.n	1b35c <net_if_ipv6_prefix_init+0x40>
   1b368:	0001b22d 	.word	0x0001b22d

0001b36c <join_mcast_allnodes>:
{
   1b36c:	b500      	push	{lr}
   1b36e:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1b370:	f240 23ff 	movw	r3, #767	; 0x2ff
   1b374:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1b378:	2300      	movs	r3, #0
   1b37a:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1b37e:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1b382:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1b386:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1b38a:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1b38e:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1b392:	f44f 7380 	mov.w	r3, #256	; 0x100
   1b396:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b39a:	4669      	mov	r1, sp
   1b39c:	f006 faa4 	bl	218e8 <net_ipv6_mld_join>
}
   1b3a0:	b005      	add	sp, #20
   1b3a2:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3a6 <join_mcast_solicit_node>:
{
   1b3a6:	b500      	push	{lr}
   1b3a8:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1b3aa:	22ff      	movs	r2, #255	; 0xff
   1b3ac:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1b3b0:	2302      	movs	r3, #2
   1b3b2:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b3b6:	2300      	movs	r3, #0
   1b3b8:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b3bc:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b3c0:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b3c4:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b3c8:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b3cc:	2301      	movs	r3, #1
   1b3ce:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b3d2:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b3d6:	7b4b      	ldrb	r3, [r1, #13]
   1b3d8:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b3dc:	89cb      	ldrh	r3, [r1, #14]
   1b3de:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1b3e2:	4669      	mov	r1, sp
   1b3e4:	f006 fa80 	bl	218e8 <net_ipv6_mld_join>
}
   1b3e8:	b005      	add	sp, #20
   1b3ea:	f85d fb04 	ldr.w	pc, [sp], #4

0001b3ee <leave_mcast_all>:
{
   1b3ee:	b538      	push	{r3, r4, r5, lr}
   1b3f0:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b3f2:	2400      	movs	r4, #0
   1b3f4:	e000      	b.n	1b3f8 <leave_mcast_all+0xa>
   1b3f6:	3401      	adds	r4, #1
   1b3f8:	2c04      	cmp	r4, #4
   1b3fa:	dc1a      	bgt.n	1b432 <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1b3fc:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b400:	00d3      	lsls	r3, r2, #3
   1b402:	442b      	add	r3, r5
   1b404:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b408:	f013 0f01 	tst.w	r3, #1
   1b40c:	d0f3      	beq.n	1b3f6 <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1b40e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b412:	00d3      	lsls	r3, r2, #3
   1b414:	461a      	mov	r2, r3
   1b416:	442b      	add	r3, r5
   1b418:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1b41c:	f013 0f02 	tst.w	r3, #2
   1b420:	d0e9      	beq.n	1b3f6 <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1b422:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1b426:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1b428:	3118      	adds	r1, #24
   1b42a:	4628      	mov	r0, r5
   1b42c:	f006 fa96 	bl	2195c <net_ipv6_mld_leave>
   1b430:	e7e1      	b.n	1b3f6 <leave_mcast_all+0x8>
}
   1b432:	bd38      	pop	{r3, r4, r5, pc}

0001b434 <net_if_prepare_events>:
{
   1b434:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1b436:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b438:	4d0a      	ldr	r5, [pc, #40]	; (1b464 <net_if_prepare_events+0x30>)
   1b43a:	e00d      	b.n	1b458 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1b43c:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1b440:	0098      	lsls	r0, r3, #2
   1b442:	f105 0318 	add.w	r3, r5, #24
   1b446:	2200      	movs	r2, #0
   1b448:	2104      	movs	r1, #4
   1b44a:	4e07      	ldr	r6, [pc, #28]	; (1b468 <net_if_prepare_events+0x34>)
   1b44c:	4430      	add	r0, r6
   1b44e:	f00d f927 	bl	286a0 <k_poll_event_init>
		ev_count++;
   1b452:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b454:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b458:	4b04      	ldr	r3, [pc, #16]	; (1b46c <net_if_prepare_events+0x38>)
   1b45a:	429d      	cmp	r5, r3
   1b45c:	d1ee      	bne.n	1b43c <net_if_prepare_events+0x8>
}
   1b45e:	4620      	mov	r0, r4
   1b460:	bd70      	pop	{r4, r5, r6, pc}
   1b462:	bf00      	nop
   1b464:	2000d2c0 	.word	0x2000d2c0
   1b468:	2000d560 	.word	0x2000d560
   1b46c:	2000d560 	.word	0x2000d560

0001b470 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b470:	4b06      	ldr	r3, [pc, #24]	; (1b48c <net_if_lookup_by_dev+0x1c>)
   1b472:	4a07      	ldr	r2, [pc, #28]	; (1b490 <net_if_lookup_by_dev+0x20>)
   1b474:	4293      	cmp	r3, r2
   1b476:	d005      	beq.n	1b484 <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1b478:	681a      	ldr	r2, [r3, #0]
   1b47a:	4282      	cmp	r2, r0
   1b47c:	d003      	beq.n	1b486 <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b47e:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1b482:	e7f6      	b.n	1b472 <net_if_lookup_by_dev+0x2>
	return NULL;
   1b484:	2300      	movs	r3, #0
}
   1b486:	4618      	mov	r0, r3
   1b488:	4770      	bx	lr
   1b48a:	bf00      	nop
   1b48c:	2000d2c0 	.word	0x2000d2c0
   1b490:	2000d560 	.word	0x2000d560

0001b494 <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1b494:	4b03      	ldr	r3, [pc, #12]	; (1b4a4 <net_if_get_default+0x10>)
   1b496:	4a04      	ldr	r2, [pc, #16]	; (1b4a8 <net_if_get_default+0x14>)
   1b498:	429a      	cmp	r2, r3
   1b49a:	d001      	beq.n	1b4a0 <net_if_get_default+0xc>
	return __net_if_start;
   1b49c:	4802      	ldr	r0, [pc, #8]	; (1b4a8 <net_if_get_default+0x14>)
}
   1b49e:	4770      	bx	lr
		return NULL;
   1b4a0:	2000      	movs	r0, #0
   1b4a2:	4770      	bx	lr
   1b4a4:	2000d560 	.word	0x2000d560
   1b4a8:	2000d2c0 	.word	0x2000d2c0

0001b4ac <net_if_start_rs>:
{
   1b4ac:	b510      	push	{r4, lr}
   1b4ae:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1b4b0:	f006 fa16 	bl	218e0 <net_ipv6_start_rs>
   1b4b4:	b100      	cbz	r0, 1b4b8 <net_if_start_rs+0xc>
   1b4b6:	bd10      	pop	{r4, pc}
   1b4b8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b4bc:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1b4c0:	4801      	ldr	r0, [pc, #4]	; (1b4c8 <net_if_start_rs+0x1c>)
   1b4c2:	f00e fdeb 	bl	2a09c <k_delayed_work_submit_to_queue>
}
   1b4c6:	e7f6      	b.n	1b4b6 <net_if_start_rs+0xa>
   1b4c8:	20002c78 	.word	0x20002c78

0001b4cc <rs_timeout>:
{
   1b4cc:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1b4ce:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1b4d2:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1b4d6:	3301      	adds	r3, #1
   1b4d8:	b2db      	uxtb	r3, r3
   1b4da:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1b4de:	2b02      	cmp	r3, #2
   1b4e0:	d900      	bls.n	1b4e4 <rs_timeout+0x18>
   1b4e2:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1b4e4:	f7ff ffe2 	bl	1b4ac <net_if_start_rs>
}
   1b4e8:	e7fb      	b.n	1b4e2 <rs_timeout+0x16>
	...

0001b4ec <net_if_ipv6_addr_lookup>:
{
   1b4ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b4f0:	4607      	mov	r7, r0
   1b4f2:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b4f4:	4d1b      	ldr	r5, [pc, #108]	; (1b564 <net_if_ipv6_addr_lookup+0x78>)
   1b4f6:	e02d      	b.n	1b554 <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1b4f8:	b9ee      	cbnz	r6, 1b536 <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4fa:	3401      	adds	r4, #1
   1b4fc:	2c02      	cmp	r4, #2
   1b4fe:	dc27      	bgt.n	1b550 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1b500:	236c      	movs	r3, #108	; 0x6c
   1b502:	fb03 5304 	mla	r3, r3, r4, r5
   1b506:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1b50a:	2e00      	cmp	r6, #0
   1b50c:	d0f5      	beq.n	1b4fa <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b50e:	236c      	movs	r3, #108	; 0x6c
   1b510:	fb03 5304 	mla	r3, r3, r4, r5
   1b514:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1b516:	2b0a      	cmp	r3, #10
   1b518:	d1ef      	bne.n	1b4fa <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1b51a:	216c      	movs	r1, #108	; 0x6c
   1b51c:	fb01 f104 	mul.w	r1, r1, r4
   1b520:	3120      	adds	r1, #32
   1b522:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1b524:	2210      	movs	r2, #16
   1b526:	4411      	add	r1, r2
   1b528:	4638      	mov	r0, r7
   1b52a:	f00f f98d 	bl	2a848 <memcmp>
   1b52e:	2800      	cmp	r0, #0
   1b530:	d0e2      	beq.n	1b4f8 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1b532:	2600      	movs	r6, #0
   1b534:	e7e0      	b.n	1b4f8 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1b536:	f1b8 0f00 	cmp.w	r8, #0
   1b53a:	d001      	beq.n	1b540 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1b53c:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1b540:	206c      	movs	r0, #108	; 0x6c
   1b542:	fb00 f004 	mul.w	r0, r0, r4
   1b546:	3020      	adds	r0, #32
   1b548:	4428      	add	r0, r5
   1b54a:	300c      	adds	r0, #12
   1b54c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b550:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b554:	4b04      	ldr	r3, [pc, #16]	; (1b568 <net_if_ipv6_addr_lookup+0x7c>)
   1b556:	429d      	cmp	r5, r3
   1b558:	d001      	beq.n	1b55e <net_if_ipv6_addr_lookup+0x72>
   1b55a:	2400      	movs	r4, #0
   1b55c:	e7ce      	b.n	1b4fc <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1b55e:	2000      	movs	r0, #0
}
   1b560:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b564:	2000d2c0 	.word	0x2000d2c0
   1b568:	2000d560 	.word	0x2000d560

0001b56c <dad_timeout>:
{
   1b56c:	b530      	push	{r4, r5, lr}
   1b56e:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1b570:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1b574:	a902      	add	r1, sp, #8
   1b576:	2300      	movs	r3, #0
   1b578:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1b57c:	2301      	movs	r3, #1
   1b57e:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1b582:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1b586:	4620      	mov	r0, r4
   1b588:	f7ff ffb0 	bl	1b4ec <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1b58c:	4285      	cmp	r5, r0
   1b58e:	d001      	beq.n	1b594 <dad_timeout+0x28>
}
   1b590:	b003      	add	sp, #12
   1b592:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1b594:	2300      	movs	r3, #0
   1b596:	461a      	mov	r2, r3
   1b598:	9901      	ldr	r1, [sp, #4]
   1b59a:	4807      	ldr	r0, [pc, #28]	; (1b5b8 <dad_timeout+0x4c>)
   1b59c:	f007 fdcc 	bl	23138 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1b5a0:	4621      	mov	r1, r4
   1b5a2:	9801      	ldr	r0, [sp, #4]
   1b5a4:	f004 faf6 	bl	1fb94 <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1b5a8:	9801      	ldr	r0, [sp, #4]
   1b5aa:	f7ff fedf 	bl	1b36c <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1b5ae:	4621      	mov	r1, r4
   1b5b0:	9801      	ldr	r0, [sp, #4]
   1b5b2:	f7ff fef8 	bl	1b3a6 <join_mcast_solicit_node>
}
   1b5b6:	e7eb      	b.n	1b590 <dad_timeout+0x24>
   1b5b8:	f060000d 	.word	0xf060000d

0001b5bc <net_if_ipv6_addr_update_lifetime>:
{
   1b5bc:	b508      	push	{r3, lr}
   1b5be:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b5c2:	fb02 f201 	mul.w	r2, r2, r1
   1b5c6:	f100 0114 	add.w	r1, r0, #20
   1b5ca:	4802      	ldr	r0, [pc, #8]	; (1b5d4 <net_if_ipv6_addr_update_lifetime+0x18>)
   1b5cc:	f00e fd66 	bl	2a09c <k_delayed_work_submit_to_queue>
   1b5d0:	bd08      	pop	{r3, pc}
   1b5d2:	bf00      	nop
   1b5d4:	20002c78 	.word	0x20002c78

0001b5d8 <net_if_ipv6_addr_add>:
{
   1b5d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b5dc:	b084      	sub	sp, #16
   1b5de:	4605      	mov	r5, r0
   1b5e0:	460e      	mov	r6, r1
   1b5e2:	4690      	mov	r8, r2
   1b5e4:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1b5e6:	f7ff fe29 	bl	1b23c <ipv6_addr_find>
	if (ifaddr) {
   1b5ea:	4604      	mov	r4, r0
   1b5ec:	b118      	cbz	r0, 1b5f6 <net_if_ipv6_addr_add+0x1e>
}
   1b5ee:	4620      	mov	r0, r4
   1b5f0:	b004      	add	sp, #16
   1b5f2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b5f6:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b5f8:	2b02      	cmp	r3, #2
   1b5fa:	dcf8      	bgt.n	1b5ee <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1b5fc:	226c      	movs	r2, #108	; 0x6c
   1b5fe:	fb02 5203 	mla	r2, r2, r3, r5
   1b602:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b606:	b10a      	cbz	r2, 1b60c <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b608:	3301      	adds	r3, #1
   1b60a:	e7f5      	b.n	1b5f8 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1b60c:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1b610:	fb0e fe03 	mul.w	lr, lr, r3
   1b614:	f10e 0e20 	add.w	lr, lr, #32
   1b618:	44ae      	add	lr, r5
   1b61a:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1b61e:	2301      	movs	r3, #1
   1b620:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1b624:	230a      	movs	r3, #10
   1b626:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1b62a:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1b62e:	46ec      	mov	ip, sp
   1b630:	6830      	ldr	r0, [r6, #0]
   1b632:	6871      	ldr	r1, [r6, #4]
   1b634:	68b2      	ldr	r2, [r6, #8]
   1b636:	68f3      	ldr	r3, [r6, #12]
   1b638:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1b63c:	466e      	mov	r6, sp
   1b63e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1b640:	f8ce 0010 	str.w	r0, [lr, #16]
   1b644:	f8ce 1014 	str.w	r1, [lr, #20]
   1b648:	f8ce 2018 	str.w	r2, [lr, #24]
   1b64c:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1b650:	4910      	ldr	r1, [pc, #64]	; (1b694 <net_if_ipv6_addr_add+0xbc>)
   1b652:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1b656:	f00e fca9 	bl	29fac <k_delayed_work_init>
	if (vlifetime) {
   1b65a:	b96f      	cbnz	r7, 1b678 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1b65c:	2301      	movs	r3, #1
   1b65e:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b662:	4621      	mov	r1, r4
   1b664:	4628      	mov	r0, r5
   1b666:	f7ff fe3b 	bl	1b2e0 <net_if_ipv6_start_dad>
   1b66a:	2300      	movs	r3, #0
   1b66c:	461a      	mov	r2, r3
   1b66e:	4629      	mov	r1, r5
   1b670:	4809      	ldr	r0, [pc, #36]	; (1b698 <net_if_ipv6_addr_add+0xc0>)
   1b672:	f007 fd61 	bl	23138 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1b676:	e7ba      	b.n	1b5ee <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1b678:	2300      	movs	r3, #0
   1b67a:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1b67e:	4907      	ldr	r1, [pc, #28]	; (1b69c <net_if_ipv6_addr_add+0xc4>)
   1b680:	f104 0014 	add.w	r0, r4, #20
   1b684:	f00e fc92 	bl	29fac <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1b688:	4639      	mov	r1, r7
   1b68a:	4620      	mov	r0, r4
   1b68c:	f7ff ff96 	bl	1b5bc <net_if_ipv6_addr_update_lifetime>
   1b690:	e7e7      	b.n	1b662 <net_if_ipv6_addr_add+0x8a>
   1b692:	bf00      	nop
   1b694:	0001b56d 	.word	0x0001b56d
   1b698:	f0600001 	.word	0xf0600001
   1b69c:	0001b225 	.word	0x0001b225

0001b6a0 <net_if_start_dad>:
{
   1b6a0:	b570      	push	{r4, r5, r6, lr}
   1b6a2:	b084      	sub	sp, #16
   1b6a4:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1b6a6:	2300      	movs	r3, #0
   1b6a8:	9302      	str	r3, [sp, #8]
   1b6aa:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1b6ac:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1b6b0:	22fe      	movs	r2, #254	; 0xfe
   1b6b2:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1b6b6:	2280      	movs	r2, #128	; 0x80
   1b6b8:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1b6bc:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1b6c0:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1b6c2:	7922      	ldrb	r2, [r4, #4]
   1b6c4:	2a06      	cmp	r2, #6
   1b6c6:	d020      	beq.n	1b70a <net_if_start_dad+0x6a>
   1b6c8:	2a08      	cmp	r2, #8
   1b6ca:	d044      	beq.n	1b756 <net_if_start_dad+0xb6>
   1b6cc:	2a02      	cmp	r2, #2
   1b6ce:	d008      	beq.n	1b6e2 <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1b6d0:	2300      	movs	r3, #0
   1b6d2:	2201      	movs	r2, #1
   1b6d4:	4669      	mov	r1, sp
   1b6d6:	4628      	mov	r0, r5
   1b6d8:	f7ff ff7e 	bl	1b5d8 <net_if_ipv6_addr_add>
   1b6dc:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b6de:	2400      	movs	r4, #0
   1b6e0:	e045      	b.n	1b76e <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1b6e2:	7963      	ldrb	r3, [r4, #5]
   1b6e4:	2b01      	cmp	r3, #1
   1b6e6:	d1f3      	bne.n	1b6d0 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1b6e8:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1b6ea:	22ff      	movs	r2, #255	; 0xff
   1b6ec:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1b6f0:	22fe      	movs	r2, #254	; 0xfe
   1b6f2:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1b6f6:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1b6fa:	6903      	ldr	r3, [r0, #16]
   1b6fc:	781a      	ldrb	r2, [r3, #0]
   1b6fe:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1b702:	785b      	ldrb	r3, [r3, #1]
   1b704:	f88d 300f 	strb.w	r3, [sp, #15]
   1b708:	e7e2      	b.n	1b6d0 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1b70a:	2203      	movs	r2, #3
   1b70c:	6901      	ldr	r1, [r0, #16]
   1b70e:	a802      	add	r0, sp, #8
   1b710:	f7e4 fdd6 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1b714:	23ff      	movs	r3, #255	; 0xff
   1b716:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1b71a:	23fe      	movs	r3, #254	; 0xfe
   1b71c:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1b720:	6929      	ldr	r1, [r5, #16]
   1b722:	2203      	movs	r2, #3
   1b724:	4411      	add	r1, r2
   1b726:	f10d 000d 	add.w	r0, sp, #13
   1b72a:	f7e4 fdc9 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1b72e:	7963      	ldrb	r3, [r4, #5]
   1b730:	2b02      	cmp	r3, #2
   1b732:	d009      	beq.n	1b748 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1b734:	7963      	ldrb	r3, [r4, #5]
   1b736:	2b03      	cmp	r3, #3
   1b738:	d1ca      	bne.n	1b6d0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b73a:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b73e:	f083 0302 	eor.w	r3, r3, #2
   1b742:	f88d 3008 	strb.w	r3, [sp, #8]
   1b746:	e7c3      	b.n	1b6d0 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1b748:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b74c:	f083 0302 	eor.w	r3, r3, #2
   1b750:	f88d 3008 	strb.w	r3, [sp, #8]
   1b754:	e7ee      	b.n	1b734 <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1b756:	6901      	ldr	r1, [r0, #16]
   1b758:	a802      	add	r0, sp, #8
   1b75a:	f7e4 fdb1 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1b75e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1b762:	f083 0302 	eor.w	r3, r3, #2
   1b766:	f88d 3008 	strb.w	r3, [sp, #8]
   1b76a:	e7b1      	b.n	1b6d0 <net_if_start_dad+0x30>
   1b76c:	3401      	adds	r4, #1
   1b76e:	2c02      	cmp	r4, #2
   1b770:	dc18      	bgt.n	1b7a4 <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1b772:	236c      	movs	r3, #108	; 0x6c
   1b774:	fb03 5304 	mla	r3, r3, r4, r5
   1b778:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b77c:	2b00      	cmp	r3, #0
   1b77e:	d0f5      	beq.n	1b76c <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b780:	236c      	movs	r3, #108	; 0x6c
   1b782:	fb03 5304 	mla	r3, r3, r4, r5
   1b786:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1b788:	2b0a      	cmp	r3, #10
   1b78a:	d1ef      	bne.n	1b76c <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1b78c:	216c      	movs	r1, #108	; 0x6c
   1b78e:	fb01 f104 	mul.w	r1, r1, r4
   1b792:	3120      	adds	r1, #32
   1b794:	4429      	add	r1, r5
   1b796:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1b798:	428e      	cmp	r6, r1
   1b79a:	d0e7      	beq.n	1b76c <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1b79c:	4628      	mov	r0, r5
   1b79e:	f7ff fd9f 	bl	1b2e0 <net_if_ipv6_start_dad>
   1b7a2:	e7e3      	b.n	1b76c <net_if_start_dad+0xcc>
}
   1b7a4:	b004      	add	sp, #16
   1b7a6:	bd70      	pop	{r4, r5, r6, pc}

0001b7a8 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1b7a8:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1b7aa:	2bff      	cmp	r3, #255	; 0xff
   1b7ac:	d134      	bne.n	1b818 <net_if_ipv6_maddr_add+0x70>
{
   1b7ae:	b570      	push	{r4, r5, r6, lr}
   1b7b0:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b7b2:	2c04      	cmp	r4, #4
   1b7b4:	dc2e      	bgt.n	1b814 <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1b7b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b7ba:	00d3      	lsls	r3, r2, #3
   1b7bc:	4403      	add	r3, r0
   1b7be:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b7c2:	f013 0f01 	tst.w	r3, #1
   1b7c6:	d001      	beq.n	1b7cc <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b7c8:	3401      	adds	r4, #1
   1b7ca:	e7f2      	b.n	1b7b2 <net_if_ipv6_maddr_add+0xa>
   1b7cc:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1b7ce:	0066      	lsls	r6, r4, #1
   1b7d0:	1932      	adds	r2, r6, r4
   1b7d2:	00d3      	lsls	r3, r2, #3
   1b7d4:	4403      	add	r3, r0
   1b7d6:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b7da:	f042 0201 	orr.w	r2, r2, #1
   1b7de:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1b7e2:	220a      	movs	r2, #10
   1b7e4:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1b7e8:	1933      	adds	r3, r6, r4
   1b7ea:	00d8      	lsls	r0, r3, #3
   1b7ec:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b7f0:	4428      	add	r0, r5
   1b7f2:	2210      	movs	r2, #16
   1b7f4:	3018      	adds	r0, #24
   1b7f6:	f7e4 fd63 	bl	2c0 <memcpy>
   1b7fa:	2300      	movs	r3, #0
   1b7fc:	461a      	mov	r2, r3
   1b7fe:	4629      	mov	r1, r5
   1b800:	4806      	ldr	r0, [pc, #24]	; (1b81c <net_if_ipv6_maddr_add+0x74>)
   1b802:	f007 fc99 	bl	23138 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1b806:	4434      	add	r4, r6
   1b808:	00e0      	lsls	r0, r4, #3
   1b80a:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1b80e:	4428      	add	r0, r5
   1b810:	3010      	adds	r0, #16
   1b812:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1b814:	2000      	movs	r0, #0
   1b816:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1b818:	2000      	movs	r0, #0
   1b81a:	4770      	bx	lr
   1b81c:	f0600003 	.word	0xf0600003

0001b820 <net_if_ipv6_maddr_rm>:
{
   1b820:	b570      	push	{r4, r5, r6, lr}
   1b822:	4605      	mov	r5, r0
   1b824:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b826:	2400      	movs	r4, #0
   1b828:	e000      	b.n	1b82c <net_if_ipv6_maddr_rm+0xc>
   1b82a:	3401      	adds	r4, #1
   1b82c:	2c04      	cmp	r4, #4
   1b82e:	dc25      	bgt.n	1b87c <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1b830:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b834:	00d3      	lsls	r3, r2, #3
   1b836:	461a      	mov	r2, r3
   1b838:	442b      	add	r3, r5
   1b83a:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b83e:	f013 0f01 	tst.w	r3, #1
   1b842:	d0f2      	beq.n	1b82a <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1b844:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1b848:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b84a:	2210      	movs	r2, #16
   1b84c:	4631      	mov	r1, r6
   1b84e:	3018      	adds	r0, #24
   1b850:	f00e fffa 	bl	2a848 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b854:	2800      	cmp	r0, #0
   1b856:	d1e8      	bne.n	1b82a <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1b858:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b85c:	00e3      	lsls	r3, r4, #3
   1b85e:	442b      	add	r3, r5
   1b860:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1b864:	f36f 0200 	bfc	r2, #0, #1
   1b868:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1b86c:	2300      	movs	r3, #0
   1b86e:	461a      	mov	r2, r3
   1b870:	4629      	mov	r1, r5
   1b872:	4803      	ldr	r0, [pc, #12]	; (1b880 <net_if_ipv6_maddr_rm+0x60>)
   1b874:	f007 fc60 	bl	23138 <net_mgmt_event_notify_with_info>
		return true;
   1b878:	2001      	movs	r0, #1
   1b87a:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1b87c:	2000      	movs	r0, #0
}
   1b87e:	bd70      	pop	{r4, r5, r6, pc}
   1b880:	f0600004 	.word	0xf0600004

0001b884 <net_if_ipv6_addr_rm>:
{
   1b884:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b888:	b084      	sub	sp, #16
   1b88a:	4606      	mov	r6, r0
   1b88c:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b88e:	2400      	movs	r4, #0
   1b890:	e009      	b.n	1b8a6 <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1b892:	206c      	movs	r0, #108	; 0x6c
   1b894:	fb00 f004 	mul.w	r0, r0, r4
   1b898:	3030      	adds	r0, #48	; 0x30
   1b89a:	4430      	add	r0, r6
   1b89c:	3010      	adds	r0, #16
   1b89e:	f00e fba3 	bl	29fe8 <k_delayed_work_cancel>
   1b8a2:	e01c      	b.n	1b8de <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b8a4:	3401      	adds	r4, #1
   1b8a6:	2c02      	cmp	r4, #2
   1b8a8:	dc46      	bgt.n	1b938 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1b8aa:	236c      	movs	r3, #108	; 0x6c
   1b8ac:	fb03 6304 	mla	r3, r3, r4, r6
   1b8b0:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1b8b4:	2d00      	cmp	r5, #0
   1b8b6:	d0f5      	beq.n	1b8a4 <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1b8b8:	206c      	movs	r0, #108	; 0x6c
   1b8ba:	fb00 f004 	mul.w	r0, r0, r4
   1b8be:	3020      	adds	r0, #32
   1b8c0:	4430      	add	r0, r6
   1b8c2:	2210      	movs	r2, #16
   1b8c4:	4639      	mov	r1, r7
   1b8c6:	4410      	add	r0, r2
   1b8c8:	f00e ffbe 	bl	2a848 <memcmp>
		if (!net_ipv6_addr_cmp(
   1b8cc:	2800      	cmp	r0, #0
   1b8ce:	d1e9      	bne.n	1b8a4 <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1b8d0:	236c      	movs	r3, #108	; 0x6c
   1b8d2:	fb03 6304 	mla	r3, r3, r4, r6
   1b8d6:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1b8da:	2b00      	cmp	r3, #0
   1b8dc:	d0d9      	beq.n	1b892 <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1b8de:	236c      	movs	r3, #108	; 0x6c
   1b8e0:	fb03 6404 	mla	r4, r3, r4, r6
   1b8e4:	f04f 0800 	mov.w	r8, #0
   1b8e8:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1b8ec:	23ff      	movs	r3, #255	; 0xff
   1b8ee:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1b8f2:	2202      	movs	r2, #2
   1b8f4:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1b8f8:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1b8fc:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1b900:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1b904:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1b908:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1b90c:	2201      	movs	r2, #1
   1b90e:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1b912:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1b916:	7b7b      	ldrb	r3, [r7, #13]
   1b918:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1b91c:	89fb      	ldrh	r3, [r7, #14]
   1b91e:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1b922:	4669      	mov	r1, sp
   1b924:	4630      	mov	r0, r6
   1b926:	f7ff ff7b 	bl	1b820 <net_if_ipv6_maddr_rm>
   1b92a:	4643      	mov	r3, r8
   1b92c:	4642      	mov	r2, r8
   1b92e:	4631      	mov	r1, r6
   1b930:	4804      	ldr	r0, [pc, #16]	; (1b944 <net_if_ipv6_addr_rm+0xc0>)
   1b932:	f007 fc01 	bl	23138 <net_mgmt_event_notify_with_info>
   1b936:	e000      	b.n	1b93a <net_if_ipv6_addr_rm+0xb6>
	return false;
   1b938:	2500      	movs	r5, #0
}
   1b93a:	4628      	mov	r0, r5
   1b93c:	b004      	add	sp, #16
   1b93e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b942:	bf00      	nop
   1b944:	f0600002 	.word	0xf0600002

0001b948 <net_if_ipv6_dad_failed>:
{
   1b948:	b510      	push	{r4, lr}
   1b94a:	b082      	sub	sp, #8
   1b94c:	ab02      	add	r3, sp, #8
   1b94e:	f843 0d04 	str.w	r0, [r3, #-4]!
   1b952:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1b954:	4619      	mov	r1, r3
   1b956:	4620      	mov	r0, r4
   1b958:	f7ff fdc8 	bl	1b4ec <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1b95c:	b160      	cbz	r0, 1b978 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1b95e:	303c      	adds	r0, #60	; 0x3c
   1b960:	f00e fb42 	bl	29fe8 <k_delayed_work_cancel>
   1b964:	2300      	movs	r3, #0
   1b966:	461a      	mov	r2, r3
   1b968:	9901      	ldr	r1, [sp, #4]
   1b96a:	4804      	ldr	r0, [pc, #16]	; (1b97c <net_if_ipv6_dad_failed+0x34>)
   1b96c:	f007 fbe4 	bl	23138 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1b970:	4621      	mov	r1, r4
   1b972:	9801      	ldr	r0, [sp, #4]
   1b974:	f7ff ff86 	bl	1b884 <net_if_ipv6_addr_rm>
}
   1b978:	b002      	add	sp, #8
   1b97a:	bd10      	pop	{r4, pc}
   1b97c:	f060000e 	.word	0xf060000e

0001b980 <net_if_ipv6_maddr_lookup>:
{
   1b980:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b982:	4607      	mov	r7, r0
   1b984:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b986:	4d22      	ldr	r5, [pc, #136]	; (1ba10 <net_if_ipv6_maddr_lookup+0x90>)
   1b988:	e034      	b.n	1b9f4 <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1b98a:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1b98c:	bb13      	cbnz	r3, 1b9d4 <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1b98e:	3401      	adds	r4, #1
   1b990:	2c04      	cmp	r4, #4
   1b992:	dc2d      	bgt.n	1b9f0 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1b994:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b998:	00d3      	lsls	r3, r2, #3
   1b99a:	442b      	add	r3, r5
   1b99c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1b9a0:	f013 0f01 	tst.w	r3, #1
   1b9a4:	d0f3      	beq.n	1b98e <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1b9a6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b9aa:	00d3      	lsls	r3, r2, #3
   1b9ac:	442b      	add	r3, r5
   1b9ae:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1b9b2:	2b0a      	cmp	r3, #10
   1b9b4:	d1eb      	bne.n	1b98e <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1b9b6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1b9ba:	00d3      	lsls	r3, r2, #3
   1b9bc:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1b9c0:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1b9c2:	2210      	movs	r2, #16
   1b9c4:	3118      	adds	r1, #24
   1b9c6:	4638      	mov	r0, r7
   1b9c8:	f00e ff3e 	bl	2a848 <memcmp>
   1b9cc:	2800      	cmp	r0, #0
   1b9ce:	d1dc      	bne.n	1b98a <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1b9d0:	2301      	movs	r3, #1
   1b9d2:	e7db      	b.n	1b98c <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1b9d4:	b106      	cbz	r6, 1b9d8 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1b9d6:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1b9d8:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1b9dc:	00e3      	lsls	r3, r4, #3
   1b9de:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1b9e2:	4428      	add	r0, r5
   1b9e4:	3010      	adds	r0, #16
   1b9e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b9e8:	2400      	movs	r4, #0
   1b9ea:	e7d1      	b.n	1b990 <net_if_ipv6_maddr_lookup+0x10>
   1b9ec:	2400      	movs	r4, #0
   1b9ee:	e7cf      	b.n	1b990 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b9f0:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b9f4:	4b07      	ldr	r3, [pc, #28]	; (1ba14 <net_if_ipv6_maddr_lookup+0x94>)
   1b9f6:	429d      	cmp	r5, r3
   1b9f8:	d008      	beq.n	1ba0c <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1b9fa:	2e00      	cmp	r6, #0
   1b9fc:	d0f4      	beq.n	1b9e8 <net_if_ipv6_maddr_lookup+0x68>
   1b9fe:	6833      	ldr	r3, [r6, #0]
   1ba00:	2b00      	cmp	r3, #0
   1ba02:	d0f3      	beq.n	1b9ec <net_if_ipv6_maddr_lookup+0x6c>
   1ba04:	429d      	cmp	r5, r3
   1ba06:	d1f3      	bne.n	1b9f0 <net_if_ipv6_maddr_lookup+0x70>
   1ba08:	2400      	movs	r4, #0
   1ba0a:	e7c1      	b.n	1b990 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1ba0c:	2000      	movs	r0, #0
}
   1ba0e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba10:	2000d2c0 	.word	0x2000d2c0
   1ba14:	2000d560 	.word	0x2000d560

0001ba18 <net_if_mcast_monitor>:
{
   1ba18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ba1a:	4605      	mov	r5, r0
   1ba1c:	460e      	mov	r6, r1
   1ba1e:	4617      	mov	r7, r2
	return list->head;
   1ba20:	4b13      	ldr	r3, [pc, #76]	; (1ba70 <net_if_mcast_monitor+0x58>)
   1ba22:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ba24:	b11b      	cbz	r3, 1ba2e <net_if_mcast_monitor+0x16>
   1ba26:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba28:	b173      	cbz	r3, 1ba48 <net_if_mcast_monitor+0x30>
	return node->next;
   1ba2a:	681c      	ldr	r4, [r3, #0]
   1ba2c:	e00c      	b.n	1ba48 <net_if_mcast_monitor+0x30>
   1ba2e:	461c      	mov	r4, r3
   1ba30:	e00a      	b.n	1ba48 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1ba32:	689b      	ldr	r3, [r3, #8]
   1ba34:	463a      	mov	r2, r7
   1ba36:	4631      	mov	r1, r6
   1ba38:	4628      	mov	r0, r5
   1ba3a:	4798      	blx	r3
   1ba3c:	e008      	b.n	1ba50 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba3e:	4623      	mov	r3, r4
   1ba40:	e00c      	b.n	1ba5c <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ba42:	4622      	mov	r2, r4
   1ba44:	4623      	mov	r3, r4
   1ba46:	4614      	mov	r4, r2
   1ba48:	b183      	cbz	r3, 1ba6c <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1ba4a:	685a      	ldr	r2, [r3, #4]
   1ba4c:	42aa      	cmp	r2, r5
   1ba4e:	d0f0      	beq.n	1ba32 <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1ba50:	2c00      	cmp	r4, #0
   1ba52:	d0f6      	beq.n	1ba42 <net_if_mcast_monitor+0x2a>
   1ba54:	4622      	mov	r2, r4
   1ba56:	2c00      	cmp	r4, #0
   1ba58:	d0f1      	beq.n	1ba3e <net_if_mcast_monitor+0x26>
	return node->next;
   1ba5a:	6823      	ldr	r3, [r4, #0]
   1ba5c:	b113      	cbz	r3, 1ba64 <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba5e:	b11a      	cbz	r2, 1ba68 <net_if_mcast_monitor+0x50>
	return node->next;
   1ba60:	6822      	ldr	r2, [r4, #0]
   1ba62:	e7ef      	b.n	1ba44 <net_if_mcast_monitor+0x2c>
   1ba64:	2200      	movs	r2, #0
   1ba66:	e7ed      	b.n	1ba44 <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ba68:	2200      	movs	r2, #0
   1ba6a:	e7eb      	b.n	1ba44 <net_if_mcast_monitor+0x2c>
}
   1ba6c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ba6e:	bf00      	nop
   1ba70:	20001c5c 	.word	0x20001c5c

0001ba74 <net_if_ipv6_prefix_add>:
{
   1ba74:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ba78:	4605      	mov	r5, r0
   1ba7a:	460e      	mov	r6, r1
   1ba7c:	4617      	mov	r7, r2
   1ba7e:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1ba80:	f7ff fc00 	bl	1b284 <ipv6_prefix_find>
	if (if_prefix) {
   1ba84:	4604      	mov	r4, r0
   1ba86:	b110      	cbz	r0, 1ba8e <net_if_ipv6_prefix_add+0x1a>
}
   1ba88:	4620      	mov	r0, r4
   1ba8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ba8e:	2300      	movs	r3, #0
   1ba90:	e000      	b.n	1ba94 <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ba92:	3301      	adds	r3, #1
   1ba94:	2b01      	cmp	r3, #1
   1ba96:	dcf7      	bgt.n	1ba88 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1ba98:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1ba9c:	008a      	lsls	r2, r1, #2
   1ba9e:	442a      	add	r2, r5
   1baa0:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1baa4:	2a00      	cmp	r2, #0
   1baa6:	d1f4      	bne.n	1ba92 <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1baa8:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1baac:	009a      	lsls	r2, r3, #2
   1baae:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1bab2:	442c      	add	r4, r5
   1bab4:	3410      	adds	r4, #16
   1bab6:	4643      	mov	r3, r8
   1bab8:	463a      	mov	r2, r7
   1baba:	4631      	mov	r1, r6
   1babc:	4620      	mov	r0, r4
   1babe:	f7ff fc2d 	bl	1b31c <net_if_ipv6_prefix_init>
   1bac2:	2300      	movs	r3, #0
   1bac4:	461a      	mov	r2, r3
   1bac6:	4629      	mov	r1, r5
   1bac8:	4801      	ldr	r0, [pc, #4]	; (1bad0 <net_if_ipv6_prefix_add+0x5c>)
   1baca:	f007 fb35 	bl	23138 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1bace:	e7db      	b.n	1ba88 <net_if_ipv6_prefix_add+0x14>
   1bad0:	f0600005 	.word	0xf0600005

0001bad4 <net_if_ipv6_prefix_lookup>:
{
   1bad4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bad8:	4605      	mov	r5, r0
   1bada:	4688      	mov	r8, r1
   1badc:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bade:	2400      	movs	r4, #0
   1bae0:	e01d      	b.n	1bb1e <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1bae2:	4652      	mov	r2, sl
   1bae4:	4641      	mov	r1, r8
   1bae6:	4648      	mov	r0, r9
   1bae8:	f00e feae 	bl	2a848 <memcmp>
   1baec:	b9a0      	cbnz	r0, 1bb18 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1baee:	f1bb 0f00 	cmp.w	fp, #0
   1baf2:	d012      	beq.n	1bb1a <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1baf4:	f1cb 0208 	rsb	r2, fp, #8
   1baf8:	23ff      	movs	r3, #255	; 0xff
   1bafa:	4093      	lsls	r3, r2
   1bafc:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1bb00:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1bb04:	f819 200a 	ldrb.w	r2, [r9, sl]
   1bb08:	f818 100a 	ldrb.w	r1, [r8, sl]
   1bb0c:	404a      	eors	r2, r1
   1bb0e:	4213      	tst	r3, r2
   1bb10:	bf0c      	ite	eq
   1bb12:	2601      	moveq	r6, #1
   1bb14:	2600      	movne	r6, #0
   1bb16:	e000      	b.n	1bb1a <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1bb18:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1bb1a:	b9e6      	cbnz	r6, 1bb56 <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bb1c:	3401      	adds	r4, #1
   1bb1e:	2c01      	cmp	r4, #1
   1bb20:	dc22      	bgt.n	1bb68 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1bb22:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bb26:	0093      	lsls	r3, r2, #2
   1bb28:	442b      	add	r3, r5
   1bb2a:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1bb2e:	2e00      	cmp	r6, #0
   1bb30:	d0f4      	beq.n	1bb1c <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1bb32:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bb36:	0093      	lsls	r3, r2, #2
   1bb38:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1bb3c:	442b      	add	r3, r5
   1bb3e:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1bb42:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1bb46:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1bb4a:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1bb4e:	2f80      	cmp	r7, #128	; 0x80
   1bb50:	d9c7      	bls.n	1bae2 <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1bb52:	2600      	movs	r6, #0
   1bb54:	e7e1      	b.n	1bb1a <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1bb56:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1bb5a:	00a3      	lsls	r3, r4, #2
   1bb5c:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1bb60:	4428      	add	r0, r5
   1bb62:	3010      	adds	r0, #16
   1bb64:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1bb68:	2000      	movs	r0, #0
}
   1bb6a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001bb70 <net_if_ipv6_addr_onlink>:
{
   1bb70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1bb74:	4606      	mov	r6, r0
   1bb76:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bb78:	4d2d      	ldr	r5, [pc, #180]	; (1bc30 <net_if_ipv6_addr_onlink+0xc0>)
   1bb7a:	e048      	b.n	1bc0e <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1bb7c:	465a      	mov	r2, fp
   1bb7e:	4641      	mov	r1, r8
   1bb80:	4648      	mov	r0, r9
   1bb82:	f00e fe61 	bl	2a848 <memcmp>
   1bb86:	b9a8      	cbnz	r0, 1bbb4 <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1bb88:	f1ba 0f00 	cmp.w	sl, #0
   1bb8c:	d013      	beq.n	1bbb6 <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1bb8e:	f1ca 0208 	rsb	r2, sl, #8
   1bb92:	23ff      	movs	r3, #255	; 0xff
   1bb94:	4093      	lsls	r3, r2
   1bb96:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1bb9a:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1bb9e:	f819 300b 	ldrb.w	r3, [r9, fp]
   1bba2:	f818 200b 	ldrb.w	r2, [r8, fp]
   1bba6:	4053      	eors	r3, r2
   1bba8:	ea1a 0f03 	tst.w	sl, r3
   1bbac:	bf0c      	ite	eq
   1bbae:	2701      	moveq	r7, #1
   1bbb0:	2700      	movne	r7, #0
   1bbb2:	e000      	b.n	1bbb6 <net_if_ipv6_addr_onlink+0x46>
		return false;
   1bbb4:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1bbb6:	bb0f      	cbnz	r7, 1bbfc <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bbb8:	3401      	adds	r4, #1
   1bbba:	2c01      	cmp	r4, #1
   1bbbc:	dc25      	bgt.n	1bc0a <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1bbbe:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bbc2:	0093      	lsls	r3, r2, #2
   1bbc4:	442b      	add	r3, r5
   1bbc6:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1bbca:	2f00      	cmp	r7, #0
   1bbcc:	d0f4      	beq.n	1bbb8 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1bbce:	0122      	lsls	r2, r4, #4
   1bbd0:	1b11      	subs	r1, r2, r4
   1bbd2:	008b      	lsls	r3, r1, #2
   1bbd4:	4619      	mov	r1, r3
   1bbd6:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1bbda:	442b      	add	r3, r5
   1bbdc:	f103 0910 	add.w	r9, r3, #16
   1bbe0:	460a      	mov	r2, r1
   1bbe2:	442a      	add	r2, r5
   1bbe4:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1bbe8:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1bbec:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1bbf0:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1bbf4:	2b80      	cmp	r3, #128	; 0x80
   1bbf6:	d9c1      	bls.n	1bb7c <net_if_ipv6_addr_onlink+0xc>
		return false;
   1bbf8:	2700      	movs	r7, #0
   1bbfa:	e7dc      	b.n	1bbb6 <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1bbfc:	b1a6      	cbz	r6, 1bc28 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1bbfe:	6035      	str	r5, [r6, #0]
   1bc00:	e012      	b.n	1bc28 <net_if_ipv6_addr_onlink+0xb8>
   1bc02:	2400      	movs	r4, #0
   1bc04:	e7d9      	b.n	1bbba <net_if_ipv6_addr_onlink+0x4a>
   1bc06:	2400      	movs	r4, #0
   1bc08:	e7d7      	b.n	1bbba <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1bc0a:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1bc0e:	4b09      	ldr	r3, [pc, #36]	; (1bc34 <net_if_ipv6_addr_onlink+0xc4>)
   1bc10:	429d      	cmp	r5, r3
   1bc12:	d008      	beq.n	1bc26 <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1bc14:	2e00      	cmp	r6, #0
   1bc16:	d0f4      	beq.n	1bc02 <net_if_ipv6_addr_onlink+0x92>
   1bc18:	6833      	ldr	r3, [r6, #0]
   1bc1a:	2b00      	cmp	r3, #0
   1bc1c:	d0f3      	beq.n	1bc06 <net_if_ipv6_addr_onlink+0x96>
   1bc1e:	429d      	cmp	r5, r3
   1bc20:	d1f3      	bne.n	1bc0a <net_if_ipv6_addr_onlink+0x9a>
   1bc22:	2400      	movs	r4, #0
   1bc24:	e7c9      	b.n	1bbba <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1bc26:	2700      	movs	r7, #0
}
   1bc28:	4638      	mov	r0, r7
   1bc2a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1bc2e:	bf00      	nop
   1bc30:	2000d2c0 	.word	0x2000d2c0
   1bc34:	2000d560 	.word	0x2000d560

0001bc38 <net_if_ipv6_prefix_set_timer>:
{
   1bc38:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1bc3a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bc3e:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1bc42:	4b05      	ldr	r3, [pc, #20]	; (1bc58 <net_if_ipv6_prefix_set_timer+0x20>)
   1bc44:	4299      	cmp	r1, r3
   1bc46:	d901      	bls.n	1bc4c <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1bc48:	f06f 0201 	mvn.w	r2, #1
   1bc4c:	4601      	mov	r1, r0
   1bc4e:	4803      	ldr	r0, [pc, #12]	; (1bc5c <net_if_ipv6_prefix_set_timer+0x24>)
   1bc50:	f00e fa24 	bl	2a09c <k_delayed_work_submit_to_queue>
   1bc54:	bd08      	pop	{r3, pc}
   1bc56:	bf00      	nop
   1bc58:	00418937 	.word	0x00418937
   1bc5c:	20002c78 	.word	0x20002c78

0001bc60 <net_if_ipv6_prefix_unset_timer>:
{
   1bc60:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1bc62:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1bc66:	b903      	cbnz	r3, 1bc6a <net_if_ipv6_prefix_unset_timer+0xa>
   1bc68:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1bc6a:	f00e f9bd 	bl	29fe8 <k_delayed_work_cancel>
   1bc6e:	e7fb      	b.n	1bc68 <net_if_ipv6_prefix_unset_timer+0x8>

0001bc70 <net_if_ipv6_prefix_rm>:
{
   1bc70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bc74:	4606      	mov	r6, r0
   1bc76:	460f      	mov	r7, r1
   1bc78:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1bc7a:	2400      	movs	r4, #0
   1bc7c:	e000      	b.n	1bc80 <net_if_ipv6_prefix_rm+0x10>
   1bc7e:	3401      	adds	r4, #1
   1bc80:	2c01      	cmp	r4, #1
   1bc82:	dc2f      	bgt.n	1bce4 <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1bc84:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bc88:	0093      	lsls	r3, r2, #2
   1bc8a:	461a      	mov	r2, r3
   1bc8c:	4433      	add	r3, r6
   1bc8e:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1bc92:	2d00      	cmp	r5, #0
   1bc94:	d0f3      	beq.n	1bc7e <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bc96:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1bc9a:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bc9c:	2210      	movs	r2, #16
   1bc9e:	4639      	mov	r1, r7
   1bca0:	4410      	add	r0, r2
   1bca2:	f00e fdd1 	bl	2a848 <memcmp>
   1bca6:	2800      	cmp	r0, #0
   1bca8:	d1e9      	bne.n	1bc7e <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1bcaa:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1bcae:	0093      	lsls	r3, r2, #2
   1bcb0:	4433      	add	r3, r6
   1bcb2:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1bcb6:	4543      	cmp	r3, r8
   1bcb8:	d1e1      	bne.n	1bc7e <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1bcba:	0127      	lsls	r7, r4, #4
   1bcbc:	1b3a      	subs	r2, r7, r4
   1bcbe:	0093      	lsls	r3, r2, #2
   1bcc0:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1bcc4:	18f0      	adds	r0, r6, r3
   1bcc6:	3010      	adds	r0, #16
   1bcc8:	f7ff ffca 	bl	1bc60 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1bccc:	1b3c      	subs	r4, r7, r4
   1bcce:	00a3      	lsls	r3, r4, #2
   1bcd0:	4433      	add	r3, r6
   1bcd2:	2200      	movs	r2, #0
   1bcd4:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1bcd8:	4613      	mov	r3, r2
   1bcda:	4631      	mov	r1, r6
   1bcdc:	4803      	ldr	r0, [pc, #12]	; (1bcec <net_if_ipv6_prefix_rm+0x7c>)
   1bcde:	f007 fa2b 	bl	23138 <net_mgmt_event_notify_with_info>
		return true;
   1bce2:	e000      	b.n	1bce6 <net_if_ipv6_prefix_rm+0x76>
	return false;
   1bce4:	2500      	movs	r5, #0
}
   1bce6:	4628      	mov	r0, r5
   1bce8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1bcec:	f0600006 	.word	0xf0600006

0001bcf0 <net_if_ipv6_router_lookup>:
{
   1bcf0:	b570      	push	{r4, r5, r6, lr}
   1bcf2:	4605      	mov	r5, r0
   1bcf4:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bcf6:	2400      	movs	r4, #0
   1bcf8:	2c00      	cmp	r4, #0
   1bcfa:	dd01      	ble.n	1bd00 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1bcfc:	2000      	movs	r0, #0
}
   1bcfe:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1bd00:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1bd04:	009a      	lsls	r2, r3, #2
   1bd06:	4b11      	ldr	r3, [pc, #68]	; (1bd4c <net_if_ipv6_router_lookup+0x5c>)
   1bd08:	4413      	add	r3, r2
   1bd0a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1bd0e:	b123      	cbz	r3, 1bd1a <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1bd10:	4b0e      	ldr	r3, [pc, #56]	; (1bd4c <net_if_ipv6_router_lookup+0x5c>)
   1bd12:	4413      	add	r3, r2
   1bd14:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1bd16:	2b0a      	cmp	r3, #10
   1bd18:	d001      	beq.n	1bd1e <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd1a:	3401      	adds	r4, #1
   1bd1c:	e7ec      	b.n	1bcf8 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1bd1e:	4b0b      	ldr	r3, [pc, #44]	; (1bd4c <net_if_ipv6_router_lookup+0x5c>)
   1bd20:	4413      	add	r3, r2
   1bd22:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1bd24:	42ab      	cmp	r3, r5
   1bd26:	d1f8      	bne.n	1bd1a <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1bd28:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1bd2c:	0093      	lsls	r3, r2, #2
   1bd2e:	3328      	adds	r3, #40	; 0x28
   1bd30:	4a06      	ldr	r2, [pc, #24]	; (1bd4c <net_if_ipv6_router_lookup+0x5c>)
   1bd32:	4413      	add	r3, r2
   1bd34:	2210      	movs	r2, #16
   1bd36:	4631      	mov	r1, r6
   1bd38:	1d18      	adds	r0, r3, #4
   1bd3a:	f00e fd85 	bl	2a848 <memcmp>
   1bd3e:	2800      	cmp	r0, #0
   1bd40:	d1eb      	bne.n	1bd1a <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1bd42:	2344      	movs	r3, #68	; 0x44
   1bd44:	4801      	ldr	r0, [pc, #4]	; (1bd4c <net_if_ipv6_router_lookup+0x5c>)
   1bd46:	fb03 0004 	mla	r0, r3, r4, r0
   1bd4a:	bd70      	pop	{r4, r5, r6, pc}
   1bd4c:	20001c64 	.word	0x20001c64

0001bd50 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd50:	2300      	movs	r3, #0
   1bd52:	2b00      	cmp	r3, #0
   1bd54:	dd01      	ble.n	1bd5a <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1bd56:	2000      	movs	r0, #0
}
   1bd58:	4770      	bx	lr
		if (!routers[i].is_used ||
   1bd5a:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1bd5e:	0091      	lsls	r1, r2, #2
   1bd60:	4a0e      	ldr	r2, [pc, #56]	; (1bd9c <net_if_ipv6_router_find_default+0x4c>)
   1bd62:	440a      	add	r2, r1
   1bd64:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1bd68:	b14a      	cbz	r2, 1bd7e <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1bd6a:	4a0c      	ldr	r2, [pc, #48]	; (1bd9c <net_if_ipv6_router_find_default+0x4c>)
   1bd6c:	440a      	add	r2, r1
   1bd6e:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1bd72:	b122      	cbz	r2, 1bd7e <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1bd74:	4a09      	ldr	r2, [pc, #36]	; (1bd9c <net_if_ipv6_router_find_default+0x4c>)
   1bd76:	440a      	add	r2, r1
   1bd78:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1bd7a:	2a0a      	cmp	r2, #10
   1bd7c:	d001      	beq.n	1bd82 <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bd7e:	3301      	adds	r3, #1
   1bd80:	e7e7      	b.n	1bd52 <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1bd82:	b120      	cbz	r0, 1bd8e <net_if_ipv6_router_find_default+0x3e>
   1bd84:	4a05      	ldr	r2, [pc, #20]	; (1bd9c <net_if_ipv6_router_find_default+0x4c>)
   1bd86:	440a      	add	r2, r1
   1bd88:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1bd8a:	4290      	cmp	r0, r2
   1bd8c:	d1f7      	bne.n	1bd7e <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1bd8e:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bd92:	009a      	lsls	r2, r3, #2
   1bd94:	4801      	ldr	r0, [pc, #4]	; (1bd9c <net_if_ipv6_router_find_default+0x4c>)
   1bd96:	4410      	add	r0, r2
   1bd98:	4770      	bx	lr
   1bd9a:	bf00      	nop
   1bd9c:	20001c64 	.word	0x20001c64

0001bda0 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1bda0:	b508      	push	{r3, lr}
   1bda2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1bda6:	fb02 f201 	mul.w	r2, r2, r1
   1bdaa:	4601      	mov	r1, r0
   1bdac:	4801      	ldr	r0, [pc, #4]	; (1bdb4 <net_if_ipv6_router_update_lifetime+0x14>)
   1bdae:	f00e f975 	bl	2a09c <k_delayed_work_submit_to_queue>
   1bdb2:	bd08      	pop	{r3, pc}
   1bdb4:	20002c78 	.word	0x20002c78

0001bdb8 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1bdb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bdbc:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bdbe:	2300      	movs	r3, #0
   1bdc0:	2b00      	cmp	r3, #0
   1bdc2:	dd04      	ble.n	1bdce <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1bdc4:	2400      	movs	r4, #0
}
   1bdc6:	4620      	mov	r0, r4
   1bdc8:	b004      	add	sp, #16
   1bdca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1bdce:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1bdd2:	00a5      	lsls	r5, r4, #2
   1bdd4:	4c20      	ldr	r4, [pc, #128]	; (1be58 <net_if_ipv6_router_add+0xa0>)
   1bdd6:	442c      	add	r4, r5
   1bdd8:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1bddc:	b10c      	cbz	r4, 1bde2 <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1bdde:	3301      	adds	r3, #1
   1bde0:	e7ee      	b.n	1bdc0 <net_if_ipv6_router_add+0x8>
   1bde2:	4616      	mov	r6, r2
   1bde4:	460f      	mov	r7, r1
   1bde6:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1bde8:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1bdec:	009a      	lsls	r2, r3, #2
   1bdee:	4c1a      	ldr	r4, [pc, #104]	; (1be58 <net_if_ipv6_router_add+0xa0>)
   1bdf0:	4414      	add	r4, r2
	router->is_used = true;
   1bdf2:	2301      	movs	r3, #1
   1bdf4:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1bdf8:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1bdfa:	230a      	movs	r3, #10
   1bdfc:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1bdfe:	466d      	mov	r5, sp
   1be00:	6808      	ldr	r0, [r1, #0]
   1be02:	6849      	ldr	r1, [r1, #4]
   1be04:	68ba      	ldr	r2, [r7, #8]
   1be06:	68fb      	ldr	r3, [r7, #12]
   1be08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1be0a:	466d      	mov	r5, sp
   1be0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1be0e:	62e0      	str	r0, [r4, #44]	; 0x2c
   1be10:	6321      	str	r1, [r4, #48]	; 0x30
   1be12:	6362      	str	r2, [r4, #52]	; 0x34
   1be14:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1be16:	b966      	cbnz	r6, 1be32 <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1be18:	2300      	movs	r3, #0
   1be1a:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1be1e:	2301      	movs	r3, #1
   1be20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1be24:	2300      	movs	r3, #0
   1be26:	461a      	mov	r2, r3
   1be28:	4641      	mov	r1, r8
   1be2a:	480c      	ldr	r0, [pc, #48]	; (1be5c <net_if_ipv6_router_add+0xa4>)
   1be2c:	f007 f984 	bl	23138 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1be30:	e7c9      	b.n	1bdc6 <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1be32:	2301      	movs	r3, #1
   1be34:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1be38:	2300      	movs	r3, #0
   1be3a:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1be3e:	4908      	ldr	r1, [pc, #32]	; (1be60 <net_if_ipv6_router_add+0xa8>)
   1be40:	4620      	mov	r0, r4
   1be42:	f00e f8b3 	bl	29fac <k_delayed_work_init>
   1be46:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1be4a:	fb02 f206 	mul.w	r2, r2, r6
   1be4e:	4621      	mov	r1, r4
   1be50:	4804      	ldr	r0, [pc, #16]	; (1be64 <net_if_ipv6_router_add+0xac>)
   1be52:	f00e f923 	bl	2a09c <k_delayed_work_submit_to_queue>
   1be56:	e7e5      	b.n	1be24 <net_if_ipv6_router_add+0x6c>
   1be58:	20001c64 	.word	0x20001c64
   1be5c:	f0600009 	.word	0xf0600009
   1be60:	0001b235 	.word	0x0001b235
   1be64:	20002c78 	.word	0x20002c78

0001be68 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1be68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1be6c:	2400      	movs	r4, #0
   1be6e:	2c00      	cmp	r4, #0
   1be70:	dd03      	ble.n	1be7a <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1be72:	2500      	movs	r5, #0
}
   1be74:	4628      	mov	r0, r5
   1be76:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1be7a:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1be7e:	009a      	lsls	r2, r3, #2
   1be80:	4b0d      	ldr	r3, [pc, #52]	; (1beb8 <net_if_ipv6_router_rm+0x50>)
   1be82:	4413      	add	r3, r2
   1be84:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1be88:	b11d      	cbz	r5, 1be92 <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1be8a:	4b0b      	ldr	r3, [pc, #44]	; (1beb8 <net_if_ipv6_router_rm+0x50>)
   1be8c:	4413      	add	r3, r2
   1be8e:	4283      	cmp	r3, r0
   1be90:	d001      	beq.n	1be96 <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1be92:	3401      	adds	r4, #1
   1be94:	e7eb      	b.n	1be6e <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1be96:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1beb8 <net_if_ipv6_router_rm+0x50>
   1be9a:	4617      	mov	r7, r2
   1be9c:	4447      	add	r7, r8
   1be9e:	4638      	mov	r0, r7
   1bea0:	f00e f8a2 	bl	29fe8 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1bea4:	2200      	movs	r2, #0
   1bea6:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1beaa:	4613      	mov	r3, r2
   1beac:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1beae:	4803      	ldr	r0, [pc, #12]	; (1bebc <net_if_ipv6_router_rm+0x54>)
   1beb0:	f007 f942 	bl	23138 <net_mgmt_event_notify_with_info>
		return true;
   1beb4:	e7de      	b.n	1be74 <net_if_ipv6_router_rm+0xc>
   1beb6:	bf00      	nop
   1beb8:	20001c64 	.word	0x20001c64
   1bebc:	f060000a 	.word	0xf060000a

0001bec0 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1bec0:	b430      	push	{r4, r5}
   1bec2:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bec4:	2300      	movs	r3, #0
   1bec6:	e006      	b.n	1bed6 <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1bec8:	226c      	movs	r2, #108	; 0x6c
   1beca:	fb02 4203 	mla	r2, r2, r3, r4
   1bece:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1bed0:	2a0a      	cmp	r2, #10
   1bed2:	d014      	beq.n	1befe <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bed4:	3301      	adds	r3, #1
   1bed6:	2b02      	cmp	r3, #2
   1bed8:	dc1d      	bgt.n	1bf16 <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1beda:	226c      	movs	r2, #108	; 0x6c
   1bedc:	fb02 4203 	mla	r2, r2, r3, r4
   1bee0:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1bee4:	2a00      	cmp	r2, #0
   1bee6:	d0f5      	beq.n	1bed4 <net_if_ipv6_get_ll+0x14>
   1bee8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1beec:	d0ec      	beq.n	1bec8 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1beee:	226c      	movs	r2, #108	; 0x6c
   1bef0:	fb02 4203 	mla	r2, r2, r3, r4
   1bef4:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1bef8:	4291      	cmp	r1, r2
   1befa:	d1eb      	bne.n	1bed4 <net_if_ipv6_get_ll+0x14>
   1befc:	e7e4      	b.n	1bec8 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1befe:	206c      	movs	r0, #108	; 0x6c
   1bf00:	fb00 f003 	mul.w	r0, r0, r3
   1bf04:	3020      	adds	r0, #32
   1bf06:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bf08:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1bf0c:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bf10:	4295      	cmp	r5, r2
   1bf12:	d1df      	bne.n	1bed4 <net_if_ipv6_get_ll+0x14>
   1bf14:	e000      	b.n	1bf18 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1bf16:	2000      	movs	r0, #0
}
   1bf18:	bc30      	pop	{r4, r5}
   1bf1a:	4770      	bx	lr

0001bf1c <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1bf1c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1bf20:	4607      	mov	r7, r0
   1bf22:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1bf24:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1bf28:	429a      	cmp	r2, r3
   1bf2a:	f000 80d7 	beq.w	1c0dc <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1bf2e:	780b      	ldrb	r3, [r1, #0]
   1bf30:	2bff      	cmp	r3, #255	; 0xff
   1bf32:	d004      	beq.n	1bf3e <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1bf34:	f04f 0900 	mov.w	r9, #0
   1bf38:	4e74      	ldr	r6, [pc, #464]	; (1c10c <net_if_ipv6_select_src_addr+0x1f0>)
   1bf3a:	46c8      	mov	r8, r9
   1bf3c:	e05b      	b.n	1bff6 <net_if_ipv6_select_src_addr+0xda>
   1bf3e:	4c73      	ldr	r4, [pc, #460]	; (1c10c <net_if_ipv6_select_src_addr+0x1f0>)
   1bf40:	e0c0      	b.n	1c0c4 <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1bf42:	246c      	movs	r4, #108	; 0x6c
   1bf44:	fb04 640e 	mla	r4, r4, lr, r6
   1bf48:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bf4a:	2c0a      	cmp	r4, #10
   1bf4c:	d01e      	beq.n	1bf8c <net_if_ipv6_select_src_addr+0x70>
	return false;
   1bf4e:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf50:	bb8b      	cbnz	r3, 1bfb6 <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bf52:	f10e 0e01 	add.w	lr, lr, #1
   1bf56:	fa5f fe8e 	uxtb.w	lr, lr
   1bf5a:	f1be 0f02 	cmp.w	lr, #2
   1bf5e:	d846      	bhi.n	1bfee <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bf60:	46f4      	mov	ip, lr
   1bf62:	236c      	movs	r3, #108	; 0x6c
   1bf64:	fb03 f30e 	mul.w	r3, r3, lr
   1bf68:	f103 0220 	add.w	r2, r3, #32
   1bf6c:	4432      	add	r2, r6
   1bf6e:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1bf70:	4433      	add	r3, r6
   1bf72:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1bf76:	2b00      	cmp	r3, #0
   1bf78:	d0ea      	beq.n	1bf50 <net_if_ipv6_select_src_addr+0x34>
   1bf7a:	246c      	movs	r4, #108	; 0x6c
   1bf7c:	fb04 640e 	mla	r4, r4, lr, r6
   1bf80:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1bf84:	2c01      	cmp	r4, #1
   1bf86:	d0dc      	beq.n	1bf42 <net_if_ipv6_select_src_addr+0x26>
	return false;
   1bf88:	2300      	movs	r3, #0
   1bf8a:	e7e1      	b.n	1bf50 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1bf8c:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1bf8e:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1bf92:	4294      	cmp	r4, r2
   1bf94:	d1dc      	bne.n	1bf50 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1bf96:	2300      	movs	r3, #0
   1bf98:	e7da      	b.n	1bf50 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1bf9a:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1bf9c:	2300      	movs	r3, #0
   1bf9e:	2b07      	cmp	r3, #7
   1bfa0:	d81b      	bhi.n	1bfda <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1bfa2:	f015 0f80 	tst.w	r5, #128	; 0x80
   1bfa6:	d118      	bne.n	1bfda <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1bfa8:	3401      	adds	r4, #1
   1bfaa:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1bfac:	006d      	lsls	r5, r5, #1
   1bfae:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1bfb0:	3301      	adds	r3, #1
   1bfb2:	b2db      	uxtb	r3, r3
   1bfb4:	e7f3      	b.n	1bf9e <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1bfb6:	2400      	movs	r4, #0
   1bfb8:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1bfba:	2b0f      	cmp	r3, #15
   1bfbc:	d80d      	bhi.n	1bfda <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1bfbe:	5ccd      	ldrb	r5, [r1, r3]
   1bfc0:	226c      	movs	r2, #108	; 0x6c
   1bfc2:	fb02 620c 	mla	r2, r2, ip, r6
   1bfc6:	441a      	add	r2, r3
   1bfc8:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1bfcc:	4295      	cmp	r5, r2
   1bfce:	d1e4      	bne.n	1bf9a <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1bfd0:	3408      	adds	r4, #8
   1bfd2:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1bfd4:	3301      	adds	r3, #1
   1bfd6:	b2db      	uxtb	r3, r3
   1bfd8:	e7ef      	b.n	1bfba <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1bfda:	454c      	cmp	r4, r9
   1bfdc:	d3b9      	bcc.n	1bf52 <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1bfde:	206c      	movs	r0, #108	; 0x6c
   1bfe0:	fb00 f00c 	mul.w	r0, r0, ip
   1bfe4:	3020      	adds	r0, #32
   1bfe6:	4430      	add	r0, r6
   1bfe8:	3010      	adds	r0, #16
			*best_so_far = len;
   1bfea:	46a1      	mov	r9, r4
   1bfec:	e7b1      	b.n	1bf52 <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1bfee:	b150      	cbz	r0, 1c006 <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1bff0:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1bff4:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1bff6:	b947      	cbnz	r7, 1c00a <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1bff8:	4b45      	ldr	r3, [pc, #276]	; (1c110 <net_if_ipv6_select_src_addr+0x1f4>)
   1bffa:	429e      	cmp	r6, r3
   1bffc:	d005      	beq.n	1c00a <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1bffe:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1c002:	4670      	mov	r0, lr
   1c004:	e7a9      	b.n	1bf5a <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1c006:	4640      	mov	r0, r8
   1c008:	e7f2      	b.n	1bff0 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1c00a:	2f00      	cmp	r7, #0
   1c00c:	d073      	beq.n	1c0f6 <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c00e:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1c010:	46a8      	mov	r8, r5
   1c012:	e009      	b.n	1c028 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1c014:	206c      	movs	r0, #108	; 0x6c
   1c016:	fb00 7005 	mla	r0, r0, r5, r7
   1c01a:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c01c:	280a      	cmp	r0, #10
   1c01e:	d01b      	beq.n	1c058 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1c020:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c022:	bb73      	cbnz	r3, 1c082 <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1c024:	3501      	adds	r5, #1
   1c026:	b2ed      	uxtb	r5, r5
   1c028:	2d02      	cmp	r5, #2
   1c02a:	d864      	bhi.n	1c0f6 <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c02c:	462e      	mov	r6, r5
   1c02e:	236c      	movs	r3, #108	; 0x6c
   1c030:	fb03 f305 	mul.w	r3, r3, r5
   1c034:	f103 0220 	add.w	r2, r3, #32
   1c038:	443a      	add	r2, r7
   1c03a:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1c03c:	443b      	add	r3, r7
   1c03e:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1c042:	2b00      	cmp	r3, #0
   1c044:	d0ed      	beq.n	1c022 <net_if_ipv6_select_src_addr+0x106>
   1c046:	206c      	movs	r0, #108	; 0x6c
   1c048:	fb00 7005 	mla	r0, r0, r5, r7
   1c04c:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1c050:	2801      	cmp	r0, #1
   1c052:	d0df      	beq.n	1c014 <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1c054:	2300      	movs	r3, #0
   1c056:	e7e4      	b.n	1c022 <net_if_ipv6_select_src_addr+0x106>
   1c058:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1c05a:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1c05e:	4290      	cmp	r0, r2
   1c060:	d1df      	bne.n	1c022 <net_if_ipv6_select_src_addr+0x106>
	return false;
   1c062:	2300      	movs	r3, #0
   1c064:	e7dd      	b.n	1c022 <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1c066:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1c068:	2300      	movs	r3, #0
   1c06a:	2b07      	cmp	r3, #7
   1c06c:	d81b      	bhi.n	1c0a6 <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1c06e:	f014 0f80 	tst.w	r4, #128	; 0x80
   1c072:	d118      	bne.n	1c0a6 <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1c074:	3001      	adds	r0, #1
   1c076:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1c078:	0064      	lsls	r4, r4, #1
   1c07a:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1c07c:	3301      	adds	r3, #1
   1c07e:	b2db      	uxtb	r3, r3
   1c080:	e7f3      	b.n	1c06a <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1c082:	2000      	movs	r0, #0
   1c084:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1c086:	2b0f      	cmp	r3, #15
   1c088:	d80d      	bhi.n	1c0a6 <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1c08a:	5ccc      	ldrb	r4, [r1, r3]
   1c08c:	226c      	movs	r2, #108	; 0x6c
   1c08e:	fb02 7206 	mla	r2, r2, r6, r7
   1c092:	441a      	add	r2, r3
   1c094:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1c098:	4294      	cmp	r4, r2
   1c09a:	d1e4      	bne.n	1c066 <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1c09c:	3008      	adds	r0, #8
   1c09e:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1c0a0:	3301      	adds	r3, #1
   1c0a2:	b2db      	uxtb	r3, r3
   1c0a4:	e7ef      	b.n	1c086 <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1c0a6:	4548      	cmp	r0, r9
   1c0a8:	d3bc      	bcc.n	1c024 <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1c0aa:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1c0ae:	fb08 f806 	mul.w	r8, r8, r6
   1c0b2:	f108 0820 	add.w	r8, r8, #32
   1c0b6:	44b8      	add	r8, r7
   1c0b8:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1c0bc:	4681      	mov	r9, r0
   1c0be:	e7b1      	b.n	1c024 <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1c0c0:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1c0c4:	b97f      	cbnz	r7, 1c0e6 <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1c0c6:	4b12      	ldr	r3, [pc, #72]	; (1c110 <net_if_ipv6_select_src_addr+0x1f4>)
   1c0c8:	429c      	cmp	r4, r3
   1c0ca:	d009      	beq.n	1c0e0 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1c0cc:	2101      	movs	r1, #1
   1c0ce:	4620      	mov	r0, r4
   1c0d0:	f7ff fef6 	bl	1bec0 <net_if_ipv6_get_ll>
			if (addr) {
   1c0d4:	4680      	mov	r8, r0
   1c0d6:	2800      	cmp	r0, #0
   1c0d8:	d0f2      	beq.n	1c0c0 <net_if_ipv6_select_src_addr+0x1a4>
   1c0da:	e006      	b.n	1c0ea <net_if_ipv6_select_src_addr+0x1ce>
   1c0dc:	4c0b      	ldr	r4, [pc, #44]	; (1c10c <net_if_ipv6_select_src_addr+0x1f0>)
   1c0de:	e7f1      	b.n	1c0c4 <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1c0e0:	f04f 0800 	mov.w	r8, #0
   1c0e4:	e001      	b.n	1c0ea <net_if_ipv6_select_src_addr+0x1ce>
   1c0e6:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1c0ea:	b127      	cbz	r7, 1c0f6 <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1c0ec:	2101      	movs	r1, #1
   1c0ee:	4638      	mov	r0, r7
   1c0f0:	f7ff fee6 	bl	1bec0 <net_if_ipv6_get_ll>
   1c0f4:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1c0f6:	f1b8 0f00 	cmp.w	r8, #0
   1c0fa:	d002      	beq.n	1c102 <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1c0fc:	4640      	mov	r0, r8
}
   1c0fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1c102:	f003 fd67 	bl	1fbd4 <net_ipv6_unspecified_address>
   1c106:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1c10a:	bf00      	nop
   1c10c:	2000d2c0 	.word	0x2000d2c0
   1c110:	2000d560 	.word	0x2000d560

0001c114 <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1c114:	b510      	push	{r4, lr}
   1c116:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1c118:	f7e5 ffde 	bl	20d8 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1c11c:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1c120:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1c124:	fb03 0012 	mls	r0, r3, r2, r0
   1c128:	bd10      	pop	{r4, pc}
	...

0001c12c <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1c12c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c12e:	4605      	mov	r5, r0
   1c130:	460e      	mov	r6, r1
   1c132:	4617      	mov	r7, r2
	return list->head;
   1c134:	4b11      	ldr	r3, [pc, #68]	; (1c17c <net_if_call_link_cb+0x50>)
   1c136:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c138:	b11b      	cbz	r3, 1c142 <net_if_call_link_cb+0x16>
   1c13a:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c13c:	b143      	cbz	r3, 1c150 <net_if_call_link_cb+0x24>
	return node->next;
   1c13e:	681c      	ldr	r4, [r3, #0]
   1c140:	e006      	b.n	1c150 <net_if_call_link_cb+0x24>
   1c142:	461c      	mov	r4, r3
   1c144:	e004      	b.n	1c150 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c146:	4623      	mov	r3, r4
   1c148:	e00e      	b.n	1c168 <net_if_call_link_cb+0x3c>
   1c14a:	4622      	mov	r2, r4
   1c14c:	4623      	mov	r3, r4
   1c14e:	4614      	mov	r4, r2
   1c150:	b193      	cbz	r3, 1c178 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1c152:	685b      	ldr	r3, [r3, #4]
   1c154:	463a      	mov	r2, r7
   1c156:	4631      	mov	r1, r6
   1c158:	4628      	mov	r0, r5
   1c15a:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1c15c:	2c00      	cmp	r4, #0
   1c15e:	d0f4      	beq.n	1c14a <net_if_call_link_cb+0x1e>
   1c160:	4622      	mov	r2, r4
   1c162:	2c00      	cmp	r4, #0
   1c164:	d0ef      	beq.n	1c146 <net_if_call_link_cb+0x1a>
	return node->next;
   1c166:	6823      	ldr	r3, [r4, #0]
   1c168:	b113      	cbz	r3, 1c170 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c16a:	b11a      	cbz	r2, 1c174 <net_if_call_link_cb+0x48>
	return node->next;
   1c16c:	6822      	ldr	r2, [r4, #0]
   1c16e:	e7ed      	b.n	1c14c <net_if_call_link_cb+0x20>
   1c170:	2200      	movs	r2, #0
   1c172:	e7eb      	b.n	1c14c <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1c174:	2200      	movs	r2, #0
   1c176:	e7e9      	b.n	1c14c <net_if_call_link_cb+0x20>
	}
}
   1c178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c17a:	bf00      	nop
   1c17c:	20001c54 	.word	0x20001c54

0001c180 <net_if_send_data>:
{
   1c180:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1c184:	4606      	mov	r6, r0
   1c186:	460c      	mov	r4, r1
	return pkt->context;
   1c188:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1c18a:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1c18e:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1c192:	f3bf 8f5b 	dmb	ish
   1c196:	68c3      	ldr	r3, [r0, #12]
   1c198:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c19c:	f013 0f01 	tst.w	r3, #1
   1c1a0:	d10a      	bne.n	1c1b8 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1c1a2:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1c1a6:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1c1a8:	b10f      	cbz	r7, 1c1ae <net_if_send_data+0x2e>
   1c1aa:	2d02      	cmp	r5, #2
   1c1ac:	d02e      	beq.n	1c20c <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1c1ae:	2d02      	cmp	r5, #2
   1c1b0:	d050      	beq.n	1c254 <net_if_send_data+0xd4>
}
   1c1b2:	4628      	mov	r0, r5
   1c1b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1c1b8:	f3bf 8f5b 	dmb	ish
   1c1bc:	68c3      	ldr	r3, [r0, #12]
   1c1be:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c1c2:	f013 0f02 	tst.w	r3, #2
   1c1c6:	d101      	bne.n	1c1cc <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1c1c8:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1c1ca:	b173      	cbz	r3, 1c1ea <net_if_send_data+0x6a>
	return pkt->family;
   1c1cc:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c1d0:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c1d4:	2b0a      	cmp	r3, #10
   1c1d6:	d00f      	beq.n	1c1f8 <net_if_send_data+0x78>
   1c1d8:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1c1da:	6873      	ldr	r3, [r6, #4]
   1c1dc:	685b      	ldr	r3, [r3, #4]
   1c1de:	4630      	mov	r0, r6
   1c1e0:	4798      	blx	r3
   1c1e2:	4605      	mov	r5, r0
	int status = -EIO;
   1c1e4:	f06f 0804 	mvn.w	r8, #4
   1c1e8:	e7de      	b.n	1c1a8 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1c1ea:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1c1ec:	691a      	ldr	r2, [r3, #16]
   1c1ee:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1c1f0:	7d1b      	ldrb	r3, [r3, #20]
   1c1f2:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1c1f6:	e7e9      	b.n	1c1cc <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1c1f8:	4620      	mov	r0, r4
   1c1fa:	f005 f9fb 	bl	215f4 <net_ipv6_prepare_for_send>
		if (!pkt) {
   1c1fe:	4601      	mov	r1, r0
   1c200:	2800      	cmp	r0, #0
   1c202:	d1ea      	bne.n	1c1da <net_if_send_data+0x5a>
	int status = -EIO;
   1c204:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1c208:	2501      	movs	r5, #1
   1c20a:	e7cd      	b.n	1c1a8 <net_if_send_data+0x28>
	if (!context) {
   1c20c:	2f00      	cmp	r7, #0
   1c20e:	d0ce      	beq.n	1c1ae <net_if_send_data+0x2e>
	if (context->send_cb) {
   1c210:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1c214:	f1bb 0f00 	cmp.w	fp, #0
   1c218:	d004      	beq.n	1c224 <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1c21a:	683b      	ldr	r3, [r7, #0]
   1c21c:	4652      	mov	r2, sl
   1c21e:	4641      	mov	r1, r8
   1c220:	4638      	mov	r0, r7
   1c222:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1c224:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c228:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c22c:	d009      	beq.n	1c242 <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1c22e:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c230:	2b11      	cmp	r3, #17
   1c232:	d008      	beq.n	1c246 <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c234:	2b06      	cmp	r3, #6
   1c236:	d1ba      	bne.n	1c1ae <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1c238:	4a0b      	ldr	r2, [pc, #44]	; (1c268 <net_if_send_data+0xe8>)
   1c23a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c23c:	3301      	adds	r3, #1
   1c23e:	6593      	str	r3, [r2, #88]	; 0x58
   1c240:	e7b5      	b.n	1c1ae <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1c242:	2311      	movs	r3, #17
   1c244:	e7f4      	b.n	1c230 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1c246:	4a08      	ldr	r2, [pc, #32]	; (1c268 <net_if_send_data+0xe8>)
   1c248:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c24c:	3301      	adds	r3, #1
   1c24e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c252:	e7ac      	b.n	1c1ae <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1c254:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1c256:	2b00      	cmp	r3, #0
   1c258:	d0ab      	beq.n	1c1b2 <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1c25a:	4642      	mov	r2, r8
   1c25c:	4649      	mov	r1, r9
   1c25e:	4630      	mov	r0, r6
   1c260:	f7ff ff64 	bl	1c12c <net_if_call_link_cb>
   1c264:	e7a5      	b.n	1c1b2 <net_if_send_data+0x32>
   1c266:	bf00      	nop
   1c268:	20002b58 	.word	0x20002b58

0001c26c <net_if_tx>:
{
   1c26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1c270:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1c272:	f850 3b18 	ldr.w	r3, [r0], #24
   1c276:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1c27a:	2100      	movs	r1, #0
   1c27c:	f00c fd56 	bl	28d2c <k_queue_get>
	if (!pkt) {
   1c280:	2800      	cmp	r0, #0
   1c282:	d062      	beq.n	1c34a <net_if_tx+0xde>
   1c284:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1c286:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1c28a:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1c28c:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1c290:	f3bf 8f5b 	dmb	ish
   1c294:	68f3      	ldr	r3, [r6, #12]
   1c296:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c29a:	f013 0f01 	tst.w	r3, #1
   1c29e:	d039      	beq.n	1c314 <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1c2a0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c2a2:	2400      	movs	r4, #0
   1c2a4:	e002      	b.n	1c2ac <net_if_tx+0x40>
		bytes += buf->len;
   1c2a6:	899a      	ldrh	r2, [r3, #12]
   1c2a8:	4414      	add	r4, r2
		buf = buf->frags;
   1c2aa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c2ac:	2b00      	cmp	r3, #0
   1c2ae:	d1fa      	bne.n	1c2a6 <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1c2b0:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1c2b4:	f043 0301 	orr.w	r3, r3, #1
   1c2b8:	f36f 0341 	bfc	r3, #1, #1
   1c2bc:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1c2c0:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1c2c4:	4629      	mov	r1, r5
   1c2c6:	4630      	mov	r0, r6
   1c2c8:	4798      	blx	r3
   1c2ca:	4681      	mov	r9, r0
	if (status < 0) {
   1c2cc:	f1b9 0f00 	cmp.w	r9, #0
   1c2d0:	db23      	blt.n	1c31a <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1c2d2:	4a21      	ldr	r2, [pc, #132]	; (1c358 <net_if_tx+0xec>)
   1c2d4:	6853      	ldr	r3, [r2, #4]
   1c2d6:	441c      	add	r4, r3
   1c2d8:	6054      	str	r4, [r2, #4]
	if (context) {
   1c2da:	b18f      	cbz	r7, 1c300 <net_if_tx+0x94>
	if (!context) {
   1c2dc:	b187      	cbz	r7, 1c300 <net_if_tx+0x94>
	if (context->send_cb) {
   1c2de:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1c2e0:	b124      	cbz	r4, 1c2ec <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1c2e2:	683b      	ldr	r3, [r7, #0]
   1c2e4:	4652      	mov	r2, sl
   1c2e6:	4649      	mov	r1, r9
   1c2e8:	4638      	mov	r0, r7
   1c2ea:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1c2ec:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1c2f0:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c2f4:	d01b      	beq.n	1c32e <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1c2f6:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c2f8:	2b11      	cmp	r3, #17
   1c2fa:	d01a      	beq.n	1c332 <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c2fc:	2b06      	cmp	r3, #6
   1c2fe:	d01f      	beq.n	1c340 <net_if_tx+0xd4>
	if (dst->addr) {
   1c300:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1c302:	b32b      	cbz	r3, 1c350 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1c304:	464a      	mov	r2, r9
   1c306:	4641      	mov	r1, r8
   1c308:	4630      	mov	r0, r6
   1c30a:	f7ff ff0f 	bl	1c12c <net_if_call_link_cb>
	return true;
   1c30e:	2001      	movs	r0, #1
   1c310:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1c314:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1c318:	e7d8      	b.n	1c2cc <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1c31a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1c31e:	f36f 0300 	bfc	r3, #0, #1
   1c322:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1c326:	4628      	mov	r0, r5
   1c328:	f001 fa93 	bl	1d852 <net_pkt_unref>
   1c32c:	e7d5      	b.n	1c2da <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1c32e:	2311      	movs	r3, #17
   1c330:	e7e2      	b.n	1c2f8 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1c332:	4a09      	ldr	r2, [pc, #36]	; (1c358 <net_if_tx+0xec>)
   1c334:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1c338:	3301      	adds	r3, #1
   1c33a:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1c33e:	e7df      	b.n	1c300 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1c340:	4a05      	ldr	r2, [pc, #20]	; (1c358 <net_if_tx+0xec>)
   1c342:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1c344:	3301      	adds	r3, #1
   1c346:	6593      	str	r3, [r2, #88]	; 0x58
   1c348:	e7da      	b.n	1c300 <net_if_tx+0x94>
		return false;
   1c34a:	2000      	movs	r0, #0
   1c34c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1c350:	2001      	movs	r0, #1
}
   1c352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1c356:	bf00      	nop
   1c358:	20002b58 	.word	0x20002b58

0001c35c <net_if_flush_tx>:
	return (!list->head);
   1c35c:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1c35e:	b14b      	cbz	r3, 1c374 <net_if_flush_tx+0x18>
{
   1c360:	b510      	push	{r4, lr}
   1c362:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c364:	f00c fef8 	bl	29158 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1c368:	4620      	mov	r0, r4
   1c36a:	f7ff ff7f 	bl	1c26c <net_if_tx>
   1c36e:	2800      	cmp	r0, #0
   1c370:	d1fa      	bne.n	1c368 <net_if_flush_tx+0xc>
   1c372:	bd10      	pop	{r4, pc}
   1c374:	4770      	bx	lr

0001c376 <net_if_process_events>:
{
   1c376:	b538      	push	{r3, r4, r5, lr}
   1c378:	4604      	mov	r4, r0
   1c37a:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1c37c:	e001      	b.n	1c382 <net_if_process_events+0xc>
   1c37e:	3414      	adds	r4, #20
   1c380:	3d01      	subs	r5, #1
   1c382:	b145      	cbz	r5, 1c396 <net_if_process_events+0x20>
		switch (event->state) {
   1c384:	7b63      	ldrb	r3, [r4, #13]
   1c386:	091b      	lsrs	r3, r3, #4
   1c388:	2b04      	cmp	r3, #4
   1c38a:	d1f8      	bne.n	1c37e <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1c38c:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1c38e:	3818      	subs	r0, #24
   1c390:	f7ff ff6c 	bl	1c26c <net_if_tx>
			break;
   1c394:	e7f3      	b.n	1c37e <net_if_process_events+0x8>
}
   1c396:	bd38      	pop	{r3, r4, r5, pc}

0001c398 <net_if_tx_thread>:
{
   1c398:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c39a:	f00d f836 	bl	2940a <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1c39e:	f7ff f849 	bl	1b434 <net_if_prepare_events>
   1c3a2:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1c3a4:	4c06      	ldr	r4, [pc, #24]	; (1c3c0 <net_if_tx_thread+0x28>)
   1c3a6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c3aa:	4601      	mov	r1, r0
   1c3ac:	4620      	mov	r0, r4
   1c3ae:	f00c f98b 	bl	286c8 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1c3b2:	4629      	mov	r1, r5
   1c3b4:	4620      	mov	r0, r4
   1c3b6:	f7ff ffde 	bl	1c376 <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1c3ba:	f00c fecd 	bl	29158 <_impl_k_yield>
   1c3be:	e7ee      	b.n	1c39e <net_if_tx_thread+0x6>
   1c3c0:	2000d560 	.word	0x2000d560

0001c3c4 <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1c3c4:	4a05      	ldr	r2, [pc, #20]	; (1c3dc <net_if_get_by_index+0x18>)
   1c3c6:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1c3ca:	fb03 2000 	mla	r0, r3, r0, r2
   1c3ce:	4b04      	ldr	r3, [pc, #16]	; (1c3e0 <net_if_get_by_index+0x1c>)
   1c3d0:	4298      	cmp	r0, r3
   1c3d2:	d200      	bcs.n	1c3d6 <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1c3d4:	4770      	bx	lr
		return NULL;
   1c3d6:	2000      	movs	r0, #0
   1c3d8:	e7fc      	b.n	1c3d4 <net_if_get_by_index+0x10>
   1c3da:	bf00      	nop
   1c3dc:	2000d2c0 	.word	0x2000d2c0
   1c3e0:	2000d560 	.word	0x2000d560

0001c3e4 <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1c3e4:	4b03      	ldr	r3, [pc, #12]	; (1c3f4 <net_if_get_by_iface+0x10>)
   1c3e6:	1ac0      	subs	r0, r0, r3
   1c3e8:	1140      	asrs	r0, r0, #5
   1c3ea:	4b03      	ldr	r3, [pc, #12]	; (1c3f8 <net_if_get_by_iface+0x14>)
   1c3ec:	fb03 f000 	mul.w	r0, r3, r0
}
   1c3f0:	b2c0      	uxtb	r0, r0
   1c3f2:	4770      	bx	lr
   1c3f4:	2000d2c0 	.word	0x2000d2c0
   1c3f8:	3cf3cf3d 	.word	0x3cf3cf3d

0001c3fc <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1c3fc:	b570      	push	{r4, r5, r6, lr}
   1c3fe:	4606      	mov	r6, r0
   1c400:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c402:	4c05      	ldr	r4, [pc, #20]	; (1c418 <net_if_foreach+0x1c>)
   1c404:	e004      	b.n	1c410 <net_if_foreach+0x14>
		cb(iface, user_data);
   1c406:	4629      	mov	r1, r5
   1c408:	4620      	mov	r0, r4
   1c40a:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c40c:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c410:	4b02      	ldr	r3, [pc, #8]	; (1c41c <net_if_foreach+0x20>)
   1c412:	429c      	cmp	r4, r3
   1c414:	d1f7      	bne.n	1c406 <net_if_foreach+0xa>
	}
}
   1c416:	bd70      	pop	{r4, r5, r6, pc}
   1c418:	2000d2c0 	.word	0x2000d2c0
   1c41c:	2000d560 	.word	0x2000d560

0001c420 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1c420:	b570      	push	{r4, r5, r6, lr}
   1c422:	f3bf 8f5b 	dmb	ish
   1c426:	68c5      	ldr	r5, [r0, #12]
   1c428:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1c42c:	f015 0501 	ands.w	r5, r5, #1
   1c430:	d123      	bne.n	1c47a <net_if_up+0x5a>
   1c432:	f100 060c 	add.w	r6, r0, #12
   1c436:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1c438:	6843      	ldr	r3, [r0, #4]
   1c43a:	68db      	ldr	r3, [r3, #12]
   1c43c:	b11b      	cbz	r3, 1c446 <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1c43e:	2101      	movs	r1, #1
   1c440:	4798      	blx	r3
	if (status < 0) {
   1c442:	2800      	cmp	r0, #0
   1c444:	db1b      	blt.n	1c47e <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1c446:	f3bf 8f5b 	dmb	ish
   1c44a:	e856 3f00 	ldrex	r3, [r6]
   1c44e:	f043 0301 	orr.w	r3, r3, #1
   1c452:	e846 3200 	strex	r2, r3, [r6]
   1c456:	2a00      	cmp	r2, #0
   1c458:	d1f7      	bne.n	1c44a <net_if_up+0x2a>
   1c45a:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1c45e:	4620      	mov	r0, r4
   1c460:	f7ff f91e 	bl	1b6a0 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1c464:	4620      	mov	r0, r4
   1c466:	f7ff f821 	bl	1b4ac <net_if_start_rs>
   1c46a:	2300      	movs	r3, #0
   1c46c:	461a      	mov	r2, r3
   1c46e:	4621      	mov	r1, r4
   1c470:	4804      	ldr	r0, [pc, #16]	; (1c484 <net_if_up+0x64>)
   1c472:	f006 fe61 	bl	23138 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1c476:	4628      	mov	r0, r5
   1c478:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1c47a:	2500      	movs	r5, #0
   1c47c:	e7fb      	b.n	1c476 <net_if_up+0x56>
		return status;
   1c47e:	4605      	mov	r5, r0
   1c480:	e7f9      	b.n	1c476 <net_if_up+0x56>
   1c482:	bf00      	nop
   1c484:	d0010002 	.word	0xd0010002

0001c488 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1c488:	b510      	push	{r4, lr}
   1c48a:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1c48c:	f7fe ffaf 	bl	1b3ee <leave_mcast_all>

	net_if_flush_tx(iface);
   1c490:	4620      	mov	r0, r4
   1c492:	f7ff ff63 	bl	1c35c <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1c496:	6863      	ldr	r3, [r4, #4]
   1c498:	68db      	ldr	r3, [r3, #12]
   1c49a:	b123      	cbz	r3, 1c4a6 <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1c49c:	2100      	movs	r1, #0
   1c49e:	4620      	mov	r0, r4
   1c4a0:	4798      	blx	r3
	if (status < 0) {
   1c4a2:	2800      	cmp	r0, #0
   1c4a4:	db14      	blt.n	1c4d0 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1c4a6:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1c4aa:	f3bf 8f5b 	dmb	ish
   1c4ae:	e853 2f00 	ldrex	r2, [r3]
   1c4b2:	f022 0201 	bic.w	r2, r2, #1
   1c4b6:	e843 2100 	strex	r1, r2, [r3]
   1c4ba:	2900      	cmp	r1, #0
   1c4bc:	d1f7      	bne.n	1c4ae <net_if_down+0x26>
   1c4be:	f3bf 8f5b 	dmb	ish
   1c4c2:	2300      	movs	r3, #0
   1c4c4:	461a      	mov	r2, r3
   1c4c6:	4621      	mov	r1, r4
   1c4c8:	4802      	ldr	r0, [pc, #8]	; (1c4d4 <net_if_down+0x4c>)
   1c4ca:	f006 fe35 	bl	23138 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1c4ce:	2000      	movs	r0, #0
}
   1c4d0:	bd10      	pop	{r4, pc}
   1c4d2:	bf00      	nop
   1c4d4:	d0010001 	.word	0xd0010001

0001c4d8 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1c4d8:	b570      	push	{r4, r5, r6, lr}
   1c4da:	b086      	sub	sp, #24
   1c4dc:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c4de:	4c1b      	ldr	r4, [pc, #108]	; (1c54c <net_if_init+0x74>)
   1c4e0:	e01b      	b.n	1c51a <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1c4e2:	4620      	mov	r0, r4
   1c4e4:	f850 3b18 	ldr.w	r3, [r0], #24
   1c4e8:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1c4ea:	f00c fbc4 	bl	28c76 <k_queue_init>
	api->init(iface);
   1c4ee:	682b      	ldr	r3, [r5, #0]
   1c4f0:	4620      	mov	r0, r4
   1c4f2:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1c4f4:	2340      	movs	r3, #64	; 0x40
   1c4f6:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1c4fa:	f247 5330 	movw	r3, #30000	; 0x7530
   1c4fe:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1c502:	4620      	mov	r0, r4
   1c504:	f7ff fe06 	bl	1c114 <net_if_ipv6_calc_reachable_time>
   1c508:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1c50c:	4910      	ldr	r1, [pc, #64]	; (1c550 <net_if_init+0x78>)
   1c50e:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1c512:	f00d fd4b 	bl	29fac <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c516:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c51a:	4b0e      	ldr	r3, [pc, #56]	; (1c554 <net_if_init+0x7c>)
   1c51c:	429c      	cmp	r4, r3
   1c51e:	d1e0      	bne.n	1c4e2 <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1c520:	4b0a      	ldr	r3, [pc, #40]	; (1c54c <net_if_init+0x74>)
   1c522:	429c      	cmp	r4, r3
   1c524:	d010      	beq.n	1c548 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1c526:	2300      	movs	r3, #0
   1c528:	9305      	str	r3, [sp, #20]
   1c52a:	2201      	movs	r2, #1
   1c52c:	9204      	str	r2, [sp, #16]
   1c52e:	f06f 0208 	mvn.w	r2, #8
   1c532:	9203      	str	r2, [sp, #12]
   1c534:	9302      	str	r3, [sp, #8]
   1c536:	9301      	str	r3, [sp, #4]
   1c538:	9600      	str	r6, [sp, #0]
   1c53a:	4b07      	ldr	r3, [pc, #28]	; (1c558 <net_if_init+0x80>)
   1c53c:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1c540:	4906      	ldr	r1, [pc, #24]	; (1c55c <net_if_init+0x84>)
   1c542:	4807      	ldr	r0, [pc, #28]	; (1c560 <net_if_init+0x88>)
   1c544:	f00d f9e0 	bl	29908 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1c548:	b006      	add	sp, #24
   1c54a:	bd70      	pop	{r4, r5, r6, pc}
   1c54c:	2000d2c0 	.word	0x2000d2c0
   1c550:	0001b4cd 	.word	0x0001b4cd
   1c554:	2000d560 	.word	0x2000d560
   1c558:	0001c399 	.word	0x0001c399
   1c55c:	20004e40 	.word	0x20004e40
   1c560:	20000498 	.word	0x20000498

0001c564 <net_if_post_init>:

void net_if_post_init(void)
{
   1c564:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c566:	4c05      	ldr	r4, [pc, #20]	; (1c57c <net_if_post_init+0x18>)
   1c568:	e004      	b.n	1c574 <net_if_post_init+0x10>
		net_if_up(iface);
   1c56a:	4620      	mov	r0, r4
   1c56c:	f7ff ff58 	bl	1c420 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1c570:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1c574:	4b02      	ldr	r3, [pc, #8]	; (1c580 <net_if_post_init+0x1c>)
   1c576:	429c      	cmp	r4, r3
   1c578:	d1f7      	bne.n	1c56a <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1c57a:	bd10      	pop	{r4, pc}
   1c57c:	2000d2c0 	.word	0x2000d2c0
   1c580:	2000d560 	.word	0x2000d560

0001c584 <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1c584:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c586:	4605      	mov	r5, r0
   1c588:	460e      	mov	r6, r1
   1c58a:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c58c:	2400      	movs	r4, #0
   1c58e:	e003      	b.n	1c598 <check_used_port+0x14>
   1c590:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c592:	42ab      	cmp	r3, r5
   1c594:	d010      	beq.n	1c5b8 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c596:	3401      	adds	r4, #1
   1c598:	2c05      	cmp	r4, #5
   1c59a:	dc2b      	bgt.n	1c5f4 <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1c59c:	2368      	movs	r3, #104	; 0x68
   1c59e:	4a16      	ldr	r2, [pc, #88]	; (1c5f8 <check_used_port+0x74>)
   1c5a0:	fb03 2304 	mla	r3, r3, r4, r2
   1c5a4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c5a8:	f013 0f01 	tst.w	r3, #1
   1c5ac:	d0f3      	beq.n	1c596 <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c5ae:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c5b2:	d0ed      	beq.n	1c590 <check_used_port+0xc>
		return IPPROTO_TCP;
   1c5b4:	2306      	movs	r3, #6
   1c5b6:	e7ec      	b.n	1c592 <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1c5b8:	2368      	movs	r3, #104	; 0x68
   1c5ba:	fb03 f304 	mul.w	r3, r3, r4
   1c5be:	3308      	adds	r3, #8
   1c5c0:	4a0d      	ldr	r2, [pc, #52]	; (1c5f8 <check_used_port+0x74>)
   1c5c2:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1c5c4:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1c5c6:	42b2      	cmp	r2, r6
   1c5c8:	d1e5      	bne.n	1c596 <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1c5ca:	883a      	ldrh	r2, [r7, #0]
   1c5cc:	2a0a      	cmp	r2, #10
   1c5ce:	d007      	beq.n	1c5e0 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1c5d0:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1c5d2:	681a      	ldr	r2, [r3, #0]
   1c5d4:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1c5d6:	429a      	cmp	r2, r3
   1c5d8:	d1dd      	bne.n	1c596 <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1c5da:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1c5de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1c5e0:	2210      	movs	r2, #16
   1c5e2:	1d39      	adds	r1, r7, #4
   1c5e4:	6858      	ldr	r0, [r3, #4]
   1c5e6:	f00e f92f 	bl	2a848 <memcmp>
			if (net_ipv6_addr_cmp(
   1c5ea:	2800      	cmp	r0, #0
   1c5ec:	d1d3      	bne.n	1c596 <check_used_port+0x12>
				return -EEXIST;
   1c5ee:	f06f 0010 	mvn.w	r0, #16
   1c5f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1c5f4:	2000      	movs	r0, #0
   1c5f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c5f8:	20001ca8 	.word	0x20001ca8

0001c5fc <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1c5fc:	b570      	push	{r4, r5, r6, lr}
   1c5fe:	4606      	mov	r6, r0
   1c600:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1c602:	884c      	ldrh	r4, [r1, #2]
   1c604:	b16c      	cbz	r4, 1c622 <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1c606:	4620      	mov	r0, r4
   1c608:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1c60a:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1c60c:	0a1c      	lsrs	r4, r3, #8
   1c60e:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1c612:	b29c      	uxth	r4, r3
   1c614:	462a      	mov	r2, r5
   1c616:	4621      	mov	r1, r4
   1c618:	f7ff ffb4 	bl	1c584 <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1c61c:	f110 0f11 	cmn.w	r0, #17
   1c620:	d1f1      	bne.n	1c606 <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1c622:	f7e5 fd59 	bl	20d8 <sys_rand32_get>
   1c626:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1c62a:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1c62e:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1c630:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1c634:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c638:	d0e7      	beq.n	1c60a <find_available_port+0xe>
		return IPPROTO_TCP;
   1c63a:	2006      	movs	r0, #6
   1c63c:	e7e6      	b.n	1c60c <find_available_port+0x10>

0001c63e <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1c63e:	b500      	push	{lr}
   1c640:	b087      	sub	sp, #28
   1c642:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1c644:	2200      	movs	r2, #0
   1c646:	a906      	add	r1, sp, #24
   1c648:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c64c:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1c64e:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1c650:	9102      	str	r1, [sp, #8]
   1c652:	9301      	str	r3, [sp, #4]
   1c654:	9200      	str	r2, [sp, #0]
   1c656:	4613      	mov	r3, r2
   1c658:	2101      	movs	r1, #1
   1c65a:	f007 f9dd 	bl	23a18 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1c65e:	b928      	cbnz	r0, 1c66c <queue_fin+0x2e>
   1c660:	9805      	ldr	r0, [sp, #20]
   1c662:	b118      	cbz	r0, 1c66c <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1c664:	f007 fcdc 	bl	24020 <net_tcp_send_pkt>
	if (ret < 0) {
   1c668:	2800      	cmp	r0, #0
   1c66a:	db02      	blt.n	1c672 <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1c66c:	b007      	add	sp, #28
   1c66e:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1c672:	9805      	ldr	r0, [sp, #20]
   1c674:	f001 f8ed 	bl	1d852 <net_pkt_unref>
   1c678:	e7f8      	b.n	1c66c <queue_fin+0x2e>

0001c67a <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1c67a:	b500      	push	{lr}
   1c67c:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c67e:	a901      	add	r1, sp, #4
   1c680:	f007 fb1c 	bl	23cbc <net_tcp_get_hdr>
	if (tcp_hdr) {
   1c684:	b128      	cbz	r0, 1c692 <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1c686:	7b00      	ldrb	r0, [r0, #12]
   1c688:	0900      	lsrs	r0, r0, #4
   1c68a:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1c68c:	b007      	add	sp, #28
   1c68e:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1c692:	2000      	movs	r0, #0
   1c694:	e7fa      	b.n	1c68c <tcp_hdr_len+0x12>

0001c696 <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1c696:	b570      	push	{r4, r5, r6, lr}
   1c698:	b082      	sub	sp, #8
   1c69a:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1c69c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1c69e:	2400      	movs	r4, #0
   1c6a0:	e002      	b.n	1c6a8 <set_appdata_values+0x12>
		bytes += buf->len;
   1c6a2:	899a      	ldrh	r2, [r3, #12]
   1c6a4:	4414      	add	r4, r2
		buf = buf->frags;
   1c6a6:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1c6a8:	2b00      	cmp	r3, #0
   1c6aa:	d1fa      	bne.n	1c6a2 <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1c6ac:	2911      	cmp	r1, #17
   1c6ae:	d020      	beq.n	1c6f2 <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1c6b0:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1c6b2:	2906      	cmp	r1, #6
   1c6b4:	d01f      	beq.n	1c6f6 <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c6b6:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1c6ba:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1c6be:	4419      	add	r1, r3
   1c6c0:	4431      	add	r1, r6
   1c6c2:	f10d 0206 	add.w	r2, sp, #6
   1c6c6:	b289      	uxth	r1, r1
   1c6c8:	4628      	mov	r0, r5
   1c6ca:	f001 fb91 	bl	1ddf0 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1c6ce:	b120      	cbz	r0, 1c6da <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1c6d0:	6883      	ldr	r3, [r0, #8]
   1c6d2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1c6d6:	4413      	add	r3, r2
	pkt->appdata = data;
   1c6d8:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c6da:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1c6de:	1ae3      	subs	r3, r4, r3
   1c6e0:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1c6e2:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1c6e6:	1b1b      	subs	r3, r3, r4
   1c6e8:	b29b      	uxth	r3, r3
   1c6ea:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1c6ec:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1c6ee:	b002      	add	sp, #8
   1c6f0:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1c6f2:	2608      	movs	r6, #8
   1c6f4:	e7dd      	b.n	1c6b2 <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1c6f6:	4628      	mov	r0, r5
   1c6f8:	f7ff ffbf 	bl	1c67a <tcp_hdr_len>
   1c6fc:	b286      	uxth	r6, r0
   1c6fe:	e7da      	b.n	1c6b6 <set_appdata_values+0x20>

0001c700 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1c700:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1c702:	460d      	mov	r5, r1
   1c704:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c706:	2300      	movs	r3, #0
   1c708:	e000      	b.n	1c70c <packet_received+0xc>
   1c70a:	3301      	adds	r3, #1
   1c70c:	2b05      	cmp	r3, #5
   1c70e:	dc12      	bgt.n	1c736 <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1c710:	2268      	movs	r2, #104	; 0x68
   1c712:	4926      	ldr	r1, [pc, #152]	; (1c7ac <packet_received+0xac>)
   1c714:	fb02 1203 	mla	r2, r2, r3, r1
   1c718:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1c71c:	f012 0f01 	tst.w	r2, #1
   1c720:	d0f3      	beq.n	1c70a <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1c722:	2268      	movs	r2, #104	; 0x68
   1c724:	fb02 1203 	mla	r2, r2, r3, r1
   1c728:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1c72a:	4290      	cmp	r0, r2
   1c72c:	d1ed      	bne.n	1c70a <packet_received+0xa>
			return &contexts[i];
   1c72e:	2268      	movs	r2, #104	; 0x68
   1c730:	fb02 1403 	mla	r4, r2, r3, r1
   1c734:	e000      	b.n	1c738 <packet_received+0x38>
	return NULL;
   1c736:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1c738:	6968      	ldr	r0, [r5, #20]
   1c73a:	f7ff fe53 	bl	1c3e4 <net_if_get_by_iface>
   1c73e:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1c742:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1c744:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1c746:	b373      	cbz	r3, 1c7a6 <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c748:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c74c:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c750:	d017      	beq.n	1c782 <packet_received+0x82>
		return IPPROTO_TCP;
   1c752:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1c754:	2a06      	cmp	r2, #6
   1c756:	d016      	beq.n	1c786 <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1c758:	2111      	movs	r1, #17
   1c75a:	4628      	mov	r0, r5
   1c75c:	f7ff ff9b 	bl	1c696 <set_appdata_values>
	return pkt->appdatalen;
   1c760:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1c762:	4a13      	ldr	r2, [pc, #76]	; (1c7b0 <packet_received+0xb0>)
   1c764:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1c766:	440b      	add	r3, r1
   1c768:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1c76a:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1c76c:	4633      	mov	r3, r6
   1c76e:	2200      	movs	r2, #0
   1c770:	4629      	mov	r1, r5
   1c772:	4620      	mov	r0, r4
   1c774:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c776:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1c77a:	f00c fe46 	bl	2940a <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1c77e:	2000      	movs	r0, #0
   1c780:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1c782:	2211      	movs	r2, #17
   1c784:	e7e6      	b.n	1c754 <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1c786:	f013 0f20 	tst.w	r3, #32
   1c78a:	d00a      	beq.n	1c7a2 <packet_received+0xa2>
		return SOCK_STREAM;
   1c78c:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1c78e:	2b01      	cmp	r3, #1
   1c790:	d1e6      	bne.n	1c760 <packet_received+0x60>
   1c792:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1c794:	2b00      	cmp	r3, #0
   1c796:	d1e3      	bne.n	1c760 <packet_received+0x60>
			net_pkt_unref(pkt);
   1c798:	4628      	mov	r0, r5
   1c79a:	f001 f85a 	bl	1d852 <net_pkt_unref>
			return NET_OK;
   1c79e:	2000      	movs	r0, #0
   1c7a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1c7a2:	2302      	movs	r3, #2
   1c7a4:	e7f3      	b.n	1c78e <packet_received+0x8e>
		return NET_DROP;
   1c7a6:	2002      	movs	r0, #2
}
   1c7a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c7aa:	bf00      	nop
   1c7ac:	20001ca8 	.word	0x20001ca8
   1c7b0:	20002b58 	.word	0x20002b58

0001c7b4 <send_reset>:
{
   1c7b4:	b510      	push	{r4, lr}
   1c7b6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c7b8:	aa02      	add	r2, sp, #8
   1c7ba:	2300      	movs	r3, #0
   1c7bc:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1c7c0:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c7c2:	f007 f85a 	bl	2387a <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1c7c6:	4604      	mov	r4, r0
   1c7c8:	b928      	cbnz	r0, 1c7d6 <send_reset+0x22>
   1c7ca:	9801      	ldr	r0, [sp, #4]
   1c7cc:	b118      	cbz	r0, 1c7d6 <send_reset+0x22>
	ret = net_send_data(pkt);
   1c7ce:	f7fe fc3f 	bl	1b050 <net_send_data>
	if (ret < 0) {
   1c7d2:	1e04      	subs	r4, r0, #0
   1c7d4:	db02      	blt.n	1c7dc <send_reset+0x28>
}
   1c7d6:	4620      	mov	r0, r4
   1c7d8:	b002      	add	sp, #8
   1c7da:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1c7dc:	9801      	ldr	r0, [sp, #4]
   1c7de:	f001 f838 	bl	1d852 <net_pkt_unref>
   1c7e2:	e7f8      	b.n	1c7d6 <send_reset+0x22>

0001c7e4 <send_ack>:
{
   1c7e4:	b510      	push	{r4, lr}
   1c7e6:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1c7e8:	2300      	movs	r3, #0
   1c7ea:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1c7ec:	b932      	cbnz	r2, 1c7fc <send_ack+0x18>
   1c7ee:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1c7f0:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1c7f4:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1c7f8:	429a      	cmp	r2, r3
   1c7fa:	d011      	beq.n	1c820 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1c7fc:	aa01      	add	r2, sp, #4
   1c7fe:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1c800:	f007 f99c 	bl	23b3c <net_tcp_prepare_ack>
	if (ret) {
   1c804:	4604      	mov	r4, r0
   1c806:	b110      	cbz	r0, 1c80e <send_ack+0x2a>
}
   1c808:	4620      	mov	r0, r4
   1c80a:	b002      	add	sp, #8
   1c80c:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1c80e:	9801      	ldr	r0, [sp, #4]
   1c810:	f007 fc06 	bl	24020 <net_tcp_send_pkt>
	if (ret < 0) {
   1c814:	1e04      	subs	r4, r0, #0
   1c816:	daf7      	bge.n	1c808 <send_ack+0x24>
		net_pkt_unref(pkt);
   1c818:	9801      	ldr	r0, [sp, #4]
   1c81a:	f001 f81a 	bl	1d852 <net_pkt_unref>
   1c81e:	e7f3      	b.n	1c808 <send_ack+0x24>
		return 0;
   1c820:	2400      	movs	r4, #0
   1c822:	e7f1      	b.n	1c808 <send_ack+0x24>

0001c824 <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1c824:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1c826:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c82a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c82e:	2b02      	cmp	r3, #2
   1c830:	d001      	beq.n	1c836 <_tcp_synack_received+0x12>
}
   1c832:	2002      	movs	r0, #2
   1c834:	4770      	bx	lr
{
   1c836:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c838:	b09f      	sub	sp, #124	; 0x7c
   1c83a:	4615      	mov	r5, r2
   1c83c:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1c83e:	6948      	ldr	r0, [r1, #20]
   1c840:	f7ff fdd0 	bl	1c3e4 <net_if_get_by_iface>
   1c844:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1c848:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c84a:	a911      	add	r1, sp, #68	; 0x44
   1c84c:	4620      	mov	r0, r4
   1c84e:	f007 fa35 	bl	23cbc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c852:	4606      	mov	r6, r0
   1c854:	b1f8      	cbz	r0, 1c896 <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1c856:	7b43      	ldrb	r3, [r0, #13]
   1c858:	f013 0f04 	tst.w	r3, #4
   1c85c:	d11e      	bne.n	1c89c <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1c85e:	f013 0f02 	tst.w	r3, #2
   1c862:	d013      	beq.n	1c88c <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1c864:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1c866:	7901      	ldrb	r1, [r0, #4]
   1c868:	7943      	ldrb	r3, [r0, #5]
   1c86a:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1c86e:	7980      	ldrb	r0, [r0, #6]
   1c870:	79f3      	ldrb	r3, [r6, #7]
   1c872:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c876:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1c87a:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1c87c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1c880:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1c882:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1c886:	3301      	adds	r3, #1
   1c888:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1c88c:	7b73      	ldrb	r3, [r6, #13]
   1c88e:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1c892:	2b12      	cmp	r3, #18
   1c894:	d019      	beq.n	1c8ca <_tcp_synack_received+0xa6>
}
   1c896:	2002      	movs	r0, #2
   1c898:	b01f      	add	sp, #124	; 0x7c
   1c89a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c89c:	4621      	mov	r1, r4
   1c89e:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c8a0:	f007 fa87 	bl	23db2 <net_tcp_validate_seq>
   1c8a4:	b160      	cbz	r0, 1c8c0 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1c8a6:	4a40      	ldr	r2, [pc, #256]	; (1c9a8 <_tcp_synack_received+0x184>)
   1c8a8:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c8aa:	3301      	adds	r3, #1
   1c8ac:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1c8ae:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c8b0:	2b00      	cmp	r3, #0
   1c8b2:	d0f0      	beq.n	1c896 <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1c8b4:	682a      	ldr	r2, [r5, #0]
   1c8b6:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1c8ba:	4628      	mov	r0, r5
   1c8bc:	4798      	blx	r3
   1c8be:	e7ea      	b.n	1c896 <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1c8c0:	4a39      	ldr	r2, [pc, #228]	; (1c9a8 <_tcp_synack_received+0x184>)
   1c8c2:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c8c4:	3301      	adds	r3, #1
   1c8c6:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c8c8:	e7e5      	b.n	1c896 <_tcp_synack_received+0x72>
	return pkt->family;
   1c8ca:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1c8ce:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1c8d2:	2b0a      	cmp	r3, #10
   1c8d4:	d1df      	bne.n	1c896 <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1c8d6:	f04f 0e0a 	mov.w	lr, #10
   1c8da:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1c8de:	8833      	ldrh	r3, [r6, #0]
   1c8e0:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1c8e4:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1c8e6:	ac16      	add	r4, sp, #88	; 0x58
   1c8e8:	68bb      	ldr	r3, [r7, #8]
   1c8ea:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1c8ee:	6859      	ldr	r1, [r3, #4]
   1c8f0:	689a      	ldr	r2, [r3, #8]
   1c8f2:	68db      	ldr	r3, [r3, #12]
   1c8f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c8f6:	ac06      	add	r4, sp, #24
   1c8f8:	ab16      	add	r3, sp, #88	; 0x58
   1c8fa:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1c8fc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1c900:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1c904:	8872      	ldrh	r2, [r6, #2]
   1c906:	0a13      	lsrs	r3, r2, #8
   1c908:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1c90c:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1c910:	ac1a      	add	r4, sp, #104	; 0x68
   1c912:	68bb      	ldr	r3, [r7, #8]
   1c914:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1c918:	6859      	ldr	r1, [r3, #4]
   1c91a:	689a      	ldr	r2, [r3, #8]
   1c91c:	68db      	ldr	r3, [r3, #12]
   1c91e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1c920:	ac0c      	add	r4, sp, #48	; 0x30
   1c922:	ab1e      	add	r3, sp, #120	; 0x78
   1c924:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c928:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1c92c:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1c92e:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1c932:	f008 fcdb 	bl	252ec <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1c936:	8832      	ldrh	r2, [r6, #0]
   1c938:	0a13      	lsrs	r3, r2, #8
   1c93a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1c93e:	8871      	ldrh	r1, [r6, #2]
   1c940:	0a0a      	lsrs	r2, r1, #8
   1c942:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1c946:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c948:	9403      	str	r4, [sp, #12]
   1c94a:	9502      	str	r5, [sp, #8]
   1c94c:	4917      	ldr	r1, [pc, #92]	; (1c9ac <_tcp_synack_received+0x188>)
   1c94e:	9101      	str	r1, [sp, #4]
   1c950:	9200      	str	r2, [sp, #0]
   1c952:	b29b      	uxth	r3, r3
   1c954:	aa0b      	add	r2, sp, #44	; 0x2c
   1c956:	a905      	add	r1, sp, #20
   1c958:	2006      	movs	r0, #6
   1c95a:	f008 fce5 	bl	25328 <net_conn_register>
		if (ret < 0) {
   1c95e:	2800      	cmp	r0, #0
   1c960:	db1c      	blt.n	1c99c <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1c962:	2104      	movs	r1, #4
   1c964:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c966:	f006 ffba 	bl	238de <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c96a:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c96e:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c972:	f043 0304 	orr.w	r3, r3, #4
   1c976:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1c97a:	2200      	movs	r2, #0
   1c97c:	a905      	add	r1, sp, #20
   1c97e:	4628      	mov	r0, r5
   1c980:	f7ff ff30 	bl	1c7e4 <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1c984:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c986:	30ac      	adds	r0, #172	; 0xac
   1c988:	f00c fd3f 	bl	2940a <_impl_k_sem_give>
		if (context->connect_cb) {
   1c98c:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1c98e:	2b00      	cmp	r3, #0
   1c990:	d081      	beq.n	1c896 <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1c992:	682a      	ldr	r2, [r5, #0]
   1c994:	2100      	movs	r1, #0
   1c996:	4628      	mov	r0, r5
   1c998:	4798      	blx	r3
   1c99a:	e77c      	b.n	1c896 <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1c99c:	a905      	add	r1, sp, #20
   1c99e:	4628      	mov	r0, r5
   1c9a0:	f7ff ff08 	bl	1c7b4 <send_reset>
			return NET_DROP;
   1c9a4:	e777      	b.n	1c896 <_tcp_synack_received+0x72>
   1c9a6:	bf00      	nop
   1c9a8:	20002b58 	.word	0x20002b58
   1c9ac:	0001cf05 	.word	0x0001cf05

0001c9b0 <create_udp_packet>:
{
   1c9b0:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1c9b2:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1c9b6:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1c9ba:	2c0a      	cmp	r4, #10
   1c9bc:	d118      	bne.n	1c9f0 <create_udp_packet+0x40>
   1c9be:	461e      	mov	r6, r3
   1c9c0:	4615      	mov	r5, r2
   1c9c2:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1c9c4:	1d13      	adds	r3, r2, #4
   1c9c6:	2200      	movs	r2, #0
   1c9c8:	f003 f9a4 	bl	1fd14 <net_ipv6_create>
   1c9cc:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1c9ce:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1c9d2:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1c9d6:	886b      	ldrh	r3, [r5, #2]
   1c9d8:	4402      	add	r2, r0
   1c9da:	4620      	mov	r0, r4
   1c9dc:	f006 fd90 	bl	23500 <net_udp_insert>
		if (!tmp) {
   1c9e0:	4605      	mov	r5, r0
   1c9e2:	b140      	cbz	r0, 1c9f6 <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1c9e4:	4601      	mov	r1, r0
   1c9e6:	4620      	mov	r0, r4
   1c9e8:	f003 fbf0 	bl	201cc <net_ipv6_finalize>
	*out_pkt = pkt;
   1c9ec:	6035      	str	r5, [r6, #0]
	return r;
   1c9ee:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1c9f0:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1c9f4:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1c9f6:	f06f 000b 	mvn.w	r0, #11
}
   1c9fa:	bd70      	pop	{r4, r5, r6, pc}

0001c9fc <send_data>:
{
   1c9fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ca00:	4604      	mov	r4, r0
   1ca02:	4615      	mov	r5, r2
   1ca04:	9e06      	ldr	r6, [sp, #24]
   1ca06:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1ca08:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1ca0a:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1ca0c:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1ca0e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1ca12:	f013 0f40 	tst.w	r3, #64	; 0x40
   1ca16:	d011      	beq.n	1ca3c <send_data+0x40>
		return IPPROTO_TCP;
   1ca18:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1ca1a:	2b11      	cmp	r3, #17
   1ca1c:	d010      	beq.n	1ca40 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1ca1e:	2b06      	cmp	r3, #6
   1ca20:	d113      	bne.n	1ca4a <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1ca22:	4620      	mov	r0, r4
   1ca24:	f007 fbf8 	bl	24218 <net_tcp_send_data>
   1ca28:	4680      	mov	r8, r0
		if (cb) {
   1ca2a:	b125      	cbz	r5, 1ca36 <send_data+0x3a>
			cb(context, ret, token, user_data);
   1ca2c:	463b      	mov	r3, r7
   1ca2e:	4632      	mov	r2, r6
   1ca30:	4601      	mov	r1, r0
   1ca32:	4620      	mov	r0, r4
   1ca34:	47a8      	blx	r5
}
   1ca36:	4640      	mov	r0, r8
   1ca38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1ca3c:	2311      	movs	r3, #17
   1ca3e:	e7ec      	b.n	1ca1a <send_data+0x1e>
		return net_send_data(pkt);
   1ca40:	4608      	mov	r0, r1
   1ca42:	f7fe fb05 	bl	1b050 <net_send_data>
   1ca46:	4680      	mov	r8, r0
   1ca48:	e7f5      	b.n	1ca36 <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1ca4a:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1ca4e:	e7f2      	b.n	1ca36 <send_data+0x3a>

0001ca50 <net_context_get>:
{
   1ca50:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1ca54:	2802      	cmp	r0, #2
   1ca56:	f000 80e9 	beq.w	1cc2c <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1ca5a:	280a      	cmp	r0, #10
   1ca5c:	f040 80e9 	bne.w	1cc32 <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1ca60:	1e4c      	subs	r4, r1, #1
   1ca62:	b2e4      	uxtb	r4, r4
   1ca64:	2c01      	cmp	r4, #1
   1ca66:	f200 80e7 	bhi.w	1cc38 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1ca6a:	2a11      	cmp	r2, #17
   1ca6c:	d002      	beq.n	1ca74 <net_context_get+0x24>
   1ca6e:	2a06      	cmp	r2, #6
   1ca70:	f040 80e5 	bne.w	1cc3e <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1ca74:	2901      	cmp	r1, #1
   1ca76:	d01c      	beq.n	1cab2 <net_context_get+0x62>
   1ca78:	2902      	cmp	r1, #2
   1ca7a:	d01f      	beq.n	1cabc <net_context_get+0x6c>
	if (!context) {
   1ca7c:	2b00      	cmp	r3, #0
   1ca7e:	f000 80e1 	beq.w	1cc44 <net_context_get+0x1f4>
   1ca82:	461f      	mov	r7, r3
   1ca84:	4690      	mov	r8, r2
   1ca86:	460e      	mov	r6, r1
   1ca88:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ca8a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ca8e:	4870      	ldr	r0, [pc, #448]	; (1cc50 <net_context_get+0x200>)
   1ca90:	f00c fcce 	bl	29430 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1ca94:	2400      	movs	r4, #0
   1ca96:	2c05      	cmp	r4, #5
   1ca98:	f300 80c5 	bgt.w	1cc26 <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1ca9c:	2568      	movs	r5, #104	; 0x68
   1ca9e:	4b6d      	ldr	r3, [pc, #436]	; (1cc54 <net_context_get+0x204>)
   1caa0:	fb05 3504 	mla	r5, r5, r4, r3
   1caa4:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1caa8:	f013 0f01 	tst.w	r3, #1
   1caac:	d00b      	beq.n	1cac6 <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1caae:	3401      	adds	r4, #1
   1cab0:	e7f1      	b.n	1ca96 <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1cab2:	2a11      	cmp	r2, #17
   1cab4:	d1e0      	bne.n	1ca78 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1cab6:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1caba:	e076      	b.n	1cbaa <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1cabc:	2a06      	cmp	r2, #6
   1cabe:	d1dd      	bne.n	1ca7c <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1cac0:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1cac4:	e071      	b.n	1cbaa <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1cac6:	f1b8 0f06 	cmp.w	r8, #6
   1caca:	d071      	beq.n	1cbb0 <net_context_get+0x160>
		contexts[i].flags = 0;
   1cacc:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1cad0:	4b60      	ldr	r3, [pc, #384]	; (1cc54 <net_context_get+0x204>)
   1cad2:	fb0a 3a04 	mla	sl, sl, r4, r3
   1cad6:	2300      	movs	r3, #0
   1cad8:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1cadc:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1cae0:	2201      	movs	r2, #1
   1cae2:	f3bf 8f5b 	dmb	ish
   1cae6:	e853 1f00 	ldrex	r1, [r3]
   1caea:	e843 2000 	strex	r0, r2, [r3]
   1caee:	2800      	cmp	r0, #0
   1caf0:	d1f9      	bne.n	1cae6 <net_context_get+0x96>
   1caf2:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1caf6:	f1b9 0f0a 	cmp.w	r9, #10
   1cafa:	d06d      	beq.n	1cbd8 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1cafc:	2368      	movs	r3, #104	; 0x68
   1cafe:	4a55      	ldr	r2, [pc, #340]	; (1cc54 <net_context_get+0x204>)
   1cb00:	fb03 2304 	mla	r3, r3, r4, r2
   1cb04:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb08:	f022 0210 	bic.w	r2, r2, #16
   1cb0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1cb10:	2e01      	cmp	r6, #1
   1cb12:	d068      	beq.n	1cbe6 <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1cb14:	2368      	movs	r3, #104	; 0x68
   1cb16:	4a4f      	ldr	r2, [pc, #316]	; (1cc54 <net_context_get+0x204>)
   1cb18:	fb03 2304 	mla	r3, r3, r4, r2
   1cb1c:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb20:	f022 0220 	bic.w	r2, r2, #32
   1cb24:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1cb28:	f1b8 0f06 	cmp.w	r8, #6
   1cb2c:	d066      	beq.n	1cbfc <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1cb2e:	2368      	movs	r3, #104	; 0x68
   1cb30:	4a48      	ldr	r2, [pc, #288]	; (1cc54 <net_context_get+0x204>)
   1cb32:	fb03 2304 	mla	r3, r3, r4, r2
   1cb36:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1cb3e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1cb42:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1cc54 <net_context_get+0x204>
   1cb46:	2568      	movs	r5, #104	; 0x68
   1cb48:	fb05 f504 	mul.w	r5, r5, r4
   1cb4c:	eb08 0305 	add.w	r3, r8, r5
   1cb50:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cb54:	f042 0201 	orr.w	r2, r2, #1
   1cb58:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1cb5c:	2600      	movs	r6, #0
   1cb5e:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1cb62:	f105 0010 	add.w	r0, r5, #16
   1cb66:	4440      	add	r0, r8
   1cb68:	2218      	movs	r2, #24
   1cb6a:	4631      	mov	r1, r6
   1cb6c:	3004      	adds	r0, #4
   1cb6e:	f00d feff 	bl	2a970 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1cb72:	3508      	adds	r5, #8
   1cb74:	4445      	add	r5, r8
   1cb76:	220c      	movs	r2, #12
   1cb78:	4631      	mov	r1, r6
   1cb7a:	4628      	mov	r0, r5
   1cb7c:	f00d fef8 	bl	2a970 <memset>
		if (family == AF_INET6) {
   1cb80:	f1b9 0f0a 	cmp.w	r9, #10
   1cb84:	d045      	beq.n	1cc12 <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1cb86:	2068      	movs	r0, #104	; 0x68
   1cb88:	fb00 f404 	mul.w	r4, r0, r4
   1cb8c:	3440      	adds	r4, #64	; 0x40
   1cb8e:	4831      	ldr	r0, [pc, #196]	; (1cc54 <net_context_get+0x204>)
   1cb90:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1cb92:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cb96:	2101      	movs	r1, #1
   1cb98:	3004      	adds	r0, #4
   1cb9a:	f00c fc2d 	bl	293f8 <_impl_k_sem_init>
		*context = &contexts[i];
   1cb9e:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1cba2:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1cba4:	482a      	ldr	r0, [pc, #168]	; (1cc50 <net_context_get+0x200>)
   1cba6:	f00c fc30 	bl	2940a <_impl_k_sem_give>
}
   1cbaa:	4620      	mov	r0, r4
   1cbac:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1cbb0:	2568      	movs	r5, #104	; 0x68
   1cbb2:	4b28      	ldr	r3, [pc, #160]	; (1cc54 <net_context_get+0x204>)
   1cbb4:	fb05 3504 	mla	r5, r5, r4, r3
   1cbb8:	4628      	mov	r0, r5
   1cbba:	f006 fdab 	bl	23714 <net_tcp_alloc>
   1cbbe:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1cbc0:	2800      	cmp	r0, #0
   1cbc2:	d042      	beq.n	1cc4a <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1cbc4:	4924      	ldr	r1, [pc, #144]	; (1cc58 <net_context_get+0x208>)
   1cbc6:	3008      	adds	r0, #8
   1cbc8:	f00d f9f0 	bl	29fac <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1cbcc:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1cbce:	4923      	ldr	r1, [pc, #140]	; (1cc5c <net_context_get+0x20c>)
   1cbd0:	3030      	adds	r0, #48	; 0x30
   1cbd2:	f00d f9eb 	bl	29fac <k_delayed_work_init>
   1cbd6:	e779      	b.n	1cacc <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1cbd8:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1cbdc:	f042 0210 	orr.w	r2, r2, #16
   1cbe0:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1cbe4:	e794      	b.n	1cb10 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1cbe6:	2368      	movs	r3, #104	; 0x68
   1cbe8:	4a1a      	ldr	r2, [pc, #104]	; (1cc54 <net_context_get+0x204>)
   1cbea:	fb03 2304 	mla	r3, r3, r4, r2
   1cbee:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cbf2:	f042 0220 	orr.w	r2, r2, #32
   1cbf6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cbfa:	e795      	b.n	1cb28 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1cbfc:	2368      	movs	r3, #104	; 0x68
   1cbfe:	4a15      	ldr	r2, [pc, #84]	; (1cc54 <net_context_get+0x204>)
   1cc00:	fb03 2304 	mla	r3, r3, r4, r2
   1cc04:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1cc08:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1cc0c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1cc10:	e797      	b.n	1cb42 <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1cc12:	4629      	mov	r1, r5
   1cc14:	4650      	mov	r0, sl
   1cc16:	f7ff fcf1 	bl	1c5fc <find_available_port>
   1cc1a:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1cc1c:	2800      	cmp	r0, #0
   1cc1e:	d1b2      	bne.n	1cb86 <net_context_get+0x136>
				return -EADDRINUSE;
   1cc20:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1cc24:	e7c1      	b.n	1cbaa <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1cc26:	f06f 0401 	mvn.w	r4, #1
   1cc2a:	e7bb      	b.n	1cba4 <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1cc2c:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1cc30:	e7bb      	b.n	1cbaa <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1cc32:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1cc36:	e7b8      	b.n	1cbaa <net_context_get+0x15a>
		return -EPROTOTYPE;
   1cc38:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1cc3c:	e7b5      	b.n	1cbaa <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1cc3e:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1cc42:	e7b2      	b.n	1cbaa <net_context_get+0x15a>
		return -EINVAL;
   1cc44:	f06f 0415 	mvn.w	r4, #21
   1cc48:	e7af      	b.n	1cbaa <net_context_get+0x15a>
				return -ENOBUFS;
   1cc4a:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1cc4e:	e7ac      	b.n	1cbaa <net_context_get+0x15a>
   1cc50:	20001f18 	.word	0x20001f18
   1cc54:	20001ca8 	.word	0x20001ca8
   1cc58:	0001cd29 	.word	0x0001cd29
   1cc5c:	0001cd1d 	.word	0x0001cd1d

0001cc60 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1cc60:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1cc62:	f3bf 8f5b 	dmb	ish
   1cc66:	e853 0f00 	ldrex	r0, [r3]
   1cc6a:	1c42      	adds	r2, r0, #1
   1cc6c:	e843 2100 	strex	r1, r2, [r3]
   1cc70:	2900      	cmp	r1, #0
   1cc72:	d1f8      	bne.n	1cc66 <net_context_ref+0x6>
   1cc74:	f3bf 8f5b 	dmb	ish
}
   1cc78:	3001      	adds	r0, #1
   1cc7a:	4770      	bx	lr

0001cc7c <net_context_unref>:
{
   1cc7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1cc7e:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1cc80:	f3bf 8f5b 	dmb	ish
   1cc84:	e852 3f00 	ldrex	r3, [r2]
   1cc88:	1e59      	subs	r1, r3, #1
   1cc8a:	e842 1400 	strex	r4, r1, [r2]
   1cc8e:	2c00      	cmp	r4, #0
   1cc90:	d1f8      	bne.n	1cc84 <net_context_unref+0x8>
   1cc92:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1cc96:	2b01      	cmp	r3, #1
   1cc98:	d001      	beq.n	1cc9e <net_context_unref+0x22>
		return old_rc - 1;
   1cc9a:	1e58      	subs	r0, r3, #1
   1cc9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1cc9e:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1cca0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cca4:	481b      	ldr	r0, [pc, #108]	; (1cd14 <net_context_unref+0x98>)
   1cca6:	f00c fbc3 	bl	29430 <_impl_k_sem_take>
	if (context->tcp) {
   1ccaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ccac:	b13b      	cbz	r3, 1ccbe <net_context_unref+0x42>
   1ccae:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1ccb0:	2d00      	cmp	r5, #0
   1ccb2:	dd15      	ble.n	1cce0 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1ccb4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ccb6:	f006 fe3d 	bl	23934 <net_tcp_release>
		context->tcp = NULL;
   1ccba:	2300      	movs	r3, #0
   1ccbc:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1ccbe:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1ccc0:	b118      	cbz	r0, 1ccca <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1ccc2:	f008 fb13 	bl	252ec <net_conn_unregister>
		context->conn_handler = NULL;
   1ccc6:	2300      	movs	r3, #0
   1ccc8:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1ccca:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1ccce:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1ccd2:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1ccd6:	480f      	ldr	r0, [pc, #60]	; (1cd14 <net_context_unref+0x98>)
   1ccd8:	f00c fb97 	bl	2940a <_impl_k_sem_give>
	return 0;
   1ccdc:	2000      	movs	r0, #0
}
   1ccde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1cce0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1cce4:	0113      	lsls	r3, r2, #4
   1cce6:	4a0c      	ldr	r2, [pc, #48]	; (1cd18 <net_context_unref+0x9c>)
   1cce8:	58d2      	ldr	r2, [r2, r3]
   1ccea:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ccec:	429a      	cmp	r2, r3
   1ccee:	d001      	beq.n	1ccf4 <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1ccf0:	3501      	adds	r5, #1
   1ccf2:	e7dd      	b.n	1ccb0 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1ccf4:	4f08      	ldr	r7, [pc, #32]	; (1cd18 <net_context_unref+0x9c>)
   1ccf6:	00ae      	lsls	r6, r5, #2
   1ccf8:	1972      	adds	r2, r6, r5
   1ccfa:	0113      	lsls	r3, r2, #4
   1ccfc:	3328      	adds	r3, #40	; 0x28
   1ccfe:	18f8      	adds	r0, r7, r3
   1cd00:	f00d f972 	bl	29fe8 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1cd04:	442e      	add	r6, r5
   1cd06:	0130      	lsls	r0, r6, #4
   1cd08:	2250      	movs	r2, #80	; 0x50
   1cd0a:	2100      	movs	r1, #0
   1cd0c:	4438      	add	r0, r7
   1cd0e:	f00d fe2f 	bl	2a970 <memset>
   1cd12:	e7ed      	b.n	1ccf0 <net_context_unref+0x74>
   1cd14:	20001f18 	.word	0x20001f18
   1cd18:	20001f30 	.word	0x20001f30

0001cd1c <handle_fin_timeout>:
{
   1cd1c:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1cd1e:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1cd22:	f7ff ffab 	bl	1cc7c <net_context_unref>
   1cd26:	bd08      	pop	{r3, pc}

0001cd28 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1cd28:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1cd2c:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1cd30:	2b06      	cmp	r3, #6
   1cd32:	d000      	beq.n	1cd36 <handle_ack_timeout+0xe>
   1cd34:	4770      	bx	lr
{
   1cd36:	b510      	push	{r4, lr}
   1cd38:	f1a0 0208 	sub.w	r2, r0, #8
   1cd3c:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1cd3e:	2100      	movs	r1, #0
   1cd40:	4610      	mov	r0, r2
   1cd42:	f006 fdcc 	bl	238de <net_tcp_change_state>
		net_context_unref(tcp->context);
   1cd46:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1cd4a:	f7ff ff97 	bl	1cc7c <net_context_unref>
   1cd4e:	bd10      	pop	{r4, pc}

0001cd50 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1cd50:	b570      	push	{r4, r5, r6, lr}
   1cd52:	4605      	mov	r5, r0
   1cd54:	460e      	mov	r6, r1
   1cd56:	4614      	mov	r4, r2
   1cd58:	4610      	mov	r0, r2
   1cd5a:	f7ff ff81 	bl	1cc60 <net_context_ref>
   1cd5e:	4622      	mov	r2, r4
   1cd60:	4631      	mov	r1, r6
   1cd62:	4628      	mov	r0, r5
   1cd64:	f7ff fd5e 	bl	1c824 <_tcp_synack_received>
   1cd68:	4605      	mov	r5, r0
   1cd6a:	4620      	mov	r0, r4
   1cd6c:	f7ff ff86 	bl	1cc7c <net_context_unref>
   1cd70:	4628      	mov	r0, r5
   1cd72:	bd70      	pop	{r4, r5, r6, pc}

0001cd74 <_tcp_established>:
{
   1cd74:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1cd78:	b087      	sub	sp, #28
   1cd7a:	4607      	mov	r7, r0
   1cd7c:	460e      	mov	r6, r1
   1cd7e:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1cd80:	a901      	add	r1, sp, #4
   1cd82:	4630      	mov	r0, r6
   1cd84:	f006 ff9a 	bl	23cbc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1cd88:	2800      	cmp	r0, #0
   1cd8a:	f000 80b5 	beq.w	1cef8 <_tcp_established+0x184>
   1cd8e:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1cd90:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1cd92:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1cd96:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1cd9a:	2b03      	cmp	r3, #3
   1cd9c:	d804      	bhi.n	1cda8 <_tcp_established+0x34>
		return NET_DROP;
   1cd9e:	2502      	movs	r5, #2
}
   1cda0:	4628      	mov	r0, r5
   1cda2:	b007      	add	sp, #28
   1cda4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1cda8:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1cdac:	f018 0f10 	tst.w	r8, #16
   1cdb0:	d116      	bne.n	1cde0 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1cdb2:	f018 0f04 	tst.w	r8, #4
   1cdb6:	d121      	bne.n	1cdfc <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1cdb8:	792a      	ldrb	r2, [r5, #4]
   1cdba:	796b      	ldrb	r3, [r5, #5]
   1cdbc:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1cdc0:	79a9      	ldrb	r1, [r5, #6]
   1cdc2:	79eb      	ldrb	r3, [r5, #7]
   1cdc4:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1cdc8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1cdcc:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1cdce:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1cdd2:	1a99      	subs	r1, r3, r2
   1cdd4:	2900      	cmp	r1, #0
   1cdd6:	db2e      	blt.n	1ce36 <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1cdd8:	429a      	cmp	r2, r3
   1cdda:	d033      	beq.n	1ce44 <_tcp_established+0xd0>
		return NET_DROP;
   1cddc:	2502      	movs	r5, #2
   1cdde:	e7df      	b.n	1cda0 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1cde0:	7a03      	ldrb	r3, [r0, #8]
   1cde2:	7a41      	ldrb	r1, [r0, #9]
   1cde4:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1cde8:	7a82      	ldrb	r2, [r0, #10]
   1cdea:	7ac3      	ldrb	r3, [r0, #11]
   1cdec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1cdf0:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1cdf4:	4620      	mov	r0, r4
   1cdf6:	f007 fa49 	bl	2428c <net_tcp_ack_received>
   1cdfa:	e7da      	b.n	1cdb2 <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1cdfc:	4631      	mov	r1, r6
   1cdfe:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ce00:	f006 ffd7 	bl	23db2 <net_tcp_validate_seq>
   1ce04:	b928      	cbnz	r0, 1ce12 <_tcp_established+0x9e>
   1ce06:	4a3d      	ldr	r2, [pc, #244]	; (1cefc <_tcp_established+0x188>)
   1ce08:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1ce0a:	3301      	adds	r3, #1
   1ce0c:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1ce0e:	2502      	movs	r5, #2
   1ce10:	e7c6      	b.n	1cda0 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1ce12:	4a3a      	ldr	r2, [pc, #232]	; (1cefc <_tcp_established+0x188>)
   1ce14:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1ce16:	3301      	adds	r3, #1
   1ce18:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1ce1a:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1ce1c:	b135      	cbz	r5, 1ce2c <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1ce1e:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1ce20:	685b      	ldr	r3, [r3, #4]
   1ce22:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1ce26:	2100      	movs	r1, #0
   1ce28:	4620      	mov	r0, r4
   1ce2a:	47a8      	blx	r5
		net_context_unref(context);
   1ce2c:	4620      	mov	r0, r4
   1ce2e:	f7ff ff25 	bl	1cc7c <net_context_unref>
		return NET_DROP;
   1ce32:	2502      	movs	r5, #2
   1ce34:	e7b4      	b.n	1cda0 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1ce36:	2201      	movs	r2, #1
   1ce38:	4639      	mov	r1, r7
   1ce3a:	4620      	mov	r0, r4
   1ce3c:	f7ff fcd2 	bl	1c7e4 <send_ack>
		return NET_DROP;
   1ce40:	2502      	movs	r5, #2
   1ce42:	e7ad      	b.n	1cda0 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1ce44:	2106      	movs	r1, #6
   1ce46:	4630      	mov	r0, r6
   1ce48:	f7ff fc25 	bl	1c696 <set_appdata_values>
	return pkt->appdatalen;
   1ce4c:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1ce50:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ce52:	f006 fcc5 	bl	237e0 <net_tcp_get_recv_wnd>
   1ce56:	4581      	cmp	r9, r0
   1ce58:	d901      	bls.n	1ce5e <_tcp_established+0xea>
		return NET_DROP;
   1ce5a:	2502      	movs	r5, #2
   1ce5c:	e7a0      	b.n	1cda0 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1ce5e:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ce60:	685a      	ldr	r2, [r3, #4]
   1ce62:	4631      	mov	r1, r6
   1ce64:	4638      	mov	r0, r7
   1ce66:	f7ff fc4b 	bl	1c700 <packet_received>
   1ce6a:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1ce6c:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce6e:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1ce72:	444b      	add	r3, r9
   1ce74:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1ce78:	f018 0f01 	tst.w	r8, #1
   1ce7c:	d022      	beq.n	1cec4 <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1ce7e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce80:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1ce84:	f043 0304 	orr.w	r3, r3, #4
   1ce88:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1ce8c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1ce8e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1ce92:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1ce96:	2b04      	cmp	r3, #4
   1ce98:	d02a      	beq.n	1cef0 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1ce9a:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1ce9c:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1cea0:	3301      	adds	r3, #1
   1cea2:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1cea6:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1cea8:	b12e      	cbz	r6, 1ceb6 <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1ceaa:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1ceac:	685b      	ldr	r3, [r3, #4]
   1ceae:	2200      	movs	r2, #0
   1ceb0:	4611      	mov	r1, r2
   1ceb2:	4620      	mov	r0, r4
   1ceb4:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1ceb6:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1ceb8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cebc:	3108      	adds	r1, #8
   1cebe:	4810      	ldr	r0, [pc, #64]	; (1cf00 <_tcp_established+0x18c>)
   1cec0:	f00d f8ec 	bl	2a09c <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1cec4:	2200      	movs	r2, #0
   1cec6:	4639      	mov	r1, r7
   1cec8:	4620      	mov	r0, r4
   1ceca:	f7ff fc8b 	bl	1c7e4 <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1cece:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1ced0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1ced4:	2a00      	cmp	r2, #0
   1ced6:	f47f af63 	bne.w	1cda0 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1ceda:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1cede:	f003 0306 	and.w	r3, r3, #6
   1cee2:	2b06      	cmp	r3, #6
   1cee4:	f47f af5c 	bne.w	1cda0 <_tcp_established+0x2c>
		net_context_unref(context);
   1cee8:	4620      	mov	r0, r4
   1ceea:	f7ff fec7 	bl	1cc7c <net_context_unref>
   1ceee:	e757      	b.n	1cda0 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1cef0:	2105      	movs	r1, #5
   1cef2:	f006 fcf4 	bl	238de <net_tcp_change_state>
   1cef6:	e7d0      	b.n	1ce9a <_tcp_established+0x126>
		return NET_DROP;
   1cef8:	2502      	movs	r5, #2
   1cefa:	e751      	b.n	1cda0 <_tcp_established+0x2c>
   1cefc:	20002b58 	.word	0x20002b58
   1cf00:	20002c78 	.word	0x20002c78

0001cf04 <tcp_established>:
NET_CONN_CB(tcp_established)
   1cf04:	b570      	push	{r4, r5, r6, lr}
   1cf06:	4605      	mov	r5, r0
   1cf08:	460e      	mov	r6, r1
   1cf0a:	4614      	mov	r4, r2
   1cf0c:	4610      	mov	r0, r2
   1cf0e:	f7ff fea7 	bl	1cc60 <net_context_ref>
   1cf12:	4622      	mov	r2, r4
   1cf14:	4631      	mov	r1, r6
   1cf16:	4628      	mov	r0, r5
   1cf18:	f7ff ff2c 	bl	1cd74 <_tcp_established>
   1cf1c:	4605      	mov	r5, r0
   1cf1e:	4620      	mov	r0, r4
   1cf20:	f7ff feac 	bl	1cc7c <net_context_unref>
   1cf24:	4628      	mov	r0, r5
   1cf26:	bd70      	pop	{r4, r5, r6, pc}

0001cf28 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1cf28:	b390      	cbz	r0, 1cf90 <net_context_put+0x68>
{
   1cf2a:	b510      	push	{r4, lr}
   1cf2c:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1cf2e:	4a1d      	ldr	r2, [pc, #116]	; (1cfa4 <net_context_put+0x7c>)
   1cf30:	4290      	cmp	r0, r2
   1cf32:	d330      	bcc.n	1cf96 <net_context_put+0x6e>
   1cf34:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1cf38:	4290      	cmp	r0, r2
   1cf3a:	d22f      	bcs.n	1cf9c <net_context_put+0x74>
	context->connect_cb = NULL;
   1cf3c:	2200      	movs	r2, #0
   1cf3e:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1cf40:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1cf42:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1cf44:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1cf48:	f012 0f40 	tst.w	r2, #64	; 0x40
   1cf4c:	d007      	beq.n	1cf5e <net_context_put+0x36>
		return IPPROTO_TCP;
   1cf4e:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cf50:	2906      	cmp	r1, #6
   1cf52:	d006      	beq.n	1cf62 <net_context_put+0x3a>
	net_context_unref(context);
   1cf54:	4620      	mov	r0, r4
   1cf56:	f7ff fe91 	bl	1cc7c <net_context_unref>
	return 0;
   1cf5a:	2000      	movs	r0, #0
   1cf5c:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cf5e:	2111      	movs	r1, #17
   1cf60:	e7f6      	b.n	1cf50 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cf62:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1cf66:	2a02      	cmp	r2, #2
   1cf68:	d001      	beq.n	1cf6e <net_context_put+0x46>
   1cf6a:	2a03      	cmp	r2, #3
   1cf6c:	d1f2      	bne.n	1cf54 <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1cf6e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1cf70:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1cf74:	f013 0f04 	tst.w	r3, #4
   1cf78:	d1ec      	bne.n	1cf54 <net_context_put+0x2c>
   1cf7a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1cf7e:	3130      	adds	r1, #48	; 0x30
   1cf80:	4809      	ldr	r0, [pc, #36]	; (1cfa8 <net_context_put+0x80>)
   1cf82:	f00d f88b 	bl	2a09c <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1cf86:	4620      	mov	r0, r4
   1cf88:	f7ff fb59 	bl	1c63e <queue_fin>
			return 0;
   1cf8c:	2000      	movs	r0, #0
   1cf8e:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1cf90:	f06f 0015 	mvn.w	r0, #21
   1cf94:	4770      	bx	lr
   1cf96:	f06f 0015 	mvn.w	r0, #21
   1cf9a:	bd10      	pop	{r4, pc}
   1cf9c:	f06f 0015 	mvn.w	r0, #21
}
   1cfa0:	bd10      	pop	{r4, pc}
   1cfa2:	bf00      	nop
   1cfa4:	20001ca8 	.word	0x20001ca8
   1cfa8:	20002c78 	.word	0x20002c78

0001cfac <net_context_bind>:
	if (context->conn_handler) {
   1cfac:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1cfae:	2b00      	cmp	r3, #0
   1cfb0:	d15c      	bne.n	1d06c <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1cfb2:	880b      	ldrh	r3, [r1, #0]
   1cfb4:	2b0a      	cmp	r3, #10
   1cfb6:	d15d      	bne.n	1d074 <net_context_bind+0xc8>
{
   1cfb8:	b570      	push	{r4, r5, r6, lr}
   1cfba:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1cfbc:	2300      	movs	r3, #0
   1cfbe:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1cfc0:	2a17      	cmp	r2, #23
   1cfc2:	d945      	bls.n	1d050 <net_context_bind+0xa4>
   1cfc4:	460d      	mov	r5, r1
   1cfc6:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1cfc8:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1cfca:	2bff      	cmp	r3, #255	; 0xff
   1cfcc:	d009      	beq.n	1cfe2 <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cfce:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cfd0:	b983      	cbnz	r3, 1cff4 <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cfd2:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1cfd4:	bb2b      	cbnz	r3, 1d022 <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cfd6:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1cfd8:	bb2b      	cbnz	r3, 1d026 <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1cfda:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1cfdc:	b32b      	cbz	r3, 1d02a <net_context_bind+0x7e>
   1cfde:	2300      	movs	r3, #0
   1cfe0:	e009      	b.n	1cff6 <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1cfe2:	a901      	add	r1, sp, #4
   1cfe4:	1d28      	adds	r0, r5, #4
   1cfe6:	f7fe fccb 	bl	1b980 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1cfea:	4606      	mov	r6, r0
   1cfec:	2800      	cmp	r0, #0
   1cfee:	d034      	beq.n	1d05a <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1cff0:	3608      	adds	r6, #8
   1cff2:	e007      	b.n	1d004 <net_context_bind+0x58>
   1cff4:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1cff6:	b1d3      	cbz	r3, 1d02e <net_context_bind+0x82>
			iface = net_if_get_default();
   1cff8:	f7fe fa4c 	bl	1b494 <net_if_get_default>
   1cffc:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1cffe:	f002 fde9 	bl	1fbd4 <net_ipv6_unspecified_address>
   1d002:	4606      	mov	r6, r0
		if (!iface) {
   1d004:	9801      	ldr	r0, [sp, #4]
   1d006:	b370      	cbz	r0, 1d066 <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1d008:	f7ff f9ec 	bl	1c3e4 <net_if_get_by_iface>
   1d00c:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d010:	230a      	movs	r3, #10
   1d012:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1d014:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1d016:	8869      	ldrh	r1, [r5, #2]
   1d018:	b989      	cbnz	r1, 1d03e <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1d01a:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1d01c:	806b      	strh	r3, [r5, #2]
		return 0;
   1d01e:	2300      	movs	r3, #0
   1d020:	e018      	b.n	1d054 <net_context_bind+0xa8>
   1d022:	2300      	movs	r3, #0
   1d024:	e7e7      	b.n	1cff6 <net_context_bind+0x4a>
   1d026:	2300      	movs	r3, #0
   1d028:	e7e5      	b.n	1cff6 <net_context_bind+0x4a>
   1d02a:	2301      	movs	r3, #1
   1d02c:	e7e3      	b.n	1cff6 <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1d02e:	a901      	add	r1, sp, #4
   1d030:	1d28      	adds	r0, r5, #4
   1d032:	f7fe fa5b 	bl	1b4ec <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1d036:	4606      	mov	r6, r0
   1d038:	b190      	cbz	r0, 1d060 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1d03a:	3604      	adds	r6, #4
   1d03c:	e7e2      	b.n	1d004 <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1d03e:	462a      	mov	r2, r5
   1d040:	4618      	mov	r0, r3
   1d042:	f7ff fa9f 	bl	1c584 <check_used_port>
			if (!ret) {
   1d046:	4603      	mov	r3, r0
   1d048:	b920      	cbnz	r0, 1d054 <net_context_bind+0xa8>
					addr6->sin6_port;
   1d04a:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1d04c:	8162      	strh	r2, [r4, #10]
   1d04e:	e001      	b.n	1d054 <net_context_bind+0xa8>
			return -EINVAL;
   1d050:	f06f 0315 	mvn.w	r3, #21
}
   1d054:	4618      	mov	r0, r3
   1d056:	b002      	add	sp, #8
   1d058:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1d05a:	f06f 0301 	mvn.w	r3, #1
   1d05e:	e7f9      	b.n	1d054 <net_context_bind+0xa8>
				return -ENOENT;
   1d060:	f06f 0301 	mvn.w	r3, #1
   1d064:	e7f6      	b.n	1d054 <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1d066:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1d06a:	e7f3      	b.n	1d054 <net_context_bind+0xa8>
		return -EISCONN;
   1d06c:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1d070:	4618      	mov	r0, r3
   1d072:	4770      	bx	lr
	return -EINVAL;
   1d074:	f06f 0315 	mvn.w	r3, #21
   1d078:	e7fa      	b.n	1d070 <net_context_bind+0xc4>

0001d07a <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d07a:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d07e:	f013 0f10 	tst.w	r3, #16
   1d082:	d006      	beq.n	1d092 <bind_default+0x18>
		return AF_INET6;
   1d084:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1d086:	2b0a      	cmp	r3, #10
   1d088:	d120      	bne.n	1d0cc <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d08a:	68c3      	ldr	r3, [r0, #12]
   1d08c:	b11b      	cbz	r3, 1d096 <bind_default+0x1c>
			return 0;
   1d08e:	2000      	movs	r0, #0
   1d090:	4770      	bx	lr
	return AF_INET;
   1d092:	2302      	movs	r3, #2
   1d094:	e7f7      	b.n	1d086 <bind_default+0xc>
{
   1d096:	b530      	push	{r4, r5, lr}
   1d098:	b087      	sub	sp, #28
   1d09a:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1d09c:	ad06      	add	r5, sp, #24
   1d09e:	230a      	movs	r3, #10
   1d0a0:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1d0a4:	f002 fd96 	bl	1fbd4 <net_ipv6_unspecified_address>
   1d0a8:	2210      	movs	r2, #16
   1d0aa:	4601      	mov	r1, r0
   1d0ac:	a801      	add	r0, sp, #4
   1d0ae:	f7e3 f907 	bl	2c0 <memcpy>
			find_available_port(context,
   1d0b2:	4629      	mov	r1, r5
   1d0b4:	4620      	mov	r0, r4
   1d0b6:	f7ff faa1 	bl	1c5fc <find_available_port>
		addr6.sin6_port =
   1d0ba:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1d0be:	2218      	movs	r2, #24
   1d0c0:	4629      	mov	r1, r5
   1d0c2:	4620      	mov	r0, r4
   1d0c4:	f7ff ff72 	bl	1cfac <net_context_bind>
}
   1d0c8:	b007      	add	sp, #28
   1d0ca:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1d0cc:	f06f 0015 	mvn.w	r0, #21
   1d0d0:	4770      	bx	lr

0001d0d2 <sendto>:
{
   1d0d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d0d4:	b085      	sub	sp, #20
   1d0d6:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1d0d8:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1d0da:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d0de:	f010 0f01 	tst.w	r0, #1
   1d0e2:	d072      	beq.n	1d1ca <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d0e4:	f010 0f40 	tst.w	r0, #64	; 0x40
   1d0e8:	d01f      	beq.n	1d12a <sendto+0x58>
		return IPPROTO_TCP;
   1d0ea:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d0ee:	f1be 0f06 	cmp.w	lr, #6
   1d0f2:	d01d      	beq.n	1d130 <sendto+0x5e>
   1d0f4:	461f      	mov	r7, r3
   1d0f6:	4616      	mov	r6, r2
   1d0f8:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d0fa:	f1be 0f11 	cmp.w	lr, #17
   1d0fe:	d024      	beq.n	1d14a <sendto+0x78>
	if (!dst_addr) {
   1d100:	2c00      	cmp	r4, #0
   1d102:	d068      	beq.n	1d1d6 <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1d104:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1d106:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1d10a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1d10e:	2b0a      	cmp	r3, #10
   1d110:	d164      	bne.n	1d1dc <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d112:	2e17      	cmp	r6, #23
   1d114:	d965      	bls.n	1d1e2 <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d116:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d118:	b9f3      	cbnz	r3, 1d158 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d11a:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d11c:	bb63      	cbnz	r3, 1d178 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d11e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d120:	bb63      	cbnz	r3, 1d17c <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d122:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d124:	b363      	cbz	r3, 1d180 <sendto+0xae>
   1d126:	2300      	movs	r3, #0
   1d128:	e017      	b.n	1d15a <sendto+0x88>
	return IPPROTO_UDP;
   1d12a:	f04f 0e11 	mov.w	lr, #17
   1d12e:	e7de      	b.n	1d0ee <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d130:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1d134:	2802      	cmp	r0, #2
   1d136:	d14b      	bne.n	1d1d0 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d138:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1d13a:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1d13e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d142:	d0d7      	beq.n	1d0f4 <sendto+0x22>
			return -ESHUTDOWN;
   1d144:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1d148:	e03c      	b.n	1d1c4 <sendto+0xf2>
		ret = bind_default(context);
   1d14a:	4628      	mov	r0, r5
   1d14c:	f7ff ff95 	bl	1d07a <bind_default>
		if (ret) {
   1d150:	4603      	mov	r3, r0
   1d152:	2800      	cmp	r0, #0
   1d154:	d0d4      	beq.n	1d100 <sendto+0x2e>
   1d156:	e035      	b.n	1d1c4 <sendto+0xf2>
   1d158:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d15a:	2b00      	cmp	r3, #0
   1d15c:	d144      	bne.n	1d1e8 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d15e:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1d162:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d166:	d00d      	beq.n	1d184 <sendto+0xb2>
		return IPPROTO_TCP;
   1d168:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d16a:	2b11      	cmp	r3, #17
   1d16c:	d00c      	beq.n	1d188 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d16e:	2b06      	cmp	r3, #6
   1d170:	d13d      	bne.n	1d1ee <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1d172:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1d174:	2000      	movs	r0, #0
   1d176:	e011      	b.n	1d19c <sendto+0xca>
   1d178:	2300      	movs	r3, #0
   1d17a:	e7ee      	b.n	1d15a <sendto+0x88>
   1d17c:	2300      	movs	r3, #0
   1d17e:	e7ec      	b.n	1d15a <sendto+0x88>
   1d180:	2301      	movs	r3, #1
   1d182:	e7ea      	b.n	1d15a <sendto+0x88>
	return IPPROTO_UDP;
   1d184:	2311      	movs	r3, #17
   1d186:	e7f0      	b.n	1d16a <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1d188:	ab03      	add	r3, sp, #12
   1d18a:	4622      	mov	r2, r4
   1d18c:	4628      	mov	r0, r5
   1d18e:	f7ff fc0f 	bl	1c9b0 <create_udp_packet>
   1d192:	4603      	mov	r3, r0
   1d194:	e009      	b.n	1d1aa <sendto+0xd8>
		bytes += buf->len;
   1d196:	8994      	ldrh	r4, [r2, #12]
   1d198:	4420      	add	r0, r4
		buf = buf->frags;
   1d19a:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1d19c:	2a00      	cmp	r2, #0
   1d19e:	d1fa      	bne.n	1d196 <sendto+0xc4>
	pkt->appdatalen = len;
   1d1a0:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1d1a2:	4628      	mov	r0, r5
   1d1a4:	f006 fd08 	bl	23bb8 <net_tcp_queue_data>
   1d1a8:	4603      	mov	r3, r0
	if (ret < 0) {
   1d1aa:	2b00      	cmp	r3, #0
   1d1ac:	db0a      	blt.n	1d1c4 <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1d1ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1d1b0:	9301      	str	r3, [sp, #4]
   1d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1d1b4:	9300      	str	r3, [sp, #0]
   1d1b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1d1b8:	463a      	mov	r2, r7
   1d1ba:	9903      	ldr	r1, [sp, #12]
   1d1bc:	4628      	mov	r0, r5
   1d1be:	f7ff fc1d 	bl	1c9fc <send_data>
   1d1c2:	4603      	mov	r3, r0
}
   1d1c4:	4618      	mov	r0, r3
   1d1c6:	b005      	add	sp, #20
   1d1c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1d1ca:	f06f 0308 	mvn.w	r3, #8
   1d1ce:	e7f9      	b.n	1d1c4 <sendto+0xf2>
			return -ENOTCONN;
   1d1d0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1d1d4:	e7f6      	b.n	1d1c4 <sendto+0xf2>
		return -EDESTADDRREQ;
   1d1d6:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d1da:	e7f3      	b.n	1d1c4 <sendto+0xf2>
		return -EINVAL;
   1d1dc:	f06f 0315 	mvn.w	r3, #21
   1d1e0:	e7f0      	b.n	1d1c4 <sendto+0xf2>
			return -EINVAL;
   1d1e2:	f06f 0315 	mvn.w	r3, #21
   1d1e6:	e7ed      	b.n	1d1c4 <sendto+0xf2>
			return -EDESTADDRREQ;
   1d1e8:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1d1ec:	e7ea      	b.n	1d1c4 <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1d1ee:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1d1f2:	e7e7      	b.n	1d1c4 <sendto+0xf2>

0001d1f4 <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1d1f4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d1f6:	b08f      	sub	sp, #60	; 0x3c
   1d1f8:	4604      	mov	r4, r0
   1d1fa:	460d      	mov	r5, r1
   1d1fc:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1d1fe:	2300      	movs	r3, #0
   1d200:	9304      	str	r3, [sp, #16]
   1d202:	9305      	str	r3, [sp, #20]
   1d204:	9306      	str	r3, [sp, #24]
   1d206:	9307      	str	r3, [sp, #28]
   1d208:	9308      	str	r3, [sp, #32]
   1d20a:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d20c:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1d210:	f013 0f10 	tst.w	r3, #16
   1d214:	d037      	beq.n	1d286 <recv_udp+0x92>
		return AF_INET6;
   1d216:	230a      	movs	r3, #10
   1d218:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1d21c:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1d21e:	b118      	cbz	r0, 1d228 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1d220:	f008 f864 	bl	252ec <net_conn_unregister>
		context->conn_handler = NULL;
   1d224:	2300      	movs	r3, #0
   1d226:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1d228:	4620      	mov	r0, r4
   1d22a:	f7ff ff26 	bl	1d07a <bind_default>
	if (ret) {
   1d22e:	4603      	mov	r3, r0
   1d230:	bb30      	cbnz	r0, 1d280 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d232:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1d236:	f017 0f10 	tst.w	r7, #16
   1d23a:	d026      	beq.n	1d28a <recv_udp+0x96>
		return AF_INET6;
   1d23c:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1d23e:	2b0a      	cmp	r3, #10
   1d240:	d025      	beq.n	1d28e <recv_udp+0x9a>
	u16_t lport = 0;
   1d242:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1d246:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1d248:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1d24a:	f017 0f40 	tst.w	r7, #64	; 0x40
   1d24e:	d037      	beq.n	1d2c0 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1d250:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1d252:	f017 0f80 	tst.w	r7, #128	; 0x80
   1d256:	d135      	bne.n	1d2c4 <recv_udp+0xd0>
   1d258:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1d25a:	8ae5      	ldrh	r5, [r4, #22]
   1d25c:	022b      	lsls	r3, r5, #8
   1d25e:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1d262:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1d266:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d26a:	b2ad      	uxth	r5, r5
   1d26c:	342c      	adds	r4, #44	; 0x2c
   1d26e:	9403      	str	r4, [sp, #12]
   1d270:	9602      	str	r6, [sp, #8]
   1d272:	4c16      	ldr	r4, [pc, #88]	; (1d2cc <recv_udp+0xd8>)
   1d274:	9401      	str	r4, [sp, #4]
   1d276:	9500      	str	r5, [sp, #0]
   1d278:	b29b      	uxth	r3, r3
   1d27a:	f008 f855 	bl	25328 <net_conn_register>
   1d27e:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1d280:	4618      	mov	r0, r3
   1d282:	b00f      	add	sp, #60	; 0x3c
   1d284:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1d286:	2302      	movs	r3, #2
   1d288:	e7c6      	b.n	1d218 <recv_udp+0x24>
   1d28a:	2302      	movs	r3, #2
   1d28c:	e7d7      	b.n	1d23e <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d28e:	68e3      	ldr	r3, [r4, #12]
   1d290:	b1a3      	cbz	r3, 1d2bc <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d292:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1d296:	6818      	ldr	r0, [r3, #0]
   1d298:	6859      	ldr	r1, [r3, #4]
   1d29a:	689a      	ldr	r2, [r3, #8]
   1d29c:	68db      	ldr	r3, [r3, #12]
   1d29e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1d2a2:	f10d 0e14 	add.w	lr, sp, #20
   1d2a6:	ab0e      	add	r3, sp, #56	; 0x38
   1d2a8:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d2ac:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d2b0:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1d2b2:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1d2b6:	f8ad e012 	strh.w	lr, [sp, #18]
   1d2ba:	e7c5      	b.n	1d248 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1d2bc:	2200      	movs	r2, #0
   1d2be:	e7f8      	b.n	1d2b2 <recv_udp+0xbe>
	return IPPROTO_UDP;
   1d2c0:	2011      	movs	r0, #17
   1d2c2:	e7c6      	b.n	1d252 <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1d2c4:	f104 0114 	add.w	r1, r4, #20
   1d2c8:	e7c7      	b.n	1d25a <recv_udp+0x66>
   1d2ca:	bf00      	nop
   1d2cc:	0001c701 	.word	0x0001c701

0001d2d0 <net_context_connect>:
{
   1d2d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d2d4:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1d2d6:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1d2da:	f014 0f01 	tst.w	r4, #1
   1d2de:	f000 80c9 	beq.w	1d474 <net_context_connect+0x1a4>
   1d2e2:	461f      	mov	r7, r3
   1d2e4:	4615      	mov	r5, r2
   1d2e6:	460e      	mov	r6, r1
   1d2e8:	4604      	mov	r4, r0
	ret = bind_default(context);
   1d2ea:	f7ff fec6 	bl	1d07a <bind_default>
	if (ret) {
   1d2ee:	4680      	mov	r8, r0
   1d2f0:	2800      	cmp	r0, #0
   1d2f2:	f040 80c1 	bne.w	1d478 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1d2f6:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d2f8:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d2fc:	f013 0f10 	tst.w	r3, #16
   1d300:	d02b      	beq.n	1d35a <net_context_connect+0x8a>
		return AF_INET6;
   1d302:	220a      	movs	r2, #10
   1d304:	4291      	cmp	r1, r2
   1d306:	f040 80bb 	bne.w	1d480 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d30a:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1d30e:	2b03      	cmp	r3, #3
   1d310:	f000 80b9 	beq.w	1d486 <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1d314:	2a0a      	cmp	r2, #10
   1d316:	f040 80b9 	bne.w	1d48c <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1d31a:	2d17      	cmp	r5, #23
   1d31c:	f240 80b9 	bls.w	1d492 <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1d320:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1d322:	2bff      	cmp	r3, #255	; 0xff
   1d324:	f000 80b8 	beq.w	1d498 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1d328:	2210      	movs	r2, #16
   1d32a:	1d31      	adds	r1, r6, #4
   1d32c:	f104 0018 	add.w	r0, r4, #24
   1d330:	f7e2 ffc6 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1d334:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1d338:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1d33c:	230a      	movs	r3, #10
   1d33e:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d340:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d342:	b963      	cbnz	r3, 1d35e <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d344:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1d346:	2b00      	cmp	r3, #0
   1d348:	d174      	bne.n	1d434 <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d34a:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1d34c:	2b00      	cmp	r3, #0
   1d34e:	d173      	bne.n	1d438 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1d350:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1d352:	2b00      	cmp	r3, #0
   1d354:	d072      	beq.n	1d43c <net_context_connect+0x16c>
   1d356:	4643      	mov	r3, r8
   1d358:	e002      	b.n	1d360 <net_context_connect+0x90>
	return AF_INET;
   1d35a:	2202      	movs	r2, #2
   1d35c:	e7d2      	b.n	1d304 <net_context_connect+0x34>
   1d35e:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1d360:	f013 0f01 	tst.w	r3, #1
   1d364:	d16c      	bne.n	1d440 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1d366:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d36a:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1d36e:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1d372:	230a      	movs	r3, #10
   1d374:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1d376:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1d37a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1d37e:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1d382:	68e3      	ldr	r3, [r4, #12]
   1d384:	2b00      	cmp	r3, #0
   1d386:	d062      	beq.n	1d44e <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1d388:	ad0c      	add	r5, sp, #48	; 0x30
   1d38a:	6818      	ldr	r0, [r3, #0]
   1d38c:	6859      	ldr	r1, [r3, #4]
   1d38e:	689a      	ldr	r2, [r3, #8]
   1d390:	68db      	ldr	r3, [r3, #12]
   1d392:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1d394:	ad07      	add	r5, sp, #28
   1d396:	ab10      	add	r3, sp, #64	; 0x40
   1d398:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1d39c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1d3a0:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1d3a2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d3a6:	f013 0f20 	tst.w	r3, #32
   1d3aa:	d052      	beq.n	1d452 <net_context_connect+0x182>
		return SOCK_STREAM;
   1d3ac:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1d3ae:	2b02      	cmp	r3, #2
   1d3b0:	d051      	beq.n	1d456 <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1d3b2:	2b01      	cmp	r3, #1
   1d3b4:	d173      	bne.n	1d49e <net_context_connect+0x1ce>
			       ntohs(rport),
   1d3b6:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1d3ba:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1d3be:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1d3c2:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1d3c6:	b289      	uxth	r1, r1
   1d3c8:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1d3cc:	9003      	str	r0, [sp, #12]
   1d3ce:	9402      	str	r4, [sp, #8]
   1d3d0:	4835      	ldr	r0, [pc, #212]	; (1d4a8 <net_context_connect+0x1d8>)
   1d3d2:	9001      	str	r0, [sp, #4]
   1d3d4:	9100      	str	r1, [sp, #0]
   1d3d6:	b29b      	uxth	r3, r3
   1d3d8:	4631      	mov	r1, r6
   1d3da:	2006      	movs	r0, #6
   1d3dc:	f007 ffa4 	bl	25328 <net_conn_register>
	if (ret < 0) {
   1d3e0:	2800      	cmp	r0, #0
   1d3e2:	db5f      	blt.n	1d4a4 <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1d3e4:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1d3e6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1d3e8:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1d3ea:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d3ee:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1d3f2:	f043 0302 	orr.w	r3, r3, #2
   1d3f6:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1d3fa:	2102      	movs	r1, #2
   1d3fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d3fe:	f006 fa6e 	bl	238de <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1d402:	2200      	movs	r2, #0
   1d404:	ab10      	add	r3, sp, #64	; 0x40
   1d406:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1d40a:	9302      	str	r3, [sp, #8]
   1d40c:	9601      	str	r6, [sp, #4]
   1d40e:	9200      	str	r2, [sp, #0]
   1d410:	4613      	mov	r3, r2
   1d412:	2102      	movs	r1, #2
   1d414:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1d416:	f006 faff 	bl	23a18 <net_tcp_prepare_segment>
	if (ret) {
   1d41a:	b310      	cbz	r0, 1d462 <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1d41c:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1d41e:	b35b      	cbz	r3, 1d478 <net_context_connect+0x1a8>
   1d420:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1d422:	4619      	mov	r1, r3
   1d424:	30ac      	adds	r0, #172	; 0xac
   1d426:	f00c f803 	bl	29430 <_impl_k_sem_take>
   1d42a:	4680      	mov	r8, r0
   1d42c:	b320      	cbz	r0, 1d478 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1d42e:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1d432:	e021      	b.n	1d478 <net_context_connect+0x1a8>
   1d434:	4643      	mov	r3, r8
   1d436:	e793      	b.n	1d360 <net_context_connect+0x90>
   1d438:	4643      	mov	r3, r8
   1d43a:	e791      	b.n	1d360 <net_context_connect+0x90>
   1d43c:	2301      	movs	r3, #1
   1d43e:	e78f      	b.n	1d360 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1d440:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d444:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1d448:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1d44c:	e791      	b.n	1d372 <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1d44e:	2200      	movs	r2, #0
   1d450:	e7a7      	b.n	1d3a2 <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1d452:	2302      	movs	r3, #2
   1d454:	e7ab      	b.n	1d3ae <net_context_connect+0xde>
		if (cb) {
   1d456:	b17f      	cbz	r7, 1d478 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1d458:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1d45a:	2100      	movs	r1, #0
   1d45c:	4620      	mov	r0, r4
   1d45e:	47b8      	blx	r7
   1d460:	e00a      	b.n	1d478 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1d462:	9805      	ldr	r0, [sp, #20]
   1d464:	f7fd fdf4 	bl	1b050 <net_send_data>
	if (ret < 0) {
   1d468:	2800      	cmp	r0, #0
   1d46a:	dad7      	bge.n	1d41c <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1d46c:	9805      	ldr	r0, [sp, #20]
   1d46e:	f000 f9f0 	bl	1d852 <net_pkt_unref>
   1d472:	e7d3      	b.n	1d41c <net_context_connect+0x14c>
		return -EBADF;
   1d474:	f06f 0808 	mvn.w	r8, #8
}
   1d478:	4640      	mov	r0, r8
   1d47a:	b010      	add	sp, #64	; 0x40
   1d47c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1d480:	f06f 0815 	mvn.w	r8, #21
   1d484:	e7f8      	b.n	1d478 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1d486:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1d48a:	e7f5      	b.n	1d478 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1d48c:	f06f 0815 	mvn.w	r8, #21
   1d490:	e7f2      	b.n	1d478 <net_context_connect+0x1a8>
			return -EINVAL;
   1d492:	f06f 0815 	mvn.w	r8, #21
   1d496:	e7ef      	b.n	1d478 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1d498:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1d49c:	e7ec      	b.n	1d478 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1d49e:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1d4a2:	e7e9      	b.n	1d478 <net_context_connect+0x1a8>
		return ret;
   1d4a4:	4680      	mov	r8, r0
   1d4a6:	e7e7      	b.n	1d478 <net_context_connect+0x1a8>
   1d4a8:	0001cd51 	.word	0x0001cd51

0001d4ac <net_context_send>:
{
   1d4ac:	b5f0      	push	{r4, r5, r6, r7, lr}
   1d4ae:	b085      	sub	sp, #20
	return pkt->context;
   1d4b0:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d4b2:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1d4b6:	2d00      	cmp	r5, #0
   1d4b8:	da17      	bge.n	1d4ea <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1d4ba:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1d4bc:	b1c5      	cbz	r5, 1d4f0 <net_context_send+0x44>
	return pkt->family;
   1d4be:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1d4c2:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1d4c6:	2d0a      	cmp	r5, #10
   1d4c8:	d00d      	beq.n	1d4e6 <net_context_send+0x3a>
		addrlen = 0;
   1d4ca:	2700      	movs	r7, #0
   1d4cc:	461e      	mov	r6, r3
   1d4ce:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1d4d0:	990a      	ldr	r1, [sp, #40]	; 0x28
   1d4d2:	9102      	str	r1, [sp, #8]
   1d4d4:	9601      	str	r6, [sp, #4]
   1d4d6:	9200      	str	r2, [sp, #0]
   1d4d8:	463a      	mov	r2, r7
   1d4da:	f104 0114 	add.w	r1, r4, #20
   1d4de:	f7ff fdf8 	bl	1d0d2 <sendto>
}
   1d4e2:	b005      	add	sp, #20
   1d4e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1d4e6:	2718      	movs	r7, #24
   1d4e8:	e7f0      	b.n	1d4cc <net_context_send+0x20>
		return -EDESTADDRREQ;
   1d4ea:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d4ee:	e7f8      	b.n	1d4e2 <net_context_send+0x36>
   1d4f0:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1d4f4:	e7f5      	b.n	1d4e2 <net_context_send+0x36>

0001d4f6 <net_context_sendto>:
{
   1d4f6:	b510      	push	{r4, lr}
   1d4f8:	b084      	sub	sp, #16
   1d4fa:	461c      	mov	r4, r3
	return pkt->context;
   1d4fc:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1d4fe:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1d502:	f013 0f40 	tst.w	r3, #64	; 0x40
   1d506:	d00d      	beq.n	1d524 <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1d508:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d50a:	2b06      	cmp	r3, #6
   1d50c:	d00c      	beq.n	1d528 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1d50e:	9b08      	ldr	r3, [sp, #32]
   1d510:	9302      	str	r3, [sp, #8]
   1d512:	9b07      	ldr	r3, [sp, #28]
   1d514:	9301      	str	r3, [sp, #4]
   1d516:	9b06      	ldr	r3, [sp, #24]
   1d518:	9300      	str	r3, [sp, #0]
   1d51a:	4623      	mov	r3, r4
   1d51c:	f7ff fdd9 	bl	1d0d2 <sendto>
}
   1d520:	b004      	add	sp, #16
   1d522:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1d524:	2311      	movs	r3, #17
   1d526:	e7f0      	b.n	1d50a <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1d528:	9b08      	ldr	r3, [sp, #32]
   1d52a:	9300      	str	r3, [sp, #0]
   1d52c:	9b07      	ldr	r3, [sp, #28]
   1d52e:	9a06      	ldr	r2, [sp, #24]
   1d530:	4621      	mov	r1, r4
   1d532:	f7ff ffbb 	bl	1d4ac <net_context_send>
   1d536:	e7f3      	b.n	1d520 <net_context_sendto+0x2a>

0001d538 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1d538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1d53a:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1d53e:	f014 0f01 	tst.w	r4, #1
   1d542:	d030      	beq.n	1d5a6 <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1d544:	f014 0f40 	tst.w	r4, #64	; 0x40
   1d548:	d023      	beq.n	1d592 <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1d54a:	2606      	movs	r6, #6
   1d54c:	4617      	mov	r7, r2
   1d54e:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1d550:	2e11      	cmp	r6, #17
   1d552:	d020      	beq.n	1d596 <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1d554:	2e06      	cmp	r6, #6
   1d556:	d129      	bne.n	1d5ac <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1d558:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1d55a:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1d55e:	f410 7f80 	tst.w	r0, #256	; 0x100
   1d562:	d126      	bne.n	1d5b2 <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1d564:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1d568:	2c02      	cmp	r4, #2
   1d56a:	d125      	bne.n	1d5b8 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1d56c:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1d56e:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1d570:	b32f      	cbz	r7, 1d5be <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1d572:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1d576:	2100      	movs	r1, #0
   1d578:	4620      	mov	r0, r4
   1d57a:	f00b ff59 	bl	29430 <_impl_k_sem_take>
   1d57e:	4606      	mov	r6, r0
   1d580:	2800      	cmp	r0, #0
   1d582:	d1f6      	bne.n	1d572 <net_context_recv+0x3a>
   1d584:	4639      	mov	r1, r7
   1d586:	4620      	mov	r0, r4
   1d588:	f00b ff52 	bl	29430 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1d58c:	b140      	cbz	r0, 1d5a0 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1d58e:	4630      	mov	r0, r6
   1d590:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1d592:	2611      	movs	r6, #17
   1d594:	e7da      	b.n	1d54c <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1d596:	f7ff fe2d 	bl	1d1f4 <recv_udp>
		if (ret < 0) {
   1d59a:	1e06      	subs	r6, r0, #0
   1d59c:	dae8      	bge.n	1d570 <net_context_recv+0x38>
   1d59e:	e7f6      	b.n	1d58e <net_context_recv+0x56>
			return -ETIMEDOUT;
   1d5a0:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1d5a4:	e7f3      	b.n	1d58e <net_context_recv+0x56>
		return -EBADF;
   1d5a6:	f06f 0608 	mvn.w	r6, #8
   1d5aa:	e7f0      	b.n	1d58e <net_context_recv+0x56>
		return -EPROTOTYPE;
   1d5ac:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1d5b0:	e7ed      	b.n	1d58e <net_context_recv+0x56>
			return -ESHUTDOWN;
   1d5b2:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1d5b6:	e7ea      	b.n	1d58e <net_context_recv+0x56>
			return -ENOTCONN;
   1d5b8:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1d5bc:	e7e7      	b.n	1d58e <net_context_recv+0x56>
	return 0;
   1d5be:	2600      	movs	r6, #0
   1d5c0:	e7e5      	b.n	1d58e <net_context_recv+0x56>
	...

0001d5c4 <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1d5c4:	b570      	push	{r4, r5, r6, lr}
   1d5c6:	4606      	mov	r6, r0
   1d5c8:	460d      	mov	r5, r1
   1d5ca:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1d5ce:	480d      	ldr	r0, [pc, #52]	; (1d604 <net_context_foreach+0x40>)
   1d5d0:	f00b ff2e 	bl	29430 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1d5d4:	2400      	movs	r4, #0
   1d5d6:	e000      	b.n	1d5da <net_context_foreach+0x16>
   1d5d8:	3401      	adds	r4, #1
   1d5da:	2c05      	cmp	r4, #5
   1d5dc:	dc0e      	bgt.n	1d5fc <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1d5de:	2368      	movs	r3, #104	; 0x68
   1d5e0:	4a09      	ldr	r2, [pc, #36]	; (1d608 <net_context_foreach+0x44>)
   1d5e2:	fb03 2304 	mla	r3, r3, r4, r2
   1d5e6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1d5ea:	f013 0f01 	tst.w	r3, #1
   1d5ee:	d0f3      	beq.n	1d5d8 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1d5f0:	4629      	mov	r1, r5
   1d5f2:	2068      	movs	r0, #104	; 0x68
   1d5f4:	fb00 2004 	mla	r0, r0, r4, r2
   1d5f8:	47b0      	blx	r6
   1d5fa:	e7ed      	b.n	1d5d8 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1d5fc:	4801      	ldr	r0, [pc, #4]	; (1d604 <net_context_foreach+0x40>)
   1d5fe:	f00b ff04 	bl	2940a <_impl_k_sem_give>
   1d602:	bd70      	pop	{r4, r5, r6, pc}
   1d604:	20001f18 	.word	0x20001f18
   1d608:	20001ca8 	.word	0x20001ca8

0001d60c <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1d60c:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1d60e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1d612:	2101      	movs	r1, #1
   1d614:	4801      	ldr	r0, [pc, #4]	; (1d61c <net_context_init+0x10>)
   1d616:	f00b feef 	bl	293f8 <_impl_k_sem_init>
   1d61a:	bd08      	pop	{r3, pc}
   1d61c:	20001f18 	.word	0x20001f18

0001d620 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d620:	b570      	push	{r4, r5, r6, lr}
   1d622:	b082      	sub	sp, #8
   1d624:	4604      	mov	r4, r0
   1d626:	460d      	mov	r5, r1
   1d628:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1d62a:	f00c f863 	bl	296f4 <k_is_in_isr>
   1d62e:	b198      	cbz	r0, 1d658 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1d630:	2200      	movs	r2, #0
   1d632:	a901      	add	r1, sp, #4
   1d634:	4620      	mov	r0, r4
   1d636:	f00a fde9 	bl	2820c <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1d63a:	b998      	cbnz	r0, 1d664 <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1d63c:	2244      	movs	r2, #68	; 0x44
   1d63e:	2100      	movs	r1, #0
   1d640:	9801      	ldr	r0, [sp, #4]
   1d642:	f00d f995 	bl	2a970 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1d646:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1d648:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1d64c:	2301      	movs	r3, #1
   1d64e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1d652:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1d654:	b002      	add	sp, #8
   1d656:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1d658:	4632      	mov	r2, r6
   1d65a:	a901      	add	r1, sp, #4
   1d65c:	4620      	mov	r0, r4
   1d65e:	f00a fdd5 	bl	2820c <k_mem_slab_alloc>
   1d662:	e7ea      	b.n	1d63a <net_pkt_get_reserve+0x1a>
		return NULL;
   1d664:	2000      	movs	r0, #0
   1d666:	e7f5      	b.n	1d654 <net_pkt_get_reserve+0x34>

0001d668 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1d668:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1d66a:	2900      	cmp	r1, #0
   1d66c:	d038      	beq.n	1d6e0 <net_pkt_get+0x78>
   1d66e:	460c      	mov	r4, r1
   1d670:	4617      	mov	r7, r2
   1d672:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1d674:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d678:	f7fe fea4 	bl	1c3c4 <net_if_get_by_index>
   1d67c:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d67e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d682:	f013 0f10 	tst.w	r3, #16
   1d686:	d024      	beq.n	1d6d2 <net_pkt_get+0x6a>
		return AF_INET6;
   1d688:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d68a:	2b0a      	cmp	r3, #10
   1d68c:	d023      	beq.n	1d6d6 <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1d68e:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1d690:	686b      	ldr	r3, [r5, #4]
   1d692:	689b      	ldr	r3, [r3, #8]
   1d694:	4628      	mov	r0, r5
   1d696:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1d698:	463a      	mov	r2, r7
   1d69a:	4601      	mov	r1, r0
   1d69c:	4630      	mov	r0, r6
   1d69e:	f7ff ffbf 	bl	1d620 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1d6a2:	4603      	mov	r3, r0
   1d6a4:	b198      	cbz	r0, 1d6ce <net_pkt_get+0x66>
	pkt->context = ctx;
   1d6a6:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1d6a8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1d6aa:	7d6a      	ldrb	r2, [r5, #21]
   1d6ac:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1d6b0:	7d6a      	ldrb	r2, [r5, #21]
   1d6b2:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d6b6:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1d6ba:	f012 0f10 	tst.w	r2, #16
   1d6be:	d00d      	beq.n	1d6dc <net_pkt_get+0x74>
		return AF_INET6;
   1d6c0:	210a      	movs	r1, #10
	pkt->family = family;
   1d6c2:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1d6c6:	f361 02c6 	bfi	r2, r1, #3, #4
   1d6ca:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1d6ce:	4618      	mov	r0, r3
   1d6d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1d6d2:	2302      	movs	r3, #2
   1d6d4:	e7d9      	b.n	1d68a <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d6d6:	f104 0118 	add.w	r1, r4, #24
   1d6da:	e7d9      	b.n	1d690 <net_pkt_get+0x28>
   1d6dc:	2102      	movs	r1, #2
   1d6de:	e7f0      	b.n	1d6c2 <net_pkt_get+0x5a>
		return NULL;
   1d6e0:	2300      	movs	r3, #0
   1d6e2:	e7f4      	b.n	1d6ce <net_pkt_get+0x66>

0001d6e4 <net_pkt_get_reserve_data>:
{
   1d6e4:	b570      	push	{r4, r5, r6, lr}
   1d6e6:	4604      	mov	r4, r0
   1d6e8:	460d      	mov	r5, r1
   1d6ea:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1d6ec:	f00c f802 	bl	296f4 <k_is_in_isr>
   1d6f0:	b158      	cbz	r0, 1d70a <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1d6f2:	2100      	movs	r1, #0
   1d6f4:	4620      	mov	r0, r4
   1d6f6:	f7fd facf 	bl	1ac98 <net_buf_alloc>
   1d6fa:	4604      	mov	r4, r0
	if (!frag) {
   1d6fc:	b11c      	cbz	r4, 1d706 <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1d6fe:	4629      	mov	r1, r5
   1d700:	4620      	mov	r0, r4
   1d702:	f7fd fb24 	bl	1ad4e <net_buf_reserve>
}
   1d706:	4620      	mov	r0, r4
   1d708:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1d70a:	4631      	mov	r1, r6
   1d70c:	4620      	mov	r0, r4
   1d70e:	f7fd fac3 	bl	1ac98 <net_buf_alloc>
   1d712:	4604      	mov	r4, r0
   1d714:	e7f2      	b.n	1d6fc <net_pkt_get_reserve_data+0x18>

0001d716 <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1d716:	b1f1      	cbz	r1, 1d756 <_pkt_get_data+0x40>
{
   1d718:	b570      	push	{r4, r5, r6, lr}
   1d71a:	460c      	mov	r4, r1
   1d71c:	4616      	mov	r6, r2
   1d71e:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1d720:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1d724:	f7fe fe4e 	bl	1c3c4 <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1d728:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1d72c:	f013 0f10 	tst.w	r3, #16
   1d730:	d00c      	beq.n	1d74c <_pkt_get_data+0x36>
		return AF_INET6;
   1d732:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1d734:	2b0a      	cmp	r3, #10
   1d736:	d00b      	beq.n	1d750 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1d738:	2100      	movs	r1, #0
   1d73a:	6843      	ldr	r3, [r0, #4]
   1d73c:	689b      	ldr	r3, [r3, #8]
   1d73e:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1d740:	4632      	mov	r2, r6
   1d742:	4601      	mov	r1, r0
   1d744:	4628      	mov	r0, r5
   1d746:	f7ff ffcd 	bl	1d6e4 <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1d74a:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1d74c:	2302      	movs	r3, #2
   1d74e:	e7f1      	b.n	1d734 <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1d750:	f104 0118 	add.w	r1, r4, #24
   1d754:	e7f1      	b.n	1d73a <_pkt_get_data+0x24>
		return NULL;
   1d756:	2000      	movs	r0, #0
   1d758:	4770      	bx	lr
	...

0001d75c <net_pkt_get_reserve_rx>:
{
   1d75c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1d75e:	460a      	mov	r2, r1
   1d760:	4601      	mov	r1, r0
   1d762:	4802      	ldr	r0, [pc, #8]	; (1d76c <net_pkt_get_reserve_rx+0x10>)
   1d764:	f7ff ff5c 	bl	1d620 <net_pkt_get_reserve>
}
   1d768:	bd08      	pop	{r3, pc}
   1d76a:	bf00      	nop
   1d76c:	2000d100 	.word	0x2000d100

0001d770 <net_pkt_get_reserve_tx>:
{
   1d770:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1d772:	460a      	mov	r2, r1
   1d774:	4601      	mov	r1, r0
   1d776:	4802      	ldr	r0, [pc, #8]	; (1d780 <net_pkt_get_reserve_tx+0x10>)
   1d778:	f7ff ff52 	bl	1d620 <net_pkt_get_reserve>
}
   1d77c:	bd08      	pop	{r3, pc}
   1d77e:	bf00      	nop
   1d780:	2000d11c 	.word	0x2000d11c

0001d784 <net_pkt_get_reserve_rx_data>:
{
   1d784:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1d786:	460a      	mov	r2, r1
   1d788:	4601      	mov	r1, r0
   1d78a:	4802      	ldr	r0, [pc, #8]	; (1d794 <net_pkt_get_reserve_rx_data+0x10>)
   1d78c:	f7ff ffaa 	bl	1d6e4 <net_pkt_get_reserve_data>
}
   1d790:	bd08      	pop	{r3, pc}
   1d792:	bf00      	nop
   1d794:	2000d280 	.word	0x2000d280

0001d798 <net_pkt_get_reserve_tx_data>:
{
   1d798:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1d79a:	460a      	mov	r2, r1
   1d79c:	4601      	mov	r1, r0
   1d79e:	4802      	ldr	r0, [pc, #8]	; (1d7a8 <net_pkt_get_reserve_tx_data+0x10>)
   1d7a0:	f7ff ffa0 	bl	1d6e4 <net_pkt_get_reserve_data>
}
   1d7a4:	bd08      	pop	{r3, pc}
   1d7a6:	bf00      	nop
   1d7a8:	2000d2a0 	.word	0x2000d2a0

0001d7ac <net_pkt_get_frag>:
{
   1d7ac:	b538      	push	{r3, r4, r5, lr}
   1d7ae:	4604      	mov	r4, r0
   1d7b0:	460d      	mov	r5, r1
	return pkt->context;
   1d7b2:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1d7b4:	b143      	cbz	r3, 1d7c8 <net_pkt_get_frag+0x1c>
   1d7b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1d7b8:	b133      	cbz	r3, 1d7c8 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1d7ba:	4798      	blx	r3
   1d7bc:	462a      	mov	r2, r5
   1d7be:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1d7c2:	f7ff ff8f 	bl	1d6e4 <net_pkt_get_reserve_data>
   1d7c6:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1d7c8:	6862      	ldr	r2, [r4, #4]
   1d7ca:	4b07      	ldr	r3, [pc, #28]	; (1d7e8 <net_pkt_get_frag+0x3c>)
   1d7cc:	429a      	cmp	r2, r3
   1d7ce:	d005      	beq.n	1d7dc <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1d7d0:	4629      	mov	r1, r5
   1d7d2:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d7d6:	f7ff ffdf 	bl	1d798 <net_pkt_get_reserve_tx_data>
}
   1d7da:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1d7dc:	4629      	mov	r1, r5
   1d7de:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1d7e2:	f7ff ffcf 	bl	1d784 <net_pkt_get_reserve_rx_data>
   1d7e6:	bd38      	pop	{r3, r4, r5, pc}
   1d7e8:	2000d100 	.word	0x2000d100

0001d7ec <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1d7ec:	b538      	push	{r3, r4, r5, lr}
   1d7ee:	4604      	mov	r4, r0
   1d7f0:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1d7f2:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1d7f4:	b133      	cbz	r3, 1d804 <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1d7f6:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d7f8:	b130      	cbz	r0, 1d808 <net_pkt_get_tx+0x1c>
   1d7fa:	462a      	mov	r2, r5
   1d7fc:	4621      	mov	r1, r4
   1d7fe:	f7ff ff33 	bl	1d668 <net_pkt_get>
}
   1d802:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d804:	2000      	movs	r0, #0
   1d806:	e7f7      	b.n	1d7f8 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1d808:	4800      	ldr	r0, [pc, #0]	; (1d80c <net_pkt_get_tx+0x20>)
   1d80a:	e7f6      	b.n	1d7fa <net_pkt_get_tx+0xe>
   1d80c:	2000d11c 	.word	0x2000d11c

0001d810 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1d810:	b538      	push	{r3, r4, r5, lr}
   1d812:	4604      	mov	r4, r0
   1d814:	460d      	mov	r5, r1
	if (context->data_pool) {
   1d816:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1d818:	b133      	cbz	r3, 1d828 <net_pkt_get_data+0x18>
		return context->data_pool();
   1d81a:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d81c:	b130      	cbz	r0, 1d82c <net_pkt_get_data+0x1c>
   1d81e:	462a      	mov	r2, r5
   1d820:	4621      	mov	r1, r4
   1d822:	f7ff ff78 	bl	1d716 <_pkt_get_data>
}
   1d826:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1d828:	2000      	movs	r0, #0
   1d82a:	e7f7      	b.n	1d81c <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1d82c:	4800      	ldr	r0, [pc, #0]	; (1d830 <net_pkt_get_data+0x20>)
   1d82e:	e7f6      	b.n	1d81e <net_pkt_get_data+0xe>
   1d830:	2000d2a0 	.word	0x2000d2a0

0001d834 <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1d834:	4603      	mov	r3, r0
   1d836:	b120      	cbz	r0, 1d842 <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1d838:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1d83c:	3201      	adds	r2, #1
   1d83e:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1d842:	4618      	mov	r0, r3
   1d844:	4770      	bx	lr

0001d846 <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1d846:	b118      	cbz	r0, 1d850 <net_pkt_frag_unref+0xa>
{
   1d848:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1d84a:	f7fd fa93 	bl	1ad74 <net_buf_unref>
   1d84e:	bd08      	pop	{r3, pc}
   1d850:	4770      	bx	lr

0001d852 <net_pkt_unref>:
{
   1d852:	b500      	push	{lr}
   1d854:	b083      	sub	sp, #12
   1d856:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1d858:	b188      	cbz	r0, 1d87e <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1d85a:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1d85e:	b173      	cbz	r3, 1d87e <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1d860:	3b01      	subs	r3, #1
   1d862:	b2db      	uxtb	r3, r3
   1d864:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1d868:	b94b      	cbnz	r3, 1d87e <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1d86a:	6880      	ldr	r0, [r0, #8]
   1d86c:	b108      	cbz	r0, 1d872 <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1d86e:	f7ff ffea 	bl	1d846 <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1d872:	a902      	add	r1, sp, #8
   1d874:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1d878:	6858      	ldr	r0, [r3, #4]
   1d87a:	f00a fcf5 	bl	28268 <k_mem_slab_free>
}
   1d87e:	b003      	add	sp, #12
   1d880:	f85d fb04 	ldr.w	pc, [sp], #4

0001d884 <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1d884:	b510      	push	{r4, lr}
   1d886:	4604      	mov	r4, r0
   1d888:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1d88a:	68a3      	ldr	r3, [r4, #8]
   1d88c:	4293      	cmp	r3, r2
   1d88e:	d003      	beq.n	1d898 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1d890:	4611      	mov	r1, r2
   1d892:	f7fd faaf 	bl	1adf4 <net_buf_frag_del>
}
   1d896:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1d898:	2900      	cmp	r1, #0
   1d89a:	d1f9      	bne.n	1d890 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1d89c:	4611      	mov	r1, r2
   1d89e:	f7fd faa9 	bl	1adf4 <net_buf_frag_del>
		pkt->frags = tmp;
   1d8a2:	60a0      	str	r0, [r4, #8]
		return tmp;
   1d8a4:	bd10      	pop	{r4, pc}

0001d8a6 <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1d8a6:	6883      	ldr	r3, [r0, #8]
   1d8a8:	b143      	cbz	r3, 1d8bc <net_pkt_frag_add+0x16>
{
   1d8aa:	b510      	push	{r4, lr}
   1d8ac:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1d8ae:	4618      	mov	r0, r3
   1d8b0:	f7fd fa80 	bl	1adb4 <net_buf_frag_last>
   1d8b4:	4621      	mov	r1, r4
   1d8b6:	f7fd fa83 	bl	1adc0 <net_buf_frag_insert>
   1d8ba:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1d8bc:	6081      	str	r1, [r0, #8]
		return;
   1d8be:	4770      	bx	lr

0001d8c0 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1d8c0:	b538      	push	{r3, r4, r5, lr}
   1d8c2:	4604      	mov	r4, r0
   1d8c4:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1d8c6:	4608      	mov	r0, r1
   1d8c8:	f7fd fa74 	bl	1adb4 <net_buf_frag_last>
   1d8cc:	68a3      	ldr	r3, [r4, #8]
   1d8ce:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1d8d0:	60a5      	str	r5, [r4, #8]
   1d8d2:	bd38      	pop	{r3, r4, r5, pc}

0001d8d4 <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1d8d4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d8d8:	b085      	sub	sp, #20
   1d8da:	9002      	str	r0, [sp, #8]
   1d8dc:	460d      	mov	r5, r1
   1d8de:	4614      	mov	r4, r2
   1d8e0:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1d8e2:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1d8e6:	4619      	mov	r1, r3
   1d8e8:	f7ff ff60 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   1d8ec:	9001      	str	r0, [sp, #4]
   1d8ee:	b1b8      	cbz	r0, 1d920 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1d8f0:	f100 0608 	add.w	r6, r0, #8
   1d8f4:	4630      	mov	r0, r6
   1d8f6:	f7fd faf2 	bl	1aede <net_buf_simple_tailroom>
   1d8fa:	42a0      	cmp	r0, r4
   1d8fc:	d30b      	bcc.n	1d916 <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1d8fe:	4621      	mov	r1, r4
   1d900:	4630      	mov	r0, r6
   1d902:	f7fd fa83 	bl	1ae0c <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1d906:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1d90a:	b14f      	cbz	r7, 1d920 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1d90c:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1d910:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1d914:	e01c      	b.n	1d950 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1d916:	9801      	ldr	r0, [sp, #4]
   1d918:	f7ff ff95 	bl	1d846 <net_pkt_frag_unref>
		return NULL;
   1d91c:	2300      	movs	r3, #0
   1d91e:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1d920:	9801      	ldr	r0, [sp, #4]
   1d922:	b005      	add	sp, #20
   1d924:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1d928:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1d92a:	eba8 0304 	sub.w	r3, r8, r4
   1d92e:	2b00      	cmp	r3, #0
   1d930:	db2e      	blt.n	1d990 <net_pkt_copy+0xbc>
			amount -= left_len;
   1d932:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1d934:	4621      	mov	r1, r4
   1d936:	4630      	mov	r0, r6
   1d938:	f7fd fa68 	bl	1ae0c <net_buf_simple_add>
   1d93c:	4622      	mov	r2, r4
   1d93e:	4649      	mov	r1, r9
   1d940:	f7e2 fcbe 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1d944:	4630      	mov	r0, r6
   1d946:	f7fd faca 	bl	1aede <net_buf_simple_tailroom>
   1d94a:	b180      	cbz	r0, 1d96e <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1d94c:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1d94e:	44a1      	add	r9, r4
	while (orig && amount) {
   1d950:	f1ba 0f00 	cmp.w	sl, #0
   1d954:	d0e4      	beq.n	1d920 <net_pkt_copy+0x4c>
   1d956:	2d00      	cmp	r5, #0
   1d958:	d0e2      	beq.n	1d920 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1d95a:	f10b 0608 	add.w	r6, fp, #8
   1d95e:	4630      	mov	r0, r6
   1d960:	f7fd fabd 	bl	1aede <net_buf_simple_tailroom>
   1d964:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1d966:	42bd      	cmp	r5, r7
   1d968:	d9de      	bls.n	1d928 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1d96a:	46b8      	mov	r8, r7
   1d96c:	e7dd      	b.n	1d92a <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1d96e:	9903      	ldr	r1, [sp, #12]
   1d970:	9802      	ldr	r0, [sp, #8]
   1d972:	f7ff ff1b 	bl	1d7ac <net_pkt_get_frag>
				if (!new_frag) {
   1d976:	4606      	mov	r6, r0
   1d978:	b128      	cbz	r0, 1d986 <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1d97a:	4601      	mov	r1, r0
   1d97c:	4658      	mov	r0, fp
   1d97e:	f7fd fa2a 	bl	1add6 <net_buf_frag_add>
				frag = new_frag;
   1d982:	46b3      	mov	fp, r6
   1d984:	e7e2      	b.n	1d94c <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1d986:	9801      	ldr	r0, [sp, #4]
   1d988:	f7ff ff5d 	bl	1d846 <net_pkt_frag_unref>
					return NULL;
   1d98c:	9601      	str	r6, [sp, #4]
   1d98e:	e7c7      	b.n	1d920 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1d990:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1d994:	4641      	mov	r1, r8
   1d996:	4630      	mov	r0, r6
   1d998:	f7fd fa38 	bl	1ae0c <net_buf_simple_add>
   1d99c:	4642      	mov	r2, r8
   1d99e:	4649      	mov	r1, r9
   1d9a0:	f7e2 fc8e 	bl	2c0 <memcpy>
		orig = orig->frags;
   1d9a4:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1d9a8:	f1ba 0f00 	cmp.w	sl, #0
   1d9ac:	d0d0      	beq.n	1d950 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1d9ae:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1d9b2:	f8da 9008 	ldr.w	r9, [sl, #8]
   1d9b6:	e7cb      	b.n	1d950 <net_pkt_copy+0x7c>

0001d9b8 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1d9b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1d9bc:	4680      	mov	r8, r0
   1d9be:	460e      	mov	r6, r1
   1d9c0:	4615      	mov	r5, r2
   1d9c2:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1d9c4:	89c3      	ldrh	r3, [r0, #14]
   1d9c6:	454b      	cmp	r3, r9
   1d9c8:	d206      	bcs.n	1d9d8 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1d9ca:	f06f 000b 	mvn.w	r0, #11
   1d9ce:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1d9d2:	1a6d      	subs	r5, r5, r1
   1d9d4:	b2ad      	uxth	r5, r5
		src = src->frags;
   1d9d6:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1d9d8:	b336      	cbz	r6, 1da28 <net_frag_linear_copy+0x70>
   1d9da:	89b1      	ldrh	r1, [r6, #12]
   1d9dc:	428d      	cmp	r5, r1
   1d9de:	d2f8      	bcs.n	1d9d2 <net_frag_linear_copy+0x1a>
   1d9e0:	2700      	movs	r7, #0
   1d9e2:	e015      	b.n	1da10 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1d9e4:	89b4      	ldrh	r4, [r6, #12]
   1d9e6:	1b64      	subs	r4, r4, r5
   1d9e8:	454c      	cmp	r4, r9
   1d9ea:	bfa8      	it	ge
   1d9ec:	464c      	movge	r4, r9
   1d9ee:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1d9f0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1d9f4:	68b1      	ldr	r1, [r6, #8]
   1d9f6:	4622      	mov	r2, r4
   1d9f8:	4429      	add	r1, r5
   1d9fa:	4438      	add	r0, r7
   1d9fc:	f7e2 fc60 	bl	2c0 <memcpy>

		copied += to_copy;
   1da00:	4427      	add	r7, r4
   1da02:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1da04:	eba9 0404 	sub.w	r4, r9, r4
   1da08:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1da0c:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1da0e:	2500      	movs	r5, #0
	while (src && len > 0) {
   1da10:	b116      	cbz	r6, 1da18 <net_frag_linear_copy+0x60>
   1da12:	f1b9 0f00 	cmp.w	r9, #0
   1da16:	d1e5      	bne.n	1d9e4 <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1da18:	f1b9 0f00 	cmp.w	r9, #0
   1da1c:	d106      	bne.n	1da2c <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1da1e:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1da22:	2000      	movs	r0, #0
   1da24:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1da28:	2700      	movs	r7, #0
   1da2a:	e7f1      	b.n	1da10 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1da2c:	f06f 000b 	mvn.w	r0, #11
}
   1da30:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001da34 <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1da34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1da38:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1da3a:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1da3c:	2700      	movs	r7, #0

	while (frag) {
   1da3e:	e009      	b.n	1da54 <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1da40:	4630      	mov	r0, r6
   1da42:	f7fd fa4c 	bl	1aede <net_buf_simple_tailroom>
   1da46:	4605      	mov	r5, r0
   1da48:	e011      	b.n	1da6e <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1da4a:	89a3      	ldrh	r3, [r4, #12]
   1da4c:	2b00      	cmp	r3, #0
   1da4e:	d030      	beq.n	1dab2 <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1da50:	4627      	mov	r7, r4
		frag = frag->frags;
   1da52:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1da54:	2c00      	cmp	r4, #0
   1da56:	d031      	beq.n	1dabc <net_pkt_compact+0x88>
		if (frag->frags) {
   1da58:	6823      	ldr	r3, [r4, #0]
   1da5a:	2b00      	cmp	r3, #0
   1da5c:	d0f5      	beq.n	1da4a <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1da5e:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1da60:	f104 0608 	add.w	r6, r4, #8
   1da64:	4630      	mov	r0, r6
   1da66:	f7fd fa3a 	bl	1aede <net_buf_simple_tailroom>
   1da6a:	4285      	cmp	r5, r0
   1da6c:	d8e8      	bhi.n	1da40 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1da6e:	68a0      	ldr	r0, [r4, #8]
   1da70:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1da72:	6821      	ldr	r1, [r4, #0]
   1da74:	462a      	mov	r2, r5
   1da76:	6889      	ldr	r1, [r1, #8]
   1da78:	4418      	add	r0, r3
   1da7a:	f7e2 fc21 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1da7e:	4629      	mov	r1, r5
   1da80:	4630      	mov	r0, r6
   1da82:	f7fd f9c3 	bl	1ae0c <net_buf_simple_add>
			memmove(frag->frags->data,
   1da86:	6823      	ldr	r3, [r4, #0]
   1da88:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1da8a:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1da8c:	1b52      	subs	r2, r2, r5
   1da8e:	1941      	adds	r1, r0, r5
   1da90:	f00c ff0a 	bl	2a8a8 <memmove>
			frag->frags->len -= copy_len;
   1da94:	6822      	ldr	r2, [r4, #0]
   1da96:	8993      	ldrh	r3, [r2, #12]
   1da98:	1b5d      	subs	r5, r3, r5
   1da9a:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1da9c:	4630      	mov	r0, r6
   1da9e:	f7fd fa1e 	bl	1aede <net_buf_simple_tailroom>
   1daa2:	2800      	cmp	r0, #0
   1daa4:	d0d4      	beq.n	1da50 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1daa6:	6822      	ldr	r2, [r4, #0]
   1daa8:	4621      	mov	r1, r4
   1daaa:	4640      	mov	r0, r8
   1daac:	f7ff feea 	bl	1d884 <net_pkt_frag_del>
				continue;
   1dab0:	e7d0      	b.n	1da54 <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1dab2:	4622      	mov	r2, r4
   1dab4:	4639      	mov	r1, r7
   1dab6:	4640      	mov	r0, r8
   1dab8:	f7ff fee4 	bl	1d884 <net_pkt_frag_del>
	}

	return true;
}
   1dabc:	2001      	movs	r0, #1
   1dabe:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001dac2 <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1dac2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1dac6:	b3d0      	cbz	r0, 1db3e <net_pkt_append+0x7c>
   1dac8:	460c      	mov	r4, r1
   1daca:	4690      	mov	r8, r2
   1dacc:	469a      	mov	sl, r3
   1dace:	4681      	mov	r9, r0
   1dad0:	b3ca      	cbz	r2, 1db46 <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1dad2:	6883      	ldr	r3, [r0, #8]
   1dad4:	b133      	cbz	r3, 1dae4 <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1dad6:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1dada:	f7fd f96b 	bl	1adb4 <net_buf_frag_last>
   1dade:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1dae0:	2700      	movs	r7, #0
   1dae2:	e024      	b.n	1db2e <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1dae4:	4651      	mov	r1, sl
   1dae6:	f7ff fe61 	bl	1d7ac <net_pkt_get_frag>
		if (!frag) {
   1daea:	4601      	mov	r1, r0
   1daec:	b368      	cbz	r0, 1db4a <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1daee:	4648      	mov	r0, r9
   1daf0:	f7ff fed9 	bl	1d8a6 <net_pkt_frag_add>
   1daf4:	e7ef      	b.n	1dad6 <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1daf6:	4628      	mov	r0, r5
   1daf8:	f7fd f9f1 	bl	1aede <net_buf_simple_tailroom>
   1dafc:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1dafe:	4631      	mov	r1, r6
   1db00:	4628      	mov	r0, r5
   1db02:	f7fd f983 	bl	1ae0c <net_buf_simple_add>
		memcpy(data, value, count);
   1db06:	4632      	mov	r2, r6
   1db08:	4641      	mov	r1, r8
   1db0a:	f7e2 fbd9 	bl	2c0 <memcpy>
		len -= count;
   1db0e:	1ba4      	subs	r4, r4, r6
   1db10:	b2a4      	uxth	r4, r4
		added_len += count;
   1db12:	4437      	add	r7, r6
   1db14:	b2bf      	uxth	r7, r7
		value += count;
   1db16:	44b0      	add	r8, r6
		if (len == 0) {
   1db18:	b194      	cbz	r4, 1db40 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1db1a:	4651      	mov	r1, sl
   1db1c:	4648      	mov	r0, r9
   1db1e:	f7ff fe45 	bl	1d7ac <net_pkt_get_frag>
		if (!frag) {
   1db22:	4605      	mov	r5, r0
   1db24:	b160      	cbz	r0, 1db40 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1db26:	4601      	mov	r1, r0
   1db28:	4648      	mov	r0, r9
   1db2a:	f7ff febc 	bl	1d8a6 <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1db2e:	3508      	adds	r5, #8
   1db30:	4628      	mov	r0, r5
   1db32:	f7fd f9d4 	bl	1aede <net_buf_simple_tailroom>
   1db36:	4284      	cmp	r4, r0
   1db38:	d2dd      	bcs.n	1daf6 <net_pkt_append+0x34>
   1db3a:	4626      	mov	r6, r4
   1db3c:	e7df      	b.n	1dafe <net_pkt_append+0x3c>
		return 0;
   1db3e:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1db40:	4638      	mov	r0, r7
   1db42:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1db46:	2700      	movs	r7, #0
   1db48:	e7fa      	b.n	1db40 <net_pkt_append+0x7e>
			return 0;
   1db4a:	2700      	movs	r7, #0
   1db4c:	e7f8      	b.n	1db40 <net_pkt_append+0x7e>

0001db4e <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1db4e:	b4f0      	push	{r4, r5, r6, r7}
   1db50:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1db52:	4604      	mov	r4, r0
   1db54:	b188      	cbz	r0, 1db7a <net_frag_read+0x2c>
	while (frag) {
   1db56:	b17c      	cbz	r4, 1db78 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1db58:	89a0      	ldrh	r0, [r4, #12]
   1db5a:	4288      	cmp	r0, r1
   1db5c:	d005      	beq.n	1db6a <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1db5e:	4288      	cmp	r0, r1
   1db60:	d807      	bhi.n	1db72 <net_frag_read+0x24>
		offset -= frag->len;
   1db62:	1a09      	subs	r1, r1, r0
   1db64:	b289      	uxth	r1, r1
		frag = frag->frags;
   1db66:	6824      	ldr	r4, [r4, #0]
   1db68:	e7f5      	b.n	1db56 <net_frag_read+0x8>
			*pos = 0;
   1db6a:	2100      	movs	r1, #0
   1db6c:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1db6e:	6820      	ldr	r0, [r4, #0]
   1db70:	e003      	b.n	1db7a <net_frag_read+0x2c>
			*pos = offset;
   1db72:	8011      	strh	r1, [r2, #0]
			return frag;
   1db74:	4620      	mov	r0, r4
   1db76:	e000      	b.n	1db7a <net_frag_read+0x2c>
	return NULL;
   1db78:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1db7a:	b350      	cbz	r0, 1dbd2 <net_frag_read+0x84>
   1db7c:	2500      	movs	r5, #0
   1db7e:	e00d      	b.n	1db9c <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1db80:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1db82:	3301      	adds	r3, #1
   1db84:	b29b      	uxth	r3, r3
   1db86:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1db88:	8984      	ldrh	r4, [r0, #12]
   1db8a:	42a3      	cmp	r3, r4
   1db8c:	d304      	bcc.n	1db98 <net_frag_read+0x4a>
		*pos = 0;
   1db8e:	2300      	movs	r3, #0
   1db90:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1db92:	6800      	ldr	r0, [r0, #0]
   1db94:	e000      	b.n	1db98 <net_frag_read+0x4a>
						  pos, data + copy++);
   1db96:	4625      	mov	r5, r4
   1db98:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1db9a:	b1c0      	cbz	r0, 1dbce <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1db9c:	1e59      	subs	r1, r3, #1
   1db9e:	b289      	uxth	r1, r1
   1dba0:	b1db      	cbz	r3, 1dbda <net_frag_read+0x8c>
   1dba2:	b1d0      	cbz	r0, 1dbda <net_frag_read+0x8c>
		if (data) {
   1dba4:	2e00      	cmp	r6, #0
   1dba6:	d0eb      	beq.n	1db80 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1dba8:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1dbaa:	1c6c      	adds	r4, r5, #1
   1dbac:	b2a4      	uxth	r4, r4
	if (data) {
   1dbae:	42ee      	cmn	r6, r5
   1dbb0:	d002      	beq.n	1dbb8 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1dbb2:	6887      	ldr	r7, [r0, #8]
   1dbb4:	5cff      	ldrb	r7, [r7, r3]
   1dbb6:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1dbb8:	3301      	adds	r3, #1
   1dbba:	b29b      	uxth	r3, r3
   1dbbc:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1dbbe:	8985      	ldrh	r5, [r0, #12]
   1dbc0:	42ab      	cmp	r3, r5
   1dbc2:	d3e8      	bcc.n	1db96 <net_frag_read+0x48>
		*pos = 0;
   1dbc4:	2300      	movs	r3, #0
   1dbc6:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1dbc8:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1dbca:	4625      	mov	r5, r4
   1dbcc:	e7e4      	b.n	1db98 <net_frag_read+0x4a>
		if (!frag && len) {
   1dbce:	2900      	cmp	r1, #0
   1dbd0:	d0e4      	beq.n	1db9c <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1dbd2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dbd6:	8013      	strh	r3, [r2, #0]

	return NULL;
   1dbd8:	2000      	movs	r0, #0
}
   1dbda:	bcf0      	pop	{r4, r5, r6, r7}
   1dbdc:	4770      	bx	lr

0001dbde <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1dbde:	b510      	push	{r4, lr}
   1dbe0:	b084      	sub	sp, #16
   1dbe2:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1dbe4:	ab03      	add	r3, sp, #12
   1dbe6:	9300      	str	r3, [sp, #0]
   1dbe8:	2302      	movs	r3, #2
   1dbea:	f7ff ffb0 	bl	1db4e <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1dbee:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1dbf2:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1dbf6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dbfa:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1dbfc:	b004      	add	sp, #16
   1dbfe:	bd10      	pop	{r4, pc}

0001dc00 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1dc00:	b510      	push	{r4, lr}
   1dc02:	b084      	sub	sp, #16
   1dc04:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1dc06:	ab03      	add	r3, sp, #12
   1dc08:	9300      	str	r3, [sp, #0]
   1dc0a:	2304      	movs	r3, #4
   1dc0c:	f7ff ff9f 	bl	1db4e <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1dc10:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1dc14:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1dc18:	041b      	lsls	r3, r3, #16
   1dc1a:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1dc1e:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1dc22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1dc26:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1dc2a:	4313      	orrs	r3, r2
   1dc2c:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1dc2e:	b004      	add	sp, #16
   1dc30:	bd10      	pop	{r4, pc}

0001dc32 <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1dc32:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1dc36:	b083      	sub	sp, #12
   1dc38:	9201      	str	r2, [sp, #4]
   1dc3a:	469b      	mov	fp, r3
   1dc3c:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1dc40:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1dc42:	2800      	cmp	r0, #0
   1dc44:	d06d      	beq.n	1dd22 <net_pkt_write+0xf0>
   1dc46:	460c      	mov	r4, r1
   1dc48:	4682      	mov	sl, r0
   1dc4a:	4615      	mov	r5, r2
	if (data) {
   1dc4c:	b364      	cbz	r4, 1dca8 <net_pkt_write+0x76>
		if (!frag) {
   1dc4e:	2c00      	cmp	r4, #0
   1dc50:	d065      	beq.n	1dd1e <net_pkt_write+0xec>
		if (offset < frag->len) {
   1dc52:	89a3      	ldrh	r3, [r4, #12]
   1dc54:	42ab      	cmp	r3, r5
   1dc56:	d863      	bhi.n	1dd20 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1dc58:	d032      	beq.n	1dcc0 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1dc5a:	42ab      	cmp	r3, r5
   1dc5c:	d2f6      	bcs.n	1dc4c <net_pkt_write+0x1a>
			offset -= frag->len;
   1dc5e:	1aed      	subs	r5, r5, r3
   1dc60:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1dc62:	f104 0908 	add.w	r9, r4, #8
   1dc66:	4648      	mov	r0, r9
   1dc68:	f7fd f939 	bl	1aede <net_buf_simple_tailroom>
   1dc6c:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1dc70:	4545      	cmp	r5, r8
   1dc72:	d33a      	bcc.n	1dcea <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1dc74:	4545      	cmp	r5, r8
   1dc76:	d03e      	beq.n	1dcf6 <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1dc78:	4545      	cmp	r5, r8
   1dc7a:	d9e7      	bls.n	1dc4c <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1dc7c:	b281      	uxth	r1, r0
   1dc7e:	4648      	mov	r0, r9
   1dc80:	f7fd f8c4 	bl	1ae0c <net_buf_simple_add>
				offset -= tailroom;
   1dc84:	eba5 0508 	sub.w	r5, r5, r8
   1dc88:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1dc8a:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dc8c:	2c00      	cmp	r4, #0
   1dc8e:	d1dd      	bne.n	1dc4c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dc90:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dc92:	4650      	mov	r0, sl
   1dc94:	f7ff fd8a 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   1dc98:	4604      	mov	r4, r0
   1dc9a:	2800      	cmp	r0, #0
   1dc9c:	d0d6      	beq.n	1dc4c <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1dc9e:	4601      	mov	r1, r0
   1dca0:	4650      	mov	r0, sl
   1dca2:	f7ff fe00 	bl	1d8a6 <net_pkt_frag_add>
   1dca6:	e7d1      	b.n	1dc4c <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1dca8:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dcaa:	4650      	mov	r0, sl
   1dcac:	f7ff fd7e 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   1dcb0:	4604      	mov	r4, r0
   1dcb2:	2800      	cmp	r0, #0
   1dcb4:	d0cb      	beq.n	1dc4e <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1dcb6:	4601      	mov	r1, r0
   1dcb8:	4650      	mov	r0, sl
   1dcba:	f7ff fdf4 	bl	1d8a6 <net_pkt_frag_add>
   1dcbe:	e7c6      	b.n	1dc4e <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1dcc0:	f104 0008 	add.w	r0, r4, #8
   1dcc4:	f7fd f90b 	bl	1aede <net_buf_simple_tailroom>
   1dcc8:	bb50      	cbnz	r0, 1dd20 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1dcca:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dccc:	b10c      	cbz	r4, 1dcd2 <net_pkt_write+0xa0>
			*pos = 0;
   1dcce:	2500      	movs	r5, #0
   1dcd0:	e026      	b.n	1dd20 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dcd2:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dcd4:	4650      	mov	r0, sl
   1dcd6:	f7ff fd69 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   1dcda:	4604      	mov	r4, r0
   1dcdc:	2800      	cmp	r0, #0
   1dcde:	d0f6      	beq.n	1dcce <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1dce0:	4601      	mov	r1, r0
   1dce2:	4650      	mov	r0, sl
   1dce4:	f7ff fddf 	bl	1d8a6 <net_pkt_frag_add>
   1dce8:	e7f1      	b.n	1dcce <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1dcea:	4629      	mov	r1, r5
   1dcec:	4648      	mov	r0, r9
   1dcee:	f7fd f88d 	bl	1ae0c <net_buf_simple_add>
				*pos = frag->len;
   1dcf2:	89a5      	ldrh	r5, [r4, #12]
   1dcf4:	e014      	b.n	1dd20 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1dcf6:	b281      	uxth	r1, r0
   1dcf8:	4648      	mov	r0, r9
   1dcfa:	f7fd f887 	bl	1ae0c <net_buf_simple_add>
				return check_and_create_data(pkt,
   1dcfe:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1dd00:	b10c      	cbz	r4, 1dd06 <net_pkt_write+0xd4>
				*pos = 0;
   1dd02:	2500      	movs	r5, #0
   1dd04:	e00c      	b.n	1dd20 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1dd06:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dd08:	4650      	mov	r0, sl
   1dd0a:	f7ff fd4f 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   1dd0e:	4604      	mov	r4, r0
   1dd10:	2800      	cmp	r0, #0
   1dd12:	d0f6      	beq.n	1dd02 <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1dd14:	4601      	mov	r1, r0
   1dd16:	4650      	mov	r0, sl
   1dd18:	f7ff fdc5 	bl	1d8a6 <net_pkt_frag_add>
   1dd1c:	e7f1      	b.n	1dd02 <net_pkt_write+0xd0>
		if (!frag) {
   1dd1e:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1dd20:	b96c      	cbnz	r4, 1dd3e <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1dd22:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1dd26:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1dd2a:	2000      	movs	r0, #0
   1dd2c:	e02d      	b.n	1dd8a <net_pkt_write+0x158>
		len -= count;
   1dd2e:	eba6 0608 	sub.w	r6, r6, r8
   1dd32:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1dd34:	b32e      	cbz	r6, 1dd82 <net_pkt_write+0x150>
		data += count;
   1dd36:	4447      	add	r7, r8
		frag = frag->frags;
   1dd38:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1dd3a:	b34c      	cbz	r4, 1dd90 <net_pkt_write+0x15e>
		offset = 0;
   1dd3c:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1dd3e:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1dd42:	f104 0908 	add.w	r9, r4, #8
   1dd46:	4648      	mov	r0, r9
   1dd48:	f7fd f8c5 	bl	1aed6 <net_buf_simple_headroom>
   1dd4c:	eba8 0800 	sub.w	r8, r8, r0
   1dd50:	fa1f f888 	uxth.w	r8, r8
   1dd54:	eba8 0805 	sub.w	r8, r8, r5
   1dd58:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1dd5c:	45b0      	cmp	r8, r6
   1dd5e:	bf28      	it	cs
   1dd60:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1dd62:	68a0      	ldr	r0, [r4, #8]
   1dd64:	4642      	mov	r2, r8
   1dd66:	4639      	mov	r1, r7
   1dd68:	4428      	add	r0, r5
   1dd6a:	f7e2 faa9 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1dd6e:	eb05 0108 	add.w	r1, r5, r8
   1dd72:	89a3      	ldrh	r3, [r4, #12]
   1dd74:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1dd76:	2900      	cmp	r1, #0
   1dd78:	ddd9      	ble.n	1dd2e <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1dd7a:	4648      	mov	r0, r9
   1dd7c:	f7fd f846 	bl	1ae0c <net_buf_simple_add>
   1dd80:	e7d5      	b.n	1dd2e <net_pkt_write+0xfc>
			*pos = offset + count;
   1dd82:	4445      	add	r5, r8
   1dd84:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1dd88:	4620      	mov	r0, r4
}
   1dd8a:	b003      	add	sp, #12
   1dd8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1dd90:	990e      	ldr	r1, [sp, #56]	; 0x38
   1dd92:	4650      	mov	r0, sl
   1dd94:	f7ff fd0a 	bl	1d7ac <net_pkt_get_frag>
			if (!frag) {
   1dd98:	4604      	mov	r4, r0
   1dd9a:	2800      	cmp	r0, #0
   1dd9c:	d0c1      	beq.n	1dd22 <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1dd9e:	4601      	mov	r1, r0
   1dda0:	4650      	mov	r0, sl
   1dda2:	f7ff fd80 	bl	1d8a6 <net_pkt_frag_add>
   1dda6:	e7c9      	b.n	1dd3c <net_pkt_write+0x10a>

0001dda8 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1dda8:	b170      	cbz	r0, 1ddc8 <net_pkt_get_info+0x20>
{
   1ddaa:	b410      	push	{r4}
   1ddac:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1ddae:	480c      	ldr	r0, [pc, #48]	; (1dde0 <net_pkt_get_info+0x38>)
   1ddb0:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1ddb2:	b109      	cbz	r1, 1ddb8 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1ddb4:	480b      	ldr	r0, [pc, #44]	; (1dde4 <net_pkt_get_info+0x3c>)
   1ddb6:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1ddb8:	b10a      	cbz	r2, 1ddbe <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1ddba:	490b      	ldr	r1, [pc, #44]	; (1dde8 <net_pkt_get_info+0x40>)
   1ddbc:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1ddbe:	b10b      	cbz	r3, 1ddc4 <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1ddc0:	4a0a      	ldr	r2, [pc, #40]	; (1ddec <net_pkt_get_info+0x44>)
   1ddc2:	601a      	str	r2, [r3, #0]
	}
}
   1ddc4:	bc10      	pop	{r4}
   1ddc6:	4770      	bx	lr
	if (tx) {
   1ddc8:	b109      	cbz	r1, 1ddce <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1ddca:	4806      	ldr	r0, [pc, #24]	; (1dde4 <net_pkt_get_info+0x3c>)
   1ddcc:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1ddce:	b10a      	cbz	r2, 1ddd4 <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1ddd0:	4905      	ldr	r1, [pc, #20]	; (1dde8 <net_pkt_get_info+0x40>)
   1ddd2:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1ddd4:	2b00      	cmp	r3, #0
   1ddd6:	d0f6      	beq.n	1ddc6 <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1ddd8:	4a04      	ldr	r2, [pc, #16]	; (1ddec <net_pkt_get_info+0x44>)
   1ddda:	601a      	str	r2, [r3, #0]
   1dddc:	4770      	bx	lr
   1ddde:	bf00      	nop
   1dde0:	2000d100 	.word	0x2000d100
   1dde4:	2000d11c 	.word	0x2000d11c
   1dde8:	2000d280 	.word	0x2000d280
   1ddec:	2000d2a0 	.word	0x2000d2a0

0001ddf0 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1ddf0:	b500      	push	{lr}
   1ddf2:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1ddf4:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1ddf6:	2300      	movs	r3, #0
   1ddf8:	9300      	str	r3, [sp, #0]
   1ddfa:	f7ff fea8 	bl	1db4e <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1ddfe:	b003      	add	sp, #12
   1de00:	f85d fb04 	ldr.w	pc, [sp], #4

0001de04 <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1de04:	b500      	push	{lr}
   1de06:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de08:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1de0c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1de10:	f10d 0206 	add.w	r2, sp, #6
   1de14:	4419      	add	r1, r3
   1de16:	f7ff ffeb 	bl	1ddf0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de1a:	b130      	cbz	r0, 1de2a <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1de1c:	6880      	ldr	r0, [r0, #8]
   1de1e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1de22:	4418      	add	r0, r3
}
   1de24:	b003      	add	sp, #12
   1de26:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de2a:	2000      	movs	r0, #0
   1de2c:	e7fa      	b.n	1de24 <net_pkt_icmp_data+0x20>

0001de2e <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1de2e:	b500      	push	{lr}
   1de30:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de32:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1de36:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1de3a:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1de3c:	4419      	add	r1, r3
   1de3e:	f10d 0206 	add.w	r2, sp, #6
   1de42:	b289      	uxth	r1, r1
   1de44:	f7ff ffd4 	bl	1ddf0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de48:	b130      	cbz	r0, 1de58 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1de4a:	6880      	ldr	r0, [r0, #8]
   1de4c:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1de50:	4418      	add	r0, r3
}
   1de52:	b003      	add	sp, #12
   1de54:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de58:	2000      	movs	r0, #0
   1de5a:	e7fa      	b.n	1de52 <net_pkt_icmp_opt_data+0x24>

0001de5c <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1de5c:	b500      	push	{lr}
   1de5e:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de60:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1de64:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1de68:	f10d 0206 	add.w	r2, sp, #6
   1de6c:	4419      	add	r1, r3
   1de6e:	f7ff ffbf 	bl	1ddf0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de72:	b130      	cbz	r0, 1de82 <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1de74:	6880      	ldr	r0, [r0, #8]
   1de76:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1de7a:	4418      	add	r0, r3
}
   1de7c:	b003      	add	sp, #12
   1de7e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1de82:	2000      	movs	r0, #0
   1de84:	e7fa      	b.n	1de7c <net_pkt_udp_data+0x20>

0001de86 <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1de86:	b500      	push	{lr}
   1de88:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1de8a:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1de8e:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1de92:	f10d 0206 	add.w	r2, sp, #6
   1de96:	4419      	add	r1, r3
   1de98:	f7ff ffaa 	bl	1ddf0 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1de9c:	b130      	cbz	r0, 1deac <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1de9e:	6880      	ldr	r0, [r0, #8]
   1dea0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1dea4:	4418      	add	r0, r3
}
   1dea6:	b003      	add	sp, #12
   1dea8:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1deac:	2000      	movs	r0, #0
   1deae:	e7fa      	b.n	1dea6 <net_pkt_tcp_data+0x20>

0001deb0 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1deb0:	b570      	push	{r4, r5, r6, lr}
   1deb2:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1deb4:	4605      	mov	r5, r0
   1deb6:	2800      	cmp	r0, #0
   1deb8:	d065      	beq.n	1df86 <net_pkt_clone+0xd6>
   1deba:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1debc:	460a      	mov	r2, r1
   1debe:	2100      	movs	r1, #0
   1dec0:	6840      	ldr	r0, [r0, #4]
   1dec2:	f7ff fbad 	bl	1d620 <net_pkt_get_reserve>
	if (!clone) {
   1dec6:	4604      	mov	r4, r0
   1dec8:	2800      	cmp	r0, #0
   1deca:	d054      	beq.n	1df76 <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1decc:	2300      	movs	r3, #0
   1dece:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1ded0:	68ab      	ldr	r3, [r5, #8]
   1ded2:	b173      	cbz	r3, 1def2 <net_pkt_clone+0x42>
   1ded4:	2100      	movs	r1, #0
   1ded6:	e002      	b.n	1dede <net_pkt_clone+0x2e>
		bytes += buf->len;
   1ded8:	899a      	ldrh	r2, [r3, #12]
   1deda:	4411      	add	r1, r2
		buf = buf->frags;
   1dedc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1dede:	2b00      	cmp	r3, #0
   1dee0:	d1fa      	bne.n	1ded8 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1dee2:	4633      	mov	r3, r6
   1dee4:	2200      	movs	r2, #0
   1dee6:	4628      	mov	r0, r5
   1dee8:	f7ff fcf4 	bl	1d8d4 <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1deec:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1deee:	2800      	cmp	r0, #0
   1def0:	d044      	beq.n	1df7c <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1def2:	68eb      	ldr	r3, [r5, #12]
   1def4:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1def6:	692b      	ldr	r3, [r5, #16]
   1def8:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1defa:	696b      	ldr	r3, [r5, #20]
   1defc:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1defe:	68a3      	ldr	r3, [r4, #8]
   1df00:	b1db      	cbz	r3, 1df3a <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1df02:	f10d 0206 	add.w	r2, sp, #6
   1df06:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1df0a:	4620      	mov	r0, r4
   1df0c:	f7ff ff70 	bl	1ddf0 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1df10:	6883      	ldr	r3, [r0, #8]
   1df12:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1df16:	4413      	add	r3, r2
	pkt->appdata = data;
   1df18:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1df1a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1df1c:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1df1e:	2208      	movs	r2, #8
   1df20:	f105 0120 	add.w	r1, r5, #32
   1df24:	f104 0020 	add.w	r0, r4, #32
   1df28:	f7e2 f9ca 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1df2c:	2208      	movs	r2, #8
   1df2e:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1df32:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1df36:	f7e2 f9c3 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1df3a:	2300      	movs	r3, #0
   1df3c:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1df3e:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1df42:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1df46:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1df4a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1df4e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1df52:	f363 02c6 	bfi	r2, r3, #3, #4
   1df56:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1df5a:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1df5e:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1df62:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1df66:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1df6a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1df6e:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1df72:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1df74:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1df76:	4620      	mov	r0, r4
   1df78:	b002      	add	sp, #8
   1df7a:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1df7c:	4620      	mov	r0, r4
   1df7e:	f7ff fc68 	bl	1d852 <net_pkt_unref>
			return NULL;
   1df82:	2400      	movs	r4, #0
   1df84:	e7f7      	b.n	1df76 <net_pkt_clone+0xc6>
		return NULL;
   1df86:	4604      	mov	r4, r0
   1df88:	e7f5      	b.n	1df76 <net_pkt_clone+0xc6>

0001df8a <net_pkt_init>:

void net_pkt_init(void)
{
   1df8a:	4770      	bx	lr

0001df8c <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1df8c:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1df8e:	2a00      	cmp	r2, #0
   1df90:	db03      	blt.n	1df9a <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1df92:	4606      	mov	r6, r0
   1df94:	2409      	movs	r4, #9
   1df96:	4b0e      	ldr	r3, [pc, #56]	; (1dfd0 <net_value_to_udec+0x44>)
   1df98:	e00a      	b.n	1dfb0 <net_value_to_udec+0x24>
		precision = 1;
   1df9a:	2201      	movs	r2, #1
   1df9c:	e7f9      	b.n	1df92 <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1df9e:	3530      	adds	r5, #48	; 0x30
   1dfa0:	7035      	strb	r5, [r6, #0]
			precision = i;
   1dfa2:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1dfa4:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1dfa6:	3c01      	subs	r4, #1
   1dfa8:	4d0a      	ldr	r5, [pc, #40]	; (1dfd4 <net_value_to_udec+0x48>)
   1dfaa:	fba5 5303 	umull	r5, r3, r5, r3
   1dfae:	08db      	lsrs	r3, r3, #3
   1dfb0:	2c00      	cmp	r4, #0
   1dfb2:	db08      	blt.n	1dfc6 <net_value_to_udec+0x3a>
		temp = value / divisor;
   1dfb4:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1dfb8:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1dfbc:	42a2      	cmp	r2, r4
   1dfbe:	dcee      	bgt.n	1df9e <net_value_to_udec+0x12>
   1dfc0:	2d00      	cmp	r5, #0
   1dfc2:	d0f0      	beq.n	1dfa6 <net_value_to_udec+0x1a>
   1dfc4:	e7eb      	b.n	1df9e <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1dfc6:	2300      	movs	r3, #0
   1dfc8:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1dfca:	1a30      	subs	r0, r6, r0
   1dfcc:	bc70      	pop	{r4, r5, r6}
   1dfce:	4770      	bx	lr
   1dfd0:	3b9aca00 	.word	0x3b9aca00
   1dfd4:	cccccccd 	.word	0xcccccccd

0001dfd8 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1dfd8:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1dfda:	3a01      	subs	r2, #1
   1dfdc:	440a      	add	r2, r1

	while (ptr < end) {
   1dfde:	e000      	b.n	1dfe2 <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1dfe0:	3102      	adds	r1, #2
	while (ptr < end) {
   1dfe2:	4291      	cmp	r1, r2
   1dfe4:	d20b      	bcs.n	1dffe <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1dfe6:	780c      	ldrb	r4, [r1, #0]
   1dfe8:	784b      	ldrb	r3, [r1, #1]
   1dfea:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1dfee:	b29b      	uxth	r3, r3
		sum += tmp;
   1dff0:	4418      	add	r0, r3
   1dff2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1dff4:	4283      	cmp	r3, r0
   1dff6:	d9f3      	bls.n	1dfe0 <calc_chksum+0x8>
			sum++;
   1dff8:	3001      	adds	r0, #1
   1dffa:	b280      	uxth	r0, r0
   1dffc:	e7f0      	b.n	1dfe0 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1dffe:	d001      	beq.n	1e004 <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1e000:	bc10      	pop	{r4}
   1e002:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1e004:	780b      	ldrb	r3, [r1, #0]
   1e006:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1e008:	4418      	add	r0, r3
   1e00a:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1e00c:	4283      	cmp	r3, r0
   1e00e:	d9f7      	bls.n	1e000 <calc_chksum+0x28>
			sum++;
   1e010:	3001      	adds	r0, #1
   1e012:	b280      	uxth	r0, r0
   1e014:	e7f4      	b.n	1e000 <calc_chksum+0x28>

0001e016 <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1e016:	b530      	push	{r4, r5, lr}
   1e018:	b083      	sub	sp, #12
   1e01a:	4604      	mov	r4, r0
   1e01c:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1e01e:	220a      	movs	r2, #10
   1e020:	a901      	add	r1, sp, #4
   1e022:	f00d fab7 	bl	2b594 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1e026:	9b01      	ldr	r3, [sp, #4]
   1e028:	429c      	cmp	r4, r3
   1e02a:	d008      	beq.n	1e03e <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1e02c:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1e02e:	b16a      	cbz	r2, 1e04c <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1e030:	781b      	ldrb	r3, [r3, #0]
   1e032:	b973      	cbnz	r3, 1e052 <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1e034:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1e036:	4298      	cmp	r0, r3
   1e038:	d005      	beq.n	1e046 <convert_port+0x30>
		return false;
   1e03a:	2000      	movs	r0, #0
   1e03c:	e007      	b.n	1e04e <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1e03e:	2800      	cmp	r0, #0
   1e040:	d1f4      	bne.n	1e02c <convert_port+0x16>
		return false;
   1e042:	2000      	movs	r0, #0
   1e044:	e003      	b.n	1e04e <convert_port+0x38>
	}

	*port = tmp;
   1e046:	802b      	strh	r3, [r5, #0]

	return true;
   1e048:	2001      	movs	r0, #1
   1e04a:	e000      	b.n	1e04e <convert_port+0x38>
		return false;
   1e04c:	2000      	movs	r0, #0
}
   1e04e:	b003      	add	sp, #12
   1e050:	bd30      	pop	{r4, r5, pc}
		return false;
   1e052:	2000      	movs	r0, #0
   1e054:	e7fb      	b.n	1e04e <convert_port+0x38>

0001e056 <net_byte_to_hex>:
{
   1e056:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e058:	090c      	lsrs	r4, r1, #4
   1e05a:	2500      	movs	r5, #0
   1e05c:	e00a      	b.n	1e074 <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1e05e:	b96b      	cbnz	r3, 1e07c <net_byte_to_hex+0x26>
   1e060:	b12c      	cbz	r4, 1e06e <net_byte_to_hex+0x18>
   1e062:	e00b      	b.n	1e07c <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1e064:	4414      	add	r4, r2
   1e066:	b2e4      	uxtb	r4, r4
   1e068:	3c0a      	subs	r4, #10
   1e06a:	7004      	strb	r4, [r0, #0]
   1e06c:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1e06e:	3501      	adds	r5, #1
   1e070:	f001 040f 	and.w	r4, r1, #15
   1e074:	2d01      	cmp	r5, #1
   1e076:	dc07      	bgt.n	1e088 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1e078:	2d00      	cmp	r5, #0
   1e07a:	d0f0      	beq.n	1e05e <net_byte_to_hex+0x8>
		if (val < 10) {
   1e07c:	2c09      	cmp	r4, #9
   1e07e:	dcf1      	bgt.n	1e064 <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1e080:	3430      	adds	r4, #48	; 0x30
   1e082:	7004      	strb	r4, [r0, #0]
   1e084:	3001      	adds	r0, #1
   1e086:	e7f2      	b.n	1e06e <net_byte_to_hex+0x18>
	*ptr = '\0';
   1e088:	2300      	movs	r3, #0
   1e08a:	7003      	strb	r3, [r0, #0]
}
   1e08c:	bc30      	pop	{r4, r5}
   1e08e:	4770      	bx	lr

0001e090 <net_sprint_ll_addr_buf>:
{
   1e090:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e094:	4607      	mov	r7, r0
   1e096:	460e      	mov	r6, r1
   1e098:	4690      	mov	r8, r2
	switch (ll_len) {
   1e09a:	2906      	cmp	r1, #6
   1e09c:	d002      	beq.n	1e0a4 <net_sprint_ll_addr_buf+0x14>
   1e09e:	2908      	cmp	r1, #8
   1e0a0:	d000      	beq.n	1e0a4 <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1e0a2:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e0a4:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1e0a6:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e0a8:	2400      	movs	r4, #0
   1e0aa:	e00c      	b.n	1e0c6 <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1e0ac:	2301      	movs	r3, #1
   1e0ae:	2241      	movs	r2, #65	; 0x41
   1e0b0:	5d39      	ldrb	r1, [r7, r4]
   1e0b2:	f7ff ffd0 	bl	1e056 <net_byte_to_hex>
   1e0b6:	4602      	mov	r2, r0
		*ptr++ = ':';
   1e0b8:	3001      	adds	r0, #1
   1e0ba:	233a      	movs	r3, #58	; 0x3a
   1e0bc:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1e0be:	3d03      	subs	r5, #3
   1e0c0:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1e0c2:	3401      	adds	r4, #1
   1e0c4:	b2e4      	uxtb	r4, r4
   1e0c6:	42b4      	cmp	r4, r6
   1e0c8:	d201      	bcs.n	1e0ce <net_sprint_ll_addr_buf+0x3e>
   1e0ca:	2d00      	cmp	r5, #0
   1e0cc:	d1ee      	bne.n	1e0ac <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1e0ce:	4540      	cmp	r0, r8
   1e0d0:	d005      	beq.n	1e0de <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1e0d2:	2300      	movs	r3, #0
   1e0d4:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1e0d8:	4640      	mov	r0, r8
   1e0da:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1e0de:	2000      	movs	r0, #0
}
   1e0e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001e0e4 <net_addr_ntop>:
{
   1e0e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e0e8:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1e0ea:	2300      	movs	r3, #0
   1e0ec:	9304      	str	r3, [sp, #16]
   1e0ee:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1e0f0:	280a      	cmp	r0, #10
   1e0f2:	d011      	beq.n	1e118 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1e0f4:	2802      	cmp	r0, #2
   1e0f6:	f040 80c8 	bne.w	1e28a <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1e0fa:	9101      	str	r1, [sp, #4]
		len = 4;
   1e0fc:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1e100:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1e104:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1e108:	f04f 0a01 	mov.w	sl, #1
   1e10c:	9202      	str	r2, [sp, #8]
   1e10e:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1e110:	4616      	mov	r6, r2
	bool needcolon = false;
   1e112:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1e114:	462c      	mov	r4, r5
   1e116:	e072      	b.n	1e1fe <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1e118:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1e11a:	461d      	mov	r5, r3
   1e11c:	e001      	b.n	1e122 <net_addr_ntop+0x3e>
   1e11e:	3501      	adds	r5, #1
   1e120:	b2ed      	uxtb	r5, r5
   1e122:	2d07      	cmp	r5, #7
   1e124:	d810      	bhi.n	1e148 <net_addr_ntop+0x64>
   1e126:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1e128:	2b07      	cmp	r3, #7
   1e12a:	d8f8      	bhi.n	1e11e <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1e12c:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1e130:	2900      	cmp	r1, #0
   1e132:	d1f4      	bne.n	1e11e <net_addr_ntop+0x3a>
				zeros[i]++;
   1e134:	a906      	add	r1, sp, #24
   1e136:	194c      	adds	r4, r1, r5
   1e138:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1e13c:	3101      	adds	r1, #1
   1e13e:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1e142:	3301      	adds	r3, #1
   1e144:	b2db      	uxtb	r3, r3
   1e146:	e7ef      	b.n	1e128 <net_addr_ntop+0x44>
   1e148:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e14c:	f04f 0a01 	mov.w	sl, #1
   1e150:	2300      	movs	r3, #0
   1e152:	e001      	b.n	1e158 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1e154:	3301      	adds	r3, #1
   1e156:	b2db      	uxtb	r3, r3
   1e158:	2b07      	cmp	r3, #7
   1e15a:	d809      	bhi.n	1e170 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1e15c:	a906      	add	r1, sp, #24
   1e15e:	4419      	add	r1, r3
   1e160:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1e164:	458a      	cmp	sl, r1
   1e166:	d2f5      	bcs.n	1e154 <net_addr_ntop+0x70>
				pos = i;
   1e168:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1e16c:	468a      	mov	sl, r1
   1e16e:	e7f1      	b.n	1e154 <net_addr_ntop+0x70>
		if (longest == 1) {
   1e170:	f1ba 0f01 	cmp.w	sl, #1
   1e174:	d004      	beq.n	1e180 <net_addr_ntop+0x9c>
		len = 8;
   1e176:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e17a:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1e17e:	e7c5      	b.n	1e10c <net_addr_ntop+0x28>
		len = 8;
   1e180:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1e184:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1e188:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1e18c:	e7be      	b.n	1e10c <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1e18e:	9a01      	ldr	r2, [sp, #4]
   1e190:	5cd1      	ldrb	r1, [r2, r3]
   1e192:	b28b      	uxth	r3, r1
			if (value == 0) {
   1e194:	b93b      	cbnz	r3, 1e1a6 <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1e196:	4633      	mov	r3, r6
   1e198:	2230      	movs	r2, #48	; 0x30
   1e19a:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1e19e:	f886 b001 	strb.w	fp, [r6, #1]
   1e1a2:	461e      	mov	r6, r3
				continue;
   1e1a4:	e029      	b.n	1e1fa <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1e1a6:	2200      	movs	r2, #0
   1e1a8:	4630      	mov	r0, r6
   1e1aa:	f7ff feef 	bl	1df8c <net_value_to_udec>
			ptr += l;
   1e1ae:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1e1b2:	1c46      	adds	r6, r0, #1
   1e1b4:	f880 b000 	strb.w	fp, [r0]
			continue;
   1e1b8:	e01f      	b.n	1e1fa <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1e1ba:	b905      	cbnz	r5, 1e1be <net_addr_ntop+0xda>
   1e1bc:	b95c      	cbnz	r4, 1e1d6 <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1e1be:	1c73      	adds	r3, r6, #1
   1e1c0:	223a      	movs	r2, #58	; 0x3a
   1e1c2:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1e1c4:	1c5e      	adds	r6, r3, #1
   1e1c6:	223a      	movs	r2, #58	; 0x3a
   1e1c8:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1e1ca:	4454      	add	r4, sl
   1e1cc:	b2e4      	uxtb	r4, r4
   1e1ce:	3c01      	subs	r4, #1
   1e1d0:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1e1d2:	2500      	movs	r5, #0
			continue;
   1e1d4:	e011      	b.n	1e1fa <net_addr_ntop+0x116>
   1e1d6:	4633      	mov	r3, r6
   1e1d8:	e7f4      	b.n	1e1c4 <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1e1da:	2300      	movs	r3, #0
   1e1dc:	2261      	movs	r2, #97	; 0x61
   1e1de:	4630      	mov	r0, r6
   1e1e0:	f7ff ff39 	bl	1e056 <net_byte_to_hex>
   1e1e4:	e002      	b.n	1e1ec <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1e1e6:	1c70      	adds	r0, r6, #1
   1e1e8:	3157      	adds	r1, #87	; 0x57
   1e1ea:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1e1ec:	2301      	movs	r3, #1
   1e1ee:	2261      	movs	r2, #97	; 0x61
   1e1f0:	4629      	mov	r1, r5
   1e1f2:	f7ff ff30 	bl	1e056 <net_byte_to_hex>
   1e1f6:	4606      	mov	r6, r0
		needcolon = true;
   1e1f8:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1e1fa:	3401      	adds	r4, #1
   1e1fc:	b2e4      	uxtb	r4, r4
   1e1fe:	4623      	mov	r3, r4
   1e200:	45a0      	cmp	r8, r4
   1e202:	dd31      	ble.n	1e268 <net_addr_ntop+0x184>
		if (len == 4) {
   1e204:	f1b8 0f04 	cmp.w	r8, #4
   1e208:	d0c1      	beq.n	1e18e <net_addr_ntop+0xaa>
		if (i == pos) {
   1e20a:	454b      	cmp	r3, r9
   1e20c:	d0d5      	beq.n	1e1ba <net_addr_ntop+0xd6>
		if (needcolon) {
   1e20e:	b115      	cbz	r5, 1e216 <net_addr_ntop+0x132>
			*ptr++ = ':';
   1e210:	233a      	movs	r3, #58	; 0x3a
   1e212:	7033      	strb	r3, [r6, #0]
   1e214:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1e216:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1e21a:	021d      	lsls	r5, r3, #8
   1e21c:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1e220:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1e222:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1e226:	b2ed      	uxtb	r5, r5
		if (bh) {
   1e228:	b139      	cbz	r1, 1e23a <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1e22a:	290f      	cmp	r1, #15
   1e22c:	d8d5      	bhi.n	1e1da <net_addr_ntop+0xf6>
				if (bh < 10) {
   1e22e:	2909      	cmp	r1, #9
   1e230:	d8d9      	bhi.n	1e1e6 <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1e232:	1c70      	adds	r0, r6, #1
   1e234:	3130      	adds	r1, #48	; 0x30
   1e236:	7031      	strb	r1, [r6, #0]
   1e238:	e7d8      	b.n	1e1ec <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1e23a:	2d0f      	cmp	r5, #15
   1e23c:	d806      	bhi.n	1e24c <net_addr_ntop+0x168>
			if (bl < 10) {
   1e23e:	2d09      	cmp	r5, #9
   1e240:	d80d      	bhi.n	1e25e <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1e242:	3530      	adds	r5, #48	; 0x30
   1e244:	7035      	strb	r5, [r6, #0]
   1e246:	3601      	adds	r6, #1
		needcolon = true;
   1e248:	2501      	movs	r5, #1
   1e24a:	e7d6      	b.n	1e1fa <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1e24c:	2300      	movs	r3, #0
   1e24e:	2261      	movs	r2, #97	; 0x61
   1e250:	4629      	mov	r1, r5
   1e252:	4630      	mov	r0, r6
   1e254:	f7ff feff 	bl	1e056 <net_byte_to_hex>
   1e258:	4606      	mov	r6, r0
		needcolon = true;
   1e25a:	2501      	movs	r5, #1
   1e25c:	e7cd      	b.n	1e1fa <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1e25e:	3557      	adds	r5, #87	; 0x57
   1e260:	7035      	strb	r5, [r6, #0]
   1e262:	3601      	adds	r6, #1
		needcolon = true;
   1e264:	2501      	movs	r5, #1
   1e266:	e7c8      	b.n	1e1fa <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1e268:	9b02      	ldr	r3, [sp, #8]
   1e26a:	429e      	cmp	r6, r3
   1e26c:	d00f      	beq.n	1e28e <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1e26e:	9b03      	ldr	r3, [sp, #12]
   1e270:	2b02      	cmp	r3, #2
   1e272:	d005      	beq.n	1e280 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1e274:	2300      	movs	r3, #0
   1e276:	7033      	strb	r3, [r6, #0]
	return dst;
   1e278:	9802      	ldr	r0, [sp, #8]
}
   1e27a:	b007      	add	sp, #28
   1e27c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1e280:	2300      	movs	r3, #0
   1e282:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1e286:	9802      	ldr	r0, [sp, #8]
   1e288:	e7f7      	b.n	1e27a <net_addr_ntop+0x196>
		return NULL;
   1e28a:	2000      	movs	r0, #0
   1e28c:	e7f5      	b.n	1e27a <net_addr_ntop+0x196>
		return NULL;
   1e28e:	2000      	movs	r0, #0
   1e290:	e7f3      	b.n	1e27a <net_addr_ntop+0x196>

0001e292 <net_addr_pton>:
{
   1e292:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e296:	b082      	sub	sp, #8
   1e298:	460d      	mov	r5, r1
   1e29a:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1e29c:	2802      	cmp	r0, #2
   1e29e:	d010      	beq.n	1e2c2 <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1e2a0:	280a      	cmp	r0, #10
   1e2a2:	f040 80c6 	bne.w	1e432 <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e2a6:	212e      	movs	r1, #46	; 0x2e
   1e2a8:	4628      	mov	r0, r5
   1e2aa:	f00c fc59 	bl	2ab60 <strchr>
   1e2ae:	b378      	cbz	r0, 1e310 <net_addr_pton+0x7e>
   1e2b0:	2706      	movs	r7, #6
		if (*src == ':') {
   1e2b2:	782b      	ldrb	r3, [r5, #0]
   1e2b4:	2b3a      	cmp	r3, #58	; 0x3a
   1e2b6:	d02d      	beq.n	1e314 <net_addr_pton+0x82>
		len = strlen(src);
   1e2b8:	4628      	mov	r0, r5
   1e2ba:	f7e2 fa21 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e2be:	2300      	movs	r3, #0
   1e2c0:	e02b      	b.n	1e31a <net_addr_pton+0x88>
		len = strlen(src);
   1e2c2:	4608      	mov	r0, r1
   1e2c4:	f7e2 fa1c 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1e2c8:	2300      	movs	r3, #0
   1e2ca:	e000      	b.n	1e2ce <net_addr_pton+0x3c>
   1e2cc:	3301      	adds	r3, #1
   1e2ce:	4283      	cmp	r3, r0
   1e2d0:	d20a      	bcs.n	1e2e8 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e2d2:	5ce9      	ldrb	r1, [r5, r3]
   1e2d4:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e2d8:	b2d2      	uxtb	r2, r2
   1e2da:	2a09      	cmp	r2, #9
   1e2dc:	d9f6      	bls.n	1e2cc <net_addr_pton+0x3a>
   1e2de:	292e      	cmp	r1, #46	; 0x2e
   1e2e0:	d0f4      	beq.n	1e2cc <net_addr_pton+0x3a>
				return -EINVAL;
   1e2e2:	f06f 0015 	mvn.w	r0, #21
   1e2e6:	e0a9      	b.n	1e43c <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1e2e8:	2204      	movs	r2, #4
   1e2ea:	2100      	movs	r1, #0
   1e2ec:	4630      	mov	r0, r6
   1e2ee:	f00c fb3f 	bl	2a970 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e2f2:	2400      	movs	r4, #0
   1e2f4:	e008      	b.n	1e308 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1e2f6:	220a      	movs	r2, #10
   1e2f8:	a901      	add	r1, sp, #4
   1e2fa:	4628      	mov	r0, r5
   1e2fc:	f00d f890 	bl	2b420 <strtol>
   1e300:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e302:	3401      	adds	r4, #1
			src = ++endptr;
   1e304:	9d01      	ldr	r5, [sp, #4]
   1e306:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1e308:	2c03      	cmp	r4, #3
   1e30a:	d9f4      	bls.n	1e2f6 <net_addr_pton+0x64>
	return 0;
   1e30c:	2000      	movs	r0, #0
   1e30e:	e095      	b.n	1e43c <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1e310:	2708      	movs	r7, #8
   1e312:	e7ce      	b.n	1e2b2 <net_addr_pton+0x20>
			src++;
   1e314:	3501      	adds	r5, #1
   1e316:	e7cf      	b.n	1e2b8 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1e318:	3301      	adds	r3, #1
   1e31a:	4283      	cmp	r3, r0
   1e31c:	da16      	bge.n	1e34c <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e31e:	5ce9      	ldrb	r1, [r5, r3]
   1e320:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1e324:	b2d2      	uxtb	r2, r2
   1e326:	2a09      	cmp	r2, #9
   1e328:	d9f6      	bls.n	1e318 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e32a:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1e32e:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1e330:	2a05      	cmp	r2, #5
   1e332:	d9f1      	bls.n	1e318 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e334:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1e338:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1e33a:	2a05      	cmp	r2, #5
   1e33c:	d9ec      	bls.n	1e318 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1e33e:	292e      	cmp	r1, #46	; 0x2e
   1e340:	d0ea      	beq.n	1e318 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1e342:	293a      	cmp	r1, #58	; 0x3a
   1e344:	d0e8      	beq.n	1e318 <net_addr_pton+0x86>
				return -EINVAL;
   1e346:	f06f 0015 	mvn.w	r0, #21
   1e34a:	e077      	b.n	1e43c <net_addr_pton+0x1aa>
   1e34c:	2400      	movs	r4, #0
   1e34e:	e001      	b.n	1e354 <net_addr_pton+0xc2>
				src++;
   1e350:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1e352:	3401      	adds	r4, #1
   1e354:	42bc      	cmp	r4, r7
   1e356:	da3c      	bge.n	1e3d2 <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1e358:	2d00      	cmp	r5, #0
   1e35a:	d06d      	beq.n	1e438 <net_addr_pton+0x1a6>
   1e35c:	782b      	ldrb	r3, [r5, #0]
   1e35e:	2b00      	cmp	r3, #0
   1e360:	d06f      	beq.n	1e442 <net_addr_pton+0x1b0>
			if (*src != ':') {
   1e362:	2b3a      	cmp	r3, #58	; 0x3a
   1e364:	d023      	beq.n	1e3ae <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1e366:	2210      	movs	r2, #16
   1e368:	2100      	movs	r1, #0
   1e36a:	4628      	mov	r0, r5
   1e36c:	f00d f858 	bl	2b420 <strtol>
   1e370:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1e374:	2210      	movs	r2, #16
   1e376:	2100      	movs	r1, #0
   1e378:	4628      	mov	r0, r5
   1e37a:	f00d f851 	bl	2b420 <strtol>
   1e37e:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1e382:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1e386:	213a      	movs	r1, #58	; 0x3a
   1e388:	4628      	mov	r0, r5
   1e38a:	f00c fbe9 	bl	2ab60 <strchr>
				if (!src && i < expected_groups - 1) {
   1e38e:	4605      	mov	r5, r0
   1e390:	2800      	cmp	r0, #0
   1e392:	d1dd      	bne.n	1e350 <net_addr_pton+0xbe>
   1e394:	1e7b      	subs	r3, r7, #1
   1e396:	429c      	cmp	r4, r3
   1e398:	dada      	bge.n	1e350 <net_addr_pton+0xbe>
					return -EINVAL;
   1e39a:	f06f 0015 	mvn.w	r0, #21
   1e39e:	e04d      	b.n	1e43c <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1e3a0:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1e3a4:	2300      	movs	r3, #0
   1e3a6:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1e3aa:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1e3ac:	3401      	adds	r4, #1
   1e3ae:	42bc      	cmp	r4, r7
   1e3b0:	dbf6      	blt.n	1e3a0 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1e3b2:	213a      	movs	r1, #58	; 0x3a
   1e3b4:	4628      	mov	r0, r5
   1e3b6:	f00c fd29 	bl	2ae0c <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e3ba:	4285      	cmp	r5, r0
   1e3bc:	d003      	beq.n	1e3c6 <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1e3be:	2f06      	cmp	r7, #6
   1e3c0:	d00b      	beq.n	1e3da <net_addr_pton+0x148>
			i = expected_groups - 1;
   1e3c2:	1e7c      	subs	r4, r7, #1
   1e3c4:	e00f      	b.n	1e3e6 <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1e3c6:	2f06      	cmp	r7, #6
   1e3c8:	d002      	beq.n	1e3d0 <net_addr_pton+0x13e>
   1e3ca:	786b      	ldrb	r3, [r5, #1]
   1e3cc:	2b00      	cmp	r3, #0
   1e3ce:	d1f6      	bne.n	1e3be <net_addr_pton+0x12c>
				src++;
   1e3d0:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1e3d2:	2f06      	cmp	r7, #6
   1e3d4:	d029      	beq.n	1e42a <net_addr_pton+0x198>
	return 0;
   1e3d6:	2000      	movs	r0, #0
   1e3d8:	e030      	b.n	1e43c <net_addr_pton+0x1aa>
				tmp--;
   1e3da:	3801      	subs	r0, #1
   1e3dc:	e7f1      	b.n	1e3c2 <net_addr_pton+0x130>
			} while (tmp-- != src);
   1e3de:	1e43      	subs	r3, r0, #1
   1e3e0:	4285      	cmp	r5, r0
   1e3e2:	d005      	beq.n	1e3f0 <net_addr_pton+0x15e>
   1e3e4:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1e3e6:	7803      	ldrb	r3, [r0, #0]
   1e3e8:	2b3a      	cmp	r3, #58	; 0x3a
   1e3ea:	d1f8      	bne.n	1e3de <net_addr_pton+0x14c>
					i--;
   1e3ec:	3c01      	subs	r4, #1
   1e3ee:	e7f6      	b.n	1e3de <net_addr_pton+0x14c>
			src++;
   1e3f0:	3501      	adds	r5, #1
   1e3f2:	e7ae      	b.n	1e352 <net_addr_pton+0xc0>
				src++;
   1e3f4:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1e3f6:	3401      	adds	r4, #1
   1e3f8:	2c03      	cmp	r4, #3
   1e3fa:	dc18      	bgt.n	1e42e <net_addr_pton+0x19c>
				if (!src || !*src) {
   1e3fc:	b325      	cbz	r5, 1e448 <net_addr_pton+0x1b6>
   1e3fe:	782b      	ldrb	r3, [r5, #0]
   1e400:	b32b      	cbz	r3, 1e44e <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1e402:	f104 070c 	add.w	r7, r4, #12
   1e406:	220a      	movs	r2, #10
   1e408:	2100      	movs	r1, #0
   1e40a:	4628      	mov	r0, r5
   1e40c:	f00d f808 	bl	2b420 <strtol>
   1e410:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1e412:	212e      	movs	r1, #46	; 0x2e
   1e414:	4628      	mov	r0, r5
   1e416:	f00c fba3 	bl	2ab60 <strchr>
				if (!src && i < 3) {
   1e41a:	4605      	mov	r5, r0
   1e41c:	2800      	cmp	r0, #0
   1e41e:	d1e9      	bne.n	1e3f4 <net_addr_pton+0x162>
   1e420:	2c02      	cmp	r4, #2
   1e422:	dce7      	bgt.n	1e3f4 <net_addr_pton+0x162>
					return -EINVAL;
   1e424:	f06f 0015 	mvn.w	r0, #21
   1e428:	e008      	b.n	1e43c <net_addr_pton+0x1aa>
   1e42a:	2400      	movs	r4, #0
   1e42c:	e7e4      	b.n	1e3f8 <net_addr_pton+0x166>
	return 0;
   1e42e:	2000      	movs	r0, #0
   1e430:	e004      	b.n	1e43c <net_addr_pton+0x1aa>
		return -EINVAL;
   1e432:	f06f 0015 	mvn.w	r0, #21
   1e436:	e001      	b.n	1e43c <net_addr_pton+0x1aa>
				return -EINVAL;
   1e438:	f06f 0015 	mvn.w	r0, #21
}
   1e43c:	b002      	add	sp, #8
   1e43e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1e442:	f06f 0015 	mvn.w	r0, #21
   1e446:	e7f9      	b.n	1e43c <net_addr_pton+0x1aa>
					return -EINVAL;
   1e448:	f06f 0015 	mvn.w	r0, #21
   1e44c:	e7f6      	b.n	1e43c <net_addr_pton+0x1aa>
   1e44e:	f06f 0015 	mvn.w	r0, #21
   1e452:	e7f3      	b.n	1e43c <net_addr_pton+0x1aa>

0001e454 <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1e454:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1e458:	b08f      	sub	sp, #60	; 0x3c
   1e45a:	4605      	mov	r5, r0
   1e45c:	4688      	mov	r8, r1
   1e45e:	4617      	mov	r7, r2
   1e460:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1e462:	460c      	mov	r4, r1
   1e464:	292e      	cmp	r1, #46	; 0x2e
   1e466:	bf28      	it	cs
   1e468:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1e46a:	2300      	movs	r3, #0
   1e46c:	42a3      	cmp	r3, r4
   1e46e:	da04      	bge.n	1e47a <parse_ipv6+0x26>
		if (!str[i]) {
   1e470:	5cea      	ldrb	r2, [r5, r3]
   1e472:	b10a      	cbz	r2, 1e478 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1e474:	3301      	adds	r3, #1
   1e476:	e7f9      	b.n	1e46c <parse_ipv6+0x18>
			len = i;
   1e478:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1e47a:	b18e      	cbz	r6, 1e4a0 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1e47c:	4622      	mov	r2, r4
   1e47e:	215d      	movs	r1, #93	; 0x5d
   1e480:	4628      	mov	r0, r5
   1e482:	f7e1 fecd 	bl	220 <memchr>
		if (!ptr) {
   1e486:	4681      	mov	r9, r0
   1e488:	2800      	cmp	r0, #0
   1e48a:	d043      	beq.n	1e514 <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1e48c:	1c69      	adds	r1, r5, #1
   1e48e:	1a43      	subs	r3, r0, r1
   1e490:	429c      	cmp	r4, r3
   1e492:	bfa8      	it	ge
   1e494:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1e496:	4622      	mov	r2, r4
   1e498:	a802      	add	r0, sp, #8
   1e49a:	f7e1 ff11 	bl	2c0 <memcpy>
   1e49e:	e006      	b.n	1e4ae <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1e4a0:	4622      	mov	r2, r4
   1e4a2:	4629      	mov	r1, r5
   1e4a4:	a802      	add	r0, sp, #8
   1e4a6:	f7e1 ff0b 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1e4aa:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1e4ae:	2200      	movs	r2, #0
   1e4b0:	ab0e      	add	r3, sp, #56	; 0x38
   1e4b2:	4423      	add	r3, r4
   1e4b4:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1e4b8:	1d3a      	adds	r2, r7, #4
   1e4ba:	a902      	add	r1, sp, #8
   1e4bc:	200a      	movs	r0, #10
   1e4be:	f7ff fee8 	bl	1e292 <net_addr_pton>
	if (ret < 0) {
   1e4c2:	2800      	cmp	r0, #0
   1e4c4:	db28      	blt.n	1e518 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1e4c6:	230a      	movs	r3, #10
   1e4c8:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1e4ca:	b33e      	cbz	r6, 1e51c <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1e4cc:	f109 0301 	add.w	r3, r9, #1
   1e4d0:	4445      	add	r5, r8
   1e4d2:	42ab      	cmp	r3, r5
   1e4d4:	d223      	bcs.n	1e51e <parse_ipv6+0xca>
   1e4d6:	f899 3001 	ldrb.w	r3, [r9, #1]
   1e4da:	2b3a      	cmp	r3, #58	; 0x3a
   1e4dc:	d11f      	bne.n	1e51e <parse_ipv6+0xca>
		len = str_len - end;
   1e4de:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1e4e2:	4622      	mov	r2, r4
   1e4e4:	f109 0102 	add.w	r1, r9, #2
   1e4e8:	a802      	add	r0, sp, #8
   1e4ea:	f7e1 fee9 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1e4ee:	ab0e      	add	r3, sp, #56	; 0x38
   1e4f0:	441c      	add	r4, r3
   1e4f2:	2300      	movs	r3, #0
   1e4f4:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1e4f8:	f10d 0106 	add.w	r1, sp, #6
   1e4fc:	a802      	add	r0, sp, #8
   1e4fe:	f7ff fd8a 	bl	1e016 <convert_port>
		if (!ret) {
   1e502:	4606      	mov	r6, r0
   1e504:	b158      	cbz	r0, 1e51e <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1e506:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1e50a:	0a13      	lsrs	r3, r2, #8
   1e50c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1e510:	807b      	strh	r3, [r7, #2]
   1e512:	e004      	b.n	1e51e <parse_ipv6+0xca>
			return false;
   1e514:	2600      	movs	r6, #0
   1e516:	e002      	b.n	1e51e <parse_ipv6+0xca>
		return false;
   1e518:	2600      	movs	r6, #0
   1e51a:	e000      	b.n	1e51e <parse_ipv6+0xca>
		return true;
   1e51c:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1e51e:	4630      	mov	r0, r6
   1e520:	b00f      	add	sp, #60	; 0x3c
   1e522:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001e526 <net_calc_chksum>:
	return pkt->family;
   1e526:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e52a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1e52e:	2b0a      	cmp	r3, #10
   1e530:	d001      	beq.n	1e536 <net_calc_chksum+0x10>
		return 0;
   1e532:	2000      	movs	r0, #0
   1e534:	4770      	bx	lr
{
   1e536:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e538:	b085      	sub	sp, #20
   1e53a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e53c:	6885      	ldr	r5, [r0, #8]
   1e53e:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e540:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e542:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e544:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1e548:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1e54a:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1e54e:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1e550:	fa11 f383 	uxtah	r3, r1, r3
   1e554:	2220      	movs	r2, #32
   1e556:	f100 0108 	add.w	r1, r0, #8
   1e55a:	b298      	uxth	r0, r3
   1e55c:	f7ff fd3c 	bl	1dfd8 <calc_chksum>
   1e560:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1e562:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1e566:	2300      	movs	r3, #0
   1e568:	9300      	str	r3, [sp, #0]
   1e56a:	f10d 020e 	add.w	r2, sp, #14
   1e56e:	4439      	add	r1, r7
   1e570:	4628      	mov	r0, r5
   1e572:	f7ff faec 	bl	1db4e <net_frag_read>
	if (!frag) {
   1e576:	4605      	mov	r5, r0
   1e578:	b318      	cbz	r0, 1e5c2 <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1e57a:	6881      	ldr	r1, [r0, #8]
   1e57c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1e580:	4419      	add	r1, r3
	len = frag->len - offset;
   1e582:	8984      	ldrh	r4, [r0, #12]
   1e584:	1ae4      	subs	r4, r4, r3
   1e586:	b224      	sxth	r4, r4
   1e588:	e003      	b.n	1e592 <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1e58a:	89ac      	ldrh	r4, [r5, #12]
   1e58c:	3c01      	subs	r4, #1
   1e58e:	b224      	sxth	r4, r4
			ptr++;
   1e590:	3101      	adds	r1, #1
	while (frag) {
   1e592:	b1bd      	cbz	r5, 1e5c4 <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1e594:	b2a4      	uxth	r4, r4
   1e596:	4622      	mov	r2, r4
   1e598:	4630      	mov	r0, r6
   1e59a:	f7ff fd1d 	bl	1dfd8 <calc_chksum>
   1e59e:	4606      	mov	r6, r0
		frag = frag->frags;
   1e5a0:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1e5a2:	b17d      	cbz	r5, 1e5c4 <net_calc_chksum+0x9e>
		ptr = frag->data;
   1e5a4:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1e5a6:	f014 0f01 	tst.w	r4, #1
   1e5aa:	d007      	beq.n	1e5bc <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1e5ac:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1e5ae:	441e      	add	r6, r3
   1e5b0:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1e5b2:	42b3      	cmp	r3, r6
   1e5b4:	d9e9      	bls.n	1e58a <net_calc_chksum+0x64>
				sum++;
   1e5b6:	3601      	adds	r6, #1
   1e5b8:	b2b6      	uxth	r6, r6
   1e5ba:	e7e6      	b.n	1e58a <net_calc_chksum+0x64>
			len = frag->len;
   1e5bc:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1e5c0:	e7e7      	b.n	1e592 <net_calc_chksum+0x6c>
		return 0;
   1e5c2:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e5c4:	b91e      	cbnz	r6, 1e5ce <net_calc_chksum+0xa8>
   1e5c6:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1e5ca:	b005      	add	sp, #20
   1e5cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1e5ce:	0a30      	lsrs	r0, r6, #8
   1e5d0:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1e5d4:	b280      	uxth	r0, r0
   1e5d6:	e7f8      	b.n	1e5ca <net_calc_chksum+0xa4>

0001e5d8 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1e5d8:	460b      	mov	r3, r1
   1e5da:	b151      	cbz	r1, 1e5f2 <net_header_fits+0x1a>
   1e5dc:	6880      	ldr	r0, [r0, #8]
   1e5de:	6881      	ldr	r1, [r0, #8]
   1e5e0:	428b      	cmp	r3, r1
   1e5e2:	d908      	bls.n	1e5f6 <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1e5e4:	4413      	add	r3, r2
   1e5e6:	8982      	ldrh	r2, [r0, #12]
   1e5e8:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1e5ea:	428b      	cmp	r3, r1
   1e5ec:	d905      	bls.n	1e5fa <net_header_fits+0x22>
	return false;
   1e5ee:	2000      	movs	r0, #0
   1e5f0:	4770      	bx	lr
   1e5f2:	2000      	movs	r0, #0
   1e5f4:	4770      	bx	lr
   1e5f6:	2000      	movs	r0, #0
   1e5f8:	4770      	bx	lr
		return true;
   1e5fa:	2001      	movs	r0, #1
}
   1e5fc:	4770      	bx	lr

0001e5fe <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1e5fe:	b1d8      	cbz	r0, 1e638 <net_ipaddr_parse+0x3a>
{
   1e600:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1e602:	b1d9      	cbz	r1, 1e63c <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1e604:	7804      	ldrb	r4, [r0, #0]
   1e606:	b1dc      	cbz	r4, 1e640 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1e608:	2c5b      	cmp	r4, #91	; 0x5b
   1e60a:	d002      	beq.n	1e612 <net_ipaddr_parse+0x14>
   1e60c:	2500      	movs	r5, #0
   1e60e:	462b      	mov	r3, r5
   1e610:	e004      	b.n	1e61c <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1e612:	2301      	movs	r3, #1
   1e614:	f7ff ff1e 	bl	1e454 <parse_ipv6>
   1e618:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1e61a:	3301      	adds	r3, #1
   1e61c:	5cc4      	ldrb	r4, [r0, r3]
   1e61e:	b12c      	cbz	r4, 1e62c <net_ipaddr_parse+0x2e>
   1e620:	4299      	cmp	r1, r3
   1e622:	d903      	bls.n	1e62c <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1e624:	2c3a      	cmp	r4, #58	; 0x3a
   1e626:	d1f8      	bne.n	1e61a <net_ipaddr_parse+0x1c>
			count++;
   1e628:	3501      	adds	r5, #1
   1e62a:	e7f6      	b.n	1e61a <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1e62c:	2d01      	cmp	r5, #1
   1e62e:	d009      	beq.n	1e644 <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1e630:	2300      	movs	r3, #0
   1e632:	f7ff ff0f 	bl	1e454 <parse_ipv6>
   1e636:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e638:	2000      	movs	r0, #0
   1e63a:	4770      	bx	lr
   1e63c:	2000      	movs	r0, #0
   1e63e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e640:	2000      	movs	r0, #0
   1e642:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1e644:	2000      	movs	r0, #0
#endif
}
   1e646:	bd38      	pop	{r3, r4, r5, pc}

0001e648 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1e648:	2000      	movs	r0, #0
   1e64a:	4770      	bx	lr

0001e64c <net_bt_enable>:
	return iface->dev;
   1e64c:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e64e:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1e650:	b129      	cbz	r1, 1e65e <net_bt_enable+0x12>
   1e652:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1e656:	2b03      	cmp	r3, #3
   1e658:	d103      	bne.n	1e662 <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1e65a:	2000      	movs	r0, #0
   1e65c:	4770      	bx	lr
   1e65e:	2000      	movs	r0, #0
   1e660:	4770      	bx	lr
		return -ENETDOWN;
   1e662:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1e666:	4770      	bx	lr

0001e668 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1e668:	4b04      	ldr	r3, [pc, #16]	; (1e67c <ipsp_accept+0x14>)
   1e66a:	685b      	ldr	r3, [r3, #4]
   1e66c:	b91b      	cbnz	r3, 1e676 <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1e66e:	4b04      	ldr	r3, [pc, #16]	; (1e680 <ipsp_accept+0x18>)
   1e670:	600b      	str	r3, [r1, #0]

	return 0;
   1e672:	2000      	movs	r0, #0
   1e674:	4770      	bx	lr
		return -ENOMEM;
   1e676:	f06f 000b 	mvn.w	r0, #11
}
   1e67a:	4770      	bx	lr
   1e67c:	2000be40 	.word	0x2000be40
   1e680:	2000be44 	.word	0x2000be44

0001e684 <net_bt_send>:
{
   1e684:	b538      	push	{r3, r4, r5, lr}
   1e686:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e688:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1e68a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1e68e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1e692:	2b0a      	cmp	r3, #10
   1e694:	d001      	beq.n	1e69a <net_bt_send+0x16>
		return NET_DROP;
   1e696:	2002      	movs	r0, #2
   1e698:	bd38      	pop	{r3, r4, r5, pc}
   1e69a:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1e69c:	2200      	movs	r2, #0
   1e69e:	2101      	movs	r1, #1
   1e6a0:	4620      	mov	r0, r4
   1e6a2:	f003 fe95 	bl	223d0 <net_6lo_compress>
   1e6a6:	b908      	cbnz	r0, 1e6ac <net_bt_send+0x28>
		return NET_DROP;
   1e6a8:	2002      	movs	r0, #2
}
   1e6aa:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1e6ac:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1e6ae:	4621      	mov	r1, r4
   1e6b0:	3018      	adds	r0, #24
   1e6b2:	f00a fb13 	bl	28cdc <k_queue_append>
	return NET_OK;
   1e6b6:	2000      	movs	r0, #0
   1e6b8:	bd38      	pop	{r3, r4, r5, pc}

0001e6ba <net_bt_recv>:
{
   1e6ba:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1e6bc:	4608      	mov	r0, r1
   1e6be:	f004 fad4 	bl	22c6a <net_6lo_uncompress>
   1e6c2:	b908      	cbnz	r0, 1e6c8 <net_bt_recv+0xe>
		return NET_DROP;
   1e6c4:	2002      	movs	r0, #2
   1e6c6:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1e6c8:	2001      	movs	r0, #1
}
   1e6ca:	bd08      	pop	{r3, pc}

0001e6cc <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1e6cc:	b951      	cbnz	r1, 1e6e4 <connected+0x18>
{
   1e6ce:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1e6d0:	4b05      	ldr	r3, [pc, #20]	; (1e6e8 <connected+0x1c>)
   1e6d2:	681b      	ldr	r3, [r3, #0]
   1e6d4:	4283      	cmp	r3, r0
   1e6d6:	d000      	beq.n	1e6da <connected+0xe>
   1e6d8:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1e6da:	2223      	movs	r2, #35	; 0x23
   1e6dc:	4903      	ldr	r1, [pc, #12]	; (1e6ec <connected+0x20>)
   1e6de:	f7ea f905 	bl	88ec <bt_l2cap_chan_connect>
   1e6e2:	e7f9      	b.n	1e6d8 <connected+0xc>
   1e6e4:	4770      	bx	lr
   1e6e6:	bf00      	nop
   1e6e8:	20001f80 	.word	0x20001f80
   1e6ec:	2000be44 	.word	0x2000be44

0001e6f0 <ipsp_recv>:
{
   1e6f0:	b570      	push	{r4, r5, r6, lr}
   1e6f2:	4605      	mov	r5, r0
   1e6f4:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1e6f6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e6fa:	2000      	movs	r0, #0
   1e6fc:	f7ff f82e 	bl	1d75c <net_pkt_get_reserve_rx>
   1e700:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1e702:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1e706:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1e708:	2206      	movs	r2, #6
   1e70a:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1e70e:	2302      	movs	r3, #2
   1e710:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1e714:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1e718:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1e71a:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1e71e:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1e722:	4630      	mov	r0, r6
   1e724:	f7fc fb42 	bl	1adac <net_buf_ref>
   1e728:	4601      	mov	r1, r0
   1e72a:	4620      	mov	r0, r4
   1e72c:	f7ff f8bb 	bl	1d8a6 <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1e730:	4621      	mov	r1, r4
   1e732:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1e736:	f7fc fd55 	bl	1b1e4 <net_recv_data>
   1e73a:	2800      	cmp	r0, #0
   1e73c:	db00      	blt.n	1e740 <ipsp_recv+0x50>
   1e73e:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1e740:	4620      	mov	r0, r4
   1e742:	f7ff f886 	bl	1d852 <net_pkt_unref>
}
   1e746:	e7fa      	b.n	1e73e <ipsp_recv+0x4e>

0001e748 <ipsp_alloc_buf>:
{
   1e748:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1e74a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e74e:	2000      	movs	r0, #0
   1e750:	f7ff f818 	bl	1d784 <net_pkt_get_reserve_rx_data>
}
   1e754:	bd08      	pop	{r3, pc}
	...

0001e758 <ipsp_disconnected>:
{
   1e758:	b510      	push	{r4, lr}
   1e75a:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1e75c:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1e760:	f7fd fe92 	bl	1c488 <net_if_down>
	if (chan->conn != default_conn) {
   1e764:	6823      	ldr	r3, [r4, #0]
   1e766:	4a05      	ldr	r2, [pc, #20]	; (1e77c <ipsp_disconnected+0x24>)
   1e768:	6810      	ldr	r0, [r2, #0]
   1e76a:	4283      	cmp	r3, r0
   1e76c:	d000      	beq.n	1e770 <ipsp_disconnected+0x18>
   1e76e:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1e770:	f7e8 fe28 	bl	73c4 <bt_conn_unref>
	default_conn = NULL;
   1e774:	2200      	movs	r2, #0
   1e776:	4b01      	ldr	r3, [pc, #4]	; (1e77c <ipsp_disconnected+0x24>)
   1e778:	601a      	str	r2, [r3, #0]
   1e77a:	e7f8      	b.n	1e76e <ipsp_disconnected+0x16>
   1e77c:	20001f80 	.word	0x20001f80

0001e780 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1e780:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1e782:	4b06      	ldr	r3, [pc, #24]	; (1e79c <disconnected+0x1c>)
   1e784:	681b      	ldr	r3, [r3, #0]
   1e786:	4283      	cmp	r3, r0
   1e788:	d000      	beq.n	1e78c <disconnected+0xc>
   1e78a:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1e78c:	4618      	mov	r0, r3
   1e78e:	f7e8 fe19 	bl	73c4 <bt_conn_unref>
	default_conn = NULL;
   1e792:	2200      	movs	r2, #0
   1e794:	4b01      	ldr	r3, [pc, #4]	; (1e79c <disconnected+0x1c>)
   1e796:	601a      	str	r2, [r3, #0]
   1e798:	e7f7      	b.n	1e78a <disconnected+0xa>
   1e79a:	bf00      	nop
   1e79c:	20001f80 	.word	0x20001f80

0001e7a0 <ipsp_connected>:
{
   1e7a0:	b570      	push	{r4, r5, r6, lr}
   1e7a2:	b08e      	sub	sp, #56	; 0x38
   1e7a4:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1e7a6:	a909      	add	r1, sp, #36	; 0x24
   1e7a8:	6800      	ldr	r0, [r0, #0]
   1e7aa:	f7e8 ff41 	bl	7630 <bt_conn_get_info>
   1e7ae:	2800      	cmp	r0, #0
   1e7b0:	db06      	blt.n	1e7c0 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1e7b2:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1e7b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1e7b8:	3306      	adds	r3, #6
   1e7ba:	4631      	mov	r1, r6
   1e7bc:	2206      	movs	r2, #6
   1e7be:	e008      	b.n	1e7d2 <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1e7c0:	4620      	mov	r0, r4
   1e7c2:	f7ea f8b2 	bl	892a <bt_l2cap_chan_disconnect>
   1e7c6:	e05a      	b.n	1e87e <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e7c8:	7818      	ldrb	r0, [r3, #0]
   1e7ca:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1e7cc:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e7ce:	3b01      	subs	r3, #1
   1e7d0:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1e7d2:	2a00      	cmp	r2, #0
   1e7d4:	d1f8      	bne.n	1e7c8 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1e7d6:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1e7da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1e7dc:	3306      	adds	r3, #6
   1e7de:	4608      	mov	r0, r1
   1e7e0:	2206      	movs	r2, #6
   1e7e2:	e004      	b.n	1e7ee <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e7e4:	781d      	ldrb	r5, [r3, #0]
   1e7e6:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1e7e8:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1e7ea:	3b01      	subs	r3, #1
   1e7ec:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1e7ee:	2a00      	cmp	r2, #0
   1e7f0:	d1f8      	bne.n	1e7e4 <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1e7f2:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1e7f6:	f3bf 8f5b 	dmb	ish
   1e7fa:	68da      	ldr	r2, [r3, #12]
   1e7fc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1e800:	f012 0f01 	tst.w	r2, #1
   1e804:	d104      	bne.n	1e810 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1e806:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1e808:	2206      	movs	r2, #6
   1e80a:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1e80c:	2202      	movs	r2, #2
   1e80e:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1e810:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1e812:	2306      	movs	r3, #6
   1e814:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1e818:	2302      	movs	r3, #2
   1e81a:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1e81e:	23fe      	movs	r3, #254	; 0xfe
   1e820:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1e824:	2380      	movs	r3, #128	; 0x80
   1e826:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1e82a:	2300      	movs	r3, #0
   1e82c:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1e830:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1e832:	2203      	movs	r2, #3
   1e834:	a805      	add	r0, sp, #20
   1e836:	f7e1 fd43 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1e83a:	23ff      	movs	r3, #255	; 0xff
   1e83c:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1e840:	23fe      	movs	r3, #254	; 0xfe
   1e842:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1e846:	2203      	movs	r2, #3
   1e848:	9907      	ldr	r1, [sp, #28]
   1e84a:	4411      	add	r1, r2
   1e84c:	f10d 0019 	add.w	r0, sp, #25
   1e850:	f7e1 fd36 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1e854:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e858:	2b02      	cmp	r3, #2
   1e85a:	d012      	beq.n	1e882 <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1e85c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1e860:	2b03      	cmp	r3, #3
   1e862:	d015      	beq.n	1e890 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1e864:	2305      	movs	r3, #5
   1e866:	9300      	str	r3, [sp, #0]
   1e868:	2300      	movs	r3, #0
   1e86a:	aa07      	add	r2, sp, #28
   1e86c:	a903      	add	r1, sp, #12
   1e86e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e872:	f002 f903 	bl	20a7c <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1e876:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1e87a:	f7fd fdd1 	bl	1c420 <net_if_up>
}
   1e87e:	b00e      	add	sp, #56	; 0x38
   1e880:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1e882:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e886:	f083 0302 	eor.w	r3, r3, #2
   1e88a:	f88d 3014 	strb.w	r3, [sp, #20]
   1e88e:	e7e5      	b.n	1e85c <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1e890:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1e894:	f083 0302 	eor.w	r3, r3, #2
   1e898:	f88d 3014 	strb.w	r3, [sp, #20]
   1e89c:	e7e2      	b.n	1e864 <ipsp_connected+0xc4>
	...

0001e8a0 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1e8a0:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1e8a2:	4804      	ldr	r0, [pc, #16]	; (1e8b4 <net_bt_init+0x14>)
   1e8a4:	f7e8 fbb6 	bl	7014 <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1e8a8:	4803      	ldr	r0, [pc, #12]	; (1e8b8 <net_bt_init+0x18>)
   1e8aa:	f7e9 ffc5 	bl	8838 <bt_l2cap_server_register>

	return 0;
}
   1e8ae:	2000      	movs	r0, #0
   1e8b0:	bd08      	pop	{r3, pc}
   1e8b2:	bf00      	nop
   1e8b4:	2000bef4 	.word	0x2000bef4
   1e8b8:	2000bf24 	.word	0x2000bf24

0001e8bc <bt_iface_send>:
{
   1e8bc:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1e8be:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e8c0:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1e8c2:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1e8c4:	2300      	movs	r3, #0
   1e8c6:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1e8c8:	4608      	mov	r0, r1
   1e8ca:	f7fe ffc2 	bl	1d852 <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1e8ce:	4629      	mov	r1, r5
   1e8d0:	1d20      	adds	r0, r4, #4
   1e8d2:	f7ea f9bb 	bl	8c4c <bt_l2cap_chan_send>
}
   1e8d6:	bd38      	pop	{r3, r4, r5, pc}

0001e8d8 <bt_iface_init>:
   1e8d8:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1e8da:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1e8dc:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1e8de:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1e8e0:	f3bf 8f5b 	dmb	ish
   1e8e4:	e850 3f00 	ldrex	r3, [r0]
   1e8e8:	f043 0302 	orr.w	r3, r3, #2
   1e8ec:	e840 3200 	strex	r2, r3, [r0]
   1e8f0:	2a00      	cmp	r2, #0
   1e8f2:	d1f7      	bne.n	1e8e4 <bt_iface_init+0xc>
   1e8f4:	f3bf 8f5b 	dmb	ish
   1e8f8:	4770      	bx	lr
	...

0001e8fc <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1e8fc:	b510      	push	{r4, lr}
   1e8fe:	b086      	sub	sp, #24
   1e900:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1e902:	4913      	ldr	r1, [pc, #76]	; (1e950 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1e904:	4610      	mov	r0, r2
   1e906:	f7e1 fd7f 	bl	408 <strcmp>
   1e90a:	b140      	cbz	r0, 1e91e <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1e90c:	4911      	ldr	r1, [pc, #68]	; (1e954 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1e90e:	4620      	mov	r0, r4
   1e910:	f7e1 fd7a 	bl	408 <strcmp>
   1e914:	b9c0      	cbnz	r0, 1e948 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1e916:	f7e8 f879 	bl	6a0c <bt_le_adv_stop>
}
   1e91a:	b006      	add	sp, #24
   1e91c:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1e91e:	2300      	movs	r3, #0
   1e920:	9303      	str	r3, [sp, #12]
   1e922:	9304      	str	r3, [sp, #16]
   1e924:	9305      	str	r3, [sp, #20]
   1e926:	2301      	movs	r3, #1
   1e928:	f88d 300c 	strb.w	r3, [sp, #12]
   1e92c:	22a0      	movs	r2, #160	; 0xa0
   1e92e:	f8ad 200e 	strh.w	r2, [sp, #14]
   1e932:	22f0      	movs	r2, #240	; 0xf0
   1e934:	f8ad 2010 	strh.w	r2, [sp, #16]
   1e938:	9300      	str	r3, [sp, #0]
   1e93a:	4b07      	ldr	r3, [pc, #28]	; (1e958 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1e93c:	2202      	movs	r2, #2
   1e93e:	4907      	ldr	r1, [pc, #28]	; (1e95c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1e940:	a803      	add	r0, sp, #12
   1e942:	f7e7 ffb9 	bl	68b8 <bt_le_adv_start>
   1e946:	e7e8      	b.n	1e91a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1e948:	f06f 0015 	mvn.w	r0, #21
   1e94c:	e7e5      	b.n	1e91a <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1e94e:	bf00      	nop
   1e950:	00031e20 	.word	0x00031e20
   1e954:	00031e24 	.word	0x00031e24
   1e958:	00031e28 	.word	0x00031e28
   1e95c:	00031e10 	.word	0x00031e10

0001e960 <net_icmpv6_register_handler>:
	node->next = list->head;
   1e960:	4b04      	ldr	r3, [pc, #16]	; (1e974 <net_icmpv6_register_handler+0x14>)
   1e962:	681a      	ldr	r2, [r3, #0]
   1e964:	6002      	str	r2, [r0, #0]
	list->head = node;
   1e966:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1e968:	685b      	ldr	r3, [r3, #4]
   1e96a:	b103      	cbz	r3, 1e96e <net_icmpv6_register_handler+0xe>
   1e96c:	4770      	bx	lr
		list->tail = list->head;
   1e96e:	4b01      	ldr	r3, [pc, #4]	; (1e974 <net_icmpv6_register_handler+0x14>)
   1e970:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1e972:	e7fb      	b.n	1e96c <net_icmpv6_register_handler+0xc>
   1e974:	20001f84 	.word	0x20001f84

0001e978 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1e978:	4601      	mov	r1, r0
	return list->head;
   1e97a:	4b10      	ldr	r3, [pc, #64]	; (1e9bc <net_icmpv6_unregister_handler+0x44>)
   1e97c:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1e97e:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e980:	b1d3      	cbz	r3, 1e9b8 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1e982:	4299      	cmp	r1, r3
   1e984:	d002      	beq.n	1e98c <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1e986:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1e988:	681b      	ldr	r3, [r3, #0]
   1e98a:	e7f9      	b.n	1e980 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1e98c:	b142      	cbz	r2, 1e9a0 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1e98e:	6803      	ldr	r3, [r0, #0]
   1e990:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1e992:	4b0a      	ldr	r3, [pc, #40]	; (1e9bc <net_icmpv6_unregister_handler+0x44>)
   1e994:	685b      	ldr	r3, [r3, #4]
   1e996:	4298      	cmp	r0, r3
   1e998:	d00b      	beq.n	1e9b2 <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1e99a:	2300      	movs	r3, #0
   1e99c:	6003      	str	r3, [r0, #0]
   1e99e:	4770      	bx	lr
		list->head = node->next;
   1e9a0:	6802      	ldr	r2, [r0, #0]
   1e9a2:	4b06      	ldr	r3, [pc, #24]	; (1e9bc <net_icmpv6_unregister_handler+0x44>)
   1e9a4:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1e9a6:	685b      	ldr	r3, [r3, #4]
   1e9a8:	4298      	cmp	r0, r3
   1e9aa:	d1f6      	bne.n	1e99a <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1e9ac:	4b03      	ldr	r3, [pc, #12]	; (1e9bc <net_icmpv6_unregister_handler+0x44>)
   1e9ae:	605a      	str	r2, [r3, #4]
   1e9b0:	e7f3      	b.n	1e99a <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1e9b2:	4b02      	ldr	r3, [pc, #8]	; (1e9bc <net_icmpv6_unregister_handler+0x44>)
   1e9b4:	605a      	str	r2, [r3, #4]
   1e9b6:	e7f0      	b.n	1e99a <net_icmpv6_unregister_handler+0x22>
   1e9b8:	4770      	bx	lr
   1e9ba:	bf00      	nop
   1e9bc:	20001f84 	.word	0x20001f84

0001e9c0 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1e9c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e9c4:	b086      	sub	sp, #24
   1e9c6:	4606      	mov	r6, r0
   1e9c8:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1e9ca:	2300      	movs	r3, #0
   1e9cc:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e9d0:	f7ff fa18 	bl	1de04 <net_pkt_icmp_data>
   1e9d4:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e9d6:	2204      	movs	r2, #4
   1e9d8:	4601      	mov	r1, r0
   1e9da:	4630      	mov	r0, r6
   1e9dc:	f7ff fdfc 	bl	1e5d8 <net_header_fits>
   1e9e0:	b170      	cbz	r0, 1ea00 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1e9e2:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e9e4:	b173      	cbz	r3, 1ea04 <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1e9e6:	2300      	movs	r3, #0
   1e9e8:	70a3      	strb	r3, [r4, #2]
   1e9ea:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e9ec:	213a      	movs	r1, #58	; 0x3a
   1e9ee:	4630      	mov	r0, r6
   1e9f0:	f7ff fd99 	bl	1e526 <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1e9f4:	43c0      	mvns	r0, r0
   1e9f6:	8060      	strh	r0, [r4, #2]

		return frag;
   1e9f8:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1e9fa:	b006      	add	sp, #24
   1e9fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1ea00:	2300      	movs	r3, #0
   1ea02:	e7ef      	b.n	1e9e4 <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ea04:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ea08:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1ea0c:	441a      	add	r2, r3
   1ea0e:	3202      	adds	r2, #2
   1ea10:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1ea14:	f8cd 8008 	str.w	r8, [sp, #8]
   1ea18:	f10d 0416 	add.w	r4, sp, #22
   1ea1c:	9401      	str	r4, [sp, #4]
   1ea1e:	2702      	movs	r7, #2
   1ea20:	9700      	str	r7, [sp, #0]
   1ea22:	ab05      	add	r3, sp, #20
   1ea24:	b292      	uxth	r2, r2
   1ea26:	4629      	mov	r1, r5
   1ea28:	4630      	mov	r0, r6
   1ea2a:	f7ff f902 	bl	1dc32 <net_pkt_write>
   1ea2e:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ea30:	213a      	movs	r1, #58	; 0x3a
   1ea32:	4630      	mov	r0, r6
   1ea34:	f7ff fd77 	bl	1e526 <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1ea38:	43c0      	mvns	r0, r0
   1ea3a:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1ea3e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1ea42:	3a02      	subs	r2, #2
   1ea44:	f8cd 8008 	str.w	r8, [sp, #8]
   1ea48:	9401      	str	r4, [sp, #4]
   1ea4a:	9700      	str	r7, [sp, #0]
   1ea4c:	ab05      	add	r3, sp, #20
   1ea4e:	b292      	uxth	r2, r2
   1ea50:	4629      	mov	r1, r5
   1ea52:	4630      	mov	r0, r6
   1ea54:	f7ff f8ed 	bl	1dc32 <net_pkt_write>
	return frag;
   1ea58:	e7cf      	b.n	1e9fa <net_icmpv6_set_chksum+0x3a>

0001ea5a <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1ea5a:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ea5c:	b085      	sub	sp, #20
   1ea5e:	4605      	mov	r5, r0
   1ea60:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1ea62:	f7ff f9cf 	bl	1de04 <net_pkt_icmp_data>
   1ea66:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ea68:	2204      	movs	r2, #4
   1ea6a:	4601      	mov	r1, r0
   1ea6c:	4628      	mov	r0, r5
   1ea6e:	f7ff fdb3 	bl	1e5d8 <net_header_fits>
   1ea72:	b120      	cbz	r0, 1ea7e <net_icmpv6_get_hdr+0x24>
		return hdr;
   1ea74:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1ea76:	b126      	cbz	r6, 1ea82 <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1ea78:	4620      	mov	r0, r4
   1ea7a:	b005      	add	sp, #20
   1ea7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1ea7e:	2600      	movs	r6, #0
   1ea80:	e7f9      	b.n	1ea76 <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ea82:	68a8      	ldr	r0, [r5, #8]
   1ea84:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1ea88:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1ea8c:	9700      	str	r7, [sp, #0]
   1ea8e:	2301      	movs	r3, #1
   1ea90:	f10d 020e 	add.w	r2, sp, #14
   1ea94:	4421      	add	r1, r4
   1ea96:	f7ff f85a 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1ea9a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ea9e:	1c7b      	adds	r3, r7, #1
   1eaa0:	9300      	str	r3, [sp, #0]
   1eaa2:	2301      	movs	r3, #1
   1eaa4:	f10d 020e 	add.w	r2, sp, #14
   1eaa8:	f7ff f851 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1eaac:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1eab0:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1eab2:	9300      	str	r3, [sp, #0]
   1eab4:	2302      	movs	r3, #2
   1eab6:	f10d 020e 	add.w	r2, sp, #14
   1eaba:	f7ff f848 	bl	1db4e <net_frag_read>
	if (!frag) {
   1eabe:	b108      	cbz	r0, 1eac4 <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1eac0:	463c      	mov	r4, r7
   1eac2:	e7d9      	b.n	1ea78 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1eac4:	4634      	mov	r4, r6
   1eac6:	e7d7      	b.n	1ea78 <net_icmpv6_get_hdr+0x1e>

0001eac8 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1eac8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eacc:	b086      	sub	sp, #24
   1eace:	4606      	mov	r6, r0
   1ead0:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1ead2:	2204      	movs	r2, #4
   1ead4:	f7ff fd80 	bl	1e5d8 <net_header_fits>
   1ead8:	b128      	cbz	r0, 1eae6 <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1eada:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1eadc:	b12d      	cbz	r5, 1eaea <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1eade:	4620      	mov	r0, r4
   1eae0:	b006      	add	sp, #24
   1eae2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1eae6:	2500      	movs	r5, #0
   1eae8:	e7f8      	b.n	1eadc <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eaea:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1eaee:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eaf2:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1eaf6:	9702      	str	r7, [sp, #8]
   1eaf8:	9401      	str	r4, [sp, #4]
   1eafa:	f04f 0801 	mov.w	r8, #1
   1eafe:	f8cd 8000 	str.w	r8, [sp]
   1eb02:	f10d 0316 	add.w	r3, sp, #22
   1eb06:	440a      	add	r2, r1
   1eb08:	68b1      	ldr	r1, [r6, #8]
   1eb0a:	4630      	mov	r0, r6
   1eb0c:	f7ff f891 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1eb10:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1eb14:	eb04 0308 	add.w	r3, r4, r8
   1eb18:	9702      	str	r7, [sp, #8]
   1eb1a:	9301      	str	r3, [sp, #4]
   1eb1c:	f8cd 8000 	str.w	r8, [sp]
   1eb20:	f10d 0316 	add.w	r3, sp, #22
   1eb24:	4601      	mov	r1, r0
   1eb26:	4630      	mov	r0, r6
   1eb28:	f7ff f883 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1eb2c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1eb30:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1eb32:	9702      	str	r7, [sp, #8]
   1eb34:	9301      	str	r3, [sp, #4]
   1eb36:	2302      	movs	r3, #2
   1eb38:	9300      	str	r3, [sp, #0]
   1eb3a:	f10d 0316 	add.w	r3, sp, #22
   1eb3e:	4601      	mov	r1, r0
   1eb40:	4630      	mov	r0, r6
   1eb42:	f7ff f876 	bl	1dc32 <net_pkt_write>
	if (!frag) {
   1eb46:	2800      	cmp	r0, #0
   1eb48:	d1c9      	bne.n	1eade <net_icmpv6_set_hdr+0x16>
		return NULL;
   1eb4a:	462c      	mov	r4, r5
   1eb4c:	e7c7      	b.n	1eade <net_icmpv6_set_hdr+0x16>
	...

0001eb50 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1eb50:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1eb54:	b09a      	sub	sp, #104	; 0x68
   1eb56:	4606      	mov	r6, r0
	return pkt->iface;
   1eb58:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1eb5a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1eb5e:	2000      	movs	r0, #0
   1eb60:	f7fe fe06 	bl	1d770 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1eb64:	2800      	cmp	r0, #0
   1eb66:	f000 80a1 	beq.w	1ecac <handle_echo_request+0x15c>
   1eb6a:	4604      	mov	r4, r0
	return pkt->frags->data;
   1eb6c:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1eb6e:	2100      	movs	r1, #0
   1eb70:	e002      	b.n	1eb78 <handle_echo_request+0x28>
		bytes += buf->len;
   1eb72:	899a      	ldrh	r2, [r3, #12]
   1eb74:	4411      	add	r1, r2
		buf = buf->frags;
   1eb76:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1eb78:	2b00      	cmp	r3, #0
   1eb7a:	d1fa      	bne.n	1eb72 <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1eb7c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1eb80:	2200      	movs	r2, #0
   1eb82:	4630      	mov	r0, r6
   1eb84:	f7fe fea6 	bl	1d8d4 <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1eb88:	4607      	mov	r7, r0
   1eb8a:	2800      	cmp	r0, #0
   1eb8c:	f000 808b 	beq.w	1eca6 <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1eb90:	4601      	mov	r1, r0
   1eb92:	4620      	mov	r0, r4
   1eb94:	f7fe fe87 	bl	1d8a6 <net_pkt_frag_add>
	pkt->family = family;
   1eb98:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1eb9c:	220a      	movs	r2, #10
   1eb9e:	f362 03c6 	bfi	r3, r2, #3, #4
   1eba2:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1eba6:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1eba8:	7d6b      	ldrb	r3, [r5, #21]
   1ebaa:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ebae:	7d6b      	ldrb	r3, [r5, #21]
   1ebb0:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1ebb4:	f107 0008 	add.w	r0, r7, #8
   1ebb8:	f7fc f98d 	bl	1aed6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1ebbc:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1ebc0:	2328      	movs	r3, #40	; 0x28
   1ebc2:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1ebc6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1ebca:	2b00      	cmp	r3, #0
   1ebcc:	d076      	beq.n	1ecbc <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1ebce:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1ebd2:	68a3      	ldr	r3, [r4, #8]
   1ebd4:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1ebd6:	2260      	movs	r2, #96	; 0x60
   1ebd8:	701a      	strb	r2, [r3, #0]
   1ebda:	68a3      	ldr	r3, [r4, #8]
   1ebdc:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1ebde:	2300      	movs	r3, #0
   1ebe0:	7053      	strb	r3, [r2, #1]
   1ebe2:	68a2      	ldr	r2, [r4, #8]
   1ebe4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1ebe6:	7093      	strb	r3, [r2, #2]
   1ebe8:	70d3      	strb	r3, [r2, #3]
   1ebea:	68a3      	ldr	r3, [r4, #8]
   1ebec:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1ebee:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1ebf2:	71da      	strb	r2, [r3, #7]
   1ebf4:	68a3      	ldr	r3, [r4, #8]
   1ebf6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1ebfa:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1ebfe:	2bff      	cmp	r3, #255	; 0xff
   1ec00:	d060      	beq.n	1ecc4 <handle_echo_request+0x174>
   1ec02:	68b3      	ldr	r3, [r6, #8]
   1ec04:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1ec06:	af0e      	add	r7, sp, #56	; 0x38
   1ec08:	462b      	mov	r3, r5
   1ec0a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ec0e:	6859      	ldr	r1, [r3, #4]
   1ec10:	689a      	ldr	r2, [r3, #8]
   1ec12:	68db      	ldr	r3, [r3, #12]
   1ec14:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ec16:	af01      	add	r7, sp, #4
   1ec18:	ab0e      	add	r3, sp, #56	; 0x38
   1ec1a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1ec1c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ec20:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1ec24:	462b      	mov	r3, r5
   1ec26:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1ec2a:	6859      	ldr	r1, [r3, #4]
   1ec2c:	689a      	ldr	r2, [r3, #8]
   1ec2e:	68db      	ldr	r3, [r3, #12]
   1ec30:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1ec34:	ad12      	add	r5, sp, #72	; 0x48
   1ec36:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ec38:	f8cc 0008 	str.w	r0, [ip, #8]
   1ec3c:	f8cc 100c 	str.w	r1, [ip, #12]
   1ec40:	f8cc 2010 	str.w	r2, [ip, #16]
   1ec44:	f8cc 3014 	str.w	r3, [ip, #20]
   1ec48:	68a3      	ldr	r3, [r4, #8]
   1ec4a:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1ec4e:	ad16      	add	r5, sp, #88	; 0x58
   1ec50:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1ec54:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1ec58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ec5a:	f8ce 0018 	str.w	r0, [lr, #24]
   1ec5e:	f8ce 101c 	str.w	r1, [lr, #28]
   1ec62:	f8ce 2020 	str.w	r2, [lr, #32]
   1ec66:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1ec6a:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1ec6c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1ec6e:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1ec72:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1ec76:	2500      	movs	r5, #0
   1ec78:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1ec7a:	a905      	add	r1, sp, #20
   1ec7c:	4620      	mov	r0, r4
   1ec7e:	f7ff feec 	bl	1ea5a <net_icmpv6_get_hdr>
   1ec82:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1ec84:	2381      	movs	r3, #129	; 0x81
   1ec86:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1ec88:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1ec8a:	7085      	strb	r5, [r0, #2]
   1ec8c:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1ec8e:	4620      	mov	r0, r4
   1ec90:	f7ff ff1a 	bl	1eac8 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1ec94:	68a1      	ldr	r1, [r4, #8]
   1ec96:	4620      	mov	r0, r4
   1ec98:	f7ff fe92 	bl	1e9c0 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1ec9c:	4620      	mov	r0, r4
   1ec9e:	f7fc f9d7 	bl	1b050 <net_send_data>
   1eca2:	42a8      	cmp	r0, r5
   1eca4:	da3c      	bge.n	1ed20 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1eca6:	4620      	mov	r0, r4
   1eca8:	f7fe fdd3 	bl	1d852 <net_pkt_unref>
	net_stats.icmp.drop++;
   1ecac:	4a21      	ldr	r2, [pc, #132]	; (1ed34 <handle_echo_request+0x1e4>)
   1ecae:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ecb0:	3301      	adds	r3, #1
   1ecb2:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1ecb4:	2002      	movs	r0, #2
}
   1ecb6:	b01a      	add	sp, #104	; 0x68
   1ecb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1ecbc:	2300      	movs	r3, #0
   1ecbe:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1ecc2:	e786      	b.n	1ebd2 <handle_echo_request+0x82>
	return pkt->frags->data;
   1ecc4:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1ecc6:	af06      	add	r7, sp, #24
   1ecc8:	689b      	ldr	r3, [r3, #8]
   1ecca:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1ecce:	6859      	ldr	r1, [r3, #4]
   1ecd0:	689a      	ldr	r2, [r3, #8]
   1ecd2:	68db      	ldr	r3, [r3, #12]
   1ecd4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1ecd6:	af06      	add	r7, sp, #24
   1ecd8:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1ecda:	f8cc 0018 	str.w	r0, [ip, #24]
   1ecde:	f8cc 101c 	str.w	r1, [ip, #28]
   1ece2:	f8cc 2020 	str.w	r2, [ip, #32]
   1ece6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1ecea:	68a3      	ldr	r3, [r4, #8]
   1ecec:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1ecf0:	68b3      	ldr	r3, [r6, #8]
   1ecf2:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ecf4:	3118      	adds	r1, #24
   1ecf6:	4628      	mov	r0, r5
   1ecf8:	f7fd f910 	bl	1bf1c <net_if_ipv6_select_src_addr>
   1ecfc:	4603      	mov	r3, r0
   1ecfe:	ad0a      	add	r5, sp, #40	; 0x28
   1ed00:	6800      	ldr	r0, [r0, #0]
   1ed02:	6859      	ldr	r1, [r3, #4]
   1ed04:	689a      	ldr	r2, [r3, #8]
   1ed06:	68db      	ldr	r3, [r3, #12]
   1ed08:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ed0a:	ad0a      	add	r5, sp, #40	; 0x28
   1ed0c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ed0e:	f8c8 0008 	str.w	r0, [r8, #8]
   1ed12:	f8c8 100c 	str.w	r1, [r8, #12]
   1ed16:	f8c8 2010 	str.w	r2, [r8, #16]
   1ed1a:	f8c8 3014 	str.w	r3, [r8, #20]
   1ed1e:	e7a4      	b.n	1ec6a <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1ed20:	4630      	mov	r0, r6
   1ed22:	f7fe fd96 	bl	1d852 <net_pkt_unref>
	net_stats.icmp.sent++;
   1ed26:	4a03      	ldr	r2, [pc, #12]	; (1ed34 <handle_echo_request+0x1e4>)
   1ed28:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1ed2a:	3301      	adds	r3, #1
   1ed2c:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1ed2e:	4628      	mov	r0, r5
   1ed30:	e7c1      	b.n	1ecb6 <handle_echo_request+0x166>
   1ed32:	bf00      	nop
   1ed34:	20002b58 	.word	0x20002b58

0001ed38 <net_icmpv6_get_ns_hdr>:
{
   1ed38:	b570      	push	{r4, r5, r6, lr}
   1ed3a:	b084      	sub	sp, #16
   1ed3c:	4605      	mov	r5, r0
   1ed3e:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ed40:	2104      	movs	r1, #4
   1ed42:	f7ff f874 	bl	1de2e <net_pkt_icmp_opt_data>
   1ed46:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed48:	2214      	movs	r2, #20
   1ed4a:	4601      	mov	r1, r0
   1ed4c:	4628      	mov	r0, r5
   1ed4e:	f7ff fc43 	bl	1e5d8 <net_header_fits>
   1ed52:	b110      	cbz	r0, 1ed5a <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1ed54:	4620      	mov	r0, r4
}
   1ed56:	b004      	add	sp, #16
   1ed58:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1ed5a:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1ed5c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1ed60:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1ed64:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1ed66:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1ed68:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1ed6a:	9300      	str	r3, [sp, #0]
   1ed6c:	2310      	movs	r3, #16
   1ed6e:	f10d 020e 	add.w	r2, sp, #14
   1ed72:	b289      	uxth	r1, r1
   1ed74:	f7fe feeb 	bl	1db4e <net_frag_read>
	if (!frag) {
   1ed78:	2800      	cmp	r0, #0
   1ed7a:	d0ec      	beq.n	1ed56 <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1ed7c:	4630      	mov	r0, r6
   1ed7e:	e7ea      	b.n	1ed56 <net_icmpv6_get_ns_hdr+0x1e>

0001ed80 <net_icmpv6_set_ns_hdr>:
{
   1ed80:	b570      	push	{r4, r5, r6, lr}
   1ed82:	b086      	sub	sp, #24
   1ed84:	4605      	mov	r5, r0
   1ed86:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1ed88:	2300      	movs	r3, #0
   1ed8a:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ed8c:	2104      	movs	r1, #4
   1ed8e:	f7ff f84e 	bl	1de2e <net_pkt_icmp_opt_data>
   1ed92:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ed94:	2214      	movs	r2, #20
   1ed96:	4601      	mov	r1, r0
   1ed98:	4628      	mov	r0, r5
   1ed9a:	f7ff fc1d 	bl	1e5d8 <net_header_fits>
   1ed9e:	b110      	cbz	r0, 1eda6 <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1eda0:	4620      	mov	r0, r4
}
   1eda2:	b006      	add	sp, #24
   1eda4:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1eda6:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1edaa:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1edae:	441a      	add	r2, r3
   1edb0:	3204      	adds	r2, #4
   1edb2:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1edb6:	9402      	str	r4, [sp, #8]
   1edb8:	ab05      	add	r3, sp, #20
   1edba:	9301      	str	r3, [sp, #4]
   1edbc:	2304      	movs	r3, #4
   1edbe:	9300      	str	r3, [sp, #0]
   1edc0:	f10d 0312 	add.w	r3, sp, #18
   1edc4:	b292      	uxth	r2, r2
   1edc6:	68a9      	ldr	r1, [r5, #8]
   1edc8:	4628      	mov	r0, r5
   1edca:	f7fe ff32 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1edce:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1edd2:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1edd4:	9402      	str	r4, [sp, #8]
   1edd6:	9301      	str	r3, [sp, #4]
   1edd8:	2310      	movs	r3, #16
   1edda:	9300      	str	r3, [sp, #0]
   1eddc:	f10d 0312 	add.w	r3, sp, #18
   1ede0:	4601      	mov	r1, r0
   1ede2:	4628      	mov	r0, r5
   1ede4:	f7fe ff25 	bl	1dc32 <net_pkt_write>
	if (!frag) {
   1ede8:	2800      	cmp	r0, #0
   1edea:	d0da      	beq.n	1eda2 <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1edec:	4630      	mov	r0, r6
   1edee:	e7d8      	b.n	1eda2 <net_icmpv6_set_ns_hdr+0x22>

0001edf0 <net_icmpv6_get_nd_opt_hdr>:
{
   1edf0:	b570      	push	{r4, r5, r6, lr}
   1edf2:	b084      	sub	sp, #16
   1edf4:	4605      	mov	r5, r0
   1edf6:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1edf8:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1edfc:	3104      	adds	r1, #4
   1edfe:	f7ff f816 	bl	1de2e <net_pkt_icmp_opt_data>
   1ee02:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ee04:	2202      	movs	r2, #2
   1ee06:	4601      	mov	r1, r0
   1ee08:	4628      	mov	r0, r5
   1ee0a:	f7ff fbe5 	bl	1e5d8 <net_header_fits>
   1ee0e:	b110      	cbz	r0, 1ee16 <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1ee10:	4620      	mov	r0, r4
}
   1ee12:	b004      	add	sp, #16
   1ee14:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1ee16:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1ee18:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ee1c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1ee20:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1ee22:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1ee26:	4419      	add	r1, r3
   1ee28:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1ee2a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ee2c:	9600      	str	r6, [sp, #0]
   1ee2e:	2301      	movs	r3, #1
   1ee30:	f10d 020e 	add.w	r2, sp, #14
   1ee34:	b289      	uxth	r1, r1
   1ee36:	f7fe fe8a 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1ee3a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ee3e:	1c73      	adds	r3, r6, #1
   1ee40:	9300      	str	r3, [sp, #0]
   1ee42:	2301      	movs	r3, #1
   1ee44:	f10d 020e 	add.w	r2, sp, #14
   1ee48:	f7fe fe81 	bl	1db4e <net_frag_read>
	if (!frag) {
   1ee4c:	2800      	cmp	r0, #0
   1ee4e:	d0e0      	beq.n	1ee12 <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1ee50:	4630      	mov	r0, r6
   1ee52:	e7de      	b.n	1ee12 <net_icmpv6_get_nd_opt_hdr+0x22>

0001ee54 <net_icmpv6_get_na_hdr>:
{
   1ee54:	b570      	push	{r4, r5, r6, lr}
   1ee56:	b084      	sub	sp, #16
   1ee58:	4605      	mov	r5, r0
   1ee5a:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ee5c:	2104      	movs	r1, #4
   1ee5e:	f7fe ffe6 	bl	1de2e <net_pkt_icmp_opt_data>
   1ee62:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ee64:	2214      	movs	r2, #20
   1ee66:	4601      	mov	r1, r0
   1ee68:	4628      	mov	r0, r5
   1ee6a:	f7ff fbb5 	bl	1e5d8 <net_header_fits>
   1ee6e:	b110      	cbz	r0, 1ee76 <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1ee70:	4620      	mov	r0, r4
}
   1ee72:	b004      	add	sp, #16
   1ee74:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee76:	68a8      	ldr	r0, [r5, #8]
   1ee78:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ee7c:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ee80:	4419      	add	r1, r3
   1ee82:	3104      	adds	r1, #4
   1ee84:	9600      	str	r6, [sp, #0]
   1ee86:	2301      	movs	r3, #1
   1ee88:	f10d 020e 	add.w	r2, sp, #14
   1ee8c:	b289      	uxth	r1, r1
   1ee8e:	f7fe fe5e 	bl	1db4e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1ee92:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1ee96:	2300      	movs	r3, #0
   1ee98:	9300      	str	r3, [sp, #0]
   1ee9a:	2303      	movs	r3, #3
   1ee9c:	f10d 020e 	add.w	r2, sp, #14
   1eea0:	f7fe fe55 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1eea4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1eea8:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1eeaa:	9300      	str	r3, [sp, #0]
   1eeac:	2310      	movs	r3, #16
   1eeae:	f10d 020e 	add.w	r2, sp, #14
   1eeb2:	f7fe fe4c 	bl	1db4e <net_frag_read>
	if (!frag) {
   1eeb6:	2800      	cmp	r0, #0
   1eeb8:	d0db      	beq.n	1ee72 <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1eeba:	4630      	mov	r0, r6
   1eebc:	e7d9      	b.n	1ee72 <net_icmpv6_get_na_hdr+0x1e>

0001eebe <net_icmpv6_set_na_hdr>:
{
   1eebe:	b570      	push	{r4, r5, r6, lr}
   1eec0:	b086      	sub	sp, #24
   1eec2:	4605      	mov	r5, r0
   1eec4:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1eec6:	2300      	movs	r3, #0
   1eec8:	f8ad 3014 	strh.w	r3, [sp, #20]
   1eecc:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1eed0:	2104      	movs	r1, #4
   1eed2:	f7fe ffac 	bl	1de2e <net_pkt_icmp_opt_data>
   1eed6:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1eed8:	2214      	movs	r2, #20
   1eeda:	4601      	mov	r1, r0
   1eedc:	4628      	mov	r0, r5
   1eede:	f7ff fb7b 	bl	1e5d8 <net_header_fits>
   1eee2:	b110      	cbz	r0, 1eeea <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1eee4:	4620      	mov	r0, r4
}
   1eee6:	b006      	add	sp, #24
   1eee8:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1eeea:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1eeee:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1eef2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1eef4:	3204      	adds	r2, #4
   1eef6:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1eefa:	9402      	str	r4, [sp, #8]
   1eefc:	9601      	str	r6, [sp, #4]
   1eefe:	2301      	movs	r3, #1
   1ef00:	9300      	str	r3, [sp, #0]
   1ef02:	f10d 0312 	add.w	r3, sp, #18
   1ef06:	b292      	uxth	r2, r2
   1ef08:	68a9      	ldr	r1, [r5, #8]
   1ef0a:	4628      	mov	r0, r5
   1ef0c:	f7fe fe91 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1ef10:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1ef14:	9402      	str	r4, [sp, #8]
   1ef16:	ab05      	add	r3, sp, #20
   1ef18:	9301      	str	r3, [sp, #4]
   1ef1a:	2303      	movs	r3, #3
   1ef1c:	9300      	str	r3, [sp, #0]
   1ef1e:	f10d 0312 	add.w	r3, sp, #18
   1ef22:	4601      	mov	r1, r0
   1ef24:	4628      	mov	r0, r5
   1ef26:	f7fe fe84 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ef2a:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1ef2e:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1ef30:	9402      	str	r4, [sp, #8]
   1ef32:	9301      	str	r3, [sp, #4]
   1ef34:	2310      	movs	r3, #16
   1ef36:	9300      	str	r3, [sp, #0]
   1ef38:	f10d 0312 	add.w	r3, sp, #18
   1ef3c:	4601      	mov	r1, r0
   1ef3e:	4628      	mov	r0, r5
   1ef40:	f7fe fe77 	bl	1dc32 <net_pkt_write>
	if (!frag) {
   1ef44:	2800      	cmp	r0, #0
   1ef46:	d0ce      	beq.n	1eee6 <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1ef48:	4630      	mov	r0, r6
   1ef4a:	e7cc      	b.n	1eee6 <net_icmpv6_set_na_hdr+0x28>

0001ef4c <net_icmpv6_get_ra_hdr>:
{
   1ef4c:	b570      	push	{r4, r5, r6, lr}
   1ef4e:	b084      	sub	sp, #16
   1ef50:	4606      	mov	r6, r0
   1ef52:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1ef54:	2104      	movs	r1, #4
   1ef56:	f7fe ff6a 	bl	1de2e <net_pkt_icmp_opt_data>
   1ef5a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1ef5c:	220c      	movs	r2, #12
   1ef5e:	4601      	mov	r1, r0
   1ef60:	4630      	mov	r0, r6
   1ef62:	f7ff fb39 	bl	1e5d8 <net_header_fits>
   1ef66:	b110      	cbz	r0, 1ef6e <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1ef68:	4620      	mov	r0, r4
}
   1ef6a:	b004      	add	sp, #16
   1ef6c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ef6e:	68b0      	ldr	r0, [r6, #8]
   1ef70:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1ef74:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1ef78:	4419      	add	r1, r3
   1ef7a:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1ef7c:	9500      	str	r5, [sp, #0]
   1ef7e:	2301      	movs	r3, #1
   1ef80:	f10d 020e 	add.w	r2, sp, #14
   1ef84:	b289      	uxth	r1, r1
   1ef86:	f7fe fde2 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1ef8a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1ef8e:	1c6b      	adds	r3, r5, #1
   1ef90:	9300      	str	r3, [sp, #0]
   1ef92:	2301      	movs	r3, #1
   1ef94:	f10d 020e 	add.w	r2, sp, #14
   1ef98:	f7fe fdd9 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1ef9c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1efa0:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1efa2:	9300      	str	r3, [sp, #0]
   1efa4:	2302      	movs	r3, #2
   1efa6:	f10d 020e 	add.w	r2, sp, #14
   1efaa:	f7fe fdd0 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1efae:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1efb2:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1efb4:	9300      	str	r3, [sp, #0]
   1efb6:	2304      	movs	r3, #4
   1efb8:	f10d 020e 	add.w	r2, sp, #14
   1efbc:	f7fe fdc7 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1efc0:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1efc4:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1efc8:	9300      	str	r3, [sp, #0]
   1efca:	2304      	movs	r3, #4
   1efcc:	f10d 020e 	add.w	r2, sp, #14
   1efd0:	f7fe fdbd 	bl	1db4e <net_frag_read>
	if (!frag) {
   1efd4:	2800      	cmp	r0, #0
   1efd6:	d0c8      	beq.n	1ef6a <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1efd8:	4628      	mov	r0, r5
   1efda:	e7c6      	b.n	1ef6a <net_icmpv6_get_ra_hdr+0x1e>

0001efdc <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1efdc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1efe0:	b09f      	sub	sp, #124	; 0x7c
   1efe2:	4605      	mov	r5, r0
   1efe4:	4688      	mov	r8, r1
   1efe6:	4692      	mov	sl, r2
   1efe8:	4699      	mov	r9, r3
	return pkt->frags->data;
   1efea:	6883      	ldr	r3, [r0, #8]
   1efec:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1efee:	799b      	ldrb	r3, [r3, #6]
   1eff0:	2b3a      	cmp	r3, #58	; 0x3a
   1eff2:	d01d      	beq.n	1f030 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1eff4:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1eff6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1effa:	2000      	movs	r0, #0
   1effc:	f7fe fbb8 	bl	1d770 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1f000:	4604      	mov	r4, r0
   1f002:	2800      	cmp	r0, #0
   1f004:	f000 8141 	beq.w	1f28a <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1f008:	68ab      	ldr	r3, [r5, #8]
   1f00a:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1f00c:	798b      	ldrb	r3, [r1, #6]
   1f00e:	2b11      	cmp	r3, #17
   1f010:	d019      	beq.n	1f046 <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1f012:	2b06      	cmp	r3, #6
   1f014:	d019      	beq.n	1f04a <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f016:	687b      	ldr	r3, [r7, #4]
   1f018:	689b      	ldr	r3, [r3, #8]
   1f01a:	3118      	adds	r1, #24
   1f01c:	4638      	mov	r0, r7
   1f01e:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1f020:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1f024:	282f      	cmp	r0, #47	; 0x2f
   1f026:	f240 80de 	bls.w	1f1e6 <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1f02a:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1f02e:	e00d      	b.n	1f04c <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1f030:	a906      	add	r1, sp, #24
   1f032:	f7ff fd12 	bl	1ea5a <net_icmpv6_get_hdr>
   1f036:	b118      	cbz	r0, 1f040 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1f038:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1f03c:	2b00      	cmp	r3, #0
   1f03e:	dbd9      	blt.n	1eff4 <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1f040:	f06f 0515 	mvn.w	r5, #21
   1f044:	e119      	b.n	1f27a <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1f046:	2630      	movs	r6, #48	; 0x30
   1f048:	e000      	b.n	1f04c <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1f04a:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1f04c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1f050:	2230      	movs	r2, #48	; 0x30
   1f052:	4631      	mov	r1, r6
   1f054:	4628      	mov	r0, r5
   1f056:	f7fe fc3d 	bl	1d8d4 <net_pkt_copy>
	if (!frag) {
   1f05a:	4683      	mov	fp, r0
   1f05c:	2800      	cmp	r0, #0
   1f05e:	f000 8104 	beq.w	1f26a <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1f062:	4601      	mov	r1, r0
   1f064:	4620      	mov	r0, r4
   1f066:	f7fe fc1e 	bl	1d8a6 <net_pkt_frag_add>
	pkt->family = family;
   1f06a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f06e:	220a      	movs	r2, #10
   1f070:	f362 03c6 	bfi	r3, r2, #3, #4
   1f074:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1f078:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f07a:	7d7b      	ldrb	r3, [r7, #21]
   1f07c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f080:	7d7b      	ldrb	r3, [r7, #21]
   1f082:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1f086:	f10b 0008 	add.w	r0, fp, #8
   1f08a:	f7fb ff24 	bl	1aed6 <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1f08e:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1f092:	2000      	movs	r0, #0
   1f094:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1f098:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1f09a:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1f09e:	f88d 8014 	strb.w	r8, [sp, #20]
   1f0a2:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1f0a6:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1f0a8:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1f0aa:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f0ac:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1f0b0:	f882 e000 	strb.w	lr, [r2]
   1f0b4:	68a2      	ldr	r2, [r4, #8]
   1f0b6:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f0b8:	7050      	strb	r0, [r2, #1]
   1f0ba:	68a2      	ldr	r2, [r4, #8]
   1f0bc:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f0be:	7090      	strb	r0, [r2, #2]
   1f0c0:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1f0c2:	3608      	adds	r6, #8
   1f0c4:	b2b6      	uxth	r6, r6
   1f0c6:	68a2      	ldr	r2, [r4, #8]
   1f0c8:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1f0ca:	0a30      	lsrs	r0, r6, #8
   1f0cc:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1f0ce:	7156      	strb	r6, [r2, #5]
   1f0d0:	68a2      	ldr	r2, [r4, #8]
   1f0d2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f0d4:	203a      	movs	r0, #58	; 0x3a
   1f0d6:	7190      	strb	r0, [r2, #6]
   1f0d8:	68a2      	ldr	r2, [r4, #8]
   1f0da:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1f0dc:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1f0de:	2228      	movs	r2, #40	; 0x28
   1f0e0:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1f0e4:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1f0e8:	9602      	str	r6, [sp, #8]
   1f0ea:	ab05      	add	r3, sp, #20
   1f0ec:	9301      	str	r3, [sp, #4]
   1f0ee:	f04f 0a01 	mov.w	sl, #1
   1f0f2:	f8cd a000 	str.w	sl, [sp]
   1f0f6:	f10d 0316 	add.w	r3, sp, #22
   1f0fa:	4620      	mov	r0, r4
   1f0fc:	f7fe fd99 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1f100:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f104:	9602      	str	r6, [sp, #8]
   1f106:	f10d 0315 	add.w	r3, sp, #21
   1f10a:	9301      	str	r3, [sp, #4]
   1f10c:	f8cd a000 	str.w	sl, [sp]
   1f110:	f10d 0316 	add.w	r3, sp, #22
   1f114:	4601      	mov	r1, r0
   1f116:	4620      	mov	r0, r4
   1f118:	f7fe fd8b 	bl	1dc32 <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1f11c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1f120:	9602      	str	r6, [sp, #8]
   1f122:	ab06      	add	r3, sp, #24
   1f124:	9301      	str	r3, [sp, #4]
   1f126:	2304      	movs	r3, #4
   1f128:	9300      	str	r3, [sp, #0]
   1f12a:	f10d 0316 	add.w	r3, sp, #22
   1f12e:	4601      	mov	r1, r0
   1f130:	4620      	mov	r0, r4
   1f132:	f7fe fd7e 	bl	1dc32 <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1f136:	f1b8 0f04 	cmp.w	r8, #4
   1f13a:	d056      	beq.n	1f1ea <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1f13c:	68ab      	ldr	r3, [r5, #8]
   1f13e:	689e      	ldr	r6, [r3, #8]
   1f140:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1f142:	2bff      	cmp	r3, #255	; 0xff
   1f144:	d05f      	beq.n	1f206 <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1f146:	af12      	add	r7, sp, #72	; 0x48
   1f148:	4633      	mov	r3, r6
   1f14a:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f14e:	6859      	ldr	r1, [r3, #4]
   1f150:	689a      	ldr	r2, [r3, #8]
   1f152:	68db      	ldr	r3, [r3, #12]
   1f154:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1f156:	af06      	add	r7, sp, #24
   1f158:	ab12      	add	r3, sp, #72	; 0x48
   1f15a:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1f15c:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1f160:	68a3      	ldr	r3, [r4, #8]
   1f162:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f166:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1f16a:	4633      	mov	r3, r6
   1f16c:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1f170:	6859      	ldr	r1, [r3, #4]
   1f172:	689a      	ldr	r2, [r3, #8]
   1f174:	68db      	ldr	r3, [r3, #12]
   1f176:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f17a:	ae16      	add	r6, sp, #88	; 0x58
   1f17c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f17e:	f8cc 0008 	str.w	r0, [ip, #8]
   1f182:	f8cc 100c 	str.w	r1, [ip, #12]
   1f186:	f8cc 2010 	str.w	r2, [ip, #16]
   1f18a:	f8cc 3014 	str.w	r3, [ip, #20]
   1f18e:	68a3      	ldr	r3, [r4, #8]
   1f190:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1f194:	ae1a      	add	r6, sp, #104	; 0x68
   1f196:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1f19a:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1f19e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f1a0:	f8ce 0018 	str.w	r0, [lr, #24]
   1f1a4:	f8ce 101c 	str.w	r1, [lr, #28]
   1f1a8:	f8ce 2020 	str.w	r2, [lr, #32]
   1f1ac:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1f1b0:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1f1b2:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1f1b4:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1f1b8:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1f1bc:	6a2b      	ldr	r3, [r5, #32]
   1f1be:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1f1c0:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1f1c4:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1f1c8:	68a1      	ldr	r1, [r4, #8]
   1f1ca:	4620      	mov	r0, r4
   1f1cc:	f7ff fbf8 	bl	1e9c0 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f1d0:	4620      	mov	r0, r4
   1f1d2:	f7fb ff3d 	bl	1b050 <net_send_data>
   1f1d6:	2800      	cmp	r0, #0
   1f1d8:	db4a      	blt.n	1f270 <net_icmpv6_send_error+0x294>
   1f1da:	4a2d      	ldr	r2, [pc, #180]	; (1f290 <net_icmpv6_send_error+0x2b4>)
   1f1dc:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f1de:	3301      	adds	r3, #1
   1f1e0:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f1e2:	2500      	movs	r5, #0
   1f1e4:	e04d      	b.n	1f282 <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1f1e6:	2600      	movs	r6, #0
   1f1e8:	e730      	b.n	1f04c <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1f1ea:	4620      	mov	r0, r4
   1f1ec:	f7fe fe0a 	bl	1de04 <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1f1f0:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1f1f4:	0a1a      	lsrs	r2, r3, #8
   1f1f6:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1f1f8:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1f1fa:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1f1fe:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1f200:	f880 9007 	strb.w	r9, [r0, #7]
   1f204:	e79a      	b.n	1f13c <net_icmpv6_send_error+0x160>
   1f206:	68a3      	ldr	r3, [r4, #8]
   1f208:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1f20c:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1f210:	4633      	mov	r3, r6
   1f212:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1f216:	6859      	ldr	r1, [r3, #4]
   1f218:	689a      	ldr	r2, [r3, #8]
   1f21a:	68db      	ldr	r3, [r3, #12]
   1f21c:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1f220:	ae0a      	add	r6, sp, #40	; 0x28
   1f222:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f224:	f8cc 0018 	str.w	r0, [ip, #24]
   1f228:	f8cc 101c 	str.w	r1, [ip, #28]
   1f22c:	f8cc 2020 	str.w	r2, [ip, #32]
   1f230:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1f234:	68a3      	ldr	r3, [r4, #8]
   1f236:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1f23a:	68ab      	ldr	r3, [r5, #8]
   1f23c:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1f23e:	3118      	adds	r1, #24
   1f240:	4638      	mov	r0, r7
   1f242:	f7fc fe6b 	bl	1bf1c <net_if_ipv6_select_src_addr>
   1f246:	4603      	mov	r3, r0
   1f248:	ae0e      	add	r6, sp, #56	; 0x38
   1f24a:	6800      	ldr	r0, [r0, #0]
   1f24c:	6859      	ldr	r1, [r3, #4]
   1f24e:	689a      	ldr	r2, [r3, #8]
   1f250:	68db      	ldr	r3, [r3, #12]
   1f252:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1f254:	ae0e      	add	r6, sp, #56	; 0x38
   1f256:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1f258:	f8c8 0008 	str.w	r0, [r8, #8]
   1f25c:	f8c8 100c 	str.w	r1, [r8, #12]
   1f260:	f8c8 2010 	str.w	r2, [r8, #16]
   1f264:	f8c8 3014 	str.w	r3, [r8, #20]
   1f268:	e7a2      	b.n	1f1b0 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1f26a:	f06f 050b 	mvn.w	r5, #11
   1f26e:	e001      	b.n	1f274 <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1f270:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1f274:	4620      	mov	r0, r4
   1f276:	f7fe faec 	bl	1d852 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f27a:	4a05      	ldr	r2, [pc, #20]	; (1f290 <net_icmpv6_send_error+0x2b4>)
   1f27c:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f27e:	3301      	adds	r3, #1
   1f280:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1f282:	4628      	mov	r0, r5
   1f284:	b01f      	add	sp, #124	; 0x7c
   1f286:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1f28a:	f06f 050b 	mvn.w	r5, #11
   1f28e:	e7f4      	b.n	1f27a <net_icmpv6_send_error+0x29e>
   1f290:	20002b58 	.word	0x20002b58

0001f294 <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1f294:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f298:	b08d      	sub	sp, #52	; 0x34
   1f29a:	4605      	mov	r5, r0
   1f29c:	460e      	mov	r6, r1
   1f29e:	4692      	mov	sl, r2
   1f2a0:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1f2a2:	f7fc fe3b 	bl	1bf1c <net_if_ipv6_select_src_addr>
   1f2a6:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f2a8:	686b      	ldr	r3, [r5, #4]
   1f2aa:	689b      	ldr	r3, [r3, #8]
   1f2ac:	4631      	mov	r1, r6
   1f2ae:	4628      	mov	r0, r5
   1f2b0:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f2b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f2b6:	f7fe fa5b 	bl	1d770 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1f2ba:	273a      	movs	r7, #58	; 0x3a
   1f2bc:	9700      	str	r7, [sp, #0]
   1f2be:	462b      	mov	r3, r5
   1f2c0:	4632      	mov	r2, r6
   1f2c2:	4641      	mov	r1, r8
   1f2c4:	f000 fcc1 	bl	1fc4a <net_ipv6_create_raw>
   1f2c8:	4604      	mov	r4, r0
	pkt->family = family;
   1f2ca:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1f2ce:	220a      	movs	r2, #10
   1f2d0:	f362 03c6 	bfi	r3, r2, #3, #4
   1f2d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1f2d8:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f2da:	7d6b      	ldrb	r3, [r5, #21]
   1f2dc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f2e0:	7d6b      	ldrb	r3, [r5, #21]
   1f2e2:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1f2e6:	aa0c      	add	r2, sp, #48	; 0x30
   1f2e8:	2380      	movs	r3, #128	; 0x80
   1f2ea:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f2ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f2f2:	2101      	movs	r1, #1
   1f2f4:	f7fe fbe5 	bl	1dac2 <net_pkt_append>
   1f2f8:	f04f 0b00 	mov.w	fp, #0
   1f2fc:	aa0c      	add	r2, sp, #48	; 0x30
   1f2fe:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1f302:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f306:	2101      	movs	r1, #1
   1f308:	4620      	mov	r0, r4
   1f30a:	f7fe fbda 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f30e:	ad0c      	add	r5, sp, #48	; 0x30
   1f310:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f314:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f318:	462a      	mov	r2, r5
   1f31a:	2102      	movs	r1, #2
   1f31c:	4620      	mov	r0, r4
   1f31e:	f7fe fbd0 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f322:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1f326:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1f32a:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f32e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f332:	462a      	mov	r2, r5
   1f334:	2102      	movs	r1, #2
   1f336:	4620      	mov	r0, r4
   1f338:	f7fe fbc3 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f33c:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1f340:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1f344:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f348:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f34c:	462a      	mov	r2, r5
   1f34e:	2102      	movs	r1, #2
   1f350:	4620      	mov	r0, r4
   1f352:	f7fe fbb6 	bl	1dac2 <net_pkt_append>
	return pkt->frags->data;
   1f356:	68a3      	ldr	r3, [r4, #8]
   1f358:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f35c:	ad04      	add	r5, sp, #16
   1f35e:	f8d8 0000 	ldr.w	r0, [r8]
   1f362:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1f366:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1f36a:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1f36e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f370:	ad04      	add	r5, sp, #16
   1f372:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f374:	f8cc 0008 	str.w	r0, [ip, #8]
   1f378:	f8cc 100c 	str.w	r1, [ip, #12]
   1f37c:	f8cc 2010 	str.w	r2, [ip, #16]
   1f380:	f8cc 3014 	str.w	r3, [ip, #20]
   1f384:	68a3      	ldr	r3, [r4, #8]
   1f386:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f38a:	ad08      	add	r5, sp, #32
   1f38c:	6830      	ldr	r0, [r6, #0]
   1f38e:	6871      	ldr	r1, [r6, #4]
   1f390:	68b2      	ldr	r2, [r6, #8]
   1f392:	68f3      	ldr	r3, [r6, #12]
   1f394:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f396:	ad08      	add	r5, sp, #32
   1f398:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f39a:	f8ce 0018 	str.w	r0, [lr, #24]
   1f39e:	f8ce 101c 	str.w	r1, [lr, #28]
   1f3a2:	f8ce 2020 	str.w	r2, [lr, #32]
   1f3a6:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f3aa:	68a1      	ldr	r1, [r4, #8]
   1f3ac:	4620      	mov	r0, r4
   1f3ae:	f7ff fb07 	bl	1e9c0 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1f3b2:	4639      	mov	r1, r7
   1f3b4:	4620      	mov	r0, r4
   1f3b6:	f000 fce6 	bl	1fd86 <net_ipv6_finalize_raw>
   1f3ba:	4558      	cmp	r0, fp
   1f3bc:	db0c      	blt.n	1f3d8 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1f3be:	4620      	mov	r0, r4
   1f3c0:	f7fb fe46 	bl	1b050 <net_send_data>
   1f3c4:	4558      	cmp	r0, fp
   1f3c6:	db07      	blt.n	1f3d8 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1f3c8:	4a08      	ldr	r2, [pc, #32]	; (1f3ec <net_icmpv6_send_echo_request+0x158>)
   1f3ca:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1f3cc:	3301      	adds	r3, #1
   1f3ce:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1f3d0:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1f3d2:	b00d      	add	sp, #52	; 0x34
   1f3d4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1f3d8:	4620      	mov	r0, r4
   1f3da:	f7fe fa3a 	bl	1d852 <net_pkt_unref>
	net_stats.icmp.drop++;
   1f3de:	4a03      	ldr	r2, [pc, #12]	; (1f3ec <net_icmpv6_send_echo_request+0x158>)
   1f3e0:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f3e2:	3301      	adds	r3, #1
   1f3e4:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1f3e6:	f06f 0004 	mvn.w	r0, #4
   1f3ea:	e7f2      	b.n	1f3d2 <net_icmpv6_send_echo_request+0x13e>
   1f3ec:	20002b58 	.word	0x20002b58

0001f3f0 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1f3f0:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1f3f2:	4c12      	ldr	r4, [pc, #72]	; (1f43c <net_icmpv6_input+0x4c>)
   1f3f4:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1f3f6:	3301      	adds	r3, #1
   1f3f8:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1f3fa:	4b11      	ldr	r3, [pc, #68]	; (1f440 <net_icmpv6_input+0x50>)
   1f3fc:	681b      	ldr	r3, [r3, #0]
   1f3fe:	e005      	b.n	1f40c <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f400:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f402:	b17b      	cbz	r3, 1f424 <net_icmpv6_input+0x34>
	return node->next;
   1f404:	681c      	ldr	r4, [r3, #0]
   1f406:	b18c      	cbz	r4, 1f42c <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f408:	b175      	cbz	r5, 1f428 <net_icmpv6_input+0x38>
	return node->next;
   1f40a:	681b      	ldr	r3, [r3, #0]
   1f40c:	b183      	cbz	r3, 1f430 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1f40e:	791c      	ldrb	r4, [r3, #4]
   1f410:	428c      	cmp	r4, r1
   1f412:	d1f5      	bne.n	1f400 <net_icmpv6_input+0x10>
   1f414:	795c      	ldrb	r4, [r3, #5]
   1f416:	4294      	cmp	r4, r2
   1f418:	d001      	beq.n	1f41e <net_icmpv6_input+0x2e>
   1f41a:	2c00      	cmp	r4, #0
   1f41c:	d1f0      	bne.n	1f400 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1f41e:	689b      	ldr	r3, [r3, #8]
   1f420:	4798      	blx	r3
   1f422:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1f424:	461c      	mov	r4, r3
   1f426:	e7ee      	b.n	1f406 <net_icmpv6_input+0x16>
   1f428:	2300      	movs	r3, #0
   1f42a:	e7ef      	b.n	1f40c <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1f42c:	2300      	movs	r3, #0
   1f42e:	e7ed      	b.n	1f40c <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1f430:	4a02      	ldr	r2, [pc, #8]	; (1f43c <net_icmpv6_input+0x4c>)
   1f432:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1f434:	3301      	adds	r3, #1
   1f436:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1f438:	2002      	movs	r0, #2
}
   1f43a:	bd38      	pop	{r3, r4, r5, pc}
   1f43c:	20002b58 	.word	0x20002b58
   1f440:	20001f84 	.word	0x20001f84

0001f444 <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1f444:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1f446:	4802      	ldr	r0, [pc, #8]	; (1f450 <net_icmpv6_init+0xc>)
   1f448:	f7ff fa8a 	bl	1e960 <net_icmpv6_register_handler>
   1f44c:	bd08      	pop	{r3, pc}
   1f44e:	bf00      	nop
   1f450:	2000bf30 	.word	0x2000bf30

0001f454 <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1f454:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1f456:	7803      	ldrb	r3, [r0, #0]
   1f458:	3b01      	subs	r3, #1
   1f45a:	b2db      	uxtb	r3, r3
   1f45c:	7003      	strb	r3, [r0, #0]
   1f45e:	b913      	cbnz	r3, 1f466 <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1f460:	6903      	ldr	r3, [r0, #16]
   1f462:	b103      	cbz	r3, 1f466 <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1f464:	4798      	blx	r3
   1f466:	bd08      	pop	{r3, pc}

0001f468 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1f468:	7803      	ldrb	r3, [r0, #0]
   1f46a:	3301      	adds	r3, #1
   1f46c:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1f46e:	4770      	bx	lr

0001f470 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1f470:	2100      	movs	r1, #0
   1f472:	8903      	ldrh	r3, [r0, #8]
   1f474:	4299      	cmp	r1, r3
   1f476:	da17      	bge.n	1f4a8 <net_nbr_get+0x38>
{
   1f478:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1f47a:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1f47c:	8853      	ldrh	r3, [r2, #2]
   1f47e:	8894      	ldrh	r4, [r2, #4]
   1f480:	4423      	add	r3, r4
   1f482:	3314      	adds	r3, #20
   1f484:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1f488:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1f48a:	5cd3      	ldrb	r3, [r2, r3]
   1f48c:	b12b      	cbz	r3, 1f49a <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1f48e:	3101      	adds	r1, #1
   1f490:	8903      	ldrh	r3, [r0, #8]
   1f492:	4299      	cmp	r1, r3
   1f494:	dbf1      	blt.n	1f47a <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1f496:	2000      	movs	r0, #0
}
   1f498:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1f49a:	f104 0314 	add.w	r3, r4, #20
   1f49e:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	f7ff ffe1 	bl	1f468 <net_nbr_ref>
   1f4a6:	bd10      	pop	{r4, pc}
	return NULL;
   1f4a8:	2000      	movs	r0, #0
   1f4aa:	4770      	bx	lr

0001f4ac <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1f4ac:	7843      	ldrb	r3, [r0, #1]
   1f4ae:	2bff      	cmp	r3, #255	; 0xff
   1f4b0:	d158      	bne.n	1f564 <net_nbr_link+0xb8>
{
   1f4b2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f4b6:	4690      	mov	r8, r2
   1f4b8:	460f      	mov	r7, r1
   1f4ba:	4606      	mov	r6, r0
   1f4bc:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1f4c0:	2400      	movs	r4, #0
   1f4c2:	e008      	b.n	1f4d6 <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f4c4:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f4c8:	4b2a      	ldr	r3, [pc, #168]	; (1f574 <net_nbr_link+0xc8>)
   1f4ca:	4413      	add	r3, r2
   1f4cc:	7a1b      	ldrb	r3, [r3, #8]
   1f4ce:	b933      	cbnz	r3, 1f4de <net_nbr_link+0x32>
			avail = i;
   1f4d0:	4625      	mov	r5, r4
   1f4d2:	e004      	b.n	1f4de <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f4d4:	3401      	adds	r4, #1
   1f4d6:	2c07      	cmp	r4, #7
   1f4d8:	dc1e      	bgt.n	1f518 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1f4da:	2d00      	cmp	r5, #0
   1f4dc:	dbf2      	blt.n	1f4c4 <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1f4de:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1f4e2:	4b24      	ldr	r3, [pc, #144]	; (1f574 <net_nbr_link+0xc8>)
   1f4e4:	4413      	add	r3, r2
   1f4e6:	7a1b      	ldrb	r3, [r3, #8]
   1f4e8:	2b00      	cmp	r3, #0
   1f4ea:	d0f3      	beq.n	1f4d4 <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1f4ec:	4921      	ldr	r1, [pc, #132]	; (1f574 <net_nbr_link+0xc8>)
   1f4ee:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1f4f0:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f4f4:	3102      	adds	r1, #2
   1f4f6:	f8d8 0000 	ldr.w	r0, [r8]
   1f4fa:	f00b f9a5 	bl	2a848 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1f4fe:	4603      	mov	r3, r0
   1f500:	2800      	cmp	r0, #0
   1f502:	d1e7      	bne.n	1f4d4 <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1f504:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1f508:	4a1a      	ldr	r2, [pc, #104]	; (1f574 <net_nbr_link+0xc8>)
   1f50a:	440a      	add	r2, r1
   1f50c:	7a11      	ldrb	r1, [r2, #8]
   1f50e:	3101      	adds	r1, #1
   1f510:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1f512:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1f514:	60b7      	str	r7, [r6, #8]

			return 0;
   1f516:	e019      	b.n	1f54c <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1f518:	2d00      	cmp	r5, #0
   1f51a:	db27      	blt.n	1f56c <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1f51c:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1f520:	4b14      	ldr	r3, [pc, #80]	; (1f574 <net_nbr_link+0xc8>)
   1f522:	4413      	add	r3, r2
   1f524:	7a1a      	ldrb	r2, [r3, #8]
   1f526:	3201      	adds	r2, #1
   1f528:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1f52a:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1f52c:	f8d8 1000 	ldr.w	r1, [r8]
   1f530:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1f534:	b109      	cbz	r1, 1f53a <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1f536:	2a06      	cmp	r2, #6
   1f538:	d90b      	bls.n	1f552 <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1f53a:	f898 2004 	ldrb.w	r2, [r8, #4]
   1f53e:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1f542:	4b0c      	ldr	r3, [pc, #48]	; (1f574 <net_nbr_link+0xc8>)
   1f544:	441d      	add	r5, r3
   1f546:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1f548:	60b7      	str	r7, [r6, #8]

	return 0;
   1f54a:	2300      	movs	r3, #0
}
   1f54c:	4618      	mov	r0, r3
   1f54e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1f552:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1f556:	4807      	ldr	r0, [pc, #28]	; (1f574 <net_nbr_link+0xc8>)
   1f558:	4418      	add	r0, r3
   1f55a:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1f55c:	3002      	adds	r0, #2
   1f55e:	f7e0 feaf 	bl	2c0 <memcpy>
   1f562:	e7ea      	b.n	1f53a <net_nbr_link+0x8e>
		return -EALREADY;
   1f564:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1f568:	4618      	mov	r0, r3
   1f56a:	4770      	bx	lr
		return -ENOENT;
   1f56c:	f06f 0301 	mvn.w	r3, #1
   1f570:	e7ec      	b.n	1f54c <net_nbr_link+0xa0>
   1f572:	bf00      	nop
   1f574:	20001f8c 	.word	0x20001f8c

0001f578 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1f578:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1f57c:	4b01      	ldr	r3, [pc, #4]	; (1f584 <net_nbr_get_lladdr+0xc>)
   1f57e:	4418      	add	r0, r3
   1f580:	4770      	bx	lr
   1f582:	bf00      	nop
   1f584:	20001f8c 	.word	0x20001f8c

0001f588 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1f588:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1f58a:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1f58e:	428b      	cmp	r3, r1
   1f590:	d003      	beq.n	1f59a <ipv6_nbr_set_state+0x12>
   1f592:	2b05      	cmp	r3, #5
   1f594:	d001      	beq.n	1f59a <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1f596:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1f59a:	4770      	bx	lr

0001f59c <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f59c:	b570      	push	{r4, r5, r6, lr}
   1f59e:	4605      	mov	r5, r0
   1f5a0:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f5a2:	2400      	movs	r4, #0
   1f5a4:	e000      	b.n	1f5a8 <iface_cb+0xc>
   1f5a6:	3401      	adds	r4, #1
   1f5a8:	2c07      	cmp	r4, #7
   1f5aa:	dc0c      	bgt.n	1f5c6 <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1f5ac:	4a06      	ldr	r2, [pc, #24]	; (1f5c8 <iface_cb+0x2c>)
   1f5ae:	01e3      	lsls	r3, r4, #7
   1f5b0:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1f5b2:	5cd3      	ldrb	r3, [r2, r3]
   1f5b4:	2b00      	cmp	r3, #0
   1f5b6:	d0f6      	beq.n	1f5a6 <iface_cb+0xa>
   1f5b8:	6883      	ldr	r3, [r0, #8]
   1f5ba:	42ab      	cmp	r3, r5
   1f5bc:	d1f3      	bne.n	1f5a6 <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1f5be:	6833      	ldr	r3, [r6, #0]
   1f5c0:	6871      	ldr	r1, [r6, #4]
   1f5c2:	4798      	blx	r3
   1f5c4:	e7ef      	b.n	1f5a6 <iface_cb+0xa>
	}
}
   1f5c6:	bd70      	pop	{r4, r5, r6, pc}
   1f5c8:	2000bf60 	.word	0x2000bf60

0001f5cc <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1f5cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5ce:	b085      	sub	sp, #20
   1f5d0:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1f5d2:	a903      	add	r1, sp, #12
   1f5d4:	f004 ff0a 	bl	243ec <iface2str>
   1f5d8:	4602      	mov	r2, r0
   1f5da:	4629      	mov	r1, r5
   1f5dc:	4885      	ldr	r0, [pc, #532]	; (1f7f4 <iface_cb+0x228>)
   1f5de:	f7e3 fd15 	bl	300c <printk>
	printk("=======================%s\n", extra);
   1f5e2:	9903      	ldr	r1, [sp, #12]
   1f5e4:	4884      	ldr	r0, [pc, #528]	; (1f7f8 <iface_cb+0x22c>)
   1f5e6:	f7e3 fd11 	bl	300c <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1f5ea:	f3bf 8f5b 	dmb	ish
   1f5ee:	68eb      	ldr	r3, [r5, #12]
   1f5f0:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1f5f4:	f013 0f01 	tst.w	r3, #1
   1f5f8:	d014      	beq.n	1f624 <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1f5fa:	2318      	movs	r3, #24
   1f5fc:	4a7f      	ldr	r2, [pc, #508]	; (1f7fc <iface_cb+0x230>)
   1f5fe:	7d29      	ldrb	r1, [r5, #20]
   1f600:	6928      	ldr	r0, [r5, #16]
   1f602:	f7fe fd45 	bl	1e090 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1f606:	4601      	mov	r1, r0
   1f608:	487d      	ldr	r0, [pc, #500]	; (1f800 <iface_cb+0x234>)
   1f60a:	f7e3 fcff 	bl	300c <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1f60e:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1f610:	487c      	ldr	r0, [pc, #496]	; (1f804 <iface_cb+0x238>)
   1f612:	f7e3 fcfb 	bl	300c <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1f616:	2103      	movs	r1, #3
   1f618:	487b      	ldr	r0, [pc, #492]	; (1f808 <iface_cb+0x23c>)
   1f61a:	f7e3 fcf7 	bl	300c <printk>
	count = 0;
   1f61e:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f620:	463c      	mov	r4, r7
   1f622:	e02e      	b.n	1f682 <iface_cb+0xb6>
		printk("Interface is down.\n");
   1f624:	4879      	ldr	r0, [pc, #484]	; (1f80c <iface_cb+0x240>)
   1f626:	f7e3 fcf1 	bl	300c <printk>
   1f62a:	e0db      	b.n	1f7e4 <iface_cb+0x218>
		return "<unknown type>";
   1f62c:	4a78      	ldr	r2, [pc, #480]	; (1f810 <iface_cb+0x244>)
   1f62e:	e006      	b.n	1f63e <iface_cb+0x72>
		return "DHCP";
   1f630:	4a78      	ldr	r2, [pc, #480]	; (1f814 <iface_cb+0x248>)
   1f632:	e004      	b.n	1f63e <iface_cb+0x72>
		return "manual";
   1f634:	4a78      	ldr	r2, [pc, #480]	; (1f818 <iface_cb+0x24c>)
   1f636:	e002      	b.n	1f63e <iface_cb+0x72>
	return "<invalid type>";
   1f638:	4a78      	ldr	r2, [pc, #480]	; (1f81c <iface_cb+0x250>)
   1f63a:	e000      	b.n	1f63e <iface_cb+0x72>
		return "autoconf";
   1f63c:	4a78      	ldr	r2, [pc, #480]	; (1f820 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1f63e:	236c      	movs	r3, #108	; 0x6c
   1f640:	fb03 5304 	mla	r3, r3, r4, r5
   1f644:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1f648:	3301      	adds	r3, #1
   1f64a:	2b03      	cmp	r3, #3
   1f64c:	d809      	bhi.n	1f662 <iface_cb+0x96>
   1f64e:	e8df f003 	tbb	[pc, r3]
   1f652:	0a02      	.short	0x0a02
   1f654:	0604      	.short	0x0604
		return "<unknown state>";
   1f656:	4b73      	ldr	r3, [pc, #460]	; (1f824 <iface_cb+0x258>)
   1f658:	e006      	b.n	1f668 <iface_cb+0x9c>
		return "preferred";
   1f65a:	4b73      	ldr	r3, [pc, #460]	; (1f828 <iface_cb+0x25c>)
   1f65c:	e004      	b.n	1f668 <iface_cb+0x9c>
		return "deprecated";
   1f65e:	4b73      	ldr	r3, [pc, #460]	; (1f82c <iface_cb+0x260>)
   1f660:	e002      	b.n	1f668 <iface_cb+0x9c>
	return "<invalid state>";
   1f662:	4b73      	ldr	r3, [pc, #460]	; (1f830 <iface_cb+0x264>)
   1f664:	e000      	b.n	1f668 <iface_cb+0x9c>
		return "tentative";
   1f666:	4b73      	ldr	r3, [pc, #460]	; (1f834 <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1f668:	266c      	movs	r6, #108	; 0x6c
   1f66a:	fb06 5604 	mla	r6, r6, r4, r5
   1f66e:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1f672:	b368      	cbz	r0, 1f6d0 <iface_cb+0x104>
   1f674:	4870      	ldr	r0, [pc, #448]	; (1f838 <iface_cb+0x26c>)
   1f676:	9000      	str	r0, [sp, #0]
   1f678:	4870      	ldr	r0, [pc, #448]	; (1f83c <iface_cb+0x270>)
   1f67a:	f7e3 fcc7 	bl	300c <printk>
		count++;
   1f67e:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1f680:	3401      	adds	r4, #1
   1f682:	2c02      	cmp	r4, #2
   1f684:	dc26      	bgt.n	1f6d4 <iface_cb+0x108>
		if (!unicast->is_used) {
   1f686:	236c      	movs	r3, #108	; 0x6c
   1f688:	fb03 5304 	mla	r3, r3, r4, r5
   1f68c:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1f690:	2b00      	cmp	r3, #0
   1f692:	d0f5      	beq.n	1f680 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1f694:	266c      	movs	r6, #108	; 0x6c
   1f696:	fb06 f604 	mul.w	r6, r6, r4
   1f69a:	f106 0120 	add.w	r1, r6, #32
   1f69e:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1f6a0:	2328      	movs	r3, #40	; 0x28
   1f6a2:	4a67      	ldr	r2, [pc, #412]	; (1f840 <iface_cb+0x274>)
   1f6a4:	3110      	adds	r1, #16
   1f6a6:	200a      	movs	r0, #10
   1f6a8:	f7fe fd1c 	bl	1e0e4 <net_addr_ntop>
   1f6ac:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1f6ae:	442e      	add	r6, r5
   1f6b0:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1f6b4:	2b03      	cmp	r3, #3
   1f6b6:	d8bf      	bhi.n	1f638 <iface_cb+0x6c>
   1f6b8:	a201      	add	r2, pc, #4	; (adr r2, 1f6c0 <iface_cb+0xf4>)
   1f6ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1f6be:	bf00      	nop
   1f6c0:	0001f62d 	.word	0x0001f62d
   1f6c4:	0001f63d 	.word	0x0001f63d
   1f6c8:	0001f631 	.word	0x0001f631
   1f6cc:	0001f635 	.word	0x0001f635
		printk("\t%s %s %s%s\n",
   1f6d0:	485c      	ldr	r0, [pc, #368]	; (1f844 <iface_cb+0x278>)
   1f6d2:	e7d0      	b.n	1f676 <iface_cb+0xaa>
	}

	if (count == 0) {
   1f6d4:	b137      	cbz	r7, 1f6e4 <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1f6d6:	2105      	movs	r1, #5
   1f6d8:	485b      	ldr	r0, [pc, #364]	; (1f848 <iface_cb+0x27c>)
   1f6da:	f7e3 fc97 	bl	300c <printk>
	count = 0;
   1f6de:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f6e0:	4634      	mov	r4, r6
   1f6e2:	e004      	b.n	1f6ee <iface_cb+0x122>
		printk("\t<none>\n");
   1f6e4:	4859      	ldr	r0, [pc, #356]	; (1f84c <iface_cb+0x280>)
   1f6e6:	f7e3 fc91 	bl	300c <printk>
   1f6ea:	e7f4      	b.n	1f6d6 <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f6ec:	3401      	adds	r4, #1
   1f6ee:	2c04      	cmp	r4, #4
   1f6f0:	dc18      	bgt.n	1f724 <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1f6f2:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f6f6:	00d3      	lsls	r3, r2, #3
   1f6f8:	461a      	mov	r2, r3
   1f6fa:	442b      	add	r3, r5
   1f6fc:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f700:	f013 0f01 	tst.w	r3, #1
   1f704:	d0f2      	beq.n	1f6ec <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1f706:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f70a:	4429      	add	r1, r5
   1f70c:	2328      	movs	r3, #40	; 0x28
   1f70e:	4a4c      	ldr	r2, [pc, #304]	; (1f840 <iface_cb+0x274>)
   1f710:	3118      	adds	r1, #24
   1f712:	200a      	movs	r0, #10
   1f714:	f7fe fce6 	bl	1e0e4 <net_addr_ntop>
		printk("\t%s\n",
   1f718:	4601      	mov	r1, r0
   1f71a:	484d      	ldr	r0, [pc, #308]	; (1f850 <iface_cb+0x284>)
   1f71c:	f7e3 fc76 	bl	300c <printk>

		count++;
   1f720:	3601      	adds	r6, #1
   1f722:	e7e3      	b.n	1f6ec <iface_cb+0x120>
	}

	if (count == 0) {
   1f724:	b136      	cbz	r6, 1f734 <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1f726:	2102      	movs	r1, #2
   1f728:	484a      	ldr	r0, [pc, #296]	; (1f854 <iface_cb+0x288>)
   1f72a:	f7e3 fc6f 	bl	300c <printk>
	count = 0;
   1f72e:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f730:	4634      	mov	r4, r6
   1f732:	e009      	b.n	1f748 <iface_cb+0x17c>
		printk("\t<none>\n");
   1f734:	4845      	ldr	r0, [pc, #276]	; (1f84c <iface_cb+0x280>)
   1f736:	f7e3 fc69 	bl	300c <printk>
   1f73a:	e7f4      	b.n	1f726 <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1f73c:	4b41      	ldr	r3, [pc, #260]	; (1f844 <iface_cb+0x278>)
   1f73e:	4846      	ldr	r0, [pc, #280]	; (1f858 <iface_cb+0x28c>)
   1f740:	f7e3 fc64 	bl	300c <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1f744:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1f746:	3401      	adds	r4, #1
   1f748:	2c01      	cmp	r4, #1
   1f74a:	dc1e      	bgt.n	1f78a <iface_cb+0x1be>
		if (!prefix->is_used) {
   1f74c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1f750:	0093      	lsls	r3, r2, #2
   1f752:	461a      	mov	r2, r3
   1f754:	442b      	add	r3, r5
   1f756:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1f75a:	2b00      	cmp	r3, #0
   1f75c:	d0f3      	beq.n	1f746 <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1f75e:	0127      	lsls	r7, r4, #4
   1f760:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1f764:	4429      	add	r1, r5
   1f766:	2328      	movs	r3, #40	; 0x28
   1f768:	4a35      	ldr	r2, [pc, #212]	; (1f840 <iface_cb+0x274>)
   1f76a:	3110      	adds	r1, #16
   1f76c:	200a      	movs	r0, #10
   1f76e:	f7fe fcb9 	bl	1e0e4 <net_addr_ntop>
   1f772:	4601      	mov	r1, r0
		       prefix->len,
   1f774:	1b3f      	subs	r7, r7, r4
   1f776:	00bb      	lsls	r3, r7, #2
   1f778:	442b      	add	r3, r5
   1f77a:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1f77e:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1f782:	2b00      	cmp	r3, #0
   1f784:	d0da      	beq.n	1f73c <iface_cb+0x170>
   1f786:	4b2c      	ldr	r3, [pc, #176]	; (1f838 <iface_cb+0x26c>)
   1f788:	e7d9      	b.n	1f73e <iface_cb+0x172>
	}

	if (count == 0) {
   1f78a:	b36e      	cbz	r6, 1f7e8 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1f78c:	2100      	movs	r1, #0
   1f78e:	4628      	mov	r0, r5
   1f790:	f7fc fade 	bl	1bd50 <net_if_ipv6_router_find_default>
	if (router) {
   1f794:	4604      	mov	r4, r0
   1f796:	b188      	cbz	r0, 1f7bc <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1f798:	4830      	ldr	r0, [pc, #192]	; (1f85c <iface_cb+0x290>)
   1f79a:	f7e3 fc37 	bl	300c <printk>
   1f79e:	2328      	movs	r3, #40	; 0x28
   1f7a0:	4a27      	ldr	r2, [pc, #156]	; (1f840 <iface_cb+0x274>)
   1f7a2:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1f7a6:	200a      	movs	r0, #10
   1f7a8:	f7fe fc9c 	bl	1e0e4 <net_addr_ntop>
   1f7ac:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1f7ae:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1f7b2:	b1eb      	cbz	r3, 1f7f0 <iface_cb+0x224>
   1f7b4:	4a20      	ldr	r2, [pc, #128]	; (1f838 <iface_cb+0x26c>)
   1f7b6:	482a      	ldr	r0, [pc, #168]	; (1f860 <iface_cb+0x294>)
   1f7b8:	f7e3 fc28 	bl	300c <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1f7bc:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1f7c0:	4828      	ldr	r0, [pc, #160]	; (1f864 <iface_cb+0x298>)
   1f7c2:	f7e3 fc23 	bl	300c <printk>
	printk("IPv6 base reachable time : %d\n",
   1f7c6:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1f7ca:	4827      	ldr	r0, [pc, #156]	; (1f868 <iface_cb+0x29c>)
   1f7cc:	f7e3 fc1e 	bl	300c <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1f7d0:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1f7d4:	4825      	ldr	r0, [pc, #148]	; (1f86c <iface_cb+0x2a0>)
   1f7d6:	f7e3 fc19 	bl	300c <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1f7da:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1f7de:	4824      	ldr	r0, [pc, #144]	; (1f870 <iface_cb+0x2a4>)
   1f7e0:	f7e3 fc14 	bl	300c <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1f7e4:	b005      	add	sp, #20
   1f7e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1f7e8:	4818      	ldr	r0, [pc, #96]	; (1f84c <iface_cb+0x280>)
   1f7ea:	f7e3 fc0f 	bl	300c <printk>
   1f7ee:	e7cd      	b.n	1f78c <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1f7f0:	4a14      	ldr	r2, [pc, #80]	; (1f844 <iface_cb+0x278>)
   1f7f2:	e7e0      	b.n	1f7b6 <iface_cb+0x1ea>
   1f7f4:	00031fc4 	.word	0x00031fc4
   1f7f8:	00032174 	.word	0x00032174
   1f7fc:	20002518 	.word	0x20002518
   1f800:	00031fec 	.word	0x00031fec
   1f804:	00031ffc 	.word	0x00031ffc
   1f808:	0003200c 	.word	0x0003200c
   1f80c:	00031fd8 	.word	0x00031fd8
   1f810:	00031f2c 	.word	0x00031f2c
   1f814:	00031f64 	.word	0x00031f64
   1f818:	00031f6c 	.word	0x00031f6c
   1f81c:	00031f74 	.word	0x00031f74
   1f820:	00031f58 	.word	0x00031f58
   1f824:	00031f84 	.word	0x00031f84
   1f828:	00031fa0 	.word	0x00031fa0
   1f82c:	00031fac 	.word	0x00031fac
   1f830:	00031e78 	.word	0x00031e78
   1f834:	00031f94 	.word	0x00031f94
   1f838:	00031fb8 	.word	0x00031fb8
   1f83c:	00032030 	.word	0x00032030
   1f840:	20002530 	.word	0x20002530
   1f844:	0002f2c4 	.word	0x0002f2c4
   1f848:	0003204c 	.word	0x0003204c
   1f84c:	00032040 	.word	0x00032040
   1f850:	00032070 	.word	0x00032070
   1f854:	00032078 	.word	0x00032078
   1f858:	00032094 	.word	0x00032094
   1f85c:	000320a0 	.word	0x000320a0
   1f860:	000320b8 	.word	0x000320b8
   1f864:	000320c0 	.word	0x000320c0
   1f868:	000320e0 	.word	0x000320e0
   1f86c:	00032100 	.word	0x00032100
   1f870:	00032120 	.word	0x00032120

0001f874 <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1f874:	4770      	bx	lr

0001f876 <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1f876:	4770      	bx	lr

0001f878 <nbr_lookup>:
{
   1f878:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f87a:	460e      	mov	r6, r1
   1f87c:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f87e:	2400      	movs	r4, #0
   1f880:	e000      	b.n	1f884 <nbr_lookup+0xc>
   1f882:	3401      	adds	r4, #1
   1f884:	2c07      	cmp	r4, #7
   1f886:	dc11      	bgt.n	1f8ac <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1f888:	4a0a      	ldr	r2, [pc, #40]	; (1f8b4 <nbr_lookup+0x3c>)
   1f88a:	01e3      	lsls	r3, r4, #7
   1f88c:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1f88e:	5cd3      	ldrb	r3, [r2, r3]
   1f890:	2b00      	cmp	r3, #0
   1f892:	d0f6      	beq.n	1f882 <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1f894:	68ab      	ldr	r3, [r5, #8]
   1f896:	42b3      	cmp	r3, r6
   1f898:	d1f3      	bne.n	1f882 <nbr_lookup+0xa>
   1f89a:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f89c:	2210      	movs	r2, #16
   1f89e:	4639      	mov	r1, r7
   1f8a0:	3004      	adds	r0, #4
   1f8a2:	f00a ffd1 	bl	2a848 <memcmp>
   1f8a6:	2800      	cmp	r0, #0
   1f8a8:	d1eb      	bne.n	1f882 <nbr_lookup+0xa>
   1f8aa:	e000      	b.n	1f8ae <nbr_lookup+0x36>
	return NULL;
   1f8ac:	2500      	movs	r5, #0
}
   1f8ae:	4628      	mov	r0, r5
   1f8b0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1f8b2:	bf00      	nop
   1f8b4:	2000bf60 	.word	0x2000bf60

0001f8b8 <nbr_clear_ns_pending>:
{
   1f8b8:	b510      	push	{r4, lr}
   1f8ba:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1f8bc:	303c      	adds	r0, #60	; 0x3c
   1f8be:	f00a fb93 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   1f8c2:	6820      	ldr	r0, [r4, #0]
   1f8c4:	b118      	cbz	r0, 1f8ce <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1f8c6:	f7fd ffc4 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   1f8ca:	2300      	movs	r3, #0
   1f8cc:	6023      	str	r3, [r4, #0]
   1f8ce:	bd10      	pop	{r4, pc}

0001f8d0 <ns_reply_timeout>:
{
   1f8d0:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1f8d2:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f8d6:	2300      	movs	r3, #0
   1f8d8:	2b07      	cmp	r3, #7
   1f8da:	dc07      	bgt.n	1f8ec <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1f8dc:	4c0d      	ldr	r4, [pc, #52]	; (1f914 <ns_reply_timeout+0x44>)
   1f8de:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1f8e2:	68e2      	ldr	r2, [r4, #12]
   1f8e4:	4291      	cmp	r1, r2
   1f8e6:	d002      	beq.n	1f8ee <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1f8e8:	3301      	adds	r3, #1
   1f8ea:	e7f5      	b.n	1f8d8 <ns_reply_timeout+0x8>
	return NULL;
   1f8ec:	2400      	movs	r4, #0
	if (!nbr) {
   1f8ee:	b184      	cbz	r4, 1f912 <ns_reply_timeout+0x42>
	if (!data->pending) {
   1f8f0:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1f8f4:	b16b      	cbz	r3, 1f912 <ns_reply_timeout+0x42>
   1f8f6:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1f8f8:	4618      	mov	r0, r3
   1f8fa:	f7fd ffaa 	bl	1d852 <net_pkt_unref>
	net_pkt_unref(data->pending);
   1f8fe:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1f902:	f7fd ffa6 	bl	1d852 <net_pkt_unref>
	data->pending = NULL;
   1f906:	2300      	movs	r3, #0
   1f908:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1f90c:	4620      	mov	r0, r4
   1f90e:	f7ff fda1 	bl	1f454 <net_nbr_unref>
   1f912:	bd38      	pop	{r3, r4, r5, pc}
   1f914:	2000bf60 	.word	0x2000bf60

0001f918 <nbr_init>:
{
   1f918:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f91c:	b084      	sub	sp, #16
   1f91e:	4604      	mov	r4, r0
   1f920:	4616      	mov	r6, r2
   1f922:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1f924:	23ff      	movs	r3, #255	; 0xff
   1f926:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1f928:	6081      	str	r1, [r0, #8]
   1f92a:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1f92c:	466d      	mov	r5, sp
   1f92e:	6810      	ldr	r0, [r2, #0]
   1f930:	6851      	ldr	r1, [r2, #4]
   1f932:	6892      	ldr	r2, [r2, #8]
   1f934:	68f3      	ldr	r3, [r6, #12]
   1f936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f938:	466d      	mov	r5, sp
   1f93a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f93c:	6078      	str	r0, [r7, #4]
   1f93e:	60b9      	str	r1, [r7, #8]
   1f940:	60fa      	str	r2, [r7, #12]
   1f942:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1f944:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1f948:	4620      	mov	r0, r4
   1f94a:	f7ff fe1d 	bl	1f588 <ipv6_nbr_set_state>
   1f94e:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1f950:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1f954:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1f956:	2200      	movs	r2, #0
   1f958:	601a      	str	r2, [r3, #0]
   1f95a:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1f95c:	4905      	ldr	r1, [pc, #20]	; (1f974 <nbr_init+0x5c>)
   1f95e:	3014      	adds	r0, #20
   1f960:	f00a fb24 	bl	29fac <k_delayed_work_init>
   1f964:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1f966:	4904      	ldr	r1, [pc, #16]	; (1f978 <nbr_init+0x60>)
   1f968:	303c      	adds	r0, #60	; 0x3c
   1f96a:	f00a fb1f 	bl	29fac <k_delayed_work_init>
}
   1f96e:	b004      	add	sp, #16
   1f970:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f974:	000214a5 	.word	0x000214a5
   1f978:	0001f8d1 	.word	0x0001f8d1

0001f97c <nbr_new>:
{
   1f97c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f97e:	b083      	sub	sp, #12
   1f980:	4605      	mov	r5, r0
   1f982:	460e      	mov	r6, r1
   1f984:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1f986:	4807      	ldr	r0, [pc, #28]	; (1f9a4 <nbr_new+0x28>)
   1f988:	f7ff fd72 	bl	1f470 <net_nbr_get>
	if (!nbr) {
   1f98c:	4604      	mov	r4, r0
   1f98e:	b128      	cbz	r0, 1f99c <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1f990:	9700      	str	r7, [sp, #0]
   1f992:	2301      	movs	r3, #1
   1f994:	4632      	mov	r2, r6
   1f996:	4629      	mov	r1, r5
   1f998:	f7ff ffbe 	bl	1f918 <nbr_init>
}
   1f99c:	4620      	mov	r0, r4
   1f99e:	b003      	add	sp, #12
   1f9a0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1f9a2:	bf00      	nop
   1f9a4:	2000bf54 	.word	0x2000bf54

0001f9a8 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1f9a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f9ac:	b084      	sub	sp, #16
   1f9ae:	4604      	mov	r4, r0
   1f9b0:	460e      	mov	r6, r1
   1f9b2:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1f9b4:	480c      	ldr	r0, [pc, #48]	; (1f9e8 <nbr_new+0x40>)
   1f9b6:	f7ff fd5b 	bl	1f470 <net_nbr_get>

	if (!nbr) {
   1f9ba:	4605      	mov	r5, r0
   1f9bc:	b180      	cbz	r0, 1f9e0 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1f9be:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1f9c0:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1f9c2:	466c      	mov	r4, sp
   1f9c4:	6830      	ldr	r0, [r6, #0]
   1f9c6:	6871      	ldr	r1, [r6, #4]
   1f9c8:	68b2      	ldr	r2, [r6, #8]
   1f9ca:	68f3      	ldr	r3, [r6, #12]
   1f9cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1f9ce:	466c      	mov	r4, sp
   1f9d0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1f9d2:	6138      	str	r0, [r7, #16]
   1f9d4:	6179      	str	r1, [r7, #20]
   1f9d6:	61ba      	str	r2, [r7, #24]
   1f9d8:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1f9da:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1f9dc:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1f9e0:	4628      	mov	r0, r5
   1f9e2:	b004      	add	sp, #16
   1f9e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1f9e8:	2000c378 	.word	0x2000c378

0001f9ec <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1f9ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9f0:	4682      	mov	sl, r0
	return pkt->forwarding;
   1f9f2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1f9f6:	f013 0f04 	tst.w	r3, #4
   1f9fa:	d002      	beq.n	1fa02 <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1f9fc:	4650      	mov	r0, sl
   1f9fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1fa02:	6940      	ldr	r0, [r0, #20]
   1fa04:	6843      	ldr	r3, [r0, #4]
   1fa06:	689b      	ldr	r3, [r3, #8]
   1fa08:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1fa0a:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1fa0e:	4283      	cmp	r3, r0
   1fa10:	d0f4      	beq.n	1f9fc <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1fa12:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1fa16:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1fa1a:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1fa1c:	2400      	movs	r4, #0
   1fa1e:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1fa22:	46a1      	mov	r9, r4
	pos = 0;
   1fa24:	46a0      	mov	r8, r4
	while (orig_frag) {
   1fa26:	e020      	b.n	1fa6a <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1fa28:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fa2c:	4650      	mov	r0, sl
   1fa2e:	f7fd febd 	bl	1d7ac <net_pkt_get_frag>
   1fa32:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1fa34:	4601      	mov	r1, r0
   1fa36:	4650      	mov	r0, sl
   1fa38:	f7fd ff35 	bl	1d8a6 <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1fa3c:	f109 0008 	add.w	r0, r9, #8
   1fa40:	f7fb fa4d 	bl	1aede <net_buf_simple_tailroom>
   1fa44:	b284      	uxth	r4, r0
   1fa46:	e014      	b.n	1fa72 <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1fa48:	4621      	mov	r1, r4
   1fa4a:	f109 0008 	add.w	r0, r9, #8
   1fa4e:	f7fb f9dd 	bl	1ae0c <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1fa52:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1fa54:	4622      	mov	r2, r4
   1fa56:	4441      	add	r1, r8
   1fa58:	f7e0 fc32 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1fa5c:	1b36      	subs	r6, r6, r4
   1fa5e:	b2b6      	uxth	r6, r6
			pos += room_len;
   1fa60:	4444      	add	r4, r8
   1fa62:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1fa66:	2400      	movs	r4, #0
		if (!copy_len) {
   1fa68:	b19e      	cbz	r6, 1fa92 <update_ll_reserve+0xa6>
	while (orig_frag) {
   1fa6a:	2f00      	cmp	r7, #0
   1fa6c:	d0c6      	beq.n	1f9fc <update_ll_reserve+0x10>
		if (!room_len) {
   1fa6e:	2c00      	cmp	r4, #0
   1fa70:	d0da      	beq.n	1fa28 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1fa72:	42b4      	cmp	r4, r6
   1fa74:	d3e8      	bcc.n	1fa48 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1fa76:	4631      	mov	r1, r6
   1fa78:	f109 0008 	add.w	r0, r9, #8
   1fa7c:	f7fb f9c6 	bl	1ae0c <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1fa80:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1fa82:	4632      	mov	r2, r6
   1fa84:	4441      	add	r1, r8
   1fa86:	f7e0 fc1b 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1fa8a:	1ba4      	subs	r4, r4, r6
   1fa8c:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1fa8e:	2600      	movs	r6, #0
   1fa90:	e7ea      	b.n	1fa68 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1fa92:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1fa94:	2300      	movs	r3, #0
   1fa96:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1fa98:	4638      	mov	r0, r7
   1fa9a:	f7fd fed4 	bl	1d846 <net_pkt_frag_unref>
			if (!orig_frag) {
   1fa9e:	2d00      	cmp	r5, #0
   1faa0:	d0ac      	beq.n	1f9fc <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1faa2:	462f      	mov	r7, r5
			pos = 0;
   1faa4:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1faa6:	89ae      	ldrh	r6, [r5, #12]
   1faa8:	e7df      	b.n	1fa6a <update_ll_reserve+0x7e>

0001faaa <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1faaa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1faac:	4604      	mov	r4, r0
   1faae:	460e      	mov	r6, r1
   1fab0:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1fab2:	6880      	ldr	r0, [r0, #8]
   1fab4:	212c      	movs	r1, #44	; 0x2c
   1fab6:	3008      	adds	r0, #8
   1fab8:	f7fb f9a8 	bl	1ae0c <net_buf_simple_add>
	return pkt->frags->data;
   1fabc:	68a3      	ldr	r3, [r4, #8]
   1fabe:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fac0:	2260      	movs	r2, #96	; 0x60
   1fac2:	701a      	strb	r2, [r3, #0]
   1fac4:	68a3      	ldr	r3, [r4, #8]
   1fac6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fac8:	2500      	movs	r5, #0
   1faca:	705d      	strb	r5, [r3, #1]
   1facc:	68a3      	ldr	r3, [r4, #8]
   1face:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fad0:	709d      	strb	r5, [r3, #2]
   1fad2:	70dd      	strb	r5, [r3, #3]
   1fad4:	68a3      	ldr	r3, [r4, #8]
   1fad6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1fad8:	711d      	strb	r5, [r3, #4]
   1fada:	68a3      	ldr	r3, [r4, #8]
   1fadc:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1fade:	3604      	adds	r6, #4
   1fae0:	715e      	strb	r6, [r3, #5]
   1fae2:	68a3      	ldr	r3, [r4, #8]
   1fae4:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1fae6:	223a      	movs	r2, #58	; 0x3a
   1fae8:	719a      	strb	r2, [r3, #6]
   1faea:	68a3      	ldr	r3, [r4, #8]
   1faec:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1faee:	22ff      	movs	r2, #255	; 0xff
   1faf0:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1faf2:	4620      	mov	r0, r4
   1faf4:	f7fe f986 	bl	1de04 <net_pkt_icmp_data>
   1faf8:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1fafa:	4620      	mov	r0, r4
   1fafc:	f7fe f982 	bl	1de04 <net_pkt_icmp_data>
   1fb00:	7045      	strb	r5, [r0, #1]
   1fb02:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001fb04 <nbr_free>:
{
   1fb04:	b538      	push	{r3, r4, r5, lr}
   1fb06:	4604      	mov	r4, r0
   1fb08:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fb0a:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fb0e:	f00a fa6b 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   1fb12:	6828      	ldr	r0, [r5, #0]
   1fb14:	b118      	cbz	r0, 1fb1e <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1fb16:	f7fd fe9c 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   1fb1a:	2300      	movs	r3, #0
   1fb1c:	602b      	str	r3, [r5, #0]
   1fb1e:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fb20:	3014      	adds	r0, #20
   1fb22:	f00a fa61 	bl	29fe8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1fb26:	4620      	mov	r0, r4
   1fb28:	f7ff fc94 	bl	1f454 <net_nbr_unref>
   1fb2c:	bd38      	pop	{r3, r4, r5, pc}
	...

0001fb30 <net_ipv6_nbr_state2str>:
	switch (state) {
   1fb30:	2805      	cmp	r0, #5
   1fb32:	d80e      	bhi.n	1fb52 <net_ipv6_nbr_state2str+0x22>
   1fb34:	e8df f000 	tbb	[pc, r0]
   1fb38:	07050f03 	.word	0x07050f03
   1fb3c:	0b09      	.short	0x0b09
		return "incomplete";
   1fb3e:	4807      	ldr	r0, [pc, #28]	; (1fb5c <net_ipv6_nbr_state2str+0x2c>)
   1fb40:	4770      	bx	lr
		return "stale";
   1fb42:	4807      	ldr	r0, [pc, #28]	; (1fb60 <net_ipv6_nbr_state2str+0x30>)
   1fb44:	4770      	bx	lr
		return "delay";
   1fb46:	4807      	ldr	r0, [pc, #28]	; (1fb64 <net_ipv6_nbr_state2str+0x34>)
   1fb48:	4770      	bx	lr
		return "probe";
   1fb4a:	4807      	ldr	r0, [pc, #28]	; (1fb68 <net_ipv6_nbr_state2str+0x38>)
   1fb4c:	4770      	bx	lr
		return "static";
   1fb4e:	4807      	ldr	r0, [pc, #28]	; (1fb6c <net_ipv6_nbr_state2str+0x3c>)
   1fb50:	4770      	bx	lr
	return "<invalid state>";
   1fb52:	4807      	ldr	r0, [pc, #28]	; (1fb70 <net_ipv6_nbr_state2str+0x40>)
   1fb54:	4770      	bx	lr
		return "reachable";
   1fb56:	4807      	ldr	r0, [pc, #28]	; (1fb74 <net_ipv6_nbr_state2str+0x44>)
}
   1fb58:	4770      	bx	lr
   1fb5a:	bf00      	nop
   1fb5c:	00031e40 	.word	0x00031e40
   1fb60:	00031e58 	.word	0x00031e58
   1fb64:	00031e60 	.word	0x00031e60
   1fb68:	00031e68 	.word	0x00031e68
   1fb6c:	00031e70 	.word	0x00031e70
   1fb70:	00031e78 	.word	0x00031e78
   1fb74:	00031e4c 	.word	0x00031e4c

0001fb78 <net_ipv6_nbr_foreach>:
{
   1fb78:	b500      	push	{lr}
   1fb7a:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1fb7c:	9000      	str	r0, [sp, #0]
   1fb7e:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1fb80:	4669      	mov	r1, sp
   1fb82:	4803      	ldr	r0, [pc, #12]	; (1fb90 <net_ipv6_nbr_foreach+0x18>)
   1fb84:	f7fc fc3a 	bl	1c3fc <net_if_foreach>
}
   1fb88:	b003      	add	sp, #12
   1fb8a:	f85d fb04 	ldr.w	pc, [sp], #4
   1fb8e:	bf00      	nop
   1fb90:	0001f59d 	.word	0x0001f59d

0001fb94 <net_ipv6_nbr_rm>:
{
   1fb94:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1fb96:	460a      	mov	r2, r1
   1fb98:	4601      	mov	r1, r0
   1fb9a:	480d      	ldr	r0, [pc, #52]	; (1fbd0 <net_ipv6_nbr_rm+0x3c>)
   1fb9c:	f7ff fe6c 	bl	1f878 <nbr_lookup>
	if (!nbr) {
   1fba0:	b1a0      	cbz	r0, 1fbcc <net_ipv6_nbr_rm+0x38>
   1fba2:	4604      	mov	r4, r0
   1fba4:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1fba6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1fbaa:	f00a fa1d 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   1fbae:	6828      	ldr	r0, [r5, #0]
   1fbb0:	b118      	cbz	r0, 1fbba <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1fbb2:	f7fd fe4e 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   1fbb6:	2300      	movs	r3, #0
   1fbb8:	602b      	str	r3, [r5, #0]
   1fbba:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1fbbc:	3014      	adds	r0, #20
   1fbbe:	f00a fa13 	bl	29fe8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1fbc2:	4620      	mov	r0, r4
   1fbc4:	f7ff fc46 	bl	1f454 <net_nbr_unref>
	return true;
   1fbc8:	2001      	movs	r0, #1
   1fbca:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1fbcc:	2000      	movs	r0, #0
}
   1fbce:	bd38      	pop	{r3, r4, r5, pc}
   1fbd0:	2000bf54 	.word	0x2000bf54

0001fbd4 <net_ipv6_unspecified_address>:
}
   1fbd4:	4800      	ldr	r0, [pc, #0]	; (1fbd8 <net_ipv6_unspecified_address+0x4>)
   1fbd6:	4770      	bx	lr
   1fbd8:	00031e30 	.word	0x00031e30

0001fbdc <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1fbdc:	b570      	push	{r4, r5, r6, lr}
   1fbde:	b082      	sub	sp, #8
   1fbe0:	4604      	mov	r4, r0
   1fbe2:	460e      	mov	r6, r1
   1fbe4:	461d      	mov	r5, r3
   1fbe6:	a902      	add	r1, sp, #8
   1fbe8:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fbec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fbf0:	460a      	mov	r2, r1
   1fbf2:	2101      	movs	r1, #1
   1fbf4:	f7fd ff65 	bl	1dac2 <net_pkt_append>
   1fbf8:	aa02      	add	r2, sp, #8
   1fbfa:	2300      	movs	r3, #0
   1fbfc:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1fc00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc04:	2101      	movs	r1, #1
   1fc06:	4620      	mov	r0, r4
   1fc08:	f7fd ff5b 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fc0c:	022b      	lsls	r3, r5, #8
   1fc0e:	aa02      	add	r2, sp, #8
   1fc10:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fc14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc18:	2102      	movs	r1, #2
   1fc1a:	4620      	mov	r0, r4
   1fc1c:	f7fd ff51 	bl	1dac2 <net_pkt_append>
   1fc20:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc24:	4632      	mov	r2, r6
   1fc26:	2110      	movs	r1, #16
   1fc28:	4620      	mov	r0, r4
   1fc2a:	f7fd ff4a 	bl	1dac2 <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1fc2e:	b915      	cbnz	r5, 1fc36 <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1fc30:	4620      	mov	r0, r4
   1fc32:	b002      	add	sp, #8
   1fc34:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1fc36:	f7ff ffcd 	bl	1fbd4 <net_ipv6_unspecified_address>
   1fc3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fc3e:	4602      	mov	r2, r0
   1fc40:	2110      	movs	r1, #16
   1fc42:	4620      	mov	r0, r4
   1fc44:	f7fd ff3d 	bl	1dac2 <net_pkt_append>
   1fc48:	e7f2      	b.n	1fc30 <create_mldv2+0x54>

0001fc4a <net_ipv6_create_raw>:
{
   1fc4a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1fc4e:	b088      	sub	sp, #32
   1fc50:	4604      	mov	r4, r0
   1fc52:	460e      	mov	r6, r1
   1fc54:	4617      	mov	r7, r2
   1fc56:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1fc58:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fc5c:	f7fd fda6 	bl	1d7ac <net_pkt_get_frag>
   1fc60:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1fc62:	4601      	mov	r1, r0
   1fc64:	4620      	mov	r0, r4
   1fc66:	f7fd fe2b 	bl	1d8c0 <net_pkt_frag_insert>
	return pkt->frags->data;
   1fc6a:	68a3      	ldr	r3, [r4, #8]
   1fc6c:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1fc6e:	2260      	movs	r2, #96	; 0x60
   1fc70:	701a      	strb	r2, [r3, #0]
   1fc72:	68a3      	ldr	r3, [r4, #8]
   1fc74:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1fc76:	2300      	movs	r3, #0
   1fc78:	7053      	strb	r3, [r2, #1]
   1fc7a:	68a2      	ldr	r2, [r4, #8]
   1fc7c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1fc7e:	7093      	strb	r3, [r2, #2]
   1fc80:	70d3      	strb	r3, [r2, #3]
   1fc82:	68a2      	ldr	r2, [r4, #8]
   1fc84:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1fc86:	7193      	strb	r3, [r2, #6]
   1fc88:	68a3      	ldr	r3, [r4, #8]
   1fc8a:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1fc8c:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1fc90:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1fc92:	68a3      	ldr	r3, [r4, #8]
   1fc94:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1fc96:	79da      	ldrb	r2, [r3, #7]
   1fc98:	b912      	cbnz	r2, 1fca0 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1fc9a:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1fc9e:	71da      	strb	r2, [r3, #7]
   1fca0:	68a3      	ldr	r3, [r4, #8]
   1fca2:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fca6:	466d      	mov	r5, sp
   1fca8:	6838      	ldr	r0, [r7, #0]
   1fcaa:	6879      	ldr	r1, [r7, #4]
   1fcac:	68ba      	ldr	r2, [r7, #8]
   1fcae:	68fb      	ldr	r3, [r7, #12]
   1fcb0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fcb2:	466d      	mov	r5, sp
   1fcb4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fcb6:	f8ce 0018 	str.w	r0, [lr, #24]
   1fcba:	f8ce 101c 	str.w	r1, [lr, #28]
   1fcbe:	f8ce 2020 	str.w	r2, [lr, #32]
   1fcc2:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1fcc6:	68a3      	ldr	r3, [r4, #8]
   1fcc8:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1fcca:	6830      	ldr	r0, [r6, #0]
   1fccc:	6871      	ldr	r1, [r6, #4]
   1fcce:	68b2      	ldr	r2, [r6, #8]
   1fcd0:	68f3      	ldr	r3, [r6, #12]
   1fcd2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1fcd4:	ad04      	add	r5, sp, #16
   1fcd6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1fcd8:	60b8      	str	r0, [r7, #8]
   1fcda:	60f9      	str	r1, [r7, #12]
   1fcdc:	613a      	str	r2, [r7, #16]
   1fcde:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1fce0:	2300      	movs	r3, #0
   1fce2:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fce6:	68a3      	ldr	r3, [r4, #8]
   1fce8:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1fcea:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1fcee:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1fcf0:	2128      	movs	r1, #40	; 0x28
   1fcf2:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1fcf6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fcfa:	220a      	movs	r2, #10
   1fcfc:	f362 03c6 	bfi	r3, r2, #3, #4
   1fd00:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1fd04:	f108 0008 	add.w	r0, r8, #8
   1fd08:	f7fb f880 	bl	1ae0c <net_buf_simple_add>
}
   1fd0c:	4620      	mov	r0, r4
   1fd0e:	b008      	add	sp, #32
   1fd10:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001fd14 <net_ipv6_create>:
{
   1fd14:	b5f0      	push	{r4, r5, r6, r7, lr}
   1fd16:	b083      	sub	sp, #12
   1fd18:	4605      	mov	r5, r0
   1fd1a:	460e      	mov	r6, r1
   1fd1c:	461f      	mov	r7, r3
	if (!src) {
   1fd1e:	4614      	mov	r4, r2
   1fd20:	b14a      	cbz	r2, 1fd36 <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd22:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd24:	b94b      	cbnz	r3, 1fd3a <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd26:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1fd28:	b9fb      	cbnz	r3, 1fd6a <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd2a:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1fd2c:	b9fb      	cbnz	r3, 1fd6e <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1fd2e:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd30:	b1fb      	cbz	r3, 1fd72 <net_ipv6_create+0x5e>
   1fd32:	2300      	movs	r3, #0
   1fd34:	e002      	b.n	1fd3c <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1fd36:	68c4      	ldr	r4, [r0, #12]
   1fd38:	e7f3      	b.n	1fd22 <net_ipv6_create+0xe>
   1fd3a:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1fd3c:	b9db      	cbnz	r3, 1fd76 <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1fd3e:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1fd40:	2bff      	cmp	r3, #255	; 0xff
   1fd42:	d018      	beq.n	1fd76 <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1fd44:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1fd48:	f7fc fb3c 	bl	1c3c4 <net_if_get_by_index>
   1fd4c:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1fd4e:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1fd52:	f012 0f40 	tst.w	r2, #64	; 0x40
   1fd56:	d114      	bne.n	1fd82 <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1fd58:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1fd5a:	9200      	str	r2, [sp, #0]
   1fd5c:	463a      	mov	r2, r7
   1fd5e:	4621      	mov	r1, r4
   1fd60:	4630      	mov	r0, r6
   1fd62:	f7ff ff72 	bl	1fc4a <net_ipv6_create_raw>
}
   1fd66:	b003      	add	sp, #12
   1fd68:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1fd6a:	2300      	movs	r3, #0
   1fd6c:	e7e6      	b.n	1fd3c <net_ipv6_create+0x28>
   1fd6e:	2300      	movs	r3, #0
   1fd70:	e7e4      	b.n	1fd3c <net_ipv6_create+0x28>
   1fd72:	2301      	movs	r3, #1
   1fd74:	e7e2      	b.n	1fd3c <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1fd76:	4639      	mov	r1, r7
   1fd78:	6970      	ldr	r0, [r6, #20]
   1fd7a:	f7fc f8cf 	bl	1bf1c <net_if_ipv6_select_src_addr>
   1fd7e:	4604      	mov	r4, r0
   1fd80:	e7e0      	b.n	1fd44 <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1fd82:	2206      	movs	r2, #6
   1fd84:	e7e9      	b.n	1fd5a <net_ipv6_create+0x46>

0001fd86 <net_ipv6_finalize_raw>:
{
   1fd86:	b538      	push	{r3, r4, r5, lr}
   1fd88:	4605      	mov	r5, r0
   1fd8a:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1fd8c:	f7fd fe52 	bl	1da34 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1fd90:	68a8      	ldr	r0, [r5, #8]
   1fd92:	4603      	mov	r3, r0
	size_t bytes = 0;
   1fd94:	2200      	movs	r2, #0
   1fd96:	e002      	b.n	1fd9e <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1fd98:	8999      	ldrh	r1, [r3, #12]
   1fd9a:	440a      	add	r2, r1
		buf = buf->frags;
   1fd9c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1fd9e:	2b00      	cmp	r3, #0
   1fda0:	d1fa      	bne.n	1fd98 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1fda2:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1fda4:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1fda6:	0a11      	lsrs	r1, r2, #8
   1fda8:	7119      	strb	r1, [r3, #4]
   1fdaa:	68ab      	ldr	r3, [r5, #8]
   1fdac:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1fdae:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1fdb0:	2c11      	cmp	r4, #17
   1fdb2:	d005      	beq.n	1fdc0 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1fdb4:	2c06      	cmp	r4, #6
   1fdb6:	d008      	beq.n	1fdca <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1fdb8:	2c3a      	cmp	r4, #58	; 0x3a
   1fdba:	d00b      	beq.n	1fdd4 <net_ipv6_finalize_raw+0x4e>
}
   1fdbc:	2000      	movs	r0, #0
   1fdbe:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1fdc0:	68a9      	ldr	r1, [r5, #8]
   1fdc2:	4628      	mov	r0, r5
   1fdc4:	f003 fa9b 	bl	232fe <net_udp_set_chksum>
   1fdc8:	e7f8      	b.n	1fdbc <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1fdca:	68a9      	ldr	r1, [r5, #8]
   1fdcc:	4628      	mov	r0, r5
   1fdce:	f004 f8da 	bl	23f86 <net_tcp_set_chksum>
   1fdd2:	e7f3      	b.n	1fdbc <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1fdd4:	68a9      	ldr	r1, [r5, #8]
   1fdd6:	4628      	mov	r0, r5
   1fdd8:	f7fe fdf2 	bl	1e9c0 <net_icmpv6_set_chksum>
   1fddc:	e7ee      	b.n	1fdbc <net_ipv6_finalize_raw+0x36>
	...

0001fde0 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1fde0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1fde4:	b08d      	sub	sp, #52	; 0x34
   1fde6:	4680      	mov	r8, r0
   1fde8:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1fdea:	f240 23ff 	movw	r3, #767	; 0x2ff
   1fdee:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1fdf2:	2500      	movs	r5, #0
   1fdf4:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1fdf8:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1fdfc:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1fe00:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1fe04:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1fe08:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1fe0c:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1fe10:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fe14:	6843      	ldr	r3, [r0, #4]
   1fe16:	689b      	ldr	r3, [r3, #8]
   1fe18:	a908      	add	r1, sp, #32
   1fe1a:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1fe1c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fe20:	f7fd fca6 	bl	1d770 <net_pkt_get_reserve_tx>
   1fe24:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1fe26:	a908      	add	r1, sp, #32
   1fe28:	4640      	mov	r0, r8
   1fe2a:	f7fc f877 	bl	1bf1c <net_if_ipv6_select_src_addr>
   1fe2e:	9500      	str	r5, [sp, #0]
   1fe30:	4643      	mov	r3, r8
   1fe32:	aa08      	add	r2, sp, #32
   1fe34:	4601      	mov	r1, r0
   1fe36:	4620      	mov	r0, r4
   1fe38:	f7ff ff07 	bl	1fc4a <net_ipv6_create_raw>
   1fe3c:	4604      	mov	r4, r0
   1fe3e:	6883      	ldr	r3, [r0, #8]
   1fe40:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1fe42:	2601      	movs	r6, #1
   1fe44:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1fe46:	6883      	ldr	r3, [r0, #8]
   1fe48:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1fe4a:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1fe4c:	aa0c      	add	r2, sp, #48	; 0x30
   1fe4e:	233a      	movs	r3, #58	; 0x3a
   1fe50:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe54:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe58:	4631      	mov	r1, r6
   1fe5a:	f7fd fe32 	bl	1dac2 <net_pkt_append>
   1fe5e:	aa0c      	add	r2, sp, #48	; 0x30
   1fe60:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1fe64:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe68:	4631      	mov	r1, r6
   1fe6a:	4620      	mov	r0, r4
   1fe6c:	f7fd fe29 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe70:	af0c      	add	r7, sp, #48	; 0x30
   1fe72:	f240 2305 	movw	r3, #517	; 0x205
   1fe76:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe7a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe7e:	463a      	mov	r2, r7
   1fe80:	2102      	movs	r1, #2
   1fe82:	4620      	mov	r0, r4
   1fe84:	f7fd fe1d 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fe88:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fe8c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fe90:	463a      	mov	r2, r7
   1fe92:	2102      	movs	r1, #2
   1fe94:	4620      	mov	r0, r4
   1fe96:	f7fd fe14 	bl	1dac2 <net_pkt_append>
   1fe9a:	aa0c      	add	r2, sp, #48	; 0x30
   1fe9c:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1fea0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fea4:	4631      	mov	r1, r6
   1fea6:	4620      	mov	r0, r4
   1fea8:	f7fd fe0b 	bl	1dac2 <net_pkt_append>
   1feac:	aa0c      	add	r2, sp, #48	; 0x30
   1feae:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1feb2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1feb6:	4631      	mov	r1, r6
   1feb8:	4620      	mov	r0, r4
   1feba:	f7fd fe02 	bl	1dac2 <net_pkt_append>
   1febe:	aa0c      	add	r2, sp, #48	; 0x30
   1fec0:	238f      	movs	r3, #143	; 0x8f
   1fec2:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1fec6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1feca:	4631      	mov	r1, r6
   1fecc:	4620      	mov	r0, r4
   1fece:	f7fd fdf8 	bl	1dac2 <net_pkt_append>
   1fed2:	aa0c      	add	r2, sp, #48	; 0x30
   1fed4:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1fed8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fedc:	4631      	mov	r1, r6
   1fede:	4620      	mov	r0, r4
   1fee0:	f7fd fdef 	bl	1dac2 <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1fee4:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1fee8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1feec:	463a      	mov	r2, r7
   1feee:	2102      	movs	r1, #2
   1fef0:	4620      	mov	r0, r4
   1fef2:	f7fd fde6 	bl	1dac2 <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1fef6:	68a3      	ldr	r3, [r4, #8]
   1fef8:	2234      	movs	r2, #52	; 0x34
   1fefa:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1fefc:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1ff00:	f898 3015 	ldrb.w	r3, [r8, #21]
   1ff04:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1ff08:	f898 3015 	ldrb.w	r3, [r8, #21]
   1ff0c:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1ff10:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ff14:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff18:	463a      	mov	r2, r7
   1ff1a:	2102      	movs	r1, #2
   1ff1c:	4620      	mov	r0, r4
   1ff1e:	f7fd fdd0 	bl	1dac2 <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1ff22:	4649      	mov	r1, r9
   1ff24:	4620      	mov	r0, r4
   1ff26:	f7fd fcbe 	bl	1d8a6 <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1ff2a:	4629      	mov	r1, r5
   1ff2c:	4620      	mov	r0, r4
   1ff2e:	f7ff ff2a 	bl	1fd86 <net_ipv6_finalize_raw>
	if (ret < 0) {
   1ff32:	1e05      	subs	r5, r0, #0
   1ff34:	db35      	blt.n	1ffa2 <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1ff36:	2308      	movs	r3, #8
   1ff38:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1ff3c:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1ff3e:	213a      	movs	r1, #58	; 0x3a
   1ff40:	4620      	mov	r0, r4
   1ff42:	f7fe faf0 	bl	1e526 <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1ff46:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1ff4a:	b2c5      	uxtb	r5, r0
   1ff4c:	213a      	movs	r1, #58	; 0x3a
   1ff4e:	4620      	mov	r0, r4
   1ff50:	f7fe fae9 	bl	1e526 <net_calc_chksum>
   1ff54:	43c0      	mvns	r0, r0
   1ff56:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1ff5a:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1ff5c:	0a03      	lsrs	r3, r0, #8
   1ff5e:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1ff62:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1ff66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1ff6a:	9302      	str	r3, [sp, #8]
   1ff6c:	ab07      	add	r3, sp, #28
   1ff6e:	9301      	str	r3, [sp, #4]
   1ff70:	2302      	movs	r3, #2
   1ff72:	9300      	str	r3, [sp, #0]
   1ff74:	f10d 031e 	add.w	r3, sp, #30
   1ff78:	2232      	movs	r2, #50	; 0x32
   1ff7a:	4631      	mov	r1, r6
   1ff7c:	4620      	mov	r0, r4
   1ff7e:	f7fd fe58 	bl	1dc32 <net_pkt_write>

	ret = net_send_data(pkt);
   1ff82:	4620      	mov	r0, r4
   1ff84:	f7fb f864 	bl	1b050 <net_send_data>
	if (ret < 0) {
   1ff88:	1e05      	subs	r5, r0, #0
   1ff8a:	db0a      	blt.n	1ffa2 <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1ff8c:	4b0d      	ldr	r3, [pc, #52]	; (1ffc4 <send_mldv2_raw+0x1e4>)
   1ff8e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1ff90:	3201      	adds	r2, #1
   1ff92:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1ff94:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1ff98:	3201      	adds	r2, #1
   1ff9a:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1ff9e:	2500      	movs	r5, #0
   1ffa0:	e00b      	b.n	1ffba <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1ffa2:	4620      	mov	r0, r4
   1ffa4:	f7fd fc55 	bl	1d852 <net_pkt_unref>
	net_stats.icmp.drop++;
   1ffa8:	4b06      	ldr	r3, [pc, #24]	; (1ffc4 <send_mldv2_raw+0x1e4>)
   1ffaa:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1ffac:	3201      	adds	r2, #1
   1ffae:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1ffb0:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1ffb4:	3201      	adds	r2, #1
   1ffb6:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1ffba:	4628      	mov	r0, r5
   1ffbc:	b00d      	add	sp, #52	; 0x34
   1ffbe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1ffc2:	bf00      	nop
   1ffc4:	20002b58 	.word	0x20002b58

0001ffc8 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1ffc8:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ffca:	b083      	sub	sp, #12
   1ffcc:	4605      	mov	r5, r0
   1ffce:	460e      	mov	r6, r1
   1ffd0:	4617      	mov	r7, r2
   1ffd2:	6843      	ldr	r3, [r0, #4]
   1ffd4:	689b      	ldr	r3, [r3, #8]
   1ffd6:	2100      	movs	r1, #0
   1ffd8:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1ffda:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1ffde:	f7fd fbc7 	bl	1d770 <net_pkt_get_reserve_tx>
   1ffe2:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1ffe4:	aa02      	add	r2, sp, #8
   1ffe6:	f44f 7380 	mov.w	r3, #256	; 0x100
   1ffea:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1ffee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1fff2:	2102      	movs	r1, #2
   1fff4:	f7fd fd65 	bl	1dac2 <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1fff8:	2301      	movs	r3, #1
   1fffa:	463a      	mov	r2, r7
   1fffc:	4631      	mov	r1, r6
   1fffe:	4620      	mov	r0, r4
   20000:	f7ff fdec 	bl	1fbdc <create_mldv2>
   20004:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   20006:	6881      	ldr	r1, [r0, #8]
   20008:	4628      	mov	r0, r5
   2000a:	f7ff fee9 	bl	1fde0 <send_mldv2_raw>
   2000e:	4605      	mov	r5, r0

	pkt->frags = NULL;
   20010:	2300      	movs	r3, #0
   20012:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   20014:	4620      	mov	r0, r4
   20016:	f7fd fc1c 	bl	1d852 <net_pkt_unref>

	return ret;
}
   2001a:	4628      	mov	r0, r5
   2001c:	b003      	add	sp, #12
   2001e:	bdf0      	pop	{r4, r5, r6, r7, pc}

00020020 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   20020:	b5f0      	push	{r4, r5, r6, r7, lr}
   20022:	b087      	sub	sp, #28
   20024:	4605      	mov	r5, r0
   20026:	6843      	ldr	r3, [r0, #4]
   20028:	689b      	ldr	r3, [r3, #8]
   2002a:	2100      	movs	r1, #0
   2002c:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2002e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20032:	f7fd fb9d 	bl	1d770 <net_pkt_get_reserve_tx>
   20036:	4606      	mov	r6, r0
   20038:	2400      	movs	r4, #0
   2003a:	aa06      	add	r2, sp, #24
   2003c:	f802 4d04 	strb.w	r4, [r2, #-4]!
   20040:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20044:	2101      	movs	r1, #1
   20046:	f7fd fd3c 	bl	1dac2 <net_pkt_append>
	int i, count = 0;
   2004a:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   2004c:	e000      	b.n	20050 <send_mld_report+0x30>
   2004e:	3401      	adds	r4, #1
   20050:	2c04      	cmp	r4, #4
   20052:	dc1e      	bgt.n	20092 <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   20054:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   20058:	00d3      	lsls	r3, r2, #3
   2005a:	442b      	add	r3, r5
   2005c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   20060:	f013 0f01 	tst.w	r3, #1
   20064:	d0f3      	beq.n	2004e <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   20066:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2006a:	00d3      	lsls	r3, r2, #3
   2006c:	461a      	mov	r2, r3
   2006e:	442b      	add	r3, r5
   20070:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   20074:	f013 0f02 	tst.w	r3, #2
   20078:	d0e9      	beq.n	2004e <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   2007a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   2007e:	4429      	add	r1, r5
   20080:	2300      	movs	r3, #0
   20082:	2202      	movs	r2, #2
   20084:	3118      	adds	r1, #24
   20086:	4630      	mov	r0, r6
   20088:	f7ff fda8 	bl	1fbdc <create_mldv2>
   2008c:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   2008e:	3701      	adds	r7, #1
   20090:	e7dd      	b.n	2004e <send_mld_report+0x2e>
	}

	if (count > 0) {
   20092:	2f00      	cmp	r7, #0
   20094:	dd16      	ble.n	200c4 <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   20096:	68b1      	ldr	r1, [r6, #8]
   20098:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   2009c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   200a0:	9302      	str	r3, [sp, #8]
   200a2:	f10d 0315 	add.w	r3, sp, #21
   200a6:	9301      	str	r3, [sp, #4]
   200a8:	2301      	movs	r3, #1
   200aa:	9300      	str	r3, [sp, #0]
   200ac:	f10d 0316 	add.w	r3, sp, #22
   200b0:	2200      	movs	r2, #0
   200b2:	4630      	mov	r0, r6
   200b4:	f7fd fdbd 	bl	1dc32 <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   200b8:	68b1      	ldr	r1, [r6, #8]
   200ba:	4628      	mov	r0, r5
   200bc:	f7ff fe90 	bl	1fde0 <send_mldv2_raw>

		pkt->frags = NULL;
   200c0:	2300      	movs	r3, #0
   200c2:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   200c4:	4630      	mov	r0, r6
   200c6:	f7fd fbc4 	bl	1d852 <net_pkt_unref>
}
   200ca:	b007      	add	sp, #28
   200cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

000200d0 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   200d0:	b570      	push	{r4, r5, r6, lr}
   200d2:	b08a      	sub	sp, #40	; 0x28
   200d4:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   200d6:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   200d8:	2200      	movs	r2, #0
   200da:	e002      	b.n	200e2 <handle_mld_query+0x12>
		bytes += buf->len;
   200dc:	8999      	ldrh	r1, [r3, #12]
   200de:	440a      	add	r2, r1
		buf = buf->frags;
   200e0:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   200e2:	2b00      	cmp	r3, #0
   200e4:	d1fa      	bne.n	200dc <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   200e6:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   200e8:	4a37      	ldr	r2, [pc, #220]	; (201c8 <handle_mld_query+0xf8>)
   200ea:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   200ee:	3301      	adds	r3, #1
   200f0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   200f4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   200f8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   200fc:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   200fe:	3104      	adds	r1, #4
   20100:	f10d 0212 	add.w	r2, sp, #18
   20104:	b289      	uxth	r1, r1
   20106:	4628      	mov	r0, r5
   20108:	f7fd fe72 	bl	1ddf0 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   2010c:	f10d 0316 	add.w	r3, sp, #22
   20110:	aa04      	add	r2, sp, #16
   20112:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   20116:	f7fd fd62 	bl	1dbde <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   2011a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   2011e:	2600      	movs	r6, #0
   20120:	9600      	str	r6, [sp, #0]
   20122:	2302      	movs	r3, #2
   20124:	aa04      	add	r2, sp, #16
   20126:	f7fd fd12 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   2012a:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   2012e:	ab06      	add	r3, sp, #24
   20130:	9300      	str	r3, [sp, #0]
   20132:	2310      	movs	r3, #16
   20134:	eb0d 0203 	add.w	r2, sp, r3
   20138:	f7fd fd09 	bl	1db4e <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   2013c:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20140:	9600      	str	r6, [sp, #0]
   20142:	2302      	movs	r3, #2
   20144:	aa04      	add	r2, sp, #16
   20146:	f7fd fd02 	bl	1db4e <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   2014a:	ab05      	add	r3, sp, #20
   2014c:	aa04      	add	r2, sp, #16
   2014e:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   20152:	68a8      	ldr	r0, [r5, #8]
   20154:	f7fd fd43 	bl	1dbde <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   20158:	b358      	cbz	r0, 201b2 <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   2015a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   2015e:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   20162:	0112      	lsls	r2, r2, #4
   20164:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   20166:	4413      	add	r3, r2
   20168:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   2016a:	3344      	adds	r3, #68	; 0x44
   2016c:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2016e:	429c      	cmp	r4, r3
   20170:	d307      	bcc.n	20182 <handle_mld_query+0xb2>
   20172:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   20176:	d804      	bhi.n	20182 <handle_mld_query+0xb2>
	return pkt->frags->data;
   20178:	68ab      	ldr	r3, [r5, #8]
   2017a:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   2017c:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   2017e:	2b01      	cmp	r3, #1
   20180:	d006      	beq.n	20190 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   20182:	a903      	add	r1, sp, #12
   20184:	4628      	mov	r0, r5
   20186:	f7fe fc68 	bl	1ea5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   2018a:	b148      	cbz	r0, 201a0 <handle_mld_query+0xd0>
   2018c:	7843      	ldrb	r3, [r0, #1]
   2018e:	b93b      	cbnz	r3, 201a0 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   20190:	f7ff fd20 	bl	1fbd4 <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   20194:	2210      	movs	r2, #16
   20196:	4601      	mov	r1, r0
   20198:	a806      	add	r0, sp, #24
   2019a:	f00a fb55 	bl	2a848 <memcmp>
   2019e:	b178      	cbz	r0, 201c0 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   201a0:	4a09      	ldr	r2, [pc, #36]	; (201c8 <handle_mld_query+0xf8>)
   201a2:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   201a6:	3301      	adds	r3, #1
   201a8:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   201ac:	2002      	movs	r0, #2
   201ae:	b00a      	add	sp, #40	; 0x28
   201b0:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   201b2:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   201b6:	f64f 73ff 	movw	r3, #65535	; 0xffff
   201ba:	429a      	cmp	r2, r3
   201bc:	d1cd      	bne.n	2015a <handle_mld_query+0x8a>
   201be:	e7ef      	b.n	201a0 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   201c0:	6968      	ldr	r0, [r5, #20]
   201c2:	f7ff ff2d 	bl	20020 <send_mld_report>
   201c6:	e7eb      	b.n	201a0 <handle_mld_query+0xd0>
   201c8:	20002b58 	.word	0x20002b58

000201cc <net_ipv6_finalize>:
{
   201cc:	b508      	push	{r3, lr}
   201ce:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   201d0:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   201d4:	f012 0f40 	tst.w	r2, #64	; 0x40
   201d8:	d104      	bne.n	201e4 <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   201da:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   201dc:	4618      	mov	r0, r3
   201de:	f7ff fdd2 	bl	1fd86 <net_ipv6_finalize_raw>
}
   201e2:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   201e4:	2106      	movs	r1, #6
   201e6:	e7f9      	b.n	201dc <net_ipv6_finalize+0x10>

000201e8 <net_ipv6_nbr_lookup>:
{
   201e8:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   201ea:	460a      	mov	r2, r1
   201ec:	4601      	mov	r1, r0
   201ee:	4802      	ldr	r0, [pc, #8]	; (201f8 <net_ipv6_nbr_lookup+0x10>)
   201f0:	f7ff fb42 	bl	1f878 <nbr_lookup>
}
   201f4:	bd08      	pop	{r3, pc}
   201f6:	bf00      	nop
   201f8:	2000bf54 	.word	0x2000bf54

000201fc <net_ipv6_send_na>:
{
   201fc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20200:	b093      	sub	sp, #76	; 0x4c
   20202:	4605      	mov	r5, r0
   20204:	468b      	mov	fp, r1
   20206:	4692      	mov	sl, r2
   20208:	4699      	mov	r9, r3
   2020a:	6843      	ldr	r3, [r0, #4]
   2020c:	689b      	ldr	r3, [r3, #8]
   2020e:	4611      	mov	r1, r2
   20210:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   20212:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20216:	f7fd faab 	bl	1d770 <net_pkt_get_reserve_tx>
   2021a:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   2021c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20220:	f7fd fac4 	bl	1d7ac <net_pkt_get_frag>
   20224:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   20226:	4601      	mov	r1, r0
   20228:	4620      	mov	r0, r4
   2022a:	f7fd fb3c 	bl	1d8a6 <net_pkt_frag_add>
	pkt->iface = iface;
   2022e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20230:	7d6b      	ldrb	r3, [r5, #21]
   20232:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20236:	7d6b      	ldrb	r3, [r5, #21]
   20238:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   2023c:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20240:	220a      	movs	r2, #10
   20242:	f362 03c6 	bfi	r3, r2, #3, #4
   20246:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   2024a:	2328      	movs	r3, #40	; 0x28
   2024c:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20250:	68a3      	ldr	r3, [r4, #8]
   20252:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20254:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20258:	461a      	mov	r2, r3
   2025a:	2100      	movs	r1, #0
   2025c:	1ac0      	subs	r0, r0, r3
   2025e:	f00a fb87 	bl	2a970 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20262:	2300      	movs	r3, #0
   20264:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20266:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   2026a:	7d2b      	ldrb	r3, [r5, #20]
   2026c:	2b06      	cmp	r3, #6
   2026e:	f000 8092 	beq.w	20396 <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   20272:	2b08      	cmp	r3, #8
   20274:	f000 808d 	beq.w	20392 <net_ipv6_send_na+0x196>
	return 0;
   20278:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   2027a:	f04f 0800 	mov.w	r8, #0
   2027e:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   20282:	f106 0514 	add.w	r5, r6, #20
   20286:	2288      	movs	r2, #136	; 0x88
   20288:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   2028c:	4620      	mov	r0, r4
   2028e:	f7ff fc0c 	bl	1faaa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   20292:	4629      	mov	r1, r5
   20294:	f107 0008 	add.w	r0, r7, #8
   20298:	f7fa fdb8 	bl	1ae0c <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2029c:	a901      	add	r1, sp, #4
   2029e:	4620      	mov	r0, r4
   202a0:	f7fe fdd8 	bl	1ee54 <net_icmpv6_get_na_hdr>
   202a4:	4607      	mov	r7, r0
	return pkt->frags->data;
   202a6:	68a3      	ldr	r3, [r4, #8]
   202a8:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   202ac:	ad06      	add	r5, sp, #24
   202ae:	f8db 0000 	ldr.w	r0, [fp]
   202b2:	f8db 1004 	ldr.w	r1, [fp, #4]
   202b6:	f8db 2008 	ldr.w	r2, [fp, #8]
   202ba:	f8db 300c 	ldr.w	r3, [fp, #12]
   202be:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202c0:	ad06      	add	r5, sp, #24
   202c2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   202c4:	f8ce 0008 	str.w	r0, [lr, #8]
   202c8:	f8ce 100c 	str.w	r1, [lr, #12]
   202cc:	f8ce 2010 	str.w	r2, [lr, #16]
   202d0:	f8ce 3014 	str.w	r3, [lr, #20]
   202d4:	68a3      	ldr	r3, [r4, #8]
   202d6:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   202da:	ad0a      	add	r5, sp, #40	; 0x28
   202dc:	f8da 0000 	ldr.w	r0, [sl]
   202e0:	f8da 1004 	ldr.w	r1, [sl, #4]
   202e4:	f8da 2008 	ldr.w	r2, [sl, #8]
   202e8:	f8da 300c 	ldr.w	r3, [sl, #12]
   202ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   202ee:	ad0a      	add	r5, sp, #40	; 0x28
   202f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   202f2:	f8cc 0018 	str.w	r0, [ip, #24]
   202f6:	f8cc 101c 	str.w	r1, [ip, #28]
   202fa:	f8cc 2020 	str.w	r2, [ip, #32]
   202fe:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   20302:	ad0e      	add	r5, sp, #56	; 0x38
   20304:	f8d9 0000 	ldr.w	r0, [r9]
   20308:	f8d9 1004 	ldr.w	r1, [r9, #4]
   2030c:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20310:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20314:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20316:	ad0e      	add	r5, sp, #56	; 0x38
   20318:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2031a:	6078      	str	r0, [r7, #4]
   2031c:	60b9      	str	r1, [r7, #8]
   2031e:	60fa      	str	r2, [r7, #12]
   20320:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   20322:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   20326:	4620      	mov	r0, r4
   20328:	f7fd fd6c 	bl	1de04 <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   2032c:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20330:	2302      	movs	r3, #2
   20332:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20334:	08f3      	lsrs	r3, r6, #3
   20336:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20338:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2033c:	f8da 1010 	ldr.w	r1, [sl, #16]
   20340:	301a      	adds	r0, #26
   20342:	f7df ffbd 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20346:	f89a 2014 	ldrb.w	r2, [sl, #20]
   2034a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   2034c:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   2034e:	3a02      	subs	r2, #2
   20350:	4641      	mov	r1, r8
   20352:	4428      	add	r0, r5
   20354:	f00a fb0c 	bl	2a970 <memset>
	na_hdr->flags = flags;
   20358:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   2035c:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   2035e:	4639      	mov	r1, r7
   20360:	4620      	mov	r0, r4
   20362:	f7fe fdac 	bl	1eebe <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   20366:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   20368:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   2036a:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   2036c:	68a1      	ldr	r1, [r4, #8]
   2036e:	4620      	mov	r0, r4
   20370:	f7fe fb26 	bl	1e9c0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20374:	4620      	mov	r0, r4
   20376:	f7fa fe6b 	bl	1b050 <net_send_data>
   2037a:	4540      	cmp	r0, r8
   2037c:	db0d      	blt.n	2039a <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   2037e:	4a0d      	ldr	r2, [pc, #52]	; (203b4 <net_ipv6_send_na+0x1b8>)
   20380:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20384:	3301      	adds	r3, #1
   20386:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   2038a:	4640      	mov	r0, r8
}
   2038c:	b013      	add	sp, #76	; 0x4c
   2038e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20392:	2610      	movs	r6, #16
   20394:	e771      	b.n	2027a <net_ipv6_send_na+0x7e>
		return 8;
   20396:	2608      	movs	r6, #8
   20398:	e76f      	b.n	2027a <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   2039a:	4620      	mov	r0, r4
   2039c:	f7fd fa59 	bl	1d852 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   203a0:	4a04      	ldr	r2, [pc, #16]	; (203b4 <net_ipv6_send_na+0x1b8>)
   203a2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   203a6:	3301      	adds	r3, #1
   203a8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   203ac:	f06f 0015 	mvn.w	r0, #21
   203b0:	e7ec      	b.n	2038c <net_ipv6_send_na+0x190>
   203b2:	bf00      	nop
   203b4:	20002b58 	.word	0x20002b58

000203b8 <net_ipv6_nbr_set_reachable_timer>:
{
   203b8:	b508      	push	{r3, lr}
   203ba:	68c9      	ldr	r1, [r1, #12]
   203bc:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   203c0:	3114      	adds	r1, #20
   203c2:	4802      	ldr	r0, [pc, #8]	; (203cc <net_ipv6_nbr_set_reachable_timer+0x14>)
   203c4:	f009 fe6a 	bl	2a09c <k_delayed_work_submit_to_queue>
   203c8:	bd08      	pop	{r3, pc}
   203ca:	bf00      	nop
   203cc:	20002c78 	.word	0x20002c78

000203d0 <handle_na_input>:
{
   203d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   203d4:	b090      	sub	sp, #64	; 0x40
   203d6:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   203d8:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   203da:	2200      	movs	r2, #0
   203dc:	e002      	b.n	203e4 <handle_na_input+0x14>
		bytes += buf->len;
   203de:	8999      	ldrh	r1, [r3, #12]
   203e0:	440a      	add	r2, r1
		buf = buf->frags;
   203e2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   203e4:	2b00      	cmp	r3, #0
   203e6:	d1fa      	bne.n	203de <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   203e8:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   203ea:	a90a      	add	r1, sp, #40	; 0x28
   203ec:	4620      	mov	r0, r4
   203ee:	f7fe fd31 	bl	1ee54 <net_icmpv6_get_na_hdr>
   203f2:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   203f4:	4aaf      	ldr	r2, [pc, #700]	; (206b4 <handle_na_input+0x2e4>)
   203f6:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   203fa:	3301      	adds	r3, #1
   203fc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20400:	2d41      	cmp	r5, #65	; 0x41
   20402:	d904      	bls.n	2040e <handle_na_input+0x3e>
	return pkt->frags->data;
   20404:	68a3      	ldr	r3, [r4, #8]
   20406:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20408:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   2040a:	2bff      	cmp	r3, #255	; 0xff
   2040c:	d010      	beq.n	20430 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   2040e:	a905      	add	r1, sp, #20
   20410:	4620      	mov	r0, r4
   20412:	f7fe fb22 	bl	1ea5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20416:	b108      	cbz	r0, 2041c <handle_na_input+0x4c>
   20418:	7843      	ldrb	r3, [r0, #1]
   2041a:	b1cb      	cbz	r3, 20450 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   2041c:	4aa5      	ldr	r2, [pc, #660]	; (206b4 <handle_na_input+0x2e4>)
   2041e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20422:	3301      	adds	r3, #1
   20424:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20428:	2002      	movs	r0, #2
}
   2042a:	b010      	add	sp, #64	; 0x40
   2042c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   20430:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20432:	2bff      	cmp	r3, #255	; 0xff
   20434:	d0eb      	beq.n	2040e <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20436:	a905      	add	r1, sp, #20
   20438:	4620      	mov	r0, r4
   2043a:	f7fe fd0b 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   2043e:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   20440:	f013 0f40 	tst.w	r3, #64	; 0x40
   20444:	d004      	beq.n	20450 <handle_na_input+0x80>
   20446:	68a3      	ldr	r3, [r4, #8]
   20448:	689b      	ldr	r3, [r3, #8]
   2044a:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   2044c:	2bff      	cmp	r3, #255	; 0xff
   2044e:	d0de      	beq.n	2040e <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   20450:	2314      	movs	r3, #20
   20452:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20456:	a90f      	add	r1, sp, #60	; 0x3c
   20458:	4620      	mov	r0, r4
   2045a:	f7fe fcc9 	bl	1edf0 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   2045e:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   20460:	2600      	movs	r6, #0
	while (buf) {
   20462:	b11b      	cbz	r3, 2046c <handle_na_input+0x9c>
		bytes += buf->len;
   20464:	899a      	ldrh	r2, [r3, #12]
   20466:	4416      	add	r6, r2
		buf = buf->frags;
   20468:	681b      	ldr	r3, [r3, #0]
   2046a:	e7fa      	b.n	20462 <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   2046c:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   2046e:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20470:	e00b      	b.n	2048a <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   20472:	00db      	lsls	r3, r3, #3
   20474:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   20476:	4413      	add	r3, r2
   20478:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   2047a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2047e:	4293      	cmp	r3, r2
   20480:	d9cc      	bls.n	2041c <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20482:	a90f      	add	r1, sp, #60	; 0x3c
   20484:	4620      	mov	r0, r4
   20486:	f7fe fcb3 	bl	1edf0 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2048a:	b190      	cbz	r0, 204b2 <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   2048c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20490:	4296      	cmp	r6, r2
   20492:	d90e      	bls.n	204b2 <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   20494:	7843      	ldrb	r3, [r0, #1]
   20496:	b163      	cbz	r3, 204b2 <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   20498:	7801      	ldrb	r1, [r0, #0]
   2049a:	2902      	cmp	r1, #2
   2049c:	d1e9      	bne.n	20472 <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   2049e:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   204a2:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   204a6:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   204a8:	4415      	add	r5, r2
   204aa:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   204ac:	3506      	adds	r5, #6
   204ae:	b2ad      	uxth	r5, r5
			break;
   204b0:	e7df      	b.n	20472 <handle_na_input+0xa2>
	return pkt->iface;
   204b2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   204b6:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   204ba:	2600      	movs	r6, #0
   204bc:	e003      	b.n	204c6 <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   204be:	f1ba 0f00 	cmp.w	sl, #0
   204c2:	d11f      	bne.n	20504 <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   204c4:	3601      	adds	r6, #1
   204c6:	2e02      	cmp	r6, #2
   204c8:	dc23      	bgt.n	20512 <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   204ca:	236c      	movs	r3, #108	; 0x6c
   204cc:	fb03 8306 	mla	r3, r3, r6, r8
   204d0:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   204d4:	f1ba 0f00 	cmp.w	sl, #0
   204d8:	d0f4      	beq.n	204c4 <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   204da:	236c      	movs	r3, #108	; 0x6c
   204dc:	fb03 8306 	mla	r3, r3, r6, r8
   204e0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   204e2:	2b0a      	cmp	r3, #10
   204e4:	d1ee      	bne.n	204c4 <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   204e6:	216c      	movs	r1, #108	; 0x6c
   204e8:	fb01 f106 	mul.w	r1, r1, r6
   204ec:	3120      	adds	r1, #32
   204ee:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   204f0:	2210      	movs	r2, #16
   204f2:	4411      	add	r1, r2
   204f4:	4648      	mov	r0, r9
   204f6:	f00a f9a7 	bl	2a848 <memcmp>
   204fa:	2800      	cmp	r0, #0
   204fc:	d0df      	beq.n	204be <handle_na_input+0xee>
		return false;
   204fe:	f04f 0a00 	mov.w	sl, #0
   20502:	e7dc      	b.n	204be <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   20504:	236c      	movs	r3, #108	; 0x6c
   20506:	fb03 f306 	mul.w	r3, r3, r6
   2050a:	3320      	adds	r3, #32
   2050c:	4443      	add	r3, r8
   2050e:	330c      	adds	r3, #12
   20510:	e000      	b.n	20514 <handle_na_input+0x144>
	return NULL;
   20512:	2300      	movs	r3, #0
	if (ifaddr) {
   20514:	b17b      	cbz	r3, 20536 <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   20516:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   2051a:	2b00      	cmp	r3, #0
   2051c:	f47f af7e 	bne.w	2041c <handle_na_input+0x4c>
   20520:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20522:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   20524:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20528:	429a      	cmp	r2, r3
   2052a:	f43f af77 	beq.w	2041c <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   2052e:	4649      	mov	r1, r9
   20530:	f7fb fa0a 	bl	1b948 <net_if_ipv6_dad_failed>
   20534:	e772      	b.n	2041c <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   20536:	2300      	movs	r3, #0
   20538:	9303      	str	r3, [sp, #12]
   2053a:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   2053c:	1d3a      	adds	r2, r7, #4
   2053e:	6961      	ldr	r1, [r4, #20]
   20540:	485d      	ldr	r0, [pc, #372]	; (206b8 <handle_na_input+0x2e8>)
   20542:	f7ff f999 	bl	1f878 <nbr_lookup>
	if (!nbr) {
   20546:	4606      	mov	r6, r0
   20548:	2800      	cmp	r0, #0
   2054a:	f000 8107 	beq.w	2075c <handle_na_input+0x38c>
	if (tllao_offset) {
   2054e:	b995      	cbnz	r5, 20576 <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   20550:	7873      	ldrb	r3, [r6, #1]
   20552:	2bff      	cmp	r3, #255	; 0xff
   20554:	d135      	bne.n	205c2 <handle_na_input+0x1f2>
		if (!tllao_offset) {
   20556:	bb2d      	cbnz	r5, 205a4 <handle_na_input+0x1d4>
			return false;
   20558:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   2055a:	2b00      	cmp	r3, #0
   2055c:	f43f af5e 	beq.w	2041c <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   20560:	4620      	mov	r0, r4
   20562:	f7fd f976 	bl	1d852 <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   20566:	4a53      	ldr	r2, [pc, #332]	; (206b4 <handle_na_input+0x2e4>)
   20568:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   2056c:	3301      	adds	r3, #1
   2056e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   20572:	2000      	movs	r0, #0
   20574:	e759      	b.n	2042a <handle_na_input+0x5a>
   20576:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   20578:	7d1b      	ldrb	r3, [r3, #20]
   2057a:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   2057e:	f10d 020e 	add.w	r2, sp, #14
   20582:	9200      	str	r2, [sp, #0]
   20584:	f10d 020a 	add.w	r2, sp, #10
   20588:	4629      	mov	r1, r5
   2058a:	68a0      	ldr	r0, [r4, #8]
   2058c:	f7fd fadf 	bl	1db4e <net_frag_read>
		if (!frag && pos == 0xffff) {
   20590:	2800      	cmp	r0, #0
   20592:	d1dd      	bne.n	20550 <handle_na_input+0x180>
   20594:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   20598:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2059c:	429a      	cmp	r2, r3
   2059e:	d1d7      	bne.n	20550 <handle_na_input+0x180>
			return false;
   205a0:	2300      	movs	r3, #0
   205a2:	e7da      	b.n	2055a <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   205a4:	f89d 300d 	ldrb.w	r3, [sp, #13]
   205a8:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   205ac:	aa10      	add	r2, sp, #64	; 0x40
   205ae:	f10d 030e 	add.w	r3, sp, #14
   205b2:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   205b6:	6961      	ldr	r1, [r4, #20]
   205b8:	4630      	mov	r0, r6
   205ba:	f7fe ff77 	bl	1f4ac <net_nbr_link>
   205be:	2800      	cmp	r0, #0
   205c0:	d14a      	bne.n	20658 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   205c2:	7870      	ldrb	r0, [r6, #1]
   205c4:	f7fe ffd8 	bl	1f578 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   205c8:	4680      	mov	r8, r0
   205ca:	2800      	cmp	r0, #0
   205cc:	f000 80c8 	beq.w	20760 <handle_na_input+0x390>
	if (tllao_offset) {
   205d0:	2d00      	cmp	r5, #0
   205d2:	d145      	bne.n	20660 <handle_na_input+0x290>
	bool lladdr_changed = false;
   205d4:	2700      	movs	r7, #0
   205d6:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   205d8:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   205dc:	2b00      	cmp	r3, #0
   205de:	d155      	bne.n	2068c <handle_na_input+0x2bc>
		if (!tllao_offset) {
   205e0:	2d00      	cmp	r5, #0
   205e2:	f000 80bf 	beq.w	20764 <handle_na_input+0x394>
		if (lladdr_changed) {
   205e6:	b11f      	cbz	r7, 205f0 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   205e8:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   205ec:	2a06      	cmp	r2, #6
   205ee:	d941      	bls.n	20674 <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   205f0:	a905      	add	r1, sp, #20
   205f2:	4620      	mov	r0, r4
   205f4:	f7fe fc2e 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   205f8:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   205fa:	f013 0f40 	tst.w	r3, #64	; 0x40
   205fe:	d040      	beq.n	20682 <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20600:	2101      	movs	r1, #1
   20602:	4630      	mov	r0, r6
   20604:	f7fe ffc0 	bl	1f588 <ipv6_nbr_set_state>
   20608:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   2060a:	2200      	movs	r2, #0
   2060c:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   20610:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   20612:	3014      	adds	r0, #20
   20614:	f009 fce8 	bl	29fe8 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20618:	4631      	mov	r1, r6
   2061a:	6960      	ldr	r0, [r4, #20]
   2061c:	f7ff fecc 	bl	203b8 <net_ipv6_nbr_set_reachable_timer>
   20620:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   20622:	a905      	add	r1, sp, #20
   20624:	4620      	mov	r0, r4
   20626:	f7fe fc15 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   2062a:	7803      	ldrb	r3, [r0, #0]
   2062c:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   2062e:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   20632:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   20634:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   20636:	2d00      	cmp	r5, #0
   20638:	f000 8098 	beq.w	2076c <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   2063c:	4628      	mov	r0, r5
   2063e:	f7fa fd07 	bl	1b050 <net_send_data>
   20642:	2800      	cmp	r0, #0
   20644:	f2c0 8086 	blt.w	20754 <handle_na_input+0x384>
   20648:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   2064a:	2200      	movs	r2, #0
   2064c:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   2064e:	4628      	mov	r0, r5
   20650:	f7fd f8ff 	bl	1d852 <net_pkt_unref>
	return true;
   20654:	2301      	movs	r3, #1
   20656:	e780      	b.n	2055a <handle_na_input+0x18a>
			nbr_free(nbr);
   20658:	4630      	mov	r0, r6
   2065a:	f7ff fa53 	bl	1fb04 <nbr_free>
   2065e:	e77b      	b.n	20558 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   20660:	7842      	ldrb	r2, [r0, #1]
   20662:	1c81      	adds	r1, r0, #2
   20664:	f10d 000e 	add.w	r0, sp, #14
   20668:	f00a f8ee 	bl	2a848 <memcmp>
   2066c:	1c07      	adds	r7, r0, #0
   2066e:	bf18      	it	ne
   20670:	2701      	movne	r7, #1
   20672:	e7b0      	b.n	205d6 <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   20674:	f10d 010e 	add.w	r1, sp, #14
   20678:	f108 0002 	add.w	r0, r8, #2
   2067c:	f7df fe20 	bl	2c0 <memcpy>
   20680:	e7b6      	b.n	205f0 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20682:	2102      	movs	r1, #2
   20684:	4630      	mov	r0, r6
   20686:	f7fe ff7f 	bl	1f588 <ipv6_nbr_set_state>
   2068a:	e7c9      	b.n	20620 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2068c:	a905      	add	r1, sp, #20
   2068e:	4620      	mov	r0, r4
   20690:	f7fe fbe0 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20694:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   20696:	f013 0f20 	tst.w	r3, #32
   2069a:	d10f      	bne.n	206bc <handle_na_input+0x2ec>
   2069c:	b177      	cbz	r7, 206bc <handle_na_input+0x2ec>
   2069e:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   206a0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   206a4:	2b01      	cmp	r3, #1
   206a6:	d15f      	bne.n	20768 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   206a8:	2102      	movs	r1, #2
   206aa:	4630      	mov	r0, r6
   206ac:	f7fe ff6c 	bl	1f588 <ipv6_nbr_set_state>
		return false;
   206b0:	2300      	movs	r3, #0
   206b2:	e752      	b.n	2055a <handle_na_input+0x18a>
   206b4:	20002b58 	.word	0x20002b58
   206b8:	2000bf54 	.word	0x2000bf54
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206bc:	a905      	add	r1, sp, #20
   206be:	4620      	mov	r0, r4
   206c0:	f7fe fbc8 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   206c4:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   206c6:	f013 0f20 	tst.w	r3, #32
   206ca:	d018      	beq.n	206fe <handle_na_input+0x32e>
		if (lladdr_changed) {
   206cc:	b14f      	cbz	r7, 206e2 <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   206ce:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   206d2:	2a06      	cmp	r2, #6
   206d4:	d805      	bhi.n	206e2 <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   206d6:	f10d 010e 	add.w	r1, sp, #14
   206da:	f108 0002 	add.w	r0, r8, #2
   206de:	f7df fdef 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206e2:	a905      	add	r1, sp, #20
   206e4:	4620      	mov	r0, r4
   206e6:	f7fe fbb5 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   206ea:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   206ec:	f013 0f40 	tst.w	r3, #64	; 0x40
   206f0:	d11e      	bne.n	20730 <handle_na_input+0x360>
			if (lladdr_changed) {
   206f2:	b17f      	cbz	r7, 20714 <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   206f4:	2102      	movs	r1, #2
   206f6:	4630      	mov	r0, r6
   206f8:	f7fe ff46 	bl	1f588 <ipv6_nbr_set_state>
   206fc:	e00a      	b.n	20714 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   206fe:	a905      	add	r1, sp, #20
   20700:	4620      	mov	r0, r4
   20702:	f7fe fba7 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   20706:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   20708:	f013 0f20 	tst.w	r3, #32
   2070c:	d102      	bne.n	20714 <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   2070e:	b10d      	cbz	r5, 20714 <handle_na_input+0x344>
   20710:	2f00      	cmp	r7, #0
   20712:	d0db      	beq.n	206cc <handle_na_input+0x2fc>
   20714:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   20716:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   2071a:	b9b3      	cbnz	r3, 2074a <handle_na_input+0x37a>
   2071c:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2071e:	a905      	add	r1, sp, #20
   20720:	4620      	mov	r0, r4
   20722:	f7fe fb97 	bl	1ee54 <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   20726:	7803      	ldrb	r3, [r0, #0]
   20728:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   2072a:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   2072e:	e780      	b.n	20632 <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   20730:	2101      	movs	r1, #1
   20732:	4630      	mov	r0, r6
   20734:	f7fe ff28 	bl	1f588 <ipv6_nbr_set_state>
   20738:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   2073a:	3014      	adds	r0, #20
   2073c:	f009 fc54 	bl	29fe8 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   20740:	4631      	mov	r1, r6
   20742:	6960      	ldr	r0, [r4, #20]
   20744:	f7ff fe38 	bl	203b8 <net_ipv6_nbr_set_reachable_timer>
   20748:	e7e4      	b.n	20714 <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   2074a:	a905      	add	r1, sp, #20
   2074c:	4620      	mov	r0, r4
   2074e:	f7fe fb81 	bl	1ee54 <net_icmpv6_get_na_hdr>
   20752:	e7e3      	b.n	2071c <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   20754:	68f0      	ldr	r0, [r6, #12]
   20756:	f7ff f8af 	bl	1f8b8 <nbr_clear_ns_pending>
   2075a:	e778      	b.n	2064e <handle_na_input+0x27e>
		return false;
   2075c:	2300      	movs	r3, #0
   2075e:	e6fc      	b.n	2055a <handle_na_input+0x18a>
		return false;
   20760:	2300      	movs	r3, #0
   20762:	e6fa      	b.n	2055a <handle_na_input+0x18a>
			return false;
   20764:	2300      	movs	r3, #0
   20766:	e6f8      	b.n	2055a <handle_na_input+0x18a>
		return false;
   20768:	2300      	movs	r3, #0
   2076a:	e6f6      	b.n	2055a <handle_na_input+0x18a>
	return true;
   2076c:	2301      	movs	r3, #1
   2076e:	e6f4      	b.n	2055a <handle_na_input+0x18a>

00020770 <net_ipv6_send_ns>:
{
   20770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20774:	b09d      	sub	sp, #116	; 0x74
   20776:	4605      	mov	r5, r0
   20778:	9101      	str	r1, [sp, #4]
   2077a:	4691      	mov	r9, r2
   2077c:	461e      	mov	r6, r3
   2077e:	9f26      	ldr	r7, [sp, #152]	; 0x98
   20780:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20784:	6843      	ldr	r3, [r0, #4]
   20786:	689b      	ldr	r3, [r3, #8]
   20788:	4631      	mov	r1, r6
   2078a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   2078c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20790:	f7fc ffee 	bl	1d770 <net_pkt_get_reserve_tx>
   20794:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20796:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2079a:	f7fd f807 	bl	1d7ac <net_pkt_get_frag>
   2079e:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   207a0:	4601      	mov	r1, r0
   207a2:	4620      	mov	r0, r4
   207a4:	f7fd f87f 	bl	1d8a6 <net_pkt_frag_add>
	pkt->iface = iface;
   207a8:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   207aa:	7d6b      	ldrb	r3, [r5, #21]
   207ac:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   207b0:	7d6b      	ldrb	r3, [r5, #21]
   207b2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   207b6:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   207ba:	220a      	movs	r2, #10
   207bc:	f362 03c6 	bfi	r3, r2, #3, #4
   207c0:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   207c4:	2328      	movs	r3, #40	; 0x28
   207c6:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   207ca:	2500      	movs	r5, #0
   207cc:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   207d0:	68a3      	ldr	r3, [r4, #8]
   207d2:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   207d4:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   207d8:	461a      	mov	r2, r3
   207da:	4629      	mov	r1, r5
   207dc:	1ac0      	subs	r0, r0, r3
   207de:	f00a f8c7 	bl	2a970 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   207e2:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   207e4:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   207e8:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   207ea:	7d1b      	ldrb	r3, [r3, #20]
   207ec:	2b06      	cmp	r3, #6
   207ee:	f000 808b 	beq.w	20908 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   207f2:	2b08      	cmp	r3, #8
   207f4:	f000 8085 	beq.w	20902 <net_ipv6_send_ns+0x192>
	return 0;
   207f8:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   207fc:	2287      	movs	r2, #135	; 0x87
   207fe:	f108 0114 	add.w	r1, r8, #20
   20802:	4620      	mov	r0, r4
   20804:	f7ff f951 	bl	1faaa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   20808:	f10a 0a08 	add.w	sl, sl, #8
   2080c:	2114      	movs	r1, #20
   2080e:	4650      	mov	r0, sl
   20810:	f7fa fafc 	bl	1ae0c <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   20814:	a903      	add	r1, sp, #12
   20816:	4620      	mov	r0, r4
   20818:	f7fe fa8e 	bl	1ed38 <net_icmpv6_get_ns_hdr>
   2081c:	4605      	mov	r5, r0
	if (!dst) {
   2081e:	2e00      	cmp	r6, #0
   20820:	d075      	beq.n	2090e <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   20822:	68a3      	ldr	r3, [r4, #8]
   20824:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   20828:	f10d 0c20 	add.w	ip, sp, #32
   2082c:	6830      	ldr	r0, [r6, #0]
   2082e:	6871      	ldr	r1, [r6, #4]
   20830:	68b2      	ldr	r2, [r6, #8]
   20832:	68f3      	ldr	r3, [r6, #12]
   20834:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   20838:	ae08      	add	r6, sp, #32
   2083a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2083c:	f8ce 0018 	str.w	r0, [lr, #24]
   20840:	f8ce 101c 	str.w	r1, [lr, #28]
   20844:	f8ce 2020 	str.w	r2, [lr, #32]
   20848:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   2084c:	ae0c      	add	r6, sp, #48	; 0x30
   2084e:	6838      	ldr	r0, [r7, #0]
   20850:	6879      	ldr	r1, [r7, #4]
   20852:	68ba      	ldr	r2, [r7, #8]
   20854:	68fb      	ldr	r3, [r7, #12]
   20856:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   20858:	1d2f      	adds	r7, r5, #4
   2085a:	ae0c      	add	r6, sp, #48	; 0x30
   2085c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2085e:	6068      	str	r0, [r5, #4]
   20860:	6079      	str	r1, [r7, #4]
   20862:	60ba      	str	r2, [r7, #8]
   20864:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   20866:	4629      	mov	r1, r5
   20868:	4620      	mov	r0, r4
   2086a:	f7fe fa89 	bl	1ed80 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   2086e:	f1bb 0f00 	cmp.w	fp, #0
   20872:	d06a      	beq.n	2094a <net_ipv6_send_ns+0x1da>
   20874:	68a3      	ldr	r3, [r4, #8]
   20876:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20878:	f7ff f9ac 	bl	1fbd4 <net_ipv6_unspecified_address>
   2087c:	4603      	mov	r3, r0
   2087e:	ae10      	add	r6, sp, #64	; 0x40
   20880:	6800      	ldr	r0, [r0, #0]
   20882:	6859      	ldr	r1, [r3, #4]
   20884:	689a      	ldr	r2, [r3, #8]
   20886:	68db      	ldr	r3, [r3, #12]
   20888:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2088a:	ae10      	add	r6, sp, #64	; 0x40
   2088c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2088e:	60b8      	str	r0, [r7, #8]
   20890:	60f9      	str	r1, [r7, #12]
   20892:	613a      	str	r2, [r7, #16]
   20894:	617b      	str	r3, [r7, #20]
   20896:	68a3      	ldr	r3, [r4, #8]
   20898:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   2089a:	795a      	ldrb	r2, [r3, #5]
   2089c:	eba2 0808 	sub.w	r8, r2, r8
   208a0:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   208a4:	68a1      	ldr	r1, [r4, #8]
   208a6:	4620      	mov	r0, r4
   208a8:	f7fe f88a 	bl	1e9c0 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   208ac:	3504      	adds	r5, #4
   208ae:	462a      	mov	r2, r5
   208b0:	6961      	ldr	r1, [r4, #20]
   208b2:	486f      	ldr	r0, [pc, #444]	; (20a70 <net_ipv6_send_ns+0x300>)
   208b4:	f7fe ffe0 	bl	1f878 <nbr_lookup>
	if (!nbr) {
   208b8:	4606      	mov	r6, r0
   208ba:	2800      	cmp	r0, #0
   208bc:	f000 80ad 	beq.w	20a1a <net_ipv6_send_ns+0x2aa>
	if (pending) {
   208c0:	9801      	ldr	r0, [sp, #4]
   208c2:	b170      	cbz	r0, 208e2 <net_ipv6_send_ns+0x172>
   208c4:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   208c6:	682b      	ldr	r3, [r5, #0]
   208c8:	2b00      	cmp	r3, #0
   208ca:	f040 80b1 	bne.w	20a30 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   208ce:	f7fc ffb1 	bl	1d834 <net_pkt_ref>
   208d2:	6028      	str	r0, [r5, #0]
   208d4:	68f1      	ldr	r1, [r6, #12]
   208d6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   208da:	313c      	adds	r1, #60	; 0x3c
   208dc:	4865      	ldr	r0, [pc, #404]	; (20a74 <net_ipv6_send_ns+0x304>)
   208de:	f009 fbdd 	bl	2a09c <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   208e2:	4620      	mov	r0, r4
   208e4:	f7fa fbb4 	bl	1b050 <net_send_data>
   208e8:	2800      	cmp	r0, #0
   208ea:	f2c0 80b0 	blt.w	20a4e <net_ipv6_send_ns+0x2de>
   208ee:	4a62      	ldr	r2, [pc, #392]	; (20a78 <net_ipv6_send_ns+0x308>)
   208f0:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   208f4:	3301      	adds	r3, #1
   208f6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   208fa:	2000      	movs	r0, #0
}
   208fc:	b01d      	add	sp, #116	; 0x74
   208fe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   20902:	f04f 0810 	mov.w	r8, #16
   20906:	e779      	b.n	207fc <net_ipv6_send_ns+0x8c>
		return 8;
   20908:	f04f 0808 	mov.w	r8, #8
   2090c:	e776      	b.n	207fc <net_ipv6_send_ns+0x8c>
   2090e:	68a3      	ldr	r3, [r4, #8]
   20910:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   20912:	21ff      	movs	r1, #255	; 0xff
   20914:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   20916:	2202      	movs	r2, #2
   20918:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   2091a:	2200      	movs	r2, #0
   2091c:	769a      	strb	r2, [r3, #26]
   2091e:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   20920:	771a      	strb	r2, [r3, #28]
   20922:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   20924:	779a      	strb	r2, [r3, #30]
   20926:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   20928:	f883 2020 	strb.w	r2, [r3, #32]
   2092c:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   20930:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   20934:	2201      	movs	r2, #1
   20936:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   2093a:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   2093e:	7b7a      	ldrb	r2, [r7, #13]
   20940:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   20944:	89fa      	ldrh	r2, [r7, #14]
   20946:	84da      	strh	r2, [r3, #38]	; 0x26
   20948:	e780      	b.n	2084c <net_ipv6_send_ns+0xdc>
		if (src) {
   2094a:	f1b9 0f00 	cmp.w	r9, #0
   2094e:	d025      	beq.n	2099c <net_ipv6_send_ns+0x22c>
   20950:	68a3      	ldr	r3, [r4, #8]
   20952:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   20956:	ae14      	add	r6, sp, #80	; 0x50
   20958:	f8d9 0000 	ldr.w	r0, [r9]
   2095c:	f8d9 1004 	ldr.w	r1, [r9, #4]
   20960:	f8d9 2008 	ldr.w	r2, [r9, #8]
   20964:	f8d9 300c 	ldr.w	r3, [r9, #12]
   20968:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   2096a:	ae14      	add	r6, sp, #80	; 0x50
   2096c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2096e:	f8ce 0008 	str.w	r0, [lr, #8]
   20972:	f8ce 100c 	str.w	r1, [lr, #12]
   20976:	f8ce 2010 	str.w	r2, [lr, #16]
   2097a:	f8ce 3014 	str.w	r3, [lr, #20]
   2097e:	68a3      	ldr	r3, [r4, #8]
   20980:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20982:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20984:	b9fa      	cbnz	r2, 209c6 <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20986:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20988:	2a00      	cmp	r2, #0
   2098a:	d140      	bne.n	20a0e <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2098c:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2098e:	2a00      	cmp	r2, #0
   20990:	d13f      	bne.n	20a12 <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20992:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20994:	2b00      	cmp	r3, #0
   20996:	d03e      	beq.n	20a16 <net_ipv6_send_ns+0x2a6>
   20998:	2300      	movs	r3, #0
   2099a:	e015      	b.n	209c8 <net_ipv6_send_ns+0x258>
   2099c:	68a3      	ldr	r3, [r4, #8]
   2099e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   209a0:	f107 0118 	add.w	r1, r7, #24
   209a4:	6960      	ldr	r0, [r4, #20]
   209a6:	f7fb fab9 	bl	1bf1c <net_if_ipv6_select_src_addr>
   209aa:	4603      	mov	r3, r0
   209ac:	ae18      	add	r6, sp, #96	; 0x60
   209ae:	6800      	ldr	r0, [r0, #0]
   209b0:	6859      	ldr	r1, [r3, #4]
   209b2:	689a      	ldr	r2, [r3, #8]
   209b4:	68db      	ldr	r3, [r3, #12]
   209b6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   209b8:	ae18      	add	r6, sp, #96	; 0x60
   209ba:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   209bc:	60b8      	str	r0, [r7, #8]
   209be:	60f9      	str	r1, [r7, #12]
   209c0:	613a      	str	r2, [r7, #16]
   209c2:	617b      	str	r3, [r7, #20]
   209c4:	e7db      	b.n	2097e <net_ipv6_send_ns+0x20e>
   209c6:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   209c8:	bbab      	cbnz	r3, 20a36 <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   209ca:	4641      	mov	r1, r8
   209cc:	4650      	mov	r0, sl
   209ce:	f7fa fa1d 	bl	1ae0c <net_buf_simple_add>
	return pkt->iface;
   209d2:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   209d6:	4620      	mov	r0, r4
   209d8:	f7fd fa14 	bl	1de04 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   209dc:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   209e0:	2301      	movs	r3, #1
   209e2:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   209e4:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   209e8:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   209ea:	f899 2014 	ldrb.w	r2, [r9, #20]
   209ee:	f8d9 1010 	ldr.w	r1, [r9, #16]
   209f2:	301a      	adds	r0, #26
   209f4:	f7df fc64 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   209f8:	f899 2014 	ldrb.w	r2, [r9, #20]
   209fc:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   209fe:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20a02:	3a02      	subs	r2, #2
   20a04:	2100      	movs	r1, #0
   20a06:	4430      	add	r0, r6
   20a08:	f009 ffb2 	bl	2a970 <memset>
   20a0c:	e74a      	b.n	208a4 <net_ipv6_send_ns+0x134>
   20a0e:	2300      	movs	r3, #0
   20a10:	e7da      	b.n	209c8 <net_ipv6_send_ns+0x258>
   20a12:	2300      	movs	r3, #0
   20a14:	e7d8      	b.n	209c8 <net_ipv6_send_ns+0x258>
   20a16:	2301      	movs	r3, #1
   20a18:	e7d6      	b.n	209c8 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   20a1a:	2300      	movs	r3, #0
   20a1c:	461a      	mov	r2, r3
   20a1e:	4629      	mov	r1, r5
   20a20:	6960      	ldr	r0, [r4, #20]
   20a22:	f7fe ffab 	bl	1f97c <nbr_new>
		if (!nbr) {
   20a26:	4606      	mov	r6, r0
   20a28:	2800      	cmp	r0, #0
   20a2a:	f47f af49 	bne.w	208c0 <net_ipv6_send_ns+0x150>
   20a2e:	e002      	b.n	20a36 <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   20a30:	9801      	ldr	r0, [sp, #4]
   20a32:	f7fc ff0e 	bl	1d852 <net_pkt_unref>
	net_pkt_unref(pkt);
   20a36:	4620      	mov	r0, r4
   20a38:	f7fc ff0b 	bl	1d852 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20a3c:	4a0e      	ldr	r2, [pc, #56]	; (20a78 <net_ipv6_send_ns+0x308>)
   20a3e:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20a42:	3301      	adds	r3, #1
   20a44:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20a48:	f06f 0015 	mvn.w	r0, #21
   20a4c:	e756      	b.n	208fc <net_ipv6_send_ns+0x18c>
		if (pending) {
   20a4e:	9b01      	ldr	r3, [sp, #4]
   20a50:	2b00      	cmp	r3, #0
   20a52:	d0f0      	beq.n	20a36 <net_ipv6_send_ns+0x2c6>
   20a54:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   20a56:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20a5a:	f009 fac5 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   20a5e:	6828      	ldr	r0, [r5, #0]
   20a60:	2800      	cmp	r0, #0
   20a62:	d0e8      	beq.n	20a36 <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   20a64:	f7fc fef5 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   20a68:	2300      	movs	r3, #0
   20a6a:	602b      	str	r3, [r5, #0]
   20a6c:	e7e3      	b.n	20a36 <net_ipv6_send_ns+0x2c6>
   20a6e:	bf00      	nop
   20a70:	2000bf54 	.word	0x2000bf54
   20a74:	20002c78 	.word	0x20002c78
   20a78:	20002b58 	.word	0x20002b58

00020a7c <net_ipv6_nbr_add>:
{
   20a7c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20a80:	b083      	sub	sp, #12
   20a82:	4605      	mov	r5, r0
   20a84:	460e      	mov	r6, r1
   20a86:	4617      	mov	r7, r2
   20a88:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   20a8a:	460a      	mov	r2, r1
   20a8c:	4601      	mov	r1, r0
   20a8e:	482c      	ldr	r0, [pc, #176]	; (20b40 <net_ipv6_nbr_add+0xc4>)
   20a90:	f7fe fef2 	bl	1f878 <nbr_lookup>
	if (!nbr) {
   20a94:	4604      	mov	r4, r0
   20a96:	b180      	cbz	r0, 20aba <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20a98:	463a      	mov	r2, r7
   20a9a:	4629      	mov	r1, r5
   20a9c:	4620      	mov	r0, r4
   20a9e:	f7fe fd05 	bl	1f4ac <net_nbr_link>
   20aa2:	f110 0f78 	cmn.w	r0, #120	; 0x78
   20aa6:	d013      	beq.n	20ad0 <net_ipv6_nbr_add+0x54>
   20aa8:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20aaa:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20aae:	2b00      	cmp	r3, #0
   20ab0:	d03c      	beq.n	20b2c <net_ipv6_nbr_add+0xb0>
}
   20ab2:	4620      	mov	r0, r4
   20ab4:	b003      	add	sp, #12
   20ab6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   20aba:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   20abe:	4642      	mov	r2, r8
   20ac0:	4631      	mov	r1, r6
   20ac2:	4628      	mov	r0, r5
   20ac4:	f7fe ff5a 	bl	1f97c <nbr_new>
		if (!nbr) {
   20ac8:	4604      	mov	r4, r0
   20aca:	2800      	cmp	r0, #0
   20acc:	d1e4      	bne.n	20a98 <net_ipv6_nbr_add+0x1c>
   20ace:	e7f0      	b.n	20ab2 <net_ipv6_nbr_add+0x36>
   20ad0:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   20ad2:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20ad6:	2b05      	cmp	r3, #5
   20ad8:	d0e6      	beq.n	20aa8 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   20ada:	7860      	ldrb	r0, [r4, #1]
   20adc:	f7fe fd4c 	bl	1f578 <net_nbr_get_lladdr>
   20ae0:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   20ae2:	f100 0902 	add.w	r9, r0, #2
   20ae6:	793a      	ldrb	r2, [r7, #4]
   20ae8:	6839      	ldr	r1, [r7, #0]
   20aea:	4648      	mov	r0, r9
   20aec:	f009 feac 	bl	2a848 <memcmp>
   20af0:	b190      	cbz	r0, 20b18 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   20af2:	6839      	ldr	r1, [r7, #0]
   20af4:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   20af6:	f1b8 0f00 	cmp.w	r8, #0
   20afa:	d002      	beq.n	20b02 <net_ipv6_nbr_add+0x86>
   20afc:	b109      	cbz	r1, 20b02 <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   20afe:	2a06      	cmp	r2, #6
   20b00:	d904      	bls.n	20b0c <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20b02:	2102      	movs	r1, #2
   20b04:	4620      	mov	r0, r4
   20b06:	f7fe fd3f 	bl	1f588 <ipv6_nbr_set_state>
   20b0a:	e7cd      	b.n	20aa8 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   20b0c:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   20b10:	4648      	mov	r0, r9
   20b12:	f7df fbd5 	bl	2c0 <memcpy>
   20b16:	e7f4      	b.n	20b02 <net_ipv6_nbr_add+0x86>
   20b18:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   20b1a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20b1e:	2b00      	cmp	r3, #0
   20b20:	d1c2      	bne.n	20aa8 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   20b22:	2102      	movs	r1, #2
   20b24:	4620      	mov	r0, r4
   20b26:	f7fe fd2f 	bl	1f588 <ipv6_nbr_set_state>
   20b2a:	e7bd      	b.n	20aa8 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   20b2c:	2100      	movs	r1, #0
   20b2e:	9101      	str	r1, [sp, #4]
   20b30:	9600      	str	r6, [sp, #0]
   20b32:	460b      	mov	r3, r1
   20b34:	460a      	mov	r2, r1
   20b36:	4628      	mov	r0, r5
   20b38:	f7ff fe1a 	bl	20770 <net_ipv6_send_ns>
   20b3c:	e7b9      	b.n	20ab2 <net_ipv6_nbr_add+0x36>
   20b3e:	bf00      	nop
   20b40:	2000bf54 	.word	0x2000bf54

00020b44 <handle_ra_input>:
{
   20b44:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20b48:	b098      	sub	sp, #96	; 0x60
   20b4a:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   20b4c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20b4e:	2200      	movs	r2, #0
   20b50:	e002      	b.n	20b58 <handle_ra_input+0x14>
		bytes += buf->len;
   20b52:	8999      	ldrh	r1, [r3, #12]
   20b54:	440a      	add	r2, r1
		buf = buf->frags;
   20b56:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20b58:	2b00      	cmp	r3, #0
   20b5a:	d1fa      	bne.n	20b52 <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20b5c:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   20b5e:	49b7      	ldr	r1, [pc, #732]	; (20e3c <handle_ra_input+0x2f8>)
   20b60:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   20b64:	3301      	adds	r3, #1
   20b66:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20b6a:	2a39      	cmp	r2, #57	; 0x39
   20b6c:	d904      	bls.n	20b78 <handle_ra_input+0x34>
	return pkt->frags->data;
   20b6e:	68b3      	ldr	r3, [r6, #8]
   20b70:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20b72:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   20b74:	2aff      	cmp	r2, #255	; 0xff
   20b76:	d010      	beq.n	20b9a <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20b78:	a907      	add	r1, sp, #28
   20b7a:	4630      	mov	r0, r6
   20b7c:	f7fd ff6d 	bl	1ea5a <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20b80:	b108      	cbz	r0, 20b86 <handle_ra_input+0x42>
   20b82:	7843      	ldrb	r3, [r0, #1]
   20b84:	b173      	cbz	r3, 20ba4 <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   20b86:	4aad      	ldr	r2, [pc, #692]	; (20e3c <handle_ra_input+0x2f8>)
   20b88:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20b8c:	3301      	adds	r3, #1
   20b8e:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   20b92:	2002      	movs	r0, #2
}
   20b94:	b018      	add	sp, #96	; 0x60
   20b96:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20b9a:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20b9c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20ba0:	429a      	cmp	r2, r3
   20ba2:	d1e9      	bne.n	20b78 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   20ba4:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   20ba8:	312c      	adds	r1, #44	; 0x2c
   20baa:	ac18      	add	r4, sp, #96	; 0x60
   20bac:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   20bb0:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   20bb4:	9300      	str	r3, [sp, #0]
   20bb6:	2301      	movs	r3, #1
   20bb8:	4622      	mov	r2, r4
   20bba:	68b0      	ldr	r0, [r6, #8]
   20bbc:	f7fc ffc7 	bl	1db4e <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   20bc0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   20bc4:	2300      	movs	r3, #0
   20bc6:	9300      	str	r3, [sp, #0]
   20bc8:	2301      	movs	r3, #1
   20bca:	4622      	mov	r2, r4
   20bcc:	f7fc ffbf 	bl	1db4e <net_frag_read>
	if (!frag) {
   20bd0:	4604      	mov	r4, r0
   20bd2:	2800      	cmp	r0, #0
   20bd4:	d0d7      	beq.n	20b86 <handle_ra_input+0x42>
	if (hop_limit) {
   20bd6:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   20bda:	b113      	cbz	r3, 20be2 <handle_ra_input+0x9e>
	return pkt->iface;
   20bdc:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   20bde:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   20be2:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   20be6:	aa11      	add	r2, sp, #68	; 0x44
   20be8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bec:	4620      	mov	r0, r4
   20bee:	f7fc fff6 	bl	1dbde <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   20bf2:	ab13      	add	r3, sp, #76	; 0x4c
   20bf4:	aa11      	add	r2, sp, #68	; 0x44
   20bf6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20bfa:	f7fd f801 	bl	1dc00 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   20bfe:	ab12      	add	r3, sp, #72	; 0x48
   20c00:	aa11      	add	r2, sp, #68	; 0x44
   20c02:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20c06:	f7fc fffb 	bl	1dc00 <net_frag_read_be32>
	if (!frag) {
   20c0a:	4605      	mov	r5, r0
   20c0c:	2800      	cmp	r0, #0
   20c0e:	d0ba      	beq.n	20b86 <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   20c10:	a915      	add	r1, sp, #84	; 0x54
   20c12:	4630      	mov	r0, r6
   20c14:	f7fe f99a 	bl	1ef4c <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   20c18:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20c1a:	b16b      	cbz	r3, 20c38 <handle_ra_input+0xf4>
   20c1c:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   20c1e:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   20c22:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   20c24:	428c      	cmp	r4, r1
   20c26:	d007      	beq.n	20c38 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   20c28:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   20c2c:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   20c2e:	4620      	mov	r0, r4
   20c30:	f7fb fa70 	bl	1c114 <net_if_ipv6_calc_reachable_time>
   20c34:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20c38:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20c3a:	b113      	cbz	r3, 20c42 <handle_ra_input+0xfe>
   20c3c:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20c3e:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   20c42:	2700      	movs	r7, #0
   20c44:	e060      	b.n	20d08 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   20c46:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20c4a:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20c4e:	2306      	movs	r3, #6
   20c50:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   20c54:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20c58:	f10d 031e 	add.w	r3, sp, #30
   20c5c:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20c5e:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   20c62:	2b05      	cmp	r3, #5
   20c64:	d801      	bhi.n	20c6a <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   20c66:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20c6a:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20c6e:	f10d 021e 	add.w	r2, sp, #30
   20c72:	9200      	str	r2, [sp, #0]
   20c74:	aa11      	add	r2, sp, #68	; 0x44
   20c76:	4641      	mov	r1, r8
   20c78:	4628      	mov	r0, r5
   20c7a:	f7fc ff68 	bl	1db4e <net_frag_read>
	if (!frag && offset) {
   20c7e:	4605      	mov	r5, r0
   20c80:	b318      	cbz	r0, 20cca <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   20c82:	00e3      	lsls	r3, r4, #3
   20c84:	b2db      	uxtb	r3, r3
   20c86:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20c8a:	1a9b      	subs	r3, r3, r2
   20c8c:	b2db      	uxtb	r3, r3
   20c8e:	3b02      	subs	r3, #2
	if (padding) {
   20c90:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   20c94:	d009      	beq.n	20caa <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   20c96:	aa18      	add	r2, sp, #96	; 0x60
   20c98:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20c9c:	2000      	movs	r0, #0
   20c9e:	9000      	str	r0, [sp, #0]
   20ca0:	4628      	mov	r0, r5
   20ca2:	f7fc ff54 	bl	1db4e <net_frag_read>
		if (!frag && *pos) {
   20ca6:	4605      	mov	r5, r0
   20ca8:	b198      	cbz	r0, 20cd2 <handle_ra_input+0x18e>
	return pkt->frags->data;
   20caa:	68b3      	ldr	r3, [r6, #8]
   20cac:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20cae:	2302      	movs	r3, #2
   20cb0:	9300      	str	r3, [sp, #0]
   20cb2:	2301      	movs	r3, #1
   20cb4:	aa03      	add	r2, sp, #12
   20cb6:	3108      	adds	r1, #8
   20cb8:	6970      	ldr	r0, [r6, #20]
   20cba:	f7ff fedf 	bl	20a7c <net_ipv6_nbr_add>
   20cbe:	4607      	mov	r7, r0
			if (!frag && offset) {
   20cc0:	bb15      	cbnz	r5, 20d08 <handle_ra_input+0x1c4>
   20cc2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20cc6:	b1fb      	cbz	r3, 20d08 <handle_ra_input+0x1c4>
   20cc8:	e75d      	b.n	20b86 <handle_ra_input+0x42>
	if (!frag && offset) {
   20cca:	f1b8 0f00 	cmp.w	r8, #0
   20cce:	d0d8      	beq.n	20c82 <handle_ra_input+0x13e>
   20cd0:	e7f6      	b.n	20cc0 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   20cd2:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20cd6:	2b00      	cmp	r3, #0
   20cd8:	d0e7      	beq.n	20caa <handle_ra_input+0x166>
   20cda:	e7f1      	b.n	20cc0 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   20cdc:	ac18      	add	r4, sp, #96	; 0x60
   20cde:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   20ce2:	2300      	movs	r3, #0
   20ce4:	9300      	str	r3, [sp, #0]
   20ce6:	2302      	movs	r3, #2
   20ce8:	4622      	mov	r2, r4
   20cea:	f7fc ff30 	bl	1db4e <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   20cee:	ab0f      	add	r3, sp, #60	; 0x3c
   20cf0:	4622      	mov	r2, r4
   20cf2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20cf6:	f7fc ff83 	bl	1dc00 <net_frag_read_be32>
			if (!frag && offset) {
   20cfa:	4605      	mov	r5, r0
   20cfc:	2800      	cmp	r0, #0
   20cfe:	d03b      	beq.n	20d78 <handle_ra_input+0x234>
	return pkt->iface;
   20d00:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   20d02:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   20d06:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   20d08:	2d00      	cmp	r5, #0
   20d0a:	f000 8170 	beq.w	20fee <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   20d0e:	ac18      	add	r4, sp, #96	; 0x60
   20d10:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   20d14:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20d18:	9300      	str	r3, [sp, #0]
   20d1a:	2301      	movs	r3, #1
   20d1c:	4622      	mov	r2, r4
   20d1e:	4628      	mov	r0, r5
   20d20:	f7fc ff15 	bl	1db4e <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   20d24:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20d28:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20d2c:	9300      	str	r3, [sp, #0]
   20d2e:	2301      	movs	r3, #1
   20d30:	4622      	mov	r2, r4
   20d32:	f7fc ff0c 	bl	1db4e <net_frag_read>
		if (!frag) {
   20d36:	4605      	mov	r5, r0
   20d38:	2800      	cmp	r0, #0
   20d3a:	f43f af24 	beq.w	20b86 <handle_ra_input+0x42>
		switch (type) {
   20d3e:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   20d42:	2b03      	cmp	r3, #3
   20d44:	d01d      	beq.n	20d82 <handle_ra_input+0x23e>
   20d46:	2b05      	cmp	r3, #5
   20d48:	d0c8      	beq.n	20cdc <handle_ra_input+0x198>
   20d4a:	2b01      	cmp	r3, #1
   20d4c:	f43f af7b 	beq.w	20c46 <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20d50:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   20d54:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20d58:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20d5a:	3b02      	subs	r3, #2
   20d5c:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20d5e:	2200      	movs	r2, #0
   20d60:	9200      	str	r2, [sp, #0]
   20d62:	aa11      	add	r2, sp, #68	; 0x44
   20d64:	f7fc fef3 	bl	1db4e <net_frag_read>
			if (!frag && offset) {
   20d68:	4605      	mov	r5, r0
   20d6a:	2800      	cmp	r0, #0
   20d6c:	d1cc      	bne.n	20d08 <handle_ra_input+0x1c4>
   20d6e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d72:	2b00      	cmp	r3, #0
   20d74:	d0c8      	beq.n	20d08 <handle_ra_input+0x1c4>
   20d76:	e706      	b.n	20b86 <handle_ra_input+0x42>
			if (!frag && offset) {
   20d78:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20d7c:	2b00      	cmp	r3, #0
   20d7e:	d0bf      	beq.n	20d00 <handle_ra_input+0x1bc>
   20d80:	e701      	b.n	20b86 <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   20d82:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20d86:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20d8a:	2203      	movs	r2, #3
   20d8c:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20d90:	4093      	lsls	r3, r2
   20d92:	b2db      	uxtb	r3, r3
   20d94:	3b02      	subs	r3, #2
   20d96:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20d9a:	f10d 031e 	add.w	r3, sp, #30
   20d9e:	9300      	str	r3, [sp, #0]
   20da0:	2301      	movs	r3, #1
   20da2:	aa11      	add	r2, sp, #68	; 0x44
   20da4:	f7fc fed3 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20da8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20dac:	f10d 031f 	add.w	r3, sp, #31
   20db0:	9300      	str	r3, [sp, #0]
   20db2:	2301      	movs	r3, #1
   20db4:	aa11      	add	r2, sp, #68	; 0x44
   20db6:	f7fc feca 	bl	1db4e <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   20dba:	ab08      	add	r3, sp, #32
   20dbc:	aa11      	add	r2, sp, #68	; 0x44
   20dbe:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20dc2:	f7fc ff1d 	bl	1dc00 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   20dc6:	ab09      	add	r3, sp, #36	; 0x24
   20dc8:	aa11      	add	r2, sp, #68	; 0x44
   20dca:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20dce:	f7fc ff17 	bl	1dc00 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   20dd2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20dd6:	2300      	movs	r3, #0
   20dd8:	9300      	str	r3, [sp, #0]
   20dda:	2304      	movs	r3, #4
   20ddc:	aa11      	add	r2, sp, #68	; 0x44
   20dde:	f7fc feb6 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   20de2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20de6:	ab0b      	add	r3, sp, #44	; 0x2c
   20de8:	9300      	str	r3, [sp, #0]
   20dea:	2310      	movs	r3, #16
   20dec:	aa11      	add	r2, sp, #68	; 0x44
   20dee:	f7fc feae 	bl	1db4e <net_frag_read>
	if (!frag && *pos) {
   20df2:	4605      	mov	r5, r0
   20df4:	b320      	cbz	r0, 20e40 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   20df6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   20df8:	9a08      	ldr	r2, [sp, #32]
   20dfa:	429a      	cmp	r2, r3
   20dfc:	d314      	bcc.n	20e28 <handle_ra_input+0x2e4>
   20dfe:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   20e02:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20e06:	429a      	cmp	r2, r3
   20e08:	d00e      	beq.n	20e28 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   20e0a:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   20e0e:	2b00      	cmp	r3, #0
   20e10:	db1b      	blt.n	20e4a <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20e12:	f89d 301f 	ldrb.w	r3, [sp, #31]
   20e16:	f013 0f40 	tst.w	r3, #64	; 0x40
   20e1a:	d005      	beq.n	20e28 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20e1c:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20e1e:	b11b      	cbz	r3, 20e28 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20e20:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   20e24:	2b40      	cmp	r3, #64	; 0x40
   20e26:	d03e      	beq.n	20ea6 <handle_ra_input+0x362>
			if (!frag && offset) {
   20e28:	2d00      	cmp	r5, #0
   20e2a:	f47f af6d 	bne.w	20d08 <handle_ra_input+0x1c4>
   20e2e:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20e32:	2b00      	cmp	r3, #0
   20e34:	f43f af68 	beq.w	20d08 <handle_ra_input+0x1c4>
   20e38:	e6a5      	b.n	20b86 <handle_ra_input+0x42>
   20e3a:	bf00      	nop
   20e3c:	20002b58 	.word	0x20002b58
	if (!frag && *pos) {
   20e40:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20e44:	2b00      	cmp	r3, #0
   20e46:	d0d6      	beq.n	20df6 <handle_ra_input+0x2b2>
   20e48:	e7ee      	b.n	20e28 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20e4a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20e4e:	a90b      	add	r1, sp, #44	; 0x2c
   20e50:	6970      	ldr	r0, [r6, #20]
   20e52:	f7fa fe3f 	bl	1bad4 <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   20e56:	4603      	mov	r3, r0
   20e58:	b160      	cbz	r0, 20e74 <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20e5a:	9a08      	ldr	r2, [sp, #32]
   20e5c:	b1ba      	cbz	r2, 20e8e <handle_ra_input+0x34a>
   20e5e:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   20e62:	d01c      	beq.n	20e9e <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   20e64:	2200      	movs	r2, #0
   20e66:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20e6a:	9908      	ldr	r1, [sp, #32]
   20e6c:	4618      	mov	r0, r3
   20e6e:	f7fa fee3 	bl	1bc38 <net_if_ipv6_prefix_set_timer>
   20e72:	e7ce      	b.n	20e12 <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   20e74:	9b08      	ldr	r3, [sp, #32]
   20e76:	2b00      	cmp	r3, #0
   20e78:	d0cb      	beq.n	20e12 <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20e7a:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20e7e:	a90b      	add	r1, sp, #44	; 0x2c
   20e80:	6970      	ldr	r0, [r6, #20]
   20e82:	f7fa fdf7 	bl	1ba74 <net_if_ipv6_prefix_add>
		if (prefix) {
   20e86:	4603      	mov	r3, r0
   20e88:	2800      	cmp	r0, #0
   20e8a:	d1e6      	bne.n	20e5a <handle_ra_input+0x316>
   20e8c:	e7c1      	b.n	20e12 <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20e8e:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   20e92:	f103 0128 	add.w	r1, r3, #40	; 0x28
   20e96:	6970      	ldr	r0, [r6, #20]
   20e98:	f7fa feea 	bl	1bc70 <net_if_ipv6_prefix_rm>
   20e9c:	e7b9      	b.n	20e12 <handle_ra_input+0x2ce>
   20e9e:	2201      	movs	r2, #1
   20ea0:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   20ea4:	e7b5      	b.n	20e12 <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   20ea6:	2300      	movs	r3, #0
   20ea8:	9305      	str	r3, [sp, #20]
   20eaa:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20eac:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20eae:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   20eb2:	22fe      	movs	r2, #254	; 0xfe
   20eb4:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   20eb8:	2280      	movs	r2, #128	; 0x80
   20eba:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   20ebe:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   20ec2:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   20ec4:	f898 2004 	ldrb.w	r2, [r8, #4]
   20ec8:	2a06      	cmp	r2, #6
   20eca:	d032      	beq.n	20f32 <handle_ra_input+0x3ee>
   20ecc:	2a08      	cmp	r2, #8
   20ece:	d058      	beq.n	20f82 <handle_ra_input+0x43e>
   20ed0:	2a02      	cmp	r2, #2
   20ed2:	d018      	beq.n	20f06 <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   20ed4:	2208      	movs	r2, #8
   20ed6:	a90b      	add	r1, sp, #44	; 0x2c
   20ed8:	a803      	add	r0, sp, #12
   20eda:	f7df f9f1 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   20ede:	2100      	movs	r1, #0
   20ee0:	a803      	add	r0, sp, #12
   20ee2:	f7fa fb03 	bl	1b4ec <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   20ee6:	4604      	mov	r4, r0
   20ee8:	b118      	cbz	r0, 20ef2 <handle_ra_input+0x3ae>
   20eea:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   20eee:	2b01      	cmp	r3, #1
   20ef0:	d052      	beq.n	20f98 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   20ef2:	9b08      	ldr	r3, [sp, #32]
   20ef4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   20ef8:	d072      	beq.n	20fe0 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20efa:	2201      	movs	r2, #1
   20efc:	a903      	add	r1, sp, #12
   20efe:	6970      	ldr	r0, [r6, #20]
   20f00:	f7fa fb6a 	bl	1b5d8 <net_if_ipv6_addr_add>
   20f04:	e790      	b.n	20e28 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   20f06:	f898 3005 	ldrb.w	r3, [r8, #5]
   20f0a:	2b01      	cmp	r3, #1
   20f0c:	d1e2      	bne.n	20ed4 <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   20f0e:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   20f10:	22ff      	movs	r2, #255	; 0xff
   20f12:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   20f16:	22fe      	movs	r2, #254	; 0xfe
   20f18:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20f1c:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20f20:	6923      	ldr	r3, [r4, #16]
   20f22:	781b      	ldrb	r3, [r3, #0]
   20f24:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20f28:	6923      	ldr	r3, [r4, #16]
   20f2a:	785b      	ldrb	r3, [r3, #1]
   20f2c:	f88d 301b 	strb.w	r3, [sp, #27]
   20f30:	e7d0      	b.n	20ed4 <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   20f32:	2203      	movs	r2, #3
   20f34:	6921      	ldr	r1, [r4, #16]
   20f36:	a805      	add	r0, sp, #20
   20f38:	f7df f9c2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20f3c:	23ff      	movs	r3, #255	; 0xff
   20f3e:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   20f42:	23fe      	movs	r3, #254	; 0xfe
   20f44:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20f48:	6921      	ldr	r1, [r4, #16]
   20f4a:	2203      	movs	r2, #3
   20f4c:	4411      	add	r1, r2
   20f4e:	f10d 0019 	add.w	r0, sp, #25
   20f52:	f7df f9b5 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   20f56:	f898 3005 	ldrb.w	r3, [r8, #5]
   20f5a:	2b02      	cmp	r3, #2
   20f5c:	d00a      	beq.n	20f74 <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20f5e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20f62:	2b03      	cmp	r3, #3
   20f64:	d1b6      	bne.n	20ed4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20f66:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f6a:	f083 0302 	eor.w	r3, r3, #2
   20f6e:	f88d 3014 	strb.w	r3, [sp, #20]
   20f72:	e7af      	b.n	20ed4 <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   20f74:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f78:	f083 0302 	eor.w	r3, r3, #2
   20f7c:	f88d 3014 	strb.w	r3, [sp, #20]
   20f80:	e7ed      	b.n	20f5e <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   20f82:	6921      	ldr	r1, [r4, #16]
   20f84:	a805      	add	r0, sp, #20
   20f86:	f7df f99b 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20f8a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20f8e:	f083 0302 	eor.w	r3, r3, #2
   20f92:	f88d 3014 	strb.w	r3, [sp, #20]
   20f96:	e79d      	b.n	20ed4 <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20f98:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20f9c:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20fa0:	d015      	beq.n	20fce <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20fa2:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   20fa6:	d80a      	bhi.n	20fbe <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20fa8:	3020      	adds	r0, #32
   20faa:	f008 ff79 	bl	29ea0 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20fae:	4a30      	ldr	r2, [pc, #192]	; (21070 <handle_ra_input+0x52c>)
   20fb0:	fb82 3200 	smull	r3, r2, r2, r0
   20fb4:	17c3      	asrs	r3, r0, #31
   20fb6:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   20fba:	4598      	cmp	r8, r3
   20fbc:	d90a      	bls.n	20fd4 <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   20fbe:	9908      	ldr	r1, [sp, #32]
   20fc0:	4620      	mov	r0, r4
   20fc2:	f7fa fafb 	bl	1b5bc <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   20fc6:	2300      	movs	r3, #0
   20fc8:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   20fcc:	e72c      	b.n	20e28 <handle_ra_input+0x2e4>
   20fce:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   20fd2:	e729      	b.n	20e28 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   20fd4:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   20fd8:	4620      	mov	r0, r4
   20fda:	f7fa faef 	bl	1b5bc <net_if_ipv6_addr_update_lifetime>
   20fde:	e7f2      	b.n	20fc6 <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   20fe0:	2300      	movs	r3, #0
   20fe2:	2201      	movs	r2, #1
   20fe4:	a903      	add	r1, sp, #12
   20fe6:	6970      	ldr	r0, [r6, #20]
   20fe8:	f7fa faf6 	bl	1b5d8 <net_if_ipv6_addr_add>
   20fec:	e71c      	b.n	20e28 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   20fee:	68b3      	ldr	r3, [r6, #8]
   20ff0:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   20ff2:	3108      	adds	r1, #8
   20ff4:	6970      	ldr	r0, [r6, #20]
   20ff6:	f7fa fe7b 	bl	1bcf0 <net_if_ipv6_router_lookup>
	if (router) {
   20ffa:	4603      	mov	r3, r0
   20ffc:	b350      	cbz	r0, 21054 <handle_ra_input+0x510>
		if (!router_lifetime) {
   20ffe:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   21002:	b321      	cbz	r1, 2104e <handle_ra_input+0x50a>
			if (nbr) {
   21004:	b11f      	cbz	r7, 2100e <handle_ra_input+0x4ca>
   21006:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   21008:	2001      	movs	r0, #1
   2100a:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   2100e:	4618      	mov	r0, r3
   21010:	f7fa fec6 	bl	1bda0 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   21014:	b18f      	cbz	r7, 2103a <handle_ra_input+0x4f6>
   21016:	68fb      	ldr	r3, [r7, #12]
   21018:	6818      	ldr	r0, [r3, #0]
   2101a:	b170      	cbz	r0, 2103a <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   2101c:	f7fa f818 	bl	1b050 <net_send_data>
   21020:	2800      	cmp	r0, #0
   21022:	db20      	blt.n	21066 <handle_ra_input+0x522>
   21024:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   21026:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   2102a:	f008 ffdd 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   2102e:	6820      	ldr	r0, [r4, #0]
   21030:	b118      	cbz	r0, 2103a <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   21032:	f7fc fc0e 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   21036:	2300      	movs	r3, #0
   21038:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   2103a:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   2103c:	f500 7018 	add.w	r0, r0, #608	; 0x260
   21040:	f008 ffd2 	bl	29fe8 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   21044:	4630      	mov	r0, r6
   21046:	f7fc fc04 	bl	1d852 <net_pkt_unref>
	return NET_OK;
   2104a:	2000      	movs	r0, #0
   2104c:	e5a2      	b.n	20b94 <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   2104e:	f7fa ff0b 	bl	1be68 <net_if_ipv6_router_rm>
   21052:	e7df      	b.n	21014 <handle_ra_input+0x4d0>
	return pkt->frags->data;
   21054:	68b3      	ldr	r3, [r6, #8]
   21056:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   21058:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   2105c:	3108      	adds	r1, #8
   2105e:	6970      	ldr	r0, [r6, #20]
   21060:	f7fa feaa 	bl	1bdb8 <net_if_ipv6_router_add>
   21064:	e7d6      	b.n	21014 <handle_ra_input+0x4d0>
   21066:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   21068:	6818      	ldr	r0, [r3, #0]
   2106a:	f7fc fbf2 	bl	1d852 <net_pkt_unref>
   2106e:	e7d9      	b.n	21024 <handle_ra_input+0x4e0>
   21070:	10624dd3 	.word	0x10624dd3

00021074 <handle_ns_input>:
{
   21074:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   21078:	b0a5      	sub	sp, #148	; 0x94
   2107a:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   2107c:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   2107e:	2200      	movs	r2, #0
   21080:	e002      	b.n	21088 <handle_ns_input+0x14>
		bytes += buf->len;
   21082:	8999      	ldrh	r1, [r3, #12]
   21084:	440a      	add	r2, r1
		buf = buf->frags;
   21086:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   21088:	2b00      	cmp	r3, #0
   2108a:	d1fa      	bne.n	21082 <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   2108c:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   2108e:	a90a      	add	r1, sp, #40	; 0x28
   21090:	4620      	mov	r0, r4
   21092:	f7fd fe51 	bl	1ed38 <net_icmpv6_get_ns_hdr>
   21096:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   21098:	4aa6      	ldr	r2, [pc, #664]	; (21334 <handle_ns_input+0x2c0>)
   2109a:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   2109e:	3301      	adds	r3, #1
   210a0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   210a4:	2d3f      	cmp	r5, #63	; 0x3f
   210a6:	d904      	bls.n	210b2 <handle_ns_input+0x3e>
	return pkt->frags->data;
   210a8:	68a3      	ldr	r3, [r4, #8]
   210aa:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   210ac:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   210ae:	2bff      	cmp	r3, #255	; 0xff
   210b0:	d002      	beq.n	210b8 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   210b2:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   210b4:	2bff      	cmp	r3, #255	; 0xff
   210b6:	d00a      	beq.n	210ce <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   210b8:	2314      	movs	r3, #20
   210ba:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   210be:	a90f      	add	r1, sp, #60	; 0x3c
   210c0:	4620      	mov	r0, r4
   210c2:	f7fd fe95 	bl	1edf0 <net_icmpv6_get_nd_opt_hdr>
   210c6:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   210c8:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   210ca:	2500      	movs	r5, #0
   210cc:	e00e      	b.n	210ec <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   210ce:	a908      	add	r1, sp, #32
   210d0:	4620      	mov	r0, r4
   210d2:	f7fd fcc2 	bl	1ea5a <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   210d6:	2800      	cmp	r0, #0
   210d8:	f000 80b7 	beq.w	2124a <handle_ns_input+0x1d6>
   210dc:	7843      	ldrb	r3, [r0, #1]
   210de:	2b00      	cmp	r3, #0
   210e0:	f040 80b3 	bne.w	2124a <handle_ns_input+0x1d6>
   210e4:	e7e8      	b.n	210b8 <handle_ns_input+0x44>
		bytes += buf->len;
   210e6:	899a      	ldrh	r2, [r3, #12]
   210e8:	4415      	add	r5, r2
		buf = buf->frags;
   210ea:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   210ec:	2b00      	cmp	r3, #0
   210ee:	d1fa      	bne.n	210e6 <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   210f0:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   210f2:	e042      	b.n	2117a <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210f4:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   210f6:	2900      	cmp	r1, #0
   210f8:	f040 80a7 	bne.w	2124a <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   210fc:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   21100:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   21104:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   21106:	4411      	add	r1, r2
   21108:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   2110a:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   2110c:	00db      	lsls	r3, r3, #3
   2110e:	b2db      	uxtb	r3, r3
   21110:	3b02      	subs	r3, #2
   21112:	b2db      	uxtb	r3, r3
   21114:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   21118:	f10d 021a 	add.w	r2, sp, #26
   2111c:	9200      	str	r2, [sp, #0]
   2111e:	f10d 0216 	add.w	r2, sp, #22
   21122:	b289      	uxth	r1, r1
   21124:	68a0      	ldr	r0, [r4, #8]
   21126:	f7fc fd12 	bl	1db4e <net_frag_read>
	if (!frag && pos == 0xffff) {
   2112a:	2800      	cmp	r0, #0
   2112c:	d042      	beq.n	211b4 <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   2112e:	f89d 3019 	ldrb.w	r3, [sp, #25]
   21132:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   21136:	f10d 021a 	add.w	r2, sp, #26
   2113a:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   2113c:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   21140:	4293      	cmp	r3, r2
   21142:	d901      	bls.n	21148 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   21144:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   21148:	68a3      	ldr	r3, [r4, #8]
   2114a:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   2114c:	2300      	movs	r3, #0
   2114e:	9300      	str	r3, [sp, #0]
   21150:	aa08      	add	r2, sp, #32
   21152:	3108      	adds	r1, #8
   21154:	6960      	ldr	r0, [r4, #20]
   21156:	f7ff fc91 	bl	20a7c <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   2115a:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   2115e:	787b      	ldrb	r3, [r7, #1]
   21160:	00db      	lsls	r3, r3, #3
   21162:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   21164:	4413      	add	r3, r2
   21166:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   21168:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   2116c:	429a      	cmp	r2, r3
   2116e:	d26c      	bcs.n	2124a <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   21170:	a90f      	add	r1, sp, #60	; 0x3c
   21172:	4620      	mov	r0, r4
   21174:	f7fd fe3c 	bl	1edf0 <net_icmpv6_get_nd_opt_hdr>
   21178:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   2117a:	b317      	cbz	r7, 211c2 <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   2117c:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   21180:	4295      	cmp	r5, r2
   21182:	d91e      	bls.n	211c2 <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   21184:	787b      	ldrb	r3, [r7, #1]
   21186:	b1e3      	cbz	r3, 211c2 <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   21188:	7839      	ldrb	r1, [r7, #0]
   2118a:	2901      	cmp	r1, #1
   2118c:	d1e5      	bne.n	2115a <handle_ns_input+0xe6>
	return pkt->frags->data;
   2118e:	68a1      	ldr	r1, [r4, #8]
   21190:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21192:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21194:	2800      	cmp	r0, #0
   21196:	d1ad      	bne.n	210f4 <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21198:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2119a:	b928      	cbnz	r0, 211a8 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2119c:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2119e:	b928      	cbnz	r0, 211ac <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   211a0:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   211a2:	b129      	cbz	r1, 211b0 <handle_ns_input+0x13c>
   211a4:	2100      	movs	r1, #0
   211a6:	e7a6      	b.n	210f6 <handle_ns_input+0x82>
   211a8:	2100      	movs	r1, #0
   211aa:	e7a4      	b.n	210f6 <handle_ns_input+0x82>
   211ac:	2100      	movs	r1, #0
   211ae:	e7a2      	b.n	210f6 <handle_ns_input+0x82>
   211b0:	2101      	movs	r1, #1
   211b2:	e7a0      	b.n	210f6 <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   211b4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   211b8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   211bc:	429a      	cmp	r2, r3
   211be:	d1b6      	bne.n	2112e <handle_ns_input+0xba>
   211c0:	e7cb      	b.n	2115a <handle_ns_input+0xe6>
	return pkt->iface;
   211c2:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   211c6:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   211ca:	2500      	movs	r5, #0
   211cc:	e001      	b.n	211d2 <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   211ce:	b9ef      	cbnz	r7, 2120c <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   211d0:	3501      	adds	r5, #1
   211d2:	2d02      	cmp	r5, #2
   211d4:	dc21      	bgt.n	2121a <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   211d6:	236c      	movs	r3, #108	; 0x6c
   211d8:	fb03 8305 	mla	r3, r3, r5, r8
   211dc:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   211e0:	2f00      	cmp	r7, #0
   211e2:	d0f5      	beq.n	211d0 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   211e4:	236c      	movs	r3, #108	; 0x6c
   211e6:	fb03 8305 	mla	r3, r3, r5, r8
   211ea:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   211ec:	2b0a      	cmp	r3, #10
   211ee:	d1ef      	bne.n	211d0 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   211f0:	216c      	movs	r1, #108	; 0x6c
   211f2:	fb01 f105 	mul.w	r1, r1, r5
   211f6:	3120      	adds	r1, #32
   211f8:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   211fa:	2210      	movs	r2, #16
   211fc:	4411      	add	r1, r2
   211fe:	4648      	mov	r0, r9
   21200:	f009 fb22 	bl	2a848 <memcmp>
   21204:	2800      	cmp	r0, #0
   21206:	d0e2      	beq.n	211ce <handle_ns_input+0x15a>
		return false;
   21208:	2700      	movs	r7, #0
   2120a:	e7e0      	b.n	211ce <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   2120c:	236c      	movs	r3, #108	; 0x6c
   2120e:	fb03 f505 	mul.w	r5, r3, r5
   21212:	3520      	adds	r5, #32
   21214:	4445      	add	r5, r8
   21216:	350c      	adds	r5, #12
   21218:	e000      	b.n	2121c <handle_ns_input+0x1a8>
	return NULL;
   2121a:	2500      	movs	r5, #0
	if (!ifaddr) {
   2121c:	b1ad      	cbz	r5, 2124a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   2121e:	68a3      	ldr	r3, [r4, #8]
   21220:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21222:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21224:	b93b      	cbnz	r3, 21236 <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21226:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21228:	b9cb      	cbnz	r3, 2125e <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2122a:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2122c:	b9cb      	cbnz	r3, 21262 <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2122e:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21230:	b1cb      	cbz	r3, 21266 <handle_ns_input+0x1f2>
   21232:	2300      	movs	r3, #0
   21234:	e000      	b.n	21238 <handle_ns_input+0x1c4>
   21236:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   21238:	2b00      	cmp	r3, #0
   2123a:	d07d      	beq.n	21338 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2123c:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2123e:	f240 23ff 	movw	r3, #767	; 0x2ff
   21242:	429a      	cmp	r2, r3
   21244:	d011      	beq.n	2126a <handle_ns_input+0x1f6>
   21246:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   21248:	bb0b      	cbnz	r3, 2128e <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   2124a:	4a3a      	ldr	r2, [pc, #232]	; (21334 <handle_ns_input+0x2c0>)
   2124c:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   21250:	3301      	adds	r3, #1
   21252:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   21256:	2002      	movs	r0, #2
}
   21258:	b025      	add	sp, #148	; 0x94
   2125a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2125e:	2300      	movs	r3, #0
   21260:	e7ea      	b.n	21238 <handle_ns_input+0x1c4>
   21262:	2300      	movs	r3, #0
   21264:	e7e8      	b.n	21238 <handle_ns_input+0x1c4>
   21266:	2301      	movs	r3, #1
   21268:	e7e6      	b.n	21238 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   2126a:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2126c:	b95b      	cbnz	r3, 21286 <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2126e:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   21270:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   21274:	d001      	beq.n	2127a <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21276:	2300      	movs	r3, #0
   21278:	e7e6      	b.n	21248 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   2127a:	6a43      	ldr	r3, [r0, #36]	; 0x24
   2127c:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2127e:	2bff      	cmp	r3, #255	; 0xff
   21280:	d003      	beq.n	2128a <handle_ns_input+0x216>
   21282:	2300      	movs	r3, #0
   21284:	e7e0      	b.n	21248 <handle_ns_input+0x1d4>
   21286:	2300      	movs	r3, #0
   21288:	e7de      	b.n	21248 <handle_ns_input+0x1d4>
   2128a:	2301      	movs	r3, #1
   2128c:	e7dc      	b.n	21248 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   2128e:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   21292:	b94b      	cbnz	r3, 212a8 <handle_ns_input+0x234>
	return pkt->iface;
   21294:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   21296:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21298:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   2129a:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2129e:	429a      	cmp	r2, r3
   212a0:	d0d3      	beq.n	2124a <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   212a2:	f7fa fb51 	bl	1b948 <net_if_ipv6_dad_failed>
   212a6:	e7d0      	b.n	2124a <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   212a8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   212ac:	7603      	strb	r3, [r0, #24]
   212ae:	2300      	movs	r3, #0
   212b0:	2202      	movs	r2, #2
   212b2:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   212b4:	7683      	strb	r3, [r0, #26]
   212b6:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   212b8:	7703      	strb	r3, [r0, #28]
   212ba:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   212bc:	7783      	strb	r3, [r0, #30]
   212be:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   212c0:	f880 3020 	strb.w	r3, [r0, #32]
   212c4:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   212c8:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   212cc:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   212d0:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   212d4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   212d8:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   212dc:	2301      	movs	r3, #1
   212de:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   212e2:	68a3      	ldr	r3, [r4, #8]
   212e4:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   212e8:	f108 0118 	add.w	r1, r8, #24
   212ec:	6960      	ldr	r0, [r4, #20]
   212ee:	f7fa fe15 	bl	1bf1c <net_if_ipv6_select_src_addr>
   212f2:	4603      	mov	r3, r0
   212f4:	ae10      	add	r6, sp, #64	; 0x40
   212f6:	6800      	ldr	r0, [r0, #0]
   212f8:	6859      	ldr	r1, [r3, #4]
   212fa:	689a      	ldr	r2, [r3, #8]
   212fc:	68db      	ldr	r3, [r3, #12]
   212fe:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   21300:	ae10      	add	r6, sp, #64	; 0x40
   21302:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21304:	f8c8 0008 	str.w	r0, [r8, #8]
   21308:	f8c8 100c 	str.w	r1, [r8, #12]
   2130c:	f8c8 2010 	str.w	r2, [r8, #16]
   21310:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   21314:	2320      	movs	r3, #32
   21316:	68a2      	ldr	r2, [r4, #8]
   21318:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   2131a:	9300      	str	r3, [sp, #0]
   2131c:	1d2b      	adds	r3, r5, #4
   2131e:	f101 0218 	add.w	r2, r1, #24
   21322:	3108      	adds	r1, #8
   21324:	6960      	ldr	r0, [r4, #20]
   21326:	f7fe ff69 	bl	201fc <net_ipv6_send_na>
	if (!ret) {
   2132a:	2800      	cmp	r0, #0
   2132c:	f000 80b5 	beq.w	2149a <handle_ns_input+0x426>
	return NET_DROP;
   21330:	2002      	movs	r0, #2
   21332:	e791      	b.n	21258 <handle_ns_input+0x1e4>
   21334:	20002b58 	.word	0x20002b58
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   21338:	2100      	movs	r1, #0
   2133a:	3008      	adds	r0, #8
   2133c:	f7fa f8d6 	bl	1b4ec <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   21340:	4607      	mov	r7, r0
   21342:	2800      	cmp	r0, #0
   21344:	d181      	bne.n	2124a <handle_ns_input+0x1d6>
   21346:	68a3      	ldr	r3, [r4, #8]
   21348:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2134c:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   21350:	f240 23ff 	movw	r3, #767	; 0x2ff
   21354:	429a      	cmp	r2, r3
   21356:	d02b      	beq.n	213b0 <handle_ns_input+0x33c>
   21358:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   2135a:	9303      	str	r3, [sp, #12]
   2135c:	2b00      	cmp	r3, #0
   2135e:	d03c      	beq.n	213da <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   21360:	af14      	add	r7, sp, #80	; 0x50
   21362:	4643      	mov	r3, r8
   21364:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21368:	6859      	ldr	r1, [r3, #4]
   2136a:	689a      	ldr	r2, [r3, #8]
   2136c:	68db      	ldr	r3, [r3, #12]
   2136e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21370:	af14      	add	r7, sp, #80	; 0x50
   21372:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   21374:	f8c8 0018 	str.w	r0, [r8, #24]
   21378:	f8c8 101c 	str.w	r1, [r8, #28]
   2137c:	f8c8 2020 	str.w	r2, [r8, #32]
   21380:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   21384:	68a3      	ldr	r3, [r4, #8]
   21386:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   2138a:	af18      	add	r7, sp, #96	; 0x60
   2138c:	f856 0f04 	ldr.w	r0, [r6, #4]!
   21390:	6871      	ldr	r1, [r6, #4]
   21392:	68b2      	ldr	r2, [r6, #8]
   21394:	68f3      	ldr	r3, [r6, #12]
   21396:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21398:	ae18      	add	r6, sp, #96	; 0x60
   2139a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   2139c:	f8ce 0008 	str.w	r0, [lr, #8]
   213a0:	f8ce 100c 	str.w	r1, [lr, #12]
   213a4:	f8ce 2010 	str.w	r2, [lr, #16]
   213a8:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   213ac:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   213ae:	e7b2      	b.n	21316 <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   213b0:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   213b4:	b96b      	cbnz	r3, 213d2 <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   213b6:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   213ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   213be:	d001      	beq.n	213c4 <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   213c0:	2300      	movs	r3, #0
   213c2:	e7ca      	b.n	2135a <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   213c4:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   213c8:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   213ca:	2bff      	cmp	r3, #255	; 0xff
   213cc:	d003      	beq.n	213d6 <handle_ns_input+0x362>
   213ce:	2300      	movs	r3, #0
   213d0:	e7c3      	b.n	2135a <handle_ns_input+0x2e6>
   213d2:	2300      	movs	r3, #0
   213d4:	e7c1      	b.n	2135a <handle_ns_input+0x2e6>
   213d6:	2301      	movs	r3, #1
   213d8:	e7bf      	b.n	2135a <handle_ns_input+0x2e6>
	return pkt->iface;
   213da:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   213de:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   213e2:	f04f 0900 	mov.w	r9, #0
   213e6:	e004      	b.n	213f2 <handle_ns_input+0x37e>
		return false;
   213e8:	f8dd b00c 	ldr.w	fp, [sp, #12]
   213ec:	e01e      	b.n	2142c <handle_ns_input+0x3b8>
   213ee:	f109 0901 	add.w	r9, r9, #1
   213f2:	f1b9 0f02 	cmp.w	r9, #2
   213f6:	dc22      	bgt.n	2143e <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   213f8:	236c      	movs	r3, #108	; 0x6c
   213fa:	fb03 a309 	mla	r3, r3, r9, sl
   213fe:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   21402:	f1bb 0f00 	cmp.w	fp, #0
   21406:	d0f2      	beq.n	213ee <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   21408:	236c      	movs	r3, #108	; 0x6c
   2140a:	fb03 a309 	mla	r3, r3, r9, sl
   2140e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   21410:	2b0a      	cmp	r3, #10
   21412:	d1ec      	bne.n	213ee <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   21414:	216c      	movs	r1, #108	; 0x6c
   21416:	fb01 f109 	mul.w	r1, r1, r9
   2141a:	3120      	adds	r1, #32
   2141c:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   2141e:	2210      	movs	r2, #16
   21420:	4411      	add	r1, r2
   21422:	4640      	mov	r0, r8
   21424:	f009 fa10 	bl	2a848 <memcmp>
   21428:	2800      	cmp	r0, #0
   2142a:	d1dd      	bne.n	213e8 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   2142c:	f1bb 0f00 	cmp.w	fp, #0
   21430:	d0dd      	beq.n	213ee <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   21432:	276c      	movs	r7, #108	; 0x6c
   21434:	fb07 f709 	mul.w	r7, r7, r9
   21438:	3720      	adds	r7, #32
   2143a:	4457      	add	r7, sl
   2143c:	370c      	adds	r7, #12
   2143e:	2f00      	cmp	r7, #0
   21440:	f43f af03 	beq.w	2124a <handle_ns_input+0x1d6>
	return pkt->frags->data;
   21444:	68a3      	ldr	r3, [r4, #8]
   21446:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   2144a:	af1c      	add	r7, sp, #112	; 0x70
   2144c:	4663      	mov	r3, ip
   2144e:	f853 0f08 	ldr.w	r0, [r3, #8]!
   21452:	6859      	ldr	r1, [r3, #4]
   21454:	689a      	ldr	r2, [r3, #8]
   21456:	68db      	ldr	r3, [r3, #12]
   21458:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   2145a:	af1c      	add	r7, sp, #112	; 0x70
   2145c:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2145e:	f8cc 0018 	str.w	r0, [ip, #24]
   21462:	f8cc 101c 	str.w	r1, [ip, #28]
   21466:	f8cc 2020 	str.w	r2, [ip, #32]
   2146a:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   2146e:	68a3      	ldr	r3, [r4, #8]
   21470:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   21474:	af20      	add	r7, sp, #128	; 0x80
   21476:	f856 0f04 	ldr.w	r0, [r6, #4]!
   2147a:	6871      	ldr	r1, [r6, #4]
   2147c:	68b2      	ldr	r2, [r6, #8]
   2147e:	68f3      	ldr	r3, [r6, #12]
   21480:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   21482:	ae20      	add	r6, sp, #128	; 0x80
   21484:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   21486:	f8ce 0008 	str.w	r0, [lr, #8]
   2148a:	f8ce 100c 	str.w	r1, [lr, #12]
   2148e:	f8ce 2010 	str.w	r2, [lr, #16]
   21492:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   21496:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   21498:	e73d      	b.n	21316 <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   2149a:	4620      	mov	r0, r4
   2149c:	f7fc f9d9 	bl	1d852 <net_pkt_unref>
		return NET_OK;
   214a0:	2000      	movs	r0, #0
   214a2:	e6d9      	b.n	21258 <handle_ns_input+0x1e4>

000214a4 <nd_reachable_timeout>:
{
   214a4:	b530      	push	{r4, r5, lr}
   214a6:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   214a8:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   214ac:	2300      	movs	r3, #0
   214ae:	2b07      	cmp	r3, #7
   214b0:	dc07      	bgt.n	214c2 <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   214b2:	4c47      	ldr	r4, [pc, #284]	; (215d0 <nd_reachable_timeout+0x12c>)
   214b4:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   214b8:	68e2      	ldr	r2, [r4, #12]
   214ba:	4295      	cmp	r5, r2
   214bc:	d002      	beq.n	214c4 <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   214be:	3301      	adds	r3, #1
   214c0:	e7f5      	b.n	214ae <nd_reachable_timeout+0xa>
	return NULL;
   214c2:	2400      	movs	r4, #0
	if (!data || !nbr) {
   214c4:	b38d      	cbz	r5, 2152a <nd_reachable_timeout+0x86>
   214c6:	b384      	cbz	r4, 2152a <nd_reachable_timeout+0x86>
   214c8:	4603      	mov	r3, r0
	switch (data->state) {
   214ca:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   214ce:	2a04      	cmp	r2, #4
   214d0:	d82b      	bhi.n	2152a <nd_reachable_timeout+0x86>
   214d2:	e8df f002 	tbb	[pc, r2]
   214d6:	2703      	.short	0x2703
   214d8:	3f2c      	.short	0x3f2c
   214da:	45          	.byte	0x45
   214db:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   214dc:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   214e0:	2a02      	cmp	r2, #2
   214e2:	d912      	bls.n	2150a <nd_reachable_timeout+0x66>
   214e4:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   214e6:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   214ea:	f008 fd7d 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   214ee:	6828      	ldr	r0, [r5, #0]
   214f0:	b118      	cbz	r0, 214fa <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   214f2:	f7fc f9ae 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   214f6:	2300      	movs	r3, #0
   214f8:	602b      	str	r3, [r5, #0]
   214fa:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   214fc:	3014      	adds	r0, #20
   214fe:	f008 fd73 	bl	29fe8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   21502:	4620      	mov	r0, r4
   21504:	f7fd ffa6 	bl	1f454 <net_nbr_unref>
   21508:	e00f      	b.n	2152a <nd_reachable_timeout+0x86>
			data->ns_count++;
   2150a:	3201      	adds	r2, #1
   2150c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   21510:	68a0      	ldr	r0, [r4, #8]
   21512:	2100      	movs	r1, #0
   21514:	9101      	str	r1, [sp, #4]
   21516:	3b10      	subs	r3, #16
   21518:	9300      	str	r3, [sp, #0]
   2151a:	460b      	mov	r3, r1
   2151c:	460a      	mov	r2, r1
   2151e:	f7ff f927 	bl	20770 <net_ipv6_send_ns>
   21522:	e002      	b.n	2152a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   21524:	2202      	movs	r2, #2
   21526:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   2152a:	b003      	add	sp, #12
   2152c:	bd30      	pop	{r4, r5, pc}
   2152e:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21530:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21534:	f008 fd58 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   21538:	6828      	ldr	r0, [r5, #0]
   2153a:	b118      	cbz	r0, 21544 <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   2153c:	f7fc f989 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   21540:	2300      	movs	r3, #0
   21542:	602b      	str	r3, [r5, #0]
   21544:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   21546:	3014      	adds	r0, #20
   21548:	f008 fd4e 	bl	29fe8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   2154c:	4620      	mov	r0, r4
   2154e:	f7fd ff81 	bl	1f454 <net_nbr_unref>
   21552:	e7ea      	b.n	2152a <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   21554:	2204      	movs	r2, #4
   21556:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   2155a:	2200      	movs	r2, #0
   2155c:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   21560:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   21564:	2a02      	cmp	r2, #2
   21566:	d91f      	bls.n	215a8 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   21568:	f1a3 0110 	sub.w	r1, r3, #16
   2156c:	68a0      	ldr	r0, [r4, #8]
   2156e:	f7fa fbbf 	bl	1bcf0 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   21572:	2800      	cmp	r0, #0
   21574:	d0d9      	beq.n	2152a <nd_reachable_timeout+0x86>
   21576:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   2157a:	2a00      	cmp	r2, #0
   2157c:	d1d5      	bne.n	2152a <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   2157e:	f7fa fc73 	bl	1be68 <net_if_ipv6_router_rm>
   21582:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   21584:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   21588:	f008 fd2e 	bl	29fe8 <k_delayed_work_cancel>
	if (data->pending) {
   2158c:	6828      	ldr	r0, [r5, #0]
   2158e:	b118      	cbz	r0, 21598 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   21590:	f7fc f95f 	bl	1d852 <net_pkt_unref>
		data->pending = NULL;
   21594:	2300      	movs	r3, #0
   21596:	602b      	str	r3, [r5, #0]
   21598:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   2159a:	3014      	adds	r0, #20
   2159c:	f008 fd24 	bl	29fe8 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   215a0:	4620      	mov	r0, r4
   215a2:	f7fd ff57 	bl	1f454 <net_nbr_unref>
   215a6:	e7c0      	b.n	2152a <nd_reachable_timeout+0x86>
			data->ns_count++;
   215a8:	3201      	adds	r2, #1
   215aa:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   215ae:	68a0      	ldr	r0, [r4, #8]
   215b0:	2100      	movs	r1, #0
   215b2:	9101      	str	r1, [sp, #4]
   215b4:	3b10      	subs	r3, #16
   215b6:	9300      	str	r3, [sp, #0]
   215b8:	460b      	mov	r3, r1
   215ba:	460a      	mov	r2, r1
   215bc:	f7ff f8d8 	bl	20770 <net_ipv6_send_ns>
   215c0:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   215c2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   215c6:	3114      	adds	r1, #20
   215c8:	4802      	ldr	r0, [pc, #8]	; (215d4 <nd_reachable_timeout+0x130>)
   215ca:	f008 fd67 	bl	2a09c <k_delayed_work_submit_to_queue>
   215ce:	e7ac      	b.n	2152a <nd_reachable_timeout+0x86>
   215d0:	2000bf60 	.word	0x2000bf60
   215d4:	20002c78 	.word	0x20002c78

000215d8 <net_ipv6_start_dad>:
{
   215d8:	b500      	push	{lr}
   215da:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   215dc:	2301      	movs	r3, #1
   215de:	9301      	str	r3, [sp, #4]
   215e0:	3104      	adds	r1, #4
   215e2:	9100      	str	r1, [sp, #0]
   215e4:	2300      	movs	r3, #0
   215e6:	461a      	mov	r2, r3
   215e8:	4619      	mov	r1, r3
   215ea:	f7ff f8c1 	bl	20770 <net_ipv6_send_ns>
}
   215ee:	b003      	add	sp, #12
   215f0:	f85d fb04 	ldr.w	pc, [sp], #4

000215f4 <net_ipv6_prepare_for_send>:
{
   215f4:	b570      	push	{r4, r5, r6, lr}
   215f6:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   215f8:	2300      	movs	r3, #0
   215fa:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   215fc:	6943      	ldr	r3, [r0, #20]
   215fe:	f3bf 8f5b 	dmb	ish
   21602:	68db      	ldr	r3, [r3, #12]
   21604:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   21608:	f013 0f02 	tst.w	r3, #2
   2160c:	d108      	bne.n	21620 <net_ipv6_prepare_for_send+0x2c>
   2160e:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   21610:	6a83      	ldr	r3, [r0, #40]	; 0x28
   21612:	b13b      	cbz	r3, 21624 <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   21614:	68a3      	ldr	r3, [r4, #8]
   21616:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   21618:	3118      	adds	r1, #24
   2161a:	4620      	mov	r0, r4
   2161c:	f7fe f9e6 	bl	1f9ec <update_ll_reserve>
}
   21620:	b004      	add	sp, #16
   21622:	bd70      	pop	{r4, r5, r6, pc}
   21624:	6883      	ldr	r3, [r0, #8]
   21626:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21628:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   2162a:	2bff      	cmp	r3, #255	; 0xff
   2162c:	d0f2      	beq.n	21614 <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   2162e:	3118      	adds	r1, #24
   21630:	a803      	add	r0, sp, #12
   21632:	f7fa fa9d 	bl	1bb70 <net_if_ipv6_addr_onlink>
   21636:	b348      	cbz	r0, 2168c <net_ipv6_prepare_for_send+0x98>
   21638:	68a3      	ldr	r3, [r4, #8]
   2163a:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   2163c:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   2163e:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   21640:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21642:	7d5a      	ldrb	r2, [r3, #21]
   21644:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21648:	7d5b      	ldrb	r3, [r3, #21]
   2164a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   2164e:	9b03      	ldr	r3, [sp, #12]
   21650:	2b00      	cmp	r3, #0
   21652:	d03e      	beq.n	216d2 <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   21654:	462a      	mov	r2, r5
   21656:	6961      	ldr	r1, [r4, #20]
   21658:	4832      	ldr	r0, [pc, #200]	; (21724 <net_ipv6_prepare_for_send+0x130>)
   2165a:	f7fe f90d 	bl	1f878 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   2165e:	4606      	mov	r6, r0
   21660:	2800      	cmp	r0, #0
   21662:	d051      	beq.n	21708 <net_ipv6_prepare_for_send+0x114>
   21664:	7840      	ldrb	r0, [r0, #1]
   21666:	28ff      	cmp	r0, #255	; 0xff
   21668:	d04e      	beq.n	21708 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   2166a:	f7fd ff85 	bl	1f578 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   2166e:	1c83      	adds	r3, r0, #2
   21670:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   21672:	7843      	ldrb	r3, [r0, #1]
   21674:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   21678:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   2167a:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   2167e:	2b02      	cmp	r3, #2
   21680:	d036      	beq.n	216f0 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   21682:	4629      	mov	r1, r5
   21684:	4620      	mov	r0, r4
   21686:	f7fe f9b1 	bl	1f9ec <update_ll_reserve>
   2168a:	e7c9      	b.n	21620 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   2168c:	68a3      	ldr	r3, [r4, #8]
   2168e:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   21690:	3118      	adds	r1, #24
   21692:	2000      	movs	r0, #0
   21694:	f001 fb26 	bl	22ce4 <net_route_lookup>
		if (route) {
   21698:	4606      	mov	r6, r0
   2169a:	b160      	cbz	r0, 216b6 <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   2169c:	f001 fc06 	bl	22eac <net_route_get_nexthop>
			if (!nexthop) {
   216a0:	4605      	mov	r5, r0
   216a2:	2800      	cmp	r0, #0
   216a4:	d1d3      	bne.n	2164e <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   216a6:	4630      	mov	r0, r6
   216a8:	f001 fbac 	bl	22e04 <net_route_del>
				net_pkt_unref(pkt);
   216ac:	4620      	mov	r0, r4
   216ae:	f7fc f8d0 	bl	1d852 <net_pkt_unref>
				return NULL;
   216b2:	2000      	movs	r0, #0
   216b4:	e7b4      	b.n	21620 <net_ipv6_prepare_for_send+0x2c>
   216b6:	68a3      	ldr	r3, [r4, #8]
   216b8:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   216ba:	3118      	adds	r1, #24
   216bc:	2000      	movs	r0, #0
   216be:	f7fa fb47 	bl	1bd50 <net_if_ipv6_router_find_default>
			if (!router) {
   216c2:	4605      	mov	r5, r0
   216c4:	b108      	cbz	r0, 216ca <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   216c6:	352c      	adds	r5, #44	; 0x2c
   216c8:	e7c1      	b.n	2164e <net_ipv6_prepare_for_send+0x5a>
   216ca:	68a3      	ldr	r3, [r4, #8]
   216cc:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   216ce:	3518      	adds	r5, #24
				goto try_send;
   216d0:	e7c0      	b.n	21654 <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   216d2:	4629      	mov	r1, r5
   216d4:	a803      	add	r0, sp, #12
   216d6:	f7fa fa4b 	bl	1bb70 <net_if_ipv6_addr_onlink>
   216da:	2800      	cmp	r0, #0
   216dc:	d0ba      	beq.n	21654 <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   216de:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   216e0:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   216e2:	7d5a      	ldrb	r2, [r3, #21]
   216e4:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   216e8:	7d5b      	ldrb	r3, [r3, #21]
   216ea:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   216ee:	e7b1      	b.n	21654 <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   216f0:	2103      	movs	r1, #3
   216f2:	4630      	mov	r0, r6
   216f4:	f7fd ff48 	bl	1f588 <ipv6_nbr_set_state>
   216f8:	68f1      	ldr	r1, [r6, #12]
   216fa:	f241 3288 	movw	r2, #5000	; 0x1388
   216fe:	3114      	adds	r1, #20
   21700:	4809      	ldr	r0, [pc, #36]	; (21728 <net_ipv6_prepare_for_send+0x134>)
   21702:	f008 fccb 	bl	2a09c <k_delayed_work_submit_to_queue>
   21706:	e7bc      	b.n	21682 <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   21708:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   2170a:	68a3      	ldr	r3, [r4, #8]
   2170c:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   2170e:	2600      	movs	r6, #0
   21710:	9601      	str	r6, [sp, #4]
   21712:	9500      	str	r5, [sp, #0]
   21714:	4633      	mov	r3, r6
   21716:	3208      	adds	r2, #8
   21718:	4621      	mov	r1, r4
   2171a:	f7ff f829 	bl	20770 <net_ipv6_send_ns>
		return NULL;
   2171e:	4630      	mov	r0, r6
   21720:	e77e      	b.n	21620 <net_ipv6_prepare_for_send+0x2c>
   21722:	bf00      	nop
   21724:	2000bf54 	.word	0x2000bf54
   21728:	20002c78 	.word	0x20002c78

0002172c <net_ipv6_send_rs>:
{
   2172c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   21730:	b084      	sub	sp, #16
   21732:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   21734:	6843      	ldr	r3, [r0, #4]
   21736:	689b      	ldr	r3, [r3, #8]
   21738:	2100      	movs	r1, #0
   2173a:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   2173c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21740:	f7fc f816 	bl	1d770 <net_pkt_get_reserve_tx>
   21744:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21746:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2174a:	f7fc f82f 	bl	1d7ac <net_pkt_get_frag>
   2174e:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   21750:	4601      	mov	r1, r0
   21752:	4620      	mov	r0, r4
   21754:	f7fc f8a7 	bl	1d8a6 <net_pkt_frag_add>
	pkt->iface = iface;
   21758:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   2175a:	7d6b      	ldrb	r3, [r5, #21]
   2175c:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21760:	7d6b      	ldrb	r3, [r5, #21]
   21762:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   21766:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2176a:	220a      	movs	r2, #10
   2176c:	f362 03c6 	bfi	r3, r2, #3, #4
   21770:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   21774:	2328      	movs	r3, #40	; 0x28
   21776:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   2177a:	68a3      	ldr	r3, [r4, #8]
   2177c:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   2177e:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   21782:	461a      	mov	r2, r3
   21784:	2100      	movs	r1, #0
   21786:	1ac0      	subs	r0, r0, r3
   21788:	f009 f8f2 	bl	2a970 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   2178c:	2200      	movs	r2, #0
   2178e:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   21790:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   21794:	68a3      	ldr	r3, [r4, #8]
   21796:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   21798:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2179c:	7619      	strb	r1, [r3, #24]
   2179e:	2102      	movs	r1, #2
   217a0:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   217a2:	769a      	strb	r2, [r3, #26]
   217a4:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   217a6:	771a      	strb	r2, [r3, #28]
   217a8:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   217aa:	779a      	strb	r2, [r3, #30]
   217ac:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   217ae:	f883 2020 	strb.w	r2, [r3, #32]
   217b2:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   217b6:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   217ba:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   217be:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   217c2:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   217c6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   217ca:	2201      	movs	r2, #1
   217cc:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   217d0:	68a3      	ldr	r3, [r4, #8]
   217d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   217d6:	f108 0118 	add.w	r1, r8, #24
   217da:	4628      	mov	r0, r5
   217dc:	f7fa fb9e 	bl	1bf1c <net_if_ipv6_select_src_addr>
   217e0:	4603      	mov	r3, r0
   217e2:	466d      	mov	r5, sp
   217e4:	6800      	ldr	r0, [r0, #0]
   217e6:	6859      	ldr	r1, [r3, #4]
   217e8:	689a      	ldr	r2, [r3, #8]
   217ea:	68db      	ldr	r3, [r3, #12]
   217ec:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   217ee:	466d      	mov	r5, sp
   217f0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   217f2:	f8c8 0008 	str.w	r0, [r8, #8]
   217f6:	f8c8 100c 	str.w	r1, [r8, #12]
   217fa:	f8c8 2010 	str.w	r2, [r8, #16]
   217fe:	f8c8 3014 	str.w	r3, [r8, #20]
   21802:	68a3      	ldr	r3, [r4, #8]
   21804:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21806:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21808:	b93a      	cbnz	r2, 2181a <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2180a:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2180c:	b982      	cbnz	r2, 21830 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2180e:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21810:	b982      	cbnz	r2, 21834 <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21812:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21814:	b183      	cbz	r3, 21838 <net_ipv6_send_rs+0x10c>
   21816:	2300      	movs	r3, #0
   21818:	e000      	b.n	2181c <net_ipv6_send_rs+0xf0>
   2181a:	2300      	movs	r3, #0
	if (!unspec_src) {
   2181c:	461f      	mov	r7, r3
   2181e:	b97b      	cbnz	r3, 21840 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   21820:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   21822:	7d1b      	ldrb	r3, [r3, #20]
   21824:	2b06      	cmp	r3, #6
   21826:	d02a      	beq.n	2187e <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   21828:	2b08      	cmp	r3, #8
   2182a:	d007      	beq.n	2183c <net_ipv6_send_rs+0x110>
	return 0;
   2182c:	2500      	movs	r5, #0
   2182e:	e008      	b.n	21842 <net_ipv6_send_rs+0x116>
   21830:	2300      	movs	r3, #0
   21832:	e7f3      	b.n	2181c <net_ipv6_send_rs+0xf0>
   21834:	2300      	movs	r3, #0
   21836:	e7f1      	b.n	2181c <net_ipv6_send_rs+0xf0>
   21838:	2301      	movs	r3, #1
   2183a:	e7ef      	b.n	2181c <net_ipv6_send_rs+0xf0>
		return 16;
   2183c:	2510      	movs	r5, #16
   2183e:	e000      	b.n	21842 <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   21840:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   21842:	2285      	movs	r2, #133	; 0x85
   21844:	1d29      	adds	r1, r5, #4
   21846:	4620      	mov	r0, r4
   21848:	f7fe f92f 	bl	1faaa <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   2184c:	3608      	adds	r6, #8
   2184e:	2104      	movs	r1, #4
   21850:	4630      	mov	r0, r6
   21852:	f7f9 fadb 	bl	1ae0c <net_buf_simple_add>
	if (!unspec_src) {
   21856:	b1a7      	cbz	r7, 21882 <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   21858:	68a1      	ldr	r1, [r4, #8]
   2185a:	4620      	mov	r0, r4
   2185c:	f7fd f8b0 	bl	1e9c0 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   21860:	4620      	mov	r0, r4
   21862:	f7f9 fbf5 	bl	1b050 <net_send_data>
   21866:	2800      	cmp	r0, #0
   21868:	db2b      	blt.n	218c2 <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   2186a:	4a1c      	ldr	r2, [pc, #112]	; (218dc <net_ipv6_send_rs+0x1b0>)
   2186c:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   21870:	3301      	adds	r3, #1
   21872:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   21876:	2000      	movs	r0, #0
}
   21878:	b004      	add	sp, #16
   2187a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   2187e:	2508      	movs	r5, #8
   21880:	e7df      	b.n	21842 <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   21882:	4629      	mov	r1, r5
   21884:	4630      	mov	r0, r6
   21886:	f7f9 fac1 	bl	1ae0c <net_buf_simple_add>
   2188a:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   2188e:	4620      	mov	r0, r4
   21890:	f7fc fab8 	bl	1de04 <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   21894:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   21898:	2301      	movs	r3, #1
   2189a:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   2189c:	08eb      	lsrs	r3, r5, #3
   2189e:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   218a0:	f898 2014 	ldrb.w	r2, [r8, #20]
   218a4:	f8d8 1010 	ldr.w	r1, [r8, #16]
   218a8:	300a      	adds	r0, #10
   218aa:	f7de fd09 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   218ae:	f898 2014 	ldrb.w	r2, [r8, #20]
   218b2:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   218b4:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   218b6:	3a02      	subs	r2, #2
   218b8:	2100      	movs	r1, #0
   218ba:	4430      	add	r0, r6
   218bc:	f009 f858 	bl	2a970 <memset>
   218c0:	e7ca      	b.n	21858 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   218c2:	4620      	mov	r0, r4
   218c4:	f7fb ffc5 	bl	1d852 <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   218c8:	4a04      	ldr	r2, [pc, #16]	; (218dc <net_ipv6_send_rs+0x1b0>)
   218ca:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   218ce:	3301      	adds	r3, #1
   218d0:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   218d4:	f06f 0015 	mvn.w	r0, #21
   218d8:	e7ce      	b.n	21878 <net_ipv6_send_rs+0x14c>
   218da:	bf00      	nop
   218dc:	20002b58 	.word	0x20002b58

000218e0 <net_ipv6_start_rs>:
{
   218e0:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   218e2:	f7ff ff23 	bl	2172c <net_ipv6_send_rs>
}
   218e6:	bd08      	pop	{r3, pc}

000218e8 <net_ipv6_mld_join>:
{
   218e8:	b570      	push	{r4, r5, r6, lr}
   218ea:	b082      	sub	sp, #8
   218ec:	ab02      	add	r3, sp, #8
   218ee:	f843 0d04 	str.w	r0, [r3, #-4]!
   218f2:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   218f4:	4619      	mov	r1, r3
   218f6:	4628      	mov	r0, r5
   218f8:	f7fa f842 	bl	1b980 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   218fc:	4604      	mov	r4, r0
   218fe:	b118      	cbz	r0, 21908 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   21900:	7803      	ldrb	r3, [r0, #0]
   21902:	f013 0f02 	tst.w	r3, #2
   21906:	d123      	bne.n	21950 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   21908:	b1c4      	cbz	r4, 2193c <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   2190a:	2202      	movs	r2, #2
   2190c:	4629      	mov	r1, r5
   2190e:	9801      	ldr	r0, [sp, #4]
   21910:	f7fe fb5a 	bl	1ffc8 <send_mldv2>
	if (ret < 0) {
   21914:	1e06      	subs	r6, r0, #0
   21916:	db0e      	blt.n	21936 <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   21918:	7823      	ldrb	r3, [r4, #0]
   2191a:	f043 0302 	orr.w	r3, r3, #2
   2191e:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   21920:	2201      	movs	r2, #1
   21922:	4629      	mov	r1, r5
   21924:	9801      	ldr	r0, [sp, #4]
   21926:	f7fa f877 	bl	1ba18 <net_if_mcast_monitor>
   2192a:	2300      	movs	r3, #0
   2192c:	461a      	mov	r2, r3
   2192e:	9901      	ldr	r1, [sp, #4]
   21930:	4809      	ldr	r0, [pc, #36]	; (21958 <net_ipv6_mld_join+0x70>)
   21932:	f001 fc01 	bl	23138 <net_mgmt_event_notify_with_info>
}
   21936:	4630      	mov	r0, r6
   21938:	b002      	add	sp, #8
   2193a:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   2193c:	4629      	mov	r1, r5
   2193e:	9801      	ldr	r0, [sp, #4]
   21940:	f7f9 ff32 	bl	1b7a8 <net_if_ipv6_maddr_add>
		if (!maddr) {
   21944:	4604      	mov	r4, r0
   21946:	2800      	cmp	r0, #0
   21948:	d1df      	bne.n	2190a <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   2194a:	f06f 060b 	mvn.w	r6, #11
   2194e:	e7f2      	b.n	21936 <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   21950:	f06f 0677 	mvn.w	r6, #119	; 0x77
   21954:	e7ef      	b.n	21936 <net_ipv6_mld_join+0x4e>
   21956:	bf00      	nop
   21958:	f0600007 	.word	0xf0600007

0002195c <net_ipv6_mld_leave>:
{
   2195c:	b570      	push	{r4, r5, r6, lr}
   2195e:	4604      	mov	r4, r0
   21960:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   21962:	f7f9 ff5d 	bl	1b820 <net_if_ipv6_maddr_rm>
   21966:	b198      	cbz	r0, 21990 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   21968:	2201      	movs	r2, #1
   2196a:	4629      	mov	r1, r5
   2196c:	4620      	mov	r0, r4
   2196e:	f7fe fb2b 	bl	1ffc8 <send_mldv2>
	if (ret < 0) {
   21972:	1e06      	subs	r6, r0, #0
   21974:	db0a      	blt.n	2198c <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   21976:	2200      	movs	r2, #0
   21978:	4629      	mov	r1, r5
   2197a:	4620      	mov	r0, r4
   2197c:	f7fa f84c 	bl	1ba18 <net_if_mcast_monitor>
   21980:	2300      	movs	r3, #0
   21982:	461a      	mov	r2, r3
   21984:	4621      	mov	r1, r4
   21986:	4804      	ldr	r0, [pc, #16]	; (21998 <net_ipv6_mld_leave+0x3c>)
   21988:	f001 fbd6 	bl	23138 <net_mgmt_event_notify_with_info>
}
   2198c:	4630      	mov	r0, r6
   2198e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   21990:	f06f 0615 	mvn.w	r6, #21
   21994:	e7fa      	b.n	2198c <net_ipv6_mld_leave+0x30>
   21996:	bf00      	nop
   21998:	f0600008 	.word	0xf0600008

0002199c <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   2199c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219a0:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   219a2:	6884      	ldr	r4, [r0, #8]
   219a4:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   219a6:	2300      	movs	r3, #0
   219a8:	e002      	b.n	219b0 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   219aa:	89a2      	ldrh	r2, [r4, #12]
   219ac:	4413      	add	r3, r2
		buf = buf->frags;
   219ae:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   219b0:	2c00      	cmp	r4, #0
   219b2:	d1fa      	bne.n	219aa <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   219b4:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   219b6:	7939      	ldrb	r1, [r7, #4]
   219b8:	797a      	ldrb	r2, [r7, #5]
   219ba:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   219be:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   219c0:	4293      	cmp	r3, r2
   219c2:	d007      	beq.n	219d4 <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   219c4:	4abd      	ldr	r2, [pc, #756]	; (21cbc <net_ipv6_process_pkt+0x320>)
   219c6:	6b13      	ldr	r3, [r2, #48]	; 0x30
   219c8:	3301      	adds	r3, #1
   219ca:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   219cc:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   219ce:	b009      	add	sp, #36	; 0x24
   219d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   219d4:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   219d6:	2bff      	cmp	r3, #255	; 0xff
   219d8:	d105      	bne.n	219e6 <net_ipv6_process_pkt+0x4a>
   219da:	4ab8      	ldr	r2, [pc, #736]	; (21cbc <net_ipv6_process_pkt+0x320>)
   219dc:	6b13      	ldr	r3, [r2, #48]	; 0x30
   219de:	3301      	adds	r3, #1
   219e0:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   219e2:	2002      	movs	r0, #2
   219e4:	e7f3      	b.n	219ce <net_ipv6_process_pkt+0x32>
   219e6:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   219e8:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   219ec:	2100      	movs	r1, #0
   219ee:	4640      	mov	r0, r8
   219f0:	f7f9 fd7c 	bl	1b4ec <net_if_ipv6_addr_lookup>
   219f4:	2800      	cmp	r0, #0
   219f6:	d06f      	beq.n	21ad8 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   219f8:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   219fa:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   219fc:	2300      	movs	r3, #0
   219fe:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   21a02:	2328      	movs	r3, #40	; 0x28
   21a04:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   21a08:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21a0c:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21a10:	f000 80b0 	beq.w	21b74 <net_ipv6_process_pkt+0x1d8>
   21a14:	f1b9 0f11 	cmp.w	r9, #17
   21a18:	f000 80ae 	beq.w	21b78 <net_ipv6_process_pkt+0x1dc>
   21a1c:	f1b9 0f06 	cmp.w	r9, #6
   21a20:	f000 80a6 	beq.w	21b70 <net_ipv6_process_pkt+0x1d4>
   21a24:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   21a26:	2b00      	cmp	r3, #0
   21a28:	f040 8166 	bne.w	21cf8 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   21a2c:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   21a30:	2328      	movs	r3, #40	; 0x28
   21a32:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   21a36:	464f      	mov	r7, r9
	ext_bitmap = 0;
   21a38:	2300      	movs	r3, #0
   21a3a:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   21a3c:	9302      	str	r3, [sp, #8]
   21a3e:	46a3      	mov	fp, r4
   21a40:	4654      	mov	r4, sl
	while (frag) {
   21a42:	2c00      	cmp	r4, #0
   21a44:	f000 8156 	beq.w	21cf4 <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21a48:	2f3a      	cmp	r7, #58	; 0x3a
   21a4a:	f000 8099 	beq.w	21b80 <net_ipv6_process_pkt+0x1e4>
   21a4e:	2f11      	cmp	r7, #17
   21a50:	f000 8098 	beq.w	21b84 <net_ipv6_process_pkt+0x1e8>
   21a54:	2f06      	cmp	r7, #6
   21a56:	f000 8091 	beq.w	21b7c <net_ipv6_process_pkt+0x1e0>
   21a5a:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   21a5c:	2b00      	cmp	r3, #0
   21a5e:	f040 8093 	bne.w	21b88 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   21a62:	f10d 0820 	add.w	r8, sp, #32
   21a66:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   21a6a:	f10d 031f 	add.w	r3, sp, #31
   21a6e:	9300      	str	r3, [sp, #0]
   21a70:	2301      	movs	r3, #1
   21a72:	4642      	mov	r2, r8
   21a74:	4620      	mov	r0, r4
   21a76:	f7fc f86a 	bl	1db4e <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   21a7a:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   21a7e:	f10d 031e 	add.w	r3, sp, #30
   21a82:	9300      	str	r3, [sp, #0]
   21a84:	2301      	movs	r3, #1
   21a86:	4642      	mov	r2, r8
   21a88:	f7fc f861 	bl	1db4e <net_frag_read>
		if (!frag && offset == 0xffff) {
   21a8c:	4604      	mov	r4, r0
   21a8e:	2800      	cmp	r0, #0
   21a90:	f000 8081 	beq.w	21b96 <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   21a94:	f89d 801e 	ldrb.w	r8, [sp, #30]
   21a98:	f108 0801 	add.w	r8, r8, #1
   21a9c:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   21aa0:	fa5f f888 	uxtb.w	r8, r8
   21aa4:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   21aa8:	fa1f f888 	uxth.w	r8, r8
   21aac:	9b02      	ldr	r3, [sp, #8]
   21aae:	4443      	add	r3, r8
   21ab0:	b29b      	uxth	r3, r3
   21ab2:	9302      	str	r3, [sp, #8]
		switch (next) {
   21ab4:	2f00      	cmp	r7, #0
   21ab6:	d077      	beq.n	21ba8 <net_ipv6_process_pkt+0x20c>
   21ab8:	2f3b      	cmp	r7, #59	; 0x3b
   21aba:	d073      	beq.n	21ba4 <net_ipv6_process_pkt+0x208>
			      offset - 1);
   21abc:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21ac0:	3b01      	subs	r3, #1
   21ac2:	2201      	movs	r2, #1
   21ac4:	2104      	movs	r1, #4
   21ac6:	4628      	mov	r0, r5
   21ac8:	f7fd fa88 	bl	1efdc <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   21acc:	4a7b      	ldr	r2, [pc, #492]	; (21cbc <net_ipv6_process_pkt+0x320>)
   21ace:	6a13      	ldr	r3, [r2, #32]
   21ad0:	3301      	adds	r3, #1
   21ad2:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   21ad4:	2002      	movs	r0, #2
   21ad6:	e77a      	b.n	219ce <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   21ad8:	2100      	movs	r1, #0
   21ada:	4640      	mov	r0, r8
   21adc:	f7f9 ff50 	bl	1b980 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   21ae0:	2800      	cmp	r0, #0
   21ae2:	d189      	bne.n	219f8 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   21ae4:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   21ae6:	2bff      	cmp	r3, #255	; 0xff
   21ae8:	d086      	beq.n	219f8 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21aea:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21aee:	bb8b      	cbnz	r3, 21b54 <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21af0:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21af4:	bb83      	cbnz	r3, 21b58 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21af6:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21afa:	bb7b      	cbnz	r3, 21b5c <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   21afc:	f8d8 200c 	ldr.w	r2, [r8, #12]
   21b00:	0a13      	lsrs	r3, r2, #8
   21b02:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   21b06:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   21b0a:	0211      	lsls	r1, r2, #8
   21b0c:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   21b10:	430b      	orrs	r3, r1
   21b12:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21b16:	2b01      	cmp	r3, #1
   21b18:	d022      	beq.n	21b60 <net_ipv6_process_pkt+0x1c4>
   21b1a:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   21b1c:	2b00      	cmp	r3, #0
   21b1e:	f47f af6b 	bne.w	219f8 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   21b22:	ab06      	add	r3, sp, #24
   21b24:	aa05      	add	r2, sp, #20
   21b26:	4641      	mov	r1, r8
   21b28:	6968      	ldr	r0, [r5, #20]
   21b2a:	f001 f9f5 	bl	22f18 <net_route_get_info>
   21b2e:	b1c8      	cbz	r0, 21b64 <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21b30:	9b05      	ldr	r3, [sp, #20]
   21b32:	b13b      	cbz	r3, 21b44 <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   21b34:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   21b36:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21b38:	7d5a      	ldrb	r2, [r3, #21]
   21b3a:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21b3e:	7d5b      	ldrb	r3, [r3, #21]
   21b40:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   21b44:	9906      	ldr	r1, [sp, #24]
   21b46:	4628      	mov	r0, r5
   21b48:	f001 fa0c 	bl	22f64 <net_route_packet>
			if (ret < 0) {
   21b4c:	2800      	cmp	r0, #0
   21b4e:	db09      	blt.n	21b64 <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21b50:	2000      	movs	r0, #0
   21b52:	e73c      	b.n	219ce <net_ipv6_process_pkt+0x32>
   21b54:	2300      	movs	r3, #0
   21b56:	e7e1      	b.n	21b1c <net_ipv6_process_pkt+0x180>
   21b58:	2300      	movs	r3, #0
   21b5a:	e7df      	b.n	21b1c <net_ipv6_process_pkt+0x180>
   21b5c:	2300      	movs	r3, #0
   21b5e:	e7dd      	b.n	21b1c <net_ipv6_process_pkt+0x180>
   21b60:	2301      	movs	r3, #1
   21b62:	e7db      	b.n	21b1c <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   21b64:	4a55      	ldr	r2, [pc, #340]	; (21cbc <net_ipv6_process_pkt+0x320>)
   21b66:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21b68:	3301      	adds	r3, #1
   21b6a:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   21b6c:	2002      	movs	r0, #2
   21b6e:	e72e      	b.n	219ce <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21b70:	2301      	movs	r3, #1
   21b72:	e758      	b.n	21a26 <net_ipv6_process_pkt+0x8a>
   21b74:	2301      	movs	r3, #1
   21b76:	e756      	b.n	21a26 <net_ipv6_process_pkt+0x8a>
   21b78:	2301      	movs	r3, #1
   21b7a:	e754      	b.n	21a26 <net_ipv6_process_pkt+0x8a>
   21b7c:	2301      	movs	r3, #1
   21b7e:	e76d      	b.n	21a5c <net_ipv6_process_pkt+0xc0>
   21b80:	2301      	movs	r3, #1
   21b82:	e76b      	b.n	21a5c <net_ipv6_process_pkt+0xc0>
   21b84:	2301      	movs	r3, #1
   21b86:	e769      	b.n	21a5c <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   21b88:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21b8c:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   21b8e:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   21b92:	46b9      	mov	r9, r7
   21b94:	e0b2      	b.n	21cfc <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   21b96:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   21b9a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21b9e:	429a      	cmp	r2, r3
   21ba0:	f47f af78 	bne.w	21a94 <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   21ba4:	2002      	movs	r0, #2
   21ba6:	e712      	b.n	219ce <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   21ba8:	f1b9 0f00 	cmp.w	r9, #0
   21bac:	d186      	bne.n	21abc <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   21bae:	9a03      	ldr	r2, [sp, #12]
   21bb0:	f012 0f01 	tst.w	r2, #1
   21bb4:	d182      	bne.n	21abc <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   21bb6:	f042 0301 	orr.w	r3, r2, #1
   21bba:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   21bbc:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   21bc0:	4546      	cmp	r6, r8
   21bc2:	f2c0 8094 	blt.w	21cee <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   21bc6:	f10d 0313 	add.w	r3, sp, #19
   21bca:	9300      	str	r3, [sp, #0]
   21bcc:	2301      	movs	r3, #1
   21bce:	aa06      	add	r2, sp, #24
   21bd0:	4620      	mov	r0, r4
   21bd2:	f7fb ffbc 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21bd6:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21bda:	ab05      	add	r3, sp, #20
   21bdc:	9300      	str	r3, [sp, #0]
   21bde:	2301      	movs	r3, #1
   21be0:	aa06      	add	r2, sp, #24
   21be2:	f7fb ffb4 	bl	1db4e <net_frag_read>
	if (!frag && loc == 0xffff) {
   21be6:	4604      	mov	r4, r0
   21be8:	b108      	cbz	r0, 21bee <net_ipv6_process_pkt+0x252>
   21bea:	2702      	movs	r7, #2
   21bec:	e027      	b.n	21c3e <net_ipv6_process_pkt+0x2a2>
   21bee:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21bf2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21bf6:	429a      	cmp	r2, r3
   21bf8:	d068      	beq.n	21ccc <net_ipv6_process_pkt+0x330>
   21bfa:	2702      	movs	r7, #2
   21bfc:	e01f      	b.n	21c3e <net_ipv6_process_pkt+0x2a2>
			length++;
   21bfe:	3701      	adds	r7, #1
   21c00:	b2bf      	uxth	r7, r7
			loc--;
   21c02:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   21c06:	3b01      	subs	r3, #1
   21c08:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   21c0c:	45b8      	cmp	r8, r7
   21c0e:	d960      	bls.n	21cd2 <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   21c10:	f10d 0a20 	add.w	sl, sp, #32
   21c14:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   21c18:	f10d 0313 	add.w	r3, sp, #19
   21c1c:	9300      	str	r3, [sp, #0]
   21c1e:	2301      	movs	r3, #1
   21c20:	4652      	mov	r2, sl
   21c22:	4620      	mov	r0, r4
   21c24:	f7fb ff93 	bl	1db4e <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21c28:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21c2c:	ab05      	add	r3, sp, #20
   21c2e:	9300      	str	r3, [sp, #0]
   21c30:	2301      	movs	r3, #1
   21c32:	4652      	mov	r2, sl
   21c34:	f7fb ff8b 	bl	1db4e <net_frag_read>
		if (!frag && loc == 0xffff) {
   21c38:	4604      	mov	r4, r0
   21c3a:	2800      	cmp	r0, #0
   21c3c:	d040      	beq.n	21cc0 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21c3e:	2c00      	cmp	r4, #0
   21c40:	d047      	beq.n	21cd2 <net_ipv6_process_pkt+0x336>
   21c42:	45b8      	cmp	r8, r7
   21c44:	d945      	bls.n	21cd2 <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   21c46:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21c4a:	2b00      	cmp	r3, #0
   21c4c:	d0d7      	beq.n	21bfe <net_ipv6_process_pkt+0x262>
   21c4e:	2b01      	cmp	r3, #1
   21c50:	d009      	beq.n	21c66 <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   21c52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   21c56:	2b80      	cmp	r3, #128	; 0x80
   21c58:	d019      	beq.n	21c8e <net_ipv6_process_pkt+0x2f2>
   21c5a:	2bc0      	cmp	r3, #192	; 0xc0
   21c5c:	d012      	beq.n	21c84 <net_ipv6_process_pkt+0x2e8>
   21c5e:	2b40      	cmp	r3, #64	; 0x40
   21c60:	d00e      	beq.n	21c80 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   21c62:	462b      	mov	r3, r5
   21c64:	e01a      	b.n	21c9c <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   21c66:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21c6a:	441f      	add	r7, r3
   21c6c:	b2bf      	uxth	r7, r7
   21c6e:	3702      	adds	r7, #2
   21c70:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   21c72:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21c76:	4413      	add	r3, r2
   21c78:	3302      	adds	r3, #2
   21c7a:	f8ad 3018 	strh.w	r3, [sp, #24]
   21c7e:	e7c5      	b.n	21c0c <net_ipv6_process_pkt+0x270>
		return NULL;
   21c80:	2300      	movs	r3, #0
   21c82:	e00b      	b.n	21c9c <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   21c84:	68ab      	ldr	r3, [r5, #8]
   21c86:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21c88:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21c8a:	2bff      	cmp	r3, #255	; 0xff
   21c8c:	d013      	beq.n	21cb6 <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21c8e:	463b      	mov	r3, r7
   21c90:	2202      	movs	r2, #2
   21c92:	2104      	movs	r1, #4
   21c94:	4628      	mov	r0, r5
   21c96:	f7fd f9a1 	bl	1efdc <net_icmpv6_send_error>
		return NULL;
   21c9a:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21c9c:	b1b3      	cbz	r3, 21ccc <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21c9e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21ca2:	441f      	add	r7, r3
   21ca4:	b2bf      	uxth	r7, r7
   21ca6:	3702      	adds	r7, #2
   21ca8:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21caa:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21cae:	4413      	add	r3, r2
   21cb0:	f8ad 3018 	strh.w	r3, [sp, #24]
   21cb4:	e7aa      	b.n	21c0c <net_ipv6_process_pkt+0x270>
			return NULL;
   21cb6:	2300      	movs	r3, #0
   21cb8:	e7f0      	b.n	21c9c <net_ipv6_process_pkt+0x300>
   21cba:	bf00      	nop
   21cbc:	20002b58 	.word	0x20002b58
		if (!frag && loc == 0xffff) {
   21cc0:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21cc4:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21cc8:	429a      	cmp	r2, r3
   21cca:	d1b8      	bne.n	21c3e <net_ipv6_process_pkt+0x2a2>
	return NULL;
   21ccc:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   21cce:	2302      	movs	r3, #2
   21cd0:	e007      	b.n	21ce2 <net_ipv6_process_pkt+0x346>
	if (length != len) {
   21cd2:	45b8      	cmp	r8, r7
   21cd4:	d1fa      	bne.n	21ccc <net_ipv6_process_pkt+0x330>
	*pos += length;
   21cd6:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   21cda:	441f      	add	r7, r3
   21cdc:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   21ce0:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   21ce2:	2b02      	cmp	r3, #2
   21ce4:	f43f af5e 	beq.w	21ba4 <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   21ce8:	f89d 701f 	ldrb.w	r7, [sp, #31]
   21cec:	e6a9      	b.n	21a42 <net_ipv6_process_pkt+0xa6>
		return NULL;
   21cee:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   21cf0:	2302      	movs	r3, #2
   21cf2:	e7f6      	b.n	21ce2 <net_ipv6_process_pkt+0x346>
   21cf4:	46b9      	mov	r9, r7
   21cf6:	e001      	b.n	21cfc <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   21cf8:	2300      	movs	r3, #0
   21cfa:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   21cfc:	9b02      	ldr	r3, [sp, #8]
   21cfe:	b10b      	cbz	r3, 21d04 <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   21d00:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   21d04:	f1b9 0f11 	cmp.w	r9, #17
   21d08:	d011      	beq.n	21d2e <net_ipv6_process_pkt+0x392>
   21d0a:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   21d0e:	d004      	beq.n	21d1a <net_ipv6_process_pkt+0x37e>
   21d10:	f1b9 0f06 	cmp.w	r9, #6
   21d14:	d010      	beq.n	21d38 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   21d16:	2002      	movs	r0, #2
   21d18:	e659      	b.n	219ce <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21d1a:	a906      	add	r1, sp, #24
   21d1c:	4628      	mov	r0, r5
   21d1e:	f7fc fe9c 	bl	1ea5a <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   21d22:	7842      	ldrb	r2, [r0, #1]
   21d24:	7801      	ldrb	r1, [r0, #0]
   21d26:	4628      	mov	r0, r5
   21d28:	f7fd fb62 	bl	1f3f0 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21d2c:	e64f      	b.n	219ce <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21d2e:	4629      	mov	r1, r5
   21d30:	2011      	movs	r0, #17
   21d32:	f003 fbd3 	bl	254dc <net_conn_input>
   21d36:	e64a      	b.n	219ce <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21d38:	4629      	mov	r1, r5
   21d3a:	2006      	movs	r0, #6
   21d3c:	f003 fbce 	bl	254dc <net_conn_input>
   21d40:	e645      	b.n	219ce <net_ipv6_process_pkt+0x32>
   21d42:	bf00      	nop

00021d44 <net_ipv6_init>:

void net_ipv6_init(void)
{
   21d44:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   21d46:	4806      	ldr	r0, [pc, #24]	; (21d60 <net_ipv6_init+0x1c>)
   21d48:	f7fc fe0a 	bl	1e960 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21d4c:	4805      	ldr	r0, [pc, #20]	; (21d64 <net_ipv6_init+0x20>)
   21d4e:	f7fc fe07 	bl	1e960 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   21d52:	4805      	ldr	r0, [pc, #20]	; (21d68 <net_ipv6_init+0x24>)
   21d54:	f7fc fe04 	bl	1e960 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21d58:	4804      	ldr	r0, [pc, #16]	; (21d6c <net_ipv6_init+0x28>)
   21d5a:	f7fc fe01 	bl	1e960 <net_icmpv6_register_handler>
   21d5e:	bd08      	pop	{r3, pc}
   21d60:	2000c360 	.word	0x2000c360
   21d64:	2000bf48 	.word	0x2000bf48
   21d68:	2000c36c 	.word	0x2000c36c
   21d6c:	2000bf3c 	.word	0x2000bf3c

00021d70 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21d70:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   21d74:	6883      	ldr	r3, [r0, #8]
   21d76:	689b      	ldr	r3, [r3, #8]
   21d78:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21d7c:	2b00      	cmp	r3, #0
   21d7e:	f2c0 831e 	blt.w	223be <uncompress_IPHC_header+0x64e>
   21d82:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   21d84:	2164      	movs	r1, #100	; 0x64
   21d86:	f7fb fd11 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   21d8a:	4607      	mov	r7, r0
   21d8c:	2800      	cmp	r0, #0
   21d8e:	f000 8319 	beq.w	223c4 <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   21d92:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   21d94:	2360      	movs	r3, #96	; 0x60
   21d96:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21d98:	2328      	movs	r3, #40	; 0x28
   21d9a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21d9e:	68a3      	ldr	r3, [r4, #8]
   21da0:	689a      	ldr	r2, [r3, #8]
   21da2:	7813      	ldrb	r3, [r2, #0]
   21da4:	f003 0318 	and.w	r3, r3, #24
   21da8:	2b18      	cmp	r3, #24
   21daa:	d863      	bhi.n	21e74 <uncompress_IPHC_header+0x104>
   21dac:	e8df f003 	tbb	[pc, r3]
   21db0:	6262620d 	.word	0x6262620d
   21db4:	62626262 	.word	0x62626262
   21db8:	6262623c 	.word	0x6262623c
   21dbc:	62626262 	.word	0x62626262
   21dc0:	6262624c 	.word	0x6262624c
   21dc4:	62626262 	.word	0x62626262
   21dc8:	5c          	.byte	0x5c
   21dc9:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   21dca:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21dcc:	0993      	lsrs	r3, r2, #6
   21dce:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21dd2:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21dd4:	7832      	ldrb	r2, [r6, #0]
   21dd6:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21dda:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21ddc:	68a2      	ldr	r2, [r4, #8]
   21dde:	6892      	ldr	r2, [r2, #8]
   21de0:	f992 2003 	ldrsb.w	r2, [r2, #3]
   21de4:	f002 020f 	and.w	r2, r2, #15
   21de8:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   21dec:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21dee:	68a3      	ldr	r3, [r4, #8]
   21df0:	6899      	ldr	r1, [r3, #8]
   21df2:	2202      	movs	r2, #2
   21df4:	3104      	adds	r1, #4
   21df6:	18b0      	adds	r0, r6, r2
   21df8:	f7de fa62 	bl	2c0 <memcpy>
		offset += 2;
   21dfc:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   21dfe:	68a3      	ldr	r3, [r4, #8]
   21e00:	689b      	ldr	r3, [r3, #8]
   21e02:	781a      	ldrb	r2, [r3, #0]
   21e04:	f012 0f04 	tst.w	r2, #4
   21e08:	d103      	bne.n	21e12 <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   21e0a:	5d5b      	ldrb	r3, [r3, r5]
   21e0c:	71b3      	strb	r3, [r6, #6]
		offset++;
   21e0e:	3501      	adds	r5, #1
   21e10:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   21e12:	68a3      	ldr	r3, [r4, #8]
   21e14:	689a      	ldr	r2, [r3, #8]
   21e16:	7813      	ldrb	r3, [r2, #0]
   21e18:	f003 0303 	and.w	r3, r3, #3
   21e1c:	2b03      	cmp	r3, #3
   21e1e:	d82f      	bhi.n	21e80 <uncompress_IPHC_header+0x110>
   21e20:	e8df f003 	tbb	[pc, r3]
   21e24:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21e28:	7893      	ldrb	r3, [r2, #2]
   21e2a:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21e2c:	f003 030f 	and.w	r3, r3, #15
   21e30:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   21e34:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   21e36:	68a3      	ldr	r3, [r4, #8]
   21e38:	6899      	ldr	r1, [r3, #8]
   21e3a:	2202      	movs	r2, #2
   21e3c:	3103      	adds	r1, #3
   21e3e:	18b0      	adds	r0, r6, r2
   21e40:	f7de fa3e 	bl	2c0 <memcpy>
		offset += 2;
   21e44:	2505      	movs	r5, #5
   21e46:	e7da      	b.n	21dfe <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21e48:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21e4a:	0993      	lsrs	r3, r2, #6
   21e4c:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21e50:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   21e52:	7832      	ldrb	r2, [r6, #0]
   21e54:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21e58:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21e5a:	011b      	lsls	r3, r3, #4
   21e5c:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21e5e:	2300      	movs	r3, #0
   21e60:	70b3      	strb	r3, [r6, #2]
   21e62:	70f3      	strb	r3, [r6, #3]
		offset++;
   21e64:	2503      	movs	r5, #3
   21e66:	e7ca      	b.n	21dfe <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21e68:	2300      	movs	r3, #0
   21e6a:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21e6c:	70b3      	strb	r3, [r6, #2]
   21e6e:	70f3      	strb	r3, [r6, #3]
   21e70:	2502      	movs	r5, #2
   21e72:	e7c4      	b.n	21dfe <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21e74:	2502      	movs	r5, #2
   21e76:	e7c2      	b.n	21dfe <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21e78:	1c6b      	adds	r3, r5, #1
   21e7a:	5d52      	ldrb	r2, [r2, r5]
   21e7c:	71f2      	strb	r2, [r6, #7]
   21e7e:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21e80:	2210      	movs	r2, #16
   21e82:	2100      	movs	r1, #0
   21e84:	f106 0008 	add.w	r0, r6, #8
   21e88:	f008 fd72 	bl	2a970 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21e8c:	2210      	movs	r2, #16
   21e8e:	2100      	movs	r1, #0
   21e90:	f106 0018 	add.w	r0, r6, #24
   21e94:	f008 fd6c 	bl	2a970 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21e98:	68a3      	ldr	r3, [r4, #8]
   21e9a:	689b      	ldr	r3, [r3, #8]
   21e9c:	785b      	ldrb	r3, [r3, #1]
   21e9e:	f013 0f40 	tst.w	r3, #64	; 0x40
   21ea2:	d011      	beq.n	21ec8 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   21ea4:	f013 0f30 	tst.w	r3, #48	; 0x30
   21ea8:	d05e      	beq.n	21f68 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21eaa:	4638      	mov	r0, r7
   21eac:	f7fb fccb 	bl	1d846 <net_pkt_frag_unref>
	return false;
   21eb0:	2000      	movs	r0, #0
   21eb2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   21eb6:	2301      	movs	r3, #1
   21eb8:	71f3      	strb	r3, [r6, #7]
   21eba:	e7e1      	b.n	21e80 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   21ebc:	2340      	movs	r3, #64	; 0x40
   21ebe:	71f3      	strb	r3, [r6, #7]
   21ec0:	e7de      	b.n	21e80 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   21ec2:	23ff      	movs	r3, #255	; 0xff
   21ec4:	71f3      	strb	r3, [r6, #7]
   21ec6:	e7db      	b.n	21e80 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21ec8:	68a3      	ldr	r3, [r4, #8]
   21eca:	6899      	ldr	r1, [r3, #8]
   21ecc:	784b      	ldrb	r3, [r1, #1]
   21ece:	f003 0330 	and.w	r3, r3, #48	; 0x30
   21ed2:	2b10      	cmp	r3, #16
   21ed4:	d059      	beq.n	21f8a <uncompress_IPHC_header+0x21a>
   21ed6:	d93e      	bls.n	21f56 <uncompress_IPHC_header+0x1e6>
   21ed8:	2b20      	cmp	r3, #32
   21eda:	d065      	beq.n	21fa8 <uncompress_IPHC_header+0x238>
   21edc:	2b30      	cmp	r3, #48	; 0x30
   21ede:	d143      	bne.n	21f68 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   21ee0:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   21ee4:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   21ee8:	23fe      	movs	r3, #254	; 0xfe
   21eea:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   21eec:	2380      	movs	r3, #128	; 0x80
   21eee:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   21ef2:	2300      	movs	r3, #0
   21ef4:	f888 3002 	strb.w	r3, [r8, #2]
   21ef8:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21efc:	f888 3004 	strb.w	r3, [r8, #4]
   21f00:	f888 3005 	strb.w	r3, [r8, #5]
   21f04:	f888 3006 	strb.w	r3, [r8, #6]
   21f08:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21f0c:	f899 2004 	ldrb.w	r2, [r9, #4]
   21f10:	2a06      	cmp	r2, #6
   21f12:	d05b      	beq.n	21fcc <uncompress_IPHC_header+0x25c>
   21f14:	2a08      	cmp	r2, #8
   21f16:	f000 8082 	beq.w	2201e <uncompress_IPHC_header+0x2ae>
   21f1a:	2a02      	cmp	r2, #2
   21f1c:	d124      	bne.n	21f68 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21f1e:	f899 3005 	ldrb.w	r3, [r9, #5]
   21f22:	2b01      	cmp	r3, #1
   21f24:	d120      	bne.n	21f68 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   21f26:	2300      	movs	r3, #0
   21f28:	f888 3008 	strb.w	r3, [r8, #8]
   21f2c:	f888 3009 	strb.w	r3, [r8, #9]
   21f30:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   21f34:	22ff      	movs	r2, #255	; 0xff
   21f36:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21f3a:	22fe      	movs	r2, #254	; 0xfe
   21f3c:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21f40:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   21f44:	6a23      	ldr	r3, [r4, #32]
   21f46:	781b      	ldrb	r3, [r3, #0]
   21f48:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21f4c:	6a23      	ldr	r3, [r4, #32]
   21f4e:	785b      	ldrb	r3, [r3, #1]
   21f50:	f888 300f 	strb.w	r3, [r8, #15]
   21f54:	e008      	b.n	21f68 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   21f56:	b93b      	cbnz	r3, 21f68 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21f58:	2210      	movs	r2, #16
   21f5a:	4429      	add	r1, r5
   21f5c:	f106 0008 	add.w	r0, r6, #8
   21f60:	f7de f9ae 	bl	2c0 <memcpy>
		offset += 16;
   21f64:	3510      	adds	r5, #16
   21f66:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21f68:	68a3      	ldr	r3, [r4, #8]
   21f6a:	6899      	ldr	r1, [r3, #8]
   21f6c:	784b      	ldrb	r3, [r1, #1]
   21f6e:	f013 0f08 	tst.w	r3, #8
   21f72:	d160      	bne.n	22036 <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21f74:	f003 0303 	and.w	r3, r3, #3
   21f78:	2b03      	cmp	r3, #3
   21f7a:	f200 80ad 	bhi.w	220d8 <uncompress_IPHC_header+0x368>
   21f7e:	e8df f013 	tbh	[pc, r3, lsl #1]
   21f82:	00a3      	.short	0x00a3
   21f84:	00e500d6 	.word	0x00e500d6
   21f88:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21f8a:	23fe      	movs	r3, #254	; 0xfe
   21f8c:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21f8e:	2380      	movs	r3, #128	; 0x80
   21f90:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   21f92:	68a3      	ldr	r3, [r4, #8]
   21f94:	6899      	ldr	r1, [r3, #8]
   21f96:	2208      	movs	r2, #8
   21f98:	4429      	add	r1, r5
   21f9a:	f106 0010 	add.w	r0, r6, #16
   21f9e:	f7de f98f 	bl	2c0 <memcpy>
		offset += 8;
   21fa2:	3508      	adds	r5, #8
   21fa4:	b2ed      	uxtb	r5, r5
   21fa6:	e7df      	b.n	21f68 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21fa8:	23fe      	movs	r3, #254	; 0xfe
   21faa:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21fac:	2280      	movs	r2, #128	; 0x80
   21fae:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21fb0:	22ff      	movs	r2, #255	; 0xff
   21fb2:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   21fb4:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   21fb6:	68a3      	ldr	r3, [r4, #8]
   21fb8:	6899      	ldr	r1, [r3, #8]
   21fba:	2202      	movs	r2, #2
   21fbc:	4429      	add	r1, r5
   21fbe:	f106 0016 	add.w	r0, r6, #22
   21fc2:	f7de f97d 	bl	2c0 <memcpy>
		offset += 2;
   21fc6:	3502      	adds	r5, #2
   21fc8:	b2ed      	uxtb	r5, r5
   21fca:	e7cd      	b.n	21f68 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   21fcc:	2203      	movs	r2, #3
   21fce:	6a21      	ldr	r1, [r4, #32]
   21fd0:	f108 0008 	add.w	r0, r8, #8
   21fd4:	f7de f974 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   21fd8:	23ff      	movs	r3, #255	; 0xff
   21fda:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   21fde:	23fe      	movs	r3, #254	; 0xfe
   21fe0:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   21fe4:	6a21      	ldr	r1, [r4, #32]
   21fe6:	2203      	movs	r2, #3
   21fe8:	4411      	add	r1, r2
   21fea:	f108 000d 	add.w	r0, r8, #13
   21fee:	f7de f967 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   21ff2:	f899 3005 	ldrb.w	r3, [r9, #5]
   21ff6:	2b02      	cmp	r3, #2
   21ff8:	d00a      	beq.n	22010 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21ffa:	f899 3005 	ldrb.w	r3, [r9, #5]
   21ffe:	2b03      	cmp	r3, #3
   22000:	d1b2      	bne.n	21f68 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   22002:	f898 3008 	ldrb.w	r3, [r8, #8]
   22006:	f083 0302 	eor.w	r3, r3, #2
   2200a:	f888 3008 	strb.w	r3, [r8, #8]
   2200e:	e7ab      	b.n	21f68 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   22010:	f898 3008 	ldrb.w	r3, [r8, #8]
   22014:	f083 0302 	eor.w	r3, r3, #2
   22018:	f888 3008 	strb.w	r3, [r8, #8]
   2201c:	e7ed      	b.n	21ffa <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2201e:	6a21      	ldr	r1, [r4, #32]
   22020:	f108 0008 	add.w	r0, r8, #8
   22024:	f7de f94c 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   22028:	f898 3008 	ldrb.w	r3, [r8, #8]
   2202c:	f083 0302 	eor.w	r3, r3, #2
   22030:	f888 3008 	strb.w	r3, [r8, #8]
   22034:	e798      	b.n	21f68 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   22036:	784b      	ldrb	r3, [r1, #1]
   22038:	f013 0f04 	tst.w	r3, #4
   2203c:	d142      	bne.n	220c4 <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   2203e:	f003 0303 	and.w	r3, r3, #3
   22042:	2b03      	cmp	r3, #3
   22044:	d848      	bhi.n	220d8 <uncompress_IPHC_header+0x368>
   22046:	e8df f003 	tbb	[pc, r3]
   2204a:	0b02      	.short	0x0b02
   2204c:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   2204e:	2210      	movs	r2, #16
   22050:	4429      	add	r1, r5
   22052:	f106 0018 	add.w	r0, r6, #24
   22056:	f7de f933 	bl	2c0 <memcpy>
		offset += 16;
   2205a:	3510      	adds	r5, #16
   2205c:	b2ed      	uxtb	r5, r5
   2205e:	e03b      	b.n	220d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   22060:	23ff      	movs	r3, #255	; 0xff
   22062:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   22064:	68a3      	ldr	r3, [r4, #8]
   22066:	689b      	ldr	r3, [r3, #8]
   22068:	1c69      	adds	r1, r5, #1
   2206a:	5d5b      	ldrb	r3, [r3, r5]
   2206c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   2206e:	68a3      	ldr	r3, [r4, #8]
   22070:	689b      	ldr	r3, [r3, #8]
   22072:	2205      	movs	r2, #5
   22074:	fa53 f181 	uxtab	r1, r3, r1
   22078:	f106 0023 	add.w	r0, r6, #35	; 0x23
   2207c:	f7de f920 	bl	2c0 <memcpy>
		offset += 5;
   22080:	3506      	adds	r5, #6
   22082:	b2ed      	uxtb	r5, r5
   22084:	e028      	b.n	220d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   22086:	23ff      	movs	r3, #255	; 0xff
   22088:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2208a:	68a3      	ldr	r3, [r4, #8]
   2208c:	689b      	ldr	r3, [r3, #8]
   2208e:	1c69      	adds	r1, r5, #1
   22090:	5d5b      	ldrb	r3, [r3, r5]
   22092:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   22094:	68a3      	ldr	r3, [r4, #8]
   22096:	689b      	ldr	r3, [r3, #8]
   22098:	2203      	movs	r2, #3
   2209a:	fa53 f181 	uxtab	r1, r3, r1
   2209e:	f106 0025 	add.w	r0, r6, #37	; 0x25
   220a2:	f7de f90d 	bl	2c0 <memcpy>
		offset += 3;
   220a6:	3504      	adds	r5, #4
   220a8:	b2ed      	uxtb	r5, r5
   220aa:	e015      	b.n	220d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   220ac:	23ff      	movs	r3, #255	; 0xff
   220ae:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   220b0:	2302      	movs	r3, #2
   220b2:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   220b4:	68a3      	ldr	r3, [r4, #8]
   220b6:	689a      	ldr	r2, [r3, #8]
   220b8:	1c6b      	adds	r3, r5, #1
   220ba:	5d52      	ldrb	r2, [r2, r5]
   220bc:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   220c0:	b2dd      	uxtb	r5, r3
   220c2:	e009      	b.n	220d8 <uncompress_IPHC_header+0x368>
		return 0;
   220c4:	2500      	movs	r5, #0
   220c6:	e007      	b.n	220d8 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   220c8:	2210      	movs	r2, #16
   220ca:	4429      	add	r1, r5
   220cc:	f106 0018 	add.w	r0, r6, #24
   220d0:	f7de f8f6 	bl	2c0 <memcpy>
		offset += 16;
   220d4:	3510      	adds	r5, #16
   220d6:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   220d8:	f107 0a08 	add.w	sl, r7, #8
   220dc:	2128      	movs	r1, #40	; 0x28
   220de:	4650      	mov	r0, sl
   220e0:	f7f8 fe94 	bl	1ae0c <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   220e4:	68a3      	ldr	r3, [r4, #8]
   220e6:	689b      	ldr	r3, [r3, #8]
   220e8:	781a      	ldrb	r2, [r3, #0]
   220ea:	f012 0f04 	tst.w	r2, #4
   220ee:	f000 8114 	beq.w	2231a <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   220f2:	5d5b      	ldrb	r3, [r3, r5]
   220f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   220f8:	2bf0      	cmp	r3, #240	; 0xf0
   220fa:	f47f aed6 	bne.w	21eaa <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   220fe:	2311      	movs	r3, #17
   22100:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   22102:	f8d7 b008 	ldr.w	fp, [r7, #8]
   22106:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   2210a:	68a3      	ldr	r3, [r4, #8]
   2210c:	6898      	ldr	r0, [r3, #8]
   2210e:	f810 8005 	ldrb.w	r8, [r0, r5]
   22112:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22116:	1c69      	adds	r1, r5, #1
   22118:	b2c9      	uxtb	r1, r1
   2211a:	5d43      	ldrb	r3, [r0, r5]
   2211c:	f003 0303 	and.w	r3, r3, #3
   22120:	2b03      	cmp	r3, #3
   22122:	f200 80ed 	bhi.w	22300 <uncompress_IPHC_header+0x590>
   22126:	e8df f003 	tbb	[pc, r3]
   2212a:	ae95      	.short	0xae95
   2212c:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   2212e:	23fe      	movs	r3, #254	; 0xfe
   22130:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   22132:	2380      	movs	r3, #128	; 0x80
   22134:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   22136:	68a3      	ldr	r3, [r4, #8]
   22138:	6899      	ldr	r1, [r3, #8]
   2213a:	2208      	movs	r2, #8
   2213c:	4429      	add	r1, r5
   2213e:	f106 0020 	add.w	r0, r6, #32
   22142:	f7de f8bd 	bl	2c0 <memcpy>
		offset += 8;
   22146:	3508      	adds	r5, #8
   22148:	b2ed      	uxtb	r5, r5
   2214a:	e7c5      	b.n	220d8 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   2214c:	23fe      	movs	r3, #254	; 0xfe
   2214e:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   22150:	2280      	movs	r2, #128	; 0x80
   22152:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   22154:	22ff      	movs	r2, #255	; 0xff
   22156:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   2215a:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   2215e:	68a3      	ldr	r3, [r4, #8]
   22160:	6899      	ldr	r1, [r3, #8]
   22162:	2202      	movs	r2, #2
   22164:	4429      	add	r1, r5
   22166:	f106 0026 	add.w	r0, r6, #38	; 0x26
   2216a:	f7de f8a9 	bl	2c0 <memcpy>
		offset += 2;
   2216e:	3502      	adds	r5, #2
   22170:	b2ed      	uxtb	r5, r5
   22172:	e7b1      	b.n	220d8 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   22174:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   22178:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   2217c:	23fe      	movs	r3, #254	; 0xfe
   2217e:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   22180:	2380      	movs	r3, #128	; 0x80
   22182:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   22186:	2300      	movs	r3, #0
   22188:	f888 3002 	strb.w	r3, [r8, #2]
   2218c:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   22190:	f888 3004 	strb.w	r3, [r8, #4]
   22194:	f888 3005 	strb.w	r3, [r8, #5]
   22198:	f888 3006 	strb.w	r3, [r8, #6]
   2219c:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   221a0:	f899 2004 	ldrb.w	r2, [r9, #4]
   221a4:	2a06      	cmp	r2, #6
   221a6:	d01f      	beq.n	221e8 <uncompress_IPHC_header+0x478>
   221a8:	2a08      	cmp	r2, #8
   221aa:	d047      	beq.n	2223c <uncompress_IPHC_header+0x4cc>
   221ac:	2a02      	cmp	r2, #2
   221ae:	d193      	bne.n	220d8 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   221b0:	f899 3005 	ldrb.w	r3, [r9, #5]
   221b4:	2b01      	cmp	r3, #1
   221b6:	d18f      	bne.n	220d8 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   221b8:	2300      	movs	r3, #0
   221ba:	f888 3008 	strb.w	r3, [r8, #8]
   221be:	f888 3009 	strb.w	r3, [r8, #9]
   221c2:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   221c6:	22ff      	movs	r2, #255	; 0xff
   221c8:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   221cc:	22fe      	movs	r2, #254	; 0xfe
   221ce:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   221d2:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   221d6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   221d8:	781b      	ldrb	r3, [r3, #0]
   221da:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   221de:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   221e0:	785b      	ldrb	r3, [r3, #1]
   221e2:	f888 300f 	strb.w	r3, [r8, #15]
   221e6:	e777      	b.n	220d8 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   221e8:	2203      	movs	r2, #3
   221ea:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   221ec:	f108 0008 	add.w	r0, r8, #8
   221f0:	f7de f866 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   221f4:	23ff      	movs	r3, #255	; 0xff
   221f6:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   221fa:	23fe      	movs	r3, #254	; 0xfe
   221fc:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   22200:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22202:	2203      	movs	r2, #3
   22204:	4411      	add	r1, r2
   22206:	f108 000d 	add.w	r0, r8, #13
   2220a:	f7de f859 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2220e:	f899 3005 	ldrb.w	r3, [r9, #5]
   22212:	2b02      	cmp	r3, #2
   22214:	d00b      	beq.n	2222e <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22216:	f899 3005 	ldrb.w	r3, [r9, #5]
   2221a:	2b03      	cmp	r3, #3
   2221c:	f47f af5c 	bne.w	220d8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   22220:	f898 3008 	ldrb.w	r3, [r8, #8]
   22224:	f083 0302 	eor.w	r3, r3, #2
   22228:	f888 3008 	strb.w	r3, [r8, #8]
   2222c:	e754      	b.n	220d8 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   2222e:	f898 3008 	ldrb.w	r3, [r8, #8]
   22232:	f083 0302 	eor.w	r3, r3, #2
   22236:	f888 3008 	strb.w	r3, [r8, #8]
   2223a:	e7ec      	b.n	22216 <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2223c:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2223e:	f108 0008 	add.w	r0, r8, #8
   22242:	f7de f83d 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   22246:	f898 3008 	ldrb.w	r3, [r8, #8]
   2224a:	f083 0302 	eor.w	r3, r3, #2
   2224e:	f888 3008 	strb.w	r3, [r8, #8]
   22252:	e741      	b.n	220d8 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22254:	2202      	movs	r2, #2
   22256:	4401      	add	r1, r0
   22258:	4648      	mov	r0, r9
   2225a:	f7de f831 	bl	2c0 <memcpy>
		offset += 2;
   2225e:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   22260:	68a3      	ldr	r3, [r4, #8]
   22262:	689b      	ldr	r3, [r3, #8]
   22264:	2202      	movs	r2, #2
   22266:	fa53 f181 	uxtab	r1, r3, r1
   2226a:	eb09 0002 	add.w	r0, r9, r2
   2226e:	f7de f827 	bl	2c0 <memcpy>
		offset += 2;
   22272:	3505      	adds	r5, #5
   22274:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   22276:	f1b8 0f00 	cmp.w	r8, #0
   2227a:	d043      	beq.n	22304 <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   2227c:	2108      	movs	r1, #8
   2227e:	4650      	mov	r0, sl
   22280:	f7f8 fdc4 	bl	1ae0c <net_buf_simple_add>
   22284:	e04c      	b.n	22320 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   22286:	2202      	movs	r2, #2
   22288:	4401      	add	r1, r0
   2228a:	4648      	mov	r0, r9
   2228c:	f7de f818 	bl	2c0 <memcpy>
		offset += 2;
   22290:	1ceb      	adds	r3, r5, #3
   22292:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   22294:	68a2      	ldr	r2, [r4, #8]
   22296:	6892      	ldr	r2, [r2, #8]
   22298:	5cd3      	ldrb	r3, [r2, r3]
   2229a:	021b      	lsls	r3, r3, #8
   2229c:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   222a0:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   222a4:	3504      	adds	r5, #4
   222a6:	b2ed      	uxtb	r5, r5
   222a8:	e7e5      	b.n	22276 <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   222aa:	5c43      	ldrb	r3, [r0, r1]
   222ac:	021b      	lsls	r3, r3, #8
   222ae:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   222b2:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   222b6:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   222b8:	68a3      	ldr	r3, [r4, #8]
   222ba:	689b      	ldr	r3, [r3, #8]
   222bc:	2202      	movs	r2, #2
   222be:	fa53 f181 	uxtab	r1, r3, r1
   222c2:	eb09 0002 	add.w	r0, r9, r2
   222c6:	f7dd fffb 	bl	2c0 <memcpy>
		offset += 2;
   222ca:	3504      	adds	r5, #4
   222cc:	b2ed      	uxtb	r5, r5
   222ce:	e7d2      	b.n	22276 <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   222d0:	5c43      	ldrb	r3, [r0, r1]
   222d2:	091b      	lsrs	r3, r3, #4
   222d4:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   222d8:	021b      	lsls	r3, r3, #8
   222da:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   222de:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   222e2:	68a3      	ldr	r3, [r4, #8]
   222e4:	689b      	ldr	r3, [r3, #8]
   222e6:	5c5b      	ldrb	r3, [r3, r1]
   222e8:	021b      	lsls	r3, r3, #8
   222ea:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   222ee:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   222f2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   222f6:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   222fa:	3502      	adds	r5, #2
   222fc:	b2ed      	uxtb	r5, r5
   222fe:	e7ba      	b.n	22276 <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   22300:	460d      	mov	r5, r1
   22302:	e7b8      	b.n	22276 <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   22304:	68a3      	ldr	r3, [r4, #8]
   22306:	6899      	ldr	r1, [r3, #8]
   22308:	2202      	movs	r2, #2
   2230a:	4429      	add	r1, r5
   2230c:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   22310:	f7dd ffd6 	bl	2c0 <memcpy>
		offset += 2;
   22314:	3502      	adds	r5, #2
   22316:	b2ed      	uxtb	r5, r5
   22318:	e7b0      	b.n	2227c <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   2231a:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   2231e:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   22320:	68a3      	ldr	r3, [r4, #8]
   22322:	899a      	ldrh	r2, [r3, #12]
   22324:	fa1f fa85 	uxth.w	sl, r5
   22328:	4552      	cmp	r2, sl
   2232a:	f4ff adbe 	bcc.w	21eaa <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   2232e:	6898      	ldr	r0, [r3, #8]
   22330:	1b52      	subs	r2, r2, r5
   22332:	1941      	adds	r1, r0, r5
   22334:	f008 fab8 	bl	2a8a8 <memmove>
	pkt->frags->len -= offset;
   22338:	68a2      	ldr	r2, [r4, #8]
   2233a:	8993      	ldrh	r3, [r2, #12]
   2233c:	eba3 0a0a 	sub.w	sl, r3, sl
   22340:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   22344:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   22348:	b94a      	cbnz	r2, 2235e <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   2234a:	4639      	mov	r1, r7
   2234c:	4620      	mov	r0, r4
   2234e:	f7fb fab7 	bl	1d8c0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22352:	4620      	mov	r0, r4
   22354:	f7fb fb6e 	bl	1da34 <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   22358:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   2235a:	2200      	movs	r2, #0
   2235c:	e00b      	b.n	22376 <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   2235e:	68bb      	ldr	r3, [r7, #8]
   22360:	4250      	negs	r0, r2
	return pkt->frags->data;
   22362:	68a1      	ldr	r1, [r4, #8]
   22364:	6889      	ldr	r1, [r1, #8]
   22366:	4401      	add	r1, r0
   22368:	4418      	add	r0, r3
   2236a:	f7dd ffa9 	bl	2c0 <memcpy>
   2236e:	e7ec      	b.n	2234a <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   22370:	8999      	ldrh	r1, [r3, #12]
   22372:	440a      	add	r2, r1
		buf = buf->frags;
   22374:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   22376:	2b00      	cmp	r3, #0
   22378:	d1fa      	bne.n	22370 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   2237a:	b293      	uxth	r3, r2
   2237c:	3b28      	subs	r3, #40	; 0x28
   2237e:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   22380:	0a1a      	lsrs	r2, r3, #8
   22382:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   22384:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22386:	79b1      	ldrb	r1, [r6, #6]
   22388:	2911      	cmp	r1, #17
   2238a:	d002      	beq.n	22392 <uncompress_IPHC_header+0x622>
	return true;
   2238c:	2001      	movs	r0, #1
   2238e:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   22392:	f1b9 0f00 	cmp.w	r9, #0
   22396:	d018      	beq.n	223ca <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   22398:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   2239c:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   223a0:	f1b8 0f00 	cmp.w	r8, #0
   223a4:	d102      	bne.n	223ac <uncompress_IPHC_header+0x63c>
	return true;
   223a6:	2001      	movs	r0, #1
}
   223a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   223ac:	4620      	mov	r0, r4
   223ae:	f7fc f8ba 	bl	1e526 <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   223b2:	43c0      	mvns	r0, r0
   223b4:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   223b8:	2001      	movs	r0, #1
   223ba:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   223be:	2000      	movs	r0, #0
   223c0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   223c4:	2000      	movs	r0, #0
   223c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   223ca:	2001      	movs	r0, #1
   223cc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000223d0 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   223d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   223d4:	b085      	sub	sp, #20
   223d6:	4604      	mov	r4, r0
   223d8:	4617      	mov	r7, r2
	if (iphc) {
   223da:	460d      	mov	r5, r1
   223dc:	b9f9      	cbnz	r1, 2241e <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   223de:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   223e2:	f7fb f9e3 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   223e6:	4606      	mov	r6, r0
   223e8:	2800      	cmp	r0, #0
   223ea:	f000 8438 	beq.w	22c5e <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   223ee:	f850 3f08 	ldr.w	r3, [r0, #8]!
   223f2:	2241      	movs	r2, #65	; 0x41
   223f4:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   223f6:	2101      	movs	r1, #1
   223f8:	f7f8 fd08 	bl	1ae0c <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   223fc:	4631      	mov	r1, r6
   223fe:	4620      	mov	r0, r4
   22400:	f7fb fa5e 	bl	1d8c0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   22404:	4620      	mov	r0, r4
   22406:	f7fb fb15 	bl	1da34 <net_pkt_compact>
	if (fragment) {
   2240a:	2f00      	cmp	r7, #0
   2240c:	f000 842a 	beq.w	22c64 <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   22410:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22414:	4620      	mov	r0, r4
   22416:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   22418:	b005      	add	sp, #20
   2241a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2241e:	6883      	ldr	r3, [r0, #8]
   22420:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   22422:	899b      	ldrh	r3, [r3, #12]
   22424:	2b27      	cmp	r3, #39	; 0x27
   22426:	f240 8411 	bls.w	22c4c <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   2242a:	79b2      	ldrb	r2, [r6, #6]
   2242c:	2a11      	cmp	r2, #17
   2242e:	d02f      	beq.n	22490 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   22430:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   22434:	4620      	mov	r0, r4
   22436:	f7fb f9b9 	bl	1d7ac <net_pkt_get_frag>
	if (!frag) {
   2243a:	4680      	mov	r8, r0
   2243c:	2800      	cmp	r0, #0
   2243e:	f000 8408 	beq.w	22c52 <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   22442:	6883      	ldr	r3, [r0, #8]
   22444:	2260      	movs	r2, #96	; 0x60
   22446:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   22448:	6883      	ldr	r3, [r0, #8]
   2244a:	2200      	movs	r2, #0
   2244c:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   2244e:	7830      	ldrb	r0, [r6, #0]
   22450:	7871      	ldrb	r1, [r6, #1]
   22452:	090b      	lsrs	r3, r1, #4
   22454:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   22458:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   2245a:	089a      	lsrs	r2, r3, #2
   2245c:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   22460:	b25b      	sxtb	r3, r3
   22462:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   22464:	f011 0f0f 	tst.w	r1, #15
   22468:	d121      	bne.n	224ae <net_6lo_compress+0xde>
   2246a:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   2246e:	f1be 0f00 	cmp.w	lr, #0
   22472:	d11c      	bne.n	224ae <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   22474:	f010 0f0f 	tst.w	r0, #15
   22478:	d10e      	bne.n	22498 <net_6lo_compress+0xc8>
   2247a:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   2247e:	d10b      	bne.n	22498 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   22480:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22484:	7813      	ldrb	r3, [r2, #0]
   22486:	f043 0318 	orr.w	r3, r3, #24
   2248a:	7013      	strb	r3, [r2, #0]
   2248c:	2202      	movs	r2, #2
   2248e:	e025      	b.n	224dc <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   22490:	2b2f      	cmp	r3, #47	; 0x2f
   22492:	d8cd      	bhi.n	22430 <net_6lo_compress+0x60>
		return false;
   22494:	2000      	movs	r0, #0
   22496:	e7bf      	b.n	22418 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   22498:	f8d8 1008 	ldr.w	r1, [r8, #8]
   2249c:	780b      	ldrb	r3, [r1, #0]
   2249e:	f043 0310 	orr.w	r3, r3, #16
   224a2:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   224a4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   224a8:	709a      	strb	r2, [r3, #2]
   224aa:	2203      	movs	r2, #3
   224ac:	e016      	b.n	224dc <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   224ae:	f010 0f0f 	tst.w	r0, #15
   224b2:	d102      	bne.n	224ba <net_6lo_compress+0xea>
   224b4:	f011 0f30 	tst.w	r1, #48	; 0x30
   224b8:	d128      	bne.n	2250c <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   224ba:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   224be:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   224c0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   224c4:	7873      	ldrb	r3, [r6, #1]
   224c6:	f003 030f 	and.w	r3, r3, #15
   224ca:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   224cc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   224d0:	2202      	movs	r2, #2
   224d2:	18b1      	adds	r1, r6, r2
   224d4:	3004      	adds	r0, #4
   224d6:	f7dd fef3 	bl	2c0 <memcpy>
			offset += 2;
   224da:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   224dc:	79b3      	ldrb	r3, [r6, #6]
   224de:	2b11      	cmp	r3, #17
   224e0:	d02d      	beq.n	2253e <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   224e2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   224e6:	f102 0901 	add.w	r9, r2, #1
   224ea:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   224ec:	79f3      	ldrb	r3, [r6, #7]
   224ee:	2b40      	cmp	r3, #64	; 0x40
   224f0:	d040      	beq.n	22574 <net_6lo_compress+0x1a4>
   224f2:	2bff      	cmp	r3, #255	; 0xff
   224f4:	d045      	beq.n	22582 <net_6lo_compress+0x1b2>
   224f6:	2b01      	cmp	r3, #1
   224f8:	d029      	beq.n	2254e <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   224fa:	f8d8 1008 	ldr.w	r1, [r8, #8]
   224fe:	f109 0201 	add.w	r2, r9, #1
   22502:	f801 3009 	strb.w	r3, [r1, r9]
   22506:	fa5f f982 	uxtb.w	r9, r2
   2250a:	e026      	b.n	2255a <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   2250c:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22510:	780a      	ldrb	r2, [r1, #0]
   22512:	f042 0208 	orr.w	r2, r2, #8
   22516:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   22518:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2251c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   22520:	f996 1001 	ldrsb.w	r1, [r6, #1]
   22524:	f001 010f 	and.w	r1, r1, #15
   22528:	430b      	orrs	r3, r1
   2252a:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   2252c:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22530:	2202      	movs	r2, #2
   22532:	18b1      	adds	r1, r6, r2
   22534:	3003      	adds	r0, #3
   22536:	f7dd fec3 	bl	2c0 <memcpy>
			offset += 2;
   2253a:	2205      	movs	r2, #5
   2253c:	e7ce      	b.n	224dc <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   2253e:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22542:	780b      	ldrb	r3, [r1, #0]
   22544:	f043 0304 	orr.w	r3, r3, #4
   22548:	700b      	strb	r3, [r1, #0]
   2254a:	4691      	mov	r9, r2
   2254c:	e7ce      	b.n	224ec <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   2254e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22552:	7813      	ldrb	r3, [r2, #0]
   22554:	f043 0301 	orr.w	r3, r3, #1
   22558:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2255a:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2255c:	b9c3      	cbnz	r3, 22590 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2255e:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   22560:	2b00      	cmp	r3, #0
   22562:	d176      	bne.n	22652 <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22564:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   22566:	2b00      	cmp	r3, #0
   22568:	d175      	bne.n	22656 <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2256a:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2256c:	2b00      	cmp	r3, #0
   2256e:	d074      	beq.n	2265a <net_6lo_compress+0x28a>
   22570:	2300      	movs	r3, #0
   22572:	e00e      	b.n	22592 <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   22574:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22578:	7813      	ldrb	r3, [r2, #0]
   2257a:	f043 0302 	orr.w	r3, r3, #2
   2257e:	7013      	strb	r3, [r2, #0]
   22580:	e7eb      	b.n	2255a <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   22582:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22586:	7813      	ldrb	r3, [r2, #0]
   22588:	f043 0303 	orr.w	r3, r3, #3
   2258c:	7013      	strb	r3, [r2, #0]
   2258e:	e7e4      	b.n	2255a <net_6lo_compress+0x18a>
   22590:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   22592:	2b00      	cmp	r3, #0
   22594:	d163      	bne.n	2265e <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   22596:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   22598:	f248 03fe 	movw	r3, #33022	; 0x80fe
   2259c:	429a      	cmp	r2, r3
   2259e:	d065      	beq.n	2266c <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   225a0:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   225a4:	2210      	movs	r2, #16
   225a6:	f106 0108 	add.w	r1, r6, #8
   225aa:	4448      	add	r0, r9
   225ac:	f7dd fe88 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   225b0:	f109 0910 	add.w	r9, r9, #16
   225b4:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   225b8:	f1b9 0f00 	cmp.w	r9, #0
   225bc:	f000 812d 	beq.w	2281a <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   225c0:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   225c2:	2bff      	cmp	r3, #255	; 0xff
   225c4:	f000 812e 	beq.w	22824 <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   225c8:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   225ca:	f248 03fe 	movw	r3, #33022	; 0x80fe
   225ce:	429a      	cmp	r2, r3
   225d0:	f000 81bf 	beq.w	22952 <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   225d4:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   225d8:	2210      	movs	r2, #16
   225da:	f106 0118 	add.w	r1, r6, #24
   225de:	4448      	add	r0, r9
   225e0:	f7dd fe6e 	bl	2c0 <memcpy>
		offset += 16;
   225e4:	f109 0910 	add.w	r9, r9, #16
   225e8:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   225ec:	f1b9 0f00 	cmp.w	r9, #0
   225f0:	f000 8287 	beq.w	22b02 <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   225f4:	79b3      	ldrb	r3, [r6, #6]
   225f6:	2b11      	cmp	r3, #17
   225f8:	f000 8288 	beq.w	22b0c <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   225fc:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   225fe:	f108 0a08 	add.w	sl, r8, #8
   22602:	4649      	mov	r1, r9
   22604:	4650      	mov	r0, sl
   22606:	f7f8 fc01 	bl	1ae0c <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   2260a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2260e:	68a3      	ldr	r3, [r4, #8]
   22610:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   22612:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   22614:	1b92      	subs	r2, r2, r6
   22616:	4431      	add	r1, r6
   22618:	4448      	add	r0, r9
   2261a:	f7dd fe51 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   2261e:	68a3      	ldr	r3, [r4, #8]
   22620:	8999      	ldrh	r1, [r3, #12]
   22622:	1b89      	subs	r1, r1, r6
   22624:	4650      	mov	r0, sl
   22626:	f7f8 fbf1 	bl	1ae0c <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   2262a:	68a2      	ldr	r2, [r4, #8]
   2262c:	2100      	movs	r1, #0
   2262e:	4620      	mov	r0, r4
   22630:	f7fb f928 	bl	1d884 <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   22634:	4641      	mov	r1, r8
   22636:	4620      	mov	r0, r4
   22638:	f7fb f942 	bl	1d8c0 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2263c:	4620      	mov	r0, r4
   2263e:	f7fb f9f9 	bl	1da34 <net_pkt_compact>
	if (fragment) {
   22642:	2f00      	cmp	r7, #0
   22644:	f000 8308 	beq.w	22c58 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   22648:	eba6 0109 	sub.w	r1, r6, r9
   2264c:	4620      	mov	r0, r4
   2264e:	47b8      	blx	r7
   22650:	e6e2      	b.n	22418 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   22652:	2300      	movs	r3, #0
   22654:	e79d      	b.n	22592 <net_6lo_compress+0x1c2>
   22656:	2300      	movs	r3, #0
   22658:	e79b      	b.n	22592 <net_6lo_compress+0x1c2>
   2265a:	2301      	movs	r3, #1
   2265c:	e799      	b.n	22592 <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   2265e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22662:	7853      	ldrb	r3, [r2, #1]
   22664:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   22668:	7053      	strb	r3, [r2, #1]
   2266a:	e7a5      	b.n	225b8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2266c:	8973      	ldrh	r3, [r6, #10]
   2266e:	b91b      	cbnz	r3, 22678 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22670:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22672:	b33b      	cbz	r3, 226c4 <net_6lo_compress+0x2f4>
   22674:	2300      	movs	r3, #0
   22676:	e000      	b.n	2267a <net_6lo_compress+0x2aa>
   22678:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   2267a:	9301      	str	r3, [sp, #4]
   2267c:	2b00      	cmp	r3, #0
   2267e:	d08f      	beq.n	225a0 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22680:	6933      	ldr	r3, [r6, #16]
   22682:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22686:	d01f      	beq.n	226c8 <net_6lo_compress+0x2f8>
   22688:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   2268a:	469a      	mov	sl, r3
   2268c:	bb1b      	cbnz	r3, 226d6 <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   2268e:	f114 0320 	adds.w	r3, r4, #32
   22692:	f000 80bf 	beq.w	22814 <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   22696:	f116 0b08 	adds.w	fp, r6, #8
   2269a:	d008      	beq.n	226ae <net_6lo_compress+0x2de>
   2269c:	b13b      	cbz	r3, 226ae <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   2269e:	791a      	ldrb	r2, [r3, #4]
   226a0:	2a06      	cmp	r2, #6
   226a2:	d03e      	beq.n	22722 <net_6lo_compress+0x352>
   226a4:	2a08      	cmp	r2, #8
   226a6:	f000 808c 	beq.w	227c2 <net_6lo_compress+0x3f2>
   226aa:	2a02      	cmp	r2, #2
   226ac:	d026      	beq.n	226fc <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   226ae:	f1ba 0f00 	cmp.w	sl, #0
   226b2:	f000 809c 	beq.w	227ee <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   226b6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   226ba:	7853      	ldrb	r3, [r2, #1]
   226bc:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   226c0:	7053      	strb	r3, [r2, #1]
   226c2:	e779      	b.n	225b8 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   226c4:	2301      	movs	r3, #1
   226c6:	e7d8      	b.n	2267a <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   226c8:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   226ca:	2bfe      	cmp	r3, #254	; 0xfe
   226cc:	d001      	beq.n	226d2 <net_6lo_compress+0x302>
   226ce:	2300      	movs	r3, #0
   226d0:	e7db      	b.n	2268a <net_6lo_compress+0x2ba>
   226d2:	2301      	movs	r3, #1
   226d4:	e7d9      	b.n	2268a <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   226d6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   226da:	7853      	ldrb	r3, [r2, #1]
   226dc:	f043 0320 	orr.w	r3, r3, #32
   226e0:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   226e2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   226e6:	2202      	movs	r2, #2
   226e8:	f106 0116 	add.w	r1, r6, #22
   226ec:	4448      	add	r0, r9
   226ee:	f7dd fde7 	bl	2c0 <memcpy>
			offset += 2;
   226f2:	f109 0902 	add.w	r9, r9, #2
   226f6:	fa5f f989 	uxtb.w	r9, r9
   226fa:	e75d      	b.n	225b8 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   226fc:	6a21      	ldr	r1, [r4, #32]
   226fe:	f10b 000e 	add.w	r0, fp, #14
   22702:	f008 f8a1 	bl	2a848 <memcmp>
   22706:	2800      	cmp	r0, #0
   22708:	d1d1      	bne.n	226ae <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   2270a:	f8db 3008 	ldr.w	r3, [fp, #8]
   2270e:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   22712:	d1cc      	bne.n	226ae <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   22714:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22718:	2bfe      	cmp	r3, #254	; 0xfe
   2271a:	d1c8      	bne.n	226ae <net_6lo_compress+0x2de>
			return true;
   2271c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22720:	e7c5      	b.n	226ae <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22722:	795b      	ldrb	r3, [r3, #5]
   22724:	2b03      	cmp	r3, #3
   22726:	d026      	beq.n	22776 <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22728:	2b02      	cmp	r3, #2
   2272a:	d1c0      	bne.n	226ae <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2272c:	6a21      	ldr	r1, [r4, #32]
   2272e:	2202      	movs	r2, #2
   22730:	3101      	adds	r1, #1
   22732:	f10b 0009 	add.w	r0, fp, #9
   22736:	f008 f887 	bl	2a848 <memcmp>
   2273a:	2800      	cmp	r0, #0
   2273c:	d1b7      	bne.n	226ae <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2273e:	6a21      	ldr	r1, [r4, #32]
   22740:	2203      	movs	r2, #3
   22742:	4411      	add	r1, r2
   22744:	f10b 000d 	add.w	r0, fp, #13
   22748:	f008 f87e 	bl	2a848 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2274c:	2800      	cmp	r0, #0
   2274e:	d1ae      	bne.n	226ae <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   22750:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22754:	2bff      	cmp	r3, #255	; 0xff
   22756:	d1aa      	bne.n	226ae <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   22758:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2275c:	2bfe      	cmp	r3, #254	; 0xfe
   2275e:	d1a6      	bne.n	226ae <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22760:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22764:	f083 0302 	eor.w	r3, r3, #2
   22768:	6a22      	ldr	r2, [r4, #32]
   2276a:	7812      	ldrb	r2, [r2, #0]
   2276c:	4293      	cmp	r3, r2
   2276e:	d19e      	bne.n	226ae <net_6lo_compress+0x2de>
				return true;
   22770:	f8dd a004 	ldr.w	sl, [sp, #4]
   22774:	e79b      	b.n	226ae <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22776:	6a21      	ldr	r1, [r4, #32]
   22778:	2202      	movs	r2, #2
   2277a:	3101      	adds	r1, #1
   2277c:	f10b 0009 	add.w	r0, fp, #9
   22780:	f008 f862 	bl	2a848 <memcmp>
   22784:	2800      	cmp	r0, #0
   22786:	d192      	bne.n	226ae <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22788:	6a21      	ldr	r1, [r4, #32]
   2278a:	2203      	movs	r2, #3
   2278c:	4411      	add	r1, r2
   2278e:	f10b 000d 	add.w	r0, fp, #13
   22792:	f008 f859 	bl	2a848 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22796:	2800      	cmp	r0, #0
   22798:	d189      	bne.n	226ae <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   2279a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2279e:	2bff      	cmp	r3, #255	; 0xff
   227a0:	d185      	bne.n	226ae <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   227a2:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   227a6:	2bfe      	cmp	r3, #254	; 0xfe
   227a8:	d181      	bne.n	226ae <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   227aa:	f89b 3008 	ldrb.w	r3, [fp, #8]
   227ae:	f083 0302 	eor.w	r3, r3, #2
   227b2:	6a22      	ldr	r2, [r4, #32]
   227b4:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   227b6:	4293      	cmp	r3, r2
   227b8:	f47f af79 	bne.w	226ae <net_6lo_compress+0x2de>
				return true;
   227bc:	f8dd a004 	ldr.w	sl, [sp, #4]
   227c0:	e775      	b.n	226ae <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   227c2:	6a21      	ldr	r1, [r4, #32]
   227c4:	3a01      	subs	r2, #1
   227c6:	3101      	adds	r1, #1
   227c8:	f10b 0009 	add.w	r0, fp, #9
   227cc:	f008 f83c 	bl	2a848 <memcmp>
   227d0:	2800      	cmp	r0, #0
   227d2:	f47f af6c 	bne.w	226ae <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   227d6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   227da:	f083 0302 	eor.w	r3, r3, #2
   227de:	6a22      	ldr	r2, [r4, #32]
   227e0:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   227e2:	4293      	cmp	r3, r2
   227e4:	f47f af63 	bne.w	226ae <net_6lo_compress+0x2de>
			return true;
   227e8:	f8dd a004 	ldr.w	sl, [sp, #4]
   227ec:	e75f      	b.n	226ae <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   227ee:	f8d8 2008 	ldr.w	r2, [r8, #8]
   227f2:	7853      	ldrb	r3, [r2, #1]
   227f4:	f043 0310 	orr.w	r3, r3, #16
   227f8:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   227fa:	f8d8 0008 	ldr.w	r0, [r8, #8]
   227fe:	2208      	movs	r2, #8
   22800:	f106 0110 	add.w	r1, r6, #16
   22804:	4448      	add	r0, r9
   22806:	f7dd fd5b 	bl	2c0 <memcpy>
				offset += 8;
   2280a:	f109 0908 	add.w	r9, r9, #8
   2280e:	fa5f f989 	uxtb.w	r9, r9
   22812:	e6d1      	b.n	225b8 <net_6lo_compress+0x1e8>
				return 0;
   22814:	f04f 0900 	mov.w	r9, #0
   22818:	e6ce      	b.n	225b8 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   2281a:	4640      	mov	r0, r8
   2281c:	f7fb f813 	bl	1d846 <net_pkt_frag_unref>
		return false;
   22820:	2000      	movs	r0, #0
   22822:	e5f9      	b.n	22418 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   22824:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22828:	7853      	ldrb	r3, [r2, #1]
   2282a:	f043 0308 	orr.w	r3, r3, #8
   2282e:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   22830:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22832:	2b02      	cmp	r3, #2
   22834:	d00a      	beq.n	2284c <net_6lo_compress+0x47c>
   22836:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   22838:	b9db      	cbnz	r3, 22872 <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   2283a:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2283c:	bb63      	cbnz	r3, 22898 <net_6lo_compress+0x4c8>
   2283e:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22840:	bba2      	cbnz	r2, 228ac <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   22842:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22846:	b39a      	cbz	r2, 228b0 <net_6lo_compress+0x4e0>
   22848:	2200      	movs	r2, #0
   2284a:	e026      	b.n	2289a <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   2284c:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   2284e:	b943      	cbnz	r3, 22862 <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22850:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22852:	b943      	cbnz	r3, 22866 <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22854:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   22856:	b943      	cbnz	r3, 2286a <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   22858:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   2285c:	b13b      	cbz	r3, 2286e <net_6lo_compress+0x49e>
   2285e:	2300      	movs	r3, #0
   22860:	e7ea      	b.n	22838 <net_6lo_compress+0x468>
   22862:	2300      	movs	r3, #0
   22864:	e7e8      	b.n	22838 <net_6lo_compress+0x468>
   22866:	2300      	movs	r3, #0
   22868:	e7e6      	b.n	22838 <net_6lo_compress+0x468>
   2286a:	2300      	movs	r3, #0
   2286c:	e7e4      	b.n	22838 <net_6lo_compress+0x468>
   2286e:	2301      	movs	r3, #1
   22870:	e7e2      	b.n	22838 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   22872:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22876:	7853      	ldrb	r3, [r2, #1]
   22878:	f043 0303 	orr.w	r3, r3, #3
   2287c:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   2287e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22882:	2201      	movs	r2, #1
   22884:	f106 0127 	add.w	r1, r6, #39	; 0x27
   22888:	4448      	add	r0, r9
   2288a:	f7dd fd19 	bl	2c0 <memcpy>
		offset++;
   2288e:	f109 0901 	add.w	r9, r9, #1
   22892:	fa5f f989 	uxtb.w	r9, r9
   22896:	e6a9      	b.n	225ec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   22898:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   2289a:	b95a      	cbnz	r2, 228b4 <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   2289c:	bb43      	cbnz	r3, 228f0 <net_6lo_compress+0x520>
   2289e:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   228a0:	bbab      	cbnz	r3, 2290e <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   228a2:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   228a6:	b3a3      	cbz	r3, 22912 <net_6lo_compress+0x542>
   228a8:	2300      	movs	r3, #0
   228aa:	e022      	b.n	228f2 <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   228ac:	2200      	movs	r2, #0
   228ae:	e7f4      	b.n	2289a <net_6lo_compress+0x4ca>
   228b0:	2201      	movs	r2, #1
   228b2:	e7f2      	b.n	2289a <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   228b4:	f8d8 2008 	ldr.w	r2, [r8, #8]
   228b8:	7853      	ldrb	r3, [r2, #1]
   228ba:	f043 0302 	orr.w	r3, r3, #2
   228be:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   228c0:	f8d8 0008 	ldr.w	r0, [r8, #8]
   228c4:	2201      	movs	r2, #1
   228c6:	f106 0119 	add.w	r1, r6, #25
   228ca:	4448      	add	r0, r9
   228cc:	f7dd fcf8 	bl	2c0 <memcpy>
		offset++;
   228d0:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   228d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
   228d8:	2203      	movs	r2, #3
   228da:	f106 0125 	add.w	r1, r6, #37	; 0x25
   228de:	fa53 f080 	uxtab	r0, r3, r0
   228e2:	f7dd fced 	bl	2c0 <memcpy>
		offset += 3;
   228e6:	f109 0904 	add.w	r9, r9, #4
   228ea:	fa5f f989 	uxtb.w	r9, r9
   228ee:	e67d      	b.n	225ec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   228f0:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   228f2:	b983      	cbnz	r3, 22916 <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   228f4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   228f8:	2210      	movs	r2, #16
   228fa:	f106 0118 	add.w	r1, r6, #24
   228fe:	4448      	add	r0, r9
   22900:	f7dd fcde 	bl	2c0 <memcpy>
		offset += 16;
   22904:	f109 0910 	add.w	r9, r9, #16
   22908:	fa5f f989 	uxtb.w	r9, r9
   2290c:	e66e      	b.n	225ec <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   2290e:	2300      	movs	r3, #0
   22910:	e7ef      	b.n	228f2 <net_6lo_compress+0x522>
   22912:	2301      	movs	r3, #1
   22914:	e7ed      	b.n	228f2 <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22916:	f8d8 2008 	ldr.w	r2, [r8, #8]
   2291a:	7853      	ldrb	r3, [r2, #1]
   2291c:	f043 0301 	orr.w	r3, r3, #1
   22920:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   22922:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22926:	2201      	movs	r2, #1
   22928:	f106 0119 	add.w	r1, r6, #25
   2292c:	4448      	add	r0, r9
   2292e:	f7dd fcc7 	bl	2c0 <memcpy>
		offset++;
   22932:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   22936:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2293a:	2205      	movs	r2, #5
   2293c:	f106 0123 	add.w	r1, r6, #35	; 0x23
   22940:	fa53 f080 	uxtab	r0, r3, r0
   22944:	f7dd fcbc 	bl	2c0 <memcpy>
		offset += 5;
   22948:	f109 0906 	add.w	r9, r9, #6
   2294c:	fa5f f989 	uxtb.w	r9, r9
   22950:	e64c      	b.n	225ec <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22952:	8b73      	ldrh	r3, [r6, #26]
   22954:	b91b      	cbnz	r3, 2295e <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   22956:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   22958:	b343      	cbz	r3, 229ac <net_6lo_compress+0x5dc>
   2295a:	2300      	movs	r3, #0
   2295c:	e000      	b.n	22960 <net_6lo_compress+0x590>
   2295e:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   22960:	9301      	str	r3, [sp, #4]
   22962:	2b00      	cmp	r3, #0
   22964:	f43f ae36 	beq.w	225d4 <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   22968:	6a33      	ldr	r3, [r6, #32]
   2296a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   2296e:	d01f      	beq.n	229b0 <net_6lo_compress+0x5e0>
   22970:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   22972:	469a      	mov	sl, r3
   22974:	bb1b      	cbnz	r3, 229be <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   22976:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   2297a:	f000 80bf 	beq.w	22afc <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   2297e:	f116 0b18 	adds.w	fp, r6, #24
   22982:	d008      	beq.n	22996 <net_6lo_compress+0x5c6>
   22984:	b13b      	cbz	r3, 22996 <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   22986:	791a      	ldrb	r2, [r3, #4]
   22988:	2a06      	cmp	r2, #6
   2298a:	d03e      	beq.n	22a0a <net_6lo_compress+0x63a>
   2298c:	2a08      	cmp	r2, #8
   2298e:	f000 808c 	beq.w	22aaa <net_6lo_compress+0x6da>
   22992:	2a02      	cmp	r2, #2
   22994:	d026      	beq.n	229e4 <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   22996:	f1ba 0f00 	cmp.w	sl, #0
   2299a:	f000 809c 	beq.w	22ad6 <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   2299e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229a2:	7853      	ldrb	r3, [r2, #1]
   229a4:	f043 0303 	orr.w	r3, r3, #3
   229a8:	7053      	strb	r3, [r2, #1]
   229aa:	e61f      	b.n	225ec <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   229ac:	2301      	movs	r3, #1
   229ae:	e7d7      	b.n	22960 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   229b0:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   229b2:	2bfe      	cmp	r3, #254	; 0xfe
   229b4:	d001      	beq.n	229ba <net_6lo_compress+0x5ea>
   229b6:	2300      	movs	r3, #0
   229b8:	e7db      	b.n	22972 <net_6lo_compress+0x5a2>
   229ba:	2301      	movs	r3, #1
   229bc:	e7d9      	b.n	22972 <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   229be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   229c2:	7853      	ldrb	r3, [r2, #1]
   229c4:	f043 0302 	orr.w	r3, r3, #2
   229c8:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   229ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   229ce:	2202      	movs	r2, #2
   229d0:	f106 0126 	add.w	r1, r6, #38	; 0x26
   229d4:	4448      	add	r0, r9
   229d6:	f7dd fc73 	bl	2c0 <memcpy>
			offset += 2;
   229da:	f109 0902 	add.w	r9, r9, #2
   229de:	fa5f f989 	uxtb.w	r9, r9
   229e2:	e603      	b.n	225ec <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   229e4:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   229e6:	f10b 000e 	add.w	r0, fp, #14
   229ea:	f007 ff2d 	bl	2a848 <memcmp>
   229ee:	2800      	cmp	r0, #0
   229f0:	d1d1      	bne.n	22996 <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   229f2:	f8db 3008 	ldr.w	r3, [fp, #8]
   229f6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   229fa:	d1cc      	bne.n	22996 <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   229fc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   22a00:	2bfe      	cmp	r3, #254	; 0xfe
   22a02:	d1c8      	bne.n	22996 <net_6lo_compress+0x5c6>
			return true;
   22a04:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a08:	e7c5      	b.n	22996 <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   22a0a:	795b      	ldrb	r3, [r3, #5]
   22a0c:	2b03      	cmp	r3, #3
   22a0e:	d026      	beq.n	22a5e <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   22a10:	2b02      	cmp	r3, #2
   22a12:	d1c0      	bne.n	22996 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a14:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a16:	2202      	movs	r2, #2
   22a18:	3101      	adds	r1, #1
   22a1a:	f10b 0009 	add.w	r0, fp, #9
   22a1e:	f007 ff13 	bl	2a848 <memcmp>
   22a22:	2800      	cmp	r0, #0
   22a24:	d1b7      	bne.n	22996 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a26:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a28:	2203      	movs	r2, #3
   22a2a:	4411      	add	r1, r2
   22a2c:	f10b 000d 	add.w	r0, fp, #13
   22a30:	f007 ff0a 	bl	2a848 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a34:	2800      	cmp	r0, #0
   22a36:	d1ae      	bne.n	22996 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22a38:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a3c:	2bff      	cmp	r3, #255	; 0xff
   22a3e:	d1aa      	bne.n	22996 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   22a40:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22a44:	2bfe      	cmp	r3, #254	; 0xfe
   22a46:	d1a6      	bne.n	22996 <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22a48:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22a4c:	f083 0302 	eor.w	r3, r3, #2
   22a50:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22a52:	7812      	ldrb	r2, [r2, #0]
   22a54:	4293      	cmp	r3, r2
   22a56:	d19e      	bne.n	22996 <net_6lo_compress+0x5c6>
				return true;
   22a58:	f8dd a004 	ldr.w	sl, [sp, #4]
   22a5c:	e79b      	b.n	22996 <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a5e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a60:	2202      	movs	r2, #2
   22a62:	3101      	adds	r1, #1
   22a64:	f10b 0009 	add.w	r0, fp, #9
   22a68:	f007 feee 	bl	2a848 <memcmp>
   22a6c:	2800      	cmp	r0, #0
   22a6e:	d192      	bne.n	22996 <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a70:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22a72:	2203      	movs	r2, #3
   22a74:	4411      	add	r1, r2
   22a76:	f10b 000d 	add.w	r0, fp, #13
   22a7a:	f007 fee5 	bl	2a848 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22a7e:	2800      	cmp	r0, #0
   22a80:	d189      	bne.n	22996 <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22a82:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22a86:	2bff      	cmp	r3, #255	; 0xff
   22a88:	d185      	bne.n	22996 <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   22a8a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22a8e:	2bfe      	cmp	r3, #254	; 0xfe
   22a90:	d181      	bne.n	22996 <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22a92:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22a96:	f083 0302 	eor.w	r3, r3, #2
   22a9a:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22a9c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   22a9e:	4293      	cmp	r3, r2
   22aa0:	f47f af79 	bne.w	22996 <net_6lo_compress+0x5c6>
				return true;
   22aa4:	f8dd a004 	ldr.w	sl, [sp, #4]
   22aa8:	e775      	b.n	22996 <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   22aaa:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22aac:	3a01      	subs	r2, #1
   22aae:	3101      	adds	r1, #1
   22ab0:	f10b 0009 	add.w	r0, fp, #9
   22ab4:	f007 fec8 	bl	2a848 <memcmp>
   22ab8:	2800      	cmp	r0, #0
   22aba:	f47f af6c 	bne.w	22996 <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   22abe:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22ac2:	f083 0302 	eor.w	r3, r3, #2
   22ac6:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22ac8:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   22aca:	4293      	cmp	r3, r2
   22acc:	f47f af63 	bne.w	22996 <net_6lo_compress+0x5c6>
			return true;
   22ad0:	f8dd a004 	ldr.w	sl, [sp, #4]
   22ad4:	e75f      	b.n	22996 <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   22ad6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22ada:	7853      	ldrb	r3, [r2, #1]
   22adc:	f043 0301 	orr.w	r3, r3, #1
   22ae0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   22ae2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22ae6:	2208      	movs	r2, #8
   22ae8:	f106 0120 	add.w	r1, r6, #32
   22aec:	4448      	add	r0, r9
   22aee:	f7dd fbe7 	bl	2c0 <memcpy>
				offset += 8;
   22af2:	f109 0908 	add.w	r9, r9, #8
   22af6:	fa5f f989 	uxtb.w	r9, r9
   22afa:	e577      	b.n	225ec <net_6lo_compress+0x21c>
				return 0;
   22afc:	f04f 0900 	mov.w	r9, #0
   22b00:	e574      	b.n	225ec <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   22b02:	4640      	mov	r0, r8
   22b04:	f7fa fe9f 	bl	1d846 <net_pkt_frag_unref>
		return false;
   22b08:	2000      	movs	r0, #0
   22b0a:	e485      	b.n	22418 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   22b0c:	a902      	add	r1, sp, #8
   22b0e:	4620      	mov	r0, r4
   22b10:	f000 fc68 	bl	233e4 <net_udp_get_hdr>
   22b14:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   22b16:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b1a:	22f0      	movs	r2, #240	; 0xf0
   22b1c:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   22b20:	8802      	ldrh	r2, [r0, #0]
   22b22:	0a13      	lsrs	r3, r2, #8
   22b24:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22b28:	b29b      	uxth	r3, r3
   22b2a:	f640 720b 	movw	r2, #3851	; 0xf0b
   22b2e:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   22b32:	d025      	beq.n	22b80 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   22b34:	8872      	ldrh	r2, [r6, #2]
   22b36:	b2d2      	uxtb	r2, r2
   22b38:	2af0      	cmp	r2, #240	; 0xf0
   22b3a:	d046      	beq.n	22bca <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   22b3c:	0a1b      	lsrs	r3, r3, #8
   22b3e:	2bf0      	cmp	r3, #240	; 0xf0
   22b40:	d062      	beq.n	22c08 <net_6lo_compress+0x838>
		offset++;
   22b42:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   22b46:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22b4a:	2204      	movs	r2, #4
   22b4c:	4631      	mov	r1, r6
   22b4e:	fa53 f080 	uxtab	r0, r3, r0
   22b52:	f7dd fbb5 	bl	2c0 <memcpy>
		offset += 4;
   22b56:	f109 0905 	add.w	r9, r9, #5
   22b5a:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   22b5e:	f8d8 0008 	ldr.w	r0, [r8, #8]
   22b62:	2202      	movs	r2, #2
   22b64:	1db1      	adds	r1, r6, #6
   22b66:	4448      	add	r0, r9
   22b68:	f7dd fbaa 	bl	2c0 <memcpy>
	offset += 2;
   22b6c:	f109 0902 	add.w	r9, r9, #2
   22b70:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   22b74:	4631      	mov	r1, r6
   22b76:	4620      	mov	r0, r4
   22b78:	f000 fc74 	bl	23464 <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   22b7c:	2630      	movs	r6, #48	; 0x30
   22b7e:	e53e      	b.n	225fe <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   22b80:	8841      	ldrh	r1, [r0, #2]
   22b82:	0a0a      	lsrs	r2, r1, #8
   22b84:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   22b88:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   22b8c:	f640 710b 	movw	r1, #3851	; 0xf0b
   22b90:	428a      	cmp	r2, r1
   22b92:	d1cf      	bne.n	22b34 <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   22b94:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22b98:	f812 3009 	ldrb.w	r3, [r2, r9]
   22b9c:	f043 0303 	orr.w	r3, r3, #3
   22ba0:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22ba4:	f109 0101 	add.w	r1, r9, #1
   22ba8:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   22baa:	8803      	ldrh	r3, [r0, #0]
   22bac:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   22bae:	011b      	lsls	r3, r3, #4
   22bb0:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   22bb2:	8842      	ldrh	r2, [r0, #2]
   22bb4:	f3c2 2203 	ubfx	r2, r2, #8, #4
   22bb8:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   22bba:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22bbe:	f109 0902 	add.w	r9, r9, #2
   22bc2:	fa5f f989 	uxtb.w	r9, r9
   22bc6:	5453      	strb	r3, [r2, r1]
   22bc8:	e7c9      	b.n	22b5e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   22bca:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22bce:	f812 3009 	ldrb.w	r3, [r2, r9]
   22bd2:	f043 0301 	orr.w	r3, r3, #1
   22bd6:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22bda:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   22bde:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22be2:	2202      	movs	r2, #2
   22be4:	4631      	mov	r1, r6
   22be6:	fa53 f080 	uxtab	r0, r3, r0
   22bea:	f7dd fb69 	bl	2c0 <memcpy>
		offset += 2;
   22bee:	f109 0303 	add.w	r3, r9, #3
   22bf2:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   22bf4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   22bf8:	f109 0904 	add.w	r9, r9, #4
   22bfc:	fa5f f989 	uxtb.w	r9, r9
   22c00:	8872      	ldrh	r2, [r6, #2]
   22c02:	0a12      	lsrs	r2, r2, #8
   22c04:	54ca      	strb	r2, [r1, r3]
   22c06:	e7aa      	b.n	22b5e <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   22c08:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22c0c:	f812 3009 	ldrb.w	r3, [r2, r9]
   22c10:	f043 0302 	orr.w	r3, r3, #2
   22c14:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22c18:	f109 0301 	add.w	r3, r9, #1
   22c1c:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22c20:	f109 0002 	add.w	r0, r9, #2
   22c24:	4631      	mov	r1, r6
   22c26:	f831 2b02 	ldrh.w	r2, [r1], #2
   22c2a:	0a12      	lsrs	r2, r2, #8
   22c2c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22c30:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   22c34:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22c38:	2202      	movs	r2, #2
   22c3a:	fa53 f080 	uxtab	r0, r3, r0
   22c3e:	f7dd fb3f 	bl	2c0 <memcpy>
		offset += 2;
   22c42:	f109 0904 	add.w	r9, r9, #4
   22c46:	fa5f f989 	uxtb.w	r9, r9
   22c4a:	e788      	b.n	22b5e <net_6lo_compress+0x78e>
		return false;
   22c4c:	2000      	movs	r0, #0
   22c4e:	f7ff bbe3 	b.w	22418 <net_6lo_compress+0x48>
		return false;
   22c52:	2000      	movs	r0, #0
   22c54:	f7ff bbe0 	b.w	22418 <net_6lo_compress+0x48>
	return true;
   22c58:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22c5a:	f7ff bbdd 	b.w	22418 <net_6lo_compress+0x48>
		return false;
   22c5e:	4628      	mov	r0, r5
   22c60:	f7ff bbda 	b.w	22418 <net_6lo_compress+0x48>
	return true;
   22c64:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   22c66:	f7ff bbd7 	b.w	22418 <net_6lo_compress+0x48>

00022c6a <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22c6a:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22c6c:	6883      	ldr	r3, [r0, #8]
   22c6e:	689b      	ldr	r3, [r3, #8]
   22c70:	781b      	ldrb	r3, [r3, #0]
   22c72:	f003 0260 	and.w	r2, r3, #96	; 0x60
   22c76:	2a60      	cmp	r2, #96	; 0x60
   22c78:	d005      	beq.n	22c86 <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22c7a:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22c7e:	2b41      	cmp	r3, #65	; 0x41
   22c80:	d004      	beq.n	22c8c <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   22c82:	2001      	movs	r0, #1
}
   22c84:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   22c86:	f7ff f873 	bl	21d70 <uncompress_IPHC_header>
   22c8a:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22c8c:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22c8e:	68a0      	ldr	r0, [r4, #8]
   22c90:	89a2      	ldrh	r2, [r4, #12]
   22c92:	3a01      	subs	r2, #1
   22c94:	1c41      	adds	r1, r0, #1
   22c96:	f007 fe07 	bl	2a8a8 <memmove>
	frag->len -= 1;
   22c9a:	89a3      	ldrh	r3, [r4, #12]
   22c9c:	3b01      	subs	r3, #1
   22c9e:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22ca0:	2001      	movs	r0, #1
   22ca2:	bd10      	pop	{r4, pc}

00022ca4 <net_route_entry_remove>:
{
   22ca4:	4770      	bx	lr

00022ca6 <net_route_entries_table_clear>:
{
   22ca6:	4770      	bx	lr

00022ca8 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22ca8:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22caa:	f7fc fbd3 	bl	1f454 <net_nbr_unref>

	return 0;
}
   22cae:	2000      	movs	r0, #0
   22cb0:	bd08      	pop	{r3, pc}
	...

00022cb4 <net_route_get_nbr>:
{
   22cb4:	b430      	push	{r4, r5}
   22cb6:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22cb8:	2300      	movs	r3, #0
   22cba:	e000      	b.n	22cbe <net_route_get_nbr+0xa>
   22cbc:	3301      	adds	r3, #1
   22cbe:	2b07      	cmp	r3, #7
   22cc0:	dc0b      	bgt.n	22cda <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   22cc2:	4c07      	ldr	r4, [pc, #28]	; (22ce0 <net_route_get_nbr+0x2c>)
   22cc4:	00da      	lsls	r2, r3, #3
   22cc6:	1ad2      	subs	r2, r2, r3
   22cc8:	00d1      	lsls	r1, r2, #3
   22cca:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   22ccc:	5c62      	ldrb	r2, [r4, r1]
   22cce:	2a00      	cmp	r2, #0
   22cd0:	d0f4      	beq.n	22cbc <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   22cd2:	68c2      	ldr	r2, [r0, #12]
   22cd4:	42aa      	cmp	r2, r5
   22cd6:	d1f1      	bne.n	22cbc <net_route_get_nbr+0x8>
   22cd8:	e000      	b.n	22cdc <net_route_get_nbr+0x28>
	return NULL;
   22cda:	2000      	movs	r0, #0
}
   22cdc:	bc30      	pop	{r4, r5}
   22cde:	4770      	bx	lr
   22ce0:	2000c384 	.word	0x2000c384

00022ce4 <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   22ce4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22ce8:	b083      	sub	sp, #12
   22cea:	4606      	mov	r6, r0
   22cec:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22cee:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   22cf0:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   22cf2:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22cf4:	e00b      	b.n	22d0e <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   22cf6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22cfa:	00da      	lsls	r2, r3, #3
   22cfc:	4b3f      	ldr	r3, [pc, #252]	; (22dfc <net_route_lookup+0x118>)
   22cfe:	4413      	add	r3, r2
   22d00:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   22d04:	f898 3020 	ldrb.w	r3, [r8, #32]
   22d08:	429d      	cmp	r5, r3
   22d0a:	d917      	bls.n	22d3c <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   22d0c:	3401      	adds	r4, #1
   22d0e:	2c07      	cmp	r4, #7
   22d10:	dc46      	bgt.n	22da0 <net_route_lookup+0xbc>
   22d12:	f015 0f80 	tst.w	r5, #128	; 0x80
   22d16:	d143      	bne.n	22da0 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22d18:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22d1c:	00d3      	lsls	r3, r2, #3
   22d1e:	4a37      	ldr	r2, [pc, #220]	; (22dfc <net_route_lookup+0x118>)
   22d20:	5cd3      	ldrb	r3, [r2, r3]
   22d22:	2b00      	cmp	r3, #0
   22d24:	d0f2      	beq.n	22d0c <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   22d26:	2e00      	cmp	r6, #0
   22d28:	d0e5      	beq.n	22cf6 <net_route_lookup+0x12>
   22d2a:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22d2e:	00da      	lsls	r2, r3, #3
   22d30:	4b32      	ldr	r3, [pc, #200]	; (22dfc <net_route_lookup+0x118>)
   22d32:	4413      	add	r3, r2
   22d34:	689b      	ldr	r3, [r3, #8]
   22d36:	429e      	cmp	r6, r3
   22d38:	d1e8      	bne.n	22d0c <net_route_lookup+0x28>
   22d3a:	e7dc      	b.n	22cf6 <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22d3c:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22d40:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   22d44:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22d48:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22d4c:	2b80      	cmp	r3, #128	; 0x80
   22d4e:	d906      	bls.n	22d5e <net_route_lookup+0x7a>
		return false;
   22d50:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   22d52:	2b00      	cmp	r3, #0
   22d54:	d0da      	beq.n	22d0c <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   22d56:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22d5a:	4647      	mov	r7, r8
   22d5c:	e7d6      	b.n	22d0c <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22d5e:	465a      	mov	r2, fp
   22d60:	4649      	mov	r1, r9
   22d62:	9801      	ldr	r0, [sp, #4]
   22d64:	f007 fd70 	bl	2a848 <memcmp>
   22d68:	b9b0      	cbnz	r0, 22d98 <net_route_lookup+0xb4>
	if (!remain) {
   22d6a:	f1ba 0f00 	cmp.w	sl, #0
   22d6e:	d015      	beq.n	22d9c <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22d70:	f1ca 0208 	rsb	r2, sl, #8
   22d74:	23ff      	movs	r3, #255	; 0xff
   22d76:	4093      	lsls	r3, r2
   22d78:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22d7c:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22d80:	9b01      	ldr	r3, [sp, #4]
   22d82:	f813 300b 	ldrb.w	r3, [r3, fp]
   22d86:	f819 200b 	ldrb.w	r2, [r9, fp]
   22d8a:	4053      	eors	r3, r2
   22d8c:	ea1a 0f03 	tst.w	sl, r3
   22d90:	bf0c      	ite	eq
   22d92:	2301      	moveq	r3, #1
   22d94:	2300      	movne	r3, #0
   22d96:	e7dc      	b.n	22d52 <net_route_lookup+0x6e>
		return false;
   22d98:	2300      	movs	r3, #0
   22d9a:	e7da      	b.n	22d52 <net_route_lookup+0x6e>
		return true;
   22d9c:	2301      	movs	r3, #1
   22d9e:	e7d8      	b.n	22d52 <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22da0:	b1c7      	cbz	r7, 22dd4 <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   22da2:	463a      	mov	r2, r7
	return list->head;
   22da4:	4b16      	ldr	r3, [pc, #88]	; (22e00 <net_route_lookup+0x11c>)
   22da6:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22da8:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22daa:	b16b      	cbz	r3, 22dc8 <net_route_lookup+0xe4>
		if (test == node) {
   22dac:	429a      	cmp	r2, r3
   22dae:	d002      	beq.n	22db6 <net_route_lookup+0xd2>
		prev = test;
   22db0:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22db2:	681b      	ldr	r3, [r3, #0]
   22db4:	e7f9      	b.n	22daa <net_route_lookup+0xc6>
	if (!prev_node) {
   22db6:	b189      	cbz	r1, 22ddc <net_route_lookup+0xf8>
		prev_node->next = node->next;
   22db8:	683b      	ldr	r3, [r7, #0]
   22dba:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   22dbc:	4b10      	ldr	r3, [pc, #64]	; (22e00 <net_route_lookup+0x11c>)
   22dbe:	685b      	ldr	r3, [r3, #4]
   22dc0:	429a      	cmp	r2, r3
   22dc2:	d014      	beq.n	22dee <net_route_lookup+0x10a>
	node->next = NULL;
   22dc4:	2300      	movs	r3, #0
   22dc6:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   22dc8:	4b0d      	ldr	r3, [pc, #52]	; (22e00 <net_route_lookup+0x11c>)
   22dca:	6819      	ldr	r1, [r3, #0]
   22dcc:	6039      	str	r1, [r7, #0]
	list->head = node;
   22dce:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   22dd0:	685b      	ldr	r3, [r3, #4]
   22dd2:	b17b      	cbz	r3, 22df4 <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   22dd4:	4638      	mov	r0, r7
   22dd6:	b003      	add	sp, #12
   22dd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   22ddc:	6839      	ldr	r1, [r7, #0]
   22dde:	4b08      	ldr	r3, [pc, #32]	; (22e00 <net_route_lookup+0x11c>)
   22de0:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   22de2:	685b      	ldr	r3, [r3, #4]
   22de4:	429a      	cmp	r2, r3
   22de6:	d1ed      	bne.n	22dc4 <net_route_lookup+0xe0>
			list->tail = list->head;
   22de8:	4b05      	ldr	r3, [pc, #20]	; (22e00 <net_route_lookup+0x11c>)
   22dea:	6059      	str	r1, [r3, #4]
   22dec:	e7ea      	b.n	22dc4 <net_route_lookup+0xe0>
			list->tail = prev_node;
   22dee:	4b04      	ldr	r3, [pc, #16]	; (22e00 <net_route_lookup+0x11c>)
   22df0:	6059      	str	r1, [r3, #4]
   22df2:	e7e7      	b.n	22dc4 <net_route_lookup+0xe0>
		list->tail = list->head;
   22df4:	4b02      	ldr	r3, [pc, #8]	; (22e00 <net_route_lookup+0x11c>)
   22df6:	605a      	str	r2, [r3, #4]
	return found;
   22df8:	e7ec      	b.n	22dd4 <net_route_lookup+0xf0>
   22dfa:	bf00      	nop
   22dfc:	2000c384 	.word	0x2000c384
   22e00:	20001fd4 	.word	0x20001fd4

00022e04 <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   22e04:	2800      	cmp	r0, #0
   22e06:	d046      	beq.n	22e96 <net_route_del+0x92>
{
   22e08:	b538      	push	{r3, r4, r5, lr}
   22e0a:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   22e0c:	4601      	mov	r1, r0
	return list->head;
   22e0e:	4b25      	ldr	r3, [pc, #148]	; (22ea4 <net_route_del+0xa0>)
   22e10:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22e12:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22e14:	b16b      	cbz	r3, 22e32 <net_route_del+0x2e>
		if (test == node) {
   22e16:	4299      	cmp	r1, r3
   22e18:	d002      	beq.n	22e20 <net_route_del+0x1c>
		prev = test;
   22e1a:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22e1c:	681b      	ldr	r3, [r3, #0]
   22e1e:	e7f9      	b.n	22e14 <net_route_del+0x10>
	if (!prev_node) {
   22e20:	b1aa      	cbz	r2, 22e4e <net_route_del+0x4a>
		prev_node->next = node->next;
   22e22:	6823      	ldr	r3, [r4, #0]
   22e24:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   22e26:	4b1f      	ldr	r3, [pc, #124]	; (22ea4 <net_route_del+0xa0>)
   22e28:	685b      	ldr	r3, [r3, #4]
   22e2a:	429c      	cmp	r4, r3
   22e2c:	d018      	beq.n	22e60 <net_route_del+0x5c>
	node->next = NULL;
   22e2e:	2300      	movs	r3, #0
   22e30:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   22e32:	4620      	mov	r0, r4
   22e34:	f7ff ff3e 	bl	22cb4 <net_route_get_nbr>
	if (!nbr) {
   22e38:	4605      	mov	r5, r0
   22e3a:	2800      	cmp	r0, #0
   22e3c:	d02e      	beq.n	22e9c <net_route_del+0x98>
   22e3e:	2300      	movs	r3, #0
   22e40:	461a      	mov	r2, r3
   22e42:	6881      	ldr	r1, [r0, #8]
   22e44:	4818      	ldr	r0, [pc, #96]	; (22ea8 <net_route_del+0xa4>)
   22e46:	f000 f977 	bl	23138 <net_mgmt_event_notify_with_info>
	return list->head;
   22e4a:	6864      	ldr	r4, [r4, #4]
   22e4c:	e011      	b.n	22e72 <net_route_del+0x6e>
		list->head = node->next;
   22e4e:	6822      	ldr	r2, [r4, #0]
   22e50:	4b14      	ldr	r3, [pc, #80]	; (22ea4 <net_route_del+0xa0>)
   22e52:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22e54:	685b      	ldr	r3, [r3, #4]
   22e56:	429c      	cmp	r4, r3
   22e58:	d1e9      	bne.n	22e2e <net_route_del+0x2a>
			list->tail = list->head;
   22e5a:	4b12      	ldr	r3, [pc, #72]	; (22ea4 <net_route_del+0xa0>)
   22e5c:	605a      	str	r2, [r3, #4]
   22e5e:	e7e6      	b.n	22e2e <net_route_del+0x2a>
			list->tail = prev_node;
   22e60:	4b10      	ldr	r3, [pc, #64]	; (22ea4 <net_route_del+0xa0>)
   22e62:	605a      	str	r2, [r3, #4]
   22e64:	e7e3      	b.n	22e2e <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e66:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e68:	b154      	cbz	r4, 22e80 <net_route_del+0x7c>
	return node->next;
   22e6a:	6823      	ldr	r3, [r4, #0]
   22e6c:	b153      	cbz	r3, 22e84 <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e6e:	b15a      	cbz	r2, 22e88 <net_route_del+0x84>
	return node->next;
   22e70:	6824      	ldr	r4, [r4, #0]
   22e72:	b15c      	cbz	r4, 22e8c <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   22e74:	6860      	ldr	r0, [r4, #4]
   22e76:	2800      	cmp	r0, #0
   22e78:	d0f5      	beq.n	22e66 <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22e7a:	f7ff ff15 	bl	22ca8 <nbr_nexthop_put>
   22e7e:	e7f2      	b.n	22e66 <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22e80:	4623      	mov	r3, r4
   22e82:	e7f3      	b.n	22e6c <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22e84:	2400      	movs	r4, #0
   22e86:	e7f4      	b.n	22e72 <net_route_del+0x6e>
   22e88:	2400      	movs	r4, #0
   22e8a:	e7f2      	b.n	22e72 <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22e8c:	4628      	mov	r0, r5
   22e8e:	f7fc fae1 	bl	1f454 <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   22e92:	2000      	movs	r0, #0
   22e94:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22e96:	f06f 0015 	mvn.w	r0, #21
   22e9a:	4770      	bx	lr
		return -ENOENT;
   22e9c:	f06f 0001 	mvn.w	r0, #1
}
   22ea0:	bd38      	pop	{r3, r4, r5, pc}
   22ea2:	bf00      	nop
   22ea4:	20001fd4 	.word	0x20001fd4
   22ea8:	f060000c 	.word	0xf060000c

00022eac <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22eac:	b1b8      	cbz	r0, 22ede <net_route_get_nexthop+0x32>
	return list->head;
   22eae:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22eb0:	b19b      	cbz	r3, 22eda <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   22eb2:	685a      	ldr	r2, [r3, #4]
   22eb4:	7851      	ldrb	r1, [r2, #1]
   22eb6:	29ff      	cmp	r1, #255	; 0xff
   22eb8:	d002      	beq.n	22ec0 <net_route_get_nexthop+0x14>
   22eba:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   22ebc:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   22ebe:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22ec0:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ec2:	b123      	cbz	r3, 22ece <net_route_get_nexthop+0x22>
	return node->next;
   22ec4:	681a      	ldr	r2, [r3, #0]
   22ec6:	b132      	cbz	r2, 22ed6 <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ec8:	b119      	cbz	r1, 22ed2 <net_route_get_nexthop+0x26>
	return node->next;
   22eca:	681b      	ldr	r3, [r3, #0]
   22ecc:	e7f0      	b.n	22eb0 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ece:	461a      	mov	r2, r3
   22ed0:	e7f9      	b.n	22ec6 <net_route_get_nexthop+0x1a>
   22ed2:	2300      	movs	r3, #0
   22ed4:	e7ec      	b.n	22eb0 <net_route_get_nexthop+0x4>
   22ed6:	2300      	movs	r3, #0
   22ed8:	e7ea      	b.n	22eb0 <net_route_get_nexthop+0x4>
	}

	return NULL;
   22eda:	2000      	movs	r0, #0
   22edc:	4770      	bx	lr
		return NULL;
   22ede:	2000      	movs	r0, #0
}
   22ee0:	4770      	bx	lr
	...

00022ee4 <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   22ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22ee6:	4607      	mov	r7, r0
   22ee8:	460e      	mov	r6, r1
	int i, ret = 0;
   22eea:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   22eec:	462c      	mov	r4, r5
   22eee:	e000      	b.n	22ef2 <net_route_foreach+0xe>
   22ef0:	3401      	adds	r4, #1
   22ef2:	2c07      	cmp	r4, #7
   22ef4:	dc0b      	bgt.n	22f0e <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   22ef6:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22efa:	00da      	lsls	r2, r3, #3
   22efc:	4b05      	ldr	r3, [pc, #20]	; (22f14 <net_route_foreach+0x30>)
   22efe:	4413      	add	r3, r2
   22f00:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   22f02:	2800      	cmp	r0, #0
   22f04:	d0f4      	beq.n	22ef0 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   22f06:	4631      	mov	r1, r6
   22f08:	47b8      	blx	r7

		ret++;
   22f0a:	3501      	adds	r5, #1
   22f0c:	e7f0      	b.n	22ef0 <net_route_foreach+0xc>
	}

	return ret;
}
   22f0e:	4628      	mov	r0, r5
   22f10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22f12:	bf00      	nop
   22f14:	2000c384 	.word	0x2000c384

00022f18 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22f18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22f1a:	4607      	mov	r7, r0
   22f1c:	460c      	mov	r4, r1
   22f1e:	4615      	mov	r5, r2
   22f20:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   22f22:	f7fd f961 	bl	201e8 <net_ipv6_nbr_lookup>
   22f26:	b120      	cbz	r0, 22f32 <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22f28:	2300      	movs	r3, #0
   22f2a:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22f2c:	6034      	str	r4, [r6, #0]

		return true;
   22f2e:	2001      	movs	r0, #1
   22f30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   22f32:	4621      	mov	r1, r4
   22f34:	4638      	mov	r0, r7
   22f36:	f7ff fed5 	bl	22ce4 <net_route_lookup>
   22f3a:	6028      	str	r0, [r5, #0]
	if (*route) {
   22f3c:	b130      	cbz	r0, 22f4c <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22f3e:	f7ff ffb5 	bl	22eac <net_route_get_nexthop>
   22f42:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   22f44:	b108      	cbz	r0, 22f4a <net_route_get_info+0x32>
			return false;
		}

		return true;
   22f46:	2001      	movs	r0, #1
   22f48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22f4a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22f4c:	4621      	mov	r1, r4
   22f4e:	2000      	movs	r0, #0
   22f50:	f7f8 fefe 	bl	1bd50 <net_if_ipv6_router_find_default>
		if (!router) {
   22f54:	4603      	mov	r3, r0
   22f56:	b118      	cbz	r0, 22f60 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22f58:	332c      	adds	r3, #44	; 0x2c
   22f5a:	6033      	str	r3, [r6, #0]

		return true;
   22f5c:	2001      	movs	r0, #1
   22f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22f60:	2000      	movs	r0, #0
	}

	return false;
}
   22f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00022f64 <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   22f64:	b570      	push	{r4, r5, r6, lr}
   22f66:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22f68:	6940      	ldr	r0, [r0, #20]
   22f6a:	f7fd f93d 	bl	201e8 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22f6e:	b330      	cbz	r0, 22fbe <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22f70:	7840      	ldrb	r0, [r0, #1]
   22f72:	f7fc fb01 	bl	1f578 <net_nbr_get_lladdr>
	if (!lladdr) {
   22f76:	4605      	mov	r5, r0
   22f78:	b320      	cbz	r0, 22fc4 <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22f7a:	6a20      	ldr	r0, [r4, #32]
   22f7c:	b328      	cbz	r0, 22fca <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22f7e:	1cae      	adds	r6, r5, #2
   22f80:	786a      	ldrb	r2, [r5, #1]
   22f82:	4631      	mov	r1, r6
   22f84:	f007 fc60 	bl	2a848 <memcmp>
   22f88:	b310      	cbz	r0, 22fd0 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22f8a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22f8e:	f043 0304 	orr.w	r3, r3, #4
   22f92:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   22f96:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22f98:	691a      	ldr	r2, [r3, #16]
   22f9a:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22f9c:	7d5a      	ldrb	r2, [r3, #21]
   22f9e:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   22fa2:	7d1b      	ldrb	r3, [r3, #20]
   22fa4:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22fa8:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22faa:	782b      	ldrb	r3, [r5, #0]
   22fac:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22fb0:	786b      	ldrb	r3, [r5, #1]
   22fb2:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   22fb6:	4620      	mov	r0, r4
   22fb8:	f7f8 f84a 	bl	1b050 <net_send_data>
   22fbc:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   22fbe:	f06f 0001 	mvn.w	r0, #1
   22fc2:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   22fc4:	f06f 0002 	mvn.w	r0, #2
   22fc8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22fca:	f06f 0015 	mvn.w	r0, #21
   22fce:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   22fd0:	f06f 0015 	mvn.w	r0, #21
}
   22fd4:	bd70      	pop	{r4, r5, r6, pc}

00022fd6 <net_route_init>:

void net_route_init(void)
{
   22fd6:	4770      	bx	lr

00022fd8 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   22fd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22fda:	e079      	b.n	230d0 <mgmt_thread+0xf8>
		out_event = 0;
   22fdc:	2100      	movs	r1, #0
   22fde:	4a48      	ldr	r2, [pc, #288]	; (23100 <mgmt_thread+0x128>)
   22fe0:	8011      	strh	r1, [r2, #0]
   22fe2:	e089      	b.n	230f8 <mgmt_thread+0x120>
		return NULL;
   22fe4:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   22fe6:	b13e      	cbz	r6, 22ff8 <mgmt_thread+0x20>
	return list->head;
   22fe8:	4b46      	ldr	r3, [pc, #280]	; (23104 <mgmt_thread+0x12c>)
   22fea:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22fec:	b15d      	cbz	r5, 23006 <mgmt_thread+0x2e>
   22fee:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ff0:	b105      	cbz	r5, 22ff4 <mgmt_thread+0x1c>
	return node->next;
   22ff2:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22ff4:	2700      	movs	r7, #0
   22ff6:	e01f      	b.n	23038 <mgmt_thread+0x60>
   22ff8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22ffc:	2100      	movs	r1, #0
   22ffe:	4842      	ldr	r0, [pc, #264]	; (23108 <mgmt_thread+0x130>)
   23000:	f006 f9fa 	bl	293f8 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   23004:	e064      	b.n	230d0 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   23006:	462c      	mov	r4, r5
   23008:	e7f4      	b.n	22ff4 <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   2300a:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   2300e:	d04c      	beq.n	230aa <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   23010:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   23012:	6993      	ldr	r3, [r2, #24]
   23014:	2b00      	cmp	r3, #0
   23016:	d02c      	beq.n	23072 <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   23018:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   2301a:	4283      	cmp	r3, r0
   2301c:	d029      	beq.n	23072 <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   2301e:	2c00      	cmp	r4, #0
   23020:	d04b      	beq.n	230ba <mgmt_thread+0xe2>
   23022:	4622      	mov	r2, r4
   23024:	2c00      	cmp	r4, #0
   23026:	d046      	beq.n	230b6 <mgmt_thread+0xde>
	return node->next;
   23028:	6823      	ldr	r3, [r4, #0]
   2302a:	2b00      	cmp	r3, #0
   2302c:	d047      	beq.n	230be <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2302e:	2a00      	cmp	r2, #0
   23030:	d047      	beq.n	230c2 <mgmt_thread+0xea>
	return node->next;
   23032:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23034:	4625      	mov	r5, r4
   23036:	461c      	mov	r4, r3
   23038:	2d00      	cmp	r5, #0
   2303a:	d044      	beq.n	230c6 <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   2303c:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2303e:	68aa      	ldr	r2, [r5, #8]
   23040:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   23042:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   23046:	f013 0f03 	tst.w	r3, #3
   2304a:	d0e8      	beq.n	2301e <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   2304c:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   2304e:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   23052:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   23056:	2b00      	cmp	r3, #0
   23058:	d0e1      	beq.n	2301e <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2305a:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   2305c:	2b00      	cmp	r3, #0
   2305e:	d0d4      	beq.n	2300a <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   23060:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   23062:	2b00      	cmp	r3, #0
   23064:	d0d1      	beq.n	2300a <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   23066:	ea01 0302 	and.w	r3, r1, r2
   2306a:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   2306c:	2b00      	cmp	r3, #0
   2306e:	d0d6      	beq.n	2301e <mgmt_thread+0x46>
   23070:	e7cb      	b.n	2300a <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   23072:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   23074:	6873      	ldr	r3, [r6, #4]
   23076:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   23078:	b15f      	cbz	r7, 23092 <mgmt_thread+0xba>
		prev_node->next = node->next;
   2307a:	682b      	ldr	r3, [r5, #0]
   2307c:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   2307e:	4b21      	ldr	r3, [pc, #132]	; (23104 <mgmt_thread+0x12c>)
   23080:	685b      	ldr	r3, [r3, #4]
   23082:	429d      	cmp	r5, r3
   23084:	d00e      	beq.n	230a4 <mgmt_thread+0xcc>
	node->next = NULL;
   23086:	2300      	movs	r3, #0
   23088:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2308a:	6868      	ldr	r0, [r5, #4]
   2308c:	f006 f9bd 	bl	2940a <_impl_k_sem_give>
   23090:	e7c5      	b.n	2301e <mgmt_thread+0x46>
		list->head = node->next;
   23092:	682a      	ldr	r2, [r5, #0]
   23094:	4b1b      	ldr	r3, [pc, #108]	; (23104 <mgmt_thread+0x12c>)
   23096:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   23098:	685b      	ldr	r3, [r3, #4]
   2309a:	429d      	cmp	r5, r3
   2309c:	d1f3      	bne.n	23086 <mgmt_thread+0xae>
			list->tail = list->head;
   2309e:	4b19      	ldr	r3, [pc, #100]	; (23104 <mgmt_thread+0x12c>)
   230a0:	605a      	str	r2, [r3, #4]
   230a2:	e7f0      	b.n	23086 <mgmt_thread+0xae>
			list->tail = prev_node;
   230a4:	4b17      	ldr	r3, [pc, #92]	; (23104 <mgmt_thread+0x12c>)
   230a6:	605f      	str	r7, [r3, #4]
   230a8:	e7ed      	b.n	23086 <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   230aa:	686b      	ldr	r3, [r5, #4]
   230ac:	6872      	ldr	r2, [r6, #4]
   230ae:	4628      	mov	r0, r5
   230b0:	4798      	blx	r3
			prev = &cb->node;
   230b2:	462f      	mov	r7, r5
   230b4:	e7b3      	b.n	2301e <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   230b6:	4623      	mov	r3, r4
   230b8:	e7b7      	b.n	2302a <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   230ba:	4623      	mov	r3, r4
   230bc:	e7ba      	b.n	23034 <mgmt_thread+0x5c>
   230be:	2300      	movs	r3, #0
   230c0:	e7b8      	b.n	23034 <mgmt_thread+0x5c>
   230c2:	2300      	movs	r3, #0
   230c4:	e7b6      	b.n	23034 <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   230c6:	2300      	movs	r3, #0
   230c8:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   230ca:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   230cc:	f006 f844 	bl	29158 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   230d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   230d4:	480c      	ldr	r0, [pc, #48]	; (23108 <mgmt_thread+0x130>)
   230d6:	f006 f9ab 	bl	29430 <_impl_k_sem_take>
	if (!events[out_event].event) {
   230da:	4b09      	ldr	r3, [pc, #36]	; (23100 <mgmt_thread+0x128>)
   230dc:	881b      	ldrh	r3, [r3, #0]
   230de:	4a0b      	ldr	r2, [pc, #44]	; (2310c <mgmt_thread+0x134>)
   230e0:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   230e4:	2a00      	cmp	r2, #0
   230e6:	f43f af7d 	beq.w	22fe4 <mgmt_thread+0xc>
	out_event++;
   230ea:	1c5a      	adds	r2, r3, #1
   230ec:	b292      	uxth	r2, r2
   230ee:	4904      	ldr	r1, [pc, #16]	; (23100 <mgmt_thread+0x128>)
   230f0:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   230f2:	2a02      	cmp	r2, #2
   230f4:	f43f af72 	beq.w	22fdc <mgmt_thread+0x4>
	return &events[o_idx];
   230f8:	4e04      	ldr	r6, [pc, #16]	; (2310c <mgmt_thread+0x134>)
   230fa:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   230fe:	e772      	b.n	22fe6 <mgmt_thread+0xe>
   23100:	20002064 	.word	0x20002064
   23104:	20001fdc 	.word	0x20001fdc
   23108:	2000d138 	.word	0x2000d138
   2310c:	20001fe4 	.word	0x20001fe4

00023110 <net_mgmt_add_event_callback>:
	node->next = list->head;
   23110:	4b07      	ldr	r3, [pc, #28]	; (23130 <net_mgmt_add_event_callback+0x20>)
   23112:	681a      	ldr	r2, [r3, #0]
   23114:	6002      	str	r2, [r0, #0]
	list->head = node;
   23116:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   23118:	685b      	ldr	r3, [r3, #4]
   2311a:	b12b      	cbz	r3, 23128 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   2311c:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   2311e:	4a05      	ldr	r2, [pc, #20]	; (23134 <net_mgmt_add_event_callback+0x24>)
   23120:	6813      	ldr	r3, [r2, #0]
   23122:	430b      	orrs	r3, r1
   23124:	6013      	str	r3, [r2, #0]
   23126:	4770      	bx	lr
		list->tail = list->head;
   23128:	4b01      	ldr	r3, [pc, #4]	; (23130 <net_mgmt_add_event_callback+0x20>)
   2312a:	6058      	str	r0, [r3, #4]
   2312c:	e7f6      	b.n	2311c <net_mgmt_add_event_callback+0xc>
   2312e:	bf00      	nop
   23130:	20001fdc 	.word	0x20001fdc
   23134:	20001ff4 	.word	0x20001ff4

00023138 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   23138:	4b17      	ldr	r3, [pc, #92]	; (23198 <net_mgmt_event_notify_with_info+0x60>)
   2313a:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   2313c:	ea30 0303 	bics.w	r3, r0, r3
   23140:	d000      	beq.n	23144 <net_mgmt_event_notify_with_info+0xc>
   23142:	4770      	bx	lr
{
   23144:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   23146:	4c15      	ldr	r4, [pc, #84]	; (2319c <net_mgmt_event_notify_with_info+0x64>)
   23148:	8823      	ldrh	r3, [r4, #0]
   2314a:	4a15      	ldr	r2, [pc, #84]	; (231a0 <net_mgmt_event_notify_with_info+0x68>)
   2314c:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   23150:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   23154:	6051      	str	r1, [r2, #4]
	in_event++;
   23156:	3301      	adds	r3, #1
   23158:	b29b      	uxth	r3, r3
   2315a:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2315c:	2b02      	cmp	r3, #2
   2315e:	d009      	beq.n	23174 <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   23160:	4b0e      	ldr	r3, [pc, #56]	; (2319c <net_mgmt_event_notify_with_info+0x64>)
   23162:	881a      	ldrh	r2, [r3, #0]
   23164:	4b0f      	ldr	r3, [pc, #60]	; (231a4 <net_mgmt_event_notify_with_info+0x6c>)
   23166:	881b      	ldrh	r3, [r3, #0]
   23168:	429a      	cmp	r2, r3
   2316a:	d006      	beq.n	2317a <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2316c:	480e      	ldr	r0, [pc, #56]	; (231a8 <net_mgmt_event_notify_with_info+0x70>)
   2316e:	f006 f94c 	bl	2940a <_impl_k_sem_give>
   23172:	bd10      	pop	{r4, pc}
		in_event = 0;
   23174:	2200      	movs	r2, #0
   23176:	8022      	strh	r2, [r4, #0]
   23178:	e7f2      	b.n	23160 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   2317a:	3301      	adds	r3, #1
   2317c:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   2317e:	2b02      	cmp	r3, #2
   23180:	d007      	beq.n	23192 <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   23182:	4a07      	ldr	r2, [pc, #28]	; (231a0 <net_mgmt_event_notify_with_info+0x68>)
   23184:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   23188:	2a00      	cmp	r2, #0
   2318a:	d0ef      	beq.n	2316c <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   2318c:	4a05      	ldr	r2, [pc, #20]	; (231a4 <net_mgmt_event_notify_with_info+0x6c>)
   2318e:	8013      	strh	r3, [r2, #0]
   23190:	e7ec      	b.n	2316c <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   23192:	2300      	movs	r3, #0
   23194:	e7f5      	b.n	23182 <net_mgmt_event_notify_with_info+0x4a>
   23196:	bf00      	nop
   23198:	20001ff4 	.word	0x20001ff4
   2319c:	20001ff8 	.word	0x20001ff8
   231a0:	20001fe4 	.word	0x20001fe4
   231a4:	20002064 	.word	0x20002064
   231a8:	2000d138 	.word	0x2000d138

000231ac <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   231ac:	b510      	push	{r4, lr}
   231ae:	b086      	sub	sp, #24
	list->head = NULL;
   231b0:	4b0f      	ldr	r3, [pc, #60]	; (231f0 <net_mgmt_event_init+0x44>)
   231b2:	2400      	movs	r4, #0
   231b4:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   231b6:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   231b8:	4b0e      	ldr	r3, [pc, #56]	; (231f4 <net_mgmt_event_init+0x48>)
   231ba:	601c      	str	r4, [r3, #0]

	in_event = 0;
   231bc:	4b0e      	ldr	r3, [pc, #56]	; (231f8 <net_mgmt_event_init+0x4c>)
   231be:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   231c0:	4b0e      	ldr	r3, [pc, #56]	; (231fc <net_mgmt_event_init+0x50>)
   231c2:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   231c4:	2210      	movs	r2, #16
   231c6:	4621      	mov	r1, r4
   231c8:	480d      	ldr	r0, [pc, #52]	; (23200 <net_mgmt_event_init+0x54>)
   231ca:	f007 fbd1 	bl	2a970 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   231ce:	9405      	str	r4, [sp, #20]
   231d0:	9404      	str	r4, [sp, #16]
   231d2:	f06f 0308 	mvn.w	r3, #8
   231d6:	9303      	str	r3, [sp, #12]
   231d8:	9402      	str	r4, [sp, #8]
   231da:	9401      	str	r4, [sp, #4]
   231dc:	9400      	str	r4, [sp, #0]
   231de:	4b09      	ldr	r3, [pc, #36]	; (23204 <net_mgmt_event_init+0x58>)
   231e0:	f44f 7200 	mov.w	r2, #512	; 0x200
   231e4:	4908      	ldr	r1, [pc, #32]	; (23208 <net_mgmt_event_init+0x5c>)
   231e6:	4809      	ldr	r0, [pc, #36]	; (2320c <net_mgmt_event_init+0x60>)
   231e8:	f006 fb8e 	bl	29908 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   231ec:	b006      	add	sp, #24
   231ee:	bd10      	pop	{r4, pc}
   231f0:	20001fdc 	.word	0x20001fdc
   231f4:	20001ff4 	.word	0x20001ff4
   231f8:	20001ff8 	.word	0x20001ff8
   231fc:	20002064 	.word	0x20002064
   23200:	20001fe4 	.word	0x20001fe4
   23204:	00022fd9 	.word	0x00022fd9
   23208:	200099c8 	.word	0x200099c8
   2320c:	20001ffc 	.word	0x20001ffc

00023210 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   23210:	b5f0      	push	{r4, r5, r6, r7, lr}
   23212:	b085      	sub	sp, #20
   23214:	4605      	mov	r5, r0
   23216:	f8ad 2006 	strh.w	r2, [sp, #6]
   2321a:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   2321e:	f10d 020e 	add.w	r2, sp, #14
   23222:	f7fa fde5 	bl	1ddf0 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   23226:	4602      	mov	r2, r0
   23228:	b168      	cbz	r0, 23246 <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   2322a:	b11a      	cbz	r2, 23234 <net_udp_insert_raw+0x24>
   2322c:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   23230:	2b00      	cmp	r3, #0
   23232:	d15c      	bne.n	232ee <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   23234:	68ab      	ldr	r3, [r5, #8]
   23236:	429a      	cmp	r2, r3
   23238:	d00d      	beq.n	23256 <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   2323a:	681c      	ldr	r4, [r3, #0]
   2323c:	b174      	cbz	r4, 2325c <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   2323e:	42a2      	cmp	r2, r4
   23240:	d00b      	beq.n	2325a <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   23242:	4623      	mov	r3, r4
   23244:	e7f9      	b.n	2323a <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   23246:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2324a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2324e:	4299      	cmp	r1, r3
   23250:	d1eb      	bne.n	2322a <net_udp_insert_raw+0x1a>
		return NULL;
   23252:	2000      	movs	r0, #0
   23254:	e049      	b.n	232ea <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   23256:	461c      	mov	r4, r3
   23258:	e000      	b.n	2325c <net_udp_insert_raw+0x4c>
				prev = tmp;
   2325a:	461c      	mov	r4, r3
	}

	if (!prev) {
   2325c:	2c00      	cmp	r4, #0
   2325e:	d048      	beq.n	232f2 <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   23260:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   23264:	4628      	mov	r0, r5
   23266:	f7fa faa1 	bl	1d7ac <net_pkt_get_frag>
	if (!udp) {
   2326a:	4607      	mov	r7, r0
   2326c:	2800      	cmp	r0, #0
   2326e:	d042      	beq.n	232f6 <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   23270:	f100 0608 	add.w	r6, r0, #8
   23274:	2202      	movs	r2, #2
   23276:	f10d 0106 	add.w	r1, sp, #6
   2327a:	4630      	mov	r0, r6
   2327c:	f7f7 fdcc 	bl	1ae18 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   23280:	2202      	movs	r2, #2
   23282:	a901      	add	r1, sp, #4
   23284:	4630      	mov	r0, r6
   23286:	f7f7 fdc7 	bl	1ae18 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   2328a:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   2328c:	2200      	movs	r2, #0
   2328e:	e002      	b.n	23296 <net_udp_insert_raw+0x86>
		bytes += buf->len;
   23290:	8999      	ldrh	r1, [r3, #12]
   23292:	440a      	add	r2, r1
		buf = buf->frags;
   23294:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23296:	2b00      	cmp	r3, #0
   23298:	d1fa      	bne.n	23290 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   2329a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   2329e:	1a51      	subs	r1, r2, r1
   232a0:	b289      	uxth	r1, r1
   232a2:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   232a6:	1a89      	subs	r1, r1, r2
   232a8:	b289      	uxth	r1, r1
   232aa:	3108      	adds	r1, #8
   232ac:	b289      	uxth	r1, r1
   232ae:	4630      	mov	r0, r6
   232b0:	f7f7 fdd2 	bl	1ae58 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   232b4:	2100      	movs	r1, #0
   232b6:	4630      	mov	r0, r6
   232b8:	f7f7 fdce 	bl	1ae58 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   232bc:	4639      	mov	r1, r7
   232be:	4620      	mov	r0, r4
   232c0:	f7f7 fd7e 	bl	1adc0 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   232c4:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   232c8:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   232cc:	4419      	add	r1, r3
   232ce:	3108      	adds	r1, #8
   232d0:	f10d 020e 	add.w	r2, sp, #14
   232d4:	b289      	uxth	r1, r1
   232d6:	4628      	mov	r0, r5
   232d8:	f7fa fd8a 	bl	1ddf0 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   232dc:	b168      	cbz	r0, 232fa <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   232de:	6883      	ldr	r3, [r0, #8]
   232e0:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   232e4:	4413      	add	r3, r2
	pkt->appdata = data;
   232e6:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   232e8:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   232ea:	b005      	add	sp, #20
   232ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   232ee:	2000      	movs	r0, #0
   232f0:	e7fb      	b.n	232ea <net_udp_insert_raw+0xda>
	return NULL;
   232f2:	2000      	movs	r0, #0
   232f4:	e7f9      	b.n	232ea <net_udp_insert_raw+0xda>
   232f6:	2000      	movs	r0, #0
   232f8:	e7f7      	b.n	232ea <net_udp_insert_raw+0xda>
	return pkt;
   232fa:	4628      	mov	r0, r5
   232fc:	e7f5      	b.n	232ea <net_udp_insert_raw+0xda>

000232fe <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   232fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23302:	b086      	sub	sp, #24
   23304:	4606      	mov	r6, r0
   23306:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   23308:	2300      	movs	r3, #0
   2330a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   2330e:	f7fa fda5 	bl	1de5c <net_pkt_udp_data>
   23312:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23314:	2208      	movs	r2, #8
   23316:	4601      	mov	r1, r0
   23318:	4630      	mov	r0, r6
   2331a:	f7fb f95d 	bl	1e5d8 <net_header_fits>
   2331e:	b170      	cbz	r0, 2333e <net_udp_set_chksum+0x40>
		return hdr;
   23320:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   23322:	b173      	cbz	r3, 23342 <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   23324:	2300      	movs	r3, #0
   23326:	71a3      	strb	r3, [r4, #6]
   23328:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2332a:	2111      	movs	r1, #17
   2332c:	4630      	mov	r0, r6
   2332e:	f7fb f8fa 	bl	1e526 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   23332:	43c0      	mvns	r0, r0
   23334:	80e0      	strh	r0, [r4, #6]

		return frag;
   23336:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   23338:	b006      	add	sp, #24
   2333a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   2333e:	2300      	movs	r3, #0
   23340:	e7ef      	b.n	23322 <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23342:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23346:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   2334a:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   2334c:	3206      	adds	r2, #6
   2334e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23352:	f8cd 8008 	str.w	r8, [sp, #8]
   23356:	f10d 0416 	add.w	r4, sp, #22
   2335a:	9401      	str	r4, [sp, #4]
   2335c:	2702      	movs	r7, #2
   2335e:	9700      	str	r7, [sp, #0]
   23360:	ab05      	add	r3, sp, #20
   23362:	b292      	uxth	r2, r2
   23364:	4629      	mov	r1, r5
   23366:	4630      	mov	r0, r6
   23368:	f7fa fc63 	bl	1dc32 <net_pkt_write>
   2336c:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   2336e:	2111      	movs	r1, #17
   23370:	4630      	mov	r0, r6
   23372:	f7fb f8d8 	bl	1e526 <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   23376:	43c0      	mvns	r0, r0
   23378:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   2337c:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   23380:	3a02      	subs	r2, #2
   23382:	f8cd 8008 	str.w	r8, [sp, #8]
   23386:	9401      	str	r4, [sp, #4]
   23388:	9700      	str	r7, [sp, #0]
   2338a:	ab05      	add	r3, sp, #20
   2338c:	b292      	uxth	r2, r2
   2338e:	4629      	mov	r1, r5
   23390:	4630      	mov	r0, r6
   23392:	f7fa fc4e 	bl	1dc32 <net_pkt_write>
	return frag;
   23396:	e7cf      	b.n	23338 <net_udp_set_chksum+0x3a>

00023398 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23398:	b570      	push	{r4, r5, r6, lr}
   2339a:	b084      	sub	sp, #16
   2339c:	4605      	mov	r5, r0
   2339e:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   233a0:	f7fa fd5c 	bl	1de5c <net_pkt_udp_data>
   233a4:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   233a6:	2208      	movs	r2, #8
   233a8:	4601      	mov	r1, r0
   233aa:	4628      	mov	r0, r5
   233ac:	f7fb f914 	bl	1e5d8 <net_header_fits>
   233b0:	b120      	cbz	r0, 233bc <net_udp_get_chksum+0x24>
		return hdr;
   233b2:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   233b4:	b123      	cbz	r3, 233c0 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   233b6:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   233b8:	b004      	add	sp, #16
   233ba:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   233bc:	2300      	movs	r3, #0
   233be:	e7f9      	b.n	233b4 <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   233c0:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   233c4:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   233c8:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   233ca:	3106      	adds	r1, #6
   233cc:	f10d 030e 	add.w	r3, sp, #14
   233d0:	9300      	str	r3, [sp, #0]
   233d2:	2302      	movs	r3, #2
   233d4:	aa03      	add	r2, sp, #12
   233d6:	b289      	uxth	r1, r1
   233d8:	4630      	mov	r0, r6
   233da:	f7fa fbb8 	bl	1db4e <net_frag_read>
	return chksum;
   233de:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   233e2:	e7e9      	b.n	233b8 <net_udp_get_chksum+0x20>

000233e4 <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   233e4:	b5f0      	push	{r4, r5, r6, r7, lr}
   233e6:	b085      	sub	sp, #20
   233e8:	4605      	mov	r5, r0
   233ea:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   233ec:	f7fa fd36 	bl	1de5c <net_pkt_udp_data>
   233f0:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   233f2:	2208      	movs	r2, #8
   233f4:	4601      	mov	r1, r0
   233f6:	4628      	mov	r0, r5
   233f8:	f7fb f8ee 	bl	1e5d8 <net_header_fits>
   233fc:	b120      	cbz	r0, 23408 <net_udp_get_hdr+0x24>
		return hdr;
   233fe:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   23400:	b126      	cbz	r6, 2340c <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23402:	4620      	mov	r0, r4
   23404:	b005      	add	sp, #20
   23406:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23408:	2600      	movs	r6, #0
   2340a:	e7f9      	b.n	23400 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2340c:	68a8      	ldr	r0, [r5, #8]
   2340e:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23412:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23416:	9700      	str	r7, [sp, #0]
   23418:	2302      	movs	r3, #2
   2341a:	f10d 020e 	add.w	r2, sp, #14
   2341e:	4421      	add	r1, r4
   23420:	f7fa fb95 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23424:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23428:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   2342a:	9300      	str	r3, [sp, #0]
   2342c:	2302      	movs	r3, #2
   2342e:	f10d 020e 	add.w	r2, sp, #14
   23432:	f7fa fb8c 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   23436:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   2343a:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   2343c:	9300      	str	r3, [sp, #0]
   2343e:	2302      	movs	r3, #2
   23440:	f10d 020e 	add.w	r2, sp, #14
   23444:	f7fa fb83 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23448:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2344c:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   2344e:	9300      	str	r3, [sp, #0]
   23450:	2302      	movs	r3, #2
   23452:	f10d 020e 	add.w	r2, sp, #14
   23456:	f7fa fb7a 	bl	1db4e <net_frag_read>
	if (!frag) {
   2345a:	b108      	cbz	r0, 23460 <net_udp_get_hdr+0x7c>
	return hdr;
   2345c:	463c      	mov	r4, r7
   2345e:	e7d0      	b.n	23402 <net_udp_get_hdr+0x1e>
		return NULL;
   23460:	4634      	mov	r4, r6
   23462:	e7ce      	b.n	23402 <net_udp_get_hdr+0x1e>

00023464 <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   23464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23468:	b086      	sub	sp, #24
   2346a:	4606      	mov	r6, r0
   2346c:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2346e:	2208      	movs	r2, #8
   23470:	f7fb f8b2 	bl	1e5d8 <net_header_fits>
   23474:	b128      	cbz	r0, 23482 <net_udp_set_hdr+0x1e>
		return hdr;
   23476:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   23478:	b12d      	cbz	r5, 23486 <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   2347a:	4620      	mov	r0, r4
   2347c:	b006      	add	sp, #24
   2347e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23482:	2500      	movs	r5, #0
   23484:	e7f8      	b.n	23478 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23486:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   2348a:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2348e:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   23492:	f8cd 8008 	str.w	r8, [sp, #8]
   23496:	9401      	str	r4, [sp, #4]
   23498:	2702      	movs	r7, #2
   2349a:	9700      	str	r7, [sp, #0]
   2349c:	f10d 0316 	add.w	r3, sp, #22
   234a0:	440a      	add	r2, r1
   234a2:	68b1      	ldr	r1, [r6, #8]
   234a4:	4630      	mov	r0, r6
   234a6:	f7fa fbc4 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   234aa:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   234ae:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   234b0:	f8cd 8008 	str.w	r8, [sp, #8]
   234b4:	9301      	str	r3, [sp, #4]
   234b6:	9700      	str	r7, [sp, #0]
   234b8:	f10d 0316 	add.w	r3, sp, #22
   234bc:	4601      	mov	r1, r0
   234be:	4630      	mov	r0, r6
   234c0:	f7fa fbb7 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   234c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   234c8:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   234ca:	f8cd 8008 	str.w	r8, [sp, #8]
   234ce:	9301      	str	r3, [sp, #4]
   234d0:	9700      	str	r7, [sp, #0]
   234d2:	f10d 0316 	add.w	r3, sp, #22
   234d6:	4601      	mov	r1, r0
   234d8:	4630      	mov	r0, r6
   234da:	f7fa fbaa 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   234de:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   234e2:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   234e4:	f8cd 8008 	str.w	r8, [sp, #8]
   234e8:	9301      	str	r3, [sp, #4]
   234ea:	9700      	str	r7, [sp, #0]
   234ec:	f10d 0316 	add.w	r3, sp, #22
   234f0:	4601      	mov	r1, r0
   234f2:	4630      	mov	r0, r6
   234f4:	f7fa fb9d 	bl	1dc32 <net_pkt_write>
	if (!frag) {
   234f8:	2800      	cmp	r0, #0
   234fa:	d1be      	bne.n	2347a <net_udp_set_hdr+0x16>
		return NULL;
   234fc:	462c      	mov	r4, r5
   234fe:	e7bc      	b.n	2347a <net_udp_set_hdr+0x16>

00023500 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   23500:	b510      	push	{r4, lr}
   23502:	460c      	mov	r4, r1
   23504:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   23506:	8942      	ldrh	r2, [r0, #10]
   23508:	4620      	mov	r0, r4
   2350a:	f7ff fe81 	bl	23210 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   2350e:	bd10      	pop	{r4, pc}

00023510 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   23510:	4770      	bx	lr

00023512 <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   23512:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   23514:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   23516:	6b25      	ldr	r5, [r4, #48]	; 0x30
   23518:	b12d      	cbz	r5, 23526 <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   2351a:	6843      	ldr	r3, [r0, #4]
   2351c:	f06f 0267 	mvn.w	r2, #103	; 0x67
   23520:	2100      	movs	r1, #0
   23522:	4620      	mov	r0, r4
   23524:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   23526:	4620      	mov	r0, r4
   23528:	f7f9 fba8 	bl	1cc7c <net_context_unref>
   2352c:	bd38      	pop	{r3, r4, r5, pc}

0002352e <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   2352e:	b510      	push	{r4, lr}
   23530:	4604      	mov	r4, r0
	return (!list->head);
   23532:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   23536:	b17b      	cbz	r3, 23558 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   23538:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   2353c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   23540:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   23544:	f36f 0304 	bfc	r3, #0, #5
   23548:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   2354c:	2200      	movs	r2, #0
   2354e:	21c8      	movs	r1, #200	; 0xc8
   23550:	3058      	adds	r0, #88	; 0x58
   23552:	f006 fb63 	bl	29c1c <_impl_k_timer_start>
   23556:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   23558:	3058      	adds	r0, #88	; 0x58
   2355a:	f006 fc17 	bl	29d8c <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   2355e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23562:	f3c3 1247 	ubfx	r2, r3, #5, #8
   23566:	f022 0210 	bic.w	r2, r2, #16
   2356a:	f362 134c 	bfi	r3, r2, #5, #8
   2356e:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   23572:	bd10      	pop	{r4, pc}

00023574 <ack_timer_cancel>:
{
   23574:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   23576:	3008      	adds	r0, #8
   23578:	f006 fd36 	bl	29fe8 <k_delayed_work_cancel>
   2357c:	bd08      	pop	{r3, pc}

0002357e <fin_timer_cancel>:
{
   2357e:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   23580:	3030      	adds	r0, #48	; 0x30
   23582:	f006 fd31 	bl	29fe8 <k_delayed_work_cancel>
   23586:	bd08      	pop	{r3, pc}

00023588 <finalize_segment>:
{
   23588:	b508      	push	{r3, lr}
	return pkt->family;
   2358a:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   2358e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   23592:	2b0a      	cmp	r3, #10
   23594:	d001      	beq.n	2359a <finalize_segment+0x12>
	return 0;
   23596:	2000      	movs	r0, #0
}
   23598:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   2359a:	f7fc fe17 	bl	201cc <net_ipv6_finalize>
   2359e:	bd08      	pop	{r3, pc}

000235a0 <prepare_segment>:
{
   235a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   235a4:	b085      	sub	sp, #20
   235a6:	4606      	mov	r6, r0
   235a8:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   235aa:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   235ac:	b192      	cbz	r2, 235d4 <prepare_segment+0x34>
   235ae:	4614      	mov	r4, r2
		tail = pkt->frags;
   235b0:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   235b4:	2300      	movs	r3, #0
   235b6:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   235b8:	469a      	mov	sl, r3
   235ba:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   235be:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   235c2:	2b0a      	cmp	r3, #10
   235c4:	d013      	beq.n	235ee <prepare_segment+0x4e>
		if (pkt_allocated) {
   235c6:	f1ba 0f00 	cmp.w	sl, #0
   235ca:	d174      	bne.n	236b6 <prepare_segment+0x116>
		return NULL;
   235cc:	2000      	movs	r0, #0
}
   235ce:	b005      	add	sp, #20
   235d0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   235d4:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   235d8:	4638      	mov	r0, r7
   235da:	f7fa f907 	bl	1d7ec <net_pkt_get_tx>
		if (!pkt) {
   235de:	4604      	mov	r4, r0
   235e0:	2800      	cmp	r0, #0
   235e2:	d0f4      	beq.n	235ce <prepare_segment+0x2e>
		pkt_allocated = true;
   235e4:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   235e8:	f04f 0800 	mov.w	r8, #0
   235ec:	e7e5      	b.n	235ba <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   235ee:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   235f0:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   235f2:	3304      	adds	r3, #4
   235f4:	6852      	ldr	r2, [r2, #4]
   235f6:	4621      	mov	r1, r4
   235f8:	6830      	ldr	r0, [r6, #0]
   235fa:	f7fc fb8b 	bl	1fd14 <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   235fe:	696b      	ldr	r3, [r5, #20]
   23600:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   23604:	897b      	ldrh	r3, [r7, #10]
   23606:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   23608:	68a3      	ldr	r3, [r4, #8]
   2360a:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   2360c:	2206      	movs	r2, #6
   2360e:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   23610:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23614:	4638      	mov	r0, r7
   23616:	f7fa f8fb 	bl	1d810 <net_pkt_get_data>
	if (!header) {
   2361a:	9001      	str	r0, [sp, #4]
   2361c:	2800      	cmp	r0, #0
   2361e:	d04f      	beq.n	236c0 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   23620:	9e01      	ldr	r6, [sp, #4]
   23622:	4631      	mov	r1, r6
   23624:	4620      	mov	r0, r4
   23626:	f7fa f93e 	bl	1d8a6 <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   2362a:	2114      	movs	r1, #20
   2362c:	f106 0008 	add.w	r0, r6, #8
   23630:	f7f7 fbec 	bl	1ae0c <net_buf_simple_add>
   23634:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   23636:	68eb      	ldr	r3, [r5, #12]
   23638:	9303      	str	r3, [sp, #12]
   2363a:	2b00      	cmp	r3, #0
   2363c:	d05d      	beq.n	236fa <prepare_segment+0x15a>
   2363e:	f895 900b 	ldrb.w	r9, [r5, #11]
   23642:	f1b9 0f00 	cmp.w	r9, #0
   23646:	d145      	bne.n	236d4 <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   23648:	f109 0914 	add.w	r9, r9, #20
   2364c:	fa5f f989 	uxtb.w	r9, r9
   23650:	ea4f 0989 	mov.w	r9, r9, lsl #2
   23654:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   23658:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   2365c:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   2365e:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   23662:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   23664:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23666:	0a11      	lsrs	r1, r2, #8
   23668:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   2366a:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   2366c:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23670:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   23672:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   23674:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   23676:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   23678:	0a11      	lsrs	r1, r2, #8
   2367a:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   2367c:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   2367e:	f3c3 2207 	ubfx	r2, r3, #8, #8
   23682:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   23684:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   23686:	7aab      	ldrb	r3, [r5, #10]
   23688:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   2368a:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   2368c:	0a1a      	lsrs	r2, r3, #8
   2368e:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   23690:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   23692:	2300      	movs	r3, #0
   23694:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   23696:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   23698:	f1b8 0f00 	cmp.w	r8, #0
   2369c:	d003      	beq.n	236a6 <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   2369e:	4641      	mov	r1, r8
   236a0:	4620      	mov	r0, r4
   236a2:	f7fa f900 	bl	1d8a6 <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   236a6:	4621      	mov	r1, r4
   236a8:	4638      	mov	r0, r7
   236aa:	f7ff ff6d 	bl	23588 <finalize_segment>
   236ae:	2800      	cmp	r0, #0
   236b0:	db26      	blt.n	23700 <prepare_segment+0x160>
	return pkt;
   236b2:	4620      	mov	r0, r4
   236b4:	e78b      	b.n	235ce <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   236b6:	4620      	mov	r0, r4
   236b8:	f7fa f8cb 	bl	1d852 <net_pkt_unref>
		return NULL;
   236bc:	2000      	movs	r0, #0
   236be:	e786      	b.n	235ce <prepare_segment+0x2e>
		if (pkt_allocated) {
   236c0:	f1ba 0f00 	cmp.w	sl, #0
   236c4:	d101      	bne.n	236ca <prepare_segment+0x12a>
		return NULL;
   236c6:	2000      	movs	r0, #0
   236c8:	e781      	b.n	235ce <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   236ca:	4620      	mov	r0, r4
   236cc:	f7fa f8c1 	bl	1d852 <net_pkt_unref>
		return NULL;
   236d0:	2000      	movs	r0, #0
   236d2:	e77c      	b.n	235ce <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   236d4:	4649      	mov	r1, r9
   236d6:	9801      	ldr	r0, [sp, #4]
   236d8:	3008      	adds	r0, #8
   236da:	f7f7 fb97 	bl	1ae0c <net_buf_simple_add>
   236de:	464a      	mov	r2, r9
   236e0:	9903      	ldr	r1, [sp, #12]
   236e2:	f7dc fded 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   236e6:	f019 0f03 	tst.w	r9, #3
   236ea:	d0ad      	beq.n	23648 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   236ec:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   236f0:	f109 0904 	add.w	r9, r9, #4
   236f4:	fa5f f989 	uxtb.w	r9, r9
   236f8:	e7a6      	b.n	23648 <prepare_segment+0xa8>
	u8_t optlen = 0;
   236fa:	f04f 0900 	mov.w	r9, #0
   236fe:	e7a3      	b.n	23648 <prepare_segment+0xa8>
		if (pkt_allocated) {
   23700:	f1ba 0f00 	cmp.w	sl, #0
   23704:	d101      	bne.n	2370a <prepare_segment+0x16a>
		return NULL;
   23706:	2000      	movs	r0, #0
   23708:	e761      	b.n	235ce <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   2370a:	4620      	mov	r0, r4
   2370c:	f7fa f8a1 	bl	1d852 <net_pkt_unref>
		return NULL;
   23710:	2000      	movs	r0, #0
   23712:	e75c      	b.n	235ce <prepare_segment+0x2e>

00023714 <net_tcp_alloc>:
{
   23714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   23716:	f04f 0320 	mov.w	r3, #32
   2371a:	f3ef 8411 	mrs	r4, BASEPRI
   2371e:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23722:	2300      	movs	r3, #0
   23724:	2b05      	cmp	r3, #5
   23726:	dc18      	bgt.n	2375a <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   23728:	22c8      	movs	r2, #200	; 0xc8
   2372a:	492b      	ldr	r1, [pc, #172]	; (237d8 <net_tcp_alloc+0xc4>)
   2372c:	fb02 1203 	mla	r2, r2, r3, r1
   23730:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   23734:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   23738:	f012 0f01 	tst.w	r2, #1
   2373c:	d001      	beq.n	23742 <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   2373e:	3301      	adds	r3, #1
   23740:	e7f0      	b.n	23724 <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   23742:	21c8      	movs	r1, #200	; 0xc8
   23744:	4d24      	ldr	r5, [pc, #144]	; (237d8 <net_tcp_alloc+0xc4>)
   23746:	fb01 5103 	mla	r1, r1, r3, r5
   2374a:	f042 0201 	orr.w	r2, r2, #1
   2374e:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   23752:	f362 154c 	bfi	r5, r2, #5, #8
   23756:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2375a:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   2375e:	2b05      	cmp	r3, #5
   23760:	dc37      	bgt.n	237d2 <net_tcp_alloc+0xbe>
   23762:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   23764:	4e1c      	ldr	r6, [pc, #112]	; (237d8 <net_tcp_alloc+0xc4>)
   23766:	22c8      	movs	r2, #200	; 0xc8
   23768:	fb02 f403 	mul.w	r4, r2, r3
   2376c:	1935      	adds	r5, r6, r4
   2376e:	2100      	movs	r1, #0
   23770:	4628      	mov	r0, r5
   23772:	f007 f8fd 	bl	2a970 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   23776:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   2377a:	2101      	movs	r1, #1
   2377c:	f361 124c 	bfi	r2, r1, #5, #8
   23780:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   23784:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   23788:	f36f 3250 	bfc	r2, #13, #4
   2378c:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   23790:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   23792:	f7de fca1 	bl	20d8 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   23796:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   2379a:	3001      	adds	r0, #1
   2379c:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   237a0:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   237a4:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   237a8:	2700      	movs	r7, #0
   237aa:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   237ae:	f104 0058 	add.w	r0, r4, #88	; 0x58
   237b2:	463a      	mov	r2, r7
   237b4:	4909      	ldr	r1, [pc, #36]	; (237dc <net_tcp_alloc+0xc8>)
   237b6:	4430      	add	r0, r6
   237b8:	f006 fa1c 	bl	29bf4 <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   237bc:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   237c0:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   237c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   237c6:	4639      	mov	r1, r7
   237c8:	3004      	adds	r0, #4
   237ca:	f005 fe15 	bl	293f8 <_impl_k_sem_init>
}
   237ce:	4628      	mov	r0, r5
   237d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   237d2:	2500      	movs	r5, #0
   237d4:	e7fb      	b.n	237ce <net_tcp_alloc+0xba>
   237d6:	bf00      	nop
   237d8:	20002068 	.word	0x20002068
   237dc:	00024151 	.word	0x00024151

000237e0 <net_tcp_get_recv_wnd>:
}
   237e0:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   237e4:	4770      	bx	lr

000237e6 <net_tcp_get_recv_mss>:
{
   237e6:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   237e8:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   237ea:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   237ee:	f013 0f10 	tst.w	r3, #16
   237f2:	d006      	beq.n	23802 <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   237f4:	230a      	movs	r3, #10
	if (family == AF_INET) {
   237f6:	2b02      	cmp	r3, #2
   237f8:	d019      	beq.n	2382e <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   237fa:	2b0a      	cmp	r3, #10
   237fc:	d003      	beq.n	23806 <net_tcp_get_recv_mss+0x20>
	return 0;
   237fe:	2000      	movs	r0, #0
}
   23800:	bd08      	pop	{r3, pc}
	return AF_INET;
   23802:	2302      	movs	r3, #2
   23804:	e7f7      	b.n	237f6 <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   23806:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   2380a:	f7f8 fddb 	bl	1c3c4 <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   2380e:	b120      	cbz	r0, 2381a <net_tcp_get_recv_mss+0x34>
   23810:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   23812:	283b      	cmp	r0, #59	; 0x3b
   23814:	d903      	bls.n	2381e <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   23816:	383c      	subs	r0, #60	; 0x3c
   23818:	e002      	b.n	23820 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   2381a:	2000      	movs	r0, #0
   2381c:	e000      	b.n	23820 <net_tcp_get_recv_mss+0x3a>
   2381e:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   23820:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   23824:	da01      	bge.n	2382a <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   23826:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   2382a:	b280      	uxth	r0, r0
   2382c:	bd08      	pop	{r3, pc}
		return 0;
   2382e:	2000      	movs	r0, #0
   23830:	bd08      	pop	{r3, pc}

00023832 <net_tcp_set_syn_opt>:
{
   23832:	b570      	push	{r4, r5, r6, lr}
   23834:	460e      	mov	r6, r1
   23836:	4614      	mov	r4, r2
	*optionlen = 0;
   23838:	2300      	movs	r3, #0
   2383a:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   2383c:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   23840:	f413 6f80 	tst.w	r3, #1024	; 0x400
   23844:	d00f      	beq.n	23866 <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   23846:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   23848:	7822      	ldrb	r2, [r4, #0]
   2384a:	0203      	lsls	r3, r0, #8
   2384c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   23850:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   23854:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   23858:	f040 0002 	orr.w	r0, r0, #2
   2385c:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   2385e:	7823      	ldrb	r3, [r4, #0]
   23860:	3304      	adds	r3, #4
   23862:	7023      	strb	r3, [r4, #0]
   23864:	bd70      	pop	{r4, r5, r6, pc}
   23866:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   23868:	f7ff ffbd 	bl	237e6 <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   2386c:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   23870:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   23874:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   23878:	e7e6      	b.n	23848 <net_tcp_set_syn_opt+0x16>

0002387a <net_tcp_prepare_reset>:
{
   2387a:	b510      	push	{r4, lr}
   2387c:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   2387e:	2300      	movs	r3, #0
   23880:	9300      	str	r3, [sp, #0]
   23882:	9301      	str	r3, [sp, #4]
   23884:	9302      	str	r3, [sp, #8]
   23886:	9303      	str	r3, [sp, #12]
   23888:	9304      	str	r3, [sp, #16]
   2388a:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   2388c:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   2388e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   23892:	f013 0f06 	tst.w	r3, #6
   23896:	d01a      	beq.n	238ce <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   23898:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   2389c:	f3c3 3343 	ubfx	r3, r3, #13, #4
   238a0:	2b02      	cmp	r3, #2
   238a2:	d014      	beq.n	238ce <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   238a4:	2b09      	cmp	r3, #9
   238a6:	d012      	beq.n	238ce <net_tcp_prepare_reset+0x54>
   238a8:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   238aa:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   238ae:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   238b0:	2314      	movs	r3, #20
   238b2:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   238b6:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   238ba:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   238bc:	6803      	ldr	r3, [r0, #0]
   238be:	3308      	adds	r3, #8
   238c0:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   238c2:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   238c4:	2200      	movs	r2, #0
   238c6:	4669      	mov	r1, sp
   238c8:	f7ff fe6a 	bl	235a0 <prepare_segment>
   238cc:	6020      	str	r0, [r4, #0]
}
   238ce:	2000      	movs	r0, #0
   238d0:	b006      	add	sp, #24
   238d2:	bd10      	pop	{r4, pc}

000238d4 <net_tcp_state_str>:
}
   238d4:	4800      	ldr	r0, [pc, #0]	; (238d8 <net_tcp_state_str+0x4>)
   238d6:	4770      	bx	lr
   238d8:	0002f2c4 	.word	0x0002f2c4

000238dc <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   238dc:	4770      	bx	lr

000238de <net_tcp_change_state>:
   238de:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   238e2:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   238e6:	428b      	cmp	r3, r1
   238e8:	d022      	beq.n	23930 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   238ea:	f001 010f 	and.w	r1, r1, #15
   238ee:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   238f2:	f361 3350 	bfi	r3, r1, #13, #4
   238f6:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   238fa:	b9c9      	cbnz	r1, 23930 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   238fc:	6803      	ldr	r3, [r0, #0]
   238fe:	b1bb      	cbz	r3, 23930 <net_tcp_change_state+0x52>
{
   23900:	b530      	push	{r4, r5, lr}
   23902:	b083      	sub	sp, #12
   23904:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   23906:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   23908:	b120      	cbz	r0, 23914 <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   2390a:	f001 fcef 	bl	252ec <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   2390e:	6823      	ldr	r3, [r4, #0]
   23910:	2200      	movs	r2, #0
   23912:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   23914:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   23918:	b145      	cbz	r5, 2392c <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   2391a:	6820      	ldr	r0, [r4, #0]
   2391c:	6803      	ldr	r3, [r0, #0]
   2391e:	9300      	str	r3, [sp, #0]
   23920:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   23924:	2218      	movs	r2, #24
   23926:	f100 0114 	add.w	r1, r0, #20
   2392a:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   2392c:	b003      	add	sp, #12
   2392e:	bd30      	pop	{r4, r5, pc}
   23930:	4770      	bx	lr
	...

00023934 <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   23934:	2800      	cmp	r0, #0
   23936:	d064      	beq.n	23a02 <net_tcp_release+0xce>
{
   23938:	b538      	push	{r3, r4, r5, lr}
   2393a:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   2393c:	4b35      	ldr	r3, [pc, #212]	; (23a14 <net_tcp_release+0xe0>)
   2393e:	4298      	cmp	r0, r3
   23940:	d362      	bcc.n	23a08 <net_tcp_release+0xd4>
   23942:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   23946:	4298      	cmp	r0, r3
   23948:	d261      	bcs.n	23a0e <net_tcp_release+0xda>
	return list->head;
   2394a:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2394e:	b140      	cbz	r0, 23962 <net_tcp_release+0x2e>
   23950:	3834      	subs	r0, #52	; 0x34
   23952:	b140      	cbz	r0, 23966 <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23954:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   23958:	d000      	beq.n	2395c <net_tcp_release+0x28>
	return node->next;
   2395a:	6b44      	ldr	r4, [r0, #52]	; 0x34
   2395c:	b12c      	cbz	r4, 2396a <net_tcp_release+0x36>
   2395e:	3c34      	subs	r4, #52	; 0x34
   23960:	e00d      	b.n	2397e <net_tcp_release+0x4a>
   23962:	2000      	movs	r0, #0
   23964:	e7f5      	b.n	23952 <net_tcp_release+0x1e>
   23966:	4604      	mov	r4, r0
   23968:	e009      	b.n	2397e <net_tcp_release+0x4a>
   2396a:	2400      	movs	r4, #0
   2396c:	e007      	b.n	2397e <net_tcp_release+0x4a>
			list->tail = list->head;
   2396e:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   23972:	e00e      	b.n	23992 <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23974:	461a      	mov	r2, r3
   23976:	e015      	b.n	239a4 <net_tcp_release+0x70>
   23978:	3b34      	subs	r3, #52	; 0x34
   2397a:	4620      	mov	r0, r4
   2397c:	461c      	mov	r4, r3
   2397e:	b1d0      	cbz	r0, 239b6 <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   23980:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   23984:	6b42      	ldr	r2, [r0, #52]	; 0x34
   23986:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2398a:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   2398e:	428b      	cmp	r3, r1
   23990:	d0ed      	beq.n	2396e <net_tcp_release+0x3a>
	node->next = NULL;
   23992:	2300      	movs	r3, #0
   23994:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   23996:	f7f9 ff5c 	bl	1d852 <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   2399a:	b144      	cbz	r4, 239ae <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2399c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   239a0:	d0e8      	beq.n	23974 <net_tcp_release+0x40>
	return node->next;
   239a2:	6b62      	ldr	r2, [r4, #52]	; 0x34
   239a4:	b12a      	cbz	r2, 239b2 <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   239a6:	2b00      	cmp	r3, #0
   239a8:	d0e6      	beq.n	23978 <net_tcp_release+0x44>
	return node->next;
   239aa:	6b63      	ldr	r3, [r4, #52]	; 0x34
   239ac:	e7e4      	b.n	23978 <net_tcp_release+0x44>
   239ae:	4623      	mov	r3, r4
   239b0:	e7e3      	b.n	2397a <net_tcp_release+0x46>
   239b2:	2300      	movs	r3, #0
   239b4:	e7e1      	b.n	2397a <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   239b6:	f105 0058 	add.w	r0, r5, #88	; 0x58
   239ba:	f006 f9e7 	bl	29d8c <_impl_k_timer_stop>
	sem->count = 0;
   239be:	2400      	movs	r4, #0
   239c0:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   239c4:	4628      	mov	r0, r5
   239c6:	f7ff fdd5 	bl	23574 <ack_timer_cancel>
	fin_timer_cancel(tcp);
   239ca:	4628      	mov	r0, r5
   239cc:	f7ff fdd7 	bl	2357e <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   239d0:	4621      	mov	r1, r4
   239d2:	4628      	mov	r0, r5
   239d4:	f7ff ff83 	bl	238de <net_tcp_change_state>
	tcp->context = NULL;
   239d8:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   239da:	f04f 0320 	mov.w	r3, #32
   239de:	f3ef 8111 	mrs	r1, BASEPRI
   239e2:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   239e6:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   239ea:	f3c3 1247 	ubfx	r2, r3, #5, #8
   239ee:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   239f2:	f362 134c 	bfi	r3, r2, #5, #8
   239f6:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   239fa:	f381 8811 	msr	BASEPRI, r1
	return 0;
   239fe:	4620      	mov	r0, r4
   23a00:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   23a02:	f06f 0015 	mvn.w	r0, #21
   23a06:	4770      	bx	lr
   23a08:	f06f 0015 	mvn.w	r0, #21
   23a0c:	bd38      	pop	{r3, r4, r5, pc}
   23a0e:	f06f 0015 	mvn.w	r0, #21
}
   23a12:	bd38      	pop	{r3, r4, r5, pc}
   23a14:	20002068 	.word	0x20002068

00023a18 <net_tcp_prepare_segment>:
{
   23a18:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23a1c:	b086      	sub	sp, #24
   23a1e:	4604      	mov	r4, r0
   23a20:	460d      	mov	r5, r1
   23a22:	4692      	mov	sl, r2
   23a24:	4699      	mov	r9, r3
   23a26:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23a28:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   23a2c:	2300      	movs	r3, #0
   23a2e:	9300      	str	r3, [sp, #0]
   23a30:	9301      	str	r3, [sp, #4]
   23a32:	9302      	str	r3, [sp, #8]
   23a34:	9303      	str	r3, [sp, #12]
   23a36:	9304      	str	r3, [sp, #16]
   23a38:	9305      	str	r3, [sp, #20]
	if (!local) {
   23a3a:	2f00      	cmp	r7, #0
   23a3c:	d050      	beq.n	23ae0 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   23a3e:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   23a42:	f015 0f10 	tst.w	r5, #16
   23a46:	d009      	beq.n	23a5c <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   23a48:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23a4c:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   23a50:	2b07      	cmp	r3, #7
   23a52:	d048      	beq.n	23ae6 <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   23a54:	2b08      	cmp	r3, #8
   23a56:	d055      	beq.n	23b04 <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   23a58:	2b05      	cmp	r3, #5
   23a5a:	d058      	beq.n	23b0e <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   23a5c:	f015 0f01 	tst.w	r5, #1
   23a60:	d010      	beq.n	23a84 <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   23a62:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23a66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23a6a:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   23a6e:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   23a72:	3602      	adds	r6, #2
   23a74:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23a78:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   23a7c:	2b04      	cmp	r3, #4
   23a7e:	d053      	beq.n	23b28 <net_tcp_prepare_segment+0x110>
   23a80:	2b03      	cmp	r3, #3
   23a82:	d051      	beq.n	23b28 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   23a84:	f015 0f02 	tst.w	r5, #2
   23a88:	d000      	beq.n	23a8c <net_tcp_prepare_segment+0x74>
		seq++;
   23a8a:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   23a8c:	4620      	mov	r0, r4
   23a8e:	f7ff fea7 	bl	237e0 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   23a92:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   23a94:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   23a96:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   23a98:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   23a9c:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   23a9e:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   23aa2:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   23aa4:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   23aa8:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   23aac:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   23ab0:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   23ab4:	f8d8 2000 	ldr.w	r2, [r8]
   23ab8:	4669      	mov	r1, sp
   23aba:	4620      	mov	r0, r4
   23abc:	f7ff fd70 	bl	235a0 <prepare_segment>
   23ac0:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   23ac4:	b3a8      	cbz	r0, 23b32 <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   23ac6:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   23aca:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   23ace:	1af3      	subs	r3, r6, r3
   23ad0:	2b00      	cmp	r3, #0
   23ad2:	dd31      	ble.n	23b38 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   23ad4:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   23ad8:	2000      	movs	r0, #0
}
   23ada:	b006      	add	sp, #24
   23adc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   23ae0:	6807      	ldr	r7, [r0, #0]
   23ae2:	3708      	adds	r7, #8
   23ae4:	e7ab      	b.n	23a3e <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   23ae6:	f015 0f01 	tst.w	r5, #1
   23aea:	d006      	beq.n	23afa <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   23aec:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23af0:	2109      	movs	r1, #9
   23af2:	4620      	mov	r0, r4
   23af4:	f7ff fef3 	bl	238de <net_tcp_change_state>
   23af8:	e7b0      	b.n	23a5c <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   23afa:	210a      	movs	r1, #10
   23afc:	4620      	mov	r0, r4
   23afe:	f7ff feee 	bl	238de <net_tcp_change_state>
   23b02:	e7ab      	b.n	23a5c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23b04:	2109      	movs	r1, #9
   23b06:	4620      	mov	r0, r4
   23b08:	f7ff fee9 	bl	238de <net_tcp_change_state>
   23b0c:	e7a6      	b.n	23a5c <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   23b0e:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   23b12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   23b16:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   23b1a:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   23b1e:	2106      	movs	r1, #6
   23b20:	4620      	mov	r0, r4
   23b22:	f7ff fedc 	bl	238de <net_tcp_change_state>
   23b26:	e799      	b.n	23a5c <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   23b28:	2107      	movs	r1, #7
   23b2a:	4620      	mov	r0, r4
   23b2c:	f7ff fed7 	bl	238de <net_tcp_change_state>
   23b30:	e7a8      	b.n	23a84 <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   23b32:	f06f 0015 	mvn.w	r0, #21
   23b36:	e7d0      	b.n	23ada <net_tcp_prepare_segment+0xc2>
	return 0;
   23b38:	2000      	movs	r0, #0
   23b3a:	e7ce      	b.n	23ada <net_tcp_prepare_segment+0xc2>

00023b3c <net_tcp_prepare_ack>:
{
   23b3c:	b570      	push	{r4, r5, r6, lr}
   23b3e:	b088      	sub	sp, #32
   23b40:	4604      	mov	r4, r0
   23b42:	460d      	mov	r5, r1
   23b44:	4616      	mov	r6, r2
   23b46:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23b4a:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   23b4e:	2b03      	cmp	r3, #3
   23b50:	d011      	beq.n	23b76 <net_tcp_prepare_ack+0x3a>
   23b52:	d327      	bcc.n	23ba4 <net_tcp_prepare_ack+0x68>
   23b54:	3b06      	subs	r3, #6
   23b56:	2b01      	cmp	r3, #1
   23b58:	d824      	bhi.n	23ba4 <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   23b5a:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23b5e:	3b01      	subs	r3, #1
   23b60:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   23b64:	9202      	str	r2, [sp, #8]
   23b66:	9101      	str	r1, [sp, #4]
   23b68:	2200      	movs	r2, #0
   23b6a:	9200      	str	r2, [sp, #0]
   23b6c:	4613      	mov	r3, r2
   23b6e:	2111      	movs	r1, #17
   23b70:	f7ff ff52 	bl	23a18 <net_tcp_prepare_segment>
   23b74:	e014      	b.n	23ba0 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   23b76:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23b7a:	3b01      	subs	r3, #1
   23b7c:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   23b80:	f10d 0217 	add.w	r2, sp, #23
   23b84:	a906      	add	r1, sp, #24
   23b86:	f7ff fe54 	bl	23832 <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   23b8a:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23b8e:	9602      	str	r6, [sp, #8]
   23b90:	9501      	str	r5, [sp, #4]
   23b92:	2200      	movs	r2, #0
   23b94:	9200      	str	r2, [sp, #0]
   23b96:	aa06      	add	r2, sp, #24
   23b98:	2112      	movs	r1, #18
   23b9a:	4620      	mov	r0, r4
   23b9c:	f7ff ff3c 	bl	23a18 <net_tcp_prepare_segment>
}
   23ba0:	b008      	add	sp, #32
   23ba2:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   23ba4:	9602      	str	r6, [sp, #8]
   23ba6:	9501      	str	r5, [sp, #4]
   23ba8:	2200      	movs	r2, #0
   23baa:	9200      	str	r2, [sp, #0]
   23bac:	4613      	mov	r3, r2
   23bae:	2110      	movs	r1, #16
   23bb0:	4620      	mov	r0, r4
   23bb2:	f7ff ff31 	bl	23a18 <net_tcp_prepare_segment>
   23bb6:	e7f3      	b.n	23ba0 <net_tcp_prepare_ack+0x64>

00023bb8 <net_tcp_queue_data>:
{
   23bb8:	b570      	push	{r4, r5, r6, lr}
   23bba:	b086      	sub	sp, #24
   23bbc:	4605      	mov	r5, r0
   23bbe:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   23bc0:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   23bc2:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   23bc4:	2400      	movs	r4, #0
   23bc6:	e002      	b.n	23bce <net_tcp_queue_data+0x16>
		bytes += buf->len;
   23bc8:	899a      	ldrh	r2, [r3, #12]
   23bca:	4414      	add	r4, r2
		buf = buf->frags;
   23bcc:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   23bce:	2b00      	cmp	r3, #0
   23bd0:	d1fa      	bne.n	23bc8 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   23bd2:	ab05      	add	r3, sp, #20
   23bd4:	9302      	str	r3, [sp, #8]
   23bd6:	9001      	str	r0, [sp, #4]
   23bd8:	2200      	movs	r2, #0
   23bda:	9200      	str	r2, [sp, #0]
   23bdc:	4613      	mov	r3, r2
   23bde:	2118      	movs	r1, #24
   23be0:	6e28      	ldr	r0, [r5, #96]	; 0x60
   23be2:	f7ff ff19 	bl	23a18 <net_tcp_prepare_segment>
	if (ret) {
   23be6:	4606      	mov	r6, r0
   23be8:	bb10      	cbnz	r0, 23c30 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   23bea:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   23bec:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   23bf0:	4423      	add	r3, r4
   23bf2:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   23bf6:	4a1b      	ldr	r2, [pc, #108]	; (23c64 <net_tcp_queue_data+0xac>)
   23bf8:	6c93      	ldr	r3, [r2, #72]	; 0x48
   23bfa:	441c      	add	r4, r3
   23bfc:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   23bfe:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   23c00:	9905      	ldr	r1, [sp, #20]
   23c02:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   23c06:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   23c08:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   23c0c:	b199      	cbz	r1, 23c36 <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   23c0e:	600a      	str	r2, [r1, #0]
		list->tail = node;
   23c10:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   23c14:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   23c16:	3058      	adds	r0, #88	; 0x58
   23c18:	f006 f942 	bl	29ea0 <_timeout_remaining_get>
   23c1c:	b180      	cbz	r0, 23c40 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   23c1e:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   23c20:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23c24:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23c28:	2b0a      	cmp	r3, #10
   23c2a:	d015      	beq.n	23c58 <net_tcp_queue_data+0xa0>
   23c2c:	f7f9 fe02 	bl	1d834 <net_pkt_ref>
}
   23c30:	4630      	mov	r0, r6
   23c32:	b006      	add	sp, #24
   23c34:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   23c36:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23c3a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23c3e:	e7e9      	b.n	23c14 <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23c40:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   23c42:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   23c46:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23c4a:	2200      	movs	r2, #0
   23c4c:	21c8      	movs	r1, #200	; 0xc8
   23c4e:	4099      	lsls	r1, r3
   23c50:	3058      	adds	r0, #88	; 0x58
   23c52:	f005 ffe3 	bl	29c1c <_impl_k_timer_start>
   23c56:	e7e2      	b.n	23c1e <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23c58:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23c5c:	2b02      	cmp	r3, #2
   23c5e:	d1e5      	bne.n	23c2c <net_tcp_queue_data+0x74>
   23c60:	e7e6      	b.n	23c30 <net_tcp_queue_data+0x78>
   23c62:	bf00      	nop
   23c64:	20002b58 	.word	0x20002b58

00023c68 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23c68:	b570      	push	{r4, r5, r6, lr}
   23c6a:	4606      	mov	r6, r0
   23c6c:	460d      	mov	r5, r1
	__asm__ volatile(
   23c6e:	f04f 0320 	mov.w	r3, #32
   23c72:	f3ef 8111 	mrs	r1, BASEPRI
   23c76:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23c7a:	2400      	movs	r4, #0
   23c7c:	e000      	b.n	23c80 <net_tcp_foreach+0x18>
   23c7e:	3401      	adds	r4, #1
   23c80:	2c05      	cmp	r4, #5
   23c82:	dc16      	bgt.n	23cb2 <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   23c84:	23c8      	movs	r3, #200	; 0xc8
   23c86:	4a0c      	ldr	r2, [pc, #48]	; (23cb8 <net_tcp_foreach+0x50>)
   23c88:	fb03 2304 	mla	r3, r3, r4, r2
   23c8c:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23c90:	f013 0f20 	tst.w	r3, #32
   23c94:	d0f3      	beq.n	23c7e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23c96:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23c9a:	4629      	mov	r1, r5
   23c9c:	20c8      	movs	r0, #200	; 0xc8
   23c9e:	fb00 2004 	mla	r0, r0, r4, r2
   23ca2:	47b0      	blx	r6
	__asm__ volatile(
   23ca4:	f04f 0320 	mov.w	r3, #32
   23ca8:	f3ef 8111 	mrs	r1, BASEPRI
   23cac:	f383 8811 	msr	BASEPRI, r3
   23cb0:	e7e5      	b.n	23c7e <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   23cb2:	f381 8811 	msr	BASEPRI, r1
   23cb6:	bd70      	pop	{r4, r5, r6, pc}
   23cb8:	20002068 	.word	0x20002068

00023cbc <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23cbc:	b5f0      	push	{r4, r5, r6, r7, lr}
   23cbe:	b085      	sub	sp, #20
   23cc0:	4605      	mov	r5, r0
   23cc2:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   23cc4:	f7fa f8df 	bl	1de86 <net_pkt_tcp_data>
   23cc8:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23cca:	2214      	movs	r2, #20
   23ccc:	4601      	mov	r1, r0
   23cce:	4628      	mov	r0, r5
   23cd0:	f7fa fc82 	bl	1e5d8 <net_header_fits>
   23cd4:	b120      	cbz	r0, 23ce0 <net_tcp_get_hdr+0x24>
		return hdr;
   23cd6:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   23cd8:	b127      	cbz	r7, 23ce4 <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   23cda:	4620      	mov	r0, r4
   23cdc:	b005      	add	sp, #20
   23cde:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   23ce0:	2700      	movs	r7, #0
   23ce2:	e7f9      	b.n	23cd8 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23ce4:	68a8      	ldr	r0, [r5, #8]
   23ce6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23cea:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23cee:	9600      	str	r6, [sp, #0]
   23cf0:	2302      	movs	r3, #2
   23cf2:	f10d 020e 	add.w	r2, sp, #14
   23cf6:	4421      	add	r1, r4
   23cf8:	f7f9 ff29 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23cfc:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   23d00:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   23d02:	9300      	str	r3, [sp, #0]
   23d04:	2302      	movs	r3, #2
   23d06:	f10d 020e 	add.w	r2, sp, #14
   23d0a:	f7f9 ff20 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   23d0e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d12:	1d33      	adds	r3, r6, #4
   23d14:	9300      	str	r3, [sp, #0]
   23d16:	2304      	movs	r3, #4
   23d18:	f10d 020e 	add.w	r2, sp, #14
   23d1c:	f7f9 ff17 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23d20:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d24:	f106 0308 	add.w	r3, r6, #8
   23d28:	9300      	str	r3, [sp, #0]
   23d2a:	2304      	movs	r3, #4
   23d2c:	f10d 020e 	add.w	r2, sp, #14
   23d30:	f7f9 ff0d 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   23d34:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d38:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23d3c:	9300      	str	r3, [sp, #0]
   23d3e:	2301      	movs	r3, #1
   23d40:	f10d 020e 	add.w	r2, sp, #14
   23d44:	f7f9 ff03 	bl	1db4e <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23d48:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d4c:	f106 030d 	add.w	r3, r6, #13
   23d50:	9300      	str	r3, [sp, #0]
   23d52:	2301      	movs	r3, #1
   23d54:	f10d 020e 	add.w	r2, sp, #14
   23d58:	f7f9 fef9 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23d5c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d60:	f106 030e 	add.w	r3, r6, #14
   23d64:	9300      	str	r3, [sp, #0]
   23d66:	2302      	movs	r3, #2
   23d68:	f10d 020e 	add.w	r2, sp, #14
   23d6c:	f7f9 feef 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23d70:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   23d74:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23d78:	9300      	str	r3, [sp, #0]
   23d7a:	2302      	movs	r3, #2
   23d7c:	f10d 020e 	add.w	r2, sp, #14
   23d80:	f7f9 fee5 	bl	1db4e <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   23d84:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23d88:	f106 0312 	add.w	r3, r6, #18
   23d8c:	9300      	str	r3, [sp, #0]
   23d8e:	2302      	movs	r3, #2
   23d90:	f10d 020e 	add.w	r2, sp, #14
   23d94:	f7f9 fedb 	bl	1db4e <net_frag_read>
	if (!frag && pos == 0xffff) {
   23d98:	b108      	cbz	r0, 23d9e <net_tcp_get_hdr+0xe2>
	return hdr;
   23d9a:	4634      	mov	r4, r6
   23d9c:	e79d      	b.n	23cda <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23d9e:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   23da2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   23da6:	429a      	cmp	r2, r3
   23da8:	d001      	beq.n	23dae <net_tcp_get_hdr+0xf2>
	return hdr;
   23daa:	4634      	mov	r4, r6
   23dac:	e795      	b.n	23cda <net_tcp_get_hdr+0x1e>
		return NULL;
   23dae:	463c      	mov	r4, r7
   23db0:	e793      	b.n	23cda <net_tcp_get_hdr+0x1e>

00023db2 <net_tcp_validate_seq>:
{
   23db2:	b570      	push	{r4, r5, r6, lr}
   23db4:	b086      	sub	sp, #24
   23db6:	4606      	mov	r6, r0
   23db8:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23dba:	a901      	add	r1, sp, #4
   23dbc:	f7ff ff7e 	bl	23cbc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23dc0:	b1e8      	cbz	r0, 23dfe <net_tcp_validate_seq+0x4c>
   23dc2:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   23dc4:	7900      	ldrb	r0, [r0, #4]
   23dc6:	795c      	ldrb	r4, [r3, #5]
   23dc8:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   23dcc:	799a      	ldrb	r2, [r3, #6]
   23dce:	79dc      	ldrb	r4, [r3, #7]
   23dd0:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   23dd4:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23dd8:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   23ddc:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   23dde:	2b00      	cmp	r3, #0
   23de0:	db0b      	blt.n	23dfa <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   23de2:	4630      	mov	r0, r6
   23de4:	f7ff fcfc 	bl	237e0 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   23de8:	4428      	add	r0, r5
   23dea:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   23dec:	2c00      	cmp	r4, #0
   23dee:	db02      	blt.n	23df6 <net_tcp_validate_seq+0x44>
   23df0:	2000      	movs	r0, #0
}
   23df2:	b006      	add	sp, #24
   23df4:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   23df6:	2001      	movs	r0, #1
   23df8:	e7fb      	b.n	23df2 <net_tcp_validate_seq+0x40>
   23dfa:	2000      	movs	r0, #0
   23dfc:	e7f9      	b.n	23df2 <net_tcp_validate_seq+0x40>
		return false;
   23dfe:	2000      	movs	r0, #0
   23e00:	e7f7      	b.n	23df2 <net_tcp_validate_seq+0x40>

00023e02 <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   23e02:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e06:	b087      	sub	sp, #28
   23e08:	4605      	mov	r5, r0
   23e0a:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23e0c:	2214      	movs	r2, #20
   23e0e:	f7fa fbe3 	bl	1e5d8 <net_header_fits>
   23e12:	b128      	cbz	r0, 23e20 <net_tcp_set_hdr+0x1e>
		return hdr;
   23e14:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   23e16:	b12e      	cbz	r6, 23e24 <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23e18:	4620      	mov	r0, r4
   23e1a:	b007      	add	sp, #28
   23e1c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23e20:	2600      	movs	r6, #0
   23e22:	e7f8      	b.n	23e16 <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23e24:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23e28:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23e2c:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23e30:	9702      	str	r7, [sp, #8]
   23e32:	9401      	str	r4, [sp, #4]
   23e34:	f04f 0802 	mov.w	r8, #2
   23e38:	f8cd 8000 	str.w	r8, [sp]
   23e3c:	f10d 0316 	add.w	r3, sp, #22
   23e40:	440a      	add	r2, r1
   23e42:	68a9      	ldr	r1, [r5, #8]
   23e44:	4628      	mov	r0, r5
   23e46:	f7f9 fef4 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23e4a:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23e4e:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23e52:	9702      	str	r7, [sp, #8]
   23e54:	9301      	str	r3, [sp, #4]
   23e56:	f8cd 8000 	str.w	r8, [sp]
   23e5a:	f10d 0316 	add.w	r3, sp, #22
   23e5e:	4601      	mov	r1, r0
   23e60:	4628      	mov	r0, r5
   23e62:	f7f9 fee6 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   23e66:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e6a:	1d23      	adds	r3, r4, #4
   23e6c:	9702      	str	r7, [sp, #8]
   23e6e:	9301      	str	r3, [sp, #4]
   23e70:	f04f 0904 	mov.w	r9, #4
   23e74:	f8cd 9000 	str.w	r9, [sp]
   23e78:	f10d 0316 	add.w	r3, sp, #22
   23e7c:	4601      	mov	r1, r0
   23e7e:	4628      	mov	r0, r5
   23e80:	f7f9 fed7 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   23e84:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23e88:	f104 0308 	add.w	r3, r4, #8
   23e8c:	9702      	str	r7, [sp, #8]
   23e8e:	9301      	str	r3, [sp, #4]
   23e90:	f8cd 9000 	str.w	r9, [sp]
   23e94:	f10d 0316 	add.w	r3, sp, #22
   23e98:	4601      	mov	r1, r0
   23e9a:	4628      	mov	r0, r5
   23e9c:	f7f9 fec9 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23ea0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ea4:	f104 030c 	add.w	r3, r4, #12
   23ea8:	9702      	str	r7, [sp, #8]
   23eaa:	9301      	str	r3, [sp, #4]
   23eac:	f04f 0901 	mov.w	r9, #1
   23eb0:	f8cd 9000 	str.w	r9, [sp]
   23eb4:	f10d 0316 	add.w	r3, sp, #22
   23eb8:	4601      	mov	r1, r0
   23eba:	4628      	mov	r0, r5
   23ebc:	f7f9 feb9 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   23ec0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ec4:	f104 030d 	add.w	r3, r4, #13
   23ec8:	9702      	str	r7, [sp, #8]
   23eca:	9301      	str	r3, [sp, #4]
   23ecc:	f8cd 9000 	str.w	r9, [sp]
   23ed0:	f10d 0316 	add.w	r3, sp, #22
   23ed4:	4601      	mov	r1, r0
   23ed6:	4628      	mov	r0, r5
   23ed8:	f7f9 feab 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   23edc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23ee0:	f104 030e 	add.w	r3, r4, #14
   23ee4:	9702      	str	r7, [sp, #8]
   23ee6:	9301      	str	r3, [sp, #4]
   23ee8:	f8cd 8000 	str.w	r8, [sp]
   23eec:	f10d 0316 	add.w	r3, sp, #22
   23ef0:	4601      	mov	r1, r0
   23ef2:	4628      	mov	r0, r5
   23ef4:	f7f9 fe9d 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23ef8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   23efc:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   23f00:	9702      	str	r7, [sp, #8]
   23f02:	9301      	str	r3, [sp, #4]
   23f04:	f8cd 8000 	str.w	r8, [sp]
   23f08:	f10d 0316 	add.w	r3, sp, #22
   23f0c:	4601      	mov	r1, r0
   23f0e:	4628      	mov	r0, r5
   23f10:	f7f9 fe8f 	bl	1dc32 <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   23f14:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23f18:	f104 0312 	add.w	r3, r4, #18
   23f1c:	9702      	str	r7, [sp, #8]
   23f1e:	9301      	str	r3, [sp, #4]
   23f20:	f8cd 8000 	str.w	r8, [sp]
   23f24:	f10d 0316 	add.w	r3, sp, #22
   23f28:	4601      	mov	r1, r0
   23f2a:	4628      	mov	r0, r5
   23f2c:	f7f9 fe81 	bl	1dc32 <net_pkt_write>
	if (!frag) {
   23f30:	2800      	cmp	r0, #0
   23f32:	f47f af71 	bne.w	23e18 <net_tcp_set_hdr+0x16>
		return NULL;
   23f36:	4634      	mov	r4, r6
   23f38:	e76e      	b.n	23e18 <net_tcp_set_hdr+0x16>

00023f3a <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23f3a:	b570      	push	{r4, r5, r6, lr}
   23f3c:	b084      	sub	sp, #16
   23f3e:	4605      	mov	r5, r0
   23f40:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23f42:	f7f9 ffa0 	bl	1de86 <net_pkt_tcp_data>
   23f46:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23f48:	2214      	movs	r2, #20
   23f4a:	4601      	mov	r1, r0
   23f4c:	4628      	mov	r0, r5
   23f4e:	f7fa fb43 	bl	1e5d8 <net_header_fits>
   23f52:	b120      	cbz	r0, 23f5e <net_tcp_get_chksum+0x24>
		return hdr;
   23f54:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23f56:	b123      	cbz	r3, 23f62 <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23f58:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23f5a:	b004      	add	sp, #16
   23f5c:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23f5e:	2300      	movs	r3, #0
   23f60:	e7f9      	b.n	23f56 <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   23f62:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23f66:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23f6a:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23f6c:	3110      	adds	r1, #16
   23f6e:	f10d 030e 	add.w	r3, sp, #14
   23f72:	9300      	str	r3, [sp, #0]
   23f74:	2302      	movs	r3, #2
   23f76:	aa03      	add	r2, sp, #12
   23f78:	b289      	uxth	r1, r1
   23f7a:	4630      	mov	r0, r6
   23f7c:	f7f9 fde7 	bl	1db4e <net_frag_read>
	return chksum;
   23f80:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   23f84:	e7e9      	b.n	23f5a <net_tcp_get_chksum+0x20>

00023f86 <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23f86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23f8a:	b086      	sub	sp, #24
   23f8c:	4606      	mov	r6, r0
   23f8e:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23f90:	2300      	movs	r3, #0
   23f92:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   23f96:	f7f9 ff76 	bl	1de86 <net_pkt_tcp_data>
   23f9a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23f9c:	2214      	movs	r2, #20
   23f9e:	4601      	mov	r1, r0
   23fa0:	4630      	mov	r0, r6
   23fa2:	f7fa fb19 	bl	1e5d8 <net_header_fits>
   23fa6:	b170      	cbz	r0, 23fc6 <net_tcp_set_chksum+0x40>
		return hdr;
   23fa8:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23faa:	b173      	cbz	r3, 23fca <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23fac:	2300      	movs	r3, #0
   23fae:	7423      	strb	r3, [r4, #16]
   23fb0:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23fb2:	2106      	movs	r1, #6
   23fb4:	4630      	mov	r0, r6
   23fb6:	f7fa fab6 	bl	1e526 <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   23fba:	43c0      	mvns	r0, r0
   23fbc:	8220      	strh	r0, [r4, #16]

		return frag;
   23fbe:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   23fc0:	b006      	add	sp, #24
   23fc2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   23fc6:	2300      	movs	r3, #0
   23fc8:	e7ef      	b.n	23faa <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   23fca:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   23fce:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23fd2:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   23fd4:	3210      	adds	r2, #16
   23fd6:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   23fda:	f8cd 8008 	str.w	r8, [sp, #8]
   23fde:	f10d 0416 	add.w	r4, sp, #22
   23fe2:	9401      	str	r4, [sp, #4]
   23fe4:	2702      	movs	r7, #2
   23fe6:	9700      	str	r7, [sp, #0]
   23fe8:	ab05      	add	r3, sp, #20
   23fea:	b292      	uxth	r2, r2
   23fec:	4629      	mov	r1, r5
   23fee:	4630      	mov	r0, r6
   23ff0:	f7f9 fe1f 	bl	1dc32 <net_pkt_write>
   23ff4:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   23ff6:	2106      	movs	r1, #6
   23ff8:	4630      	mov	r0, r6
   23ffa:	f7fa fa94 	bl	1e526 <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   23ffe:	43c0      	mvns	r0, r0
   24000:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   24004:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   24008:	3a02      	subs	r2, #2
   2400a:	f8cd 8008 	str.w	r8, [sp, #8]
   2400e:	9401      	str	r4, [sp, #4]
   24010:	9700      	str	r7, [sp, #0]
   24012:	ab05      	add	r3, sp, #20
   24014:	b292      	uxth	r2, r2
   24016:	4629      	mov	r1, r5
   24018:	4630      	mov	r0, r6
   2401a:	f7f9 fe0a 	bl	1dc32 <net_pkt_write>
	return frag;
   2401e:	e7cf      	b.n	23fc0 <net_tcp_set_chksum+0x3a>

00024020 <net_tcp_send_pkt>:
{
   24020:	b570      	push	{r4, r5, r6, lr}
   24022:	b086      	sub	sp, #24
   24024:	4605      	mov	r5, r0
	return pkt->context;
   24026:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   24028:	a901      	add	r1, sp, #4
   2402a:	f7ff fe47 	bl	23cbc <net_tcp_get_hdr>
	if (!tcp_hdr) {
   2402e:	2800      	cmp	r0, #0
   24030:	f000 8086 	beq.w	24140 <net_tcp_send_pkt+0x120>
   24034:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   24036:	7a02      	ldrb	r2, [r0, #8]
   24038:	7a43      	ldrb	r3, [r0, #9]
   2403a:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   2403e:	7a81      	ldrb	r1, [r0, #10]
   24040:	7ac3      	ldrb	r3, [r0, #11]
   24042:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   24046:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   2404a:	6e32      	ldr	r2, [r6, #96]	; 0x60
   2404c:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   24050:	429a      	cmp	r2, r3
   24052:	d039      	beq.n	240c8 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   24054:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   24056:	0a19      	lsrs	r1, r3, #8
   24058:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   2405a:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   2405c:	f3c2 2307 	ubfx	r3, r2, #8, #8
   24060:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   24062:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   24064:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   24066:	6e33      	ldr	r3, [r6, #96]	; 0x60
   24068:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   2406c:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   24070:	4299      	cmp	r1, r3
   24072:	d007      	beq.n	24084 <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   24074:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   24076:	f013 0f10 	tst.w	r3, #16
   2407a:	d103      	bne.n	24084 <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   2407c:	f043 0310 	orr.w	r3, r3, #16
   24080:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   24082:	2201      	movs	r2, #1
	if (calc_chksum) {
   24084:	bb12      	cbnz	r2, 240cc <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   24086:	7b63      	ldrb	r3, [r4, #13]
   24088:	f013 0f01 	tst.w	r3, #1
   2408c:	d006      	beq.n	2409c <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   2408e:	6e32      	ldr	r2, [r6, #96]	; 0x60
   24090:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   24094:	f043 0302 	orr.w	r3, r3, #2
   24098:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   2409c:	6e33      	ldr	r3, [r6, #96]	; 0x60
   2409e:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   240a2:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   240a6:	4621      	mov	r1, r4
   240a8:	4628      	mov	r0, r5
   240aa:	f7ff feaa 	bl	23e02 <net_tcp_set_hdr>
	return pkt->family;
   240ae:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   240b2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   240b6:	2b0a      	cmp	r3, #10
   240b8:	d00d      	beq.n	240d6 <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   240ba:	4628      	mov	r0, r5
   240bc:	f7f6 ffc8 	bl	1b050 <net_send_data>
   240c0:	4604      	mov	r4, r0
}
   240c2:	4620      	mov	r0, r4
   240c4:	b006      	add	sp, #24
   240c6:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   240c8:	2200      	movs	r2, #0
   240ca:	e7cc      	b.n	24066 <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   240cc:	68a9      	ldr	r1, [r5, #8]
   240ce:	4628      	mov	r0, r5
   240d0:	f7ff ff59 	bl	23f86 <net_tcp_set_chksum>
   240d4:	e7d7      	b.n	24086 <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   240d6:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   240da:	2b02      	cmp	r3, #2
   240dc:	d1ed      	bne.n	240ba <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   240de:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   240e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   240e4:	b10b      	cbz	r3, 240ea <net_tcp_send_pkt+0xca>
   240e6:	3b34      	subs	r3, #52	; 0x34
   240e8:	e006      	b.n	240f8 <net_tcp_send_pkt+0xd8>
   240ea:	2300      	movs	r3, #0
   240ec:	e004      	b.n	240f8 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   240ee:	4611      	mov	r1, r2
   240f0:	e009      	b.n	24106 <net_tcp_send_pkt+0xe6>
	return node->next;
   240f2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   240f4:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   240f8:	b163      	cbz	r3, 24114 <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   240fa:	42ab      	cmp	r3, r5
   240fc:	d009      	beq.n	24112 <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   240fe:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   24102:	d0f4      	beq.n	240ee <net_tcp_send_pkt+0xce>
	return node->next;
   24104:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   24106:	b111      	cbz	r1, 2410e <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24108:	2a00      	cmp	r2, #0
   2410a:	d1f2      	bne.n	240f2 <net_tcp_send_pkt+0xd2>
   2410c:	e7f2      	b.n	240f4 <net_tcp_send_pkt+0xd4>
   2410e:	2300      	movs	r3, #0
   24110:	e7f2      	b.n	240f8 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   24112:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   24114:	2b00      	cmp	r3, #0
   24116:	d0d0      	beq.n	240ba <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   24118:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   2411c:	4628      	mov	r0, r5
   2411e:	f7f9 fec7 	bl	1deb0 <net_pkt_clone>
			if (!new_pkt) {
   24122:	4605      	mov	r5, r0
   24124:	b178      	cbz	r0, 24146 <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   24126:	f7f6 ff93 	bl	1b050 <net_send_data>
			if (ret < 0) {
   2412a:	1e04      	subs	r4, r0, #0
   2412c:	db04      	blt.n	24138 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   2412e:	4a07      	ldr	r2, [pc, #28]	; (2414c <net_tcp_send_pkt+0x12c>)
   24130:	6f13      	ldr	r3, [r2, #112]	; 0x70
   24132:	3301      	adds	r3, #1
   24134:	6713      	str	r3, [r2, #112]	; 0x70
   24136:	e7c4      	b.n	240c2 <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   24138:	4628      	mov	r0, r5
   2413a:	f7f9 fb8a 	bl	1d852 <net_pkt_unref>
   2413e:	e7c0      	b.n	240c2 <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   24140:	f06f 0479 	mvn.w	r4, #121	; 0x79
   24144:	e7bd      	b.n	240c2 <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   24146:	f06f 040b 	mvn.w	r4, #11
   2414a:	e7ba      	b.n	240c2 <net_tcp_send_pkt+0xa2>
   2414c:	20002b58 	.word	0x20002b58

00024150 <tcp_retry_expired>:
	return (!list->head);
   24150:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   24152:	2b00      	cmp	r3, #0
   24154:	d05c      	beq.n	24210 <tcp_retry_expired+0xc0>
{
   24156:	b510      	push	{r4, lr}
   24158:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   2415c:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   2415e:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   24162:	f002 031f 	and.w	r3, r2, #31
   24166:	3301      	adds	r3, #1
   24168:	f003 031f 	and.w	r3, r3, #31
   2416c:	f363 0204 	bfi	r2, r3, #0, #5
   24170:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   24174:	2b09      	cmp	r3, #9
   24176:	dc2f      	bgt.n	241d8 <tcp_retry_expired+0x88>
   24178:	2200      	movs	r2, #0
   2417a:	21c8      	movs	r1, #200	; 0xc8
   2417c:	4099      	lsls	r1, r3
   2417e:	f005 fd4d 	bl	29c1c <_impl_k_timer_start>
	return list->head;
   24182:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   24184:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   24188:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   2418a:	f012 0f01 	tst.w	r2, #1
   2418e:	d00d      	beq.n	241ac <tcp_retry_expired+0x5c>
	return pkt->family;
   24190:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   24194:	2a0a      	cmp	r2, #10
   24196:	d023      	beq.n	241e0 <tcp_retry_expired+0x90>
   24198:	4620      	mov	r0, r4
   2419a:	f7f9 fb4b 	bl	1d834 <net_pkt_ref>
   2419e:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   241a0:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241a4:	f36f 0300 	bfc	r3, #0, #1
   241a8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   241ac:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241b0:	f043 0302 	orr.w	r3, r3, #2
   241b4:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   241b8:	4620      	mov	r0, r4
   241ba:	f7ff ff31 	bl	24020 <net_tcp_send_pkt>
   241be:	2800      	cmp	r0, #0
   241c0:	db13      	blt.n	241ea <tcp_retry_expired+0x9a>
	return pkt->family;
   241c2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241c6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   241ca:	2b0a      	cmp	r3, #10
   241cc:	d01b      	beq.n	24206 <tcp_retry_expired+0xb6>
   241ce:	4a11      	ldr	r2, [pc, #68]	; (24214 <tcp_retry_expired+0xc4>)
   241d0:	6f13      	ldr	r3, [r2, #112]	; 0x70
   241d2:	3301      	adds	r3, #1
   241d4:	6713      	str	r3, [r2, #112]	; 0x70
   241d6:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   241d8:	4608      	mov	r0, r1
   241da:	f7ff f99a 	bl	23512 <abort_connection>
			return;
   241de:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   241e0:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   241e4:	2b02      	cmp	r3, #2
   241e6:	d1d7      	bne.n	24198 <tcp_retry_expired+0x48>
   241e8:	e7da      	b.n	241a0 <tcp_retry_expired+0x50>
   241ea:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   241ee:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   241f2:	2b0a      	cmp	r3, #10
   241f4:	d103      	bne.n	241fe <tcp_retry_expired+0xae>
   241f6:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   241fa:	2b02      	cmp	r3, #2
   241fc:	d0e1      	beq.n	241c2 <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   241fe:	4620      	mov	r0, r4
   24200:	f7f9 fb27 	bl	1d852 <net_pkt_unref>
   24204:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   24206:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2420a:	2b02      	cmp	r3, #2
   2420c:	d1df      	bne.n	241ce <tcp_retry_expired+0x7e>
   2420e:	e7e2      	b.n	241d6 <tcp_retry_expired+0x86>
   24210:	4770      	bx	lr
   24212:	bf00      	nop
   24214:	20002b58 	.word	0x20002b58

00024218 <net_tcp_send_data>:
{
   24218:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2421a:	6e03      	ldr	r3, [r0, #96]	; 0x60
   2421c:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   24220:	b10c      	cbz	r4, 24226 <net_tcp_send_data+0xe>
   24222:	3c34      	subs	r4, #52	; 0x34
   24224:	e013      	b.n	2424e <net_tcp_send_data+0x36>
   24226:	2400      	movs	r4, #0
   24228:	e011      	b.n	2424e <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   2422a:	4620      	mov	r0, r4
   2422c:	f7f9 fb11 	bl	1d852 <net_pkt_unref>
	pkt->pkt_queued = send;
   24230:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   24234:	f043 0302 	orr.w	r3, r3, #2
   24238:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2423c:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   24240:	d01e      	beq.n	24280 <net_tcp_send_data+0x68>
	return node->next;
   24242:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24244:	b1f2      	cbz	r2, 24284 <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24246:	b103      	cbz	r3, 2424a <net_tcp_send_data+0x32>
	return node->next;
   24248:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2424a:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   2424e:	b1dc      	cbz	r4, 24288 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   24250:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   24254:	f013 0f02 	tst.w	r3, #2
   24258:	d1f0      	bne.n	2423c <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   2425a:	f013 0f01 	tst.w	r3, #1
   2425e:	d1ed      	bne.n	2423c <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   24260:	4620      	mov	r0, r4
   24262:	f7ff fedd 	bl	24020 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   24266:	2800      	cmp	r0, #0
   24268:	dae2      	bge.n	24230 <net_tcp_send_data+0x18>
	return pkt->family;
   2426a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2426e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   24272:	2b0a      	cmp	r3, #10
   24274:	d1d9      	bne.n	2422a <net_tcp_send_data+0x12>
   24276:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   2427a:	2b02      	cmp	r3, #2
   2427c:	d1d5      	bne.n	2422a <net_tcp_send_data+0x12>
   2427e:	e7d7      	b.n	24230 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24280:	461a      	mov	r2, r3
   24282:	e7df      	b.n	24244 <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   24284:	2400      	movs	r4, #0
   24286:	e7e2      	b.n	2424e <net_tcp_send_data+0x36>
}
   24288:	2000      	movs	r0, #0
   2428a:	bd10      	pop	{r4, pc}

0002428c <net_tcp_ack_received>:
{
   2428c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24290:	b087      	sub	sp, #28
   24292:	4681      	mov	r9, r0
   24294:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   24296:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   24298:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   2429c:	b10b      	cbz	r3, 242a2 <net_tcp_ack_received+0x16>
		valid_ack = true;
   2429e:	2700      	movs	r7, #0
   242a0:	e033      	b.n	2430a <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   242a2:	4a51      	ldr	r2, [pc, #324]	; (243e8 <net_tcp_ack_received+0x15c>)
   242a4:	6e53      	ldr	r3, [r2, #100]	; 0x64
   242a6:	3301      	adds	r3, #1
   242a8:	6653      	str	r3, [r2, #100]	; 0x64
   242aa:	e7f8      	b.n	2429e <net_tcp_ack_received+0x12>
		list->head = node->next;
   242ac:	6823      	ldr	r3, [r4, #0]
   242ae:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   242b2:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   242b6:	42a2      	cmp	r2, r4
   242b8:	d005      	beq.n	242c6 <net_tcp_ack_received+0x3a>
	node->next = NULL;
   242ba:	2300      	movs	r3, #0
   242bc:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   242be:	4630      	mov	r0, r6
   242c0:	f7f9 fac7 	bl	1d852 <net_pkt_unref>
   242c4:	e021      	b.n	2430a <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   242c6:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   242ca:	e7f6      	b.n	242ba <net_tcp_ack_received+0x2e>
   242cc:	4a46      	ldr	r2, [pc, #280]	; (243e8 <net_tcp_ack_received+0x15c>)
   242ce:	6e53      	ldr	r3, [r2, #100]	; 0x64
   242d0:	3301      	adds	r3, #1
   242d2:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   242d4:	b12f      	cbz	r7, 242e2 <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   242d6:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   242da:	f3c3 3343 	ubfx	r3, r3, #13, #4
   242de:	2b04      	cmp	r3, #4
   242e0:	d046      	beq.n	24370 <net_tcp_ack_received+0xe4>
}
   242e2:	b007      	add	sp, #28
   242e4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   242e8:	2108      	movs	r1, #8
   242ea:	4628      	mov	r0, r5
   242ec:	f7ff faf7 	bl	238de <net_tcp_change_state>
		list->head = node->next;
   242f0:	6823      	ldr	r3, [r4, #0]
   242f2:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   242f6:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   242fa:	42a2      	cmp	r2, r4
   242fc:	d035      	beq.n	2436a <net_tcp_ack_received+0xde>
	node->next = NULL;
   242fe:	2300      	movs	r3, #0
   24300:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   24302:	4630      	mov	r0, r6
   24304:	f7f9 faa5 	bl	1d852 <net_pkt_unref>
		valid_ack = true;
   24308:	2701      	movs	r7, #1
	return (!list->head);
   2430a:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   2430e:	2c00      	cmp	r4, #0
   24310:	d0e0      	beq.n	242d4 <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   24312:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   24316:	a901      	add	r1, sp, #4
   24318:	4630      	mov	r0, r6
   2431a:	f7ff fccf 	bl	23cbc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   2431e:	4602      	mov	r2, r0
   24320:	2800      	cmp	r0, #0
   24322:	d0c3      	beq.n	242ac <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   24324:	7903      	ldrb	r3, [r0, #4]
   24326:	7941      	ldrb	r1, [r0, #5]
   24328:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   2432c:	7980      	ldrb	r0, [r0, #6]
   2432e:	79d3      	ldrb	r3, [r2, #7]
   24330:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   24334:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   24338:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   2433c:	440b      	add	r3, r1
   2433e:	3b01      	subs	r3, #1
   24340:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   24344:	2b00      	cmp	r3, #0
   24346:	ddc1      	ble.n	242cc <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   24348:	7b53      	ldrb	r3, [r2, #13]
   2434a:	f013 0f01 	tst.w	r3, #1
   2434e:	d0cf      	beq.n	242f0 <net_tcp_ack_received+0x64>
   24350:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   24354:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   24358:	2b07      	cmp	r3, #7
   2435a:	d0c5      	beq.n	242e8 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   2435c:	2b0a      	cmp	r3, #10
   2435e:	d1c7      	bne.n	242f0 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   24360:	2109      	movs	r1, #9
   24362:	4628      	mov	r0, r5
   24364:	f7ff fabb 	bl	238de <net_tcp_change_state>
   24368:	e7c2      	b.n	242f0 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   2436a:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   2436e:	e7c6      	b.n	242fe <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   24370:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   24374:	f7ff f8db 	bl	2352e <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   24378:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   2437c:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   24380:	f412 7f00 	tst.w	r2, #512	; 0x200
   24384:	d0ad      	beq.n	242e2 <net_tcp_ack_received+0x56>
	return list->head;
   24386:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2438a:	b108      	cbz	r0, 24390 <net_tcp_ack_received+0x104>
   2438c:	3834      	subs	r0, #52	; 0x34
   2438e:	e013      	b.n	243b8 <net_tcp_ack_received+0x12c>
   24390:	2000      	movs	r0, #0
   24392:	e011      	b.n	243b8 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   24394:	f7f9 fa4e 	bl	1d834 <net_pkt_ref>
	pkt->sent_or_eof = sent;
   24398:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2439c:	f36f 0300 	bfc	r3, #0, #1
   243a0:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   243a4:	b140      	cbz	r0, 243b8 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243a6:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   243aa:	d014      	beq.n	243d6 <net_tcp_ack_received+0x14a>
	return node->next;
   243ac:	6b42      	ldr	r2, [r0, #52]	; 0x34
   243ae:	b1a2      	cbz	r2, 243da <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243b0:	b103      	cbz	r3, 243b4 <net_tcp_ack_received+0x128>
	return node->next;
   243b2:	6b43      	ldr	r3, [r0, #52]	; 0x34
   243b4:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   243b8:	b188      	cbz	r0, 243de <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   243ba:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   243be:	f013 0f01 	tst.w	r3, #1
   243c2:	d0ef      	beq.n	243a4 <net_tcp_ack_received+0x118>
	return pkt->family;
   243c4:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   243c8:	2b0a      	cmp	r3, #10
   243ca:	d1e3      	bne.n	24394 <net_tcp_ack_received+0x108>
   243cc:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   243d0:	2b02      	cmp	r3, #2
   243d2:	d1df      	bne.n	24394 <net_tcp_ack_received+0x108>
   243d4:	e7e0      	b.n	24398 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   243d6:	461a      	mov	r2, r3
   243d8:	e7e9      	b.n	243ae <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   243da:	2000      	movs	r0, #0
   243dc:	e7ec      	b.n	243b8 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   243de:	4648      	mov	r0, r9
   243e0:	f7ff ff1a 	bl	24218 <net_tcp_send_data>
}
   243e4:	e77d      	b.n	242e2 <net_tcp_ack_received+0x56>
   243e6:	bf00      	nop
   243e8:	20002b58 	.word	0x20002b58

000243ec <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   243ec:	6842      	ldr	r2, [r0, #4]
   243ee:	4b08      	ldr	r3, [pc, #32]	; (24410 <iface2str+0x24>)
   243f0:	429a      	cmp	r2, r3
   243f2:	d004      	beq.n	243fe <iface2str+0x12>
	if (extra) {
   243f4:	b151      	cbz	r1, 2440c <iface2str+0x20>
		*extra = "==============";
   243f6:	4b07      	ldr	r3, [pc, #28]	; (24414 <iface2str+0x28>)
   243f8:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   243fa:	4807      	ldr	r0, [pc, #28]	; (24418 <iface2str+0x2c>)
   243fc:	4770      	bx	lr
		if (extra) {
   243fe:	b119      	cbz	r1, 24408 <iface2str+0x1c>
			*extra = "=========";
   24400:	4b06      	ldr	r3, [pc, #24]	; (2441c <iface2str+0x30>)
   24402:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   24404:	4806      	ldr	r0, [pc, #24]	; (24420 <iface2str+0x34>)
   24406:	4770      	bx	lr
   24408:	4805      	ldr	r0, [pc, #20]	; (24420 <iface2str+0x34>)
   2440a:	4770      	bx	lr
	return "<unknown type>";
   2440c:	4802      	ldr	r0, [pc, #8]	; (24418 <iface2str+0x2c>)
}
   2440e:	4770      	bx	lr
   24410:	0002e748 	.word	0x0002e748
   24414:	00031f48 	.word	0x00031f48
   24418:	00031f2c 	.word	0x00031f2c
   2441c:	00031f3c 	.word	0x00031f3c
   24420:	00031f20 	.word	0x00031f20

00024424 <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   24424:	2300      	movs	r3, #0
   24426:	2b05      	cmp	r3, #5
   24428:	dc18      	bgt.n	2445c <slab_pool_found_already+0x38>
{
   2442a:	b410      	push	{r4}
   2442c:	e008      	b.n	24440 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   2442e:	f103 0408 	add.w	r4, r3, #8
   24432:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   24436:	4294      	cmp	r4, r2
   24438:	d00e      	beq.n	24458 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   2443a:	3301      	adds	r3, #1
   2443c:	2b05      	cmp	r3, #5
   2443e:	dc08      	bgt.n	24452 <slab_pool_found_already+0x2e>
		if (slab) {
   24440:	2900      	cmp	r1, #0
   24442:	d0f4      	beq.n	2442e <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   24444:	1c9c      	adds	r4, r3, #2
   24446:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   2444a:	42a1      	cmp	r1, r4
   2444c:	d1f5      	bne.n	2443a <slab_pool_found_already+0x16>
				return true;
   2444e:	2001      	movs	r0, #1
   24450:	e000      	b.n	24454 <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   24452:	2000      	movs	r0, #0
}
   24454:	bc10      	pop	{r4}
   24456:	4770      	bx	lr
				return true;
   24458:	2001      	movs	r0, #1
   2445a:	e7fb      	b.n	24454 <slab_pool_found_already+0x30>
	return false;
   2445c:	2000      	movs	r0, #0
}
   2445e:	4770      	bx	lr

00024460 <net_shell_cmd_allocs>:
{
   24460:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   24462:	4802      	ldr	r0, [pc, #8]	; (2446c <net_shell_cmd_allocs+0xc>)
   24464:	f7de fdd2 	bl	300c <printk>
}
   24468:	2000      	movs	r0, #0
   2446a:	bd08      	pop	{r3, pc}
   2446c:	0003221c 	.word	0x0003221c

00024470 <net_shell_cmd_app>:
{
   24470:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   24472:	4802      	ldr	r0, [pc, #8]	; (2447c <net_shell_cmd_app+0xc>)
   24474:	f7de fdca 	bl	300c <printk>
}
   24478:	2000      	movs	r0, #0
   2447a:	bd08      	pop	{r3, pc}
   2447c:	00032254 	.word	0x00032254

00024480 <net_shell_cmd_arp>:
{
   24480:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   24482:	4802      	ldr	r0, [pc, #8]	; (2448c <net_shell_cmd_arp+0xc>)
   24484:	f7de fdc2 	bl	300c <printk>
}
   24488:	2000      	movs	r0, #0
   2448a:	bd08      	pop	{r3, pc}
   2448c:	000322d8 	.word	0x000322d8

00024490 <net_shell_cmd_dns>:
{
   24490:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   24492:	4802      	ldr	r0, [pc, #8]	; (2449c <net_shell_cmd_dns+0xc>)
   24494:	f7de fdba 	bl	300c <printk>
}
   24498:	2000      	movs	r0, #0
   2449a:	bd08      	pop	{r3, pc}
   2449c:	000323d8 	.word	0x000323d8

000244a0 <net_shell_cmd_http>:
{
   244a0:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   244a2:	4802      	ldr	r0, [pc, #8]	; (244ac <net_shell_cmd_http+0xc>)
   244a4:	f7de fdb2 	bl	300c <printk>
}
   244a8:	2000      	movs	r0, #0
   244aa:	bd08      	pop	{r3, pc}
   244ac:	000323f8 	.word	0x000323f8

000244b0 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   244b0:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   244b4:	f013 0f01 	tst.w	r3, #1
   244b8:	d032      	beq.n	24520 <context_info+0x70>
{
   244ba:	b570      	push	{r4, r5, r6, lr}
   244bc:	460d      	mov	r5, r1
   244be:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   244c0:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   244c2:	b19b      	cbz	r3, 244ec <context_info+0x3c>
		slab = context->tx_slab();
   244c4:	4798      	blx	r3
   244c6:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   244c8:	2200      	movs	r2, #0
   244ca:	4601      	mov	r1, r0
   244cc:	4628      	mov	r0, r5
   244ce:	f7ff ffa9 	bl	24424 <slab_pool_found_already>
   244d2:	b100      	cbz	r0, 244d6 <context_info+0x26>
   244d4:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   244d6:	68b2      	ldr	r2, [r6, #8]
   244d8:	4631      	mov	r1, r6
   244da:	4812      	ldr	r0, [pc, #72]	; (24524 <context_info+0x74>)
   244dc:	f7de fd96 	bl	300c <printk>
#endif
		info->are_external_pools = true;
   244e0:	2301      	movs	r3, #1
   244e2:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   244e4:	682b      	ldr	r3, [r5, #0]
   244e6:	3302      	adds	r3, #2
   244e8:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   244ec:	6c23      	ldr	r3, [r4, #64]	; 0x40
   244ee:	b19b      	cbz	r3, 24518 <context_info+0x68>
		pool = context->data_pool();
   244f0:	4798      	blx	r3
   244f2:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   244f4:	4602      	mov	r2, r0
   244f6:	2100      	movs	r1, #0
   244f8:	4628      	mov	r0, r5
   244fa:	f7ff ff93 	bl	24424 <slab_pool_found_already>
   244fe:	2800      	cmp	r0, #0
   24500:	d1e8      	bne.n	244d4 <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   24502:	8a22      	ldrh	r2, [r4, #16]
   24504:	4621      	mov	r1, r4
   24506:	4808      	ldr	r0, [pc, #32]	; (24528 <context_info+0x78>)
   24508:	f7de fd80 	bl	300c <printk>
#endif
		info->are_external_pools = true;
   2450c:	2301      	movs	r3, #1
   2450e:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   24510:	682b      	ldr	r3, [r5, #0]
   24512:	3308      	adds	r3, #8
   24514:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   24518:	682b      	ldr	r3, [r5, #0]
   2451a:	3301      	adds	r3, #1
   2451c:	602b      	str	r3, [r5, #0]
   2451e:	e7d9      	b.n	244d4 <context_info+0x24>
   24520:	4770      	bx	lr
   24522:	bf00      	nop
   24524:	00031ee4 	.word	0x00031ee4
   24528:	00031ef0 	.word	0x00031ef0

0002452c <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   2452c:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   2452e:	4802      	ldr	r0, [pc, #8]	; (24538 <net_shell_cmd_rpl+0xc>)
   24530:	f7de fd6c 	bl	300c <printk>
#endif

	return 0;
}
   24534:	2000      	movs	r0, #0
   24536:	bd08      	pop	{r3, pc}
   24538:	00032608 	.word	0x00032608

0002453c <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   2453c:	b530      	push	{r4, r5, lr}
   2453e:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24540:	4d3f      	ldr	r5, [pc, #252]	; (24640 <net_shell_cmd_stacks+0x104>)
   24542:	e011      	b.n	24568 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   24544:	1a81      	subs	r1, r0, r2
   24546:	2364      	movs	r3, #100	; 0x64
   24548:	fb03 f301 	mul.w	r3, r3, r1
   2454c:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   24550:	9304      	str	r3, [sp, #16]
   24552:	9003      	str	r0, [sp, #12]
   24554:	9102      	str	r1, [sp, #8]
   24556:	9201      	str	r2, [sp, #4]
   24558:	9000      	str	r0, [sp, #0]
   2455a:	68eb      	ldr	r3, [r5, #12]
   2455c:	68aa      	ldr	r2, [r5, #8]
   2455e:	6869      	ldr	r1, [r5, #4]
   24560:	4838      	ldr	r0, [pc, #224]	; (24644 <net_shell_cmd_stacks+0x108>)
   24562:	f7de fd53 	bl	300c <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   24566:	3514      	adds	r5, #20
   24568:	4b37      	ldr	r3, [pc, #220]	; (24648 <net_shell_cmd_stacks+0x10c>)
   2456a:	429d      	cmp	r5, r3
   2456c:	d00b      	beq.n	24586 <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   2456e:	682c      	ldr	r4, [r5, #0]
   24570:	6928      	ldr	r0, [r5, #16]
   24572:	2300      	movs	r3, #0
	size_t unused = 0;
   24574:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24576:	4298      	cmp	r0, r3
   24578:	d9e4      	bls.n	24544 <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   2457a:	5ce1      	ldrb	r1, [r4, r3]
   2457c:	29aa      	cmp	r1, #170	; 0xaa
   2457e:	d1e1      	bne.n	24544 <net_shell_cmd_stacks+0x8>
			unused++;
   24580:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24582:	3301      	adds	r3, #1
   24584:	e7f7      	b.n	24576 <net_shell_cmd_stacks+0x3a>
   24586:	2300      	movs	r3, #0
   24588:	461a      	mov	r2, r3
   2458a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   2458e:	d206      	bcs.n	2459e <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   24590:	492e      	ldr	r1, [pc, #184]	; (2464c <net_shell_cmd_stacks+0x110>)
   24592:	5cc9      	ldrb	r1, [r1, r3]
   24594:	29aa      	cmp	r1, #170	; 0xaa
   24596:	d102      	bne.n	2459e <net_shell_cmd_stacks+0x62>
			unused++;
   24598:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   2459a:	3301      	adds	r3, #1
   2459c:	e7f5      	b.n	2458a <net_shell_cmd_stacks+0x4e>
   2459e:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   245a2:	2364      	movs	r3, #100	; 0x64
   245a4:	fb03 f301 	mul.w	r3, r3, r1
   245a8:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   245aa:	9304      	str	r3, [sp, #16]
   245ac:	f44f 6300 	mov.w	r3, #2048	; 0x800
   245b0:	9303      	str	r3, [sp, #12]
   245b2:	9102      	str	r1, [sp, #8]
   245b4:	9201      	str	r2, [sp, #4]
   245b6:	9300      	str	r3, [sp, #0]
   245b8:	4a25      	ldr	r2, [pc, #148]	; (24650 <net_shell_cmd_stacks+0x114>)
   245ba:	4926      	ldr	r1, [pc, #152]	; (24654 <net_shell_cmd_stacks+0x118>)
   245bc:	4826      	ldr	r0, [pc, #152]	; (24658 <net_shell_cmd_stacks+0x11c>)
   245be:	f7de fd25 	bl	300c <printk>
   245c2:	2300      	movs	r3, #0
	size_t unused = 0;
   245c4:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   245c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   245ca:	d206      	bcs.n	245da <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   245cc:	4923      	ldr	r1, [pc, #140]	; (2465c <net_shell_cmd_stacks+0x120>)
   245ce:	5cc9      	ldrb	r1, [r1, r3]
   245d0:	29aa      	cmp	r1, #170	; 0xaa
   245d2:	d102      	bne.n	245da <net_shell_cmd_stacks+0x9e>
			unused++;
   245d4:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   245d6:	3301      	adds	r3, #1
   245d8:	e7f5      	b.n	245c6 <net_shell_cmd_stacks+0x8a>
   245da:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   245de:	2364      	movs	r3, #100	; 0x64
   245e0:	fb03 f301 	mul.w	r3, r3, r1
   245e4:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   245e6:	9304      	str	r3, [sp, #16]
   245e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
   245ec:	9303      	str	r3, [sp, #12]
   245ee:	9102      	str	r1, [sp, #8]
   245f0:	9201      	str	r2, [sp, #4]
   245f2:	9300      	str	r3, [sp, #0]
   245f4:	4a1a      	ldr	r2, [pc, #104]	; (24660 <net_shell_cmd_stacks+0x124>)
   245f6:	491b      	ldr	r1, [pc, #108]	; (24664 <net_shell_cmd_stacks+0x128>)
   245f8:	4817      	ldr	r0, [pc, #92]	; (24658 <net_shell_cmd_stacks+0x11c>)
   245fa:	f7de fd07 	bl	300c <printk>
   245fe:	2300      	movs	r3, #0
	size_t unused = 0;
   24600:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   24602:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   24606:	d206      	bcs.n	24616 <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   24608:	4917      	ldr	r1, [pc, #92]	; (24668 <net_shell_cmd_stacks+0x12c>)
   2460a:	5cc9      	ldrb	r1, [r1, r3]
   2460c:	29aa      	cmp	r1, #170	; 0xaa
   2460e:	d102      	bne.n	24616 <net_shell_cmd_stacks+0xda>
			unused++;
   24610:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   24612:	3301      	adds	r3, #1
   24614:	e7f5      	b.n	24602 <net_shell_cmd_stacks+0xc6>
   24616:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   2461a:	2364      	movs	r3, #100	; 0x64
   2461c:	fb03 f301 	mul.w	r3, r3, r1
   24620:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   24622:	9304      	str	r3, [sp, #16]
   24624:	f44f 6380 	mov.w	r3, #1024	; 0x400
   24628:	9303      	str	r3, [sp, #12]
   2462a:	9102      	str	r1, [sp, #8]
   2462c:	9201      	str	r2, [sp, #4]
   2462e:	9300      	str	r3, [sp, #0]
   24630:	4a0e      	ldr	r2, [pc, #56]	; (2466c <net_shell_cmd_stacks+0x130>)
   24632:	490f      	ldr	r1, [pc, #60]	; (24670 <net_shell_cmd_stacks+0x134>)
   24634:	4808      	ldr	r0, [pc, #32]	; (24658 <net_shell_cmd_stacks+0x11c>)
   24636:	f7de fce9 	bl	300c <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   2463a:	2000      	movs	r0, #0
   2463c:	b007      	add	sp, #28
   2463e:	bd30      	pop	{r4, r5, pc}
   24640:	2000d574 	.word	0x2000d574
   24644:	0003263c 	.word	0x0003263c
   24648:	2000d5b0 	.word	0x2000d5b0
   2464c:	2000a428 	.word	0x2000a428
   24650:	00032680 	.word	0x00032680
   24654:	0003268c 	.word	0x0003268c
   24658:	00032694 	.word	0x00032694
   2465c:	2000ad68 	.word	0x2000ad68
   24660:	000326d4 	.word	0x000326d4
   24664:	000326e8 	.word	0x000326e8
   24668:	2000b568 	.word	0x2000b568
   2466c:	000326ec 	.word	0x000326ec
   24670:	00032700 	.word	0x00032700

00024674 <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   24674:	b510      	push	{r4, lr}
   24676:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   24678:	4c34      	ldr	r4, [pc, #208]	; (2474c <net_shell_cmd_stats+0xd8>)
   2467a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   2467c:	9300      	str	r3, [sp, #0]
   2467e:	6b23      	ldr	r3, [r4, #48]	; 0x30
   24680:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   24682:	6a61      	ldr	r1, [r4, #36]	; 0x24
   24684:	4832      	ldr	r0, [pc, #200]	; (24750 <net_shell_cmd_stats+0xdc>)
   24686:	f7de fcc1 	bl	300c <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   2468a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2468e:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   24692:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   24696:	482f      	ldr	r0, [pc, #188]	; (24754 <net_shell_cmd_stats+0xe0>)
   24698:	f7de fcb8 	bl	300c <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   2469c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   246a0:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   246a4:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   246a8:	482b      	ldr	r0, [pc, #172]	; (24758 <net_shell_cmd_stats+0xe4>)
   246aa:	f7de fcaf 	bl	300c <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   246ae:	6963      	ldr	r3, [r4, #20]
   246b0:	6922      	ldr	r2, [r4, #16]
   246b2:	68e1      	ldr	r1, [r4, #12]
   246b4:	4829      	ldr	r0, [pc, #164]	; (2475c <net_shell_cmd_stats+0xe8>)
   246b6:	f7de fca9 	bl	300c <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   246ba:	6a23      	ldr	r3, [r4, #32]
   246bc:	69e2      	ldr	r2, [r4, #28]
   246be:	69a1      	ldr	r1, [r4, #24]
   246c0:	4827      	ldr	r0, [pc, #156]	; (24760 <net_shell_cmd_stats+0xec>)
   246c2:	f7de fca3 	bl	300c <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   246c6:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   246c8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   246ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
   246cc:	4825      	ldr	r0, [pc, #148]	; (24764 <net_shell_cmd_stats+0xf0>)
   246ce:	f7de fc9d 	bl	300c <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   246d2:	6c62      	ldr	r2, [r4, #68]	; 0x44
   246d4:	6c21      	ldr	r1, [r4, #64]	; 0x40
   246d6:	4824      	ldr	r0, [pc, #144]	; (24768 <net_shell_cmd_stats+0xf4>)
   246d8:	f7de fc98 	bl	300c <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   246dc:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   246de:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   246e2:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   246e6:	4821      	ldr	r0, [pc, #132]	; (2476c <net_shell_cmd_stats+0xf8>)
   246e8:	f7de fc90 	bl	300c <printk>
	printk("UDP chkerr     %d\n",
   246ec:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   246f0:	481f      	ldr	r0, [pc, #124]	; (24770 <net_shell_cmd_stats+0xfc>)
   246f2:	f7de fc8b 	bl	300c <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   246f6:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   246f8:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   246fa:	481e      	ldr	r0, [pc, #120]	; (24774 <net_shell_cmd_stats+0x100>)
   246fc:	f7de fc86 	bl	300c <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   24700:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   24702:	6da2      	ldr	r2, [r4, #88]	; 0x58
   24704:	6d61      	ldr	r1, [r4, #84]	; 0x54
   24706:	481c      	ldr	r0, [pc, #112]	; (24778 <net_shell_cmd_stats+0x104>)
   24708:	f7de fc80 	bl	300c <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   2470c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   2470e:	6e22      	ldr	r2, [r4, #96]	; 0x60
   24710:	6d21      	ldr	r1, [r4, #80]	; 0x50
   24712:	481a      	ldr	r0, [pc, #104]	; (2477c <net_shell_cmd_stats+0x108>)
   24714:	f7de fc7a 	bl	300c <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   24718:	6f23      	ldr	r3, [r4, #112]	; 0x70
   2471a:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   2471c:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2471e:	4818      	ldr	r0, [pc, #96]	; (24780 <net_shell_cmd_stats+0x10c>)
   24720:	f7de fc74 	bl	300c <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   24724:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   24726:	6f61      	ldr	r1, [r4, #116]	; 0x74
   24728:	4816      	ldr	r0, [pc, #88]	; (24784 <net_shell_cmd_stats+0x110>)
   2472a:	f7de fc6f 	bl	300c <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   2472e:	68a1      	ldr	r1, [r4, #8]
   24730:	4815      	ldr	r0, [pc, #84]	; (24788 <net_shell_cmd_stats+0x114>)
   24732:	f7de fc6b 	bl	300c <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   24736:	6861      	ldr	r1, [r4, #4]
   24738:	4814      	ldr	r0, [pc, #80]	; (2478c <net_shell_cmd_stats+0x118>)
   2473a:	f7de fc67 	bl	300c <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   2473e:	6821      	ldr	r1, [r4, #0]
   24740:	4813      	ldr	r0, [pc, #76]	; (24790 <net_shell_cmd_stats+0x11c>)
   24742:	f7de fc63 	bl	300c <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   24746:	2000      	movs	r0, #0
   24748:	b002      	add	sp, #8
   2474a:	bd10      	pop	{r4, pc}
   2474c:	20002b58 	.word	0x20002b58
   24750:	00032708 	.word	0x00032708
   24754:	00032738 	.word	0x00032738
   24758:	0003275c 	.word	0x0003275c
   2475c:	00032780 	.word	0x00032780
   24760:	000327ac 	.word	0x000327ac
   24764:	000327d4 	.word	0x000327d4
   24768:	000327f8 	.word	0x000327f8
   2476c:	00032818 	.word	0x00032818
   24770:	0003283c 	.word	0x0003283c
   24774:	00032850 	.word	0x00032850
   24778:	0003286c 	.word	0x0003286c
   2477c:	00032890 	.word	0x00032890
   24780:	000328b8 	.word	0x000328b8
   24784:	000328e0 	.word	0x000328e0
   24788:	00032900 	.word	0x00032900
   2478c:	00032914 	.word	0x00032914
   24790:	00032928 	.word	0x00032928

00024794 <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   24794:	b508      	push	{r3, lr}
	printk("Message sent\n");
   24796:	4802      	ldr	r0, [pc, #8]	; (247a0 <tcp_sent_cb+0xc>)
   24798:	f7de fc38 	bl	300c <printk>
   2479c:	bd08      	pop	{r3, pc}
   2479e:	bf00      	nop
   247a0:	00032be8 	.word	0x00032be8

000247a4 <net_shell_cmd_conn>:
{
   247a4:	b510      	push	{r4, lr}
   247a6:	b082      	sub	sp, #8
	int count = 0;
   247a8:	ac02      	add	r4, sp, #8
   247aa:	2300      	movs	r3, #0
   247ac:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   247b0:	4810      	ldr	r0, [pc, #64]	; (247f4 <net_shell_cmd_conn+0x50>)
   247b2:	f7de fc2b 	bl	300c <printk>
	net_context_foreach(context_cb, &count);
   247b6:	4621      	mov	r1, r4
   247b8:	480f      	ldr	r0, [pc, #60]	; (247f8 <net_shell_cmd_conn+0x54>)
   247ba:	f7f8 ff03 	bl	1d5c4 <net_context_foreach>
	if (count == 0) {
   247be:	9b01      	ldr	r3, [sp, #4]
   247c0:	b17b      	cbz	r3, 247e2 <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   247c2:	490e      	ldr	r1, [pc, #56]	; (247fc <net_shell_cmd_conn+0x58>)
   247c4:	480e      	ldr	r0, [pc, #56]	; (24800 <net_shell_cmd_conn+0x5c>)
   247c6:	f7de fc21 	bl	300c <printk>
	count = 0;
   247ca:	a902      	add	r1, sp, #8
   247cc:	2300      	movs	r3, #0
   247ce:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   247d2:	480c      	ldr	r0, [pc, #48]	; (24804 <net_shell_cmd_conn+0x60>)
   247d4:	f7ff fa48 	bl	23c68 <net_tcp_foreach>
	if (count == 0) {
   247d8:	9b01      	ldr	r3, [sp, #4]
   247da:	b133      	cbz	r3, 247ea <net_shell_cmd_conn+0x46>
}
   247dc:	2000      	movs	r0, #0
   247de:	b002      	add	sp, #8
   247e0:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   247e2:	4809      	ldr	r0, [pc, #36]	; (24808 <net_shell_cmd_conn+0x64>)
   247e4:	f7de fc12 	bl	300c <printk>
   247e8:	e7eb      	b.n	247c2 <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   247ea:	4808      	ldr	r0, [pc, #32]	; (2480c <net_shell_cmd_conn+0x68>)
   247ec:	f7de fc0e 	bl	300c <printk>
   247f0:	e7f4      	b.n	247dc <net_shell_cmd_conn+0x38>
   247f2:	bf00      	nop
   247f4:	00032334 	.word	0x00032334
   247f8:	00024981 	.word	0x00024981
   247fc:	0002f2c4 	.word	0x0002f2c4
   24800:	00032384 	.word	0x00032384
   24804:	00024811 	.word	0x00024811
   24808:	00032374 	.word	0x00032374
   2480c:	000323c4 	.word	0x000323c4

00024810 <tcp_cb>:
{
   24810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24814:	b084      	sub	sp, #16
   24816:	4604      	mov	r4, r0
   24818:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   2481a:	f7fe ffe4 	bl	237e6 <net_tcp_get_recv_mss>
   2481e:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   24820:	6823      	ldr	r3, [r4, #0]
   24822:	895a      	ldrh	r2, [r3, #10]
   24824:	0215      	lsls	r5, r2, #8
   24826:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   2482a:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   2482c:	8adb      	ldrh	r3, [r3, #22]
   2482e:	021e      	lsls	r6, r3, #8
   24830:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   24834:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   24836:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   2483a:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   2483e:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   24842:	f3c0 3043 	ubfx	r0, r0, #13, #4
   24846:	f7ff f845 	bl	238d4 <net_tcp_state_str>
   2484a:	9003      	str	r0, [sp, #12]
   2484c:	f8cd 8008 	str.w	r8, [sp, #8]
   24850:	f8cd a004 	str.w	sl, [sp, #4]
   24854:	f8cd 9000 	str.w	r9, [sp]
   24858:	4633      	mov	r3, r6
   2485a:	462a      	mov	r2, r5
   2485c:	4621      	mov	r1, r4
   2485e:	4804      	ldr	r0, [pc, #16]	; (24870 <tcp_cb+0x60>)
   24860:	f7de fbd4 	bl	300c <printk>
	(*count)++;
   24864:	683b      	ldr	r3, [r7, #0]
   24866:	3301      	adds	r3, #1
   24868:	603b      	str	r3, [r7, #0]
}
   2486a:	b004      	add	sp, #16
   2486c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24870:	00032b44 	.word	0x00032b44

00024874 <get_addresses>:
{
   24874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   24878:	b083      	sub	sp, #12
   2487a:	460d      	mov	r5, r1
   2487c:	4616      	mov	r6, r2
   2487e:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   24880:	8903      	ldrh	r3, [r0, #8]
   24882:	2b0a      	cmp	r3, #10
   24884:	d008      	beq.n	24898 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   24886:	b393      	cbz	r3, 248ee <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   24888:	4a1c      	ldr	r2, [pc, #112]	; (248fc <get_addresses+0x88>)
   2488a:	4631      	mov	r1, r6
   2488c:	4628      	mov	r0, r5
   2488e:	f7de fbcb 	bl	3028 <snprintk>
}
   24892:	b003      	add	sp, #12
   24894:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   24898:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   2489a:	f8df 9068 	ldr.w	r9, [pc, #104]	; 24904 <get_addresses+0x90>
   2489e:	2328      	movs	r3, #40	; 0x28
   248a0:	464a      	mov	r2, r9
   248a2:	68c1      	ldr	r1, [r0, #12]
   248a4:	200a      	movs	r0, #10
   248a6:	f7f9 fc1d 	bl	1e0e4 <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   248aa:	8962      	ldrh	r2, [r4, #10]
   248ac:	0213      	lsls	r3, r2, #8
   248ae:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   248b2:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   248b4:	f8df 8050 	ldr.w	r8, [pc, #80]	; 24908 <get_addresses+0x94>
   248b8:	9300      	str	r3, [sp, #0]
   248ba:	4603      	mov	r3, r0
   248bc:	4642      	mov	r2, r8
   248be:	4631      	mov	r1, r6
   248c0:	4628      	mov	r0, r5
   248c2:	f7de fbb1 	bl	3028 <snprintk>
   248c6:	2328      	movs	r3, #40	; 0x28
   248c8:	464a      	mov	r2, r9
   248ca:	f104 0118 	add.w	r1, r4, #24
   248ce:	200a      	movs	r0, #10
   248d0:	f7f9 fc08 	bl	1e0e4 <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   248d4:	8ae2      	ldrh	r2, [r4, #22]
   248d6:	0213      	lsls	r3, r2, #8
   248d8:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   248dc:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   248de:	9300      	str	r3, [sp, #0]
   248e0:	4603      	mov	r3, r0
   248e2:	4642      	mov	r2, r8
   248e4:	990a      	ldr	r1, [sp, #40]	; 0x28
   248e6:	4638      	mov	r0, r7
   248e8:	f7de fb9e 	bl	3028 <snprintk>
   248ec:	e7d1      	b.n	24892 <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   248ee:	4a04      	ldr	r2, [pc, #16]	; (24900 <get_addresses+0x8c>)
   248f0:	4631      	mov	r1, r6
   248f2:	4628      	mov	r0, r5
   248f4:	f7de fb98 	bl	3028 <snprintk>
   248f8:	e7cb      	b.n	24892 <get_addresses+0x1e>
   248fa:	bf00      	nop
   248fc:	00031f14 	.word	0x00031f14
   24900:	00031f08 	.word	0x00031f08
   24904:	20002530 	.word	0x20002530
   24908:	00031f00 	.word	0x00031f00

0002490c <print_connect_info>:
{
   2490c:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   2490e:	2802      	cmp	r0, #2
   24910:	d008      	beq.n	24924 <print_connect_info+0x18>
   24912:	460d      	mov	r5, r1
   24914:	4614      	mov	r4, r2
   24916:	280a      	cmp	r0, #10
   24918:	d008      	beq.n	2492c <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   2491a:	4601      	mov	r1, r0
   2491c:	4813      	ldr	r0, [pc, #76]	; (2496c <print_connect_info+0x60>)
   2491e:	f7de fb75 	bl	300c <printk>
   24922:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   24924:	4812      	ldr	r0, [pc, #72]	; (24970 <print_connect_info+0x64>)
   24926:	f7de fb71 	bl	300c <printk>
		break;
   2492a:	bd70      	pop	{r4, r5, r6, pc}
   2492c:	4e11      	ldr	r6, [pc, #68]	; (24974 <print_connect_info+0x68>)
   2492e:	2328      	movs	r3, #40	; 0x28
   24930:	4632      	mov	r2, r6
   24932:	3104      	adds	r1, #4
   24934:	200a      	movs	r0, #10
   24936:	f7f9 fbd5 	bl	1e0e4 <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   2493a:	886b      	ldrh	r3, [r5, #2]
   2493c:	021a      	lsls	r2, r3, #8
   2493e:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   24942:	b292      	uxth	r2, r2
   24944:	4601      	mov	r1, r0
   24946:	480c      	ldr	r0, [pc, #48]	; (24978 <print_connect_info+0x6c>)
   24948:	f7de fb60 	bl	300c <printk>
   2494c:	2328      	movs	r3, #40	; 0x28
   2494e:	4632      	mov	r2, r6
   24950:	1d21      	adds	r1, r4, #4
   24952:	200a      	movs	r0, #10
   24954:	f7f9 fbc6 	bl	1e0e4 <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   24958:	8863      	ldrh	r3, [r4, #2]
   2495a:	021a      	lsls	r2, r3, #8
   2495c:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   24960:	b292      	uxth	r2, r2
   24962:	4601      	mov	r1, r0
   24964:	4805      	ldr	r0, [pc, #20]	; (2497c <print_connect_info+0x70>)
   24966:	f7de fb51 	bl	300c <printk>
		break;
   2496a:	bd70      	pop	{r4, r5, r6, pc}
   2496c:	00032adc 	.word	0x00032adc
   24970:	00032aa0 	.word	0x00032aa0
   24974:	20002530 	.word	0x20002530
   24978:	00032ab4 	.word	0x00032ab4
   2497c:	00032ad0 	.word	0x00032ad0

00024980 <context_cb>:
{
   24980:	b5f0      	push	{r4, r5, r6, r7, lr}
   24982:	b09f      	sub	sp, #124	; 0x7c
   24984:	4604      	mov	r4, r0
   24986:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   24988:	2100      	movs	r1, #0
   2498a:	9106      	str	r1, [sp, #24]
   2498c:	222b      	movs	r2, #43	; 0x2b
   2498e:	a807      	add	r0, sp, #28
   24990:	f005 ffee 	bl	2a970 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   24994:	222f      	movs	r2, #47	; 0x2f
   24996:	9200      	str	r2, [sp, #0]
   24998:	ab06      	add	r3, sp, #24
   2499a:	a912      	add	r1, sp, #72	; 0x48
   2499c:	4620      	mov	r0, r4
   2499e:	f7ff ff69 	bl	24874 <get_addresses>
	       (*count) + 1, context,
   249a2:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   249a4:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   249a6:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   249aa:	f7f7 fd0b 	bl	1c3c4 <net_if_get_by_index>
   249ae:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   249b0:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   249b4:	f012 0f10 	tst.w	r2, #16
   249b8:	d022      	beq.n	24a00 <context_cb+0x80>
		return AF_INET6;
   249ba:	210a      	movs	r1, #10
   249bc:	290a      	cmp	r1, #10
   249be:	d021      	beq.n	24a04 <context_cb+0x84>
   249c0:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   249c2:	f012 0f20 	tst.w	r2, #32
   249c6:	d01f      	beq.n	24a08 <context_cb+0x88>
		return SOCK_STREAM;
   249c8:	2001      	movs	r0, #1
   249ca:	2802      	cmp	r0, #2
   249cc:	d01e      	beq.n	24a0c <context_cb+0x8c>
   249ce:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   249d0:	f012 0f40 	tst.w	r2, #64	; 0x40
   249d4:	d01c      	beq.n	24a10 <context_cb+0x90>
		return IPPROTO_TCP;
   249d6:	2206      	movs	r2, #6
   249d8:	2a11      	cmp	r2, #17
   249da:	d01b      	beq.n	24a14 <context_cb+0x94>
   249dc:	2754      	movs	r7, #84	; 0x54
   249de:	aa06      	add	r2, sp, #24
   249e0:	9204      	str	r2, [sp, #16]
   249e2:	aa12      	add	r2, sp, #72	; 0x48
   249e4:	9203      	str	r2, [sp, #12]
   249e6:	9702      	str	r7, [sp, #8]
   249e8:	9001      	str	r0, [sp, #4]
   249ea:	9100      	str	r1, [sp, #0]
   249ec:	4622      	mov	r2, r4
   249ee:	4631      	mov	r1, r6
   249f0:	4809      	ldr	r0, [pc, #36]	; (24a18 <context_cb+0x98>)
   249f2:	f7de fb0b 	bl	300c <printk>
	(*count)++;
   249f6:	682b      	ldr	r3, [r5, #0]
   249f8:	3301      	adds	r3, #1
   249fa:	602b      	str	r3, [r5, #0]
}
   249fc:	b01f      	add	sp, #124	; 0x7c
   249fe:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   24a00:	2102      	movs	r1, #2
   24a02:	e7db      	b.n	249bc <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   24a04:	2136      	movs	r1, #54	; 0x36
   24a06:	e7dc      	b.n	249c2 <context_cb+0x42>
	return SOCK_DGRAM;
   24a08:	2002      	movs	r0, #2
   24a0a:	e7de      	b.n	249ca <context_cb+0x4a>
   24a0c:	2044      	movs	r0, #68	; 0x44
   24a0e:	e7df      	b.n	249d0 <context_cb+0x50>
	return IPPROTO_UDP;
   24a10:	2211      	movs	r2, #17
   24a12:	e7e1      	b.n	249d8 <context_cb+0x58>
   24a14:	2755      	movs	r7, #85	; 0x55
   24a16:	e7e2      	b.n	249de <context_cb+0x5e>
   24a18:	00031ec0 	.word	0x00031ec0

00024a1c <net_shell_cmd_iface>:
{
   24a1c:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   24a1e:	2100      	movs	r1, #0
   24a20:	4802      	ldr	r0, [pc, #8]	; (24a2c <net_shell_cmd_iface+0x10>)
   24a22:	f7f7 fceb 	bl	1c3fc <net_if_foreach>
}
   24a26:	2000      	movs	r0, #0
   24a28:	bd08      	pop	{r3, pc}
   24a2a:	bf00      	nop
   24a2c:	0001f5cd 	.word	0x0001f5cd

00024a30 <net_shell_cmd_route>:
{
   24a30:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   24a32:	2100      	movs	r1, #0
   24a34:	4802      	ldr	r0, [pc, #8]	; (24a40 <net_shell_cmd_route+0x10>)
   24a36:	f7f7 fce1 	bl	1c3fc <net_if_foreach>
}
   24a3a:	2000      	movs	r0, #0
   24a3c:	bd08      	pop	{r3, pc}
   24a3e:	bf00      	nop
   24a40:	00024e6d 	.word	0x00024e6d

00024a44 <net_shell_cmd_mem>:
{
   24a44:	b500      	push	{lr}
   24a46:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   24a48:	ab0e      	add	r3, sp, #56	; 0x38
   24a4a:	aa0f      	add	r2, sp, #60	; 0x3c
   24a4c:	a910      	add	r1, sp, #64	; 0x40
   24a4e:	a811      	add	r0, sp, #68	; 0x44
   24a50:	f7f9 f9aa 	bl	1dda8 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   24a54:	f44f 7100 	mov.w	r1, #512	; 0x200
   24a58:	4819      	ldr	r0, [pc, #100]	; (24ac0 <net_shell_cmd_mem+0x7c>)
   24a5a:	f7de fad7 	bl	300c <printk>
	printk("Network buffer pools:\n");
   24a5e:	4819      	ldr	r0, [pc, #100]	; (24ac4 <net_shell_cmd_mem+0x80>)
   24a60:	f7de fad4 	bl	300c <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   24a64:	4818      	ldr	r0, [pc, #96]	; (24ac8 <net_shell_cmd_mem+0x84>)
   24a66:	f7de fad1 	bl	300c <printk>
	printk("Address\t\tTotal\tName\n");
   24a6a:	4818      	ldr	r0, [pc, #96]	; (24acc <net_shell_cmd_mem+0x88>)
   24a6c:	f7de face 	bl	300c <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   24a70:	9911      	ldr	r1, [sp, #68]	; 0x44
   24a72:	688a      	ldr	r2, [r1, #8]
   24a74:	4816      	ldr	r0, [pc, #88]	; (24ad0 <net_shell_cmd_mem+0x8c>)
   24a76:	f7de fac9 	bl	300c <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   24a7a:	9910      	ldr	r1, [sp, #64]	; 0x40
   24a7c:	688a      	ldr	r2, [r1, #8]
   24a7e:	4815      	ldr	r0, [pc, #84]	; (24ad4 <net_shell_cmd_mem+0x90>)
   24a80:	f7de fac4 	bl	300c <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   24a84:	990f      	ldr	r1, [sp, #60]	; 0x3c
   24a86:	8a0a      	ldrh	r2, [r1, #16]
   24a88:	4813      	ldr	r0, [pc, #76]	; (24ad8 <net_shell_cmd_mem+0x94>)
   24a8a:	f7de fabf 	bl	300c <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   24a8e:	990e      	ldr	r1, [sp, #56]	; 0x38
   24a90:	8a0a      	ldrh	r2, [r1, #16]
   24a92:	4812      	ldr	r0, [pc, #72]	; (24adc <net_shell_cmd_mem+0x98>)
   24a94:	f7de faba 	bl	300c <printk>
		memset(&info, 0, sizeof(info));
   24a98:	2238      	movs	r2, #56	; 0x38
   24a9a:	2100      	movs	r1, #0
   24a9c:	4668      	mov	r0, sp
   24a9e:	f005 ff67 	bl	2a970 <memset>
		net_context_foreach(context_info, &info);
   24aa2:	4669      	mov	r1, sp
   24aa4:	480e      	ldr	r0, [pc, #56]	; (24ae0 <net_shell_cmd_mem+0x9c>)
   24aa6:	f7f8 fd8d 	bl	1d5c4 <net_context_foreach>
		if (!info.are_external_pools) {
   24aaa:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24aae:	b11b      	cbz	r3, 24ab8 <net_shell_cmd_mem+0x74>
}
   24ab0:	2000      	movs	r0, #0
   24ab2:	b013      	add	sp, #76	; 0x4c
   24ab4:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   24ab8:	480a      	ldr	r0, [pc, #40]	; (24ae4 <net_shell_cmd_mem+0xa0>)
   24aba:	f7de faa7 	bl	300c <printk>
   24abe:	e7f7      	b.n	24ab0 <net_shell_cmd_mem+0x6c>
   24ac0:	0003245c 	.word	0x0003245c
   24ac4:	00032478 	.word	0x00032478
   24ac8:	00032490 	.word	0x00032490
   24acc:	000324bc 	.word	0x000324bc
   24ad0:	000324d4 	.word	0x000324d4
   24ad4:	000324e0 	.word	0x000324e0
   24ad8:	000324ec 	.word	0x000324ec
   24adc:	000324fc 	.word	0x000324fc
   24ae0:	000244b1 	.word	0x000244b1
   24ae4:	0003250c 	.word	0x0003250c

00024ae8 <net_shell_cmd_nbr>:
{
   24ae8:	b510      	push	{r4, lr}
   24aea:	b086      	sub	sp, #24
	int count = 0;
   24aec:	2300      	movs	r3, #0
   24aee:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   24af0:	6848      	ldr	r0, [r1, #4]
   24af2:	b1d8      	cbz	r0, 24b2c <net_shell_cmd_nbr+0x44>
   24af4:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   24af6:	4920      	ldr	r1, [pc, #128]	; (24b78 <net_shell_cmd_nbr+0x90>)
   24af8:	f7db fc86 	bl	408 <strcmp>
   24afc:	b9f8      	cbnz	r0, 24b3e <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   24afe:	68a1      	ldr	r1, [r4, #8]
   24b00:	b311      	cbz	r1, 24b48 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   24b02:	aa01      	add	r2, sp, #4
   24b04:	200a      	movs	r0, #10
   24b06:	f7f9 fbc4 	bl	1e292 <net_addr_pton>
		if (ret < 0) {
   24b0a:	2800      	cmp	r0, #0
   24b0c:	db20      	blt.n	24b50 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   24b0e:	a901      	add	r1, sp, #4
   24b10:	2000      	movs	r0, #0
   24b12:	f7fb f83f 	bl	1fb94 <net_ipv6_nbr_rm>
   24b16:	bb00      	cbnz	r0, 24b5a <net_shell_cmd_nbr+0x72>
   24b18:	2328      	movs	r3, #40	; 0x28
   24b1a:	4a18      	ldr	r2, [pc, #96]	; (24b7c <net_shell_cmd_nbr+0x94>)
   24b1c:	a901      	add	r1, sp, #4
   24b1e:	200a      	movs	r0, #10
   24b20:	f7f9 fae0 	bl	1e0e4 <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   24b24:	4601      	mov	r1, r0
   24b26:	4816      	ldr	r0, [pc, #88]	; (24b80 <net_shell_cmd_nbr+0x98>)
   24b28:	f7de fa70 	bl	300c <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   24b2c:	a905      	add	r1, sp, #20
   24b2e:	4815      	ldr	r0, [pc, #84]	; (24b84 <net_shell_cmd_nbr+0x9c>)
   24b30:	f7fb f822 	bl	1fb78 <net_ipv6_nbr_foreach>
	if (count == 0) {
   24b34:	9b05      	ldr	r3, [sp, #20]
   24b36:	b1db      	cbz	r3, 24b70 <net_shell_cmd_nbr+0x88>
}
   24b38:	2000      	movs	r0, #0
   24b3a:	b006      	add	sp, #24
   24b3c:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   24b3e:	6861      	ldr	r1, [r4, #4]
   24b40:	4811      	ldr	r0, [pc, #68]	; (24b88 <net_shell_cmd_nbr+0xa0>)
   24b42:	f7de fa63 	bl	300c <printk>
			return 0;
   24b46:	e7f7      	b.n	24b38 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24b48:	4810      	ldr	r0, [pc, #64]	; (24b8c <net_shell_cmd_nbr+0xa4>)
   24b4a:	f7de fa5f 	bl	300c <printk>
			return 0;
   24b4e:	e7f3      	b.n	24b38 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24b50:	68a1      	ldr	r1, [r4, #8]
   24b52:	480f      	ldr	r0, [pc, #60]	; (24b90 <net_shell_cmd_nbr+0xa8>)
   24b54:	f7de fa5a 	bl	300c <printk>
			return 0;
   24b58:	e7ee      	b.n	24b38 <net_shell_cmd_nbr+0x50>
   24b5a:	2328      	movs	r3, #40	; 0x28
   24b5c:	4a07      	ldr	r2, [pc, #28]	; (24b7c <net_shell_cmd_nbr+0x94>)
   24b5e:	a901      	add	r1, sp, #4
   24b60:	200a      	movs	r0, #10
   24b62:	f7f9 fabf 	bl	1e0e4 <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   24b66:	4601      	mov	r1, r0
   24b68:	480a      	ldr	r0, [pc, #40]	; (24b94 <net_shell_cmd_nbr+0xac>)
   24b6a:	f7de fa4f 	bl	300c <printk>
   24b6e:	e7dd      	b.n	24b2c <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24b70:	4809      	ldr	r0, [pc, #36]	; (24b98 <net_shell_cmd_nbr+0xb0>)
   24b72:	f7de fa4b 	bl	300c <printk>
   24b76:	e7df      	b.n	24b38 <net_shell_cmd_nbr+0x50>
   24b78:	00032530 	.word	0x00032530
   24b7c:	20002530 	.word	0x20002530
   24b80:	00032580 	.word	0x00032580
   24b84:	00024c41 	.word	0x00024c41
   24b88:	00032534 	.word	0x00032534
   24b8c:	0003254c 	.word	0x0003254c
   24b90:	0003256c 	.word	0x0003256c
   24b94:	0003259c 	.word	0x0003259c
   24b98:	000325b4 	.word	0x000325b4

00024b9c <route_cb>:
{
   24b9c:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   24b9e:	68c3      	ldr	r3, [r0, #12]
   24ba0:	428b      	cmp	r3, r1
   24ba2:	d000      	beq.n	24ba6 <route_cb+0xa>
   24ba4:	bd38      	pop	{r3, r4, r5, pc}
   24ba6:	4604      	mov	r4, r0
   24ba8:	2328      	movs	r3, #40	; 0x28
   24baa:	4a1e      	ldr	r2, [pc, #120]	; (24c24 <route_cb+0x88>)
   24bac:	f100 0110 	add.w	r1, r0, #16
   24bb0:	200a      	movs	r0, #10
   24bb2:	f7f9 fa97 	bl	1e0e4 <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   24bb6:	f894 2020 	ldrb.w	r2, [r4, #32]
   24bba:	4601      	mov	r1, r0
   24bbc:	481a      	ldr	r0, [pc, #104]	; (24c28 <route_cb+0x8c>)
   24bbe:	f7de fa25 	bl	300c <printk>
	return list->head;
   24bc2:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24bc4:	2500      	movs	r5, #0
   24bc6:	e009      	b.n	24bdc <route_cb+0x40>
			printk("addr : <unknown>\n");
   24bc8:	4818      	ldr	r0, [pc, #96]	; (24c2c <route_cb+0x90>)
   24bca:	f7de fa1f 	bl	300c <printk>
		count++;
   24bce:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24bd0:	4622      	mov	r2, r4
   24bd2:	b1dc      	cbz	r4, 24c0c <route_cb+0x70>
	return node->next;
   24bd4:	6823      	ldr	r3, [r4, #0]
   24bd6:	b1db      	cbz	r3, 24c10 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24bd8:	b1e2      	cbz	r2, 24c14 <route_cb+0x78>
	return node->next;
   24bda:	6824      	ldr	r4, [r4, #0]
   24bdc:	b1e4      	cbz	r4, 24c18 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   24bde:	6861      	ldr	r1, [r4, #4]
   24be0:	2900      	cmp	r1, #0
   24be2:	d0f5      	beq.n	24bd0 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   24be4:	4812      	ldr	r0, [pc, #72]	; (24c30 <route_cb+0x94>)
   24be6:	f7de fa11 	bl	300c <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   24bea:	6863      	ldr	r3, [r4, #4]
   24bec:	7858      	ldrb	r0, [r3, #1]
   24bee:	28ff      	cmp	r0, #255	; 0xff
   24bf0:	d0ea      	beq.n	24bc8 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   24bf2:	f7fa fcc1 	bl	1f578 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   24bf6:	2318      	movs	r3, #24
   24bf8:	4a0e      	ldr	r2, [pc, #56]	; (24c34 <route_cb+0x98>)
   24bfa:	7841      	ldrb	r1, [r0, #1]
   24bfc:	3002      	adds	r0, #2
   24bfe:	f7f9 fa47 	bl	1e090 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   24c02:	4601      	mov	r1, r0
   24c04:	480c      	ldr	r0, [pc, #48]	; (24c38 <route_cb+0x9c>)
   24c06:	f7de fa01 	bl	300c <printk>
   24c0a:	e7e0      	b.n	24bce <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   24c0c:	4623      	mov	r3, r4
   24c0e:	e7e2      	b.n	24bd6 <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   24c10:	2400      	movs	r4, #0
   24c12:	e7e3      	b.n	24bdc <route_cb+0x40>
   24c14:	2400      	movs	r4, #0
   24c16:	e7e1      	b.n	24bdc <route_cb+0x40>
	if (count == 0) {
   24c18:	2d00      	cmp	r5, #0
   24c1a:	d1c3      	bne.n	24ba4 <route_cb+0x8>
		printk("\t<none>\n");
   24c1c:	4807      	ldr	r0, [pc, #28]	; (24c3c <route_cb+0xa0>)
   24c1e:	f7de f9f5 	bl	300c <printk>
   24c22:	e7bf      	b.n	24ba4 <route_cb+0x8>
   24c24:	20002530 	.word	0x20002530
   24c28:	00032afc 	.word	0x00032afc
   24c2c:	00032b24 	.word	0x00032b24
   24c30:	00032b14 	.word	0x00032b14
   24c34:	20002518 	.word	0x20002518
   24c38:	00032b38 	.word	0x00032b38
   24c3c:	00032040 	.word	0x00032040

00024c40 <nbr_cb>:
{
   24c40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24c44:	b08f      	sub	sp, #60	; 0x3c
   24c46:	4604      	mov	r4, r0
   24c48:	460d      	mov	r5, r1
	if (*count == 0) {
   24c4a:	680b      	ldr	r3, [r1, #0]
   24c4c:	2b00      	cmp	r3, #0
   24c4e:	d052      	beq.n	24cf6 <nbr_cb+0xb6>
	(*count)++;
   24c50:	682b      	ldr	r3, [r5, #0]
   24c52:	3301      	adds	r3, #1
   24c54:	602b      	str	r3, [r5, #0]
   24c56:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24c58:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24c5c:	f7fa ff68 	bl	1fb30 <net_ipv6_nbr_state2str>
   24c60:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   24c62:	f7db fd4d 	bl	700 <strlen>
   24c66:	2805      	cmp	r0, #5
   24c68:	d04a      	beq.n	24d00 <nbr_cb+0xc0>
	char *state_pad = "";
   24c6a:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 24d14 <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c6e:	682b      	ldr	r3, [r5, #0]
   24c70:	930c      	str	r3, [sp, #48]	; 0x30
   24c72:	68a3      	ldr	r3, [r4, #8]
   24c74:	930d      	str	r3, [sp, #52]	; 0x34
   24c76:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24c78:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24c7c:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24c7e:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   24c82:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   24c86:	3020      	adds	r0, #32
   24c88:	f005 f90a 	bl	29ea0 <_timeout_remaining_get>
   24c8c:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24c8e:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24c90:	28ff      	cmp	r0, #255	; 0xff
   24c92:	d038      	beq.n	24d06 <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   24c94:	f7fa fc70 	bl	1f578 <net_nbr_get_lladdr>
   24c98:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24c9c:	7860      	ldrb	r0, [r4, #1]
   24c9e:	f7fa fc6b 	bl	1f578 <net_nbr_get_lladdr>
   24ca2:	2318      	movs	r3, #24
   24ca4:	4a19      	ldr	r2, [pc, #100]	; (24d0c <nbr_cb+0xcc>)
   24ca6:	7841      	ldrb	r1, [r0, #1]
   24ca8:	4658      	mov	r0, fp
   24caa:	f7f9 f9f1 	bl	1e090 <net_sprint_ll_addr_buf>
   24cae:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24cb0:	7860      	ldrb	r0, [r4, #1]
   24cb2:	f7fa fc61 	bl	1f578 <net_nbr_get_lladdr>
   24cb6:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   24cb8:	2328      	movs	r3, #40	; 0x28
   24cba:	4a15      	ldr	r2, [pc, #84]	; (24d10 <nbr_cb+0xd0>)
   24cbc:	3104      	adds	r1, #4
   24cbe:	200a      	movs	r0, #10
   24cc0:	f7f9 fa10 	bl	1e0e4 <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24cc4:	9009      	str	r0, [sp, #36]	; 0x24
   24cc6:	4b13      	ldr	r3, [pc, #76]	; (24d14 <nbr_cb+0xd4>)
   24cc8:	9308      	str	r3, [sp, #32]
   24cca:	f8cd b01c 	str.w	fp, [sp, #28]
   24cce:	f8cd a018 	str.w	sl, [sp, #24]
   24cd2:	f8cd 9014 	str.w	r9, [sp, #20]
   24cd6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   24cd8:	9304      	str	r3, [sp, #16]
   24cda:	f8cd 800c 	str.w	r8, [sp, #12]
   24cde:	9702      	str	r7, [sp, #8]
   24ce0:	9601      	str	r6, [sp, #4]
   24ce2:	9500      	str	r5, [sp, #0]
   24ce4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24ce6:	4622      	mov	r2, r4
   24ce8:	990c      	ldr	r1, [sp, #48]	; 0x30
   24cea:	480b      	ldr	r0, [pc, #44]	; (24d18 <nbr_cb+0xd8>)
   24cec:	f7de f98e 	bl	300c <printk>
}
   24cf0:	b00f      	add	sp, #60	; 0x3c
   24cf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   24cf6:	4907      	ldr	r1, [pc, #28]	; (24d14 <nbr_cb+0xd4>)
   24cf8:	4808      	ldr	r0, [pc, #32]	; (24d1c <nbr_cb+0xdc>)
   24cfa:	f7de f987 	bl	300c <printk>
   24cfe:	e7a7      	b.n	24c50 <nbr_cb+0x10>
		state_pad = "    ";
   24d00:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24d20 <nbr_cb+0xe0>
   24d04:	e7b3      	b.n	24c6e <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24d06:	f8df b01c 	ldr.w	fp, [pc, #28]	; 24d24 <nbr_cb+0xe4>
   24d0a:	e7d1      	b.n	24cb0 <nbr_cb+0x70>
   24d0c:	20002518 	.word	0x20002518
   24d10:	20002530 	.word	0x20002530
   24d14:	0002f2c4 	.word	0x0002f2c4
   24d18:	000321ec 	.word	0x000321ec
   24d1c:	00032194 	.word	0x00032194
   24d20:	0002eb5c 	.word	0x0002eb5c
   24d24:	00032190 	.word	0x00032190

00024d28 <_ping_ipv6>:
{
   24d28:	b570      	push	{r4, r5, r6, lr}
   24d2a:	b084      	sub	sp, #16
   24d2c:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24d2e:	f7f6 fbb1 	bl	1b494 <net_if_get_default>
   24d32:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   24d34:	466a      	mov	r2, sp
   24d36:	4629      	mov	r1, r5
   24d38:	200a      	movs	r0, #10
   24d3a:	f7f9 faaa 	bl	1e292 <net_addr_pton>
   24d3e:	2800      	cmp	r0, #0
   24d40:	db26      	blt.n	24d90 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   24d42:	4815      	ldr	r0, [pc, #84]	; (24d98 <_ping_ipv6+0x70>)
   24d44:	f7f9 fe0c 	bl	1e960 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24d48:	4669      	mov	r1, sp
   24d4a:	2000      	movs	r0, #0
   24d4c:	f7fb fa4c 	bl	201e8 <net_ipv6_nbr_lookup>
	if (nbr) {
   24d50:	b100      	cbz	r0, 24d54 <_ping_ipv6+0x2c>
		iface = nbr->iface;
   24d52:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   24d54:	4669      	mov	r1, sp
   24d56:	2000      	movs	r0, #0
   24d58:	f7fd ffc4 	bl	22ce4 <net_route_lookup>
	if (route) {
   24d5c:	b100      	cbz	r0, 24d60 <_ping_ipv6+0x38>
		iface = route->iface;
   24d5e:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24d60:	f7dd f9ba 	bl	20d8 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24d64:	b286      	uxth	r6, r0
					   sys_rand32_get());
   24d66:	f7dd f9b7 	bl	20d8 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24d6a:	b283      	uxth	r3, r0
   24d6c:	4632      	mov	r2, r6
   24d6e:	4669      	mov	r1, sp
   24d70:	4620      	mov	r0, r4
   24d72:	f7fa fa8f 	bl	1f294 <net_icmpv6_send_echo_request>
	if (ret) {
   24d76:	4604      	mov	r4, r0
   24d78:	b930      	cbnz	r0, 24d88 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24d7a:	4629      	mov	r1, r5
   24d7c:	4807      	ldr	r0, [pc, #28]	; (24d9c <_ping_ipv6+0x74>)
   24d7e:	f7de f945 	bl	300c <printk>
}
   24d82:	4620      	mov	r0, r4
   24d84:	b004      	add	sp, #16
   24d86:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24d88:	4803      	ldr	r0, [pc, #12]	; (24d98 <_ping_ipv6+0x70>)
   24d8a:	f7f9 fdf5 	bl	1e978 <net_icmpv6_unregister_handler>
   24d8e:	e7f8      	b.n	24d82 <_ping_ipv6+0x5a>
		return -EINVAL;
   24d90:	f06f 0415 	mvn.w	r4, #21
   24d94:	e7f5      	b.n	24d82 <_ping_ipv6+0x5a>
   24d96:	bf00      	nop
   24d98:	2000c604 	.word	0x2000c604
   24d9c:	00031eac 	.word	0x00031eac

00024da0 <net_shell_cmd_ping>:
{
   24da0:	b510      	push	{r4, lr}
   24da2:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   24da4:	4912      	ldr	r1, [pc, #72]	; (24df0 <net_shell_cmd_ping+0x50>)
   24da6:	6820      	ldr	r0, [r4, #0]
   24da8:	f7db fb2e 	bl	408 <strcmp>
   24dac:	b958      	cbnz	r0, 24dc6 <net_shell_cmd_ping+0x26>
		host = argv[1];
   24dae:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24db0:	f7ff ffba 	bl	24d28 <_ping_ipv6>
	if (!ret) {
   24db4:	b168      	cbz	r0, 24dd2 <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   24db6:	f110 0f05 	cmn.w	r0, #5
   24dba:	d006      	beq.n	24dca <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   24dbc:	480d      	ldr	r0, [pc, #52]	; (24df4 <net_shell_cmd_ping+0x54>)
   24dbe:	f7de f925 	bl	300c <printk>
}
   24dc2:	2000      	movs	r0, #0
   24dc4:	bd10      	pop	{r4, pc}
		host = argv[2];
   24dc6:	68a0      	ldr	r0, [r4, #8]
   24dc8:	e7f2      	b.n	24db0 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   24dca:	480b      	ldr	r0, [pc, #44]	; (24df8 <net_shell_cmd_ping+0x58>)
   24dcc:	f7de f91e 	bl	300c <printk>
		return 0;
   24dd0:	e7f7      	b.n	24dc2 <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   24dd2:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24dd6:	4809      	ldr	r0, [pc, #36]	; (24dfc <net_shell_cmd_ping+0x5c>)
   24dd8:	f004 fb2a 	bl	29430 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   24ddc:	f110 0f0b 	cmn.w	r0, #11
   24de0:	d1ef      	bne.n	24dc2 <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   24de2:	4807      	ldr	r0, [pc, #28]	; (24e00 <net_shell_cmd_ping+0x60>)
   24de4:	f7de f912 	bl	300c <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   24de8:	4806      	ldr	r0, [pc, #24]	; (24e04 <net_shell_cmd_ping+0x64>)
   24dea:	f7f9 fdc5 	bl	1e978 <net_icmpv6_unregister_handler>
   24dee:	e7e8      	b.n	24dc2 <net_shell_cmd_ping+0x22>
   24df0:	000325c4 	.word	0x000325c4
   24df4:	000325e4 	.word	0x000325e4
   24df8:	000325cc 	.word	0x000325cc
   24dfc:	2000d150 	.word	0x2000d150
   24e00:	000325f8 	.word	0x000325f8
   24e04:	2000c604 	.word	0x2000c604

00024e08 <_handle_ipv6_echo_reply>:
{
   24e08:	b530      	push	{r4, r5, lr}
   24e0a:	b08b      	sub	sp, #44	; 0x2c
   24e0c:	4605      	mov	r5, r0
	return pkt->frags->data;
   24e0e:	6883      	ldr	r3, [r0, #8]
   24e10:	6899      	ldr	r1, [r3, #8]
   24e12:	4c11      	ldr	r4, [pc, #68]	; (24e58 <_handle_ipv6_echo_reply+0x50>)
   24e14:	2328      	movs	r3, #40	; 0x28
   24e16:	4622      	mov	r2, r4
   24e18:	3118      	adds	r1, #24
   24e1a:	200a      	movs	r0, #10
   24e1c:	f7f9 f962 	bl	1e0e4 <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24e20:	4603      	mov	r3, r0
   24e22:	4a0e      	ldr	r2, [pc, #56]	; (24e5c <_handle_ipv6_echo_reply+0x54>)
   24e24:	2128      	movs	r1, #40	; 0x28
   24e26:	4668      	mov	r0, sp
   24e28:	f7de f8fe 	bl	3028 <snprintk>
   24e2c:	68ab      	ldr	r3, [r5, #8]
   24e2e:	6899      	ldr	r1, [r3, #8]
   24e30:	2328      	movs	r3, #40	; 0x28
   24e32:	4622      	mov	r2, r4
   24e34:	3108      	adds	r1, #8
   24e36:	200a      	movs	r0, #10
   24e38:	f7f9 f954 	bl	1e0e4 <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24e3c:	466a      	mov	r2, sp
   24e3e:	4601      	mov	r1, r0
   24e40:	4807      	ldr	r0, [pc, #28]	; (24e60 <_handle_ipv6_echo_reply+0x58>)
   24e42:	f7de f8e3 	bl	300c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   24e46:	4807      	ldr	r0, [pc, #28]	; (24e64 <_handle_ipv6_echo_reply+0x5c>)
   24e48:	f004 fadf 	bl	2940a <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24e4c:	4806      	ldr	r0, [pc, #24]	; (24e68 <_handle_ipv6_echo_reply+0x60>)
   24e4e:	f7f9 fd93 	bl	1e978 <net_icmpv6_unregister_handler>
}
   24e52:	2000      	movs	r0, #0
   24e54:	b00b      	add	sp, #44	; 0x2c
   24e56:	bd30      	pop	{r4, r5, pc}
   24e58:	20002530 	.word	0x20002530
   24e5c:	0002e844 	.word	0x0002e844
   24e60:	00031e88 	.word	0x00031e88
   24e64:	2000d150 	.word	0x2000d150
   24e68:	2000c604 	.word	0x2000c604

00024e6c <iface_per_route_cb>:
{
   24e6c:	b510      	push	{r4, lr}
   24e6e:	b082      	sub	sp, #8
   24e70:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   24e72:	a901      	add	r1, sp, #4
   24e74:	f7ff faba 	bl	243ec <iface2str>
   24e78:	4602      	mov	r2, r0
   24e7a:	4621      	mov	r1, r4
   24e7c:	4806      	ldr	r0, [pc, #24]	; (24e98 <iface_per_route_cb+0x2c>)
   24e7e:	f7de f8c5 	bl	300c <printk>
	printk("=======================================%s\n", extra);
   24e82:	9901      	ldr	r1, [sp, #4]
   24e84:	4805      	ldr	r0, [pc, #20]	; (24e9c <iface_per_route_cb+0x30>)
   24e86:	f7de f8c1 	bl	300c <printk>
	net_route_foreach(route_cb, iface);
   24e8a:	4621      	mov	r1, r4
   24e8c:	4804      	ldr	r0, [pc, #16]	; (24ea0 <iface_per_route_cb+0x34>)
   24e8e:	f7fe f829 	bl	22ee4 <net_route_foreach>
}
   24e92:	b002      	add	sp, #8
   24e94:	bd10      	pop	{r4, pc}
   24e96:	bf00      	nop
   24e98:	00032140 	.word	0x00032140
   24e9c:	00032164 	.word	0x00032164
   24ea0:	00024b9d 	.word	0x00024b9d

00024ea4 <tcp_connected>:
{
   24ea4:	b510      	push	{r4, lr}
	if (status < 0) {
   24ea6:	2900      	cmp	r1, #0
   24ea8:	db03      	blt.n	24eb2 <tcp_connected+0xe>
		printk("TCP connected\n");
   24eaa:	4807      	ldr	r0, [pc, #28]	; (24ec8 <tcp_connected+0x24>)
   24eac:	f7de f8ae 	bl	300c <printk>
   24eb0:	bd10      	pop	{r4, pc}
   24eb2:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   24eb4:	4805      	ldr	r0, [pc, #20]	; (24ecc <tcp_connected+0x28>)
   24eb6:	f7de f8a9 	bl	300c <printk>
		net_context_put(context);
   24eba:	4620      	mov	r0, r4
   24ebc:	f7f8 f834 	bl	1cf28 <net_context_put>
		tcp_ctx = NULL;
   24ec0:	2200      	movs	r2, #0
   24ec2:	4b03      	ldr	r3, [pc, #12]	; (24ed0 <tcp_connected+0x2c>)
   24ec4:	601a      	str	r2, [r3, #0]
   24ec6:	bd10      	pop	{r4, pc}
   24ec8:	00032bd8 	.word	0x00032bd8
   24ecc:	00032bbc 	.word	0x00032bbc
   24ed0:	20002558 	.word	0x20002558

00024ed4 <get_my_ipv6_addr>:
{
   24ed4:	b538      	push	{r3, r4, r5, lr}
   24ed6:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   24ed8:	1d0d      	adds	r5, r1, #4
   24eda:	4629      	mov	r1, r5
   24edc:	f7f7 f81e 	bl	1bf1c <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   24ee0:	2210      	movs	r2, #16
   24ee2:	4601      	mov	r1, r0
   24ee4:	4628      	mov	r0, r5
   24ee6:	f7db f9eb 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   24eea:	2300      	movs	r3, #0
   24eec:	8063      	strh	r3, [r4, #2]
   24eee:	bd38      	pop	{r3, r4, r5, pc}

00024ef0 <tcp_connect>:
{
   24ef0:	b5f0      	push	{r4, r5, r6, r7, lr}
   24ef2:	b08f      	sub	sp, #60	; 0x3c
   24ef4:	4607      	mov	r7, r0
   24ef6:	460c      	mov	r4, r1
   24ef8:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   24efa:	f7f6 facb 	bl	1b494 <net_if_get_default>
   24efe:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   24f00:	aa09      	add	r2, sp, #36	; 0x24
   24f02:	4639      	mov	r1, r7
   24f04:	200a      	movs	r0, #10
   24f06:	f7f9 f9c4 	bl	1e292 <net_addr_pton>
	if (ret < 0) {
   24f0a:	2800      	cmp	r0, #0
   24f0c:	db34      	blt.n	24f78 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   24f0e:	0a21      	lsrs	r1, r4, #8
   24f10:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   24f14:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24f18:	a909      	add	r1, sp, #36	; 0x24
   24f1a:	2000      	movs	r0, #0
   24f1c:	f7fb f964 	bl	201e8 <net_ipv6_nbr_lookup>
	if (nbr) {
   24f20:	b100      	cbz	r0, 24f24 <tcp_connect+0x34>
		iface = nbr->iface;
   24f22:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   24f24:	a902      	add	r1, sp, #8
   24f26:	4630      	mov	r0, r6
   24f28:	f7ff ffd4 	bl	24ed4 <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24f2c:	240a      	movs	r4, #10
   24f2e:	f8ad 4008 	strh.w	r4, [sp, #8]
   24f32:	aa0e      	add	r2, sp, #56	; 0x38
   24f34:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24f38:	a902      	add	r1, sp, #8
   24f3a:	4620      	mov	r0, r4
   24f3c:	f7ff fce6 	bl	2490c <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24f40:	462b      	mov	r3, r5
   24f42:	2206      	movs	r2, #6
   24f44:	2101      	movs	r1, #1
   24f46:	4620      	mov	r0, r4
   24f48:	f7f7 fd82 	bl	1ca50 <net_context_get>
	if (ret < 0) {
   24f4c:	1e04      	subs	r4, r0, #0
   24f4e:	db18      	blt.n	24f82 <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24f50:	2218      	movs	r2, #24
   24f52:	a902      	add	r1, sp, #8
   24f54:	6828      	ldr	r0, [r5, #0]
   24f56:	f7f8 f829 	bl	1cfac <net_context_bind>
	if (ret < 0) {
   24f5a:	1e04      	subs	r4, r0, #0
   24f5c:	db16      	blt.n	24f8c <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24f5e:	6828      	ldr	r0, [r5, #0]
   24f60:	2300      	movs	r3, #0
   24f62:	9301      	str	r3, [sp, #4]
   24f64:	9300      	str	r3, [sp, #0]
   24f66:	4b0c      	ldr	r3, [pc, #48]	; (24f98 <tcp_connect+0xa8>)
   24f68:	2218      	movs	r2, #24
   24f6a:	a908      	add	r1, sp, #32
   24f6c:	f7f8 f9b0 	bl	1d2d0 <net_context_connect>
   24f70:	4604      	mov	r4, r0
}
   24f72:	4620      	mov	r0, r4
   24f74:	b00f      	add	sp, #60	; 0x3c
   24f76:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24f78:	4808      	ldr	r0, [pc, #32]	; (24f9c <tcp_connect+0xac>)
   24f7a:	f7de f847 	bl	300c <printk>
		return 0;
   24f7e:	2400      	movs	r4, #0
   24f80:	e7f7      	b.n	24f72 <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   24f82:	4621      	mov	r1, r4
   24f84:	4806      	ldr	r0, [pc, #24]	; (24fa0 <tcp_connect+0xb0>)
   24f86:	f7de f841 	bl	300c <printk>
		return ret;
   24f8a:	e7f2      	b.n	24f72 <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24f8c:	4621      	mov	r1, r4
   24f8e:	4805      	ldr	r0, [pc, #20]	; (24fa4 <tcp_connect+0xb4>)
   24f90:	f7de f83c 	bl	300c <printk>
		return ret;
   24f94:	e7ed      	b.n	24f72 <tcp_connect+0x82>
   24f96:	bf00      	nop
   24f98:	00024ea5 	.word	0x00024ea5
   24f9c:	00032b6c 	.word	0x00032b6c
   24fa0:	00032b84 	.word	0x00032b84
   24fa4:	00032ba4 	.word	0x00032ba4

00024fa8 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24fa8:	b5f0      	push	{r4, r5, r6, r7, lr}
   24faa:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24fac:	6848      	ldr	r0, [r1, #4]
   24fae:	2800      	cmp	r0, #0
   24fb0:	f000 8099 	beq.w	250e6 <net_shell_cmd_tcp+0x13e>
   24fb4:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   24fb6:	4954      	ldr	r1, [pc, #336]	; (25108 <net_shell_cmd_tcp+0x160>)
   24fb8:	f7db fa26 	bl	408 <strcmp>
   24fbc:	4605      	mov	r5, r0
   24fbe:	bb20      	cbnz	r0, 2500a <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   24fc0:	4b52      	ldr	r3, [pc, #328]	; (2510c <net_shell_cmd_tcp+0x164>)
   24fc2:	681b      	ldr	r3, [r3, #0]
   24fc4:	b123      	cbz	r3, 24fd0 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   24fc6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   24fca:	f013 0f01 	tst.w	r3, #1
   24fce:	d110      	bne.n	24ff2 <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   24fd0:	68a6      	ldr	r6, [r4, #8]
   24fd2:	b196      	cbz	r6, 24ffa <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   24fd4:	68e0      	ldr	r0, [r4, #12]
   24fd6:	b1a0      	cbz	r0, 25002 <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   24fd8:	220a      	movs	r2, #10
   24fda:	2100      	movs	r1, #0
   24fdc:	f006 fa20 	bl	2b420 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   24fe0:	4a4a      	ldr	r2, [pc, #296]	; (2510c <net_shell_cmd_tcp+0x164>)
   24fe2:	b281      	uxth	r1, r0
   24fe4:	4630      	mov	r0, r6
   24fe6:	f7ff ff83 	bl	24ef0 <tcp_connect>
   24fea:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   24fec:	4628      	mov	r0, r5
   24fee:	b003      	add	sp, #12
   24ff0:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   24ff2:	4847      	ldr	r0, [pc, #284]	; (25110 <net_shell_cmd_tcp+0x168>)
   24ff4:	f7de f80a 	bl	300c <printk>
				return 0;
   24ff8:	e7f8      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   24ffa:	4846      	ldr	r0, [pc, #280]	; (25114 <net_shell_cmd_tcp+0x16c>)
   24ffc:	f7de f806 	bl	300c <printk>
				return 0;
   25000:	e7f4      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   25002:	4845      	ldr	r0, [pc, #276]	; (25118 <net_shell_cmd_tcp+0x170>)
   25004:	f7de f802 	bl	300c <printk>
				return 0;
   25008:	e7f0      	b.n	24fec <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   2500a:	4944      	ldr	r1, [pc, #272]	; (2511c <net_shell_cmd_tcp+0x174>)
   2500c:	6860      	ldr	r0, [r4, #4]
   2500e:	f7db f9fb 	bl	408 <strcmp>
   25012:	4605      	mov	r5, r0
   25014:	2800      	cmp	r0, #0
   25016:	d140      	bne.n	2509a <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   25018:	4b3c      	ldr	r3, [pc, #240]	; (2510c <net_shell_cmd_tcp+0x164>)
   2501a:	6818      	ldr	r0, [r3, #0]
   2501c:	b300      	cbz	r0, 25060 <net_shell_cmd_tcp+0xb8>
   2501e:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   25022:	f013 0f01 	tst.w	r3, #1
   25026:	d01b      	beq.n	25060 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   25028:	68a3      	ldr	r3, [r4, #8]
   2502a:	b1eb      	cbz	r3, 25068 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   2502c:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   25030:	f7f8 fbdc 	bl	1d7ec <net_pkt_get_tx>
			if (!pkt) {
   25034:	4606      	mov	r6, r0
   25036:	b1d8      	cbz	r0, 25070 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   25038:	68a0      	ldr	r0, [r4, #8]
   2503a:	f7db fb61 	bl	700 <strlen>
   2503e:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   25040:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   25044:	68a2      	ldr	r2, [r4, #8]
   25046:	4639      	mov	r1, r7
   25048:	4630      	mov	r0, r6
   2504a:	f7f8 fd3a 	bl	1dac2 <net_pkt_append>
			if (!ret) {
   2504e:	4287      	cmp	r7, r0
   25050:	d012      	beq.n	25078 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   25052:	4833      	ldr	r0, [pc, #204]	; (25120 <net_shell_cmd_tcp+0x178>)
   25054:	f7dd ffda 	bl	300c <printk>
				net_pkt_unref(pkt);
   25058:	4630      	mov	r0, r6
   2505a:	f7f8 fbfa 	bl	1d852 <net_pkt_unref>
				return 0;
   2505e:	e7c5      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   25060:	4830      	ldr	r0, [pc, #192]	; (25124 <net_shell_cmd_tcp+0x17c>)
   25062:	f7dd ffd3 	bl	300c <printk>
				return 0;
   25066:	e7c1      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   25068:	482f      	ldr	r0, [pc, #188]	; (25128 <net_shell_cmd_tcp+0x180>)
   2506a:	f7dd ffcf 	bl	300c <printk>
				return 0;
   2506e:	e7bd      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   25070:	482e      	ldr	r0, [pc, #184]	; (2512c <net_shell_cmd_tcp+0x184>)
   25072:	f7dd ffcb 	bl	300c <printk>
				return 0;
   25076:	e7b9      	b.n	24fec <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   25078:	2300      	movs	r3, #0
   2507a:	9300      	str	r3, [sp, #0]
   2507c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   25080:	492b      	ldr	r1, [pc, #172]	; (25130 <net_shell_cmd_tcp+0x188>)
   25082:	4630      	mov	r0, r6
   25084:	f7f8 fa12 	bl	1d4ac <net_context_send>
			if (ret < 0) {
   25088:	1e01      	subs	r1, r0, #0
   2508a:	daaf      	bge.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   2508c:	4829      	ldr	r0, [pc, #164]	; (25134 <net_shell_cmd_tcp+0x18c>)
   2508e:	f7dd ffbd 	bl	300c <printk>
				net_pkt_unref(pkt);
   25092:	4630      	mov	r0, r6
   25094:	f7f8 fbdd 	bl	1d852 <net_pkt_unref>
				return 0;
   25098:	e7a8      	b.n	24fec <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   2509a:	4927      	ldr	r1, [pc, #156]	; (25138 <net_shell_cmd_tcp+0x190>)
   2509c:	6860      	ldr	r0, [r4, #4]
   2509e:	f7db f9b3 	bl	408 <strcmp>
   250a2:	4605      	mov	r5, r0
   250a4:	b9d0      	cbnz	r0, 250dc <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   250a6:	4b19      	ldr	r3, [pc, #100]	; (2510c <net_shell_cmd_tcp+0x164>)
   250a8:	6818      	ldr	r0, [r3, #0]
   250aa:	b120      	cbz	r0, 250b6 <net_shell_cmd_tcp+0x10e>
   250ac:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   250b0:	f013 0f01 	tst.w	r3, #1
   250b4:	d103      	bne.n	250be <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   250b6:	481b      	ldr	r0, [pc, #108]	; (25124 <net_shell_cmd_tcp+0x17c>)
   250b8:	f7dd ffa8 	bl	300c <printk>
				return 0;
   250bc:	e796      	b.n	24fec <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   250be:	f7f7 ff33 	bl	1cf28 <net_context_put>
			if (ret < 0) {
   250c2:	1e01      	subs	r1, r0, #0
   250c4:	db06      	blt.n	250d4 <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   250c6:	481d      	ldr	r0, [pc, #116]	; (2513c <net_shell_cmd_tcp+0x194>)
   250c8:	f7dd ffa0 	bl	300c <printk>
			tcp_ctx = NULL;
   250cc:	2200      	movs	r2, #0
   250ce:	4b0f      	ldr	r3, [pc, #60]	; (2510c <net_shell_cmd_tcp+0x164>)
   250d0:	601a      	str	r2, [r3, #0]
			return 0;
   250d2:	e78b      	b.n	24fec <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   250d4:	481a      	ldr	r0, [pc, #104]	; (25140 <net_shell_cmd_tcp+0x198>)
   250d6:	f7dd ff99 	bl	300c <printk>
				return 0;
   250da:	e787      	b.n	24fec <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   250dc:	6861      	ldr	r1, [r4, #4]
   250de:	4819      	ldr	r0, [pc, #100]	; (25144 <net_shell_cmd_tcp+0x19c>)
   250e0:	f7dd ff94 	bl	300c <printk>
		goto usage;
   250e4:	e002      	b.n	250ec <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   250e6:	4818      	ldr	r0, [pc, #96]	; (25148 <net_shell_cmd_tcp+0x1a0>)
   250e8:	f7dd ff90 	bl	300c <printk>
		printk("Usage:\n");
   250ec:	4817      	ldr	r0, [pc, #92]	; (2514c <net_shell_cmd_tcp+0x1a4>)
   250ee:	f7dd ff8d 	bl	300c <printk>
		printk("\ttcp connect <ipaddr> port\n");
   250f2:	4817      	ldr	r0, [pc, #92]	; (25150 <net_shell_cmd_tcp+0x1a8>)
   250f4:	f7dd ff8a 	bl	300c <printk>
		printk("\ttcp send <data>\n");
   250f8:	4816      	ldr	r0, [pc, #88]	; (25154 <net_shell_cmd_tcp+0x1ac>)
   250fa:	f7dd ff87 	bl	300c <printk>
		printk("\ttcp close\n");
   250fe:	4816      	ldr	r0, [pc, #88]	; (25158 <net_shell_cmd_tcp+0x1b0>)
   25100:	f7dd ff84 	bl	300c <printk>
	return 0;
   25104:	2500      	movs	r5, #0
   25106:	e771      	b.n	24fec <net_shell_cmd_tcp+0x44>
   25108:	0002e9dc 	.word	0x0002e9dc
   2510c:	20002558 	.word	0x20002558
   25110:	0003293c 	.word	0x0003293c
   25114:	00032950 	.word	0x00032950
   25118:	0003296c 	.word	0x0003296c
   2511c:	00032980 	.word	0x00032980
   25120:	000329d0 	.word	0x000329d0
   25124:	00032988 	.word	0x00032988
   25128:	00032998 	.word	0x00032998
   2512c:	000329ac 	.word	0x000329ac
   25130:	00024795 	.word	0x00024795
   25134:	000329f0 	.word	0x000329f0
   25138:	00032a08 	.word	0x00032a08
   2513c:	00032a34 	.word	0x00032a34
   25140:	00032a10 	.word	0x00032a10
   25144:	00032534 	.word	0x00032534
   25148:	00032a48 	.word	0x00032a48
   2514c:	00032a5c 	.word	0x00032a5c
   25150:	00032a64 	.word	0x00032a64
   25154:	00032a80 	.word	0x00032a80
   25158:	00032a94 	.word	0x00032a94

0002515c <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   2515c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   25160:	4605      	mov	r5, r0
   25162:	460e      	mov	r6, r1
   25164:	4617      	mov	r7, r2
   25166:	4699      	mov	r9, r3
   25168:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2516c:	2400      	movs	r4, #0
   2516e:	e012      	b.n	25196 <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25170:	f013 0f02 	tst.w	r3, #2
   25174:	d10e      	bne.n	25194 <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   25176:	2f00      	cmp	r7, #0
   25178:	d051      	beq.n	2521e <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   2517a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2517e:	009a      	lsls	r2, r3, #2
   25180:	4b3c      	ldr	r3, [pc, #240]	; (25274 <find_conn_handler+0x118>)
   25182:	4413      	add	r3, r2
   25184:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25188:	f013 0f04 	tst.w	r3, #4
   2518c:	d002      	beq.n	25194 <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   2518e:	883b      	ldrh	r3, [r7, #0]
   25190:	2b0a      	cmp	r3, #10
   25192:	d030      	beq.n	251f6 <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25194:	3401      	adds	r4, #1
   25196:	2c03      	cmp	r4, #3
   25198:	dc67      	bgt.n	2526a <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   2519a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2519e:	009a      	lsls	r2, r3, #2
   251a0:	4b34      	ldr	r3, [pc, #208]	; (25274 <find_conn_handler+0x118>)
   251a2:	4413      	add	r3, r2
   251a4:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   251a8:	f013 0f01 	tst.w	r3, #1
   251ac:	d0f2      	beq.n	25194 <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   251ae:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251b2:	0091      	lsls	r1, r2, #2
   251b4:	4a2f      	ldr	r2, [pc, #188]	; (25274 <find_conn_handler+0x118>)
   251b6:	440a      	add	r2, r1
   251b8:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   251bc:	42aa      	cmp	r2, r5
   251be:	d1e9      	bne.n	25194 <find_conn_handler+0x38>
		if (remote_addr) {
   251c0:	2e00      	cmp	r6, #0
   251c2:	d0d5      	beq.n	25170 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   251c4:	f013 0f02 	tst.w	r3, #2
   251c8:	d0e4      	beq.n	25194 <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   251ca:	8833      	ldrh	r3, [r6, #0]
   251cc:	2b0a      	cmp	r3, #10
   251ce:	d1e1      	bne.n	25194 <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   251d0:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   251d4:	008a      	lsls	r2, r1, #2
   251d6:	4927      	ldr	r1, [pc, #156]	; (25274 <find_conn_handler+0x118>)
   251d8:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   251da:	4293      	cmp	r3, r2
   251dc:	d1da      	bne.n	25194 <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   251de:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251e2:	0093      	lsls	r3, r2, #2
   251e4:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   251e6:	2210      	movs	r2, #16
   251e8:	3104      	adds	r1, #4
   251ea:	1d30      	adds	r0, r6, #4
   251ec:	f005 fb2c 	bl	2a848 <memcmp>
				if (!net_ipv6_addr_cmp(
   251f0:	2800      	cmp	r0, #0
   251f2:	d1cf      	bne.n	25194 <find_conn_handler+0x38>
   251f4:	e7bf      	b.n	25176 <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   251f6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   251fa:	0091      	lsls	r1, r2, #2
   251fc:	4a1d      	ldr	r2, [pc, #116]	; (25274 <find_conn_handler+0x118>)
   251fe:	440a      	add	r2, r1
   25200:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   25202:	4293      	cmp	r3, r2
   25204:	d1c6      	bne.n	25194 <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   25206:	460b      	mov	r3, r1
   25208:	3318      	adds	r3, #24
   2520a:	4a1a      	ldr	r2, [pc, #104]	; (25274 <find_conn_handler+0x118>)
   2520c:	4413      	add	r3, r2
   2520e:	2210      	movs	r2, #16
   25210:	1d19      	adds	r1, r3, #4
   25212:	1d38      	adds	r0, r7, #4
   25214:	f005 fb18 	bl	2a848 <memcmp>
				if (!net_ipv6_addr_cmp(
   25218:	2800      	cmp	r0, #0
   2521a:	d1bb      	bne.n	25194 <find_conn_handler+0x38>
   2521c:	e009      	b.n	25232 <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2521e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25222:	009a      	lsls	r2, r3, #2
   25224:	4b13      	ldr	r3, [pc, #76]	; (25274 <find_conn_handler+0x118>)
   25226:	4413      	add	r3, r2
   25228:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2522c:	f013 0f04 	tst.w	r3, #4
   25230:	d1b0      	bne.n	25194 <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25232:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25236:	009a      	lsls	r2, r3, #2
   25238:	4b0e      	ldr	r3, [pc, #56]	; (25274 <find_conn_handler+0x118>)
   2523a:	4413      	add	r3, r2
   2523c:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   2523e:	ea4f 2319 	mov.w	r3, r9, lsr #8
   25242:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   25246:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   25248:	429a      	cmp	r2, r3
   2524a:	d1a3      	bne.n	25194 <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   2524c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25250:	0093      	lsls	r3, r2, #2
   25252:	3318      	adds	r3, #24
   25254:	4a07      	ldr	r2, [pc, #28]	; (25274 <find_conn_handler+0x118>)
   25256:	4413      	add	r3, r2
   25258:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   2525a:	ea4f 2318 	mov.w	r3, r8, lsr #8
   2525e:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   25262:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   25264:	429a      	cmp	r2, r3
   25266:	d195      	bne.n	25194 <find_conn_handler+0x38>
   25268:	e001      	b.n	2526e <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   2526a:	f06f 0401 	mvn.w	r4, #1
}
   2526e:	4620      	mov	r0, r4
   25270:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   25274:	200005b0 	.word	0x200005b0

00025278 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   25278:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   2527a:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   2527c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   25280:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   25284:	b29d      	uxth	r5, r3
   25286:	42ac      	cmp	r4, r5
   25288:	d002      	beq.n	25290 <check_addr+0x18>
		return false;
   2528a:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   2528c:	4620      	mov	r0, r4
   2528e:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25290:	2b0a      	cmp	r3, #10
   25292:	d001      	beq.n	25298 <check_addr+0x20>
	return true;
   25294:	2401      	movs	r4, #1
   25296:	e7f9      	b.n	2528c <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   25298:	2c0a      	cmp	r4, #10
   2529a:	d001      	beq.n	252a0 <check_addr+0x28>
	return true;
   2529c:	2401      	movs	r4, #1
   2529e:	e7f5      	b.n	2528c <check_addr+0x14>
		if (is_remote) {
   252a0:	b162      	cbz	r2, 252bc <check_addr+0x44>
	return pkt->frags->data;
   252a2:	6883      	ldr	r3, [r0, #8]
   252a4:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   252a6:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   252a8:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252aa:	b95a      	cbnz	r2, 252c4 <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   252ac:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   252ae:	b9ba      	cbnz	r2, 252e0 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252b0:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   252b2:	b9ba      	cbnz	r2, 252e4 <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   252b4:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252b6:	b1ba      	cbz	r2, 252e8 <check_addr+0x70>
   252b8:	2200      	movs	r2, #0
   252ba:	e004      	b.n	252c6 <check_addr+0x4e>
   252bc:	6883      	ldr	r3, [r0, #8]
   252be:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   252c0:	3318      	adds	r3, #24
   252c2:	e7f1      	b.n	252a8 <check_addr+0x30>
   252c4:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   252c6:	4614      	mov	r4, r2
   252c8:	2a00      	cmp	r2, #0
   252ca:	d1df      	bne.n	2528c <check_addr+0x14>
   252cc:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   252ce:	2210      	movs	r2, #16
   252d0:	4619      	mov	r1, r3
   252d2:	3004      	adds	r0, #4
   252d4:	f005 fab8 	bl	2a848 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   252d8:	2800      	cmp	r0, #0
   252da:	d1d7      	bne.n	2528c <check_addr+0x14>
		return true;
   252dc:	2401      	movs	r4, #1
   252de:	e7d5      	b.n	2528c <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   252e0:	2200      	movs	r2, #0
   252e2:	e7f0      	b.n	252c6 <check_addr+0x4e>
   252e4:	2200      	movs	r2, #0
   252e6:	e7ee      	b.n	252c6 <check_addr+0x4e>
   252e8:	2201      	movs	r2, #1
   252ea:	e7ec      	b.n	252c6 <check_addr+0x4e>

000252ec <net_conn_unregister>:
{
   252ec:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   252ee:	4b0d      	ldr	r3, [pc, #52]	; (25324 <net_conn_unregister+0x38>)
   252f0:	4298      	cmp	r0, r3
   252f2:	d30d      	bcc.n	25310 <net_conn_unregister+0x24>
   252f4:	33f0      	adds	r3, #240	; 0xf0
   252f6:	4298      	cmp	r0, r3
   252f8:	d80d      	bhi.n	25316 <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   252fa:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   252fe:	f013 0f01 	tst.w	r3, #1
   25302:	d00b      	beq.n	2531c <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   25304:	223c      	movs	r2, #60	; 0x3c
   25306:	2100      	movs	r1, #0
   25308:	f005 fb32 	bl	2a970 <memset>
	return 0;
   2530c:	2000      	movs	r0, #0
   2530e:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25310:	f06f 0015 	mvn.w	r0, #21
   25314:	bd08      	pop	{r3, pc}
   25316:	f06f 0015 	mvn.w	r0, #21
   2531a:	bd08      	pop	{r3, pc}
		return -ENOENT;
   2531c:	f06f 0001 	mvn.w	r0, #1
}
   25320:	bd08      	pop	{r3, pc}
   25322:	bf00      	nop
   25324:	200005b0 	.word	0x200005b0

00025328 <net_conn_register>:
{
   25328:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2532c:	b082      	sub	sp, #8
   2532e:	4681      	mov	r9, r0
   25330:	460d      	mov	r5, r1
   25332:	4616      	mov	r6, r2
   25334:	4698      	mov	r8, r3
   25336:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   2533a:	9700      	str	r7, [sp, #0]
   2533c:	f7ff ff0e 	bl	2515c <find_conn_handler>
	if (i != -ENOENT) {
   25340:	f110 0f02 	cmn.w	r0, #2
   25344:	f040 80ba 	bne.w	254bc <net_conn_register+0x194>
   25348:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2534a:	2c03      	cmp	r4, #3
   2534c:	f300 80aa 	bgt.w	254a4 <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   25350:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25354:	009a      	lsls	r2, r3, #2
   25356:	4b60      	ldr	r3, [pc, #384]	; (254d8 <net_conn_register+0x1b0>)
   25358:	4413      	add	r3, r2
   2535a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2535e:	f013 0f01 	tst.w	r3, #1
   25362:	d001      	beq.n	25368 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25364:	3401      	adds	r4, #1
   25366:	e7f0      	b.n	2534a <net_conn_register+0x22>
		if (remote_addr) {
   25368:	2d00      	cmp	r5, #0
   2536a:	d04b      	beq.n	25404 <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   2536c:	882b      	ldrh	r3, [r5, #0]
   2536e:	2b0a      	cmp	r3, #10
   25370:	f040 80a7 	bne.w	254c2 <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   25374:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25378:	0093      	lsls	r3, r2, #2
   2537a:	2218      	movs	r2, #24
   2537c:	4629      	mov	r1, r5
   2537e:	4856      	ldr	r0, [pc, #344]	; (254d8 <net_conn_register+0x1b0>)
   25380:	4418      	add	r0, r3
   25382:	f7da ff9d 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   25386:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25388:	b93b      	cbnz	r3, 2539a <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2538a:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2538c:	bb8b      	cbnz	r3, 253f2 <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2538e:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   25390:	bb8b      	cbnz	r3, 253f6 <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   25392:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   25394:	b38b      	cbz	r3, 253fa <net_conn_register+0xd2>
   25396:	2300      	movs	r3, #0
   25398:	e000      	b.n	2539c <net_conn_register+0x74>
   2539a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2539c:	b37b      	cbz	r3, 253fe <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   2539e:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   253a2:	0122      	lsls	r2, r4, #4
   253a4:	1b12      	subs	r2, r2, r4
   253a6:	0091      	lsls	r1, r2, #2
   253a8:	4b4b      	ldr	r3, [pc, #300]	; (254d8 <net_conn_register+0x1b0>)
   253aa:	440b      	add	r3, r1
   253ac:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   253b0:	f042 0202 	orr.w	r2, r2, #2
   253b4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   253b8:	2e00      	cmp	r6, #0
   253ba:	d036      	beq.n	2542a <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   253bc:	8833      	ldrh	r3, [r6, #0]
   253be:	2b0a      	cmp	r3, #10
   253c0:	f040 8082 	bne.w	254c8 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   253c4:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   253c8:	0098      	lsls	r0, r3, #2
   253ca:	3018      	adds	r0, #24
   253cc:	2218      	movs	r2, #24
   253ce:	4631      	mov	r1, r6
   253d0:	4b41      	ldr	r3, [pc, #260]	; (254d8 <net_conn_register+0x1b0>)
   253d2:	4418      	add	r0, r3
   253d4:	f7da ff74 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   253d8:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   253da:	b9b3      	cbnz	r3, 2540a <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   253dc:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   253de:	2b00      	cmp	r3, #0
   253e0:	d163      	bne.n	254aa <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   253e2:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   253e4:	2b00      	cmp	r3, #0
   253e6:	d162      	bne.n	254ae <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   253e8:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   253ea:	2b00      	cmp	r3, #0
   253ec:	d061      	beq.n	254b2 <net_conn_register+0x18a>
   253ee:	2300      	movs	r3, #0
   253f0:	e00c      	b.n	2540c <net_conn_register+0xe4>
   253f2:	2300      	movs	r3, #0
   253f4:	e7d2      	b.n	2539c <net_conn_register+0x74>
   253f6:	2300      	movs	r3, #0
   253f8:	e7d0      	b.n	2539c <net_conn_register+0x74>
   253fa:	2301      	movs	r3, #1
   253fc:	e7ce      	b.n	2539c <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   253fe:	f04f 0a20 	mov.w	sl, #32
   25402:	e7ce      	b.n	253a2 <net_conn_register+0x7a>
	u8_t rank = 0;
   25404:	f04f 0a00 	mov.w	sl, #0
   25408:	e7d6      	b.n	253b8 <net_conn_register+0x90>
   2540a:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   2540c:	2b00      	cmp	r3, #0
   2540e:	d052      	beq.n	254b6 <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   25410:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   25414:	0122      	lsls	r2, r4, #4
   25416:	1b12      	subs	r2, r2, r4
   25418:	0091      	lsls	r1, r2, #2
   2541a:	4b2f      	ldr	r3, [pc, #188]	; (254d8 <net_conn_register+0x1b0>)
   2541c:	440b      	add	r3, r1
   2541e:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   25422:	f042 0204 	orr.w	r2, r2, #4
   25426:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   2542a:	b125      	cbz	r5, 25436 <net_conn_register+0x10e>
   2542c:	b11e      	cbz	r6, 25436 <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   2542e:	882a      	ldrh	r2, [r5, #0]
   25430:	8833      	ldrh	r3, [r6, #0]
   25432:	429a      	cmp	r2, r3
   25434:	d14b      	bne.n	254ce <net_conn_register+0x1a6>
		if (remote_port) {
   25436:	f1b8 0f00 	cmp.w	r8, #0
   2543a:	d00c      	beq.n	25456 <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   2543c:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   25440:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25444:	009a      	lsls	r2, r3, #2
   25446:	4b24      	ldr	r3, [pc, #144]	; (254d8 <net_conn_register+0x1b0>)
   25448:	4413      	add	r3, r2
				htons(remote_port);
   2544a:	ea4f 2218 	mov.w	r2, r8, lsr #8
   2544e:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   25452:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   25456:	b15f      	cbz	r7, 25470 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   25458:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   2545c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   25460:	0093      	lsls	r3, r2, #2
   25462:	3318      	adds	r3, #24
   25464:	4a1c      	ldr	r2, [pc, #112]	; (254d8 <net_conn_register+0x1b0>)
   25466:	4413      	add	r3, r2
				htons(local_port);
   25468:	0a3a      	lsrs	r2, r7, #8
   2546a:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   2546e:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   25470:	0122      	lsls	r2, r4, #4
   25472:	1b12      	subs	r2, r2, r4
   25474:	0091      	lsls	r1, r2, #2
   25476:	4b18      	ldr	r3, [pc, #96]	; (254d8 <net_conn_register+0x1b0>)
   25478:	440b      	add	r3, r1
   2547a:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   2547e:	f042 0201 	orr.w	r2, r2, #1
   25482:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   25486:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   25488:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   2548a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2548c:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   2548e:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   25492:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   25496:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   25498:	b1e3      	cbz	r3, 254d4 <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   2549a:	4b0f      	ldr	r3, [pc, #60]	; (254d8 <net_conn_register+0x1b0>)
   2549c:	440b      	add	r3, r1
   2549e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   254a0:	6013      	str	r3, [r2, #0]
		return 0;
   254a2:	2000      	movs	r0, #0
}
   254a4:	b002      	add	sp, #8
   254a6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   254aa:	2300      	movs	r3, #0
   254ac:	e7ae      	b.n	2540c <net_conn_register+0xe4>
   254ae:	2300      	movs	r3, #0
   254b0:	e7ac      	b.n	2540c <net_conn_register+0xe4>
   254b2:	2301      	movs	r3, #1
   254b4:	e7aa      	b.n	2540c <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   254b6:	f04a 0a10 	orr.w	sl, sl, #16
   254ba:	e7ab      	b.n	25414 <net_conn_register+0xec>
		return -EALREADY;
   254bc:	f06f 0077 	mvn.w	r0, #119	; 0x77
   254c0:	e7f0      	b.n	254a4 <net_conn_register+0x17c>
				return -EINVAL;
   254c2:	f06f 0015 	mvn.w	r0, #21
   254c6:	e7ed      	b.n	254a4 <net_conn_register+0x17c>
				return -EINVAL;
   254c8:	f06f 0015 	mvn.w	r0, #21
   254cc:	e7ea      	b.n	254a4 <net_conn_register+0x17c>
				return -EINVAL;
   254ce:	f06f 0015 	mvn.w	r0, #21
   254d2:	e7e7      	b.n	254a4 <net_conn_register+0x17c>
		return 0;
   254d4:	2000      	movs	r0, #0
   254d6:	e7e5      	b.n	254a4 <net_conn_register+0x17c>
   254d8:	200005b0 	.word	0x200005b0

000254dc <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   254dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   254e0:	b089      	sub	sp, #36	; 0x24
   254e2:	4605      	mov	r5, r0
   254e4:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   254e6:	2811      	cmp	r0, #17
   254e8:	d005      	beq.n	254f6 <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   254ea:	2806      	cmp	r0, #6
   254ec:	d015      	beq.n	2551a <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   254ee:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   254f0:	b009      	add	sp, #36	; 0x24
   254f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   254f6:	a903      	add	r1, sp, #12
   254f8:	4630      	mov	r0, r6
   254fa:	f7fd ff73 	bl	233e4 <net_udp_get_hdr>
		if (!udp_hdr) {
   254fe:	b150      	cbz	r0, 25516 <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   25500:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   25504:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   25508:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   2550c:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   25510:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   25512:	2400      	movs	r4, #0
   25514:	e01b      	b.n	2554e <net_conn_input+0x72>
			return NET_DROP;
   25516:	2002      	movs	r0, #2
   25518:	e7ea      	b.n	254f0 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   2551a:	a903      	add	r1, sp, #12
   2551c:	4630      	mov	r0, r6
   2551e:	f7fe fbcd 	bl	23cbc <net_tcp_get_hdr>
		if (!tcp_hdr) {
   25522:	b130      	cbz	r0, 25532 <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   25524:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   25528:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   2552c:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   25530:	e7ec      	b.n	2550c <net_conn_input+0x30>
			return NET_DROP;
   25532:	2002      	movs	r0, #2
   25534:	e7dc      	b.n	254f0 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   25536:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   2553a:	0082      	lsls	r2, r0, #2
   2553c:	3218      	adds	r2, #24
   2553e:	4866      	ldr	r0, [pc, #408]	; (256d8 <net_conn_input+0x1fc>)
   25540:	1882      	adds	r2, r0, r2
   25542:	9201      	str	r2, [sp, #4]
   25544:	8852      	ldrh	r2, [r2, #2]
   25546:	b1fa      	cbz	r2, 25588 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   25548:	4593      	cmp	fp, r2
   2554a:	d01d      	beq.n	25588 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2554c:	3401      	adds	r4, #1
   2554e:	2c03      	cmp	r4, #3
   25550:	dc4d      	bgt.n	255ee <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   25552:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25556:	009a      	lsls	r2, r3, #2
   25558:	4b5f      	ldr	r3, [pc, #380]	; (256d8 <net_conn_input+0x1fc>)
   2555a:	4413      	add	r3, r2
   2555c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   25560:	f013 0f01 	tst.w	r3, #1
   25564:	d0f2      	beq.n	2554c <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   25566:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2556a:	0091      	lsls	r1, r2, #2
   2556c:	4a5a      	ldr	r2, [pc, #360]	; (256d8 <net_conn_input+0x1fc>)
   2556e:	440a      	add	r2, r1
   25570:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   25574:	4295      	cmp	r5, r2
   25576:	d1e9      	bne.n	2554c <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   25578:	4a57      	ldr	r2, [pc, #348]	; (256d8 <net_conn_input+0x1fc>)
   2557a:	4411      	add	r1, r2
   2557c:	884a      	ldrh	r2, [r1, #2]
   2557e:	2a00      	cmp	r2, #0
   25580:	d0d9      	beq.n	25536 <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   25582:	4591      	cmp	r9, r2
   25584:	d1e2      	bne.n	2554c <net_conn_input+0x70>
   25586:	e7d6      	b.n	25536 <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   25588:	f013 0f02 	tst.w	r3, #2
   2558c:	d120      	bne.n	255d0 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   2558e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   25592:	009a      	lsls	r2, r3, #2
   25594:	4b50      	ldr	r3, [pc, #320]	; (256d8 <net_conn_input+0x1fc>)
   25596:	4413      	add	r3, r2
   25598:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   2559c:	f013 0f04 	tst.w	r3, #4
   255a0:	d11d      	bne.n	255de <net_conn_input+0x102>
		if (best_match >= 0 &&
   255a2:	2f00      	cmp	r7, #0
   255a4:	db07      	blt.n	255b6 <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   255a6:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   255aa:	009a      	lsls	r2, r3, #2
   255ac:	4b4a      	ldr	r3, [pc, #296]	; (256d8 <net_conn_input+0x1fc>)
   255ae:	4413      	add	r3, r2
   255b0:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   255b2:	2b00      	cmp	r3, #0
   255b4:	d1ca      	bne.n	2554c <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   255b6:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   255ba:	009a      	lsls	r2, r3, #2
   255bc:	4b46      	ldr	r3, [pc, #280]	; (256d8 <net_conn_input+0x1fc>)
   255be:	4413      	add	r3, r2
   255c0:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   255c4:	4598      	cmp	r8, r3
   255c6:	dac1      	bge.n	2554c <net_conn_input+0x70>
			best_rank = conns[i].rank;
   255c8:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   255cc:	4627      	mov	r7, r4
   255ce:	e7bd      	b.n	2554c <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   255d0:	2201      	movs	r2, #1
   255d2:	4630      	mov	r0, r6
   255d4:	f7ff fe50 	bl	25278 <check_addr>
   255d8:	2800      	cmp	r0, #0
   255da:	d0b7      	beq.n	2554c <net_conn_input+0x70>
   255dc:	e7d7      	b.n	2558e <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   255de:	2200      	movs	r2, #0
   255e0:	9901      	ldr	r1, [sp, #4]
   255e2:	4630      	mov	r0, r6
   255e4:	f7ff fe48 	bl	25278 <check_addr>
   255e8:	2800      	cmp	r0, #0
   255ea:	d0af      	beq.n	2554c <net_conn_input+0x70>
   255ec:	e7d9      	b.n	255a2 <net_conn_input+0xc6>
	if (best_match >= 0) {
   255ee:	2f00      	cmp	r7, #0
   255f0:	db44      	blt.n	2567c <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   255f2:	2d11      	cmp	r5, #17
   255f4:	d014      	beq.n	25620 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   255f6:	2d06      	cmp	r5, #6
   255f8:	d023      	beq.n	25642 <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   255fa:	4c37      	ldr	r4, [pc, #220]	; (256d8 <net_conn_input+0x1fc>)
   255fc:	013a      	lsls	r2, r7, #4
   255fe:	1bd1      	subs	r1, r2, r7
   25600:	008b      	lsls	r3, r1, #2
   25602:	4423      	add	r3, r4
   25604:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   25608:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   2560a:	4631      	mov	r1, r6
   2560c:	4618      	mov	r0, r3
   2560e:	47c0      	blx	r8
   25610:	2802      	cmp	r0, #2
   25612:	d03d      	beq.n	25690 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25614:	2d11      	cmp	r5, #17
   25616:	d023      	beq.n	25660 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25618:	2d06      	cmp	r5, #6
   2561a:	d029      	beq.n	25670 <net_conn_input+0x194>
		return NET_OK;
   2561c:	2000      	movs	r0, #0
   2561e:	e767      	b.n	254f0 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   25620:	68b1      	ldr	r1, [r6, #8]
   25622:	4630      	mov	r0, r6
   25624:	f7fd fe6b 	bl	232fe <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   25628:	68b1      	ldr	r1, [r6, #8]
   2562a:	4630      	mov	r0, r6
   2562c:	f7fd feb4 	bl	23398 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   25630:	4582      	cmp	sl, r0
   25632:	d0e2      	beq.n	255fa <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   25634:	4a29      	ldr	r2, [pc, #164]	; (256dc <net_conn_input+0x200>)
   25636:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   2563a:	3301      	adds	r3, #1
   2563c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   25640:	e026      	b.n	25690 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   25642:	68b1      	ldr	r1, [r6, #8]
   25644:	4630      	mov	r0, r6
   25646:	f7fe fc9e 	bl	23f86 <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   2564a:	68b1      	ldr	r1, [r6, #8]
   2564c:	4630      	mov	r0, r6
   2564e:	f7fe fc74 	bl	23f3a <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   25652:	4582      	cmp	sl, r0
   25654:	d0d1      	beq.n	255fa <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   25656:	4a21      	ldr	r2, [pc, #132]	; (256dc <net_conn_input+0x200>)
   25658:	6e13      	ldr	r3, [r2, #96]	; 0x60
   2565a:	3301      	adds	r3, #1
   2565c:	6613      	str	r3, [r2, #96]	; 0x60
   2565e:	e017      	b.n	25690 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   25660:	4a1e      	ldr	r2, [pc, #120]	; (256dc <net_conn_input+0x200>)
   25662:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   25666:	3301      	adds	r3, #1
   25668:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   2566c:	2000      	movs	r0, #0
   2566e:	e73f      	b.n	254f0 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   25670:	4a1a      	ldr	r2, [pc, #104]	; (256dc <net_conn_input+0x200>)
   25672:	6d53      	ldr	r3, [r2, #84]	; 0x54
   25674:	3301      	adds	r3, #1
   25676:	6553      	str	r3, [r2, #84]	; 0x54
   25678:	2000      	movs	r0, #0
   2567a:	e739      	b.n	254f0 <net_conn_input+0x14>
	return pkt->family;
   2567c:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   25680:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   25684:	2b0a      	cmp	r3, #10
   25686:	d009      	beq.n	2569c <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   25688:	2b0a      	cmp	r3, #10
   2568a:	d00d      	beq.n	256a8 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   2568c:	2d06      	cmp	r5, #6
   2568e:	d012      	beq.n	256b6 <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   25690:	2d11      	cmp	r5, #17
   25692:	d015      	beq.n	256c0 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   25694:	2d06      	cmp	r5, #6
   25696:	d019      	beq.n	256cc <net_conn_input+0x1f0>
	return NET_DROP;
   25698:	2002      	movs	r0, #2
   2569a:	e729      	b.n	254f0 <net_conn_input+0x14>
	return pkt->frags->data;
   2569c:	68b2      	ldr	r2, [r6, #8]
   2569e:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   256a0:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   256a2:	2aff      	cmp	r2, #255	; 0xff
   256a4:	d1f0      	bne.n	25688 <net_conn_input+0x1ac>
   256a6:	e7f3      	b.n	25690 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   256a8:	2300      	movs	r3, #0
   256aa:	2204      	movs	r2, #4
   256ac:	2101      	movs	r1, #1
   256ae:	4630      	mov	r0, r6
   256b0:	f7f9 fc94 	bl	1efdc <net_icmpv6_send_error>
   256b4:	e7ea      	b.n	2568c <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   256b6:	4a09      	ldr	r2, [pc, #36]	; (256dc <net_conn_input+0x200>)
   256b8:	6f93      	ldr	r3, [r2, #120]	; 0x78
   256ba:	3301      	adds	r3, #1
   256bc:	6793      	str	r3, [r2, #120]	; 0x78
   256be:	e7e7      	b.n	25690 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   256c0:	4a06      	ldr	r2, [pc, #24]	; (256dc <net_conn_input+0x200>)
   256c2:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   256c4:	3301      	adds	r3, #1
   256c6:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   256c8:	2002      	movs	r0, #2
   256ca:	e711      	b.n	254f0 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   256cc:	4a03      	ldr	r2, [pc, #12]	; (256dc <net_conn_input+0x200>)
   256ce:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   256d0:	3301      	adds	r3, #1
   256d2:	65d3      	str	r3, [r2, #92]	; 0x5c
   256d4:	2002      	movs	r0, #2
   256d6:	e70b      	b.n	254f0 <net_conn_input+0x14>
   256d8:	200005b0 	.word	0x200005b0
   256dc:	20002b58 	.word	0x20002b58

000256e0 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   256e0:	4770      	bx	lr

000256e2 <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   256e2:	297f      	cmp	r1, #127	; 0x7f
   256e4:	d912      	bls.n	2570c <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   256e6:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   256ea:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   256ee:	d311      	bcc.n	25714 <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   256f0:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   256f4:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   256f8:	d310      	bcc.n	2571c <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   256fa:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   256fe:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   25702:	d20f      	bcs.n	25724 <compute_rlen_size+0x42>
		*size = 4;
   25704:	2304      	movs	r3, #4
   25706:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   25708:	2000      	movs	r0, #0
   2570a:	4770      	bx	lr
		*size = 1;
   2570c:	2301      	movs	r3, #1
   2570e:	8003      	strh	r3, [r0, #0]
	return 0;
   25710:	2000      	movs	r0, #0
   25712:	4770      	bx	lr
		*size = 2;
   25714:	2302      	movs	r3, #2
   25716:	8003      	strh	r3, [r0, #0]
	return 0;
   25718:	2000      	movs	r0, #0
   2571a:	4770      	bx	lr
		*size = 3;
   2571c:	2303      	movs	r3, #3
   2571e:	8003      	strh	r3, [r0, #0]
	return 0;
   25720:	2000      	movs	r0, #0
   25722:	4770      	bx	lr
		return -EINVAL;
   25724:	f06f 0015 	mvn.w	r0, #21
}
   25728:	4770      	bx	lr

0002572a <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   2572a:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   2572c:	2200      	movs	r2, #0
   2572e:	e004      	b.n	2573a <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   25730:	1c53      	adds	r3, r2, #1
   25732:	b2db      	uxtb	r3, r3
   25734:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   25736:	b139      	cbz	r1, 25748 <rlen_encode+0x1e>
		buf[i++] = encoded;
   25738:	461a      	mov	r2, r3
		encoded = len % 128;
   2573a:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   2573e:	09c9      	lsrs	r1, r1, #7
   25740:	d0f6      	beq.n	25730 <rlen_encode+0x6>
			encoded = encoded | 128;
   25742:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   25746:	e7f3      	b.n	25730 <rlen_encode+0x6>

	return 0;
}
   25748:	2000      	movs	r0, #0
   2574a:	bc10      	pop	{r4}
   2574c:	4770      	bx	lr

0002574e <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   2574e:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   25750:	2400      	movs	r4, #0
	u32_t mult = 1;
   25752:	2601      	movs	r6, #1
	u32_t value = 0;
   25754:	4627      	mov	r7, r4
   25756:	e000      	b.n	2575a <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   25758:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   2575a:	2c03      	cmp	r4, #3
   2575c:	d810      	bhi.n	25780 <rlen_decode+0x32>
   2575e:	429c      	cmp	r4, r3
   25760:	d211      	bcs.n	25786 <rlen_decode+0x38>
		encoded = buf[i++];
   25762:	1c65      	adds	r5, r4, #1
   25764:	b2ad      	uxth	r5, r5
   25766:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   25768:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   2576c:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   25770:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   25772:	f014 0f80 	tst.w	r4, #128	; 0x80
   25776:	d1ef      	bne.n	25758 <rlen_decode+0xa>

	*rlen = value;
   25778:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   2577a:	800d      	strh	r5, [r1, #0]

	return 0;
   2577c:	2000      	movs	r0, #0
   2577e:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   25780:	f06f 000b 	mvn.w	r0, #11
   25784:	bdf0      	pop	{r4, r5, r6, r7, pc}
   25786:	f06f 000b 	mvn.w	r0, #11
}
   2578a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0002578c <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   2578c:	b410      	push	{r4}
   2578e:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   25792:	2a03      	cmp	r2, #3
   25794:	d912      	bls.n	257bc <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   25796:	011b      	lsls	r3, r3, #4
   25798:	b2db      	uxtb	r3, r3
   2579a:	f89d 2004 	ldrb.w	r2, [sp, #4]
   2579e:	f002 020f 	and.w	r2, r2, #15
   257a2:	4413      	add	r3, r2
   257a4:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   257a6:	2302      	movs	r3, #2
   257a8:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   257aa:	0a23      	lsrs	r3, r4, #8
   257ac:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   257b0:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   257b2:	2304      	movs	r3, #4
   257b4:	800b      	strh	r3, [r1, #0]

	return 0;
   257b6:	2000      	movs	r0, #0
}
   257b8:	bc10      	pop	{r4}
   257ba:	4770      	bx	lr
		return -ENOMEM;
   257bc:	f06f 000b 	mvn.w	r0, #11
   257c0:	e7fa      	b.n	257b8 <pack_pkt_id+0x2c>

000257c2 <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   257c2:	2a01      	cmp	r2, #1
   257c4:	d90d      	bls.n	257e2 <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   257c6:	011b      	lsls	r3, r3, #4
   257c8:	b2db      	uxtb	r3, r3
   257ca:	f89d 2000 	ldrb.w	r2, [sp]
   257ce:	f002 020f 	and.w	r2, r2, #15
   257d2:	4413      	add	r3, r2
   257d4:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   257d6:	2300      	movs	r3, #0
   257d8:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   257da:	2202      	movs	r2, #2
   257dc:	800a      	strh	r2, [r1, #0]

	return 0;
   257de:	4618      	mov	r0, r3
   257e0:	4770      	bx	lr
		return -ENOMEM;
   257e2:	f06f 000b 	mvn.w	r0, #11
}
   257e6:	4770      	bx	lr

000257e8 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   257e8:	2903      	cmp	r1, #3
   257ea:	d911      	bls.n	25810 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   257ec:	7841      	ldrb	r1, [r0, #1]
   257ee:	2902      	cmp	r1, #2
   257f0:	d111      	bne.n	25816 <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   257f2:	7801      	ldrb	r1, [r0, #0]
   257f4:	0909      	lsrs	r1, r1, #4
   257f6:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   257f8:	7802      	ldrb	r2, [r0, #0]
   257fa:	f002 020f 	and.w	r2, r2, #15
   257fe:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   25800:	8842      	ldrh	r2, [r0, #2]
   25802:	0a13      	lsrs	r3, r2, #8
   25804:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25808:	9a00      	ldr	r2, [sp, #0]
   2580a:	8013      	strh	r3, [r2, #0]

	return 0;
   2580c:	2000      	movs	r0, #0
   2580e:	4770      	bx	lr
		return -EINVAL;
   25810:	f06f 0015 	mvn.w	r0, #21
   25814:	4770      	bx	lr
		return -EINVAL;
   25816:	f06f 0015 	mvn.w	r0, #21
}
   2581a:	4770      	bx	lr

0002581c <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   2581c:	b510      	push	{r4, lr}
   2581e:	b084      	sub	sp, #16
   25820:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   25822:	9200      	str	r2, [sp, #0]
   25824:	f10d 030e 	add.w	r3, sp, #14
   25828:	f10d 020f 	add.w	r2, sp, #15
   2582c:	f7ff ffdc 	bl	257e8 <unpack_pktid>
	if (rc != 0) {
   25830:	4603      	mov	r3, r0
   25832:	b948      	cbnz	r0, 25848 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   25834:	f89d 200f 	ldrb.w	r2, [sp, #15]
   25838:	42a2      	cmp	r2, r4
   2583a:	d10b      	bne.n	25854 <unpack_pktid_validate+0x38>
   2583c:	f89d 100e 	ldrb.w	r1, [sp, #14]
   25840:	f89d 2018 	ldrb.w	r2, [sp, #24]
   25844:	4291      	cmp	r1, r2
   25846:	d102      	bne.n	2584e <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   25848:	4618      	mov	r0, r3
   2584a:	b004      	add	sp, #16
   2584c:	bd10      	pop	{r4, pc}
		return -EINVAL;
   2584e:	f06f 0315 	mvn.w	r3, #21
   25852:	e7f9      	b.n	25848 <unpack_pktid_validate+0x2c>
   25854:	f06f 0315 	mvn.w	r3, #21
   25858:	e7f6      	b.n	25848 <unpack_pktid_validate+0x2c>

0002585a <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   2585a:	2901      	cmp	r1, #1
   2585c:	d90d      	bls.n	2587a <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   2585e:	7801      	ldrb	r1, [r0, #0]
   25860:	0909      	lsrs	r1, r1, #4
   25862:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   25864:	7802      	ldrb	r2, [r0, #0]
   25866:	f002 020f 	and.w	r2, r2, #15
   2586a:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   2586c:	7843      	ldrb	r3, [r0, #1]
   2586e:	b90b      	cbnz	r3, 25874 <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   25870:	2000      	movs	r0, #0
}
   25872:	4770      	bx	lr
		return -EINVAL;
   25874:	f06f 0015 	mvn.w	r0, #21
   25878:	4770      	bx	lr
		return -EINVAL;
   2587a:	f06f 0015 	mvn.w	r0, #21
   2587e:	4770      	bx	lr

00025880 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   25880:	b530      	push	{r4, r5, lr}
   25882:	b083      	sub	sp, #12
   25884:	4614      	mov	r4, r2
   25886:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   25888:	f10d 0306 	add.w	r3, sp, #6
   2588c:	f10d 0207 	add.w	r2, sp, #7
   25890:	f7ff ffe3 	bl	2585a <unpack_zerolen>
	if (rc != 0) {
   25894:	4603      	mov	r3, r0
   25896:	b938      	cbnz	r0, 258a8 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   25898:	f89d 2007 	ldrb.w	r2, [sp, #7]
   2589c:	42a2      	cmp	r2, r4
   2589e:	d109      	bne.n	258b4 <unpack_zerolen_validate+0x34>
   258a0:	f89d 2006 	ldrb.w	r2, [sp, #6]
   258a4:	42aa      	cmp	r2, r5
   258a6:	d102      	bne.n	258ae <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   258a8:	4618      	mov	r0, r3
   258aa:	b003      	add	sp, #12
   258ac:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   258ae:	f06f 0315 	mvn.w	r3, #21
   258b2:	e7f9      	b.n	258a8 <unpack_zerolen_validate+0x28>
   258b4:	f06f 0315 	mvn.w	r3, #21
   258b8:	e7f6      	b.n	258a8 <unpack_zerolen_validate+0x28>

000258ba <mqtt_pack_puback>:
{
   258ba:	b500      	push	{lr}
   258bc:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   258be:	9301      	str	r3, [sp, #4]
   258c0:	2300      	movs	r3, #0
   258c2:	9300      	str	r3, [sp, #0]
   258c4:	2304      	movs	r3, #4
   258c6:	f7ff ff61 	bl	2578c <pack_pkt_id>
}
   258ca:	b003      	add	sp, #12
   258cc:	f85d fb04 	ldr.w	pc, [sp], #4

000258d0 <mqtt_pack_pubrec>:
{
   258d0:	b500      	push	{lr}
   258d2:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   258d4:	9301      	str	r3, [sp, #4]
   258d6:	2300      	movs	r3, #0
   258d8:	9300      	str	r3, [sp, #0]
   258da:	2305      	movs	r3, #5
   258dc:	f7ff ff56 	bl	2578c <pack_pkt_id>
}
   258e0:	b003      	add	sp, #12
   258e2:	f85d fb04 	ldr.w	pc, [sp], #4

000258e6 <mqtt_pack_pubrel>:
{
   258e6:	b500      	push	{lr}
   258e8:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   258ea:	9301      	str	r3, [sp, #4]
   258ec:	2302      	movs	r3, #2
   258ee:	9300      	str	r3, [sp, #0]
   258f0:	2306      	movs	r3, #6
   258f2:	f7ff ff4b 	bl	2578c <pack_pkt_id>
}
   258f6:	b003      	add	sp, #12
   258f8:	f85d fb04 	ldr.w	pc, [sp], #4

000258fc <mqtt_pack_pubcomp>:
{
   258fc:	b500      	push	{lr}
   258fe:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   25900:	9301      	str	r3, [sp, #4]
   25902:	2300      	movs	r3, #0
   25904:	9300      	str	r3, [sp, #0]
   25906:	2307      	movs	r3, #7
   25908:	f7ff ff40 	bl	2578c <pack_pkt_id>
}
   2590c:	b003      	add	sp, #12
   2590e:	f85d fb04 	ldr.w	pc, [sp], #4

00025912 <mqtt_pack_connect>:
{
   25912:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25916:	b082      	sub	sp, #8
   25918:	4605      	mov	r5, r0
   2591a:	460e      	mov	r6, r1
   2591c:	4617      	mov	r7, r2
   2591e:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   25920:	891b      	ldrh	r3, [r3, #8]
   25922:	1c99      	adds	r1, r3, #2
   25924:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   25926:	7aa2      	ldrb	r2, [r4, #10]
   25928:	f012 0f01 	tst.w	r2, #1
   2592c:	d009      	beq.n	25942 <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   2592e:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   25930:	8aa3      	ldrh	r3, [r4, #20]
   25932:	fa13 f181 	uxtah	r1, r3, r1
   25936:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   25938:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   2593a:	8ba3      	ldrh	r3, [r4, #28]
   2593c:	fa13 f181 	uxtah	r1, r3, r1
   25940:	b289      	uxth	r1, r1
	if (msg->user_name) {
   25942:	6a23      	ldr	r3, [r4, #32]
   25944:	b123      	cbz	r3, 25950 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   25946:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   25948:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   2594a:	fa13 f181 	uxtah	r1, r3, r1
   2594e:	b289      	uxth	r1, r1
	if (msg->password) {
   25950:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25952:	b123      	cbz	r3, 2595e <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   25954:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   25956:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   25958:	fa13 f181 	uxtah	r1, r3, r1
   2595c:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   2595e:	310a      	adds	r1, #10
   25960:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   25964:	4651      	mov	r1, sl
   25966:	f10d 0006 	add.w	r0, sp, #6
   2596a:	f7ff feba 	bl	256e2 <compute_rlen_size>
	if (rc != 0) {
   2596e:	4681      	mov	r9, r0
   25970:	2800      	cmp	r0, #0
   25972:	f040 80b6 	bne.w	25ae2 <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   25976:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   2597a:	44d0      	add	r8, sl
   2597c:	fa1f f888 	uxth.w	r8, r8
   25980:	f108 0801 	add.w	r8, r8, #1
   25984:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   25988:	45b8      	cmp	r8, r7
   2598a:	f200 80ad 	bhi.w	25ae8 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   2598e:	4628      	mov	r0, r5
   25990:	2310      	movs	r3, #16
   25992:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   25996:	4651      	mov	r1, sl
   25998:	f7ff fec7 	bl	2572a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2599c:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   259a0:	1c43      	adds	r3, r0, #1
   259a2:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   259a4:	2200      	movs	r2, #0
   259a6:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   259a8:	1c59      	adds	r1, r3, #1
   259aa:	2204      	movs	r2, #4
   259ac:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   259ae:	1c99      	adds	r1, r3, #2
   259b0:	274d      	movs	r7, #77	; 0x4d
   259b2:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   259b4:	1cd9      	adds	r1, r3, #3
   259b6:	2751      	movs	r7, #81	; 0x51
   259b8:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   259ba:	189f      	adds	r7, r3, r2
   259bc:	2154      	movs	r1, #84	; 0x54
   259be:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   259c0:	1d5f      	adds	r7, r3, #5
   259c2:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   259c4:	1d99      	adds	r1, r3, #6
   259c6:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   259c8:	1ddf      	adds	r7, r3, #7
   259ca:	6a22      	ldr	r2, [r4, #32]
   259cc:	2a00      	cmp	r2, #0
   259ce:	d05f      	beq.n	25a90 <mqtt_pack_connect+0x17e>
   259d0:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   259d4:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   259d6:	2a00      	cmp	r2, #0
   259d8:	d05c      	beq.n	25a94 <mqtt_pack_connect+0x182>
   259da:	2240      	movs	r2, #64	; 0x40
   259dc:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   259de:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   259e0:	f012 0f01 	tst.w	r2, #1
   259e4:	d058      	beq.n	25a98 <mqtt_pack_connect+0x186>
   259e6:	2220      	movs	r2, #32
   259e8:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   259ea:	7ae2      	ldrb	r2, [r4, #11]
   259ec:	00d2      	lsls	r2, r2, #3
   259ee:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   259f2:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   259f4:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   259f6:	f011 0f01 	tst.w	r1, #1
   259fa:	d04f      	beq.n	25a9c <mqtt_pack_connect+0x18a>
   259fc:	2104      	movs	r1, #4
   259fe:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   25a00:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   25a02:	f012 0f01 	tst.w	r2, #1
   25a06:	d04b      	beq.n	25aa0 <mqtt_pack_connect+0x18e>
   25a08:	2202      	movs	r2, #2
   25a0a:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25a0c:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   25a0e:	3308      	adds	r3, #8
   25a10:	8be1      	ldrh	r1, [r4, #30]
   25a12:	0a0a      	lsrs	r2, r1, #8
   25a14:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25a18:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   25a1a:	f100 030b 	add.w	r3, r0, #11
   25a1e:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   25a20:	8921      	ldrh	r1, [r4, #8]
   25a22:	0a0a      	lsrs	r2, r1, #8
   25a24:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25a28:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   25a2a:	300d      	adds	r0, #13
   25a2c:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   25a2e:	8922      	ldrh	r2, [r4, #8]
   25a30:	6861      	ldr	r1, [r4, #4]
   25a32:	19e8      	adds	r0, r5, r7
   25a34:	f7da fc44 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   25a38:	8920      	ldrh	r0, [r4, #8]
   25a3a:	4438      	add	r0, r7
   25a3c:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   25a3e:	7aa3      	ldrb	r3, [r4, #10]
   25a40:	f013 0f01 	tst.w	r3, #1
   25a44:	d12e      	bne.n	25aa4 <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   25a46:	6a23      	ldr	r3, [r4, #32]
   25a48:	b173      	cbz	r3, 25a68 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   25a4a:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25a4c:	0a13      	lsrs	r3, r2, #8
   25a4e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a52:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25a54:	3002      	adds	r0, #2
   25a56:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   25a58:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25a5a:	6a21      	ldr	r1, [r4, #32]
   25a5c:	19e8      	adds	r0, r5, r7
   25a5e:	f7da fc2f 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   25a62:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   25a64:	4438      	add	r0, r7
   25a66:	b280      	uxth	r0, r0
	if (msg->password) {
   25a68:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25a6a:	b15b      	cbz	r3, 25a84 <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   25a6c:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25a6e:	0a13      	lsrs	r3, r2, #8
   25a70:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25a74:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25a76:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   25a78:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25a7a:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   25a7c:	fa15 f080 	uxtah	r0, r5, r0
   25a80:	f7da fc1e 	bl	2c0 <memcpy>
	*length = total_buf_size;
   25a84:	f8a6 8000 	strh.w	r8, [r6]
}
   25a88:	4648      	mov	r0, r9
   25a8a:	b002      	add	sp, #8
   25a8c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25a90:	2100      	movs	r1, #0
   25a92:	e79f      	b.n	259d4 <mqtt_pack_connect+0xc2>
   25a94:	2200      	movs	r2, #0
   25a96:	e7a1      	b.n	259dc <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   25a98:	2200      	movs	r2, #0
   25a9a:	e7a5      	b.n	259e8 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   25a9c:	2100      	movs	r1, #0
   25a9e:	e7ae      	b.n	259fe <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   25aa0:	2200      	movs	r2, #0
   25aa2:	e7b2      	b.n	25a0a <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   25aa4:	8aa2      	ldrh	r2, [r4, #20]
   25aa6:	0a13      	lsrs	r3, r2, #8
   25aa8:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25aac:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25aae:	3002      	adds	r0, #2
   25ab0:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   25ab2:	8aa2      	ldrh	r2, [r4, #20]
   25ab4:	6921      	ldr	r1, [r4, #16]
   25ab6:	19e8      	adds	r0, r5, r7
   25ab8:	f7da fc02 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   25abc:	8aa0      	ldrh	r0, [r4, #20]
   25abe:	4407      	add	r7, r0
   25ac0:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   25ac2:	8ba2      	ldrh	r2, [r4, #28]
   25ac4:	0a13      	lsrs	r3, r2, #8
   25ac6:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25aca:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   25acc:	3702      	adds	r7, #2
   25ace:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   25ad0:	8ba2      	ldrh	r2, [r4, #28]
   25ad2:	69a1      	ldr	r1, [r4, #24]
   25ad4:	19e8      	adds	r0, r5, r7
   25ad6:	f7da fbf3 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   25ada:	8ba0      	ldrh	r0, [r4, #28]
   25adc:	4438      	add	r0, r7
   25ade:	b280      	uxth	r0, r0
   25ae0:	e7b1      	b.n	25a46 <mqtt_pack_connect+0x134>
		return -EINVAL;
   25ae2:	f06f 0915 	mvn.w	r9, #21
   25ae6:	e7cf      	b.n	25a88 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   25ae8:	f06f 090b 	mvn.w	r9, #11
   25aec:	e7cc      	b.n	25a88 <mqtt_pack_connect+0x176>
	...

00025af0 <mqtt_unpack_suback>:
{
   25af0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25af4:	b087      	sub	sp, #28
   25af6:	461d      	mov	r5, r3
   25af8:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   25afc:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   25afe:	2300      	movs	r3, #0
   25b00:	8013      	strh	r3, [r2, #0]
	*items = 0;
   25b02:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   25b04:	2f00      	cmp	r7, #0
   25b06:	d037      	beq.n	25b78 <mqtt_unpack_suback+0x88>
   25b08:	4604      	mov	r4, r0
   25b0a:	4689      	mov	r9, r1
   25b0c:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   25b0e:	7803      	ldrb	r3, [r0, #0]
   25b10:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   25b14:	2a90      	cmp	r2, #144	; 0x90
   25b16:	d138      	bne.n	25b8a <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   25b18:	1e4b      	subs	r3, r1, #1
   25b1a:	b29b      	uxth	r3, r3
   25b1c:	1c42      	adds	r2, r0, #1
   25b1e:	f10d 0116 	add.w	r1, sp, #22
   25b22:	a804      	add	r0, sp, #16
   25b24:	f7ff fe13 	bl	2574e <rlen_decode>
	if (rc != 0) {
   25b28:	4603      	mov	r3, r0
   25b2a:	2800      	cmp	r0, #0
   25b2c:	d136      	bne.n	25b9c <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   25b2e:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   25b32:	9804      	ldr	r0, [sp, #16]
   25b34:	180a      	adds	r2, r1, r0
   25b36:	3201      	adds	r2, #1
   25b38:	454a      	cmp	r2, r9
   25b3a:	d838      	bhi.n	25bae <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25b3c:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25b3e:	fa14 f282 	uxtah	r2, r4, r2
   25b42:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   25b44:	0a02      	lsrs	r2, r0, #8
   25b46:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   25b4a:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   25b4e:	3103      	adds	r1, #3
   25b50:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   25b52:	9a04      	ldr	r2, [sp, #16]
   25b54:	3a02      	subs	r2, #2
   25b56:	b2d2      	uxtb	r2, r2
   25b58:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   25b5a:	4297      	cmp	r7, r2
   25b5c:	d335      	bcc.n	25bca <mqtt_unpack_suback+0xda>
   25b5e:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25b60:	7828      	ldrb	r0, [r5, #0]
   25b62:	4282      	cmp	r2, r0
   25b64:	d242      	bcs.n	25bec <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   25b66:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25b68:	2802      	cmp	r0, #2
   25b6a:	d837      	bhi.n	25bdc <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   25b6c:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   25b6e:	3101      	adds	r1, #1
   25b70:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   25b72:	3201      	adds	r2, #1
   25b74:	b2d2      	uxtb	r2, r2
   25b76:	e7f3      	b.n	25b60 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25b78:	f240 321a 	movw	r2, #794	; 0x31a
   25b7c:	491d      	ldr	r1, [pc, #116]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25b7e:	481e      	ldr	r0, [pc, #120]	; (25bf8 <mqtt_unpack_suback+0x108>)
   25b80:	f7dd fa44 	bl	300c <printk>
		return -EINVAL;
   25b84:	f06f 0315 	mvn.w	r3, #21
   25b88:	e030      	b.n	25bec <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   25b8a:	f240 321f 	movw	r2, #799	; 0x31f
   25b8e:	4919      	ldr	r1, [pc, #100]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25b90:	481a      	ldr	r0, [pc, #104]	; (25bfc <mqtt_unpack_suback+0x10c>)
   25b92:	f7dd fa3b 	bl	300c <printk>
		return -EINVAL;
   25b96:	f06f 0315 	mvn.w	r3, #21
   25b9a:	e027      	b.n	25bec <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   25b9c:	f240 3226 	movw	r2, #806	; 0x326
   25ba0:	4914      	ldr	r1, [pc, #80]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25ba2:	4817      	ldr	r0, [pc, #92]	; (25c00 <mqtt_unpack_suback+0x110>)
   25ba4:	f7dd fa32 	bl	300c <printk>
		return -EINVAL;
   25ba8:	f06f 0315 	mvn.w	r3, #21
   25bac:	e01e      	b.n	25bec <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   25bae:	f8cd 9008 	str.w	r9, [sp, #8]
   25bb2:	9101      	str	r1, [sp, #4]
   25bb4:	9000      	str	r0, [sp, #0]
   25bb6:	2301      	movs	r3, #1
   25bb8:	f240 322d 	movw	r2, #813	; 0x32d
   25bbc:	490d      	ldr	r1, [pc, #52]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25bbe:	4811      	ldr	r0, [pc, #68]	; (25c04 <mqtt_unpack_suback+0x114>)
   25bc0:	f7dd fa24 	bl	300c <printk>
		return -EINVAL;
   25bc4:	f06f 0315 	mvn.w	r3, #21
   25bc8:	e010      	b.n	25bec <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   25bca:	f240 323b 	movw	r2, #827	; 0x33b
   25bce:	4909      	ldr	r1, [pc, #36]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25bd0:	480d      	ldr	r0, [pc, #52]	; (25c08 <mqtt_unpack_suback+0x118>)
   25bd2:	f7dd fa1b 	bl	300c <printk>
		return -EINVAL;
   25bd6:	f06f 0315 	mvn.w	r3, #21
   25bda:	e007      	b.n	25bec <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   25bdc:	f240 3242 	movw	r2, #834	; 0x342
   25be0:	4904      	ldr	r1, [pc, #16]	; (25bf4 <mqtt_unpack_suback+0x104>)
   25be2:	480a      	ldr	r0, [pc, #40]	; (25c0c <mqtt_unpack_suback+0x11c>)
   25be4:	f7dd fa12 	bl	300c <printk>
			return -EINVAL;
   25be8:	f06f 0315 	mvn.w	r3, #21
}
   25bec:	4618      	mov	r0, r3
   25bee:	b007      	add	sp, #28
   25bf0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   25bf4:	00032bf8 	.word	0x00032bf8
   25bf8:	00032c0c 	.word	0x00032c0c
   25bfc:	00032c24 	.word	0x00032c24
   25c00:	00032c4c 	.word	0x00032c4c
   25c04:	00032c70 	.word	0x00032c70
   25c08:	00032cb8 	.word	0x00032cb8
   25c0c:	00032ce4 	.word	0x00032ce4

00025c10 <mqtt_pack_publish>:
{
   25c10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   25c14:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   25c16:	785c      	ldrb	r4, [r3, #1]
   25c18:	2c02      	cmp	r4, #2
   25c1a:	d860      	bhi.n	25cde <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   25c1c:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   25c20:	2c00      	cmp	r4, #0
   25c22:	d057      	beq.n	25cd4 <mqtt_pack_publish+0xc4>
   25c24:	f04f 0e02 	mov.w	lr, #2
   25c28:	461c      	mov	r4, r3
   25c2a:	4615      	mov	r5, r2
   25c2c:	460f      	mov	r7, r1
   25c2e:	4606      	mov	r6, r0
   25c30:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   25c34:	8aa2      	ldrh	r2, [r4, #20]
   25c36:	fa12 f383 	uxtah	r3, r2, r3
   25c3a:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25c3c:	3302      	adds	r3, #2
   25c3e:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   25c42:	4649      	mov	r1, r9
   25c44:	f10d 0006 	add.w	r0, sp, #6
   25c48:	f7ff fd4b 	bl	256e2 <compute_rlen_size>
	if (rc != 0) {
   25c4c:	4680      	mov	r8, r0
   25c4e:	2800      	cmp	r0, #0
   25c50:	d148      	bne.n	25ce4 <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   25c52:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   25c56:	3301      	adds	r3, #1
   25c58:	444b      	add	r3, r9
   25c5a:	42ab      	cmp	r3, r5
   25c5c:	dc45      	bgt.n	25cea <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c5e:	7823      	ldrb	r3, [r4, #0]
   25c60:	2b00      	cmp	r3, #0
   25c62:	d03a      	beq.n	25cda <mqtt_pack_publish+0xca>
   25c64:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25c66:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c68:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25c6c:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25c6e:	78a2      	ldrb	r2, [r4, #2]
   25c70:	2a00      	cmp	r2, #0
   25c72:	bf18      	it	ne
   25c74:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25c78:	4630      	mov	r0, r6
   25c7a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25c7e:	4649      	mov	r1, r9
   25c80:	f7ff fd53 	bl	2572a <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25c84:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25c88:	1c6b      	adds	r3, r5, #1
   25c8a:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25c8c:	89a1      	ldrh	r1, [r4, #12]
   25c8e:	0a0a      	lsrs	r2, r1, #8
   25c90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25c94:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   25c96:	3503      	adds	r5, #3
   25c98:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25c9a:	89a2      	ldrh	r2, [r4, #12]
   25c9c:	68a1      	ldr	r1, [r4, #8]
   25c9e:	1970      	adds	r0, r6, r5
   25ca0:	f7da fb0e 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   25ca4:	89a3      	ldrh	r3, [r4, #12]
   25ca6:	441d      	add	r5, r3
   25ca8:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25caa:	7863      	ldrb	r3, [r4, #1]
   25cac:	b133      	cbz	r3, 25cbc <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25cae:	88a2      	ldrh	r2, [r4, #4]
   25cb0:	0a13      	lsrs	r3, r2, #8
   25cb2:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25cb6:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   25cb8:	3502      	adds	r5, #2
   25cba:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   25cbc:	8aa2      	ldrh	r2, [r4, #20]
   25cbe:	6921      	ldr	r1, [r4, #16]
   25cc0:	1970      	adds	r0, r6, r5
   25cc2:	f7da fafd 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   25cc6:	8aa3      	ldrh	r3, [r4, #20]
   25cc8:	441d      	add	r5, r3
	*length = offset;
   25cca:	803d      	strh	r5, [r7, #0]
}
   25ccc:	4640      	mov	r0, r8
   25cce:	b003      	add	sp, #12
   25cd0:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   25cd4:	f04f 0e00 	mov.w	lr, #0
   25cd8:	e7a6      	b.n	25c28 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25cda:	2330      	movs	r3, #48	; 0x30
   25cdc:	e7c3      	b.n	25c66 <mqtt_pack_publish+0x56>
		return -EINVAL;
   25cde:	f06f 0815 	mvn.w	r8, #21
   25ce2:	e7f3      	b.n	25ccc <mqtt_pack_publish+0xbc>
		return -EINVAL;
   25ce4:	f06f 0815 	mvn.w	r8, #21
   25ce8:	e7f0      	b.n	25ccc <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   25cea:	f06f 080b 	mvn.w	r8, #11
   25cee:	e7ed      	b.n	25ccc <mqtt_pack_publish+0xbc>

00025cf0 <mqtt_unpack_publish>:
{
   25cf0:	b5f0      	push	{r4, r5, r6, r7, lr}
   25cf2:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   25cf4:	7807      	ldrb	r7, [r0, #0]
   25cf6:	093b      	lsrs	r3, r7, #4
   25cf8:	2b03      	cmp	r3, #3
   25cfa:	d148      	bne.n	25d8e <mqtt_unpack_publish+0x9e>
   25cfc:	4615      	mov	r5, r2
   25cfe:	460e      	mov	r6, r1
   25d00:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   25d02:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   25d06:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   25d08:	7803      	ldrb	r3, [r0, #0]
   25d0a:	f3c3 0341 	ubfx	r3, r3, #1, #2
   25d0e:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   25d10:	4602      	mov	r2, r0
   25d12:	f812 3b01 	ldrb.w	r3, [r2], #1
   25d16:	f003 0301 	and.w	r3, r3, #1
   25d1a:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25d1c:	1e4b      	subs	r3, r1, #1
   25d1e:	b29b      	uxth	r3, r3
   25d20:	f10d 0106 	add.w	r1, sp, #6
   25d24:	4668      	mov	r0, sp
   25d26:	f7ff fd12 	bl	2574e <rlen_decode>
	if (rc != 0) {
   25d2a:	4607      	mov	r7, r0
   25d2c:	2800      	cmp	r0, #0
   25d2e:	d131      	bne.n	25d94 <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25d30:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25d34:	9b00      	ldr	r3, [sp, #0]
   25d36:	4413      	add	r3, r2
   25d38:	3301      	adds	r3, #1
   25d3a:	42b3      	cmp	r3, r6
   25d3c:	d82d      	bhi.n	25d9a <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25d3e:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25d40:	fa14 f383 	uxtah	r3, r4, r3
   25d44:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   25d46:	0a0b      	lsrs	r3, r1, #8
   25d48:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25d4c:	b29b      	uxth	r3, r3
   25d4e:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25d50:	3203      	adds	r2, #3
   25d52:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   25d54:	18d1      	adds	r1, r2, r3
   25d56:	42b1      	cmp	r1, r6
   25d58:	dc22      	bgt.n	25da0 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25d5a:	18a1      	adds	r1, r4, r2
   25d5c:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25d5e:	4413      	add	r3, r2
   25d60:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25d62:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   25d64:	786a      	ldrb	r2, [r5, #1]
   25d66:	3a01      	subs	r2, #1
   25d68:	b2d2      	uxtb	r2, r2
   25d6a:	2a01      	cmp	r2, #1
   25d6c:	d908      	bls.n	25d80 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25d6e:	2200      	movs	r2, #0
   25d70:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   25d72:	1af6      	subs	r6, r6, r3
   25d74:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   25d76:	4423      	add	r3, r4
   25d78:	612b      	str	r3, [r5, #16]
}
   25d7a:	4638      	mov	r0, r7
   25d7c:	b003      	add	sp, #12
   25d7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25d80:	0a0a      	lsrs	r2, r1, #8
   25d82:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   25d86:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25d88:	3302      	adds	r3, #2
   25d8a:	b29b      	uxth	r3, r3
   25d8c:	e7f1      	b.n	25d72 <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25d8e:	f06f 0715 	mvn.w	r7, #21
   25d92:	e7f2      	b.n	25d7a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25d94:	f06f 0715 	mvn.w	r7, #21
   25d98:	e7ef      	b.n	25d7a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25d9a:	f06f 0715 	mvn.w	r7, #21
   25d9e:	e7ec      	b.n	25d7a <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25da0:	f06f 0715 	mvn.w	r7, #21
   25da4:	e7e9      	b.n	25d7a <mqtt_unpack_publish+0x8a>

00025da6 <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   25da6:	2903      	cmp	r1, #3
   25da8:	d90d      	bls.n	25dc6 <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25daa:	7801      	ldrb	r1, [r0, #0]
   25dac:	2920      	cmp	r1, #32
   25dae:	d10d      	bne.n	25dcc <mqtt_unpack_connack+0x26>
   25db0:	7841      	ldrb	r1, [r0, #1]
   25db2:	2902      	cmp	r1, #2
   25db4:	d10d      	bne.n	25dd2 <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   25db6:	7881      	ldrb	r1, [r0, #2]
   25db8:	2901      	cmp	r1, #1
   25dba:	d80d      	bhi.n	25dd8 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   25dbc:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   25dbe:	78c2      	ldrb	r2, [r0, #3]
   25dc0:	701a      	strb	r2, [r3, #0]
	return 0;
   25dc2:	2000      	movs	r0, #0
   25dc4:	4770      	bx	lr
		return -EINVAL;
   25dc6:	f06f 0015 	mvn.w	r0, #21
   25dca:	4770      	bx	lr
		return -EINVAL;
   25dcc:	f06f 0015 	mvn.w	r0, #21
   25dd0:	4770      	bx	lr
   25dd2:	f06f 0015 	mvn.w	r0, #21
   25dd6:	4770      	bx	lr
		return -EINVAL;
   25dd8:	f06f 0015 	mvn.w	r0, #21
}
   25ddc:	4770      	bx	lr

00025dde <mqtt_pack_disconnect>:
{
   25dde:	b500      	push	{lr}
   25de0:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   25de2:	2300      	movs	r3, #0
   25de4:	9300      	str	r3, [sp, #0]
   25de6:	230e      	movs	r3, #14
   25de8:	f7ff fceb 	bl	257c2 <pack_zerolen>
}
   25dec:	b003      	add	sp, #12
   25dee:	f85d fb04 	ldr.w	pc, [sp], #4

00025df2 <mqtt_unpack_puback>:
{
   25df2:	b500      	push	{lr}
   25df4:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   25df6:	2300      	movs	r3, #0
   25df8:	9300      	str	r3, [sp, #0]
   25dfa:	2304      	movs	r3, #4
   25dfc:	f7ff fd0e 	bl	2581c <unpack_pktid_validate>
}
   25e00:	b003      	add	sp, #12
   25e02:	f85d fb04 	ldr.w	pc, [sp], #4

00025e06 <mqtt_unpack_pubrec>:
{
   25e06:	b500      	push	{lr}
   25e08:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   25e0a:	2300      	movs	r3, #0
   25e0c:	9300      	str	r3, [sp, #0]
   25e0e:	2305      	movs	r3, #5
   25e10:	f7ff fd04 	bl	2581c <unpack_pktid_validate>
}
   25e14:	b003      	add	sp, #12
   25e16:	f85d fb04 	ldr.w	pc, [sp], #4

00025e1a <mqtt_unpack_pubrel>:
{
   25e1a:	b500      	push	{lr}
   25e1c:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25e1e:	2302      	movs	r3, #2
   25e20:	9300      	str	r3, [sp, #0]
   25e22:	2306      	movs	r3, #6
   25e24:	f7ff fcfa 	bl	2581c <unpack_pktid_validate>
}
   25e28:	b003      	add	sp, #12
   25e2a:	f85d fb04 	ldr.w	pc, [sp], #4

00025e2e <mqtt_unpack_pubcomp>:
{
   25e2e:	b500      	push	{lr}
   25e30:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   25e32:	2300      	movs	r3, #0
   25e34:	9300      	str	r3, [sp, #0]
   25e36:	2307      	movs	r3, #7
   25e38:	f7ff fcf0 	bl	2581c <unpack_pktid_validate>
}
   25e3c:	b003      	add	sp, #12
   25e3e:	f85d fb04 	ldr.w	pc, [sp], #4

00025e42 <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   25e42:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   25e44:	2300      	movs	r3, #0
   25e46:	220d      	movs	r2, #13
   25e48:	f7ff fd1a 	bl	25880 <unpack_zerolen_validate>
}
   25e4c:	bd08      	pop	{r3, pc}
	...

00025e50 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25e50:	b5f0      	push	{r4, r5, r6, r7, lr}
   25e52:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   25e54:	1f13      	subs	r3, r2, #4
   25e56:	2b03      	cmp	r3, #3
   25e58:	d840      	bhi.n	25edc <mqtt_rx_pub_msgs+0x8c>
   25e5a:	e8df f003 	tbb	[pc, r3]
   25e5e:	0502      	.short	0x0502
   25e60:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25e62:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   25e64:	4f22      	ldr	r7, [pc, #136]	; (25ef0 <mqtt_rx_pub_msgs+0xa0>)
   25e66:	e007      	b.n	25e78 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25e68:	4e22      	ldr	r6, [pc, #136]	; (25ef4 <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25e6a:	4f23      	ldr	r7, [pc, #140]	; (25ef8 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25e6c:	e004      	b.n	25e78 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25e6e:	4e23      	ldr	r6, [pc, #140]	; (25efc <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25e70:	4f23      	ldr	r7, [pc, #140]	; (25f00 <mqtt_rx_pub_msgs+0xb0>)
		break;
   25e72:	e001      	b.n	25e78 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   25e74:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   25e76:	4f23      	ldr	r7, [pc, #140]	; (25f04 <mqtt_rx_pub_msgs+0xb4>)
   25e78:	4614      	mov	r4, r2
   25e7a:	460b      	mov	r3, r1
   25e7c:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25e7e:	f10d 0206 	add.w	r2, sp, #6
   25e82:	8989      	ldrh	r1, [r1, #12]
   25e84:	6898      	ldr	r0, [r3, #8]
   25e86:	47b8      	blx	r7
	if (rc != 0) {
   25e88:	bb58      	cbnz	r0, 25ee2 <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25e8a:	2c06      	cmp	r4, #6
   25e8c:	d012      	beq.n	25eb4 <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25e8e:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   25e92:	4622      	mov	r2, r4
   25e94:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25e98:	4628      	mov	r0, r5
   25e9a:	4798      	blx	r3
   25e9c:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25e9e:	bb1b      	cbnz	r3, 25ee8 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25ea0:	b12e      	cbz	r6, 25eae <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   25ea2:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25ea6:	4628      	mov	r0, r5
   25ea8:	47b0      	blx	r6
	if (rc != 0) {
   25eaa:	4603      	mov	r3, r0
   25eac:	b998      	cbnz	r0, 25ed6 <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25eae:	4618      	mov	r0, r3
   25eb0:	b003      	add	sp, #12
   25eb2:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   25eb4:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   25eb8:	2b01      	cmp	r3, #1
   25eba:	d009      	beq.n	25ed0 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   25ebc:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   25ec0:	2306      	movs	r3, #6
   25ec2:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   25ec6:	2100      	movs	r1, #0
   25ec8:	4628      	mov	r0, r5
   25eca:	47a0      	blx	r4
   25ecc:	4603      	mov	r3, r0
   25ece:	e7e6      	b.n	25e9e <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   25ed0:	f06f 0315 	mvn.w	r3, #21
   25ed4:	e7e3      	b.n	25e9e <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   25ed6:	f06f 0315 	mvn.w	r3, #21
   25eda:	e7e8      	b.n	25eae <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25edc:	f06f 0315 	mvn.w	r3, #21
   25ee0:	e7e5      	b.n	25eae <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25ee2:	f06f 0315 	mvn.w	r3, #21
   25ee6:	e7e2      	b.n	25eae <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   25ee8:	f06f 0315 	mvn.w	r3, #21
   25eec:	e7df      	b.n	25eae <mqtt_rx_pub_msgs+0x5e>
   25eee:	bf00      	nop
   25ef0:	00025df3 	.word	0x00025df3
   25ef4:	00025fe7 	.word	0x00025fe7
   25ef8:	00025e07 	.word	0x00025e07
   25efc:	00025fdd 	.word	0x00025fdd
   25f00:	00025e1b 	.word	0x00025e1b
   25f04:	00025e2f 	.word	0x00025e2f

00025f08 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   25f08:	4770      	bx	lr

00025f0a <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   25f0a:	b96a      	cbnz	r2, 25f28 <app_recv+0x1e>
   25f0c:	b161      	cbz	r1, 25f28 <app_recv+0x1e>
{
   25f0e:	b510      	push	{r4, lr}
   25f10:	460c      	mov	r4, r1
	return pkt->appdatalen;
   25f12:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   25f14:	b91a      	cbnz	r2, 25f1e <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   25f16:	4620      	mov	r0, r4
   25f18:	f7f7 fc9b 	bl	1d852 <net_pkt_unref>
   25f1c:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25f1e:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   25f22:	4618      	mov	r0, r3
   25f24:	4790      	blx	r2
   25f26:	e7f6      	b.n	25f16 <app_recv+0xc>
   25f28:	4770      	bx	lr

00025f2a <mqtt_tx_pub_msgs>:
{
   25f2a:	b570      	push	{r4, r5, r6, lr}
   25f2c:	b084      	sub	sp, #16
   25f2e:	4604      	mov	r4, r0
	switch (pkt_type) {
   25f30:	3a04      	subs	r2, #4
   25f32:	2a03      	cmp	r2, #3
   25f34:	d849      	bhi.n	25fca <mqtt_tx_pub_msgs+0xa0>
   25f36:	e8df f002 	tbb	[pc, r2]
   25f3a:	2c02      	.short	0x2c02
   25f3c:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25f3e:	460b      	mov	r3, r1
   25f40:	2204      	movs	r2, #4
   25f42:	f10d 010a 	add.w	r1, sp, #10
   25f46:	a803      	add	r0, sp, #12
   25f48:	f7ff fcb7 	bl	258ba <mqtt_pack_puback>
	if (rc != 0) {
   25f4c:	2800      	cmp	r0, #0
   25f4e:	d13f      	bne.n	25fd0 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25f50:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25f52:	2100      	movs	r1, #0
   25f54:	4620      	mov	r0, r4
   25f56:	f000 fe09 	bl	26b6c <net_app_get_net_pkt>
	if (tx == NULL) {
   25f5a:	4605      	mov	r5, r0
   25f5c:	2800      	cmp	r0, #0
   25f5e:	d03a      	beq.n	25fd6 <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25f60:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   25f64:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25f66:	aa03      	add	r2, sp, #12
   25f68:	4631      	mov	r1, r6
   25f6a:	f7f7 fdaa 	bl	1dac2 <net_pkt_append>
	if (rc != true) {
   25f6e:	4286      	cmp	r6, r0
   25f70:	d01f      	beq.n	25fb2 <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   25f72:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   25f76:	4628      	mov	r0, r5
   25f78:	f7f7 fc6b 	bl	1d852 <net_pkt_unref>
}
   25f7c:	4620      	mov	r0, r4
   25f7e:	b004      	add	sp, #16
   25f80:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   25f82:	460b      	mov	r3, r1
   25f84:	2204      	movs	r2, #4
   25f86:	f10d 010a 	add.w	r1, sp, #10
   25f8a:	a803      	add	r0, sp, #12
   25f8c:	f7ff fcb6 	bl	258fc <mqtt_pack_pubcomp>
		break;
   25f90:	e7dc      	b.n	25f4c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   25f92:	460b      	mov	r3, r1
   25f94:	2204      	movs	r2, #4
   25f96:	f10d 010a 	add.w	r1, sp, #10
   25f9a:	a803      	add	r0, sp, #12
   25f9c:	f7ff fc98 	bl	258d0 <mqtt_pack_pubrec>
		break;
   25fa0:	e7d4      	b.n	25f4c <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   25fa2:	460b      	mov	r3, r1
   25fa4:	2204      	movs	r2, #4
   25fa6:	f10d 010a 	add.w	r1, sp, #10
   25faa:	a803      	add	r0, sp, #12
   25fac:	f7ff fc9b 	bl	258e6 <mqtt_pack_pubrel>
		break;
   25fb0:	e7cc      	b.n	25f4c <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25fb2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25fb4:	2200      	movs	r2, #0
   25fb6:	9201      	str	r2, [sp, #4]
   25fb8:	9300      	str	r3, [sp, #0]
   25fba:	4613      	mov	r3, r2
   25fbc:	4629      	mov	r1, r5
   25fbe:	4620      	mov	r0, r4
   25fc0:	f000 fd58 	bl	26a74 <net_app_send_pkt>
	if (rc < 0) {
   25fc4:	1e04      	subs	r4, r0, #0
   25fc6:	dad9      	bge.n	25f7c <mqtt_tx_pub_msgs+0x52>
   25fc8:	e7d5      	b.n	25f76 <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   25fca:	f06f 0415 	mvn.w	r4, #21
   25fce:	e7d5      	b.n	25f7c <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   25fd0:	f06f 0415 	mvn.w	r4, #21
   25fd4:	e7d2      	b.n	25f7c <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   25fd6:	f06f 040b 	mvn.w	r4, #11
   25fda:	e7cf      	b.n	25f7c <mqtt_tx_pub_msgs+0x52>

00025fdc <mqtt_tx_pubcomp>:
{
   25fdc:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   25fde:	2207      	movs	r2, #7
   25fe0:	f7ff ffa3 	bl	25f2a <mqtt_tx_pub_msgs>
}
   25fe4:	bd08      	pop	{r3, pc}

00025fe6 <mqtt_tx_pubrel>:
{
   25fe6:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   25fe8:	2206      	movs	r2, #6
   25fea:	f7ff ff9e 	bl	25f2a <mqtt_tx_pub_msgs>
}
   25fee:	bd08      	pop	{r3, pc}

00025ff0 <mqtt_linearize_packet>:
{
   25ff0:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   25ff2:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   25ff4:	42aa      	cmp	r2, r5
   25ff6:	d820      	bhi.n	2603a <mqtt_linearize_packet+0x4a>
   25ff8:	2d80      	cmp	r5, #128	; 0x80
   25ffa:	d820      	bhi.n	2603e <mqtt_linearize_packet+0x4e>
   25ffc:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25ffe:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   26000:	4810      	ldr	r0, [pc, #64]	; (26044 <mqtt_linearize_packet+0x54>)
   26002:	f7f4 fe49 	bl	1ac98 <net_buf_alloc>
	if (data == NULL) {
   26006:	4606      	mov	r6, r0
   26008:	b180      	cbz	r0, 2602c <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   2600a:	68a1      	ldr	r1, [r4, #8]
   2600c:	460c      	mov	r4, r1
	size_t bytes = 0;
   2600e:	2200      	movs	r2, #0
   26010:	e002      	b.n	26018 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   26012:	89a3      	ldrh	r3, [r4, #12]
   26014:	441a      	add	r2, r3
		buf = buf->frags;
   26016:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   26018:	2c00      	cmp	r4, #0
   2601a:	d1fa      	bne.n	26012 <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   2601c:	b292      	uxth	r2, r2
   2601e:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   26020:	462b      	mov	r3, r5
   26022:	b292      	uxth	r2, r2
   26024:	4630      	mov	r0, r6
   26026:	f7f7 fcc7 	bl	1d9b8 <net_frag_linear_copy>
	if (rc != 0) {
   2602a:	b908      	cbnz	r0, 26030 <mqtt_linearize_packet+0x40>
}
   2602c:	4630      	mov	r0, r6
   2602e:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   26030:	4630      	mov	r0, r6
   26032:	f7f7 fc08 	bl	1d846 <net_pkt_frag_unref>
	return NULL;
   26036:	4626      	mov	r6, r4
   26038:	e7f8      	b.n	2602c <mqtt_linearize_packet+0x3c>
		return NULL;
   2603a:	2600      	movs	r6, #0
   2603c:	e7f6      	b.n	2602c <mqtt_linearize_packet+0x3c>
   2603e:	2600      	movs	r6, #0
   26040:	e7f4      	b.n	2602c <mqtt_linearize_packet+0x3c>
   26042:	bf00      	nop
   26044:	2000d260 	.word	0x2000d260

00026048 <mqtt_tx_connect>:
{
   26048:	b570      	push	{r4, r5, r6, lr}
   2604a:	b082      	sub	sp, #8
   2604c:	4604      	mov	r4, r0
   2604e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   26050:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   26052:	481d      	ldr	r0, [pc, #116]	; (260c8 <mqtt_tx_connect+0x80>)
   26054:	f7f4 fe20 	bl	1ac98 <net_buf_alloc>
	if (data == NULL) {
   26058:	b398      	cbz	r0, 260c2 <mqtt_tx_connect+0x7a>
   2605a:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   2605c:	7832      	ldrb	r2, [r6, #0]
   2605e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   26062:	f362 0300 	bfi	r3, r2, #0, #1
   26066:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   2606a:	4633      	mov	r3, r6
   2606c:	2280      	movs	r2, #128	; 0x80
   2606e:	f100 010c 	add.w	r1, r0, #12
   26072:	6880      	ldr	r0, [r0, #8]
   26074:	f7ff fc4d 	bl	25912 <mqtt_pack_connect>
	if (rc != 0) {
   26078:	b9c0      	cbnz	r0, 260ac <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2607a:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2607c:	2100      	movs	r1, #0
   2607e:	4620      	mov	r0, r4
   26080:	f000 fd74 	bl	26b6c <net_app_get_net_pkt>
	if (tx == NULL) {
   26084:	4606      	mov	r6, r0
   26086:	b1c8      	cbz	r0, 260bc <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   26088:	4629      	mov	r1, r5
   2608a:	f7f7 fc0c 	bl	1d8a6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2608e:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26090:	2200      	movs	r2, #0
   26092:	9201      	str	r2, [sp, #4]
   26094:	9300      	str	r3, [sp, #0]
   26096:	4613      	mov	r3, r2
   26098:	4631      	mov	r1, r6
   2609a:	4620      	mov	r0, r4
   2609c:	f000 fcea 	bl	26a74 <net_app_send_pkt>
	if (rc < 0) {
   260a0:	1e04      	subs	r4, r0, #0
   260a2:	da08      	bge.n	260b6 <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   260a4:	4630      	mov	r0, r6
   260a6:	f7f7 fbd4 	bl	1d852 <net_pkt_unref>
   260aa:	e004      	b.n	260b6 <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   260ac:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   260b0:	4628      	mov	r0, r5
   260b2:	f7f7 fbc8 	bl	1d846 <net_pkt_frag_unref>
}
   260b6:	4620      	mov	r0, r4
   260b8:	b002      	add	sp, #8
   260ba:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   260bc:	f06f 040b 	mvn.w	r4, #11
   260c0:	e7f6      	b.n	260b0 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   260c2:	f06f 040b 	mvn.w	r4, #11
   260c6:	e7f6      	b.n	260b6 <mqtt_tx_connect+0x6e>
   260c8:	2000d260 	.word	0x2000d260

000260cc <mqtt_tx_disconnect>:
{
   260cc:	b570      	push	{r4, r5, r6, lr}
   260ce:	b084      	sub	sp, #16
   260d0:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   260d2:	2202      	movs	r2, #2
   260d4:	f10d 010a 	add.w	r1, sp, #10
   260d8:	a803      	add	r0, sp, #12
   260da:	f7ff fe80 	bl	25dde <mqtt_pack_disconnect>
	if (rc != 0) {
   260de:	bb78      	cbnz	r0, 26140 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   260e0:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   260e2:	2100      	movs	r1, #0
   260e4:	4620      	mov	r0, r4
   260e6:	f000 fd41 	bl	26b6c <net_app_get_net_pkt>
	if (tx == NULL) {
   260ea:	4605      	mov	r5, r0
   260ec:	b358      	cbz	r0, 26146 <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   260ee:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   260f2:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   260f4:	aa03      	add	r2, sp, #12
   260f6:	4631      	mov	r1, r6
   260f8:	f7f7 fce3 	bl	1dac2 <net_pkt_append>
	if (rc != true) {
   260fc:	4286      	cmp	r6, r0
   260fe:	d007      	beq.n	26110 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   26100:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   26104:	4628      	mov	r0, r5
   26106:	f7f7 fba4 	bl	1d852 <net_pkt_unref>
}
   2610a:	4630      	mov	r0, r6
   2610c:	b004      	add	sp, #16
   2610e:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26110:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   26112:	2200      	movs	r2, #0
   26114:	9201      	str	r2, [sp, #4]
   26116:	9300      	str	r3, [sp, #0]
   26118:	4613      	mov	r3, r2
   2611a:	4629      	mov	r1, r5
   2611c:	4620      	mov	r0, r4
   2611e:	f000 fca9 	bl	26a74 <net_app_send_pkt>
	if (rc < 0) {
   26122:	1e06      	subs	r6, r0, #0
   26124:	dbee      	blt.n	26104 <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   26126:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2612a:	f36f 0341 	bfc	r3, #1, #1
   2612e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   26132:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   26136:	2b00      	cmp	r3, #0
   26138:	d0e7      	beq.n	2610a <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   2613a:	4620      	mov	r0, r4
   2613c:	4798      	blx	r3
   2613e:	e7e4      	b.n	2610a <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   26140:	f06f 0615 	mvn.w	r6, #21
   26144:	e7e1      	b.n	2610a <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   26146:	f06f 060b 	mvn.w	r6, #11
   2614a:	e7de      	b.n	2610a <mqtt_tx_disconnect+0x3e>

0002614c <mqtt_tx_puback>:
{
   2614c:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   2614e:	2204      	movs	r2, #4
   26150:	f7ff feeb 	bl	25f2a <mqtt_tx_pub_msgs>
}
   26154:	bd08      	pop	{r3, pc}

00026156 <mqtt_tx_pubrec>:
{
   26156:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   26158:	2205      	movs	r2, #5
   2615a:	f7ff fee6 	bl	25f2a <mqtt_tx_pub_msgs>
}
   2615e:	bd08      	pop	{r3, pc}

00026160 <mqtt_tx_publish>:
{
   26160:	b570      	push	{r4, r5, r6, lr}
   26162:	b082      	sub	sp, #8
   26164:	4605      	mov	r5, r0
   26166:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   26168:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2616a:	481a      	ldr	r0, [pc, #104]	; (261d4 <mqtt_tx_publish+0x74>)
   2616c:	f7f4 fd94 	bl	1ac98 <net_buf_alloc>
	if (data == NULL) {
   26170:	b360      	cbz	r0, 261cc <mqtt_tx_publish+0x6c>
   26172:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   26174:	4633      	mov	r3, r6
   26176:	89c2      	ldrh	r2, [r0, #14]
   26178:	f100 010c 	add.w	r1, r0, #12
   2617c:	6880      	ldr	r0, [r0, #8]
   2617e:	f7ff fd47 	bl	25c10 <mqtt_pack_publish>
	if (rc != 0) {
   26182:	b9c0      	cbnz	r0, 261b6 <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   26184:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   26186:	2100      	movs	r1, #0
   26188:	4628      	mov	r0, r5
   2618a:	f000 fcef 	bl	26b6c <net_app_get_net_pkt>
	if (tx == NULL) {
   2618e:	4606      	mov	r6, r0
   26190:	b1c8      	cbz	r0, 261c6 <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   26192:	4621      	mov	r1, r4
   26194:	f7f7 fb87 	bl	1d8a6 <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   26198:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   2619a:	2200      	movs	r2, #0
   2619c:	9201      	str	r2, [sp, #4]
   2619e:	9300      	str	r3, [sp, #0]
   261a0:	4613      	mov	r3, r2
   261a2:	4631      	mov	r1, r6
   261a4:	4628      	mov	r0, r5
   261a6:	f000 fc65 	bl	26a74 <net_app_send_pkt>
	if (rc < 0) {
   261aa:	1e05      	subs	r5, r0, #0
   261ac:	da08      	bge.n	261c0 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   261ae:	4630      	mov	r0, r6
   261b0:	f7f7 fb4f 	bl	1d852 <net_pkt_unref>
   261b4:	e004      	b.n	261c0 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   261b6:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   261ba:	4620      	mov	r0, r4
   261bc:	f7f7 fb43 	bl	1d846 <net_pkt_frag_unref>
}
   261c0:	4628      	mov	r0, r5
   261c2:	b002      	add	sp, #8
   261c4:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   261c6:	f06f 050b 	mvn.w	r5, #11
   261ca:	e7f6      	b.n	261ba <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   261cc:	f06f 050b 	mvn.w	r5, #11
   261d0:	e7f6      	b.n	261c0 <mqtt_tx_publish+0x60>
   261d2:	bf00      	nop
   261d4:	2000d260 	.word	0x2000d260

000261d8 <mqtt_rx_connack>:
{
   261d8:	b570      	push	{r4, r5, r6, lr}
   261da:	b082      	sub	sp, #8
   261dc:	4604      	mov	r4, r0
   261de:	4608      	mov	r0, r1
   261e0:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   261e2:	f10d 0307 	add.w	r3, sp, #7
   261e6:	f10d 0206 	add.w	r2, sp, #6
   261ea:	8989      	ldrh	r1, [r1, #12]
   261ec:	6880      	ldr	r0, [r0, #8]
   261ee:	f7ff fdda 	bl	25da6 <mqtt_unpack_connack>
	if (rc != 0) {
   261f2:	b998      	cbnz	r0, 2621c <mqtt_rx_connack+0x44>
   261f4:	4605      	mov	r5, r0
	switch (clean_session) {
   261f6:	2e01      	cmp	r6, #1
   261f8:	d113      	bne.n	26222 <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   261fa:	f89d 3007 	ldrb.w	r3, [sp, #7]
   261fe:	b99b      	cbnz	r3, 26228 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   26200:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   26204:	f043 0302 	orr.w	r3, r3, #2
   26208:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   2620c:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   26210:	b10b      	cbz	r3, 26216 <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   26212:	4620      	mov	r0, r4
   26214:	4798      	blx	r3
}
   26216:	4628      	mov	r0, r5
   26218:	b002      	add	sp, #8
   2621a:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   2621c:	f06f 0515 	mvn.w	r5, #21
   26220:	e7f9      	b.n	26216 <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   26222:	f06f 0515 	mvn.w	r5, #21
   26226:	e7f6      	b.n	26216 <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   26228:	f06f 0515 	mvn.w	r5, #21
	return rc;
   2622c:	e7f3      	b.n	26216 <mqtt_rx_connack+0x3e>

0002622e <mqtt_rx_puback>:
{
   2622e:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   26230:	2204      	movs	r2, #4
   26232:	f7ff fe0d 	bl	25e50 <mqtt_rx_pub_msgs>
}
   26236:	bd08      	pop	{r3, pc}

00026238 <mqtt_rx_pubcomp>:
{
   26238:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   2623a:	2207      	movs	r2, #7
   2623c:	f7ff fe08 	bl	25e50 <mqtt_rx_pub_msgs>
}
   26240:	bd08      	pop	{r3, pc}

00026242 <mqtt_rx_pubrec>:
{
   26242:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   26244:	2205      	movs	r2, #5
   26246:	f7ff fe03 	bl	25e50 <mqtt_rx_pub_msgs>
}
   2624a:	bd08      	pop	{r3, pc}

0002624c <mqtt_rx_pubrel>:
{
   2624c:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   2624e:	2206      	movs	r2, #6
   26250:	f7ff fdfe 	bl	25e50 <mqtt_rx_pub_msgs>
}
   26254:	bd08      	pop	{r3, pc}

00026256 <mqtt_rx_pingresp>:
{
   26256:	b508      	push	{r3, lr}
   26258:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   2625a:	8989      	ldrh	r1, [r1, #12]
   2625c:	6898      	ldr	r0, [r3, #8]
   2625e:	f7ff fdf0 	bl	25e42 <mqtt_unpack_pingresp>
	if (rc != 0) {
   26262:	4603      	mov	r3, r0
   26264:	b908      	cbnz	r0, 2626a <mqtt_rx_pingresp+0x14>
}
   26266:	4618      	mov	r0, r3
   26268:	bd08      	pop	{r3, pc}
		return -EINVAL;
   2626a:	f06f 0315 	mvn.w	r3, #21
   2626e:	e7fa      	b.n	26266 <mqtt_rx_pingresp+0x10>

00026270 <mqtt_rx_suback>:
{
   26270:	b530      	push	{r4, r5, lr}
   26272:	b085      	sub	sp, #20
   26274:	4604      	mov	r4, r0
	data = rx->data;
   26276:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   26278:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   2627a:	ab03      	add	r3, sp, #12
   2627c:	9301      	str	r3, [sp, #4]
   2627e:	2301      	movs	r3, #1
   26280:	9300      	str	r3, [sp, #0]
   26282:	f10d 0309 	add.w	r3, sp, #9
   26286:	f10d 020a 	add.w	r2, sp, #10
   2628a:	f7ff fc31 	bl	25af0 <mqtt_unpack_suback>
	if (rc != 0) {
   2628e:	b988      	cbnz	r0, 262b4 <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   26290:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   26294:	b18d      	cbz	r5, 262ba <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   26296:	ab03      	add	r3, sp, #12
   26298:	f89d 2009 	ldrb.w	r2, [sp, #9]
   2629c:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   262a0:	4620      	mov	r0, r4
   262a2:	47a8      	blx	r5
	if (rc != 0) {
   262a4:	4603      	mov	r3, r0
   262a6:	b910      	cbnz	r0, 262ae <mqtt_rx_suback+0x3e>
}
   262a8:	4618      	mov	r0, r3
   262aa:	b005      	add	sp, #20
   262ac:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   262ae:	f06f 0315 	mvn.w	r3, #21
   262b2:	e7f9      	b.n	262a8 <mqtt_rx_suback+0x38>
		return -EINVAL;
   262b4:	f06f 0315 	mvn.w	r3, #21
   262b8:	e7f6      	b.n	262a8 <mqtt_rx_suback+0x38>
		return -EINVAL;
   262ba:	f06f 0315 	mvn.w	r3, #21
   262be:	e7f3      	b.n	262a8 <mqtt_rx_suback+0x38>

000262c0 <mqtt_rx_publish>:
{
   262c0:	b530      	push	{r4, r5, lr}
   262c2:	b087      	sub	sp, #28
   262c4:	4604      	mov	r4, r0
   262c6:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   262c8:	466a      	mov	r2, sp
   262ca:	8989      	ldrh	r1, [r1, #12]
   262cc:	6898      	ldr	r0, [r3, #8]
   262ce:	f7ff fd0f 	bl	25cf0 <mqtt_unpack_publish>
	if (rc != 0) {
   262d2:	bb00      	cbnz	r0, 26316 <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   262d4:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   262d8:	2303      	movs	r3, #3
   262da:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   262de:	4669      	mov	r1, sp
   262e0:	4620      	mov	r0, r4
   262e2:	47a8      	blx	r5
	if (rc != 0) {
   262e4:	4602      	mov	r2, r0
   262e6:	b9c8      	cbnz	r0, 2631c <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   262e8:	f89d 3001 	ldrb.w	r3, [sp, #1]
   262ec:	2b01      	cmp	r3, #1
   262ee:	d00b      	beq.n	26308 <mqtt_rx_publish+0x48>
   262f0:	b13b      	cbz	r3, 26302 <mqtt_rx_publish+0x42>
   262f2:	2b02      	cmp	r3, #2
   262f4:	d115      	bne.n	26322 <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   262f6:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   262fa:	4620      	mov	r0, r4
   262fc:	f7ff ff2b 	bl	26156 <mqtt_tx_pubrec>
   26300:	4602      	mov	r2, r0
}
   26302:	4610      	mov	r0, r2
   26304:	b007      	add	sp, #28
   26306:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   26308:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   2630c:	4620      	mov	r0, r4
   2630e:	f7ff ff1d 	bl	2614c <mqtt_tx_puback>
   26312:	4602      	mov	r2, r0
		break;
   26314:	e7f5      	b.n	26302 <mqtt_rx_publish+0x42>
		return -EINVAL;
   26316:	f06f 0215 	mvn.w	r2, #21
   2631a:	e7f2      	b.n	26302 <mqtt_rx_publish+0x42>
		return -EINVAL;
   2631c:	f06f 0215 	mvn.w	r2, #21
   26320:	e7ef      	b.n	26302 <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   26322:	f06f 0215 	mvn.w	r2, #21
   26326:	e7ec      	b.n	26302 <mqtt_rx_publish+0x42>

00026328 <mqtt_parser>:
{
   26328:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2632a:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   2632c:	2202      	movs	r2, #2
   2632e:	f7ff fe5f 	bl	25ff0 <mqtt_linearize_packet>
	if (!data) {
   26332:	2800      	cmp	r0, #0
   26334:	d057      	beq.n	263e6 <mqtt_parser+0xbe>
   26336:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   26338:	6883      	ldr	r3, [r0, #8]
   2633a:	781b      	ldrb	r3, [r3, #0]
   2633c:	091b      	lsrs	r3, r3, #4
   2633e:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   26340:	3b02      	subs	r3, #2
   26342:	2b0b      	cmp	r3, #11
   26344:	d84c      	bhi.n	263e0 <mqtt_parser+0xb8>
   26346:	e8df f003 	tbb	[pc, r3]
   2634a:	3906      	.short	0x3906
   2634c:	2d3f2716 	.word	0x2d3f2716
   26350:	4b4b454b 	.word	0x4b4b454b
   26354:	334b      	.short	0x334b
		if (!ctx->connected) {
   26356:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   2635a:	f013 0f02 	tst.w	r3, #2
   2635e:	d002      	beq.n	26366 <mqtt_parser+0x3e>
			rc = -EINVAL;
   26360:	f06f 0515 	mvn.w	r5, #21
   26364:	e00c      	b.n	26380 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   26366:	f003 0201 	and.w	r2, r3, #1
   2636a:	4601      	mov	r1, r0
   2636c:	4630      	mov	r0, r6
   2636e:	f7ff ff33 	bl	261d8 <mqtt_rx_connack>
   26372:	4605      	mov	r5, r0
   26374:	e004      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   26376:	4601      	mov	r1, r0
   26378:	4630      	mov	r0, r6
   2637a:	f7ff ff58 	bl	2622e <mqtt_rx_puback>
   2637e:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   26380:	b12d      	cbz	r5, 2638e <mqtt_parser+0x66>
   26382:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   26386:	b113      	cbz	r3, 2638e <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   26388:	4639      	mov	r1, r7
   2638a:	4630      	mov	r0, r6
   2638c:	4798      	blx	r3
	net_pkt_frag_unref(data);
   2638e:	4620      	mov	r0, r4
   26390:	f7f7 fa59 	bl	1d846 <net_pkt_frag_unref>
}
   26394:	4628      	mov	r0, r5
   26396:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   26398:	4601      	mov	r1, r0
   2639a:	4630      	mov	r0, r6
   2639c:	f7ff ff51 	bl	26242 <mqtt_rx_pubrec>
   263a0:	4605      	mov	r5, r0
		break;
   263a2:	e7ed      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   263a4:	4601      	mov	r1, r0
   263a6:	4630      	mov	r0, r6
   263a8:	f7ff ff46 	bl	26238 <mqtt_rx_pubcomp>
   263ac:	4605      	mov	r5, r0
		break;
   263ae:	e7e7      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   263b0:	4601      	mov	r1, r0
   263b2:	4630      	mov	r0, r6
   263b4:	f7ff ff4f 	bl	26256 <mqtt_rx_pingresp>
   263b8:	4605      	mov	r5, r0
		break;
   263ba:	e7e1      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   263bc:	4601      	mov	r1, r0
   263be:	4630      	mov	r0, r6
   263c0:	f7ff ff7e 	bl	262c0 <mqtt_rx_publish>
   263c4:	4605      	mov	r5, r0
		break;
   263c6:	e7db      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   263c8:	4601      	mov	r1, r0
   263ca:	4630      	mov	r0, r6
   263cc:	f7ff ff3e 	bl	2624c <mqtt_rx_pubrel>
   263d0:	4605      	mov	r5, r0
		break;
   263d2:	e7d5      	b.n	26380 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   263d4:	4601      	mov	r1, r0
   263d6:	4630      	mov	r0, r6
   263d8:	f7ff ff4a 	bl	26270 <mqtt_rx_suback>
   263dc:	4605      	mov	r5, r0
		break;
   263de:	e7cf      	b.n	26380 <mqtt_parser+0x58>
		rc = -EINVAL;
   263e0:	f06f 0515 	mvn.w	r5, #21
   263e4:	e7cc      	b.n	26380 <mqtt_parser+0x58>
		return -ENOMEM;
   263e6:	f06f 050b 	mvn.w	r5, #11
   263ea:	e7d3      	b.n	26394 <mqtt_parser+0x6c>

000263ec <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   263ec:	b530      	push	{r4, r5, lr}
   263ee:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   263f0:	b348      	cbz	r0, 26446 <mqtt_connect+0x5a>
   263f2:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   263f4:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   263f8:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   263fc:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   263fe:	9004      	str	r0, [sp, #16]
   26400:	9103      	str	r1, [sp, #12]
   26402:	9202      	str	r2, [sp, #8]
   26404:	9301      	str	r3, [sp, #4]
   26406:	2300      	movs	r3, #0
   26408:	9300      	str	r3, [sp, #0]
   2640a:	2206      	movs	r2, #6
   2640c:	2101      	movs	r1, #1
   2640e:	f000 f913 	bl	26638 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   26412:	1e05      	subs	r5, r0, #0
   26414:	db0e      	blt.n	26434 <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   26416:	2300      	movs	r3, #0
   26418:	9300      	str	r3, [sp, #0]
   2641a:	4a0c      	ldr	r2, [pc, #48]	; (2644c <mqtt_connect+0x60>)
   2641c:	490c      	ldr	r1, [pc, #48]	; (26450 <mqtt_connect+0x64>)
   2641e:	4620      	mov	r0, r4
   26420:	f000 fb11 	bl	26a46 <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   26424:	1e05      	subs	r5, r0, #0
   26426:	db05      	blt.n	26434 <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   26428:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   2642a:	4620      	mov	r0, r4
   2642c:	f000 f9ec 	bl	26808 <net_app_connect>
	if (rc < 0) {
   26430:	1e05      	subs	r5, r0, #0
   26432:	da05      	bge.n	26440 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   26434:	4620      	mov	r0, r4
   26436:	f000 fbbd 	bl	26bb4 <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   2643a:	4620      	mov	r0, r4
   2643c:	f000 fab8 	bl	269b0 <net_app_release>

	return rc;
}
   26440:	4628      	mov	r0, r5
   26442:	b007      	add	sp, #28
   26444:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   26446:	f06f 050d 	mvn.w	r5, #13
   2644a:	e7f9      	b.n	26440 <mqtt_connect+0x54>
   2644c:	00025f0b 	.word	0x00025f0b
   26450:	00025f09 	.word	0x00025f09

00026454 <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   26454:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   26458:	f043 0301 	orr.w	r3, r3, #1
   2645c:	f36f 0341 	bfc	r3, #1, #1
   26460:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   26464:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   26468:	4b02      	ldr	r3, [pc, #8]	; (26474 <mqtt_init+0x20>)
   2646a:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   2646e:	2000      	movs	r0, #0
   26470:	4770      	bx	lr
   26472:	bf00      	nop
   26474:	00026329 	.word	0x00026329

00026478 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   26478:	b178      	cbz	r0, 2649a <mqtt_close+0x22>
{
   2647a:	b510      	push	{r4, lr}
   2647c:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   2647e:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26482:	f012 0f01 	tst.w	r2, #1
   26486:	d101      	bne.n	2648c <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   26488:	2000      	movs	r0, #0
}
   2648a:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   2648c:	f000 fb92 	bl	26bb4 <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   26490:	4620      	mov	r0, r4
   26492:	f000 fa8d 	bl	269b0 <net_app_release>
	return 0;
   26496:	2000      	movs	r0, #0
   26498:	bd10      	pop	{r4, pc}
		return -EFAULT;
   2649a:	f06f 000d 	mvn.w	r0, #13
   2649e:	4770      	bx	lr

000264a0 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   264a0:	b570      	push	{r4, r5, r6, lr}
   264a2:	460c      	mov	r4, r1
   264a4:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   264a6:	f7f4 fff5 	bl	1b494 <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   264aa:	4b20      	ldr	r3, [pc, #128]	; (2652c <net_app_init+0x8c>)
   264ac:	fb83 2306 	smull	r2, r3, r3, r6
   264b0:	17f5      	asrs	r5, r6, #31
   264b2:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   264b6:	b380      	cbz	r0, 2651a <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   264b8:	f014 0f02 	tst.w	r4, #2
   264bc:	d114      	bne.n	264e8 <net_app_init+0x48>
	int count = 0;
   264be:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   264c0:	f014 0f04 	tst.w	r4, #4
   264c4:	d000      	beq.n	264c8 <net_app_init+0x28>
		count++;
   264c6:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   264c8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   264cc:	4818      	ldr	r0, [pc, #96]	; (26530 <net_app_init+0x90>)
   264ce:	f002 ff93 	bl	293f8 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   264d2:	2e00      	cmp	r6, #0
   264d4:	db0a      	blt.n	264ec <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   264d6:	b166      	cbz	r6, 264f2 <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   264d8:	4a16      	ldr	r2, [pc, #88]	; (26534 <net_app_init+0x94>)
   264da:	fb82 3206 	smull	r3, r2, r2, r6
   264de:	17f3      	asrs	r3, r6, #31
   264e0:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   264e4:	3301      	adds	r3, #1
   264e6:	e007      	b.n	264f8 <net_app_init+0x58>
		count++;
   264e8:	2101      	movs	r1, #1
   264ea:	e7e9      	b.n	264c0 <net_app_init+0x20>
		count = -1;
   264ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   264f0:	e002      	b.n	264f8 <net_app_init+0x58>
		count = 0;
   264f2:	2300      	movs	r3, #0
   264f4:	e000      	b.n	264f8 <net_app_init+0x58>
   264f6:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   264f8:	1e5c      	subs	r4, r3, #1
   264fa:	b153      	cbz	r3, 26512 <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   264fc:	4629      	mov	r1, r5
   264fe:	480e      	ldr	r0, [pc, #56]	; (26538 <net_app_init+0x98>)
   26500:	f002 ff96 	bl	29430 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   26504:	2800      	cmp	r0, #0
   26506:	d0f6      	beq.n	264f6 <net_app_init+0x56>
	return sem->count;
   26508:	4b09      	ldr	r3, [pc, #36]	; (26530 <net_app_init+0x90>)
   2650a:	689a      	ldr	r2, [r3, #8]
   2650c:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   2650e:	2a00      	cmp	r2, #0
   26510:	d1f2      	bne.n	264f8 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   26512:	b92c      	cbnz	r4, 26520 <net_app_init+0x80>
   26514:	b936      	cbnz	r6, 26524 <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   26516:	2000      	movs	r0, #0
   26518:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   2651a:	f06f 0012 	mvn.w	r0, #18
   2651e:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   26520:	2000      	movs	r0, #0
   26522:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   26524:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   26528:	bd70      	pop	{r4, r5, r6, pc}
   2652a:	bf00      	nop
   2652c:	66666667 	.word	0x66666667
   26530:	2000255c 	.word	0x2000255c
   26534:	10624dd3 	.word	0x10624dd3
   26538:	2000d1b0 	.word	0x2000d1b0

0002653c <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   2653c:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   2653e:	f000 fb5b 	bl	26bf8 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   26542:	f247 5230 	movw	r2, #30000	; 0x7530
   26546:	2100      	movs	r1, #0
   26548:	4801      	ldr	r0, [pc, #4]	; (26550 <init_net_app+0x14>)
   2654a:	f7ff ffa9 	bl	264a0 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   2654e:	bd08      	pop	{r3, pc}
   26550:	00032cfc 	.word	0x00032cfc

00026554 <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   26554:	f06f 0015 	mvn.w	r0, #21
   26558:	4770      	bx	lr

0002655a <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   2655a:	b510      	push	{r4, lr}
   2655c:	4604      	mov	r4, r0
   2655e:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   26560:	461a      	mov	r2, r3
   26562:	b113      	cbz	r3, 2656a <set_remote_addr+0x10>
   26564:	880b      	ldrh	r3, [r1, #0]
   26566:	2b0a      	cmp	r3, #10
   26568:	d00e      	beq.n	26588 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   2656a:	b112      	cbz	r2, 26572 <set_remote_addr+0x18>
   2656c:	880b      	ldrh	r3, [r1, #0]
   2656e:	2b02      	cmp	r3, #2
   26570:	d012      	beq.n	26598 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   26572:	9b02      	ldr	r3, [sp, #8]
   26574:	221c      	movs	r2, #28
   26576:	4601      	mov	r1, r0
   26578:	4620      	mov	r0, r4
   2657a:	f7ff ffeb 	bl	26554 <try_resolve>
	if (ret < 0) {
   2657e:	2800      	cmp	r0, #0
   26580:	db0c      	blt.n	2659c <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   26582:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   26584:	2000      	movs	r0, #0
   26586:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   26588:	2218      	movs	r2, #24
   2658a:	f104 001c 	add.w	r0, r4, #28
   2658e:	f7d9 fe97 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   26592:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   26594:	2000      	movs	r0, #0
   26596:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   26598:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   2659c:	bd10      	pop	{r4, pc}

0002659e <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   2659e:	6803      	ldr	r3, [r0, #0]
   265a0:	b13b      	cbz	r3, 265b2 <close_net_ctx+0x14>
{
   265a2:	b510      	push	{r4, lr}
   265a4:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   265a6:	4618      	mov	r0, r3
   265a8:	f7f6 fcbe 	bl	1cf28 <net_context_put>
		ctx->ipv6.ctx = NULL;
   265ac:	2300      	movs	r3, #0
   265ae:	6023      	str	r3, [r4, #0]
   265b0:	bd10      	pop	{r4, pc}
   265b2:	4770      	bx	lr

000265b4 <get_port_number>:
	if (peer_addr_str[0] == '[') {
   265b4:	7803      	ldrb	r3, [r0, #0]
   265b6:	2b5b      	cmp	r3, #91	; 0x5b
   265b8:	d002      	beq.n	265c0 <get_port_number+0xc>
   265ba:	2300      	movs	r3, #0
   265bc:	4619      	mov	r1, r3
   265be:	e019      	b.n	265f4 <get_port_number+0x40>
{
   265c0:	b570      	push	{r4, r5, r6, lr}
   265c2:	460d      	mov	r5, r1
   265c4:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   265c6:	4913      	ldr	r1, [pc, #76]	; (26614 <get_port_number+0x60>)
   265c8:	f004 fd8a 	bl	2b0e0 <strstr>
		if (!ptr) {
   265cc:	4606      	mov	r6, r0
   265ce:	b1f0      	cbz	r0, 2660e <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   265d0:	1c61      	adds	r1, r4, #1
   265d2:	1a44      	subs	r4, r0, r1
   265d4:	2c2e      	cmp	r4, #46	; 0x2e
   265d6:	bfa8      	it	ge
   265d8:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   265da:	4622      	mov	r2, r4
   265dc:	4628      	mov	r0, r5
   265de:	f7d9 fe6f 	bl	2c0 <memcpy>
		buf[end] = '\0';
   265e2:	2100      	movs	r1, #0
   265e4:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   265e6:	220a      	movs	r2, #10
   265e8:	1cb0      	adds	r0, r6, #2
   265ea:	f004 ff19 	bl	2b420 <strtol>
   265ee:	b280      	uxth	r0, r0
		return port;
   265f0:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   265f2:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   265f4:	5cc2      	ldrb	r2, [r0, r3]
   265f6:	b11a      	cbz	r2, 26600 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   265f8:	2a3a      	cmp	r2, #58	; 0x3a
   265fa:	d1fa      	bne.n	265f2 <get_port_number+0x3e>
			count++;
   265fc:	3101      	adds	r1, #1
   265fe:	e7f8      	b.n	265f2 <get_port_number+0x3e>
	if (count == 1) {
   26600:	2901      	cmp	r1, #1
   26602:	d001      	beq.n	26608 <get_port_number+0x54>
	return 0;
   26604:	2000      	movs	r0, #0
   26606:	4770      	bx	lr
		return -EAFNOSUPPORT;
   26608:	f06f 0069 	mvn.w	r0, #105	; 0x69
   2660c:	4770      	bx	lr
			return -EINVAL;
   2660e:	f06f 0015 	mvn.w	r0, #21
   26612:	bd70      	pop	{r4, r5, r6, pc}
   26614:	00032d14 	.word	0x00032d14

00026618 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   26618:	b538      	push	{r3, r4, r5, lr}
   2661a:	460d      	mov	r5, r1
   2661c:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   2661e:	4613      	mov	r3, r2
   26620:	2200      	movs	r2, #0
   26622:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   26624:	f7f6 ff88 	bl	1d538 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   26628:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   2662a:	b11b      	cbz	r3, 26634 <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   2662c:	6f22      	ldr	r2, [r4, #112]	; 0x70
   2662e:	4629      	mov	r1, r5
   26630:	4620      	mov	r0, r4
   26632:	4798      	blx	r3
   26634:	bd38      	pop	{r3, r4, r5, pc}
	...

00026638 <net_app_init_client>:
{
   26638:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   2663c:	b09a      	sub	sp, #104	; 0x68
   2663e:	9e22      	ldr	r6, [sp, #136]	; 0x88
   26640:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   26644:	2800      	cmp	r0, #0
   26646:	f000 80c9 	beq.w	267dc <net_app_init_client+0x1a4>
   2664a:	4604      	mov	r4, r0
	if (ctx->is_init) {
   2664c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26650:	f010 0f01 	tst.w	r0, #1
   26654:	f040 80c5 	bne.w	267e2 <net_app_init_client+0x1aa>
   26658:	4699      	mov	r9, r3
   2665a:	4617      	mov	r7, r2
   2665c:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   2665e:	2218      	movs	r2, #24
   26660:	2100      	movs	r1, #0
   26662:	a802      	add	r0, sp, #8
   26664:	f004 f984 	bl	2a970 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   26668:	2218      	movs	r2, #24
   2666a:	2100      	movs	r1, #0
   2666c:	a808      	add	r0, sp, #32
   2666e:	f004 f97f 	bl	2a970 <memset>
	if (peer_addr) {
   26672:	2e00      	cmp	r6, #0
   26674:	d03c      	beq.n	266f0 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   26676:	2218      	movs	r2, #24
   26678:	4631      	mov	r1, r6
   2667a:	a808      	add	r0, sp, #32
   2667c:	f7d9 fe20 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   26680:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   26684:	f1b9 0f00 	cmp.w	r9, #0
   26688:	d05e      	beq.n	26748 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   2668a:	2218      	movs	r2, #24
   2668c:	4649      	mov	r1, r9
   2668e:	a802      	add	r0, sp, #8
   26690:	f7d9 fe16 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   26694:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   26698:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2669c:	429a      	cmp	r2, r3
   2669e:	f040 80a3 	bne.w	267e8 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   266a2:	2302      	movs	r3, #2
   266a4:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   266a8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   266aa:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   266ac:	4b54      	ldr	r3, [pc, #336]	; (26800 <net_app_init_client+0x1c8>)
   266ae:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   266b0:	4b54      	ldr	r3, [pc, #336]	; (26804 <net_app_init_client+0x1cc>)
   266b2:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   266b4:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   266b8:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   266bc:	ab02      	add	r3, sp, #8
   266be:	463a      	mov	r2, r7
   266c0:	4629      	mov	r1, r5
   266c2:	4620      	mov	r0, r4
   266c4:	f000 f949 	bl	2695a <_net_app_config_local_ctx>
	if (ret < 0) {
   266c8:	1e05      	subs	r5, r0, #0
   266ca:	db42      	blt.n	26752 <net_app_init_client+0x11a>
	if (peer_addr) {
   266cc:	2e00      	cmp	r6, #0
   266ce:	d04c      	beq.n	2676a <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   266d0:	8833      	ldrh	r3, [r6, #0]
   266d2:	2b02      	cmp	r3, #2
   266d4:	f000 808b 	beq.w	267ee <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   266d8:	2b0a      	cmp	r3, #10
   266da:	d03e      	beq.n	2675a <net_app_init_client+0x122>
	ctx->is_init = true;
   266dc:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   266e0:	f043 0301 	orr.w	r3, r3, #1
   266e4:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   266e8:	4628      	mov	r0, r5
   266ea:	b01a      	add	sp, #104	; 0x68
   266ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   266f0:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   266f2:	b333      	cbz	r3, 26742 <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   266f4:	222f      	movs	r2, #47	; 0x2f
   266f6:	a90e      	add	r1, sp, #56	; 0x38
   266f8:	4618      	mov	r0, r3
   266fa:	f7ff ff5b 	bl	265b4 <get_port_number>
		if (ret > 0) {
   266fe:	2800      	cmp	r0, #0
   26700:	dd17      	ble.n	26732 <net_app_init_client+0xfa>
			peer_port = ret;
   26702:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   26706:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   2670a:	4650      	mov	r0, sl
   2670c:	f7d9 fff8 	bl	700 <strlen>
   26710:	aa08      	add	r2, sp, #32
   26712:	4601      	mov	r1, r0
   26714:	4650      	mov	r0, sl
   26716:	f7f7 ff72 	bl	1e5fe <net_ipaddr_parse>
   2671a:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   2671c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   26720:	2b0a      	cmp	r3, #10
   26722:	d1af      	bne.n	26684 <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   26724:	ea4f 2318 	mov.w	r3, r8, lsr #8
   26728:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   2672c:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   26730:	e7a8      	b.n	26684 <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   26732:	222e      	movs	r2, #46	; 0x2e
   26734:	9923      	ldr	r1, [sp, #140]	; 0x8c
   26736:	a80e      	add	r0, sp, #56	; 0x38
   26738:	f004 fb36 	bl	2ada8 <strncpy>
	const char *base_peer_addr = peer_addr_str;
   2673c:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   26740:	e7e3      	b.n	2670a <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   26742:	f04f 0a00 	mov.w	sl, #0
   26746:	e79d      	b.n	26684 <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   26748:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   2674c:	f8ad 3008 	strh.w	r3, [sp, #8]
   26750:	e7a7      	b.n	266a2 <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   26752:	4620      	mov	r0, r4
   26754:	f7ff ff23 	bl	2659e <close_net_ctx>
		goto fail;
   26758:	e7c6      	b.n	266e8 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   2675a:	2218      	movs	r2, #24
   2675c:	4631      	mov	r1, r6
   2675e:	f104 001c 	add.w	r0, r4, #28
   26762:	f7d9 fdad 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   26766:	6364      	str	r4, [r4, #52]	; 0x34
   26768:	e7b8      	b.n	266dc <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   2676a:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2676c:	b363      	cbz	r3, 267c8 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   2676e:	9b25      	ldr	r3, [sp, #148]	; 0x94
   26770:	9300      	str	r3, [sp, #0]
   26772:	f11a 0300 	adds.w	r3, sl, #0
   26776:	bf18      	it	ne
   26778:	2301      	movne	r3, #1
   2677a:	aa0e      	add	r2, sp, #56	; 0x38
   2677c:	a908      	add	r1, sp, #32
   2677e:	4620      	mov	r0, r4
   26780:	f7ff feeb 	bl	2655a <set_remote_addr>
	if (ret < 0) {
   26784:	1e05      	subs	r5, r0, #0
   26786:	db25      	blt.n	267d4 <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   26788:	6b63      	ldr	r3, [r4, #52]	; 0x34
   2678a:	b39b      	cbz	r3, 267f4 <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   2678c:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   2678e:	b3a3      	cbz	r3, 267fa <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   26790:	8ba3      	ldrh	r3, [r4, #28]
   26792:	2b0a      	cmp	r3, #10
   26794:	d1a2      	bne.n	266dc <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   26796:	4625      	mov	r5, r4
   26798:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   2679c:	88e2      	ldrh	r2, [r4, #6]
   2679e:	2100      	movs	r1, #0
   267a0:	4628      	mov	r0, r5
   267a2:	f000 f8a3 	bl	268ec <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   267a6:	6821      	ldr	r1, [r4, #0]
   267a8:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   267ac:	9300      	str	r3, [sp, #0]
   267ae:	2318      	movs	r3, #24
   267b0:	462a      	mov	r2, r5
   267b2:	4620      	mov	r0, r4
   267b4:	f000 f886 	bl	268c4 <_net_app_set_net_ctx>
		if (ret < 0) {
   267b8:	1e05      	subs	r5, r0, #0
   267ba:	da8f      	bge.n	266dc <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   267bc:	6820      	ldr	r0, [r4, #0]
   267be:	f7f6 fbb3 	bl	1cf28 <net_context_put>
			ctx->ipv6.ctx = NULL;
   267c2:	2300      	movs	r3, #0
   267c4:	6023      	str	r3, [r4, #0]
   267c6:	e789      	b.n	266dc <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   267c8:	4620      	mov	r0, r4
   267ca:	f7ff fee8 	bl	2659e <close_net_ctx>
		ret = -EINVAL;
   267ce:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   267d2:	e789      	b.n	266e8 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   267d4:	4620      	mov	r0, r4
   267d6:	f7ff fee2 	bl	2659e <close_net_ctx>
		goto fail;
   267da:	e785      	b.n	266e8 <net_app_init_client+0xb0>
		return -EINVAL;
   267dc:	f06f 0515 	mvn.w	r5, #21
   267e0:	e782      	b.n	266e8 <net_app_init_client+0xb0>
		return -EALREADY;
   267e2:	f06f 0577 	mvn.w	r5, #119	; 0x77
   267e6:	e77f      	b.n	266e8 <net_app_init_client+0xb0>
			return -EINVAL;
   267e8:	f06f 0515 	mvn.w	r5, #21
   267ec:	e77c      	b.n	266e8 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   267ee:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   267f2:	e779      	b.n	266e8 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   267f4:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267f8:	e776      	b.n	266e8 <net_app_init_client+0xb0>
   267fa:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   267fe:	e773      	b.n	266e8 <net_app_init_client+0xb0>
   26800:	0001d4f7 	.word	0x0001d4f7
   26804:	0002689b 	.word	0x0002689b

00026808 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   26808:	b1d0      	cbz	r0, 26840 <net_app_connect+0x38>
{
   2680a:	b570      	push	{r4, r5, r6, lr}
   2680c:	b082      	sub	sp, #8
   2680e:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26810:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   26814:	f012 0f01 	tst.w	r2, #1
   26818:	d015      	beq.n	26846 <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   2681a:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   2681e:	2a02      	cmp	r2, #2
   26820:	d114      	bne.n	2684c <net_app_connect+0x44>
   26822:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26824:	2100      	movs	r1, #0
   26826:	f000 f8df 	bl	269e8 <_net_app_select_net_ctx>
	if (!net_ctx) {
   2682a:	b190      	cbz	r0, 26852 <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   2682c:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   2682e:	9401      	str	r4, [sp, #4]
   26830:	9500      	str	r5, [sp, #0]
   26832:	4b09      	ldr	r3, [pc, #36]	; (26858 <net_app_connect+0x50>)
   26834:	2218      	movs	r2, #24
   26836:	311c      	adds	r1, #28
   26838:	f7f6 fd4a 	bl	1d2d0 <net_context_connect>
		}
#endif
	}

	return ret;
}
   2683c:	b002      	add	sp, #8
   2683e:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   26840:	f06f 0015 	mvn.w	r0, #21
   26844:	4770      	bx	lr
		return -ENOENT;
   26846:	f06f 0001 	mvn.w	r0, #1
   2684a:	e7f7      	b.n	2683c <net_app_connect+0x34>
		return -EINVAL;
   2684c:	f06f 0015 	mvn.w	r0, #21
   26850:	e7f4      	b.n	2683c <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   26852:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26856:	e7f1      	b.n	2683c <net_app_connect+0x34>
   26858:	00026619 	.word	0x00026619

0002685c <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   2685c:	6340      	str	r0, [r0, #52]	; 0x34
   2685e:	4770      	bx	lr

00026860 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   26860:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   26864:	2802      	cmp	r0, #2
   26866:	d000      	beq.n	2686a <_app_send+0xa>
   26868:	4770      	bx	lr
{
   2686a:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   2686c:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   2686e:	b114      	cbz	r4, 26876 <_app_send+0x16>
   26870:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   26872:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   26874:	47a0      	blx	r4
   26876:	bd10      	pop	{r4, pc}

00026878 <setup_ipv6_ctx>:
{
   26878:	b510      	push	{r4, lr}
   2687a:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   2687c:	4603      	mov	r3, r0
   2687e:	200a      	movs	r0, #10
   26880:	f7f6 f8e6 	bl	1ca50 <net_context_get>
	if (ret < 0) {
   26884:	2800      	cmp	r0, #0
   26886:	db05      	blt.n	26894 <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   26888:	6823      	ldr	r3, [r4, #0]
   2688a:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   2688c:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   2688e:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   26890:	641a      	str	r2, [r3, #64]	; 0x40
}
   26892:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   26894:	2300      	movs	r3, #0
   26896:	6023      	str	r3, [r4, #0]
		return ret;
   26898:	bd10      	pop	{r4, pc}

0002689a <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   2689a:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   2689e:	2802      	cmp	r0, #2
   268a0:	d000      	beq.n	268a4 <_net_app_received+0xa>
   268a2:	4770      	bx	lr
{
   268a4:	b538      	push	{r3, r4, r5, lr}
   268a6:	4618      	mov	r0, r3
   268a8:	4614      	mov	r4, r2
		if (!pkt) {
   268aa:	b121      	cbz	r1, 268b6 <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   268ac:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   268ae:	b10d      	cbz	r5, 268b4 <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   268b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   268b2:	47a8      	blx	r5
   268b4:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   268b6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   268b8:	2b00      	cmp	r3, #0
   268ba:	d0fb      	beq.n	268b4 <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   268bc:	6f02      	ldr	r2, [r0, #112]	; 0x70
   268be:	4621      	mov	r1, r4
   268c0:	4798      	blx	r3
   268c2:	bd38      	pop	{r3, r4, r5, pc}

000268c4 <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   268c4:	b161      	cbz	r1, 268e0 <_net_app_set_net_ctx+0x1c>
{
   268c6:	b510      	push	{r4, lr}
   268c8:	4614      	mov	r4, r2
   268ca:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   268cc:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   268d0:	f012 0f01 	tst.w	r2, #1
   268d4:	d007      	beq.n	268e6 <_net_app_set_net_ctx+0x22>
   268d6:	461a      	mov	r2, r3
   268d8:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   268da:	f7f6 fb67 	bl	1cfac <net_context_bind>
	return ret;
   268de:	bd10      	pop	{r4, pc}
		return -ENOENT;
   268e0:	f06f 0001 	mvn.w	r0, #1
   268e4:	4770      	bx	lr
   268e6:	f06f 0001 	mvn.w	r0, #1
}
   268ea:	bd10      	pop	{r4, pc}

000268ec <_net_app_set_local_addr>:
{
   268ec:	b570      	push	{r4, r5, r6, lr}
   268ee:	b084      	sub	sp, #16
   268f0:	4604      	mov	r4, r0
	if (myaddr) {
   268f2:	b169      	cbz	r1, 26910 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   268f4:	8800      	ldrh	r0, [r0, #0]
   268f6:	2802      	cmp	r0, #2
   268f8:	d029      	beq.n	2694e <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   268fa:	280a      	cmp	r0, #10
   268fc:	d12a      	bne.n	26954 <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   268fe:	0a13      	lsrs	r3, r2, #8
   26900:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   26904:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   26906:	1d22      	adds	r2, r4, #4
   26908:	f7f7 fcc3 	bl	1e292 <net_addr_pton>
}
   2690c:	b004      	add	sp, #16
   2690e:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   26910:	8803      	ldrh	r3, [r0, #0]
   26912:	2b0a      	cmp	r3, #10
   26914:	d003      	beq.n	2691e <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   26916:	2b02      	cmp	r3, #2
   26918:	d016      	beq.n	26948 <_net_app_set_local_addr+0x5c>
	return 0;
   2691a:	2000      	movs	r0, #0
   2691c:	e7f6      	b.n	2690c <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   2691e:	f7f9 f959 	bl	1fbd4 <net_ipv6_unspecified_address>
   26922:	4601      	mov	r1, r0
   26924:	2000      	movs	r0, #0
   26926:	f7f5 faf9 	bl	1bf1c <net_if_ipv6_select_src_addr>
   2692a:	4603      	mov	r3, r0
   2692c:	466d      	mov	r5, sp
   2692e:	6800      	ldr	r0, [r0, #0]
   26930:	6859      	ldr	r1, [r3, #4]
   26932:	689a      	ldr	r2, [r3, #8]
   26934:	68db      	ldr	r3, [r3, #12]
   26936:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   26938:	466d      	mov	r5, sp
   2693a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   2693c:	6060      	str	r0, [r4, #4]
   2693e:	60a1      	str	r1, [r4, #8]
   26940:	60e2      	str	r2, [r4, #12]
   26942:	6123      	str	r3, [r4, #16]
	return 0;
   26944:	2000      	movs	r0, #0
   26946:	e7e1      	b.n	2690c <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   26948:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2694c:	e7de      	b.n	2690c <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   2694e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26952:	e7db      	b.n	2690c <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   26954:	f06f 0069 	mvn.w	r0, #105	; 0x69
   26958:	e7d8      	b.n	2690c <_net_app_set_local_addr+0x20>

0002695a <_net_app_config_local_ctx>:
{
   2695a:	b538      	push	{r3, r4, r5, lr}
   2695c:	4604      	mov	r4, r0
	if (!addr) {
   2695e:	b163      	cbz	r3, 2697a <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   26960:	881b      	ldrh	r3, [r3, #0]
   26962:	2b0a      	cmp	r3, #10
   26964:	d015      	beq.n	26992 <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   26966:	2b02      	cmp	r3, #2
   26968:	d01c      	beq.n	269a4 <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   2696a:	b9f3      	cbnz	r3, 269aa <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   2696c:	4620      	mov	r0, r4
   2696e:	f7ff ff83 	bl	26878 <setup_ipv6_ctx>
   26972:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   26974:	6364      	str	r4, [r4, #52]	; 0x34
}
   26976:	4628      	mov	r0, r5
   26978:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   2697a:	8883      	ldrh	r3, [r0, #4]
   2697c:	2b0a      	cmp	r3, #10
   2697e:	d000      	beq.n	26982 <_net_app_config_local_ctx+0x28>
   26980:	b96b      	cbnz	r3, 2699e <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26982:	4620      	mov	r0, r4
   26984:	f7ff ff78 	bl	26878 <setup_ipv6_ctx>
   26988:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   2698a:	4620      	mov	r0, r4
   2698c:	f7ff ff66 	bl	2685c <select_default_ctx>
   26990:	e7f1      	b.n	26976 <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   26992:	4620      	mov	r0, r4
   26994:	f7ff ff70 	bl	26878 <setup_ipv6_ctx>
   26998:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   2699a:	6364      	str	r4, [r4, #52]	; 0x34
   2699c:	e7eb      	b.n	26976 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   2699e:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   269a2:	e7e8      	b.n	26976 <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   269a4:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   269a8:	e7e5      	b.n	26976 <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   269aa:	f06f 0515 	mvn.w	r5, #21
	return ret;
   269ae:	e7e2      	b.n	26976 <_net_app_config_local_ctx+0x1c>

000269b0 <net_app_release>:
	if (!ctx) {
   269b0:	b1a0      	cbz	r0, 269dc <net_app_release+0x2c>
{
   269b2:	b510      	push	{r4, lr}
   269b4:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   269b6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   269ba:	f013 0f01 	tst.w	r3, #1
   269be:	d010      	beq.n	269e2 <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   269c0:	6800      	ldr	r0, [r0, #0]
   269c2:	b118      	cbz	r0, 269cc <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   269c4:	f7f6 fab0 	bl	1cf28 <net_context_put>
		ctx->ipv6.ctx = NULL;
   269c8:	2300      	movs	r3, #0
   269ca:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   269cc:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   269d0:	f36f 0300 	bfc	r3, #0, #1
   269d4:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   269d8:	2000      	movs	r0, #0
   269da:	bd10      	pop	{r4, pc}
		return -EINVAL;
   269dc:	f06f 0015 	mvn.w	r0, #21
   269e0:	4770      	bx	lr
		return -ENOENT;
   269e2:	f06f 0001 	mvn.w	r0, #1
}
   269e6:	bd10      	pop	{r4, pc}

000269e8 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   269e8:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   269ec:	2b02      	cmp	r3, #2
   269ee:	d128      	bne.n	26a42 <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   269f0:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   269f4:	2b11      	cmp	r3, #17
   269f6:	d009      	beq.n	26a0c <_net_app_select_net_ctx+0x24>
		if (!dst) {
   269f8:	b1c1      	cbz	r1, 26a2c <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   269fa:	880b      	ldrh	r3, [r1, #0]
   269fc:	2b02      	cmp	r3, #2
   269fe:	d01c      	beq.n	26a3a <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   26a00:	2b0a      	cmp	r3, #10
   26a02:	d016      	beq.n	26a32 <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   26a04:	b9db      	cbnz	r3, 26a3e <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   26a06:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26a08:	6818      	ldr	r0, [r3, #0]
   26a0a:	4770      	bx	lr
		if (!dst) {
   26a0c:	b131      	cbz	r1, 26a1c <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   26a0e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26a12:	f013 0f02 	tst.w	r3, #2
   26a16:	d0f0      	beq.n	269fa <_net_app_select_net_ctx+0x12>
				return NULL;
   26a18:	2000      	movs	r0, #0
   26a1a:	4770      	bx	lr
			if (ctx->is_tls) {
   26a1c:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26a20:	f013 0f02 	tst.w	r3, #2
   26a24:	d107      	bne.n	26a36 <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   26a26:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26a28:	6818      	ldr	r0, [r3, #0]
   26a2a:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   26a2c:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26a2e:	6818      	ldr	r0, [r3, #0]
   26a30:	4770      	bx	lr
				return ctx->ipv6.ctx;
   26a32:	6800      	ldr	r0, [r0, #0]
   26a34:	4770      	bx	lr
				return NULL;
   26a36:	2000      	movs	r0, #0
   26a38:	4770      	bx	lr
				return NULL;
   26a3a:	2000      	movs	r0, #0
   26a3c:	4770      	bx	lr
	return NULL;
   26a3e:	2000      	movs	r0, #0
   26a40:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   26a42:	2000      	movs	r0, #0
}
   26a44:	4770      	bx	lr

00026a46 <net_app_set_cb>:
	if (!ctx) {
   26a46:	b170      	cbz	r0, 26a66 <net_app_set_cb+0x20>
{
   26a48:	b410      	push	{r4}
   26a4a:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   26a4c:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26a50:	f010 0f01 	tst.w	r0, #1
   26a54:	d00a      	beq.n	26a6c <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   26a56:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   26a58:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   26a5a:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   26a5c:	9b01      	ldr	r3, [sp, #4]
   26a5e:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   26a60:	2000      	movs	r0, #0
}
   26a62:	bc10      	pop	{r4}
   26a64:	4770      	bx	lr
		return -EINVAL;
   26a66:	f06f 0015 	mvn.w	r0, #21
   26a6a:	4770      	bx	lr
		return -ENOENT;
   26a6c:	f06f 0001 	mvn.w	r0, #1
   26a70:	e7f7      	b.n	26a62 <net_app_set_cb+0x1c>
	...

00026a74 <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   26a74:	2800      	cmp	r0, #0
   26a76:	d064      	beq.n	26b42 <net_app_send_pkt+0xce>
{
   26a78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26a7c:	b08a      	sub	sp, #40	; 0x28
   26a7e:	460d      	mov	r5, r1
   26a80:	4616      	mov	r6, r2
   26a82:	461f      	mov	r7, r3
   26a84:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26a86:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26a8a:	f013 0f01 	tst.w	r3, #1
   26a8e:	d05b      	beq.n	26b48 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   26a90:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   26a92:	b188      	cbz	r0, 26ab8 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   26a94:	f8d1 e008 	ldr.w	lr, [r1, #8]
   26a98:	4673      	mov	r3, lr
	size_t bytes = 0;
   26a9a:	2100      	movs	r1, #0
   26a9c:	e002      	b.n	26aa4 <net_app_send_pkt+0x30>
		bytes += buf->len;
   26a9e:	899a      	ldrh	r2, [r3, #12]
   26aa0:	4411      	add	r1, r2
		buf = buf->frags;
   26aa2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26aa4:	2b00      	cmp	r3, #0
   26aa6:	d1fa      	bne.n	26a9e <net_app_send_pkt+0x2a>
   26aa8:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   26aaa:	2900      	cmp	r1, #0
   26aac:	dd0d      	ble.n	26aca <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   26aae:	f10e 0008 	add.w	r0, lr, #8
   26ab2:	f7f4 f9f8 	bl	1aea6 <net_buf_simple_pull>
   26ab6:	e008      	b.n	26aca <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   26ab8:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   26aba:	2200      	movs	r2, #0
   26abc:	e002      	b.n	26ac4 <net_app_send_pkt+0x50>
		bytes += buf->len;
   26abe:	8999      	ldrh	r1, [r3, #12]
   26ac0:	440a      	add	r2, r1
		buf = buf->frags;
   26ac2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   26ac4:	2b00      	cmp	r3, #0
   26ac6:	d1fa      	bne.n	26abe <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   26ac8:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   26aca:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   26ace:	2b11      	cmp	r3, #17
   26ad0:	d00e      	beq.n	26af0 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   26ad2:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   26ad6:	9402      	str	r4, [sp, #8]
   26ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
   26ada:	9301      	str	r3, [sp, #4]
   26adc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   26ade:	9300      	str	r3, [sp, #0]
   26ae0:	4b21      	ldr	r3, [pc, #132]	; (26b68 <net_app_send_pkt+0xf4>)
   26ae2:	463a      	mov	r2, r7
   26ae4:	4631      	mov	r1, r6
   26ae6:	4628      	mov	r0, r5
   26ae8:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   26aea:	b00a      	add	sp, #40	; 0x28
   26aec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   26af0:	b1de      	cbz	r6, 26b2a <net_app_send_pkt+0xb6>
	return pkt->family;
   26af2:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26af6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26afa:	2b02      	cmp	r3, #2
   26afc:	d02d      	beq.n	26b5a <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   26afe:	2b0a      	cmp	r3, #10
   26b00:	d12e      	bne.n	26b60 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   26b02:	af04      	add	r7, sp, #16
   26b04:	6830      	ldr	r0, [r6, #0]
   26b06:	6871      	ldr	r1, [r6, #4]
   26b08:	68b2      	ldr	r2, [r6, #8]
   26b0a:	68f3      	ldr	r3, [r6, #12]
   26b0c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   26b0e:	6930      	ldr	r0, [r6, #16]
   26b10:	6971      	ldr	r1, [r6, #20]
   26b12:	c703      	stmia	r7!, {r0, r1}
   26b14:	af04      	add	r7, sp, #16
   26b16:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26b18:	61e0      	str	r0, [r4, #28]
   26b1a:	6221      	str	r1, [r4, #32]
   26b1c:	6262      	str	r2, [r4, #36]	; 0x24
   26b1e:	62a3      	str	r3, [r4, #40]	; 0x28
   26b20:	cf03      	ldmia	r7!, {r0, r1}
   26b22:	62e0      	str	r0, [r4, #44]	; 0x2c
   26b24:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   26b26:	2718      	movs	r7, #24
   26b28:	e7d3      	b.n	26ad2 <net_app_send_pkt+0x5e>
   26b2a:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26b2e:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   26b32:	2b02      	cmp	r3, #2
   26b34:	d00b      	beq.n	26b4e <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   26b36:	2b0a      	cmp	r3, #10
   26b38:	d10c      	bne.n	26b54 <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   26b3a:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   26b3e:	2718      	movs	r7, #24
   26b40:	e7c7      	b.n	26ad2 <net_app_send_pkt+0x5e>
		return -EINVAL;
   26b42:	f06f 0015 	mvn.w	r0, #21
   26b46:	4770      	bx	lr
		return -ENOENT;
   26b48:	f06f 0001 	mvn.w	r0, #1
   26b4c:	e7cd      	b.n	26aea <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26b4e:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b52:	e7ca      	b.n	26aea <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26b54:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b58:	e7c7      	b.n	26aea <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26b5a:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b5e:	e7c4      	b.n	26aea <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26b60:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26b64:	e7c1      	b.n	26aea <net_app_send_pkt+0x76>
   26b66:	bf00      	nop
   26b68:	00026861 	.word	0x00026861

00026b6c <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   26b6c:	b510      	push	{r4, lr}
   26b6e:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26b70:	2300      	movs	r3, #0
   26b72:	9300      	str	r3, [sp, #0]
   26b74:	9301      	str	r3, [sp, #4]
   26b76:	9302      	str	r3, [sp, #8]
   26b78:	9303      	str	r3, [sp, #12]
   26b7a:	9304      	str	r3, [sp, #16]
   26b7c:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   26b7e:	b198      	cbz	r0, 26ba8 <net_app_get_net_pkt+0x3c>
   26b80:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   26b82:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26b86:	f010 0f01 	tst.w	r0, #1
   26b8a:	d00f      	beq.n	26bac <net_app_get_net_pkt+0x40>
   26b8c:	4618      	mov	r0, r3
   26b8e:	4614      	mov	r4, r2
   26b90:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   26b92:	a906      	add	r1, sp, #24
   26b94:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   26b98:	f7ff ff26 	bl	269e8 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26b9c:	b140      	cbz	r0, 26bb0 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   26b9e:	4621      	mov	r1, r4
   26ba0:	f7f6 fe24 	bl	1d7ec <net_pkt_get_tx>
}
   26ba4:	b006      	add	sp, #24
   26ba6:	bd10      	pop	{r4, pc}
		return NULL;
   26ba8:	2000      	movs	r0, #0
   26baa:	e7fb      	b.n	26ba4 <net_app_get_net_pkt+0x38>
		return NULL;
   26bac:	2000      	movs	r0, #0
   26bae:	e7f9      	b.n	26ba4 <net_app_get_net_pkt+0x38>
		return NULL;
   26bb0:	2000      	movs	r0, #0
   26bb2:	e7f7      	b.n	26ba4 <net_app_get_net_pkt+0x38>

00026bb4 <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   26bb4:	b1c0      	cbz	r0, 26be8 <net_app_close+0x34>
{
   26bb6:	b538      	push	{r3, r4, r5, lr}
   26bb8:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   26bba:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26bbe:	f013 0f01 	tst.w	r3, #1
   26bc2:	d014      	beq.n	26bee <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   26bc4:	2100      	movs	r1, #0
   26bc6:	f7ff ff0f 	bl	269e8 <_net_app_select_net_ctx>
   26bca:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   26bcc:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   26bce:	b11b      	cbz	r3, 26bd8 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   26bd0:	6f22      	ldr	r2, [r4, #112]	; 0x70
   26bd2:	2100      	movs	r1, #0
   26bd4:	4620      	mov	r0, r4
   26bd6:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   26bd8:	b165      	cbz	r5, 26bf4 <net_app_close+0x40>
		net_ctx->net_app = NULL;
   26bda:	2400      	movs	r4, #0
   26bdc:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   26bde:	4628      	mov	r0, r5
   26be0:	f7f6 f9a2 	bl	1cf28 <net_context_put>
	}

	return 0;
   26be4:	4620      	mov	r0, r4
   26be6:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   26be8:	f06f 0015 	mvn.w	r0, #21
   26bec:	4770      	bx	lr
		return -ENOENT;
   26bee:	f06f 0001 	mvn.w	r0, #1
   26bf2:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   26bf4:	2000      	movs	r0, #0
}
   26bf6:	bd38      	pop	{r3, r4, r5, pc}

00026bf8 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   26bf8:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   26bfa:	2000      	movs	r0, #0
   26bfc:	f7df fdea 	bl	67d4 <bt_enable>
	if (err < 0 && err != -EALREADY) {
   26c00:	1e03      	subs	r3, r0, #0
   26c02:	db14      	blt.n	26c2e <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   26c04:	4810      	ldr	r0, [pc, #64]	; (26c48 <_net_app_bt_setup+0x50>)
   26c06:	f001 f939 	bl	27e7c <device_get_binding>
	if (!dev) {
   26c0a:	b1b8      	cbz	r0, 26c3c <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   26c0c:	f7f4 fc30 	bl	1b470 <net_if_lookup_by_dev>
	if (!iface) {
   26c10:	4604      	mov	r4, r0
   26c12:	b1b0      	cbz	r0, 26c42 <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   26c14:	480d      	ldr	r0, [pc, #52]	; (26c4c <_net_app_bt_setup+0x54>)
   26c16:	f7e3 fcf7 	bl	a608 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   26c1a:	2303      	movs	r3, #3
   26c1c:	4a0c      	ldr	r2, [pc, #48]	; (26c50 <_net_app_bt_setup+0x58>)
   26c1e:	4621      	mov	r1, r4
   26c20:	480c      	ldr	r0, [pc, #48]	; (26c54 <_net_app_bt_setup+0x5c>)
   26c22:	f7f7 fe6b 	bl	1e8fc <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   26c26:	4603      	mov	r3, r0
   26c28:	b928      	cbnz	r0, 26c36 <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   26c2a:	4618      	mov	r0, r3
   26c2c:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   26c2e:	f113 0f78 	cmn.w	r3, #120	; 0x78
   26c32:	d1fa      	bne.n	26c2a <_net_app_bt_setup+0x32>
   26c34:	e7e6      	b.n	26c04 <_net_app_bt_setup+0xc>
		return -EINVAL;
   26c36:	f06f 0315 	mvn.w	r3, #21
   26c3a:	e7f6      	b.n	26c2a <_net_app_bt_setup+0x32>
		return -ENODEV;
   26c3c:	f06f 0312 	mvn.w	r3, #18
   26c40:	e7f3      	b.n	26c2a <_net_app_bt_setup+0x32>
		return -EINVAL;
   26c42:	f06f 0315 	mvn.w	r3, #21
   26c46:	e7f0      	b.n	26c2a <_net_app_bt_setup+0x32>
   26c48:	000319f8 	.word	0x000319f8
   26c4c:	2000c624 	.word	0x2000c624
   26c50:	00031e20 	.word	0x00031e20
   26c54:	61550001 	.word	0x61550001

00026c58 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26c58:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26c5a:	4802      	ldr	r0, [pc, #8]	; (26c64 <shell_run+0xc>)
   26c5c:	f000 fbbe 	bl	273dc <shell_init>
	return 0;
}
   26c60:	2000      	movs	r0, #0
   26c62:	bd08      	pop	{r3, pc}
   26c64:	00032d18 	.word	0x00032d18

00026c68 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26c68:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26c6a:	4b0f      	ldr	r3, [pc, #60]	; (26ca8 <get_prompt+0x40>)
   26c6c:	681b      	ldr	r3, [r3, #0]
   26c6e:	b123      	cbz	r3, 26c7a <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26c70:	4798      	blx	r3
		if (str) {
   26c72:	4603      	mov	r3, r0
   26c74:	b108      	cbz	r0, 26c7a <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   26c76:	4618      	mov	r0, r3
   26c78:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26c7a:	4b0c      	ldr	r3, [pc, #48]	; (26cac <get_prompt+0x44>)
   26c7c:	681b      	ldr	r3, [r3, #0]
   26c7e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26c82:	d00c      	beq.n	26c9e <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   26c84:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26c88:	009a      	lsls	r2, r3, #2
   26c8a:	4b09      	ldr	r3, [pc, #36]	; (26cb0 <get_prompt+0x48>)
   26c8c:	4413      	add	r3, r2
   26c8e:	689b      	ldr	r3, [r3, #8]
   26c90:	b143      	cbz	r3, 26ca4 <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   26c92:	4798      	blx	r3
			if (ret) {
   26c94:	4603      	mov	r3, r0
   26c96:	2800      	cmp	r0, #0
   26c98:	d1ed      	bne.n	26c76 <get_prompt+0xe>
		return default_module_prompt;
   26c9a:	4b06      	ldr	r3, [pc, #24]	; (26cb4 <get_prompt+0x4c>)
   26c9c:	e7eb      	b.n	26c76 <get_prompt+0xe>
	return prompt;
   26c9e:	4b06      	ldr	r3, [pc, #24]	; (26cb8 <get_prompt+0x50>)
   26ca0:	681b      	ldr	r3, [r3, #0]
   26ca2:	e7e8      	b.n	26c76 <get_prompt+0xe>
		return default_module_prompt;
   26ca4:	4b03      	ldr	r3, [pc, #12]	; (26cb4 <get_prompt+0x4c>)
   26ca6:	e7e6      	b.n	26c76 <get_prompt+0xe>
   26ca8:	20002578 	.word	0x20002578
   26cac:	2000c630 	.word	0x2000c630
   26cb0:	2000d0f4 	.word	0x2000d0f4
   26cb4:	20002728 	.word	0x20002728
   26cb8:	20002740 	.word	0x20002740

00026cbc <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   26cbc:	2801      	cmp	r0, #1
   26cbe:	d001      	beq.n	26cc4 <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   26cc0:	2000      	movs	r0, #0
   26cc2:	4770      	bx	lr
		default_module = -1;
   26cc4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26cc8:	4b01      	ldr	r3, [pc, #4]	; (26cd0 <exit_module+0x14>)
   26cca:	601a      	str	r2, [r3, #0]
   26ccc:	e7f8      	b.n	26cc0 <exit_module+0x4>
   26cce:	bf00      	nop
   26cd0:	2000c630 	.word	0x2000c630

00026cd4 <print_module_commands>:
{
   26cd4:	b538      	push	{r3, r4, r5, lr}
   26cd6:	4605      	mov	r5, r0
	printk("help\n");
   26cd8:	480a      	ldr	r0, [pc, #40]	; (26d04 <print_module_commands+0x30>)
   26cda:	f7dc f997 	bl	300c <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26cde:	2400      	movs	r4, #0
   26ce0:	e003      	b.n	26cea <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   26ce2:	4809      	ldr	r0, [pc, #36]	; (26d08 <print_module_commands+0x34>)
   26ce4:	f7dc f992 	bl	300c <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26ce8:	3401      	adds	r4, #1
   26cea:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26cee:	009a      	lsls	r2, r3, #2
   26cf0:	4b06      	ldr	r3, [pc, #24]	; (26d0c <print_module_commands+0x38>)
   26cf2:	4413      	add	r3, r2
   26cf4:	6859      	ldr	r1, [r3, #4]
   26cf6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26cfa:	0093      	lsls	r3, r2, #2
   26cfc:	58c9      	ldr	r1, [r1, r3]
   26cfe:	2900      	cmp	r1, #0
   26d00:	d1ef      	bne.n	26ce2 <print_module_commands+0xe>
}
   26d02:	bd38      	pop	{r3, r4, r5, pc}
   26d04:	00032dd4 	.word	0x00032dd4
   26d08:	00031ff8 	.word	0x00031ff8
   26d0c:	2000d0f4 	.word	0x2000d0f4

00026d10 <line2argv>:
{
   26d10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   26d12:	4604      	mov	r4, r0
   26d14:	460e      	mov	r6, r1
   26d16:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26d18:	f7d9 fcf2 	bl	700 <strlen>
   26d1c:	b918      	cbnz	r0, 26d26 <line2argv+0x16>
   26d1e:	4605      	mov	r5, r0
}
   26d20:	4628      	mov	r0, r5
   26d22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   26d24:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   26d26:	7823      	ldrb	r3, [r4, #0]
   26d28:	2b20      	cmp	r3, #32
   26d2a:	d0fb      	beq.n	26d24 <line2argv+0x14>
	if (!*str) {
   26d2c:	b30b      	cbz	r3, 26d72 <line2argv+0x62>
	argv[argc++] = str;
   26d2e:	6034      	str	r4, [r6, #0]
   26d30:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   26d32:	e00a      	b.n	26d4a <line2argv+0x3a>
			str++;
   26d34:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   26d36:	7823      	ldrb	r3, [r4, #0]
   26d38:	2b20      	cmp	r3, #32
   26d3a:	d0fb      	beq.n	26d34 <line2argv+0x24>
		if (!*str) {
   26d3c:	b1ab      	cbz	r3, 26d6a <line2argv+0x5a>
		argv[argc++] = str;
   26d3e:	1c6b      	adds	r3, r5, #1
   26d40:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   26d44:	42bb      	cmp	r3, r7
   26d46:	d00a      	beq.n	26d5e <line2argv+0x4e>
		argv[argc++] = str;
   26d48:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26d4a:	2120      	movs	r1, #32
   26d4c:	4620      	mov	r0, r4
   26d4e:	f003 ff07 	bl	2ab60 <strchr>
   26d52:	4603      	mov	r3, r0
   26d54:	b148      	cbz	r0, 26d6a <line2argv+0x5a>
		*str++ = '\0';
   26d56:	1c5c      	adds	r4, r3, #1
   26d58:	2200      	movs	r2, #0
   26d5a:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26d5c:	e7eb      	b.n	26d36 <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26d5e:	1e79      	subs	r1, r7, #1
   26d60:	4805      	ldr	r0, [pc, #20]	; (26d78 <line2argv+0x68>)
   26d62:	f7dc f953 	bl	300c <printk>
			return 0;
   26d66:	2500      	movs	r5, #0
   26d68:	e7da      	b.n	26d20 <line2argv+0x10>
	argv[argc] = NULL;
   26d6a:	2300      	movs	r3, #0
   26d6c:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26d70:	e7d6      	b.n	26d20 <line2argv+0x10>
		return 0;
   26d72:	2500      	movs	r5, #0
   26d74:	e7d4      	b.n	26d20 <line2argv+0x10>
   26d76:	bf00      	nop
   26d78:	00032db4 	.word	0x00032db4

00026d7c <get_destination_module>:
{
   26d7c:	b538      	push	{r3, r4, r5, lr}
   26d7e:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26d80:	2400      	movs	r4, #0
   26d82:	4a0c      	ldr	r2, [pc, #48]	; (26db4 <get_destination_module+0x38>)
   26d84:	4b0c      	ldr	r3, [pc, #48]	; (26db8 <get_destination_module+0x3c>)
   26d86:	1a9b      	subs	r3, r3, r2
   26d88:	109b      	asrs	r3, r3, #2
   26d8a:	4a0c      	ldr	r2, [pc, #48]	; (26dbc <get_destination_module+0x40>)
   26d8c:	fb02 f303 	mul.w	r3, r2, r3
   26d90:	429c      	cmp	r4, r3
   26d92:	da0b      	bge.n	26dac <get_destination_module+0x30>
		if (!strncmp(module_str,
   26d94:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26d98:	0093      	lsls	r3, r2, #2
   26d9a:	2214      	movs	r2, #20
   26d9c:	4905      	ldr	r1, [pc, #20]	; (26db4 <get_destination_module+0x38>)
   26d9e:	58c9      	ldr	r1, [r1, r3]
   26da0:	4628      	mov	r0, r5
   26da2:	f003 ffaf 	bl	2ad04 <strncmp>
   26da6:	b118      	cbz	r0, 26db0 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26da8:	3401      	adds	r4, #1
   26daa:	e7ea      	b.n	26d82 <get_destination_module+0x6>
	return -1;
   26dac:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26db0:	4620      	mov	r0, r4
   26db2:	bd38      	pop	{r3, r4, r5, pc}
   26db4:	2000d0f4 	.word	0x2000d0f4
   26db8:	2000d100 	.word	0x2000d100
   26dbc:	aaaaaaab 	.word	0xaaaaaaab

00026dc0 <set_default_module>:
{
   26dc0:	b538      	push	{r3, r4, r5, lr}
   26dc2:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   26dc4:	f7d9 fc9c 	bl	700 <strlen>
   26dc8:	2814      	cmp	r0, #20
   26dca:	d813      	bhi.n	26df4 <set_default_module+0x34>
	module = get_destination_module(name);
   26dcc:	4620      	mov	r0, r4
   26dce:	f7ff ffd5 	bl	26d7c <get_destination_module>
	if (module == -1) {
   26dd2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26dd6:	d014      	beq.n	26e02 <set_default_module+0x42>
	default_module = module;
   26dd8:	4b0d      	ldr	r3, [pc, #52]	; (26e10 <set_default_module+0x50>)
   26dda:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   26ddc:	4d0d      	ldr	r5, [pc, #52]	; (26e14 <set_default_module+0x54>)
   26dde:	2214      	movs	r2, #20
   26de0:	4621      	mov	r1, r4
   26de2:	4628      	mov	r0, r5
   26de4:	f003 ffe0 	bl	2ada8 <strncpy>
	strcat(default_module_prompt, "> ");
   26de8:	490b      	ldr	r1, [pc, #44]	; (26e18 <set_default_module+0x58>)
   26dea:	4628      	mov	r0, r5
   26dec:	f003 fe98 	bl	2ab20 <strcat>
	return 0;
   26df0:	2000      	movs	r0, #0
}
   26df2:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   26df4:	4621      	mov	r1, r4
   26df6:	4809      	ldr	r0, [pc, #36]	; (26e1c <set_default_module+0x5c>)
   26df8:	f7dc f908 	bl	300c <printk>
		return -EINVAL;
   26dfc:	f06f 0015 	mvn.w	r0, #21
   26e00:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   26e02:	4621      	mov	r1, r4
   26e04:	4806      	ldr	r0, [pc, #24]	; (26e20 <set_default_module+0x60>)
   26e06:	f7dc f901 	bl	300c <printk>
		return -EINVAL;
   26e0a:	f06f 0015 	mvn.w	r0, #21
   26e0e:	bd38      	pop	{r3, r4, r5, pc}
   26e10:	2000c630 	.word	0x2000c630
   26e14:	20002728 	.word	0x20002728
   26e18:	00032e3c 	.word	0x00032e3c
   26e1c:	00032ddc 	.word	0x00032ddc
   26e20:	00032e10 	.word	0x00032e10

00026e24 <select_module>:
{
   26e24:	b508      	push	{r3, lr}
	if (argc == 1) {
   26e26:	2801      	cmp	r0, #1
   26e28:	d003      	beq.n	26e32 <select_module+0xe>
	return set_default_module(argv[1]);
   26e2a:	6848      	ldr	r0, [r1, #4]
   26e2c:	f7ff ffc8 	bl	26dc0 <set_default_module>
}
   26e30:	bd08      	pop	{r3, pc}
		default_module = -1;
   26e32:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26e36:	4b02      	ldr	r3, [pc, #8]	; (26e40 <select_module+0x1c>)
   26e38:	601a      	str	r2, [r3, #0]
		return 0;
   26e3a:	2000      	movs	r0, #0
   26e3c:	bd08      	pop	{r3, pc}
   26e3e:	bf00      	nop
   26e40:	2000c630 	.word	0x2000c630

00026e44 <get_command_and_module>:
{
   26e44:	b538      	push	{r3, r4, r5, lr}
   26e46:	4604      	mov	r4, r0
	*module = -1;
   26e48:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26e4c:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26e4e:	6800      	ldr	r0, [r0, #0]
   26e50:	b140      	cbz	r0, 26e64 <get_command_and_module+0x20>
   26e52:	460d      	mov	r5, r1
	if (default_module == -1) {
   26e54:	4b12      	ldr	r3, [pc, #72]	; (26ea0 <get_command_and_module+0x5c>)
   26e56:	681b      	ldr	r3, [r3, #0]
   26e58:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26e5c:	d007      	beq.n	26e6e <get_command_and_module+0x2a>
	*module = default_module;
   26e5e:	600b      	str	r3, [r1, #0]
	return argv[0];
   26e60:	6820      	ldr	r0, [r4, #0]
}
   26e62:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   26e64:	480f      	ldr	r0, [pc, #60]	; (26ea4 <get_command_and_module+0x60>)
   26e66:	f7dc f8d1 	bl	300c <printk>
		return NULL;
   26e6a:	2000      	movs	r0, #0
   26e6c:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26e6e:	6863      	ldr	r3, [r4, #4]
   26e70:	b14b      	cbz	r3, 26e86 <get_command_and_module+0x42>
   26e72:	781b      	ldrb	r3, [r3, #0]
   26e74:	b13b      	cbz	r3, 26e86 <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   26e76:	f7ff ff81 	bl	26d7c <get_destination_module>
   26e7a:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26e7c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26e80:	d007      	beq.n	26e92 <get_command_and_module+0x4e>
		return argv[1];
   26e82:	6860      	ldr	r0, [r4, #4]
   26e84:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   26e86:	4601      	mov	r1, r0
   26e88:	4807      	ldr	r0, [pc, #28]	; (26ea8 <get_command_and_module+0x64>)
   26e8a:	f7dc f8bf 	bl	300c <printk>
			return NULL;
   26e8e:	2000      	movs	r0, #0
   26e90:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   26e92:	6821      	ldr	r1, [r4, #0]
   26e94:	4805      	ldr	r0, [pc, #20]	; (26eac <get_command_and_module+0x68>)
   26e96:	f7dc f8b9 	bl	300c <printk>
			return NULL;
   26e9a:	2000      	movs	r0, #0
   26e9c:	bd38      	pop	{r3, r4, r5, pc}
   26e9e:	bf00      	nop
   26ea0:	2000c630 	.word	0x2000c630
   26ea4:	00032d6c 	.word	0x00032d6c
   26ea8:	00032d84 	.word	0x00032d84
   26eac:	00032da0 	.word	0x00032da0

00026eb0 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26eb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   26eb2:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   26eb4:	b15c      	cbz	r4, 26ece <get_cb+0x1e>
   26eb6:	4606      	mov	r6, r0
   26eb8:	460d      	mov	r5, r1
   26eba:	4617      	mov	r7, r2
   26ebc:	7823      	ldrb	r3, [r4, #0]
   26ebe:	b133      	cbz	r3, 26ece <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   26ec0:	4929      	ldr	r1, [pc, #164]	; (26f68 <get_cb+0xb8>)
   26ec2:	4620      	mov	r0, r4
   26ec4:	f7d9 faa0 	bl	408 <strcmp>
   26ec8:	b930      	cbnz	r0, 26ed8 <get_cb+0x28>
		return show_help;
   26eca:	4828      	ldr	r0, [pc, #160]	; (26f6c <get_cb+0xbc>)
   26ecc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   26ece:	4828      	ldr	r0, [pc, #160]	; (26f70 <get_cb+0xc0>)
   26ed0:	f7dc f89c 	bl	300c <printk>
		return NULL;
   26ed4:	2000      	movs	r0, #0
   26ed6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   26ed8:	4926      	ldr	r1, [pc, #152]	; (26f74 <get_cb+0xc4>)
   26eda:	4620      	mov	r0, r4
   26edc:	f7d9 fa94 	bl	408 <strcmp>
   26ee0:	b908      	cbnz	r0, 26ee6 <get_cb+0x36>
		return select_module;
   26ee2:	4825      	ldr	r0, [pc, #148]	; (26f78 <get_cb+0xc8>)
   26ee4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   26ee6:	4925      	ldr	r1, [pc, #148]	; (26f7c <get_cb+0xcc>)
   26ee8:	4620      	mov	r0, r4
   26eea:	f7d9 fa8d 	bl	408 <strcmp>
   26eee:	2800      	cmp	r0, #0
   26ef0:	d034      	beq.n	26f5c <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   26ef2:	6833      	ldr	r3, [r6, #0]
   26ef4:	2b01      	cmp	r3, #1
   26ef6:	d01c      	beq.n	26f32 <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   26ef8:	4639      	mov	r1, r7
   26efa:	4628      	mov	r0, r5
   26efc:	f7ff ffa2 	bl	26e44 <get_command_and_module>
   26f00:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   26f02:	683d      	ldr	r5, [r7, #0]
   26f04:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26f08:	d02a      	beq.n	26f60 <get_cb+0xb0>
   26f0a:	b358      	cbz	r0, 26f64 <get_cb+0xb4>
   26f0c:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26f0e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26f12:	009a      	lsls	r2, r3, #2
   26f14:	4b1a      	ldr	r3, [pc, #104]	; (26f80 <get_cb+0xd0>)
   26f16:	4413      	add	r3, r2
   26f18:	6859      	ldr	r1, [r3, #4]
   26f1a:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26f1e:	0093      	lsls	r3, r2, #2
   26f20:	461f      	mov	r7, r3
   26f22:	58c9      	ldr	r1, [r1, r3]
   26f24:	b1c1      	cbz	r1, 26f58 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26f26:	4630      	mov	r0, r6
   26f28:	f7d9 fa6e 	bl	408 <strcmp>
   26f2c:	b158      	cbz	r0, 26f46 <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26f2e:	3401      	adds	r4, #1
   26f30:	e7ed      	b.n	26f0e <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   26f32:	4b14      	ldr	r3, [pc, #80]	; (26f84 <get_cb+0xd4>)
   26f34:	681b      	ldr	r3, [r3, #0]
   26f36:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26f3a:	d1dd      	bne.n	26ef8 <get_cb+0x48>
		printk("Missing parameter\n");
   26f3c:	4812      	ldr	r0, [pc, #72]	; (26f88 <get_cb+0xd8>)
   26f3e:	f7dc f865 	bl	300c <printk>
		return NULL;
   26f42:	2000      	movs	r0, #0
   26f44:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   26f46:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26f4a:	00aa      	lsls	r2, r5, #2
   26f4c:	4b0c      	ldr	r3, [pc, #48]	; (26f80 <get_cb+0xd0>)
   26f4e:	4413      	add	r3, r2
   26f50:	685b      	ldr	r3, [r3, #4]
   26f52:	441f      	add	r7, r3
   26f54:	6878      	ldr	r0, [r7, #4]
   26f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26f58:	2000      	movs	r0, #0
   26f5a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26f5c:	480b      	ldr	r0, [pc, #44]	; (26f8c <get_cb+0xdc>)
   26f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26f60:	2000      	movs	r0, #0
   26f62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f64:	2000      	movs	r0, #0
}
   26f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26f68:	00032d40 	.word	0x00032d40
   26f6c:	00027031 	.word	0x00027031
   26f70:	00032d2c 	.word	0x00032d2c
   26f74:	00032d48 	.word	0x00032d48
   26f78:	00026e25 	.word	0x00026e25
   26f7c:	00032d50 	.word	0x00032d50
   26f80:	2000d0f4 	.word	0x2000d0f4
   26f84:	2000c630 	.word	0x2000c630
   26f88:	00032d58 	.word	0x00032d58
   26f8c:	00026cbd 	.word	0x00026cbd

00026f90 <show_cmd_help>:
{
   26f90:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   26f94:	b083      	sub	sp, #12
   26f96:	4607      	mov	r7, r0
	int module = -1;
   26f98:	a902      	add	r1, sp, #8
   26f9a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26f9e:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   26fa2:	f7ff ff4f 	bl	26e44 <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   26fa6:	9d01      	ldr	r5, [sp, #4]
   26fa8:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26fac:	d031      	beq.n	27012 <show_cmd_help+0x82>
   26fae:	4606      	mov	r6, r0
   26fb0:	b390      	cbz	r0, 27018 <show_cmd_help+0x88>
   26fb2:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26fb4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26fb8:	009a      	lsls	r2, r3, #2
   26fba:	4b19      	ldr	r3, [pc, #100]	; (27020 <show_cmd_help+0x90>)
   26fbc:	4413      	add	r3, r2
   26fbe:	6859      	ldr	r1, [r3, #4]
   26fc0:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26fc4:	0093      	lsls	r3, r2, #2
   26fc6:	4698      	mov	r8, r3
   26fc8:	58c9      	ldr	r1, [r1, r3]
   26fca:	b1c1      	cbz	r1, 26ffe <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   26fcc:	4630      	mov	r0, r6
   26fce:	f7d9 fa1b 	bl	408 <strcmp>
   26fd2:	4681      	mov	r9, r0
   26fd4:	b108      	cbz	r0, 26fda <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26fd6:	3401      	adds	r4, #1
   26fd8:	e7ec      	b.n	26fb4 <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   26fda:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26fde:	00aa      	lsls	r2, r5, #2
   26fe0:	4b0f      	ldr	r3, [pc, #60]	; (27020 <show_cmd_help+0x90>)
   26fe2:	4413      	add	r3, r2
   26fe4:	685b      	ldr	r3, [r3, #4]
   26fe6:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   26fea:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   26fee:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   26ff0:	b11a      	cbz	r2, 26ffa <show_cmd_help+0x6a>
   26ff2:	480c      	ldr	r0, [pc, #48]	; (27024 <show_cmd_help+0x94>)
   26ff4:	f7dc f80a 	bl	300c <printk>
			return 0;
   26ff8:	e007      	b.n	2700a <show_cmd_help+0x7a>
			printk("%s %s\n",
   26ffa:	4a0b      	ldr	r2, [pc, #44]	; (27028 <show_cmd_help+0x98>)
   26ffc:	e7f9      	b.n	26ff2 <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   26ffe:	6839      	ldr	r1, [r7, #0]
   27000:	480a      	ldr	r0, [pc, #40]	; (2702c <show_cmd_help+0x9c>)
   27002:	f7dc f803 	bl	300c <printk>
	return -EINVAL;
   27006:	f06f 0915 	mvn.w	r9, #21
}
   2700a:	4648      	mov	r0, r9
   2700c:	b003      	add	sp, #12
   2700e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   27012:	f04f 0900 	mov.w	r9, #0
   27016:	e7f8      	b.n	2700a <show_cmd_help+0x7a>
   27018:	f04f 0900 	mov.w	r9, #0
   2701c:	e7f5      	b.n	2700a <show_cmd_help+0x7a>
   2701e:	bf00      	nop
   27020:	2000d0f4 	.word	0x2000d0f4
   27024:	00032e6c 	.word	0x00032e6c
   27028:	0002f2c4 	.word	0x0002f2c4
   2702c:	00032d84 	.word	0x00032d84

00027030 <show_help>:
{
   27030:	b510      	push	{r4, lr}
   27032:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   27034:	2802      	cmp	r0, #2
   27036:	dc12      	bgt.n	2705e <show_help+0x2e>
   27038:	4b23      	ldr	r3, [pc, #140]	; (270c8 <show_help+0x98>)
   2703a:	681b      	ldr	r3, [r3, #0]
   2703c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27040:	d001      	beq.n	27046 <show_help+0x16>
   27042:	2802      	cmp	r0, #2
   27044:	d00b      	beq.n	2705e <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   27046:	2802      	cmp	r0, #2
   27048:	d00d      	beq.n	27066 <show_help+0x36>
   2704a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2704e:	d001      	beq.n	27054 <show_help+0x24>
   27050:	2801      	cmp	r0, #1
   27052:	d008      	beq.n	27066 <show_help+0x36>
		printk("Available modules:\n");
   27054:	481d      	ldr	r0, [pc, #116]	; (270cc <show_help+0x9c>)
   27056:	f7db ffd9 	bl	300c <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   2705a:	2400      	movs	r4, #0
   2705c:	e025      	b.n	270aa <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   2705e:	1d20      	adds	r0, r4, #4
   27060:	f7ff ff96 	bl	26f90 <show_cmd_help>
   27064:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   27066:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2706a:	d007      	beq.n	2707c <show_help+0x4c>
		print_module_commands(module);
   2706c:	4618      	mov	r0, r3
   2706e:	f7ff fe31 	bl	26cd4 <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   27072:	4817      	ldr	r0, [pc, #92]	; (270d0 <show_help+0xa0>)
   27074:	f7db ffca 	bl	300c <printk>
	return 0;
   27078:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   2707a:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   2707c:	6860      	ldr	r0, [r4, #4]
   2707e:	f7ff fe7d 	bl	26d7c <get_destination_module>
   27082:	4603      	mov	r3, r0
			if (module == -1) {
   27084:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27088:	d1f0      	bne.n	2706c <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   2708a:	6861      	ldr	r1, [r4, #4]
   2708c:	4811      	ldr	r0, [pc, #68]	; (270d4 <show_help+0xa4>)
   2708e:	f7db ffbd 	bl	300c <printk>
				return -EINVAL;
   27092:	f06f 0015 	mvn.w	r0, #21
   27096:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   27098:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   2709c:	0093      	lsls	r3, r2, #2
   2709e:	4a0e      	ldr	r2, [pc, #56]	; (270d8 <show_help+0xa8>)
   270a0:	58d1      	ldr	r1, [r2, r3]
   270a2:	480e      	ldr	r0, [pc, #56]	; (270dc <show_help+0xac>)
   270a4:	f7db ffb2 	bl	300c <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   270a8:	3401      	adds	r4, #1
   270aa:	4a0b      	ldr	r2, [pc, #44]	; (270d8 <show_help+0xa8>)
   270ac:	4b0c      	ldr	r3, [pc, #48]	; (270e0 <show_help+0xb0>)
   270ae:	1a9b      	subs	r3, r3, r2
   270b0:	109b      	asrs	r3, r3, #2
   270b2:	4a0c      	ldr	r2, [pc, #48]	; (270e4 <show_help+0xb4>)
   270b4:	fb02 f303 	mul.w	r3, r2, r3
   270b8:	429c      	cmp	r4, r3
   270ba:	dbed      	blt.n	27098 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   270bc:	480a      	ldr	r0, [pc, #40]	; (270e8 <show_help+0xb8>)
   270be:	f7db ffa5 	bl	300c <printk>
	return 0;
   270c2:	2000      	movs	r0, #0
}
   270c4:	bd10      	pop	{r4, pc}
   270c6:	bf00      	nop
   270c8:	2000c630 	.word	0x2000c630
   270cc:	00032e9c 	.word	0x00032e9c
   270d0:	00032e74 	.word	0x00032e74
   270d4:	00032da0 	.word	0x00032da0
   270d8:	2000d0f4 	.word	0x2000d0f4
   270dc:	00031ff8 	.word	0x00031ff8
   270e0:	2000d100 	.word	0x2000d100
   270e4:	aaaaaaab 	.word	0xaaaaaaab
   270e8:	00032eb0 	.word	0x00032eb0

000270ec <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   270ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   270f0:	b086      	sub	sp, #24
   270f2:	4604      	mov	r4, r0
   270f4:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   270f6:	e000      	b.n	270fa <get_command_to_complete+0xe>
		str++;
   270f8:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   270fa:	7823      	ldrb	r3, [r4, #0]
   270fc:	2b20      	cmp	r3, #32
   270fe:	d0fb      	beq.n	270f8 <get_command_to_complete+0xc>
	}

	if (!*str) {
   27100:	b3a3      	cbz	r3, 2716c <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   27102:	4b1f      	ldr	r3, [pc, #124]	; (27180 <get_command_to_complete+0x94>)
   27104:	681d      	ldr	r5, [r3, #0]
   27106:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2710a:	d001      	beq.n	27110 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   2710c:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   27110:	2120      	movs	r1, #32
   27112:	4620      	mov	r0, r4
   27114:	f003 fd24 	bl	2ab60 <strchr>
   27118:	4606      	mov	r6, r0
	if (default_module != -1) {
   2711a:	4b19      	ldr	r3, [pc, #100]	; (27180 <get_command_to_complete+0x94>)
   2711c:	681f      	ldr	r7, [r3, #0]
   2711e:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   27122:	d004      	beq.n	2712e <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   27124:	bb28      	cbnz	r0, 27172 <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   27126:	4628      	mov	r0, r5
   27128:	b006      	add	sp, #24
   2712a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   2712e:	b318      	cbz	r0, 27178 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   27130:	1b05      	subs	r5, r0, r4
   27132:	1c6a      	adds	r2, r5, #1
   27134:	2a13      	cmp	r2, #19
   27136:	dc21      	bgt.n	2717c <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   27138:	4621      	mov	r1, r4
   2713a:	a801      	add	r0, sp, #4
   2713c:	f003 fe34 	bl	2ada8 <strncpy>
	dest_str[str - start] = '\0';
   27140:	ab06      	add	r3, sp, #24
   27142:	441d      	add	r5, r3
   27144:	2300      	movs	r3, #0
   27146:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   2714a:	a801      	add	r0, sp, #4
   2714c:	f7ff fe16 	bl	26d7c <get_destination_module>
   27150:	4605      	mov	r5, r0
	if (dest == -1) {
   27152:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27156:	d0e6      	beq.n	27126 <get_command_to_complete+0x3a>
	str++;
   27158:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   2715a:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   2715e:	2120      	movs	r1, #32
   27160:	f003 fcfe 	bl	2ab60 <strchr>
	return (str == NULL) ? dest : -1;
   27164:	2800      	cmp	r0, #0
   27166:	d0de      	beq.n	27126 <get_command_to_complete+0x3a>
   27168:	463d      	mov	r5, r7
   2716a:	e7dc      	b.n	27126 <get_command_to_complete+0x3a>
		return -1;
   2716c:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27170:	e7d9      	b.n	27126 <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   27172:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   27176:	e7d6      	b.n	27126 <get_command_to_complete+0x3a>
		return -1;
   27178:	463d      	mov	r5, r7
   2717a:	e7d4      	b.n	27126 <get_command_to_complete+0x3a>
		return -1;
   2717c:	463d      	mov	r5, r7
   2717e:	e7d2      	b.n	27126 <get_command_to_complete+0x3a>
   27180:	2000c630 	.word	0x2000c630

00027184 <completion>:

static u8_t completion(char *line, u8_t len)
{
   27184:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27188:	b087      	sub	sp, #28
   2718a:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   2718c:	2944      	cmp	r1, #68	; 0x44
   2718e:	d903      	bls.n	27198 <completion+0x14>
		return 0;
   27190:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   27192:	b007      	add	sp, #28
   27194:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   27198:	4689      	mov	r9, r1
	line[len] = '\0';
   2719a:	2300      	movs	r3, #0
   2719c:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   2719e:	a905      	add	r1, sp, #20
   271a0:	f7ff ffa4 	bl	270ec <get_command_to_complete>
   271a4:	4605      	mov	r5, r0
	if (dest == -1) {
   271a6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   271aa:	f000 808f 	beq.w	272cc <completion+0x148>
	command_len = strlen(command_prefix);
   271ae:	9805      	ldr	r0, [sp, #20]
   271b0:	f7d9 faa6 	bl	700 <strlen>
   271b4:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   271b6:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   271ba:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   271be:	465f      	mov	r7, fp
   271c0:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   271c2:	e01f      	b.n	27204 <completion+0x80>
			first_match = module->commands[i].cmd_name;
   271c4:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   271c8:	009a      	lsls	r2, r3, #2
   271ca:	4b42      	ldr	r3, [pc, #264]	; (272d4 <completion+0x150>)
   271cc:	4413      	add	r3, r2
   271ce:	685b      	ldr	r3, [r3, #4]
   271d0:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   271d4:	e014      	b.n	27200 <completion+0x7c>
			printk("\n%s\n", first_match);
   271d6:	4639      	mov	r1, r7
   271d8:	483f      	ldr	r0, [pc, #252]	; (272d8 <completion+0x154>)
   271da:	f7db ff17 	bl	300c <printk>
			common_chars = strlen(first_match);
   271de:	4638      	mov	r0, r7
   271e0:	f7d9 fa8e 	bl	700 <strlen>
   271e4:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   271e6:	e026      	b.n	27236 <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   271e8:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   271ec:	009a      	lsls	r2, r3, #2
   271ee:	4b39      	ldr	r3, [pc, #228]	; (272d4 <completion+0x150>)
   271f0:	4413      	add	r3, r2
   271f2:	685b      	ldr	r3, [r3, #4]
   271f4:	f853 100a 	ldr.w	r1, [r3, sl]
   271f8:	4838      	ldr	r0, [pc, #224]	; (272dc <completion+0x158>)
   271fa:	f7db ff07 	bl	300c <printk>
		common_chars = j;
   271fe:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   27200:	f10b 0b01 	add.w	fp, fp, #1
   27204:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27208:	009a      	lsls	r2, r3, #2
   2720a:	4b32      	ldr	r3, [pc, #200]	; (272d4 <completion+0x150>)
   2720c:	4413      	add	r3, r2
   2720e:	685a      	ldr	r2, [r3, #4]
   27210:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   27214:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   27218:	46d0      	mov	r8, sl
   2721a:	f852 100a 	ldr.w	r1, [r2, sl]
   2721e:	b1d1      	cbz	r1, 27256 <completion+0xd2>
		if (strncmp(command_prefix,
   27220:	9a01      	ldr	r2, [sp, #4]
   27222:	9805      	ldr	r0, [sp, #20]
   27224:	f003 fd6e 	bl	2ad04 <strncmp>
   27228:	4604      	mov	r4, r0
   2722a:	2800      	cmp	r0, #0
   2722c:	d1e8      	bne.n	27200 <completion+0x7c>
		if (!first_match) {
   2722e:	2f00      	cmp	r7, #0
   27230:	d0c8      	beq.n	271c4 <completion+0x40>
		if (first_match && (common_chars < 0)) {
   27232:	2e00      	cmp	r6, #0
   27234:	dbcf      	blt.n	271d6 <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   27236:	42a6      	cmp	r6, r4
   27238:	ddd6      	ble.n	271e8 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   2723a:	5d39      	ldrb	r1, [r7, r4]
   2723c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   27240:	009a      	lsls	r2, r3, #2
   27242:	4b24      	ldr	r3, [pc, #144]	; (272d4 <completion+0x150>)
   27244:	4413      	add	r3, r2
   27246:	685b      	ldr	r3, [r3, #4]
   27248:	f853 3008 	ldr.w	r3, [r3, r8]
   2724c:	5d1b      	ldrb	r3, [r3, r4]
   2724e:	4299      	cmp	r1, r3
   27250:	d1ca      	bne.n	271e8 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   27252:	3401      	adds	r4, #1
   27254:	e7ef      	b.n	27236 <completion+0xb2>
   27256:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   2725a:	2f00      	cmp	r7, #0
   2725c:	d038      	beq.n	272d0 <completion+0x14c>
	if (common_chars >= 0) {
   2725e:	2e00      	cmp	r6, #0
   27260:	db0d      	blt.n	2727e <completion+0xfa>
		printk("%s", get_prompt());
   27262:	f7ff fd01 	bl	26c68 <get_prompt>
   27266:	4c1e      	ldr	r4, [pc, #120]	; (272e0 <completion+0x15c>)
   27268:	4601      	mov	r1, r0
   2726a:	4620      	mov	r0, r4
   2726c:	f7db fece 	bl	300c <printk>
		printk("%s", line);
   27270:	9d02      	ldr	r5, [sp, #8]
   27272:	4629      	mov	r1, r5
   27274:	4620      	mov	r0, r4
   27276:	f7db fec9 	bl	300c <printk>
	int common_chars = -1, space = 0;
   2727a:	2400      	movs	r4, #0
   2727c:	e015      	b.n	272aa <completion+0x126>
		common_chars = strlen(first_match);
   2727e:	4638      	mov	r0, r7
   27280:	f7d9 fa3e 	bl	700 <strlen>
   27284:	4606      	mov	r6, r0
		space = 1;
   27286:	2401      	movs	r4, #1
   27288:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   2728a:	e00e      	b.n	272aa <completion+0x126>
		printk("%c", first_match[i]);
   2728c:	f817 100a 	ldrb.w	r1, [r7, sl]
   27290:	4814      	ldr	r0, [pc, #80]	; (272e4 <completion+0x160>)
   27292:	f7db febb 	bl	300c <printk>
		line[len++] = first_match[i];
   27296:	f109 0301 	add.w	r3, r9, #1
   2729a:	f817 200a 	ldrb.w	r2, [r7, sl]
   2729e:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   272a2:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   272a6:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   272aa:	4556      	cmp	r6, sl
   272ac:	dcee      	bgt.n	2728c <completion+0x108>
	if (space) {
   272ae:	b92c      	cbnz	r4, 272bc <completion+0x138>
	return common_chars - command_len + space;
   272b0:	9b01      	ldr	r3, [sp, #4]
   272b2:	1af0      	subs	r0, r6, r3
   272b4:	fa54 f080 	uxtab	r0, r4, r0
   272b8:	b2c0      	uxtb	r0, r0
   272ba:	e76a      	b.n	27192 <completion+0xe>
		printk(" ");
   272bc:	480a      	ldr	r0, [pc, #40]	; (272e8 <completion+0x164>)
   272be:	f7db fea5 	bl	300c <printk>
		line[len] = ' ';
   272c2:	2320      	movs	r3, #32
   272c4:	9a02      	ldr	r2, [sp, #8]
   272c6:	f802 3009 	strb.w	r3, [r2, r9]
   272ca:	e7f1      	b.n	272b0 <completion+0x12c>
		return 0;
   272cc:	2000      	movs	r0, #0
   272ce:	e760      	b.n	27192 <completion+0xe>
		return 0;
   272d0:	2000      	movs	r0, #0
   272d2:	e75e      	b.n	27192 <completion+0xe>
   272d4:	2000d0f4 	.word	0x2000d0f4
   272d8:	00032d20 	.word	0x00032d20
   272dc:	00031ff8 	.word	0x00031ff8
   272e0:	0002e844 	.word	0x0002e844
   272e4:	00032d28 	.word	0x00032d28
   272e8:	00033374 	.word	0x00033374

000272ec <line_queue_init>:
{
   272ec:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   272ee:	2400      	movs	r4, #0
   272f0:	e008      	b.n	27304 <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   272f2:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   272f6:	0093      	lsls	r3, r2, #2
   272f8:	4904      	ldr	r1, [pc, #16]	; (2730c <line_queue_init+0x20>)
   272fa:	4419      	add	r1, r3
   272fc:	4804      	ldr	r0, [pc, #16]	; (27310 <line_queue_init+0x24>)
   272fe:	f001 fced 	bl	28cdc <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   27302:	3401      	adds	r4, #1
   27304:	2c02      	cmp	r4, #2
   27306:	ddf4      	ble.n	272f2 <line_queue_init+0x6>
}
   27308:	bd10      	pop	{r4, pc}
   2730a:	bf00      	nop
   2730c:	2000258c 	.word	0x2000258c
   27310:	2000257c 	.word	0x2000257c

00027314 <shell_exec>:
{
   27314:	b510      	push	{r4, lr}
   27316:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   27318:	4b1e      	ldr	r3, [pc, #120]	; (27394 <shell_exec+0x80>)
   2731a:	681b      	ldr	r3, [r3, #0]
   2731c:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   2731e:	220b      	movs	r2, #11
   27320:	a903      	add	r1, sp, #12
   27322:	f7ff fcf5 	bl	26d10 <line2argv>
   27326:	9002      	str	r0, [sp, #8]
	if (!argc) {
   27328:	2800      	cmp	r0, #0
   2732a:	d02f      	beq.n	2738c <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   2732c:	aa01      	add	r2, sp, #4
   2732e:	a903      	add	r1, sp, #12
   27330:	a802      	add	r0, sp, #8
   27332:	f7ff fdbd 	bl	26eb0 <get_cb>
	if (!cb) {
   27336:	4602      	mov	r2, r0
   27338:	b168      	cbz	r0, 27356 <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   2733a:	9b01      	ldr	r3, [sp, #4]
   2733c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27340:	d017      	beq.n	27372 <shell_exec+0x5e>
   27342:	4914      	ldr	r1, [pc, #80]	; (27394 <shell_exec+0x80>)
   27344:	6809      	ldr	r1, [r1, #0]
   27346:	428b      	cmp	r3, r1
   27348:	d013      	beq.n	27372 <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   2734a:	a904      	add	r1, sp, #16
   2734c:	9802      	ldr	r0, [sp, #8]
   2734e:	3801      	subs	r0, #1
   27350:	4790      	blx	r2
   27352:	4604      	mov	r4, r0
   27354:	e011      	b.n	2737a <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   27356:	4b10      	ldr	r3, [pc, #64]	; (27398 <shell_exec+0x84>)
   27358:	681a      	ldr	r2, [r3, #0]
   2735a:	2a00      	cmp	r2, #0
   2735c:	d1ed      	bne.n	2733a <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   2735e:	9903      	ldr	r1, [sp, #12]
   27360:	480e      	ldr	r0, [pc, #56]	; (2739c <shell_exec+0x88>)
   27362:	f7db fe53 	bl	300c <printk>
	printk("Type 'help' for list of available commands\n");
   27366:	480e      	ldr	r0, [pc, #56]	; (273a0 <shell_exec+0x8c>)
   27368:	f7db fe50 	bl	300c <printk>
			return -EINVAL;
   2736c:	f06f 0415 	mvn.w	r4, #21
   27370:	e005      	b.n	2737e <shell_exec+0x6a>
		err = cb(argc, argv);
   27372:	a903      	add	r1, sp, #12
   27374:	9802      	ldr	r0, [sp, #8]
   27376:	4790      	blx	r2
   27378:	4604      	mov	r4, r0
	if (err < 0) {
   2737a:	2c00      	cmp	r4, #0
   2737c:	db02      	blt.n	27384 <shell_exec+0x70>
}
   2737e:	4620      	mov	r0, r4
   27380:	b00e      	add	sp, #56	; 0x38
   27382:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   27384:	a803      	add	r0, sp, #12
   27386:	f7ff fe03 	bl	26f90 <show_cmd_help>
   2738a:	e7f8      	b.n	2737e <shell_exec+0x6a>
		return -EINVAL;
   2738c:	f06f 0415 	mvn.w	r4, #21
   27390:	e7f5      	b.n	2737e <shell_exec+0x6a>
   27392:	bf00      	nop
   27394:	2000c630 	.word	0x2000c630
   27398:	20002574 	.word	0x20002574
   2739c:	00032d84 	.word	0x00032d84
   273a0:	00032e40 	.word	0x00032e40

000273a4 <shell>:
{
   273a4:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   273a6:	f7ff fc5f 	bl	26c68 <get_prompt>
   273aa:	4601      	mov	r1, r0
   273ac:	4808      	ldr	r0, [pc, #32]	; (273d0 <shell+0x2c>)
   273ae:	f7db fe2d 	bl	300c <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   273b2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   273b6:	4807      	ldr	r0, [pc, #28]	; (273d4 <shell+0x30>)
   273b8:	f001 fcb8 	bl	28d2c <k_queue_get>
   273bc:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   273be:	3004      	adds	r0, #4
   273c0:	f7ff ffa8 	bl	27314 <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   273c4:	4621      	mov	r1, r4
   273c6:	4804      	ldr	r0, [pc, #16]	; (273d8 <shell+0x34>)
   273c8:	f001 fc88 	bl	28cdc <k_queue_append>
   273cc:	e7eb      	b.n	273a6 <shell+0x2>
   273ce:	bf00      	nop
   273d0:	0002e844 	.word	0x0002e844
   273d4:	20002718 	.word	0x20002718
   273d8:	2000257c 	.word	0x2000257c

000273dc <shell_init>:


void shell_init(const char *str)
{
   273dc:	b510      	push	{r4, lr}
   273de:	b086      	sub	sp, #24
   273e0:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   273e2:	4812      	ldr	r0, [pc, #72]	; (2742c <shell_init+0x50>)
   273e4:	f001 fc47 	bl	28c76 <k_queue_init>
	k_fifo_init(&avail_queue);
   273e8:	4811      	ldr	r0, [pc, #68]	; (27430 <shell_init+0x54>)
   273ea:	f001 fc44 	bl	28c76 <k_queue_init>

	line_queue_init();
   273ee:	f7ff ff7d 	bl	272ec <line_queue_init>

	prompt = str ? str : "";
   273f2:	b1c4      	cbz	r4, 27426 <shell_init+0x4a>
   273f4:	4b0f      	ldr	r3, [pc, #60]	; (27434 <shell_init+0x58>)
   273f6:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   273f8:	2300      	movs	r3, #0
   273fa:	9305      	str	r3, [sp, #20]
   273fc:	9304      	str	r3, [sp, #16]
   273fe:	f06f 0208 	mvn.w	r2, #8
   27402:	9203      	str	r2, [sp, #12]
   27404:	9302      	str	r3, [sp, #8]
   27406:	9301      	str	r3, [sp, #4]
   27408:	9300      	str	r3, [sp, #0]
   2740a:	4b0b      	ldr	r3, [pc, #44]	; (27438 <shell_init+0x5c>)
   2740c:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   27410:	490a      	ldr	r1, [pc, #40]	; (2743c <shell_init+0x60>)
   27412:	480b      	ldr	r0, [pc, #44]	; (27440 <shell_init+0x64>)
   27414:	f002 fa78 	bl	29908 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   27418:	4a0a      	ldr	r2, [pc, #40]	; (27444 <shell_init+0x68>)
   2741a:	4904      	ldr	r1, [pc, #16]	; (2742c <shell_init+0x50>)
   2741c:	4804      	ldr	r0, [pc, #16]	; (27430 <shell_init+0x54>)
   2741e:	f7da fe35 	bl	208c <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   27422:	b006      	add	sp, #24
   27424:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   27426:	4c08      	ldr	r4, [pc, #32]	; (27448 <shell_init+0x6c>)
   27428:	e7e4      	b.n	273f4 <shell_init+0x18>
   2742a:	bf00      	nop
   2742c:	20002718 	.word	0x20002718
   27430:	2000257c 	.word	0x2000257c
   27434:	20002740 	.word	0x20002740
   27438:	000273a5 	.word	0x000273a5
   2743c:	20009c58 	.word	0x20009c58
   27440:	20002744 	.word	0x20002744
   27444:	00027185 	.word	0x00027185
   27448:	0002f2c4 	.word	0x0002f2c4

0002744c <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2744c:	4b0e      	ldr	r3, [pc, #56]	; (27488 <ftpan_32+0x3c>)
   2744e:	781b      	ldrb	r3, [r3, #0]
   27450:	2b06      	cmp	r3, #6
   27452:	d001      	beq.n	27458 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   27454:	2000      	movs	r0, #0
   27456:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   27458:	4b0c      	ldr	r3, [pc, #48]	; (2748c <ftpan_32+0x40>)
   2745a:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   2745c:	f013 0f0f 	tst.w	r3, #15
   27460:	d10e      	bne.n	27480 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27462:	4b0b      	ldr	r3, [pc, #44]	; (27490 <ftpan_32+0x44>)
   27464:	681b      	ldr	r3, [r3, #0]
   27466:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2746a:	2b30      	cmp	r3, #48	; 0x30
   2746c:	d001      	beq.n	27472 <ftpan_32+0x26>
	return false;
   2746e:	2000      	movs	r0, #0
   27470:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   27472:	4b08      	ldr	r3, [pc, #32]	; (27494 <ftpan_32+0x48>)
   27474:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   27476:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   2747a:	d003      	beq.n	27484 <ftpan_32+0x38>
	return false;
   2747c:	2000      	movs	r0, #0
   2747e:	4770      	bx	lr
   27480:	2000      	movs	r0, #0
   27482:	4770      	bx	lr
			return true;
   27484:	2001      	movs	r0, #1
}
   27486:	4770      	bx	lr
   27488:	f0000fe0 	.word	0xf0000fe0
   2748c:	f0000fe4 	.word	0xf0000fe4
   27490:	f0000fe8 	.word	0xf0000fe8
   27494:	f0000fec 	.word	0xf0000fec

00027498 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27498:	4b0e      	ldr	r3, [pc, #56]	; (274d4 <ftpan_37+0x3c>)
   2749a:	781b      	ldrb	r3, [r3, #0]
   2749c:	2b06      	cmp	r3, #6
   2749e:	d001      	beq.n	274a4 <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   274a0:	2000      	movs	r0, #0
   274a2:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   274a4:	4b0c      	ldr	r3, [pc, #48]	; (274d8 <ftpan_37+0x40>)
   274a6:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   274a8:	f013 0f0f 	tst.w	r3, #15
   274ac:	d10e      	bne.n	274cc <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   274ae:	4b0b      	ldr	r3, [pc, #44]	; (274dc <ftpan_37+0x44>)
   274b0:	681b      	ldr	r3, [r3, #0]
   274b2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   274b6:	2b30      	cmp	r3, #48	; 0x30
   274b8:	d001      	beq.n	274be <ftpan_37+0x26>
	return false;
   274ba:	2000      	movs	r0, #0
   274bc:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   274be:	4b08      	ldr	r3, [pc, #32]	; (274e0 <ftpan_37+0x48>)
   274c0:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   274c2:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   274c6:	d003      	beq.n	274d0 <ftpan_37+0x38>
	return false;
   274c8:	2000      	movs	r0, #0
   274ca:	4770      	bx	lr
   274cc:	2000      	movs	r0, #0
   274ce:	4770      	bx	lr
			return true;
   274d0:	2001      	movs	r0, #1
}
   274d2:	4770      	bx	lr
   274d4:	f0000fe0 	.word	0xf0000fe0
   274d8:	f0000fe4 	.word	0xf0000fe4
   274dc:	f0000fe8 	.word	0xf0000fe8
   274e0:	f0000fec 	.word	0xf0000fec

000274e4 <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   274e4:	4b0e      	ldr	r3, [pc, #56]	; (27520 <ftpan_36+0x3c>)
   274e6:	781b      	ldrb	r3, [r3, #0]
   274e8:	2b06      	cmp	r3, #6
   274ea:	d001      	beq.n	274f0 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   274ec:	2000      	movs	r0, #0
   274ee:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   274f0:	4b0c      	ldr	r3, [pc, #48]	; (27524 <ftpan_36+0x40>)
   274f2:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   274f4:	f013 0f0f 	tst.w	r3, #15
   274f8:	d10e      	bne.n	27518 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   274fa:	4b0b      	ldr	r3, [pc, #44]	; (27528 <ftpan_36+0x44>)
   274fc:	681b      	ldr	r3, [r3, #0]
   274fe:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   27502:	2b30      	cmp	r3, #48	; 0x30
   27504:	d001      	beq.n	2750a <ftpan_36+0x26>
	return false;
   27506:	2000      	movs	r0, #0
   27508:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   2750a:	4b08      	ldr	r3, [pc, #32]	; (2752c <ftpan_36+0x48>)
   2750c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   2750e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   27512:	d003      	beq.n	2751c <ftpan_36+0x38>
	return false;
   27514:	2000      	movs	r0, #0
   27516:	4770      	bx	lr
   27518:	2000      	movs	r0, #0
   2751a:	4770      	bx	lr
			return true;
   2751c:	2001      	movs	r0, #1
}
   2751e:	4770      	bx	lr
   27520:	f0000fe0 	.word	0xf0000fe0
   27524:	f0000fe4 	.word	0xf0000fe4
   27528:	f0000fe8 	.word	0xf0000fe8
   2752c:	f0000fec 	.word	0xf0000fec

00027530 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27530:	4b0f      	ldr	r3, [pc, #60]	; (27570 <errata_136_nrf52832+0x40>)
   27532:	781b      	ldrb	r3, [r3, #0]
   27534:	2b06      	cmp	r3, #6
   27536:	d001      	beq.n	2753c <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   27538:	2000      	movs	r0, #0
   2753a:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   2753c:	4b0d      	ldr	r3, [pc, #52]	; (27574 <errata_136_nrf52832+0x44>)
   2753e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   27540:	f013 0f0f 	tst.w	r3, #15
   27544:	d10b      	bne.n	2755e <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   27546:	4b0c      	ldr	r3, [pc, #48]	; (27578 <errata_136_nrf52832+0x48>)
   27548:	681b      	ldr	r3, [r3, #0]
   2754a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   2754e:	2b30      	cmp	r3, #48	; 0x30
   27550:	d007      	beq.n	27562 <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   27552:	2b40      	cmp	r3, #64	; 0x40
   27554:	d007      	beq.n	27566 <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   27556:	2b50      	cmp	r3, #80	; 0x50
   27558:	d007      	beq.n	2756a <errata_136_nrf52832+0x3a>
	return false;
   2755a:	2000      	movs	r0, #0
   2755c:	4770      	bx	lr
   2755e:	2000      	movs	r0, #0
   27560:	4770      	bx	lr
			return true;
   27562:	2001      	movs	r0, #1
   27564:	4770      	bx	lr
			return true;
   27566:	2001      	movs	r0, #1
   27568:	4770      	bx	lr
			return true;
   2756a:	2001      	movs	r0, #1
}
   2756c:	4770      	bx	lr
   2756e:	bf00      	nop
   27570:	f0000fe0 	.word	0xf0000fe0
   27574:	f0000fe4 	.word	0xf0000fe4
   27578:	f0000fe8 	.word	0xf0000fe8

0002757c <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   2757c:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   2757e:	f7ff ff65 	bl	2744c <ftpan_32>
   27582:	b120      	cbz	r0, 2758e <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   27584:	4a32      	ldr	r2, [pc, #200]	; (27650 <nordicsemi_nrf52832_init+0xd4>)
   27586:	68d3      	ldr	r3, [r2, #12]
   27588:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   2758c:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   2758e:	f7ff ff83 	bl	27498 <ftpan_37>
   27592:	b110      	cbz	r0, 2759a <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   27594:	2203      	movs	r2, #3
   27596:	4b2f      	ldr	r3, [pc, #188]	; (27654 <nordicsemi_nrf52832_init+0xd8>)
   27598:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   2759a:	f7ff ffa3 	bl	274e4 <ftpan_36>
   2759e:	b130      	cbz	r0, 275ae <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   275a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   275a4:	2200      	movs	r2, #0
   275a6:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   275aa:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   275ae:	f7ff ffbf 	bl	27530 <errata_136_nrf52832>
   275b2:	b160      	cbz	r0, 275ce <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   275b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   275b8:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   275bc:	f013 0f01 	tst.w	r3, #1
   275c0:	d005      	beq.n	275ce <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   275c2:	f06f 0201 	mvn.w	r2, #1
   275c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   275ca:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   275ce:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   275d2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   275d6:	2b00      	cmp	r3, #0
   275d8:	db06      	blt.n	275e8 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   275da:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   275de:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   275e2:	2b00      	cmp	r3, #0
   275e4:	db00      	blt.n	275e8 <nordicsemi_nrf52832_init+0x6c>
   275e6:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   275e8:	2201      	movs	r2, #1
   275ea:	4b1b      	ldr	r3, [pc, #108]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   275ec:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   275f0:	4b19      	ldr	r3, [pc, #100]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   275f2:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   275f6:	2b00      	cmp	r3, #0
   275f8:	d0fa      	beq.n	275f0 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   275fa:	2215      	movs	r2, #21
   275fc:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27600:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27604:	4b14      	ldr	r3, [pc, #80]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   27606:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2760a:	2b00      	cmp	r3, #0
   2760c:	d0fa      	beq.n	27604 <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   2760e:	2215      	movs	r2, #21
   27610:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   27614:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   27618:	4b0f      	ldr	r3, [pc, #60]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   2761a:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   2761e:	2b00      	cmp	r3, #0
   27620:	d0fa      	beq.n	27618 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   27622:	2200      	movs	r2, #0
   27624:	4b0c      	ldr	r3, [pc, #48]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   27626:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   2762a:	4b0b      	ldr	r3, [pc, #44]	; (27658 <nordicsemi_nrf52832_init+0xdc>)
   2762c:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   27630:	2b00      	cmp	r3, #0
   27632:	d0fa      	beq.n	2762a <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   27634:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   27638:	4908      	ldr	r1, [pc, #32]	; (2765c <nordicsemi_nrf52832_init+0xe0>)
   2763a:	68ca      	ldr	r2, [r1, #12]
   2763c:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   27640:	4b07      	ldr	r3, [pc, #28]	; (27660 <nordicsemi_nrf52832_init+0xe4>)
   27642:	4313      	orrs	r3, r2
   27644:	60cb      	str	r3, [r1, #12]
   27646:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   2764a:	bf00      	nop
   2764c:	e7fd      	b.n	2764a <nordicsemi_nrf52832_init+0xce>
   2764e:	bf00      	nop
   27650:	e000edf0 	.word	0xe000edf0
   27654:	400005a0 	.word	0x400005a0
   27658:	4001e000 	.word	0x4001e000
   2765c:	e000ed00 	.word	0xe000ed00
   27660:	05fa0004 	.word	0x05fa0004

00027664 <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   27664:	4a01      	ldr	r2, [pc, #4]	; (2766c <clock_init+0x8>)
   27666:	4b02      	ldr	r3, [pc, #8]	; (27670 <clock_init+0xc>)
   27668:	601a      	str	r2, [r3, #0]
   2766a:	4770      	bx	lr
   2766c:	03d09000 	.word	0x03d09000
   27670:	2000c634 	.word	0x2000c634

00027674 <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   27674:	b510      	push	{r4, lr}
	__asm__ volatile(
   27676:	f04f 0320 	mov.w	r3, #32
   2767a:	f3ef 8411 	mrs	r4, BASEPRI
   2767e:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   27682:	f7ff ff7b 	bl	2757c <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   27686:	4b05      	ldr	r3, [pc, #20]	; (2769c <nordicsemi_nrf52_init+0x28>)
   27688:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2768c:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   2768e:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   27690:	f7ff ffe8 	bl	27664 <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27694:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   27698:	2000      	movs	r0, #0
   2769a:	bd10      	pop	{r4, pc}
   2769c:	e000ed00 	.word	0xe000ed00

000276a0 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   276a0:	4808      	ldr	r0, [pc, #32]	; (276c4 <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   276a2:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   276a4:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   276a6:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   276a8:	d80b      	bhi.n	276c2 <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   276aa:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   276ac:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   276ae:	d008      	beq.n	276c2 <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   276b0:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   276b2:	f001 fd1f 	bl	290f4 <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   276b6:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   276ba:	4903      	ldr	r1, [pc, #12]	; (276c8 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   276bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   276c0:	600a      	str	r2, [r1, #0]

000276c2 <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   276c2:	4770      	bx	lr
    ldr r0, =_kernel
   276c4:	20002880 	.word	0x20002880
    ldr r1, =_SCS_ICSR
   276c8:	e000ed04 	.word	0xe000ed04

000276cc <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   276cc:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   276ce:	e00a      	b.n	276e6 <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   276d0:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   276d2:	2b00      	cmp	r3, #0
   276d4:	db0a      	blt.n	276ec <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   276d6:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   276da:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   276de:	2120      	movs	r1, #32
   276e0:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   276e4:	3201      	adds	r2, #1
   276e6:	2a26      	cmp	r2, #38	; 0x26
   276e8:	ddf2      	ble.n	276d0 <_IntLibInit+0x4>
	}
}
   276ea:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   276ec:	f002 010f 	and.w	r1, r2, #15
   276f0:	4b02      	ldr	r3, [pc, #8]	; (276fc <_IntLibInit+0x30>)
   276f2:	440b      	add	r3, r1
   276f4:	2120      	movs	r1, #32
   276f6:	7619      	strb	r1, [r3, #24]
   276f8:	e7f4      	b.n	276e4 <_IntLibInit+0x18>
   276fa:	bf00      	nop
   276fc:	e000ecfc 	.word	0xe000ecfc

00027700 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   27700:	490e      	ldr	r1, [pc, #56]	; (2773c <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27702:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   27704:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   27708:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   2770a:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   2770e:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   27712:	4f0b      	ldr	r7, [pc, #44]	; (27740 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   27714:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27718:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2771a:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   2771e:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   27720:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   27722:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   27724:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   27726:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   27728:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   2772a:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   2772e:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   27732:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   27736:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   2773a:	4770      	bx	lr
    ldr r1, =_kernel
   2773c:	20002880 	.word	0x20002880
    ldr v4, =_SCS_ICSR
   27740:	e000ed04 	.word	0xe000ed04

00027744 <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   27744:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   27748:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   2774a:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   2774e:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   27752:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   27754:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   27758:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   2775c:	d001      	beq.n	27762 <_context_switch>

    cmp r1, #2
   2775e:	2902      	cmp	r1, #2
    beq _oops
   27760:	d007      	beq.n	27772 <_oops>

00027762 <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   27762:	4040      	eors	r0, r0
    msr BASEPRI, r0
   27764:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   27768:	4904      	ldr	r1, [pc, #16]	; (2777c <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   2776a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   2776e:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   27770:	4770      	bx	lr

00027772 <_oops>:

_oops:
    push {lr}
   27772:	b500      	push	{lr}
    blx _do_kernel_oops
   27774:	f000 fa82 	bl	27c7c <_do_kernel_oops>
    pop {pc}
   27778:	bd00      	pop	{pc}
   2777a:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   2777c:	e000ed04 	.word	0xe000ed04

00027780 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   27780:	4904      	ldr	r1, [pc, #16]	; (27794 <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   27782:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   27784:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   27786:	4904      	ldr	r1, [pc, #16]	; (27798 <__swap+0x18>)
    ldr r1, [r1]
   27788:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   2778a:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   2778c:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   2778e:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   27790:	4770      	bx	lr
   27792:	0000      	.short	0x0000
    ldr r1, =_kernel
   27794:	20002880 	.word	0x20002880
    ldr r1, =_k_neg_eagain
   27798:	00033348 	.word	0x00033348

0002779c <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   2779c:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   2779e:	4802      	ldr	r0, [pc, #8]	; (277a8 <_DebugMonitor+0xc>)
   277a0:	f7db fc34 	bl	300c <printk>
   277a4:	bd08      	pop	{r3, pc}
   277a6:	bf00      	nop
   277a8:	00032f84 	.word	0x00032f84

000277ac <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   277ac:	b508      	push	{r3, lr}
   277ae:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   277b0:	290f      	cmp	r1, #15
   277b2:	dd05      	ble.n	277c0 <_ReservedException+0x14>
   277b4:	4903      	ldr	r1, [pc, #12]	; (277c4 <_ReservedException+0x18>)
   277b6:	3a10      	subs	r2, #16
   277b8:	4803      	ldr	r0, [pc, #12]	; (277c8 <_ReservedException+0x1c>)
   277ba:	f7db fc27 	bl	300c <printk>
   277be:	bd08      	pop	{r3, pc}
   277c0:	4902      	ldr	r1, [pc, #8]	; (277cc <_ReservedException+0x20>)
   277c2:	e7f8      	b.n	277b6 <_ReservedException+0xa>
   277c4:	0003310c 	.word	0x0003310c
   277c8:	00033128 	.word	0x00033128
   277cc:	000330f4 	.word	0x000330f4

000277d0 <_FaultThreadShow>:
{
   277d0:	b510      	push	{r4, lr}
   277d2:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   277d4:	f001 fc60 	bl	29098 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   277d8:	69a2      	ldr	r2, [r4, #24]
   277da:	4601      	mov	r1, r0
   277dc:	4801      	ldr	r0, [pc, #4]	; (277e4 <_FaultThreadShow+0x14>)
   277de:	f7db fc15 	bl	300c <printk>
   277e2:	bd10      	pop	{r4, pc}
   277e4:	00032fbc 	.word	0x00032fbc

000277e8 <_MpuFault>:
{
   277e8:	b538      	push	{r3, r4, r5, lr}
   277ea:	4604      	mov	r4, r0
   277ec:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   277ee:	481e      	ldr	r0, [pc, #120]	; (27868 <_MpuFault+0x80>)
   277f0:	f7db fc0c 	bl	300c <printk>
	_FaultThreadShow(esf);
   277f4:	4620      	mov	r0, r4
   277f6:	f7ff ffeb 	bl	277d0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   277fa:	4b1c      	ldr	r3, [pc, #112]	; (2786c <_MpuFault+0x84>)
   277fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   277fe:	f013 0f10 	tst.w	r3, #16
   27802:	d10f      	bne.n	27824 <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   27804:	4b19      	ldr	r3, [pc, #100]	; (2786c <_MpuFault+0x84>)
   27806:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27808:	f013 0f08 	tst.w	r3, #8
   2780c:	d10e      	bne.n	2782c <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   2780e:	4b17      	ldr	r3, [pc, #92]	; (2786c <_MpuFault+0x84>)
   27810:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27812:	f013 0f02 	tst.w	r3, #2
   27816:	d10d      	bne.n	27834 <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   27818:	4b14      	ldr	r3, [pc, #80]	; (2786c <_MpuFault+0x84>)
   2781a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2781c:	f013 0f01 	tst.w	r3, #1
   27820:	d11d      	bne.n	2785e <_MpuFault+0x76>
   27822:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   27824:	4812      	ldr	r0, [pc, #72]	; (27870 <_MpuFault+0x88>)
   27826:	f7db fbf1 	bl	300c <printk>
   2782a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   2782c:	4811      	ldr	r0, [pc, #68]	; (27874 <_MpuFault+0x8c>)
   2782e:	f7db fbed 	bl	300c <printk>
   27832:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   27834:	4810      	ldr	r0, [pc, #64]	; (27878 <_MpuFault+0x90>)
   27836:	f7db fbe9 	bl	300c <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   2783a:	4b0c      	ldr	r3, [pc, #48]	; (2786c <_MpuFault+0x84>)
   2783c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2783e:	f013 0f80 	tst.w	r3, #128	; 0x80
   27842:	d0ee      	beq.n	27822 <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   27844:	4b09      	ldr	r3, [pc, #36]	; (2786c <_MpuFault+0x84>)
   27846:	6b59      	ldr	r1, [r3, #52]	; 0x34
   27848:	480c      	ldr	r0, [pc, #48]	; (2787c <_MpuFault+0x94>)
   2784a:	f7db fbdf 	bl	300c <printk>
			if (fromHardFault) {
   2784e:	2d00      	cmp	r5, #0
   27850:	d0e7      	beq.n	27822 <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   27852:	4a06      	ldr	r2, [pc, #24]	; (2786c <_MpuFault+0x84>)
   27854:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   2785a:	6293      	str	r3, [r2, #40]	; 0x28
   2785c:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   2785e:	4808      	ldr	r0, [pc, #32]	; (27880 <_MpuFault+0x98>)
   27860:	f7db fbd4 	bl	300c <printk>
}
   27864:	e7dd      	b.n	27822 <_MpuFault+0x3a>
   27866:	bf00      	nop
   27868:	00033064 	.word	0x00033064
   2786c:	e000ed00 	.word	0xe000ed00
   27870:	0003307c 	.word	0x0003307c
   27874:	00033090 	.word	0x00033090
   27878:	000330a4 	.word	0x000330a4
   2787c:	000330c0 	.word	0x000330c0
   27880:	000330d4 	.word	0x000330d4

00027884 <_BusFault>:
{
   27884:	b538      	push	{r3, r4, r5, lr}
   27886:	4604      	mov	r4, r0
   27888:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   2788a:	4827      	ldr	r0, [pc, #156]	; (27928 <_BusFault+0xa4>)
   2788c:	f7db fbbe 	bl	300c <printk>
	_FaultThreadShow(esf);
   27890:	4620      	mov	r0, r4
   27892:	f7ff ff9d 	bl	277d0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   27896:	4b25      	ldr	r3, [pc, #148]	; (2792c <_BusFault+0xa8>)
   27898:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2789a:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   2789e:	d114      	bne.n	278ca <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   278a0:	4b22      	ldr	r3, [pc, #136]	; (2792c <_BusFault+0xa8>)
   278a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278a4:	f413 6f00 	tst.w	r3, #2048	; 0x800
   278a8:	d113      	bne.n	278d2 <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   278aa:	4b20      	ldr	r3, [pc, #128]	; (2792c <_BusFault+0xa8>)
   278ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278ae:	f413 7f00 	tst.w	r3, #512	; 0x200
   278b2:	d112      	bne.n	278da <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   278b4:	4b1d      	ldr	r3, [pc, #116]	; (2792c <_BusFault+0xa8>)
   278b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278b8:	f413 6f80 	tst.w	r3, #1024	; 0x400
   278bc:	d12b      	bne.n	27916 <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   278be:	4b1b      	ldr	r3, [pc, #108]	; (2792c <_BusFault+0xa8>)
   278c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278c2:	f413 7f80 	tst.w	r3, #256	; 0x100
   278c6:	d12a      	bne.n	2791e <_BusFault+0x9a>
   278c8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   278ca:	4819      	ldr	r0, [pc, #100]	; (27930 <_BusFault+0xac>)
   278cc:	f7db fb9e 	bl	300c <printk>
   278d0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   278d2:	4818      	ldr	r0, [pc, #96]	; (27934 <_BusFault+0xb0>)
   278d4:	f7db fb9a 	bl	300c <printk>
   278d8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   278da:	4817      	ldr	r0, [pc, #92]	; (27938 <_BusFault+0xb4>)
   278dc:	f7db fb96 	bl	300c <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   278e0:	4b12      	ldr	r3, [pc, #72]	; (2792c <_BusFault+0xa8>)
   278e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278e4:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   278e8:	d108      	bne.n	278fc <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   278ea:	4b10      	ldr	r3, [pc, #64]	; (2792c <_BusFault+0xa8>)
   278ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   278ee:	f413 6f80 	tst.w	r3, #1024	; 0x400
   278f2:	d0e9      	beq.n	278c8 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   278f4:	4811      	ldr	r0, [pc, #68]	; (2793c <_BusFault+0xb8>)
   278f6:	f7db fb89 	bl	300c <printk>
   278fa:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   278fc:	4b0b      	ldr	r3, [pc, #44]	; (2792c <_BusFault+0xa8>)
   278fe:	6b99      	ldr	r1, [r3, #56]	; 0x38
   27900:	480f      	ldr	r0, [pc, #60]	; (27940 <_BusFault+0xbc>)
   27902:	f7db fb83 	bl	300c <printk>
			if (fromHardFault) {
   27906:	2d00      	cmp	r5, #0
   27908:	d0ef      	beq.n	278ea <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   2790a:	4a08      	ldr	r2, [pc, #32]	; (2792c <_BusFault+0xa8>)
   2790c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   2790e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   27912:	6293      	str	r3, [r2, #40]	; 0x28
   27914:	e7e9      	b.n	278ea <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   27916:	4809      	ldr	r0, [pc, #36]	; (2793c <_BusFault+0xb8>)
   27918:	f7db fb78 	bl	300c <printk>
   2791c:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   2791e:	4809      	ldr	r0, [pc, #36]	; (27944 <_BusFault+0xc0>)
   27920:	f7db fb74 	bl	300c <printk>
}
   27924:	e7d0      	b.n	278c8 <_BusFault+0x44>
   27926:	bf00      	nop
   27928:	00032f18 	.word	0x00032f18
   2792c:	e000ed00 	.word	0xe000ed00
   27930:	0003307c 	.word	0x0003307c
   27934:	00033090 	.word	0x00033090
   27938:	00032f30 	.word	0x00032f30
   2793c:	00032f4c 	.word	0x00032f4c
   27940:	000330c0 	.word	0x000330c0
   27944:	00032f68 	.word	0x00032f68

00027948 <_UsageFault>:
{
   27948:	b510      	push	{r4, lr}
   2794a:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   2794c:	4821      	ldr	r0, [pc, #132]	; (279d4 <_UsageFault+0x8c>)
   2794e:	f7db fb5d 	bl	300c <printk>
	_FaultThreadShow(esf);
   27952:	4620      	mov	r0, r4
   27954:	f7ff ff3c 	bl	277d0 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   27958:	4b1f      	ldr	r3, [pc, #124]	; (279d8 <_UsageFault+0x90>)
   2795a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2795c:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   27960:	d120      	bne.n	279a4 <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   27962:	4b1d      	ldr	r3, [pc, #116]	; (279d8 <_UsageFault+0x90>)
   27964:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27966:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   2796a:	d11f      	bne.n	279ac <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   2796c:	4b1a      	ldr	r3, [pc, #104]	; (279d8 <_UsageFault+0x90>)
   2796e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27970:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   27974:	d11e      	bne.n	279b4 <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   27976:	4b18      	ldr	r3, [pc, #96]	; (279d8 <_UsageFault+0x90>)
   27978:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2797a:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   2797e:	d11d      	bne.n	279bc <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   27980:	4b15      	ldr	r3, [pc, #84]	; (279d8 <_UsageFault+0x90>)
   27982:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   27984:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   27988:	d11c      	bne.n	279c4 <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   2798a:	4b13      	ldr	r3, [pc, #76]	; (279d8 <_UsageFault+0x90>)
   2798c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   2798e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   27992:	d11b      	bne.n	279cc <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   27994:	4a10      	ldr	r2, [pc, #64]	; (279d8 <_UsageFault+0x90>)
   27996:	6a93      	ldr	r3, [r2, #40]	; 0x28
   27998:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   2799c:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   279a0:	6293      	str	r3, [r2, #40]	; 0x28
   279a2:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   279a4:	480d      	ldr	r0, [pc, #52]	; (279dc <_UsageFault+0x94>)
   279a6:	f7db fb31 	bl	300c <printk>
   279aa:	e7da      	b.n	27962 <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   279ac:	480c      	ldr	r0, [pc, #48]	; (279e0 <_UsageFault+0x98>)
   279ae:	f7db fb2d 	bl	300c <printk>
   279b2:	e7db      	b.n	2796c <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   279b4:	480b      	ldr	r0, [pc, #44]	; (279e4 <_UsageFault+0x9c>)
   279b6:	f7db fb29 	bl	300c <printk>
   279ba:	e7dc      	b.n	27976 <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   279bc:	480a      	ldr	r0, [pc, #40]	; (279e8 <_UsageFault+0xa0>)
   279be:	f7db fb25 	bl	300c <printk>
   279c2:	e7dd      	b.n	27980 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   279c4:	4809      	ldr	r0, [pc, #36]	; (279ec <_UsageFault+0xa4>)
   279c6:	f7db fb21 	bl	300c <printk>
   279ca:	e7de      	b.n	2798a <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   279cc:	4808      	ldr	r0, [pc, #32]	; (279f0 <_UsageFault+0xa8>)
   279ce:	f7db fb1d 	bl	300c <printk>
   279d2:	e7df      	b.n	27994 <_UsageFault+0x4c>
   279d4:	0003313c 	.word	0x0003313c
   279d8:	e000ed00 	.word	0xe000ed00
   279dc:	00033158 	.word	0x00033158
   279e0:	0003316c 	.word	0x0003316c
   279e4:	00033188 	.word	0x00033188
   279e8:	000331a8 	.word	0x000331a8
   279ec:	000331d0 	.word	0x000331d0
   279f0:	000331ec 	.word	0x000331ec

000279f4 <_HardFault>:
{
   279f4:	b510      	push	{r4, lr}
   279f6:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   279f8:	4816      	ldr	r0, [pc, #88]	; (27a54 <_HardFault+0x60>)
   279fa:	f7db fb07 	bl	300c <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   279fe:	4b16      	ldr	r3, [pc, #88]	; (27a58 <_HardFault+0x64>)
   27a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27a02:	f013 0f02 	tst.w	r3, #2
   27a06:	d105      	bne.n	27a14 <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   27a08:	4b13      	ldr	r3, [pc, #76]	; (27a58 <_HardFault+0x64>)
   27a0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   27a0c:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   27a10:	d104      	bne.n	27a1c <_HardFault+0x28>
   27a12:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   27a14:	4811      	ldr	r0, [pc, #68]	; (27a5c <_HardFault+0x68>)
   27a16:	f7db faf9 	bl	300c <printk>
   27a1a:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   27a1c:	4810      	ldr	r0, [pc, #64]	; (27a60 <_HardFault+0x6c>)
   27a1e:	f7db faf5 	bl	300c <printk>
		if (SCB_MMFSR) {
   27a22:	4b10      	ldr	r3, [pc, #64]	; (27a64 <_HardFault+0x70>)
   27a24:	781b      	ldrb	r3, [r3, #0]
   27a26:	b95b      	cbnz	r3, 27a40 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   27a28:	4b0f      	ldr	r3, [pc, #60]	; (27a68 <_HardFault+0x74>)
   27a2a:	781b      	ldrb	r3, [r3, #0]
   27a2c:	b96b      	cbnz	r3, 27a4a <_HardFault+0x56>
		} else if (SCB_UFSR) {
   27a2e:	4b0f      	ldr	r3, [pc, #60]	; (27a6c <_HardFault+0x78>)
   27a30:	881b      	ldrh	r3, [r3, #0]
   27a32:	b29b      	uxth	r3, r3
   27a34:	2b00      	cmp	r3, #0
   27a36:	d0ec      	beq.n	27a12 <_HardFault+0x1e>
			_UsageFault(esf);
   27a38:	4620      	mov	r0, r4
   27a3a:	f7ff ff85 	bl	27948 <_UsageFault>
}
   27a3e:	e7e8      	b.n	27a12 <_HardFault+0x1e>
			_MpuFault(esf, 1);
   27a40:	2101      	movs	r1, #1
   27a42:	4620      	mov	r0, r4
   27a44:	f7ff fed0 	bl	277e8 <_MpuFault>
   27a48:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   27a4a:	2101      	movs	r1, #1
   27a4c:	4620      	mov	r0, r4
   27a4e:	f7ff ff19 	bl	27884 <_BusFault>
   27a52:	bd10      	pop	{r4, pc}
   27a54:	00033008 	.word	0x00033008
   27a58:	e000ed00 	.word	0xe000ed00
   27a5c:	00033020 	.word	0x00033020
   27a60:	00033044 	.word	0x00033044
   27a64:	e000ed28 	.word	0xe000ed28
   27a68:	e000ed29 	.word	0xe000ed29
   27a6c:	e000ed2c 	.word	0xe000ed2c

00027a70 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   27a70:	b508      	push	{r3, lr}
	switch (fault) {
   27a72:	1ecb      	subs	r3, r1, #3
   27a74:	2b09      	cmp	r3, #9
   27a76:	d817      	bhi.n	27aa8 <_FaultDump+0x38>
   27a78:	e8df f003 	tbb	[pc, r3]
   27a7c:	100c0805 	.word	0x100c0805
   27a80:	16161616 	.word	0x16161616
   27a84:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   27a86:	f7ff ffb5 	bl	279f4 <_HardFault>
		break;
   27a8a:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   27a8c:	2100      	movs	r1, #0
   27a8e:	f7ff feab 	bl	277e8 <_MpuFault>
		break;
   27a92:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   27a94:	2100      	movs	r1, #0
   27a96:	f7ff fef5 	bl	27884 <_BusFault>
		break;
   27a9a:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   27a9c:	f7ff ff54 	bl	27948 <_UsageFault>
		break;
   27aa0:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   27aa2:	f7ff fe7b 	bl	2779c <_DebugMonitor>
		break;
   27aa6:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   27aa8:	f7ff fe80 	bl	277ac <_ReservedException>
   27aac:	bd08      	pop	{r3, pc}
	...

00027ab0 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   27ab0:	b510      	push	{r4, lr}
   27ab2:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   27ab4:	4b05      	ldr	r3, [pc, #20]	; (27acc <_Fault+0x1c>)
   27ab6:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   27ab8:	f3c1 0108 	ubfx	r1, r1, #0, #9
   27abc:	f7ff ffd8 	bl	27a70 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   27ac0:	4621      	mov	r1, r4
   27ac2:	2000      	movs	r0, #0
   27ac4:	f000 f8e0 	bl	27c88 <_SysFatalErrorHandler>
   27ac8:	bd10      	pop	{r4, pc}
   27aca:	bf00      	nop
   27acc:	e000ed00 	.word	0xe000ed00

00027ad0 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   27ad0:	4a02      	ldr	r2, [pc, #8]	; (27adc <_FaultInit+0xc>)
   27ad2:	6953      	ldr	r3, [r2, #20]
   27ad4:	f043 0310 	orr.w	r3, r3, #16
   27ad8:	6153      	str	r3, [r2, #20]
   27ada:	4770      	bx	lr
   27adc:	e000ed00 	.word	0xe000ed00

00027ae0 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   27ae0:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27ae2:	095b      	lsrs	r3, r3, #5
   27ae4:	f000 001f 	and.w	r0, r0, #31
   27ae8:	2201      	movs	r2, #1
   27aea:	fa02 f000 	lsl.w	r0, r2, r0
   27aee:	4a02      	ldr	r2, [pc, #8]	; (27af8 <_arch_irq_enable+0x18>)
   27af0:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27af4:	4770      	bx	lr
   27af6:	bf00      	nop
   27af8:	e000e100 	.word	0xe000e100

00027afc <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   27afc:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   27afe:	095b      	lsrs	r3, r3, #5
   27b00:	f000 001f 	and.w	r0, r0, #31
   27b04:	2201      	movs	r2, #1
   27b06:	fa02 f000 	lsl.w	r0, r2, r0
   27b0a:	3320      	adds	r3, #32
   27b0c:	4a01      	ldr	r2, [pc, #4]	; (27b14 <_arch_irq_disable+0x18>)
   27b0e:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   27b12:	4770      	bx	lr
   27b14:	e000e100 	.word	0xe000e100

00027b18 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   27b18:	0942      	lsrs	r2, r0, #5
   27b1a:	4b05      	ldr	r3, [pc, #20]	; (27b30 <_arch_irq_is_enabled+0x18>)
   27b1c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27b20:	f000 001f 	and.w	r0, r0, #31
   27b24:	2301      	movs	r3, #1
   27b26:	fa03 f000 	lsl.w	r0, r3, r0
}
   27b2a:	4010      	ands	r0, r2
   27b2c:	4770      	bx	lr
   27b2e:	bf00      	nop
   27b30:	e000e100 	.word	0xe000e100

00027b34 <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   27b34:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   27b36:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27b38:	2b00      	cmp	r3, #0
   27b3a:	db08      	blt.n	27b4e <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27b3c:	0149      	lsls	r1, r1, #5
   27b3e:	b2c9      	uxtb	r1, r1
   27b40:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   27b44:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27b48:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   27b4c:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27b4e:	f000 000f 	and.w	r0, r0, #15
   27b52:	0149      	lsls	r1, r1, #5
   27b54:	b2c9      	uxtb	r1, r1
   27b56:	4b01      	ldr	r3, [pc, #4]	; (27b5c <_irq_priority_set+0x28>)
   27b58:	5419      	strb	r1, [r3, r0]
   27b5a:	4770      	bx	lr
   27b5c:	e000ed14 	.word	0xe000ed14

00027b60 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27b60:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   27b62:	f000 f847 	bl	27bf4 <__bus_fault>
   27b66:	bd08      	pop	{r3, pc}

00027b68 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27b68:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   27b6a:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   27b6c:	4b04      	ldr	r3, [pc, #16]	; (27b80 <_arch_isr_direct_pm+0x18>)
   27b6e:	6958      	ldr	r0, [r3, #20]
   27b70:	b908      	cbnz	r0, 27b76 <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   27b72:	b662      	cpsie	i
   27b74:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   27b76:	2200      	movs	r2, #0
   27b78:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   27b7a:	f000 f9b5 	bl	27ee8 <_sys_power_save_idle_exit>
   27b7e:	e7f8      	b.n	27b72 <_arch_isr_direct_pm+0xa>
   27b80:	20002880 	.word	0x20002880

00027b84 <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   27b84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b86:	4605      	mov	r5, r0
   27b88:	460c      	mov	r4, r1
   27b8a:	4616      	mov	r6, r2
   27b8c:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   27b8e:	21aa      	movs	r1, #170	; 0xaa
   27b90:	4620      	mov	r0, r4
   27b92:	f002 feed 	bl	2a970 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   27b96:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27b98:	2204      	movs	r2, #4
   27b9a:	9909      	ldr	r1, [sp, #36]	; 0x24
   27b9c:	4628      	mov	r0, r5
   27b9e:	f001 ff51 	bl	29a44 <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   27ba2:	2300      	movs	r3, #0
   27ba4:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   27ba6:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   27ba8:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   27baa:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   27bac:	f1a6 0120 	sub.w	r1, r6, #32
   27bb0:	4421      	add	r1, r4
   27bb2:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   27bb6:	4a08      	ldr	r2, [pc, #32]	; (27bd8 <_new_thread+0x54>)
   27bb8:	f022 0201 	bic.w	r2, r2, #1
   27bbc:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   27bbe:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   27bc0:	9a06      	ldr	r2, [sp, #24]
   27bc2:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   27bc4:	9a07      	ldr	r2, [sp, #28]
   27bc6:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   27bc8:	9a08      	ldr	r2, [sp, #32]
   27bca:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   27bcc:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   27bd0:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   27bd2:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   27bd4:	662b      	str	r3, [r5, #96]	; 0x60
   27bd6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27bd8:	0002972d 	.word	0x0002972d

00027bdc <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   27bdc:	4901      	ldr	r1, [pc, #4]	; (27be4 <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   27bde:	2210      	movs	r2, #16
	str r2, [r1]
   27be0:	600a      	str	r2, [r1, #0]
	bx lr
   27be2:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   27be4:	e000ed10 	.word	0xe000ed10

00027be8 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   27be8:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27bea:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   27bee:	bf30      	wfi

	bx lr
   27bf0:	4770      	bx	lr
   27bf2:	bf00      	nop

00027bf4 <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   27bf4:	4040      	eors	r0, r0
	msr BASEPRI, r0
   27bf6:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   27bfa:	f8df c01c 	ldr.w	ip, [pc, #28]	; 27c18 <__bus_fault+0x24>
	ldr ip, [ip]
   27bfe:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   27c02:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   27c06:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   27c08:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   27c0c:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   27c10:	b500      	push	{lr}
	bl _Fault
   27c12:	f7ff ff4d 	bl	27ab0 <_Fault>

	pop {pc}
   27c16:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   27c18:	e000ed04 	.word	0xe000ed04

00027c1c <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   27c1c:	b538      	push	{r3, r4, r5, lr}
   27c1e:	4604      	mov	r4, r0
   27c20:	460d      	mov	r5, r1
	switch (reason) {
   27c22:	2804      	cmp	r0, #4
   27c24:	d017      	beq.n	27c56 <_NanoFatalErrorHandler+0x3a>
   27c26:	2805      	cmp	r0, #5
   27c28:	d019      	beq.n	27c5e <_NanoFatalErrorHandler+0x42>
   27c2a:	2803      	cmp	r0, #3
   27c2c:	d004      	beq.n	27c38 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   27c2e:	4601      	mov	r1, r0
   27c30:	480d      	ldr	r0, [pc, #52]	; (27c68 <_NanoFatalErrorHandler+0x4c>)
   27c32:	f7db f9eb 	bl	300c <printk>
		break;
   27c36:	e002      	b.n	27c3e <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27c38:	480c      	ldr	r0, [pc, #48]	; (27c6c <_NanoFatalErrorHandler+0x50>)
   27c3a:	f7db f9e7 	bl	300c <printk>
   27c3e:	f001 fa2b 	bl	29098 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   27c42:	69aa      	ldr	r2, [r5, #24]
   27c44:	4601      	mov	r1, r0
   27c46:	480a      	ldr	r0, [pc, #40]	; (27c70 <_NanoFatalErrorHandler+0x54>)
   27c48:	f7db f9e0 	bl	300c <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27c4c:	4629      	mov	r1, r5
   27c4e:	4620      	mov	r0, r4
   27c50:	f000 f81a 	bl	27c88 <_SysFatalErrorHandler>
   27c54:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   27c56:	4807      	ldr	r0, [pc, #28]	; (27c74 <_NanoFatalErrorHandler+0x58>)
   27c58:	f7db f9d8 	bl	300c <printk>
		break;
   27c5c:	e7ef      	b.n	27c3e <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27c5e:	4806      	ldr	r0, [pc, #24]	; (27c78 <_NanoFatalErrorHandler+0x5c>)
   27c60:	f7db f9d4 	bl	300c <printk>
		break;
   27c64:	e7eb      	b.n	27c3e <_NanoFatalErrorHandler+0x22>
   27c66:	bf00      	nop
   27c68:	00033278 	.word	0x00033278
   27c6c:	00033218 	.word	0x00033218
   27c70:	0003329c 	.word	0x0003329c
   27c74:	00033240 	.word	0x00033240
   27c78:	0003325c 	.word	0x0003325c

00027c7c <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27c7c:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27c7e:	4601      	mov	r1, r0
   27c80:	6800      	ldr	r0, [r0, #0]
   27c82:	f7ff ffcb 	bl	27c1c <_NanoFatalErrorHandler>
   27c86:	bd08      	pop	{r3, pc}

00027c88 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27c88:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27c8a:	2805      	cmp	r0, #5
   27c8c:	d00c      	beq.n	27ca8 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27c8e:	f001 fd31 	bl	296f4 <k_is_in_isr>
   27c92:	b910      	cbnz	r0, 27c9a <_SysFatalErrorHandler+0x12>
   27c94:	f001 fd42 	bl	2971c <_is_thread_essential>
   27c98:	b158      	cbz	r0, 27cb2 <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27c9a:	f001 fd2b 	bl	296f4 <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27c9e:	b130      	cbz	r0, 27cae <_SysFatalErrorHandler+0x26>
   27ca0:	4908      	ldr	r1, [pc, #32]	; (27cc4 <_SysFatalErrorHandler+0x3c>)
   27ca2:	4809      	ldr	r0, [pc, #36]	; (27cc8 <_SysFatalErrorHandler+0x40>)
   27ca4:	f7db f9b2 	bl	300c <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27ca8:	f7ff ff9e 	bl	27be8 <k_cpu_idle>
   27cac:	e7fc      	b.n	27ca8 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27cae:	4907      	ldr	r1, [pc, #28]	; (27ccc <_SysFatalErrorHandler+0x44>)
   27cb0:	e7f7      	b.n	27ca2 <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   27cb2:	4c07      	ldr	r4, [pc, #28]	; (27cd0 <_SysFatalErrorHandler+0x48>)
   27cb4:	68a1      	ldr	r1, [r4, #8]
   27cb6:	4807      	ldr	r0, [pc, #28]	; (27cd4 <_SysFatalErrorHandler+0x4c>)
   27cb8:	f7db f9a8 	bl	300c <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   27cbc:	68a0      	ldr	r0, [r4, #8]
   27cbe:	f000 f80b 	bl	27cd8 <_impl_k_thread_abort>
	return;
   27cc2:	bd10      	pop	{r4, pc}
   27cc4:	000326e8 	.word	0x000326e8
   27cc8:	000332ec 	.word	0x000332ec
   27ccc:	000332d8 	.word	0x000332d8
   27cd0:	20002880 	.word	0x20002880
   27cd4:	0003330c 	.word	0x0003330c

00027cd8 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   27cd8:	b538      	push	{r3, r4, r5, lr}
   27cda:	4605      	mov	r5, r0
	__asm__ volatile(
   27cdc:	f04f 0320 	mov.w	r3, #32
   27ce0:	f3ef 8411 	mrs	r4, BASEPRI
   27ce4:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   27ce8:	f001 fe28 	bl	2993c <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   27cec:	4b0b      	ldr	r3, [pc, #44]	; (27d1c <_impl_k_thread_abort+0x44>)
   27cee:	689b      	ldr	r3, [r3, #8]
   27cf0:	429d      	cmp	r5, r3
   27cf2:	d003      	beq.n	27cfc <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   27cf4:	4620      	mov	r0, r4
   27cf6:	f001 fa03 	bl	29100 <_reschedule_threads>
   27cfa:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   27cfc:	4b08      	ldr	r3, [pc, #32]	; (27d20 <_impl_k_thread_abort+0x48>)
   27cfe:	685b      	ldr	r3, [r3, #4]
   27d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
   27d04:	b12b      	cbz	r3, 27d12 <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   27d06:	4a06      	ldr	r2, [pc, #24]	; (27d20 <_impl_k_thread_abort+0x48>)
   27d08:	6853      	ldr	r3, [r2, #4]
   27d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   27d0e:	6053      	str	r3, [r2, #4]
   27d10:	e7f0      	b.n	27cf4 <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   27d12:	f001 f9ef 	bl	290f4 <_update_time_slice_before_swap>
#endif

	return __swap(key);
   27d16:	4620      	mov	r0, r4
   27d18:	f7ff fd32 	bl	27780 <__swap>
   27d1c:	20002880 	.word	0x20002880
   27d20:	e000ed00 	.word	0xe000ed00

00027d24 <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   27d24:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   27d26:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27d28:	4a0b      	ldr	r2, [pc, #44]	; (27d58 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27d2a:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27d2c:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27d2e:	bf1e      	ittt	ne
	movne	r1, #0
   27d30:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   27d32:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   27d34:	f000 f8d8 	blne	27ee8 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27d38:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27d3a:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27d3e:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   27d42:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   27d46:	4905      	ldr	r1, [pc, #20]	; (27d5c <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27d48:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27d4a:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27d4c:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27d4e:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   27d52:	f7ff bca5 	b.w	276a0 <_ExcExit>
   27d56:	0000      	.short	0x0000
	ldr r2, =_kernel
   27d58:	20002880 	.word	0x20002880
	ldr r1, =_sw_isr_table
   27d5c:	000000dc 	.word	0x000000dc

00027d60 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27d60:	2020      	movs	r0, #32
    msr BASEPRI, r0
   27d62:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   27d66:	4809      	ldr	r0, [pc, #36]	; (27d8c <__reset+0x2c>)
    ldr r1, =0xaa
   27d68:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27d6c:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27d70:	f002 fdfe 	bl	2a970 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   27d74:	4805      	ldr	r0, [pc, #20]	; (27d8c <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   27d76:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27d7a:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27d7c:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27d80:	2002      	movs	r0, #2
    msr CONTROL, r0
   27d82:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   27d86:	f000 b807 	b.w	27d98 <_PrepC>
   27d8a:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27d8c:	2000ad68 	.word	0x2000ad68

00027d90 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27d90:	bf30      	wfi
    b _SysNmiOnReset
   27d92:	f7ff bffd 	b.w	27d90 <_SysNmiOnReset>
   27d96:	bf00      	nop

00027d98 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27d98:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27d9a:	4a07      	ldr	r2, [pc, #28]	; (27db8 <_PrepC+0x20>)
   27d9c:	4b07      	ldr	r3, [pc, #28]	; (27dbc <_PrepC+0x24>)
   27d9e:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   27da2:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   27da4:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27da8:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27dac:	f000 f9d6 	bl	2815c <_bss_zero>
	_data_copy();
   27db0:	f000 f9e0 	bl	28174 <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   27db4:	f000 fa00 	bl	281b8 <_Cstart>
   27db8:	e000ed00 	.word	0xe000ed00
   27dbc:	00000000 	.word	0x00000000

00027dc0 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   27dc0:	b508      	push	{r3, lr}
	handler();
   27dc2:	f7ff ffe5 	bl	27d90 <_SysNmiOnReset>
	_ExcExit();
   27dc6:	f7ff fc6b 	bl	276a0 <_ExcExit>
   27dca:	bd08      	pop	{r3, pc}

00027dcc <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   27dcc:	4b05      	ldr	r3, [pc, #20]	; (27de4 <_region_init+0x18>)
   27dce:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27dd0:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   27dd4:	4308      	orrs	r0, r1
   27dd6:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   27dda:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   27ddc:	f042 0201 	orr.w	r2, r2, #1
   27de0:	611a      	str	r2, [r3, #16]
   27de2:	4770      	bx	lr
   27de4:	e000ed90 	.word	0xe000ed90

00027de8 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   27de8:	4b14      	ldr	r3, [pc, #80]	; (27e3c <_arm_mpu_config+0x54>)
   27dea:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   27dec:	4b14      	ldr	r3, [pc, #80]	; (27e40 <_arm_mpu_config+0x58>)
   27dee:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   27df0:	f3c3 2307 	ubfx	r3, r3, #8, #8
   27df4:	429a      	cmp	r2, r3
   27df6:	d81f      	bhi.n	27e38 <_arm_mpu_config+0x50>
{
   27df8:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   27dfa:	2400      	movs	r4, #0
   27dfc:	4b10      	ldr	r3, [pc, #64]	; (27e40 <_arm_mpu_config+0x58>)
   27dfe:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27e00:	e00b      	b.n	27e1a <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   27e02:	4b0e      	ldr	r3, [pc, #56]	; (27e3c <_arm_mpu_config+0x54>)
   27e04:	6859      	ldr	r1, [r3, #4]
   27e06:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   27e0a:	0093      	lsls	r3, r2, #2
   27e0c:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   27e0e:	6892      	ldr	r2, [r2, #8]
   27e10:	58c9      	ldr	r1, [r1, r3]
   27e12:	4620      	mov	r0, r4
   27e14:	f7ff ffda 	bl	27dcc <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27e18:	3401      	adds	r4, #1
   27e1a:	4b08      	ldr	r3, [pc, #32]	; (27e3c <_arm_mpu_config+0x54>)
   27e1c:	681b      	ldr	r3, [r3, #0]
   27e1e:	429c      	cmp	r4, r3
   27e20:	d3ef      	bcc.n	27e02 <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   27e22:	2205      	movs	r2, #5
   27e24:	4b06      	ldr	r3, [pc, #24]	; (27e40 <_arm_mpu_config+0x58>)
   27e26:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27e28:	2201      	movs	r2, #1
   27e2a:	4b06      	ldr	r3, [pc, #24]	; (27e44 <_arm_mpu_config+0x5c>)
   27e2c:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27e2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27e32:	f3bf 8f6f 	isb	sy
   27e36:	bd10      	pop	{r4, pc}
   27e38:	4770      	bx	lr
   27e3a:	bf00      	nop
   27e3c:	2000c638 	.word	0x2000c638
   27e40:	e000ed90 	.word	0xe000ed90
   27e44:	200027ac 	.word	0x200027ac

00027e48 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27e48:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27e4a:	f7ff ffcd 	bl	27de8 <_arm_mpu_config>

	return 0;
}
   27e4e:	2000      	movs	r0, #0
   27e50:	bd08      	pop	{r3, pc}
	...

00027e54 <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   27e54:	b538      	push	{r3, r4, r5, lr}
   27e56:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27e58:	4b07      	ldr	r3, [pc, #28]	; (27e78 <_sys_device_do_config_level+0x24>)
   27e5a:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27e5e:	e004      	b.n	27e6a <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27e60:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   27e62:	685b      	ldr	r3, [r3, #4]
   27e64:	4620      	mov	r0, r4
   27e66:	4798      	blx	r3
								info++) {
   27e68:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27e6a:	1c6b      	adds	r3, r5, #1
   27e6c:	4a02      	ldr	r2, [pc, #8]	; (27e78 <_sys_device_do_config_level+0x24>)
   27e6e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   27e72:	429c      	cmp	r4, r3
   27e74:	d3f4      	bcc.n	27e60 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   27e76:	bd38      	pop	{r3, r4, r5, pc}
   27e78:	00033334 	.word	0x00033334

00027e7c <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27e7c:	b538      	push	{r3, r4, r5, lr}
   27e7e:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27e80:	4c0a      	ldr	r4, [pc, #40]	; (27eac <device_get_binding+0x30>)
   27e82:	e000      	b.n	27e86 <device_get_binding+0xa>
   27e84:	340c      	adds	r4, #12
   27e86:	4b0a      	ldr	r3, [pc, #40]	; (27eb0 <device_get_binding+0x34>)
   27e88:	429c      	cmp	r4, r3
   27e8a:	d00c      	beq.n	27ea6 <device_get_binding+0x2a>
		if (!info->driver_api) {
   27e8c:	6863      	ldr	r3, [r4, #4]
   27e8e:	2b00      	cmp	r3, #0
   27e90:	d0f8      	beq.n	27e84 <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   27e92:	6823      	ldr	r3, [r4, #0]
   27e94:	6819      	ldr	r1, [r3, #0]
   27e96:	42a9      	cmp	r1, r5
   27e98:	d006      	beq.n	27ea8 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27e9a:	4628      	mov	r0, r5
   27e9c:	f7d8 fab4 	bl	408 <strcmp>
   27ea0:	2800      	cmp	r0, #0
   27ea2:	d1ef      	bne.n	27e84 <device_get_binding+0x8>
   27ea4:	e000      	b.n	27ea8 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   27ea6:	2400      	movs	r4, #0
}
   27ea8:	4620      	mov	r0, r4
   27eaa:	bd38      	pop	{r3, r4, r5, pc}
   27eac:	2000d034 	.word	0x2000d034
   27eb0:	2000d0f4 	.word	0x2000d0f4

00027eb4 <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   27eb4:	4b01      	ldr	r3, [pc, #4]	; (27ebc <set_kernel_idle_time_in_ticks+0x8>)
   27eb6:	6158      	str	r0, [r3, #20]
   27eb8:	4770      	bx	lr
   27eba:	bf00      	nop
   27ebc:	20002880 	.word	0x20002880

00027ec0 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   27ec0:	b510      	push	{r4, lr}
   27ec2:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   27ec4:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27ec8:	d003      	beq.n	27ed2 <_sys_power_save_idle+0x12>
   27eca:	4b06      	ldr	r3, [pc, #24]	; (27ee4 <_sys_power_save_idle+0x24>)
   27ecc:	681b      	ldr	r3, [r3, #0]
   27ece:	4298      	cmp	r0, r3
   27ed0:	db02      	blt.n	27ed8 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   27ed2:	4620      	mov	r0, r4
   27ed4:	f7da fb0e 	bl	24f4 <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   27ed8:	4620      	mov	r0, r4
   27eda:	f7ff ffeb 	bl	27eb4 <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   27ede:	f7ff fe83 	bl	27be8 <k_cpu_idle>
   27ee2:	bd10      	pop	{r4, pc}
   27ee4:	2000c67c 	.word	0x2000c67c

00027ee8 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   27ee8:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   27eea:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   27eee:	d003      	beq.n	27ef8 <_sys_power_save_idle_exit+0x10>
   27ef0:	4b03      	ldr	r3, [pc, #12]	; (27f00 <_sys_power_save_idle_exit+0x18>)
   27ef2:	681b      	ldr	r3, [r3, #0]
   27ef4:	4298      	cmp	r0, r3
   27ef6:	db01      	blt.n	27efc <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   27ef8:	f7da fb12 	bl	2520 <_timer_idle_exit>
   27efc:	bd08      	pop	{r3, pc}
   27efe:	bf00      	nop
   27f00:	2000c67c 	.word	0x2000c67c

00027f04 <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   27f04:	b508      	push	{r3, lr}
   27f06:	e005      	b.n	27f14 <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f08:	2300      	movs	r3, #0
   27f0a:	e00e      	b.n	27f2a <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   27f0c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   27f10:	f7ff ffd6 	bl	27ec0 <_sys_power_save_idle>
   27f14:	f04f 0220 	mov.w	r2, #32
   27f18:	f3ef 8311 	mrs	r3, BASEPRI
   27f1c:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27f20:	4a04      	ldr	r2, [pc, #16]	; (27f34 <idle+0x30>)
   27f22:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f26:	4293      	cmp	r3, r2
   27f28:	d0ee      	beq.n	27f08 <idle+0x4>
   27f2a:	2b00      	cmp	r3, #0
   27f2c:	d0ee      	beq.n	27f0c <idle+0x8>
   27f2e:	6918      	ldr	r0, [r3, #16]
   27f30:	e7ee      	b.n	27f10 <idle+0xc>
   27f32:	bf00      	nop
   27f34:	20002880 	.word	0x20002880

00027f38 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27f38:	b480      	push	{r7}
   27f3a:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27f3c:	4b07      	ldr	r3, [pc, #28]	; (27f5c <switch_to_main_thread+0x24>)
   27f3e:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   27f42:	4907      	ldr	r1, [pc, #28]	; (27f60 <switch_to_main_thread+0x28>)
   27f44:	4a07      	ldr	r2, [pc, #28]	; (27f64 <switch_to_main_thread+0x2c>)
   27f46:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27f48:	4c07      	ldr	r4, [pc, #28]	; (27f68 <switch_to_main_thread+0x30>)
   27f4a:	4a08      	ldr	r2, [pc, #32]	; (27f6c <switch_to_main_thread+0x34>)
   27f4c:	f383 8809 	msr	PSP, r3
   27f50:	2100      	movs	r1, #0
   27f52:	f381 8811 	msr	BASEPRI, r1
   27f56:	4610      	mov	r0, r2
   27f58:	4720      	bx	r4
   27f5a:	bf00      	nop
   27f5c:	2000ac28 	.word	0x2000ac28
   27f60:	20002818 	.word	0x20002818
   27f64:	20002880 	.word	0x20002880
   27f68:	0002972d 	.word	0x0002972d
   27f6c:	00028191 	.word	0x00028191

00027f70 <prepare_multithreading>:
{
   27f70:	b5f0      	push	{r4, r5, r6, r7, lr}
   27f72:	b087      	sub	sp, #28
	_IntLibInit();
   27f74:	f7ff fbaa 	bl	276cc <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27f78:	2300      	movs	r3, #0
   27f7a:	e007      	b.n	27f8c <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27f7c:	1d18      	adds	r0, r3, #4
   27f7e:	4927      	ldr	r1, [pc, #156]	; (2801c <prepare_multithreading+0xac>)
   27f80:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   27f84:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27f88:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27f8a:	3301      	adds	r3, #1
   27f8c:	2b1f      	cmp	r3, #31
   27f8e:	ddf5      	ble.n	27f7c <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27f90:	4e22      	ldr	r6, [pc, #136]	; (2801c <prepare_multithreading+0xac>)
   27f92:	4d23      	ldr	r5, [pc, #140]	; (28020 <prepare_multithreading+0xb0>)
   27f94:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   27f96:	2701      	movs	r7, #1
   27f98:	9704      	str	r7, [sp, #16]
   27f9a:	2400      	movs	r4, #0
   27f9c:	9403      	str	r4, [sp, #12]
   27f9e:	9402      	str	r4, [sp, #8]
   27fa0:	9401      	str	r4, [sp, #4]
   27fa2:	9400      	str	r4, [sp, #0]
   27fa4:	4b1f      	ldr	r3, [pc, #124]	; (28024 <prepare_multithreading+0xb4>)
   27fa6:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27faa:	491f      	ldr	r1, [pc, #124]	; (28028 <prepare_multithreading+0xb8>)
   27fac:	4628      	mov	r0, r5
   27fae:	f001 fc9b 	bl	298e8 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27fb2:	7a6b      	ldrb	r3, [r5, #9]
   27fb4:	f023 0304 	bic.w	r3, r3, #4
   27fb8:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   27fba:	4628      	mov	r0, r5
   27fbc:	f000 ff08 	bl	28dd0 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   27fc0:	4d1a      	ldr	r5, [pc, #104]	; (2802c <prepare_multithreading+0xbc>)
   27fc2:	9704      	str	r7, [sp, #16]
   27fc4:	230f      	movs	r3, #15
   27fc6:	9303      	str	r3, [sp, #12]
   27fc8:	9402      	str	r4, [sp, #8]
   27fca:	9401      	str	r4, [sp, #4]
   27fcc:	9400      	str	r4, [sp, #0]
   27fce:	4b18      	ldr	r3, [pc, #96]	; (28030 <prepare_multithreading+0xc0>)
   27fd0:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27fd4:	4917      	ldr	r1, [pc, #92]	; (28034 <prepare_multithreading+0xc4>)
   27fd6:	4628      	mov	r0, r5
   27fd8:	f001 fc86 	bl	298e8 <_setup_new_thread>
   27fdc:	7a6b      	ldrb	r3, [r5, #9]
   27fde:	f023 0304 	bic.w	r3, r3, #4
   27fe2:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   27fe4:	4628      	mov	r0, r5
   27fe6:	f000 fef3 	bl	28dd0 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   27fea:	f106 030c 	add.w	r3, r6, #12
   27fee:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   27ff0:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   27ff2:	4b11      	ldr	r3, [pc, #68]	; (28038 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   27ff4:	f383 8808 	msr	MSP, r3
   27ff8:	4b10      	ldr	r3, [pc, #64]	; (2803c <prepare_multithreading+0xcc>)
   27ffa:	22e0      	movs	r2, #224	; 0xe0
   27ffc:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   28000:	77dc      	strb	r4, [r3, #31]
   28002:	761c      	strb	r4, [r3, #24]
   28004:	765c      	strb	r4, [r3, #25]
   28006:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   28008:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   2800a:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   2800e:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   28010:	f7ff fd5e 	bl	27ad0 <_FaultInit>
	_CpuIdleInit();
   28014:	f7ff fde2 	bl	27bdc <_CpuIdleInit>
}
   28018:	b007      	add	sp, #28
   2801a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2801c:	20002880 	.word	0x20002880
   28020:	20002818 	.word	0x20002818
   28024:	00028191 	.word	0x00028191
   28028:	2000a428 	.word	0x2000a428
   2802c:	200027b0 	.word	0x200027b0
   28030:	00027f05 	.word	0x00027f05
   28034:	2000ac28 	.word	0x2000ac28
   28038:	2000b568 	.word	0x2000b568
   2803c:	e000ed00 	.word	0xe000ed00

00028040 <k_call_stacks_analyze>:
{
   28040:	b500      	push	{lr}
   28042:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   28044:	483a      	ldr	r0, [pc, #232]	; (28130 <k_call_stacks_analyze+0xf0>)
   28046:	f7da ffe1 	bl	300c <printk>
   2804a:	2200      	movs	r2, #0
	size_t unused = 0;
   2804c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2804e:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   28052:	d206      	bcs.n	28062 <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   28054:	4937      	ldr	r1, [pc, #220]	; (28134 <k_call_stacks_analyze+0xf4>)
   28056:	5c89      	ldrb	r1, [r1, r2]
   28058:	29aa      	cmp	r1, #170	; 0xaa
   2805a:	d102      	bne.n	28062 <k_call_stacks_analyze+0x22>
			unused++;
   2805c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2805e:	3201      	adds	r2, #1
   28060:	e7f5      	b.n	2804e <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   28062:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   28066:	2264      	movs	r2, #100	; 0x64
   28068:	fb02 f201 	mul.w	r2, r2, r1
   2806c:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   2806e:	9202      	str	r2, [sp, #8]
   28070:	f44f 6200 	mov.w	r2, #2048	; 0x800
   28074:	9201      	str	r2, [sp, #4]
   28076:	9100      	str	r1, [sp, #0]
   28078:	492f      	ldr	r1, [pc, #188]	; (28138 <k_call_stacks_analyze+0xf8>)
   2807a:	4830      	ldr	r0, [pc, #192]	; (2813c <k_call_stacks_analyze+0xfc>)
   2807c:	f7da ffc6 	bl	300c <printk>
	for (i = 0; i < size; i++) {
   28080:	2200      	movs	r2, #0
	size_t unused = 0;
   28082:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   28084:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   28088:	d206      	bcs.n	28098 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   2808a:	492d      	ldr	r1, [pc, #180]	; (28140 <k_call_stacks_analyze+0x100>)
   2808c:	5c89      	ldrb	r1, [r1, r2]
   2808e:	29aa      	cmp	r1, #170	; 0xaa
   28090:	d102      	bne.n	28098 <k_call_stacks_analyze+0x58>
			unused++;
   28092:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28094:	3201      	adds	r2, #1
   28096:	e7f5      	b.n	28084 <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   28098:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   2809c:	2264      	movs	r2, #100	; 0x64
   2809e:	fb02 f201 	mul.w	r2, r2, r1
   280a2:	4828      	ldr	r0, [pc, #160]	; (28144 <k_call_stacks_analyze+0x104>)
   280a4:	fba0 0202 	umull	r0, r2, r0, r2
   280a8:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   280aa:	9202      	str	r2, [sp, #8]
   280ac:	f44f 72a0 	mov.w	r2, #320	; 0x140
   280b0:	9201      	str	r2, [sp, #4]
   280b2:	9100      	str	r1, [sp, #0]
   280b4:	4924      	ldr	r1, [pc, #144]	; (28148 <k_call_stacks_analyze+0x108>)
   280b6:	4821      	ldr	r0, [pc, #132]	; (2813c <k_call_stacks_analyze+0xfc>)
   280b8:	f7da ffa8 	bl	300c <printk>
	for (i = 0; i < size; i++) {
   280bc:	2200      	movs	r2, #0
	size_t unused = 0;
   280be:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   280c0:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   280c4:	d206      	bcs.n	280d4 <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   280c6:	4921      	ldr	r1, [pc, #132]	; (2814c <k_call_stacks_analyze+0x10c>)
   280c8:	5c89      	ldrb	r1, [r1, r2]
   280ca:	29aa      	cmp	r1, #170	; 0xaa
   280cc:	d102      	bne.n	280d4 <k_call_stacks_analyze+0x94>
			unused++;
   280ce:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   280d0:	3201      	adds	r2, #1
   280d2:	e7f5      	b.n	280c0 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   280d4:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   280d8:	2264      	movs	r2, #100	; 0x64
   280da:	fb02 f201 	mul.w	r2, r2, r1
   280de:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   280e0:	9202      	str	r2, [sp, #8]
   280e2:	f44f 6200 	mov.w	r2, #2048	; 0x800
   280e6:	9201      	str	r2, [sp, #4]
   280e8:	9100      	str	r1, [sp, #0]
   280ea:	4919      	ldr	r1, [pc, #100]	; (28150 <k_call_stacks_analyze+0x110>)
   280ec:	4813      	ldr	r0, [pc, #76]	; (2813c <k_call_stacks_analyze+0xfc>)
   280ee:	f7da ff8d 	bl	300c <printk>
	for (i = 0; i < size; i++) {
   280f2:	2200      	movs	r2, #0
	size_t unused = 0;
   280f4:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   280f6:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   280fa:	d206      	bcs.n	2810a <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   280fc:	4915      	ldr	r1, [pc, #84]	; (28154 <k_call_stacks_analyze+0x114>)
   280fe:	5c89      	ldrb	r1, [r1, r2]
   28100:	29aa      	cmp	r1, #170	; 0xaa
   28102:	d102      	bne.n	2810a <k_call_stacks_analyze+0xca>
			unused++;
   28104:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   28106:	3201      	adds	r2, #1
   28108:	e7f5      	b.n	280f6 <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   2810a:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   2810e:	2264      	movs	r2, #100	; 0x64
   28110:	fb02 f201 	mul.w	r2, r2, r1
   28114:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   28116:	9202      	str	r2, [sp, #8]
   28118:	f44f 6280 	mov.w	r2, #1024	; 0x400
   2811c:	9201      	str	r2, [sp, #4]
   2811e:	9100      	str	r1, [sp, #0]
   28120:	490d      	ldr	r1, [pc, #52]	; (28158 <k_call_stacks_analyze+0x118>)
   28122:	4806      	ldr	r0, [pc, #24]	; (2813c <k_call_stacks_analyze+0xfc>)
   28124:	f7da ff72 	bl	300c <printk>
}
   28128:	b005      	add	sp, #20
   2812a:	f85d fb04 	ldr.w	pc, [sp], #4
   2812e:	bf00      	nop
   28130:	00033350 	.word	0x00033350
   28134:	2000a428 	.word	0x2000a428
   28138:	00033360 	.word	0x00033360
   2813c:	00031708 	.word	0x00031708
   28140:	2000ac28 	.word	0x2000ac28
   28144:	cccccccd 	.word	0xcccccccd
   28148:	0003336c 	.word	0x0003336c
   2814c:	2000ad68 	.word	0x2000ad68
   28150:	00033378 	.word	0x00033378
   28154:	2000b568 	.word	0x2000b568
   28158:	00033384 	.word	0x00033384

0002815c <_bss_zero>:
{
   2815c:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   2815e:	4803      	ldr	r0, [pc, #12]	; (2816c <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   28160:	4a03      	ldr	r2, [pc, #12]	; (28170 <_bss_zero+0x14>)
   28162:	1a12      	subs	r2, r2, r0
   28164:	2100      	movs	r1, #0
   28166:	f002 fc03 	bl	2a970 <memset>
   2816a:	bd08      	pop	{r3, pc}
   2816c:	20000000 	.word	0x20000000
   28170:	20002d18 	.word	0x20002d18

00028174 <_data_copy>:
{
   28174:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   28176:	4803      	ldr	r0, [pc, #12]	; (28184 <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   28178:	4a03      	ldr	r2, [pc, #12]	; (28188 <_data_copy+0x14>)
   2817a:	1a12      	subs	r2, r2, r0
   2817c:	4903      	ldr	r1, [pc, #12]	; (2818c <_data_copy+0x18>)
   2817e:	f7d8 f89f 	bl	2c0 <memcpy>
   28182:	bd08      	pop	{r3, pc}
   28184:	2000b968 	.word	0x2000b968
   28188:	2000d5b4 	.word	0x2000d5b4
   2818c:	0003360c 	.word	0x0003360c

00028190 <_main>:
{
   28190:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   28192:	2002      	movs	r0, #2
   28194:	f7ff fe5e 	bl	27e54 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   28198:	2003      	movs	r0, #3
   2819a:	f7ff fe5b 	bl	27e54 <_sys_device_do_config_level>
	_init_static_threads();
   2819e:	f001 fc11 	bl	299c4 <_init_static_threads>
	main();
   281a2:	f7d9 fc59 	bl	1a58 <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   281a6:	4a03      	ldr	r2, [pc, #12]	; (281b4 <_main+0x24>)
   281a8:	7a13      	ldrb	r3, [r2, #8]
   281aa:	f023 0301 	bic.w	r3, r3, #1
   281ae:	7213      	strb	r3, [r2, #8]
   281b0:	bd08      	pop	{r3, pc}
   281b2:	bf00      	nop
   281b4:	20002818 	.word	0x20002818

000281b8 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   281b8:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   281ba:	2000      	movs	r0, #0
   281bc:	f7ff fed8 	bl	27f70 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   281c0:	2000      	movs	r0, #0
   281c2:	f7ff fe47 	bl	27e54 <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   281c6:	2001      	movs	r0, #1
   281c8:	f7ff fe44 	bl	27e54 <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   281cc:	f7ff feb4 	bl	27f38 <switch_to_main_thread>

000281d0 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   281d0:	2200      	movs	r2, #0
   281d2:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   281d4:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   281d6:	e005      	b.n	281e4 <create_free_list+0x14>
		*(char **)p = slab->free_list;
   281d8:	6941      	ldr	r1, [r0, #20]
   281da:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   281dc:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   281de:	68c1      	ldr	r1, [r0, #12]
   281e0:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   281e2:	3201      	adds	r2, #1
   281e4:	6881      	ldr	r1, [r0, #8]
   281e6:	428a      	cmp	r2, r1
   281e8:	d3f6      	bcc.n	281d8 <create_free_list+0x8>
	}
}
   281ea:	4770      	bx	lr

000281ec <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   281ec:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   281ee:	4c05      	ldr	r4, [pc, #20]	; (28204 <init_mem_slab_module+0x18>)
   281f0:	e003      	b.n	281fa <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   281f2:	4620      	mov	r0, r4
   281f4:	f7ff ffec 	bl	281d0 <create_free_list>
	     slab++) {
   281f8:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   281fa:	4b03      	ldr	r3, [pc, #12]	; (28208 <init_mem_slab_module+0x1c>)
   281fc:	429c      	cmp	r4, r3
   281fe:	d3f8      	bcc.n	281f2 <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   28200:	2000      	movs	r0, #0
   28202:	bd10      	pop	{r4, pc}
   28204:	2000d100 	.word	0x2000d100
   28208:	2000d138 	.word	0x2000d138

0002820c <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   2820c:	b538      	push	{r3, r4, r5, lr}
   2820e:	f04f 0320 	mov.w	r3, #32
   28212:	f3ef 8411 	mrs	r4, BASEPRI
   28216:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   2821a:	6943      	ldr	r3, [r0, #20]
   2821c:	b15b      	cbz	r3, 28236 <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   2821e:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   28220:	6943      	ldr	r3, [r0, #20]
   28222:	681b      	ldr	r3, [r3, #0]
   28224:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   28226:	6983      	ldr	r3, [r0, #24]
   28228:	3301      	adds	r3, #1
   2822a:	6183      	str	r3, [r0, #24]
		result = 0;
   2822c:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2822e:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   28232:	4618      	mov	r0, r3
   28234:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   28236:	b922      	cbnz	r2, 28242 <k_mem_slab_alloc+0x36>
		*mem = NULL;
   28238:	2300      	movs	r3, #0
   2823a:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   2823c:	f06f 030b 	mvn.w	r3, #11
   28240:	e7f5      	b.n	2822e <k_mem_slab_alloc+0x22>
   28242:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   28244:	4611      	mov	r1, r2
   28246:	f000 fed7 	bl	28ff8 <_pend_current_thread>
	_update_time_slice_before_swap();
   2824a:	f000 ff53 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   2824e:	4620      	mov	r0, r4
   28250:	f7ff fa96 	bl	27780 <__swap>
		if (result == 0) {
   28254:	4603      	mov	r3, r0
   28256:	2800      	cmp	r0, #0
   28258:	d1eb      	bne.n	28232 <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   2825a:	4a02      	ldr	r2, [pc, #8]	; (28264 <k_mem_slab_alloc+0x58>)
   2825c:	6892      	ldr	r2, [r2, #8]
   2825e:	68d2      	ldr	r2, [r2, #12]
   28260:	602a      	str	r2, [r5, #0]
   28262:	e7e6      	b.n	28232 <k_mem_slab_alloc+0x26>
   28264:	20002880 	.word	0x20002880

00028268 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   28268:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   2826a:	f04f 0320 	mov.w	r3, #32
   2826e:	f3ef 8411 	mrs	r4, BASEPRI
   28272:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   28276:	4b3d      	ldr	r3, [pc, #244]	; (2836c <k_mem_slab_free+0x104>)
   28278:	681b      	ldr	r3, [r3, #0]
   2827a:	2b00      	cmp	r3, #0
   2827c:	d13a      	bne.n	282f4 <k_mem_slab_free+0x8c>
	return list->head == list;
   2827e:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28280:	4298      	cmp	r0, r3
   28282:	d048      	beq.n	28316 <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   28284:	b14b      	cbz	r3, 2829a <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   28286:	685a      	ldr	r2, [r3, #4]
   28288:	681d      	ldr	r5, [r3, #0]
   2828a:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   2828c:	681a      	ldr	r2, [r3, #0]
   2828e:	685d      	ldr	r5, [r3, #4]
   28290:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28292:	7a5a      	ldrb	r2, [r3, #9]
   28294:	f022 0202 	bic.w	r2, r2, #2
   28298:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   2829a:	2b00      	cmp	r3, #0
   2829c:	d05c      	beq.n	28358 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   2829e:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   282a0:	2100      	movs	r1, #0
   282a2:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   282a4:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   282a6:	6a19      	ldr	r1, [r3, #32]
   282a8:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   282ac:	d013      	beq.n	282d6 <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   282ae:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   282b2:	482f      	ldr	r0, [pc, #188]	; (28370 <k_mem_slab_free+0x108>)
   282b4:	6900      	ldr	r0, [r0, #16]
   282b6:	4282      	cmp	r2, r0
   282b8:	d004      	beq.n	282c4 <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   282ba:	b102      	cbz	r2, 282be <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   282bc:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   282be:	6910      	ldr	r0, [r2, #16]
   282c0:	4401      	add	r1, r0
   282c2:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   282c4:	695a      	ldr	r2, [r3, #20]
   282c6:	6919      	ldr	r1, [r3, #16]
   282c8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   282ca:	691a      	ldr	r2, [r3, #16]
   282cc:	6959      	ldr	r1, [r3, #20]
   282ce:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   282d0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   282d4:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   282d6:	7a5a      	ldrb	r2, [r3, #9]
   282d8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   282dc:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   282de:	f012 0f1b 	tst.w	r2, #27
   282e2:	d11c      	bne.n	2831e <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   282e4:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   282e6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   282ea:	d016      	beq.n	2831a <k_mem_slab_free+0xb2>
   282ec:	2200      	movs	r2, #0
   282ee:	e017      	b.n	28320 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282f0:	2300      	movs	r3, #0
   282f2:	e003      	b.n	282fc <k_mem_slab_free+0x94>
   282f4:	4605      	mov	r5, r0
	return list->head == list;
   282f6:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   282f8:	4298      	cmp	r0, r3
   282fa:	d0f9      	beq.n	282f0 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   282fc:	2b00      	cmp	r3, #0
   282fe:	d0c1      	beq.n	28284 <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28300:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   28302:	f112 0f02 	cmn.w	r2, #2
   28306:	d1bd      	bne.n	28284 <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   28308:	686a      	ldr	r2, [r5, #4]
   2830a:	4293      	cmp	r3, r2
   2830c:	d001      	beq.n	28312 <k_mem_slab_free+0xaa>
   2830e:	681b      	ldr	r3, [r3, #0]
   28310:	e7f4      	b.n	282fc <k_mem_slab_free+0x94>
   28312:	2300      	movs	r3, #0
   28314:	e7f2      	b.n	282fc <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28316:	2300      	movs	r3, #0
   28318:	e7b4      	b.n	28284 <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   2831a:	2201      	movs	r2, #1
   2831c:	e000      	b.n	28320 <k_mem_slab_free+0xb8>
   2831e:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   28320:	b94a      	cbnz	r2, 28336 <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   28322:	4b13      	ldr	r3, [pc, #76]	; (28370 <k_mem_slab_free+0x108>)
   28324:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28326:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28328:	2b7f      	cmp	r3, #127	; 0x7f
   2832a:	d908      	bls.n	2833e <k_mem_slab_free+0xd6>
   2832c:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   2832e:	b96b      	cbnz	r3, 2834c <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28330:	f384 8811 	msr	BASEPRI, r4
   28334:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28336:	4618      	mov	r0, r3
   28338:	f000 fd4a 	bl	28dd0 <_add_thread_to_ready_q>
   2833c:	e7f1      	b.n	28322 <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   2833e:	f000 fe6b 	bl	29018 <__must_switch_threads>
   28342:	4603      	mov	r3, r0
   28344:	2800      	cmp	r0, #0
   28346:	d0f2      	beq.n	2832e <k_mem_slab_free+0xc6>
   28348:	2301      	movs	r3, #1
   2834a:	e7f0      	b.n	2832e <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   2834c:	f000 fed2 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28350:	4620      	mov	r0, r4
   28352:	f7ff fa15 	bl	27780 <__swap>
   28356:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   28358:	680b      	ldr	r3, [r1, #0]
   2835a:	6942      	ldr	r2, [r0, #20]
   2835c:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   2835e:	680b      	ldr	r3, [r1, #0]
   28360:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   28362:	6983      	ldr	r3, [r0, #24]
   28364:	3b01      	subs	r3, #1
   28366:	6183      	str	r3, [r0, #24]
   28368:	e7e2      	b.n	28330 <k_mem_slab_free+0xc8>
   2836a:	bf00      	nop
   2836c:	20002c68 	.word	0x20002c68
   28370:	20002880 	.word	0x20002880

00028374 <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   28374:	4288      	cmp	r0, r1
   28376:	da00      	bge.n	2837a <new_prio_for_inheritance+0x6>
   28378:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   2837a:	2900      	cmp	r1, #0
   2837c:	db01      	blt.n	28382 <new_prio_for_inheritance+0xe>
   2837e:	4608      	mov	r0, r1
   28380:	4770      	bx	lr
   28382:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   28384:	4770      	bx	lr

00028386 <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   28386:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   28388:	6884      	ldr	r4, [r0, #8]
   2838a:	f994 300a 	ldrsb.w	r3, [r4, #10]
   2838e:	428b      	cmp	r3, r1
   28390:	d00e      	beq.n	283b0 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   28392:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28394:	f013 0f1f 	tst.w	r3, #31
   28398:	d107      	bne.n	283aa <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2839a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2839c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   283a0:	d001      	beq.n	283a6 <adjust_owner_prio+0x20>
   283a2:	2300      	movs	r3, #0
   283a4:	e002      	b.n	283ac <adjust_owner_prio+0x26>
   283a6:	2301      	movs	r3, #1
   283a8:	e000      	b.n	283ac <adjust_owner_prio+0x26>
   283aa:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   283ac:	b90b      	cbnz	r3, 283b2 <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   283ae:	72a1      	strb	r1, [r4, #10]
   283b0:	bd38      	pop	{r3, r4, r5, pc}
   283b2:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   283b4:	4620      	mov	r0, r4
   283b6:	f000 fd2b 	bl	28e10 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   283ba:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   283bc:	4620      	mov	r0, r4
   283be:	f000 fd07 	bl	28dd0 <_add_thread_to_ready_q>
   283c2:	bd38      	pop	{r3, r4, r5, pc}

000283c4 <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   283c4:	b570      	push	{r4, r5, r6, lr}
   283c6:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   283c8:	4b32      	ldr	r3, [pc, #200]	; (28494 <_impl_k_mutex_lock+0xd0>)
   283ca:	689a      	ldr	r2, [r3, #8]
   283cc:	7ad3      	ldrb	r3, [r2, #11]
   283ce:	3b01      	subs	r3, #1
   283d0:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   283d2:	68c3      	ldr	r3, [r0, #12]
   283d4:	b97b      	cbnz	r3, 283f6 <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   283d6:	2b00      	cmp	r3, #0
   283d8:	d133      	bne.n	28442 <_impl_k_mutex_lock+0x7e>
   283da:	4a2e      	ldr	r2, [pc, #184]	; (28494 <_impl_k_mutex_lock+0xd0>)
   283dc:	6892      	ldr	r2, [r2, #8]
   283de:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   283e2:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   283e4:	3301      	adds	r3, #1
   283e6:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   283e8:	4b2a      	ldr	r3, [pc, #168]	; (28494 <_impl_k_mutex_lock+0xd0>)
   283ea:	689b      	ldr	r3, [r3, #8]
   283ec:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   283ee:	f000 fea1 	bl	29134 <k_sched_unlock>

		return 0;
   283f2:	2000      	movs	r0, #0
   283f4:	bd70      	pop	{r4, r5, r6, pc}
   283f6:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   283f8:	6881      	ldr	r1, [r0, #8]
   283fa:	4a26      	ldr	r2, [pc, #152]	; (28494 <_impl_k_mutex_lock+0xd0>)
   283fc:	6892      	ldr	r2, [r2, #8]
   283fe:	4291      	cmp	r1, r2
   28400:	d0e9      	beq.n	283d6 <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   28402:	b305      	cbz	r5, 28446 <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   28404:	f991 100a 	ldrsb.w	r1, [r1, #10]
   28408:	f992 000a 	ldrsb.w	r0, [r2, #10]
   2840c:	f7ff ffb2 	bl	28374 <new_prio_for_inheritance>
	__asm__ volatile(
   28410:	f04f 0320 	mov.w	r3, #32
   28414:	f3ef 8611 	mrs	r6, BASEPRI
   28418:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   2841c:	68a3      	ldr	r3, [r4, #8]
   2841e:	f993 300a 	ldrsb.w	r3, [r3, #10]
   28422:	4298      	cmp	r0, r3
   28424:	db14      	blt.n	28450 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   28426:	4629      	mov	r1, r5
   28428:	4620      	mov	r0, r4
   2842a:	f000 fde5 	bl	28ff8 <_pend_current_thread>
	_update_time_slice_before_swap();
   2842e:	f000 fe61 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28432:	4630      	mov	r0, r6
   28434:	f7ff f9a4 	bl	27780 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   28438:	b978      	cbnz	r0, 2845a <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   2843a:	f000 fe7b 	bl	29134 <k_sched_unlock>
		return 0;
   2843e:	2000      	movs	r0, #0
   28440:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   28442:	6922      	ldr	r2, [r4, #16]
   28444:	e7cd      	b.n	283e2 <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   28446:	f000 fe75 	bl	29134 <k_sched_unlock>
		return -EBUSY;
   2844a:	f06f 000f 	mvn.w	r0, #15
   2844e:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   28450:	4601      	mov	r1, r0
   28452:	4620      	mov	r0, r4
   28454:	f7ff ff97 	bl	28386 <adjust_owner_prio>
   28458:	e7e5      	b.n	28426 <_impl_k_mutex_lock+0x62>
	return list->head == list;
   2845a:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2845c:	429c      	cmp	r4, r3
   2845e:	d016      	beq.n	2848e <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   28460:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   28462:	b123      	cbz	r3, 2846e <_impl_k_mutex_lock+0xaa>
   28464:	f993 000a 	ldrsb.w	r0, [r3, #10]
   28468:	f7ff ff84 	bl	28374 <new_prio_for_inheritance>
   2846c:	4601      	mov	r1, r0
   2846e:	f04f 0320 	mov.w	r3, #32
   28472:	f3ef 8511 	mrs	r5, BASEPRI
   28476:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   2847a:	4620      	mov	r0, r4
   2847c:	f7ff ff83 	bl	28386 <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28480:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   28484:	f000 fe56 	bl	29134 <k_sched_unlock>

	return -EAGAIN;
   28488:	f06f 000a 	mvn.w	r0, #10
}
   2848c:	bd70      	pop	{r4, r5, r6, pc}
   2848e:	2300      	movs	r3, #0
   28490:	e7e6      	b.n	28460 <_impl_k_mutex_lock+0x9c>
   28492:	bf00      	nop
   28494:	20002880 	.word	0x20002880

00028498 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   28498:	b570      	push	{r4, r5, r6, lr}
   2849a:	4b40      	ldr	r3, [pc, #256]	; (2859c <_impl_k_mutex_unlock+0x104>)
   2849c:	689a      	ldr	r2, [r3, #8]
   2849e:	7ad3      	ldrb	r3, [r2, #11]
   284a0:	3b01      	subs	r3, #1
   284a2:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   284a4:	68c3      	ldr	r3, [r0, #12]
   284a6:	3b01      	subs	r3, #1
   284a8:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   284aa:	2b00      	cmp	r3, #0
   284ac:	d143      	bne.n	28536 <_impl_k_mutex_unlock+0x9e>
   284ae:	4605      	mov	r5, r0
	__asm__ volatile(
   284b0:	f04f 0320 	mov.w	r3, #32
   284b4:	f3ef 8611 	mrs	r6, BASEPRI
   284b8:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   284bc:	6901      	ldr	r1, [r0, #16]
   284be:	f7ff ff62 	bl	28386 <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   284c2:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   284c4:	4b36      	ldr	r3, [pc, #216]	; (285a0 <_impl_k_mutex_unlock+0x108>)
   284c6:	681b      	ldr	r3, [r3, #0]
   284c8:	2b00      	cmp	r3, #0
   284ca:	d139      	bne.n	28540 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   284cc:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284ce:	42a5      	cmp	r5, r4
   284d0:	d046      	beq.n	28560 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   284d2:	b14c      	cbz	r4, 284e8 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   284d4:	6863      	ldr	r3, [r4, #4]
   284d6:	6822      	ldr	r2, [r4, #0]
   284d8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   284da:	6823      	ldr	r3, [r4, #0]
   284dc:	6862      	ldr	r2, [r4, #4]
   284de:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   284e0:	7a63      	ldrb	r3, [r4, #9]
   284e2:	f023 0302 	bic.w	r3, r3, #2
   284e6:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   284e8:	2c00      	cmp	r4, #0
   284ea:	d051      	beq.n	28590 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   284ec:	6a22      	ldr	r2, [r4, #32]
   284ee:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   284f2:	d013      	beq.n	2851c <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   284f4:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   284f8:	4928      	ldr	r1, [pc, #160]	; (2859c <_impl_k_mutex_unlock+0x104>)
   284fa:	6909      	ldr	r1, [r1, #16]
   284fc:	428b      	cmp	r3, r1
   284fe:	d004      	beq.n	2850a <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28500:	b103      	cbz	r3, 28504 <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   28502:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28504:	6919      	ldr	r1, [r3, #16]
   28506:	440a      	add	r2, r1
   28508:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2850a:	6963      	ldr	r3, [r4, #20]
   2850c:	6922      	ldr	r2, [r4, #16]
   2850e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28510:	6923      	ldr	r3, [r4, #16]
   28512:	6962      	ldr	r2, [r4, #20]
   28514:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28516:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2851a:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2851c:	7a63      	ldrb	r3, [r4, #9]
   2851e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28522:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28524:	f013 0f1b 	tst.w	r3, #27
   28528:	d11e      	bne.n	28568 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2852a:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2852c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28530:	d018      	beq.n	28564 <_impl_k_mutex_unlock+0xcc>
   28532:	2300      	movs	r3, #0
   28534:	e019      	b.n	2856a <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   28536:	f000 fdfd 	bl	29134 <k_sched_unlock>
		return;
   2853a:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2853c:	2400      	movs	r4, #0
   2853e:	e002      	b.n	28546 <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   28540:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28542:	42a5      	cmp	r5, r4
   28544:	d0fa      	beq.n	2853c <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28546:	2c00      	cmp	r4, #0
   28548:	d0c3      	beq.n	284d2 <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   2854a:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2854c:	f113 0f02 	cmn.w	r3, #2
   28550:	d1bf      	bne.n	284d2 <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   28552:	6853      	ldr	r3, [r2, #4]
   28554:	429c      	cmp	r4, r3
   28556:	d001      	beq.n	2855c <_impl_k_mutex_unlock+0xc4>
   28558:	6824      	ldr	r4, [r4, #0]
   2855a:	e7f4      	b.n	28546 <_impl_k_mutex_unlock+0xae>
   2855c:	2400      	movs	r4, #0
   2855e:	e7f2      	b.n	28546 <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28560:	2400      	movs	r4, #0
   28562:	e7b6      	b.n	284d2 <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   28564:	2301      	movs	r3, #1
   28566:	e000      	b.n	2856a <_impl_k_mutex_unlock+0xd2>
   28568:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2856a:	b96b      	cbnz	r3, 28588 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2856c:	f386 8811 	msr	BASEPRI, r6
   28570:	2300      	movs	r3, #0
   28572:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   28574:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   28576:	68eb      	ldr	r3, [r5, #12]
   28578:	3301      	adds	r3, #1
   2857a:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   2857c:	f994 300a 	ldrsb.w	r3, [r4, #10]
   28580:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   28582:	f000 fdd7 	bl	29134 <k_sched_unlock>
   28586:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   28588:	4620      	mov	r0, r4
   2858a:	f000 fc21 	bl	28dd0 <_add_thread_to_ready_q>
   2858e:	e7ed      	b.n	2856c <_impl_k_mutex_unlock+0xd4>
   28590:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   28594:	2300      	movs	r3, #0
   28596:	60ab      	str	r3, [r5, #8]
   28598:	e7f3      	b.n	28582 <_impl_k_mutex_unlock+0xea>
   2859a:	bf00      	nop
   2859c:	20002880 	.word	0x20002880
   285a0:	20002c68 	.word	0x20002c68

000285a4 <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   285a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   285a6:	4604      	mov	r4, r0
   285a8:	460d      	mov	r5, r1
	*must_reschedule = 0;
   285aa:	2300      	movs	r3, #0
   285ac:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   285ae:	6883      	ldr	r3, [r0, #8]
   285b0:	2b00      	cmp	r3, #0
   285b2:	d042      	beq.n	2863a <_signal_poll_event+0x96>
   285b4:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   285b6:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   285b8:	7a43      	ldrb	r3, [r0, #9]
   285ba:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   285be:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   285c0:	f013 0f02 	tst.w	r3, #2
   285c4:	d039      	beq.n	2863a <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   285c6:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   285c8:	f113 0f02 	cmn.w	r3, #2
   285cc:	d060      	beq.n	28690 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   285ce:	6843      	ldr	r3, [r0, #4]
   285d0:	6802      	ldr	r2, [r0, #0]
   285d2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   285d4:	6803      	ldr	r3, [r0, #0]
   285d6:	6842      	ldr	r2, [r0, #4]
   285d8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   285da:	7a43      	ldrb	r3, [r0, #9]
   285dc:	f023 0302 	bic.w	r3, r3, #2
   285e0:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   285e2:	6a02      	ldr	r2, [r0, #32]
   285e4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   285e8:	d013      	beq.n	28612 <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   285ea:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   285ee:	492a      	ldr	r1, [pc, #168]	; (28698 <_signal_poll_event+0xf4>)
   285f0:	6909      	ldr	r1, [r1, #16]
   285f2:	428b      	cmp	r3, r1
   285f4:	d004      	beq.n	28600 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285f6:	b103      	cbz	r3, 285fa <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   285f8:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   285fa:	6919      	ldr	r1, [r3, #16]
   285fc:	440a      	add	r2, r1
   285fe:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28600:	6943      	ldr	r3, [r0, #20]
   28602:	6902      	ldr	r2, [r0, #16]
   28604:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28606:	6903      	ldr	r3, [r0, #16]
   28608:	6942      	ldr	r2, [r0, #20]
   2860a:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2860c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28610:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   28612:	b965      	cbnz	r5, 2862e <_signal_poll_event+0x8a>
   28614:	f06f 0303 	mvn.w	r3, #3
   28618:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   2861a:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2861c:	f013 0f1f 	tst.w	r3, #31
   28620:	d109      	bne.n	28636 <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28622:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28628:	d003      	beq.n	28632 <_signal_poll_event+0x8e>
   2862a:	2700      	movs	r7, #0
   2862c:	e004      	b.n	28638 <_signal_poll_event+0x94>
   2862e:	2300      	movs	r3, #0
   28630:	e7f2      	b.n	28618 <_signal_poll_event+0x74>
   28632:	2701      	movs	r7, #1
   28634:	e000      	b.n	28638 <_signal_poll_event+0x94>
   28636:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   28638:	b947      	cbnz	r7, 2864c <_signal_poll_event+0xa8>
	event->poller = NULL;
   2863a:	2000      	movs	r0, #0
   2863c:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   2863e:	7b63      	ldrb	r3, [r4, #13]
   28640:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   28644:	f365 1307 	bfi	r3, r5, #4, #4
   28648:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   2864a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   2864c:	f000 fbc0 	bl	28dd0 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   28650:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   28654:	2b0d      	cmp	r3, #13
   28656:	d807      	bhi.n	28668 <_signal_poll_event+0xc4>
   28658:	b19b      	cbz	r3, 28682 <_signal_poll_event+0xde>
   2865a:	4b10      	ldr	r3, [pc, #64]	; (2869c <_signal_poll_event+0xf8>)
   2865c:	685b      	ldr	r3, [r3, #4]
   2865e:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28662:	d010      	beq.n	28686 <_signal_poll_event+0xe2>
   28664:	2300      	movs	r3, #0
   28666:	e000      	b.n	2866a <_signal_poll_event+0xc6>
   28668:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   2866a:	b973      	cbnz	r3, 2868a <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   2866c:	4a0a      	ldr	r2, [pc, #40]	; (28698 <_signal_poll_event+0xf4>)
   2866e:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28670:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28672:	2a7f      	cmp	r2, #127	; 0x7f
   28674:	d80a      	bhi.n	2868c <_signal_poll_event+0xe8>
   28676:	f000 fccf 	bl	29018 <__must_switch_threads>
   2867a:	4603      	mov	r3, r0
   2867c:	b130      	cbz	r0, 2868c <_signal_poll_event+0xe8>
   2867e:	463b      	mov	r3, r7
   28680:	e004      	b.n	2868c <_signal_poll_event+0xe8>
   28682:	2300      	movs	r3, #0
   28684:	e7f1      	b.n	2866a <_signal_poll_event+0xc6>
   28686:	463b      	mov	r3, r7
   28688:	e7ef      	b.n	2866a <_signal_poll_event+0xc6>
   2868a:	2300      	movs	r3, #0
   2868c:	6033      	str	r3, [r6, #0]
   2868e:	e7d4      	b.n	2863a <_signal_poll_event+0x96>
		return -EAGAIN;
   28690:	f06f 000a 	mvn.w	r0, #10
}
   28694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   28696:	bf00      	nop
   28698:	20002880 	.word	0x20002880
   2869c:	e000ed00 	.word	0xe000ed00

000286a0 <k_poll_event_init>:
{
   286a0:	b430      	push	{r4, r5}
	event->poller = NULL;
   286a2:	2500      	movs	r5, #0
   286a4:	6085      	str	r5, [r0, #8]
	event->type = type;
   286a6:	7b44      	ldrb	r4, [r0, #13]
   286a8:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   286ac:	f365 1407 	bfi	r4, r5, #4, #4
   286b0:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   286b2:	7b81      	ldrb	r1, [r0, #14]
   286b4:	f362 0100 	bfi	r1, r2, #0, #1
   286b8:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   286ba:	89c2      	ldrh	r2, [r0, #14]
   286bc:	f365 024f 	bfi	r2, r5, #1, #15
   286c0:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   286c2:	6103      	str	r3, [r0, #16]
}
   286c4:	bc30      	pop	{r4, r5}
   286c6:	4770      	bx	lr

000286c8 <k_poll>:
{
   286c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   286cc:	b085      	sub	sp, #20
   286ce:	4691      	mov	r9, r2
	__asm__ volatile(
   286d0:	f04f 0320 	mov.w	r3, #32
   286d4:	f3ef 8511 	mrs	r5, BASEPRI
   286d8:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   286dc:	4ab7      	ldr	r2, [pc, #732]	; (289bc <k_poll+0x2f4>)
   286de:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   286e0:	7a63      	ldrb	r3, [r4, #9]
   286e2:	f043 0320 	orr.w	r3, r3, #32
   286e6:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   286e8:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   286ec:	6893      	ldr	r3, [r2, #8]
   286ee:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   286f0:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   286f2:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   286f6:	e01e      	b.n	28736 <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   286f8:	6917      	ldr	r7, [r2, #16]
   286fa:	68bf      	ldr	r7, [r7, #8]
   286fc:	b14f      	cbz	r7, 28712 <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   286fe:	f04f 0e02 	mov.w	lr, #2
			return 1;
   28702:	2701      	movs	r7, #1
   28704:	e005      	b.n	28712 <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   28706:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   28708:	683f      	ldr	r7, [r7, #0]
   2870a:	b117      	cbz	r7, 28712 <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   2870c:	f04f 0e04 	mov.w	lr, #4
			return 1;
   28710:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   28712:	b387      	cbz	r7, 28776 <k_poll+0xae>
	event->poller = NULL;
   28714:	2500      	movs	r5, #0
   28716:	6095      	str	r5, [r2, #8]
	event->state |= state;
   28718:	7b55      	ldrb	r5, [r2, #13]
   2871a:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   2871e:	f367 1507 	bfi	r5, r7, #4, #4
   28722:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   28724:	4aa5      	ldr	r2, [pc, #660]	; (289bc <k_poll+0x2f4>)
   28726:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   28728:	7a6a      	ldrb	r2, [r5, #9]
   2872a:	f022 0220 	bic.w	r2, r2, #32
   2872e:	726a      	strb	r2, [r5, #9]
   28730:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   28734:	3301      	adds	r3, #1
   28736:	428b      	cmp	r3, r1
   28738:	f280 8191 	bge.w	28a5e <k_poll+0x396>
	__asm__ volatile(
   2873c:	f04f 0220 	mov.w	r2, #32
   28740:	f3ef 8611 	mrs	r6, BASEPRI
   28744:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   28748:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   2874c:	0095      	lsls	r5, r2, #2
   2874e:	1942      	adds	r2, r0, r5
	switch (event->type) {
   28750:	7b57      	ldrb	r7, [r2, #13]
   28752:	f007 070f 	and.w	r7, r7, #15
   28756:	2f02      	cmp	r7, #2
   28758:	d0ce      	beq.n	286f8 <k_poll+0x30>
   2875a:	2f04      	cmp	r7, #4
   2875c:	d0d3      	beq.n	28706 <k_poll+0x3e>
   2875e:	2f01      	cmp	r7, #1
   28760:	d001      	beq.n	28766 <k_poll+0x9e>
		return 0;
   28762:	2700      	movs	r7, #0
   28764:	e7d5      	b.n	28712 <k_poll+0x4a>
		if (event->signal->signaled) {
   28766:	6917      	ldr	r7, [r2, #16]
   28768:	68bf      	ldr	r7, [r7, #8]
   2876a:	2f00      	cmp	r7, #0
   2876c:	d0d1      	beq.n	28712 <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   2876e:	f04f 0e01 	mov.w	lr, #1
			return 1;
   28772:	4677      	mov	r7, lr
   28774:	e7cd      	b.n	28712 <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28776:	f1b9 0f00 	cmp.w	r9, #0
   2877a:	d0d9      	beq.n	28730 <k_poll+0x68>
	return _is_thread_polling(_current);
   2877c:	4f8f      	ldr	r7, [pc, #572]	; (289bc <k_poll+0x2f4>)
   2877e:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   28780:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   28782:	f017 0f20 	tst.w	r7, #32
   28786:	d0d3      	beq.n	28730 <k_poll+0x68>
	switch (event->type) {
   28788:	7b57      	ldrb	r7, [r2, #13]
   2878a:	f007 070f 	and.w	r7, r7, #15
   2878e:	2f02      	cmp	r7, #2
   28790:	d008      	beq.n	287a4 <k_poll+0xdc>
   28792:	2f04      	cmp	r7, #4
   28794:	d07a      	beq.n	2888c <k_poll+0x1c4>
   28796:	2f01      	cmp	r7, #1
   28798:	f000 80ec 	beq.w	28974 <k_poll+0x2ac>
	event->poller = poller;
   2879c:	ad03      	add	r5, sp, #12
   2879e:	6095      	str	r5, [r2, #8]
				++last_registered;
   287a0:	3401      	adds	r4, #1
   287a2:	e7c5      	b.n	28730 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   287a4:	6917      	ldr	r7, [r2, #16]
   287a6:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   287aa:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   287ae:	45c4      	cmp	ip, r8
   287b0:	d010      	beq.n	287d4 <k_poll+0x10c>
   287b2:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   287b6:	b17f      	cbz	r7, 287d8 <k_poll+0x110>
   287b8:	68bf      	ldr	r7, [r7, #8]
   287ba:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   287bc:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   287c0:	9f03      	ldr	r7, [sp, #12]
   287c2:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   287c6:	45da      	cmp	sl, fp
   287c8:	db06      	blt.n	287d8 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   287ca:	45c4      	cmp	ip, r8
   287cc:	d12e      	bne.n	2882c <k_poll+0x164>
   287ce:	f04f 0800 	mov.w	r8, #0
   287d2:	e02b      	b.n	2882c <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   287d4:	2700      	movs	r7, #0
   287d6:	e7ee      	b.n	287b6 <k_poll+0xee>
	node->next = list;
   287d8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   287dc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287e0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   287e2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   287e6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   287e8:	f8cc 2004 	str.w	r2, [ip, #4]
   287ec:	e7d6      	b.n	2879c <k_poll+0xd4>
	if (!insert_point) {
   287ee:	f1b8 0f00 	cmp.w	r8, #0
   287f2:	d00a      	beq.n	2880a <k_poll+0x142>
		node->prev = insert_point->prev;
   287f4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   287f8:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   287fa:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   287fe:	f8d8 5004 	ldr.w	r5, [r8, #4]
   28802:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   28804:	f8c8 2004 	str.w	r2, [r8, #4]
   28808:	e7c8      	b.n	2879c <k_poll+0xd4>
	node->next = list;
   2880a:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2880e:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28812:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28814:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28818:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2881a:	f8cc 2004 	str.w	r2, [ip, #4]
   2881e:	e7bd      	b.n	2879c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28820:	4647      	mov	r7, r8
   28822:	e017      	b.n	28854 <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   28824:	2700      	movs	r7, #0
   28826:	e015      	b.n	28854 <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28828:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   2882c:	f1b8 0f00 	cmp.w	r8, #0
   28830:	d021      	beq.n	28876 <k_poll+0x1ae>
					       pending->poller->thread)) {
   28832:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28836:	683f      	ldr	r7, [r7, #0]
   28838:	f997 700a 	ldrsb.w	r7, [r7, #10]
   2883c:	45bb      	cmp	fp, r7
   2883e:	dbd6      	blt.n	287ee <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28840:	46c2      	mov	sl, r8
   28842:	f1b8 0f00 	cmp.w	r8, #0
   28846:	d0eb      	beq.n	28820 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   28848:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2884c:	45b8      	cmp	r8, r7
   2884e:	d0e9      	beq.n	28824 <k_poll+0x15c>
   28850:	f8d8 7000 	ldr.w	r7, [r8]
   28854:	b167      	cbz	r7, 28870 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28856:	f1ba 0f00 	cmp.w	sl, #0
   2885a:	d0e5      	beq.n	28828 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   2885c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28860:	45ba      	cmp	sl, r7
   28862:	d002      	beq.n	2886a <k_poll+0x1a2>
   28864:	f8d8 8000 	ldr.w	r8, [r8]
   28868:	e7e0      	b.n	2882c <k_poll+0x164>
   2886a:	f04f 0800 	mov.w	r8, #0
   2886e:	e7dd      	b.n	2882c <k_poll+0x164>
   28870:	f04f 0800 	mov.w	r8, #0
   28874:	e7da      	b.n	2882c <k_poll+0x164>
	node->next = list;
   28876:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   2887a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2887e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28880:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28884:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28886:	f8cc 2004 	str.w	r2, [ip, #4]
   2888a:	e787      	b.n	2879c <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   2888c:	6917      	ldr	r7, [r2, #16]
   2888e:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   28892:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   28896:	45c4      	cmp	ip, r8
   28898:	d010      	beq.n	288bc <k_poll+0x1f4>
   2889a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   2889e:	b17f      	cbz	r7, 288c0 <k_poll+0x1f8>
   288a0:	68bf      	ldr	r7, [r7, #8]
   288a2:	683f      	ldr	r7, [r7, #0]
   288a4:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   288a8:	9f03      	ldr	r7, [sp, #12]
   288aa:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   288ae:	45da      	cmp	sl, fp
   288b0:	db06      	blt.n	288c0 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288b2:	45c4      	cmp	ip, r8
   288b4:	d12e      	bne.n	28914 <k_poll+0x24c>
   288b6:	f04f 0800 	mov.w	r8, #0
   288ba:	e02b      	b.n	28914 <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   288bc:	2700      	movs	r7, #0
   288be:	e7ee      	b.n	2889e <k_poll+0x1d6>
	node->next = list;
   288c0:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   288c4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288c8:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   288ca:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288ce:	602a      	str	r2, [r5, #0]
	list->tail = node;
   288d0:	f8cc 2004 	str.w	r2, [ip, #4]
   288d4:	e762      	b.n	2879c <k_poll+0xd4>
	if (!insert_point) {
   288d6:	f1b8 0f00 	cmp.w	r8, #0
   288da:	d00a      	beq.n	288f2 <k_poll+0x22a>
		node->prev = insert_point->prev;
   288dc:	f8d8 7004 	ldr.w	r7, [r8, #4]
   288e0:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   288e2:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   288e6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   288ea:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   288ec:	f8c8 2004 	str.w	r2, [r8, #4]
   288f0:	e754      	b.n	2879c <k_poll+0xd4>
	node->next = list;
   288f2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   288f6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   288fa:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   288fc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28900:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28902:	f8cc 2004 	str.w	r2, [ip, #4]
   28906:	e749      	b.n	2879c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28908:	4647      	mov	r7, r8
   2890a:	e017      	b.n	2893c <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   2890c:	2700      	movs	r7, #0
   2890e:	e015      	b.n	2893c <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28910:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28914:	f1b8 0f00 	cmp.w	r8, #0
   28918:	d021      	beq.n	2895e <k_poll+0x296>
					       pending->poller->thread)) {
   2891a:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   2891e:	683f      	ldr	r7, [r7, #0]
   28920:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28924:	45bb      	cmp	fp, r7
   28926:	dbd6      	blt.n	288d6 <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28928:	46c2      	mov	sl, r8
   2892a:	f1b8 0f00 	cmp.w	r8, #0
   2892e:	d0eb      	beq.n	28908 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   28930:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28934:	45b8      	cmp	r8, r7
   28936:	d0e9      	beq.n	2890c <k_poll+0x244>
   28938:	f8d8 7000 	ldr.w	r7, [r8]
   2893c:	b167      	cbz	r7, 28958 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2893e:	f1ba 0f00 	cmp.w	sl, #0
   28942:	d0e5      	beq.n	28910 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   28944:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28948:	45ba      	cmp	sl, r7
   2894a:	d002      	beq.n	28952 <k_poll+0x28a>
   2894c:	f8d8 8000 	ldr.w	r8, [r8]
   28950:	e7e0      	b.n	28914 <k_poll+0x24c>
   28952:	f04f 0800 	mov.w	r8, #0
   28956:	e7dd      	b.n	28914 <k_poll+0x24c>
   28958:	f04f 0800 	mov.w	r8, #0
   2895c:	e7da      	b.n	28914 <k_poll+0x24c>
	node->next = list;
   2895e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28962:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28966:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28968:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2896c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   2896e:	f8cc 2004 	str.w	r2, [ip, #4]
   28972:	e713      	b.n	2879c <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   28974:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   28978:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   2897c:	45c4      	cmp	ip, r8
   2897e:	d010      	beq.n	289a2 <k_poll+0x2da>
   28980:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   28984:	b17f      	cbz	r7, 289a6 <k_poll+0x2de>
   28986:	68bf      	ldr	r7, [r7, #8]
   28988:	683f      	ldr	r7, [r7, #0]
   2898a:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   2898e:	9f03      	ldr	r7, [sp, #12]
   28990:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   28994:	45da      	cmp	sl, fp
   28996:	db06      	blt.n	289a6 <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28998:	45c4      	cmp	ip, r8
   2899a:	d130      	bne.n	289fe <k_poll+0x336>
   2899c:	f04f 0800 	mov.w	r8, #0
   289a0:	e02d      	b.n	289fe <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   289a2:	2700      	movs	r7, #0
   289a4:	e7ee      	b.n	28984 <k_poll+0x2bc>
	node->next = list;
   289a6:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   289aa:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289ae:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   289b0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289b4:	602a      	str	r2, [r5, #0]
	list->tail = node;
   289b6:	f8cc 2004 	str.w	r2, [ip, #4]
   289ba:	e6ef      	b.n	2879c <k_poll+0xd4>
   289bc:	20002880 	.word	0x20002880
	if (!insert_point) {
   289c0:	f1b8 0f00 	cmp.w	r8, #0
   289c4:	d00a      	beq.n	289dc <k_poll+0x314>
		node->prev = insert_point->prev;
   289c6:	f8d8 7004 	ldr.w	r7, [r8, #4]
   289ca:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   289cc:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   289d0:	f8d8 5004 	ldr.w	r5, [r8, #4]
   289d4:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   289d6:	f8c8 2004 	str.w	r2, [r8, #4]
   289da:	e6df      	b.n	2879c <k_poll+0xd4>
	node->next = list;
   289dc:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   289e0:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289e4:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   289e6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   289ea:	602a      	str	r2, [r5, #0]
	list->tail = node;
   289ec:	f8cc 2004 	str.w	r2, [ip, #4]
   289f0:	e6d4      	b.n	2879c <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289f2:	4647      	mov	r7, r8
   289f4:	e017      	b.n	28a26 <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   289f6:	2700      	movs	r7, #0
   289f8:	e015      	b.n	28a26 <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   289fa:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   289fe:	f1b8 0f00 	cmp.w	r8, #0
   28a02:	d021      	beq.n	28a48 <k_poll+0x380>
					       pending->poller->thread)) {
   28a04:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   28a08:	683f      	ldr	r7, [r7, #0]
   28a0a:	f997 700a 	ldrsb.w	r7, [r7, #10]
   28a0e:	45bb      	cmp	fp, r7
   28a10:	dbd6      	blt.n	289c0 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   28a12:	46c2      	mov	sl, r8
   28a14:	f1b8 0f00 	cmp.w	r8, #0
   28a18:	d0eb      	beq.n	289f2 <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   28a1a:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28a1e:	45b8      	cmp	r8, r7
   28a20:	d0e9      	beq.n	289f6 <k_poll+0x32e>
   28a22:	f8d8 7000 	ldr.w	r7, [r8]
   28a26:	b167      	cbz	r7, 28a42 <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28a28:	f1ba 0f00 	cmp.w	sl, #0
   28a2c:	d0e5      	beq.n	289fa <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   28a2e:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28a32:	45ba      	cmp	sl, r7
   28a34:	d002      	beq.n	28a3c <k_poll+0x374>
   28a36:	f8d8 8000 	ldr.w	r8, [r8]
   28a3a:	e7e0      	b.n	289fe <k_poll+0x336>
   28a3c:	f04f 0800 	mov.w	r8, #0
   28a40:	e7dd      	b.n	289fe <k_poll+0x336>
   28a42:	f04f 0800 	mov.w	r8, #0
   28a46:	e7da      	b.n	289fe <k_poll+0x336>
	node->next = list;
   28a48:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28a4c:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28a50:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   28a52:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28a56:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28a58:	f8cc 2004 	str.w	r2, [ip, #4]
   28a5c:	e69e      	b.n	2879c <k_poll+0xd4>
   28a5e:	f04f 0320 	mov.w	r3, #32
   28a62:	f3ef 8511 	mrs	r5, BASEPRI
   28a66:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   28a6a:	4b46      	ldr	r3, [pc, #280]	; (28b84 <k_poll+0x4bc>)
   28a6c:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   28a6e:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   28a70:	f013 0f20 	tst.w	r3, #32
   28a74:	d047      	beq.n	28b06 <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   28a76:	f023 0320 	bic.w	r3, r3, #32
   28a7a:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   28a7c:	f1b9 0f00 	cmp.w	r9, #0
   28a80:	d049      	beq.n	28b16 <k_poll+0x44e>
   28a82:	4649      	mov	r1, r9
   28a84:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   28a86:	a801      	add	r0, sp, #4
   28a88:	9001      	str	r0, [sp, #4]
   28a8a:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   28a8c:	f000 fab4 	bl	28ff8 <_pend_current_thread>
	_update_time_slice_before_swap();
   28a90:	f000 fb30 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28a94:	4628      	mov	r0, r5
   28a96:	f7fe fe73 	bl	27780 <__swap>
   28a9a:	f04f 0320 	mov.w	r3, #32
   28a9e:	f3ef 8e11 	mrs	lr, BASEPRI
   28aa2:	f383 8811 	msr	BASEPRI, r3
   28aa6:	4675      	mov	r5, lr
   28aa8:	e049      	b.n	28b3e <k_poll+0x476>
	node->prev->next = node->next;
   28aaa:	6853      	ldr	r3, [r2, #4]
   28aac:	5847      	ldr	r7, [r0, r1]
   28aae:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28ab0:	5843      	ldr	r3, [r0, r1]
   28ab2:	6852      	ldr	r2, [r2, #4]
   28ab4:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ab6:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   28aba:	f04f 0320 	mov.w	r3, #32
   28abe:	f3ef 8611 	mrs	r6, BASEPRI
   28ac2:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28ac6:	3c01      	subs	r4, #1
   28ac8:	2c00      	cmp	r4, #0
   28aca:	db1e      	blt.n	28b0a <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   28acc:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28ad0:	0099      	lsls	r1, r3, #2
   28ad2:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   28ad4:	2300      	movs	r3, #0
   28ad6:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28ad8:	7b53      	ldrb	r3, [r2, #13]
   28ada:	f003 030f 	and.w	r3, r3, #15
   28ade:	2b02      	cmp	r3, #2
   28ae0:	d0e3      	beq.n	28aaa <k_poll+0x3e2>
   28ae2:	2b04      	cmp	r3, #4
   28ae4:	d008      	beq.n	28af8 <k_poll+0x430>
   28ae6:	2b01      	cmp	r3, #1
   28ae8:	d1e5      	bne.n	28ab6 <k_poll+0x3ee>
	node->prev->next = node->next;
   28aea:	6853      	ldr	r3, [r2, #4]
   28aec:	5847      	ldr	r7, [r0, r1]
   28aee:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28af0:	5843      	ldr	r3, [r0, r1]
   28af2:	6852      	ldr	r2, [r2, #4]
   28af4:	605a      	str	r2, [r3, #4]
   28af6:	e7de      	b.n	28ab6 <k_poll+0x3ee>
	node->prev->next = node->next;
   28af8:	6853      	ldr	r3, [r2, #4]
   28afa:	5847      	ldr	r7, [r0, r1]
   28afc:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28afe:	5843      	ldr	r3, [r0, r1]
   28b00:	6852      	ldr	r2, [r2, #4]
   28b02:	605a      	str	r2, [r3, #4]
   28b04:	e7d7      	b.n	28ab6 <k_poll+0x3ee>
   28b06:	462e      	mov	r6, r5
   28b08:	e7de      	b.n	28ac8 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b0a:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28b0e:	2000      	movs	r0, #0
}
   28b10:	b005      	add	sp, #20
   28b12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   28b16:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   28b1a:	f06f 000a 	mvn.w	r0, #10
   28b1e:	e7f7      	b.n	28b10 <k_poll+0x448>
	node->prev->next = node->next;
   28b20:	6853      	ldr	r3, [r2, #4]
   28b22:	5877      	ldr	r7, [r6, r1]
   28b24:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28b26:	5873      	ldr	r3, [r6, r1]
   28b28:	6852      	ldr	r2, [r2, #4]
   28b2a:	605a      	str	r2, [r3, #4]
   28b2c:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28b30:	f04f 0320 	mov.w	r3, #32
   28b34:	f3ef 8511 	mrs	r5, BASEPRI
   28b38:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28b3c:	3c01      	subs	r4, #1
   28b3e:	2c00      	cmp	r4, #0
   28b40:	db1c      	blt.n	28b7c <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   28b42:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   28b46:	0099      	lsls	r1, r3, #2
   28b48:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   28b4a:	2300      	movs	r3, #0
   28b4c:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28b4e:	7b53      	ldrb	r3, [r2, #13]
   28b50:	f003 030f 	and.w	r3, r3, #15
   28b54:	2b02      	cmp	r3, #2
   28b56:	d0e3      	beq.n	28b20 <k_poll+0x458>
   28b58:	2b04      	cmp	r3, #4
   28b5a:	d008      	beq.n	28b6e <k_poll+0x4a6>
   28b5c:	2b01      	cmp	r3, #1
   28b5e:	d1e5      	bne.n	28b2c <k_poll+0x464>
	node->prev->next = node->next;
   28b60:	6853      	ldr	r3, [r2, #4]
   28b62:	5877      	ldr	r7, [r6, r1]
   28b64:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28b66:	5873      	ldr	r3, [r6, r1]
   28b68:	6852      	ldr	r2, [r2, #4]
   28b6a:	605a      	str	r2, [r3, #4]
   28b6c:	e7de      	b.n	28b2c <k_poll+0x464>
	node->prev->next = node->next;
   28b6e:	6853      	ldr	r3, [r2, #4]
   28b70:	5877      	ldr	r7, [r6, r1]
   28b72:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28b74:	5873      	ldr	r3, [r6, r1]
   28b76:	6852      	ldr	r2, [r2, #4]
   28b78:	605a      	str	r2, [r3, #4]
   28b7a:	e7d7      	b.n	28b2c <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b7c:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   28b80:	e7c6      	b.n	28b10 <k_poll+0x448>
   28b82:	bf00      	nop
   28b84:	20002880 	.word	0x20002880

00028b88 <_handle_obj_poll_events>:
	return list->head == list;
   28b88:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   28b8a:	4298      	cmp	r0, r3
   28b8c:	d010      	beq.n	28bb0 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   28b8e:	685a      	ldr	r2, [r3, #4]
   28b90:	6818      	ldr	r0, [r3, #0]
   28b92:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   28b94:	681a      	ldr	r2, [r3, #0]
   28b96:	6858      	ldr	r0, [r3, #4]
   28b98:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   28b9a:	b15b      	cbz	r3, 28bb4 <_handle_obj_poll_events+0x2c>
{
   28b9c:	b500      	push	{lr}
   28b9e:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   28ba0:	aa01      	add	r2, sp, #4
   28ba2:	4618      	mov	r0, r3
   28ba4:	f7ff fcfe 	bl	285a4 <_signal_poll_event>
	return must_reschedule;
   28ba8:	9801      	ldr	r0, [sp, #4]
}
   28baa:	b003      	add	sp, #12
   28bac:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28bb0:	2300      	movs	r3, #0
   28bb2:	e7f2      	b.n	28b9a <_handle_obj_poll_events+0x12>
		return 0;
   28bb4:	2000      	movs	r0, #0
   28bb6:	4770      	bx	lr

00028bb8 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   28bb8:	b530      	push	{r4, r5, lr}
   28bba:	b083      	sub	sp, #12
	__asm__ volatile(
   28bbc:	f04f 0320 	mov.w	r3, #32
   28bc0:	f3ef 8511 	mrs	r5, BASEPRI
   28bc4:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   28bc8:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   28bca:	2301      	movs	r3, #1
   28bcc:	6083      	str	r3, [r0, #8]
	return list->head == list;
   28bce:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   28bd0:	4298      	cmp	r0, r3
   28bd2:	d013      	beq.n	28bfc <k_poll_signal+0x44>
	node->prev->next = node->next;
   28bd4:	685a      	ldr	r2, [r3, #4]
   28bd6:	6819      	ldr	r1, [r3, #0]
   28bd8:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28bda:	681a      	ldr	r2, [r3, #0]
   28bdc:	6859      	ldr	r1, [r3, #4]
   28bde:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   28be0:	b173      	cbz	r3, 28c00 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   28be2:	aa01      	add	r2, sp, #4
   28be4:	2101      	movs	r1, #1
   28be6:	4618      	mov	r0, r3
   28be8:	f7ff fcdc 	bl	285a4 <_signal_poll_event>
   28bec:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   28bee:	9b01      	ldr	r3, [sp, #4]
   28bf0:	b953      	cbnz	r3, 28c08 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28bf2:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   28bf6:	4620      	mov	r0, r4
   28bf8:	b003      	add	sp, #12
   28bfa:	bd30      	pop	{r4, r5, pc}
		return NULL;
   28bfc:	2300      	movs	r3, #0
   28bfe:	e7ef      	b.n	28be0 <k_poll_signal+0x28>
   28c00:	f385 8811 	msr	BASEPRI, r5
		return 0;
   28c04:	2400      	movs	r4, #0
   28c06:	e7f6      	b.n	28bf6 <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   28c08:	f000 fa74 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28c0c:	4628      	mov	r0, r5
   28c0e:	f7fe fdb7 	bl	27780 <__swap>
   28c12:	e7f0      	b.n	28bf6 <k_poll_signal+0x3e>

00028c14 <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   28c14:	b530      	push	{r4, r5, lr}
   28c16:	b087      	sub	sp, #28
   28c18:	4604      	mov	r4, r0
   28c1a:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   28c1c:	4603      	mov	r3, r0
   28c1e:	2200      	movs	r2, #0
   28c20:	2104      	movs	r1, #4
   28c22:	eb0d 0001 	add.w	r0, sp, r1
   28c26:	f7ff fd3b 	bl	286a0 <k_poll_event_init>
   28c2a:	e005      	b.n	28c38 <k_queue_poll+0x24>
   28c2c:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28c30:	b9f8      	cbnz	r0, 28c72 <k_queue_poll+0x5e>
   28c32:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28c36:	d11c      	bne.n	28c72 <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28c38:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28c3c:	f36f 1307 	bfc	r3, #4, #4
   28c40:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   28c44:	462a      	mov	r2, r5
   28c46:	2101      	movs	r1, #1
   28c48:	a801      	add	r0, sp, #4
   28c4a:	f7ff fd3d 	bl	286c8 <k_poll>
		if (err) {
   28c4e:	b978      	cbnz	r0, 28c70 <k_queue_poll+0x5c>
	__asm__ volatile(
   28c50:	f04f 0220 	mov.w	r2, #32
   28c54:	f3ef 8311 	mrs	r3, BASEPRI
   28c58:	f382 8811 	msr	BASEPRI, r2
   28c5c:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28c5e:	2800      	cmp	r0, #0
   28c60:	d0e4      	beq.n	28c2c <k_queue_poll+0x18>
	list->head = node->next;
   28c62:	6802      	ldr	r2, [r0, #0]
   28c64:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   28c66:	6861      	ldr	r1, [r4, #4]
   28c68:	4288      	cmp	r0, r1
   28c6a:	d1df      	bne.n	28c2c <k_queue_poll+0x18>
		list->tail = list->head;
   28c6c:	6062      	str	r2, [r4, #4]
   28c6e:	e7dd      	b.n	28c2c <k_queue_poll+0x18>
			return NULL;
   28c70:	2000      	movs	r0, #0

	return val;
}
   28c72:	b007      	add	sp, #28
   28c74:	bd30      	pop	{r4, r5, pc}

00028c76 <k_queue_init>:
	list->head = NULL;
   28c76:	2300      	movs	r3, #0
   28c78:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28c7a:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28c7c:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28c80:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   28c82:	60c3      	str	r3, [r0, #12]
   28c84:	4770      	bx	lr

00028c86 <k_queue_insert>:
{
   28c86:	b510      	push	{r4, lr}
   28c88:	f04f 0320 	mov.w	r3, #32
   28c8c:	f3ef 8411 	mrs	r4, BASEPRI
   28c90:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   28c94:	b159      	cbz	r1, 28cae <k_queue_insert+0x28>
	} else if (!prev->next) {
   28c96:	680b      	ldr	r3, [r1, #0]
   28c98:	b18b      	cbz	r3, 28cbe <k_queue_insert+0x38>
		node->next = prev->next;
   28c9a:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28c9c:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28c9e:	2104      	movs	r1, #4
   28ca0:	3008      	adds	r0, #8
   28ca2:	f7ff ff71 	bl	28b88 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28ca6:	b998      	cbnz	r0, 28cd0 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ca8:	f384 8811 	msr	BASEPRI, r4
   28cac:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28cae:	6803      	ldr	r3, [r0, #0]
   28cb0:	6013      	str	r3, [r2, #0]
	list->head = node;
   28cb2:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   28cb4:	6843      	ldr	r3, [r0, #4]
   28cb6:	2b00      	cmp	r3, #0
   28cb8:	d1f1      	bne.n	28c9e <k_queue_insert+0x18>
		list->tail = list->head;
   28cba:	6042      	str	r2, [r0, #4]
   28cbc:	e7ef      	b.n	28c9e <k_queue_insert+0x18>
	node->next = NULL;
   28cbe:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   28cc0:	6843      	ldr	r3, [r0, #4]
   28cc2:	b113      	cbz	r3, 28cca <k_queue_insert+0x44>
		list->tail->next = node;
   28cc4:	601a      	str	r2, [r3, #0]
		list->tail = node;
   28cc6:	6042      	str	r2, [r0, #4]
   28cc8:	e7e9      	b.n	28c9e <k_queue_insert+0x18>
		list->tail = node;
   28cca:	6042      	str	r2, [r0, #4]
		list->head = node;
   28ccc:	6002      	str	r2, [r0, #0]
   28cce:	e7e6      	b.n	28c9e <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   28cd0:	f000 fa10 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28cd4:	4620      	mov	r0, r4
   28cd6:	f7fe fd53 	bl	27780 <__swap>
   28cda:	bd10      	pop	{r4, pc}

00028cdc <k_queue_append>:
{
   28cdc:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   28cde:	460a      	mov	r2, r1
   28ce0:	6841      	ldr	r1, [r0, #4]
   28ce2:	f7ff ffd0 	bl	28c86 <k_queue_insert>
   28ce6:	bd08      	pop	{r3, pc}

00028ce8 <k_queue_prepend>:
{
   28ce8:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   28cea:	460a      	mov	r2, r1
   28cec:	2100      	movs	r1, #0
   28cee:	f7ff ffca 	bl	28c86 <k_queue_insert>
   28cf2:	bd08      	pop	{r3, pc}

00028cf4 <k_queue_append_list>:
{
   28cf4:	b510      	push	{r4, lr}
	__asm__ volatile(
   28cf6:	f04f 0320 	mov.w	r3, #32
   28cfa:	f3ef 8411 	mrs	r4, BASEPRI
   28cfe:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   28d02:	6843      	ldr	r3, [r0, #4]
   28d04:	b14b      	cbz	r3, 28d1a <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   28d06:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   28d08:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28d0a:	2104      	movs	r1, #4
   28d0c:	3008      	adds	r0, #8
   28d0e:	f7ff ff3b 	bl	28b88 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   28d12:	b928      	cbnz	r0, 28d20 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d14:	f384 8811 	msr	BASEPRI, r4
   28d18:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28d1a:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28d1c:	6042      	str	r2, [r0, #4]
   28d1e:	e7f4      	b.n	28d0a <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28d20:	f000 f9e8 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   28d24:	4620      	mov	r0, r4
   28d26:	f7fe fd2b 	bl	27780 <__swap>
   28d2a:	bd10      	pop	{r4, pc}

00028d2c <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28d2c:	b510      	push	{r4, lr}
	__asm__ volatile(
   28d2e:	f04f 0320 	mov.w	r3, #32
   28d32:	f3ef 8211 	mrs	r2, BASEPRI
   28d36:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28d3a:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28d3c:	b153      	cbz	r3, 28d54 <k_queue_get+0x28>
	list->head = node->next;
   28d3e:	6819      	ldr	r1, [r3, #0]
   28d40:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   28d42:	6844      	ldr	r4, [r0, #4]
   28d44:	42a3      	cmp	r3, r4
   28d46:	d003      	beq.n	28d50 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d48:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28d4c:	4618      	mov	r0, r3
   28d4e:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28d50:	6041      	str	r1, [r0, #4]
   28d52:	e7f9      	b.n	28d48 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   28d54:	b121      	cbz	r1, 28d60 <k_queue_get+0x34>
   28d56:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28d5a:	f7ff ff5b 	bl	28c14 <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28d5e:	bd10      	pop	{r4, pc}
   28d60:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   28d64:	2000      	movs	r0, #0
   28d66:	bd10      	pop	{r4, pc}

00028d68 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28d68:	3010      	adds	r0, #16
   28d6a:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28d6c:	f000 001f 	and.w	r0, r0, #31
   28d70:	2201      	movs	r2, #1
   28d72:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   28d76:	1d9a      	adds	r2, r3, #6
   28d78:	4b03      	ldr	r3, [pc, #12]	; (28d88 <_set_ready_q_prio_bit+0x20>)
   28d7a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28d7e:	685a      	ldr	r2, [r3, #4]
   28d80:	4302      	orrs	r2, r0
   28d82:	605a      	str	r2, [r3, #4]
   28d84:	4770      	bx	lr
   28d86:	bf00      	nop
   28d88:	20002880 	.word	0x20002880

00028d8c <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28d8c:	3010      	adds	r0, #16
   28d8e:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28d90:	f000 001f 	and.w	r0, r0, #31
   28d94:	2201      	movs	r2, #1
   28d96:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28d9a:	1d9a      	adds	r2, r3, #6
   28d9c:	4b03      	ldr	r3, [pc, #12]	; (28dac <_clear_ready_q_prio_bit+0x20>)
   28d9e:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28da2:	685a      	ldr	r2, [r3, #4]
   28da4:	ea22 0200 	bic.w	r2, r2, r0
   28da8:	605a      	str	r2, [r3, #4]
   28daa:	4770      	bx	lr
   28dac:	20002880 	.word	0x20002880

00028db0 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28db0:	4b06      	ldr	r3, [pc, #24]	; (28dcc <_get_ready_q_head+0x1c>)
   28db2:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   28db4:	fa92 f3a2 	rbit	r3, r2
   28db8:	fab3 f383 	clz	r3, r3
   28dbc:	b90a      	cbnz	r2, 28dc2 <_get_ready_q_head+0x12>
   28dbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   28dc2:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   28dc4:	4a01      	ldr	r2, [pc, #4]	; (28dcc <_get_ready_q_head+0x1c>)
   28dc6:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   28dca:	4770      	bx	lr
   28dcc:	20002880 	.word	0x20002880

00028dd0 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   28dd0:	b570      	push	{r4, r5, r6, lr}
   28dd2:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28dd4:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28dd8:	4e0c      	ldr	r6, [pc, #48]	; (28e0c <_add_thread_to_ready_q+0x3c>)
   28dda:	f100 0514 	add.w	r5, r0, #20
   28dde:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   28de2:	f7ff ffc1 	bl	28d68 <_set_ready_q_prio_bit>
	node->next = list;
   28de6:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   28de8:	686b      	ldr	r3, [r5, #4]
   28dea:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   28dec:	686b      	ldr	r3, [r5, #4]
   28dee:	601c      	str	r4, [r3, #0]
	list->tail = node;
   28df0:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   28df2:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   28df4:	f994 200a 	ldrsb.w	r2, [r4, #10]
   28df8:	f993 100a 	ldrsb.w	r1, [r3, #10]
   28dfc:	4291      	cmp	r1, r2
   28dfe:	dc02      	bgt.n	28e06 <_add_thread_to_ready_q+0x36>
   28e00:	4a02      	ldr	r2, [pc, #8]	; (28e0c <_add_thread_to_ready_q+0x3c>)
   28e02:	6193      	str	r3, [r2, #24]
   28e04:	bd70      	pop	{r4, r5, r6, pc}
   28e06:	4623      	mov	r3, r4
   28e08:	e7fa      	b.n	28e00 <_add_thread_to_ready_q+0x30>
   28e0a:	bf00      	nop
   28e0c:	20002880 	.word	0x20002880

00028e10 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   28e10:	b538      	push	{r3, r4, r5, lr}
   28e12:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   28e14:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28e18:	4a0e      	ldr	r2, [pc, #56]	; (28e54 <_remove_thread_from_ready_q+0x44>)
   28e1a:	3314      	adds	r3, #20
   28e1c:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28e20:	6840      	ldr	r0, [r0, #4]
   28e22:	6825      	ldr	r5, [r4, #0]
   28e24:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   28e26:	6820      	ldr	r0, [r4, #0]
   28e28:	6865      	ldr	r5, [r4, #4]
   28e2a:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28e2c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28e30:	4299      	cmp	r1, r3
   28e32:	d006      	beq.n	28e42 <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28e34:	4b07      	ldr	r3, [pc, #28]	; (28e54 <_remove_thread_from_ready_q+0x44>)
   28e36:	6998      	ldr	r0, [r3, #24]
   28e38:	4284      	cmp	r4, r0
   28e3a:	d007      	beq.n	28e4c <_remove_thread_from_ready_q+0x3c>
   28e3c:	4b05      	ldr	r3, [pc, #20]	; (28e54 <_remove_thread_from_ready_q+0x44>)
   28e3e:	6198      	str	r0, [r3, #24]
   28e40:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   28e42:	f994 000a 	ldrsb.w	r0, [r4, #10]
   28e46:	f7ff ffa1 	bl	28d8c <_clear_ready_q_prio_bit>
   28e4a:	e7f3      	b.n	28e34 <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28e4c:	f7ff ffb0 	bl	28db0 <_get_ready_q_head>
   28e50:	e7f4      	b.n	28e3c <_remove_thread_from_ready_q+0x2c>
   28e52:	bf00      	nop
   28e54:	20002880 	.word	0x20002880

00028e58 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28e58:	b538      	push	{r3, r4, r5, lr}
   28e5a:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28e5c:	4299      	cmp	r1, r3
   28e5e:	d115      	bne.n	28e8c <_pend_thread+0x34>
   28e60:	2300      	movs	r3, #0
   28e62:	e013      	b.n	28e8c <_pend_thread+0x34>
	if (!insert_point) {
   28e64:	b133      	cbz	r3, 28e74 <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   28e66:	685c      	ldr	r4, [r3, #4]
   28e68:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28e6a:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28e6c:	685c      	ldr	r4, [r3, #4]
   28e6e:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28e70:	6058      	str	r0, [r3, #4]
   28e72:	e02b      	b.n	28ecc <_pend_thread+0x74>
	node->next = list;
   28e74:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28e76:	684b      	ldr	r3, [r1, #4]
   28e78:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28e7a:	684b      	ldr	r3, [r1, #4]
   28e7c:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28e7e:	6048      	str	r0, [r1, #4]
   28e80:	e024      	b.n	28ecc <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e82:	461d      	mov	r5, r3
   28e84:	e010      	b.n	28ea8 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   28e86:	2500      	movs	r5, #0
   28e88:	e00e      	b.n	28ea8 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e8a:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28e8c:	b1c3      	cbz	r3, 28ec0 <_pend_thread+0x68>
   28e8e:	f990 500a 	ldrsb.w	r5, [r0, #10]
   28e92:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   28e96:	42a5      	cmp	r5, r4
   28e98:	dbe4      	blt.n	28e64 <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28e9a:	461c      	mov	r4, r3
   28e9c:	2b00      	cmp	r3, #0
   28e9e:	d0f0      	beq.n	28e82 <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28ea0:	684d      	ldr	r5, [r1, #4]
   28ea2:	42ab      	cmp	r3, r5
   28ea4:	d0ef      	beq.n	28e86 <_pend_thread+0x2e>
   28ea6:	681d      	ldr	r5, [r3, #0]
   28ea8:	b145      	cbz	r5, 28ebc <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28eaa:	2c00      	cmp	r4, #0
   28eac:	d0ed      	beq.n	28e8a <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28eae:	684d      	ldr	r5, [r1, #4]
   28eb0:	42ac      	cmp	r4, r5
   28eb2:	d001      	beq.n	28eb8 <_pend_thread+0x60>
   28eb4:	681b      	ldr	r3, [r3, #0]
   28eb6:	e7e9      	b.n	28e8c <_pend_thread+0x34>
   28eb8:	2300      	movs	r3, #0
   28eba:	e7e7      	b.n	28e8c <_pend_thread+0x34>
   28ebc:	2300      	movs	r3, #0
   28ebe:	e7e5      	b.n	28e8c <_pend_thread+0x34>
	node->next = list;
   28ec0:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   28ec2:	684b      	ldr	r3, [r1, #4]
   28ec4:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28ec6:	684b      	ldr	r3, [r1, #4]
   28ec8:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28eca:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   28ecc:	7a44      	ldrb	r4, [r0, #9]
   28ece:	f044 0402 	orr.w	r4, r4, #2
   28ed2:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   28ed4:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28ed8:	f000 8089 	beq.w	28fee <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28edc:	f102 0309 	add.w	r3, r2, #9
   28ee0:	4a43      	ldr	r2, [pc, #268]	; (28ff0 <_pend_thread+0x198>)
   28ee2:	fba2 2303 	umull	r2, r3, r2, r3
   28ee6:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   28ee8:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28eea:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28eee:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28ef0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28ef2:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   28ef4:	b133      	cbz	r3, 28f04 <_pend_thread+0xac>
	return list->head == list;
   28ef6:	4a3f      	ldr	r2, [pc, #252]	; (28ff4 <_pend_thread+0x19c>)
   28ef8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28efc:	4293      	cmp	r3, r2
   28efe:	d151      	bne.n	28fa4 <_pend_thread+0x14c>
   28f00:	2300      	movs	r3, #0
   28f02:	e04f      	b.n	28fa4 <_pend_thread+0x14c>
	__asm__ volatile(
   28f04:	f04f 0320 	mov.w	r3, #32
   28f08:	f3ef 8511 	mrs	r5, BASEPRI
   28f0c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f14:	6123      	str	r3, [r4, #16]
	if (thread) {
   28f16:	b320      	cbz	r0, 28f62 <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28f18:	68e3      	ldr	r3, [r4, #12]
   28f1a:	b15b      	cbz	r3, 28f34 <_pend_thread+0xdc>
	node->prev->next = node->next;
   28f1c:	6843      	ldr	r3, [r0, #4]
   28f1e:	6802      	ldr	r2, [r0, #0]
   28f20:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f22:	6803      	ldr	r3, [r0, #0]
   28f24:	6842      	ldr	r2, [r0, #4]
   28f26:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28f28:	7a43      	ldrb	r3, [r0, #9]
   28f2a:	f023 0302 	bic.w	r3, r3, #2
   28f2e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28f30:	2300      	movs	r3, #0
   28f32:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28f34:	7a43      	ldrb	r3, [r0, #9]
   28f36:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28f3a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28f3c:	f013 0f1b 	tst.w	r3, #27
   28f40:	d107      	bne.n	28f52 <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28f42:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28f44:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28f48:	d001      	beq.n	28f4e <_pend_thread+0xf6>
   28f4a:	2300      	movs	r3, #0
   28f4c:	e002      	b.n	28f54 <_pend_thread+0xfc>
   28f4e:	2301      	movs	r3, #1
   28f50:	e000      	b.n	28f54 <_pend_thread+0xfc>
   28f52:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28f54:	b913      	cbnz	r3, 28f5c <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28f56:	f385 8811 	msr	BASEPRI, r5
   28f5a:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28f5c:	f7ff ff38 	bl	28dd0 <_add_thread_to_ready_q>
   28f60:	e7f9      	b.n	28f56 <_pend_thread+0xfe>
   28f62:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   28f66:	6963      	ldr	r3, [r4, #20]
   28f68:	2b00      	cmp	r3, #0
   28f6a:	d040      	beq.n	28fee <_pend_thread+0x196>
			timeout->func(timeout);
   28f6c:	4620      	mov	r0, r4
   28f6e:	4798      	blx	r3
   28f70:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   28f72:	1a8a      	subs	r2, r1, r2
   28f74:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28f76:	b133      	cbz	r3, 28f86 <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28f78:	685a      	ldr	r2, [r3, #4]
   28f7a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28f7c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28f7e:	685a      	ldr	r2, [r3, #4]
   28f80:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28f82:	605c      	str	r4, [r3, #4]
   28f84:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   28f86:	4b1b      	ldr	r3, [pc, #108]	; (28ff4 <_pend_thread+0x19c>)
   28f88:	f103 020c 	add.w	r2, r3, #12
   28f8c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28f8e:	691a      	ldr	r2, [r3, #16]
   28f90:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28f92:	691a      	ldr	r2, [r3, #16]
   28f94:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28f96:	611c      	str	r4, [r3, #16]
   28f98:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f9a:	4619      	mov	r1, r3
   28f9c:	e011      	b.n	28fc2 <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28f9e:	2100      	movs	r1, #0
   28fa0:	e00f      	b.n	28fc2 <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28fa2:	2300      	movs	r3, #0
   28fa4:	b1d3      	cbz	r3, 28fdc <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28fa6:	6922      	ldr	r2, [r4, #16]
   28fa8:	6919      	ldr	r1, [r3, #16]
   28faa:	428a      	cmp	r2, r1
   28fac:	dde1      	ble.n	28f72 <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28fae:	1a52      	subs	r2, r2, r1
   28fb0:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28fb2:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fb4:	2b00      	cmp	r3, #0
   28fb6:	d0f0      	beq.n	28f9a <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   28fb8:	490e      	ldr	r1, [pc, #56]	; (28ff4 <_pend_thread+0x19c>)
   28fba:	6909      	ldr	r1, [r1, #16]
   28fbc:	428b      	cmp	r3, r1
   28fbe:	d0ee      	beq.n	28f9e <_pend_thread+0x146>
   28fc0:	6819      	ldr	r1, [r3, #0]
   28fc2:	2900      	cmp	r1, #0
   28fc4:	d0ed      	beq.n	28fa2 <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fc6:	b12a      	cbz	r2, 28fd4 <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   28fc8:	490a      	ldr	r1, [pc, #40]	; (28ff4 <_pend_thread+0x19c>)
   28fca:	6909      	ldr	r1, [r1, #16]
   28fcc:	428a      	cmp	r2, r1
   28fce:	d003      	beq.n	28fd8 <_pend_thread+0x180>
   28fd0:	681b      	ldr	r3, [r3, #0]
   28fd2:	e7e7      	b.n	28fa4 <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28fd4:	2300      	movs	r3, #0
   28fd6:	e7e5      	b.n	28fa4 <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   28fd8:	2300      	movs	r3, #0
   28fda:	e7e3      	b.n	28fa4 <_pend_thread+0x14c>
	node->next = list;
   28fdc:	4b05      	ldr	r3, [pc, #20]	; (28ff4 <_pend_thread+0x19c>)
   28fde:	f103 020c 	add.w	r2, r3, #12
   28fe2:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28fe4:	691a      	ldr	r2, [r3, #16]
   28fe6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28fe8:	691a      	ldr	r2, [r3, #16]
   28fea:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28fec:	611c      	str	r4, [r3, #16]
   28fee:	bd38      	pop	{r3, r4, r5, pc}
   28ff0:	cccccccd 	.word	0xcccccccd
   28ff4:	20002880 	.word	0x20002880

00028ff8 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   28ff8:	b570      	push	{r4, r5, r6, lr}
   28ffa:	4605      	mov	r5, r0
   28ffc:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   28ffe:	4c05      	ldr	r4, [pc, #20]	; (29014 <_pend_current_thread+0x1c>)
   29000:	68a0      	ldr	r0, [r4, #8]
   29002:	f7ff ff05 	bl	28e10 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   29006:	4632      	mov	r2, r6
   29008:	4629      	mov	r1, r5
   2900a:	68a0      	ldr	r0, [r4, #8]
   2900c:	f7ff ff24 	bl	28e58 <_pend_thread>
   29010:	bd70      	pop	{r4, r5, r6, pc}
   29012:	bf00      	nop
   29014:	20002880 	.word	0x20002880

00029018 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   29018:	4b09      	ldr	r3, [pc, #36]	; (29040 <__must_switch_threads+0x28>)
   2901a:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   2901c:	fa93 f0a3 	rbit	r0, r3
   29020:	fab0 f080 	clz	r0, r0
   29024:	b90b      	cbnz	r3, 2902a <__must_switch_threads+0x12>
   29026:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   2902a:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   2902c:	4b04      	ldr	r3, [pc, #16]	; (29040 <__must_switch_threads+0x28>)
   2902e:	689b      	ldr	r3, [r3, #8]
   29030:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   29034:	4283      	cmp	r3, r0
   29036:	bfd4      	ite	le
   29038:	2000      	movle	r0, #0
   2903a:	2001      	movgt	r0, #1
   2903c:	4770      	bx	lr
   2903e:	bf00      	nop
   29040:	20002880 	.word	0x20002880

00029044 <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   29044:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   29048:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   2904c:	3214      	adds	r2, #20
   2904e:	4911      	ldr	r1, [pc, #68]	; (29094 <_move_thread_to_end_of_prio_q+0x50>)
   29050:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   29054:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   29056:	4288      	cmp	r0, r1
   29058:	d01a      	beq.n	29090 <_move_thread_to_end_of_prio_q+0x4c>
{
   2905a:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   2905c:	6841      	ldr	r1, [r0, #4]
   2905e:	6804      	ldr	r4, [r0, #0]
   29060:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   29062:	6801      	ldr	r1, [r0, #0]
   29064:	6844      	ldr	r4, [r0, #4]
   29066:	604c      	str	r4, [r1, #4]
	node->next = list;
   29068:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   2906a:	4a0a      	ldr	r2, [pc, #40]	; (29094 <_move_thread_to_end_of_prio_q+0x50>)
   2906c:	3304      	adds	r3, #4
   2906e:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   29072:	6859      	ldr	r1, [r3, #4]
   29074:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   29076:	6859      	ldr	r1, [r3, #4]
   29078:	6008      	str	r0, [r1, #0]
	list->tail = node;
   2907a:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2907c:	6993      	ldr	r3, [r2, #24]
   2907e:	4298      	cmp	r0, r3
   29080:	d002      	beq.n	29088 <_move_thread_to_end_of_prio_q+0x44>
   29082:	4a04      	ldr	r2, [pc, #16]	; (29094 <_move_thread_to_end_of_prio_q+0x50>)
   29084:	6193      	str	r3, [r2, #24]
   29086:	bd10      	pop	{r4, pc}
   29088:	f7ff fe92 	bl	28db0 <_get_ready_q_head>
   2908c:	4603      	mov	r3, r0
   2908e:	e7f8      	b.n	29082 <_move_thread_to_end_of_prio_q+0x3e>
   29090:	4770      	bx	lr
   29092:	bf00      	nop
   29094:	20002880 	.word	0x20002880

00029098 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   29098:	4b01      	ldr	r3, [pc, #4]	; (290a0 <_impl_k_current_get+0x8>)
   2909a:	6898      	ldr	r0, [r3, #8]
   2909c:	4770      	bx	lr
   2909e:	bf00      	nop
   290a0:	20002880 	.word	0x20002880

000290a4 <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   290a4:	4b0f      	ldr	r3, [pc, #60]	; (290e4 <_is_thread_time_slicing+0x40>)
   290a6:	681b      	ldr	r3, [r3, #0]
   290a8:	2b00      	cmp	r3, #0
   290aa:	dd14      	ble.n	290d6 <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   290ac:	4b0e      	ldr	r3, [pc, #56]	; (290e8 <_is_thread_time_slicing+0x44>)
   290ae:	681b      	ldr	r3, [r3, #0]
   290b0:	4298      	cmp	r0, r3
   290b2:	d012      	beq.n	290da <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   290b4:	f990 300a 	ldrsb.w	r3, [r0, #10]
   290b8:	4a0c      	ldr	r2, [pc, #48]	; (290ec <_is_thread_time_slicing+0x48>)
   290ba:	6812      	ldr	r2, [r2, #0]
   290bc:	4293      	cmp	r3, r2
   290be:	db0e      	blt.n	290de <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   290c0:	4a0b      	ldr	r2, [pc, #44]	; (290f0 <_is_thread_time_slicing+0x4c>)
   290c2:	3314      	adds	r3, #20
   290c4:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   290c8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   290cc:	685b      	ldr	r3, [r3, #4]
   290ce:	1ac0      	subs	r0, r0, r3
   290d0:	bf18      	it	ne
   290d2:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   290d4:	4770      	bx	lr
		return 0;
   290d6:	2000      	movs	r0, #0
   290d8:	4770      	bx	lr
   290da:	2000      	movs	r0, #0
   290dc:	4770      	bx	lr
   290de:	2000      	movs	r0, #0
}
   290e0:	4770      	bx	lr
   290e2:	bf00      	nop
   290e4:	200029a0 	.word	0x200029a0
   290e8:	0003334c 	.word	0x0003334c
   290ec:	200029a4 	.word	0x200029a4
   290f0:	20002880 	.word	0x20002880

000290f4 <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   290f4:	2200      	movs	r2, #0
   290f6:	4b01      	ldr	r3, [pc, #4]	; (290fc <_update_time_slice_before_swap+0x8>)
   290f8:	601a      	str	r2, [r3, #0]
   290fa:	4770      	bx	lr
   290fc:	20002c6c 	.word	0x20002c6c

00029100 <_reschedule_threads>:
{
   29100:	b510      	push	{r4, lr}
   29102:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   29104:	4b0a      	ldr	r3, [pc, #40]	; (29130 <_reschedule_threads+0x30>)
   29106:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   29108:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2910a:	2b7f      	cmp	r3, #127	; 0x7f
   2910c:	d805      	bhi.n	2911a <_reschedule_threads+0x1a>
   2910e:	f7ff ff83 	bl	29018 <__must_switch_threads>
   29112:	4603      	mov	r3, r0
   29114:	b110      	cbz	r0, 2911c <_reschedule_threads+0x1c>
   29116:	2301      	movs	r3, #1
   29118:	e000      	b.n	2911c <_reschedule_threads+0x1c>
   2911a:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   2911c:	b913      	cbnz	r3, 29124 <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2911e:	f384 8811 	msr	BASEPRI, r4
   29122:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   29124:	f7ff ffe6 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   29128:	4620      	mov	r0, r4
   2912a:	f7fe fb29 	bl	27780 <__swap>
   2912e:	bd10      	pop	{r4, pc}
   29130:	20002880 	.word	0x20002880

00029134 <k_sched_unlock>:
{
   29134:	b508      	push	{r3, lr}
	__asm__ volatile(
   29136:	f04f 0320 	mov.w	r3, #32
   2913a:	f3ef 8011 	mrs	r0, BASEPRI
   2913e:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   29142:	4b04      	ldr	r3, [pc, #16]	; (29154 <k_sched_unlock+0x20>)
   29144:	689a      	ldr	r2, [r3, #8]
   29146:	7ad3      	ldrb	r3, [r2, #11]
   29148:	3301      	adds	r3, #1
   2914a:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   2914c:	f7ff ffd8 	bl	29100 <_reschedule_threads>
   29150:	bd08      	pop	{r3, pc}
   29152:	bf00      	nop
   29154:	20002880 	.word	0x20002880

00029158 <_impl_k_yield>:
{
   29158:	b538      	push	{r3, r4, r5, lr}
   2915a:	f04f 0320 	mov.w	r3, #32
   2915e:	f3ef 8511 	mrs	r5, BASEPRI
   29162:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   29166:	4c08      	ldr	r4, [pc, #32]	; (29188 <_impl_k_yield+0x30>)
   29168:	68a0      	ldr	r0, [r4, #8]
   2916a:	f7ff ff6b 	bl	29044 <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   2916e:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   29170:	69a3      	ldr	r3, [r4, #24]
   29172:	429a      	cmp	r2, r3
   29174:	d005      	beq.n	29182 <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   29176:	f7ff ffbd 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   2917a:	4628      	mov	r0, r5
   2917c:	f7fe fb00 	bl	27780 <__swap>
   29180:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29182:	f385 8811 	msr	BASEPRI, r5
   29186:	bd38      	pop	{r3, r4, r5, pc}
   29188:	20002880 	.word	0x20002880

0002918c <_impl_k_sleep>:
{
   2918c:	b570      	push	{r4, r5, r6, lr}
   2918e:	b082      	sub	sp, #8
	if (duration == 0) {
   29190:	b308      	cbz	r0, 291d6 <_impl_k_sleep+0x4a>
   29192:	4603      	mov	r3, r0
   29194:	3309      	adds	r3, #9
   29196:	4a4f      	ldr	r2, [pc, #316]	; (292d4 <_impl_k_sleep+0x148>)
   29198:	fba2 2303 	umull	r2, r3, r2, r3
   2919c:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   2919e:	3301      	adds	r3, #1
   291a0:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   291a2:	f04f 0320 	mov.w	r3, #32
   291a6:	f3ef 8511 	mrs	r5, BASEPRI
   291aa:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   291ae:	4c4a      	ldr	r4, [pc, #296]	; (292d8 <_impl_k_sleep+0x14c>)
   291b0:	68a0      	ldr	r0, [r4, #8]
   291b2:	f7ff fe2d 	bl	28e10 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   291b6:	68a0      	ldr	r0, [r4, #8]
   291b8:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   291ba:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   291be:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   291c0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   291c2:	2200      	movs	r2, #0
   291c4:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   291c6:	b14b      	cbz	r3, 291dc <_impl_k_sleep+0x50>
	return list->head == list;
   291c8:	4a43      	ldr	r2, [pc, #268]	; (292d8 <_impl_k_sleep+0x14c>)
   291ca:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291ce:	4293      	cmp	r3, r2
   291d0:	d154      	bne.n	2927c <_impl_k_sleep+0xf0>
   291d2:	2300      	movs	r3, #0
   291d4:	e052      	b.n	2927c <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   291d6:	f7ff ffbf 	bl	29158 <_impl_k_yield>
   291da:	e079      	b.n	292d0 <_impl_k_sleep+0x144>
   291dc:	f04f 0320 	mov.w	r3, #32
   291e0:	f3ef 8611 	mrs	r6, BASEPRI
   291e4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   291e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   291ec:	6123      	str	r3, [r4, #16]
	if (thread) {
   291ee:	b320      	cbz	r0, 2923a <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   291f0:	68e3      	ldr	r3, [r4, #12]
   291f2:	b15b      	cbz	r3, 2920c <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   291f4:	6843      	ldr	r3, [r0, #4]
   291f6:	6802      	ldr	r2, [r0, #0]
   291f8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   291fa:	6803      	ldr	r3, [r0, #0]
   291fc:	6842      	ldr	r2, [r0, #4]
   291fe:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29200:	7a43      	ldrb	r3, [r0, #9]
   29202:	f023 0302 	bic.w	r3, r3, #2
   29206:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29208:	2300      	movs	r3, #0
   2920a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2920c:	7a43      	ldrb	r3, [r0, #9]
   2920e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29212:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29214:	f013 0f1b 	tst.w	r3, #27
   29218:	d107      	bne.n	2922a <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2921a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2921c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29220:	d001      	beq.n	29226 <_impl_k_sleep+0x9a>
   29222:	2300      	movs	r3, #0
   29224:	e002      	b.n	2922c <_impl_k_sleep+0xa0>
   29226:	2301      	movs	r3, #1
   29228:	e000      	b.n	2922c <_impl_k_sleep+0xa0>
   2922a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2922c:	b913      	cbnz	r3, 29234 <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2922e:	f386 8811 	msr	BASEPRI, r6
   29232:	e048      	b.n	292c6 <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   29234:	f7ff fdcc 	bl	28dd0 <_add_thread_to_ready_q>
   29238:	e7f9      	b.n	2922e <_impl_k_sleep+0xa2>
   2923a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   2923e:	6963      	ldr	r3, [r4, #20]
   29240:	2b00      	cmp	r3, #0
   29242:	d040      	beq.n	292c6 <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   29244:	4620      	mov	r0, r4
   29246:	4798      	blx	r3
   29248:	e03d      	b.n	292c6 <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   2924a:	1a8a      	subs	r2, r1, r2
   2924c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2924e:	b133      	cbz	r3, 2925e <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   29250:	685a      	ldr	r2, [r3, #4]
   29252:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29254:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   29256:	685a      	ldr	r2, [r3, #4]
   29258:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2925a:	605c      	str	r4, [r3, #4]
   2925c:	e033      	b.n	292c6 <_impl_k_sleep+0x13a>
	node->next = list;
   2925e:	4b1e      	ldr	r3, [pc, #120]	; (292d8 <_impl_k_sleep+0x14c>)
   29260:	f103 020c 	add.w	r2, r3, #12
   29264:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   29266:	691a      	ldr	r2, [r3, #16]
   29268:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2926a:	691a      	ldr	r2, [r3, #16]
   2926c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2926e:	611c      	str	r4, [r3, #16]
   29270:	e029      	b.n	292c6 <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29272:	4619      	mov	r1, r3
   29274:	e011      	b.n	2929a <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   29276:	2100      	movs	r1, #0
   29278:	e00f      	b.n	2929a <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2927a:	2300      	movs	r3, #0
   2927c:	b1d3      	cbz	r3, 292b4 <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2927e:	6922      	ldr	r2, [r4, #16]
   29280:	6919      	ldr	r1, [r3, #16]
   29282:	428a      	cmp	r2, r1
   29284:	dde1      	ble.n	2924a <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   29286:	1a52      	subs	r2, r2, r1
   29288:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2928a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2928c:	2b00      	cmp	r3, #0
   2928e:	d0f0      	beq.n	29272 <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   29290:	4911      	ldr	r1, [pc, #68]	; (292d8 <_impl_k_sleep+0x14c>)
   29292:	6909      	ldr	r1, [r1, #16]
   29294:	428b      	cmp	r3, r1
   29296:	d0ee      	beq.n	29276 <_impl_k_sleep+0xea>
   29298:	6819      	ldr	r1, [r3, #0]
   2929a:	2900      	cmp	r1, #0
   2929c:	d0ed      	beq.n	2927a <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2929e:	b12a      	cbz	r2, 292ac <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   292a0:	490d      	ldr	r1, [pc, #52]	; (292d8 <_impl_k_sleep+0x14c>)
   292a2:	6909      	ldr	r1, [r1, #16]
   292a4:	428a      	cmp	r2, r1
   292a6:	d003      	beq.n	292b0 <_impl_k_sleep+0x124>
   292a8:	681b      	ldr	r3, [r3, #0]
   292aa:	e7e7      	b.n	2927c <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   292ac:	2300      	movs	r3, #0
   292ae:	e7e5      	b.n	2927c <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   292b0:	2300      	movs	r3, #0
   292b2:	e7e3      	b.n	2927c <_impl_k_sleep+0xf0>
	node->next = list;
   292b4:	4b08      	ldr	r3, [pc, #32]	; (292d8 <_impl_k_sleep+0x14c>)
   292b6:	f103 020c 	add.w	r2, r3, #12
   292ba:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   292bc:	691a      	ldr	r2, [r3, #16]
   292be:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   292c0:	691a      	ldr	r2, [r3, #16]
   292c2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   292c4:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   292c6:	f7ff ff15 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   292ca:	4628      	mov	r0, r5
   292cc:	f7fe fa58 	bl	27780 <__swap>
}
   292d0:	b002      	add	sp, #8
   292d2:	bd70      	pop	{r4, r5, r6, pc}
   292d4:	cccccccd 	.word	0xcccccccd
   292d8:	20002880 	.word	0x20002880

000292dc <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   292dc:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   292de:	4b43      	ldr	r3, [pc, #268]	; (293ec <do_sem_give+0x110>)
   292e0:	681b      	ldr	r3, [r3, #0]
   292e2:	2b00      	cmp	r3, #0
   292e4:	d136      	bne.n	29354 <do_sem_give+0x78>
	return list->head == list;
   292e6:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   292e8:	42a0      	cmp	r0, r4
   292ea:	d044      	beq.n	29376 <do_sem_give+0x9a>
	if (thread) {
   292ec:	b14c      	cbz	r4, 29302 <do_sem_give+0x26>
	node->prev->next = node->next;
   292ee:	6863      	ldr	r3, [r4, #4]
   292f0:	6822      	ldr	r2, [r4, #0]
   292f2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   292f4:	6823      	ldr	r3, [r4, #0]
   292f6:	6862      	ldr	r2, [r4, #4]
   292f8:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   292fa:	7a63      	ldrb	r3, [r4, #9]
   292fc:	f023 0302 	bic.w	r3, r3, #2
   29300:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   29302:	2c00      	cmp	r4, #0
   29304:	d039      	beq.n	2937a <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29306:	6a22      	ldr	r2, [r4, #32]
   29308:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2930c:	d013      	beq.n	29336 <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2930e:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29312:	4937      	ldr	r1, [pc, #220]	; (293f0 <do_sem_give+0x114>)
   29314:	6909      	ldr	r1, [r1, #16]
   29316:	428b      	cmp	r3, r1
   29318:	d004      	beq.n	29324 <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2931a:	b103      	cbz	r3, 2931e <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   2931c:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2931e:	6919      	ldr	r1, [r3, #16]
   29320:	440a      	add	r2, r1
   29322:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29324:	6963      	ldr	r3, [r4, #20]
   29326:	6922      	ldr	r2, [r4, #16]
   29328:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2932a:	6923      	ldr	r3, [r4, #16]
   2932c:	6962      	ldr	r2, [r4, #20]
   2932e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29330:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29334:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29336:	7a63      	ldrb	r3, [r4, #9]
   29338:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2933c:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2933e:	f013 0f1b 	tst.w	r3, #27
   29342:	d128      	bne.n	29396 <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29344:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29346:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2934a:	d022      	beq.n	29392 <do_sem_give+0xb6>
   2934c:	2300      	movs	r3, #0
   2934e:	e023      	b.n	29398 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29350:	2400      	movs	r4, #0
   29352:	e003      	b.n	2935c <do_sem_give+0x80>
   29354:	4602      	mov	r2, r0
	return list->head == list;
   29356:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29358:	42a0      	cmp	r0, r4
   2935a:	d0f9      	beq.n	29350 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   2935c:	2c00      	cmp	r4, #0
   2935e:	d0c5      	beq.n	292ec <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29360:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   29362:	f113 0f02 	cmn.w	r3, #2
   29366:	d1c1      	bne.n	292ec <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   29368:	6853      	ldr	r3, [r2, #4]
   2936a:	429c      	cmp	r4, r3
   2936c:	d001      	beq.n	29372 <do_sem_give+0x96>
   2936e:	6824      	ldr	r4, [r4, #0]
   29370:	e7f4      	b.n	2935c <do_sem_give+0x80>
   29372:	2400      	movs	r4, #0
   29374:	e7f2      	b.n	2935c <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29376:	2400      	movs	r4, #0
   29378:	e7b8      	b.n	292ec <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   2937a:	6883      	ldr	r3, [r0, #8]
   2937c:	68c2      	ldr	r2, [r0, #12]
   2937e:	4293      	cmp	r3, r2
   29380:	bf18      	it	ne
   29382:	3301      	addne	r3, #1
   29384:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   29386:	2102      	movs	r1, #2
   29388:	3010      	adds	r0, #16
   2938a:	f7ff fbfd 	bl	28b88 <_handle_obj_poll_events>
   2938e:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   29390:	e01c      	b.n	293cc <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   29392:	2301      	movs	r3, #1
   29394:	e000      	b.n	29398 <do_sem_give+0xbc>
   29396:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29398:	b96b      	cbnz	r3, 293b6 <do_sem_give+0xda>
   2939a:	2300      	movs	r3, #0
   2939c:	6663      	str	r3, [r4, #100]	; 0x64
   2939e:	f3ef 8305 	mrs	r3, IPSR
   293a2:	2b0d      	cmp	r3, #13
   293a4:	d80b      	bhi.n	293be <do_sem_give+0xe2>
   293a6:	b19b      	cbz	r3, 293d0 <do_sem_give+0xf4>
   293a8:	4b12      	ldr	r3, [pc, #72]	; (293f4 <do_sem_give+0x118>)
   293aa:	685b      	ldr	r3, [r3, #4]
   293ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
   293b0:	d010      	beq.n	293d4 <do_sem_give+0xf8>
   293b2:	2300      	movs	r3, #0
   293b4:	e004      	b.n	293c0 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   293b6:	4620      	mov	r0, r4
   293b8:	f7ff fd0a 	bl	28dd0 <_add_thread_to_ready_q>
   293bc:	e7ed      	b.n	2939a <do_sem_give+0xbe>
   293be:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   293c0:	b98b      	cbnz	r3, 293e6 <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   293c2:	4a0b      	ldr	r2, [pc, #44]	; (293f0 <do_sem_give+0x114>)
   293c4:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   293c6:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   293c8:	2a7f      	cmp	r2, #127	; 0x7f
   293ca:	d905      	bls.n	293d8 <do_sem_give+0xfc>
}
   293cc:	4618      	mov	r0, r3
   293ce:	bd10      	pop	{r4, pc}
   293d0:	2300      	movs	r3, #0
   293d2:	e7f5      	b.n	293c0 <do_sem_give+0xe4>
   293d4:	2301      	movs	r3, #1
   293d6:	e7f3      	b.n	293c0 <do_sem_give+0xe4>
   293d8:	f7ff fe1e 	bl	29018 <__must_switch_threads>
   293dc:	4603      	mov	r3, r0
   293de:	2800      	cmp	r0, #0
   293e0:	d0f4      	beq.n	293cc <do_sem_give+0xf0>
   293e2:	2301      	movs	r3, #1
   293e4:	e7f2      	b.n	293cc <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   293e6:	2300      	movs	r3, #0
   293e8:	e7f0      	b.n	293cc <do_sem_give+0xf0>
   293ea:	bf00      	nop
   293ec:	20002c68 	.word	0x20002c68
   293f0:	20002880 	.word	0x20002880
   293f4:	e000ed00 	.word	0xe000ed00

000293f8 <_impl_k_sem_init>:
	sem->count = initial_count;
   293f8:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   293fa:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   293fc:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   293fe:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   29400:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   29404:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   29406:	6143      	str	r3, [r0, #20]
   29408:	4770      	bx	lr

0002940a <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   2940a:	b510      	push	{r4, lr}
	__asm__ volatile(
   2940c:	f04f 0320 	mov.w	r3, #32
   29410:	f3ef 8411 	mrs	r4, BASEPRI
   29414:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   29418:	f7ff ff60 	bl	292dc <do_sem_give>
   2941c:	b910      	cbnz	r0, 29424 <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2941e:	f384 8811 	msr	BASEPRI, r4
   29422:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   29424:	f7ff fe66 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   29428:	4620      	mov	r0, r4
   2942a:	f7fe f9a9 	bl	27780 <__swap>
   2942e:	bd10      	pop	{r4, pc}

00029430 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   29430:	b510      	push	{r4, lr}
	__asm__ volatile(
   29432:	f04f 0320 	mov.w	r3, #32
   29436:	f3ef 8411 	mrs	r4, BASEPRI
   2943a:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   2943e:	6883      	ldr	r3, [r0, #8]
   29440:	b12b      	cbz	r3, 2944e <_impl_k_sem_take+0x1e>
		sem->count--;
   29442:	3b01      	subs	r3, #1
   29444:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29446:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   2944a:	2000      	movs	r0, #0
   2944c:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   2944e:	b139      	cbz	r1, 29460 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   29450:	f7ff fdd2 	bl	28ff8 <_pend_current_thread>
	_update_time_slice_before_swap();
   29454:	f7ff fe4e 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   29458:	4620      	mov	r0, r4
   2945a:	f7fe f991 	bl	27780 <__swap>

	return _Swap(key);
}
   2945e:	bd10      	pop	{r4, pc}
   29460:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   29464:	f06f 000f 	mvn.w	r0, #15
   29468:	bd10      	pop	{r4, pc}
	...

0002946c <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   2946c:	b538      	push	{r3, r4, r5, lr}
   2946e:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   29470:	4b0f      	ldr	r3, [pc, #60]	; (294b0 <handle_time_slicing+0x44>)
   29472:	6898      	ldr	r0, [r3, #8]
   29474:	f7ff fe16 	bl	290a4 <_is_thread_time_slicing>
   29478:	b150      	cbz	r0, 29490 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   2947a:	00a2      	lsls	r2, r4, #2
   2947c:	1912      	adds	r2, r2, r4
   2947e:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   29480:	490c      	ldr	r1, [pc, #48]	; (294b4 <handle_time_slicing+0x48>)
   29482:	680b      	ldr	r3, [r1, #0]
   29484:	441a      	add	r2, r3
   29486:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   29488:	4b0b      	ldr	r3, [pc, #44]	; (294b8 <handle_time_slicing+0x4c>)
   2948a:	681b      	ldr	r3, [r3, #0]
   2948c:	429a      	cmp	r2, r3
   2948e:	da00      	bge.n	29492 <handle_time_slicing+0x26>
   29490:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   29492:	2200      	movs	r2, #0
   29494:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   29496:	f04f 0320 	mov.w	r3, #32
   2949a:	f3ef 8411 	mrs	r4, BASEPRI
   2949e:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   294a2:	4b03      	ldr	r3, [pc, #12]	; (294b0 <handle_time_slicing+0x44>)
   294a4:	6898      	ldr	r0, [r3, #8]
   294a6:	f7ff fdcd 	bl	29044 <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294aa:	f384 8811 	msr	BASEPRI, r4
   294ae:	e7ef      	b.n	29490 <handle_time_slicing+0x24>
   294b0:	20002880 	.word	0x20002880
   294b4:	20002c6c 	.word	0x20002c6c
   294b8:	200029a0 	.word	0x200029a0

000294bc <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   294bc:	4b01      	ldr	r3, [pc, #4]	; (294c4 <_tick_get_32+0x8>)
   294be:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   294c2:	4770      	bx	lr
   294c4:	20002c70 	.word	0x20002c70

000294c8 <_impl_k_uptime_get_32>:
{
   294c8:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   294ca:	f7ff fff7 	bl	294bc <_tick_get_32>
   294ce:	0082      	lsls	r2, r0, #2
   294d0:	1810      	adds	r0, r2, r0
   294d2:	1800      	adds	r0, r0, r0
}
   294d4:	bd38      	pop	{r3, r4, r5, pc}
	...

000294d8 <_tick_get>:
	__asm__ volatile(
   294d8:	f04f 0220 	mov.w	r2, #32
   294dc:	f3ef 8311 	mrs	r3, BASEPRI
   294e0:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   294e4:	4a02      	ldr	r2, [pc, #8]	; (294f0 <_tick_get+0x18>)
   294e6:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294ea:	f383 8811 	msr	BASEPRI, r3
}
   294ee:	4770      	bx	lr
   294f0:	20002c70 	.word	0x20002c70

000294f4 <_impl_k_uptime_get>:
{
   294f4:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   294f6:	f7ff ffef 	bl	294d8 <_tick_get>
   294fa:	008c      	lsls	r4, r1, #2
   294fc:	0082      	lsls	r2, r0, #2
   294fe:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   29502:	1880      	adds	r0, r0, r2
   29504:	4159      	adcs	r1, r3
   29506:	1800      	adds	r0, r0, r0
   29508:	4149      	adcs	r1, r1
}
   2950a:	bd10      	pop	{r4, pc}

0002950c <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   2950c:	b570      	push	{r4, r5, r6, lr}
   2950e:	b082      	sub	sp, #8
   29510:	4605      	mov	r5, r0
	__asm__ volatile(
   29512:	f04f 0320 	mov.w	r3, #32
   29516:	f3ef 8011 	mrs	r0, BASEPRI
   2951a:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   2951e:	496a      	ldr	r1, [pc, #424]	; (296c8 <_nano_sys_clock_tick_announce+0x1bc>)
   29520:	e9d1 2300 	ldrd	r2, r3, [r1]
   29524:	1952      	adds	r2, r2, r5
   29526:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   2952a:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2952e:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   29532:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   29536:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   2953a:	f04f 0320 	mov.w	r3, #32
   2953e:	f3ef 8111 	mrs	r1, BASEPRI
   29542:	f383 8811 	msr	BASEPRI, r3
   29546:	4608      	mov	r0, r1
	return list->head == list;
   29548:	4b60      	ldr	r3, [pc, #384]	; (296cc <_nano_sys_clock_tick_announce+0x1c0>)
   2954a:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2954e:	429a      	cmp	r2, r3
   29550:	d02b      	beq.n	295aa <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   29552:	b362      	cbz	r2, 295ae <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   29554:	6913      	ldr	r3, [r2, #16]
   29556:	1b5b      	subs	r3, r3, r5
   29558:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   2955a:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   2955c:	2101      	movs	r1, #1
   2955e:	4a5c      	ldr	r2, [pc, #368]	; (296d0 <_nano_sys_clock_tick_announce+0x1c4>)
   29560:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   29562:	b33b      	cbz	r3, 295b4 <_nano_sys_clock_tick_announce+0xa8>
   29564:	691a      	ldr	r2, [r3, #16]
   29566:	bb2a      	cbnz	r2, 295b4 <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   29568:	685a      	ldr	r2, [r3, #4]
   2956a:	6819      	ldr	r1, [r3, #0]
   2956c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2956e:	681a      	ldr	r2, [r3, #0]
   29570:	6859      	ldr	r1, [r3, #4]
   29572:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   29574:	aa02      	add	r2, sp, #8
   29576:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   2957a:	6019      	str	r1, [r3, #0]
	node->prev = list;
   2957c:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   2957e:	9a00      	ldr	r2, [sp, #0]
   29580:	6053      	str	r3, [r2, #4]
	list->head = node;
   29582:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   29584:	f06f 0201 	mvn.w	r2, #1
   29588:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2958a:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   2958e:	f04f 0220 	mov.w	r2, #32
   29592:	f3ef 8311 	mrs	r3, BASEPRI
   29596:	f382 8811 	msr	BASEPRI, r2
   2959a:	4618      	mov	r0, r3
	return list->head == list;
   2959c:	4a4b      	ldr	r2, [pc, #300]	; (296cc <_nano_sys_clock_tick_announce+0x1c0>)
   2959e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295a2:	4293      	cmp	r3, r2
   295a4:	d1dd      	bne.n	29562 <_nano_sys_clock_tick_announce+0x56>
   295a6:	2300      	movs	r3, #0
   295a8:	e7db      	b.n	29562 <_nano_sys_clock_tick_announce+0x56>
   295aa:	2200      	movs	r2, #0
   295ac:	e7d1      	b.n	29552 <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   295ae:	f381 8811 	msr	BASEPRI, r1
   295b2:	e084      	b.n	296be <_nano_sys_clock_tick_announce+0x1b2>
   295b4:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   295b8:	aa02      	add	r2, sp, #8
   295ba:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295be:	4293      	cmp	r3, r2
   295c0:	d00d      	beq.n	295de <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   295c2:	b193      	cbz	r3, 295ea <_nano_sys_clock_tick_announce+0xde>
   295c4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295c6:	b163      	cbz	r3, 295e2 <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   295c8:	9901      	ldr	r1, [sp, #4]
   295ca:	428b      	cmp	r3, r1
   295cc:	d00b      	beq.n	295e6 <_nano_sys_clock_tick_announce+0xda>
   295ce:	6819      	ldr	r1, [r3, #0]
   295d0:	b169      	cbz	r1, 295ee <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295d2:	b172      	cbz	r2, 295f2 <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   295d4:	9901      	ldr	r1, [sp, #4]
   295d6:	428a      	cmp	r2, r1
   295d8:	d00d      	beq.n	295f6 <_nano_sys_clock_tick_announce+0xea>
   295da:	681c      	ldr	r4, [r3, #0]
   295dc:	e027      	b.n	2962e <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   295de:	2300      	movs	r3, #0
   295e0:	e7ef      	b.n	295c2 <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295e2:	4619      	mov	r1, r3
   295e4:	e7f4      	b.n	295d0 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   295e6:	2100      	movs	r1, #0
   295e8:	e7f2      	b.n	295d0 <_nano_sys_clock_tick_announce+0xc4>
   295ea:	461c      	mov	r4, r3
   295ec:	e01f      	b.n	2962e <_nano_sys_clock_tick_announce+0x122>
   295ee:	2400      	movs	r4, #0
   295f0:	e01d      	b.n	2962e <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   295f2:	2400      	movs	r4, #0
   295f4:	e01b      	b.n	2962e <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   295f6:	2400      	movs	r4, #0
   295f8:	e019      	b.n	2962e <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   295fa:	2301      	movs	r3, #1
   295fc:	e000      	b.n	29600 <_nano_sys_clock_tick_announce+0xf4>
   295fe:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29600:	2b00      	cmp	r3, #0
   29602:	d142      	bne.n	2968a <_nano_sys_clock_tick_announce+0x17e>
   29604:	f386 8811 	msr	BASEPRI, r6
   29608:	2c00      	cmp	r4, #0
   2960a:	d04d      	beq.n	296a8 <_nano_sys_clock_tick_announce+0x19c>
   2960c:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2960e:	2c00      	cmp	r4, #0
   29610:	d046      	beq.n	296a0 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   29612:	9a01      	ldr	r2, [sp, #4]
   29614:	4294      	cmp	r4, r2
   29616:	d045      	beq.n	296a4 <_nano_sys_clock_tick_announce+0x198>
   29618:	6822      	ldr	r2, [r4, #0]
   2961a:	2a00      	cmp	r2, #0
   2961c:	d046      	beq.n	296ac <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2961e:	2b00      	cmp	r3, #0
   29620:	d046      	beq.n	296b0 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   29622:	9a01      	ldr	r2, [sp, #4]
   29624:	4293      	cmp	r3, r2
   29626:	d045      	beq.n	296b4 <_nano_sys_clock_tick_announce+0x1a8>
   29628:	6822      	ldr	r2, [r4, #0]
   2962a:	4623      	mov	r3, r4
   2962c:	4614      	mov	r4, r2
   2962e:	2b00      	cmp	r3, #0
   29630:	d042      	beq.n	296b8 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   29632:	685a      	ldr	r2, [r3, #4]
   29634:	6819      	ldr	r1, [r3, #0]
   29636:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29638:	681a      	ldr	r2, [r3, #0]
   2963a:	6859      	ldr	r1, [r3, #4]
   2963c:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   2963e:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   29640:	f04f 0220 	mov.w	r2, #32
   29644:	f3ef 8611 	mrs	r6, BASEPRI
   29648:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2964c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29650:	611a      	str	r2, [r3, #16]
	if (thread) {
   29652:	b1e8      	cbz	r0, 29690 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   29654:	68db      	ldr	r3, [r3, #12]
   29656:	b15b      	cbz	r3, 29670 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   29658:	6843      	ldr	r3, [r0, #4]
   2965a:	6802      	ldr	r2, [r0, #0]
   2965c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2965e:	6803      	ldr	r3, [r0, #0]
   29660:	6842      	ldr	r2, [r0, #4]
   29662:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29664:	7a43      	ldrb	r3, [r0, #9]
   29666:	f023 0302 	bic.w	r3, r3, #2
   2966a:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2966c:	2300      	movs	r3, #0
   2966e:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29670:	7a43      	ldrb	r3, [r0, #9]
   29672:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29676:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29678:	f013 0f1b 	tst.w	r3, #27
   2967c:	d1bf      	bne.n	295fe <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2967e:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29680:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29684:	d0b9      	beq.n	295fa <_nano_sys_clock_tick_announce+0xee>
   29686:	2300      	movs	r3, #0
   29688:	e7ba      	b.n	29600 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   2968a:	f7ff fba1 	bl	28dd0 <_add_thread_to_ready_q>
   2968e:	e7b9      	b.n	29604 <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29690:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29694:	695a      	ldr	r2, [r3, #20]
   29696:	2a00      	cmp	r2, #0
   29698:	d0b6      	beq.n	29608 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   2969a:	4618      	mov	r0, r3
   2969c:	4790      	blx	r2
   2969e:	e7b3      	b.n	29608 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296a0:	4622      	mov	r2, r4
   296a2:	e7ba      	b.n	2961a <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   296a4:	2200      	movs	r2, #0
   296a6:	e7b8      	b.n	2961a <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   296a8:	4622      	mov	r2, r4
   296aa:	e7be      	b.n	2962a <_nano_sys_clock_tick_announce+0x11e>
   296ac:	2200      	movs	r2, #0
   296ae:	e7bc      	b.n	2962a <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   296b0:	2200      	movs	r2, #0
   296b2:	e7ba      	b.n	2962a <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   296b4:	2200      	movs	r2, #0
   296b6:	e7b8      	b.n	2962a <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   296b8:	2200      	movs	r2, #0
   296ba:	4b05      	ldr	r3, [pc, #20]	; (296d0 <_nano_sys_clock_tick_announce+0x1c4>)
   296bc:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   296be:	4628      	mov	r0, r5
   296c0:	f7ff fed4 	bl	2946c <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   296c4:	b002      	add	sp, #8
   296c6:	bd70      	pop	{r4, r5, r6, pc}
   296c8:	20002c70 	.word	0x20002c70
   296cc:	20002880 	.word	0x20002880
   296d0:	20002c68 	.word	0x20002c68

000296d4 <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   296d4:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   296d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   296da:	f44f 6280 	mov.w	r2, #1024	; 0x400
   296de:	4903      	ldr	r1, [pc, #12]	; (296ec <k_sys_work_q_init+0x18>)
   296e0:	4803      	ldr	r0, [pc, #12]	; (296f0 <k_sys_work_q_init+0x1c>)
   296e2:	f000 fc49 	bl	29f78 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   296e6:	2000      	movs	r0, #0
   296e8:	bd08      	pop	{r3, pc}
   296ea:	bf00      	nop
   296ec:	2000b568 	.word	0x2000b568
   296f0:	20002c78 	.word	0x20002c78

000296f4 <k_is_in_isr>:
   296f4:	f3ef 8305 	mrs	r3, IPSR
   296f8:	2b0d      	cmp	r3, #13
   296fa:	d807      	bhi.n	2970c <k_is_in_isr+0x18>
   296fc:	b143      	cbz	r3, 29710 <k_is_in_isr+0x1c>
   296fe:	4b06      	ldr	r3, [pc, #24]	; (29718 <k_is_in_isr+0x24>)
   29700:	685b      	ldr	r3, [r3, #4]
   29702:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29706:	d005      	beq.n	29714 <k_is_in_isr+0x20>
   29708:	2000      	movs	r0, #0
   2970a:	4770      	bx	lr
   2970c:	2001      	movs	r0, #1
   2970e:	4770      	bx	lr
   29710:	2000      	movs	r0, #0
   29712:	4770      	bx	lr
   29714:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   29716:	4770      	bx	lr
   29718:	e000ed00 	.word	0xe000ed00

0002971c <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   2971c:	4b02      	ldr	r3, [pc, #8]	; (29728 <_is_thread_essential+0xc>)
   2971e:	689b      	ldr	r3, [r3, #8]
   29720:	7a18      	ldrb	r0, [r3, #8]
}
   29722:	f000 0001 	and.w	r0, r0, #1
   29726:	4770      	bx	lr
   29728:	20002880 	.word	0x20002880

0002972c <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   2972c:	b508      	push	{r3, lr}
   2972e:	4604      	mov	r4, r0
   29730:	4608      	mov	r0, r1
   29732:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   29734:	461a      	mov	r2, r3
   29736:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   29738:	f7ff fcae 	bl	29098 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   2973c:	f7fe facc 	bl	27cd8 <_impl_k_thread_abort>

00029740 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   29740:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29742:	f04f 0320 	mov.w	r3, #32
   29746:	f3ef 8411 	mrs	r4, BASEPRI
   2974a:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   2974e:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   29750:	f013 0f04 	tst.w	r3, #4
   29754:	d00b      	beq.n	2976e <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29756:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2975a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2975c:	f013 0f1b 	tst.w	r3, #27
   29760:	d10a      	bne.n	29778 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29762:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29764:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29768:	d004      	beq.n	29774 <_impl_k_thread_start+0x34>
   2976a:	2500      	movs	r5, #0
   2976c:	e005      	b.n	2977a <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2976e:	f384 8811 	msr	BASEPRI, r4
   29772:	bd38      	pop	{r3, r4, r5, pc}
   29774:	2501      	movs	r5, #1
   29776:	e000      	b.n	2977a <_impl_k_thread_start+0x3a>
   29778:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   2977a:	b915      	cbnz	r5, 29782 <_impl_k_thread_start+0x42>
   2977c:	f384 8811 	msr	BASEPRI, r4
   29780:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   29782:	f7ff fb25 	bl	28dd0 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   29786:	4b0a      	ldr	r3, [pc, #40]	; (297b0 <_impl_k_thread_start+0x70>)
   29788:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2978a:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   2978c:	2b7f      	cmp	r3, #127	; 0x7f
   2978e:	d908      	bls.n	297a2 <_impl_k_thread_start+0x62>
   29790:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   29792:	2b00      	cmp	r3, #0
   29794:	d0f2      	beq.n	2977c <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   29796:	f7ff fcad 	bl	290f4 <_update_time_slice_before_swap>
	return __swap(key);
   2979a:	4620      	mov	r0, r4
   2979c:	f7fd fff0 	bl	27780 <__swap>
   297a0:	bd38      	pop	{r3, r4, r5, pc}
   297a2:	f7ff fc39 	bl	29018 <__must_switch_threads>
   297a6:	4603      	mov	r3, r0
   297a8:	2800      	cmp	r0, #0
   297aa:	d0f2      	beq.n	29792 <_impl_k_thread_start+0x52>
   297ac:	462b      	mov	r3, r5
   297ae:	e7f0      	b.n	29792 <_impl_k_thread_start+0x52>
   297b0:	20002880 	.word	0x20002880

000297b4 <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   297b4:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   297b6:	b1d1      	cbz	r1, 297ee <schedule_new_thread+0x3a>
   297b8:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   297ba:	3309      	adds	r3, #9
   297bc:	4a47      	ldr	r2, [pc, #284]	; (298dc <schedule_new_thread+0x128>)
   297be:	fba2 2303 	umull	r2, r3, r2, r3
   297c2:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   297c4:	3301      	adds	r3, #1
	__asm__ volatile(
   297c6:	f04f 0220 	mov.w	r2, #32
   297ca:	f3ef 8511 	mrs	r5, BASEPRI
   297ce:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   297d2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   297d6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   297d8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   297da:	2200      	movs	r2, #0
   297dc:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   297de:	b14b      	cbz	r3, 297f4 <schedule_new_thread+0x40>
	return list->head == list;
   297e0:	4a3f      	ldr	r2, [pc, #252]	; (298e0 <schedule_new_thread+0x12c>)
   297e2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   297e6:	4293      	cmp	r3, r2
   297e8:	d152      	bne.n	29890 <schedule_new_thread+0xdc>
   297ea:	2300      	movs	r3, #0
   297ec:	e050      	b.n	29890 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   297ee:	f7ff ffa7 	bl	29740 <_impl_k_thread_start>
   297f2:	bd70      	pop	{r4, r5, r6, pc}
   297f4:	f04f 0320 	mov.w	r3, #32
   297f8:	f3ef 8611 	mrs	r6, BASEPRI
   297fc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29800:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29804:	6123      	str	r3, [r4, #16]
	if (thread) {
   29806:	b320      	cbz	r0, 29852 <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   29808:	68e3      	ldr	r3, [r4, #12]
   2980a:	b15b      	cbz	r3, 29824 <schedule_new_thread+0x70>
	node->prev->next = node->next;
   2980c:	6843      	ldr	r3, [r0, #4]
   2980e:	6802      	ldr	r2, [r0, #0]
   29810:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29812:	6803      	ldr	r3, [r0, #0]
   29814:	6842      	ldr	r2, [r0, #4]
   29816:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29818:	7a43      	ldrb	r3, [r0, #9]
   2981a:	f023 0302 	bic.w	r3, r3, #2
   2981e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29820:	2300      	movs	r3, #0
   29822:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29824:	7a43      	ldrb	r3, [r0, #9]
   29826:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2982a:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2982c:	f013 0f1b 	tst.w	r3, #27
   29830:	d107      	bne.n	29842 <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29832:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29834:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29838:	d001      	beq.n	2983e <schedule_new_thread+0x8a>
   2983a:	2300      	movs	r3, #0
   2983c:	e002      	b.n	29844 <schedule_new_thread+0x90>
   2983e:	2301      	movs	r3, #1
   29840:	e000      	b.n	29844 <schedule_new_thread+0x90>
   29842:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29844:	b913      	cbnz	r3, 2984c <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29846:	f386 8811 	msr	BASEPRI, r6
   2984a:	e044      	b.n	298d6 <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   2984c:	f7ff fac0 	bl	28dd0 <_add_thread_to_ready_q>
   29850:	e7f9      	b.n	29846 <schedule_new_thread+0x92>
   29852:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29856:	6963      	ldr	r3, [r4, #20]
   29858:	2b00      	cmp	r3, #0
   2985a:	d03c      	beq.n	298d6 <schedule_new_thread+0x122>
			timeout->func(timeout);
   2985c:	4620      	mov	r0, r4
   2985e:	4798      	blx	r3
   29860:	e039      	b.n	298d6 <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   29862:	1a8a      	subs	r2, r1, r2
   29864:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29866:	b133      	cbz	r3, 29876 <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   29868:	685a      	ldr	r2, [r3, #4]
   2986a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2986c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2986e:	685a      	ldr	r2, [r3, #4]
   29870:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29872:	605c      	str	r4, [r3, #4]
   29874:	e02f      	b.n	298d6 <schedule_new_thread+0x122>
	node->next = list;
   29876:	4b1b      	ldr	r3, [pc, #108]	; (298e4 <schedule_new_thread+0x130>)
   29878:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   2987a:	685a      	ldr	r2, [r3, #4]
   2987c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2987e:	685a      	ldr	r2, [r3, #4]
   29880:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29882:	605c      	str	r4, [r3, #4]
   29884:	e027      	b.n	298d6 <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29886:	4619      	mov	r1, r3
   29888:	e011      	b.n	298ae <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   2988a:	2100      	movs	r1, #0
   2988c:	e00f      	b.n	298ae <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2988e:	2300      	movs	r3, #0
   29890:	b1d3      	cbz	r3, 298c8 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29892:	6922      	ldr	r2, [r4, #16]
   29894:	6919      	ldr	r1, [r3, #16]
   29896:	428a      	cmp	r2, r1
   29898:	dde3      	ble.n	29862 <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   2989a:	1a52      	subs	r2, r2, r1
   2989c:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2989e:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   298a0:	2b00      	cmp	r3, #0
   298a2:	d0f0      	beq.n	29886 <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   298a4:	490e      	ldr	r1, [pc, #56]	; (298e0 <schedule_new_thread+0x12c>)
   298a6:	6909      	ldr	r1, [r1, #16]
   298a8:	428b      	cmp	r3, r1
   298aa:	d0ee      	beq.n	2988a <schedule_new_thread+0xd6>
   298ac:	6819      	ldr	r1, [r3, #0]
   298ae:	2900      	cmp	r1, #0
   298b0:	d0ed      	beq.n	2988e <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   298b2:	b12a      	cbz	r2, 298c0 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   298b4:	490a      	ldr	r1, [pc, #40]	; (298e0 <schedule_new_thread+0x12c>)
   298b6:	6909      	ldr	r1, [r1, #16]
   298b8:	428a      	cmp	r2, r1
   298ba:	d003      	beq.n	298c4 <schedule_new_thread+0x110>
   298bc:	681b      	ldr	r3, [r3, #0]
   298be:	e7e7      	b.n	29890 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   298c0:	2300      	movs	r3, #0
   298c2:	e7e5      	b.n	29890 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   298c4:	2300      	movs	r3, #0
   298c6:	e7e3      	b.n	29890 <schedule_new_thread+0xdc>
	node->next = list;
   298c8:	4b06      	ldr	r3, [pc, #24]	; (298e4 <schedule_new_thread+0x130>)
   298ca:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   298cc:	685a      	ldr	r2, [r3, #4]
   298ce:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   298d0:	685a      	ldr	r2, [r3, #4]
   298d2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   298d4:	605c      	str	r4, [r3, #4]
   298d6:	f385 8811 	msr	BASEPRI, r5
   298da:	bd70      	pop	{r4, r5, r6, pc}
   298dc:	cccccccd 	.word	0xcccccccd
   298e0:	20002880 	.word	0x20002880
   298e4:	2000288c 	.word	0x2000288c

000298e8 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   298e8:	b510      	push	{r4, lr}
   298ea:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   298ec:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   298ee:	9404      	str	r4, [sp, #16]
   298f0:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   298f2:	9403      	str	r4, [sp, #12]
   298f4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   298f6:	9402      	str	r4, [sp, #8]
   298f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   298fa:	9401      	str	r4, [sp, #4]
   298fc:	9c08      	ldr	r4, [sp, #32]
   298fe:	9400      	str	r4, [sp, #0]
   29900:	f7fe f940 	bl	27b84 <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   29904:	b006      	add	sp, #24
   29906:	bd10      	pop	{r4, pc}

00029908 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   29908:	b570      	push	{r4, r5, r6, lr}
   2990a:	b086      	sub	sp, #24
   2990c:	4604      	mov	r4, r0
   2990e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   29910:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   29912:	9604      	str	r6, [sp, #16]
   29914:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   29916:	9603      	str	r6, [sp, #12]
   29918:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   2991a:	9602      	str	r6, [sp, #8]
   2991c:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2991e:	9601      	str	r6, [sp, #4]
   29920:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   29922:	9600      	str	r6, [sp, #0]
   29924:	f7ff ffe0 	bl	298e8 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   29928:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2992c:	d003      	beq.n	29936 <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   2992e:	4629      	mov	r1, r5
   29930:	4620      	mov	r0, r4
   29932:	f7ff ff3f 	bl	297b4 <schedule_new_thread>
	}
	return new_thread;
}
   29936:	4620      	mov	r0, r4
   29938:	b006      	add	sp, #24
   2993a:	bd70      	pop	{r4, r5, r6, pc}

0002993c <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   2993c:	b510      	push	{r4, lr}
   2993e:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   29940:	6d03      	ldr	r3, [r0, #80]	; 0x50
   29942:	b103      	cbz	r3, 29946 <_k_thread_single_abort+0xa>
		thread->fn_abort();
   29944:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   29946:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29948:	f013 0f1f 	tst.w	r3, #31
   2994c:	d107      	bne.n	2995e <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2994e:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29950:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29954:	d001      	beq.n	2995a <_k_thread_single_abort+0x1e>
   29956:	2200      	movs	r2, #0
   29958:	e002      	b.n	29960 <_k_thread_single_abort+0x24>
   2995a:	2201      	movs	r2, #1
   2995c:	e000      	b.n	29960 <_k_thread_single_abort+0x24>
   2995e:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   29960:	bb4a      	cbnz	r2, 299b6 <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   29962:	f013 0f02 	tst.w	r3, #2
   29966:	d009      	beq.n	2997c <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   29968:	6863      	ldr	r3, [r4, #4]
   2996a:	6822      	ldr	r2, [r4, #0]
   2996c:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2996e:	6823      	ldr	r3, [r4, #0]
   29970:	6862      	ldr	r2, [r4, #4]
   29972:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29974:	7a63      	ldrb	r3, [r4, #9]
   29976:	f023 0302 	bic.w	r3, r3, #2
   2997a:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2997c:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   2997e:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29982:	d013      	beq.n	299ac <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29984:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   29988:	4a0d      	ldr	r2, [pc, #52]	; (299c0 <_k_thread_single_abort+0x84>)
   2998a:	6912      	ldr	r2, [r2, #16]
   2998c:	4293      	cmp	r3, r2
   2998e:	d004      	beq.n	2999a <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29990:	b103      	cbz	r3, 29994 <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   29992:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29994:	691a      	ldr	r2, [r3, #16]
   29996:	440a      	add	r2, r1
   29998:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2999a:	6963      	ldr	r3, [r4, #20]
   2999c:	6922      	ldr	r2, [r4, #16]
   2999e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   299a0:	6923      	ldr	r3, [r4, #16]
   299a2:	6962      	ldr	r2, [r4, #20]
   299a4:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   299a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   299aa:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   299ac:	7a63      	ldrb	r3, [r4, #9]
   299ae:	f043 0308 	orr.w	r3, r3, #8
   299b2:	7263      	strb	r3, [r4, #9]
   299b4:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   299b6:	4620      	mov	r0, r4
   299b8:	f7ff fa2a 	bl	28e10 <_remove_thread_from_ready_q>
   299bc:	e7f6      	b.n	299ac <_k_thread_single_abort+0x70>
   299be:	bf00      	nop
   299c0:	20002880 	.word	0x20002880

000299c4 <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   299c4:	b530      	push	{r4, r5, lr}
   299c6:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   299c8:	4c1b      	ldr	r4, [pc, #108]	; (29a38 <_init_static_threads+0x74>)
   299ca:	e012      	b.n	299f2 <_init_static_threads+0x2e>
		_setup_new_thread(
   299cc:	6a23      	ldr	r3, [r4, #32]
   299ce:	9304      	str	r3, [sp, #16]
   299d0:	69e3      	ldr	r3, [r4, #28]
   299d2:	9303      	str	r3, [sp, #12]
   299d4:	69a3      	ldr	r3, [r4, #24]
   299d6:	9302      	str	r3, [sp, #8]
   299d8:	6963      	ldr	r3, [r4, #20]
   299da:	9301      	str	r3, [sp, #4]
   299dc:	6923      	ldr	r3, [r4, #16]
   299de:	9300      	str	r3, [sp, #0]
   299e0:	68e3      	ldr	r3, [r4, #12]
   299e2:	68a2      	ldr	r2, [r4, #8]
   299e4:	6861      	ldr	r1, [r4, #4]
   299e6:	6820      	ldr	r0, [r4, #0]
   299e8:	f7ff ff7e 	bl	298e8 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   299ec:	6823      	ldr	r3, [r4, #0]
   299ee:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   299f0:	3430      	adds	r4, #48	; 0x30
   299f2:	4b12      	ldr	r3, [pc, #72]	; (29a3c <_init_static_threads+0x78>)
   299f4:	429c      	cmp	r4, r3
   299f6:	d3e9      	bcc.n	299cc <_init_static_threads+0x8>
	--_current->base.sched_locked;
   299f8:	4b11      	ldr	r3, [pc, #68]	; (29a40 <_init_static_threads+0x7c>)
   299fa:	689a      	ldr	r2, [r3, #8]
   299fc:	7ad3      	ldrb	r3, [r2, #11]
   299fe:	3b01      	subs	r3, #1
   29a00:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   29a02:	f04f 0320 	mov.w	r3, #32
   29a06:	f3ef 8511 	mrs	r5, BASEPRI
   29a0a:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   29a0e:	4c0a      	ldr	r4, [pc, #40]	; (29a38 <_init_static_threads+0x74>)
   29a10:	e000      	b.n	29a14 <_init_static_threads+0x50>
   29a12:	3430      	adds	r4, #48	; 0x30
   29a14:	4b09      	ldr	r3, [pc, #36]	; (29a3c <_init_static_threads+0x78>)
   29a16:	429c      	cmp	r4, r3
   29a18:	d207      	bcs.n	29a2a <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   29a1a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29a1c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29a20:	d0f7      	beq.n	29a12 <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   29a22:	6820      	ldr	r0, [r4, #0]
   29a24:	f7ff fec6 	bl	297b4 <schedule_new_thread>
   29a28:	e7f3      	b.n	29a12 <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29a2a:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   29a2e:	f7ff fb81 	bl	29134 <k_sched_unlock>
}
   29a32:	b007      	add	sp, #28
   29a34:	bd30      	pop	{r4, r5, pc}
   29a36:	bf00      	nop
   29a38:	2000d100 	.word	0x2000d100
   29a3c:	2000d100 	.word	0x2000d100
   29a40:	20002880 	.word	0x20002880

00029a44 <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   29a44:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   29a46:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   29a48:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   29a4a:	2300      	movs	r3, #0
   29a4c:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   29a4e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29a52:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   29a54:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   29a56:	6183      	str	r3, [r0, #24]
	t->func = func;
   29a58:	6243      	str	r3, [r0, #36]	; 0x24
   29a5a:	4770      	bx	lr

00029a5c <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   29a5c:	b570      	push	{r4, r5, r6, lr}
   29a5e:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   29a60:	6a83      	ldr	r3, [r0, #40]	; 0x28
   29a62:	2b00      	cmp	r3, #0
   29a64:	f340 8088 	ble.w	29b78 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   29a68:	f04f 0320 	mov.w	r3, #32
   29a6c:	f3ef 8511 	mrs	r5, BASEPRI
   29a70:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   29a74:	f100 0218 	add.w	r2, r0, #24
   29a78:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29a7a:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29a7c:	2100      	movs	r1, #0
   29a7e:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29a80:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   29a82:	b133      	cbz	r3, 29a92 <_timer_expiration_handler+0x36>
	return list->head == list;
   29a84:	4a59      	ldr	r2, [pc, #356]	; (29bec <_timer_expiration_handler+0x190>)
   29a86:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29a8a:	4293      	cmp	r3, r2
   29a8c:	d14f      	bne.n	29b2e <_timer_expiration_handler+0xd2>
   29a8e:	2300      	movs	r3, #0
   29a90:	e04d      	b.n	29b2e <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   29a92:	4608      	mov	r0, r1
   29a94:	f04f 0320 	mov.w	r3, #32
   29a98:	f3ef 8611 	mrs	r6, BASEPRI
   29a9c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29aa0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29aa4:	6123      	str	r3, [r4, #16]
	if (thread) {
   29aa6:	b319      	cbz	r1, 29af0 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   29aa8:	68e3      	ldr	r3, [r4, #12]
   29aaa:	b153      	cbz	r3, 29ac2 <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   29aac:	684b      	ldr	r3, [r1, #4]
   29aae:	680a      	ldr	r2, [r1, #0]
   29ab0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29ab2:	680b      	ldr	r3, [r1, #0]
   29ab4:	684a      	ldr	r2, [r1, #4]
   29ab6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29ab8:	7a4b      	ldrb	r3, [r1, #9]
   29aba:	f023 0302 	bic.w	r3, r3, #2
   29abe:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   29ac0:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29ac2:	7a43      	ldrb	r3, [r0, #9]
   29ac4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29ac8:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29aca:	f013 0f1b 	tst.w	r3, #27
   29ace:	d107      	bne.n	29ae0 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29ad0:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29ad2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29ad6:	d001      	beq.n	29adc <_timer_expiration_handler+0x80>
   29ad8:	2300      	movs	r3, #0
   29ada:	e002      	b.n	29ae2 <_timer_expiration_handler+0x86>
   29adc:	2301      	movs	r3, #1
   29ade:	e000      	b.n	29ae2 <_timer_expiration_handler+0x86>
   29ae0:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29ae2:	b913      	cbnz	r3, 29aea <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ae4:	f386 8811 	msr	BASEPRI, r6
   29ae8:	e044      	b.n	29b74 <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   29aea:	f7ff f971 	bl	28dd0 <_add_thread_to_ready_q>
   29aee:	e7f9      	b.n	29ae4 <_timer_expiration_handler+0x88>
   29af0:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   29af4:	6963      	ldr	r3, [r4, #20]
   29af6:	2b00      	cmp	r3, #0
   29af8:	d03c      	beq.n	29b74 <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   29afa:	4620      	mov	r0, r4
   29afc:	4798      	blx	r3
   29afe:	e039      	b.n	29b74 <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   29b00:	1a8a      	subs	r2, r1, r2
   29b02:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29b04:	b133      	cbz	r3, 29b14 <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   29b06:	685a      	ldr	r2, [r3, #4]
   29b08:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   29b0a:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   29b0c:	685a      	ldr	r2, [r3, #4]
   29b0e:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   29b10:	605c      	str	r4, [r3, #4]
   29b12:	e02f      	b.n	29b74 <_timer_expiration_handler+0x118>
	node->next = list;
   29b14:	4b36      	ldr	r3, [pc, #216]	; (29bf0 <_timer_expiration_handler+0x194>)
   29b16:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29b18:	685a      	ldr	r2, [r3, #4]
   29b1a:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29b1c:	685a      	ldr	r2, [r3, #4]
   29b1e:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29b20:	605c      	str	r4, [r3, #4]
   29b22:	e027      	b.n	29b74 <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b24:	4619      	mov	r1, r3
   29b26:	e011      	b.n	29b4c <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29b28:	2100      	movs	r1, #0
   29b2a:	e00f      	b.n	29b4c <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b2c:	2300      	movs	r3, #0
   29b2e:	b1d3      	cbz	r3, 29b66 <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29b30:	6902      	ldr	r2, [r0, #16]
   29b32:	6919      	ldr	r1, [r3, #16]
   29b34:	428a      	cmp	r2, r1
   29b36:	dde3      	ble.n	29b00 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29b38:	1a52      	subs	r2, r2, r1
   29b3a:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29b3c:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b3e:	2b00      	cmp	r3, #0
   29b40:	d0f0      	beq.n	29b24 <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   29b42:	492a      	ldr	r1, [pc, #168]	; (29bec <_timer_expiration_handler+0x190>)
   29b44:	6909      	ldr	r1, [r1, #16]
   29b46:	428b      	cmp	r3, r1
   29b48:	d0ee      	beq.n	29b28 <_timer_expiration_handler+0xcc>
   29b4a:	6819      	ldr	r1, [r3, #0]
   29b4c:	2900      	cmp	r1, #0
   29b4e:	d0ed      	beq.n	29b2c <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b50:	b12a      	cbz	r2, 29b5e <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   29b52:	4926      	ldr	r1, [pc, #152]	; (29bec <_timer_expiration_handler+0x190>)
   29b54:	6909      	ldr	r1, [r1, #16]
   29b56:	428a      	cmp	r2, r1
   29b58:	d003      	beq.n	29b62 <_timer_expiration_handler+0x106>
   29b5a:	681b      	ldr	r3, [r3, #0]
   29b5c:	e7e7      	b.n	29b2e <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29b5e:	2300      	movs	r3, #0
   29b60:	e7e5      	b.n	29b2e <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   29b62:	2300      	movs	r3, #0
   29b64:	e7e3      	b.n	29b2e <_timer_expiration_handler+0xd2>
	node->next = list;
   29b66:	4b22      	ldr	r3, [pc, #136]	; (29bf0 <_timer_expiration_handler+0x194>)
   29b68:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29b6a:	685a      	ldr	r2, [r3, #4]
   29b6c:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29b6e:	685a      	ldr	r2, [r3, #4]
   29b70:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29b72:	605c      	str	r4, [r3, #4]
   29b74:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29b78:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29b7a:	3301      	adds	r3, #1
   29b7c:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   29b7e:	6a23      	ldr	r3, [r4, #32]
   29b80:	b10b      	cbz	r3, 29b86 <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   29b82:	4620      	mov	r0, r4
   29b84:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   29b86:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   29b8a:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29b8c:	42a3      	cmp	r3, r4
   29b8e:	d01d      	beq.n	29bcc <_timer_expiration_handler+0x170>

	if (!thread) {
   29b90:	b334      	cbz	r4, 29be0 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   29b92:	6863      	ldr	r3, [r4, #4]
   29b94:	6822      	ldr	r2, [r4, #0]
   29b96:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29b98:	6823      	ldr	r3, [r4, #0]
   29b9a:	6862      	ldr	r2, [r4, #4]
   29b9c:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29b9e:	7a63      	ldrb	r3, [r4, #9]
   29ba0:	f023 0302 	bic.w	r3, r3, #2
   29ba4:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   29ba6:	f04f 0320 	mov.w	r3, #32
   29baa:	f3ef 8511 	mrs	r5, BASEPRI
   29bae:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29bb2:	7a63      	ldrb	r3, [r4, #9]
   29bb4:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29bb8:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29bba:	f013 0f1b 	tst.w	r3, #27
   29bbe:	d109      	bne.n	29bd4 <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29bc0:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29bc2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29bc6:	d003      	beq.n	29bd0 <_timer_expiration_handler+0x174>
   29bc8:	2300      	movs	r3, #0
   29bca:	e004      	b.n	29bd6 <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29bcc:	2400      	movs	r4, #0
   29bce:	e7df      	b.n	29b90 <_timer_expiration_handler+0x134>
   29bd0:	2301      	movs	r3, #1
   29bd2:	e000      	b.n	29bd6 <_timer_expiration_handler+0x17a>
   29bd4:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29bd6:	b923      	cbnz	r3, 29be2 <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29bd8:	f385 8811 	msr	BASEPRI, r5
   29bdc:	2300      	movs	r3, #0
   29bde:	6663      	str	r3, [r4, #100]	; 0x64
   29be0:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   29be2:	4620      	mov	r0, r4
   29be4:	f7ff f8f4 	bl	28dd0 <_add_thread_to_ready_q>
   29be8:	e7f6      	b.n	29bd8 <_timer_expiration_handler+0x17c>
   29bea:	bf00      	nop
   29bec:	20002880 	.word	0x20002880
   29bf0:	2000288c 	.word	0x2000288c

00029bf4 <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   29bf4:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   29bf6:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   29bf8:	2300      	movs	r3, #0
   29bfa:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   29bfc:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   29c00:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   29c02:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   29c04:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29c08:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   29c0a:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   29c0c:	6083      	str	r3, [r0, #8]
	t->func = func;
   29c0e:	4a02      	ldr	r2, [pc, #8]	; (29c18 <k_timer_init+0x24>)
   29c10:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   29c12:	6303      	str	r3, [r0, #48]	; 0x30
   29c14:	4770      	bx	lr
   29c16:	bf00      	nop
   29c18:	00029a5d 	.word	0x00029a5d

00029c1c <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   29c1c:	b530      	push	{r4, r5, lr}
   29c1e:	b083      	sub	sp, #12
   29c20:	3209      	adds	r2, #9
   29c22:	4b57      	ldr	r3, [pc, #348]	; (29d80 <_impl_k_timer_start+0x164>)
   29c24:	fba3 4202 	umull	r4, r2, r3, r2
   29c28:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   29c2a:	9201      	str	r2, [sp, #4]
   29c2c:	3109      	adds	r1, #9
   29c2e:	fba3 3101 	umull	r3, r1, r3, r1
   29c32:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   29c34:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   29c36:	f04f 0320 	mov.w	r3, #32
   29c3a:	f3ef 8411 	mrs	r4, BASEPRI
   29c3e:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   29c42:	6901      	ldr	r1, [r0, #16]
   29c44:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29c48:	d012      	beq.n	29c70 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29c4a:	4603      	mov	r3, r0
	return list->tail == node;
   29c4c:	4a4d      	ldr	r2, [pc, #308]	; (29d84 <_impl_k_timer_start+0x168>)
   29c4e:	6912      	ldr	r2, [r2, #16]
   29c50:	4290      	cmp	r0, r2
   29c52:	d004      	beq.n	29c5e <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29c54:	b100      	cbz	r0, 29c58 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   29c56:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29c58:	691a      	ldr	r2, [r3, #16]
   29c5a:	440a      	add	r2, r1
   29c5c:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29c5e:	6843      	ldr	r3, [r0, #4]
   29c60:	6802      	ldr	r2, [r0, #0]
   29c62:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29c64:	6803      	ldr	r3, [r0, #0]
   29c66:	6842      	ldr	r2, [r0, #4]
   29c68:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29c6a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29c6e:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29c70:	9b01      	ldr	r3, [sp, #4]
   29c72:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   29c74:	2200      	movs	r2, #0
   29c76:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29c78:	4605      	mov	r5, r0
   29c7a:	f100 0118 	add.w	r1, r0, #24
   29c7e:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29c80:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29c82:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29c84:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   29c86:	b133      	cbz	r3, 29c96 <_impl_k_timer_start+0x7a>
	return list->head == list;
   29c88:	4a3e      	ldr	r2, [pc, #248]	; (29d84 <_impl_k_timer_start+0x168>)
   29c8a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29c8e:	4293      	cmp	r3, r2
   29c90:	d14f      	bne.n	29d32 <_impl_k_timer_start+0x116>
   29c92:	2300      	movs	r3, #0
   29c94:	e04d      	b.n	29d32 <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   29c96:	4613      	mov	r3, r2
   29c98:	f04f 0220 	mov.w	r2, #32
   29c9c:	f3ef 8511 	mrs	r5, BASEPRI
   29ca0:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   29ca4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29ca8:	6102      	str	r2, [r0, #16]
	if (thread) {
   29caa:	b323      	cbz	r3, 29cf6 <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29cac:	68c2      	ldr	r2, [r0, #12]
   29cae:	b152      	cbz	r2, 29cc6 <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29cb0:	685a      	ldr	r2, [r3, #4]
   29cb2:	6819      	ldr	r1, [r3, #0]
   29cb4:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   29cb6:	681a      	ldr	r2, [r3, #0]
   29cb8:	6859      	ldr	r1, [r3, #4]
   29cba:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29cbc:	7a5a      	ldrb	r2, [r3, #9]
   29cbe:	f022 0202 	bic.w	r2, r2, #2
   29cc2:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   29cc4:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29cc6:	7a5a      	ldrb	r2, [r3, #9]
   29cc8:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   29ccc:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29cce:	f012 0f1b 	tst.w	r2, #27
   29cd2:	d107      	bne.n	29ce4 <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29cd4:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29cd6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29cda:	d001      	beq.n	29ce0 <_impl_k_timer_start+0xc4>
   29cdc:	2200      	movs	r2, #0
   29cde:	e002      	b.n	29ce6 <_impl_k_timer_start+0xca>
   29ce0:	2201      	movs	r2, #1
   29ce2:	e000      	b.n	29ce6 <_impl_k_timer_start+0xca>
   29ce4:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   29ce6:	b912      	cbnz	r2, 29cee <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ce8:	f385 8811 	msr	BASEPRI, r5
   29cec:	e044      	b.n	29d78 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   29cee:	4618      	mov	r0, r3
   29cf0:	f7ff f86e 	bl	28dd0 <_add_thread_to_ready_q>
   29cf4:	e7f8      	b.n	29ce8 <_impl_k_timer_start+0xcc>
   29cf6:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   29cfa:	6943      	ldr	r3, [r0, #20]
   29cfc:	2b00      	cmp	r3, #0
   29cfe:	d03b      	beq.n	29d78 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   29d00:	4798      	blx	r3
   29d02:	e039      	b.n	29d78 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   29d04:	1a8a      	subs	r2, r1, r2
   29d06:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29d08:	b133      	cbz	r3, 29d18 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   29d0a:	685a      	ldr	r2, [r3, #4]
   29d0c:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   29d0e:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   29d10:	685a      	ldr	r2, [r3, #4]
   29d12:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   29d14:	6058      	str	r0, [r3, #4]
   29d16:	e02f      	b.n	29d78 <_impl_k_timer_start+0x15c>
	node->next = list;
   29d18:	4b1b      	ldr	r3, [pc, #108]	; (29d88 <_impl_k_timer_start+0x16c>)
   29d1a:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29d1c:	685a      	ldr	r2, [r3, #4]
   29d1e:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29d20:	685a      	ldr	r2, [r3, #4]
   29d22:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29d24:	6058      	str	r0, [r3, #4]
   29d26:	e027      	b.n	29d78 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d28:	4619      	mov	r1, r3
   29d2a:	e011      	b.n	29d50 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29d2c:	2100      	movs	r1, #0
   29d2e:	e00f      	b.n	29d50 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29d30:	2300      	movs	r3, #0
   29d32:	b1d3      	cbz	r3, 29d6a <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29d34:	692a      	ldr	r2, [r5, #16]
   29d36:	6919      	ldr	r1, [r3, #16]
   29d38:	428a      	cmp	r2, r1
   29d3a:	dde3      	ble.n	29d04 <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29d3c:	1a52      	subs	r2, r2, r1
   29d3e:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29d40:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d42:	2b00      	cmp	r3, #0
   29d44:	d0f0      	beq.n	29d28 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   29d46:	490f      	ldr	r1, [pc, #60]	; (29d84 <_impl_k_timer_start+0x168>)
   29d48:	6909      	ldr	r1, [r1, #16]
   29d4a:	428b      	cmp	r3, r1
   29d4c:	d0ee      	beq.n	29d2c <_impl_k_timer_start+0x110>
   29d4e:	6819      	ldr	r1, [r3, #0]
   29d50:	2900      	cmp	r1, #0
   29d52:	d0ed      	beq.n	29d30 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d54:	b12a      	cbz	r2, 29d62 <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   29d56:	490b      	ldr	r1, [pc, #44]	; (29d84 <_impl_k_timer_start+0x168>)
   29d58:	6909      	ldr	r1, [r1, #16]
   29d5a:	428a      	cmp	r2, r1
   29d5c:	d003      	beq.n	29d66 <_impl_k_timer_start+0x14a>
   29d5e:	681b      	ldr	r3, [r3, #0]
   29d60:	e7e7      	b.n	29d32 <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29d62:	2300      	movs	r3, #0
   29d64:	e7e5      	b.n	29d32 <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   29d66:	2300      	movs	r3, #0
   29d68:	e7e3      	b.n	29d32 <_impl_k_timer_start+0x116>
	node->next = list;
   29d6a:	4b07      	ldr	r3, [pc, #28]	; (29d88 <_impl_k_timer_start+0x16c>)
   29d6c:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29d6e:	685a      	ldr	r2, [r3, #4]
   29d70:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29d72:	685a      	ldr	r2, [r3, #4]
   29d74:	6010      	str	r0, [r2, #0]
	list->tail = node;
   29d76:	6058      	str	r0, [r3, #4]
   29d78:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29d7c:	b003      	add	sp, #12
   29d7e:	bd30      	pop	{r4, r5, pc}
   29d80:	cccccccd 	.word	0xcccccccd
   29d84:	20002880 	.word	0x20002880
   29d88:	2000288c 	.word	0x2000288c

00029d8c <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29d8c:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29d8e:	f04f 0320 	mov.w	r3, #32
   29d92:	f3ef 8411 	mrs	r4, BASEPRI
   29d96:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29d9a:	6903      	ldr	r3, [r0, #16]
   29d9c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29da0:	d042      	beq.n	29e28 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29da2:	4602      	mov	r2, r0
	return list->tail == node;
   29da4:	493b      	ldr	r1, [pc, #236]	; (29e94 <_impl_k_timer_stop+0x108>)
   29da6:	6909      	ldr	r1, [r1, #16]
   29da8:	4288      	cmp	r0, r1
   29daa:	d004      	beq.n	29db6 <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29dac:	b100      	cbz	r0, 29db0 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29dae:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29db0:	6911      	ldr	r1, [r2, #16]
   29db2:	440b      	add	r3, r1
   29db4:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   29db6:	6843      	ldr	r3, [r0, #4]
   29db8:	6802      	ldr	r2, [r0, #0]
   29dba:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29dbc:	6803      	ldr	r3, [r0, #0]
   29dbe:	6842      	ldr	r2, [r0, #4]
   29dc0:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29dc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29dc6:	6103      	str	r3, [r0, #16]
	return 0;
   29dc8:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29dca:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   29dce:	2b00      	cmp	r3, #0
   29dd0:	d15f      	bne.n	29e92 <_impl_k_timer_stop+0x106>
   29dd2:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   29dd4:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29dd6:	b103      	cbz	r3, 29dda <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   29dd8:	4798      	blx	r3
	__asm__ volatile(
   29dda:	f04f 0320 	mov.w	r3, #32
   29dde:	f3ef 8511 	mrs	r5, BASEPRI
   29de2:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   29de6:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   29dea:	4b2b      	ldr	r3, [pc, #172]	; (29e98 <_impl_k_timer_stop+0x10c>)
   29dec:	681b      	ldr	r3, [r3, #0]
   29dee:	b9f3      	cbnz	r3, 29e2e <_impl_k_timer_stop+0xa2>
	return list->head == list;
   29df0:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29df2:	4282      	cmp	r2, r0
   29df4:	d02c      	beq.n	29e50 <_impl_k_timer_stop+0xc4>
	if (thread) {
   29df6:	b148      	cbz	r0, 29e0c <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   29df8:	6843      	ldr	r3, [r0, #4]
   29dfa:	6802      	ldr	r2, [r0, #0]
   29dfc:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29dfe:	6803      	ldr	r3, [r0, #0]
   29e00:	6842      	ldr	r2, [r0, #4]
   29e02:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29e04:	7a43      	ldrb	r3, [r0, #9]
   29e06:	f023 0302 	bic.w	r3, r3, #2
   29e0a:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   29e0c:	b330      	cbz	r0, 29e5c <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29e0e:	7a43      	ldrb	r3, [r0, #9]
   29e10:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29e14:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   29e16:	f013 0f1b 	tst.w	r3, #27
   29e1a:	d11d      	bne.n	29e58 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29e1c:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29e1e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29e22:	d017      	beq.n	29e54 <_impl_k_timer_stop+0xc8>
   29e24:	2300      	movs	r3, #0
   29e26:	e018      	b.n	29e5a <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29e28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29e2c:	e7cd      	b.n	29dca <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29e2e:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29e30:	4282      	cmp	r2, r0
   29e32:	d102      	bne.n	29e3a <_impl_k_timer_stop+0xae>
   29e34:	2000      	movs	r0, #0
   29e36:	e000      	b.n	29e3a <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29e38:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29e3a:	2800      	cmp	r0, #0
   29e3c:	d0db      	beq.n	29df6 <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29e3e:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29e40:	f113 0f02 	cmn.w	r3, #2
   29e44:	d1d7      	bne.n	29df6 <_impl_k_timer_stop+0x6a>
   29e46:	6853      	ldr	r3, [r2, #4]
   29e48:	4298      	cmp	r0, r3
   29e4a:	d1f5      	bne.n	29e38 <_impl_k_timer_stop+0xac>
   29e4c:	2000      	movs	r0, #0
   29e4e:	e7f4      	b.n	29e3a <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29e50:	2000      	movs	r0, #0
   29e52:	e7d0      	b.n	29df6 <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   29e54:	2301      	movs	r3, #1
   29e56:	e000      	b.n	29e5a <_impl_k_timer_stop+0xce>
   29e58:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29e5a:	b95b      	cbnz	r3, 29e74 <_impl_k_timer_stop+0xe8>
   29e5c:	f3ef 8305 	mrs	r3, IPSR
   29e60:	2b0d      	cmp	r3, #13
   29e62:	d80a      	bhi.n	29e7a <_impl_k_timer_stop+0xee>
   29e64:	b173      	cbz	r3, 29e84 <_impl_k_timer_stop+0xf8>
   29e66:	4b0d      	ldr	r3, [pc, #52]	; (29e9c <_impl_k_timer_stop+0x110>)
   29e68:	685b      	ldr	r3, [r3, #4]
   29e6a:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29e6e:	d00b      	beq.n	29e88 <_impl_k_timer_stop+0xfc>
   29e70:	2300      	movs	r3, #0
   29e72:	e003      	b.n	29e7c <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   29e74:	f7fe ffac 	bl	28dd0 <_add_thread_to_ready_q>
   29e78:	e7f0      	b.n	29e5c <_impl_k_timer_stop+0xd0>
   29e7a:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29e7c:	b133      	cbz	r3, 29e8c <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29e7e:	f385 8811 	msr	BASEPRI, r5
   29e82:	bd38      	pop	{r3, r4, r5, pc}
   29e84:	2300      	movs	r3, #0
   29e86:	e7f9      	b.n	29e7c <_impl_k_timer_stop+0xf0>
   29e88:	2301      	movs	r3, #1
   29e8a:	e7f7      	b.n	29e7c <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29e8c:	4628      	mov	r0, r5
   29e8e:	f7ff f937 	bl	29100 <_reschedule_threads>
   29e92:	bd38      	pop	{r3, r4, r5, pc}
   29e94:	20002880 	.word	0x20002880
   29e98:	20002c68 	.word	0x20002c68
   29e9c:	e000ed00 	.word	0xe000ed00

00029ea0 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29ea0:	b430      	push	{r4, r5}
	__asm__ volatile(
   29ea2:	f04f 0320 	mov.w	r3, #32
   29ea6:	f3ef 8411 	mrs	r4, BASEPRI
   29eaa:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29eae:	6903      	ldr	r3, [r0, #16]
   29eb0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29eb4:	d017      	beq.n	29ee6 <_timeout_remaining_get+0x46>
	return list->head == list;
   29eb6:	4a10      	ldr	r2, [pc, #64]	; (29ef8 <_timeout_remaining_get+0x58>)
   29eb8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29ebc:	4293      	cmp	r3, r2
   29ebe:	d001      	beq.n	29ec4 <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   29ec0:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   29ec2:	e005      	b.n	29ed0 <_timeout_remaining_get+0x30>
   29ec4:	2300      	movs	r3, #0
   29ec6:	e7fb      	b.n	29ec0 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   29ec8:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   29eca:	6913      	ldr	r3, [r2, #16]
   29ecc:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29ece:	4613      	mov	r3, r2
		while (t != timeout) {
   29ed0:	4283      	cmp	r3, r0
   29ed2:	d009      	beq.n	29ee8 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   29ed4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29ed6:	2b00      	cmp	r3, #0
   29ed8:	d0f7      	beq.n	29eca <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   29eda:	4a07      	ldr	r2, [pc, #28]	; (29ef8 <_timeout_remaining_get+0x58>)
   29edc:	6912      	ldr	r2, [r2, #16]
   29ede:	4293      	cmp	r3, r2
   29ee0:	d0f2      	beq.n	29ec8 <_timeout_remaining_get+0x28>
   29ee2:	681a      	ldr	r2, [r3, #0]
   29ee4:	e7f1      	b.n	29eca <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   29ee6:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29ee8:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   29eec:	008a      	lsls	r2, r1, #2
   29eee:	1850      	adds	r0, r2, r1
   29ef0:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   29ef2:	bc30      	pop	{r4, r5}
   29ef4:	4770      	bx	lr
   29ef6:	bf00      	nop
   29ef8:	20002880 	.word	0x20002880

00029efc <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   29efc:	b538      	push	{r3, r4, r5, lr}
   29efe:	4604      	mov	r4, r0
   29f00:	e003      	b.n	29f0a <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   29f02:	4610      	mov	r0, r2
   29f04:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   29f06:	f7ff f927 	bl	29158 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   29f0a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   29f0e:	4620      	mov	r0, r4
   29f10:	f7fe ff0c 	bl	28d2c <k_queue_get>
		if (!work) {
   29f14:	4602      	mov	r2, r0
   29f16:	2800      	cmp	r0, #0
   29f18:	d0f7      	beq.n	29f0a <work_q_main+0xe>
		handler = work->handler;
   29f1a:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29f1c:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29f20:	f3bf 8f5b 	dmb	ish
   29f24:	e853 1f00 	ldrex	r1, [r3]
   29f28:	f021 0001 	bic.w	r0, r1, #1
   29f2c:	e843 0e00 	strex	lr, r0, [r3]
   29f30:	f1be 0f00 	cmp.w	lr, #0
   29f34:	d1f6      	bne.n	29f24 <work_q_main+0x28>
   29f36:	f3bf 8f5b 	dmb	ish
   29f3a:	f011 0f01 	tst.w	r1, #1
   29f3e:	d0e2      	beq.n	29f06 <work_q_main+0xa>
   29f40:	e7df      	b.n	29f02 <work_q_main+0x6>

00029f42 <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   29f42:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   29f44:	6984      	ldr	r4, [r0, #24]
   29f46:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29f4a:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29f4c:	f3bf 8f5b 	dmb	ish
   29f50:	e853 2f00 	ldrex	r2, [r3]
   29f54:	f042 0001 	orr.w	r0, r2, #1
   29f58:	e843 0e00 	strex	lr, r0, [r3]
   29f5c:	f1be 0f00 	cmp.w	lr, #0
   29f60:	d1f6      	bne.n	29f50 <work_timeout+0xe>
   29f62:	f3bf 8f5b 	dmb	ish
   29f66:	f012 0f01 	tst.w	r2, #1
   29f6a:	d000      	beq.n	29f6e <work_timeout+0x2c>
   29f6c:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29f6e:	4620      	mov	r0, r4
   29f70:	f7fe feb4 	bl	28cdc <k_queue_append>
}
   29f74:	e7fa      	b.n	29f6c <work_timeout+0x2a>
	...

00029f78 <k_work_q_start>:
{
   29f78:	b5f0      	push	{r4, r5, r6, r7, lr}
   29f7a:	b087      	sub	sp, #28
   29f7c:	4604      	mov	r4, r0
   29f7e:	460d      	mov	r5, r1
   29f80:	4616      	mov	r6, r2
   29f82:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   29f84:	f7fe fe77 	bl	28c76 <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29f88:	2300      	movs	r3, #0
   29f8a:	9305      	str	r3, [sp, #20]
   29f8c:	9304      	str	r3, [sp, #16]
   29f8e:	9703      	str	r7, [sp, #12]
   29f90:	9302      	str	r3, [sp, #8]
   29f92:	9301      	str	r3, [sp, #4]
   29f94:	9400      	str	r4, [sp, #0]
   29f96:	4b04      	ldr	r3, [pc, #16]	; (29fa8 <k_work_q_start+0x30>)
   29f98:	4632      	mov	r2, r6
   29f9a:	4629      	mov	r1, r5
   29f9c:	f104 0010 	add.w	r0, r4, #16
   29fa0:	f7ff fcb2 	bl	29908 <_impl_k_thread_create>
}
   29fa4:	b007      	add	sp, #28
   29fa6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29fa8:	00029efd 	.word	0x00029efd

00029fac <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29fac:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29fae:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29fb2:	f3bf 8f5b 	dmb	ish
   29fb6:	e853 2f00 	ldrex	r2, [r3]
   29fba:	f022 0201 	bic.w	r2, r2, #1
   29fbe:	e843 2e00 	strex	lr, r2, [r3]
   29fc2:	f1be 0f00 	cmp.w	lr, #0
   29fc6:	d1f6      	bne.n	29fb6 <k_delayed_work_init+0xa>
   29fc8:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   29fcc:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   29fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29fd2:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   29fd4:	2300      	movs	r3, #0
   29fd6:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   29fd8:	6143      	str	r3, [r0, #20]
	t->func = func;
   29fda:	4a02      	ldr	r2, [pc, #8]	; (29fe4 <k_delayed_work_init+0x38>)
   29fdc:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   29fde:	6243      	str	r3, [r0, #36]	; 0x24
   29fe0:	f85d fb04 	ldr.w	pc, [sp], #4
   29fe4:	00029f43 	.word	0x00029f43

00029fe8 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   29fe8:	b430      	push	{r4, r5}
	__asm__ volatile(
   29fea:	f04f 0320 	mov.w	r3, #32
   29fee:	f3ef 8411 	mrs	r4, BASEPRI
   29ff2:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   29ff6:	6a43      	ldr	r3, [r0, #36]	; 0x24
   29ff8:	b18b      	cbz	r3, 2a01e <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   29ffa:	f3bf 8f5b 	dmb	ish
   29ffe:	6883      	ldr	r3, [r0, #8]
   2a000:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   2a004:	f013 0f01 	tst.w	r3, #1
   2a008:	d02d      	beq.n	2a066 <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2a00a:	6a45      	ldr	r5, [r0, #36]	; 0x24
   2a00c:	4601      	mov	r1, r0
	return list->head;
   2a00e:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   2a010:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2a012:	b193      	cbz	r3, 2a03a <k_delayed_work_cancel+0x52>
		if (test == node) {
   2a014:	4299      	cmp	r1, r3
   2a016:	d007      	beq.n	2a028 <k_delayed_work_cancel+0x40>
		prev = test;
   2a018:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2a01a:	681b      	ldr	r3, [r3, #0]
   2a01c:	e7f9      	b.n	2a012 <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a01e:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   2a022:	f06f 0015 	mvn.w	r0, #21
   2a026:	e00e      	b.n	2a046 <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   2a028:	b17a      	cbz	r2, 2a04a <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   2a02a:	6803      	ldr	r3, [r0, #0]
   2a02c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2a02e:	686b      	ldr	r3, [r5, #4]
   2a030:	4298      	cmp	r0, r3
   2a032:	d011      	beq.n	2a058 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   2a034:	2300      	movs	r3, #0
   2a036:	6003      	str	r3, [r0, #0]
			return true;
   2a038:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   2a03a:	b17b      	cbz	r3, 2a05c <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   2a03c:	2300      	movs	r3, #0
   2a03e:	6243      	str	r3, [r0, #36]	; 0x24
   2a040:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2a044:	4618      	mov	r0, r3
}
   2a046:	bc30      	pop	{r4, r5}
   2a048:	4770      	bx	lr
		list->head = node->next;
   2a04a:	6803      	ldr	r3, [r0, #0]
   2a04c:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   2a04e:	686a      	ldr	r2, [r5, #4]
   2a050:	4290      	cmp	r0, r2
   2a052:	d1ef      	bne.n	2a034 <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2a054:	606b      	str	r3, [r5, #4]
   2a056:	e7ed      	b.n	2a034 <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   2a058:	606a      	str	r2, [r5, #4]
   2a05a:	e7eb      	b.n	2a034 <k_delayed_work_cancel+0x4c>
   2a05c:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   2a060:	f06f 0015 	mvn.w	r0, #21
   2a064:	e7ef      	b.n	2a046 <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2a066:	69c2      	ldr	r2, [r0, #28]
   2a068:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2a06c:	d0e6      	beq.n	2a03c <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2a06e:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2a072:	4909      	ldr	r1, [pc, #36]	; (2a098 <k_delayed_work_cancel+0xb0>)
   2a074:	6909      	ldr	r1, [r1, #16]
   2a076:	428b      	cmp	r3, r1
   2a078:	d004      	beq.n	2a084 <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a07a:	b103      	cbz	r3, 2a07e <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   2a07c:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   2a07e:	6919      	ldr	r1, [r3, #16]
   2a080:	440a      	add	r2, r1
   2a082:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2a084:	6903      	ldr	r3, [r0, #16]
   2a086:	68c2      	ldr	r2, [r0, #12]
   2a088:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a08a:	68c3      	ldr	r3, [r0, #12]
   2a08c:	6902      	ldr	r2, [r0, #16]
   2a08e:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a090:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a094:	61c3      	str	r3, [r0, #28]
   2a096:	e7d1      	b.n	2a03c <k_delayed_work_cancel+0x54>
   2a098:	20002880 	.word	0x20002880

0002a09c <k_delayed_work_submit_to_queue>:
{
   2a09c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   2a09e:	f04f 0320 	mov.w	r3, #32
   2a0a2:	f3ef 8711 	mrs	r7, BASEPRI
   2a0a6:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   2a0aa:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   2a0ac:	b113      	cbz	r3, 2a0b4 <k_delayed_work_submit_to_queue+0x18>
   2a0ae:	4283      	cmp	r3, r0
   2a0b0:	f040 80b4 	bne.w	2a21c <k_delayed_work_submit_to_queue+0x180>
   2a0b4:	4614      	mov	r4, r2
   2a0b6:	460e      	mov	r6, r1
   2a0b8:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   2a0ba:	4283      	cmp	r3, r0
   2a0bc:	d016      	beq.n	2a0ec <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   2a0be:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   2a0c0:	b1d4      	cbz	r4, 2a0f8 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   2a0c2:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   2a0c6:	f104 0309 	add.w	r3, r4, #9
   2a0ca:	4c57      	ldr	r4, [pc, #348]	; (2a228 <k_delayed_work_submit_to_queue+0x18c>)
   2a0cc:	fba4 2303 	umull	r2, r3, r4, r3
   2a0d0:	08db      	lsrs	r3, r3, #3
   2a0d2:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   2a0d4:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   2a0d6:	2200      	movs	r2, #0
   2a0d8:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2a0da:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   2a0dc:	b32b      	cbz	r3, 2a12a <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   2a0de:	4a53      	ldr	r2, [pc, #332]	; (2a22c <k_delayed_work_submit_to_queue+0x190>)
   2a0e0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2a0e4:	4293      	cmp	r3, r2
   2a0e6:	d172      	bne.n	2a1ce <k_delayed_work_submit_to_queue+0x132>
   2a0e8:	2300      	movs	r3, #0
   2a0ea:	e070      	b.n	2a1ce <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   2a0ec:	4608      	mov	r0, r1
   2a0ee:	f7ff ff7b 	bl	29fe8 <k_delayed_work_cancel>
		if (err < 0) {
   2a0f2:	2800      	cmp	r0, #0
   2a0f4:	dae3      	bge.n	2a0be <k_delayed_work_submit_to_queue+0x22>
   2a0f6:	e08e      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   2a0f8:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   2a0fc:	f3bf 8f5b 	dmb	ish
   2a100:	e853 2f00 	ldrex	r2, [r3]
   2a104:	f042 0101 	orr.w	r1, r2, #1
   2a108:	e843 1000 	strex	r0, r1, [r3]
   2a10c:	2800      	cmp	r0, #0
   2a10e:	d1f7      	bne.n	2a100 <k_delayed_work_submit_to_queue+0x64>
   2a110:	f3bf 8f5b 	dmb	ish
   2a114:	f012 0f01 	tst.w	r2, #1
   2a118:	d001      	beq.n	2a11e <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   2a11a:	2000      	movs	r0, #0
   2a11c:	e07b      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   2a11e:	4631      	mov	r1, r6
   2a120:	4628      	mov	r0, r5
   2a122:	f7fe fddb 	bl	28cdc <k_queue_append>
   2a126:	2000      	movs	r0, #0
   2a128:	e075      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   2a12a:	4610      	mov	r0, r2
   2a12c:	f04f 0320 	mov.w	r3, #32
   2a130:	f3ef 8411 	mrs	r4, BASEPRI
   2a134:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   2a138:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a13c:	612b      	str	r3, [r5, #16]
	if (thread) {
   2a13e:	b322      	cbz	r2, 2a18a <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   2a140:	68eb      	ldr	r3, [r5, #12]
   2a142:	b153      	cbz	r3, 2a15a <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2a144:	6853      	ldr	r3, [r2, #4]
   2a146:	6812      	ldr	r2, [r2, #0]
   2a148:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2a14a:	6803      	ldr	r3, [r0, #0]
   2a14c:	6842      	ldr	r2, [r0, #4]
   2a14e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2a150:	7a43      	ldrb	r3, [r0, #9]
   2a152:	f023 0302 	bic.w	r3, r3, #2
   2a156:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   2a158:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2a15a:	7a43      	ldrb	r3, [r0, #9]
   2a15c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   2a160:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2a162:	f013 0f1b 	tst.w	r3, #27
   2a166:	d107      	bne.n	2a178 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2a168:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2a16a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2a16e:	d001      	beq.n	2a174 <k_delayed_work_submit_to_queue+0xd8>
   2a170:	2300      	movs	r3, #0
   2a172:	e002      	b.n	2a17a <k_delayed_work_submit_to_queue+0xde>
   2a174:	2301      	movs	r3, #1
   2a176:	e000      	b.n	2a17a <k_delayed_work_submit_to_queue+0xde>
   2a178:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2a17a:	b91b      	cbnz	r3, 2a184 <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2a17c:	f384 8811 	msr	BASEPRI, r4
   2a180:	2000      	movs	r0, #0
   2a182:	e048      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2a184:	f7fe fe24 	bl	28dd0 <_add_thread_to_ready_q>
   2a188:	e7f8      	b.n	2a17c <k_delayed_work_submit_to_queue+0xe0>
   2a18a:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   2a18e:	696b      	ldr	r3, [r5, #20]
   2a190:	2b00      	cmp	r3, #0
   2a192:	d046      	beq.n	2a222 <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2a194:	4628      	mov	r0, r5
   2a196:	4798      	blx	r3
   2a198:	2000      	movs	r0, #0
   2a19a:	e03c      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   2a19c:	1aa2      	subs	r2, r4, r2
   2a19e:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2a1a0:	b13b      	cbz	r3, 2a1b2 <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2a1a2:	685a      	ldr	r2, [r3, #4]
   2a1a4:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2a1a6:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   2a1a8:	685a      	ldr	r2, [r3, #4]
   2a1aa:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   2a1ac:	605d      	str	r5, [r3, #4]
   2a1ae:	2000      	movs	r0, #0
   2a1b0:	e031      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2a1b2:	4b1f      	ldr	r3, [pc, #124]	; (2a230 <k_delayed_work_submit_to_queue+0x194>)
   2a1b4:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a1b6:	685a      	ldr	r2, [r3, #4]
   2a1b8:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a1ba:	685a      	ldr	r2, [r3, #4]
   2a1bc:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a1be:	605d      	str	r5, [r3, #4]
   2a1c0:	2000      	movs	r0, #0
   2a1c2:	e028      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1c4:	4619      	mov	r1, r3
   2a1c6:	e011      	b.n	2a1ec <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   2a1c8:	2100      	movs	r1, #0
   2a1ca:	e00f      	b.n	2a1ec <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a1cc:	2300      	movs	r3, #0
   2a1ce:	b1d3      	cbz	r3, 2a206 <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2a1d0:	692a      	ldr	r2, [r5, #16]
   2a1d2:	691c      	ldr	r4, [r3, #16]
   2a1d4:	42a2      	cmp	r2, r4
   2a1d6:	dde1      	ble.n	2a19c <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   2a1d8:	1b12      	subs	r2, r2, r4
   2a1da:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2a1dc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1de:	2b00      	cmp	r3, #0
   2a1e0:	d0f0      	beq.n	2a1c4 <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   2a1e2:	4912      	ldr	r1, [pc, #72]	; (2a22c <k_delayed_work_submit_to_queue+0x190>)
   2a1e4:	6909      	ldr	r1, [r1, #16]
   2a1e6:	428b      	cmp	r3, r1
   2a1e8:	d0ee      	beq.n	2a1c8 <k_delayed_work_submit_to_queue+0x12c>
   2a1ea:	6819      	ldr	r1, [r3, #0]
   2a1ec:	2900      	cmp	r1, #0
   2a1ee:	d0ed      	beq.n	2a1cc <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1f0:	b12a      	cbz	r2, 2a1fe <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   2a1f2:	490e      	ldr	r1, [pc, #56]	; (2a22c <k_delayed_work_submit_to_queue+0x190>)
   2a1f4:	6909      	ldr	r1, [r1, #16]
   2a1f6:	428a      	cmp	r2, r1
   2a1f8:	d003      	beq.n	2a202 <k_delayed_work_submit_to_queue+0x166>
   2a1fa:	681b      	ldr	r3, [r3, #0]
   2a1fc:	e7e7      	b.n	2a1ce <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2a1fe:	2300      	movs	r3, #0
   2a200:	e7e5      	b.n	2a1ce <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   2a202:	2300      	movs	r3, #0
   2a204:	e7e3      	b.n	2a1ce <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   2a206:	4b0a      	ldr	r3, [pc, #40]	; (2a230 <k_delayed_work_submit_to_queue+0x194>)
   2a208:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2a20a:	685a      	ldr	r2, [r3, #4]
   2a20c:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   2a20e:	685a      	ldr	r2, [r3, #4]
   2a210:	6015      	str	r5, [r2, #0]
	list->tail = node;
   2a212:	605d      	str	r5, [r3, #4]
   2a214:	2000      	movs	r0, #0
   2a216:	f387 8811 	msr	BASEPRI, r7
}
   2a21a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   2a21c:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   2a220:	e7f9      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2a222:	2000      	movs	r0, #0
   2a224:	e7f7      	b.n	2a216 <k_delayed_work_submit_to_queue+0x17a>
   2a226:	bf00      	nop
   2a228:	cccccccd 	.word	0xcccccccd
   2a22c:	20002880 	.word	0x20002880
   2a230:	2000288c 	.word	0x2000288c

0002a234 <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2a234:	4770      	bx	lr
	...

0002a238 <_calloc_r>:
   2a238:	b510      	push	{r4, lr}
   2a23a:	fb02 f101 	mul.w	r1, r2, r1
   2a23e:	f000 f83d 	bl	2a2bc <_malloc_r>
   2a242:	4604      	mov	r4, r0
   2a244:	b1d8      	cbz	r0, 2a27e <_calloc_r+0x46>
   2a246:	f850 2c04 	ldr.w	r2, [r0, #-4]
   2a24a:	f022 0203 	bic.w	r2, r2, #3
   2a24e:	3a04      	subs	r2, #4
   2a250:	2a24      	cmp	r2, #36	; 0x24
   2a252:	d818      	bhi.n	2a286 <_calloc_r+0x4e>
   2a254:	2a13      	cmp	r2, #19
   2a256:	d914      	bls.n	2a282 <_calloc_r+0x4a>
   2a258:	2300      	movs	r3, #0
   2a25a:	2a1b      	cmp	r2, #27
   2a25c:	6003      	str	r3, [r0, #0]
   2a25e:	6043      	str	r3, [r0, #4]
   2a260:	d916      	bls.n	2a290 <_calloc_r+0x58>
   2a262:	2a24      	cmp	r2, #36	; 0x24
   2a264:	6083      	str	r3, [r0, #8]
   2a266:	60c3      	str	r3, [r0, #12]
   2a268:	bf11      	iteee	ne
   2a26a:	f100 0210 	addne.w	r2, r0, #16
   2a26e:	6103      	streq	r3, [r0, #16]
   2a270:	6143      	streq	r3, [r0, #20]
   2a272:	f100 0218 	addeq.w	r2, r0, #24
   2a276:	2300      	movs	r3, #0
   2a278:	6013      	str	r3, [r2, #0]
   2a27a:	6053      	str	r3, [r2, #4]
   2a27c:	6093      	str	r3, [r2, #8]
   2a27e:	4620      	mov	r0, r4
   2a280:	bd10      	pop	{r4, pc}
   2a282:	4602      	mov	r2, r0
   2a284:	e7f7      	b.n	2a276 <_calloc_r+0x3e>
   2a286:	2100      	movs	r1, #0
   2a288:	f000 fb72 	bl	2a970 <memset>
   2a28c:	4620      	mov	r0, r4
   2a28e:	bd10      	pop	{r4, pc}
   2a290:	f100 0208 	add.w	r2, r0, #8
   2a294:	e7ef      	b.n	2a276 <_calloc_r+0x3e>
   2a296:	bf00      	nop

0002a298 <__locale_ctype_ptr_l>:
   2a298:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   2a29c:	4770      	bx	lr
   2a29e:	bf00      	nop

0002a2a0 <__locale_ctype_ptr>:
   2a2a0:	4b04      	ldr	r3, [pc, #16]	; (2a2b4 <__locale_ctype_ptr+0x14>)
   2a2a2:	4a05      	ldr	r2, [pc, #20]	; (2a2b8 <__locale_ctype_ptr+0x18>)
   2a2a4:	681b      	ldr	r3, [r3, #0]
   2a2a6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   2a2a8:	2b00      	cmp	r3, #0
   2a2aa:	bf08      	it	eq
   2a2ac:	4613      	moveq	r3, r2
   2a2ae:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2a2b2:	4770      	bx	lr
   2a2b4:	2000c688 	.word	0x2000c688
   2a2b8:	2000cab8 	.word	0x2000cab8

0002a2bc <_malloc_r>:
   2a2bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a2c0:	f101 060b 	add.w	r6, r1, #11
   2a2c4:	2e16      	cmp	r6, #22
   2a2c6:	b083      	sub	sp, #12
   2a2c8:	4605      	mov	r5, r0
   2a2ca:	f240 809e 	bls.w	2a40a <_malloc_r+0x14e>
   2a2ce:	f036 0607 	bics.w	r6, r6, #7
   2a2d2:	f100 80bd 	bmi.w	2a450 <_malloc_r+0x194>
   2a2d6:	42b1      	cmp	r1, r6
   2a2d8:	f200 80ba 	bhi.w	2a450 <_malloc_r+0x194>
   2a2dc:	f000 fb96 	bl	2aa0c <__malloc_lock>
   2a2e0:	f5b6 7ffc 	cmp.w	r6, #504	; 0x1f8
   2a2e4:	f0c0 8293 	bcc.w	2a80e <_malloc_r+0x552>
   2a2e8:	0a73      	lsrs	r3, r6, #9
   2a2ea:	f000 80b8 	beq.w	2a45e <_malloc_r+0x1a2>
   2a2ee:	2b04      	cmp	r3, #4
   2a2f0:	f200 8179 	bhi.w	2a5e6 <_malloc_r+0x32a>
   2a2f4:	09b3      	lsrs	r3, r6, #6
   2a2f6:	f103 0039 	add.w	r0, r3, #57	; 0x39
   2a2fa:	f103 0e38 	add.w	lr, r3, #56	; 0x38
   2a2fe:	00c3      	lsls	r3, r0, #3
   2a300:	4fbf      	ldr	r7, [pc, #764]	; (2a600 <_malloc_r+0x344>)
   2a302:	443b      	add	r3, r7
   2a304:	f1a3 0108 	sub.w	r1, r3, #8
   2a308:	685c      	ldr	r4, [r3, #4]
   2a30a:	42a1      	cmp	r1, r4
   2a30c:	d106      	bne.n	2a31c <_malloc_r+0x60>
   2a30e:	e00c      	b.n	2a32a <_malloc_r+0x6e>
   2a310:	2a00      	cmp	r2, #0
   2a312:	f280 80aa 	bge.w	2a46a <_malloc_r+0x1ae>
   2a316:	68e4      	ldr	r4, [r4, #12]
   2a318:	42a1      	cmp	r1, r4
   2a31a:	d006      	beq.n	2a32a <_malloc_r+0x6e>
   2a31c:	6863      	ldr	r3, [r4, #4]
   2a31e:	f023 0303 	bic.w	r3, r3, #3
   2a322:	1b9a      	subs	r2, r3, r6
   2a324:	2a0f      	cmp	r2, #15
   2a326:	ddf3      	ble.n	2a310 <_malloc_r+0x54>
   2a328:	4670      	mov	r0, lr
   2a32a:	693c      	ldr	r4, [r7, #16]
   2a32c:	f8df e2e4 	ldr.w	lr, [pc, #740]	; 2a614 <_malloc_r+0x358>
   2a330:	4574      	cmp	r4, lr
   2a332:	f000 81ab 	beq.w	2a68c <_malloc_r+0x3d0>
   2a336:	6863      	ldr	r3, [r4, #4]
   2a338:	f023 0303 	bic.w	r3, r3, #3
   2a33c:	1b9a      	subs	r2, r3, r6
   2a33e:	2a0f      	cmp	r2, #15
   2a340:	f300 8190 	bgt.w	2a664 <_malloc_r+0x3a8>
   2a344:	2a00      	cmp	r2, #0
   2a346:	f8c7 e014 	str.w	lr, [r7, #20]
   2a34a:	f8c7 e010 	str.w	lr, [r7, #16]
   2a34e:	f280 809d 	bge.w	2a48c <_malloc_r+0x1d0>
   2a352:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2a356:	f080 8161 	bcs.w	2a61c <_malloc_r+0x360>
   2a35a:	08db      	lsrs	r3, r3, #3
   2a35c:	f103 0c01 	add.w	ip, r3, #1
   2a360:	1099      	asrs	r1, r3, #2
   2a362:	687a      	ldr	r2, [r7, #4]
   2a364:	f857 803c 	ldr.w	r8, [r7, ip, lsl #3]
   2a368:	f8c4 8008 	str.w	r8, [r4, #8]
   2a36c:	2301      	movs	r3, #1
   2a36e:	408b      	lsls	r3, r1
   2a370:	eb07 01cc 	add.w	r1, r7, ip, lsl #3
   2a374:	4313      	orrs	r3, r2
   2a376:	3908      	subs	r1, #8
   2a378:	60e1      	str	r1, [r4, #12]
   2a37a:	607b      	str	r3, [r7, #4]
   2a37c:	f847 403c 	str.w	r4, [r7, ip, lsl #3]
   2a380:	f8c8 400c 	str.w	r4, [r8, #12]
   2a384:	1082      	asrs	r2, r0, #2
   2a386:	2401      	movs	r4, #1
   2a388:	4094      	lsls	r4, r2
   2a38a:	429c      	cmp	r4, r3
   2a38c:	f200 808b 	bhi.w	2a4a6 <_malloc_r+0x1ea>
   2a390:	421c      	tst	r4, r3
   2a392:	d106      	bne.n	2a3a2 <_malloc_r+0xe6>
   2a394:	f020 0003 	bic.w	r0, r0, #3
   2a398:	0064      	lsls	r4, r4, #1
   2a39a:	421c      	tst	r4, r3
   2a39c:	f100 0004 	add.w	r0, r0, #4
   2a3a0:	d0fa      	beq.n	2a398 <_malloc_r+0xdc>
   2a3a2:	eb07 09c0 	add.w	r9, r7, r0, lsl #3
   2a3a6:	46cc      	mov	ip, r9
   2a3a8:	4680      	mov	r8, r0
   2a3aa:	f8dc 300c 	ldr.w	r3, [ip, #12]
   2a3ae:	459c      	cmp	ip, r3
   2a3b0:	d107      	bne.n	2a3c2 <_malloc_r+0x106>
   2a3b2:	e16d      	b.n	2a690 <_malloc_r+0x3d4>
   2a3b4:	2a00      	cmp	r2, #0
   2a3b6:	f280 817b 	bge.w	2a6b0 <_malloc_r+0x3f4>
   2a3ba:	68db      	ldr	r3, [r3, #12]
   2a3bc:	459c      	cmp	ip, r3
   2a3be:	f000 8167 	beq.w	2a690 <_malloc_r+0x3d4>
   2a3c2:	6859      	ldr	r1, [r3, #4]
   2a3c4:	f021 0103 	bic.w	r1, r1, #3
   2a3c8:	1b8a      	subs	r2, r1, r6
   2a3ca:	2a0f      	cmp	r2, #15
   2a3cc:	ddf2      	ble.n	2a3b4 <_malloc_r+0xf8>
   2a3ce:	f8d3 c00c 	ldr.w	ip, [r3, #12]
   2a3d2:	f8d3 8008 	ldr.w	r8, [r3, #8]
   2a3d6:	9300      	str	r3, [sp, #0]
   2a3d8:	199c      	adds	r4, r3, r6
   2a3da:	4628      	mov	r0, r5
   2a3dc:	f046 0601 	orr.w	r6, r6, #1
   2a3e0:	f042 0501 	orr.w	r5, r2, #1
   2a3e4:	605e      	str	r6, [r3, #4]
   2a3e6:	f8c8 c00c 	str.w	ip, [r8, #12]
   2a3ea:	f8cc 8008 	str.w	r8, [ip, #8]
   2a3ee:	617c      	str	r4, [r7, #20]
   2a3f0:	613c      	str	r4, [r7, #16]
   2a3f2:	f8c4 e00c 	str.w	lr, [r4, #12]
   2a3f6:	f8c4 e008 	str.w	lr, [r4, #8]
   2a3fa:	6065      	str	r5, [r4, #4]
   2a3fc:	505a      	str	r2, [r3, r1]
   2a3fe:	f000 fb0b 	bl	2aa18 <__malloc_unlock>
   2a402:	9b00      	ldr	r3, [sp, #0]
   2a404:	f103 0408 	add.w	r4, r3, #8
   2a408:	e01e      	b.n	2a448 <_malloc_r+0x18c>
   2a40a:	2910      	cmp	r1, #16
   2a40c:	d820      	bhi.n	2a450 <_malloc_r+0x194>
   2a40e:	f000 fafd 	bl	2aa0c <__malloc_lock>
   2a412:	2610      	movs	r6, #16
   2a414:	2318      	movs	r3, #24
   2a416:	2002      	movs	r0, #2
   2a418:	4f79      	ldr	r7, [pc, #484]	; (2a600 <_malloc_r+0x344>)
   2a41a:	443b      	add	r3, r7
   2a41c:	f1a3 0208 	sub.w	r2, r3, #8
   2a420:	685c      	ldr	r4, [r3, #4]
   2a422:	4294      	cmp	r4, r2
   2a424:	f000 813d 	beq.w	2a6a2 <_malloc_r+0x3e6>
   2a428:	6863      	ldr	r3, [r4, #4]
   2a42a:	68e1      	ldr	r1, [r4, #12]
   2a42c:	68a6      	ldr	r6, [r4, #8]
   2a42e:	f023 0303 	bic.w	r3, r3, #3
   2a432:	4423      	add	r3, r4
   2a434:	4628      	mov	r0, r5
   2a436:	685a      	ldr	r2, [r3, #4]
   2a438:	60f1      	str	r1, [r6, #12]
   2a43a:	f042 0201 	orr.w	r2, r2, #1
   2a43e:	608e      	str	r6, [r1, #8]
   2a440:	605a      	str	r2, [r3, #4]
   2a442:	f000 fae9 	bl	2aa18 <__malloc_unlock>
   2a446:	3408      	adds	r4, #8
   2a448:	4620      	mov	r0, r4
   2a44a:	b003      	add	sp, #12
   2a44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a450:	2400      	movs	r4, #0
   2a452:	230c      	movs	r3, #12
   2a454:	4620      	mov	r0, r4
   2a456:	602b      	str	r3, [r5, #0]
   2a458:	b003      	add	sp, #12
   2a45a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a45e:	2040      	movs	r0, #64	; 0x40
   2a460:	f44f 7300 	mov.w	r3, #512	; 0x200
   2a464:	f04f 0e3f 	mov.w	lr, #63	; 0x3f
   2a468:	e74a      	b.n	2a300 <_malloc_r+0x44>
   2a46a:	4423      	add	r3, r4
   2a46c:	68e1      	ldr	r1, [r4, #12]
   2a46e:	685a      	ldr	r2, [r3, #4]
   2a470:	68a6      	ldr	r6, [r4, #8]
   2a472:	f042 0201 	orr.w	r2, r2, #1
   2a476:	60f1      	str	r1, [r6, #12]
   2a478:	4628      	mov	r0, r5
   2a47a:	608e      	str	r6, [r1, #8]
   2a47c:	605a      	str	r2, [r3, #4]
   2a47e:	f000 facb 	bl	2aa18 <__malloc_unlock>
   2a482:	3408      	adds	r4, #8
   2a484:	4620      	mov	r0, r4
   2a486:	b003      	add	sp, #12
   2a488:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a48c:	4423      	add	r3, r4
   2a48e:	4628      	mov	r0, r5
   2a490:	685a      	ldr	r2, [r3, #4]
   2a492:	f042 0201 	orr.w	r2, r2, #1
   2a496:	605a      	str	r2, [r3, #4]
   2a498:	f000 fabe 	bl	2aa18 <__malloc_unlock>
   2a49c:	3408      	adds	r4, #8
   2a49e:	4620      	mov	r0, r4
   2a4a0:	b003      	add	sp, #12
   2a4a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a4a6:	68bc      	ldr	r4, [r7, #8]
   2a4a8:	6863      	ldr	r3, [r4, #4]
   2a4aa:	f023 0803 	bic.w	r8, r3, #3
   2a4ae:	45b0      	cmp	r8, r6
   2a4b0:	d304      	bcc.n	2a4bc <_malloc_r+0x200>
   2a4b2:	eba8 0306 	sub.w	r3, r8, r6
   2a4b6:	2b0f      	cmp	r3, #15
   2a4b8:	f300 8085 	bgt.w	2a5c6 <_malloc_r+0x30a>
   2a4bc:	f8df 9158 	ldr.w	r9, [pc, #344]	; 2a618 <_malloc_r+0x35c>
   2a4c0:	4b50      	ldr	r3, [pc, #320]	; (2a604 <_malloc_r+0x348>)
   2a4c2:	f8d9 2000 	ldr.w	r2, [r9]
   2a4c6:	681b      	ldr	r3, [r3, #0]
   2a4c8:	3201      	adds	r2, #1
   2a4ca:	4433      	add	r3, r6
   2a4cc:	eb04 0a08 	add.w	sl, r4, r8
   2a4d0:	f000 8155 	beq.w	2a77e <_malloc_r+0x4c2>
   2a4d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
   2a4d8:	330f      	adds	r3, #15
   2a4da:	f423 6b7f 	bic.w	fp, r3, #4080	; 0xff0
   2a4de:	f02b 0b0f 	bic.w	fp, fp, #15
   2a4e2:	4659      	mov	r1, fp
   2a4e4:	4628      	mov	r0, r5
   2a4e6:	f000 fabd 	bl	2aa64 <_sbrk_r>
   2a4ea:	1c41      	adds	r1, r0, #1
   2a4ec:	4602      	mov	r2, r0
   2a4ee:	f000 80fc 	beq.w	2a6ea <_malloc_r+0x42e>
   2a4f2:	4582      	cmp	sl, r0
   2a4f4:	f200 80f7 	bhi.w	2a6e6 <_malloc_r+0x42a>
   2a4f8:	4b43      	ldr	r3, [pc, #268]	; (2a608 <_malloc_r+0x34c>)
   2a4fa:	6819      	ldr	r1, [r3, #0]
   2a4fc:	4459      	add	r1, fp
   2a4fe:	6019      	str	r1, [r3, #0]
   2a500:	f000 814d 	beq.w	2a79e <_malloc_r+0x4e2>
   2a504:	f8d9 0000 	ldr.w	r0, [r9]
   2a508:	3001      	adds	r0, #1
   2a50a:	bf1b      	ittet	ne
   2a50c:	eba2 0a0a 	subne.w	sl, r2, sl
   2a510:	4451      	addne	r1, sl
   2a512:	f8c9 2000 	streq.w	r2, [r9]
   2a516:	6019      	strne	r1, [r3, #0]
   2a518:	f012 0107 	ands.w	r1, r2, #7
   2a51c:	f000 8115 	beq.w	2a74a <_malloc_r+0x48e>
   2a520:	f1c1 0008 	rsb	r0, r1, #8
   2a524:	f5c1 5180 	rsb	r1, r1, #4096	; 0x1000
   2a528:	4402      	add	r2, r0
   2a52a:	3108      	adds	r1, #8
   2a52c:	eb02 090b 	add.w	r9, r2, fp
   2a530:	f3c9 090b 	ubfx	r9, r9, #0, #12
   2a534:	eba1 0909 	sub.w	r9, r1, r9
   2a538:	4649      	mov	r1, r9
   2a53a:	4628      	mov	r0, r5
   2a53c:	9301      	str	r3, [sp, #4]
   2a53e:	9200      	str	r2, [sp, #0]
   2a540:	f000 fa90 	bl	2aa64 <_sbrk_r>
   2a544:	1c43      	adds	r3, r0, #1
   2a546:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2a54a:	f000 8143 	beq.w	2a7d4 <_malloc_r+0x518>
   2a54e:	1a80      	subs	r0, r0, r2
   2a550:	4448      	add	r0, r9
   2a552:	f040 0001 	orr.w	r0, r0, #1
   2a556:	6819      	ldr	r1, [r3, #0]
   2a558:	60ba      	str	r2, [r7, #8]
   2a55a:	4449      	add	r1, r9
   2a55c:	42bc      	cmp	r4, r7
   2a55e:	6050      	str	r0, [r2, #4]
   2a560:	6019      	str	r1, [r3, #0]
   2a562:	d017      	beq.n	2a594 <_malloc_r+0x2d8>
   2a564:	f1b8 0f0f 	cmp.w	r8, #15
   2a568:	f240 80fb 	bls.w	2a762 <_malloc_r+0x4a6>
   2a56c:	6860      	ldr	r0, [r4, #4]
   2a56e:	f1a8 020c 	sub.w	r2, r8, #12
   2a572:	f022 0207 	bic.w	r2, r2, #7
   2a576:	eb04 0e02 	add.w	lr, r4, r2
   2a57a:	f000 0001 	and.w	r0, r0, #1
   2a57e:	f04f 0c05 	mov.w	ip, #5
   2a582:	4310      	orrs	r0, r2
   2a584:	2a0f      	cmp	r2, #15
   2a586:	6060      	str	r0, [r4, #4]
   2a588:	f8ce c004 	str.w	ip, [lr, #4]
   2a58c:	f8ce c008 	str.w	ip, [lr, #8]
   2a590:	f200 8117 	bhi.w	2a7c2 <_malloc_r+0x506>
   2a594:	4b1d      	ldr	r3, [pc, #116]	; (2a60c <_malloc_r+0x350>)
   2a596:	68bc      	ldr	r4, [r7, #8]
   2a598:	681a      	ldr	r2, [r3, #0]
   2a59a:	4291      	cmp	r1, r2
   2a59c:	bf88      	it	hi
   2a59e:	6019      	strhi	r1, [r3, #0]
   2a5a0:	4b1b      	ldr	r3, [pc, #108]	; (2a610 <_malloc_r+0x354>)
   2a5a2:	681a      	ldr	r2, [r3, #0]
   2a5a4:	4291      	cmp	r1, r2
   2a5a6:	6862      	ldr	r2, [r4, #4]
   2a5a8:	bf88      	it	hi
   2a5aa:	6019      	strhi	r1, [r3, #0]
   2a5ac:	f022 0203 	bic.w	r2, r2, #3
   2a5b0:	4296      	cmp	r6, r2
   2a5b2:	eba2 0306 	sub.w	r3, r2, r6
   2a5b6:	d801      	bhi.n	2a5bc <_malloc_r+0x300>
   2a5b8:	2b0f      	cmp	r3, #15
   2a5ba:	dc04      	bgt.n	2a5c6 <_malloc_r+0x30a>
   2a5bc:	4628      	mov	r0, r5
   2a5be:	f000 fa2b 	bl	2aa18 <__malloc_unlock>
   2a5c2:	2400      	movs	r4, #0
   2a5c4:	e740      	b.n	2a448 <_malloc_r+0x18c>
   2a5c6:	19a2      	adds	r2, r4, r6
   2a5c8:	f043 0301 	orr.w	r3, r3, #1
   2a5cc:	f046 0601 	orr.w	r6, r6, #1
   2a5d0:	6066      	str	r6, [r4, #4]
   2a5d2:	4628      	mov	r0, r5
   2a5d4:	60ba      	str	r2, [r7, #8]
   2a5d6:	6053      	str	r3, [r2, #4]
   2a5d8:	f000 fa1e 	bl	2aa18 <__malloc_unlock>
   2a5dc:	3408      	adds	r4, #8
   2a5de:	4620      	mov	r0, r4
   2a5e0:	b003      	add	sp, #12
   2a5e2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a5e6:	2b14      	cmp	r3, #20
   2a5e8:	d971      	bls.n	2a6ce <_malloc_r+0x412>
   2a5ea:	2b54      	cmp	r3, #84	; 0x54
   2a5ec:	f200 80a3 	bhi.w	2a736 <_malloc_r+0x47a>
   2a5f0:	0b33      	lsrs	r3, r6, #12
   2a5f2:	f103 006f 	add.w	r0, r3, #111	; 0x6f
   2a5f6:	f103 0e6e 	add.w	lr, r3, #110	; 0x6e
   2a5fa:	00c3      	lsls	r3, r0, #3
   2a5fc:	e680      	b.n	2a300 <_malloc_r+0x44>
   2a5fe:	bf00      	nop
   2a600:	2000cc24 	.word	0x2000cc24
   2a604:	200029d8 	.word	0x200029d8
   2a608:	200029a8 	.word	0x200029a8
   2a60c:	200029d0 	.word	0x200029d0
   2a610:	200029d4 	.word	0x200029d4
   2a614:	2000cc2c 	.word	0x2000cc2c
   2a618:	2000d02c 	.word	0x2000d02c
   2a61c:	0a5a      	lsrs	r2, r3, #9
   2a61e:	2a04      	cmp	r2, #4
   2a620:	d95b      	bls.n	2a6da <_malloc_r+0x41e>
   2a622:	2a14      	cmp	r2, #20
   2a624:	f200 80ae 	bhi.w	2a784 <_malloc_r+0x4c8>
   2a628:	f102 015c 	add.w	r1, r2, #92	; 0x5c
   2a62c:	00c9      	lsls	r1, r1, #3
   2a62e:	325b      	adds	r2, #91	; 0x5b
   2a630:	eb07 0c01 	add.w	ip, r7, r1
   2a634:	5879      	ldr	r1, [r7, r1]
   2a636:	f1ac 0c08 	sub.w	ip, ip, #8
   2a63a:	458c      	cmp	ip, r1
   2a63c:	f000 8088 	beq.w	2a750 <_malloc_r+0x494>
   2a640:	684a      	ldr	r2, [r1, #4]
   2a642:	f022 0203 	bic.w	r2, r2, #3
   2a646:	4293      	cmp	r3, r2
   2a648:	d273      	bcs.n	2a732 <_malloc_r+0x476>
   2a64a:	6889      	ldr	r1, [r1, #8]
   2a64c:	458c      	cmp	ip, r1
   2a64e:	d1f7      	bne.n	2a640 <_malloc_r+0x384>
   2a650:	f8dc 200c 	ldr.w	r2, [ip, #12]
   2a654:	687b      	ldr	r3, [r7, #4]
   2a656:	60e2      	str	r2, [r4, #12]
   2a658:	f8c4 c008 	str.w	ip, [r4, #8]
   2a65c:	6094      	str	r4, [r2, #8]
   2a65e:	f8cc 400c 	str.w	r4, [ip, #12]
   2a662:	e68f      	b.n	2a384 <_malloc_r+0xc8>
   2a664:	19a1      	adds	r1, r4, r6
   2a666:	f046 0c01 	orr.w	ip, r6, #1
   2a66a:	f042 0601 	orr.w	r6, r2, #1
   2a66e:	f8c4 c004 	str.w	ip, [r4, #4]
   2a672:	4628      	mov	r0, r5
   2a674:	6179      	str	r1, [r7, #20]
   2a676:	6139      	str	r1, [r7, #16]
   2a678:	f8c1 e00c 	str.w	lr, [r1, #12]
   2a67c:	f8c1 e008 	str.w	lr, [r1, #8]
   2a680:	604e      	str	r6, [r1, #4]
   2a682:	50e2      	str	r2, [r4, r3]
   2a684:	f000 f9c8 	bl	2aa18 <__malloc_unlock>
   2a688:	3408      	adds	r4, #8
   2a68a:	e6dd      	b.n	2a448 <_malloc_r+0x18c>
   2a68c:	687b      	ldr	r3, [r7, #4]
   2a68e:	e679      	b.n	2a384 <_malloc_r+0xc8>
   2a690:	f108 0801 	add.w	r8, r8, #1
   2a694:	f018 0f03 	tst.w	r8, #3
   2a698:	f10c 0c08 	add.w	ip, ip, #8
   2a69c:	f47f ae85 	bne.w	2a3aa <_malloc_r+0xee>
   2a6a0:	e02d      	b.n	2a6fe <_malloc_r+0x442>
   2a6a2:	68dc      	ldr	r4, [r3, #12]
   2a6a4:	42a3      	cmp	r3, r4
   2a6a6:	bf08      	it	eq
   2a6a8:	3002      	addeq	r0, #2
   2a6aa:	f43f ae3e 	beq.w	2a32a <_malloc_r+0x6e>
   2a6ae:	e6bb      	b.n	2a428 <_malloc_r+0x16c>
   2a6b0:	4419      	add	r1, r3
   2a6b2:	461c      	mov	r4, r3
   2a6b4:	684a      	ldr	r2, [r1, #4]
   2a6b6:	68db      	ldr	r3, [r3, #12]
   2a6b8:	f854 6f08 	ldr.w	r6, [r4, #8]!
   2a6bc:	f042 0201 	orr.w	r2, r2, #1
   2a6c0:	604a      	str	r2, [r1, #4]
   2a6c2:	4628      	mov	r0, r5
   2a6c4:	60f3      	str	r3, [r6, #12]
   2a6c6:	609e      	str	r6, [r3, #8]
   2a6c8:	f000 f9a6 	bl	2aa18 <__malloc_unlock>
   2a6cc:	e6bc      	b.n	2a448 <_malloc_r+0x18c>
   2a6ce:	f103 005c 	add.w	r0, r3, #92	; 0x5c
   2a6d2:	f103 0e5b 	add.w	lr, r3, #91	; 0x5b
   2a6d6:	00c3      	lsls	r3, r0, #3
   2a6d8:	e612      	b.n	2a300 <_malloc_r+0x44>
   2a6da:	099a      	lsrs	r2, r3, #6
   2a6dc:	f102 0139 	add.w	r1, r2, #57	; 0x39
   2a6e0:	00c9      	lsls	r1, r1, #3
   2a6e2:	3238      	adds	r2, #56	; 0x38
   2a6e4:	e7a4      	b.n	2a630 <_malloc_r+0x374>
   2a6e6:	42bc      	cmp	r4, r7
   2a6e8:	d054      	beq.n	2a794 <_malloc_r+0x4d8>
   2a6ea:	68bc      	ldr	r4, [r7, #8]
   2a6ec:	6862      	ldr	r2, [r4, #4]
   2a6ee:	f022 0203 	bic.w	r2, r2, #3
   2a6f2:	e75d      	b.n	2a5b0 <_malloc_r+0x2f4>
   2a6f4:	f859 3908 	ldr.w	r3, [r9], #-8
   2a6f8:	4599      	cmp	r9, r3
   2a6fa:	f040 8086 	bne.w	2a80a <_malloc_r+0x54e>
   2a6fe:	f010 0f03 	tst.w	r0, #3
   2a702:	f100 30ff 	add.w	r0, r0, #4294967295	; 0xffffffff
   2a706:	d1f5      	bne.n	2a6f4 <_malloc_r+0x438>
   2a708:	687b      	ldr	r3, [r7, #4]
   2a70a:	ea23 0304 	bic.w	r3, r3, r4
   2a70e:	607b      	str	r3, [r7, #4]
   2a710:	0064      	lsls	r4, r4, #1
   2a712:	429c      	cmp	r4, r3
   2a714:	f63f aec7 	bhi.w	2a4a6 <_malloc_r+0x1ea>
   2a718:	2c00      	cmp	r4, #0
   2a71a:	f43f aec4 	beq.w	2a4a6 <_malloc_r+0x1ea>
   2a71e:	421c      	tst	r4, r3
   2a720:	4640      	mov	r0, r8
   2a722:	f47f ae3e 	bne.w	2a3a2 <_malloc_r+0xe6>
   2a726:	0064      	lsls	r4, r4, #1
   2a728:	421c      	tst	r4, r3
   2a72a:	f100 0004 	add.w	r0, r0, #4
   2a72e:	d0fa      	beq.n	2a726 <_malloc_r+0x46a>
   2a730:	e637      	b.n	2a3a2 <_malloc_r+0xe6>
   2a732:	468c      	mov	ip, r1
   2a734:	e78c      	b.n	2a650 <_malloc_r+0x394>
   2a736:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   2a73a:	d815      	bhi.n	2a768 <_malloc_r+0x4ac>
   2a73c:	0bf3      	lsrs	r3, r6, #15
   2a73e:	f103 0078 	add.w	r0, r3, #120	; 0x78
   2a742:	f103 0e77 	add.w	lr, r3, #119	; 0x77
   2a746:	00c3      	lsls	r3, r0, #3
   2a748:	e5da      	b.n	2a300 <_malloc_r+0x44>
   2a74a:	f44f 5180 	mov.w	r1, #4096	; 0x1000
   2a74e:	e6ed      	b.n	2a52c <_malloc_r+0x270>
   2a750:	687b      	ldr	r3, [r7, #4]
   2a752:	1092      	asrs	r2, r2, #2
   2a754:	2101      	movs	r1, #1
   2a756:	fa01 f202 	lsl.w	r2, r1, r2
   2a75a:	4313      	orrs	r3, r2
   2a75c:	607b      	str	r3, [r7, #4]
   2a75e:	4662      	mov	r2, ip
   2a760:	e779      	b.n	2a656 <_malloc_r+0x39a>
   2a762:	2301      	movs	r3, #1
   2a764:	6053      	str	r3, [r2, #4]
   2a766:	e729      	b.n	2a5bc <_malloc_r+0x300>
   2a768:	f240 5254 	movw	r2, #1364	; 0x554
   2a76c:	4293      	cmp	r3, r2
   2a76e:	d822      	bhi.n	2a7b6 <_malloc_r+0x4fa>
   2a770:	0cb3      	lsrs	r3, r6, #18
   2a772:	f103 007d 	add.w	r0, r3, #125	; 0x7d
   2a776:	f103 0e7c 	add.w	lr, r3, #124	; 0x7c
   2a77a:	00c3      	lsls	r3, r0, #3
   2a77c:	e5c0      	b.n	2a300 <_malloc_r+0x44>
   2a77e:	f103 0b10 	add.w	fp, r3, #16
   2a782:	e6ae      	b.n	2a4e2 <_malloc_r+0x226>
   2a784:	2a54      	cmp	r2, #84	; 0x54
   2a786:	d829      	bhi.n	2a7dc <_malloc_r+0x520>
   2a788:	0b1a      	lsrs	r2, r3, #12
   2a78a:	f102 016f 	add.w	r1, r2, #111	; 0x6f
   2a78e:	00c9      	lsls	r1, r1, #3
   2a790:	326e      	adds	r2, #110	; 0x6e
   2a792:	e74d      	b.n	2a630 <_malloc_r+0x374>
   2a794:	4b20      	ldr	r3, [pc, #128]	; (2a818 <_malloc_r+0x55c>)
   2a796:	6819      	ldr	r1, [r3, #0]
   2a798:	4459      	add	r1, fp
   2a79a:	6019      	str	r1, [r3, #0]
   2a79c:	e6b2      	b.n	2a504 <_malloc_r+0x248>
   2a79e:	f3ca 000b 	ubfx	r0, sl, #0, #12
   2a7a2:	2800      	cmp	r0, #0
   2a7a4:	f47f aeae 	bne.w	2a504 <_malloc_r+0x248>
   2a7a8:	eb08 030b 	add.w	r3, r8, fp
   2a7ac:	68ba      	ldr	r2, [r7, #8]
   2a7ae:	f043 0301 	orr.w	r3, r3, #1
   2a7b2:	6053      	str	r3, [r2, #4]
   2a7b4:	e6ee      	b.n	2a594 <_malloc_r+0x2d8>
   2a7b6:	207f      	movs	r0, #127	; 0x7f
   2a7b8:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
   2a7bc:	f04f 0e7e 	mov.w	lr, #126	; 0x7e
   2a7c0:	e59e      	b.n	2a300 <_malloc_r+0x44>
   2a7c2:	f104 0108 	add.w	r1, r4, #8
   2a7c6:	4628      	mov	r0, r5
   2a7c8:	9300      	str	r3, [sp, #0]
   2a7ca:	f003 f943 	bl	2da54 <_free_r>
   2a7ce:	9b00      	ldr	r3, [sp, #0]
   2a7d0:	6819      	ldr	r1, [r3, #0]
   2a7d2:	e6df      	b.n	2a594 <_malloc_r+0x2d8>
   2a7d4:	2001      	movs	r0, #1
   2a7d6:	f04f 0900 	mov.w	r9, #0
   2a7da:	e6bc      	b.n	2a556 <_malloc_r+0x29a>
   2a7dc:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2a7e0:	d805      	bhi.n	2a7ee <_malloc_r+0x532>
   2a7e2:	0bda      	lsrs	r2, r3, #15
   2a7e4:	f102 0178 	add.w	r1, r2, #120	; 0x78
   2a7e8:	00c9      	lsls	r1, r1, #3
   2a7ea:	3277      	adds	r2, #119	; 0x77
   2a7ec:	e720      	b.n	2a630 <_malloc_r+0x374>
   2a7ee:	f240 5154 	movw	r1, #1364	; 0x554
   2a7f2:	428a      	cmp	r2, r1
   2a7f4:	d805      	bhi.n	2a802 <_malloc_r+0x546>
   2a7f6:	0c9a      	lsrs	r2, r3, #18
   2a7f8:	f102 017d 	add.w	r1, r2, #125	; 0x7d
   2a7fc:	00c9      	lsls	r1, r1, #3
   2a7fe:	327c      	adds	r2, #124	; 0x7c
   2a800:	e716      	b.n	2a630 <_malloc_r+0x374>
   2a802:	f44f 717e 	mov.w	r1, #1016	; 0x3f8
   2a806:	227e      	movs	r2, #126	; 0x7e
   2a808:	e712      	b.n	2a630 <_malloc_r+0x374>
   2a80a:	687b      	ldr	r3, [r7, #4]
   2a80c:	e780      	b.n	2a710 <_malloc_r+0x454>
   2a80e:	08f0      	lsrs	r0, r6, #3
   2a810:	f106 0308 	add.w	r3, r6, #8
   2a814:	e600      	b.n	2a418 <_malloc_r+0x15c>
   2a816:	bf00      	nop
   2a818:	200029a8 	.word	0x200029a8

0002a81c <__ascii_mbtowc>:
   2a81c:	b082      	sub	sp, #8
   2a81e:	b149      	cbz	r1, 2a834 <__ascii_mbtowc+0x18>
   2a820:	b15a      	cbz	r2, 2a83a <__ascii_mbtowc+0x1e>
   2a822:	b16b      	cbz	r3, 2a840 <__ascii_mbtowc+0x24>
   2a824:	7813      	ldrb	r3, [r2, #0]
   2a826:	600b      	str	r3, [r1, #0]
   2a828:	7812      	ldrb	r2, [r2, #0]
   2a82a:	1c10      	adds	r0, r2, #0
   2a82c:	bf18      	it	ne
   2a82e:	2001      	movne	r0, #1
   2a830:	b002      	add	sp, #8
   2a832:	4770      	bx	lr
   2a834:	a901      	add	r1, sp, #4
   2a836:	2a00      	cmp	r2, #0
   2a838:	d1f3      	bne.n	2a822 <__ascii_mbtowc+0x6>
   2a83a:	4610      	mov	r0, r2
   2a83c:	b002      	add	sp, #8
   2a83e:	4770      	bx	lr
   2a840:	f06f 0001 	mvn.w	r0, #1
   2a844:	e7f4      	b.n	2a830 <__ascii_mbtowc+0x14>
   2a846:	bf00      	nop

0002a848 <memcmp>:
   2a848:	2a03      	cmp	r2, #3
   2a84a:	b470      	push	{r4, r5, r6}
   2a84c:	d922      	bls.n	2a894 <memcmp+0x4c>
   2a84e:	ea40 0301 	orr.w	r3, r0, r1
   2a852:	079b      	lsls	r3, r3, #30
   2a854:	d011      	beq.n	2a87a <memcmp+0x32>
   2a856:	7803      	ldrb	r3, [r0, #0]
   2a858:	780c      	ldrb	r4, [r1, #0]
   2a85a:	42a3      	cmp	r3, r4
   2a85c:	d11d      	bne.n	2a89a <memcmp+0x52>
   2a85e:	440a      	add	r2, r1
   2a860:	3101      	adds	r1, #1
   2a862:	e005      	b.n	2a870 <memcmp+0x28>
   2a864:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2a868:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a86c:	42a3      	cmp	r3, r4
   2a86e:	d114      	bne.n	2a89a <memcmp+0x52>
   2a870:	4291      	cmp	r1, r2
   2a872:	d1f7      	bne.n	2a864 <memcmp+0x1c>
   2a874:	2000      	movs	r0, #0
   2a876:	bc70      	pop	{r4, r5, r6}
   2a878:	4770      	bx	lr
   2a87a:	680d      	ldr	r5, [r1, #0]
   2a87c:	6806      	ldr	r6, [r0, #0]
   2a87e:	42ae      	cmp	r6, r5
   2a880:	460c      	mov	r4, r1
   2a882:	4603      	mov	r3, r0
   2a884:	f101 0104 	add.w	r1, r1, #4
   2a888:	f100 0004 	add.w	r0, r0, #4
   2a88c:	d108      	bne.n	2a8a0 <memcmp+0x58>
   2a88e:	3a04      	subs	r2, #4
   2a890:	2a03      	cmp	r2, #3
   2a892:	d8f2      	bhi.n	2a87a <memcmp+0x32>
   2a894:	2a00      	cmp	r2, #0
   2a896:	d1de      	bne.n	2a856 <memcmp+0xe>
   2a898:	e7ec      	b.n	2a874 <memcmp+0x2c>
   2a89a:	1b18      	subs	r0, r3, r4
   2a89c:	bc70      	pop	{r4, r5, r6}
   2a89e:	4770      	bx	lr
   2a8a0:	4621      	mov	r1, r4
   2a8a2:	4618      	mov	r0, r3
   2a8a4:	e7d7      	b.n	2a856 <memcmp+0xe>
   2a8a6:	bf00      	nop

0002a8a8 <memmove>:
   2a8a8:	4288      	cmp	r0, r1
   2a8aa:	b5f0      	push	{r4, r5, r6, r7, lr}
   2a8ac:	d90d      	bls.n	2a8ca <memmove+0x22>
   2a8ae:	188b      	adds	r3, r1, r2
   2a8b0:	4298      	cmp	r0, r3
   2a8b2:	d20a      	bcs.n	2a8ca <memmove+0x22>
   2a8b4:	1884      	adds	r4, r0, r2
   2a8b6:	2a00      	cmp	r2, #0
   2a8b8:	d051      	beq.n	2a95e <memmove+0xb6>
   2a8ba:	4622      	mov	r2, r4
   2a8bc:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   2a8c0:	f802 4d01 	strb.w	r4, [r2, #-1]!
   2a8c4:	4299      	cmp	r1, r3
   2a8c6:	d1f9      	bne.n	2a8bc <memmove+0x14>
   2a8c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a8ca:	2a0f      	cmp	r2, #15
   2a8cc:	d948      	bls.n	2a960 <memmove+0xb8>
   2a8ce:	ea41 0300 	orr.w	r3, r1, r0
   2a8d2:	079b      	lsls	r3, r3, #30
   2a8d4:	d146      	bne.n	2a964 <memmove+0xbc>
   2a8d6:	f100 0410 	add.w	r4, r0, #16
   2a8da:	f101 0310 	add.w	r3, r1, #16
   2a8de:	4615      	mov	r5, r2
   2a8e0:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2a8e4:	f844 6c10 	str.w	r6, [r4, #-16]
   2a8e8:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   2a8ec:	f844 6c0c 	str.w	r6, [r4, #-12]
   2a8f0:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2a8f4:	f844 6c08 	str.w	r6, [r4, #-8]
   2a8f8:	3d10      	subs	r5, #16
   2a8fa:	f853 6c04 	ldr.w	r6, [r3, #-4]
   2a8fe:	f844 6c04 	str.w	r6, [r4, #-4]
   2a902:	2d0f      	cmp	r5, #15
   2a904:	f103 0310 	add.w	r3, r3, #16
   2a908:	f104 0410 	add.w	r4, r4, #16
   2a90c:	d8e8      	bhi.n	2a8e0 <memmove+0x38>
   2a90e:	f1a2 0310 	sub.w	r3, r2, #16
   2a912:	f023 030f 	bic.w	r3, r3, #15
   2a916:	f002 0e0f 	and.w	lr, r2, #15
   2a91a:	3310      	adds	r3, #16
   2a91c:	f1be 0f03 	cmp.w	lr, #3
   2a920:	4419      	add	r1, r3
   2a922:	4403      	add	r3, r0
   2a924:	d921      	bls.n	2a96a <memmove+0xc2>
   2a926:	1f1e      	subs	r6, r3, #4
   2a928:	460d      	mov	r5, r1
   2a92a:	4674      	mov	r4, lr
   2a92c:	3c04      	subs	r4, #4
   2a92e:	f855 7b04 	ldr.w	r7, [r5], #4
   2a932:	f846 7f04 	str.w	r7, [r6, #4]!
   2a936:	2c03      	cmp	r4, #3
   2a938:	d8f8      	bhi.n	2a92c <memmove+0x84>
   2a93a:	f1ae 0404 	sub.w	r4, lr, #4
   2a93e:	f024 0403 	bic.w	r4, r4, #3
   2a942:	3404      	adds	r4, #4
   2a944:	4421      	add	r1, r4
   2a946:	4423      	add	r3, r4
   2a948:	f002 0203 	and.w	r2, r2, #3
   2a94c:	b162      	cbz	r2, 2a968 <memmove+0xc0>
   2a94e:	3b01      	subs	r3, #1
   2a950:	440a      	add	r2, r1
   2a952:	f811 4b01 	ldrb.w	r4, [r1], #1
   2a956:	f803 4f01 	strb.w	r4, [r3, #1]!
   2a95a:	428a      	cmp	r2, r1
   2a95c:	d1f9      	bne.n	2a952 <memmove+0xaa>
   2a95e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a960:	4603      	mov	r3, r0
   2a962:	e7f3      	b.n	2a94c <memmove+0xa4>
   2a964:	4603      	mov	r3, r0
   2a966:	e7f2      	b.n	2a94e <memmove+0xa6>
   2a968:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2a96a:	4672      	mov	r2, lr
   2a96c:	e7ee      	b.n	2a94c <memmove+0xa4>
   2a96e:	bf00      	nop

0002a970 <memset>:
   2a970:	b470      	push	{r4, r5, r6}
   2a972:	0786      	lsls	r6, r0, #30
   2a974:	d046      	beq.n	2aa04 <memset+0x94>
   2a976:	1e54      	subs	r4, r2, #1
   2a978:	2a00      	cmp	r2, #0
   2a97a:	d041      	beq.n	2aa00 <memset+0x90>
   2a97c:	b2ca      	uxtb	r2, r1
   2a97e:	4603      	mov	r3, r0
   2a980:	e002      	b.n	2a988 <memset+0x18>
   2a982:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   2a986:	d33b      	bcc.n	2aa00 <memset+0x90>
   2a988:	f803 2b01 	strb.w	r2, [r3], #1
   2a98c:	079d      	lsls	r5, r3, #30
   2a98e:	d1f8      	bne.n	2a982 <memset+0x12>
   2a990:	2c03      	cmp	r4, #3
   2a992:	d92e      	bls.n	2a9f2 <memset+0x82>
   2a994:	b2cd      	uxtb	r5, r1
   2a996:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   2a99a:	2c0f      	cmp	r4, #15
   2a99c:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   2a9a0:	d919      	bls.n	2a9d6 <memset+0x66>
   2a9a2:	f103 0210 	add.w	r2, r3, #16
   2a9a6:	4626      	mov	r6, r4
   2a9a8:	3e10      	subs	r6, #16
   2a9aa:	2e0f      	cmp	r6, #15
   2a9ac:	f842 5c10 	str.w	r5, [r2, #-16]
   2a9b0:	f842 5c0c 	str.w	r5, [r2, #-12]
   2a9b4:	f842 5c08 	str.w	r5, [r2, #-8]
   2a9b8:	f842 5c04 	str.w	r5, [r2, #-4]
   2a9bc:	f102 0210 	add.w	r2, r2, #16
   2a9c0:	d8f2      	bhi.n	2a9a8 <memset+0x38>
   2a9c2:	f1a4 0210 	sub.w	r2, r4, #16
   2a9c6:	f022 020f 	bic.w	r2, r2, #15
   2a9ca:	f004 040f 	and.w	r4, r4, #15
   2a9ce:	3210      	adds	r2, #16
   2a9d0:	2c03      	cmp	r4, #3
   2a9d2:	4413      	add	r3, r2
   2a9d4:	d90d      	bls.n	2a9f2 <memset+0x82>
   2a9d6:	461e      	mov	r6, r3
   2a9d8:	4622      	mov	r2, r4
   2a9da:	3a04      	subs	r2, #4
   2a9dc:	2a03      	cmp	r2, #3
   2a9de:	f846 5b04 	str.w	r5, [r6], #4
   2a9e2:	d8fa      	bhi.n	2a9da <memset+0x6a>
   2a9e4:	1f22      	subs	r2, r4, #4
   2a9e6:	f022 0203 	bic.w	r2, r2, #3
   2a9ea:	3204      	adds	r2, #4
   2a9ec:	4413      	add	r3, r2
   2a9ee:	f004 0403 	and.w	r4, r4, #3
   2a9f2:	b12c      	cbz	r4, 2aa00 <memset+0x90>
   2a9f4:	b2c9      	uxtb	r1, r1
   2a9f6:	441c      	add	r4, r3
   2a9f8:	f803 1b01 	strb.w	r1, [r3], #1
   2a9fc:	429c      	cmp	r4, r3
   2a9fe:	d1fb      	bne.n	2a9f8 <memset+0x88>
   2aa00:	bc70      	pop	{r4, r5, r6}
   2aa02:	4770      	bx	lr
   2aa04:	4614      	mov	r4, r2
   2aa06:	4603      	mov	r3, r0
   2aa08:	e7c2      	b.n	2a990 <memset+0x20>
   2aa0a:	bf00      	nop

0002aa0c <__malloc_lock>:
   2aa0c:	4801      	ldr	r0, [pc, #4]	; (2aa14 <__malloc_lock+0x8>)
   2aa0e:	f003 b915 	b.w	2dc3c <__retarget_lock_acquire_recursive>
   2aa12:	bf00      	nop
   2aa14:	20002d00 	.word	0x20002d00

0002aa18 <__malloc_unlock>:
   2aa18:	4801      	ldr	r0, [pc, #4]	; (2aa20 <__malloc_unlock+0x8>)
   2aa1a:	f003 b911 	b.w	2dc40 <__retarget_lock_release_recursive>
   2aa1e:	bf00      	nop
   2aa20:	20002d00 	.word	0x20002d00

0002aa24 <rand>:
   2aa24:	b410      	push	{r4}
   2aa26:	4b0c      	ldr	r3, [pc, #48]	; (2aa58 <rand+0x34>)
   2aa28:	480c      	ldr	r0, [pc, #48]	; (2aa5c <rand+0x38>)
   2aa2a:	6819      	ldr	r1, [r3, #0]
   2aa2c:	4c0c      	ldr	r4, [pc, #48]	; (2aa60 <rand+0x3c>)
   2aa2e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   2aa32:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   2aa36:	fb00 f002 	mul.w	r0, r0, r2
   2aa3a:	fb04 0003 	mla	r0, r4, r3, r0
   2aa3e:	fba2 2304 	umull	r2, r3, r2, r4
   2aa42:	4403      	add	r3, r0
   2aa44:	3201      	adds	r2, #1
   2aa46:	f143 0300 	adc.w	r3, r3, #0
   2aa4a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   2aa4e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   2aa52:	bc10      	pop	{r4}
   2aa54:	4770      	bx	lr
   2aa56:	bf00      	nop
   2aa58:	2000c688 	.word	0x2000c688
   2aa5c:	5851f42d 	.word	0x5851f42d
   2aa60:	4c957f2d 	.word	0x4c957f2d

0002aa64 <_sbrk_r>:
   2aa64:	b538      	push	{r3, r4, r5, lr}
   2aa66:	4c07      	ldr	r4, [pc, #28]	; (2aa84 <_sbrk_r+0x20>)
   2aa68:	2300      	movs	r3, #0
   2aa6a:	4605      	mov	r5, r0
   2aa6c:	4608      	mov	r0, r1
   2aa6e:	6023      	str	r3, [r4, #0]
   2aa70:	f7d7 f80c 	bl	1a8c <_sbrk>
   2aa74:	1c43      	adds	r3, r0, #1
   2aa76:	d000      	beq.n	2aa7a <_sbrk_r+0x16>
   2aa78:	bd38      	pop	{r3, r4, r5, pc}
   2aa7a:	6823      	ldr	r3, [r4, #0]
   2aa7c:	2b00      	cmp	r3, #0
   2aa7e:	d0fb      	beq.n	2aa78 <_sbrk_r+0x14>
   2aa80:	602b      	str	r3, [r5, #0]
   2aa82:	bd38      	pop	{r3, r4, r5, pc}
   2aa84:	20002d14 	.word	0x20002d14

0002aa88 <snprintf>:
   2aa88:	b40c      	push	{r2, r3}
   2aa8a:	b5f0      	push	{r4, r5, r6, r7, lr}
   2aa8c:	4b23      	ldr	r3, [pc, #140]	; (2ab1c <snprintf+0x94>)
   2aa8e:	1e0c      	subs	r4, r1, #0
   2aa90:	b09d      	sub	sp, #116	; 0x74
   2aa92:	681d      	ldr	r5, [r3, #0]
   2aa94:	db3d      	blt.n	2ab12 <snprintf+0x8a>
   2aa96:	f44f 7302 	mov.w	r3, #520	; 0x208
   2aa9a:	9002      	str	r0, [sp, #8]
   2aa9c:	9006      	str	r0, [sp, #24]
   2aa9e:	f8ad 3014 	strh.w	r3, [sp, #20]
   2aaa2:	ae23      	add	r6, sp, #140	; 0x8c
   2aaa4:	d017      	beq.n	2aad6 <snprintf+0x4e>
   2aaa6:	3c01      	subs	r4, #1
   2aaa8:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aaaa:	9404      	str	r4, [sp, #16]
   2aaac:	4633      	mov	r3, r6
   2aaae:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aab2:	a902      	add	r1, sp, #8
   2aab4:	4628      	mov	r0, r5
   2aab6:	9407      	str	r4, [sp, #28]
   2aab8:	9601      	str	r6, [sp, #4]
   2aaba:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aabe:	f000 fd7f 	bl	2b5c0 <_svfprintf_r>
   2aac2:	1c42      	adds	r2, r0, #1
   2aac4:	db1b      	blt.n	2aafe <snprintf+0x76>
   2aac6:	9b02      	ldr	r3, [sp, #8]
   2aac8:	2200      	movs	r2, #0
   2aaca:	701a      	strb	r2, [r3, #0]
   2aacc:	b01d      	add	sp, #116	; 0x74
   2aace:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aad2:	b002      	add	sp, #8
   2aad4:	4770      	bx	lr
   2aad6:	4633      	mov	r3, r6
   2aad8:	f64f 77ff 	movw	r7, #65535	; 0xffff
   2aadc:	9a22      	ldr	r2, [sp, #136]	; 0x88
   2aade:	9404      	str	r4, [sp, #16]
   2aae0:	a902      	add	r1, sp, #8
   2aae2:	4628      	mov	r0, r5
   2aae4:	9407      	str	r4, [sp, #28]
   2aae6:	9601      	str	r6, [sp, #4]
   2aae8:	f8ad 7016 	strh.w	r7, [sp, #22]
   2aaec:	f000 fd68 	bl	2b5c0 <_svfprintf_r>
   2aaf0:	1c43      	adds	r3, r0, #1
   2aaf2:	db07      	blt.n	2ab04 <snprintf+0x7c>
   2aaf4:	b01d      	add	sp, #116	; 0x74
   2aaf6:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2aafa:	b002      	add	sp, #8
   2aafc:	4770      	bx	lr
   2aafe:	238b      	movs	r3, #139	; 0x8b
   2ab00:	602b      	str	r3, [r5, #0]
   2ab02:	e7e0      	b.n	2aac6 <snprintf+0x3e>
   2ab04:	238b      	movs	r3, #139	; 0x8b
   2ab06:	602b      	str	r3, [r5, #0]
   2ab08:	b01d      	add	sp, #116	; 0x74
   2ab0a:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   2ab0e:	b002      	add	sp, #8
   2ab10:	4770      	bx	lr
   2ab12:	238b      	movs	r3, #139	; 0x8b
   2ab14:	602b      	str	r3, [r5, #0]
   2ab16:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ab1a:	e7eb      	b.n	2aaf4 <snprintf+0x6c>
   2ab1c:	2000c688 	.word	0x2000c688

0002ab20 <strcat>:
   2ab20:	0783      	lsls	r3, r0, #30
   2ab22:	b510      	push	{r4, lr}
   2ab24:	4604      	mov	r4, r0
   2ab26:	d110      	bne.n	2ab4a <strcat+0x2a>
   2ab28:	6802      	ldr	r2, [r0, #0]
   2ab2a:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2ab2e:	ea23 0302 	bic.w	r3, r3, r2
   2ab32:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab36:	d108      	bne.n	2ab4a <strcat+0x2a>
   2ab38:	f850 2f04 	ldr.w	r2, [r0, #4]!
   2ab3c:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   2ab40:	ea23 0302 	bic.w	r3, r3, r2
   2ab44:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   2ab48:	d0f6      	beq.n	2ab38 <strcat+0x18>
   2ab4a:	7803      	ldrb	r3, [r0, #0]
   2ab4c:	b11b      	cbz	r3, 2ab56 <strcat+0x36>
   2ab4e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ab52:	2b00      	cmp	r3, #0
   2ab54:	d1fb      	bne.n	2ab4e <strcat+0x2e>
   2ab56:	f000 f877 	bl	2ac48 <strcpy>
   2ab5a:	4620      	mov	r0, r4
   2ab5c:	bd10      	pop	{r4, pc}
   2ab5e:	bf00      	nop

0002ab60 <strchr>:
   2ab60:	b2c9      	uxtb	r1, r1
   2ab62:	2900      	cmp	r1, #0
   2ab64:	d041      	beq.n	2abea <strchr+0x8a>
   2ab66:	0782      	lsls	r2, r0, #30
   2ab68:	b4f0      	push	{r4, r5, r6, r7}
   2ab6a:	d067      	beq.n	2ac3c <strchr+0xdc>
   2ab6c:	7803      	ldrb	r3, [r0, #0]
   2ab6e:	2b00      	cmp	r3, #0
   2ab70:	d068      	beq.n	2ac44 <strchr+0xe4>
   2ab72:	4299      	cmp	r1, r3
   2ab74:	d037      	beq.n	2abe6 <strchr+0x86>
   2ab76:	1c43      	adds	r3, r0, #1
   2ab78:	e004      	b.n	2ab84 <strchr+0x24>
   2ab7a:	f813 0b01 	ldrb.w	r0, [r3], #1
   2ab7e:	b390      	cbz	r0, 2abe6 <strchr+0x86>
   2ab80:	4281      	cmp	r1, r0
   2ab82:	d02f      	beq.n	2abe4 <strchr+0x84>
   2ab84:	079a      	lsls	r2, r3, #30
   2ab86:	461c      	mov	r4, r3
   2ab88:	d1f7      	bne.n	2ab7a <strchr+0x1a>
   2ab8a:	6825      	ldr	r5, [r4, #0]
   2ab8c:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   2ab90:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   2ab94:	ea83 0605 	eor.w	r6, r3, r5
   2ab98:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   2ab9c:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   2aba0:	ea20 0006 	bic.w	r0, r0, r6
   2aba4:	ea22 0205 	bic.w	r2, r2, r5
   2aba8:	4302      	orrs	r2, r0
   2abaa:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abae:	d111      	bne.n	2abd4 <strchr+0x74>
   2abb0:	4620      	mov	r0, r4
   2abb2:	f850 6f04 	ldr.w	r6, [r0, #4]!
   2abb6:	ea83 0706 	eor.w	r7, r3, r6
   2abba:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   2abbe:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   2abc2:	ea25 0507 	bic.w	r5, r5, r7
   2abc6:	ea22 0206 	bic.w	r2, r2, r6
   2abca:	432a      	orrs	r2, r5
   2abcc:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2abd0:	d0ef      	beq.n	2abb2 <strchr+0x52>
   2abd2:	4604      	mov	r4, r0
   2abd4:	7820      	ldrb	r0, [r4, #0]
   2abd6:	b918      	cbnz	r0, 2abe0 <strchr+0x80>
   2abd8:	e005      	b.n	2abe6 <strchr+0x86>
   2abda:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   2abde:	b110      	cbz	r0, 2abe6 <strchr+0x86>
   2abe0:	4281      	cmp	r1, r0
   2abe2:	d1fa      	bne.n	2abda <strchr+0x7a>
   2abe4:	4620      	mov	r0, r4
   2abe6:	bcf0      	pop	{r4, r5, r6, r7}
   2abe8:	4770      	bx	lr
   2abea:	0783      	lsls	r3, r0, #30
   2abec:	d024      	beq.n	2ac38 <strchr+0xd8>
   2abee:	7803      	ldrb	r3, [r0, #0]
   2abf0:	2b00      	cmp	r3, #0
   2abf2:	d0f9      	beq.n	2abe8 <strchr+0x88>
   2abf4:	1c43      	adds	r3, r0, #1
   2abf6:	e003      	b.n	2ac00 <strchr+0xa0>
   2abf8:	7802      	ldrb	r2, [r0, #0]
   2abfa:	3301      	adds	r3, #1
   2abfc:	2a00      	cmp	r2, #0
   2abfe:	d0f3      	beq.n	2abe8 <strchr+0x88>
   2ac00:	0799      	lsls	r1, r3, #30
   2ac02:	4618      	mov	r0, r3
   2ac04:	d1f8      	bne.n	2abf8 <strchr+0x98>
   2ac06:	6819      	ldr	r1, [r3, #0]
   2ac08:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ac0c:	ea22 0201 	bic.w	r2, r2, r1
   2ac10:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac14:	d108      	bne.n	2ac28 <strchr+0xc8>
   2ac16:	f853 1f04 	ldr.w	r1, [r3, #4]!
   2ac1a:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   2ac1e:	ea22 0201 	bic.w	r2, r2, r1
   2ac22:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac26:	d0f6      	beq.n	2ac16 <strchr+0xb6>
   2ac28:	781a      	ldrb	r2, [r3, #0]
   2ac2a:	4618      	mov	r0, r3
   2ac2c:	b142      	cbz	r2, 2ac40 <strchr+0xe0>
   2ac2e:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   2ac32:	2b00      	cmp	r3, #0
   2ac34:	d1fb      	bne.n	2ac2e <strchr+0xce>
   2ac36:	4770      	bx	lr
   2ac38:	4603      	mov	r3, r0
   2ac3a:	e7e4      	b.n	2ac06 <strchr+0xa6>
   2ac3c:	4604      	mov	r4, r0
   2ac3e:	e7a4      	b.n	2ab8a <strchr+0x2a>
   2ac40:	4618      	mov	r0, r3
   2ac42:	4770      	bx	lr
   2ac44:	4618      	mov	r0, r3
   2ac46:	e7ce      	b.n	2abe6 <strchr+0x86>

0002ac48 <strcpy>:
   2ac48:	ea80 0201 	eor.w	r2, r0, r1
   2ac4c:	4684      	mov	ip, r0
   2ac4e:	f012 0f03 	tst.w	r2, #3
   2ac52:	d14f      	bne.n	2acf4 <strcpy+0xac>
   2ac54:	f011 0f03 	tst.w	r1, #3
   2ac58:	d132      	bne.n	2acc0 <strcpy+0x78>
   2ac5a:	f84d 4d04 	str.w	r4, [sp, #-4]!
   2ac5e:	f011 0f04 	tst.w	r1, #4
   2ac62:	f851 3b04 	ldr.w	r3, [r1], #4
   2ac66:	d00b      	beq.n	2ac80 <strcpy+0x38>
   2ac68:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac6c:	439a      	bics	r2, r3
   2ac6e:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac72:	bf04      	itt	eq
   2ac74:	f84c 3b04 	streq.w	r3, [ip], #4
   2ac78:	f851 3b04 	ldreq.w	r3, [r1], #4
   2ac7c:	d116      	bne.n	2acac <strcpy+0x64>
   2ac7e:	bf00      	nop
   2ac80:	f851 4b04 	ldr.w	r4, [r1], #4
   2ac84:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   2ac88:	439a      	bics	r2, r3
   2ac8a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac8e:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   2ac92:	d10b      	bne.n	2acac <strcpy+0x64>
   2ac94:	f84c 3b04 	str.w	r3, [ip], #4
   2ac98:	43a2      	bics	r2, r4
   2ac9a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   2ac9e:	bf04      	itt	eq
   2aca0:	f851 3b04 	ldreq.w	r3, [r1], #4
   2aca4:	f84c 4b04 	streq.w	r4, [ip], #4
   2aca8:	d0ea      	beq.n	2ac80 <strcpy+0x38>
   2acaa:	4623      	mov	r3, r4
   2acac:	f80c 3b01 	strb.w	r3, [ip], #1
   2acb0:	f013 0fff 	tst.w	r3, #255	; 0xff
   2acb4:	ea4f 2333 	mov.w	r3, r3, ror #8
   2acb8:	d1f8      	bne.n	2acac <strcpy+0x64>
   2acba:	f85d 4b04 	ldr.w	r4, [sp], #4
   2acbe:	4770      	bx	lr
   2acc0:	f011 0f01 	tst.w	r1, #1
   2acc4:	d006      	beq.n	2acd4 <strcpy+0x8c>
   2acc6:	f811 2b01 	ldrb.w	r2, [r1], #1
   2acca:	f80c 2b01 	strb.w	r2, [ip], #1
   2acce:	2a00      	cmp	r2, #0
   2acd0:	bf08      	it	eq
   2acd2:	4770      	bxeq	lr
   2acd4:	f011 0f02 	tst.w	r1, #2
   2acd8:	d0bf      	beq.n	2ac5a <strcpy+0x12>
   2acda:	f831 2b02 	ldrh.w	r2, [r1], #2
   2acde:	f012 0fff 	tst.w	r2, #255	; 0xff
   2ace2:	bf16      	itet	ne
   2ace4:	f82c 2b02 	strhne.w	r2, [ip], #2
   2ace8:	f88c 2000 	strbeq.w	r2, [ip]
   2acec:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   2acf0:	d1b3      	bne.n	2ac5a <strcpy+0x12>
   2acf2:	4770      	bx	lr
   2acf4:	f811 2b01 	ldrb.w	r2, [r1], #1
   2acf8:	f80c 2b01 	strb.w	r2, [ip], #1
   2acfc:	2a00      	cmp	r2, #0
   2acfe:	d1f9      	bne.n	2acf4 <strcpy+0xac>
   2ad00:	4770      	bx	lr
   2ad02:	bf00      	nop

0002ad04 <strncmp>:
   2ad04:	2a00      	cmp	r2, #0
   2ad06:	d041      	beq.n	2ad8c <strncmp+0x88>
   2ad08:	ea40 0301 	orr.w	r3, r0, r1
   2ad0c:	f013 0303 	ands.w	r3, r3, #3
   2ad10:	b4f0      	push	{r4, r5, r6, r7}
   2ad12:	d125      	bne.n	2ad60 <strncmp+0x5c>
   2ad14:	2a03      	cmp	r2, #3
   2ad16:	d923      	bls.n	2ad60 <strncmp+0x5c>
   2ad18:	6804      	ldr	r4, [r0, #0]
   2ad1a:	680d      	ldr	r5, [r1, #0]
   2ad1c:	42ac      	cmp	r4, r5
   2ad1e:	d11f      	bne.n	2ad60 <strncmp+0x5c>
   2ad20:	3a04      	subs	r2, #4
   2ad22:	d038      	beq.n	2ad96 <strncmp+0x92>
   2ad24:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   2ad28:	ea25 0404 	bic.w	r4, r5, r4
   2ad2c:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ad30:	d12e      	bne.n	2ad90 <strncmp+0x8c>
   2ad32:	3004      	adds	r0, #4
   2ad34:	3104      	adds	r1, #4
   2ad36:	e00f      	b.n	2ad58 <strncmp+0x54>
   2ad38:	f850 3b04 	ldr.w	r3, [r0], #4
   2ad3c:	680e      	ldr	r6, [r1, #0]
   2ad3e:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   2ad42:	42b3      	cmp	r3, r6
   2ad44:	ea24 0403 	bic.w	r4, r4, r3
   2ad48:	f101 0104 	add.w	r1, r1, #4
   2ad4c:	d126      	bne.n	2ad9c <strncmp+0x98>
   2ad4e:	3a04      	subs	r2, #4
   2ad50:	d021      	beq.n	2ad96 <strncmp+0x92>
   2ad52:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2ad56:	d11b      	bne.n	2ad90 <strncmp+0x8c>
   2ad58:	2a03      	cmp	r2, #3
   2ad5a:	4607      	mov	r7, r0
   2ad5c:	460d      	mov	r5, r1
   2ad5e:	d8eb      	bhi.n	2ad38 <strncmp+0x34>
   2ad60:	7805      	ldrb	r5, [r0, #0]
   2ad62:	780c      	ldrb	r4, [r1, #0]
   2ad64:	42ac      	cmp	r4, r5
   2ad66:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   2ad6a:	d11a      	bne.n	2ada2 <strncmp+0x9e>
   2ad6c:	b183      	cbz	r3, 2ad90 <strncmp+0x8c>
   2ad6e:	b914      	cbnz	r4, 2ad76 <strncmp+0x72>
   2ad70:	e00e      	b.n	2ad90 <strncmp+0x8c>
   2ad72:	b16b      	cbz	r3, 2ad90 <strncmp+0x8c>
   2ad74:	b17a      	cbz	r2, 2ad96 <strncmp+0x92>
   2ad76:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   2ad7a:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   2ad7e:	42a2      	cmp	r2, r4
   2ad80:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   2ad84:	d0f5      	beq.n	2ad72 <strncmp+0x6e>
   2ad86:	1b10      	subs	r0, r2, r4
   2ad88:	bcf0      	pop	{r4, r5, r6, r7}
   2ad8a:	4770      	bx	lr
   2ad8c:	4610      	mov	r0, r2
   2ad8e:	4770      	bx	lr
   2ad90:	2000      	movs	r0, #0
   2ad92:	bcf0      	pop	{r4, r5, r6, r7}
   2ad94:	4770      	bx	lr
   2ad96:	4610      	mov	r0, r2
   2ad98:	bcf0      	pop	{r4, r5, r6, r7}
   2ad9a:	4770      	bx	lr
   2ad9c:	4629      	mov	r1, r5
   2ad9e:	4638      	mov	r0, r7
   2ada0:	e7de      	b.n	2ad60 <strncmp+0x5c>
   2ada2:	462a      	mov	r2, r5
   2ada4:	e7ef      	b.n	2ad86 <strncmp+0x82>
   2ada6:	bf00      	nop

0002ada8 <strncpy>:
   2ada8:	ea40 0301 	orr.w	r3, r0, r1
   2adac:	f013 0f03 	tst.w	r3, #3
   2adb0:	b470      	push	{r4, r5, r6}
   2adb2:	4603      	mov	r3, r0
   2adb4:	d024      	beq.n	2ae00 <strncpy+0x58>
   2adb6:	b1a2      	cbz	r2, 2ade2 <strncpy+0x3a>
   2adb8:	780c      	ldrb	r4, [r1, #0]
   2adba:	701c      	strb	r4, [r3, #0]
   2adbc:	3a01      	subs	r2, #1
   2adbe:	3301      	adds	r3, #1
   2adc0:	3101      	adds	r1, #1
   2adc2:	b13c      	cbz	r4, 2add4 <strncpy+0x2c>
   2adc4:	b16a      	cbz	r2, 2ade2 <strncpy+0x3a>
   2adc6:	f811 4b01 	ldrb.w	r4, [r1], #1
   2adca:	f803 4b01 	strb.w	r4, [r3], #1
   2adce:	3a01      	subs	r2, #1
   2add0:	2c00      	cmp	r4, #0
   2add2:	d1f7      	bne.n	2adc4 <strncpy+0x1c>
   2add4:	b12a      	cbz	r2, 2ade2 <strncpy+0x3a>
   2add6:	441a      	add	r2, r3
   2add8:	2100      	movs	r1, #0
   2adda:	f803 1b01 	strb.w	r1, [r3], #1
   2adde:	429a      	cmp	r2, r3
   2ade0:	d1fb      	bne.n	2adda <strncpy+0x32>
   2ade2:	bc70      	pop	{r4, r5, r6}
   2ade4:	4770      	bx	lr
   2ade6:	460e      	mov	r6, r1
   2ade8:	f851 5b04 	ldr.w	r5, [r1], #4
   2adec:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   2adf0:	ea24 0405 	bic.w	r4, r4, r5
   2adf4:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   2adf8:	d105      	bne.n	2ae06 <strncpy+0x5e>
   2adfa:	f843 5b04 	str.w	r5, [r3], #4
   2adfe:	3a04      	subs	r2, #4
   2ae00:	2a03      	cmp	r2, #3
   2ae02:	d8f0      	bhi.n	2ade6 <strncpy+0x3e>
   2ae04:	e7d7      	b.n	2adb6 <strncpy+0xe>
   2ae06:	4631      	mov	r1, r6
   2ae08:	e7d6      	b.n	2adb8 <strncpy+0x10>
   2ae0a:	bf00      	nop

0002ae0c <strrchr>:
   2ae0c:	b171      	cbz	r1, 2ae2c <strrchr+0x20>
   2ae0e:	b538      	push	{r3, r4, r5, lr}
   2ae10:	4603      	mov	r3, r0
   2ae12:	460c      	mov	r4, r1
   2ae14:	2500      	movs	r5, #0
   2ae16:	e001      	b.n	2ae1c <strrchr+0x10>
   2ae18:	1c43      	adds	r3, r0, #1
   2ae1a:	4605      	mov	r5, r0
   2ae1c:	4618      	mov	r0, r3
   2ae1e:	4621      	mov	r1, r4
   2ae20:	f7ff fe9e 	bl	2ab60 <strchr>
   2ae24:	2800      	cmp	r0, #0
   2ae26:	d1f7      	bne.n	2ae18 <strrchr+0xc>
   2ae28:	4628      	mov	r0, r5
   2ae2a:	bd38      	pop	{r3, r4, r5, pc}
   2ae2c:	f7ff be98 	b.w	2ab60 <strchr>

0002ae30 <critical_factorization>:
   2ae30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2ae34:	f04f 0e01 	mov.w	lr, #1
   2ae38:	4674      	mov	r4, lr
   2ae3a:	2500      	movs	r5, #0
   2ae3c:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   2ae40:	192b      	adds	r3, r5, r4
   2ae42:	428b      	cmp	r3, r1
   2ae44:	eb00 0706 	add.w	r7, r0, r6
   2ae48:	d20d      	bcs.n	2ae66 <critical_factorization+0x36>
   2ae4a:	5d3f      	ldrb	r7, [r7, r4]
   2ae4c:	f810 c003 	ldrb.w	ip, [r0, r3]
   2ae50:	45bc      	cmp	ip, r7
   2ae52:	d22d      	bcs.n	2aeb0 <critical_factorization+0x80>
   2ae54:	461d      	mov	r5, r3
   2ae56:	2401      	movs	r4, #1
   2ae58:	eba3 0e06 	sub.w	lr, r3, r6
   2ae5c:	192b      	adds	r3, r5, r4
   2ae5e:	428b      	cmp	r3, r1
   2ae60:	eb00 0706 	add.w	r7, r0, r6
   2ae64:	d3f1      	bcc.n	2ae4a <critical_factorization+0x1a>
   2ae66:	f04f 0801 	mov.w	r8, #1
   2ae6a:	f8c2 e000 	str.w	lr, [r2]
   2ae6e:	4644      	mov	r4, r8
   2ae70:	2500      	movs	r5, #0
   2ae72:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   2ae76:	192b      	adds	r3, r5, r4
   2ae78:	4299      	cmp	r1, r3
   2ae7a:	eb00 0e07 	add.w	lr, r0, r7
   2ae7e:	d90e      	bls.n	2ae9e <critical_factorization+0x6e>
   2ae80:	f81e e004 	ldrb.w	lr, [lr, r4]
   2ae84:	f810 c003 	ldrb.w	ip, [r0, r3]
   2ae88:	45f4      	cmp	ip, lr
   2ae8a:	d918      	bls.n	2aebe <critical_factorization+0x8e>
   2ae8c:	461d      	mov	r5, r3
   2ae8e:	2401      	movs	r4, #1
   2ae90:	eba3 0807 	sub.w	r8, r3, r7
   2ae94:	192b      	adds	r3, r5, r4
   2ae96:	4299      	cmp	r1, r3
   2ae98:	eb00 0e07 	add.w	lr, r0, r7
   2ae9c:	d8f0      	bhi.n	2ae80 <critical_factorization+0x50>
   2ae9e:	3701      	adds	r7, #1
   2aea0:	1c70      	adds	r0, r6, #1
   2aea2:	4287      	cmp	r7, r0
   2aea4:	bf24      	itt	cs
   2aea6:	f8c2 8000 	strcs.w	r8, [r2]
   2aeaa:	4638      	movcs	r0, r7
   2aeac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2aeb0:	d00c      	beq.n	2aecc <critical_factorization+0x9c>
   2aeb2:	f04f 0e01 	mov.w	lr, #1
   2aeb6:	462e      	mov	r6, r5
   2aeb8:	4674      	mov	r4, lr
   2aeba:	4475      	add	r5, lr
   2aebc:	e7c0      	b.n	2ae40 <critical_factorization+0x10>
   2aebe:	d00b      	beq.n	2aed8 <critical_factorization+0xa8>
   2aec0:	f04f 0801 	mov.w	r8, #1
   2aec4:	462f      	mov	r7, r5
   2aec6:	4644      	mov	r4, r8
   2aec8:	4445      	add	r5, r8
   2aeca:	e7d4      	b.n	2ae76 <critical_factorization+0x46>
   2aecc:	4574      	cmp	r4, lr
   2aece:	bf12      	itee	ne
   2aed0:	3401      	addne	r4, #1
   2aed2:	461d      	moveq	r5, r3
   2aed4:	2401      	moveq	r4, #1
   2aed6:	e7b3      	b.n	2ae40 <critical_factorization+0x10>
   2aed8:	4544      	cmp	r4, r8
   2aeda:	bf12      	itee	ne
   2aedc:	3401      	addne	r4, #1
   2aede:	461d      	moveq	r5, r3
   2aee0:	2401      	moveq	r4, #1
   2aee2:	e7c8      	b.n	2ae76 <critical_factorization+0x46>

0002aee4 <two_way_long_needle>:
   2aee4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2aee8:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   2aeec:	4616      	mov	r6, r2
   2aeee:	4605      	mov	r5, r0
   2aef0:	468b      	mov	fp, r1
   2aef2:	4610      	mov	r0, r2
   2aef4:	4619      	mov	r1, r3
   2aef6:	aa03      	add	r2, sp, #12
   2aef8:	461c      	mov	r4, r3
   2aefa:	f7ff ff99 	bl	2ae30 <critical_factorization>
   2aefe:	ab03      	add	r3, sp, #12
   2af00:	4681      	mov	r9, r0
   2af02:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   2af06:	f843 4f04 	str.w	r4, [r3, #4]!
   2af0a:	4293      	cmp	r3, r2
   2af0c:	d1fb      	bne.n	2af06 <two_way_long_needle+0x22>
   2af0e:	b14c      	cbz	r4, 2af24 <two_way_long_needle+0x40>
   2af10:	1e63      	subs	r3, r4, #1
   2af12:	1e72      	subs	r2, r6, #1
   2af14:	a804      	add	r0, sp, #16
   2af16:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2af1a:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   2af1e:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   2af22:	d2f8      	bcs.n	2af16 <two_way_long_needle+0x32>
   2af24:	9903      	ldr	r1, [sp, #12]
   2af26:	464a      	mov	r2, r9
   2af28:	4431      	add	r1, r6
   2af2a:	4630      	mov	r0, r6
   2af2c:	f7ff fc8c 	bl	2a848 <memcmp>
   2af30:	2800      	cmp	r0, #0
   2af32:	d16f      	bne.n	2b014 <two_way_long_needle+0x130>
   2af34:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   2af38:	9300      	str	r3, [sp, #0]
   2af3a:	18f3      	adds	r3, r6, r3
   2af3c:	4682      	mov	sl, r0
   2af3e:	9301      	str	r3, [sp, #4]
   2af40:	4623      	mov	r3, r4
   2af42:	4680      	mov	r8, r0
   2af44:	4654      	mov	r4, sl
   2af46:	4658      	mov	r0, fp
   2af48:	469a      	mov	sl, r3
   2af4a:	eb08 070a 	add.w	r7, r8, sl
   2af4e:	1a3a      	subs	r2, r7, r0
   2af50:	2100      	movs	r1, #0
   2af52:	4428      	add	r0, r5
   2af54:	f7d5 f964 	bl	220 <memchr>
   2af58:	2800      	cmp	r0, #0
   2af5a:	d156      	bne.n	2b00a <two_way_long_needle+0x126>
   2af5c:	2f00      	cmp	r7, #0
   2af5e:	d054      	beq.n	2b00a <two_way_long_needle+0x126>
   2af60:	19eb      	adds	r3, r5, r7
   2af62:	aa04      	add	r2, sp, #16
   2af64:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2af68:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2af6c:	b14b      	cbz	r3, 2af82 <two_way_long_needle+0x9e>
   2af6e:	b124      	cbz	r4, 2af7a <two_way_long_needle+0x96>
   2af70:	9a03      	ldr	r2, [sp, #12]
   2af72:	4293      	cmp	r3, r2
   2af74:	d201      	bcs.n	2af7a <two_way_long_needle+0x96>
   2af76:	ebaa 0302 	sub.w	r3, sl, r2
   2af7a:	4498      	add	r8, r3
   2af7c:	2400      	movs	r4, #0
   2af7e:	4638      	mov	r0, r7
   2af80:	e7e3      	b.n	2af4a <two_way_long_needle+0x66>
   2af82:	454c      	cmp	r4, r9
   2af84:	4623      	mov	r3, r4
   2af86:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   2af8a:	bf38      	it	cc
   2af8c:	464b      	movcc	r3, r9
   2af8e:	4573      	cmp	r3, lr
   2af90:	d213      	bcs.n	2afba <two_way_long_needle+0xd6>
   2af92:	eb08 0203 	add.w	r2, r8, r3
   2af96:	f816 c003 	ldrb.w	ip, [r6, r3]
   2af9a:	5ca8      	ldrb	r0, [r5, r2]
   2af9c:	4584      	cmp	ip, r0
   2af9e:	442a      	add	r2, r5
   2afa0:	eb06 0103 	add.w	r1, r6, r3
   2afa4:	d006      	beq.n	2afb4 <two_way_long_needle+0xd0>
   2afa6:	e02c      	b.n	2b002 <two_way_long_needle+0x11e>
   2afa8:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   2afac:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2afb0:	4584      	cmp	ip, r0
   2afb2:	d126      	bne.n	2b002 <two_way_long_needle+0x11e>
   2afb4:	3301      	adds	r3, #1
   2afb6:	4573      	cmp	r3, lr
   2afb8:	d3f6      	bcc.n	2afa8 <two_way_long_needle+0xc4>
   2afba:	454c      	cmp	r4, r9
   2afbc:	9900      	ldr	r1, [sp, #0]
   2afbe:	f080 8089 	bcs.w	2b0d4 <two_way_long_needle+0x1f0>
   2afc2:	9b00      	ldr	r3, [sp, #0]
   2afc4:	eb08 0203 	add.w	r2, r8, r3
   2afc8:	9b01      	ldr	r3, [sp, #4]
   2afca:	5ca8      	ldrb	r0, [r5, r2]
   2afcc:	781b      	ldrb	r3, [r3, #0]
   2afce:	4298      	cmp	r0, r3
   2afd0:	442a      	add	r2, r5
   2afd2:	d17f      	bne.n	2b0d4 <two_way_long_needle+0x1f0>
   2afd4:	9801      	ldr	r0, [sp, #4]
   2afd6:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   2afda:	e006      	b.n	2afea <two_way_long_needle+0x106>
   2afdc:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2afe0:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2afe4:	45f4      	cmp	ip, lr
   2afe6:	d103      	bne.n	2aff0 <two_way_long_needle+0x10c>
   2afe8:	4619      	mov	r1, r3
   2afea:	1e4b      	subs	r3, r1, #1
   2afec:	459b      	cmp	fp, r3
   2afee:	d1f5      	bne.n	2afdc <two_way_long_needle+0xf8>
   2aff0:	3401      	adds	r4, #1
   2aff2:	428c      	cmp	r4, r1
   2aff4:	d870      	bhi.n	2b0d8 <two_way_long_needle+0x1f4>
   2aff6:	9c03      	ldr	r4, [sp, #12]
   2aff8:	4638      	mov	r0, r7
   2affa:	44a0      	add	r8, r4
   2affc:	ebaa 0404 	sub.w	r4, sl, r4
   2b000:	e7a3      	b.n	2af4a <two_way_long_needle+0x66>
   2b002:	f1c9 0201 	rsb	r2, r9, #1
   2b006:	4490      	add	r8, r2
   2b008:	e7b7      	b.n	2af7a <two_way_long_needle+0x96>
   2b00a:	2000      	movs	r0, #0
   2b00c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b014:	eba4 0309 	sub.w	r3, r4, r9
   2b018:	454b      	cmp	r3, r9
   2b01a:	bf38      	it	cc
   2b01c:	464b      	movcc	r3, r9
   2b01e:	3301      	adds	r3, #1
   2b020:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   2b024:	9303      	str	r3, [sp, #12]
   2b026:	eb06 0308 	add.w	r3, r6, r8
   2b02a:	4658      	mov	r0, fp
   2b02c:	f04f 0a00 	mov.w	sl, #0
   2b030:	46cb      	mov	fp, r9
   2b032:	4699      	mov	r9, r3
   2b034:	eb0a 0704 	add.w	r7, sl, r4
   2b038:	1a3a      	subs	r2, r7, r0
   2b03a:	2100      	movs	r1, #0
   2b03c:	4428      	add	r0, r5
   2b03e:	f7d5 f8ef 	bl	220 <memchr>
   2b042:	2800      	cmp	r0, #0
   2b044:	d1e1      	bne.n	2b00a <two_way_long_needle+0x126>
   2b046:	2f00      	cmp	r7, #0
   2b048:	d0df      	beq.n	2b00a <two_way_long_needle+0x126>
   2b04a:	19eb      	adds	r3, r5, r7
   2b04c:	aa04      	add	r2, sp, #16
   2b04e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   2b052:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2b056:	bba3      	cbnz	r3, 2b0c2 <two_way_long_needle+0x1de>
   2b058:	1e61      	subs	r1, r4, #1
   2b05a:	458b      	cmp	fp, r1
   2b05c:	d215      	bcs.n	2b08a <two_way_long_needle+0x1a6>
   2b05e:	eb0a 020b 	add.w	r2, sl, fp
   2b062:	f816 300b 	ldrb.w	r3, [r6, fp]
   2b066:	f815 e002 	ldrb.w	lr, [r5, r2]
   2b06a:	459e      	cmp	lr, r3
   2b06c:	442a      	add	r2, r5
   2b06e:	eb06 000b 	add.w	r0, r6, fp
   2b072:	465b      	mov	r3, fp
   2b074:	d006      	beq.n	2b084 <two_way_long_needle+0x1a0>
   2b076:	e027      	b.n	2b0c8 <two_way_long_needle+0x1e4>
   2b078:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   2b07c:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   2b080:	45f4      	cmp	ip, lr
   2b082:	d121      	bne.n	2b0c8 <two_way_long_needle+0x1e4>
   2b084:	3301      	adds	r3, #1
   2b086:	428b      	cmp	r3, r1
   2b088:	d3f6      	bcc.n	2b078 <two_way_long_needle+0x194>
   2b08a:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   2b08e:	d011      	beq.n	2b0b4 <two_way_long_needle+0x1d0>
   2b090:	eb0a 0208 	add.w	r2, sl, r8
   2b094:	f899 1000 	ldrb.w	r1, [r9]
   2b098:	5cab      	ldrb	r3, [r5, r2]
   2b09a:	4299      	cmp	r1, r3
   2b09c:	442a      	add	r2, r5
   2b09e:	d10f      	bne.n	2b0c0 <two_way_long_needle+0x1dc>
   2b0a0:	464b      	mov	r3, r9
   2b0a2:	e005      	b.n	2b0b0 <two_way_long_needle+0x1cc>
   2b0a4:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b0a8:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b0ac:	4288      	cmp	r0, r1
   2b0ae:	d107      	bne.n	2b0c0 <two_way_long_needle+0x1dc>
   2b0b0:	42b3      	cmp	r3, r6
   2b0b2:	d1f7      	bne.n	2b0a4 <two_way_long_needle+0x1c0>
   2b0b4:	eb05 000a 	add.w	r0, r5, sl
   2b0b8:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2b0bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b0c0:	9b03      	ldr	r3, [sp, #12]
   2b0c2:	449a      	add	sl, r3
   2b0c4:	4638      	mov	r0, r7
   2b0c6:	e7b5      	b.n	2b034 <two_way_long_needle+0x150>
   2b0c8:	f1cb 0201 	rsb	r2, fp, #1
   2b0cc:	4492      	add	sl, r2
   2b0ce:	449a      	add	sl, r3
   2b0d0:	4638      	mov	r0, r7
   2b0d2:	e7af      	b.n	2b034 <two_way_long_needle+0x150>
   2b0d4:	4649      	mov	r1, r9
   2b0d6:	e78b      	b.n	2aff0 <two_way_long_needle+0x10c>
   2b0d8:	eb05 0008 	add.w	r0, r5, r8
   2b0dc:	e796      	b.n	2b00c <two_way_long_needle+0x128>
   2b0de:	bf00      	nop

0002b0e0 <strstr>:
   2b0e0:	7802      	ldrb	r2, [r0, #0]
   2b0e2:	2a00      	cmp	r2, #0
   2b0e4:	f000 8101 	beq.w	2b2ea <strstr+0x20a>
   2b0e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b0ec:	f891 8000 	ldrb.w	r8, [r1]
   2b0f0:	b085      	sub	sp, #20
   2b0f2:	4644      	mov	r4, r8
   2b0f4:	f1b8 0f00 	cmp.w	r8, #0
   2b0f8:	d016      	beq.n	2b128 <strstr+0x48>
   2b0fa:	4686      	mov	lr, r0
   2b0fc:	f101 0c01 	add.w	ip, r1, #1
   2b100:	2701      	movs	r7, #1
   2b102:	e003      	b.n	2b10c <strstr+0x2c>
   2b104:	f813 4b01 	ldrb.w	r4, [r3], #1
   2b108:	b16c      	cbz	r4, 2b126 <strstr+0x46>
   2b10a:	469c      	mov	ip, r3
   2b10c:	42a2      	cmp	r2, r4
   2b10e:	bf14      	ite	ne
   2b110:	2700      	movne	r7, #0
   2b112:	f007 0701 	andeq.w	r7, r7, #1
   2b116:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2b11a:	4663      	mov	r3, ip
   2b11c:	2a00      	cmp	r2, #0
   2b11e:	d1f1      	bne.n	2b104 <strstr+0x24>
   2b120:	f89c 3000 	ldrb.w	r3, [ip]
   2b124:	b9fb      	cbnz	r3, 2b166 <strstr+0x86>
   2b126:	b117      	cbz	r7, 2b12e <strstr+0x4e>
   2b128:	b005      	add	sp, #20
   2b12a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b12e:	460e      	mov	r6, r1
   2b130:	4605      	mov	r5, r0
   2b132:	4641      	mov	r1, r8
   2b134:	3001      	adds	r0, #1
   2b136:	ebac 0406 	sub.w	r4, ip, r6
   2b13a:	f7ff fd11 	bl	2ab60 <strchr>
   2b13e:	4607      	mov	r7, r0
   2b140:	b188      	cbz	r0, 2b166 <strstr+0x86>
   2b142:	2c01      	cmp	r4, #1
   2b144:	d0f0      	beq.n	2b128 <strstr+0x48>
   2b146:	1928      	adds	r0, r5, r4
   2b148:	4287      	cmp	r7, r0
   2b14a:	bf94      	ite	ls
   2b14c:	1bc1      	subls	r1, r0, r7
   2b14e:	2101      	movhi	r1, #1
   2b150:	2c1f      	cmp	r4, #31
   2b152:	468b      	mov	fp, r1
   2b154:	d90b      	bls.n	2b16e <strstr+0x8e>
   2b156:	4623      	mov	r3, r4
   2b158:	4632      	mov	r2, r6
   2b15a:	4638      	mov	r0, r7
   2b15c:	f7ff fec2 	bl	2aee4 <two_way_long_needle>
   2b160:	b005      	add	sp, #20
   2b162:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b166:	2000      	movs	r0, #0
   2b168:	b005      	add	sp, #20
   2b16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b16e:	aa03      	add	r2, sp, #12
   2b170:	4621      	mov	r1, r4
   2b172:	4630      	mov	r0, r6
   2b174:	f7ff fe5c 	bl	2ae30 <critical_factorization>
   2b178:	9903      	ldr	r1, [sp, #12]
   2b17a:	4680      	mov	r8, r0
   2b17c:	4602      	mov	r2, r0
   2b17e:	4431      	add	r1, r6
   2b180:	4630      	mov	r0, r6
   2b182:	f7ff fb61 	bl	2a848 <memcmp>
   2b186:	2800      	cmp	r0, #0
   2b188:	d157      	bne.n	2b23a <strstr+0x15a>
   2b18a:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2b18e:	9300      	str	r3, [sp, #0]
   2b190:	18f3      	adds	r3, r6, r3
   2b192:	4681      	mov	r9, r0
   2b194:	4605      	mov	r5, r0
   2b196:	9301      	str	r3, [sp, #4]
   2b198:	4658      	mov	r0, fp
   2b19a:	46b2      	mov	sl, r6
   2b19c:	1966      	adds	r6, r4, r5
   2b19e:	1a32      	subs	r2, r6, r0
   2b1a0:	2100      	movs	r1, #0
   2b1a2:	4438      	add	r0, r7
   2b1a4:	f7d5 f83c 	bl	220 <memchr>
   2b1a8:	2800      	cmp	r0, #0
   2b1aa:	d1dc      	bne.n	2b166 <strstr+0x86>
   2b1ac:	2e00      	cmp	r6, #0
   2b1ae:	d0da      	beq.n	2b166 <strstr+0x86>
   2b1b0:	45c8      	cmp	r8, r9
   2b1b2:	4643      	mov	r3, r8
   2b1b4:	bf38      	it	cc
   2b1b6:	464b      	movcc	r3, r9
   2b1b8:	429c      	cmp	r4, r3
   2b1ba:	d912      	bls.n	2b1e2 <strstr+0x102>
   2b1bc:	195a      	adds	r2, r3, r5
   2b1be:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2b1c2:	5cb8      	ldrb	r0, [r7, r2]
   2b1c4:	4281      	cmp	r1, r0
   2b1c6:	443a      	add	r2, r7
   2b1c8:	eb0a 0e03 	add.w	lr, sl, r3
   2b1cc:	d006      	beq.n	2b1dc <strstr+0xfc>
   2b1ce:	e02c      	b.n	2b22a <strstr+0x14a>
   2b1d0:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2b1d4:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2b1d8:	4288      	cmp	r0, r1
   2b1da:	d126      	bne.n	2b22a <strstr+0x14a>
   2b1dc:	3301      	adds	r3, #1
   2b1de:	429c      	cmp	r4, r3
   2b1e0:	d1f6      	bne.n	2b1d0 <strstr+0xf0>
   2b1e2:	45c8      	cmp	r8, r9
   2b1e4:	9900      	ldr	r1, [sp, #0]
   2b1e6:	f240 8083 	bls.w	2b2f0 <strstr+0x210>
   2b1ea:	9b00      	ldr	r3, [sp, #0]
   2b1ec:	18ea      	adds	r2, r5, r3
   2b1ee:	9b01      	ldr	r3, [sp, #4]
   2b1f0:	5cb8      	ldrb	r0, [r7, r2]
   2b1f2:	781b      	ldrb	r3, [r3, #0]
   2b1f4:	4298      	cmp	r0, r3
   2b1f6:	443a      	add	r2, r7
   2b1f8:	d17a      	bne.n	2b2f0 <strstr+0x210>
   2b1fa:	9801      	ldr	r0, [sp, #4]
   2b1fc:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2b200:	e006      	b.n	2b210 <strstr+0x130>
   2b202:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2b206:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2b20a:	45f4      	cmp	ip, lr
   2b20c:	d103      	bne.n	2b216 <strstr+0x136>
   2b20e:	4619      	mov	r1, r3
   2b210:	1e4b      	subs	r3, r1, #1
   2b212:	455b      	cmp	r3, fp
   2b214:	d1f5      	bne.n	2b202 <strstr+0x122>
   2b216:	f109 0901 	add.w	r9, r9, #1
   2b21a:	4589      	cmp	r9, r1
   2b21c:	d857      	bhi.n	2b2ce <strstr+0x1ee>
   2b21e:	9b03      	ldr	r3, [sp, #12]
   2b220:	4630      	mov	r0, r6
   2b222:	441d      	add	r5, r3
   2b224:	eba4 0903 	sub.w	r9, r4, r3
   2b228:	e7b8      	b.n	2b19c <strstr+0xbc>
   2b22a:	f1c8 0201 	rsb	r2, r8, #1
   2b22e:	4415      	add	r5, r2
   2b230:	441d      	add	r5, r3
   2b232:	f04f 0900 	mov.w	r9, #0
   2b236:	4630      	mov	r0, r6
   2b238:	e7b0      	b.n	2b19c <strstr+0xbc>
   2b23a:	eba4 0308 	sub.w	r3, r4, r8
   2b23e:	4543      	cmp	r3, r8
   2b240:	bf38      	it	cc
   2b242:	4643      	movcc	r3, r8
   2b244:	3301      	adds	r3, #1
   2b246:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2b24a:	9303      	str	r3, [sp, #12]
   2b24c:	eb06 0309 	add.w	r3, r6, r9
   2b250:	4658      	mov	r0, fp
   2b252:	2500      	movs	r5, #0
   2b254:	46bb      	mov	fp, r7
   2b256:	469a      	mov	sl, r3
   2b258:	1967      	adds	r7, r4, r5
   2b25a:	1a3a      	subs	r2, r7, r0
   2b25c:	2100      	movs	r1, #0
   2b25e:	4458      	add	r0, fp
   2b260:	f7d4 ffde 	bl	220 <memchr>
   2b264:	2800      	cmp	r0, #0
   2b266:	f47f af7e 	bne.w	2b166 <strstr+0x86>
   2b26a:	2f00      	cmp	r7, #0
   2b26c:	f43f af7b 	beq.w	2b166 <strstr+0x86>
   2b270:	4544      	cmp	r4, r8
   2b272:	d915      	bls.n	2b2a0 <strstr+0x1c0>
   2b274:	eb08 0205 	add.w	r2, r8, r5
   2b278:	f816 3008 	ldrb.w	r3, [r6, r8]
   2b27c:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2b280:	4298      	cmp	r0, r3
   2b282:	445a      	add	r2, fp
   2b284:	eb06 0108 	add.w	r1, r6, r8
   2b288:	4643      	mov	r3, r8
   2b28a:	d006      	beq.n	2b29a <strstr+0x1ba>
   2b28c:	e023      	b.n	2b2d6 <strstr+0x1f6>
   2b28e:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2b292:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2b296:	4586      	cmp	lr, r0
   2b298:	d11d      	bne.n	2b2d6 <strstr+0x1f6>
   2b29a:	3301      	adds	r3, #1
   2b29c:	429c      	cmp	r4, r3
   2b29e:	d1f6      	bne.n	2b28e <strstr+0x1ae>
   2b2a0:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2b2a4:	d012      	beq.n	2b2cc <strstr+0x1ec>
   2b2a6:	eb05 0209 	add.w	r2, r5, r9
   2b2aa:	f89a 3000 	ldrb.w	r3, [sl]
   2b2ae:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2b2b2:	4299      	cmp	r1, r3
   2b2b4:	445a      	add	r2, fp
   2b2b6:	d114      	bne.n	2b2e2 <strstr+0x202>
   2b2b8:	4653      	mov	r3, sl
   2b2ba:	e005      	b.n	2b2c8 <strstr+0x1e8>
   2b2bc:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2b2c0:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2b2c4:	4288      	cmp	r0, r1
   2b2c6:	d10c      	bne.n	2b2e2 <strstr+0x202>
   2b2c8:	42b3      	cmp	r3, r6
   2b2ca:	d1f7      	bne.n	2b2bc <strstr+0x1dc>
   2b2cc:	465f      	mov	r7, fp
   2b2ce:	1978      	adds	r0, r7, r5
   2b2d0:	b005      	add	sp, #20
   2b2d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b2d6:	f1c8 0201 	rsb	r2, r8, #1
   2b2da:	4415      	add	r5, r2
   2b2dc:	441d      	add	r5, r3
   2b2de:	4638      	mov	r0, r7
   2b2e0:	e7ba      	b.n	2b258 <strstr+0x178>
   2b2e2:	9b03      	ldr	r3, [sp, #12]
   2b2e4:	4638      	mov	r0, r7
   2b2e6:	441d      	add	r5, r3
   2b2e8:	e7b6      	b.n	2b258 <strstr+0x178>
   2b2ea:	780b      	ldrb	r3, [r1, #0]
   2b2ec:	b913      	cbnz	r3, 2b2f4 <strstr+0x214>
   2b2ee:	4770      	bx	lr
   2b2f0:	4641      	mov	r1, r8
   2b2f2:	e790      	b.n	2b216 <strstr+0x136>
   2b2f4:	2000      	movs	r0, #0
   2b2f6:	4770      	bx	lr

0002b2f8 <_strtol_l.isra.0>:
   2b2f8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b2fc:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b300:	460f      	mov	r7, r1
   2b302:	4680      	mov	r8, r0
   2b304:	4616      	mov	r6, r2
   2b306:	461d      	mov	r5, r3
   2b308:	468a      	mov	sl, r1
   2b30a:	e000      	b.n	2b30e <_strtol_l.isra.0+0x16>
   2b30c:	46a2      	mov	sl, r4
   2b30e:	4654      	mov	r4, sl
   2b310:	4648      	mov	r0, r9
   2b312:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b316:	f7fe ffbf 	bl	2a298 <__locale_ctype_ptr_l>
   2b31a:	4458      	add	r0, fp
   2b31c:	7842      	ldrb	r2, [r0, #1]
   2b31e:	f012 0208 	ands.w	r2, r2, #8
   2b322:	d1f3      	bne.n	2b30c <_strtol_l.isra.0+0x14>
   2b324:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2b328:	d04f      	beq.n	2b3ca <_strtol_l.isra.0+0xd2>
   2b32a:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2b32e:	bf04      	itt	eq
   2b330:	f894 b000 	ldrbeq.w	fp, [r4]
   2b334:	f10a 0402 	addeq.w	r4, sl, #2
   2b338:	b11d      	cbz	r5, 2b342 <_strtol_l.isra.0+0x4a>
   2b33a:	2d10      	cmp	r5, #16
   2b33c:	d056      	beq.n	2b3ec <_strtol_l.isra.0+0xf4>
   2b33e:	46ac      	mov	ip, r5
   2b340:	e004      	b.n	2b34c <_strtol_l.isra.0+0x54>
   2b342:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b346:	d060      	beq.n	2b40a <_strtol_l.isra.0+0x112>
   2b348:	250a      	movs	r5, #10
   2b34a:	46ac      	mov	ip, r5
   2b34c:	2a00      	cmp	r2, #0
   2b34e:	bf0c      	ite	eq
   2b350:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2b354:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2b358:	2100      	movs	r1, #0
   2b35a:	fbb9 fefc 	udiv	lr, r9, ip
   2b35e:	4608      	mov	r0, r1
   2b360:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2b364:	e005      	b.n	2b372 <_strtol_l.isra.0+0x7a>
   2b366:	d029      	beq.n	2b3bc <_strtol_l.isra.0+0xc4>
   2b368:	fb0c 3000 	mla	r0, ip, r0, r3
   2b36c:	2101      	movs	r1, #1
   2b36e:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b372:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2b376:	2b09      	cmp	r3, #9
   2b378:	d905      	bls.n	2b386 <_strtol_l.isra.0+0x8e>
   2b37a:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2b37e:	2b19      	cmp	r3, #25
   2b380:	d80b      	bhi.n	2b39a <_strtol_l.isra.0+0xa2>
   2b382:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2b386:	429d      	cmp	r5, r3
   2b388:	dd0f      	ble.n	2b3aa <_strtol_l.isra.0+0xb2>
   2b38a:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2b38e:	d0ee      	beq.n	2b36e <_strtol_l.isra.0+0x76>
   2b390:	4586      	cmp	lr, r0
   2b392:	d2e8      	bcs.n	2b366 <_strtol_l.isra.0+0x6e>
   2b394:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b398:	e7e9      	b.n	2b36e <_strtol_l.isra.0+0x76>
   2b39a:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2b39e:	2b19      	cmp	r3, #25
   2b3a0:	d803      	bhi.n	2b3aa <_strtol_l.isra.0+0xb2>
   2b3a2:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2b3a6:	429d      	cmp	r5, r3
   2b3a8:	dcef      	bgt.n	2b38a <_strtol_l.isra.0+0x92>
   2b3aa:	1c4b      	adds	r3, r1, #1
   2b3ac:	d013      	beq.n	2b3d6 <_strtol_l.isra.0+0xde>
   2b3ae:	b102      	cbz	r2, 2b3b2 <_strtol_l.isra.0+0xba>
   2b3b0:	4240      	negs	r0, r0
   2b3b2:	b146      	cbz	r6, 2b3c6 <_strtol_l.isra.0+0xce>
   2b3b4:	b9c1      	cbnz	r1, 2b3e8 <_strtol_l.isra.0+0xf0>
   2b3b6:	6037      	str	r7, [r6, #0]
   2b3b8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3bc:	459a      	cmp	sl, r3
   2b3be:	dad3      	bge.n	2b368 <_strtol_l.isra.0+0x70>
   2b3c0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2b3c4:	e7d3      	b.n	2b36e <_strtol_l.isra.0+0x76>
   2b3c6:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3ca:	f894 b000 	ldrb.w	fp, [r4]
   2b3ce:	2201      	movs	r2, #1
   2b3d0:	f10a 0402 	add.w	r4, sl, #2
   2b3d4:	e7b0      	b.n	2b338 <_strtol_l.isra.0+0x40>
   2b3d6:	2322      	movs	r3, #34	; 0x22
   2b3d8:	f8c8 3000 	str.w	r3, [r8]
   2b3dc:	b1ee      	cbz	r6, 2b41a <_strtol_l.isra.0+0x122>
   2b3de:	1e67      	subs	r7, r4, #1
   2b3e0:	4648      	mov	r0, r9
   2b3e2:	6037      	str	r7, [r6, #0]
   2b3e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b3e8:	4681      	mov	r9, r0
   2b3ea:	e7f8      	b.n	2b3de <_strtol_l.isra.0+0xe6>
   2b3ec:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2b3f0:	d1a5      	bne.n	2b33e <_strtol_l.isra.0+0x46>
   2b3f2:	7823      	ldrb	r3, [r4, #0]
   2b3f4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b3f8:	2b58      	cmp	r3, #88	; 0x58
   2b3fa:	d1a0      	bne.n	2b33e <_strtol_l.isra.0+0x46>
   2b3fc:	f04f 0c10 	mov.w	ip, #16
   2b400:	f894 b001 	ldrb.w	fp, [r4, #1]
   2b404:	4665      	mov	r5, ip
   2b406:	3402      	adds	r4, #2
   2b408:	e7a0      	b.n	2b34c <_strtol_l.isra.0+0x54>
   2b40a:	7823      	ldrb	r3, [r4, #0]
   2b40c:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b410:	2b58      	cmp	r3, #88	; 0x58
   2b412:	d0f3      	beq.n	2b3fc <_strtol_l.isra.0+0x104>
   2b414:	2508      	movs	r5, #8
   2b416:	46ac      	mov	ip, r5
   2b418:	e798      	b.n	2b34c <_strtol_l.isra.0+0x54>
   2b41a:	4648      	mov	r0, r9
   2b41c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002b420 <strtol>:
   2b420:	b530      	push	{r4, r5, lr}
   2b422:	4c08      	ldr	r4, [pc, #32]	; (2b444 <strtol+0x24>)
   2b424:	4b08      	ldr	r3, [pc, #32]	; (2b448 <strtol+0x28>)
   2b426:	6825      	ldr	r5, [r4, #0]
   2b428:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b42a:	b083      	sub	sp, #12
   2b42c:	2c00      	cmp	r4, #0
   2b42e:	bf08      	it	eq
   2b430:	461c      	moveq	r4, r3
   2b432:	9400      	str	r4, [sp, #0]
   2b434:	4613      	mov	r3, r2
   2b436:	460a      	mov	r2, r1
   2b438:	4601      	mov	r1, r0
   2b43a:	4628      	mov	r0, r5
   2b43c:	f7ff ff5c 	bl	2b2f8 <_strtol_l.isra.0>
   2b440:	b003      	add	sp, #12
   2b442:	bd30      	pop	{r4, r5, pc}
   2b444:	2000c688 	.word	0x2000c688
   2b448:	2000cab8 	.word	0x2000cab8

0002b44c <_strtoul_l.isra.0>:
   2b44c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b450:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2b454:	460e      	mov	r6, r1
   2b456:	4607      	mov	r7, r0
   2b458:	4615      	mov	r5, r2
   2b45a:	4698      	mov	r8, r3
   2b45c:	468a      	mov	sl, r1
   2b45e:	e000      	b.n	2b462 <_strtoul_l.isra.0+0x16>
   2b460:	46a2      	mov	sl, r4
   2b462:	4654      	mov	r4, sl
   2b464:	4648      	mov	r0, r9
   2b466:	f814 bb01 	ldrb.w	fp, [r4], #1
   2b46a:	f7fe ff15 	bl	2a298 <__locale_ctype_ptr_l>
   2b46e:	4458      	add	r0, fp
   2b470:	7840      	ldrb	r0, [r0, #1]
   2b472:	f010 0008 	ands.w	r0, r0, #8
   2b476:	d1f3      	bne.n	2b460 <_strtoul_l.isra.0+0x14>
   2b478:	4659      	mov	r1, fp
   2b47a:	292d      	cmp	r1, #45	; 0x2d
   2b47c:	d059      	beq.n	2b532 <_strtoul_l.isra.0+0xe6>
   2b47e:	292b      	cmp	r1, #43	; 0x2b
   2b480:	bf04      	itt	eq
   2b482:	7821      	ldrbeq	r1, [r4, #0]
   2b484:	f10a 0402 	addeq.w	r4, sl, #2
   2b488:	f1b8 0f00 	cmp.w	r8, #0
   2b48c:	d00c      	beq.n	2b4a8 <_strtoul_l.isra.0+0x5c>
   2b48e:	f1b8 0f10 	cmp.w	r8, #16
   2b492:	d053      	beq.n	2b53c <_strtoul_l.isra.0+0xf0>
   2b494:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2b498:	fbbc fcf8 	udiv	ip, ip, r8
   2b49c:	fb08 fa0c 	mul.w	sl, r8, ip
   2b4a0:	ea6f 0a0a 	mvn.w	sl, sl
   2b4a4:	46c1      	mov	r9, r8
   2b4a6:	e008      	b.n	2b4ba <_strtoul_l.isra.0+0x6e>
   2b4a8:	2930      	cmp	r1, #48	; 0x30
   2b4aa:	d058      	beq.n	2b55e <_strtoul_l.isra.0+0x112>
   2b4ac:	f04f 080a 	mov.w	r8, #10
   2b4b0:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2b590 <_strtoul_l.isra.0+0x144>
   2b4b4:	46c1      	mov	r9, r8
   2b4b6:	f04f 0a05 	mov.w	sl, #5
   2b4ba:	2300      	movs	r3, #0
   2b4bc:	469e      	mov	lr, r3
   2b4be:	e005      	b.n	2b4cc <_strtoul_l.isra.0+0x80>
   2b4c0:	d02a      	beq.n	2b518 <_strtoul_l.isra.0+0xcc>
   2b4c2:	fb09 2e0e 	mla	lr, r9, lr, r2
   2b4c6:	2301      	movs	r3, #1
   2b4c8:	f814 1b01 	ldrb.w	r1, [r4], #1
   2b4cc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2b4d0:	2a09      	cmp	r2, #9
   2b4d2:	d905      	bls.n	2b4e0 <_strtoul_l.isra.0+0x94>
   2b4d4:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2b4d8:	2a19      	cmp	r2, #25
   2b4da:	d80a      	bhi.n	2b4f2 <_strtoul_l.isra.0+0xa6>
   2b4dc:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2b4e0:	4590      	cmp	r8, r2
   2b4e2:	dd0e      	ble.n	2b502 <_strtoul_l.isra.0+0xb6>
   2b4e4:	2b00      	cmp	r3, #0
   2b4e6:	db01      	blt.n	2b4ec <_strtoul_l.isra.0+0xa0>
   2b4e8:	45e6      	cmp	lr, ip
   2b4ea:	d9e9      	bls.n	2b4c0 <_strtoul_l.isra.0+0x74>
   2b4ec:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b4f0:	e7ea      	b.n	2b4c8 <_strtoul_l.isra.0+0x7c>
   2b4f2:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2b4f6:	2a19      	cmp	r2, #25
   2b4f8:	d803      	bhi.n	2b502 <_strtoul_l.isra.0+0xb6>
   2b4fa:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2b4fe:	4590      	cmp	r8, r2
   2b500:	dcf0      	bgt.n	2b4e4 <_strtoul_l.isra.0+0x98>
   2b502:	2b00      	cmp	r3, #0
   2b504:	db0d      	blt.n	2b522 <_strtoul_l.isra.0+0xd6>
   2b506:	b108      	cbz	r0, 2b50c <_strtoul_l.isra.0+0xc0>
   2b508:	f1ce 0e00 	rsb	lr, lr, #0
   2b50c:	b10d      	cbz	r5, 2b512 <_strtoul_l.isra.0+0xc6>
   2b50e:	b973      	cbnz	r3, 2b52e <_strtoul_l.isra.0+0xe2>
   2b510:	602e      	str	r6, [r5, #0]
   2b512:	4670      	mov	r0, lr
   2b514:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b518:	4552      	cmp	r2, sl
   2b51a:	ddd2      	ble.n	2b4c2 <_strtoul_l.isra.0+0x76>
   2b51c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2b520:	e7d2      	b.n	2b4c8 <_strtoul_l.isra.0+0x7c>
   2b522:	2322      	movs	r3, #34	; 0x22
   2b524:	603b      	str	r3, [r7, #0]
   2b526:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2b52a:	2d00      	cmp	r5, #0
   2b52c:	d0f1      	beq.n	2b512 <_strtoul_l.isra.0+0xc6>
   2b52e:	1e66      	subs	r6, r4, #1
   2b530:	e7ee      	b.n	2b510 <_strtoul_l.isra.0+0xc4>
   2b532:	7821      	ldrb	r1, [r4, #0]
   2b534:	2001      	movs	r0, #1
   2b536:	f10a 0402 	add.w	r4, sl, #2
   2b53a:	e7a5      	b.n	2b488 <_strtoul_l.isra.0+0x3c>
   2b53c:	2930      	cmp	r1, #48	; 0x30
   2b53e:	d11b      	bne.n	2b578 <_strtoul_l.isra.0+0x12c>
   2b540:	7823      	ldrb	r3, [r4, #0]
   2b542:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b546:	2b58      	cmp	r3, #88	; 0x58
   2b548:	d11c      	bne.n	2b584 <_strtoul_l.isra.0+0x138>
   2b54a:	f04f 0910 	mov.w	r9, #16
   2b54e:	7861      	ldrb	r1, [r4, #1]
   2b550:	46c8      	mov	r8, r9
   2b552:	f04f 0a0f 	mov.w	sl, #15
   2b556:	3402      	adds	r4, #2
   2b558:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b55c:	e7ad      	b.n	2b4ba <_strtoul_l.isra.0+0x6e>
   2b55e:	7823      	ldrb	r3, [r4, #0]
   2b560:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2b564:	2b58      	cmp	r3, #88	; 0x58
   2b566:	d0f0      	beq.n	2b54a <_strtoul_l.isra.0+0xfe>
   2b568:	f04f 0808 	mov.w	r8, #8
   2b56c:	46c1      	mov	r9, r8
   2b56e:	f04f 0a07 	mov.w	sl, #7
   2b572:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2b576:	e7a0      	b.n	2b4ba <_strtoul_l.isra.0+0x6e>
   2b578:	f04f 0a0f 	mov.w	sl, #15
   2b57c:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b580:	46c1      	mov	r9, r8
   2b582:	e79a      	b.n	2b4ba <_strtoul_l.isra.0+0x6e>
   2b584:	46c1      	mov	r9, r8
   2b586:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2b58a:	f04f 0a0f 	mov.w	sl, #15
   2b58e:	e794      	b.n	2b4ba <_strtoul_l.isra.0+0x6e>
   2b590:	19999999 	.word	0x19999999

0002b594 <strtoul>:
   2b594:	b530      	push	{r4, r5, lr}
   2b596:	4c08      	ldr	r4, [pc, #32]	; (2b5b8 <strtoul+0x24>)
   2b598:	4b08      	ldr	r3, [pc, #32]	; (2b5bc <strtoul+0x28>)
   2b59a:	6825      	ldr	r5, [r4, #0]
   2b59c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2b59e:	b083      	sub	sp, #12
   2b5a0:	2c00      	cmp	r4, #0
   2b5a2:	bf08      	it	eq
   2b5a4:	461c      	moveq	r4, r3
   2b5a6:	9400      	str	r4, [sp, #0]
   2b5a8:	4613      	mov	r3, r2
   2b5aa:	460a      	mov	r2, r1
   2b5ac:	4601      	mov	r1, r0
   2b5ae:	4628      	mov	r0, r5
   2b5b0:	f7ff ff4c 	bl	2b44c <_strtoul_l.isra.0>
   2b5b4:	b003      	add	sp, #12
   2b5b6:	bd30      	pop	{r4, r5, pc}
   2b5b8:	2000c688 	.word	0x2000c688
   2b5bc:	2000cab8 	.word	0x2000cab8

0002b5c0 <_svfprintf_r>:
   2b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2b5c4:	b0c3      	sub	sp, #268	; 0x10c
   2b5c6:	460c      	mov	r4, r1
   2b5c8:	910b      	str	r1, [sp, #44]	; 0x2c
   2b5ca:	4692      	mov	sl, r2
   2b5cc:	930f      	str	r3, [sp, #60]	; 0x3c
   2b5ce:	900c      	str	r0, [sp, #48]	; 0x30
   2b5d0:	f002 fb26 	bl	2dc20 <_localeconv_r>
   2b5d4:	6803      	ldr	r3, [r0, #0]
   2b5d6:	931a      	str	r3, [sp, #104]	; 0x68
   2b5d8:	4618      	mov	r0, r3
   2b5da:	f7d5 f891 	bl	700 <strlen>
   2b5de:	89a3      	ldrh	r3, [r4, #12]
   2b5e0:	9019      	str	r0, [sp, #100]	; 0x64
   2b5e2:	0619      	lsls	r1, r3, #24
   2b5e4:	d503      	bpl.n	2b5ee <_svfprintf_r+0x2e>
   2b5e6:	6923      	ldr	r3, [r4, #16]
   2b5e8:	2b00      	cmp	r3, #0
   2b5ea:	f001 8003 	beq.w	2c5f4 <_svfprintf_r+0x1034>
   2b5ee:	2300      	movs	r3, #0
   2b5f0:	f10d 09c8 	add.w	r9, sp, #200	; 0xc8
   2b5f4:	9313      	str	r3, [sp, #76]	; 0x4c
   2b5f6:	9315      	str	r3, [sp, #84]	; 0x54
   2b5f8:	9314      	str	r3, [sp, #80]	; 0x50
   2b5fa:	9327      	str	r3, [sp, #156]	; 0x9c
   2b5fc:	9326      	str	r3, [sp, #152]	; 0x98
   2b5fe:	9318      	str	r3, [sp, #96]	; 0x60
   2b600:	931b      	str	r3, [sp, #108]	; 0x6c
   2b602:	9309      	str	r3, [sp, #36]	; 0x24
   2b604:	f8cd 9094 	str.w	r9, [sp, #148]	; 0x94
   2b608:	46c8      	mov	r8, r9
   2b60a:	9316      	str	r3, [sp, #88]	; 0x58
   2b60c:	9317      	str	r3, [sp, #92]	; 0x5c
   2b60e:	f89a 3000 	ldrb.w	r3, [sl]
   2b612:	4654      	mov	r4, sl
   2b614:	b1e3      	cbz	r3, 2b650 <_svfprintf_r+0x90>
   2b616:	2b25      	cmp	r3, #37	; 0x25
   2b618:	d102      	bne.n	2b620 <_svfprintf_r+0x60>
   2b61a:	e019      	b.n	2b650 <_svfprintf_r+0x90>
   2b61c:	2b25      	cmp	r3, #37	; 0x25
   2b61e:	d003      	beq.n	2b628 <_svfprintf_r+0x68>
   2b620:	f814 3f01 	ldrb.w	r3, [r4, #1]!
   2b624:	2b00      	cmp	r3, #0
   2b626:	d1f9      	bne.n	2b61c <_svfprintf_r+0x5c>
   2b628:	eba4 050a 	sub.w	r5, r4, sl
   2b62c:	b185      	cbz	r5, 2b650 <_svfprintf_r+0x90>
   2b62e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b630:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2b632:	f8c8 a000 	str.w	sl, [r8]
   2b636:	3301      	adds	r3, #1
   2b638:	442a      	add	r2, r5
   2b63a:	2b07      	cmp	r3, #7
   2b63c:	f8c8 5004 	str.w	r5, [r8, #4]
   2b640:	9227      	str	r2, [sp, #156]	; 0x9c
   2b642:	9326      	str	r3, [sp, #152]	; 0x98
   2b644:	dc7f      	bgt.n	2b746 <_svfprintf_r+0x186>
   2b646:	f108 0808 	add.w	r8, r8, #8
   2b64a:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b64c:	442b      	add	r3, r5
   2b64e:	9309      	str	r3, [sp, #36]	; 0x24
   2b650:	7823      	ldrb	r3, [r4, #0]
   2b652:	2b00      	cmp	r3, #0
   2b654:	d07f      	beq.n	2b756 <_svfprintf_r+0x196>
   2b656:	2300      	movs	r3, #0
   2b658:	461a      	mov	r2, r3
   2b65a:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2b65e:	4619      	mov	r1, r3
   2b660:	930d      	str	r3, [sp, #52]	; 0x34
   2b662:	469b      	mov	fp, r3
   2b664:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2b668:	7863      	ldrb	r3, [r4, #1]
   2b66a:	900a      	str	r0, [sp, #40]	; 0x28
   2b66c:	f104 0a01 	add.w	sl, r4, #1
   2b670:	f10a 0a01 	add.w	sl, sl, #1
   2b674:	f1a3 0020 	sub.w	r0, r3, #32
   2b678:	2858      	cmp	r0, #88	; 0x58
   2b67a:	f200 83c1 	bhi.w	2be00 <_svfprintf_r+0x840>
   2b67e:	e8df f010 	tbh	[pc, r0, lsl #1]
   2b682:	0238      	.short	0x0238
   2b684:	03bf03bf 	.word	0x03bf03bf
   2b688:	03bf0240 	.word	0x03bf0240
   2b68c:	03bf03bf 	.word	0x03bf03bf
   2b690:	03bf03bf 	.word	0x03bf03bf
   2b694:	024503bf 	.word	0x024503bf
   2b698:	03bf0203 	.word	0x03bf0203
   2b69c:	026b005d 	.word	0x026b005d
   2b6a0:	028603bf 	.word	0x028603bf
   2b6a4:	039d039d 	.word	0x039d039d
   2b6a8:	039d039d 	.word	0x039d039d
   2b6ac:	039d039d 	.word	0x039d039d
   2b6b0:	039d039d 	.word	0x039d039d
   2b6b4:	03bf039d 	.word	0x03bf039d
   2b6b8:	03bf03bf 	.word	0x03bf03bf
   2b6bc:	03bf03bf 	.word	0x03bf03bf
   2b6c0:	03bf03bf 	.word	0x03bf03bf
   2b6c4:	03bf03bf 	.word	0x03bf03bf
   2b6c8:	033703bf 	.word	0x033703bf
   2b6cc:	03bf0357 	.word	0x03bf0357
   2b6d0:	03bf0357 	.word	0x03bf0357
   2b6d4:	03bf03bf 	.word	0x03bf03bf
   2b6d8:	039803bf 	.word	0x039803bf
   2b6dc:	03bf03bf 	.word	0x03bf03bf
   2b6e0:	03bf03ad 	.word	0x03bf03ad
   2b6e4:	03bf03bf 	.word	0x03bf03bf
   2b6e8:	03bf03bf 	.word	0x03bf03bf
   2b6ec:	03bf0259 	.word	0x03bf0259
   2b6f0:	031e03bf 	.word	0x031e03bf
   2b6f4:	03bf03bf 	.word	0x03bf03bf
   2b6f8:	03bf03bf 	.word	0x03bf03bf
   2b6fc:	03bf03bf 	.word	0x03bf03bf
   2b700:	03bf03bf 	.word	0x03bf03bf
   2b704:	03bf03bf 	.word	0x03bf03bf
   2b708:	02db02c6 	.word	0x02db02c6
   2b70c:	03570357 	.word	0x03570357
   2b710:	028b0357 	.word	0x028b0357
   2b714:	03bf02db 	.word	0x03bf02db
   2b718:	029003bf 	.word	0x029003bf
   2b71c:	029d03bf 	.word	0x029d03bf
   2b720:	02b401cc 	.word	0x02b401cc
   2b724:	03bf0208 	.word	0x03bf0208
   2b728:	03bf01e1 	.word	0x03bf01e1
   2b72c:	03bf007e 	.word	0x03bf007e
   2b730:	020d03bf 	.word	0x020d03bf
   2b734:	980d      	ldr	r0, [sp, #52]	; 0x34
   2b736:	930f      	str	r3, [sp, #60]	; 0x3c
   2b738:	4240      	negs	r0, r0
   2b73a:	900d      	str	r0, [sp, #52]	; 0x34
   2b73c:	f04b 0b04 	orr.w	fp, fp, #4
   2b740:	f89a 3000 	ldrb.w	r3, [sl]
   2b744:	e794      	b.n	2b670 <_svfprintf_r+0xb0>
   2b746:	aa25      	add	r2, sp, #148	; 0x94
   2b748:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b74a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b74c:	f002 fd74 	bl	2e238 <__ssprint_r>
   2b750:	b940      	cbnz	r0, 2b764 <_svfprintf_r+0x1a4>
   2b752:	46c8      	mov	r8, r9
   2b754:	e779      	b.n	2b64a <_svfprintf_r+0x8a>
   2b756:	9b27      	ldr	r3, [sp, #156]	; 0x9c
   2b758:	b123      	cbz	r3, 2b764 <_svfprintf_r+0x1a4>
   2b75a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b75c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b75e:	aa25      	add	r2, sp, #148	; 0x94
   2b760:	f002 fd6a 	bl	2e238 <__ssprint_r>
   2b764:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2b766:	899b      	ldrh	r3, [r3, #12]
   2b768:	f013 0f40 	tst.w	r3, #64	; 0x40
   2b76c:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b76e:	bf18      	it	ne
   2b770:	f04f 33ff 	movne.w	r3, #4294967295	; 0xffffffff
   2b774:	9309      	str	r3, [sp, #36]	; 0x24
   2b776:	9809      	ldr	r0, [sp, #36]	; 0x24
   2b778:	b043      	add	sp, #268	; 0x10c
   2b77a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2b77e:	f01b 0f20 	tst.w	fp, #32
   2b782:	9311      	str	r3, [sp, #68]	; 0x44
   2b784:	f040 81dd 	bne.w	2bb42 <_svfprintf_r+0x582>
   2b788:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2b78a:	f01b 0f10 	tst.w	fp, #16
   2b78e:	4613      	mov	r3, r2
   2b790:	f040 856e 	bne.w	2c270 <_svfprintf_r+0xcb0>
   2b794:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2b798:	f000 856a 	beq.w	2c270 <_svfprintf_r+0xcb0>
   2b79c:	8814      	ldrh	r4, [r2, #0]
   2b79e:	3204      	adds	r2, #4
   2b7a0:	2500      	movs	r5, #0
   2b7a2:	2301      	movs	r3, #1
   2b7a4:	920f      	str	r2, [sp, #60]	; 0x3c
   2b7a6:	2700      	movs	r7, #0
   2b7a8:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2b7ac:	990a      	ldr	r1, [sp, #40]	; 0x28
   2b7ae:	1c4a      	adds	r2, r1, #1
   2b7b0:	f000 8265 	beq.w	2bc7e <_svfprintf_r+0x6be>
   2b7b4:	f02b 0280 	bic.w	r2, fp, #128	; 0x80
   2b7b8:	9207      	str	r2, [sp, #28]
   2b7ba:	ea54 0205 	orrs.w	r2, r4, r5
   2b7be:	f040 8264 	bne.w	2bc8a <_svfprintf_r+0x6ca>
   2b7c2:	2900      	cmp	r1, #0
   2b7c4:	f040 843c 	bne.w	2c040 <_svfprintf_r+0xa80>
   2b7c8:	2b00      	cmp	r3, #0
   2b7ca:	f040 84d7 	bne.w	2c17c <_svfprintf_r+0xbbc>
   2b7ce:	f01b 0301 	ands.w	r3, fp, #1
   2b7d2:	930e      	str	r3, [sp, #56]	; 0x38
   2b7d4:	f000 8604 	beq.w	2c3e0 <_svfprintf_r+0xe20>
   2b7d8:	ae42      	add	r6, sp, #264	; 0x108
   2b7da:	2330      	movs	r3, #48	; 0x30
   2b7dc:	f806 3d41 	strb.w	r3, [r6, #-65]!
   2b7e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b7e2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b7e4:	4293      	cmp	r3, r2
   2b7e6:	bfb8      	it	lt
   2b7e8:	4613      	movlt	r3, r2
   2b7ea:	9308      	str	r3, [sp, #32]
   2b7ec:	2300      	movs	r3, #0
   2b7ee:	9312      	str	r3, [sp, #72]	; 0x48
   2b7f0:	b117      	cbz	r7, 2b7f8 <_svfprintf_r+0x238>
   2b7f2:	9b08      	ldr	r3, [sp, #32]
   2b7f4:	3301      	adds	r3, #1
   2b7f6:	9308      	str	r3, [sp, #32]
   2b7f8:	9b07      	ldr	r3, [sp, #28]
   2b7fa:	f013 0302 	ands.w	r3, r3, #2
   2b7fe:	9310      	str	r3, [sp, #64]	; 0x40
   2b800:	d002      	beq.n	2b808 <_svfprintf_r+0x248>
   2b802:	9b08      	ldr	r3, [sp, #32]
   2b804:	3302      	adds	r3, #2
   2b806:	9308      	str	r3, [sp, #32]
   2b808:	9b07      	ldr	r3, [sp, #28]
   2b80a:	f013 0584 	ands.w	r5, r3, #132	; 0x84
   2b80e:	f040 830e 	bne.w	2be2e <_svfprintf_r+0x86e>
   2b812:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b814:	9a08      	ldr	r2, [sp, #32]
   2b816:	eba3 0b02 	sub.w	fp, r3, r2
   2b81a:	f1bb 0f00 	cmp.w	fp, #0
   2b81e:	f340 8306 	ble.w	2be2e <_svfprintf_r+0x86e>
   2b822:	f1bb 0f10 	cmp.w	fp, #16
   2b826:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b828:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b82a:	dd29      	ble.n	2b880 <_svfprintf_r+0x2c0>
   2b82c:	4643      	mov	r3, r8
   2b82e:	4621      	mov	r1, r4
   2b830:	46a8      	mov	r8, r5
   2b832:	2710      	movs	r7, #16
   2b834:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b836:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b838:	e006      	b.n	2b848 <_svfprintf_r+0x288>
   2b83a:	f1ab 0b10 	sub.w	fp, fp, #16
   2b83e:	f1bb 0f10 	cmp.w	fp, #16
   2b842:	f103 0308 	add.w	r3, r3, #8
   2b846:	dd18      	ble.n	2b87a <_svfprintf_r+0x2ba>
   2b848:	3201      	adds	r2, #1
   2b84a:	48b7      	ldr	r0, [pc, #732]	; (2bb28 <_svfprintf_r+0x568>)
   2b84c:	9226      	str	r2, [sp, #152]	; 0x98
   2b84e:	3110      	adds	r1, #16
   2b850:	2a07      	cmp	r2, #7
   2b852:	9127      	str	r1, [sp, #156]	; 0x9c
   2b854:	e883 0081 	stmia.w	r3, {r0, r7}
   2b858:	ddef      	ble.n	2b83a <_svfprintf_r+0x27a>
   2b85a:	aa25      	add	r2, sp, #148	; 0x94
   2b85c:	4629      	mov	r1, r5
   2b85e:	4620      	mov	r0, r4
   2b860:	f002 fcea 	bl	2e238 <__ssprint_r>
   2b864:	2800      	cmp	r0, #0
   2b866:	f47f af7d 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2b86a:	f1ab 0b10 	sub.w	fp, fp, #16
   2b86e:	f1bb 0f10 	cmp.w	fp, #16
   2b872:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b874:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2b876:	464b      	mov	r3, r9
   2b878:	dce6      	bgt.n	2b848 <_svfprintf_r+0x288>
   2b87a:	4645      	mov	r5, r8
   2b87c:	460c      	mov	r4, r1
   2b87e:	4698      	mov	r8, r3
   2b880:	3201      	adds	r2, #1
   2b882:	4ba9      	ldr	r3, [pc, #676]	; (2bb28 <_svfprintf_r+0x568>)
   2b884:	9226      	str	r2, [sp, #152]	; 0x98
   2b886:	445c      	add	r4, fp
   2b888:	2a07      	cmp	r2, #7
   2b88a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b88c:	e888 0808 	stmia.w	r8, {r3, fp}
   2b890:	f300 8498 	bgt.w	2c1c4 <_svfprintf_r+0xc04>
   2b894:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2b898:	f108 0808 	add.w	r8, r8, #8
   2b89c:	b177      	cbz	r7, 2b8bc <_svfprintf_r+0x2fc>
   2b89e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8a0:	3301      	adds	r3, #1
   2b8a2:	3401      	adds	r4, #1
   2b8a4:	f10d 0177 	add.w	r1, sp, #119	; 0x77
   2b8a8:	2201      	movs	r2, #1
   2b8aa:	2b07      	cmp	r3, #7
   2b8ac:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8ae:	9326      	str	r3, [sp, #152]	; 0x98
   2b8b0:	e888 0006 	stmia.w	r8, {r1, r2}
   2b8b4:	f300 83db 	bgt.w	2c06e <_svfprintf_r+0xaae>
   2b8b8:	f108 0808 	add.w	r8, r8, #8
   2b8bc:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2b8be:	b16b      	cbz	r3, 2b8dc <_svfprintf_r+0x31c>
   2b8c0:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8c2:	3301      	adds	r3, #1
   2b8c4:	3402      	adds	r4, #2
   2b8c6:	a91e      	add	r1, sp, #120	; 0x78
   2b8c8:	2202      	movs	r2, #2
   2b8ca:	2b07      	cmp	r3, #7
   2b8cc:	9427      	str	r4, [sp, #156]	; 0x9c
   2b8ce:	9326      	str	r3, [sp, #152]	; 0x98
   2b8d0:	e888 0006 	stmia.w	r8, {r1, r2}
   2b8d4:	f300 83d6 	bgt.w	2c084 <_svfprintf_r+0xac4>
   2b8d8:	f108 0808 	add.w	r8, r8, #8
   2b8dc:	2d80      	cmp	r5, #128	; 0x80
   2b8de:	f000 8315 	beq.w	2bf0c <_svfprintf_r+0x94c>
   2b8e2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2b8e4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2b8e6:	1a9f      	subs	r7, r3, r2
   2b8e8:	2f00      	cmp	r7, #0
   2b8ea:	dd36      	ble.n	2b95a <_svfprintf_r+0x39a>
   2b8ec:	2f10      	cmp	r7, #16
   2b8ee:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b8f0:	4d8e      	ldr	r5, [pc, #568]	; (2bb2c <_svfprintf_r+0x56c>)
   2b8f2:	dd27      	ble.n	2b944 <_svfprintf_r+0x384>
   2b8f4:	4642      	mov	r2, r8
   2b8f6:	4621      	mov	r1, r4
   2b8f8:	46b0      	mov	r8, r6
   2b8fa:	f04f 0b10 	mov.w	fp, #16
   2b8fe:	462e      	mov	r6, r5
   2b900:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2b902:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2b904:	e004      	b.n	2b910 <_svfprintf_r+0x350>
   2b906:	3f10      	subs	r7, #16
   2b908:	2f10      	cmp	r7, #16
   2b90a:	f102 0208 	add.w	r2, r2, #8
   2b90e:	dd15      	ble.n	2b93c <_svfprintf_r+0x37c>
   2b910:	3301      	adds	r3, #1
   2b912:	3110      	adds	r1, #16
   2b914:	2b07      	cmp	r3, #7
   2b916:	9127      	str	r1, [sp, #156]	; 0x9c
   2b918:	9326      	str	r3, [sp, #152]	; 0x98
   2b91a:	e882 0840 	stmia.w	r2, {r6, fp}
   2b91e:	ddf2      	ble.n	2b906 <_svfprintf_r+0x346>
   2b920:	aa25      	add	r2, sp, #148	; 0x94
   2b922:	4629      	mov	r1, r5
   2b924:	4620      	mov	r0, r4
   2b926:	f002 fc87 	bl	2e238 <__ssprint_r>
   2b92a:	2800      	cmp	r0, #0
   2b92c:	f47f af1a 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2b930:	3f10      	subs	r7, #16
   2b932:	2f10      	cmp	r7, #16
   2b934:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2b936:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b938:	464a      	mov	r2, r9
   2b93a:	dce9      	bgt.n	2b910 <_svfprintf_r+0x350>
   2b93c:	4635      	mov	r5, r6
   2b93e:	460c      	mov	r4, r1
   2b940:	4646      	mov	r6, r8
   2b942:	4690      	mov	r8, r2
   2b944:	3301      	adds	r3, #1
   2b946:	443c      	add	r4, r7
   2b948:	2b07      	cmp	r3, #7
   2b94a:	9427      	str	r4, [sp, #156]	; 0x9c
   2b94c:	9326      	str	r3, [sp, #152]	; 0x98
   2b94e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2b952:	f300 8381 	bgt.w	2c058 <_svfprintf_r+0xa98>
   2b956:	f108 0808 	add.w	r8, r8, #8
   2b95a:	9b07      	ldr	r3, [sp, #28]
   2b95c:	05df      	lsls	r7, r3, #23
   2b95e:	f100 8268 	bmi.w	2be32 <_svfprintf_r+0x872>
   2b962:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b964:	990e      	ldr	r1, [sp, #56]	; 0x38
   2b966:	f8c8 6000 	str.w	r6, [r8]
   2b96a:	3301      	adds	r3, #1
   2b96c:	440c      	add	r4, r1
   2b96e:	2b07      	cmp	r3, #7
   2b970:	9427      	str	r4, [sp, #156]	; 0x9c
   2b972:	f8c8 1004 	str.w	r1, [r8, #4]
   2b976:	9326      	str	r3, [sp, #152]	; 0x98
   2b978:	f300 834d 	bgt.w	2c016 <_svfprintf_r+0xa56>
   2b97c:	f108 0808 	add.w	r8, r8, #8
   2b980:	9b07      	ldr	r3, [sp, #28]
   2b982:	075b      	lsls	r3, r3, #29
   2b984:	d53a      	bpl.n	2b9fc <_svfprintf_r+0x43c>
   2b986:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2b988:	9a08      	ldr	r2, [sp, #32]
   2b98a:	1a9d      	subs	r5, r3, r2
   2b98c:	2d00      	cmp	r5, #0
   2b98e:	dd35      	ble.n	2b9fc <_svfprintf_r+0x43c>
   2b990:	2d10      	cmp	r5, #16
   2b992:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b994:	dd20      	ble.n	2b9d8 <_svfprintf_r+0x418>
   2b996:	2610      	movs	r6, #16
   2b998:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2b99a:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   2b99e:	e004      	b.n	2b9aa <_svfprintf_r+0x3ea>
   2b9a0:	3d10      	subs	r5, #16
   2b9a2:	2d10      	cmp	r5, #16
   2b9a4:	f108 0808 	add.w	r8, r8, #8
   2b9a8:	dd16      	ble.n	2b9d8 <_svfprintf_r+0x418>
   2b9aa:	3301      	adds	r3, #1
   2b9ac:	4a5e      	ldr	r2, [pc, #376]	; (2bb28 <_svfprintf_r+0x568>)
   2b9ae:	9326      	str	r3, [sp, #152]	; 0x98
   2b9b0:	3410      	adds	r4, #16
   2b9b2:	2b07      	cmp	r3, #7
   2b9b4:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9b6:	e888 0044 	stmia.w	r8, {r2, r6}
   2b9ba:	ddf1      	ble.n	2b9a0 <_svfprintf_r+0x3e0>
   2b9bc:	aa25      	add	r2, sp, #148	; 0x94
   2b9be:	4659      	mov	r1, fp
   2b9c0:	4638      	mov	r0, r7
   2b9c2:	f002 fc39 	bl	2e238 <__ssprint_r>
   2b9c6:	2800      	cmp	r0, #0
   2b9c8:	f47f aecc 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2b9cc:	3d10      	subs	r5, #16
   2b9ce:	2d10      	cmp	r5, #16
   2b9d0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b9d2:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2b9d4:	46c8      	mov	r8, r9
   2b9d6:	dce8      	bgt.n	2b9aa <_svfprintf_r+0x3ea>
   2b9d8:	3301      	adds	r3, #1
   2b9da:	4a53      	ldr	r2, [pc, #332]	; (2bb28 <_svfprintf_r+0x568>)
   2b9dc:	9326      	str	r3, [sp, #152]	; 0x98
   2b9de:	442c      	add	r4, r5
   2b9e0:	2b07      	cmp	r3, #7
   2b9e2:	9427      	str	r4, [sp, #156]	; 0x9c
   2b9e4:	e888 0024 	stmia.w	r8, {r2, r5}
   2b9e8:	dd08      	ble.n	2b9fc <_svfprintf_r+0x43c>
   2b9ea:	aa25      	add	r2, sp, #148	; 0x94
   2b9ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2b9ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   2b9f0:	f002 fc22 	bl	2e238 <__ssprint_r>
   2b9f4:	2800      	cmp	r0, #0
   2b9f6:	f47f aeb5 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2b9fa:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2b9fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2b9fe:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2ba00:	9908      	ldr	r1, [sp, #32]
   2ba02:	428a      	cmp	r2, r1
   2ba04:	bfac      	ite	ge
   2ba06:	189b      	addge	r3, r3, r2
   2ba08:	185b      	addlt	r3, r3, r1
   2ba0a:	9309      	str	r3, [sp, #36]	; 0x24
   2ba0c:	2c00      	cmp	r4, #0
   2ba0e:	f040 830d 	bne.w	2c02c <_svfprintf_r+0xa6c>
   2ba12:	2300      	movs	r3, #0
   2ba14:	9326      	str	r3, [sp, #152]	; 0x98
   2ba16:	46c8      	mov	r8, r9
   2ba18:	e5f9      	b.n	2b60e <_svfprintf_r+0x4e>
   2ba1a:	9311      	str	r3, [sp, #68]	; 0x44
   2ba1c:	f01b 0320 	ands.w	r3, fp, #32
   2ba20:	f040 81e3 	bne.w	2bdea <_svfprintf_r+0x82a>
   2ba24:	f01b 0210 	ands.w	r2, fp, #16
   2ba28:	f040 842e 	bne.w	2c288 <_svfprintf_r+0xcc8>
   2ba2c:	f01b 0340 	ands.w	r3, fp, #64	; 0x40
   2ba30:	f000 842a 	beq.w	2c288 <_svfprintf_r+0xcc8>
   2ba34:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2ba36:	4613      	mov	r3, r2
   2ba38:	460a      	mov	r2, r1
   2ba3a:	3204      	adds	r2, #4
   2ba3c:	880c      	ldrh	r4, [r1, #0]
   2ba3e:	920f      	str	r2, [sp, #60]	; 0x3c
   2ba40:	2500      	movs	r5, #0
   2ba42:	e6b0      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2ba44:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2ba46:	9311      	str	r3, [sp, #68]	; 0x44
   2ba48:	6816      	ldr	r6, [r2, #0]
   2ba4a:	2400      	movs	r4, #0
   2ba4c:	f88d 4077 	strb.w	r4, [sp, #119]	; 0x77
   2ba50:	1d15      	adds	r5, r2, #4
   2ba52:	2e00      	cmp	r6, #0
   2ba54:	f000 86a7 	beq.w	2c7a6 <_svfprintf_r+0x11e6>
   2ba58:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2ba5a:	1c53      	adds	r3, r2, #1
   2ba5c:	f000 8609 	beq.w	2c672 <_svfprintf_r+0x10b2>
   2ba60:	4621      	mov	r1, r4
   2ba62:	4630      	mov	r0, r6
   2ba64:	f7d4 fbdc 	bl	220 <memchr>
   2ba68:	2800      	cmp	r0, #0
   2ba6a:	f000 86e1 	beq.w	2c830 <_svfprintf_r+0x1270>
   2ba6e:	1b83      	subs	r3, r0, r6
   2ba70:	930e      	str	r3, [sp, #56]	; 0x38
   2ba72:	940a      	str	r4, [sp, #40]	; 0x28
   2ba74:	950f      	str	r5, [sp, #60]	; 0x3c
   2ba76:	f8cd b01c 	str.w	fp, [sp, #28]
   2ba7a:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2ba7e:	9308      	str	r3, [sp, #32]
   2ba80:	9412      	str	r4, [sp, #72]	; 0x48
   2ba82:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2ba86:	e6b3      	b.n	2b7f0 <_svfprintf_r+0x230>
   2ba88:	f89a 3000 	ldrb.w	r3, [sl]
   2ba8c:	2201      	movs	r2, #1
   2ba8e:	212b      	movs	r1, #43	; 0x2b
   2ba90:	e5ee      	b.n	2b670 <_svfprintf_r+0xb0>
   2ba92:	f04b 0b20 	orr.w	fp, fp, #32
   2ba96:	f89a 3000 	ldrb.w	r3, [sl]
   2ba9a:	e5e9      	b.n	2b670 <_svfprintf_r+0xb0>
   2ba9c:	9311      	str	r3, [sp, #68]	; 0x44
   2ba9e:	2a00      	cmp	r2, #0
   2baa0:	f040 8795 	bne.w	2c9ce <_svfprintf_r+0x140e>
   2baa4:	4b22      	ldr	r3, [pc, #136]	; (2bb30 <_svfprintf_r+0x570>)
   2baa6:	9318      	str	r3, [sp, #96]	; 0x60
   2baa8:	f01b 0f20 	tst.w	fp, #32
   2baac:	f040 8111 	bne.w	2bcd2 <_svfprintf_r+0x712>
   2bab0:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bab2:	f01b 0f10 	tst.w	fp, #16
   2bab6:	4613      	mov	r3, r2
   2bab8:	f040 83e1 	bne.w	2c27e <_svfprintf_r+0xcbe>
   2babc:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bac0:	f000 83dd 	beq.w	2c27e <_svfprintf_r+0xcbe>
   2bac4:	3304      	adds	r3, #4
   2bac6:	8814      	ldrh	r4, [r2, #0]
   2bac8:	930f      	str	r3, [sp, #60]	; 0x3c
   2baca:	2500      	movs	r5, #0
   2bacc:	f01b 0f01 	tst.w	fp, #1
   2bad0:	f000 810c 	beq.w	2bcec <_svfprintf_r+0x72c>
   2bad4:	ea54 0305 	orrs.w	r3, r4, r5
   2bad8:	f000 8108 	beq.w	2bcec <_svfprintf_r+0x72c>
   2badc:	2330      	movs	r3, #48	; 0x30
   2bade:	f89d 2044 	ldrb.w	r2, [sp, #68]	; 0x44
   2bae2:	f88d 3078 	strb.w	r3, [sp, #120]	; 0x78
   2bae6:	f88d 2079 	strb.w	r2, [sp, #121]	; 0x79
   2baea:	f04b 0b02 	orr.w	fp, fp, #2
   2baee:	2302      	movs	r3, #2
   2baf0:	e659      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2baf2:	f89a 3000 	ldrb.w	r3, [sl]
   2baf6:	2900      	cmp	r1, #0
   2baf8:	f47f adba 	bne.w	2b670 <_svfprintf_r+0xb0>
   2bafc:	2201      	movs	r2, #1
   2bafe:	2120      	movs	r1, #32
   2bb00:	e5b6      	b.n	2b670 <_svfprintf_r+0xb0>
   2bb02:	f04b 0b01 	orr.w	fp, fp, #1
   2bb06:	f89a 3000 	ldrb.w	r3, [sl]
   2bb0a:	e5b1      	b.n	2b670 <_svfprintf_r+0xb0>
   2bb0c:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   2bb0e:	6823      	ldr	r3, [r4, #0]
   2bb10:	930d      	str	r3, [sp, #52]	; 0x34
   2bb12:	4618      	mov	r0, r3
   2bb14:	2800      	cmp	r0, #0
   2bb16:	4623      	mov	r3, r4
   2bb18:	f103 0304 	add.w	r3, r3, #4
   2bb1c:	f6ff ae0a 	blt.w	2b734 <_svfprintf_r+0x174>
   2bb20:	930f      	str	r3, [sp, #60]	; 0x3c
   2bb22:	f89a 3000 	ldrb.w	r3, [sl]
   2bb26:	e5a3      	b.n	2b670 <_svfprintf_r+0xb0>
   2bb28:	000333dc 	.word	0x000333dc
   2bb2c:	000333ec 	.word	0x000333ec
   2bb30:	000333c0 	.word	0x000333c0
   2bb34:	f04b 0b10 	orr.w	fp, fp, #16
   2bb38:	f01b 0f20 	tst.w	fp, #32
   2bb3c:	9311      	str	r3, [sp, #68]	; 0x44
   2bb3e:	f43f ae23 	beq.w	2b788 <_svfprintf_r+0x1c8>
   2bb42:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bb44:	3507      	adds	r5, #7
   2bb46:	f025 0307 	bic.w	r3, r5, #7
   2bb4a:	f103 0208 	add.w	r2, r3, #8
   2bb4e:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bb52:	920f      	str	r2, [sp, #60]	; 0x3c
   2bb54:	2301      	movs	r3, #1
   2bb56:	e626      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2bb58:	f89a 3000 	ldrb.w	r3, [sl]
   2bb5c:	2b2a      	cmp	r3, #42	; 0x2a
   2bb5e:	f10a 0401 	add.w	r4, sl, #1
   2bb62:	f000 8727 	beq.w	2c9b4 <_svfprintf_r+0x13f4>
   2bb66:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bb6a:	2809      	cmp	r0, #9
   2bb6c:	46a2      	mov	sl, r4
   2bb6e:	f200 86ad 	bhi.w	2c8cc <_svfprintf_r+0x130c>
   2bb72:	2300      	movs	r3, #0
   2bb74:	461c      	mov	r4, r3
   2bb76:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bb7a:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bb7e:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bb82:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bb86:	2809      	cmp	r0, #9
   2bb88:	d9f5      	bls.n	2bb76 <_svfprintf_r+0x5b6>
   2bb8a:	940a      	str	r4, [sp, #40]	; 0x28
   2bb8c:	e572      	b.n	2b674 <_svfprintf_r+0xb4>
   2bb8e:	f04b 0b80 	orr.w	fp, fp, #128	; 0x80
   2bb92:	f89a 3000 	ldrb.w	r3, [sl]
   2bb96:	e56b      	b.n	2b670 <_svfprintf_r+0xb0>
   2bb98:	f04b 0b40 	orr.w	fp, fp, #64	; 0x40
   2bb9c:	f89a 3000 	ldrb.w	r3, [sl]
   2bba0:	e566      	b.n	2b670 <_svfprintf_r+0xb0>
   2bba2:	f89a 3000 	ldrb.w	r3, [sl]
   2bba6:	2b6c      	cmp	r3, #108	; 0x6c
   2bba8:	bf03      	ittte	eq
   2bbaa:	f89a 3001 	ldrbeq.w	r3, [sl, #1]
   2bbae:	f04b 0b20 	orreq.w	fp, fp, #32
   2bbb2:	f10a 0a01 	addeq.w	sl, sl, #1
   2bbb6:	f04b 0b10 	orrne.w	fp, fp, #16
   2bbba:	e559      	b.n	2b670 <_svfprintf_r+0xb0>
   2bbbc:	2a00      	cmp	r2, #0
   2bbbe:	f040 8711 	bne.w	2c9e4 <_svfprintf_r+0x1424>
   2bbc2:	f01b 0f20 	tst.w	fp, #32
   2bbc6:	f040 84f9 	bne.w	2c5bc <_svfprintf_r+0xffc>
   2bbca:	f01b 0f10 	tst.w	fp, #16
   2bbce:	f040 84ac 	bne.w	2c52a <_svfprintf_r+0xf6a>
   2bbd2:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bbd6:	f000 84a8 	beq.w	2c52a <_svfprintf_r+0xf6a>
   2bbda:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2bbdc:	6813      	ldr	r3, [r2, #0]
   2bbde:	3204      	adds	r2, #4
   2bbe0:	920f      	str	r2, [sp, #60]	; 0x3c
   2bbe2:	f8bd 2024 	ldrh.w	r2, [sp, #36]	; 0x24
   2bbe6:	801a      	strh	r2, [r3, #0]
   2bbe8:	e511      	b.n	2b60e <_svfprintf_r+0x4e>
   2bbea:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bbec:	4bb3      	ldr	r3, [pc, #716]	; (2bebc <_svfprintf_r+0x8fc>)
   2bbee:	680c      	ldr	r4, [r1, #0]
   2bbf0:	9318      	str	r3, [sp, #96]	; 0x60
   2bbf2:	2230      	movs	r2, #48	; 0x30
   2bbf4:	2378      	movs	r3, #120	; 0x78
   2bbf6:	3104      	adds	r1, #4
   2bbf8:	f88d 3079 	strb.w	r3, [sp, #121]	; 0x79
   2bbfc:	9311      	str	r3, [sp, #68]	; 0x44
   2bbfe:	f04b 0b02 	orr.w	fp, fp, #2
   2bc02:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc04:	2500      	movs	r5, #0
   2bc06:	f88d 2078 	strb.w	r2, [sp, #120]	; 0x78
   2bc0a:	2302      	movs	r3, #2
   2bc0c:	e5cb      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2bc0e:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc10:	9311      	str	r3, [sp, #68]	; 0x44
   2bc12:	680a      	ldr	r2, [r1, #0]
   2bc14:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2bc18:	2300      	movs	r3, #0
   2bc1a:	460a      	mov	r2, r1
   2bc1c:	461f      	mov	r7, r3
   2bc1e:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2bc22:	3204      	adds	r2, #4
   2bc24:	2301      	movs	r3, #1
   2bc26:	9308      	str	r3, [sp, #32]
   2bc28:	f8cd b01c 	str.w	fp, [sp, #28]
   2bc2c:	970a      	str	r7, [sp, #40]	; 0x28
   2bc2e:	9712      	str	r7, [sp, #72]	; 0x48
   2bc30:	920f      	str	r2, [sp, #60]	; 0x3c
   2bc32:	930e      	str	r3, [sp, #56]	; 0x38
   2bc34:	ae28      	add	r6, sp, #160	; 0xa0
   2bc36:	e5df      	b.n	2b7f8 <_svfprintf_r+0x238>
   2bc38:	9311      	str	r3, [sp, #68]	; 0x44
   2bc3a:	2a00      	cmp	r2, #0
   2bc3c:	f040 86ea 	bne.w	2ca14 <_svfprintf_r+0x1454>
   2bc40:	f01b 0f20 	tst.w	fp, #32
   2bc44:	d15d      	bne.n	2bd02 <_svfprintf_r+0x742>
   2bc46:	f01b 0f10 	tst.w	fp, #16
   2bc4a:	f040 8308 	bne.w	2c25e <_svfprintf_r+0xc9e>
   2bc4e:	f01b 0f40 	tst.w	fp, #64	; 0x40
   2bc52:	f000 8304 	beq.w	2c25e <_svfprintf_r+0xc9e>
   2bc56:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2bc58:	f9b1 4000 	ldrsh.w	r4, [r1]
   2bc5c:	3104      	adds	r1, #4
   2bc5e:	17e5      	asrs	r5, r4, #31
   2bc60:	4622      	mov	r2, r4
   2bc62:	462b      	mov	r3, r5
   2bc64:	910f      	str	r1, [sp, #60]	; 0x3c
   2bc66:	2a00      	cmp	r2, #0
   2bc68:	f173 0300 	sbcs.w	r3, r3, #0
   2bc6c:	db58      	blt.n	2bd20 <_svfprintf_r+0x760>
   2bc6e:	990a      	ldr	r1, [sp, #40]	; 0x28
   2bc70:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bc74:	1c4a      	adds	r2, r1, #1
   2bc76:	f04f 0301 	mov.w	r3, #1
   2bc7a:	f47f ad9b 	bne.w	2b7b4 <_svfprintf_r+0x1f4>
   2bc7e:	ea54 0205 	orrs.w	r2, r4, r5
   2bc82:	f000 81df 	beq.w	2c044 <_svfprintf_r+0xa84>
   2bc86:	f8cd b01c 	str.w	fp, [sp, #28]
   2bc8a:	2b01      	cmp	r3, #1
   2bc8c:	f000 827b 	beq.w	2c186 <_svfprintf_r+0xbc6>
   2bc90:	2b02      	cmp	r3, #2
   2bc92:	f040 8206 	bne.w	2c0a2 <_svfprintf_r+0xae2>
   2bc96:	9818      	ldr	r0, [sp, #96]	; 0x60
   2bc98:	464e      	mov	r6, r9
   2bc9a:	0923      	lsrs	r3, r4, #4
   2bc9c:	f004 010f 	and.w	r1, r4, #15
   2bca0:	ea43 7305 	orr.w	r3, r3, r5, lsl #28
   2bca4:	092a      	lsrs	r2, r5, #4
   2bca6:	461c      	mov	r4, r3
   2bca8:	4615      	mov	r5, r2
   2bcaa:	5c43      	ldrb	r3, [r0, r1]
   2bcac:	f806 3d01 	strb.w	r3, [r6, #-1]!
   2bcb0:	ea54 0305 	orrs.w	r3, r4, r5
   2bcb4:	d1f1      	bne.n	2bc9a <_svfprintf_r+0x6da>
   2bcb6:	eba9 0306 	sub.w	r3, r9, r6
   2bcba:	930e      	str	r3, [sp, #56]	; 0x38
   2bcbc:	e590      	b.n	2b7e0 <_svfprintf_r+0x220>
   2bcbe:	9311      	str	r3, [sp, #68]	; 0x44
   2bcc0:	2a00      	cmp	r2, #0
   2bcc2:	f040 86a3 	bne.w	2ca0c <_svfprintf_r+0x144c>
   2bcc6:	4b7e      	ldr	r3, [pc, #504]	; (2bec0 <_svfprintf_r+0x900>)
   2bcc8:	9318      	str	r3, [sp, #96]	; 0x60
   2bcca:	f01b 0f20 	tst.w	fp, #32
   2bcce:	f43f aeef 	beq.w	2bab0 <_svfprintf_r+0x4f0>
   2bcd2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bcd4:	3507      	adds	r5, #7
   2bcd6:	f025 0307 	bic.w	r3, r5, #7
   2bcda:	f103 0208 	add.w	r2, r3, #8
   2bcde:	f01b 0f01 	tst.w	fp, #1
   2bce2:	920f      	str	r2, [sp, #60]	; 0x3c
   2bce4:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bce8:	f47f aef4 	bne.w	2bad4 <_svfprintf_r+0x514>
   2bcec:	2302      	movs	r3, #2
   2bcee:	e55a      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2bcf0:	9311      	str	r3, [sp, #68]	; 0x44
   2bcf2:	2a00      	cmp	r2, #0
   2bcf4:	f040 8686 	bne.w	2ca04 <_svfprintf_r+0x1444>
   2bcf8:	f04b 0b10 	orr.w	fp, fp, #16
   2bcfc:	f01b 0f20 	tst.w	fp, #32
   2bd00:	d0a1      	beq.n	2bc46 <_svfprintf_r+0x686>
   2bd02:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd04:	3507      	adds	r5, #7
   2bd06:	f025 0507 	bic.w	r5, r5, #7
   2bd0a:	e9d5 2300 	ldrd	r2, r3, [r5]
   2bd0e:	2a00      	cmp	r2, #0
   2bd10:	f105 0108 	add.w	r1, r5, #8
   2bd14:	461d      	mov	r5, r3
   2bd16:	f173 0300 	sbcs.w	r3, r3, #0
   2bd1a:	910f      	str	r1, [sp, #60]	; 0x3c
   2bd1c:	4614      	mov	r4, r2
   2bd1e:	daa6      	bge.n	2bc6e <_svfprintf_r+0x6ae>
   2bd20:	272d      	movs	r7, #45	; 0x2d
   2bd22:	4264      	negs	r4, r4
   2bd24:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   2bd28:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2bd2c:	2301      	movs	r3, #1
   2bd2e:	e53d      	b.n	2b7ac <_svfprintf_r+0x1ec>
   2bd30:	9311      	str	r3, [sp, #68]	; 0x44
   2bd32:	2a00      	cmp	r2, #0
   2bd34:	f040 8662 	bne.w	2c9fc <_svfprintf_r+0x143c>
   2bd38:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bd3a:	3507      	adds	r5, #7
   2bd3c:	f025 0307 	bic.w	r3, r5, #7
   2bd40:	f103 0208 	add.w	r2, r3, #8
   2bd44:	920f      	str	r2, [sp, #60]	; 0x3c
   2bd46:	681a      	ldr	r2, [r3, #0]
   2bd48:	9215      	str	r2, [sp, #84]	; 0x54
   2bd4a:	685b      	ldr	r3, [r3, #4]
   2bd4c:	9314      	str	r3, [sp, #80]	; 0x50
   2bd4e:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2bd50:	9d15      	ldr	r5, [sp, #84]	; 0x54
   2bd52:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   2bd56:	4628      	mov	r0, r5
   2bd58:	4621      	mov	r1, r4
   2bd5a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd5e:	4b59      	ldr	r3, [pc, #356]	; (2bec4 <_svfprintf_r+0x904>)
   2bd60:	f7d5 f98e 	bl	1080 <__aeabi_dcmpun>
   2bd64:	2800      	cmp	r0, #0
   2bd66:	f040 834a 	bne.w	2c3fe <_svfprintf_r+0xe3e>
   2bd6a:	4628      	mov	r0, r5
   2bd6c:	4621      	mov	r1, r4
   2bd6e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2bd72:	4b54      	ldr	r3, [pc, #336]	; (2bec4 <_svfprintf_r+0x904>)
   2bd74:	f7d5 f966 	bl	1044 <__aeabi_dcmple>
   2bd78:	2800      	cmp	r0, #0
   2bd7a:	f040 8340 	bne.w	2c3fe <_svfprintf_r+0xe3e>
   2bd7e:	a815      	add	r0, sp, #84	; 0x54
   2bd80:	c80d      	ldmia	r0, {r0, r2, r3}
   2bd82:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bd84:	f7d5 f954 	bl	1030 <__aeabi_dcmplt>
   2bd88:	2800      	cmp	r0, #0
   2bd8a:	f040 8530 	bne.w	2c7ee <_svfprintf_r+0x122e>
   2bd8e:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2bd92:	4e4d      	ldr	r6, [pc, #308]	; (2bec8 <_svfprintf_r+0x908>)
   2bd94:	4b4d      	ldr	r3, [pc, #308]	; (2becc <_svfprintf_r+0x90c>)
   2bd96:	f02b 0080 	bic.w	r0, fp, #128	; 0x80
   2bd9a:	9007      	str	r0, [sp, #28]
   2bd9c:	9811      	ldr	r0, [sp, #68]	; 0x44
   2bd9e:	2203      	movs	r2, #3
   2bda0:	2100      	movs	r1, #0
   2bda2:	9208      	str	r2, [sp, #32]
   2bda4:	910a      	str	r1, [sp, #40]	; 0x28
   2bda6:	2847      	cmp	r0, #71	; 0x47
   2bda8:	bfd8      	it	le
   2bdaa:	461e      	movle	r6, r3
   2bdac:	920e      	str	r2, [sp, #56]	; 0x38
   2bdae:	9112      	str	r1, [sp, #72]	; 0x48
   2bdb0:	e51e      	b.n	2b7f0 <_svfprintf_r+0x230>
   2bdb2:	f04b 0b08 	orr.w	fp, fp, #8
   2bdb6:	f89a 3000 	ldrb.w	r3, [sl]
   2bdba:	e459      	b.n	2b670 <_svfprintf_r+0xb0>
   2bdbc:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bdc0:	2300      	movs	r3, #0
   2bdc2:	461c      	mov	r4, r3
   2bdc4:	f81a 3b01 	ldrb.w	r3, [sl], #1
   2bdc8:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   2bdcc:	eb00 0444 	add.w	r4, r0, r4, lsl #1
   2bdd0:	f1a3 0030 	sub.w	r0, r3, #48	; 0x30
   2bdd4:	2809      	cmp	r0, #9
   2bdd6:	d9f5      	bls.n	2bdc4 <_svfprintf_r+0x804>
   2bdd8:	940d      	str	r4, [sp, #52]	; 0x34
   2bdda:	e44b      	b.n	2b674 <_svfprintf_r+0xb4>
   2bddc:	f04b 0b10 	orr.w	fp, fp, #16
   2bde0:	9311      	str	r3, [sp, #68]	; 0x44
   2bde2:	f01b 0320 	ands.w	r3, fp, #32
   2bde6:	f43f ae1d 	beq.w	2ba24 <_svfprintf_r+0x464>
   2bdea:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2bdec:	3507      	adds	r5, #7
   2bdee:	f025 0307 	bic.w	r3, r5, #7
   2bdf2:	f103 0208 	add.w	r2, r3, #8
   2bdf6:	e9d3 4500 	ldrd	r4, r5, [r3]
   2bdfa:	920f      	str	r2, [sp, #60]	; 0x3c
   2bdfc:	2300      	movs	r3, #0
   2bdfe:	e4d2      	b.n	2b7a6 <_svfprintf_r+0x1e6>
   2be00:	9311      	str	r3, [sp, #68]	; 0x44
   2be02:	2a00      	cmp	r2, #0
   2be04:	f040 85e7 	bne.w	2c9d6 <_svfprintf_r+0x1416>
   2be08:	9a11      	ldr	r2, [sp, #68]	; 0x44
   2be0a:	2a00      	cmp	r2, #0
   2be0c:	f43f aca3 	beq.w	2b756 <_svfprintf_r+0x196>
   2be10:	2300      	movs	r3, #0
   2be12:	2101      	movs	r1, #1
   2be14:	461f      	mov	r7, r3
   2be16:	9108      	str	r1, [sp, #32]
   2be18:	f88d 20a0 	strb.w	r2, [sp, #160]	; 0xa0
   2be1c:	f8cd b01c 	str.w	fp, [sp, #28]
   2be20:	f88d 3077 	strb.w	r3, [sp, #119]	; 0x77
   2be24:	930a      	str	r3, [sp, #40]	; 0x28
   2be26:	9312      	str	r3, [sp, #72]	; 0x48
   2be28:	910e      	str	r1, [sp, #56]	; 0x38
   2be2a:	ae28      	add	r6, sp, #160	; 0xa0
   2be2c:	e4e4      	b.n	2b7f8 <_svfprintf_r+0x238>
   2be2e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2be30:	e534      	b.n	2b89c <_svfprintf_r+0x2dc>
   2be32:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2be34:	2b65      	cmp	r3, #101	; 0x65
   2be36:	f340 80a7 	ble.w	2bf88 <_svfprintf_r+0x9c8>
   2be3a:	a815      	add	r0, sp, #84	; 0x54
   2be3c:	c80d      	ldmia	r0, {r0, r2, r3}
   2be3e:	9914      	ldr	r1, [sp, #80]	; 0x50
   2be40:	f7d5 f8ec 	bl	101c <__aeabi_dcmpeq>
   2be44:	2800      	cmp	r0, #0
   2be46:	f000 8150 	beq.w	2c0ea <_svfprintf_r+0xb2a>
   2be4a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be4c:	4a20      	ldr	r2, [pc, #128]	; (2bed0 <_svfprintf_r+0x910>)
   2be4e:	f8c8 2000 	str.w	r2, [r8]
   2be52:	3301      	adds	r3, #1
   2be54:	3401      	adds	r4, #1
   2be56:	2201      	movs	r2, #1
   2be58:	2b07      	cmp	r3, #7
   2be5a:	9427      	str	r4, [sp, #156]	; 0x9c
   2be5c:	9326      	str	r3, [sp, #152]	; 0x98
   2be5e:	f8c8 2004 	str.w	r2, [r8, #4]
   2be62:	f300 836a 	bgt.w	2c53a <_svfprintf_r+0xf7a>
   2be66:	f108 0808 	add.w	r8, r8, #8
   2be6a:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2be6c:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2be6e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2be70:	4293      	cmp	r3, r2
   2be72:	db03      	blt.n	2be7c <_svfprintf_r+0x8bc>
   2be74:	9b07      	ldr	r3, [sp, #28]
   2be76:	07dd      	lsls	r5, r3, #31
   2be78:	f57f ad82 	bpl.w	2b980 <_svfprintf_r+0x3c0>
   2be7c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2be7e:	9919      	ldr	r1, [sp, #100]	; 0x64
   2be80:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2be82:	f8c8 2000 	str.w	r2, [r8]
   2be86:	3301      	adds	r3, #1
   2be88:	440c      	add	r4, r1
   2be8a:	2b07      	cmp	r3, #7
   2be8c:	f8c8 1004 	str.w	r1, [r8, #4]
   2be90:	9427      	str	r4, [sp, #156]	; 0x9c
   2be92:	9326      	str	r3, [sp, #152]	; 0x98
   2be94:	f300 839e 	bgt.w	2c5d4 <_svfprintf_r+0x1014>
   2be98:	f108 0808 	add.w	r8, r8, #8
   2be9c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2be9e:	1e5e      	subs	r6, r3, #1
   2bea0:	2e00      	cmp	r6, #0
   2bea2:	f77f ad6d 	ble.w	2b980 <_svfprintf_r+0x3c0>
   2bea6:	2e10      	cmp	r6, #16
   2bea8:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2beaa:	4d0a      	ldr	r5, [pc, #40]	; (2bed4 <_svfprintf_r+0x914>)
   2beac:	f340 81f5 	ble.w	2c29a <_svfprintf_r+0xcda>
   2beb0:	4622      	mov	r2, r4
   2beb2:	2710      	movs	r7, #16
   2beb4:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2beb8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2beba:	e013      	b.n	2bee4 <_svfprintf_r+0x924>
   2bebc:	000333c0 	.word	0x000333c0
   2bec0:	000333ac 	.word	0x000333ac
   2bec4:	7fefffff 	.word	0x7fefffff
   2bec8:	000333a0 	.word	0x000333a0
   2becc:	0003339c 	.word	0x0003339c
   2bed0:	00032f14 	.word	0x00032f14
   2bed4:	000333ec 	.word	0x000333ec
   2bed8:	f108 0808 	add.w	r8, r8, #8
   2bedc:	3e10      	subs	r6, #16
   2bede:	2e10      	cmp	r6, #16
   2bee0:	f340 81da 	ble.w	2c298 <_svfprintf_r+0xcd8>
   2bee4:	3301      	adds	r3, #1
   2bee6:	3210      	adds	r2, #16
   2bee8:	2b07      	cmp	r3, #7
   2beea:	9227      	str	r2, [sp, #156]	; 0x9c
   2beec:	9326      	str	r3, [sp, #152]	; 0x98
   2beee:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bef2:	ddf1      	ble.n	2bed8 <_svfprintf_r+0x918>
   2bef4:	aa25      	add	r2, sp, #148	; 0x94
   2bef6:	4621      	mov	r1, r4
   2bef8:	4658      	mov	r0, fp
   2befa:	f002 f99d 	bl	2e238 <__ssprint_r>
   2befe:	2800      	cmp	r0, #0
   2bf00:	f47f ac30 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2bf04:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2bf06:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf08:	46c8      	mov	r8, r9
   2bf0a:	e7e7      	b.n	2bedc <_svfprintf_r+0x91c>
   2bf0c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2bf0e:	9a08      	ldr	r2, [sp, #32]
   2bf10:	1a9f      	subs	r7, r3, r2
   2bf12:	2f00      	cmp	r7, #0
   2bf14:	f77f ace5 	ble.w	2b8e2 <_svfprintf_r+0x322>
   2bf18:	2f10      	cmp	r7, #16
   2bf1a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf1c:	4db6      	ldr	r5, [pc, #728]	; (2c1f8 <_svfprintf_r+0xc38>)
   2bf1e:	dd27      	ble.n	2bf70 <_svfprintf_r+0x9b0>
   2bf20:	4642      	mov	r2, r8
   2bf22:	4621      	mov	r1, r4
   2bf24:	46b0      	mov	r8, r6
   2bf26:	f04f 0b10 	mov.w	fp, #16
   2bf2a:	462e      	mov	r6, r5
   2bf2c:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2bf2e:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2bf30:	e004      	b.n	2bf3c <_svfprintf_r+0x97c>
   2bf32:	3f10      	subs	r7, #16
   2bf34:	2f10      	cmp	r7, #16
   2bf36:	f102 0208 	add.w	r2, r2, #8
   2bf3a:	dd15      	ble.n	2bf68 <_svfprintf_r+0x9a8>
   2bf3c:	3301      	adds	r3, #1
   2bf3e:	3110      	adds	r1, #16
   2bf40:	2b07      	cmp	r3, #7
   2bf42:	9127      	str	r1, [sp, #156]	; 0x9c
   2bf44:	9326      	str	r3, [sp, #152]	; 0x98
   2bf46:	e882 0840 	stmia.w	r2, {r6, fp}
   2bf4a:	ddf2      	ble.n	2bf32 <_svfprintf_r+0x972>
   2bf4c:	aa25      	add	r2, sp, #148	; 0x94
   2bf4e:	4629      	mov	r1, r5
   2bf50:	4620      	mov	r0, r4
   2bf52:	f002 f971 	bl	2e238 <__ssprint_r>
   2bf56:	2800      	cmp	r0, #0
   2bf58:	f47f ac04 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2bf5c:	3f10      	subs	r7, #16
   2bf5e:	2f10      	cmp	r7, #16
   2bf60:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2bf62:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2bf64:	464a      	mov	r2, r9
   2bf66:	dce9      	bgt.n	2bf3c <_svfprintf_r+0x97c>
   2bf68:	4635      	mov	r5, r6
   2bf6a:	460c      	mov	r4, r1
   2bf6c:	4646      	mov	r6, r8
   2bf6e:	4690      	mov	r8, r2
   2bf70:	3301      	adds	r3, #1
   2bf72:	443c      	add	r4, r7
   2bf74:	2b07      	cmp	r3, #7
   2bf76:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf78:	9326      	str	r3, [sp, #152]	; 0x98
   2bf7a:	e888 00a0 	stmia.w	r8, {r5, r7}
   2bf7e:	f300 8232 	bgt.w	2c3e6 <_svfprintf_r+0xe26>
   2bf82:	f108 0808 	add.w	r8, r8, #8
   2bf86:	e4ac      	b.n	2b8e2 <_svfprintf_r+0x322>
   2bf88:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bf8a:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2bf8c:	2b01      	cmp	r3, #1
   2bf8e:	f340 81fe 	ble.w	2c38e <_svfprintf_r+0xdce>
   2bf92:	3701      	adds	r7, #1
   2bf94:	3401      	adds	r4, #1
   2bf96:	2301      	movs	r3, #1
   2bf98:	2f07      	cmp	r7, #7
   2bf9a:	9427      	str	r4, [sp, #156]	; 0x9c
   2bf9c:	9726      	str	r7, [sp, #152]	; 0x98
   2bf9e:	f8c8 6000 	str.w	r6, [r8]
   2bfa2:	f8c8 3004 	str.w	r3, [r8, #4]
   2bfa6:	f300 8203 	bgt.w	2c3b0 <_svfprintf_r+0xdf0>
   2bfaa:	f108 0808 	add.w	r8, r8, #8
   2bfae:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2bfb0:	9b1a      	ldr	r3, [sp, #104]	; 0x68
   2bfb2:	f8c8 3000 	str.w	r3, [r8]
   2bfb6:	3701      	adds	r7, #1
   2bfb8:	4414      	add	r4, r2
   2bfba:	2f07      	cmp	r7, #7
   2bfbc:	9427      	str	r4, [sp, #156]	; 0x9c
   2bfbe:	9726      	str	r7, [sp, #152]	; 0x98
   2bfc0:	f8c8 2004 	str.w	r2, [r8, #4]
   2bfc4:	f300 8200 	bgt.w	2c3c8 <_svfprintf_r+0xe08>
   2bfc8:	f108 0808 	add.w	r8, r8, #8
   2bfcc:	a815      	add	r0, sp, #84	; 0x54
   2bfce:	c80d      	ldmia	r0, {r0, r2, r3}
   2bfd0:	9914      	ldr	r1, [sp, #80]	; 0x50
   2bfd2:	f7d5 f823 	bl	101c <__aeabi_dcmpeq>
   2bfd6:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2bfd8:	2800      	cmp	r0, #0
   2bfda:	f040 8101 	bne.w	2c1e0 <_svfprintf_r+0xc20>
   2bfde:	3b01      	subs	r3, #1
   2bfe0:	3701      	adds	r7, #1
   2bfe2:	3601      	adds	r6, #1
   2bfe4:	441c      	add	r4, r3
   2bfe6:	2f07      	cmp	r7, #7
   2bfe8:	9726      	str	r7, [sp, #152]	; 0x98
   2bfea:	9427      	str	r4, [sp, #156]	; 0x9c
   2bfec:	f8c8 6000 	str.w	r6, [r8]
   2bff0:	f8c8 3004 	str.w	r3, [r8, #4]
   2bff4:	f300 8127 	bgt.w	2c246 <_svfprintf_r+0xc86>
   2bff8:	f108 0808 	add.w	r8, r8, #8
   2bffc:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
   2bffe:	f8c8 2004 	str.w	r2, [r8, #4]
   2c002:	3701      	adds	r7, #1
   2c004:	4414      	add	r4, r2
   2c006:	ab21      	add	r3, sp, #132	; 0x84
   2c008:	2f07      	cmp	r7, #7
   2c00a:	9427      	str	r4, [sp, #156]	; 0x9c
   2c00c:	9726      	str	r7, [sp, #152]	; 0x98
   2c00e:	f8c8 3000 	str.w	r3, [r8]
   2c012:	f77f acb3 	ble.w	2b97c <_svfprintf_r+0x3bc>
   2c016:	aa25      	add	r2, sp, #148	; 0x94
   2c018:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c01a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c01c:	f002 f90c 	bl	2e238 <__ssprint_r>
   2c020:	2800      	cmp	r0, #0
   2c022:	f47f ab9f 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c026:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c028:	46c8      	mov	r8, r9
   2c02a:	e4a9      	b.n	2b980 <_svfprintf_r+0x3c0>
   2c02c:	aa25      	add	r2, sp, #148	; 0x94
   2c02e:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c030:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c032:	f002 f901 	bl	2e238 <__ssprint_r>
   2c036:	2800      	cmp	r0, #0
   2c038:	f43f aceb 	beq.w	2ba12 <_svfprintf_r+0x452>
   2c03c:	f7ff bb92 	b.w	2b764 <_svfprintf_r+0x1a4>
   2c040:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c044:	2b01      	cmp	r3, #1
   2c046:	f000 8134 	beq.w	2c2b2 <_svfprintf_r+0xcf2>
   2c04a:	2b02      	cmp	r3, #2
   2c04c:	d125      	bne.n	2c09a <_svfprintf_r+0xada>
   2c04e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c052:	2400      	movs	r4, #0
   2c054:	2500      	movs	r5, #0
   2c056:	e61e      	b.n	2bc96 <_svfprintf_r+0x6d6>
   2c058:	aa25      	add	r2, sp, #148	; 0x94
   2c05a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c05c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c05e:	f002 f8eb 	bl	2e238 <__ssprint_r>
   2c062:	2800      	cmp	r0, #0
   2c064:	f47f ab7e 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c068:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c06a:	46c8      	mov	r8, r9
   2c06c:	e475      	b.n	2b95a <_svfprintf_r+0x39a>
   2c06e:	aa25      	add	r2, sp, #148	; 0x94
   2c070:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c072:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c074:	f002 f8e0 	bl	2e238 <__ssprint_r>
   2c078:	2800      	cmp	r0, #0
   2c07a:	f47f ab73 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c07e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c080:	46c8      	mov	r8, r9
   2c082:	e41b      	b.n	2b8bc <_svfprintf_r+0x2fc>
   2c084:	aa25      	add	r2, sp, #148	; 0x94
   2c086:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c088:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c08a:	f002 f8d5 	bl	2e238 <__ssprint_r>
   2c08e:	2800      	cmp	r0, #0
   2c090:	f47f ab68 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c094:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c096:	46c8      	mov	r8, r9
   2c098:	e420      	b.n	2b8dc <_svfprintf_r+0x31c>
   2c09a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c09e:	2400      	movs	r4, #0
   2c0a0:	2500      	movs	r5, #0
   2c0a2:	4649      	mov	r1, r9
   2c0a4:	e000      	b.n	2c0a8 <_svfprintf_r+0xae8>
   2c0a6:	4631      	mov	r1, r6
   2c0a8:	08e2      	lsrs	r2, r4, #3
   2c0aa:	ea42 7245 	orr.w	r2, r2, r5, lsl #29
   2c0ae:	08e8      	lsrs	r0, r5, #3
   2c0b0:	f004 0307 	and.w	r3, r4, #7
   2c0b4:	4605      	mov	r5, r0
   2c0b6:	4614      	mov	r4, r2
   2c0b8:	3330      	adds	r3, #48	; 0x30
   2c0ba:	ea54 0205 	orrs.w	r2, r4, r5
   2c0be:	f801 3c01 	strb.w	r3, [r1, #-1]
   2c0c2:	f101 36ff 	add.w	r6, r1, #4294967295	; 0xffffffff
   2c0c6:	d1ee      	bne.n	2c0a6 <_svfprintf_r+0xae6>
   2c0c8:	9a07      	ldr	r2, [sp, #28]
   2c0ca:	07d2      	lsls	r2, r2, #31
   2c0cc:	f57f adf3 	bpl.w	2bcb6 <_svfprintf_r+0x6f6>
   2c0d0:	2b30      	cmp	r3, #48	; 0x30
   2c0d2:	f43f adf0 	beq.w	2bcb6 <_svfprintf_r+0x6f6>
   2c0d6:	3902      	subs	r1, #2
   2c0d8:	2330      	movs	r3, #48	; 0x30
   2c0da:	f806 3c01 	strb.w	r3, [r6, #-1]
   2c0de:	eba9 0301 	sub.w	r3, r9, r1
   2c0e2:	930e      	str	r3, [sp, #56]	; 0x38
   2c0e4:	460e      	mov	r6, r1
   2c0e6:	f7ff bb7b 	b.w	2b7e0 <_svfprintf_r+0x220>
   2c0ea:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c0ec:	2900      	cmp	r1, #0
   2c0ee:	f340 822e 	ble.w	2c54e <_svfprintf_r+0xf8e>
   2c0f2:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c0f4:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c0f6:	4293      	cmp	r3, r2
   2c0f8:	bfa8      	it	ge
   2c0fa:	4613      	movge	r3, r2
   2c0fc:	2b00      	cmp	r3, #0
   2c0fe:	461f      	mov	r7, r3
   2c100:	dd0d      	ble.n	2c11e <_svfprintf_r+0xb5e>
   2c102:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c104:	f8c8 6000 	str.w	r6, [r8]
   2c108:	3301      	adds	r3, #1
   2c10a:	443c      	add	r4, r7
   2c10c:	2b07      	cmp	r3, #7
   2c10e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c110:	f8c8 7004 	str.w	r7, [r8, #4]
   2c114:	9326      	str	r3, [sp, #152]	; 0x98
   2c116:	f300 831f 	bgt.w	2c758 <_svfprintf_r+0x1198>
   2c11a:	f108 0808 	add.w	r8, r8, #8
   2c11e:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c120:	2f00      	cmp	r7, #0
   2c122:	bfa8      	it	ge
   2c124:	1bdb      	subge	r3, r3, r7
   2c126:	2b00      	cmp	r3, #0
   2c128:	461f      	mov	r7, r3
   2c12a:	f340 80d6 	ble.w	2c2da <_svfprintf_r+0xd1a>
   2c12e:	2f10      	cmp	r7, #16
   2c130:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c132:	4d31      	ldr	r5, [pc, #196]	; (2c1f8 <_svfprintf_r+0xc38>)
   2c134:	f340 81ed 	ble.w	2c512 <_svfprintf_r+0xf52>
   2c138:	4642      	mov	r2, r8
   2c13a:	4621      	mov	r1, r4
   2c13c:	46b0      	mov	r8, r6
   2c13e:	f04f 0b10 	mov.w	fp, #16
   2c142:	462e      	mov	r6, r5
   2c144:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c146:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   2c148:	e004      	b.n	2c154 <_svfprintf_r+0xb94>
   2c14a:	3208      	adds	r2, #8
   2c14c:	3f10      	subs	r7, #16
   2c14e:	2f10      	cmp	r7, #16
   2c150:	f340 81db 	ble.w	2c50a <_svfprintf_r+0xf4a>
   2c154:	3301      	adds	r3, #1
   2c156:	3110      	adds	r1, #16
   2c158:	2b07      	cmp	r3, #7
   2c15a:	9127      	str	r1, [sp, #156]	; 0x9c
   2c15c:	9326      	str	r3, [sp, #152]	; 0x98
   2c15e:	e882 0840 	stmia.w	r2, {r6, fp}
   2c162:	ddf2      	ble.n	2c14a <_svfprintf_r+0xb8a>
   2c164:	aa25      	add	r2, sp, #148	; 0x94
   2c166:	4629      	mov	r1, r5
   2c168:	4620      	mov	r0, r4
   2c16a:	f002 f865 	bl	2e238 <__ssprint_r>
   2c16e:	2800      	cmp	r0, #0
   2c170:	f47f aaf8 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c174:	9927      	ldr	r1, [sp, #156]	; 0x9c
   2c176:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c178:	464a      	mov	r2, r9
   2c17a:	e7e7      	b.n	2c14c <_svfprintf_r+0xb8c>
   2c17c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c17e:	930e      	str	r3, [sp, #56]	; 0x38
   2c180:	464e      	mov	r6, r9
   2c182:	f7ff bb2d 	b.w	2b7e0 <_svfprintf_r+0x220>
   2c186:	2d00      	cmp	r5, #0
   2c188:	bf08      	it	eq
   2c18a:	2c0a      	cmpeq	r4, #10
   2c18c:	f0c0 808f 	bcc.w	2c2ae <_svfprintf_r+0xcee>
   2c190:	464e      	mov	r6, r9
   2c192:	4620      	mov	r0, r4
   2c194:	4629      	mov	r1, r5
   2c196:	220a      	movs	r2, #10
   2c198:	2300      	movs	r3, #0
   2c19a:	f7d4 ffaf 	bl	10fc <__aeabi_uldivmod>
   2c19e:	3230      	adds	r2, #48	; 0x30
   2c1a0:	f806 2d01 	strb.w	r2, [r6, #-1]!
   2c1a4:	4620      	mov	r0, r4
   2c1a6:	4629      	mov	r1, r5
   2c1a8:	2300      	movs	r3, #0
   2c1aa:	220a      	movs	r2, #10
   2c1ac:	f7d4 ffa6 	bl	10fc <__aeabi_uldivmod>
   2c1b0:	4604      	mov	r4, r0
   2c1b2:	460d      	mov	r5, r1
   2c1b4:	ea54 0305 	orrs.w	r3, r4, r5
   2c1b8:	d1eb      	bne.n	2c192 <_svfprintf_r+0xbd2>
   2c1ba:	eba9 0306 	sub.w	r3, r9, r6
   2c1be:	930e      	str	r3, [sp, #56]	; 0x38
   2c1c0:	f7ff bb0e 	b.w	2b7e0 <_svfprintf_r+0x220>
   2c1c4:	aa25      	add	r2, sp, #148	; 0x94
   2c1c6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c1c8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c1ca:	f002 f835 	bl	2e238 <__ssprint_r>
   2c1ce:	2800      	cmp	r0, #0
   2c1d0:	f47f aac8 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c1d4:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c1d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c1da:	46c8      	mov	r8, r9
   2c1dc:	f7ff bb5e 	b.w	2b89c <_svfprintf_r+0x2dc>
   2c1e0:	1e5e      	subs	r6, r3, #1
   2c1e2:	2e00      	cmp	r6, #0
   2c1e4:	f77f af0a 	ble.w	2bffc <_svfprintf_r+0xa3c>
   2c1e8:	2e10      	cmp	r6, #16
   2c1ea:	4d03      	ldr	r5, [pc, #12]	; (2c1f8 <_svfprintf_r+0xc38>)
   2c1ec:	dd22      	ble.n	2c234 <_svfprintf_r+0xc74>
   2c1ee:	4622      	mov	r2, r4
   2c1f0:	f04f 0b10 	mov.w	fp, #16
   2c1f4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2c1f6:	e006      	b.n	2c206 <_svfprintf_r+0xc46>
   2c1f8:	000333ec 	.word	0x000333ec
   2c1fc:	3e10      	subs	r6, #16
   2c1fe:	2e10      	cmp	r6, #16
   2c200:	f108 0808 	add.w	r8, r8, #8
   2c204:	dd15      	ble.n	2c232 <_svfprintf_r+0xc72>
   2c206:	3701      	adds	r7, #1
   2c208:	3210      	adds	r2, #16
   2c20a:	2f07      	cmp	r7, #7
   2c20c:	9227      	str	r2, [sp, #156]	; 0x9c
   2c20e:	9726      	str	r7, [sp, #152]	; 0x98
   2c210:	e888 0820 	stmia.w	r8, {r5, fp}
   2c214:	ddf2      	ble.n	2c1fc <_svfprintf_r+0xc3c>
   2c216:	aa25      	add	r2, sp, #148	; 0x94
   2c218:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c21a:	4620      	mov	r0, r4
   2c21c:	f002 f80c 	bl	2e238 <__ssprint_r>
   2c220:	2800      	cmp	r0, #0
   2c222:	f47f aa9f 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c226:	3e10      	subs	r6, #16
   2c228:	2e10      	cmp	r6, #16
   2c22a:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c22c:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c22e:	46c8      	mov	r8, r9
   2c230:	dce9      	bgt.n	2c206 <_svfprintf_r+0xc46>
   2c232:	4614      	mov	r4, r2
   2c234:	3701      	adds	r7, #1
   2c236:	4434      	add	r4, r6
   2c238:	2f07      	cmp	r7, #7
   2c23a:	9427      	str	r4, [sp, #156]	; 0x9c
   2c23c:	9726      	str	r7, [sp, #152]	; 0x98
   2c23e:	e888 0060 	stmia.w	r8, {r5, r6}
   2c242:	f77f aed9 	ble.w	2bff8 <_svfprintf_r+0xa38>
   2c246:	aa25      	add	r2, sp, #148	; 0x94
   2c248:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c24a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c24c:	f001 fff4 	bl	2e238 <__ssprint_r>
   2c250:	2800      	cmp	r0, #0
   2c252:	f47f aa87 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c256:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c258:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c25a:	46c8      	mov	r8, r9
   2c25c:	e6ce      	b.n	2bffc <_svfprintf_r+0xa3c>
   2c25e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c260:	6814      	ldr	r4, [r2, #0]
   2c262:	4613      	mov	r3, r2
   2c264:	3304      	adds	r3, #4
   2c266:	17e5      	asrs	r5, r4, #31
   2c268:	930f      	str	r3, [sp, #60]	; 0x3c
   2c26a:	4622      	mov	r2, r4
   2c26c:	462b      	mov	r3, r5
   2c26e:	e4fa      	b.n	2bc66 <_svfprintf_r+0x6a6>
   2c270:	3204      	adds	r2, #4
   2c272:	681c      	ldr	r4, [r3, #0]
   2c274:	920f      	str	r2, [sp, #60]	; 0x3c
   2c276:	2301      	movs	r3, #1
   2c278:	2500      	movs	r5, #0
   2c27a:	f7ff ba94 	b.w	2b7a6 <_svfprintf_r+0x1e6>
   2c27e:	681c      	ldr	r4, [r3, #0]
   2c280:	3304      	adds	r3, #4
   2c282:	930f      	str	r3, [sp, #60]	; 0x3c
   2c284:	2500      	movs	r5, #0
   2c286:	e421      	b.n	2bacc <_svfprintf_r+0x50c>
   2c288:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2c28a:	460a      	mov	r2, r1
   2c28c:	3204      	adds	r2, #4
   2c28e:	680c      	ldr	r4, [r1, #0]
   2c290:	920f      	str	r2, [sp, #60]	; 0x3c
   2c292:	2500      	movs	r5, #0
   2c294:	f7ff ba87 	b.w	2b7a6 <_svfprintf_r+0x1e6>
   2c298:	4614      	mov	r4, r2
   2c29a:	3301      	adds	r3, #1
   2c29c:	4434      	add	r4, r6
   2c29e:	2b07      	cmp	r3, #7
   2c2a0:	9427      	str	r4, [sp, #156]	; 0x9c
   2c2a2:	9326      	str	r3, [sp, #152]	; 0x98
   2c2a4:	e888 0060 	stmia.w	r8, {r5, r6}
   2c2a8:	f77f ab68 	ble.w	2b97c <_svfprintf_r+0x3bc>
   2c2ac:	e6b3      	b.n	2c016 <_svfprintf_r+0xa56>
   2c2ae:	f8dd b01c 	ldr.w	fp, [sp, #28]
   2c2b2:	f8cd b01c 	str.w	fp, [sp, #28]
   2c2b6:	ae42      	add	r6, sp, #264	; 0x108
   2c2b8:	3430      	adds	r4, #48	; 0x30
   2c2ba:	2301      	movs	r3, #1
   2c2bc:	f806 4d41 	strb.w	r4, [r6, #-65]!
   2c2c0:	930e      	str	r3, [sp, #56]	; 0x38
   2c2c2:	f7ff ba8d 	b.w	2b7e0 <_svfprintf_r+0x220>
   2c2c6:	aa25      	add	r2, sp, #148	; 0x94
   2c2c8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c2ca:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c2cc:	f001 ffb4 	bl	2e238 <__ssprint_r>
   2c2d0:	2800      	cmp	r0, #0
   2c2d2:	f47f aa47 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c2d6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c2d8:	46c8      	mov	r8, r9
   2c2da:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c2dc:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c2de:	429a      	cmp	r2, r3
   2c2e0:	db44      	blt.n	2c36c <_svfprintf_r+0xdac>
   2c2e2:	9b07      	ldr	r3, [sp, #28]
   2c2e4:	07d9      	lsls	r1, r3, #31
   2c2e6:	d441      	bmi.n	2c36c <_svfprintf_r+0xdac>
   2c2e8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c2ea:	9812      	ldr	r0, [sp, #72]	; 0x48
   2c2ec:	1a9a      	subs	r2, r3, r2
   2c2ee:	1a1d      	subs	r5, r3, r0
   2c2f0:	4295      	cmp	r5, r2
   2c2f2:	bfa8      	it	ge
   2c2f4:	4615      	movge	r5, r2
   2c2f6:	2d00      	cmp	r5, #0
   2c2f8:	dd0e      	ble.n	2c318 <_svfprintf_r+0xd58>
   2c2fa:	9926      	ldr	r1, [sp, #152]	; 0x98
   2c2fc:	f8c8 5004 	str.w	r5, [r8, #4]
   2c300:	3101      	adds	r1, #1
   2c302:	4406      	add	r6, r0
   2c304:	442c      	add	r4, r5
   2c306:	2907      	cmp	r1, #7
   2c308:	f8c8 6000 	str.w	r6, [r8]
   2c30c:	9427      	str	r4, [sp, #156]	; 0x9c
   2c30e:	9126      	str	r1, [sp, #152]	; 0x98
   2c310:	f300 823b 	bgt.w	2c78a <_svfprintf_r+0x11ca>
   2c314:	f108 0808 	add.w	r8, r8, #8
   2c318:	2d00      	cmp	r5, #0
   2c31a:	bfac      	ite	ge
   2c31c:	1b56      	subge	r6, r2, r5
   2c31e:	4616      	movlt	r6, r2
   2c320:	2e00      	cmp	r6, #0
   2c322:	f77f ab2d 	ble.w	2b980 <_svfprintf_r+0x3c0>
   2c326:	2e10      	cmp	r6, #16
   2c328:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c32a:	4db0      	ldr	r5, [pc, #704]	; (2c5ec <_svfprintf_r+0x102c>)
   2c32c:	ddb5      	ble.n	2c29a <_svfprintf_r+0xcda>
   2c32e:	4622      	mov	r2, r4
   2c330:	2710      	movs	r7, #16
   2c332:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c336:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   2c338:	e004      	b.n	2c344 <_svfprintf_r+0xd84>
   2c33a:	f108 0808 	add.w	r8, r8, #8
   2c33e:	3e10      	subs	r6, #16
   2c340:	2e10      	cmp	r6, #16
   2c342:	dda9      	ble.n	2c298 <_svfprintf_r+0xcd8>
   2c344:	3301      	adds	r3, #1
   2c346:	3210      	adds	r2, #16
   2c348:	2b07      	cmp	r3, #7
   2c34a:	9227      	str	r2, [sp, #156]	; 0x9c
   2c34c:	9326      	str	r3, [sp, #152]	; 0x98
   2c34e:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c352:	ddf2      	ble.n	2c33a <_svfprintf_r+0xd7a>
   2c354:	aa25      	add	r2, sp, #148	; 0x94
   2c356:	4621      	mov	r1, r4
   2c358:	4658      	mov	r0, fp
   2c35a:	f001 ff6d 	bl	2e238 <__ssprint_r>
   2c35e:	2800      	cmp	r0, #0
   2c360:	f47f aa00 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c364:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c366:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c368:	46c8      	mov	r8, r9
   2c36a:	e7e8      	b.n	2c33e <_svfprintf_r+0xd7e>
   2c36c:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c36e:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c370:	991a      	ldr	r1, [sp, #104]	; 0x68
   2c372:	f8c8 1000 	str.w	r1, [r8]
   2c376:	3301      	adds	r3, #1
   2c378:	4404      	add	r4, r0
   2c37a:	2b07      	cmp	r3, #7
   2c37c:	9427      	str	r4, [sp, #156]	; 0x9c
   2c37e:	f8c8 0004 	str.w	r0, [r8, #4]
   2c382:	9326      	str	r3, [sp, #152]	; 0x98
   2c384:	f300 81f5 	bgt.w	2c772 <_svfprintf_r+0x11b2>
   2c388:	f108 0808 	add.w	r8, r8, #8
   2c38c:	e7ac      	b.n	2c2e8 <_svfprintf_r+0xd28>
   2c38e:	9b07      	ldr	r3, [sp, #28]
   2c390:	07da      	lsls	r2, r3, #31
   2c392:	f53f adfe 	bmi.w	2bf92 <_svfprintf_r+0x9d2>
   2c396:	3701      	adds	r7, #1
   2c398:	3401      	adds	r4, #1
   2c39a:	2301      	movs	r3, #1
   2c39c:	2f07      	cmp	r7, #7
   2c39e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c3a0:	9726      	str	r7, [sp, #152]	; 0x98
   2c3a2:	f8c8 6000 	str.w	r6, [r8]
   2c3a6:	f8c8 3004 	str.w	r3, [r8, #4]
   2c3aa:	f77f ae25 	ble.w	2bff8 <_svfprintf_r+0xa38>
   2c3ae:	e74a      	b.n	2c246 <_svfprintf_r+0xc86>
   2c3b0:	aa25      	add	r2, sp, #148	; 0x94
   2c3b2:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c3b4:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c3b6:	f001 ff3f 	bl	2e238 <__ssprint_r>
   2c3ba:	2800      	cmp	r0, #0
   2c3bc:	f47f a9d2 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c3c0:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c3c2:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c3c4:	46c8      	mov	r8, r9
   2c3c6:	e5f2      	b.n	2bfae <_svfprintf_r+0x9ee>
   2c3c8:	aa25      	add	r2, sp, #148	; 0x94
   2c3ca:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c3cc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c3ce:	f001 ff33 	bl	2e238 <__ssprint_r>
   2c3d2:	2800      	cmp	r0, #0
   2c3d4:	f47f a9c6 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c3d8:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c3da:	9f26      	ldr	r7, [sp, #152]	; 0x98
   2c3dc:	46c8      	mov	r8, r9
   2c3de:	e5f5      	b.n	2bfcc <_svfprintf_r+0xa0c>
   2c3e0:	464e      	mov	r6, r9
   2c3e2:	f7ff b9fd 	b.w	2b7e0 <_svfprintf_r+0x220>
   2c3e6:	aa25      	add	r2, sp, #148	; 0x94
   2c3e8:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c3ea:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c3ec:	f001 ff24 	bl	2e238 <__ssprint_r>
   2c3f0:	2800      	cmp	r0, #0
   2c3f2:	f47f a9b7 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c3f6:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c3f8:	46c8      	mov	r8, r9
   2c3fa:	f7ff ba72 	b.w	2b8e2 <_svfprintf_r+0x322>
   2c3fe:	9c15      	ldr	r4, [sp, #84]	; 0x54
   2c400:	4622      	mov	r2, r4
   2c402:	4620      	mov	r0, r4
   2c404:	9c14      	ldr	r4, [sp, #80]	; 0x50
   2c406:	4623      	mov	r3, r4
   2c408:	4621      	mov	r1, r4
   2c40a:	f7d4 fe39 	bl	1080 <__aeabi_dcmpun>
   2c40e:	2800      	cmp	r0, #0
   2c410:	f040 8286 	bne.w	2c920 <_svfprintf_r+0x1360>
   2c414:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c416:	3301      	adds	r3, #1
   2c418:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c41a:	f023 0320 	bic.w	r3, r3, #32
   2c41e:	930e      	str	r3, [sp, #56]	; 0x38
   2c420:	f000 81e2 	beq.w	2c7e8 <_svfprintf_r+0x1228>
   2c424:	2b47      	cmp	r3, #71	; 0x47
   2c426:	f000 811e 	beq.w	2c666 <_svfprintf_r+0x10a6>
   2c42a:	f44b 7380 	orr.w	r3, fp, #256	; 0x100
   2c42e:	9307      	str	r3, [sp, #28]
   2c430:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c432:	1e1f      	subs	r7, r3, #0
   2c434:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2c436:	9308      	str	r3, [sp, #32]
   2c438:	bfbb      	ittet	lt
   2c43a:	463b      	movlt	r3, r7
   2c43c:	f103 4700 	addlt.w	r7, r3, #2147483648	; 0x80000000
   2c440:	2300      	movge	r3, #0
   2c442:	232d      	movlt	r3, #45	; 0x2d
   2c444:	9310      	str	r3, [sp, #64]	; 0x40
   2c446:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c448:	2b66      	cmp	r3, #102	; 0x66
   2c44a:	f000 81bb 	beq.w	2c7c4 <_svfprintf_r+0x1204>
   2c44e:	2b46      	cmp	r3, #70	; 0x46
   2c450:	f000 80df 	beq.w	2c612 <_svfprintf_r+0x1052>
   2c454:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c456:	9a08      	ldr	r2, [sp, #32]
   2c458:	2b45      	cmp	r3, #69	; 0x45
   2c45a:	bf0c      	ite	eq
   2c45c:	9b0a      	ldreq	r3, [sp, #40]	; 0x28
   2c45e:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   2c460:	a823      	add	r0, sp, #140	; 0x8c
   2c462:	a920      	add	r1, sp, #128	; 0x80
   2c464:	bf08      	it	eq
   2c466:	1c5d      	addeq	r5, r3, #1
   2c468:	9004      	str	r0, [sp, #16]
   2c46a:	9103      	str	r1, [sp, #12]
   2c46c:	a81f      	add	r0, sp, #124	; 0x7c
   2c46e:	2102      	movs	r1, #2
   2c470:	463b      	mov	r3, r7
   2c472:	9002      	str	r0, [sp, #8]
   2c474:	9501      	str	r5, [sp, #4]
   2c476:	9100      	str	r1, [sp, #0]
   2c478:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c47a:	f000 fb71 	bl	2cb60 <_dtoa_r>
   2c47e:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c480:	2b67      	cmp	r3, #103	; 0x67
   2c482:	4606      	mov	r6, r0
   2c484:	f040 81e0 	bne.w	2c848 <_svfprintf_r+0x1288>
   2c488:	f01b 0f01 	tst.w	fp, #1
   2c48c:	f000 8246 	beq.w	2c91c <_svfprintf_r+0x135c>
   2c490:	1974      	adds	r4, r6, r5
   2c492:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c494:	9808      	ldr	r0, [sp, #32]
   2c496:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c498:	4639      	mov	r1, r7
   2c49a:	f7d4 fdbf 	bl	101c <__aeabi_dcmpeq>
   2c49e:	2800      	cmp	r0, #0
   2c4a0:	f040 8165 	bne.w	2c76e <_svfprintf_r+0x11ae>
   2c4a4:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c4a6:	42a3      	cmp	r3, r4
   2c4a8:	d206      	bcs.n	2c4b8 <_svfprintf_r+0xef8>
   2c4aa:	2130      	movs	r1, #48	; 0x30
   2c4ac:	1c5a      	adds	r2, r3, #1
   2c4ae:	9223      	str	r2, [sp, #140]	; 0x8c
   2c4b0:	7019      	strb	r1, [r3, #0]
   2c4b2:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c4b4:	429c      	cmp	r4, r3
   2c4b6:	d8f9      	bhi.n	2c4ac <_svfprintf_r+0xeec>
   2c4b8:	1b9b      	subs	r3, r3, r6
   2c4ba:	9313      	str	r3, [sp, #76]	; 0x4c
   2c4bc:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c4be:	2b47      	cmp	r3, #71	; 0x47
   2c4c0:	f000 80e9 	beq.w	2c696 <_svfprintf_r+0x10d6>
   2c4c4:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4c6:	2b65      	cmp	r3, #101	; 0x65
   2c4c8:	f340 81cd 	ble.w	2c866 <_svfprintf_r+0x12a6>
   2c4cc:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c4ce:	2b66      	cmp	r3, #102	; 0x66
   2c4d0:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c4d2:	9312      	str	r3, [sp, #72]	; 0x48
   2c4d4:	f000 819e 	beq.w	2c814 <_svfprintf_r+0x1254>
   2c4d8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c4da:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c4dc:	4619      	mov	r1, r3
   2c4de:	4291      	cmp	r1, r2
   2c4e0:	f300 818a 	bgt.w	2c7f8 <_svfprintf_r+0x1238>
   2c4e4:	f01b 0f01 	tst.w	fp, #1
   2c4e8:	f040 8213 	bne.w	2c912 <_svfprintf_r+0x1352>
   2c4ec:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c4f0:	9308      	str	r3, [sp, #32]
   2c4f2:	2367      	movs	r3, #103	; 0x67
   2c4f4:	920e      	str	r2, [sp, #56]	; 0x38
   2c4f6:	9311      	str	r3, [sp, #68]	; 0x44
   2c4f8:	9b10      	ldr	r3, [sp, #64]	; 0x40
   2c4fa:	2b00      	cmp	r3, #0
   2c4fc:	f040 80c4 	bne.w	2c688 <_svfprintf_r+0x10c8>
   2c500:	930a      	str	r3, [sp, #40]	; 0x28
   2c502:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c506:	f7ff b973 	b.w	2b7f0 <_svfprintf_r+0x230>
   2c50a:	4635      	mov	r5, r6
   2c50c:	460c      	mov	r4, r1
   2c50e:	4646      	mov	r6, r8
   2c510:	4690      	mov	r8, r2
   2c512:	3301      	adds	r3, #1
   2c514:	443c      	add	r4, r7
   2c516:	2b07      	cmp	r3, #7
   2c518:	9427      	str	r4, [sp, #156]	; 0x9c
   2c51a:	9326      	str	r3, [sp, #152]	; 0x98
   2c51c:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c520:	f73f aed1 	bgt.w	2c2c6 <_svfprintf_r+0xd06>
   2c524:	f108 0808 	add.w	r8, r8, #8
   2c528:	e6d7      	b.n	2c2da <_svfprintf_r+0xd1a>
   2c52a:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c52c:	6813      	ldr	r3, [r2, #0]
   2c52e:	3204      	adds	r2, #4
   2c530:	920f      	str	r2, [sp, #60]	; 0x3c
   2c532:	9a09      	ldr	r2, [sp, #36]	; 0x24
   2c534:	601a      	str	r2, [r3, #0]
   2c536:	f7ff b86a 	b.w	2b60e <_svfprintf_r+0x4e>
   2c53a:	aa25      	add	r2, sp, #148	; 0x94
   2c53c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c53e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c540:	f001 fe7a 	bl	2e238 <__ssprint_r>
   2c544:	2800      	cmp	r0, #0
   2c546:	f47f a90d 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c54a:	46c8      	mov	r8, r9
   2c54c:	e48d      	b.n	2be6a <_svfprintf_r+0x8aa>
   2c54e:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c550:	4a27      	ldr	r2, [pc, #156]	; (2c5f0 <_svfprintf_r+0x1030>)
   2c552:	f8c8 2000 	str.w	r2, [r8]
   2c556:	3301      	adds	r3, #1
   2c558:	3401      	adds	r4, #1
   2c55a:	2201      	movs	r2, #1
   2c55c:	2b07      	cmp	r3, #7
   2c55e:	9427      	str	r4, [sp, #156]	; 0x9c
   2c560:	9326      	str	r3, [sp, #152]	; 0x98
   2c562:	f8c8 2004 	str.w	r2, [r8, #4]
   2c566:	dc72      	bgt.n	2c64e <_svfprintf_r+0x108e>
   2c568:	f108 0808 	add.w	r8, r8, #8
   2c56c:	b929      	cbnz	r1, 2c57a <_svfprintf_r+0xfba>
   2c56e:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c570:	b91b      	cbnz	r3, 2c57a <_svfprintf_r+0xfba>
   2c572:	9b07      	ldr	r3, [sp, #28]
   2c574:	07d8      	lsls	r0, r3, #31
   2c576:	f57f aa03 	bpl.w	2b980 <_svfprintf_r+0x3c0>
   2c57a:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c57c:	9819      	ldr	r0, [sp, #100]	; 0x64
   2c57e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
   2c580:	f8c8 2000 	str.w	r2, [r8]
   2c584:	3301      	adds	r3, #1
   2c586:	4602      	mov	r2, r0
   2c588:	4422      	add	r2, r4
   2c58a:	2b07      	cmp	r3, #7
   2c58c:	9227      	str	r2, [sp, #156]	; 0x9c
   2c58e:	f8c8 0004 	str.w	r0, [r8, #4]
   2c592:	9326      	str	r3, [sp, #152]	; 0x98
   2c594:	f300 818d 	bgt.w	2c8b2 <_svfprintf_r+0x12f2>
   2c598:	f108 0808 	add.w	r8, r8, #8
   2c59c:	2900      	cmp	r1, #0
   2c59e:	f2c0 8165 	blt.w	2c86c <_svfprintf_r+0x12ac>
   2c5a2:	9913      	ldr	r1, [sp, #76]	; 0x4c
   2c5a4:	f8c8 6000 	str.w	r6, [r8]
   2c5a8:	3301      	adds	r3, #1
   2c5aa:	188c      	adds	r4, r1, r2
   2c5ac:	2b07      	cmp	r3, #7
   2c5ae:	9427      	str	r4, [sp, #156]	; 0x9c
   2c5b0:	9326      	str	r3, [sp, #152]	; 0x98
   2c5b2:	f8c8 1004 	str.w	r1, [r8, #4]
   2c5b6:	f77f a9e1 	ble.w	2b97c <_svfprintf_r+0x3bc>
   2c5ba:	e52c      	b.n	2c016 <_svfprintf_r+0xa56>
   2c5bc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
   2c5be:	9909      	ldr	r1, [sp, #36]	; 0x24
   2c5c0:	6813      	ldr	r3, [r2, #0]
   2c5c2:	17cd      	asrs	r5, r1, #31
   2c5c4:	4608      	mov	r0, r1
   2c5c6:	3204      	adds	r2, #4
   2c5c8:	4629      	mov	r1, r5
   2c5ca:	920f      	str	r2, [sp, #60]	; 0x3c
   2c5cc:	e9c3 0100 	strd	r0, r1, [r3]
   2c5d0:	f7ff b81d 	b.w	2b60e <_svfprintf_r+0x4e>
   2c5d4:	aa25      	add	r2, sp, #148	; 0x94
   2c5d6:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c5d8:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5da:	f001 fe2d 	bl	2e238 <__ssprint_r>
   2c5de:	2800      	cmp	r0, #0
   2c5e0:	f47f a8c0 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c5e4:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c5e6:	46c8      	mov	r8, r9
   2c5e8:	e458      	b.n	2be9c <_svfprintf_r+0x8dc>
   2c5ea:	bf00      	nop
   2c5ec:	000333ec 	.word	0x000333ec
   2c5f0:	00032f14 	.word	0x00032f14
   2c5f4:	2140      	movs	r1, #64	; 0x40
   2c5f6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c5f8:	f7fd fe60 	bl	2a2bc <_malloc_r>
   2c5fc:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c5fe:	6010      	str	r0, [r2, #0]
   2c600:	6110      	str	r0, [r2, #16]
   2c602:	2800      	cmp	r0, #0
   2c604:	f000 81f2 	beq.w	2c9ec <_svfprintf_r+0x142c>
   2c608:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2c60a:	2340      	movs	r3, #64	; 0x40
   2c60c:	6153      	str	r3, [r2, #20]
   2c60e:	f7fe bfee 	b.w	2b5ee <_svfprintf_r+0x2e>
   2c612:	a823      	add	r0, sp, #140	; 0x8c
   2c614:	a920      	add	r1, sp, #128	; 0x80
   2c616:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   2c618:	9004      	str	r0, [sp, #16]
   2c61a:	9103      	str	r1, [sp, #12]
   2c61c:	a81f      	add	r0, sp, #124	; 0x7c
   2c61e:	2103      	movs	r1, #3
   2c620:	9002      	str	r0, [sp, #8]
   2c622:	9a08      	ldr	r2, [sp, #32]
   2c624:	9401      	str	r4, [sp, #4]
   2c626:	463b      	mov	r3, r7
   2c628:	9100      	str	r1, [sp, #0]
   2c62a:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c62c:	f000 fa98 	bl	2cb60 <_dtoa_r>
   2c630:	4625      	mov	r5, r4
   2c632:	4606      	mov	r6, r0
   2c634:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c636:	2b46      	cmp	r3, #70	; 0x46
   2c638:	eb06 0405 	add.w	r4, r6, r5
   2c63c:	f47f af29 	bne.w	2c492 <_svfprintf_r+0xed2>
   2c640:	7833      	ldrb	r3, [r6, #0]
   2c642:	2b30      	cmp	r3, #48	; 0x30
   2c644:	f000 8178 	beq.w	2c938 <_svfprintf_r+0x1378>
   2c648:	9d1f      	ldr	r5, [sp, #124]	; 0x7c
   2c64a:	442c      	add	r4, r5
   2c64c:	e721      	b.n	2c492 <_svfprintf_r+0xed2>
   2c64e:	aa25      	add	r2, sp, #148	; 0x94
   2c650:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c652:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c654:	f001 fdf0 	bl	2e238 <__ssprint_r>
   2c658:	2800      	cmp	r0, #0
   2c65a:	f47f a883 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c65e:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c660:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c662:	46c8      	mov	r8, r9
   2c664:	e782      	b.n	2c56c <_svfprintf_r+0xfac>
   2c666:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c668:	2b00      	cmp	r3, #0
   2c66a:	bf08      	it	eq
   2c66c:	2301      	moveq	r3, #1
   2c66e:	930a      	str	r3, [sp, #40]	; 0x28
   2c670:	e6db      	b.n	2c42a <_svfprintf_r+0xe6a>
   2c672:	4630      	mov	r0, r6
   2c674:	940a      	str	r4, [sp, #40]	; 0x28
   2c676:	f7d4 f843 	bl	700 <strlen>
   2c67a:	950f      	str	r5, [sp, #60]	; 0x3c
   2c67c:	900e      	str	r0, [sp, #56]	; 0x38
   2c67e:	f8cd b01c 	str.w	fp, [sp, #28]
   2c682:	4603      	mov	r3, r0
   2c684:	f7ff b9f9 	b.w	2ba7a <_svfprintf_r+0x4ba>
   2c688:	272d      	movs	r7, #45	; 0x2d
   2c68a:	2300      	movs	r3, #0
   2c68c:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c690:	930a      	str	r3, [sp, #40]	; 0x28
   2c692:	f7ff b8ae 	b.w	2b7f2 <_svfprintf_r+0x232>
   2c696:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c698:	9312      	str	r3, [sp, #72]	; 0x48
   2c69a:	461a      	mov	r2, r3
   2c69c:	3303      	adds	r3, #3
   2c69e:	db04      	blt.n	2c6aa <_svfprintf_r+0x10ea>
   2c6a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c6a2:	4619      	mov	r1, r3
   2c6a4:	4291      	cmp	r1, r2
   2c6a6:	f6bf af17 	bge.w	2c4d8 <_svfprintf_r+0xf18>
   2c6aa:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c6ac:	3b02      	subs	r3, #2
   2c6ae:	9311      	str	r3, [sp, #68]	; 0x44
   2c6b0:	f89d 3044 	ldrb.w	r3, [sp, #68]	; 0x44
   2c6b4:	f88d 3084 	strb.w	r3, [sp, #132]	; 0x84
   2c6b8:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c6ba:	3b01      	subs	r3, #1
   2c6bc:	2b00      	cmp	r3, #0
   2c6be:	931f      	str	r3, [sp, #124]	; 0x7c
   2c6c0:	bfbd      	ittte	lt
   2c6c2:	9b12      	ldrlt	r3, [sp, #72]	; 0x48
   2c6c4:	f1c3 0301 	rsblt	r3, r3, #1
   2c6c8:	222d      	movlt	r2, #45	; 0x2d
   2c6ca:	222b      	movge	r2, #43	; 0x2b
   2c6cc:	2b09      	cmp	r3, #9
   2c6ce:	f88d 2085 	strb.w	r2, [sp, #133]	; 0x85
   2c6d2:	f340 8116 	ble.w	2c902 <_svfprintf_r+0x1342>
   2c6d6:	f10d 0493 	add.w	r4, sp, #147	; 0x93
   2c6da:	4620      	mov	r0, r4
   2c6dc:	4dab      	ldr	r5, [pc, #684]	; (2c98c <_svfprintf_r+0x13cc>)
   2c6de:	e000      	b.n	2c6e2 <_svfprintf_r+0x1122>
   2c6e0:	4610      	mov	r0, r2
   2c6e2:	fb85 1203 	smull	r1, r2, r5, r3
   2c6e6:	17d9      	asrs	r1, r3, #31
   2c6e8:	ebc1 01a2 	rsb	r1, r1, r2, asr #2
   2c6ec:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   2c6f0:	eba3 0242 	sub.w	r2, r3, r2, lsl #1
   2c6f4:	3230      	adds	r2, #48	; 0x30
   2c6f6:	2909      	cmp	r1, #9
   2c6f8:	f800 2c01 	strb.w	r2, [r0, #-1]
   2c6fc:	460b      	mov	r3, r1
   2c6fe:	f100 32ff 	add.w	r2, r0, #4294967295	; 0xffffffff
   2c702:	dced      	bgt.n	2c6e0 <_svfprintf_r+0x1120>
   2c704:	3330      	adds	r3, #48	; 0x30
   2c706:	3802      	subs	r0, #2
   2c708:	b2d9      	uxtb	r1, r3
   2c70a:	4284      	cmp	r4, r0
   2c70c:	f802 1c01 	strb.w	r1, [r2, #-1]
   2c710:	f240 8165 	bls.w	2c9de <_svfprintf_r+0x141e>
   2c714:	f10d 0086 	add.w	r0, sp, #134	; 0x86
   2c718:	4613      	mov	r3, r2
   2c71a:	e001      	b.n	2c720 <_svfprintf_r+0x1160>
   2c71c:	f813 1b01 	ldrb.w	r1, [r3], #1
   2c720:	f800 1b01 	strb.w	r1, [r0], #1
   2c724:	42a3      	cmp	r3, r4
   2c726:	d1f9      	bne.n	2c71c <_svfprintf_r+0x115c>
   2c728:	3301      	adds	r3, #1
   2c72a:	1a9b      	subs	r3, r3, r2
   2c72c:	f10d 0286 	add.w	r2, sp, #134	; 0x86
   2c730:	4413      	add	r3, r2
   2c732:	aa21      	add	r2, sp, #132	; 0x84
   2c734:	1a9b      	subs	r3, r3, r2
   2c736:	9a13      	ldr	r2, [sp, #76]	; 0x4c
   2c738:	931b      	str	r3, [sp, #108]	; 0x6c
   2c73a:	2a01      	cmp	r2, #1
   2c73c:	4413      	add	r3, r2
   2c73e:	930e      	str	r3, [sp, #56]	; 0x38
   2c740:	f340 8119 	ble.w	2c976 <_svfprintf_r+0x13b6>
   2c744:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c746:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c748:	4413      	add	r3, r2
   2c74a:	930e      	str	r3, [sp, #56]	; 0x38
   2c74c:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c750:	9308      	str	r3, [sp, #32]
   2c752:	2300      	movs	r3, #0
   2c754:	9312      	str	r3, [sp, #72]	; 0x48
   2c756:	e6cf      	b.n	2c4f8 <_svfprintf_r+0xf38>
   2c758:	aa25      	add	r2, sp, #148	; 0x94
   2c75a:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c75c:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c75e:	f001 fd6b 	bl	2e238 <__ssprint_r>
   2c762:	2800      	cmp	r0, #0
   2c764:	f47e affe 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c768:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c76a:	46c8      	mov	r8, r9
   2c76c:	e4d7      	b.n	2c11e <_svfprintf_r+0xb5e>
   2c76e:	4623      	mov	r3, r4
   2c770:	e6a2      	b.n	2c4b8 <_svfprintf_r+0xef8>
   2c772:	aa25      	add	r2, sp, #148	; 0x94
   2c774:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c776:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c778:	f001 fd5e 	bl	2e238 <__ssprint_r>
   2c77c:	2800      	cmp	r0, #0
   2c77e:	f47e aff1 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c782:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c784:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c786:	46c8      	mov	r8, r9
   2c788:	e5ae      	b.n	2c2e8 <_svfprintf_r+0xd28>
   2c78a:	aa25      	add	r2, sp, #148	; 0x94
   2c78c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c78e:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c790:	f001 fd52 	bl	2e238 <__ssprint_r>
   2c794:	2800      	cmp	r0, #0
   2c796:	f47e afe5 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c79a:	9a1f      	ldr	r2, [sp, #124]	; 0x7c
   2c79c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c79e:	9c27      	ldr	r4, [sp, #156]	; 0x9c
   2c7a0:	1a9a      	subs	r2, r3, r2
   2c7a2:	46c8      	mov	r8, r9
   2c7a4:	e5b8      	b.n	2c318 <_svfprintf_r+0xd58>
   2c7a6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c7a8:	9612      	str	r6, [sp, #72]	; 0x48
   2c7aa:	2b06      	cmp	r3, #6
   2c7ac:	bf28      	it	cs
   2c7ae:	2306      	movcs	r3, #6
   2c7b0:	960a      	str	r6, [sp, #40]	; 0x28
   2c7b2:	4637      	mov	r7, r6
   2c7b4:	9308      	str	r3, [sp, #32]
   2c7b6:	950f      	str	r5, [sp, #60]	; 0x3c
   2c7b8:	f8cd b01c 	str.w	fp, [sp, #28]
   2c7bc:	930e      	str	r3, [sp, #56]	; 0x38
   2c7be:	4e74      	ldr	r6, [pc, #464]	; (2c990 <_svfprintf_r+0x13d0>)
   2c7c0:	f7ff b816 	b.w	2b7f0 <_svfprintf_r+0x230>
   2c7c4:	a823      	add	r0, sp, #140	; 0x8c
   2c7c6:	a920      	add	r1, sp, #128	; 0x80
   2c7c8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   2c7ca:	9004      	str	r0, [sp, #16]
   2c7cc:	9103      	str	r1, [sp, #12]
   2c7ce:	a81f      	add	r0, sp, #124	; 0x7c
   2c7d0:	2103      	movs	r1, #3
   2c7d2:	9002      	str	r0, [sp, #8]
   2c7d4:	9a08      	ldr	r2, [sp, #32]
   2c7d6:	9501      	str	r5, [sp, #4]
   2c7d8:	463b      	mov	r3, r7
   2c7da:	9100      	str	r1, [sp, #0]
   2c7dc:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c7de:	f000 f9bf 	bl	2cb60 <_dtoa_r>
   2c7e2:	4606      	mov	r6, r0
   2c7e4:	1944      	adds	r4, r0, r5
   2c7e6:	e72b      	b.n	2c640 <_svfprintf_r+0x1080>
   2c7e8:	2306      	movs	r3, #6
   2c7ea:	930a      	str	r3, [sp, #40]	; 0x28
   2c7ec:	e61d      	b.n	2c42a <_svfprintf_r+0xe6a>
   2c7ee:	272d      	movs	r7, #45	; 0x2d
   2c7f0:	f88d 7077 	strb.w	r7, [sp, #119]	; 0x77
   2c7f4:	f7ff bacd 	b.w	2bd92 <_svfprintf_r+0x7d2>
   2c7f8:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c7fa:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   2c7fc:	4413      	add	r3, r2
   2c7fe:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2c800:	930e      	str	r3, [sp, #56]	; 0x38
   2c802:	2a00      	cmp	r2, #0
   2c804:	f340 80b0 	ble.w	2c968 <_svfprintf_r+0x13a8>
   2c808:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c80c:	9308      	str	r3, [sp, #32]
   2c80e:	2367      	movs	r3, #103	; 0x67
   2c810:	9311      	str	r3, [sp, #68]	; 0x44
   2c812:	e671      	b.n	2c4f8 <_svfprintf_r+0xf38>
   2c814:	2b00      	cmp	r3, #0
   2c816:	f340 80c3 	ble.w	2c9a0 <_svfprintf_r+0x13e0>
   2c81a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c81c:	2a00      	cmp	r2, #0
   2c81e:	f040 8099 	bne.w	2c954 <_svfprintf_r+0x1394>
   2c822:	f01b 0f01 	tst.w	fp, #1
   2c826:	f040 8095 	bne.w	2c954 <_svfprintf_r+0x1394>
   2c82a:	9308      	str	r3, [sp, #32]
   2c82c:	930e      	str	r3, [sp, #56]	; 0x38
   2c82e:	e663      	b.n	2c4f8 <_svfprintf_r+0xf38>
   2c830:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c832:	9308      	str	r3, [sp, #32]
   2c834:	930e      	str	r3, [sp, #56]	; 0x38
   2c836:	900a      	str	r0, [sp, #40]	; 0x28
   2c838:	950f      	str	r5, [sp, #60]	; 0x3c
   2c83a:	f8cd b01c 	str.w	fp, [sp, #28]
   2c83e:	9012      	str	r0, [sp, #72]	; 0x48
   2c840:	f89d 7077 	ldrb.w	r7, [sp, #119]	; 0x77
   2c844:	f7fe bfd4 	b.w	2b7f0 <_svfprintf_r+0x230>
   2c848:	9b11      	ldr	r3, [sp, #68]	; 0x44
   2c84a:	2b47      	cmp	r3, #71	; 0x47
   2c84c:	f47f ae20 	bne.w	2c490 <_svfprintf_r+0xed0>
   2c850:	f01b 0f01 	tst.w	fp, #1
   2c854:	f47f aeee 	bne.w	2c634 <_svfprintf_r+0x1074>
   2c858:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c85a:	1b9b      	subs	r3, r3, r6
   2c85c:	9313      	str	r3, [sp, #76]	; 0x4c
   2c85e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c860:	2b47      	cmp	r3, #71	; 0x47
   2c862:	f43f af18 	beq.w	2c696 <_svfprintf_r+0x10d6>
   2c866:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
   2c868:	9312      	str	r3, [sp, #72]	; 0x48
   2c86a:	e721      	b.n	2c6b0 <_svfprintf_r+0x10f0>
   2c86c:	424f      	negs	r7, r1
   2c86e:	3110      	adds	r1, #16
   2c870:	4d48      	ldr	r5, [pc, #288]	; (2c994 <_svfprintf_r+0x13d4>)
   2c872:	da2f      	bge.n	2c8d4 <_svfprintf_r+0x1314>
   2c874:	2410      	movs	r4, #16
   2c876:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   2c87a:	e004      	b.n	2c886 <_svfprintf_r+0x12c6>
   2c87c:	f108 0808 	add.w	r8, r8, #8
   2c880:	3f10      	subs	r7, #16
   2c882:	2f10      	cmp	r7, #16
   2c884:	dd26      	ble.n	2c8d4 <_svfprintf_r+0x1314>
   2c886:	3301      	adds	r3, #1
   2c888:	3210      	adds	r2, #16
   2c88a:	2b07      	cmp	r3, #7
   2c88c:	9227      	str	r2, [sp, #156]	; 0x9c
   2c88e:	9326      	str	r3, [sp, #152]	; 0x98
   2c890:	f8c8 5000 	str.w	r5, [r8]
   2c894:	f8c8 4004 	str.w	r4, [r8, #4]
   2c898:	ddf0      	ble.n	2c87c <_svfprintf_r+0x12bc>
   2c89a:	aa25      	add	r2, sp, #148	; 0x94
   2c89c:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c89e:	4658      	mov	r0, fp
   2c8a0:	f001 fcca 	bl	2e238 <__ssprint_r>
   2c8a4:	2800      	cmp	r0, #0
   2c8a6:	f47e af5d 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c8aa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c8ac:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c8ae:	46c8      	mov	r8, r9
   2c8b0:	e7e6      	b.n	2c880 <_svfprintf_r+0x12c0>
   2c8b2:	aa25      	add	r2, sp, #148	; 0x94
   2c8b4:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c8b6:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c8b8:	f001 fcbe 	bl	2e238 <__ssprint_r>
   2c8bc:	2800      	cmp	r0, #0
   2c8be:	f47e af51 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c8c2:	991f      	ldr	r1, [sp, #124]	; 0x7c
   2c8c4:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c8c6:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c8c8:	46c8      	mov	r8, r9
   2c8ca:	e667      	b.n	2c59c <_svfprintf_r+0xfdc>
   2c8cc:	2000      	movs	r0, #0
   2c8ce:	900a      	str	r0, [sp, #40]	; 0x28
   2c8d0:	f7fe bed0 	b.w	2b674 <_svfprintf_r+0xb4>
   2c8d4:	3301      	adds	r3, #1
   2c8d6:	443a      	add	r2, r7
   2c8d8:	2b07      	cmp	r3, #7
   2c8da:	e888 00a0 	stmia.w	r8, {r5, r7}
   2c8de:	9227      	str	r2, [sp, #156]	; 0x9c
   2c8e0:	9326      	str	r3, [sp, #152]	; 0x98
   2c8e2:	f108 0808 	add.w	r8, r8, #8
   2c8e6:	f77f ae5c 	ble.w	2c5a2 <_svfprintf_r+0xfe2>
   2c8ea:	aa25      	add	r2, sp, #148	; 0x94
   2c8ec:	990b      	ldr	r1, [sp, #44]	; 0x2c
   2c8ee:	980c      	ldr	r0, [sp, #48]	; 0x30
   2c8f0:	f001 fca2 	bl	2e238 <__ssprint_r>
   2c8f4:	2800      	cmp	r0, #0
   2c8f6:	f47e af35 	bne.w	2b764 <_svfprintf_r+0x1a4>
   2c8fa:	9a27      	ldr	r2, [sp, #156]	; 0x9c
   2c8fc:	9b26      	ldr	r3, [sp, #152]	; 0x98
   2c8fe:	46c8      	mov	r8, r9
   2c900:	e64f      	b.n	2c5a2 <_svfprintf_r+0xfe2>
   2c902:	3330      	adds	r3, #48	; 0x30
   2c904:	2230      	movs	r2, #48	; 0x30
   2c906:	f88d 3087 	strb.w	r3, [sp, #135]	; 0x87
   2c90a:	f88d 2086 	strb.w	r2, [sp, #134]	; 0x86
   2c90e:	ab22      	add	r3, sp, #136	; 0x88
   2c910:	e70f      	b.n	2c732 <_svfprintf_r+0x1172>
   2c912:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c914:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c916:	4413      	add	r3, r2
   2c918:	930e      	str	r3, [sp, #56]	; 0x38
   2c91a:	e775      	b.n	2c808 <_svfprintf_r+0x1248>
   2c91c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   2c91e:	e5cb      	b.n	2c4b8 <_svfprintf_r+0xef8>
   2c920:	9b14      	ldr	r3, [sp, #80]	; 0x50
   2c922:	4e1d      	ldr	r6, [pc, #116]	; (2c998 <_svfprintf_r+0x13d8>)
   2c924:	2b00      	cmp	r3, #0
   2c926:	bfb6      	itet	lt
   2c928:	272d      	movlt	r7, #45	; 0x2d
   2c92a:	f89d 7077 	ldrbge.w	r7, [sp, #119]	; 0x77
   2c92e:	f88d 7077 	strblt.w	r7, [sp, #119]	; 0x77
   2c932:	4b1a      	ldr	r3, [pc, #104]	; (2c99c <_svfprintf_r+0x13dc>)
   2c934:	f7ff ba2f 	b.w	2bd96 <_svfprintf_r+0x7d6>
   2c938:	9a16      	ldr	r2, [sp, #88]	; 0x58
   2c93a:	9808      	ldr	r0, [sp, #32]
   2c93c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   2c93e:	4639      	mov	r1, r7
   2c940:	f7d4 fb6c 	bl	101c <__aeabi_dcmpeq>
   2c944:	2800      	cmp	r0, #0
   2c946:	f47f ae7f 	bne.w	2c648 <_svfprintf_r+0x1088>
   2c94a:	f1c5 0501 	rsb	r5, r5, #1
   2c94e:	951f      	str	r5, [sp, #124]	; 0x7c
   2c950:	442c      	add	r4, r5
   2c952:	e59e      	b.n	2c492 <_svfprintf_r+0xed2>
   2c954:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c956:	9a19      	ldr	r2, [sp, #100]	; 0x64
   2c958:	4413      	add	r3, r2
   2c95a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2c95c:	441a      	add	r2, r3
   2c95e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
   2c962:	920e      	str	r2, [sp, #56]	; 0x38
   2c964:	9308      	str	r3, [sp, #32]
   2c966:	e5c7      	b.n	2c4f8 <_svfprintf_r+0xf38>
   2c968:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2c96a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
   2c96c:	f1c3 0301 	rsb	r3, r3, #1
   2c970:	441a      	add	r2, r3
   2c972:	4613      	mov	r3, r2
   2c974:	e7d0      	b.n	2c918 <_svfprintf_r+0x1358>
   2c976:	f01b 0301 	ands.w	r3, fp, #1
   2c97a:	9312      	str	r3, [sp, #72]	; 0x48
   2c97c:	f47f aee2 	bne.w	2c744 <_svfprintf_r+0x1184>
   2c980:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2c982:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
   2c986:	9308      	str	r3, [sp, #32]
   2c988:	e5b6      	b.n	2c4f8 <_svfprintf_r+0xf38>
   2c98a:	bf00      	nop
   2c98c:	66666667 	.word	0x66666667
   2c990:	000333d4 	.word	0x000333d4
   2c994:	000333ec 	.word	0x000333ec
   2c998:	000333a8 	.word	0x000333a8
   2c99c:	000333a4 	.word	0x000333a4
   2c9a0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2c9a2:	b913      	cbnz	r3, 2c9aa <_svfprintf_r+0x13ea>
   2c9a4:	f01b 0f01 	tst.w	fp, #1
   2c9a8:	d002      	beq.n	2c9b0 <_svfprintf_r+0x13f0>
   2c9aa:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2c9ac:	3301      	adds	r3, #1
   2c9ae:	e7d4      	b.n	2c95a <_svfprintf_r+0x139a>
   2c9b0:	2301      	movs	r3, #1
   2c9b2:	e73a      	b.n	2c82a <_svfprintf_r+0x126a>
   2c9b4:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   2c9b6:	f89a 3001 	ldrb.w	r3, [sl, #1]
   2c9ba:	6828      	ldr	r0, [r5, #0]
   2c9bc:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   2c9c0:	900a      	str	r0, [sp, #40]	; 0x28
   2c9c2:	4628      	mov	r0, r5
   2c9c4:	3004      	adds	r0, #4
   2c9c6:	46a2      	mov	sl, r4
   2c9c8:	900f      	str	r0, [sp, #60]	; 0x3c
   2c9ca:	f7fe be51 	b.w	2b670 <_svfprintf_r+0xb0>
   2c9ce:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9d2:	f7ff b867 	b.w	2baa4 <_svfprintf_r+0x4e4>
   2c9d6:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9da:	f7ff ba15 	b.w	2be08 <_svfprintf_r+0x848>
   2c9de:	f10d 0386 	add.w	r3, sp, #134	; 0x86
   2c9e2:	e6a6      	b.n	2c732 <_svfprintf_r+0x1172>
   2c9e4:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2c9e8:	f7ff b8eb 	b.w	2bbc2 <_svfprintf_r+0x602>
   2c9ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2c9ee:	230c      	movs	r3, #12
   2c9f0:	6013      	str	r3, [r2, #0]
   2c9f2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2c9f6:	9309      	str	r3, [sp, #36]	; 0x24
   2c9f8:	f7fe bebd 	b.w	2b776 <_svfprintf_r+0x1b6>
   2c9fc:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca00:	f7ff b99a 	b.w	2bd38 <_svfprintf_r+0x778>
   2ca04:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca08:	f7ff b976 	b.w	2bcf8 <_svfprintf_r+0x738>
   2ca0c:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca10:	f7ff b959 	b.w	2bcc6 <_svfprintf_r+0x706>
   2ca14:	f88d 1077 	strb.w	r1, [sp, #119]	; 0x77
   2ca18:	f7ff b912 	b.w	2bc40 <_svfprintf_r+0x680>

0002ca1c <__ascii_wctomb>:
   2ca1c:	b121      	cbz	r1, 2ca28 <__ascii_wctomb+0xc>
   2ca1e:	2aff      	cmp	r2, #255	; 0xff
   2ca20:	d804      	bhi.n	2ca2c <__ascii_wctomb+0x10>
   2ca22:	700a      	strb	r2, [r1, #0]
   2ca24:	2001      	movs	r0, #1
   2ca26:	4770      	bx	lr
   2ca28:	4608      	mov	r0, r1
   2ca2a:	4770      	bx	lr
   2ca2c:	238a      	movs	r3, #138	; 0x8a
   2ca2e:	6003      	str	r3, [r0, #0]
   2ca30:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2ca34:	4770      	bx	lr
   2ca36:	bf00      	nop

0002ca38 <quorem>:
   2ca38:	6902      	ldr	r2, [r0, #16]
   2ca3a:	690b      	ldr	r3, [r1, #16]
   2ca3c:	4293      	cmp	r3, r2
   2ca3e:	f300 808d 	bgt.w	2cb5c <quorem+0x124>
   2ca42:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2ca46:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
   2ca4a:	f101 0714 	add.w	r7, r1, #20
   2ca4e:	f100 0b14 	add.w	fp, r0, #20
   2ca52:	f857 2028 	ldr.w	r2, [r7, r8, lsl #2]
   2ca56:	f85b 3028 	ldr.w	r3, [fp, r8, lsl #2]
   2ca5a:	ea4f 0488 	mov.w	r4, r8, lsl #2
   2ca5e:	b083      	sub	sp, #12
   2ca60:	3201      	adds	r2, #1
   2ca62:	fbb3 f9f2 	udiv	r9, r3, r2
   2ca66:	eb0b 0304 	add.w	r3, fp, r4
   2ca6a:	9400      	str	r4, [sp, #0]
   2ca6c:	eb07 0a04 	add.w	sl, r7, r4
   2ca70:	9301      	str	r3, [sp, #4]
   2ca72:	f1b9 0f00 	cmp.w	r9, #0
   2ca76:	d039      	beq.n	2caec <quorem+0xb4>
   2ca78:	2500      	movs	r5, #0
   2ca7a:	462e      	mov	r6, r5
   2ca7c:	46bc      	mov	ip, r7
   2ca7e:	46de      	mov	lr, fp
   2ca80:	f85c 4b04 	ldr.w	r4, [ip], #4
   2ca84:	f8de 3000 	ldr.w	r3, [lr]
   2ca88:	b2a2      	uxth	r2, r4
   2ca8a:	fb09 5502 	mla	r5, r9, r2, r5
   2ca8e:	0c22      	lsrs	r2, r4, #16
   2ca90:	0c2c      	lsrs	r4, r5, #16
   2ca92:	fb09 4202 	mla	r2, r9, r2, r4
   2ca96:	b2ad      	uxth	r5, r5
   2ca98:	1b75      	subs	r5, r6, r5
   2ca9a:	b296      	uxth	r6, r2
   2ca9c:	ebc6 4613 	rsb	r6, r6, r3, lsr #16
   2caa0:	fa15 f383 	uxtah	r3, r5, r3
   2caa4:	eb06 4623 	add.w	r6, r6, r3, asr #16
   2caa8:	b29b      	uxth	r3, r3
   2caaa:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
   2caae:	45e2      	cmp	sl, ip
   2cab0:	ea4f 4512 	mov.w	r5, r2, lsr #16
   2cab4:	f84e 3b04 	str.w	r3, [lr], #4
   2cab8:	ea4f 4626 	mov.w	r6, r6, asr #16
   2cabc:	d2e0      	bcs.n	2ca80 <quorem+0x48>
   2cabe:	9b00      	ldr	r3, [sp, #0]
   2cac0:	f85b 3003 	ldr.w	r3, [fp, r3]
   2cac4:	b993      	cbnz	r3, 2caec <quorem+0xb4>
   2cac6:	9c01      	ldr	r4, [sp, #4]
   2cac8:	1f23      	subs	r3, r4, #4
   2caca:	459b      	cmp	fp, r3
   2cacc:	d20c      	bcs.n	2cae8 <quorem+0xb0>
   2cace:	f854 3c04 	ldr.w	r3, [r4, #-4]
   2cad2:	b94b      	cbnz	r3, 2cae8 <quorem+0xb0>
   2cad4:	f1a4 0308 	sub.w	r3, r4, #8
   2cad8:	e002      	b.n	2cae0 <quorem+0xa8>
   2cada:	681a      	ldr	r2, [r3, #0]
   2cadc:	3b04      	subs	r3, #4
   2cade:	b91a      	cbnz	r2, 2cae8 <quorem+0xb0>
   2cae0:	459b      	cmp	fp, r3
   2cae2:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cae6:	d3f8      	bcc.n	2cada <quorem+0xa2>
   2cae8:	f8c0 8010 	str.w	r8, [r0, #16]
   2caec:	4604      	mov	r4, r0
   2caee:	f001 faa7 	bl	2e040 <__mcmp>
   2caf2:	2800      	cmp	r0, #0
   2caf4:	db2e      	blt.n	2cb54 <quorem+0x11c>
   2caf6:	f109 0901 	add.w	r9, r9, #1
   2cafa:	465d      	mov	r5, fp
   2cafc:	2300      	movs	r3, #0
   2cafe:	f857 1b04 	ldr.w	r1, [r7], #4
   2cb02:	6828      	ldr	r0, [r5, #0]
   2cb04:	b28a      	uxth	r2, r1
   2cb06:	1a9a      	subs	r2, r3, r2
   2cb08:	0c0b      	lsrs	r3, r1, #16
   2cb0a:	fa12 f280 	uxtah	r2, r2, r0
   2cb0e:	ebc3 4310 	rsb	r3, r3, r0, lsr #16
   2cb12:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2cb16:	b292      	uxth	r2, r2
   2cb18:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2cb1c:	45ba      	cmp	sl, r7
   2cb1e:	f845 2b04 	str.w	r2, [r5], #4
   2cb22:	ea4f 4323 	mov.w	r3, r3, asr #16
   2cb26:	d2ea      	bcs.n	2cafe <quorem+0xc6>
   2cb28:	f85b 2028 	ldr.w	r2, [fp, r8, lsl #2]
   2cb2c:	eb0b 0388 	add.w	r3, fp, r8, lsl #2
   2cb30:	b982      	cbnz	r2, 2cb54 <quorem+0x11c>
   2cb32:	1f1a      	subs	r2, r3, #4
   2cb34:	4593      	cmp	fp, r2
   2cb36:	d20b      	bcs.n	2cb50 <quorem+0x118>
   2cb38:	f853 2c04 	ldr.w	r2, [r3, #-4]
   2cb3c:	b942      	cbnz	r2, 2cb50 <quorem+0x118>
   2cb3e:	3b08      	subs	r3, #8
   2cb40:	e002      	b.n	2cb48 <quorem+0x110>
   2cb42:	681a      	ldr	r2, [r3, #0]
   2cb44:	3b04      	subs	r3, #4
   2cb46:	b91a      	cbnz	r2, 2cb50 <quorem+0x118>
   2cb48:	459b      	cmp	fp, r3
   2cb4a:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
   2cb4e:	d3f8      	bcc.n	2cb42 <quorem+0x10a>
   2cb50:	f8c4 8010 	str.w	r8, [r4, #16]
   2cb54:	4648      	mov	r0, r9
   2cb56:	b003      	add	sp, #12
   2cb58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cb5c:	2000      	movs	r0, #0
   2cb5e:	4770      	bx	lr

0002cb60 <_dtoa_r>:
   2cb60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2cb64:	6c01      	ldr	r1, [r0, #64]	; 0x40
   2cb66:	b09b      	sub	sp, #108	; 0x6c
   2cb68:	4604      	mov	r4, r0
   2cb6a:	9e27      	ldr	r6, [sp, #156]	; 0x9c
   2cb6c:	4692      	mov	sl, r2
   2cb6e:	469b      	mov	fp, r3
   2cb70:	b141      	cbz	r1, 2cb84 <_dtoa_r+0x24>
   2cb72:	6c42      	ldr	r2, [r0, #68]	; 0x44
   2cb74:	604a      	str	r2, [r1, #4]
   2cb76:	2301      	movs	r3, #1
   2cb78:	4093      	lsls	r3, r2
   2cb7a:	608b      	str	r3, [r1, #8]
   2cb7c:	f001 f888 	bl	2dc90 <_Bfree>
   2cb80:	2300      	movs	r3, #0
   2cb82:	6423      	str	r3, [r4, #64]	; 0x40
   2cb84:	f1bb 0f00 	cmp.w	fp, #0
   2cb88:	465d      	mov	r5, fp
   2cb8a:	db35      	blt.n	2cbf8 <_dtoa_r+0x98>
   2cb8c:	2300      	movs	r3, #0
   2cb8e:	6033      	str	r3, [r6, #0]
   2cb90:	4b9d      	ldr	r3, [pc, #628]	; (2ce08 <_dtoa_r+0x2a8>)
   2cb92:	43ab      	bics	r3, r5
   2cb94:	d015      	beq.n	2cbc2 <_dtoa_r+0x62>
   2cb96:	4650      	mov	r0, sl
   2cb98:	4659      	mov	r1, fp
   2cb9a:	2200      	movs	r2, #0
   2cb9c:	2300      	movs	r3, #0
   2cb9e:	f7d4 fa3d 	bl	101c <__aeabi_dcmpeq>
   2cba2:	4680      	mov	r8, r0
   2cba4:	2800      	cmp	r0, #0
   2cba6:	d02d      	beq.n	2cc04 <_dtoa_r+0xa4>
   2cba8:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cbaa:	2301      	movs	r3, #1
   2cbac:	6013      	str	r3, [r2, #0]
   2cbae:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cbb0:	2b00      	cmp	r3, #0
   2cbb2:	f000 80bd 	beq.w	2cd30 <_dtoa_r+0x1d0>
   2cbb6:	4895      	ldr	r0, [pc, #596]	; (2ce0c <_dtoa_r+0x2ac>)
   2cbb8:	6018      	str	r0, [r3, #0]
   2cbba:	3801      	subs	r0, #1
   2cbbc:	b01b      	add	sp, #108	; 0x6c
   2cbbe:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbc2:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cbc4:	f242 730f 	movw	r3, #9999	; 0x270f
   2cbc8:	6013      	str	r3, [r2, #0]
   2cbca:	f1ba 0f00 	cmp.w	sl, #0
   2cbce:	d10d      	bne.n	2cbec <_dtoa_r+0x8c>
   2cbd0:	f3c5 0513 	ubfx	r5, r5, #0, #20
   2cbd4:	b955      	cbnz	r5, 2cbec <_dtoa_r+0x8c>
   2cbd6:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cbd8:	488d      	ldr	r0, [pc, #564]	; (2ce10 <_dtoa_r+0x2b0>)
   2cbda:	2b00      	cmp	r3, #0
   2cbdc:	d0ee      	beq.n	2cbbc <_dtoa_r+0x5c>
   2cbde:	f100 0308 	add.w	r3, r0, #8
   2cbe2:	9a28      	ldr	r2, [sp, #160]	; 0xa0
   2cbe4:	6013      	str	r3, [r2, #0]
   2cbe6:	b01b      	add	sp, #108	; 0x6c
   2cbe8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cbec:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cbee:	4889      	ldr	r0, [pc, #548]	; (2ce14 <_dtoa_r+0x2b4>)
   2cbf0:	2b00      	cmp	r3, #0
   2cbf2:	d0e3      	beq.n	2cbbc <_dtoa_r+0x5c>
   2cbf4:	1cc3      	adds	r3, r0, #3
   2cbf6:	e7f4      	b.n	2cbe2 <_dtoa_r+0x82>
   2cbf8:	2301      	movs	r3, #1
   2cbfa:	f02b 4500 	bic.w	r5, fp, #2147483648	; 0x80000000
   2cbfe:	6033      	str	r3, [r6, #0]
   2cc00:	46ab      	mov	fp, r5
   2cc02:	e7c5      	b.n	2cb90 <_dtoa_r+0x30>
   2cc04:	aa18      	add	r2, sp, #96	; 0x60
   2cc06:	ab19      	add	r3, sp, #100	; 0x64
   2cc08:	9201      	str	r2, [sp, #4]
   2cc0a:	9300      	str	r3, [sp, #0]
   2cc0c:	4652      	mov	r2, sl
   2cc0e:	465b      	mov	r3, fp
   2cc10:	4620      	mov	r0, r4
   2cc12:	f001 fab5 	bl	2e180 <__d2b>
   2cc16:	0d2b      	lsrs	r3, r5, #20
   2cc18:	4681      	mov	r9, r0
   2cc1a:	d071      	beq.n	2cd00 <_dtoa_r+0x1a0>
   2cc1c:	f3cb 0213 	ubfx	r2, fp, #0, #20
   2cc20:	f042 517f 	orr.w	r1, r2, #1069547520	; 0x3fc00000
   2cc24:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cc26:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
   2cc2a:	4650      	mov	r0, sl
   2cc2c:	f2a3 36ff 	subw	r6, r3, #1023	; 0x3ff
   2cc30:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   2cc34:	2200      	movs	r2, #0
   2cc36:	4b78      	ldr	r3, [pc, #480]	; (2ce18 <_dtoa_r+0x2b8>)
   2cc38:	f7d3 fdd4 	bl	7e4 <__aeabi_dsub>
   2cc3c:	a36c      	add	r3, pc, #432	; (adr r3, 2cdf0 <_dtoa_r+0x290>)
   2cc3e:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cc42:	f7d3 ff83 	bl	b4c <__aeabi_dmul>
   2cc46:	a36c      	add	r3, pc, #432	; (adr r3, 2cdf8 <_dtoa_r+0x298>)
   2cc48:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cc4c:	f7d3 fdcc 	bl	7e8 <__adddf3>
   2cc50:	e9cd 0102 	strd	r0, r1, [sp, #8]
   2cc54:	4630      	mov	r0, r6
   2cc56:	f7d3 ff13 	bl	a80 <__aeabi_i2d>
   2cc5a:	a369      	add	r3, pc, #420	; (adr r3, 2ce00 <_dtoa_r+0x2a0>)
   2cc5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cc60:	f7d3 ff74 	bl	b4c <__aeabi_dmul>
   2cc64:	4602      	mov	r2, r0
   2cc66:	460b      	mov	r3, r1
   2cc68:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
   2cc6c:	f7d3 fdbc 	bl	7e8 <__adddf3>
   2cc70:	e9cd 0104 	strd	r0, r1, [sp, #16]
   2cc74:	f7d4 fa1a 	bl	10ac <__aeabi_d2iz>
   2cc78:	2200      	movs	r2, #0
   2cc7a:	9002      	str	r0, [sp, #8]
   2cc7c:	2300      	movs	r3, #0
   2cc7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cc82:	f7d4 f9d5 	bl	1030 <__aeabi_dcmplt>
   2cc86:	2800      	cmp	r0, #0
   2cc88:	f040 8173 	bne.w	2cf72 <_dtoa_r+0x412>
   2cc8c:	9d02      	ldr	r5, [sp, #8]
   2cc8e:	2d16      	cmp	r5, #22
   2cc90:	f200 815d 	bhi.w	2cf4e <_dtoa_r+0x3ee>
   2cc94:	4b61      	ldr	r3, [pc, #388]	; (2ce1c <_dtoa_r+0x2bc>)
   2cc96:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
   2cc9a:	e9d3 0100 	ldrd	r0, r1, [r3]
   2cc9e:	4652      	mov	r2, sl
   2cca0:	465b      	mov	r3, fp
   2cca2:	f7d4 f9e3 	bl	106c <__aeabi_dcmpgt>
   2cca6:	2800      	cmp	r0, #0
   2cca8:	f000 81c5 	beq.w	2d036 <_dtoa_r+0x4d6>
   2ccac:	1e6b      	subs	r3, r5, #1
   2ccae:	9302      	str	r3, [sp, #8]
   2ccb0:	2300      	movs	r3, #0
   2ccb2:	930e      	str	r3, [sp, #56]	; 0x38
   2ccb4:	1bbf      	subs	r7, r7, r6
   2ccb6:	1e7b      	subs	r3, r7, #1
   2ccb8:	9306      	str	r3, [sp, #24]
   2ccba:	f100 8154 	bmi.w	2cf66 <_dtoa_r+0x406>
   2ccbe:	2300      	movs	r3, #0
   2ccc0:	9308      	str	r3, [sp, #32]
   2ccc2:	9b02      	ldr	r3, [sp, #8]
   2ccc4:	2b00      	cmp	r3, #0
   2ccc6:	f2c0 8145 	blt.w	2cf54 <_dtoa_r+0x3f4>
   2ccca:	9a06      	ldr	r2, [sp, #24]
   2cccc:	930d      	str	r3, [sp, #52]	; 0x34
   2ccce:	4611      	mov	r1, r2
   2ccd0:	4419      	add	r1, r3
   2ccd2:	2300      	movs	r3, #0
   2ccd4:	9106      	str	r1, [sp, #24]
   2ccd6:	930c      	str	r3, [sp, #48]	; 0x30
   2ccd8:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2ccda:	2b09      	cmp	r3, #9
   2ccdc:	d82a      	bhi.n	2cd34 <_dtoa_r+0x1d4>
   2ccde:	2b05      	cmp	r3, #5
   2cce0:	f340 865b 	ble.w	2d99a <_dtoa_r+0xe3a>
   2cce4:	3b04      	subs	r3, #4
   2cce6:	9324      	str	r3, [sp, #144]	; 0x90
   2cce8:	2500      	movs	r5, #0
   2ccea:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2ccec:	3b02      	subs	r3, #2
   2ccee:	2b03      	cmp	r3, #3
   2ccf0:	f200 8642 	bhi.w	2d978 <_dtoa_r+0xe18>
   2ccf4:	e8df f013 	tbh	[pc, r3, lsl #1]
   2ccf8:	02c903d4 	.word	0x02c903d4
   2ccfc:	046103df 	.word	0x046103df
   2cd00:	9f18      	ldr	r7, [sp, #96]	; 0x60
   2cd02:	9e19      	ldr	r6, [sp, #100]	; 0x64
   2cd04:	443e      	add	r6, r7
   2cd06:	f206 4332 	addw	r3, r6, #1074	; 0x432
   2cd0a:	2b20      	cmp	r3, #32
   2cd0c:	f340 818e 	ble.w	2d02c <_dtoa_r+0x4cc>
   2cd10:	f1c3 0340 	rsb	r3, r3, #64	; 0x40
   2cd14:	f206 4012 	addw	r0, r6, #1042	; 0x412
   2cd18:	409d      	lsls	r5, r3
   2cd1a:	fa2a f000 	lsr.w	r0, sl, r0
   2cd1e:	4328      	orrs	r0, r5
   2cd20:	f7d3 fe9e 	bl	a60 <__aeabi_ui2d>
   2cd24:	2301      	movs	r3, #1
   2cd26:	3e01      	subs	r6, #1
   2cd28:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   2cd2c:	9314      	str	r3, [sp, #80]	; 0x50
   2cd2e:	e781      	b.n	2cc34 <_dtoa_r+0xd4>
   2cd30:	483b      	ldr	r0, [pc, #236]	; (2ce20 <_dtoa_r+0x2c0>)
   2cd32:	e743      	b.n	2cbbc <_dtoa_r+0x5c>
   2cd34:	2100      	movs	r1, #0
   2cd36:	6461      	str	r1, [r4, #68]	; 0x44
   2cd38:	4620      	mov	r0, r4
   2cd3a:	9125      	str	r1, [sp, #148]	; 0x94
   2cd3c:	f000 ff82 	bl	2dc44 <_Balloc>
   2cd40:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2cd44:	930a      	str	r3, [sp, #40]	; 0x28
   2cd46:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2cd48:	930f      	str	r3, [sp, #60]	; 0x3c
   2cd4a:	2301      	movs	r3, #1
   2cd4c:	9004      	str	r0, [sp, #16]
   2cd4e:	6420      	str	r0, [r4, #64]	; 0x40
   2cd50:	9224      	str	r2, [sp, #144]	; 0x90
   2cd52:	930b      	str	r3, [sp, #44]	; 0x2c
   2cd54:	9b19      	ldr	r3, [sp, #100]	; 0x64
   2cd56:	2b00      	cmp	r3, #0
   2cd58:	f2c0 80d9 	blt.w	2cf0e <_dtoa_r+0x3ae>
   2cd5c:	9a02      	ldr	r2, [sp, #8]
   2cd5e:	2a0e      	cmp	r2, #14
   2cd60:	f300 80d5 	bgt.w	2cf0e <_dtoa_r+0x3ae>
   2cd64:	4b2d      	ldr	r3, [pc, #180]	; (2ce1c <_dtoa_r+0x2bc>)
   2cd66:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2cd6a:	e9d3 2300 	ldrd	r2, r3, [r3]
   2cd6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
   2cd72:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2cd74:	2b00      	cmp	r3, #0
   2cd76:	f2c0 83ba 	blt.w	2d4ee <_dtoa_r+0x98e>
   2cd7a:	e9dd 5608 	ldrd	r5, r6, [sp, #32]
   2cd7e:	4650      	mov	r0, sl
   2cd80:	462a      	mov	r2, r5
   2cd82:	4633      	mov	r3, r6
   2cd84:	4659      	mov	r1, fp
   2cd86:	f7d4 f80b 	bl	da0 <__aeabi_ddiv>
   2cd8a:	f7d4 f98f 	bl	10ac <__aeabi_d2iz>
   2cd8e:	4680      	mov	r8, r0
   2cd90:	f7d3 fe76 	bl	a80 <__aeabi_i2d>
   2cd94:	462a      	mov	r2, r5
   2cd96:	4633      	mov	r3, r6
   2cd98:	f7d3 fed8 	bl	b4c <__aeabi_dmul>
   2cd9c:	460b      	mov	r3, r1
   2cd9e:	4602      	mov	r2, r0
   2cda0:	4659      	mov	r1, fp
   2cda2:	4650      	mov	r0, sl
   2cda4:	f7d3 fd1e 	bl	7e4 <__aeabi_dsub>
   2cda8:	9d04      	ldr	r5, [sp, #16]
   2cdaa:	f108 0330 	add.w	r3, r8, #48	; 0x30
   2cdae:	702b      	strb	r3, [r5, #0]
   2cdb0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cdb2:	2b01      	cmp	r3, #1
   2cdb4:	4606      	mov	r6, r0
   2cdb6:	460f      	mov	r7, r1
   2cdb8:	f105 0501 	add.w	r5, r5, #1
   2cdbc:	d068      	beq.n	2ce90 <_dtoa_r+0x330>
   2cdbe:	2200      	movs	r2, #0
   2cdc0:	4b18      	ldr	r3, [pc, #96]	; (2ce24 <_dtoa_r+0x2c4>)
   2cdc2:	f7d3 fec3 	bl	b4c <__aeabi_dmul>
   2cdc6:	2200      	movs	r2, #0
   2cdc8:	2300      	movs	r3, #0
   2cdca:	4606      	mov	r6, r0
   2cdcc:	460f      	mov	r7, r1
   2cdce:	f7d4 f925 	bl	101c <__aeabi_dcmpeq>
   2cdd2:	2800      	cmp	r0, #0
   2cdd4:	f040 8088 	bne.w	2cee8 <_dtoa_r+0x388>
   2cdd8:	f8cd 902c 	str.w	r9, [sp, #44]	; 0x2c
   2cddc:	f04f 0a00 	mov.w	sl, #0
   2cde0:	f8df b040 	ldr.w	fp, [pc, #64]	; 2ce24 <_dtoa_r+0x2c4>
   2cde4:	940c      	str	r4, [sp, #48]	; 0x30
   2cde6:	e9dd 8908 	ldrd	r8, r9, [sp, #32]
   2cdea:	e028      	b.n	2ce3e <_dtoa_r+0x2de>
   2cdec:	f3af 8000 	nop.w
   2cdf0:	636f4361 	.word	0x636f4361
   2cdf4:	3fd287a7 	.word	0x3fd287a7
   2cdf8:	8b60c8b3 	.word	0x8b60c8b3
   2cdfc:	3fc68a28 	.word	0x3fc68a28
   2ce00:	509f79fb 	.word	0x509f79fb
   2ce04:	3fd34413 	.word	0x3fd34413
   2ce08:	7ff00000 	.word	0x7ff00000
   2ce0c:	00032f15 	.word	0x00032f15
   2ce10:	00033500 	.word	0x00033500
   2ce14:	0003350c 	.word	0x0003350c
   2ce18:	3ff80000 	.word	0x3ff80000
   2ce1c:	00033538 	.word	0x00033538
   2ce20:	00032f14 	.word	0x00032f14
   2ce24:	40240000 	.word	0x40240000
   2ce28:	f7d3 fe90 	bl	b4c <__aeabi_dmul>
   2ce2c:	2200      	movs	r2, #0
   2ce2e:	2300      	movs	r3, #0
   2ce30:	4606      	mov	r6, r0
   2ce32:	460f      	mov	r7, r1
   2ce34:	f7d4 f8f2 	bl	101c <__aeabi_dcmpeq>
   2ce38:	2800      	cmp	r0, #0
   2ce3a:	f040 83c1 	bne.w	2d5c0 <_dtoa_r+0xa60>
   2ce3e:	4642      	mov	r2, r8
   2ce40:	464b      	mov	r3, r9
   2ce42:	4630      	mov	r0, r6
   2ce44:	4639      	mov	r1, r7
   2ce46:	f7d3 ffab 	bl	da0 <__aeabi_ddiv>
   2ce4a:	f7d4 f92f 	bl	10ac <__aeabi_d2iz>
   2ce4e:	4604      	mov	r4, r0
   2ce50:	f7d3 fe16 	bl	a80 <__aeabi_i2d>
   2ce54:	4642      	mov	r2, r8
   2ce56:	464b      	mov	r3, r9
   2ce58:	f7d3 fe78 	bl	b4c <__aeabi_dmul>
   2ce5c:	4602      	mov	r2, r0
   2ce5e:	460b      	mov	r3, r1
   2ce60:	4630      	mov	r0, r6
   2ce62:	4639      	mov	r1, r7
   2ce64:	f7d3 fcbe 	bl	7e4 <__aeabi_dsub>
   2ce68:	f104 0e30 	add.w	lr, r4, #48	; 0x30
   2ce6c:	9e04      	ldr	r6, [sp, #16]
   2ce6e:	f805 eb01 	strb.w	lr, [r5], #1
   2ce72:	eba5 0e06 	sub.w	lr, r5, r6
   2ce76:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   2ce78:	45b6      	cmp	lr, r6
   2ce7a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   2ce7e:	4652      	mov	r2, sl
   2ce80:	465b      	mov	r3, fp
   2ce82:	d1d1      	bne.n	2ce28 <_dtoa_r+0x2c8>
   2ce84:	46a0      	mov	r8, r4
   2ce86:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2ce8a:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2ce8c:	4606      	mov	r6, r0
   2ce8e:	460f      	mov	r7, r1
   2ce90:	4632      	mov	r2, r6
   2ce92:	463b      	mov	r3, r7
   2ce94:	4630      	mov	r0, r6
   2ce96:	4639      	mov	r1, r7
   2ce98:	f7d3 fca6 	bl	7e8 <__adddf3>
   2ce9c:	4606      	mov	r6, r0
   2ce9e:	460f      	mov	r7, r1
   2cea0:	4602      	mov	r2, r0
   2cea2:	460b      	mov	r3, r1
   2cea4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2cea8:	f7d4 f8c2 	bl	1030 <__aeabi_dcmplt>
   2ceac:	b948      	cbnz	r0, 2cec2 <_dtoa_r+0x362>
   2ceae:	4632      	mov	r2, r6
   2ceb0:	463b      	mov	r3, r7
   2ceb2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2ceb6:	f7d4 f8b1 	bl	101c <__aeabi_dcmpeq>
   2ceba:	b1a8      	cbz	r0, 2cee8 <_dtoa_r+0x388>
   2cebc:	f018 0f01 	tst.w	r8, #1
   2cec0:	d012      	beq.n	2cee8 <_dtoa_r+0x388>
   2cec2:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2cec6:	9a04      	ldr	r2, [sp, #16]
   2cec8:	1e6b      	subs	r3, r5, #1
   2ceca:	e004      	b.n	2ced6 <_dtoa_r+0x376>
   2cecc:	429a      	cmp	r2, r3
   2cece:	f000 8401 	beq.w	2d6d4 <_dtoa_r+0xb74>
   2ced2:	f813 8d01 	ldrb.w	r8, [r3, #-1]!
   2ced6:	f1b8 0f39 	cmp.w	r8, #57	; 0x39
   2ceda:	f103 0501 	add.w	r5, r3, #1
   2cede:	d0f5      	beq.n	2cecc <_dtoa_r+0x36c>
   2cee0:	f108 0801 	add.w	r8, r8, #1
   2cee4:	f883 8000 	strb.w	r8, [r3]
   2cee8:	4649      	mov	r1, r9
   2ceea:	4620      	mov	r0, r4
   2ceec:	f000 fed0 	bl	2dc90 <_Bfree>
   2cef0:	2200      	movs	r2, #0
   2cef2:	9b02      	ldr	r3, [sp, #8]
   2cef4:	702a      	strb	r2, [r5, #0]
   2cef6:	9a26      	ldr	r2, [sp, #152]	; 0x98
   2cef8:	3301      	adds	r3, #1
   2cefa:	6013      	str	r3, [r2, #0]
   2cefc:	9b28      	ldr	r3, [sp, #160]	; 0xa0
   2cefe:	2b00      	cmp	r3, #0
   2cf00:	f000 839e 	beq.w	2d640 <_dtoa_r+0xae0>
   2cf04:	9804      	ldr	r0, [sp, #16]
   2cf06:	601d      	str	r5, [r3, #0]
   2cf08:	b01b      	add	sp, #108	; 0x6c
   2cf0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2cf0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2cf10:	2a00      	cmp	r2, #0
   2cf12:	d03e      	beq.n	2cf92 <_dtoa_r+0x432>
   2cf14:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2cf16:	2a01      	cmp	r2, #1
   2cf18:	f340 8311 	ble.w	2d53e <_dtoa_r+0x9de>
   2cf1c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf1e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2cf20:	1e5f      	subs	r7, r3, #1
   2cf22:	42ba      	cmp	r2, r7
   2cf24:	f2c0 838f 	blt.w	2d646 <_dtoa_r+0xae6>
   2cf28:	1bd7      	subs	r7, r2, r7
   2cf2a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf2c:	2b00      	cmp	r3, #0
   2cf2e:	f2c0 848b 	blt.w	2d848 <_dtoa_r+0xce8>
   2cf32:	9d08      	ldr	r5, [sp, #32]
   2cf34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2cf36:	9a08      	ldr	r2, [sp, #32]
   2cf38:	441a      	add	r2, r3
   2cf3a:	9208      	str	r2, [sp, #32]
   2cf3c:	9a06      	ldr	r2, [sp, #24]
   2cf3e:	2101      	movs	r1, #1
   2cf40:	441a      	add	r2, r3
   2cf42:	4620      	mov	r0, r4
   2cf44:	9206      	str	r2, [sp, #24]
   2cf46:	f000 ff3d 	bl	2ddc4 <__i2b>
   2cf4a:	4606      	mov	r6, r0
   2cf4c:	e024      	b.n	2cf98 <_dtoa_r+0x438>
   2cf4e:	2301      	movs	r3, #1
   2cf50:	930e      	str	r3, [sp, #56]	; 0x38
   2cf52:	e6af      	b.n	2ccb4 <_dtoa_r+0x154>
   2cf54:	9a08      	ldr	r2, [sp, #32]
   2cf56:	9b02      	ldr	r3, [sp, #8]
   2cf58:	1ad2      	subs	r2, r2, r3
   2cf5a:	425b      	negs	r3, r3
   2cf5c:	930c      	str	r3, [sp, #48]	; 0x30
   2cf5e:	2300      	movs	r3, #0
   2cf60:	9208      	str	r2, [sp, #32]
   2cf62:	930d      	str	r3, [sp, #52]	; 0x34
   2cf64:	e6b8      	b.n	2ccd8 <_dtoa_r+0x178>
   2cf66:	f1c7 0301 	rsb	r3, r7, #1
   2cf6a:	9308      	str	r3, [sp, #32]
   2cf6c:	2300      	movs	r3, #0
   2cf6e:	9306      	str	r3, [sp, #24]
   2cf70:	e6a7      	b.n	2ccc2 <_dtoa_r+0x162>
   2cf72:	9d02      	ldr	r5, [sp, #8]
   2cf74:	4628      	mov	r0, r5
   2cf76:	f7d3 fd83 	bl	a80 <__aeabi_i2d>
   2cf7a:	4602      	mov	r2, r0
   2cf7c:	460b      	mov	r3, r1
   2cf7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   2cf82:	f7d4 f84b 	bl	101c <__aeabi_dcmpeq>
   2cf86:	2800      	cmp	r0, #0
   2cf88:	f47f ae80 	bne.w	2cc8c <_dtoa_r+0x12c>
   2cf8c:	1e6b      	subs	r3, r5, #1
   2cf8e:	9302      	str	r3, [sp, #8]
   2cf90:	e67c      	b.n	2cc8c <_dtoa_r+0x12c>
   2cf92:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2cf94:	9d08      	ldr	r5, [sp, #32]
   2cf96:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   2cf98:	2d00      	cmp	r5, #0
   2cf9a:	dd0c      	ble.n	2cfb6 <_dtoa_r+0x456>
   2cf9c:	9906      	ldr	r1, [sp, #24]
   2cf9e:	2900      	cmp	r1, #0
   2cfa0:	460b      	mov	r3, r1
   2cfa2:	dd08      	ble.n	2cfb6 <_dtoa_r+0x456>
   2cfa4:	42a9      	cmp	r1, r5
   2cfa6:	9a08      	ldr	r2, [sp, #32]
   2cfa8:	bfa8      	it	ge
   2cfaa:	462b      	movge	r3, r5
   2cfac:	1ad2      	subs	r2, r2, r3
   2cfae:	1aed      	subs	r5, r5, r3
   2cfb0:	1acb      	subs	r3, r1, r3
   2cfb2:	9208      	str	r2, [sp, #32]
   2cfb4:	9306      	str	r3, [sp, #24]
   2cfb6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cfb8:	b1d3      	cbz	r3, 2cff0 <_dtoa_r+0x490>
   2cfba:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2cfbc:	2b00      	cmp	r3, #0
   2cfbe:	f000 82b7 	beq.w	2d530 <_dtoa_r+0x9d0>
   2cfc2:	2f00      	cmp	r7, #0
   2cfc4:	dd10      	ble.n	2cfe8 <_dtoa_r+0x488>
   2cfc6:	4631      	mov	r1, r6
   2cfc8:	463a      	mov	r2, r7
   2cfca:	4620      	mov	r0, r4
   2cfcc:	f000 ff96 	bl	2defc <__pow5mult>
   2cfd0:	464a      	mov	r2, r9
   2cfd2:	4601      	mov	r1, r0
   2cfd4:	4606      	mov	r6, r0
   2cfd6:	4620      	mov	r0, r4
   2cfd8:	f000 fefe 	bl	2ddd8 <__multiply>
   2cfdc:	4649      	mov	r1, r9
   2cfde:	4680      	mov	r8, r0
   2cfe0:	4620      	mov	r0, r4
   2cfe2:	f000 fe55 	bl	2dc90 <_Bfree>
   2cfe6:	46c1      	mov	r9, r8
   2cfe8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2cfea:	1bda      	subs	r2, r3, r7
   2cfec:	f040 82a1 	bne.w	2d532 <_dtoa_r+0x9d2>
   2cff0:	2101      	movs	r1, #1
   2cff2:	4620      	mov	r0, r4
   2cff4:	f000 fee6 	bl	2ddc4 <__i2b>
   2cff8:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2cffa:	2b00      	cmp	r3, #0
   2cffc:	4680      	mov	r8, r0
   2cffe:	dd1c      	ble.n	2d03a <_dtoa_r+0x4da>
   2d000:	4601      	mov	r1, r0
   2d002:	461a      	mov	r2, r3
   2d004:	4620      	mov	r0, r4
   2d006:	f000 ff79 	bl	2defc <__pow5mult>
   2d00a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d00c:	2b01      	cmp	r3, #1
   2d00e:	4680      	mov	r8, r0
   2d010:	f340 8254 	ble.w	2d4bc <_dtoa_r+0x95c>
   2d014:	2300      	movs	r3, #0
   2d016:	930c      	str	r3, [sp, #48]	; 0x30
   2d018:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2d01c:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   2d020:	6918      	ldr	r0, [r3, #16]
   2d022:	f000 fe7f 	bl	2dd24 <__hi0bits>
   2d026:	f1c0 0020 	rsb	r0, r0, #32
   2d02a:	e010      	b.n	2d04e <_dtoa_r+0x4ee>
   2d02c:	f1c3 0520 	rsb	r5, r3, #32
   2d030:	fa0a f005 	lsl.w	r0, sl, r5
   2d034:	e674      	b.n	2cd20 <_dtoa_r+0x1c0>
   2d036:	900e      	str	r0, [sp, #56]	; 0x38
   2d038:	e63c      	b.n	2ccb4 <_dtoa_r+0x154>
   2d03a:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d03c:	2b01      	cmp	r3, #1
   2d03e:	f340 8287 	ble.w	2d550 <_dtoa_r+0x9f0>
   2d042:	2300      	movs	r3, #0
   2d044:	930c      	str	r3, [sp, #48]	; 0x30
   2d046:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   2d048:	2001      	movs	r0, #1
   2d04a:	2b00      	cmp	r3, #0
   2d04c:	d1e4      	bne.n	2d018 <_dtoa_r+0x4b8>
   2d04e:	9a06      	ldr	r2, [sp, #24]
   2d050:	4410      	add	r0, r2
   2d052:	f010 001f 	ands.w	r0, r0, #31
   2d056:	f000 80a1 	beq.w	2d19c <_dtoa_r+0x63c>
   2d05a:	f1c0 0320 	rsb	r3, r0, #32
   2d05e:	2b04      	cmp	r3, #4
   2d060:	f340 849e 	ble.w	2d9a0 <_dtoa_r+0xe40>
   2d064:	9b08      	ldr	r3, [sp, #32]
   2d066:	f1c0 001c 	rsb	r0, r0, #28
   2d06a:	4403      	add	r3, r0
   2d06c:	9308      	str	r3, [sp, #32]
   2d06e:	4613      	mov	r3, r2
   2d070:	4403      	add	r3, r0
   2d072:	4405      	add	r5, r0
   2d074:	9306      	str	r3, [sp, #24]
   2d076:	9b08      	ldr	r3, [sp, #32]
   2d078:	2b00      	cmp	r3, #0
   2d07a:	dd05      	ble.n	2d088 <_dtoa_r+0x528>
   2d07c:	4649      	mov	r1, r9
   2d07e:	461a      	mov	r2, r3
   2d080:	4620      	mov	r0, r4
   2d082:	f000 ff8b 	bl	2df9c <__lshift>
   2d086:	4681      	mov	r9, r0
   2d088:	9b06      	ldr	r3, [sp, #24]
   2d08a:	2b00      	cmp	r3, #0
   2d08c:	dd05      	ble.n	2d09a <_dtoa_r+0x53a>
   2d08e:	4641      	mov	r1, r8
   2d090:	461a      	mov	r2, r3
   2d092:	4620      	mov	r0, r4
   2d094:	f000 ff82 	bl	2df9c <__lshift>
   2d098:	4680      	mov	r8, r0
   2d09a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d09c:	2b00      	cmp	r3, #0
   2d09e:	f040 8086 	bne.w	2d1ae <_dtoa_r+0x64e>
   2d0a2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d0a4:	2b00      	cmp	r3, #0
   2d0a6:	f340 8266 	ble.w	2d576 <_dtoa_r+0xa16>
   2d0aa:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d0ac:	2b00      	cmp	r3, #0
   2d0ae:	f000 8098 	beq.w	2d1e2 <_dtoa_r+0x682>
   2d0b2:	2d00      	cmp	r5, #0
   2d0b4:	dd05      	ble.n	2d0c2 <_dtoa_r+0x562>
   2d0b6:	4631      	mov	r1, r6
   2d0b8:	462a      	mov	r2, r5
   2d0ba:	4620      	mov	r0, r4
   2d0bc:	f000 ff6e 	bl	2df9c <__lshift>
   2d0c0:	4606      	mov	r6, r0
   2d0c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d0c4:	2b00      	cmp	r3, #0
   2d0c6:	f040 8337 	bne.w	2d738 <_dtoa_r+0xbd8>
   2d0ca:	9606      	str	r6, [sp, #24]
   2d0cc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d0ce:	9a04      	ldr	r2, [sp, #16]
   2d0d0:	f8dd b018 	ldr.w	fp, [sp, #24]
   2d0d4:	3b01      	subs	r3, #1
   2d0d6:	18d3      	adds	r3, r2, r3
   2d0d8:	930b      	str	r3, [sp, #44]	; 0x2c
   2d0da:	f00a 0301 	and.w	r3, sl, #1
   2d0de:	930c      	str	r3, [sp, #48]	; 0x30
   2d0e0:	4617      	mov	r7, r2
   2d0e2:	46c2      	mov	sl, r8
   2d0e4:	4651      	mov	r1, sl
   2d0e6:	4648      	mov	r0, r9
   2d0e8:	f7ff fca6 	bl	2ca38 <quorem>
   2d0ec:	4631      	mov	r1, r6
   2d0ee:	4605      	mov	r5, r0
   2d0f0:	4648      	mov	r0, r9
   2d0f2:	f000 ffa5 	bl	2e040 <__mcmp>
   2d0f6:	465a      	mov	r2, fp
   2d0f8:	900a      	str	r0, [sp, #40]	; 0x28
   2d0fa:	4651      	mov	r1, sl
   2d0fc:	4620      	mov	r0, r4
   2d0fe:	f000 ffbb 	bl	2e078 <__mdiff>
   2d102:	68c2      	ldr	r2, [r0, #12]
   2d104:	4680      	mov	r8, r0
   2d106:	f105 0330 	add.w	r3, r5, #48	; 0x30
   2d10a:	2a00      	cmp	r2, #0
   2d10c:	f040 822b 	bne.w	2d566 <_dtoa_r+0xa06>
   2d110:	4601      	mov	r1, r0
   2d112:	4648      	mov	r0, r9
   2d114:	9308      	str	r3, [sp, #32]
   2d116:	f000 ff93 	bl	2e040 <__mcmp>
   2d11a:	4641      	mov	r1, r8
   2d11c:	9006      	str	r0, [sp, #24]
   2d11e:	4620      	mov	r0, r4
   2d120:	f000 fdb6 	bl	2dc90 <_Bfree>
   2d124:	9a06      	ldr	r2, [sp, #24]
   2d126:	9b08      	ldr	r3, [sp, #32]
   2d128:	b932      	cbnz	r2, 2d138 <_dtoa_r+0x5d8>
   2d12a:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d12c:	b921      	cbnz	r1, 2d138 <_dtoa_r+0x5d8>
   2d12e:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d130:	2a00      	cmp	r2, #0
   2d132:	f000 83ef 	beq.w	2d914 <_dtoa_r+0xdb4>
   2d136:	9a24      	ldr	r2, [sp, #144]	; 0x90
   2d138:	990a      	ldr	r1, [sp, #40]	; 0x28
   2d13a:	2900      	cmp	r1, #0
   2d13c:	f2c0 829f 	blt.w	2d67e <_dtoa_r+0xb1e>
   2d140:	d105      	bne.n	2d14e <_dtoa_r+0x5ee>
   2d142:	9924      	ldr	r1, [sp, #144]	; 0x90
   2d144:	b919      	cbnz	r1, 2d14e <_dtoa_r+0x5ee>
   2d146:	990c      	ldr	r1, [sp, #48]	; 0x30
   2d148:	2900      	cmp	r1, #0
   2d14a:	f000 8298 	beq.w	2d67e <_dtoa_r+0xb1e>
   2d14e:	2a00      	cmp	r2, #0
   2d150:	f300 8306 	bgt.w	2d760 <_dtoa_r+0xc00>
   2d154:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   2d156:	703b      	strb	r3, [r7, #0]
   2d158:	f107 0801 	add.w	r8, r7, #1
   2d15c:	4297      	cmp	r7, r2
   2d15e:	4645      	mov	r5, r8
   2d160:	f000 830c 	beq.w	2d77c <_dtoa_r+0xc1c>
   2d164:	4649      	mov	r1, r9
   2d166:	2300      	movs	r3, #0
   2d168:	220a      	movs	r2, #10
   2d16a:	4620      	mov	r0, r4
   2d16c:	f000 fd9a 	bl	2dca4 <__multadd>
   2d170:	455e      	cmp	r6, fp
   2d172:	4681      	mov	r9, r0
   2d174:	4631      	mov	r1, r6
   2d176:	f04f 0300 	mov.w	r3, #0
   2d17a:	f04f 020a 	mov.w	r2, #10
   2d17e:	4620      	mov	r0, r4
   2d180:	f000 81eb 	beq.w	2d55a <_dtoa_r+0x9fa>
   2d184:	f000 fd8e 	bl	2dca4 <__multadd>
   2d188:	4659      	mov	r1, fp
   2d18a:	4606      	mov	r6, r0
   2d18c:	2300      	movs	r3, #0
   2d18e:	220a      	movs	r2, #10
   2d190:	4620      	mov	r0, r4
   2d192:	f000 fd87 	bl	2dca4 <__multadd>
   2d196:	4647      	mov	r7, r8
   2d198:	4683      	mov	fp, r0
   2d19a:	e7a3      	b.n	2d0e4 <_dtoa_r+0x584>
   2d19c:	201c      	movs	r0, #28
   2d19e:	9b08      	ldr	r3, [sp, #32]
   2d1a0:	4403      	add	r3, r0
   2d1a2:	9308      	str	r3, [sp, #32]
   2d1a4:	9b06      	ldr	r3, [sp, #24]
   2d1a6:	4403      	add	r3, r0
   2d1a8:	4405      	add	r5, r0
   2d1aa:	9306      	str	r3, [sp, #24]
   2d1ac:	e763      	b.n	2d076 <_dtoa_r+0x516>
   2d1ae:	4641      	mov	r1, r8
   2d1b0:	4648      	mov	r0, r9
   2d1b2:	f000 ff45 	bl	2e040 <__mcmp>
   2d1b6:	2800      	cmp	r0, #0
   2d1b8:	f6bf af73 	bge.w	2d0a2 <_dtoa_r+0x542>
   2d1bc:	9f02      	ldr	r7, [sp, #8]
   2d1be:	4649      	mov	r1, r9
   2d1c0:	2300      	movs	r3, #0
   2d1c2:	220a      	movs	r2, #10
   2d1c4:	4620      	mov	r0, r4
   2d1c6:	3f01      	subs	r7, #1
   2d1c8:	9702      	str	r7, [sp, #8]
   2d1ca:	f000 fd6b 	bl	2dca4 <__multadd>
   2d1ce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d1d0:	4681      	mov	r9, r0
   2d1d2:	2b00      	cmp	r3, #0
   2d1d4:	f040 83b6 	bne.w	2d944 <_dtoa_r+0xde4>
   2d1d8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d1da:	2b00      	cmp	r3, #0
   2d1dc:	f340 83bf 	ble.w	2d95e <_dtoa_r+0xdfe>
   2d1e0:	930a      	str	r3, [sp, #40]	; 0x28
   2d1e2:	f8dd b010 	ldr.w	fp, [sp, #16]
   2d1e6:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   2d1e8:	465d      	mov	r5, fp
   2d1ea:	e002      	b.n	2d1f2 <_dtoa_r+0x692>
   2d1ec:	f000 fd5a 	bl	2dca4 <__multadd>
   2d1f0:	4681      	mov	r9, r0
   2d1f2:	4641      	mov	r1, r8
   2d1f4:	4648      	mov	r0, r9
   2d1f6:	f7ff fc1f 	bl	2ca38 <quorem>
   2d1fa:	f100 0a30 	add.w	sl, r0, #48	; 0x30
   2d1fe:	f805 ab01 	strb.w	sl, [r5], #1
   2d202:	eba5 030b 	sub.w	r3, r5, fp
   2d206:	42bb      	cmp	r3, r7
   2d208:	f04f 020a 	mov.w	r2, #10
   2d20c:	f04f 0300 	mov.w	r3, #0
   2d210:	4649      	mov	r1, r9
   2d212:	4620      	mov	r0, r4
   2d214:	dbea      	blt.n	2d1ec <_dtoa_r+0x68c>
   2d216:	9b04      	ldr	r3, [sp, #16]
   2d218:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d21a:	2a01      	cmp	r2, #1
   2d21c:	bfac      	ite	ge
   2d21e:	189b      	addge	r3, r3, r2
   2d220:	3301      	addlt	r3, #1
   2d222:	461d      	mov	r5, r3
   2d224:	f04f 0b00 	mov.w	fp, #0
   2d228:	4649      	mov	r1, r9
   2d22a:	2201      	movs	r2, #1
   2d22c:	4620      	mov	r0, r4
   2d22e:	f000 feb5 	bl	2df9c <__lshift>
   2d232:	4641      	mov	r1, r8
   2d234:	4681      	mov	r9, r0
   2d236:	f000 ff03 	bl	2e040 <__mcmp>
   2d23a:	2800      	cmp	r0, #0
   2d23c:	f340 823d 	ble.w	2d6ba <_dtoa_r+0xb5a>
   2d240:	f815 2c01 	ldrb.w	r2, [r5, #-1]
   2d244:	9904      	ldr	r1, [sp, #16]
   2d246:	1e6b      	subs	r3, r5, #1
   2d248:	e004      	b.n	2d254 <_dtoa_r+0x6f4>
   2d24a:	428b      	cmp	r3, r1
   2d24c:	f000 81ae 	beq.w	2d5ac <_dtoa_r+0xa4c>
   2d250:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
   2d254:	2a39      	cmp	r2, #57	; 0x39
   2d256:	f103 0501 	add.w	r5, r3, #1
   2d25a:	d0f6      	beq.n	2d24a <_dtoa_r+0x6ea>
   2d25c:	3201      	adds	r2, #1
   2d25e:	701a      	strb	r2, [r3, #0]
   2d260:	4641      	mov	r1, r8
   2d262:	4620      	mov	r0, r4
   2d264:	f000 fd14 	bl	2dc90 <_Bfree>
   2d268:	2e00      	cmp	r6, #0
   2d26a:	f43f ae3d 	beq.w	2cee8 <_dtoa_r+0x388>
   2d26e:	f1bb 0f00 	cmp.w	fp, #0
   2d272:	d005      	beq.n	2d280 <_dtoa_r+0x720>
   2d274:	45b3      	cmp	fp, r6
   2d276:	d003      	beq.n	2d280 <_dtoa_r+0x720>
   2d278:	4659      	mov	r1, fp
   2d27a:	4620      	mov	r0, r4
   2d27c:	f000 fd08 	bl	2dc90 <_Bfree>
   2d280:	4631      	mov	r1, r6
   2d282:	4620      	mov	r0, r4
   2d284:	f000 fd04 	bl	2dc90 <_Bfree>
   2d288:	e62e      	b.n	2cee8 <_dtoa_r+0x388>
   2d28a:	2300      	movs	r3, #0
   2d28c:	930b      	str	r3, [sp, #44]	; 0x2c
   2d28e:	9b02      	ldr	r3, [sp, #8]
   2d290:	9a25      	ldr	r2, [sp, #148]	; 0x94
   2d292:	4413      	add	r3, r2
   2d294:	930f      	str	r3, [sp, #60]	; 0x3c
   2d296:	3301      	adds	r3, #1
   2d298:	2b01      	cmp	r3, #1
   2d29a:	461f      	mov	r7, r3
   2d29c:	461e      	mov	r6, r3
   2d29e:	930a      	str	r3, [sp, #40]	; 0x28
   2d2a0:	bfb8      	it	lt
   2d2a2:	2701      	movlt	r7, #1
   2d2a4:	2100      	movs	r1, #0
   2d2a6:	2f17      	cmp	r7, #23
   2d2a8:	6461      	str	r1, [r4, #68]	; 0x44
   2d2aa:	d90a      	bls.n	2d2c2 <_dtoa_r+0x762>
   2d2ac:	2201      	movs	r2, #1
   2d2ae:	2304      	movs	r3, #4
   2d2b0:	005b      	lsls	r3, r3, #1
   2d2b2:	f103 0014 	add.w	r0, r3, #20
   2d2b6:	4287      	cmp	r7, r0
   2d2b8:	4611      	mov	r1, r2
   2d2ba:	f102 0201 	add.w	r2, r2, #1
   2d2be:	d2f7      	bcs.n	2d2b0 <_dtoa_r+0x750>
   2d2c0:	6461      	str	r1, [r4, #68]	; 0x44
   2d2c2:	4620      	mov	r0, r4
   2d2c4:	f000 fcbe 	bl	2dc44 <_Balloc>
   2d2c8:	2e0e      	cmp	r6, #14
   2d2ca:	9004      	str	r0, [sp, #16]
   2d2cc:	6420      	str	r0, [r4, #64]	; 0x40
   2d2ce:	f63f ad41 	bhi.w	2cd54 <_dtoa_r+0x1f4>
   2d2d2:	2d00      	cmp	r5, #0
   2d2d4:	f43f ad3e 	beq.w	2cd54 <_dtoa_r+0x1f4>
   2d2d8:	9902      	ldr	r1, [sp, #8]
   2d2da:	2900      	cmp	r1, #0
   2d2dc:	e9cd ab10 	strd	sl, fp, [sp, #64]	; 0x40
   2d2e0:	f340 8202 	ble.w	2d6e8 <_dtoa_r+0xb88>
   2d2e4:	4bb8      	ldr	r3, [pc, #736]	; (2d5c8 <_dtoa_r+0xa68>)
   2d2e6:	f001 020f 	and.w	r2, r1, #15
   2d2ea:	110d      	asrs	r5, r1, #4
   2d2ec:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d2f0:	06e9      	lsls	r1, r5, #27
   2d2f2:	e9d3 6700 	ldrd	r6, r7, [r3]
   2d2f6:	f140 81ae 	bpl.w	2d656 <_dtoa_r+0xaf6>
   2d2fa:	4bb4      	ldr	r3, [pc, #720]	; (2d5cc <_dtoa_r+0xa6c>)
   2d2fc:	4650      	mov	r0, sl
   2d2fe:	4659      	mov	r1, fp
   2d300:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   2d304:	f7d3 fd4c 	bl	da0 <__aeabi_ddiv>
   2d308:	e9cd 0112 	strd	r0, r1, [sp, #72]	; 0x48
   2d30c:	f005 050f 	and.w	r5, r5, #15
   2d310:	f04f 0a03 	mov.w	sl, #3
   2d314:	b18d      	cbz	r5, 2d33a <_dtoa_r+0x7da>
   2d316:	f8df 82b4 	ldr.w	r8, [pc, #692]	; 2d5cc <_dtoa_r+0xa6c>
   2d31a:	07ea      	lsls	r2, r5, #31
   2d31c:	d509      	bpl.n	2d332 <_dtoa_r+0x7d2>
   2d31e:	4630      	mov	r0, r6
   2d320:	4639      	mov	r1, r7
   2d322:	e9d8 2300 	ldrd	r2, r3, [r8]
   2d326:	f7d3 fc11 	bl	b4c <__aeabi_dmul>
   2d32a:	f10a 0a01 	add.w	sl, sl, #1
   2d32e:	4606      	mov	r6, r0
   2d330:	460f      	mov	r7, r1
   2d332:	106d      	asrs	r5, r5, #1
   2d334:	f108 0808 	add.w	r8, r8, #8
   2d338:	d1ef      	bne.n	2d31a <_dtoa_r+0x7ba>
   2d33a:	463b      	mov	r3, r7
   2d33c:	4632      	mov	r2, r6
   2d33e:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   2d342:	f7d3 fd2d 	bl	da0 <__aeabi_ddiv>
   2d346:	4607      	mov	r7, r0
   2d348:	4688      	mov	r8, r1
   2d34a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   2d34c:	b143      	cbz	r3, 2d360 <_dtoa_r+0x800>
   2d34e:	2200      	movs	r2, #0
   2d350:	4b9f      	ldr	r3, [pc, #636]	; (2d5d0 <_dtoa_r+0xa70>)
   2d352:	4638      	mov	r0, r7
   2d354:	4641      	mov	r1, r8
   2d356:	f7d3 fe6b 	bl	1030 <__aeabi_dcmplt>
   2d35a:	2800      	cmp	r0, #0
   2d35c:	f040 8286 	bne.w	2d86c <_dtoa_r+0xd0c>
   2d360:	4650      	mov	r0, sl
   2d362:	f7d3 fb8d 	bl	a80 <__aeabi_i2d>
   2d366:	463a      	mov	r2, r7
   2d368:	4643      	mov	r3, r8
   2d36a:	f7d3 fbef 	bl	b4c <__aeabi_dmul>
   2d36e:	4b99      	ldr	r3, [pc, #612]	; (2d5d4 <_dtoa_r+0xa74>)
   2d370:	2200      	movs	r2, #0
   2d372:	f7d3 fa39 	bl	7e8 <__adddf3>
   2d376:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d378:	4605      	mov	r5, r0
   2d37a:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d37e:	2b00      	cmp	r3, #0
   2d380:	f000 813e 	beq.w	2d600 <_dtoa_r+0xaa0>
   2d384:	9b02      	ldr	r3, [sp, #8]
   2d386:	9315      	str	r3, [sp, #84]	; 0x54
   2d388:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d38a:	9312      	str	r3, [sp, #72]	; 0x48
   2d38c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   2d38e:	2b00      	cmp	r3, #0
   2d390:	f000 81fa 	beq.w	2d788 <_dtoa_r+0xc28>
   2d394:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d396:	4b8c      	ldr	r3, [pc, #560]	; (2d5c8 <_dtoa_r+0xa68>)
   2d398:	498f      	ldr	r1, [pc, #572]	; (2d5d8 <_dtoa_r+0xa78>)
   2d39a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d39e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   2d3a2:	2000      	movs	r0, #0
   2d3a4:	f7d3 fcfc 	bl	da0 <__aeabi_ddiv>
   2d3a8:	462a      	mov	r2, r5
   2d3aa:	4633      	mov	r3, r6
   2d3ac:	f7d3 fa1a 	bl	7e4 <__aeabi_dsub>
   2d3b0:	4682      	mov	sl, r0
   2d3b2:	468b      	mov	fp, r1
   2d3b4:	4638      	mov	r0, r7
   2d3b6:	4641      	mov	r1, r8
   2d3b8:	f7d3 fe78 	bl	10ac <__aeabi_d2iz>
   2d3bc:	4605      	mov	r5, r0
   2d3be:	f7d3 fb5f 	bl	a80 <__aeabi_i2d>
   2d3c2:	4602      	mov	r2, r0
   2d3c4:	460b      	mov	r3, r1
   2d3c6:	4638      	mov	r0, r7
   2d3c8:	4641      	mov	r1, r8
   2d3ca:	f7d3 fa0b 	bl	7e4 <__aeabi_dsub>
   2d3ce:	3530      	adds	r5, #48	; 0x30
   2d3d0:	fa5f f885 	uxtb.w	r8, r5
   2d3d4:	9d04      	ldr	r5, [sp, #16]
   2d3d6:	4606      	mov	r6, r0
   2d3d8:	460f      	mov	r7, r1
   2d3da:	f885 8000 	strb.w	r8, [r5]
   2d3de:	4602      	mov	r2, r0
   2d3e0:	460b      	mov	r3, r1
   2d3e2:	4650      	mov	r0, sl
   2d3e4:	4659      	mov	r1, fp
   2d3e6:	3501      	adds	r5, #1
   2d3e8:	f7d3 fe40 	bl	106c <__aeabi_dcmpgt>
   2d3ec:	2800      	cmp	r0, #0
   2d3ee:	d154      	bne.n	2d49a <_dtoa_r+0x93a>
   2d3f0:	4632      	mov	r2, r6
   2d3f2:	463b      	mov	r3, r7
   2d3f4:	2000      	movs	r0, #0
   2d3f6:	4976      	ldr	r1, [pc, #472]	; (2d5d0 <_dtoa_r+0xa70>)
   2d3f8:	f7d3 f9f4 	bl	7e4 <__aeabi_dsub>
   2d3fc:	4602      	mov	r2, r0
   2d3fe:	460b      	mov	r3, r1
   2d400:	4650      	mov	r0, sl
   2d402:	4659      	mov	r1, fp
   2d404:	f7d3 fe32 	bl	106c <__aeabi_dcmpgt>
   2d408:	2800      	cmp	r0, #0
   2d40a:	f040 8270 	bne.w	2d8ee <_dtoa_r+0xd8e>
   2d40e:	9a12      	ldr	r2, [sp, #72]	; 0x48
   2d410:	2a01      	cmp	r2, #1
   2d412:	f000 8111 	beq.w	2d638 <_dtoa_r+0xad8>
   2d416:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d418:	9a04      	ldr	r2, [sp, #16]
   2d41a:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d41e:	4413      	add	r3, r2
   2d420:	4699      	mov	r9, r3
   2d422:	e00d      	b.n	2d440 <_dtoa_r+0x8e0>
   2d424:	2000      	movs	r0, #0
   2d426:	496a      	ldr	r1, [pc, #424]	; (2d5d0 <_dtoa_r+0xa70>)
   2d428:	f7d3 f9dc 	bl	7e4 <__aeabi_dsub>
   2d42c:	4652      	mov	r2, sl
   2d42e:	465b      	mov	r3, fp
   2d430:	f7d3 fdfe 	bl	1030 <__aeabi_dcmplt>
   2d434:	2800      	cmp	r0, #0
   2d436:	f040 8258 	bne.w	2d8ea <_dtoa_r+0xd8a>
   2d43a:	454d      	cmp	r5, r9
   2d43c:	f000 80fa 	beq.w	2d634 <_dtoa_r+0xad4>
   2d440:	4650      	mov	r0, sl
   2d442:	4659      	mov	r1, fp
   2d444:	2200      	movs	r2, #0
   2d446:	4b65      	ldr	r3, [pc, #404]	; (2d5dc <_dtoa_r+0xa7c>)
   2d448:	f7d3 fb80 	bl	b4c <__aeabi_dmul>
   2d44c:	2200      	movs	r2, #0
   2d44e:	4b63      	ldr	r3, [pc, #396]	; (2d5dc <_dtoa_r+0xa7c>)
   2d450:	4682      	mov	sl, r0
   2d452:	468b      	mov	fp, r1
   2d454:	4630      	mov	r0, r6
   2d456:	4639      	mov	r1, r7
   2d458:	f7d3 fb78 	bl	b4c <__aeabi_dmul>
   2d45c:	460f      	mov	r7, r1
   2d45e:	4606      	mov	r6, r0
   2d460:	f7d3 fe24 	bl	10ac <__aeabi_d2iz>
   2d464:	4680      	mov	r8, r0
   2d466:	f7d3 fb0b 	bl	a80 <__aeabi_i2d>
   2d46a:	4602      	mov	r2, r0
   2d46c:	460b      	mov	r3, r1
   2d46e:	4630      	mov	r0, r6
   2d470:	4639      	mov	r1, r7
   2d472:	f7d3 f9b7 	bl	7e4 <__aeabi_dsub>
   2d476:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d47a:	fa5f f888 	uxtb.w	r8, r8
   2d47e:	4652      	mov	r2, sl
   2d480:	465b      	mov	r3, fp
   2d482:	f805 8b01 	strb.w	r8, [r5], #1
   2d486:	4606      	mov	r6, r0
   2d488:	460f      	mov	r7, r1
   2d48a:	f7d3 fdd1 	bl	1030 <__aeabi_dcmplt>
   2d48e:	4632      	mov	r2, r6
   2d490:	463b      	mov	r3, r7
   2d492:	2800      	cmp	r0, #0
   2d494:	d0c6      	beq.n	2d424 <_dtoa_r+0x8c4>
   2d496:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d49a:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d49c:	9302      	str	r3, [sp, #8]
   2d49e:	e523      	b.n	2cee8 <_dtoa_r+0x388>
   2d4a0:	2300      	movs	r3, #0
   2d4a2:	930b      	str	r3, [sp, #44]	; 0x2c
   2d4a4:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d4a6:	2b00      	cmp	r3, #0
   2d4a8:	f340 80dc 	ble.w	2d664 <_dtoa_r+0xb04>
   2d4ac:	461f      	mov	r7, r3
   2d4ae:	461e      	mov	r6, r3
   2d4b0:	930f      	str	r3, [sp, #60]	; 0x3c
   2d4b2:	930a      	str	r3, [sp, #40]	; 0x28
   2d4b4:	e6f6      	b.n	2d2a4 <_dtoa_r+0x744>
   2d4b6:	2301      	movs	r3, #1
   2d4b8:	930b      	str	r3, [sp, #44]	; 0x2c
   2d4ba:	e7f3      	b.n	2d4a4 <_dtoa_r+0x944>
   2d4bc:	f1ba 0f00 	cmp.w	sl, #0
   2d4c0:	f47f ada8 	bne.w	2d014 <_dtoa_r+0x4b4>
   2d4c4:	f3cb 0313 	ubfx	r3, fp, #0, #20
   2d4c8:	2b00      	cmp	r3, #0
   2d4ca:	f47f adba 	bne.w	2d042 <_dtoa_r+0x4e2>
   2d4ce:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   2d4d2:	0d3f      	lsrs	r7, r7, #20
   2d4d4:	053f      	lsls	r7, r7, #20
   2d4d6:	2f00      	cmp	r7, #0
   2d4d8:	f000 820d 	beq.w	2d8f6 <_dtoa_r+0xd96>
   2d4dc:	9b08      	ldr	r3, [sp, #32]
   2d4de:	3301      	adds	r3, #1
   2d4e0:	9308      	str	r3, [sp, #32]
   2d4e2:	9b06      	ldr	r3, [sp, #24]
   2d4e4:	3301      	adds	r3, #1
   2d4e6:	9306      	str	r3, [sp, #24]
   2d4e8:	2301      	movs	r3, #1
   2d4ea:	930c      	str	r3, [sp, #48]	; 0x30
   2d4ec:	e5ab      	b.n	2d046 <_dtoa_r+0x4e6>
   2d4ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d4f0:	2b00      	cmp	r3, #0
   2d4f2:	f73f ac42 	bgt.w	2cd7a <_dtoa_r+0x21a>
   2d4f6:	f040 8221 	bne.w	2d93c <_dtoa_r+0xddc>
   2d4fa:	2200      	movs	r2, #0
   2d4fc:	4b38      	ldr	r3, [pc, #224]	; (2d5e0 <_dtoa_r+0xa80>)
   2d4fe:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
   2d502:	f7d3 fb23 	bl	b4c <__aeabi_dmul>
   2d506:	4652      	mov	r2, sl
   2d508:	465b      	mov	r3, fp
   2d50a:	f7d3 fda5 	bl	1058 <__aeabi_dcmpge>
   2d50e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   2d512:	4646      	mov	r6, r8
   2d514:	2800      	cmp	r0, #0
   2d516:	d041      	beq.n	2d59c <_dtoa_r+0xa3c>
   2d518:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d51a:	9d04      	ldr	r5, [sp, #16]
   2d51c:	43db      	mvns	r3, r3
   2d51e:	9302      	str	r3, [sp, #8]
   2d520:	4641      	mov	r1, r8
   2d522:	4620      	mov	r0, r4
   2d524:	f000 fbb4 	bl	2dc90 <_Bfree>
   2d528:	2e00      	cmp	r6, #0
   2d52a:	f43f acdd 	beq.w	2cee8 <_dtoa_r+0x388>
   2d52e:	e6a7      	b.n	2d280 <_dtoa_r+0x720>
   2d530:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   2d532:	4649      	mov	r1, r9
   2d534:	4620      	mov	r0, r4
   2d536:	f000 fce1 	bl	2defc <__pow5mult>
   2d53a:	4681      	mov	r9, r0
   2d53c:	e558      	b.n	2cff0 <_dtoa_r+0x490>
   2d53e:	9a14      	ldr	r2, [sp, #80]	; 0x50
   2d540:	2a00      	cmp	r2, #0
   2d542:	f000 8187 	beq.w	2d854 <_dtoa_r+0xcf4>
   2d546:	f203 4333 	addw	r3, r3, #1075	; 0x433
   2d54a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d54c:	9d08      	ldr	r5, [sp, #32]
   2d54e:	e4f2      	b.n	2cf36 <_dtoa_r+0x3d6>
   2d550:	f1ba 0f00 	cmp.w	sl, #0
   2d554:	f47f ad75 	bne.w	2d042 <_dtoa_r+0x4e2>
   2d558:	e7b4      	b.n	2d4c4 <_dtoa_r+0x964>
   2d55a:	f000 fba3 	bl	2dca4 <__multadd>
   2d55e:	4647      	mov	r7, r8
   2d560:	4606      	mov	r6, r0
   2d562:	4683      	mov	fp, r0
   2d564:	e5be      	b.n	2d0e4 <_dtoa_r+0x584>
   2d566:	4601      	mov	r1, r0
   2d568:	4620      	mov	r0, r4
   2d56a:	9306      	str	r3, [sp, #24]
   2d56c:	f000 fb90 	bl	2dc90 <_Bfree>
   2d570:	2201      	movs	r2, #1
   2d572:	9b06      	ldr	r3, [sp, #24]
   2d574:	e5e0      	b.n	2d138 <_dtoa_r+0x5d8>
   2d576:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d578:	2b02      	cmp	r3, #2
   2d57a:	f77f ad96 	ble.w	2d0aa <_dtoa_r+0x54a>
   2d57e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d580:	2b00      	cmp	r3, #0
   2d582:	d1c9      	bne.n	2d518 <_dtoa_r+0x9b8>
   2d584:	4641      	mov	r1, r8
   2d586:	2205      	movs	r2, #5
   2d588:	4620      	mov	r0, r4
   2d58a:	f000 fb8b 	bl	2dca4 <__multadd>
   2d58e:	4601      	mov	r1, r0
   2d590:	4680      	mov	r8, r0
   2d592:	4648      	mov	r0, r9
   2d594:	f000 fd54 	bl	2e040 <__mcmp>
   2d598:	2800      	cmp	r0, #0
   2d59a:	ddbd      	ble.n	2d518 <_dtoa_r+0x9b8>
   2d59c:	9a02      	ldr	r2, [sp, #8]
   2d59e:	9904      	ldr	r1, [sp, #16]
   2d5a0:	2331      	movs	r3, #49	; 0x31
   2d5a2:	3201      	adds	r2, #1
   2d5a4:	9202      	str	r2, [sp, #8]
   2d5a6:	700b      	strb	r3, [r1, #0]
   2d5a8:	1c4d      	adds	r5, r1, #1
   2d5aa:	e7b9      	b.n	2d520 <_dtoa_r+0x9c0>
   2d5ac:	9a02      	ldr	r2, [sp, #8]
   2d5ae:	3201      	adds	r2, #1
   2d5b0:	9202      	str	r2, [sp, #8]
   2d5b2:	9a04      	ldr	r2, [sp, #16]
   2d5b4:	2331      	movs	r3, #49	; 0x31
   2d5b6:	7013      	strb	r3, [r2, #0]
   2d5b8:	e652      	b.n	2d260 <_dtoa_r+0x700>
   2d5ba:	2301      	movs	r3, #1
   2d5bc:	930b      	str	r3, [sp, #44]	; 0x2c
   2d5be:	e666      	b.n	2d28e <_dtoa_r+0x72e>
   2d5c0:	f8dd 902c 	ldr.w	r9, [sp, #44]	; 0x2c
   2d5c4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   2d5c6:	e48f      	b.n	2cee8 <_dtoa_r+0x388>
   2d5c8:	00033538 	.word	0x00033538
   2d5cc:	00033510 	.word	0x00033510
   2d5d0:	3ff00000 	.word	0x3ff00000
   2d5d4:	401c0000 	.word	0x401c0000
   2d5d8:	3fe00000 	.word	0x3fe00000
   2d5dc:	40240000 	.word	0x40240000
   2d5e0:	40140000 	.word	0x40140000
   2d5e4:	4650      	mov	r0, sl
   2d5e6:	f7d3 fa4b 	bl	a80 <__aeabi_i2d>
   2d5ea:	463a      	mov	r2, r7
   2d5ec:	4643      	mov	r3, r8
   2d5ee:	f7d3 faad 	bl	b4c <__aeabi_dmul>
   2d5f2:	2200      	movs	r2, #0
   2d5f4:	4bc1      	ldr	r3, [pc, #772]	; (2d8fc <_dtoa_r+0xd9c>)
   2d5f6:	f7d3 f8f7 	bl	7e8 <__adddf3>
   2d5fa:	4605      	mov	r5, r0
   2d5fc:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d600:	4641      	mov	r1, r8
   2d602:	2200      	movs	r2, #0
   2d604:	4bbe      	ldr	r3, [pc, #760]	; (2d900 <_dtoa_r+0xda0>)
   2d606:	4638      	mov	r0, r7
   2d608:	f7d3 f8ec 	bl	7e4 <__aeabi_dsub>
   2d60c:	462a      	mov	r2, r5
   2d60e:	4633      	mov	r3, r6
   2d610:	4682      	mov	sl, r0
   2d612:	468b      	mov	fp, r1
   2d614:	f7d3 fd2a 	bl	106c <__aeabi_dcmpgt>
   2d618:	4680      	mov	r8, r0
   2d61a:	2800      	cmp	r0, #0
   2d61c:	f040 8110 	bne.w	2d840 <_dtoa_r+0xce0>
   2d620:	462a      	mov	r2, r5
   2d622:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
   2d626:	4650      	mov	r0, sl
   2d628:	4659      	mov	r1, fp
   2d62a:	f7d3 fd01 	bl	1030 <__aeabi_dcmplt>
   2d62e:	b118      	cbz	r0, 2d638 <_dtoa_r+0xad8>
   2d630:	4646      	mov	r6, r8
   2d632:	e771      	b.n	2d518 <_dtoa_r+0x9b8>
   2d634:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d638:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	; 0x40
   2d63c:	f7ff bb8a 	b.w	2cd54 <_dtoa_r+0x1f4>
   2d640:	9804      	ldr	r0, [sp, #16]
   2d642:	f7ff babb 	b.w	2cbbc <_dtoa_r+0x5c>
   2d646:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   2d648:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   2d64a:	970c      	str	r7, [sp, #48]	; 0x30
   2d64c:	1afb      	subs	r3, r7, r3
   2d64e:	441a      	add	r2, r3
   2d650:	920d      	str	r2, [sp, #52]	; 0x34
   2d652:	2700      	movs	r7, #0
   2d654:	e469      	b.n	2cf2a <_dtoa_r+0x3ca>
   2d656:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
   2d65a:	f04f 0a02 	mov.w	sl, #2
   2d65e:	e9cd 2312 	strd	r2, r3, [sp, #72]	; 0x48
   2d662:	e657      	b.n	2d314 <_dtoa_r+0x7b4>
   2d664:	2100      	movs	r1, #0
   2d666:	2301      	movs	r3, #1
   2d668:	6461      	str	r1, [r4, #68]	; 0x44
   2d66a:	4620      	mov	r0, r4
   2d66c:	9325      	str	r3, [sp, #148]	; 0x94
   2d66e:	f000 fae9 	bl	2dc44 <_Balloc>
   2d672:	9b25      	ldr	r3, [sp, #148]	; 0x94
   2d674:	9004      	str	r0, [sp, #16]
   2d676:	6420      	str	r0, [r4, #64]	; 0x40
   2d678:	930a      	str	r3, [sp, #40]	; 0x28
   2d67a:	930f      	str	r3, [sp, #60]	; 0x3c
   2d67c:	e629      	b.n	2d2d2 <_dtoa_r+0x772>
   2d67e:	2a00      	cmp	r2, #0
   2d680:	46d0      	mov	r8, sl
   2d682:	f8cd b018 	str.w	fp, [sp, #24]
   2d686:	469a      	mov	sl, r3
   2d688:	dd11      	ble.n	2d6ae <_dtoa_r+0xb4e>
   2d68a:	4649      	mov	r1, r9
   2d68c:	2201      	movs	r2, #1
   2d68e:	4620      	mov	r0, r4
   2d690:	f000 fc84 	bl	2df9c <__lshift>
   2d694:	4641      	mov	r1, r8
   2d696:	4681      	mov	r9, r0
   2d698:	f000 fcd2 	bl	2e040 <__mcmp>
   2d69c:	2800      	cmp	r0, #0
   2d69e:	f340 8146 	ble.w	2d92e <_dtoa_r+0xdce>
   2d6a2:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   2d6a6:	f000 8106 	beq.w	2d8b6 <_dtoa_r+0xd56>
   2d6aa:	f105 0a31 	add.w	sl, r5, #49	; 0x31
   2d6ae:	46b3      	mov	fp, r6
   2d6b0:	f887 a000 	strb.w	sl, [r7]
   2d6b4:	1c7d      	adds	r5, r7, #1
   2d6b6:	9e06      	ldr	r6, [sp, #24]
   2d6b8:	e5d2      	b.n	2d260 <_dtoa_r+0x700>
   2d6ba:	d104      	bne.n	2d6c6 <_dtoa_r+0xb66>
   2d6bc:	f01a 0f01 	tst.w	sl, #1
   2d6c0:	d001      	beq.n	2d6c6 <_dtoa_r+0xb66>
   2d6c2:	e5bd      	b.n	2d240 <_dtoa_r+0x6e0>
   2d6c4:	4615      	mov	r5, r2
   2d6c6:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d6ca:	2b30      	cmp	r3, #48	; 0x30
   2d6cc:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d6d0:	d0f8      	beq.n	2d6c4 <_dtoa_r+0xb64>
   2d6d2:	e5c5      	b.n	2d260 <_dtoa_r+0x700>
   2d6d4:	9904      	ldr	r1, [sp, #16]
   2d6d6:	2230      	movs	r2, #48	; 0x30
   2d6d8:	700a      	strb	r2, [r1, #0]
   2d6da:	9a02      	ldr	r2, [sp, #8]
   2d6dc:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d6e0:	3201      	adds	r2, #1
   2d6e2:	9202      	str	r2, [sp, #8]
   2d6e4:	f7ff bbfc 	b.w	2cee0 <_dtoa_r+0x380>
   2d6e8:	f000 80bb 	beq.w	2d862 <_dtoa_r+0xd02>
   2d6ec:	9b02      	ldr	r3, [sp, #8]
   2d6ee:	425d      	negs	r5, r3
   2d6f0:	4b84      	ldr	r3, [pc, #528]	; (2d904 <_dtoa_r+0xda4>)
   2d6f2:	f005 020f 	and.w	r2, r5, #15
   2d6f6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   2d6fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   2d6fe:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   2d702:	f7d3 fa23 	bl	b4c <__aeabi_dmul>
   2d706:	112d      	asrs	r5, r5, #4
   2d708:	4607      	mov	r7, r0
   2d70a:	4688      	mov	r8, r1
   2d70c:	f000 812c 	beq.w	2d968 <_dtoa_r+0xe08>
   2d710:	4e7d      	ldr	r6, [pc, #500]	; (2d908 <_dtoa_r+0xda8>)
   2d712:	f04f 0a02 	mov.w	sl, #2
   2d716:	07eb      	lsls	r3, r5, #31
   2d718:	d509      	bpl.n	2d72e <_dtoa_r+0xbce>
   2d71a:	4638      	mov	r0, r7
   2d71c:	4641      	mov	r1, r8
   2d71e:	e9d6 2300 	ldrd	r2, r3, [r6]
   2d722:	f7d3 fa13 	bl	b4c <__aeabi_dmul>
   2d726:	f10a 0a01 	add.w	sl, sl, #1
   2d72a:	4607      	mov	r7, r0
   2d72c:	4688      	mov	r8, r1
   2d72e:	106d      	asrs	r5, r5, #1
   2d730:	f106 0608 	add.w	r6, r6, #8
   2d734:	d1ef      	bne.n	2d716 <_dtoa_r+0xbb6>
   2d736:	e608      	b.n	2d34a <_dtoa_r+0x7ea>
   2d738:	6871      	ldr	r1, [r6, #4]
   2d73a:	4620      	mov	r0, r4
   2d73c:	f000 fa82 	bl	2dc44 <_Balloc>
   2d740:	6933      	ldr	r3, [r6, #16]
   2d742:	3302      	adds	r3, #2
   2d744:	009a      	lsls	r2, r3, #2
   2d746:	4605      	mov	r5, r0
   2d748:	f106 010c 	add.w	r1, r6, #12
   2d74c:	300c      	adds	r0, #12
   2d74e:	f7d2 fdb7 	bl	2c0 <memcpy>
   2d752:	4629      	mov	r1, r5
   2d754:	2201      	movs	r2, #1
   2d756:	4620      	mov	r0, r4
   2d758:	f000 fc20 	bl	2df9c <__lshift>
   2d75c:	9006      	str	r0, [sp, #24]
   2d75e:	e4b5      	b.n	2d0cc <_dtoa_r+0x56c>
   2d760:	2b39      	cmp	r3, #57	; 0x39
   2d762:	f8cd b018 	str.w	fp, [sp, #24]
   2d766:	46d0      	mov	r8, sl
   2d768:	f000 80a5 	beq.w	2d8b6 <_dtoa_r+0xd56>
   2d76c:	f103 0a01 	add.w	sl, r3, #1
   2d770:	46b3      	mov	fp, r6
   2d772:	f887 a000 	strb.w	sl, [r7]
   2d776:	1c7d      	adds	r5, r7, #1
   2d778:	9e06      	ldr	r6, [sp, #24]
   2d77a:	e571      	b.n	2d260 <_dtoa_r+0x700>
   2d77c:	465a      	mov	r2, fp
   2d77e:	46d0      	mov	r8, sl
   2d780:	46b3      	mov	fp, r6
   2d782:	469a      	mov	sl, r3
   2d784:	4616      	mov	r6, r2
   2d786:	e54f      	b.n	2d228 <_dtoa_r+0x6c8>
   2d788:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d78a:	495e      	ldr	r1, [pc, #376]	; (2d904 <_dtoa_r+0xda4>)
   2d78c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
   2d790:	462a      	mov	r2, r5
   2d792:	4633      	mov	r3, r6
   2d794:	e951 0102 	ldrd	r0, r1, [r1, #-8]
   2d798:	f7d3 f9d8 	bl	b4c <__aeabi_dmul>
   2d79c:	e9cd 0116 	strd	r0, r1, [sp, #88]	; 0x58
   2d7a0:	4638      	mov	r0, r7
   2d7a2:	4641      	mov	r1, r8
   2d7a4:	f7d3 fc82 	bl	10ac <__aeabi_d2iz>
   2d7a8:	4605      	mov	r5, r0
   2d7aa:	f7d3 f969 	bl	a80 <__aeabi_i2d>
   2d7ae:	460b      	mov	r3, r1
   2d7b0:	4602      	mov	r2, r0
   2d7b2:	4641      	mov	r1, r8
   2d7b4:	4638      	mov	r0, r7
   2d7b6:	f7d3 f815 	bl	7e4 <__aeabi_dsub>
   2d7ba:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d7bc:	460f      	mov	r7, r1
   2d7be:	9904      	ldr	r1, [sp, #16]
   2d7c0:	3530      	adds	r5, #48	; 0x30
   2d7c2:	2b01      	cmp	r3, #1
   2d7c4:	700d      	strb	r5, [r1, #0]
   2d7c6:	4606      	mov	r6, r0
   2d7c8:	f101 0501 	add.w	r5, r1, #1
   2d7cc:	d026      	beq.n	2d81c <_dtoa_r+0xcbc>
   2d7ce:	9b12      	ldr	r3, [sp, #72]	; 0x48
   2d7d0:	9a04      	ldr	r2, [sp, #16]
   2d7d2:	f8df b13c 	ldr.w	fp, [pc, #316]	; 2d910 <_dtoa_r+0xdb0>
   2d7d6:	f8cd 9048 	str.w	r9, [sp, #72]	; 0x48
   2d7da:	4413      	add	r3, r2
   2d7dc:	f04f 0a00 	mov.w	sl, #0
   2d7e0:	4699      	mov	r9, r3
   2d7e2:	4652      	mov	r2, sl
   2d7e4:	465b      	mov	r3, fp
   2d7e6:	4630      	mov	r0, r6
   2d7e8:	4639      	mov	r1, r7
   2d7ea:	f7d3 f9af 	bl	b4c <__aeabi_dmul>
   2d7ee:	460f      	mov	r7, r1
   2d7f0:	4606      	mov	r6, r0
   2d7f2:	f7d3 fc5b 	bl	10ac <__aeabi_d2iz>
   2d7f6:	4680      	mov	r8, r0
   2d7f8:	f7d3 f942 	bl	a80 <__aeabi_i2d>
   2d7fc:	f108 0830 	add.w	r8, r8, #48	; 0x30
   2d800:	4602      	mov	r2, r0
   2d802:	460b      	mov	r3, r1
   2d804:	4630      	mov	r0, r6
   2d806:	4639      	mov	r1, r7
   2d808:	f7d2 ffec 	bl	7e4 <__aeabi_dsub>
   2d80c:	f805 8b01 	strb.w	r8, [r5], #1
   2d810:	454d      	cmp	r5, r9
   2d812:	4606      	mov	r6, r0
   2d814:	460f      	mov	r7, r1
   2d816:	d1e4      	bne.n	2d7e2 <_dtoa_r+0xc82>
   2d818:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d81c:	4b3b      	ldr	r3, [pc, #236]	; (2d90c <_dtoa_r+0xdac>)
   2d81e:	2200      	movs	r2, #0
   2d820:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   2d824:	f7d2 ffe0 	bl	7e8 <__adddf3>
   2d828:	4632      	mov	r2, r6
   2d82a:	463b      	mov	r3, r7
   2d82c:	f7d3 fc00 	bl	1030 <__aeabi_dcmplt>
   2d830:	2800      	cmp	r0, #0
   2d832:	d046      	beq.n	2d8c2 <_dtoa_r+0xd62>
   2d834:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d836:	9302      	str	r3, [sp, #8]
   2d838:	f815 8c01 	ldrb.w	r8, [r5, #-1]
   2d83c:	f7ff bb43 	b.w	2cec6 <_dtoa_r+0x366>
   2d840:	f04f 0800 	mov.w	r8, #0
   2d844:	4646      	mov	r6, r8
   2d846:	e6a9      	b.n	2d59c <_dtoa_r+0xa3c>
   2d848:	9b08      	ldr	r3, [sp, #32]
   2d84a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   2d84c:	1a9d      	subs	r5, r3, r2
   2d84e:	2300      	movs	r3, #0
   2d850:	f7ff bb71 	b.w	2cf36 <_dtoa_r+0x3d6>
   2d854:	9b18      	ldr	r3, [sp, #96]	; 0x60
   2d856:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   2d858:	9d08      	ldr	r5, [sp, #32]
   2d85a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   2d85e:	f7ff bb6a 	b.w	2cf36 <_dtoa_r+0x3d6>
   2d862:	e9dd 7810 	ldrd	r7, r8, [sp, #64]	; 0x40
   2d866:	f04f 0a02 	mov.w	sl, #2
   2d86a:	e56e      	b.n	2d34a <_dtoa_r+0x7ea>
   2d86c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   2d86e:	2b00      	cmp	r3, #0
   2d870:	f43f aeb8 	beq.w	2d5e4 <_dtoa_r+0xa84>
   2d874:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d876:	2b00      	cmp	r3, #0
   2d878:	f77f aede 	ble.w	2d638 <_dtoa_r+0xad8>
   2d87c:	2200      	movs	r2, #0
   2d87e:	4b24      	ldr	r3, [pc, #144]	; (2d910 <_dtoa_r+0xdb0>)
   2d880:	4638      	mov	r0, r7
   2d882:	4641      	mov	r1, r8
   2d884:	f7d3 f962 	bl	b4c <__aeabi_dmul>
   2d888:	4607      	mov	r7, r0
   2d88a:	4688      	mov	r8, r1
   2d88c:	f10a 0001 	add.w	r0, sl, #1
   2d890:	f7d3 f8f6 	bl	a80 <__aeabi_i2d>
   2d894:	463a      	mov	r2, r7
   2d896:	4643      	mov	r3, r8
   2d898:	f7d3 f958 	bl	b4c <__aeabi_dmul>
   2d89c:	2200      	movs	r2, #0
   2d89e:	4b17      	ldr	r3, [pc, #92]	; (2d8fc <_dtoa_r+0xd9c>)
   2d8a0:	f7d2 ffa2 	bl	7e8 <__adddf3>
   2d8a4:	9a02      	ldr	r2, [sp, #8]
   2d8a6:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d8a8:	9312      	str	r3, [sp, #72]	; 0x48
   2d8aa:	3a01      	subs	r2, #1
   2d8ac:	4605      	mov	r5, r0
   2d8ae:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
   2d8b2:	9215      	str	r2, [sp, #84]	; 0x54
   2d8b4:	e56a      	b.n	2d38c <_dtoa_r+0x82c>
   2d8b6:	2239      	movs	r2, #57	; 0x39
   2d8b8:	46b3      	mov	fp, r6
   2d8ba:	703a      	strb	r2, [r7, #0]
   2d8bc:	9e06      	ldr	r6, [sp, #24]
   2d8be:	1c7d      	adds	r5, r7, #1
   2d8c0:	e4c0      	b.n	2d244 <_dtoa_r+0x6e4>
   2d8c2:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   2d8c6:	2000      	movs	r0, #0
   2d8c8:	4910      	ldr	r1, [pc, #64]	; (2d90c <_dtoa_r+0xdac>)
   2d8ca:	f7d2 ff8b 	bl	7e4 <__aeabi_dsub>
   2d8ce:	4632      	mov	r2, r6
   2d8d0:	463b      	mov	r3, r7
   2d8d2:	f7d3 fbcb 	bl	106c <__aeabi_dcmpgt>
   2d8d6:	b908      	cbnz	r0, 2d8dc <_dtoa_r+0xd7c>
   2d8d8:	e6ae      	b.n	2d638 <_dtoa_r+0xad8>
   2d8da:	4615      	mov	r5, r2
   2d8dc:	f815 3c01 	ldrb.w	r3, [r5, #-1]
   2d8e0:	2b30      	cmp	r3, #48	; 0x30
   2d8e2:	f105 32ff 	add.w	r2, r5, #4294967295	; 0xffffffff
   2d8e6:	d0f8      	beq.n	2d8da <_dtoa_r+0xd7a>
   2d8e8:	e5d7      	b.n	2d49a <_dtoa_r+0x93a>
   2d8ea:	f8dd 9048 	ldr.w	r9, [sp, #72]	; 0x48
   2d8ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
   2d8f0:	9302      	str	r3, [sp, #8]
   2d8f2:	f7ff bae8 	b.w	2cec6 <_dtoa_r+0x366>
   2d8f6:	970c      	str	r7, [sp, #48]	; 0x30
   2d8f8:	f7ff bba5 	b.w	2d046 <_dtoa_r+0x4e6>
   2d8fc:	401c0000 	.word	0x401c0000
   2d900:	40140000 	.word	0x40140000
   2d904:	00033538 	.word	0x00033538
   2d908:	00033510 	.word	0x00033510
   2d90c:	3fe00000 	.word	0x3fe00000
   2d910:	40240000 	.word	0x40240000
   2d914:	2b39      	cmp	r3, #57	; 0x39
   2d916:	f8cd b018 	str.w	fp, [sp, #24]
   2d91a:	46d0      	mov	r8, sl
   2d91c:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   2d920:	469a      	mov	sl, r3
   2d922:	d0c8      	beq.n	2d8b6 <_dtoa_r+0xd56>
   2d924:	f1bb 0f00 	cmp.w	fp, #0
   2d928:	f73f aebf 	bgt.w	2d6aa <_dtoa_r+0xb4a>
   2d92c:	e6bf      	b.n	2d6ae <_dtoa_r+0xb4e>
   2d92e:	f47f aebe 	bne.w	2d6ae <_dtoa_r+0xb4e>
   2d932:	f01a 0f01 	tst.w	sl, #1
   2d936:	f43f aeba 	beq.w	2d6ae <_dtoa_r+0xb4e>
   2d93a:	e6b2      	b.n	2d6a2 <_dtoa_r+0xb42>
   2d93c:	f04f 0800 	mov.w	r8, #0
   2d940:	4646      	mov	r6, r8
   2d942:	e5e9      	b.n	2d518 <_dtoa_r+0x9b8>
   2d944:	4631      	mov	r1, r6
   2d946:	2300      	movs	r3, #0
   2d948:	220a      	movs	r2, #10
   2d94a:	4620      	mov	r0, r4
   2d94c:	f000 f9aa 	bl	2dca4 <__multadd>
   2d950:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d952:	2b00      	cmp	r3, #0
   2d954:	4606      	mov	r6, r0
   2d956:	dd0a      	ble.n	2d96e <_dtoa_r+0xe0e>
   2d958:	930a      	str	r3, [sp, #40]	; 0x28
   2d95a:	f7ff bbaa 	b.w	2d0b2 <_dtoa_r+0x552>
   2d95e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d960:	2b02      	cmp	r3, #2
   2d962:	dc23      	bgt.n	2d9ac <_dtoa_r+0xe4c>
   2d964:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d966:	e43b      	b.n	2d1e0 <_dtoa_r+0x680>
   2d968:	f04f 0a02 	mov.w	sl, #2
   2d96c:	e4ed      	b.n	2d34a <_dtoa_r+0x7ea>
   2d96e:	9b24      	ldr	r3, [sp, #144]	; 0x90
   2d970:	2b02      	cmp	r3, #2
   2d972:	dc1b      	bgt.n	2d9ac <_dtoa_r+0xe4c>
   2d974:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d976:	e7ef      	b.n	2d958 <_dtoa_r+0xdf8>
   2d978:	2500      	movs	r5, #0
   2d97a:	6465      	str	r5, [r4, #68]	; 0x44
   2d97c:	4629      	mov	r1, r5
   2d97e:	4620      	mov	r0, r4
   2d980:	f000 f960 	bl	2dc44 <_Balloc>
   2d984:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2d988:	930a      	str	r3, [sp, #40]	; 0x28
   2d98a:	930f      	str	r3, [sp, #60]	; 0x3c
   2d98c:	2301      	movs	r3, #1
   2d98e:	9004      	str	r0, [sp, #16]
   2d990:	9525      	str	r5, [sp, #148]	; 0x94
   2d992:	6420      	str	r0, [r4, #64]	; 0x40
   2d994:	930b      	str	r3, [sp, #44]	; 0x2c
   2d996:	f7ff b9dd 	b.w	2cd54 <_dtoa_r+0x1f4>
   2d99a:	2501      	movs	r5, #1
   2d99c:	f7ff b9a5 	b.w	2ccea <_dtoa_r+0x18a>
   2d9a0:	f43f ab69 	beq.w	2d076 <_dtoa_r+0x516>
   2d9a4:	f1c0 003c 	rsb	r0, r0, #60	; 0x3c
   2d9a8:	f7ff bbf9 	b.w	2d19e <_dtoa_r+0x63e>
   2d9ac:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2d9ae:	930a      	str	r3, [sp, #40]	; 0x28
   2d9b0:	e5e5      	b.n	2d57e <_dtoa_r+0xa1e>
   2d9b2:	bf00      	nop

0002d9b4 <_malloc_trim_r>:
   2d9b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2d9b6:	4f24      	ldr	r7, [pc, #144]	; (2da48 <_malloc_trim_r+0x94>)
   2d9b8:	460c      	mov	r4, r1
   2d9ba:	4606      	mov	r6, r0
   2d9bc:	f7fd f826 	bl	2aa0c <__malloc_lock>
   2d9c0:	68bb      	ldr	r3, [r7, #8]
   2d9c2:	685d      	ldr	r5, [r3, #4]
   2d9c4:	f5c4 617e 	rsb	r1, r4, #4064	; 0xfe0
   2d9c8:	310f      	adds	r1, #15
   2d9ca:	f025 0503 	bic.w	r5, r5, #3
   2d9ce:	4429      	add	r1, r5
   2d9d0:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   2d9d4:	f021 010f 	bic.w	r1, r1, #15
   2d9d8:	f5a1 5480 	sub.w	r4, r1, #4096	; 0x1000
   2d9dc:	f5b4 5f80 	cmp.w	r4, #4096	; 0x1000
   2d9e0:	db07      	blt.n	2d9f2 <_malloc_trim_r+0x3e>
   2d9e2:	2100      	movs	r1, #0
   2d9e4:	4630      	mov	r0, r6
   2d9e6:	f7fd f83d 	bl	2aa64 <_sbrk_r>
   2d9ea:	68bb      	ldr	r3, [r7, #8]
   2d9ec:	442b      	add	r3, r5
   2d9ee:	4298      	cmp	r0, r3
   2d9f0:	d004      	beq.n	2d9fc <_malloc_trim_r+0x48>
   2d9f2:	4630      	mov	r0, r6
   2d9f4:	f7fd f810 	bl	2aa18 <__malloc_unlock>
   2d9f8:	2000      	movs	r0, #0
   2d9fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2d9fc:	4261      	negs	r1, r4
   2d9fe:	4630      	mov	r0, r6
   2da00:	f7fd f830 	bl	2aa64 <_sbrk_r>
   2da04:	3001      	adds	r0, #1
   2da06:	d00d      	beq.n	2da24 <_malloc_trim_r+0x70>
   2da08:	4b10      	ldr	r3, [pc, #64]	; (2da4c <_malloc_trim_r+0x98>)
   2da0a:	68ba      	ldr	r2, [r7, #8]
   2da0c:	6819      	ldr	r1, [r3, #0]
   2da0e:	1b2d      	subs	r5, r5, r4
   2da10:	f045 0501 	orr.w	r5, r5, #1
   2da14:	4630      	mov	r0, r6
   2da16:	1b09      	subs	r1, r1, r4
   2da18:	6055      	str	r5, [r2, #4]
   2da1a:	6019      	str	r1, [r3, #0]
   2da1c:	f7fc fffc 	bl	2aa18 <__malloc_unlock>
   2da20:	2001      	movs	r0, #1
   2da22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2da24:	2100      	movs	r1, #0
   2da26:	4630      	mov	r0, r6
   2da28:	f7fd f81c 	bl	2aa64 <_sbrk_r>
   2da2c:	68ba      	ldr	r2, [r7, #8]
   2da2e:	1a83      	subs	r3, r0, r2
   2da30:	2b0f      	cmp	r3, #15
   2da32:	ddde      	ble.n	2d9f2 <_malloc_trim_r+0x3e>
   2da34:	4c06      	ldr	r4, [pc, #24]	; (2da50 <_malloc_trim_r+0x9c>)
   2da36:	4905      	ldr	r1, [pc, #20]	; (2da4c <_malloc_trim_r+0x98>)
   2da38:	6824      	ldr	r4, [r4, #0]
   2da3a:	f043 0301 	orr.w	r3, r3, #1
   2da3e:	1b00      	subs	r0, r0, r4
   2da40:	6053      	str	r3, [r2, #4]
   2da42:	6008      	str	r0, [r1, #0]
   2da44:	e7d5      	b.n	2d9f2 <_malloc_trim_r+0x3e>
   2da46:	bf00      	nop
   2da48:	2000cc24 	.word	0x2000cc24
   2da4c:	200029a8 	.word	0x200029a8
   2da50:	2000d02c 	.word	0x2000d02c

0002da54 <_free_r>:
   2da54:	2900      	cmp	r1, #0
   2da56:	d044      	beq.n	2dae2 <_free_r+0x8e>
   2da58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2da5c:	460d      	mov	r5, r1
   2da5e:	4680      	mov	r8, r0
   2da60:	f7fc ffd4 	bl	2aa0c <__malloc_lock>
   2da64:	f855 7c04 	ldr.w	r7, [r5, #-4]
   2da68:	4969      	ldr	r1, [pc, #420]	; (2dc10 <_free_r+0x1bc>)
   2da6a:	f027 0301 	bic.w	r3, r7, #1
   2da6e:	f1a5 0408 	sub.w	r4, r5, #8
   2da72:	18e2      	adds	r2, r4, r3
   2da74:	688e      	ldr	r6, [r1, #8]
   2da76:	6850      	ldr	r0, [r2, #4]
   2da78:	42b2      	cmp	r2, r6
   2da7a:	f020 0003 	bic.w	r0, r0, #3
   2da7e:	d05e      	beq.n	2db3e <_free_r+0xea>
   2da80:	07fe      	lsls	r6, r7, #31
   2da82:	6050      	str	r0, [r2, #4]
   2da84:	d40b      	bmi.n	2da9e <_free_r+0x4a>
   2da86:	f855 7c08 	ldr.w	r7, [r5, #-8]
   2da8a:	1be4      	subs	r4, r4, r7
   2da8c:	f101 0e08 	add.w	lr, r1, #8
   2da90:	68a5      	ldr	r5, [r4, #8]
   2da92:	4575      	cmp	r5, lr
   2da94:	443b      	add	r3, r7
   2da96:	d06d      	beq.n	2db74 <_free_r+0x120>
   2da98:	68e7      	ldr	r7, [r4, #12]
   2da9a:	60ef      	str	r7, [r5, #12]
   2da9c:	60bd      	str	r5, [r7, #8]
   2da9e:	1815      	adds	r5, r2, r0
   2daa0:	686d      	ldr	r5, [r5, #4]
   2daa2:	07ed      	lsls	r5, r5, #31
   2daa4:	d53e      	bpl.n	2db24 <_free_r+0xd0>
   2daa6:	f043 0201 	orr.w	r2, r3, #1
   2daaa:	6062      	str	r2, [r4, #4]
   2daac:	50e3      	str	r3, [r4, r3]
   2daae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   2dab2:	d217      	bcs.n	2dae4 <_free_r+0x90>
   2dab4:	08db      	lsrs	r3, r3, #3
   2dab6:	1c58      	adds	r0, r3, #1
   2dab8:	109a      	asrs	r2, r3, #2
   2daba:	684d      	ldr	r5, [r1, #4]
   2dabc:	f851 7030 	ldr.w	r7, [r1, r0, lsl #3]
   2dac0:	60a7      	str	r7, [r4, #8]
   2dac2:	2301      	movs	r3, #1
   2dac4:	4093      	lsls	r3, r2
   2dac6:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
   2daca:	432b      	orrs	r3, r5
   2dacc:	3a08      	subs	r2, #8
   2dace:	60e2      	str	r2, [r4, #12]
   2dad0:	604b      	str	r3, [r1, #4]
   2dad2:	f841 4030 	str.w	r4, [r1, r0, lsl #3]
   2dad6:	60fc      	str	r4, [r7, #12]
   2dad8:	4640      	mov	r0, r8
   2dada:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2dade:	f7fc bf9b 	b.w	2aa18 <__malloc_unlock>
   2dae2:	4770      	bx	lr
   2dae4:	0a5a      	lsrs	r2, r3, #9
   2dae6:	2a04      	cmp	r2, #4
   2dae8:	d852      	bhi.n	2db90 <_free_r+0x13c>
   2daea:	099a      	lsrs	r2, r3, #6
   2daec:	f102 0739 	add.w	r7, r2, #57	; 0x39
   2daf0:	00ff      	lsls	r7, r7, #3
   2daf2:	f102 0538 	add.w	r5, r2, #56	; 0x38
   2daf6:	19c8      	adds	r0, r1, r7
   2daf8:	59ca      	ldr	r2, [r1, r7]
   2dafa:	3808      	subs	r0, #8
   2dafc:	4290      	cmp	r0, r2
   2dafe:	d04f      	beq.n	2dba0 <_free_r+0x14c>
   2db00:	6851      	ldr	r1, [r2, #4]
   2db02:	f021 0103 	bic.w	r1, r1, #3
   2db06:	428b      	cmp	r3, r1
   2db08:	d232      	bcs.n	2db70 <_free_r+0x11c>
   2db0a:	6892      	ldr	r2, [r2, #8]
   2db0c:	4290      	cmp	r0, r2
   2db0e:	d1f7      	bne.n	2db00 <_free_r+0xac>
   2db10:	68c3      	ldr	r3, [r0, #12]
   2db12:	60a0      	str	r0, [r4, #8]
   2db14:	60e3      	str	r3, [r4, #12]
   2db16:	609c      	str	r4, [r3, #8]
   2db18:	60c4      	str	r4, [r0, #12]
   2db1a:	4640      	mov	r0, r8
   2db1c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   2db20:	f7fc bf7a 	b.w	2aa18 <__malloc_unlock>
   2db24:	6895      	ldr	r5, [r2, #8]
   2db26:	4f3b      	ldr	r7, [pc, #236]	; (2dc14 <_free_r+0x1c0>)
   2db28:	42bd      	cmp	r5, r7
   2db2a:	4403      	add	r3, r0
   2db2c:	d040      	beq.n	2dbb0 <_free_r+0x15c>
   2db2e:	68d0      	ldr	r0, [r2, #12]
   2db30:	60e8      	str	r0, [r5, #12]
   2db32:	f043 0201 	orr.w	r2, r3, #1
   2db36:	6085      	str	r5, [r0, #8]
   2db38:	6062      	str	r2, [r4, #4]
   2db3a:	50e3      	str	r3, [r4, r3]
   2db3c:	e7b7      	b.n	2daae <_free_r+0x5a>
   2db3e:	07ff      	lsls	r7, r7, #31
   2db40:	4403      	add	r3, r0
   2db42:	d407      	bmi.n	2db54 <_free_r+0x100>
   2db44:	f855 2c08 	ldr.w	r2, [r5, #-8]
   2db48:	1aa4      	subs	r4, r4, r2
   2db4a:	4413      	add	r3, r2
   2db4c:	68a0      	ldr	r0, [r4, #8]
   2db4e:	68e2      	ldr	r2, [r4, #12]
   2db50:	60c2      	str	r2, [r0, #12]
   2db52:	6090      	str	r0, [r2, #8]
   2db54:	4a30      	ldr	r2, [pc, #192]	; (2dc18 <_free_r+0x1c4>)
   2db56:	6812      	ldr	r2, [r2, #0]
   2db58:	f043 0001 	orr.w	r0, r3, #1
   2db5c:	4293      	cmp	r3, r2
   2db5e:	6060      	str	r0, [r4, #4]
   2db60:	608c      	str	r4, [r1, #8]
   2db62:	d3b9      	bcc.n	2dad8 <_free_r+0x84>
   2db64:	4b2d      	ldr	r3, [pc, #180]	; (2dc1c <_free_r+0x1c8>)
   2db66:	4640      	mov	r0, r8
   2db68:	6819      	ldr	r1, [r3, #0]
   2db6a:	f7ff ff23 	bl	2d9b4 <_malloc_trim_r>
   2db6e:	e7b3      	b.n	2dad8 <_free_r+0x84>
   2db70:	4610      	mov	r0, r2
   2db72:	e7cd      	b.n	2db10 <_free_r+0xbc>
   2db74:	1811      	adds	r1, r2, r0
   2db76:	6849      	ldr	r1, [r1, #4]
   2db78:	07c9      	lsls	r1, r1, #31
   2db7a:	d444      	bmi.n	2dc06 <_free_r+0x1b2>
   2db7c:	6891      	ldr	r1, [r2, #8]
   2db7e:	68d2      	ldr	r2, [r2, #12]
   2db80:	60ca      	str	r2, [r1, #12]
   2db82:	4403      	add	r3, r0
   2db84:	f043 0001 	orr.w	r0, r3, #1
   2db88:	6091      	str	r1, [r2, #8]
   2db8a:	6060      	str	r0, [r4, #4]
   2db8c:	50e3      	str	r3, [r4, r3]
   2db8e:	e7a3      	b.n	2dad8 <_free_r+0x84>
   2db90:	2a14      	cmp	r2, #20
   2db92:	d816      	bhi.n	2dbc2 <_free_r+0x16e>
   2db94:	f102 075c 	add.w	r7, r2, #92	; 0x5c
   2db98:	00ff      	lsls	r7, r7, #3
   2db9a:	f102 055b 	add.w	r5, r2, #91	; 0x5b
   2db9e:	e7aa      	b.n	2daf6 <_free_r+0xa2>
   2dba0:	10aa      	asrs	r2, r5, #2
   2dba2:	2301      	movs	r3, #1
   2dba4:	684d      	ldr	r5, [r1, #4]
   2dba6:	4093      	lsls	r3, r2
   2dba8:	432b      	orrs	r3, r5
   2dbaa:	604b      	str	r3, [r1, #4]
   2dbac:	4603      	mov	r3, r0
   2dbae:	e7b0      	b.n	2db12 <_free_r+0xbe>
   2dbb0:	f043 0201 	orr.w	r2, r3, #1
   2dbb4:	614c      	str	r4, [r1, #20]
   2dbb6:	610c      	str	r4, [r1, #16]
   2dbb8:	60e5      	str	r5, [r4, #12]
   2dbba:	60a5      	str	r5, [r4, #8]
   2dbbc:	6062      	str	r2, [r4, #4]
   2dbbe:	50e3      	str	r3, [r4, r3]
   2dbc0:	e78a      	b.n	2dad8 <_free_r+0x84>
   2dbc2:	2a54      	cmp	r2, #84	; 0x54
   2dbc4:	d806      	bhi.n	2dbd4 <_free_r+0x180>
   2dbc6:	0b1a      	lsrs	r2, r3, #12
   2dbc8:	f102 076f 	add.w	r7, r2, #111	; 0x6f
   2dbcc:	00ff      	lsls	r7, r7, #3
   2dbce:	f102 056e 	add.w	r5, r2, #110	; 0x6e
   2dbd2:	e790      	b.n	2daf6 <_free_r+0xa2>
   2dbd4:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   2dbd8:	d806      	bhi.n	2dbe8 <_free_r+0x194>
   2dbda:	0bda      	lsrs	r2, r3, #15
   2dbdc:	f102 0778 	add.w	r7, r2, #120	; 0x78
   2dbe0:	00ff      	lsls	r7, r7, #3
   2dbe2:	f102 0577 	add.w	r5, r2, #119	; 0x77
   2dbe6:	e786      	b.n	2daf6 <_free_r+0xa2>
   2dbe8:	f240 5054 	movw	r0, #1364	; 0x554
   2dbec:	4282      	cmp	r2, r0
   2dbee:	d806      	bhi.n	2dbfe <_free_r+0x1aa>
   2dbf0:	0c9a      	lsrs	r2, r3, #18
   2dbf2:	f102 077d 	add.w	r7, r2, #125	; 0x7d
   2dbf6:	00ff      	lsls	r7, r7, #3
   2dbf8:	f102 057c 	add.w	r5, r2, #124	; 0x7c
   2dbfc:	e77b      	b.n	2daf6 <_free_r+0xa2>
   2dbfe:	f44f 777e 	mov.w	r7, #1016	; 0x3f8
   2dc02:	257e      	movs	r5, #126	; 0x7e
   2dc04:	e777      	b.n	2daf6 <_free_r+0xa2>
   2dc06:	f043 0101 	orr.w	r1, r3, #1
   2dc0a:	6061      	str	r1, [r4, #4]
   2dc0c:	6013      	str	r3, [r2, #0]
   2dc0e:	e763      	b.n	2dad8 <_free_r+0x84>
   2dc10:	2000cc24 	.word	0x2000cc24
   2dc14:	2000cc2c 	.word	0x2000cc2c
   2dc18:	2000d030 	.word	0x2000d030
   2dc1c:	200029d8 	.word	0x200029d8

0002dc20 <_localeconv_r>:
   2dc20:	4a04      	ldr	r2, [pc, #16]	; (2dc34 <_localeconv_r+0x14>)
   2dc22:	4b05      	ldr	r3, [pc, #20]	; (2dc38 <_localeconv_r+0x18>)
   2dc24:	6812      	ldr	r2, [r2, #0]
   2dc26:	6b50      	ldr	r0, [r2, #52]	; 0x34
   2dc28:	2800      	cmp	r0, #0
   2dc2a:	bf08      	it	eq
   2dc2c:	4618      	moveq	r0, r3
   2dc2e:	30f0      	adds	r0, #240	; 0xf0
   2dc30:	4770      	bx	lr
   2dc32:	bf00      	nop
   2dc34:	2000c688 	.word	0x2000c688
   2dc38:	2000cab8 	.word	0x2000cab8

0002dc3c <__retarget_lock_acquire_recursive>:
   2dc3c:	4770      	bx	lr
   2dc3e:	bf00      	nop

0002dc40 <__retarget_lock_release_recursive>:
   2dc40:	4770      	bx	lr
   2dc42:	bf00      	nop

0002dc44 <_Balloc>:
   2dc44:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dc46:	b570      	push	{r4, r5, r6, lr}
   2dc48:	4605      	mov	r5, r0
   2dc4a:	460c      	mov	r4, r1
   2dc4c:	b14b      	cbz	r3, 2dc62 <_Balloc+0x1e>
   2dc4e:	f853 0024 	ldr.w	r0, [r3, r4, lsl #2]
   2dc52:	b180      	cbz	r0, 2dc76 <_Balloc+0x32>
   2dc54:	6802      	ldr	r2, [r0, #0]
   2dc56:	f843 2024 	str.w	r2, [r3, r4, lsl #2]
   2dc5a:	2300      	movs	r3, #0
   2dc5c:	6103      	str	r3, [r0, #16]
   2dc5e:	60c3      	str	r3, [r0, #12]
   2dc60:	bd70      	pop	{r4, r5, r6, pc}
   2dc62:	2221      	movs	r2, #33	; 0x21
   2dc64:	2104      	movs	r1, #4
   2dc66:	f7fc fae7 	bl	2a238 <_calloc_r>
   2dc6a:	64e8      	str	r0, [r5, #76]	; 0x4c
   2dc6c:	4603      	mov	r3, r0
   2dc6e:	2800      	cmp	r0, #0
   2dc70:	d1ed      	bne.n	2dc4e <_Balloc+0xa>
   2dc72:	2000      	movs	r0, #0
   2dc74:	bd70      	pop	{r4, r5, r6, pc}
   2dc76:	2101      	movs	r1, #1
   2dc78:	fa01 f604 	lsl.w	r6, r1, r4
   2dc7c:	1d72      	adds	r2, r6, #5
   2dc7e:	4628      	mov	r0, r5
   2dc80:	0092      	lsls	r2, r2, #2
   2dc82:	f7fc fad9 	bl	2a238 <_calloc_r>
   2dc86:	2800      	cmp	r0, #0
   2dc88:	d0f3      	beq.n	2dc72 <_Balloc+0x2e>
   2dc8a:	6044      	str	r4, [r0, #4]
   2dc8c:	6086      	str	r6, [r0, #8]
   2dc8e:	e7e4      	b.n	2dc5a <_Balloc+0x16>

0002dc90 <_Bfree>:
   2dc90:	b131      	cbz	r1, 2dca0 <_Bfree+0x10>
   2dc92:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   2dc94:	684a      	ldr	r2, [r1, #4]
   2dc96:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   2dc9a:	6008      	str	r0, [r1, #0]
   2dc9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   2dca0:	4770      	bx	lr
   2dca2:	bf00      	nop

0002dca4 <__multadd>:
   2dca4:	b5f0      	push	{r4, r5, r6, r7, lr}
   2dca6:	690c      	ldr	r4, [r1, #16]
   2dca8:	b083      	sub	sp, #12
   2dcaa:	460d      	mov	r5, r1
   2dcac:	4606      	mov	r6, r0
   2dcae:	f101 0e14 	add.w	lr, r1, #20
   2dcb2:	2700      	movs	r7, #0
   2dcb4:	f8de 0000 	ldr.w	r0, [lr]
   2dcb8:	b281      	uxth	r1, r0
   2dcba:	fb02 3301 	mla	r3, r2, r1, r3
   2dcbe:	0c01      	lsrs	r1, r0, #16
   2dcc0:	0c18      	lsrs	r0, r3, #16
   2dcc2:	fb02 0101 	mla	r1, r2, r1, r0
   2dcc6:	b29b      	uxth	r3, r3
   2dcc8:	3701      	adds	r7, #1
   2dcca:	eb03 4301 	add.w	r3, r3, r1, lsl #16
   2dcce:	42bc      	cmp	r4, r7
   2dcd0:	f84e 3b04 	str.w	r3, [lr], #4
   2dcd4:	ea4f 4311 	mov.w	r3, r1, lsr #16
   2dcd8:	dcec      	bgt.n	2dcb4 <__multadd+0x10>
   2dcda:	b13b      	cbz	r3, 2dcec <__multadd+0x48>
   2dcdc:	68aa      	ldr	r2, [r5, #8]
   2dcde:	4294      	cmp	r4, r2
   2dce0:	da07      	bge.n	2dcf2 <__multadd+0x4e>
   2dce2:	eb05 0284 	add.w	r2, r5, r4, lsl #2
   2dce6:	3401      	adds	r4, #1
   2dce8:	6153      	str	r3, [r2, #20]
   2dcea:	612c      	str	r4, [r5, #16]
   2dcec:	4628      	mov	r0, r5
   2dcee:	b003      	add	sp, #12
   2dcf0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   2dcf2:	6869      	ldr	r1, [r5, #4]
   2dcf4:	9301      	str	r3, [sp, #4]
   2dcf6:	3101      	adds	r1, #1
   2dcf8:	4630      	mov	r0, r6
   2dcfa:	f7ff ffa3 	bl	2dc44 <_Balloc>
   2dcfe:	692a      	ldr	r2, [r5, #16]
   2dd00:	3202      	adds	r2, #2
   2dd02:	f105 010c 	add.w	r1, r5, #12
   2dd06:	4607      	mov	r7, r0
   2dd08:	0092      	lsls	r2, r2, #2
   2dd0a:	300c      	adds	r0, #12
   2dd0c:	f7d2 fad8 	bl	2c0 <memcpy>
   2dd10:	6cf2      	ldr	r2, [r6, #76]	; 0x4c
   2dd12:	6869      	ldr	r1, [r5, #4]
   2dd14:	9b01      	ldr	r3, [sp, #4]
   2dd16:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   2dd1a:	6028      	str	r0, [r5, #0]
   2dd1c:	f842 5021 	str.w	r5, [r2, r1, lsl #2]
   2dd20:	463d      	mov	r5, r7
   2dd22:	e7de      	b.n	2dce2 <__multadd+0x3e>

0002dd24 <__hi0bits>:
   2dd24:	0c02      	lsrs	r2, r0, #16
   2dd26:	0412      	lsls	r2, r2, #16
   2dd28:	4603      	mov	r3, r0
   2dd2a:	b9b2      	cbnz	r2, 2dd5a <__hi0bits+0x36>
   2dd2c:	0403      	lsls	r3, r0, #16
   2dd2e:	2010      	movs	r0, #16
   2dd30:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
   2dd34:	bf04      	itt	eq
   2dd36:	021b      	lsleq	r3, r3, #8
   2dd38:	3008      	addeq	r0, #8
   2dd3a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
   2dd3e:	bf04      	itt	eq
   2dd40:	011b      	lsleq	r3, r3, #4
   2dd42:	3004      	addeq	r0, #4
   2dd44:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
   2dd48:	bf04      	itt	eq
   2dd4a:	009b      	lsleq	r3, r3, #2
   2dd4c:	3002      	addeq	r0, #2
   2dd4e:	2b00      	cmp	r3, #0
   2dd50:	db02      	blt.n	2dd58 <__hi0bits+0x34>
   2dd52:	005b      	lsls	r3, r3, #1
   2dd54:	d403      	bmi.n	2dd5e <__hi0bits+0x3a>
   2dd56:	2020      	movs	r0, #32
   2dd58:	4770      	bx	lr
   2dd5a:	2000      	movs	r0, #0
   2dd5c:	e7e8      	b.n	2dd30 <__hi0bits+0xc>
   2dd5e:	3001      	adds	r0, #1
   2dd60:	4770      	bx	lr
   2dd62:	bf00      	nop

0002dd64 <__lo0bits>:
   2dd64:	6803      	ldr	r3, [r0, #0]
   2dd66:	f013 0207 	ands.w	r2, r3, #7
   2dd6a:	4601      	mov	r1, r0
   2dd6c:	d007      	beq.n	2dd7e <__lo0bits+0x1a>
   2dd6e:	07da      	lsls	r2, r3, #31
   2dd70:	d421      	bmi.n	2ddb6 <__lo0bits+0x52>
   2dd72:	0798      	lsls	r0, r3, #30
   2dd74:	d421      	bmi.n	2ddba <__lo0bits+0x56>
   2dd76:	089b      	lsrs	r3, r3, #2
   2dd78:	600b      	str	r3, [r1, #0]
   2dd7a:	2002      	movs	r0, #2
   2dd7c:	4770      	bx	lr
   2dd7e:	b298      	uxth	r0, r3
   2dd80:	b198      	cbz	r0, 2ddaa <__lo0bits+0x46>
   2dd82:	4610      	mov	r0, r2
   2dd84:	f013 0fff 	tst.w	r3, #255	; 0xff
   2dd88:	bf04      	itt	eq
   2dd8a:	0a1b      	lsreq	r3, r3, #8
   2dd8c:	3008      	addeq	r0, #8
   2dd8e:	071a      	lsls	r2, r3, #28
   2dd90:	bf04      	itt	eq
   2dd92:	091b      	lsreq	r3, r3, #4
   2dd94:	3004      	addeq	r0, #4
   2dd96:	079a      	lsls	r2, r3, #30
   2dd98:	bf04      	itt	eq
   2dd9a:	089b      	lsreq	r3, r3, #2
   2dd9c:	3002      	addeq	r0, #2
   2dd9e:	07da      	lsls	r2, r3, #31
   2dda0:	d407      	bmi.n	2ddb2 <__lo0bits+0x4e>
   2dda2:	085b      	lsrs	r3, r3, #1
   2dda4:	d104      	bne.n	2ddb0 <__lo0bits+0x4c>
   2dda6:	2020      	movs	r0, #32
   2dda8:	4770      	bx	lr
   2ddaa:	0c1b      	lsrs	r3, r3, #16
   2ddac:	2010      	movs	r0, #16
   2ddae:	e7e9      	b.n	2dd84 <__lo0bits+0x20>
   2ddb0:	3001      	adds	r0, #1
   2ddb2:	600b      	str	r3, [r1, #0]
   2ddb4:	4770      	bx	lr
   2ddb6:	2000      	movs	r0, #0
   2ddb8:	4770      	bx	lr
   2ddba:	085b      	lsrs	r3, r3, #1
   2ddbc:	600b      	str	r3, [r1, #0]
   2ddbe:	2001      	movs	r0, #1
   2ddc0:	4770      	bx	lr
   2ddc2:	bf00      	nop

0002ddc4 <__i2b>:
   2ddc4:	b510      	push	{r4, lr}
   2ddc6:	460c      	mov	r4, r1
   2ddc8:	2101      	movs	r1, #1
   2ddca:	f7ff ff3b 	bl	2dc44 <_Balloc>
   2ddce:	2201      	movs	r2, #1
   2ddd0:	6144      	str	r4, [r0, #20]
   2ddd2:	6102      	str	r2, [r0, #16]
   2ddd4:	bd10      	pop	{r4, pc}
   2ddd6:	bf00      	nop

0002ddd8 <__multiply>:
   2ddd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2dddc:	690c      	ldr	r4, [r1, #16]
   2ddde:	6915      	ldr	r5, [r2, #16]
   2dde0:	42ac      	cmp	r4, r5
   2dde2:	b083      	sub	sp, #12
   2dde4:	468b      	mov	fp, r1
   2dde6:	4616      	mov	r6, r2
   2dde8:	da04      	bge.n	2ddf4 <__multiply+0x1c>
   2ddea:	4622      	mov	r2, r4
   2ddec:	46b3      	mov	fp, r6
   2ddee:	462c      	mov	r4, r5
   2ddf0:	460e      	mov	r6, r1
   2ddf2:	4615      	mov	r5, r2
   2ddf4:	f8db 3008 	ldr.w	r3, [fp, #8]
   2ddf8:	f8db 1004 	ldr.w	r1, [fp, #4]
   2ddfc:	eb04 0805 	add.w	r8, r4, r5
   2de00:	4598      	cmp	r8, r3
   2de02:	bfc8      	it	gt
   2de04:	3101      	addgt	r1, #1
   2de06:	f7ff ff1d 	bl	2dc44 <_Balloc>
   2de0a:	f100 0914 	add.w	r9, r0, #20
   2de0e:	eb09 0a88 	add.w	sl, r9, r8, lsl #2
   2de12:	45d1      	cmp	r9, sl
   2de14:	9000      	str	r0, [sp, #0]
   2de16:	d205      	bcs.n	2de24 <__multiply+0x4c>
   2de18:	464b      	mov	r3, r9
   2de1a:	2100      	movs	r1, #0
   2de1c:	f843 1b04 	str.w	r1, [r3], #4
   2de20:	459a      	cmp	sl, r3
   2de22:	d8fb      	bhi.n	2de1c <__multiply+0x44>
   2de24:	f106 0c14 	add.w	ip, r6, #20
   2de28:	eb0c 0385 	add.w	r3, ip, r5, lsl #2
   2de2c:	f10b 0b14 	add.w	fp, fp, #20
   2de30:	459c      	cmp	ip, r3
   2de32:	eb0b 0e84 	add.w	lr, fp, r4, lsl #2
   2de36:	d24c      	bcs.n	2ded2 <__multiply+0xfa>
   2de38:	f8cd a004 	str.w	sl, [sp, #4]
   2de3c:	469a      	mov	sl, r3
   2de3e:	f8dc 5000 	ldr.w	r5, [ip]
   2de42:	b2af      	uxth	r7, r5
   2de44:	b1ef      	cbz	r7, 2de82 <__multiply+0xaa>
   2de46:	2100      	movs	r1, #0
   2de48:	464d      	mov	r5, r9
   2de4a:	465e      	mov	r6, fp
   2de4c:	460c      	mov	r4, r1
   2de4e:	f856 2b04 	ldr.w	r2, [r6], #4
   2de52:	6828      	ldr	r0, [r5, #0]
   2de54:	b293      	uxth	r3, r2
   2de56:	b281      	uxth	r1, r0
   2de58:	fb07 1303 	mla	r3, r7, r3, r1
   2de5c:	0c12      	lsrs	r2, r2, #16
   2de5e:	0c01      	lsrs	r1, r0, #16
   2de60:	4423      	add	r3, r4
   2de62:	fb07 1102 	mla	r1, r7, r2, r1
   2de66:	eb01 4113 	add.w	r1, r1, r3, lsr #16
   2de6a:	b29b      	uxth	r3, r3
   2de6c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   2de70:	45b6      	cmp	lr, r6
   2de72:	f845 3b04 	str.w	r3, [r5], #4
   2de76:	ea4f 4411 	mov.w	r4, r1, lsr #16
   2de7a:	d8e8      	bhi.n	2de4e <__multiply+0x76>
   2de7c:	602c      	str	r4, [r5, #0]
   2de7e:	f8dc 5000 	ldr.w	r5, [ip]
   2de82:	0c2d      	lsrs	r5, r5, #16
   2de84:	d01d      	beq.n	2dec2 <__multiply+0xea>
   2de86:	f8d9 3000 	ldr.w	r3, [r9]
   2de8a:	4648      	mov	r0, r9
   2de8c:	461c      	mov	r4, r3
   2de8e:	4659      	mov	r1, fp
   2de90:	2200      	movs	r2, #0
   2de92:	880e      	ldrh	r6, [r1, #0]
   2de94:	0c24      	lsrs	r4, r4, #16
   2de96:	fb05 4406 	mla	r4, r5, r6, r4
   2de9a:	4422      	add	r2, r4
   2de9c:	b29b      	uxth	r3, r3
   2de9e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
   2dea2:	f840 3b04 	str.w	r3, [r0], #4
   2dea6:	f851 3b04 	ldr.w	r3, [r1], #4
   2deaa:	6804      	ldr	r4, [r0, #0]
   2deac:	0c1b      	lsrs	r3, r3, #16
   2deae:	b2a6      	uxth	r6, r4
   2deb0:	fb05 6303 	mla	r3, r5, r3, r6
   2deb4:	eb03 4312 	add.w	r3, r3, r2, lsr #16
   2deb8:	458e      	cmp	lr, r1
   2deba:	ea4f 4213 	mov.w	r2, r3, lsr #16
   2debe:	d8e8      	bhi.n	2de92 <__multiply+0xba>
   2dec0:	6003      	str	r3, [r0, #0]
   2dec2:	f10c 0c04 	add.w	ip, ip, #4
   2dec6:	45e2      	cmp	sl, ip
   2dec8:	f109 0904 	add.w	r9, r9, #4
   2decc:	d8b7      	bhi.n	2de3e <__multiply+0x66>
   2dece:	f8dd a004 	ldr.w	sl, [sp, #4]
   2ded2:	f1b8 0f00 	cmp.w	r8, #0
   2ded6:	dd0b      	ble.n	2def0 <__multiply+0x118>
   2ded8:	f85a 3c04 	ldr.w	r3, [sl, #-4]
   2dedc:	f1aa 0a04 	sub.w	sl, sl, #4
   2dee0:	b11b      	cbz	r3, 2deea <__multiply+0x112>
   2dee2:	e005      	b.n	2def0 <__multiply+0x118>
   2dee4:	f85a 3d04 	ldr.w	r3, [sl, #-4]!
   2dee8:	b913      	cbnz	r3, 2def0 <__multiply+0x118>
   2deea:	f1b8 0801 	subs.w	r8, r8, #1
   2deee:	d1f9      	bne.n	2dee4 <__multiply+0x10c>
   2def0:	9800      	ldr	r0, [sp, #0]
   2def2:	f8c0 8010 	str.w	r8, [r0, #16]
   2def6:	b003      	add	sp, #12
   2def8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002defc <__pow5mult>:
   2defc:	f012 0303 	ands.w	r3, r2, #3
   2df00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2df04:	4614      	mov	r4, r2
   2df06:	4607      	mov	r7, r0
   2df08:	d12e      	bne.n	2df68 <__pow5mult+0x6c>
   2df0a:	460d      	mov	r5, r1
   2df0c:	10a4      	asrs	r4, r4, #2
   2df0e:	d01c      	beq.n	2df4a <__pow5mult+0x4e>
   2df10:	6cbe      	ldr	r6, [r7, #72]	; 0x48
   2df12:	b396      	cbz	r6, 2df7a <__pow5mult+0x7e>
   2df14:	07e3      	lsls	r3, r4, #31
   2df16:	f04f 0800 	mov.w	r8, #0
   2df1a:	d406      	bmi.n	2df2a <__pow5mult+0x2e>
   2df1c:	1064      	asrs	r4, r4, #1
   2df1e:	d014      	beq.n	2df4a <__pow5mult+0x4e>
   2df20:	6830      	ldr	r0, [r6, #0]
   2df22:	b1a8      	cbz	r0, 2df50 <__pow5mult+0x54>
   2df24:	4606      	mov	r6, r0
   2df26:	07e3      	lsls	r3, r4, #31
   2df28:	d5f8      	bpl.n	2df1c <__pow5mult+0x20>
   2df2a:	4632      	mov	r2, r6
   2df2c:	4629      	mov	r1, r5
   2df2e:	4638      	mov	r0, r7
   2df30:	f7ff ff52 	bl	2ddd8 <__multiply>
   2df34:	b1b5      	cbz	r5, 2df64 <__pow5mult+0x68>
   2df36:	686a      	ldr	r2, [r5, #4]
   2df38:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2df3a:	1064      	asrs	r4, r4, #1
   2df3c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2df40:	6029      	str	r1, [r5, #0]
   2df42:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
   2df46:	4605      	mov	r5, r0
   2df48:	d1ea      	bne.n	2df20 <__pow5mult+0x24>
   2df4a:	4628      	mov	r0, r5
   2df4c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2df50:	4632      	mov	r2, r6
   2df52:	4631      	mov	r1, r6
   2df54:	4638      	mov	r0, r7
   2df56:	f7ff ff3f 	bl	2ddd8 <__multiply>
   2df5a:	6030      	str	r0, [r6, #0]
   2df5c:	f8c0 8000 	str.w	r8, [r0]
   2df60:	4606      	mov	r6, r0
   2df62:	e7e0      	b.n	2df26 <__pow5mult+0x2a>
   2df64:	4605      	mov	r5, r0
   2df66:	e7d9      	b.n	2df1c <__pow5mult+0x20>
   2df68:	1e5a      	subs	r2, r3, #1
   2df6a:	4d0b      	ldr	r5, [pc, #44]	; (2df98 <__pow5mult+0x9c>)
   2df6c:	2300      	movs	r3, #0
   2df6e:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
   2df72:	f7ff fe97 	bl	2dca4 <__multadd>
   2df76:	4605      	mov	r5, r0
   2df78:	e7c8      	b.n	2df0c <__pow5mult+0x10>
   2df7a:	2101      	movs	r1, #1
   2df7c:	4638      	mov	r0, r7
   2df7e:	f7ff fe61 	bl	2dc44 <_Balloc>
   2df82:	f240 2171 	movw	r1, #625	; 0x271
   2df86:	2201      	movs	r2, #1
   2df88:	2300      	movs	r3, #0
   2df8a:	6141      	str	r1, [r0, #20]
   2df8c:	6102      	str	r2, [r0, #16]
   2df8e:	4606      	mov	r6, r0
   2df90:	64b8      	str	r0, [r7, #72]	; 0x48
   2df92:	6003      	str	r3, [r0, #0]
   2df94:	e7be      	b.n	2df14 <__pow5mult+0x18>
   2df96:	bf00      	nop
   2df98:	00033600 	.word	0x00033600

0002df9c <__lshift>:
   2df9c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   2dfa0:	4691      	mov	r9, r2
   2dfa2:	690a      	ldr	r2, [r1, #16]
   2dfa4:	688b      	ldr	r3, [r1, #8]
   2dfa6:	ea4f 1469 	mov.w	r4, r9, asr #5
   2dfaa:	eb04 0802 	add.w	r8, r4, r2
   2dfae:	f108 0501 	add.w	r5, r8, #1
   2dfb2:	429d      	cmp	r5, r3
   2dfb4:	460e      	mov	r6, r1
   2dfb6:	4607      	mov	r7, r0
   2dfb8:	6849      	ldr	r1, [r1, #4]
   2dfba:	dd04      	ble.n	2dfc6 <__lshift+0x2a>
   2dfbc:	005b      	lsls	r3, r3, #1
   2dfbe:	429d      	cmp	r5, r3
   2dfc0:	f101 0101 	add.w	r1, r1, #1
   2dfc4:	dcfa      	bgt.n	2dfbc <__lshift+0x20>
   2dfc6:	4638      	mov	r0, r7
   2dfc8:	f7ff fe3c 	bl	2dc44 <_Balloc>
   2dfcc:	2c00      	cmp	r4, #0
   2dfce:	f100 0314 	add.w	r3, r0, #20
   2dfd2:	dd06      	ble.n	2dfe2 <__lshift+0x46>
   2dfd4:	eb03 0284 	add.w	r2, r3, r4, lsl #2
   2dfd8:	2100      	movs	r1, #0
   2dfda:	f843 1b04 	str.w	r1, [r3], #4
   2dfde:	429a      	cmp	r2, r3
   2dfe0:	d1fb      	bne.n	2dfda <__lshift+0x3e>
   2dfe2:	6934      	ldr	r4, [r6, #16]
   2dfe4:	f106 0114 	add.w	r1, r6, #20
   2dfe8:	f019 091f 	ands.w	r9, r9, #31
   2dfec:	eb01 0e84 	add.w	lr, r1, r4, lsl #2
   2dff0:	d01d      	beq.n	2e02e <__lshift+0x92>
   2dff2:	f1c9 0c20 	rsb	ip, r9, #32
   2dff6:	2200      	movs	r2, #0
   2dff8:	680c      	ldr	r4, [r1, #0]
   2dffa:	fa04 f409 	lsl.w	r4, r4, r9
   2dffe:	4314      	orrs	r4, r2
   2e000:	f843 4b04 	str.w	r4, [r3], #4
   2e004:	f851 2b04 	ldr.w	r2, [r1], #4
   2e008:	458e      	cmp	lr, r1
   2e00a:	fa22 f20c 	lsr.w	r2, r2, ip
   2e00e:	d8f3      	bhi.n	2dff8 <__lshift+0x5c>
   2e010:	601a      	str	r2, [r3, #0]
   2e012:	b10a      	cbz	r2, 2e018 <__lshift+0x7c>
   2e014:	f108 0502 	add.w	r5, r8, #2
   2e018:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   2e01a:	6872      	ldr	r2, [r6, #4]
   2e01c:	3d01      	subs	r5, #1
   2e01e:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   2e022:	6105      	str	r5, [r0, #16]
   2e024:	6031      	str	r1, [r6, #0]
   2e026:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   2e02a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2e02e:	3b04      	subs	r3, #4
   2e030:	f851 2b04 	ldr.w	r2, [r1], #4
   2e034:	f843 2f04 	str.w	r2, [r3, #4]!
   2e038:	458e      	cmp	lr, r1
   2e03a:	d8f9      	bhi.n	2e030 <__lshift+0x94>
   2e03c:	e7ec      	b.n	2e018 <__lshift+0x7c>
   2e03e:	bf00      	nop

0002e040 <__mcmp>:
   2e040:	b430      	push	{r4, r5}
   2e042:	690b      	ldr	r3, [r1, #16]
   2e044:	4605      	mov	r5, r0
   2e046:	6900      	ldr	r0, [r0, #16]
   2e048:	1ac0      	subs	r0, r0, r3
   2e04a:	d10f      	bne.n	2e06c <__mcmp+0x2c>
   2e04c:	009b      	lsls	r3, r3, #2
   2e04e:	3514      	adds	r5, #20
   2e050:	3114      	adds	r1, #20
   2e052:	4419      	add	r1, r3
   2e054:	442b      	add	r3, r5
   2e056:	e001      	b.n	2e05c <__mcmp+0x1c>
   2e058:	429d      	cmp	r5, r3
   2e05a:	d207      	bcs.n	2e06c <__mcmp+0x2c>
   2e05c:	f853 4d04 	ldr.w	r4, [r3, #-4]!
   2e060:	f851 2d04 	ldr.w	r2, [r1, #-4]!
   2e064:	4294      	cmp	r4, r2
   2e066:	d0f7      	beq.n	2e058 <__mcmp+0x18>
   2e068:	d302      	bcc.n	2e070 <__mcmp+0x30>
   2e06a:	2001      	movs	r0, #1
   2e06c:	bc30      	pop	{r4, r5}
   2e06e:	4770      	bx	lr
   2e070:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e074:	e7fa      	b.n	2e06c <__mcmp+0x2c>
   2e076:	bf00      	nop

0002e078 <__mdiff>:
   2e078:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e07c:	690f      	ldr	r7, [r1, #16]
   2e07e:	460e      	mov	r6, r1
   2e080:	6911      	ldr	r1, [r2, #16]
   2e082:	1a7f      	subs	r7, r7, r1
   2e084:	2f00      	cmp	r7, #0
   2e086:	4690      	mov	r8, r2
   2e088:	d117      	bne.n	2e0ba <__mdiff+0x42>
   2e08a:	0089      	lsls	r1, r1, #2
   2e08c:	f106 0514 	add.w	r5, r6, #20
   2e090:	f102 0e14 	add.w	lr, r2, #20
   2e094:	186b      	adds	r3, r5, r1
   2e096:	4471      	add	r1, lr
   2e098:	e001      	b.n	2e09e <__mdiff+0x26>
   2e09a:	429d      	cmp	r5, r3
   2e09c:	d25c      	bcs.n	2e158 <__mdiff+0xe0>
   2e09e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   2e0a2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   2e0a6:	42a2      	cmp	r2, r4
   2e0a8:	d0f7      	beq.n	2e09a <__mdiff+0x22>
   2e0aa:	d25e      	bcs.n	2e16a <__mdiff+0xf2>
   2e0ac:	4633      	mov	r3, r6
   2e0ae:	462c      	mov	r4, r5
   2e0b0:	4646      	mov	r6, r8
   2e0b2:	4675      	mov	r5, lr
   2e0b4:	4698      	mov	r8, r3
   2e0b6:	2701      	movs	r7, #1
   2e0b8:	e005      	b.n	2e0c6 <__mdiff+0x4e>
   2e0ba:	db58      	blt.n	2e16e <__mdiff+0xf6>
   2e0bc:	f106 0514 	add.w	r5, r6, #20
   2e0c0:	f108 0414 	add.w	r4, r8, #20
   2e0c4:	2700      	movs	r7, #0
   2e0c6:	6871      	ldr	r1, [r6, #4]
   2e0c8:	f7ff fdbc 	bl	2dc44 <_Balloc>
   2e0cc:	f8d8 3010 	ldr.w	r3, [r8, #16]
   2e0d0:	6936      	ldr	r6, [r6, #16]
   2e0d2:	60c7      	str	r7, [r0, #12]
   2e0d4:	eb04 0c83 	add.w	ip, r4, r3, lsl #2
   2e0d8:	46a6      	mov	lr, r4
   2e0da:	eb05 0786 	add.w	r7, r5, r6, lsl #2
   2e0de:	f100 0414 	add.w	r4, r0, #20
   2e0e2:	2300      	movs	r3, #0
   2e0e4:	f85e 1b04 	ldr.w	r1, [lr], #4
   2e0e8:	f855 8b04 	ldr.w	r8, [r5], #4
   2e0ec:	b28a      	uxth	r2, r1
   2e0ee:	fa13 f388 	uxtah	r3, r3, r8
   2e0f2:	0c09      	lsrs	r1, r1, #16
   2e0f4:	1a9a      	subs	r2, r3, r2
   2e0f6:	ebc1 4318 	rsb	r3, r1, r8, lsr #16
   2e0fa:	eb03 4322 	add.w	r3, r3, r2, asr #16
   2e0fe:	b292      	uxth	r2, r2
   2e100:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
   2e104:	45f4      	cmp	ip, lr
   2e106:	f844 2b04 	str.w	r2, [r4], #4
   2e10a:	ea4f 4323 	mov.w	r3, r3, asr #16
   2e10e:	d8e9      	bhi.n	2e0e4 <__mdiff+0x6c>
   2e110:	42af      	cmp	r7, r5
   2e112:	d917      	bls.n	2e144 <__mdiff+0xcc>
   2e114:	46a4      	mov	ip, r4
   2e116:	46ae      	mov	lr, r5
   2e118:	f85e 2b04 	ldr.w	r2, [lr], #4
   2e11c:	fa13 f382 	uxtah	r3, r3, r2
   2e120:	1419      	asrs	r1, r3, #16
   2e122:	eb01 4112 	add.w	r1, r1, r2, lsr #16
   2e126:	b29b      	uxth	r3, r3
   2e128:	ea43 4201 	orr.w	r2, r3, r1, lsl #16
   2e12c:	4577      	cmp	r7, lr
   2e12e:	f84c 2b04 	str.w	r2, [ip], #4
   2e132:	ea4f 4321 	mov.w	r3, r1, asr #16
   2e136:	d8ef      	bhi.n	2e118 <__mdiff+0xa0>
   2e138:	43ed      	mvns	r5, r5
   2e13a:	442f      	add	r7, r5
   2e13c:	f027 0703 	bic.w	r7, r7, #3
   2e140:	3704      	adds	r7, #4
   2e142:	443c      	add	r4, r7
   2e144:	3c04      	subs	r4, #4
   2e146:	b922      	cbnz	r2, 2e152 <__mdiff+0xda>
   2e148:	f854 3d04 	ldr.w	r3, [r4, #-4]!
   2e14c:	3e01      	subs	r6, #1
   2e14e:	2b00      	cmp	r3, #0
   2e150:	d0fa      	beq.n	2e148 <__mdiff+0xd0>
   2e152:	6106      	str	r6, [r0, #16]
   2e154:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e158:	2100      	movs	r1, #0
   2e15a:	f7ff fd73 	bl	2dc44 <_Balloc>
   2e15e:	2201      	movs	r2, #1
   2e160:	2300      	movs	r3, #0
   2e162:	6102      	str	r2, [r0, #16]
   2e164:	6143      	str	r3, [r0, #20]
   2e166:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e16a:	4674      	mov	r4, lr
   2e16c:	e7ab      	b.n	2e0c6 <__mdiff+0x4e>
   2e16e:	4633      	mov	r3, r6
   2e170:	f106 0414 	add.w	r4, r6, #20
   2e174:	f102 0514 	add.w	r5, r2, #20
   2e178:	4616      	mov	r6, r2
   2e17a:	2701      	movs	r7, #1
   2e17c:	4698      	mov	r8, r3
   2e17e:	e7a2      	b.n	2e0c6 <__mdiff+0x4e>

0002e180 <__d2b>:
   2e180:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   2e184:	b082      	sub	sp, #8
   2e186:	2101      	movs	r1, #1
   2e188:	461c      	mov	r4, r3
   2e18a:	f3c3 570a 	ubfx	r7, r3, #20, #11
   2e18e:	4615      	mov	r5, r2
   2e190:	9e08      	ldr	r6, [sp, #32]
   2e192:	f7ff fd57 	bl	2dc44 <_Balloc>
   2e196:	f3c4 0413 	ubfx	r4, r4, #0, #20
   2e19a:	4680      	mov	r8, r0
   2e19c:	b10f      	cbz	r7, 2e1a2 <__d2b+0x22>
   2e19e:	f444 1480 	orr.w	r4, r4, #1048576	; 0x100000
   2e1a2:	9401      	str	r4, [sp, #4]
   2e1a4:	b31d      	cbz	r5, 2e1ee <__d2b+0x6e>
   2e1a6:	a802      	add	r0, sp, #8
   2e1a8:	f840 5d08 	str.w	r5, [r0, #-8]!
   2e1ac:	f7ff fdda 	bl	2dd64 <__lo0bits>
   2e1b0:	2800      	cmp	r0, #0
   2e1b2:	d134      	bne.n	2e21e <__d2b+0x9e>
   2e1b4:	e89d 000c 	ldmia.w	sp, {r2, r3}
   2e1b8:	f8c8 2014 	str.w	r2, [r8, #20]
   2e1bc:	2b00      	cmp	r3, #0
   2e1be:	bf0c      	ite	eq
   2e1c0:	2101      	moveq	r1, #1
   2e1c2:	2102      	movne	r1, #2
   2e1c4:	f8c8 3018 	str.w	r3, [r8, #24]
   2e1c8:	f8c8 1010 	str.w	r1, [r8, #16]
   2e1cc:	b9df      	cbnz	r7, 2e206 <__d2b+0x86>
   2e1ce:	eb08 0381 	add.w	r3, r8, r1, lsl #2
   2e1d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   2e1d6:	6030      	str	r0, [r6, #0]
   2e1d8:	6918      	ldr	r0, [r3, #16]
   2e1da:	f7ff fda3 	bl	2dd24 <__hi0bits>
   2e1de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e1e0:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
   2e1e4:	6018      	str	r0, [r3, #0]
   2e1e6:	4640      	mov	r0, r8
   2e1e8:	b002      	add	sp, #8
   2e1ea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e1ee:	a801      	add	r0, sp, #4
   2e1f0:	f7ff fdb8 	bl	2dd64 <__lo0bits>
   2e1f4:	9b01      	ldr	r3, [sp, #4]
   2e1f6:	f8c8 3014 	str.w	r3, [r8, #20]
   2e1fa:	2101      	movs	r1, #1
   2e1fc:	3020      	adds	r0, #32
   2e1fe:	f8c8 1010 	str.w	r1, [r8, #16]
   2e202:	2f00      	cmp	r7, #0
   2e204:	d0e3      	beq.n	2e1ce <__d2b+0x4e>
   2e206:	9b09      	ldr	r3, [sp, #36]	; 0x24
   2e208:	f2a7 4733 	subw	r7, r7, #1075	; 0x433
   2e20c:	4407      	add	r7, r0
   2e20e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   2e212:	6037      	str	r7, [r6, #0]
   2e214:	6018      	str	r0, [r3, #0]
   2e216:	4640      	mov	r0, r8
   2e218:	b002      	add	sp, #8
   2e21a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   2e21e:	e89d 000a 	ldmia.w	sp, {r1, r3}
   2e222:	f1c0 0220 	rsb	r2, r0, #32
   2e226:	fa03 f202 	lsl.w	r2, r3, r2
   2e22a:	430a      	orrs	r2, r1
   2e22c:	40c3      	lsrs	r3, r0
   2e22e:	9301      	str	r3, [sp, #4]
   2e230:	f8c8 2014 	str.w	r2, [r8, #20]
   2e234:	e7c2      	b.n	2e1bc <__d2b+0x3c>
   2e236:	bf00      	nop

0002e238 <__ssprint_r>:
   2e238:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e23c:	6893      	ldr	r3, [r2, #8]
   2e23e:	b083      	sub	sp, #12
   2e240:	4690      	mov	r8, r2
   2e242:	2b00      	cmp	r3, #0
   2e244:	d070      	beq.n	2e328 <__ssprint_r+0xf0>
   2e246:	4682      	mov	sl, r0
   2e248:	460c      	mov	r4, r1
   2e24a:	6817      	ldr	r7, [r2, #0]
   2e24c:	688d      	ldr	r5, [r1, #8]
   2e24e:	6808      	ldr	r0, [r1, #0]
   2e250:	e042      	b.n	2e2d8 <__ssprint_r+0xa0>
   2e252:	89a3      	ldrh	r3, [r4, #12]
   2e254:	f413 6f90 	tst.w	r3, #1152	; 0x480
   2e258:	d02e      	beq.n	2e2b8 <__ssprint_r+0x80>
   2e25a:	6965      	ldr	r5, [r4, #20]
   2e25c:	6921      	ldr	r1, [r4, #16]
   2e25e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   2e262:	eba0 0b01 	sub.w	fp, r0, r1
   2e266:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
   2e26a:	f10b 0001 	add.w	r0, fp, #1
   2e26e:	106d      	asrs	r5, r5, #1
   2e270:	4430      	add	r0, r6
   2e272:	42a8      	cmp	r0, r5
   2e274:	462a      	mov	r2, r5
   2e276:	bf84      	itt	hi
   2e278:	4605      	movhi	r5, r0
   2e27a:	462a      	movhi	r2, r5
   2e27c:	055b      	lsls	r3, r3, #21
   2e27e:	d538      	bpl.n	2e2f2 <__ssprint_r+0xba>
   2e280:	4611      	mov	r1, r2
   2e282:	4650      	mov	r0, sl
   2e284:	f7fc f81a 	bl	2a2bc <_malloc_r>
   2e288:	2800      	cmp	r0, #0
   2e28a:	d03c      	beq.n	2e306 <__ssprint_r+0xce>
   2e28c:	465a      	mov	r2, fp
   2e28e:	6921      	ldr	r1, [r4, #16]
   2e290:	9001      	str	r0, [sp, #4]
   2e292:	f7d2 f815 	bl	2c0 <memcpy>
   2e296:	89a2      	ldrh	r2, [r4, #12]
   2e298:	9b01      	ldr	r3, [sp, #4]
   2e29a:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   2e29e:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   2e2a2:	81a2      	strh	r2, [r4, #12]
   2e2a4:	eba5 020b 	sub.w	r2, r5, fp
   2e2a8:	eb03 000b 	add.w	r0, r3, fp
   2e2ac:	6165      	str	r5, [r4, #20]
   2e2ae:	6123      	str	r3, [r4, #16]
   2e2b0:	6020      	str	r0, [r4, #0]
   2e2b2:	60a2      	str	r2, [r4, #8]
   2e2b4:	4635      	mov	r5, r6
   2e2b6:	46b3      	mov	fp, r6
   2e2b8:	465a      	mov	r2, fp
   2e2ba:	4649      	mov	r1, r9
   2e2bc:	f7fc faf4 	bl	2a8a8 <memmove>
   2e2c0:	f8d8 3008 	ldr.w	r3, [r8, #8]
   2e2c4:	68a2      	ldr	r2, [r4, #8]
   2e2c6:	6820      	ldr	r0, [r4, #0]
   2e2c8:	1b55      	subs	r5, r2, r5
   2e2ca:	4458      	add	r0, fp
   2e2cc:	1b9e      	subs	r6, r3, r6
   2e2ce:	60a5      	str	r5, [r4, #8]
   2e2d0:	6020      	str	r0, [r4, #0]
   2e2d2:	f8c8 6008 	str.w	r6, [r8, #8]
   2e2d6:	b33e      	cbz	r6, 2e328 <__ssprint_r+0xf0>
   2e2d8:	687e      	ldr	r6, [r7, #4]
   2e2da:	463b      	mov	r3, r7
   2e2dc:	3708      	adds	r7, #8
   2e2de:	2e00      	cmp	r6, #0
   2e2e0:	d0fa      	beq.n	2e2d8 <__ssprint_r+0xa0>
   2e2e2:	42ae      	cmp	r6, r5
   2e2e4:	f8d3 9000 	ldr.w	r9, [r3]
   2e2e8:	46ab      	mov	fp, r5
   2e2ea:	d2b2      	bcs.n	2e252 <__ssprint_r+0x1a>
   2e2ec:	4635      	mov	r5, r6
   2e2ee:	46b3      	mov	fp, r6
   2e2f0:	e7e2      	b.n	2e2b8 <__ssprint_r+0x80>
   2e2f2:	4650      	mov	r0, sl
   2e2f4:	f000 f81e 	bl	2e334 <_realloc_r>
   2e2f8:	4603      	mov	r3, r0
   2e2fa:	2800      	cmp	r0, #0
   2e2fc:	d1d2      	bne.n	2e2a4 <__ssprint_r+0x6c>
   2e2fe:	6921      	ldr	r1, [r4, #16]
   2e300:	4650      	mov	r0, sl
   2e302:	f7ff fba7 	bl	2da54 <_free_r>
   2e306:	230c      	movs	r3, #12
   2e308:	f8ca 3000 	str.w	r3, [sl]
   2e30c:	89a3      	ldrh	r3, [r4, #12]
   2e30e:	2200      	movs	r2, #0
   2e310:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   2e314:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2e318:	81a3      	strh	r3, [r4, #12]
   2e31a:	f8c8 2008 	str.w	r2, [r8, #8]
   2e31e:	f8c8 2004 	str.w	r2, [r8, #4]
   2e322:	b003      	add	sp, #12
   2e324:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e328:	2000      	movs	r0, #0
   2e32a:	f8c8 0004 	str.w	r0, [r8, #4]
   2e32e:	b003      	add	sp, #12
   2e330:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002e334 <_realloc_r>:
   2e334:	2900      	cmp	r1, #0
   2e336:	f000 8095 	beq.w	2e464 <_realloc_r+0x130>
   2e33a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2e33e:	460d      	mov	r5, r1
   2e340:	4616      	mov	r6, r2
   2e342:	b083      	sub	sp, #12
   2e344:	4680      	mov	r8, r0
   2e346:	f106 070b 	add.w	r7, r6, #11
   2e34a:	f7fc fb5f 	bl	2aa0c <__malloc_lock>
   2e34e:	f855 ec04 	ldr.w	lr, [r5, #-4]
   2e352:	2f16      	cmp	r7, #22
   2e354:	f02e 0403 	bic.w	r4, lr, #3
   2e358:	f1a5 0908 	sub.w	r9, r5, #8
   2e35c:	d83c      	bhi.n	2e3d8 <_realloc_r+0xa4>
   2e35e:	2210      	movs	r2, #16
   2e360:	4617      	mov	r7, r2
   2e362:	42be      	cmp	r6, r7
   2e364:	d83d      	bhi.n	2e3e2 <_realloc_r+0xae>
   2e366:	4294      	cmp	r4, r2
   2e368:	da43      	bge.n	2e3f2 <_realloc_r+0xbe>
   2e36a:	4bc4      	ldr	r3, [pc, #784]	; (2e67c <_realloc_r+0x348>)
   2e36c:	6899      	ldr	r1, [r3, #8]
   2e36e:	eb09 0004 	add.w	r0, r9, r4
   2e372:	4288      	cmp	r0, r1
   2e374:	f000 80b4 	beq.w	2e4e0 <_realloc_r+0x1ac>
   2e378:	6843      	ldr	r3, [r0, #4]
   2e37a:	f023 0101 	bic.w	r1, r3, #1
   2e37e:	4401      	add	r1, r0
   2e380:	6849      	ldr	r1, [r1, #4]
   2e382:	07c9      	lsls	r1, r1, #31
   2e384:	d54c      	bpl.n	2e420 <_realloc_r+0xec>
   2e386:	f01e 0f01 	tst.w	lr, #1
   2e38a:	f000 809b 	beq.w	2e4c4 <_realloc_r+0x190>
   2e38e:	4631      	mov	r1, r6
   2e390:	4640      	mov	r0, r8
   2e392:	f7fb ff93 	bl	2a2bc <_malloc_r>
   2e396:	4606      	mov	r6, r0
   2e398:	2800      	cmp	r0, #0
   2e39a:	d03a      	beq.n	2e412 <_realloc_r+0xde>
   2e39c:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e3a0:	f023 0301 	bic.w	r3, r3, #1
   2e3a4:	444b      	add	r3, r9
   2e3a6:	f1a0 0208 	sub.w	r2, r0, #8
   2e3aa:	429a      	cmp	r2, r3
   2e3ac:	f000 8121 	beq.w	2e5f2 <_realloc_r+0x2be>
   2e3b0:	1f22      	subs	r2, r4, #4
   2e3b2:	2a24      	cmp	r2, #36	; 0x24
   2e3b4:	f200 8107 	bhi.w	2e5c6 <_realloc_r+0x292>
   2e3b8:	2a13      	cmp	r2, #19
   2e3ba:	f200 80db 	bhi.w	2e574 <_realloc_r+0x240>
   2e3be:	4603      	mov	r3, r0
   2e3c0:	462a      	mov	r2, r5
   2e3c2:	6811      	ldr	r1, [r2, #0]
   2e3c4:	6019      	str	r1, [r3, #0]
   2e3c6:	6851      	ldr	r1, [r2, #4]
   2e3c8:	6059      	str	r1, [r3, #4]
   2e3ca:	6892      	ldr	r2, [r2, #8]
   2e3cc:	609a      	str	r2, [r3, #8]
   2e3ce:	4629      	mov	r1, r5
   2e3d0:	4640      	mov	r0, r8
   2e3d2:	f7ff fb3f 	bl	2da54 <_free_r>
   2e3d6:	e01c      	b.n	2e412 <_realloc_r+0xde>
   2e3d8:	f027 0707 	bic.w	r7, r7, #7
   2e3dc:	2f00      	cmp	r7, #0
   2e3de:	463a      	mov	r2, r7
   2e3e0:	dabf      	bge.n	2e362 <_realloc_r+0x2e>
   2e3e2:	2600      	movs	r6, #0
   2e3e4:	230c      	movs	r3, #12
   2e3e6:	4630      	mov	r0, r6
   2e3e8:	f8c8 3000 	str.w	r3, [r8]
   2e3ec:	b003      	add	sp, #12
   2e3ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e3f2:	462e      	mov	r6, r5
   2e3f4:	1be3      	subs	r3, r4, r7
   2e3f6:	2b0f      	cmp	r3, #15
   2e3f8:	d81e      	bhi.n	2e438 <_realloc_r+0x104>
   2e3fa:	f8d9 3004 	ldr.w	r3, [r9, #4]
   2e3fe:	f003 0301 	and.w	r3, r3, #1
   2e402:	4323      	orrs	r3, r4
   2e404:	444c      	add	r4, r9
   2e406:	f8c9 3004 	str.w	r3, [r9, #4]
   2e40a:	6863      	ldr	r3, [r4, #4]
   2e40c:	f043 0301 	orr.w	r3, r3, #1
   2e410:	6063      	str	r3, [r4, #4]
   2e412:	4640      	mov	r0, r8
   2e414:	f7fc fb00 	bl	2aa18 <__malloc_unlock>
   2e418:	4630      	mov	r0, r6
   2e41a:	b003      	add	sp, #12
   2e41c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2e420:	f023 0303 	bic.w	r3, r3, #3
   2e424:	18e1      	adds	r1, r4, r3
   2e426:	4291      	cmp	r1, r2
   2e428:	db1f      	blt.n	2e46a <_realloc_r+0x136>
   2e42a:	68c3      	ldr	r3, [r0, #12]
   2e42c:	6882      	ldr	r2, [r0, #8]
   2e42e:	462e      	mov	r6, r5
   2e430:	60d3      	str	r3, [r2, #12]
   2e432:	460c      	mov	r4, r1
   2e434:	609a      	str	r2, [r3, #8]
   2e436:	e7dd      	b.n	2e3f4 <_realloc_r+0xc0>
   2e438:	f8d9 2004 	ldr.w	r2, [r9, #4]
   2e43c:	eb09 0107 	add.w	r1, r9, r7
   2e440:	f002 0201 	and.w	r2, r2, #1
   2e444:	444c      	add	r4, r9
   2e446:	f043 0301 	orr.w	r3, r3, #1
   2e44a:	4317      	orrs	r7, r2
   2e44c:	f8c9 7004 	str.w	r7, [r9, #4]
   2e450:	604b      	str	r3, [r1, #4]
   2e452:	6863      	ldr	r3, [r4, #4]
   2e454:	f043 0301 	orr.w	r3, r3, #1
   2e458:	3108      	adds	r1, #8
   2e45a:	6063      	str	r3, [r4, #4]
   2e45c:	4640      	mov	r0, r8
   2e45e:	f7ff faf9 	bl	2da54 <_free_r>
   2e462:	e7d6      	b.n	2e412 <_realloc_r+0xde>
   2e464:	4611      	mov	r1, r2
   2e466:	f7fb bf29 	b.w	2a2bc <_malloc_r>
   2e46a:	f01e 0f01 	tst.w	lr, #1
   2e46e:	d18e      	bne.n	2e38e <_realloc_r+0x5a>
   2e470:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e474:	eba9 0a01 	sub.w	sl, r9, r1
   2e478:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e47c:	f021 0103 	bic.w	r1, r1, #3
   2e480:	440b      	add	r3, r1
   2e482:	4423      	add	r3, r4
   2e484:	4293      	cmp	r3, r2
   2e486:	db25      	blt.n	2e4d4 <_realloc_r+0x1a0>
   2e488:	68c2      	ldr	r2, [r0, #12]
   2e48a:	6881      	ldr	r1, [r0, #8]
   2e48c:	4656      	mov	r6, sl
   2e48e:	60ca      	str	r2, [r1, #12]
   2e490:	6091      	str	r1, [r2, #8]
   2e492:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e496:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e49a:	1f22      	subs	r2, r4, #4
   2e49c:	2a24      	cmp	r2, #36	; 0x24
   2e49e:	60c1      	str	r1, [r0, #12]
   2e4a0:	6088      	str	r0, [r1, #8]
   2e4a2:	f200 8094 	bhi.w	2e5ce <_realloc_r+0x29a>
   2e4a6:	2a13      	cmp	r2, #19
   2e4a8:	d96f      	bls.n	2e58a <_realloc_r+0x256>
   2e4aa:	6829      	ldr	r1, [r5, #0]
   2e4ac:	f8ca 1008 	str.w	r1, [sl, #8]
   2e4b0:	6869      	ldr	r1, [r5, #4]
   2e4b2:	f8ca 100c 	str.w	r1, [sl, #12]
   2e4b6:	2a1b      	cmp	r2, #27
   2e4b8:	f200 80a2 	bhi.w	2e600 <_realloc_r+0x2cc>
   2e4bc:	3508      	adds	r5, #8
   2e4be:	f10a 0210 	add.w	r2, sl, #16
   2e4c2:	e063      	b.n	2e58c <_realloc_r+0x258>
   2e4c4:	f855 3c08 	ldr.w	r3, [r5, #-8]
   2e4c8:	eba9 0a03 	sub.w	sl, r9, r3
   2e4cc:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e4d0:	f021 0103 	bic.w	r1, r1, #3
   2e4d4:	1863      	adds	r3, r4, r1
   2e4d6:	4293      	cmp	r3, r2
   2e4d8:	f6ff af59 	blt.w	2e38e <_realloc_r+0x5a>
   2e4dc:	4656      	mov	r6, sl
   2e4de:	e7d8      	b.n	2e492 <_realloc_r+0x15e>
   2e4e0:	6841      	ldr	r1, [r0, #4]
   2e4e2:	f021 0b03 	bic.w	fp, r1, #3
   2e4e6:	44a3      	add	fp, r4
   2e4e8:	f107 0010 	add.w	r0, r7, #16
   2e4ec:	4583      	cmp	fp, r0
   2e4ee:	da56      	bge.n	2e59e <_realloc_r+0x26a>
   2e4f0:	f01e 0f01 	tst.w	lr, #1
   2e4f4:	f47f af4b 	bne.w	2e38e <_realloc_r+0x5a>
   2e4f8:	f855 1c08 	ldr.w	r1, [r5, #-8]
   2e4fc:	eba9 0a01 	sub.w	sl, r9, r1
   2e500:	f8da 1004 	ldr.w	r1, [sl, #4]
   2e504:	f021 0103 	bic.w	r1, r1, #3
   2e508:	448b      	add	fp, r1
   2e50a:	4558      	cmp	r0, fp
   2e50c:	dce2      	bgt.n	2e4d4 <_realloc_r+0x1a0>
   2e50e:	4656      	mov	r6, sl
   2e510:	f8da 100c 	ldr.w	r1, [sl, #12]
   2e514:	f856 0f08 	ldr.w	r0, [r6, #8]!
   2e518:	1f22      	subs	r2, r4, #4
   2e51a:	2a24      	cmp	r2, #36	; 0x24
   2e51c:	60c1      	str	r1, [r0, #12]
   2e51e:	6088      	str	r0, [r1, #8]
   2e520:	f200 808f 	bhi.w	2e642 <_realloc_r+0x30e>
   2e524:	2a13      	cmp	r2, #19
   2e526:	f240 808a 	bls.w	2e63e <_realloc_r+0x30a>
   2e52a:	6829      	ldr	r1, [r5, #0]
   2e52c:	f8ca 1008 	str.w	r1, [sl, #8]
   2e530:	6869      	ldr	r1, [r5, #4]
   2e532:	f8ca 100c 	str.w	r1, [sl, #12]
   2e536:	2a1b      	cmp	r2, #27
   2e538:	f200 808a 	bhi.w	2e650 <_realloc_r+0x31c>
   2e53c:	3508      	adds	r5, #8
   2e53e:	f10a 0210 	add.w	r2, sl, #16
   2e542:	6829      	ldr	r1, [r5, #0]
   2e544:	6011      	str	r1, [r2, #0]
   2e546:	6869      	ldr	r1, [r5, #4]
   2e548:	6051      	str	r1, [r2, #4]
   2e54a:	68a9      	ldr	r1, [r5, #8]
   2e54c:	6091      	str	r1, [r2, #8]
   2e54e:	eb0a 0107 	add.w	r1, sl, r7
   2e552:	ebab 0207 	sub.w	r2, fp, r7
   2e556:	f042 0201 	orr.w	r2, r2, #1
   2e55a:	6099      	str	r1, [r3, #8]
   2e55c:	604a      	str	r2, [r1, #4]
   2e55e:	f8da 3004 	ldr.w	r3, [sl, #4]
   2e562:	f003 0301 	and.w	r3, r3, #1
   2e566:	431f      	orrs	r7, r3
   2e568:	4640      	mov	r0, r8
   2e56a:	f8ca 7004 	str.w	r7, [sl, #4]
   2e56e:	f7fc fa53 	bl	2aa18 <__malloc_unlock>
   2e572:	e751      	b.n	2e418 <_realloc_r+0xe4>
   2e574:	682b      	ldr	r3, [r5, #0]
   2e576:	6003      	str	r3, [r0, #0]
   2e578:	686b      	ldr	r3, [r5, #4]
   2e57a:	6043      	str	r3, [r0, #4]
   2e57c:	2a1b      	cmp	r2, #27
   2e57e:	d82d      	bhi.n	2e5dc <_realloc_r+0x2a8>
   2e580:	f100 0308 	add.w	r3, r0, #8
   2e584:	f105 0208 	add.w	r2, r5, #8
   2e588:	e71b      	b.n	2e3c2 <_realloc_r+0x8e>
   2e58a:	4632      	mov	r2, r6
   2e58c:	6829      	ldr	r1, [r5, #0]
   2e58e:	6011      	str	r1, [r2, #0]
   2e590:	6869      	ldr	r1, [r5, #4]
   2e592:	6051      	str	r1, [r2, #4]
   2e594:	68a9      	ldr	r1, [r5, #8]
   2e596:	6091      	str	r1, [r2, #8]
   2e598:	461c      	mov	r4, r3
   2e59a:	46d1      	mov	r9, sl
   2e59c:	e72a      	b.n	2e3f4 <_realloc_r+0xc0>
   2e59e:	eb09 0107 	add.w	r1, r9, r7
   2e5a2:	ebab 0b07 	sub.w	fp, fp, r7
   2e5a6:	f04b 0201 	orr.w	r2, fp, #1
   2e5aa:	6099      	str	r1, [r3, #8]
   2e5ac:	604a      	str	r2, [r1, #4]
   2e5ae:	f855 3c04 	ldr.w	r3, [r5, #-4]
   2e5b2:	f003 0301 	and.w	r3, r3, #1
   2e5b6:	431f      	orrs	r7, r3
   2e5b8:	4640      	mov	r0, r8
   2e5ba:	f845 7c04 	str.w	r7, [r5, #-4]
   2e5be:	f7fc fa2b 	bl	2aa18 <__malloc_unlock>
   2e5c2:	462e      	mov	r6, r5
   2e5c4:	e728      	b.n	2e418 <_realloc_r+0xe4>
   2e5c6:	4629      	mov	r1, r5
   2e5c8:	f7fc f96e 	bl	2a8a8 <memmove>
   2e5cc:	e6ff      	b.n	2e3ce <_realloc_r+0x9a>
   2e5ce:	4629      	mov	r1, r5
   2e5d0:	4630      	mov	r0, r6
   2e5d2:	461c      	mov	r4, r3
   2e5d4:	46d1      	mov	r9, sl
   2e5d6:	f7fc f967 	bl	2a8a8 <memmove>
   2e5da:	e70b      	b.n	2e3f4 <_realloc_r+0xc0>
   2e5dc:	68ab      	ldr	r3, [r5, #8]
   2e5de:	6083      	str	r3, [r0, #8]
   2e5e0:	68eb      	ldr	r3, [r5, #12]
   2e5e2:	60c3      	str	r3, [r0, #12]
   2e5e4:	2a24      	cmp	r2, #36	; 0x24
   2e5e6:	d017      	beq.n	2e618 <_realloc_r+0x2e4>
   2e5e8:	f100 0310 	add.w	r3, r0, #16
   2e5ec:	f105 0210 	add.w	r2, r5, #16
   2e5f0:	e6e7      	b.n	2e3c2 <_realloc_r+0x8e>
   2e5f2:	f850 3c04 	ldr.w	r3, [r0, #-4]
   2e5f6:	f023 0303 	bic.w	r3, r3, #3
   2e5fa:	441c      	add	r4, r3
   2e5fc:	462e      	mov	r6, r5
   2e5fe:	e6f9      	b.n	2e3f4 <_realloc_r+0xc0>
   2e600:	68a9      	ldr	r1, [r5, #8]
   2e602:	f8ca 1010 	str.w	r1, [sl, #16]
   2e606:	68e9      	ldr	r1, [r5, #12]
   2e608:	f8ca 1014 	str.w	r1, [sl, #20]
   2e60c:	2a24      	cmp	r2, #36	; 0x24
   2e60e:	d00c      	beq.n	2e62a <_realloc_r+0x2f6>
   2e610:	3510      	adds	r5, #16
   2e612:	f10a 0218 	add.w	r2, sl, #24
   2e616:	e7b9      	b.n	2e58c <_realloc_r+0x258>
   2e618:	692b      	ldr	r3, [r5, #16]
   2e61a:	6103      	str	r3, [r0, #16]
   2e61c:	696b      	ldr	r3, [r5, #20]
   2e61e:	6143      	str	r3, [r0, #20]
   2e620:	f105 0218 	add.w	r2, r5, #24
   2e624:	f100 0318 	add.w	r3, r0, #24
   2e628:	e6cb      	b.n	2e3c2 <_realloc_r+0x8e>
   2e62a:	692a      	ldr	r2, [r5, #16]
   2e62c:	f8ca 2018 	str.w	r2, [sl, #24]
   2e630:	696a      	ldr	r2, [r5, #20]
   2e632:	f8ca 201c 	str.w	r2, [sl, #28]
   2e636:	3518      	adds	r5, #24
   2e638:	f10a 0220 	add.w	r2, sl, #32
   2e63c:	e7a6      	b.n	2e58c <_realloc_r+0x258>
   2e63e:	4632      	mov	r2, r6
   2e640:	e77f      	b.n	2e542 <_realloc_r+0x20e>
   2e642:	4629      	mov	r1, r5
   2e644:	4630      	mov	r0, r6
   2e646:	9301      	str	r3, [sp, #4]
   2e648:	f7fc f92e 	bl	2a8a8 <memmove>
   2e64c:	9b01      	ldr	r3, [sp, #4]
   2e64e:	e77e      	b.n	2e54e <_realloc_r+0x21a>
   2e650:	68a9      	ldr	r1, [r5, #8]
   2e652:	f8ca 1010 	str.w	r1, [sl, #16]
   2e656:	68e9      	ldr	r1, [r5, #12]
   2e658:	f8ca 1014 	str.w	r1, [sl, #20]
   2e65c:	2a24      	cmp	r2, #36	; 0x24
   2e65e:	d003      	beq.n	2e668 <_realloc_r+0x334>
   2e660:	3510      	adds	r5, #16
   2e662:	f10a 0218 	add.w	r2, sl, #24
   2e666:	e76c      	b.n	2e542 <_realloc_r+0x20e>
   2e668:	692a      	ldr	r2, [r5, #16]
   2e66a:	f8ca 2018 	str.w	r2, [sl, #24]
   2e66e:	696a      	ldr	r2, [r5, #20]
   2e670:	f8ca 201c 	str.w	r2, [sl, #28]
   2e674:	3518      	adds	r5, #24
   2e676:	f10a 0220 	add.w	r2, sl, #32
   2e67a:	e762      	b.n	2e542 <_realloc_r+0x20e>
   2e67c:	2000cc24 	.word	0x2000cc24
