
zephyr.elf:     file format elf32-littlearm


Disassembly of section text:

00000000 <_vector_table>:

#include <crc16.h>

u16_t crc16(const u8_t *src, size_t len, u16_t polynomial,
	    u16_t initial_value, bool pad)
{
       0:	2000ab60 	.word	0x2000ab60
       4:	00027349 	.word	0x00027349
	u16_t crc = initial_value;
	size_t padding = pad ? sizeof(crc) : 0;
       8:	000273a9 	.word	0x000273a9
	size_t i, b;

	/* src length + padding (if required) */
	for (i = 0; i < len + padding; i++) {
       c:	000271dd 	.word	0x000271dd
	size_t padding = pad ? sizeof(crc) : 0;
      10:	000271dd 	.word	0x000271dd
      14:	000271dd 	.word	0x000271dd
			/* choose input bytes or implicit trailing zeros */
			if (i < len) {
				crc |= !!(src[i] & (0x80 >> b));
			}

			if (divide) {
      18:	000271dd 	.word	0x000271dd
		for (b = 0; b < 8; b++) {
      1c:	000271dd 	.word	0x000271dd
      20:	000271dd 	.word	0x000271dd
			crc = (crc << 1);
      24:	000271dd 	.word	0x000271dd
			if (i < len) {
      28:	000271dd 	.word	0x000271dd
				crc |= !!(src[i] & (0x80 >> b));
      2c:	00026d2d 	.word	0x00026d2d
      30:	000271dd 	.word	0x000271dd
      34:	000271dd 	.word	0x000271dd
      38:	00026ce9 	.word	0x00026ce9
      3c:	000271dd 	.word	0x000271dd

00000040 <_irq_vector_table>:
				crc = crc ^ polynomial;
      40:	0002730d 00018a55 0002730d 0002730d     .s..U....s...s..
	for (i = 0; i < len + padding; i++) {
      50:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
}

static inline void add_round_key(uint8_t *s, const unsigned int *k)
{
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
      60:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
      70:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
      80:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
      90:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
      a0:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
      b0:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
      c0:	0002730d 0002730d 0002730d 0002730d     .s...s...s...s..
      d0:	0002730d 0002730d 0002730d              .s...s...s..

000000dc <_sw_isr_table>:
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
      dc:	00000000 00002049 00000000 00027149     ....I ......Iq..
      ec:	2000cb80 00001983 00000000 00027149     ... ........Iq..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
      fc:	00000000 00027149 00000000 00027149     ....Iq......Iq..

	(void)_copy(state, sizeof(state), in, sizeof(state));

	add_round_key(state, s->words + Nb*Nr);

	for (i = Nr - 1; i > 0; --i) {
     10c:	2000cbbc 00001d57 00000000 00027149     ... W.......Iq..
	for (i = 0; i < (Nb*Nk); ++i) {
     11c:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
     12c:	00000000 00027149 00000000 00018a75     ....Iq......u...
     13c:	00000000 00027149 00000000 00018ab7     ....Iq..........
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
     14c:	00000000 00027149 00000000 00027149     ....Iq......Iq..
     15c:	00000000 00027149 00000000 00001ac9     ....Iq..........
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
     16c:	00000000 00027149 00000000 00027149     ....Iq......Iq..
     17c:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
     18c:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
     19c:	00000000 00018aad 00000000 00027149     ............Iq..
     1ac:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
     1bc:	00000000 00027149 00000000 00027149     ....Iq......Iq..
     1cc:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
     1dc:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
     1ec:	00000000 00027149 00000000 00027149     ....Iq......Iq..
     1fc:	00000000 00027149 00000000 00027149     ....Iq......Iq..
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     20c:	00000000 00027149                       ....Iq..

00000214 <_image_text_start>:
	...

00000220 <memchr>:
     220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     224:	2a10      	cmp	r2, #16
     226:	db2b      	blt.n	280 <CONFIG_BT_HCI_TX_STACK_SIZE>
     228:	f010 0f07 	tst.w	r0, #7
     22c:	d008      	beq.n	240 <memchr+0x20>
     22e:	f810 3b01 	ldrb.w	r3, [r0], #1
     232:	3a01      	subs	r2, #1
     234:	428b      	cmp	r3, r1
     236:	d02d      	beq.n	294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     238:	f010 0f07 	tst.w	r0, #7
     23c:	b342      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     23e:	d1f6      	bne.n	22e <memchr+0xe>
     240:	b4f0      	push	{r4, r5, r6, r7}
     242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
     246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
     24a:	f022 0407 	bic.w	r4, r2, #7
     24e:	f07f 0700 	mvns.w	r7, #0
     252:	2300      	movs	r3, #0
     254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
     258:	3c08      	subs	r4, #8
     25a:	ea85 0501 	eor.w	r5, r5, r1
     25e:	ea86 0601 	eor.w	r6, r6, r1
     262:	fa85 f547 	uadd8	r5, r5, r7
     266:	faa3 f587 	sel	r5, r3, r7
     26a:	fa86 f647 	uadd8	r6, r6, r7
     26e:	faa5 f687 	sel	r6, r5, r7
     272:	b98e      	cbnz	r6, 298 <CONFIG_BT_HCI_TX_STACK_SIZE+0x18>
     274:	d1ee      	bne.n	254 <memchr+0x34>
     276:	bcf0      	pop	{r4, r5, r6, r7}
     278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     27c:	f002 0207 	and.w	r2, r2, #7
     280:	b132      	cbz	r2, 290 <CONFIG_BT_HCI_TX_STACK_SIZE+0x10>
     282:	f810 3b01 	ldrb.w	r3, [r0], #1
     286:	3a01      	subs	r2, #1
     288:	ea83 0301 	eor.w	r3, r3, r1
     28c:	b113      	cbz	r3, 294 <CONFIG_BT_HCI_TX_STACK_SIZE+0x14>
     28e:	d1f8      	bne.n	282 <CONFIG_BT_HCI_TX_STACK_SIZE+0x2>
     290:	2000      	movs	r0, #0
     292:	4770      	bx	lr
     294:	3801      	subs	r0, #1
     296:	4770      	bx	lr
     298:	2d00      	cmp	r5, #0
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     29a:	bf06      	itte	eq
     29c:	4635      	moveq	r5, r6
     29e:	3803      	subeq	r0, #3
     2a0:	3807      	subne	r0, #7
     2a2:	f015 0f01 	tst.w	r5, #1
     2a6:	d107      	bne.n	2b8 <CONFIG_BT_HCI_TX_STACK_SIZE+0x38>
     2a8:	3001      	adds	r0, #1
     2aa:	f415 7f80 	tst.w	r5, #256	; 0x100
     2ae:	bf02      	ittt	eq
     2b0:	3001      	addeq	r0, #1
     2b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
     2b6:	3001      	addeq	r0, #1
     2b8:	bcf0      	pop	{r4, r5, r6, r7}
     2ba:	3801      	subs	r0, #1
     2bc:	4770      	bx	lr
     2be:	bf00      	nop

000002c0 <memcpy>:
     2c0:	4684      	mov	ip, r0
     2c2:	ea41 0300 	orr.w	r3, r1, r0
     2c6:	f013 0303 	ands.w	r3, r3, #3
     2ca:	d16d      	bne.n	3a8 <memcpy+0xe8>
     2cc:	3a40      	subs	r2, #64	; 0x40
     2ce:	d341      	bcc.n	354 <memcpy+0x94>
     2d0:	f851 3b04 	ldr.w	r3, [r1], #4
     2d4:	f840 3b04 	str.w	r3, [r0], #4
     2d8:	f851 3b04 	ldr.w	r3, [r1], #4
     2dc:	f840 3b04 	str.w	r3, [r0], #4
     2e0:	f851 3b04 	ldr.w	r3, [r1], #4
     2e4:	f840 3b04 	str.w	r3, [r0], #4
     2e8:	f851 3b04 	ldr.w	r3, [r1], #4
     2ec:	f840 3b04 	str.w	r3, [r0], #4
     2f0:	f851 3b04 	ldr.w	r3, [r1], #4
     2f4:	f840 3b04 	str.w	r3, [r0], #4
     2f8:	f851 3b04 	ldr.w	r3, [r1], #4
     2fc:	f840 3b04 	str.w	r3, [r0], #4
     300:	f851 3b04 	ldr.w	r3, [r1], #4
     304:	f840 3b04 	str.w	r3, [r0], #4
     308:	f851 3b04 	ldr.w	r3, [r1], #4
     30c:	f840 3b04 	str.w	r3, [r0], #4
     310:	f851 3b04 	ldr.w	r3, [r1], #4
     314:	f840 3b04 	str.w	r3, [r0], #4
     318:	f851 3b04 	ldr.w	r3, [r1], #4
     31c:	f840 3b04 	str.w	r3, [r0], #4
     320:	f851 3b04 	ldr.w	r3, [r1], #4
     324:	f840 3b04 	str.w	r3, [r0], #4
     328:	f851 3b04 	ldr.w	r3, [r1], #4
     32c:	f840 3b04 	str.w	r3, [r0], #4
     330:	f851 3b04 	ldr.w	r3, [r1], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     334:	f840 3b04 	str.w	r3, [r0], #4
     338:	f851 3b04 	ldr.w	r3, [r1], #4
     33c:	f840 3b04 	str.w	r3, [r0], #4
     340:	f851 3b04 	ldr.w	r3, [r1], #4
     344:	f840 3b04 	str.w	r3, [r0], #4
     348:	f851 3b04 	ldr.w	r3, [r1], #4
     34c:	f840 3b04 	str.w	r3, [r0], #4
     350:	3a40      	subs	r2, #64	; 0x40
     352:	d2bd      	bcs.n	2d0 <memcpy+0x10>
     354:	3230      	adds	r2, #48	; 0x30
     356:	d311      	bcc.n	37c <memcpy+0xbc>
     358:	f851 3b04 	ldr.w	r3, [r1], #4
     35c:	f840 3b04 	str.w	r3, [r0], #4
     360:	f851 3b04 	ldr.w	r3, [r1], #4
     364:	f840 3b04 	str.w	r3, [r0], #4
     368:	f851 3b04 	ldr.w	r3, [r1], #4
     36c:	f840 3b04 	str.w	r3, [r0], #4
     370:	f851 3b04 	ldr.w	r3, [r1], #4
     374:	f840 3b04 	str.w	r3, [r0], #4
     378:	3a10      	subs	r2, #16
     37a:	d2ed      	bcs.n	358 <memcpy+0x98>
     37c:	320c      	adds	r2, #12
     37e:	d305      	bcc.n	38c <memcpy+0xcc>
     380:	f851 3b04 	ldr.w	r3, [r1], #4
     384:	f840 3b04 	str.w	r3, [r0], #4
     388:	3a04      	subs	r2, #4
     38a:	d2f9      	bcs.n	380 <memcpy+0xc0>
     38c:	3204      	adds	r2, #4
     38e:	d008      	beq.n	3a2 <memcpy+0xe2>
     390:	07d2      	lsls	r2, r2, #31
     392:	bf1c      	itt	ne
     394:	f811 3b01 	ldrbne.w	r3, [r1], #1
     398:	f800 3b01 	strbne.w	r3, [r0], #1
     39c:	d301      	bcc.n	3a2 <memcpy+0xe2>
     39e:	880b      	ldrh	r3, [r1, #0]
     3a0:	8003      	strh	r3, [r0, #0]
     3a2:	4660      	mov	r0, ip
     3a4:	4770      	bx	lr
     3a6:	bf00      	nop
     3a8:	2a08      	cmp	r2, #8
     3aa:	d313      	bcc.n	3d4 <memcpy+0x114>
     3ac:	078b      	lsls	r3, r1, #30
     3ae:	d08d      	beq.n	2cc <memcpy+0xc>
     3b0:	f010 0303 	ands.w	r3, r0, #3
     3b4:	d08a      	beq.n	2cc <memcpy+0xc>
     3b6:	f1c3 0304 	rsb	r3, r3, #4
     3ba:	1ad2      	subs	r2, r2, r3
     3bc:	07db      	lsls	r3, r3, #31
     3be:	bf1c      	itt	ne
     3c0:	f811 3b01 	ldrbne.w	r3, [r1], #1
     3c4:	f800 3b01 	strbne.w	r3, [r0], #1
     3c8:	d380      	bcc.n	2cc <memcpy+0xc>
     3ca:	f831 3b02 	ldrh.w	r3, [r1], #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     3ce:	f820 3b02 	strh.w	r3, [r0], #2
     3d2:	e77b      	b.n	2cc <memcpy+0xc>
     3d4:	3a04      	subs	r2, #4
     3d6:	d3d9      	bcc.n	38c <memcpy+0xcc>
     3d8:	3a01      	subs	r2, #1
     3da:	f811 3b01 	ldrb.w	r3, [r1], #1
     3de:	f800 3b01 	strb.w	r3, [r0], #1
     3e2:	d2f9      	bcs.n	3d8 <memcpy+0x118>
     3e4:	780b      	ldrb	r3, [r1, #0]
     3e6:	7003      	strb	r3, [r0, #0]
     3e8:	784b      	ldrb	r3, [r1, #1]
     3ea:	7043      	strb	r3, [r0, #1]
     3ec:	788b      	ldrb	r3, [r1, #2]
     3ee:	7083      	strb	r3, [r0, #2]
     3f0:	4660      	mov	r0, ip
     3f2:	4770      	bx	lr
	...
     400:	eba2 0003 	sub.w	r0, r2, r3
     404:	4770      	bx	lr
     406:	bf00      	nop

00000408 <strcmp>:
     408:	7802      	ldrb	r2, [r0, #0]
     40a:	780b      	ldrb	r3, [r1, #0]
     40c:	2a01      	cmp	r2, #1
     40e:	bf28      	it	cs
     410:	429a      	cmpcs	r2, r3
     412:	d1f5      	bne.n	400 <CONFIG_BT_RX_STACK_SIZE>
     414:	e96d 4504 	strd	r4, r5, [sp, #-16]!
     418:	ea40 0401 	orr.w	r4, r0, r1
     41c:	e9cd 6702 	strd	r6, r7, [sp, #8]
     420:	f06f 0c00 	mvn.w	ip, #0
     424:	ea4f 7244 	mov.w	r2, r4, lsl #29
     428:	b312      	cbz	r2, 470 <strcmp+0x68>
     42a:	ea80 0401 	eor.w	r4, r0, r1
     42e:	f014 0f07 	tst.w	r4, #7
     432:	d16a      	bne.n	50a <CONFIG_NET_TX_STACK_SIZE+0x5a>
     434:	f000 0407 	and.w	r4, r0, #7
     438:	f020 0007 	bic.w	r0, r0, #7
     43c:	f004 0503 	and.w	r5, r4, #3
     440:	f021 0107 	bic.w	r1, r1, #7
     444:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     448:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     44c:	f014 0f04 	tst.w	r4, #4
     450:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     454:	fa0c f405 	lsl.w	r4, ip, r5
     458:	ea62 0204 	orn	r2, r2, r4
     45c:	ea66 0604 	orn	r6, r6, r4
     460:	d00a      	beq.n	478 <strcmp+0x70>
     462:	ea63 0304 	orn	r3, r3, r4
     466:	4662      	mov	r2, ip
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     468:	ea67 0704 	orn	r7, r7, r4
     46c:	4666      	mov	r6, ip
     46e:	e003      	b.n	478 <strcmp+0x70>
     470:	e8f0 2304 	ldrd	r2, r3, [r0], #16
     474:	e8f1 6704 	ldrd	r6, r7, [r1], #16
     478:	fa82 f54c 	uadd8	r5, r2, ip
     47c:	ea82 0406 	eor.w	r4, r2, r6
     480:	faa4 f48c 	sel	r4, r4, ip
     484:	bb6c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     486:	fa83 f54c 	uadd8	r5, r3, ip
     48a:	ea83 0507 	eor.w	r5, r3, r7
     48e:	faa5 f58c 	sel	r5, r5, ip
     492:	b995      	cbnz	r5, 4ba <CONFIG_NET_TX_STACK_SIZE+0xa>
     494:	e950 2302 	ldrd	r2, r3, [r0, #-8]
     498:	e951 6702 	ldrd	r6, r7, [r1, #-8]
     49c:	fa82 f54c 	uadd8	r5, r2, ip
     4a0:	ea82 0406 	eor.w	r4, r2, r6
     4a4:	faa4 f48c 	sel	r4, r4, ip
     4a8:	fa83 f54c 	uadd8	r5, r3, ip
     4ac:	ea83 0507 	eor.w	r5, r3, r7
     4b0:	faa5 f58c 	sel	r5, r5, ip
     4b4:	4325      	orrs	r5, r4
     4b6:	d0db      	beq.n	470 <strcmp+0x68>
     4b8:	b99c      	cbnz	r4, 4e2 <CONFIG_NET_TX_STACK_SIZE+0x32>
     4ba:	ba2d      	rev	r5, r5
     4bc:	fab5 f485 	clz	r4, r5
     4c0:	f024 0407 	bic.w	r4, r4, #7
     4c4:	fa27 f104 	lsr.w	r1, r7, r4
     4c8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4cc:	fa23 f304 	lsr.w	r3, r3, r4
     4d0:	f003 00ff 	and.w	r0, r3, #255	; 0xff
     4d4:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     4d8:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     4dc:	eba0 0001 	sub.w	r0, r0, r1
     4e0:	4770      	bx	lr
     4e2:	ba24      	rev	r4, r4
     4e4:	fab4 f484 	clz	r4, r4
     4e8:	f024 0407 	bic.w	r4, r4, #7
     4ec:	fa26 f104 	lsr.w	r1, r6, r4
     4f0:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
     4f4:	fa22 f204 	lsr.w	r2, r2, r4
     4f8:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     4fc:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     500:	e8fd 4504 	ldrd	r4, r5, [sp], #16
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     504:	eba0 0001 	sub.w	r0, r0, r1
     508:	4770      	bx	lr
     50a:	f014 0f03 	tst.w	r4, #3
     50e:	d13c      	bne.n	58a <CONFIG_NET_TX_STACK_SIZE+0xda>
     510:	f010 0403 	ands.w	r4, r0, #3
     514:	d128      	bne.n	568 <CONFIG_NET_TX_STACK_SIZE+0xb8>
     516:	f850 2b08 	ldr.w	r2, [r0], #8
     51a:	f851 3b08 	ldr.w	r3, [r1], #8
     51e:	fa82 f54c 	uadd8	r5, r2, ip
     522:	ea82 0503 	eor.w	r5, r2, r3
     526:	faa5 f58c 	sel	r5, r5, ip
     52a:	b95d      	cbnz	r5, 544 <CONFIG_NET_TX_STACK_SIZE+0x94>
     52c:	f850 2c04 	ldr.w	r2, [r0, #-4]
     530:	f851 3c04 	ldr.w	r3, [r1, #-4]
     534:	fa82 f54c 	uadd8	r5, r2, ip
     538:	ea82 0503 	eor.w	r5, r2, r3
     53c:	faa5 f58c 	sel	r5, r5, ip
     540:	2d00      	cmp	r5, #0
     542:	d0e8      	beq.n	516 <CONFIG_NET_TX_STACK_SIZE+0x66>
     544:	ba2d      	rev	r5, r5
     546:	fab5 f485 	clz	r4, r5
     54a:	f024 0407 	bic.w	r4, r4, #7
     54e:	fa23 f104 	lsr.w	r1, r3, r4
     552:	fa22 f204 	lsr.w	r2, r2, r4
     556:	f002 00ff 	and.w	r0, r2, #255	; 0xff
     55a:	f001 01ff 	and.w	r1, r1, #255	; 0xff
     55e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     562:	eba0 0001 	sub.w	r0, r0, r1
     566:	4770      	bx	lr
     568:	ea4f 04c4 	mov.w	r4, r4, lsl #3
     56c:	f020 0003 	bic.w	r0, r0, #3
     570:	f850 2b08 	ldr.w	r2, [r0], #8
     574:	f021 0103 	bic.w	r1, r1, #3
     578:	f851 3b08 	ldr.w	r3, [r1], #8
     57c:	fa0c f404 	lsl.w	r4, ip, r4
     580:	ea62 0204 	orn	r2, r2, r4
     584:	ea63 0304 	orn	r3, r3, r4
     588:	e7c9      	b.n	51e <CONFIG_NET_TX_STACK_SIZE+0x6e>
     58a:	f010 0403 	ands.w	r4, r0, #3
     58e:	d01a      	beq.n	5c6 <CONFIG_NET_TX_STACK_SIZE+0x116>
     590:	eba1 0104 	sub.w	r1, r1, r4
     594:	f020 0003 	bic.w	r0, r0, #3
     598:	07e4      	lsls	r4, r4, #31
     59a:	f850 2b04 	ldr.w	r2, [r0], #4
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     59e:	d006      	beq.n	5ae <CONFIG_NET_TX_STACK_SIZE+0xfe>
     5a0:	d20f      	bcs.n	5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5a2:	788b      	ldrb	r3, [r1, #2]
     5a4:	fa5f f4a2 	uxtb.w	r4, r2, ror #16
     5a8:	1ae4      	subs	r4, r4, r3
     5aa:	d106      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ac:	b12b      	cbz	r3, 5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5ae:	78cb      	ldrb	r3, [r1, #3]
     5b0:	fa5f f4b2 	uxtb.w	r4, r2, ror #24
     5b4:	1ae4      	subs	r4, r4, r3
     5b6:	d100      	bne.n	5ba <CONFIG_NET_TX_STACK_SIZE+0x10a>
     5b8:	b91b      	cbnz	r3, 5c2 <CONFIG_NET_TX_STACK_SIZE+0x112>
     5ba:	4620      	mov	r0, r4
     5bc:	f85d 4b10 	ldr.w	r4, [sp], #16
     5c0:	4770      	bx	lr
     5c2:	f101 0104 	add.w	r1, r1, #4
     5c6:	f850 2b04 	ldr.w	r2, [r0], #4
     5ca:	07cc      	lsls	r4, r1, #31
     5cc:	f021 0103 	bic.w	r1, r1, #3
     5d0:	f851 3b04 	ldr.w	r3, [r1], #4
     5d4:	d848      	bhi.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     5d6:	d224      	bcs.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     5d8:	f022 447f 	bic.w	r4, r2, #4278190080	; 0xff000000
     5dc:	fa82 f54c 	uadd8	r5, r2, ip
     5e0:	ea94 2513 	eors.w	r5, r4, r3, lsr #8
     5e4:	faa5 f58c 	sel	r5, r5, ip
     5e8:	d10a      	bne.n	600 <CONFIG_NET_RX_STACK_SIZE+0x24>
     5ea:	b965      	cbnz	r5, 606 <CONFIG_NET_RX_STACK_SIZE+0x2a>
     5ec:	f851 3b04 	ldr.w	r3, [r1], #4
     5f0:	ea84 0402 	eor.w	r4, r4, r2
     5f4:	ebb4 6f03 	cmp.w	r4, r3, lsl #24
     5f8:	d10e      	bne.n	618 <CONFIG_NET_RX_STACK_SIZE+0x3c>
     5fa:	f850 2b04 	ldr.w	r2, [r0], #4
     5fe:	e7eb      	b.n	5d8 <CONFIG_NET_TX_STACK_SIZE+0x128>
     600:	ea4f 2313 	mov.w	r3, r3, lsr #8
     604:	e055      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     606:	f035 457f 	bics.w	r5, r5, #4278190080	; 0xff000000
     60a:	d14d      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     60c:	7808      	ldrb	r0, [r1, #0]
     60e:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     612:	f1c0 0000 	rsb	r0, r0, #0
     616:	4770      	bx	lr
     618:	ea4f 6212 	mov.w	r2, r2, lsr #24
     61c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
     620:	e047      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     622:	ea02 441c 	and.w	r4, r2, ip, lsr #16
     626:	fa82 f54c 	uadd8	r5, r2, ip
     62a:	ea94 4513 	eors.w	r5, r4, r3, lsr #16
     62e:	faa5 f58c 	sel	r5, r5, ip
     632:	d10a      	bne.n	64a <CONFIG_NET_RX_STACK_SIZE+0x6e>
     634:	b965      	cbnz	r5, 650 <CONFIG_NET_RX_STACK_SIZE+0x74>
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     636:	f851 3b04 	ldr.w	r3, [r1], #4
     63a:	ea84 0402 	eor.w	r4, r4, r2
     63e:	ebb4 4f03 	cmp.w	r4, r3, lsl #16
     642:	d10c      	bne.n	65e <CONFIG_NET_RX_STACK_SIZE+0x82>
     644:	f850 2b04 	ldr.w	r2, [r0], #4
     648:	e7eb      	b.n	622 <CONFIG_NET_RX_STACK_SIZE+0x46>
     64a:	ea4f 4313 	mov.w	r3, r3, lsr #16
     64e:	e030      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     650:	ea15 451c 	ands.w	r5, r5, ip, lsr #16
     654:	d128      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     656:	880b      	ldrh	r3, [r1, #0]
     658:	ea4f 4212 	mov.w	r2, r2, lsr #16
     65c:	e029      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     65e:	ea4f 4212 	mov.w	r2, r2, lsr #16
     662:	ea03 431c 	and.w	r3, r3, ip, lsr #16
     666:	e024      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     668:	f002 04ff 	and.w	r4, r2, #255	; 0xff
     66c:	fa82 f54c 	uadd8	r5, r2, ip
     670:	ea94 6513 	eors.w	r5, r4, r3, lsr #24
     674:	faa5 f58c 	sel	r5, r5, ip
     678:	d10a      	bne.n	690 <CONFIG_NET_RX_STACK_SIZE+0xb4>
     67a:	b965      	cbnz	r5, 696 <CONFIG_NET_RX_STACK_SIZE+0xba>
     67c:	f851 3b04 	ldr.w	r3, [r1], #4
     680:	ea84 0402 	eor.w	r4, r4, r2
     684:	ebb4 2f03 	cmp.w	r4, r3, lsl #8
     688:	d109      	bne.n	69e <CONFIG_NET_RX_STACK_SIZE+0xc2>
     68a:	f850 2b04 	ldr.w	r2, [r0], #4
     68e:	e7eb      	b.n	668 <CONFIG_NET_RX_STACK_SIZE+0x8c>
     690:	ea4f 6313 	mov.w	r3, r3, lsr #24
     694:	e00d      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     696:	f015 0fff 	tst.w	r5, #255	; 0xff
     69a:	d105      	bne.n	6a8 <CONFIG_NET_RX_STACK_SIZE+0xcc>
     69c:	680b      	ldr	r3, [r1, #0]
     69e:	ea4f 2212 	mov.w	r2, r2, lsr #8
     6a2:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
     6a6:	e004      	b.n	6b2 <CONFIG_NET_RX_STACK_SIZE+0xd6>
     6a8:	f04f 0000 	mov.w	r0, #0
     6ac:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6b0:	4770      	bx	lr
     6b2:	ba12      	rev	r2, r2
     6b4:	ba1b      	rev	r3, r3
     6b6:	fa82 f44c 	uadd8	r4, r2, ip
     6ba:	ea82 0403 	eor.w	r4, r2, r3
     6be:	faa4 f58c 	sel	r5, r4, ip
     6c2:	fab5 f485 	clz	r4, r5
     6c6:	fa02 f204 	lsl.w	r2, r2, r4
     6ca:	fa03 f304 	lsl.w	r3, r3, r4
     6ce:	ea4f 6012 	mov.w	r0, r2, lsr #24
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     6d2:	e8fd 4504 	ldrd	r4, r5, [sp], #16
     6d6:	eba0 6013 	sub.w	r0, r0, r3, lsr #24
     6da:	4770      	bx	lr
	...

00000700 <strlen>:
     700:	f890 f000 	pld	[r0]
     704:	e96d 4502 	strd	r4, r5, [sp, #-8]!
     708:	f020 0107 	bic.w	r1, r0, #7
     70c:	f06f 0c00 	mvn.w	ip, #0
     710:	f010 0407 	ands.w	r4, r0, #7
     714:	f891 f020 	pld	[r1, #32]
     718:	f040 8049 	bne.w	7ae <strlen+0xae>
     71c:	f04f 0400 	mov.w	r4, #0
     720:	f06f 0007 	mvn.w	r0, #7
     724:	e9d1 2300 	ldrd	r2, r3, [r1]
     728:	f891 f040 	pld	[r1, #64]	; 0x40
     72c:	f100 0008 	add.w	r0, r0, #8
     730:	fa82 f24c 	uadd8	r2, r2, ip
     734:	faa4 f28c 	sel	r2, r4, ip
     738:	fa83 f34c 	uadd8	r3, r3, ip
     73c:	faa2 f38c 	sel	r3, r2, ip
     740:	bb4b      	cbnz	r3, 796 <strlen+0x96>
     742:	e9d1 2302 	ldrd	r2, r3, [r1, #8]
     746:	fa82 f24c 	uadd8	r2, r2, ip
     74a:	f100 0008 	add.w	r0, r0, #8
     74e:	faa4 f28c 	sel	r2, r4, ip
     752:	fa83 f34c 	uadd8	r3, r3, ip
     756:	faa2 f38c 	sel	r3, r2, ip
     75a:	b9e3      	cbnz	r3, 796 <strlen+0x96>
     75c:	e9d1 2304 	ldrd	r2, r3, [r1, #16]
     760:	fa82 f24c 	uadd8	r2, r2, ip
     764:	f100 0008 	add.w	r0, r0, #8
     768:	faa4 f28c 	sel	r2, r4, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     76c:	fa83 f34c 	uadd8	r3, r3, ip
     770:	faa2 f38c 	sel	r3, r2, ip
     774:	b97b      	cbnz	r3, 796 <strlen+0x96>
     776:	e9d1 2306 	ldrd	r2, r3, [r1, #24]
     77a:	f101 0120 	add.w	r1, r1, #32
     77e:	fa82 f24c 	uadd8	r2, r2, ip
     782:	f100 0008 	add.w	r0, r0, #8
     786:	faa4 f28c 	sel	r2, r4, ip
     78a:	fa83 f34c 	uadd8	r3, r3, ip
     78e:	faa2 f38c 	sel	r3, r2, ip
     792:	2b00      	cmp	r3, #0
     794:	d0c6      	beq.n	724 <strlen+0x24>
     796:	2a00      	cmp	r2, #0
     798:	bf04      	itt	eq
     79a:	3004      	addeq	r0, #4
     79c:	461a      	moveq	r2, r3
     79e:	ba12      	rev	r2, r2
     7a0:	fab2 f282 	clz	r2, r2
     7a4:	e8fd 4502 	ldrd	r4, r5, [sp], #8
     7a8:	eb00 00d2 	add.w	r0, r0, r2, lsr #3
     7ac:	4770      	bx	lr
     7ae:	e9d1 2300 	ldrd	r2, r3, [r1]
     7b2:	f004 0503 	and.w	r5, r4, #3
     7b6:	f1c4 0000 	rsb	r0, r4, #0
     7ba:	ea4f 05c5 	mov.w	r5, r5, lsl #3
     7be:	f014 0f04 	tst.w	r4, #4
     7c2:	f891 f040 	pld	[r1, #64]	; 0x40
     7c6:	fa0c f505 	lsl.w	r5, ip, r5
     7ca:	ea62 0205 	orn	r2, r2, r5
     7ce:	bf1c      	itt	ne
     7d0:	ea63 0305 	ornne	r3, r3, r5
     7d4:	4662      	movne	r2, ip
     7d6:	f04f 0400 	mov.w	r4, #0
     7da:	e7a9      	b.n	730 <strlen+0x30>

000007dc <__aeabi_uldivmod>:
     7dc:	b953      	cbnz	r3, 7f4 <__aeabi_uldivmod+0x18>
     7de:	b94a      	cbnz	r2, 7f4 <__aeabi_uldivmod+0x18>
     7e0:	2900      	cmp	r1, #0
     7e2:	bf08      	it	eq
     7e4:	2800      	cmpeq	r0, #0
     7e6:	bf1c      	itt	ne
     7e8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
     7ec:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
     7f0:	f000 b98e 	b.w	b10 <__aeabi_idiv0>
     7f4:	f1ad 0c08 	sub.w	ip, sp, #8
     7f8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
     7fc:	f000 f81a 	bl	834 <__udivmoddi4>
     800:	f8dd e004 	ldr.w	lr, [sp, #4]
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     804:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
     808:	b004      	add	sp, #16
     80a:	4770      	bx	lr

0000080c <__popcountsi2>:
     80c:	0843      	lsrs	r3, r0, #1
     80e:	f003 3355 	and.w	r3, r3, #1431655765	; 0x55555555
     812:	1ac0      	subs	r0, r0, r3
     814:	0883      	lsrs	r3, r0, #2
     816:	f003 3333 	and.w	r3, r3, #858993459	; 0x33333333
     81a:	f000 3033 	and.w	r0, r0, #858993459	; 0x33333333
     81e:	4418      	add	r0, r3
     820:	eb00 1010 	add.w	r0, r0, r0, lsr #4
     824:	f000 300f 	and.w	r0, r0, #252645135	; 0xf0f0f0f
     828:	eb00 2000 	add.w	r0, r0, r0, lsl #8
     82c:	eb00 4000 	add.w	r0, r0, r0, lsl #16
     830:	0e00      	lsrs	r0, r0, #24
     832:	4770      	bx	lr

00000834 <__udivmoddi4>:
     834:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
     838:	468c      	mov	ip, r1
     83a:	460d      	mov	r5, r1
     83c:	4604      	mov	r4, r0
     83e:	9e08      	ldr	r6, [sp, #32]
     840:	2b00      	cmp	r3, #0
     842:	d151      	bne.n	8e8 <__udivmoddi4+0xb4>
     844:	428a      	cmp	r2, r1
     846:	4617      	mov	r7, r2
     848:	d96d      	bls.n	926 <__udivmoddi4+0xf2>
     84a:	fab2 fe82 	clz	lr, r2
     84e:	f1be 0f00 	cmp.w	lr, #0
     852:	d00b      	beq.n	86c <__udivmoddi4+0x38>
     854:	f1ce 0c20 	rsb	ip, lr, #32
     858:	fa01 f50e 	lsl.w	r5, r1, lr
     85c:	fa20 fc0c 	lsr.w	ip, r0, ip
     860:	fa02 f70e 	lsl.w	r7, r2, lr
     864:	ea4c 0c05 	orr.w	ip, ip, r5
     868:	fa00 f40e 	lsl.w	r4, r0, lr
     86c:	ea4f 4a17 	mov.w	sl, r7, lsr #16
     870:	0c25      	lsrs	r5, r4, #16
     872:	fbbc f8fa 	udiv	r8, ip, sl
     876:	fa1f f987 	uxth.w	r9, r7
     87a:	fb0a cc18 	mls	ip, sl, r8, ip
     87e:	ea45 450c 	orr.w	r5, r5, ip, lsl #16
     882:	fb08 f309 	mul.w	r3, r8, r9
     886:	42ab      	cmp	r3, r5
     888:	d90a      	bls.n	8a0 <__udivmoddi4+0x6c>
     88a:	19ed      	adds	r5, r5, r7
     88c:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
     890:	f080 8123 	bcs.w	ada <__udivmoddi4+0x2a6>
     894:	42ab      	cmp	r3, r5
     896:	f240 8120 	bls.w	ada <__udivmoddi4+0x2a6>
     89a:	f1a8 0802 	sub.w	r8, r8, #2
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     89e:	443d      	add	r5, r7
     8a0:	1aed      	subs	r5, r5, r3
     8a2:	b2a4      	uxth	r4, r4
     8a4:	fbb5 f0fa 	udiv	r0, r5, sl
     8a8:	fb0a 5510 	mls	r5, sl, r0, r5
     8ac:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
     8b0:	fb00 f909 	mul.w	r9, r0, r9
     8b4:	45a1      	cmp	r9, r4
     8b6:	d909      	bls.n	8cc <__udivmoddi4+0x98>
     8b8:	19e4      	adds	r4, r4, r7
     8ba:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     8be:	f080 810a 	bcs.w	ad6 <__udivmoddi4+0x2a2>
     8c2:	45a1      	cmp	r9, r4
     8c4:	f240 8107 	bls.w	ad6 <__udivmoddi4+0x2a2>
     8c8:	3802      	subs	r0, #2
     8ca:	443c      	add	r4, r7
     8cc:	eba4 0409 	sub.w	r4, r4, r9
     8d0:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     8d4:	2100      	movs	r1, #0
     8d6:	2e00      	cmp	r6, #0
     8d8:	d061      	beq.n	99e <__udivmoddi4+0x16a>
     8da:	fa24 f40e 	lsr.w	r4, r4, lr
     8de:	2300      	movs	r3, #0
     8e0:	6034      	str	r4, [r6, #0]
     8e2:	6073      	str	r3, [r6, #4]
     8e4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8e8:	428b      	cmp	r3, r1
     8ea:	d907      	bls.n	8fc <__udivmoddi4+0xc8>
     8ec:	2e00      	cmp	r6, #0
     8ee:	d054      	beq.n	99a <__udivmoddi4+0x166>
     8f0:	2100      	movs	r1, #0
     8f2:	e886 0021 	stmia.w	r6, {r0, r5}
     8f6:	4608      	mov	r0, r1
     8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     8fc:	fab3 f183 	clz	r1, r3
     900:	2900      	cmp	r1, #0
     902:	f040 808e 	bne.w	a22 <__udivmoddi4+0x1ee>
     906:	42ab      	cmp	r3, r5
     908:	d302      	bcc.n	910 <__udivmoddi4+0xdc>
     90a:	4282      	cmp	r2, r0
     90c:	f200 80fa 	bhi.w	b04 <__udivmoddi4+0x2d0>
     910:	1a84      	subs	r4, r0, r2
     912:	eb65 0503 	sbc.w	r5, r5, r3
     916:	2001      	movs	r0, #1
     918:	46ac      	mov	ip, r5
     91a:	2e00      	cmp	r6, #0
     91c:	d03f      	beq.n	99e <__udivmoddi4+0x16a>
     91e:	e886 1010 	stmia.w	r6, {r4, ip}
     922:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     926:	b912      	cbnz	r2, 92e <__udivmoddi4+0xfa>
     928:	2701      	movs	r7, #1
     92a:	fbb7 f7f2 	udiv	r7, r7, r2
     92e:	fab7 fe87 	clz	lr, r7
     932:	f1be 0f00 	cmp.w	lr, #0
     936:	d134      	bne.n	9a2 <__udivmoddi4+0x16e>
	out[0] = multe(in[0]) ^ multb(in[1]) ^ multd(in[2]) ^ mult9(in[3]);
     938:	1beb      	subs	r3, r5, r7
     93a:	0c3a      	lsrs	r2, r7, #16
     93c:	fa1f fc87 	uxth.w	ip, r7
     940:	2101      	movs	r1, #1
     942:	fbb3 f8f2 	udiv	r8, r3, r2
     946:	0c25      	lsrs	r5, r4, #16
     948:	fb02 3318 	mls	r3, r2, r8, r3
     94c:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     950:	fb0c f308 	mul.w	r3, ip, r8
     954:	42ab      	cmp	r3, r5
     956:	d907      	bls.n	968 <__udivmoddi4+0x134>
     958:	19ed      	adds	r5, r5, r7
     95a:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
     95e:	d202      	bcs.n	966 <__udivmoddi4+0x132>
     960:	42ab      	cmp	r3, r5
     962:	f200 80d1 	bhi.w	b08 <__udivmoddi4+0x2d4>
     966:	4680      	mov	r8, r0
     968:	1aed      	subs	r5, r5, r3
     96a:	b2a3      	uxth	r3, r4
     96c:	fbb5 f0f2 	udiv	r0, r5, r2
     970:	fb02 5510 	mls	r5, r2, r0, r5
     974:	ea43 4405 	orr.w	r4, r3, r5, lsl #16
     978:	fb0c fc00 	mul.w	ip, ip, r0
     97c:	45a4      	cmp	ip, r4
     97e:	d907      	bls.n	990 <__udivmoddi4+0x15c>
     980:	19e4      	adds	r4, r4, r7
     982:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
     986:	d202      	bcs.n	98e <__udivmoddi4+0x15a>
     988:	45a4      	cmp	ip, r4
     98a:	f200 80b8 	bhi.w	afe <__udivmoddi4+0x2ca>
     98e:	4618      	mov	r0, r3
     990:	eba4 040c 	sub.w	r4, r4, ip
     994:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
     998:	e79d      	b.n	8d6 <__udivmoddi4+0xa2>
     99a:	4631      	mov	r1, r6
     99c:	4630      	mov	r0, r6
     99e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     9a2:	f1ce 0420 	rsb	r4, lr, #32
     9a6:	fa05 f30e 	lsl.w	r3, r5, lr
     9aa:	fa07 f70e 	lsl.w	r7, r7, lr
     9ae:	fa20 f804 	lsr.w	r8, r0, r4
     9b2:	0c3a      	lsrs	r2, r7, #16
     9b4:	fa25 f404 	lsr.w	r4, r5, r4
     9b8:	ea48 0803 	orr.w	r8, r8, r3
     9bc:	fbb4 f1f2 	udiv	r1, r4, r2
     9c0:	ea4f 4518 	mov.w	r5, r8, lsr #16
     9c4:	fb02 4411 	mls	r4, r2, r1, r4
     9c8:	fa1f fc87 	uxth.w	ip, r7
     9cc:	ea45 4504 	orr.w	r5, r5, r4, lsl #16
     9d0:	fb01 f30c 	mul.w	r3, r1, ip
	out[1] = mult9(in[0]) ^ multe(in[1]) ^ multb(in[2]) ^ multd(in[3]);
     9d4:	42ab      	cmp	r3, r5
     9d6:	fa00 f40e 	lsl.w	r4, r0, lr
     9da:	d909      	bls.n	9f0 <__udivmoddi4+0x1bc>
     9dc:	19ed      	adds	r5, r5, r7
     9de:	f101 30ff 	add.w	r0, r1, #4294967295	; 0xffffffff
     9e2:	f080 808a 	bcs.w	afa <__udivmoddi4+0x2c6>
     9e6:	42ab      	cmp	r3, r5
     9e8:	f240 8087 	bls.w	afa <__udivmoddi4+0x2c6>
     9ec:	3902      	subs	r1, #2
     9ee:	443d      	add	r5, r7
     9f0:	1aeb      	subs	r3, r5, r3
     9f2:	fa1f f588 	uxth.w	r5, r8
     9f6:	fbb3 f0f2 	udiv	r0, r3, r2
     9fa:	fb02 3310 	mls	r3, r2, r0, r3
     9fe:	ea45 4503 	orr.w	r5, r5, r3, lsl #16
     a02:	fb00 f30c 	mul.w	r3, r0, ip
     a06:	42ab      	cmp	r3, r5
     a08:	d907      	bls.n	a1a <__udivmoddi4+0x1e6>
     a0a:	19ed      	adds	r5, r5, r7
     a0c:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
     a10:	d26f      	bcs.n	af2 <__udivmoddi4+0x2be>
     a12:	42ab      	cmp	r3, r5
     a14:	d96d      	bls.n	af2 <__udivmoddi4+0x2be>
     a16:	3802      	subs	r0, #2
     a18:	443d      	add	r5, r7
     a1a:	1aeb      	subs	r3, r5, r3
     a1c:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
     a20:	e78f      	b.n	942 <__udivmoddi4+0x10e>
     a22:	f1c1 0720 	rsb	r7, r1, #32
     a26:	fa22 f807 	lsr.w	r8, r2, r7
     a2a:	408b      	lsls	r3, r1
     a2c:	fa05 f401 	lsl.w	r4, r5, r1
     a30:	ea48 0303 	orr.w	r3, r8, r3
     a34:	fa20 fe07 	lsr.w	lr, r0, r7
     a38:	ea4f 4c13 	mov.w	ip, r3, lsr #16
     a3c:	40fd      	lsrs	r5, r7
     a3e:	ea4e 0e04 	orr.w	lr, lr, r4
     a42:	fbb5 f9fc 	udiv	r9, r5, ip
     a46:	ea4f 441e 	mov.w	r4, lr, lsr #16
     a4a:	fb0c 5519 	mls	r5, ip, r9, r5
     a4e:	fa1f f883 	uxth.w	r8, r3
     a52:	ea44 4505 	orr.w	r5, r4, r5, lsl #16
     a56:	fb09 f408 	mul.w	r4, r9, r8
     a5a:	42ac      	cmp	r4, r5
     a5c:	fa02 f201 	lsl.w	r2, r2, r1
     a60:	fa00 fa01 	lsl.w	sl, r0, r1
     a64:	d908      	bls.n	a78 <__udivmoddi4+0x244>
     a66:	18ed      	adds	r5, r5, r3
     a68:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
	out[2] = multd(in[0]) ^ mult9(in[1]) ^ multe(in[2]) ^ multb(in[3]);
     a6c:	d243      	bcs.n	af6 <__udivmoddi4+0x2c2>
     a6e:	42ac      	cmp	r4, r5
     a70:	d941      	bls.n	af6 <__udivmoddi4+0x2c2>
     a72:	f1a9 0902 	sub.w	r9, r9, #2
     a76:	441d      	add	r5, r3
     a78:	1b2d      	subs	r5, r5, r4
     a7a:	fa1f fe8e 	uxth.w	lr, lr
     a7e:	fbb5 f0fc 	udiv	r0, r5, ip
     a82:	fb0c 5510 	mls	r5, ip, r0, r5
     a86:	ea4e 4405 	orr.w	r4, lr, r5, lsl #16
     a8a:	fb00 f808 	mul.w	r8, r0, r8
     a8e:	45a0      	cmp	r8, r4
     a90:	d907      	bls.n	aa2 <__udivmoddi4+0x26e>
     a92:	18e4      	adds	r4, r4, r3
     a94:	f100 35ff 	add.w	r5, r0, #4294967295	; 0xffffffff
     a98:	d229      	bcs.n	aee <__udivmoddi4+0x2ba>
     a9a:	45a0      	cmp	r8, r4
     a9c:	d927      	bls.n	aee <__udivmoddi4+0x2ba>
     a9e:	3802      	subs	r0, #2
     aa0:	441c      	add	r4, r3
     aa2:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
     aa6:	eba4 0408 	sub.w	r4, r4, r8
     aaa:	fba0 8902 	umull	r8, r9, r0, r2
     aae:	454c      	cmp	r4, r9
     ab0:	46c6      	mov	lr, r8
     ab2:	464d      	mov	r5, r9
     ab4:	d315      	bcc.n	ae2 <__udivmoddi4+0x2ae>
     ab6:	d012      	beq.n	ade <__udivmoddi4+0x2aa>
     ab8:	b156      	cbz	r6, ad0 <__udivmoddi4+0x29c>
     aba:	ebba 030e 	subs.w	r3, sl, lr
     abe:	eb64 0405 	sbc.w	r4, r4, r5
     ac2:	fa04 f707 	lsl.w	r7, r4, r7
     ac6:	40cb      	lsrs	r3, r1
     ac8:	431f      	orrs	r7, r3
     aca:	40cc      	lsrs	r4, r1
     acc:	6037      	str	r7, [r6, #0]
     ace:	6074      	str	r4, [r6, #4]
     ad0:	2100      	movs	r1, #0
     ad2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
     ad6:	4618      	mov	r0, r3
     ad8:	e6f8      	b.n	8cc <__udivmoddi4+0x98>
     ada:	4690      	mov	r8, r2
     adc:	e6e0      	b.n	8a0 <__udivmoddi4+0x6c>
     ade:	45c2      	cmp	sl, r8
     ae0:	d2ea      	bcs.n	ab8 <__udivmoddi4+0x284>
     ae2:	ebb8 0e02 	subs.w	lr, r8, r2
     ae6:	eb69 0503 	sbc.w	r5, r9, r3
     aea:	3801      	subs	r0, #1
     aec:	e7e4      	b.n	ab8 <__udivmoddi4+0x284>
     aee:	4628      	mov	r0, r5
     af0:	e7d7      	b.n	aa2 <__udivmoddi4+0x26e>
     af2:	4640      	mov	r0, r8
     af4:	e791      	b.n	a1a <__udivmoddi4+0x1e6>
     af6:	4681      	mov	r9, r0
     af8:	e7be      	b.n	a78 <__udivmoddi4+0x244>
     afa:	4601      	mov	r1, r0
     afc:	e778      	b.n	9f0 <__udivmoddi4+0x1bc>
     afe:	3802      	subs	r0, #2
     b00:	443c      	add	r4, r7
     b02:	e745      	b.n	990 <__udivmoddi4+0x15c>
     b04:	4608      	mov	r0, r1
	out[3] = multb(in[0]) ^ multd(in[1]) ^ mult9(in[2]) ^ multe(in[3]);
     b06:	e708      	b.n	91a <__udivmoddi4+0xe6>
     b08:	f1a8 0802 	sub.w	r8, r8, #2
     b0c:	443d      	add	r5, r7
     b0e:	e72b      	b.n	968 <__udivmoddi4+0x134>

00000b10 <__aeabi_idiv0>:
     b10:	4770      	bx	lr
     b12:	bf00      	nop

00000b14 <publish_cb>:
	printk("\n");
}

static int publish_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_id,
		      enum mqtt_packet type)
{
     b14:	b530      	push	{r4, r5, lr}
     b16:	b083      	sub	sp, #12
     b18:	4605      	mov	r5, r0
	const char *str;
	int rc = 0;

	client_ctx = CONTAINER_OF(mqtt_ctx, struct mqtt_client_ctx, mqtt_ctx);

	switch (type) {
     b1a:	2a05      	cmp	r2, #5
     b1c:	d01b      	beq.n	b56 <publish_cb+0x42>
     b1e:	2a07      	cmp	r2, #7
     b20:	d01c      	beq.n	b5c <publish_cb+0x48>
     b22:	2a04      	cmp	r2, #4
     b24:	d003      	beq.n	b2e <publish_cb+0x1a>
		break;
	case MQTT_PUBREC:
		str = "MQTT_PUBREC";
		break;
	default:
		rc = -EINVAL;
     b26:	f06f 0415 	mvn.w	r4, #21
		str = "Invalid MQTT packet";
     b2a:	4b0e      	ldr	r3, [pc, #56]	; (b64 <publish_cb+0x50>)
     b2c:	e001      	b.n	b32 <publish_cb+0x1e>
	int rc = 0;
     b2e:	2400      	movs	r4, #0
		str = "MQTT_PUBACK";
     b30:	4b0d      	ldr	r3, [pc, #52]	; (b68 <publish_cb+0x54>)
	}

	printk("[%s:%d] <%s> packet id: %u", __func__, __LINE__, str, pkt_id);
     b32:	9100      	str	r1, [sp, #0]
     b34:	22e7      	movs	r2, #231	; 0xe7
     b36:	490d      	ldr	r1, [pc, #52]	; (b6c <publish_cb+0x58>)
     b38:	480d      	ldr	r0, [pc, #52]	; (b70 <publish_cb+0x5c>)
     b3a:	f001 fd5b 	bl	25f4 <printk>

	if (client_ctx->publish_data) {
     b3e:	f8d5 10b4 	ldr.w	r1, [r5, #180]	; 0xb4
     b42:	b111      	cbz	r1, b4a <publish_cb+0x36>
		printk(", user_data: %s",
     b44:	480b      	ldr	r0, [pc, #44]	; (b74 <publish_cb+0x60>)
     b46:	f001 fd55 	bl	25f4 <printk>
		       (const char *)client_ctx->publish_data);
	}

	printk("\n");
     b4a:	480b      	ldr	r0, [pc, #44]	; (b78 <publish_cb+0x64>)
     b4c:	f001 fd52 	bl	25f4 <printk>

	return rc;
}
     b50:	4620      	mov	r0, r4
     b52:	b003      	add	sp, #12
     b54:	bd30      	pop	{r4, r5, pc}
	int rc = 0;
     b56:	2400      	movs	r4, #0
		str = "MQTT_PUBREC";
     b58:	4b08      	ldr	r3, [pc, #32]	; (b7c <publish_cb+0x68>)
		break;
     b5a:	e7ea      	b.n	b32 <publish_cb+0x1e>
	int rc = 0;
     b5c:	2400      	movs	r4, #0
		str = "MQTT_PUBCOMP";
     b5e:	4b08      	ldr	r3, [pc, #32]	; (b80 <publish_cb+0x6c>)
     b60:	e7e7      	b.n	b32 <publish_cb+0x1e>
     b62:	bf00      	nop
     b64:	0002a7b4 	.word	0x0002a7b4
     b68:	0002a78c 	.word	0x0002a78c
     b6c:	0002a6b0 	.word	0x0002a6b0
     b70:	0002a7c8 	.word	0x0002a7c8
     b74:	0002a7e4 	.word	0x0002a7e4
     b78:	0002e278 	.word	0x0002e278
     b7c:	0002a7a8 	.word	0x0002a7a8
     b80:	0002a798 	.word	0x0002a798

00000b84 <malformed_cb>:

static void malformed_cb(struct mqtt_ctx *mqtt_ctx, u16_t pkt_type)
{
     b84:	b508      	push	{r3, lr}
	printk("[%s:%d] pkt_type: %u\n", __func__, __LINE__, pkt_type);
     b86:	460b      	mov	r3, r1
     b88:	22f5      	movs	r2, #245	; 0xf5
     b8a:	4902      	ldr	r1, [pc, #8]	; (b94 <malformed_cb+0x10>)
     b8c:	4802      	ldr	r0, [pc, #8]	; (b98 <malformed_cb+0x14>)
     b8e:	f001 fd31 	bl	25f4 <printk>
     b92:	bd08      	pop	{r3, pc}
     b94:	0002a6bc 	.word	0x0002a6bc
     b98:	0002a71c 	.word	0x0002a71c

00000b9c <disconnect_cb>:
{
     b9c:	b510      	push	{r4, lr}
     b9e:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
     ba0:	22c5      	movs	r2, #197	; 0xc5
     ba2:	4907      	ldr	r1, [pc, #28]	; (bc0 <disconnect_cb+0x24>)
     ba4:	4807      	ldr	r0, [pc, #28]	; (bc4 <disconnect_cb+0x28>)
     ba6:	f001 fd25 	bl	25f4 <printk>
	if (client_ctx->disconnect_data) {
     baa:	f8d4 10b0 	ldr.w	r1, [r4, #176]	; 0xb0
     bae:	b111      	cbz	r1, bb6 <disconnect_cb+0x1a>
		printk(" user_data: %s",
     bb0:	4805      	ldr	r0, [pc, #20]	; (bc8 <disconnect_cb+0x2c>)
     bb2:	f001 fd1f 	bl	25f4 <printk>
	printk("\n");
     bb6:	4805      	ldr	r0, [pc, #20]	; (bcc <disconnect_cb+0x30>)
     bb8:	f001 fd1c 	bl	25f4 <printk>
     bbc:	bd10      	pop	{r4, pc}
     bbe:	bf00      	nop
     bc0:	0002a6a0 	.word	0x0002a6a0
     bc4:	0002a6e0 	.word	0x0002a6e0
     bc8:	0002a6e8 	.word	0x0002a6e8
     bcc:	0002e278 	.word	0x0002e278

00000bd0 <connect_cb>:
{
     bd0:	b510      	push	{r4, lr}
     bd2:	4604      	mov	r4, r0
	printk("[%s:%d]", __func__, __LINE__);
     bd4:	22b5      	movs	r2, #181	; 0xb5
     bd6:	4907      	ldr	r1, [pc, #28]	; (bf4 <connect_cb+0x24>)
     bd8:	4807      	ldr	r0, [pc, #28]	; (bf8 <connect_cb+0x28>)
     bda:	f001 fd0b 	bl	25f4 <printk>
	if (client_ctx->connect_data) {
     bde:	f8d4 10ac 	ldr.w	r1, [r4, #172]	; 0xac
     be2:	b111      	cbz	r1, bea <connect_cb+0x1a>
		printk(" user_data: %s",
     be4:	4805      	ldr	r0, [pc, #20]	; (bfc <connect_cb+0x2c>)
     be6:	f001 fd05 	bl	25f4 <printk>
	printk("\n");
     bea:	4805      	ldr	r0, [pc, #20]	; (c00 <connect_cb+0x30>)
     bec:	f001 fd02 	bl	25f4 <printk>
     bf0:	bd10      	pop	{r4, pc}
     bf2:	bf00      	nop
     bf4:	0002a694 	.word	0x0002a694
     bf8:	0002a6e0 	.word	0x0002a6e0
     bfc:	0002a6e8 	.word	0x0002a6e8
     c00:	0002e278 	.word	0x0002e278

00000c04 <rand_string>:
{
     c04:	b570      	push	{r4, r5, r6, lr}
     c06:	4606      	mov	r6, r0
    if (size) {
     c08:	b159      	cbz	r1, c22 <rand_string+0x1e>
        --size;
     c0a:	1e4d      	subs	r5, r1, #1
        for (size_t n = 0; n < size; n++) {
     c0c:	2400      	movs	r4, #0
     c0e:	e004      	b.n	c1a <rand_string+0x16>
            int key = rand() % (int) (sizeof charset - 1);
     c10:	f028 ff10 	bl	29a34 <rand>
            str[n] = 'a';//charset[key];
     c14:	2361      	movs	r3, #97	; 0x61
     c16:	5533      	strb	r3, [r6, r4]
        for (size_t n = 0; n < size; n++) {
     c18:	3401      	adds	r4, #1
     c1a:	42ac      	cmp	r4, r5
     c1c:	d3f8      	bcc.n	c10 <rand_string+0xc>
        str[size] = '\0';
     c1e:	2300      	movs	r3, #0
     c20:	5573      	strb	r3, [r6, r5]
}
     c22:	4630      	mov	r0, r6
     c24:	bd70      	pop	{r4, r5, r6, pc}
	...

00000c28 <encrypt_aes_ctr>:
static void encrypt_aes_ctr(unsigned char *encrypted_msg, unsigned char* nonce_counter) {
     c28:	b530      	push	{r4, r5, lr}
     c2a:	b0d1      	sub	sp, #324	; 0x144
     c2c:	4605      	mov	r5, r0
     c2e:	460c      	mov	r4, r1
    size_t nc_offset = 0;
     c30:	2300      	movs	r3, #0
     c32:	934f      	str	r3, [sp, #316]	; 0x13c
    rand_string(nonce_counter, sizeof(nonce_counter));
     c34:	2104      	movs	r1, #4
     c36:	4620      	mov	r0, r4
     c38:	f7ff ffe4 	bl	c04 <rand_string>
    printk("\nnonce:%s\n", nonce_counter);
     c3c:	4621      	mov	r1, r4
     c3e:	4811      	ldr	r0, [pc, #68]	; (c84 <encrypt_aes_ctr+0x5c>)
     c40:	f001 fcd8 	bl	25f4 <printk>
    mbedtls_aes_init( &ctr );
     c44:	a805      	add	r0, sp, #20
     c46:	f002 fad4 	bl	31f2 <mbedtls_aes_init>
	mbedtls_aes_setkey_enc( &ctr, keys[2], 256 );
     c4a:	f44f 7280 	mov.w	r2, #256	; 0x100
     c4e:	4b0e      	ldr	r3, [pc, #56]	; (c88 <encrypt_aes_ctr+0x60>)
     c50:	6899      	ldr	r1, [r3, #8]
     c52:	a805      	add	r0, sp, #20
     c54:	f002 fadc 	bl	3210 <mbedtls_aes_setkey_enc>
	mbedtls_aes_crypt_ctr( &ctr, BUFSIZE, &nc_offset, nonce_counter, stream_block, UNENCRYPTED_MSG, encrypted_msg );
     c58:	9502      	str	r5, [sp, #8]
     c5a:	4b0c      	ldr	r3, [pc, #48]	; (c8c <encrypt_aes_ctr+0x64>)
     c5c:	9301      	str	r3, [sp, #4]
     c5e:	ab4b      	add	r3, sp, #300	; 0x12c
     c60:	9300      	str	r3, [sp, #0]
     c62:	4623      	mov	r3, r4
     c64:	aa4f      	add	r2, sp, #316	; 0x13c
     c66:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
     c6a:	a805      	add	r0, sp, #20
     c6c:	f002 ff82 	bl	3b74 <mbedtls_aes_crypt_ctr>
	mbedtls_aes_free( &ctr );
     c70:	a805      	add	r0, sp, #20
     c72:	f002 fac5 	bl	3200 <mbedtls_aes_free>
	memset(encrypted_msg, "s", 100);
     c76:	2264      	movs	r2, #100	; 0x64
     c78:	4905      	ldr	r1, [pc, #20]	; (c90 <encrypt_aes_ctr+0x68>)
     c7a:	4628      	mov	r0, r5
     c7c:	f028 fe8c 	bl	29998 <memset>
}
     c80:	b051      	add	sp, #324	; 0x144
     c82:	bd30      	pop	{r4, r5, pc}
     c84:	0002a6f8 	.word	0x0002a6f8
     c88:	2000b8a0 	.word	0x2000b8a0
     c8c:	0002a704 	.word	0x0002a704
     c90:	0002daac 	.word	0x0002daac

00000c94 <prepare_msg>:
}

static void prepare_msg(struct mqtt_publish_msg *pub_msg, enum mqtt_qos qos, unsigned char* msg_to_send)
{
     c94:	b538      	push	{r3, r4, r5, lr}
     c96:	4604      	mov	r4, r0
     c98:	460d      	mov	r5, r1
	//printk("\nsending:%s\n", msg_to_send);
	/* MQTT message payload may be anything, we we use C strings */
	pub_msg->msg = msg_to_send;
     c9a:	6102      	str	r2, [r0, #16]
	/* Payload's length */
	pub_msg->msg_len = strlen(pub_msg->msg);
     c9c:	4610      	mov	r0, r2
     c9e:	f7ff fd2f 	bl	700 <strlen>
     ca2:	82a0      	strh	r0, [r4, #20]
	/* MQTT Quality of Service */
	pub_msg->qos = qos;
     ca4:	7065      	strb	r5, [r4, #1]
	/* Message's topic */
	pub_msg->topic = TOPIC;
     ca6:	4804      	ldr	r0, [pc, #16]	; (cb8 <prepare_msg+0x24>)
     ca8:	60a0      	str	r0, [r4, #8]
	pub_msg->topic_len = strlen(pub_msg->topic);
     caa:	f7ff fd29 	bl	700 <strlen>
     cae:	81a0      	strh	r0, [r4, #12]
	/* Packet Identifier, always use different values */
	pub_msg->pkt_id = sys_rand32_get();
     cb0:	f000 fd06 	bl	16c0 <sys_rand32_get>
     cb4:	80a0      	strh	r0, [r4, #4]
     cb6:	bd38      	pop	{r3, r4, r5, pc}
     cb8:	0002a884 	.word	0x0002a884

00000cbc <message_thread>:
{
     cbc:	b570      	push	{r4, r5, r6, lr}
     cbe:	b082      	sub	sp, #8
     cc0:	e00e      	b.n	ce0 <message_thread+0x24>
			PRINT_RESULT("mqtt_tx_publish", rc);
     cc2:	4a20      	ldr	r2, [pc, #128]	; (d44 <message_thread+0x88>)
     cc4:	9201      	str	r2, [sp, #4]
     cc6:	9300      	str	r3, [sp, #0]
     cc8:	4b1f      	ldr	r3, [pc, #124]	; (d48 <message_thread+0x8c>)
     cca:	2294      	movs	r2, #148	; 0x94
     ccc:	491f      	ldr	r1, [pc, #124]	; (d4c <message_thread+0x90>)
     cce:	4820      	ldr	r0, [pc, #128]	; (d50 <message_thread+0x94>)
     cd0:	f001 fc90 	bl	25f4 <printk>

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_INIT, k_mutex_init, struct k_mutex *, mutex);

K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
     cd4:	481f      	ldr	r0, [pc, #124]	; (d54 <message_thread+0x98>)
     cd6:	f026 fed3 	bl	27a80 <_impl_k_mutex_unlock>

K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);

K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);

K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
     cda:	481f      	ldr	r0, [pc, #124]	; (d58 <message_thread+0x9c>)
     cdc:	f027 fe89 	bl	289f2 <_impl_k_sem_give>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     ce0:	f241 3088 	movw	r0, #5000	; 0x1388
     ce4:	f027 fd46 	bl	28774 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
     ce8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     cec:	4819      	ldr	r0, [pc, #100]	; (d54 <message_thread+0x98>)
     cee:	f026 fe5d 	bl	279ac <_impl_k_mutex_lock>
		encrypt_aes_ctr(encrypted_msg, nonce_counter);
     cf2:	4c1a      	ldr	r4, [pc, #104]	; (d5c <message_thread+0xa0>)
     cf4:	491a      	ldr	r1, [pc, #104]	; (d60 <message_thread+0xa4>)
     cf6:	4620      	mov	r0, r4
     cf8:	f7ff ff96 	bl	c28 <encrypt_aes_ctr>
		size_t msg_size = strlen(encrypted_msg);
     cfc:	4620      	mov	r0, r4
     cfe:	f7ff fcff 	bl	700 <strlen>
	 	printk("\nmsg (%d):%s\n", msg_size, encrypted_msg);
     d02:	4622      	mov	r2, r4
     d04:	4601      	mov	r1, r0
     d06:	4817      	ldr	r0, [pc, #92]	; (d64 <message_thread+0xa8>)
     d08:	f001 fc74 	bl	25f4 <printk>
			strcpy(msg_to_send, encrypted_msg);
     d0c:	4d16      	ldr	r5, [pc, #88]	; (d68 <message_thread+0xac>)
     d0e:	4621      	mov	r1, r4
     d10:	4628      	mov	r0, r5
     d12:	f028 ff43 	bl	29b9c <strcpy>
			printk("\nmsg to send:%s\n", msg_to_send);
     d16:	4629      	mov	r1, r5
     d18:	4814      	ldr	r0, [pc, #80]	; (d6c <message_thread+0xb0>)
     d1a:	f001 fc6b 	bl	25f4 <printk>
			prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0, msg_to_send);
     d1e:	4c14      	ldr	r4, [pc, #80]	; (d70 <message_thread+0xb4>)
     d20:	f104 0630 	add.w	r6, r4, #48	; 0x30
     d24:	462a      	mov	r2, r5
     d26:	2100      	movs	r1, #0
     d28:	4630      	mov	r0, r6
     d2a:	f7ff ffb3 	bl	c94 <prepare_msg>
			int rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
     d2e:	4631      	mov	r1, r6
     d30:	f104 0048 	add.w	r0, r4, #72	; 0x48
     d34:	f024 fd08 	bl	25748 <mqtt_tx_publish>
			PRINT_RESULT("mqtt_tx_publish", rc);
     d38:	4603      	mov	r3, r0
     d3a:	2800      	cmp	r0, #0
     d3c:	d1c1      	bne.n	cc2 <message_thread+0x6>
     d3e:	4a0d      	ldr	r2, [pc, #52]	; (d74 <message_thread+0xb8>)
     d40:	e7c0      	b.n	cc4 <message_thread+0x8>
     d42:	bf00      	nop
     d44:	0002a738 	.word	0x0002a738
     d48:	0002a764 	.word	0x0002a764
     d4c:	0002a684 	.word	0x0002a684
     d50:	0002a774 	.word	0x0002a774
     d54:	2000cd04 	.word	0x2000cd04
     d58:	2000cc90 	.word	0x2000cc90
     d5c:	2000000c 	.word	0x2000000c
     d60:	2000021c 	.word	0x2000021c
     d64:	0002a740 	.word	0x0002a740
     d68:	200001a0 	.word	0x200001a0
     d6c:	0002a750 	.word	0x0002a750
     d70:	2000022c 	.word	0x2000022c
     d74:	0002a734 	.word	0x0002a734

00000d78 <publisher_thread>:

K_THREAD_STACK_DEFINE(pub_stack_area, PUB_STACK_SIZE);
struct k_thread pub_thread;

void publisher_thread(void * unused1, void * unused2, void * unused3)
{
     d78:	b530      	push	{r4, r5, lr}
     d7a:	b083      	sub	sp, #12
	printk("Start publisher thread");
     d7c:	4881      	ldr	r0, [pc, #516]	; (f84 <publisher_thread+0x20c>)
     d7e:	f001 fc39 	bl	25f4 <printk>
	ARG_UNUSED(unused3);

	int i, rc;

	/* Set everything to 0 and later just assign the required fields. */
	memset(&pub_ctx, 0x00, sizeof(pub_ctx));
     d82:	4c81      	ldr	r4, [pc, #516]	; (f88 <publisher_thread+0x210>)
     d84:	f44f 7280 	mov.w	r2, #256	; 0x100
     d88:	2100      	movs	r1, #0
     d8a:	4620      	mov	r0, r4
     d8c:	f028 fe04 	bl	29998 <memset>

	/* connect, disconnect and malformed may be set to NULL */
	pub_ctx.mqtt_ctx.connect = connect_cb;
     d90:	4b7e      	ldr	r3, [pc, #504]	; (f8c <publisher_thread+0x214>)
     d92:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0

	pub_ctx.mqtt_ctx.disconnect = disconnect_cb;
     d96:	4b7e      	ldr	r3, [pc, #504]	; (f90 <publisher_thread+0x218>)
     d98:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
	pub_ctx.mqtt_ctx.malformed = malformed_cb;
     d9c:	4b7d      	ldr	r3, [pc, #500]	; (f94 <publisher_thread+0x21c>)
     d9e:	f8c4 30e8 	str.w	r3, [r4, #232]	; 0xe8

	pub_ctx.mqtt_ctx.net_init_timeout = APP_NET_INIT_TIMEOUT;
     da2:	f242 7310 	movw	r3, #10000	; 0x2710
     da6:	f8c4 30c0 	str.w	r3, [r4, #192]	; 0xc0
	pub_ctx.mqtt_ctx.net_timeout = APP_TX_RX_TIMEOUT;
     daa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
     dae:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4

	pub_ctx.mqtt_ctx.peer_addr_str = SERVER_ADDR;
     db2:	4b79      	ldr	r3, [pc, #484]	; (f98 <publisher_thread+0x220>)
     db4:	f8c4 30c8 	str.w	r3, [r4, #200]	; 0xc8
	pub_ctx.mqtt_ctx.peer_port = SERVER_PORT;
     db8:	f240 735b 	movw	r3, #1883	; 0x75b
     dbc:	f8a4 30cc 	strh.w	r3, [r4, #204]	; 0xcc

	/* Publisher apps TX the MQTT PUBLISH msg */
	pub_ctx.mqtt_ctx.publish_tx = publish_cb;
     dc0:	4b76      	ldr	r3, [pc, #472]	; (f9c <publisher_thread+0x224>)
     dc2:	f8c4 30d8 	str.w	r3, [r4, #216]	; 0xd8
	/* The connect message will be sent to the MQTT server (broker).
	 * If clean_session here is 0, the mqtt_ctx clean_session variable
	 * will be set to 0 also. Please don't do that, set always to 1.
	 * Clean session = 0 is not yet supported.
	 */
	pub_ctx.connect_msg.user_name = TB_ACCESS_TOKEN;
     dc6:	4876      	ldr	r0, [pc, #472]	; (fa0 <publisher_thread+0x228>)
     dc8:	6220      	str	r0, [r4, #32]
	pub_ctx.connect_msg.user_name_len = strlen(TB_ACCESS_TOKEN);
     dca:	f7ff fc99 	bl	700 <strlen>
     dce:	84a0      	strh	r0, [r4, #36]	; 0x24
	pub_ctx.connect_msg.clean_session = 1;
     dd0:	7823      	ldrb	r3, [r4, #0]
     dd2:	f043 0301 	orr.w	r3, r3, #1
     dd6:	7023      	strb	r3, [r4, #0]

	pub_ctx.connect_data = "CONNECTED";
     dd8:	4b72      	ldr	r3, [pc, #456]	; (fa4 <publisher_thread+0x22c>)
     dda:	f8c4 30f4 	str.w	r3, [r4, #244]	; 0xf4
	pub_ctx.disconnect_data = "DISCONNECTED";
     dde:	4b72      	ldr	r3, [pc, #456]	; (fa8 <publisher_thread+0x230>)
     de0:	f8c4 30f8 	str.w	r3, [r4, #248]	; 0xf8
	pub_ctx.publish_data = "PUBLISH";
     de4:	4b71      	ldr	r3, [pc, #452]	; (fac <publisher_thread+0x234>)
     de6:	f8c4 30fc 	str.w	r3, [r4, #252]	; 0xfc

	printk("pub ctx set up\n");
     dea:	4871      	ldr	r0, [pc, #452]	; (fb0 <publisher_thread+0x238>)
     dec:	f001 fc02 	bl	25f4 <printk>

	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
     df0:	e0a1      	b.n	f36 <publisher_thread+0x1be>
		printk("loop\n");
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
		PRINT_RESULT("mqtt_init", rc);
     df2:	4b70      	ldr	r3, [pc, #448]	; (fb4 <publisher_thread+0x23c>)
     df4:	e0b1      	b.n	f5a <publisher_thread+0x1e2>
		}

		i = 0;
		do {
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
			PRINT_RESULT("mqtt_connect", rc);
     df6:	4b6f      	ldr	r3, [pc, #444]	; (fb4 <publisher_thread+0x23c>)
     df8:	9301      	str	r3, [sp, #4]
     dfa:	9400      	str	r4, [sp, #0]
     dfc:	4b6e      	ldr	r3, [pc, #440]	; (fb8 <publisher_thread+0x240>)
     dfe:	f44f 72a2 	mov.w	r2, #324	; 0x144
     e02:	496e      	ldr	r1, [pc, #440]	; (fbc <publisher_thread+0x244>)
     e04:	486e      	ldr	r0, [pc, #440]	; (fc0 <publisher_thread+0x248>)
     e06:	f001 fbf5 	bl	25f4 <printk>
		} while (rc != 0 && i++ < APP_CONN_TRIES);
     e0a:	b15c      	cbz	r4, e24 <publisher_thread+0xac>
     e0c:	1c6b      	adds	r3, r5, #1
     e0e:	2d63      	cmp	r5, #99	; 0x63
     e10:	dc08      	bgt.n	e24 <publisher_thread+0xac>
     e12:	461d      	mov	r5, r3
			rc = mqtt_connect(&pub_ctx.mqtt_ctx);
     e14:	486b      	ldr	r0, [pc, #428]	; (fc4 <publisher_thread+0x24c>)
     e16:	f024 fddd 	bl	259d4 <mqtt_connect>
			PRINT_RESULT("mqtt_connect", rc);
     e1a:	4604      	mov	r4, r0
     e1c:	2800      	cmp	r0, #0
     e1e:	d1ea      	bne.n	df6 <publisher_thread+0x7e>
     e20:	4b69      	ldr	r3, [pc, #420]	; (fc8 <publisher_thread+0x250>)
     e22:	e7e9      	b.n	df8 <publisher_thread+0x80>

		if (rc != 0) {
     e24:	b1cc      	cbz	r4, e5a <publisher_thread+0xe2>
     e26:	e0a4      	b.n	f72 <publisher_thread+0x1fa>
		}

		i = 0;
		do {
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
			PRINT_RESULT("mqtt_tx_connect", rc);
     e28:	4b62      	ldr	r3, [pc, #392]	; (fb4 <publisher_thread+0x23c>)
     e2a:	9301      	str	r3, [sp, #4]
     e2c:	9500      	str	r5, [sp, #0]
     e2e:	4b67      	ldr	r3, [pc, #412]	; (fcc <publisher_thread+0x254>)
     e30:	f44f 72a7 	mov.w	r2, #334	; 0x14e
     e34:	4961      	ldr	r1, [pc, #388]	; (fbc <publisher_thread+0x244>)
     e36:	4862      	ldr	r0, [pc, #392]	; (fc0 <publisher_thread+0x248>)
     e38:	f001 fbdc 	bl	25f4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     e3c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
     e40:	f027 fc98 	bl	28774 <_impl_k_sleep>
			k_sleep(APP_TX_CONN_WAIT_MSECS);
		} while (rc == 0 && i++ < APP_TX_CONN_TRIES && !pub_ctx.mqtt_ctx.connected);
     e44:	b99d      	cbnz	r5, e6e <publisher_thread+0xf6>
     e46:	1c63      	adds	r3, r4, #1
     e48:	2c13      	cmp	r4, #19
     e4a:	dc10      	bgt.n	e6e <publisher_thread+0xf6>
     e4c:	4a4e      	ldr	r2, [pc, #312]	; (f88 <publisher_thread+0x210>)
     e4e:	f892 20f1 	ldrb.w	r2, [r2, #241]	; 0xf1
     e52:	f012 0f02 	tst.w	r2, #2
     e56:	d10a      	bne.n	e6e <publisher_thread+0xf6>
     e58:	461c      	mov	r4, r3
			rc = mqtt_tx_connect(&pub_ctx.mqtt_ctx, &pub_ctx.connect_msg);
     e5a:	484b      	ldr	r0, [pc, #300]	; (f88 <publisher_thread+0x210>)
     e5c:	4601      	mov	r1, r0
     e5e:	3048      	adds	r0, #72	; 0x48
     e60:	f024 fbe6 	bl	25630 <mqtt_tx_connect>
			PRINT_RESULT("mqtt_tx_connect", rc);
     e64:	4605      	mov	r5, r0
     e66:	2800      	cmp	r0, #0
     e68:	d1de      	bne.n	e28 <publisher_thread+0xb0>
     e6a:	4b57      	ldr	r3, [pc, #348]	; (fc8 <publisher_thread+0x250>)
     e6c:	e7dd      	b.n	e2a <publisher_thread+0xb2>

		if (!pub_ctx.mqtt_ctx.connected) {
     e6e:	4b46      	ldr	r3, [pc, #280]	; (f88 <publisher_thread+0x210>)
     e70:	f893 30f1 	ldrb.w	r3, [r3, #241]	; 0xf1
     e74:	f013 0f02 	tst.w	r3, #2
     e78:	d11c      	bne.n	eb4 <publisher_thread+0x13c>
			mqtt_close(&pub_ctx.mqtt_ctx);
     e7a:	4852      	ldr	r0, [pc, #328]	; (fc4 <publisher_thread+0x24c>)
     e7c:	f024 fdf0 	bl	25a60 <mqtt_close>
			goto exit_pub;
     e80:	e077      	b.n	f72 <publisher_thread+0x1fa>
		do {
			bool data_changed = false;
			k_mutex_lock(&pub_data, K_FOREVER);

			if (message_changed) {
				prepare_msg(&pub_ctx.pub_msg, MQTT_QoS0, '\0');
     e82:	2200      	movs	r2, #0
     e84:	4611      	mov	r1, r2
     e86:	4852      	ldr	r0, [pc, #328]	; (fd0 <publisher_thread+0x258>)
     e88:	f7ff ff04 	bl	c94 <prepare_msg>
				message_changed=false;
     e8c:	2200      	movs	r2, #0
     e8e:	4b51      	ldr	r3, [pc, #324]	; (fd4 <publisher_thread+0x25c>)
     e90:	701a      	strb	r2, [r3, #0]
     e92:	e018      	b.n	ec6 <publisher_thread+0x14e>

			k_mutex_unlock(&pub_data);

			if (data_changed) {
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
				PRINT_RESULT("mqtt_tx_publish", rc);
     e94:	4a47      	ldr	r2, [pc, #284]	; (fb4 <publisher_thread+0x23c>)
     e96:	9201      	str	r2, [sp, #4]
     e98:	9300      	str	r3, [sp, #0]
     e9a:	4b4f      	ldr	r3, [pc, #316]	; (fd8 <publisher_thread+0x260>)
     e9c:	f240 1265 	movw	r2, #357	; 0x165
     ea0:	4946      	ldr	r1, [pc, #280]	; (fbc <publisher_thread+0x244>)
     ea2:	4847      	ldr	r0, [pc, #284]	; (fc0 <publisher_thread+0x248>)
     ea4:	f001 fba6 	bl	25f4 <printk>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
     ea8:	f242 7110 	movw	r1, #10000	; 0x2710
     eac:	484b      	ldr	r0, [pc, #300]	; (fdc <publisher_thread+0x264>)
     eae:	f027 fdb3 	bl	28a18 <_impl_k_sem_take>
			}
		} while ((rc = k_sem_take(&pub_sem, APP_CONN_IDLE_TIMEOUT)) == 0);
     eb2:	b9c0      	cbnz	r0, ee6 <publisher_thread+0x16e>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
     eb4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     eb8:	4849      	ldr	r0, [pc, #292]	; (fe0 <publisher_thread+0x268>)
     eba:	f026 fd77 	bl	279ac <_impl_k_mutex_lock>
			if (message_changed) {
     ebe:	4b45      	ldr	r3, [pc, #276]	; (fd4 <publisher_thread+0x25c>)
     ec0:	781c      	ldrb	r4, [r3, #0]
     ec2:	2c00      	cmp	r4, #0
     ec4:	d1dd      	bne.n	e82 <publisher_thread+0x10a>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
     ec6:	4846      	ldr	r0, [pc, #280]	; (fe0 <publisher_thread+0x268>)
     ec8:	f026 fdda 	bl	27a80 <_impl_k_mutex_unlock>
			if (data_changed) {
     ecc:	2c00      	cmp	r4, #0
     ece:	d0eb      	beq.n	ea8 <publisher_thread+0x130>
				rc = mqtt_tx_publish(&pub_ctx.mqtt_ctx, &pub_ctx.pub_msg);
     ed0:	482d      	ldr	r0, [pc, #180]	; (f88 <publisher_thread+0x210>)
     ed2:	f100 0130 	add.w	r1, r0, #48	; 0x30
     ed6:	3048      	adds	r0, #72	; 0x48
     ed8:	f024 fc36 	bl	25748 <mqtt_tx_publish>
				PRINT_RESULT("mqtt_tx_publish", rc);
     edc:	4603      	mov	r3, r0
     ede:	2800      	cmp	r0, #0
     ee0:	d1d8      	bne.n	e94 <publisher_thread+0x11c>
     ee2:	4a39      	ldr	r2, [pc, #228]	; (fc8 <publisher_thread+0x250>)
     ee4:	e7d7      	b.n	e96 <publisher_thread+0x11e>

		rc = mqtt_tx_disconnect(&pub_ctx.mqtt_ctx);
     ee6:	4837      	ldr	r0, [pc, #220]	; (fc4 <publisher_thread+0x24c>)
     ee8:	f024 fbe4 	bl	256b4 <mqtt_tx_disconnect>
		PRINT_RESULT("mqtt_tx_disconnect", rc);
     eec:	4603      	mov	r3, r0
     eee:	2800      	cmp	r0, #0
     ef0:	d144      	bne.n	f7c <publisher_thread+0x204>
     ef2:	4a35      	ldr	r2, [pc, #212]	; (fc8 <publisher_thread+0x250>)
     ef4:	9201      	str	r2, [sp, #4]
     ef6:	9300      	str	r3, [sp, #0]
     ef8:	4b3a      	ldr	r3, [pc, #232]	; (fe4 <publisher_thread+0x26c>)
     efa:	f44f 72b5 	mov.w	r2, #362	; 0x16a
     efe:	492f      	ldr	r1, [pc, #188]	; (fbc <publisher_thread+0x244>)
     f00:	482f      	ldr	r0, [pc, #188]	; (fc0 <publisher_thread+0x248>)
     f02:	f001 fb77 	bl	25f4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SLEEP, k_sleep, s32_t, duration);
     f06:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f0a:	f027 fc33 	bl	28774 <_impl_k_sleep>

		k_sleep(APP_TX_RX_TIMEOUT);

		rc = mqtt_close(&pub_ctx.mqtt_ctx);
     f0e:	482d      	ldr	r0, [pc, #180]	; (fc4 <publisher_thread+0x24c>)
     f10:	f024 fda6 	bl	25a60 <mqtt_close>
		PRINT_RESULT("mqtt_close", rc);
     f14:	4603      	mov	r3, r0
     f16:	2800      	cmp	r0, #0
     f18:	d132      	bne.n	f80 <publisher_thread+0x208>
     f1a:	4a2b      	ldr	r2, [pc, #172]	; (fc8 <publisher_thread+0x250>)
     f1c:	9201      	str	r2, [sp, #4]
     f1e:	9300      	str	r3, [sp, #0]
     f20:	4b31      	ldr	r3, [pc, #196]	; (fe8 <publisher_thread+0x270>)
     f22:	f240 126f 	movw	r2, #367	; 0x16f
     f26:	4925      	ldr	r1, [pc, #148]	; (fbc <publisher_thread+0x244>)
     f28:	4825      	ldr	r0, [pc, #148]	; (fc0 <publisher_thread+0x248>)
     f2a:	f001 fb63 	bl	25f4 <printk>
     f2e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
     f32:	f027 fc1f 	bl	28774 <_impl_k_sleep>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
     f36:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
     f3a:	4828      	ldr	r0, [pc, #160]	; (fdc <publisher_thread+0x264>)
     f3c:	f027 fd6c 	bl	28a18 <_impl_k_sem_take>
	while ((rc = k_sem_take(&pub_sem, K_FOREVER)) == 0) {
     f40:	b9b8      	cbnz	r0, f72 <publisher_thread+0x1fa>
		printk("loop\n");
     f42:	482a      	ldr	r0, [pc, #168]	; (fec <publisher_thread+0x274>)
     f44:	f001 fb56 	bl	25f4 <printk>
		rc = mqtt_init(&pub_ctx.mqtt_ctx, MQTT_APP_PUBLISHER);
     f48:	2101      	movs	r1, #1
     f4a:	481e      	ldr	r0, [pc, #120]	; (fc4 <publisher_thread+0x24c>)
     f4c:	f024 fd76 	bl	25a3c <mqtt_init>
		PRINT_RESULT("mqtt_init", rc);
     f50:	4605      	mov	r5, r0
     f52:	2800      	cmp	r0, #0
     f54:	f47f af4d 	bne.w	df2 <publisher_thread+0x7a>
     f58:	4b1b      	ldr	r3, [pc, #108]	; (fc8 <publisher_thread+0x250>)
     f5a:	9301      	str	r3, [sp, #4]
     f5c:	9500      	str	r5, [sp, #0]
     f5e:	4b24      	ldr	r3, [pc, #144]	; (ff0 <publisher_thread+0x278>)
     f60:	f240 123b 	movw	r2, #315	; 0x13b
     f64:	4915      	ldr	r1, [pc, #84]	; (fbc <publisher_thread+0x244>)
     f66:	4816      	ldr	r0, [pc, #88]	; (fc0 <publisher_thread+0x248>)
     f68:	f001 fb44 	bl	25f4 <printk>
		if (rc != 0) {
     f6c:	2d00      	cmp	r5, #0
     f6e:	f43f af51 	beq.w	e14 <publisher_thread+0x9c>
		k_sleep(APP_TX_RX_TIMEOUT);
	}

exit_pub:

	printk("\nPublisher terminated!!\n");
     f72:	4820      	ldr	r0, [pc, #128]	; (ff4 <publisher_thread+0x27c>)
     f74:	f001 fb3e 	bl	25f4 <printk>
}
     f78:	b003      	add	sp, #12
     f7a:	bd30      	pop	{r4, r5, pc}
		PRINT_RESULT("mqtt_tx_disconnect", rc);
     f7c:	4a0d      	ldr	r2, [pc, #52]	; (fb4 <publisher_thread+0x23c>)
     f7e:	e7b9      	b.n	ef4 <publisher_thread+0x17c>
		PRINT_RESULT("mqtt_close", rc);
     f80:	4a0c      	ldr	r2, [pc, #48]	; (fb4 <publisher_thread+0x23c>)
     f82:	e7cb      	b.n	f1c <publisher_thread+0x1a4>
     f84:	0002a7f4 	.word	0x0002a7f4
     f88:	2000022c 	.word	0x2000022c
     f8c:	00000bd1 	.word	0x00000bd1
     f90:	00000b9d 	.word	0x00000b9d
     f94:	00000b85 	.word	0x00000b85
     f98:	0002a80c 	.word	0x0002a80c
     f9c:	00000b15 	.word	0x00000b15
     fa0:	0002a828 	.word	0x0002a828
     fa4:	0002a840 	.word	0x0002a840
     fa8:	0002a84c 	.word	0x0002a84c
     fac:	0002a85c 	.word	0x0002a85c
     fb0:	0002a864 	.word	0x0002a864
     fb4:	0002a738 	.word	0x0002a738
     fb8:	0002a888 	.word	0x0002a888
     fbc:	0002a6cc 	.word	0x0002a6cc
     fc0:	0002a774 	.word	0x0002a774
     fc4:	20000274 	.word	0x20000274
     fc8:	0002a734 	.word	0x0002a734
     fcc:	0002a898 	.word	0x0002a898
     fd0:	2000025c 	.word	0x2000025c
     fd4:	2000019c 	.word	0x2000019c
     fd8:	0002a764 	.word	0x0002a764
     fdc:	2000cc90 	.word	0x2000cc90
     fe0:	2000cd04 	.word	0x2000cd04
     fe4:	0002a8a8 	.word	0x0002a8a8
     fe8:	0002a8bc 	.word	0x0002a8bc
     fec:	0002a874 	.word	0x0002a874
     ff0:	0002a87c 	.word	0x0002a87c
     ff4:	0002a8c8 	.word	0x0002a8c8

00000ff8 <start_publisher>:


static void start_publisher()
{
     ff8:	b500      	push	{lr}
     ffa:	b087      	sub	sp, #28
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
     ffc:	2300      	movs	r3, #0
     ffe:	9305      	str	r3, [sp, #20]
    1000:	9304      	str	r3, [sp, #16]
    1002:	2205      	movs	r2, #5
    1004:	9203      	str	r2, [sp, #12]
    1006:	9302      	str	r3, [sp, #8]
    1008:	9301      	str	r3, [sp, #4]
    100a:	9300      	str	r3, [sp, #0]
    100c:	4b04      	ldr	r3, [pc, #16]	; (1020 <start_publisher+0x28>)
    100e:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1012:	4904      	ldr	r1, [pc, #16]	; (1024 <start_publisher+0x2c>)
    1014:	4804      	ldr	r0, [pc, #16]	; (1028 <start_publisher+0x30>)
    1016:	f027 ff6b 	bl	28ef0 <_impl_k_thread_create>
	k_thread_create(&pub_thread, pub_stack_area,
                                 K_THREAD_STACK_SIZEOF(pub_stack_area),
                                 publisher_thread,
                                 NULL, NULL, NULL,
                                 PUB_PRIORITY, 0, K_NO_WAIT);
}
    101a:	b007      	add	sp, #28
    101c:	f85d fb04 	ldr.w	pc, [sp], #4
    1020:	00000d79 	.word	0x00000d79
    1024:	20003450 	.word	0x20003450
    1028:	200029a4 	.word	0x200029a4

0000102c <start_message_thread>:
{
    102c:	b500      	push	{lr}
    102e:	b087      	sub	sp, #28
    1030:	2300      	movs	r3, #0
    1032:	9305      	str	r3, [sp, #20]
    1034:	9304      	str	r3, [sp, #16]
    1036:	2205      	movs	r2, #5
    1038:	9203      	str	r2, [sp, #12]
    103a:	9302      	str	r3, [sp, #8]
    103c:	9301      	str	r3, [sp, #4]
    103e:	9300      	str	r3, [sp, #0]
    1040:	4b04      	ldr	r3, [pc, #16]	; (1054 <start_message_thread+0x28>)
    1042:	f44f 6200 	mov.w	r2, #2048	; 0x800
    1046:	4904      	ldr	r1, [pc, #16]	; (1058 <start_message_thread+0x2c>)
    1048:	4804      	ldr	r0, [pc, #16]	; (105c <start_message_thread+0x30>)
    104a:	f027 ff51 	bl	28ef0 <_impl_k_thread_create>
}
    104e:	b007      	add	sp, #28
    1050:	f85d fb04 	ldr.w	pc, [sp], #4
    1054:	00000cbd 	.word	0x00000cbd
    1058:	20002c50 	.word	0x20002c50
    105c:	2000293c 	.word	0x2000293c

00001060 <event_iface_up>:


static void event_iface_up(struct net_mgmt_event_callback *cb,
			   u32_t mgmt_event, struct net_if *iface)
{
    1060:	b508      	push	{r3, lr}
	start_publisher();
    1062:	f7ff ffc9 	bl	ff8 <start_publisher>
	start_message_thread();
    1066:	f7ff ffe1 	bl	102c <start_message_thread>
    106a:	bd08      	pop	{r3, pc}

0000106c <main>:
}


void main(void)
{
    106c:	b508      	push	{r3, lr}
	struct net_if *iface = net_if_get_default();
    106e:	f019 fd05 	bl	1aa7c <net_if_get_default>
 * @return Value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_get(const atomic_t *target)
{
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    1072:	f3bf 8f5b 	dmb	ish
    1076:	68c3      	ldr	r3, [r0, #12]
    1078:	f3bf 8f5b 	dmb	ish

#if defined(CONFIG_NET_MGMT_EVENT)
	/* Subscribe to NET_IF_UP if interface is not ready */
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
    107c:	f013 0f01 	tst.w	r3, #1
    1080:	d000      	beq.n	1084 <main+0x18>
    1082:	bd08      	pop	{r3, pc}
				  u32_t mgmt_event_mask)
{
	__ASSERT(cb, "Callback pointer should not be NULL");
	__ASSERT(handler, "Handler pointer should not be NULL");

	cb->handler = handler;
    1084:	4803      	ldr	r0, [pc, #12]	; (1094 <main+0x28>)
    1086:	4b04      	ldr	r3, [pc, #16]	; (1098 <main+0x2c>)
    1088:	6043      	str	r3, [r0, #4]
	cb->event_mask = mgmt_event_mask;
    108a:	4b04      	ldr	r3, [pc, #16]	; (109c <main+0x30>)
    108c:	6083      	str	r3, [r0, #8]
		net_mgmt_init_event_callback(&cb, event_iface_up, NET_EVENT_IF_UP);
		net_mgmt_add_event_callback(&cb);
    108e:	f021 fb33 	bl	226f8 <net_mgmt_add_event_callback>
	}
#else
	event_iface_up(NULL, NET_EVENT_IF_UP, iface);
#endif

	return;
    1092:	e7f6      	b.n	1082 <main+0x16>
    1094:	20000000 	.word	0x20000000
    1098:	00001061 	.word	0x00001061
    109c:	d0010002 	.word	0xd0010002

000010a0 <console_out>:
 *
 * @return The character passed as input.
 */

static int console_out(int c)
{
    10a0:	b510      	push	{r4, lr}
    10a2:	4604      	mov	r4, r0
		return c;
	}

#endif /* CONFIG_UART_CONSOLE_DEBUG_SERVER_HOOKS */

	if ('\n' == c) {
    10a4:	280a      	cmp	r0, #10
    10a6:	d007      	beq.n	10b8 <console_out+0x18>
		uart_poll_out(uart_console_dev, '\r');
	}
	uart_poll_out(uart_console_dev, c);
    10a8:	4b07      	ldr	r3, [pc, #28]	; (10c8 <console_out+0x28>)
    10aa:	6818      	ldr	r0, [r3, #0]
 * @retval char Sent character.
 */
static inline unsigned char uart_poll_out(struct device *dev,
					  unsigned char out_char)
{
	const struct uart_driver_api *api = dev->driver_api;
    10ac:	6843      	ldr	r3, [r0, #4]

	return api->poll_out(dev, out_char);
    10ae:	685b      	ldr	r3, [r3, #4]
    10b0:	b2e1      	uxtb	r1, r4
    10b2:	4798      	blx	r3

	return c;
}
    10b4:	4620      	mov	r0, r4
    10b6:	bd10      	pop	{r4, pc}
		uart_poll_out(uart_console_dev, '\r');
    10b8:	4b03      	ldr	r3, [pc, #12]	; (10c8 <console_out+0x28>)
    10ba:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    10bc:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    10be:	685b      	ldr	r3, [r3, #4]
    10c0:	210d      	movs	r1, #13
    10c2:	4798      	blx	r3
    10c4:	e7f0      	b.n	10a8 <console_out+0x8>
    10c6:	bf00      	nop
    10c8:	2000034c 	.word	0x2000034c

000010cc <read_uart>:
#define ANSI_END           'F'
#define ANSI_HOME          'H'
#define ANSI_DEL           '~'

static int read_uart(struct device *uart, u8_t *buf, unsigned int size)
{
    10cc:	b510      	push	{r4, lr}
    10ce:	4604      	mov	r4, r0
 * @return Number of bytes read.
 */
static inline int uart_fifo_read(struct device *dev, u8_t *rx_data,
				 const int size)
{
	const struct uart_driver_api *api = dev->driver_api;
    10d0:	6843      	ldr	r3, [r0, #4]

	if (api->fifo_read) {
    10d2:	691b      	ldr	r3, [r3, #16]
    10d4:	b11b      	cbz	r3, 10de <read_uart+0x12>
		return api->fifo_read(dev, rx_data, size);
    10d6:	4798      	blx	r3
	int rx;

	rx = uart_fifo_read(uart, buf, size);
	if (rx < 0) {
    10d8:	2800      	cmp	r0, #0
    10da:	db02      	blt.n	10e2 <read_uart+0x16>

		return -EIO;
	}

	return rx;
}
    10dc:	bd10      	pop	{r4, pc}
	}

	return 0;
    10de:	2000      	movs	r0, #0
    10e0:	e7fa      	b.n	10d8 <read_uart+0xc>
 *
 * @return N/A
 */
static inline void uart_irq_rx_disable(struct device *dev)
{
	const struct uart_driver_api *api = dev->driver_api;
    10e2:	6863      	ldr	r3, [r4, #4]

	if (api->irq_rx_disable) {
    10e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    10e6:	b123      	cbz	r3, 10f2 <read_uart+0x26>
		api->irq_rx_disable(dev);
    10e8:	4620      	mov	r0, r4
    10ea:	4798      	blx	r3
		return -EIO;
    10ec:	f06f 0004 	mvn.w	r0, #4
    10f0:	bd10      	pop	{r4, pc}
    10f2:	f06f 0004 	mvn.w	r0, #4
    10f6:	e7f1      	b.n	10dc <read_uart+0x10>

000010f8 <console_input_init>:
		}
	}
}

static void console_input_init(void)
{
    10f8:	b500      	push	{lr}
    10fa:	b083      	sub	sp, #12
	u8_t c;

	uart_irq_rx_disable(uart_console_dev);
    10fc:	4b19      	ldr	r3, [pc, #100]	; (1164 <console_input_init+0x6c>)
    10fe:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1100:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_disable) {
    1102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
    1104:	b103      	cbz	r3, 1108 <console_input_init+0x10>
		api->irq_rx_disable(dev);
    1106:	4798      	blx	r3
	uart_irq_tx_disable(uart_console_dev);
    1108:	4b16      	ldr	r3, [pc, #88]	; (1164 <console_input_init+0x6c>)
    110a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    110c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_tx_disable) {
    110e:	699b      	ldr	r3, [r3, #24]
    1110:	b103      	cbz	r3, 1114 <console_input_init+0x1c>
		api->irq_tx_disable(dev);
    1112:	4798      	blx	r3

	uart_irq_callback_set(uart_console_dev, uart_console_isr);
    1114:	4b13      	ldr	r3, [pc, #76]	; (1164 <console_input_init+0x6c>)
    1116:	6818      	ldr	r0, [r3, #0]
 * @return N/A
 */
static inline void uart_irq_callback_set(struct device *dev,
					 uart_irq_callback_t cb)
{
	const struct uart_driver_api *api = dev->driver_api;
    1118:	6843      	ldr	r3, [r0, #4]

	if ((api != NULL) && (api->irq_callback_set != NULL)) {
    111a:	b18b      	cbz	r3, 1140 <console_input_init+0x48>
    111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
    111e:	b17b      	cbz	r3, 1140 <console_input_init+0x48>
		api->irq_callback_set(dev, cb);
    1120:	4911      	ldr	r1, [pc, #68]	; (1168 <console_input_init+0x70>)
    1122:	4798      	blx	r3
    1124:	e00c      	b.n	1140 <console_input_init+0x48>
		return api->fifo_read(dev, rx_data, size);
    1126:	2201      	movs	r2, #1
    1128:	f10d 0107 	add.w	r1, sp, #7
    112c:	4798      	blx	r3
    112e:	e007      	b.n	1140 <console_input_init+0x48>
	return 0;
    1130:	2000      	movs	r0, #0

	/* Drain the fifo */
	while (uart_irq_rx_ready(uart_console_dev)) {
    1132:	b168      	cbz	r0, 1150 <console_input_init+0x58>
		uart_fifo_read(uart_console_dev, &c, 1);
    1134:	4b0b      	ldr	r3, [pc, #44]	; (1164 <console_input_init+0x6c>)
    1136:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1138:	6843      	ldr	r3, [r0, #4]
	if (api->fifo_read) {
    113a:	691b      	ldr	r3, [r3, #16]
    113c:	2b00      	cmp	r3, #0
    113e:	d1f2      	bne.n	1126 <console_input_init+0x2e>
	while (uart_irq_rx_ready(uart_console_dev)) {
    1140:	4b08      	ldr	r3, [pc, #32]	; (1164 <console_input_init+0x6c>)
    1142:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1144:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    1146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    1148:	2b00      	cmp	r3, #0
    114a:	d0f1      	beq.n	1130 <console_input_init+0x38>
		return api->irq_rx_ready(dev);
    114c:	4798      	blx	r3
    114e:	e7f0      	b.n	1132 <console_input_init+0x3a>
	}

	uart_irq_rx_enable(uart_console_dev);
    1150:	4b04      	ldr	r3, [pc, #16]	; (1164 <console_input_init+0x6c>)
    1152:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1154:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_enable) {
    1156:	6a1b      	ldr	r3, [r3, #32]
    1158:	b103      	cbz	r3, 115c <console_input_init+0x64>
		api->irq_rx_enable(dev);
    115a:	4798      	blx	r3
}
    115c:	b003      	add	sp, #12
    115e:	f85d fb04 	ldr.w	pc, [sp], #4
    1162:	bf00      	nop
    1164:	2000034c 	.word	0x2000034c
    1168:	00001465 	.word	0x00001465

0000116c <del_char>:
{
    116c:	b570      	push	{r4, r5, r6, lr}
    116e:	4606      	mov	r6, r0
    1170:	460d      	mov	r5, r1
	uart_poll_out(uart_console_dev, '\b');
    1172:	4b17      	ldr	r3, [pc, #92]	; (11d0 <del_char+0x64>)
    1174:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1176:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1178:	685b      	ldr	r3, [r3, #4]
    117a:	2108      	movs	r1, #8
    117c:	4798      	blx	r3
	if (end == 0) {
    117e:	b11d      	cbz	r5, 1188 <del_char+0x1c>
	printk("\x1b[s");
    1180:	4814      	ldr	r0, [pc, #80]	; (11d4 <del_char+0x68>)
    1182:	f001 fa37 	bl	25f4 <printk>
    1186:	e014      	b.n	11b2 <del_char+0x46>
		uart_poll_out(uart_console_dev, ' ');
    1188:	4c11      	ldr	r4, [pc, #68]	; (11d0 <del_char+0x64>)
    118a:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    118c:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    118e:	685b      	ldr	r3, [r3, #4]
    1190:	2120      	movs	r1, #32
    1192:	4798      	blx	r3
		uart_poll_out(uart_console_dev, '\b');
    1194:	6820      	ldr	r0, [r4, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1196:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1198:	685b      	ldr	r3, [r3, #4]
    119a:	2108      	movs	r1, #8
    119c:	4798      	blx	r3
    119e:	bd70      	pop	{r4, r5, r6, pc}
		*pos = *(pos + 1);
    11a0:	7871      	ldrb	r1, [r6, #1]
    11a2:	f806 1b01 	strb.w	r1, [r6], #1
		uart_poll_out(uart_console_dev, *(pos++));
    11a6:	4b0a      	ldr	r3, [pc, #40]	; (11d0 <del_char+0x64>)
    11a8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    11aa:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    11ac:	685b      	ldr	r3, [r3, #4]
    11ae:	4798      	blx	r3
	while (end-- > 0) {
    11b0:	4625      	mov	r5, r4
    11b2:	1e6b      	subs	r3, r5, #1
    11b4:	b2dc      	uxtb	r4, r3
    11b6:	2d00      	cmp	r5, #0
    11b8:	d1f2      	bne.n	11a0 <del_char+0x34>
	uart_poll_out(uart_console_dev, ' ');
    11ba:	4b05      	ldr	r3, [pc, #20]	; (11d0 <del_char+0x64>)
    11bc:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    11be:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    11c0:	685b      	ldr	r3, [r3, #4]
    11c2:	2120      	movs	r1, #32
    11c4:	4798      	blx	r3
	printk("\x1b[u");
    11c6:	4804      	ldr	r0, [pc, #16]	; (11d8 <del_char+0x6c>)
    11c8:	f001 fa14 	bl	25f4 <printk>
    11cc:	bd70      	pop	{r4, r5, r6, pc}
    11ce:	bf00      	nop
    11d0:	2000034c 	.word	0x2000034c
    11d4:	0002a92c 	.word	0x0002a92c
    11d8:	0002a930 	.word	0x0002a930

000011dc <insert_char>:
{
    11dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    11e0:	4605      	mov	r5, r0
    11e2:	4688      	mov	r8, r1
    11e4:	4614      	mov	r4, r2
	uart_poll_out(uart_console_dev, c);
    11e6:	4b14      	ldr	r3, [pc, #80]	; (1238 <insert_char+0x5c>)
    11e8:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    11ea:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    11ec:	685b      	ldr	r3, [r3, #4]
    11ee:	4798      	blx	r3
	if (end == 0) {
    11f0:	b91c      	cbnz	r4, 11fa <insert_char+0x1e>
		*pos = c;
    11f2:	f885 8000 	strb.w	r8, [r5]
		return;
    11f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	tmp = *pos;
    11fa:	462e      	mov	r6, r5
    11fc:	f816 7b01 	ldrb.w	r7, [r6], #1
	*(pos++) = c;
    1200:	f885 8000 	strb.w	r8, [r5]
	printk("\x1b[s");
    1204:	480d      	ldr	r0, [pc, #52]	; (123c <insert_char+0x60>)
    1206:	f001 f9f5 	bl	25f4 <printk>
    120a:	e00c      	b.n	1226 <insert_char+0x4a>
		uart_poll_out(uart_console_dev, tmp);
    120c:	4b0a      	ldr	r3, [pc, #40]	; (1238 <insert_char+0x5c>)
    120e:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1210:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1212:	685b      	ldr	r3, [r3, #4]
    1214:	4639      	mov	r1, r7
    1216:	4798      	blx	r3
		c = *pos;
    1218:	4633      	mov	r3, r6
    121a:	f813 2b01 	ldrb.w	r2, [r3], #1
		*(pos++) = tmp;
    121e:	7037      	strb	r7, [r6, #0]
		tmp = c;
    1220:	4617      	mov	r7, r2
	while (end-- > 0) {
    1222:	462c      	mov	r4, r5
		*(pos++) = tmp;
    1224:	461e      	mov	r6, r3
	while (end-- > 0) {
    1226:	1e63      	subs	r3, r4, #1
    1228:	b2dd      	uxtb	r5, r3
    122a:	2c00      	cmp	r4, #0
    122c:	d1ee      	bne.n	120c <insert_char+0x30>
	printk("\x1b[u");
    122e:	4804      	ldr	r0, [pc, #16]	; (1240 <insert_char+0x64>)
    1230:	f001 f9e0 	bl	25f4 <printk>
    1234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    1238:	2000034c 	.word	0x2000034c
    123c:	0002a92c 	.word	0x0002a92c
    1240:	0002a930 	.word	0x0002a930

00001244 <handle_ansi>:
{
    1244:	b538      	push	{r3, r4, r5, lr}
    1246:	4604      	mov	r4, r0
    1248:	460d      	mov	r5, r1
 * @return Previous value of @a target.
 */
#ifdef CONFIG_ATOMIC_OPERATIONS_BUILTIN
static inline atomic_val_t atomic_and(atomic_t *target, atomic_val_t value)
{
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    124a:	4b7f      	ldr	r3, [pc, #508]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    124c:	f3bf 8f5b 	dmb	ish
    1250:	e853 2f00 	ldrex	r2, [r3]
    1254:	f022 0104 	bic.w	r1, r2, #4
    1258:	e843 1000 	strex	r0, r1, [r3]
    125c:	2800      	cmp	r0, #0
    125e:	d1f7      	bne.n	1250 <handle_ansi+0xc>
    1260:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_clear_bit(&esc_state, ESC_ANSI_FIRST)) {
    1264:	f012 0f04 	tst.w	r2, #4
    1268:	d03c      	beq.n	12e4 <handle_ansi+0xa0>
		if (!isdigit(byte)) {
    126a:	f028 fadd 	bl	29828 <__locale_ctype_ptr>
    126e:	4420      	add	r0, r4
    1270:	7843      	ldrb	r3, [r0, #1]
    1272:	f013 0f04 	tst.w	r3, #4
    1276:	d121      	bne.n	12bc <handle_ansi+0x78>
			ansi_val = 1;
    1278:	2201      	movs	r2, #1
    127a:	4b74      	ldr	r3, [pc, #464]	; (144c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1c>)
    127c:	601a      	str	r2, [r3, #0]
	switch (byte) {
    127e:	2c46      	cmp	r4, #70	; 0x46
    1280:	f000 80d0 	beq.w	1424 <handle_ansi+0x1e0>
    1284:	f200 8086 	bhi.w	1394 <handle_ansi+0x150>
    1288:	2c43      	cmp	r4, #67	; 0x43
    128a:	f000 80a7 	beq.w	13dc <handle_ansi+0x198>
    128e:	2c44      	cmp	r4, #68	; 0x44
    1290:	d106      	bne.n	12a0 <handle_ansi+0x5c>
		if (ansi_val > cur) {
    1292:	4b6f      	ldr	r3, [pc, #444]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    1294:	781b      	ldrb	r3, [r3, #0]
    1296:	4a6d      	ldr	r2, [pc, #436]	; (144c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1c>)
    1298:	6811      	ldr	r1, [r2, #0]
    129a:	428b      	cmp	r3, r1
    129c:	f080 8092 	bcs.w	13c4 <handle_ansi+0x180>
    12a0:	4b69      	ldr	r3, [pc, #420]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    12a2:	f3bf 8f5b 	dmb	ish
    12a6:	e853 2f00 	ldrex	r2, [r3]
    12aa:	f022 0202 	bic.w	r2, r2, #2
    12ae:	e843 2100 	strex	r1, r2, [r3]
    12b2:	2900      	cmp	r1, #0
    12b4:	d1f7      	bne.n	12a6 <handle_ansi+0x62>
    12b6:	f3bf 8f5b 	dmb	ish
    12ba:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    12bc:	4b62      	ldr	r3, [pc, #392]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    12be:	f3bf 8f5b 	dmb	ish
    12c2:	e853 2f00 	ldrex	r2, [r3]
    12c6:	f042 0208 	orr.w	r2, r2, #8
    12ca:	e843 2100 	strex	r1, r2, [r3]
    12ce:	2900      	cmp	r1, #0
    12d0:	d1f7      	bne.n	12c2 <handle_ansi+0x7e>
    12d2:	f3bf 8f5b 	dmb	ish
		ansi_val = byte - '0';
    12d6:	3c30      	subs	r4, #48	; 0x30
    12d8:	4b5c      	ldr	r3, [pc, #368]	; (144c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1c>)
    12da:	601c      	str	r4, [r3, #0]
		ansi_val_2 = 0;
    12dc:	2200      	movs	r2, #0
    12de:	4b5d      	ldr	r3, [pc, #372]	; (1454 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x24>)
    12e0:	601a      	str	r2, [r3, #0]
		return;
    12e2:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    12e4:	f3bf 8f5b 	dmb	ish
    12e8:	4b57      	ldr	r3, [pc, #348]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    12ea:	681b      	ldr	r3, [r3, #0]
    12ec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(&esc_state, ESC_ANSI_VAL)) {
    12f0:	f013 0f08 	tst.w	r3, #8
    12f4:	d0c3      	beq.n	127e <handle_ansi+0x3a>
		if (isdigit(byte)) {
    12f6:	f028 fa97 	bl	29828 <__locale_ctype_ptr>
    12fa:	4420      	add	r0, r4
    12fc:	7843      	ldrb	r3, [r0, #1]
    12fe:	f013 0f04 	tst.w	r3, #4
    1302:	d11b      	bne.n	133c <handle_ansi+0xf8>
		if (byte == ';' &&
    1304:	2c3b      	cmp	r4, #59	; 0x3b
    1306:	d034      	beq.n	1372 <handle_ansi+0x12e>
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    1308:	4b4f      	ldr	r3, [pc, #316]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    130a:	f3bf 8f5b 	dmb	ish
    130e:	e853 2f00 	ldrex	r2, [r3]
    1312:	f022 0208 	bic.w	r2, r2, #8
    1316:	e843 2100 	strex	r1, r2, [r3]
    131a:	2900      	cmp	r1, #0
    131c:	d1f7      	bne.n	130e <handle_ansi+0xca>
    131e:	f3bf 8f5b 	dmb	ish
    1322:	f3bf 8f5b 	dmb	ish
    1326:	e853 2f00 	ldrex	r2, [r3]
    132a:	f022 0210 	bic.w	r2, r2, #16
    132e:	e843 2100 	strex	r1, r2, [r3]
    1332:	2900      	cmp	r1, #0
    1334:	d1f7      	bne.n	1326 <handle_ansi+0xe2>
    1336:	f3bf 8f5b 	dmb	ish
    133a:	e7a0      	b.n	127e <handle_ansi+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    133c:	f3bf 8f5b 	dmb	ish
    1340:	4b41      	ldr	r3, [pc, #260]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    1342:	681b      	ldr	r3, [r3, #0]
    1344:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(&esc_state, ESC_ANSI_VAL_2)) {
    1348:	f013 0f10 	tst.w	r3, #16
    134c:	d008      	beq.n	1360 <handle_ansi+0x11c>
				ansi_val_2 *= 10;
    134e:	4941      	ldr	r1, [pc, #260]	; (1454 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x24>)
    1350:	680a      	ldr	r2, [r1, #0]
    1352:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1356:	0053      	lsls	r3, r2, #1
				ansi_val_2 += byte - '0';
    1358:	4423      	add	r3, r4
    135a:	3b30      	subs	r3, #48	; 0x30
    135c:	600b      	str	r3, [r1, #0]
    135e:	bd38      	pop	{r3, r4, r5, pc}
				ansi_val *= 10;
    1360:	493a      	ldr	r1, [pc, #232]	; (144c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1c>)
    1362:	680a      	ldr	r2, [r1, #0]
    1364:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    1368:	0053      	lsls	r3, r2, #1
				ansi_val += byte - '0';
    136a:	4423      	add	r3, r4
    136c:	3b30      	subs	r3, #48	; 0x30
    136e:	600b      	str	r3, [r1, #0]
    1370:	bd38      	pop	{r3, r4, r5, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1372:	4b35      	ldr	r3, [pc, #212]	; (1448 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x18>)
    1374:	f3bf 8f5b 	dmb	ish
    1378:	e853 2f00 	ldrex	r2, [r3]
    137c:	f042 0110 	orr.w	r1, r2, #16
    1380:	e843 1000 	strex	r0, r1, [r3]
    1384:	2800      	cmp	r0, #0
    1386:	d1f7      	bne.n	1378 <handle_ansi+0x134>
    1388:	f3bf 8f5b 	dmb	ish
		if (byte == ';' &&
    138c:	f012 0f10 	tst.w	r2, #16
    1390:	d1ba      	bne.n	1308 <handle_ansi+0xc4>
    1392:	e792      	b.n	12ba <handle_ansi+0x76>
	switch (byte) {
    1394:	2c48      	cmp	r4, #72	; 0x48
    1396:	d034      	beq.n	1402 <handle_ansi+0x1be>
    1398:	2c7e      	cmp	r4, #126	; 0x7e
    139a:	d181      	bne.n	12a0 <handle_ansi+0x5c>
		if (!end) {
    139c:	4b2e      	ldr	r3, [pc, #184]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    139e:	781b      	ldrb	r3, [r3, #0]
    13a0:	2b00      	cmp	r3, #0
    13a2:	f43f af7d 	beq.w	12a0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    13a6:	2101      	movs	r1, #1
    13a8:	482c      	ldr	r0, [pc, #176]	; (145c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x2c>)
    13aa:	f001 f923 	bl	25f4 <printk>
		del_char(&line[cur], --end);
    13ae:	4b28      	ldr	r3, [pc, #160]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    13b0:	7818      	ldrb	r0, [r3, #0]
    13b2:	4b29      	ldr	r3, [pc, #164]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    13b4:	7819      	ldrb	r1, [r3, #0]
    13b6:	3901      	subs	r1, #1
    13b8:	b2c9      	uxtb	r1, r1
    13ba:	7019      	strb	r1, [r3, #0]
    13bc:	4428      	add	r0, r5
    13be:	f7ff fed5 	bl	116c <del_char>
		break;
    13c2:	e76d      	b.n	12a0 <handle_ansi+0x5c>
		end += ansi_val;
    13c4:	b2c8      	uxtb	r0, r1
    13c6:	4c24      	ldr	r4, [pc, #144]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    13c8:	7822      	ldrb	r2, [r4, #0]
    13ca:	4402      	add	r2, r0
    13cc:	7022      	strb	r2, [r4, #0]
		cur -= ansi_val;
    13ce:	1a1b      	subs	r3, r3, r0
    13d0:	4a1f      	ldr	r2, [pc, #124]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    13d2:	7013      	strb	r3, [r2, #0]
	printk("\x1b[%uD", count);
    13d4:	4822      	ldr	r0, [pc, #136]	; (1460 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x30>)
    13d6:	f001 f90d 	bl	25f4 <printk>
    13da:	e761      	b.n	12a0 <handle_ansi+0x5c>
		if (ansi_val > end) {
    13dc:	4b1e      	ldr	r3, [pc, #120]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    13de:	781b      	ldrb	r3, [r3, #0]
    13e0:	4a1a      	ldr	r2, [pc, #104]	; (144c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x1c>)
    13e2:	6811      	ldr	r1, [r2, #0]
    13e4:	428b      	cmp	r3, r1
    13e6:	f4ff af5b 	bcc.w	12a0 <handle_ansi+0x5c>
		end -= ansi_val;
    13ea:	b2ca      	uxtb	r2, r1
    13ec:	1a9b      	subs	r3, r3, r2
    13ee:	481a      	ldr	r0, [pc, #104]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    13f0:	7003      	strb	r3, [r0, #0]
		cur += ansi_val;
    13f2:	4b17      	ldr	r3, [pc, #92]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    13f4:	7818      	ldrb	r0, [r3, #0]
    13f6:	4402      	add	r2, r0
    13f8:	701a      	strb	r2, [r3, #0]
	printk("\x1b[%uC", count);
    13fa:	4818      	ldr	r0, [pc, #96]	; (145c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x2c>)
    13fc:	f001 f8fa 	bl	25f4 <printk>
    1400:	e74e      	b.n	12a0 <handle_ansi+0x5c>
		if (!cur) {
    1402:	4b13      	ldr	r3, [pc, #76]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    1404:	7819      	ldrb	r1, [r3, #0]
    1406:	2900      	cmp	r1, #0
    1408:	f43f af4a 	beq.w	12a0 <handle_ansi+0x5c>
	printk("\x1b[%uD", count);
    140c:	4814      	ldr	r0, [pc, #80]	; (1460 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x30>)
    140e:	f001 f8f1 	bl	25f4 <printk>
		end += cur;
    1412:	4911      	ldr	r1, [pc, #68]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    1414:	4a0e      	ldr	r2, [pc, #56]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    1416:	780b      	ldrb	r3, [r1, #0]
    1418:	7810      	ldrb	r0, [r2, #0]
    141a:	4403      	add	r3, r0
    141c:	700b      	strb	r3, [r1, #0]
		cur = 0;
    141e:	2300      	movs	r3, #0
    1420:	7013      	strb	r3, [r2, #0]
		break;
    1422:	e73d      	b.n	12a0 <handle_ansi+0x5c>
		if (!end) {
    1424:	4b0c      	ldr	r3, [pc, #48]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    1426:	7819      	ldrb	r1, [r3, #0]
    1428:	2900      	cmp	r1, #0
    142a:	f43f af39 	beq.w	12a0 <handle_ansi+0x5c>
	printk("\x1b[%uC", count);
    142e:	480b      	ldr	r0, [pc, #44]	; (145c <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x2c>)
    1430:	f001 f8e0 	bl	25f4 <printk>
		cur += end;
    1434:	4906      	ldr	r1, [pc, #24]	; (1450 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x20>)
    1436:	4a08      	ldr	r2, [pc, #32]	; (1458 <CONFIG_BT_CTLR_XTAL_THRESHOLD+0x28>)
    1438:	780b      	ldrb	r3, [r1, #0]
    143a:	7810      	ldrb	r0, [r2, #0]
    143c:	4403      	add	r3, r0
    143e:	700b      	strb	r3, [r1, #0]
		end = 0;
    1440:	2300      	movs	r3, #0
    1442:	7013      	strb	r3, [r2, #0]
		break;
    1444:	e72c      	b.n	12a0 <handle_ansi+0x5c>
    1446:	bf00      	nop
    1448:	20000344 	.word	0x20000344
    144c:	2000032c 	.word	0x2000032c
    1450:	20000340 	.word	0x20000340
    1454:	20000330 	.word	0x20000330
    1458:	20000341 	.word	0x20000341
    145c:	0002a93c 	.word	0x0002a93c
    1460:	0002a934 	.word	0x0002a934

00001464 <uart_console_isr>:
{
    1464:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    1468:	b082      	sub	sp, #8
	while (uart_irq_update(uart_console_dev) &&
    146a:	e001      	b.n	1470 <uart_console_isr+0xc>
	return 0;
    146c:	2000      	movs	r0, #0
		if (!uart_irq_rx_ready(uart_console_dev)) {
    146e:	b9d8      	cbnz	r0, 14a8 <uart_console_isr+0x44>
	while (uart_irq_update(uart_console_dev) &&
    1470:	4b78      	ldr	r3, [pc, #480]	; (1654 <uart_console_isr+0x1f0>)
    1472:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1474:	6843      	ldr	r3, [r0, #4]
	if (api->irq_update) {
    1476:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    1478:	2b00      	cmp	r3, #0
    147a:	f000 80e7 	beq.w	164c <uart_console_isr+0x1e8>
		return api->irq_update(dev);
    147e:	4798      	blx	r3
    1480:	2800      	cmp	r0, #0
    1482:	d037      	beq.n	14f4 <uart_console_isr+0x90>
	       uart_irq_is_pending(uart_console_dev)) {
    1484:	4b73      	ldr	r3, [pc, #460]	; (1654 <uart_console_isr+0x1f0>)
    1486:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    1488:	6843      	ldr	r3, [r0, #4]
	if (api->irq_is_pending)	{
    148a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
    148c:	2b00      	cmp	r3, #0
    148e:	f000 80df 	beq.w	1650 <uart_console_isr+0x1ec>
		return api->irq_is_pending(dev);
    1492:	4798      	blx	r3
	while (uart_irq_update(uart_console_dev) &&
    1494:	2800      	cmp	r0, #0
    1496:	d02d      	beq.n	14f4 <uart_console_isr+0x90>
		if (!uart_irq_rx_ready(uart_console_dev)) {
    1498:	4b6e      	ldr	r3, [pc, #440]	; (1654 <uart_console_isr+0x1f0>)
    149a:	6818      	ldr	r0, [r3, #0]
	const struct uart_driver_api *api = dev->driver_api;
    149c:	6843      	ldr	r3, [r0, #4]
	if (api->irq_rx_ready) {
    149e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
    14a0:	2b00      	cmp	r3, #0
    14a2:	d0e3      	beq.n	146c <uart_console_isr+0x8>
		return api->irq_rx_ready(dev);
    14a4:	4798      	blx	r3
    14a6:	e7e2      	b.n	146e <uart_console_isr+0xa>
		rx = read_uart(uart_console_dev, &byte, 1);
    14a8:	2201      	movs	r2, #1
    14aa:	f10d 0107 	add.w	r1, sp, #7
    14ae:	4b69      	ldr	r3, [pc, #420]	; (1654 <uart_console_isr+0x1f0>)
    14b0:	6818      	ldr	r0, [r3, #0]
    14b2:	f7ff fe0b 	bl	10cc <read_uart>
		if (rx < 0) {
    14b6:	2800      	cmp	r0, #0
    14b8:	db1c      	blt.n	14f4 <uart_console_isr+0x90>
		if (!cmd) {
    14ba:	4b67      	ldr	r3, [pc, #412]	; (1658 <uart_console_isr+0x1f4>)
    14bc:	681b      	ldr	r3, [r3, #0]
    14be:	b183      	cbz	r3, 14e2 <uart_console_isr+0x7e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    14c0:	f3bf 8f5b 	dmb	ish
    14c4:	4b65      	ldr	r3, [pc, #404]	; (165c <uart_console_isr+0x1f8>)
    14c6:	681b      	ldr	r3, [r3, #0]
    14c8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(&esc_state, ESC_ANSI)) {
    14cc:	f013 0f02 	tst.w	r3, #2
    14d0:	d013      	beq.n	14fa <uart_console_isr+0x96>
			handle_ansi(byte, cmd->line);
    14d2:	4b61      	ldr	r3, [pc, #388]	; (1658 <uart_console_isr+0x1f4>)
    14d4:	6819      	ldr	r1, [r3, #0]
    14d6:	3104      	adds	r1, #4
    14d8:	f89d 0007 	ldrb.w	r0, [sp, #7]
    14dc:	f7ff feb2 	bl	1244 <handle_ansi>
			continue;
    14e0:	e7c6      	b.n	1470 <uart_console_isr+0xc>
			cmd = k_fifo_get(avail_queue, K_NO_WAIT);
    14e2:	2100      	movs	r1, #0
    14e4:	4b5e      	ldr	r3, [pc, #376]	; (1660 <uart_console_isr+0x1fc>)
    14e6:	6818      	ldr	r0, [r3, #0]
    14e8:	f026 ff14 	bl	28314 <k_queue_get>
    14ec:	4b5a      	ldr	r3, [pc, #360]	; (1658 <uart_console_isr+0x1f4>)
    14ee:	6018      	str	r0, [r3, #0]
			if (!cmd) {
    14f0:	2800      	cmp	r0, #0
    14f2:	d1e5      	bne.n	14c0 <uart_console_isr+0x5c>
}
    14f4:	b002      	add	sp, #8
    14f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    14fa:	4b58      	ldr	r3, [pc, #352]	; (165c <uart_console_isr+0x1f8>)
    14fc:	f3bf 8f5b 	dmb	ish
    1500:	e853 2f00 	ldrex	r2, [r3]
    1504:	f022 0101 	bic.w	r1, r2, #1
    1508:	e843 1000 	strex	r0, r1, [r3]
    150c:	2800      	cmp	r0, #0
    150e:	d1f7      	bne.n	1500 <uart_console_isr+0x9c>
    1510:	f3bf 8f5b 	dmb	ish
		if (atomic_test_and_clear_bit(&esc_state, ESC_ESC)) {
    1514:	f012 0f01 	tst.w	r2, #1
    1518:	d01d      	beq.n	1556 <uart_console_isr+0xf2>
			if (byte == ANSI_ESC) {
    151a:	f89d 3007 	ldrb.w	r3, [sp, #7]
    151e:	2b5b      	cmp	r3, #91	; 0x5b
    1520:	d1a6      	bne.n	1470 <uart_console_isr+0xc>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    1522:	4b4e      	ldr	r3, [pc, #312]	; (165c <uart_console_isr+0x1f8>)
    1524:	f3bf 8f5b 	dmb	ish
    1528:	e853 2f00 	ldrex	r2, [r3]
    152c:	f042 0202 	orr.w	r2, r2, #2
    1530:	e843 2100 	strex	r1, r2, [r3]
    1534:	2900      	cmp	r1, #0
    1536:	d1f7      	bne.n	1528 <uart_console_isr+0xc4>
    1538:	f3bf 8f5b 	dmb	ish
    153c:	f3bf 8f5b 	dmb	ish
    1540:	e853 2f00 	ldrex	r2, [r3]
    1544:	f042 0204 	orr.w	r2, r2, #4
    1548:	e843 2100 	strex	r1, r2, [r3]
    154c:	2900      	cmp	r1, #0
    154e:	d1f7      	bne.n	1540 <uart_console_isr+0xdc>
    1550:	f3bf 8f5b 	dmb	ish
			continue;
    1554:	e78c      	b.n	1470 <uart_console_isr+0xc>
		if (!isprint(byte)) {
    1556:	f028 f967 	bl	29828 <__locale_ctype_ptr>
    155a:	f89d 1007 	ldrb.w	r1, [sp, #7]
    155e:	4408      	add	r0, r1
    1560:	7843      	ldrb	r3, [r0, #1]
    1562:	f013 0f97 	tst.w	r3, #151	; 0x97
    1566:	d15f      	bne.n	1628 <uart_console_isr+0x1c4>
			switch (byte) {
    1568:	290d      	cmp	r1, #13
    156a:	d03c      	beq.n	15e6 <uart_console_isr+0x182>
    156c:	d916      	bls.n	159c <uart_console_isr+0x138>
    156e:	291b      	cmp	r1, #27
    1570:	d02b      	beq.n	15ca <uart_console_isr+0x166>
    1572:	297f      	cmp	r1, #127	; 0x7f
    1574:	f47f af7c 	bne.w	1470 <uart_console_isr+0xc>
				if (cur > 0) {
    1578:	4b3a      	ldr	r3, [pc, #232]	; (1664 <uart_console_isr+0x200>)
    157a:	781b      	ldrb	r3, [r3, #0]
    157c:	2b00      	cmp	r3, #0
    157e:	f43f af77 	beq.w	1470 <uart_console_isr+0xc>
					del_char(&cmd->line[--cur], end);
    1582:	4a35      	ldr	r2, [pc, #212]	; (1658 <uart_console_isr+0x1f4>)
    1584:	6812      	ldr	r2, [r2, #0]
    1586:	3b01      	subs	r3, #1
    1588:	b2db      	uxtb	r3, r3
    158a:	4936      	ldr	r1, [pc, #216]	; (1664 <uart_console_isr+0x200>)
    158c:	700b      	strb	r3, [r1, #0]
    158e:	4413      	add	r3, r2
    1590:	4a35      	ldr	r2, [pc, #212]	; (1668 <uart_console_isr+0x204>)
    1592:	7811      	ldrb	r1, [r2, #0]
    1594:	1d18      	adds	r0, r3, #4
    1596:	f7ff fde9 	bl	116c <del_char>
    159a:	e769      	b.n	1470 <uart_console_isr+0xc>
			switch (byte) {
    159c:	2909      	cmp	r1, #9
    159e:	f47f af67 	bne.w	1470 <uart_console_isr+0xc>
				if (completion_cb && !end) {
    15a2:	4b32      	ldr	r3, [pc, #200]	; (166c <uart_console_isr+0x208>)
    15a4:	681b      	ldr	r3, [r3, #0]
    15a6:	2b00      	cmp	r3, #0
    15a8:	f43f af62 	beq.w	1470 <uart_console_isr+0xc>
    15ac:	4a2e      	ldr	r2, [pc, #184]	; (1668 <uart_console_isr+0x204>)
    15ae:	7812      	ldrb	r2, [r2, #0]
    15b0:	2a00      	cmp	r2, #0
    15b2:	f47f af5d 	bne.w	1470 <uart_console_isr+0xc>
					cur += completion_cb(cmd->line, cur);
    15b6:	4a28      	ldr	r2, [pc, #160]	; (1658 <uart_console_isr+0x1f4>)
    15b8:	6810      	ldr	r0, [r2, #0]
    15ba:	4c2a      	ldr	r4, [pc, #168]	; (1664 <uart_console_isr+0x200>)
    15bc:	7821      	ldrb	r1, [r4, #0]
    15be:	3004      	adds	r0, #4
    15c0:	4798      	blx	r3
    15c2:	7823      	ldrb	r3, [r4, #0]
    15c4:	4403      	add	r3, r0
    15c6:	7023      	strb	r3, [r4, #0]
			continue;
    15c8:	e752      	b.n	1470 <uart_console_isr+0xc>
    15ca:	4b24      	ldr	r3, [pc, #144]	; (165c <uart_console_isr+0x1f8>)
    15cc:	f3bf 8f5b 	dmb	ish
    15d0:	e853 2f00 	ldrex	r2, [r3]
    15d4:	f042 0201 	orr.w	r2, r2, #1
    15d8:	e843 2100 	strex	r1, r2, [r3]
    15dc:	2900      	cmp	r1, #0
    15de:	d1f7      	bne.n	15d0 <uart_console_isr+0x16c>
    15e0:	f3bf 8f5b 	dmb	ish
    15e4:	e744      	b.n	1470 <uart_console_isr+0xc>
				cmd->line[cur + end] = '\0';
    15e6:	4d1c      	ldr	r5, [pc, #112]	; (1658 <uart_console_isr+0x1f4>)
    15e8:	682b      	ldr	r3, [r5, #0]
    15ea:	4f1e      	ldr	r7, [pc, #120]	; (1664 <uart_console_isr+0x200>)
    15ec:	783a      	ldrb	r2, [r7, #0]
    15ee:	4e1e      	ldr	r6, [pc, #120]	; (1668 <uart_console_isr+0x204>)
    15f0:	7831      	ldrb	r1, [r6, #0]
    15f2:	440a      	add	r2, r1
    15f4:	4413      	add	r3, r2
    15f6:	2400      	movs	r4, #0
    15f8:	711c      	strb	r4, [r3, #4]
				uart_poll_out(uart_console_dev, '\r');
    15fa:	f8df 8058 	ldr.w	r8, [pc, #88]	; 1654 <uart_console_isr+0x1f0>
    15fe:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    1602:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1604:	685b      	ldr	r3, [r3, #4]
    1606:	210d      	movs	r1, #13
    1608:	4798      	blx	r3
				uart_poll_out(uart_console_dev, '\n');
    160a:	f8d8 0000 	ldr.w	r0, [r8]
	const struct uart_driver_api *api = dev->driver_api;
    160e:	6843      	ldr	r3, [r0, #4]
	return api->poll_out(dev, out_char);
    1610:	685b      	ldr	r3, [r3, #4]
    1612:	210a      	movs	r1, #10
    1614:	4798      	blx	r3
				cur = 0;
    1616:	703c      	strb	r4, [r7, #0]
				end = 0;
    1618:	7034      	strb	r4, [r6, #0]
				k_fifo_put(lines_queue, cmd);
    161a:	6829      	ldr	r1, [r5, #0]
    161c:	4b14      	ldr	r3, [pc, #80]	; (1670 <uart_console_isr+0x20c>)
    161e:	6818      	ldr	r0, [r3, #0]
    1620:	f026 fe50 	bl	282c4 <k_queue_append>
				cmd = NULL;
    1624:	602c      	str	r4, [r5, #0]
				break;
    1626:	e723      	b.n	1470 <uart_console_isr+0xc>
		if (cur + end < sizeof(cmd->line) - 1) {
    1628:	4b0e      	ldr	r3, [pc, #56]	; (1664 <uart_console_isr+0x200>)
    162a:	781b      	ldrb	r3, [r3, #0]
    162c:	4a0e      	ldr	r2, [pc, #56]	; (1668 <uart_console_isr+0x204>)
    162e:	7812      	ldrb	r2, [r2, #0]
    1630:	18d0      	adds	r0, r2, r3
    1632:	287e      	cmp	r0, #126	; 0x7e
    1634:	f63f af1c 	bhi.w	1470 <uart_console_isr+0xc>
			insert_char(&cmd->line[cur++], byte, end);
    1638:	4807      	ldr	r0, [pc, #28]	; (1658 <uart_console_isr+0x1f4>)
    163a:	6800      	ldr	r0, [r0, #0]
    163c:	1c5d      	adds	r5, r3, #1
    163e:	4c09      	ldr	r4, [pc, #36]	; (1664 <uart_console_isr+0x200>)
    1640:	7025      	strb	r5, [r4, #0]
    1642:	4418      	add	r0, r3
    1644:	3004      	adds	r0, #4
    1646:	f7ff fdc9 	bl	11dc <insert_char>
    164a:	e711      	b.n	1470 <uart_console_isr+0xc>
	return 0;
    164c:	2000      	movs	r0, #0
    164e:	e717      	b.n	1480 <uart_console_isr+0x1c>
	return 0;
    1650:	2000      	movs	r0, #0
    1652:	e71f      	b.n	1494 <uart_console_isr+0x30>
    1654:	2000034c 	.word	0x2000034c
    1658:	20000338 	.word	0x20000338
    165c:	20000344 	.word	0x20000344
    1660:	20000334 	.word	0x20000334
    1664:	20000340 	.word	0x20000340
    1668:	20000341 	.word	0x20000341
    166c:	2000033c 	.word	0x2000033c
    1670:	20000348 	.word	0x20000348

00001674 <uart_register_input>:

void uart_register_input(struct k_fifo *avail, struct k_fifo *lines,
			 u8_t (*completion)(char *str, u8_t len))
{
    1674:	b508      	push	{r3, lr}
	avail_queue = avail;
    1676:	4b04      	ldr	r3, [pc, #16]	; (1688 <uart_register_input+0x14>)
    1678:	6018      	str	r0, [r3, #0]
	lines_queue = lines;
    167a:	4b04      	ldr	r3, [pc, #16]	; (168c <uart_register_input+0x18>)
    167c:	6019      	str	r1, [r3, #0]
	completion_cb = completion;
    167e:	4b04      	ldr	r3, [pc, #16]	; (1690 <uart_register_input+0x1c>)
    1680:	601a      	str	r2, [r3, #0]

	console_input_init();
    1682:	f7ff fd39 	bl	10f8 <console_input_init>
    1686:	bd08      	pop	{r3, pc}
    1688:	20000334 	.word	0x20000334
    168c:	20000348 	.word	0x20000348
    1690:	2000033c 	.word	0x2000033c

00001694 <uart_console_hook_install>:
 *
 * @return N/A
 */

void uart_console_hook_install(void)
{
    1694:	b508      	push	{r3, lr}
	__stdout_hook_install(console_out);
	__printk_hook_install(console_out);
    1696:	4802      	ldr	r0, [pc, #8]	; (16a0 <uart_console_hook_install+0xc>)
    1698:	f000 fe70 	bl	237c <__printk_hook_install>
    169c:	bd08      	pop	{r3, pc}
    169e:	bf00      	nop
    16a0:	000010a1 	.word	0x000010a1

000016a4 <uart_console_init>:
 * @brief Initialize one UART as the console/debug port
 *
 * @return 0 if successful, otherwise failed.
 */
static int uart_console_init(struct device *arg)
{
    16a4:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);

	uart_console_dev = device_get_binding(CONFIG_UART_CONSOLE_ON_DEV_NAME);
    16a6:	4804      	ldr	r0, [pc, #16]	; (16b8 <uart_console_init+0x14>)
    16a8:	f025 fedc 	bl	27464 <device_get_binding>
    16ac:	4b03      	ldr	r3, [pc, #12]	; (16bc <uart_console_init+0x18>)
    16ae:	6018      	str	r0, [r3, #0]
		}
	}
	k_busy_wait(1000000);
#endif

	uart_console_hook_install();
    16b0:	f7ff fff0 	bl	1694 <uart_console_hook_install>

	return 0;
}
    16b4:	2000      	movs	r0, #0
    16b6:	bd08      	pop	{r3, pc}
    16b8:	0002a944 	.word	0x0002a944
    16bc:	2000034c 	.word	0x2000034c

000016c0 <sys_rand32_get>:
 *
 * @return a 32-bit number
 */

u32_t sys_rand32_get(void)
{
    16c0:	b508      	push	{r3, lr}
	return k_cycle_get_32() + atomic_add(&_rand32_counter, _RAND32_INC);
    16c2:	f000 fa73 	bl	1bac <_timer_cycle_get_32>
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    16c6:	4b08      	ldr	r3, [pc, #32]	; (16e8 <sys_rand32_get+0x28>)
    16c8:	f3bf 8f5b 	dmb	ish
    16cc:	e853 2f00 	ldrex	r2, [r3]
    16d0:	4906      	ldr	r1, [pc, #24]	; (16ec <sys_rand32_get+0x2c>)
    16d2:	1851      	adds	r1, r2, r1
    16d4:	e843 1e00 	strex	lr, r1, [r3]
    16d8:	f1be 0f00 	cmp.w	lr, #0
    16dc:	d1f6      	bne.n	16cc <sys_rand32_get+0xc>
    16de:	f3bf 8f5b 	dmb	ish
}
    16e2:	4410      	add	r0, r2
    16e4:	bd08      	pop	{r3, pc}
    16e6:	bf00      	nop
    16e8:	20000350 	.word	0x20000350
    16ec:	3b9aca0d 	.word	0x3b9aca0d

000016f0 <baudrate_set>:
 */

static int baudrate_set(struct device *dev,
			 u32_t baudrate, u32_t sys_clk_freq_hz)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    16f0:	6803      	ldr	r3, [r0, #0]
    16f2:	689b      	ldr	r3, [r3, #8]
    16f4:	681b      	ldr	r3, [r3, #0]

	u32_t divisor; /* baud rate divisor */

	/* Use the common nRF5 macros */
	switch (baudrate) {
    16f6:	f5b1 4fe1 	cmp.w	r1, #28800	; 0x7080
    16fa:	d05b      	beq.n	17b4 <baudrate_set+0xc4>
    16fc:	d910      	bls.n	1720 <baudrate_set+0x30>
    16fe:	f5b1 3f61 	cmp.w	r1, #230400	; 0x38400
    1702:	d05e      	beq.n	17c2 <baudrate_set+0xd2>
    1704:	d833      	bhi.n	176e <baudrate_set+0x7e>
    1706:	f5b1 4f61 	cmp.w	r1, #57600	; 0xe100
    170a:	d055      	beq.n	17b8 <baudrate_set+0xc8>
    170c:	d929      	bls.n	1762 <baudrate_set+0x72>
    170e:	f5b1 3f96 	cmp.w	r1, #76800	; 0x12c00
    1712:	d054      	beq.n	17be <baudrate_set+0xce>
    1714:	f5b1 3fe1 	cmp.w	r1, #115200	; 0x1c200
    1718:	d11b      	bne.n	1752 <baudrate_set+0x62>
		break;
	case 76800:
		divisor = NRF5_UART_BAUDRATE_76800;
		break;
	case 115200:
		divisor = NRF5_UART_BAUDRATE_115200;
    171a:	f04f 72eb 	mov.w	r2, #30801920	; 0x1d60000
		break;
    171e:	e03b      	b.n	1798 <baudrate_set+0xa8>
	switch (baudrate) {
    1720:	f5b1 6f16 	cmp.w	r1, #2400	; 0x960
    1724:	d03f      	beq.n	17a6 <baudrate_set+0xb6>
    1726:	d90b      	bls.n	1740 <baudrate_set+0x50>
    1728:	f5b1 5f16 	cmp.w	r1, #9600	; 0x2580
    172c:	d03e      	beq.n	17ac <baudrate_set+0xbc>
    172e:	d913      	bls.n	1758 <baudrate_set+0x68>
    1730:	f5b1 5f61 	cmp.w	r1, #14400	; 0x3840
    1734:	d03c      	beq.n	17b0 <baudrate_set+0xc0>
    1736:	f5b1 4f96 	cmp.w	r1, #19200	; 0x4b00
    173a:	d10a      	bne.n	1752 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_19200;
    173c:	4a27      	ldr	r2, [pc, #156]	; (17dc <baudrate_set+0xec>)
		break;
    173e:	e02b      	b.n	1798 <baudrate_set+0xa8>
	switch (baudrate) {
    1740:	f5b1 7f16 	cmp.w	r1, #600	; 0x258
    1744:	d046      	beq.n	17d4 <baudrate_set+0xe4>
    1746:	f5b1 6f96 	cmp.w	r1, #1200	; 0x4b0
    174a:	d029      	beq.n	17a0 <baudrate_set+0xb0>
    174c:	f5b1 7f96 	cmp.w	r1, #300	; 0x12c
    1750:	d020      	beq.n	1794 <baudrate_set+0xa4>
		break;
	case 1000000:
		divisor = NRF5_UART_BAUDRATE_1000000;
		break;
	default:
		return -EINVAL;
    1752:	f06f 0015 	mvn.w	r0, #21
	}

	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;

	return 0;
}
    1756:	4770      	bx	lr
	switch (baudrate) {
    1758:	f5b1 5f96 	cmp.w	r1, #4800	; 0x12c0
    175c:	d1f9      	bne.n	1752 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_4800;
    175e:	4a20      	ldr	r2, [pc, #128]	; (17e0 <baudrate_set+0xf0>)
		break;
    1760:	e01a      	b.n	1798 <baudrate_set+0xa8>
	switch (baudrate) {
    1762:	f5b1 4f16 	cmp.w	r1, #38400	; 0x9600
    1766:	d1f4      	bne.n	1752 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_38400;
    1768:	f44f 021d 	mov.w	r2, #10289152	; 0x9d0000
		break;
    176c:	e014      	b.n	1798 <baudrate_set+0xa8>
	switch (baudrate) {
    176e:	f5b1 2fe1 	cmp.w	r1, #460800	; 0x70800
    1772:	d029      	beq.n	17c8 <baudrate_set+0xd8>
    1774:	d908      	bls.n	1788 <baudrate_set+0x98>
    1776:	f5b1 2f61 	cmp.w	r1, #921600	; 0xe1000
    177a:	d028      	beq.n	17ce <baudrate_set+0xde>
    177c:	4a19      	ldr	r2, [pc, #100]	; (17e4 <baudrate_set+0xf4>)
    177e:	4291      	cmp	r1, r2
    1780:	d1e7      	bne.n	1752 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_1000000;
    1782:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
		break;
    1786:	e007      	b.n	1798 <baudrate_set+0xa8>
	switch (baudrate) {
    1788:	4a17      	ldr	r2, [pc, #92]	; (17e8 <baudrate_set+0xf8>)
    178a:	4291      	cmp	r1, r2
    178c:	d1e1      	bne.n	1752 <baudrate_set+0x62>
		divisor = NRF5_UART_BAUDRATE_250000;
    178e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
		break;
    1792:	e001      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_300;
    1794:	f44f 32a0 	mov.w	r2, #81920	; 0x14000
	uart->BAUDRATE = divisor << UART_BAUDRATE_BAUDRATE_Pos;
    1798:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	return 0;
    179c:	2000      	movs	r0, #0
    179e:	4770      	bx	lr
		divisor = NRF5_UART_BAUDRATE_1200;
    17a0:	f44f 229e 	mov.w	r2, #323584	; 0x4f000
		break;
    17a4:	e7f8      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_2400;
    17a6:	f44f 221d 	mov.w	r2, #643072	; 0x9d000
		break;
    17aa:	e7f5      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_9600;
    17ac:	4a0f      	ldr	r2, [pc, #60]	; (17ec <baudrate_set+0xfc>)
		break;
    17ae:	e7f3      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_14400;
    17b0:	4a0f      	ldr	r2, [pc, #60]	; (17f0 <baudrate_set+0x100>)
		break;
    17b2:	e7f1      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_28800;
    17b4:	4a0f      	ldr	r2, [pc, #60]	; (17f4 <baudrate_set+0x104>)
		break;
    17b6:	e7ef      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_57600;
    17b8:	f44f 026b 	mov.w	r2, #15400960	; 0xeb0000
		break;
    17bc:	e7ec      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_76800;
    17be:	4a0e      	ldr	r2, [pc, #56]	; (17f8 <baudrate_set+0x108>)
		break;
    17c0:	e7ea      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_230400;
    17c2:	f04f 726c 	mov.w	r2, #61865984	; 0x3b00000
		break;
    17c6:	e7e7      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_460800;
    17c8:	f04f 62e8 	mov.w	r2, #121634816	; 0x7400000
		break;
    17cc:	e7e4      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_921600;
    17ce:	f04f 6270 	mov.w	r2, #251658240	; 0xf000000
		break;
    17d2:	e7e1      	b.n	1798 <baudrate_set+0xa8>
		divisor = NRF5_UART_BAUDRATE_600;
    17d4:	f44f 321c 	mov.w	r2, #159744	; 0x27000
    17d8:	e7de      	b.n	1798 <baudrate_set+0xa8>
    17da:	bf00      	nop
    17dc:	004ea000 	.word	0x004ea000
    17e0:	0013b000 	.word	0x0013b000
    17e4:	000f4240 	.word	0x000f4240
    17e8:	0003d090 	.word	0x0003d090
    17ec:	00275000 	.word	0x00275000
    17f0:	003af000 	.word	0x003af000
    17f4:	0075c000 	.word	0x0075c000
    17f8:	013a9000 	.word	0x013a9000

000017fc <uart_nrf5_poll_in>:
 * @return 0 if a character arrived, -1 if the input buffer if empty.
 */

static int uart_nrf5_poll_in(struct device *dev, unsigned char *c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    17fc:	6803      	ldr	r3, [r0, #0]
    17fe:	689b      	ldr	r3, [r3, #8]
    1800:	681b      	ldr	r3, [r3, #0]

	if (!uart->EVENTS_RXDRDY) {
    1802:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
    1806:	b132      	cbz	r2, 1816 <uart_nrf5_poll_in+0x1a>
		return -1;
	}

	/* Clear the interrupt */
	uart->EVENTS_RXDRDY = 0;
    1808:	2000      	movs	r0, #0
    180a:	f8c3 0108 	str.w	r0, [r3, #264]	; 0x108

	/* got a character */
	*c = (unsigned char)uart->RXD;
    180e:	f8d3 3518 	ldr.w	r3, [r3, #1304]	; 0x518
    1812:	700b      	strb	r3, [r1, #0]

	return 0;
    1814:	4770      	bx	lr
		return -1;
    1816:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    181a:	4770      	bx	lr

0000181c <uart_nrf5_poll_out>:
 * @return Sent character
 */
static unsigned char uart_nrf5_poll_out(struct device *dev,
					unsigned char c)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    181c:	6803      	ldr	r3, [r0, #0]
    181e:	689b      	ldr	r3, [r3, #8]
    1820:	681a      	ldr	r2, [r3, #0]

	/* send a character */
	uart->TXD = (u8_t)c;
    1822:	f8c2 151c 	str.w	r1, [r2, #1308]	; 0x51c

	/* Wait for transmitter to be ready */
	while (!uart->EVENTS_TXDRDY) {
    1826:	f8d2 311c 	ldr.w	r3, [r2, #284]	; 0x11c
    182a:	2b00      	cmp	r3, #0
    182c:	d0fb      	beq.n	1826 <uart_nrf5_poll_out+0xa>
	}

	uart->EVENTS_TXDRDY = 0;
    182e:	2300      	movs	r3, #0
    1830:	f8c2 311c 	str.w	r3, [r2, #284]	; 0x11c

	return c;
}
    1834:	4608      	mov	r0, r1
    1836:	4770      	bx	lr

00001838 <uart_nrf5_err_check>:

/** Console I/O function */
static int uart_nrf5_err_check(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1838:	6803      	ldr	r3, [r0, #0]
    183a:	689b      	ldr	r3, [r3, #8]
    183c:	681b      	ldr	r3, [r3, #0]
	u32_t error = 0;

	if (uart->EVENTS_ERROR) {
    183e:	f8d3 2124 	ldr.w	r2, [r3, #292]	; 0x124
    1842:	b132      	cbz	r2, 1852 <uart_nrf5_err_check+0x1a>
		/* register bitfields maps to the defines in uart.h */
		error = uart->ERRORSRC;
    1844:	f8d3 0480 	ldr.w	r0, [r3, #1152]	; 0x480

		/* Clear the register */
		uart->ERRORSRC = error;
    1848:	f8c3 0480 	str.w	r0, [r3, #1152]	; 0x480
	}

	error = error & 0x0F;

	return error;
}
    184c:	f000 000f 	and.w	r0, r0, #15
    1850:	4770      	bx	lr
	u32_t error = 0;
    1852:	2000      	movs	r0, #0
    1854:	e7fa      	b.n	184c <uart_nrf5_err_check+0x14>

00001856 <uart_nrf5_fifo_fill>:

#ifdef CONFIG_UART_INTERRUPT_DRIVEN

/** Interrupt driven FIFO fill function */
static int uart_nrf5_fifo_fill(struct device *dev, const u8_t *tx_data, int len)
{
    1856:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1858:	6803      	ldr	r3, [r0, #0]
    185a:	689b      	ldr	r3, [r3, #8]
    185c:	681c      	ldr	r4, [r3, #0]
	u8_t num_tx = 0;
    185e:	2300      	movs	r3, #0

	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    1860:	e007      	b.n	1872 <uart_nrf5_fifo_fill+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_TXDRDY = 0;
    1862:	2000      	movs	r0, #0
    1864:	f8c4 011c 	str.w	r0, [r4, #284]	; 0x11c

		/* Send a character */
		uart->TXD = (u8_t)tx_data[num_tx++];
    1868:	1c58      	adds	r0, r3, #1
    186a:	5ccb      	ldrb	r3, [r1, r3]
    186c:	f8c4 351c 	str.w	r3, [r4, #1308]	; 0x51c
    1870:	b2c3      	uxtb	r3, r0
	while ((len - num_tx > 0) && uart->EVENTS_TXDRDY) {
    1872:	4618      	mov	r0, r3
    1874:	1ad5      	subs	r5, r2, r3
    1876:	2d00      	cmp	r5, #0
    1878:	dd03      	ble.n	1882 <uart_nrf5_fifo_fill+0x2c>
    187a:	f8d4 511c 	ldr.w	r5, [r4, #284]	; 0x11c
    187e:	2d00      	cmp	r5, #0
    1880:	d1ef      	bne.n	1862 <uart_nrf5_fifo_fill+0xc>
	}

	return (int)num_tx;
}
    1882:	bc30      	pop	{r4, r5}
    1884:	4770      	bx	lr

00001886 <uart_nrf5_fifo_read>:

/** Interrupt driven FIFO read function */
static int uart_nrf5_fifo_read(struct device *dev, u8_t *rx_data, const int size)
{
    1886:	b430      	push	{r4, r5}
	volatile struct _uart *uart = UART_STRUCT(dev);
    1888:	6803      	ldr	r3, [r0, #0]
    188a:	689b      	ldr	r3, [r3, #8]
    188c:	681c      	ldr	r4, [r3, #0]
	u8_t num_rx = 0;
    188e:	2300      	movs	r3, #0

	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    1890:	e007      	b.n	18a2 <uart_nrf5_fifo_read+0x1c>
		/* Clear the interrupt */
		uart->EVENTS_RXDRDY = 0;
    1892:	2000      	movs	r0, #0
    1894:	f8c4 0108 	str.w	r0, [r4, #264]	; 0x108

		/* Receive a character */
		rx_data[num_rx++] = (u8_t)uart->RXD;
    1898:	1c58      	adds	r0, r3, #1
    189a:	f8d4 5518 	ldr.w	r5, [r4, #1304]	; 0x518
    189e:	54cd      	strb	r5, [r1, r3]
    18a0:	b2c3      	uxtb	r3, r0
	while ((size - num_rx > 0) && uart->EVENTS_RXDRDY) {
    18a2:	4618      	mov	r0, r3
    18a4:	1ad5      	subs	r5, r2, r3
    18a6:	2d00      	cmp	r5, #0
    18a8:	dd03      	ble.n	18b2 <uart_nrf5_fifo_read+0x2c>
    18aa:	f8d4 5108 	ldr.w	r5, [r4, #264]	; 0x108
    18ae:	2d00      	cmp	r5, #0
    18b0:	d1ef      	bne.n	1892 <uart_nrf5_fifo_read+0xc>
	}

	return num_rx;
}
    18b2:	bc30      	pop	{r4, r5}
    18b4:	4770      	bx	lr

000018b6 <uart_nrf5_irq_tx_enable>:

/** Interrupt driven transfer enabling function */
static void uart_nrf5_irq_tx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18b6:	6803      	ldr	r3, [r0, #0]
    18b8:	689b      	ldr	r3, [r3, #8]
    18ba:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_TX;
    18bc:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    18c0:	f043 0308 	orr.w	r3, r3, #8
    18c4:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    18c8:	4770      	bx	lr

000018ca <uart_nrf5_irq_tx_disable>:
}

/** Interrupt driven transfer disabling function */
static void uart_nrf5_irq_tx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18ca:	6803      	ldr	r3, [r0, #0]
    18cc:	689b      	ldr	r3, [r3, #8]
    18ce:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_TX;
    18d0:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    18d4:	f043 0308 	orr.w	r3, r3, #8
    18d8:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    18dc:	4770      	bx	lr

000018de <uart_nrf5_irq_tx_ready>:
}

/** Interrupt driven transfer ready function */
static int uart_nrf5_irq_tx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18de:	6803      	ldr	r3, [r0, #0]
    18e0:	689b      	ldr	r3, [r3, #8]
    18e2:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_TXDRDY;
    18e4:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    18e8:	4770      	bx	lr

000018ea <uart_nrf5_irq_rx_enable>:

/** Interrupt driven receiver enabling function */
static void uart_nrf5_irq_rx_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18ea:	6803      	ldr	r3, [r0, #0]
    18ec:	689b      	ldr	r3, [r3, #8]
    18ee:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_RX;
    18f0:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    18f4:	f043 0304 	orr.w	r3, r3, #4
    18f8:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    18fc:	4770      	bx	lr

000018fe <uart_nrf5_irq_rx_disable>:
}

/** Interrupt driven receiver disabling function */
static void uart_nrf5_irq_rx_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    18fe:	6803      	ldr	r3, [r0, #0]
    1900:	689b      	ldr	r3, [r3, #8]
    1902:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_RX;
    1904:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    1908:	f043 0304 	orr.w	r3, r3, #4
    190c:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    1910:	4770      	bx	lr

00001912 <uart_nrf5_irq_tx_complete>:
}

/** Interrupt driven transfer empty function */
static int uart_nrf5_irq_tx_complete(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1912:	6803      	ldr	r3, [r0, #0]
    1914:	689b      	ldr	r3, [r3, #8]
    1916:	681b      	ldr	r3, [r3, #0]

	return !(uart->EVENTS_TXDRDY);
    1918:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    191c:	fab0 f080 	clz	r0, r0
    1920:	0940      	lsrs	r0, r0, #5
    1922:	4770      	bx	lr

00001924 <uart_nrf5_irq_rx_ready>:

/** Interrupt driven receiver ready function */
static int uart_nrf5_irq_rx_ready(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1924:	6803      	ldr	r3, [r0, #0]
    1926:	689b      	ldr	r3, [r3, #8]
    1928:	681b      	ldr	r3, [r3, #0]

	return uart->EVENTS_RXDRDY;
    192a:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    192e:	4770      	bx	lr

00001930 <uart_nrf5_irq_err_enable>:

/** Interrupt driven error enabling function */
static void uart_nrf5_irq_err_enable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1930:	6803      	ldr	r3, [r0, #0]
    1932:	689b      	ldr	r3, [r3, #8]
    1934:	681a      	ldr	r2, [r3, #0]

	uart->INTENSET |= UART_IRQ_MASK_ERROR;
    1936:	f8d2 3304 	ldr.w	r3, [r2, #772]	; 0x304
    193a:	f043 0310 	orr.w	r3, r3, #16
    193e:	f8c2 3304 	str.w	r3, [r2, #772]	; 0x304
    1942:	4770      	bx	lr

00001944 <uart_nrf5_irq_err_disable>:
}

/** Interrupt driven error disabling function */
static void uart_nrf5_irq_err_disable(struct device *dev)
{
	volatile struct _uart *uart = UART_STRUCT(dev);
    1944:	6803      	ldr	r3, [r0, #0]
    1946:	689b      	ldr	r3, [r3, #8]
    1948:	681a      	ldr	r2, [r3, #0]

	uart->INTENCLR |= UART_IRQ_MASK_ERROR;
    194a:	f8d2 3308 	ldr.w	r3, [r2, #776]	; 0x308
    194e:	f043 0310 	orr.w	r3, r3, #16
    1952:	f8c2 3308 	str.w	r3, [r2, #776]	; 0x308
    1956:	4770      	bx	lr

00001958 <uart_nrf5_irq_is_pending>:
}

/** Interrupt driven pending status function */
static int uart_nrf5_irq_is_pending(struct device *dev)
{
    1958:	b510      	push	{r4, lr}
    195a:	4604      	mov	r4, r0
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    195c:	f7ff ffbf 	bl	18de <uart_nrf5_irq_tx_ready>
    1960:	b110      	cbz	r0, 1968 <uart_nrf5_irq_is_pending+0x10>
    1962:	2301      	movs	r3, #1
}
    1964:	4618      	mov	r0, r3
    1966:	bd10      	pop	{r4, pc}
	return (uart_nrf5_irq_tx_ready(dev) || uart_nrf5_irq_rx_ready(dev));
    1968:	4620      	mov	r0, r4
    196a:	f7ff ffdb 	bl	1924 <uart_nrf5_irq_rx_ready>
    196e:	4603      	mov	r3, r0
    1970:	2800      	cmp	r0, #0
    1972:	d0f7      	beq.n	1964 <uart_nrf5_irq_is_pending+0xc>
    1974:	2301      	movs	r3, #1
    1976:	e7f5      	b.n	1964 <uart_nrf5_irq_is_pending+0xc>

00001978 <uart_nrf5_irq_update>:

/** Interrupt driven interrupt update function */
static int uart_nrf5_irq_update(struct device *dev)
{
	return 1;
}
    1978:	2001      	movs	r0, #1
    197a:	4770      	bx	lr

0000197c <uart_nrf5_irq_callback_set>:

/** Set the callback function */
static void uart_nrf5_irq_callback_set(struct device *dev, uart_irq_callback_t cb)
{
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    197c:	6883      	ldr	r3, [r0, #8]

	dev_data->cb = cb;
    197e:	6059      	str	r1, [r3, #4]
    1980:	4770      	bx	lr

00001982 <uart_nrf5_isr>:
 * @param arg Argument to ISR.
 *
 * @return N/A
 */
void uart_nrf5_isr(void *arg)
{
    1982:	b508      	push	{r3, lr}
	struct device *dev = arg;
	struct uart_nrf5_dev_data_t * const dev_data = DEV_DATA(dev);
    1984:	6883      	ldr	r3, [r0, #8]

	if (dev_data->cb) {
    1986:	685b      	ldr	r3, [r3, #4]
    1988:	b103      	cbz	r3, 198c <uart_nrf5_isr+0xa>
		dev_data->cb(dev);
    198a:	4798      	blx	r3
    198c:	bd08      	pop	{r3, pc}

0000198e <uart_nrf5_irq_config>:
	    PRE_KERNEL_1, CONFIG_KERNEL_INIT_PRIORITY_DEVICE);


#ifdef CONFIG_UART_INTERRUPT_DRIVEN
static void uart_nrf5_irq_config(struct device *port)
{
    198e:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_UART0_IRQn,
    1990:	2200      	movs	r2, #0
    1992:	2101      	movs	r1, #1
    1994:	2002      	movs	r0, #2
    1996:	f025 fbc1 	bl	2711c <_irq_priority_set>
		    CONFIG_UART_NRF5_IRQ_PRI,
		    uart_nrf5_isr, DEVICE_GET(uart_nrf5_0),
		    0);
	irq_enable(NRF5_IRQ_UART0_IRQn);
    199a:	2002      	movs	r0, #2
    199c:	f025 fb94 	bl	270c8 <_arch_irq_enable>
    19a0:	bd08      	pop	{r3, pc}
	...

000019a4 <uart_nrf5_init>:
{
    19a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    19a6:	4604      	mov	r4, r0
	volatile struct _uart *uart = UART_STRUCT(dev);
    19a8:	6803      	ldr	r3, [r0, #0]
    19aa:	689b      	ldr	r3, [r3, #8]
    19ac:	681d      	ldr	r5, [r3, #0]
	gpio_dev = device_get_binding(CONFIG_GPIO_NRF5_P0_DEV_NAME);
    19ae:	481d      	ldr	r0, [pc, #116]	; (1a24 <uart_nrf5_init+0x80>)
    19b0:	f025 fd58 	bl	27464 <device_get_binding>
    19b4:	4606      	mov	r6, r0
 * @return 0 if successful, negative errno code on failure.
 */
static inline int gpio_pin_configure(struct device *port, u32_t pin,
				     int flags)
{
	const struct gpio_driver_api *api = port->driver_api;
    19b6:	6843      	ldr	r3, [r0, #4]

	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    19b8:	681f      	ldr	r7, [r3, #0]
    19ba:	f240 1301 	movw	r3, #257	; 0x101
    19be:	2206      	movs	r2, #6
    19c0:	2100      	movs	r1, #0
    19c2:	47b8      	blx	r7
	const struct gpio_driver_api *api = port->driver_api;
    19c4:	6873      	ldr	r3, [r6, #4]
	return api->config(port, GPIO_ACCESS_BY_PIN, pin, flags);
    19c6:	681f      	ldr	r7, [r3, #0]
    19c8:	2300      	movs	r3, #0
    19ca:	2208      	movs	r2, #8
    19cc:	4619      	mov	r1, r3
    19ce:	4630      	mov	r0, r6
    19d0:	47b8      	blx	r7
	uart->PSELTXD = CONFIG_UART_NRF5_GPIO_TX_PIN;
    19d2:	2306      	movs	r3, #6
    19d4:	f8c5 350c 	str.w	r3, [r5, #1292]	; 0x50c
	uart->PSELRXD = CONFIG_UART_NRF5_GPIO_RX_PIN;
    19d8:	2308      	movs	r3, #8
    19da:	f8c5 3514 	str.w	r3, [r5, #1300]	; 0x514
	DEV_DATA(dev)->baud_rate = CONFIG_UART_NRF5_BAUD_RATE;
    19de:	68a3      	ldr	r3, [r4, #8]
    19e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
    19e4:	601a      	str	r2, [r3, #0]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    19e6:	68a3      	ldr	r3, [r4, #8]
		     DEV_CFG(dev)->sys_clk_freq);
    19e8:	6822      	ldr	r2, [r4, #0]
    19ea:	6892      	ldr	r2, [r2, #8]
	err = baudrate_set(dev, DEV_DATA(dev)->baud_rate,
    19ec:	6852      	ldr	r2, [r2, #4]
    19ee:	6819      	ldr	r1, [r3, #0]
    19f0:	4620      	mov	r0, r4
    19f2:	f7ff fe7d 	bl	16f0 <baudrate_set>
	if (err) {
    19f6:	4606      	mov	r6, r0
    19f8:	b108      	cbz	r0, 19fe <uart_nrf5_init+0x5a>
}
    19fa:	4630      	mov	r0, r6
    19fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	uart->ENABLE = (UART_ENABLE_ENABLE_Enabled << UART_ENABLE_ENABLE_Pos);
    19fe:	2304      	movs	r3, #4
    1a00:	f8c5 3500 	str.w	r3, [r5, #1280]	; 0x500
	uart->EVENTS_TXDRDY = 0;
    1a04:	2300      	movs	r3, #0
    1a06:	f8c5 311c 	str.w	r3, [r5, #284]	; 0x11c
	uart->EVENTS_RXDRDY = 0;
    1a0a:	f8c5 3108 	str.w	r3, [r5, #264]	; 0x108
	uart->TASKS_STARTTX = 1;
    1a0e:	2301      	movs	r3, #1
    1a10:	60ab      	str	r3, [r5, #8]
	uart->TASKS_STARTRX = 1;
    1a12:	602b      	str	r3, [r5, #0]
	dev->driver_api = &uart_nrf5_driver_api;
    1a14:	4b04      	ldr	r3, [pc, #16]	; (1a28 <uart_nrf5_init+0x84>)
    1a16:	6063      	str	r3, [r4, #4]
	DEV_CFG(dev)->irq_config_func(dev);
    1a18:	6823      	ldr	r3, [r4, #0]
    1a1a:	689b      	ldr	r3, [r3, #8]
    1a1c:	689b      	ldr	r3, [r3, #8]
    1a1e:	4620      	mov	r0, r4
    1a20:	4798      	blx	r3
	return 0;
    1a22:	e7ea      	b.n	19fa <uart_nrf5_init+0x56>
    1a24:	0002a958 	.word	0x0002a958
    1a28:	0002a984 	.word	0x0002a984

00001a2c <rtc_compare_set>:
static void rtc_compare_set(u32_t rtc_ticks)
{
	u32_t rtc_now;

	/* Try to set CC value. We assume the procedure is always successful. */
	RTC_CC_VALUE = rtc_ticks;
    1a2c:	4b08      	ldr	r3, [pc, #32]	; (1a50 <rtc_compare_set+0x24>)
    1a2e:	f8c3 0540 	str.w	r0, [r3, #1344]	; 0x540
	rtc_now = RTC_COUNTER;
    1a32:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	 * by checking if the unsigned subtraction wraps around.
	 * If either of the above are true then instead of waiting for the CC
	 * event to trigger in the form of an interrupt, trigger it directly
	 * using the NVIC.
	 */
	if ((((rtc_ticks - rtc_now) & RTC_MASK) < RTC_MIN_DELTA) ||
    1a36:	1ac0      	subs	r0, r0, r3
    1a38:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
    1a3c:	3802      	subs	r0, #2
    1a3e:	4b05      	ldr	r3, [pc, #20]	; (1a54 <rtc_compare_set+0x28>)
    1a40:	4298      	cmp	r0, r3
    1a42:	d904      	bls.n	1a4e <rtc_compare_set+0x22>
  \details Sets the pending bit of an external interrupt.
  \param [in]      IRQn  Interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_SetPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1a44:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1a48:	4b03      	ldr	r3, [pc, #12]	; (1a58 <rtc_compare_set+0x2c>)
    1a4a:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    1a4e:	4770      	bx	lr
    1a50:	40011000 	.word	0x40011000
    1a54:	007ffffd 	.word	0x007ffffd
    1a58:	e000e100 	.word	0xe000e100

00001a5c <rtc_announce_set_next>:
 * Since this function can be preempted, we need to take some provisions to
 * announce all expected sys ticks that have passed.
 *
 */
static void rtc_announce_set_next(void)
{
    1a5c:	b508      	push	{r3, lr}

	/* Read the RTC counter one single time in the beginning, so that an
	 * increase in the counter during this procedure leads to no race
	 * conditions.
	 */
	rtc_now = RTC_COUNTER;
    1a5e:	4b15      	ldr	r3, [pc, #84]	; (1ab4 <rtc_announce_set_next+0x58>)
    1a60:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504

	/* Calculate how many RTC ticks elapsed since the last sys tick. */
	rtc_elapsed = (rtc_now - rtc_past) & RTC_MASK;
    1a64:	4a14      	ldr	r2, [pc, #80]	; (1ab8 <rtc_announce_set_next+0x5c>)
    1a66:	6811      	ldr	r1, [r2, #0]
    1a68:	1a5b      	subs	r3, r3, r1
    1a6a:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000

	/* If no sys ticks have elapsed, there is no point in incrementing the
	 * counters or announcing it.
	 */
	if (rtc_elapsed >= RTC_TICKS_PER_SYS_TICK) {
    1a6e:	f5b3 7fa3 	cmp.w	r3, #326	; 0x146
    1a72:	d917      	bls.n	1aa4 <rtc_announce_set_next+0x48>
#ifdef CONFIG_TICKLESS_IDLE
		/* Calculate how many sys ticks elapsed since the last sys tick
		 * and notify the kernel if necessary.
		 */
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1a74:	4a11      	ldr	r2, [pc, #68]	; (1abc <rtc_announce_set_next+0x60>)
    1a76:	fba2 0203 	umull	r0, r2, r2, r3
    1a7a:	1a9b      	subs	r3, r3, r2
    1a7c:	eb02 0353 	add.w	r3, r2, r3, lsr #1
    1a80:	0a1b      	lsrs	r3, r3, #8

		if (sys_elapsed > expected_sys_ticks) {
    1a82:	4a0f      	ldr	r2, [pc, #60]	; (1ac0 <rtc_announce_set_next+0x64>)
    1a84:	6810      	ldr	r0, [r2, #0]
    1a86:	4283      	cmp	r3, r0
    1a88:	d800      	bhi.n	1a8c <rtc_announce_set_next+0x30>
		sys_elapsed = rtc_elapsed / RTC_TICKS_PER_SYS_TICK;
    1a8a:	4618      	mov	r0, r3

		/* Store RTC_COUNTER floored to the last sys tick. This is
		 * done, so that ISR can properly calculate that 1 sys tick
		 * has passed.
		 */
		rtc_past = (rtc_past +
    1a8c:	f240 1347 	movw	r3, #327	; 0x147
    1a90:	fb03 1300 	mla	r3, r3, r0, r1
				(sys_elapsed * RTC_TICKS_PER_SYS_TICK)
			   ) & RTC_MASK;
    1a94:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
		rtc_past = (rtc_past +
    1a98:	4a07      	ldr	r2, [pc, #28]	; (1ab8 <rtc_announce_set_next+0x5c>)
    1a9a:	6013      	str	r3, [r2, #0]

		_sys_idle_elapsed_ticks = sys_elapsed;
    1a9c:	4b09      	ldr	r3, [pc, #36]	; (1ac4 <rtc_announce_set_next+0x68>)
    1a9e:	6018      	str	r0, [r3, #0]
		_sys_clock_tick_announce();
    1aa0:	f027 f828 	bl	28af4 <_nano_sys_clock_tick_announce>
	}

	/* Set the RTC to the next sys tick */
	rtc_compare_set(rtc_past + RTC_TICKS_PER_SYS_TICK);
    1aa4:	4b04      	ldr	r3, [pc, #16]	; (1ab8 <rtc_announce_set_next+0x5c>)
    1aa6:	6818      	ldr	r0, [r3, #0]
    1aa8:	f200 1047 	addw	r0, r0, #327	; 0x147
    1aac:	f7ff ffbe 	bl	1a2c <rtc_compare_set>
    1ab0:	bd08      	pop	{r3, pc}
    1ab2:	bf00      	nop
    1ab4:	40011000 	.word	0x40011000
    1ab8:	20000358 	.word	0x20000358
    1abc:	90d4f121 	.word	0x90d4f121
    1ac0:	20000354 	.word	0x20000354
    1ac4:	2000c5b8 	.word	0x2000c5b8

00001ac8 <rtc1_nrf5_isr>:
 * 400. However, the ISR is preempted for a number of sys ticks, until 450 in
 * this example. The ISR will then announce the number of sys ticks it was
 * delayed (2), and schedule the next sys tick (5) at 500.
 */
static void rtc1_nrf5_isr(void *arg)
{
    1ac8:	b508      	push	{r3, lr}

	ARG_UNUSED(arg);
	RTC_CC_EVENT = 0;
    1aca:	2200      	movs	r2, #0
    1acc:	4b02      	ldr	r3, [pc, #8]	; (1ad8 <rtc1_nrf5_isr+0x10>)
    1ace:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
	 */
	expected_sys_ticks = 0;
	/* Anounce elapsed of _sys_idle_elapsed_ticks systicks*/
	_sys_clock_tick_announce();
#else
	rtc_announce_set_next();
    1ad2:	f7ff ffc3 	bl	1a5c <rtc_announce_set_next>
    1ad6:	bd08      	pop	{r3, pc}
    1ad8:	40011000 	.word	0x40011000

00001adc <_timer_idle_enter>:
{
    1adc:	b508      	push	{r3, lr}
	if ((sys_ticks < 0) ||
    1ade:	f246 4335 	movw	r3, #25653	; 0x6435
    1ae2:	4298      	cmp	r0, r3
    1ae4:	d900      	bls.n	1ae8 <_timer_idle_enter+0xc>
		sys_ticks = RTC_HALF / RTC_TICKS_PER_SYS_TICK;
    1ae6:	4618      	mov	r0, r3
	expected_sys_ticks = sys_ticks;
    1ae8:	4b05      	ldr	r3, [pc, #20]	; (1b00 <_timer_idle_enter+0x24>)
    1aea:	6018      	str	r0, [r3, #0]
	rtc_compare_set(rtc_past + (sys_ticks * RTC_TICKS_PER_SYS_TICK));
    1aec:	4b05      	ldr	r3, [pc, #20]	; (1b04 <_timer_idle_enter+0x28>)
    1aee:	681b      	ldr	r3, [r3, #0]
    1af0:	f240 1247 	movw	r2, #327	; 0x147
    1af4:	fb02 3000 	mla	r0, r2, r0, r3
    1af8:	f7ff ff98 	bl	1a2c <rtc_compare_set>
    1afc:	bd08      	pop	{r3, pc}
    1afe:	bf00      	nop
    1b00:	20000354 	.word	0x20000354
    1b04:	20000358 	.word	0x20000358

00001b08 <_timer_idle_exit>:
{
    1b08:	b508      	push	{r3, lr}
	RTC_CC_EVENT = 0;
    1b0a:	2200      	movs	r2, #0
    1b0c:	4b06      	ldr	r3, [pc, #24]	; (1b28 <_timer_idle_exit+0x20>)
    1b0e:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
  \details Clears the pending bit of an external interrupt.
  \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    1b12:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b16:	4b05      	ldr	r3, [pc, #20]	; (1b2c <_timer_idle_exit+0x24>)
    1b18:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	rtc_announce_set_next();
    1b1c:	f7ff ff9e 	bl	1a5c <rtc_announce_set_next>
	expected_sys_ticks = 1;
    1b20:	2201      	movs	r2, #1
    1b22:	4b03      	ldr	r3, [pc, #12]	; (1b30 <_timer_idle_exit+0x28>)
    1b24:	601a      	str	r2, [r3, #0]
    1b26:	bd08      	pop	{r3, pc}
    1b28:	40011000 	.word	0x40011000
    1b2c:	e000e100 	.word	0xe000e100
    1b30:	20000354 	.word	0x20000354

00001b34 <_sys_clock_driver_init>:
#endif

}

int _sys_clock_driver_init(struct device *device)
{
    1b34:	b570      	push	{r4, r5, r6, lr}
	struct device *clock;

	ARG_UNUSED(device);

	clock = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
    1b36:	4818      	ldr	r0, [pc, #96]	; (1b98 <_sys_clock_driver_init+0x64>)
    1b38:	f025 fc94 	bl	27464 <device_get_binding>
	if (!clock) {
    1b3c:	b348      	cbz	r0, 1b92 <_sys_clock_driver_init+0x5e>
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_on(struct device *dev,
				   clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    1b3e:	6842      	ldr	r2, [r0, #4]

	return api->on(dev, sys);
    1b40:	6812      	ldr	r2, [r2, #0]
    1b42:	2101      	movs	r1, #1
    1b44:	4790      	blx	r2
		return -1;
	}

	clock_control_on(clock, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	rtc_past = 0;
    1b46:	2400      	movs	r4, #0
    1b48:	4b14      	ldr	r3, [pc, #80]	; (1b9c <_sys_clock_driver_init+0x68>)
    1b4a:	601c      	str	r4, [r3, #0]

#ifdef CONFIG_TICKLESS_IDLE
	expected_sys_ticks = 1;
    1b4c:	2601      	movs	r6, #1
    1b4e:	4b14      	ldr	r3, [pc, #80]	; (1ba0 <_sys_clock_driver_init+0x6c>)
    1b50:	601e      	str	r6, [r3, #0]
#endif /* CONFIG_TICKLESS_IDLE */

	/* TODO: replace with counter driver to access RTC */
	SYS_CLOCK_RTC->PRESCALER = 0;
    1b52:	4d14      	ldr	r5, [pc, #80]	; (1ba4 <_sys_clock_driver_init+0x70>)
    1b54:	f8c5 4508 	str.w	r4, [r5, #1288]	; 0x508
	SYS_CLOCK_RTC->CC[0] = RTC_TICKS_PER_SYS_TICK;
    1b58:	f240 1347 	movw	r3, #327	; 0x147
    1b5c:	f8c5 3540 	str.w	r3, [r5, #1344]	; 0x540
	SYS_CLOCK_RTC->EVTENSET = RTC_EVTENSET_COMPARE0_Msk;
    1b60:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    1b64:	f8c5 3344 	str.w	r3, [r5, #836]	; 0x344
	SYS_CLOCK_RTC->INTENSET = RTC_INTENSET_COMPARE0_Msk;
    1b68:	f8c5 3304 	str.w	r3, [r5, #772]	; 0x304

	/* Clear the event flag and possible pending interrupt */
	RTC_CC_EVENT = 0;
    1b6c:	f8c5 4140 	str.w	r4, [r5, #320]	; 0x140
    1b70:	f44f 3200 	mov.w	r2, #131072	; 0x20000
    1b74:	4b0c      	ldr	r3, [pc, #48]	; (1ba8 <_sys_clock_driver_init+0x74>)
    1b76:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	NVIC_ClearPendingIRQ(NRF5_IRQ_RTC1_IRQn);

	IRQ_CONNECT(NRF5_IRQ_RTC1_IRQn, 1, rtc1_nrf5_isr, 0, 0);
    1b7a:	4622      	mov	r2, r4
    1b7c:	4631      	mov	r1, r6
    1b7e:	2011      	movs	r0, #17
    1b80:	f025 facc 	bl	2711c <_irq_priority_set>
	irq_enable(NRF5_IRQ_RTC1_IRQn);
    1b84:	2011      	movs	r0, #17
    1b86:	f025 fa9f 	bl	270c8 <_arch_irq_enable>

	SYS_CLOCK_RTC->TASKS_CLEAR = 1;
    1b8a:	60ae      	str	r6, [r5, #8]
	SYS_CLOCK_RTC->TASKS_START = 1;
    1b8c:	602e      	str	r6, [r5, #0]

	return 0;
    1b8e:	4620      	mov	r0, r4
    1b90:	bd70      	pop	{r4, r5, r6, pc}
		return -1;
    1b92:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
    1b96:	bd70      	pop	{r4, r5, r6, pc}
    1b98:	0002a960 	.word	0x0002a960
    1b9c:	20000358 	.word	0x20000358
    1ba0:	20000354 	.word	0x20000354
    1ba4:	40011000 	.word	0x40011000
    1ba8:	e000e100 	.word	0xe000e100

00001bac <_timer_cycle_get_32>:

u32_t _timer_cycle_get_32(void)
{
    1bac:	b410      	push	{r4}
	u32_t elapsed_cycles;
	u32_t sys_clock_tick_count;
	u32_t rtc_prev;
	u32_t rtc_now;

	rtc_now = RTC_COUNTER;
    1bae:	4b0d      	ldr	r3, [pc, #52]	; (1be4 <_timer_cycle_get_32+0x38>)
    1bb0:	f8d3 1504 	ldr.w	r1, [r3, #1284]	; 0x504
    1bb4:	e000      	b.n	1bb8 <_timer_cycle_get_32+0xc>
		sys_clock_tick_count = _sys_clock_tick_count;
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
					     RTC_TICKS_PER_SYS_TICK)) &
				 RTC_MASK;
		rtc_prev = rtc_now;
		rtc_now = RTC_COUNTER;
    1bb6:	4619      	mov	r1, r3
		sys_clock_tick_count = _sys_clock_tick_count;
    1bb8:	4b0b      	ldr	r3, [pc, #44]	; (1be8 <_timer_cycle_get_32+0x3c>)
    1bba:	e9d3 2300 	ldrd	r2, r3, [r3]
    1bbe:	4614      	mov	r4, r2
		elapsed_cycles = (rtc_now - (sys_clock_tick_count *
    1bc0:	f240 1047 	movw	r0, #327	; 0x147
    1bc4:	fb00 1212 	mls	r2, r0, r2, r1
    1bc8:	f022 427f 	bic.w	r2, r2, #4278190080	; 0xff000000
		rtc_now = RTC_COUNTER;
    1bcc:	4b05      	ldr	r3, [pc, #20]	; (1be4 <_timer_cycle_get_32+0x38>)
    1bce:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
	} while (rtc_now != rtc_prev);
    1bd2:	4299      	cmp	r1, r3
    1bd4:	d1ef      	bne.n	1bb6 <_timer_cycle_get_32+0xa>

	return (sys_clock_tick_count * sys_clock_hw_cycles_per_tick) +
    1bd6:	4b05      	ldr	r3, [pc, #20]	; (1bec <_timer_cycle_get_32+0x40>)
    1bd8:	6818      	ldr	r0, [r3, #0]
	       elapsed_cycles;
}
    1bda:	fb00 2004 	mla	r0, r0, r4, r2
    1bde:	bc10      	pop	{r4}
    1be0:	4770      	bx	lr
    1be2:	bf00      	nop
    1be4:	40011000 	.word	0x40011000
    1be8:	20002bd0 	.word	0x20002bd0
    1bec:	2000c5bc 	.word	0x2000c5bc

00001bf0 <gpiote_find_channel>:
#define GPIOTE_CFG_PIN(pin) ((pin << GPIOTE_CONFIG_PSEL_Pos) & GPIOTE_CONFIG_PSEL_Msk)
#define GPIOTE_CFG_PIN_GET(config) ((config & GPIOTE_CONFIG_PSEL_Msk) >> \
				GPIOTE_CONFIG_PSEL_Pos)

static int gpiote_find_channel(struct device *dev, u32_t pin)
{
    1bf0:	b410      	push	{r4}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1bf2:	6803      	ldr	r3, [r0, #0]
    1bf4:	689b      	ldr	r3, [r3, #8]
    1bf6:	689c      	ldr	r4, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1bf8:	6882      	ldr	r2, [r0, #8]
	int i;

	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1bfa:	2000      	movs	r0, #0
    1bfc:	e000      	b.n	1c00 <gpiote_find_channel+0x10>
    1bfe:	3001      	adds	r0, #1
    1c00:	2807      	cmp	r0, #7
    1c02:	dc0d      	bgt.n	1c20 <gpiote_find_channel+0x30>
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1c04:	68d3      	ldr	r3, [r2, #12]
    1c06:	40c3      	lsrs	r3, r0
    1c08:	f013 0f01 	tst.w	r3, #1
    1c0c:	d0f7      	beq.n	1bfe <gpiote_find_channel+0xe>
		    (GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]) == pin)) {
    1c0e:	f500 73a2 	add.w	r3, r0, #324	; 0x144
    1c12:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
    1c16:	f3c3 2304 	ubfx	r3, r3, #8, #5
		if ((data->gpiote_chan_mask & BIT(i)) &&
    1c1a:	428b      	cmp	r3, r1
    1c1c:	d1ef      	bne.n	1bfe <gpiote_find_channel+0xe>
    1c1e:	e001      	b.n	1c24 <gpiote_find_channel+0x34>
			return i;
		}
	}

	return -ENODEV;
    1c20:	f06f 0012 	mvn.w	r0, #18
}
    1c24:	bc10      	pop	{r4}
    1c26:	4770      	bx	lr

00001c28 <gpio_nrf5_read>:
}

static int gpio_nrf5_read(struct device *dev,
			  int access_op, u32_t pin, u32_t *value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1c28:	6800      	ldr	r0, [r0, #0]
    1c2a:	6880      	ldr	r0, [r0, #8]
    1c2c:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1c2e:	b121      	cbz	r1, 1c3a <gpio_nrf5_read+0x12>
		*value = (gpio->IN >> pin) & 0x1;
	} else {
		*value = gpio->IN;
    1c30:	f8d0 2510 	ldr.w	r2, [r0, #1296]	; 0x510
    1c34:	601a      	str	r2, [r3, #0]
	}
	return 0;
}
    1c36:	2000      	movs	r0, #0
    1c38:	4770      	bx	lr
		*value = (gpio->IN >> pin) & 0x1;
    1c3a:	f8d0 1510 	ldr.w	r1, [r0, #1296]	; 0x510
    1c3e:	fa21 f202 	lsr.w	r2, r1, r2
    1c42:	f002 0201 	and.w	r2, r2, #1
    1c46:	601a      	str	r2, [r3, #0]
    1c48:	e7f5      	b.n	1c36 <gpio_nrf5_read+0xe>

00001c4a <gpio_nrf5_write>:

static int gpio_nrf5_write(struct device *dev,
			   int access_op, u32_t pin, u32_t value)
{
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1c4a:	6800      	ldr	r0, [r0, #0]
    1c4c:	6880      	ldr	r0, [r0, #8]
    1c4e:	6800      	ldr	r0, [r0, #0]

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1c50:	b961      	cbnz	r1, 1c6c <gpio_nrf5_write+0x22>
		if (value) { /* 1 */
    1c52:	b12b      	cbz	r3, 1c60 <gpio_nrf5_write+0x16>
			gpio->OUTSET = BIT(pin);
    1c54:	2301      	movs	r3, #1
    1c56:	fa03 f202 	lsl.w	r2, r3, r2
    1c5a:	f8c0 2508 	str.w	r2, [r0, #1288]	; 0x508
    1c5e:	e007      	b.n	1c70 <gpio_nrf5_write+0x26>
		} else { /* 0 */
			gpio->OUTCLR = BIT(pin);
    1c60:	2301      	movs	r3, #1
    1c62:	fa03 f202 	lsl.w	r2, r3, r2
    1c66:	f8c0 250c 	str.w	r2, [r0, #1292]	; 0x50c
    1c6a:	e001      	b.n	1c70 <gpio_nrf5_write+0x26>
		}
	} else {
		gpio->OUT = value;
    1c6c:	f8c0 3504 	str.w	r3, [r0, #1284]	; 0x504
	}
	return 0;
}
    1c70:	2000      	movs	r0, #0
    1c72:	4770      	bx	lr

00001c74 <gpio_nrf5_manage_callback>:

static int gpio_nrf5_manage_callback(struct device *dev,
				    struct gpio_callback *callback, bool set)
{
    1c74:	b410      	push	{r4}
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1c76:	6884      	ldr	r4, [r0, #8]
					 bool set)
{
	__ASSERT(callback, "No callback!");
	__ASSERT(callback->handler, "No callback handler!");

	if (set) {
    1c78:	b14a      	cbz	r2, 1c8e <gpio_nrf5_manage_callback+0x1a>
 * @param node A pointer on the node to prepend
 */
static inline void sys_slist_prepend(sys_slist_t *list,
				     sys_snode_t *node)
{
	node->next = list->head;
    1c7a:	6823      	ldr	r3, [r4, #0]
    1c7c:	600b      	str	r3, [r1, #0]
	list->head = node;
    1c7e:	6021      	str	r1, [r4, #0]

	if (!list->tail) {
    1c80:	6863      	ldr	r3, [r4, #4]
    1c82:	b113      	cbz	r3, 1c8a <gpio_nrf5_manage_callback+0x16>

	_gpio_manage_callback(&data->callbacks, callback, set);

	return 0;
}
    1c84:	2000      	movs	r0, #0
    1c86:	bc10      	pop	{r4}
    1c88:	4770      	bx	lr
		list->tail = list->head;
    1c8a:	6061      	str	r1, [r4, #4]
    1c8c:	e7fa      	b.n	1c84 <gpio_nrf5_manage_callback+0x10>
		sys_slist_prepend(callbacks, &callback->node);
	} else {
		sys_slist_find_and_remove(callbacks, &callback->node);
    1c8e:	4608      	mov	r0, r1
	return list->head;
    1c90:	6823      	ldr	r3, [r4, #0]
 * @return true if node was removed
 */
static inline bool sys_slist_find_and_remove(sys_slist_t *list,
					     sys_snode_t *node)
{
	sys_snode_t *prev = NULL;
    1c92:	2200      	movs	r2, #0
	sys_snode_t *test;

	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1c94:	2b00      	cmp	r3, #0
    1c96:	d0f5      	beq.n	1c84 <gpio_nrf5_manage_callback+0x10>
		if (test == node) {
    1c98:	4298      	cmp	r0, r3
    1c9a:	d002      	beq.n	1ca2 <gpio_nrf5_manage_callback+0x2e>
			sys_slist_remove(list, prev, node);
			return true;
		}

		prev = test;
    1c9c:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    1c9e:	681b      	ldr	r3, [r3, #0]
    1ca0:	e7f8      	b.n	1c94 <gpio_nrf5_manage_callback+0x20>
	if (!prev_node) {
    1ca2:	b13a      	cbz	r2, 1cb4 <gpio_nrf5_manage_callback+0x40>
		prev_node->next = node->next;
    1ca4:	680b      	ldr	r3, [r1, #0]
    1ca6:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    1ca8:	6863      	ldr	r3, [r4, #4]
    1caa:	4299      	cmp	r1, r3
    1cac:	d009      	beq.n	1cc2 <gpio_nrf5_manage_callback+0x4e>
	node->next = NULL;
    1cae:	2300      	movs	r3, #0
    1cb0:	600b      	str	r3, [r1, #0]
    1cb2:	e7e7      	b.n	1c84 <gpio_nrf5_manage_callback+0x10>
		list->head = node->next;
    1cb4:	680b      	ldr	r3, [r1, #0]
    1cb6:	6023      	str	r3, [r4, #0]
		if (list->tail == node) {
    1cb8:	6862      	ldr	r2, [r4, #4]
    1cba:	4291      	cmp	r1, r2
    1cbc:	d1f7      	bne.n	1cae <gpio_nrf5_manage_callback+0x3a>
			list->tail = list->head;
    1cbe:	6063      	str	r3, [r4, #4]
    1cc0:	e7f5      	b.n	1cae <gpio_nrf5_manage_callback+0x3a>
			list->tail = prev_node;
    1cc2:	6062      	str	r2, [r4, #4]
    1cc4:	e7f3      	b.n	1cae <gpio_nrf5_manage_callback+0x3a>

00001cc6 <gpio_nrf5_enable_callback>:


static int gpio_nrf5_enable_callback(struct device *dev,
				    int access_op, u32_t pin)
{
    1cc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1cc8:	6803      	ldr	r3, [r0, #0]
    1cca:	689b      	ldr	r3, [r3, #8]
    1ccc:	689e      	ldr	r6, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1cce:	6887      	ldr	r7, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1cd0:	b9b9      	cbnz	r1, 1d02 <gpio_nrf5_enable_callback+0x3c>
    1cd2:	460d      	mov	r5, r1
    1cd4:	4614      	mov	r4, r2

		i = gpiote_find_channel(dev, pin);
    1cd6:	4611      	mov	r1, r2
    1cd8:	f7ff ff8a 	bl	1bf0 <gpiote_find_channel>
		if (i < 0) {
    1cdc:	2800      	cmp	r0, #0
    1cde:	db12      	blt.n	1d06 <gpio_nrf5_enable_callback+0x40>
			return i;
		}

		data->pin_callback_enables |= BIT(pin);
    1ce0:	2301      	movs	r3, #1
    1ce2:	fa03 f404 	lsl.w	r4, r3, r4
    1ce6:	68ba      	ldr	r2, [r7, #8]
    1ce8:	4314      	orrs	r4, r2
    1cea:	60bc      	str	r4, [r7, #8]
		/* clear event before any interrupt triggers */
		gpiote->EVENTS_IN[i] = 0;
    1cec:	f100 0240 	add.w	r2, r0, #64	; 0x40
    1cf0:	2100      	movs	r1, #0
    1cf2:	f846 1022 	str.w	r1, [r6, r2, lsl #2]
		/* enable interrupt for the GPIOTE channel */
		gpiote->INTENSET = BIT(i);
    1cf6:	fa03 f000 	lsl.w	r0, r3, r0
    1cfa:	f8c6 0304 	str.w	r0, [r6, #772]	; 0x304
	} else {
		return -ENOTSUP;
	}

	return 0;
    1cfe:	4628      	mov	r0, r5
    1d00:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1d02:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    1d06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001d08 <gpio_nrf5_disable_callback>:


static int gpio_nrf5_disable_callback(struct device *dev,
				     int access_op, u32_t pin)
{
    1d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1d0a:	6803      	ldr	r3, [r0, #0]
    1d0c:	689b      	ldr	r3, [r3, #8]
    1d0e:	689f      	ldr	r7, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1d10:	6886      	ldr	r6, [r0, #8]
	int i;

	if (access_op == GPIO_ACCESS_BY_PIN) {
    1d12:	b991      	cbnz	r1, 1d3a <gpio_nrf5_disable_callback+0x32>
    1d14:	460d      	mov	r5, r1
    1d16:	4614      	mov	r4, r2
		i = gpiote_find_channel(dev, pin);
    1d18:	4611      	mov	r1, r2
    1d1a:	f7ff ff69 	bl	1bf0 <gpiote_find_channel>
		if (i < 0) {
    1d1e:	2800      	cmp	r0, #0
    1d20:	db0d      	blt.n	1d3e <gpio_nrf5_disable_callback+0x36>
			return i;
		}

		data->pin_callback_enables &= ~(BIT(pin));
    1d22:	2301      	movs	r3, #1
    1d24:	fa03 f404 	lsl.w	r4, r3, r4
    1d28:	68b2      	ldr	r2, [r6, #8]
    1d2a:	ea22 0404 	bic.w	r4, r2, r4
    1d2e:	60b4      	str	r4, [r6, #8]
		/* disable interrupt for the GPIOTE channel */
		gpiote->INTENCLR = BIT(i);
    1d30:	4083      	lsls	r3, r0
    1d32:	f8c7 3308 	str.w	r3, [r7, #776]	; 0x308
	} else {
		return -ENOTSUP;
	}

	return 0;
    1d36:	4628      	mov	r0, r5
    1d38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOTSUP;
    1d3a:	f06f 0085 	mvn.w	r0, #133	; 0x85
}
    1d3e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00001d40 <gpio_nrf5_P0_init>:
		    &gpio_data_P0, &gpio_nrf5_P0_cfg,
		    POST_KERNEL, CONFIG_KERNEL_INIT_PRIORITY_DEFAULT,
		    &gpio_nrf5_drv_api_funcs);

static int gpio_nrf5_P0_init(struct device *dev)
{
    1d40:	b508      	push	{r3, lr}
	IRQ_CONNECT(NRF5_IRQ_GPIOTE_IRQn, CONFIG_GPIO_NRF5_PORT_P0_PRI,
    1d42:	2200      	movs	r2, #0
    1d44:	2101      	movs	r1, #1
    1d46:	2006      	movs	r0, #6
    1d48:	f025 f9e8 	bl	2711c <_irq_priority_set>
		    gpio_nrf5_port_isr, DEVICE_GET(gpio_nrf5_P0), 0);

	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1d4c:	2006      	movs	r0, #6
    1d4e:	f025 f9bb 	bl	270c8 <_arch_irq_enable>

	return 0;
}
    1d52:	2000      	movs	r0, #0
    1d54:	bd08      	pop	{r3, pc}

00001d56 <gpio_nrf5_port_isr>:
{
    1d56:	b570      	push	{r4, r5, r6, lr}
    1d58:	4605      	mov	r5, r0
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1d5a:	6803      	ldr	r3, [r0, #0]
    1d5c:	689b      	ldr	r3, [r3, #8]
    1d5e:	6899      	ldr	r1, [r3, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1d60:	6884      	ldr	r4, [r0, #8]
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1d62:	2300      	movs	r3, #0
	u32_t enabled_int, int_status = 0;
    1d64:	461e      	mov	r6, r3
	for (i = 0; i < GPIOTE_CHAN_COUNT; i++) {
    1d66:	e000      	b.n	1d6a <gpio_nrf5_port_isr+0x14>
    1d68:	3301      	adds	r3, #1
    1d6a:	2b07      	cmp	r3, #7
    1d6c:	dc14      	bgt.n	1d98 <gpio_nrf5_port_isr+0x42>
		if (gpiote->EVENTS_IN[i]) {
    1d6e:	f103 0240 	add.w	r2, r3, #64	; 0x40
    1d72:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
    1d76:	2a00      	cmp	r2, #0
    1d78:	d0f6      	beq.n	1d68 <gpio_nrf5_port_isr+0x12>
			gpiote->EVENTS_IN[i] = 0;
    1d7a:	f103 0240 	add.w	r2, r3, #64	; 0x40
    1d7e:	2000      	movs	r0, #0
    1d80:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
			int_status |= BIT(GPIOTE_CFG_PIN_GET(gpiote->CONFIG[i]));
    1d84:	f503 72a2 	add.w	r2, r3, #324	; 0x144
    1d88:	f851 0022 	ldr.w	r0, [r1, r2, lsl #2]
    1d8c:	f3c0 2004 	ubfx	r0, r0, #8, #5
    1d90:	2201      	movs	r2, #1
    1d92:	4082      	lsls	r2, r0
    1d94:	4316      	orrs	r6, r2
    1d96:	e7e7      	b.n	1d68 <gpio_nrf5_port_isr+0x12>
	enabled_int = int_status & data->pin_callback_enables;
    1d98:	68a3      	ldr	r3, [r4, #8]
    1d9a:	401e      	ands	r6, r3
	irq_disable(NRF5_IRQ_GPIOTE_IRQn);
    1d9c:	2006      	movs	r0, #6
    1d9e:	f025 f9a1 	bl	270e4 <_arch_irq_disable>
	return list->head;
    1da2:	6824      	ldr	r4, [r4, #0]
    1da4:	e005      	b.n	1db2 <gpio_nrf5_port_isr+0x5c>
					struct device *port,
					u32_t pins)
{
	struct gpio_callback *cb;

	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1da6:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    1da8:	b16c      	cbz	r4, 1dc6 <gpio_nrf5_port_isr+0x70>
	return node->next;
    1daa:	6823      	ldr	r3, [r4, #0]
    1dac:	b16b      	cbz	r3, 1dca <gpio_nrf5_port_isr+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    1dae:	b172      	cbz	r2, 1dce <gpio_nrf5_port_isr+0x78>
	return node->next;
    1db0:	6824      	ldr	r4, [r4, #0]
    1db2:	b174      	cbz	r4, 1dd2 <gpio_nrf5_port_isr+0x7c>
		if (cb->pin_mask & pins) {
    1db4:	68a3      	ldr	r3, [r4, #8]
    1db6:	421e      	tst	r6, r3
    1db8:	d0f5      	beq.n	1da6 <gpio_nrf5_port_isr+0x50>
			__ASSERT(cb->handler, "No callback handler!");
			cb->handler(port, cb, pins);
    1dba:	6863      	ldr	r3, [r4, #4]
    1dbc:	4632      	mov	r2, r6
    1dbe:	4621      	mov	r1, r4
    1dc0:	4628      	mov	r0, r5
    1dc2:	4798      	blx	r3
    1dc4:	e7ef      	b.n	1da6 <gpio_nrf5_port_isr+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    1dc6:	4623      	mov	r3, r4
    1dc8:	e7f0      	b.n	1dac <gpio_nrf5_port_isr+0x56>
	SYS_SLIST_FOR_EACH_CONTAINER(list, cb, node) {
    1dca:	2400      	movs	r4, #0
    1dcc:	e7f1      	b.n	1db2 <gpio_nrf5_port_isr+0x5c>
    1dce:	2400      	movs	r4, #0
    1dd0:	e7ef      	b.n	1db2 <gpio_nrf5_port_isr+0x5c>
	irq_enable(NRF5_IRQ_GPIOTE_IRQn);
    1dd2:	2006      	movs	r0, #6
    1dd4:	f025 f978 	bl	270c8 <_arch_irq_enable>
    1dd8:	bd70      	pop	{r4, r5, r6, pc}
	...

00001ddc <gpio_nrf5_config>:
{
    1ddc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	volatile struct _gpiote *gpiote = GPIOTE_STRUCT(dev);
    1de0:	6804      	ldr	r4, [r0, #0]
    1de2:	68a5      	ldr	r5, [r4, #8]
    1de4:	68ae      	ldr	r6, [r5, #8]
	struct gpio_nrf5_data *data = DEV_GPIO_DATA(dev);
    1de6:	6887      	ldr	r7, [r0, #8]
	volatile struct _gpio *gpio = GPIO_STRUCT(dev);
    1de8:	682d      	ldr	r5, [r5, #0]
	if (access_op == GPIO_ACCESS_BY_PIN) {
    1dea:	2900      	cmp	r1, #0
    1dec:	d17f      	bne.n	1eee <gpio_nrf5_config+0x112>
    1dee:	4688      	mov	r8, r1
		int ds_low = (flags & GPIO_DS_LOW_MASK) >> GPIO_DS_LOW_POS;
    1df0:	f3c3 3e01 	ubfx	lr, r3, #12, #2
		int ds_high = (flags & GPIO_DS_HIGH_MASK) >> GPIO_DS_HIGH_POS;
    1df4:	f3c3 3181 	ubfx	r1, r3, #14, #2
		if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_UP) {
    1df8:	f403 7440 	and.w	r4, r3, #768	; 0x300
    1dfc:	f5b4 7f80 	cmp.w	r4, #256	; 0x100
    1e00:	d025      	beq.n	1e4e <gpio_nrf5_config+0x72>
		} else if ((flags & GPIO_PUD_MASK) == GPIO_PUD_PULL_DOWN) {
    1e02:	f5b4 7f00 	cmp.w	r4, #512	; 0x200
    1e06:	d024      	beq.n	1e52 <gpio_nrf5_config+0x76>
		u8_t pull = GPIO_PULL_DISABLE;
    1e08:	2400      	movs	r4, #0
		if ((flags & GPIO_DIR_MASK) == GPIO_DIR_OUT) {
    1e0a:	f013 0f01 	tst.w	r3, #1
    1e0e:	d030      	beq.n	1e72 <gpio_nrf5_config+0x96>
			if (pull == GPIO_PULL_UP) {
    1e10:	2c0c      	cmp	r4, #12
    1e12:	d020      	beq.n	1e56 <gpio_nrf5_config+0x7a>
			} else if (pull == GPIO_PULL_DOWN) {
    1e14:	2c04      	cmp	r4, #4
    1e16:	d025      	beq.n	1e64 <gpio_nrf5_config+0x88>
					      drive_strength[ds_low][ds_high] |
    1e18:	eb01 0e8e 	add.w	lr, r1, lr, lsl #2
    1e1c:	4938      	ldr	r1, [pc, #224]	; (1f00 <gpio_nrf5_config+0x124>)
    1e1e:	f851 102e 	ldr.w	r1, [r1, lr, lsl #2]
    1e22:	4321      	orrs	r1, r4
					      GPIO_INPUT_DISCONNECT |
    1e24:	f041 0103 	orr.w	r1, r1, #3
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    1e28:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    1e2c:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
	if (flags & GPIO_INT) {
    1e30:	f013 0102 	ands.w	r1, r3, #2
    1e34:	d04a      	beq.n	1ecc <gpio_nrf5_config+0xf0>
		if (flags & GPIO_INT_EDGE) {
    1e36:	f013 0f20 	tst.w	r3, #32
    1e3a:	d05b      	beq.n	1ef4 <gpio_nrf5_config+0x118>
			if (flags & GPIO_INT_DOUBLE_EDGE) {
    1e3c:	f013 0f40 	tst.w	r3, #64	; 0x40
    1e40:	d123      	bne.n	1e8a <gpio_nrf5_config+0xae>
			} else if (flags & GPIO_INT_ACTIVE_HIGH) {
    1e42:	f013 0f04 	tst.w	r3, #4
    1e46:	d044      	beq.n	1ed2 <gpio_nrf5_config+0xf6>
				config |= GPIOTE_CFG_POL_L2H;
    1e48:	f44f 3980 	mov.w	r9, #65536	; 0x10000
    1e4c:	e01f      	b.n	1e8e <gpio_nrf5_config+0xb2>
			pull = GPIO_PULL_UP;
    1e4e:	240c      	movs	r4, #12
    1e50:	e7db      	b.n	1e0a <gpio_nrf5_config+0x2e>
			pull = GPIO_PULL_DOWN;
    1e52:	2404      	movs	r4, #4
    1e54:	e7d9      	b.n	1e0a <gpio_nrf5_config+0x2e>
				gpio->OUTSET = BIT(pin);
    1e56:	f04f 0c01 	mov.w	ip, #1
    1e5a:	fa0c fc02 	lsl.w	ip, ip, r2
    1e5e:	f8c5 c508 	str.w	ip, [r5, #1288]	; 0x508
    1e62:	e7d9      	b.n	1e18 <gpio_nrf5_config+0x3c>
				gpio->OUTCLR = BIT(pin);
    1e64:	f04f 0c01 	mov.w	ip, #1
    1e68:	fa0c fc02 	lsl.w	ip, ip, r2
    1e6c:	f8c5 c50c 	str.w	ip, [r5, #1292]	; 0x50c
    1e70:	e7d2      	b.n	1e18 <gpio_nrf5_config+0x3c>
					      drive_strength[ds_low][ds_high] |
    1e72:	eb01 018e 	add.w	r1, r1, lr, lsl #2
    1e76:	f8df e088 	ldr.w	lr, [pc, #136]	; 1f00 <gpio_nrf5_config+0x124>
    1e7a:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
					      GPIO_INPUT_CONNECT |
    1e7e:	4321      	orrs	r1, r4
			gpio->PIN_CNF[pin] = (GPIO_SENSE_DISABLE |
    1e80:	f502 74e0 	add.w	r4, r2, #448	; 0x1c0
    1e84:	f845 1024 	str.w	r1, [r5, r4, lsl #2]
    1e88:	e7d2      	b.n	1e30 <gpio_nrf5_config+0x54>
				config |= GPIOTE_CFG_POL_TOGG;
    1e8a:	f44f 3940 	mov.w	r9, #196608	; 0x30000
    1e8e:	4614      	mov	r4, r2
    1e90:	4605      	mov	r5, r0
		if (__builtin_popcount(data->gpiote_chan_mask) ==
    1e92:	68f8      	ldr	r0, [r7, #12]
    1e94:	f7fe fcba 	bl	80c <__popcountsi2>
    1e98:	2808      	cmp	r0, #8
    1e9a:	d02e      	beq.n	1efa <gpio_nrf5_config+0x11e>
		int i = gpiote_find_channel(dev, pin);
    1e9c:	4621      	mov	r1, r4
    1e9e:	4628      	mov	r0, r5
    1ea0:	f7ff fea6 	bl	1bf0 <gpiote_find_channel>
		if (i < 0) {
    1ea4:	2800      	cmp	r0, #0
    1ea6:	db17      	blt.n	1ed8 <gpio_nrf5_config+0xfc>
		data->gpiote_chan_mask |= BIT(i);
    1ea8:	2301      	movs	r3, #1
    1eaa:	fa03 f200 	lsl.w	r2, r3, r0
    1eae:	68fb      	ldr	r3, [r7, #12]
    1eb0:	4313      	orrs	r3, r2
    1eb2:	60fb      	str	r3, [r7, #12]
		config |= GPIOTE_CFG_EVT;
    1eb4:	f049 0901 	orr.w	r9, r9, #1
		config |= GPIOTE_CFG_PIN(pin);
    1eb8:	0224      	lsls	r4, r4, #8
    1eba:	f404 54f8 	and.w	r4, r4, #7936	; 0x1f00
    1ebe:	ea49 0404 	orr.w	r4, r9, r4
		gpiote->CONFIG[i] = config;
    1ec2:	f500 70a2 	add.w	r0, r0, #324	; 0x144
    1ec6:	f846 4020 	str.w	r4, [r6, r0, lsl #2]
	return 0;
    1eca:	4641      	mov	r1, r8
}
    1ecc:	4608      	mov	r0, r1
    1ece:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
				config |= GPIOTE_CFG_POL_H2L;
    1ed2:	f44f 3900 	mov.w	r9, #131072	; 0x20000
    1ed6:	e7da      	b.n	1e8e <gpio_nrf5_config+0xb2>
			i = __builtin_ffs(~(data->gpiote_chan_mask)) - 1;
    1ed8:	68fb      	ldr	r3, [r7, #12]
    1eda:	43db      	mvns	r3, r3
    1edc:	fa93 f0a3 	rbit	r0, r3
    1ee0:	fab0 f080 	clz	r0, r0
    1ee4:	2b00      	cmp	r3, #0
    1ee6:	d1df      	bne.n	1ea8 <gpio_nrf5_config+0xcc>
    1ee8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    1eec:	e7dc      	b.n	1ea8 <gpio_nrf5_config+0xcc>
		return -ENOTSUP;
    1eee:	f06f 0185 	mvn.w	r1, #133	; 0x85
    1ef2:	e7eb      	b.n	1ecc <gpio_nrf5_config+0xf0>
			return -ENOTSUP;
    1ef4:	f06f 0185 	mvn.w	r1, #133	; 0x85
    1ef8:	e7e8      	b.n	1ecc <gpio_nrf5_config+0xf0>
			return -EIO;
    1efa:	f06f 0104 	mvn.w	r1, #4
    1efe:	e7e5      	b.n	1ecc <gpio_nrf5_config+0xf0>
    1f00:	0002a9c8 	.word	0x0002a9c8

00001f04 <_m16src_stop>:
		:
		: "memory");
#elif defined(CONFIG_ARMV7_M)
	unsigned int tmp;

	__asm__ volatile(
    1f04:	f04f 0320 	mov.w	r3, #32
    1f08:	f3ef 8111 	mrs	r1, BASEPRI
    1f0c:	f383 8811 	msr	BASEPRI, r3
	/* Test for started resource, if so, decrement reference and acquire
	 * resource guard.
	 */
	imask = irq_lock();

	if (!m16src_ref) {
    1f10:	4b12      	ldr	r3, [pc, #72]	; (1f5c <_m16src_stop+0x58>)
    1f12:	781a      	ldrb	r2, [r3, #0]
    1f14:	b192      	cbz	r2, 1f3c <_m16src_stop+0x38>
		irq_unlock(imask);
		return -EALREADY;
	}

	if (--m16src_ref) {
    1f16:	1e53      	subs	r3, r2, #1
    1f18:	b2db      	uxtb	r3, r3
    1f1a:	4810      	ldr	r0, [pc, #64]	; (1f5c <_m16src_stop+0x58>)
    1f1c:	7003      	strb	r3, [r0, #0]
    1f1e:	b993      	cbnz	r3, 1f46 <_m16src_stop+0x42>
		irq_unlock(imask);
		return 0;
	}

	if (m16src_grd) {
    1f20:	4b0f      	ldr	r3, [pc, #60]	; (1f60 <_m16src_stop+0x5c>)
    1f22:	781b      	ldrb	r3, [r3, #0]
    1f24:	b99b      	cbnz	r3, 1f4e <_m16src_stop+0x4a>
		m16src_ref++;
		irq_unlock(imask);
		return -EAGAIN;
	}

	m16src_grd = 1;
    1f26:	4b0e      	ldr	r3, [pc, #56]	; (1f60 <_m16src_stop+0x5c>)
    1f28:	2201      	movs	r2, #1
    1f2a:	701a      	strb	r2, [r3, #0]
	if (key) {
		return;
	}
	__asm__ volatile("cpsie i" : : : "memory");
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f2c:	f381 8811 	msr	BASEPRI, r1

	irq_unlock(imask);

	/* re-entrancy and mult-context safe, and reference count is zero, */

	NRF_CLOCK->TASKS_HFCLKSTOP = 1;
    1f30:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
    1f34:	604a      	str	r2, [r1, #4]

	/* release resource guard */
	m16src_grd = 0;
    1f36:	2000      	movs	r0, #0
    1f38:	7018      	strb	r0, [r3, #0]

	return 0;
}
    1f3a:	4770      	bx	lr
    1f3c:	f381 8811 	msr	BASEPRI, r1
		return -EALREADY;
    1f40:	f06f 0077 	mvn.w	r0, #119	; 0x77
    1f44:	4770      	bx	lr
    1f46:	f381 8811 	msr	BASEPRI, r1
		return 0;
    1f4a:	2000      	movs	r0, #0
    1f4c:	4770      	bx	lr
		m16src_ref++;
    1f4e:	4b03      	ldr	r3, [pc, #12]	; (1f5c <_m16src_stop+0x58>)
    1f50:	701a      	strb	r2, [r3, #0]
    1f52:	f381 8811 	msr	BASEPRI, r1
		return -EAGAIN;
    1f56:	f06f 000a 	mvn.w	r0, #10
    1f5a:	4770      	bx	lr
    1f5c:	2000036e 	.word	0x2000036e
    1f60:	2000036d 	.word	0x2000036d

00001f64 <_clock_control_init>:
		}
	}
}

static int _clock_control_init(struct device *dev)
{
    1f64:	b508      	push	{r3, lr}
	 * for 16 MHz clock. The vector is also shared for other power related
	 * features. Hence, design a better way to init IRQISR when adding
	 * power peripheral driver and/or new SoC series.
	 * NOTE: Currently the operations here are idempotent.
	 */
	IRQ_CONNECT(NRF5_IRQ_POWER_CLOCK_IRQn,
    1f66:	2200      	movs	r2, #0
    1f68:	2101      	movs	r1, #1
    1f6a:	4610      	mov	r0, r2
    1f6c:	f025 f8d6 	bl	2711c <_irq_priority_set>
		    CONFIG_CLOCK_CONTROL_NRF5_IRQ_PRIORITY,
		    _power_clock_isr, 0, 0);

	irq_enable(POWER_CLOCK_IRQn);
    1f70:	2000      	movs	r0, #0
    1f72:	f025 f8a9 	bl	270c8 <_arch_irq_enable>

	return 0;
}
    1f76:	2000      	movs	r0, #0
    1f78:	bd08      	pop	{r3, pc}
	...

00001f7c <_m16src_start>:
{
    1f7c:	b510      	push	{r4, lr}
	__asm__ volatile(
    1f7e:	f04f 0320 	mov.w	r3, #32
    1f82:	f3ef 8411 	mrs	r4, BASEPRI
    1f86:	f383 8811 	msr	BASEPRI, r3
	if (m16src_ref++) {
    1f8a:	4a2c      	ldr	r2, [pc, #176]	; (203c <_m16src_start+0xc0>)
    1f8c:	7813      	ldrb	r3, [r2, #0]
    1f8e:	1c58      	adds	r0, r3, #1
    1f90:	7010      	strb	r0, [r2, #0]
    1f92:	b153      	cbz	r3, 1faa <_m16src_start+0x2e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    1f94:	f384 8811 	msr	BASEPRI, r4
	if (NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) {
    1f98:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1f9c:	f8d3 340c 	ldr.w	r3, [r3, #1036]	; 0x40c
    1fa0:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    1fa4:	d047      	beq.n	2036 <_m16src_start+0xba>
		return 0;
    1fa6:	2000      	movs	r0, #0
    1fa8:	bd10      	pop	{r4, pc}
	if (m16src_grd) {
    1faa:	4a25      	ldr	r2, [pc, #148]	; (2040 <_m16src_start+0xc4>)
    1fac:	7812      	ldrb	r2, [r2, #0]
    1fae:	b9a2      	cbnz	r2, 1fda <_m16src_start+0x5e>
	m16src_grd = 1;
    1fb0:	2201      	movs	r2, #1
    1fb2:	4b23      	ldr	r3, [pc, #140]	; (2040 <_m16src_start+0xc4>)
    1fb4:	701a      	strb	r2, [r3, #0]
    1fb6:	f384 8811 	msr	BASEPRI, r4
	if (blocking) {
    1fba:	b3a1      	cbz	r1, 2026 <_m16src_start+0xaa>
		irq_disable(POWER_CLOCK_IRQn);
    1fbc:	2000      	movs	r0, #0
    1fbe:	f025 f891 	bl	270e4 <_arch_irq_disable>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1fc2:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1fc6:	2200      	movs	r2, #0
    1fc8:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		intenset = NRF_CLOCK->INTENSET;
    1fcc:	f8d3 1304 	ldr.w	r1, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    1fd0:	2201      	movs	r2, #1
    1fd2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    1fd6:	601a      	str	r2, [r3, #0]
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1fd8:	e009      	b.n	1fee <_m16src_start+0x72>
		m16src_ref--;
    1fda:	4a18      	ldr	r2, [pc, #96]	; (203c <_m16src_start+0xc0>)
    1fdc:	7013      	strb	r3, [r2, #0]
    1fde:	f384 8811 	msr	BASEPRI, r4
		return -EAGAIN;
    1fe2:	f06f 000a 	mvn.w	r0, #10
    1fe6:	bd10      	pop	{r4, pc}
  \details Wait For Event is a hint instruction that permits the processor to enter
    a low-power state until one of a number of events occurs.
 */
__attribute__((always_inline)) __STATIC_INLINE void __WFE(void)
{
  __ASM volatile ("wfe");
    1fe8:	bf20      	wfe
  \brief   Send Event
  \details Send Event is a hint instruction. It causes an event to be signaled to the CPU.
 */
__attribute__((always_inline)) __STATIC_INLINE void __SEV(void)
{
  __ASM volatile ("sev");
    1fea:	bf40      	sev
  __ASM volatile ("wfe");
    1fec:	bf20      	wfe
		while (NRF_CLOCK->EVENTS_HFCLKSTARTED == 0) {
    1fee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    1ff2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    1ff6:	2b00      	cmp	r3, #0
    1ff8:	d0f6      	beq.n	1fe8 <_m16src_start+0x6c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    1ffa:	2200      	movs	r2, #0
    1ffc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2000:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		if (!(intenset & CLOCK_INTENSET_HFCLKSTARTED_Msk)) {
    2004:	f011 0f01 	tst.w	r1, #1
    2008:	d102      	bne.n	2010 <_m16src_start+0x94>
			NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    200a:	2201      	movs	r2, #1
    200c:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    2010:	2201      	movs	r2, #1
    2012:	4b0c      	ldr	r3, [pc, #48]	; (2044 <_m16src_start+0xc8>)
    2014:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
		irq_enable(POWER_CLOCK_IRQn);
    2018:	2000      	movs	r0, #0
    201a:	f025 f855 	bl	270c8 <_arch_irq_enable>
	m16src_grd = 0;
    201e:	2200      	movs	r2, #0
    2020:	4b07      	ldr	r3, [pc, #28]	; (2040 <_m16src_start+0xc4>)
    2022:	701a      	strb	r2, [r3, #0]
    2024:	e7b8      	b.n	1f98 <_m16src_start+0x1c>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2026:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    202a:	2200      	movs	r2, #0
    202c:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
		NRF_CLOCK->TASKS_HFCLKSTART = 1;
    2030:	2201      	movs	r2, #1
    2032:	601a      	str	r2, [r3, #0]
    2034:	e7f3      	b.n	201e <_m16src_start+0xa2>
		return -EINPROGRESS;
    2036:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    203a:	bd10      	pop	{r4, pc}
    203c:	2000036e 	.word	0x2000036e
    2040:	2000036d 	.word	0x2000036d
    2044:	e000e100 	.word	0xe000e100

00002048 <_power_clock_isr>:
{
    2048:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    204c:	4680      	mov	r8, r0
	pof = (NRF_POWER->EVENTS_POFWARN != 0);
    204e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2052:	f8d3 5108 	ldr.w	r5, [r3, #264]	; 0x108
	    ((NRF_CLOCK->INTENSET & CLOCK_INTENSET_HFCLKSTARTED_Msk) != 0);
    2056:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
    205a:	f002 0201 	and.w	r2, r2, #1
	hf_stat = ((NRF_CLOCK->HFCLKSTAT & CLOCK_HFCLKSTAT_STATE_Msk) != 0);
    205e:	f8d3 140c 	ldr.w	r1, [r3, #1036]	; 0x40c
    2062:	f401 3180 	and.w	r1, r1, #65536	; 0x10000
	hf = (NRF_CLOCK->EVENTS_HFCLKSTARTED != 0);
    2066:	f8d3 7100 	ldr.w	r7, [r3, #256]	; 0x100
	lf = (NRF_CLOCK->EVENTS_LFCLKSTARTED != 0);
    206a:	f8d3 6104 	ldr.w	r6, [r3, #260]	; 0x104
	done = (NRF_CLOCK->EVENTS_DONE != 0);
    206e:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
	ctto = (NRF_CLOCK->EVENTS_CTTO != 0);
    2072:	f8d3 4110 	ldr.w	r4, [r3, #272]	; 0x110
	if (pof) {
    2076:	b11d      	cbz	r5, 2080 <_power_clock_isr+0x38>
		NRF_POWER->EVENTS_POFWARN = 0;
    2078:	f04f 0e00 	mov.w	lr, #0
    207c:	f8c3 e108 	str.w	lr, [r3, #264]	; 0x108
	if (hf) {
    2080:	b127      	cbz	r7, 208c <_power_clock_isr+0x44>
		NRF_CLOCK->EVENTS_HFCLKSTARTED = 0;
    2082:	2700      	movs	r7, #0
    2084:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2088:	f8c3 7100 	str.w	r7, [r3, #256]	; 0x100
	if (hf_intenset && hf_stat) {
    208c:	b132      	cbz	r2, 209c <_power_clock_isr+0x54>
    208e:	b129      	cbz	r1, 209c <_power_clock_isr+0x54>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_HFCLKSTARTED_Msk;
    2090:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2094:	2201      	movs	r2, #1
    2096:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
		NRF_CLOCK->TASKS_CAL = 1;
    209a:	611a      	str	r2, [r3, #16]
	if (lf) {
    209c:	b126      	cbz	r6, 20a8 <_power_clock_isr+0x60>
		NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    209e:	2200      	movs	r2, #0
    20a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20a4:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	if (done) {
    20a8:	b910      	cbnz	r0, 20b0 <_power_clock_isr+0x68>
	if (ctto) {
    20aa:	b964      	cbnz	r4, 20c6 <_power_clock_isr+0x7e>
    20ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		NRF_CLOCK->EVENTS_DONE = 0;
    20b0:	f04f 4680 	mov.w	r6, #1073741824	; 0x40000000
    20b4:	2100      	movs	r1, #0
    20b6:	f8c6 110c 	str.w	r1, [r6, #268]	; 0x10c
		err = _m16src_stop(dev, NULL);
    20ba:	4640      	mov	r0, r8
    20bc:	f7ff ff22 	bl	1f04 <_m16src_stop>
		NRF_CLOCK->TASKS_CTSTART = 1;
    20c0:	2301      	movs	r3, #1
    20c2:	6173      	str	r3, [r6, #20]
    20c4:	e7f1      	b.n	20aa <_power_clock_isr+0x62>
		NRF_CLOCK->EVENTS_CTTO = 0;
    20c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    20ca:	2100      	movs	r1, #0
    20cc:	f8c3 1110 	str.w	r1, [r3, #272]	; 0x110
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    20d0:	2201      	movs	r2, #1
    20d2:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    20d6:	4640      	mov	r0, r8
    20d8:	f7ff ff50 	bl	1f7c <_m16src_start>
		if (!err) {
    20dc:	2800      	cmp	r0, #0
    20de:	d1e5      	bne.n	20ac <_power_clock_isr+0x64>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    20e0:	2201      	movs	r2, #1
    20e2:	4b02      	ldr	r3, [pc, #8]	; (20ec <_power_clock_isr+0xa4>)
    20e4:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
}
    20e8:	e7e0      	b.n	20ac <_power_clock_isr+0x64>
    20ea:	bf00      	nop
    20ec:	e000e100 	.word	0xe000e100

000020f0 <_k32src_start>:
	__asm__ volatile(
    20f0:	f04f 0220 	mov.w	r2, #32
    20f4:	f3ef 8311 	mrs	r3, BASEPRI
    20f8:	f382 8811 	msr	BASEPRI, r2
	if (k32src_initialized) {
    20fc:	4a38      	ldr	r2, [pc, #224]	; (21e0 <_k32src_start+0xf0>)
    20fe:	7812      	ldrb	r2, [r2, #0]
    2100:	b152      	cbz	r2, 2118 <_k32src_start+0x28>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    2102:	f383 8811 	msr	BASEPRI, r3
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    2106:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    210a:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    210e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    2112:	d062      	beq.n	21da <_k32src_start+0xea>
		return 0;
    2114:	2000      	movs	r0, #0
    2116:	4770      	bx	lr
{
    2118:	b570      	push	{r4, r5, r6, lr}
    211a:	460d      	mov	r5, r1
    211c:	4604      	mov	r4, r0
	k32src_initialized = 1;
    211e:	2601      	movs	r6, #1
    2120:	4a2f      	ldr	r2, [pc, #188]	; (21e0 <_k32src_start+0xf0>)
    2122:	7016      	strb	r6, [r2, #0]
    2124:	f383 8811 	msr	BASEPRI, r3
	irq_disable(POWER_CLOCK_IRQn);
    2128:	2000      	movs	r0, #0
    212a:	f024 ffdb 	bl	270e4 <_arch_irq_disable>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    212e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2132:	2200      	movs	r2, #0
    2134:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	intenset = NRF_CLOCK->INTENSET;
    2138:	f8d3 2304 	ldr.w	r2, [r3, #772]	; 0x304
	NRF_CLOCK->INTENSET = CLOCK_INTENSET_LFCLKSTARTED_Msk;
    213c:	2102      	movs	r1, #2
    213e:	f8c3 1304 	str.w	r1, [r3, #772]	; 0x304
	NRF_CLOCK->LFCLKSRC = lf_clk_src;
    2142:	f8c3 5518 	str.w	r5, [r3, #1304]	; 0x518
	NRF_CLOCK->TASKS_LFCLKSTART = 1;
    2146:	609e      	str	r6, [r3, #8]
	while (NRF_CLOCK->EVENTS_LFCLKSTARTED == 0) {
    2148:	e002      	b.n	2150 <_k32src_start+0x60>
    214a:	bf20      	wfe
  __ASM volatile ("sev");
    214c:	bf40      	sev
  __ASM volatile ("wfe");
    214e:	bf20      	wfe
    2150:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2154:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    2158:	2b00      	cmp	r3, #0
    215a:	d0f6      	beq.n	214a <_k32src_start+0x5a>
	NRF_CLOCK->EVENTS_LFCLKSTARTED = 0;
    215c:	2100      	movs	r1, #0
    215e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2162:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
	if (!(intenset & CLOCK_INTENSET_LFCLKSTARTED_Msk)) {
    2166:	f012 0f02 	tst.w	r2, #2
    216a:	d102      	bne.n	2172 <_k32src_start+0x82>
		NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_LFCLKSTARTED_Msk;
    216c:	2202      	movs	r2, #2
    216e:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    2172:	2201      	movs	r2, #1
    2174:	4b1b      	ldr	r3, [pc, #108]	; (21e4 <_k32src_start+0xf4>)
    2176:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
	irq_enable(POWER_CLOCK_IRQn);
    217a:	2000      	movs	r0, #0
    217c:	f024 ffa4 	bl	270c8 <_arch_irq_enable>
	NRF_CLOCK->INTENCLR = CLOCK_INTENCLR_DONE_Msk | CLOCK_INTENCLR_CTTO_Msk;
    2180:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    2184:	2218      	movs	r2, #24
    2186:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
	NRF_CLOCK->EVENTS_DONE = 0;
    218a:	2200      	movs	r2, #0
    218c:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_CLOCK->EVENTS_CTTO = 0;
    2190:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
	if ((lf_clk_src & CLOCK_LFCLKSRC_SRC_Msk) == CLOCK_LFCLKSRC_SRC_RC) {
    2194:	f015 0f03 	tst.w	r5, #3
    2198:	d008      	beq.n	21ac <_k32src_start+0xbc>
	if (NRF_CLOCK->LFCLKSTAT & CLOCK_LFCLKSTAT_STATE_Msk) {
    219a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    219e:	f8d3 3418 	ldr.w	r3, [r3, #1048]	; 0x418
    21a2:	f413 3f80 	tst.w	r3, #65536	; 0x10000
    21a6:	d015      	beq.n	21d4 <_k32src_start+0xe4>
		return 0;
    21a8:	2000      	movs	r0, #0
    21aa:	bd70      	pop	{r4, r5, r6, pc}
		NRF_CLOCK->CTIV = 16;	/* 4s in 0.25s units */
    21ac:	2210      	movs	r2, #16
    21ae:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
		NRF_CLOCK->INTENSET =
    21b2:	2218      	movs	r2, #24
    21b4:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_CLOCK->INTENSET = CLOCK_INTENSET_HFCLKSTARTED_Msk;
    21b8:	2201      	movs	r2, #1
    21ba:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		err = _m16src_start(dev, false);
    21be:	2100      	movs	r1, #0
    21c0:	4620      	mov	r0, r4
    21c2:	f7ff fedb 	bl	1f7c <_m16src_start>
		if (!err) {
    21c6:	2800      	cmp	r0, #0
    21c8:	d1e7      	bne.n	219a <_k32src_start+0xaa>
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    21ca:	2201      	movs	r2, #1
    21cc:	4b05      	ldr	r3, [pc, #20]	; (21e4 <_k32src_start+0xf4>)
    21ce:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    21d2:	e7e2      	b.n	219a <_k32src_start+0xaa>
		return -EINPROGRESS;
    21d4:	f06f 0076 	mvn.w	r0, #118	; 0x76
}
    21d8:	bd70      	pop	{r4, r5, r6, pc}
		return -EINPROGRESS;
    21da:	f06f 0076 	mvn.w	r0, #118	; 0x76
    21de:	4770      	bx	lr
    21e0:	2000036c 	.word	0x2000036c
    21e4:	e000e100 	.word	0xe000e100

000021e8 <_nop_char_out>:
{
	ARG_UNUSED(c);

	/* do nothing */
	return 0;
}
    21e8:	2000      	movs	r0, #0
    21ea:	4770      	bx	lr

000021ec <char_out>:
struct out_context {
	int count;
};

static int char_out(int c, void *ctx_p)
{
    21ec:	b508      	push	{r3, lr}
	struct out_context *ctx = ctx_p;

	ctx->count++;
    21ee:	680b      	ldr	r3, [r1, #0]
    21f0:	3301      	adds	r3, #1
    21f2:	600b      	str	r3, [r1, #0]
	return _char_out(c);
    21f4:	4b01      	ldr	r3, [pc, #4]	; (21fc <char_out+0x10>)
    21f6:	681b      	ldr	r3, [r3, #0]
    21f8:	4798      	blx	r3
}
    21fa:	bd08      	pop	{r3, pc}
    21fc:	2000b8b4 	.word	0x2000b8b4

00002200 <_printk_hex_ulong>:
 * @return N/A
 */
static void _printk_hex_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    2200:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    2204:	b083      	sub	sp, #12
    2206:	4606      	mov	r6, r0
    2208:	9101      	str	r1, [sp, #4]
    220a:	4691      	mov	r9, r2
    220c:	461f      	mov	r7, r3
	int size = sizeof(num) * 2;
	int found_largest_digit = 0;
	int remaining = 8; /* 8 digits max */
	int digits = 0;
    220e:	2400      	movs	r4, #0
	int remaining = 8; /* 8 digits max */
    2210:	f04f 0a08 	mov.w	sl, #8
	int found_largest_digit = 0;
    2214:	46a0      	mov	r8, r4
	int size = sizeof(num) * 2;
    2216:	4653      	mov	r3, sl

	for (; size; size--) {
    2218:	e009      	b.n	222e <_printk_hex_ulong+0x2e>
		char nibble = (num >> ((size - 1) << 2) & 0xf);

		if (nibble || found_largest_digit || size == 1) {
			found_largest_digit = 1;
			nibble += nibble > 9 ? 87 : 48;
    221a:	2809      	cmp	r0, #9
    221c:	d91f      	bls.n	225e <_printk_hex_ulong+0x5e>
    221e:	2357      	movs	r3, #87	; 0x57
			out((int)nibble, ctx);
    2220:	9901      	ldr	r1, [sp, #4]
    2222:	4418      	add	r0, r3
    2224:	47b0      	blx	r6
			digits++;
    2226:	3401      	adds	r4, #1
			found_largest_digit = 1;
    2228:	f04f 0801 	mov.w	r8, #1
			continue;
		}

		if (remaining-- <= min_width) {
    222c:	462b      	mov	r3, r5
	for (; size; size--) {
    222e:	b323      	cbz	r3, 227a <_printk_hex_ulong+0x7a>
		char nibble = (num >> ((size - 1) << 2) & 0xf);
    2230:	1e5d      	subs	r5, r3, #1
    2232:	00a8      	lsls	r0, r5, #2
    2234:	fa29 f000 	lsr.w	r0, r9, r0
		if (nibble || found_largest_digit || size == 1) {
    2238:	f010 000f 	ands.w	r0, r0, #15
    223c:	d1ed      	bne.n	221a <_printk_hex_ulong+0x1a>
    223e:	f1b8 0f00 	cmp.w	r8, #0
    2242:	d1ea      	bne.n	221a <_printk_hex_ulong+0x1a>
    2244:	2b01      	cmp	r3, #1
    2246:	d0e8      	beq.n	221a <_printk_hex_ulong+0x1a>
		if (remaining-- <= min_width) {
    2248:	f10a 3bff 	add.w	fp, sl, #4294967295	; 0xffffffff
    224c:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    224e:	459a      	cmp	sl, r3
    2250:	dc11      	bgt.n	2276 <_printk_hex_ulong+0x76>
			if (padding == PAD_ZERO_BEFORE) {
    2252:	2f01      	cmp	r7, #1
    2254:	d005      	beq.n	2262 <_printk_hex_ulong+0x62>
				out('0', ctx);
			} else if (padding == PAD_SPACE_BEFORE) {
    2256:	2f02      	cmp	r7, #2
    2258:	d008      	beq.n	226c <_printk_hex_ulong+0x6c>
		if (remaining-- <= min_width) {
    225a:	46da      	mov	sl, fp
    225c:	e7e6      	b.n	222c <_printk_hex_ulong+0x2c>
			nibble += nibble > 9 ? 87 : 48;
    225e:	2330      	movs	r3, #48	; 0x30
    2260:	e7de      	b.n	2220 <_printk_hex_ulong+0x20>
				out('0', ctx);
    2262:	9901      	ldr	r1, [sp, #4]
    2264:	2030      	movs	r0, #48	; 0x30
    2266:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2268:	46da      	mov	sl, fp
    226a:	e7df      	b.n	222c <_printk_hex_ulong+0x2c>
				out(' ', ctx);
    226c:	9901      	ldr	r1, [sp, #4]
    226e:	2020      	movs	r0, #32
    2270:	47b0      	blx	r6
		if (remaining-- <= min_width) {
    2272:	46da      	mov	sl, fp
    2274:	e7da      	b.n	222c <_printk_hex_ulong+0x2c>
    2276:	46da      	mov	sl, fp
    2278:	e7d8      	b.n	222c <_printk_hex_ulong+0x2c>
			}
		}
	}

	if (padding == PAD_SPACE_AFTER) {
    227a:	2f03      	cmp	r7, #3
    227c:	d002      	beq.n	2284 <_printk_hex_ulong+0x84>
		remaining = min_width * 2 - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    227e:	b003      	add	sp, #12
    2280:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width * 2 - digits;
    2284:	9b0c      	ldr	r3, [sp, #48]	; 0x30
    2286:	ebc4 0443 	rsb	r4, r4, r3, lsl #1
		while (remaining-- > 0) {
    228a:	1e65      	subs	r5, r4, #1
    228c:	2c00      	cmp	r4, #0
    228e:	ddf6      	ble.n	227e <_printk_hex_ulong+0x7e>
			out(' ', ctx);
    2290:	9901      	ldr	r1, [sp, #4]
    2292:	2020      	movs	r0, #32
    2294:	47b0      	blx	r6
		while (remaining-- > 0) {
    2296:	462c      	mov	r4, r5
    2298:	e7f7      	b.n	228a <_printk_hex_ulong+0x8a>
	...

0000229c <_printk_dec_ulong>:
 * @return N/A
 */
static void _printk_dec_ulong(out_func_t out, void *ctx,
			      const unsigned long num, enum pad_type padding,
			      int min_width)
{
    229c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    22a0:	b083      	sub	sp, #12
    22a2:	4682      	mov	sl, r0
    22a4:	9101      	str	r1, [sp, #4]
    22a6:	469b      	mov	fp, r3
    22a8:	9f0c      	ldr	r7, [sp, #48]	; 0x30
	int found_largest_digit = 0;
	int remaining = 10; /* 10 digits max */
	int digits = 1;

	/* make sure we don't skip if value is zero */
	if (min_width <= 0) {
    22aa:	2f00      	cmp	r7, #0
    22ac:	dd07      	ble.n	22be <_printk_dec_ulong+0x22>
		min_width = 1;
	}

	while (pos >= 9) {
		if (found_largest_digit || remainder > pos) {
			found_largest_digit = 1;
    22ae:	4615      	mov	r5, r2
    22b0:	f04f 0901 	mov.w	r9, #1
    22b4:	260a      	movs	r6, #10
    22b6:	f04f 0800 	mov.w	r8, #0
    22ba:	4c22      	ldr	r4, [pc, #136]	; (2344 <_printk_dec_ulong+0xa8>)
    22bc:	e015      	b.n	22ea <_printk_dec_ulong+0x4e>
		min_width = 1;
    22be:	2701      	movs	r7, #1
    22c0:	e7f5      	b.n	22ae <_printk_dec_ulong+0x12>
			out((int)((remainder / (pos + 1)) + 48), ctx);
    22c2:	1c60      	adds	r0, r4, #1
    22c4:	fbb5 f0f0 	udiv	r0, r5, r0
    22c8:	9901      	ldr	r1, [sp, #4]
    22ca:	3030      	adds	r0, #48	; 0x30
    22cc:	47d0      	blx	sl
			digits++;
    22ce:	f109 0901 	add.w	r9, r9, #1
			found_largest_digit = 1;
    22d2:	f04f 0801 	mov.w	r8, #1
		} else if (remaining <= min_width
				&& padding < PAD_SPACE_AFTER) {
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
			digits++;
		}
		remaining--;
    22d6:	3e01      	subs	r6, #1
		remainder %= (pos + 1);
    22d8:	1c63      	adds	r3, r4, #1
    22da:	fbb5 f2f3 	udiv	r2, r5, r3
    22de:	fb03 5512 	mls	r5, r3, r2, r5
		pos /= 10;
    22e2:	4b19      	ldr	r3, [pc, #100]	; (2348 <_printk_dec_ulong+0xac>)
    22e4:	fba3 3404 	umull	r3, r4, r3, r4
    22e8:	08e4      	lsrs	r4, r4, #3
	while (pos >= 9) {
    22ea:	2c08      	cmp	r4, #8
    22ec:	d914      	bls.n	2318 <_printk_dec_ulong+0x7c>
		if (found_largest_digit || remainder > pos) {
    22ee:	f1b8 0f00 	cmp.w	r8, #0
    22f2:	d1e6      	bne.n	22c2 <_printk_dec_ulong+0x26>
    22f4:	42ac      	cmp	r4, r5
    22f6:	d3e4      	bcc.n	22c2 <_printk_dec_ulong+0x26>
		} else if (remaining <= min_width
    22f8:	42be      	cmp	r6, r7
    22fa:	dcec      	bgt.n	22d6 <_printk_dec_ulong+0x3a>
				&& padding < PAD_SPACE_AFTER) {
    22fc:	f1bb 0f02 	cmp.w	fp, #2
    2300:	d8e9      	bhi.n	22d6 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2302:	f1bb 0f01 	cmp.w	fp, #1
    2306:	d005      	beq.n	2314 <_printk_dec_ulong+0x78>
    2308:	2020      	movs	r0, #32
    230a:	9901      	ldr	r1, [sp, #4]
    230c:	47d0      	blx	sl
			digits++;
    230e:	f109 0901 	add.w	r9, r9, #1
    2312:	e7e0      	b.n	22d6 <_printk_dec_ulong+0x3a>
			out((int)(padding == PAD_ZERO_BEFORE ? '0' : ' '), ctx);
    2314:	2030      	movs	r0, #48	; 0x30
    2316:	e7f8      	b.n	230a <_printk_dec_ulong+0x6e>
	}
	out((int)(remainder + 48), ctx);
    2318:	9901      	ldr	r1, [sp, #4]
    231a:	f105 0030 	add.w	r0, r5, #48	; 0x30
    231e:	47d0      	blx	sl

	if (padding == PAD_SPACE_AFTER) {
    2320:	f1bb 0f03 	cmp.w	fp, #3
    2324:	d002      	beq.n	232c <_printk_dec_ulong+0x90>
		remaining = min_width - digits;
		while (remaining-- > 0) {
			out(' ', ctx);
		}
	}
}
    2326:	b003      	add	sp, #12
    2328:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		remaining = min_width - digits;
    232c:	eba7 0709 	sub.w	r7, r7, r9
		while (remaining-- > 0) {
    2330:	e003      	b.n	233a <_printk_dec_ulong+0x9e>
			out(' ', ctx);
    2332:	9901      	ldr	r1, [sp, #4]
    2334:	2020      	movs	r0, #32
    2336:	47d0      	blx	sl
		while (remaining-- > 0) {
    2338:	4627      	mov	r7, r4
    233a:	1e7c      	subs	r4, r7, #1
    233c:	2f00      	cmp	r7, #0
    233e:	dcf8      	bgt.n	2332 <_printk_dec_ulong+0x96>
    2340:	e7f1      	b.n	2326 <_printk_dec_ulong+0x8a>
    2342:	bf00      	nop
    2344:	3b9ac9ff 	.word	0x3b9ac9ff
    2348:	cccccccd 	.word	0xcccccccd

0000234c <str_out>:
	int max;
	int count;
};

static int str_out(int c, struct str_context *ctx)
{
    234c:	b410      	push	{r4}
	if (!ctx->str || ctx->count >= ctx->max) {
    234e:	680c      	ldr	r4, [r1, #0]
    2350:	b154      	cbz	r4, 2368 <str_out+0x1c>
    2352:	688b      	ldr	r3, [r1, #8]
    2354:	684a      	ldr	r2, [r1, #4]
    2356:	4293      	cmp	r3, r2
    2358:	da06      	bge.n	2368 <str_out+0x1c>
		ctx->count++;
		return c;
	}

	if (ctx->count == ctx->max - 1) {
    235a:	3a01      	subs	r2, #1
    235c:	4293      	cmp	r3, r2
    235e:	d008      	beq.n	2372 <str_out+0x26>
		ctx->str[ctx->count++] = '\0';
	} else {
		ctx->str[ctx->count++] = c;
    2360:	1c5a      	adds	r2, r3, #1
    2362:	608a      	str	r2, [r1, #8]
    2364:	54e0      	strb	r0, [r4, r3]
    2366:	e002      	b.n	236e <str_out+0x22>
		ctx->count++;
    2368:	688b      	ldr	r3, [r1, #8]
    236a:	3301      	adds	r3, #1
    236c:	608b      	str	r3, [r1, #8]
	}

	return c;
}
    236e:	bc10      	pop	{r4}
    2370:	4770      	bx	lr
		ctx->str[ctx->count++] = '\0';
    2372:	1c5a      	adds	r2, r3, #1
    2374:	608a      	str	r2, [r1, #8]
    2376:	2200      	movs	r2, #0
    2378:	54e2      	strb	r2, [r4, r3]
    237a:	e7f8      	b.n	236e <str_out+0x22>

0000237c <__printk_hook_install>:
	_char_out = fn;
    237c:	4b01      	ldr	r3, [pc, #4]	; (2384 <__printk_hook_install+0x8>)
    237e:	6018      	str	r0, [r3, #0]
    2380:	4770      	bx	lr
    2382:	bf00      	nop
    2384:	2000b8b4 	.word	0x2000b8b4

00002388 <_vprintk>:
{
    2388:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    238c:	b084      	sub	sp, #16
    238e:	4607      	mov	r7, r0
    2390:	460e      	mov	r6, r1
    2392:	4614      	mov	r4, r2
    2394:	9303      	str	r3, [sp, #12]
	int long_ctr = 0;
    2396:	f04f 0800 	mov.w	r8, #0
	int min_width = -1;
    239a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
	enum pad_type padding = PAD_NONE;
    239e:	46c1      	mov	r9, r8
	int might_format = 0; /* 1 if encountered a '%' */
    23a0:	4645      	mov	r5, r8
	while (*fmt) {
    23a2:	e104      	b.n	25ae <_vprintk+0x226>
			switch (*fmt) {
    23a4:	f1a0 0325 	sub.w	r3, r0, #37	; 0x25
    23a8:	2b55      	cmp	r3, #85	; 0x55
    23aa:	f200 80f1 	bhi.w	2590 <_vprintk+0x208>
    23ae:	e8df f013 	tbh	[pc, r3, lsl #1]
    23b2:	00ea      	.short	0x00ea
    23b4:	00ef00ef 	.word	0x00ef00ef
    23b8:	00ef00ef 	.word	0x00ef00ef
    23bc:	00ef00ef 	.word	0x00ef00ef
    23c0:	010800ef 	.word	0x010800ef
    23c4:	00ef00ef 	.word	0x00ef00ef
    23c8:	00590056 	.word	0x00590056
    23cc:	00590059 	.word	0x00590059
    23d0:	00590059 	.word	0x00590059
    23d4:	00590059 	.word	0x00590059
    23d8:	00590059 	.word	0x00590059
    23dc:	00ef00ef 	.word	0x00ef00ef
    23e0:	00ef00ef 	.word	0x00ef00ef
    23e4:	00ef00ef 	.word	0x00ef00ef
    23e8:	00ef00ef 	.word	0x00ef00ef
    23ec:	00ef00ef 	.word	0x00ef00ef
    23f0:	00ef00ef 	.word	0x00ef00ef
    23f4:	00ef00ef 	.word	0x00ef00ef
    23f8:	00ef00ef 	.word	0x00ef00ef
    23fc:	00ef00ef 	.word	0x00ef00ef
    2400:	00ef00ef 	.word	0x00ef00ef
    2404:	00ef00ef 	.word	0x00ef00ef
    2408:	00ef00ef 	.word	0x00ef00ef
    240c:	00ef00ef 	.word	0x00ef00ef
    2410:	00ef00ef 	.word	0x00ef00ef
    2414:	00ef00ef 	.word	0x00ef00ef
    2418:	00ef00bc 	.word	0x00ef00bc
    241c:	00ef00ef 	.word	0x00ef00ef
    2420:	00ef00ef 	.word	0x00ef00ef
    2424:	00ef00ef 	.word	0x00ef00ef
    2428:	00ef00ef 	.word	0x00ef00ef
    242c:	00e200ef 	.word	0x00e200ef
    2430:	00ef0076 	.word	0x00ef0076
    2434:	00ef00ef 	.word	0x00ef00ef
    2438:	007600fd 	.word	0x007600fd
    243c:	00ef00ef 	.word	0x00ef00ef
    2440:	00ef0073 	.word	0x00ef0073
    2444:	00ef00ef 	.word	0x00ef00ef
    2448:	00ef00b2 	.word	0x00ef00b2
    244c:	00d500ef 	.word	0x00d500ef
    2450:	009900ef 	.word	0x009900ef
    2454:	00ef00ef 	.word	0x00ef00ef
    2458:	00ef00bc 	.word	0x00ef00bc
    245c:	00fd      	.short	0x00fd
				if (min_width < 0 && padding == PAD_NONE) {
    245e:	f1ba 0f00 	cmp.w	sl, #0
    2462:	db10      	blt.n	2486 <_vprintk+0xfe>
				if (min_width < 0) {
    2464:	f1ba 0f00 	cmp.w	sl, #0
    2468:	db13      	blt.n	2492 <_vprintk+0x10a>
					min_width = 10 * min_width + *fmt - '0';
    246a:	eb0a 0a8a 	add.w	sl, sl, sl, lsl #2
    246e:	ea4f 034a 	mov.w	r3, sl, lsl #1
    2472:	4418      	add	r0, r3
    2474:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
				if (padding == PAD_NONE) {
    2478:	f1b9 0f00 	cmp.w	r9, #0
    247c:	f040 8096 	bne.w	25ac <_vprintk+0x224>
					padding = PAD_SPACE_BEFORE;
    2480:	f04f 0902 	mov.w	r9, #2
    2484:	e092      	b.n	25ac <_vprintk+0x224>
				if (min_width < 0 && padding == PAD_NONE) {
    2486:	f1b9 0f00 	cmp.w	r9, #0
    248a:	d1eb      	bne.n	2464 <_vprintk+0xdc>
					padding = PAD_ZERO_BEFORE;
    248c:	f04f 0901 	mov.w	r9, #1
    2490:	e08c      	b.n	25ac <_vprintk+0x224>
					min_width = *fmt - '0';
    2492:	f1a0 0a30 	sub.w	sl, r0, #48	; 0x30
    2496:	e7ef      	b.n	2478 <_vprintk+0xf0>
				long_ctr++;
    2498:	f108 0801 	add.w	r8, r8, #1
    249c:	e086      	b.n	25ac <_vprintk+0x224>
				if (long_ctr < 2) {
    249e:	f1b8 0f01 	cmp.w	r8, #1
    24a2:	dd13      	ble.n	24cc <_vprintk+0x144>
					d = (long)va_arg(ap, long long);
    24a4:	9b03      	ldr	r3, [sp, #12]
    24a6:	3307      	adds	r3, #7
    24a8:	f023 0307 	bic.w	r3, r3, #7
    24ac:	f103 0208 	add.w	r2, r3, #8
    24b0:	9203      	str	r2, [sp, #12]
    24b2:	681d      	ldr	r5, [r3, #0]
				if (d < 0) {
    24b4:	2d00      	cmp	r5, #0
    24b6:	db0e      	blt.n	24d6 <_vprintk+0x14e>
				_printk_dec_ulong(out, ctx, d, padding,
    24b8:	f8cd a000 	str.w	sl, [sp]
    24bc:	464b      	mov	r3, r9
    24be:	462a      	mov	r2, r5
    24c0:	4631      	mov	r1, r6
    24c2:	4638      	mov	r0, r7
    24c4:	f7ff feea 	bl	229c <_printk_dec_ulong>
			might_format = 0;
    24c8:	2500      	movs	r5, #0
				break;
    24ca:	e06f      	b.n	25ac <_vprintk+0x224>
					d = va_arg(ap, long);
    24cc:	9b03      	ldr	r3, [sp, #12]
    24ce:	1d1a      	adds	r2, r3, #4
    24d0:	9203      	str	r2, [sp, #12]
    24d2:	681d      	ldr	r5, [r3, #0]
    24d4:	e7ee      	b.n	24b4 <_vprintk+0x12c>
					out((int)'-', ctx);
    24d6:	4631      	mov	r1, r6
    24d8:	202d      	movs	r0, #45	; 0x2d
    24da:	47b8      	blx	r7
					d = -d;
    24dc:	426d      	negs	r5, r5
					min_width--;
    24de:	f10a 3aff 	add.w	sl, sl, #4294967295	; 0xffffffff
    24e2:	e7e9      	b.n	24b8 <_vprintk+0x130>
				if (long_ctr < 2) {
    24e4:	f1b8 0f01 	cmp.w	r8, #1
    24e8:	dd10      	ble.n	250c <_vprintk+0x184>
					u = (unsigned long)va_arg(ap,
    24ea:	9b03      	ldr	r3, [sp, #12]
    24ec:	3307      	adds	r3, #7
    24ee:	f023 0307 	bic.w	r3, r3, #7
    24f2:	f103 0208 	add.w	r2, r3, #8
    24f6:	9203      	str	r2, [sp, #12]
    24f8:	681a      	ldr	r2, [r3, #0]
				_printk_dec_ulong(out, ctx, u, padding,
    24fa:	f8cd a000 	str.w	sl, [sp]
    24fe:	464b      	mov	r3, r9
    2500:	4631      	mov	r1, r6
    2502:	4638      	mov	r0, r7
    2504:	f7ff feca 	bl	229c <_printk_dec_ulong>
			might_format = 0;
    2508:	2500      	movs	r5, #0
				break;
    250a:	e04f      	b.n	25ac <_vprintk+0x224>
					u = va_arg(ap, unsigned long);
    250c:	9b03      	ldr	r3, [sp, #12]
    250e:	1d1a      	adds	r2, r3, #4
    2510:	9203      	str	r2, [sp, #12]
    2512:	681a      	ldr	r2, [r3, #0]
    2514:	e7f1      	b.n	24fa <_vprintk+0x172>
				  out('0', ctx);
    2516:	4631      	mov	r1, r6
    2518:	2030      	movs	r0, #48	; 0x30
    251a:	47b8      	blx	r7
				  out('x', ctx);
    251c:	4631      	mov	r1, r6
    251e:	2078      	movs	r0, #120	; 0x78
    2520:	47b8      	blx	r7
				  min_width = 8;
    2522:	f04f 0a08 	mov.w	sl, #8
				  padding = PAD_ZERO_BEFORE;
    2526:	f04f 0901 	mov.w	r9, #1
				if (long_ctr < 2) {
    252a:	f1b8 0f01 	cmp.w	r8, #1
    252e:	dd10      	ble.n	2552 <_vprintk+0x1ca>
					x = (unsigned long)va_arg(ap,
    2530:	9b03      	ldr	r3, [sp, #12]
    2532:	3307      	adds	r3, #7
    2534:	f023 0307 	bic.w	r3, r3, #7
    2538:	f103 0208 	add.w	r2, r3, #8
    253c:	9203      	str	r2, [sp, #12]
    253e:	681a      	ldr	r2, [r3, #0]
				_printk_hex_ulong(out, ctx, x, padding,
    2540:	f8cd a000 	str.w	sl, [sp]
    2544:	464b      	mov	r3, r9
    2546:	4631      	mov	r1, r6
    2548:	4638      	mov	r0, r7
    254a:	f7ff fe59 	bl	2200 <_printk_hex_ulong>
			might_format = 0;
    254e:	2500      	movs	r5, #0
				break;
    2550:	e02c      	b.n	25ac <_vprintk+0x224>
					x = va_arg(ap, unsigned long);
    2552:	9b03      	ldr	r3, [sp, #12]
    2554:	1d1a      	adds	r2, r3, #4
    2556:	9203      	str	r2, [sp, #12]
    2558:	681a      	ldr	r2, [r3, #0]
    255a:	e7f1      	b.n	2540 <_vprintk+0x1b8>
				char *s = va_arg(ap, char *);
    255c:	9b03      	ldr	r3, [sp, #12]
    255e:	1d1a      	adds	r2, r3, #4
    2560:	9203      	str	r2, [sp, #12]
    2562:	681d      	ldr	r5, [r3, #0]
				while (*s)
    2564:	e002      	b.n	256c <_vprintk+0x1e4>
					out((int)(*s++), ctx);
    2566:	3501      	adds	r5, #1
    2568:	4631      	mov	r1, r6
    256a:	47b8      	blx	r7
				while (*s)
    256c:	7828      	ldrb	r0, [r5, #0]
    256e:	2800      	cmp	r0, #0
    2570:	d1f9      	bne.n	2566 <_vprintk+0x1de>
			might_format = 0;
    2572:	2500      	movs	r5, #0
    2574:	e01a      	b.n	25ac <_vprintk+0x224>
				int c = va_arg(ap, int);
    2576:	9b03      	ldr	r3, [sp, #12]
    2578:	1d1a      	adds	r2, r3, #4
    257a:	9203      	str	r2, [sp, #12]
				out(c, ctx);
    257c:	4631      	mov	r1, r6
    257e:	6818      	ldr	r0, [r3, #0]
    2580:	47b8      	blx	r7
			might_format = 0;
    2582:	2500      	movs	r5, #0
				break;
    2584:	e012      	b.n	25ac <_vprintk+0x224>
				out((int)'%', ctx);
    2586:	4631      	mov	r1, r6
    2588:	2025      	movs	r0, #37	; 0x25
    258a:	47b8      	blx	r7
			might_format = 0;
    258c:	2500      	movs	r5, #0
				break;
    258e:	e00d      	b.n	25ac <_vprintk+0x224>
				out((int)'%', ctx);
    2590:	4631      	mov	r1, r6
    2592:	2025      	movs	r0, #37	; 0x25
    2594:	47b8      	blx	r7
				out((int)*fmt, ctx);
    2596:	4631      	mov	r1, r6
    2598:	7820      	ldrb	r0, [r4, #0]
    259a:	47b8      	blx	r7
			might_format = 0;
    259c:	2500      	movs	r5, #0
				break;
    259e:	e005      	b.n	25ac <_vprintk+0x224>
				long_ctr = 0;
    25a0:	46a8      	mov	r8, r5
				min_width = -1;
    25a2:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
				padding = PAD_NONE;
    25a6:	f04f 0900 	mov.w	r9, #0
				might_format = 1;
    25aa:	2501      	movs	r5, #1
		++fmt;
    25ac:	3401      	adds	r4, #1
	while (*fmt) {
    25ae:	7820      	ldrb	r0, [r4, #0]
    25b0:	b150      	cbz	r0, 25c8 <_vprintk+0x240>
		if (!might_format) {
    25b2:	2d00      	cmp	r5, #0
    25b4:	f47f aef6 	bne.w	23a4 <_vprintk+0x1c>
			if (*fmt != '%') {
    25b8:	2825      	cmp	r0, #37	; 0x25
    25ba:	d0f1      	beq.n	25a0 <_vprintk+0x218>
				out((int)*fmt, ctx);
    25bc:	4631      	mov	r1, r6
    25be:	47b8      	blx	r7
    25c0:	e7f4      	b.n	25ac <_vprintk+0x224>
				padding = PAD_SPACE_AFTER;
    25c2:	f04f 0903 	mov.w	r9, #3
    25c6:	e7f1      	b.n	25ac <_vprintk+0x224>
}
    25c8:	b004      	add	sp, #16
    25ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000025d0 <vprintk>:
{
    25d0:	b510      	push	{r4, lr}
    25d2:	b082      	sub	sp, #8
	struct out_context ctx = { 0 };
    25d4:	ac02      	add	r4, sp, #8
    25d6:	2300      	movs	r3, #0
    25d8:	f844 3d04 	str.w	r3, [r4, #-4]!
	_vprintk(char_out, &ctx, fmt, ap);
    25dc:	460b      	mov	r3, r1
    25de:	4602      	mov	r2, r0
    25e0:	4621      	mov	r1, r4
    25e2:	4803      	ldr	r0, [pc, #12]	; (25f0 <vprintk+0x20>)
    25e4:	f7ff fed0 	bl	2388 <_vprintk>
}
    25e8:	9801      	ldr	r0, [sp, #4]
    25ea:	b002      	add	sp, #8
    25ec:	bd10      	pop	{r4, pc}
    25ee:	bf00      	nop
    25f0:	000021ed 	.word	0x000021ed

000025f4 <printk>:
{
    25f4:	b40f      	push	{r0, r1, r2, r3}
    25f6:	b500      	push	{lr}
    25f8:	b083      	sub	sp, #12
    25fa:	a904      	add	r1, sp, #16
    25fc:	f851 0b04 	ldr.w	r0, [r1], #4
	va_start(ap, fmt);
    2600:	9101      	str	r1, [sp, #4]
	ret = vprintk(fmt, ap);
    2602:	f7ff ffe5 	bl	25d0 <vprintk>
}
    2606:	b003      	add	sp, #12
    2608:	f85d eb04 	ldr.w	lr, [sp], #4
    260c:	b004      	add	sp, #16
    260e:	4770      	bx	lr

00002610 <snprintk>:

int snprintk(char *str, size_t size, const char *fmt, ...)
{
    2610:	b40c      	push	{r2, r3}
    2612:	b510      	push	{r4, lr}
    2614:	b084      	sub	sp, #16
    2616:	4604      	mov	r4, r0
    2618:	ab06      	add	r3, sp, #24
    261a:	f853 2b04 	ldr.w	r2, [r3], #4
	struct str_context ctx = { str, size, 0 };
    261e:	9001      	str	r0, [sp, #4]
    2620:	9102      	str	r1, [sp, #8]
    2622:	2100      	movs	r1, #0
    2624:	9103      	str	r1, [sp, #12]
	va_list ap;

	va_start(ap, fmt);
    2626:	9300      	str	r3, [sp, #0]
	_vprintk((out_func_t)str_out, &ctx, fmt, ap);
    2628:	a901      	add	r1, sp, #4
    262a:	4807      	ldr	r0, [pc, #28]	; (2648 <snprintk+0x38>)
    262c:	f7ff feac 	bl	2388 <_vprintk>
	va_end(ap);

	if (ctx.count < ctx.max) {
    2630:	9b03      	ldr	r3, [sp, #12]
    2632:	9a02      	ldr	r2, [sp, #8]
    2634:	4293      	cmp	r3, r2
    2636:	da01      	bge.n	263c <snprintk+0x2c>
		str[ctx.count] = '\0';
    2638:	2200      	movs	r2, #0
    263a:	54e2      	strb	r2, [r4, r3]
	}

	return ctx.count;
}
    263c:	9803      	ldr	r0, [sp, #12]
    263e:	b004      	add	sp, #16
    2640:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    2644:	b002      	add	sp, #8
    2646:	4770      	bx	lr
    2648:	0000234d 	.word	0x0000234d

0000264c <_ConfigAbsSyms>:
GEN_ABSOLUTE_SYM(CONFIG_MEM_POOL_SPLIT_BEFORE_DEFRAG, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_IPV6_NBR_CACHE, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_HCI_VS_BUILD_INFO, 1);
GEN_ABSOLUTE_SYM(CONFIG_SYS_LOG_SHOW_TAGS, 1);
GEN_ABSOLUTE_SYM(CONFIG_BT_CTLR_CHAN_SEL_2, 1);
GEN_ABSOLUTE_SYM(CONFIG_NET_UDP_CHECKSUM, 1);
    264c:	4770      	bx	lr

0000264e <_copy>:
#define MASK_TWENTY_SEVEN 0x1b

unsigned int _copy(uint8_t *to, unsigned int to_len,
		   const uint8_t *from, unsigned int from_len)
{
	if (from_len <= to_len) {
    264e:	428b      	cmp	r3, r1
    2650:	d901      	bls.n	2656 <_copy+0x8>
		(void)memcpy(to, from, from_len);
		return from_len;
	} else {
		return TC_CRYPTO_FAIL;
    2652:	2000      	movs	r0, #0
    2654:	4770      	bx	lr
{
    2656:	b510      	push	{r4, lr}
    2658:	461c      	mov	r4, r3
    265a:	4611      	mov	r1, r2
		(void)memcpy(to, from, from_len);
    265c:	461a      	mov	r2, r3
    265e:	f7fd fe2f 	bl	2c0 <memcpy>
		return from_len;
    2662:	4620      	mov	r0, r4
    2664:	bd10      	pop	{r4, pc}

00002666 <_set>:
	}
}

void _set(void *to, uint8_t val, unsigned int len)
{
    2666:	b508      	push	{r3, lr}
	(void)memset(to, val, len);
    2668:	f027 f996 	bl	29998 <memset>
    266c:	bd08      	pop	{r3, pc}

0000266e <_double_byte>:
/*
 * Doubles the value of a byte for values up to 127.
 */
uint8_t _double_byte(uint8_t a)
{
	return ((a<<1) ^ ((a>>7) * MASK_TWENTY_SEVEN));
    266e:	09c3      	lsrs	r3, r0, #7
    2670:	005a      	lsls	r2, r3, #1
    2672:	4413      	add	r3, r2
    2674:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
    2678:	ea83 0040 	eor.w	r0, r3, r0, lsl #1
}
    267c:	b2c0      	uxtb	r0, r0
    267e:	4770      	bx	lr

00002680 <tc_aes128_set_encrypt_key>:

#define subbyte(a, o)(sbox[((a) >> (o))&0xff] << (o))
#define subword(a)(subbyte(a, 24)|subbyte(a, 16)|subbyte(a, 8)|subbyte(a, 0))

int tc_aes128_set_encrypt_key(TCAesKeySched_t s, const uint8_t *k)
{
    2680:	b4f0      	push	{r4, r5, r6, r7}
    2682:	b08c      	sub	sp, #48	; 0x30
    2684:	4604      	mov	r4, r0
    2686:	460f      	mov	r7, r1
	const unsigned int rconst[11] = {
    2688:	ad01      	add	r5, sp, #4
    268a:	4e2a      	ldr	r6, [pc, #168]	; (2734 <tc_aes128_set_encrypt_key+0xb4>)
    268c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    268e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2690:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    2692:	c50f      	stmia	r5!, {r0, r1, r2, r3}
    2694:	e896 0007 	ldmia.w	r6, {r0, r1, r2}
    2698:	e885 0007 	stmia.w	r5, {r0, r1, r2}
		0x20000000, 0x40000000, 0x80000000, 0x1b000000, 0x36000000
	};
	unsigned int i;
	unsigned int t;

	if (s == (TCAesKeySched_t) 0) {
    269c:	2c00      	cmp	r4, #0
    269e:	d044      	beq.n	272a <tc_aes128_set_encrypt_key+0xaa>
		return TC_CRYPTO_FAIL;
	} else if (k == (const uint8_t *) 0) {
    26a0:	2f00      	cmp	r7, #0
    26a2:	d044      	beq.n	272e <tc_aes128_set_encrypt_key+0xae>
    26a4:	2200      	movs	r2, #0
    26a6:	e00f      	b.n	26c8 <tc_aes128_set_encrypt_key+0x48>
		return TC_CRYPTO_FAIL;
	}

	for (i = 0; i < Nk; ++i) {
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    26a8:	f817 0022 	ldrb.w	r0, [r7, r2, lsl #2]
    26ac:	eb07 0182 	add.w	r1, r7, r2, lsl #2
    26b0:	784b      	ldrb	r3, [r1, #1]
    26b2:	041b      	lsls	r3, r3, #16
    26b4:	ea43 6300 	orr.w	r3, r3, r0, lsl #24
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    26b8:	7888      	ldrb	r0, [r1, #2]
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    26ba:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
			      (k[Nb*i+2]<<8) | (k[Nb*i+3]);
    26be:	78c9      	ldrb	r1, [r1, #3]
    26c0:	430b      	orrs	r3, r1
		s->words[i] = (k[Nb*i]<<24) | (k[Nb*i+1]<<16) |
    26c2:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (i = 0; i < Nk; ++i) {
    26c6:	3201      	adds	r2, #1
    26c8:	2a03      	cmp	r2, #3
    26ca:	d9ed      	bls.n	26a8 <tc_aes128_set_encrypt_key+0x28>
    26cc:	e006      	b.n	26dc <tc_aes128_set_encrypt_key+0x5c>
	for (; i < (Nb * (Nr + 1)); ++i) {
		t = s->words[i-1];
		if ((i % Nk) == 0) {
			t = subword(rotword(t)) ^ rconst[i/Nk];
		}
		s->words[i] = s->words[i-Nk] ^ t;
    26ce:	1f11      	subs	r1, r2, #4
    26d0:	f854 1021 	ldr.w	r1, [r4, r1, lsl #2]
    26d4:	404b      	eors	r3, r1
    26d6:	f844 3022 	str.w	r3, [r4, r2, lsl #2]
	for (; i < (Nb * (Nr + 1)); ++i) {
    26da:	3201      	adds	r2, #1
    26dc:	2a2b      	cmp	r2, #43	; 0x2b
    26de:	d820      	bhi.n	2722 <tc_aes128_set_encrypt_key+0xa2>
		t = s->words[i-1];
    26e0:	1e53      	subs	r3, r2, #1
    26e2:	f854 3023 	ldr.w	r3, [r4, r3, lsl #2]
		if ((i % Nk) == 0) {
    26e6:	f012 0f03 	tst.w	r2, #3
    26ea:	d1f0      	bne.n	26ce <tc_aes128_set_encrypt_key+0x4e>
	return (((a) >> 24)|((a) << 8));
    26ec:	ea4f 6333 	mov.w	r3, r3, ror #24
			t = subword(rotword(t)) ^ rconst[i/Nk];
    26f0:	0e19      	lsrs	r1, r3, #24
    26f2:	4811      	ldr	r0, [pc, #68]	; (2738 <tc_aes128_set_encrypt_key+0xb8>)
    26f4:	5c45      	ldrb	r5, [r0, r1]
    26f6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    26fa:	5c41      	ldrb	r1, [r0, r1]
    26fc:	0409      	lsls	r1, r1, #16
    26fe:	ea41 6105 	orr.w	r1, r1, r5, lsl #24
    2702:	f3c3 2507 	ubfx	r5, r3, #8, #8
    2706:	5d45      	ldrb	r5, [r0, r5]
    2708:	ea41 2105 	orr.w	r1, r1, r5, lsl #8
    270c:	b2db      	uxtb	r3, r3
    270e:	5cc3      	ldrb	r3, [r0, r3]
    2710:	4319      	orrs	r1, r3
    2712:	f022 0303 	bic.w	r3, r2, #3
    2716:	a80c      	add	r0, sp, #48	; 0x30
    2718:	4403      	add	r3, r0
    271a:	f853 3c2c 	ldr.w	r3, [r3, #-44]
    271e:	404b      	eors	r3, r1
    2720:	e7d5      	b.n	26ce <tc_aes128_set_encrypt_key+0x4e>
	}

	return TC_CRYPTO_SUCCESS;
    2722:	2001      	movs	r0, #1
}
    2724:	b00c      	add	sp, #48	; 0x30
    2726:	bcf0      	pop	{r4, r5, r6, r7}
    2728:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    272a:	2000      	movs	r0, #0
    272c:	e7fa      	b.n	2724 <tc_aes128_set_encrypt_key+0xa4>
		return TC_CRYPTO_FAIL;
    272e:	2000      	movs	r0, #0
    2730:	e7f8      	b.n	2724 <tc_aes128_set_encrypt_key+0xa4>
    2732:	bf00      	nop
    2734:	0002a608 	.word	0x0002a608
    2738:	0002aa48 	.word	0x0002aa48

0000273c <tc_aes_encrypt>:
int tc_aes_encrypt(uint8_t *out, const uint8_t *in, const TCAesKeySched_t s)
{
	uint8_t state[Nk*Nb];
	unsigned int i;

	if (out == (uint8_t *) 0) {
    273c:	2800      	cmp	r0, #0
    273e:	f000 8367 	beq.w	2e10 <tc_aes_encrypt+0x6d4>
{
    2742:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    2746:	b088      	sub	sp, #32
    2748:	4680      	mov	r8, r0
		return TC_CRYPTO_FAIL;
	} else if (in == (const uint8_t *) 0) {
    274a:	2900      	cmp	r1, #0
    274c:	f000 8362 	beq.w	2e14 <tc_aes_encrypt+0x6d8>
		return TC_CRYPTO_FAIL;
	} else if (s == (TCAesKeySched_t) 0) {
    2750:	2a00      	cmp	r2, #0
    2752:	f000 8361 	beq.w	2e18 <tc_aes_encrypt+0x6dc>
    2756:	4617      	mov	r7, r2
    2758:	460a      	mov	r2, r1
		return TC_CRYPTO_FAIL;
	}

	(void)_copy(state, sizeof(state), in, sizeof(state));
    275a:	2310      	movs	r3, #16
    275c:	4619      	mov	r1, r3
    275e:	eb0d 0003 	add.w	r0, sp, r3
    2762:	f7ff ff74 	bl	264e <_copy>
	add_round_key(state, s->words);
    2766:	463e      	mov	r6, r7
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    2768:	683b      	ldr	r3, [r7, #0]
    276a:	f89d 2010 	ldrb.w	r2, [sp, #16]
    276e:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    2772:	f88d 2010 	strb.w	r2, [sp, #16]
    2776:	f3c3 4207 	ubfx	r2, r3, #16, #8
    277a:	f89d 1011 	ldrb.w	r1, [sp, #17]
    277e:	404a      	eors	r2, r1
    2780:	f88d 2011 	strb.w	r2, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    2784:	f3c3 2207 	ubfx	r2, r3, #8, #8
    2788:	f89d 1012 	ldrb.w	r1, [sp, #18]
    278c:	404a      	eors	r2, r1
    278e:	f88d 2012 	strb.w	r2, [sp, #18]
    2792:	b2db      	uxtb	r3, r3
    2794:	f89d 2013 	ldrb.w	r2, [sp, #19]
    2798:	4053      	eors	r3, r2
    279a:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    279e:	687b      	ldr	r3, [r7, #4]
    27a0:	f89d 2014 	ldrb.w	r2, [sp, #20]
    27a4:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    27a8:	f88d 2014 	strb.w	r2, [sp, #20]
    27ac:	f3c3 4207 	ubfx	r2, r3, #16, #8
    27b0:	f89d 1015 	ldrb.w	r1, [sp, #21]
    27b4:	404a      	eors	r2, r1
    27b6:	f88d 2015 	strb.w	r2, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    27ba:	f3c3 2207 	ubfx	r2, r3, #8, #8
    27be:	f89d 1016 	ldrb.w	r1, [sp, #22]
    27c2:	404a      	eors	r2, r1
    27c4:	f88d 2016 	strb.w	r2, [sp, #22]
    27c8:	b2db      	uxtb	r3, r3
    27ca:	f89d 2017 	ldrb.w	r2, [sp, #23]
    27ce:	4053      	eors	r3, r2
    27d0:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    27d4:	68bb      	ldr	r3, [r7, #8]
    27d6:	f89d 2018 	ldrb.w	r2, [sp, #24]
    27da:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    27de:	f88d 2018 	strb.w	r2, [sp, #24]
    27e2:	f3c3 4207 	ubfx	r2, r3, #16, #8
    27e6:	f89d 1019 	ldrb.w	r1, [sp, #25]
    27ea:	404a      	eors	r2, r1
    27ec:	f88d 2019 	strb.w	r2, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    27f0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    27f4:	f89d 101a 	ldrb.w	r1, [sp, #26]
    27f8:	404a      	eors	r2, r1
    27fa:	f88d 201a 	strb.w	r2, [sp, #26]
    27fe:	b2db      	uxtb	r3, r3
    2800:	f89d 201b 	ldrb.w	r2, [sp, #27]
    2804:	4053      	eors	r3, r2
    2806:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    280a:	68fb      	ldr	r3, [r7, #12]
    280c:	f89d 201c 	ldrb.w	r2, [sp, #28]
    2810:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    2814:	f88d 201c 	strb.w	r2, [sp, #28]
    2818:	f3c3 4207 	ubfx	r2, r3, #16, #8
    281c:	f89d 101d 	ldrb.w	r1, [sp, #29]
    2820:	404a      	eors	r2, r1
    2822:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    2826:	f3c3 2207 	ubfx	r2, r3, #8, #8
    282a:	f89d 101e 	ldrb.w	r1, [sp, #30]
    282e:	404a      	eors	r2, r1
    2830:	f88d 201e 	strb.w	r2, [sp, #30]
    2834:	b2db      	uxtb	r3, r3
    2836:	f89d 201f 	ldrb.w	r2, [sp, #31]
    283a:	4053      	eors	r3, r2
    283c:	f88d 301f 	strb.w	r3, [sp, #31]

	for (i = 0; i < (Nr - 1); ++i) {
    2840:	2500      	movs	r5, #0
    2842:	e210      	b.n	2c66 <tc_aes_encrypt+0x52a>
		s[i] = sbox[s[i]];
    2844:	a904      	add	r1, sp, #16
    2846:	5ccc      	ldrb	r4, [r1, r3]
    2848:	4a02      	ldr	r2, [pc, #8]	; (2854 <tc_aes_encrypt+0x118>)
    284a:	5d14      	ldrb	r4, [r2, r4]
    284c:	54cc      	strb	r4, [r1, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    284e:	3301      	adds	r3, #1
    2850:	e002      	b.n	2858 <tc_aes_encrypt+0x11c>
    2852:	bf00      	nop
    2854:	0002aa48 	.word	0x0002aa48
    2858:	2b0f      	cmp	r3, #15
    285a:	d9f3      	bls.n	2844 <tc_aes_encrypt+0x108>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    285c:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2860:	f88d 3000 	strb.w	r3, [sp]
    2864:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2868:	f88d 3001 	strb.w	r3, [sp, #1]
    286c:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2870:	f88d 3002 	strb.w	r3, [sp, #2]
    2874:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2878:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    287c:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2880:	f88d 3004 	strb.w	r3, [sp, #4]
    2884:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2888:	f88d 3005 	strb.w	r3, [sp, #5]
    288c:	f89d 301e 	ldrb.w	r3, [sp, #30]
    2890:	f88d 3006 	strb.w	r3, [sp, #6]
    2894:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2898:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    289c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    28a0:	f88d 3008 	strb.w	r3, [sp, #8]
    28a4:	f89d 301d 	ldrb.w	r3, [sp, #29]
    28a8:	f88d 3009 	strb.w	r3, [sp, #9]
    28ac:	f89d 3012 	ldrb.w	r3, [sp, #18]
    28b0:	f88d 300a 	strb.w	r3, [sp, #10]
    28b4:	f89d 3017 	ldrb.w	r3, [sp, #23]
    28b8:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    28bc:	f89d 301c 	ldrb.w	r3, [sp, #28]
    28c0:	f88d 300c 	strb.w	r3, [sp, #12]
    28c4:	f89d 3011 	ldrb.w	r3, [sp, #17]
    28c8:	f88d 300d 	strb.w	r3, [sp, #13]
    28cc:	f89d 3016 	ldrb.w	r3, [sp, #22]
    28d0:	f88d 300e 	strb.w	r3, [sp, #14]
    28d4:	f89d 301b 	ldrb.w	r3, [sp, #27]
    28d8:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    28dc:	2310      	movs	r3, #16
    28de:	466a      	mov	r2, sp
    28e0:	4619      	mov	r1, r3
    28e2:	eb0d 0003 	add.w	r0, sp, r3
    28e6:	f7ff feb2 	bl	264e <_copy>
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    28ea:	f89d 0010 	ldrb.w	r0, [sp, #16]
    28ee:	f7ff febe 	bl	266e <_double_byte>
    28f2:	4604      	mov	r4, r0
    28f4:	f89d 0011 	ldrb.w	r0, [sp, #17]
    28f8:	f7ff feb9 	bl	266e <_double_byte>
    28fc:	f89d 1011 	ldrb.w	r1, [sp, #17]
    2900:	f89d 2012 	ldrb.w	r2, [sp, #18]
    2904:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2908:	4048      	eors	r0, r1
    290a:	4044      	eors	r4, r0
    290c:	4062      	eors	r2, r4
    290e:	4053      	eors	r3, r2
    2910:	f88d 3000 	strb.w	r3, [sp]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    2914:	f89d 4010 	ldrb.w	r4, [sp, #16]
    2918:	4608      	mov	r0, r1
    291a:	f7ff fea8 	bl	266e <_double_byte>
    291e:	4044      	eors	r4, r0
    2920:	b2e4      	uxtb	r4, r4
    2922:	f89d 0012 	ldrb.w	r0, [sp, #18]
    2926:	f7ff fea2 	bl	266e <_double_byte>
    292a:	f89d 2012 	ldrb.w	r2, [sp, #18]
    292e:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2932:	4050      	eors	r0, r2
    2934:	4044      	eors	r4, r0
    2936:	405c      	eors	r4, r3
    2938:	f88d 4001 	strb.w	r4, [sp, #1]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    293c:	f89d 4010 	ldrb.w	r4, [sp, #16]
    2940:	f89d 0011 	ldrb.w	r0, [sp, #17]
    2944:	4044      	eors	r4, r0
    2946:	4610      	mov	r0, r2
    2948:	f7ff fe91 	bl	266e <_double_byte>
    294c:	4044      	eors	r4, r0
    294e:	b2e4      	uxtb	r4, r4
    2950:	f89d 0013 	ldrb.w	r0, [sp, #19]
    2954:	f7ff fe8b 	bl	266e <_double_byte>
    2958:	f89d 3013 	ldrb.w	r3, [sp, #19]
    295c:	4058      	eors	r0, r3
    295e:	4044      	eors	r4, r0
    2960:	f88d 4002 	strb.w	r4, [sp, #2]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2964:	f89d 0010 	ldrb.w	r0, [sp, #16]
    2968:	f7ff fe81 	bl	266e <_double_byte>
    296c:	f89d 2010 	ldrb.w	r2, [sp, #16]
    2970:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2974:	f89d 4012 	ldrb.w	r4, [sp, #18]
    2978:	4050      	eors	r0, r2
    297a:	4043      	eors	r3, r0
    297c:	405c      	eors	r4, r3
    297e:	b2e4      	uxtb	r4, r4
    2980:	f89d 0013 	ldrb.w	r0, [sp, #19]
    2984:	f7ff fe73 	bl	266e <_double_byte>
    2988:	4060      	eors	r0, r4
    298a:	f88d 0003 	strb.w	r0, [sp, #3]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    298e:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2992:	f7ff fe6c 	bl	266e <_double_byte>
    2996:	4604      	mov	r4, r0
    2998:	f89d 0015 	ldrb.w	r0, [sp, #21]
    299c:	f7ff fe67 	bl	266e <_double_byte>
    29a0:	f89d 1015 	ldrb.w	r1, [sp, #21]
    29a4:	f89d 2016 	ldrb.w	r2, [sp, #22]
    29a8:	f89d 3017 	ldrb.w	r3, [sp, #23]
    29ac:	4048      	eors	r0, r1
    29ae:	4044      	eors	r4, r0
    29b0:	4062      	eors	r2, r4
    29b2:	4053      	eors	r3, r2
    29b4:	f88d 3004 	strb.w	r3, [sp, #4]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    29b8:	f89d 4014 	ldrb.w	r4, [sp, #20]
    29bc:	4608      	mov	r0, r1
    29be:	f7ff fe56 	bl	266e <_double_byte>
    29c2:	4044      	eors	r4, r0
    29c4:	b2e4      	uxtb	r4, r4
    29c6:	f89d 0016 	ldrb.w	r0, [sp, #22]
    29ca:	f7ff fe50 	bl	266e <_double_byte>
    29ce:	f89d 2016 	ldrb.w	r2, [sp, #22]
    29d2:	f89d 3017 	ldrb.w	r3, [sp, #23]
    29d6:	4050      	eors	r0, r2
    29d8:	4044      	eors	r4, r0
    29da:	405c      	eors	r4, r3
    29dc:	f88d 4005 	strb.w	r4, [sp, #5]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    29e0:	f89d 4014 	ldrb.w	r4, [sp, #20]
    29e4:	f89d 0015 	ldrb.w	r0, [sp, #21]
    29e8:	4044      	eors	r4, r0
    29ea:	4610      	mov	r0, r2
    29ec:	f7ff fe3f 	bl	266e <_double_byte>
    29f0:	4044      	eors	r4, r0
    29f2:	b2e4      	uxtb	r4, r4
    29f4:	f89d 0017 	ldrb.w	r0, [sp, #23]
    29f8:	f7ff fe39 	bl	266e <_double_byte>
    29fc:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2a00:	4058      	eors	r0, r3
    2a02:	4044      	eors	r4, r0
    2a04:	f88d 4006 	strb.w	r4, [sp, #6]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2a08:	f89d 0014 	ldrb.w	r0, [sp, #20]
    2a0c:	f7ff fe2f 	bl	266e <_double_byte>
    2a10:	f89d 2014 	ldrb.w	r2, [sp, #20]
    2a14:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2a18:	f89d 4016 	ldrb.w	r4, [sp, #22]
    2a1c:	4050      	eors	r0, r2
    2a1e:	4043      	eors	r3, r0
    2a20:	405c      	eors	r4, r3
    2a22:	b2e4      	uxtb	r4, r4
    2a24:	f89d 0017 	ldrb.w	r0, [sp, #23]
    2a28:	f7ff fe21 	bl	266e <_double_byte>
    2a2c:	4060      	eors	r0, r4
    2a2e:	f88d 0007 	strb.w	r0, [sp, #7]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    2a32:	f89d 0018 	ldrb.w	r0, [sp, #24]
    2a36:	f7ff fe1a 	bl	266e <_double_byte>
    2a3a:	4604      	mov	r4, r0
    2a3c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    2a40:	f7ff fe15 	bl	266e <_double_byte>
    2a44:	f89d 1019 	ldrb.w	r1, [sp, #25]
    2a48:	f89d 201a 	ldrb.w	r2, [sp, #26]
    2a4c:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2a50:	4048      	eors	r0, r1
    2a52:	4044      	eors	r4, r0
    2a54:	4062      	eors	r2, r4
    2a56:	4053      	eors	r3, r2
    2a58:	f88d 3008 	strb.w	r3, [sp, #8]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    2a5c:	f89d 4018 	ldrb.w	r4, [sp, #24]
    2a60:	4608      	mov	r0, r1
    2a62:	f7ff fe04 	bl	266e <_double_byte>
    2a66:	4044      	eors	r4, r0
    2a68:	b2e4      	uxtb	r4, r4
    2a6a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    2a6e:	f7ff fdfe 	bl	266e <_double_byte>
    2a72:	f89d 201a 	ldrb.w	r2, [sp, #26]
    2a76:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2a7a:	4050      	eors	r0, r2
    2a7c:	4044      	eors	r4, r0
    2a7e:	405c      	eors	r4, r3
    2a80:	f88d 4009 	strb.w	r4, [sp, #9]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    2a84:	f89d 4018 	ldrb.w	r4, [sp, #24]
    2a88:	f89d 0019 	ldrb.w	r0, [sp, #25]
    2a8c:	4044      	eors	r4, r0
    2a8e:	4610      	mov	r0, r2
    2a90:	f7ff fded 	bl	266e <_double_byte>
    2a94:	4044      	eors	r4, r0
    2a96:	b2e4      	uxtb	r4, r4
    2a98:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2a9c:	f7ff fde7 	bl	266e <_double_byte>
    2aa0:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2aa4:	4058      	eors	r0, r3
    2aa6:	4044      	eors	r4, r0
    2aa8:	f88d 400a 	strb.w	r4, [sp, #10]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2aac:	f89d 0018 	ldrb.w	r0, [sp, #24]
    2ab0:	f7ff fddd 	bl	266e <_double_byte>
    2ab4:	f89d 2018 	ldrb.w	r2, [sp, #24]
    2ab8:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2abc:	f89d 401a 	ldrb.w	r4, [sp, #26]
    2ac0:	4050      	eors	r0, r2
    2ac2:	4043      	eors	r3, r0
    2ac4:	405c      	eors	r4, r3
    2ac6:	b2e4      	uxtb	r4, r4
    2ac8:	f89d 001b 	ldrb.w	r0, [sp, #27]
    2acc:	f7ff fdcf 	bl	266e <_double_byte>
    2ad0:	4060      	eors	r0, r4
    2ad2:	f88d 000b 	strb.w	r0, [sp, #11]
	out[0] = _double_byte(in[0]) ^ triple(in[1]) ^ in[2] ^ in[3];
    2ad6:	f89d 001c 	ldrb.w	r0, [sp, #28]
    2ada:	f7ff fdc8 	bl	266e <_double_byte>
    2ade:	4604      	mov	r4, r0
    2ae0:	f89d 001d 	ldrb.w	r0, [sp, #29]
    2ae4:	f7ff fdc3 	bl	266e <_double_byte>
    2ae8:	f89d 101d 	ldrb.w	r1, [sp, #29]
    2aec:	f89d 201e 	ldrb.w	r2, [sp, #30]
    2af0:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2af4:	4048      	eors	r0, r1
    2af6:	4044      	eors	r4, r0
    2af8:	4062      	eors	r2, r4
    2afa:	4053      	eors	r3, r2
    2afc:	f88d 300c 	strb.w	r3, [sp, #12]
	out[1] = in[0] ^ _double_byte(in[1]) ^ triple(in[2]) ^ in[3];
    2b00:	f89d 401c 	ldrb.w	r4, [sp, #28]
    2b04:	4608      	mov	r0, r1
    2b06:	f7ff fdb2 	bl	266e <_double_byte>
    2b0a:	4044      	eors	r4, r0
    2b0c:	b2e4      	uxtb	r4, r4
    2b0e:	f89d 001e 	ldrb.w	r0, [sp, #30]
    2b12:	f7ff fdac 	bl	266e <_double_byte>
    2b16:	f89d 201e 	ldrb.w	r2, [sp, #30]
    2b1a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2b1e:	4050      	eors	r0, r2
    2b20:	4044      	eors	r4, r0
    2b22:	405c      	eors	r4, r3
    2b24:	f88d 400d 	strb.w	r4, [sp, #13]
	out[2] = in[0] ^ in[1] ^ _double_byte(in[2]) ^ triple(in[3]);
    2b28:	f89d 401c 	ldrb.w	r4, [sp, #28]
    2b2c:	f89d 001d 	ldrb.w	r0, [sp, #29]
    2b30:	4044      	eors	r4, r0
    2b32:	4610      	mov	r0, r2
    2b34:	f7ff fd9b 	bl	266e <_double_byte>
    2b38:	4044      	eors	r4, r0
    2b3a:	b2e4      	uxtb	r4, r4
    2b3c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    2b40:	f7ff fd95 	bl	266e <_double_byte>
    2b44:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2b48:	4058      	eors	r0, r3
    2b4a:	4044      	eors	r4, r0
    2b4c:	f88d 400e 	strb.w	r4, [sp, #14]
	out[3] = triple(in[0]) ^ in[1] ^ in[2] ^ _double_byte(in[3]);
    2b50:	f89d 001c 	ldrb.w	r0, [sp, #28]
    2b54:	f7ff fd8b 	bl	266e <_double_byte>
    2b58:	f89d 201c 	ldrb.w	r2, [sp, #28]
    2b5c:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2b60:	f89d 401e 	ldrb.w	r4, [sp, #30]
    2b64:	4050      	eors	r0, r2
    2b66:	4043      	eors	r3, r0
    2b68:	405c      	eors	r4, r3
    2b6a:	b2e4      	uxtb	r4, r4
    2b6c:	f89d 001f 	ldrb.w	r0, [sp, #31]
    2b70:	f7ff fd7d 	bl	266e <_double_byte>
    2b74:	4060      	eors	r0, r4
    2b76:	f88d 000f 	strb.w	r0, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2b7a:	2310      	movs	r3, #16
    2b7c:	466a      	mov	r2, sp
    2b7e:	4619      	mov	r1, r3
    2b80:	eb0d 0003 	add.w	r0, sp, r3
    2b84:	f7ff fd63 	bl	264e <_copy>
		sub_bytes(state);
		shift_rows(state);
		mix_columns(state);
		add_round_key(state, s->words + Nb*(i+1));
    2b88:	3501      	adds	r5, #1
    2b8a:	012b      	lsls	r3, r5, #4
    2b8c:	18f2      	adds	r2, r6, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    2b8e:	58f3      	ldr	r3, [r6, r3]
    2b90:	f89d 1010 	ldrb.w	r1, [sp, #16]
    2b94:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2b98:	f88d 1010 	strb.w	r1, [sp, #16]
    2b9c:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2ba0:	f89d 0011 	ldrb.w	r0, [sp, #17]
    2ba4:	4041      	eors	r1, r0
    2ba6:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    2baa:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2bae:	f89d 0012 	ldrb.w	r0, [sp, #18]
    2bb2:	4041      	eors	r1, r0
    2bb4:	f88d 1012 	strb.w	r1, [sp, #18]
    2bb8:	b2db      	uxtb	r3, r3
    2bba:	f89d 1013 	ldrb.w	r1, [sp, #19]
    2bbe:	404b      	eors	r3, r1
    2bc0:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    2bc4:	6853      	ldr	r3, [r2, #4]
    2bc6:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2bca:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2bce:	f88d 1014 	strb.w	r1, [sp, #20]
    2bd2:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2bd6:	f89d 0015 	ldrb.w	r0, [sp, #21]
    2bda:	4041      	eors	r1, r0
    2bdc:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    2be0:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2be4:	f89d 0016 	ldrb.w	r0, [sp, #22]
    2be8:	4041      	eors	r1, r0
    2bea:	f88d 1016 	strb.w	r1, [sp, #22]
    2bee:	b2db      	uxtb	r3, r3
    2bf0:	f89d 1017 	ldrb.w	r1, [sp, #23]
    2bf4:	404b      	eors	r3, r1
    2bf6:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    2bfa:	6893      	ldr	r3, [r2, #8]
    2bfc:	f89d 1018 	ldrb.w	r1, [sp, #24]
    2c00:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2c04:	f88d 1018 	strb.w	r1, [sp, #24]
    2c08:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2c0c:	f89d 0019 	ldrb.w	r0, [sp, #25]
    2c10:	4041      	eors	r1, r0
    2c12:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    2c16:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2c1a:	f89d 001a 	ldrb.w	r0, [sp, #26]
    2c1e:	4041      	eors	r1, r0
    2c20:	f88d 101a 	strb.w	r1, [sp, #26]
    2c24:	b2db      	uxtb	r3, r3
    2c26:	f89d 101b 	ldrb.w	r1, [sp, #27]
    2c2a:	404b      	eors	r3, r1
    2c2c:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    2c30:	68d3      	ldr	r3, [r2, #12]
    2c32:	f89d 201c 	ldrb.w	r2, [sp, #28]
    2c36:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    2c3a:	f88d 201c 	strb.w	r2, [sp, #28]
    2c3e:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2c42:	f89d 101d 	ldrb.w	r1, [sp, #29]
    2c46:	404a      	eors	r2, r1
    2c48:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    2c4c:	f3c3 2207 	ubfx	r2, r3, #8, #8
    2c50:	f89d 101e 	ldrb.w	r1, [sp, #30]
    2c54:	404a      	eors	r2, r1
    2c56:	f88d 201e 	strb.w	r2, [sp, #30]
    2c5a:	b2db      	uxtb	r3, r3
    2c5c:	f89d 201f 	ldrb.w	r2, [sp, #31]
    2c60:	4053      	eors	r3, r2
    2c62:	f88d 301f 	strb.w	r3, [sp, #31]
	for (i = 0; i < (Nr - 1); ++i) {
    2c66:	2d08      	cmp	r5, #8
    2c68:	d801      	bhi.n	2c6e <tc_aes_encrypt+0x532>
    2c6a:	2300      	movs	r3, #0
    2c6c:	e5f4      	b.n	2858 <tc_aes_encrypt+0x11c>
    2c6e:	2300      	movs	r3, #0
    2c70:	e005      	b.n	2c7e <tc_aes_encrypt+0x542>
		s[i] = sbox[s[i]];
    2c72:	aa04      	add	r2, sp, #16
    2c74:	5cd1      	ldrb	r1, [r2, r3]
    2c76:	4869      	ldr	r0, [pc, #420]	; (2e1c <tc_aes_encrypt+0x6e0>)
    2c78:	5c41      	ldrb	r1, [r0, r1]
    2c7a:	54d1      	strb	r1, [r2, r3]
	for (i = 0; i < (Nb * Nk); ++i) {
    2c7c:	3301      	adds	r3, #1
    2c7e:	2b0f      	cmp	r3, #15
    2c80:	d9f7      	bls.n	2c72 <tc_aes_encrypt+0x536>
	t[0]  = s[0]; t[1] = s[5]; t[2] = s[10]; t[3] = s[15];
    2c82:	f89d 3010 	ldrb.w	r3, [sp, #16]
    2c86:	f88d 3000 	strb.w	r3, [sp]
    2c8a:	f89d 3015 	ldrb.w	r3, [sp, #21]
    2c8e:	f88d 3001 	strb.w	r3, [sp, #1]
    2c92:	f89d 301a 	ldrb.w	r3, [sp, #26]
    2c96:	f88d 3002 	strb.w	r3, [sp, #2]
    2c9a:	f89d 301f 	ldrb.w	r3, [sp, #31]
    2c9e:	f88d 3003 	strb.w	r3, [sp, #3]
	t[4]  = s[4]; t[5] = s[9]; t[6] = s[14]; t[7] = s[3];
    2ca2:	f89d 3014 	ldrb.w	r3, [sp, #20]
    2ca6:	f88d 3004 	strb.w	r3, [sp, #4]
    2caa:	f89d 3019 	ldrb.w	r3, [sp, #25]
    2cae:	f88d 3005 	strb.w	r3, [sp, #5]
    2cb2:	f89d 301e 	ldrb.w	r3, [sp, #30]
    2cb6:	f88d 3006 	strb.w	r3, [sp, #6]
    2cba:	f89d 3013 	ldrb.w	r3, [sp, #19]
    2cbe:	f88d 3007 	strb.w	r3, [sp, #7]
	t[8]  = s[8]; t[9] = s[13]; t[10] = s[2]; t[11] = s[7];
    2cc2:	f89d 3018 	ldrb.w	r3, [sp, #24]
    2cc6:	f88d 3008 	strb.w	r3, [sp, #8]
    2cca:	f89d 301d 	ldrb.w	r3, [sp, #29]
    2cce:	f88d 3009 	strb.w	r3, [sp, #9]
    2cd2:	f89d 3012 	ldrb.w	r3, [sp, #18]
    2cd6:	f88d 300a 	strb.w	r3, [sp, #10]
    2cda:	f89d 3017 	ldrb.w	r3, [sp, #23]
    2cde:	f88d 300b 	strb.w	r3, [sp, #11]
	t[12] = s[12]; t[13] = s[1]; t[14] = s[6]; t[15] = s[11];
    2ce2:	f89d 301c 	ldrb.w	r3, [sp, #28]
    2ce6:	f88d 300c 	strb.w	r3, [sp, #12]
    2cea:	f89d 3011 	ldrb.w	r3, [sp, #17]
    2cee:	f88d 300d 	strb.w	r3, [sp, #13]
    2cf2:	f89d 3016 	ldrb.w	r3, [sp, #22]
    2cf6:	f88d 300e 	strb.w	r3, [sp, #14]
    2cfa:	f89d 301b 	ldrb.w	r3, [sp, #27]
    2cfe:	f88d 300f 	strb.w	r3, [sp, #15]
	(void) _copy(s, sizeof(t), t, sizeof(t));
    2d02:	2310      	movs	r3, #16
    2d04:	466a      	mov	r2, sp
    2d06:	4619      	mov	r1, r3
    2d08:	eb0d 0003 	add.w	r0, sp, r3
    2d0c:	f7ff fc9f 	bl	264e <_copy>
	}

	sub_bytes(state);
	shift_rows(state);
	add_round_key(state, s->words + Nb*(i+1));
    2d10:	1c6b      	adds	r3, r5, #1
    2d12:	011b      	lsls	r3, r3, #4
    2d14:	18fa      	adds	r2, r7, r3
	s[0] ^= (uint8_t)(k[0] >> 24); s[1] ^= (uint8_t)(k[0] >> 16);
    2d16:	58fb      	ldr	r3, [r7, r3]
    2d18:	f89d 1010 	ldrb.w	r1, [sp, #16]
    2d1c:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2d20:	f88d 1010 	strb.w	r1, [sp, #16]
    2d24:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2d28:	f89d 0011 	ldrb.w	r0, [sp, #17]
    2d2c:	4041      	eors	r1, r0
    2d2e:	f88d 1011 	strb.w	r1, [sp, #17]
	s[2] ^= (uint8_t)(k[0] >> 8); s[3] ^= (uint8_t)(k[0]);
    2d32:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2d36:	f89d 0012 	ldrb.w	r0, [sp, #18]
    2d3a:	4041      	eors	r1, r0
    2d3c:	f88d 1012 	strb.w	r1, [sp, #18]
    2d40:	b2db      	uxtb	r3, r3
    2d42:	f89d 1013 	ldrb.w	r1, [sp, #19]
    2d46:	404b      	eors	r3, r1
    2d48:	f88d 3013 	strb.w	r3, [sp, #19]
	s[4] ^= (uint8_t)(k[1] >> 24); s[5] ^= (uint8_t)(k[1] >> 16);
    2d4c:	6853      	ldr	r3, [r2, #4]
    2d4e:	f89d 1014 	ldrb.w	r1, [sp, #20]
    2d52:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2d56:	f88d 1014 	strb.w	r1, [sp, #20]
    2d5a:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2d5e:	f89d 0015 	ldrb.w	r0, [sp, #21]
    2d62:	4041      	eors	r1, r0
    2d64:	f88d 1015 	strb.w	r1, [sp, #21]
	s[6] ^= (uint8_t)(k[1] >> 8); s[7] ^= (uint8_t)(k[1]);
    2d68:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2d6c:	f89d 0016 	ldrb.w	r0, [sp, #22]
    2d70:	4041      	eors	r1, r0
    2d72:	f88d 1016 	strb.w	r1, [sp, #22]
    2d76:	b2db      	uxtb	r3, r3
    2d78:	f89d 1017 	ldrb.w	r1, [sp, #23]
    2d7c:	404b      	eors	r3, r1
    2d7e:	f88d 3017 	strb.w	r3, [sp, #23]
	s[8] ^= (uint8_t)(k[2] >> 24); s[9] ^= (uint8_t)(k[2] >> 16);
    2d82:	6893      	ldr	r3, [r2, #8]
    2d84:	f89d 1018 	ldrb.w	r1, [sp, #24]
    2d88:	ea81 6113 	eor.w	r1, r1, r3, lsr #24
    2d8c:	f88d 1018 	strb.w	r1, [sp, #24]
    2d90:	f3c3 4107 	ubfx	r1, r3, #16, #8
    2d94:	f89d 0019 	ldrb.w	r0, [sp, #25]
    2d98:	4041      	eors	r1, r0
    2d9a:	f88d 1019 	strb.w	r1, [sp, #25]
	s[10] ^= (uint8_t)(k[2] >> 8); s[11] ^= (uint8_t)(k[2]);
    2d9e:	f3c3 2107 	ubfx	r1, r3, #8, #8
    2da2:	f89d 001a 	ldrb.w	r0, [sp, #26]
    2da6:	4041      	eors	r1, r0
    2da8:	f88d 101a 	strb.w	r1, [sp, #26]
    2dac:	b2db      	uxtb	r3, r3
    2dae:	f89d 101b 	ldrb.w	r1, [sp, #27]
    2db2:	404b      	eors	r3, r1
    2db4:	f88d 301b 	strb.w	r3, [sp, #27]
	s[12] ^= (uint8_t)(k[3] >> 24); s[13] ^= (uint8_t)(k[3] >> 16);
    2db8:	68d3      	ldr	r3, [r2, #12]
    2dba:	f89d 201c 	ldrb.w	r2, [sp, #28]
    2dbe:	ea82 6213 	eor.w	r2, r2, r3, lsr #24
    2dc2:	f88d 201c 	strb.w	r2, [sp, #28]
    2dc6:	f3c3 4207 	ubfx	r2, r3, #16, #8
    2dca:	f89d 101d 	ldrb.w	r1, [sp, #29]
    2dce:	404a      	eors	r2, r1
    2dd0:	f88d 201d 	strb.w	r2, [sp, #29]
	s[14] ^= (uint8_t)(k[3] >> 8); s[15] ^= (uint8_t)(k[3]);
    2dd4:	f3c3 2207 	ubfx	r2, r3, #8, #8
    2dd8:	f89d 101e 	ldrb.w	r1, [sp, #30]
    2ddc:	404a      	eors	r2, r1
    2dde:	f88d 201e 	strb.w	r2, [sp, #30]
    2de2:	b2db      	uxtb	r3, r3
    2de4:	f89d 201f 	ldrb.w	r2, [sp, #31]
    2de8:	4053      	eors	r3, r2
    2dea:	f88d 301f 	strb.w	r3, [sp, #31]

	(void)_copy(out, sizeof(state), state, sizeof(state));
    2dee:	2310      	movs	r3, #16
    2df0:	eb0d 0203 	add.w	r2, sp, r3
    2df4:	4619      	mov	r1, r3
    2df6:	4640      	mov	r0, r8
    2df8:	f7ff fc29 	bl	264e <_copy>

	/* zeroing out the state buffer */
	_set(state, TC_ZERO_BYTE, sizeof(state));
    2dfc:	2210      	movs	r2, #16
    2dfe:	2100      	movs	r1, #0
    2e00:	eb0d 0002 	add.w	r0, sp, r2
    2e04:	f7ff fc2f 	bl	2666 <_set>

	return TC_CRYPTO_SUCCESS;
    2e08:	2001      	movs	r0, #1
}
    2e0a:	b008      	add	sp, #32
    2e0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TC_CRYPTO_FAIL;
    2e10:	2000      	movs	r0, #0
    2e12:	4770      	bx	lr
		return TC_CRYPTO_FAIL;
    2e14:	2000      	movs	r0, #0
    2e16:	e7f8      	b.n	2e0a <tc_aes_encrypt+0x6ce>
		return TC_CRYPTO_FAIL;
    2e18:	2000      	movs	r0, #0
    2e1a:	e7f6      	b.n	2e0a <tc_aes_encrypt+0x6ce>
    2e1c:	0002aa48 	.word	0x0002aa48

00002e20 <gf_double>:
 *           the in and out buffers do not overlap.
 *  effects: doubles the GF(2^n) value pointed to by "in" and places
 *           the result in the GF(2^n) value pointed to by "out."
 */
void gf_double(uint8_t *out, uint8_t *in)
{
    2e20:	b430      	push	{r4, r5}

	/* start with low order byte */
	uint8_t *x = in + (TC_AES_BLOCK_SIZE - 1);
    2e22:	f101 020f 	add.w	r2, r1, #15

	/* if msb == 1, we need to add the gf_wrap value, otherwise add 0 */
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2e26:	f991 3000 	ldrsb.w	r3, [r1]
    2e2a:	2b00      	cmp	r3, #0
    2e2c:	db0d      	blt.n	2e4a <gf_double+0x2a>
    2e2e:	2300      	movs	r3, #0

	out += (TC_AES_BLOCK_SIZE - 1);
    2e30:	300f      	adds	r0, #15
	for (;;) {
		*out-- = (*x << 1) ^ carry;
    2e32:	1e45      	subs	r5, r0, #1
    2e34:	7814      	ldrb	r4, [r2, #0]
    2e36:	ea83 0344 	eor.w	r3, r3, r4, lsl #1
    2e3a:	7003      	strb	r3, [r0, #0]
		if (x == in) {
    2e3c:	428a      	cmp	r2, r1
    2e3e:	d006      	beq.n	2e4e <gf_double+0x2e>
			break;
		}
		carry = *x-- >> 7;
    2e40:	7813      	ldrb	r3, [r2, #0]
    2e42:	09db      	lsrs	r3, r3, #7
		*out-- = (*x << 1) ^ carry;
    2e44:	4628      	mov	r0, r5
		carry = *x-- >> 7;
    2e46:	3a01      	subs	r2, #1
		*out-- = (*x << 1) ^ carry;
    2e48:	e7f3      	b.n	2e32 <gf_double+0x12>
	uint8_t carry = (in[0] >> 7) ? gf_wrap : 0;
    2e4a:	2387      	movs	r3, #135	; 0x87
    2e4c:	e7f0      	b.n	2e30 <gf_double+0x10>
	}
}
    2e4e:	bc30      	pop	{r4, r5}
    2e50:	4770      	bx	lr

00002e52 <tc_cmac_erase>:
	return TC_CRYPTO_SUCCESS;
}

int tc_cmac_erase(TCCmacState_t s)
{
	if (s == (TCCmacState_t) 0) {
    2e52:	b130      	cbz	r0, 2e62 <tc_cmac_erase+0x10>
{
    2e54:	b508      	push	{r3, lr}
		return TC_CRYPTO_FAIL;
	}

	/* destroy the current state */
	_set(s, 0, sizeof(*s));
    2e56:	2258      	movs	r2, #88	; 0x58
    2e58:	2100      	movs	r1, #0
    2e5a:	f7ff fc04 	bl	2666 <_set>

	return TC_CRYPTO_SUCCESS;
    2e5e:	2001      	movs	r0, #1
    2e60:	bd08      	pop	{r3, pc}
		return TC_CRYPTO_FAIL;
    2e62:	2000      	movs	r0, #0
    2e64:	4770      	bx	lr

00002e66 <tc_cmac_init>:
}

int tc_cmac_init(TCCmacState_t s)
{
	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2e66:	b1a0      	cbz	r0, 2e92 <tc_cmac_init+0x2c>
{
    2e68:	b510      	push	{r4, lr}
    2e6a:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}

	/* CMAC starts with an all zero initialization vector */
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    2e6c:	2210      	movs	r2, #16
    2e6e:	2100      	movs	r1, #0
    2e70:	f7ff fbf9 	bl	2666 <_set>

	/* and the leftover buffer is empty */
	_set(s->leftover, 0, TC_AES_BLOCK_SIZE);
    2e74:	2210      	movs	r2, #16
    2e76:	2100      	movs	r1, #0
    2e78:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2e7c:	f7ff fbf3 	bl	2666 <_set>
	s->leftover_offset = 0;
    2e80:	2300      	movs	r3, #0
    2e82:	6463      	str	r3, [r4, #68]	; 0x44

	/* Set countdown to max number of calls allowed before re-keying: */
	s->countdown = MAX_CALLS;
    2e84:	2200      	movs	r2, #0
    2e86:	f44f 3380 	mov.w	r3, #65536	; 0x10000
    2e8a:	e9c4 2314 	strd	r2, r3, [r4, #80]	; 0x50

	return TC_CRYPTO_SUCCESS;
    2e8e:	2001      	movs	r0, #1
    2e90:	bd10      	pop	{r4, pc}
		return TC_CRYPTO_FAIL;
    2e92:	2000      	movs	r0, #0
    2e94:	4770      	bx	lr

00002e96 <tc_cmac_setup>:
	if (s == (TCCmacState_t) 0 ||
    2e96:	b338      	cbz	r0, 2ee8 <tc_cmac_setup+0x52>
{
    2e98:	b570      	push	{r4, r5, r6, lr}
    2e9a:	4604      	mov	r4, r0
	if (s == (TCCmacState_t) 0 ||
    2e9c:	b331      	cbz	r1, 2eec <tc_cmac_setup+0x56>
    2e9e:	4616      	mov	r6, r2
    2ea0:	460d      	mov	r5, r1
	_set(s, 0, sizeof(*s));
    2ea2:	2258      	movs	r2, #88	; 0x58
    2ea4:	2100      	movs	r1, #0
    2ea6:	f7ff fbde 	bl	2666 <_set>
	s->sched = sched;
    2eaa:	64a6      	str	r6, [r4, #72]	; 0x48
	tc_aes128_set_encrypt_key(s->sched, key);
    2eac:	4629      	mov	r1, r5
    2eae:	4630      	mov	r0, r6
    2eb0:	f7ff fbe6 	bl	2680 <tc_aes128_set_encrypt_key>
	_set(s->iv, 0, TC_AES_BLOCK_SIZE);
    2eb4:	2210      	movs	r2, #16
    2eb6:	2100      	movs	r1, #0
    2eb8:	4620      	mov	r0, r4
    2eba:	f7ff fbd4 	bl	2666 <_set>
	tc_aes_encrypt(s->iv, s->iv, s->sched);
    2ebe:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2ec0:	4621      	mov	r1, r4
    2ec2:	4620      	mov	r0, r4
    2ec4:	f7ff fc3a 	bl	273c <tc_aes_encrypt>
	gf_double (s->K1, s->iv);
    2ec8:	f104 0510 	add.w	r5, r4, #16
    2ecc:	4621      	mov	r1, r4
    2ece:	4628      	mov	r0, r5
    2ed0:	f7ff ffa6 	bl	2e20 <gf_double>
	gf_double (s->K2, s->K1);
    2ed4:	4629      	mov	r1, r5
    2ed6:	f104 0020 	add.w	r0, r4, #32
    2eda:	f7ff ffa1 	bl	2e20 <gf_double>
	tc_cmac_init(s);
    2ede:	4620      	mov	r0, r4
    2ee0:	f7ff ffc1 	bl	2e66 <tc_cmac_init>
	return TC_CRYPTO_SUCCESS;
    2ee4:	2001      	movs	r0, #1
    2ee6:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    2ee8:	2000      	movs	r0, #0
    2eea:	4770      	bx	lr
    2eec:	2000      	movs	r0, #0
}
    2eee:	bd70      	pop	{r4, r5, r6, pc}

00002ef0 <tc_cmac_update>:
int tc_cmac_update(TCCmacState_t s, const uint8_t *data, size_t data_length)
{
	unsigned int i;

	/* input sanity check: */
	if (s == (TCCmacState_t) 0) {
    2ef0:	2800      	cmp	r0, #0
    2ef2:	d05f      	beq.n	2fb4 <tc_cmac_update+0xc4>
{
    2ef4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    2ef6:	460d      	mov	r5, r1
    2ef8:	4616      	mov	r6, r2
    2efa:	4604      	mov	r4, r0
		return TC_CRYPTO_FAIL;
	}
	if (data_length == 0) {
    2efc:	2a00      	cmp	r2, #0
    2efe:	d05b      	beq.n	2fb8 <tc_cmac_update+0xc8>
		return  TC_CRYPTO_SUCCESS;
	}
	if (data == (const uint8_t *) 0) {
    2f00:	2900      	cmp	r1, #0
    2f02:	d05b      	beq.n	2fbc <tc_cmac_update+0xcc>
		return TC_CRYPTO_FAIL;
	}

	if (s->countdown == 0) {
    2f04:	e9d0 2314 	ldrd	r2, r3, [r0, #80]	; 0x50
    2f08:	ea52 0103 	orrs.w	r1, r2, r3
    2f0c:	d058      	beq.n	2fc0 <tc_cmac_update+0xd0>
		return TC_CRYPTO_FAIL;
	}

	s->countdown--;
    2f0e:	f112 32ff 	adds.w	r2, r2, #4294967295	; 0xffffffff
    2f12:	f143 33ff 	adc.w	r3, r3, #4294967295	; 0xffffffff
    2f16:	e9c0 2314 	strd	r2, r3, [r0, #80]	; 0x50

	if (s->leftover_offset > 0) {
    2f1a:	6c40      	ldr	r0, [r0, #68]	; 0x44
    2f1c:	2800      	cmp	r0, #0
    2f1e:	d038      	beq.n	2f92 <tc_cmac_update+0xa2>
		/* last data added to s didn't end on a TC_AES_BLOCK_SIZE byte boundary */
		size_t remaining_space = TC_AES_BLOCK_SIZE - s->leftover_offset;
    2f20:	f1c0 0710 	rsb	r7, r0, #16

		if (data_length < remaining_space) {
    2f24:	42be      	cmp	r6, r7
    2f26:	d30b      	bcc.n	2f40 <tc_cmac_update+0x50>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
			s->leftover_offset += data_length;
			return TC_CRYPTO_SUCCESS;
		}
		/* leftover block is now full; encrypt it first */
		_copy(&s->leftover[s->leftover_offset],
    2f28:	3030      	adds	r0, #48	; 0x30
    2f2a:	463b      	mov	r3, r7
    2f2c:	462a      	mov	r2, r5
    2f2e:	4639      	mov	r1, r7
    2f30:	4420      	add	r0, r4
    2f32:	f7ff fb8c 	bl	264e <_copy>
		      remaining_space,
		      data,
		      remaining_space);
		data_length -= remaining_space;
    2f36:	1bf6      	subs	r6, r6, r7
		data += remaining_space;
    2f38:	443d      	add	r5, r7
		s->leftover_offset = 0;
    2f3a:	2300      	movs	r3, #0
    2f3c:	6463      	str	r3, [r4, #68]	; 0x44

		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2f3e:	e012      	b.n	2f66 <tc_cmac_update+0x76>
			_copy(&s->leftover[s->leftover_offset], data_length, data, data_length);
    2f40:	3030      	adds	r0, #48	; 0x30
    2f42:	4633      	mov	r3, r6
    2f44:	462a      	mov	r2, r5
    2f46:	4631      	mov	r1, r6
    2f48:	4420      	add	r0, r4
    2f4a:	f7ff fb80 	bl	264e <_copy>
			s->leftover_offset += data_length;
    2f4e:	6c63      	ldr	r3, [r4, #68]	; 0x44
    2f50:	4433      	add	r3, r6
    2f52:	6463      	str	r3, [r4, #68]	; 0x44
			return TC_CRYPTO_SUCCESS;
    2f54:	2001      	movs	r0, #1
    2f56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			s->iv[i] ^= s->leftover[i];
    2f58:	18e2      	adds	r2, r4, r3
    2f5a:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    2f5e:	5ce1      	ldrb	r1, [r4, r3]
    2f60:	404a      	eors	r2, r1
    2f62:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2f64:	3301      	adds	r3, #1
    2f66:	2b0f      	cmp	r3, #15
    2f68:	d9f6      	bls.n	2f58 <tc_cmac_update+0x68>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2f6a:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2f6c:	4621      	mov	r1, r4
    2f6e:	4620      	mov	r0, r4
    2f70:	f7ff fbe4 	bl	273c <tc_aes_encrypt>
    2f74:	e00d      	b.n	2f92 <tc_cmac_update+0xa2>
	}

	/* CBC encrypt each (except the last) of the data blocks */
	while (data_length > TC_AES_BLOCK_SIZE) {
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
			s->iv[i] ^= data[i];
    2f76:	5cea      	ldrb	r2, [r5, r3]
    2f78:	5ce1      	ldrb	r1, [r4, r3]
    2f7a:	404a      	eors	r2, r1
    2f7c:	54e2      	strb	r2, [r4, r3]
		for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2f7e:	3301      	adds	r3, #1
    2f80:	2b0f      	cmp	r3, #15
    2f82:	d9f8      	bls.n	2f76 <tc_cmac_update+0x86>
		}
		tc_aes_encrypt(s->iv, s->iv, s->sched);
    2f84:	6ca2      	ldr	r2, [r4, #72]	; 0x48
    2f86:	4621      	mov	r1, r4
    2f88:	4620      	mov	r0, r4
    2f8a:	f7ff fbd7 	bl	273c <tc_aes_encrypt>
		data += TC_AES_BLOCK_SIZE;
    2f8e:	3510      	adds	r5, #16
		data_length  -= TC_AES_BLOCK_SIZE;
    2f90:	3e10      	subs	r6, #16
	while (data_length > TC_AES_BLOCK_SIZE) {
    2f92:	2e10      	cmp	r6, #16
    2f94:	d901      	bls.n	2f9a <tc_cmac_update+0xaa>
    2f96:	2300      	movs	r3, #0
    2f98:	e7f2      	b.n	2f80 <tc_cmac_update+0x90>
	}

	if (data_length > 0) {
    2f9a:	b90e      	cbnz	r6, 2fa0 <tc_cmac_update+0xb0>
		/* save leftover data for next time */
		_copy(s->leftover, data_length, data, data_length);
		s->leftover_offset = data_length;
	}

	return TC_CRYPTO_SUCCESS;
    2f9c:	2001      	movs	r0, #1
}
    2f9e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_copy(s->leftover, data_length, data, data_length);
    2fa0:	4633      	mov	r3, r6
    2fa2:	462a      	mov	r2, r5
    2fa4:	4631      	mov	r1, r6
    2fa6:	f104 0030 	add.w	r0, r4, #48	; 0x30
    2faa:	f7ff fb50 	bl	264e <_copy>
		s->leftover_offset = data_length;
    2fae:	6466      	str	r6, [r4, #68]	; 0x44
	return TC_CRYPTO_SUCCESS;
    2fb0:	2001      	movs	r0, #1
    2fb2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2fb4:	2000      	movs	r0, #0
    2fb6:	4770      	bx	lr
		return  TC_CRYPTO_SUCCESS;
    2fb8:	2001      	movs	r0, #1
    2fba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2fbc:	2000      	movs	r0, #0
    2fbe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return TC_CRYPTO_FAIL;
    2fc0:	2000      	movs	r0, #0
    2fc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00002fc4 <tc_cmac_final>:
{
	uint8_t *k;
	unsigned int i;

	/* input sanity check: */
	if (tag == (uint8_t *) 0 ||
    2fc4:	b370      	cbz	r0, 3024 <tc_cmac_final+0x60>
{
    2fc6:	b570      	push	{r4, r5, r6, lr}
    2fc8:	4606      	mov	r6, r0
	if (tag == (uint8_t *) 0 ||
    2fca:	b369      	cbz	r1, 3028 <tc_cmac_final+0x64>
    2fcc:	460d      	mov	r5, r1
	    s == (TCCmacState_t) 0) {
		return TC_CRYPTO_FAIL;
	}

	if (s->leftover_offset == TC_AES_BLOCK_SIZE) {
    2fce:	6c4a      	ldr	r2, [r1, #68]	; 0x44
    2fd0:	2a10      	cmp	r2, #16
    2fd2:	d010      	beq.n	2ff6 <tc_cmac_final+0x32>
		k = (uint8_t *) s->K1;
	} else {
		/* the final message block is not a full-sized  block */
		size_t remaining = TC_AES_BLOCK_SIZE - s->leftover_offset;

		_set(&s->leftover[s->leftover_offset], 0, remaining);
    2fd4:	f102 0030 	add.w	r0, r2, #48	; 0x30
    2fd8:	f1c2 0210 	rsb	r2, r2, #16
    2fdc:	2100      	movs	r1, #0
    2fde:	4428      	add	r0, r5
    2fe0:	f7ff fb41 	bl	2666 <_set>
		s->leftover[s->leftover_offset] = TC_CMAC_PADDING;
    2fe4:	6c6b      	ldr	r3, [r5, #68]	; 0x44
    2fe6:	442b      	add	r3, r5
    2fe8:	2280      	movs	r2, #128	; 0x80
    2fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
		k = (uint8_t *) s->K2;
    2fee:	f105 0120 	add.w	r1, r5, #32
	}
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    2ff2:	2300      	movs	r3, #0
    2ff4:	e00a      	b.n	300c <tc_cmac_final+0x48>
		k = (uint8_t *) s->K1;
    2ff6:	3110      	adds	r1, #16
    2ff8:	e7fb      	b.n	2ff2 <tc_cmac_final+0x2e>
		s->iv[i] ^= s->leftover[i] ^ k[i];
    2ffa:	18ea      	adds	r2, r5, r3
    2ffc:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
    3000:	5ccc      	ldrb	r4, [r1, r3]
    3002:	4054      	eors	r4, r2
    3004:	5cea      	ldrb	r2, [r5, r3]
    3006:	4062      	eors	r2, r4
    3008:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < TC_AES_BLOCK_SIZE; ++i) {
    300a:	3301      	adds	r3, #1
    300c:	2b0f      	cmp	r3, #15
    300e:	d9f4      	bls.n	2ffa <tc_cmac_final+0x36>
	}

	tc_aes_encrypt(tag, s->iv, s->sched);
    3010:	6caa      	ldr	r2, [r5, #72]	; 0x48
    3012:	4629      	mov	r1, r5
    3014:	4630      	mov	r0, r6
    3016:	f7ff fb91 	bl	273c <tc_aes_encrypt>

	/* erasing state: */
	tc_cmac_erase(s);
    301a:	4628      	mov	r0, r5
    301c:	f7ff ff19 	bl	2e52 <tc_cmac_erase>

	return TC_CRYPTO_SUCCESS;
    3020:	2001      	movs	r0, #1
    3022:	bd70      	pop	{r4, r5, r6, pc}
		return TC_CRYPTO_FAIL;
    3024:	2000      	movs	r0, #0
    3026:	4770      	bx	lr
    3028:	2000      	movs	r0, #0
}
    302a:	bd70      	pop	{r4, r5, r6, pc}

0000302c <_mbedtls_init>:
	ARG_UNUSED(device);

	init_heap();

	return 0;
}
    302c:	2000      	movs	r0, #0
    302e:	4770      	bx	lr

00003030 <mbedtls_zeroize>:

#if !defined(MBEDTLS_AES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3030:	e003      	b.n	303a <mbedtls_zeroize+0xa>
    3032:	2200      	movs	r2, #0
    3034:	7002      	strb	r2, [r0, #0]
    3036:	3001      	adds	r0, #1
    3038:	4619      	mov	r1, r3
    303a:	1e4b      	subs	r3, r1, #1
    303c:	2900      	cmp	r1, #0
    303e:	d1f8      	bne.n	3032 <mbedtls_zeroize+0x2>
}
    3040:	4770      	bx	lr

00003042 <mbedtls_zeroize>:

#if !defined(MBEDTLS_ARC4_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3042:	e003      	b.n	304c <mbedtls_zeroize+0xa>
    3044:	2200      	movs	r2, #0
    3046:	7002      	strb	r2, [r0, #0]
    3048:	3001      	adds	r0, #1
    304a:	4619      	mov	r1, r3
    304c:	1e4b      	subs	r3, r1, #1
    304e:	2900      	cmp	r1, #0
    3050:	d1f8      	bne.n	3044 <mbedtls_zeroize+0x2>
}
    3052:	4770      	bx	lr

00003054 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3054:	e003      	b.n	305e <mbedtls_zeroize+0xa>
    3056:	2200      	movs	r2, #0
    3058:	7002      	strb	r2, [r0, #0]
    305a:	3001      	adds	r0, #1
    305c:	4619      	mov	r1, r3
    305e:	1e4b      	subs	r3, r1, #1
    3060:	2900      	cmp	r1, #0
    3062:	d1f8      	bne.n	3056 <mbedtls_zeroize+0x2>
}
    3064:	4770      	bx	lr

00003066 <mbedtls_zeroize>:

#if !defined(MBEDTLS_BLOWFISH_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3066:	e003      	b.n	3070 <mbedtls_zeroize+0xa>
    3068:	2200      	movs	r2, #0
    306a:	7002      	strb	r2, [r0, #0]
    306c:	3001      	adds	r0, #1
    306e:	4619      	mov	r1, r3
    3070:	1e4b      	subs	r3, r1, #1
    3072:	2900      	cmp	r1, #0
    3074:	d1f8      	bne.n	3068 <mbedtls_zeroize+0x2>
}
    3076:	4770      	bx	lr

00003078 <mbedtls_zeroize>:

#if !defined(MBEDTLS_CAMELLIA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3078:	e003      	b.n	3082 <mbedtls_zeroize+0xa>
    307a:	2200      	movs	r2, #0
    307c:	7002      	strb	r2, [r0, #0]
    307e:	3001      	adds	r0, #1
    3080:	4619      	mov	r1, r3
    3082:	1e4b      	subs	r3, r1, #1
    3084:	2900      	cmp	r1, #0
    3086:	d1f8      	bne.n	307a <mbedtls_zeroize+0x2>
}
    3088:	4770      	bx	lr

0000308a <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST && MBEDTLS_AES_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    308a:	e003      	b.n	3094 <mbedtls_zeroize+0xa>
    308c:	2200      	movs	r2, #0
    308e:	7002      	strb	r2, [r0, #0]
    3090:	3001      	adds	r0, #1
    3092:	4619      	mov	r1, r3
    3094:	1e4b      	subs	r3, r1, #1
    3096:	2900      	cmp	r1, #0
    3098:	d1f8      	bne.n	308c <mbedtls_zeroize+0x2>
}
    309a:	4770      	bx	lr

0000309c <mbedtls_zeroize>:
#define MBEDTLS_CIPHER_MODE_STREAM
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    309c:	e003      	b.n	30a6 <mbedtls_zeroize+0xa>
    309e:	2200      	movs	r2, #0
    30a0:	7002      	strb	r2, [r0, #0]
    30a2:	3001      	adds	r0, #1
    30a4:	4619      	mov	r1, r3
    30a6:	1e4b      	subs	r3, r1, #1
    30a8:	2900      	cmp	r1, #0
    30aa:	d1f8      	bne.n	309e <mbedtls_zeroize+0x2>
}
    30ac:	4770      	bx	lr

000030ae <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    30ae:	e003      	b.n	30b8 <mbedtls_zeroize+0xa>
    30b0:	2200      	movs	r2, #0
    30b2:	7002      	strb	r2, [r0, #0]
    30b4:	3001      	adds	r0, #1
    30b6:	4619      	mov	r1, r3
    30b8:	1e4b      	subs	r3, r1, #1
    30ba:	2900      	cmp	r1, #0
    30bc:	d1f8      	bne.n	30b0 <mbedtls_zeroize+0x2>
}
    30be:	4770      	bx	lr

000030c0 <mbedtls_zeroize>:
#endif /* MBEDTLS_PLATFORM_C */
#endif /* MBEDTLS_SELF_TEST */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    30c0:	e003      	b.n	30ca <mbedtls_zeroize+0xa>
    30c2:	2200      	movs	r2, #0
    30c4:	7002      	strb	r2, [r0, #0]
    30c6:	3001      	adds	r0, #1
    30c8:	4619      	mov	r1, r3
    30ca:	1e4b      	subs	r3, r1, #1
    30cc:	2900      	cmp	r1, #0
    30ce:	d1f8      	bne.n	30c2 <mbedtls_zeroize+0x2>
}
    30d0:	4770      	bx	lr

000030d2 <mbedtls_zeroize>:

#if !defined(MBEDTLS_DES_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    30d2:	e003      	b.n	30dc <mbedtls_zeroize+0xa>
    30d4:	2200      	movs	r2, #0
    30d6:	7002      	strb	r2, [r0, #0]
    30d8:	3001      	adds	r0, #1
    30da:	4619      	mov	r1, r3
    30dc:	1e4b      	subs	r3, r1, #1
    30de:	2900      	cmp	r1, #0
    30e0:	d1f8      	bne.n	30d4 <mbedtls_zeroize+0x2>
}
    30e2:	4770      	bx	lr

000030e4 <mbedtls_zeroize>:
#define mbedtls_free       free
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    30e4:	e003      	b.n	30ee <mbedtls_zeroize+0xa>
    30e6:	2200      	movs	r2, #0
    30e8:	7002      	strb	r2, [r0, #0]
    30ea:	3001      	adds	r0, #1
    30ec:	4619      	mov	r1, r3
    30ee:	1e4b      	subs	r3, r1, #1
    30f0:	2900      	cmp	r1, #0
    30f2:	d1f8      	bne.n	30e6 <mbedtls_zeroize+0x2>
}
    30f4:	4770      	bx	lr

000030f6 <mbedtls_zeroize>:
#define inline __inline
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    30f6:	e003      	b.n	3100 <mbedtls_zeroize+0xa>
    30f8:	2200      	movs	r2, #0
    30fa:	7002      	strb	r2, [r0, #0]
    30fc:	3001      	adds	r0, #1
    30fe:	4619      	mov	r1, r3
    3100:	1e4b      	subs	r3, r1, #1
    3102:	2900      	cmp	r1, #0
    3104:	d1f8      	bne.n	30f8 <mbedtls_zeroize+0x2>
}
    3106:	4770      	bx	lr

00003108 <mbedtls_zeroize>:
#include "mbedtls/havege.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3108:	e003      	b.n	3112 <mbedtls_zeroize+0xa>
    310a:	2200      	movs	r2, #0
    310c:	7002      	strb	r2, [r0, #0]
    310e:	3001      	adds	r0, #1
    3110:	4619      	mov	r1, r3
    3112:	1e4b      	subs	r3, r1, #1
    3114:	2900      	cmp	r1, #0
    3116:	d1f8      	bne.n	310a <mbedtls_zeroize+0x2>
}
    3118:	4770      	bx	lr

0000311a <mbedtls_zeroize>:
}
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    311a:	e003      	b.n	3124 <mbedtls_zeroize+0xa>
    311c:	2200      	movs	r2, #0
    311e:	7002      	strb	r2, [r0, #0]
    3120:	3001      	adds	r0, #1
    3122:	4619      	mov	r1, r3
    3124:	1e4b      	subs	r3, r1, #1
    3126:	2900      	cmp	r1, #0
    3128:	d1f8      	bne.n	311c <mbedtls_zeroize+0x2>
}
    312a:	4770      	bx	lr

0000312c <mbedtls_zeroize>:
#endif /* MBEDTLS_SELF_TEST */
#endif /* MBEDTLS_PLATFORM_C */

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    312c:	e003      	b.n	3136 <mbedtls_zeroize+0xa>
    312e:	2200      	movs	r2, #0
    3130:	7002      	strb	r2, [r0, #0]
    3132:	3001      	adds	r0, #1
    3134:	4619      	mov	r1, r3
    3136:	1e4b      	subs	r3, r1, #1
    3138:	2900      	cmp	r1, #0
    313a:	d1f8      	bne.n	312e <mbedtls_zeroize+0x2>
}
    313c:	4770      	bx	lr

0000313e <mbedtls_zeroize>:
#include <stdio.h>
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    313e:	e003      	b.n	3148 <mbedtls_zeroize+0xa>
    3140:	2200      	movs	r2, #0
    3142:	7002      	strb	r2, [r0, #0]
    3144:	3001      	adds	r0, #1
    3146:	4619      	mov	r1, r3
    3148:	1e4b      	subs	r3, r1, #1
    314a:	2900      	cmp	r1, #0
    314c:	d1f8      	bne.n	3140 <mbedtls_zeroize+0x2>
}
    314e:	4770      	bx	lr

00003150 <mbedtls_zeroize>:

#if !defined(MBEDTLS_MD5_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3150:	e003      	b.n	315a <mbedtls_zeroize+0xa>
    3152:	2200      	movs	r2, #0
    3154:	7002      	strb	r2, [r0, #0]
    3156:	3001      	adds	r0, #1
    3158:	4619      	mov	r1, r3
    315a:	1e4b      	subs	r3, r1, #1
    315c:	2900      	cmp	r1, #0
    315e:	d1f8      	bne.n	3152 <mbedtls_zeroize+0x2>
}
    3160:	4770      	bx	lr

00003162 <mbedtls_zeroize>:
#include "mbedtls/threading.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3162:	e003      	b.n	316c <mbedtls_zeroize+0xa>
    3164:	2200      	movs	r2, #0
    3166:	7002      	strb	r2, [r0, #0]
    3168:	3001      	adds	r0, #1
    316a:	4619      	mov	r1, r3
    316c:	1e4b      	subs	r3, r1, #1
    316e:	2900      	cmp	r1, #0
    3170:	d1f8      	bne.n	3164 <mbedtls_zeroize+0x2>
}
    3172:	4770      	bx	lr

00003174 <mbedtls_zeroize>:

#include <limits.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3174:	e003      	b.n	317e <mbedtls_zeroize+0xa>
    3176:	2200      	movs	r2, #0
    3178:	7002      	strb	r2, [r0, #0]
    317a:	3001      	adds	r0, #1
    317c:	4619      	mov	r1, r3
    317e:	1e4b      	subs	r3, r1, #1
    3180:	2900      	cmp	r1, #0
    3182:	d1f8      	bne.n	3176 <mbedtls_zeroize+0x2>
}
    3184:	4770      	bx	lr

00003186 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA1_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = (unsigned char*)v; while( n-- ) *p++ = 0;
    3186:	e003      	b.n	3190 <mbedtls_zeroize+0xa>
    3188:	2200      	movs	r2, #0
    318a:	7002      	strb	r2, [r0, #0]
    318c:	3001      	adds	r0, #1
    318e:	4619      	mov	r1, r3
    3190:	1e4b      	subs	r3, r1, #1
    3192:	2900      	cmp	r1, #0
    3194:	d1f8      	bne.n	3188 <mbedtls_zeroize+0x2>
}
    3196:	4770      	bx	lr

00003198 <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA256_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    3198:	e003      	b.n	31a2 <mbedtls_zeroize+0xa>
    319a:	2200      	movs	r2, #0
    319c:	7002      	strb	r2, [r0, #0]
    319e:	3001      	adds	r0, #1
    31a0:	4619      	mov	r1, r3
    31a2:	1e4b      	subs	r3, r1, #1
    31a4:	2900      	cmp	r1, #0
    31a6:	d1f8      	bne.n	319a <mbedtls_zeroize+0x2>
}
    31a8:	4770      	bx	lr

000031aa <mbedtls_zeroize>:

#if !defined(MBEDTLS_SHA512_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    31aa:	e003      	b.n	31b4 <mbedtls_zeroize+0xa>
    31ac:	2200      	movs	r2, #0
    31ae:	7002      	strb	r2, [r0, #0]
    31b0:	3001      	adds	r0, #1
    31b2:	4619      	mov	r1, r3
    31b4:	1e4b      	subs	r3, r1, #1
    31b6:	2900      	cmp	r1, #0
    31b8:	d1f8      	bne.n	31ac <mbedtls_zeroize+0x2>
}
    31ba:	4770      	bx	lr

000031bc <mbedtls_zeroize>:

#include <string.h>

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    31bc:	e003      	b.n	31c6 <mbedtls_zeroize+0xa>
    31be:	2200      	movs	r2, #0
    31c0:	7002      	strb	r2, [r0, #0]
    31c2:	3001      	adds	r0, #1
    31c4:	4619      	mov	r1, r3
    31c6:	1e4b      	subs	r3, r1, #1
    31c8:	2900      	cmp	r1, #0
    31ca:	d1f8      	bne.n	31be <mbedtls_zeroize+0x2>
}
    31cc:	4770      	bx	lr

000031ce <mbedtls_zeroize>:
#include "mbedtls/oid.h"
#endif

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    31ce:	e003      	b.n	31d8 <mbedtls_zeroize+0xa>
    31d0:	2200      	movs	r2, #0
    31d2:	7002      	strb	r2, [r0, #0]
    31d4:	3001      	adds	r0, #1
    31d6:	4619      	mov	r1, r3
    31d8:	1e4b      	subs	r3, r1, #1
    31da:	2900      	cmp	r1, #0
    31dc:	d1f8      	bne.n	31d0 <mbedtls_zeroize+0x2>
}
    31de:	4770      	bx	lr

000031e0 <mbedtls_zeroize>:

#if !defined(MBEDTLS_XTEA_ALT)

/* Implementation that should never be optimized out by the compiler */
static void mbedtls_zeroize( void *v, size_t n ) {
    volatile unsigned char *p = v; while( n-- ) *p++ = 0;
    31e0:	e003      	b.n	31ea <mbedtls_zeroize+0xa>
    31e2:	2200      	movs	r2, #0
    31e4:	7002      	strb	r2, [r0, #0]
    31e6:	3001      	adds	r0, #1
    31e8:	4619      	mov	r1, r3
    31ea:	1e4b      	subs	r3, r1, #1
    31ec:	2900      	cmp	r1, #0
    31ee:	d1f8      	bne.n	31e2 <mbedtls_zeroize+0x2>
}
    31f0:	4770      	bx	lr

000031f2 <mbedtls_aes_init>:
}

#endif /* MBEDTLS_AES_ROM_TABLES */

void mbedtls_aes_init( mbedtls_aes_context *ctx )
{
    31f2:	b508      	push	{r3, lr}
    memset( ctx, 0, sizeof( mbedtls_aes_context ) );
    31f4:	f44f 728c 	mov.w	r2, #280	; 0x118
    31f8:	2100      	movs	r1, #0
    31fa:	f026 fbcd 	bl	29998 <memset>
    31fe:	bd08      	pop	{r3, pc}

00003200 <mbedtls_aes_free>:
}

void mbedtls_aes_free( mbedtls_aes_context *ctx )
{
    if( ctx == NULL )
    3200:	b128      	cbz	r0, 320e <mbedtls_aes_free+0xe>
{
    3202:	b508      	push	{r3, lr}
        return;

    mbedtls_zeroize( ctx, sizeof( mbedtls_aes_context ) );
    3204:	f44f 718c 	mov.w	r1, #280	; 0x118
    3208:	f7ff ff12 	bl	3030 <mbedtls_zeroize>
    320c:	bd08      	pop	{r3, pc}
    320e:	4770      	bx	lr

00003210 <mbedtls_aes_setkey_enc>:
        aes_init_done = 1;

    }
#endif

    switch( keybits )
    3210:	2ac0      	cmp	r2, #192	; 0xc0
    3212:	d00f      	beq.n	3234 <mbedtls_aes_setkey_enc+0x24>
    3214:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
    3218:	d00f      	beq.n	323a <mbedtls_aes_setkey_enc+0x2a>
    321a:	2a80      	cmp	r2, #128	; 0x80
    321c:	d002      	beq.n	3224 <mbedtls_aes_setkey_enc+0x14>
    {
        case 128: ctx->nr = 10; break;
        case 192: ctx->nr = 12; break;
        case 256: ctx->nr = 14; break;
        default : return( MBEDTLS_ERR_AES_INVALID_KEY_LENGTH );
    321e:	f06f 001f 	mvn.w	r0, #31
    3222:	4770      	bx	lr
        case 128: ctx->nr = 10; break;
    3224:	230a      	movs	r3, #10
    3226:	6003      	str	r3, [r0, #0]
{
    3228:	b4f0      	push	{r4, r5, r6, r7}

    if( aes_padlock_ace )
        ctx->rk = RK = MBEDTLS_PADLOCK_ALIGN16( ctx->buf );
    else
#endif
    ctx->rk = RK = ctx->buf;
    322a:	f100 0308 	add.w	r3, r0, #8
    322e:	6043      	str	r3, [r0, #4]
#if defined(MBEDTLS_AESNI_C) && defined(MBEDTLS_HAVE_X86_64)
    if( mbedtls_aesni_has_support( MBEDTLS_AESNI_AES ) )
        return( mbedtls_aesni_setkey_enc( (unsigned char *) ctx->rk, key, keybits ) );
#endif

    for( i = 0; i < ( keybits >> 5 ); i++ )
    3230:	2500      	movs	r5, #0
    3232:	e015      	b.n	3260 <mbedtls_aes_setkey_enc+0x50>
        case 192: ctx->nr = 12; break;
    3234:	230c      	movs	r3, #12
    3236:	6003      	str	r3, [r0, #0]
    3238:	e7f6      	b.n	3228 <mbedtls_aes_setkey_enc+0x18>
        case 256: ctx->nr = 14; break;
    323a:	230e      	movs	r3, #14
    323c:	6003      	str	r3, [r0, #0]
    323e:	e7f3      	b.n	3228 <mbedtls_aes_setkey_enc+0x18>
    {
        GET_UINT32_LE( RK[i], key, i << 2 );
    3240:	f811 4025 	ldrb.w	r4, [r1, r5, lsl #2]
    3244:	eb01 0685 	add.w	r6, r1, r5, lsl #2
    3248:	7877      	ldrb	r7, [r6, #1]
    324a:	ea44 2407 	orr.w	r4, r4, r7, lsl #8
    324e:	78b7      	ldrb	r7, [r6, #2]
    3250:	ea44 4407 	orr.w	r4, r4, r7, lsl #16
    3254:	78f6      	ldrb	r6, [r6, #3]
    3256:	ea44 6406 	orr.w	r4, r4, r6, lsl #24
    325a:	f843 4025 	str.w	r4, [r3, r5, lsl #2]
    for( i = 0; i < ( keybits >> 5 ); i++ )
    325e:	3501      	adds	r5, #1
    3260:	ebb5 1f52 	cmp.w	r5, r2, lsr #5
    3264:	d3ec      	bcc.n	3240 <mbedtls_aes_setkey_enc+0x30>
    }

    switch( ctx->nr )
    3266:	6802      	ldr	r2, [r0, #0]
    3268:	2a0c      	cmp	r2, #12
    326a:	d05d      	beq.n	3328 <mbedtls_aes_setkey_enc+0x118>
    326c:	2a0e      	cmp	r2, #14
    326e:	f000 80a0 	beq.w	33b2 <mbedtls_aes_setkey_enc+0x1a2>
    3272:	2a0a      	cmp	r2, #10
    3274:	d029      	beq.n	32ca <mbedtls_aes_setkey_enc+0xba>
                RK[15] = RK[7] ^ RK[14];
            }
            break;
    }

    return( 0 );
    3276:	2000      	movs	r0, #0
    3278:	e025      	b.n	32c6 <mbedtls_aes_setkey_enc+0xb6>
                RK[4]  = RK[0] ^ RCON[i] ^
    327a:	681a      	ldr	r2, [r3, #0]
    327c:	494e      	ldr	r1, [pc, #312]	; (33b8 <mbedtls_aes_setkey_enc+0x1a8>)
    327e:	f851 1024 	ldr.w	r1, [r1, r4, lsl #2]
    3282:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3284:	68d9      	ldr	r1, [r3, #12]
    3286:	f3c1 2507 	ubfx	r5, r1, #8, #8
    328a:	484c      	ldr	r0, [pc, #304]	; (33bc <mbedtls_aes_setkey_enc+0x1ac>)
    328c:	5d45      	ldrb	r5, [r0, r5]
                RK[4]  = RK[0] ^ RCON[i] ^
    328e:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    3290:	f3c1 4507 	ubfx	r5, r1, #16, #8
    3294:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >>  8 ) & 0xFF ]       ) ^
    3296:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    329a:	0e0d      	lsrs	r5, r1, #24
    329c:	5d45      	ldrb	r5, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 16 ) & 0xFF ] <<  8 ) ^
    329e:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[3]       ) & 0xFF ] << 24 );
    32a2:	b2cd      	uxtb	r5, r1
    32a4:	5d40      	ldrb	r0, [r0, r5]
                ( (uint32_t) FSb[ ( RK[3] >> 24 ) & 0xFF ] << 16 ) ^
    32a6:	ea82 6200 	eor.w	r2, r2, r0, lsl #24
                RK[4]  = RK[0] ^ RCON[i] ^
    32aa:	611a      	str	r2, [r3, #16]
                RK[5]  = RK[1] ^ RK[4];
    32ac:	6858      	ldr	r0, [r3, #4]
    32ae:	4042      	eors	r2, r0
    32b0:	615a      	str	r2, [r3, #20]
                RK[6]  = RK[2] ^ RK[5];
    32b2:	6898      	ldr	r0, [r3, #8]
    32b4:	4042      	eors	r2, r0
    32b6:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[3] ^ RK[6];
    32b8:	404a      	eors	r2, r1
    32ba:	61da      	str	r2, [r3, #28]
            for( i = 0; i < 10; i++, RK += 4 )
    32bc:	3401      	adds	r4, #1
    32be:	3310      	adds	r3, #16
    32c0:	2c09      	cmp	r4, #9
    32c2:	d9da      	bls.n	327a <mbedtls_aes_setkey_enc+0x6a>
    return( 0 );
    32c4:	2000      	movs	r0, #0
}
    32c6:	bcf0      	pop	{r4, r5, r6, r7}
    32c8:	4770      	bx	lr
    switch( ctx->nr )
    32ca:	2400      	movs	r4, #0
    32cc:	e7f8      	b.n	32c0 <mbedtls_aes_setkey_enc+0xb0>
                RK[6]  = RK[0] ^ RCON[i] ^
    32ce:	681a      	ldr	r2, [r3, #0]
    32d0:	4939      	ldr	r1, [pc, #228]	; (33b8 <mbedtls_aes_setkey_enc+0x1a8>)
    32d2:	f851 1020 	ldr.w	r1, [r1, r0, lsl #2]
    32d6:	404a      	eors	r2, r1
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    32d8:	6959      	ldr	r1, [r3, #20]
    32da:	f3c1 2507 	ubfx	r5, r1, #8, #8
    32de:	4c37      	ldr	r4, [pc, #220]	; (33bc <mbedtls_aes_setkey_enc+0x1ac>)
    32e0:	5d65      	ldrb	r5, [r4, r5]
                RK[6]  = RK[0] ^ RCON[i] ^
    32e2:	406a      	eors	r2, r5
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    32e4:	f3c1 4507 	ubfx	r5, r1, #16, #8
    32e8:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >>  8 ) & 0xFF ]       ) ^
    32ea:	ea82 2205 	eor.w	r2, r2, r5, lsl #8
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    32ee:	0e0d      	lsrs	r5, r1, #24
    32f0:	5d65      	ldrb	r5, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 16 ) & 0xFF ] <<  8 ) ^
    32f2:	ea82 4205 	eor.w	r2, r2, r5, lsl #16
                ( (uint32_t) FSb[ ( RK[5]       ) & 0xFF ] << 24 );
    32f6:	b2cd      	uxtb	r5, r1
    32f8:	5d64      	ldrb	r4, [r4, r5]
                ( (uint32_t) FSb[ ( RK[5] >> 24 ) & 0xFF ] << 16 ) ^
    32fa:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[6]  = RK[0] ^ RCON[i] ^
    32fe:	619a      	str	r2, [r3, #24]
                RK[7]  = RK[1] ^ RK[6];
    3300:	685c      	ldr	r4, [r3, #4]
    3302:	4062      	eors	r2, r4
    3304:	61da      	str	r2, [r3, #28]
                RK[8]  = RK[2] ^ RK[7];
    3306:	689c      	ldr	r4, [r3, #8]
    3308:	4062      	eors	r2, r4
    330a:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[3] ^ RK[8];
    330c:	68dc      	ldr	r4, [r3, #12]
    330e:	4062      	eors	r2, r4
    3310:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[4] ^ RK[9];
    3312:	691c      	ldr	r4, [r3, #16]
    3314:	4062      	eors	r2, r4
    3316:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[5] ^ RK[10];
    3318:	404a      	eors	r2, r1
    331a:	62da      	str	r2, [r3, #44]	; 0x2c
            for( i = 0; i < 8; i++, RK += 6 )
    331c:	3001      	adds	r0, #1
    331e:	3318      	adds	r3, #24
    3320:	2807      	cmp	r0, #7
    3322:	d9d4      	bls.n	32ce <mbedtls_aes_setkey_enc+0xbe>
    return( 0 );
    3324:	2000      	movs	r0, #0
    3326:	e7ce      	b.n	32c6 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    3328:	2000      	movs	r0, #0
    332a:	e7f9      	b.n	3320 <mbedtls_aes_setkey_enc+0x110>
                RK[8]  = RK[0] ^ RCON[i] ^
    332c:	681a      	ldr	r2, [r3, #0]
    332e:	4822      	ldr	r0, [pc, #136]	; (33b8 <mbedtls_aes_setkey_enc+0x1a8>)
    3330:	f850 0021 	ldr.w	r0, [r0, r1, lsl #2]
    3334:	4042      	eors	r2, r0
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3336:	69d8      	ldr	r0, [r3, #28]
    3338:	f3c0 2407 	ubfx	r4, r0, #8, #8
    333c:	4d1f      	ldr	r5, [pc, #124]	; (33bc <mbedtls_aes_setkey_enc+0x1ac>)
    333e:	5d2c      	ldrb	r4, [r5, r4]
                RK[8]  = RK[0] ^ RCON[i] ^
    3340:	4062      	eors	r2, r4
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3342:	f3c0 4407 	ubfx	r4, r0, #16, #8
    3346:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >>  8 ) & 0xFF ]       ) ^
    3348:	ea82 2204 	eor.w	r2, r2, r4, lsl #8
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    334c:	0e04      	lsrs	r4, r0, #24
    334e:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 16 ) & 0xFF ] <<  8 ) ^
    3350:	ea82 4204 	eor.w	r2, r2, r4, lsl #16
                ( (uint32_t) FSb[ ( RK[7]       ) & 0xFF ] << 24 );
    3354:	b2c4      	uxtb	r4, r0
    3356:	5d2c      	ldrb	r4, [r5, r4]
                ( (uint32_t) FSb[ ( RK[7] >> 24 ) & 0xFF ] << 16 ) ^
    3358:	ea82 6204 	eor.w	r2, r2, r4, lsl #24
                RK[8]  = RK[0] ^ RCON[i] ^
    335c:	621a      	str	r2, [r3, #32]
                RK[9]  = RK[1] ^ RK[8];
    335e:	685c      	ldr	r4, [r3, #4]
    3360:	4062      	eors	r2, r4
    3362:	625a      	str	r2, [r3, #36]	; 0x24
                RK[10] = RK[2] ^ RK[9];
    3364:	689c      	ldr	r4, [r3, #8]
    3366:	4062      	eors	r2, r4
    3368:	629a      	str	r2, [r3, #40]	; 0x28
                RK[11] = RK[3] ^ RK[10];
    336a:	68dc      	ldr	r4, [r3, #12]
    336c:	4062      	eors	r2, r4
    336e:	62da      	str	r2, [r3, #44]	; 0x2c
                RK[12] = RK[4] ^
    3370:	691c      	ldr	r4, [r3, #16]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    3372:	b2d6      	uxtb	r6, r2
    3374:	5dae      	ldrb	r6, [r5, r6]
                RK[12] = RK[4] ^
    3376:	4074      	eors	r4, r6
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3378:	f3c2 2607 	ubfx	r6, r2, #8, #8
    337c:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11]       ) & 0xFF ]       ) ^
    337e:	ea84 2406 	eor.w	r4, r4, r6, lsl #8
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3382:	f3c2 4607 	ubfx	r6, r2, #16, #8
    3386:	5dae      	ldrb	r6, [r5, r6]
                ( (uint32_t) FSb[ ( RK[11] >>  8 ) & 0xFF ] <<  8 ) ^
    3388:	ea84 4406 	eor.w	r4, r4, r6, lsl #16
                ( (uint32_t) FSb[ ( RK[11] >> 24 ) & 0xFF ] << 24 );
    338c:	0e12      	lsrs	r2, r2, #24
    338e:	5caa      	ldrb	r2, [r5, r2]
                ( (uint32_t) FSb[ ( RK[11] >> 16 ) & 0xFF ] << 16 ) ^
    3390:	ea84 6202 	eor.w	r2, r4, r2, lsl #24
                RK[12] = RK[4] ^
    3394:	631a      	str	r2, [r3, #48]	; 0x30
                RK[13] = RK[5] ^ RK[12];
    3396:	695c      	ldr	r4, [r3, #20]
    3398:	4062      	eors	r2, r4
    339a:	635a      	str	r2, [r3, #52]	; 0x34
                RK[14] = RK[6] ^ RK[13];
    339c:	699c      	ldr	r4, [r3, #24]
    339e:	4062      	eors	r2, r4
    33a0:	639a      	str	r2, [r3, #56]	; 0x38
                RK[15] = RK[7] ^ RK[14];
    33a2:	4042      	eors	r2, r0
    33a4:	63da      	str	r2, [r3, #60]	; 0x3c
            for( i = 0; i < 7; i++, RK += 8 )
    33a6:	3101      	adds	r1, #1
    33a8:	3320      	adds	r3, #32
    33aa:	2906      	cmp	r1, #6
    33ac:	d9be      	bls.n	332c <mbedtls_aes_setkey_enc+0x11c>
    return( 0 );
    33ae:	2000      	movs	r0, #0
    33b0:	e789      	b.n	32c6 <mbedtls_aes_setkey_enc+0xb6>
    switch( ctx->nr )
    33b2:	2100      	movs	r1, #0
    33b4:	e7f9      	b.n	33aa <mbedtls_aes_setkey_enc+0x19a>
    33b6:	bf00      	nop
    33b8:	0002c2e8 	.word	0x0002c2e8
    33bc:	0002b0e8 	.word	0x0002b0e8

000033c0 <mbedtls_internal_aes_encrypt>:
 */
#if !defined(MBEDTLS_AES_ENCRYPT_ALT)
int mbedtls_internal_aes_encrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    33c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    33c4:	b083      	sub	sp, #12
    33c6:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    33c8:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    33ca:	f891 9000 	ldrb.w	r9, [r1]
    33ce:	784b      	ldrb	r3, [r1, #1]
    33d0:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    33d4:	788b      	ldrb	r3, [r1, #2]
    33d6:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    33da:	78cb      	ldrb	r3, [r1, #3]
    33dc:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    33e0:	6813      	ldr	r3, [r2, #0]
    33e2:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    33e6:	f891 a004 	ldrb.w	sl, [r1, #4]
    33ea:	794b      	ldrb	r3, [r1, #5]
    33ec:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    33f0:	798b      	ldrb	r3, [r1, #6]
    33f2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    33f6:	79cb      	ldrb	r3, [r1, #7]
    33f8:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    33fc:	6853      	ldr	r3, [r2, #4]
    33fe:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    3402:	7a0c      	ldrb	r4, [r1, #8]
    3404:	7a4b      	ldrb	r3, [r1, #9]
    3406:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    340a:	7a8b      	ldrb	r3, [r1, #10]
    340c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    3410:	7acb      	ldrb	r3, [r1, #11]
    3412:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    3416:	6893      	ldr	r3, [r2, #8]
    3418:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    341a:	7b0b      	ldrb	r3, [r1, #12]
    341c:	7b4d      	ldrb	r5, [r1, #13]
    341e:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    3422:	7b8d      	ldrb	r5, [r1, #14]
    3424:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    3428:	7bc9      	ldrb	r1, [r1, #15]
    342a:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    342e:	f102 0610 	add.w	r6, r2, #16
    3432:	68d3      	ldr	r3, [r2, #12]
    3434:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3436:	6803      	ldr	r3, [r0, #0]
    3438:	ea4f 0b63 	mov.w	fp, r3, asr #1
    343c:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    3440:	460b      	mov	r3, r1
    3442:	e0bd      	b.n	35c0 <mbedtls_internal_aes_encrypt+0x200>
    {
        AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3444:	6832      	ldr	r2, [r6, #0]
    3446:	fa5f f089 	uxtb.w	r0, r9
    344a:	49cb      	ldr	r1, [pc, #812]	; (3778 <mbedtls_internal_aes_encrypt+0x3b8>)
    344c:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    3450:	ea82 0c00 	eor.w	ip, r2, r0
    3454:	f3ca 2207 	ubfx	r2, sl, #8, #8
    3458:	4dc8      	ldr	r5, [pc, #800]	; (377c <mbedtls_internal_aes_encrypt+0x3bc>)
    345a:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    345e:	ea8c 0c02 	eor.w	ip, ip, r2
    3462:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3466:	48c6      	ldr	r0, [pc, #792]	; (3780 <mbedtls_internal_aes_encrypt+0x3c0>)
    3468:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    346c:	ea8c 0c02 	eor.w	ip, ip, r2
    3470:	0e1f      	lsrs	r7, r3, #24
    3472:	4ac4      	ldr	r2, [pc, #784]	; (3784 <mbedtls_internal_aes_encrypt+0x3c4>)
    3474:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3478:	ea8c 0c07 	eor.w	ip, ip, r7
    347c:	fa5f fe8a 	uxtb.w	lr, sl
    3480:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3484:	6877      	ldr	r7, [r6, #4]
    3486:	ea87 080e 	eor.w	r8, r7, lr
    348a:	f3c4 2707 	ubfx	r7, r4, #8, #8
    348e:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3492:	ea88 0807 	eor.w	r8, r8, r7
    3496:	f3c3 4707 	ubfx	r7, r3, #16, #8
    349a:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    349e:	ea88 0807 	eor.w	r8, r8, r7
    34a2:	ea4f 6719 	mov.w	r7, r9, lsr #24
    34a6:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    34aa:	ea88 0807 	eor.w	r8, r8, r7
    34ae:	fa5f fe84 	uxtb.w	lr, r4
    34b2:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    34b6:	68b7      	ldr	r7, [r6, #8]
    34b8:	ea87 0e0e 	eor.w	lr, r7, lr
    34bc:	f3c3 2707 	ubfx	r7, r3, #8, #8
    34c0:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    34c4:	ea8e 0e07 	eor.w	lr, lr, r7
    34c8:	f3c9 4707 	ubfx	r7, r9, #16, #8
    34cc:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    34d0:	ea8e 0e07 	eor.w	lr, lr, r7
    34d4:	ea4f 671a 	mov.w	r7, sl, lsr #24
    34d8:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    34dc:	ea8e 0e07 	eor.w	lr, lr, r7
    34e0:	68f7      	ldr	r7, [r6, #12]
    34e2:	b2db      	uxtb	r3, r3
    34e4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    34e8:	405f      	eors	r7, r3
    34ea:	f3c9 2907 	ubfx	r9, r9, #8, #8
    34ee:	f855 3029 	ldr.w	r3, [r5, r9, lsl #2]
    34f2:	405f      	eors	r7, r3
    34f4:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    34f8:	f850 302a 	ldr.w	r3, [r0, sl, lsl #2]
    34fc:	405f      	eors	r7, r3
    34fe:	0e24      	lsrs	r4, r4, #24
    3500:	f852 3024 	ldr.w	r3, [r2, r4, lsl #2]
    3504:	405f      	eors	r7, r3
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    3506:	6933      	ldr	r3, [r6, #16]
    3508:	fa5f f48c 	uxtb.w	r4, ip
    350c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3510:	ea83 0904 	eor.w	r9, r3, r4
    3514:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3518:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    351c:	ea89 0903 	eor.w	r9, r9, r3
    3520:	f3ce 4307 	ubfx	r3, lr, #16, #8
    3524:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3528:	ea89 0903 	eor.w	r9, r9, r3
    352c:	0e3b      	lsrs	r3, r7, #24
    352e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3532:	ea89 0903 	eor.w	r9, r9, r3
    3536:	6973      	ldr	r3, [r6, #20]
    3538:	fa5f f488 	uxtb.w	r4, r8
    353c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3540:	ea83 0a04 	eor.w	sl, r3, r4
    3544:	f3ce 2307 	ubfx	r3, lr, #8, #8
    3548:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    354c:	ea8a 0a03 	eor.w	sl, sl, r3
    3550:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3554:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3558:	ea8a 0a03 	eor.w	sl, sl, r3
    355c:	ea4f 631c 	mov.w	r3, ip, lsr #24
    3560:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3564:	ea8a 0a03 	eor.w	sl, sl, r3
    3568:	69b3      	ldr	r3, [r6, #24]
    356a:	fa5f f48e 	uxtb.w	r4, lr
    356e:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3572:	405c      	eors	r4, r3
    3574:	f3c7 2307 	ubfx	r3, r7, #8, #8
    3578:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    357c:	405c      	eors	r4, r3
    357e:	f3cc 4307 	ubfx	r3, ip, #16, #8
    3582:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3586:	405c      	eors	r4, r3
    3588:	ea4f 6318 	mov.w	r3, r8, lsr #24
    358c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3590:	405c      	eors	r4, r3
    3592:	69f3      	ldr	r3, [r6, #28]
    3594:	b2ff      	uxtb	r7, r7
    3596:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    359a:	404b      	eors	r3, r1
    359c:	f3cc 2c07 	ubfx	ip, ip, #8, #8
    35a0:	f855 102c 	ldr.w	r1, [r5, ip, lsl #2]
    35a4:	404b      	eors	r3, r1
    35a6:	f3c8 4807 	ubfx	r8, r8, #16, #8
    35aa:	f850 1028 	ldr.w	r1, [r0, r8, lsl #2]
    35ae:	404b      	eors	r3, r1
    35b0:	ea4f 6e1e 	mov.w	lr, lr, lsr #24
    35b4:	f852 202e 	ldr.w	r2, [r2, lr, lsl #2]
    35b8:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    35ba:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_FROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    35be:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    35c0:	f1bb 0f00 	cmp.w	fp, #0
    35c4:	f73f af3e 	bgt.w	3444 <mbedtls_internal_aes_encrypt+0x84>
    35c8:	4619      	mov	r1, r3
    }

    AES_FROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    35ca:	6833      	ldr	r3, [r6, #0]
    35cc:	fa5f f289 	uxtb.w	r2, r9
    35d0:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 3778 <mbedtls_internal_aes_encrypt+0x3b8>
    35d4:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    35d8:	405a      	eors	r2, r3
    35da:	f3ca 2307 	ubfx	r3, sl, #8, #8
    35de:	4f67      	ldr	r7, [pc, #412]	; (377c <mbedtls_internal_aes_encrypt+0x3bc>)
    35e0:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    35e4:	405a      	eors	r2, r3
    35e6:	f3c4 4307 	ubfx	r3, r4, #16, #8
    35ea:	4d65      	ldr	r5, [pc, #404]	; (3780 <mbedtls_internal_aes_encrypt+0x3c0>)
    35ec:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    35f0:	405a      	eors	r2, r3
    35f2:	0e0b      	lsrs	r3, r1, #24
    35f4:	4863      	ldr	r0, [pc, #396]	; (3784 <mbedtls_internal_aes_encrypt+0x3c4>)
    35f6:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    35fa:	405a      	eors	r2, r3
    35fc:	fa5f fc8a 	uxtb.w	ip, sl
    3600:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    3604:	6873      	ldr	r3, [r6, #4]
    3606:	ea83 0c0c 	eor.w	ip, r3, ip
    360a:	f3c4 2307 	ubfx	r3, r4, #8, #8
    360e:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3612:	ea8c 0c03 	eor.w	ip, ip, r3
    3616:	f3c1 4307 	ubfx	r3, r1, #16, #8
    361a:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    361e:	ea8c 0c03 	eor.w	ip, ip, r3
    3622:	ea4f 6319 	mov.w	r3, r9, lsr #24
    3626:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    362a:	ea8c 0c03 	eor.w	ip, ip, r3
    362e:	fa5f f884 	uxtb.w	r8, r4
    3632:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3636:	68b3      	ldr	r3, [r6, #8]
    3638:	ea83 0808 	eor.w	r8, r3, r8
    363c:	f3c1 2307 	ubfx	r3, r1, #8, #8
    3640:	f857 3023 	ldr.w	r3, [r7, r3, lsl #2]
    3644:	ea88 0803 	eor.w	r8, r8, r3
    3648:	f3c9 4307 	ubfx	r3, r9, #16, #8
    364c:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    3650:	ea88 0803 	eor.w	r8, r8, r3
    3654:	ea4f 631a 	mov.w	r3, sl, lsr #24
    3658:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    365c:	ea88 0803 	eor.w	r8, r8, r3
    3660:	68f3      	ldr	r3, [r6, #12]
    3662:	b2c9      	uxtb	r1, r1
    3664:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    3668:	404b      	eors	r3, r1
    366a:	f3c9 2907 	ubfx	r9, r9, #8, #8
    366e:	f857 7029 	ldr.w	r7, [r7, r9, lsl #2]
    3672:	405f      	eors	r7, r3
    3674:	f3ca 4a07 	ubfx	sl, sl, #16, #8
    3678:	f855 302a 	ldr.w	r3, [r5, sl, lsl #2]
    367c:	405f      	eors	r7, r3
    367e:	0e24      	lsrs	r4, r4, #24
    3680:	f850 3024 	ldr.w	r3, [r0, r4, lsl #2]
    3684:	405f      	eors	r7, r3

    X0 = *RK++ ^ \
    3686:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3688:	b2d0      	uxtb	r0, r2
    368a:	4b3f      	ldr	r3, [pc, #252]	; (3788 <mbedtls_internal_aes_encrypt+0x3c8>)
    368c:	5c1c      	ldrb	r4, [r3, r0]
    X0 = *RK++ ^ \
    368e:	404c      	eors	r4, r1
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3690:	f3cc 2107 	ubfx	r1, ip, #8, #8
    3694:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y0       ) & 0xFF ]       ) ^
    3696:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) FSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    369a:	f3c8 4107 	ubfx	r1, r8, #16, #8
    369e:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    36a0:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) FSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    36a4:	0e39      	lsrs	r1, r7, #24
    36a6:	5c59      	ldrb	r1, [r3, r1]
    X0 = *RK++ ^ \
    36a8:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    36ac:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    36ae:	fa5f f08c 	uxtb.w	r0, ip
    36b2:	5c18      	ldrb	r0, [r3, r0]
    X1 = *RK++ ^ \
    36b4:	4048      	eors	r0, r1
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    36b6:	f3c8 2107 	ubfx	r1, r8, #8, #8
    36ba:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y1       ) & 0xFF ]       ) ^
    36bc:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) FSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    36c0:	f3c7 4107 	ubfx	r1, r7, #16, #8
    36c4:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    36c6:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) FSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    36ca:	0e11      	lsrs	r1, r2, #24
    36cc:	5c59      	ldrb	r1, [r3, r1]
    X1 = *RK++ ^ \
    36ce:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    36d2:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    36d4:	fa5f f588 	uxtb.w	r5, r8
    36d8:	5d5d      	ldrb	r5, [r3, r5]
    X2 = *RK++ ^ \
    36da:	404d      	eors	r5, r1
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    36dc:	f3c7 2107 	ubfx	r1, r7, #8, #8
    36e0:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y2       ) & 0xFF ]       ) ^
    36e2:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) FSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    36e6:	f3c2 4107 	ubfx	r1, r2, #16, #8
    36ea:	5c59      	ldrb	r1, [r3, r1]
            ( (uint32_t) FSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    36ec:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) FSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    36f0:	ea4f 611c 	mov.w	r1, ip, lsr #24
    36f4:	5c59      	ldrb	r1, [r3, r1]
    X2 = *RK++ ^ \
    36f6:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    36fa:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    36fc:	b2ff      	uxtb	r7, r7
    36fe:	5dde      	ldrb	r6, [r3, r7]
    X3 = *RK++ ^ \
    3700:	4071      	eors	r1, r6
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3702:	f3c2 2207 	ubfx	r2, r2, #8, #8
    3706:	5c9a      	ldrb	r2, [r3, r2]
            ( (uint32_t) FSb[ ( Y3       ) & 0xFF ]       ) ^
    3708:	ea81 2202 	eor.w	r2, r1, r2, lsl #8
            ( (uint32_t) FSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    370c:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    3710:	f813 100c 	ldrb.w	r1, [r3, ip]
            ( (uint32_t) FSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3714:	ea82 4201 	eor.w	r2, r2, r1, lsl #16
            ( (uint32_t) FSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    3718:	ea4f 6818 	mov.w	r8, r8, lsr #24
    371c:	f813 3008 	ldrb.w	r3, [r3, r8]
    X3 = *RK++ ^ \
    3720:	ea82 6303 	eor.w	r3, r2, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    3724:	9e01      	ldr	r6, [sp, #4]
    3726:	7034      	strb	r4, [r6, #0]
    3728:	f3c4 2207 	ubfx	r2, r4, #8, #8
    372c:	7072      	strb	r2, [r6, #1]
    372e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3732:	70b2      	strb	r2, [r6, #2]
    3734:	0e24      	lsrs	r4, r4, #24
    3736:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    3738:	7130      	strb	r0, [r6, #4]
    373a:	f3c0 2207 	ubfx	r2, r0, #8, #8
    373e:	7172      	strb	r2, [r6, #5]
    3740:	f3c0 4207 	ubfx	r2, r0, #16, #8
    3744:	71b2      	strb	r2, [r6, #6]
    3746:	0e00      	lsrs	r0, r0, #24
    3748:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    374a:	7235      	strb	r5, [r6, #8]
    374c:	f3c5 2207 	ubfx	r2, r5, #8, #8
    3750:	7272      	strb	r2, [r6, #9]
    3752:	f3c5 4207 	ubfx	r2, r5, #16, #8
    3756:	72b2      	strb	r2, [r6, #10]
    3758:	0e2d      	lsrs	r5, r5, #24
    375a:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    375c:	7333      	strb	r3, [r6, #12]
    375e:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3762:	7372      	strb	r2, [r6, #13]
    3764:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3768:	73b2      	strb	r2, [r6, #14]
    376a:	0e1b      	lsrs	r3, r3, #24
    376c:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    376e:	2000      	movs	r0, #0
    3770:	b003      	add	sp, #12
    3772:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3776:	bf00      	nop
    3778:	0002b2e8 	.word	0x0002b2e8
    377c:	0002b6e8 	.word	0x0002b6e8
    3780:	0002bae8 	.word	0x0002bae8
    3784:	0002bee8 	.word	0x0002bee8
    3788:	0002b0e8 	.word	0x0002b0e8

0000378c <mbedtls_internal_aes_decrypt>:
 */
#if !defined(MBEDTLS_AES_DECRYPT_ALT)
int mbedtls_internal_aes_decrypt( mbedtls_aes_context *ctx,
                                  const unsigned char input[16],
                                  unsigned char output[16] )
{
    378c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3790:	b083      	sub	sp, #12
    3792:	9201      	str	r2, [sp, #4]
    int i;
    uint32_t *RK, X0, X1, X2, X3, Y0, Y1, Y2, Y3;

    RK = ctx->rk;
    3794:	6842      	ldr	r2, [r0, #4]

    GET_UINT32_LE( X0, input,  0 ); X0 ^= *RK++;
    3796:	f891 a000 	ldrb.w	sl, [r1]
    379a:	784b      	ldrb	r3, [r1, #1]
    379c:	ea4a 2a03 	orr.w	sl, sl, r3, lsl #8
    37a0:	788b      	ldrb	r3, [r1, #2]
    37a2:	ea4a 4a03 	orr.w	sl, sl, r3, lsl #16
    37a6:	78cb      	ldrb	r3, [r1, #3]
    37a8:	ea4a 6a03 	orr.w	sl, sl, r3, lsl #24
    37ac:	6813      	ldr	r3, [r2, #0]
    37ae:	ea8a 0a03 	eor.w	sl, sl, r3
    GET_UINT32_LE( X1, input,  4 ); X1 ^= *RK++;
    37b2:	f891 9004 	ldrb.w	r9, [r1, #4]
    37b6:	794b      	ldrb	r3, [r1, #5]
    37b8:	ea49 2903 	orr.w	r9, r9, r3, lsl #8
    37bc:	798b      	ldrb	r3, [r1, #6]
    37be:	ea49 4903 	orr.w	r9, r9, r3, lsl #16
    37c2:	79cb      	ldrb	r3, [r1, #7]
    37c4:	ea49 6903 	orr.w	r9, r9, r3, lsl #24
    37c8:	6853      	ldr	r3, [r2, #4]
    37ca:	ea89 0903 	eor.w	r9, r9, r3
    GET_UINT32_LE( X2, input,  8 ); X2 ^= *RK++;
    37ce:	7a0c      	ldrb	r4, [r1, #8]
    37d0:	7a4b      	ldrb	r3, [r1, #9]
    37d2:	ea44 2403 	orr.w	r4, r4, r3, lsl #8
    37d6:	7a8b      	ldrb	r3, [r1, #10]
    37d8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
    37dc:	7acb      	ldrb	r3, [r1, #11]
    37de:	ea44 6403 	orr.w	r4, r4, r3, lsl #24
    37e2:	6893      	ldr	r3, [r2, #8]
    37e4:	405c      	eors	r4, r3
    GET_UINT32_LE( X3, input, 12 ); X3 ^= *RK++;
    37e6:	7b0b      	ldrb	r3, [r1, #12]
    37e8:	7b4d      	ldrb	r5, [r1, #13]
    37ea:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
    37ee:	7b8d      	ldrb	r5, [r1, #14]
    37f0:	ea43 4305 	orr.w	r3, r3, r5, lsl #16
    37f4:	7bc9      	ldrb	r1, [r1, #15]
    37f6:	ea43 6101 	orr.w	r1, r3, r1, lsl #24
    37fa:	f102 0610 	add.w	r6, r2, #16
    37fe:	68d3      	ldr	r3, [r2, #12]
    3800:	4059      	eors	r1, r3

    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3802:	6803      	ldr	r3, [r0, #0]
    3804:	ea4f 0b63 	mov.w	fp, r3, asr #1
    3808:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
    380c:	460b      	mov	r3, r1
    380e:	e0bd      	b.n	398c <mbedtls_internal_aes_decrypt+0x200>
    {
        AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3810:	6832      	ldr	r2, [r6, #0]
    3812:	fa5f f08a 	uxtb.w	r0, sl
    3816:	49cb      	ldr	r1, [pc, #812]	; (3b44 <mbedtls_internal_aes_decrypt+0x3b8>)
    3818:	f851 0020 	ldr.w	r0, [r1, r0, lsl #2]
    381c:	ea82 0800 	eor.w	r8, r2, r0
    3820:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3824:	4dc8      	ldr	r5, [pc, #800]	; (3b48 <mbedtls_internal_aes_decrypt+0x3bc>)
    3826:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    382a:	ea88 0802 	eor.w	r8, r8, r2
    382e:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3832:	48c6      	ldr	r0, [pc, #792]	; (3b4c <mbedtls_internal_aes_decrypt+0x3c0>)
    3834:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3838:	ea88 0802 	eor.w	r8, r8, r2
    383c:	ea4f 6719 	mov.w	r7, r9, lsr #24
    3840:	4ac3      	ldr	r2, [pc, #780]	; (3b50 <mbedtls_internal_aes_decrypt+0x3c4>)
    3842:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3846:	ea88 0807 	eor.w	r8, r8, r7
    384a:	fa5f fe89 	uxtb.w	lr, r9
    384e:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3852:	6877      	ldr	r7, [r6, #4]
    3854:	ea87 0c0e 	eor.w	ip, r7, lr
    3858:	f3ca 2707 	ubfx	r7, sl, #8, #8
    385c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3860:	ea8c 0c07 	eor.w	ip, ip, r7
    3864:	f3c3 4707 	ubfx	r7, r3, #16, #8
    3868:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    386c:	ea8c 0c07 	eor.w	ip, ip, r7
    3870:	0e27      	lsrs	r7, r4, #24
    3872:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    3876:	ea8c 0c07 	eor.w	ip, ip, r7
    387a:	fa5f fe84 	uxtb.w	lr, r4
    387e:	f851 e02e 	ldr.w	lr, [r1, lr, lsl #2]
    3882:	68b7      	ldr	r7, [r6, #8]
    3884:	ea87 0e0e 	eor.w	lr, r7, lr
    3888:	f3c9 2707 	ubfx	r7, r9, #8, #8
    388c:	f855 7027 	ldr.w	r7, [r5, r7, lsl #2]
    3890:	ea8e 0e07 	eor.w	lr, lr, r7
    3894:	f3ca 4707 	ubfx	r7, sl, #16, #8
    3898:	f850 7027 	ldr.w	r7, [r0, r7, lsl #2]
    389c:	ea8e 0e07 	eor.w	lr, lr, r7
    38a0:	0e1f      	lsrs	r7, r3, #24
    38a2:	f852 7027 	ldr.w	r7, [r2, r7, lsl #2]
    38a6:	ea8e 0e07 	eor.w	lr, lr, r7
    38aa:	68f7      	ldr	r7, [r6, #12]
    38ac:	b2db      	uxtb	r3, r3
    38ae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
    38b2:	405f      	eors	r7, r3
    38b4:	f3c4 2407 	ubfx	r4, r4, #8, #8
    38b8:	f855 3024 	ldr.w	r3, [r5, r4, lsl #2]
    38bc:	405f      	eors	r7, r3
    38be:	f3c9 4907 	ubfx	r9, r9, #16, #8
    38c2:	f850 3029 	ldr.w	r3, [r0, r9, lsl #2]
    38c6:	405f      	eors	r7, r3
    38c8:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    38cc:	f852 302a 	ldr.w	r3, [r2, sl, lsl #2]
    38d0:	405f      	eors	r7, r3
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    38d2:	6933      	ldr	r3, [r6, #16]
    38d4:	fa5f f488 	uxtb.w	r4, r8
    38d8:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    38dc:	ea83 0a04 	eor.w	sl, r3, r4
    38e0:	f3c7 2307 	ubfx	r3, r7, #8, #8
    38e4:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    38e8:	ea8a 0a03 	eor.w	sl, sl, r3
    38ec:	f3ce 4307 	ubfx	r3, lr, #16, #8
    38f0:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    38f4:	ea8a 0a03 	eor.w	sl, sl, r3
    38f8:	ea4f 631c 	mov.w	r3, ip, lsr #24
    38fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3900:	ea8a 0a03 	eor.w	sl, sl, r3
    3904:	6973      	ldr	r3, [r6, #20]
    3906:	fa5f f48c 	uxtb.w	r4, ip
    390a:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    390e:	ea83 0904 	eor.w	r9, r3, r4
    3912:	f3c8 2307 	ubfx	r3, r8, #8, #8
    3916:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    391a:	ea89 0903 	eor.w	r9, r9, r3
    391e:	f3c7 4307 	ubfx	r3, r7, #16, #8
    3922:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3926:	ea89 0903 	eor.w	r9, r9, r3
    392a:	ea4f 631e 	mov.w	r3, lr, lsr #24
    392e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    3932:	ea89 0903 	eor.w	r9, r9, r3
    3936:	69b3      	ldr	r3, [r6, #24]
    3938:	fa5f f48e 	uxtb.w	r4, lr
    393c:	f851 4024 	ldr.w	r4, [r1, r4, lsl #2]
    3940:	405c      	eors	r4, r3
    3942:	f3cc 2307 	ubfx	r3, ip, #8, #8
    3946:	f855 3023 	ldr.w	r3, [r5, r3, lsl #2]
    394a:	405c      	eors	r4, r3
    394c:	f3c8 4307 	ubfx	r3, r8, #16, #8
    3950:	f850 3023 	ldr.w	r3, [r0, r3, lsl #2]
    3954:	405c      	eors	r4, r3
    3956:	0e3b      	lsrs	r3, r7, #24
    3958:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
    395c:	405c      	eors	r4, r3
    395e:	69f3      	ldr	r3, [r6, #28]
    3960:	b2ff      	uxtb	r7, r7
    3962:	f851 1027 	ldr.w	r1, [r1, r7, lsl #2]
    3966:	404b      	eors	r3, r1
    3968:	f3ce 2e07 	ubfx	lr, lr, #8, #8
    396c:	f855 102e 	ldr.w	r1, [r5, lr, lsl #2]
    3970:	404b      	eors	r3, r1
    3972:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    3976:	f850 102c 	ldr.w	r1, [r0, ip, lsl #2]
    397a:	404b      	eors	r3, r1
    397c:	ea4f 6818 	mov.w	r8, r8, lsr #24
    3980:	f852 2028 	ldr.w	r2, [r2, r8, lsl #2]
    3984:	4053      	eors	r3, r2
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    3986:	f10b 3bff 	add.w	fp, fp, #4294967295	; 0xffffffff
        AES_RROUND( X0, X1, X2, X3, Y0, Y1, Y2, Y3 );
    398a:	3620      	adds	r6, #32
    for( i = ( ctx->nr >> 1 ) - 1; i > 0; i-- )
    398c:	f1bb 0f00 	cmp.w	fp, #0
    3990:	f73f af3e 	bgt.w	3810 <mbedtls_internal_aes_decrypt+0x84>
    3994:	4619      	mov	r1, r3
    }

    AES_RROUND( Y0, Y1, Y2, Y3, X0, X1, X2, X3 );
    3996:	6833      	ldr	r3, [r6, #0]
    3998:	fa5f f28a 	uxtb.w	r2, sl
    399c:	f8df e1a4 	ldr.w	lr, [pc, #420]	; 3b44 <mbedtls_internal_aes_decrypt+0x3b8>
    39a0:	f85e 2022 	ldr.w	r2, [lr, r2, lsl #2]
    39a4:	4053      	eors	r3, r2
    39a6:	f3c1 2207 	ubfx	r2, r1, #8, #8
    39aa:	4f67      	ldr	r7, [pc, #412]	; (3b48 <mbedtls_internal_aes_decrypt+0x3bc>)
    39ac:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    39b0:	4053      	eors	r3, r2
    39b2:	f3c4 4207 	ubfx	r2, r4, #16, #8
    39b6:	4d65      	ldr	r5, [pc, #404]	; (3b4c <mbedtls_internal_aes_decrypt+0x3c0>)
    39b8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    39bc:	4053      	eors	r3, r2
    39be:	ea4f 6219 	mov.w	r2, r9, lsr #24
    39c2:	4863      	ldr	r0, [pc, #396]	; (3b50 <mbedtls_internal_aes_decrypt+0x3c4>)
    39c4:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    39c8:	4053      	eors	r3, r2
    39ca:	fa5f fc89 	uxtb.w	ip, r9
    39ce:	f85e c02c 	ldr.w	ip, [lr, ip, lsl #2]
    39d2:	6872      	ldr	r2, [r6, #4]
    39d4:	ea82 0c0c 	eor.w	ip, r2, ip
    39d8:	f3ca 2207 	ubfx	r2, sl, #8, #8
    39dc:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    39e0:	ea8c 0c02 	eor.w	ip, ip, r2
    39e4:	f3c1 4207 	ubfx	r2, r1, #16, #8
    39e8:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    39ec:	ea8c 0c02 	eor.w	ip, ip, r2
    39f0:	0e22      	lsrs	r2, r4, #24
    39f2:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    39f6:	ea8c 0c02 	eor.w	ip, ip, r2
    39fa:	fa5f f884 	uxtb.w	r8, r4
    39fe:	f85e 8028 	ldr.w	r8, [lr, r8, lsl #2]
    3a02:	68b2      	ldr	r2, [r6, #8]
    3a04:	ea82 0808 	eor.w	r8, r2, r8
    3a08:	f3c9 2207 	ubfx	r2, r9, #8, #8
    3a0c:	f857 2022 	ldr.w	r2, [r7, r2, lsl #2]
    3a10:	ea88 0802 	eor.w	r8, r8, r2
    3a14:	f3ca 4207 	ubfx	r2, sl, #16, #8
    3a18:	f855 2022 	ldr.w	r2, [r5, r2, lsl #2]
    3a1c:	ea88 0802 	eor.w	r8, r8, r2
    3a20:	0e0a      	lsrs	r2, r1, #24
    3a22:	f850 2022 	ldr.w	r2, [r0, r2, lsl #2]
    3a26:	ea88 0802 	eor.w	r8, r8, r2
    3a2a:	68f2      	ldr	r2, [r6, #12]
    3a2c:	b2c9      	uxtb	r1, r1
    3a2e:	f85e 1021 	ldr.w	r1, [lr, r1, lsl #2]
    3a32:	404a      	eors	r2, r1
    3a34:	f3c4 2407 	ubfx	r4, r4, #8, #8
    3a38:	f857 7024 	ldr.w	r7, [r7, r4, lsl #2]
    3a3c:	4057      	eors	r7, r2
    3a3e:	f3c9 4907 	ubfx	r9, r9, #16, #8
    3a42:	f855 2029 	ldr.w	r2, [r5, r9, lsl #2]
    3a46:	4057      	eors	r7, r2
    3a48:	ea4f 6a1a 	mov.w	sl, sl, lsr #24
    3a4c:	f850 202a 	ldr.w	r2, [r0, sl, lsl #2]
    3a50:	4057      	eors	r7, r2

    X0 = *RK++ ^ \
    3a52:	6931      	ldr	r1, [r6, #16]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    3a54:	b2d8      	uxtb	r0, r3
    3a56:	4a3f      	ldr	r2, [pc, #252]	; (3b54 <mbedtls_internal_aes_decrypt+0x3c8>)
    3a58:	5c14      	ldrb	r4, [r2, r0]
    X0 = *RK++ ^ \
    3a5a:	404c      	eors	r4, r1
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3a5c:	f3c7 2107 	ubfx	r1, r7, #8, #8
    3a60:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0       ) & 0xFF ]       ) ^
    3a62:	ea84 2401 	eor.w	r4, r4, r1, lsl #8
            ( (uint32_t) RSb[ ( Y2 >> 16 ) & 0xFF ] << 16 ) ^
    3a66:	f3c8 4107 	ubfx	r1, r8, #16, #8
    3a6a:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y3 >>  8 ) & 0xFF ] <<  8 ) ^
    3a6c:	ea84 4401 	eor.w	r4, r4, r1, lsl #16
            ( (uint32_t) RSb[ ( Y1 >> 24 ) & 0xFF ] << 24 );
    3a70:	ea4f 611c 	mov.w	r1, ip, lsr #24
    3a74:	5c51      	ldrb	r1, [r2, r1]
    X0 = *RK++ ^ \
    3a76:	ea84 6401 	eor.w	r4, r4, r1, lsl #24

    X1 = *RK++ ^ \
    3a7a:	6971      	ldr	r1, [r6, #20]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    3a7c:	fa5f f08c 	uxtb.w	r0, ip
    3a80:	5c10      	ldrb	r0, [r2, r0]
    X1 = *RK++ ^ \
    3a82:	4048      	eors	r0, r1
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3a84:	f3c3 2107 	ubfx	r1, r3, #8, #8
    3a88:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1       ) & 0xFF ]       ) ^
    3a8a:	ea80 2001 	eor.w	r0, r0, r1, lsl #8
            ( (uint32_t) RSb[ ( Y3 >> 16 ) & 0xFF ] << 16 ) ^
    3a8e:	f3c7 4107 	ubfx	r1, r7, #16, #8
    3a92:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y0 >>  8 ) & 0xFF ] <<  8 ) ^
    3a94:	ea80 4001 	eor.w	r0, r0, r1, lsl #16
            ( (uint32_t) RSb[ ( Y2 >> 24 ) & 0xFF ] << 24 );
    3a98:	ea4f 6118 	mov.w	r1, r8, lsr #24
    3a9c:	5c51      	ldrb	r1, [r2, r1]
    X1 = *RK++ ^ \
    3a9e:	ea80 6001 	eor.w	r0, r0, r1, lsl #24

    X2 = *RK++ ^ \
    3aa2:	69b1      	ldr	r1, [r6, #24]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    3aa4:	fa5f f588 	uxtb.w	r5, r8
    3aa8:	5d55      	ldrb	r5, [r2, r5]
    X2 = *RK++ ^ \
    3aaa:	404d      	eors	r5, r1
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3aac:	f3cc 2107 	ubfx	r1, ip, #8, #8
    3ab0:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y2       ) & 0xFF ]       ) ^
    3ab2:	ea85 2501 	eor.w	r5, r5, r1, lsl #8
            ( (uint32_t) RSb[ ( Y0 >> 16 ) & 0xFF ] << 16 ) ^
    3ab6:	f3c3 4107 	ubfx	r1, r3, #16, #8
    3aba:	5c51      	ldrb	r1, [r2, r1]
            ( (uint32_t) RSb[ ( Y1 >>  8 ) & 0xFF ] <<  8 ) ^
    3abc:	ea85 4501 	eor.w	r5, r5, r1, lsl #16
            ( (uint32_t) RSb[ ( Y3 >> 24 ) & 0xFF ] << 24 );
    3ac0:	0e39      	lsrs	r1, r7, #24
    3ac2:	5c51      	ldrb	r1, [r2, r1]
    X2 = *RK++ ^ \
    3ac4:	ea85 6501 	eor.w	r5, r5, r1, lsl #24

    X3 = *RK++ ^ \
    3ac8:	69f1      	ldr	r1, [r6, #28]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    3aca:	b2ff      	uxtb	r7, r7
    3acc:	5dd6      	ldrb	r6, [r2, r7]
    X3 = *RK++ ^ \
    3ace:	4071      	eors	r1, r6
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3ad0:	f3c8 2807 	ubfx	r8, r8, #8, #8
    3ad4:	f812 6008 	ldrb.w	r6, [r2, r8]
            ( (uint32_t) RSb[ ( Y3       ) & 0xFF ]       ) ^
    3ad8:	ea81 2106 	eor.w	r1, r1, r6, lsl #8
            ( (uint32_t) RSb[ ( Y1 >> 16 ) & 0xFF ] << 16 ) ^
    3adc:	f3cc 4c07 	ubfx	ip, ip, #16, #8
    3ae0:	f812 600c 	ldrb.w	r6, [r2, ip]
            ( (uint32_t) RSb[ ( Y2 >>  8 ) & 0xFF ] <<  8 ) ^
    3ae4:	ea81 4106 	eor.w	r1, r1, r6, lsl #16
            ( (uint32_t) RSb[ ( Y0 >> 24 ) & 0xFF ] << 24 );
    3ae8:	0e1b      	lsrs	r3, r3, #24
    3aea:	5cd3      	ldrb	r3, [r2, r3]
    X3 = *RK++ ^ \
    3aec:	ea81 6303 	eor.w	r3, r1, r3, lsl #24

    PUT_UINT32_LE( X0, output,  0 );
    3af0:	9e01      	ldr	r6, [sp, #4]
    3af2:	7034      	strb	r4, [r6, #0]
    3af4:	f3c4 2207 	ubfx	r2, r4, #8, #8
    3af8:	7072      	strb	r2, [r6, #1]
    3afa:	f3c4 4207 	ubfx	r2, r4, #16, #8
    3afe:	70b2      	strb	r2, [r6, #2]
    3b00:	0e24      	lsrs	r4, r4, #24
    3b02:	70f4      	strb	r4, [r6, #3]
    PUT_UINT32_LE( X1, output,  4 );
    3b04:	7130      	strb	r0, [r6, #4]
    3b06:	f3c0 2207 	ubfx	r2, r0, #8, #8
    3b0a:	7172      	strb	r2, [r6, #5]
    3b0c:	f3c0 4207 	ubfx	r2, r0, #16, #8
    3b10:	71b2      	strb	r2, [r6, #6]
    3b12:	0e00      	lsrs	r0, r0, #24
    3b14:	71f0      	strb	r0, [r6, #7]
    PUT_UINT32_LE( X2, output,  8 );
    3b16:	7235      	strb	r5, [r6, #8]
    3b18:	f3c5 2207 	ubfx	r2, r5, #8, #8
    3b1c:	7272      	strb	r2, [r6, #9]
    3b1e:	f3c5 4207 	ubfx	r2, r5, #16, #8
    3b22:	72b2      	strb	r2, [r6, #10]
    3b24:	0e2d      	lsrs	r5, r5, #24
    3b26:	72f5      	strb	r5, [r6, #11]
    PUT_UINT32_LE( X3, output, 12 );
    3b28:	7333      	strb	r3, [r6, #12]
    3b2a:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3b2e:	7372      	strb	r2, [r6, #13]
    3b30:	f3c3 4207 	ubfx	r2, r3, #16, #8
    3b34:	73b2      	strb	r2, [r6, #14]
    3b36:	0e1b      	lsrs	r3, r3, #24
    3b38:	73f3      	strb	r3, [r6, #15]

    return( 0 );
}
    3b3a:	2000      	movs	r0, #0
    3b3c:	b003      	add	sp, #12
    3b3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    3b42:	bf00      	nop
    3b44:	0002c410 	.word	0x0002c410
    3b48:	0002c810 	.word	0x0002c810
    3b4c:	0002cc10 	.word	0x0002cc10
    3b50:	0002d010 	.word	0x0002d010
    3b54:	0002c310 	.word	0x0002c310

00003b58 <mbedtls_aes_crypt_ecb>:
 */
int mbedtls_aes_crypt_ecb( mbedtls_aes_context *ctx,
                    int mode,
                    const unsigned char input[16],
                    unsigned char output[16] )
{
    3b58:	b510      	push	{r4, lr}
    3b5a:	4614      	mov	r4, r2
        // unaccelerated mode
        //
    }
#endif

    if( mode == MBEDTLS_AES_ENCRYPT )
    3b5c:	2901      	cmp	r1, #1
    3b5e:	d004      	beq.n	3b6a <mbedtls_aes_crypt_ecb+0x12>
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    else
        return( mbedtls_internal_aes_decrypt( ctx, input, output ) );
    3b60:	461a      	mov	r2, r3
    3b62:	4621      	mov	r1, r4
    3b64:	f7ff fe12 	bl	378c <mbedtls_internal_aes_decrypt>
}
    3b68:	bd10      	pop	{r4, pc}
        return( mbedtls_internal_aes_encrypt( ctx, input, output ) );
    3b6a:	461a      	mov	r2, r3
    3b6c:	4621      	mov	r1, r4
    3b6e:	f7ff fc27 	bl	33c0 <mbedtls_internal_aes_encrypt>
    3b72:	bd10      	pop	{r4, pc}

00003b74 <mbedtls_aes_crypt_ctr>:
                       size_t *nc_off,
                       unsigned char nonce_counter[16],
                       unsigned char stream_block[16],
                       const unsigned char *input,
                       unsigned char *output )
{
    3b74:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
    3b78:	4682      	mov	sl, r0
    3b7a:	4693      	mov	fp, r2
    3b7c:	461d      	mov	r5, r3
    3b7e:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
    3b82:	9f0b      	ldr	r7, [sp, #44]	; 0x2c
    3b84:	9e0c      	ldr	r6, [sp, #48]	; 0x30
    int c, i;
    size_t n = *nc_off;
    3b86:	6814      	ldr	r4, [r2, #0]

    while( length-- )
    3b88:	e00a      	b.n	3ba0 <mbedtls_aes_crypt_ctr+0x2c>

            for( i = 16; i > 0; i-- )
                if( ++nonce_counter[i - 1] != 0 )
                    break;
        }
        c = *input++;
    3b8a:	783a      	ldrb	r2, [r7, #0]
        *output++ = (unsigned char)( c ^ stream_block[n] );
    3b8c:	f919 3004 	ldrsb.w	r3, [r9, r4]
    3b90:	4053      	eors	r3, r2
    3b92:	7033      	strb	r3, [r6, #0]

        n = ( n + 1 ) & 0x0F;
    3b94:	3401      	adds	r4, #1
    3b96:	f004 040f 	and.w	r4, r4, #15
        *output++ = (unsigned char)( c ^ stream_block[n] );
    3b9a:	3601      	adds	r6, #1
        c = *input++;
    3b9c:	3701      	adds	r7, #1
    while( length-- )
    3b9e:	4641      	mov	r1, r8
    3ba0:	f101 38ff 	add.w	r8, r1, #4294967295	; 0xffffffff
    3ba4:	b199      	cbz	r1, 3bce <mbedtls_aes_crypt_ctr+0x5a>
        if( n == 0 ) {
    3ba6:	2c00      	cmp	r4, #0
    3ba8:	d1ef      	bne.n	3b8a <mbedtls_aes_crypt_ctr+0x16>
            mbedtls_aes_crypt_ecb( ctx, MBEDTLS_AES_ENCRYPT, nonce_counter, stream_block );
    3baa:	464b      	mov	r3, r9
    3bac:	462a      	mov	r2, r5
    3bae:	2101      	movs	r1, #1
    3bb0:	4650      	mov	r0, sl
    3bb2:	f7ff ffd1 	bl	3b58 <mbedtls_aes_crypt_ecb>
            for( i = 16; i > 0; i-- )
    3bb6:	2210      	movs	r2, #16
    3bb8:	2a00      	cmp	r2, #0
    3bba:	dde6      	ble.n	3b8a <mbedtls_aes_crypt_ctr+0x16>
                if( ++nonce_counter[i - 1] != 0 )
    3bbc:	1e51      	subs	r1, r2, #1
    3bbe:	5c6b      	ldrb	r3, [r5, r1]
    3bc0:	3301      	adds	r3, #1
    3bc2:	b2db      	uxtb	r3, r3
    3bc4:	546b      	strb	r3, [r5, r1]
    3bc6:	2b00      	cmp	r3, #0
    3bc8:	d1df      	bne.n	3b8a <mbedtls_aes_crypt_ctr+0x16>
            for( i = 16; i > 0; i-- )
    3bca:	460a      	mov	r2, r1
    3bcc:	e7f4      	b.n	3bb8 <mbedtls_aes_crypt_ctr+0x44>
    }

    *nc_off = n;
    3bce:	f8cb 4000 	str.w	r4, [fp]

    return( 0 );
}
    3bd2:	2000      	movs	r0, #0
    3bd4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

00003bd8 <ah>:

#define BT_DBG_ENABLED IS_ENABLED(CONFIG_BT_DEBUG_RPA)
#include "common/log.h"

static int ah(const u8_t irk[16], const u8_t r[3], u8_t out[3])
{
    3bd8:	b530      	push	{r4, r5, lr}
    3bda:	b085      	sub	sp, #20
    3bdc:	4604      	mov	r4, r0
    3bde:	4615      	mov	r5, r2
	int err;

	BT_DBG("irk %s, r %s", bt_hex(irk, 16), bt_hex(r, 3));

	/* r' = padding || r */
	memcpy(res, r, 3);
    3be0:	2203      	movs	r2, #3
    3be2:	4668      	mov	r0, sp
    3be4:	f7fc fb6c 	bl	2c0 <memcpy>
	memset(res + 3, 0, 13);
    3be8:	220d      	movs	r2, #13
    3bea:	2100      	movs	r1, #0
    3bec:	f10d 0003 	add.w	r0, sp, #3
    3bf0:	f025 fed2 	bl	29998 <memset>

	err = bt_encrypt_le(irk, res, res);
    3bf4:	466a      	mov	r2, sp
    3bf6:	4669      	mov	r1, sp
    3bf8:	4620      	mov	r0, r4
    3bfa:	f00d f8a1 	bl	10d40 <bt_encrypt_le>
	if (err) {
    3bfe:	4604      	mov	r4, r0
    3c00:	b110      	cbz	r0, 3c08 <ah+0x30>
	 * result of ah.
	 */
	memcpy(out, res, 3);

	return 0;
}
    3c02:	4620      	mov	r0, r4
    3c04:	b005      	add	sp, #20
    3c06:	bd30      	pop	{r4, r5, pc}
	memcpy(out, res, 3);
    3c08:	2203      	movs	r2, #3
    3c0a:	4669      	mov	r1, sp
    3c0c:	4628      	mov	r0, r5
    3c0e:	f7fc fb57 	bl	2c0 <memcpy>
	return 0;
    3c12:	e7f6      	b.n	3c02 <ah+0x2a>

00003c14 <bt_rpa_irk_matches>:

#if defined(CONFIG_BT_SMP) || defined(CONFIG_BT_CTLR_PRIVACY)
bool bt_rpa_irk_matches(const u8_t irk[16], const bt_addr_t *addr)
{
    3c14:	b510      	push	{r4, lr}
    3c16:	b082      	sub	sp, #8
    3c18:	460c      	mov	r4, r1
	u8_t hash[3];
	int err;

	BT_DBG("IRK %s bdaddr %s", bt_hex(irk, 16), bt_addr_str(addr));

	err = ah(irk, addr->val + 3, hash);
    3c1a:	aa01      	add	r2, sp, #4
    3c1c:	3103      	adds	r1, #3
    3c1e:	f7ff ffdb 	bl	3bd8 <ah>
	if (err) {
    3c22:	b110      	cbz	r0, 3c2a <bt_rpa_irk_matches+0x16>
		return false;
    3c24:	2000      	movs	r0, #0
	}

	return !memcmp(addr->val, hash, 3);
}
    3c26:	b002      	add	sp, #8
    3c28:	bd10      	pop	{r4, pc}
	return !memcmp(addr->val, hash, 3);
    3c2a:	2203      	movs	r2, #3
    3c2c:	a901      	add	r1, sp, #4
    3c2e:	4620      	mov	r0, r4
    3c30:	f025 fe1e 	bl	29870 <memcmp>
    3c34:	fab0 f080 	clz	r0, r0
    3c38:	0940      	lsrs	r0, r0, #5
    3c3a:	e7f4      	b.n	3c26 <bt_rpa_irk_matches+0x12>

00003c3c <bt_rpa_create>:
#endif

#if defined(CONFIG_BT_PRIVACY) || defined(CONFIG_BT_CTLR_PRIVACY)
int bt_rpa_create(const u8_t irk[16], bt_addr_t *rpa)
{
    3c3c:	b570      	push	{r4, r5, r6, lr}
    3c3e:	4606      	mov	r6, r0
    3c40:	460c      	mov	r4, r1
	int err;

	err = bt_rand(rpa->val + 3, 3);
    3c42:	1ccd      	adds	r5, r1, #3
    3c44:	2103      	movs	r1, #3
    3c46:	4628      	mov	r0, r5
    3c48:	f00d f85e 	bl	10d08 <bt_rand>
	if (err) {
    3c4c:	4603      	mov	r3, r0
    3c4e:	b108      	cbz	r0, 3c54 <bt_rpa_create+0x18>
	}

	BT_DBG("Created RPA %s", bt_addr_str((bt_addr_t *)rpa->val));

	return 0;
}
    3c50:	4618      	mov	r0, r3
    3c52:	bd70      	pop	{r4, r5, r6, pc}
	BT_ADDR_SET_RPA(rpa);
    3c54:	f994 3005 	ldrsb.w	r3, [r4, #5]
    3c58:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    3c5c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    3c60:	7163      	strb	r3, [r4, #5]
	err = ah(irk, rpa->val + 3, rpa->val);
    3c62:	4622      	mov	r2, r4
    3c64:	4629      	mov	r1, r5
    3c66:	4630      	mov	r0, r6
    3c68:	f7ff ffb6 	bl	3bd8 <ah>
    3c6c:	4603      	mov	r3, r0
    3c6e:	e7ef      	b.n	3c50 <bt_rpa_create+0x14>

00003c70 <uuid_to_uuid128>:
	.val = { 0xfb, 0x34, 0x9b, 0x5f, 0x80, 0x00, 0x00, 0x80,
		 0x00, 0x10, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00 },
};

static void uuid_to_uuid128(const struct bt_uuid *src, struct bt_uuid_128 *dst)
{
    3c70:	b570      	push	{r4, r5, r6, lr}
    3c72:	4605      	mov	r5, r0
    3c74:	460c      	mov	r4, r1
	switch (src->type) {
    3c76:	7803      	ldrb	r3, [r0, #0]
    3c78:	2b01      	cmp	r3, #1
    3c7a:	d010      	beq.n	3c9e <uuid_to_uuid128+0x2e>
    3c7c:	b113      	cbz	r3, 3c84 <uuid_to_uuid128+0x14>
    3c7e:	2b02      	cmp	r3, #2
    3c80:	d01f      	beq.n	3cc2 <uuid_to_uuid128+0x52>
    3c82:	bd70      	pop	{r4, r5, r6, pc}
	case BT_UUID_TYPE_16:
		*dst = uuid128_base;
    3c84:	4e12      	ldr	r6, [pc, #72]	; (3cd0 <uuid_to_uuid128+0x60>)
    3c86:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3c88:	6020      	str	r0, [r4, #0]
    3c8a:	6061      	str	r1, [r4, #4]
    3c8c:	60a2      	str	r2, [r4, #8]
    3c8e:	60e3      	str	r3, [r4, #12]
    3c90:	7833      	ldrb	r3, [r6, #0]
    3c92:	7423      	strb	r3, [r4, #16]
		sys_put_le16(BT_UUID_16(src)->val,
    3c94:	886b      	ldrh	r3, [r5, #2]
 *  @param val 16-bit integer in host endianness.
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le16(u16_t val, u8_t dst[2])
{
	dst[0] = val;
    3c96:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3c98:	0a1b      	lsrs	r3, r3, #8
    3c9a:	73a3      	strb	r3, [r4, #14]
    3c9c:	bd70      	pop	{r4, r5, r6, pc}
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_32:
		*dst = uuid128_base;
    3c9e:	4e0c      	ldr	r6, [pc, #48]	; (3cd0 <uuid_to_uuid128+0x60>)
    3ca0:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
    3ca2:	6020      	str	r0, [r4, #0]
    3ca4:	6061      	str	r1, [r4, #4]
    3ca6:	60a2      	str	r2, [r4, #8]
    3ca8:	60e3      	str	r3, [r4, #12]
    3caa:	7833      	ldrb	r3, [r6, #0]
    3cac:	7423      	strb	r3, [r4, #16]
		sys_put_le32(BT_UUID_32(src)->val,
    3cae:	686b      	ldr	r3, [r5, #4]
	dst[0] = val;
    3cb0:	7363      	strb	r3, [r4, #13]
	dst[1] = val >> 8;
    3cb2:	f3c3 2207 	ubfx	r2, r3, #8, #8
    3cb6:	73a2      	strb	r2, [r4, #14]
 *  @param dst Destination memory address to store the result.
 */
static inline void sys_put_le32(u32_t val, u8_t dst[4])
{
	sys_put_le16(val, dst);
	sys_put_le16(val >> 16, &dst[2]);
    3cb8:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    3cba:	73e3      	strb	r3, [r4, #15]
	dst[1] = val >> 8;
    3cbc:	0a1b      	lsrs	r3, r3, #8
    3cbe:	7423      	strb	r3, [r4, #16]
    3cc0:	bd70      	pop	{r4, r5, r6, pc}
    3cc2:	4608      	mov	r0, r1
    3cc4:	4629      	mov	r1, r5
			     &dst->val[UUID_16_BASE_OFFSET]);
		return;
	case BT_UUID_TYPE_128:
		memcpy(dst, src, sizeof(*dst));
    3cc6:	2211      	movs	r2, #17
    3cc8:	f7fc fafa 	bl	2c0 <memcpy>
    3ccc:	bd70      	pop	{r4, r5, r6, pc}
    3cce:	bf00      	nop
    3cd0:	0002d410 	.word	0x0002d410

00003cd4 <uuid128_cmp>:
		return;
	}
}

static int uuid128_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3cd4:	b510      	push	{r4, lr}
    3cd6:	b08a      	sub	sp, #40	; 0x28
    3cd8:	460c      	mov	r4, r1
	struct bt_uuid_128 uuid1, uuid2;

	uuid_to_uuid128(u1, &uuid1);
    3cda:	a905      	add	r1, sp, #20
    3cdc:	f7ff ffc8 	bl	3c70 <uuid_to_uuid128>
	uuid_to_uuid128(u2, &uuid2);
    3ce0:	4669      	mov	r1, sp
    3ce2:	4620      	mov	r0, r4
    3ce4:	f7ff ffc4 	bl	3c70 <uuid_to_uuid128>

	return memcmp(uuid1.val, uuid2.val, 16);
    3ce8:	2210      	movs	r2, #16
    3cea:	f10d 0101 	add.w	r1, sp, #1
    3cee:	f10d 0015 	add.w	r0, sp, #21
    3cf2:	f025 fdbd 	bl	29870 <memcmp>
}
    3cf6:	b00a      	add	sp, #40	; 0x28
    3cf8:	bd10      	pop	{r4, pc}

00003cfa <bt_uuid_cmp>:

int bt_uuid_cmp(const struct bt_uuid *u1, const struct bt_uuid *u2)
{
    3cfa:	b508      	push	{r3, lr}
	/* Convert to 128 bit if types don't match */
	if (u1->type != u2->type)
    3cfc:	7803      	ldrb	r3, [r0, #0]
    3cfe:	780a      	ldrb	r2, [r1, #0]
    3d00:	4293      	cmp	r3, r2
    3d02:	d107      	bne.n	3d14 <bt_uuid_cmp+0x1a>
		return uuid128_cmp(u1, u2);

	switch (u1->type) {
    3d04:	2b01      	cmp	r3, #1
    3d06:	d00c      	beq.n	3d22 <bt_uuid_cmp+0x28>
    3d08:	b13b      	cbz	r3, 3d1a <bt_uuid_cmp+0x20>
    3d0a:	2b02      	cmp	r3, #2
    3d0c:	d00d      	beq.n	3d2a <bt_uuid_cmp+0x30>
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
	case BT_UUID_TYPE_128:
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
	}

	return -EINVAL;
    3d0e:	f06f 0015 	mvn.w	r0, #21
}
    3d12:	bd08      	pop	{r3, pc}
		return uuid128_cmp(u1, u2);
    3d14:	f7ff ffde 	bl	3cd4 <uuid128_cmp>
    3d18:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_16(u1)->val - (int)BT_UUID_16(u2)->val;
    3d1a:	8840      	ldrh	r0, [r0, #2]
    3d1c:	884b      	ldrh	r3, [r1, #2]
    3d1e:	1ac0      	subs	r0, r0, r3
    3d20:	bd08      	pop	{r3, pc}
		return (int)BT_UUID_32(u1)->val - (int)BT_UUID_32(u2)->val;
    3d22:	6840      	ldr	r0, [r0, #4]
    3d24:	684b      	ldr	r3, [r1, #4]
    3d26:	1ac0      	subs	r0, r0, r3
    3d28:	bd08      	pop	{r3, pc}
		return memcmp(BT_UUID_128(u1)->val, BT_UUID_128(u2)->val, 16);
    3d2a:	2210      	movs	r2, #16
    3d2c:	3101      	adds	r1, #1
    3d2e:	3001      	adds	r0, #1
    3d30:	f025 fd9e 	bl	29870 <memcmp>
    3d34:	bd08      	pop	{r3, pc}
	...

00003d38 <le_dhkey_complete>:
		cb->func(evt->status ? NULL : evt->key);
	}
}

static void le_dhkey_complete(struct net_buf *buf)
{
    3d38:	b508      	push	{r3, lr}
	struct bt_hci_evt_le_generate_dhkey_complete *evt = (void *)buf->data;
    3d3a:	6880      	ldr	r0, [r0, #8]

	BT_DBG("status: 0x%x", evt->status);

	if (dh_key_cb) {
    3d3c:	4b06      	ldr	r3, [pc, #24]	; (3d58 <le_dhkey_complete+0x20>)
    3d3e:	681b      	ldr	r3, [r3, #0]
    3d40:	b133      	cbz	r3, 3d50 <le_dhkey_complete+0x18>
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3d42:	7802      	ldrb	r2, [r0, #0]
    3d44:	b92a      	cbnz	r2, 3d52 <le_dhkey_complete+0x1a>
    3d46:	3001      	adds	r0, #1
    3d48:	4798      	blx	r3
		dh_key_cb = NULL;
    3d4a:	2200      	movs	r2, #0
    3d4c:	4b02      	ldr	r3, [pc, #8]	; (3d58 <le_dhkey_complete+0x20>)
    3d4e:	601a      	str	r2, [r3, #0]
    3d50:	bd08      	pop	{r3, pc}
		dh_key_cb(evt->status ? NULL : evt->dhkey);
    3d52:	2000      	movs	r0, #0
    3d54:	e7f8      	b.n	3d48 <le_dhkey_complete+0x10>
    3d56:	bf00      	nop
    3d58:	20000370 	.word	0x20000370

00003d5c <read_local_ver_complete>:
}


static void read_local_ver_complete(struct net_buf *buf)
{
	struct bt_hci_rp_read_local_version_info *rp = (void *)buf->data;
    3d5c:	6882      	ldr	r2, [r0, #8]

	BT_DBG("status %u", rp->status);

	bt_dev.hci_version = rp->hci_version;
    3d5e:	7851      	ldrb	r1, [r2, #1]
    3d60:	4b06      	ldr	r3, [pc, #24]	; (3d7c <read_local_ver_complete+0x20>)
    3d62:	7399      	strb	r1, [r3, #14]
	bt_dev.hci_revision = sys_le16_to_cpu(rp->hci_revision);
    3d64:	8851      	ldrh	r1, [r2, #2]
    3d66:	8219      	strh	r1, [r3, #16]
	bt_dev.lmp_version = rp->lmp_version;
    3d68:	7911      	ldrb	r1, [r2, #4]
    3d6a:	73d9      	strb	r1, [r3, #15]
	bt_dev.lmp_subversion = sys_le16_to_cpu(rp->lmp_subversion);
    3d6c:	f8b2 1007 	ldrh.w	r1, [r2, #7]
    3d70:	8259      	strh	r1, [r3, #18]
	bt_dev.manufacturer = sys_le16_to_cpu(rp->manufacturer);
    3d72:	f8b2 2005 	ldrh.w	r2, [r2, #5]
    3d76:	829a      	strh	r2, [r3, #20]
    3d78:	4770      	bx	lr
    3d7a:	bf00      	nop
    3d7c:	2000b8b8 	.word	0x2000b8b8

00003d80 <le_read_supp_states_complete>:

	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
}

static void le_read_supp_states_complete(struct net_buf *buf)
{
    3d80:	b410      	push	{r4}
	struct bt_hci_rp_le_read_supp_states *rp = (void *)buf->data;
    3d82:	6883      	ldr	r3, [r0, #8]
 *
 *  @return 16-bit integer in host endianness.
 */
static inline u16_t sys_get_le16(const u8_t src[2])
{
	return ((u16_t)src[1] << 8) | src[0];
    3d84:	7a1a      	ldrb	r2, [r3, #8]
    3d86:	79dc      	ldrb	r4, [r3, #7]
    3d88:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
    3d8c:	7999      	ldrb	r1, [r3, #6]
    3d8e:	795a      	ldrb	r2, [r3, #5]
    3d90:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
 *
 *  @return 64-bit integer in host endianness.
 */
static inline u64_t sys_get_le64(const u8_t src[8])
{
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3d94:	2000      	movs	r0, #0
    3d96:	ea42 4104 	orr.w	r1, r2, r4, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    3d9a:	791c      	ldrb	r4, [r3, #4]
    3d9c:	78da      	ldrb	r2, [r3, #3]
    3d9e:	ea42 2204 	orr.w	r2, r2, r4, lsl #8
    3da2:	789c      	ldrb	r4, [r3, #2]
    3da4:	785b      	ldrb	r3, [r3, #1]
    3da6:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    3daa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    3dae:	4318      	orrs	r0, r3

	BT_DBG("status %u", rp->status);

	bt_dev.le.states = sys_get_le64(rp->le_states);
    3db0:	4b02      	ldr	r3, [pc, #8]	; (3dbc <le_read_supp_states_complete+0x3c>)
    3db2:	e9c3 0120 	strd	r0, r1, [r3, #128]	; 0x80
}
    3db6:	bc10      	pop	{r4}
    3db8:	4770      	bx	lr
    3dba:	bf00      	nop
    3dbc:	2000b8b8 	.word	0x2000b8b8

00003dc0 <valid_adv_param>:
	}
}

static bool valid_adv_param(const struct bt_le_adv_param *param)
{
	if (!(param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    3dc0:	7803      	ldrb	r3, [r0, #0]
    3dc2:	f013 0f01 	tst.w	r3, #1
    3dc6:	d106      	bne.n	3dd6 <valid_adv_param+0x16>
		 * BT Core 4.2 [Vol 2, Part E, 7.8.5]
		 * The Advertising_Interval_Min and Advertising_Interval_Max
		 * shall not be set to less than 0x00A0 (100 ms) if the
		 * Advertising_Type is set to ADV_SCAN_IND or ADV_NONCONN_IND.
		 */
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3dc8:	4b0c      	ldr	r3, [pc, #48]	; (3dfc <valid_adv_param+0x3c>)
    3dca:	7b9b      	ldrb	r3, [r3, #14]
    3dcc:	2b08      	cmp	r3, #8
    3dce:	d802      	bhi.n	3dd6 <valid_adv_param+0x16>
		    param->interval_min < 0x00a0) {
    3dd0:	8843      	ldrh	r3, [r0, #2]
		if (bt_dev.hci_version < BT_HCI_VERSION_5_0 &&
    3dd2:	2b9f      	cmp	r3, #159	; 0x9f
    3dd4:	d90c      	bls.n	3df0 <valid_adv_param+0x30>
			return false;
		}
	}

	if (param->interval_min > param->interval_max ||
    3dd6:	8843      	ldrh	r3, [r0, #2]
    3dd8:	8882      	ldrh	r2, [r0, #4]
    3dda:	4293      	cmp	r3, r2
    3ddc:	d80a      	bhi.n	3df4 <valid_adv_param+0x34>
    3dde:	2b1f      	cmp	r3, #31
    3de0:	d90a      	bls.n	3df8 <valid_adv_param+0x38>
	    param->interval_min < 0x0020 || param->interval_max > 0x4000) {
    3de2:	f5b2 4f80 	cmp.w	r2, #16384	; 0x4000
    3de6:	d801      	bhi.n	3dec <valid_adv_param+0x2c>
		return false;
	}

	return true;
    3de8:	2001      	movs	r0, #1
}
    3dea:	4770      	bx	lr
		return false;
    3dec:	2000      	movs	r0, #0
    3dee:	4770      	bx	lr
			return false;
    3df0:	2000      	movs	r0, #0
    3df2:	4770      	bx	lr
		return false;
    3df4:	2000      	movs	r0, #0
    3df6:	4770      	bx	lr
    3df8:	2000      	movs	r0, #0
    3dfa:	4770      	bx	lr
    3dfc:	2000b8b8 	.word	0x2000b8b8

00003e00 <hci_reset_complete>:
	u8_t status = buf->data[0];
    3e00:	6883      	ldr	r3, [r0, #8]
    3e02:	781b      	ldrb	r3, [r3, #0]
	if (status) {
    3e04:	b103      	cbz	r3, 3e08 <hci_reset_complete+0x8>
    3e06:	4770      	bx	lr
	scan_dev_found_cb = NULL;
    3e08:	2200      	movs	r2, #0
    3e0a:	4b07      	ldr	r3, [pc, #28]	; (3e28 <hci_reset_complete+0x28>)
    3e0c:	601a      	str	r2, [r3, #0]
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    3e0e:	4b07      	ldr	r3, [pc, #28]	; (3e2c <hci_reset_complete+0x2c>)
    3e10:	2201      	movs	r2, #1
    3e12:	f3bf 8f5b 	dmb	ish
    3e16:	e853 1f00 	ldrex	r1, [r3]
    3e1a:	e843 2000 	strex	r0, r2, [r3]
    3e1e:	2800      	cmp	r0, #0
    3e20:	d1f9      	bne.n	3e16 <hci_reset_complete+0x16>
    3e22:	f3bf 8f5b 	dmb	ish
    3e26:	e7ee      	b.n	3e06 <hci_reset_complete+0x6>
    3e28:	200003bc 	.word	0x200003bc
    3e2c:	2000b928 	.word	0x2000b928

00003e30 <read_local_features_complete>:
{
    3e30:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_local_features *rp = (void *)buf->data;
    3e32:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.features[0], rp->features, sizeof(bt_dev.features[0]));
    3e34:	2208      	movs	r2, #8
    3e36:	3101      	adds	r1, #1
    3e38:	4801      	ldr	r0, [pc, #4]	; (3e40 <read_local_features_complete+0x10>)
    3e3a:	f7fc fa41 	bl	2c0 <memcpy>
    3e3e:	bd08      	pop	{r3, pc}
    3e40:	2000b8ce 	.word	0x2000b8ce

00003e44 <read_bdaddr_complete>:
{
    3e44:	b510      	push	{r4, lr}
	struct bt_hci_rp_read_bd_addr *rp = (void *)buf->data;
    3e46:	6881      	ldr	r1, [r0, #8]
	return memcmp(a, b, sizeof(*a));
}

static inline void bt_addr_copy(bt_addr_t *dst, const bt_addr_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    3e48:	4c04      	ldr	r4, [pc, #16]	; (3e5c <read_bdaddr_complete+0x18>)
    3e4a:	2206      	movs	r2, #6
    3e4c:	3101      	adds	r1, #1
    3e4e:	1c60      	adds	r0, r4, #1
    3e50:	f7fc fa36 	bl	2c0 <memcpy>
	bt_dev.id_addr.type = BT_ADDR_LE_PUBLIC;
    3e54:	2300      	movs	r3, #0
    3e56:	7023      	strb	r3, [r4, #0]
    3e58:	bd10      	pop	{r4, pc}
    3e5a:	bf00      	nop
    3e5c:	2000b8b8 	.word	0x2000b8b8

00003e60 <read_supported_commands_complete>:
{
    3e60:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_supported_commands *rp = (void *)buf->data;
    3e62:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.supported_commands, rp->commands,
    3e64:	2240      	movs	r2, #64	; 0x40
    3e66:	3101      	adds	r1, #1
    3e68:	4801      	ldr	r0, [pc, #4]	; (3e70 <read_supported_commands_complete+0x10>)
    3e6a:	f7fc fa29 	bl	2c0 <memcpy>
    3e6e:	bd08      	pop	{r3, pc}
    3e70:	2000b8d6 	.word	0x2000b8d6

00003e74 <read_le_features_complete>:
{
    3e74:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_local_features *rp = (void *)buf->data;
    3e76:	6881      	ldr	r1, [r0, #8]
	memcpy(bt_dev.le.features, rp->features, sizeof(bt_dev.le.features));
    3e78:	2208      	movs	r2, #8
    3e7a:	3101      	adds	r1, #1
    3e7c:	4801      	ldr	r0, [pc, #4]	; (3e84 <read_le_features_complete+0x10>)
    3e7e:	f7fc fa1f 	bl	2c0 <memcpy>
    3e82:	bd08      	pop	{r3, pc}
    3e84:	2000b930 	.word	0x2000b930

00003e88 <le_read_buffer_size_complete>:
{
    3e88:	b508      	push	{r3, lr}
	struct bt_hci_rp_le_read_buffer_size *rp = (void *)buf->data;
    3e8a:	6882      	ldr	r2, [r0, #8]
	bt_dev.le.mtu = sys_le16_to_cpu(rp->le_max_len);
    3e8c:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3e90:	b299      	uxth	r1, r3
    3e92:	4807      	ldr	r0, [pc, #28]	; (3eb0 <le_read_buffer_size_complete+0x28>)
    3e94:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	if (!bt_dev.le.mtu) {
    3e98:	b901      	cbnz	r1, 3e9c <le_read_buffer_size_complete+0x14>
    3e9a:	bd08      	pop	{r3, pc}
	le_max_num = min(rp->le_max_num, CONFIG_BT_CONN_TX_MAX);
    3e9c:	78d1      	ldrb	r1, [r2, #3]
    3e9e:	2902      	cmp	r1, #2
    3ea0:	bf28      	it	cs
    3ea2:	2102      	movcs	r1, #2
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    3ea4:	460a      	mov	r2, r1
    3ea6:	308c      	adds	r0, #140	; 0x8c
    3ea8:	f024 fd9a 	bl	289e0 <_impl_k_sem_init>
    3eac:	e7f5      	b.n	3e9a <le_read_buffer_size_complete+0x12>
    3eae:	bf00      	nop
    3eb0:	2000b8b8 	.word	0x2000b8b8

00003eb4 <read_buffer_size_complete>:
{
    3eb4:	b508      	push	{r3, lr}
	struct bt_hci_rp_read_buffer_size *rp = (void *)buf->data;
    3eb6:	6882      	ldr	r2, [r0, #8]
	if (bt_dev.le.mtu) {
    3eb8:	4b09      	ldr	r3, [pc, #36]	; (3ee0 <read_buffer_size_complete+0x2c>)
    3eba:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    3ebe:	b103      	cbz	r3, 3ec2 <read_buffer_size_complete+0xe>
    3ec0:	bd08      	pop	{r3, pc}
	bt_dev.le.mtu = sys_le16_to_cpu(rp->acl_max_len);
    3ec2:	f8b2 3001 	ldrh.w	r3, [r2, #1]
    3ec6:	4806      	ldr	r0, [pc, #24]	; (3ee0 <read_buffer_size_complete+0x2c>)
    3ec8:	f8a0 3088 	strh.w	r3, [r0, #136]	; 0x88
	pkts = sys_le16_to_cpu(rp->acl_max_num);
    3ecc:	8891      	ldrh	r1, [r2, #4]
	pkts = min(pkts, CONFIG_BT_CONN_TX_MAX);
    3ece:	2902      	cmp	r1, #2
    3ed0:	bf28      	it	cs
    3ed2:	2102      	movcs	r1, #2
    3ed4:	460a      	mov	r2, r1
    3ed6:	308c      	adds	r0, #140	; 0x8c
    3ed8:	f024 fd82 	bl	289e0 <_impl_k_sem_init>
    3edc:	e7f0      	b.n	3ec0 <read_buffer_size_complete+0xc>
    3ede:	bf00      	nop
    3ee0:	2000b8b8 	.word	0x2000b8b8

00003ee4 <le_pkey_complete>:
{
    3ee4:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_p256_public_key_complete *evt = (void *)buf->data;
    3ee6:	6885      	ldr	r5, [r0, #8]
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    3ee8:	4b17      	ldr	r3, [pc, #92]	; (3f48 <le_pkey_complete+0x64>)
    3eea:	f3bf 8f5b 	dmb	ish
    3eee:	e853 2f00 	ldrex	r2, [r3]
    3ef2:	f022 0210 	bic.w	r2, r2, #16
    3ef6:	e843 2100 	strex	r1, r2, [r3]
    3efa:	2900      	cmp	r1, #0
    3efc:	d1f7      	bne.n	3eee <le_pkey_complete+0xa>
    3efe:	f3bf 8f5b 	dmb	ish
	if (!evt->status) {
    3f02:	782b      	ldrb	r3, [r5, #0]
    3f04:	b113      	cbz	r3, 3f0c <le_pkey_complete+0x28>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3f06:	4b11      	ldr	r3, [pc, #68]	; (3f4c <le_pkey_complete+0x68>)
    3f08:	681c      	ldr	r4, [r3, #0]
    3f0a:	e015      	b.n	3f38 <le_pkey_complete+0x54>
		memcpy(pub_key, evt->key, 64);
    3f0c:	2240      	movs	r2, #64	; 0x40
    3f0e:	1c69      	adds	r1, r5, #1
    3f10:	480f      	ldr	r0, [pc, #60]	; (3f50 <le_pkey_complete+0x6c>)
    3f12:	f7fc f9d5 	bl	2c0 <memcpy>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    3f16:	4b0c      	ldr	r3, [pc, #48]	; (3f48 <le_pkey_complete+0x64>)
    3f18:	f3bf 8f5b 	dmb	ish
    3f1c:	e853 2f00 	ldrex	r2, [r3]
    3f20:	f042 0208 	orr.w	r2, r2, #8
    3f24:	e843 2100 	strex	r1, r2, [r3]
    3f28:	2900      	cmp	r1, #0
    3f2a:	d1f7      	bne.n	3f1c <le_pkey_complete+0x38>
    3f2c:	f3bf 8f5b 	dmb	ish
    3f30:	e7e9      	b.n	3f06 <le_pkey_complete+0x22>
		cb->func(evt->status ? NULL : evt->key);
    3f32:	2000      	movs	r0, #0
    3f34:	4798      	blx	r3
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    3f36:	6864      	ldr	r4, [r4, #4]
    3f38:	b12c      	cbz	r4, 3f46 <le_pkey_complete+0x62>
		cb->func(evt->status ? NULL : evt->key);
    3f3a:	6823      	ldr	r3, [r4, #0]
    3f3c:	782a      	ldrb	r2, [r5, #0]
    3f3e:	2a00      	cmp	r2, #0
    3f40:	d1f7      	bne.n	3f32 <le_pkey_complete+0x4e>
    3f42:	1c68      	adds	r0, r5, #1
    3f44:	e7f6      	b.n	3f34 <le_pkey_complete+0x50>
}
    3f46:	bd38      	pop	{r3, r4, r5, pc}
    3f48:	2000b928 	.word	0x2000b928
    3f4c:	200003b4 	.word	0x200003b4
    3f50:	20000374 	.word	0x20000374

00003f54 <hci_acl>:
{
    3f54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    3f56:	4604      	mov	r4, r0
	struct bt_hci_acl_hdr *hdr = (void *)buf->data;
    3f58:	6883      	ldr	r3, [r0, #8]
	u16_t handle, len = sys_le16_to_cpu(hdr->len);
    3f5a:	885e      	ldrh	r6, [r3, #2]
	handle = sys_le16_to_cpu(hdr->handle);
    3f5c:	881a      	ldrh	r2, [r3, #0]
	flags = bt_acl_flags(handle);
    3f5e:	0b17      	lsrs	r7, r2, #12
 *
 *  @return Pointer to the user data of the buffer.
 */
static inline void *net_buf_user_data(struct net_buf *buf)
{
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    3f60:	f100 0510 	add.w	r5, r0, #16
    3f64:	89c3      	ldrh	r3, [r0, #14]
    3f66:	442b      	add	r3, r5
    3f68:	3303      	adds	r3, #3
    3f6a:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->handle = bt_acl_handle(handle);
    3f6e:	f3c2 020b 	ubfx	r2, r2, #0, #12
    3f72:	805a      	strh	r2, [r3, #2]
    3f74:	89c3      	ldrh	r3, [r0, #14]
    3f76:	442b      	add	r3, r5
    3f78:	3303      	adds	r3, #3
    3f7a:	f023 0303 	bic.w	r3, r3, #3
	acl(buf)->id = BT_CONN_ID_INVALID;
    3f7e:	22ff      	movs	r2, #255	; 0xff
    3f80:	705a      	strb	r2, [r3, #1]
	net_buf_pull(buf, sizeof(*hdr));
    3f82:	2104      	movs	r1, #4
    3f84:	3008      	adds	r0, #8
    3f86:	f016 fa82 	bl	1a48e <net_buf_simple_pull>
	if (buf->len != len) {
    3f8a:	89a3      	ldrh	r3, [r4, #12]
    3f8c:	429e      	cmp	r6, r3
    3f8e:	d003      	beq.n	3f98 <hci_acl+0x44>
		net_buf_unref(buf);
    3f90:	4620      	mov	r0, r4
    3f92:	f016 f9e3 	bl	1a35c <net_buf_unref>
		return;
    3f96:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    3f98:	89e3      	ldrh	r3, [r4, #14]
    3f9a:	442b      	add	r3, r5
    3f9c:	3303      	adds	r3, #3
    3f9e:	f023 0303 	bic.w	r3, r3, #3
	conn = bt_conn_lookup_handle(acl(buf)->handle);
    3fa2:	8858      	ldrh	r0, [r3, #2]
    3fa4:	f002 fc7e 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    3fa8:	4606      	mov	r6, r0
    3faa:	b180      	cbz	r0, 3fce <hci_acl+0x7a>
    3fac:	89e3      	ldrh	r3, [r4, #14]
    3fae:	441d      	add	r5, r3
    3fb0:	3503      	adds	r5, #3
    3fb2:	f025 0503 	bic.w	r5, r5, #3
	acl(buf)->id = bt_conn_get_id(conn);
    3fb6:	f003 f83b 	bl	7030 <bt_conn_get_id>
    3fba:	7068      	strb	r0, [r5, #1]
	bt_conn_recv(conn, buf, flags);
    3fbc:	463a      	mov	r2, r7
    3fbe:	4621      	mov	r1, r4
    3fc0:	4630      	mov	r0, r6
    3fc2:	f002 fb23 	bl	660c <bt_conn_recv>
	bt_conn_unref(conn);
    3fc6:	4630      	mov	r0, r6
    3fc8:	f002 fcf0 	bl	69ac <bt_conn_unref>
    3fcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    3fce:	4620      	mov	r0, r4
    3fd0:	f016 f9c4 	bl	1a35c <net_buf_unref>
		return;
    3fd4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00003fd6 <update_sec_level>:
{
    3fd6:	b508      	push	{r3, lr}
	if (!conn->encrypt) {
    3fd8:	7a83      	ldrb	r3, [r0, #10]
    3fda:	b18b      	cbz	r3, 4000 <update_sec_level+0x2a>
	if (conn->le.keys && atomic_test_bit(conn->le.keys->flags,
    3fdc:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3fde:	b1ab      	cbz	r3, 400c <update_sec_level+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    3fe0:	f3bf 8f5b 	dmb	ish
    3fe4:	689b      	ldr	r3, [r3, #8]
    3fe6:	f3bf 8f5b 	dmb	ish
    3fea:	f013 0f01 	tst.w	r3, #1
    3fee:	d00d      	beq.n	400c <update_sec_level+0x36>
		if (conn->le.keys->keys & BT_KEYS_LTK_P256) {
    3ff0:	6f03      	ldr	r3, [r0, #112]	; 0x70
    3ff2:	899b      	ldrh	r3, [r3, #12]
    3ff4:	f013 0f20 	tst.w	r3, #32
    3ff8:	d005      	beq.n	4006 <update_sec_level+0x30>
			conn->sec_level = BT_SECURITY_FIPS;
    3ffa:	2304      	movs	r3, #4
    3ffc:	7203      	strb	r3, [r0, #8]
    3ffe:	e007      	b.n	4010 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_LOW;
    4000:	2301      	movs	r3, #1
    4002:	7203      	strb	r3, [r0, #8]
		return;
    4004:	bd08      	pop	{r3, pc}
			conn->sec_level = BT_SECURITY_HIGH;
    4006:	2303      	movs	r3, #3
    4008:	7203      	strb	r3, [r0, #8]
    400a:	e001      	b.n	4010 <update_sec_level+0x3a>
		conn->sec_level = BT_SECURITY_MEDIUM;
    400c:	2302      	movs	r3, #2
    400e:	7203      	strb	r3, [r0, #8]
	if (conn->required_sec_level > conn->sec_level) {
    4010:	7a42      	ldrb	r2, [r0, #9]
    4012:	7a03      	ldrb	r3, [r0, #8]
    4014:	429a      	cmp	r2, r3
    4016:	d800      	bhi.n	401a <update_sec_level+0x44>
    4018:	bd08      	pop	{r3, pc}
		bt_conn_disconnect(conn, BT_HCI_ERR_AUTHENTICATION_FAIL);
    401a:	2105      	movs	r1, #5
    401c:	f002 fe8a 	bl	6d34 <bt_conn_disconnect>
    4020:	e7fa      	b.n	4018 <update_sec_level+0x42>

00004022 <hci_encrypt_change>:
{
    4022:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_change *evt = (void *)buf->data;
    4024:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4026:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    402a:	f002 fc3b 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    402e:	b1e0      	cbz	r0, 406a <hci_encrypt_change+0x48>
    4030:	4604      	mov	r4, r0
	if (evt->status) {
    4032:	782b      	ldrb	r3, [r5, #0]
    4034:	b13b      	cbz	r3, 4046 <hci_encrypt_change+0x24>
		if (conn->type == BT_CONN_TYPE_LE) {
    4036:	7883      	ldrb	r3, [r0, #2]
    4038:	b90b      	cbnz	r3, 403e <hci_encrypt_change+0x1c>
			conn->required_sec_level = conn->sec_level;
    403a:	7a03      	ldrb	r3, [r0, #8]
    403c:	7243      	strb	r3, [r0, #9]
		bt_conn_unref(conn);
    403e:	4620      	mov	r0, r4
    4040:	f002 fcb4 	bl	69ac <bt_conn_unref>
		return;
    4044:	bd38      	pop	{r3, r4, r5, pc}
	conn->encrypt = evt->encrypt;
    4046:	78eb      	ldrb	r3, [r5, #3]
    4048:	7283      	strb	r3, [r0, #10]
	if (conn->type == BT_CONN_TYPE_LE) {
    404a:	7882      	ldrb	r2, [r0, #2]
    404c:	b91a      	cbnz	r2, 4056 <hci_encrypt_change+0x34>
		if (conn->encrypt) {
    404e:	b96b      	cbnz	r3, 406c <hci_encrypt_change+0x4a>
		update_sec_level(conn);
    4050:	4620      	mov	r0, r4
    4052:	f7ff ffc0 	bl	3fd6 <update_sec_level>
	bt_l2cap_encrypt_change(conn, evt->status);
    4056:	7829      	ldrb	r1, [r5, #0]
    4058:	4620      	mov	r0, r4
    405a:	f003 fbcb 	bl	77f4 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    405e:	4620      	mov	r0, r4
    4060:	f002 fa9e 	bl	65a0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4064:	4620      	mov	r0, r4
    4066:	f002 fca1 	bl	69ac <bt_conn_unref>
    406a:	bd38      	pop	{r3, r4, r5, pc}
			bt_smp_update_keys(conn);
    406c:	f008 fafe 	bl	c66c <bt_smp_update_keys>
    4070:	e7ee      	b.n	4050 <hci_encrypt_change+0x2e>

00004072 <hci_encrypt_key_refresh_complete>:
{
    4072:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_encrypt_key_refresh_complete *evt = (void *)buf->data;
    4074:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    4076:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    407a:	f002 fc13 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    407e:	b170      	cbz	r0, 409e <hci_encrypt_key_refresh_complete+0x2c>
    4080:	4604      	mov	r4, r0
	if (evt->status) {
    4082:	7829      	ldrb	r1, [r5, #0]
    4084:	b961      	cbnz	r1, 40a0 <hci_encrypt_key_refresh_complete+0x2e>
	if (conn->type == BT_CONN_TYPE_LE) {
    4086:	7883      	ldrb	r3, [r0, #2]
    4088:	b16b      	cbz	r3, 40a6 <hci_encrypt_key_refresh_complete+0x34>
	bt_l2cap_encrypt_change(conn, evt->status);
    408a:	7829      	ldrb	r1, [r5, #0]
    408c:	4620      	mov	r0, r4
    408e:	f003 fbb1 	bl	77f4 <bt_l2cap_encrypt_change>
	bt_conn_security_changed(conn);
    4092:	4620      	mov	r0, r4
    4094:	f002 fa84 	bl	65a0 <bt_conn_security_changed>
	bt_conn_unref(conn);
    4098:	4620      	mov	r0, r4
    409a:	f002 fc87 	bl	69ac <bt_conn_unref>
    409e:	bd38      	pop	{r3, r4, r5, pc}
		bt_l2cap_encrypt_change(conn, evt->status);
    40a0:	f003 fba8 	bl	77f4 <bt_l2cap_encrypt_change>
		return;
    40a4:	bd38      	pop	{r3, r4, r5, pc}
		bt_smp_update_keys(conn);
    40a6:	f008 fae1 	bl	c66c <bt_smp_update_keys>
		update_sec_level(conn);
    40aa:	4620      	mov	r0, r4
    40ac:	f7ff ff93 	bl	3fd6 <update_sec_level>
    40b0:	e7eb      	b.n	408a <hci_encrypt_key_refresh_complete+0x18>

000040b2 <find_id_addr>:
{
    40b2:	b510      	push	{r4, lr}
    40b4:	4604      	mov	r4, r0
		keys = bt_keys_find_irk(addr);
    40b6:	f008 fbe3 	bl	c880 <bt_keys_find_irk>
		if (keys) {
    40ba:	b100      	cbz	r0, 40be <find_id_addr+0xc>
			return &keys->addr;
    40bc:	bd10      	pop	{r4, pc}
	return addr;
    40be:	4620      	mov	r0, r4
}
    40c0:	bd10      	pop	{r4, pc}
	...

000040c4 <update_conn_param>:
{
    40c4:	b508      	push	{r3, lr}
	k_delayed_work_submit(&conn->le.update_work,
    40c6:	f100 0174 	add.w	r1, r0, #116	; 0x74
				 conn->role == BT_HCI_ROLE_MASTER ? K_NO_WAIT :
    40ca:	78c3      	ldrb	r3, [r0, #3]
	k_delayed_work_submit(&conn->le.update_work,
    40cc:	b12b      	cbz	r3, 40da <update_conn_param+0x16>
    40ce:	f241 3288 	movw	r2, #5000	; 0x1388
 * @retval -EADDRINUSE Work item is pending on a different workqueue.
 */
static inline int k_delayed_work_submit(struct k_delayed_work *work,
					s32_t delay)
{
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    40d2:	4803      	ldr	r0, [pc, #12]	; (40e0 <update_conn_param+0x1c>)
    40d4:	f025 fad6 	bl	29684 <k_delayed_work_submit_to_queue>
    40d8:	bd08      	pop	{r3, pc}
    40da:	2200      	movs	r2, #0
    40dc:	e7f9      	b.n	40d2 <update_conn_param+0xe>
    40de:	bf00      	nop
    40e0:	20002bd8 	.word	0x20002bd8

000040e4 <le_data_len_change>:
{
    40e4:	b510      	push	{r4, lr}
	struct bt_hci_evt_le_data_len_change *evt = (void *)buf->data;
    40e6:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    40e8:	8818      	ldrh	r0, [r3, #0]
    40ea:	f002 fbdb 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    40ee:	b198      	cbz	r0, 4118 <le_data_len_change+0x34>
    40f0:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_DATA_LEN)) {
    40f2:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    40f4:	f3bf 8f5b 	dmb	ish
    40f8:	e853 2f00 	ldrex	r2, [r3]
    40fc:	f422 7180 	bic.w	r1, r2, #256	; 0x100
    4100:	e843 1000 	strex	r0, r1, [r3]
    4104:	2800      	cmp	r0, #0
    4106:	d1f7      	bne.n	40f8 <le_data_len_change+0x14>
    4108:	f3bf 8f5b 	dmb	ish
    410c:	f412 7f80 	tst.w	r2, #256	; 0x100
    4110:	d103      	bne.n	411a <le_data_len_change+0x36>
	bt_conn_unref(conn);
    4112:	4620      	mov	r0, r4
    4114:	f002 fc4a 	bl	69ac <bt_conn_unref>
    4118:	bd10      	pop	{r4, pc}
	update_conn_param(conn);
    411a:	4620      	mov	r0, r4
    411c:	f7ff ffd2 	bl	40c4 <update_conn_param>
    4120:	e7f7      	b.n	4112 <le_data_len_change+0x2e>
	...

00004124 <le_data_len_change>:
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
}

static void le_data_len_change(struct pdu_data *pdu_data, u16_t handle,
			       struct net_buf *buf)
{
    4124:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_data_len_change *sep;

	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4126:	4b12      	ldr	r3, [pc, #72]	; (4170 <le_data_len_change+0x4c>)
    4128:	e9d3 4500 	ldrd	r4, r5, [r3]
    412c:	2400      	movs	r4, #0
    412e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    4132:	ea54 0305 	orrs.w	r3, r4, r5
    4136:	d008      	beq.n	414a <le_data_len_change+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_DATA_LEN_CHANGE)) {
    4138:	4b0e      	ldr	r3, [pc, #56]	; (4174 <le_data_len_change+0x50>)
    413a:	e9d3 4500 	ldrd	r4, r5, [r3]
    413e:	f004 0440 	and.w	r4, r4, #64	; 0x40
    4142:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    4144:	ea54 0305 	orrs.w	r3, r4, r5
    4148:	d100      	bne.n	414c <le_data_len_change+0x28>
    414a:	bd38      	pop	{r3, r4, r5, pc}
    414c:	4613      	mov	r3, r2
    414e:	460d      	mov	r5, r1
    4150:	4604      	mov	r4, r0
		return;
	}

	sep = meta_evt(buf, BT_HCI_EVT_LE_DATA_LEN_CHANGE, sizeof(*sep));
    4152:	220a      	movs	r2, #10
    4154:	2107      	movs	r1, #7
    4156:	4618      	mov	r0, r3
    4158:	f008 fcf0 	bl	cb3c <meta_evt>

	sep->handle = sys_cpu_to_le16(handle);
    415c:	8005      	strh	r5, [r0, #0]
	sep->max_tx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_octets;
    415e:	8923      	ldrh	r3, [r4, #8]
	sep->max_tx_octets =
    4160:	8043      	strh	r3, [r0, #2]
	sep->max_tx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_tx_time;
    4162:	8963      	ldrh	r3, [r4, #10]
	sep->max_tx_time =
    4164:	8083      	strh	r3, [r0, #4]
	sep->max_rx_octets =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_octets;
    4166:	88a3      	ldrh	r3, [r4, #4]
	sep->max_rx_octets =
    4168:	80c3      	strh	r3, [r0, #6]
	sep->max_rx_time =
		pdu_data->payload.llctrl.ctrldata.length_rsp.max_rx_time;
    416a:	88e3      	ldrh	r3, [r4, #6]
	sep->max_rx_time =
    416c:	8103      	strh	r3, [r0, #8]
    416e:	e7ec      	b.n	414a <le_data_len_change+0x26>
    4170:	2000bba8 	.word	0x2000bba8
    4174:	2000bbb0 	.word	0x2000bbb0

00004178 <le_conn_update_complete>:
{
    4178:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_conn_update_complete *evt = (void *)buf->data;
    417a:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    417c:	f8b4 0001 	ldrh.w	r0, [r4, #1]
    4180:	f002 fb90 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    4184:	b128      	cbz	r0, 4192 <le_conn_update_complete+0x1a>
    4186:	4605      	mov	r5, r0
	if (!evt->status) {
    4188:	7823      	ldrb	r3, [r4, #0]
    418a:	b11b      	cbz	r3, 4194 <le_conn_update_complete+0x1c>
	bt_conn_unref(conn);
    418c:	4628      	mov	r0, r5
    418e:	f002 fc0d 	bl	69ac <bt_conn_unref>
    4192:	bd38      	pop	{r3, r4, r5, pc}
		conn->le.interval = sys_le16_to_cpu(evt->interval);
    4194:	f8b4 3003 	ldrh.w	r3, [r4, #3]
    4198:	f8a0 305e 	strh.w	r3, [r0, #94]	; 0x5e
		conn->le.latency = sys_le16_to_cpu(evt->latency);
    419c:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    41a0:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
		conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    41a4:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    41a8:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
		notify_le_param_updated(conn);
    41ac:	f002 f912 	bl	63d4 <notify_le_param_updated>
    41b0:	e7ec      	b.n	418c <le_conn_update_complete+0x14>
	...

000041b4 <le_conn_update_complete>:
{
    41b4:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    41b6:	4b14      	ldr	r3, [pc, #80]	; (4208 <le_conn_update_complete+0x54>)
    41b8:	e9d3 4500 	ldrd	r4, r5, [r3]
    41bc:	2400      	movs	r4, #0
    41be:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    41c2:	ea54 0305 	orrs.w	r3, r4, r5
    41c6:	d008      	beq.n	41da <le_conn_update_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_UPDATE_COMPLETE)) {
    41c8:	4b10      	ldr	r3, [pc, #64]	; (420c <le_conn_update_complete+0x58>)
    41ca:	e9d3 4500 	ldrd	r4, r5, [r3]
    41ce:	f004 0404 	and.w	r4, r4, #4
    41d2:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    41d4:	ea54 0305 	orrs.w	r3, r4, r5
    41d8:	d100      	bne.n	41dc <le_conn_update_complete+0x28>
    41da:	bd38      	pop	{r3, r4, r5, pc}
    41dc:	4613      	mov	r3, r2
    41de:	460d      	mov	r5, r1
    41e0:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_UPDATE_COMPLETE, sizeof(*sep));
    41e2:	2209      	movs	r2, #9
    41e4:	2103      	movs	r1, #3
    41e6:	4618      	mov	r0, r3
    41e8:	f008 fca8 	bl	cb3c <meta_evt>
	sep->status = radio_cu->status;
    41ec:	78e3      	ldrb	r3, [r4, #3]
    41ee:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    41f0:	f8a0 5001 	strh.w	r5, [r0, #1]
	sep->interval = sys_cpu_to_le16(radio_cu->interval);
    41f4:	88a3      	ldrh	r3, [r4, #4]
    41f6:	f8a0 3003 	strh.w	r3, [r0, #3]
	sep->latency = sys_cpu_to_le16(radio_cu->latency);
    41fa:	88e3      	ldrh	r3, [r4, #6]
    41fc:	f8a0 3005 	strh.w	r3, [r0, #5]
	sep->supv_timeout = sys_cpu_to_le16(radio_cu->timeout);
    4200:	8923      	ldrh	r3, [r4, #8]
    4202:	f8a0 3007 	strh.w	r3, [r0, #7]
    4206:	e7e8      	b.n	41da <le_conn_update_complete+0x26>
    4208:	2000bba8 	.word	0x2000bba8
    420c:	2000bbb0 	.word	0x2000bbb0

00004210 <hci_cmd_done>:
{
    4210:	b538      	push	{r3, r4, r5, lr}
    4212:	460d      	mov	r5, r1
    4214:	4614      	mov	r4, r2
	if (net_buf_pool_get(buf->pool_id) != &hci_cmd_pool) {
    4216:	7990      	ldrb	r0, [r2, #6]
    4218:	f016 f826 	bl	1a268 <net_buf_pool_get>
    421c:	4b0b      	ldr	r3, [pc, #44]	; (424c <hci_cmd_done+0x3c>)
    421e:	4283      	cmp	r3, r0
    4220:	d000      	beq.n	4224 <hci_cmd_done+0x14>
    4222:	bd38      	pop	{r3, r4, r5, pc}
    4224:	f104 0210 	add.w	r2, r4, #16
    4228:	89e3      	ldrh	r3, [r4, #14]
    422a:	4413      	add	r3, r2
    422c:	3303      	adds	r3, #3
    422e:	f023 0303 	bic.w	r3, r3, #3
	if (cmd(buf)->sync) {
    4232:	6859      	ldr	r1, [r3, #4]
    4234:	2900      	cmp	r1, #0
    4236:	d0f4      	beq.n	4222 <hci_cmd_done+0x12>
		cmd(buf)->status = status;
    4238:	705d      	strb	r5, [r3, #1]
    423a:	89e3      	ldrh	r3, [r4, #14]
    423c:	441a      	add	r2, r3
    423e:	3203      	adds	r2, #3
    4240:	f022 0203 	bic.w	r2, r2, #3
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    4244:	6850      	ldr	r0, [r2, #4]
    4246:	f024 fbd4 	bl	289f2 <_impl_k_sem_give>
    424a:	e7ea      	b.n	4222 <hci_cmd_done+0x12>
    424c:	2000cd48 	.word	0x2000cd48

00004250 <hci_cmd_complete>:
{
    4250:	b570      	push	{r4, r5, r6, lr}
    4252:	4604      	mov	r4, r0
	struct bt_hci_evt_cmd_complete *evt = (void *)buf->data;
    4254:	f850 3f08 	ldr.w	r3, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4258:	f8b3 6001 	ldrh.w	r6, [r3, #1]
	u8_t status, ncmd = evt->ncmd;
    425c:	781d      	ldrb	r5, [r3, #0]
	net_buf_pull(buf, sizeof(*evt));
    425e:	2103      	movs	r1, #3
    4260:	f016 f915 	bl	1a48e <net_buf_simple_pull>
	status = buf->data[0];
    4264:	68a3      	ldr	r3, [r4, #8]
	hci_cmd_done(opcode, status, buf);
    4266:	4622      	mov	r2, r4
    4268:	7819      	ldrb	r1, [r3, #0]
    426a:	4630      	mov	r0, r6
    426c:	f7ff ffd0 	bl	4210 <hci_cmd_done>
	if (ncmd) {
    4270:	b905      	cbnz	r5, 4274 <hci_cmd_complete+0x24>
    4272:	bd70      	pop	{r4, r5, r6, pc}
    4274:	4801      	ldr	r0, [pc, #4]	; (427c <hci_cmd_complete+0x2c>)
    4276:	f024 fbbc 	bl	289f2 <_impl_k_sem_give>
}
    427a:	e7fa      	b.n	4272 <hci_cmd_complete+0x22>
    427c:	2000b960 	.word	0x2000b960

00004280 <hci_cmd_status>:
{
    4280:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4282:	4605      	mov	r5, r0
	struct bt_hci_evt_cmd_status *evt = (void *)buf->data;
    4284:	f850 4f08 	ldr.w	r4, [r0, #8]!
	u16_t opcode = sys_le16_to_cpu(evt->opcode);
    4288:	8867      	ldrh	r7, [r4, #2]
	u8_t ncmd = evt->ncmd;
    428a:	7866      	ldrb	r6, [r4, #1]
	net_buf_pull(buf, sizeof(*evt));
    428c:	2104      	movs	r1, #4
    428e:	f016 f8fe 	bl	1a48e <net_buf_simple_pull>
	hci_cmd_done(opcode, evt->status, buf);
    4292:	462a      	mov	r2, r5
    4294:	7821      	ldrb	r1, [r4, #0]
    4296:	4638      	mov	r0, r7
    4298:	f7ff ffba 	bl	4210 <hci_cmd_done>
	if (ncmd) {
    429c:	b906      	cbnz	r6, 42a0 <hci_cmd_status+0x20>
    429e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    42a0:	4801      	ldr	r0, [pc, #4]	; (42a8 <hci_cmd_status+0x28>)
    42a2:	f024 fba6 	bl	289f2 <_impl_k_sem_give>
}
    42a6:	e7fa      	b.n	429e <hci_cmd_status+0x1e>
    42a8:	2000b960 	.word	0x2000b960

000042ac <hci_num_completed_packets>:
{
    42ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_num_completed_packets *evt = (void *)buf->data;
    42b0:	f8d0 8008 	ldr.w	r8, [r0, #8]
	for (i = 0; i < evt->num_handles; i++) {
    42b4:	2700      	movs	r7, #0
    42b6:	e026      	b.n	4306 <hci_num_completed_packets+0x5a>
    42b8:	f386 8811 	msr	BASEPRI, r6
			continue;
    42bc:	e022      	b.n	4304 <hci_num_completed_packets+0x58>
    42be:	f383 8811 	msr	BASEPRI, r3
			if (!node) {
    42c2:	b1e1      	cbz	r1, 42fe <hci_num_completed_packets+0x52>
			k_fifo_put(&conn->tx_notify, node);
    42c4:	f104 001c 	add.w	r0, r4, #28
    42c8:	f023 fffc 	bl	282c4 <k_queue_append>
			k_sem_give(bt_conn_get_pkts(conn));
    42cc:	4620      	mov	r0, r4
    42ce:	f002 f85f 	bl	6390 <bt_conn_get_pkts>
    42d2:	f024 fb8e 	bl	289f2 <_impl_k_sem_give>
		while (count--) {
    42d6:	4635      	mov	r5, r6
    42d8:	1e6b      	subs	r3, r5, #1
    42da:	b29e      	uxth	r6, r3
    42dc:	b17d      	cbz	r5, 42fe <hci_num_completed_packets+0x52>
	__asm__ volatile(
    42de:	f04f 0220 	mov.w	r2, #32
    42e2:	f3ef 8311 	mrs	r3, BASEPRI
    42e6:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    42ea:	6961      	ldr	r1, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    42ec:	2900      	cmp	r1, #0
    42ee:	d0e6      	beq.n	42be <hci_num_completed_packets+0x12>
	list->head = node->next;
    42f0:	680a      	ldr	r2, [r1, #0]
    42f2:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    42f4:	69a0      	ldr	r0, [r4, #24]
    42f6:	4281      	cmp	r1, r0
    42f8:	d1e1      	bne.n	42be <hci_num_completed_packets+0x12>
		list->tail = list->head;
    42fa:	61a2      	str	r2, [r4, #24]
    42fc:	e7df      	b.n	42be <hci_num_completed_packets+0x12>
		bt_conn_unref(conn);
    42fe:	4620      	mov	r0, r4
    4300:	f002 fb54 	bl	69ac <bt_conn_unref>
	for (i = 0; i < evt->num_handles; i++) {
    4304:	3701      	adds	r7, #1
    4306:	f898 3000 	ldrb.w	r3, [r8]
    430a:	429f      	cmp	r7, r3
    430c:	da13      	bge.n	4336 <hci_num_completed_packets+0x8a>
		handle = sys_le16_to_cpu(evt->h[i].handle);
    430e:	eb08 0387 	add.w	r3, r8, r7, lsl #2
    4312:	f8b3 0001 	ldrh.w	r0, [r3, #1]
		count = sys_le16_to_cpu(evt->h[i].count);
    4316:	f8b3 5003 	ldrh.w	r5, [r3, #3]
    431a:	f04f 0320 	mov.w	r3, #32
    431e:	f3ef 8611 	mrs	r6, BASEPRI
    4322:	f383 8811 	msr	BASEPRI, r3
		conn = bt_conn_lookup_handle(handle);
    4326:	f002 fabd 	bl	68a4 <bt_conn_lookup_handle>
		if (!conn) {
    432a:	4604      	mov	r4, r0
    432c:	2800      	cmp	r0, #0
    432e:	d0c3      	beq.n	42b8 <hci_num_completed_packets+0xc>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    4330:	f386 8811 	msr	BASEPRI, r6
    4334:	e7d0      	b.n	42d8 <hci_num_completed_packets+0x2c>
}
    4336:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

0000433c <bt_hci_cmd_create>:
{
    433c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    433e:	4607      	mov	r7, r0
    4340:	460d      	mov	r5, r1
	buf = net_buf_alloc(&hci_cmd_pool, K_FOREVER);
    4342:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    4346:	4812      	ldr	r0, [pc, #72]	; (4390 <bt_hci_cmd_create+0x54>)
    4348:	f015 ff9a 	bl	1a280 <net_buf_alloc>
    434c:	4604      	mov	r4, r0
	net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    434e:	2100      	movs	r1, #0
    4350:	f015 fff1 	bl	1a336 <net_buf_reserve>
    4354:	f104 0310 	add.w	r3, r4, #16
    4358:	89e2      	ldrh	r2, [r4, #14]
    435a:	441a      	add	r2, r3
    435c:	3203      	adds	r2, #3
    435e:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->type = BT_BUF_CMD;
    4362:	2100      	movs	r1, #0
    4364:	7011      	strb	r1, [r2, #0]
    4366:	89e2      	ldrh	r2, [r4, #14]
    4368:	441a      	add	r2, r3
    436a:	3203      	adds	r2, #3
    436c:	f022 0203 	bic.w	r2, r2, #3
	cmd(buf)->opcode = opcode;
    4370:	8057      	strh	r7, [r2, #2]
    4372:	89e2      	ldrh	r2, [r4, #14]
    4374:	4413      	add	r3, r2
    4376:	3303      	adds	r3, #3
    4378:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = NULL;
    437c:	6059      	str	r1, [r3, #4]
	hdr = net_buf_add(buf, sizeof(*hdr));
    437e:	2103      	movs	r1, #3
    4380:	f104 0008 	add.w	r0, r4, #8
    4384:	f016 f836 	bl	1a3f4 <net_buf_simple_add>
	hdr->opcode = sys_cpu_to_le16(opcode);
    4388:	8007      	strh	r7, [r0, #0]
	hdr->param_len = param_len;
    438a:	7085      	strb	r5, [r0, #2]
}
    438c:	4620      	mov	r0, r4
    438e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    4390:	2000cd48 	.word	0x2000cd48

00004394 <bt_hci_cmd_send_sync>:
{
    4394:	b570      	push	{r4, r5, r6, lr}
    4396:	b086      	sub	sp, #24
    4398:	4616      	mov	r6, r2
	if (!buf) {
    439a:	460d      	mov	r5, r1
    439c:	b329      	cbz	r1, 43ea <bt_hci_cmd_send_sync+0x56>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    439e:	2201      	movs	r2, #1
    43a0:	2100      	movs	r1, #0
    43a2:	4668      	mov	r0, sp
    43a4:	f024 fb1c 	bl	289e0 <_impl_k_sem_init>
    43a8:	f105 0410 	add.w	r4, r5, #16
    43ac:	89eb      	ldrh	r3, [r5, #14]
    43ae:	4423      	add	r3, r4
    43b0:	3303      	adds	r3, #3
    43b2:	f023 0303 	bic.w	r3, r3, #3
	cmd(buf)->sync = &sync_sem;
    43b6:	f8c3 d004 	str.w	sp, [r3, #4]
	net_buf_ref(buf);
    43ba:	4628      	mov	r0, r5
    43bc:	f015 ffea 	bl	1a394 <net_buf_ref>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    43c0:	4629      	mov	r1, r5
    43c2:	4813      	ldr	r0, [pc, #76]	; (4410 <bt_hci_cmd_send_sync+0x7c>)
    43c4:	f015 ffbc 	bl	1a340 <net_buf_put>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    43c8:	f242 7110 	movw	r1, #10000	; 0x2710
    43cc:	4668      	mov	r0, sp
    43ce:	f024 fb23 	bl	28a18 <_impl_k_sem_take>
    43d2:	89eb      	ldrh	r3, [r5, #14]
    43d4:	441c      	add	r4, r3
    43d6:	3403      	adds	r4, #3
    43d8:	f024 0403 	bic.w	r4, r4, #3
	if (cmd(buf)->status) {
    43dc:	7863      	ldrb	r3, [r4, #1]
    43de:	b963      	cbnz	r3, 43fa <bt_hci_cmd_send_sync+0x66>
		if (rsp) {
    43e0:	b18e      	cbz	r6, 4406 <bt_hci_cmd_send_sync+0x72>
			*rsp = buf;
    43e2:	6035      	str	r5, [r6, #0]
		err = 0;
    43e4:	2000      	movs	r0, #0
}
    43e6:	b006      	add	sp, #24
    43e8:	bd70      	pop	{r4, r5, r6, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    43ea:	f7ff ffa7 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    43ee:	4605      	mov	r5, r0
    43f0:	2800      	cmp	r0, #0
    43f2:	d1d4      	bne.n	439e <bt_hci_cmd_send_sync+0xa>
			return -ENOBUFS;
    43f4:	f06f 0068 	mvn.w	r0, #104	; 0x68
    43f8:	e7f5      	b.n	43e6 <bt_hci_cmd_send_sync+0x52>
		net_buf_unref(buf);
    43fa:	4628      	mov	r0, r5
    43fc:	f015 ffae 	bl	1a35c <net_buf_unref>
		err = -EIO;
    4400:	f06f 0004 	mvn.w	r0, #4
    4404:	e7ef      	b.n	43e6 <bt_hci_cmd_send_sync+0x52>
			net_buf_unref(buf);
    4406:	4628      	mov	r0, r5
    4408:	f015 ffa8 	bl	1a35c <net_buf_unref>
		err = 0;
    440c:	2000      	movs	r0, #0
    440e:	e7ea      	b.n	43e6 <bt_hci_cmd_send_sync+0x52>
    4410:	2000b98c 	.word	0x2000b98c

00004414 <common_init>:
{
    4414:	b510      	push	{r4, lr}
    4416:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_RESET, NULL, &rsp);
    4418:	aa01      	add	r2, sp, #4
    441a:	2100      	movs	r1, #0
    441c:	f640 4003 	movw	r0, #3075	; 0xc03
    4420:	f7ff ffb8 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4424:	4604      	mov	r4, r0
    4426:	b110      	cbz	r0, 442e <common_init+0x1a>
}
    4428:	4620      	mov	r0, r4
    442a:	b002      	add	sp, #8
    442c:	bd10      	pop	{r4, pc}
	hci_reset_complete(rsp);
    442e:	9801      	ldr	r0, [sp, #4]
    4430:	f7ff fce6 	bl	3e00 <hci_reset_complete>
	net_buf_unref(rsp);
    4434:	ac02      	add	r4, sp, #8
    4436:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    443a:	f015 ff8f 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_FEATURES, NULL, &rsp);
    443e:	4622      	mov	r2, r4
    4440:	2100      	movs	r1, #0
    4442:	f241 0003 	movw	r0, #4099	; 0x1003
    4446:	f7ff ffa5 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    444a:	4604      	mov	r4, r0
    444c:	2800      	cmp	r0, #0
    444e:	d1eb      	bne.n	4428 <common_init+0x14>
	read_local_features_complete(rsp);
    4450:	9801      	ldr	r0, [sp, #4]
    4452:	f7ff fced 	bl	3e30 <read_local_features_complete>
	net_buf_unref(rsp);
    4456:	ac02      	add	r4, sp, #8
    4458:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    445c:	f015 ff7e 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_LOCAL_VERSION_INFO, NULL,
    4460:	4622      	mov	r2, r4
    4462:	2100      	movs	r1, #0
    4464:	f241 0001 	movw	r0, #4097	; 0x1001
    4468:	f7ff ff94 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    446c:	4604      	mov	r4, r0
    446e:	2800      	cmp	r0, #0
    4470:	d1da      	bne.n	4428 <common_init+0x14>
	read_local_ver_complete(rsp);
    4472:	9801      	ldr	r0, [sp, #4]
    4474:	f7ff fc72 	bl	3d5c <read_local_ver_complete>
	net_buf_unref(rsp);
    4478:	ac02      	add	r4, sp, #8
    447a:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    447e:	f015 ff6d 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BD_ADDR, NULL, &rsp);
    4482:	4622      	mov	r2, r4
    4484:	2100      	movs	r1, #0
    4486:	f241 0009 	movw	r0, #4105	; 0x1009
    448a:	f7ff ff83 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    448e:	4604      	mov	r4, r0
    4490:	2800      	cmp	r0, #0
    4492:	d1c9      	bne.n	4428 <common_init+0x14>
	read_bdaddr_complete(rsp);
    4494:	9801      	ldr	r0, [sp, #4]
    4496:	f7ff fcd5 	bl	3e44 <read_bdaddr_complete>
	net_buf_unref(rsp);
    449a:	ac02      	add	r4, sp, #8
    449c:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    44a0:	f015 ff5c 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_SUPPORTED_COMMANDS, NULL,
    44a4:	4622      	mov	r2, r4
    44a6:	2100      	movs	r1, #0
    44a8:	f241 0002 	movw	r0, #4098	; 0x1002
    44ac:	f7ff ff72 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    44b0:	4604      	mov	r4, r0
    44b2:	2800      	cmp	r0, #0
    44b4:	d1b8      	bne.n	4428 <common_init+0x14>
	read_supported_commands_complete(rsp);
    44b6:	9801      	ldr	r0, [sp, #4]
    44b8:	f7ff fcd2 	bl	3e60 <read_supported_commands_complete>
	net_buf_unref(rsp);
    44bc:	9801      	ldr	r0, [sp, #4]
    44be:	f015 ff4d 	bl	1a35c <net_buf_unref>
	return 0;
    44c2:	e7b1      	b.n	4428 <common_init+0x14>

000044c4 <common_init>:
	/* memory allocations */
	common_init();
}

static void common_init(void)
{
    44c4:	b538      	push	{r3, r4, r5, lr}
	void *link;

	/* initialise connection pool. */
	if (_radio.connection_count) {
    44c6:	4b3a      	ldr	r3, [pc, #232]	; (45b0 <common_init+0xec>)
    44c8:	f893 210c 	ldrb.w	r2, [r3, #268]	; 0x10c
    44cc:	2a00      	cmp	r2, #0
    44ce:	d15e      	bne.n	458e <common_init+0xca>
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
			 _radio.connection_count,
			 &_radio.conn_free);
	} else {
		_radio.conn_free = NULL;
    44d0:	2200      	movs	r2, #0
    44d2:	4b37      	ldr	r3, [pc, #220]	; (45b0 <common_init+0xec>)
    44d4:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	}

	/* initialise rx pool. */
	mem_init(_radio.pkt_rx_data_pool,
		 _radio.packet_rx_data_size,
		 _radio.packet_rx_data_count,
    44d8:	4c35      	ldr	r4, [pc, #212]	; (45b0 <common_init+0xec>)
	mem_init(_radio.pkt_rx_data_pool,
    44da:	f504 7396 	add.w	r3, r4, #300	; 0x12c
    44de:	f894 2136 	ldrb.w	r2, [r4, #310]	; 0x136
    44e2:	f8b4 1134 	ldrh.w	r1, [r4, #308]	; 0x134
    44e6:	f8d4 0128 	ldr.w	r0, [r4, #296]	; 0x128
    44ea:	f00a fa47 	bl	e97c <mem_init>
		 &_radio.pkt_rx_data_free);

	/* initialise rx link pool. */
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
		 (_radio.packet_rx_count + _radio.connection_count),
    44ee:	f894 113c 	ldrb.w	r1, [r4, #316]	; 0x13c
    44f2:	f894 210c 	ldrb.w	r2, [r4, #268]	; 0x10c
	mem_init(_radio.link_rx_pool, (sizeof(void *) * 2),
    44f6:	f504 75a2 	add.w	r5, r4, #324	; 0x144
    44fa:	462b      	mov	r3, r5
    44fc:	440a      	add	r2, r1
    44fe:	2108      	movs	r1, #8
    4500:	f8d4 0140 	ldr.w	r0, [r4, #320]	; 0x140
    4504:	f00a fa3a 	bl	e97c <mem_init>
		 &_radio.link_rx_free);

	/* initialise ctrl tx pool. */
	mem_init(_radio.pkt_tx_ctrl_pool, PACKET_TX_CTRL_SIZE_MIN,
    4508:	f504 73ac 	add.w	r3, r4, #344	; 0x158
    450c:	2202      	movs	r2, #2
    450e:	2124      	movs	r1, #36	; 0x24
    4510:	f8d4 0154 	ldr.w	r0, [r4, #340]	; 0x154
    4514:	f00a fa32 	bl	e97c <mem_init>
		 PACKET_MEM_COUNT_TX_CTRL, &_radio.pkt_tx_ctrl_free);

	/* initialise data tx pool. */
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
		 (_radio.packet_tx_count - 1), &_radio.pkt_tx_data_free);
    4518:	f894 2170 	ldrb.w	r2, [r4, #368]	; 0x170
	mem_init(_radio.pkt_tx_data_pool, _radio.packet_tx_data_size,
    451c:	3a01      	subs	r2, #1
    451e:	f504 73b0 	add.w	r3, r4, #352	; 0x160
    4522:	b292      	uxth	r2, r2
    4524:	f8b4 1164 	ldrh.w	r1, [r4, #356]	; 0x164
    4528:	f8d4 015c 	ldr.w	r0, [r4, #348]	; 0x15c
    452c:	f00a fa26 	bl	e97c <mem_init>

	/* initialise the event-cum-data memq */
	link = mem_acquire(&_radio.link_rx_free);
    4530:	4628      	mov	r0, r5
    4532:	f00a fa48 	bl	e9c6 <mem_acquire>
	LL_ASSERT(link);
    4536:	b3a0      	cbz	r0, 45a2 <common_init+0xde>
	memq_init(link, &_radio.link_rx_head, (void *)&_radio.link_rx_tail);
    4538:	4c1d      	ldr	r4, [pc, #116]	; (45b0 <common_init+0xec>)
    453a:	f504 72a6 	add.w	r2, r4, #332	; 0x14c
    453e:	f504 71a4 	add.w	r1, r4, #328	; 0x148
    4542:	f00a faa5 	bl	ea90 <memq_init>

	/* initialise advertiser channel map */
	_radio.advertiser.chan_map = 0x07;
    4546:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
    454a:	f043 0338 	orr.w	r3, r3, #56	; 0x38
    454e:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25

	/* initialise connection channel map */
	_radio.data_chan_map[0] = 0xFF;
    4552:	20ff      	movs	r0, #255	; 0xff
    4554:	f884 0116 	strb.w	r0, [r4, #278]	; 0x116
	_radio.data_chan_map[1] = 0xFF;
    4558:	f884 0117 	strb.w	r0, [r4, #279]	; 0x117
	_radio.data_chan_map[2] = 0xFF;
    455c:	f884 0118 	strb.w	r0, [r4, #280]	; 0x118
	_radio.data_chan_map[3] = 0xFF;
    4560:	f884 0119 	strb.w	r0, [r4, #281]	; 0x119
	_radio.data_chan_map[4] = 0x1F;
    4564:	231f      	movs	r3, #31
    4566:	f884 311a 	strb.w	r3, [r4, #282]	; 0x11a
	_radio.data_chan_count = 37;
    456a:	2325      	movs	r3, #37	; 0x25
    456c:	f884 311b 	strb.w	r3, [r4, #283]	; 0x11b

#if defined(CONFIG_BT_CTLR_DATA_LENGTH)
	/* Initialize the DLE defaults */
	_radio.default_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
    4570:	231b      	movs	r3, #27
    4572:	f8a4 311e 	strh.w	r3, [r4, #286]	; 0x11e
	_radio.default_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN,
    4576:	f44f 73a4 	mov.w	r3, #328	; 0x148
    457a:	f8a4 3120 	strh.w	r3, [r4, #288]	; 0x120
	/* Initialize the PHY defaults */
	_radio.default_phy_tx = BIT(0);
	_radio.default_phy_rx = BIT(0);

#if defined(CONFIG_BT_CTLR_PHY_2M)
	_radio.default_phy_tx |= BIT(1);
    457e:	2303      	movs	r3, #3
    4580:	f8a4 3122 	strh.w	r3, [r4, #290]	; 0x122
	_radio.default_phy_rx |= BIT(1);
    4584:	f8a4 3124 	strh.w	r3, [r4, #292]	; 0x124
	_radio.default_phy_rx |= BIT(2);
#endif /* CONFIG_BT_CTLR_PHY_CODED */
#endif /* CONFIG_BT_CTLR_PHY */

	/* allocate the rx queue */
	packet_rx_allocate(0xFF);
    4588:	f00c ff5a 	bl	11440 <packet_rx_allocate>
    458c:	bd38      	pop	{r3, r4, r5, pc}
		mem_init(_radio.conn_pool, CONNECTION_T_SIZE,
    458e:	4618      	mov	r0, r3
    4590:	f503 7384 	add.w	r3, r3, #264	; 0x108
    4594:	f44f 71aa 	mov.w	r1, #340	; 0x154
    4598:	f8d0 0104 	ldr.w	r0, [r0, #260]	; 0x104
    459c:	f00a f9ee 	bl	e97c <mem_init>
    45a0:	e79a      	b.n	44d8 <common_init+0x14>
	LL_ASSERT(link);
    45a2:	4040      	eors	r0, r0
    45a4:	f380 8811 	msr	BASEPRI, r0
    45a8:	f04f 0004 	mov.w	r0, #4
    45ac:	df02      	svc	2
    45ae:	bf00      	nop
    45b0:	20000f84 	.word	0x20000f84

000045b4 <le_set_event_mask>:
{
    45b4:	b538      	push	{r3, r4, r5, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_EVENT_MASK, sizeof(*cp_mask));
    45b6:	2108      	movs	r1, #8
    45b8:	f242 0001 	movw	r0, #8193	; 0x2001
    45bc:	f7ff febe 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    45c0:	2800      	cmp	r0, #0
    45c2:	d042      	beq.n	464a <le_set_event_mask+0x96>
    45c4:	4604      	mov	r4, r0
	cp_mask = net_buf_add(buf, sizeof(*cp_mask));
    45c6:	2108      	movs	r1, #8
    45c8:	4408      	add	r0, r1
    45ca:	f015 ff13 	bl	1a3f4 <net_buf_simple_add>
		if (BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features)) {
    45ce:	4b20      	ldr	r3, [pc, #128]	; (4650 <le_set_event_mask+0x9c>)
    45d0:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
    45d4:	f011 0f02 	tst.w	r1, #2
    45d8:	d131      	bne.n	463e <le_set_event_mask+0x8a>
		mask |= BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE;
    45da:	220f      	movs	r2, #15
    45dc:	2300      	movs	r3, #0
		if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    45de:	f011 0f20 	tst.w	r1, #32
    45e2:	d001      	beq.n	45e8 <le_set_event_mask+0x34>
			mask |= BT_EVT_MASK_LE_DATA_LEN_CHANGE;
    45e4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
		if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) ||
    45e8:	4d19      	ldr	r5, [pc, #100]	; (4650 <le_set_event_mask+0x9c>)
    45ea:	f895 5079 	ldrb.w	r5, [r5, #121]	; 0x79
    45ee:	f015 0f09 	tst.w	r5, #9
    45f2:	d001      	beq.n	45f8 <le_set_event_mask+0x44>
			mask |= BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE;
    45f4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    45f8:	f011 0f01 	tst.w	r1, #1
    45fc:	d001      	beq.n	4602 <le_set_event_mask+0x4e>
		mask |= BT_EVT_MASK_LE_LTK_REQUEST;
    45fe:	f042 0210 	orr.w	r2, r2, #16
	if ((bt_dev.supported_commands[34] & 0x02) &&
    4602:	4913      	ldr	r1, [pc, #76]	; (4650 <le_set_event_mask+0x9c>)
    4604:	f891 1040 	ldrb.w	r1, [r1, #64]	; 0x40
    4608:	f001 0106 	and.w	r1, r1, #6
    460c:	2906      	cmp	r1, #6
    460e:	d019      	beq.n	4644 <le_set_event_mask+0x90>
	dst[0] = val;
    4610:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    4612:	f3c2 2107 	ubfx	r1, r2, #8, #8
    4616:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4618:	0c12      	lsrs	r2, r2, #16
	dst[0] = val;
    461a:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    461c:	0a12      	lsrs	r2, r2, #8
    461e:	70c2      	strb	r2, [r0, #3]
	dst[0] = val;
    4620:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4622:	f3c3 2207 	ubfx	r2, r3, #8, #8
    4626:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4628:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    462a:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    462c:	0a1b      	lsrs	r3, r3, #8
    462e:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_EVENT_MASK, buf, NULL);
    4630:	2200      	movs	r2, #0
    4632:	4621      	mov	r1, r4
    4634:	f242 0001 	movw	r0, #8193	; 0x2001
    4638:	f7ff feac 	bl	4394 <bt_hci_cmd_send_sync>
    463c:	bd38      	pop	{r3, r4, r5, pc}
			mask |= BT_EVT_MASK_LE_CONN_PARAM_REQ;
    463e:	222f      	movs	r2, #47	; 0x2f
    4640:	2300      	movs	r3, #0
    4642:	e7cc      	b.n	45de <le_set_event_mask+0x2a>
		mask |= BT_EVT_MASK_LE_GENERATE_DHKEY_COMPLETE;
    4644:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
    4648:	e7e2      	b.n	4610 <le_set_event_mask+0x5c>
		return -ENOBUFS;
    464a:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    464e:	bd38      	pop	{r3, r4, r5, pc}
    4650:	2000b8b8 	.word	0x2000b8b8

00004654 <le_set_event_mask>:
{
    4654:	b570      	push	{r4, r5, r6, lr}
    4656:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    4658:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    465a:	79da      	ldrb	r2, [r3, #7]
    465c:	7999      	ldrb	r1, [r3, #6]
    465e:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4662:	7958      	ldrb	r0, [r3, #5]
    4664:	791a      	ldrb	r2, [r3, #4]
    4666:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    466a:	2400      	movs	r4, #0
    466c:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    4670:	78d9      	ldrb	r1, [r3, #3]
    4672:	789a      	ldrb	r2, [r3, #2]
    4674:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    4678:	7859      	ldrb	r1, [r3, #1]
    467a:	781b      	ldrb	r3, [r3, #0]
    467c:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    4680:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    4684:	ea44 0003 	orr.w	r0, r4, r3
    4688:	4629      	mov	r1, r5
	le_event_mask = sys_get_le64(cmd->events);
    468a:	4b04      	ldr	r3, [pc, #16]	; (469c <le_set_event_mask+0x48>)
    468c:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    4690:	2101      	movs	r1, #1
    4692:	4630      	mov	r0, r6
    4694:	f008 f9b8 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    4698:	7004      	strb	r4, [r0, #0]
    469a:	bd70      	pop	{r4, r5, r6, pc}
    469c:	2000bbb0 	.word	0x2000bbb0

000046a0 <le_init>:
	if (!BT_FEAT_LE(bt_dev.features)) {
    46a0:	4b4c      	ldr	r3, [pc, #304]	; (47d4 <le_init+0x134>)
    46a2:	7e9b      	ldrb	r3, [r3, #26]
    46a4:	f013 0f40 	tst.w	r3, #64	; 0x40
    46a8:	f000 808c 	beq.w	47c4 <le_init+0x124>
{
    46ac:	b570      	push	{r4, r5, r6, lr}
    46ae:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_LOCAL_FEATURES, NULL,
    46b0:	aa01      	add	r2, sp, #4
    46b2:	2100      	movs	r1, #0
    46b4:	f242 0003 	movw	r0, #8195	; 0x2003
    46b8:	f7ff fe6c 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    46bc:	4603      	mov	r3, r0
    46be:	b110      	cbz	r0, 46c6 <le_init+0x26>
}
    46c0:	4618      	mov	r0, r3
    46c2:	b002      	add	sp, #8
    46c4:	bd70      	pop	{r4, r5, r6, pc}
	read_le_features_complete(rsp);
    46c6:	9801      	ldr	r0, [sp, #4]
    46c8:	f7ff fbd4 	bl	3e74 <read_le_features_complete>
	net_buf_unref(rsp);
    46cc:	ac02      	add	r4, sp, #8
    46ce:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    46d2:	f015 fe43 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_BUFFER_SIZE,
    46d6:	4622      	mov	r2, r4
    46d8:	2100      	movs	r1, #0
    46da:	f242 0002 	movw	r0, #8194	; 0x2002
    46de:	f7ff fe59 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    46e2:	4603      	mov	r3, r0
    46e4:	2800      	cmp	r0, #0
    46e6:	d1eb      	bne.n	46c0 <le_init+0x20>
	le_read_buffer_size_complete(rsp);
    46e8:	9801      	ldr	r0, [sp, #4]
    46ea:	f7ff fbcd 	bl	3e88 <le_read_buffer_size_complete>
	net_buf_unref(rsp);
    46ee:	9801      	ldr	r0, [sp, #4]
    46f0:	f015 fe34 	bl	1a35c <net_buf_unref>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    46f4:	4b37      	ldr	r3, [pc, #220]	; (47d4 <le_init+0x134>)
    46f6:	7e9b      	ldrb	r3, [r3, #26]
    46f8:	f013 0f20 	tst.w	r3, #32
    46fc:	d037      	beq.n	476e <le_init+0xce>
	if (BT_CMD_LE_STATES(bt_dev.supported_commands)) {
    46fe:	4b35      	ldr	r3, [pc, #212]	; (47d4 <le_init+0x134>)
    4700:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
    4704:	f013 0f08 	tst.w	r3, #8
    4708:	d149      	bne.n	479e <le_init+0xfe>
	    BT_FEAT_LE_DLE(bt_dev.le.features)) {
    470a:	4b32      	ldr	r3, [pc, #200]	; (47d4 <le_init+0x134>)
    470c:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_CONN) &&
    4710:	f013 0f20 	tst.w	r3, #32
    4714:	d027      	beq.n	4766 <le_init+0xc6>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL,
    4716:	466a      	mov	r2, sp
    4718:	2100      	movs	r1, #0
    471a:	f242 002f 	movw	r0, #8239	; 0x202f
    471e:	f7ff fe39 	bl	4394 <bt_hci_cmd_send_sync>
		if (err) {
    4722:	4603      	mov	r3, r0
    4724:	2800      	cmp	r0, #0
    4726:	d1cb      	bne.n	46c0 <le_init+0x20>
		rp = (void *)rsp->data;
    4728:	9800      	ldr	r0, [sp, #0]
    472a:	6883      	ldr	r3, [r0, #8]
		tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    472c:	f8b3 6001 	ldrh.w	r6, [r3, #1]
		tx_time = sys_le16_to_cpu(rp->max_tx_time);
    4730:	f8b3 5003 	ldrh.w	r5, [r3, #3]
		net_buf_unref(rsp);
    4734:	f015 fe12 	bl	1a35c <net_buf_unref>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4738:	2104      	movs	r1, #4
    473a:	f242 0024 	movw	r0, #8228	; 0x2024
    473e:	f7ff fdfd 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    4742:	4604      	mov	r4, r0
    4744:	2800      	cmp	r0, #0
    4746:	d03a      	beq.n	47be <le_init+0x11e>
		cp = net_buf_add(buf, sizeof(*cp));
    4748:	2104      	movs	r1, #4
    474a:	3008      	adds	r0, #8
    474c:	f015 fe52 	bl	1a3f4 <net_buf_simple_add>
		cp->max_tx_octets = sys_cpu_to_le16(tx_octets);
    4750:	8006      	strh	r6, [r0, #0]
		cp->max_tx_time = sys_cpu_to_le16(tx_time);
    4752:	8045      	strh	r5, [r0, #2]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_DEFAULT_DATA_LEN,
    4754:	2200      	movs	r2, #0
    4756:	4621      	mov	r1, r4
    4758:	f242 0024 	movw	r0, #8228	; 0x2024
    475c:	f7ff fe1a 	bl	4394 <bt_hci_cmd_send_sync>
		if (err) {
    4760:	4603      	mov	r3, r0
    4762:	2800      	cmp	r0, #0
    4764:	d1ac      	bne.n	46c0 <le_init+0x20>
	return  le_set_event_mask();
    4766:	f7ff ff25 	bl	45b4 <le_set_event_mask>
    476a:	4603      	mov	r3, r0
    476c:	e7a8      	b.n	46c0 <le_init+0x20>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP,
    476e:	2102      	movs	r1, #2
    4770:	f640 406d 	movw	r0, #3181	; 0xc6d
    4774:	f7ff fde2 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    4778:	4604      	mov	r4, r0
    477a:	b338      	cbz	r0, 47cc <le_init+0x12c>
		cp_le = net_buf_add(buf, sizeof(*cp_le));
    477c:	2102      	movs	r1, #2
    477e:	3008      	adds	r0, #8
    4780:	f015 fe38 	bl	1a3f4 <net_buf_simple_add>
		cp_le->le = 0x01;
    4784:	2301      	movs	r3, #1
    4786:	7003      	strb	r3, [r0, #0]
		cp_le->simul = 0x00;
    4788:	2200      	movs	r2, #0
    478a:	7042      	strb	r2, [r0, #1]
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_WRITE_LE_HOST_SUPP, buf,
    478c:	4621      	mov	r1, r4
    478e:	f640 406d 	movw	r0, #3181	; 0xc6d
    4792:	f7ff fdff 	bl	4394 <bt_hci_cmd_send_sync>
		if (err) {
    4796:	4603      	mov	r3, r0
    4798:	2800      	cmp	r0, #0
    479a:	d0b0      	beq.n	46fe <le_init+0x5e>
    479c:	e790      	b.n	46c0 <le_init+0x20>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_SUPP_STATES, NULL,
    479e:	aa01      	add	r2, sp, #4
    47a0:	2100      	movs	r1, #0
    47a2:	f242 001c 	movw	r0, #8220	; 0x201c
    47a6:	f7ff fdf5 	bl	4394 <bt_hci_cmd_send_sync>
		if (err) {
    47aa:	4603      	mov	r3, r0
    47ac:	2800      	cmp	r0, #0
    47ae:	d187      	bne.n	46c0 <le_init+0x20>
		le_read_supp_states_complete(rsp);
    47b0:	9801      	ldr	r0, [sp, #4]
    47b2:	f7ff fae5 	bl	3d80 <le_read_supp_states_complete>
		net_buf_unref(rsp);
    47b6:	9801      	ldr	r0, [sp, #4]
    47b8:	f015 fdd0 	bl	1a35c <net_buf_unref>
    47bc:	e7a5      	b.n	470a <le_init+0x6a>
			return -ENOBUFS;
    47be:	f06f 0368 	mvn.w	r3, #104	; 0x68
    47c2:	e77d      	b.n	46c0 <le_init+0x20>
		return -ENODEV;
    47c4:	f06f 0312 	mvn.w	r3, #18
}
    47c8:	4618      	mov	r0, r3
    47ca:	4770      	bx	lr
			return -ENOBUFS;
    47cc:	f06f 0368 	mvn.w	r3, #104	; 0x68
    47d0:	e776      	b.n	46c0 <le_init+0x20>
    47d2:	bf00      	nop
    47d4:	2000b8b8 	.word	0x2000b8b8

000047d8 <br_init>:
{
    47d8:	b510      	push	{r4, lr}
    47da:	b082      	sub	sp, #8
	if (bt_dev.le.mtu) {
    47dc:	4b0b      	ldr	r3, [pc, #44]	; (480c <br_init+0x34>)
    47de:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
    47e2:	b11b      	cbz	r3, 47ec <br_init+0x14>
		return 0;
    47e4:	2400      	movs	r4, #0
}
    47e6:	4620      	mov	r0, r4
    47e8:	b002      	add	sp, #8
    47ea:	bd10      	pop	{r4, pc}
	err = bt_hci_cmd_send_sync(BT_HCI_OP_READ_BUFFER_SIZE, NULL, &rsp);
    47ec:	aa01      	add	r2, sp, #4
    47ee:	2100      	movs	r1, #0
    47f0:	f241 0005 	movw	r0, #4101	; 0x1005
    47f4:	f7ff fdce 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    47f8:	4604      	mov	r4, r0
    47fa:	2800      	cmp	r0, #0
    47fc:	d1f3      	bne.n	47e6 <br_init+0xe>
	read_buffer_size_complete(rsp);
    47fe:	9801      	ldr	r0, [sp, #4]
    4800:	f7ff fb58 	bl	3eb4 <read_buffer_size_complete>
	net_buf_unref(rsp);
    4804:	9801      	ldr	r0, [sp, #4]
    4806:	f015 fda9 	bl	1a35c <net_buf_unref>
	return 0;
    480a:	e7ec      	b.n	47e6 <br_init+0xe>
    480c:	2000b8b8 	.word	0x2000b8b8

00004810 <set_event_mask>:
{
    4810:	b510      	push	{r4, lr}
	buf = bt_hci_cmd_create(BT_HCI_OP_SET_EVENT_MASK, sizeof(*ev));
    4812:	2108      	movs	r1, #8
    4814:	f640 4001 	movw	r0, #3073	; 0xc01
    4818:	f7ff fd90 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    481c:	b348      	cbz	r0, 4872 <set_event_mask+0x62>
    481e:	4604      	mov	r4, r0
	ev = net_buf_add(buf, sizeof(*ev));
    4820:	2108      	movs	r1, #8
    4822:	4408      	add	r0, r1
    4824:	f015 fde6 	bl	1a3f4 <net_buf_simple_add>
	    BT_FEAT_LE_ENCR(bt_dev.le.features)) {
    4828:	4b13      	ldr	r3, [pc, #76]	; (4878 <set_event_mask+0x68>)
    482a:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if (IS_ENABLED(CONFIG_BT_SMP) &&
    482e:	f013 0f01 	tst.w	r3, #1
    4832:	d11b      	bne.n	486c <set_event_mask+0x5c>
		mask |= BT_EVT_MASK_REMOTE_VERSION_INFO;
    4834:	4a11      	ldr	r2, [pc, #68]	; (487c <set_event_mask+0x6c>)
    4836:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
	sys_put_le16(val, dst);
    483a:	b291      	uxth	r1, r2
	dst[0] = val;
    483c:	7002      	strb	r2, [r0, #0]
	dst[1] = val >> 8;
    483e:	0a09      	lsrs	r1, r1, #8
    4840:	7041      	strb	r1, [r0, #1]
	sys_put_le16(val >> 16, &dst[2]);
    4842:	0c12      	lsrs	r2, r2, #16
    4844:	b291      	uxth	r1, r2
	dst[0] = val;
    4846:	7082      	strb	r2, [r0, #2]
	dst[1] = val >> 8;
    4848:	0a0a      	lsrs	r2, r1, #8
    484a:	70c2      	strb	r2, [r0, #3]
	sys_put_le16(val, dst);
    484c:	b29a      	uxth	r2, r3
	dst[0] = val;
    484e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    4850:	0a12      	lsrs	r2, r2, #8
    4852:	7142      	strb	r2, [r0, #5]
	sys_put_le16(val >> 16, &dst[2]);
    4854:	0c1b      	lsrs	r3, r3, #16
    4856:	b29a      	uxth	r2, r3
	dst[0] = val;
    4858:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    485a:	0a13      	lsrs	r3, r2, #8
    485c:	71c3      	strb	r3, [r0, #7]
	return bt_hci_cmd_send_sync(BT_HCI_OP_SET_EVENT_MASK, buf, NULL);
    485e:	2200      	movs	r2, #0
    4860:	4621      	mov	r1, r4
    4862:	f640 4001 	movw	r0, #3073	; 0xc01
    4866:	f7ff fd95 	bl	4394 <bt_hci_cmd_send_sync>
    486a:	bd10      	pop	{r4, pc}
		mask |= BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE;
    486c:	4a04      	ldr	r2, [pc, #16]	; (4880 <set_event_mask+0x70>)
    486e:	4b05      	ldr	r3, [pc, #20]	; (4884 <set_event_mask+0x74>)
    4870:	e7e3      	b.n	483a <set_event_mask+0x2a>
		return -ENOBUFS;
    4872:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4876:	bd10      	pop	{r4, pc}
    4878:	2000b8b8 	.word	0x2000b8b8
    487c:	02008810 	.word	0x02008810
    4880:	02008890 	.word	0x02008890
    4884:	20008000 	.word	0x20008000

00004888 <set_event_mask>:
{
    4888:	b570      	push	{r4, r5, r6, lr}
    488a:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask *cmd = (void *)buf->data;
    488c:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    488e:	79da      	ldrb	r2, [r3, #7]
    4890:	7999      	ldrb	r1, [r3, #6]
    4892:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    4896:	7958      	ldrb	r0, [r3, #5]
    4898:	791a      	ldrb	r2, [r3, #4]
    489a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    489e:	2400      	movs	r4, #0
    48a0:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    48a4:	78d9      	ldrb	r1, [r3, #3]
    48a6:	789a      	ldrb	r2, [r3, #2]
    48a8:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    48ac:	7859      	ldrb	r1, [r3, #1]
    48ae:	781b      	ldrb	r3, [r3, #0]
    48b0:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    48b4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    48b8:	ea44 0003 	orr.w	r0, r4, r3
    48bc:	4629      	mov	r1, r5
	event_mask = sys_get_le64(cmd->events);
    48be:	4b04      	ldr	r3, [pc, #16]	; (48d0 <set_event_mask+0x48>)
    48c0:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    48c4:	2101      	movs	r1, #1
    48c6:	4630      	mov	r0, r6
    48c8:	f008 f89e 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    48cc:	7004      	strb	r4, [r0, #0]
    48ce:	bd70      	pop	{r4, r5, r6, pc}
    48d0:	2000bba8 	.word	0x2000bba8

000048d4 <hci_vs_init>:
{
    48d4:	b510      	push	{r4, lr}
    48d6:	b082      	sub	sp, #8
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_VERSION_INFO, NULL, &rsp);
    48d8:	aa01      	add	r2, sp, #4
    48da:	2100      	movs	r1, #0
    48dc:	f64f 4001 	movw	r0, #64513	; 0xfc01
    48e0:	f7ff fd58 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    48e4:	b108      	cbz	r0, 48ea <hci_vs_init+0x16>
}
    48e6:	b002      	add	sp, #8
    48e8:	bd10      	pop	{r4, pc}
	net_buf_unref(rsp);
    48ea:	ac02      	add	r4, sp, #8
    48ec:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    48f0:	f015 fd34 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_COMMANDS,
    48f4:	4622      	mov	r2, r4
    48f6:	2100      	movs	r1, #0
    48f8:	f64f 4002 	movw	r0, #64514	; 0xfc02
    48fc:	f7ff fd4a 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4900:	2800      	cmp	r0, #0
    4902:	d1f0      	bne.n	48e6 <hci_vs_init+0x12>
	rp.cmds = (void *)rsp->data;
    4904:	9b01      	ldr	r3, [sp, #4]
    4906:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_commands, rp.cmds->commands, BT_DEV_VS_CMDS_MAX);
    4908:	2202      	movs	r2, #2
    490a:	3101      	adds	r1, #1
    490c:	480d      	ldr	r0, [pc, #52]	; (4944 <hci_vs_init+0x70>)
    490e:	f7fb fcd7 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    4912:	ac02      	add	r4, sp, #8
    4914:	f854 0d04 	ldr.w	r0, [r4, #-4]!
    4918:	f015 fd20 	bl	1a35c <net_buf_unref>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_SUPPORTED_FEATURES,
    491c:	4622      	mov	r2, r4
    491e:	2100      	movs	r1, #0
    4920:	f64f 4003 	movw	r0, #64515	; 0xfc03
    4924:	f7ff fd36 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4928:	2800      	cmp	r0, #0
    492a:	d1dc      	bne.n	48e6 <hci_vs_init+0x12>
	rp.feat = (void *)rsp->data;
    492c:	9b01      	ldr	r3, [sp, #4]
    492e:	6899      	ldr	r1, [r3, #8]
	memcpy(bt_dev.vs_features, rp.feat->features, BT_DEV_VS_FEAT_MAX);
    4930:	2201      	movs	r2, #1
    4932:	4411      	add	r1, r2
    4934:	4804      	ldr	r0, [pc, #16]	; (4948 <hci_vs_init+0x74>)
    4936:	f7fb fcc3 	bl	2c0 <memcpy>
	net_buf_unref(rsp);
    493a:	9801      	ldr	r0, [sp, #4]
    493c:	f015 fd0e 	bl	1a35c <net_buf_unref>
    4940:	e7d1      	b.n	48e6 <hci_vs_init+0x12>
    4942:	bf00      	nop
    4944:	2000b917 	.word	0x2000b917
    4948:	2000b916 	.word	0x2000b916

0000494c <set_random_address>:
{
    494c:	b570      	push	{r4, r5, r6, lr}
    494e:	4605      	mov	r5, r0
	return memcmp(a, b, sizeof(*a));
    4950:	2206      	movs	r2, #6
    4952:	4914      	ldr	r1, [pc, #80]	; (49a4 <set_random_address+0x58>)
    4954:	f024 ff8c 	bl	29870 <memcmp>
	if (!bt_addr_cmp(addr, &bt_dev.random_addr.a)) {
    4958:	4604      	mov	r4, r0
    495a:	b908      	cbnz	r0, 4960 <set_random_address+0x14>
}
    495c:	4620      	mov	r0, r4
    495e:	bd70      	pop	{r4, r5, r6, pc}
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, sizeof(*addr));
    4960:	2106      	movs	r1, #6
    4962:	f242 0005 	movw	r0, #8197	; 0x2005
    4966:	f7ff fce9 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    496a:	4604      	mov	r4, r0
    496c:	b1b8      	cbz	r0, 499e <set_random_address+0x52>
	net_buf_add_mem(buf, addr, sizeof(*addr));
    496e:	2206      	movs	r2, #6
    4970:	4629      	mov	r1, r5
    4972:	3008      	adds	r0, #8
    4974:	f015 fd44 	bl	1a400 <net_buf_simple_add_mem>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_RANDOM_ADDRESS, buf, NULL);
    4978:	2200      	movs	r2, #0
    497a:	4621      	mov	r1, r4
    497c:	f242 0005 	movw	r0, #8197	; 0x2005
    4980:	f7ff fd08 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4984:	4604      	mov	r4, r0
    4986:	2800      	cmp	r0, #0
    4988:	d1e8      	bne.n	495c <set_random_address+0x10>
	memcpy(dst, src, sizeof(*dst));
    498a:	4e07      	ldr	r6, [pc, #28]	; (49a8 <set_random_address+0x5c>)
    498c:	2206      	movs	r2, #6
    498e:	4629      	mov	r1, r5
    4990:	f106 0008 	add.w	r0, r6, #8
    4994:	f7fb fc94 	bl	2c0 <memcpy>
	bt_dev.random_addr.type = BT_ADDR_LE_RANDOM;
    4998:	2301      	movs	r3, #1
    499a:	71f3      	strb	r3, [r6, #7]
	return 0;
    499c:	e7de      	b.n	495c <set_random_address+0x10>
		return -ENOBUFS;
    499e:	f06f 0468 	mvn.w	r4, #104	; 0x68
    49a2:	e7db      	b.n	495c <set_random_address+0x10>
    49a4:	2000b8c0 	.word	0x2000b8c0
    49a8:	2000b8b8 	.word	0x2000b8b8

000049ac <le_set_private_addr>:
{
    49ac:	b500      	push	{lr}
    49ae:	b083      	sub	sp, #12
	err = bt_rand(nrpa.val, sizeof(nrpa.val));
    49b0:	2106      	movs	r1, #6
    49b2:	4668      	mov	r0, sp
    49b4:	f00c f9a8 	bl	10d08 <bt_rand>
	if (err) {
    49b8:	4603      	mov	r3, r0
    49ba:	b118      	cbz	r0, 49c4 <le_set_private_addr+0x18>
}
    49bc:	4618      	mov	r0, r3
    49be:	b003      	add	sp, #12
    49c0:	f85d fb04 	ldr.w	pc, [sp], #4
	nrpa.val[5] &= 0x3f;
    49c4:	f89d 3005 	ldrb.w	r3, [sp, #5]
    49c8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
    49cc:	f88d 3005 	strb.w	r3, [sp, #5]
	return set_random_address(&nrpa);
    49d0:	4668      	mov	r0, sp
    49d2:	f7ff ffbb 	bl	494c <set_random_address>
    49d6:	4603      	mov	r3, r0
    49d8:	e7f0      	b.n	49bc <le_set_private_addr+0x10>
	...

000049dc <bt_hci_stop_scanning>:
{
    49dc:	b530      	push	{r4, r5, lr}
    49de:	b083      	sub	sp, #12
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    49e0:	f3bf 8f5b 	dmb	ish
    49e4:	4b26      	ldr	r3, [pc, #152]	; (4a80 <bt_hci_stop_scanning+0xa4>)
    49e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    49e8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    49ec:	f013 0f80 	tst.w	r3, #128	; 0x80
    49f0:	d03f      	beq.n	4a72 <bt_hci_stop_scanning+0x96>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    49f2:	2102      	movs	r1, #2
    49f4:	f242 000c 	movw	r0, #8204	; 0x200c
    49f8:	f7ff fca0 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    49fc:	4604      	mov	r4, r0
    49fe:	2800      	cmp	r0, #0
    4a00:	d03a      	beq.n	4a78 <bt_hci_stop_scanning+0x9c>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4a02:	2102      	movs	r1, #2
    4a04:	3008      	adds	r0, #8
    4a06:	f015 fcf5 	bl	1a3f4 <net_buf_simple_add>
    4a0a:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4a0c:	2202      	movs	r2, #2
    4a0e:	2100      	movs	r1, #0
    4a10:	f024 ffc2 	bl	29998 <memset>
	scan_enable->filter_dup = BT_HCI_LE_SCAN_FILTER_DUP_DISABLE;
    4a14:	2300      	movs	r3, #0
    4a16:	706b      	strb	r3, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_DISABLE;
    4a18:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    4a1a:	aa01      	add	r2, sp, #4
    4a1c:	4621      	mov	r1, r4
    4a1e:	f242 000c 	movw	r0, #8204	; 0x200c
    4a22:	f7ff fcb7 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4a26:	4604      	mov	r4, r0
    4a28:	b930      	cbnz	r0, 4a38 <bt_hci_stop_scanning+0x5c>
	err = rsp->data[0];
    4a2a:	9b01      	ldr	r3, [sp, #4]
    4a2c:	689b      	ldr	r3, [r3, #8]
    4a2e:	781c      	ldrb	r4, [r3, #0]
	if (!err) {
    4a30:	b12c      	cbz	r4, 4a3e <bt_hci_stop_scanning+0x62>
	net_buf_unref(rsp);
    4a32:	9801      	ldr	r0, [sp, #4]
    4a34:	f015 fc92 	bl	1a35c <net_buf_unref>
}
    4a38:	4620      	mov	r0, r4
    4a3a:	b003      	add	sp, #12
    4a3c:	bd30      	pop	{r4, r5, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    4a3e:	4b11      	ldr	r3, [pc, #68]	; (4a84 <bt_hci_stop_scanning+0xa8>)
    4a40:	f3bf 8f5b 	dmb	ish
    4a44:	e853 2f00 	ldrex	r2, [r3]
    4a48:	f022 0280 	bic.w	r2, r2, #128	; 0x80
    4a4c:	e843 2100 	strex	r1, r2, [r3]
    4a50:	2900      	cmp	r1, #0
    4a52:	d1f7      	bne.n	4a44 <bt_hci_stop_scanning+0x68>
    4a54:	f3bf 8f5b 	dmb	ish
    4a58:	f3bf 8f5b 	dmb	ish
    4a5c:	e853 2f00 	ldrex	r2, [r3]
    4a60:	f422 7200 	bic.w	r2, r2, #512	; 0x200
    4a64:	e843 2100 	strex	r1, r2, [r3]
    4a68:	2900      	cmp	r1, #0
    4a6a:	d1f7      	bne.n	4a5c <bt_hci_stop_scanning+0x80>
    4a6c:	f3bf 8f5b 	dmb	ish
    4a70:	e7df      	b.n	4a32 <bt_hci_stop_scanning+0x56>
		return -EALREADY;
    4a72:	f06f 0477 	mvn.w	r4, #119	; 0x77
    4a76:	e7df      	b.n	4a38 <bt_hci_stop_scanning+0x5c>
		return -ENOBUFS;
    4a78:	f06f 0468 	mvn.w	r4, #104	; 0x68
    4a7c:	e7dc      	b.n	4a38 <bt_hci_stop_scanning+0x5c>
    4a7e:	bf00      	nop
    4a80:	2000b8b8 	.word	0x2000b8b8
    4a84:	2000b928 	.word	0x2000b928

00004a88 <set_advertise_enable>:
{
    4a88:	b538      	push	{r3, r4, r5, lr}
    4a8a:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_ENABLE, 1);
    4a8c:	2101      	movs	r1, #1
    4a8e:	f242 000a 	movw	r0, #8202	; 0x200a
    4a92:	f7ff fc53 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    4a96:	b380      	cbz	r0, 4afa <set_advertise_enable+0x72>
    4a98:	4604      	mov	r4, r0
	if (enable) {
    4a9a:	b1dd      	cbz	r5, 4ad4 <set_advertise_enable+0x4c>
		net_buf_add_u8(buf, BT_HCI_LE_ADV_ENABLE);
    4a9c:	2101      	movs	r1, #1
    4a9e:	3008      	adds	r0, #8
    4aa0:	f015 fcb9 	bl	1a416 <net_buf_simple_add_u8>
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_ENABLE, buf, NULL);
    4aa4:	2200      	movs	r2, #0
    4aa6:	4621      	mov	r1, r4
    4aa8:	f242 000a 	movw	r0, #8202	; 0x200a
    4aac:	f7ff fc72 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4ab0:	4603      	mov	r3, r0
    4ab2:	b968      	cbnz	r0, 4ad0 <set_advertise_enable+0x48>
	if (enable) {
    4ab4:	b99d      	cbnz	r5, 4ade <set_advertise_enable+0x56>
    4ab6:	4a12      	ldr	r2, [pc, #72]	; (4b00 <set_advertise_enable+0x78>)
    4ab8:	f3bf 8f5b 	dmb	ish
    4abc:	e852 1f00 	ldrex	r1, [r2]
    4ac0:	f021 0120 	bic.w	r1, r1, #32
    4ac4:	e842 1000 	strex	r0, r1, [r2]
    4ac8:	2800      	cmp	r0, #0
    4aca:	d1f7      	bne.n	4abc <set_advertise_enable+0x34>
    4acc:	f3bf 8f5b 	dmb	ish
}
    4ad0:	4618      	mov	r0, r3
    4ad2:	bd38      	pop	{r3, r4, r5, pc}
		net_buf_add_u8(buf, BT_HCI_LE_ADV_DISABLE);
    4ad4:	2100      	movs	r1, #0
    4ad6:	3008      	adds	r0, #8
    4ad8:	f015 fc9d 	bl	1a416 <net_buf_simple_add_u8>
    4adc:	e7e2      	b.n	4aa4 <set_advertise_enable+0x1c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4ade:	4a08      	ldr	r2, [pc, #32]	; (4b00 <set_advertise_enable+0x78>)
    4ae0:	f3bf 8f5b 	dmb	ish
    4ae4:	e852 1f00 	ldrex	r1, [r2]
    4ae8:	f041 0120 	orr.w	r1, r1, #32
    4aec:	e842 1000 	strex	r0, r1, [r2]
    4af0:	2800      	cmp	r0, #0
    4af2:	d1f7      	bne.n	4ae4 <set_advertise_enable+0x5c>
    4af4:	f3bf 8f5b 	dmb	ish
    4af8:	e7ea      	b.n	4ad0 <set_advertise_enable+0x48>
		return -ENOBUFS;
    4afa:	f06f 0368 	mvn.w	r3, #104	; 0x68
    4afe:	e7e7      	b.n	4ad0 <set_advertise_enable+0x48>
    4b00:	2000b928 	.word	0x2000b928

00004b04 <hci_le_create_conn>:
{
    4b04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    4b06:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CREATE_CONN, sizeof(*cp));
    4b08:	2119      	movs	r1, #25
    4b0a:	f242 000d 	movw	r0, #8205	; 0x200d
    4b0e:	f7ff fc15 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    4b12:	b378      	cbz	r0, 4b74 <hci_le_create_conn+0x70>
    4b14:	4607      	mov	r7, r0
	cp = net_buf_add(buf, sizeof(*cp));
    4b16:	2119      	movs	r1, #25
    4b18:	3008      	adds	r0, #8
    4b1a:	f015 fc6b 	bl	1a3f4 <net_buf_simple_add>
    4b1e:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    4b20:	2219      	movs	r2, #25
    4b22:	2100      	movs	r1, #0
    4b24:	f024 ff38 	bl	29998 <memset>
	cp->scan_interval = sys_cpu_to_le16(BT_GAP_SCAN_FAST_INTERVAL);
    4b28:	2600      	movs	r6, #0
    4b2a:	2360      	movs	r3, #96	; 0x60
    4b2c:	7023      	strb	r3, [r4, #0]
    4b2e:	7066      	strb	r6, [r4, #1]
	cp->scan_window = cp->scan_interval;
    4b30:	70a3      	strb	r3, [r4, #2]
    4b32:	70e6      	strb	r6, [r4, #3]
}

static inline void bt_addr_le_copy(bt_addr_le_t *dst, const bt_addr_le_t *src)
{
	memcpy(dst, src, sizeof(*dst));
    4b34:	2207      	movs	r2, #7
    4b36:	f105 0156 	add.w	r1, r5, #86	; 0x56
    4b3a:	1d60      	adds	r0, r4, #5
    4b3c:	f7fb fbc0 	bl	2c0 <memcpy>
	cp->own_addr_type = conn->le.init_addr.type;
    4b40:	f895 304f 	ldrb.w	r3, [r5, #79]	; 0x4f
    4b44:	7323      	strb	r3, [r4, #12]
	cp->conn_interval_min = sys_cpu_to_le16(conn->le.interval_min);
    4b46:	f8b5 3060 	ldrh.w	r3, [r5, #96]	; 0x60
    4b4a:	f8a4 300d 	strh.w	r3, [r4, #13]
	cp->conn_interval_max = sys_cpu_to_le16(conn->le.interval_max);
    4b4e:	f8b5 3062 	ldrh.w	r3, [r5, #98]	; 0x62
    4b52:	f8a4 300f 	strh.w	r3, [r4, #15]
	cp->conn_latency = sys_cpu_to_le16(conn->le.latency);
    4b56:	f8b5 3064 	ldrh.w	r3, [r5, #100]	; 0x64
    4b5a:	f8a4 3011 	strh.w	r3, [r4, #17]
	cp->supervision_timeout = sys_cpu_to_le16(conn->le.timeout);
    4b5e:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    4b62:	f8a4 3013 	strh.w	r3, [r4, #19]
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_CREATE_CONN, buf, NULL);
    4b66:	4632      	mov	r2, r6
    4b68:	4639      	mov	r1, r7
    4b6a:	f242 000d 	movw	r0, #8205	; 0x200d
    4b6e:	f7ff fc11 	bl	4394 <bt_hci_cmd_send_sync>
    4b72:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    4b74:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4b78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00004b7a <set_ad>:

static int set_ad(u16_t hci_op, const struct bt_data *ad, size_t ad_len)
{
    4b7a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    4b7e:	4682      	mov	sl, r0
    4b80:	460f      	mov	r7, r1
    4b82:	4690      	mov	r8, r2
	struct bt_hci_cp_le_set_adv_data *set_data;
	struct net_buf *buf;
	int i;

	buf = bt_hci_cmd_create(hci_op, sizeof(*set_data));
    4b84:	2120      	movs	r1, #32
    4b86:	f7ff fbd9 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    4b8a:	2800      	cmp	r0, #0
    4b8c:	d03c      	beq.n	4c08 <set_ad+0x8e>
    4b8e:	4681      	mov	r9, r0
		return -ENOBUFS;
	}

	set_data = net_buf_add(buf, sizeof(*set_data));
    4b90:	2120      	movs	r1, #32
    4b92:	3008      	adds	r0, #8
    4b94:	f015 fc2e 	bl	1a3f4 <net_buf_simple_add>
    4b98:	4604      	mov	r4, r0

	memset(set_data, 0, sizeof(*set_data));
    4b9a:	2220      	movs	r2, #32
    4b9c:	2100      	movs	r1, #0
    4b9e:	f024 fefb 	bl	29998 <memset>

	for (i = 0; i < ad_len; i++) {
    4ba2:	2600      	movs	r6, #0
    4ba4:	4546      	cmp	r6, r8
    4ba6:	d228      	bcs.n	4bfa <set_ad+0x80>
		/* Check if ad fit in the remaining buffer */
		if (set_data->len + ad[i].data_len + 2 > 31) {
    4ba8:	7822      	ldrb	r2, [r4, #0]
    4baa:	eb07 05c6 	add.w	r5, r7, r6, lsl #3
    4bae:	786b      	ldrb	r3, [r5, #1]
    4bb0:	4413      	add	r3, r2
    4bb2:	3302      	adds	r3, #2
    4bb4:	2b1f      	cmp	r3, #31
    4bb6:	dc19      	bgt.n	4bec <set_ad+0x72>
			net_buf_unref(buf);
			return -EINVAL;
		}

		set_data->data[set_data->len++] = ad[i].data_len + 1;
    4bb8:	1c53      	adds	r3, r2, #1
    4bba:	b2db      	uxtb	r3, r3
    4bbc:	7023      	strb	r3, [r4, #0]
    4bbe:	7869      	ldrb	r1, [r5, #1]
    4bc0:	3101      	adds	r1, #1
    4bc2:	4422      	add	r2, r4
    4bc4:	7051      	strb	r1, [r2, #1]
		set_data->data[set_data->len++] = ad[i].type;
    4bc6:	1c58      	adds	r0, r3, #1
    4bc8:	b2c0      	uxtb	r0, r0
    4bca:	7020      	strb	r0, [r4, #0]
    4bcc:	f817 2036 	ldrb.w	r2, [r7, r6, lsl #3]
    4bd0:	4423      	add	r3, r4
    4bd2:	705a      	strb	r2, [r3, #1]

		memcpy(&set_data->data[set_data->len], ad[i].data,
    4bd4:	4420      	add	r0, r4
    4bd6:	786a      	ldrb	r2, [r5, #1]
    4bd8:	6869      	ldr	r1, [r5, #4]
    4bda:	3001      	adds	r0, #1
    4bdc:	f7fb fb70 	bl	2c0 <memcpy>
		       ad[i].data_len);
		set_data->len += ad[i].data_len;
    4be0:	786b      	ldrb	r3, [r5, #1]
    4be2:	7822      	ldrb	r2, [r4, #0]
    4be4:	4413      	add	r3, r2
    4be6:	7023      	strb	r3, [r4, #0]
	for (i = 0; i < ad_len; i++) {
    4be8:	3601      	adds	r6, #1
    4bea:	e7db      	b.n	4ba4 <set_ad+0x2a>
			net_buf_unref(buf);
    4bec:	4648      	mov	r0, r9
    4bee:	f015 fbb5 	bl	1a35c <net_buf_unref>
			return -EINVAL;
    4bf2:	f06f 0015 	mvn.w	r0, #21
    4bf6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	}

	return bt_hci_cmd_send_sync(hci_op, buf, NULL);
    4bfa:	2200      	movs	r2, #0
    4bfc:	4649      	mov	r1, r9
    4bfe:	4650      	mov	r0, sl
    4c00:	f7ff fbc8 	bl	4394 <bt_hci_cmd_send_sync>
    4c04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOBUFS;
    4c08:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    4c0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00004c10 <bt_le_conn_params_valid>:
	if (param->interval_min > param->interval_max ||
    4c10:	8802      	ldrh	r2, [r0, #0]
    4c12:	8843      	ldrh	r3, [r0, #2]
    4c14:	429a      	cmp	r2, r3
    4c16:	d81a      	bhi.n	4c4e <bt_le_conn_params_valid+0x3e>
    4c18:	2a05      	cmp	r2, #5
    4c1a:	d91a      	bls.n	4c52 <bt_le_conn_params_valid+0x42>
	    param->interval_min < 6 || param->interval_max > 3200) {
    4c1c:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
    4c20:	d819      	bhi.n	4c56 <bt_le_conn_params_valid+0x46>
	if (param->latency > 499) {
    4c22:	8881      	ldrh	r1, [r0, #4]
    4c24:	f5b1 7ffa 	cmp.w	r1, #500	; 0x1f4
    4c28:	d217      	bcs.n	4c5a <bt_le_conn_params_valid+0x4a>
{
    4c2a:	b410      	push	{r4}
	if (param->timeout < 10 || param->timeout > 3200 ||
    4c2c:	88c0      	ldrh	r0, [r0, #6]
    4c2e:	f1a0 020a 	sub.w	r2, r0, #10
    4c32:	b292      	uxth	r2, r2
    4c34:	f640 4476 	movw	r4, #3190	; 0xc76
    4c38:	42a2      	cmp	r2, r4
    4c3a:	d810      	bhi.n	4c5e <bt_le_conn_params_valid+0x4e>
	     ((1 + param->latency) * param->interval_max))) {
    4c3c:	fb01 3303 	mla	r3, r1, r3, r3
	if (param->timeout < 10 || param->timeout > 3200 ||
    4c40:	ebb3 0f80 	cmp.w	r3, r0, lsl #2
    4c44:	da01      	bge.n	4c4a <bt_le_conn_params_valid+0x3a>
	return true;
    4c46:	2001      	movs	r0, #1
    4c48:	e00a      	b.n	4c60 <bt_le_conn_params_valid+0x50>
		return false;
    4c4a:	2000      	movs	r0, #0
    4c4c:	e008      	b.n	4c60 <bt_le_conn_params_valid+0x50>
		return false;
    4c4e:	2000      	movs	r0, #0
    4c50:	4770      	bx	lr
    4c52:	2000      	movs	r0, #0
    4c54:	4770      	bx	lr
    4c56:	2000      	movs	r0, #0
    4c58:	4770      	bx	lr
		return false;
    4c5a:	2000      	movs	r0, #0
    4c5c:	4770      	bx	lr
		return false;
    4c5e:	2000      	movs	r0, #0
}
    4c60:	bc10      	pop	{r4}
    4c62:	4770      	bx	lr

00004c64 <bt_addr_le_create_static>:
{
    4c64:	b510      	push	{r4, lr}
    4c66:	4604      	mov	r4, r0
	addr->type = BT_ADDR_LE_RANDOM;
    4c68:	2301      	movs	r3, #1
    4c6a:	f800 3b01 	strb.w	r3, [r0], #1
	return bt_rand(addr->a.val, 6);
    4c6e:	2106      	movs	r1, #6
    4c70:	f00c f84a 	bl	10d08 <bt_rand>
	if (err) {
    4c74:	4602      	mov	r2, r0
    4c76:	b918      	cbnz	r0, 4c80 <bt_addr_le_create_static+0x1c>
	BT_ADDR_SET_STATIC(&addr->a);
    4c78:	79a3      	ldrb	r3, [r4, #6]
    4c7a:	f063 033f 	orn	r3, r3, #63	; 0x3f
    4c7e:	71a3      	strb	r3, [r4, #6]
}
    4c80:	4610      	mov	r0, r2
    4c82:	bd10      	pop	{r4, pc}

00004c84 <set_static_addr>:
{
    4c84:	b510      	push	{r4, lr}
    4c86:	b082      	sub	sp, #8
	if (bt_storage) {
    4c88:	4b2e      	ldr	r3, [pc, #184]	; (4d44 <set_static_addr+0xc0>)
    4c8a:	681b      	ldr	r3, [r3, #0]
    4c8c:	b13b      	cbz	r3, 4c9e <set_static_addr+0x1a>
		ret = bt_storage->read(NULL, BT_STORAGE_ID_ADDR,
    4c8e:	681c      	ldr	r4, [r3, #0]
    4c90:	2307      	movs	r3, #7
    4c92:	4a2d      	ldr	r2, [pc, #180]	; (4d48 <set_static_addr+0xc4>)
    4c94:	2100      	movs	r1, #0
    4c96:	4608      	mov	r0, r1
    4c98:	47a0      	blx	r4
		if (ret == sizeof(bt_dev.id_addr)) {
    4c9a:	2807      	cmp	r0, #7
    4c9c:	d02c      	beq.n	4cf8 <set_static_addr+0x74>
	if (bt_dev.vs_commands[1] & BIT(0)) {
    4c9e:	4b2a      	ldr	r3, [pc, #168]	; (4d48 <set_static_addr+0xc4>)
    4ca0:	f893 3060 	ldrb.w	r3, [r3, #96]	; 0x60
    4ca4:	f013 0f01 	tst.w	r3, #1
    4ca8:	d018      	beq.n	4cdc <set_static_addr+0x58>
		err = bt_hci_cmd_send_sync(BT_HCI_OP_VS_READ_STATIC_ADDRS,
    4caa:	aa01      	add	r2, sp, #4
    4cac:	2100      	movs	r1, #0
    4cae:	f64f 4009 	movw	r0, #64521	; 0xfc09
    4cb2:	f7ff fb6f 	bl	4394 <bt_hci_cmd_send_sync>
		if (err) {
    4cb6:	b988      	cbnz	r0, 4cdc <set_static_addr+0x58>
		rp = (void *)rsp->data;
    4cb8:	9801      	ldr	r0, [sp, #4]
    4cba:	6881      	ldr	r1, [r0, #8]
		if (rp->num_addrs) {
    4cbc:	784b      	ldrb	r3, [r1, #1]
    4cbe:	b15b      	cbz	r3, 4cd8 <set_static_addr+0x54>
			bt_dev.id_addr.type = BT_ADDR_LE_RANDOM;
    4cc0:	4821      	ldr	r0, [pc, #132]	; (4d48 <set_static_addr+0xc4>)
    4cc2:	2301      	movs	r3, #1
    4cc4:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(dst, src, sizeof(*dst));
    4cc8:	2206      	movs	r2, #6
    4cca:	3102      	adds	r1, #2
    4ccc:	f7fb faf8 	bl	2c0 <memcpy>
			net_buf_unref(rsp);
    4cd0:	9801      	ldr	r0, [sp, #4]
    4cd2:	f015 fb43 	bl	1a35c <net_buf_unref>
    4cd6:	e00f      	b.n	4cf8 <set_static_addr+0x74>
		net_buf_unref(rsp);
    4cd8:	f015 fb40 	bl	1a35c <net_buf_unref>
	err = bt_addr_le_create_static(&bt_dev.id_addr);
    4cdc:	481a      	ldr	r0, [pc, #104]	; (4d48 <set_static_addr+0xc4>)
    4cde:	f7ff ffc1 	bl	4c64 <bt_addr_le_create_static>
	if (err) {
    4ce2:	4603      	mov	r3, r0
    4ce4:	b9b8      	cbnz	r0, 4d16 <set_static_addr+0x92>
	if (bt_storage) {
    4ce6:	4b17      	ldr	r3, [pc, #92]	; (4d44 <set_static_addr+0xc0>)
    4ce8:	681b      	ldr	r3, [r3, #0]
    4cea:	b12b      	cbz	r3, 4cf8 <set_static_addr+0x74>
		ret = bt_storage->write(NULL, BT_STORAGE_ID_ADDR,
    4cec:	685c      	ldr	r4, [r3, #4]
    4cee:	2307      	movs	r3, #7
    4cf0:	4a15      	ldr	r2, [pc, #84]	; (4d48 <set_static_addr+0xc4>)
    4cf2:	2100      	movs	r1, #0
    4cf4:	4608      	mov	r0, r1
    4cf6:	47a0      	blx	r4
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4cf8:	4b13      	ldr	r3, [pc, #76]	; (4d48 <set_static_addr+0xc4>)
    4cfa:	781b      	ldrb	r3, [r3, #0]
    4cfc:	2b01      	cmp	r3, #1
    4cfe:	d11b      	bne.n	4d38 <set_static_addr+0xb4>
	    (bt_dev.id_addr.a.val[5] & 0xc0) != 0xc0) {
    4d00:	4b11      	ldr	r3, [pc, #68]	; (4d48 <set_static_addr+0xc4>)
    4d02:	799b      	ldrb	r3, [r3, #6]
	if (bt_dev.id_addr.type != BT_ADDR_LE_RANDOM ||
    4d04:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    4d08:	2bc0      	cmp	r3, #192	; 0xc0
    4d0a:	d118      	bne.n	4d3e <set_static_addr+0xba>
	err = set_random_address(&bt_dev.id_addr.a);
    4d0c:	480f      	ldr	r0, [pc, #60]	; (4d4c <set_static_addr+0xc8>)
    4d0e:	f7ff fe1d 	bl	494c <set_random_address>
	if (err) {
    4d12:	4603      	mov	r3, r0
    4d14:	b110      	cbz	r0, 4d1c <set_static_addr+0x98>
}
    4d16:	4618      	mov	r0, r3
    4d18:	b002      	add	sp, #8
    4d1a:	bd10      	pop	{r4, pc}
    4d1c:	4a0c      	ldr	r2, [pc, #48]	; (4d50 <set_static_addr+0xcc>)
    4d1e:	f3bf 8f5b 	dmb	ish
    4d22:	e852 1f00 	ldrex	r1, [r2]
    4d26:	f041 0104 	orr.w	r1, r1, #4
    4d2a:	e842 1000 	strex	r0, r1, [r2]
    4d2e:	2800      	cmp	r0, #0
    4d30:	d1f7      	bne.n	4d22 <set_static_addr+0x9e>
    4d32:	f3bf 8f5b 	dmb	ish
	return 0;
    4d36:	e7ee      	b.n	4d16 <set_static_addr+0x92>
		return -EINVAL;
    4d38:	f06f 0315 	mvn.w	r3, #21
    4d3c:	e7eb      	b.n	4d16 <set_static_addr+0x92>
    4d3e:	f06f 0315 	mvn.w	r3, #21
    4d42:	e7e8      	b.n	4d16 <set_static_addr+0x92>
    4d44:	20002a24 	.word	0x20002a24
    4d48:	2000b8b8 	.word	0x2000b8b8
    4d4c:	2000b8b9 	.word	0x2000b8b9
    4d50:	2000b928 	.word	0x2000b928

00004d54 <hci_init>:
{
    4d54:	b510      	push	{r4, lr}
    4d56:	b084      	sub	sp, #16
	err = common_init();
    4d58:	f7ff fb5c 	bl	4414 <common_init>
	if (err) {
    4d5c:	4604      	mov	r4, r0
    4d5e:	b110      	cbz	r0, 4d66 <hci_init+0x12>
}
    4d60:	4620      	mov	r0, r4
    4d62:	b004      	add	sp, #16
    4d64:	bd10      	pop	{r4, pc}
	err = le_init();
    4d66:	f7ff fc9b 	bl	46a0 <le_init>
	if (err) {
    4d6a:	4604      	mov	r4, r0
    4d6c:	2800      	cmp	r0, #0
    4d6e:	d1f7      	bne.n	4d60 <hci_init+0xc>
	if (BT_FEAT_BREDR(bt_dev.features)) {
    4d70:	4b17      	ldr	r3, [pc, #92]	; (4dd0 <hci_init+0x7c>)
    4d72:	7e9b      	ldrb	r3, [r3, #26]
    4d74:	f013 0f20 	tst.w	r3, #32
    4d78:	d104      	bne.n	4d84 <hci_init+0x30>
		err = br_init();
    4d7a:	f7ff fd2d 	bl	47d8 <br_init>
		if (err) {
    4d7e:	4604      	mov	r4, r0
    4d80:	2800      	cmp	r0, #0
    4d82:	d1ed      	bne.n	4d60 <hci_init+0xc>
	err = set_event_mask();
    4d84:	f7ff fd44 	bl	4810 <set_event_mask>
	if (err) {
    4d88:	4604      	mov	r4, r0
    4d8a:	2800      	cmp	r0, #0
    4d8c:	d1e8      	bne.n	4d60 <hci_init+0xc>
	hci_vs_init();
    4d8e:	f7ff fda1 	bl	48d4 <hci_vs_init>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4d92:	2300      	movs	r3, #0
    4d94:	9300      	str	r3, [sp, #0]
    4d96:	f8cd 3003 	str.w	r3, [sp, #3]
	return memcmp(a, b, sizeof(*a));
    4d9a:	2207      	movs	r2, #7
    4d9c:	4669      	mov	r1, sp
    4d9e:	480c      	ldr	r0, [pc, #48]	; (4dd0 <hci_init+0x7c>)
    4da0:	f024 fd66 	bl	29870 <memcmp>
    4da4:	b178      	cbz	r0, 4dc6 <hci_init+0x72>
	    !bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_NONE)) {
    4da6:	4b0b      	ldr	r3, [pc, #44]	; (4dd4 <hci_init+0x80>)
    4da8:	e893 0003 	ldmia.w	r3, {r0, r1}
    4dac:	9002      	str	r0, [sp, #8]
    4dae:	f8ad 100c 	strh.w	r1, [sp, #12]
    4db2:	0c09      	lsrs	r1, r1, #16
    4db4:	f88d 100e 	strb.w	r1, [sp, #14]
    4db8:	2207      	movs	r2, #7
    4dba:	a902      	add	r1, sp, #8
    4dbc:	4804      	ldr	r0, [pc, #16]	; (4dd0 <hci_init+0x7c>)
    4dbe:	f024 fd57 	bl	29870 <memcmp>
	if (!bt_addr_le_cmp(&bt_dev.id_addr, BT_ADDR_LE_ANY) ||
    4dc2:	2800      	cmp	r0, #0
    4dc4:	d1cc      	bne.n	4d60 <hci_init+0xc>
		err = set_static_addr();
    4dc6:	f7ff ff5d 	bl	4c84 <set_static_addr>
    4dca:	4604      	mov	r4, r0
    4dcc:	e7c8      	b.n	4d60 <hci_init+0xc>
    4dce:	bf00      	nop
    4dd0:	2000b8b8 	.word	0x2000b8b8
    4dd4:	0002a638 	.word	0x0002a638

00004dd8 <hci_init>:
		return HCI_CLASS_ACL_DATA;
	}
}

void hci_init(struct k_poll_signal *signal_host_buf)
{
    4dd8:	b508      	push	{r3, lr}
#if defined(CONFIG_BT_HCI_ACL_FLOW_CONTROL)
	hbuf_signal = signal_host_buf;
#endif
	reset(NULL, NULL);
    4dda:	2100      	movs	r1, #0
    4ddc:	4608      	mov	r0, r1
    4dde:	f007 ffb1 	bl	cd44 <reset>
    4de2:	bd08      	pop	{r3, pc}

00004de4 <bt_send>:
{
    4de4:	b508      	push	{r3, lr}
	return bt_dev.drv->send(buf);
    4de6:	4b03      	ldr	r3, [pc, #12]	; (4df4 <bt_send+0x10>)
    4de8:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    4dec:	68db      	ldr	r3, [r3, #12]
    4dee:	4798      	blx	r3
}
    4df0:	bd08      	pop	{r3, pc}
    4df2:	bf00      	nop
    4df4:	2000b8b8 	.word	0x2000b8b8

00004df8 <bt_hci_cmd_send>:
{
    4df8:	b538      	push	{r3, r4, r5, lr}
    4dfa:	4605      	mov	r5, r0
	if (!buf) {
    4dfc:	460c      	mov	r4, r1
    4dfe:	b151      	cbz	r1, 4e16 <bt_hci_cmd_send+0x1e>
	if (opcode == BT_HCI_OP_HOST_NUM_COMPLETED_PACKETS) {
    4e00:	f640 4335 	movw	r3, #3125	; 0xc35
    4e04:	429d      	cmp	r5, r3
    4e06:	d00e      	beq.n	4e26 <bt_hci_cmd_send+0x2e>
	net_buf_put(&bt_dev.cmd_tx_queue, buf);
    4e08:	4621      	mov	r1, r4
    4e0a:	480c      	ldr	r0, [pc, #48]	; (4e3c <bt_hci_cmd_send+0x44>)
    4e0c:	f015 fa98 	bl	1a340 <net_buf_put>
	return 0;
    4e10:	2500      	movs	r5, #0
}
    4e12:	4628      	mov	r0, r5
    4e14:	bd38      	pop	{r3, r4, r5, pc}
		buf = bt_hci_cmd_create(opcode, 0);
    4e16:	f7ff fa91 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    4e1a:	4604      	mov	r4, r0
    4e1c:	2800      	cmp	r0, #0
    4e1e:	d1ef      	bne.n	4e00 <bt_hci_cmd_send+0x8>
			return -ENOBUFS;
    4e20:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4e24:	e7f5      	b.n	4e12 <bt_hci_cmd_send+0x1a>
		err = bt_send(buf);
    4e26:	4620      	mov	r0, r4
    4e28:	f7ff ffdc 	bl	4de4 <bt_send>
		if (err) {
    4e2c:	4605      	mov	r5, r0
    4e2e:	2800      	cmp	r0, #0
    4e30:	d0ef      	beq.n	4e12 <bt_hci_cmd_send+0x1a>
			net_buf_unref(buf);
    4e32:	4620      	mov	r0, r4
    4e34:	f015 fa92 	bl	1a35c <net_buf_unref>
    4e38:	e7eb      	b.n	4e12 <bt_hci_cmd_send+0x1a>
    4e3a:	bf00      	nop
    4e3c:	2000b98c 	.word	0x2000b98c

00004e40 <start_le_scan>:
{
    4e40:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    4e44:	b083      	sub	sp, #12
    4e46:	4606      	mov	r6, r0
    4e48:	4689      	mov	r9, r1
    4e4a:	4615      	mov	r5, r2
    4e4c:	4698      	mov	r8, r3
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_PARAM,
    4e4e:	2107      	movs	r1, #7
    4e50:	f242 000b 	movw	r0, #8203	; 0x200b
    4e54:	f7ff fa72 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    4e58:	2800      	cmp	r0, #0
    4e5a:	d072      	beq.n	4f42 <start_le_scan+0x102>
    4e5c:	4607      	mov	r7, r0
	set_param = net_buf_add(buf, sizeof(*set_param));
    4e5e:	2107      	movs	r1, #7
    4e60:	3008      	adds	r0, #8
    4e62:	f015 fac7 	bl	1a3f4 <net_buf_simple_add>
    4e66:	4604      	mov	r4, r0
	memset(set_param, 0, sizeof(*set_param));
    4e68:	2207      	movs	r2, #7
    4e6a:	2100      	movs	r1, #0
    4e6c:	f024 fd94 	bl	29998 <memset>
	set_param->scan_type = scan_type;
    4e70:	7026      	strb	r6, [r4, #0]
	set_param->interval = sys_cpu_to_le16(interval);
    4e72:	f8a4 9001 	strh.w	r9, [r4, #1]
	set_param->window = sys_cpu_to_le16(window);
    4e76:	f8a4 5003 	strh.w	r5, [r4, #3]
	set_param->filter_policy = 0x00;
    4e7a:	2300      	movs	r3, #0
    4e7c:	71a3      	strb	r3, [r4, #6]
		set_param->addr_type =  bt_dev.id_addr.type;
    4e7e:	4b34      	ldr	r3, [pc, #208]	; (4f50 <start_le_scan+0x110>)
    4e80:	781b      	ldrb	r3, [r3, #0]
    4e82:	7163      	strb	r3, [r4, #5]
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4e84:	2e01      	cmp	r6, #1
    4e86:	d02c      	beq.n	4ee2 <start_le_scan+0xa2>
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_SCAN_PARAM, buf);
    4e88:	4639      	mov	r1, r7
    4e8a:	f242 000b 	movw	r0, #8203	; 0x200b
    4e8e:	f7ff ffb3 	bl	4df8 <bt_hci_cmd_send>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_SCAN_ENABLE,
    4e92:	2102      	movs	r1, #2
    4e94:	f242 000c 	movw	r0, #8204	; 0x200c
    4e98:	f7ff fa50 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    4e9c:	4604      	mov	r4, r0
    4e9e:	2800      	cmp	r0, #0
    4ea0:	d052      	beq.n	4f48 <start_le_scan+0x108>
	scan_enable = net_buf_add(buf, sizeof(*scan_enable));
    4ea2:	2102      	movs	r1, #2
    4ea4:	3008      	adds	r0, #8
    4ea6:	f015 faa5 	bl	1a3f4 <net_buf_simple_add>
    4eaa:	4605      	mov	r5, r0
	memset(scan_enable, 0, sizeof(*scan_enable));
    4eac:	2202      	movs	r2, #2
    4eae:	2100      	movs	r1, #0
    4eb0:	f024 fd72 	bl	29998 <memset>
	scan_enable->filter_dup = filter_dup;
    4eb4:	f885 8001 	strb.w	r8, [r5, #1]
	scan_enable->enable = BT_HCI_LE_SCAN_ENABLE;
    4eb8:	2301      	movs	r3, #1
    4eba:	702b      	strb	r3, [r5, #0]
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_SCAN_ENABLE, buf, &rsp);
    4ebc:	aa01      	add	r2, sp, #4
    4ebe:	4621      	mov	r1, r4
    4ec0:	f242 000c 	movw	r0, #8204	; 0x200c
    4ec4:	f7ff fa66 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    4ec8:	4605      	mov	r5, r0
    4eca:	b930      	cbnz	r0, 4eda <start_le_scan+0x9a>
	err = rsp->data[0];
    4ecc:	9b01      	ldr	r3, [sp, #4]
    4ece:	689b      	ldr	r3, [r3, #8]
    4ed0:	781d      	ldrb	r5, [r3, #0]
	if (!err) {
    4ed2:	b1d5      	cbz	r5, 4f0a <start_le_scan+0xca>
	net_buf_unref(rsp);
    4ed4:	9801      	ldr	r0, [sp, #4]
    4ed6:	f015 fa41 	bl	1a35c <net_buf_unref>
}
    4eda:	4628      	mov	r0, r5
    4edc:	b003      	add	sp, #12
    4ede:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4ee2:	f3bf 8f5b 	dmb	ish
    4ee6:	4b1a      	ldr	r3, [pc, #104]	; (4f50 <start_le_scan+0x110>)
    4ee8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4eea:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE &&
    4eee:	f013 0f20 	tst.w	r3, #32
    4ef2:	d1c9      	bne.n	4e88 <start_le_scan+0x48>
			err = le_set_private_addr();
    4ef4:	f7ff fd5a 	bl	49ac <le_set_private_addr>
			if (err) {
    4ef8:	4605      	mov	r5, r0
    4efa:	b910      	cbnz	r0, 4f02 <start_le_scan+0xc2>
			set_param->addr_type = BT_ADDR_LE_RANDOM;
    4efc:	2301      	movs	r3, #1
    4efe:	7163      	strb	r3, [r4, #5]
    4f00:	e7c2      	b.n	4e88 <start_le_scan+0x48>
				net_buf_unref(buf);
    4f02:	4638      	mov	r0, r7
    4f04:	f015 fa2a 	bl	1a35c <net_buf_unref>
				return err;
    4f08:	e7e7      	b.n	4eda <start_le_scan+0x9a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4f0a:	4b12      	ldr	r3, [pc, #72]	; (4f54 <start_le_scan+0x114>)
    4f0c:	f3bf 8f5b 	dmb	ish
    4f10:	e853 2f00 	ldrex	r2, [r3]
    4f14:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    4f18:	e843 2100 	strex	r1, r2, [r3]
    4f1c:	2900      	cmp	r1, #0
    4f1e:	d1f7      	bne.n	4f10 <start_le_scan+0xd0>
    4f20:	f3bf 8f5b 	dmb	ish
		if (scan_type == BT_HCI_LE_SCAN_ACTIVE) {
    4f24:	2e01      	cmp	r6, #1
    4f26:	d1d5      	bne.n	4ed4 <start_le_scan+0x94>
    4f28:	f3bf 8f5b 	dmb	ish
    4f2c:	e853 2f00 	ldrex	r2, [r3]
    4f30:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    4f34:	e843 2100 	strex	r1, r2, [r3]
    4f38:	2900      	cmp	r1, #0
    4f3a:	d1f7      	bne.n	4f2c <start_le_scan+0xec>
    4f3c:	f3bf 8f5b 	dmb	ish
    4f40:	e7c8      	b.n	4ed4 <start_le_scan+0x94>
		return -ENOBUFS;
    4f42:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4f46:	e7c8      	b.n	4eda <start_le_scan+0x9a>
		return -ENOBUFS;
    4f48:	f06f 0568 	mvn.w	r5, #104	; 0x68
    4f4c:	e7c5      	b.n	4eda <start_le_scan+0x9a>
    4f4e:	bf00      	nop
    4f50:	2000b8b8 	.word	0x2000b8b8
    4f54:	2000b928 	.word	0x2000b928

00004f58 <bt_le_scan_update>:
{
    4f58:	b538      	push	{r3, r4, r5, lr}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f5a:	f3bf 8f5b 	dmb	ish
    4f5e:	4b17      	ldr	r3, [pc, #92]	; (4fbc <bt_le_scan_update+0x64>)
    4f60:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    4f62:	f3bf 8f5b 	dmb	ish
 */
static inline int atomic_test_bit(const atomic_t *target, int bit)
{
	atomic_val_t val = atomic_get(ATOMIC_ELEM(target, bit));

	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    4f66:	f3c4 2400 	ubfx	r4, r4, #8, #1
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    4f6a:	b114      	cbz	r4, 4f72 <bt_le_scan_update+0x1a>
		return 0;
    4f6c:	2300      	movs	r3, #0
}
    4f6e:	4618      	mov	r0, r3
    4f70:	bd38      	pop	{r3, r4, r5, pc}
    4f72:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    4f74:	f3bf 8f5b 	dmb	ish
    4f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    4f7a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_SCANNING)) {
    4f7e:	f013 0f80 	tst.w	r3, #128	; 0x80
    4f82:	d004      	beq.n	4f8e <bt_le_scan_update+0x36>
		err = bt_hci_stop_scanning();
    4f84:	f7ff fd2a 	bl	49dc <bt_hci_stop_scanning>
		if (err) {
    4f88:	4603      	mov	r3, r0
    4f8a:	2800      	cmp	r0, #0
    4f8c:	d1ef      	bne.n	4f6e <bt_le_scan_update+0x16>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT_SCAN);
    4f8e:	2101      	movs	r1, #1
    4f90:	2000      	movs	r0, #0
    4f92:	f001 fcd9 	bl	6948 <bt_conn_lookup_state_le>
		if (!conn) {
    4f96:	b170      	cbz	r0, 4fb6 <bt_le_scan_update+0x5e>
		bt_conn_unref(conn);
    4f98:	f001 fd08 	bl	69ac <bt_conn_unref>
		if (fast_scan) {
    4f9c:	b13d      	cbz	r5, 4fae <bt_le_scan_update+0x56>
			window = BT_GAP_SCAN_FAST_WINDOW;
    4f9e:	2230      	movs	r2, #48	; 0x30
			interval = BT_GAP_SCAN_FAST_INTERVAL;
    4fa0:	2160      	movs	r1, #96	; 0x60
		return start_le_scan(BT_HCI_LE_SCAN_PASSIVE, interval, window,
    4fa2:	2301      	movs	r3, #1
    4fa4:	2000      	movs	r0, #0
    4fa6:	f7ff ff4b 	bl	4e40 <start_le_scan>
    4faa:	4603      	mov	r3, r0
    4fac:	e7df      	b.n	4f6e <bt_le_scan_update+0x16>
			window = BT_GAP_SCAN_SLOW_WINDOW_1;
    4fae:	2212      	movs	r2, #18
			interval = BT_GAP_SCAN_SLOW_INTERVAL_1;
    4fb0:	f44f 6100 	mov.w	r1, #2048	; 0x800
    4fb4:	e7f5      	b.n	4fa2 <bt_le_scan_update+0x4a>
			return 0;
    4fb6:	4623      	mov	r3, r4
    4fb8:	e7d9      	b.n	4f6e <bt_le_scan_update+0x16>
    4fba:	bf00      	nop
    4fbc:	2000b8b8 	.word	0x2000b8b8

00004fc0 <bt_init>:
{
    4fc0:	b510      	push	{r4, lr}
	err = hci_init();
    4fc2:	f7ff fec7 	bl	4d54 <hci_init>
	if (err) {
    4fc6:	4604      	mov	r4, r0
    4fc8:	b108      	cbz	r0, 4fce <bt_init+0xe>
}
    4fca:	4620      	mov	r0, r4
    4fcc:	bd10      	pop	{r4, pc}
		err = bt_conn_init();
    4fce:	f002 f83b 	bl	7048 <bt_conn_init>
		if (err) {
    4fd2:	4604      	mov	r4, r0
    4fd4:	2800      	cmp	r0, #0
    4fd6:	d1f8      	bne.n	4fca <bt_init+0xa>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    4fd8:	4b07      	ldr	r3, [pc, #28]	; (4ff8 <bt_init+0x38>)
    4fda:	f3bf 8f5b 	dmb	ish
    4fde:	e853 2f00 	ldrex	r2, [r3]
    4fe2:	f042 0202 	orr.w	r2, r2, #2
    4fe6:	e843 2100 	strex	r1, r2, [r3]
    4fea:	2900      	cmp	r1, #0
    4fec:	d1f7      	bne.n	4fde <bt_init+0x1e>
    4fee:	f3bf 8f5b 	dmb	ish
	bt_le_scan_update(false);
    4ff2:	f7ff ffb1 	bl	4f58 <bt_le_scan_update>
	return 0;
    4ff6:	e7e8      	b.n	4fca <bt_init+0xa>
    4ff8:	2000b928 	.word	0x2000b928

00004ffc <init_work>:
{
    4ffc:	b508      	push	{r3, lr}
	err = bt_init();
    4ffe:	f7ff ffdf 	bl	4fc0 <bt_init>
	if (ready_cb) {
    5002:	4b02      	ldr	r3, [pc, #8]	; (500c <init_work+0x10>)
    5004:	681b      	ldr	r3, [r3, #0]
    5006:	b103      	cbz	r3, 500a <init_work+0xe>
		ready_cb(err);
    5008:	4798      	blx	r3
    500a:	bd08      	pop	{r3, pc}
    500c:	200003b8 	.word	0x200003b8

00005010 <hci_disconn_complete>:
{
    5010:	b530      	push	{r4, r5, lr}
    5012:	b085      	sub	sp, #20
	struct bt_hci_evt_disconn_complete *evt = (void *)buf->data;
    5014:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    5016:	f8b4 0001 	ldrh.w	r0, [r4, #1]
	if (evt->status) {
    501a:	7823      	ldrb	r3, [r4, #0]
    501c:	b10b      	cbz	r3, 5022 <hci_disconn_complete+0x12>
}
    501e:	b005      	add	sp, #20
    5020:	bd30      	pop	{r4, r5, pc}
	conn = bt_conn_lookup_handle(handle);
    5022:	f001 fc3f 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    5026:	4605      	mov	r5, r0
    5028:	2800      	cmp	r0, #0
    502a:	d034      	beq.n	5096 <hci_disconn_complete+0x86>
	conn->err = evt->reason;
    502c:	78e3      	ldrb	r3, [r4, #3]
    502e:	72c3      	strb	r3, [r0, #11]
	k_call_stacks_analyze();
    5030:	f022 fafa 	bl	27628 <k_call_stacks_analyze>
		} else {
			break;
		}
	}
#else
	for (i = 0; i < size; i++) {
    5034:	2200      	movs	r2, #0
	size_t unused = 0;
    5036:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    5038:	f5b2 7f20 	cmp.w	r2, #640	; 0x280
    503c:	d206      	bcs.n	504c <hci_disconn_complete+0x3c>
		if ((unsigned char)stack[i] == 0xaa) {
    503e:	4927      	ldr	r1, [pc, #156]	; (50dc <hci_disconn_complete+0xcc>)
    5040:	5c89      	ldrb	r1, [r1, r2]
    5042:	29aa      	cmp	r1, #170	; 0xaa
    5044:	d102      	bne.n	504c <hci_disconn_complete+0x3c>
			unused++;
    5046:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    5048:	3201      	adds	r2, #1
    504a:	e7f5      	b.n	5038 <hci_disconn_complete+0x28>
	unsigned int pcnt, unused = 0;

	unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	pcnt = ((size - unused) * 100) / size;
    504c:	f5c3 7120 	rsb	r1, r3, #640	; 0x280
    5050:	2264      	movs	r2, #100	; 0x64
    5052:	fb02 f201 	mul.w	r2, r2, r1
    5056:	4822      	ldr	r0, [pc, #136]	; (50e0 <hci_disconn_complete+0xd0>)
    5058:	fba0 0202 	umull	r0, r2, r0, r2
    505c:	0a52      	lsrs	r2, r2, #9

	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    505e:	9202      	str	r2, [sp, #8]
    5060:	f44f 7220 	mov.w	r2, #640	; 0x280
    5064:	9201      	str	r2, [sp, #4]
    5066:	9100      	str	r1, [sp, #0]
    5068:	491e      	ldr	r1, [pc, #120]	; (50e4 <hci_disconn_complete+0xd4>)
    506a:	481f      	ldr	r0, [pc, #124]	; (50e8 <hci_disconn_complete+0xd8>)
    506c:	f7fd fac2 	bl	25f4 <printk>
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5070:	2100      	movs	r1, #0
    5072:	4628      	mov	r0, r5
    5074:	f001 fd28 	bl	6ac8 <bt_conn_set_state>
	conn->handle = 0;
    5078:	2300      	movs	r3, #0
    507a:	802b      	strh	r3, [r5, #0]
	if (conn->type != BT_CONN_TYPE_LE) {
    507c:	78ab      	ldrb	r3, [r5, #2]
    507e:	bb03      	cbnz	r3, 50c2 <hci_disconn_complete+0xb2>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5080:	f3bf 8f5b 	dmb	ish
    5084:	686b      	ldr	r3, [r5, #4]
    5086:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(conn->flags, BT_CONN_AUTO_CONNECT)) {
    508a:	f013 0f01 	tst.w	r3, #1
    508e:	d11c      	bne.n	50ca <hci_disconn_complete+0xba>
	bt_conn_unref(conn);
    5090:	4628      	mov	r0, r5
    5092:	f001 fc8b 	bl	69ac <bt_conn_unref>
    5096:	f3bf 8f5b 	dmb	ish
    509a:	4b14      	ldr	r3, [pc, #80]	; (50ec <hci_disconn_complete+0xdc>)
    509c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    509e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    50a2:	f013 0f40 	tst.w	r3, #64	; 0x40
    50a6:	d0ba      	beq.n	501e <hci_disconn_complete+0xe>
    50a8:	f3bf 8f5b 	dmb	ish
    50ac:	4b0f      	ldr	r3, [pc, #60]	; (50ec <hci_disconn_complete+0xdc>)
    50ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    50b0:	f3bf 8f5b 	dmb	ish
    50b4:	f013 0f20 	tst.w	r3, #32
    50b8:	d1b1      	bne.n	501e <hci_disconn_complete+0xe>
		set_advertise_enable(true);
    50ba:	2001      	movs	r0, #1
    50bc:	f7ff fce4 	bl	4a88 <set_advertise_enable>
    50c0:	e7ad      	b.n	501e <hci_disconn_complete+0xe>
		bt_conn_unref(conn);
    50c2:	4628      	mov	r0, r5
    50c4:	f001 fc72 	bl	69ac <bt_conn_unref>
		return;
    50c8:	e7a9      	b.n	501e <hci_disconn_complete+0xe>
		bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    50ca:	2101      	movs	r1, #1
    50cc:	4628      	mov	r0, r5
    50ce:	f001 fcfb 	bl	6ac8 <bt_conn_set_state>
		bt_le_scan_update(false);
    50d2:	2000      	movs	r0, #0
    50d4:	f7ff ff40 	bl	4f58 <bt_le_scan_update>
    50d8:	e7da      	b.n	5090 <hci_disconn_complete+0x80>
    50da:	bf00      	nop
    50dc:	20003c50 	.word	0x20003c50
    50e0:	cccccccd 	.word	0xcccccccd
    50e4:	0002d424 	.word	0x0002d424
    50e8:	0002d430 	.word	0x0002d430
    50ec:	2000b8b8 	.word	0x2000b8b8

000050f0 <check_pending_conn>:
{
    50f0:	b538      	push	{r3, r4, r5, lr}
    50f2:	f3bf 8f5b 	dmb	ish
    50f6:	4b23      	ldr	r3, [pc, #140]	; (5184 <check_pending_conn+0x94>)
    50f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    50fa:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(bt_dev.flags, BT_DEV_EXPLICIT_SCAN)) {
    50fe:	f413 7f80 	tst.w	r3, #256	; 0x100
    5102:	d101      	bne.n	5108 <check_pending_conn+0x18>
	if (evtype != BT_LE_ADV_IND && evtype != BT_LE_ADV_DIRECT_IND) {
    5104:	2a01      	cmp	r2, #1
    5106:	d900      	bls.n	510a <check_pending_conn+0x1a>
    5108:	bd38      	pop	{r3, r4, r5, pc}
    510a:	460c      	mov	r4, r1
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT_SCAN);
    510c:	2101      	movs	r1, #1
    510e:	f001 fc1b 	bl	6948 <bt_conn_lookup_state_le>
	if (!conn) {
    5112:	4605      	mov	r5, r0
    5114:	2800      	cmp	r0, #0
    5116:	d0f7      	beq.n	5108 <check_pending_conn+0x18>
	if (bt_hci_stop_scanning()) {
    5118:	f7ff fc60 	bl	49dc <bt_hci_stop_scanning>
    511c:	b9c0      	cbnz	r0, 5150 <check_pending_conn+0x60>
    511e:	f3bf 8f5b 	dmb	ish
    5122:	4b18      	ldr	r3, [pc, #96]	; (5184 <check_pending_conn+0x94>)
    5124:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5126:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ID_STATIC_RANDOM)) {
    512a:	f013 0f04 	tst.w	r3, #4
    512e:	d11c      	bne.n	516a <check_pending_conn+0x7a>
	memcpy(dst, src, sizeof(*dst));
    5130:	2207      	movs	r2, #7
    5132:	4914      	ldr	r1, [pc, #80]	; (5184 <check_pending_conn+0x94>)
    5134:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    5138:	f7fb f8c2 	bl	2c0 <memcpy>
    513c:	2207      	movs	r2, #7
    513e:	4621      	mov	r1, r4
    5140:	f105 0056 	add.w	r0, r5, #86	; 0x56
    5144:	f7fb f8bc 	bl	2c0 <memcpy>
	if (hci_le_create_conn(conn)) {
    5148:	4628      	mov	r0, r5
    514a:	f7ff fcdb 	bl	4b04 <hci_le_create_conn>
    514e:	b180      	cbz	r0, 5172 <check_pending_conn+0x82>
	conn->err = BT_HCI_ERR_UNSPECIFIED;
    5150:	231f      	movs	r3, #31
    5152:	72eb      	strb	r3, [r5, #11]
	bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5154:	2100      	movs	r1, #0
    5156:	4628      	mov	r0, r5
    5158:	f001 fcb6 	bl	6ac8 <bt_conn_set_state>
	bt_conn_unref(conn);
    515c:	4628      	mov	r0, r5
    515e:	f001 fc25 	bl	69ac <bt_conn_unref>
	bt_le_scan_update(false);
    5162:	2000      	movs	r0, #0
    5164:	f7ff fef8 	bl	4f58 <bt_le_scan_update>
    5168:	e7ce      	b.n	5108 <check_pending_conn+0x18>
			set_random_address(&bt_dev.id_addr.a);
    516a:	4807      	ldr	r0, [pc, #28]	; (5188 <check_pending_conn+0x98>)
    516c:	f7ff fbee 	bl	494c <set_random_address>
    5170:	e7de      	b.n	5130 <check_pending_conn+0x40>
	bt_conn_set_state(conn, BT_CONN_CONNECT);
    5172:	2102      	movs	r1, #2
    5174:	4628      	mov	r0, r5
    5176:	f001 fca7 	bl	6ac8 <bt_conn_set_state>
	bt_conn_unref(conn);
    517a:	4628      	mov	r0, r5
    517c:	f001 fc16 	bl	69ac <bt_conn_unref>
	return;
    5180:	bd38      	pop	{r3, r4, r5, pc}
    5182:	bf00      	nop
    5184:	2000b8b8 	.word	0x2000b8b8
    5188:	2000b8b9 	.word	0x2000b8b9

0000518c <le_adv_report>:
{
    518c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    5190:	b083      	sub	sp, #12
    5192:	4605      	mov	r5, r0
	u8_t num_reports = net_buf_pull_u8(buf);
    5194:	f100 0308 	add.w	r3, r0, #8
    5198:	9300      	str	r3, [sp, #0]
    519a:	4618      	mov	r0, r3
    519c:	f015 f97f 	bl	1a49e <net_buf_simple_pull_u8>
	while (num_reports--) {
    51a0:	e00a      	b.n	51b8 <le_adv_report+0x2c>
		check_pending_conn(addr, &info->addr, info->evt_type);
    51a2:	7822      	ldrb	r2, [r4, #0]
    51a4:	4631      	mov	r1, r6
    51a6:	9801      	ldr	r0, [sp, #4]
    51a8:	f7ff ffa2 	bl	50f0 <check_pending_conn>
		net_buf_pull(buf, info->length + sizeof(rssi));
    51ac:	7a21      	ldrb	r1, [r4, #8]
    51ae:	3101      	adds	r1, #1
    51b0:	9800      	ldr	r0, [sp, #0]
    51b2:	f015 f96c 	bl	1a48e <net_buf_simple_pull>
	while (num_reports--) {
    51b6:	4638      	mov	r0, r7
    51b8:	1e43      	subs	r3, r0, #1
    51ba:	b2df      	uxtb	r7, r3
    51bc:	b368      	cbz	r0, 521a <le_adv_report+0x8e>
		info = (void *)buf->data;
    51be:	68ac      	ldr	r4, [r5, #8]
		net_buf_pull(buf, sizeof(*info));
    51c0:	2109      	movs	r1, #9
    51c2:	f8dd 9000 	ldr.w	r9, [sp]
    51c6:	4648      	mov	r0, r9
    51c8:	f015 f961 	bl	1a48e <net_buf_simple_pull>
		rssi = info->data[info->length];
    51cc:	7a23      	ldrb	r3, [r4, #8]
    51ce:	4423      	add	r3, r4
    51d0:	f993 8009 	ldrsb.w	r8, [r3, #9]
		addr = find_id_addr(&info->addr);
    51d4:	1c66      	adds	r6, r4, #1
    51d6:	4630      	mov	r0, r6
    51d8:	f7fe ff6b 	bl	40b2 <find_id_addr>
    51dc:	9001      	str	r0, [sp, #4]
		if (scan_dev_found_cb) {
    51de:	4b10      	ldr	r3, [pc, #64]	; (5220 <le_adv_report+0x94>)
    51e0:	681b      	ldr	r3, [r3, #0]
    51e2:	2b00      	cmp	r3, #0
    51e4:	d0dd      	beq.n	51a2 <le_adv_report+0x16>
	state->offset = net_buf_simple_headroom(buf);
    51e6:	f8cd 9000 	str.w	r9, [sp]
    51ea:	4648      	mov	r0, r9
    51ec:	f015 f967 	bl	1a4be <net_buf_simple_headroom>
    51f0:	fa1f fa80 	uxth.w	sl, r0
	state->len = buf->len;
    51f4:	f8b5 900c 	ldrh.w	r9, [r5, #12]
			buf->len = info->length;
    51f8:	7a23      	ldrb	r3, [r4, #8]
    51fa:	81ab      	strh	r3, [r5, #12]
			scan_dev_found_cb(addr, rssi, info->evt_type, &buf->b);
    51fc:	4b08      	ldr	r3, [pc, #32]	; (5220 <le_adv_report+0x94>)
    51fe:	f8d3 b000 	ldr.w	fp, [r3]
    5202:	9b00      	ldr	r3, [sp, #0]
    5204:	7822      	ldrb	r2, [r4, #0]
    5206:	4641      	mov	r1, r8
    5208:	9801      	ldr	r0, [sp, #4]
    520a:	47d8      	blx	fp
	buf->data = buf->__buf + state->offset;
    520c:	f105 0310 	add.w	r3, r5, #16
    5210:	4453      	add	r3, sl
    5212:	60ab      	str	r3, [r5, #8]
	buf->len = state->len;
    5214:	f8a5 900c 	strh.w	r9, [r5, #12]
    5218:	e7c3      	b.n	51a2 <le_adv_report+0x16>
}
    521a:	b003      	add	sp, #12
    521c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    5220:	200003bc 	.word	0x200003bc

00005224 <hci_le_read_remote_features>:
{
    5224:	b538      	push	{r3, r4, r5, lr}
    5226:	4605      	mov	r5, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_READ_REMOTE_FEATURES,
    5228:	2102      	movs	r1, #2
    522a:	f242 0016 	movw	r0, #8214	; 0x2016
    522e:	f7ff f885 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    5232:	b168      	cbz	r0, 5250 <hci_le_read_remote_features+0x2c>
    5234:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5236:	2102      	movs	r1, #2
    5238:	3008      	adds	r0, #8
    523a:	f015 f8db 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    523e:	882b      	ldrh	r3, [r5, #0]
    5240:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_READ_REMOTE_FEATURES, buf);
    5242:	4621      	mov	r1, r4
    5244:	f242 0016 	movw	r0, #8214	; 0x2016
    5248:	f7ff fdd6 	bl	4df8 <bt_hci_cmd_send>
	return 0;
    524c:	2000      	movs	r0, #0
    524e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5250:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5254:	bd38      	pop	{r3, r4, r5, pc}

00005256 <hci_le_set_phy>:
{
    5256:	b538      	push	{r3, r4, r5, lr}
    5258:	4604      	mov	r4, r0
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_PHY, sizeof(*cp));
    525a:	2107      	movs	r1, #7
    525c:	f242 0032 	movw	r0, #8242	; 0x2032
    5260:	f7ff f86c 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    5264:	b1a0      	cbz	r0, 5290 <hci_le_set_phy+0x3a>
    5266:	4605      	mov	r5, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5268:	2107      	movs	r1, #7
    526a:	3008      	adds	r0, #8
    526c:	f015 f8c2 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    5270:	8823      	ldrh	r3, [r4, #0]
    5272:	8003      	strh	r3, [r0, #0]
	cp->all_phys = 0;
    5274:	2400      	movs	r4, #0
    5276:	7084      	strb	r4, [r0, #2]
	cp->tx_phys = BT_HCI_LE_PHY_PREFER_2M;
    5278:	2302      	movs	r3, #2
    527a:	70c3      	strb	r3, [r0, #3]
	cp->rx_phys = BT_HCI_LE_PHY_PREFER_2M;
    527c:	7103      	strb	r3, [r0, #4]
	cp->phy_opts = BT_HCI_LE_PHY_CODED_ANY;
    527e:	7144      	strb	r4, [r0, #5]
    5280:	7184      	strb	r4, [r0, #6]
	bt_hci_cmd_send(BT_HCI_OP_LE_SET_PHY, buf);
    5282:	4629      	mov	r1, r5
    5284:	f242 0032 	movw	r0, #8242	; 0x2032
    5288:	f7ff fdb6 	bl	4df8 <bt_hci_cmd_send>
	return 0;
    528c:	4620      	mov	r0, r4
    528e:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOBUFS;
    5290:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    5294:	bd38      	pop	{r3, r4, r5, pc}

00005296 <hci_le_set_data_len>:
{
    5296:	b5f0      	push	{r4, r5, r6, r7, lr}
    5298:	b083      	sub	sp, #12
    529a:	4604      	mov	r4, r0
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_READ_MAX_DATA_LEN, NULL, &rsp);
    529c:	aa01      	add	r2, sp, #4
    529e:	2100      	movs	r1, #0
    52a0:	f242 002f 	movw	r0, #8239	; 0x202f
    52a4:	f7ff f876 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    52a8:	4603      	mov	r3, r0
    52aa:	b110      	cbz	r0, 52b2 <hci_le_set_data_len+0x1c>
}
    52ac:	4618      	mov	r0, r3
    52ae:	b003      	add	sp, #12
    52b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
	rp = (void *)rsp->data;
    52b2:	9801      	ldr	r0, [sp, #4]
    52b4:	6883      	ldr	r3, [r0, #8]
	tx_octets = sys_le16_to_cpu(rp->max_tx_octets);
    52b6:	f8b3 7001 	ldrh.w	r7, [r3, #1]
	tx_time = sys_le16_to_cpu(rp->max_tx_time);
    52ba:	f8b3 6003 	ldrh.w	r6, [r3, #3]
	net_buf_unref(rsp);
    52be:	f015 f84d 	bl	1a35c <net_buf_unref>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_DATA_LEN, sizeof(*cp));
    52c2:	2106      	movs	r1, #6
    52c4:	f242 0022 	movw	r0, #8226	; 0x2022
    52c8:	f7ff f838 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    52cc:	4605      	mov	r5, r0
    52ce:	b170      	cbz	r0, 52ee <hci_le_set_data_len+0x58>
	cp = net_buf_add(buf, sizeof(*cp));
    52d0:	2106      	movs	r1, #6
    52d2:	3008      	adds	r0, #8
    52d4:	f015 f88e 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    52d8:	8823      	ldrh	r3, [r4, #0]
    52da:	8003      	strh	r3, [r0, #0]
	cp->tx_octets = sys_cpu_to_le16(tx_octets);
    52dc:	8047      	strh	r7, [r0, #2]
	cp->tx_time = sys_cpu_to_le16(tx_time);
    52de:	8086      	strh	r6, [r0, #4]
	err = bt_hci_cmd_send(BT_HCI_OP_LE_SET_DATA_LEN, buf);
    52e0:	4629      	mov	r1, r5
    52e2:	f242 0022 	movw	r0, #8226	; 0x2022
    52e6:	f7ff fd87 	bl	4df8 <bt_hci_cmd_send>
    52ea:	4603      	mov	r3, r0
    52ec:	e7de      	b.n	52ac <hci_le_set_data_len+0x16>
		return -ENOBUFS;
    52ee:	f06f 0368 	mvn.w	r3, #104	; 0x68
    52f2:	e7db      	b.n	52ac <hci_le_set_data_len+0x16>

000052f4 <le_conn_complete>:
{
    52f4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_hci_evt_le_conn_complete *evt = (void *)buf->data;
    52f8:	6884      	ldr	r4, [r0, #8]
	u16_t handle = sys_le16_to_cpu(evt->handle);
    52fa:	f8b4 6001 	ldrh.w	r6, [r4, #1]
	if (evt->status) {
    52fe:	7823      	ldrb	r3, [r4, #0]
    5300:	b17b      	cbz	r3, 5322 <le_conn_complete+0x2e>
		conn = bt_conn_lookup_state_le(NULL, BT_CONN_CONNECT);
    5302:	2102      	movs	r1, #2
    5304:	2000      	movs	r0, #0
    5306:	f001 fb1f 	bl	6948 <bt_conn_lookup_state_le>
		if (!conn) {
    530a:	4605      	mov	r5, r0
    530c:	b3d0      	cbz	r0, 5384 <le_conn_complete+0x90>
		conn->err = evt->status;
    530e:	7823      	ldrb	r3, [r4, #0]
    5310:	72c3      	strb	r3, [r0, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    5312:	2100      	movs	r1, #0
    5314:	f001 fbd8 	bl	6ac8 <bt_conn_set_state>
		bt_conn_unref(conn);
    5318:	4628      	mov	r0, r5
    531a:	f001 fb47 	bl	69ac <bt_conn_unref>
		return;
    531e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	id_addr = find_id_addr(&evt->peer_addr);
    5322:	1d27      	adds	r7, r4, #4
    5324:	4638      	mov	r0, r7
    5326:	f7fe fec4 	bl	40b2 <find_id_addr>
    532a:	4680      	mov	r8, r0
	conn = bt_conn_lookup_state_le(id_addr, BT_CONN_CONNECT);
    532c:	2102      	movs	r1, #2
    532e:	f001 fb0b 	bl	6948 <bt_conn_lookup_state_le>
    5332:	4605      	mov	r5, r0
	if (evt->role == BT_CONN_ROLE_SLAVE) {
    5334:	78e3      	ldrb	r3, [r4, #3]
    5336:	2b01      	cmp	r3, #1
    5338:	d026      	beq.n	5388 <le_conn_complete+0x94>
	if (!conn) {
    533a:	b31d      	cbz	r5, 5384 <le_conn_complete+0x90>
	conn->handle   = handle;
    533c:	4628      	mov	r0, r5
    533e:	f820 6b48 	strh.w	r6, [r0], #72
    5342:	2207      	movs	r2, #7
    5344:	4641      	mov	r1, r8
    5346:	f7fa ffbb 	bl	2c0 <memcpy>
	conn->le.interval = sys_le16_to_cpu(evt->interval);
    534a:	f8b4 300b 	ldrh.w	r3, [r4, #11]
    534e:	f8a5 305e 	strh.w	r3, [r5, #94]	; 0x5e
	conn->le.latency = sys_le16_to_cpu(evt->latency);
    5352:	f8b4 300d 	ldrh.w	r3, [r4, #13]
    5356:	f8a5 3064 	strh.w	r3, [r5, #100]	; 0x64
	conn->le.timeout = sys_le16_to_cpu(evt->supv_timeout);
    535a:	f8b4 300f 	ldrh.w	r3, [r4, #15]
    535e:	f8a5 3066 	strh.w	r3, [r5, #102]	; 0x66
	conn->role = evt->role;
    5362:	78e3      	ldrb	r3, [r4, #3]
    5364:	70eb      	strb	r3, [r5, #3]
	if (conn->role == BT_HCI_ROLE_SLAVE) {
    5366:	2b01      	cmp	r3, #1
    5368:	d022      	beq.n	53b0 <le_conn_complete+0xbc>
	bt_conn_set_state(conn, BT_CONN_CONNECTED);
    536a:	2103      	movs	r1, #3
    536c:	4628      	mov	r0, r5
    536e:	f001 fbab 	bl	6ac8 <bt_conn_set_state>
	if (conn->state != BT_CONN_CONNECTED) {
    5372:	7b2b      	ldrb	r3, [r5, #12]
    5374:	2b03      	cmp	r3, #3
    5376:	d03b      	beq.n	53f0 <le_conn_complete+0xfc>
	bt_conn_unref(conn);
    5378:	4628      	mov	r0, r5
    537a:	f001 fb17 	bl	69ac <bt_conn_unref>
	bt_le_scan_update(false);
    537e:	2000      	movs	r0, #0
    5380:	f7ff fdea 	bl	4f58 <bt_le_scan_update>
    5384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5388:	4b3a      	ldr	r3, [pc, #232]	; (5474 <le_conn_complete+0x180>)
    538a:	f3bf 8f5b 	dmb	ish
    538e:	e853 2f00 	ldrex	r2, [r3]
    5392:	f022 0220 	bic.w	r2, r2, #32
    5396:	e843 2100 	strex	r1, r2, [r3]
    539a:	2900      	cmp	r1, #0
    539c:	d1f7      	bne.n	538e <le_conn_complete+0x9a>
    539e:	f3bf 8f5b 	dmb	ish
		if (!conn) {
    53a2:	2d00      	cmp	r5, #0
    53a4:	d1c9      	bne.n	533a <le_conn_complete+0x46>
			conn = bt_conn_add_le(id_addr);
    53a6:	4640      	mov	r0, r8
    53a8:	f001 fa30 	bl	680c <bt_conn_add_le>
    53ac:	4605      	mov	r5, r0
    53ae:	e7c4      	b.n	533a <le_conn_complete+0x46>
    53b0:	2207      	movs	r2, #7
    53b2:	4639      	mov	r1, r7
    53b4:	f105 004f 	add.w	r0, r5, #79	; 0x4f
    53b8:	f7fa ff82 	bl	2c0 <memcpy>
    53bc:	4e2e      	ldr	r6, [pc, #184]	; (5478 <le_conn_complete+0x184>)
    53be:	2207      	movs	r2, #7
    53c0:	4631      	mov	r1, r6
    53c2:	f105 0056 	add.w	r0, r5, #86	; 0x56
    53c6:	f7fa ff7b 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    53ca:	f3bf 8f5b 	dmb	ish
    53ce:	6f33      	ldr	r3, [r6, #112]	; 0x70
    53d0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    53d4:	f013 0f40 	tst.w	r3, #64	; 0x40
    53d8:	d0c7      	beq.n	536a <le_conn_complete+0x76>
		    BT_LE_STATES_SLAVE_CONN_ADV(bt_dev.le.states)) {
    53da:	e9d6 2320 	ldrd	r2, r3, [r6, #128]	; 0x80
    53de:	2200      	movs	r2, #0
    53e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
		if (atomic_test_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING) &&
    53e4:	4313      	orrs	r3, r2
    53e6:	d0c0      	beq.n	536a <le_conn_complete+0x76>
			set_advertise_enable(true);
    53e8:	2001      	movs	r0, #1
    53ea:	f7ff fb4d 	bl	4a88 <set_advertise_enable>
    53ee:	e7bc      	b.n	536a <le_conn_complete+0x76>
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    53f0:	78e3      	ldrb	r3, [r4, #3]
    53f2:	b12b      	cbz	r3, 5400 <le_conn_complete+0x10c>
	    BT_FEAT_LE_SLAVE_FEATURE_XCHG(bt_dev.le.features)) {
    53f4:	4b20      	ldr	r3, [pc, #128]	; (5478 <le_conn_complete+0x184>)
    53f6:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
	if ((evt->role == BT_HCI_ROLE_MASTER) ||
    53fa:	f013 0f08 	tst.w	r3, #8
    53fe:	d004      	beq.n	540a <le_conn_complete+0x116>
		err = hci_le_read_remote_features(conn);
    5400:	4628      	mov	r0, r5
    5402:	f7ff ff0f 	bl	5224 <hci_le_read_remote_features>
		if (!err) {
    5406:	2800      	cmp	r0, #0
    5408:	d0b6      	beq.n	5378 <le_conn_complete+0x84>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features)) {
    540a:	4b1b      	ldr	r3, [pc, #108]	; (5478 <le_conn_complete+0x184>)
    540c:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    5410:	f013 0f01 	tst.w	r3, #1
    5414:	d10d      	bne.n	5432 <le_conn_complete+0x13e>
	if (BT_FEAT_LE_DLE(bt_dev.le.features)) {
    5416:	4b18      	ldr	r3, [pc, #96]	; (5478 <le_conn_complete+0x184>)
    5418:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    541c:	f013 0f20 	tst.w	r3, #32
    5420:	d003      	beq.n	542a <le_conn_complete+0x136>
		err = hci_le_set_data_len(conn);
    5422:	4628      	mov	r0, r5
    5424:	f7ff ff37 	bl	5296 <hci_le_set_data_len>
		if (!err) {
    5428:	b1b0      	cbz	r0, 5458 <le_conn_complete+0x164>
	update_conn_param(conn);
    542a:	4628      	mov	r0, r5
    542c:	f7fe fe4a 	bl	40c4 <update_conn_param>
    5430:	e7a2      	b.n	5378 <le_conn_complete+0x84>
		err = hci_le_set_phy(conn);
    5432:	4628      	mov	r0, r5
    5434:	f7ff ff0f 	bl	5256 <hci_le_set_phy>
		if (!err) {
    5438:	2800      	cmp	r0, #0
    543a:	d1ec      	bne.n	5416 <le_conn_complete+0x122>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    543c:	1d2b      	adds	r3, r5, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    543e:	f3bf 8f5b 	dmb	ish
    5442:	e853 2f00 	ldrex	r2, [r3]
    5446:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    544a:	e843 2100 	strex	r1, r2, [r3]
    544e:	2900      	cmp	r1, #0
    5450:	d1f7      	bne.n	5442 <le_conn_complete+0x14e>
    5452:	f3bf 8f5b 	dmb	ish
    5456:	e78f      	b.n	5378 <le_conn_complete+0x84>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5458:	1d2b      	adds	r3, r5, #4
    545a:	f3bf 8f5b 	dmb	ish
    545e:	e853 2f00 	ldrex	r2, [r3]
    5462:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5466:	e843 2100 	strex	r1, r2, [r3]
    546a:	2900      	cmp	r1, #0
    546c:	d1f7      	bne.n	545e <le_conn_complete+0x16a>
    546e:	f3bf 8f5b 	dmb	ish
    5472:	e781      	b.n	5378 <le_conn_complete+0x84>
    5474:	2000b928 	.word	0x2000b928
    5478:	2000b8b8 	.word	0x2000b8b8

0000547c <le_conn_complete>:
{
    547c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5480:	4604      	mov	r4, r0
    5482:	460f      	mov	r7, r1
    5484:	4690      	mov	r8, r2
	ll_rl_crpa_set(radio_cc->peer_addr_type, &radio_cc->peer_addr[0],
    5486:	1d85      	adds	r5, r0, #6
    5488:	f100 060c 	add.w	r6, r0, #12
    548c:	4633      	mov	r3, r6
    548e:	22ff      	movs	r2, #255	; 0xff
    5490:	4629      	mov	r1, r5
    5492:	7940      	ldrb	r0, [r0, #5]
    5494:	f014 fafa 	bl	19a8c <ll_rl_crpa_set>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5498:	4b40      	ldr	r3, [pc, #256]	; (559c <le_conn_complete+0x120>)
    549a:	e9d3 2300 	ldrd	r2, r3, [r3]
    549e:	2200      	movs	r2, #0
    54a0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    54a4:	4313      	orrs	r3, r2
    54a6:	d077      	beq.n	5598 <le_conn_complete+0x11c>
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    54a8:	4b3d      	ldr	r3, [pc, #244]	; (55a0 <le_conn_complete+0x124>)
    54aa:	e9d3 2300 	ldrd	r2, r3, [r3]
    54ae:	f002 0001 	and.w	r0, r2, #1
    54b2:	2100      	movs	r1, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    54b4:	4301      	orrs	r1, r0
    54b6:	d104      	bne.n	54c2 <le_conn_complete+0x46>
	     !(le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE))) {
    54b8:	f402 7000 	and.w	r0, r2, #512	; 0x200
    54bc:	2100      	movs	r1, #0
	    (!(le_event_mask & BT_EVT_MASK_LE_CONN_COMPLETE) &&
    54be:	4301      	orrs	r1, r0
    54c0:	d06a      	beq.n	5598 <le_conn_complete+0x11c>
	if (!radio_cc->status) {
    54c2:	78e1      	ldrb	r1, [r4, #3]
    54c4:	b919      	cbnz	r1, 54ce <le_conn_complete+0x52>
		conn_count++;
    54c6:	4837      	ldr	r0, [pc, #220]	; (55a4 <le_conn_complete+0x128>)
    54c8:	6801      	ldr	r1, [r0, #0]
    54ca:	3101      	adds	r1, #1
    54cc:	6001      	str	r1, [r0, #0]
	if (le_event_mask & BT_EVT_MASK_LE_ENH_CONN_COMPLETE) {
    54ce:	f402 7200 	and.w	r2, r2, #512	; 0x200
    54d2:	2300      	movs	r3, #0
    54d4:	4313      	orrs	r3, r2
    54d6:	d03e      	beq.n	5556 <le_conn_complete+0xda>
		leecc = meta_evt(buf, BT_HCI_EVT_LE_ENH_CONN_COMPLETE,
    54d8:	221e      	movs	r2, #30
    54da:	210a      	movs	r1, #10
    54dc:	4640      	mov	r0, r8
    54de:	f007 fb2d 	bl	cb3c <meta_evt>
    54e2:	4680      	mov	r8, r0
		leecc->status = radio_cc->status;
    54e4:	78e3      	ldrb	r3, [r4, #3]
    54e6:	7003      	strb	r3, [r0, #0]
		leecc->handle = sys_cpu_to_le16(handle);
    54e8:	f8a0 7001 	strh.w	r7, [r0, #1]
		leecc->role = radio_cc->role;
    54ec:	7923      	ldrb	r3, [r4, #4]
    54ee:	70c3      	strb	r3, [r0, #3]
		leecc->peer_addr.type = radio_cc->peer_addr_type;
    54f0:	7963      	ldrb	r3, [r4, #5]
    54f2:	7103      	strb	r3, [r0, #4]
		memcpy(&leecc->peer_addr.a.val[0], &radio_cc->peer_addr[0],
    54f4:	2206      	movs	r2, #6
    54f6:	4629      	mov	r1, r5
    54f8:	3005      	adds	r0, #5
    54fa:	f7fa fee1 	bl	2c0 <memcpy>
		if ((radio_cc->own_addr_type) &&
    54fe:	7ca3      	ldrb	r3, [r4, #18]
    5500:	b123      	cbz	r3, 550c <le_conn_complete+0x90>
		    ((radio_cc->own_addr[5] & 0xc0) == 0x40)) {
    5502:	7e23      	ldrb	r3, [r4, #24]
		if ((radio_cc->own_addr_type) &&
    5504:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    5508:	2b40      	cmp	r3, #64	; 0x40
    550a:	d01c      	beq.n	5546 <le_conn_complete+0xca>
			memset(&leecc->local_rpa.val[0], 0x0, BDADDR_SIZE);
    550c:	2206      	movs	r2, #6
    550e:	2100      	movs	r1, #0
    5510:	f108 000b 	add.w	r0, r8, #11
    5514:	f024 fa40 	bl	29998 <memset>
		memcpy(&leecc->peer_rpa.val[0], &radio_cc->peer_rpa[0],
    5518:	2206      	movs	r2, #6
    551a:	4631      	mov	r1, r6
    551c:	f108 0011 	add.w	r0, r8, #17
    5520:	f7fa fece 	bl	2c0 <memcpy>
		leecc->interval = sys_cpu_to_le16(radio_cc->interval);
    5524:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5528:	f8a8 3017 	strh.w	r3, [r8, #23]
		leecc->latency = sys_cpu_to_le16(radio_cc->latency);
    552c:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5530:	f8a8 3019 	strh.w	r3, [r8, #25]
		leecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    5534:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5538:	f8a8 301b 	strh.w	r3, [r8, #27]
		leecc->clock_accuracy = radio_cc->mca;
    553c:	7fe3      	ldrb	r3, [r4, #31]
    553e:	f888 301d 	strb.w	r3, [r8, #29]
		return;
    5542:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			memcpy(&leecc->local_rpa.val[0], &radio_cc->own_addr[0],
    5546:	2206      	movs	r2, #6
    5548:	f104 0113 	add.w	r1, r4, #19
    554c:	f108 000b 	add.w	r0, r8, #11
    5550:	f7fa feb6 	bl	2c0 <memcpy>
    5554:	e7e0      	b.n	5518 <le_conn_complete+0x9c>
	lecc = meta_evt(buf, BT_HCI_EVT_LE_CONN_COMPLETE, sizeof(*lecc));
    5556:	2212      	movs	r2, #18
    5558:	2101      	movs	r1, #1
    555a:	4640      	mov	r0, r8
    555c:	f007 faee 	bl	cb3c <meta_evt>
    5560:	4606      	mov	r6, r0
	lecc->status = radio_cc->status;
    5562:	78e3      	ldrb	r3, [r4, #3]
    5564:	7003      	strb	r3, [r0, #0]
	lecc->handle = sys_cpu_to_le16(handle);
    5566:	f8a0 7001 	strh.w	r7, [r0, #1]
	lecc->role = radio_cc->role;
    556a:	7923      	ldrb	r3, [r4, #4]
    556c:	70c3      	strb	r3, [r0, #3]
	lecc->peer_addr.type = radio_cc->peer_addr_type;
    556e:	7963      	ldrb	r3, [r4, #5]
    5570:	7103      	strb	r3, [r0, #4]
	memcpy(&lecc->peer_addr.a.val[0], &radio_cc->peer_addr[0], BDADDR_SIZE);
    5572:	2206      	movs	r2, #6
    5574:	4629      	mov	r1, r5
    5576:	3005      	adds	r0, #5
    5578:	f7fa fea2 	bl	2c0 <memcpy>
	lecc->interval = sys_cpu_to_le16(radio_cc->interval);
    557c:	f8b4 3019 	ldrh.w	r3, [r4, #25]
    5580:	f8a6 300b 	strh.w	r3, [r6, #11]
	lecc->latency = sys_cpu_to_le16(radio_cc->latency);
    5584:	f8b4 301b 	ldrh.w	r3, [r4, #27]
    5588:	f8a6 300d 	strh.w	r3, [r6, #13]
	lecc->supv_timeout = sys_cpu_to_le16(radio_cc->timeout);
    558c:	f8b4 301d 	ldrh.w	r3, [r4, #29]
    5590:	f8a6 300f 	strh.w	r3, [r6, #15]
	lecc->clock_accuracy = radio_cc->mca;
    5594:	7fe3      	ldrb	r3, [r4, #31]
    5596:	7473      	strb	r3, [r6, #17]
    5598:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    559c:	2000bba8 	.word	0x2000bba8
    55a0:	2000bbb0 	.word	0x2000bbb0
    55a4:	20000ad4 	.word	0x20000ad4

000055a8 <le_remote_feat_complete>:
{
    55a8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_remote_feat_complete *evt = (void *)buf->data;
    55aa:	6885      	ldr	r5, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    55ac:	f8b5 0001 	ldrh.w	r0, [r5, #1]
    55b0:	f001 f978 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    55b4:	b1f0      	cbz	r0, 55f4 <le_remote_feat_complete+0x4c>
    55b6:	4604      	mov	r4, r0
	if (!evt->status) {
    55b8:	782b      	ldrb	r3, [r5, #0]
    55ba:	b1e3      	cbz	r3, 55f6 <le_remote_feat_complete+0x4e>
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    55bc:	4b24      	ldr	r3, [pc, #144]	; (5650 <le_remote_feat_complete+0xa8>)
    55be:	f893 3079 	ldrb.w	r3, [r3, #121]	; 0x79
    55c2:	f013 0f01 	tst.w	r3, #1
    55c6:	d004      	beq.n	55d2 <le_remote_feat_complete+0x2a>
	    BT_FEAT_LE_PHY_2M(conn->le.features)) {
    55c8:	f894 3069 	ldrb.w	r3, [r4, #105]	; 0x69
	if (BT_FEAT_LE_PHY_2M(bt_dev.le.features) &&
    55cc:	f013 0f01 	tst.w	r3, #1
    55d0:	d117      	bne.n	5602 <le_remote_feat_complete+0x5a>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    55d2:	4b1f      	ldr	r3, [pc, #124]	; (5650 <le_remote_feat_complete+0xa8>)
    55d4:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    55d8:	f013 0f20 	tst.w	r3, #32
    55dc:	d004      	beq.n	55e8 <le_remote_feat_complete+0x40>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    55de:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    55e2:	f013 0f20 	tst.w	r3, #32
    55e6:	d11f      	bne.n	5628 <le_remote_feat_complete+0x80>
	update_conn_param(conn);
    55e8:	4620      	mov	r0, r4
    55ea:	f7fe fd6b 	bl	40c4 <update_conn_param>
	bt_conn_unref(conn);
    55ee:	4620      	mov	r0, r4
    55f0:	f001 f9dc 	bl	69ac <bt_conn_unref>
    55f4:	bd38      	pop	{r3, r4, r5, pc}
		memcpy(conn->le.features, evt->features,
    55f6:	2208      	movs	r2, #8
    55f8:	1ce9      	adds	r1, r5, #3
    55fa:	3068      	adds	r0, #104	; 0x68
    55fc:	f7fa fe60 	bl	2c0 <memcpy>
    5600:	e7dc      	b.n	55bc <le_remote_feat_complete+0x14>
		err = hci_le_set_phy(conn);
    5602:	4620      	mov	r0, r4
    5604:	f7ff fe27 	bl	5256 <hci_le_set_phy>
		if (!err) {
    5608:	2800      	cmp	r0, #0
    560a:	d1e2      	bne.n	55d2 <le_remote_feat_complete+0x2a>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE);
    560c:	1d23      	adds	r3, r4, #4
    560e:	f3bf 8f5b 	dmb	ish
    5612:	e853 2f00 	ldrex	r2, [r3]
    5616:	f042 0280 	orr.w	r2, r2, #128	; 0x80
    561a:	e843 2100 	strex	r1, r2, [r3]
    561e:	2900      	cmp	r1, #0
    5620:	d1f7      	bne.n	5612 <le_remote_feat_complete+0x6a>
    5622:	f3bf 8f5b 	dmb	ish
    5626:	e7e2      	b.n	55ee <le_remote_feat_complete+0x46>
		err = hci_le_set_data_len(conn);
    5628:	4620      	mov	r0, r4
    562a:	f7ff fe34 	bl	5296 <hci_le_set_data_len>
		if (!err) {
    562e:	2800      	cmp	r0, #0
    5630:	d1da      	bne.n	55e8 <le_remote_feat_complete+0x40>
			atomic_set_bit(conn->flags, BT_CONN_AUTO_DATA_LEN);
    5632:	1d23      	adds	r3, r4, #4
    5634:	f3bf 8f5b 	dmb	ish
    5638:	e853 2f00 	ldrex	r2, [r3]
    563c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    5640:	e843 2100 	strex	r1, r2, [r3]
    5644:	2900      	cmp	r1, #0
    5646:	d1f7      	bne.n	5638 <le_remote_feat_complete+0x90>
    5648:	f3bf 8f5b 	dmb	ish
    564c:	e7cf      	b.n	55ee <le_remote_feat_complete+0x46>
    564e:	bf00      	nop
    5650:	2000b8b8 	.word	0x2000b8b8

00005654 <le_remote_feat_complete>:
{
    5654:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5656:	4c14      	ldr	r4, [pc, #80]	; (56a8 <le_remote_feat_complete+0x54>)
    5658:	e9d4 4500 	ldrd	r4, r5, [r4]
    565c:	2400      	movs	r4, #0
    565e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5662:	432c      	orrs	r4, r5
    5664:	d007      	beq.n	5676 <le_remote_feat_complete+0x22>
	    !(le_event_mask & BT_EVT_MASK_LE_REMOTE_FEAT_COMPLETE)) {
    5666:	4c11      	ldr	r4, [pc, #68]	; (56ac <le_remote_feat_complete+0x58>)
    5668:	e9d4 4500 	ldrd	r4, r5, [r4]
    566c:	f004 0408 	and.w	r4, r4, #8
    5670:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5672:	432c      	orrs	r4, r5
    5674:	d100      	bne.n	5678 <le_remote_feat_complete+0x24>
    5676:	bd70      	pop	{r4, r5, r6, pc}
    5678:	4615      	mov	r5, r2
    567a:	460e      	mov	r6, r1
    567c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EV_LE_REMOTE_FEAT_COMPLETE, sizeof(*sep));
    567e:	220b      	movs	r2, #11
    5680:	2104      	movs	r1, #4
    5682:	4618      	mov	r0, r3
    5684:	f007 fa5a 	bl	cb3c <meta_evt>
	sep->status = status;
    5688:	7004      	strb	r4, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    568a:	f8a0 5001 	strh.w	r5, [r0, #1]
	if (!status) {
    568e:	b12c      	cbz	r4, 569c <le_remote_feat_complete+0x48>
		memset(&sep->features[0], 0x00, sizeof(sep->features));
    5690:	2208      	movs	r2, #8
    5692:	2100      	movs	r1, #0
    5694:	3003      	adds	r0, #3
    5696:	f024 f97f 	bl	29998 <memset>
    569a:	e7ec      	b.n	5676 <le_remote_feat_complete+0x22>
		memcpy(&sep->features[0],
    569c:	2208      	movs	r2, #8
    569e:	1d31      	adds	r1, r6, #4
    56a0:	3003      	adds	r0, #3
    56a2:	f7fa fe0d 	bl	2c0 <memcpy>
    56a6:	bd70      	pop	{r4, r5, r6, pc}
    56a8:	2000bba8 	.word	0x2000bba8
    56ac:	2000bbb0 	.word	0x2000bbb0

000056b0 <le_phy_update_complete>:
{
    56b0:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_le_phy_update_complete *evt = (void *)buf->data;
    56b2:	6883      	ldr	r3, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    56b4:	f8b3 0001 	ldrh.w	r0, [r3, #1]
    56b8:	f001 f8f4 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    56bc:	b308      	cbz	r0, 5702 <le_phy_update_complete+0x52>
    56be:	4604      	mov	r4, r0
	if (!atomic_test_and_clear_bit(conn->flags, BT_CONN_AUTO_PHY_UPDATE)) {
    56c0:	1d05      	adds	r5, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    56c2:	f3bf 8f5b 	dmb	ish
    56c6:	e855 3f00 	ldrex	r3, [r5]
    56ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
    56ce:	e845 2100 	strex	r1, r2, [r5]
    56d2:	2900      	cmp	r1, #0
    56d4:	d1f7      	bne.n	56c6 <le_phy_update_complete+0x16>
    56d6:	f3bf 8f5b 	dmb	ish
    56da:	f013 0f80 	tst.w	r3, #128	; 0x80
    56de:	d00d      	beq.n	56fc <le_phy_update_complete+0x4c>
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    56e0:	4b11      	ldr	r3, [pc, #68]	; (5728 <le_phy_update_complete+0x78>)
    56e2:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    56e6:	f013 0f20 	tst.w	r3, #32
    56ea:	d004      	beq.n	56f6 <le_phy_update_complete+0x46>
	    BT_FEAT_LE_DLE(conn->le.features)) {
    56ec:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if (BT_FEAT_LE_DLE(bt_dev.le.features) &&
    56f0:	f013 0f20 	tst.w	r3, #32
    56f4:	d106      	bne.n	5704 <le_phy_update_complete+0x54>
	update_conn_param(conn);
    56f6:	4620      	mov	r0, r4
    56f8:	f7fe fce4 	bl	40c4 <update_conn_param>
	bt_conn_unref(conn);
    56fc:	4620      	mov	r0, r4
    56fe:	f001 f955 	bl	69ac <bt_conn_unref>
    5702:	bd38      	pop	{r3, r4, r5, pc}
		err = hci_le_set_data_len(conn);
    5704:	4620      	mov	r0, r4
    5706:	f7ff fdc6 	bl	5296 <hci_le_set_data_len>
		if (!err) {
    570a:	2800      	cmp	r0, #0
    570c:	d1f3      	bne.n	56f6 <le_phy_update_complete+0x46>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    570e:	f3bf 8f5b 	dmb	ish
    5712:	e855 3f00 	ldrex	r3, [r5]
    5716:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    571a:	e845 3200 	strex	r2, r3, [r5]
    571e:	2a00      	cmp	r2, #0
    5720:	d1f7      	bne.n	5712 <le_phy_update_complete+0x62>
    5722:	f3bf 8f5b 	dmb	ish
    5726:	e7e9      	b.n	56fc <le_phy_update_complete+0x4c>
    5728:	2000b8b8 	.word	0x2000b8b8

0000572c <le_conn_param_neg_reply>:
{
    572c:	b570      	push	{r4, r5, r6, lr}
    572e:	4606      	mov	r6, r0
    5730:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY,
    5732:	2103      	movs	r1, #3
    5734:	f242 0021 	movw	r0, #8225	; 0x2021
    5738:	f7fe fe00 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    573c:	b160      	cbz	r0, 5758 <le_conn_param_neg_reply+0x2c>
    573e:	4604      	mov	r4, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5740:	2103      	movs	r1, #3
    5742:	3008      	adds	r0, #8
    5744:	f014 fe56 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(handle);
    5748:	8006      	strh	r6, [r0, #0]
	cp->reason = sys_cpu_to_le16(reason);
    574a:	7085      	strb	r5, [r0, #2]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_NEG_REPLY, buf);
    574c:	4621      	mov	r1, r4
    574e:	f242 0021 	movw	r0, #8225	; 0x2021
    5752:	f7ff fb51 	bl	4df8 <bt_hci_cmd_send>
    5756:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    5758:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    575c:	bd70      	pop	{r4, r5, r6, pc}

0000575e <le_conn_param_req_reply>:
{
    575e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    5760:	4607      	mov	r7, r0
    5762:	460d      	mov	r5, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, sizeof(*cp));
    5764:	210e      	movs	r1, #14
    5766:	f242 0020 	movw	r0, #8224	; 0x2020
    576a:	f7fe fde7 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    576e:	b1c0      	cbz	r0, 57a2 <le_conn_param_req_reply+0x44>
    5770:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    5772:	210e      	movs	r1, #14
    5774:	3008      	adds	r0, #8
    5776:	f014 fe3d 	bl	1a3f4 <net_buf_simple_add>
    577a:	4604      	mov	r4, r0
	memset(cp, 0, sizeof(*cp));
    577c:	220e      	movs	r2, #14
    577e:	2100      	movs	r1, #0
    5780:	f024 f90a 	bl	29998 <memset>
	cp->handle = sys_cpu_to_le16(handle);
    5784:	8027      	strh	r7, [r4, #0]
	cp->interval_min = sys_cpu_to_le16(param->interval_min);
    5786:	882b      	ldrh	r3, [r5, #0]
    5788:	8063      	strh	r3, [r4, #2]
	cp->interval_max = sys_cpu_to_le16(param->interval_max);
    578a:	886b      	ldrh	r3, [r5, #2]
    578c:	80a3      	strh	r3, [r4, #4]
	cp->latency = sys_cpu_to_le16(param->latency);
    578e:	88ab      	ldrh	r3, [r5, #4]
    5790:	80e3      	strh	r3, [r4, #6]
	cp->timeout = sys_cpu_to_le16(param->timeout);
    5792:	88eb      	ldrh	r3, [r5, #6]
    5794:	8123      	strh	r3, [r4, #8]
	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_PARAM_REQ_REPLY, buf);
    5796:	4631      	mov	r1, r6
    5798:	f242 0020 	movw	r0, #8224	; 0x2020
    579c:	f7ff fb2c 	bl	4df8 <bt_hci_cmd_send>
    57a0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    57a2:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    57a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000057a8 <le_conn_param_req_reply>:
{
    57a8:	b570      	push	{r4, r5, r6, lr}
    57aa:	b082      	sub	sp, #8
    57ac:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_reply *cmd = (void *)buf->data;
    57ae:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    57b0:	8814      	ldrh	r4, [r2, #0]
	interval_max = sys_le16_to_cpu(cmd->interval_max);
    57b2:	8893      	ldrh	r3, [r2, #4]
	latency = sys_le16_to_cpu(cmd->latency);
    57b4:	88d1      	ldrh	r1, [r2, #6]
	timeout = sys_le16_to_cpu(cmd->timeout);
    57b6:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 2, 0, interval_max, latency,
    57b8:	9201      	str	r2, [sp, #4]
    57ba:	9100      	str	r1, [sp, #0]
    57bc:	2200      	movs	r2, #0
    57be:	2102      	movs	r1, #2
    57c0:	b2a0      	uxth	r0, r4
    57c2:	f012 f929 	bl	17a18 <ll_conn_update>
    57c6:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    57c8:	2103      	movs	r1, #3
    57ca:	4630      	mov	r0, r6
    57cc:	f007 f91c 	bl	ca08 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    57d0:	b12d      	cbz	r5, 57de <le_conn_param_req_reply+0x36>
    57d2:	230c      	movs	r3, #12
    57d4:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    57d6:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    57da:	b002      	add	sp, #8
    57dc:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    57de:	2300      	movs	r3, #0
    57e0:	e7f8      	b.n	57d4 <le_conn_param_req_reply+0x2c>
	...

000057e4 <le_conn_param_req>:
{
    57e4:	b530      	push	{r4, r5, lr}
    57e6:	b083      	sub	sp, #12
	struct bt_hci_evt_le_conn_param_req *evt = (void *)buf->data;
    57e8:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(evt->handle);
    57ea:	881c      	ldrh	r4, [r3, #0]
	param.interval_min = sys_le16_to_cpu(evt->interval_min);
    57ec:	885a      	ldrh	r2, [r3, #2]
    57ee:	f8ad 2000 	strh.w	r2, [sp]
	param.interval_max = sys_le16_to_cpu(evt->interval_max);
    57f2:	889a      	ldrh	r2, [r3, #4]
    57f4:	f8ad 2002 	strh.w	r2, [sp, #2]
	param.latency = sys_le16_to_cpu(evt->latency);
    57f8:	88da      	ldrh	r2, [r3, #6]
    57fa:	f8ad 2004 	strh.w	r2, [sp, #4]
	param.timeout = sys_le16_to_cpu(evt->timeout);
    57fe:	891b      	ldrh	r3, [r3, #8]
    5800:	f8ad 3006 	strh.w	r3, [sp, #6]
	conn = bt_conn_lookup_handle(handle);
    5804:	4620      	mov	r0, r4
    5806:	f001 f84d 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    580a:	b178      	cbz	r0, 582c <le_conn_param_req+0x48>
    580c:	4605      	mov	r5, r0
	if (!le_param_req(conn, &param)) {
    580e:	4669      	mov	r1, sp
    5810:	f000 fdf6 	bl	6400 <le_param_req>
    5814:	b980      	cbnz	r0, 5838 <le_conn_param_req+0x54>
		err = le_conn_param_neg_reply(handle,
    5816:	211e      	movs	r1, #30
    5818:	4620      	mov	r0, r4
    581a:	f7ff ff87 	bl	572c <le_conn_param_neg_reply>
    581e:	4604      	mov	r4, r0
	bt_conn_unref(conn);
    5820:	4628      	mov	r0, r5
    5822:	f001 f8c3 	bl	69ac <bt_conn_unref>
}
    5826:	4620      	mov	r0, r4
    5828:	b003      	add	sp, #12
    582a:	bd30      	pop	{r4, r5, pc}
		return le_conn_param_neg_reply(handle,
    582c:	2102      	movs	r1, #2
    582e:	4620      	mov	r0, r4
    5830:	f7ff ff7c 	bl	572c <le_conn_param_neg_reply>
    5834:	4604      	mov	r4, r0
    5836:	e7f6      	b.n	5826 <le_conn_param_req+0x42>
		err = le_conn_param_req_reply(handle, &param);
    5838:	4669      	mov	r1, sp
    583a:	4620      	mov	r0, r4
    583c:	f7ff ff8f 	bl	575e <le_conn_param_req_reply>
    5840:	4604      	mov	r4, r0
    5842:	e7ed      	b.n	5820 <le_conn_param_req+0x3c>

00005844 <le_conn_param_req>:
{
    5844:	b530      	push	{r4, r5, lr}
    5846:	b083      	sub	sp, #12
    5848:	4604      	mov	r4, r0
    584a:	460d      	mov	r5, r1
    584c:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    584e:	4b14      	ldr	r3, [pc, #80]	; (58a0 <le_conn_param_req+0x5c>)
    5850:	e9d3 2300 	ldrd	r2, r3, [r3]
    5854:	2200      	movs	r2, #0
    5856:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    585a:	4313      	orrs	r3, r2
    585c:	d007      	beq.n	586e <le_conn_param_req+0x2a>
	    !(le_event_mask & BT_EVT_MASK_LE_CONN_PARAM_REQ)) {
    585e:	4b11      	ldr	r3, [pc, #68]	; (58a4 <le_conn_param_req+0x60>)
    5860:	e9d3 2300 	ldrd	r2, r3, [r3]
    5864:	f002 0220 	and.w	r2, r2, #32
    5868:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    586a:	4313      	orrs	r3, r2
    586c:	d109      	bne.n	5882 <le_conn_param_req+0x3e>
		ll_conn_update(handle, 2, BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    586e:	2300      	movs	r3, #0
    5870:	9301      	str	r3, [sp, #4]
    5872:	9300      	str	r3, [sp, #0]
    5874:	221a      	movs	r2, #26
    5876:	2102      	movs	r1, #2
    5878:	4628      	mov	r0, r5
    587a:	f012 f8cd 	bl	17a18 <ll_conn_update>
}
    587e:	b003      	add	sp, #12
    5880:	bd30      	pop	{r4, r5, pc}
	sep = meta_evt(buf, BT_HCI_EVT_LE_CONN_PARAM_REQ, sizeof(*sep));
    5882:	220a      	movs	r2, #10
    5884:	2106      	movs	r1, #6
    5886:	f007 f959 	bl	cb3c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    588a:	8005      	strh	r5, [r0, #0]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_min;
    588c:	88a3      	ldrh	r3, [r4, #4]
	sep->interval_min =
    588e:	8043      	strh	r3, [r0, #2]
		pdu_data->payload.llctrl.ctrldata.conn_param_req.interval_max;
    5890:	88e3      	ldrh	r3, [r4, #6]
	sep->interval_max =
    5892:	8083      	strh	r3, [r0, #4]
	sep->latency = pdu_data->payload.llctrl.ctrldata.conn_param_req.latency;
    5894:	8923      	ldrh	r3, [r4, #8]
    5896:	80c3      	strh	r3, [r0, #6]
	sep->timeout = pdu_data->payload.llctrl.ctrldata.conn_param_req.timeout;
    5898:	8963      	ldrh	r3, [r4, #10]
    589a:	8103      	strh	r3, [r0, #8]
    589c:	e7ef      	b.n	587e <le_conn_param_req+0x3a>
    589e:	bf00      	nop
    58a0:	2000bba8 	.word	0x2000bba8
    58a4:	2000bbb0 	.word	0x2000bbb0

000058a8 <le_ltk_request>:
{
    58a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    58aa:	b085      	sub	sp, #20
	struct bt_hci_evt_le_ltk_request *evt = (void *)buf->data;
    58ac:	6884      	ldr	r4, [r0, #8]
	conn = bt_conn_lookup_handle(handle);
    58ae:	8820      	ldrh	r0, [r4, #0]
    58b0:	f000 fff8 	bl	68a4 <bt_conn_lookup_handle>
	if (!conn) {
    58b4:	2800      	cmp	r0, #0
    58b6:	d040      	beq.n	593a <le_ltk_request+0x92>
    58b8:	4605      	mov	r5, r0
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    58ba:	f8d4 2002 	ldr.w	r2, [r4, #2]
    58be:	f8d4 3006 	ldr.w	r3, [r4, #6]
    58c2:	4313      	orrs	r3, r2
    58c4:	d102      	bne.n	58cc <le_ltk_request+0x24>
    58c6:	8963      	ldrh	r3, [r4, #10]
    58c8:	2b00      	cmp	r3, #0
    58ca:	d038      	beq.n	593e <le_ltk_request+0x96>
	if (!conn->le.keys) {
    58cc:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    58ce:	2b00      	cmp	r3, #0
    58d0:	d053      	beq.n	597a <le_ltk_request+0xd2>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    58d2:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    58d4:	b16b      	cbz	r3, 58f2 <le_ltk_request+0x4a>
    58d6:	899a      	ldrh	r2, [r3, #12]
    58d8:	f012 0f20 	tst.w	r2, #32
    58dc:	d009      	beq.n	58f2 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    58de:	f8d4 0002 	ldr.w	r0, [r4, #2]
    58e2:	f8d4 1006 	ldr.w	r1, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_LTK_P256) &&
    58e6:	ea50 0201 	orrs.w	r2, r0, r1
    58ea:	d102      	bne.n	58f2 <le_ltk_request+0x4a>
	    evt->rand == 0 && evt->ediv == 0) {
    58ec:	8962      	ldrh	r2, [r4, #10]
    58ee:	2a00      	cmp	r2, #0
    58f0:	d052      	beq.n	5998 <le_ltk_request+0xf0>
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    58f2:	b16b      	cbz	r3, 5910 <le_ltk_request+0x68>
    58f4:	899a      	ldrh	r2, [r3, #12]
    58f6:	f012 0f01 	tst.w	r2, #1
    58fa:	d009      	beq.n	5910 <le_ltk_request+0x68>
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    58fc:	e9d3 011c 	ldrd	r0, r1, [r3, #112]	; 0x70
    5900:	f8d4 6002 	ldr.w	r6, [r4, #2]
    5904:	f8d4 7006 	ldr.w	r7, [r4, #6]
	if (conn->le.keys && (conn->le.keys->keys & BT_KEYS_SLAVE_LTK) &&
    5908:	42b9      	cmp	r1, r7
    590a:	bf08      	it	eq
    590c:	42b0      	cmpeq	r0, r6
    590e:	d06a      	beq.n	59e6 <le_ltk_request+0x13e>
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, sizeof(*cp));
    5910:	2102      	movs	r1, #2
    5912:	f242 001b 	movw	r0, #8219	; 0x201b
    5916:	f7fe fd11 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    591a:	4606      	mov	r6, r0
    591c:	b150      	cbz	r0, 5934 <le_ltk_request+0x8c>
	cp = net_buf_add(buf, sizeof(*cp));
    591e:	2102      	movs	r1, #2
    5920:	3008      	adds	r0, #8
    5922:	f014 fd67 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = evt->handle;
    5926:	8823      	ldrh	r3, [r4, #0]
    5928:	8003      	strh	r3, [r0, #0]
	bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_NEG_REPLY, buf);
    592a:	4631      	mov	r1, r6
    592c:	f242 001b 	movw	r0, #8219	; 0x201b
    5930:	f7ff fa62 	bl	4df8 <bt_hci_cmd_send>
	bt_conn_unref(conn);
    5934:	4628      	mov	r0, r5
    5936:	f001 f839 	bl	69ac <bt_conn_unref>
}
    593a:	b005      	add	sp, #20
    593c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (evt->rand == 0 && evt->ediv == 0 && bt_smp_get_tk(conn, tk)) {
    593e:	4669      	mov	r1, sp
    5940:	f006 ff14 	bl	c76c <bt_smp_get_tk>
    5944:	2800      	cmp	r0, #0
    5946:	d0c1      	beq.n	58cc <le_ltk_request+0x24>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5948:	2112      	movs	r1, #18
    594a:	f242 001a 	movw	r0, #8218	; 0x201a
    594e:	f7fe fcf5 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    5952:	4606      	mov	r6, r0
    5954:	2800      	cmp	r0, #0
    5956:	d0ed      	beq.n	5934 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    5958:	2112      	movs	r1, #18
    595a:	3008      	adds	r0, #8
    595c:	f014 fd4a 	bl	1a3f4 <net_buf_simple_add>
		cp->handle = evt->handle;
    5960:	8823      	ldrh	r3, [r4, #0]
    5962:	f820 3b02 	strh.w	r3, [r0], #2
		memcpy(cp->ltk, tk, sizeof(cp->ltk));
    5966:	2210      	movs	r2, #16
    5968:	4669      	mov	r1, sp
    596a:	f7fa fca9 	bl	2c0 <memcpy>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    596e:	4631      	mov	r1, r6
    5970:	f242 001a 	movw	r0, #8218	; 0x201a
    5974:	f7ff fa40 	bl	4df8 <bt_hci_cmd_send>
		goto done;
    5978:	e7dc      	b.n	5934 <le_ltk_request+0x8c>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    597a:	f105 0648 	add.w	r6, r5, #72	; 0x48
    597e:	4631      	mov	r1, r6
    5980:	2020      	movs	r0, #32
    5982:	f006 ff59 	bl	c838 <bt_keys_find>
    5986:	6728      	str	r0, [r5, #112]	; 0x70
		if (!conn->le.keys) {
    5988:	2800      	cmp	r0, #0
    598a:	d1a2      	bne.n	58d2 <le_ltk_request+0x2a>
			conn->le.keys = bt_keys_find(BT_KEYS_SLAVE_LTK,
    598c:	4631      	mov	r1, r6
    598e:	2001      	movs	r0, #1
    5990:	f006 ff52 	bl	c838 <bt_keys_find>
    5994:	6728      	str	r0, [r5, #112]	; 0x70
    5996:	e79c      	b.n	58d2 <le_ltk_request+0x2a>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    5998:	2112      	movs	r1, #18
    599a:	f242 001a 	movw	r0, #8218	; 0x201a
    599e:	f7fe fccd 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    59a2:	4606      	mov	r6, r0
    59a4:	2800      	cmp	r0, #0
    59a6:	d0c5      	beq.n	5934 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    59a8:	2112      	movs	r1, #18
    59aa:	3008      	adds	r0, #8
    59ac:	f014 fd22 	bl	1a3f4 <net_buf_simple_add>
		cp->handle = evt->handle;
    59b0:	8823      	ldrh	r3, [r4, #0]
    59b2:	4604      	mov	r4, r0
    59b4:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->ltk.val,
    59b8:	6f29      	ldr	r1, [r5, #112]	; 0x70
    59ba:	79ca      	ldrb	r2, [r1, #7]
    59bc:	311a      	adds	r1, #26
    59be:	4620      	mov	r0, r4
    59c0:	f7fa fc7e 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    59c4:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    59c6:	79d8      	ldrb	r0, [r3, #7]
    59c8:	280f      	cmp	r0, #15
    59ca:	d905      	bls.n	59d8 <le_ltk_request+0x130>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    59cc:	4631      	mov	r1, r6
    59ce:	f242 001a 	movw	r0, #8218	; 0x201a
    59d2:	f7ff fa11 	bl	4df8 <bt_hci_cmd_send>
		goto done;
    59d6:	e7ad      	b.n	5934 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    59d8:	f1c0 0210 	rsb	r2, r0, #16
    59dc:	2100      	movs	r1, #0
    59de:	4420      	add	r0, r4
    59e0:	f023 ffda 	bl	29998 <memset>
    59e4:	e7f2      	b.n	59cc <le_ltk_request+0x124>
	    conn->le.keys->slave_ltk.ediv == evt->ediv) {
    59e6:	f8b3 2078 	ldrh.w	r2, [r3, #120]	; 0x78
    59ea:	8963      	ldrh	r3, [r4, #10]
	    conn->le.keys->slave_ltk.rand == evt->rand &&
    59ec:	429a      	cmp	r2, r3
    59ee:	d18f      	bne.n	5910 <le_ltk_request+0x68>
		buf = bt_hci_cmd_create(BT_HCI_OP_LE_LTK_REQ_REPLY,
    59f0:	2112      	movs	r1, #18
    59f2:	f242 001a 	movw	r0, #8218	; 0x201a
    59f6:	f7fe fca1 	bl	433c <bt_hci_cmd_create>
		if (!buf) {
    59fa:	4606      	mov	r6, r0
    59fc:	2800      	cmp	r0, #0
    59fe:	d099      	beq.n	5934 <le_ltk_request+0x8c>
		cp = net_buf_add(buf, sizeof(*cp));
    5a00:	2112      	movs	r1, #18
    5a02:	3008      	adds	r0, #8
    5a04:	f014 fcf6 	bl	1a3f4 <net_buf_simple_add>
		cp->handle = evt->handle;
    5a08:	8823      	ldrh	r3, [r4, #0]
    5a0a:	4604      	mov	r4, r0
    5a0c:	f824 3b02 	strh.w	r3, [r4], #2
		memcpy(cp->ltk, conn->le.keys->slave_ltk.val,
    5a10:	6f29      	ldr	r1, [r5, #112]	; 0x70
    5a12:	79ca      	ldrb	r2, [r1, #7]
    5a14:	317a      	adds	r1, #122	; 0x7a
    5a16:	4620      	mov	r0, r4
    5a18:	f7fa fc52 	bl	2c0 <memcpy>
		if (conn->le.keys->enc_size < sizeof(cp->ltk)) {
    5a1c:	6f2b      	ldr	r3, [r5, #112]	; 0x70
    5a1e:	79d8      	ldrb	r0, [r3, #7]
    5a20:	280f      	cmp	r0, #15
    5a22:	d905      	bls.n	5a30 <le_ltk_request+0x188>
		bt_hci_cmd_send(BT_HCI_OP_LE_LTK_REQ_REPLY, buf);
    5a24:	4631      	mov	r1, r6
    5a26:	f242 001a 	movw	r0, #8218	; 0x201a
    5a2a:	f7ff f9e5 	bl	4df8 <bt_hci_cmd_send>
		goto done;
    5a2e:	e781      	b.n	5934 <le_ltk_request+0x8c>
			memset(cp->ltk + conn->le.keys->enc_size, 0,
    5a30:	f1c0 0210 	rsb	r2, r0, #16
    5a34:	2100      	movs	r1, #0
    5a36:	4420      	add	r0, r4
    5a38:	f023 ffae 	bl	29998 <memset>
    5a3c:	e7f2      	b.n	5a24 <le_ltk_request+0x17c>
	...

00005a40 <le_ltk_request>:
{
    5a40:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5a42:	4b15      	ldr	r3, [pc, #84]	; (5a98 <le_ltk_request+0x58>)
    5a44:	e9d3 4500 	ldrd	r4, r5, [r3]
    5a48:	2400      	movs	r4, #0
    5a4a:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    5a4e:	ea54 0305 	orrs.w	r3, r4, r5
    5a52:	d008      	beq.n	5a66 <le_ltk_request+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_LTK_REQUEST)) {
    5a54:	4b11      	ldr	r3, [pc, #68]	; (5a9c <le_ltk_request+0x5c>)
    5a56:	e9d3 4500 	ldrd	r4, r5, [r3]
    5a5a:	f004 0410 	and.w	r4, r4, #16
    5a5e:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    5a60:	ea54 0305 	orrs.w	r3, r4, r5
    5a64:	d100      	bne.n	5a68 <le_ltk_request+0x28>
    5a66:	bd70      	pop	{r4, r5, r6, pc}
    5a68:	4613      	mov	r3, r2
    5a6a:	460d      	mov	r5, r1
    5a6c:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_LTK_REQUEST, sizeof(*sep));
    5a6e:	220c      	movs	r2, #12
    5a70:	2105      	movs	r1, #5
    5a72:	4618      	mov	r0, r3
    5a74:	f007 f862 	bl	cb3c <meta_evt>
    5a78:	4606      	mov	r6, r0
	sep->handle = sys_cpu_to_le16(handle);
    5a7a:	f820 5b02 	strh.w	r5, [r0], #2
	memcpy(&sep->rand, pdu_data->payload.llctrl.ctrldata.enc_req.rand,
    5a7e:	2208      	movs	r2, #8
    5a80:	1d21      	adds	r1, r4, #4
    5a82:	f7fa fc1d 	bl	2c0 <memcpy>
	memcpy(&sep->ediv, pdu_data->payload.llctrl.ctrldata.enc_req.ediv,
    5a86:	2202      	movs	r2, #2
    5a88:	f104 010c 	add.w	r1, r4, #12
    5a8c:	f106 000a 	add.w	r0, r6, #10
    5a90:	f7fa fc16 	bl	2c0 <memcpy>
    5a94:	e7e7      	b.n	5a66 <le_ltk_request+0x26>
    5a96:	bf00      	nop
    5a98:	2000bba8 	.word	0x2000bba8
    5a9c:	2000bbb0 	.word	0x2000bbb0

00005aa0 <hci_le_meta_event>:
{
    5aa0:	b538      	push	{r3, r4, r5, lr}
    5aa2:	4604      	mov	r4, r0
	struct bt_hci_evt_le_meta_event *evt = (void *)buf->data;
    5aa4:	f850 5f08 	ldr.w	r5, [r0, #8]!
	net_buf_pull(buf, sizeof(*evt));
    5aa8:	2101      	movs	r1, #1
    5aaa:	f014 fcf0 	bl	1a48e <net_buf_simple_pull>
	switch (evt->subevent) {
    5aae:	782b      	ldrb	r3, [r5, #0]
    5ab0:	3b01      	subs	r3, #1
    5ab2:	2b0b      	cmp	r3, #11
    5ab4:	d82e      	bhi.n	5b14 <hci_le_meta_event+0x74>
    5ab6:	e8df f003 	tbb	[pc, r3]
    5aba:	2a06      	.short	0x2a06
    5abc:	121e0e0a 	.word	0x121e0e0a
    5ac0:	2d262216 	.word	0x2d262216
    5ac4:	1a2d      	.short	0x1a2d
		le_conn_complete(buf);
    5ac6:	4620      	mov	r0, r4
    5ac8:	f7ff fc14 	bl	52f4 <le_conn_complete>
		break;
    5acc:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_update_complete(buf);
    5ace:	4620      	mov	r0, r4
    5ad0:	f7fe fb52 	bl	4178 <le_conn_update_complete>
		break;
    5ad4:	bd38      	pop	{r3, r4, r5, pc}
		le_remote_feat_complete(buf);
    5ad6:	4620      	mov	r0, r4
    5ad8:	f7ff fd66 	bl	55a8 <le_remote_feat_complete>
		break;
    5adc:	bd38      	pop	{r3, r4, r5, pc}
		le_conn_param_req(buf);
    5ade:	4620      	mov	r0, r4
    5ae0:	f7ff fe80 	bl	57e4 <le_conn_param_req>
		break;
    5ae4:	bd38      	pop	{r3, r4, r5, pc}
		le_data_len_change(buf);
    5ae6:	4620      	mov	r0, r4
    5ae8:	f7fe fafc 	bl	40e4 <le_data_len_change>
		break;
    5aec:	bd38      	pop	{r3, r4, r5, pc}
		le_phy_update_complete(buf);
    5aee:	4620      	mov	r0, r4
    5af0:	f7ff fdde 	bl	56b0 <le_phy_update_complete>
		break;
    5af4:	bd38      	pop	{r3, r4, r5, pc}
		le_ltk_request(buf);
    5af6:	4620      	mov	r0, r4
    5af8:	f7ff fed6 	bl	58a8 <le_ltk_request>
		break;
    5afc:	bd38      	pop	{r3, r4, r5, pc}
		le_pkey_complete(buf);
    5afe:	4620      	mov	r0, r4
    5b00:	f7fe f9f0 	bl	3ee4 <le_pkey_complete>
		break;
    5b04:	bd38      	pop	{r3, r4, r5, pc}
		le_dhkey_complete(buf);
    5b06:	4620      	mov	r0, r4
    5b08:	f7fe f916 	bl	3d38 <le_dhkey_complete>
		break;
    5b0c:	bd38      	pop	{r3, r4, r5, pc}
		le_adv_report(buf);
    5b0e:	4620      	mov	r0, r4
    5b10:	f7ff fb3c 	bl	518c <le_adv_report>
    5b14:	bd38      	pop	{r3, r4, r5, pc}

00005b16 <hci_event>:
{
    5b16:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5b18:	6885      	ldr	r5, [r0, #8]
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5b1a:	782b      	ldrb	r3, [r5, #0]
 * @return true if the event can be processed in the RX thread, false
 *         if it cannot.
 */
static inline bool bt_hci_evt_is_prio(u8_t evt)
{
	switch (evt) {
    5b1c:	2b0e      	cmp	r3, #14
    5b1e:	d316      	bcc.n	5b4e <hci_event+0x38>
    5b20:	2b0f      	cmp	r3, #15
    5b22:	d901      	bls.n	5b28 <hci_event+0x12>
    5b24:	2b13      	cmp	r3, #19
    5b26:	d112      	bne.n	5b4e <hci_event+0x38>
	case BT_HCI_EVT_CMD_COMPLETE:
	case BT_HCI_EVT_CMD_STATUS:
#if defined(CONFIG_BT_CONN)
	case BT_HCI_EVT_NUM_COMPLETED_PACKETS:
#endif
		return true;
    5b28:	2301      	movs	r3, #1
    5b2a:	b993      	cbnz	r3, 5b52 <hci_event+0x3c>
    5b2c:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5b2e:	2102      	movs	r1, #2
    5b30:	3008      	adds	r0, #8
    5b32:	f014 fcac 	bl	1a48e <net_buf_simple_pull>
	switch (hdr->evt) {
    5b36:	782b      	ldrb	r3, [r5, #0]
    5b38:	2b08      	cmp	r3, #8
    5b3a:	d019      	beq.n	5b70 <hci_event+0x5a>
    5b3c:	d90f      	bls.n	5b5e <hci_event+0x48>
    5b3e:	2b30      	cmp	r3, #48	; 0x30
    5b40:	d01a      	beq.n	5b78 <hci_event+0x62>
    5b42:	2b3e      	cmp	r3, #62	; 0x3e
    5b44:	d110      	bne.n	5b68 <hci_event+0x52>
		hci_le_meta_event(buf);
    5b46:	4620      	mov	r0, r4
    5b48:	f7ff ffaa 	bl	5aa0 <hci_le_meta_event>
		break;
    5b4c:	e00c      	b.n	5b68 <hci_event+0x52>
	default:
		return false;
    5b4e:	2300      	movs	r3, #0
    5b50:	e7eb      	b.n	5b2a <hci_event+0x14>
	BT_ASSERT(!bt_hci_evt_is_prio(hdr->evt));
    5b52:	4040      	eors	r0, r0
    5b54:	f380 8811 	msr	BASEPRI, r0
    5b58:	f04f 0004 	mov.w	r0, #4
    5b5c:	df02      	svc	2
	switch (hdr->evt) {
    5b5e:	2b05      	cmp	r3, #5
    5b60:	d102      	bne.n	5b68 <hci_event+0x52>
		hci_disconn_complete(buf);
    5b62:	4620      	mov	r0, r4
    5b64:	f7ff fa54 	bl	5010 <hci_disconn_complete>
	net_buf_unref(buf);
    5b68:	4620      	mov	r0, r4
    5b6a:	f014 fbf7 	bl	1a35c <net_buf_unref>
    5b6e:	bd38      	pop	{r3, r4, r5, pc}
		hci_encrypt_change(buf);
    5b70:	4620      	mov	r0, r4
    5b72:	f7fe fa56 	bl	4022 <hci_encrypt_change>
		break;
    5b76:	e7f7      	b.n	5b68 <hci_event+0x52>
		hci_encrypt_key_refresh_complete(buf);
    5b78:	4620      	mov	r0, r4
    5b7a:	f7fe fa7a 	bl	4072 <hci_encrypt_key_refresh_complete>
		break;
    5b7e:	e7f3      	b.n	5b68 <hci_event+0x52>

00005b80 <send_cmd>:
{
    5b80:	b538      	push	{r3, r4, r5, lr}
	buf = net_buf_get(&bt_dev.cmd_tx_queue, K_NO_WAIT);
    5b82:	2100      	movs	r1, #0
    5b84:	4820      	ldr	r0, [pc, #128]	; (5c08 <send_cmd+0x88>)
    5b86:	f014 fbbc 	bl	1a302 <net_buf_get>
	BT_ASSERT(buf);
    5b8a:	b1d0      	cbz	r0, 5bc2 <send_cmd+0x42>
    5b8c:	4604      	mov	r4, r0
    5b8e:	4d1f      	ldr	r5, [pc, #124]	; (5c0c <send_cmd+0x8c>)
    5b90:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    5b94:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    5b98:	f022 ff3e 	bl	28a18 <_impl_k_sem_take>
	if (bt_dev.sent_cmd) {
    5b9c:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    5ba0:	b120      	cbz	r0, 5bac <send_cmd+0x2c>
		net_buf_unref(bt_dev.sent_cmd);
    5ba2:	f014 fbdb 	bl	1a35c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5ba6:	2200      	movs	r2, #0
    5ba8:	f8c5 20c0 	str.w	r2, [r5, #192]	; 0xc0
	bt_dev.sent_cmd = net_buf_ref(buf);
    5bac:	4620      	mov	r0, r4
    5bae:	f014 fbf1 	bl	1a394 <net_buf_ref>
    5bb2:	4b16      	ldr	r3, [pc, #88]	; (5c0c <send_cmd+0x8c>)
    5bb4:	f8c3 00c0 	str.w	r0, [r3, #192]	; 0xc0
	err = bt_send(buf);
    5bb8:	4620      	mov	r0, r4
    5bba:	f7ff f913 	bl	4de4 <bt_send>
	if (err) {
    5bbe:	b930      	cbnz	r0, 5bce <send_cmd+0x4e>
    5bc0:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    5bc2:	4040      	eors	r0, r0
    5bc4:	f380 8811 	msr	BASEPRI, r0
    5bc8:	f04f 0004 	mov.w	r0, #4
    5bcc:	df02      	svc	2
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    5bce:	4d0f      	ldr	r5, [pc, #60]	; (5c0c <send_cmd+0x8c>)
    5bd0:	f105 00a8 	add.w	r0, r5, #168	; 0xa8
    5bd4:	f022 ff0d 	bl	289f2 <_impl_k_sem_give>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    5bd8:	f104 0310 	add.w	r3, r4, #16
    5bdc:	89e2      	ldrh	r2, [r4, #14]
    5bde:	4413      	add	r3, r2
    5be0:	3303      	adds	r3, #3
    5be2:	f023 0303 	bic.w	r3, r3, #3
		hci_cmd_done(cmd(buf)->opcode, BT_HCI_ERR_UNSPECIFIED,
    5be6:	2200      	movs	r2, #0
    5be8:	211f      	movs	r1, #31
    5bea:	8858      	ldrh	r0, [r3, #2]
    5bec:	f7fe fb10 	bl	4210 <hci_cmd_done>
		net_buf_unref(bt_dev.sent_cmd);
    5bf0:	f8d5 00c0 	ldr.w	r0, [r5, #192]	; 0xc0
    5bf4:	f014 fbb2 	bl	1a35c <net_buf_unref>
		bt_dev.sent_cmd = NULL;
    5bf8:	2300      	movs	r3, #0
    5bfa:	f8c5 30c0 	str.w	r3, [r5, #192]	; 0xc0
		net_buf_unref(buf);
    5bfe:	4620      	mov	r0, r4
    5c00:	f014 fbac 	bl	1a35c <net_buf_unref>
}
    5c04:	e7dc      	b.n	5bc0 <send_cmd+0x40>
    5c06:	bf00      	nop
    5c08:	2000b98c 	.word	0x2000b98c
    5c0c:	2000b8b8 	.word	0x2000b8b8

00005c10 <process_events>:
{
    5c10:	b538      	push	{r3, r4, r5, lr}
    5c12:	4604      	mov	r4, r0
    5c14:	460d      	mov	r5, r1
	for (; count; ev++, count--) {
    5c16:	e003      	b.n	5c20 <process_events+0x10>
				send_cmd();
    5c18:	f7ff ffb2 	bl	5b80 <send_cmd>
	for (; count; ev++, count--) {
    5c1c:	3414      	adds	r4, #20
    5c1e:	3d01      	subs	r5, #1
    5c20:	b1a5      	cbz	r5, 5c4c <process_events+0x3c>
		switch (ev->state) {
    5c22:	7b63      	ldrb	r3, [r4, #13]
    5c24:	091b      	lsrs	r3, r3, #4
    5c26:	2b04      	cmp	r3, #4
    5c28:	d1f8      	bne.n	5c1c <process_events+0xc>
			if (ev->tag == BT_EVENT_CMD_TX) {
    5c2a:	7b23      	ldrb	r3, [r4, #12]
    5c2c:	2b00      	cmp	r3, #0
    5c2e:	d0f3      	beq.n	5c18 <process_events+0x8>
				if (ev->tag == BT_EVENT_CONN_TX_NOTIFY) {
    5c30:	2b01      	cmp	r3, #1
    5c32:	d006      	beq.n	5c42 <process_events+0x32>
				} else if (ev->tag == BT_EVENT_CONN_TX_QUEUE) {
    5c34:	2b02      	cmp	r3, #2
    5c36:	d1f1      	bne.n	5c1c <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    5c38:	6920      	ldr	r0, [r4, #16]
					bt_conn_process_tx(conn);
    5c3a:	382c      	subs	r0, #44	; 0x2c
    5c3c:	f001 f9c8 	bl	6fd0 <bt_conn_process_tx>
    5c40:	e7ec      	b.n	5c1c <process_events+0xc>
					conn = CONTAINER_OF(ev->fifo,
    5c42:	6920      	ldr	r0, [r4, #16]
					bt_conn_notify_tx(conn);
    5c44:	381c      	subs	r0, #28
    5c46:	f000 fd65 	bl	6714 <bt_conn_notify_tx>
    5c4a:	e7e7      	b.n	5c1c <process_events+0xc>
}
    5c4c:	bd38      	pop	{r3, r4, r5, pc}
	...

00005c50 <hci_tx_thread>:
{
    5c50:	b538      	push	{r3, r4, r5, lr}
		events[0].state = K_POLL_STATE_NOT_READY;
    5c52:	4c0f      	ldr	r4, [pc, #60]	; (5c90 <hci_tx_thread+0x40>)
    5c54:	7b63      	ldrb	r3, [r4, #13]
    5c56:	f36f 1307 	bfc	r3, #4, #4
    5c5a:	7363      	strb	r3, [r4, #13]
			ev_count += bt_conn_prepare_events(&events[1]);
    5c5c:	f104 0014 	add.w	r0, r4, #20
    5c60:	f000 feca 	bl	69f8 <bt_conn_prepare_events>
    5c64:	1c45      	adds	r5, r0, #1
		err = k_poll(events, ev_count, K_FOREVER);
    5c66:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    5c6a:	4629      	mov	r1, r5
    5c6c:	4620      	mov	r0, r4
    5c6e:	f022 f81f 	bl	27cb0 <k_poll>
		BT_ASSERT(err == 0);
    5c72:	b930      	cbnz	r0, 5c82 <hci_tx_thread+0x32>
		process_events(events, ev_count);
    5c74:	4629      	mov	r1, r5
    5c76:	4806      	ldr	r0, [pc, #24]	; (5c90 <hci_tx_thread+0x40>)
    5c78:	f7ff ffca 	bl	5c10 <process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    5c7c:	f022 fd60 	bl	28740 <_impl_k_yield>
    5c80:	e7e7      	b.n	5c52 <hci_tx_thread+0x2>
		BT_ASSERT(err == 0);
    5c82:	4040      	eors	r0, r0
    5c84:	f380 8811 	msr	BASEPRI, r0
    5c88:	f04f 0004 	mov.w	r0, #4
    5c8c:	df02      	svc	2
    5c8e:	bf00      	nop
    5c90:	2000b9a0 	.word	0x2000b9a0

00005c94 <bt_recv>:
{
    5c94:	b510      	push	{r4, lr}
    5c96:	4604      	mov	r4, r0
	pool = net_buf_pool_get(buf->pool_id);
    5c98:	7980      	ldrb	r0, [r0, #6]
    5c9a:	f014 fae5 	bl	1a268 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    5c9e:	8ac3      	ldrh	r3, [r0, #22]
    5ca0:	2b03      	cmp	r3, #3
    5ca2:	d910      	bls.n	5cc6 <bt_recv+0x32>
    5ca4:	f104 0310 	add.w	r3, r4, #16
    5ca8:	89e2      	ldrh	r2, [r4, #14]
    5caa:	4413      	add	r3, r2
    5cac:	3303      	adds	r3, #3
    5cae:	f023 0303 	bic.w	r3, r3, #3
 *
 *  @return The BT_* type to of the buffer
 */
static inline enum bt_buf_type bt_buf_get_type(struct net_buf *buf)
{
	return *(u8_t *)net_buf_user_data(buf);
    5cb2:	781b      	ldrb	r3, [r3, #0]
	switch (bt_buf_get_type(buf)) {
    5cb4:	2b01      	cmp	r3, #1
    5cb6:	d00c      	beq.n	5cd2 <bt_recv+0x3e>
    5cb8:	2b03      	cmp	r3, #3
    5cba:	d10f      	bne.n	5cdc <bt_recv+0x48>
		hci_acl(buf);
    5cbc:	4620      	mov	r0, r4
    5cbe:	f7fe f949 	bl	3f54 <hci_acl>
		return 0;
    5cc2:	2000      	movs	r0, #0
    5cc4:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5cc6:	4620      	mov	r0, r4
    5cc8:	f014 fb48 	bl	1a35c <net_buf_unref>
		return -EINVAL;
    5ccc:	f06f 0015 	mvn.w	r0, #21
    5cd0:	bd10      	pop	{r4, pc}
		hci_event(buf);
    5cd2:	4620      	mov	r0, r4
    5cd4:	f7ff ff1f 	bl	5b16 <hci_event>
		return 0;
    5cd8:	2000      	movs	r0, #0
    5cda:	bd10      	pop	{r4, pc}
		net_buf_unref(buf);
    5cdc:	4620      	mov	r0, r4
    5cde:	f014 fb3d 	bl	1a35c <net_buf_unref>
		return -EINVAL;
    5ce2:	f06f 0015 	mvn.w	r0, #21
}
    5ce6:	bd10      	pop	{r4, pc}

00005ce8 <bt_recv_prio>:
{
    5ce8:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_evt_hdr *hdr = (void *)buf->data;
    5cea:	6885      	ldr	r5, [r0, #8]
    5cec:	f100 0310 	add.w	r3, r0, #16
    5cf0:	89c2      	ldrh	r2, [r0, #14]
    5cf2:	4413      	add	r3, r2
    5cf4:	3303      	adds	r3, #3
    5cf6:	f023 0303 	bic.w	r3, r3, #3
    5cfa:	781b      	ldrb	r3, [r3, #0]
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5cfc:	2b01      	cmp	r3, #1
    5cfe:	d120      	bne.n	5d42 <bt_recv_prio+0x5a>
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5d00:	8983      	ldrh	r3, [r0, #12]
    5d02:	2b01      	cmp	r3, #1
    5d04:	d923      	bls.n	5d4e <bt_recv_prio+0x66>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5d06:	782b      	ldrb	r3, [r5, #0]
	switch (evt) {
    5d08:	2b0e      	cmp	r3, #14
    5d0a:	d326      	bcc.n	5d5a <bt_recv_prio+0x72>
    5d0c:	2b0f      	cmp	r3, #15
    5d0e:	d901      	bls.n	5d14 <bt_recv_prio+0x2c>
    5d10:	2b13      	cmp	r3, #19
    5d12:	d122      	bne.n	5d5a <bt_recv_prio+0x72>
		return true;
    5d14:	2301      	movs	r3, #1
    5d16:	b313      	cbz	r3, 5d5e <bt_recv_prio+0x76>
    5d18:	4604      	mov	r4, r0
	net_buf_pull(buf, sizeof(*hdr));
    5d1a:	2102      	movs	r1, #2
    5d1c:	3008      	adds	r0, #8
    5d1e:	f014 fbb6 	bl	1a48e <net_buf_simple_pull>
	switch (hdr->evt) {
    5d22:	782b      	ldrb	r3, [r5, #0]
    5d24:	2b0f      	cmp	r3, #15
    5d26:	d028      	beq.n	5d7a <bt_recv_prio+0x92>
    5d28:	2b13      	cmp	r3, #19
    5d2a:	d02a      	beq.n	5d82 <bt_recv_prio+0x9a>
    5d2c:	2b0e      	cmp	r3, #14
    5d2e:	d01c      	beq.n	5d6a <bt_recv_prio+0x82>
		net_buf_unref(buf);
    5d30:	4620      	mov	r0, r4
    5d32:	f014 fb13 	bl	1a35c <net_buf_unref>
		BT_ASSERT(0);
    5d36:	4040      	eors	r0, r0
    5d38:	f380 8811 	msr	BASEPRI, r0
    5d3c:	f04f 0004 	mov.w	r0, #4
    5d40:	df02      	svc	2
	BT_ASSERT(bt_buf_get_type(buf) == BT_BUF_EVT);
    5d42:	4040      	eors	r0, r0
    5d44:	f380 8811 	msr	BASEPRI, r0
    5d48:	f04f 0004 	mov.w	r0, #4
    5d4c:	df02      	svc	2
	BT_ASSERT(buf->len >= sizeof(*hdr));
    5d4e:	4040      	eors	r0, r0
    5d50:	f380 8811 	msr	BASEPRI, r0
    5d54:	f04f 0004 	mov.w	r0, #4
    5d58:	df02      	svc	2
		return false;
    5d5a:	2300      	movs	r3, #0
    5d5c:	e7db      	b.n	5d16 <bt_recv_prio+0x2e>
	BT_ASSERT(bt_hci_evt_is_prio(hdr->evt));
    5d5e:	4040      	eors	r0, r0
    5d60:	f380 8811 	msr	BASEPRI, r0
    5d64:	f04f 0004 	mov.w	r0, #4
    5d68:	df02      	svc	2
		hci_cmd_complete(buf);
    5d6a:	4620      	mov	r0, r4
    5d6c:	f7fe fa70 	bl	4250 <hci_cmd_complete>
	net_buf_unref(buf);
    5d70:	4620      	mov	r0, r4
    5d72:	f014 faf3 	bl	1a35c <net_buf_unref>
}
    5d76:	2000      	movs	r0, #0
    5d78:	bd38      	pop	{r3, r4, r5, pc}
		hci_cmd_status(buf);
    5d7a:	4620      	mov	r0, r4
    5d7c:	f7fe fa80 	bl	4280 <hci_cmd_status>
		break;
    5d80:	e7f6      	b.n	5d70 <bt_recv_prio+0x88>
		hci_num_completed_packets(buf);
    5d82:	4620      	mov	r0, r4
    5d84:	f7fe fa92 	bl	42ac <hci_num_completed_packets>
		break;
    5d88:	e7f2      	b.n	5d70 <bt_recv_prio+0x88>
	...

00005d8c <bt_hci_driver_register>:
	if (bt_dev.drv) {
    5d8c:	4b0a      	ldr	r3, [pc, #40]	; (5db8 <bt_hci_driver_register+0x2c>)
    5d8e:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5d92:	b943      	cbnz	r3, 5da6 <bt_hci_driver_register+0x1a>
	if (!drv->open || !drv->send) {
    5d94:	6883      	ldr	r3, [r0, #8]
    5d96:	b14b      	cbz	r3, 5dac <bt_hci_driver_register+0x20>
    5d98:	68c3      	ldr	r3, [r0, #12]
    5d9a:	b153      	cbz	r3, 5db2 <bt_hci_driver_register+0x26>
	bt_dev.drv = drv;
    5d9c:	4b06      	ldr	r3, [pc, #24]	; (5db8 <bt_hci_driver_register+0x2c>)
    5d9e:	f8c3 00e4 	str.w	r0, [r3, #228]	; 0xe4
	return 0;
    5da2:	2000      	movs	r0, #0
    5da4:	4770      	bx	lr
		return -EALREADY;
    5da6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    5daa:	4770      	bx	lr
		return -EINVAL;
    5dac:	f06f 0015 	mvn.w	r0, #21
    5db0:	4770      	bx	lr
    5db2:	f06f 0015 	mvn.w	r0, #21
}
    5db6:	4770      	bx	lr
    5db8:	2000b8b8 	.word	0x2000b8b8

00005dbc <bt_enable>:
{
    5dbc:	b530      	push	{r4, r5, lr}
    5dbe:	b087      	sub	sp, #28
	if (!bt_dev.drv) {
    5dc0:	4b29      	ldr	r3, [pc, #164]	; (5e68 <bt_enable+0xac>)
    5dc2:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5dc6:	2b00      	cmp	r3, #0
    5dc8:	d047      	beq.n	5e5a <bt_enable+0x9e>
    5dca:	4b28      	ldr	r3, [pc, #160]	; (5e6c <bt_enable+0xb0>)
    5dcc:	f3bf 8f5b 	dmb	ish
    5dd0:	e853 2f00 	ldrex	r2, [r3]
    5dd4:	f042 0101 	orr.w	r1, r2, #1
    5dd8:	e843 1400 	strex	r4, r1, [r3]
    5ddc:	2c00      	cmp	r4, #0
    5dde:	d1f7      	bne.n	5dd0 <bt_enable+0x14>
    5de0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_ENABLE)) {
    5de4:	f012 0f01 	tst.w	r2, #1
    5de8:	d13a      	bne.n	5e60 <bt_enable+0xa4>
    5dea:	4604      	mov	r4, r0
	ready_cb = cb;
    5dec:	4b20      	ldr	r3, [pc, #128]	; (5e70 <bt_enable+0xb4>)
    5dee:	6018      	str	r0, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    5df0:	2300      	movs	r3, #0
    5df2:	9305      	str	r3, [sp, #20]
    5df4:	9304      	str	r3, [sp, #16]
    5df6:	f06f 0208 	mvn.w	r2, #8
    5dfa:	9203      	str	r2, [sp, #12]
    5dfc:	9302      	str	r3, [sp, #8]
    5dfe:	9301      	str	r3, [sp, #4]
    5e00:	9300      	str	r3, [sp, #0]
    5e02:	4b1c      	ldr	r3, [pc, #112]	; (5e74 <bt_enable+0xb8>)
    5e04:	f44f 7220 	mov.w	r2, #640	; 0x280
    5e08:	491b      	ldr	r1, [pc, #108]	; (5e78 <bt_enable+0xbc>)
    5e0a:	481c      	ldr	r0, [pc, #112]	; (5e7c <bt_enable+0xc0>)
    5e0c:	f023 f870 	bl	28ef0 <_impl_k_thread_create>
	err = bt_dev.drv->open();
    5e10:	4b15      	ldr	r3, [pc, #84]	; (5e68 <bt_enable+0xac>)
    5e12:	f8d3 30e4 	ldr.w	r3, [r3, #228]	; 0xe4
    5e16:	689b      	ldr	r3, [r3, #8]
    5e18:	4798      	blx	r3
	if (err) {
    5e1a:	4605      	mov	r5, r0
    5e1c:	b980      	cbnz	r0, 5e40 <bt_enable+0x84>
	if (!cb) {
    5e1e:	b194      	cbz	r4, 5e46 <bt_enable+0x8a>
    5e20:	4b17      	ldr	r3, [pc, #92]	; (5e80 <bt_enable+0xc4>)
    5e22:	f3bf 8f5b 	dmb	ish
    5e26:	e853 2f00 	ldrex	r2, [r3]
    5e2a:	f042 0101 	orr.w	r1, r2, #1
    5e2e:	e843 1000 	strex	r0, r1, [r3]
    5e32:	2800      	cmp	r0, #0
    5e34:	d1f7      	bne.n	5e26 <bt_enable+0x6a>
    5e36:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
    5e3a:	f012 0f01 	tst.w	r2, #1
    5e3e:	d006      	beq.n	5e4e <bt_enable+0x92>
}
    5e40:	4628      	mov	r0, r5
    5e42:	b007      	add	sp, #28
    5e44:	bd30      	pop	{r4, r5, pc}
		return bt_init();
    5e46:	f7ff f8bb 	bl	4fc0 <bt_init>
    5e4a:	4605      	mov	r5, r0
    5e4c:	e7f8      	b.n	5e40 <bt_enable+0x84>
		k_queue_append(&work_q->queue, work);
    5e4e:	f1a3 0108 	sub.w	r1, r3, #8
    5e52:	480c      	ldr	r0, [pc, #48]	; (5e84 <bt_enable+0xc8>)
    5e54:	f022 fa36 	bl	282c4 <k_queue_append>
    5e58:	e7f2      	b.n	5e40 <bt_enable+0x84>
		return -ENODEV;
    5e5a:	f06f 0512 	mvn.w	r5, #18
    5e5e:	e7ef      	b.n	5e40 <bt_enable+0x84>
		return -EALREADY;
    5e60:	f06f 0577 	mvn.w	r5, #119	; 0x77
    5e64:	e7ec      	b.n	5e40 <bt_enable+0x84>
    5e66:	bf00      	nop
    5e68:	2000b8b8 	.word	0x2000b8b8
    5e6c:	2000b928 	.word	0x2000b928
    5e70:	200003b8 	.word	0x200003b8
    5e74:	00005c51 	.word	0x00005c51
    5e78:	20003c50 	.word	0x20003c50
    5e7c:	200003c0 	.word	0x200003c0
    5e80:	2000b924 	.word	0x2000b924
    5e84:	20002bd8 	.word	0x20002bd8

00005e88 <bt_addr_le_is_bonded>:
{
    5e88:	b508      	push	{r3, lr}
		struct bt_keys *keys = bt_keys_find_addr(addr);
    5e8a:	f006 fd51 	bl	c930 <bt_keys_find_addr>
		return keys && keys->keys;
    5e8e:	b118      	cbz	r0, 5e98 <bt_addr_le_is_bonded+0x10>
    5e90:	8983      	ldrh	r3, [r0, #12]
    5e92:	b91b      	cbnz	r3, 5e9c <bt_addr_le_is_bonded+0x14>
    5e94:	2000      	movs	r0, #0
    5e96:	bd08      	pop	{r3, pc}
    5e98:	2000      	movs	r0, #0
    5e9a:	bd08      	pop	{r3, pc}
    5e9c:	2001      	movs	r0, #1
}
    5e9e:	bd08      	pop	{r3, pc}

00005ea0 <bt_le_adv_start>:

int bt_le_adv_start(const struct bt_le_adv_param *param,
		    const struct bt_data *ad, size_t ad_len,
		    const struct bt_data *sd, size_t sd_len)
{
    5ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    5ea4:	4605      	mov	r5, r0
    5ea6:	460c      	mov	r4, r1
    5ea8:	4617      	mov	r7, r2
    5eaa:	461e      	mov	r6, r3
	struct net_buf *buf;
	struct bt_hci_cp_le_set_adv_param *set_param;
	int err;

	if (!valid_adv_param(param)) {
    5eac:	f7fd ff88 	bl	3dc0 <valid_adv_param>
    5eb0:	2800      	cmp	r0, #0
    5eb2:	f000 808d 	beq.w	5fd0 <bt_le_adv_start+0x130>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    5eb6:	f3bf 8f5b 	dmb	ish
    5eba:	4b4b      	ldr	r3, [pc, #300]	; (5fe8 <bt_le_adv_start+0x148>)
    5ebc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5ebe:	f3bf 8f5b 	dmb	ish
		return -EINVAL;
	}

	if (atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    5ec2:	f013 0f20 	tst.w	r3, #32
    5ec6:	f040 8086 	bne.w	5fd6 <bt_le_adv_start+0x136>
		return -EALREADY;
	}

	err = set_ad(BT_HCI_OP_LE_SET_ADV_DATA, ad, ad_len);
    5eca:	463a      	mov	r2, r7
    5ecc:	4621      	mov	r1, r4
    5ece:	f242 0008 	movw	r0, #8200	; 0x2008
    5ed2:	f7fe fe52 	bl	4b7a <set_ad>
	if (err) {
    5ed6:	4604      	mov	r4, r0
    5ed8:	2800      	cmp	r0, #0
    5eda:	d13b      	bne.n	5f54 <bt_le_adv_start+0xb4>
	 * If sd was not provided but we enable connectable undirected
	 * advertising sd needs to be cleared from values set by previous calls.
	 * Clearing sd is done by calling set_ad() with NULL data and zero len.
	 * So following condition check is unusual but correct.
	 */
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5edc:	2e00      	cmp	r6, #0
    5ede:	d03c      	beq.n	5f5a <bt_le_adv_start+0xba>
		err = set_ad(BT_HCI_OP_LE_SET_SCAN_RSP_DATA, sd, sd_len);
    5ee0:	9a06      	ldr	r2, [sp, #24]
    5ee2:	4631      	mov	r1, r6
    5ee4:	f242 0009 	movw	r0, #8201	; 0x2009
    5ee8:	f7fe fe47 	bl	4b7a <set_ad>
		if (err) {
    5eec:	4604      	mov	r4, r0
    5eee:	bb88      	cbnz	r0, 5f54 <bt_le_adv_start+0xb4>
			return err;
		}
	}

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_SET_ADV_PARAM,
    5ef0:	210f      	movs	r1, #15
    5ef2:	f242 0006 	movw	r0, #8198	; 0x2006
    5ef6:	f7fe fa21 	bl	433c <bt_hci_cmd_create>
				sizeof(*set_param));
	if (!buf) {
    5efa:	4680      	mov	r8, r0
    5efc:	2800      	cmp	r0, #0
    5efe:	d06d      	beq.n	5fdc <bt_le_adv_start+0x13c>
		return -ENOBUFS;
	}

	set_param = net_buf_add(buf, sizeof(*set_param));
    5f00:	210f      	movs	r1, #15
    5f02:	3008      	adds	r0, #8
    5f04:	f014 fa76 	bl	1a3f4 <net_buf_simple_add>
    5f08:	4607      	mov	r7, r0

	memset(set_param, 0, sizeof(*set_param));
    5f0a:	220f      	movs	r2, #15
    5f0c:	2100      	movs	r1, #0
    5f0e:	f023 fd43 	bl	29998 <memset>
	set_param->min_interval = sys_cpu_to_le16(param->interval_min);
    5f12:	886b      	ldrh	r3, [r5, #2]
    5f14:	803b      	strh	r3, [r7, #0]
	set_param->max_interval = sys_cpu_to_le16(param->interval_max);
    5f16:	88ab      	ldrh	r3, [r5, #4]
    5f18:	807b      	strh	r3, [r7, #2]
	set_param->channel_map  = 0x07;
    5f1a:	2307      	movs	r3, #7
    5f1c:	737b      	strb	r3, [r7, #13]

	if (param->options & BT_LE_ADV_OPT_CONNECTABLE) {
    5f1e:	782b      	ldrb	r3, [r5, #0]
    5f20:	f013 0f01 	tst.w	r3, #1
    5f24:	d11e      	bne.n	5f64 <bt_le_adv_start+0xc4>
			set_param->own_addr_type = bt_dev.id_addr.type;
		}

		set_param->type = BT_LE_ADV_IND;
	} else {
		if (param->own_addr) {
    5f26:	68a8      	ldr	r0, [r5, #8]
    5f28:	b378      	cbz	r0, 5f8a <bt_le_adv_start+0xea>
			/* Only NRPA is allowed */
			if (!BT_ADDR_IS_NRPA(param->own_addr)) {
    5f2a:	7943      	ldrb	r3, [r0, #5]
    5f2c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
    5f30:	d157      	bne.n	5fe2 <bt_le_adv_start+0x142>
				return -EINVAL;
			}

			err = set_random_address(param->own_addr);
    5f32:	f7fe fd0b 	bl	494c <set_random_address>
    5f36:	4604      	mov	r4, r0
		} else {
			err = le_set_private_addr();
		}

		if (err) {
    5f38:	bb5c      	cbnz	r4, 5f92 <bt_le_adv_start+0xf2>
			net_buf_unref(buf);
			return err;
		}

		set_param->own_addr_type = BT_ADDR_LE_RANDOM;
    5f3a:	2301      	movs	r3, #1
    5f3c:	717b      	strb	r3, [r7, #5]

		if (sd) {
    5f3e:	b366      	cbz	r6, 5f9a <bt_le_adv_start+0xfa>
			set_param->type = BT_LE_ADV_SCAN_IND;
    5f40:	2302      	movs	r3, #2
    5f42:	713b      	strb	r3, [r7, #4]
		} else {
			set_param->type = BT_LE_ADV_NONCONN_IND;
		}
	}

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_SET_ADV_PARAM, buf, NULL);
    5f44:	2200      	movs	r2, #0
    5f46:	4641      	mov	r1, r8
    5f48:	f242 0006 	movw	r0, #8198	; 0x2006
    5f4c:	f7fe fa22 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    5f50:	4604      	mov	r4, r0
    5f52:	b328      	cbz	r0, 5fa0 <bt_le_adv_start+0x100>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
		atomic_set_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);
	}

	return 0;
}
    5f54:	4620      	mov	r0, r4
    5f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (sd || (param->options & BT_LE_ADV_OPT_CONNECTABLE)) {
    5f5a:	782b      	ldrb	r3, [r5, #0]
    5f5c:	f013 0f01 	tst.w	r3, #1
    5f60:	d0c6      	beq.n	5ef0 <bt_le_adv_start+0x50>
    5f62:	e7bd      	b.n	5ee0 <bt_le_adv_start+0x40>
    5f64:	f3bf 8f5b 	dmb	ish
    5f68:	4b1f      	ldr	r3, [pc, #124]	; (5fe8 <bt_le_adv_start+0x148>)
    5f6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    5f6c:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(bt_dev.flags,
    5f70:	f013 0f04 	tst.w	r3, #4
    5f74:	d105      	bne.n	5f82 <bt_le_adv_start+0xe2>
			set_param->own_addr_type = bt_dev.id_addr.type;
    5f76:	4b1c      	ldr	r3, [pc, #112]	; (5fe8 <bt_le_adv_start+0x148>)
    5f78:	781b      	ldrb	r3, [r3, #0]
    5f7a:	717b      	strb	r3, [r7, #5]
		set_param->type = BT_LE_ADV_IND;
    5f7c:	2300      	movs	r3, #0
    5f7e:	713b      	strb	r3, [r7, #4]
    5f80:	e7e0      	b.n	5f44 <bt_le_adv_start+0xa4>
				set_random_address(&bt_dev.id_addr.a);
    5f82:	481a      	ldr	r0, [pc, #104]	; (5fec <bt_le_adv_start+0x14c>)
    5f84:	f7fe fce2 	bl	494c <set_random_address>
    5f88:	e7f5      	b.n	5f76 <bt_le_adv_start+0xd6>
			err = le_set_private_addr();
    5f8a:	f7fe fd0f 	bl	49ac <le_set_private_addr>
    5f8e:	4604      	mov	r4, r0
    5f90:	e7d2      	b.n	5f38 <bt_le_adv_start+0x98>
			net_buf_unref(buf);
    5f92:	4640      	mov	r0, r8
    5f94:	f014 f9e2 	bl	1a35c <net_buf_unref>
			return err;
    5f98:	e7dc      	b.n	5f54 <bt_le_adv_start+0xb4>
			set_param->type = BT_LE_ADV_NONCONN_IND;
    5f9a:	2303      	movs	r3, #3
    5f9c:	713b      	strb	r3, [r7, #4]
    5f9e:	e7d1      	b.n	5f44 <bt_le_adv_start+0xa4>
	err = set_advertise_enable(true);
    5fa0:	2001      	movs	r0, #1
    5fa2:	f7fe fd71 	bl	4a88 <set_advertise_enable>
	if (err) {
    5fa6:	4604      	mov	r4, r0
    5fa8:	2800      	cmp	r0, #0
    5faa:	d1d3      	bne.n	5f54 <bt_le_adv_start+0xb4>
	if (!(param->options & BT_LE_ADV_OPT_ONE_TIME)) {
    5fac:	782b      	ldrb	r3, [r5, #0]
    5fae:	f013 0f02 	tst.w	r3, #2
    5fb2:	d1cf      	bne.n	5f54 <bt_le_adv_start+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    5fb4:	4b0e      	ldr	r3, [pc, #56]	; (5ff0 <bt_le_adv_start+0x150>)
    5fb6:	f3bf 8f5b 	dmb	ish
    5fba:	e853 2f00 	ldrex	r2, [r3]
    5fbe:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    5fc2:	e843 2100 	strex	r1, r2, [r3]
    5fc6:	2900      	cmp	r1, #0
    5fc8:	d1f7      	bne.n	5fba <bt_le_adv_start+0x11a>
    5fca:	f3bf 8f5b 	dmb	ish
    5fce:	e7c1      	b.n	5f54 <bt_le_adv_start+0xb4>
		return -EINVAL;
    5fd0:	f06f 0415 	mvn.w	r4, #21
    5fd4:	e7be      	b.n	5f54 <bt_le_adv_start+0xb4>
		return -EALREADY;
    5fd6:	f06f 0477 	mvn.w	r4, #119	; 0x77
    5fda:	e7bb      	b.n	5f54 <bt_le_adv_start+0xb4>
		return -ENOBUFS;
    5fdc:	f06f 0468 	mvn.w	r4, #104	; 0x68
    5fe0:	e7b8      	b.n	5f54 <bt_le_adv_start+0xb4>
				return -EINVAL;
    5fe2:	f06f 0415 	mvn.w	r4, #21
    5fe6:	e7b5      	b.n	5f54 <bt_le_adv_start+0xb4>
    5fe8:	2000b8b8 	.word	0x2000b8b8
    5fec:	2000b8b9 	.word	0x2000b8b9
    5ff0:	2000b928 	.word	0x2000b928

00005ff4 <bt_le_adv_stop>:

int bt_le_adv_stop(void)
{
    5ff4:	b510      	push	{r4, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    5ff6:	4b16      	ldr	r3, [pc, #88]	; (6050 <bt_le_adv_stop+0x5c>)
    5ff8:	f103 0270 	add.w	r2, r3, #112	; 0x70
    5ffc:	f3bf 8f5b 	dmb	ish
    6000:	e852 1f00 	ldrex	r1, [r2]
    6004:	f021 0140 	bic.w	r1, r1, #64	; 0x40
    6008:	e842 1000 	strex	r0, r1, [r2]
    600c:	2800      	cmp	r0, #0
    600e:	d1f7      	bne.n	6000 <bt_le_adv_stop+0xc>
    6010:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6014:	f3bf 8f5b 	dmb	ish
    6018:	6f1c      	ldr	r4, [r3, #112]	; 0x70
    601a:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    601e:	f3c4 1440 	ubfx	r4, r4, #5, #1
	/* Make sure advertising is not re-enabled later even if it's not
	 * currently enabled (i.e. BT_DEV_ADVERTISING is not set).
	 */
	atomic_clear_bit(bt_dev.flags, BT_DEV_KEEP_ADVERTISING);

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_ADVERTISING)) {
    6022:	b90c      	cbnz	r4, 6028 <bt_le_adv_stop+0x34>
			le_set_private_addr();
		}
	}

	return 0;
}
    6024:	4620      	mov	r0, r4
    6026:	bd10      	pop	{r4, pc}
	err = set_advertise_enable(false);
    6028:	2000      	movs	r0, #0
    602a:	f7fe fd2d 	bl	4a88 <set_advertise_enable>
	if (err) {
    602e:	4604      	mov	r4, r0
    6030:	2800      	cmp	r0, #0
    6032:	d1f7      	bne.n	6024 <bt_le_adv_stop+0x30>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6034:	f3bf 8f5b 	dmb	ish
    6038:	4b05      	ldr	r3, [pc, #20]	; (6050 <bt_le_adv_stop+0x5c>)
    603a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    603c:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    6040:	f3c3 2340 	ubfx	r3, r3, #9, #1
		if (atomic_test_bit(bt_dev.flags, BT_DEV_ACTIVE_SCAN)) {
    6044:	b90b      	cbnz	r3, 604a <bt_le_adv_stop+0x56>
	return 0;
    6046:	461c      	mov	r4, r3
    6048:	e7ec      	b.n	6024 <bt_le_adv_stop+0x30>
			le_set_private_addr();
    604a:	f7fe fcaf 	bl	49ac <le_set_private_addr>
    604e:	e7e9      	b.n	6024 <bt_le_adv_stop+0x30>
    6050:	2000b8b8 	.word	0x2000b8b8

00006054 <bt_buf_get_rx>:

	return bt_le_scan_update(false);
}

struct net_buf *bt_buf_get_rx(enum bt_buf_type type, s32_t timeout)
{
    6054:	b538      	push	{r3, r4, r5, lr}
    6056:	4605      	mov	r5, r0
		buf = net_buf_alloc(&hci_rx_pool, timeout);
	} else {
		buf = net_buf_alloc(&acl_in_pool, timeout);
	}
#else
	buf = net_buf_alloc(&hci_rx_pool, timeout);
    6058:	4808      	ldr	r0, [pc, #32]	; (607c <bt_buf_get_rx+0x28>)
    605a:	f014 f911 	bl	1a280 <net_buf_alloc>
#endif

	if (buf) {
    605e:	4604      	mov	r4, r0
    6060:	b150      	cbz	r0, 6078 <bt_buf_get_rx+0x24>
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    6062:	2100      	movs	r1, #0
    6064:	f014 f967 	bl	1a336 <net_buf_reserve>
    6068:	f104 0310 	add.w	r3, r4, #16
    606c:	89e2      	ldrh	r2, [r4, #14]
    606e:	4413      	add	r3, r2
    6070:	3303      	adds	r3, #3
    6072:	f023 0303 	bic.w	r3, r3, #3
	*(u8_t *)net_buf_user_data(buf) = type;
    6076:	701d      	strb	r5, [r3, #0]
		bt_buf_set_type(buf, type);
	}

	return buf;
}
    6078:	4620      	mov	r0, r4
    607a:	bd38      	pop	{r3, r4, r5, pc}
    607c:	2000cd68 	.word	0x2000cd68

00006080 <bt_buf_get_cmd_complete>:

struct net_buf *bt_buf_get_cmd_complete(s32_t timeout)
{
    6080:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
    6082:	f04f 0320 	mov.w	r3, #32
    6086:	f3ef 8211 	mrs	r2, BASEPRI
    608a:	f383 8811 	msr	BASEPRI, r3
	struct net_buf *buf;
	unsigned int key;

	key = irq_lock();
	buf = bt_dev.sent_cmd;
    608e:	4b0f      	ldr	r3, [pc, #60]	; (60cc <bt_buf_get_cmd_complete+0x4c>)
    6090:	f8d3 40c0 	ldr.w	r4, [r3, #192]	; 0xc0
	bt_dev.sent_cmd = NULL;
    6094:	2500      	movs	r5, #0
    6096:	f8c3 50c0 	str.w	r5, [r3, #192]	; 0xc0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    609a:	f382 8811 	msr	BASEPRI, r2
	irq_unlock(key);

	BT_DBG("sent_cmd %p", buf);

	if (buf) {
    609e:	b17c      	cbz	r4, 60c0 <bt_buf_get_cmd_complete+0x40>
    60a0:	f104 0310 	add.w	r3, r4, #16
    60a4:	89e2      	ldrh	r2, [r4, #14]
    60a6:	4413      	add	r3, r2
    60a8:	3303      	adds	r3, #3
    60aa:	f023 0303 	bic.w	r3, r3, #3
    60ae:	2201      	movs	r2, #1
    60b0:	701a      	strb	r2, [r3, #0]
		bt_buf_set_type(buf, BT_BUF_EVT);
		buf->len = 0;
    60b2:	4629      	mov	r1, r5
    60b4:	81a5      	strh	r5, [r4, #12]
		net_buf_reserve(buf, CONFIG_BT_HCI_RESERVE);
    60b6:	4620      	mov	r0, r4
    60b8:	f014 f93d 	bl	1a336 <net_buf_reserve>

		return buf;
	}

	return bt_buf_get_rx(BT_BUF_EVT, timeout);
}
    60bc:	4620      	mov	r0, r4
    60be:	bd38      	pop	{r3, r4, r5, pc}
	return bt_buf_get_rx(BT_BUF_EVT, timeout);
    60c0:	4601      	mov	r1, r0
    60c2:	2001      	movs	r0, #1
    60c4:	f7ff ffc6 	bl	6054 <bt_buf_get_rx>
    60c8:	4604      	mov	r4, r0
    60ca:	e7f7      	b.n	60bc <bt_buf_get_cmd_complete+0x3c>
    60cc:	2000b8b8 	.word	0x2000b8b8

000060d0 <bt_pub_key_gen>:
{
	return cmd(buf)->opcode;
}

int bt_pub_key_gen(struct bt_pub_key_cb *new_cb)
{
    60d0:	b570      	push	{r4, r5, r6, lr}
	 * We check for both "LE Read Local P-256 Public Key" and
	 * "LE Generate DH Key" support here since both commands are needed for
	 * ECC support. If "LE Generate DH Key" is not supported then there
	 * is no point in reading local public key.
	 */
	if (!(bt_dev.supported_commands[34] & 0x02) ||
    60d2:	4b29      	ldr	r3, [pc, #164]	; (6178 <bt_pub_key_gen+0xa8>)
    60d4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
    60d8:	f003 0306 	and.w	r3, r3, #6
    60dc:	2b06      	cmp	r3, #6
    60de:	d148      	bne.n	6172 <bt_pub_key_gen+0xa2>
	    !(bt_dev.supported_commands[34] & 0x04)) {
		BT_WARN("ECC HCI commands not available");
		return -ENOTSUP;
	}

	new_cb->_next = pub_key_cb;
    60e0:	4b26      	ldr	r3, [pc, #152]	; (617c <bt_pub_key_gen+0xac>)
    60e2:	681a      	ldr	r2, [r3, #0]
    60e4:	6042      	str	r2, [r0, #4]
	pub_key_cb = new_cb;
    60e6:	6018      	str	r0, [r3, #0]
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    60e8:	4b25      	ldr	r3, [pc, #148]	; (6180 <bt_pub_key_gen+0xb0>)
    60ea:	f3bf 8f5b 	dmb	ish
    60ee:	e853 2f00 	ldrex	r2, [r3]
    60f2:	f042 0110 	orr.w	r1, r2, #16
    60f6:	e843 1400 	strex	r4, r1, [r3]
    60fa:	2c00      	cmp	r4, #0
    60fc:	d1f7      	bne.n	60ee <bt_pub_key_gen+0x1e>
    60fe:	f3bf 8f5b 	dmb	ish

	if (atomic_test_and_set_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6102:	f012 0f10 	tst.w	r2, #16
    6106:	d002      	beq.n	610e <bt_pub_key_gen+0x3e>
		return 0;
    6108:	2600      	movs	r6, #0
			cb->func(NULL);
		}
	}

	return 0;
}
    610a:	4630      	mov	r0, r6
    610c:	bd70      	pop	{r4, r5, r6, pc}
    610e:	4605      	mov	r5, r0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6110:	f3bf 8f5b 	dmb	ish
    6114:	e853 2f00 	ldrex	r2, [r3]
    6118:	f022 0208 	bic.w	r2, r2, #8
    611c:	e843 2100 	strex	r1, r2, [r3]
    6120:	2900      	cmp	r1, #0
    6122:	d1f7      	bne.n	6114 <bt_pub_key_gen+0x44>
    6124:	f3bf 8f5b 	dmb	ish
	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_P256_PUBLIC_KEY, NULL, NULL);
    6128:	2200      	movs	r2, #0
    612a:	4611      	mov	r1, r2
    612c:	f242 0025 	movw	r0, #8229	; 0x2025
    6130:	f7fe f930 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    6134:	4606      	mov	r6, r0
    6136:	b910      	cbnz	r0, 613e <bt_pub_key_gen+0x6e>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6138:	4b10      	ldr	r3, [pc, #64]	; (617c <bt_pub_key_gen+0xac>)
    613a:	681c      	ldr	r4, [r3, #0]
    613c:	e011      	b.n	6162 <bt_pub_key_gen+0x92>
    613e:	4b10      	ldr	r3, [pc, #64]	; (6180 <bt_pub_key_gen+0xb0>)
    6140:	f3bf 8f5b 	dmb	ish
    6144:	e853 2f00 	ldrex	r2, [r3]
    6148:	f022 0210 	bic.w	r2, r2, #16
    614c:	e843 2100 	strex	r1, r2, [r3]
    6150:	2900      	cmp	r1, #0
    6152:	d1f7      	bne.n	6144 <bt_pub_key_gen+0x74>
    6154:	f3bf 8f5b 	dmb	ish
		pub_key_cb = NULL;
    6158:	2200      	movs	r2, #0
    615a:	4b08      	ldr	r3, [pc, #32]	; (617c <bt_pub_key_gen+0xac>)
    615c:	601a      	str	r2, [r3, #0]
		return err;
    615e:	e7d4      	b.n	610a <bt_pub_key_gen+0x3a>
	for (cb = pub_key_cb; cb; cb = cb->_next) {
    6160:	6864      	ldr	r4, [r4, #4]
    6162:	2c00      	cmp	r4, #0
    6164:	d0d1      	beq.n	610a <bt_pub_key_gen+0x3a>
		if (cb != new_cb) {
    6166:	42ac      	cmp	r4, r5
    6168:	d0fa      	beq.n	6160 <bt_pub_key_gen+0x90>
			cb->func(NULL);
    616a:	6823      	ldr	r3, [r4, #0]
    616c:	2000      	movs	r0, #0
    616e:	4798      	blx	r3
    6170:	e7f6      	b.n	6160 <bt_pub_key_gen+0x90>
		return -ENOTSUP;
    6172:	f06f 0685 	mvn.w	r6, #133	; 0x85
    6176:	e7c8      	b.n	610a <bt_pub_key_gen+0x3a>
    6178:	2000b8b8 	.word	0x2000b8b8
    617c:	200003b4 	.word	0x200003b4
    6180:	2000b928 	.word	0x2000b928

00006184 <bt_dh_key_gen>:

	return NULL;
}

int bt_dh_key_gen(const u8_t remote_pk[64], bt_dh_key_cb_t cb)
{
    6184:	b538      	push	{r3, r4, r5, lr}
	struct bt_hci_cp_le_generate_dhkey *cp;
	struct net_buf *buf;
	int err;

	if (dh_key_cb || atomic_test_bit(bt_dev.flags, BT_DEV_PUB_KEY_BUSY)) {
    6186:	4b21      	ldr	r3, [pc, #132]	; (620c <bt_dh_key_gen+0x88>)
    6188:	681b      	ldr	r3, [r3, #0]
    618a:	bbab      	cbnz	r3, 61f8 <bt_dh_key_gen+0x74>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    618c:	f3bf 8f5b 	dmb	ish
    6190:	4b1f      	ldr	r3, [pc, #124]	; (6210 <bt_dh_key_gen+0x8c>)
    6192:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    6194:	f3bf 8f5b 	dmb	ish
    6198:	f013 0f10 	tst.w	r3, #16
    619c:	d130      	bne.n	6200 <bt_dh_key_gen+0x7c>
    619e:	f3bf 8f5b 	dmb	ish
    61a2:	4b1b      	ldr	r3, [pc, #108]	; (6210 <bt_dh_key_gen+0x8c>)
    61a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
    61a6:	f3bf 8f5b 	dmb	ish
		return -EBUSY;
	}

	if (!atomic_test_bit(bt_dev.flags, BT_DEV_HAS_PUB_KEY)) {
    61aa:	f013 0f08 	tst.w	r3, #8
    61ae:	d02a      	beq.n	6206 <bt_dh_key_gen+0x82>
    61b0:	4604      	mov	r4, r0
		return -EADDRNOTAVAIL;
	}

	dh_key_cb = cb;
    61b2:	4b16      	ldr	r3, [pc, #88]	; (620c <bt_dh_key_gen+0x88>)
    61b4:	6019      	str	r1, [r3, #0]

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_GENERATE_DHKEY, sizeof(*cp));
    61b6:	2140      	movs	r1, #64	; 0x40
    61b8:	f242 0026 	movw	r0, #8230	; 0x2026
    61bc:	f7fe f8be 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    61c0:	4605      	mov	r5, r0
    61c2:	b198      	cbz	r0, 61ec <bt_dh_key_gen+0x68>
		dh_key_cb = NULL;
		return -ENOBUFS;
	}

	cp = net_buf_add(buf, sizeof(*cp));
    61c4:	2140      	movs	r1, #64	; 0x40
    61c6:	3008      	adds	r0, #8
    61c8:	f014 f914 	bl	1a3f4 <net_buf_simple_add>
	memcpy(cp->key, remote_pk, sizeof(cp->key));
    61cc:	2240      	movs	r2, #64	; 0x40
    61ce:	4621      	mov	r1, r4
    61d0:	f7fa f876 	bl	2c0 <memcpy>

	err = bt_hci_cmd_send_sync(BT_HCI_OP_LE_GENERATE_DHKEY, buf, NULL);
    61d4:	2200      	movs	r2, #0
    61d6:	4629      	mov	r1, r5
    61d8:	f242 0026 	movw	r0, #8230	; 0x2026
    61dc:	f7fe f8da 	bl	4394 <bt_hci_cmd_send_sync>
	if (err) {
    61e0:	4603      	mov	r3, r0
    61e2:	b158      	cbz	r0, 61fc <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    61e4:	2100      	movs	r1, #0
    61e6:	4a09      	ldr	r2, [pc, #36]	; (620c <bt_dh_key_gen+0x88>)
    61e8:	6011      	str	r1, [r2, #0]
		return err;
    61ea:	e007      	b.n	61fc <bt_dh_key_gen+0x78>
		dh_key_cb = NULL;
    61ec:	2200      	movs	r2, #0
    61ee:	4b07      	ldr	r3, [pc, #28]	; (620c <bt_dh_key_gen+0x88>)
    61f0:	601a      	str	r2, [r3, #0]
		return -ENOBUFS;
    61f2:	f06f 0368 	mvn.w	r3, #104	; 0x68
    61f6:	e001      	b.n	61fc <bt_dh_key_gen+0x78>
		return -EBUSY;
    61f8:	f06f 030f 	mvn.w	r3, #15
	}

	return 0;
}
    61fc:	4618      	mov	r0, r3
    61fe:	bd38      	pop	{r3, r4, r5, pc}
		return -EBUSY;
    6200:	f06f 030f 	mvn.w	r3, #15
    6204:	e7fa      	b.n	61fc <bt_dh_key_gen+0x78>
		return -EADDRNOTAVAIL;
    6206:	f06f 037c 	mvn.w	r3, #124	; 0x7c
    620a:	e7f7      	b.n	61fc <bt_dh_key_gen+0x78>
    620c:	20000370 	.word	0x20000370
    6210:	2000b8b8 	.word	0x2000b8b8

00006214 <notify_connected>:
		return "(unknown)";
	}
}

static void notify_connected(struct bt_conn *conn)
{
    6214:	b538      	push	{r3, r4, r5, lr}
    6216:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    6218:	4b06      	ldr	r3, [pc, #24]	; (6234 <notify_connected+0x20>)
    621a:	681c      	ldr	r4, [r3, #0]
    621c:	e000      	b.n	6220 <notify_connected+0xc>
    621e:	69a4      	ldr	r4, [r4, #24]
    6220:	b134      	cbz	r4, 6230 <notify_connected+0x1c>
		if (cb->connected) {
    6222:	6823      	ldr	r3, [r4, #0]
    6224:	2b00      	cmp	r3, #0
    6226:	d0fa      	beq.n	621e <notify_connected+0xa>
			cb->connected(conn, conn->err);
    6228:	7ae9      	ldrb	r1, [r5, #11]
    622a:	4628      	mov	r0, r5
    622c:	4798      	blx	r3
    622e:	e7f6      	b.n	621e <notify_connected+0xa>
		}
	}
}
    6230:	bd38      	pop	{r3, r4, r5, pc}
    6232:	bf00      	nop
    6234:	20000490 	.word	0x20000490

00006238 <notify_disconnected>:

static void notify_disconnected(struct bt_conn *conn)
{
    6238:	b538      	push	{r3, r4, r5, lr}
    623a:	4605      	mov	r5, r0
	struct bt_conn_cb *cb;

	for (cb = callback_list; cb; cb = cb->_next) {
    623c:	4b06      	ldr	r3, [pc, #24]	; (6258 <notify_disconnected+0x20>)
    623e:	681c      	ldr	r4, [r3, #0]
    6240:	e000      	b.n	6244 <notify_disconnected+0xc>
    6242:	69a4      	ldr	r4, [r4, #24]
    6244:	b134      	cbz	r4, 6254 <notify_disconnected+0x1c>
		if (cb->disconnected) {
    6246:	6863      	ldr	r3, [r4, #4]
    6248:	2b00      	cmp	r3, #0
    624a:	d0fa      	beq.n	6242 <notify_disconnected+0xa>
			cb->disconnected(conn, conn->err);
    624c:	7ae9      	ldrb	r1, [r5, #11]
    624e:	4628      	mov	r0, r5
    6250:	4798      	blx	r3
    6252:	e7f6      	b.n	6242 <notify_disconnected+0xa>
		}
	}
}
    6254:	bd38      	pop	{r3, r4, r5, pc}
    6256:	bf00      	nop
    6258:	20000490 	.word	0x20000490

0000625c <tx_free>:
	return 0;
}

static void tx_free(struct bt_conn_tx *tx)
{
	tx->cb = NULL;
    625c:	2300      	movs	r3, #0
    625e:	6043      	str	r3, [r0, #4]
	node->next = list->head;
    6260:	4b04      	ldr	r3, [pc, #16]	; (6274 <tx_free+0x18>)
    6262:	681a      	ldr	r2, [r3, #0]
    6264:	6002      	str	r2, [r0, #0]
	list->head = node;
    6266:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
    6268:	685b      	ldr	r3, [r3, #4]
    626a:	b103      	cbz	r3, 626e <tx_free+0x12>
    626c:	4770      	bx	lr
		list->tail = list->head;
    626e:	4b01      	ldr	r3, [pc, #4]	; (6274 <tx_free+0x18>)
    6270:	6058      	str	r0, [r3, #4]
	sys_slist_prepend(&free_tx, &tx->node);
}
    6272:	e7fb      	b.n	626c <tx_free+0x10>
    6274:	20000630 	.word	0x20000630

00006278 <add_pending_tx>:
		}
	}
}

static sys_snode_t *add_pending_tx(struct bt_conn *conn, bt_conn_tx_cb_t cb)
{
    6278:	b410      	push	{r4}
	sys_snode_t *node = list->head;
    627a:	4a0f      	ldr	r2, [pc, #60]	; (62b8 <add_pending_tx+0x40>)
    627c:	6813      	ldr	r3, [r2, #0]
	list->head = node->next;
    627e:	681c      	ldr	r4, [r3, #0]
    6280:	6014      	str	r4, [r2, #0]
	if (list->tail == node) {
    6282:	6852      	ldr	r2, [r2, #4]
    6284:	4293      	cmp	r3, r2
    6286:	d011      	beq.n	62ac <add_pending_tx+0x34>
	BT_DBG("conn %p cb %p", conn, cb);

	__ASSERT(!sys_slist_is_empty(&free_tx), "No free conn TX contexts");

	node = sys_slist_get_not_empty(&free_tx);
	CONTAINER_OF(node, struct bt_conn_tx, node)->cb = cb;
    6288:	6059      	str	r1, [r3, #4]
	__asm__ volatile(
    628a:	f04f 0220 	mov.w	r2, #32
    628e:	f3ef 8111 	mrs	r1, BASEPRI
    6292:	f382 8811 	msr	BASEPRI, r2
	node->next = NULL;
    6296:	2200      	movs	r2, #0
    6298:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
    629a:	6982      	ldr	r2, [r0, #24]
    629c:	b14a      	cbz	r2, 62b2 <add_pending_tx+0x3a>
		list->tail->next = node;
    629e:	6013      	str	r3, [r2, #0]
		list->tail = node;
    62a0:	6183      	str	r3, [r0, #24]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    62a2:	f381 8811 	msr	BASEPRI, r1
	key = irq_lock();
	sys_slist_append(&conn->tx_pending, node);
	irq_unlock(key);

	return node;
}
    62a6:	4618      	mov	r0, r3
    62a8:	bc10      	pop	{r4}
    62aa:	4770      	bx	lr
		list->tail = list->head;
    62ac:	4a02      	ldr	r2, [pc, #8]	; (62b8 <add_pending_tx+0x40>)
    62ae:	6054      	str	r4, [r2, #4]
    62b0:	e7ea      	b.n	6288 <add_pending_tx+0x10>
		list->tail = node;
    62b2:	6183      	str	r3, [r0, #24]
		list->head = node;
    62b4:	6143      	str	r3, [r0, #20]
    62b6:	e7f4      	b.n	62a2 <add_pending_tx+0x2a>
    62b8:	20000630 	.word	0x20000630

000062bc <remove_pending_tx>:

static void remove_pending_tx(struct bt_conn *conn, sys_snode_t *node)
{
    62bc:	b510      	push	{r4, lr}
	__asm__ volatile(
    62be:	f04f 0320 	mov.w	r3, #32
    62c2:	f3ef 8411 	mrs	r4, BASEPRI
    62c6:	f383 8811 	msr	BASEPRI, r3
	return list->head;
    62ca:	6943      	ldr	r3, [r0, #20]
	sys_snode_t *prev = NULL;
    62cc:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    62ce:	b163      	cbz	r3, 62ea <remove_pending_tx+0x2e>
		if (test == node) {
    62d0:	4299      	cmp	r1, r3
    62d2:	d002      	beq.n	62da <remove_pending_tx+0x1e>
		prev = test;
    62d4:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
    62d6:	681b      	ldr	r3, [r3, #0]
    62d8:	e7f9      	b.n	62ce <remove_pending_tx+0x12>
	if (!prev_node) {
    62da:	b162      	cbz	r2, 62f6 <remove_pending_tx+0x3a>
		prev_node->next = node->next;
    62dc:	680b      	ldr	r3, [r1, #0]
    62de:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
    62e0:	6983      	ldr	r3, [r0, #24]
    62e2:	4299      	cmp	r1, r3
    62e4:	d00e      	beq.n	6304 <remove_pending_tx+0x48>
	node->next = NULL;
    62e6:	2300      	movs	r3, #0
    62e8:	600b      	str	r3, [r1, #0]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
    62ea:	f384 8811 	msr	BASEPRI, r4

	key = irq_lock();
	sys_slist_find_and_remove(&conn->tx_pending, node);
	irq_unlock(key);

	tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    62ee:	4608      	mov	r0, r1
    62f0:	f7ff ffb4 	bl	625c <tx_free>
    62f4:	bd10      	pop	{r4, pc}
		list->head = node->next;
    62f6:	680b      	ldr	r3, [r1, #0]
    62f8:	6143      	str	r3, [r0, #20]
		if (list->tail == node) {
    62fa:	6982      	ldr	r2, [r0, #24]
    62fc:	4291      	cmp	r1, r2
    62fe:	d1f2      	bne.n	62e6 <remove_pending_tx+0x2a>
			list->tail = list->head;
    6300:	6183      	str	r3, [r0, #24]
    6302:	e7f0      	b.n	62e6 <remove_pending_tx+0x2a>
			list->tail = prev_node;
    6304:	6182      	str	r2, [r0, #24]
    6306:	e7ee      	b.n	62e6 <remove_pending_tx+0x2a>

00006308 <bt_conn_set_param_le>:

#if defined(CONFIG_BT_CENTRAL)
static void bt_conn_set_param_le(struct bt_conn *conn,
				 const struct bt_le_conn_param *param)
{
	conn->le.interval_max = param->interval_max;
    6308:	884b      	ldrh	r3, [r1, #2]
    630a:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	conn->le.latency = param->latency;
    630e:	888b      	ldrh	r3, [r1, #4]
    6310:	f8a0 3064 	strh.w	r3, [r0, #100]	; 0x64
	conn->le.timeout = param->timeout;
    6314:	88cb      	ldrh	r3, [r1, #6]
    6316:	f8a0 3066 	strh.w	r3, [r0, #102]	; 0x66
    631a:	4770      	bx	lr

0000631c <bt_conn_reset_rx_state>:
	if (!conn->rx_len) {
    631c:	89c3      	ldrh	r3, [r0, #14]
    631e:	b903      	cbnz	r3, 6322 <bt_conn_reset_rx_state+0x6>
    6320:	4770      	bx	lr
{
    6322:	b510      	push	{r4, lr}
    6324:	4604      	mov	r4, r0
	net_buf_unref(conn->rx);
    6326:	6900      	ldr	r0, [r0, #16]
    6328:	f014 f818 	bl	1a35c <net_buf_unref>
	conn->rx = NULL;
    632c:	2300      	movs	r3, #0
    632e:	6123      	str	r3, [r4, #16]
	conn->rx_len = 0;
    6330:	81e3      	strh	r3, [r4, #14]
    6332:	bd10      	pop	{r4, pc}

00006334 <conn_new>:
{
    6334:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6336:	2300      	movs	r3, #0
    6338:	b1ab      	cbz	r3, 6366 <conn_new+0x32>
	struct bt_conn *conn = NULL;
    633a:	2400      	movs	r4, #0
	if (!conn) {
    633c:	b18c      	cbz	r4, 6362 <conn_new+0x2e>
	memset(conn, 0, sizeof(*conn));
    633e:	229c      	movs	r2, #156	; 0x9c
    6340:	2100      	movs	r1, #0
    6342:	4620      	mov	r0, r4
    6344:	f023 fb28 	bl	29998 <memset>
	atomic_set(&conn->ref, 1);
    6348:	f104 0344 	add.w	r3, r4, #68	; 0x44
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    634c:	2201      	movs	r2, #1
    634e:	f3bf 8f5b 	dmb	ish
    6352:	e853 1f00 	ldrex	r1, [r3]
    6356:	e843 2000 	strex	r0, r2, [r3]
    635a:	2800      	cmp	r0, #0
    635c:	d1f9      	bne.n	6352 <conn_new+0x1e>
    635e:	f3bf 8f5b 	dmb	ish
}
    6362:	4620      	mov	r0, r4
    6364:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6366:	229c      	movs	r2, #156	; 0x9c
    6368:	fb02 f203 	mul.w	r2, r2, r3
    636c:	3240      	adds	r2, #64	; 0x40
    636e:	4907      	ldr	r1, [pc, #28]	; (638c <conn_new+0x58>)
    6370:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6372:	f3bf 8f5b 	dmb	ish
    6376:	6852      	ldr	r2, [r2, #4]
    6378:	f3bf 8f5b 	dmb	ish
    637c:	b10a      	cbz	r2, 6382 <conn_new+0x4e>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    637e:	3301      	adds	r3, #1
    6380:	e7da      	b.n	6338 <conn_new+0x4>
			conn = &conns[i];
    6382:	229c      	movs	r2, #156	; 0x9c
    6384:	fb02 1403 	mla	r4, r2, r3, r1
			break;
    6388:	e7d8      	b.n	633c <conn_new+0x8>
    638a:	bf00      	nop
    638c:	200004a4 	.word	0x200004a4

00006390 <bt_conn_get_pkts>:
}
    6390:	4800      	ldr	r0, [pc, #0]	; (6394 <bt_conn_get_pkts+0x4>)
    6392:	4770      	bx	lr
    6394:	2000b944 	.word	0x2000b944

00006398 <process_unack_tx>:
{
    6398:	b510      	push	{r4, lr}
    639a:	4604      	mov	r4, r0
    639c:	e009      	b.n	63b2 <process_unack_tx+0x1a>
    639e:	f383 8811 	msr	BASEPRI, r3
		if (!node) {
    63a2:	b1b0      	cbz	r0, 63d2 <process_unack_tx+0x3a>
		tx_free(CONTAINER_OF(node, struct bt_conn_tx, node));
    63a4:	f7ff ff5a 	bl	625c <tx_free>
		k_sem_give(bt_conn_get_pkts(conn));
    63a8:	4620      	mov	r0, r4
    63aa:	f7ff fff1 	bl	6390 <bt_conn_get_pkts>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    63ae:	f022 fb20 	bl	289f2 <_impl_k_sem_give>
	__asm__ volatile(
    63b2:	f04f 0220 	mov.w	r2, #32
    63b6:	f3ef 8311 	mrs	r3, BASEPRI
    63ba:	f382 8811 	msr	BASEPRI, r2
	return (!list->head);
    63be:	6960      	ldr	r0, [r4, #20]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    63c0:	2800      	cmp	r0, #0
    63c2:	d0ec      	beq.n	639e <process_unack_tx+0x6>
	list->head = node->next;
    63c4:	6802      	ldr	r2, [r0, #0]
    63c6:	6162      	str	r2, [r4, #20]
	if (list->tail == node) {
    63c8:	69a1      	ldr	r1, [r4, #24]
    63ca:	4288      	cmp	r0, r1
    63cc:	d1e7      	bne.n	639e <process_unack_tx+0x6>
		list->tail = list->head;
    63ce:	61a2      	str	r2, [r4, #24]
    63d0:	e7e5      	b.n	639e <process_unack_tx+0x6>
    63d2:	bd10      	pop	{r4, pc}

000063d4 <notify_le_param_updated>:
{
    63d4:	b570      	push	{r4, r5, r6, lr}
    63d6:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    63d8:	4b08      	ldr	r3, [pc, #32]	; (63fc <notify_le_param_updated+0x28>)
    63da:	681c      	ldr	r4, [r3, #0]
    63dc:	e000      	b.n	63e0 <notify_le_param_updated+0xc>
    63de:	69a4      	ldr	r4, [r4, #24]
    63e0:	b15c      	cbz	r4, 63fa <notify_le_param_updated+0x26>
		if (cb->le_param_updated) {
    63e2:	68e6      	ldr	r6, [r4, #12]
    63e4:	2e00      	cmp	r6, #0
    63e6:	d0fa      	beq.n	63de <notify_le_param_updated+0xa>
			cb->le_param_updated(conn, conn->le.interval,
    63e8:	f8b5 3066 	ldrh.w	r3, [r5, #102]	; 0x66
    63ec:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    63f0:	f8b5 105e 	ldrh.w	r1, [r5, #94]	; 0x5e
    63f4:	4628      	mov	r0, r5
    63f6:	47b0      	blx	r6
    63f8:	e7f1      	b.n	63de <notify_le_param_updated+0xa>
}
    63fa:	bd70      	pop	{r4, r5, r6, pc}
    63fc:	20000490 	.word	0x20000490

00006400 <le_param_req>:
{
    6400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6402:	4606      	mov	r6, r0
    6404:	460d      	mov	r5, r1
	if (!bt_le_conn_params_valid(param)) {
    6406:	4608      	mov	r0, r1
    6408:	f7fe fc02 	bl	4c10 <bt_le_conn_params_valid>
    640c:	4607      	mov	r7, r0
    640e:	b198      	cbz	r0, 6438 <le_param_req+0x38>
	for (cb = callback_list; cb; cb = cb->_next) {
    6410:	4b0a      	ldr	r3, [pc, #40]	; (643c <le_param_req+0x3c>)
    6412:	681c      	ldr	r4, [r3, #0]
    6414:	e000      	b.n	6418 <le_param_req+0x18>
    6416:	69a4      	ldr	r4, [r4, #24]
    6418:	b174      	cbz	r4, 6438 <le_param_req+0x38>
		if (!cb->le_param_req) {
    641a:	68a3      	ldr	r3, [r4, #8]
    641c:	2b00      	cmp	r3, #0
    641e:	d0fa      	beq.n	6416 <le_param_req+0x16>
		if (!cb->le_param_req(conn, param)) {
    6420:	4629      	mov	r1, r5
    6422:	4630      	mov	r0, r6
    6424:	4798      	blx	r3
    6426:	b130      	cbz	r0, 6436 <le_param_req+0x36>
		if (!bt_le_conn_params_valid(param)) {
    6428:	4628      	mov	r0, r5
    642a:	f7fe fbf1 	bl	4c10 <bt_le_conn_params_valid>
    642e:	2800      	cmp	r0, #0
    6430:	d1f1      	bne.n	6416 <le_param_req+0x16>
			return false;
    6432:	4607      	mov	r7, r0
    6434:	e000      	b.n	6438 <le_param_req+0x38>
			return false;
    6436:	4607      	mov	r7, r0
}
    6438:	4638      	mov	r0, r7
    643a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    643c:	20000490 	.word	0x20000490

00006440 <bt_conn_identity_resolved>:
{
    6440:	b570      	push	{r4, r5, r6, lr}
    6442:	4605      	mov	r5, r0
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6444:	78c3      	ldrb	r3, [r0, #3]
    6446:	b923      	cbnz	r3, 6452 <bt_conn_identity_resolved+0x12>
		rpa = &conn->le.resp_addr;
    6448:	f100 0656 	add.w	r6, r0, #86	; 0x56
	for (cb = callback_list; cb; cb = cb->_next) {
    644c:	4b08      	ldr	r3, [pc, #32]	; (6470 <bt_conn_identity_resolved+0x30>)
    644e:	681c      	ldr	r4, [r3, #0]
    6450:	e003      	b.n	645a <bt_conn_identity_resolved+0x1a>
		rpa = &conn->le.init_addr;
    6452:	f100 064f 	add.w	r6, r0, #79	; 0x4f
    6456:	e7f9      	b.n	644c <bt_conn_identity_resolved+0xc>
	for (cb = callback_list; cb; cb = cb->_next) {
    6458:	69a4      	ldr	r4, [r4, #24]
    645a:	b144      	cbz	r4, 646e <bt_conn_identity_resolved+0x2e>
		if (cb->identity_resolved) {
    645c:	6923      	ldr	r3, [r4, #16]
    645e:	2b00      	cmp	r3, #0
    6460:	d0fa      	beq.n	6458 <bt_conn_identity_resolved+0x18>
			cb->identity_resolved(conn, rpa, &conn->le.dst);
    6462:	f105 0248 	add.w	r2, r5, #72	; 0x48
    6466:	4631      	mov	r1, r6
    6468:	4628      	mov	r0, r5
    646a:	4798      	blx	r3
    646c:	e7f4      	b.n	6458 <bt_conn_identity_resolved+0x18>
}
    646e:	bd70      	pop	{r4, r5, r6, pc}
    6470:	20000490 	.word	0x20000490

00006474 <bt_conn_le_start_encryption>:
{
    6474:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6478:	4680      	mov	r8, r0
    647a:	4617      	mov	r7, r2
    647c:	461c      	mov	r4, r3
    647e:	9d08      	ldr	r5, [sp, #32]
	buf = bt_hci_cmd_create(BT_HCI_OP_LE_START_ENCRYPTION, sizeof(*cp));
    6480:	211c      	movs	r1, #28
    6482:	f242 0019 	movw	r0, #8217	; 0x2019
    6486:	f7fd ff59 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    648a:	b338      	cbz	r0, 64dc <bt_conn_le_start_encryption+0x68>
    648c:	4606      	mov	r6, r0
	cp = net_buf_add(buf, sizeof(*cp));
    648e:	211c      	movs	r1, #28
    6490:	3008      	adds	r0, #8
    6492:	f013 ffaf 	bl	1a3f4 <net_buf_simple_add>
	cp->handle = sys_cpu_to_le16(conn->handle);
    6496:	f8b8 2000 	ldrh.w	r2, [r8]
    649a:	4603      	mov	r3, r0
    649c:	f823 2b02 	strh.w	r2, [r3], #2
	cp->rand = rand;
    64a0:	f8c0 7002 	str.w	r7, [r0, #2]
    64a4:	605c      	str	r4, [r3, #4]
	cp->ediv = ediv;
    64a6:	f8bd 3018 	ldrh.w	r3, [sp, #24]
    64aa:	8143      	strh	r3, [r0, #10]
	memcpy(cp->ltk, ltk, len);
    64ac:	f100 040c 	add.w	r4, r0, #12
    64b0:	462a      	mov	r2, r5
    64b2:	9907      	ldr	r1, [sp, #28]
    64b4:	4620      	mov	r0, r4
    64b6:	f7f9 ff03 	bl	2c0 <memcpy>
	if (len < sizeof(cp->ltk)) {
    64ba:	2d0f      	cmp	r5, #15
    64bc:	d907      	bls.n	64ce <bt_conn_le_start_encryption+0x5a>
	return bt_hci_cmd_send_sync(BT_HCI_OP_LE_START_ENCRYPTION, buf, NULL);
    64be:	2200      	movs	r2, #0
    64c0:	4631      	mov	r1, r6
    64c2:	f242 0019 	movw	r0, #8217	; 0x2019
    64c6:	f7fd ff65 	bl	4394 <bt_hci_cmd_send_sync>
    64ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		memset(cp->ltk + len, 0, sizeof(cp->ltk) - len);
    64ce:	f1c5 0210 	rsb	r2, r5, #16
    64d2:	2100      	movs	r1, #0
    64d4:	1960      	adds	r0, r4, r5
    64d6:	f023 fa5f 	bl	29998 <memset>
    64da:	e7f0      	b.n	64be <bt_conn_le_start_encryption+0x4a>
		return -ENOBUFS;
    64dc:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    64e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000064e4 <start_security>:
{
    64e4:	b530      	push	{r4, r5, lr}
    64e6:	b085      	sub	sp, #20
    64e8:	4604      	mov	r4, r0
	switch (conn->role) {
    64ea:	78c3      	ldrb	r3, [r0, #3]
    64ec:	b123      	cbz	r3, 64f8 <start_security+0x14>
    64ee:	2b01      	cmp	r3, #1
    64f0:	d052      	beq.n	6598 <start_security+0xb4>
		return -EINVAL;
    64f2:	f06f 0015 	mvn.w	r0, #21
    64f6:	e051      	b.n	659c <start_security+0xb8>
		if (!conn->le.keys) {
    64f8:	6f03      	ldr	r3, [r0, #112]	; 0x70
    64fa:	b353      	cbz	r3, 6552 <start_security+0x6e>
		if (!conn->le.keys ||
    64fc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    64fe:	2b00      	cmp	r3, #0
    6500:	d036      	beq.n	6570 <start_security+0x8c>
		    !(conn->le.keys->keys & (BT_KEYS_LTK | BT_KEYS_LTK_P256))) {
    6502:	899a      	ldrh	r2, [r3, #12]
		if (!conn->le.keys ||
    6504:	f012 0f24 	tst.w	r2, #36	; 0x24
    6508:	d032      	beq.n	6570 <start_security+0x8c>
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    650a:	7a62      	ldrb	r2, [r4, #9]
    650c:	2a02      	cmp	r2, #2
    650e:	d833      	bhi.n	6578 <start_security+0x94>
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6510:	7a63      	ldrb	r3, [r4, #9]
    6512:	2b03      	cmp	r3, #3
    6514:	d90d      	bls.n	6532 <start_security+0x4e>
		    !atomic_test_bit(conn->le.keys->flags,
    6516:	6f23      	ldr	r3, [r4, #112]	; 0x70
    6518:	f3bf 8f5b 	dmb	ish
    651c:	689b      	ldr	r3, [r3, #8]
    651e:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_HIGH &&
    6522:	f013 0f01 	tst.w	r3, #1
    6526:	d104      	bne.n	6532 <start_security+0x4e>
		    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    6528:	6f23      	ldr	r3, [r4, #112]	; 0x70
    652a:	899b      	ldrh	r3, [r3, #12]
				     BT_KEYS_AUTHENTICATED) &&
    652c:	f013 0f20 	tst.w	r3, #32
    6530:	d02e      	beq.n	6590 <start_security+0xac>
						   conn->le.keys->ltk.rand,
    6532:	6f23      	ldr	r3, [r4, #112]	; 0x70
						   conn->le.keys->ltk.val,
    6534:	f103 021a 	add.w	r2, r3, #26
						   conn->le.keys->enc_size);
    6538:	79dd      	ldrb	r5, [r3, #7]
		return bt_conn_le_start_encryption(conn,
    653a:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    653e:	9502      	str	r5, [sp, #8]
    6540:	9201      	str	r2, [sp, #4]
    6542:	8b1b      	ldrh	r3, [r3, #24]
    6544:	9300      	str	r3, [sp, #0]
    6546:	4602      	mov	r2, r0
    6548:	460b      	mov	r3, r1
    654a:	4620      	mov	r0, r4
    654c:	f7ff ff92 	bl	6474 <bt_conn_le_start_encryption>
    6550:	e024      	b.n	659c <start_security+0xb8>
						     &conn->le.dst);
    6552:	f100 0548 	add.w	r5, r0, #72	; 0x48
			conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256,
    6556:	4629      	mov	r1, r5
    6558:	2020      	movs	r0, #32
    655a:	f006 f96d 	bl	c838 <bt_keys_find>
    655e:	6720      	str	r0, [r4, #112]	; 0x70
			if (!conn->le.keys) {
    6560:	2800      	cmp	r0, #0
    6562:	d1cb      	bne.n	64fc <start_security+0x18>
				conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    6564:	4629      	mov	r1, r5
    6566:	2004      	movs	r0, #4
    6568:	f006 f966 	bl	c838 <bt_keys_find>
    656c:	6720      	str	r0, [r4, #112]	; 0x70
    656e:	e7c5      	b.n	64fc <start_security+0x18>
			return bt_smp_send_pairing_req(conn);
    6570:	4620      	mov	r0, r4
    6572:	f005 ff14 	bl	c39e <bt_smp_send_pairing_req>
    6576:	e011      	b.n	659c <start_security+0xb8>
    6578:	f3bf 8f5b 	dmb	ish
    657c:	689b      	ldr	r3, [r3, #8]
    657e:	f3bf 8f5b 	dmb	ish
		if (conn->required_sec_level > BT_SECURITY_MEDIUM &&
    6582:	f013 0f01 	tst.w	r3, #1
    6586:	d1c3      	bne.n	6510 <start_security+0x2c>
			return bt_smp_send_pairing_req(conn);
    6588:	4620      	mov	r0, r4
    658a:	f005 ff08 	bl	c39e <bt_smp_send_pairing_req>
    658e:	e005      	b.n	659c <start_security+0xb8>
			return bt_smp_send_pairing_req(conn);
    6590:	4620      	mov	r0, r4
    6592:	f005 ff04 	bl	c39e <bt_smp_send_pairing_req>
    6596:	e001      	b.n	659c <start_security+0xb8>
		return bt_smp_send_security_req(conn);
    6598:	f005 feae 	bl	c2f8 <bt_smp_send_security_req>
}
    659c:	b005      	add	sp, #20
    659e:	bd30      	pop	{r4, r5, pc}

000065a0 <bt_conn_security_changed>:
{
    65a0:	b538      	push	{r3, r4, r5, lr}
    65a2:	4605      	mov	r5, r0
	for (cb = callback_list; cb; cb = cb->_next) {
    65a4:	4b06      	ldr	r3, [pc, #24]	; (65c0 <bt_conn_security_changed+0x20>)
    65a6:	681c      	ldr	r4, [r3, #0]
    65a8:	e000      	b.n	65ac <bt_conn_security_changed+0xc>
    65aa:	69a4      	ldr	r4, [r4, #24]
    65ac:	b134      	cbz	r4, 65bc <bt_conn_security_changed+0x1c>
		if (cb->security_changed) {
    65ae:	6963      	ldr	r3, [r4, #20]
    65b0:	2b00      	cmp	r3, #0
    65b2:	d0fa      	beq.n	65aa <bt_conn_security_changed+0xa>
			cb->security_changed(conn, conn->sec_level);
    65b4:	7a29      	ldrb	r1, [r5, #8]
    65b6:	4628      	mov	r0, r5
    65b8:	4798      	blx	r3
    65ba:	e7f6      	b.n	65aa <bt_conn_security_changed+0xa>
}
    65bc:	bd38      	pop	{r3, r4, r5, pc}
    65be:	bf00      	nop
    65c0:	20000490 	.word	0x20000490

000065c4 <bt_conn_security>:
	if (conn->state != BT_CONN_CONNECTED) {
    65c4:	7b03      	ldrb	r3, [r0, #12]
    65c6:	2b03      	cmp	r3, #3
    65c8:	d112      	bne.n	65f0 <bt_conn_security+0x2c>
	if (conn->sec_level >= sec || conn->required_sec_level >= sec) {
    65ca:	7a03      	ldrb	r3, [r0, #8]
    65cc:	428b      	cmp	r3, r1
    65ce:	d212      	bcs.n	65f6 <bt_conn_security+0x32>
    65d0:	7a43      	ldrb	r3, [r0, #9]
    65d2:	4299      	cmp	r1, r3
    65d4:	d801      	bhi.n	65da <bt_conn_security+0x16>
		return 0;
    65d6:	2300      	movs	r3, #0
    65d8:	e00e      	b.n	65f8 <bt_conn_security+0x34>
{
    65da:	b510      	push	{r4, lr}
    65dc:	4604      	mov	r4, r0
	conn->required_sec_level = sec;
    65de:	7241      	strb	r1, [r0, #9]
	err = start_security(conn);
    65e0:	f7ff ff80 	bl	64e4 <start_security>
	if (err) {
    65e4:	4603      	mov	r3, r0
    65e6:	b108      	cbz	r0, 65ec <bt_conn_security+0x28>
		conn->required_sec_level = conn->sec_level;
    65e8:	7a22      	ldrb	r2, [r4, #8]
    65ea:	7262      	strb	r2, [r4, #9]
}
    65ec:	4618      	mov	r0, r3
    65ee:	bd10      	pop	{r4, pc}
		return -ENOTCONN;
    65f0:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    65f4:	e000      	b.n	65f8 <bt_conn_security+0x34>
		return 0;
    65f6:	2300      	movs	r3, #0
}
    65f8:	4618      	mov	r0, r3
    65fa:	4770      	bx	lr

000065fc <bt_conn_cb_register>:
	cb->_next = callback_list;
    65fc:	4b02      	ldr	r3, [pc, #8]	; (6608 <bt_conn_cb_register+0xc>)
    65fe:	681a      	ldr	r2, [r3, #0]
    6600:	6182      	str	r2, [r0, #24]
	callback_list = cb;
    6602:	6018      	str	r0, [r3, #0]
    6604:	4770      	bx	lr
    6606:	bf00      	nop
    6608:	20000490 	.word	0x20000490

0000660c <bt_conn_recv>:
{
    660c:	b570      	push	{r4, r5, r6, lr}
    660e:	4605      	mov	r5, r0
    6610:	460c      	mov	r4, r1
	switch (flags) {
    6612:	2a01      	cmp	r2, #1
    6614:	d01a      	beq.n	664c <bt_conn_recv+0x40>
    6616:	2a02      	cmp	r2, #2
    6618:	d149      	bne.n	66ae <bt_conn_recv+0xa2>
		hdr = (void *)buf->data;
    661a:	688b      	ldr	r3, [r1, #8]
		len = sys_le16_to_cpu(hdr->len);
    661c:	881e      	ldrh	r6, [r3, #0]
		if (conn->rx_len) {
    661e:	89c3      	ldrh	r3, [r0, #14]
    6620:	b97b      	cbnz	r3, 6642 <bt_conn_recv+0x36>
		conn->rx_len = (sizeof(*hdr) + len) - buf->len;
    6622:	89a3      	ldrh	r3, [r4, #12]
    6624:	1af3      	subs	r3, r6, r3
    6626:	3304      	adds	r3, #4
    6628:	b29b      	uxth	r3, r3
    662a:	81eb      	strh	r3, [r5, #14]
		if (conn->rx_len) {
    662c:	b963      	cbnz	r3, 6648 <bt_conn_recv+0x3c>
	hdr = (void *)buf->data;
    662e:	68a3      	ldr	r3, [r4, #8]
	len = sys_le16_to_cpu(hdr->len);
    6630:	881b      	ldrh	r3, [r3, #0]
	if (sizeof(*hdr) + len != buf->len) {
    6632:	3304      	adds	r3, #4
    6634:	89a2      	ldrh	r2, [r4, #12]
    6636:	4293      	cmp	r3, r2
    6638:	d03f      	beq.n	66ba <bt_conn_recv+0xae>
		net_buf_unref(buf);
    663a:	4620      	mov	r0, r4
    663c:	f013 fe8e 	bl	1a35c <net_buf_unref>
		return;
    6640:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6642:	f7ff fe6b 	bl	631c <bt_conn_reset_rx_state>
    6646:	e7ec      	b.n	6622 <bt_conn_recv+0x16>
			conn->rx = buf;
    6648:	612c      	str	r4, [r5, #16]
			return;
    664a:	bd70      	pop	{r4, r5, r6, pc}
		if (!conn->rx_len) {
    664c:	89c3      	ldrh	r3, [r0, #14]
    664e:	b1db      	cbz	r3, 6688 <bt_conn_recv+0x7c>
		if (buf->len > conn->rx_len) {
    6650:	898e      	ldrh	r6, [r1, #12]
    6652:	42b3      	cmp	r3, r6
    6654:	d31e      	bcc.n	6694 <bt_conn_recv+0x88>
		if (buf->len > net_buf_tailroom(conn->rx)) {
    6656:	6900      	ldr	r0, [r0, #16]
    6658:	3008      	adds	r0, #8
    665a:	f013 ff34 	bl	1a4c6 <net_buf_simple_tailroom>
    665e:	4286      	cmp	r6, r0
    6660:	d81e      	bhi.n	66a0 <bt_conn_recv+0x94>
		net_buf_add_mem(conn->rx, buf->data, buf->len);
    6662:	6928      	ldr	r0, [r5, #16]
    6664:	89a2      	ldrh	r2, [r4, #12]
    6666:	68a1      	ldr	r1, [r4, #8]
    6668:	3008      	adds	r0, #8
    666a:	f013 fec9 	bl	1a400 <net_buf_simple_add_mem>
		conn->rx_len -= buf->len;
    666e:	89a2      	ldrh	r2, [r4, #12]
    6670:	89eb      	ldrh	r3, [r5, #14]
    6672:	1a9b      	subs	r3, r3, r2
    6674:	81eb      	strh	r3, [r5, #14]
		net_buf_unref(buf);
    6676:	4620      	mov	r0, r4
    6678:	f013 fe70 	bl	1a35c <net_buf_unref>
		if (conn->rx_len) {
    667c:	89eb      	ldrh	r3, [r5, #14]
    667e:	bb03      	cbnz	r3, 66c2 <bt_conn_recv+0xb6>
		buf = conn->rx;
    6680:	692c      	ldr	r4, [r5, #16]
		conn->rx = NULL;
    6682:	612b      	str	r3, [r5, #16]
		conn->rx_len = 0;
    6684:	81eb      	strh	r3, [r5, #14]
		break;
    6686:	e7d2      	b.n	662e <bt_conn_recv+0x22>
			bt_conn_reset_rx_state(conn);
    6688:	f7ff fe48 	bl	631c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    668c:	4620      	mov	r0, r4
    668e:	f013 fe65 	bl	1a35c <net_buf_unref>
			return;
    6692:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    6694:	f7ff fe42 	bl	631c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    6698:	4620      	mov	r0, r4
    669a:	f013 fe5f 	bl	1a35c <net_buf_unref>
			return;
    669e:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_reset_rx_state(conn);
    66a0:	4628      	mov	r0, r5
    66a2:	f7ff fe3b 	bl	631c <bt_conn_reset_rx_state>
			net_buf_unref(buf);
    66a6:	4620      	mov	r0, r4
    66a8:	f013 fe58 	bl	1a35c <net_buf_unref>
			return;
    66ac:	bd70      	pop	{r4, r5, r6, pc}
		bt_conn_reset_rx_state(conn);
    66ae:	f7ff fe35 	bl	631c <bt_conn_reset_rx_state>
		net_buf_unref(buf);
    66b2:	4620      	mov	r0, r4
    66b4:	f013 fe52 	bl	1a35c <net_buf_unref>
		return;
    66b8:	bd70      	pop	{r4, r5, r6, pc}
	bt_l2cap_recv(conn, buf);
    66ba:	4621      	mov	r1, r4
    66bc:	4628      	mov	r0, r5
    66be:	f001 fd06 	bl	80ce <bt_l2cap_recv>
    66c2:	bd70      	pop	{r4, r5, r6, pc}

000066c4 <bt_conn_send_cb>:
{
    66c4:	b570      	push	{r4, r5, r6, lr}
    66c6:	4605      	mov	r5, r0
    66c8:	460c      	mov	r4, r1
    66ca:	4616      	mov	r6, r2
	pool = net_buf_pool_get(buf->pool_id);
    66cc:	7988      	ldrb	r0, [r1, #6]
    66ce:	f013 fdcb 	bl	1a268 <net_buf_pool_get>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    66d2:	8ac3      	ldrh	r3, [r0, #22]
    66d4:	2b03      	cmp	r3, #3
    66d6:	d911      	bls.n	66fc <bt_conn_send_cb+0x38>
	if (conn->state != BT_CONN_CONNECTED) {
    66d8:	7b2b      	ldrb	r3, [r5, #12]
    66da:	2b03      	cmp	r3, #3
    66dc:	d114      	bne.n	6708 <bt_conn_send_cb+0x44>
    66de:	f104 0310 	add.w	r3, r4, #16
    66e2:	89e2      	ldrh	r2, [r4, #14]
    66e4:	4413      	add	r3, r2
    66e6:	3303      	adds	r3, #3
    66e8:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(buf)->cb = cb;
    66ec:	601e      	str	r6, [r3, #0]
	net_buf_put(&conn->tx_queue, buf);
    66ee:	4621      	mov	r1, r4
    66f0:	f105 002c 	add.w	r0, r5, #44	; 0x2c
    66f4:	f013 fe24 	bl	1a340 <net_buf_put>
	return 0;
    66f8:	2000      	movs	r0, #0
}
    66fa:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    66fc:	4620      	mov	r0, r4
    66fe:	f013 fe2d 	bl	1a35c <net_buf_unref>
		return -EINVAL;
    6702:	f06f 0015 	mvn.w	r0, #21
    6706:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    6708:	4620      	mov	r0, r4
    670a:	f013 fe27 	bl	1a35c <net_buf_unref>
		return -ENOTCONN;
    670e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    6712:	bd70      	pop	{r4, r5, r6, pc}

00006714 <bt_conn_notify_tx>:
{
    6714:	b538      	push	{r3, r4, r5, lr}
    6716:	4605      	mov	r5, r0
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6718:	e002      	b.n	6720 <bt_conn_notify_tx+0xc>
		tx_free(tx);
    671a:	4620      	mov	r0, r4
    671c:	f7ff fd9e 	bl	625c <tx_free>
	while ((tx = k_fifo_get(&conn->tx_notify, K_NO_WAIT))) {
    6720:	2100      	movs	r1, #0
    6722:	f105 001c 	add.w	r0, r5, #28
    6726:	f021 fdf5 	bl	28314 <k_queue_get>
    672a:	4604      	mov	r4, r0
    672c:	b128      	cbz	r0, 673a <bt_conn_notify_tx+0x26>
		if (tx->cb) {
    672e:	6863      	ldr	r3, [r4, #4]
    6730:	2b00      	cmp	r3, #0
    6732:	d0f2      	beq.n	671a <bt_conn_notify_tx+0x6>
			tx->cb(conn);
    6734:	4628      	mov	r0, r5
    6736:	4798      	blx	r3
    6738:	e7ef      	b.n	671a <bt_conn_notify_tx+0x6>
}
    673a:	bd38      	pop	{r3, r4, r5, pc}

0000673c <notify_tx>:
{
    673c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    673e:	2400      	movs	r4, #0
    6740:	b104      	cbz	r4, 6744 <notify_tx+0x8>
}
    6742:	bd10      	pop	{r4, pc}
		if (!atomic_get(&conns[i].ref)) {
    6744:	239c      	movs	r3, #156	; 0x9c
    6746:	fb03 f304 	mul.w	r3, r3, r4
    674a:	3340      	adds	r3, #64	; 0x40
    674c:	4a0b      	ldr	r2, [pc, #44]	; (677c <notify_tx+0x40>)
    674e:	4413      	add	r3, r2
    6750:	f3bf 8f5b 	dmb	ish
    6754:	685b      	ldr	r3, [r3, #4]
    6756:	f3bf 8f5b 	dmb	ish
    675a:	b13b      	cbz	r3, 676c <notify_tx+0x30>
		if (conns[i].state == BT_CONN_CONNECTED ||
    675c:	239c      	movs	r3, #156	; 0x9c
    675e:	fb03 2304 	mla	r3, r3, r4, r2
    6762:	7b1b      	ldrb	r3, [r3, #12]
    6764:	3b03      	subs	r3, #3
    6766:	b2db      	uxtb	r3, r3
    6768:	2b01      	cmp	r3, #1
    676a:	d901      	bls.n	6770 <notify_tx+0x34>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    676c:	3401      	adds	r4, #1
    676e:	e7e7      	b.n	6740 <notify_tx+0x4>
			bt_conn_notify_tx(&conns[i]);
    6770:	209c      	movs	r0, #156	; 0x9c
    6772:	fb00 2004 	mla	r0, r0, r4, r2
    6776:	f7ff ffcd 	bl	6714 <bt_conn_notify_tx>
    677a:	e7f7      	b.n	676c <notify_tx+0x30>
    677c:	200004a4 	.word	0x200004a4

00006780 <send_frag>:
{
    6780:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    6784:	4606      	mov	r6, r0
    6786:	460d      	mov	r5, r1
    6788:	4690      	mov	r8, r2
    678a:	461c      	mov	r4, r3
	k_sem_take(bt_conn_get_pkts(conn), K_FOREVER);
    678c:	f7ff fe00 	bl	6390 <bt_conn_get_pkts>
    6790:	4607      	mov	r7, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    6792:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6796:	f022 f93f 	bl	28a18 <_impl_k_sem_take>
	notify_tx();
    679a:	f7ff ffcf 	bl	673c <notify_tx>
	if (conn->state != BT_CONN_CONNECTED) {
    679e:	7b33      	ldrb	r3, [r6, #12]
    67a0:	2b03      	cmp	r3, #3
    67a2:	d006      	beq.n	67b2 <send_frag+0x32>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    67a4:	4638      	mov	r0, r7
    67a6:	f022 f924 	bl	289f2 <_impl_k_sem_give>
	if (always_consume) {
    67aa:	bb4c      	cbnz	r4, 6800 <send_frag+0x80>
}
    67ac:	4620      	mov	r0, r4
    67ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	hdr = net_buf_push(buf, sizeof(*hdr));
    67b2:	2104      	movs	r1, #4
    67b4:	f105 0008 	add.w	r0, r5, #8
    67b8:	f013 fe53 	bl	1a462 <net_buf_simple_push>
	hdr->handle = sys_cpu_to_le16(bt_acl_handle_pack(conn->handle, flags));
    67bc:	f9b6 3000 	ldrsh.w	r3, [r6]
    67c0:	ea43 3808 	orr.w	r8, r3, r8, lsl #12
    67c4:	f8a0 8000 	strh.w	r8, [r0]
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    67c8:	89ab      	ldrh	r3, [r5, #12]
    67ca:	3b04      	subs	r3, #4
    67cc:	8043      	strh	r3, [r0, #2]
    67ce:	f105 0310 	add.w	r3, r5, #16
    67d2:	89ea      	ldrh	r2, [r5, #14]
    67d4:	4413      	add	r3, r2
    67d6:	3303      	adds	r3, #3
    67d8:	f023 0303 	bic.w	r3, r3, #3
	cb = conn_tx(buf)->cb;
    67dc:	6819      	ldr	r1, [r3, #0]
    67de:	2202      	movs	r2, #2
    67e0:	701a      	strb	r2, [r3, #0]
	node = add_pending_tx(conn, cb);
    67e2:	4630      	mov	r0, r6
    67e4:	f7ff fd48 	bl	6278 <add_pending_tx>
    67e8:	4680      	mov	r8, r0
	err = bt_send(buf);
    67ea:	4628      	mov	r0, r5
    67ec:	f7fe fafa 	bl	4de4 <bt_send>
	if (err) {
    67f0:	b908      	cbnz	r0, 67f6 <send_frag+0x76>
	return true;
    67f2:	2401      	movs	r4, #1
    67f4:	e7da      	b.n	67ac <send_frag+0x2c>
		remove_pending_tx(conn, node);
    67f6:	4641      	mov	r1, r8
    67f8:	4630      	mov	r0, r6
    67fa:	f7ff fd5f 	bl	62bc <remove_pending_tx>
		goto fail;
    67fe:	e7d1      	b.n	67a4 <send_frag+0x24>
		net_buf_unref(buf);
    6800:	4628      	mov	r0, r5
    6802:	f013 fdab 	bl	1a35c <net_buf_unref>
	return false;
    6806:	2400      	movs	r4, #0
    6808:	e7d0      	b.n	67ac <send_frag+0x2c>
	...

0000680c <bt_conn_add_le>:
{
    680c:	b538      	push	{r3, r4, r5, lr}
    680e:	4605      	mov	r5, r0
	struct bt_conn *conn = conn_new();
    6810:	f7ff fd90 	bl	6334 <conn_new>
	if (!conn) {
    6814:	4604      	mov	r4, r0
    6816:	b1a0      	cbz	r0, 6842 <bt_conn_add_le+0x36>
    6818:	2207      	movs	r2, #7
    681a:	4629      	mov	r1, r5
    681c:	3048      	adds	r0, #72	; 0x48
    681e:	f7f9 fd4f 	bl	2c0 <memcpy>
	conn->sec_level = BT_SECURITY_LOW;
    6822:	2301      	movs	r3, #1
    6824:	7223      	strb	r3, [r4, #8]
	conn->required_sec_level = BT_SECURITY_LOW;
    6826:	7263      	strb	r3, [r4, #9]
	conn->type = BT_CONN_TYPE_LE;
    6828:	2300      	movs	r3, #0
    682a:	70a3      	strb	r3, [r4, #2]
	conn->le.interval_min = BT_GAP_INIT_CONN_INT_MIN;
    682c:	2318      	movs	r3, #24
    682e:	f8a4 3060 	strh.w	r3, [r4, #96]	; 0x60
	conn->le.interval_max = BT_GAP_INIT_CONN_INT_MAX;
    6832:	2328      	movs	r3, #40	; 0x28
    6834:	f8a4 3062 	strh.w	r3, [r4, #98]	; 0x62
	k_delayed_work_init(&conn->le.update_work, le_conn_update);
    6838:	4903      	ldr	r1, [pc, #12]	; (6848 <bt_conn_add_le+0x3c>)
    683a:	f104 0074 	add.w	r0, r4, #116	; 0x74
    683e:	f022 fea9 	bl	29594 <k_delayed_work_init>
}
    6842:	4620      	mov	r0, r4
    6844:	bd38      	pop	{r3, r4, r5, pc}
    6846:	bf00      	nop
    6848:	00006e49 	.word	0x00006e49

0000684c <bt_conn_addr_le_cmp>:
{
    684c:	b538      	push	{r3, r4, r5, lr}
    684e:	4604      	mov	r4, r0
    6850:	460d      	mov	r5, r1
	return memcmp(a, b, sizeof(*a));
    6852:	2207      	movs	r2, #7
    6854:	f100 0148 	add.w	r1, r0, #72	; 0x48
    6858:	4628      	mov	r0, r5
    685a:	f023 f809 	bl	29870 <memcmp>
	if (!bt_addr_le_cmp(peer, &conn->le.dst)) {
    685e:	4603      	mov	r3, r0
    6860:	b140      	cbz	r0, 6874 <bt_conn_addr_le_cmp+0x28>
	if (conn->role == BT_HCI_ROLE_MASTER) {
    6862:	78e3      	ldrb	r3, [r4, #3]
    6864:	b143      	cbz	r3, 6878 <bt_conn_addr_le_cmp+0x2c>
    6866:	2207      	movs	r2, #7
    6868:	f104 014f 	add.w	r1, r4, #79	; 0x4f
    686c:	4628      	mov	r0, r5
    686e:	f022 ffff 	bl	29870 <memcmp>
    6872:	4603      	mov	r3, r0
}
    6874:	4618      	mov	r0, r3
    6876:	bd38      	pop	{r3, r4, r5, pc}
    6878:	2207      	movs	r2, #7
    687a:	f104 0156 	add.w	r1, r4, #86	; 0x56
    687e:	4628      	mov	r0, r5
    6880:	f022 fff6 	bl	29870 <memcmp>
    6884:	4603      	mov	r3, r0
		return bt_addr_le_cmp(peer, &conn->le.resp_addr);
    6886:	e7f5      	b.n	6874 <bt_conn_addr_le_cmp+0x28>

00006888 <bt_conn_ref>:
	atomic_inc(&conn->ref);
    6888:	f100 0344 	add.w	r3, r0, #68	; 0x44
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
    688c:	f3bf 8f5b 	dmb	ish
    6890:	e853 2f00 	ldrex	r2, [r3]
    6894:	3201      	adds	r2, #1
    6896:	e843 2100 	strex	r1, r2, [r3]
    689a:	2900      	cmp	r1, #0
    689c:	d1f8      	bne.n	6890 <bt_conn_ref+0x8>
    689e:	f3bf 8f5b 	dmb	ish
}
    68a2:	4770      	bx	lr

000068a4 <bt_conn_lookup_handle>:
{
    68a4:	b508      	push	{r3, lr}
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    68a6:	2300      	movs	r3, #0
    68a8:	b10b      	cbz	r3, 68ae <bt_conn_lookup_handle+0xa>
	return NULL;
    68aa:	2000      	movs	r0, #0
}
    68ac:	bd08      	pop	{r3, pc}
		if (!atomic_get(&conns[i].ref)) {
    68ae:	229c      	movs	r2, #156	; 0x9c
    68b0:	fb02 f203 	mul.w	r2, r2, r3
    68b4:	3240      	adds	r2, #64	; 0x40
    68b6:	490f      	ldr	r1, [pc, #60]	; (68f4 <bt_conn_lookup_handle+0x50>)
    68b8:	440a      	add	r2, r1
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    68ba:	f3bf 8f5b 	dmb	ish
    68be:	6852      	ldr	r2, [r2, #4]
    68c0:	f3bf 8f5b 	dmb	ish
    68c4:	b13a      	cbz	r2, 68d6 <bt_conn_lookup_handle+0x32>
		if (conns[i].state != BT_CONN_CONNECTED &&
    68c6:	229c      	movs	r2, #156	; 0x9c
    68c8:	fb02 1203 	mla	r2, r2, r3, r1
    68cc:	7b12      	ldrb	r2, [r2, #12]
    68ce:	3a03      	subs	r2, #3
    68d0:	b2d2      	uxtb	r2, r2
    68d2:	2a01      	cmp	r2, #1
    68d4:	d901      	bls.n	68da <bt_conn_lookup_handle+0x36>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    68d6:	3301      	adds	r3, #1
    68d8:	e7e6      	b.n	68a8 <bt_conn_lookup_handle+0x4>
		if (conns[i].handle == handle) {
    68da:	229c      	movs	r2, #156	; 0x9c
    68dc:	fb02 f203 	mul.w	r2, r2, r3
    68e0:	5a8a      	ldrh	r2, [r1, r2]
    68e2:	4282      	cmp	r2, r0
    68e4:	d1f7      	bne.n	68d6 <bt_conn_lookup_handle+0x32>
			return bt_conn_ref(&conns[i]);
    68e6:	209c      	movs	r0, #156	; 0x9c
    68e8:	fb00 1003 	mla	r0, r0, r3, r1
    68ec:	f7ff ffcc 	bl	6888 <bt_conn_ref>
    68f0:	bd08      	pop	{r3, pc}
    68f2:	bf00      	nop
    68f4:	200004a4 	.word	0x200004a4

000068f8 <bt_conn_lookup_addr_le>:
{
    68f8:	b570      	push	{r4, r5, r6, lr}
    68fa:	4605      	mov	r5, r0
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    68fc:	2400      	movs	r4, #0
    68fe:	b10c      	cbz	r4, 6904 <bt_conn_lookup_addr_le+0xc>
	return NULL;
    6900:	2000      	movs	r0, #0
}
    6902:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    6904:	239c      	movs	r3, #156	; 0x9c
    6906:	fb03 f304 	mul.w	r3, r3, r4
    690a:	3340      	adds	r3, #64	; 0x40
    690c:	4a0d      	ldr	r2, [pc, #52]	; (6944 <bt_conn_lookup_addr_le+0x4c>)
    690e:	4413      	add	r3, r2
    6910:	f3bf 8f5b 	dmb	ish
    6914:	685b      	ldr	r3, [r3, #4]
    6916:	f3bf 8f5b 	dmb	ish
    691a:	b123      	cbz	r3, 6926 <bt_conn_lookup_addr_le+0x2e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    691c:	239c      	movs	r3, #156	; 0x9c
    691e:	fb03 2304 	mla	r3, r3, r4, r2
    6922:	789b      	ldrb	r3, [r3, #2]
    6924:	b10b      	cbz	r3, 692a <bt_conn_lookup_addr_le+0x32>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6926:	3401      	adds	r4, #1
    6928:	e7e9      	b.n	68fe <bt_conn_lookup_addr_le+0x6>
		if (!bt_conn_addr_le_cmp(&conns[i], peer)) {
    692a:	269c      	movs	r6, #156	; 0x9c
    692c:	fb06 2604 	mla	r6, r6, r4, r2
    6930:	4629      	mov	r1, r5
    6932:	4630      	mov	r0, r6
    6934:	f7ff ff8a 	bl	684c <bt_conn_addr_le_cmp>
    6938:	2800      	cmp	r0, #0
    693a:	d1f4      	bne.n	6926 <bt_conn_lookup_addr_le+0x2e>
			return bt_conn_ref(&conns[i]);
    693c:	4630      	mov	r0, r6
    693e:	f7ff ffa3 	bl	6888 <bt_conn_ref>
    6942:	bd70      	pop	{r4, r5, r6, pc}
    6944:	200004a4 	.word	0x200004a4

00006948 <bt_conn_lookup_state_le>:
{
    6948:	b570      	push	{r4, r5, r6, lr}
    694a:	4605      	mov	r5, r0
    694c:	460e      	mov	r6, r1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    694e:	2400      	movs	r4, #0
    6950:	b10c      	cbz	r4, 6956 <bt_conn_lookup_state_le+0xe>
	return NULL;
    6952:	2000      	movs	r0, #0
}
    6954:	bd70      	pop	{r4, r5, r6, pc}
		if (!atomic_get(&conns[i].ref)) {
    6956:	239c      	movs	r3, #156	; 0x9c
    6958:	fb03 f304 	mul.w	r3, r3, r4
    695c:	3340      	adds	r3, #64	; 0x40
    695e:	4a12      	ldr	r2, [pc, #72]	; (69a8 <bt_conn_lookup_state_le+0x60>)
    6960:	4413      	add	r3, r2
    6962:	f3bf 8f5b 	dmb	ish
    6966:	685b      	ldr	r3, [r3, #4]
    6968:	f3bf 8f5b 	dmb	ish
    696c:	b19b      	cbz	r3, 6996 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].type != BT_CONN_TYPE_LE) {
    696e:	239c      	movs	r3, #156	; 0x9c
    6970:	fb03 2304 	mla	r3, r3, r4, r2
    6974:	789b      	ldrb	r3, [r3, #2]
    6976:	b973      	cbnz	r3, 6996 <bt_conn_lookup_state_le+0x4e>
		if (peer && bt_conn_addr_le_cmp(&conns[i], peer)) {
    6978:	b135      	cbz	r5, 6988 <bt_conn_lookup_state_le+0x40>
    697a:	4629      	mov	r1, r5
    697c:	209c      	movs	r0, #156	; 0x9c
    697e:	fb00 2004 	mla	r0, r0, r4, r2
    6982:	f7ff ff63 	bl	684c <bt_conn_addr_le_cmp>
    6986:	b930      	cbnz	r0, 6996 <bt_conn_lookup_state_le+0x4e>
		if (conns[i].state == state) {
    6988:	239c      	movs	r3, #156	; 0x9c
    698a:	4a07      	ldr	r2, [pc, #28]	; (69a8 <bt_conn_lookup_state_le+0x60>)
    698c:	fb03 2304 	mla	r3, r3, r4, r2
    6990:	7b1b      	ldrb	r3, [r3, #12]
    6992:	42b3      	cmp	r3, r6
    6994:	d001      	beq.n	699a <bt_conn_lookup_state_le+0x52>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6996:	3401      	adds	r4, #1
    6998:	e7da      	b.n	6950 <bt_conn_lookup_state_le+0x8>
			return bt_conn_ref(&conns[i]);
    699a:	209c      	movs	r0, #156	; 0x9c
    699c:	fb00 2004 	mla	r0, r0, r4, r2
    69a0:	f7ff ff72 	bl	6888 <bt_conn_ref>
    69a4:	bd70      	pop	{r4, r5, r6, pc}
    69a6:	bf00      	nop
    69a8:	200004a4 	.word	0x200004a4

000069ac <bt_conn_unref>:
	atomic_dec(&conn->ref);
    69ac:	3044      	adds	r0, #68	; 0x44
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
    69ae:	f3bf 8f5b 	dmb	ish
    69b2:	e850 3f00 	ldrex	r3, [r0]
    69b6:	3b01      	subs	r3, #1
    69b8:	e840 3200 	strex	r2, r3, [r0]
    69bc:	2a00      	cmp	r2, #0
    69be:	d1f8      	bne.n	69b2 <bt_conn_unref+0x6>
    69c0:	f3bf 8f5b 	dmb	ish
    69c4:	4770      	bx	lr

000069c6 <conn_cleanup>:
{
    69c6:	b510      	push	{r4, lr}
    69c8:	4604      	mov	r4, r0
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    69ca:	e002      	b.n	69d2 <conn_cleanup+0xc>
		net_buf_unref(buf);
    69cc:	4618      	mov	r0, r3
    69ce:	f013 fcc5 	bl	1a35c <net_buf_unref>
	while ((buf = net_buf_get(&conn->tx_queue, K_NO_WAIT))) {
    69d2:	2100      	movs	r1, #0
    69d4:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    69d8:	f013 fc93 	bl	1a302 <net_buf_get>
    69dc:	4603      	mov	r3, r0
    69de:	2800      	cmp	r0, #0
    69e0:	d1f4      	bne.n	69cc <conn_cleanup+0x6>
	bt_conn_notify_tx(conn);
    69e2:	4620      	mov	r0, r4
    69e4:	f7ff fe96 	bl	6714 <bt_conn_notify_tx>
	bt_conn_reset_rx_state(conn);
    69e8:	4620      	mov	r0, r4
    69ea:	f7ff fc97 	bl	631c <bt_conn_reset_rx_state>
	bt_conn_unref(conn);
    69ee:	4620      	mov	r0, r4
    69f0:	f7ff ffdc 	bl	69ac <bt_conn_unref>
    69f4:	bd10      	pop	{r4, pc}
	...

000069f8 <bt_conn_prepare_events>:
{
    69f8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    69fc:	4606      	mov	r6, r0
	conn_change.signaled = 0;
    69fe:	4b30      	ldr	r3, [pc, #192]	; (6ac0 <bt_conn_prepare_events+0xc8>)
    6a00:	2400      	movs	r4, #0
    6a02:	609c      	str	r4, [r3, #8]
	k_poll_event_init(&events[ev_count++], K_POLL_TYPE_SIGNAL,
    6a04:	4622      	mov	r2, r4
    6a06:	2101      	movs	r1, #1
    6a08:	f021 f93e 	bl	27c88 <k_poll_event_init>
    6a0c:	2501      	movs	r5, #1
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6a0e:	b114      	cbz	r4, 6a16 <bt_conn_prepare_events+0x1e>
}
    6a10:	4628      	mov	r0, r5
    6a12:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		struct bt_conn *conn = &conns[i];
    6a16:	4a2b      	ldr	r2, [pc, #172]	; (6ac4 <bt_conn_prepare_events+0xcc>)
    6a18:	239c      	movs	r3, #156	; 0x9c
    6a1a:	fb03 f304 	mul.w	r3, r3, r4
    6a1e:	18d0      	adds	r0, r2, r3
		if (!atomic_get(&conn->ref)) {
    6a20:	3340      	adds	r3, #64	; 0x40
    6a22:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6a24:	f3bf 8f5b 	dmb	ish
    6a28:	685b      	ldr	r3, [r3, #4]
    6a2a:	f3bf 8f5b 	dmb	ish
    6a2e:	b143      	cbz	r3, 6a42 <bt_conn_prepare_events+0x4a>
		if (conn->state == BT_CONN_DISCONNECTED &&
    6a30:	7b03      	ldrb	r3, [r0, #12]
    6a32:	b143      	cbz	r3, 6a46 <bt_conn_prepare_events+0x4e>
		if (conn->state != BT_CONN_CONNECTED) {
    6a34:	239c      	movs	r3, #156	; 0x9c
    6a36:	4a23      	ldr	r2, [pc, #140]	; (6ac4 <bt_conn_prepare_events+0xcc>)
    6a38:	fb03 2304 	mla	r3, r3, r4, r2
    6a3c:	7b1b      	ldrb	r3, [r3, #12]
    6a3e:	2b03      	cmp	r3, #3
    6a40:	d015      	beq.n	6a6e <bt_conn_prepare_events+0x76>
	for (i = 0; i < ARRAY_SIZE(conns); i++) {
    6a42:	3401      	adds	r4, #1
    6a44:	e7e3      	b.n	6a0e <bt_conn_prepare_events+0x16>
		    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    6a46:	4603      	mov	r3, r0
    6a48:	3304      	adds	r3, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6a4a:	f3bf 8f5b 	dmb	ish
    6a4e:	e853 2f00 	ldrex	r2, [r3]
    6a52:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6a56:	e843 1700 	strex	r7, r1, [r3]
    6a5a:	2f00      	cmp	r7, #0
    6a5c:	d1f7      	bne.n	6a4e <bt_conn_prepare_events+0x56>
    6a5e:	f3bf 8f5b 	dmb	ish
		if (conn->state == BT_CONN_DISCONNECTED &&
    6a62:	f012 0f40 	tst.w	r2, #64	; 0x40
    6a66:	d0e5      	beq.n	6a34 <bt_conn_prepare_events+0x3c>
			conn_cleanup(conn);
    6a68:	f7ff ffad 	bl	69c6 <conn_cleanup>
			continue;
    6a6c:	e7e9      	b.n	6a42 <bt_conn_prepare_events+0x4a>
		k_poll_event_init(&events[ev_count],
    6a6e:	eb05 0385 	add.w	r3, r5, r5, lsl #2
    6a72:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6a76:	44b0      	add	r8, r6
				  &conn->tx_notify);
    6a78:	4691      	mov	r9, r2
    6a7a:	279c      	movs	r7, #156	; 0x9c
    6a7c:	fb07 f704 	mul.w	r7, r7, r4
    6a80:	f107 0318 	add.w	r3, r7, #24
    6a84:	4413      	add	r3, r2
		k_poll_event_init(&events[ev_count],
    6a86:	3304      	adds	r3, #4
    6a88:	2200      	movs	r2, #0
    6a8a:	2104      	movs	r1, #4
    6a8c:	4640      	mov	r0, r8
    6a8e:	f021 f8fb 	bl	27c88 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_NOTIFY;
    6a92:	1c6b      	adds	r3, r5, #1
    6a94:	2201      	movs	r2, #1
    6a96:	f888 200c 	strb.w	r2, [r8, #12]
		k_poll_event_init(&events[ev_count],
    6a9a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
    6a9e:	ea4f 0883 	mov.w	r8, r3, lsl #2
    6aa2:	44b0      	add	r8, r6
				  &conn->tx_queue);
    6aa4:	f107 0328 	add.w	r3, r7, #40	; 0x28
    6aa8:	444b      	add	r3, r9
		k_poll_event_init(&events[ev_count],
    6aaa:	3304      	adds	r3, #4
    6aac:	2200      	movs	r2, #0
    6aae:	2104      	movs	r1, #4
    6ab0:	4640      	mov	r0, r8
    6ab2:	f021 f8e9 	bl	27c88 <k_poll_event_init>
		events[ev_count++].tag = BT_EVENT_CONN_TX_QUEUE;
    6ab6:	3502      	adds	r5, #2
    6ab8:	2302      	movs	r3, #2
    6aba:	f888 300c 	strb.w	r3, [r8, #12]
    6abe:	e7c0      	b.n	6a42 <bt_conn_prepare_events+0x4a>
    6ac0:	2000b9f0 	.word	0x2000b9f0
    6ac4:	200004a4 	.word	0x200004a4

00006ac8 <bt_conn_set_state>:
{
    6ac8:	b538      	push	{r3, r4, r5, lr}
	if (conn->state == state) {
    6aca:	7b05      	ldrb	r5, [r0, #12]
    6acc:	428d      	cmp	r5, r1
    6ace:	d00a      	beq.n	6ae6 <bt_conn_set_state+0x1e>
    6ad0:	4604      	mov	r4, r0
	conn->state = state;
    6ad2:	7301      	strb	r1, [r0, #12]
	switch (old_state) {
    6ad4:	b145      	cbz	r5, 6ae8 <bt_conn_set_state+0x20>
    6ad6:	2d02      	cmp	r5, #2
    6ad8:	d009      	beq.n	6aee <bt_conn_set_state+0x26>
	switch (conn->state) {
    6ada:	7b23      	ldrb	r3, [r4, #12]
    6adc:	2b02      	cmp	r3, #2
    6ade:	d068      	beq.n	6bb2 <bt_conn_set_state+0xea>
    6ae0:	2b03      	cmp	r3, #3
    6ae2:	d00b      	beq.n	6afc <bt_conn_set_state+0x34>
    6ae4:	b31b      	cbz	r3, 6b2e <bt_conn_set_state+0x66>
    6ae6:	bd38      	pop	{r3, r4, r5, pc}
		bt_conn_ref(conn);
    6ae8:	f7ff fece 	bl	6888 <bt_conn_ref>
		break;
    6aec:	e7f5      	b.n	6ada <bt_conn_set_state+0x12>
		    conn->type == BT_CONN_TYPE_LE) {
    6aee:	7883      	ldrb	r3, [r0, #2]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6af0:	2b00      	cmp	r3, #0
    6af2:	d1f2      	bne.n	6ada <bt_conn_set_state+0x12>
			k_delayed_work_cancel(&conn->le.update_work);
    6af4:	3074      	adds	r0, #116	; 0x74
    6af6:	f022 fd6b 	bl	295d0 <k_delayed_work_cancel>
    6afa:	e7ee      	b.n	6ada <bt_conn_set_state+0x12>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6afc:	78a3      	ldrb	r3, [r4, #2]
    6afe:	2b02      	cmp	r3, #2
    6b00:	d0f1      	beq.n	6ae6 <bt_conn_set_state+0x1e>
		k_fifo_init(&conn->tx_queue);
    6b02:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6b06:	f021 fbaa 	bl	2825e <k_queue_init>
		k_fifo_init(&conn->tx_notify);
    6b0a:	f104 001c 	add.w	r0, r4, #28
    6b0e:	f021 fba6 	bl	2825e <k_queue_init>
		k_poll_signal(&conn_change, 0);
    6b12:	2100      	movs	r1, #0
    6b14:	482d      	ldr	r0, [pc, #180]	; (6bcc <bt_conn_set_state+0x104>)
    6b16:	f021 fb43 	bl	281a0 <k_poll_signal>
	list->head = NULL;
    6b1a:	2300      	movs	r3, #0
    6b1c:	63e3      	str	r3, [r4, #60]	; 0x3c
	list->tail = NULL;
    6b1e:	6423      	str	r3, [r4, #64]	; 0x40
		bt_l2cap_connected(conn);
    6b20:	4620      	mov	r0, r4
    6b22:	f001 f87d 	bl	7c20 <bt_l2cap_connected>
		notify_connected(conn);
    6b26:	4620      	mov	r0, r4
    6b28:	f7ff fb74 	bl	6214 <notify_connected>
		break;
    6b2c:	bd38      	pop	{r3, r4, r5, pc}
		if (conn->type == BT_CONN_TYPE_SCO) {
    6b2e:	78a3      	ldrb	r3, [r4, #2]
    6b30:	2b02      	cmp	r3, #2
    6b32:	d00d      	beq.n	6b50 <bt_conn_set_state+0x88>
		if (old_state == BT_CONN_CONNECTED ||
    6b34:	1eeb      	subs	r3, r5, #3
    6b36:	b2db      	uxtb	r3, r3
    6b38:	2b01      	cmp	r3, #1
    6b3a:	d90d      	bls.n	6b58 <bt_conn_set_state+0x90>
		} else if (old_state == BT_CONN_CONNECT) {
    6b3c:	2d02      	cmp	r5, #2
    6b3e:	d02d      	beq.n	6b9c <bt_conn_set_state+0xd4>
		} else if (old_state == BT_CONN_CONNECT_SCAN) {
    6b40:	2d01      	cmp	r5, #1
    6b42:	d1d0      	bne.n	6ae6 <bt_conn_set_state+0x1e>
			if (conn->err) {
    6b44:	7ae3      	ldrb	r3, [r4, #11]
    6b46:	bb83      	cbnz	r3, 6baa <bt_conn_set_state+0xe2>
			bt_conn_unref(conn);
    6b48:	4620      	mov	r0, r4
    6b4a:	f7ff ff2f 	bl	69ac <bt_conn_unref>
    6b4e:	bd38      	pop	{r3, r4, r5, pc}
			bt_conn_unref(conn);
    6b50:	4620      	mov	r0, r4
    6b52:	f7ff ff2b 	bl	69ac <bt_conn_unref>
			break;
    6b56:	bd38      	pop	{r3, r4, r5, pc}
			bt_l2cap_disconnected(conn);
    6b58:	4620      	mov	r0, r4
    6b5a:	f000 fd21 	bl	75a0 <bt_l2cap_disconnected>
			notify_disconnected(conn);
    6b5e:	4620      	mov	r0, r4
    6b60:	f7ff fb6a 	bl	6238 <notify_disconnected>
			process_unack_tx(conn);
    6b64:	4620      	mov	r0, r4
    6b66:	f7ff fc17 	bl	6398 <process_unack_tx>
			if (conn->type == BT_CONN_TYPE_LE) {
    6b6a:	78a3      	ldrb	r3, [r4, #2]
    6b6c:	b18b      	cbz	r3, 6b92 <bt_conn_set_state+0xca>
			atomic_set_bit(conn->flags, BT_CONN_CLEANUP);
    6b6e:	3404      	adds	r4, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    6b70:	f3bf 8f5b 	dmb	ish
    6b74:	e854 3f00 	ldrex	r3, [r4]
    6b78:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    6b7c:	e844 3200 	strex	r2, r3, [r4]
    6b80:	2a00      	cmp	r2, #0
    6b82:	d1f7      	bne.n	6b74 <bt_conn_set_state+0xac>
    6b84:	f3bf 8f5b 	dmb	ish
			k_poll_signal(&conn_change, 0);
    6b88:	2100      	movs	r1, #0
    6b8a:	4810      	ldr	r0, [pc, #64]	; (6bcc <bt_conn_set_state+0x104>)
    6b8c:	f021 fb08 	bl	281a0 <k_poll_signal>
    6b90:	bd38      	pop	{r3, r4, r5, pc}
				k_delayed_work_cancel(&conn->le.update_work);
    6b92:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6b96:	f022 fd1b 	bl	295d0 <k_delayed_work_cancel>
    6b9a:	e7e8      	b.n	6b6e <bt_conn_set_state+0xa6>
			notify_connected(conn);
    6b9c:	4620      	mov	r0, r4
    6b9e:	f7ff fb39 	bl	6214 <notify_connected>
			bt_conn_unref(conn);
    6ba2:	4620      	mov	r0, r4
    6ba4:	f7ff ff02 	bl	69ac <bt_conn_unref>
    6ba8:	bd38      	pop	{r3, r4, r5, pc}
				notify_connected(conn);
    6baa:	4620      	mov	r0, r4
    6bac:	f7ff fb32 	bl	6214 <notify_connected>
    6bb0:	e7ca      	b.n	6b48 <bt_conn_set_state+0x80>
		if (conn->type == BT_CONN_TYPE_SCO) {
    6bb2:	78a3      	ldrb	r3, [r4, #2]
    6bb4:	2b02      	cmp	r3, #2
    6bb6:	d096      	beq.n	6ae6 <bt_conn_set_state+0x1e>
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6bb8:	2b00      	cmp	r3, #0
    6bba:	d194      	bne.n	6ae6 <bt_conn_set_state+0x1e>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    6bbc:	f640 32b8 	movw	r2, #3000	; 0xbb8
    6bc0:	f104 0174 	add.w	r1, r4, #116	; 0x74
    6bc4:	4802      	ldr	r0, [pc, #8]	; (6bd0 <bt_conn_set_state+0x108>)
    6bc6:	f022 fd5d 	bl	29684 <k_delayed_work_submit_to_queue>
    6bca:	e78c      	b.n	6ae6 <bt_conn_set_state+0x1e>
    6bcc:	2000b9f0 	.word	0x2000b9f0
    6bd0:	20002bd8 	.word	0x20002bd8

00006bd4 <bt_hci_disconnect>:
{
    6bd4:	b570      	push	{r4, r5, r6, lr}
    6bd6:	4605      	mov	r5, r0
    6bd8:	460e      	mov	r6, r1
	buf = bt_hci_cmd_create(BT_HCI_OP_DISCONNECT, sizeof(*disconn));
    6bda:	2103      	movs	r1, #3
    6bdc:	f240 4006 	movw	r0, #1030	; 0x406
    6be0:	f7fd fbac 	bl	433c <bt_hci_cmd_create>
	if (!buf) {
    6be4:	b1a8      	cbz	r0, 6c12 <bt_hci_disconnect+0x3e>
    6be6:	4604      	mov	r4, r0
	disconn = net_buf_add(buf, sizeof(*disconn));
    6be8:	2103      	movs	r1, #3
    6bea:	3008      	adds	r0, #8
    6bec:	f013 fc02 	bl	1a3f4 <net_buf_simple_add>
	disconn->handle = sys_cpu_to_le16(conn->handle);
    6bf0:	882b      	ldrh	r3, [r5, #0]
    6bf2:	8003      	strh	r3, [r0, #0]
	disconn->reason = reason;
    6bf4:	7086      	strb	r6, [r0, #2]
	err = bt_hci_cmd_send(BT_HCI_OP_DISCONNECT, buf);
    6bf6:	4621      	mov	r1, r4
    6bf8:	f240 4006 	movw	r0, #1030	; 0x406
    6bfc:	f7fe f8fc 	bl	4df8 <bt_hci_cmd_send>
	if (err) {
    6c00:	4604      	mov	r4, r0
    6c02:	b108      	cbz	r0, 6c08 <bt_hci_disconnect+0x34>
}
    6c04:	4620      	mov	r0, r4
    6c06:	bd70      	pop	{r4, r5, r6, pc}
	bt_conn_set_state(conn, BT_CONN_DISCONNECT);
    6c08:	2104      	movs	r1, #4
    6c0a:	4628      	mov	r0, r5
    6c0c:	f7ff ff5c 	bl	6ac8 <bt_conn_set_state>
	return 0;
    6c10:	e7f8      	b.n	6c04 <bt_hci_disconnect+0x30>
		return -ENOBUFS;
    6c12:	f06f 0468 	mvn.w	r4, #104	; 0x68
    6c16:	e7f5      	b.n	6c04 <bt_hci_disconnect+0x30>

00006c18 <bt_conn_get_info>:
	info->type = conn->type;
    6c18:	7883      	ldrb	r3, [r0, #2]
    6c1a:	700b      	strb	r3, [r1, #0]
	info->role = conn->role;
    6c1c:	78c3      	ldrb	r3, [r0, #3]
    6c1e:	704b      	strb	r3, [r1, #1]
	switch (conn->type) {
    6c20:	7883      	ldrb	r3, [r0, #2]
    6c22:	b9cb      	cbnz	r3, 6c58 <bt_conn_get_info+0x40>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    6c24:	78c3      	ldrb	r3, [r0, #3]
    6c26:	b983      	cbnz	r3, 6c4a <bt_conn_get_info+0x32>
			info->le.src = &conn->le.init_addr;
    6c28:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6c2c:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.resp_addr;
    6c2e:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6c32:	608b      	str	r3, [r1, #8]
		info->le.interval = conn->le.interval;
    6c34:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6c38:	818b      	strh	r3, [r1, #12]
		info->le.latency = conn->le.latency;
    6c3a:	f8b0 3064 	ldrh.w	r3, [r0, #100]	; 0x64
    6c3e:	81cb      	strh	r3, [r1, #14]
		info->le.timeout = conn->le.timeout;
    6c40:	f8b0 3066 	ldrh.w	r3, [r0, #102]	; 0x66
    6c44:	820b      	strh	r3, [r1, #16]
		return 0;
    6c46:	2000      	movs	r0, #0
    6c48:	4770      	bx	lr
			info->le.src = &conn->le.resp_addr;
    6c4a:	f100 0356 	add.w	r3, r0, #86	; 0x56
    6c4e:	604b      	str	r3, [r1, #4]
			info->le.dst = &conn->le.init_addr;
    6c50:	f100 034f 	add.w	r3, r0, #79	; 0x4f
    6c54:	608b      	str	r3, [r1, #8]
    6c56:	e7ed      	b.n	6c34 <bt_conn_get_info+0x1c>
	return -EINVAL;
    6c58:	f06f 0015 	mvn.w	r0, #21
}
    6c5c:	4770      	bx	lr
	...

00006c60 <bt_le_set_auto_conn>:
	return conn;
}

int bt_le_set_auto_conn(bt_addr_le_t *addr,
			const struct bt_le_conn_param *param)
{
    6c60:	b570      	push	{r4, r5, r6, lr}
    6c62:	4606      	mov	r6, r0
	struct bt_conn *conn;

	if (param && !bt_le_conn_params_valid(param)) {
    6c64:	460d      	mov	r5, r1
    6c66:	b121      	cbz	r1, 6c72 <bt_le_set_auto_conn+0x12>
    6c68:	4608      	mov	r0, r1
    6c6a:	f7fd ffd1 	bl	4c10 <bt_le_conn_params_valid>
    6c6e:	2800      	cmp	r0, #0
    6c70:	d05a      	beq.n	6d28 <bt_le_set_auto_conn+0xc8>
		return -EINVAL;
	}

	conn = bt_conn_lookup_addr_le(addr);
    6c72:	4630      	mov	r0, r6
    6c74:	f7ff fe40 	bl	68f8 <bt_conn_lookup_addr_le>
	if (!conn) {
    6c78:	4604      	mov	r4, r0
    6c7a:	b1d8      	cbz	r0, 6cb4 <bt_le_set_auto_conn+0x54>
		if (!conn) {
			return -ENOMEM;
		}
	}

	if (param) {
    6c7c:	b33d      	cbz	r5, 6cce <bt_le_set_auto_conn+0x6e>
		bt_conn_set_param_le(conn, param);
    6c7e:	4629      	mov	r1, r5
    6c80:	4620      	mov	r0, r4
    6c82:	f7ff fb41 	bl	6308 <bt_conn_set_param_le>

		if (!atomic_test_and_set_bit(conn->flags,
    6c86:	1d23      	adds	r3, r4, #4
    6c88:	f3bf 8f5b 	dmb	ish
    6c8c:	e853 2f00 	ldrex	r2, [r3]
    6c90:	f042 0101 	orr.w	r1, r2, #1
    6c94:	e843 1000 	strex	r0, r1, [r3]
    6c98:	2800      	cmp	r0, #0
    6c9a:	d1f7      	bne.n	6c8c <bt_le_set_auto_conn+0x2c>
    6c9c:	f3bf 8f5b 	dmb	ish
    6ca0:	f012 0f01 	tst.w	r2, #1
    6ca4:	d00f      	beq.n	6cc6 <bt_le_set_auto_conn+0x66>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
			}
		}
	}

	if (conn->state == BT_CONN_DISCONNECTED &&
    6ca6:	7b23      	ldrb	r3, [r4, #12]
    6ca8:	b363      	cbz	r3, 6d04 <bt_le_set_auto_conn+0xa4>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
		}
		bt_le_scan_update(false);
	}

	bt_conn_unref(conn);
    6caa:	4620      	mov	r0, r4
    6cac:	f7ff fe7e 	bl	69ac <bt_conn_unref>

	return 0;
    6cb0:	2000      	movs	r0, #0
    6cb2:	bd70      	pop	{r4, r5, r6, pc}
		conn = bt_conn_add_le(addr);
    6cb4:	4630      	mov	r0, r6
    6cb6:	f7ff fda9 	bl	680c <bt_conn_add_le>
		if (!conn) {
    6cba:	4604      	mov	r4, r0
    6cbc:	2800      	cmp	r0, #0
    6cbe:	d1dd      	bne.n	6c7c <bt_le_set_auto_conn+0x1c>
			return -ENOMEM;
    6cc0:	f06f 000b 	mvn.w	r0, #11
}
    6cc4:	bd70      	pop	{r4, r5, r6, pc}
			bt_conn_ref(conn);
    6cc6:	4620      	mov	r0, r4
    6cc8:	f7ff fdde 	bl	6888 <bt_conn_ref>
    6ccc:	e7eb      	b.n	6ca6 <bt_le_set_auto_conn+0x46>
		if (atomic_test_and_clear_bit(conn->flags,
    6cce:	1d23      	adds	r3, r4, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6cd0:	f3bf 8f5b 	dmb	ish
    6cd4:	e853 2f00 	ldrex	r2, [r3]
    6cd8:	f022 0101 	bic.w	r1, r2, #1
    6cdc:	e843 1000 	strex	r0, r1, [r3]
    6ce0:	2800      	cmp	r0, #0
    6ce2:	d1f7      	bne.n	6cd4 <bt_le_set_auto_conn+0x74>
    6ce4:	f3bf 8f5b 	dmb	ish
    6ce8:	f012 0f01 	tst.w	r2, #1
    6cec:	d0db      	beq.n	6ca6 <bt_le_set_auto_conn+0x46>
			bt_conn_unref(conn);
    6cee:	4620      	mov	r0, r4
    6cf0:	f7ff fe5c 	bl	69ac <bt_conn_unref>
			if (conn->state == BT_CONN_CONNECT_SCAN) {
    6cf4:	7b23      	ldrb	r3, [r4, #12]
    6cf6:	2b01      	cmp	r3, #1
    6cf8:	d1d5      	bne.n	6ca6 <bt_le_set_auto_conn+0x46>
				bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6cfa:	2100      	movs	r1, #0
    6cfc:	4620      	mov	r0, r4
    6cfe:	f7ff fee3 	bl	6ac8 <bt_conn_set_state>
    6d02:	e7d0      	b.n	6ca6 <bt_le_set_auto_conn+0x46>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    6d04:	f3bf 8f5b 	dmb	ish
    6d08:	4b09      	ldr	r3, [pc, #36]	; (6d30 <bt_le_set_auto_conn+0xd0>)
    6d0a:	681b      	ldr	r3, [r3, #0]
    6d0c:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6d10:	f013 0f02 	tst.w	r3, #2
    6d14:	d0c9      	beq.n	6caa <bt_le_set_auto_conn+0x4a>
		if (param) {
    6d16:	b11d      	cbz	r5, 6d20 <bt_le_set_auto_conn+0xc0>
			bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    6d18:	2101      	movs	r1, #1
    6d1a:	4620      	mov	r0, r4
    6d1c:	f7ff fed4 	bl	6ac8 <bt_conn_set_state>
		bt_le_scan_update(false);
    6d20:	2000      	movs	r0, #0
    6d22:	f7fe f919 	bl	4f58 <bt_le_scan_update>
    6d26:	e7c0      	b.n	6caa <bt_le_set_auto_conn+0x4a>
		return -EINVAL;
    6d28:	f06f 0015 	mvn.w	r0, #21
    6d2c:	bd70      	pop	{r4, r5, r6, pc}
    6d2e:	bf00      	nop
    6d30:	2000b928 	.word	0x2000b928

00006d34 <bt_conn_disconnect>:
{
    6d34:	b538      	push	{r3, r4, r5, lr}
    6d36:	4604      	mov	r4, r0
    6d38:	460d      	mov	r5, r1
	    conn->type == BT_CONN_TYPE_LE) {
    6d3a:	7883      	ldrb	r3, [r0, #2]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6d3c:	b13b      	cbz	r3, 6d4e <bt_conn_disconnect+0x1a>
	switch (conn->state) {
    6d3e:	7b23      	ldrb	r3, [r4, #12]
    6d40:	3b01      	subs	r3, #1
    6d42:	2b03      	cmp	r3, #3
    6d44:	d823      	bhi.n	6d8e <bt_conn_disconnect+0x5a>
    6d46:	e8df f003 	tbb	[pc, r3]
    6d4a:	1309      	.short	0x1309
    6d4c:	071d      	.short	0x071d
		bt_le_set_auto_conn(&conn->le.dst, NULL);
    6d4e:	2100      	movs	r1, #0
    6d50:	3048      	adds	r0, #72	; 0x48
    6d52:	f7ff ff85 	bl	6c60 <bt_le_set_auto_conn>
    6d56:	e7f2      	b.n	6d3e <bt_conn_disconnect+0xa>
		return 0;
    6d58:	2000      	movs	r0, #0
    6d5a:	bd38      	pop	{r3, r4, r5, pc}
		conn->err = reason;
    6d5c:	72e5      	strb	r5, [r4, #11]
		bt_conn_set_state(conn, BT_CONN_DISCONNECTED);
    6d5e:	2100      	movs	r1, #0
    6d60:	4620      	mov	r0, r4
    6d62:	f7ff feb1 	bl	6ac8 <bt_conn_set_state>
		bt_le_scan_update(false);
    6d66:	2000      	movs	r0, #0
    6d68:	f7fe f8f6 	bl	4f58 <bt_le_scan_update>
		return 0;
    6d6c:	2000      	movs	r0, #0
    6d6e:	bd38      	pop	{r3, r4, r5, pc}
			k_delayed_work_cancel(&conn->le.update_work);
    6d70:	f104 0074 	add.w	r0, r4, #116	; 0x74
    6d74:	f022 fc2c 	bl	295d0 <k_delayed_work_cancel>
			return bt_hci_cmd_send(BT_HCI_OP_LE_CREATE_CONN_CANCEL,
    6d78:	2100      	movs	r1, #0
    6d7a:	f242 000e 	movw	r0, #8206	; 0x200e
    6d7e:	f7fe f83b 	bl	4df8 <bt_hci_cmd_send>
    6d82:	bd38      	pop	{r3, r4, r5, pc}
		return bt_hci_disconnect(conn, reason);
    6d84:	4629      	mov	r1, r5
    6d86:	4620      	mov	r0, r4
    6d88:	f7ff ff24 	bl	6bd4 <bt_hci_disconnect>
    6d8c:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    6d8e:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    6d92:	bd38      	pop	{r3, r4, r5, pc}

00006d94 <bt_conn_le_conn_update>:
}
#endif /* CONFIG_BT_PERIPHERAL */

int bt_conn_le_conn_update(struct bt_conn *conn,
			   const struct bt_le_conn_param *param)
{
    6d94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6d96:	4607      	mov	r7, r0
    6d98:	460d      	mov	r5, r1
	struct hci_cp_le_conn_update *conn_update;
	struct net_buf *buf;

	buf = bt_hci_cmd_create(BT_HCI_OP_LE_CONN_UPDATE,
    6d9a:	210e      	movs	r1, #14
    6d9c:	f242 0013 	movw	r0, #8211	; 0x2013
    6da0:	f7fd facc 	bl	433c <bt_hci_cmd_create>
				sizeof(*conn_update));
	if (!buf) {
    6da4:	b1c8      	cbz	r0, 6dda <bt_conn_le_conn_update+0x46>
    6da6:	4606      	mov	r6, r0
		return -ENOBUFS;
	}

	conn_update = net_buf_add(buf, sizeof(*conn_update));
    6da8:	210e      	movs	r1, #14
    6daa:	3008      	adds	r0, #8
    6dac:	f013 fb22 	bl	1a3f4 <net_buf_simple_add>
    6db0:	4604      	mov	r4, r0
	memset(conn_update, 0, sizeof(*conn_update));
    6db2:	220e      	movs	r2, #14
    6db4:	2100      	movs	r1, #0
    6db6:	f022 fdef 	bl	29998 <memset>
	conn_update->handle = sys_cpu_to_le16(conn->handle);
    6dba:	883b      	ldrh	r3, [r7, #0]
    6dbc:	8023      	strh	r3, [r4, #0]
	conn_update->conn_interval_min = sys_cpu_to_le16(param->interval_min);
    6dbe:	882b      	ldrh	r3, [r5, #0]
    6dc0:	8063      	strh	r3, [r4, #2]
	conn_update->conn_interval_max = sys_cpu_to_le16(param->interval_max);
    6dc2:	886b      	ldrh	r3, [r5, #2]
    6dc4:	80a3      	strh	r3, [r4, #4]
	conn_update->conn_latency = sys_cpu_to_le16(param->latency);
    6dc6:	88ab      	ldrh	r3, [r5, #4]
    6dc8:	80e3      	strh	r3, [r4, #6]
	conn_update->supervision_timeout = sys_cpu_to_le16(param->timeout);
    6dca:	88eb      	ldrh	r3, [r5, #6]
    6dcc:	8123      	strh	r3, [r4, #8]

	return bt_hci_cmd_send(BT_HCI_OP_LE_CONN_UPDATE, buf);
    6dce:	4631      	mov	r1, r6
    6dd0:	f242 0013 	movw	r0, #8211	; 0x2013
    6dd4:	f7fe f810 	bl	4df8 <bt_hci_cmd_send>
    6dd8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return -ENOBUFS;
    6dda:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    6dde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00006de0 <bt_conn_le_param_update>:
{
    6de0:	b538      	push	{r3, r4, r5, lr}
	if (conn->le.interval >= param->interval_min &&
    6de2:	f8b0 305e 	ldrh.w	r3, [r0, #94]	; 0x5e
    6de6:	880a      	ldrh	r2, [r1, #0]
    6de8:	4293      	cmp	r3, r2
    6dea:	d307      	bcc.n	6dfc <bt_conn_le_param_update+0x1c>
	    conn->le.interval <= param->interval_max &&
    6dec:	884a      	ldrh	r2, [r1, #2]
	if (conn->le.interval >= param->interval_min &&
    6dee:	4293      	cmp	r3, r2
    6df0:	d804      	bhi.n	6dfc <bt_conn_le_param_update+0x1c>
	    conn->le.latency == param->latency &&
    6df2:	f8b0 2064 	ldrh.w	r2, [r0, #100]	; 0x64
    6df6:	888b      	ldrh	r3, [r1, #4]
	    conn->le.interval <= param->interval_max &&
    6df8:	429a      	cmp	r2, r3
    6dfa:	d016      	beq.n	6e2a <bt_conn_le_param_update+0x4a>
    6dfc:	460d      	mov	r5, r1
    6dfe:	4604      	mov	r4, r0
	k_delayed_work_cancel(&conn->le.update_work);
    6e00:	3074      	adds	r0, #116	; 0x74
    6e02:	f022 fbe5 	bl	295d0 <k_delayed_work_cancel>
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6e06:	4b0f      	ldr	r3, [pc, #60]	; (6e44 <bt_conn_le_param_update+0x64>)
    6e08:	f893 3078 	ldrb.w	r3, [r3, #120]	; 0x78
    6e0c:	f013 0f02 	tst.w	r3, #2
    6e10:	d004      	beq.n	6e1c <bt_conn_le_param_update+0x3c>
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6e12:	f894 3068 	ldrb.w	r3, [r4, #104]	; 0x68
	if ((BT_FEAT_LE_CONN_PARAM_REQ_PROC(bt_dev.le.features) &&
    6e16:	f013 0f02 	tst.w	r3, #2
    6e1a:	d101      	bne.n	6e20 <bt_conn_le_param_update+0x40>
	    (conn->role == BT_HCI_ROLE_MASTER)) {
    6e1c:	78e3      	ldrb	r3, [r4, #3]
	     BT_FEAT_LE_CONN_PARAM_REQ_PROC(conn->le.features)) ||
    6e1e:	b963      	cbnz	r3, 6e3a <bt_conn_le_param_update+0x5a>
		return bt_conn_le_conn_update(conn, param);
    6e20:	4629      	mov	r1, r5
    6e22:	4620      	mov	r0, r4
    6e24:	f7ff ffb6 	bl	6d94 <bt_conn_le_conn_update>
    6e28:	bd38      	pop	{r3, r4, r5, pc}
	    conn->le.timeout == param->timeout) {
    6e2a:	f8b0 2066 	ldrh.w	r2, [r0, #102]	; 0x66
    6e2e:	88cb      	ldrh	r3, [r1, #6]
	    conn->le.latency == param->latency &&
    6e30:	429a      	cmp	r2, r3
    6e32:	d1e3      	bne.n	6dfc <bt_conn_le_param_update+0x1c>
		return -EALREADY;
    6e34:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    6e38:	bd38      	pop	{r3, r4, r5, pc}
	return bt_l2cap_update_conn_param(conn, param);
    6e3a:	4629      	mov	r1, r5
    6e3c:	4620      	mov	r0, r4
    6e3e:	f001 f821 	bl	7e84 <bt_l2cap_update_conn_param>
    6e42:	bd38      	pop	{r3, r4, r5, pc}
    6e44:	2000b8b8 	.word	0x2000b8b8

00006e48 <le_conn_update>:
{
    6e48:	b500      	push	{lr}
    6e4a:	b083      	sub	sp, #12
	struct bt_conn *conn = CONTAINER_OF(le, struct bt_conn, le);
    6e4c:	f1a0 0274 	sub.w	r2, r0, #116	; 0x74
	    conn->state == BT_CONN_CONNECT) {
    6e50:	f810 3c68 	ldrb.w	r3, [r0, #-104]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    6e54:	2b02      	cmp	r3, #2
    6e56:	d016      	beq.n	6e86 <le_conn_update+0x3e>
	param = BT_LE_CONN_PARAM(conn->le.interval_min,
    6e58:	f830 3c14 	ldrh.w	r3, [r0, #-20]
    6e5c:	f8ad 3000 	strh.w	r3, [sp]
    6e60:	f830 3c12 	ldrh.w	r3, [r0, #-18]
    6e64:	f8ad 3002 	strh.w	r3, [sp, #2]
    6e68:	f830 3c10 	ldrh.w	r3, [r0, #-16]
    6e6c:	f8ad 3004 	strh.w	r3, [sp, #4]
    6e70:	f830 3c0e 	ldrh.w	r3, [r0, #-14]
    6e74:	f8ad 3006 	strh.w	r3, [sp, #6]
	bt_conn_le_param_update(conn, param);
    6e78:	4669      	mov	r1, sp
    6e7a:	4610      	mov	r0, r2
    6e7c:	f7ff ffb0 	bl	6de0 <bt_conn_le_param_update>
}
    6e80:	b003      	add	sp, #12
    6e82:	f85d fb04 	ldr.w	pc, [sp], #4
		bt_conn_disconnect(conn, BT_HCI_ERR_REMOTE_USER_TERM_CONN);
    6e86:	2113      	movs	r1, #19
    6e88:	4610      	mov	r0, r2
    6e8a:	f7ff ff53 	bl	6d34 <bt_conn_disconnect>
		return;
    6e8e:	e7f7      	b.n	6e80 <le_conn_update+0x38>

00006e90 <le_conn_update>:
{
    6e90:	b510      	push	{r4, lr}
    6e92:	b082      	sub	sp, #8
    6e94:	460c      	mov	r4, r1
	struct hci_cp_le_conn_update *cmd = (void *)buf->data;
    6e96:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    6e98:	8810      	ldrh	r0, [r2, #0]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    6e9a:	8893      	ldrh	r3, [r2, #4]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    6e9c:	88d1      	ldrh	r1, [r2, #6]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    6e9e:	8912      	ldrh	r2, [r2, #8]
	status = ll_conn_update(handle, 0, 0, conn_interval_max,
    6ea0:	9201      	str	r2, [sp, #4]
    6ea2:	9100      	str	r1, [sp, #0]
    6ea4:	2200      	movs	r2, #0
    6ea6:	4611      	mov	r1, r2
    6ea8:	f010 fdb6 	bl	17a18 <ll_conn_update>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    6eac:	b100      	cbz	r0, 6eb0 <le_conn_update+0x20>
    6eae:	200c      	movs	r0, #12
    6eb0:	f005 fd82 	bl	c9b8 <cmd_status>
    6eb4:	6020      	str	r0, [r4, #0]
}
    6eb6:	b002      	add	sp, #8
    6eb8:	bd10      	pop	{r4, pc}
	...

00006ebc <bt_conn_create_pdu>:

struct net_buf *bt_conn_create_pdu(struct net_buf_pool *pool, size_t reserve)
{
    6ebc:	b538      	push	{r3, r4, r5, lr}
    6ebe:	460d      	mov	r5, r1
	struct net_buf *buf;

	if (!pool) {
    6ec0:	4603      	mov	r3, r0
    6ec2:	b150      	cbz	r0, 6eda <bt_conn_create_pdu+0x1e>
		pool = &acl_tx_pool;
	}

	buf = net_buf_alloc(pool, K_FOREVER);
    6ec4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    6ec8:	4618      	mov	r0, r3
    6eca:	f013 f9d9 	bl	1a280 <net_buf_alloc>
    6ece:	4604      	mov	r4, r0
	__ASSERT_NO_MSG(buf);

	reserve += sizeof(struct bt_hci_acl_hdr) + CONFIG_BT_HCI_RESERVE;
	net_buf_reserve(buf, reserve);
    6ed0:	1d29      	adds	r1, r5, #4
    6ed2:	f013 fa30 	bl	1a336 <net_buf_reserve>

	return buf;
}
    6ed6:	4620      	mov	r0, r4
    6ed8:	bd38      	pop	{r3, r4, r5, pc}
		pool = &acl_tx_pool;
    6eda:	4b01      	ldr	r3, [pc, #4]	; (6ee0 <bt_conn_create_pdu+0x24>)
    6edc:	e7f2      	b.n	6ec4 <bt_conn_create_pdu+0x8>
    6ede:	bf00      	nop
    6ee0:	2000cd28 	.word	0x2000cd28

00006ee4 <create_frag>:
{
    6ee4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    6ee6:	4606      	mov	r6, r0
    6ee8:	460c      	mov	r4, r1
	frag = bt_conn_create_pdu(NULL, 0);
    6eea:	2100      	movs	r1, #0
    6eec:	4608      	mov	r0, r1
    6eee:	f7ff ffe5 	bl	6ebc <bt_conn_create_pdu>
    6ef2:	4605      	mov	r5, r0
	if (conn->state != BT_CONN_CONNECTED) {
    6ef4:	7b33      	ldrb	r3, [r6, #12]
    6ef6:	2b03      	cmp	r3, #3
    6ef8:	d121      	bne.n	6f3e <create_frag+0x5a>
    6efa:	f100 0310 	add.w	r3, r0, #16
    6efe:	89c2      	ldrh	r2, [r0, #14]
    6f00:	4413      	add	r3, r2
    6f02:	3303      	adds	r3, #3
    6f04:	f023 0303 	bic.w	r3, r3, #3
	conn_tx(frag)->cb = NULL;
    6f08:	2200      	movs	r2, #0
    6f0a:	601a      	str	r2, [r3, #0]
	return bt_dev.le.mtu;
    6f0c:	4b10      	ldr	r3, [pc, #64]	; (6f50 <create_frag+0x6c>)
    6f0e:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6f12:	f100 0608 	add.w	r6, r0, #8
    6f16:	4630      	mov	r0, r6
    6f18:	f013 fad5 	bl	1a4c6 <net_buf_simple_tailroom>
    6f1c:	4287      	cmp	r7, r0
    6f1e:	d212      	bcs.n	6f46 <create_frag+0x62>
	return bt_dev.le.mtu;
    6f20:	4b0b      	ldr	r3, [pc, #44]	; (6f50 <create_frag+0x6c>)
    6f22:	f8b3 7088 	ldrh.w	r7, [r3, #136]	; 0x88
	net_buf_add_mem(frag, buf->data, frag_len);
    6f26:	463a      	mov	r2, r7
    6f28:	f854 1f08 	ldr.w	r1, [r4, #8]!
    6f2c:	4630      	mov	r0, r6
    6f2e:	f013 fa67 	bl	1a400 <net_buf_simple_add_mem>
	net_buf_pull(buf, frag_len);
    6f32:	4639      	mov	r1, r7
    6f34:	4620      	mov	r0, r4
    6f36:	f013 faaa 	bl	1a48e <net_buf_simple_pull>
}
    6f3a:	4628      	mov	r0, r5
    6f3c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(frag);
    6f3e:	f013 fa0d 	bl	1a35c <net_buf_unref>
		return NULL;
    6f42:	2500      	movs	r5, #0
    6f44:	e7f9      	b.n	6f3a <create_frag+0x56>
	frag_len = min(conn_mtu(conn), net_buf_tailroom(frag));
    6f46:	4630      	mov	r0, r6
    6f48:	f013 fabd 	bl	1a4c6 <net_buf_simple_tailroom>
    6f4c:	b287      	uxth	r7, r0
    6f4e:	e7ea      	b.n	6f26 <create_frag+0x42>
    6f50:	2000b8b8 	.word	0x2000b8b8

00006f54 <send_buf>:
{
    6f54:	b538      	push	{r3, r4, r5, lr}
    6f56:	4605      	mov	r5, r0
    6f58:	460c      	mov	r4, r1
	if (buf->len <= conn_mtu(conn)) {
    6f5a:	898a      	ldrh	r2, [r1, #12]
	return bt_dev.le.mtu;
    6f5c:	4b1b      	ldr	r3, [pc, #108]	; (6fcc <send_buf+0x78>)
    6f5e:	f8b3 3088 	ldrh.w	r3, [r3, #136]	; 0x88
	if (buf->len <= conn_mtu(conn)) {
    6f62:	429a      	cmp	r2, r3
    6f64:	d91f      	bls.n	6fa6 <send_buf+0x52>
	frag = create_frag(conn, buf);
    6f66:	f7ff ffbd 	bl	6ee4 <create_frag>
	if (!frag) {
    6f6a:	4601      	mov	r1, r0
    6f6c:	b350      	cbz	r0, 6fc4 <send_buf+0x70>
	if (!send_frag(conn, frag, BT_ACL_START_NO_FLUSH, true)) {
    6f6e:	2301      	movs	r3, #1
    6f70:	2200      	movs	r2, #0
    6f72:	4628      	mov	r0, r5
    6f74:	f7ff fc04 	bl	6780 <send_frag>
    6f78:	4603      	mov	r3, r0
    6f7a:	b1c8      	cbz	r0, 6fb0 <send_buf+0x5c>
	while (buf->len > conn_mtu(conn)) {
    6f7c:	89a3      	ldrh	r3, [r4, #12]
	return bt_dev.le.mtu;
    6f7e:	4a13      	ldr	r2, [pc, #76]	; (6fcc <send_buf+0x78>)
    6f80:	f8b2 2088 	ldrh.w	r2, [r2, #136]	; 0x88
	while (buf->len > conn_mtu(conn)) {
    6f84:	429a      	cmp	r2, r3
    6f86:	d215      	bcs.n	6fb4 <send_buf+0x60>
		frag = create_frag(conn, buf);
    6f88:	4621      	mov	r1, r4
    6f8a:	4628      	mov	r0, r5
    6f8c:	f7ff ffaa 	bl	6ee4 <create_frag>
		if (!frag) {
    6f90:	4601      	mov	r1, r0
    6f92:	b1c8      	cbz	r0, 6fc8 <send_buf+0x74>
		if (!send_frag(conn, frag, BT_ACL_CONT, true)) {
    6f94:	2301      	movs	r3, #1
    6f96:	461a      	mov	r2, r3
    6f98:	4628      	mov	r0, r5
    6f9a:	f7ff fbf1 	bl	6780 <send_frag>
    6f9e:	4603      	mov	r3, r0
    6fa0:	2800      	cmp	r0, #0
    6fa2:	d1eb      	bne.n	6f7c <send_buf+0x28>
    6fa4:	e004      	b.n	6fb0 <send_buf+0x5c>
		return send_frag(conn, buf, BT_ACL_START_NO_FLUSH, false);
    6fa6:	2300      	movs	r3, #0
    6fa8:	461a      	mov	r2, r3
    6faa:	f7ff fbe9 	bl	6780 <send_frag>
    6fae:	4603      	mov	r3, r0
}
    6fb0:	4618      	mov	r0, r3
    6fb2:	bd38      	pop	{r3, r4, r5, pc}
	return send_frag(conn, buf, BT_ACL_CONT, false);
    6fb4:	2300      	movs	r3, #0
    6fb6:	2201      	movs	r2, #1
    6fb8:	4621      	mov	r1, r4
    6fba:	4628      	mov	r0, r5
    6fbc:	f7ff fbe0 	bl	6780 <send_frag>
    6fc0:	4603      	mov	r3, r0
    6fc2:	e7f5      	b.n	6fb0 <send_buf+0x5c>
		return false;
    6fc4:	2300      	movs	r3, #0
    6fc6:	e7f3      	b.n	6fb0 <send_buf+0x5c>
			return false;
    6fc8:	2300      	movs	r3, #0
    6fca:	e7f1      	b.n	6fb0 <send_buf+0x5c>
    6fcc:	2000b8b8 	.word	0x2000b8b8

00006fd0 <bt_conn_process_tx>:
{
    6fd0:	b538      	push	{r3, r4, r5, lr}
    6fd2:	4604      	mov	r4, r0
	if (conn->state == BT_CONN_DISCONNECTED &&
    6fd4:	7b03      	ldrb	r3, [r0, #12]
    6fd6:	b97b      	cbnz	r3, 6ff8 <bt_conn_process_tx+0x28>
	    atomic_test_and_clear_bit(conn->flags, BT_CONN_CLEANUP)) {
    6fd8:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    6fda:	f3bf 8f5b 	dmb	ish
    6fde:	e853 2f00 	ldrex	r2, [r3]
    6fe2:	f022 0140 	bic.w	r1, r2, #64	; 0x40
    6fe6:	e843 1000 	strex	r0, r1, [r3]
    6fea:	2800      	cmp	r0, #0
    6fec:	d1f7      	bne.n	6fde <bt_conn_process_tx+0xe>
    6fee:	f3bf 8f5b 	dmb	ish
	if (conn->state == BT_CONN_DISCONNECTED &&
    6ff2:	f012 0f40 	tst.w	r2, #64	; 0x40
    6ff6:	d10c      	bne.n	7012 <bt_conn_process_tx+0x42>
	buf = net_buf_get(&conn->tx_queue, K_NO_WAIT);
    6ff8:	2100      	movs	r1, #0
    6ffa:	f104 002c 	add.w	r0, r4, #44	; 0x2c
    6ffe:	f013 f980 	bl	1a302 <net_buf_get>
	BT_ASSERT(buf);
    7002:	4605      	mov	r5, r0
    7004:	b148      	cbz	r0, 701a <bt_conn_process_tx+0x4a>
	if (!send_buf(conn, buf)) {
    7006:	4601      	mov	r1, r0
    7008:	4620      	mov	r0, r4
    700a:	f7ff ffa3 	bl	6f54 <send_buf>
    700e:	b150      	cbz	r0, 7026 <bt_conn_process_tx+0x56>
    7010:	bd38      	pop	{r3, r4, r5, pc}
		conn_cleanup(conn);
    7012:	4620      	mov	r0, r4
    7014:	f7ff fcd7 	bl	69c6 <conn_cleanup>
		return;
    7018:	bd38      	pop	{r3, r4, r5, pc}
	BT_ASSERT(buf);
    701a:	4040      	eors	r0, r0
    701c:	f380 8811 	msr	BASEPRI, r0
    7020:	f04f 0004 	mov.w	r0, #4
    7024:	df02      	svc	2
		net_buf_unref(buf);
    7026:	4628      	mov	r0, r5
    7028:	f013 f998 	bl	1a35c <net_buf_unref>
    702c:	e7f0      	b.n	7010 <bt_conn_process_tx+0x40>
	...

00007030 <bt_conn_get_id>:
}
#endif /* CONFIG_BT_SMP || CONFIG_BT_BREDR */

u8_t bt_conn_get_id(struct bt_conn *conn)
{
	return conn - conns;
    7030:	4b03      	ldr	r3, [pc, #12]	; (7040 <bt_conn_get_id+0x10>)
    7032:	1ac0      	subs	r0, r0, r3
    7034:	1080      	asrs	r0, r0, #2
    7036:	4b03      	ldr	r3, [pc, #12]	; (7044 <bt_conn_get_id+0x14>)
    7038:	fb03 f000 	mul.w	r0, r3, r0
}
    703c:	b2c0      	uxtb	r0, r0
    703e:	4770      	bx	lr
    7040:	200004a4 	.word	0x200004a4
    7044:	96f96f97 	.word	0x96f96f97

00007048 <bt_conn_init>:

	return bt_conn_ref(conn);
}

int bt_conn_init(void)
{
    7048:	b538      	push	{r3, r4, r5, lr}
	int err, i;

	for (i = 0; i < ARRAY_SIZE(conn_tx); i++) {
    704a:	2300      	movs	r3, #0
    704c:	e000      	b.n	7050 <bt_conn_init+0x8>
    704e:	3301      	adds	r3, #1
    7050:	2b01      	cmp	r3, #1
    7052:	d80d      	bhi.n	7070 <bt_conn_init+0x28>
		sys_slist_prepend(&free_tx, &conn_tx[i].node);
    7054:	491a      	ldr	r1, [pc, #104]	; (70c0 <bt_conn_init+0x78>)
    7056:	eb01 00c3 	add.w	r0, r1, r3, lsl #3
	node->next = list->head;
    705a:	4a1a      	ldr	r2, [pc, #104]	; (70c4 <bt_conn_init+0x7c>)
    705c:	6814      	ldr	r4, [r2, #0]
    705e:	f841 4033 	str.w	r4, [r1, r3, lsl #3]
	list->head = node;
    7062:	6010      	str	r0, [r2, #0]
	if (!list->tail) {
    7064:	6852      	ldr	r2, [r2, #4]
    7066:	2a00      	cmp	r2, #0
    7068:	d1f1      	bne.n	704e <bt_conn_init+0x6>
		list->tail = list->head;
    706a:	4a16      	ldr	r2, [pc, #88]	; (70c4 <bt_conn_init+0x7c>)
    706c:	6050      	str	r0, [r2, #4]
    706e:	e7ee      	b.n	704e <bt_conn_init+0x6>
	}

	bt_att_init();
    7070:	f002 fa68 	bl	9544 <bt_att_init>

	err = bt_smp_init();
    7074:	f005 fba2 	bl	c7bc <bt_smp_init>
	if (err) {
    7078:	4605      	mov	r5, r0
    707a:	b108      	cbz	r0, 7080 <bt_conn_init+0x38>
			}
		}
	}

	return 0;
}
    707c:	4628      	mov	r0, r5
    707e:	bd38      	pop	{r3, r4, r5, pc}
	bt_l2cap_init();
    7080:	f000 ff20 	bl	7ec4 <bt_l2cap_init>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    7084:	462c      	mov	r4, r5
    7086:	2c00      	cmp	r4, #0
    7088:	d1f8      	bne.n	707c <bt_conn_init+0x34>
			struct bt_conn *conn = &conns[i];
    708a:	4a0f      	ldr	r2, [pc, #60]	; (70c8 <bt_conn_init+0x80>)
    708c:	239c      	movs	r3, #156	; 0x9c
    708e:	fb03 f304 	mul.w	r3, r3, r4
    7092:	18d0      	adds	r0, r2, r3
			if (!atomic_get(&conn->ref)) {
    7094:	3340      	adds	r3, #64	; 0x40
    7096:	4413      	add	r3, r2
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    7098:	f3bf 8f5b 	dmb	ish
    709c:	685b      	ldr	r3, [r3, #4]
    709e:	f3bf 8f5b 	dmb	ish
    70a2:	b90b      	cbnz	r3, 70a8 <bt_conn_init+0x60>
		for (i = 0; i < ARRAY_SIZE(conns); i++) {
    70a4:	3401      	adds	r4, #1
    70a6:	e7ee      	b.n	7086 <bt_conn_init+0x3e>
    70a8:	f3bf 8f5b 	dmb	ish
    70ac:	6843      	ldr	r3, [r0, #4]
    70ae:	f3bf 8f5b 	dmb	ish
			if (atomic_test_bit(conn->flags,
    70b2:	f013 0f01 	tst.w	r3, #1
    70b6:	d0f5      	beq.n	70a4 <bt_conn_init+0x5c>
				bt_conn_set_state(conn, BT_CONN_CONNECT_SCAN);
    70b8:	2101      	movs	r1, #1
    70ba:	f7ff fd05 	bl	6ac8 <bt_conn_set_state>
    70be:	e7f1      	b.n	70a4 <bt_conn_init+0x5c>
    70c0:	20000494 	.word	0x20000494
    70c4:	20000630 	.word	0x20000630
    70c8:	200004a4 	.word	0x200004a4

000070cc <get_ident>:

static u8_t get_ident(void)
{
	static u8_t ident;

	ident++;
    70cc:	4a05      	ldr	r2, [pc, #20]	; (70e4 <get_ident+0x18>)
    70ce:	7813      	ldrb	r3, [r2, #0]
    70d0:	3301      	adds	r3, #1
    70d2:	b2db      	uxtb	r3, r3
    70d4:	7013      	strb	r3, [r2, #0]
	/* handle integer overflow (0 is not valid) */
	if (!ident) {
    70d6:	b90b      	cbnz	r3, 70dc <get_ident+0x10>
		ident++;
    70d8:	3301      	adds	r3, #1
    70da:	7013      	strb	r3, [r2, #0]
	}

	return ident;
}
    70dc:	4b01      	ldr	r3, [pc, #4]	; (70e4 <get_ident+0x18>)
    70de:	7818      	ldrb	r0, [r3, #0]
    70e0:	4770      	bx	lr
    70e2:	bf00      	nop
    70e4:	200006d4 	.word	0x200006d4

000070e8 <__l2cap_lookup_ident>:
	return NULL;
}

static struct bt_l2cap_le_chan *
__l2cap_lookup_ident(struct bt_conn *conn, u16_t ident, bool remove)
{
    70e8:	b430      	push	{r4, r5}
	return list->head;
    70ea:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    70ec:	b113      	cbz	r3, 70f4 <__l2cap_lookup_ident+0xc>
    70ee:	3b08      	subs	r3, #8
    70f0:	2400      	movs	r4, #0
    70f2:	e01b      	b.n	712c <__l2cap_lookup_ident+0x44>
    70f4:	2300      	movs	r3, #0
    70f6:	e7fb      	b.n	70f0 <__l2cap_lookup_ident+0x8>
		if (chan->ident == ident) {
			if (remove) {
    70f8:	b35a      	cbz	r2, 7152 <__l2cap_lookup_ident+0x6a>
				sys_slist_remove(&conn->channels, prev,
    70fa:	f103 0208 	add.w	r2, r3, #8
	if (!prev_node) {
    70fe:	b144      	cbz	r4, 7112 <__l2cap_lookup_ident+0x2a>
		prev_node->next = node->next;
    7100:	6899      	ldr	r1, [r3, #8]
    7102:	6021      	str	r1, [r4, #0]
		if (list->tail == node) {
    7104:	6c01      	ldr	r1, [r0, #64]	; 0x40
    7106:	428a      	cmp	r2, r1
    7108:	d00a      	beq.n	7120 <__l2cap_lookup_ident+0x38>
	node->next = NULL;
    710a:	2200      	movs	r2, #0
    710c:	609a      	str	r2, [r3, #8]
						 &chan->node);
			}
			return BT_L2CAP_LE_CHAN(chan);
    710e:	4618      	mov	r0, r3
    7110:	e01d      	b.n	714e <__l2cap_lookup_ident+0x66>
		list->head = node->next;
    7112:	6899      	ldr	r1, [r3, #8]
    7114:	63c1      	str	r1, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7116:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7118:	4294      	cmp	r4, r2
    711a:	d1f6      	bne.n	710a <__l2cap_lookup_ident+0x22>
			list->tail = list->head;
    711c:	6401      	str	r1, [r0, #64]	; 0x40
    711e:	e7f4      	b.n	710a <__l2cap_lookup_ident+0x22>
			list->tail = prev_node;
    7120:	6404      	str	r4, [r0, #64]	; 0x40
    7122:	e7f2      	b.n	710a <__l2cap_lookup_ident+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7124:	4625      	mov	r5, r4
    7126:	e00a      	b.n	713e <__l2cap_lookup_ident+0x56>
    7128:	4623      	mov	r3, r4
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    712a:	3b08      	subs	r3, #8
    712c:	b173      	cbz	r3, 714c <__l2cap_lookup_ident+0x64>
		if (chan->ident == ident) {
    712e:	f893 503c 	ldrb.w	r5, [r3, #60]	; 0x3c
    7132:	428d      	cmp	r5, r1
    7134:	d0e0      	beq.n	70f8 <__l2cap_lookup_ident+0x10>
    7136:	f113 0408 	adds.w	r4, r3, #8
    713a:	d0f3      	beq.n	7124 <__l2cap_lookup_ident+0x3c>
	return node->next;
    713c:	689d      	ldr	r5, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    713e:	b11d      	cbz	r5, 7148 <__l2cap_lookup_ident+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7140:	2c00      	cmp	r4, #0
    7142:	d0f1      	beq.n	7128 <__l2cap_lookup_ident+0x40>
	return node->next;
    7144:	689b      	ldr	r3, [r3, #8]
    7146:	e7f0      	b.n	712a <__l2cap_lookup_ident+0x42>
    7148:	2300      	movs	r3, #0
    714a:	e7ef      	b.n	712c <__l2cap_lookup_ident+0x44>
		}

		prev = &chan->node;
	}

	return NULL;
    714c:	2000      	movs	r0, #0
}
    714e:	bc30      	pop	{r4, r5}
    7150:	4770      	bx	lr
			return BT_L2CAP_LE_CHAN(chan);
    7152:	4618      	mov	r0, r3
    7154:	e7fb      	b.n	714e <__l2cap_lookup_ident+0x66>
	...

00007158 <l2cap_server_lookup_psm>:
	return list->head;
    7158:	4b0d      	ldr	r3, [pc, #52]	; (7190 <l2cap_server_lookup_psm+0x38>)
    715a:	681b      	ldr	r3, [r3, #0]
#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static struct bt_l2cap_server *l2cap_server_lookup_psm(u16_t psm)
{
	struct bt_l2cap_server *server;

	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    715c:	b10b      	cbz	r3, 7162 <l2cap_server_lookup_psm+0xa>
    715e:	3b08      	subs	r3, #8
    7160:	e006      	b.n	7170 <l2cap_server_lookup_psm+0x18>
    7162:	2300      	movs	r3, #0
    7164:	e004      	b.n	7170 <l2cap_server_lookup_psm+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7166:	4611      	mov	r1, r2
    7168:	e00a      	b.n	7180 <l2cap_server_lookup_psm+0x28>
	return node->next;
    716a:	689a      	ldr	r2, [r3, #8]
    716c:	f1a2 0308 	sub.w	r3, r2, #8
    7170:	b163      	cbz	r3, 718c <l2cap_server_lookup_psm+0x34>
		if (server->psm == psm) {
    7172:	881a      	ldrh	r2, [r3, #0]
    7174:	4282      	cmp	r2, r0
    7176:	d009      	beq.n	718c <l2cap_server_lookup_psm+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7178:	f113 0208 	adds.w	r2, r3, #8
    717c:	d0f3      	beq.n	7166 <l2cap_server_lookup_psm+0xe>
	return node->next;
    717e:	6899      	ldr	r1, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&servers, server, node) {
    7180:	b111      	cbz	r1, 7188 <l2cap_server_lookup_psm+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7182:	2a00      	cmp	r2, #0
    7184:	d1f1      	bne.n	716a <l2cap_server_lookup_psm+0x12>
    7186:	e7f1      	b.n	716c <l2cap_server_lookup_psm+0x14>
    7188:	2300      	movs	r3, #0
    718a:	e7f1      	b.n	7170 <l2cap_server_lookup_psm+0x18>
			return server;
		}
	}

	return NULL;
}
    718c:	4618      	mov	r0, r3
    718e:	4770      	bx	lr
    7190:	200006e0 	.word	0x200006e0

00007194 <l2cap_remove_tx_cid>:
{
	struct bt_l2cap_chan *chan;
	sys_snode_t *prev = NULL;

	/* Protect fixed channels against accidental removal */
	if (!L2CAP_LE_CID_IS_DYN(cid)) {
    7194:	f1a1 0340 	sub.w	r3, r1, #64	; 0x40
    7198:	b29b      	uxth	r3, r3
    719a:	2b3f      	cmp	r3, #63	; 0x3f
    719c:	d835      	bhi.n	720a <l2cap_remove_tx_cid+0x76>
	return list->head;
    719e:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71a0:	b12b      	cbz	r3, 71ae <l2cap_remove_tx_cid+0x1a>
    71a2:	3b08      	subs	r3, #8
    71a4:	2200      	movs	r2, #0
    71a6:	2b00      	cmp	r3, #0
    71a8:	d031      	beq.n	720e <l2cap_remove_tx_cid+0x7a>
{
    71aa:	b410      	push	{r4}
    71ac:	e01c      	b.n	71e8 <l2cap_remove_tx_cid+0x54>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71ae:	2300      	movs	r3, #0
    71b0:	e7f8      	b.n	71a4 <l2cap_remove_tx_cid+0x10>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
			sys_slist_remove(&conn->channels, prev, &chan->node);
    71b2:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    71b6:	b14a      	cbz	r2, 71cc <l2cap_remove_tx_cid+0x38>
		prev_node->next = node->next;
    71b8:	689c      	ldr	r4, [r3, #8]
    71ba:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    71bc:	6c04      	ldr	r4, [r0, #64]	; 0x40
    71be:	42a1      	cmp	r1, r4
    71c0:	d00b      	beq.n	71da <l2cap_remove_tx_cid+0x46>
	node->next = NULL;
    71c2:	2200      	movs	r2, #0
    71c4:	609a      	str	r2, [r3, #8]
			return BT_L2CAP_LE_CHAN(chan);
    71c6:	4618      	mov	r0, r3

		prev = &chan->node;
	}

	return NULL;
}
    71c8:	bc10      	pop	{r4}
    71ca:	4770      	bx	lr
		list->head = node->next;
    71cc:	689a      	ldr	r2, [r3, #8]
    71ce:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    71d0:	6c04      	ldr	r4, [r0, #64]	; 0x40
    71d2:	428c      	cmp	r4, r1
    71d4:	d1f5      	bne.n	71c2 <l2cap_remove_tx_cid+0x2e>
			list->tail = list->head;
    71d6:	6402      	str	r2, [r0, #64]	; 0x40
    71d8:	e7f3      	b.n	71c2 <l2cap_remove_tx_cid+0x2e>
			list->tail = prev_node;
    71da:	6402      	str	r2, [r0, #64]	; 0x40
    71dc:	e7f1      	b.n	71c2 <l2cap_remove_tx_cid+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    71de:	4614      	mov	r4, r2
    71e0:	e00a      	b.n	71f8 <l2cap_remove_tx_cid+0x64>
    71e2:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71e4:	3b08      	subs	r3, #8
    71e6:	b173      	cbz	r3, 7206 <l2cap_remove_tx_cid+0x72>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    71e8:	f8b3 4040 	ldrh.w	r4, [r3, #64]	; 0x40
    71ec:	42a1      	cmp	r1, r4
    71ee:	d0e0      	beq.n	71b2 <l2cap_remove_tx_cid+0x1e>
    71f0:	f113 0208 	adds.w	r2, r3, #8
    71f4:	d0f3      	beq.n	71de <l2cap_remove_tx_cid+0x4a>
	return node->next;
    71f6:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    71f8:	b11c      	cbz	r4, 7202 <l2cap_remove_tx_cid+0x6e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    71fa:	2a00      	cmp	r2, #0
    71fc:	d0f1      	beq.n	71e2 <l2cap_remove_tx_cid+0x4e>
	return node->next;
    71fe:	689b      	ldr	r3, [r3, #8]
    7200:	e7f0      	b.n	71e4 <l2cap_remove_tx_cid+0x50>
    7202:	2300      	movs	r3, #0
    7204:	e7ef      	b.n	71e6 <l2cap_remove_tx_cid+0x52>
	return NULL;
    7206:	2000      	movs	r0, #0
    7208:	e7de      	b.n	71c8 <l2cap_remove_tx_cid+0x34>
		return NULL;
    720a:	2000      	movs	r0, #0
    720c:	4770      	bx	lr
	return NULL;
    720e:	2000      	movs	r0, #0
}
    7210:	4770      	bx	lr

00007212 <l2cap_connected>:

	return 0;
}

static void l2cap_connected(struct bt_l2cap_chan *chan)
{
    7212:	4770      	bx	lr

00007214 <l2cap_disconnected>:
	BT_DBG("ch %p cid 0x%04x", BT_L2CAP_LE_CHAN(chan),
	       BT_L2CAP_LE_CHAN(chan)->rx.cid);
}

static void l2cap_disconnected(struct bt_l2cap_chan *chan)
{
    7214:	4770      	bx	lr
	...

00007218 <l2cap_accept>:
		.recv = l2cap_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    7218:	2000      	movs	r0, #0
    721a:	b110      	cbz	r0, 7222 <l2cap_accept+0xa>
		return 0;
	}

	BT_ERR("No available L2CAP context for conn %p", conn);

	return -ENOMEM;
    721c:	f06f 000b 	mvn.w	r0, #11
}
    7220:	4770      	bx	lr
		if (l2cap->chan.chan.conn) {
    7222:	239c      	movs	r3, #156	; 0x9c
    7224:	fb03 f300 	mul.w	r3, r3, r0
    7228:	4a06      	ldr	r2, [pc, #24]	; (7244 <l2cap_accept+0x2c>)
    722a:	58d3      	ldr	r3, [r2, r3]
    722c:	b10b      	cbz	r3, 7232 <l2cap_accept+0x1a>
	for (i = 0; i < ARRAY_SIZE(bt_l2cap_pool); i++) {
    722e:	3001      	adds	r0, #1
    7230:	e7f3      	b.n	721a <l2cap_accept+0x2>
		l2cap->chan.chan.ops = &ops;
    7232:	239c      	movs	r3, #156	; 0x9c
    7234:	4a03      	ldr	r2, [pc, #12]	; (7244 <l2cap_accept+0x2c>)
    7236:	fb03 2300 	mla	r3, r3, r0, r2
    723a:	4a03      	ldr	r2, [pc, #12]	; (7248 <l2cap_accept+0x30>)
    723c:	605a      	str	r2, [r3, #4]
		*chan = &l2cap->chan.chan;
    723e:	600b      	str	r3, [r1, #0]
		return 0;
    7240:	4770      	bx	lr
    7242:	bf00      	nop
    7244:	20000638 	.word	0x20000638
    7248:	2000ba0c 	.word	0x2000ba0c

0000724c <l2cap_alloc_frag>:
{
    724c:	b538      	push	{r3, r4, r5, lr}
    724e:	4605      	mov	r5, r0
	frag = chan->chan.ops->alloc_buf(&chan->chan);
    7250:	6843      	ldr	r3, [r0, #4]
    7252:	68db      	ldr	r3, [r3, #12]
    7254:	4798      	blx	r3
	if (!frag) {
    7256:	4604      	mov	r4, r0
    7258:	b120      	cbz	r0, 7264 <l2cap_alloc_frag+0x18>
	net_buf_frag_add(chan->_sdu, frag);
    725a:	4601      	mov	r1, r0
    725c:	f8d5 0094 	ldr.w	r0, [r5, #148]	; 0x94
    7260:	f013 f8ad 	bl	1a3be <net_buf_frag_add>
}
    7264:	4620      	mov	r0, r4
    7266:	bd38      	pop	{r3, r4, r5, pc}

00007268 <l2cap_chan_rx_give_credits>:
{
    7268:	b538      	push	{r3, r4, r5, lr}
    726a:	4605      	mov	r5, r0
	while (credits--) {
    726c:	e004      	b.n	7278 <l2cap_chan_rx_give_credits+0x10>
    726e:	f105 0048 	add.w	r0, r5, #72	; 0x48
    7272:	f021 fbbe 	bl	289f2 <_impl_k_sem_give>
    7276:	4621      	mov	r1, r4
    7278:	1e4b      	subs	r3, r1, #1
    727a:	b29c      	uxth	r4, r3
    727c:	2900      	cmp	r1, #0
    727e:	d1f6      	bne.n	726e <l2cap_chan_rx_give_credits+0x6>
}
    7280:	bd38      	pop	{r3, r4, r5, pc}

00007282 <l2cap_chan_tx_give_credits>:
{
    7282:	b538      	push	{r3, r4, r5, lr}
    7284:	4605      	mov	r5, r0
	while (credits--) {
    7286:	e004      	b.n	7292 <l2cap_chan_tx_give_credits+0x10>
    7288:	f105 0068 	add.w	r0, r5, #104	; 0x68
    728c:	f021 fbb1 	bl	289f2 <_impl_k_sem_give>
    7290:	4621      	mov	r1, r4
    7292:	1e4b      	subs	r3, r1, #1
    7294:	b29c      	uxth	r4, r3
    7296:	2900      	cmp	r1, #0
    7298:	d1f6      	bne.n	7288 <l2cap_chan_tx_give_credits+0x6>
}
    729a:	bd38      	pop	{r3, r4, r5, pc}

0000729c <l2cap_chan_destroy>:
{
    729c:	b510      	push	{r4, lr}
    729e:	4604      	mov	r4, r0
	k_delayed_work_cancel(&chan->rtx_work);
    72a0:	3010      	adds	r0, #16
    72a2:	f022 f995 	bl	295d0 <k_delayed_work_cancel>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    72a6:	e002      	b.n	72ae <l2cap_chan_destroy+0x12>
		net_buf_unref(buf);
    72a8:	4618      	mov	r0, r3
    72aa:	f013 f857 	bl	1a35c <net_buf_unref>
	while ((buf = net_buf_get(&ch->tx_queue, K_NO_WAIT))) {
    72ae:	2100      	movs	r1, #0
    72b0:	f104 0080 	add.w	r0, r4, #128	; 0x80
    72b4:	f013 f825 	bl	1a302 <net_buf_get>
    72b8:	4603      	mov	r3, r0
    72ba:	2800      	cmp	r0, #0
    72bc:	d1f4      	bne.n	72a8 <l2cap_chan_destroy+0xc>
	if (ch->_sdu) {
    72be:	f8d4 0094 	ldr.w	r0, [r4, #148]	; 0x94
    72c2:	b130      	cbz	r0, 72d2 <l2cap_chan_destroy+0x36>
		net_buf_unref(ch->_sdu);
    72c4:	f013 f84a 	bl	1a35c <net_buf_unref>
		ch->_sdu = NULL;
    72c8:	2300      	movs	r3, #0
    72ca:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
		ch->_sdu_len = 0;
    72ce:	f8a4 3098 	strh.w	r3, [r4, #152]	; 0x98
    72d2:	bd10      	pop	{r4, pc}

000072d4 <l2cap_chan_le_get_tx_buf>:
{
    72d4:	b508      	push	{r3, lr}
    72d6:	4603      	mov	r3, r0
	if (ch->tx_buf) {
    72d8:	f8d0 0090 	ldr.w	r0, [r0, #144]	; 0x90
    72dc:	b118      	cbz	r0, 72e6 <l2cap_chan_le_get_tx_buf+0x12>
		ch->tx_buf = NULL;
    72de:	2200      	movs	r2, #0
    72e0:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		return buf;
    72e4:	bd08      	pop	{r3, pc}
	return net_buf_get(&ch->tx_queue, K_NO_WAIT);
    72e6:	2100      	movs	r1, #0
    72e8:	f103 0080 	add.w	r0, r3, #128	; 0x80
    72ec:	f013 f809 	bl	1a302 <net_buf_get>
}
    72f0:	bd08      	pop	{r3, pc}

000072f2 <l2cap_chan_tx_init>:
{
    72f2:	b510      	push	{r4, lr}
    72f4:	4604      	mov	r4, r0
	memset(&chan->tx, 0, sizeof(chan->tx));
    72f6:	2220      	movs	r2, #32
    72f8:	2100      	movs	r1, #0
    72fa:	3060      	adds	r0, #96	; 0x60
    72fc:	f022 fb4c 	bl	29998 <memset>
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    7300:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    7304:	2100      	movs	r1, #0
    7306:	f104 0068 	add.w	r0, r4, #104	; 0x68
    730a:	f021 fb69 	bl	289e0 <_impl_k_sem_init>
	k_fifo_init(&chan->tx_queue);
    730e:	f104 0080 	add.w	r0, r4, #128	; 0x80
    7312:	f020 ffa4 	bl	2825e <k_queue_init>
    7316:	bd10      	pop	{r4, pc}

00007318 <l2cap_chan_rx_init>:
{
    7318:	b508      	push	{r3, lr}
	if (!chan->rx.mtu) {
    731a:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    731e:	b913      	cbnz	r3, 7326 <l2cap_chan_rx_init+0xe>
		chan->rx.mtu = L2CAP_MAX_LE_MTU;
    7320:	2342      	movs	r3, #66	; 0x42
    7322:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	if (!chan->rx.init_credits) {
    7326:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
    732a:	b96b      	cbnz	r3, 7348 <l2cap_chan_rx_init+0x30>
		if (chan->chan.ops->alloc_buf) {
    732c:	6843      	ldr	r3, [r0, #4]
    732e:	68db      	ldr	r3, [r3, #12]
    7330:	b1cb      	cbz	r3, 7366 <l2cap_chan_rx_init+0x4e>
			chan->rx.init_credits = (chan->rx.mtu +
    7332:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    7336:	3343      	adds	r3, #67	; 0x43
						 (L2CAP_MAX_LE_MPS - 1)) /
    7338:	4a0d      	ldr	r2, [pc, #52]	; (7370 <l2cap_chan_rx_init+0x58>)
    733a:	fb82 1203 	smull	r1, r2, r2, r3
    733e:	17db      	asrs	r3, r3, #31
    7340:	ebc3 1362 	rsb	r3, r3, r2, asr #5
			chan->rx.init_credits = (chan->rx.mtu +
    7344:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
	chan->rx.mps = min(chan->rx.mtu + 2, L2CAP_MAX_LE_MPS);
    7348:	f8b0 3042 	ldrh.w	r3, [r0, #66]	; 0x42
    734c:	3302      	adds	r3, #2
    734e:	2b44      	cmp	r3, #68	; 0x44
    7350:	bfa8      	it	ge
    7352:	2344      	movge	r3, #68	; 0x44
    7354:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
    7358:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    735c:	2100      	movs	r1, #0
    735e:	3048      	adds	r0, #72	; 0x48
    7360:	f021 fb3e 	bl	289e0 <_impl_k_sem_init>
    7364:	bd08      	pop	{r3, pc}
			chan->rx.init_credits = L2CAP_LE_MAX_CREDITS;
    7366:	2302      	movs	r3, #2
    7368:	f8a0 3046 	strh.w	r3, [r0, #70]	; 0x46
    736c:	e7ec      	b.n	7348 <l2cap_chan_rx_init+0x30>
    736e:	bf00      	nop
    7370:	78787879 	.word	0x78787879

00007374 <l2cap_change_security>:
{
    7374:	b508      	push	{r3, lr}
	switch (err) {
    7376:	2905      	cmp	r1, #5
    7378:	d00e      	beq.n	7398 <l2cap_change_security+0x24>
    737a:	2908      	cmp	r1, #8
    737c:	d120      	bne.n	73c0 <l2cap_change_security+0x4c>
		if (chan->chan.required_sec_level >= BT_SECURITY_MEDIUM) {
    737e:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    7382:	2b01      	cmp	r3, #1
    7384:	d81f      	bhi.n	73c6 <l2cap_change_security+0x52>
		chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    7386:	2302      	movs	r3, #2
    7388:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
	return bt_conn_security(chan->chan.conn, chan->chan.required_sec_level);
    738c:	f890 103d 	ldrb.w	r1, [r0, #61]	; 0x3d
    7390:	6800      	ldr	r0, [r0, #0]
    7392:	f7ff f917 	bl	65c4 <bt_conn_security>
    7396:	bd08      	pop	{r3, pc}
		if (chan->chan.required_sec_level < BT_SECURITY_MEDIUM) {
    7398:	f890 303d 	ldrb.w	r3, [r0, #61]	; 0x3d
    739c:	2b01      	cmp	r3, #1
    739e:	d905      	bls.n	73ac <l2cap_change_security+0x38>
		} else if (chan->chan.required_sec_level < BT_SECURITY_HIGH) {
    73a0:	2b02      	cmp	r3, #2
    73a2:	d807      	bhi.n	73b4 <l2cap_change_security+0x40>
			chan->chan.required_sec_level = BT_SECURITY_HIGH;
    73a4:	2303      	movs	r3, #3
    73a6:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    73aa:	e7ef      	b.n	738c <l2cap_change_security+0x18>
			chan->chan.required_sec_level = BT_SECURITY_MEDIUM;
    73ac:	2302      	movs	r3, #2
    73ae:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    73b2:	e7eb      	b.n	738c <l2cap_change_security+0x18>
		} else if (chan->chan.required_sec_level < BT_SECURITY_FIPS) {
    73b4:	2b03      	cmp	r3, #3
    73b6:	d809      	bhi.n	73cc <l2cap_change_security+0x58>
			chan->chan.required_sec_level = BT_SECURITY_FIPS;
    73b8:	2304      	movs	r3, #4
    73ba:	f880 303d 	strb.w	r3, [r0, #61]	; 0x3d
    73be:	e7e5      	b.n	738c <l2cap_change_security+0x18>
		return -EINVAL;
    73c0:	f06f 0015 	mvn.w	r0, #21
    73c4:	bd08      	pop	{r3, pc}
			return -EALREADY;
    73c6:	f06f 0077 	mvn.w	r0, #119	; 0x77
    73ca:	bd08      	pop	{r3, pc}
			return -EALREADY;
    73cc:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    73d0:	bd08      	pop	{r3, pc}
	...

000073d4 <bt_l2cap_le_fixed_chan_register>:
	sys_slist_append(&le_channels, &chan->node);
    73d4:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    73d8:	2200      	movs	r2, #0
    73da:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    73dc:	4a05      	ldr	r2, [pc, #20]	; (73f4 <bt_l2cap_le_fixed_chan_register+0x20>)
    73de:	6852      	ldr	r2, [r2, #4]
    73e0:	b11a      	cbz	r2, 73ea <bt_l2cap_le_fixed_chan_register+0x16>
		list->tail->next = node;
    73e2:	6013      	str	r3, [r2, #0]
		list->tail = node;
    73e4:	4a03      	ldr	r2, [pc, #12]	; (73f4 <bt_l2cap_le_fixed_chan_register+0x20>)
    73e6:	6053      	str	r3, [r2, #4]
    73e8:	4770      	bx	lr
		list->tail = node;
    73ea:	4a02      	ldr	r2, [pc, #8]	; (73f4 <bt_l2cap_le_fixed_chan_register+0x20>)
    73ec:	6053      	str	r3, [r2, #4]
		list->head = node;
    73ee:	6013      	str	r3, [r2, #0]
    73f0:	4770      	bx	lr
    73f2:	bf00      	nop
    73f4:	200006d8 	.word	0x200006d8

000073f8 <bt_l2cap_chan_remove>:
	return list->head;
    73f8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    73fa:	b123      	cbz	r3, 7406 <bt_l2cap_chan_remove+0xe>
    73fc:	3b08      	subs	r3, #8
    73fe:	2200      	movs	r2, #0
    7400:	b35b      	cbz	r3, 745a <bt_l2cap_chan_remove+0x62>
{
    7402:	b410      	push	{r4}
    7404:	e01c      	b.n	7440 <bt_l2cap_chan_remove+0x48>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7406:	2300      	movs	r3, #0
    7408:	e7f9      	b.n	73fe <bt_l2cap_chan_remove+0x6>
			sys_slist_remove(&conn->channels, prev, &chan->node);
    740a:	f103 0108 	add.w	r1, r3, #8
	if (!prev_node) {
    740e:	b142      	cbz	r2, 7422 <bt_l2cap_chan_remove+0x2a>
		prev_node->next = node->next;
    7410:	689c      	ldr	r4, [r3, #8]
    7412:	6014      	str	r4, [r2, #0]
		if (list->tail == node) {
    7414:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7416:	42a1      	cmp	r1, r4
    7418:	d00a      	beq.n	7430 <bt_l2cap_chan_remove+0x38>
	node->next = NULL;
    741a:	2200      	movs	r2, #0
    741c:	609a      	str	r2, [r3, #8]
}
    741e:	bc10      	pop	{r4}
    7420:	4770      	bx	lr
		list->head = node->next;
    7422:	689a      	ldr	r2, [r3, #8]
    7424:	63c2      	str	r2, [r0, #60]	; 0x3c
		if (list->tail == node) {
    7426:	6c04      	ldr	r4, [r0, #64]	; 0x40
    7428:	428c      	cmp	r4, r1
    742a:	d1f6      	bne.n	741a <bt_l2cap_chan_remove+0x22>
			list->tail = list->head;
    742c:	6402      	str	r2, [r0, #64]	; 0x40
    742e:	e7f4      	b.n	741a <bt_l2cap_chan_remove+0x22>
			list->tail = prev_node;
    7430:	6402      	str	r2, [r0, #64]	; 0x40
    7432:	e7f2      	b.n	741a <bt_l2cap_chan_remove+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7434:	4614      	mov	r4, r2
    7436:	e009      	b.n	744c <bt_l2cap_chan_remove+0x54>
    7438:	4613      	mov	r3, r2
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    743a:	3b08      	subs	r3, #8
    743c:	2b00      	cmp	r3, #0
    743e:	d0ee      	beq.n	741e <bt_l2cap_chan_remove+0x26>
		if (chan == ch) {
    7440:	428b      	cmp	r3, r1
    7442:	d0e2      	beq.n	740a <bt_l2cap_chan_remove+0x12>
    7444:	f113 0208 	adds.w	r2, r3, #8
    7448:	d0f4      	beq.n	7434 <bt_l2cap_chan_remove+0x3c>
	return node->next;
    744a:	689c      	ldr	r4, [r3, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    744c:	b11c      	cbz	r4, 7456 <bt_l2cap_chan_remove+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    744e:	2a00      	cmp	r2, #0
    7450:	d0f2      	beq.n	7438 <bt_l2cap_chan_remove+0x40>
	return node->next;
    7452:	689b      	ldr	r3, [r3, #8]
    7454:	e7f1      	b.n	743a <bt_l2cap_chan_remove+0x42>
    7456:	2300      	movs	r3, #0
    7458:	e7f0      	b.n	743c <bt_l2cap_chan_remove+0x44>
    745a:	4770      	bx	lr

0000745c <bt_l2cap_chan_set_state>:
	chan->state = state;
    745c:	f880 1038 	strb.w	r1, [r0, #56]	; 0x38
    7460:	4770      	bx	lr

00007462 <bt_l2cap_chan_del>:
{
    7462:	b510      	push	{r4, lr}
    7464:	4604      	mov	r4, r0
	if (!chan->conn) {
    7466:	6803      	ldr	r3, [r0, #0]
    7468:	b12b      	cbz	r3, 7476 <bt_l2cap_chan_del+0x14>
	if (chan->ops->disconnected) {
    746a:	6843      	ldr	r3, [r0, #4]
    746c:	685b      	ldr	r3, [r3, #4]
    746e:	b103      	cbz	r3, 7472 <bt_l2cap_chan_del+0x10>
		chan->ops->disconnected(chan);
    7470:	4798      	blx	r3
	chan->conn = NULL;
    7472:	2300      	movs	r3, #0
    7474:	6023      	str	r3, [r4, #0]
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECTED);
    7476:	2100      	movs	r1, #0
    7478:	4620      	mov	r0, r4
    747a:	f7ff ffef 	bl	745c <bt_l2cap_chan_set_state>
	chan->psm = 0;
    747e:	2300      	movs	r3, #0
    7480:	8763      	strh	r3, [r4, #58]	; 0x3a
	if (chan->destroy) {
    7482:	68e3      	ldr	r3, [r4, #12]
    7484:	b10b      	cbz	r3, 748a <bt_l2cap_chan_del+0x28>
		chan->destroy(chan);
    7486:	4620      	mov	r0, r4
    7488:	4798      	blx	r3
    748a:	bd10      	pop	{r4, pc}

0000748c <l2cap_rtx_timeout>:
{
    748c:	b510      	push	{r4, lr}
	bt_l2cap_chan_remove(chan->chan.conn, &chan->chan);
    748e:	f1a0 0410 	sub.w	r4, r0, #16
    7492:	4621      	mov	r1, r4
    7494:	f850 0c10 	ldr.w	r0, [r0, #-16]
    7498:	f7ff ffae 	bl	73f8 <bt_l2cap_chan_remove>
	bt_l2cap_chan_del(&chan->chan);
    749c:	4620      	mov	r0, r4
    749e:	f7ff ffe0 	bl	7462 <bt_l2cap_chan_del>
    74a2:	bd10      	pop	{r4, pc}

000074a4 <le_conn_rsp>:
{
    74a4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    74a8:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_le_conn_rsp *rsp = (void *)buf->data;
    74aa:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    74ac:	8992      	ldrh	r2, [r2, #12]
    74ae:	2a09      	cmp	r2, #9
    74b0:	d927      	bls.n	7502 <le_conn_rsp+0x5e>
	dcid = sys_le16_to_cpu(rsp->dcid);
    74b2:	f8b3 a000 	ldrh.w	sl, [r3]
	mtu = sys_le16_to_cpu(rsp->mtu);
    74b6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
	mps = sys_le16_to_cpu(rsp->mps);
    74ba:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	credits = sys_le16_to_cpu(rsp->credits);
    74be:	88df      	ldrh	r7, [r3, #6]
	result = sys_le16_to_cpu(rsp->result);
    74c0:	891d      	ldrh	r5, [r3, #8]
	if (result == BT_L2CAP_SUCCESS ||
    74c2:	b14d      	cbz	r5, 74d8 <le_conn_rsp+0x34>
    74c4:	2d05      	cmp	r5, #5
    74c6:	d007      	beq.n	74d8 <le_conn_rsp+0x34>
	    result == BT_L2CAP_ERR_AUTHENTICATION ||
    74c8:	2d08      	cmp	r5, #8
    74ca:	d005      	beq.n	74d8 <le_conn_rsp+0x34>
		chan = l2cap_remove_ident(conn, ident);
    74cc:	2201      	movs	r2, #1
    74ce:	4630      	mov	r0, r6
    74d0:	f7ff fe0a 	bl	70e8 <__l2cap_lookup_ident>
    74d4:	4604      	mov	r4, r0
    74d6:	e004      	b.n	74e2 <le_conn_rsp+0x3e>
		chan = l2cap_lookup_ident(conn, ident);
    74d8:	2200      	movs	r2, #0
    74da:	4630      	mov	r0, r6
    74dc:	f7ff fe04 	bl	70e8 <__l2cap_lookup_ident>
    74e0:	4604      	mov	r4, r0
	if (!chan) {
    74e2:	b174      	cbz	r4, 7502 <le_conn_rsp+0x5e>
	k_delayed_work_cancel(&chan->chan.rtx_work);
    74e4:	f104 0010 	add.w	r0, r4, #16
    74e8:	f022 f872 	bl	295d0 <k_delayed_work_cancel>
	chan->chan.ident = 0;
    74ec:	2300      	movs	r3, #0
    74ee:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	switch (result) {
    74f2:	2d05      	cmp	r5, #5
    74f4:	d021      	beq.n	753a <le_conn_rsp+0x96>
    74f6:	2d08      	cmp	r5, #8
    74f8:	d01f      	beq.n	753a <le_conn_rsp+0x96>
    74fa:	b125      	cbz	r5, 7506 <le_conn_rsp+0x62>
		bt_l2cap_chan_del(&chan->chan);
    74fc:	4620      	mov	r0, r4
    74fe:	f7ff ffb0 	bl	7462 <bt_l2cap_chan_del>
    7502:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		chan->tx.cid = dcid;
    7506:	f8a4 a060 	strh.w	sl, [r4, #96]	; 0x60
		chan->tx.mtu = mtu;
    750a:	f8a4 9062 	strh.w	r9, [r4, #98]	; 0x62
		chan->tx.mps = mps;
    750e:	f8a4 8064 	strh.w	r8, [r4, #100]	; 0x64
		bt_l2cap_chan_set_state(&chan->chan, BT_L2CAP_CONNECTED);
    7512:	2103      	movs	r1, #3
    7514:	4620      	mov	r0, r4
    7516:	f7ff ffa1 	bl	745c <bt_l2cap_chan_set_state>
		if (chan->chan.ops->connected) {
    751a:	6863      	ldr	r3, [r4, #4]
    751c:	681b      	ldr	r3, [r3, #0]
    751e:	b10b      	cbz	r3, 7524 <le_conn_rsp+0x80>
			chan->chan.ops->connected(&chan->chan);
    7520:	4620      	mov	r0, r4
    7522:	4798      	blx	r3
		l2cap_chan_tx_give_credits(chan, credits);
    7524:	4639      	mov	r1, r7
    7526:	4620      	mov	r0, r4
    7528:	f7ff feab 	bl	7282 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_give_credits(chan, chan->rx.init_credits);
    752c:	f8b4 1046 	ldrh.w	r1, [r4, #70]	; 0x46
    7530:	4620      	mov	r0, r4
    7532:	f7ff fe99 	bl	7268 <l2cap_chan_rx_give_credits>
		break;
    7536:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		if (l2cap_change_security(chan, result) == 0) {
    753a:	4629      	mov	r1, r5
    753c:	4620      	mov	r0, r4
    753e:	f7ff ff19 	bl	7374 <l2cap_change_security>
    7542:	2800      	cmp	r0, #0
    7544:	d0dd      	beq.n	7502 <le_conn_rsp+0x5e>
		bt_l2cap_chan_remove(conn, &chan->chan);
    7546:	4621      	mov	r1, r4
    7548:	4630      	mov	r0, r6
    754a:	f7ff ff55 	bl	73f8 <bt_l2cap_chan_remove>
    754e:	e7d5      	b.n	74fc <le_conn_rsp+0x58>

00007550 <le_disconn_rsp>:
{
    7550:	b508      	push	{r3, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7552:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_disconn_rsp *rsp = (void *)buf->data;
    7554:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*rsp)) {
    7556:	8993      	ldrh	r3, [r2, #12]
    7558:	2b03      	cmp	r3, #3
    755a:	d800      	bhi.n	755e <le_disconn_rsp+0xe>
    755c:	bd08      	pop	{r3, pc}
	chan = l2cap_remove_tx_cid(conn, dcid);
    755e:	8809      	ldrh	r1, [r1, #0]
    7560:	f7ff fe18 	bl	7194 <l2cap_remove_tx_cid>
	if (!chan) {
    7564:	2800      	cmp	r0, #0
    7566:	d0f9      	beq.n	755c <le_disconn_rsp+0xc>
	bt_l2cap_chan_del(&chan->chan);
    7568:	f7ff ff7b 	bl	7462 <bt_l2cap_chan_del>
    756c:	e7f6      	b.n	755c <le_disconn_rsp+0xc>

0000756e <reject_cmd>:
{
    756e:	b508      	push	{r3, lr}
	chan = l2cap_remove_ident(conn, ident);
    7570:	2201      	movs	r2, #1
    7572:	6800      	ldr	r0, [r0, #0]
    7574:	f7ff fdb8 	bl	70e8 <__l2cap_lookup_ident>
	if (!chan) {
    7578:	b108      	cbz	r0, 757e <reject_cmd+0x10>
	bt_l2cap_chan_del(&chan->chan);
    757a:	f7ff ff72 	bl	7462 <bt_l2cap_chan_del>
    757e:	bd08      	pop	{r3, pc}

00007580 <bt_l2cap_chan_add>:
{
    7580:	b410      	push	{r4}
	sys_slist_append(&conn->channels, &chan->node);
    7582:	f101 0308 	add.w	r3, r1, #8
	node->next = NULL;
    7586:	2400      	movs	r4, #0
    7588:	608c      	str	r4, [r1, #8]
	if (!list->tail) {
    758a:	6c04      	ldr	r4, [r0, #64]	; 0x40
    758c:	b12c      	cbz	r4, 759a <bt_l2cap_chan_add+0x1a>
		list->tail->next = node;
    758e:	6023      	str	r3, [r4, #0]
		list->tail = node;
    7590:	6403      	str	r3, [r0, #64]	; 0x40
	chan->conn = conn;
    7592:	6008      	str	r0, [r1, #0]
	chan->destroy = destroy;
    7594:	60ca      	str	r2, [r1, #12]
}
    7596:	bc10      	pop	{r4}
    7598:	4770      	bx	lr
		list->tail = node;
    759a:	6403      	str	r3, [r0, #64]	; 0x40
		list->head = node;
    759c:	63c3      	str	r3, [r0, #60]	; 0x3c
    759e:	e7f8      	b.n	7592 <bt_l2cap_chan_add+0x12>

000075a0 <bt_l2cap_disconnected>:
{
    75a0:	b510      	push	{r4, lr}
	return list->head;
    75a2:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    75a4:	b140      	cbz	r0, 75b8 <bt_l2cap_disconnected+0x18>
    75a6:	3808      	subs	r0, #8
    75a8:	b140      	cbz	r0, 75bc <bt_l2cap_disconnected+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75aa:	f110 0408 	adds.w	r4, r0, #8
    75ae:	d000      	beq.n	75b2 <bt_l2cap_disconnected+0x12>
	return node->next;
    75b0:	6884      	ldr	r4, [r0, #8]
    75b2:	b12c      	cbz	r4, 75c0 <bt_l2cap_disconnected+0x20>
    75b4:	3c08      	subs	r4, #8
    75b6:	e00a      	b.n	75ce <bt_l2cap_disconnected+0x2e>
    75b8:	2000      	movs	r0, #0
    75ba:	e7f5      	b.n	75a8 <bt_l2cap_disconnected+0x8>
    75bc:	4604      	mov	r4, r0
    75be:	e006      	b.n	75ce <bt_l2cap_disconnected+0x2e>
    75c0:	2400      	movs	r4, #0
    75c2:	e004      	b.n	75ce <bt_l2cap_disconnected+0x2e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75c4:	461a      	mov	r2, r3
    75c6:	e00a      	b.n	75de <bt_l2cap_disconnected+0x3e>
    75c8:	3b08      	subs	r3, #8
    75ca:	4620      	mov	r0, r4
    75cc:	461c      	mov	r4, r3
    75ce:	b178      	cbz	r0, 75f0 <bt_l2cap_disconnected+0x50>
		bt_l2cap_chan_del(chan);
    75d0:	f7ff ff47 	bl	7462 <bt_l2cap_chan_del>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&conn->channels, chan, next, node) {
    75d4:	b144      	cbz	r4, 75e8 <bt_l2cap_disconnected+0x48>
    75d6:	f114 0308 	adds.w	r3, r4, #8
    75da:	d0f3      	beq.n	75c4 <bt_l2cap_disconnected+0x24>
	return node->next;
    75dc:	68a2      	ldr	r2, [r4, #8]
    75de:	b12a      	cbz	r2, 75ec <bt_l2cap_disconnected+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    75e0:	2b00      	cmp	r3, #0
    75e2:	d0f1      	beq.n	75c8 <bt_l2cap_disconnected+0x28>
	return node->next;
    75e4:	68a3      	ldr	r3, [r4, #8]
    75e6:	e7ef      	b.n	75c8 <bt_l2cap_disconnected+0x28>
    75e8:	4623      	mov	r3, r4
    75ea:	e7ee      	b.n	75ca <bt_l2cap_disconnected+0x2a>
    75ec:	2300      	movs	r3, #0
    75ee:	e7ec      	b.n	75ca <bt_l2cap_disconnected+0x2a>
}
    75f0:	bd10      	pop	{r4, pc}

000075f2 <bt_l2cap_create_pdu>:
{
    75f2:	b508      	push	{r3, lr}
	return bt_conn_create_pdu(pool, sizeof(struct bt_l2cap_hdr) + reserve);
    75f4:	3104      	adds	r1, #4
    75f6:	f7ff fc61 	bl	6ebc <bt_conn_create_pdu>
}
    75fa:	bd08      	pop	{r3, pc}

000075fc <l2cap_create_le_sig_pdu>:
{
    75fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    75fe:	460f      	mov	r7, r1
    7600:	4616      	mov	r6, r2
    7602:	461d      	mov	r5, r3
	buf = bt_l2cap_create_pdu(NULL, 0);
    7604:	2100      	movs	r1, #0
    7606:	4608      	mov	r0, r1
    7608:	f7ff fff3 	bl	75f2 <bt_l2cap_create_pdu>
    760c:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    760e:	2104      	movs	r1, #4
    7610:	3008      	adds	r0, #8
    7612:	f012 feef 	bl	1a3f4 <net_buf_simple_add>
	hdr->code = code;
    7616:	7007      	strb	r7, [r0, #0]
	hdr->ident = ident;
    7618:	7046      	strb	r6, [r0, #1]
	hdr->len = sys_cpu_to_le16(len);
    761a:	8045      	strh	r5, [r0, #2]
}
    761c:	4620      	mov	r0, r4
    761e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00007620 <l2cap_chan_create_seg>:
{
    7620:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7624:	4605      	mov	r5, r0
    7626:	460c      	mov	r4, r1
    7628:	4690      	mov	r8, r2
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    762a:	7988      	ldrb	r0, [r1, #6]
    762c:	f012 fe1c 	bl	1a268 <net_buf_pool_get>
	if (buf->len + sdu_hdr_len > ch->tx.mps) {
    7630:	89a3      	ldrh	r3, [r4, #12]
    7632:	4443      	add	r3, r8
    7634:	f8b5 2064 	ldrh.w	r2, [r5, #100]	; 0x64
    7638:	4293      	cmp	r3, r2
    763a:	d802      	bhi.n	7642 <l2cap_chan_create_seg+0x22>
	if (pool->user_data_size < BT_BUF_USER_DATA_MIN) {
    763c:	8ac3      	ldrh	r3, [r0, #22]
    763e:	2b03      	cmp	r3, #3
    7640:	d815      	bhi.n	766e <l2cap_chan_create_seg+0x4e>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
    7642:	79a0      	ldrb	r0, [r4, #6]
    7644:	f012 fe10 	bl	1a268 <net_buf_pool_get>
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7648:	8ac3      	ldrh	r3, [r0, #22]
    764a:	2b03      	cmp	r3, #3
    764c:	d902      	bls.n	7654 <l2cap_chan_create_seg+0x34>
	    pool->buf_size >= BT_L2CAP_BUF_SIZE(L2CAP_MAX_LE_MPS)) {
    764e:	8a83      	ldrh	r3, [r0, #20]
	if (pool->user_data_size >= BT_BUF_USER_DATA_MIN &&
    7650:	2b4b      	cmp	r3, #75	; 0x4b
    7652:	d82e      	bhi.n	76b2 <l2cap_chan_create_seg+0x92>
	return bt_l2cap_create_pdu(NULL, 0);
    7654:	2100      	movs	r1, #0
    7656:	4608      	mov	r0, r1
    7658:	f7ff ffcb 	bl	75f2 <bt_l2cap_create_pdu>
    765c:	4606      	mov	r6, r0
	if (sdu_hdr_len) {
    765e:	f1b8 0f00 	cmp.w	r8, #0
    7662:	d038      	beq.n	76d6 <l2cap_chan_create_seg+0xb6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    7664:	f106 0008 	add.w	r0, r6, #8
    7668:	4623      	mov	r3, r4
 *
 *  @return Number of bytes in the buffer and its fragments.
 */
static inline size_t net_buf_frags_len(struct net_buf *buf)
{
	size_t bytes = 0;
    766a:	2100      	movs	r1, #0
    766c:	e02e      	b.n	76cc <l2cap_chan_create_seg+0xac>
	headroom = BT_L2CAP_CHAN_SEND_RESERVE + sdu_hdr_len;
    766e:	fa1f f688 	uxth.w	r6, r8
    7672:	3608      	adds	r6, #8
    7674:	b2b6      	uxth	r6, r6
	if (net_buf_headroom(buf) >= headroom && !buf->frags) {
    7676:	f104 0708 	add.w	r7, r4, #8
    767a:	4638      	mov	r0, r7
    767c:	f012 ff1f 	bl	1a4be <net_buf_simple_headroom>
    7680:	42b0      	cmp	r0, r6
    7682:	d3de      	bcc.n	7642 <l2cap_chan_create_seg+0x22>
    7684:	6823      	ldr	r3, [r4, #0]
    7686:	2b00      	cmp	r3, #0
    7688:	d1db      	bne.n	7642 <l2cap_chan_create_seg+0x22>
		if (sdu_hdr_len) {
    768a:	f1b8 0f00 	cmp.w	r8, #0
    768e:	d00b      	beq.n	76a8 <l2cap_chan_create_seg+0x88>
    7690:	4623      	mov	r3, r4
    7692:	2100      	movs	r1, #0
    7694:	e002      	b.n	769c <l2cap_chan_create_seg+0x7c>

	while (buf) {
		bytes += buf->len;
    7696:	899a      	ldrh	r2, [r3, #12]
    7698:	4411      	add	r1, r2
		buf = buf->frags;
    769a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    769c:	2b00      	cmp	r3, #0
    769e:	d1fa      	bne.n	7696 <l2cap_chan_create_seg+0x76>
			net_buf_push_le16(buf, net_buf_frags_len(buf));
    76a0:	b289      	uxth	r1, r1
    76a2:	4638      	mov	r0, r7
    76a4:	f012 fee5 	bl	1a472 <net_buf_simple_push_le16>
		return net_buf_ref(buf);
    76a8:	4620      	mov	r0, r4
    76aa:	f012 fe73 	bl	1a394 <net_buf_ref>
    76ae:	4606      	mov	r6, r0
    76b0:	e02f      	b.n	7712 <l2cap_chan_create_seg+0xf2>
		seg = net_buf_alloc(pool, K_NO_WAIT);
    76b2:	2100      	movs	r1, #0
    76b4:	f012 fde4 	bl	1a280 <net_buf_alloc>
		if (seg) {
    76b8:	4606      	mov	r6, r0
    76ba:	2800      	cmp	r0, #0
    76bc:	d0ca      	beq.n	7654 <l2cap_chan_create_seg+0x34>
			net_buf_reserve(seg, BT_L2CAP_CHAN_SEND_RESERVE);
    76be:	2108      	movs	r1, #8
    76c0:	f012 fe39 	bl	1a336 <net_buf_reserve>
    76c4:	e7cb      	b.n	765e <l2cap_chan_create_seg+0x3e>
		bytes += buf->len;
    76c6:	899a      	ldrh	r2, [r3, #12]
    76c8:	4411      	add	r1, r2
		buf = buf->frags;
    76ca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    76cc:	2b00      	cmp	r3, #0
    76ce:	d1fa      	bne.n	76c6 <l2cap_chan_create_seg+0xa6>
		net_buf_add_le16(seg, net_buf_frags_len(buf));
    76d0:	b289      	uxth	r1, r1
    76d2:	f012 fea7 	bl	1a424 <net_buf_simple_add_le16>
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    76d6:	f106 0708 	add.w	r7, r6, #8
    76da:	4638      	mov	r0, r7
    76dc:	f012 fef3 	bl	1a4c6 <net_buf_simple_tailroom>
    76e0:	f8b5 5064 	ldrh.w	r5, [r5, #100]	; 0x64
    76e4:	eba5 0308 	sub.w	r3, r5, r8
    76e8:	4298      	cmp	r0, r3
    76ea:	d315      	bcc.n	7718 <l2cap_chan_create_seg+0xf8>
    76ec:	fa1f f888 	uxth.w	r8, r8
    76f0:	eba5 0508 	sub.w	r5, r5, r8
    76f4:	b2ad      	uxth	r5, r5
	len = min(buf->len, len);
    76f6:	89a0      	ldrh	r0, [r4, #12]
    76f8:	4285      	cmp	r5, r0
    76fa:	bf28      	it	cs
    76fc:	4605      	movcs	r5, r0
	net_buf_add_mem(seg, buf->data, len);
    76fe:	462a      	mov	r2, r5
    7700:	f854 1f08 	ldr.w	r1, [r4, #8]!
    7704:	4638      	mov	r0, r7
    7706:	f012 fe7b 	bl	1a400 <net_buf_simple_add_mem>
	net_buf_pull(buf, len);
    770a:	4629      	mov	r1, r5
    770c:	4620      	mov	r0, r4
    770e:	f012 febe 	bl	1a48e <net_buf_simple_pull>
}
    7712:	4630      	mov	r0, r6
    7714:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	len = min(net_buf_tailroom(seg), ch->tx.mps - sdu_hdr_len);
    7718:	4638      	mov	r0, r7
    771a:	f012 fed4 	bl	1a4c6 <net_buf_simple_tailroom>
    771e:	b285      	uxth	r5, r0
    7720:	e7e9      	b.n	76f6 <l2cap_chan_create_seg+0xd6>

00007722 <bt_l2cap_send_cb>:
{
    7722:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7724:	4605      	mov	r5, r0
    7726:	460f      	mov	r7, r1
    7728:	4614      	mov	r4, r2
    772a:	461e      	mov	r6, r3
	hdr = net_buf_push(buf, sizeof(*hdr));
    772c:	2104      	movs	r1, #4
    772e:	f102 0008 	add.w	r0, r2, #8
    7732:	f012 fe96 	bl	1a462 <net_buf_simple_push>
	hdr->len = sys_cpu_to_le16(buf->len - sizeof(*hdr));
    7736:	89a3      	ldrh	r3, [r4, #12]
    7738:	3b04      	subs	r3, #4
    773a:	8003      	strh	r3, [r0, #0]
	hdr->cid = sys_cpu_to_le16(cid);
    773c:	8047      	strh	r7, [r0, #2]
	bt_conn_send_cb(conn, buf, cb);
    773e:	4632      	mov	r2, r6
    7740:	4621      	mov	r1, r4
    7742:	4628      	mov	r0, r5
    7744:	f7fe ffbe 	bl	66c4 <bt_conn_send_cb>
    7748:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0000774c <l2cap_chan_send_req>:
{
    774c:	b538      	push	{r3, r4, r5, lr}
    774e:	4604      	mov	r4, r0
    7750:	460d      	mov	r5, r1
	if (timeout) {
    7752:	b94a      	cbnz	r2, 7768 <l2cap_chan_send_req+0x1c>
		k_delayed_work_cancel(&chan->chan.rtx_work);
    7754:	3010      	adds	r0, #16
    7756:	f021 ff3b 	bl	295d0 <k_delayed_work_cancel>
		      bt_conn_tx_cb_t cb);

static inline void bt_l2cap_send(struct bt_conn *conn, u16_t cid,
				 struct net_buf *buf)
{
	bt_l2cap_send_cb(conn, cid, buf, NULL);
    775a:	2300      	movs	r3, #0
    775c:	462a      	mov	r2, r5
    775e:	2105      	movs	r1, #5
    7760:	6820      	ldr	r0, [r4, #0]
    7762:	f7ff ffde 	bl	7722 <bt_l2cap_send_cb>
    7766:	bd38      	pop	{r3, r4, r5, pc}
    7768:	f100 0110 	add.w	r1, r0, #16
    776c:	4801      	ldr	r0, [pc, #4]	; (7774 <l2cap_chan_send_req+0x28>)
    776e:	f021 ff89 	bl	29684 <k_delayed_work_submit_to_queue>
    7772:	e7f2      	b.n	775a <l2cap_chan_send_req+0xe>
    7774:	20002bd8 	.word	0x20002bd8

00007778 <l2cap_le_conn_req>:
{
    7778:	b538      	push	{r3, r4, r5, lr}
    777a:	4604      	mov	r4, r0
	ch->chan.ident = get_ident();
    777c:	f7ff fca6 	bl	70cc <get_ident>
    7780:	4602      	mov	r2, r0
    7782:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_LE_CONN_REQ,
    7786:	230a      	movs	r3, #10
    7788:	2114      	movs	r1, #20
    778a:	2000      	movs	r0, #0
    778c:	f7ff ff36 	bl	75fc <l2cap_create_le_sig_pdu>
    7790:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7792:	210a      	movs	r1, #10
    7794:	3008      	adds	r0, #8
    7796:	f012 fe2d 	bl	1a3f4 <net_buf_simple_add>
	req->psm = sys_cpu_to_le16(ch->chan.psm);
    779a:	8f63      	ldrh	r3, [r4, #58]	; 0x3a
    779c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    779e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    77a2:	8043      	strh	r3, [r0, #2]
	req->mtu = sys_cpu_to_le16(ch->rx.mtu);
    77a4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    77a8:	8083      	strh	r3, [r0, #4]
	req->mps = sys_cpu_to_le16(ch->rx.mps);
    77aa:	f8b4 3044 	ldrh.w	r3, [r4, #68]	; 0x44
    77ae:	80c3      	strh	r3, [r0, #6]
	req->credits = sys_cpu_to_le16(ch->rx.init_credits);
    77b0:	f8b4 3046 	ldrh.w	r3, [r4, #70]	; 0x46
    77b4:	8103      	strh	r3, [r0, #8]
	l2cap_chan_send_req(ch, buf, L2CAP_CONN_TIMEOUT);
    77b6:	f649 4240 	movw	r2, #40000	; 0x9c40
    77ba:	4629      	mov	r1, r5
    77bc:	4620      	mov	r0, r4
    77be:	f7ff ffc5 	bl	774c <l2cap_chan_send_req>
}
    77c2:	2000      	movs	r0, #0
    77c4:	bd38      	pop	{r3, r4, r5, pc}

000077c6 <l2cap_le_encrypt_change>:
	if (chan->state != BT_L2CAP_CONNECT || chan->ident) {
    77c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
    77ca:	2b01      	cmp	r3, #1
    77cc:	d000      	beq.n	77d0 <l2cap_le_encrypt_change+0xa>
    77ce:	4770      	bx	lr
    77d0:	f890 303c 	ldrb.w	r3, [r0, #60]	; 0x3c
    77d4:	2b00      	cmp	r3, #0
    77d6:	d1fa      	bne.n	77ce <l2cap_le_encrypt_change+0x8>
{
    77d8:	b510      	push	{r4, lr}
    77da:	4604      	mov	r4, r0
	if (status) {
    77dc:	b911      	cbnz	r1, 77e4 <l2cap_le_encrypt_change+0x1e>
	l2cap_le_conn_req(BT_L2CAP_LE_CHAN(chan));
    77de:	f7ff ffcb 	bl	7778 <l2cap_le_conn_req>
    77e2:	bd10      	pop	{r4, pc}
		bt_l2cap_chan_remove(chan->conn, chan);
    77e4:	4601      	mov	r1, r0
    77e6:	6800      	ldr	r0, [r0, #0]
    77e8:	f7ff fe06 	bl	73f8 <bt_l2cap_chan_remove>
		bt_l2cap_chan_del(chan);
    77ec:	4620      	mov	r0, r4
    77ee:	f7ff fe38 	bl	7462 <bt_l2cap_chan_del>
		return;
    77f2:	bd10      	pop	{r4, pc}

000077f4 <bt_l2cap_encrypt_change>:
{
    77f4:	b538      	push	{r3, r4, r5, lr}
    77f6:	460d      	mov	r5, r1
	return list->head;
    77f8:	6bc4      	ldr	r4, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    77fa:	b10c      	cbz	r4, 7800 <bt_l2cap_encrypt_change+0xc>
    77fc:	3c08      	subs	r4, #8
    77fe:	e00a      	b.n	7816 <bt_l2cap_encrypt_change+0x22>
    7800:	2400      	movs	r4, #0
    7802:	e008      	b.n	7816 <bt_l2cap_encrypt_change+0x22>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7804:	f114 0308 	adds.w	r3, r4, #8
    7808:	d012      	beq.n	7830 <bt_l2cap_encrypt_change+0x3c>
	return node->next;
    780a:	68a2      	ldr	r2, [r4, #8]
    780c:	b192      	cbz	r2, 7834 <bt_l2cap_encrypt_change+0x40>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    780e:	b103      	cbz	r3, 7812 <bt_l2cap_encrypt_change+0x1e>
	return node->next;
    7810:	68a3      	ldr	r3, [r4, #8]
    7812:	f1a3 0408 	sub.w	r4, r3, #8
    7816:	b17c      	cbz	r4, 7838 <bt_l2cap_encrypt_change+0x44>
		l2cap_le_encrypt_change(chan, hci_status);
    7818:	4629      	mov	r1, r5
    781a:	4620      	mov	r0, r4
    781c:	f7ff ffd3 	bl	77c6 <l2cap_le_encrypt_change>
		if (chan->ops->encrypt_change) {
    7820:	6863      	ldr	r3, [r4, #4]
    7822:	689b      	ldr	r3, [r3, #8]
    7824:	2b00      	cmp	r3, #0
    7826:	d0ed      	beq.n	7804 <bt_l2cap_encrypt_change+0x10>
			chan->ops->encrypt_change(chan, hci_status);
    7828:	4629      	mov	r1, r5
    782a:	4620      	mov	r0, r4
    782c:	4798      	blx	r3
    782e:	e7e9      	b.n	7804 <bt_l2cap_encrypt_change+0x10>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7830:	461a      	mov	r2, r3
    7832:	e7eb      	b.n	780c <bt_l2cap_encrypt_change+0x18>
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7834:	2400      	movs	r4, #0
    7836:	e7ee      	b.n	7816 <bt_l2cap_encrypt_change+0x22>
}
    7838:	bd38      	pop	{r3, r4, r5, pc}

0000783a <l2cap_chan_update_credits>:
{
    783a:	b570      	push	{r4, r5, r6, lr}
 */
__syscall unsigned int k_sem_count_get(struct k_sem *sem);

static inline unsigned int _impl_k_sem_count_get(struct k_sem *sem)
{
	return sem->count;
    783c:	6d04      	ldr	r4, [r0, #80]	; 0x50
	    L2CAP_LE_CREDITS_THRESHOLD(chan->rx.init_credits)) {
    783e:	f8b0 3046 	ldrh.w	r3, [r0, #70]	; 0x46
	if (k_sem_count_get(&chan->rx.credits) >
    7842:	ebb4 0f53 	cmp.w	r4, r3, lsr #1
    7846:	d900      	bls.n	784a <l2cap_chan_update_credits+0x10>
    7848:	bd70      	pop	{r4, r5, r6, pc}
    784a:	460e      	mov	r6, r1
    784c:	4605      	mov	r5, r0
	credits = chan->rx.init_credits - k_sem_count_get(&chan->rx.credits);
    784e:	b2a4      	uxth	r4, r4
    7850:	1b1b      	subs	r3, r3, r4
    7852:	b29c      	uxth	r4, r3
	l2cap_chan_rx_give_credits(chan, credits);
    7854:	4621      	mov	r1, r4
    7856:	f7ff fd07 	bl	7268 <l2cap_chan_rx_give_credits>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CREDITS, get_ident(),
    785a:	f7ff fc37 	bl	70cc <get_ident>
    785e:	2304      	movs	r3, #4
    7860:	4602      	mov	r2, r0
    7862:	2116      	movs	r1, #22
    7864:	4630      	mov	r0, r6
    7866:	f7ff fec9 	bl	75fc <l2cap_create_le_sig_pdu>
    786a:	4606      	mov	r6, r0
	ev = net_buf_add(buf, sizeof(*ev));
    786c:	2104      	movs	r1, #4
    786e:	3008      	adds	r0, #8
    7870:	f012 fdc0 	bl	1a3f4 <net_buf_simple_add>
	ev->cid = sys_cpu_to_le16(chan->rx.cid);
    7874:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    7878:	8003      	strh	r3, [r0, #0]
	ev->credits = sys_cpu_to_le16(credits);
    787a:	8044      	strh	r4, [r0, #2]
    787c:	2300      	movs	r3, #0
    787e:	4632      	mov	r2, r6
    7880:	2105      	movs	r1, #5
    7882:	6828      	ldr	r0, [r5, #0]
    7884:	f7ff ff4d 	bl	7722 <bt_l2cap_send_cb>
}
    7888:	e7de      	b.n	7848 <l2cap_chan_update_credits+0xe>

0000788a <l2cap_chan_le_send>:
{
    788a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    788c:	4604      	mov	r4, r0
    788e:	460d      	mov	r5, r1
    7890:	4616      	mov	r6, r2
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    7892:	2100      	movs	r1, #0
    7894:	3068      	adds	r0, #104	; 0x68
    7896:	f021 f8bf 	bl	28a18 <_impl_k_sem_take>
	if (k_sem_take(&ch->tx.credits, K_NO_WAIT)) {
    789a:	b9b0      	cbnz	r0, 78ca <l2cap_chan_le_send+0x40>
	buf = l2cap_chan_create_seg(ch, buf, sdu_hdr_len);
    789c:	4632      	mov	r2, r6
    789e:	4629      	mov	r1, r5
    78a0:	4620      	mov	r0, r4
    78a2:	f7ff febd 	bl	7620 <l2cap_chan_create_seg>
	if (!ch->chan.conn) {
    78a6:	6827      	ldr	r7, [r4, #0]
    78a8:	b157      	cbz	r7, 78c0 <l2cap_chan_le_send+0x36>
	len = buf->len - sdu_hdr_len;
    78aa:	8985      	ldrh	r5, [r0, #12]
    78ac:	1bad      	subs	r5, r5, r6
    78ae:	2300      	movs	r3, #0
    78b0:	4602      	mov	r2, r0
    78b2:	f8b4 1060 	ldrh.w	r1, [r4, #96]	; 0x60
    78b6:	4638      	mov	r0, r7
    78b8:	f7ff ff33 	bl	7722 <bt_l2cap_send_cb>
}
    78bc:	4628      	mov	r0, r5
    78be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		net_buf_unref(buf);
    78c0:	f012 fd4c 	bl	1a35c <net_buf_unref>
		return -ECONNRESET;
    78c4:	f06f 0567 	mvn.w	r5, #103	; 0x67
    78c8:	e7f8      	b.n	78bc <l2cap_chan_le_send+0x32>
		return -EAGAIN;
    78ca:	f06f 050a 	mvn.w	r5, #10
    78ce:	e7f5      	b.n	78bc <l2cap_chan_le_send+0x32>

000078d0 <l2cap_chan_le_send_sdu>:
{
    78d0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    78d4:	b082      	sub	sp, #8
    78d6:	9201      	str	r2, [sp, #4]
	total_len = net_buf_frags_len(*buf) + sent;
    78d8:	680d      	ldr	r5, [r1, #0]
    78da:	462b      	mov	r3, r5
	size_t bytes = 0;
    78dc:	2200      	movs	r2, #0
    78de:	e002      	b.n	78e6 <l2cap_chan_le_send_sdu+0x16>
		bytes += buf->len;
    78e0:	899c      	ldrh	r4, [r3, #12]
    78e2:	4422      	add	r2, r4
		buf = buf->frags;
    78e4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    78e6:	2b00      	cmp	r3, #0
    78e8:	d1fa      	bne.n	78e0 <l2cap_chan_le_send_sdu+0x10>
    78ea:	9b01      	ldr	r3, [sp, #4]
    78ec:	189c      	adds	r4, r3, r2
	if (total_len > ch->tx.mtu) {
    78ee:	f8b0 2062 	ldrh.w	r2, [r0, #98]	; 0x62
    78f2:	4294      	cmp	r4, r2
    78f4:	dc54      	bgt.n	79a0 <l2cap_chan_le_send_sdu+0xd0>
	if (!frag->len && frag->frags) {
    78f6:	89aa      	ldrh	r2, [r5, #12]
    78f8:	b912      	cbnz	r2, 7900 <l2cap_chan_le_send_sdu+0x30>
    78fa:	682a      	ldr	r2, [r5, #0]
    78fc:	b102      	cbz	r2, 7900 <l2cap_chan_le_send_sdu+0x30>
		frag = frag->frags;
    78fe:	4615      	mov	r5, r2
    7900:	4688      	mov	r8, r1
    7902:	4607      	mov	r7, r0
	if (!sent) {
    7904:	b10b      	cbz	r3, 790a <l2cap_chan_le_send_sdu+0x3a>
		frag = frag->frags;
    7906:	2600      	movs	r6, #0
    7908:	e024      	b.n	7954 <l2cap_chan_le_send_sdu+0x84>
		ret = l2cap_chan_le_send(ch, frag, BT_L2CAP_SDU_HDR_LEN);
    790a:	2202      	movs	r2, #2
    790c:	4629      	mov	r1, r5
    790e:	f7ff ffbc 	bl	788a <l2cap_chan_le_send>
		if (ret < 0) {
    7912:	1e06      	subs	r6, r0, #0
    7914:	db01      	blt.n	791a <l2cap_chan_le_send_sdu+0x4a>
		sent = ret;
    7916:	9601      	str	r6, [sp, #4]
    7918:	e7f5      	b.n	7906 <l2cap_chan_le_send_sdu+0x36>
			if (ret == -EAGAIN) {
    791a:	f116 0f0b 	cmn.w	r6, #11
    791e:	d002      	beq.n	7926 <l2cap_chan_le_send_sdu+0x56>
			*buf = frag;
    7920:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    7924:	e038      	b.n	7998 <l2cap_chan_le_send_sdu+0xc8>
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    7926:	f105 0010 	add.w	r0, r5, #16
    792a:	89eb      	ldrh	r3, [r5, #14]
    792c:	4418      	add	r0, r3
    792e:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    7930:	2204      	movs	r2, #4
    7932:	eb0d 0102 	add.w	r1, sp, r2
    7936:	f020 0003 	bic.w	r0, r0, #3
    793a:	f7f8 fcc1 	bl	2c0 <memcpy>
    793e:	e7ef      	b.n	7920 <l2cap_chan_le_send_sdu+0x50>
		ret = l2cap_chan_le_send(ch, frag, 0);
    7940:	2200      	movs	r2, #0
    7942:	4629      	mov	r1, r5
    7944:	4638      	mov	r0, r7
    7946:	f7ff ffa0 	bl	788a <l2cap_chan_le_send>
		if (ret < 0) {
    794a:	1e06      	subs	r6, r0, #0
    794c:	db0e      	blt.n	796c <l2cap_chan_le_send_sdu+0x9c>
	for (ret = 0; sent < total_len; sent += ret) {
    794e:	9b01      	ldr	r3, [sp, #4]
    7950:	4433      	add	r3, r6
    7952:	9301      	str	r3, [sp, #4]
    7954:	9b01      	ldr	r3, [sp, #4]
    7956:	429c      	cmp	r4, r3
    7958:	dd1b      	ble.n	7992 <l2cap_chan_le_send_sdu+0xc2>
		if (!frag->len) {
    795a:	89ab      	ldrh	r3, [r5, #12]
    795c:	2b00      	cmp	r3, #0
    795e:	d1ef      	bne.n	7940 <l2cap_chan_le_send_sdu+0x70>
			frag = net_buf_frag_del(NULL, frag);
    7960:	4629      	mov	r1, r5
    7962:	2000      	movs	r0, #0
    7964:	f012 fd3a 	bl	1a3dc <net_buf_frag_del>
    7968:	4605      	mov	r5, r0
    796a:	e7e9      	b.n	7940 <l2cap_chan_le_send_sdu+0x70>
			if (ret == -EAGAIN) {
    796c:	f116 0f0b 	cmn.w	r6, #11
    7970:	d002      	beq.n	7978 <l2cap_chan_le_send_sdu+0xa8>
			*buf = frag;
    7972:	f8c8 5000 	str.w	r5, [r8]
			return ret;
    7976:	e00f      	b.n	7998 <l2cap_chan_le_send_sdu+0xc8>
    7978:	f105 0010 	add.w	r0, r5, #16
    797c:	89eb      	ldrh	r3, [r5, #14]
    797e:	4418      	add	r0, r3
    7980:	3003      	adds	r0, #3
				memcpy(net_buf_user_data(frag), &sent,
    7982:	2204      	movs	r2, #4
    7984:	eb0d 0102 	add.w	r1, sp, r2
    7988:	f020 0003 	bic.w	r0, r0, #3
    798c:	f7f8 fc98 	bl	2c0 <memcpy>
    7990:	e7ef      	b.n	7972 <l2cap_chan_le_send_sdu+0xa2>
	net_buf_unref(frag);
    7992:	4628      	mov	r0, r5
    7994:	f012 fce2 	bl	1a35c <net_buf_unref>
}
    7998:	4630      	mov	r0, r6
    799a:	b002      	add	sp, #8
    799c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
    79a0:	f06f 0679 	mvn.w	r6, #121	; 0x79
    79a4:	e7f8      	b.n	7998 <l2cap_chan_le_send_sdu+0xc8>

000079a6 <l2cap_chan_le_send_resume>:
{
    79a6:	b510      	push	{r4, lr}
    79a8:	b082      	sub	sp, #8
    79aa:	4604      	mov	r4, r0
	while ((buf = l2cap_chan_le_get_tx_buf(ch))) {
    79ac:	4620      	mov	r0, r4
    79ae:	f7ff fc91 	bl	72d4 <l2cap_chan_le_get_tx_buf>
    79b2:	9001      	str	r0, [sp, #4]
    79b4:	b180      	cbz	r0, 79d8 <l2cap_chan_le_send_resume+0x32>
    79b6:	f100 0310 	add.w	r3, r0, #16
    79ba:	89c2      	ldrh	r2, [r0, #14]
    79bc:	4413      	add	r3, r2
    79be:	3303      	adds	r3, #3
    79c0:	f023 0303 	bic.w	r3, r3, #3
		sent = l2cap_chan_le_send_sdu(ch, &buf, sent);
    79c4:	681a      	ldr	r2, [r3, #0]
    79c6:	a901      	add	r1, sp, #4
    79c8:	4620      	mov	r0, r4
    79ca:	f7ff ff81 	bl	78d0 <l2cap_chan_le_send_sdu>
		if (sent < 0) {
    79ce:	2800      	cmp	r0, #0
    79d0:	daec      	bge.n	79ac <l2cap_chan_le_send_resume+0x6>
			if (sent == -EAGAIN) {
    79d2:	f110 0f0b 	cmn.w	r0, #11
    79d6:	d001      	beq.n	79dc <l2cap_chan_le_send_resume+0x36>
}
    79d8:	b002      	add	sp, #8
    79da:	bd10      	pop	{r4, pc}
				ch->tx_buf = buf;
    79dc:	9b01      	ldr	r3, [sp, #4]
    79de:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
    79e2:	e7f9      	b.n	79d8 <l2cap_chan_le_send_resume+0x32>

000079e4 <l2cap_send_reject>:
{
    79e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    79e8:	4680      	mov	r8, r0
    79ea:	4691      	mov	r9, r2
    79ec:	461e      	mov	r6, r3
    79ee:	f89d 7020 	ldrb.w	r7, [sp, #32]
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CMD_REJECT, ident,
    79f2:	1cbb      	adds	r3, r7, #2
    79f4:	460a      	mov	r2, r1
    79f6:	2101      	movs	r1, #1
    79f8:	2000      	movs	r0, #0
    79fa:	f7ff fdff 	bl	75fc <l2cap_create_le_sig_pdu>
    79fe:	4604      	mov	r4, r0
	rej = net_buf_add(buf, sizeof(*rej));
    7a00:	f100 0508 	add.w	r5, r0, #8
    7a04:	2102      	movs	r1, #2
    7a06:	4628      	mov	r0, r5
    7a08:	f012 fcf4 	bl	1a3f4 <net_buf_simple_add>
	rej->reason = sys_cpu_to_le16(reason);
    7a0c:	f8a0 9000 	strh.w	r9, [r0]
	if (data) {
    7a10:	b126      	cbz	r6, 7a1c <l2cap_send_reject+0x38>
		net_buf_add_mem(buf, data, data_len);
    7a12:	463a      	mov	r2, r7
    7a14:	4631      	mov	r1, r6
    7a16:	4628      	mov	r0, r5
    7a18:	f012 fcf2 	bl	1a400 <net_buf_simple_add_mem>
    7a1c:	2300      	movs	r3, #0
    7a1e:	4622      	mov	r2, r4
    7a20:	2105      	movs	r1, #5
    7a22:	4640      	mov	r0, r8
    7a24:	f7ff fe7d 	bl	7722 <bt_l2cap_send_cb>
    7a28:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

00007a2c <le_conn_param_update_req>:
{
    7a2c:	b570      	push	{r4, r5, r6, lr}
    7a2e:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7a30:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_conn_param_req *req = (void *)buf->data;
    7a32:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7a34:	8990      	ldrh	r0, [r2, #12]
    7a36:	2807      	cmp	r0, #7
    7a38:	d908      	bls.n	7a4c <le_conn_param_update_req+0x20>
    7a3a:	4610      	mov	r0, r2
	if (conn->role != BT_HCI_ROLE_MASTER) {
    7a3c:	78e2      	ldrb	r2, [r4, #3]
    7a3e:	b13a      	cbz	r2, 7a50 <le_conn_param_update_req+0x24>
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_NOT_UNDERSTOOD,
    7a40:	2200      	movs	r2, #0
    7a42:	9200      	str	r2, [sp, #0]
    7a44:	4613      	mov	r3, r2
    7a46:	4620      	mov	r0, r4
    7a48:	f7ff ffcc 	bl	79e4 <l2cap_send_reject>
}
    7a4c:	b004      	add	sp, #16
    7a4e:	bd70      	pop	{r4, r5, r6, pc}
	param.interval_min = sys_le16_to_cpu(req->min_interval);
    7a50:	881a      	ldrh	r2, [r3, #0]
    7a52:	f8ad 2008 	strh.w	r2, [sp, #8]
	param.interval_max = sys_le16_to_cpu(req->max_interval);
    7a56:	885a      	ldrh	r2, [r3, #2]
    7a58:	f8ad 200a 	strh.w	r2, [sp, #10]
	param.latency = sys_le16_to_cpu(req->latency);
    7a5c:	889a      	ldrh	r2, [r3, #4]
    7a5e:	f8ad 200c 	strh.w	r2, [sp, #12]
	param.timeout = sys_le16_to_cpu(req->timeout);
    7a62:	88db      	ldrh	r3, [r3, #6]
    7a64:	f8ad 300e 	strh.w	r3, [sp, #14]
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_CONN_PARAM_RSP, ident,
    7a68:	2302      	movs	r3, #2
    7a6a:	460a      	mov	r2, r1
    7a6c:	2113      	movs	r1, #19
    7a6e:	f7ff fdc5 	bl	75fc <l2cap_create_le_sig_pdu>
    7a72:	4606      	mov	r6, r0
	accepted = le_param_req(conn, &param);
    7a74:	a902      	add	r1, sp, #8
    7a76:	4620      	mov	r0, r4
    7a78:	f7fe fcc2 	bl	6400 <le_param_req>
    7a7c:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7a7e:	2102      	movs	r1, #2
    7a80:	f106 0008 	add.w	r0, r6, #8
    7a84:	f012 fcb6 	bl	1a3f4 <net_buf_simple_add>
	if (accepted) {
    7a88:	b17d      	cbz	r5, 7aaa <le_conn_param_update_req+0x7e>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_ACCEPTED);
    7a8a:	2300      	movs	r3, #0
    7a8c:	7003      	strb	r3, [r0, #0]
    7a8e:	7043      	strb	r3, [r0, #1]
    7a90:	2300      	movs	r3, #0
    7a92:	4632      	mov	r2, r6
    7a94:	2105      	movs	r1, #5
    7a96:	4620      	mov	r0, r4
    7a98:	f7ff fe43 	bl	7722 <bt_l2cap_send_cb>
	if (accepted) {
    7a9c:	2d00      	cmp	r5, #0
    7a9e:	d0d5      	beq.n	7a4c <le_conn_param_update_req+0x20>
		bt_conn_le_conn_update(conn, &param);
    7aa0:	a902      	add	r1, sp, #8
    7aa2:	4620      	mov	r0, r4
    7aa4:	f7ff f976 	bl	6d94 <bt_conn_le_conn_update>
    7aa8:	e7d0      	b.n	7a4c <le_conn_param_update_req+0x20>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_CONN_PARAM_REJECTED);
    7aaa:	2301      	movs	r3, #1
    7aac:	7003      	strb	r3, [r0, #0]
    7aae:	2300      	movs	r3, #0
    7ab0:	7043      	strb	r3, [r0, #1]
    7ab2:	e7ed      	b.n	7a90 <le_conn_param_update_req+0x64>

00007ab4 <le_disconn_req>:
{
    7ab4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    7ab8:	b084      	sub	sp, #16
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7aba:	6806      	ldr	r6, [r0, #0]
	struct bt_l2cap_disconn_req *req = (void *)buf->data;
    7abc:	6897      	ldr	r7, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7abe:	8993      	ldrh	r3, [r2, #12]
    7ac0:	2b03      	cmp	r3, #3
    7ac2:	d802      	bhi.n	7aca <le_disconn_req+0x16>
}
    7ac4:	b004      	add	sp, #16
    7ac6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    7aca:	4614      	mov	r4, r2
    7acc:	460d      	mov	r5, r1
	chan = l2cap_remove_tx_cid(conn, scid);
    7ace:	8879      	ldrh	r1, [r7, #2]
    7ad0:	4630      	mov	r0, r6
    7ad2:	f7ff fb5f 	bl	7194 <l2cap_remove_tx_cid>
	if (!chan) {
    7ad6:	4680      	mov	r8, r0
    7ad8:	b1d0      	cbz	r0, 7b10 <le_disconn_req+0x5c>
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_DISCONN_RSP, ident,
    7ada:	2304      	movs	r3, #4
    7adc:	462a      	mov	r2, r5
    7ade:	2107      	movs	r1, #7
    7ae0:	4620      	mov	r0, r4
    7ae2:	f7ff fd8b 	bl	75fc <l2cap_create_le_sig_pdu>
    7ae6:	4604      	mov	r4, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    7ae8:	2104      	movs	r1, #4
    7aea:	3008      	adds	r0, #8
    7aec:	f012 fc82 	bl	1a3f4 <net_buf_simple_add>
	rsp->dcid = sys_cpu_to_le16(chan->rx.cid);
    7af0:	f8b8 3040 	ldrh.w	r3, [r8, #64]	; 0x40
    7af4:	8003      	strh	r3, [r0, #0]
	rsp->scid = sys_cpu_to_le16(chan->tx.cid);
    7af6:	f8b8 3060 	ldrh.w	r3, [r8, #96]	; 0x60
    7afa:	8043      	strh	r3, [r0, #2]
	bt_l2cap_chan_del(&chan->chan);
    7afc:	4640      	mov	r0, r8
    7afe:	f7ff fcb0 	bl	7462 <bt_l2cap_chan_del>
    7b02:	2300      	movs	r3, #0
    7b04:	4622      	mov	r2, r4
    7b06:	2105      	movs	r1, #5
    7b08:	4630      	mov	r0, r6
    7b0a:	f7ff fe0a 	bl	7722 <bt_l2cap_send_cb>
    7b0e:	e7d9      	b.n	7ac4 <le_disconn_req+0x10>
		data.scid = req->scid;
    7b10:	887b      	ldrh	r3, [r7, #2]
    7b12:	f8ad 300c 	strh.w	r3, [sp, #12]
		data.dcid = req->dcid;
    7b16:	883b      	ldrh	r3, [r7, #0]
    7b18:	f8ad 300e 	strh.w	r3, [sp, #14]
		l2cap_send_reject(conn, ident, BT_L2CAP_REJ_INVALID_CID, &data,
    7b1c:	2304      	movs	r3, #4
    7b1e:	9300      	str	r3, [sp, #0]
    7b20:	ab03      	add	r3, sp, #12
    7b22:	2202      	movs	r2, #2
    7b24:	4629      	mov	r1, r5
    7b26:	4630      	mov	r0, r6
    7b28:	f7ff ff5c 	bl	79e4 <l2cap_send_reject>
    7b2c:	e7ca      	b.n	7ac4 <le_disconn_req+0x10>

00007b2e <bt_l2cap_le_lookup_tx_cid>:
	return list->head;
    7b2e:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b30:	b108      	cbz	r0, 7b36 <bt_l2cap_le_lookup_tx_cid+0x8>
    7b32:	3808      	subs	r0, #8
    7b34:	e006      	b.n	7b44 <bt_l2cap_le_lookup_tx_cid+0x16>
    7b36:	2000      	movs	r0, #0
    7b38:	e004      	b.n	7b44 <bt_l2cap_le_lookup_tx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b3a:	461a      	mov	r2, r3
    7b3c:	e00b      	b.n	7b56 <bt_l2cap_le_lookup_tx_cid+0x28>
	return node->next;
    7b3e:	6883      	ldr	r3, [r0, #8]
    7b40:	f1a3 0008 	sub.w	r0, r3, #8
    7b44:	b168      	cbz	r0, 7b62 <bt_l2cap_le_lookup_tx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->tx.cid == cid) {
    7b46:	f8b0 3060 	ldrh.w	r3, [r0, #96]	; 0x60
    7b4a:	428b      	cmp	r3, r1
    7b4c:	d009      	beq.n	7b62 <bt_l2cap_le_lookup_tx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b4e:	f110 0308 	adds.w	r3, r0, #8
    7b52:	d0f2      	beq.n	7b3a <bt_l2cap_le_lookup_tx_cid+0xc>
	return node->next;
    7b54:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b56:	b112      	cbz	r2, 7b5e <bt_l2cap_le_lookup_tx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b58:	2b00      	cmp	r3, #0
    7b5a:	d1f0      	bne.n	7b3e <bt_l2cap_le_lookup_tx_cid+0x10>
    7b5c:	e7f0      	b.n	7b40 <bt_l2cap_le_lookup_tx_cid+0x12>
    7b5e:	2000      	movs	r0, #0
    7b60:	e7f0      	b.n	7b44 <bt_l2cap_le_lookup_tx_cid+0x16>
}
    7b62:	4770      	bx	lr

00007b64 <bt_l2cap_le_lookup_rx_cid>:
	return list->head;
    7b64:	6bc0      	ldr	r0, [r0, #60]	; 0x3c
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b66:	b108      	cbz	r0, 7b6c <bt_l2cap_le_lookup_rx_cid+0x8>
    7b68:	3808      	subs	r0, #8
    7b6a:	e006      	b.n	7b7a <bt_l2cap_le_lookup_rx_cid+0x16>
    7b6c:	2000      	movs	r0, #0
    7b6e:	e004      	b.n	7b7a <bt_l2cap_le_lookup_rx_cid+0x16>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b70:	461a      	mov	r2, r3
    7b72:	e00b      	b.n	7b8c <bt_l2cap_le_lookup_rx_cid+0x28>
	return node->next;
    7b74:	6883      	ldr	r3, [r0, #8]
    7b76:	f1a3 0008 	sub.w	r0, r3, #8
    7b7a:	b168      	cbz	r0, 7b98 <bt_l2cap_le_lookup_rx_cid+0x34>
		if (BT_L2CAP_LE_CHAN(chan)->rx.cid == cid) {
    7b7c:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    7b80:	428b      	cmp	r3, r1
    7b82:	d009      	beq.n	7b98 <bt_l2cap_le_lookup_rx_cid+0x34>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b84:	f110 0308 	adds.w	r3, r0, #8
    7b88:	d0f2      	beq.n	7b70 <bt_l2cap_le_lookup_rx_cid+0xc>
	return node->next;
    7b8a:	6882      	ldr	r2, [r0, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&conn->channels, chan, node) {
    7b8c:	b112      	cbz	r2, 7b94 <bt_l2cap_le_lookup_rx_cid+0x30>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7b8e:	2b00      	cmp	r3, #0
    7b90:	d1f0      	bne.n	7b74 <bt_l2cap_le_lookup_rx_cid+0x10>
    7b92:	e7f0      	b.n	7b76 <bt_l2cap_le_lookup_rx_cid+0x12>
    7b94:	2000      	movs	r0, #0
    7b96:	e7f0      	b.n	7b7a <bt_l2cap_le_lookup_rx_cid+0x16>
}
    7b98:	4770      	bx	lr

00007b9a <l2cap_chan_alloc_cid>:
{
    7b9a:	b570      	push	{r4, r5, r6, lr}
    7b9c:	4606      	mov	r6, r0
	if (ch && ch->rx.cid > 0) {
    7b9e:	460d      	mov	r5, r1
    7ba0:	b1a1      	cbz	r1, 7bcc <l2cap_chan_alloc_cid+0x32>
    7ba2:	f8b1 3040 	ldrh.w	r3, [r1, #64]	; 0x40
    7ba6:	b9ab      	cbnz	r3, 7bd4 <l2cap_chan_alloc_cid+0x3a>
    7ba8:	2440      	movs	r4, #64	; 0x40
    7baa:	e001      	b.n	7bb0 <l2cap_chan_alloc_cid+0x16>
	for (cid = L2CAP_LE_CID_DYN_START; cid <= L2CAP_LE_CID_DYN_END; cid++) {
    7bac:	3401      	adds	r4, #1
    7bae:	b2a4      	uxth	r4, r4
    7bb0:	2c7f      	cmp	r4, #127	; 0x7f
    7bb2:	d80d      	bhi.n	7bd0 <l2cap_chan_alloc_cid+0x36>
		if (ch && !bt_l2cap_le_lookup_rx_cid(conn, cid)) {
    7bb4:	2d00      	cmp	r5, #0
    7bb6:	d0f9      	beq.n	7bac <l2cap_chan_alloc_cid+0x12>
    7bb8:	4621      	mov	r1, r4
    7bba:	4630      	mov	r0, r6
    7bbc:	f7ff ffd2 	bl	7b64 <bt_l2cap_le_lookup_rx_cid>
    7bc0:	2800      	cmp	r0, #0
    7bc2:	d1f3      	bne.n	7bac <l2cap_chan_alloc_cid+0x12>
			ch->rx.cid = cid;
    7bc4:	f8a5 4040 	strh.w	r4, [r5, #64]	; 0x40
			return ch;
    7bc8:	4628      	mov	r0, r5
    7bca:	bd70      	pop	{r4, r5, r6, pc}
    7bcc:	2440      	movs	r4, #64	; 0x40
    7bce:	e7ef      	b.n	7bb0 <l2cap_chan_alloc_cid+0x16>
	return NULL;
    7bd0:	2000      	movs	r0, #0
    7bd2:	bd70      	pop	{r4, r5, r6, pc}
		return ch;
    7bd4:	4608      	mov	r0, r1
}
    7bd6:	bd70      	pop	{r4, r5, r6, pc}

00007bd8 <l2cap_chan_add>:
{
    7bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    7bda:	4606      	mov	r6, r0
    7bdc:	460c      	mov	r4, r1
    7bde:	4617      	mov	r7, r2
	ch = l2cap_chan_alloc_cid(conn, chan);
    7be0:	f7ff ffdb 	bl	7b9a <l2cap_chan_alloc_cid>
	if (!ch) {
    7be4:	b1c0      	cbz	r0, 7c18 <l2cap_chan_add+0x40>
    7be6:	4605      	mov	r5, r0
	k_delayed_work_init(&chan->rtx_work, l2cap_rtx_timeout);
    7be8:	490c      	ldr	r1, [pc, #48]	; (7c1c <l2cap_chan_add+0x44>)
    7bea:	f104 0010 	add.w	r0, r4, #16
    7bee:	f021 fcd1 	bl	29594 <k_delayed_work_init>
	bt_l2cap_chan_add(conn, chan, destroy);
    7bf2:	463a      	mov	r2, r7
    7bf4:	4621      	mov	r1, r4
    7bf6:	4630      	mov	r0, r6
    7bf8:	f7ff fcc2 	bl	7580 <bt_l2cap_chan_add>
	    L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    7bfc:	f8b5 3040 	ldrh.w	r3, [r5, #64]	; 0x40
    7c00:	3b40      	subs	r3, #64	; 0x40
    7c02:	b29b      	uxth	r3, r3
	if (IS_ENABLED(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL) &&
    7c04:	2b3f      	cmp	r3, #63	; 0x3f
    7c06:	d901      	bls.n	7c0c <l2cap_chan_add+0x34>
	return true;
    7c08:	2001      	movs	r0, #1
}
    7c0a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECT);
    7c0c:	2101      	movs	r1, #1
    7c0e:	4620      	mov	r0, r4
    7c10:	f7ff fc24 	bl	745c <bt_l2cap_chan_set_state>
	return true;
    7c14:	2001      	movs	r0, #1
    7c16:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return false;
    7c18:	2000      	movs	r0, #0
    7c1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    7c1c:	0000748d 	.word	0x0000748d

00007c20 <bt_l2cap_connected>:
{
    7c20:	b530      	push	{r4, r5, lr}
    7c22:	b083      	sub	sp, #12
    7c24:	4605      	mov	r5, r0
	return list->head;
    7c26:	4b18      	ldr	r3, [pc, #96]	; (7c88 <bt_l2cap_connected+0x68>)
    7c28:	681c      	ldr	r4, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7c2a:	b10c      	cbz	r4, 7c30 <bt_l2cap_connected+0x10>
    7c2c:	3c08      	subs	r4, #8
    7c2e:	e00a      	b.n	7c46 <bt_l2cap_connected+0x26>
    7c30:	2400      	movs	r4, #0
    7c32:	e008      	b.n	7c46 <bt_l2cap_connected+0x26>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c34:	f114 0308 	adds.w	r3, r4, #8
    7c38:	d01f      	beq.n	7c7a <bt_l2cap_connected+0x5a>
	return node->next;
    7c3a:	68a2      	ldr	r2, [r4, #8]
    7c3c:	b1fa      	cbz	r2, 7c7e <bt_l2cap_connected+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c3e:	b103      	cbz	r3, 7c42 <bt_l2cap_connected+0x22>
	return node->next;
    7c40:	68a3      	ldr	r3, [r4, #8]
    7c42:	f1a3 0408 	sub.w	r4, r3, #8
    7c46:	b1e4      	cbz	r4, 7c82 <bt_l2cap_connected+0x62>
		if (fchan->accept(conn, &chan) < 0) {
    7c48:	6863      	ldr	r3, [r4, #4]
    7c4a:	a901      	add	r1, sp, #4
    7c4c:	4628      	mov	r0, r5
    7c4e:	4798      	blx	r3
    7c50:	2800      	cmp	r0, #0
    7c52:	dbef      	blt.n	7c34 <bt_l2cap_connected+0x14>
		ch = BT_L2CAP_LE_CHAN(chan);
    7c54:	9901      	ldr	r1, [sp, #4]
		ch->rx.cid = fchan->cid;
    7c56:	8823      	ldrh	r3, [r4, #0]
    7c58:	f8a1 3040 	strh.w	r3, [r1, #64]	; 0x40
		ch->tx.cid = fchan->cid;
    7c5c:	8823      	ldrh	r3, [r4, #0]
    7c5e:	f8a1 3060 	strh.w	r3, [r1, #96]	; 0x60
		if (!l2cap_chan_add(conn, chan, NULL)) {
    7c62:	2200      	movs	r2, #0
    7c64:	4628      	mov	r0, r5
    7c66:	f7ff ffb7 	bl	7bd8 <l2cap_chan_add>
    7c6a:	b150      	cbz	r0, 7c82 <bt_l2cap_connected+0x62>
		if (chan->ops->connected) {
    7c6c:	9801      	ldr	r0, [sp, #4]
    7c6e:	6843      	ldr	r3, [r0, #4]
    7c70:	681b      	ldr	r3, [r3, #0]
    7c72:	2b00      	cmp	r3, #0
    7c74:	d0de      	beq.n	7c34 <bt_l2cap_connected+0x14>
			chan->ops->connected(chan);
    7c76:	4798      	blx	r3
    7c78:	e7dc      	b.n	7c34 <bt_l2cap_connected+0x14>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    7c7a:	461a      	mov	r2, r3
    7c7c:	e7de      	b.n	7c3c <bt_l2cap_connected+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&le_channels, fchan, node) {
    7c7e:	2400      	movs	r4, #0
    7c80:	e7e1      	b.n	7c46 <bt_l2cap_connected+0x26>
}
    7c82:	b003      	add	sp, #12
    7c84:	bd30      	pop	{r4, r5, pc}
    7c86:	bf00      	nop
    7c88:	200006d8 	.word	0x200006d8

00007c8c <le_conn_req>:
{
    7c8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    7c90:	b085      	sub	sp, #20
	struct bt_conn *conn = l2cap->chan.chan.conn;
    7c92:	6804      	ldr	r4, [r0, #0]
	struct bt_l2cap_le_conn_req *req = (void *)buf->data;
    7c94:	6893      	ldr	r3, [r2, #8]
	if (buf->len < sizeof(*req)) {
    7c96:	8990      	ldrh	r0, [r2, #12]
    7c98:	2809      	cmp	r0, #9
    7c9a:	d912      	bls.n	7cc2 <le_conn_req+0x36>
	psm = sys_le16_to_cpu(req->psm);
    7c9c:	f8b3 9000 	ldrh.w	r9, [r3]
	scid = sys_le16_to_cpu(req->scid);
    7ca0:	f8b3 8002 	ldrh.w	r8, [r3, #2]
    7ca4:	fa1f fa88 	uxth.w	sl, r8
	mtu = sys_le16_to_cpu(req->mtu);
    7ca8:	889e      	ldrh	r6, [r3, #4]
    7caa:	b2b0      	uxth	r0, r6
	mps = sys_le16_to_cpu(req->mps);
    7cac:	88df      	ldrh	r7, [r3, #6]
    7cae:	fa1f fe87 	uxth.w	lr, r7
	credits = sys_le16_to_cpu(req->credits);
    7cb2:	891d      	ldrh	r5, [r3, #8]
    7cb4:	fa1f fb85 	uxth.w	fp, r5
	if (mtu < L2CAP_LE_MIN_MTU || mps < L2CAP_LE_MIN_MTU) {
    7cb8:	2816      	cmp	r0, #22
    7cba:	d902      	bls.n	7cc2 <le_conn_req+0x36>
    7cbc:	f1be 0f16 	cmp.w	lr, #22
    7cc0:	d802      	bhi.n	7cc8 <le_conn_req+0x3c>
}
    7cc2:	b005      	add	sp, #20
    7cc4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
    7cc8:	4610      	mov	r0, r2
    7cca:	460a      	mov	r2, r1
	buf = l2cap_create_le_sig_pdu(buf, BT_L2CAP_LE_CONN_RSP, ident,
    7ccc:	230a      	movs	r3, #10
    7cce:	2115      	movs	r1, #21
    7cd0:	f7ff fc94 	bl	75fc <l2cap_create_le_sig_pdu>
    7cd4:	9000      	str	r0, [sp, #0]
	rsp = net_buf_add(buf, sizeof(*rsp));
    7cd6:	210a      	movs	r1, #10
    7cd8:	3008      	adds	r0, #8
    7cda:	f012 fb8b 	bl	1a3f4 <net_buf_simple_add>
    7cde:	9001      	str	r0, [sp, #4]
	memset(rsp, 0, sizeof(*rsp));
    7ce0:	220a      	movs	r2, #10
    7ce2:	2100      	movs	r1, #0
    7ce4:	f021 fe58 	bl	29998 <memset>
	server = l2cap_server_lookup_psm(psm);
    7ce8:	4648      	mov	r0, r9
    7cea:	f7ff fa35 	bl	7158 <l2cap_server_lookup_psm>
	if (!server) {
    7cee:	4681      	mov	r9, r0
    7cf0:	b168      	cbz	r0, 7d0e <le_conn_req+0x82>
	if (conn->sec_level < server->sec_level) {
    7cf2:	7a22      	ldrb	r2, [r4, #8]
    7cf4:	7883      	ldrb	r3, [r0, #2]
    7cf6:	429a      	cmp	r2, r3
    7cf8:	d20d      	bcs.n	7d16 <le_conn_req+0x8a>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_AUTHENTICATION);
    7cfa:	2305      	movs	r3, #5
    7cfc:	9a01      	ldr	r2, [sp, #4]
    7cfe:	8113      	strh	r3, [r2, #8]
    7d00:	2300      	movs	r3, #0
    7d02:	9a00      	ldr	r2, [sp, #0]
    7d04:	2105      	movs	r1, #5
    7d06:	4620      	mov	r0, r4
    7d08:	f7ff fd0b 	bl	7722 <bt_l2cap_send_cb>
    7d0c:	e7d9      	b.n	7cc2 <le_conn_req+0x36>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_PSM_NOT_SUPP);
    7d0e:	2302      	movs	r3, #2
    7d10:	9a01      	ldr	r2, [sp, #4]
    7d12:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7d14:	e7f4      	b.n	7d00 <le_conn_req+0x74>
	if (!L2CAP_LE_CID_IS_DYN(scid)) {
    7d16:	f1aa 0340 	sub.w	r3, sl, #64	; 0x40
    7d1a:	b29b      	uxth	r3, r3
    7d1c:	2b3f      	cmp	r3, #63	; 0x3f
    7d1e:	d903      	bls.n	7d28 <le_conn_req+0x9c>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_INVALID_SCID);
    7d20:	2309      	movs	r3, #9
    7d22:	9a01      	ldr	r2, [sp, #4]
    7d24:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7d26:	e7eb      	b.n	7d00 <le_conn_req+0x74>
	chan = bt_l2cap_le_lookup_tx_cid(conn, scid);
    7d28:	4651      	mov	r1, sl
    7d2a:	4620      	mov	r0, r4
    7d2c:	f7ff feff 	bl	7b2e <bt_l2cap_le_lookup_tx_cid>
    7d30:	9003      	str	r0, [sp, #12]
	if (chan) {
    7d32:	b118      	cbz	r0, 7d3c <le_conn_req+0xb0>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_SCID_IN_USE);
    7d34:	230a      	movs	r3, #10
    7d36:	9a01      	ldr	r2, [sp, #4]
    7d38:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7d3a:	e7e1      	b.n	7d00 <le_conn_req+0x74>
	if (server->accept(conn, &chan) < 0) {
    7d3c:	f8d9 3004 	ldr.w	r3, [r9, #4]
    7d40:	a903      	add	r1, sp, #12
    7d42:	4620      	mov	r0, r4
    7d44:	4798      	blx	r3
    7d46:	2800      	cmp	r0, #0
    7d48:	da03      	bge.n	7d52 <le_conn_req+0xc6>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7d4a:	2304      	movs	r3, #4
    7d4c:	9a01      	ldr	r2, [sp, #4]
    7d4e:	8113      	strh	r3, [r2, #8]
		goto rsp;
    7d50:	e7d6      	b.n	7d00 <le_conn_req+0x74>
	chan->required_sec_level = server->sec_level;
    7d52:	9903      	ldr	r1, [sp, #12]
    7d54:	f899 3002 	ldrb.w	r3, [r9, #2]
    7d58:	f881 303d 	strb.w	r3, [r1, #61]	; 0x3d
	if (l2cap_chan_add(conn, chan, l2cap_chan_destroy)) {
    7d5c:	4a1e      	ldr	r2, [pc, #120]	; (7dd8 <le_conn_req+0x14c>)
    7d5e:	4620      	mov	r0, r4
    7d60:	f7ff ff3a 	bl	7bd8 <l2cap_chan_add>
    7d64:	b918      	cbnz	r0, 7d6e <le_conn_req+0xe2>
		rsp->result = sys_cpu_to_le16(BT_L2CAP_ERR_NO_RESOURCES);
    7d66:	2304      	movs	r3, #4
    7d68:	9a01      	ldr	r2, [sp, #4]
    7d6a:	8113      	strh	r3, [r2, #8]
    7d6c:	e7c8      	b.n	7d00 <le_conn_req+0x74>
		struct bt_l2cap_le_chan *ch = BT_L2CAP_LE_CHAN(chan);
    7d6e:	f8dd a00c 	ldr.w	sl, [sp, #12]
		l2cap_chan_tx_init(ch);
    7d72:	4650      	mov	r0, sl
    7d74:	f7ff fabd 	bl	72f2 <l2cap_chan_tx_init>
		ch->tx.cid = scid;
    7d78:	f8aa 8060 	strh.w	r8, [sl, #96]	; 0x60
		ch->tx.mps = mps;
    7d7c:	f8aa 7064 	strh.w	r7, [sl, #100]	; 0x64
		ch->tx.mtu = mtu;
    7d80:	f8aa 6062 	strh.w	r6, [sl, #98]	; 0x62
		ch->tx.init_credits = credits;
    7d84:	f8aa 5066 	strh.w	r5, [sl, #102]	; 0x66
		l2cap_chan_tx_give_credits(ch, credits);
    7d88:	4659      	mov	r1, fp
    7d8a:	4650      	mov	r0, sl
    7d8c:	f7ff fa79 	bl	7282 <l2cap_chan_tx_give_credits>
		l2cap_chan_rx_init(ch);
    7d90:	4650      	mov	r0, sl
    7d92:	f7ff fac1 	bl	7318 <l2cap_chan_rx_init>
		l2cap_chan_rx_give_credits(ch, ch->rx.init_credits);
    7d96:	f8ba 1046 	ldrh.w	r1, [sl, #70]	; 0x46
    7d9a:	4650      	mov	r0, sl
    7d9c:	f7ff fa64 	bl	7268 <l2cap_chan_rx_give_credits>
		chan->psm = server->psm;
    7da0:	9803      	ldr	r0, [sp, #12]
    7da2:	f8b9 3000 	ldrh.w	r3, [r9]
    7da6:	8743      	strh	r3, [r0, #58]	; 0x3a
		bt_l2cap_chan_set_state(chan, BT_L2CAP_CONNECTED);
    7da8:	2103      	movs	r1, #3
    7daa:	f7ff fb57 	bl	745c <bt_l2cap_chan_set_state>
		if (chan->ops->connected) {
    7dae:	9803      	ldr	r0, [sp, #12]
    7db0:	6843      	ldr	r3, [r0, #4]
    7db2:	681b      	ldr	r3, [r3, #0]
    7db4:	b103      	cbz	r3, 7db8 <le_conn_req+0x12c>
			chan->ops->connected(chan);
    7db6:	4798      	blx	r3
		rsp->dcid = sys_cpu_to_le16(ch->rx.cid);
    7db8:	f8ba 3040 	ldrh.w	r3, [sl, #64]	; 0x40
    7dbc:	9901      	ldr	r1, [sp, #4]
    7dbe:	800b      	strh	r3, [r1, #0]
		rsp->mps = sys_cpu_to_le16(ch->rx.mps);
    7dc0:	f8ba 3044 	ldrh.w	r3, [sl, #68]	; 0x44
    7dc4:	808b      	strh	r3, [r1, #4]
		rsp->mtu = sys_cpu_to_le16(ch->rx.mtu);
    7dc6:	f8ba 3042 	ldrh.w	r3, [sl, #66]	; 0x42
    7dca:	804b      	strh	r3, [r1, #2]
		rsp->credits = sys_cpu_to_le16(ch->rx.init_credits);
    7dcc:	f8ba 3046 	ldrh.w	r3, [sl, #70]	; 0x46
    7dd0:	80cb      	strh	r3, [r1, #6]
		rsp->result = BT_L2CAP_SUCCESS;
    7dd2:	2300      	movs	r3, #0
    7dd4:	810b      	strh	r3, [r1, #8]
    7dd6:	e793      	b.n	7d00 <le_conn_req+0x74>
    7dd8:	0000729d 	.word	0x0000729d

00007ddc <l2cap_le_connect>:

#if defined(CONFIG_BT_L2CAP_DYNAMIC_CHANNEL)
static int l2cap_le_connect(struct bt_conn *conn, struct bt_l2cap_le_chan *ch,
			    u16_t psm)
{
	if (psm < L2CAP_LE_PSM_START || psm > L2CAP_LE_PSM_END) {
    7ddc:	1e53      	subs	r3, r2, #1
    7dde:	b29b      	uxth	r3, r3
    7de0:	2bfe      	cmp	r3, #254	; 0xfe
    7de2:	d814      	bhi.n	7e0e <l2cap_le_connect+0x32>
{
    7de4:	b570      	push	{r4, r5, r6, lr}
    7de6:	4615      	mov	r5, r2
    7de8:	460c      	mov	r4, r1
    7dea:	4606      	mov	r6, r0
		return -EINVAL;
	}

	l2cap_chan_tx_init(ch);
    7dec:	4608      	mov	r0, r1
    7dee:	f7ff fa80 	bl	72f2 <l2cap_chan_tx_init>
	l2cap_chan_rx_init(ch);
    7df2:	4620      	mov	r0, r4
    7df4:	f7ff fa90 	bl	7318 <l2cap_chan_rx_init>

	if (!l2cap_chan_add(conn, &ch->chan, l2cap_chan_destroy)) {
    7df8:	4a08      	ldr	r2, [pc, #32]	; (7e1c <l2cap_le_connect+0x40>)
    7dfa:	4621      	mov	r1, r4
    7dfc:	4630      	mov	r0, r6
    7dfe:	f7ff feeb 	bl	7bd8 <l2cap_chan_add>
    7e02:	b138      	cbz	r0, 7e14 <l2cap_le_connect+0x38>
		return -ENOMEM;
	}

	ch->chan.psm = psm;
    7e04:	8765      	strh	r5, [r4, #58]	; 0x3a

	return l2cap_le_conn_req(ch);
    7e06:	4620      	mov	r0, r4
    7e08:	f7ff fcb6 	bl	7778 <l2cap_le_conn_req>
    7e0c:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
    7e0e:	f06f 0015 	mvn.w	r0, #21
    7e12:	4770      	bx	lr
		return -ENOMEM;
    7e14:	f06f 000b 	mvn.w	r0, #11
}
    7e18:	bd70      	pop	{r4, r5, r6, pc}
    7e1a:	bf00      	nop
    7e1c:	0000729d 	.word	0x0000729d

00007e20 <bt_l2cap_server_register>:
	if (server->psm < L2CAP_LE_PSM_START ||
    7e20:	8802      	ldrh	r2, [r0, #0]
    7e22:	1e53      	subs	r3, r2, #1
    7e24:	b29b      	uxth	r3, r3
    7e26:	2bfe      	cmp	r3, #254	; 0xfe
    7e28:	d81d      	bhi.n	7e66 <bt_l2cap_server_register+0x46>
	    server->psm > L2CAP_LE_PSM_END || !server->accept) {
    7e2a:	6843      	ldr	r3, [r0, #4]
    7e2c:	b1f3      	cbz	r3, 7e6c <bt_l2cap_server_register+0x4c>
	if (server->sec_level > BT_SECURITY_FIPS) {
    7e2e:	7883      	ldrb	r3, [r0, #2]
    7e30:	2b04      	cmp	r3, #4
    7e32:	d81e      	bhi.n	7e72 <bt_l2cap_server_register+0x52>
{
    7e34:	b510      	push	{r4, lr}
	} else if (server->sec_level < BT_SECURITY_LOW) {
    7e36:	b90b      	cbnz	r3, 7e3c <bt_l2cap_server_register+0x1c>
		server->sec_level = BT_SECURITY_LOW;
    7e38:	2301      	movs	r3, #1
    7e3a:	7083      	strb	r3, [r0, #2]
    7e3c:	4604      	mov	r4, r0
	if (l2cap_server_lookup_psm(server->psm)) {
    7e3e:	4610      	mov	r0, r2
    7e40:	f7ff f98a 	bl	7158 <l2cap_server_lookup_psm>
    7e44:	b9c0      	cbnz	r0, 7e78 <bt_l2cap_server_register+0x58>
	sys_slist_append(&servers, &server->node);
    7e46:	f104 0308 	add.w	r3, r4, #8
	node->next = NULL;
    7e4a:	2200      	movs	r2, #0
    7e4c:	60a2      	str	r2, [r4, #8]
	if (!list->tail) {
    7e4e:	4a0c      	ldr	r2, [pc, #48]	; (7e80 <bt_l2cap_server_register+0x60>)
    7e50:	6852      	ldr	r2, [r2, #4]
    7e52:	b122      	cbz	r2, 7e5e <bt_l2cap_server_register+0x3e>
		list->tail->next = node;
    7e54:	6013      	str	r3, [r2, #0]
		list->tail = node;
    7e56:	4a0a      	ldr	r2, [pc, #40]	; (7e80 <bt_l2cap_server_register+0x60>)
    7e58:	6053      	str	r3, [r2, #4]
	return 0;
    7e5a:	2000      	movs	r0, #0
    7e5c:	bd10      	pop	{r4, pc}
		list->tail = node;
    7e5e:	4a08      	ldr	r2, [pc, #32]	; (7e80 <bt_l2cap_server_register+0x60>)
    7e60:	6053      	str	r3, [r2, #4]
		list->head = node;
    7e62:	6013      	str	r3, [r2, #0]
    7e64:	bd10      	pop	{r4, pc}
		return -EINVAL;
    7e66:	f06f 0015 	mvn.w	r0, #21
    7e6a:	4770      	bx	lr
    7e6c:	f06f 0015 	mvn.w	r0, #21
    7e70:	4770      	bx	lr
		return -EINVAL;
    7e72:	f06f 0015 	mvn.w	r0, #21
    7e76:	4770      	bx	lr
		return -EADDRINUSE;
    7e78:	f06f 006f 	mvn.w	r0, #111	; 0x6f
}
    7e7c:	bd10      	pop	{r4, pc}
    7e7e:	bf00      	nop
    7e80:	200006e0 	.word	0x200006e0

00007e84 <bt_l2cap_update_conn_param>:
{
    7e84:	b570      	push	{r4, r5, r6, lr}
    7e86:	4606      	mov	r6, r0
    7e88:	460c      	mov	r4, r1
	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_CONN_PARAM_REQ,
    7e8a:	f7ff f91f 	bl	70cc <get_ident>
    7e8e:	2308      	movs	r3, #8
    7e90:	4602      	mov	r2, r0
    7e92:	2112      	movs	r1, #18
    7e94:	2000      	movs	r0, #0
    7e96:	f7ff fbb1 	bl	75fc <l2cap_create_le_sig_pdu>
    7e9a:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    7e9c:	2108      	movs	r1, #8
    7e9e:	4408      	add	r0, r1
    7ea0:	f012 faa8 	bl	1a3f4 <net_buf_simple_add>
	req->min_interval = sys_cpu_to_le16(param->interval_min);
    7ea4:	8823      	ldrh	r3, [r4, #0]
    7ea6:	8003      	strh	r3, [r0, #0]
	req->max_interval = sys_cpu_to_le16(param->interval_max);
    7ea8:	8863      	ldrh	r3, [r4, #2]
    7eaa:	8043      	strh	r3, [r0, #2]
	req->latency = sys_cpu_to_le16(param->latency);
    7eac:	88a3      	ldrh	r3, [r4, #4]
    7eae:	8083      	strh	r3, [r0, #4]
	req->timeout = sys_cpu_to_le16(param->timeout);
    7eb0:	88e3      	ldrh	r3, [r4, #6]
    7eb2:	80c3      	strh	r3, [r0, #6]
    7eb4:	2300      	movs	r3, #0
    7eb6:	462a      	mov	r2, r5
    7eb8:	2105      	movs	r1, #5
    7eba:	4630      	mov	r0, r6
    7ebc:	f7ff fc31 	bl	7722 <bt_l2cap_send_cb>
}
    7ec0:	2000      	movs	r0, #0
    7ec2:	bd70      	pop	{r4, r5, r6, pc}

00007ec4 <bt_l2cap_init>:
{
    7ec4:	b508      	push	{r3, lr}
	bt_l2cap_le_fixed_chan_register(&chan);
    7ec6:	4802      	ldr	r0, [pc, #8]	; (7ed0 <bt_l2cap_init+0xc>)
    7ec8:	f7ff fa84 	bl	73d4 <bt_l2cap_le_fixed_chan_register>
    7ecc:	bd08      	pop	{r3, pc}
    7ece:	bf00      	nop
    7ed0:	2000ba00 	.word	0x2000ba00

00007ed4 <bt_l2cap_chan_connect>:
int bt_l2cap_chan_connect(struct bt_conn *conn, struct bt_l2cap_chan *chan,
			  u16_t psm)
{
	BT_DBG("conn %p chan %p psm 0x%04x", conn, chan, psm);

	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7ed4:	b188      	cbz	r0, 7efa <bt_l2cap_chan_connect+0x26>
{
    7ed6:	b508      	push	{r3, lr}
    7ed8:	4603      	mov	r3, r0
	if (!conn || conn->state != BT_CONN_CONNECTED) {
    7eda:	7b00      	ldrb	r0, [r0, #12]
    7edc:	2803      	cmp	r0, #3
    7ede:	d10f      	bne.n	7f00 <bt_l2cap_chan_connect+0x2c>
		return -ENOTCONN;
	}

	if (!chan) {
    7ee0:	b189      	cbz	r1, 7f06 <bt_l2cap_chan_connect+0x32>
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_connect(conn, chan, psm);
	}

	if (chan->required_sec_level > BT_SECURITY_FIPS) {
    7ee2:	f891 003d 	ldrb.w	r0, [r1, #61]	; 0x3d
    7ee6:	2804      	cmp	r0, #4
    7ee8:	d810      	bhi.n	7f0c <bt_l2cap_chan_connect+0x38>
		return -EINVAL;
	} else if (chan->required_sec_level == BT_SECURITY_NONE) {
    7eea:	b910      	cbnz	r0, 7ef2 <bt_l2cap_chan_connect+0x1e>
		chan->required_sec_level = BT_SECURITY_LOW;
    7eec:	2001      	movs	r0, #1
    7eee:	f881 003d 	strb.w	r0, [r1, #61]	; 0x3d
    7ef2:	4618      	mov	r0, r3
	}

	return l2cap_le_connect(conn, BT_L2CAP_LE_CHAN(chan), psm);
    7ef4:	f7ff ff72 	bl	7ddc <l2cap_le_connect>
    7ef8:	bd08      	pop	{r3, pc}
		return -ENOTCONN;
    7efa:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7efe:	4770      	bx	lr
    7f00:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    7f04:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7f06:	f06f 0015 	mvn.w	r0, #21
    7f0a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    7f0c:	f06f 0015 	mvn.w	r0, #21
}
    7f10:	bd08      	pop	{r3, pc}

00007f12 <bt_l2cap_chan_disconnect>:

int bt_l2cap_chan_disconnect(struct bt_l2cap_chan *chan)
{
    7f12:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = chan->conn;
    7f14:	6803      	ldr	r3, [r0, #0]
	struct net_buf *buf;
	struct bt_l2cap_disconn_req *req;
	struct bt_l2cap_le_chan *ch;

	if (!conn) {
    7f16:	b30b      	cbz	r3, 7f5c <bt_l2cap_chan_disconnect+0x4a>
    7f18:	4604      	mov	r4, r0
	ch = BT_L2CAP_LE_CHAN(chan);

	BT_DBG("chan %p scid 0x%04x dcid 0x%04x", chan, ch->rx.cid,
	       ch->tx.cid);

	ch->chan.ident = get_ident();
    7f1a:	f7ff f8d7 	bl	70cc <get_ident>
    7f1e:	4602      	mov	r2, r0
    7f20:	f884 003c 	strb.w	r0, [r4, #60]	; 0x3c

	buf = l2cap_create_le_sig_pdu(NULL, BT_L2CAP_DISCONN_REQ,
    7f24:	2304      	movs	r3, #4
    7f26:	2106      	movs	r1, #6
    7f28:	2000      	movs	r0, #0
    7f2a:	f7ff fb67 	bl	75fc <l2cap_create_le_sig_pdu>
    7f2e:	4605      	mov	r5, r0
				      ch->chan.ident, sizeof(*req));

	req = net_buf_add(buf, sizeof(*req));
    7f30:	2104      	movs	r1, #4
    7f32:	3008      	adds	r0, #8
    7f34:	f012 fa5e 	bl	1a3f4 <net_buf_simple_add>
	req->dcid = sys_cpu_to_le16(ch->tx.cid);
    7f38:	f8b4 3060 	ldrh.w	r3, [r4, #96]	; 0x60
    7f3c:	8003      	strh	r3, [r0, #0]
	req->scid = sys_cpu_to_le16(ch->rx.cid);
    7f3e:	f8b4 3040 	ldrh.w	r3, [r4, #64]	; 0x40
    7f42:	8043      	strh	r3, [r0, #2]

	l2cap_chan_send_req(ch, buf, L2CAP_DISC_TIMEOUT);
    7f44:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
    7f48:	4629      	mov	r1, r5
    7f4a:	4620      	mov	r0, r4
    7f4c:	f7ff fbfe 	bl	774c <l2cap_chan_send_req>
	bt_l2cap_chan_set_state(chan, BT_L2CAP_DISCONNECT);
    7f50:	2104      	movs	r1, #4
    7f52:	4620      	mov	r0, r4
    7f54:	f7ff fa82 	bl	745c <bt_l2cap_chan_set_state>

	return 0;
    7f58:	2000      	movs	r0, #0
    7f5a:	bd38      	pop	{r3, r4, r5, pc}
		return -ENOTCONN;
    7f5c:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    7f60:	bd38      	pop	{r3, r4, r5, pc}

00007f62 <l2cap_chan_le_recv_sdu>:
{
    7f62:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    7f66:	4681      	mov	r9, r0
    7f68:	460e      	mov	r6, r1
	if (net_buf_frags_len(chan->_sdu) + buf->len > chan->_sdu_len) {
    7f6a:	f8d0 0094 	ldr.w	r0, [r0, #148]	; 0x94
    7f6e:	4603      	mov	r3, r0
	size_t bytes = 0;
    7f70:	2200      	movs	r2, #0
    7f72:	e002      	b.n	7f7a <l2cap_chan_le_recv_sdu+0x18>
		bytes += buf->len;
    7f74:	8999      	ldrh	r1, [r3, #12]
    7f76:	440a      	add	r2, r1
		buf = buf->frags;
    7f78:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    7f7a:	2b00      	cmp	r3, #0
    7f7c:	d1fa      	bne.n	7f74 <l2cap_chan_le_recv_sdu+0x12>
    7f7e:	89b3      	ldrh	r3, [r6, #12]
    7f80:	441a      	add	r2, r3
    7f82:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    7f86:	429a      	cmp	r2, r3
    7f88:	d803      	bhi.n	7f92 <l2cap_chan_le_recv_sdu+0x30>
	frag = net_buf_frag_last(chan->_sdu);
    7f8a:	f012 fa07 	bl	1a39c <net_buf_frag_last>
    7f8e:	4680      	mov	r8, r0
	while (buf->len) {
    7f90:	e017      	b.n	7fc2 <l2cap_chan_le_recv_sdu+0x60>
		bt_l2cap_chan_disconnect(&chan->chan);
    7f92:	4648      	mov	r0, r9
    7f94:	f7ff ffbd 	bl	7f12 <bt_l2cap_chan_disconnect>
		return;
    7f98:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7f9c:	f108 0708 	add.w	r7, r8, #8
    7fa0:	4638      	mov	r0, r7
    7fa2:	f012 fa90 	bl	1a4c6 <net_buf_simple_tailroom>
    7fa6:	89b4      	ldrh	r4, [r6, #12]
    7fa8:	42a0      	cmp	r0, r4
    7faa:	d31d      	bcc.n	7fe8 <l2cap_chan_le_recv_sdu+0x86>
		net_buf_add_mem(frag, buf->data, len);
    7fac:	4635      	mov	r5, r6
    7fae:	4622      	mov	r2, r4
    7fb0:	f855 1f08 	ldr.w	r1, [r5, #8]!
    7fb4:	4638      	mov	r0, r7
    7fb6:	f012 fa23 	bl	1a400 <net_buf_simple_add_mem>
		net_buf_pull(buf, len);
    7fba:	4621      	mov	r1, r4
    7fbc:	4628      	mov	r0, r5
    7fbe:	f012 fa66 	bl	1a48e <net_buf_simple_pull>
	while (buf->len) {
    7fc2:	89b3      	ldrh	r3, [r6, #12]
    7fc4:	b1ab      	cbz	r3, 7ff2 <l2cap_chan_le_recv_sdu+0x90>
		if (!net_buf_tailroom(frag)) {
    7fc6:	f108 0008 	add.w	r0, r8, #8
    7fca:	f012 fa7c 	bl	1a4c6 <net_buf_simple_tailroom>
    7fce:	2800      	cmp	r0, #0
    7fd0:	d1e4      	bne.n	7f9c <l2cap_chan_le_recv_sdu+0x3a>
			frag = l2cap_alloc_frag(chan);
    7fd2:	4648      	mov	r0, r9
    7fd4:	f7ff f93a 	bl	724c <l2cap_alloc_frag>
			if (!frag) {
    7fd8:	4680      	mov	r8, r0
    7fda:	2800      	cmp	r0, #0
    7fdc:	d1de      	bne.n	7f9c <l2cap_chan_le_recv_sdu+0x3a>
				bt_l2cap_chan_disconnect(&chan->chan);
    7fde:	4648      	mov	r0, r9
    7fe0:	f7ff ff97 	bl	7f12 <bt_l2cap_chan_disconnect>
				return;
    7fe4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		len = min(net_buf_tailroom(frag), buf->len);
    7fe8:	4638      	mov	r0, r7
    7fea:	f012 fa6c 	bl	1a4c6 <net_buf_simple_tailroom>
    7fee:	b284      	uxth	r4, r0
    7ff0:	e7dc      	b.n	7fac <l2cap_chan_le_recv_sdu+0x4a>
	if (net_buf_frags_len(chan->_sdu) == chan->_sdu_len) {
    7ff2:	f8d9 1094 	ldr.w	r1, [r9, #148]	; 0x94
    7ff6:	460b      	mov	r3, r1
	size_t bytes = 0;
    7ff8:	2200      	movs	r2, #0
    7ffa:	e002      	b.n	8002 <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x2>
		bytes += buf->len;
    7ffc:	8998      	ldrh	r0, [r3, #12]
    7ffe:	4402      	add	r2, r0
		buf = buf->frags;
    8000:	681b      	ldr	r3, [r3, #0]
	while (buf) {
    8002:	2b00      	cmp	r3, #0
    8004:	d1fa      	bne.n	7ffc <l2cap_chan_le_recv_sdu+0x9a>
    8006:	f8b9 3098 	ldrh.w	r3, [r9, #152]	; 0x98
    800a:	4293      	cmp	r3, r2
    800c:	d005      	beq.n	801a <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0x1a>
	l2cap_chan_update_credits(chan, buf);
    800e:	4631      	mov	r1, r6
    8010:	4648      	mov	r0, r9
    8012:	f7ff fc12 	bl	783a <l2cap_chan_update_credits>
    8016:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		chan->chan.ops->recv(&chan->chan, chan->_sdu);
    801a:	f8d9 3004 	ldr.w	r3, [r9, #4]
    801e:	691b      	ldr	r3, [r3, #16]
    8020:	4648      	mov	r0, r9
    8022:	4798      	blx	r3
		net_buf_unref(chan->_sdu);
    8024:	f8d9 0094 	ldr.w	r0, [r9, #148]	; 0x94
    8028:	f012 f998 	bl	1a35c <net_buf_unref>
		chan->_sdu = NULL;
    802c:	2300      	movs	r3, #0
    802e:	f8c9 3094 	str.w	r3, [r9, #148]	; 0x94
		chan->_sdu_len = 0;
    8032:	f8a9 3098 	strh.w	r3, [r9, #152]	; 0x98
    8036:	e7ea      	b.n	800e <CONFIG_SYS_CLOCK_HW_CYCLES_PER_SEC+0xe>

00008038 <l2cap_chan_le_recv>:
{
    8038:	b570      	push	{r4, r5, r6, lr}
    803a:	4604      	mov	r4, r0
    803c:	460d      	mov	r5, r1
    803e:	2100      	movs	r1, #0
    8040:	3048      	adds	r0, #72	; 0x48
    8042:	f020 fce9 	bl	28a18 <_impl_k_sem_take>
	if (k_sem_take(&chan->rx.credits, K_NO_WAIT)) {
    8046:	b938      	cbnz	r0, 8058 <l2cap_chan_le_recv+0x20>
	if (chan->_sdu) {
    8048:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
    804c:	b143      	cbz	r3, 8060 <l2cap_chan_le_recv+0x28>
		l2cap_chan_le_recv_sdu(chan, buf);
    804e:	4629      	mov	r1, r5
    8050:	4620      	mov	r0, r4
    8052:	f7ff ff86 	bl	7f62 <l2cap_chan_le_recv_sdu>
		return;
    8056:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8058:	4620      	mov	r0, r4
    805a:	f7ff ff5a 	bl	7f12 <bt_l2cap_chan_disconnect>
		return;
    805e:	bd70      	pop	{r4, r5, r6, pc}
	sdu_len = net_buf_pull_le16(buf);
    8060:	f105 0008 	add.w	r0, r5, #8
    8064:	f012 fa23 	bl	1a4ae <net_buf_simple_pull_le16>
    8068:	4606      	mov	r6, r0
	if (sdu_len > chan->rx.mtu) {
    806a:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
    806e:	4298      	cmp	r0, r3
    8070:	d80e      	bhi.n	8090 <l2cap_chan_le_recv+0x58>
	if (chan->chan.ops->alloc_buf) {
    8072:	6862      	ldr	r2, [r4, #4]
    8074:	68d3      	ldr	r3, [r2, #12]
    8076:	b19b      	cbz	r3, 80a0 <l2cap_chan_le_recv+0x68>
		chan->_sdu = chan->chan.ops->alloc_buf(&chan->chan);
    8078:	4620      	mov	r0, r4
    807a:	4798      	blx	r3
    807c:	f8c4 0094 	str.w	r0, [r4, #148]	; 0x94
		if (!chan->_sdu) {
    8080:	b150      	cbz	r0, 8098 <l2cap_chan_le_recv+0x60>
		chan->_sdu_len = sdu_len;
    8082:	f8a4 6098 	strh.w	r6, [r4, #152]	; 0x98
		l2cap_chan_le_recv_sdu(chan, buf);
    8086:	4629      	mov	r1, r5
    8088:	4620      	mov	r0, r4
    808a:	f7ff ff6a 	bl	7f62 <l2cap_chan_le_recv_sdu>
		return;
    808e:	bd70      	pop	{r4, r5, r6, pc}
		bt_l2cap_chan_disconnect(&chan->chan);
    8090:	4620      	mov	r0, r4
    8092:	f7ff ff3e 	bl	7f12 <bt_l2cap_chan_disconnect>
		return;
    8096:	bd70      	pop	{r4, r5, r6, pc}
			bt_l2cap_chan_disconnect(&chan->chan);
    8098:	4620      	mov	r0, r4
    809a:	f7ff ff3a 	bl	7f12 <bt_l2cap_chan_disconnect>
			return;
    809e:	bd70      	pop	{r4, r5, r6, pc}
	chan->chan.ops->recv(&chan->chan, buf);
    80a0:	6913      	ldr	r3, [r2, #16]
    80a2:	4629      	mov	r1, r5
    80a4:	4620      	mov	r0, r4
    80a6:	4798      	blx	r3
	l2cap_chan_update_credits(chan, buf);
    80a8:	4629      	mov	r1, r5
    80aa:	4620      	mov	r0, r4
    80ac:	f7ff fbc5 	bl	783a <l2cap_chan_update_credits>
    80b0:	bd70      	pop	{r4, r5, r6, pc}

000080b2 <l2cap_chan_recv>:
{
    80b2:	b508      	push	{r3, lr}
	if (L2CAP_LE_CID_IS_DYN(ch->rx.cid)) {
    80b4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    80b8:	3b40      	subs	r3, #64	; 0x40
    80ba:	b29b      	uxth	r3, r3
    80bc:	2b3f      	cmp	r3, #63	; 0x3f
    80be:	d903      	bls.n	80c8 <l2cap_chan_recv+0x16>
	chan->ops->recv(chan, buf);
    80c0:	6843      	ldr	r3, [r0, #4]
    80c2:	691b      	ldr	r3, [r3, #16]
    80c4:	4798      	blx	r3
    80c6:	bd08      	pop	{r3, pc}
		l2cap_chan_le_recv(ch, buf);
    80c8:	f7ff ffb6 	bl	8038 <l2cap_chan_le_recv>
		return;
    80cc:	bd08      	pop	{r3, pc}

000080ce <bt_l2cap_recv>:
{
    80ce:	b570      	push	{r4, r5, r6, lr}
    80d0:	460c      	mov	r4, r1
	struct bt_l2cap_hdr *hdr = (void *)buf->data;
    80d2:	688a      	ldr	r2, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    80d4:	898b      	ldrh	r3, [r1, #12]
    80d6:	2b03      	cmp	r3, #3
    80d8:	d912      	bls.n	8100 <bt_l2cap_recv+0x32>
    80da:	4605      	mov	r5, r0
	cid = sys_le16_to_cpu(hdr->cid);
    80dc:	8856      	ldrh	r6, [r2, #2]
	net_buf_pull(buf, sizeof(*hdr));
    80de:	2104      	movs	r1, #4
    80e0:	f104 0008 	add.w	r0, r4, #8
    80e4:	f012 f9d3 	bl	1a48e <net_buf_simple_pull>
	chan = bt_l2cap_le_lookup_rx_cid(conn, cid);
    80e8:	4631      	mov	r1, r6
    80ea:	4628      	mov	r0, r5
    80ec:	f7ff fd3a 	bl	7b64 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    80f0:	b150      	cbz	r0, 8108 <bt_l2cap_recv+0x3a>
	l2cap_chan_recv(chan, buf);
    80f2:	4621      	mov	r1, r4
    80f4:	f7ff ffdd 	bl	80b2 <l2cap_chan_recv>
	net_buf_unref(buf);
    80f8:	4620      	mov	r0, r4
    80fa:	f012 f92f 	bl	1a35c <net_buf_unref>
    80fe:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8100:	4608      	mov	r0, r1
    8102:	f012 f92b 	bl	1a35c <net_buf_unref>
		return;
    8106:	bd70      	pop	{r4, r5, r6, pc}
		net_buf_unref(buf);
    8108:	4620      	mov	r0, r4
    810a:	f012 f927 	bl	1a35c <net_buf_unref>
		return;
    810e:	bd70      	pop	{r4, r5, r6, pc}

00008110 <le_credits>:
{
    8110:	b538      	push	{r3, r4, r5, lr}
	struct bt_conn *conn = l2cap->chan.chan.conn;
    8112:	6800      	ldr	r0, [r0, #0]
	struct bt_l2cap_le_credits *ev = (void *)buf->data;
    8114:	6891      	ldr	r1, [r2, #8]
	if (buf->len < sizeof(*ev)) {
    8116:	8993      	ldrh	r3, [r2, #12]
    8118:	2b03      	cmp	r3, #3
    811a:	d800      	bhi.n	811e <le_credits+0xe>
    811c:	bd38      	pop	{r3, r4, r5, pc}
	credits = sys_le16_to_cpu(ev->credits);
    811e:	884d      	ldrh	r5, [r1, #2]
	chan = bt_l2cap_le_lookup_tx_cid(conn, cid);
    8120:	8809      	ldrh	r1, [r1, #0]
    8122:	f7ff fd04 	bl	7b2e <bt_l2cap_le_lookup_tx_cid>
	if (!chan) {
    8126:	4604      	mov	r4, r0
    8128:	2800      	cmp	r0, #0
    812a:	d0f7      	beq.n	811c <le_credits+0xc>
    812c:	6f03      	ldr	r3, [r0, #112]	; 0x70
	if (k_sem_count_get(&ch->tx.credits) + credits > UINT16_MAX) {
    812e:	442b      	add	r3, r5
    8130:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
    8134:	d206      	bcs.n	8144 <le_credits+0x34>
	l2cap_chan_tx_give_credits(ch, credits);
    8136:	4629      	mov	r1, r5
    8138:	f7ff f8a3 	bl	7282 <l2cap_chan_tx_give_credits>
	l2cap_chan_le_send_resume(ch);
    813c:	4620      	mov	r0, r4
    813e:	f7ff fc32 	bl	79a6 <l2cap_chan_le_send_resume>
    8142:	e7eb      	b.n	811c <le_credits+0xc>
		bt_l2cap_chan_disconnect(chan);
    8144:	f7ff fee5 	bl	7f12 <bt_l2cap_chan_disconnect>
		return;
    8148:	bd38      	pop	{r3, r4, r5, pc}
	...

0000814c <l2cap_recv>:
{
    814c:	b5f0      	push	{r4, r5, r6, r7, lr}
    814e:	b083      	sub	sp, #12
	struct bt_l2cap_sig_hdr *hdr = (void *)buf->data;
    8150:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8152:	898b      	ldrh	r3, [r1, #12]
    8154:	2b03      	cmp	r3, #3
    8156:	d801      	bhi.n	815c <l2cap_recv+0x10>
}
    8158:	b003      	add	sp, #12
    815a:	bdf0      	pop	{r4, r5, r6, r7, pc}
    815c:	460c      	mov	r4, r1
    815e:	4605      	mov	r5, r0
	len = sys_le16_to_cpu(hdr->len);
    8160:	8877      	ldrh	r7, [r6, #2]
	net_buf_pull(buf, sizeof(*hdr));
    8162:	2104      	movs	r1, #4
    8164:	f104 0008 	add.w	r0, r4, #8
    8168:	f012 f991 	bl	1a48e <net_buf_simple_pull>
	if (buf->len != len) {
    816c:	89a3      	ldrh	r3, [r4, #12]
    816e:	429f      	cmp	r7, r3
    8170:	d1f2      	bne.n	8158 <l2cap_recv+0xc>
	if (!hdr->ident) {
    8172:	7871      	ldrb	r1, [r6, #1]
    8174:	2900      	cmp	r1, #0
    8176:	d0ef      	beq.n	8158 <l2cap_recv+0xc>
	switch (hdr->code) {
    8178:	7833      	ldrb	r3, [r6, #0]
    817a:	3b01      	subs	r3, #1
    817c:	2b15      	cmp	r3, #21
    817e:	d852      	bhi.n	8226 <l2cap_recv+0xda>
    8180:	a201      	add	r2, pc, #4	; (adr r2, 8188 <l2cap_recv+0x3c>)
    8182:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
    8186:	bf00      	nop
    8188:	0000821d 	.word	0x0000821d
    818c:	00008227 	.word	0x00008227
    8190:	00008227 	.word	0x00008227
    8194:	00008227 	.word	0x00008227
    8198:	00008227 	.word	0x00008227
    819c:	000081ff 	.word	0x000081ff
    81a0:	00008209 	.word	0x00008209
    81a4:	00008227 	.word	0x00008227
    81a8:	00008227 	.word	0x00008227
    81ac:	00008227 	.word	0x00008227
    81b0:	00008227 	.word	0x00008227
    81b4:	00008227 	.word	0x00008227
    81b8:	00008227 	.word	0x00008227
    81bc:	00008227 	.word	0x00008227
    81c0:	00008227 	.word	0x00008227
    81c4:	00008227 	.word	0x00008227
    81c8:	00008227 	.word	0x00008227
    81cc:	000081e1 	.word	0x000081e1
    81d0:	00008159 	.word	0x00008159
    81d4:	000081eb 	.word	0x000081eb
    81d8:	000081f5 	.word	0x000081f5
    81dc:	00008213 	.word	0x00008213
		le_conn_param_update_req(l2cap, hdr->ident, buf);
    81e0:	4622      	mov	r2, r4
    81e2:	4628      	mov	r0, r5
    81e4:	f7ff fc22 	bl	7a2c <le_conn_param_update_req>
		break;
    81e8:	e7b6      	b.n	8158 <l2cap_recv+0xc>
		le_conn_req(l2cap, hdr->ident, buf);
    81ea:	4622      	mov	r2, r4
    81ec:	4628      	mov	r0, r5
    81ee:	f7ff fd4d 	bl	7c8c <le_conn_req>
		break;
    81f2:	e7b1      	b.n	8158 <l2cap_recv+0xc>
		le_conn_rsp(l2cap, hdr->ident, buf);
    81f4:	4622      	mov	r2, r4
    81f6:	4628      	mov	r0, r5
    81f8:	f7ff f954 	bl	74a4 <le_conn_rsp>
		break;
    81fc:	e7ac      	b.n	8158 <l2cap_recv+0xc>
		le_disconn_req(l2cap, hdr->ident, buf);
    81fe:	4622      	mov	r2, r4
    8200:	4628      	mov	r0, r5
    8202:	f7ff fc57 	bl	7ab4 <le_disconn_req>
		break;
    8206:	e7a7      	b.n	8158 <l2cap_recv+0xc>
		le_disconn_rsp(l2cap, hdr->ident, buf);
    8208:	4622      	mov	r2, r4
    820a:	4628      	mov	r0, r5
    820c:	f7ff f9a0 	bl	7550 <le_disconn_rsp>
		break;
    8210:	e7a2      	b.n	8158 <l2cap_recv+0xc>
		le_credits(l2cap, hdr->ident, buf);
    8212:	4622      	mov	r2, r4
    8214:	4628      	mov	r0, r5
    8216:	f7ff ff7b 	bl	8110 <le_credits>
		break;
    821a:	e79d      	b.n	8158 <l2cap_recv+0xc>
		reject_cmd(l2cap, hdr->ident, buf);
    821c:	4622      	mov	r2, r4
    821e:	4628      	mov	r0, r5
    8220:	f7ff f9a5 	bl	756e <reject_cmd>
		break;
    8224:	e798      	b.n	8158 <l2cap_recv+0xc>
		l2cap_send_reject(chan->conn, hdr->ident,
    8226:	6828      	ldr	r0, [r5, #0]
    8228:	2200      	movs	r2, #0
    822a:	9200      	str	r2, [sp, #0]
    822c:	4613      	mov	r3, r2
    822e:	f7ff fbd9 	bl	79e4 <l2cap_send_reject>
		break;
    8232:	e791      	b.n	8158 <l2cap_recv+0xc>

00008234 <bt_l2cap_chan_send>:

int bt_l2cap_chan_send(struct bt_l2cap_chan *chan, struct net_buf *buf)
{
    8234:	b510      	push	{r4, lr}
    8236:	b082      	sub	sp, #8
    8238:	9101      	str	r1, [sp, #4]
	int err;

	if (!buf) {
    823a:	b1f9      	cbz	r1, 827c <bt_l2cap_chan_send+0x48>
		return -EINVAL;
	}

	BT_DBG("chan %p buf %p len %zu", chan, buf, net_buf_frags_len(buf));

	if (!chan->conn || chan->conn->state != BT_CONN_CONNECTED) {
    823c:	6803      	ldr	r3, [r0, #0]
    823e:	b303      	cbz	r3, 8282 <bt_l2cap_chan_send+0x4e>
    8240:	7b1b      	ldrb	r3, [r3, #12]
    8242:	2b03      	cmp	r3, #3
    8244:	d120      	bne.n	8288 <bt_l2cap_chan_send+0x54>
    8246:	4604      	mov	r4, r0
	if (IS_ENABLED(CONFIG_BT_BREDR) &&
	    chan->conn->type == BT_CONN_TYPE_BR) {
		return bt_l2cap_br_chan_send(chan, buf);
	}

	err = l2cap_chan_le_send_sdu(BT_L2CAP_LE_CHAN(chan), &buf, 0);
    8248:	2200      	movs	r2, #0
    824a:	a901      	add	r1, sp, #4
    824c:	f7ff fb40 	bl	78d0 <l2cap_chan_le_send_sdu>
	if (err < 0) {
    8250:	2800      	cmp	r0, #0
    8252:	db01      	blt.n	8258 <bt_l2cap_chan_send+0x24>
		}
		BT_ERR("failed to send message %d", err);
	}

	return err;
}
    8254:	b002      	add	sp, #8
    8256:	bd10      	pop	{r4, pc}
		if (err == -EAGAIN) {
    8258:	f110 0f0b 	cmn.w	r0, #11
    825c:	d1fa      	bne.n	8254 <bt_l2cap_chan_send+0x20>
			net_buf_put(&(BT_L2CAP_LE_CHAN(chan))->tx_queue, buf);
    825e:	9901      	ldr	r1, [sp, #4]
    8260:	f104 0080 	add.w	r0, r4, #128	; 0x80
    8264:	f012 f86c 	bl	1a340 <net_buf_put>
			return *((int *)net_buf_user_data(buf));
    8268:	9a01      	ldr	r2, [sp, #4]
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    826a:	f102 0310 	add.w	r3, r2, #16
    826e:	89d2      	ldrh	r2, [r2, #14]
    8270:	4413      	add	r3, r2
    8272:	3303      	adds	r3, #3
    8274:	f023 0303 	bic.w	r3, r3, #3
    8278:	6818      	ldr	r0, [r3, #0]
    827a:	e7eb      	b.n	8254 <bt_l2cap_chan_send+0x20>
		return -EINVAL;
    827c:	f06f 0015 	mvn.w	r0, #21
    8280:	e7e8      	b.n	8254 <bt_l2cap_chan_send+0x20>
		return -ENOTCONN;
    8282:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8286:	e7e5      	b.n	8254 <bt_l2cap_chan_send+0x20>
    8288:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    828c:	e7e2      	b.n	8254 <bt_l2cap_chan_send+0x20>

0000828e <range_is_valid>:
}

static bool range_is_valid(u16_t start, u16_t end, u16_t *err)
{
	/* Handle 0 is invalid */
	if (!start || !end) {
    828e:	b100      	cbz	r0, 8292 <range_is_valid+0x4>
    8290:	b919      	cbnz	r1, 829a <range_is_valid+0xc>
		if (err) {
    8292:	b142      	cbz	r2, 82a6 <range_is_valid+0x18>
			*err = 0;
    8294:	2000      	movs	r0, #0
    8296:	8010      	strh	r0, [r2, #0]
    8298:	4770      	bx	lr
		}
		return false;
	}

	/* Check if range is valid */
	if (start > end) {
    829a:	4288      	cmp	r0, r1
    829c:	d905      	bls.n	82aa <range_is_valid+0x1c>
		if (err) {
    829e:	b132      	cbz	r2, 82ae <range_is_valid+0x20>
			*err = start;
    82a0:	8010      	strh	r0, [r2, #0]
		}
		return false;
    82a2:	2000      	movs	r0, #0
    82a4:	4770      	bx	lr
		return false;
    82a6:	2000      	movs	r0, #0
    82a8:	4770      	bx	lr
	}

	return true;
    82aa:	2001      	movs	r0, #1
    82ac:	4770      	bx	lr
		return false;
    82ae:	2000      	movs	r0, #0
}
    82b0:	4770      	bx	lr

000082b2 <check_perm>:
}

static u8_t check_perm(struct bt_conn *conn, const struct bt_gatt_attr *attr,
		       u8_t mask)
{
	if ((mask & BT_GATT_PERM_READ) &&
    82b2:	f012 0f01 	tst.w	r2, #1
    82b6:	d007      	beq.n	82c8 <check_perm+0x16>
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    82b8:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_READ) &&
    82ba:	f013 0f15 	tst.w	r3, #21
    82be:	d101      	bne.n	82c4 <check_perm+0x12>
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    82c0:	2002      	movs	r0, #2
    82c2:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_READ_MASK) || !attr->read)) {
    82c4:	684b      	ldr	r3, [r1, #4]
    82c6:	b1eb      	cbz	r3, 8304 <check_perm+0x52>
	}

	if ((mask & BT_GATT_PERM_WRITE) &&
    82c8:	f012 0f02 	tst.w	r2, #2
    82cc:	d007      	beq.n	82de <check_perm+0x2c>
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    82ce:	7c8b      	ldrb	r3, [r1, #18]
	if ((mask & BT_GATT_PERM_WRITE) &&
    82d0:	f013 0f2a 	tst.w	r3, #42	; 0x2a
    82d4:	d101      	bne.n	82da <check_perm+0x28>
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    82d6:	2003      	movs	r0, #3
    82d8:	4770      	bx	lr
	    (!(attr->perm & BT_GATT_PERM_WRITE_MASK) || !attr->write)) {
    82da:	688b      	ldr	r3, [r1, #8]
    82dc:	b1a3      	cbz	r3, 8308 <check_perm+0x56>
	}

	mask &= attr->perm;
    82de:	7c8b      	ldrb	r3, [r1, #18]
    82e0:	401a      	ands	r2, r3
	if (mask & BT_GATT_PERM_AUTHEN_MASK) {
    82e2:	f012 0f30 	tst.w	r2, #48	; 0x30
    82e6:	d004      	beq.n	82f2 <check_perm+0x40>
#if defined(CONFIG_BT_SMP)
		if (conn->sec_level < BT_SECURITY_HIGH) {
    82e8:	7a03      	ldrb	r3, [r0, #8]
    82ea:	2b02      	cmp	r3, #2
    82ec:	d801      	bhi.n	82f2 <check_perm+0x40>
			return BT_ATT_ERR_AUTHENTICATION;
    82ee:	2005      	movs	r0, #5
    82f0:	4770      	bx	lr
#else
		return BT_ATT_ERR_AUTHENTICATION;
#endif /* CONFIG_BT_SMP */
	}

	if ((mask & BT_GATT_PERM_ENCRYPT_MASK)) {
    82f2:	f012 0f0c 	tst.w	r2, #12
    82f6:	d009      	beq.n	830c <check_perm+0x5a>
#if defined(CONFIG_BT_SMP)
		if (!conn->encrypt) {
    82f8:	7a83      	ldrb	r3, [r0, #10]
    82fa:	b90b      	cbnz	r3, 8300 <check_perm+0x4e>
			return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
    82fc:	200f      	movs	r0, #15
		return BT_ATT_ERR_INSUFFICIENT_ENCRYPTION;
#endif /* CONFIG_BT_SMP */
	}

	return 0;
}
    82fe:	4770      	bx	lr
	return 0;
    8300:	2000      	movs	r0, #0
    8302:	4770      	bx	lr
		return BT_ATT_ERR_READ_NOT_PERMITTED;
    8304:	2002      	movs	r0, #2
    8306:	4770      	bx	lr
		return BT_ATT_ERR_WRITE_NOT_PERMITTED;
    8308:	2003      	movs	r0, #3
    830a:	4770      	bx	lr
	return 0;
    830c:	2000      	movs	r0, #0
    830e:	4770      	bx	lr

00008310 <err_to_att>:

static u8_t err_to_att(int err)
{
	BT_DBG("%d", err);

	if (err < 0 && err >= -0xff) {
    8310:	f100 03ff 	add.w	r3, r0, #255	; 0xff
    8314:	2bfe      	cmp	r3, #254	; 0xfe
    8316:	d901      	bls.n	831c <err_to_att+0xc>
		return -err;
	}

	return BT_ATT_ERR_UNLIKELY;
    8318:	200e      	movs	r0, #14
}
    831a:	4770      	bx	lr
		return -err;
    831c:	4240      	negs	r0, r0
    831e:	b2c0      	uxtb	r0, r0
    8320:	4770      	bx	lr

00008322 <write_cb>:
	u16_t offset;
	u8_t err;
};

static u8_t write_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    8322:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8326:	b082      	sub	sp, #8
    8328:	4606      	mov	r6, r0
    832a:	460c      	mov	r4, r1
	int write;

	BT_DBG("handle 0x%04x offset %u", attr->handle, data->offset);

	/* Check attribute permissions */
	data->err = check_perm(data->conn, attr, BT_GATT_PERM_WRITE_MASK);
    832c:	680f      	ldr	r7, [r1, #0]
    832e:	222a      	movs	r2, #42	; 0x2a
    8330:	4601      	mov	r1, r0
    8332:	4638      	mov	r0, r7
    8334:	f7ff ffbd 	bl	82b2 <check_perm>
    8338:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    833a:	b120      	cbz	r0, 8346 <write_cb+0x24>
		return BT_GATT_ITER_STOP;
    833c:	2500      	movs	r5, #0
	}

	data->err = 0;

	return BT_GATT_ITER_CONTINUE;
}
    833e:	4628      	mov	r0, r5
    8340:	b002      	add	sp, #8
    8342:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8346:	4605      	mov	r5, r0
	write = attr->write(data->conn, attr, data->value, data->len,
    8348:	f8d6 8008 	ldr.w	r8, [r6, #8]
    834c:	7c23      	ldrb	r3, [r4, #16]
    834e:	8a62      	ldrh	r2, [r4, #18]
    8350:	2100      	movs	r1, #0
    8352:	9101      	str	r1, [sp, #4]
    8354:	9200      	str	r2, [sp, #0]
    8356:	68e2      	ldr	r2, [r4, #12]
    8358:	4631      	mov	r1, r6
    835a:	4638      	mov	r0, r7
    835c:	47c0      	blx	r8
	if (write < 0 || write != data->len) {
    835e:	2800      	cmp	r0, #0
    8360:	db02      	blt.n	8368 <write_cb+0x46>
    8362:	7c23      	ldrb	r3, [r4, #16]
    8364:	4298      	cmp	r0, r3
    8366:	d003      	beq.n	8370 <write_cb+0x4e>
		data->err = err_to_att(write);
    8368:	f7ff ffd2 	bl	8310 <err_to_att>
    836c:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    836e:	e7e6      	b.n	833e <write_cb+0x1c>
	data->err = 0;
    8370:	2300      	movs	r3, #0
    8372:	7523      	strb	r3, [r4, #20]
	return BT_GATT_ITER_CONTINUE;
    8374:	2501      	movs	r5, #1
    8376:	e7e2      	b.n	833e <write_cb+0x1c>

00008378 <att_prepare_write_req>:

	BT_DBG("handle 0x%04x offset %u", handle, offset);

	return att_prep_write_rsp(att, handle, offset, buf->data, buf->len);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    8378:	2006      	movs	r0, #6
    837a:	4770      	bx	lr

0000837c <att_exec_write_req>:

	BT_DBG("flags 0x%02x", req->flags);

	return att_exec_write_rsp(att, req->flags);
#endif /* CONFIG_BT_ATT_PREPARE_COUNT */
}
    837c:	2006      	movs	r0, #6
    837e:	4770      	bx	lr

00008380 <att_op_get_type>:
static att_type_t att_op_get_type(u8_t op)
{
	const struct att_handler *handler;
	int i;

	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8380:	2300      	movs	r3, #0
    8382:	2b1a      	cmp	r3, #26
    8384:	d80b      	bhi.n	839e <att_op_get_type+0x1e>
		if (op == handlers[i].op) {
    8386:	4a09      	ldr	r2, [pc, #36]	; (83ac <att_op_get_type+0x2c>)
    8388:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    838c:	4282      	cmp	r2, r0
    838e:	d001      	beq.n	8394 <att_op_get_type+0x14>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8390:	3301      	adds	r3, #1
    8392:	e7f6      	b.n	8382 <att_op_get_type+0x2>
			return handlers[i].type;
    8394:	4a05      	ldr	r2, [pc, #20]	; (83ac <att_op_get_type+0x2c>)
    8396:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
    839a:	7898      	ldrb	r0, [r3, #2]
    839c:	4770      	bx	lr
		}
	}

	if (op & ATT_CMD_MASK) {
    839e:	f010 0f40 	tst.w	r0, #64	; 0x40
    83a2:	d101      	bne.n	83a8 <att_op_get_type+0x28>
		return ATT_COMMAND;
	}

	return ATT_UNKNOWN;
    83a4:	2006      	movs	r0, #6
}
    83a6:	4770      	bx	lr
		return ATT_COMMAND;
    83a8:	2000      	movs	r0, #0
    83aa:	4770      	bx	lr
    83ac:	0002d464 	.word	0x0002d464

000083b0 <att_cb>:
{
    83b0:	b508      	push	{r3, lr}
	switch (att_op_get_type(buf->data[0])) {
    83b2:	6883      	ldr	r3, [r0, #8]
    83b4:	7818      	ldrb	r0, [r3, #0]
    83b6:	f7ff ffe3 	bl	8380 <att_op_get_type>
    83ba:	3801      	subs	r0, #1
    83bc:	2804      	cmp	r0, #4
    83be:	d808      	bhi.n	83d2 <att_cb+0x22>
    83c0:	e8df f000 	tbb	[pc, r0]
    83c4:	09070305 	.word	0x09070305
    83c8:	05          	.byte	0x05
    83c9:	00          	.byte	0x00
		return att_rsp_sent;
    83ca:	4804      	ldr	r0, [pc, #16]	; (83dc <att_cb+0x2c>)
    83cc:	bd08      	pop	{r3, pc}
		return att_req_sent;
    83ce:	4804      	ldr	r0, [pc, #16]	; (83e0 <att_cb+0x30>)
    83d0:	bd08      	pop	{r3, pc}
		return att_pdu_sent;
    83d2:	4804      	ldr	r0, [pc, #16]	; (83e4 <att_cb+0x34>)
    83d4:	bd08      	pop	{r3, pc}
		return att_cfm_sent;
    83d6:	4804      	ldr	r0, [pc, #16]	; (83e8 <att_cb+0x38>)
}
    83d8:	bd08      	pop	{r3, pc}
    83da:	bf00      	nop
    83dc:	00008523 	.word	0x00008523
    83e0:	00008595 	.word	0x00008595
    83e4:	0000854d 	.word	0x0000854d
    83e8:	0000855b 	.word	0x0000855b

000083ec <read_cb>:
{
    83ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    83f0:	b083      	sub	sp, #12
    83f2:	4606      	mov	r6, r0
    83f4:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    83f6:	f8d1 8000 	ldr.w	r8, [r1]
	struct bt_conn *conn = att->chan.chan.conn;
    83fa:	f8d8 7000 	ldr.w	r7, [r8]
	data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    83fe:	6888      	ldr	r0, [r1, #8]
    8400:	2100      	movs	r1, #0
    8402:	3008      	adds	r0, #8
    8404:	f011 fff6 	bl	1a3f4 <net_buf_simple_add>
    8408:	60e0      	str	r0, [r4, #12]
	data->err = 0x00;
    840a:	2300      	movs	r3, #0
    840c:	7423      	strb	r3, [r4, #16]
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    840e:	2215      	movs	r2, #21
    8410:	4631      	mov	r1, r6
    8412:	4638      	mov	r0, r7
    8414:	f7ff ff4d 	bl	82b2 <check_perm>
    8418:	7420      	strb	r0, [r4, #16]
	if (data->err) {
    841a:	b120      	cbz	r0, 8426 <read_cb+0x3a>
		return BT_GATT_ITER_STOP;
    841c:	2500      	movs	r5, #0
}
    841e:	4628      	mov	r0, r5
    8420:	b003      	add	sp, #12
    8422:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    8426:	4605      	mov	r5, r0
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8428:	f8d6 9004 	ldr.w	r9, [r6, #4]
    842c:	68a3      	ldr	r3, [r4, #8]
    842e:	6899      	ldr	r1, [r3, #8]
    8430:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, data->offset);
    8432:	f8b8 3062 	ldrh.w	r3, [r8, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8436:	1a9b      	subs	r3, r3, r2
    8438:	88a0      	ldrh	r0, [r4, #4]
    843a:	9000      	str	r0, [sp, #0]
    843c:	b29b      	uxth	r3, r3
    843e:	440a      	add	r2, r1
    8440:	4631      	mov	r1, r6
    8442:	4638      	mov	r0, r7
    8444:	47c8      	blx	r9
	if (read < 0) {
    8446:	1e01      	subs	r1, r0, #0
    8448:	db05      	blt.n	8456 <read_cb+0x6a>
	net_buf_add(data->buf, read);
    844a:	68a0      	ldr	r0, [r4, #8]
    844c:	3008      	adds	r0, #8
    844e:	f011 ffd1 	bl	1a3f4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8452:	2501      	movs	r5, #1
    8454:	e7e3      	b.n	841e <read_cb+0x32>
		data->err = err_to_att(read);
    8456:	4608      	mov	r0, r1
    8458:	f7ff ff5a 	bl	8310 <err_to_att>
    845c:	7420      	strb	r0, [r4, #16]
		return BT_GATT_ITER_STOP;
    845e:	e7de      	b.n	841e <read_cb+0x32>

00008460 <att_chan_get>:
		send_err_rsp(chan->conn, hdr->code, 0, err);
	}
}

static struct bt_att *att_chan_get(struct bt_conn *conn)
{
    8460:	b508      	push	{r3, lr}
	struct bt_l2cap_chan *chan;
	struct bt_att *att;

	if (conn->state != BT_CONN_CONNECTED) {
    8462:	7b03      	ldrb	r3, [r0, #12]
    8464:	2b03      	cmp	r3, #3
    8466:	d10f      	bne.n	8488 <att_chan_get+0x28>
		BT_WARN("Not connected");
		return NULL;
	}

	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_ATT);
    8468:	2104      	movs	r1, #4
    846a:	f7ff fb7b 	bl	7b64 <bt_l2cap_le_lookup_rx_cid>
	if (!chan) {
    846e:	b168      	cbz	r0, 848c <att_chan_get+0x2c>
    8470:	f3bf 8f5b 	dmb	ish
    8474:	f8d0 209c 	ldr.w	r2, [r0, #156]	; 0x9c
    8478:	f3bf 8f5b 	dmb	ish
		BT_ERR("Unable to find ATT channel");
		return NULL;
	}

	att = ATT_CHAN(chan);
	if (atomic_test_bit(att->flags, ATT_DISCONNECTED)) {
    847c:	f012 0f04 	tst.w	r2, #4
    8480:	d100      	bne.n	8484 <att_chan_get+0x24>
		BT_WARN("ATT context flagged as disconnected");
		return NULL;
	}

	return att;
}
    8482:	bd08      	pop	{r3, pc}
		return NULL;
    8484:	2000      	movs	r0, #0
    8486:	bd08      	pop	{r3, pc}
		return NULL;
    8488:	2000      	movs	r0, #0
    848a:	bd08      	pop	{r3, pc}
		return NULL;
    848c:	2000      	movs	r0, #0
    848e:	bd08      	pop	{r3, pc}

00008490 <bt_att_accept>:
	att->req->buf = NULL;
}
#endif /* CONFIG_BT_SMP */

static int bt_att_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
    8490:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
#endif /* CONFIG_BT_SMP */
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    8492:	2400      	movs	r4, #0
    8494:	b11c      	cbz	r4, 849e <bt_att_accept+0xe>
		return 0;
	}

	BT_ERR("No available ATT context for conn %p", conn);

	return -ENOMEM;
    8496:	f06f 040b 	mvn.w	r4, #11
}
    849a:	4620      	mov	r0, r4
    849c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (att->chan.chan.conn) {
    849e:	23ec      	movs	r3, #236	; 0xec
    84a0:	fb03 f304 	mul.w	r3, r3, r4
    84a4:	4a12      	ldr	r2, [pc, #72]	; (84f0 <bt_att_accept+0x60>)
    84a6:	58d3      	ldr	r3, [r2, r3]
    84a8:	b10b      	cbz	r3, 84ae <bt_att_accept+0x1e>
	for (i = 0; i < ARRAY_SIZE(bt_req_pool); i++) {
    84aa:	3401      	adds	r4, #1
    84ac:	e7f2      	b.n	8494 <bt_att_accept+0x4>
    84ae:	460d      	mov	r5, r1
		att->chan.chan.ops = &ops;
    84b0:	480f      	ldr	r0, [pc, #60]	; (84f0 <bt_att_accept+0x60>)
    84b2:	23ec      	movs	r3, #236	; 0xec
    84b4:	fb03 f304 	mul.w	r3, r3, r4
    84b8:	18c6      	adds	r6, r0, r3
    84ba:	4a0e      	ldr	r2, [pc, #56]	; (84f4 <bt_att_accept+0x64>)
    84bc:	6072      	str	r2, [r6, #4]
		atomic_set(att->flags, 0);
    84be:	f103 0298 	add.w	r2, r3, #152	; 0x98
    84c2:	4402      	add	r2, r0
    84c4:	3204      	adds	r2, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    84c6:	2100      	movs	r1, #0
    84c8:	f3bf 8f5b 	dmb	ish
    84cc:	e852 7f00 	ldrex	r7, [r2]
    84d0:	e842 1e00 	strex	lr, r1, [r2]
    84d4:	f1be 0f00 	cmp.w	lr, #0
    84d8:	d1f8      	bne.n	84cc <bt_att_accept+0x3c>
    84da:	f3bf 8f5b 	dmb	ish
		k_sem_init(&att->tx_sem, CONFIG_BT_ATT_TX_MAX,
    84de:	33d0      	adds	r3, #208	; 0xd0
    84e0:	4418      	add	r0, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
    84e2:	2202      	movs	r2, #2
    84e4:	4611      	mov	r1, r2
    84e6:	3004      	adds	r0, #4
    84e8:	f020 fa7a 	bl	289e0 <_impl_k_sem_init>
		*chan = &att->chan.chan;
    84ec:	602e      	str	r6, [r5, #0]
		return 0;
    84ee:	e7d4      	b.n	849a <bt_att_accept+0xa>
    84f0:	200006e8 	.word	0x200006e8
    84f4:	2000ba2c 	.word	0x2000ba2c

000084f8 <att_req_destroy>:
{
    84f8:	b510      	push	{r4, lr}
    84fa:	4604      	mov	r4, r0
	if (req->buf) {
    84fc:	6900      	ldr	r0, [r0, #16]
    84fe:	b108      	cbz	r0, 8504 <att_req_destroy+0xc>
		net_buf_unref(req->buf);
    8500:	f011 ff2c 	bl	1a35c <net_buf_unref>
	if (req->destroy) {
    8504:	68a3      	ldr	r3, [r4, #8]
    8506:	b10b      	cbz	r3, 850c <att_req_destroy+0x14>
		req->destroy(req);
    8508:	4620      	mov	r0, r4
    850a:	4798      	blx	r3
	memset(req, 0, sizeof(*req));
    850c:	2218      	movs	r2, #24
    850e:	2100      	movs	r1, #0
    8510:	4620      	mov	r0, r4
    8512:	f021 fa41 	bl	29998 <memset>
    8516:	bd10      	pop	{r4, pc}

00008518 <att_get>:
{
    8518:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_ATT);
    851a:	2104      	movs	r1, #4
    851c:	f7ff fb07 	bl	7b2e <bt_l2cap_le_lookup_tx_cid>
}
    8520:	bd08      	pop	{r3, pc}

00008522 <att_rsp_sent>:
{
    8522:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    8524:	f7ff fff8 	bl	8518 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_RSP);
    8528:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    852c:	f3bf 8f5b 	dmb	ish
    8530:	e853 2f00 	ldrex	r2, [r3]
    8534:	f022 0201 	bic.w	r2, r2, #1
    8538:	e843 2100 	strex	r1, r2, [r3]
    853c:	2900      	cmp	r1, #0
    853e:	d1f7      	bne.n	8530 <att_rsp_sent+0xe>
    8540:	f3bf 8f5b 	dmb	ish
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8544:	30d4      	adds	r0, #212	; 0xd4
    8546:	f020 fa54 	bl	289f2 <_impl_k_sem_give>
    854a:	bd08      	pop	{r3, pc}

0000854c <att_pdu_sent>:
{
    854c:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    854e:	f7ff ffe3 	bl	8518 <att_get>
    8552:	30d4      	adds	r0, #212	; 0xd4
    8554:	f020 fa4d 	bl	289f2 <_impl_k_sem_give>
    8558:	bd08      	pop	{r3, pc}

0000855a <att_cfm_sent>:
{
    855a:	b508      	push	{r3, lr}
	struct bt_att *att = att_get(conn);
    855c:	f7ff ffdc 	bl	8518 <att_get>
	atomic_clear_bit(att->flags, ATT_PENDING_CFM);
    8560:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    8564:	f3bf 8f5b 	dmb	ish
    8568:	e853 2f00 	ldrex	r2, [r3]
    856c:	f022 0202 	bic.w	r2, r2, #2
    8570:	e843 2100 	strex	r1, r2, [r3]
    8574:	2900      	cmp	r1, #0
    8576:	d1f7      	bne.n	8568 <att_cfm_sent+0xe>
    8578:	f3bf 8f5b 	dmb	ish
    857c:	30d4      	adds	r0, #212	; 0xd4
    857e:	f020 fa38 	bl	289f2 <_impl_k_sem_give>
    8582:	bd08      	pop	{r3, pc}

00008584 <att_notify>:
{
    8584:	b508      	push	{r3, lr}
	handle = net_buf_pull_le16(buf);
    8586:	f101 0008 	add.w	r0, r1, #8
    858a:	f011 ff90 	bl	1a4ae <net_buf_simple_pull_le16>
}
    858e:	2000      	movs	r0, #0
    8590:	bd08      	pop	{r3, pc}
	...

00008594 <att_req_sent>:
{
    8594:	b510      	push	{r4, lr}
	struct bt_att *att = att_get(conn);
    8596:	f7ff ffbf 	bl	8518 <att_get>
    859a:	4604      	mov	r4, r0
    859c:	30d4      	adds	r0, #212	; 0xd4
    859e:	f020 fa28 	bl	289f2 <_impl_k_sem_give>
	if (att->req) {
    85a2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    85a6:	b133      	cbz	r3, 85b6 <att_req_sent+0x22>
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
    85a8:	f247 5230 	movw	r2, #30000	; 0x7530
    85ac:	f104 01ac 	add.w	r1, r4, #172	; 0xac
    85b0:	4801      	ldr	r0, [pc, #4]	; (85b8 <att_req_sent+0x24>)
    85b2:	f021 f867 	bl	29684 <k_delayed_work_submit_to_queue>
    85b6:	bd10      	pop	{r4, pc}
    85b8:	20002bd8 	.word	0x20002bd8

000085bc <read_group_cb>:
{
    85bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    85c0:	b084      	sub	sp, #16
    85c2:	4605      	mov	r5, r0
    85c4:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    85c6:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    85c8:	6837      	ldr	r7, [r6, #0]
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    85ca:	2300      	movs	r3, #0
    85cc:	f88d 3008 	strb.w	r3, [sp, #8]
    85d0:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    85d4:	f8ad 300a 	strh.w	r3, [sp, #10]
    85d8:	a902      	add	r1, sp, #8
    85da:	6800      	ldr	r0, [r0, #0]
    85dc:	f7fb fb8d 	bl	3cfa <bt_uuid_cmp>
    85e0:	b1a8      	cbz	r0, 860e <read_group_cb+0x52>
	    bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    85e2:	2300      	movs	r3, #0
    85e4:	f88d 300c 	strb.w	r3, [sp, #12]
    85e8:	f642 0301 	movw	r3, #10241	; 0x2801
    85ec:	f8ad 300e 	strh.w	r3, [sp, #14]
    85f0:	a903      	add	r1, sp, #12
    85f2:	6828      	ldr	r0, [r5, #0]
    85f4:	f7fb fb81 	bl	3cfa <bt_uuid_cmp>
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY) &&
    85f8:	b148      	cbz	r0, 860e <read_group_cb+0x52>
		if (data->group && attr->handle > data->group->end_handle) {
    85fa:	6923      	ldr	r3, [r4, #16]
    85fc:	2b00      	cmp	r3, #0
    85fe:	d04c      	beq.n	869a <read_group_cb+0xde>
    8600:	8a2a      	ldrh	r2, [r5, #16]
    8602:	8859      	ldrh	r1, [r3, #2]
    8604:	428a      	cmp	r2, r1
    8606:	d94a      	bls.n	869e <read_group_cb+0xe2>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8608:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    860a:	2001      	movs	r0, #1
    860c:	e039      	b.n	8682 <read_group_cb+0xc6>
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    860e:	6861      	ldr	r1, [r4, #4]
    8610:	6828      	ldr	r0, [r5, #0]
    8612:	f7fb fb72 	bl	3cfa <bt_uuid_cmp>
    8616:	2800      	cmp	r0, #0
    8618:	d130      	bne.n	867c <read_group_cb+0xc0>
	if (data->rsp->len &&
    861a:	68e3      	ldr	r3, [r4, #12]
    861c:	781a      	ldrb	r2, [r3, #0]
    861e:	b132      	cbz	r2, 862e <read_group_cb+0x72>
	    att->chan.tx.mtu - data->buf->len < data->rsp->len) {
    8620:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8624:	68a1      	ldr	r1, [r4, #8]
    8626:	8989      	ldrh	r1, [r1, #12]
    8628:	1a5b      	subs	r3, r3, r1
	if (data->rsp->len &&
    862a:	4293      	cmp	r3, r2
    862c:	db39      	blt.n	86a2 <read_group_cb+0xe6>
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    862e:	68a0      	ldr	r0, [r4, #8]
    8630:	2104      	movs	r1, #4
    8632:	3008      	adds	r0, #8
    8634:	f011 fede 	bl	1a3f4 <net_buf_simple_add>
    8638:	6120      	str	r0, [r4, #16]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    863a:	8a2b      	ldrh	r3, [r5, #16]
    863c:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    863e:	6923      	ldr	r3, [r4, #16]
    8640:	8a2a      	ldrh	r2, [r5, #16]
    8642:	805a      	strh	r2, [r3, #2]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8644:	f8d5 8004 	ldr.w	r8, [r5, #4]
    8648:	68a3      	ldr	r3, [r4, #8]
    864a:	6899      	ldr	r1, [r3, #8]
    864c:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    864e:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    8652:	1a9b      	subs	r3, r3, r2
    8654:	2000      	movs	r0, #0
    8656:	9000      	str	r0, [sp, #0]
    8658:	b29b      	uxth	r3, r3
    865a:	440a      	add	r2, r1
    865c:	4629      	mov	r1, r5
    865e:	4638      	mov	r0, r7
    8660:	47c0      	blx	r8
	if (read < 0) {
    8662:	1e01      	subs	r1, r0, #0
    8664:	db1f      	blt.n	86a6 <read_group_cb+0xea>
	if (!data->rsp->len) {
    8666:	68e2      	ldr	r2, [r4, #12]
    8668:	7813      	ldrb	r3, [r2, #0]
    866a:	b96b      	cbnz	r3, 8688 <read_group_cb+0xcc>
		data->rsp->len = read + sizeof(*data->group);
    866c:	1d0b      	adds	r3, r1, #4
    866e:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8670:	68a0      	ldr	r0, [r4, #8]
    8672:	3008      	adds	r0, #8
    8674:	f011 febe 	bl	1a3f4 <net_buf_simple_add>
	return BT_GATT_ITER_CONTINUE;
    8678:	2001      	movs	r0, #1
    867a:	e002      	b.n	8682 <read_group_cb+0xc6>
		data->group = NULL;
    867c:	2300      	movs	r3, #0
    867e:	6123      	str	r3, [r4, #16]
		return BT_GATT_ITER_CONTINUE;
    8680:	2001      	movs	r0, #1
}
    8682:	b004      	add	sp, #16
    8684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	} else if (data->rsp->len != read + sizeof(*data->group)) {
    8688:	1d0a      	adds	r2, r1, #4
    868a:	4293      	cmp	r3, r2
    868c:	d0f0      	beq.n	8670 <read_group_cb+0xb4>
		data->buf->len -= sizeof(*data->group);
    868e:	68a2      	ldr	r2, [r4, #8]
    8690:	8993      	ldrh	r3, [r2, #12]
    8692:	3b04      	subs	r3, #4
    8694:	8193      	strh	r3, [r2, #12]
		return false;
    8696:	2000      	movs	r0, #0
    8698:	e7f3      	b.n	8682 <read_group_cb+0xc6>
		return BT_GATT_ITER_CONTINUE;
    869a:	2001      	movs	r0, #1
    869c:	e7f1      	b.n	8682 <read_group_cb+0xc6>
    869e:	2001      	movs	r0, #1
    86a0:	e7ef      	b.n	8682 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    86a2:	2000      	movs	r0, #0
    86a4:	e7ed      	b.n	8682 <read_group_cb+0xc6>
		return BT_GATT_ITER_STOP;
    86a6:	2000      	movs	r0, #0
    86a8:	e7eb      	b.n	8682 <read_group_cb+0xc6>

000086aa <read_type_cb>:
{
    86aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    86ae:	b082      	sub	sp, #8
    86b0:	4606      	mov	r6, r0
    86b2:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    86b4:	680f      	ldr	r7, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    86b6:	f8d7 8000 	ldr.w	r8, [r7]
	if (bt_uuid_cmp(attr->uuid, data->uuid)) {
    86ba:	6849      	ldr	r1, [r1, #4]
    86bc:	6800      	ldr	r0, [r0, #0]
    86be:	f7fb fb1c 	bl	3cfa <bt_uuid_cmp>
    86c2:	2800      	cmp	r0, #0
    86c4:	d14d      	bne.n	8762 <read_type_cb+0xb8>
	data->err = check_perm(conn, attr, BT_GATT_PERM_READ_MASK);
    86c6:	2215      	movs	r2, #21
    86c8:	4631      	mov	r1, r6
    86ca:	4640      	mov	r0, r8
    86cc:	f7ff fdf1 	bl	82b2 <check_perm>
    86d0:	4605      	mov	r5, r0
    86d2:	7520      	strb	r0, [r4, #20]
	if (data->err) {
    86d4:	b130      	cbz	r0, 86e4 <read_type_cb+0x3a>
		if (data->rsp->len) {
    86d6:	68e3      	ldr	r3, [r4, #12]
    86d8:	781d      	ldrb	r5, [r3, #0]
    86da:	2d00      	cmp	r5, #0
    86dc:	d042      	beq.n	8764 <read_type_cb+0xba>
			data->err = 0x00;
    86de:	2500      	movs	r5, #0
    86e0:	7525      	strb	r5, [r4, #20]
    86e2:	e03f      	b.n	8764 <read_type_cb+0xba>
	data->err = 0x00;
    86e4:	f04f 0900 	mov.w	r9, #0
    86e8:	f884 9014 	strb.w	r9, [r4, #20]
	data->item = net_buf_add(data->buf, sizeof(*data->item));
    86ec:	68a0      	ldr	r0, [r4, #8]
    86ee:	2102      	movs	r1, #2
    86f0:	3008      	adds	r0, #8
    86f2:	f011 fe7f 	bl	1a3f4 <net_buf_simple_add>
    86f6:	6120      	str	r0, [r4, #16]
	data->item->handle = sys_cpu_to_le16(attr->handle);
    86f8:	8a33      	ldrh	r3, [r6, #16]
    86fa:	8003      	strh	r3, [r0, #0]
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    86fc:	f8d6 a004 	ldr.w	sl, [r6, #4]
    8700:	68a3      	ldr	r3, [r4, #8]
    8702:	6899      	ldr	r1, [r3, #8]
    8704:	899a      	ldrh	r2, [r3, #12]
			  att->chan.tx.mtu - data->buf->len, 0);
    8706:	f8b7 3062 	ldrh.w	r3, [r7, #98]	; 0x62
	read = attr->read(conn, attr, data->buf->data + data->buf->len,
    870a:	1a9b      	subs	r3, r3, r2
    870c:	f8cd 9000 	str.w	r9, [sp]
    8710:	b29b      	uxth	r3, r3
    8712:	440a      	add	r2, r1
    8714:	4631      	mov	r1, r6
    8716:	4640      	mov	r0, r8
    8718:	47d0      	blx	sl
	if (read < 0) {
    871a:	1e01      	subs	r1, r0, #0
    871c:	db14      	blt.n	8748 <read_type_cb+0x9e>
	if (!data->rsp->len) {
    871e:	68e2      	ldr	r2, [r4, #12]
    8720:	7813      	ldrb	r3, [r2, #0]
    8722:	b9b3      	cbnz	r3, 8752 <read_type_cb+0xa8>
		data->rsp->len = read + sizeof(*data->item);
    8724:	1c8b      	adds	r3, r1, #2
    8726:	7013      	strb	r3, [r2, #0]
	net_buf_add(data->buf, read);
    8728:	68a0      	ldr	r0, [r4, #8]
    872a:	3008      	adds	r0, #8
    872c:	f011 fe62 	bl	1a3f4 <net_buf_simple_add>
	return att->chan.tx.mtu - data->buf->len > data->rsp->len ?
    8730:	f8b7 5062 	ldrh.w	r5, [r7, #98]	; 0x62
    8734:	68a3      	ldr	r3, [r4, #8]
    8736:	899b      	ldrh	r3, [r3, #12]
    8738:	1aed      	subs	r5, r5, r3
    873a:	68e3      	ldr	r3, [r4, #12]
    873c:	781b      	ldrb	r3, [r3, #0]
	       BT_GATT_ITER_CONTINUE : BT_GATT_ITER_STOP;
    873e:	429d      	cmp	r5, r3
    8740:	bfd4      	ite	le
    8742:	2500      	movle	r5, #0
    8744:	2501      	movgt	r5, #1
    8746:	e00d      	b.n	8764 <read_type_cb+0xba>
		data->err = err_to_att(read);
    8748:	4608      	mov	r0, r1
    874a:	f7ff fde1 	bl	8310 <err_to_att>
    874e:	7520      	strb	r0, [r4, #20]
		return BT_GATT_ITER_STOP;
    8750:	e008      	b.n	8764 <read_type_cb+0xba>
	} else if (data->rsp->len != read + sizeof(*data->item)) {
    8752:	1c8a      	adds	r2, r1, #2
    8754:	4293      	cmp	r3, r2
    8756:	d0e7      	beq.n	8728 <read_type_cb+0x7e>
		data->buf->len -= sizeof(*data->item);
    8758:	68a2      	ldr	r2, [r4, #8]
    875a:	8993      	ldrh	r3, [r2, #12]
    875c:	3b02      	subs	r3, #2
    875e:	8193      	strh	r3, [r2, #12]
		return BT_GATT_ITER_STOP;
    8760:	e000      	b.n	8764 <read_type_cb+0xba>
		return BT_GATT_ITER_CONTINUE;
    8762:	2501      	movs	r5, #1
}
    8764:	4628      	mov	r0, r5
    8766:	b002      	add	sp, #8
    8768:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

0000876c <uuid_create>:
{
    876c:	b510      	push	{r4, lr}
    876e:	4604      	mov	r4, r0
	switch (buf->len) {
    8770:	898b      	ldrh	r3, [r1, #12]
    8772:	2b02      	cmp	r3, #2
    8774:	d003      	beq.n	877e <uuid_create+0x12>
    8776:	2b10      	cmp	r3, #16
    8778:	d00a      	beq.n	8790 <uuid_create+0x24>
	return false;
    877a:	2000      	movs	r0, #0
}
    877c:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_16;
    877e:	2300      	movs	r3, #0
    8780:	7003      	strb	r3, [r0, #0]
		BT_UUID_16(uuid)->val = net_buf_pull_le16(buf);
    8782:	f101 0008 	add.w	r0, r1, #8
    8786:	f011 fe92 	bl	1a4ae <net_buf_simple_pull_le16>
    878a:	8060      	strh	r0, [r4, #2]
		return true;
    878c:	2001      	movs	r0, #1
    878e:	bd10      	pop	{r4, pc}
		uuid->type = BT_UUID_TYPE_128;
    8790:	2302      	movs	r3, #2
    8792:	f800 3b01 	strb.w	r3, [r0], #1
		memcpy(BT_UUID_128(uuid)->val, buf->data, buf->len);
    8796:	898a      	ldrh	r2, [r1, #12]
    8798:	6889      	ldr	r1, [r1, #8]
    879a:	f7f7 fd91 	bl	2c0 <memcpy>
		return true;
    879e:	2001      	movs	r0, #1
    87a0:	bd10      	pop	{r4, pc}

000087a2 <find_info_cb>:
{
    87a2:	b570      	push	{r4, r5, r6, lr}
    87a4:	4605      	mov	r5, r0
    87a6:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    87a8:	680e      	ldr	r6, [r1, #0]
	if (!data->rsp) {
    87aa:	688b      	ldr	r3, [r1, #8]
    87ac:	b13b      	cbz	r3, 87be <find_info_cb+0x1c>
	switch (data->rsp->format) {
    87ae:	68a3      	ldr	r3, [r4, #8]
    87b0:	781b      	ldrb	r3, [r3, #0]
    87b2:	2b01      	cmp	r3, #1
    87b4:	d011      	beq.n	87da <find_info_cb+0x38>
    87b6:	2b02      	cmp	r3, #2
    87b8:	d02b      	beq.n	8812 <find_info_cb+0x70>
	return BT_GATT_ITER_STOP;
    87ba:	2000      	movs	r0, #0
    87bc:	bd70      	pop	{r4, r5, r6, pc}
		data->rsp = net_buf_add(data->buf, sizeof(*data->rsp));
    87be:	6848      	ldr	r0, [r1, #4]
    87c0:	2101      	movs	r1, #1
    87c2:	3008      	adds	r0, #8
    87c4:	f011 fe16 	bl	1a3f4 <net_buf_simple_add>
    87c8:	60a0      	str	r0, [r4, #8]
		data->rsp->format = (attr->uuid->type == BT_UUID_TYPE_16) ?
    87ca:	682b      	ldr	r3, [r5, #0]
    87cc:	781b      	ldrb	r3, [r3, #0]
    87ce:	b913      	cbnz	r3, 87d6 <find_info_cb+0x34>
    87d0:	2301      	movs	r3, #1
    87d2:	7003      	strb	r3, [r0, #0]
    87d4:	e7eb      	b.n	87ae <find_info_cb+0xc>
    87d6:	2302      	movs	r3, #2
    87d8:	e7fb      	b.n	87d2 <find_info_cb+0x30>
		if (attr->uuid->type != BT_UUID_TYPE_16) {
    87da:	682b      	ldr	r3, [r5, #0]
    87dc:	781b      	ldrb	r3, [r3, #0]
    87de:	b10b      	cbz	r3, 87e4 <find_info_cb+0x42>
			return BT_GATT_ITER_STOP;
    87e0:	2000      	movs	r0, #0
    87e2:	bd70      	pop	{r4, r5, r6, pc}
		data->info16 = net_buf_add(data->buf, sizeof(*data->info16));
    87e4:	6860      	ldr	r0, [r4, #4]
    87e6:	2104      	movs	r1, #4
    87e8:	3008      	adds	r0, #8
    87ea:	f011 fe03 	bl	1a3f4 <net_buf_simple_add>
    87ee:	60e0      	str	r0, [r4, #12]
		data->info16->handle = sys_cpu_to_le16(attr->handle);
    87f0:	8a2b      	ldrh	r3, [r5, #16]
    87f2:	8003      	strh	r3, [r0, #0]
		data->info16->uuid = sys_cpu_to_le16(BT_UUID_16(attr->uuid)->val);
    87f4:	68e3      	ldr	r3, [r4, #12]
    87f6:	682a      	ldr	r2, [r5, #0]
    87f8:	8852      	ldrh	r2, [r2, #2]
    87fa:	805a      	strh	r2, [r3, #2]
		if (att->chan.tx.mtu - data->buf->len >
    87fc:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8800:	6862      	ldr	r2, [r4, #4]
    8802:	8992      	ldrh	r2, [r2, #12]
    8804:	1a9b      	subs	r3, r3, r2
    8806:	2b04      	cmp	r3, #4
    8808:	d801      	bhi.n	880e <find_info_cb+0x6c>
	return BT_GATT_ITER_STOP;
    880a:	2000      	movs	r0, #0
    880c:	bd70      	pop	{r4, r5, r6, pc}
			return BT_GATT_ITER_CONTINUE;
    880e:	2001      	movs	r0, #1
    8810:	bd70      	pop	{r4, r5, r6, pc}
		if (attr->uuid->type != BT_UUID_TYPE_128) {
    8812:	682b      	ldr	r3, [r5, #0]
    8814:	781b      	ldrb	r3, [r3, #0]
    8816:	2b02      	cmp	r3, #2
    8818:	d001      	beq.n	881e <find_info_cb+0x7c>
			return BT_GATT_ITER_STOP;
    881a:	2000      	movs	r0, #0
    881c:	bd70      	pop	{r4, r5, r6, pc}
		data->info128 = net_buf_add(data->buf, sizeof(*data->info128));
    881e:	6860      	ldr	r0, [r4, #4]
    8820:	2112      	movs	r1, #18
    8822:	3008      	adds	r0, #8
    8824:	f011 fde6 	bl	1a3f4 <net_buf_simple_add>
    8828:	60e0      	str	r0, [r4, #12]
		data->info128->handle = sys_cpu_to_le16(attr->handle);
    882a:	8a2b      	ldrh	r3, [r5, #16]
    882c:	8003      	strh	r3, [r0, #0]
		memcpy(data->info128->uuid, BT_UUID_128(attr->uuid)->val,
    882e:	68e0      	ldr	r0, [r4, #12]
    8830:	6829      	ldr	r1, [r5, #0]
    8832:	2210      	movs	r2, #16
    8834:	3101      	adds	r1, #1
    8836:	3002      	adds	r0, #2
    8838:	f7f7 fd42 	bl	2c0 <memcpy>
		if (att->chan.tx.mtu - data->buf->len >
    883c:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    8840:	6862      	ldr	r2, [r4, #4]
    8842:	8992      	ldrh	r2, [r2, #12]
    8844:	1a9b      	subs	r3, r3, r2
    8846:	2b12      	cmp	r3, #18
    8848:	d901      	bls.n	884e <find_info_cb+0xac>
			return BT_GATT_ITER_CONTINUE;
    884a:	2001      	movs	r0, #1
    884c:	bd70      	pop	{r4, r5, r6, pc}
	return BT_GATT_ITER_STOP;
    884e:	2000      	movs	r0, #0
}
    8850:	bd70      	pop	{r4, r5, r6, pc}

00008852 <find_type_cb>:
{
    8852:	b5f0      	push	{r4, r5, r6, r7, lr}
    8854:	b089      	sub	sp, #36	; 0x24
    8856:	4605      	mov	r5, r0
    8858:	460c      	mov	r4, r1
	struct bt_att *att = data->att;
    885a:	680e      	ldr	r6, [r1, #0]
	struct bt_conn *conn = att->chan.chan.conn;
    885c:	6837      	ldr	r7, [r6, #0]
	if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_SECONDARY)) {
    885e:	2300      	movs	r3, #0
    8860:	f88d 3018 	strb.w	r3, [sp, #24]
    8864:	f642 0301 	movw	r3, #10241	; 0x2801
    8868:	f8ad 301a 	strh.w	r3, [sp, #26]
    886c:	a906      	add	r1, sp, #24
    886e:	6800      	ldr	r0, [r0, #0]
    8870:	f7fb fa43 	bl	3cfa <bt_uuid_cmp>
    8874:	b920      	cbnz	r0, 8880 <find_type_cb+0x2e>
		data->group = NULL;
    8876:	2300      	movs	r3, #0
    8878:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    887a:	2001      	movs	r0, #1
}
    887c:	b009      	add	sp, #36	; 0x24
    887e:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_PRIMARY)) {
    8880:	2300      	movs	r3, #0
    8882:	f88d 301c 	strb.w	r3, [sp, #28]
    8886:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    888a:	f8ad 301e 	strh.w	r3, [sp, #30]
    888e:	a907      	add	r1, sp, #28
    8890:	6828      	ldr	r0, [r5, #0]
    8892:	f7fb fa32 	bl	3cfa <bt_uuid_cmp>
    8896:	b148      	cbz	r0, 88ac <find_type_cb+0x5a>
		if (data->group && attr->handle > data->group->end_handle) {
    8898:	68a3      	ldr	r3, [r4, #8]
    889a:	2b00      	cmp	r3, #0
    889c:	d039      	beq.n	8912 <find_type_cb+0xc0>
    889e:	8a2a      	ldrh	r2, [r5, #16]
    88a0:	8859      	ldrh	r1, [r3, #2]
    88a2:	428a      	cmp	r2, r1
    88a4:	d937      	bls.n	8916 <find_type_cb+0xc4>
			data->group->end_handle = sys_cpu_to_le16(attr->handle);
    88a6:	805a      	strh	r2, [r3, #2]
		return BT_GATT_ITER_CONTINUE;
    88a8:	2001      	movs	r0, #1
    88aa:	e7e7      	b.n	887c <find_type_cb+0x2a>
	if (att->chan.tx.mtu - data->buf->len < sizeof(*data->group)) {
    88ac:	f8b6 3062 	ldrh.w	r3, [r6, #98]	; 0x62
    88b0:	6862      	ldr	r2, [r4, #4]
    88b2:	8992      	ldrh	r2, [r2, #12]
    88b4:	1a9b      	subs	r3, r3, r2
    88b6:	2b03      	cmp	r3, #3
    88b8:	d801      	bhi.n	88be <find_type_cb+0x6c>
		return BT_GATT_ITER_STOP;
    88ba:	2000      	movs	r0, #0
    88bc:	e7de      	b.n	887c <find_type_cb+0x2a>
	read = attr->read(conn, attr, uuid, sizeof(uuid), 0);
    88be:	686e      	ldr	r6, [r5, #4]
    88c0:	2300      	movs	r3, #0
    88c2:	9300      	str	r3, [sp, #0]
    88c4:	2310      	movs	r3, #16
    88c6:	aa02      	add	r2, sp, #8
    88c8:	4629      	mov	r1, r5
    88ca:	4638      	mov	r0, r7
    88cc:	47b0      	blx	r6
	if (read < 0) {
    88ce:	1e02      	subs	r2, r0, #0
    88d0:	db06      	blt.n	88e0 <find_type_cb+0x8e>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    88d2:	7c23      	ldrb	r3, [r4, #16]
    88d4:	429a      	cmp	r2, r3
    88d6:	d007      	beq.n	88e8 <find_type_cb+0x96>
		data->group = NULL;
    88d8:	2300      	movs	r3, #0
    88da:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    88dc:	2001      	movs	r0, #1
    88de:	e7cd      	b.n	887c <find_type_cb+0x2a>
		data->group = NULL;
    88e0:	2300      	movs	r3, #0
    88e2:	60a3      	str	r3, [r4, #8]
		return BT_GATT_ITER_CONTINUE;
    88e4:	2001      	movs	r0, #1
    88e6:	e7c9      	b.n	887c <find_type_cb+0x2a>
	if (read != data->value_len || memcmp(data->value, uuid, read)) {
    88e8:	a902      	add	r1, sp, #8
    88ea:	68e0      	ldr	r0, [r4, #12]
    88ec:	f020 ffc0 	bl	29870 <memcmp>
    88f0:	2800      	cmp	r0, #0
    88f2:	d1f1      	bne.n	88d8 <find_type_cb+0x86>
	data->err = 0x00;
    88f4:	2300      	movs	r3, #0
    88f6:	7463      	strb	r3, [r4, #17]
	data->group = net_buf_add(data->buf, sizeof(*data->group));
    88f8:	6860      	ldr	r0, [r4, #4]
    88fa:	2104      	movs	r1, #4
    88fc:	3008      	adds	r0, #8
    88fe:	f011 fd79 	bl	1a3f4 <net_buf_simple_add>
    8902:	60a0      	str	r0, [r4, #8]
	data->group->start_handle = sys_cpu_to_le16(attr->handle);
    8904:	8a2b      	ldrh	r3, [r5, #16]
    8906:	8003      	strh	r3, [r0, #0]
	data->group->end_handle = sys_cpu_to_le16(attr->handle);
    8908:	68a3      	ldr	r3, [r4, #8]
    890a:	8a2a      	ldrh	r2, [r5, #16]
    890c:	805a      	strh	r2, [r3, #2]
	return BT_GATT_ITER_CONTINUE;
    890e:	2001      	movs	r0, #1
    8910:	e7b4      	b.n	887c <find_type_cb+0x2a>
		return BT_GATT_ITER_CONTINUE;
    8912:	2001      	movs	r0, #1
    8914:	e7b2      	b.n	887c <find_type_cb+0x2a>
    8916:	2001      	movs	r0, #1
    8918:	e7b0      	b.n	887c <find_type_cb+0x2a>

0000891a <att_change_security>:
{
    891a:	b508      	push	{r3, lr}
	switch (err) {
    891c:	2905      	cmp	r1, #5
    891e:	d008      	beq.n	8932 <att_change_security+0x18>
    8920:	290f      	cmp	r1, #15
    8922:	d113      	bne.n	894c <att_change_security+0x32>
		if (conn->sec_level >= BT_SECURITY_MEDIUM)
    8924:	7a03      	ldrb	r3, [r0, #8]
    8926:	2b01      	cmp	r3, #1
    8928:	d813      	bhi.n	8952 <att_change_security+0x38>
		sec = BT_SECURITY_MEDIUM;
    892a:	2102      	movs	r1, #2
	return bt_conn_security(conn, sec);
    892c:	f7fd fe4a 	bl	65c4 <bt_conn_security>
    8930:	bd08      	pop	{r3, pc}
		if (conn->sec_level < BT_SECURITY_MEDIUM) {
    8932:	7a03      	ldrb	r3, [r0, #8]
    8934:	2b01      	cmp	r3, #1
    8936:	d905      	bls.n	8944 <att_change_security+0x2a>
		} else if (conn->sec_level < BT_SECURITY_HIGH) {
    8938:	2b02      	cmp	r3, #2
    893a:	d905      	bls.n	8948 <att_change_security+0x2e>
		} else if (conn->sec_level < BT_SECURITY_FIPS) {
    893c:	2b03      	cmp	r3, #3
    893e:	d80b      	bhi.n	8958 <att_change_security+0x3e>
			sec = BT_SECURITY_FIPS;
    8940:	2104      	movs	r1, #4
    8942:	e7f3      	b.n	892c <att_change_security+0x12>
			sec = BT_SECURITY_MEDIUM;
    8944:	2102      	movs	r1, #2
    8946:	e7f1      	b.n	892c <att_change_security+0x12>
			sec = BT_SECURITY_HIGH;
    8948:	2103      	movs	r1, #3
    894a:	e7ef      	b.n	892c <att_change_security+0x12>
		return -EINVAL;
    894c:	f06f 0015 	mvn.w	r0, #21
    8950:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8952:	f06f 0077 	mvn.w	r0, #119	; 0x77
    8956:	bd08      	pop	{r3, pc}
			return -EALREADY;
    8958:	f06f 0077 	mvn.w	r0, #119	; 0x77
}
    895c:	bd08      	pop	{r3, pc}
	...

00008960 <bt_att_connected>:
{
    8960:	b510      	push	{r4, lr}
    8962:	4604      	mov	r4, r0
	ch->tx.mtu = BT_ATT_DEFAULT_LE_MTU;
    8964:	2317      	movs	r3, #23
    8966:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	ch->rx.mtu = BT_ATT_DEFAULT_LE_MTU;
    896a:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	k_delayed_work_init(&att->timeout_work, att_timeout);
    896e:	4906      	ldr	r1, [pc, #24]	; (8988 <bt_att_connected+0x28>)
    8970:	30ac      	adds	r0, #172	; 0xac
    8972:	f020 fe0f 	bl	29594 <k_delayed_work_init>
	list->head = NULL;
    8976:	2300      	movs	r3, #0
    8978:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
	list->tail = NULL;
    897c:	f8c4 30a8 	str.w	r3, [r4, #168]	; 0xa8
	bt_gatt_connected(ch->chan.conn);
    8980:	6820      	ldr	r0, [r4, #0]
    8982:	f001 fadd 	bl	9f40 <bt_gatt_connected>
    8986:	bd10      	pop	{r4, pc}
    8988:	00008ce7 	.word	0x00008ce7

0000898c <att_send_req>:
{
    898c:	b570      	push	{r4, r5, r6, lr}
    898e:	4605      	mov	r5, r0
    8990:	460c      	mov	r4, r1
	att->req = req;
    8992:	f8c0 10a0 	str.w	r1, [r0, #160]	; 0xa0
	k_sem_take(&att->tx_sem, K_FOREVER);
    8996:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    899a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    899e:	4630      	mov	r0, r6
    89a0:	f020 f83a 	bl	28a18 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    89a4:	682b      	ldr	r3, [r5, #0]
    89a6:	7b1b      	ldrb	r3, [r3, #12]
    89a8:	2b03      	cmp	r3, #3
    89aa:	d019      	beq.n	89e0 <att_send_req+0x54>
    89ac:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    89ae:	b323      	cbz	r3, 89fa <att_send_req+0x6e>
	net_buf_simple_save(&req->buf->b, &req->state);
    89b0:	6926      	ldr	r6, [r4, #16]
	state->offset = net_buf_simple_headroom(buf);
    89b2:	f106 0008 	add.w	r0, r6, #8
    89b6:	f011 fd82 	bl	1a4be <net_buf_simple_headroom>
    89ba:	81a0      	strh	r0, [r4, #12]
	state->len = buf->len;
    89bc:	89b3      	ldrh	r3, [r6, #12]
    89be:	81e3      	strh	r3, [r4, #14]
	bt_l2cap_send_cb(att->chan.chan.conn, BT_L2CAP_CID_ATT,
    89c0:	682d      	ldr	r5, [r5, #0]
    89c2:	6920      	ldr	r0, [r4, #16]
    89c4:	f011 fce6 	bl	1a394 <net_buf_ref>
    89c8:	4606      	mov	r6, r0
    89ca:	6920      	ldr	r0, [r4, #16]
    89cc:	f7ff fcf0 	bl	83b0 <att_cb>
    89d0:	4603      	mov	r3, r0
    89d2:	4632      	mov	r2, r6
    89d4:	2104      	movs	r1, #4
    89d6:	4628      	mov	r0, r5
    89d8:	f7fe fea3 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    89dc:	2000      	movs	r0, #0
}
    89de:	bd70      	pop	{r4, r5, r6, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    89e0:	f3bf 8f5b 	dmb	ish
    89e4:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    89e8:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    89ec:	f013 0f04 	tst.w	r3, #4
    89f0:	d101      	bne.n	89f6 <att_send_req+0x6a>
    89f2:	2301      	movs	r3, #1
    89f4:	e7db      	b.n	89ae <att_send_req+0x22>
    89f6:	2300      	movs	r3, #0
    89f8:	e7d9      	b.n	89ae <att_send_req+0x22>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    89fa:	4630      	mov	r0, r6
    89fc:	f01f fff9 	bl	289f2 <_impl_k_sem_give>
		return -ENOTCONN;
    8a00:	f06f 007f 	mvn.w	r0, #127	; 0x7f
    8a04:	bd70      	pop	{r4, r5, r6, pc}

00008a06 <att_process>:
{
    8a06:	b508      	push	{r3, lr}
	return (!list->head);
    8a08:	f8d0 10a4 	ldr.w	r1, [r0, #164]	; 0xa4
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
    8a0c:	b131      	cbz	r1, 8a1c <att_process+0x16>
	list->head = node->next;
    8a0e:	680b      	ldr	r3, [r1, #0]
    8a10:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
	if (list->tail == node) {
    8a14:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    8a18:	4291      	cmp	r1, r2
    8a1a:	d003      	beq.n	8a24 <att_process+0x1e>
	if (!node) {
    8a1c:	b109      	cbz	r1, 8a22 <att_process+0x1c>
	att_send_req(att, ATT_REQ(node));
    8a1e:	f7ff ffb5 	bl	898c <att_send_req>
    8a22:	bd08      	pop	{r3, pc}
		list->tail = list->head;
    8a24:	f8c0 30a8 	str.w	r3, [r0, #168]	; 0xa8
    8a28:	e7f8      	b.n	8a1c <att_process+0x16>

00008a2a <att_handle_rsp>:
{
    8a2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8a2e:	b082      	sub	sp, #8
    8a30:	4604      	mov	r4, r0
    8a32:	460e      	mov	r6, r1
    8a34:	4617      	mov	r7, r2
    8a36:	461d      	mov	r5, r3
	k_delayed_work_cancel(&att->timeout_work);
    8a38:	30ac      	adds	r0, #172	; 0xac
    8a3a:	f020 fdc9 	bl	295d0 <k_delayed_work_cancel>
	if (!att->req) {
    8a3e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8a42:	b1e3      	cbz	r3, 8a7e <att_handle_rsp+0x54>
	if (att->req->buf) {
    8a44:	6918      	ldr	r0, [r3, #16]
    8a46:	b128      	cbz	r0, 8a54 <att_handle_rsp+0x2a>
		net_buf_unref(att->req->buf);
    8a48:	f011 fc88 	bl	1a35c <net_buf_unref>
		att->req->buf = NULL;
    8a4c:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8a50:	2200      	movs	r2, #0
    8a52:	611a      	str	r2, [r3, #16]
	func = att->req->func;
    8a54:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8a58:	f8d3 8004 	ldr.w	r8, [r3, #4]
	att->req->func = NULL;
    8a5c:	2200      	movs	r2, #0
    8a5e:	605a      	str	r2, [r3, #4]
	func(att->chan.chan.conn, err, pdu, len, att->req);
    8a60:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8a64:	9300      	str	r3, [sp, #0]
    8a66:	463b      	mov	r3, r7
    8a68:	4632      	mov	r2, r6
    8a6a:	4629      	mov	r1, r5
    8a6c:	6820      	ldr	r0, [r4, #0]
    8a6e:	47c0      	blx	r8
	if (!att->req->func) {
    8a70:	f8d4 00a0 	ldr.w	r0, [r4, #160]	; 0xa0
    8a74:	6843      	ldr	r3, [r0, #4]
    8a76:	b14b      	cbz	r3, 8a8c <att_handle_rsp+0x62>
	att->req = NULL;
    8a78:	2300      	movs	r3, #0
    8a7a:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	att_process(att);
    8a7e:	4620      	mov	r0, r4
    8a80:	f7ff ffc1 	bl	8a06 <att_process>
}
    8a84:	2000      	movs	r0, #0
    8a86:	b002      	add	sp, #8
    8a88:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		att_req_destroy(att->req);
    8a8c:	f7ff fd34 	bl	84f8 <att_req_destroy>
    8a90:	e7f2      	b.n	8a78 <att_handle_rsp+0x4e>

00008a92 <att_confirm>:
{
    8a92:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8a94:	2300      	movs	r3, #0
    8a96:	898a      	ldrh	r2, [r1, #12]
    8a98:	6889      	ldr	r1, [r1, #8]
    8a9a:	f7ff ffc6 	bl	8a2a <att_handle_rsp>
}
    8a9e:	bd08      	pop	{r3, pc}

00008aa0 <att_handle_exec_write_rsp>:
{
    8aa0:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8aa2:	2300      	movs	r3, #0
    8aa4:	898a      	ldrh	r2, [r1, #12]
    8aa6:	6889      	ldr	r1, [r1, #8]
    8aa8:	f7ff ffbf 	bl	8a2a <att_handle_rsp>
}
    8aac:	bd08      	pop	{r3, pc}

00008aae <att_handle_prepare_write_rsp>:
{
    8aae:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8ab0:	2300      	movs	r3, #0
    8ab2:	898a      	ldrh	r2, [r1, #12]
    8ab4:	6889      	ldr	r1, [r1, #8]
    8ab6:	f7ff ffb8 	bl	8a2a <att_handle_rsp>
}
    8aba:	bd08      	pop	{r3, pc}

00008abc <att_handle_write_rsp>:
{
    8abc:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8abe:	2300      	movs	r3, #0
    8ac0:	898a      	ldrh	r2, [r1, #12]
    8ac2:	6889      	ldr	r1, [r1, #8]
    8ac4:	f7ff ffb1 	bl	8a2a <att_handle_rsp>
}
    8ac8:	bd08      	pop	{r3, pc}

00008aca <att_handle_read_mult_rsp>:
{
    8aca:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8acc:	2300      	movs	r3, #0
    8ace:	898a      	ldrh	r2, [r1, #12]
    8ad0:	6889      	ldr	r1, [r1, #8]
    8ad2:	f7ff ffaa 	bl	8a2a <att_handle_rsp>
}
    8ad6:	bd08      	pop	{r3, pc}

00008ad8 <att_handle_read_blob_rsp>:
{
    8ad8:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8ada:	2300      	movs	r3, #0
    8adc:	898a      	ldrh	r2, [r1, #12]
    8ade:	6889      	ldr	r1, [r1, #8]
    8ae0:	f7ff ffa3 	bl	8a2a <att_handle_rsp>
}
    8ae4:	bd08      	pop	{r3, pc}

00008ae6 <att_handle_read_rsp>:
{
    8ae6:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8ae8:	2300      	movs	r3, #0
    8aea:	898a      	ldrh	r2, [r1, #12]
    8aec:	6889      	ldr	r1, [r1, #8]
    8aee:	f7ff ff9c 	bl	8a2a <att_handle_rsp>
}
    8af2:	bd08      	pop	{r3, pc}

00008af4 <att_handle_read_type_rsp>:
{
    8af4:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8af6:	2300      	movs	r3, #0
    8af8:	898a      	ldrh	r2, [r1, #12]
    8afa:	6889      	ldr	r1, [r1, #8]
    8afc:	f7ff ff95 	bl	8a2a <att_handle_rsp>
}
    8b00:	bd08      	pop	{r3, pc}

00008b02 <att_handle_find_type_rsp>:
{
    8b02:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8b04:	2300      	movs	r3, #0
    8b06:	898a      	ldrh	r2, [r1, #12]
    8b08:	6889      	ldr	r1, [r1, #8]
    8b0a:	f7ff ff8e 	bl	8a2a <att_handle_rsp>
}
    8b0e:	bd08      	pop	{r3, pc}

00008b10 <att_handle_find_info_rsp>:
{
    8b10:	b508      	push	{r3, lr}
	return att_handle_rsp(att, buf->data, buf->len, 0);
    8b12:	2300      	movs	r3, #0
    8b14:	898a      	ldrh	r2, [r1, #12]
    8b16:	6889      	ldr	r1, [r1, #8]
    8b18:	f7ff ff87 	bl	8a2a <att_handle_rsp>
}
    8b1c:	bd08      	pop	{r3, pc}

00008b1e <att_mtu_rsp>:
	if (!att) {
    8b1e:	b1b8      	cbz	r0, 8b50 <att_mtu_rsp+0x32>
{
    8b20:	b508      	push	{r3, lr}
    8b22:	460a      	mov	r2, r1
	rsp = (void *)buf->data;
    8b24:	6889      	ldr	r1, [r1, #8]
	mtu = sys_le16_to_cpu(rsp->mtu);
    8b26:	880b      	ldrh	r3, [r1, #0]
	if (mtu < BT_ATT_DEFAULT_LE_MTU) {
    8b28:	2b16      	cmp	r3, #22
    8b2a:	d90b      	bls.n	8b44 <att_mtu_rsp+0x26>
	att->chan.rx.mtu = min(mtu, BT_ATT_MTU);
    8b2c:	2b41      	cmp	r3, #65	; 0x41
    8b2e:	bf28      	it	cs
    8b30:	2341      	movcs	r3, #65	; 0x41
    8b32:	f8a0 3042 	strh.w	r3, [r0, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8b36:	f8a0 3062 	strh.w	r3, [r0, #98]	; 0x62
	return att_handle_rsp(att, rsp, buf->len, 0);
    8b3a:	2300      	movs	r3, #0
    8b3c:	8992      	ldrh	r2, [r2, #12]
    8b3e:	f7ff ff74 	bl	8a2a <att_handle_rsp>
    8b42:	bd08      	pop	{r3, pc}
		return att_handle_rsp(att, NULL, 0, BT_ATT_ERR_INVALID_PDU);
    8b44:	2304      	movs	r3, #4
    8b46:	2200      	movs	r2, #0
    8b48:	4611      	mov	r1, r2
    8b4a:	f7ff ff6e 	bl	8a2a <att_handle_rsp>
    8b4e:	bd08      	pop	{r3, pc}
		return 0;
    8b50:	2000      	movs	r0, #0
    8b52:	4770      	bx	lr

00008b54 <bt_att_encrypt_change>:
{
    8b54:	b570      	push	{r4, r5, r6, lr}
    8b56:	4604      	mov	r4, r0
	struct bt_conn *conn = ch->chan.conn;
    8b58:	6805      	ldr	r5, [r0, #0]
	if (hci_status) {
    8b5a:	b941      	cbnz	r1, 8b6e <bt_att_encrypt_change+0x1a>
	if (conn->sec_level == BT_SECURITY_LOW) {
    8b5c:	7a2b      	ldrb	r3, [r5, #8]
    8b5e:	2b01      	cmp	r3, #1
    8b60:	d004      	beq.n	8b6c <bt_att_encrypt_change+0x18>
	if (!att->req || !att->req->retrying) {
    8b62:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    8b66:	b10b      	cbz	r3, 8b6c <bt_att_encrypt_change+0x18>
    8b68:	7d1b      	ldrb	r3, [r3, #20]
    8b6a:	b933      	cbnz	r3, 8b7a <bt_att_encrypt_change+0x26>
    8b6c:	bd70      	pop	{r4, r5, r6, pc}
		att_handle_rsp(att, NULL, 0, BT_ATT_ERR_AUTHENTICATION);
    8b6e:	2305      	movs	r3, #5
    8b70:	2200      	movs	r2, #0
    8b72:	4611      	mov	r1, r2
    8b74:	f7ff ff59 	bl	8a2a <att_handle_rsp>
		return;
    8b78:	bd70      	pop	{r4, r5, r6, pc}
	k_sem_take(&att->tx_sem, K_FOREVER);
    8b7a:	f100 06d4 	add.w	r6, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    8b7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    8b82:	4630      	mov	r0, r6
    8b84:	f01f ff48 	bl	28a18 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8b88:	6823      	ldr	r3, [r4, #0]
    8b8a:	7b1b      	ldrb	r3, [r3, #12]
    8b8c:	2b03      	cmp	r3, #3
    8b8e:	d012      	beq.n	8bb6 <bt_att_encrypt_change+0x62>
    8b90:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    8b92:	b1eb      	cbz	r3, 8bd0 <bt_att_encrypt_change+0x7c>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, att->req->buf,
    8b94:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8b98:	691e      	ldr	r6, [r3, #16]
    8b9a:	4630      	mov	r0, r6
    8b9c:	f7ff fc08 	bl	83b0 <att_cb>
    8ba0:	4603      	mov	r3, r0
    8ba2:	4632      	mov	r2, r6
    8ba4:	2104      	movs	r1, #4
    8ba6:	4628      	mov	r0, r5
    8ba8:	f7fe fdbb 	bl	7722 <bt_l2cap_send_cb>
	att->req->buf = NULL;
    8bac:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8bb0:	2200      	movs	r2, #0
    8bb2:	611a      	str	r2, [r3, #16]
    8bb4:	e7da      	b.n	8b6c <bt_att_encrypt_change+0x18>
    8bb6:	f3bf 8f5b 	dmb	ish
    8bba:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
    8bbe:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    8bc2:	f013 0f04 	tst.w	r3, #4
    8bc6:	d101      	bne.n	8bcc <bt_att_encrypt_change+0x78>
    8bc8:	2301      	movs	r3, #1
    8bca:	e7e2      	b.n	8b92 <bt_att_encrypt_change+0x3e>
    8bcc:	2300      	movs	r3, #0
    8bce:	e7e0      	b.n	8b92 <bt_att_encrypt_change+0x3e>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    8bd0:	4630      	mov	r0, r6
    8bd2:	f01f ff0e 	bl	289f2 <_impl_k_sem_give>
    8bd6:	bd70      	pop	{r4, r5, r6, pc}

00008bd8 <att_error_rsp>:
{
    8bd8:	b538      	push	{r3, r4, r5, lr}
    8bda:	4604      	mov	r4, r0
	rsp = (void *)buf->data;
    8bdc:	6888      	ldr	r0, [r1, #8]
	if (!att->req) {
    8bde:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8be2:	b1fb      	cbz	r3, 8c24 <att_error_rsp+0x4c>
	if (att->req->buf) {
    8be4:	691a      	ldr	r2, [r3, #16]
    8be6:	b132      	cbz	r2, 8bf6 <att_error_rsp+0x1e>
	buf->data = buf->__buf + state->offset;
    8be8:	f102 0110 	add.w	r1, r2, #16
    8bec:	899d      	ldrh	r5, [r3, #12]
    8bee:	4429      	add	r1, r5
    8bf0:	6091      	str	r1, [r2, #8]
	buf->len = state->len;
    8bf2:	89db      	ldrh	r3, [r3, #14]
    8bf4:	8193      	strh	r3, [r2, #12]
	err = rsp->error;
    8bf6:	78c5      	ldrb	r5, [r0, #3]
	if (att->req->retrying) {
    8bf8:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8bfc:	7d1b      	ldrb	r3, [r3, #20]
    8bfe:	b133      	cbz	r3, 8c0e <att_error_rsp+0x36>
	return att_handle_rsp(att, NULL, 0, err);
    8c00:	462b      	mov	r3, r5
    8c02:	2200      	movs	r2, #0
    8c04:	4611      	mov	r1, r2
    8c06:	4620      	mov	r0, r4
    8c08:	f7ff ff0f 	bl	8a2a <att_handle_rsp>
}
    8c0c:	bd38      	pop	{r3, r4, r5, pc}
	if (!att_change_security(att->chan.chan.conn, err)) {
    8c0e:	4629      	mov	r1, r5
    8c10:	6820      	ldr	r0, [r4, #0]
    8c12:	f7ff fe82 	bl	891a <att_change_security>
    8c16:	2800      	cmp	r0, #0
    8c18:	d1f2      	bne.n	8c00 <att_error_rsp+0x28>
		att->req->retrying = true;
    8c1a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    8c1e:	2201      	movs	r2, #1
    8c20:	751a      	strb	r2, [r3, #20]
		return 0;
    8c22:	bd38      	pop	{r3, r4, r5, pc}
		err = BT_ATT_ERR_UNLIKELY;
    8c24:	250e      	movs	r5, #14
    8c26:	e7eb      	b.n	8c00 <att_error_rsp+0x28>

00008c28 <att_reset>:
{
    8c28:	b5f0      	push	{r4, r5, r6, r7, lr}
    8c2a:	b083      	sub	sp, #12
    8c2c:	4607      	mov	r7, r0
	atomic_set_bit(att->flags, ATT_DISCONNECTED);
    8c2e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    8c32:	f3bf 8f5b 	dmb	ish
    8c36:	e853 2f00 	ldrex	r2, [r3]
    8c3a:	f042 0204 	orr.w	r2, r2, #4
    8c3e:	e843 2100 	strex	r1, r2, [r3]
    8c42:	2900      	cmp	r1, #0
    8c44:	d1f7      	bne.n	8c36 <att_reset+0xe>
    8c46:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < CONFIG_BT_ATT_TX_MAX; i++) {
    8c4a:	2400      	movs	r4, #0
    8c4c:	e004      	b.n	8c58 <att_reset+0x30>
    8c4e:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
    8c52:	f01f fece 	bl	289f2 <_impl_k_sem_give>
    8c56:	3401      	adds	r4, #1
    8c58:	2c01      	cmp	r4, #1
    8c5a:	ddf8      	ble.n	8c4e <att_reset+0x26>
	return list->head;
    8c5c:	f8d7 50a4 	ldr.w	r5, [r7, #164]	; 0xa4
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8c60:	b11d      	cbz	r5, 8c6a <att_reset+0x42>
    8c62:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c64:	b145      	cbz	r5, 8c78 <att_reset+0x50>
	return node->next;
    8c66:	682c      	ldr	r4, [r5, #0]
    8c68:	e006      	b.n	8c78 <att_reset+0x50>
    8c6a:	462c      	mov	r4, r5
    8c6c:	e004      	b.n	8c78 <att_reset+0x50>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c6e:	4623      	mov	r3, r4
    8c70:	e014      	b.n	8c9c <att_reset+0x74>
    8c72:	4623      	mov	r3, r4
    8c74:	4625      	mov	r5, r4
    8c76:	461c      	mov	r4, r3
    8c78:	b1c5      	cbz	r5, 8cac <att_reset+0x84>
		if (req->func) {
    8c7a:	686e      	ldr	r6, [r5, #4]
    8c7c:	b12e      	cbz	r6, 8c8a <att_reset+0x62>
			req->func(NULL, BT_ATT_ERR_UNLIKELY, NULL, 0, req);
    8c7e:	9500      	str	r5, [sp, #0]
    8c80:	2300      	movs	r3, #0
    8c82:	461a      	mov	r2, r3
    8c84:	210e      	movs	r1, #14
    8c86:	4618      	mov	r0, r3
    8c88:	47b0      	blx	r6
		att_req_destroy(req);
    8c8a:	4628      	mov	r0, r5
    8c8c:	f7ff fc34 	bl	84f8 <att_req_destroy>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&att->reqs, req, tmp, node) {
    8c90:	2c00      	cmp	r4, #0
    8c92:	d0ee      	beq.n	8c72 <att_reset+0x4a>
    8c94:	4622      	mov	r2, r4
    8c96:	2c00      	cmp	r4, #0
    8c98:	d0e9      	beq.n	8c6e <att_reset+0x46>
	return node->next;
    8c9a:	6823      	ldr	r3, [r4, #0]
    8c9c:	b113      	cbz	r3, 8ca4 <att_reset+0x7c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8c9e:	b11a      	cbz	r2, 8ca8 <att_reset+0x80>
	return node->next;
    8ca0:	6823      	ldr	r3, [r4, #0]
    8ca2:	e7e7      	b.n	8c74 <att_reset+0x4c>
    8ca4:	2300      	movs	r3, #0
    8ca6:	e7e5      	b.n	8c74 <att_reset+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    8ca8:	2300      	movs	r3, #0
    8caa:	e7e3      	b.n	8c74 <att_reset+0x4c>
	list->head = NULL;
    8cac:	2300      	movs	r3, #0
    8cae:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
	list->tail = NULL;
    8cb2:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	if (!att->req) {
    8cb6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
    8cba:	b12b      	cbz	r3, 8cc8 <att_reset+0xa0>
	att_handle_rsp(att, NULL, 0, BT_ATT_ERR_UNLIKELY);
    8cbc:	230e      	movs	r3, #14
    8cbe:	2200      	movs	r2, #0
    8cc0:	4611      	mov	r1, r2
    8cc2:	4638      	mov	r0, r7
    8cc4:	f7ff feb1 	bl	8a2a <att_handle_rsp>
}
    8cc8:	b003      	add	sp, #12
    8cca:	bdf0      	pop	{r4, r5, r6, r7, pc}

00008ccc <bt_att_disconnected>:
{
    8ccc:	b510      	push	{r4, lr}
    8cce:	4604      	mov	r4, r0
	att_reset(att);
    8cd0:	f7ff ffaa 	bl	8c28 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8cd4:	6820      	ldr	r0, [r4, #0]
    8cd6:	f001 f93f 	bl	9f58 <bt_gatt_disconnected>
	memset(att, 0, sizeof(*att));
    8cda:	22ec      	movs	r2, #236	; 0xec
    8cdc:	2100      	movs	r1, #0
    8cde:	4620      	mov	r0, r4
    8ce0:	f020 fe5a 	bl	29998 <memset>
    8ce4:	bd10      	pop	{r4, pc}

00008ce6 <att_timeout>:
{
    8ce6:	b510      	push	{r4, lr}
    8ce8:	4604      	mov	r4, r0
	att_reset(att);
    8cea:	38ac      	subs	r0, #172	; 0xac
    8cec:	f7ff ff9c 	bl	8c28 <att_reset>
	bt_gatt_disconnected(ch->chan.conn);
    8cf0:	f854 0cac 	ldr.w	r0, [r4, #-172]
    8cf4:	f001 f930 	bl	9f58 <bt_gatt_disconnected>
	ch->chan.conn = NULL;
    8cf8:	2300      	movs	r3, #0
    8cfa:	f844 3cac 	str.w	r3, [r4, #-172]
    8cfe:	bd10      	pop	{r4, pc}

00008d00 <bt_att_create_pdu>:
{
    8d00:	b538      	push	{r3, r4, r5, lr}
    8d02:	460d      	mov	r5, r1
    8d04:	4614      	mov	r4, r2
	att = att_chan_get(conn);
    8d06:	f7ff fbab 	bl	8460 <att_chan_get>
	if (!att) {
    8d0a:	b180      	cbz	r0, 8d2e <bt_att_create_pdu+0x2e>
	if (len + sizeof(op) > att->chan.tx.mtu) {
    8d0c:	3401      	adds	r4, #1
    8d0e:	f8b0 3062 	ldrh.w	r3, [r0, #98]	; 0x62
    8d12:	429c      	cmp	r4, r3
    8d14:	d80d      	bhi.n	8d32 <bt_att_create_pdu+0x32>
	buf = bt_l2cap_create_pdu(NULL, 0);
    8d16:	2100      	movs	r1, #0
    8d18:	4608      	mov	r0, r1
    8d1a:	f7fe fc6a 	bl	75f2 <bt_l2cap_create_pdu>
    8d1e:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    8d20:	2101      	movs	r1, #1
    8d22:	3008      	adds	r0, #8
    8d24:	f011 fb66 	bl	1a3f4 <net_buf_simple_add>
	hdr->code = op;
    8d28:	7005      	strb	r5, [r0, #0]
}
    8d2a:	4620      	mov	r0, r4
    8d2c:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
    8d2e:	2400      	movs	r4, #0
    8d30:	e7fb      	b.n	8d2a <bt_att_create_pdu+0x2a>
		return NULL;
    8d32:	2400      	movs	r4, #0
    8d34:	e7f9      	b.n	8d2a <bt_att_create_pdu+0x2a>
	...

00008d38 <att_indicate>:
{
    8d38:	b510      	push	{r4, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8d3a:	6804      	ldr	r4, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8d3c:	f101 0008 	add.w	r0, r1, #8
    8d40:	f011 fbb5 	bl	1a4ae <net_buf_simple_pull_le16>
	buf = bt_att_create_pdu(conn, BT_ATT_OP_CONFIRM, 0);
    8d44:	2200      	movs	r2, #0
    8d46:	211e      	movs	r1, #30
    8d48:	4620      	mov	r0, r4
    8d4a:	f7ff ffd9 	bl	8d00 <bt_att_create_pdu>
	if (!buf) {
    8d4e:	b128      	cbz	r0, 8d5c <att_indicate+0x24>
    8d50:	4602      	mov	r2, r0
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cfm_sent);
    8d52:	4b03      	ldr	r3, [pc, #12]	; (8d60 <att_indicate+0x28>)
    8d54:	2104      	movs	r1, #4
    8d56:	4620      	mov	r0, r4
    8d58:	f7fe fce3 	bl	7722 <bt_l2cap_send_cb>
}
    8d5c:	2000      	movs	r0, #0
    8d5e:	bd10      	pop	{r4, pc}
    8d60:	0000855b 	.word	0x0000855b

00008d64 <att_mtu_req>:
{
    8d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct bt_conn *conn = att->chan.chan.conn;
    8d68:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    8d6a:	688b      	ldr	r3, [r1, #8]
	mtu_client = sys_le16_to_cpu(req->mtu);
    8d6c:	881d      	ldrh	r5, [r3, #0]
	if (mtu_client < BT_ATT_DEFAULT_LE_MTU) {
    8d6e:	2d16      	cmp	r5, #22
    8d70:	d802      	bhi.n	8d78 <att_mtu_req+0x14>
		return BT_ATT_ERR_INVALID_PDU;
    8d72:	2004      	movs	r0, #4
    8d74:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8d78:	4604      	mov	r4, r0
	pdu = bt_att_create_pdu(conn, BT_ATT_OP_MTU_RSP, sizeof(*rsp));
    8d7a:	2202      	movs	r2, #2
    8d7c:	2103      	movs	r1, #3
    8d7e:	4638      	mov	r0, r7
    8d80:	f7ff ffbe 	bl	8d00 <bt_att_create_pdu>
	if (!pdu) {
    8d84:	4680      	mov	r8, r0
    8d86:	b1b8      	cbz	r0, 8db8 <att_mtu_req+0x54>
	rsp = net_buf_add(pdu, sizeof(*rsp));
    8d88:	2102      	movs	r1, #2
    8d8a:	3008      	adds	r0, #8
    8d8c:	f011 fb32 	bl	1a3f4 <net_buf_simple_add>
	rsp->mtu = sys_cpu_to_le16(mtu_server);
    8d90:	2600      	movs	r6, #0
    8d92:	2341      	movs	r3, #65	; 0x41
    8d94:	7003      	strb	r3, [r0, #0]
    8d96:	7046      	strb	r6, [r0, #1]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, pdu, att_rsp_sent);
    8d98:	4b09      	ldr	r3, [pc, #36]	; (8dc0 <att_mtu_req+0x5c>)
    8d9a:	4642      	mov	r2, r8
    8d9c:	2104      	movs	r1, #4
    8d9e:	4638      	mov	r0, r7
    8da0:	f7fe fcbf 	bl	7722 <bt_l2cap_send_cb>
	att->chan.rx.mtu = min(mtu_client, mtu_server);
    8da4:	2d41      	cmp	r5, #65	; 0x41
    8da6:	bf28      	it	cs
    8da8:	2541      	movcs	r5, #65	; 0x41
    8daa:	f8a4 5042 	strh.w	r5, [r4, #66]	; 0x42
	att->chan.tx.mtu = att->chan.rx.mtu;
    8dae:	f8a4 5062 	strh.w	r5, [r4, #98]	; 0x62
	return 0;
    8db2:	4630      	mov	r0, r6
    8db4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return BT_ATT_ERR_UNLIKELY;
    8db8:	200e      	movs	r0, #14
}
    8dba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8dbe:	bf00      	nop
    8dc0:	00008523 	.word	0x00008523

00008dc4 <send_err_rsp>:
	if (!req) {
    8dc4:	b901      	cbnz	r1, 8dc8 <send_err_rsp+0x4>
    8dc6:	4770      	bx	lr
{
    8dc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8dcc:	460f      	mov	r7, r1
    8dce:	461d      	mov	r5, r3
    8dd0:	4616      	mov	r6, r2
    8dd2:	4604      	mov	r4, r0
	buf = bt_att_create_pdu(conn, BT_ATT_OP_ERROR_RSP, sizeof(*rsp));
    8dd4:	2204      	movs	r2, #4
    8dd6:	2101      	movs	r1, #1
    8dd8:	f7ff ff92 	bl	8d00 <bt_att_create_pdu>
	if (!buf) {
    8ddc:	4680      	mov	r8, r0
    8dde:	b168      	cbz	r0, 8dfc <send_err_rsp+0x38>
	rsp = net_buf_add(buf, sizeof(*rsp));
    8de0:	2104      	movs	r1, #4
    8de2:	3008      	adds	r0, #8
    8de4:	f011 fb06 	bl	1a3f4 <net_buf_simple_add>
	rsp->request = req;
    8de8:	7007      	strb	r7, [r0, #0]
	rsp->handle = sys_cpu_to_le16(handle);
    8dea:	f8a0 6001 	strh.w	r6, [r0, #1]
	rsp->error = err;
    8dee:	70c5      	strb	r5, [r0, #3]
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_rsp_sent);
    8df0:	4b03      	ldr	r3, [pc, #12]	; (8e00 <send_err_rsp+0x3c>)
    8df2:	4642      	mov	r2, r8
    8df4:	2104      	movs	r1, #4
    8df6:	4620      	mov	r0, r4
    8df8:	f7fe fc93 	bl	7722 <bt_l2cap_send_cb>
    8dfc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8e00:	00008523 	.word	0x00008523

00008e04 <bt_att_recv>:
{
    8e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att_hdr *hdr = (void *)buf->data;
    8e06:	688d      	ldr	r5, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    8e08:	898b      	ldrh	r3, [r1, #12]
    8e0a:	b903      	cbnz	r3, 8e0e <bt_att_recv+0xa>
    8e0c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    8e0e:	460e      	mov	r6, r1
    8e10:	4607      	mov	r7, r0
	net_buf_pull(buf, sizeof(*hdr));
    8e12:	2101      	movs	r1, #1
    8e14:	f106 0008 	add.w	r0, r6, #8
    8e18:	f011 fb39 	bl	1a48e <net_buf_simple_pull>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8e1c:	2300      	movs	r3, #0
    8e1e:	2b1a      	cmp	r3, #26
    8e20:	d822      	bhi.n	8e68 <bt_att_recv+0x64>
		if (hdr->code == handlers[i].op) {
    8e22:	782c      	ldrb	r4, [r5, #0]
    8e24:	4a2c      	ldr	r2, [pc, #176]	; (8ed8 <bt_att_recv+0xd4>)
    8e26:	f812 2033 	ldrb.w	r2, [r2, r3, lsl #3]
    8e2a:	4294      	cmp	r4, r2
    8e2c:	d001      	beq.n	8e32 <bt_att_recv+0x2e>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8e2e:	3301      	adds	r3, #1
    8e30:	e7f5      	b.n	8e1e <bt_att_recv+0x1a>
			handler = &handlers[i];
    8e32:	4c29      	ldr	r4, [pc, #164]	; (8ed8 <bt_att_recv+0xd4>)
    8e34:	eb04 04c3 	add.w	r4, r4, r3, lsl #3
	if (!handler) {
    8e38:	b1c4      	cbz	r4, 8e6c <bt_att_recv+0x68>
		if (handler->type == ATT_REQUEST &&
    8e3a:	78a3      	ldrb	r3, [r4, #2]
    8e3c:	2b01      	cmp	r3, #1
    8e3e:	d022      	beq.n	8e86 <bt_att_recv+0x82>
		} else if (handler->type == ATT_INDICATION &&
    8e40:	78a3      	ldrb	r3, [r4, #2]
    8e42:	2b05      	cmp	r3, #5
    8e44:	d031      	beq.n	8eaa <bt_att_recv+0xa6>
	if (buf->len < handler->expect_len) {
    8e46:	89b2      	ldrh	r2, [r6, #12]
    8e48:	7863      	ldrb	r3, [r4, #1]
    8e4a:	429a      	cmp	r2, r3
    8e4c:	d23f      	bcs.n	8ece <bt_att_recv+0xca>
		err = BT_ATT_ERR_INVALID_PDU;
    8e4e:	2004      	movs	r0, #4
	if (handler->type == ATT_REQUEST && err) {
    8e50:	78a2      	ldrb	r2, [r4, #2]
    8e52:	2a01      	cmp	r2, #1
    8e54:	d1da      	bne.n	8e0c <bt_att_recv+0x8>
    8e56:	2800      	cmp	r0, #0
    8e58:	d0d8      	beq.n	8e0c <bt_att_recv+0x8>
		send_err_rsp(chan->conn, hdr->code, 0, err);
    8e5a:	4603      	mov	r3, r0
    8e5c:	2200      	movs	r2, #0
    8e5e:	7829      	ldrb	r1, [r5, #0]
    8e60:	6838      	ldr	r0, [r7, #0]
    8e62:	f7ff ffaf 	bl	8dc4 <send_err_rsp>
    8e66:	e7d1      	b.n	8e0c <bt_att_recv+0x8>
	for (i = 0, handler = NULL; i < ARRAY_SIZE(handlers); i++) {
    8e68:	2400      	movs	r4, #0
    8e6a:	e7e5      	b.n	8e38 <bt_att_recv+0x34>
		if (att_op_get_type(hdr->code) != ATT_COMMAND) {
    8e6c:	782c      	ldrb	r4, [r5, #0]
    8e6e:	4620      	mov	r0, r4
    8e70:	f7ff fa86 	bl	8380 <att_op_get_type>
    8e74:	2800      	cmp	r0, #0
    8e76:	d0c9      	beq.n	8e0c <bt_att_recv+0x8>
			send_err_rsp(chan->conn, hdr->code, 0,
    8e78:	2306      	movs	r3, #6
    8e7a:	2200      	movs	r2, #0
    8e7c:	4621      	mov	r1, r4
    8e7e:	6838      	ldr	r0, [r7, #0]
    8e80:	f7ff ffa0 	bl	8dc4 <send_err_rsp>
    8e84:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		    atomic_test_and_set_bit(att->flags, ATT_PENDING_RSP)) {
    8e86:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8e8a:	f3bf 8f5b 	dmb	ish
    8e8e:	e853 2f00 	ldrex	r2, [r3]
    8e92:	f042 0101 	orr.w	r1, r2, #1
    8e96:	e843 1000 	strex	r0, r1, [r3]
    8e9a:	2800      	cmp	r0, #0
    8e9c:	d1f7      	bne.n	8e8e <bt_att_recv+0x8a>
    8e9e:	f3bf 8f5b 	dmb	ish
		if (handler->type == ATT_REQUEST &&
    8ea2:	f012 0f01 	tst.w	r2, #1
    8ea6:	d0cb      	beq.n	8e40 <bt_att_recv+0x3c>
    8ea8:	e7b0      	b.n	8e0c <bt_att_recv+0x8>
			   atomic_test_and_set_bit(att->flags,
    8eaa:	f107 039c 	add.w	r3, r7, #156	; 0x9c
    8eae:	f3bf 8f5b 	dmb	ish
    8eb2:	e853 2f00 	ldrex	r2, [r3]
    8eb6:	f042 0102 	orr.w	r1, r2, #2
    8eba:	e843 1000 	strex	r0, r1, [r3]
    8ebe:	2800      	cmp	r0, #0
    8ec0:	d1f7      	bne.n	8eb2 <bt_att_recv+0xae>
    8ec2:	f3bf 8f5b 	dmb	ish
		} else if (handler->type == ATT_INDICATION &&
    8ec6:	f012 0f02 	tst.w	r2, #2
    8eca:	d0bc      	beq.n	8e46 <bt_att_recv+0x42>
    8ecc:	e79e      	b.n	8e0c <bt_att_recv+0x8>
		err = handler->func(att, buf);
    8ece:	6863      	ldr	r3, [r4, #4]
    8ed0:	4631      	mov	r1, r6
    8ed2:	4638      	mov	r0, r7
    8ed4:	4798      	blx	r3
    8ed6:	e7bb      	b.n	8e50 <bt_att_recv+0x4c>
    8ed8:	0002d464 	.word	0x0002d464

00008edc <att_write_rsp>:
{
    8edc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    8ee0:	b086      	sub	sp, #24
	if (!handle) {
    8ee2:	b923      	cbnz	r3, 8eee <att_write_rsp+0x12>
		return BT_ATT_ERR_INVALID_HANDLE;
    8ee4:	2401      	movs	r4, #1
}
    8ee6:	4620      	mov	r0, r4
    8ee8:	b006      	add	sp, #24
    8eea:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    8eee:	4698      	mov	r8, r3
    8ef0:	4617      	mov	r7, r2
    8ef2:	460e      	mov	r6, r1
    8ef4:	4605      	mov	r5, r0
	memset(&data, 0, sizeof(data));
    8ef6:	2218      	movs	r2, #24
    8ef8:	2100      	movs	r1, #0
    8efa:	4668      	mov	r0, sp
    8efc:	f020 fd4c 	bl	29998 <memset>
	if (rsp) {
    8f00:	b137      	cbz	r7, 8f10 <att_write_rsp+0x34>
		data.buf = bt_att_create_pdu(conn, rsp, 0);
    8f02:	2200      	movs	r2, #0
    8f04:	4639      	mov	r1, r7
    8f06:	4628      	mov	r0, r5
    8f08:	f7ff fefa 	bl	8d00 <bt_att_create_pdu>
    8f0c:	9001      	str	r0, [sp, #4]
		if (!data.buf) {
    8f0e:	b3a0      	cbz	r0, 8f7a <att_write_rsp+0x9e>
	data.conn = conn;
    8f10:	9500      	str	r5, [sp, #0]
	data.op = op;
    8f12:	f88d 6008 	strb.w	r6, [sp, #8]
	data.offset = offset;
    8f16:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    8f1a:	f8ad 3012 	strh.w	r3, [sp, #18]
	data.value = value;
    8f1e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
    8f20:	9303      	str	r3, [sp, #12]
	data.len = len;
    8f22:	f89d 3038 	ldrb.w	r3, [sp, #56]	; 0x38
    8f26:	f88d 3010 	strb.w	r3, [sp, #16]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    8f2a:	2301      	movs	r3, #1
    8f2c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, write_cb, &data);
    8f30:	466b      	mov	r3, sp
    8f32:	4a13      	ldr	r2, [pc, #76]	; (8f80 <att_write_rsp+0xa4>)
    8f34:	4641      	mov	r1, r8
    8f36:	4640      	mov	r0, r8
    8f38:	f000 ff26 	bl	9d88 <bt_gatt_foreach_attr>
	if (data.err) {
    8f3c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8f40:	b194      	cbz	r4, 8f68 <att_write_rsp+0x8c>
		if (rsp) {
    8f42:	b91f      	cbnz	r7, 8f4c <att_write_rsp+0x70>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8f44:	2e18      	cmp	r6, #24
    8f46:	d00c      	beq.n	8f62 <att_write_rsp+0x86>
    8f48:	2400      	movs	r4, #0
    8f4a:	e7cc      	b.n	8ee6 <att_write_rsp+0xa>
			net_buf_unref(data.buf);
    8f4c:	9801      	ldr	r0, [sp, #4]
    8f4e:	f011 fa05 	bl	1a35c <net_buf_unref>
			send_err_rsp(conn, op, handle, data.err);
    8f52:	f89d 3014 	ldrb.w	r3, [sp, #20]
    8f56:	4642      	mov	r2, r8
    8f58:	4631      	mov	r1, r6
    8f5a:	4628      	mov	r0, r5
    8f5c:	f7ff ff32 	bl	8dc4 <send_err_rsp>
    8f60:	e7f0      	b.n	8f44 <att_write_rsp+0x68>
		return op == BT_ATT_OP_EXEC_WRITE_REQ ? data.err : 0;
    8f62:	f89d 4014 	ldrb.w	r4, [sp, #20]
    8f66:	e7be      	b.n	8ee6 <att_write_rsp+0xa>
	if (data.buf) {
    8f68:	9a01      	ldr	r2, [sp, #4]
    8f6a:	2a00      	cmp	r2, #0
    8f6c:	d0bb      	beq.n	8ee6 <att_write_rsp+0xa>
		bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf,
    8f6e:	4b05      	ldr	r3, [pc, #20]	; (8f84 <att_write_rsp+0xa8>)
    8f70:	2104      	movs	r1, #4
    8f72:	4628      	mov	r0, r5
    8f74:	f7fe fbd5 	bl	7722 <bt_l2cap_send_cb>
    8f78:	e7b5      	b.n	8ee6 <att_write_rsp+0xa>
			return BT_ATT_ERR_UNLIKELY;
    8f7a:	240e      	movs	r4, #14
    8f7c:	e7b3      	b.n	8ee6 <att_write_rsp+0xa>
    8f7e:	bf00      	nop
    8f80:	00008323 	.word	0x00008323
    8f84:	00008523 	.word	0x00008523

00008f88 <att_signed_write_cmd>:
{
    8f88:	b5f0      	push	{r4, r5, r6, r7, lr}
    8f8a:	b085      	sub	sp, #20
    8f8c:	460d      	mov	r5, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8f8e:	6806      	ldr	r6, [r0, #0]
	req = (void *)buf->data;
    8f90:	460c      	mov	r4, r1
    8f92:	f854 3f08 	ldr.w	r3, [r4, #8]!
	handle = sys_le16_to_cpu(req->handle);
    8f96:	881f      	ldrh	r7, [r3, #0]
	net_buf_push(buf, sizeof(struct bt_att_hdr));
    8f98:	2101      	movs	r1, #1
    8f9a:	4620      	mov	r0, r4
    8f9c:	f011 fa61 	bl	1a462 <net_buf_simple_push>
	err = bt_smp_sign_verify(conn, buf);
    8fa0:	4629      	mov	r1, r5
    8fa2:	4630      	mov	r0, r6
    8fa4:	f003 faf2 	bl	c58c <bt_smp_sign_verify>
	if (err) {
    8fa8:	b110      	cbz	r0, 8fb0 <att_signed_write_cmd+0x28>
		return 0;
    8faa:	2000      	movs	r0, #0
}
    8fac:	b005      	add	sp, #20
    8fae:	bdf0      	pop	{r4, r5, r6, r7, pc}
	net_buf_pull(buf, sizeof(struct bt_att_hdr));
    8fb0:	2101      	movs	r1, #1
    8fb2:	4620      	mov	r0, r4
    8fb4:	f011 fa6b 	bl	1a48e <net_buf_simple_pull>
	net_buf_pull(buf, sizeof(*req));
    8fb8:	2102      	movs	r1, #2
    8fba:	4620      	mov	r0, r4
    8fbc:	f011 fa67 	bl	1a48e <net_buf_simple_pull>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8fc0:	68aa      	ldr	r2, [r5, #8]
			     buf->len - sizeof(struct bt_att_signature));
    8fc2:	89ab      	ldrh	r3, [r5, #12]
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data,
    8fc4:	3b0c      	subs	r3, #12
    8fc6:	b2db      	uxtb	r3, r3
    8fc8:	9302      	str	r3, [sp, #8]
    8fca:	9201      	str	r2, [sp, #4]
    8fcc:	2100      	movs	r1, #0
    8fce:	9100      	str	r1, [sp, #0]
    8fd0:	463b      	mov	r3, r7
    8fd2:	460a      	mov	r2, r1
    8fd4:	4630      	mov	r0, r6
    8fd6:	f7ff ff81 	bl	8edc <att_write_rsp>
    8fda:	e7e7      	b.n	8fac <att_signed_write_cmd+0x24>

00008fdc <att_write_cmd>:
{
    8fdc:	b530      	push	{r4, r5, lr}
    8fde:	b085      	sub	sp, #20
    8fe0:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    8fe2:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    8fe4:	f101 0008 	add.w	r0, r1, #8
    8fe8:	f011 fa61 	bl	1a4ae <net_buf_simple_pull_le16>
	return att_write_rsp(conn, 0, 0, handle, 0, buf->data, buf->len);
    8fec:	68a3      	ldr	r3, [r4, #8]
    8fee:	7b22      	ldrb	r2, [r4, #12]
    8ff0:	9202      	str	r2, [sp, #8]
    8ff2:	9301      	str	r3, [sp, #4]
    8ff4:	2100      	movs	r1, #0
    8ff6:	9100      	str	r1, [sp, #0]
    8ff8:	4603      	mov	r3, r0
    8ffa:	460a      	mov	r2, r1
    8ffc:	4628      	mov	r0, r5
    8ffe:	f7ff ff6d 	bl	8edc <att_write_rsp>
}
    9002:	b005      	add	sp, #20
    9004:	bd30      	pop	{r4, r5, pc}

00009006 <att_write_req>:
{
    9006:	b530      	push	{r4, r5, lr}
    9008:	b085      	sub	sp, #20
    900a:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    900c:	6805      	ldr	r5, [r0, #0]
	handle = net_buf_pull_le16(buf);
    900e:	f101 0008 	add.w	r0, r1, #8
    9012:	f011 fa4c 	bl	1a4ae <net_buf_simple_pull_le16>
			     handle, 0, buf->data, buf->len);
    9016:	68a3      	ldr	r3, [r4, #8]
	return att_write_rsp(conn, BT_ATT_OP_WRITE_REQ, BT_ATT_OP_WRITE_RSP,
    9018:	7b22      	ldrb	r2, [r4, #12]
    901a:	9202      	str	r2, [sp, #8]
    901c:	9301      	str	r3, [sp, #4]
    901e:	2300      	movs	r3, #0
    9020:	9300      	str	r3, [sp, #0]
    9022:	4603      	mov	r3, r0
    9024:	2213      	movs	r2, #19
    9026:	2112      	movs	r1, #18
    9028:	4628      	mov	r0, r5
    902a:	f7ff ff57 	bl	8edc <att_write_rsp>
}
    902e:	b005      	add	sp, #20
    9030:	bd30      	pop	{r4, r5, pc}
	...

00009034 <att_read_group_rsp>:
{
    9034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9038:	b086      	sub	sp, #24
    903a:	4604      	mov	r4, r0
    903c:	4688      	mov	r8, r1
    903e:	4616      	mov	r6, r2
    9040:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    9042:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    9044:	2214      	movs	r2, #20
    9046:	2100      	movs	r1, #0
    9048:	a801      	add	r0, sp, #4
    904a:	f020 fca5 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_GROUP_RSP,
    904e:	2201      	movs	r2, #1
    9050:	2111      	movs	r1, #17
    9052:	4628      	mov	r0, r5
    9054:	f7ff fe54 	bl	8d00 <bt_att_create_pdu>
    9058:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    905a:	b328      	cbz	r0, 90a8 <att_read_group_rsp+0x74>
	data.att = att;
    905c:	9401      	str	r4, [sp, #4]
	data.uuid = uuid;
    905e:	f8cd 8008 	str.w	r8, [sp, #8]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    9062:	2101      	movs	r1, #1
    9064:	3008      	adds	r0, #8
    9066:	f011 f9c5 	bl	1a3f4 <net_buf_simple_add>
    906a:	9004      	str	r0, [sp, #16]
	data.rsp->len = 0;
    906c:	2300      	movs	r3, #0
    906e:	7003      	strb	r3, [r0, #0]
	data.group = NULL;
    9070:	9305      	str	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_group_cb, &data);
    9072:	ab01      	add	r3, sp, #4
    9074:	4a0f      	ldr	r2, [pc, #60]	; (90b4 <att_read_group_rsp+0x80>)
    9076:	4639      	mov	r1, r7
    9078:	4630      	mov	r0, r6
    907a:	f000 fe85 	bl	9d88 <bt_gatt_foreach_attr>
	if (!data.rsp->len) {
    907e:	9b04      	ldr	r3, [sp, #16]
    9080:	781c      	ldrb	r4, [r3, #0]
    9082:	b13c      	cbz	r4, 9094 <att_read_group_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9084:	4b0c      	ldr	r3, [pc, #48]	; (90b8 <att_read_group_rsp+0x84>)
    9086:	9a03      	ldr	r2, [sp, #12]
    9088:	2104      	movs	r1, #4
    908a:	4628      	mov	r0, r5
    908c:	f7fe fb49 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    9090:	2400      	movs	r4, #0
    9092:	e00a      	b.n	90aa <att_read_group_rsp+0x76>
		net_buf_unref(data.buf);
    9094:	9803      	ldr	r0, [sp, #12]
    9096:	f011 f961 	bl	1a35c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    909a:	230a      	movs	r3, #10
    909c:	4632      	mov	r2, r6
    909e:	2110      	movs	r1, #16
    90a0:	4628      	mov	r0, r5
    90a2:	f7ff fe8f 	bl	8dc4 <send_err_rsp>
		return 0;
    90a6:	e000      	b.n	90aa <att_read_group_rsp+0x76>
		return BT_ATT_ERR_UNLIKELY;
    90a8:	240e      	movs	r4, #14
}
    90aa:	4620      	mov	r0, r4
    90ac:	b006      	add	sp, #24
    90ae:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90b2:	bf00      	nop
    90b4:	000085bd 	.word	0x000085bd
    90b8:	00008523 	.word	0x00008523

000090bc <att_read_group_req>:
{
    90bc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    90c0:	b088      	sub	sp, #32
	struct bt_conn *conn = att->chan.chan.conn;
    90c2:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    90c4:	898b      	ldrh	r3, [r1, #12]
    90c6:	2b06      	cmp	r3, #6
    90c8:	d005      	beq.n	90d6 <att_read_group_req+0x1a>
    90ca:	2b14      	cmp	r3, #20
    90cc:	d003      	beq.n	90d6 <att_read_group_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    90ce:	2004      	movs	r0, #4
}
    90d0:	b008      	add	sp, #32
    90d2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    90d6:	460c      	mov	r4, r1
    90d8:	4605      	mov	r5, r0
	req = (void *)buf->data;
    90da:	4608      	mov	r0, r1
    90dc:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    90e0:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    90e2:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    90e6:	2104      	movs	r1, #4
    90e8:	f011 f9d1 	bl	1a48e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    90ec:	4621      	mov	r1, r4
    90ee:	a801      	add	r0, sp, #4
    90f0:	f7ff fb3c 	bl	876c <uuid_create>
    90f4:	b908      	cbnz	r0, 90fa <att_read_group_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    90f6:	200e      	movs	r0, #14
    90f8:	e7ea      	b.n	90d0 <att_read_group_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    90fa:	f10d 0216 	add.w	r2, sp, #22
    90fe:	4641      	mov	r1, r8
    9100:	4638      	mov	r0, r7
    9102:	f7ff f8c4 	bl	828e <range_is_valid>
    9106:	b1f0      	cbz	r0, 9146 <att_read_group_req+0x8a>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9108:	2300      	movs	r3, #0
    910a:	f88d 3018 	strb.w	r3, [sp, #24]
    910e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
    9112:	f8ad 301a 	strh.w	r3, [sp, #26]
    9116:	a906      	add	r1, sp, #24
    9118:	a801      	add	r0, sp, #4
    911a:	f7fa fdee 	bl	3cfa <bt_uuid_cmp>
    911e:	b158      	cbz	r0, 9138 <att_read_group_req+0x7c>
	    bt_uuid_cmp(&u.uuid, BT_UUID_GATT_SECONDARY)) {
    9120:	2300      	movs	r3, #0
    9122:	f88d 301c 	strb.w	r3, [sp, #28]
    9126:	f642 0301 	movw	r3, #10241	; 0x2801
    912a:	f8ad 301e 	strh.w	r3, [sp, #30]
    912e:	a907      	add	r1, sp, #28
    9130:	a801      	add	r0, sp, #4
    9132:	f7fa fde2 	bl	3cfa <bt_uuid_cmp>
	if (bt_uuid_cmp(&u.uuid, BT_UUID_GATT_PRIMARY) &&
    9136:	b978      	cbnz	r0, 9158 <att_read_group_req+0x9c>
	return att_read_group_rsp(att, &u.uuid, start_handle, end_handle);
    9138:	4643      	mov	r3, r8
    913a:	463a      	mov	r2, r7
    913c:	a901      	add	r1, sp, #4
    913e:	4628      	mov	r0, r5
    9140:	f7ff ff78 	bl	9034 <att_read_group_rsp>
    9144:	e7c4      	b.n	90d0 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, err_handle,
    9146:	2301      	movs	r3, #1
    9148:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    914c:	2110      	movs	r1, #16
    914e:	4630      	mov	r0, r6
    9150:	f7ff fe38 	bl	8dc4 <send_err_rsp>
		return 0;
    9154:	2000      	movs	r0, #0
    9156:	e7bb      	b.n	90d0 <att_read_group_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_GROUP_REQ, start_handle,
    9158:	2310      	movs	r3, #16
    915a:	463a      	mov	r2, r7
    915c:	4619      	mov	r1, r3
    915e:	4630      	mov	r0, r6
    9160:	f7ff fe30 	bl	8dc4 <send_err_rsp>
		return 0;
    9164:	2000      	movs	r0, #0
    9166:	e7b3      	b.n	90d0 <att_read_group_req+0x14>

00009168 <att_read_mult_req>:
{
    9168:	b570      	push	{r4, r5, r6, lr}
    916a:	b086      	sub	sp, #24
    916c:	4605      	mov	r5, r0
    916e:	460c      	mov	r4, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9170:	6806      	ldr	r6, [r0, #0]
	memset(&data, 0, sizeof(data));
    9172:	2214      	movs	r2, #20
    9174:	2100      	movs	r1, #0
    9176:	a801      	add	r0, sp, #4
    9178:	f020 fc0e 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_MULT_RSP, 0);
    917c:	2200      	movs	r2, #0
    917e:	210f      	movs	r1, #15
    9180:	4630      	mov	r0, r6
    9182:	f7ff fdbd 	bl	8d00 <bt_att_create_pdu>
    9186:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    9188:	b348      	cbz	r0, 91de <att_read_mult_req+0x76>
	data.att = att;
    918a:	9501      	str	r5, [sp, #4]
	while (buf->len >= sizeof(u16_t)) {
    918c:	89a3      	ldrh	r3, [r4, #12]
    918e:	2b01      	cmp	r3, #1
    9190:	d91c      	bls.n	91cc <att_read_mult_req+0x64>
		handle = net_buf_pull_le16(buf);
    9192:	f104 0008 	add.w	r0, r4, #8
    9196:	f011 f98a 	bl	1a4ae <net_buf_simple_pull_le16>
    919a:	4605      	mov	r5, r0
		data.err = BT_ATT_ERR_INVALID_HANDLE;
    919c:	2301      	movs	r3, #1
    919e:	f88d 3014 	strb.w	r3, [sp, #20]
		bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    91a2:	ab01      	add	r3, sp, #4
    91a4:	4a0f      	ldr	r2, [pc, #60]	; (91e4 <att_read_mult_req+0x7c>)
    91a6:	4601      	mov	r1, r0
    91a8:	f000 fdee 	bl	9d88 <bt_gatt_foreach_attr>
		if (data.err) {
    91ac:	f89d 3014 	ldrb.w	r3, [sp, #20]
    91b0:	2b00      	cmp	r3, #0
    91b2:	d0eb      	beq.n	918c <att_read_mult_req+0x24>
			net_buf_unref(data.buf);
    91b4:	9803      	ldr	r0, [sp, #12]
    91b6:	f011 f8d1 	bl	1a35c <net_buf_unref>
			send_err_rsp(conn, BT_ATT_OP_READ_MULT_REQ, handle,
    91ba:	f89d 3014 	ldrb.w	r3, [sp, #20]
    91be:	462a      	mov	r2, r5
    91c0:	210e      	movs	r1, #14
    91c2:	4630      	mov	r0, r6
    91c4:	f7ff fdfe 	bl	8dc4 <send_err_rsp>
			return 0;
    91c8:	2000      	movs	r0, #0
    91ca:	e006      	b.n	91da <att_read_mult_req+0x72>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    91cc:	4b06      	ldr	r3, [pc, #24]	; (91e8 <att_read_mult_req+0x80>)
    91ce:	9a03      	ldr	r2, [sp, #12]
    91d0:	2104      	movs	r1, #4
    91d2:	4630      	mov	r0, r6
    91d4:	f7fe faa5 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    91d8:	2000      	movs	r0, #0
}
    91da:	b006      	add	sp, #24
    91dc:	bd70      	pop	{r4, r5, r6, pc}
		return BT_ATT_ERR_UNLIKELY;
    91de:	200e      	movs	r0, #14
    91e0:	e7fb      	b.n	91da <att_read_mult_req+0x72>
    91e2:	bf00      	nop
    91e4:	000083ed 	.word	0x000083ed
    91e8:	00008523 	.word	0x00008523

000091ec <att_read_rsp>:
{
    91ec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    91f0:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    91f2:	6807      	ldr	r7, [r0, #0]
	if (!handle) {
    91f4:	b923      	cbnz	r3, 9200 <att_read_rsp+0x14>
		return BT_ATT_ERR_INVALID_HANDLE;
    91f6:	2401      	movs	r4, #1
}
    91f8:	4620      	mov	r0, r4
    91fa:	b006      	add	sp, #24
    91fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9200:	461d      	mov	r5, r3
    9202:	4616      	mov	r6, r2
    9204:	4688      	mov	r8, r1
    9206:	4604      	mov	r4, r0
	memset(&data, 0, sizeof(data));
    9208:	2214      	movs	r2, #20
    920a:	2100      	movs	r1, #0
    920c:	a801      	add	r0, sp, #4
    920e:	f020 fbc3 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, rsp, 0);
    9212:	2200      	movs	r2, #0
    9214:	4631      	mov	r1, r6
    9216:	4638      	mov	r0, r7
    9218:	f7ff fd72 	bl	8d00 <bt_att_create_pdu>
    921c:	9003      	str	r0, [sp, #12]
	if (!data.buf) {
    921e:	b318      	cbz	r0, 9268 <att_read_rsp+0x7c>
	data.att = att;
    9220:	9401      	str	r4, [sp, #4]
	data.offset = offset;
    9222:	f8bd 3030 	ldrh.w	r3, [sp, #48]	; 0x30
    9226:	f8ad 3008 	strh.w	r3, [sp, #8]
	data.err = BT_ATT_ERR_INVALID_HANDLE;
    922a:	2301      	movs	r3, #1
    922c:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(handle, handle, read_cb, &data);
    9230:	ab01      	add	r3, sp, #4
    9232:	4a0e      	ldr	r2, [pc, #56]	; (926c <att_read_rsp+0x80>)
    9234:	4629      	mov	r1, r5
    9236:	4628      	mov	r0, r5
    9238:	f000 fda6 	bl	9d88 <bt_gatt_foreach_attr>
	if (data.err) {
    923c:	f89d 4014 	ldrb.w	r4, [sp, #20]
    9240:	b934      	cbnz	r4, 9250 <att_read_rsp+0x64>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    9242:	4b0b      	ldr	r3, [pc, #44]	; (9270 <att_read_rsp+0x84>)
    9244:	9a03      	ldr	r2, [sp, #12]
    9246:	2104      	movs	r1, #4
    9248:	4638      	mov	r0, r7
    924a:	f7fe fa6a 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    924e:	e7d3      	b.n	91f8 <att_read_rsp+0xc>
		net_buf_unref(data.buf);
    9250:	9803      	ldr	r0, [sp, #12]
    9252:	f011 f883 	bl	1a35c <net_buf_unref>
		send_err_rsp(conn, op, handle, data.err);
    9256:	f89d 3014 	ldrb.w	r3, [sp, #20]
    925a:	462a      	mov	r2, r5
    925c:	4641      	mov	r1, r8
    925e:	4638      	mov	r0, r7
    9260:	f7ff fdb0 	bl	8dc4 <send_err_rsp>
		return 0;
    9264:	2400      	movs	r4, #0
    9266:	e7c7      	b.n	91f8 <att_read_rsp+0xc>
		return BT_ATT_ERR_UNLIKELY;
    9268:	240e      	movs	r4, #14
    926a:	e7c5      	b.n	91f8 <att_read_rsp+0xc>
    926c:	000083ed 	.word	0x000083ed
    9270:	00008523 	.word	0x00008523

00009274 <att_read_blob_req>:
{
    9274:	b500      	push	{lr}
    9276:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9278:	688a      	ldr	r2, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    927a:	8813      	ldrh	r3, [r2, #0]
	offset = sys_le16_to_cpu(req->offset);
    927c:	8852      	ldrh	r2, [r2, #2]
	return att_read_rsp(att, BT_ATT_OP_READ_BLOB_REQ,
    927e:	9200      	str	r2, [sp, #0]
    9280:	220d      	movs	r2, #13
    9282:	210c      	movs	r1, #12
    9284:	f7ff ffb2 	bl	91ec <att_read_rsp>
}
    9288:	b003      	add	sp, #12
    928a:	f85d fb04 	ldr.w	pc, [sp], #4

0000928e <att_read_req>:
{
    928e:	b500      	push	{lr}
    9290:	b083      	sub	sp, #12
	req = (void *)buf->data;
    9292:	688b      	ldr	r3, [r1, #8]
	handle = sys_le16_to_cpu(req->handle);
    9294:	881b      	ldrh	r3, [r3, #0]
	return att_read_rsp(att, BT_ATT_OP_READ_REQ, BT_ATT_OP_READ_RSP,
    9296:	2200      	movs	r2, #0
    9298:	9200      	str	r2, [sp, #0]
    929a:	220b      	movs	r2, #11
    929c:	210a      	movs	r1, #10
    929e:	f7ff ffa5 	bl	91ec <att_read_rsp>
}
    92a2:	b003      	add	sp, #12
    92a4:	f85d fb04 	ldr.w	pc, [sp], #4

000092a8 <att_read_type_rsp>:
{
    92a8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    92ac:	b086      	sub	sp, #24
    92ae:	4604      	mov	r4, r0
    92b0:	4688      	mov	r8, r1
    92b2:	4616      	mov	r6, r2
    92b4:	461f      	mov	r7, r3
	struct bt_conn *conn = att->chan.chan.conn;
    92b6:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    92b8:	2218      	movs	r2, #24
    92ba:	2100      	movs	r1, #0
    92bc:	4668      	mov	r0, sp
    92be:	f020 fb6b 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_READ_TYPE_RSP,
    92c2:	2201      	movs	r2, #1
    92c4:	2109      	movs	r1, #9
    92c6:	4628      	mov	r0, r5
    92c8:	f7ff fd1a 	bl	8d00 <bt_att_create_pdu>
    92cc:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    92ce:	b340      	cbz	r0, 9322 <att_read_type_rsp+0x7a>
	data.att = att;
    92d0:	9400      	str	r4, [sp, #0]
	data.uuid = uuid;
    92d2:	f8cd 8004 	str.w	r8, [sp, #4]
	data.rsp = net_buf_add(data.buf, sizeof(*data.rsp));
    92d6:	2101      	movs	r1, #1
    92d8:	3008      	adds	r0, #8
    92da:	f011 f88b 	bl	1a3f4 <net_buf_simple_add>
    92de:	9003      	str	r0, [sp, #12]
	data.rsp->len = 0;
    92e0:	2300      	movs	r3, #0
    92e2:	7003      	strb	r3, [r0, #0]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    92e4:	230a      	movs	r3, #10
    92e6:	f88d 3014 	strb.w	r3, [sp, #20]
	bt_gatt_foreach_attr(start_handle, end_handle, read_type_cb, &data);
    92ea:	466b      	mov	r3, sp
    92ec:	4a0f      	ldr	r2, [pc, #60]	; (932c <att_read_type_rsp+0x84>)
    92ee:	4639      	mov	r1, r7
    92f0:	4630      	mov	r0, r6
    92f2:	f000 fd49 	bl	9d88 <bt_gatt_foreach_attr>
	if (data.err) {
    92f6:	f89d 4014 	ldrb.w	r4, [sp, #20]
    92fa:	b934      	cbnz	r4, 930a <att_read_type_rsp+0x62>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    92fc:	4b0c      	ldr	r3, [pc, #48]	; (9330 <att_read_type_rsp+0x88>)
    92fe:	9a02      	ldr	r2, [sp, #8]
    9300:	2104      	movs	r1, #4
    9302:	4628      	mov	r0, r5
    9304:	f7fe fa0d 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    9308:	e00c      	b.n	9324 <att_read_type_rsp+0x7c>
		net_buf_unref(data.buf);
    930a:	9802      	ldr	r0, [sp, #8]
    930c:	f011 f826 	bl	1a35c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, start_handle,
    9310:	f89d 3014 	ldrb.w	r3, [sp, #20]
    9314:	4632      	mov	r2, r6
    9316:	2108      	movs	r1, #8
    9318:	4628      	mov	r0, r5
    931a:	f7ff fd53 	bl	8dc4 <send_err_rsp>
		return 0;
    931e:	2400      	movs	r4, #0
    9320:	e000      	b.n	9324 <att_read_type_rsp+0x7c>
		return BT_ATT_ERR_UNLIKELY;
    9322:	240e      	movs	r4, #14
}
    9324:	4620      	mov	r0, r4
    9326:	b006      	add	sp, #24
    9328:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    932c:	000086ab 	.word	0x000086ab
    9330:	00008523 	.word	0x00008523

00009334 <att_read_type_req>:
{
    9334:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9338:	b086      	sub	sp, #24
	struct bt_conn *conn = att->chan.chan.conn;
    933a:	6806      	ldr	r6, [r0, #0]
	if (buf->len != sizeof(*req) + 2 && buf->len != sizeof(*req) + 16) {
    933c:	898b      	ldrh	r3, [r1, #12]
    933e:	2b06      	cmp	r3, #6
    9340:	d005      	beq.n	934e <att_read_type_req+0x1a>
    9342:	2b14      	cmp	r3, #20
    9344:	d003      	beq.n	934e <att_read_type_req+0x1a>
		return BT_ATT_ERR_INVALID_PDU;
    9346:	2004      	movs	r0, #4
}
    9348:	b006      	add	sp, #24
    934a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    934e:	460c      	mov	r4, r1
    9350:	4605      	mov	r5, r0
	req = (void *)buf->data;
    9352:	4608      	mov	r0, r1
    9354:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9358:	881f      	ldrh	r7, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    935a:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	net_buf_pull(buf, sizeof(*req));
    935e:	2104      	movs	r1, #4
    9360:	f011 f895 	bl	1a48e <net_buf_simple_pull>
	if (!uuid_create(&u.uuid, buf)) {
    9364:	4621      	mov	r1, r4
    9366:	a801      	add	r0, sp, #4
    9368:	f7ff fa00 	bl	876c <uuid_create>
    936c:	b908      	cbnz	r0, 9372 <att_read_type_req+0x3e>
		return BT_ATT_ERR_UNLIKELY;
    936e:	200e      	movs	r0, #14
    9370:	e7ea      	b.n	9348 <att_read_type_req+0x14>
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9372:	f10d 0216 	add.w	r2, sp, #22
    9376:	4641      	mov	r1, r8
    9378:	4638      	mov	r0, r7
    937a:	f7fe ff88 	bl	828e <range_is_valid>
    937e:	b130      	cbz	r0, 938e <att_read_type_req+0x5a>
	return att_read_type_rsp(att, &u.uuid, start_handle, end_handle);
    9380:	4643      	mov	r3, r8
    9382:	463a      	mov	r2, r7
    9384:	a901      	add	r1, sp, #4
    9386:	4628      	mov	r0, r5
    9388:	f7ff ff8e 	bl	92a8 <att_read_type_rsp>
    938c:	e7dc      	b.n	9348 <att_read_type_req+0x14>
		send_err_rsp(conn, BT_ATT_OP_READ_TYPE_REQ, err_handle,
    938e:	2301      	movs	r3, #1
    9390:	f8bd 2016 	ldrh.w	r2, [sp, #22]
    9394:	2108      	movs	r1, #8
    9396:	4630      	mov	r0, r6
    9398:	f7ff fd14 	bl	8dc4 <send_err_rsp>
		return 0;
    939c:	2000      	movs	r0, #0
    939e:	e7d3      	b.n	9348 <att_read_type_req+0x14>

000093a0 <att_find_type_rsp>:
{
    93a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    93a4:	b086      	sub	sp, #24
    93a6:	4604      	mov	r4, r0
    93a8:	460e      	mov	r6, r1
    93aa:	4617      	mov	r7, r2
    93ac:	4698      	mov	r8, r3
	struct bt_conn *conn = att->chan.chan.conn;
    93ae:	6805      	ldr	r5, [r0, #0]
	memset(&data, 0, sizeof(data));
    93b0:	2214      	movs	r2, #20
    93b2:	2100      	movs	r1, #0
    93b4:	a801      	add	r0, sp, #4
    93b6:	f020 faef 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_TYPE_RSP, 0);
    93ba:	2200      	movs	r2, #0
    93bc:	2107      	movs	r1, #7
    93be:	4628      	mov	r0, r5
    93c0:	f7ff fc9e 	bl	8d00 <bt_att_create_pdu>
    93c4:	9002      	str	r0, [sp, #8]
	if (!data.buf) {
    93c6:	b338      	cbz	r0, 9418 <att_find_type_rsp+0x78>
	data.att = att;
    93c8:	9401      	str	r4, [sp, #4]
	data.group = NULL;
    93ca:	2300      	movs	r3, #0
    93cc:	9303      	str	r3, [sp, #12]
	data.value = value;
    93ce:	f8cd 8010 	str.w	r8, [sp, #16]
	data.value_len = value_len;
    93d2:	f89d 3030 	ldrb.w	r3, [sp, #48]	; 0x30
    93d6:	f88d 3014 	strb.w	r3, [sp, #20]
	data.err = BT_ATT_ERR_ATTRIBUTE_NOT_FOUND;
    93da:	230a      	movs	r3, #10
    93dc:	f88d 3015 	strb.w	r3, [sp, #21]
	bt_gatt_foreach_attr(start_handle, end_handle, find_type_cb, &data);
    93e0:	ab01      	add	r3, sp, #4
    93e2:	4a10      	ldr	r2, [pc, #64]	; (9424 <att_find_type_rsp+0x84>)
    93e4:	4639      	mov	r1, r7
    93e6:	4630      	mov	r0, r6
    93e8:	f000 fcce 	bl	9d88 <bt_gatt_foreach_attr>
	if (data.err) {
    93ec:	f89d 4015 	ldrb.w	r4, [sp, #21]
    93f0:	b934      	cbnz	r4, 9400 <att_find_type_rsp+0x60>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    93f2:	4b0d      	ldr	r3, [pc, #52]	; (9428 <att_find_type_rsp+0x88>)
    93f4:	9a02      	ldr	r2, [sp, #8]
    93f6:	2104      	movs	r1, #4
    93f8:	4628      	mov	r0, r5
    93fa:	f7fe f992 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    93fe:	e00c      	b.n	941a <att_find_type_rsp+0x7a>
		net_buf_unref(data.buf);
    9400:	9802      	ldr	r0, [sp, #8]
    9402:	f010 ffab 	bl	1a35c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9406:	f89d 3015 	ldrb.w	r3, [sp, #21]
    940a:	4632      	mov	r2, r6
    940c:	2106      	movs	r1, #6
    940e:	4628      	mov	r0, r5
    9410:	f7ff fcd8 	bl	8dc4 <send_err_rsp>
		return 0;
    9414:	2400      	movs	r4, #0
    9416:	e000      	b.n	941a <att_find_type_rsp+0x7a>
		return BT_ATT_ERR_UNLIKELY;
    9418:	240e      	movs	r4, #14
}
    941a:	4620      	mov	r0, r4
    941c:	b006      	add	sp, #24
    941e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9422:	bf00      	nop
    9424:	00008853 	.word	0x00008853
    9428:	00008523 	.word	0x00008523

0000942c <att_find_type_req>:
{
    942c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9430:	b084      	sub	sp, #16
    9432:	4605      	mov	r5, r0
    9434:	460f      	mov	r7, r1
	struct bt_conn *conn = att->chan.chan.conn;
    9436:	f8d0 9000 	ldr.w	r9, [r0]
	req = (void *)buf->data;
    943a:	4608      	mov	r0, r1
    943c:	f850 3f08 	ldr.w	r3, [r0, #8]!
	start_handle = sys_le16_to_cpu(req->start_handle);
    9440:	881c      	ldrh	r4, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9442:	885e      	ldrh	r6, [r3, #2]
	type = sys_le16_to_cpu(req->type);
    9444:	f8b3 8004 	ldrh.w	r8, [r3, #4]
	value = net_buf_pull(buf, sizeof(*req));
    9448:	2106      	movs	r1, #6
    944a:	f011 f820 	bl	1a48e <net_buf_simple_pull>
    944e:	4682      	mov	sl, r0
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9450:	f10d 020e 	add.w	r2, sp, #14
    9454:	4631      	mov	r1, r6
    9456:	4620      	mov	r0, r4
    9458:	f7fe ff19 	bl	828e <range_is_valid>
    945c:	b160      	cbz	r0, 9478 <att_find_type_req+0x4c>
	if (type != BT_UUID_GATT_PRIMARY_VAL) {
    945e:	f5b8 5f20 	cmp.w	r8, #10240	; 0x2800
    9462:	d012      	beq.n	948a <att_find_type_req+0x5e>
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, start_handle,
    9464:	230a      	movs	r3, #10
    9466:	4622      	mov	r2, r4
    9468:	2106      	movs	r1, #6
    946a:	4648      	mov	r0, r9
    946c:	f7ff fcaa 	bl	8dc4 <send_err_rsp>
		return 0;
    9470:	2000      	movs	r0, #0
}
    9472:	b004      	add	sp, #16
    9474:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_TYPE_REQ, err_handle,
    9478:	2301      	movs	r3, #1
    947a:	f8bd 200e 	ldrh.w	r2, [sp, #14]
    947e:	2106      	movs	r1, #6
    9480:	4648      	mov	r0, r9
    9482:	f7ff fc9f 	bl	8dc4 <send_err_rsp>
		return 0;
    9486:	2000      	movs	r0, #0
    9488:	e7f3      	b.n	9472 <att_find_type_req+0x46>
	return att_find_type_rsp(att, start_handle, end_handle, value,
    948a:	7b3b      	ldrb	r3, [r7, #12]
    948c:	9300      	str	r3, [sp, #0]
    948e:	4653      	mov	r3, sl
    9490:	4632      	mov	r2, r6
    9492:	4621      	mov	r1, r4
    9494:	4628      	mov	r0, r5
    9496:	f7ff ff83 	bl	93a0 <att_find_type_rsp>
    949a:	e7ea      	b.n	9472 <att_find_type_req+0x46>

0000949c <att_find_info_rsp>:
{
    949c:	b5f0      	push	{r4, r5, r6, r7, lr}
    949e:	b085      	sub	sp, #20
    94a0:	4605      	mov	r5, r0
    94a2:	460e      	mov	r6, r1
    94a4:	4617      	mov	r7, r2
	struct bt_conn *conn = att->chan.chan.conn;
    94a6:	6804      	ldr	r4, [r0, #0]
	memset(&data, 0, sizeof(data));
    94a8:	2210      	movs	r2, #16
    94aa:	2100      	movs	r1, #0
    94ac:	4668      	mov	r0, sp
    94ae:	f020 fa73 	bl	29998 <memset>
	data.buf = bt_att_create_pdu(conn, BT_ATT_OP_FIND_INFO_RSP, 0);
    94b2:	2200      	movs	r2, #0
    94b4:	2105      	movs	r1, #5
    94b6:	4620      	mov	r0, r4
    94b8:	f7ff fc22 	bl	8d00 <bt_att_create_pdu>
    94bc:	9001      	str	r0, [sp, #4]
	if (!data.buf) {
    94be:	b1e8      	cbz	r0, 94fc <att_find_info_rsp+0x60>
	data.att = att;
    94c0:	ab04      	add	r3, sp, #16
    94c2:	f843 5d10 	str.w	r5, [r3, #-16]!
	bt_gatt_foreach_attr(start_handle, end_handle, find_info_cb, &data);
    94c6:	4a0e      	ldr	r2, [pc, #56]	; (9500 <att_find_info_rsp+0x64>)
    94c8:	4639      	mov	r1, r7
    94ca:	4630      	mov	r0, r6
    94cc:	f000 fc5c 	bl	9d88 <bt_gatt_foreach_attr>
	if (!data.rsp) {
    94d0:	9b02      	ldr	r3, [sp, #8]
    94d2:	b143      	cbz	r3, 94e6 <att_find_info_rsp+0x4a>
	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, data.buf, att_rsp_sent);
    94d4:	4b0b      	ldr	r3, [pc, #44]	; (9504 <att_find_info_rsp+0x68>)
    94d6:	9a01      	ldr	r2, [sp, #4]
    94d8:	2104      	movs	r1, #4
    94da:	4620      	mov	r0, r4
    94dc:	f7fe f921 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    94e0:	2000      	movs	r0, #0
}
    94e2:	b005      	add	sp, #20
    94e4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		net_buf_unref(data.buf);
    94e6:	9801      	ldr	r0, [sp, #4]
    94e8:	f010 ff38 	bl	1a35c <net_buf_unref>
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, start_handle,
    94ec:	230a      	movs	r3, #10
    94ee:	4632      	mov	r2, r6
    94f0:	2104      	movs	r1, #4
    94f2:	4620      	mov	r0, r4
    94f4:	f7ff fc66 	bl	8dc4 <send_err_rsp>
		return 0;
    94f8:	2000      	movs	r0, #0
    94fa:	e7f2      	b.n	94e2 <att_find_info_rsp+0x46>
		return BT_ATT_ERR_UNLIKELY;
    94fc:	200e      	movs	r0, #14
    94fe:	e7f0      	b.n	94e2 <att_find_info_rsp+0x46>
    9500:	000087a3 	.word	0x000087a3
    9504:	00008523 	.word	0x00008523

00009508 <att_find_info_req>:
{
    9508:	b5f0      	push	{r4, r5, r6, r7, lr}
    950a:	b083      	sub	sp, #12
    950c:	4604      	mov	r4, r0
	struct bt_conn *conn = att->chan.chan.conn;
    950e:	6807      	ldr	r7, [r0, #0]
	req = (void *)buf->data;
    9510:	688b      	ldr	r3, [r1, #8]
	start_handle = sys_le16_to_cpu(req->start_handle);
    9512:	881d      	ldrh	r5, [r3, #0]
	end_handle = sys_le16_to_cpu(req->end_handle);
    9514:	885e      	ldrh	r6, [r3, #2]
	if (!range_is_valid(start_handle, end_handle, &err_handle)) {
    9516:	f10d 0206 	add.w	r2, sp, #6
    951a:	4631      	mov	r1, r6
    951c:	4628      	mov	r0, r5
    951e:	f7fe feb6 	bl	828e <range_is_valid>
    9522:	b130      	cbz	r0, 9532 <att_find_info_req+0x2a>
	return att_find_info_rsp(att, start_handle, end_handle);
    9524:	4632      	mov	r2, r6
    9526:	4629      	mov	r1, r5
    9528:	4620      	mov	r0, r4
    952a:	f7ff ffb7 	bl	949c <att_find_info_rsp>
}
    952e:	b003      	add	sp, #12
    9530:	bdf0      	pop	{r4, r5, r6, r7, pc}
		send_err_rsp(conn, BT_ATT_OP_FIND_INFO_REQ, err_handle,
    9532:	2301      	movs	r3, #1
    9534:	f8bd 2006 	ldrh.w	r2, [sp, #6]
    9538:	2104      	movs	r1, #4
    953a:	4638      	mov	r0, r7
    953c:	f7ff fc42 	bl	8dc4 <send_err_rsp>
		return 0;
    9540:	2000      	movs	r0, #0
    9542:	e7f4      	b.n	952e <att_find_info_req+0x26>

00009544 <bt_att_init>:

void bt_att_init(void)
{
    9544:	b508      	push	{r3, lr}
	static struct bt_l2cap_fixed_chan chan = {
		.cid		= BT_L2CAP_CID_ATT,
		.accept		= bt_att_accept,
	};

	bt_l2cap_le_fixed_chan_register(&chan);
    9546:	4803      	ldr	r0, [pc, #12]	; (9554 <bt_att_init+0x10>)
    9548:	f7fd ff44 	bl	73d4 <bt_l2cap_le_fixed_chan_register>

	bt_gatt_init();
    954c:	f000 fb3c 	bl	9bc8 <bt_gatt_init>
    9550:	bd08      	pop	{r3, pc}
    9552:	bf00      	nop
    9554:	2000ba20 	.word	0x2000ba20

00009558 <bt_att_send>:
	/* tx and rx MTU shall be symmetric */
	return att->chan.tx.mtu;
}

int bt_att_send(struct bt_conn *conn, struct net_buf *buf)
{
    9558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_att *att;
	struct bt_att_hdr *hdr;

	if (!conn || !buf) {
    955a:	2800      	cmp	r0, #0
    955c:	d043      	beq.n	95e6 <bt_att_send+0x8e>
    955e:	4606      	mov	r6, r0
    9560:	2900      	cmp	r1, #0
    9562:	d043      	beq.n	95ec <bt_att_send+0x94>
    9564:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9566:	f7fe ff7b 	bl	8460 <att_chan_get>
	if (!att) {
    956a:	4605      	mov	r5, r0
    956c:	2800      	cmp	r0, #0
    956e:	d040      	beq.n	95f2 <bt_att_send+0x9a>
		return -ENOTCONN;
	}

	k_sem_take(&att->tx_sem, K_FOREVER);
    9570:	f100 07d4 	add.w	r7, r0, #212	; 0xd4
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    9574:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    9578:	4638      	mov	r0, r7
    957a:	f01f fa4d 	bl	28a18 <_impl_k_sem_take>
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    957e:	682b      	ldr	r3, [r5, #0]
    9580:	7b1b      	ldrb	r3, [r3, #12]
    9582:	2b03      	cmp	r3, #3
    9584:	d011      	beq.n	95aa <bt_att_send+0x52>
    9586:	2301      	movs	r3, #1
	if (!att_is_connected(att)) {
    9588:	b1e3      	cbz	r3, 95c4 <bt_att_send+0x6c>
		BT_WARN("Disconnected");
		k_sem_give(&att->tx_sem);
		return -ENOTCONN;
	}

	hdr = (void *)buf->data;
    958a:	68a3      	ldr	r3, [r4, #8]

	BT_DBG("code 0x%02x", hdr->code);

	if (hdr->code == BT_ATT_OP_SIGNED_WRITE_CMD) {
    958c:	781b      	ldrb	r3, [r3, #0]
    958e:	2bd2      	cmp	r3, #210	; 0xd2
    9590:	d01e      	beq.n	95d0 <bt_att_send+0x78>
			k_sem_give(&att->tx_sem);
			return err;
		}
	}

	bt_l2cap_send_cb(conn, BT_L2CAP_CID_ATT, buf, att_cb(buf));
    9592:	4620      	mov	r0, r4
    9594:	f7fe ff0c 	bl	83b0 <att_cb>
    9598:	4603      	mov	r3, r0
    959a:	4622      	mov	r2, r4
    959c:	2104      	movs	r1, #4
    959e:	4630      	mov	r0, r6
    95a0:	f7fe f8bf 	bl	7722 <bt_l2cap_send_cb>

	return 0;
    95a4:	2500      	movs	r5, #0
}
    95a6:	4628      	mov	r0, r5
    95a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    95aa:	f3bf 8f5b 	dmb	ish
    95ae:	f8d5 309c 	ldr.w	r3, [r5, #156]	; 0x9c
    95b2:	f3bf 8f5b 	dmb	ish
	return (att->chan.chan.conn->state != BT_CONN_CONNECTED ||
    95b6:	f013 0f04 	tst.w	r3, #4
    95ba:	d101      	bne.n	95c0 <bt_att_send+0x68>
    95bc:	2301      	movs	r3, #1
    95be:	e7e3      	b.n	9588 <bt_att_send+0x30>
    95c0:	2300      	movs	r3, #0
    95c2:	e7e1      	b.n	9588 <bt_att_send+0x30>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
    95c4:	4638      	mov	r0, r7
    95c6:	f01f fa14 	bl	289f2 <_impl_k_sem_give>
		return -ENOTCONN;
    95ca:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    95ce:	e7ea      	b.n	95a6 <bt_att_send+0x4e>
		err = bt_smp_sign(conn, buf);
    95d0:	4621      	mov	r1, r4
    95d2:	4630      	mov	r0, r6
    95d4:	f003 f81a 	bl	c60c <bt_smp_sign>
		if (err) {
    95d8:	4605      	mov	r5, r0
    95da:	2800      	cmp	r0, #0
    95dc:	d0d9      	beq.n	9592 <bt_att_send+0x3a>
    95de:	4638      	mov	r0, r7
    95e0:	f01f fa07 	bl	289f2 <_impl_k_sem_give>
			return err;
    95e4:	e7df      	b.n	95a6 <bt_att_send+0x4e>
		return -EINVAL;
    95e6:	f06f 0515 	mvn.w	r5, #21
    95ea:	e7dc      	b.n	95a6 <bt_att_send+0x4e>
    95ec:	f06f 0515 	mvn.w	r5, #21
    95f0:	e7d9      	b.n	95a6 <bt_att_send+0x4e>
		return -ENOTCONN;
    95f2:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    95f6:	e7d6      	b.n	95a6 <bt_att_send+0x4e>

000095f8 <bt_att_req_send>:
{
	struct bt_att *att;

	BT_DBG("conn %p req %p", conn, req);

	if (!conn || !req) {
    95f8:	b1e0      	cbz	r0, 9634 <bt_att_req_send+0x3c>
    95fa:	b1f1      	cbz	r1, 963a <bt_att_req_send+0x42>
{
    95fc:	b510      	push	{r4, lr}
    95fe:	460c      	mov	r4, r1
		return -EINVAL;
	}

	att = att_chan_get(conn);
    9600:	f7fe ff2e 	bl	8460 <att_chan_get>
	if (!att) {
    9604:	b1e0      	cbz	r0, 9640 <bt_att_req_send+0x48>
		return -ENOTCONN;
	}

	/* Check if there is a request outstanding */
	if (att->req) {
    9606:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    960a:	b17a      	cbz	r2, 962c <bt_att_req_send+0x34>
	node->next = NULL;
    960c:	2200      	movs	r2, #0
    960e:	6022      	str	r2, [r4, #0]
	if (!list->tail) {
    9610:	f8d0 20a8 	ldr.w	r2, [r0, #168]	; 0xa8
    9614:	b122      	cbz	r2, 9620 <bt_att_req_send+0x28>
		list->tail->next = node;
    9616:	6014      	str	r4, [r2, #0]
		list->tail = node;
    9618:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		/* Queue the request to be send later */
		sys_slist_append(&att->reqs, &req->node);
		return 0;
    961c:	2000      	movs	r0, #0
    961e:	bd10      	pop	{r4, pc}
		list->tail = node;
    9620:	f8c0 40a8 	str.w	r4, [r0, #168]	; 0xa8
		list->head = node;
    9624:	f8c0 40a4 	str.w	r4, [r0, #164]	; 0xa4
    9628:	2000      	movs	r0, #0
    962a:	bd10      	pop	{r4, pc}
	}

	return att_send_req(att, req);
    962c:	4621      	mov	r1, r4
    962e:	f7ff f9ad 	bl	898c <att_send_req>
    9632:	bd10      	pop	{r4, pc}
		return -EINVAL;
    9634:	f06f 0015 	mvn.w	r0, #21
    9638:	4770      	bx	lr
    963a:	f06f 0015 	mvn.w	r0, #21
    963e:	4770      	bx	lr
		return -ENOTCONN;
    9640:	f06f 007f 	mvn.w	r0, #127	; 0x7f
}
    9644:	bd10      	pop	{r4, pc}

00009646 <sc_ccc_cfg_changed>:

static struct bt_gatt_ccc_cfg sc_ccc_cfg[BT_GATT_CCC_MAX] = {};

static void sc_ccc_cfg_changed(const struct bt_gatt_attr *attr,
			       u16_t value)
{
    9646:	4770      	bx	lr

00009648 <gatt_register>:
};

static struct bt_gatt_service gatt_svc = BT_GATT_SERVICE(gatt_attrs);

static int gatt_register(struct bt_gatt_service *svc)
{
    9648:	b430      	push	{r4, r5}
	struct bt_gatt_service *last;
	u16_t handle;
	struct bt_gatt_attr *attrs = svc->attrs;
    964a:	6804      	ldr	r4, [r0, #0]
	u16_t count = svc->attr_count;
    964c:	8883      	ldrh	r3, [r0, #4]
	return (!list->head);
    964e:	4a1c      	ldr	r2, [pc, #112]	; (96c0 <gatt_register+0x78>)
    9650:	6812      	ldr	r2, [r2, #0]

	if (sys_slist_is_empty(&db)) {
    9652:	b172      	cbz	r2, 9672 <gatt_register+0x2a>
	return list->tail;
    9654:	4a1a      	ldr	r2, [pc, #104]	; (96c0 <gatt_register+0x78>)
    9656:	6852      	ldr	r2, [r2, #4]
		handle = 0;
		goto populate;
	}

	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    9658:	b14a      	cbz	r2, 966e <gatt_register+0x26>
    965a:	3a08      	subs	r2, #8
	handle = last->attrs[last->attr_count - 1].handle;
    965c:	6815      	ldr	r5, [r2, #0]
    965e:	8892      	ldrh	r2, [r2, #4]
    9660:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9664:	0091      	lsls	r1, r2, #2
    9666:	3914      	subs	r1, #20
    9668:	4429      	add	r1, r5
    966a:	8a0a      	ldrh	r2, [r1, #16]
    966c:	e009      	b.n	9682 <gatt_register+0x3a>
	last = SYS_SLIST_PEEK_TAIL_CONTAINER(&db, last, node);
    966e:	2200      	movs	r2, #0
    9670:	e7f4      	b.n	965c <gatt_register+0x14>
		handle = 0;
    9672:	2200      	movs	r2, #0
    9674:	e005      	b.n	9682 <gatt_register+0x3a>
	/* Populate the handles and append them to the list */
	for (; attrs && count; attrs++, count--) {
		if (!attrs->handle) {
			/* Allocate handle if not set already */
			attrs->handle = ++handle;
		} else if (attrs->handle > handle) {
    9676:	428a      	cmp	r2, r1
    9678:	d21e      	bcs.n	96b8 <gatt_register+0x70>
			/* Use existing handle if valid */
			handle = attrs->handle;
    967a:	460a      	mov	r2, r1
	for (; attrs && count; attrs++, count--) {
    967c:	3414      	adds	r4, #20
    967e:	3b01      	subs	r3, #1
    9680:	b29b      	uxth	r3, r3
    9682:	b13c      	cbz	r4, 9694 <gatt_register+0x4c>
    9684:	b133      	cbz	r3, 9694 <gatt_register+0x4c>
		if (!attrs->handle) {
    9686:	8a21      	ldrh	r1, [r4, #16]
    9688:	2900      	cmp	r1, #0
    968a:	d1f4      	bne.n	9676 <gatt_register+0x2e>
			attrs->handle = ++handle;
    968c:	3201      	adds	r2, #1
    968e:	b292      	uxth	r2, r2
    9690:	8222      	strh	r2, [r4, #16]
    9692:	e7f3      	b.n	967c <gatt_register+0x34>
		BT_DBG("attr %p handle 0x%04x uuid %s perm 0x%02x",
		       attrs, attrs->handle, bt_uuid_str(attrs->uuid),
		       attrs->perm);
	}

	sys_slist_append(&db, &svc->node);
    9694:	f100 0308 	add.w	r3, r0, #8
	node->next = NULL;
    9698:	2200      	movs	r2, #0
    969a:	6082      	str	r2, [r0, #8]
	if (!list->tail) {
    969c:	4a08      	ldr	r2, [pc, #32]	; (96c0 <gatt_register+0x78>)
    969e:	6852      	ldr	r2, [r2, #4]
    96a0:	b12a      	cbz	r2, 96ae <gatt_register+0x66>
		list->tail->next = node;
    96a2:	6013      	str	r3, [r2, #0]
		list->tail = node;
    96a4:	4a06      	ldr	r2, [pc, #24]	; (96c0 <gatt_register+0x78>)
    96a6:	6053      	str	r3, [r2, #4]

	return 0;
    96a8:	2000      	movs	r0, #0
}
    96aa:	bc30      	pop	{r4, r5}
    96ac:	4770      	bx	lr
		list->tail = node;
    96ae:	4a04      	ldr	r2, [pc, #16]	; (96c0 <gatt_register+0x78>)
    96b0:	6053      	str	r3, [r2, #4]
		list->head = node;
    96b2:	6013      	str	r3, [r2, #0]
	return 0;
    96b4:	2000      	movs	r0, #0
    96b6:	e7f8      	b.n	96aa <gatt_register+0x62>
			return -EINVAL;
    96b8:	f06f 0015 	mvn.w	r0, #21
    96bc:	e7f5      	b.n	96aa <gatt_register+0x62>
    96be:	bf00      	nop
    96c0:	200007d4 	.word	0x200007d4

000096c4 <update_range>:
	k_delayed_work_init(&gatt_sc.work, sc_process);
}

static bool update_range(u16_t *start, u16_t *end, u16_t new_start,
			 u16_t new_end)
{
    96c4:	b430      	push	{r4, r5}
	BT_DBG("start 0x%04x end 0x%04x new_start 0x%04x new_end 0x%04x",
	       *start, *end, new_start, new_end);

	/* Check if inside existing range */
	if (new_start >= *start && new_end <= *end) {
    96c6:	8804      	ldrh	r4, [r0, #0]
    96c8:	4294      	cmp	r4, r2
    96ca:	d802      	bhi.n	96d2 <update_range+0xe>
    96cc:	880d      	ldrh	r5, [r1, #0]
    96ce:	429d      	cmp	r5, r3
    96d0:	d209      	bcs.n	96e6 <update_range+0x22>
		return false;
	}

	/* Update range */
	if (*start > new_start) {
    96d2:	4294      	cmp	r4, r2
    96d4:	d900      	bls.n	96d8 <update_range+0x14>
		*start = new_start;
    96d6:	8002      	strh	r2, [r0, #0]
	}

	if (*end < new_end) {
    96d8:	880a      	ldrh	r2, [r1, #0]
    96da:	4293      	cmp	r3, r2
    96dc:	d905      	bls.n	96ea <update_range+0x26>
		*end = new_end;
    96de:	800b      	strh	r3, [r1, #0]
	}

	return true;
    96e0:	2001      	movs	r0, #1
}
    96e2:	bc30      	pop	{r4, r5}
    96e4:	4770      	bx	lr
		return false;
    96e6:	2000      	movs	r0, #0
    96e8:	e7fb      	b.n	96e2 <update_range+0x1e>
	return true;
    96ea:	2001      	movs	r0, #1
    96ec:	e7f9      	b.n	96e2 <update_range+0x1e>

000096ee <find_next>:

static u8_t find_next(const struct bt_gatt_attr *attr, void *user_data)
{
	struct bt_gatt_attr **next = user_data;

	*next = (struct bt_gatt_attr *)attr;
    96ee:	6008      	str	r0, [r1, #0]

	return BT_GATT_ITER_STOP;
}
    96f0:	2000      	movs	r0, #0
    96f2:	4770      	bx	lr

000096f4 <gatt_ccc_changed>:
				 sizeof(value));
}

static void gatt_ccc_changed(const struct bt_gatt_attr *attr,
			     struct _bt_gatt_ccc *ccc)
{
    96f4:	b510      	push	{r4, lr}
	int i;
	u16_t value = 0x0000;
    96f6:	2400      	movs	r4, #0

	for (i = 0; i < ccc->cfg_len; i++) {
    96f8:	4623      	mov	r3, r4
    96fa:	e000      	b.n	96fe <gatt_ccc_changed+0xa>
    96fc:	3301      	adds	r3, #1
    96fe:	684a      	ldr	r2, [r1, #4]
    9700:	429a      	cmp	r2, r3
    9702:	d907      	bls.n	9714 <gatt_ccc_changed+0x20>
		if (ccc->cfg[i].value > value) {
    9704:	680a      	ldr	r2, [r1, #0]
    9706:	eb02 1203 	add.w	r2, r2, r3, lsl #4
    970a:	8912      	ldrh	r2, [r2, #8]
    970c:	4294      	cmp	r4, r2
    970e:	d2f5      	bcs.n	96fc <gatt_ccc_changed+0x8>
			value = ccc->cfg[i].value;
    9710:	4614      	mov	r4, r2
    9712:	e7f3      	b.n	96fc <gatt_ccc_changed+0x8>
		}
	}

	BT_DBG("ccc %p value 0x%04x", ccc, value);

	if (value != ccc->value) {
    9714:	890b      	ldrh	r3, [r1, #8]
    9716:	429c      	cmp	r4, r3
    9718:	d003      	beq.n	9722 <gatt_ccc_changed+0x2e>
		ccc->value = value;
    971a:	810c      	strh	r4, [r1, #8]
		ccc->cfg_changed(attr, value);
    971c:	68cb      	ldr	r3, [r1, #12]
    971e:	4621      	mov	r1, r4
    9720:	4798      	blx	r3
    9722:	bd10      	pop	{r4, pc}

00009724 <gatt_indicate_rsp>:
	return 0;
}

static void gatt_indicate_rsp(struct bt_conn *conn, u8_t err,
			      const void *pdu, u16_t length, void *user_data)
{
    9724:	b510      	push	{r4, lr}
    9726:	9b02      	ldr	r3, [sp, #8]
	struct bt_gatt_indicate_params *params = user_data;

	params->func(conn, params->attr, err);
    9728:	69dc      	ldr	r4, [r3, #28]
    972a:	460a      	mov	r2, r1
    972c:	6999      	ldr	r1, [r3, #24]
    972e:	47a0      	blx	r4
    9730:	bd10      	pop	{r4, pc}
	...

00009734 <sc_indicate_rsp>:
{
    9734:	b508      	push	{r3, lr}
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9736:	4b0f      	ldr	r3, [pc, #60]	; (9774 <sc_indicate_rsp+0x40>)
    9738:	f103 0254 	add.w	r2, r3, #84	; 0x54
    973c:	f3bf 8f5b 	dmb	ish
    9740:	e852 1f00 	ldrex	r1, [r2]
    9744:	f021 0102 	bic.w	r1, r1, #2
    9748:	e842 1000 	strex	r0, r1, [r2]
    974c:	2800      	cmp	r0, #0
    974e:	d1f7      	bne.n	9740 <sc_indicate_rsp+0xc>
    9750:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    9754:	f3bf 8f5b 	dmb	ish
    9758:	6d5b      	ldr	r3, [r3, #84]	; 0x54
    975a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(gatt_sc.flags, SC_RANGE_CHANGED)) {
    975e:	f013 0f01 	tst.w	r3, #1
    9762:	d100      	bne.n	9766 <sc_indicate_rsp+0x32>
    9764:	bd08      	pop	{r3, pc}
    9766:	2200      	movs	r2, #0
    9768:	4903      	ldr	r1, [pc, #12]	; (9778 <sc_indicate_rsp+0x44>)
    976a:	4804      	ldr	r0, [pc, #16]	; (977c <sc_indicate_rsp+0x48>)
    976c:	f01f ff8a 	bl	29684 <k_delayed_work_submit_to_queue>
}
    9770:	e7f8      	b.n	9764 <sc_indicate_rsp+0x30>
    9772:	bf00      	nop
    9774:	200007dc 	.word	0x200007dc
    9778:	20000808 	.word	0x20000808
    977c:	20002bd8 	.word	0x20002bd8

00009780 <sc_indicate>:
{
    9780:	b510      	push	{r4, lr}
    9782:	4604      	mov	r4, r0
	if (!atomic_test_and_set_bit(sc->flags, SC_RANGE_CHANGED)) {
    9784:	3054      	adds	r0, #84	; 0x54
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9786:	f3bf 8f5b 	dmb	ish
    978a:	e850 3f00 	ldrex	r3, [r0]
    978e:	f043 0e01 	orr.w	lr, r3, #1
    9792:	e840 ec00 	strex	ip, lr, [r0]
    9796:	f1bc 0f00 	cmp.w	ip, #0
    979a:	d1f6      	bne.n	978a <sc_indicate+0xa>
    979c:	f3bf 8f5b 	dmb	ish
    97a0:	f013 0f01 	tst.w	r3, #1
    97a4:	d10a      	bne.n	97bc <sc_indicate+0x3c>
		sc->start = start;
    97a6:	8521      	strh	r1, [r4, #40]	; 0x28
		sc->end = end;
    97a8:	8562      	strh	r2, [r4, #42]	; 0x2a
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    97aa:	f3bf 8f5b 	dmb	ish
    97ae:	6d63      	ldr	r3, [r4, #84]	; 0x54
    97b0:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(sc->flags, SC_INDICATE_PENDING)) {
    97b4:	f013 0f02 	tst.w	r3, #2
    97b8:	d00b      	beq.n	97d2 <sc_indicate+0x52>
    97ba:	bd10      	pop	{r4, pc}
	if (!update_range(&sc->start, &sc->end, start, end)) {
    97bc:	4613      	mov	r3, r2
    97be:	460a      	mov	r2, r1
    97c0:	f104 012a 	add.w	r1, r4, #42	; 0x2a
    97c4:	f104 0028 	add.w	r0, r4, #40	; 0x28
    97c8:	f7ff ff7c 	bl	96c4 <update_range>
    97cc:	2800      	cmp	r0, #0
    97ce:	d1ec      	bne.n	97aa <sc_indicate+0x2a>
    97d0:	e7f3      	b.n	97ba <sc_indicate+0x3a>
    97d2:	220a      	movs	r2, #10
    97d4:	f104 012c 	add.w	r1, r4, #44	; 0x2c
    97d8:	4801      	ldr	r0, [pc, #4]	; (97e0 <sc_indicate+0x60>)
    97da:	f01f ff53 	bl	29684 <k_delayed_work_submit_to_queue>
    97de:	e7ec      	b.n	97ba <sc_indicate+0x3a>
    97e0:	20002bd8 	.word	0x20002bd8

000097e4 <sc_save>:
	u16_t end;
};

static void sc_save(struct bt_gatt_ccc_cfg *cfg,
		    struct bt_gatt_indicate_params *params)
{
    97e4:	b510      	push	{r4, lr}
    97e6:	b082      	sub	sp, #8
    97e8:	4604      	mov	r4, r0
	struct sc_data data;
	struct sc_data *stored;

	memcpy(&data, params->data, params->len);
    97ea:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
    97ec:	6a09      	ldr	r1, [r1, #32]
    97ee:	a801      	add	r0, sp, #4
    97f0:	f7f6 fd66 	bl	2c0 <memcpy>

	data.start = sys_le16_to_cpu(data.start);
    97f4:	f8bd 2004 	ldrh.w	r2, [sp, #4]
	data.end = sys_le16_to_cpu(data.end);
    97f8:	f8bd 3006 	ldrh.w	r3, [sp, #6]

	/* Load data stored */
	stored = (struct sc_data *)cfg->data;

	/* Check if there is any change stored */
	if (!stored->start && !stored->end) {
    97fc:	89a1      	ldrh	r1, [r4, #12]
    97fe:	b909      	cbnz	r1, 9804 <sc_save+0x20>
    9800:	89e1      	ldrh	r1, [r4, #14]
    9802:	b139      	cbz	r1, 9814 <sc_save+0x30>
		*stored = data;
		goto done;
	}

	update_range(&stored->start, &stored->end,
    9804:	f104 010e 	add.w	r1, r4, #14
    9808:	f104 000c 	add.w	r0, r4, #12
    980c:	f7ff ff5a 	bl	96c4 <update_range>
		     data.start, data.end);

done:
	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       stored->start, stored->end);
}
    9810:	b002      	add	sp, #8
    9812:	bd10      	pop	{r4, pc}
		*stored = data;
    9814:	9801      	ldr	r0, [sp, #4]
    9816:	60e0      	str	r0, [r4, #12]
		goto done;
    9818:	e7fa      	b.n	9810 <sc_save+0x2c>

0000981a <bt_gatt_attr_write_ccc>:
{
    981a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    981e:	f8bd 4020 	ldrh.w	r4, [sp, #32]
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9822:	68cd      	ldr	r5, [r1, #12]
	if (offset > sizeof(u16_t)) {
    9824:	2c02      	cmp	r4, #2
    9826:	d84f      	bhi.n	98c8 <bt_gatt_attr_write_ccc+0xae>
	if (offset + len > sizeof(u16_t)) {
    9828:	4698      	mov	r8, r3
    982a:	441c      	add	r4, r3
    982c:	2c02      	cmp	r4, #2
    982e:	d84e      	bhi.n	98ce <bt_gatt_attr_write_ccc+0xb4>
    9830:	460f      	mov	r7, r1
    9832:	4681      	mov	r9, r0
	return ((u16_t)src[1] << 8) | src[0];
    9834:	7853      	ldrb	r3, [r2, #1]
    9836:	7816      	ldrb	r6, [r2, #0]
    9838:	ea46 2603 	orr.w	r6, r6, r3, lsl #8
	for (i = 0; i < ccc->cfg_len; i++) {
    983c:	2400      	movs	r4, #0
    983e:	686b      	ldr	r3, [r5, #4]
    9840:	429c      	cmp	r4, r3
    9842:	d209      	bcs.n	9858 <bt_gatt_attr_write_ccc+0x3e>
		if (!bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9844:	6829      	ldr	r1, [r5, #0]
    9846:	eb01 1104 	add.w	r1, r1, r4, lsl #4
    984a:	3101      	adds	r1, #1
    984c:	4648      	mov	r0, r9
    984e:	f7fc fffd 	bl	684c <bt_conn_addr_le_cmp>
    9852:	b108      	cbz	r0, 9858 <bt_gatt_attr_write_ccc+0x3e>
	for (i = 0; i < ccc->cfg_len; i++) {
    9854:	3401      	adds	r4, #1
    9856:	e7f2      	b.n	983e <bt_gatt_attr_write_ccc+0x24>
	if (i == ccc->cfg_len) {
    9858:	686b      	ldr	r3, [r5, #4]
    985a:	429c      	cmp	r4, r3
    985c:	d026      	beq.n	98ac <bt_gatt_attr_write_ccc+0x92>
	} else if (!value) {
    985e:	b91e      	cbnz	r6, 9868 <bt_gatt_attr_write_ccc+0x4e>
		ccc->cfg[i].valid = false;
    9860:	682a      	ldr	r2, [r5, #0]
    9862:	0123      	lsls	r3, r4, #4
    9864:	2100      	movs	r1, #0
    9866:	54d1      	strb	r1, [r2, r3]
	ccc->cfg[i].value = value;
    9868:	682b      	ldr	r3, [r5, #0]
    986a:	0124      	lsls	r4, r4, #4
    986c:	4423      	add	r3, r4
    986e:	811e      	strh	r6, [r3, #8]
	if (ccc->cfg[i].value != ccc->value) {
    9870:	682b      	ldr	r3, [r5, #0]
    9872:	441c      	add	r4, r3
    9874:	8922      	ldrh	r2, [r4, #8]
    9876:	892b      	ldrh	r3, [r5, #8]
    9878:	429a      	cmp	r2, r3
    987a:	d003      	beq.n	9884 <bt_gatt_attr_write_ccc+0x6a>
		gatt_ccc_changed(attr, ccc);
    987c:	4629      	mov	r1, r5
    987e:	4638      	mov	r0, r7
    9880:	f7ff ff38 	bl	96f4 <gatt_ccc_changed>
}
    9884:	4640      	mov	r0, r8
    9886:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	memcpy(dst, src, sizeof(*dst));
    988a:	2207      	movs	r2, #7
    988c:	f109 0148 	add.w	r1, r9, #72	; 0x48
    9890:	3001      	adds	r0, #1
    9892:	f7f6 fd15 	bl	2c0 <memcpy>
			if (value) {
    9896:	b11e      	cbz	r6, 98a0 <bt_gatt_attr_write_ccc+0x86>
				ccc->cfg[i].valid = true;
    9898:	682b      	ldr	r3, [r5, #0]
    989a:	2201      	movs	r2, #1
    989c:	f803 200a 	strb.w	r2, [r3, sl]
		if (i == ccc->cfg_len) {
    98a0:	686b      	ldr	r3, [r5, #4]
    98a2:	429c      	cmp	r4, r3
    98a4:	d1e0      	bne.n	9868 <bt_gatt_attr_write_ccc+0x4e>
			return BT_GATT_ERR(BT_ATT_ERR_INSUFFICIENT_RESOURCES);
    98a6:	f06f 0810 	mvn.w	r8, #16
    98aa:	e7eb      	b.n	9884 <bt_gatt_attr_write_ccc+0x6a>
    98ac:	2400      	movs	r4, #0
		for (i = 0; i < ccc->cfg_len; i++) {
    98ae:	429c      	cmp	r4, r3
    98b0:	d2f6      	bcs.n	98a0 <bt_gatt_attr_write_ccc+0x86>
			if (ccc->cfg[i].valid) {
    98b2:	682a      	ldr	r2, [r5, #0]
    98b4:	ea4f 1a04 	mov.w	sl, r4, lsl #4
    98b8:	eb02 000a 	add.w	r0, r2, sl
    98bc:	f812 200a 	ldrb.w	r2, [r2, sl]
    98c0:	2a00      	cmp	r2, #0
    98c2:	d0e2      	beq.n	988a <bt_gatt_attr_write_ccc+0x70>
		for (i = 0; i < ccc->cfg_len; i++) {
    98c4:	3401      	adds	r4, #1
    98c6:	e7f2      	b.n	98ae <bt_gatt_attr_write_ccc+0x94>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    98c8:	f06f 0806 	mvn.w	r8, #6
    98cc:	e7da      	b.n	9884 <bt_gatt_attr_write_ccc+0x6a>
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_ATTRIBUTE_LEN);
    98ce:	f06f 080c 	mvn.w	r8, #12
    98d2:	e7d7      	b.n	9884 <bt_gatt_attr_write_ccc+0x6a>

000098d4 <gatt_send>:
{
    98d4:	b538      	push	{r3, r4, r5, lr}
    98d6:	460d      	mov	r5, r1
	if (params) {
    98d8:	b153      	cbz	r3, 98f0 <gatt_send+0x1c>
    98da:	4619      	mov	r1, r3
		req->buf = buf;
    98dc:	611d      	str	r5, [r3, #16]
		req->func = func;
    98de:	605a      	str	r2, [r3, #4]
		req->destroy = destroy;
    98e0:	9b04      	ldr	r3, [sp, #16]
    98e2:	608b      	str	r3, [r1, #8]
		err = bt_att_req_send(conn, req);
    98e4:	f7ff fe88 	bl	95f8 <bt_att_req_send>
    98e8:	4604      	mov	r4, r0
	if (err) {
    98ea:	b92c      	cbnz	r4, 98f8 <gatt_send+0x24>
}
    98ec:	4620      	mov	r0, r4
    98ee:	bd38      	pop	{r3, r4, r5, pc}
		err = bt_att_send(conn, buf);
    98f0:	f7ff fe32 	bl	9558 <bt_att_send>
    98f4:	4604      	mov	r4, r0
    98f6:	e7f8      	b.n	98ea <gatt_send+0x16>
		net_buf_unref(buf);
    98f8:	4628      	mov	r0, r5
    98fa:	f010 fd2f 	bl	1a35c <net_buf_unref>
	return err;
    98fe:	e7f5      	b.n	98ec <gatt_send+0x18>

00009900 <gatt_indicate>:
{
    9900:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9904:	b082      	sub	sp, #8
    9906:	4680      	mov	r8, r0
    9908:	460c      	mov	r4, r1
				sizeof(*ind) + params->len);
    990a:	8c8a      	ldrh	r2, [r1, #36]	; 0x24
	buf = bt_att_create_pdu(conn, BT_ATT_OP_INDICATE,
    990c:	3202      	adds	r2, #2
    990e:	211d      	movs	r1, #29
    9910:	f7ff f9f6 	bl	8d00 <bt_att_create_pdu>
	if (!buf) {
    9914:	b1f8      	cbz	r0, 9956 <gatt_indicate+0x56>
    9916:	4606      	mov	r6, r0
	ind = net_buf_add(buf, sizeof(*ind));
    9918:	f100 0708 	add.w	r7, r0, #8
    991c:	2102      	movs	r1, #2
    991e:	4638      	mov	r0, r7
    9920:	f010 fd68 	bl	1a3f4 <net_buf_simple_add>
	ind->handle = sys_cpu_to_le16(params->attr->handle);
    9924:	69a3      	ldr	r3, [r4, #24]
    9926:	8a1b      	ldrh	r3, [r3, #16]
    9928:	4605      	mov	r5, r0
    992a:	f825 3b02 	strh.w	r3, [r5], #2
	net_buf_add(buf, params->len);
    992e:	8ca1      	ldrh	r1, [r4, #36]	; 0x24
    9930:	4638      	mov	r0, r7
    9932:	f010 fd5f 	bl	1a3f4 <net_buf_simple_add>
	memcpy(ind->value, params->data, params->len);
    9936:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
    9938:	6a21      	ldr	r1, [r4, #32]
    993a:	4628      	mov	r0, r5
    993c:	f7f6 fcc0 	bl	2c0 <memcpy>
	return gatt_send(conn, buf, gatt_indicate_rsp, params, NULL);
    9940:	2300      	movs	r3, #0
    9942:	9300      	str	r3, [sp, #0]
    9944:	4623      	mov	r3, r4
    9946:	4a05      	ldr	r2, [pc, #20]	; (995c <gatt_indicate+0x5c>)
    9948:	4631      	mov	r1, r6
    994a:	4640      	mov	r0, r8
    994c:	f7ff ffc2 	bl	98d4 <gatt_send>
}
    9950:	b002      	add	sp, #8
    9952:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOMEM;
    9956:	f06f 000b 	mvn.w	r0, #11
    995a:	e7f9      	b.n	9950 <gatt_indicate+0x50>
    995c:	00009725 	.word	0x00009725

00009960 <gatt_notify>:
{
    9960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9964:	4680      	mov	r8, r0
    9966:	468a      	mov	sl, r1
    9968:	4691      	mov	r9, r2
    996a:	461c      	mov	r4, r3
	buf = bt_att_create_pdu(conn, BT_ATT_OP_NOTIFY, sizeof(*nfy) + len);
    996c:	1c9a      	adds	r2, r3, #2
    996e:	211b      	movs	r1, #27
    9970:	f7ff f9c6 	bl	8d00 <bt_att_create_pdu>
	if (!buf) {
    9974:	b1d8      	cbz	r0, 99ae <gatt_notify+0x4e>
    9976:	4606      	mov	r6, r0
	nfy = net_buf_add(buf, sizeof(*nfy));
    9978:	f100 0708 	add.w	r7, r0, #8
    997c:	2102      	movs	r1, #2
    997e:	4638      	mov	r0, r7
    9980:	f010 fd38 	bl	1a3f4 <net_buf_simple_add>
	nfy->handle = sys_cpu_to_le16(handle);
    9984:	4605      	mov	r5, r0
    9986:	f825 ab02 	strh.w	sl, [r5], #2
	net_buf_add(buf, len);
    998a:	4621      	mov	r1, r4
    998c:	4638      	mov	r0, r7
    998e:	f010 fd31 	bl	1a3f4 <net_buf_simple_add>
	memcpy(nfy->value, data, len);
    9992:	4622      	mov	r2, r4
    9994:	4649      	mov	r1, r9
    9996:	4628      	mov	r0, r5
    9998:	f7f6 fc92 	bl	2c0 <memcpy>
    999c:	2300      	movs	r3, #0
    999e:	4632      	mov	r2, r6
    99a0:	2104      	movs	r1, #4
    99a2:	4640      	mov	r0, r8
    99a4:	f7fd febd 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    99a8:	2000      	movs	r0, #0
    99aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return -ENOMEM;
    99ae:	f06f 000b 	mvn.w	r0, #11
}
    99b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	...

000099b8 <notify_cb>:

static u8_t notify_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    99b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    99bc:	b082      	sub	sp, #8
    99be:	4604      	mov	r4, r0
    99c0:	460f      	mov	r7, r1
	struct notify_data *data = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	if (bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CCC)) {
    99c2:	2300      	movs	r3, #0
    99c4:	f88d 3000 	strb.w	r3, [sp]
    99c8:	f642 1302 	movw	r3, #10498	; 0x2902
    99cc:	f8ad 3002 	strh.w	r3, [sp, #2]
    99d0:	4669      	mov	r1, sp
    99d2:	6800      	ldr	r0, [r0, #0]
    99d4:	f7fa f991 	bl	3cfa <bt_uuid_cmp>
    99d8:	b938      	cbnz	r0, 99ea <notify_cb+0x32>
		}
		return BT_GATT_ITER_CONTINUE;
	}

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    99da:	68a2      	ldr	r2, [r4, #8]
    99dc:	4b29      	ldr	r3, [pc, #164]	; (9a84 <notify_cb+0xcc>)
    99de:	429a      	cmp	r2, r3
    99e0:	d012      	beq.n	9a08 <notify_cb+0x50>
		return BT_GATT_ITER_CONTINUE;
    99e2:	2001      	movs	r0, #1

		data->err = 0;
	}

	return BT_GATT_ITER_CONTINUE;
}
    99e4:	b002      	add	sp, #8
    99e6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!bt_uuid_cmp(attr->uuid, BT_UUID_GATT_CHRC)) {
    99ea:	6820      	ldr	r0, [r4, #0]
    99ec:	2300      	movs	r3, #0
    99ee:	f88d 3004 	strb.w	r3, [sp, #4]
    99f2:	f642 0303 	movw	r3, #10243	; 0x2803
    99f6:	f8ad 3006 	strh.w	r3, [sp, #6]
    99fa:	a901      	add	r1, sp, #4
    99fc:	f7fa f97d 	bl	3cfa <bt_uuid_cmp>
    9a00:	2800      	cmp	r0, #0
    9a02:	d0ef      	beq.n	99e4 <notify_cb+0x2c>
		return BT_GATT_ITER_CONTINUE;
    9a04:	2001      	movs	r0, #1
    9a06:	e7ed      	b.n	99e4 <notify_cb+0x2c>
	ccc = attr->user_data;
    9a08:	68e5      	ldr	r5, [r4, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9a0a:	2400      	movs	r4, #0
    9a0c:	e01a      	b.n	9a44 <notify_cb+0x8c>
			if (ccc->cfg == sc_ccc_cfg) {
    9a0e:	6828      	ldr	r0, [r5, #0]
    9a10:	4b1d      	ldr	r3, [pc, #116]	; (9a88 <notify_cb+0xd0>)
    9a12:	4298      	cmp	r0, r3
    9a14:	d115      	bne.n	9a42 <notify_cb+0x8a>
				sc_save(&ccc->cfg[i], data->params);
    9a16:	6979      	ldr	r1, [r7, #20]
    9a18:	4430      	add	r0, r6
    9a1a:	f7ff fee3 	bl	97e4 <sc_save>
			continue;
    9a1e:	e010      	b.n	9a42 <notify_cb+0x8a>
		if (data->type == BT_GATT_CCC_INDICATE) {
    9a20:	88bb      	ldrh	r3, [r7, #4]
    9a22:	2b02      	cmp	r3, #2
    9a24:	d024      	beq.n	9a70 <notify_cb+0xb8>
			err = gatt_notify(conn, data->attr->handle, data->data,
    9a26:	68b9      	ldr	r1, [r7, #8]
    9a28:	8a3b      	ldrh	r3, [r7, #16]
    9a2a:	68fa      	ldr	r2, [r7, #12]
    9a2c:	8a09      	ldrh	r1, [r1, #16]
    9a2e:	f7ff ff97 	bl	9960 <gatt_notify>
    9a32:	4606      	mov	r6, r0
		bt_conn_unref(conn);
    9a34:	4640      	mov	r0, r8
    9a36:	f7fc ffb9 	bl	69ac <bt_conn_unref>
		if (err < 0) {
    9a3a:	2e00      	cmp	r6, #0
    9a3c:	db1f      	blt.n	9a7e <notify_cb+0xc6>
		data->err = 0;
    9a3e:	2300      	movs	r3, #0
    9a40:	603b      	str	r3, [r7, #0]
	for (i = 0; i < ccc->cfg_len; i++) {
    9a42:	3401      	adds	r4, #1
    9a44:	686b      	ldr	r3, [r5, #4]
    9a46:	429c      	cmp	r4, r3
    9a48:	d217      	bcs.n	9a7a <notify_cb+0xc2>
		if (ccc->cfg[i].value != data->type) {
    9a4a:	6828      	ldr	r0, [r5, #0]
    9a4c:	0126      	lsls	r6, r4, #4
    9a4e:	4430      	add	r0, r6
    9a50:	8902      	ldrh	r2, [r0, #8]
    9a52:	88bb      	ldrh	r3, [r7, #4]
    9a54:	429a      	cmp	r2, r3
    9a56:	d1f4      	bne.n	9a42 <notify_cb+0x8a>
		conn = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9a58:	3001      	adds	r0, #1
    9a5a:	f7fc ff4d 	bl	68f8 <bt_conn_lookup_addr_le>
		if (!conn) {
    9a5e:	4680      	mov	r8, r0
    9a60:	2800      	cmp	r0, #0
    9a62:	d0d4      	beq.n	9a0e <notify_cb+0x56>
		if (conn->state != BT_CONN_CONNECTED) {
    9a64:	7b03      	ldrb	r3, [r0, #12]
    9a66:	2b03      	cmp	r3, #3
    9a68:	d0da      	beq.n	9a20 <notify_cb+0x68>
			bt_conn_unref(conn);
    9a6a:	f7fc ff9f 	bl	69ac <bt_conn_unref>
			continue;
    9a6e:	e7e8      	b.n	9a42 <notify_cb+0x8a>
			err = gatt_indicate(conn, data->params);
    9a70:	6979      	ldr	r1, [r7, #20]
    9a72:	f7ff ff45 	bl	9900 <gatt_indicate>
    9a76:	4606      	mov	r6, r0
    9a78:	e7dc      	b.n	9a34 <notify_cb+0x7c>
	return BT_GATT_ITER_CONTINUE;
    9a7a:	2001      	movs	r0, #1
    9a7c:	e7b2      	b.n	99e4 <notify_cb+0x2c>
			return BT_GATT_ITER_STOP;
    9a7e:	2000      	movs	r0, #0
    9a80:	e7b0      	b.n	99e4 <notify_cb+0x2c>
    9a82:	bf00      	nop
    9a84:	0000981b 	.word	0x0000981b
    9a88:	20000834 	.word	0x20000834

00009a8c <sc_restore>:

static void sc_restore(struct bt_gatt_ccc_cfg *cfg)
{
	struct sc_data *data = (struct sc_data *)cfg->data;

	if (!data->start && !data->end) {
    9a8c:	8981      	ldrh	r1, [r0, #12]
    9a8e:	b909      	cbnz	r1, 9a94 <sc_restore+0x8>
    9a90:	89c3      	ldrh	r3, [r0, #14]
    9a92:	b163      	cbz	r3, 9aae <sc_restore+0x22>
{
    9a94:	b510      	push	{r4, lr}
    9a96:	4604      	mov	r4, r0
	}

	BT_DBG("peer %s start 0x%04x end 0x%04x", bt_addr_le_str(&cfg->peer),
	       data->start, data->end);

	sc_indicate(&gatt_sc, data->start, data->end);
    9a98:	89c2      	ldrh	r2, [r0, #14]
    9a9a:	4805      	ldr	r0, [pc, #20]	; (9ab0 <sc_restore+0x24>)
    9a9c:	f7ff fe70 	bl	9780 <sc_indicate>

	/* Reset config data */
	memset(cfg->data, 0, sizeof(cfg->data));
    9aa0:	2204      	movs	r2, #4
    9aa2:	2100      	movs	r1, #0
    9aa4:	f104 000c 	add.w	r0, r4, #12
    9aa8:	f01f ff76 	bl	29998 <memset>
    9aac:	bd10      	pop	{r4, pc}
    9aae:	4770      	bx	lr
    9ab0:	200007dc 	.word	0x200007dc

00009ab4 <connected_cb>:
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9ab4:	6882      	ldr	r2, [r0, #8]
    9ab6:	4b16      	ldr	r3, [pc, #88]	; (9b10 <connected_cb+0x5c>)
    9ab8:	429a      	cmp	r2, r3
    9aba:	d001      	beq.n	9ac0 <connected_cb+0xc>
			return BT_GATT_ITER_CONTINUE;
		}
	}

	return BT_GATT_ITER_CONTINUE;
}
    9abc:	2001      	movs	r0, #1
    9abe:	4770      	bx	lr
{
    9ac0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9ac4:	460f      	mov	r7, r1
    9ac6:	4680      	mov	r8, r0
	ccc = attr->user_data;
    9ac8:	68c5      	ldr	r5, [r0, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9aca:	2400      	movs	r4, #0
    9acc:	e004      	b.n	9ad8 <connected_cb+0x24>
				sc_restore(&ccc->cfg[i]);
    9ace:	4430      	add	r0, r6
    9ad0:	f7ff ffdc 	bl	9a8c <sc_restore>
    9ad4:	e019      	b.n	9b0a <connected_cb+0x56>
	for (i = 0; i < ccc->cfg_len; i++) {
    9ad6:	3401      	adds	r4, #1
    9ad8:	686b      	ldr	r3, [r5, #4]
    9ada:	429c      	cmp	r4, r3
    9adc:	d215      	bcs.n	9b0a <connected_cb+0x56>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9ade:	6829      	ldr	r1, [r5, #0]
    9ae0:	0126      	lsls	r6, r4, #4
    9ae2:	4431      	add	r1, r6
    9ae4:	3101      	adds	r1, #1
    9ae6:	4638      	mov	r0, r7
    9ae8:	f7fc feb0 	bl	684c <bt_conn_addr_le_cmp>
    9aec:	2800      	cmp	r0, #0
    9aee:	d1f2      	bne.n	9ad6 <connected_cb+0x22>
		if (ccc->cfg[i].value) {
    9af0:	682b      	ldr	r3, [r5, #0]
    9af2:	4433      	add	r3, r6
    9af4:	891b      	ldrh	r3, [r3, #8]
    9af6:	2b00      	cmp	r3, #0
    9af8:	d0ed      	beq.n	9ad6 <connected_cb+0x22>
			gatt_ccc_changed(attr, ccc);
    9afa:	4629      	mov	r1, r5
    9afc:	4640      	mov	r0, r8
    9afe:	f7ff fdf9 	bl	96f4 <gatt_ccc_changed>
			if (ccc->cfg == sc_ccc_cfg) {
    9b02:	6828      	ldr	r0, [r5, #0]
    9b04:	4b03      	ldr	r3, [pc, #12]	; (9b14 <connected_cb+0x60>)
    9b06:	4298      	cmp	r0, r3
    9b08:	d0e1      	beq.n	9ace <connected_cb+0x1a>
}
    9b0a:	2001      	movs	r0, #1
    9b0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9b10:	0000981b 	.word	0x0000981b
    9b14:	20000834 	.word	0x20000834

00009b18 <disconnected_cb>:

static u8_t disconnected_cb(const struct bt_gatt_attr *attr, void *user_data)
{
    9b18:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = user_data;
	struct _bt_gatt_ccc *ccc;
	size_t i;

	/* Check attribute user_data must be of type struct _bt_gatt_ccc */
	if (attr->write != bt_gatt_attr_write_ccc) {
    9b1c:	6882      	ldr	r2, [r0, #8]
    9b1e:	4b29      	ldr	r3, [pc, #164]	; (9bc4 <disconnected_cb+0xac>)
    9b20:	429a      	cmp	r2, r3
    9b22:	d002      	beq.n	9b2a <disconnected_cb+0x12>
	}

	BT_DBG("ccc %p reseted", ccc);

	return BT_GATT_ITER_CONTINUE;
}
    9b24:	2001      	movs	r0, #1
    9b26:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	ccc = attr->user_data;
    9b2a:	68c5      	ldr	r5, [r0, #12]
	if (!ccc->value) {
    9b2c:	892b      	ldrh	r3, [r5, #8]
    9b2e:	2b00      	cmp	r3, #0
    9b30:	d0f8      	beq.n	9b24 <disconnected_cb+0xc>
    9b32:	4688      	mov	r8, r1
    9b34:	4607      	mov	r7, r0
    9b36:	2400      	movs	r4, #0
    9b38:	e012      	b.n	9b60 <disconnected_cb+0x48>
					bt_conn_unref(tmp);
    9b3a:	f7fc ff37 	bl	69ac <bt_conn_unref>
					return BT_GATT_ITER_CONTINUE;
    9b3e:	e7f1      	b.n	9b24 <disconnected_cb+0xc>
			if (!bt_addr_le_is_bonded(&conn->le.dst)) {
    9b40:	f108 0948 	add.w	r9, r8, #72	; 0x48
    9b44:	4648      	mov	r0, r9
    9b46:	f7fc f99f 	bl	5e88 <bt_addr_le_is_bonded>
    9b4a:	bb28      	cbnz	r0, 9b98 <disconnected_cb+0x80>
				ccc->cfg[i].valid = false;
    9b4c:	682b      	ldr	r3, [r5, #0]
    9b4e:	2100      	movs	r1, #0
    9b50:	5599      	strb	r1, [r3, r6]
				memset(&ccc->cfg[i].value, 0,
    9b52:	6828      	ldr	r0, [r5, #0]
    9b54:	4430      	add	r0, r6
    9b56:	2202      	movs	r2, #2
    9b58:	3008      	adds	r0, #8
    9b5a:	f01f ff1d 	bl	29998 <memset>
	for (i = 0; i < ccc->cfg_len; i++) {
    9b5e:	3401      	adds	r4, #1
    9b60:	686b      	ldr	r3, [r5, #4]
    9b62:	429c      	cmp	r4, r3
    9b64:	d220      	bcs.n	9ba8 <disconnected_cb+0x90>
		if (!ccc->cfg[i].value) {
    9b66:	6829      	ldr	r1, [r5, #0]
    9b68:	0126      	lsls	r6, r4, #4
    9b6a:	4431      	add	r1, r6
    9b6c:	890b      	ldrh	r3, [r1, #8]
    9b6e:	2b00      	cmp	r3, #0
    9b70:	d0f5      	beq.n	9b5e <disconnected_cb+0x46>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9b72:	3101      	adds	r1, #1
    9b74:	4640      	mov	r0, r8
    9b76:	f7fc fe69 	bl	684c <bt_conn_addr_le_cmp>
    9b7a:	2800      	cmp	r0, #0
    9b7c:	d0e0      	beq.n	9b40 <disconnected_cb+0x28>
			tmp = bt_conn_lookup_addr_le(&ccc->cfg[i].peer);
    9b7e:	6828      	ldr	r0, [r5, #0]
    9b80:	4430      	add	r0, r6
    9b82:	3001      	adds	r0, #1
    9b84:	f7fc feb8 	bl	68f8 <bt_conn_lookup_addr_le>
			if (tmp) {
    9b88:	2800      	cmp	r0, #0
    9b8a:	d0e8      	beq.n	9b5e <disconnected_cb+0x46>
				if (tmp->state == BT_CONN_CONNECTED) {
    9b8c:	7b02      	ldrb	r2, [r0, #12]
    9b8e:	2a03      	cmp	r2, #3
    9b90:	d0d3      	beq.n	9b3a <disconnected_cb+0x22>
				bt_conn_unref(tmp);
    9b92:	f7fc ff0b 	bl	69ac <bt_conn_unref>
    9b96:	e7e2      	b.n	9b5e <disconnected_cb+0x46>
				bt_addr_le_copy(&ccc->cfg[i].peer,
    9b98:	6828      	ldr	r0, [r5, #0]
    9b9a:	4430      	add	r0, r6
    9b9c:	2207      	movs	r2, #7
    9b9e:	4649      	mov	r1, r9
    9ba0:	3001      	adds	r0, #1
    9ba2:	f7f6 fb8d 	bl	2c0 <memcpy>
    9ba6:	e7da      	b.n	9b5e <disconnected_cb+0x46>
	memset(&ccc->value, 0, sizeof(ccc->value));
    9ba8:	2202      	movs	r2, #2
    9baa:	2100      	movs	r1, #0
    9bac:	f105 0008 	add.w	r0, r5, #8
    9bb0:	f01f fef2 	bl	29998 <memset>
	if (ccc->cfg_changed) {
    9bb4:	68eb      	ldr	r3, [r5, #12]
    9bb6:	2b00      	cmp	r3, #0
    9bb8:	d0b4      	beq.n	9b24 <disconnected_cb+0xc>
		ccc->cfg_changed(attr, ccc->value);
    9bba:	8929      	ldrh	r1, [r5, #8]
    9bbc:	4638      	mov	r0, r7
    9bbe:	4798      	blx	r3
    9bc0:	e7b0      	b.n	9b24 <disconnected_cb+0xc>
    9bc2:	bf00      	nop
    9bc4:	0000981b 	.word	0x0000981b

00009bc8 <bt_gatt_init>:
{
    9bc8:	b508      	push	{r3, lr}
	gatt_register(&gap_svc);
    9bca:	4805      	ldr	r0, [pc, #20]	; (9be0 <bt_gatt_init+0x18>)
    9bcc:	f7ff fd3c 	bl	9648 <gatt_register>
	gatt_register(&gatt_svc);
    9bd0:	4804      	ldr	r0, [pc, #16]	; (9be4 <bt_gatt_init+0x1c>)
    9bd2:	f7ff fd39 	bl	9648 <gatt_register>
	k_delayed_work_init(&gatt_sc.work, sc_process);
    9bd6:	4904      	ldr	r1, [pc, #16]	; (9be8 <bt_gatt_init+0x20>)
    9bd8:	4804      	ldr	r0, [pc, #16]	; (9bec <bt_gatt_init+0x24>)
    9bda:	f01f fcdb 	bl	29594 <k_delayed_work_init>
    9bde:	bd08      	pop	{r3, pc}
    9be0:	2000bb14 	.word	0x2000bb14
    9be4:	2000bb70 	.word	0x2000bb70
    9be8:	00009ebd 	.word	0x00009ebd
    9bec:	20000808 	.word	0x20000808

00009bf0 <bt_gatt_service_register>:
{
    9bf0:	b510      	push	{r4, lr}
    9bf2:	b082      	sub	sp, #8
    9bf4:	4604      	mov	r4, r0
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    9bf6:	6803      	ldr	r3, [r0, #0]
    9bf8:	6818      	ldr	r0, [r3, #0]
    9bfa:	2300      	movs	r3, #0
    9bfc:	f88d 3000 	strb.w	r3, [sp]
    9c00:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
    9c04:	f8ad 3002 	strh.w	r3, [sp, #2]
    9c08:	4669      	mov	r1, sp
    9c0a:	f7fa f876 	bl	3cfa <bt_uuid_cmp>
    9c0e:	b300      	cbz	r0, 9c52 <bt_gatt_service_register+0x62>
	    !bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GATT)) {
    9c10:	6823      	ldr	r3, [r4, #0]
    9c12:	6818      	ldr	r0, [r3, #0]
    9c14:	2300      	movs	r3, #0
    9c16:	f88d 3004 	strb.w	r3, [sp, #4]
    9c1a:	f641 0301 	movw	r3, #6145	; 0x1801
    9c1e:	f8ad 3006 	strh.w	r3, [sp, #6]
    9c22:	a901      	add	r1, sp, #4
    9c24:	f7fa f869 	bl	3cfa <bt_uuid_cmp>
	if (!bt_uuid_cmp(svc->attrs[0].uuid, BT_UUID_GAP) ||
    9c28:	b1b0      	cbz	r0, 9c58 <bt_gatt_service_register+0x68>
	err = gatt_register(svc);
    9c2a:	4620      	mov	r0, r4
    9c2c:	f7ff fd0c 	bl	9648 <gatt_register>
	if (err < 0) {
    9c30:	2800      	cmp	r0, #0
    9c32:	db0c      	blt.n	9c4e <bt_gatt_service_register+0x5e>
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9c34:	6821      	ldr	r1, [r4, #0]
		    svc->attrs[svc->attr_count - 1].handle);
    9c36:	88a2      	ldrh	r2, [r4, #4]
    9c38:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    9c3c:	0093      	lsls	r3, r2, #2
    9c3e:	3b14      	subs	r3, #20
    9c40:	440b      	add	r3, r1
	sc_indicate(&gatt_sc, svc->attrs[0].handle,
    9c42:	8a1a      	ldrh	r2, [r3, #16]
    9c44:	8a09      	ldrh	r1, [r1, #16]
    9c46:	4806      	ldr	r0, [pc, #24]	; (9c60 <bt_gatt_service_register+0x70>)
    9c48:	f7ff fd9a 	bl	9780 <sc_indicate>
	return 0;
    9c4c:	2000      	movs	r0, #0
}
    9c4e:	b002      	add	sp, #8
    9c50:	bd10      	pop	{r4, pc}
		return -EALREADY;
    9c52:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9c56:	e7fa      	b.n	9c4e <bt_gatt_service_register+0x5e>
    9c58:	f06f 0077 	mvn.w	r0, #119	; 0x77
    9c5c:	e7f7      	b.n	9c4e <bt_gatt_service_register+0x5e>
    9c5e:	bf00      	nop
    9c60:	200007dc 	.word	0x200007dc

00009c64 <bt_gatt_attr_read>:
{
    9c64:	b510      	push	{r4, lr}
    9c66:	f8bd 1008 	ldrh.w	r1, [sp, #8]
    9c6a:	f8bd 4010 	ldrh.w	r4, [sp, #16]
	if (offset > value_len) {
    9c6e:	42a1      	cmp	r1, r4
    9c70:	d80c      	bhi.n	9c8c <bt_gatt_attr_read+0x28>
    9c72:	4610      	mov	r0, r2
	len = min(buf_len, value_len - offset);
    9c74:	1a64      	subs	r4, r4, r1
    9c76:	42a3      	cmp	r3, r4
    9c78:	bfa8      	it	ge
    9c7a:	4623      	movge	r3, r4
    9c7c:	b29c      	uxth	r4, r3
	memcpy(buf, value + offset, len);
    9c7e:	4622      	mov	r2, r4
    9c80:	9b03      	ldr	r3, [sp, #12]
    9c82:	4419      	add	r1, r3
    9c84:	f7f6 fb1c 	bl	2c0 <memcpy>
}
    9c88:	4620      	mov	r0, r4
    9c8a:	bd10      	pop	{r4, pc}
		return BT_GATT_ERR(BT_ATT_ERR_INVALID_OFFSET);
    9c8c:	f06f 0406 	mvn.w	r4, #6
    9c90:	e7fa      	b.n	9c88 <bt_gatt_attr_read+0x24>

00009c92 <read_appearance>:
{
    9c92:	b530      	push	{r4, r5, lr}
    9c94:	b087      	sub	sp, #28
	u16_t appearance = sys_cpu_to_le16(gap_appearance);
    9c96:	ac06      	add	r4, sp, #24
    9c98:	2500      	movs	r5, #0
    9c9a:	f824 5d02 	strh.w	r5, [r4, #-2]!
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &appearance,
    9c9e:	2502      	movs	r5, #2
    9ca0:	9502      	str	r5, [sp, #8]
    9ca2:	9401      	str	r4, [sp, #4]
    9ca4:	f8bd 4028 	ldrh.w	r4, [sp, #40]	; 0x28
    9ca8:	9400      	str	r4, [sp, #0]
    9caa:	f7ff ffdb 	bl	9c64 <bt_gatt_attr_read>
}
    9cae:	b007      	add	sp, #28
    9cb0:	bd30      	pop	{r4, r5, pc}
	...

00009cb4 <read_name>:
{
    9cb4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9cb8:	b084      	sub	sp, #16
    9cba:	4605      	mov	r5, r0
    9cbc:	460e      	mov	r6, r1
    9cbe:	4617      	mov	r7, r2
    9cc0:	4698      	mov	r8, r3
				 strlen(gap_name));
    9cc2:	4c09      	ldr	r4, [pc, #36]	; (9ce8 <read_name+0x34>)
    9cc4:	4620      	mov	r0, r4
    9cc6:	f7f6 fd1b 	bl	700 <strlen>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, gap_name,
    9cca:	b280      	uxth	r0, r0
    9ccc:	9002      	str	r0, [sp, #8]
    9cce:	9401      	str	r4, [sp, #4]
    9cd0:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
    9cd4:	9300      	str	r3, [sp, #0]
    9cd6:	4643      	mov	r3, r8
    9cd8:	463a      	mov	r2, r7
    9cda:	4631      	mov	r1, r6
    9cdc:	4628      	mov	r0, r5
    9cde:	f7ff ffc1 	bl	9c64 <bt_gatt_attr_read>
}
    9ce2:	b004      	add	sp, #16
    9ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    9ce8:	0002d5ac 	.word	0x0002d5ac

00009cec <bt_gatt_attr_read_service>:
{
    9cec:	b570      	push	{r4, r5, r6, lr}
    9cee:	b086      	sub	sp, #24
    9cf0:	f8bd 5028 	ldrh.w	r5, [sp, #40]	; 0x28
	struct bt_uuid *uuid = attr->user_data;
    9cf4:	68cc      	ldr	r4, [r1, #12]
	if (uuid->type == BT_UUID_TYPE_16) {
    9cf6:	7826      	ldrb	r6, [r4, #0]
    9cf8:	b146      	cbz	r6, 9d0c <bt_gatt_attr_read_service+0x20>
				 BT_UUID_128(uuid)->val, 16);
    9cfa:	3401      	adds	r4, #1
	return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9cfc:	2610      	movs	r6, #16
    9cfe:	9602      	str	r6, [sp, #8]
    9d00:	9401      	str	r4, [sp, #4]
    9d02:	9500      	str	r5, [sp, #0]
    9d04:	f7ff ffae 	bl	9c64 <bt_gatt_attr_read>
}
    9d08:	b006      	add	sp, #24
    9d0a:	bd70      	pop	{r4, r5, r6, pc}
		u16_t uuid16 = sys_cpu_to_le16(BT_UUID_16(uuid)->val);
    9d0c:	8866      	ldrh	r6, [r4, #2]
    9d0e:	ac06      	add	r4, sp, #24
    9d10:	f824 6d02 	strh.w	r6, [r4, #-2]!
		return bt_gatt_attr_read(conn, attr, buf, len, offset,
    9d14:	2602      	movs	r6, #2
    9d16:	9602      	str	r6, [sp, #8]
    9d18:	9401      	str	r4, [sp, #4]
    9d1a:	9500      	str	r5, [sp, #0]
    9d1c:	f7ff ffa2 	bl	9c64 <bt_gatt_attr_read>
    9d20:	e7f2      	b.n	9d08 <bt_gatt_attr_read_service+0x1c>

00009d22 <bt_gatt_attr_read_ccc>:
{
    9d22:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    9d26:	b086      	sub	sp, #24
    9d28:	4607      	mov	r7, r0
    9d2a:	4688      	mov	r8, r1
    9d2c:	4691      	mov	r9, r2
    9d2e:	469a      	mov	sl, r3
	struct _bt_gatt_ccc *ccc = attr->user_data;
    9d30:	68cd      	ldr	r5, [r1, #12]
	for (i = 0; i < ccc->cfg_len; i++) {
    9d32:	2400      	movs	r4, #0
    9d34:	686b      	ldr	r3, [r5, #4]
    9d36:	429c      	cmp	r4, r3
    9d38:	d20e      	bcs.n	9d58 <bt_gatt_attr_read_ccc+0x36>
		if (bt_conn_addr_le_cmp(conn, &ccc->cfg[i].peer)) {
    9d3a:	6829      	ldr	r1, [r5, #0]
    9d3c:	0126      	lsls	r6, r4, #4
    9d3e:	4431      	add	r1, r6
    9d40:	3101      	adds	r1, #1
    9d42:	4638      	mov	r0, r7
    9d44:	f7fc fd82 	bl	684c <bt_conn_addr_le_cmp>
    9d48:	b108      	cbz	r0, 9d4e <bt_gatt_attr_read_ccc+0x2c>
	for (i = 0; i < ccc->cfg_len; i++) {
    9d4a:	3401      	adds	r4, #1
    9d4c:	e7f2      	b.n	9d34 <bt_gatt_attr_read_ccc+0x12>
		value = sys_cpu_to_le16(ccc->cfg[i].value);
    9d4e:	682b      	ldr	r3, [r5, #0]
    9d50:	441e      	add	r6, r3
    9d52:	8933      	ldrh	r3, [r6, #8]
    9d54:	f8ad 3016 	strh.w	r3, [sp, #22]
	if (i == ccc->cfg_len) {
    9d58:	686b      	ldr	r3, [r5, #4]
    9d5a:	429c      	cmp	r4, r3
    9d5c:	d010      	beq.n	9d80 <bt_gatt_attr_read_ccc+0x5e>
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &value,
    9d5e:	2302      	movs	r3, #2
    9d60:	9302      	str	r3, [sp, #8]
    9d62:	f10d 0316 	add.w	r3, sp, #22
    9d66:	9301      	str	r3, [sp, #4]
    9d68:	f8bd 3038 	ldrh.w	r3, [sp, #56]	; 0x38
    9d6c:	9300      	str	r3, [sp, #0]
    9d6e:	4653      	mov	r3, sl
    9d70:	464a      	mov	r2, r9
    9d72:	4641      	mov	r1, r8
    9d74:	4638      	mov	r0, r7
    9d76:	f7ff ff75 	bl	9c64 <bt_gatt_attr_read>
}
    9d7a:	b006      	add	sp, #24
    9d7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		value = 0x0000;
    9d80:	2300      	movs	r3, #0
    9d82:	f8ad 3016 	strh.w	r3, [sp, #22]
    9d86:	e7ea      	b.n	9d5e <bt_gatt_attr_read_ccc+0x3c>

00009d88 <bt_gatt_foreach_attr>:
{
    9d88:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    9d8c:	4606      	mov	r6, r0
    9d8e:	460f      	mov	r7, r1
    9d90:	4690      	mov	r8, r2
    9d92:	4699      	mov	r9, r3
	return list->head;
    9d94:	4b15      	ldr	r3, [pc, #84]	; (9dec <bt_gatt_foreach_attr+0x64>)
    9d96:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9d98:	b10d      	cbz	r5, 9d9e <bt_gatt_foreach_attr+0x16>
    9d9a:	3d08      	subs	r5, #8
    9d9c:	e01e      	b.n	9ddc <bt_gatt_foreach_attr+0x54>
    9d9e:	2500      	movs	r5, #0
    9da0:	e01c      	b.n	9ddc <bt_gatt_foreach_attr+0x54>
		for (i = 0; i < svc->attr_count; i++) {
    9da2:	3401      	adds	r4, #1
    9da4:	88ab      	ldrh	r3, [r5, #4]
    9da6:	429c      	cmp	r4, r3
    9da8:	da0f      	bge.n	9dca <bt_gatt_foreach_attr+0x42>
			struct bt_gatt_attr *attr = &svc->attrs[i];
    9daa:	6828      	ldr	r0, [r5, #0]
    9dac:	eb04 0284 	add.w	r2, r4, r4, lsl #2
    9db0:	0093      	lsls	r3, r2, #2
    9db2:	4418      	add	r0, r3
			if (attr->handle < start_handle ||
    9db4:	8a03      	ldrh	r3, [r0, #16]
    9db6:	42b3      	cmp	r3, r6
    9db8:	d3f3      	bcc.n	9da2 <bt_gatt_foreach_attr+0x1a>
    9dba:	42bb      	cmp	r3, r7
    9dbc:	d8f1      	bhi.n	9da2 <bt_gatt_foreach_attr+0x1a>
			if (func(attr, user_data) == BT_GATT_ITER_STOP) {
    9dbe:	4649      	mov	r1, r9
    9dc0:	47c0      	blx	r8
    9dc2:	2800      	cmp	r0, #0
    9dc4:	d1ed      	bne.n	9da2 <bt_gatt_foreach_attr+0x1a>
    9dc6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9dca:	f115 0308 	adds.w	r3, r5, #8
    9dce:	d009      	beq.n	9de4 <bt_gatt_foreach_attr+0x5c>
	return node->next;
    9dd0:	68aa      	ldr	r2, [r5, #8]
	SYS_SLIST_FOR_EACH_CONTAINER(&db, svc, node) {
    9dd2:	b14a      	cbz	r2, 9de8 <bt_gatt_foreach_attr+0x60>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9dd4:	b103      	cbz	r3, 9dd8 <bt_gatt_foreach_attr+0x50>
	return node->next;
    9dd6:	68ab      	ldr	r3, [r5, #8]
    9dd8:	f1a3 0508 	sub.w	r5, r3, #8
    9ddc:	2d00      	cmp	r5, #0
    9dde:	d0f2      	beq.n	9dc6 <bt_gatt_foreach_attr+0x3e>
    9de0:	2400      	movs	r4, #0
    9de2:	e7df      	b.n	9da4 <bt_gatt_foreach_attr+0x1c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
    9de4:	461a      	mov	r2, r3
    9de6:	e7f4      	b.n	9dd2 <bt_gatt_foreach_attr+0x4a>
    9de8:	2500      	movs	r5, #0
    9dea:	e7f7      	b.n	9ddc <bt_gatt_foreach_attr+0x54>
    9dec:	200007d4 	.word	0x200007d4

00009df0 <bt_gatt_attr_next>:
{
    9df0:	b500      	push	{lr}
    9df2:	b083      	sub	sp, #12
	struct bt_gatt_attr *next = NULL;
    9df4:	ab02      	add	r3, sp, #8
    9df6:	2200      	movs	r2, #0
    9df8:	f843 2d04 	str.w	r2, [r3, #-4]!
	bt_gatt_foreach_attr(attr->handle + 1, attr->handle + 1, find_next,
    9dfc:	8a00      	ldrh	r0, [r0, #16]
    9dfe:	3001      	adds	r0, #1
    9e00:	b280      	uxth	r0, r0
    9e02:	4a04      	ldr	r2, [pc, #16]	; (9e14 <bt_gatt_attr_next+0x24>)
    9e04:	4601      	mov	r1, r0
    9e06:	f7ff ffbf 	bl	9d88 <bt_gatt_foreach_attr>
}
    9e0a:	9801      	ldr	r0, [sp, #4]
    9e0c:	b003      	add	sp, #12
    9e0e:	f85d fb04 	ldr.w	pc, [sp], #4
    9e12:	bf00      	nop
    9e14:	000096ef 	.word	0x000096ef

00009e18 <bt_gatt_attr_read_chrc>:
{
    9e18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    9e1c:	b08a      	sub	sp, #40	; 0x28
    9e1e:	4606      	mov	r6, r0
    9e20:	460c      	mov	r4, r1
    9e22:	4617      	mov	r7, r2
    9e24:	4698      	mov	r8, r3
	struct bt_gatt_chrc *chrc = attr->user_data;
    9e26:	68cd      	ldr	r5, [r1, #12]
	pdu.properties = chrc->properties;
    9e28:	792b      	ldrb	r3, [r5, #4]
    9e2a:	f88d 3014 	strb.w	r3, [sp, #20]
	next = bt_gatt_attr_next(attr);
    9e2e:	4608      	mov	r0, r1
    9e30:	f7ff ffde 	bl	9df0 <bt_gatt_attr_next>
	if (!next) {
    9e34:	b1c0      	cbz	r0, 9e68 <bt_gatt_attr_read_chrc+0x50>
		pdu.value_handle = sys_cpu_to_le16(next->handle);
    9e36:	8a03      	ldrh	r3, [r0, #16]
    9e38:	f8ad 3015 	strh.w	r3, [sp, #21]
	if (chrc->uuid->type == BT_UUID_TYPE_16) {
    9e3c:	6829      	ldr	r1, [r5, #0]
    9e3e:	780b      	ldrb	r3, [r1, #0]
    9e40:	b9c3      	cbnz	r3, 9e74 <bt_gatt_attr_read_chrc+0x5c>
		pdu.uuid16 = sys_cpu_to_le16(BT_UUID_16(chrc->uuid)->val);
    9e42:	884b      	ldrh	r3, [r1, #2]
    9e44:	f8ad 3017 	strh.w	r3, [sp, #23]
		value_len += 2;
    9e48:	2305      	movs	r3, #5
	return bt_gatt_attr_read(conn, attr, buf, len, offset, &pdu, value_len);
    9e4a:	9302      	str	r3, [sp, #8]
    9e4c:	ab05      	add	r3, sp, #20
    9e4e:	9301      	str	r3, [sp, #4]
    9e50:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
    9e54:	9300      	str	r3, [sp, #0]
    9e56:	4643      	mov	r3, r8
    9e58:	463a      	mov	r2, r7
    9e5a:	4621      	mov	r1, r4
    9e5c:	4630      	mov	r0, r6
    9e5e:	f7ff ff01 	bl	9c64 <bt_gatt_attr_read>
}
    9e62:	b00a      	add	sp, #40	; 0x28
    9e64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		pdu.value_handle = 0x0000;
    9e68:	2300      	movs	r3, #0
    9e6a:	f88d 3015 	strb.w	r3, [sp, #21]
    9e6e:	f88d 3016 	strb.w	r3, [sp, #22]
    9e72:	e7e3      	b.n	9e3c <bt_gatt_attr_read_chrc+0x24>
		memcpy(pdu.uuid, BT_UUID_128(chrc->uuid)->val, 16);
    9e74:	2210      	movs	r2, #16
    9e76:	3101      	adds	r1, #1
    9e78:	f10d 0017 	add.w	r0, sp, #23
    9e7c:	f7f6 fa20 	bl	2c0 <memcpy>
		value_len += 16;
    9e80:	2313      	movs	r3, #19
    9e82:	e7e2      	b.n	9e4a <bt_gatt_attr_read_chrc+0x32>

00009e84 <bt_gatt_indicate>:
{
    9e84:	b500      	push	{lr}
    9e86:	b087      	sub	sp, #28
	if (conn) {
    9e88:	b120      	cbz	r0, 9e94 <bt_gatt_indicate+0x10>
		return gatt_indicate(conn, params);
    9e8a:	f7ff fd39 	bl	9900 <gatt_indicate>
}
    9e8e:	b007      	add	sp, #28
    9e90:	f85d fb04 	ldr.w	pc, [sp], #4
	nfy.err = -ENOTCONN;
    9e94:	f06f 037f 	mvn.w	r3, #127	; 0x7f
    9e98:	9300      	str	r3, [sp, #0]
	nfy.type = BT_GATT_CCC_INDICATE;
    9e9a:	2302      	movs	r3, #2
    9e9c:	f8ad 3004 	strh.w	r3, [sp, #4]
	nfy.params = params;
    9ea0:	9105      	str	r1, [sp, #20]
	bt_gatt_foreach_attr(params->attr->handle, 0xffff, notify_cb, &nfy);
    9ea2:	6988      	ldr	r0, [r1, #24]
    9ea4:	466b      	mov	r3, sp
    9ea6:	4a04      	ldr	r2, [pc, #16]	; (9eb8 <bt_gatt_indicate+0x34>)
    9ea8:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9eac:	8a00      	ldrh	r0, [r0, #16]
    9eae:	f7ff ff6b 	bl	9d88 <bt_gatt_foreach_attr>
	return nfy.err;
    9eb2:	9800      	ldr	r0, [sp, #0]
    9eb4:	e7eb      	b.n	9e8e <bt_gatt_indicate+0xa>
    9eb6:	bf00      	nop
    9eb8:	000099b9 	.word	0x000099b9

00009ebc <sc_process>:
{
    9ebc:	b510      	push	{r4, lr}
    9ebe:	b082      	sub	sp, #8
    9ec0:	4603      	mov	r3, r0
	sc_range[0] = sys_cpu_to_le16(sc->start);
    9ec2:	f830 2c04 	ldrh.w	r2, [r0, #-4]
    9ec6:	f8ad 2004 	strh.w	r2, [sp, #4]
	sc_range[1] = sys_cpu_to_le16(sc->end);
    9eca:	f830 2c02 	ldrh.w	r2, [r0, #-2]
    9ece:	f8ad 2006 	strh.w	r2, [sp, #6]
	atomic_clear_bit(sc->flags, SC_RANGE_CHANGED);
    9ed2:	f1a0 012c 	sub.w	r1, r0, #44	; 0x2c
    9ed6:	f100 0428 	add.w	r4, r0, #40	; 0x28
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    9eda:	f3bf 8f5b 	dmb	ish
    9ede:	e854 2f00 	ldrex	r2, [r4]
    9ee2:	f022 0201 	bic.w	r2, r2, #1
    9ee6:	e844 2000 	strex	r0, r2, [r4]
    9eea:	2800      	cmp	r0, #0
    9eec:	d1f7      	bne.n	9ede <sc_process+0x22>
    9eee:	f3bf 8f5b 	dmb	ish
	sc->start = 0;
    9ef2:	2000      	movs	r0, #0
    9ef4:	f823 0c04 	strh.w	r0, [r3, #-4]
	sc->end = 0;
    9ef8:	f823 0c02 	strh.w	r0, [r3, #-2]
	sc->params.attr = &gatt_attrs[2];
    9efc:	4a0e      	ldr	r2, [pc, #56]	; (9f38 <sc_process+0x7c>)
    9efe:	f843 2c14 	str.w	r2, [r3, #-20]
	sc->params.func = sc_indicate_rsp;
    9f02:	4a0e      	ldr	r2, [pc, #56]	; (9f3c <sc_process+0x80>)
    9f04:	f843 2c10 	str.w	r2, [r3, #-16]
	sc->params.data = &sc_range[0];
    9f08:	aa01      	add	r2, sp, #4
    9f0a:	f843 2c0c 	str.w	r2, [r3, #-12]
	sc->params.len = sizeof(sc_range);
    9f0e:	2204      	movs	r2, #4
    9f10:	f823 2c08 	strh.w	r2, [r3, #-8]
	if (bt_gatt_indicate(NULL, &sc->params)) {
    9f14:	f7ff ffb6 	bl	9e84 <bt_gatt_indicate>
    9f18:	b108      	cbz	r0, 9f1e <sc_process+0x62>
}
    9f1a:	b002      	add	sp, #8
    9f1c:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    9f1e:	f3bf 8f5b 	dmb	ish
    9f22:	e854 3f00 	ldrex	r3, [r4]
    9f26:	f043 0302 	orr.w	r3, r3, #2
    9f2a:	e844 3200 	strex	r2, r3, [r4]
    9f2e:	2a00      	cmp	r2, #0
    9f30:	d1f7      	bne.n	9f22 <sc_process+0x66>
    9f32:	f3bf 8f5b 	dmb	ish
    9f36:	e7f0      	b.n	9f1a <sc_process+0x5e>
    9f38:	2000bb48 	.word	0x2000bb48
    9f3c:	00009735 	.word	0x00009735

00009f40 <bt_gatt_connected>:
}

#endif /* CONFIG_BT_GATT_CLIENT */

void bt_gatt_connected(struct bt_conn *conn)
{
    9f40:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, connected_cb, conn);
    9f42:	4603      	mov	r3, r0
    9f44:	4a03      	ldr	r2, [pc, #12]	; (9f54 <bt_gatt_connected+0x14>)
    9f46:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f4a:	2001      	movs	r0, #1
    9f4c:	f7ff ff1c 	bl	9d88 <bt_gatt_foreach_attr>
    9f50:	bd08      	pop	{r3, pc}
    9f52:	bf00      	nop
    9f54:	00009ab5 	.word	0x00009ab5

00009f58 <bt_gatt_disconnected>:
	add_subscriptions(conn);
#endif /* CONFIG_BT_GATT_CLIENT */
}

void bt_gatt_disconnected(struct bt_conn *conn)
{
    9f58:	b508      	push	{r3, lr}
	BT_DBG("conn %p", conn);
	bt_gatt_foreach_attr(0x0001, 0xffff, disconnected_cb, conn);
    9f5a:	4603      	mov	r3, r0
    9f5c:	4a03      	ldr	r2, [pc, #12]	; (9f6c <bt_gatt_disconnected+0x14>)
    9f5e:	f64f 71ff 	movw	r1, #65535	; 0xffff
    9f62:	2001      	movs	r0, #1
    9f64:	f7ff ff10 	bl	9d88 <bt_gatt_foreach_attr>
    9f68:	bd08      	pop	{r3, pc}
    9f6a:	bf00      	nop
    9f6c:	00009b19 	.word	0x00009b19

00009f70 <get_io_capa>:
static bool sc_local_pkey_valid;
static u8_t sc_public_key[64];

static u8_t get_io_capa(void)
{
	if (!bt_auth) {
    9f70:	4b11      	ldr	r3, [pc, #68]	; (9fb8 <get_io_capa+0x48>)
    9f72:	681b      	ldr	r3, [r3, #0]
    9f74:	b1db      	cbz	r3, 9fae <get_io_capa+0x3e>
		return BT_SMP_IO_NO_INPUT_OUTPUT;
	}

	/* Passkey Confirmation is valid only for LE SC */
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9f76:	681a      	ldr	r2, [r3, #0]
    9f78:	b152      	cbz	r2, 9f90 <get_io_capa+0x20>
    9f7a:	6859      	ldr	r1, [r3, #4]
    9f7c:	b141      	cbz	r1, 9f90 <get_io_capa+0x20>
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9f7e:	6899      	ldr	r1, [r3, #8]
	if (bt_auth->passkey_display && bt_auth->passkey_entry &&
    9f80:	b109      	cbz	r1, 9f86 <get_io_capa+0x16>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9f82:	2004      	movs	r0, #4
    9f84:	4770      	bx	lr
	    (bt_auth->passkey_confirm || !sc_supported)) {
    9f86:	490d      	ldr	r1, [pc, #52]	; (9fbc <get_io_capa+0x4c>)
    9f88:	7809      	ldrb	r1, [r1, #0]
    9f8a:	b909      	cbnz	r1, 9f90 <get_io_capa+0x20>
		return BT_SMP_IO_KEYBOARD_DISPLAY;
    9f8c:	2004      	movs	r0, #4
    9f8e:	4770      	bx	lr
	}

	/* DisplayYesNo is useful only for LE SC */
	if (sc_supported && bt_auth->passkey_display &&
    9f90:	490a      	ldr	r1, [pc, #40]	; (9fbc <get_io_capa+0x4c>)
    9f92:	7809      	ldrb	r1, [r1, #0]
    9f94:	b121      	cbz	r1, 9fa0 <get_io_capa+0x30>
    9f96:	b11a      	cbz	r2, 9fa0 <get_io_capa+0x30>
	    bt_auth->passkey_confirm) {
    9f98:	6899      	ldr	r1, [r3, #8]
	if (sc_supported && bt_auth->passkey_display &&
    9f9a:	b109      	cbz	r1, 9fa0 <get_io_capa+0x30>
		return BT_SMP_IO_DISPLAY_YESNO;
    9f9c:	2001      	movs	r0, #1
    9f9e:	4770      	bx	lr
	}

	if (bt_auth->passkey_entry) {
    9fa0:	685b      	ldr	r3, [r3, #4]
    9fa2:	b10b      	cbz	r3, 9fa8 <get_io_capa+0x38>
		return BT_SMP_IO_KEYBOARD_ONLY;
    9fa4:	2002      	movs	r0, #2
    9fa6:	4770      	bx	lr
	}

	if (bt_auth->passkey_display) {
    9fa8:	b11a      	cbz	r2, 9fb2 <get_io_capa+0x42>
		return BT_SMP_IO_DISPLAY_ONLY;
    9faa:	2000      	movs	r0, #0
    9fac:	4770      	bx	lr
		return BT_SMP_IO_NO_INPUT_OUTPUT;
    9fae:	2003      	movs	r0, #3
    9fb0:	4770      	bx	lr
	}

	return BT_SMP_IO_NO_INPUT_OUTPUT;
    9fb2:	2003      	movs	r0, #3
}
    9fb4:	4770      	bx	lr
    9fb6:	bf00      	nop
    9fb8:	20002a10 	.word	0x20002a10
    9fbc:	20000a3c 	.word	0x20000a3c

00009fc0 <get_pair_method>:

static u8_t get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    9fc0:	2904      	cmp	r1, #4
    9fc2:	d811      	bhi.n	9fe8 <get_pair_method+0x28>

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    9fc4:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    9fc8:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    9fcc:	4313      	orrs	r3, r2
    9fce:	f013 0f04 	tst.w	r3, #4
    9fd2:	d00b      	beq.n	9fec <get_pair_method+0x2c>
{
    9fd4:	b510      	push	{r4, lr}
    9fd6:	460c      	mov	r4, r1
		return JUST_WORKS;
	}

	return gen_method_sc[remote_io][get_io_capa()];
    9fd8:	f7ff ffca 	bl	9f70 <get_io_capa>
    9fdc:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    9fe0:	4c03      	ldr	r4, [pc, #12]	; (9ff0 <get_pair_method+0x30>)
    9fe2:	4421      	add	r1, r4
    9fe4:	5c08      	ldrb	r0, [r1, r0]
    9fe6:	bd10      	pop	{r4, pc}
		return JUST_WORKS;
    9fe8:	2000      	movs	r0, #0
    9fea:	4770      	bx	lr
		return JUST_WORKS;
    9fec:	2000      	movs	r0, #0
    9fee:	4770      	bx	lr
    9ff0:	0002d5d0 	.word	0x0002d5d0

00009ff4 <get_encryption_key_size>:
	/*
	 * The smaller value of the initiating and responding devices maximum
	 * encryption key length parameters shall be used as the encryption key
	 * size.
	 */
	return min(req->max_key_size, rsp->max_key_size);
    9ff4:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
    9ff8:	f890 00a9 	ldrb.w	r0, [r0, #169]	; 0xa9
}
    9ffc:	4290      	cmp	r0, r2
    9ffe:	bf28      	it	cs
    a000:	4610      	movcs	r0, r2
    a002:	4770      	bx	lr

0000a004 <xor_128>:
	return 0;
}

#if !defined(CONFIG_BT_SMP_SC_ONLY)
static void xor_128(const u8_t p[16], const u8_t q[16], u8_t r[16])
{
    a004:	b430      	push	{r4, r5}
	size_t len = 16;
    a006:	2310      	movs	r3, #16

	while (len--) {
    a008:	e007      	b.n	a01a <xor_128+0x16>
		*r++ = *p++ ^ *q++;
    a00a:	7803      	ldrb	r3, [r0, #0]
    a00c:	780d      	ldrb	r5, [r1, #0]
    a00e:	406b      	eors	r3, r5
    a010:	7013      	strb	r3, [r2, #0]
	while (len--) {
    a012:	4623      	mov	r3, r4
		*r++ = *p++ ^ *q++;
    a014:	3201      	adds	r2, #1
    a016:	3101      	adds	r1, #1
    a018:	3001      	adds	r0, #1
	while (len--) {
    a01a:	1e5c      	subs	r4, r3, #1
    a01c:	2b00      	cmp	r3, #0
    a01e:	d1f4      	bne.n	a00a <xor_128+0x6>
	}
}
    a020:	bc30      	pop	{r4, r5}
    a022:	4770      	bx	lr

0000a024 <legacy_get_pair_method>:
static u8_t legacy_get_pair_method(struct bt_smp *smp, u8_t remote_io)
{
	struct bt_smp_pairing *req, *rsp;
	u8_t method;

	if (remote_io > BT_SMP_IO_KEYBOARD_DISPLAY)
    a024:	2904      	cmp	r1, #4
    a026:	d819      	bhi.n	a05c <legacy_get_pair_method+0x38>
{
    a028:	b538      	push	{r3, r4, r5, lr}

	req = (struct bt_smp_pairing *)&smp->preq[1];
	rsp = (struct bt_smp_pairing *)&smp->prsp[1];

	/* if none side requires MITM use JustWorks */
	if (!((req->auth_req | rsp->auth_req) & BT_SMP_AUTH_MITM)) {
    a02a:	f890 30a8 	ldrb.w	r3, [r0, #168]	; 0xa8
    a02e:	f890 20af 	ldrb.w	r2, [r0, #175]	; 0xaf
    a032:	4313      	orrs	r3, r2
    a034:	f013 0f04 	tst.w	r3, #4
    a038:	d012      	beq.n	a060 <legacy_get_pair_method+0x3c>
    a03a:	460c      	mov	r4, r1
    a03c:	4605      	mov	r5, r0
		return JUST_WORKS;
	}

	method = gen_method_legacy[remote_io][get_io_capa()];
    a03e:	f7ff ff97 	bl	9f70 <get_io_capa>
    a042:	eb04 0184 	add.w	r1, r4, r4, lsl #2
    a046:	4c08      	ldr	r4, [pc, #32]	; (a068 <legacy_get_pair_method+0x44>)
    a048:	4421      	add	r1, r4
    a04a:	5c08      	ldrb	r0, [r1, r0]

	/* if both sides have KeyboardDisplay capabilities, initiator displays
	 * and responder inputs
	 */
	if (method == PASSKEY_ROLE) {
    a04c:	2804      	cmp	r0, #4
    a04e:	d000      	beq.n	a052 <legacy_get_pair_method+0x2e>
			method = PASSKEY_INPUT;
		}
	}

	return method;
}
    a050:	bd38      	pop	{r3, r4, r5, pc}
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    a052:	682b      	ldr	r3, [r5, #0]
    a054:	78db      	ldrb	r3, [r3, #3]
    a056:	b92b      	cbnz	r3, a064 <legacy_get_pair_method+0x40>
			method = PASSKEY_DISPLAY;
    a058:	2002      	movs	r0, #2
    a05a:	bd38      	pop	{r3, r4, r5, pc}
		return JUST_WORKS;
    a05c:	2000      	movs	r0, #0
    a05e:	4770      	bx	lr
		return JUST_WORKS;
    a060:	2000      	movs	r0, #0
    a062:	bd38      	pop	{r3, r4, r5, pc}
			method = PASSKEY_INPUT;
    a064:	2001      	movs	r0, #1
    a066:	e7f3      	b.n	a050 <legacy_get_pair_method+0x2c>
    a068:	0002d5b4 	.word	0x0002d5b4

0000a06c <get_auth>:

	return 0;
}

static u8_t get_auth(u8_t auth)
{
    a06c:	b510      	push	{r4, lr}
	if (sc_supported) {
    a06e:	4b09      	ldr	r3, [pc, #36]	; (a094 <get_auth+0x28>)
    a070:	781b      	ldrb	r3, [r3, #0]
    a072:	b143      	cbz	r3, a086 <get_auth+0x1a>
		auth &= BT_SMP_AUTH_MASK_SC;
    a074:	f000 040f 	and.w	r4, r0, #15
	} else {
		auth &= BT_SMP_AUTH_MASK;
	}

	if (get_io_capa() == BT_SMP_IO_NO_INPUT_OUTPUT) {
    a078:	f7ff ff7a 	bl	9f70 <get_io_capa>
    a07c:	2803      	cmp	r0, #3
    a07e:	d005      	beq.n	a08c <get_auth+0x20>
		auth &= ~(BT_SMP_AUTH_MITM);
	} else {
		auth |= BT_SMP_AUTH_MITM;
    a080:	f044 0004 	orr.w	r0, r4, #4
	}

	return auth;
}
    a084:	bd10      	pop	{r4, pc}
		auth &= BT_SMP_AUTH_MASK;
    a086:	f000 0407 	and.w	r4, r0, #7
    a08a:	e7f5      	b.n	a078 <get_auth+0xc>
		auth &= ~(BT_SMP_AUTH_MITM);
    a08c:	f004 000b 	and.w	r0, r4, #11
    a090:	bd10      	pop	{r4, pc}
    a092:	bf00      	nop
    a094:	20000a3c 	.word	0x20000a3c

0000a098 <sec_level_reachable>:

static bool sec_level_reachable(struct bt_conn *conn)
{
    a098:	b508      	push	{r3, lr}
	switch (conn->required_sec_level) {
    a09a:	7a43      	ldrb	r3, [r0, #9]
    a09c:	3b01      	subs	r3, #1
    a09e:	2b03      	cmp	r3, #3
    a0a0:	d818      	bhi.n	a0d4 <sec_level_reachable+0x3c>
    a0a2:	e8df f003 	tbb	[pc, r3]
    a0a6:	0202      	.short	0x0202
    a0a8:	0a04      	.short	0x0a04
	case BT_SECURITY_LOW:
	case BT_SECURITY_MEDIUM:
		return true;
    a0aa:	2001      	movs	r0, #1
    a0ac:	bd08      	pop	{r3, pc}
	case BT_SECURITY_HIGH:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT;
    a0ae:	f7ff ff5f 	bl	9f70 <get_io_capa>
    a0b2:	3803      	subs	r0, #3
    a0b4:	bf18      	it	ne
    a0b6:	2001      	movne	r0, #1
    a0b8:	bd08      	pop	{r3, pc}
	case BT_SECURITY_FIPS:
		return get_io_capa() != BT_SMP_IO_NO_INPUT_OUTPUT &&
    a0ba:	f7ff ff59 	bl	9f70 <get_io_capa>
    a0be:	2803      	cmp	r0, #3
    a0c0:	d004      	beq.n	a0cc <sec_level_reachable+0x34>
    a0c2:	4b05      	ldr	r3, [pc, #20]	; (a0d8 <sec_level_reachable+0x40>)
    a0c4:	781b      	ldrb	r3, [r3, #0]
    a0c6:	b91b      	cbnz	r3, a0d0 <sec_level_reachable+0x38>
    a0c8:	2000      	movs	r0, #0
    a0ca:	bd08      	pop	{r3, pc}
    a0cc:	2000      	movs	r0, #0
    a0ce:	bd08      	pop	{r3, pc}
    a0d0:	2001      	movs	r0, #1
    a0d2:	bd08      	pop	{r3, pc}
		       sc_supported;
	default:
		return false;
    a0d4:	2000      	movs	r0, #0
	}
}
    a0d6:	bd08      	pop	{r3, pc}
    a0d8:	20000a3c 	.word	0x20000a3c

0000a0dc <bt_smp_accept>:
		.recv = bt_smp_recv,
	};

	BT_DBG("conn %p handle %u", conn, conn->handle);

	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a0dc:	2000      	movs	r0, #0
    a0de:	b110      	cbz	r0, a0e6 <bt_smp_accept+0xa>
		return 0;
	}

	BT_ERR("No available SMP context for conn %p", conn);

	return -ENOMEM;
    a0e0:	f06f 000b 	mvn.w	r0, #11
}
    a0e4:	4770      	bx	lr
		if (smp->chan.chan.conn) {
    a0e6:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a0ea:	fb03 f300 	mul.w	r3, r3, r0
    a0ee:	4a07      	ldr	r2, [pc, #28]	; (a10c <bt_smp_accept+0x30>)
    a0f0:	58d3      	ldr	r3, [r2, r3]
    a0f2:	b10b      	cbz	r3, a0f8 <bt_smp_accept+0x1c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    a0f4:	3001      	adds	r0, #1
    a0f6:	e7f2      	b.n	a0de <bt_smp_accept+0x2>
		smp->chan.chan.ops = &ops;
    a0f8:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    a0fc:	4a03      	ldr	r2, [pc, #12]	; (a10c <bt_smp_accept+0x30>)
    a0fe:	fb03 2300 	mla	r3, r3, r0, r2
    a102:	4a03      	ldr	r2, [pc, #12]	; (a110 <bt_smp_accept+0x34>)
    a104:	605a      	str	r2, [r3, #4]
		*chan = &smp->chan.chan;
    a106:	600b      	str	r3, [r1, #0]
		return 0;
    a108:	4770      	bx	lr
    a10a:	bf00      	nop
    a10c:	20000854 	.word	0x20000854
    a110:	2000bb88 	.word	0x2000bb88

0000a114 <le_sc_supported>:
	/*
	 * If controller based ECC is to be used it must support
	 * "LE Read Local P-256 Public Key" and "LE Generate DH Key" commands.
	 * Otherwise LE SC are not supported.
	 */
	return (bt_dev.supported_commands[34] & 0x02) &&
    a114:	4b04      	ldr	r3, [pc, #16]	; (a128 <le_sc_supported+0x14>)
    a116:	f893 0040 	ldrb.w	r0, [r3, #64]	; 0x40
    a11a:	f000 0006 	and.w	r0, r0, #6
	       (bt_dev.supported_commands[34] & 0x04);
}
    a11e:	2806      	cmp	r0, #6
    a120:	bf14      	ite	ne
    a122:	2000      	movne	r0, #0
    a124:	2001      	moveq	r0, #1
    a126:	4770      	bx	lr
    a128:	2000b8b8 	.word	0x2000b8b8

0000a12c <smp_chan_get>:
{
    a12c:	b508      	push	{r3, lr}
	chan = bt_l2cap_le_lookup_rx_cid(conn, BT_L2CAP_CID_SMP);
    a12e:	2106      	movs	r1, #6
    a130:	f7fd fd18 	bl	7b64 <bt_l2cap_le_lookup_rx_cid>
}
    a134:	bd08      	pop	{r3, pc}

0000a136 <smp_create_pdu>:
{
    a136:	b538      	push	{r3, r4, r5, lr}
    a138:	460d      	mov	r5, r1
	buf = bt_l2cap_create_pdu(NULL, 0);
    a13a:	2100      	movs	r1, #0
    a13c:	4608      	mov	r0, r1
    a13e:	f7fd fa58 	bl	75f2 <bt_l2cap_create_pdu>
    a142:	4604      	mov	r4, r0
	hdr = net_buf_add(buf, sizeof(*hdr));
    a144:	2101      	movs	r1, #1
    a146:	3008      	adds	r0, #8
    a148:	f010 f954 	bl	1a3f4 <net_buf_simple_add>
	hdr->code = op;
    a14c:	7005      	strb	r5, [r0, #0]
}
    a14e:	4620      	mov	r0, r4
    a150:	bd38      	pop	{r3, r4, r5, pc}

0000a152 <smp_init>:
{
    a152:	b510      	push	{r4, lr}
    a154:	4604      	mov	r4, r0
	memset((u8_t *)smp + sizeof(smp->chan), 0,
    a156:	22e0      	movs	r2, #224	; 0xe0
    a158:	2100      	movs	r1, #0
    a15a:	309c      	adds	r0, #156	; 0x9c
    a15c:	f01f fc1c 	bl	29998 <memset>
	if (bt_rand(smp->prnd, 16)) {
    a160:	2110      	movs	r1, #16
    a162:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    a166:	f006 fdcf 	bl	10d08 <bt_rand>
    a16a:	b110      	cbz	r0, a172 <smp_init+0x20>
		return BT_SMP_ERR_UNSPECIFIED;
    a16c:	2308      	movs	r3, #8
}
    a16e:	4618      	mov	r0, r3
    a170:	bd10      	pop	{r4, pc}
    a172:	4603      	mov	r3, r0
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    a174:	349c      	adds	r4, #156	; 0x9c
    a176:	f3bf 8f5b 	dmb	ish
    a17a:	e854 2f00 	ldrex	r2, [r4]
    a17e:	f042 0220 	orr.w	r2, r2, #32
    a182:	e844 2100 	strex	r1, r2, [r4]
    a186:	2900      	cmp	r1, #0
    a188:	d1f7      	bne.n	a17a <smp_init+0x28>
    a18a:	f3bf 8f5b 	dmb	ish
	return 0;
    a18e:	e7ee      	b.n	a16e <smp_init+0x1c>

0000a190 <display_passkey>:
{
    a190:	b538      	push	{r3, r4, r5, lr}
    a192:	4604      	mov	r4, r0
	if (bt_rand(&smp->passkey, sizeof(smp->passkey))) {
    a194:	2104      	movs	r1, #4
    a196:	f500 70ba 	add.w	r0, r0, #372	; 0x174
    a19a:	f006 fdb5 	bl	10d08 <bt_rand>
    a19e:	b108      	cbz	r0, a1a4 <display_passkey+0x14>
		return BT_SMP_ERR_UNSPECIFIED;
    a1a0:	2008      	movs	r0, #8
}
    a1a2:	bd38      	pop	{r3, r4, r5, pc}
	smp->passkey %= 1000000;
    a1a4:	f8d4 3174 	ldr.w	r3, [r4, #372]	; 0x174
    a1a8:	4909      	ldr	r1, [pc, #36]	; (a1d0 <display_passkey+0x40>)
    a1aa:	fba1 2103 	umull	r2, r1, r1, r3
    a1ae:	0c89      	lsrs	r1, r1, #18
    a1b0:	4a08      	ldr	r2, [pc, #32]	; (a1d4 <display_passkey+0x44>)
    a1b2:	fb02 3111 	mls	r1, r2, r1, r3
    a1b6:	f8c4 1174 	str.w	r1, [r4, #372]	; 0x174
	smp->passkey_round = 0;
    a1ba:	2500      	movs	r5, #0
    a1bc:	f884 5178 	strb.w	r5, [r4, #376]	; 0x178
	bt_auth->passkey_display(smp->chan.chan.conn, smp->passkey);
    a1c0:	4b05      	ldr	r3, [pc, #20]	; (a1d8 <display_passkey+0x48>)
    a1c2:	681b      	ldr	r3, [r3, #0]
    a1c4:	681b      	ldr	r3, [r3, #0]
    a1c6:	6820      	ldr	r0, [r4, #0]
    a1c8:	4798      	blx	r3
	return 0;
    a1ca:	4628      	mov	r0, r5
    a1cc:	bd38      	pop	{r3, r4, r5, pc}
    a1ce:	bf00      	nop
    a1d0:	431bde83 	.word	0x431bde83
    a1d4:	000f4240 	.word	0x000f4240
    a1d8:	20002a10 	.word	0x20002a10

0000a1dc <smp_send>:
{
    a1dc:	b510      	push	{r4, lr}
    a1de:	4604      	mov	r4, r0
	bt_l2cap_send_cb(smp->chan.chan.conn, BT_L2CAP_CID_SMP, buf, cb);
    a1e0:	4613      	mov	r3, r2
    a1e2:	460a      	mov	r2, r1
    a1e4:	2106      	movs	r1, #6
    a1e6:	6800      	ldr	r0, [r0, #0]
    a1e8:	f7fd fa9b 	bl	7722 <bt_l2cap_send_cb>
    a1ec:	f247 5230 	movw	r2, #30000	; 0x7530
    a1f0:	f504 71be 	add.w	r1, r4, #380	; 0x17c
    a1f4:	4801      	ldr	r0, [pc, #4]	; (a1fc <smp_send+0x20>)
    a1f6:	f01f fa45 	bl	29684 <k_delayed_work_submit_to_queue>
    a1fa:	bd10      	pop	{r4, pc}
    a1fc:	20002bd8 	.word	0x20002bd8

0000a200 <sc_smp_send_dhkey_check>:
{
    a200:	b570      	push	{r4, r5, r6, lr}
    a202:	4604      	mov	r4, r0
    a204:	460e      	mov	r6, r1
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_DHKEY_CHECK,
    a206:	2210      	movs	r2, #16
    a208:	210d      	movs	r1, #13
    a20a:	6800      	ldr	r0, [r0, #0]
    a20c:	f7ff ff93 	bl	a136 <smp_create_pdu>
	if (!buf) {
    a210:	b178      	cbz	r0, a232 <sc_smp_send_dhkey_check+0x32>
    a212:	4605      	mov	r5, r0
	req = net_buf_add(buf, sizeof(*req));
    a214:	2110      	movs	r1, #16
    a216:	3008      	adds	r0, #8
    a218:	f010 f8ec 	bl	1a3f4 <net_buf_simple_add>
	memcpy(req->e, e, sizeof(req->e));
    a21c:	2210      	movs	r2, #16
    a21e:	4631      	mov	r1, r6
    a220:	f7f6 f84e 	bl	2c0 <memcpy>
	smp_send(smp, buf, NULL);
    a224:	2200      	movs	r2, #0
    a226:	4629      	mov	r1, r5
    a228:	4620      	mov	r0, r4
    a22a:	f7ff ffd7 	bl	a1dc <smp_send>
	return 0;
    a22e:	2000      	movs	r0, #0
    a230:	bd70      	pop	{r4, r5, r6, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a232:	2008      	movs	r0, #8
}
    a234:	bd70      	pop	{r4, r5, r6, pc}
	...

0000a238 <sc_send_public_key>:
{
    a238:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    a23a:	4604      	mov	r4, r0
	req_buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PUBLIC_KEY,
    a23c:	2240      	movs	r2, #64	; 0x40
    a23e:	210c      	movs	r1, #12
    a240:	6800      	ldr	r0, [r0, #0]
    a242:	f7ff ff78 	bl	a136 <smp_create_pdu>
	if (!req_buf) {
    a246:	b1b0      	cbz	r0, a276 <sc_send_public_key+0x3e>
    a248:	4605      	mov	r5, r0
	req = net_buf_add(req_buf, sizeof(*req));
    a24a:	2140      	movs	r1, #64	; 0x40
    a24c:	3008      	adds	r0, #8
    a24e:	f010 f8d1 	bl	1a3f4 <net_buf_simple_add>
    a252:	4607      	mov	r7, r0
	memcpy(req->x, sc_public_key, sizeof(req->x));
    a254:	4e09      	ldr	r6, [pc, #36]	; (a27c <sc_send_public_key+0x44>)
    a256:	2220      	movs	r2, #32
    a258:	4631      	mov	r1, r6
    a25a:	f7f6 f831 	bl	2c0 <memcpy>
	memcpy(req->y, &sc_public_key[32], sizeof(req->y));
    a25e:	2220      	movs	r2, #32
    a260:	18b1      	adds	r1, r6, r2
    a262:	18b8      	adds	r0, r7, r2
    a264:	f7f6 f82c 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    a268:	2200      	movs	r2, #0
    a26a:	4629      	mov	r1, r5
    a26c:	4620      	mov	r0, r4
    a26e:	f7ff ffb5 	bl	a1dc <smp_send>
	return 0;
    a272:	2000      	movs	r0, #0
    a274:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a276:	2008      	movs	r0, #8
}
    a278:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    a27a:	bf00      	nop
    a27c:	200009fc 	.word	0x200009fc

0000a280 <send_pairing_rsp>:
{
    a280:	b538      	push	{r3, r4, r5, lr}
    a282:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RSP, sizeof(*rsp));
    a284:	2206      	movs	r2, #6
    a286:	2102      	movs	r1, #2
    a288:	6800      	ldr	r0, [r0, #0]
    a28a:	f7ff ff54 	bl	a136 <smp_create_pdu>
	if (!rsp_buf) {
    a28e:	b180      	cbz	r0, a2b2 <send_pairing_rsp+0x32>
    a290:	4605      	mov	r5, r0
	rsp = net_buf_add(rsp_buf, sizeof(*rsp));
    a292:	2106      	movs	r1, #6
    a294:	3008      	adds	r0, #8
    a296:	f010 f8ad 	bl	1a3f4 <net_buf_simple_add>
	memcpy(rsp, smp->prsp + 1, sizeof(*rsp));
    a29a:	2206      	movs	r2, #6
    a29c:	f104 01ad 	add.w	r1, r4, #173	; 0xad
    a2a0:	f7f6 f80e 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a2a4:	2200      	movs	r2, #0
    a2a6:	4629      	mov	r1, r5
    a2a8:	4620      	mov	r0, r4
    a2aa:	f7ff ff97 	bl	a1dc <smp_send>
	return 0;
    a2ae:	2000      	movs	r0, #0
    a2b0:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a2b2:	2008      	movs	r0, #8
}
    a2b4:	bd38      	pop	{r3, r4, r5, pc}

0000a2b6 <smp_send_pairing_random>:
{
    a2b6:	b538      	push	{r3, r4, r5, lr}
    a2b8:	4604      	mov	r4, r0
	rsp_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_RANDOM, sizeof(*req));
    a2ba:	2210      	movs	r2, #16
    a2bc:	2104      	movs	r1, #4
    a2be:	6800      	ldr	r0, [r0, #0]
    a2c0:	f7ff ff39 	bl	a136 <smp_create_pdu>
	if (!rsp_buf) {
    a2c4:	b180      	cbz	r0, a2e8 <smp_send_pairing_random+0x32>
    a2c6:	4605      	mov	r5, r0
	req = net_buf_add(rsp_buf, sizeof(*req));
    a2c8:	2110      	movs	r1, #16
    a2ca:	3008      	adds	r0, #8
    a2cc:	f010 f892 	bl	1a3f4 <net_buf_simple_add>
	memcpy(req->val, smp->prnd, sizeof(req->val));
    a2d0:	2210      	movs	r2, #16
    a2d2:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    a2d6:	f7f5 fff3 	bl	2c0 <memcpy>
	smp_send(smp, rsp_buf, NULL);
    a2da:	2200      	movs	r2, #0
    a2dc:	4629      	mov	r1, r5
    a2de:	4620      	mov	r0, r4
    a2e0:	f7ff ff7c 	bl	a1dc <smp_send>
	return 0;
    a2e4:	2000      	movs	r0, #0
    a2e6:	bd38      	pop	{r3, r4, r5, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    a2e8:	2008      	movs	r0, #8
}
    a2ea:	bd38      	pop	{r3, r4, r5, pc}

0000a2ec <bt_smp_aes_cmac>:
{
    a2ec:	b570      	push	{r4, r5, r6, lr}
    a2ee:	b0c2      	sub	sp, #264	; 0x108
    a2f0:	460c      	mov	r4, r1
    a2f2:	4615      	mov	r5, r2
    a2f4:	461e      	mov	r6, r3
	if (tc_cmac_setup(&state, key, &sched) == TC_CRYPTO_FAIL) {
    a2f6:	aa16      	add	r2, sp, #88	; 0x58
    a2f8:	4601      	mov	r1, r0
    a2fa:	4668      	mov	r0, sp
    a2fc:	f7f8 fdcb 	bl	2e96 <tc_cmac_setup>
    a300:	b180      	cbz	r0, a324 <bt_smp_aes_cmac+0x38>
	if (tc_cmac_update(&state, in, len) == TC_CRYPTO_FAIL) {
    a302:	462a      	mov	r2, r5
    a304:	4621      	mov	r1, r4
    a306:	4668      	mov	r0, sp
    a308:	f7f8 fdf2 	bl	2ef0 <tc_cmac_update>
    a30c:	b168      	cbz	r0, a32a <bt_smp_aes_cmac+0x3e>
	if (tc_cmac_final(out, &state) == TC_CRYPTO_FAIL) {
    a30e:	4669      	mov	r1, sp
    a310:	4630      	mov	r0, r6
    a312:	f7f8 fe57 	bl	2fc4 <tc_cmac_final>
    a316:	b110      	cbz	r0, a31e <bt_smp_aes_cmac+0x32>
	return 0;
    a318:	2000      	movs	r0, #0
}
    a31a:	b042      	add	sp, #264	; 0x108
    a31c:	bd70      	pop	{r4, r5, r6, pc}
		return -EIO;
    a31e:	f06f 0004 	mvn.w	r0, #4
    a322:	e7fa      	b.n	a31a <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a324:	f06f 0004 	mvn.w	r0, #4
    a328:	e7f7      	b.n	a31a <bt_smp_aes_cmac+0x2e>
		return -EIO;
    a32a:	f06f 0004 	mvn.w	r0, #4
    a32e:	e7f4      	b.n	a31a <bt_smp_aes_cmac+0x2e>

0000a330 <smp_sign_buf>:
{
    a330:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a334:	b08b      	sub	sp, #44	; 0x2c
    a336:	460d      	mov	r5, r1
	u32_t cnt = UNALIGNED_GET((u32_t *)&msg[len]);
    a338:	188f      	adds	r7, r1, r2
    a33a:	683b      	ldr	r3, [r7, #0]
    a33c:	9309      	str	r3, [sp, #36]	; 0x24
	sys_mem_swap(m, len + sizeof(cnt));
    a33e:	1d16      	adds	r6, r2, #4
 */
static inline void sys_mem_swap(void *buf, size_t length)
{
	size_t i;

	for (i = 0; i < (length/2); i++) {
    a340:	2300      	movs	r3, #0
    a342:	e006      	b.n	a352 <smp_sign_buf+0x22>
		u8_t tmp = ((u8_t *)buf)[i];
    a344:	5cea      	ldrb	r2, [r5, r3]

		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a346:	1af1      	subs	r1, r6, r3
    a348:	3901      	subs	r1, #1
    a34a:	5c6c      	ldrb	r4, [r5, r1]
    a34c:	54ec      	strb	r4, [r5, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a34e:	546a      	strb	r2, [r5, r1]
	for (i = 0; i < (length/2); i++) {
    a350:	3301      	adds	r3, #1
    a352:	ea4f 0856 	mov.w	r8, r6, lsr #1
    a356:	4543      	cmp	r3, r8
    a358:	d3f4      	bcc.n	a344 <smp_sign_buf+0x14>
	src += length - 1;
    a35a:	300f      	adds	r0, #15
    a35c:	2410      	movs	r4, #16
    a35e:	ab05      	add	r3, sp, #20
    a360:	e004      	b.n	a36c <smp_sign_buf+0x3c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a362:	7802      	ldrb	r2, [r0, #0]
    a364:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a366:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a368:	3801      	subs	r0, #1
    a36a:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a36c:	2c00      	cmp	r4, #0
    a36e:	d1f8      	bne.n	a362 <smp_sign_buf+0x32>
	err = bt_smp_aes_cmac(key_s, m, len + sizeof(cnt), tmp);
    a370:	ab01      	add	r3, sp, #4
    a372:	4632      	mov	r2, r6
    a374:	4629      	mov	r1, r5
    a376:	a805      	add	r0, sp, #20
    a378:	f7ff ffb8 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a37c:	4681      	mov	r9, r0
    a37e:	bb08      	cbnz	r0, a3c4 <smp_sign_buf+0x94>
    a380:	4623      	mov	r3, r4
    a382:	e009      	b.n	a398 <smp_sign_buf+0x68>
		u8_t tmp = ((u8_t *)buf)[i];
    a384:	aa01      	add	r2, sp, #4
    a386:	5cd0      	ldrb	r0, [r2, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a388:	f1c3 010f 	rsb	r1, r3, #15
    a38c:	f812 e001 	ldrb.w	lr, [r2, r1]
    a390:	f802 e003 	strb.w	lr, [r2, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a394:	5450      	strb	r0, [r2, r1]
	for (i = 0; i < (length/2); i++) {
    a396:	3301      	adds	r3, #1
    a398:	2b07      	cmp	r3, #7
    a39a:	d9f3      	bls.n	a384 <smp_sign_buf+0x54>
	memcpy(tmp + 4, &cnt, sizeof(cnt));
    a39c:	2204      	movs	r2, #4
    a39e:	a909      	add	r1, sp, #36	; 0x24
    a3a0:	a802      	add	r0, sp, #8
    a3a2:	f7f5 ff8d 	bl	2c0 <memcpy>
    a3a6:	e006      	b.n	a3b6 <smp_sign_buf+0x86>
		u8_t tmp = ((u8_t *)buf)[i];
    a3a8:	5d2a      	ldrb	r2, [r5, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a3aa:	1b33      	subs	r3, r6, r4
    a3ac:	3b01      	subs	r3, #1
    a3ae:	5ce9      	ldrb	r1, [r5, r3]
    a3b0:	5529      	strb	r1, [r5, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a3b2:	54ea      	strb	r2, [r5, r3]
	for (i = 0; i < (length/2); i++) {
    a3b4:	3401      	adds	r4, #1
    a3b6:	45a0      	cmp	r8, r4
    a3b8:	d8f6      	bhi.n	a3a8 <smp_sign_buf+0x78>
	memcpy(sig, tmp + 4, 12);
    a3ba:	220c      	movs	r2, #12
    a3bc:	a902      	add	r1, sp, #8
    a3be:	4638      	mov	r0, r7
    a3c0:	f7f5 ff7e 	bl	2c0 <memcpy>
}
    a3c4:	4648      	mov	r0, r9
    a3c6:	b00b      	add	sp, #44	; 0x2c
    a3c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0000a3cc <smp_f4>:
{
    a3cc:	b5f0      	push	{r4, r5, r6, r7, lr}
    a3ce:	b097      	sub	sp, #92	; 0x5c
    a3d0:	9e1c      	ldr	r6, [sp, #112]	; 0x70
	src += length - 1;
    a3d2:	301f      	adds	r0, #31
    a3d4:	2420      	movs	r4, #32
    a3d6:	ad01      	add	r5, sp, #4
    a3d8:	e004      	b.n	a3e4 <smp_f4+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3da:	7807      	ldrb	r7, [r0, #0]
    a3dc:	702f      	strb	r7, [r5, #0]
	for (; length > 0; length--) {
    a3de:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3e0:	3801      	subs	r0, #1
    a3e2:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a3e4:	2c00      	cmp	r4, #0
    a3e6:	d1f8      	bne.n	a3da <smp_f4+0xe>
	src += length - 1;
    a3e8:	311f      	adds	r1, #31
    a3ea:	2020      	movs	r0, #32
    a3ec:	ac09      	add	r4, sp, #36	; 0x24
    a3ee:	e004      	b.n	a3fa <smp_f4+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3f0:	780d      	ldrb	r5, [r1, #0]
    a3f2:	7025      	strb	r5, [r4, #0]
	for (; length > 0; length--) {
    a3f4:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a3f6:	3901      	subs	r1, #1
    a3f8:	3401      	adds	r4, #1
	for (; length > 0; length--) {
    a3fa:	2800      	cmp	r0, #0
    a3fc:	d1f8      	bne.n	a3f0 <smp_f4+0x24>
	m[64] = z;
    a3fe:	f88d 3044 	strb.w	r3, [sp, #68]	; 0x44
	src += length - 1;
    a402:	320f      	adds	r2, #15
    a404:	2410      	movs	r4, #16
    a406:	ab12      	add	r3, sp, #72	; 0x48
    a408:	e004      	b.n	a414 <smp_f4+0x48>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a40a:	7811      	ldrb	r1, [r2, #0]
    a40c:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
    a40e:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a410:	3a01      	subs	r2, #1
    a412:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a414:	2c00      	cmp	r4, #0
    a416:	d1f8      	bne.n	a40a <smp_f4+0x3e>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), res);
    a418:	4633      	mov	r3, r6
    a41a:	2241      	movs	r2, #65	; 0x41
    a41c:	a901      	add	r1, sp, #4
    a41e:	a812      	add	r0, sp, #72	; 0x48
    a420:	f7ff ff64 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a424:	4605      	mov	r5, r0
    a426:	b138      	cbz	r0, a438 <smp_f4+0x6c>
    a428:	e008      	b.n	a43c <smp_f4+0x70>
		u8_t tmp = ((u8_t *)buf)[i];
    a42a:	5d32      	ldrb	r2, [r6, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a42c:	f1c4 030f 	rsb	r3, r4, #15
    a430:	5cf1      	ldrb	r1, [r6, r3]
    a432:	5531      	strb	r1, [r6, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a434:	54f2      	strb	r2, [r6, r3]
	for (i = 0; i < (length/2); i++) {
    a436:	3401      	adds	r4, #1
    a438:	2c07      	cmp	r4, #7
    a43a:	d9f6      	bls.n	a42a <smp_f4+0x5e>
}
    a43c:	4628      	mov	r0, r5
    a43e:	b017      	add	sp, #92	; 0x5c
    a440:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0000a444 <sc_smp_check_confirm>:
	switch (smp->method) {
    a444:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a448:	2b03      	cmp	r3, #3
    a44a:	d827      	bhi.n	a49c <sc_smp_check_confirm+0x58>
    a44c:	e8df f003 	tbb	[pc, r3]
    a450:	0d02020d 	.word	0x0d02020d
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a454:	f8d0 3174 	ldr.w	r3, [r0, #372]	; 0x174
    a458:	f890 2178 	ldrb.w	r2, [r0, #376]	; 0x178
    a45c:	40d3      	lsrs	r3, r2
    a45e:	f003 0301 	and.w	r3, r3, #1
		r |= 0x80;
    a462:	f063 037f 	orn	r3, r3, #127	; 0x7f
    a466:	b2db      	uxtb	r3, r3
		break;
    a468:	e000      	b.n	a46c <sc_smp_check_confirm+0x28>
		r = 0;
    a46a:	2300      	movs	r3, #0
{
    a46c:	b510      	push	{r4, lr}
    a46e:	b086      	sub	sp, #24
    a470:	4604      	mov	r4, r0
	if (smp_f4(smp->pkey, sc_public_key, smp->rrnd, r, cfm)) {
    a472:	aa02      	add	r2, sp, #8
    a474:	9200      	str	r2, [sp, #0]
    a476:	f100 02d3 	add.w	r2, r0, #211	; 0xd3
    a47a:	490a      	ldr	r1, [pc, #40]	; (a4a4 <sc_smp_check_confirm+0x60>)
    a47c:	30f3      	adds	r0, #243	; 0xf3
    a47e:	f7ff ffa5 	bl	a3cc <smp_f4>
    a482:	b110      	cbz	r0, a48a <sc_smp_check_confirm+0x46>
		return BT_SMP_ERR_UNSPECIFIED;
    a484:	2008      	movs	r0, #8
}
    a486:	b006      	add	sp, #24
    a488:	bd10      	pop	{r4, pc}
	if (memcmp(smp->pcnf, cfm, 16)) {
    a48a:	2210      	movs	r2, #16
    a48c:	a902      	add	r1, sp, #8
    a48e:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    a492:	f01f f9ed 	bl	29870 <memcmp>
    a496:	b118      	cbz	r0, a4a0 <sc_smp_check_confirm+0x5c>
		return BT_SMP_ERR_CONFIRM_FAILED;
    a498:	2004      	movs	r0, #4
    a49a:	e7f4      	b.n	a486 <sc_smp_check_confirm+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    a49c:	2008      	movs	r0, #8
    a49e:	4770      	bx	lr
	return 0;
    a4a0:	2000      	movs	r0, #0
    a4a2:	e7f0      	b.n	a486 <sc_smp_check_confirm+0x42>
    a4a4:	200009fc 	.word	0x200009fc

0000a4a8 <smp_f5>:
{
    a4a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    a4ac:	b09b      	sub	sp, #108	; 0x6c
    a4ae:	4604      	mov	r4, r0
    a4b0:	460e      	mov	r6, r1
    a4b2:	4615      	mov	r5, r2
    a4b4:	461f      	mov	r7, r3
    a4b6:	f8dd 808c 	ldr.w	r8, [sp, #140]	; 0x8c
    a4ba:	f8dd 9090 	ldr.w	r9, [sp, #144]	; 0x90
	u8_t m[53] = { 0x00, /* counter */
    a4be:	2235      	movs	r2, #53	; 0x35
    a4c0:	2100      	movs	r1, #0
    a4c2:	a80c      	add	r0, sp, #48	; 0x30
    a4c4:	f01f fa68 	bl	29998 <memset>
    a4c8:	2362      	movs	r3, #98	; 0x62
    a4ca:	f88d 3031 	strb.w	r3, [sp, #49]	; 0x31
    a4ce:	2374      	movs	r3, #116	; 0x74
    a4d0:	f88d 3032 	strb.w	r3, [sp, #50]	; 0x32
    a4d4:	236c      	movs	r3, #108	; 0x6c
    a4d6:	f88d 3033 	strb.w	r3, [sp, #51]	; 0x33
    a4da:	2365      	movs	r3, #101	; 0x65
    a4dc:	f88d 3034 	strb.w	r3, [sp, #52]	; 0x34
    a4e0:	2301      	movs	r3, #1
    a4e2:	f88d 3063 	strb.w	r3, [sp, #99]	; 0x63
	src += length - 1;
    a4e6:	f104 001f 	add.w	r0, r4, #31
    a4ea:	2320      	movs	r3, #32
    a4ec:	466a      	mov	r2, sp
    a4ee:	e004      	b.n	a4fa <smp_f5+0x52>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a4f0:	7801      	ldrb	r1, [r0, #0]
    a4f2:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a4f4:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a4f6:	3801      	subs	r0, #1
    a4f8:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a4fa:	2b00      	cmp	r3, #0
    a4fc:	d1f8      	bne.n	a4f0 <smp_f5+0x48>
	err = bt_smp_aes_cmac(salt, ws, 32, t);
    a4fe:	ab08      	add	r3, sp, #32
    a500:	2220      	movs	r2, #32
    a502:	4669      	mov	r1, sp
    a504:	4838      	ldr	r0, [pc, #224]	; (a5e8 <smp_f5+0x140>)
    a506:	f7ff fef1 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a50a:	4686      	mov	lr, r0
    a50c:	2800      	cmp	r0, #0
    a50e:	d166      	bne.n	a5de <smp_f5+0x136>
	src += length - 1;
    a510:	360f      	adds	r6, #15
    a512:	2310      	movs	r3, #16
    a514:	f10d 0235 	add.w	r2, sp, #53	; 0x35
    a518:	e004      	b.n	a524 <smp_f5+0x7c>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a51a:	7831      	ldrb	r1, [r6, #0]
    a51c:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a51e:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a520:	3e01      	subs	r6, #1
    a522:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a524:	2b00      	cmp	r3, #0
    a526:	d1f8      	bne.n	a51a <smp_f5+0x72>
	src += length - 1;
    a528:	350f      	adds	r5, #15
    a52a:	2310      	movs	r3, #16
    a52c:	f10d 0245 	add.w	r2, sp, #69	; 0x45
    a530:	e004      	b.n	a53c <smp_f5+0x94>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a532:	7829      	ldrb	r1, [r5, #0]
    a534:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a536:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a538:	3d01      	subs	r5, #1
    a53a:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a53c:	2b00      	cmp	r3, #0
    a53e:	d1f8      	bne.n	a532 <smp_f5+0x8a>
	m[37] = a1->type;
    a540:	f817 3b06 	ldrb.w	r3, [r7], #6
    a544:	f88d 3055 	strb.w	r3, [sp, #85]	; 0x55
	src += length - 1;
    a548:	2306      	movs	r3, #6
    a54a:	f10d 0256 	add.w	r2, sp, #86	; 0x56
    a54e:	e004      	b.n	a55a <smp_f5+0xb2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a550:	7839      	ldrb	r1, [r7, #0]
    a552:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a554:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a556:	3f01      	subs	r7, #1
    a558:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a55a:	2b00      	cmp	r3, #0
    a55c:	d1f8      	bne.n	a550 <smp_f5+0xa8>
	m[44] = a2->type;
    a55e:	9b22      	ldr	r3, [sp, #136]	; 0x88
    a560:	f813 2b06 	ldrb.w	r2, [r3], #6
    a564:	f88d 205c 	strb.w	r2, [sp, #92]	; 0x5c
	src += length - 1;
    a568:	2406      	movs	r4, #6
    a56a:	f10d 025d 	add.w	r2, sp, #93	; 0x5d
    a56e:	e004      	b.n	a57a <smp_f5+0xd2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a570:	7819      	ldrb	r1, [r3, #0]
    a572:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a574:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a576:	3b01      	subs	r3, #1
    a578:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a57a:	2c00      	cmp	r4, #0
    a57c:	d1f8      	bne.n	a570 <smp_f5+0xc8>
	err = bt_smp_aes_cmac(t, m, sizeof(m), mackey);
    a57e:	4643      	mov	r3, r8
    a580:	2235      	movs	r2, #53	; 0x35
    a582:	a90c      	add	r1, sp, #48	; 0x30
    a584:	a808      	add	r0, sp, #32
    a586:	f7ff feb1 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a58a:	4686      	mov	lr, r0
    a58c:	bb38      	cbnz	r0, a5de <smp_f5+0x136>
    a58e:	4623      	mov	r3, r4
    a590:	e00a      	b.n	a5a8 <smp_f5+0x100>
		u8_t tmp = ((u8_t *)buf)[i];
    a592:	f818 1003 	ldrb.w	r1, [r8, r3]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a596:	f1c3 020f 	rsb	r2, r3, #15
    a59a:	f818 0002 	ldrb.w	r0, [r8, r2]
    a59e:	f808 0003 	strb.w	r0, [r8, r3]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a5a2:	f808 1002 	strb.w	r1, [r8, r2]
	for (i = 0; i < (length/2); i++) {
    a5a6:	3301      	adds	r3, #1
    a5a8:	2b07      	cmp	r3, #7
    a5aa:	d9f2      	bls.n	a592 <smp_f5+0xea>
	m[0] = 0x01;
    a5ac:	a91a      	add	r1, sp, #104	; 0x68
    a5ae:	2301      	movs	r3, #1
    a5b0:	f801 3d38 	strb.w	r3, [r1, #-56]!
	err = bt_smp_aes_cmac(t, m, sizeof(m), ltk);
    a5b4:	464b      	mov	r3, r9
    a5b6:	2235      	movs	r2, #53	; 0x35
    a5b8:	a808      	add	r0, sp, #32
    a5ba:	f7ff fe97 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a5be:	4686      	mov	lr, r0
    a5c0:	b158      	cbz	r0, a5da <smp_f5+0x132>
    a5c2:	e00c      	b.n	a5de <smp_f5+0x136>
		u8_t tmp = ((u8_t *)buf)[i];
    a5c4:	f819 2004 	ldrb.w	r2, [r9, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a5c8:	f1c4 030f 	rsb	r3, r4, #15
    a5cc:	f819 1003 	ldrb.w	r1, [r9, r3]
    a5d0:	f809 1004 	strb.w	r1, [r9, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a5d4:	f809 2003 	strb.w	r2, [r9, r3]
	for (i = 0; i < (length/2); i++) {
    a5d8:	3401      	adds	r4, #1
    a5da:	2c07      	cmp	r4, #7
    a5dc:	d9f2      	bls.n	a5c4 <smp_f5+0x11c>
}
    a5de:	4670      	mov	r0, lr
    a5e0:	b01b      	add	sp, #108	; 0x6c
    a5e2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    a5e6:	bf00      	nop
    a5e8:	0002d5ec 	.word	0x0002d5ec

0000a5ec <smp_f6>:
{
    a5ec:	b5f0      	push	{r4, r5, r6, r7, lr}
    a5ee:	b097      	sub	sp, #92	; 0x5c
    a5f0:	4604      	mov	r4, r0
    a5f2:	9e1d      	ldr	r6, [sp, #116]	; 0x74
    a5f4:	9d1e      	ldr	r5, [sp, #120]	; 0x78
    a5f6:	9f1f      	ldr	r7, [sp, #124]	; 0x7c
	src += length - 1;
    a5f8:	310f      	adds	r1, #15
    a5fa:	2010      	movs	r0, #16
    a5fc:	f10d 0e04 	add.w	lr, sp, #4
    a600:	e007      	b.n	a612 <smp_f6+0x26>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a602:	f891 c000 	ldrb.w	ip, [r1]
    a606:	f88e c000 	strb.w	ip, [lr]
	for (; length > 0; length--) {
    a60a:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a60c:	3901      	subs	r1, #1
    a60e:	f10e 0e01 	add.w	lr, lr, #1
	for (; length > 0; length--) {
    a612:	2800      	cmp	r0, #0
    a614:	d1f5      	bne.n	a602 <smp_f6+0x16>
	src += length - 1;
    a616:	320f      	adds	r2, #15
    a618:	2110      	movs	r1, #16
    a61a:	a805      	add	r0, sp, #20
    a61c:	e006      	b.n	a62c <smp_f6+0x40>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a61e:	f892 e000 	ldrb.w	lr, [r2]
    a622:	f880 e000 	strb.w	lr, [r0]
	for (; length > 0; length--) {
    a626:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a628:	3a01      	subs	r2, #1
    a62a:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a62c:	2900      	cmp	r1, #0
    a62e:	d1f6      	bne.n	a61e <smp_f6+0x32>
	src += length - 1;
    a630:	330f      	adds	r3, #15
    a632:	2210      	movs	r2, #16
    a634:	a909      	add	r1, sp, #36	; 0x24
    a636:	e004      	b.n	a642 <smp_f6+0x56>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a638:	7818      	ldrb	r0, [r3, #0]
    a63a:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a63c:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a63e:	3b01      	subs	r3, #1
    a640:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a642:	2a00      	cmp	r2, #0
    a644:	d1f8      	bne.n	a638 <smp_f6+0x4c>
	src += length - 1;
    a646:	9b1c      	ldr	r3, [sp, #112]	; 0x70
    a648:	3302      	adds	r3, #2
    a64a:	2203      	movs	r2, #3
    a64c:	a90d      	add	r1, sp, #52	; 0x34
    a64e:	e004      	b.n	a65a <smp_f6+0x6e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a650:	7818      	ldrb	r0, [r3, #0]
    a652:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a654:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a656:	3b01      	subs	r3, #1
    a658:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a65a:	2a00      	cmp	r2, #0
    a65c:	d1f8      	bne.n	a650 <smp_f6+0x64>
	m[51] = a1->type;
    a65e:	4631      	mov	r1, r6
    a660:	f811 3b01 	ldrb.w	r3, [r1], #1
    a664:	f88d 3037 	strb.w	r3, [sp, #55]	; 0x37
	memcpy(m + 52, a1->a.val, 6);
    a668:	2206      	movs	r2, #6
    a66a:	a80e      	add	r0, sp, #56	; 0x38
    a66c:	f7f5 fe28 	bl	2c0 <memcpy>
	src += length - 1;
    a670:	3606      	adds	r6, #6
    a672:	2306      	movs	r3, #6
    a674:	aa0e      	add	r2, sp, #56	; 0x38
    a676:	e004      	b.n	a682 <smp_f6+0x96>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a678:	7831      	ldrb	r1, [r6, #0]
    a67a:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a67c:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a67e:	3e01      	subs	r6, #1
    a680:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a682:	2b00      	cmp	r3, #0
    a684:	d1f8      	bne.n	a678 <smp_f6+0x8c>
	m[58] = a2->type;
    a686:	4629      	mov	r1, r5
    a688:	f811 3b01 	ldrb.w	r3, [r1], #1
    a68c:	f88d 303e 	strb.w	r3, [sp, #62]	; 0x3e
	memcpy(m + 59, a2->a.val, 6);
    a690:	2206      	movs	r2, #6
    a692:	f10d 003f 	add.w	r0, sp, #63	; 0x3f
    a696:	f7f5 fe13 	bl	2c0 <memcpy>
	src += length - 1;
    a69a:	3506      	adds	r5, #6
    a69c:	2306      	movs	r3, #6
    a69e:	f10d 023f 	add.w	r2, sp, #63	; 0x3f
    a6a2:	e004      	b.n	a6ae <smp_f6+0xc2>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6a4:	7829      	ldrb	r1, [r5, #0]
    a6a6:	7011      	strb	r1, [r2, #0]
	for (; length > 0; length--) {
    a6a8:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6aa:	3d01      	subs	r5, #1
    a6ac:	3201      	adds	r2, #1
	for (; length > 0; length--) {
    a6ae:	2b00      	cmp	r3, #0
    a6b0:	d1f8      	bne.n	a6a4 <smp_f6+0xb8>
	src += length - 1;
    a6b2:	f104 000f 	add.w	r0, r4, #15
    a6b6:	2410      	movs	r4, #16
    a6b8:	ab12      	add	r3, sp, #72	; 0x48
    a6ba:	e004      	b.n	a6c6 <smp_f6+0xda>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6bc:	7802      	ldrb	r2, [r0, #0]
    a6be:	701a      	strb	r2, [r3, #0]
	for (; length > 0; length--) {
    a6c0:	3c01      	subs	r4, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a6c2:	3801      	subs	r0, #1
    a6c4:	3301      	adds	r3, #1
	for (; length > 0; length--) {
    a6c6:	2c00      	cmp	r4, #0
    a6c8:	d1f8      	bne.n	a6bc <smp_f6+0xd0>
	err = bt_smp_aes_cmac(ws, m, sizeof(m), check);
    a6ca:	463b      	mov	r3, r7
    a6cc:	2241      	movs	r2, #65	; 0x41
    a6ce:	a901      	add	r1, sp, #4
    a6d0:	a812      	add	r0, sp, #72	; 0x48
    a6d2:	f7ff fe0b 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a6d6:	4605      	mov	r5, r0
    a6d8:	b138      	cbz	r0, a6ea <smp_f6+0xfe>
    a6da:	e008      	b.n	a6ee <smp_f6+0x102>
		u8_t tmp = ((u8_t *)buf)[i];
    a6dc:	5d3a      	ldrb	r2, [r7, r4]
		((u8_t *)buf)[i] = ((u8_t *)buf)[length - 1 - i];
    a6de:	f1c4 030f 	rsb	r3, r4, #15
    a6e2:	5cf9      	ldrb	r1, [r7, r3]
    a6e4:	5539      	strb	r1, [r7, r4]
		((u8_t *)buf)[length - 1 - i] = tmp;
    a6e6:	54fa      	strb	r2, [r7, r3]
	for (i = 0; i < (length/2); i++) {
    a6e8:	3401      	adds	r4, #1
    a6ea:	2c07      	cmp	r4, #7
    a6ec:	d9f6      	bls.n	a6dc <smp_f6+0xf0>
}
    a6ee:	4628      	mov	r0, r5
    a6f0:	b017      	add	sp, #92	; 0x5c
    a6f2:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000a6f4 <compute_and_send_master_dhcheck>:
{
    a6f4:	b5f0      	push	{r4, r5, r6, r7, lr}
    a6f6:	b08d      	sub	sp, #52	; 0x34
    a6f8:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a6fa:	2210      	movs	r2, #16
    a6fc:	2100      	movs	r1, #0
    a6fe:	eb0d 0002 	add.w	r0, sp, r2
    a702:	f01f f949 	bl	29998 <memset>
	switch (smp->method) {
    a706:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a70a:	2b03      	cmp	r3, #3
    a70c:	d84a      	bhi.n	a7a4 <compute_and_send_master_dhcheck+0xb0>
    a70e:	e8df f003 	tbb	[pc, r3]
    a712:	0208      	.short	0x0208
    a714:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a716:	2204      	movs	r2, #4
    a718:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a71c:	a804      	add	r0, sp, #16
    a71e:	f7f5 fdcf 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a722:	f104 06c3 	add.w	r6, r4, #195	; 0xc3
    a726:	f104 07d3 	add.w	r7, r4, #211	; 0xd3
		   &smp->chan.chan.conn->le.init_addr,
    a72a:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a72c:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a730:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a734:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->prnd, smp->rrnd,
    a738:	9102      	str	r1, [sp, #8]
    a73a:	9501      	str	r5, [sp, #4]
    a73c:	9200      	str	r2, [sp, #0]
    a73e:	334f      	adds	r3, #79	; 0x4f
    a740:	463a      	mov	r2, r7
    a742:	4631      	mov	r1, r6
    a744:	f204 1033 	addw	r0, r4, #307	; 0x133
    a748:	f7ff feae 	bl	a4a8 <smp_f5>
    a74c:	b110      	cbz	r0, a754 <compute_and_send_master_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a74e:	2008      	movs	r0, #8
}
    a750:	b00d      	add	sp, #52	; 0x34
    a752:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a754:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a758:	6823      	ldr	r3, [r4, #0]
    a75a:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, e)) {
    a75e:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->preq[1],
    a760:	a808      	add	r0, sp, #32
    a762:	9003      	str	r0, [sp, #12]
    a764:	9302      	str	r3, [sp, #8]
    a766:	9101      	str	r1, [sp, #4]
    a768:	9200      	str	r2, [sp, #0]
    a76a:	ab04      	add	r3, sp, #16
    a76c:	463a      	mov	r2, r7
    a76e:	4631      	mov	r1, r6
    a770:	4628      	mov	r0, r5
    a772:	f7ff ff3b 	bl	a5ec <smp_f6>
    a776:	b108      	cbz	r0, a77c <compute_and_send_master_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a778:	2008      	movs	r0, #8
    a77a:	e7e9      	b.n	a750 <compute_and_send_master_dhcheck+0x5c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    a77c:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    a780:	f3bf 8f5b 	dmb	ish
    a784:	e853 2f00 	ldrex	r2, [r3]
    a788:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    a78c:	e843 2100 	strex	r1, r2, [r3]
    a790:	2900      	cmp	r1, #0
    a792:	d1f7      	bne.n	a784 <compute_and_send_master_dhcheck+0x90>
    a794:	f3bf 8f5b 	dmb	ish
	sc_smp_send_dhkey_check(smp, e);
    a798:	a908      	add	r1, sp, #32
    a79a:	4620      	mov	r0, r4
    a79c:	f7ff fd30 	bl	a200 <sc_smp_send_dhkey_check>
	return 0;
    a7a0:	2000      	movs	r0, #0
    a7a2:	e7d5      	b.n	a750 <compute_and_send_master_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a7a4:	2008      	movs	r0, #8
    a7a6:	e7d3      	b.n	a750 <compute_and_send_master_dhcheck+0x5c>

0000a7a8 <compute_and_check_and_send_slave_dhcheck>:
{
    a7a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    a7aa:	b091      	sub	sp, #68	; 0x44
    a7ac:	4604      	mov	r4, r0
	memset(r, 0, sizeof(r));
    a7ae:	2210      	movs	r2, #16
    a7b0:	2100      	movs	r1, #0
    a7b2:	eb0d 0002 	add.w	r0, sp, r2
    a7b6:	f01f f8ef 	bl	29998 <memset>
	switch (smp->method) {
    a7ba:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    a7be:	2b03      	cmp	r3, #3
    a7c0:	d866      	bhi.n	a890 <compute_and_check_and_send_slave_dhcheck+0xe8>
    a7c2:	e8df f003 	tbb	[pc, r3]
    a7c6:	0208      	.short	0x0208
    a7c8:	0802      	.short	0x0802
		memcpy(r, &smp->passkey, sizeof(smp->passkey));
    a7ca:	2204      	movs	r2, #4
    a7cc:	f504 71ba 	add.w	r1, r4, #372	; 0x174
    a7d0:	a804      	add	r0, sp, #16
    a7d2:	f7f5 fd75 	bl	2c0 <memcpy>
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a7d6:	f104 06d3 	add.w	r6, r4, #211	; 0xd3
    a7da:	f104 07c3 	add.w	r7, r4, #195	; 0xc3
		   &smp->chan.chan.conn->le.init_addr,
    a7de:	6823      	ldr	r3, [r4, #0]
		   &smp->chan.chan.conn->le.resp_addr, smp->mackey,
    a7e0:	f103 0256 	add.w	r2, r3, #86	; 0x56
    a7e4:	f204 1563 	addw	r5, r4, #355	; 0x163
		   smp->tk)) {
    a7e8:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
	if (smp_f5(smp->dhkey, smp->rrnd, smp->prnd,
    a7ec:	9102      	str	r1, [sp, #8]
    a7ee:	9501      	str	r5, [sp, #4]
    a7f0:	9200      	str	r2, [sp, #0]
    a7f2:	334f      	adds	r3, #79	; 0x4f
    a7f4:	463a      	mov	r2, r7
    a7f6:	4631      	mov	r1, r6
    a7f8:	f204 1033 	addw	r0, r4, #307	; 0x133
    a7fc:	f7ff fe54 	bl	a4a8 <smp_f5>
    a800:	b110      	cbz	r0, a808 <compute_and_check_and_send_slave_dhcheck+0x60>
		return BT_SMP_ERR_UNSPECIFIED;
    a802:	2008      	movs	r0, #8
}
    a804:	b011      	add	sp, #68	; 0x44
    a806:	bdf0      	pop	{r4, r5, r6, r7, pc}
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a808:	f104 02ad 	add.w	r2, r4, #173	; 0xad
		   &smp->chan.chan.conn->le.resp_addr,
    a80c:	6823      	ldr	r3, [r4, #0]
    a80e:	f103 0156 	add.w	r1, r3, #86	; 0x56
		   &smp->chan.chan.conn->le.init_addr, e)) {
    a812:	334f      	adds	r3, #79	; 0x4f
	if (smp_f6(smp->mackey, smp->prnd, smp->rrnd, r, &smp->prsp[1],
    a814:	a808      	add	r0, sp, #32
    a816:	9003      	str	r0, [sp, #12]
    a818:	9302      	str	r3, [sp, #8]
    a81a:	9101      	str	r1, [sp, #4]
    a81c:	9200      	str	r2, [sp, #0]
    a81e:	ab04      	add	r3, sp, #16
    a820:	4632      	mov	r2, r6
    a822:	4639      	mov	r1, r7
    a824:	4628      	mov	r0, r5
    a826:	f7ff fee1 	bl	a5ec <smp_f6>
    a82a:	b108      	cbz	r0, a830 <compute_and_check_and_send_slave_dhcheck+0x88>
		return BT_SMP_ERR_UNSPECIFIED;
    a82c:	2008      	movs	r0, #8
    a82e:	e7e9      	b.n	a804 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a830:	f104 02a6 	add.w	r2, r4, #166	; 0xa6
		   &smp->chan.chan.conn->le.init_addr,
    a834:	6823      	ldr	r3, [r4, #0]
    a836:	f103 014f 	add.w	r1, r3, #79	; 0x4f
		   &smp->chan.chan.conn->le.resp_addr, re)) {
    a83a:	3356      	adds	r3, #86	; 0x56
	if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->preq[1],
    a83c:	a80c      	add	r0, sp, #48	; 0x30
    a83e:	9003      	str	r0, [sp, #12]
    a840:	9302      	str	r3, [sp, #8]
    a842:	9101      	str	r1, [sp, #4]
    a844:	9200      	str	r2, [sp, #0]
    a846:	ab04      	add	r3, sp, #16
    a848:	463a      	mov	r2, r7
    a84a:	4631      	mov	r1, r6
    a84c:	4628      	mov	r0, r5
    a84e:	f7ff fecd 	bl	a5ec <smp_f6>
    a852:	b108      	cbz	r0, a858 <compute_and_check_and_send_slave_dhcheck+0xb0>
		return BT_SMP_ERR_UNSPECIFIED;
    a854:	2008      	movs	r0, #8
    a856:	e7d5      	b.n	a804 <compute_and_check_and_send_slave_dhcheck+0x5c>
	if (memcmp(smp->e, re, 16)) {
    a858:	2210      	movs	r2, #16
    a85a:	a90c      	add	r1, sp, #48	; 0x30
    a85c:	f204 1053 	addw	r0, r4, #339	; 0x153
    a860:	f01f f806 	bl	29870 <memcmp>
    a864:	b108      	cbz	r0, a86a <compute_and_check_and_send_slave_dhcheck+0xc2>
		return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    a866:	200b      	movs	r0, #11
    a868:	e7cc      	b.n	a804 <compute_and_check_and_send_slave_dhcheck+0x5c>
	sc_smp_send_dhkey_check(smp, e);
    a86a:	a908      	add	r1, sp, #32
    a86c:	4620      	mov	r0, r4
    a86e:	f7ff fcc7 	bl	a200 <sc_smp_send_dhkey_check>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    a872:	34a0      	adds	r4, #160	; 0xa0
    a874:	f3bf 8f5b 	dmb	ish
    a878:	e854 3f00 	ldrex	r3, [r4]
    a87c:	f043 0302 	orr.w	r3, r3, #2
    a880:	e844 3200 	strex	r2, r3, [r4]
    a884:	2a00      	cmp	r2, #0
    a886:	d1f7      	bne.n	a878 <compute_and_check_and_send_slave_dhcheck+0xd0>
    a888:	f3bf 8f5b 	dmb	ish
	return 0;
    a88c:	2000      	movs	r0, #0
    a88e:	e7b9      	b.n	a804 <compute_and_check_and_send_slave_dhcheck+0x5c>
		return BT_SMP_ERR_UNSPECIFIED;
    a890:	2008      	movs	r0, #8
    a892:	e7b7      	b.n	a804 <compute_and_check_and_send_slave_dhcheck+0x5c>

0000a894 <smp_g2>:
{
    a894:	b5f0      	push	{r4, r5, r6, r7, lr}
    a896:	b099      	sub	sp, #100	; 0x64
    a898:	9c1e      	ldr	r4, [sp, #120]	; 0x78
	src += length - 1;
    a89a:	301f      	adds	r0, #31
    a89c:	2520      	movs	r5, #32
    a89e:	ae04      	add	r6, sp, #16
    a8a0:	e004      	b.n	a8ac <smp_g2+0x18>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8a2:	7807      	ldrb	r7, [r0, #0]
    a8a4:	7037      	strb	r7, [r6, #0]
	for (; length > 0; length--) {
    a8a6:	3d01      	subs	r5, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8a8:	3801      	subs	r0, #1
    a8aa:	3601      	adds	r6, #1
	for (; length > 0; length--) {
    a8ac:	2d00      	cmp	r5, #0
    a8ae:	d1f8      	bne.n	a8a2 <smp_g2+0xe>
	src += length - 1;
    a8b0:	311f      	adds	r1, #31
    a8b2:	2020      	movs	r0, #32
    a8b4:	ad0c      	add	r5, sp, #48	; 0x30
    a8b6:	e004      	b.n	a8c2 <smp_g2+0x2e>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8b8:	780e      	ldrb	r6, [r1, #0]
    a8ba:	702e      	strb	r6, [r5, #0]
	for (; length > 0; length--) {
    a8bc:	3801      	subs	r0, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8be:	3901      	subs	r1, #1
    a8c0:	3501      	adds	r5, #1
	for (; length > 0; length--) {
    a8c2:	2800      	cmp	r0, #0
    a8c4:	d1f8      	bne.n	a8b8 <smp_g2+0x24>
	src += length - 1;
    a8c6:	330f      	adds	r3, #15
    a8c8:	2110      	movs	r1, #16
    a8ca:	a814      	add	r0, sp, #80	; 0x50
    a8cc:	e004      	b.n	a8d8 <smp_g2+0x44>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8ce:	781d      	ldrb	r5, [r3, #0]
    a8d0:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
    a8d2:	3901      	subs	r1, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8d4:	3b01      	subs	r3, #1
    a8d6:	3001      	adds	r0, #1
	for (; length > 0; length--) {
    a8d8:	2900      	cmp	r1, #0
    a8da:	d1f8      	bne.n	a8ce <smp_g2+0x3a>
	src += length - 1;
    a8dc:	320f      	adds	r2, #15
    a8de:	2310      	movs	r3, #16
    a8e0:	4669      	mov	r1, sp
    a8e2:	e004      	b.n	a8ee <smp_g2+0x5a>
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8e4:	7810      	ldrb	r0, [r2, #0]
    a8e6:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
    a8e8:	3b01      	subs	r3, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
    a8ea:	3a01      	subs	r2, #1
    a8ec:	3101      	adds	r1, #1
	for (; length > 0; length--) {
    a8ee:	2b00      	cmp	r3, #0
    a8f0:	d1f8      	bne.n	a8e4 <smp_g2+0x50>
	err = bt_smp_aes_cmac(xs, m, sizeof(m), xs);
    a8f2:	466b      	mov	r3, sp
    a8f4:	2250      	movs	r2, #80	; 0x50
    a8f6:	a904      	add	r1, sp, #16
    a8f8:	4668      	mov	r0, sp
    a8fa:	f7ff fcf7 	bl	a2ec <bt_smp_aes_cmac>
	if (err) {
    a8fe:	4605      	mov	r5, r0
    a900:	b110      	cbz	r0, a908 <smp_g2+0x74>
}
    a902:	4628      	mov	r0, r5
    a904:	b019      	add	sp, #100	; 0x64
    a906:	bdf0      	pop	{r4, r5, r6, r7, pc}
	memcpy(passkey, xs + 12, 4);
    a908:	2204      	movs	r2, #4
    a90a:	a903      	add	r1, sp, #12
    a90c:	4620      	mov	r0, r4
    a90e:	f7f5 fcd7 	bl	2c0 <memcpy>
	*passkey = sys_be32_to_cpu(*passkey) % 1000000;
    a912:	6822      	ldr	r2, [r4, #0]
    a914:	0a13      	lsrs	r3, r2, #8
    a916:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
    a91a:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
    a91e:	0211      	lsls	r1, r2, #8
    a920:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
    a924:	430b      	orrs	r3, r1
    a926:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
    a92a:	4a04      	ldr	r2, [pc, #16]	; (a93c <smp_g2+0xa8>)
    a92c:	fba2 1203 	umull	r1, r2, r2, r3
    a930:	0c92      	lsrs	r2, r2, #18
    a932:	4903      	ldr	r1, [pc, #12]	; (a940 <smp_g2+0xac>)
    a934:	fb01 3212 	mls	r2, r1, r2, r3
    a938:	6022      	str	r2, [r4, #0]
	return 0;
    a93a:	e7e2      	b.n	a902 <smp_g2+0x6e>
    a93c:	431bde83 	.word	0x431bde83
    a940:	000f4240 	.word	0x000f4240

0000a944 <smp_send_pairing_confirm>:
{
    a944:	b570      	push	{r4, r5, r6, lr}
    a946:	b082      	sub	sp, #8
	struct bt_conn *conn = smp->chan.chan.conn;
    a948:	6806      	ldr	r6, [r0, #0]
	switch (smp->method) {
    a94a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
    a94e:	2b03      	cmp	r3, #3
    a950:	d83f      	bhi.n	a9d2 <smp_send_pairing_confirm+0x8e>
    a952:	e8df f003 	tbb	[pc, r3]
    a956:	020d      	.short	0x020d
    a958:	0d02      	.short	0x0d02
		r = (smp->passkey >> smp->passkey_round) & 0x01;
    a95a:	f8d0 5174 	ldr.w	r5, [r0, #372]	; 0x174
    a95e:	f890 3178 	ldrb.w	r3, [r0, #376]	; 0x178
    a962:	40dd      	lsrs	r5, r3
    a964:	f005 0501 	and.w	r5, r5, #1
		r |= 0x80;
    a968:	f065 057f 	orn	r5, r5, #127	; 0x7f
    a96c:	b2ed      	uxtb	r5, r5
		break;
    a96e:	e000      	b.n	a972 <smp_send_pairing_confirm+0x2e>
		r = 0;
    a970:	2500      	movs	r5, #0
    a972:	4604      	mov	r4, r0
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    a974:	2210      	movs	r2, #16
    a976:	2103      	movs	r1, #3
    a978:	4630      	mov	r0, r6
    a97a:	f7ff fbdc 	bl	a136 <smp_create_pdu>
	if (!buf) {
    a97e:	4606      	mov	r6, r0
    a980:	b348      	cbz	r0, a9d6 <smp_send_pairing_confirm+0x92>
	req = net_buf_add(buf, sizeof(*req));
    a982:	2110      	movs	r1, #16
    a984:	3008      	adds	r0, #8
    a986:	f00f fd35 	bl	1a3f4 <net_buf_simple_add>
	if (smp_f4(sc_public_key, smp->pkey, smp->prnd, r, req->val)) {
    a98a:	9000      	str	r0, [sp, #0]
    a98c:	462b      	mov	r3, r5
    a98e:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    a992:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    a996:	4811      	ldr	r0, [pc, #68]	; (a9dc <smp_send_pairing_confirm+0x98>)
    a998:	f7ff fd18 	bl	a3cc <smp_f4>
    a99c:	b120      	cbz	r0, a9a8 <smp_send_pairing_confirm+0x64>
		net_buf_unref(buf);
    a99e:	4630      	mov	r0, r6
    a9a0:	f00f fcdc 	bl	1a35c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    a9a4:	2008      	movs	r0, #8
    a9a6:	e017      	b.n	a9d8 <smp_send_pairing_confirm+0x94>
	smp_send(smp, buf, NULL);
    a9a8:	2200      	movs	r2, #0
    a9aa:	4631      	mov	r1, r6
    a9ac:	4620      	mov	r0, r4
    a9ae:	f7ff fc15 	bl	a1dc <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    a9b2:	f104 00a0 	add.w	r0, r4, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    a9b6:	f3bf 8f5b 	dmb	ish
    a9ba:	e850 3f00 	ldrex	r3, [r0]
    a9be:	f023 0301 	bic.w	r3, r3, #1
    a9c2:	e840 3200 	strex	r2, r3, [r0]
    a9c6:	2a00      	cmp	r2, #0
    a9c8:	d1f7      	bne.n	a9ba <smp_send_pairing_confirm+0x76>
    a9ca:	f3bf 8f5b 	dmb	ish
	return 0;
    a9ce:	2000      	movs	r0, #0
    a9d0:	e002      	b.n	a9d8 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a9d2:	2008      	movs	r0, #8
    a9d4:	e000      	b.n	a9d8 <smp_send_pairing_confirm+0x94>
		return BT_SMP_ERR_UNSPECIFIED;
    a9d6:	2008      	movs	r0, #8
}
    a9d8:	b002      	add	sp, #8
    a9da:	bd70      	pop	{r4, r5, r6, pc}
    a9dc:	200009fc 	.word	0x200009fc

0000a9e0 <smp_c1>:
{
    a9e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    a9e4:	b088      	sub	sp, #32
    a9e6:	4604      	mov	r4, r0
    a9e8:	460f      	mov	r7, r1
    a9ea:	4611      	mov	r1, r2
    a9ec:	4698      	mov	r8, r3
    a9ee:	9d0e      	ldr	r5, [sp, #56]	; 0x38
    a9f0:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	p1[0] = ia->type;
    a9f2:	782b      	ldrb	r3, [r5, #0]
    a9f4:	f88d 3010 	strb.w	r3, [sp, #16]
	p1[1] = ra->type;
    a9f8:	7833      	ldrb	r3, [r6, #0]
    a9fa:	f88d 3011 	strb.w	r3, [sp, #17]
	memcpy(p1 + 2, preq, 7);
    a9fe:	2207      	movs	r2, #7
    aa00:	f10d 0012 	add.w	r0, sp, #18
    aa04:	f7f5 fc5c 	bl	2c0 <memcpy>
	memcpy(p1 + 9, pres, 7);
    aa08:	2207      	movs	r2, #7
    aa0a:	4641      	mov	r1, r8
    aa0c:	f10d 0019 	add.w	r0, sp, #25
    aa10:	f7f5 fc56 	bl	2c0 <memcpy>
	xor_128(r, p1, enc_data);
    aa14:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aa16:	a904      	add	r1, sp, #16
    aa18:	4638      	mov	r0, r7
    aa1a:	f7ff faf3 	bl	a004 <xor_128>
	err = bt_encrypt_le(k, enc_data, enc_data);
    aa1e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aa20:	4611      	mov	r1, r2
    aa22:	4620      	mov	r0, r4
    aa24:	f006 f98c 	bl	10d40 <bt_encrypt_le>
	if (err) {
    aa28:	4603      	mov	r3, r0
    aa2a:	b118      	cbz	r0, aa34 <smp_c1+0x54>
}
    aa2c:	4618      	mov	r0, r3
    aa2e:	b008      	add	sp, #32
    aa30:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	memcpy(p2, ra->a.val, 6);
    aa34:	2206      	movs	r2, #6
    aa36:	1c71      	adds	r1, r6, #1
    aa38:	4668      	mov	r0, sp
    aa3a:	f7f5 fc41 	bl	2c0 <memcpy>
	memcpy(p2 + 6, ia->a.val, 6);
    aa3e:	2206      	movs	r2, #6
    aa40:	1c69      	adds	r1, r5, #1
    aa42:	eb0d 0002 	add.w	r0, sp, r2
    aa46:	f7f5 fc3b 	bl	2c0 <memcpy>
	memset(p2 + 12, 0, 4);
    aa4a:	2204      	movs	r2, #4
    aa4c:	2100      	movs	r1, #0
    aa4e:	a803      	add	r0, sp, #12
    aa50:	f01e ffa2 	bl	29998 <memset>
	xor_128(enc_data, p2, enc_data);
    aa54:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aa56:	4669      	mov	r1, sp
    aa58:	4610      	mov	r0, r2
    aa5a:	f7ff fad3 	bl	a004 <xor_128>
	return bt_encrypt_le(k, enc_data, enc_data);
    aa5e:	9a10      	ldr	r2, [sp, #64]	; 0x40
    aa60:	4611      	mov	r1, r2
    aa62:	4620      	mov	r0, r4
    aa64:	f006 f96c 	bl	10d40 <bt_encrypt_le>
    aa68:	4603      	mov	r3, r0
    aa6a:	e7df      	b.n	aa2c <smp_c1+0x4c>

0000aa6c <legacy_send_pairing_confirm>:
{
    aa6c:	b570      	push	{r4, r5, r6, lr}
    aa6e:	b084      	sub	sp, #16
    aa70:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    aa72:	6805      	ldr	r5, [r0, #0]
	buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_CONFIRM, sizeof(*req));
    aa74:	2210      	movs	r2, #16
    aa76:	2103      	movs	r1, #3
    aa78:	4628      	mov	r0, r5
    aa7a:	f7ff fb5c 	bl	a136 <smp_create_pdu>
	if (!buf) {
    aa7e:	b370      	cbz	r0, aade <legacy_send_pairing_confirm+0x72>
    aa80:	4606      	mov	r6, r0
	req = net_buf_add(buf, sizeof(*req));
    aa82:	2110      	movs	r1, #16
    aa84:	3008      	adds	r0, #8
    aa86:	f00f fcb5 	bl	1a3f4 <net_buf_simple_add>
		   &conn->le.init_addr, &conn->le.resp_addr, req->val)) {
    aa8a:	f105 034f 	add.w	r3, r5, #79	; 0x4f
    aa8e:	3556      	adds	r5, #86	; 0x56
	if (smp_c1(smp->tk, smp->prnd, smp->preq, smp->prsp,
    aa90:	9002      	str	r0, [sp, #8]
    aa92:	9501      	str	r5, [sp, #4]
    aa94:	9300      	str	r3, [sp, #0]
    aa96:	f104 03ac 	add.w	r3, r4, #172	; 0xac
    aa9a:	f104 02a5 	add.w	r2, r4, #165	; 0xa5
    aa9e:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    aaa2:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    aaa6:	f7ff ff9b 	bl	a9e0 <smp_c1>
    aaaa:	b120      	cbz	r0, aab6 <legacy_send_pairing_confirm+0x4a>
		net_buf_unref(buf);
    aaac:	4630      	mov	r0, r6
    aaae:	f00f fc55 	bl	1a35c <net_buf_unref>
		return BT_SMP_ERR_UNSPECIFIED;
    aab2:	2008      	movs	r0, #8
    aab4:	e014      	b.n	aae0 <legacy_send_pairing_confirm+0x74>
	smp_send(smp, buf, NULL);
    aab6:	2200      	movs	r2, #0
    aab8:	4631      	mov	r1, r6
    aaba:	4620      	mov	r0, r4
    aabc:	f7ff fb8e 	bl	a1dc <smp_send>
	atomic_clear_bit(smp->flags, SMP_FLAG_CFM_DELAYED);
    aac0:	34a0      	adds	r4, #160	; 0xa0
    aac2:	f3bf 8f5b 	dmb	ish
    aac6:	e854 3f00 	ldrex	r3, [r4]
    aaca:	f023 0301 	bic.w	r3, r3, #1
    aace:	e844 3200 	strex	r2, r3, [r4]
    aad2:	2a00      	cmp	r2, #0
    aad4:	d1f7      	bne.n	aac6 <legacy_send_pairing_confirm+0x5a>
    aad6:	f3bf 8f5b 	dmb	ish
	return 0;
    aada:	2000      	movs	r0, #0
    aadc:	e000      	b.n	aae0 <legacy_send_pairing_confirm+0x74>
		return BT_SMP_ERR_UNSPECIFIED;
    aade:	2008      	movs	r0, #8
}
    aae0:	b004      	add	sp, #16
    aae2:	bd70      	pop	{r4, r5, r6, pc}

0000aae4 <legacy_pairing_confirm>:
{
    aae4:	b508      	push	{r3, lr}
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    aae6:	6803      	ldr	r3, [r0, #0]
    aae8:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    aaea:	b1c3      	cbz	r3, ab1e <legacy_pairing_confirm+0x3a>
		if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    aaec:	f100 03a0 	add.w	r3, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    aaf0:	f3bf 8f5b 	dmb	ish
    aaf4:	f8d0 20a0 	ldr.w	r2, [r0, #160]	; 0xa0
    aaf8:	f3bf 8f5b 	dmb	ish
    aafc:	f412 7f00 	tst.w	r2, #512	; 0x200
    ab00:	d01e      	beq.n	ab40 <legacy_pairing_confirm+0x5c>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab02:	f3bf 8f5b 	dmb	ish
    ab06:	e853 2f00 	ldrex	r2, [r3]
    ab0a:	f042 0201 	orr.w	r2, r2, #1
    ab0e:	e843 2100 	strex	r1, r2, [r3]
    ab12:	2900      	cmp	r1, #0
    ab14:	d1f7      	bne.n	ab06 <legacy_pairing_confirm+0x22>
    ab16:	f3bf 8f5b 	dmb	ish
	return 0;
    ab1a:	2000      	movs	r0, #0
}
    ab1c:	bd08      	pop	{r3, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    ab1e:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    ab22:	f3bf 8f5b 	dmb	ish
    ab26:	e853 2f00 	ldrex	r2, [r3]
    ab2a:	f042 0208 	orr.w	r2, r2, #8
    ab2e:	e843 2100 	strex	r1, r2, [r3]
    ab32:	2900      	cmp	r1, #0
    ab34:	d1f7      	bne.n	ab26 <legacy_pairing_confirm+0x42>
    ab36:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    ab3a:	f7ff ff97 	bl	aa6c <legacy_send_pairing_confirm>
    ab3e:	bd08      	pop	{r3, pc}
			atomic_set_bit(&smp->allowed_cmds,
    ab40:	f100 039c 	add.w	r3, r0, #156	; 0x9c
    ab44:	f3bf 8f5b 	dmb	ish
    ab48:	e853 2f00 	ldrex	r2, [r3]
    ab4c:	f042 0210 	orr.w	r2, r2, #16
    ab50:	e843 2100 	strex	r1, r2, [r3]
    ab54:	2900      	cmp	r1, #0
    ab56:	d1f7      	bne.n	ab48 <legacy_pairing_confirm+0x64>
    ab58:	f3bf 8f5b 	dmb	ish
			return legacy_send_pairing_confirm(smp);
    ab5c:	f7ff ff86 	bl	aa6c <legacy_send_pairing_confirm>
    ab60:	bd08      	pop	{r3, pc}

0000ab62 <smp_pairing_confirm>:
{
    ab62:	b510      	push	{r4, lr}
    ab64:	4604      	mov	r4, r0
	memcpy(smp->pcnf, req->val, sizeof(smp->pcnf));
    ab66:	2210      	movs	r2, #16
    ab68:	6889      	ldr	r1, [r1, #8]
    ab6a:	30b3      	adds	r0, #179	; 0xb3
    ab6c:	f7f5 fba8 	bl	2c0 <memcpy>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ab70:	6823      	ldr	r3, [r4, #0]
    ab72:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ab74:	b313      	cbz	r3, abbc <smp_pairing_confirm+0x5a>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    ab76:	f104 02a0 	add.w	r2, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ab7a:	f3bf 8f5b 	dmb	ish
    ab7e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ab82:	f3bf 8f5b 	dmb	ish
    ab86:	f013 0f20 	tst.w	r3, #32
    ab8a:	d029      	beq.n	abe0 <smp_pairing_confirm+0x7e>
	switch (smp->method) {
    ab8c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    ab90:	2b01      	cmp	r3, #1
    ab92:	d029      	beq.n	abe8 <smp_pairing_confirm+0x86>
    ab94:	2b02      	cmp	r3, #2
    ab96:	d150      	bne.n	ac3a <smp_pairing_confirm+0xd8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    ab98:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    ab9c:	f3bf 8f5b 	dmb	ish
    aba0:	e853 2f00 	ldrex	r2, [r3]
    aba4:	f042 0210 	orr.w	r2, r2, #16
    aba8:	e843 2100 	strex	r1, r2, [r3]
    abac:	2900      	cmp	r1, #0
    abae:	d1f7      	bne.n	aba0 <smp_pairing_confirm+0x3e>
    abb0:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    abb4:	4620      	mov	r0, r4
    abb6:	f7ff fec5 	bl	a944 <smp_send_pairing_confirm>
    abba:	bd10      	pop	{r4, pc}
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    abbc:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    abc0:	f3bf 8f5b 	dmb	ish
    abc4:	e853 2f00 	ldrex	r2, [r3]
    abc8:	f042 0210 	orr.w	r2, r2, #16
    abcc:	e843 2100 	strex	r1, r2, [r3]
    abd0:	2900      	cmp	r1, #0
    abd2:	d1f7      	bne.n	abc4 <smp_pairing_confirm+0x62>
    abd4:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_random(smp);
    abd8:	4620      	mov	r0, r4
    abda:	f7ff fb6c 	bl	a2b6 <smp_send_pairing_random>
    abde:	bd10      	pop	{r4, pc}
		return legacy_pairing_confirm(smp);
    abe0:	4620      	mov	r0, r4
    abe2:	f7ff ff7f 	bl	aae4 <legacy_pairing_confirm>
    abe6:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    abe8:	f3bf 8f5b 	dmb	ish
    abec:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    abf0:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    abf4:	f413 7f00 	tst.w	r3, #512	; 0x200
    abf8:	d111      	bne.n	ac1e <smp_pairing_confirm+0xbc>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    abfa:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    abfe:	f3bf 8f5b 	dmb	ish
    ac02:	e853 2f00 	ldrex	r2, [r3]
    ac06:	f042 0210 	orr.w	r2, r2, #16
    ac0a:	e843 2100 	strex	r1, r2, [r3]
    ac0e:	2900      	cmp	r1, #0
    ac10:	d1f7      	bne.n	ac02 <smp_pairing_confirm+0xa0>
    ac12:	f3bf 8f5b 	dmb	ish
		return smp_send_pairing_confirm(smp);
    ac16:	4620      	mov	r0, r4
    ac18:	f7ff fe94 	bl	a944 <smp_send_pairing_confirm>
    ac1c:	bd10      	pop	{r4, pc}
    ac1e:	f3bf 8f5b 	dmb	ish
    ac22:	e852 3f00 	ldrex	r3, [r2]
    ac26:	f043 0301 	orr.w	r3, r3, #1
    ac2a:	e842 3100 	strex	r1, r3, [r2]
    ac2e:	2900      	cmp	r1, #0
    ac30:	d1f7      	bne.n	ac22 <smp_pairing_confirm+0xc0>
    ac32:	f3bf 8f5b 	dmb	ish
			return 0;
    ac36:	2000      	movs	r0, #0
    ac38:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    ac3a:	2008      	movs	r0, #8
}
    ac3c:	bd10      	pop	{r4, pc}

0000ac3e <smp_s1>:
{
    ac3e:	b570      	push	{r4, r5, r6, lr}
    ac40:	4605      	mov	r5, r0
    ac42:	460e      	mov	r6, r1
    ac44:	4611      	mov	r1, r2
    ac46:	461c      	mov	r4, r3
	memcpy(out, r2, 8);
    ac48:	2208      	movs	r2, #8
    ac4a:	4618      	mov	r0, r3
    ac4c:	f7f5 fb38 	bl	2c0 <memcpy>
	memcpy(out + 8, r1, 8);
    ac50:	2208      	movs	r2, #8
    ac52:	4631      	mov	r1, r6
    ac54:	18a0      	adds	r0, r4, r2
    ac56:	f7f5 fb33 	bl	2c0 <memcpy>
	return bt_encrypt_le(k, out, out);
    ac5a:	4622      	mov	r2, r4
    ac5c:	4621      	mov	r1, r4
    ac5e:	4628      	mov	r0, r5
    ac60:	f006 f86e 	bl	10d40 <bt_encrypt_le>
}
    ac64:	bd70      	pop	{r4, r5, r6, pc}

0000ac66 <smp_reset>:
{
    ac66:	b538      	push	{r3, r4, r5, lr}
    ac68:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ac6a:	6805      	ldr	r5, [r0, #0]
	k_delayed_work_cancel(&smp->work);
    ac6c:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ac70:	f01e fcae 	bl	295d0 <k_delayed_work_cancel>
	smp->method = JUST_WORKS;
    ac74:	2200      	movs	r2, #0
    ac76:	f884 20a4 	strb.w	r2, [r4, #164]	; 0xa4
	atomic_set(&smp->allowed_cmds, 0);
    ac7a:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
    ac7e:	f3bf 8f5b 	dmb	ish
    ac82:	e853 1f00 	ldrex	r1, [r3]
    ac86:	e843 2000 	strex	r0, r2, [r3]
    ac8a:	2800      	cmp	r0, #0
    ac8c:	d1f9      	bne.n	ac82 <smp_reset+0x1c>
    ac8e:	f3bf 8f5b 	dmb	ish
	atomic_set(smp->flags, 0);
    ac92:	34a0      	adds	r4, #160	; 0xa0
    ac94:	f3bf 8f5b 	dmb	ish
    ac98:	e854 1f00 	ldrex	r1, [r4]
    ac9c:	e844 2000 	strex	r0, r2, [r4]
    aca0:	2800      	cmp	r0, #0
    aca2:	d1f9      	bne.n	ac98 <smp_reset+0x32>
    aca4:	f3bf 8f5b 	dmb	ish
	if (conn->required_sec_level != conn->sec_level) {
    aca8:	7a69      	ldrb	r1, [r5, #9]
    acaa:	7a2a      	ldrb	r2, [r5, #8]
    acac:	4291      	cmp	r1, r2
    acae:	d000      	beq.n	acb2 <smp_reset+0x4c>
		conn->required_sec_level = conn->sec_level;
    acb0:	726a      	strb	r2, [r5, #9]
	    conn->role == BT_HCI_ROLE_MASTER) {
    acb2:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    acb4:	b162      	cbz	r2, acd0 <smp_reset+0x6a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    acb6:	f3bf 8f5b 	dmb	ish
    acba:	e853 2f00 	ldrex	r2, [r3]
    acbe:	f042 0202 	orr.w	r2, r2, #2
    acc2:	e843 2100 	strex	r1, r2, [r3]
    acc6:	2900      	cmp	r1, #0
    acc8:	d1f7      	bne.n	acba <smp_reset+0x54>
    acca:	f3bf 8f5b 	dmb	ish
    acce:	bd38      	pop	{r3, r4, r5, pc}
    acd0:	f3bf 8f5b 	dmb	ish
    acd4:	e853 2f00 	ldrex	r2, [r3]
    acd8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    acdc:	e843 2100 	strex	r1, r2, [r3]
    ace0:	2900      	cmp	r1, #0
    ace2:	d1f7      	bne.n	acd4 <smp_reset+0x6e>
    ace4:	f3bf 8f5b 	dmb	ish
    ace8:	bd38      	pop	{r3, r4, r5, pc}

0000acea <smp_pairing_complete>:
{
    acea:	b508      	push	{r3, lr}
	smp_reset(smp);
    acec:	f7ff ffbb 	bl	ac66 <smp_reset>
    acf0:	bd08      	pop	{r3, pc}

0000acf2 <smp_error>:
{
    acf2:	b570      	push	{r4, r5, r6, lr}
    acf4:	4604      	mov	r4, r0
    acf6:	460e      	mov	r6, r1
	smp_pairing_complete(smp, reason);
    acf8:	f7ff fff7 	bl	acea <smp_pairing_complete>
	buf = smp_create_pdu(smp->chan.chan.conn, BT_SMP_CMD_PAIRING_FAIL,
    acfc:	2201      	movs	r2, #1
    acfe:	2105      	movs	r1, #5
    ad00:	6820      	ldr	r0, [r4, #0]
    ad02:	f7ff fa18 	bl	a136 <smp_create_pdu>
	if (!buf) {
    ad06:	b168      	cbz	r0, ad24 <smp_error+0x32>
    ad08:	4605      	mov	r5, r0
	rsp = net_buf_add(buf, sizeof(*rsp));
    ad0a:	2101      	movs	r1, #1
    ad0c:	3008      	adds	r0, #8
    ad0e:	f00f fb71 	bl	1a3f4 <net_buf_simple_add>
	rsp->reason = reason;
    ad12:	7006      	strb	r6, [r0, #0]
    ad14:	2300      	movs	r3, #0
    ad16:	462a      	mov	r2, r5
    ad18:	2106      	movs	r1, #6
    ad1a:	6820      	ldr	r0, [r4, #0]
    ad1c:	f7fc fd01 	bl	7722 <bt_l2cap_send_cb>
	return 0;
    ad20:	2000      	movs	r0, #0
    ad22:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOBUFS;
    ad24:	f06f 0068 	mvn.w	r0, #104	; 0x68
}
    ad28:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ad2c <bt_smp_dhkey_ready>:
{
    ad2c:	b510      	push	{r4, lr}
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    ad2e:	2400      	movs	r4, #0
    ad30:	b384      	cbz	r4, ad94 <bt_smp_dhkey_ready+0x68>
	struct bt_smp *smp = NULL;
    ad32:	2400      	movs	r4, #0
	if (!smp) {
    ad34:	b36c      	cbz	r4, ad92 <bt_smp_dhkey_ready+0x66>
    ad36:	4601      	mov	r1, r0
	if (!dhkey) {
    ad38:	2800      	cmp	r0, #0
    ad3a:	d04b      	beq.n	add4 <bt_smp_dhkey_ready+0xa8>
	memcpy(smp->dhkey, dhkey, 32);
    ad3c:	2220      	movs	r2, #32
    ad3e:	f204 1033 	addw	r0, r4, #307	; 0x133
    ad42:	f7f5 fabd 	bl	2c0 <memcpy>
	if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    ad46:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ad4a:	f3bf 8f5b 	dmb	ish
    ad4e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ad52:	f3bf 8f5b 	dmb	ish
    ad56:	f412 7f00 	tst.w	r2, #512	; 0x200
    ad5a:	d140      	bne.n	adde <bt_smp_dhkey_ready+0xb2>
    ad5c:	f3bf 8f5b 	dmb	ish
    ad60:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
    ad64:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT)) {
    ad68:	f412 5f00 	tst.w	r2, #8192	; 0x2000
    ad6c:	d144      	bne.n	adf8 <bt_smp_dhkey_ready+0xcc>
    ad6e:	f3bf 8f5b 	dmb	ish
    ad72:	681b      	ldr	r3, [r3, #0]
    ad74:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_SEND)) {
    ad78:	f413 7f80 	tst.w	r3, #256	; 0x100
    ad7c:	d009      	beq.n	ad92 <bt_smp_dhkey_ready+0x66>
		if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    ad7e:	6823      	ldr	r3, [r4, #0]
    ad80:	78db      	ldrb	r3, [r3, #3]
    ad82:	2b00      	cmp	r3, #0
    ad84:	d149      	bne.n	ae1a <bt_smp_dhkey_ready+0xee>
			err = compute_and_send_master_dhcheck(smp);
    ad86:	4620      	mov	r0, r4
    ad88:	f7ff fcb4 	bl	a6f4 <compute_and_send_master_dhcheck>
			if (err) {
    ad8c:	4601      	mov	r1, r0
    ad8e:	2800      	cmp	r0, #0
    ad90:	d13f      	bne.n	ae12 <bt_smp_dhkey_ready+0xe6>
    ad92:	bd10      	pop	{r4, pc}
		if (atomic_test_and_clear_bit(bt_smp_pool[i].flags,
    ad94:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    ad98:	fb03 f304 	mul.w	r3, r3, r4
    ad9c:	f103 02a0 	add.w	r2, r3, #160	; 0xa0
    ada0:	4b23      	ldr	r3, [pc, #140]	; (ae30 <bt_smp_dhkey_ready+0x104>)
    ada2:	4413      	add	r3, r2
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    ada4:	f3bf 8f5b 	dmb	ish
    ada8:	e853 2f00 	ldrex	r2, [r3]
    adac:	f022 0180 	bic.w	r1, r2, #128	; 0x80
    adb0:	e843 1e00 	strex	lr, r1, [r3]
    adb4:	f1be 0f00 	cmp.w	lr, #0
    adb8:	d1f6      	bne.n	ada8 <bt_smp_dhkey_ready+0x7c>
    adba:	f3bf 8f5b 	dmb	ish
    adbe:	f012 0f80 	tst.w	r2, #128	; 0x80
    adc2:	d101      	bne.n	adc8 <bt_smp_dhkey_ready+0x9c>
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    adc4:	3401      	adds	r4, #1
    adc6:	e7b3      	b.n	ad30 <bt_smp_dhkey_ready+0x4>
			smp = &bt_smp_pool[i];
    adc8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    adcc:	4b18      	ldr	r3, [pc, #96]	; (ae30 <bt_smp_dhkey_ready+0x104>)
    adce:	fb02 3404 	mla	r4, r2, r4, r3
			break;
    add2:	e7af      	b.n	ad34 <bt_smp_dhkey_ready+0x8>
		smp_error(smp, BT_SMP_ERR_DHKEY_CHECK_FAILED);
    add4:	210b      	movs	r1, #11
    add6:	4620      	mov	r0, r4
    add8:	f7ff ff8b 	bl	acf2 <smp_error>
		return;
    addc:	bd10      	pop	{r4, pc}
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    adde:	f3bf 8f5b 	dmb	ish
    ade2:	e853 2f00 	ldrex	r2, [r3]
    ade6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    adea:	e843 2100 	strex	r1, r2, [r3]
    adee:	2900      	cmp	r1, #0
    adf0:	d1f7      	bne.n	ade2 <bt_smp_dhkey_ready+0xb6>
    adf2:	f3bf 8f5b 	dmb	ish
    adf6:	bd10      	pop	{r4, pc}
    adf8:	f3bf 8f5b 	dmb	ish
    adfc:	e853 2f00 	ldrex	r2, [r3]
    ae00:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    ae04:	e843 2100 	strex	r1, r2, [r3]
    ae08:	2900      	cmp	r1, #0
    ae0a:	d1f7      	bne.n	adfc <bt_smp_dhkey_ready+0xd0>
    ae0c:	f3bf 8f5b 	dmb	ish
    ae10:	bd10      	pop	{r4, pc}
				smp_error(smp, err);
    ae12:	4620      	mov	r0, r4
    ae14:	f7ff ff6d 	bl	acf2 <smp_error>
    ae18:	bd10      	pop	{r4, pc}
		err = compute_and_check_and_send_slave_dhcheck(smp);
    ae1a:	4620      	mov	r0, r4
    ae1c:	f7ff fcc4 	bl	a7a8 <compute_and_check_and_send_slave_dhcheck>
		if (err) {
    ae20:	4601      	mov	r1, r0
    ae22:	2800      	cmp	r0, #0
    ae24:	d0b5      	beq.n	ad92 <bt_smp_dhkey_ready+0x66>
			smp_error(smp, err);
    ae26:	4620      	mov	r0, r4
    ae28:	f7ff ff63 	bl	acf2 <smp_error>
    ae2c:	e7b1      	b.n	ad92 <bt_smp_dhkey_ready+0x66>
    ae2e:	bf00      	nop
    ae30:	20000854 	.word	0x20000854

0000ae34 <smp_pairing_failed>:
{
    ae34:	b538      	push	{r3, r4, r5, lr}
    ae36:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ae38:	6800      	ldr	r0, [r0, #0]
	struct bt_smp_pairing_fail *req = (void *)buf->data;
    ae3a:	688d      	ldr	r5, [r1, #8]
	switch (smp->method) {
    ae3c:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    ae40:	3b01      	subs	r3, #1
    ae42:	2b02      	cmp	r3, #2
    ae44:	d913      	bls.n	ae6e <smp_pairing_failed+0x3a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ae46:	f3bf 8f5b 	dmb	ish
    ae4a:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    ae4e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ae52:	f013 0f04 	tst.w	r3, #4
    ae56:	d004      	beq.n	ae62 <smp_pairing_failed+0x2e>
	    smp->chan.chan.conn->le.keys) {
    ae58:	6823      	ldr	r3, [r4, #0]
    ae5a:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    ae5c:	b108      	cbz	r0, ae62 <smp_pairing_failed+0x2e>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    ae5e:	f001 fd98 	bl	c992 <bt_keys_clear>
	smp_pairing_complete(smp, req->reason);
    ae62:	7829      	ldrb	r1, [r5, #0]
    ae64:	4620      	mov	r0, r4
    ae66:	f7ff ff40 	bl	acea <smp_pairing_complete>
}
    ae6a:	2000      	movs	r0, #0
    ae6c:	bd38      	pop	{r3, r4, r5, pc}
		bt_auth->cancel(conn);
    ae6e:	4b02      	ldr	r3, [pc, #8]	; (ae78 <smp_pairing_failed+0x44>)
    ae70:	681b      	ldr	r3, [r3, #0]
    ae72:	68db      	ldr	r3, [r3, #12]
    ae74:	4798      	blx	r3
		break;
    ae76:	e7e6      	b.n	ae46 <smp_pairing_failed+0x12>
    ae78:	20002a10 	.word	0x20002a10

0000ae7c <bt_smp_disconnected>:
{
    ae7c:	b538      	push	{r3, r4, r5, lr}
    ae7e:	4605      	mov	r5, r0
	struct bt_keys *keys = chan->conn->le.keys;
    ae80:	6803      	ldr	r3, [r0, #0]
    ae82:	6f1c      	ldr	r4, [r3, #112]	; 0x70
	k_delayed_work_cancel(&smp->work);
    ae84:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    ae88:	f01e fba2 	bl	295d0 <k_delayed_work_cancel>
	if (keys) {
    ae8c:	b164      	cbz	r4, aea8 <bt_smp_disconnected+0x2c>
		if (!keys->keys ||
    ae8e:	89a3      	ldrh	r3, [r4, #12]
    ae90:	b13b      	cbz	r3, aea2 <bt_smp_disconnected+0x26>
    ae92:	f3bf 8f5b 	dmb	ish
    ae96:	68a3      	ldr	r3, [r4, #8]
    ae98:	f3bf 8f5b 	dmb	ish
    ae9c:	f013 0f02 	tst.w	r3, #2
    aea0:	d002      	beq.n	aea8 <bt_smp_disconnected+0x2c>
			bt_keys_clear(keys);
    aea2:	4620      	mov	r0, r4
    aea4:	f001 fd75 	bl	c992 <bt_keys_clear>
	memset(smp, 0, sizeof(*smp));
    aea8:	f44f 72d2 	mov.w	r2, #420	; 0x1a4
    aeac:	2100      	movs	r1, #0
    aeae:	4628      	mov	r0, r5
    aeb0:	f01e fd72 	bl	29998 <memset>
    aeb4:	bd38      	pop	{r3, r4, r5, pc}

0000aeb6 <smp_timeout>:
{
    aeb6:	b538      	push	{r3, r4, r5, lr}
	struct bt_smp *smp = CONTAINER_OF(work, struct bt_smp, work);
    aeb8:	f5a0 75be 	sub.w	r5, r0, #380	; 0x17c
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    aebc:	f1a0 04dc 	sub.w	r4, r0, #220	; 0xdc
    aec0:	f3bf 8f5b 	dmb	ish
    aec4:	f850 3cdc 	ldr.w	r3, [r0, #-220]
    aec8:	f3bf 8f5b 	dmb	ish
    aecc:	f013 0f04 	tst.w	r3, #4
    aed0:	d004      	beq.n	aedc <smp_timeout+0x26>
	    smp->chan.chan.conn->le.keys) {
    aed2:	682b      	ldr	r3, [r5, #0]
    aed4:	6f18      	ldr	r0, [r3, #112]	; 0x70
	if (atomic_test_bit(smp->flags, SMP_FLAG_KEYS_DISTR) &&
    aed6:	b108      	cbz	r0, aedc <smp_timeout+0x26>
		bt_keys_clear(smp->chan.chan.conn->le.keys);
    aed8:	f001 fd5b 	bl	c992 <bt_keys_clear>
	smp_pairing_complete(smp, BT_SMP_ERR_UNSPECIFIED);
    aedc:	2108      	movs	r1, #8
    aede:	4628      	mov	r0, r5
    aee0:	f7ff ff03 	bl	acea <smp_pairing_complete>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    aee4:	f3bf 8f5b 	dmb	ish
    aee8:	e854 3f00 	ldrex	r3, [r4]
    aeec:	f043 0310 	orr.w	r3, r3, #16
    aef0:	e844 3200 	strex	r2, r3, [r4]
    aef4:	2a00      	cmp	r2, #0
    aef6:	d1f7      	bne.n	aee8 <smp_timeout+0x32>
    aef8:	f3bf 8f5b 	dmb	ish
    aefc:	bd38      	pop	{r3, r4, r5, pc}
	...

0000af00 <legacy_distribute_keys>:
{
    af00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    af04:	b088      	sub	sp, #32
	struct bt_conn *conn = smp->chan.chan.conn;
    af06:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    af08:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (smp->local_dist & BT_SMP_DIST_ENC_KEY) {
    af0a:	f890 3179 	ldrb.w	r3, [r0, #377]	; 0x179
    af0e:	f013 0f01 	tst.w	r3, #1
    af12:	d102      	bne.n	af1a <legacy_distribute_keys+0x1a>
}
    af14:	b008      	add	sp, #32
    af16:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    af1a:	4604      	mov	r4, r0
		bt_rand(key, sizeof(key));
    af1c:	2110      	movs	r1, #16
    af1e:	eb0d 0001 	add.w	r0, sp, r1
    af22:	f005 fef1 	bl	10d08 <bt_rand>
		bt_rand(&rand, sizeof(rand));
    af26:	2108      	movs	r1, #8
    af28:	eb0d 0001 	add.w	r0, sp, r1
    af2c:	f005 feec 	bl	10d08 <bt_rand>
		bt_rand(&ediv, sizeof(ediv));
    af30:	2102      	movs	r1, #2
    af32:	f10d 0006 	add.w	r0, sp, #6
    af36:	f005 fee7 	bl	10d08 <bt_rand>
		buf = smp_create_pdu(conn, BT_SMP_CMD_ENCRYPT_INFO,
    af3a:	2210      	movs	r2, #16
    af3c:	2106      	movs	r1, #6
    af3e:	4628      	mov	r0, r5
    af40:	f7ff f8f9 	bl	a136 <smp_create_pdu>
		if (!buf) {
    af44:	4607      	mov	r7, r0
    af46:	2800      	cmp	r0, #0
    af48:	d0e4      	beq.n	af14 <legacy_distribute_keys+0x14>
		info = net_buf_add(buf, sizeof(*info));
    af4a:	2110      	movs	r1, #16
    af4c:	3008      	adds	r0, #8
    af4e:	f00f fa51 	bl	1a3f4 <net_buf_simple_add>
    af52:	4680      	mov	r8, r0
		memcpy(info->ltk, key, keys->enc_size);
    af54:	79f2      	ldrb	r2, [r6, #7]
    af56:	a904      	add	r1, sp, #16
    af58:	f7f5 f9b2 	bl	2c0 <memcpy>
		if (keys->enc_size < sizeof(info->ltk)) {
    af5c:	79f0      	ldrb	r0, [r6, #7]
    af5e:	280f      	cmp	r0, #15
    af60:	d93b      	bls.n	afda <legacy_distribute_keys+0xda>
		smp_send(smp, buf, NULL);
    af62:	2200      	movs	r2, #0
    af64:	4639      	mov	r1, r7
    af66:	4620      	mov	r0, r4
    af68:	f7ff f938 	bl	a1dc <smp_send>
		buf = smp_create_pdu(conn, BT_SMP_CMD_MASTER_IDENT,
    af6c:	220a      	movs	r2, #10
    af6e:	2107      	movs	r1, #7
    af70:	4628      	mov	r0, r5
    af72:	f7ff f8e0 	bl	a136 <smp_create_pdu>
		if (!buf) {
    af76:	4605      	mov	r5, r0
    af78:	2800      	cmp	r0, #0
    af7a:	d0cb      	beq.n	af14 <legacy_distribute_keys+0x14>
		ident = net_buf_add(buf, sizeof(*ident));
    af7c:	210a      	movs	r1, #10
    af7e:	3008      	adds	r0, #8
    af80:	f00f fa38 	bl	1a3f4 <net_buf_simple_add>
		ident->rand = rand;
    af84:	9b03      	ldr	r3, [sp, #12]
    af86:	9a02      	ldr	r2, [sp, #8]
    af88:	f8c0 2002 	str.w	r2, [r0, #2]
    af8c:	f8c0 3006 	str.w	r3, [r0, #6]
		ident->ediv = ediv;
    af90:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    af94:	8003      	strh	r3, [r0, #0]
		smp_send(smp, buf, ident_sent);
    af96:	4a14      	ldr	r2, [pc, #80]	; (afe8 <legacy_distribute_keys+0xe8>)
    af98:	4629      	mov	r1, r5
    af9a:	4620      	mov	r0, r4
    af9c:	f7ff f91e 	bl	a1dc <smp_send>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    afa0:	f3bf 8f5b 	dmb	ish
    afa4:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    afa8:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    afac:	f413 6f80 	tst.w	r3, #1024	; 0x400
    afb0:	d0b0      	beq.n	af14 <legacy_distribute_keys+0x14>
			bt_keys_add_type(keys, BT_KEYS_SLAVE_LTK);
    afb2:	2101      	movs	r1, #1
    afb4:	4630      	mov	r0, r6
    afb6:	f001 fcd5 	bl	c964 <bt_keys_add_type>
			memcpy(keys->slave_ltk.val, key,
    afba:	2210      	movs	r2, #16
    afbc:	eb0d 0102 	add.w	r1, sp, r2
    afc0:	f106 007a 	add.w	r0, r6, #122	; 0x7a
    afc4:	f7f5 f97c 	bl	2c0 <memcpy>
			keys->slave_ltk.rand = rand;
    afc8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
    afcc:	e9c6 231c 	strd	r2, r3, [r6, #112]	; 0x70
			keys->slave_ltk.ediv = ediv;
    afd0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    afd4:	f8a6 3078 	strh.w	r3, [r6, #120]	; 0x78
    afd8:	e79c      	b.n	af14 <legacy_distribute_keys+0x14>
			memset(info->ltk + keys->enc_size, 0,
    afda:	f1c0 0210 	rsb	r2, r0, #16
    afde:	2100      	movs	r1, #0
    afe0:	4440      	add	r0, r8
    afe2:	f01e fcd9 	bl	29998 <memset>
    afe6:	e7bc      	b.n	af62 <legacy_distribute_keys+0x62>
    afe8:	0000bc1b 	.word	0x0000bc1b

0000afec <bt_smp_distribute_keys>:
{
    afec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    afee:	6805      	ldr	r5, [r0, #0]
	struct bt_keys *keys = conn->le.keys;
    aff0:	6f2e      	ldr	r6, [r5, #112]	; 0x70
	if (!keys) {
    aff2:	b176      	cbz	r6, b012 <bt_smp_distribute_keys+0x26>
    aff4:	4604      	mov	r4, r0
    aff6:	f3bf 8f5b 	dmb	ish
    affa:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    affe:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b002:	f013 0f20 	tst.w	r3, #32
    b006:	d005      	beq.n	b014 <bt_smp_distribute_keys+0x28>
	if (smp->local_dist & BT_SMP_DIST_SIGN) {
    b008:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    b00c:	f013 0f04 	tst.w	r3, #4
    b010:	d103      	bne.n	b01a <bt_smp_distribute_keys+0x2e>
    b012:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		legacy_distribute_keys(smp);
    b014:	f7ff ff74 	bl	af00 <legacy_distribute_keys>
    b018:	e7f6      	b.n	b008 <bt_smp_distribute_keys+0x1c>
		buf = smp_create_pdu(conn, BT_SMP_CMD_SIGNING_INFO,
    b01a:	2210      	movs	r2, #16
    b01c:	210a      	movs	r1, #10
    b01e:	4628      	mov	r0, r5
    b020:	f7ff f889 	bl	a136 <smp_create_pdu>
		if (!buf) {
    b024:	4605      	mov	r5, r0
    b026:	2800      	cmp	r0, #0
    b028:	d0f3      	beq.n	b012 <bt_smp_distribute_keys+0x26>
		info = net_buf_add(buf, sizeof(*info));
    b02a:	2110      	movs	r1, #16
    b02c:	3008      	adds	r0, #8
    b02e:	f00f f9e1 	bl	1a3f4 <net_buf_simple_add>
    b032:	4607      	mov	r7, r0
		bt_rand(info->csrk, sizeof(info->csrk));
    b034:	2110      	movs	r1, #16
    b036:	f005 fe67 	bl	10d08 <bt_rand>
    b03a:	f3bf 8f5b 	dmb	ish
    b03e:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b042:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    b046:	f413 6f80 	tst.w	r3, #1024	; 0x400
    b04a:	d105      	bne.n	b058 <bt_smp_distribute_keys+0x6c>
		smp_send(smp, buf, sign_info_sent);
    b04c:	4a09      	ldr	r2, [pc, #36]	; (b074 <bt_smp_distribute_keys+0x88>)
    b04e:	4629      	mov	r1, r5
    b050:	4620      	mov	r0, r4
    b052:	f7ff f8c3 	bl	a1dc <smp_send>
    b056:	e7dc      	b.n	b012 <bt_smp_distribute_keys+0x26>
			bt_keys_add_type(keys, BT_KEYS_LOCAL_CSRK);
    b058:	2108      	movs	r1, #8
    b05a:	4630      	mov	r0, r6
    b05c:	f001 fc82 	bl	c964 <bt_keys_add_type>
			memcpy(keys->local_csrk.val, info->csrk, 16);
    b060:	2210      	movs	r2, #16
    b062:	4639      	mov	r1, r7
    b064:	f106 0048 	add.w	r0, r6, #72	; 0x48
    b068:	f7f5 f92a 	bl	2c0 <memcpy>
			keys->local_csrk.cnt = 0;
    b06c:	2300      	movs	r3, #0
    b06e:	65b3      	str	r3, [r6, #88]	; 0x58
    b070:	e7ec      	b.n	b04c <bt_smp_distribute_keys+0x60>
    b072:	bf00      	nop
    b074:	0000bc11 	.word	0x0000bc11

0000b078 <bt_smp_encrypt_change>:
	struct bt_conn *conn = chan->conn;
    b078:	6803      	ldr	r3, [r0, #0]
	if (hci_status) {
    b07a:	b911      	cbnz	r1, b082 <bt_smp_encrypt_change+0xa>
	if (!smp || !conn->encrypt) {
    b07c:	b108      	cbz	r0, b082 <bt_smp_encrypt_change+0xa>
    b07e:	7a9a      	ldrb	r2, [r3, #10]
    b080:	b902      	cbnz	r2, b084 <bt_smp_encrypt_change+0xc>
    b082:	4770      	bx	lr
{
    b084:	b510      	push	{r4, lr}
	if (!atomic_test_and_clear_bit(smp->flags, SMP_FLAG_ENC_PENDING)) {
    b086:	f100 02a0 	add.w	r2, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b08a:	f3bf 8f5b 	dmb	ish
    b08e:	e852 1f00 	ldrex	r1, [r2]
    b092:	f021 0402 	bic.w	r4, r1, #2
    b096:	e842 4e00 	strex	lr, r4, [r2]
    b09a:	f1be 0f00 	cmp.w	lr, #0
    b09e:	d1f6      	bne.n	b08e <bt_smp_encrypt_change+0x16>
    b0a0:	f3bf 8f5b 	dmb	ish
    b0a4:	f011 0f02 	tst.w	r1, #2
    b0a8:	d100      	bne.n	b0ac <bt_smp_encrypt_change+0x34>
    b0aa:	bd10      	pop	{r4, pc}
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b0ac:	f3bf 8f5b 	dmb	ish
    b0b0:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b0b4:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    b0b8:	f011 0f08 	tst.w	r1, #8
    b0bc:	d04b      	beq.n	b156 <bt_smp_encrypt_change+0xde>
    b0be:	f3bf 8f5b 	dmb	ish
    b0c2:	f8d0 10a0 	ldr.w	r1, [r0, #160]	; 0xa0
    b0c6:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b0ca:	f011 0f20 	tst.w	r1, #32
    b0ce:	d015      	beq.n	b0fc <bt_smp_encrypt_change+0x84>
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b0d0:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b0d4:	f011 0f08 	tst.w	r1, #8
    b0d8:	d004      	beq.n	b0e4 <bt_smp_encrypt_change+0x6c>
		    (smp->remote_dist & BT_SMP_DIST_LINK_KEY)) {
    b0da:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
		if ((smp->local_dist & BT_SMP_DIST_LINK_KEY) &&
    b0de:	f011 0f08 	tst.w	r1, #8
    b0e2:	d146      	bne.n	b172 <bt_smp_encrypt_change+0xfa>
		smp->local_dist &= ~BT_SMP_DIST_LINK_KEY;
    b0e4:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    b0e8:	f021 0108 	bic.w	r1, r1, #8
    b0ec:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		smp->remote_dist &= ~BT_SMP_DIST_LINK_KEY;
    b0f0:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b0f4:	f021 0108 	bic.w	r1, r1, #8
    b0f8:	f880 117a 	strb.w	r1, [r0, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_ENC_KEY) {
    b0fc:	f890 117a 	ldrb.w	r1, [r0, #378]	; 0x17a
    b100:	f011 0f01 	tst.w	r1, #1
    b104:	d142      	bne.n	b18c <bt_smp_encrypt_change+0x114>
	} else if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    b106:	f011 0f02 	tst.w	r1, #2
    b10a:	d14f      	bne.n	b1ac <bt_smp_encrypt_change+0x134>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    b10c:	f011 0f04 	tst.w	r1, #4
    b110:	d15c      	bne.n	b1cc <bt_smp_encrypt_change+0x154>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b112:	f3bf 8f5b 	dmb	ish
    b116:	e852 1f00 	ldrex	r1, [r2]
    b11a:	f041 0104 	orr.w	r1, r1, #4
    b11e:	e842 1400 	strex	r4, r1, [r2]
    b122:	2c00      	cmp	r4, #0
    b124:	d1f7      	bne.n	b116 <bt_smp_encrypt_change+0x9e>
    b126:	f3bf 8f5b 	dmb	ish
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b12a:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b12c:	b91b      	cbnz	r3, b136 <bt_smp_encrypt_change+0xbe>
	    conn->role == BT_HCI_ROLE_MASTER && smp->remote_dist) {
    b12e:	f890 317a 	ldrb.w	r3, [r0, #378]	; 0x17a
    b132:	2b00      	cmp	r3, #0
    b134:	d1b9      	bne.n	b0aa <bt_smp_encrypt_change+0x32>
    b136:	4604      	mov	r4, r0
	bt_smp_distribute_keys(smp);
    b138:	f7ff ff58 	bl	afec <bt_smp_distribute_keys>
	if (!smp->local_dist && !smp->remote_dist) {
    b13c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    b140:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    b144:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    b148:	2b00      	cmp	r3, #0
    b14a:	d1ae      	bne.n	b0aa <bt_smp_encrypt_change+0x32>
		smp_pairing_complete(smp, 0);
    b14c:	2100      	movs	r1, #0
    b14e:	4620      	mov	r0, r4
    b150:	f7ff fdcb 	bl	acea <smp_pairing_complete>
    b154:	e7a9      	b.n	b0aa <bt_smp_encrypt_change+0x32>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SECURITY_REQUEST);
    b156:	309c      	adds	r0, #156	; 0x9c
    b158:	f3bf 8f5b 	dmb	ish
    b15c:	e850 3f00 	ldrex	r3, [r0]
    b160:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
    b164:	e840 3200 	strex	r2, r3, [r0]
    b168:	2a00      	cmp	r2, #0
    b16a:	d1f7      	bne.n	b15c <bt_smp_encrypt_change+0xe4>
    b16c:	f3bf 8f5b 	dmb	ish
    b170:	bd10      	pop	{r4, pc}
    b172:	f3bf 8f5b 	dmb	ish
    b176:	e852 1f00 	ldrex	r1, [r2]
    b17a:	f441 4180 	orr.w	r1, r1, #16384	; 0x4000
    b17e:	e842 1400 	strex	r4, r1, [r2]
    b182:	2c00      	cmp	r4, #0
    b184:	d1f7      	bne.n	b176 <bt_smp_encrypt_change+0xfe>
    b186:	f3bf 8f5b 	dmb	ish
    b18a:	e7ab      	b.n	b0e4 <bt_smp_encrypt_change+0x6c>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_ENCRYPT_INFO);
    b18c:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b190:	f3bf 8f5b 	dmb	ish
    b194:	e851 4f00 	ldrex	r4, [r1]
    b198:	f044 0440 	orr.w	r4, r4, #64	; 0x40
    b19c:	e841 4e00 	strex	lr, r4, [r1]
    b1a0:	f1be 0f00 	cmp.w	lr, #0
    b1a4:	d1f6      	bne.n	b194 <bt_smp_encrypt_change+0x11c>
    b1a6:	f3bf 8f5b 	dmb	ish
    b1aa:	e7b2      	b.n	b112 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    b1ac:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b1b0:	f3bf 8f5b 	dmb	ish
    b1b4:	e851 4f00 	ldrex	r4, [r1]
    b1b8:	f444 7480 	orr.w	r4, r4, #256	; 0x100
    b1bc:	e841 4e00 	strex	lr, r4, [r1]
    b1c0:	f1be 0f00 	cmp.w	lr, #0
    b1c4:	d1f6      	bne.n	b1b4 <bt_smp_encrypt_change+0x13c>
    b1c6:	f3bf 8f5b 	dmb	ish
    b1ca:	e7a2      	b.n	b112 <bt_smp_encrypt_change+0x9a>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    b1cc:	f100 019c 	add.w	r1, r0, #156	; 0x9c
    b1d0:	f3bf 8f5b 	dmb	ish
    b1d4:	e851 4f00 	ldrex	r4, [r1]
    b1d8:	f444 6480 	orr.w	r4, r4, #1024	; 0x400
    b1dc:	e841 4e00 	strex	lr, r4, [r1]
    b1e0:	f1be 0f00 	cmp.w	lr, #0
    b1e4:	d1f6      	bne.n	b1d4 <bt_smp_encrypt_change+0x15c>
    b1e6:	f3bf 8f5b 	dmb	ish
    b1ea:	e792      	b.n	b112 <bt_smp_encrypt_change+0x9a>

0000b1ec <bt_smp_recv>:
{
    b1ec:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_hdr *hdr = (void *)buf->data;
    b1ee:	688e      	ldr	r6, [r1, #8]
	if (buf->len < sizeof(*hdr)) {
    b1f0:	898b      	ldrh	r3, [r1, #12]
    b1f2:	b903      	cbnz	r3, b1f6 <bt_smp_recv+0xa>
    b1f4:	bd70      	pop	{r4, r5, r6, pc}
    b1f6:	460c      	mov	r4, r1
    b1f8:	4605      	mov	r5, r0
	net_buf_pull(buf, sizeof(*hdr));
    b1fa:	2101      	movs	r1, #1
    b1fc:	f104 0008 	add.w	r0, r4, #8
    b200:	f00f f945 	bl	1a48e <net_buf_simple_pull>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b204:	f3bf 8f5b 	dmb	ish
    b208:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b20c:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    b210:	f013 0f10 	tst.w	r3, #16
    b214:	d1ee      	bne.n	b1f4 <bt_smp_recv+0x8>
	if (hdr->code >= ARRAY_SIZE(handlers) || !handlers[hdr->code].func) {
    b216:	7833      	ldrb	r3, [r6, #0]
    b218:	2b0d      	cmp	r3, #13
    b21a:	d824      	bhi.n	b266 <bt_smp_recv+0x7a>
    b21c:	4a21      	ldr	r2, [pc, #132]	; (b2a4 <bt_smp_recv+0xb8>)
    b21e:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
    b222:	b302      	cbz	r2, b266 <bt_smp_recv+0x7a>
	if (!atomic_test_and_clear_bit(&smp->allowed_cmds, hdr->code)) {
    b224:	f105 029c 	add.w	r2, r5, #156	; 0x9c
 *
 * @return 1 if the bit was set, 0 if it wasn't.
 */
static inline int atomic_test_and_clear_bit(atomic_t *target, int bit)
{
	atomic_val_t mask = ATOMIC_MASK(bit);
    b228:	f003 001f 	and.w	r0, r3, #31
    b22c:	2101      	movs	r1, #1
    b22e:	4081      	lsls	r1, r0
	atomic_val_t old;

	old = atomic_and(ATOMIC_ELEM(target, bit), ~mask);
    b230:	095b      	lsrs	r3, r3, #5
    b232:	eb02 0383 	add.w	r3, r2, r3, lsl #2
    b236:	43c8      	mvns	r0, r1
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b238:	f3bf 8f5b 	dmb	ish
    b23c:	e853 2f00 	ldrex	r2, [r3]
    b240:	ea02 0e00 	and.w	lr, r2, r0
    b244:	e843 ec00 	strex	ip, lr, [r3]
    b248:	f1bc 0f00 	cmp.w	ip, #0
    b24c:	d1f6      	bne.n	b23c <bt_smp_recv+0x50>
    b24e:	f3bf 8f5b 	dmb	ish
    b252:	4211      	tst	r1, r2
    b254:	d10c      	bne.n	b270 <bt_smp_recv+0x84>
		if (hdr->code != BT_SMP_CMD_PAIRING_FAIL) {
    b256:	7833      	ldrb	r3, [r6, #0]
    b258:	2b05      	cmp	r3, #5
    b25a:	d0cb      	beq.n	b1f4 <bt_smp_recv+0x8>
			smp_error(smp, BT_SMP_ERR_UNSPECIFIED);
    b25c:	2108      	movs	r1, #8
    b25e:	4628      	mov	r0, r5
    b260:	f7ff fd47 	bl	acf2 <smp_error>
    b264:	bd70      	pop	{r4, r5, r6, pc}
		smp_error(smp, BT_SMP_ERR_CMD_NOTSUPP);
    b266:	2107      	movs	r1, #7
    b268:	4628      	mov	r0, r5
    b26a:	f7ff fd42 	bl	acf2 <smp_error>
		return;
    b26e:	bd70      	pop	{r4, r5, r6, pc}
	if (buf->len != handlers[hdr->code].expect_len) {
    b270:	89a1      	ldrh	r1, [r4, #12]
    b272:	7832      	ldrb	r2, [r6, #0]
    b274:	4b0b      	ldr	r3, [pc, #44]	; (b2a4 <bt_smp_recv+0xb8>)
    b276:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
    b27a:	791b      	ldrb	r3, [r3, #4]
    b27c:	4299      	cmp	r1, r3
    b27e:	d004      	beq.n	b28a <bt_smp_recv+0x9e>
		smp_error(smp, BT_SMP_ERR_INVALID_PARAMS);
    b280:	210a      	movs	r1, #10
    b282:	4628      	mov	r0, r5
    b284:	f7ff fd35 	bl	acf2 <smp_error>
		return;
    b288:	bd70      	pop	{r4, r5, r6, pc}
	err = handlers[hdr->code].func(smp, buf);
    b28a:	4b06      	ldr	r3, [pc, #24]	; (b2a4 <bt_smp_recv+0xb8>)
    b28c:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
    b290:	4621      	mov	r1, r4
    b292:	4628      	mov	r0, r5
    b294:	4798      	blx	r3
	if (err) {
    b296:	4601      	mov	r1, r0
    b298:	2800      	cmp	r0, #0
    b29a:	d0ab      	beq.n	b1f4 <bt_smp_recv+0x8>
		smp_error(smp, err);
    b29c:	4628      	mov	r0, r5
    b29e:	f7ff fd28 	bl	acf2 <smp_error>
    b2a2:	e7a7      	b.n	b1f4 <bt_smp_recv+0x8>
    b2a4:	0002d53c 	.word	0x0002d53c

0000b2a8 <smp_dhkey_check>:
{
    b2a8:	b570      	push	{r4, r5, r6, lr}
    b2aa:	b08c      	sub	sp, #48	; 0x30
    b2ac:	4605      	mov	r5, r0
	struct bt_smp_dhkey_check *req = (void *)buf->data;
    b2ae:	688e      	ldr	r6, [r1, #8]
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b2b0:	6803      	ldr	r3, [r0, #0]
    b2b2:	78dc      	ldrb	r4, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b2b4:	b12c      	cbz	r4, b2c2 <smp_dhkey_check+0x1a>
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_SLAVE) {
    b2b6:	2c01      	cmp	r4, #1
    b2b8:	d058      	beq.n	b36c <smp_dhkey_check+0xc4>
	return 0;
    b2ba:	2400      	movs	r4, #0
}
    b2bc:	4620      	mov	r0, r4
    b2be:	b00c      	add	sp, #48	; 0x30
    b2c0:	bd70      	pop	{r4, r5, r6, pc}
		memset(r, 0, sizeof(r));
    b2c2:	2210      	movs	r2, #16
    b2c4:	2100      	movs	r1, #0
    b2c6:	a808      	add	r0, sp, #32
    b2c8:	f01e fb66 	bl	29998 <memset>
		switch (smp->method) {
    b2cc:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    b2d0:	2b03      	cmp	r3, #3
    b2d2:	d847      	bhi.n	b364 <smp_dhkey_check+0xbc>
    b2d4:	e8df f003 	tbb	[pc, r3]
    b2d8:	08020208 	.word	0x08020208
			memcpy(r, &smp->passkey, sizeof(smp->passkey));
    b2dc:	2204      	movs	r2, #4
    b2de:	f505 71ba 	add.w	r1, r5, #372	; 0x174
    b2e2:	a808      	add	r0, sp, #32
    b2e4:	f7f4 ffec 	bl	2c0 <memcpy>
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b2e8:	f105 02ad 	add.w	r2, r5, #173	; 0xad
			   &smp->chan.chan.conn->le.resp_addr,
    b2ec:	682b      	ldr	r3, [r5, #0]
    b2ee:	f103 0156 	add.w	r1, r3, #86	; 0x56
			   &smp->chan.chan.conn->le.init_addr, e)) {
    b2f2:	334f      	adds	r3, #79	; 0x4f
		if (smp_f6(smp->mackey, smp->rrnd, smp->prnd, r, &smp->prsp[1],
    b2f4:	a804      	add	r0, sp, #16
    b2f6:	9003      	str	r0, [sp, #12]
    b2f8:	9302      	str	r3, [sp, #8]
    b2fa:	9101      	str	r1, [sp, #4]
    b2fc:	9200      	str	r2, [sp, #0]
    b2fe:	ab08      	add	r3, sp, #32
    b300:	f105 02c3 	add.w	r2, r5, #195	; 0xc3
    b304:	f105 01d3 	add.w	r1, r5, #211	; 0xd3
    b308:	f205 1063 	addw	r0, r5, #355	; 0x163
    b30c:	f7ff f96e 	bl	a5ec <smp_f6>
    b310:	b108      	cbz	r0, b316 <smp_dhkey_check+0x6e>
			return BT_SMP_ERR_UNSPECIFIED;
    b312:	2408      	movs	r4, #8
    b314:	e7d2      	b.n	b2bc <smp_dhkey_check+0x14>
		if (memcmp(e, req->e, 16)) {
    b316:	2210      	movs	r2, #16
    b318:	4631      	mov	r1, r6
    b31a:	eb0d 0002 	add.w	r0, sp, r2
    b31e:	f01e faa7 	bl	29870 <memcmp>
    b322:	b108      	cbz	r0, b328 <smp_dhkey_check+0x80>
			return BT_SMP_ERR_DHKEY_CHECK_FAILED;
    b324:	240b      	movs	r4, #11
    b326:	e7c9      	b.n	b2bc <smp_dhkey_check+0x14>
		enc_size = get_encryption_key_size(smp);
    b328:	4628      	mov	r0, r5
    b32a:	f7fe fe63 	bl	9ff4 <get_encryption_key_size>
						smp->tk, enc_size) < 0) {
    b32e:	f105 03e3 	add.w	r3, r5, #227	; 0xe3
		if (bt_conn_le_start_encryption(smp->chan.chan.conn, 0, 0,
    b332:	9002      	str	r0, [sp, #8]
    b334:	9301      	str	r3, [sp, #4]
    b336:	2300      	movs	r3, #0
    b338:	9300      	str	r3, [sp, #0]
    b33a:	2200      	movs	r2, #0
    b33c:	2300      	movs	r3, #0
    b33e:	6828      	ldr	r0, [r5, #0]
    b340:	f7fb f898 	bl	6474 <bt_conn_le_start_encryption>
    b344:	2800      	cmp	r0, #0
    b346:	db0f      	blt.n	b368 <smp_dhkey_check+0xc0>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b348:	35a0      	adds	r5, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b34a:	f3bf 8f5b 	dmb	ish
    b34e:	e855 3f00 	ldrex	r3, [r5]
    b352:	f043 0302 	orr.w	r3, r3, #2
    b356:	e845 3200 	strex	r2, r3, [r5]
    b35a:	2a00      	cmp	r2, #0
    b35c:	d1f7      	bne.n	b34e <smp_dhkey_check+0xa6>
    b35e:	f3bf 8f5b 	dmb	ish
		return 0;
    b362:	e7ab      	b.n	b2bc <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b364:	2408      	movs	r4, #8
    b366:	e7a9      	b.n	b2bc <smp_dhkey_check+0x14>
			return BT_SMP_ERR_UNSPECIFIED;
    b368:	2408      	movs	r4, #8
    b36a:	e7a7      	b.n	b2bc <smp_dhkey_check+0x14>
		atomic_clear_bit(smp->flags, SMP_FLAG_DHCHECK_WAIT);
    b36c:	f100 04a0 	add.w	r4, r0, #160	; 0xa0
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    b370:	f3bf 8f5b 	dmb	ish
    b374:	e854 3f00 	ldrex	r3, [r4]
    b378:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
    b37c:	e844 3200 	strex	r2, r3, [r4]
    b380:	2a00      	cmp	r2, #0
    b382:	d1f7      	bne.n	b374 <smp_dhkey_check+0xcc>
    b384:	f3bf 8f5b 	dmb	ish
		memcpy(smp->e, req->e, sizeof(smp->e));
    b388:	2210      	movs	r2, #16
    b38a:	4631      	mov	r1, r6
    b38c:	f205 1053 	addw	r0, r5, #339	; 0x153
    b390:	f7f4 ff96 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b394:	f3bf 8f5b 	dmb	ish
    b398:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b39c:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b3a0:	f013 0f80 	tst.w	r3, #128	; 0x80
    b3a4:	d10d      	bne.n	b3c2 <smp_dhkey_check+0x11a>
    b3a6:	f3bf 8f5b 	dmb	ish
    b3aa:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    b3ae:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    b3b2:	f413 7f00 	tst.w	r3, #512	; 0x200
    b3b6:	d112      	bne.n	b3de <smp_dhkey_check+0x136>
		return compute_and_check_and_send_slave_dhcheck(smp);
    b3b8:	4628      	mov	r0, r5
    b3ba:	f7ff f9f5 	bl	a7a8 <compute_and_check_and_send_slave_dhcheck>
    b3be:	4604      	mov	r4, r0
    b3c0:	e77c      	b.n	b2bc <smp_dhkey_check+0x14>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b3c2:	f3bf 8f5b 	dmb	ish
    b3c6:	e854 3f00 	ldrex	r3, [r4]
    b3ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b3ce:	e844 3200 	strex	r2, r3, [r4]
    b3d2:	2a00      	cmp	r2, #0
    b3d4:	d1f7      	bne.n	b3c6 <smp_dhkey_check+0x11e>
    b3d6:	f3bf 8f5b 	dmb	ish
			return 0;
    b3da:	2400      	movs	r4, #0
    b3dc:	e76e      	b.n	b2bc <smp_dhkey_check+0x14>
    b3de:	f3bf 8f5b 	dmb	ish
    b3e2:	e854 3f00 	ldrex	r3, [r4]
    b3e6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b3ea:	e844 3200 	strex	r2, r3, [r4]
    b3ee:	2a00      	cmp	r2, #0
    b3f0:	d1f7      	bne.n	b3e2 <smp_dhkey_check+0x13a>
    b3f2:	f3bf 8f5b 	dmb	ish
			return 0;
    b3f6:	2400      	movs	r4, #0
    b3f8:	e760      	b.n	b2bc <smp_dhkey_check+0x14>

0000b3fa <legacy_pairing_random>:
{
    b3fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    b3fe:	b088      	sub	sp, #32
    b400:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    b402:	4605      	mov	r5, r0
    b404:	f855 6be3 	ldr.w	r6, [r5], #227
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b408:	f100 08d3 	add.w	r8, r0, #211	; 0xd3
		     &conn->le.init_addr, &conn->le.resp_addr, tmp);
    b40c:	f106 034f 	add.w	r3, r6, #79	; 0x4f
    b410:	f106 0256 	add.w	r2, r6, #86	; 0x56
	err = smp_c1(smp->tk, smp->rrnd, smp->preq, smp->prsp,
    b414:	a904      	add	r1, sp, #16
    b416:	9102      	str	r1, [sp, #8]
    b418:	9201      	str	r2, [sp, #4]
    b41a:	9300      	str	r3, [sp, #0]
    b41c:	f100 03ac 	add.w	r3, r0, #172	; 0xac
    b420:	f100 02a5 	add.w	r2, r0, #165	; 0xa5
    b424:	4641      	mov	r1, r8
    b426:	4628      	mov	r0, r5
    b428:	f7ff fada 	bl	a9e0 <smp_c1>
	if (err) {
    b42c:	b120      	cbz	r0, b438 <legacy_pairing_random+0x3e>
		return BT_SMP_ERR_UNSPECIFIED;
    b42e:	2708      	movs	r7, #8
}
    b430:	4638      	mov	r0, r7
    b432:	b008      	add	sp, #32
    b434:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (memcmp(smp->pcnf, tmp, sizeof(smp->pcnf))) {
    b438:	2210      	movs	r2, #16
    b43a:	eb0d 0102 	add.w	r1, sp, r2
    b43e:	f104 00b3 	add.w	r0, r4, #179	; 0xb3
    b442:	f01e fa15 	bl	29870 <memcmp>
    b446:	b108      	cbz	r0, b44c <legacy_pairing_random+0x52>
		return BT_SMP_ERR_CONFIRM_FAILED;
    b448:	2704      	movs	r7, #4
    b44a:	e7f1      	b.n	b430 <legacy_pairing_random+0x36>
	    conn->role == BT_HCI_ROLE_MASTER) {
    b44c:	78f7      	ldrb	r7, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b44e:	bb3f      	cbnz	r7, b4a0 <legacy_pairing_random+0xa6>
		err = smp_s1(smp->tk, smp->rrnd, smp->prnd, tmp);
    b450:	ab04      	add	r3, sp, #16
    b452:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b456:	4641      	mov	r1, r8
    b458:	4628      	mov	r0, r5
    b45a:	f7ff fbf0 	bl	ac3e <smp_s1>
		if (err) {
    b45e:	b108      	cbz	r0, b464 <legacy_pairing_random+0x6a>
			return BT_SMP_ERR_UNSPECIFIED;
    b460:	2708      	movs	r7, #8
    b462:	e7e5      	b.n	b430 <legacy_pairing_random+0x36>
						get_encryption_key_size(smp))) {
    b464:	4620      	mov	r0, r4
    b466:	f7fe fdc5 	bl	9ff4 <get_encryption_key_size>
		if (bt_conn_le_start_encryption(conn, 0, 0, tmp,
    b46a:	9002      	str	r0, [sp, #8]
    b46c:	ab04      	add	r3, sp, #16
    b46e:	9301      	str	r3, [sp, #4]
    b470:	2300      	movs	r3, #0
    b472:	9300      	str	r3, [sp, #0]
    b474:	2200      	movs	r2, #0
    b476:	2300      	movs	r3, #0
    b478:	4630      	mov	r0, r6
    b47a:	f7fa fffb 	bl	6474 <bt_conn_le_start_encryption>
    b47e:	b108      	cbz	r0, b484 <legacy_pairing_random+0x8a>
			return BT_SMP_ERR_UNSPECIFIED;
    b480:	2708      	movs	r7, #8
    b482:	e7d5      	b.n	b430 <legacy_pairing_random+0x36>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b484:	34a0      	adds	r4, #160	; 0xa0
    b486:	f3bf 8f5b 	dmb	ish
    b48a:	e854 3f00 	ldrex	r3, [r4]
    b48e:	f043 0302 	orr.w	r3, r3, #2
    b492:	e844 3200 	strex	r2, r3, [r4]
    b496:	2a00      	cmp	r2, #0
    b498:	d1f7      	bne.n	b48a <legacy_pairing_random+0x90>
    b49a:	f3bf 8f5b 	dmb	ish
		return 0;
    b49e:	e7c7      	b.n	b430 <legacy_pairing_random+0x36>
		err = smp_s1(smp->tk, smp->prnd, smp->rrnd, tmp);
    b4a0:	ab04      	add	r3, sp, #16
    b4a2:	4642      	mov	r2, r8
    b4a4:	f104 01c3 	add.w	r1, r4, #195	; 0xc3
    b4a8:	4628      	mov	r0, r5
    b4aa:	f7ff fbc8 	bl	ac3e <smp_s1>
		if (err) {
    b4ae:	b108      	cbz	r0, b4b4 <legacy_pairing_random+0xba>
			return BT_SMP_ERR_UNSPECIFIED;
    b4b0:	2708      	movs	r7, #8
    b4b2:	e7bd      	b.n	b430 <legacy_pairing_random+0x36>
		memcpy(smp->tk, tmp, sizeof(smp->tk));
    b4b4:	2210      	movs	r2, #16
    b4b6:	eb0d 0102 	add.w	r1, sp, r2
    b4ba:	4628      	mov	r0, r5
    b4bc:	f7f4 ff00 	bl	2c0 <memcpy>
		atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    b4c0:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b4c4:	f3bf 8f5b 	dmb	ish
    b4c8:	e853 2f00 	ldrex	r2, [r3]
    b4cc:	f042 0202 	orr.w	r2, r2, #2
    b4d0:	e843 2100 	strex	r1, r2, [r3]
    b4d4:	2900      	cmp	r1, #0
    b4d6:	d1f7      	bne.n	b4c8 <legacy_pairing_random+0xce>
    b4d8:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b4dc:	4620      	mov	r0, r4
    b4de:	f7fe feea 	bl	a2b6 <smp_send_pairing_random>
	return 0;
    b4e2:	2700      	movs	r7, #0
    b4e4:	e7a4      	b.n	b430 <legacy_pairing_random+0x36>
	...

0000b4e8 <smp_pairing_random>:
{
    b4e8:	b5f0      	push	{r4, r5, r6, r7, lr}
    b4ea:	b085      	sub	sp, #20
    b4ec:	4604      	mov	r4, r0
	memcpy(smp->rrnd, req->val, sizeof(smp->rrnd));
    b4ee:	f100 05d3 	add.w	r5, r0, #211	; 0xd3
    b4f2:	2210      	movs	r2, #16
    b4f4:	6889      	ldr	r1, [r1, #8]
    b4f6:	4628      	mov	r0, r5
    b4f8:	f7f4 fee2 	bl	2c0 <memcpy>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b4fc:	f3bf 8f5b 	dmb	ish
    b500:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b504:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    b508:	f013 0f20 	tst.w	r3, #32
    b50c:	d00d      	beq.n	b52a <smp_pairing_random+0x42>
    b50e:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
	if (smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b512:	6823      	ldr	r3, [r4, #0]
    b514:	78db      	ldrb	r3, [r3, #3]
    b516:	b17b      	cbz	r3, b538 <smp_pairing_random+0x50>
	switch (smp->method) {
    b518:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b51c:	2b03      	cmp	r3, #3
    b51e:	f200 8106 	bhi.w	b72e <smp_pairing_random+0x246>
    b522:	e8df f003 	tbb	[pc, r3]
    b526:	bfa0      	.short	0xbfa0
    b528:	81bf      	.short	0x81bf
		return legacy_pairing_random(smp);
    b52a:	4620      	mov	r0, r4
    b52c:	f7ff ff65 	bl	b3fa <legacy_pairing_random>
    b530:	4606      	mov	r6, r0
}
    b532:	4630      	mov	r0, r6
    b534:	b005      	add	sp, #20
    b536:	bdf0      	pop	{r4, r5, r6, r7, pc}
		err = sc_smp_check_confirm(smp);
    b538:	4620      	mov	r0, r4
    b53a:	f7fe ff83 	bl	a444 <sc_smp_check_confirm>
		if (err) {
    b53e:	4606      	mov	r6, r0
    b540:	2800      	cmp	r0, #0
    b542:	d1f6      	bne.n	b532 <smp_pairing_random+0x4a>
		switch (smp->method) {
    b544:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b548:	2b03      	cmp	r3, #3
    b54a:	f200 80ee 	bhi.w	b72a <smp_pairing_random+0x242>
    b54e:	e8df f003 	tbb	[pc, r3]
    b552:	2e50      	.short	0x2e50
    b554:	022e      	.short	0x022e
			if (smp_g2(sc_public_key, smp->pkey, smp->prnd,
    b556:	ab03      	add	r3, sp, #12
    b558:	9300      	str	r3, [sp, #0]
    b55a:	462b      	mov	r3, r5
    b55c:	f104 02c3 	add.w	r2, r4, #195	; 0xc3
    b560:	f104 01f3 	add.w	r1, r4, #243	; 0xf3
    b564:	4873      	ldr	r0, [pc, #460]	; (b734 <smp_pairing_random+0x24c>)
    b566:	f7ff f995 	bl	a894 <smp_g2>
    b56a:	b108      	cbz	r0, b570 <smp_pairing_random+0x88>
				return BT_SMP_ERR_UNSPECIFIED;
    b56c:	2608      	movs	r6, #8
    b56e:	e7e0      	b.n	b532 <smp_pairing_random+0x4a>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b570:	f3bf 8f5b 	dmb	ish
    b574:	e857 3f00 	ldrex	r3, [r7]
    b578:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b57c:	e847 3200 	strex	r2, r3, [r7]
    b580:	2a00      	cmp	r2, #0
    b582:	d1f7      	bne.n	b574 <smp_pairing_random+0x8c>
    b584:	f3bf 8f5b 	dmb	ish
    b588:	f3bf 8f5b 	dmb	ish
    b58c:	e857 3f00 	ldrex	r3, [r7]
    b590:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b594:	e847 3200 	strex	r2, r3, [r7]
    b598:	2a00      	cmp	r2, #0
    b59a:	d1f7      	bne.n	b58c <smp_pairing_random+0xa4>
    b59c:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b5a0:	4b65      	ldr	r3, [pc, #404]	; (b738 <smp_pairing_random+0x250>)
    b5a2:	681b      	ldr	r3, [r3, #0]
    b5a4:	689b      	ldr	r3, [r3, #8]
    b5a6:	9903      	ldr	r1, [sp, #12]
    b5a8:	6820      	ldr	r0, [r4, #0]
    b5aa:	4798      	blx	r3
			return 0;
    b5ac:	e7c1      	b.n	b532 <smp_pairing_random+0x4a>
			smp->passkey_round++;
    b5ae:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b5b2:	3301      	adds	r3, #1
    b5b4:	b2db      	uxtb	r3, r3
    b5b6:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
			if (smp->passkey_round == 20) {
    b5ba:	2b14      	cmp	r3, #20
    b5bc:	d019      	beq.n	b5f2 <smp_pairing_random+0x10a>
			if (bt_rand(smp->prnd, 16)) {
    b5be:	2110      	movs	r1, #16
    b5c0:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b5c4:	f005 fba0 	bl	10d08 <bt_rand>
    b5c8:	b108      	cbz	r0, b5ce <smp_pairing_random+0xe6>
				return BT_SMP_ERR_UNSPECIFIED;
    b5ca:	2608      	movs	r6, #8
    b5cc:	e7b1      	b.n	b532 <smp_pairing_random+0x4a>
			atomic_set_bit(&smp->allowed_cmds,
    b5ce:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b5d2:	f3bf 8f5b 	dmb	ish
    b5d6:	e853 2f00 	ldrex	r2, [r3]
    b5da:	f042 0208 	orr.w	r2, r2, #8
    b5de:	e843 2100 	strex	r1, r2, [r3]
    b5e2:	2900      	cmp	r1, #0
    b5e4:	d1f7      	bne.n	b5d6 <smp_pairing_random+0xee>
    b5e6:	f3bf 8f5b 	dmb	ish
			smp_send_pairing_confirm(smp);
    b5ea:	4620      	mov	r0, r4
    b5ec:	f7ff f9aa 	bl	a944 <smp_send_pairing_confirm>
			return 0;
    b5f0:	e79f      	b.n	b532 <smp_pairing_random+0x4a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b5f2:	f3bf 8f5b 	dmb	ish
    b5f6:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    b5fa:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_DHKEY_PENDING)) {
    b5fe:	f013 0f80 	tst.w	r3, #128	; 0x80
    b602:	d00c      	beq.n	b61e <smp_pairing_random+0x136>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b604:	f3bf 8f5b 	dmb	ish
    b608:	e857 3f00 	ldrex	r3, [r7]
    b60c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
    b610:	e847 3200 	strex	r2, r3, [r7]
    b614:	2a00      	cmp	r2, #0
    b616:	d1f7      	bne.n	b608 <smp_pairing_random+0x120>
    b618:	f3bf 8f5b 	dmb	ish
			return 0;
    b61c:	e789      	b.n	b532 <smp_pairing_random+0x4a>
		return compute_and_send_master_dhcheck(smp);
    b61e:	4620      	mov	r0, r4
    b620:	f7ff f868 	bl	a6f4 <compute_and_send_master_dhcheck>
    b624:	4606      	mov	r6, r0
    b626:	e784      	b.n	b532 <smp_pairing_random+0x4a>
		if (smp_g2(smp->pkey, sc_public_key, smp->rrnd, smp->prnd,
    b628:	ab03      	add	r3, sp, #12
    b62a:	9300      	str	r3, [sp, #0]
    b62c:	f104 03c3 	add.w	r3, r4, #195	; 0xc3
    b630:	462a      	mov	r2, r5
    b632:	4940      	ldr	r1, [pc, #256]	; (b734 <smp_pairing_random+0x24c>)
    b634:	f104 00f3 	add.w	r0, r4, #243	; 0xf3
    b638:	f7ff f92c 	bl	a894 <smp_g2>
    b63c:	b108      	cbz	r0, b642 <smp_pairing_random+0x15a>
			return BT_SMP_ERR_UNSPECIFIED;
    b63e:	2608      	movs	r6, #8
    b640:	e777      	b.n	b532 <smp_pairing_random+0x4a>
    b642:	f3bf 8f5b 	dmb	ish
    b646:	e857 3f00 	ldrex	r3, [r7]
    b64a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    b64e:	e847 3200 	strex	r2, r3, [r7]
    b652:	2a00      	cmp	r2, #0
    b654:	d1f7      	bne.n	b646 <smp_pairing_random+0x15e>
    b656:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_confirm(smp->chan.chan.conn, passkey);
    b65a:	4b37      	ldr	r3, [pc, #220]	; (b738 <smp_pairing_random+0x250>)
    b65c:	681b      	ldr	r3, [r3, #0]
    b65e:	689b      	ldr	r3, [r3, #8]
    b660:	9903      	ldr	r1, [sp, #12]
    b662:	6820      	ldr	r0, [r4, #0]
    b664:	4798      	blx	r3
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_DHKEY_CHECK);
    b666:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b66a:	f3bf 8f5b 	dmb	ish
    b66e:	e853 2f00 	ldrex	r2, [r3]
    b672:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
    b676:	e843 2100 	strex	r1, r2, [r3]
    b67a:	2900      	cmp	r1, #0
    b67c:	d1f7      	bne.n	b66e <smp_pairing_random+0x186>
    b67e:	f3bf 8f5b 	dmb	ish
    b682:	f3bf 8f5b 	dmb	ish
    b686:	e857 3f00 	ldrex	r3, [r7]
    b68a:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b68e:	e847 3200 	strex	r2, r3, [r7]
    b692:	2a00      	cmp	r2, #0
    b694:	d1f7      	bne.n	b686 <smp_pairing_random+0x19e>
    b696:	f3bf 8f5b 	dmb	ish
	smp_send_pairing_random(smp);
    b69a:	4620      	mov	r0, r4
    b69c:	f7fe fe0b 	bl	a2b6 <smp_send_pairing_random>
	return 0;
    b6a0:	2600      	movs	r6, #0
    b6a2:	e746      	b.n	b532 <smp_pairing_random+0x4a>
		err = sc_smp_check_confirm(smp);
    b6a4:	4620      	mov	r0, r4
    b6a6:	f7fe fecd 	bl	a444 <sc_smp_check_confirm>
		if (err) {
    b6aa:	4606      	mov	r6, r0
    b6ac:	2800      	cmp	r0, #0
    b6ae:	f47f af40 	bne.w	b532 <smp_pairing_random+0x4a>
		atomic_set_bit(&smp->allowed_cmds,
    b6b2:	f104 059c 	add.w	r5, r4, #156	; 0x9c
    b6b6:	f3bf 8f5b 	dmb	ish
    b6ba:	e855 3f00 	ldrex	r3, [r5]
    b6be:	f043 0308 	orr.w	r3, r3, #8
    b6c2:	e845 3200 	strex	r2, r3, [r5]
    b6c6:	2a00      	cmp	r2, #0
    b6c8:	d1f7      	bne.n	b6ba <smp_pairing_random+0x1d2>
    b6ca:	f3bf 8f5b 	dmb	ish
		smp_send_pairing_random(smp);
    b6ce:	4620      	mov	r0, r4
    b6d0:	f7fe fdf1 	bl	a2b6 <smp_send_pairing_random>
		smp->passkey_round++;
    b6d4:	f894 3178 	ldrb.w	r3, [r4, #376]	; 0x178
    b6d8:	3301      	adds	r3, #1
    b6da:	b2db      	uxtb	r3, r3
    b6dc:	f884 3178 	strb.w	r3, [r4, #376]	; 0x178
		if (smp->passkey_round == 20) {
    b6e0:	2b14      	cmp	r3, #20
    b6e2:	d009      	beq.n	b6f8 <smp_pairing_random+0x210>
		if (bt_rand(smp->prnd, 16)) {
    b6e4:	2110      	movs	r1, #16
    b6e6:	f104 00c3 	add.w	r0, r4, #195	; 0xc3
    b6ea:	f005 fb0d 	bl	10d08 <bt_rand>
    b6ee:	2800      	cmp	r0, #0
    b6f0:	f43f af1f 	beq.w	b532 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b6f4:	2608      	movs	r6, #8
    b6f6:	e71c      	b.n	b532 <smp_pairing_random+0x4a>
    b6f8:	f3bf 8f5b 	dmb	ish
    b6fc:	e855 3f00 	ldrex	r3, [r5]
    b700:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b704:	e845 3200 	strex	r2, r3, [r5]
    b708:	2a00      	cmp	r2, #0
    b70a:	d1f7      	bne.n	b6fc <smp_pairing_random+0x214>
    b70c:	f3bf 8f5b 	dmb	ish
    b710:	f3bf 8f5b 	dmb	ish
    b714:	e857 3f00 	ldrex	r3, [r7]
    b718:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
    b71c:	e847 3200 	strex	r2, r3, [r7]
    b720:	2a00      	cmp	r2, #0
    b722:	d1f7      	bne.n	b714 <smp_pairing_random+0x22c>
    b724:	f3bf 8f5b 	dmb	ish
			return 0;
    b728:	e703      	b.n	b532 <smp_pairing_random+0x4a>
			return BT_SMP_ERR_UNSPECIFIED;
    b72a:	2608      	movs	r6, #8
    b72c:	e701      	b.n	b532 <smp_pairing_random+0x4a>
		return BT_SMP_ERR_UNSPECIFIED;
    b72e:	2608      	movs	r6, #8
    b730:	e6ff      	b.n	b532 <smp_pairing_random+0x4a>
    b732:	bf00      	nop
    b734:	200009fc 	.word	0x200009fc
    b738:	20002a10 	.word	0x20002a10

0000b73c <generate_dhkey>:
{
    b73c:	b510      	push	{r4, lr}
    b73e:	4604      	mov	r4, r0
	if (bt_dh_key_gen(smp->pkey, bt_smp_dhkey_ready)) {
    b740:	490a      	ldr	r1, [pc, #40]	; (b76c <generate_dhkey+0x30>)
    b742:	30f3      	adds	r0, #243	; 0xf3
    b744:	f7fa fd1e 	bl	6184 <bt_dh_key_gen>
    b748:	b108      	cbz	r0, b74e <generate_dhkey+0x12>
		return BT_SMP_ERR_UNSPECIFIED;
    b74a:	2008      	movs	r0, #8
}
    b74c:	bd10      	pop	{r4, pc}
	atomic_set_bit(smp->flags, SMP_FLAG_DHKEY_PENDING);
    b74e:	34a0      	adds	r4, #160	; 0xa0
    b750:	f3bf 8f5b 	dmb	ish
    b754:	e854 3f00 	ldrex	r3, [r4]
    b758:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    b75c:	e844 3200 	strex	r2, r3, [r4]
    b760:	2a00      	cmp	r2, #0
    b762:	d1f7      	bne.n	b754 <generate_dhkey+0x18>
    b764:	f3bf 8f5b 	dmb	ish
	return 0;
    b768:	bd10      	pop	{r4, pc}
    b76a:	bf00      	nop
    b76c:	0000ad2d 	.word	0x0000ad2d

0000b770 <smp_public_key_slave>:
{
    b770:	b510      	push	{r4, lr}
    b772:	4604      	mov	r4, r0
	err = sc_send_public_key(smp);
    b774:	f7fe fd60 	bl	a238 <sc_send_public_key>
	if (err) {
    b778:	4603      	mov	r3, r0
    b77a:	2800      	cmp	r0, #0
    b77c:	d154      	bne.n	b828 <smp_public_key_slave+0xb8>
	switch (smp->method) {
    b77e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b782:	2b03      	cmp	r3, #3
    b784:	d852      	bhi.n	b82c <smp_public_key_slave+0xbc>
    b786:	e8df f003 	tbb	[pc, r3]
    b78a:	2a02      	.short	0x2a02
    b78c:	0216      	.short	0x0216
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RANDOM);
    b78e:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b792:	f3bf 8f5b 	dmb	ish
    b796:	e853 2f00 	ldrex	r2, [r3]
    b79a:	f042 0210 	orr.w	r2, r2, #16
    b79e:	e843 2100 	strex	r1, r2, [r3]
    b7a2:	2900      	cmp	r1, #0
    b7a4:	d1f7      	bne.n	b796 <smp_public_key_slave+0x26>
    b7a6:	f3bf 8f5b 	dmb	ish
		err = smp_send_pairing_confirm(smp);
    b7aa:	4620      	mov	r0, r4
    b7ac:	f7ff f8ca 	bl	a944 <smp_send_pairing_confirm>
		if (err) {
    b7b0:	4603      	mov	r3, r0
    b7b2:	b3a8      	cbz	r0, b820 <smp_public_key_slave+0xb0>
    b7b4:	e038      	b.n	b828 <smp_public_key_slave+0xb8>
		err = display_passkey(smp);
    b7b6:	4620      	mov	r0, r4
    b7b8:	f7fe fcea 	bl	a190 <display_passkey>
		if (err) {
    b7bc:	4603      	mov	r3, r0
    b7be:	bb98      	cbnz	r0, b828 <smp_public_key_slave+0xb8>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b7c0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b7c4:	f3bf 8f5b 	dmb	ish
    b7c8:	e853 2f00 	ldrex	r2, [r3]
    b7cc:	f042 0208 	orr.w	r2, r2, #8
    b7d0:	e843 2100 	strex	r1, r2, [r3]
    b7d4:	2900      	cmp	r1, #0
    b7d6:	d1f7      	bne.n	b7c8 <smp_public_key_slave+0x58>
    b7d8:	f3bf 8f5b 	dmb	ish
    b7dc:	e020      	b.n	b820 <smp_public_key_slave+0xb0>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    b7de:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b7e2:	f3bf 8f5b 	dmb	ish
    b7e6:	e853 2f00 	ldrex	r2, [r3]
    b7ea:	f042 0208 	orr.w	r2, r2, #8
    b7ee:	e843 2100 	strex	r1, r2, [r3]
    b7f2:	2900      	cmp	r1, #0
    b7f4:	d1f7      	bne.n	b7e6 <smp_public_key_slave+0x76>
    b7f6:	f3bf 8f5b 	dmb	ish
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b7fa:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b7fe:	f3bf 8f5b 	dmb	ish
    b802:	e853 2f00 	ldrex	r2, [r3]
    b806:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b80a:	e843 2100 	strex	r1, r2, [r3]
    b80e:	2900      	cmp	r1, #0
    b810:	d1f7      	bne.n	b802 <smp_public_key_slave+0x92>
    b812:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(smp->chan.chan.conn);
    b816:	4b06      	ldr	r3, [pc, #24]	; (b830 <smp_public_key_slave+0xc0>)
    b818:	681b      	ldr	r3, [r3, #0]
    b81a:	685b      	ldr	r3, [r3, #4]
    b81c:	6820      	ldr	r0, [r4, #0]
    b81e:	4798      	blx	r3
	return generate_dhkey(smp);
    b820:	4620      	mov	r0, r4
    b822:	f7ff ff8b 	bl	b73c <generate_dhkey>
    b826:	4603      	mov	r3, r0
}
    b828:	4618      	mov	r0, r3
    b82a:	bd10      	pop	{r4, pc}
		return BT_SMP_ERR_UNSPECIFIED;
    b82c:	2308      	movs	r3, #8
    b82e:	e7fb      	b.n	b828 <smp_public_key_slave+0xb8>
    b830:	20002a10 	.word	0x20002a10

0000b834 <bt_smp_pkey_ready>:
{
    b834:	b538      	push	{r3, r4, r5, lr}
	if (!pkey) {
    b836:	b150      	cbz	r0, b84e <bt_smp_pkey_ready+0x1a>
    b838:	4601      	mov	r1, r0
	memcpy(sc_public_key, pkey, 64);
    b83a:	2240      	movs	r2, #64	; 0x40
    b83c:	4826      	ldr	r0, [pc, #152]	; (b8d8 <bt_smp_pkey_ready+0xa4>)
    b83e:	f7f4 fd3f 	bl	2c0 <memcpy>
	sc_local_pkey_valid = true;
    b842:	2201      	movs	r2, #1
    b844:	4b25      	ldr	r3, [pc, #148]	; (b8dc <bt_smp_pkey_ready+0xa8>)
    b846:	701a      	strb	r2, [r3, #0]
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b848:	2400      	movs	r4, #0
    b84a:	b124      	cbz	r4, b856 <bt_smp_pkey_ready+0x22>
    b84c:	bd38      	pop	{r3, r4, r5, pc}
		sc_local_pkey_valid = false;
    b84e:	2200      	movs	r2, #0
    b850:	4b22      	ldr	r3, [pc, #136]	; (b8dc <bt_smp_pkey_ready+0xa8>)
    b852:	701a      	strb	r2, [r3, #0]
		return;
    b854:	bd38      	pop	{r3, r4, r5, pc}
		struct bt_smp *smp = &bt_smp_pool[i];
    b856:	4a22      	ldr	r2, [pc, #136]	; (b8e0 <bt_smp_pkey_ready+0xac>)
    b858:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b85c:	fb03 f304 	mul.w	r3, r3, r4
    b860:	18d5      	adds	r5, r2, r3
		if (!atomic_test_bit(smp->flags, SMP_FLAG_PKEY_SEND)) {
    b862:	33a0      	adds	r3, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    b864:	f3bf 8f5b 	dmb	ish
    b868:	58d3      	ldr	r3, [r2, r3]
    b86a:	f3bf 8f5b 	dmb	ish
    b86e:	f013 0f40 	tst.w	r3, #64	; 0x40
    b872:	d020      	beq.n	b8b6 <bt_smp_pkey_ready+0x82>
		    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b874:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b878:	fb03 f304 	mul.w	r3, r3, r4
    b87c:	58d3      	ldr	r3, [r2, r3]
    b87e:	78db      	ldrb	r3, [r3, #3]
		if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b880:	b9fb      	cbnz	r3, b8c2 <bt_smp_pkey_ready+0x8e>
			err = sc_send_public_key(smp);
    b882:	4628      	mov	r0, r5
    b884:	f7fe fcd8 	bl	a238 <sc_send_public_key>
			if (err) {
    b888:	4601      	mov	r1, r0
    b88a:	b9b0      	cbnz	r0, b8ba <bt_smp_pkey_ready+0x86>
			atomic_set_bit(&smp->allowed_cmds,
    b88c:	f44f 73d2 	mov.w	r3, #420	; 0x1a4
    b890:	fb03 f304 	mul.w	r3, r3, r4
    b894:	f103 0298 	add.w	r2, r3, #152	; 0x98
    b898:	4b11      	ldr	r3, [pc, #68]	; (b8e0 <bt_smp_pkey_ready+0xac>)
    b89a:	4413      	add	r3, r2
    b89c:	3304      	adds	r3, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    b89e:	f3bf 8f5b 	dmb	ish
    b8a2:	e853 2f00 	ldrex	r2, [r3]
    b8a6:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    b8aa:	e843 2100 	strex	r1, r2, [r3]
    b8ae:	2900      	cmp	r1, #0
    b8b0:	d1f7      	bne.n	b8a2 <bt_smp_pkey_ready+0x6e>
    b8b2:	f3bf 8f5b 	dmb	ish
	for (i = 0; i < ARRAY_SIZE(bt_smp_pool); i++) {
    b8b6:	3401      	adds	r4, #1
    b8b8:	e7c7      	b.n	b84a <bt_smp_pkey_ready+0x16>
				smp_error(smp, err);
    b8ba:	4628      	mov	r0, r5
    b8bc:	f7ff fa19 	bl	acf2 <smp_error>
    b8c0:	e7e4      	b.n	b88c <bt_smp_pkey_ready+0x58>
		err = smp_public_key_slave(smp);
    b8c2:	4628      	mov	r0, r5
    b8c4:	f7ff ff54 	bl	b770 <smp_public_key_slave>
		if (err) {
    b8c8:	4601      	mov	r1, r0
    b8ca:	2800      	cmp	r0, #0
    b8cc:	d0f3      	beq.n	b8b6 <bt_smp_pkey_ready+0x82>
			smp_error(smp, err);
    b8ce:	4628      	mov	r0, r5
    b8d0:	f7ff fa0f 	bl	acf2 <smp_error>
    b8d4:	e7ef      	b.n	b8b6 <bt_smp_pkey_ready+0x82>
    b8d6:	bf00      	nop
    b8d8:	200009fc 	.word	0x200009fc
    b8dc:	200009f8 	.word	0x200009f8
    b8e0:	20000854 	.word	0x20000854

0000b8e4 <smp_public_key>:
{
    b8e4:	b570      	push	{r4, r5, r6, lr}
    b8e6:	4604      	mov	r4, r0
	struct bt_smp_public_key *req = (void *)buf->data;
    b8e8:	688e      	ldr	r6, [r1, #8]
	memcpy(smp->pkey, req->x, 32);
    b8ea:	f100 05f3 	add.w	r5, r0, #243	; 0xf3
    b8ee:	2220      	movs	r2, #32
    b8f0:	4631      	mov	r1, r6
    b8f2:	4628      	mov	r0, r5
    b8f4:	f7f4 fce4 	bl	2c0 <memcpy>
	memcpy(&smp->pkey[32], req->y, 32);
    b8f8:	2220      	movs	r2, #32
    b8fa:	18b1      	adds	r1, r6, r2
    b8fc:	f204 1013 	addw	r0, r4, #275	; 0x113
    b900:	f7f4 fcde 	bl	2c0 <memcpy>
	if (memcmp(smp->pkey, sc_debug_public_key, 64) == 0) {
    b904:	2240      	movs	r2, #64	; 0x40
    b906:	493d      	ldr	r1, [pc, #244]	; (b9fc <smp_public_key+0x118>)
    b908:	4628      	mov	r0, r5
    b90a:	f01d ffb1 	bl	29870 <memcmp>
    b90e:	b158      	cbz	r0, b928 <smp_public_key+0x44>
	    smp->chan.chan.conn->role == BT_HCI_ROLE_MASTER) {
    b910:	6823      	ldr	r3, [r4, #0]
    b912:	78db      	ldrb	r3, [r3, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    b914:	2b00      	cmp	r3, #0
    b916:	d156      	bne.n	b9c6 <smp_public_key+0xe2>
		switch (smp->method) {
    b918:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    b91c:	2b03      	cmp	r3, #3
    b91e:	d86a      	bhi.n	b9f6 <smp_public_key+0x112>
    b920:	e8df f003 	tbb	[pc, r3]
    b924:	11243d11 	.word	0x11243d11
		atomic_set_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY);
    b928:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b92c:	f3bf 8f5b 	dmb	ish
    b930:	e853 2f00 	ldrex	r2, [r3]
    b934:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
    b938:	e843 2100 	strex	r1, r2, [r3]
    b93c:	2900      	cmp	r1, #0
    b93e:	d1f7      	bne.n	b930 <smp_public_key+0x4c>
    b940:	f3bf 8f5b 	dmb	ish
    b944:	e7e4      	b.n	b910 <smp_public_key+0x2c>
			atomic_set_bit(&smp->allowed_cmds,
    b946:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b94a:	f3bf 8f5b 	dmb	ish
    b94e:	e853 2f00 	ldrex	r2, [r3]
    b952:	f042 0208 	orr.w	r2, r2, #8
    b956:	e843 2100 	strex	r1, r2, [r3]
    b95a:	2900      	cmp	r1, #0
    b95c:	d1f7      	bne.n	b94e <smp_public_key+0x6a>
    b95e:	f3bf 8f5b 	dmb	ish
		return generate_dhkey(smp);
    b962:	4620      	mov	r0, r4
    b964:	f7ff feea 	bl	b73c <generate_dhkey>
    b968:	4603      	mov	r3, r0
    b96a:	e033      	b.n	b9d4 <smp_public_key+0xf0>
			err = display_passkey(smp);
    b96c:	4620      	mov	r0, r4
    b96e:	f7fe fc0f 	bl	a190 <display_passkey>
			if (err) {
    b972:	4603      	mov	r3, r0
    b974:	bb70      	cbnz	r0, b9d4 <smp_public_key+0xf0>
			atomic_set_bit(&smp->allowed_cmds,
    b976:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    b97a:	f3bf 8f5b 	dmb	ish
    b97e:	e853 2f00 	ldrex	r2, [r3]
    b982:	f042 0208 	orr.w	r2, r2, #8
    b986:	e843 2100 	strex	r1, r2, [r3]
    b98a:	2900      	cmp	r1, #0
    b98c:	d1f7      	bne.n	b97e <smp_public_key+0x9a>
    b98e:	f3bf 8f5b 	dmb	ish
			err = smp_send_pairing_confirm(smp);
    b992:	4620      	mov	r0, r4
    b994:	f7fe ffd6 	bl	a944 <smp_send_pairing_confirm>
			if (err) {
    b998:	4603      	mov	r3, r0
    b99a:	b9d8      	cbnz	r0, b9d4 <smp_public_key+0xf0>
    b99c:	e7e1      	b.n	b962 <smp_public_key+0x7e>
			atomic_set_bit(smp->flags, SMP_FLAG_USER);
    b99e:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    b9a2:	f3bf 8f5b 	dmb	ish
    b9a6:	e853 2f00 	ldrex	r2, [r3]
    b9aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
    b9ae:	e843 2100 	strex	r1, r2, [r3]
    b9b2:	2900      	cmp	r1, #0
    b9b4:	d1f7      	bne.n	b9a6 <smp_public_key+0xc2>
    b9b6:	f3bf 8f5b 	dmb	ish
			bt_auth->passkey_entry(smp->chan.chan.conn);
    b9ba:	4b11      	ldr	r3, [pc, #68]	; (ba00 <smp_public_key+0x11c>)
    b9bc:	681b      	ldr	r3, [r3, #0]
    b9be:	685b      	ldr	r3, [r3, #4]
    b9c0:	6820      	ldr	r0, [r4, #0]
    b9c2:	4798      	blx	r3
			break;
    b9c4:	e7cd      	b.n	b962 <smp_public_key+0x7e>
	if (!sc_local_pkey_valid) {
    b9c6:	4b0f      	ldr	r3, [pc, #60]	; (ba04 <smp_public_key+0x120>)
    b9c8:	781b      	ldrb	r3, [r3, #0]
    b9ca:	b12b      	cbz	r3, b9d8 <smp_public_key+0xf4>
	err = smp_public_key_slave(smp);
    b9cc:	4620      	mov	r0, r4
    b9ce:	f7ff fecf 	bl	b770 <smp_public_key_slave>
    b9d2:	4603      	mov	r3, r0
}
    b9d4:	4618      	mov	r0, r3
    b9d6:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(smp->flags, SMP_FLAG_PKEY_SEND);
    b9d8:	34a0      	adds	r4, #160	; 0xa0
    b9da:	f3bf 8f5b 	dmb	ish
    b9de:	e854 3f00 	ldrex	r3, [r4]
    b9e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    b9e6:	e844 3200 	strex	r2, r3, [r4]
    b9ea:	2a00      	cmp	r2, #0
    b9ec:	d1f7      	bne.n	b9de <smp_public_key+0xfa>
    b9ee:	f3bf 8f5b 	dmb	ish
		return 0;
    b9f2:	2300      	movs	r3, #0
    b9f4:	e7ee      	b.n	b9d4 <smp_public_key+0xf0>
			return BT_SMP_ERR_UNSPECIFIED;
    b9f6:	2308      	movs	r3, #8
    b9f8:	e7ec      	b.n	b9d4 <smp_public_key+0xf0>
    b9fa:	bf00      	nop
    b9fc:	0002d5fc 	.word	0x0002d5fc
    ba00:	20002a10 	.word	0x20002a10
    ba04:	200009f8 	.word	0x200009f8

0000ba08 <smp_signing_info>:
{
    ba08:	b570      	push	{r4, r5, r6, lr}
    ba0a:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    ba0c:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    ba0e:	f3bf 8f5b 	dmb	ish
    ba12:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ba16:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba1a:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba1e:	d111      	bne.n	ba44 <smp_signing_info+0x3c>
	smp->remote_dist &= ~BT_SMP_DIST_SIGN;
    ba20:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    ba24:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
    ba28:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba2c:	78ea      	ldrb	r2, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    ba2e:	b902      	cbnz	r2, ba32 <smp_signing_info+0x2a>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    ba30:	b1ab      	cbz	r3, ba5e <smp_signing_info+0x56>
	if (!smp->local_dist && !smp->remote_dist) {
    ba32:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    ba36:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    ba3a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ba3e:	b193      	cbz	r3, ba66 <smp_signing_info+0x5e>
	return 0;
    ba40:	2000      	movs	r0, #0
}
    ba42:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_signing_info *req = (void *)buf->data;
    ba44:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    ba46:	f105 0148 	add.w	r1, r5, #72	; 0x48
    ba4a:	2010      	movs	r0, #16
    ba4c:	f000 ff8e 	bl	c96c <bt_keys_get_type>
		if (!keys) {
    ba50:	b178      	cbz	r0, ba72 <smp_signing_info+0x6a>
		memcpy(keys->remote_csrk.val, req->csrk,
    ba52:	2210      	movs	r2, #16
    ba54:	4631      	mov	r1, r6
    ba56:	305c      	adds	r0, #92	; 0x5c
    ba58:	f7f4 fc32 	bl	2c0 <memcpy>
    ba5c:	e7e0      	b.n	ba20 <smp_signing_info+0x18>
		bt_smp_distribute_keys(smp);
    ba5e:	4620      	mov	r0, r4
    ba60:	f7ff fac4 	bl	afec <bt_smp_distribute_keys>
    ba64:	e7e5      	b.n	ba32 <smp_signing_info+0x2a>
		smp_pairing_complete(smp, 0);
    ba66:	2100      	movs	r1, #0
    ba68:	4620      	mov	r0, r4
    ba6a:	f7ff f93e 	bl	acea <smp_pairing_complete>
	return 0;
    ba6e:	2000      	movs	r0, #0
    ba70:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    ba72:	2008      	movs	r0, #8
    ba74:	bd70      	pop	{r4, r5, r6, pc}

0000ba76 <smp_ident_info>:
{
    ba76:	b538      	push	{r3, r4, r5, lr}
    ba78:	4604      	mov	r4, r0
    ba7a:	f3bf 8f5b 	dmb	ish
    ba7e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    ba82:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    ba86:	f413 6f80 	tst.w	r3, #1024	; 0x400
    ba8a:	d00b      	beq.n	baa4 <smp_ident_info+0x2e>
		struct bt_smp_ident_info *req = (void *)buf->data;
    ba8c:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    ba8e:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    ba90:	3148      	adds	r1, #72	; 0x48
    ba92:	2002      	movs	r0, #2
    ba94:	f000 ff6a 	bl	c96c <bt_keys_get_type>
		if (!keys) {
    ba98:	b198      	cbz	r0, bac2 <smp_ident_info+0x4c>
		memcpy(keys->irk.val, req->irk, 16);
    ba9a:	2210      	movs	r2, #16
    ba9c:	4629      	mov	r1, r5
    ba9e:	3030      	adds	r0, #48	; 0x30
    baa0:	f7f4 fc0e 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_ADDR_INFO);
    baa4:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    baa6:	f3bf 8f5b 	dmb	ish
    baaa:	e854 3f00 	ldrex	r3, [r4]
    baae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bab2:	e844 3200 	strex	r2, r3, [r4]
    bab6:	2a00      	cmp	r2, #0
    bab8:	d1f7      	bne.n	baaa <smp_ident_info+0x34>
    baba:	f3bf 8f5b 	dmb	ish
	return 0;
    babe:	2000      	movs	r0, #0
    bac0:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    bac2:	2008      	movs	r0, #8
}
    bac4:	bd38      	pop	{r3, r4, r5, pc}

0000bac6 <smp_master_ident>:
{
    bac6:	b570      	push	{r4, r5, r6, lr}
    bac8:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    baca:	6805      	ldr	r5, [r0, #0]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bacc:	f3bf 8f5b 	dmb	ish
    bad0:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    bad4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bad8:	f413 6f80 	tst.w	r3, #1024	; 0x400
    badc:	d116      	bne.n	bb0c <smp_master_ident+0x46>
	if (smp->remote_dist & BT_SMP_DIST_ID_KEY) {
    bade:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bae2:	f013 0f02 	tst.w	r3, #2
    bae6:	d127      	bne.n	bb38 <smp_master_ident+0x72>
	} else if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bae8:	f013 0f04 	tst.w	r3, #4
    baec:	d133      	bne.n	bb56 <smp_master_ident+0x90>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    baee:	78eb      	ldrb	r3, [r5, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    baf0:	b91b      	cbnz	r3, bafa <smp_master_ident+0x34>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    baf2:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    baf6:	2b00      	cmp	r3, #0
    baf8:	d03c      	beq.n	bb74 <smp_master_ident+0xae>
	if (!smp->local_dist && !smp->remote_dist) {
    bafa:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    bafe:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bb02:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bb06:	b3cb      	cbz	r3, bb7c <smp_master_ident+0xb6>
	return 0;
    bb08:	2000      	movs	r0, #0
}
    bb0a:	bd70      	pop	{r4, r5, r6, pc}
		struct bt_smp_master_ident *req = (void *)buf->data;
    bb0c:	688e      	ldr	r6, [r1, #8]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    bb0e:	f105 0148 	add.w	r1, r5, #72	; 0x48
    bb12:	2004      	movs	r0, #4
    bb14:	f000 ff2a 	bl	c96c <bt_keys_get_type>
		if (!keys) {
    bb18:	b3b0      	cbz	r0, bb88 <smp_master_ident+0xc2>
		keys->ltk.ediv = req->ediv;
    bb1a:	8832      	ldrh	r2, [r6, #0]
    bb1c:	8302      	strh	r2, [r0, #24]
		keys->ltk.rand = req->rand;
    bb1e:	f8d6 1002 	ldr.w	r1, [r6, #2]
    bb22:	f8d6 2006 	ldr.w	r2, [r6, #6]
    bb26:	6101      	str	r1, [r0, #16]
    bb28:	6142      	str	r2, [r0, #20]
		smp->remote_dist &= ~BT_SMP_DIST_ENC_KEY;
    bb2a:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bb2e:	f023 0301 	bic.w	r3, r3, #1
    bb32:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
    bb36:	e7d2      	b.n	bade <smp_master_ident+0x18>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_IDENT_INFO);
    bb38:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bb3c:	f3bf 8f5b 	dmb	ish
    bb40:	e853 2f00 	ldrex	r2, [r3]
    bb44:	f442 7280 	orr.w	r2, r2, #256	; 0x100
    bb48:	e843 2100 	strex	r1, r2, [r3]
    bb4c:	2900      	cmp	r1, #0
    bb4e:	d1f7      	bne.n	bb40 <smp_master_ident+0x7a>
    bb50:	f3bf 8f5b 	dmb	ish
    bb54:	e7cb      	b.n	baee <smp_master_ident+0x28>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bb56:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    bb5a:	f3bf 8f5b 	dmb	ish
    bb5e:	e853 2f00 	ldrex	r2, [r3]
    bb62:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bb66:	e843 2100 	strex	r1, r2, [r3]
    bb6a:	2900      	cmp	r1, #0
    bb6c:	d1f7      	bne.n	bb5e <smp_master_ident+0x98>
    bb6e:	f3bf 8f5b 	dmb	ish
    bb72:	e7bc      	b.n	baee <smp_master_ident+0x28>
		bt_smp_distribute_keys(smp);
    bb74:	4620      	mov	r0, r4
    bb76:	f7ff fa39 	bl	afec <bt_smp_distribute_keys>
    bb7a:	e7be      	b.n	bafa <smp_master_ident+0x34>
		smp_pairing_complete(smp, 0);
    bb7c:	2100      	movs	r1, #0
    bb7e:	4620      	mov	r0, r4
    bb80:	f7ff f8b3 	bl	acea <smp_pairing_complete>
	return 0;
    bb84:	2000      	movs	r0, #0
    bb86:	bd70      	pop	{r4, r5, r6, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    bb88:	2008      	movs	r0, #8
    bb8a:	bd70      	pop	{r4, r5, r6, pc}

0000bb8c <smp_encrypt_info>:
{
    bb8c:	b538      	push	{r3, r4, r5, lr}
    bb8e:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bb90:	f3bf 8f5b 	dmb	ish
    bb94:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    bb98:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bb9c:	f413 6f80 	tst.w	r3, #1024	; 0x400
    bba0:	d00b      	beq.n	bbba <smp_encrypt_info+0x2e>
		struct bt_smp_encrypt_info *req = (void *)buf->data;
    bba2:	688d      	ldr	r5, [r1, #8]
		struct bt_conn *conn = smp->chan.chan.conn;
    bba4:	6801      	ldr	r1, [r0, #0]
		keys = bt_keys_get_type(BT_KEYS_LTK, &conn->le.dst);
    bba6:	3148      	adds	r1, #72	; 0x48
    bba8:	2004      	movs	r0, #4
    bbaa:	f000 fedf 	bl	c96c <bt_keys_get_type>
		if (!keys) {
    bbae:	b198      	cbz	r0, bbd8 <smp_encrypt_info+0x4c>
		memcpy(keys->ltk.val, req->ltk, 16);
    bbb0:	2210      	movs	r2, #16
    bbb2:	4629      	mov	r1, r5
    bbb4:	301a      	adds	r0, #26
    bbb6:	f7f4 fb83 	bl	2c0 <memcpy>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_MASTER_IDENT);
    bbba:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bbbc:	f3bf 8f5b 	dmb	ish
    bbc0:	e854 3f00 	ldrex	r3, [r4]
    bbc4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
    bbc8:	e844 3200 	strex	r2, r3, [r4]
    bbcc:	2a00      	cmp	r2, #0
    bbce:	d1f7      	bne.n	bbc0 <smp_encrypt_info+0x34>
    bbd0:	f3bf 8f5b 	dmb	ish
	return 0;
    bbd4:	2000      	movs	r0, #0
    bbd6:	bd38      	pop	{r3, r4, r5, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    bbd8:	2008      	movs	r0, #8
}
    bbda:	bd38      	pop	{r3, r4, r5, pc}

0000bbdc <smp_check_complete>:
	if (conn->type == BT_CONN_TYPE_LE) {
    bbdc:	7883      	ldrb	r3, [r0, #2]
    bbde:	b103      	cbz	r3, bbe2 <smp_check_complete+0x6>
    bbe0:	4770      	bx	lr
{
    bbe2:	b510      	push	{r4, lr}
    bbe4:	460c      	mov	r4, r1
		chan = bt_l2cap_le_lookup_tx_cid(conn, BT_L2CAP_CID_SMP);
    bbe6:	2106      	movs	r1, #6
    bbe8:	f7fb ffa1 	bl	7b2e <bt_l2cap_le_lookup_tx_cid>
		smp->local_dist &= ~dist_complete;
    bbec:	f890 1179 	ldrb.w	r1, [r0, #377]	; 0x179
    bbf0:	ea21 0104 	bic.w	r1, r1, r4
    bbf4:	f880 1179 	strb.w	r1, [r0, #377]	; 0x179
		if (!smp->local_dist && !smp->remote_dist) {
    bbf8:	f8d0 3178 	ldr.w	r3, [r0, #376]	; 0x178
    bbfc:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bc00:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bc04:	b103      	cbz	r3, bc08 <smp_check_complete+0x2c>
    bc06:	bd10      	pop	{r4, pc}
			smp_pairing_complete(smp, 0);
    bc08:	2100      	movs	r1, #0
    bc0a:	f7ff f86e 	bl	acea <smp_pairing_complete>
    bc0e:	e7fa      	b.n	bc06 <smp_check_complete+0x2a>

0000bc10 <sign_info_sent>:
{
    bc10:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_SIGN);
    bc12:	2104      	movs	r1, #4
    bc14:	f7ff ffe2 	bl	bbdc <smp_check_complete>
    bc18:	bd08      	pop	{r3, pc}

0000bc1a <ident_sent>:
{
    bc1a:	b508      	push	{r3, lr}
	smp_check_complete(conn, BT_SMP_DIST_ENC_KEY);
    bc1c:	2101      	movs	r1, #1
    bc1e:	f7ff ffdd 	bl	bbdc <smp_check_complete>
    bc22:	bd08      	pop	{r3, pc}

0000bc24 <smp_ident_addr_info>:
{
    bc24:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct bt_conn *conn = smp->chan.chan.conn;
    bc28:	6806      	ldr	r6, [r0, #0]
	struct bt_smp_ident_addr_info *req = (void *)buf->data;
    bc2a:	688d      	ldr	r5, [r1, #8]
	return BT_ADDR_IS_RPA(&addr->a);
}

static inline bool bt_addr_le_is_identity(const bt_addr_le_t *addr)
{
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    bc2c:	782b      	ldrb	r3, [r5, #0]
    bc2e:	b153      	cbz	r3, bc46 <smp_ident_addr_info+0x22>
		return true;
	}

	return BT_ADDR_IS_STATIC(&addr->a);
    bc30:	79ab      	ldrb	r3, [r5, #6]
    bc32:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    bc36:	2bc0      	cmp	r3, #192	; 0xc0
    bc38:	bf14      	ite	ne
    bc3a:	2300      	movne	r3, #0
    bc3c:	2301      	moveq	r3, #1
	if (!bt_addr_le_is_identity(&req->addr)) {
    bc3e:	b923      	cbnz	r3, bc4a <smp_ident_addr_info+0x26>
		return BT_SMP_ERR_INVALID_PARAMS;
    bc40:	200a      	movs	r0, #10
    bc42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return true;
    bc46:	2301      	movs	r3, #1
    bc48:	e7f9      	b.n	bc3e <smp_ident_addr_info+0x1a>
    bc4a:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bc4c:	f3bf 8f5b 	dmb	ish
    bc50:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    bc54:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_BOND)) {
    bc58:	f413 6f80 	tst.w	r3, #1024	; 0x400
    bc5c:	d119      	bne.n	bc92 <smp_ident_addr_info+0x6e>
	smp->remote_dist &= ~BT_SMP_DIST_ID_KEY;
    bc5e:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bc62:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
    bc66:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->remote_dist & BT_SMP_DIST_SIGN) {
    bc6a:	f013 0f04 	tst.w	r3, #4
    bc6e:	d14f      	bne.n	bd10 <smp_ident_addr_info+0xec>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    bc70:	78f3      	ldrb	r3, [r6, #3]
	if (IS_ENABLED(CONFIG_BT_CENTRAL) &&
    bc72:	b91b      	cbnz	r3, bc7c <smp_ident_addr_info+0x58>
	    conn->role == BT_HCI_ROLE_MASTER && !smp->remote_dist) {
    bc74:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bc78:	2b00      	cmp	r3, #0
    bc7a:	d058      	beq.n	bd2e <smp_ident_addr_info+0x10a>
	if (!smp->local_dist && !smp->remote_dist) {
    bc7c:	f8d4 3178 	ldr.w	r3, [r4, #376]	; 0x178
    bc80:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
    bc84:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    bc88:	2b00      	cmp	r3, #0
    bc8a:	d054      	beq.n	bd36 <smp_ident_addr_info+0x112>
	return 0;
    bc8c:	2000      	movs	r0, #0
}
    bc8e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		keys = bt_keys_get_type(BT_KEYS_IRK, &conn->le.dst);
    bc92:	f106 0848 	add.w	r8, r6, #72	; 0x48
    bc96:	4641      	mov	r1, r8
    bc98:	2002      	movs	r0, #2
    bc9a:	f000 fe67 	bl	c96c <bt_keys_get_type>
		if (!keys) {
    bc9e:	4681      	mov	r9, r0
    bca0:	2800      	cmp	r0, #0
    bca2:	d04f      	beq.n	bd44 <smp_ident_addr_info+0x120>
		if (conn->role == BT_HCI_ROLE_MASTER) {
    bca4:	78f3      	ldrb	r3, [r6, #3]
    bca6:	bb43      	cbnz	r3, bcfa <smp_ident_addr_info+0xd6>
			dst = &conn->le.resp_addr;
    bca8:	f106 0156 	add.w	r1, r6, #86	; 0x56
	if (addr->type != BT_ADDR_LE_RANDOM) {
    bcac:	780b      	ldrb	r3, [r1, #0]
    bcae:	2b01      	cmp	r3, #1
    bcb0:	d026      	beq.n	bd00 <smp_ident_addr_info+0xdc>
		return false;
    bcb2:	2700      	movs	r7, #0
		if (bt_addr_le_is_rpa(dst)) {
    bcb4:	2f00      	cmp	r7, #0
    bcb6:	d0d2      	beq.n	bc5e <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    bcb8:	2206      	movs	r2, #6
    bcba:	3101      	adds	r1, #1
    bcbc:	f109 0040 	add.w	r0, r9, #64	; 0x40
    bcc0:	f7f4 fafe 	bl	2c0 <memcpy>
	if (addr->type == BT_ADDR_LE_PUBLIC) {
    bcc4:	f896 3048 	ldrb.w	r3, [r6, #72]	; 0x48
    bcc8:	b13b      	cbz	r3, bcda <smp_ident_addr_info+0xb6>
	return BT_ADDR_IS_STATIC(&addr->a);
    bcca:	f896 704e 	ldrb.w	r7, [r6, #78]	; 0x4e
    bcce:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    bcd2:	2fc0      	cmp	r7, #192	; 0xc0
    bcd4:	bf14      	ite	ne
    bcd6:	2700      	movne	r7, #0
    bcd8:	2701      	moveq	r7, #1
			if (!bt_addr_le_is_identity(&conn->le.dst)) {
    bcda:	2f00      	cmp	r7, #0
    bcdc:	d1bf      	bne.n	bc5e <smp_ident_addr_info+0x3a>
	memcpy(dst, src, sizeof(*dst));
    bcde:	2207      	movs	r2, #7
    bce0:	4629      	mov	r1, r5
    bce2:	4648      	mov	r0, r9
    bce4:	f7f4 faec 	bl	2c0 <memcpy>
    bce8:	2207      	movs	r2, #7
    bcea:	4629      	mov	r1, r5
    bcec:	4640      	mov	r0, r8
    bcee:	f7f4 fae7 	bl	2c0 <memcpy>
				bt_conn_identity_resolved(conn);
    bcf2:	4630      	mov	r0, r6
    bcf4:	f7fa fba4 	bl	6440 <bt_conn_identity_resolved>
    bcf8:	e7b1      	b.n	bc5e <smp_ident_addr_info+0x3a>
			dst = &conn->le.init_addr;
    bcfa:	f106 014f 	add.w	r1, r6, #79	; 0x4f
    bcfe:	e7d5      	b.n	bcac <smp_ident_addr_info+0x88>
	return BT_ADDR_IS_RPA(&addr->a);
    bd00:	798f      	ldrb	r7, [r1, #6]
    bd02:	f007 07c0 	and.w	r7, r7, #192	; 0xc0
    bd06:	2f40      	cmp	r7, #64	; 0x40
    bd08:	bf14      	ite	ne
    bd0a:	2700      	movne	r7, #0
    bd0c:	2701      	moveq	r7, #1
    bd0e:	e7d1      	b.n	bcb4 <smp_ident_addr_info+0x90>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_SIGNING_INFO);
    bd10:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bd14:	f3bf 8f5b 	dmb	ish
    bd18:	e853 2f00 	ldrex	r2, [r3]
    bd1c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bd20:	e843 2100 	strex	r1, r2, [r3]
    bd24:	2900      	cmp	r1, #0
    bd26:	d1f7      	bne.n	bd18 <smp_ident_addr_info+0xf4>
    bd28:	f3bf 8f5b 	dmb	ish
    bd2c:	e7a0      	b.n	bc70 <smp_ident_addr_info+0x4c>
		bt_smp_distribute_keys(smp);
    bd2e:	4620      	mov	r0, r4
    bd30:	f7ff f95c 	bl	afec <bt_smp_distribute_keys>
    bd34:	e7a2      	b.n	bc7c <smp_ident_addr_info+0x58>
		smp_pairing_complete(smp, 0);
    bd36:	2100      	movs	r1, #0
    bd38:	4620      	mov	r0, r4
    bd3a:	f7fe ffd6 	bl	acea <smp_pairing_complete>
	return 0;
    bd3e:	2000      	movs	r0, #0
    bd40:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			return BT_SMP_ERR_UNSPECIFIED;
    bd44:	2008      	movs	r0, #8
    bd46:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	...

0000bd4c <legacy_request_tk>:
{
    bd4c:	b570      	push	{r4, r5, r6, lr}
    bd4e:	b082      	sub	sp, #8
    bd50:	4604      	mov	r4, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    bd52:	6805      	ldr	r5, [r0, #0]
	keys = bt_keys_find_addr(&conn->le.dst);
    bd54:	f105 0048 	add.w	r0, r5, #72	; 0x48
    bd58:	f000 fdea 	bl	c930 <bt_keys_find_addr>
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bd5c:	b168      	cbz	r0, bd7a <legacy_request_tk+0x2e>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bd5e:	f3bf 8f5b 	dmb	ish
    bd62:	6883      	ldr	r3, [r0, #8]
    bd64:	f3bf 8f5b 	dmb	ish
    bd68:	f013 0f01 	tst.w	r3, #1
    bd6c:	d005      	beq.n	bd7a <legacy_request_tk+0x2e>
	    smp->method == JUST_WORKS) {
    bd6e:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
	if (keys && atomic_test_bit(keys->flags, BT_KEYS_AUTHENTICATED) &&
    bd72:	b913      	cbnz	r3, bd7a <legacy_request_tk+0x2e>
		return BT_SMP_ERR_UNSPECIFIED;
    bd74:	2008      	movs	r0, #8
}
    bd76:	b002      	add	sp, #8
    bd78:	bd70      	pop	{r4, r5, r6, pc}
	switch (smp->method) {
    bd7a:	f894 30a4 	ldrb.w	r3, [r4, #164]	; 0xa4
    bd7e:	2b01      	cmp	r3, #1
    bd80:	d025      	beq.n	bdce <legacy_request_tk+0x82>
    bd82:	2b00      	cmp	r3, #0
    bd84:	d037      	beq.n	bdf6 <legacy_request_tk+0xaa>
    bd86:	2b02      	cmp	r3, #2
    bd88:	d001      	beq.n	bd8e <legacy_request_tk+0x42>
		return BT_SMP_ERR_UNSPECIFIED;
    bd8a:	2008      	movs	r0, #8
    bd8c:	e7f3      	b.n	bd76 <legacy_request_tk+0x2a>
		if (bt_rand(&passkey, sizeof(passkey))) {
    bd8e:	2104      	movs	r1, #4
    bd90:	eb0d 0001 	add.w	r0, sp, r1
    bd94:	f004 ffb8 	bl	10d08 <bt_rand>
    bd98:	b108      	cbz	r0, bd9e <legacy_request_tk+0x52>
			return BT_SMP_ERR_UNSPECIFIED;
    bd9a:	2008      	movs	r0, #8
    bd9c:	e7eb      	b.n	bd76 <legacy_request_tk+0x2a>
		passkey %= 1000000;
    bd9e:	9b01      	ldr	r3, [sp, #4]
    bda0:	4916      	ldr	r1, [pc, #88]	; (bdfc <legacy_request_tk+0xb0>)
    bda2:	fba1 2103 	umull	r2, r1, r1, r3
    bda6:	0c89      	lsrs	r1, r1, #18
    bda8:	4a15      	ldr	r2, [pc, #84]	; (be00 <legacy_request_tk+0xb4>)
    bdaa:	fb02 3111 	mls	r1, r2, r1, r3
    bdae:	ae02      	add	r6, sp, #8
    bdb0:	f846 1d04 	str.w	r1, [r6, #-4]!
		bt_auth->passkey_display(conn, passkey);
    bdb4:	4b13      	ldr	r3, [pc, #76]	; (be04 <legacy_request_tk+0xb8>)
    bdb6:	681b      	ldr	r3, [r3, #0]
    bdb8:	681b      	ldr	r3, [r3, #0]
    bdba:	4628      	mov	r0, r5
    bdbc:	4798      	blx	r3
		memcpy(smp->tk, &passkey, sizeof(passkey));
    bdbe:	2204      	movs	r2, #4
    bdc0:	4631      	mov	r1, r6
    bdc2:	f104 00e3 	add.w	r0, r4, #227	; 0xe3
    bdc6:	f7f4 fa7b 	bl	2c0 <memcpy>
	return 0;
    bdca:	2000      	movs	r0, #0
		break;
    bdcc:	e7d3      	b.n	bd76 <legacy_request_tk+0x2a>
		atomic_set_bit(smp->flags, SMP_FLAG_USER);
    bdce:	34a0      	adds	r4, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bdd0:	f3bf 8f5b 	dmb	ish
    bdd4:	e854 3f00 	ldrex	r3, [r4]
    bdd8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    bddc:	e844 3200 	strex	r2, r3, [r4]
    bde0:	2a00      	cmp	r2, #0
    bde2:	d1f7      	bne.n	bdd4 <legacy_request_tk+0x88>
    bde4:	f3bf 8f5b 	dmb	ish
		bt_auth->passkey_entry(conn);
    bde8:	4b06      	ldr	r3, [pc, #24]	; (be04 <legacy_request_tk+0xb8>)
    bdea:	681b      	ldr	r3, [r3, #0]
    bdec:	685b      	ldr	r3, [r3, #4]
    bdee:	4628      	mov	r0, r5
    bdf0:	4798      	blx	r3
	return 0;
    bdf2:	2000      	movs	r0, #0
		break;
    bdf4:	e7bf      	b.n	bd76 <legacy_request_tk+0x2a>
	return 0;
    bdf6:	2000      	movs	r0, #0
    bdf8:	e7bd      	b.n	bd76 <legacy_request_tk+0x2a>
    bdfa:	bf00      	nop
    bdfc:	431bde83 	.word	0x431bde83
    be00:	000f4240 	.word	0x000f4240
    be04:	20002a10 	.word	0x20002a10

0000be08 <legacy_pairing_rsp>:
{
    be08:	b538      	push	{r3, r4, r5, lr}
    be0a:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    be0c:	f7fe f90a 	bl	a024 <legacy_get_pair_method>
    be10:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    be14:	bb10      	cbnz	r0, be5c <legacy_pairing_rsp+0x54>
    be16:	4604      	mov	r4, r0
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be18:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be1c:	f3bf 8f5b 	dmb	ish
    be20:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    be24:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    be28:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    be2c:	d016      	beq.n	be5c <legacy_pairing_rsp+0x54>
	    atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    be2e:	4b24      	ldr	r3, [pc, #144]	; (bec0 <legacy_pairing_rsp+0xb8>)
    be30:	681b      	ldr	r3, [r3, #0]
    be32:	b19b      	cbz	r3, be5c <legacy_pairing_rsp+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    be34:	691b      	ldr	r3, [r3, #16]
    be36:	b18b      	cbz	r3, be5c <legacy_pairing_rsp+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be38:	f3bf 8f5b 	dmb	ish
    be3c:	e852 3f00 	ldrex	r3, [r2]
    be40:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    be44:	e842 3100 	strex	r1, r3, [r2]
    be48:	2900      	cmp	r1, #0
    be4a:	d1f7      	bne.n	be3c <legacy_pairing_rsp+0x34>
    be4c:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    be50:	4b1b      	ldr	r3, [pc, #108]	; (bec0 <legacy_pairing_rsp+0xb8>)
    be52:	681b      	ldr	r3, [r3, #0]
    be54:	691b      	ldr	r3, [r3, #16]
    be56:	6828      	ldr	r0, [r5, #0]
    be58:	4798      	blx	r3
		return 0;
    be5a:	e004      	b.n	be66 <legacy_pairing_rsp+0x5e>
	ret = legacy_request_tk(smp);
    be5c:	4628      	mov	r0, r5
    be5e:	f7ff ff75 	bl	bd4c <legacy_request_tk>
	if (ret) {
    be62:	4604      	mov	r4, r0
    be64:	b108      	cbz	r0, be6a <legacy_pairing_rsp+0x62>
}
    be66:	4620      	mov	r0, r4
    be68:	bd38      	pop	{r3, r4, r5, pc}
	if (!atomic_test_bit(smp->flags, SMP_FLAG_USER)) {
    be6a:	f105 03a0 	add.w	r3, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    be6e:	f3bf 8f5b 	dmb	ish
    be72:	f8d5 20a0 	ldr.w	r2, [r5, #160]	; 0xa0
    be76:	f3bf 8f5b 	dmb	ish
    be7a:	f412 7f00 	tst.w	r2, #512	; 0x200
    be7e:	d00c      	beq.n	be9a <legacy_pairing_rsp+0x92>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    be80:	f3bf 8f5b 	dmb	ish
    be84:	e853 2f00 	ldrex	r2, [r3]
    be88:	f042 0201 	orr.w	r2, r2, #1
    be8c:	e843 2100 	strex	r1, r2, [r3]
    be90:	2900      	cmp	r1, #0
    be92:	d1f7      	bne.n	be84 <legacy_pairing_rsp+0x7c>
    be94:	f3bf 8f5b 	dmb	ish
	return 0;
    be98:	e7e5      	b.n	be66 <legacy_pairing_rsp+0x5e>
		atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    be9a:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    be9e:	f3bf 8f5b 	dmb	ish
    bea2:	e853 2f00 	ldrex	r2, [r3]
    bea6:	f042 0208 	orr.w	r2, r2, #8
    beaa:	e843 2100 	strex	r1, r2, [r3]
    beae:	2900      	cmp	r1, #0
    beb0:	d1f7      	bne.n	bea2 <legacy_pairing_rsp+0x9a>
    beb2:	f3bf 8f5b 	dmb	ish
		return legacy_send_pairing_confirm(smp);
    beb6:	4628      	mov	r0, r5
    beb8:	f7fe fdd8 	bl	aa6c <legacy_send_pairing_confirm>
    bebc:	4604      	mov	r4, r0
    bebe:	e7d2      	b.n	be66 <legacy_pairing_rsp+0x5e>
    bec0:	20002a10 	.word	0x20002a10

0000bec4 <smp_pairing_rsp>:
{
    bec4:	b570      	push	{r4, r5, r6, lr}
	struct bt_smp_pairing *rsp = (void *)buf->data;
    bec6:	688d      	ldr	r5, [r1, #8]
	if ((rsp->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    bec8:	78eb      	ldrb	r3, [r5, #3]
    beca:	3b07      	subs	r3, #7
    becc:	b2db      	uxtb	r3, r3
    bece:	2b09      	cmp	r3, #9
    bed0:	d902      	bls.n	bed8 <smp_pairing_rsp+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    bed2:	2506      	movs	r5, #6
}
    bed4:	4628      	mov	r0, r5
    bed6:	bd70      	pop	{r4, r5, r6, pc}
    bed8:	4604      	mov	r4, r0
	smp->local_dist &= rsp->init_key_dist;
    beda:	792b      	ldrb	r3, [r5, #4]
    bedc:	f890 2179 	ldrb.w	r2, [r0, #377]	; 0x179
    bee0:	4013      	ands	r3, r2
    bee2:	f880 3179 	strb.w	r3, [r0, #377]	; 0x179
	smp->remote_dist &= rsp->resp_key_dist;
    bee6:	796b      	ldrb	r3, [r5, #5]
    bee8:	f890 217a 	ldrb.w	r2, [r0, #378]	; 0x17a
    beec:	4013      	ands	r3, r2
    beee:	f880 317a 	strb.w	r3, [r0, #378]	; 0x17a
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    bef2:	2302      	movs	r3, #2
    bef4:	f880 30ac 	strb.w	r3, [r0, #172]	; 0xac
	memcpy(smp->prsp + 1, rsp, sizeof(*rsp));
    bef8:	2206      	movs	r2, #6
    befa:	4629      	mov	r1, r5
    befc:	30ad      	adds	r0, #173	; 0xad
    befe:	f7f4 f9df 	bl	2c0 <memcpy>
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf02:	78ab      	ldrb	r3, [r5, #2]
    bf04:	f013 0f08 	tst.w	r3, #8
    bf08:	d004      	beq.n	bf14 <smp_pairing_rsp+0x50>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    bf0a:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    bf0e:	f013 0f08 	tst.w	r3, #8
    bf12:	d148      	bne.n	bfa6 <smp_pairing_rsp+0xe2>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf14:	78ab      	ldrb	r3, [r5, #2]
    bf16:	f013 0f20 	tst.w	r3, #32
    bf1a:	d004      	beq.n	bf26 <smp_pairing_rsp+0x62>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    bf1c:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    bf20:	f013 0f20 	tst.w	r3, #32
    bf24:	d14e      	bne.n	bfc4 <smp_pairing_rsp+0x100>
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf26:	78ab      	ldrb	r3, [r5, #2]
    bf28:	f013 0f01 	tst.w	r3, #1
    bf2c:	d004      	beq.n	bf38 <smp_pairing_rsp+0x74>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    bf2e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    bf32:	f013 0f01 	tst.w	r3, #1
    bf36:	d154      	bne.n	bfe2 <smp_pairing_rsp+0x11e>
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    bf38:	f104 06a0 	add.w	r6, r4, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    bf3c:	f3bf 8f5b 	dmb	ish
    bf40:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    bf44:	f3bf 8f5b 	dmb	ish
    bf48:	f013 0f20 	tst.w	r3, #32
    bf4c:	d058      	beq.n	c000 <smp_pairing_rsp+0x13c>
	smp->method = get_pair_method(smp, rsp->io_capability);
    bf4e:	7829      	ldrb	r1, [r5, #0]
    bf50:	4620      	mov	r0, r4
    bf52:	f7fe f835 	bl	9fc0 <get_pair_method>
    bf56:	4605      	mov	r5, r0
    bf58:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	smp->local_dist &= SEND_KEYS_SC;
    bf5c:	f894 3179 	ldrb.w	r3, [r4, #377]	; 0x179
    bf60:	f003 0304 	and.w	r3, r3, #4
    bf64:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist &= RECV_KEYS_SC;
    bf68:	f894 317a 	ldrb.w	r3, [r4, #378]	; 0x17a
    bf6c:	f003 0306 	and.w	r3, r3, #6
    bf70:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if (smp->method == JUST_WORKS) {
    bf74:	2800      	cmp	r0, #0
    bf76:	d049      	beq.n	c00c <smp_pairing_rsp+0x148>
	if (!sc_local_pkey_valid) {
    bf78:	4b3c      	ldr	r3, [pc, #240]	; (c06c <smp_pairing_rsp+0x1a8>)
    bf7a:	781b      	ldrb	r3, [r3, #0]
    bf7c:	2b00      	cmp	r3, #0
    bf7e:	d067      	beq.n	c050 <smp_pairing_rsp+0x18c>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    bf80:	f104 039c 	add.w	r3, r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    bf84:	f3bf 8f5b 	dmb	ish
    bf88:	e853 2f00 	ldrex	r2, [r3]
    bf8c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    bf90:	e843 2100 	strex	r1, r2, [r3]
    bf94:	2900      	cmp	r1, #0
    bf96:	d1f7      	bne.n	bf88 <smp_pairing_rsp+0xc4>
    bf98:	f3bf 8f5b 	dmb	ish
	return sc_send_public_key(smp);
    bf9c:	4620      	mov	r0, r4
    bf9e:	f7fe f94b 	bl	a238 <sc_send_public_key>
    bfa2:	4605      	mov	r5, r0
    bfa4:	e796      	b.n	bed4 <smp_pairing_rsp+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    bfa6:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfaa:	f3bf 8f5b 	dmb	ish
    bfae:	e853 2f00 	ldrex	r2, [r3]
    bfb2:	f042 0220 	orr.w	r2, r2, #32
    bfb6:	e843 2100 	strex	r1, r2, [r3]
    bfba:	2900      	cmp	r1, #0
    bfbc:	d1f7      	bne.n	bfae <smp_pairing_rsp+0xea>
    bfbe:	f3bf 8f5b 	dmb	ish
    bfc2:	e7a7      	b.n	bf14 <smp_pairing_rsp+0x50>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    bfc4:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfc8:	f3bf 8f5b 	dmb	ish
    bfcc:	e853 2f00 	ldrex	r2, [r3]
    bfd0:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    bfd4:	e843 2100 	strex	r1, r2, [r3]
    bfd8:	2900      	cmp	r1, #0
    bfda:	d1f7      	bne.n	bfcc <smp_pairing_rsp+0x108>
    bfdc:	f3bf 8f5b 	dmb	ish
    bfe0:	e7a1      	b.n	bf26 <smp_pairing_rsp+0x62>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    bfe2:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    bfe6:	f3bf 8f5b 	dmb	ish
    bfea:	e853 2f00 	ldrex	r2, [r3]
    bfee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    bff2:	e843 2100 	strex	r1, r2, [r3]
    bff6:	2900      	cmp	r1, #0
    bff8:	d1f7      	bne.n	bfea <smp_pairing_rsp+0x126>
    bffa:	f3bf 8f5b 	dmb	ish
    bffe:	e79b      	b.n	bf38 <smp_pairing_rsp+0x74>
		return legacy_pairing_rsp(smp, rsp->io_capability);
    c000:	7829      	ldrb	r1, [r5, #0]
    c002:	4620      	mov	r0, r4
    c004:	f7ff ff00 	bl	be08 <legacy_pairing_rsp>
    c008:	4605      	mov	r5, r0
    c00a:	e763      	b.n	bed4 <smp_pairing_rsp+0x10>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c00c:	f3bf 8f5b 	dmb	ish
    c010:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c014:	f3bf 8f5b 	dmb	ish
		if (atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c018:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c01c:	d0ac      	beq.n	bf78 <smp_pairing_rsp+0xb4>
    c01e:	4b14      	ldr	r3, [pc, #80]	; (c070 <smp_pairing_rsp+0x1ac>)
    c020:	681b      	ldr	r3, [r3, #0]
    c022:	2b00      	cmp	r3, #0
    c024:	d0a8      	beq.n	bf78 <smp_pairing_rsp+0xb4>
		    bt_auth && bt_auth->pairing_confirm) {
    c026:	691b      	ldr	r3, [r3, #16]
    c028:	2b00      	cmp	r3, #0
    c02a:	d0a5      	beq.n	bf78 <smp_pairing_rsp+0xb4>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c02c:	f3bf 8f5b 	dmb	ish
    c030:	e856 3f00 	ldrex	r3, [r6]
    c034:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c038:	e846 3200 	strex	r2, r3, [r6]
    c03c:	2a00      	cmp	r2, #0
    c03e:	d1f7      	bne.n	c030 <smp_pairing_rsp+0x16c>
    c040:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c044:	4b0a      	ldr	r3, [pc, #40]	; (c070 <smp_pairing_rsp+0x1ac>)
    c046:	681b      	ldr	r3, [r3, #0]
    c048:	691b      	ldr	r3, [r3, #16]
    c04a:	6820      	ldr	r0, [r4, #0]
    c04c:	4798      	blx	r3
			return 0;
    c04e:	e741      	b.n	bed4 <smp_pairing_rsp+0x10>
    c050:	f3bf 8f5b 	dmb	ish
    c054:	e856 3f00 	ldrex	r3, [r6]
    c058:	f043 0340 	orr.w	r3, r3, #64	; 0x40
    c05c:	e846 3200 	strex	r2, r3, [r6]
    c060:	2a00      	cmp	r2, #0
    c062:	d1f7      	bne.n	c054 <smp_pairing_rsp+0x190>
    c064:	f3bf 8f5b 	dmb	ish
		return 0;
    c068:	2500      	movs	r5, #0
    c06a:	e733      	b.n	bed4 <smp_pairing_rsp+0x10>
    c06c:	200009f8 	.word	0x200009f8
    c070:	20002a10 	.word	0x20002a10

0000c074 <legacy_pairing_req>:
{
    c074:	b538      	push	{r3, r4, r5, lr}
    c076:	4605      	mov	r5, r0
	smp->method = legacy_get_pair_method(smp, remote_io);
    c078:	f7fd ffd4 	bl	a024 <legacy_get_pair_method>
    c07c:	f885 00a4 	strb.w	r0, [r5, #164]	; 0xa4
	if (smp->method == JUST_WORKS &&
    c080:	bb10      	cbnz	r0, c0c8 <legacy_pairing_req+0x54>
    c082:	4604      	mov	r4, r0
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c084:	f105 02a0 	add.w	r2, r5, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c088:	f3bf 8f5b 	dmb	ish
    c08c:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c090:	f3bf 8f5b 	dmb	ish
	if (smp->method == JUST_WORKS &&
    c094:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c098:	d116      	bne.n	c0c8 <legacy_pairing_req+0x54>
	    !atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c09a:	4b18      	ldr	r3, [pc, #96]	; (c0fc <legacy_pairing_req+0x88>)
    c09c:	681b      	ldr	r3, [r3, #0]
    c09e:	b19b      	cbz	r3, c0c8 <legacy_pairing_req+0x54>
	    bt_auth && bt_auth->pairing_confirm) {
    c0a0:	691b      	ldr	r3, [r3, #16]
    c0a2:	b18b      	cbz	r3, c0c8 <legacy_pairing_req+0x54>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c0a4:	f3bf 8f5b 	dmb	ish
    c0a8:	e852 3f00 	ldrex	r3, [r2]
    c0ac:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c0b0:	e842 3100 	strex	r1, r3, [r2]
    c0b4:	2900      	cmp	r1, #0
    c0b6:	d1f7      	bne.n	c0a8 <legacy_pairing_req+0x34>
    c0b8:	f3bf 8f5b 	dmb	ish
		bt_auth->pairing_confirm(smp->chan.chan.conn);
    c0bc:	4b0f      	ldr	r3, [pc, #60]	; (c0fc <legacy_pairing_req+0x88>)
    c0be:	681b      	ldr	r3, [r3, #0]
    c0c0:	691b      	ldr	r3, [r3, #16]
    c0c2:	6828      	ldr	r0, [r5, #0]
    c0c4:	4798      	blx	r3
		return 0;
    c0c6:	e004      	b.n	c0d2 <legacy_pairing_req+0x5e>
	ret = send_pairing_rsp(smp);
    c0c8:	4628      	mov	r0, r5
    c0ca:	f7fe f8d9 	bl	a280 <send_pairing_rsp>
	if (ret) {
    c0ce:	4604      	mov	r4, r0
    c0d0:	b108      	cbz	r0, c0d6 <legacy_pairing_req+0x62>
}
    c0d2:	4620      	mov	r0, r4
    c0d4:	bd38      	pop	{r3, r4, r5, pc}
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_CONFIRM);
    c0d6:	f105 039c 	add.w	r3, r5, #156	; 0x9c
    c0da:	f3bf 8f5b 	dmb	ish
    c0de:	e853 2f00 	ldrex	r2, [r3]
    c0e2:	f042 0208 	orr.w	r2, r2, #8
    c0e6:	e843 2100 	strex	r1, r2, [r3]
    c0ea:	2900      	cmp	r1, #0
    c0ec:	d1f7      	bne.n	c0de <legacy_pairing_req+0x6a>
    c0ee:	f3bf 8f5b 	dmb	ish
	return legacy_request_tk(smp);
    c0f2:	4628      	mov	r0, r5
    c0f4:	f7ff fe2a 	bl	bd4c <legacy_request_tk>
    c0f8:	4604      	mov	r4, r0
    c0fa:	e7ea      	b.n	c0d2 <legacy_pairing_req+0x5e>
    c0fc:	20002a10 	.word	0x20002a10

0000c100 <smp_pairing_req>:
{
    c100:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct bt_smp_pairing *req = (void *)buf->data;
    c102:	688e      	ldr	r6, [r1, #8]
	if ((req->max_key_size > BT_SMP_MAX_ENC_KEY_SIZE) ||
    c104:	78f3      	ldrb	r3, [r6, #3]
    c106:	3b07      	subs	r3, #7
    c108:	b2db      	uxtb	r3, r3
    c10a:	2b09      	cmp	r3, #9
    c10c:	d902      	bls.n	c114 <smp_pairing_req+0x14>
		return BT_SMP_ERR_ENC_KEY_SIZE;
    c10e:	2506      	movs	r5, #6
}
    c110:	4628      	mov	r0, r5
    c112:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c114:	4604      	mov	r4, r0
	ret = smp_init(smp);
    c116:	f7fe f81c 	bl	a152 <smp_init>
	if (ret) {
    c11a:	b108      	cbz	r0, c120 <smp_pairing_req+0x20>
		return ret;
    c11c:	b2c5      	uxtb	r5, r0
    c11e:	e7f7      	b.n	c110 <smp_pairing_req+0x10>
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c120:	2301      	movs	r3, #1
    c122:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c126:	2206      	movs	r2, #6
    c128:	4631      	mov	r1, r6
    c12a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c12e:	f7f4 f8c7 	bl	2c0 <memcpy>
	smp->prsp[0] = BT_SMP_CMD_PAIRING_RSP;
    c132:	2302      	movs	r3, #2
    c134:	f884 30ac 	strb.w	r3, [r4, #172]	; 0xac
	rsp->auth_req = get_auth(req->auth_req);
    c138:	78b0      	ldrb	r0, [r6, #2]
    c13a:	f7fd ff97 	bl	a06c <get_auth>
    c13e:	4605      	mov	r5, r0
    c140:	f884 00af 	strb.w	r0, [r4, #175]	; 0xaf
	rsp->io_capability = get_io_capa();
    c144:	f7fd ff14 	bl	9f70 <get_io_capa>
    c148:	f884 00ad 	strb.w	r0, [r4, #173]	; 0xad
	rsp->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c14c:	2300      	movs	r3, #0
    c14e:	f884 30ae 	strb.w	r3, [r4, #174]	; 0xae
	rsp->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c152:	2310      	movs	r3, #16
    c154:	f884 30b0 	strb.w	r3, [r4, #176]	; 0xb0
	rsp->init_key_dist = (req->init_key_dist & RECV_KEYS);
    c158:	7933      	ldrb	r3, [r6, #4]
    c15a:	f003 0307 	and.w	r3, r3, #7
    c15e:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
	rsp->resp_key_dist = (req->resp_key_dist & SEND_KEYS);
    c162:	7973      	ldrb	r3, [r6, #5]
    c164:	f003 0305 	and.w	r3, r3, #5
    c168:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c16c:	f015 0f08 	tst.w	r5, #8
    c170:	d003      	beq.n	c17a <smp_pairing_req+0x7a>
	    (req->auth_req & BT_SMP_AUTH_SC)) {
    c172:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_SC) &&
    c174:	f013 0f08 	tst.w	r3, #8
    c178:	d15b      	bne.n	c232 <smp_pairing_req+0x132>
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c17a:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c17e:	f013 0f20 	tst.w	r3, #32
    c182:	d003      	beq.n	c18c <smp_pairing_req+0x8c>
	    (req->auth_req & BT_SMP_AUTH_CT2)) {
    c184:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_CT2) &&
    c186:	f013 0f20 	tst.w	r3, #32
    c18a:	d16d      	bne.n	c268 <smp_pairing_req+0x168>
	smp->local_dist = rsp->resp_key_dist;
    c18c:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c190:	f884 3179 	strb.w	r3, [r4, #377]	; 0x179
	smp->remote_dist = rsp->init_key_dist;
    c194:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    c198:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c19c:	f894 30af 	ldrb.w	r3, [r4, #175]	; 0xaf
    c1a0:	f013 0f01 	tst.w	r3, #1
    c1a4:	d003      	beq.n	c1ae <smp_pairing_req+0xae>
	    (req->auth_req & BT_SMP_AUTH_BONDING)) {
    c1a6:	78b3      	ldrb	r3, [r6, #2]
	if ((rsp->auth_req & BT_SMP_AUTH_BONDING) &&
    c1a8:	f013 0f01 	tst.w	r3, #1
    c1ac:	d16b      	bne.n	c286 <smp_pairing_req+0x186>
	atomic_set_bit(smp->flags, SMP_FLAG_PAIRING);
    c1ae:	f104 07a0 	add.w	r7, r4, #160	; 0xa0
    c1b2:	f3bf 8f5b 	dmb	ish
    c1b6:	e857 3f00 	ldrex	r3, [r7]
    c1ba:	f043 0308 	orr.w	r3, r3, #8
    c1be:	e847 3200 	strex	r2, r3, [r7]
    c1c2:	2a00      	cmp	r2, #0
    c1c4:	d1f7      	bne.n	c1b6 <smp_pairing_req+0xb6>
    c1c6:	f3bf 8f5b 	dmb	ish
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c1ca:	f3bf 8f5b 	dmb	ish
    c1ce:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c1d2:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_SC)) {
    c1d6:	f013 0f20 	tst.w	r3, #32
    c1da:	d063      	beq.n	c2a4 <smp_pairing_req+0x1a4>
	smp->method = get_pair_method(smp, req->io_capability);
    c1dc:	7831      	ldrb	r1, [r6, #0]
    c1de:	4620      	mov	r0, r4
    c1e0:	f7fd feee 	bl	9fc0 <get_pair_method>
    c1e4:	4605      	mov	r5, r0
    c1e6:	f884 00a4 	strb.w	r0, [r4, #164]	; 0xa4
	if (smp->method == JUST_WORKS) {
    c1ea:	2800      	cmp	r0, #0
    c1ec:	d160      	bne.n	c2b0 <smp_pairing_req+0x1b0>
    c1ee:	f3bf 8f5b 	dmb	ish
    c1f2:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
    c1f6:	f3bf 8f5b 	dmb	ish
		if (!atomic_test_bit(smp->flags, SMP_FLAG_SEC_REQ) &&
    c1fa:	f413 5f80 	tst.w	r3, #4096	; 0x1000
    c1fe:	d157      	bne.n	c2b0 <smp_pairing_req+0x1b0>
    c200:	4b35      	ldr	r3, [pc, #212]	; (c2d8 <smp_pairing_req+0x1d8>)
    c202:	681b      	ldr	r3, [r3, #0]
    c204:	2b00      	cmp	r3, #0
    c206:	d053      	beq.n	c2b0 <smp_pairing_req+0x1b0>
		    bt_auth && bt_auth->pairing_confirm) {
    c208:	691b      	ldr	r3, [r3, #16]
    c20a:	2b00      	cmp	r3, #0
    c20c:	d050      	beq.n	c2b0 <smp_pairing_req+0x1b0>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c20e:	f3bf 8f5b 	dmb	ish
    c212:	e857 3f00 	ldrex	r3, [r7]
    c216:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    c21a:	e847 3200 	strex	r2, r3, [r7]
    c21e:	2a00      	cmp	r2, #0
    c220:	d1f7      	bne.n	c212 <smp_pairing_req+0x112>
    c222:	f3bf 8f5b 	dmb	ish
			bt_auth->pairing_confirm(smp->chan.chan.conn);
    c226:	4b2c      	ldr	r3, [pc, #176]	; (c2d8 <smp_pairing_req+0x1d8>)
    c228:	681b      	ldr	r3, [r3, #0]
    c22a:	691b      	ldr	r3, [r3, #16]
    c22c:	6820      	ldr	r0, [r4, #0]
    c22e:	4798      	blx	r3
			return 0;
    c230:	e76e      	b.n	c110 <smp_pairing_req+0x10>
		atomic_set_bit(smp->flags, SMP_FLAG_SC);
    c232:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c236:	f3bf 8f5b 	dmb	ish
    c23a:	e853 2f00 	ldrex	r2, [r3]
    c23e:	f042 0220 	orr.w	r2, r2, #32
    c242:	e843 2100 	strex	r1, r2, [r3]
    c246:	2900      	cmp	r1, #0
    c248:	d1f7      	bne.n	c23a <smp_pairing_req+0x13a>
    c24a:	f3bf 8f5b 	dmb	ish
		rsp->init_key_dist &= RECV_KEYS_SC;
    c24e:	f894 30b1 	ldrb.w	r3, [r4, #177]	; 0xb1
    c252:	f003 0306 	and.w	r3, r3, #6
    c256:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
		rsp->resp_key_dist &= SEND_KEYS_SC;
    c25a:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
    c25e:	f003 0304 	and.w	r3, r3, #4
    c262:	f884 30b2 	strb.w	r3, [r4, #178]	; 0xb2
    c266:	e788      	b.n	c17a <smp_pairing_req+0x7a>
		atomic_set_bit(smp->flags, SMP_FLAG_CT2);
    c268:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c26c:	f3bf 8f5b 	dmb	ish
    c270:	e853 2f00 	ldrex	r2, [r3]
    c274:	f442 3200 	orr.w	r2, r2, #131072	; 0x20000
    c278:	e843 2100 	strex	r1, r2, [r3]
    c27c:	2900      	cmp	r1, #0
    c27e:	d1f7      	bne.n	c270 <smp_pairing_req+0x170>
    c280:	f3bf 8f5b 	dmb	ish
    c284:	e782      	b.n	c18c <smp_pairing_req+0x8c>
		atomic_set_bit(smp->flags, SMP_FLAG_BOND);
    c286:	f104 03a0 	add.w	r3, r4, #160	; 0xa0
    c28a:	f3bf 8f5b 	dmb	ish
    c28e:	e853 2f00 	ldrex	r2, [r3]
    c292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
    c296:	e843 2100 	strex	r1, r2, [r3]
    c29a:	2900      	cmp	r1, #0
    c29c:	d1f7      	bne.n	c28e <smp_pairing_req+0x18e>
    c29e:	f3bf 8f5b 	dmb	ish
    c2a2:	e784      	b.n	c1ae <smp_pairing_req+0xae>
		return legacy_pairing_req(smp, req->io_capability);
    c2a4:	7831      	ldrb	r1, [r6, #0]
    c2a6:	4620      	mov	r0, r4
    c2a8:	f7ff fee4 	bl	c074 <legacy_pairing_req>
    c2ac:	4605      	mov	r5, r0
    c2ae:	e72f      	b.n	c110 <smp_pairing_req+0x10>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PUBLIC_KEY);
    c2b0:	f104 039c 	add.w	r3, r4, #156	; 0x9c
    c2b4:	f3bf 8f5b 	dmb	ish
    c2b8:	e853 2f00 	ldrex	r2, [r3]
    c2bc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
    c2c0:	e843 2100 	strex	r1, r2, [r3]
    c2c4:	2900      	cmp	r1, #0
    c2c6:	d1f7      	bne.n	c2b8 <smp_pairing_req+0x1b8>
    c2c8:	f3bf 8f5b 	dmb	ish
	return send_pairing_rsp(smp);
    c2cc:	4620      	mov	r0, r4
    c2ce:	f7fd ffd7 	bl	a280 <send_pairing_rsp>
    c2d2:	4605      	mov	r5, r0
    c2d4:	e71c      	b.n	c110 <smp_pairing_req+0x10>
    c2d6:	bf00      	nop
    c2d8:	20002a10 	.word	0x20002a10

0000c2dc <bt_smp_connected>:
{
    c2dc:	b510      	push	{r4, lr}
    c2de:	4604      	mov	r4, r0
	k_delayed_work_init(&smp->work, smp_timeout);
    c2e0:	4904      	ldr	r1, [pc, #16]	; (c2f4 <bt_smp_connected+0x18>)
    c2e2:	f500 70be 	add.w	r0, r0, #380	; 0x17c
    c2e6:	f01d f955 	bl	29594 <k_delayed_work_init>
	smp_reset(smp);
    c2ea:	4620      	mov	r0, r4
    c2ec:	f7fe fcbb 	bl	ac66 <smp_reset>
    c2f0:	bd10      	pop	{r4, pc}
    c2f2:	bf00      	nop
    c2f4:	0000aeb7 	.word	0x0000aeb7

0000c2f8 <bt_smp_send_security_req>:
{
    c2f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    c2fc:	4606      	mov	r6, r0
	smp = smp_chan_get(conn);
    c2fe:	f7fd ff15 	bl	a12c <smp_chan_get>
	if (!smp) {
    c302:	b3e8      	cbz	r0, c380 <bt_smp_send_security_req+0x88>
    c304:	4604      	mov	r4, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c306:	f3bf 8f5b 	dmb	ish
    c30a:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c30e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c312:	f013 0f10 	tst.w	r3, #16
    c316:	d136      	bne.n	c386 <bt_smp_send_security_req+0x8e>
    c318:	f3bf 8f5b 	dmb	ish
    c31c:	f8d0 50a0 	ldr.w	r5, [r0, #160]	; 0xa0
    c320:	f3bf 8f5b 	dmb	ish
	return (1 & (val >> (bit & (ATOMIC_BITS - 1))));
    c324:	f3c5 05c0 	ubfx	r5, r5, #3, #1
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c328:	bb85      	cbnz	r5, c38c <bt_smp_send_security_req+0x94>
	if (!sec_level_reachable(conn)) {
    c32a:	4630      	mov	r0, r6
    c32c:	f7fd feb4 	bl	a098 <sec_level_reachable>
    c330:	b378      	cbz	r0, c392 <bt_smp_send_security_req+0x9a>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_SECURITY_REQUEST,
    c332:	2201      	movs	r2, #1
    c334:	210b      	movs	r1, #11
    c336:	4630      	mov	r0, r6
    c338:	f7fd fefd 	bl	a136 <smp_create_pdu>
	if (!req_buf) {
    c33c:	4607      	mov	r7, r0
    c33e:	b358      	cbz	r0, c398 <bt_smp_send_security_req+0xa0>
	req = net_buf_add(req_buf, sizeof(*req));
    c340:	2101      	movs	r1, #1
    c342:	3008      	adds	r0, #8
    c344:	f00e f856 	bl	1a3f4 <net_buf_simple_add>
    c348:	4680      	mov	r8, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c34a:	2009      	movs	r0, #9
    c34c:	f7fd fe8e 	bl	a06c <get_auth>
    c350:	f888 0000 	strb.w	r0, [r8]
    c354:	2300      	movs	r3, #0
    c356:	463a      	mov	r2, r7
    c358:	2106      	movs	r1, #6
    c35a:	4630      	mov	r0, r6
    c35c:	f7fb f9e1 	bl	7722 <bt_l2cap_send_cb>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_FAIL);
    c360:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c362:	f3bf 8f5b 	dmb	ish
    c366:	e854 3f00 	ldrex	r3, [r4]
    c36a:	f043 0320 	orr.w	r3, r3, #32
    c36e:	e844 3200 	strex	r2, r3, [r4]
    c372:	2a00      	cmp	r2, #0
    c374:	d1f7      	bne.n	c366 <bt_smp_send_security_req+0x6e>
    c376:	f3bf 8f5b 	dmb	ish
}
    c37a:	4628      	mov	r0, r5
    c37c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -ENOTCONN;
    c380:	f06f 057f 	mvn.w	r5, #127	; 0x7f
    c384:	e7f9      	b.n	c37a <bt_smp_send_security_req+0x82>
		return -EIO;
    c386:	f06f 0504 	mvn.w	r5, #4
    c38a:	e7f6      	b.n	c37a <bt_smp_send_security_req+0x82>
		return -EBUSY;
    c38c:	f06f 050f 	mvn.w	r5, #15
    c390:	e7f3      	b.n	c37a <bt_smp_send_security_req+0x82>
		return -EINVAL;
    c392:	f06f 0515 	mvn.w	r5, #21
    c396:	e7f0      	b.n	c37a <bt_smp_send_security_req+0x82>
		return -ENOBUFS;
    c398:	f06f 0568 	mvn.w	r5, #104	; 0x68
    c39c:	e7ed      	b.n	c37a <bt_smp_send_security_req+0x82>

0000c39e <bt_smp_send_pairing_req>:
{
    c39e:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
    c3a2:	4605      	mov	r5, r0
	smp = smp_chan_get(conn);
    c3a4:	f7fd fec2 	bl	a12c <smp_chan_get>
	if (!smp) {
    c3a8:	2800      	cmp	r0, #0
    c3aa:	d06b      	beq.n	c484 <bt_smp_send_pairing_req+0xe6>
    c3ac:	4604      	mov	r4, r0
	if (atomic_test_bit(smp->flags, SMP_FLAG_TIMEOUT)) {
    c3ae:	f100 06a0 	add.w	r6, r0, #160	; 0xa0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c3b2:	f3bf 8f5b 	dmb	ish
    c3b6:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3ba:	f3bf 8f5b 	dmb	ish
    c3be:	f013 0f10 	tst.w	r3, #16
    c3c2:	d162      	bne.n	c48a <bt_smp_send_pairing_req+0xec>
    c3c4:	f3bf 8f5b 	dmb	ish
    c3c8:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c3cc:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c3d0:	f013 0f08 	tst.w	r3, #8
    c3d4:	d15c      	bne.n	c490 <bt_smp_send_pairing_req+0xf2>
	if (!sec_level_reachable(conn)) {
    c3d6:	4628      	mov	r0, r5
    c3d8:	f7fd fe5e 	bl	a098 <sec_level_reachable>
    c3dc:	2800      	cmp	r0, #0
    c3de:	d05a      	beq.n	c496 <bt_smp_send_pairing_req+0xf8>
	if (smp_init(smp)) {
    c3e0:	4620      	mov	r0, r4
    c3e2:	f7fd feb6 	bl	a152 <smp_init>
    c3e6:	4680      	mov	r8, r0
    c3e8:	2800      	cmp	r0, #0
    c3ea:	d157      	bne.n	c49c <bt_smp_send_pairing_req+0xfe>
	req_buf = smp_create_pdu(conn, BT_SMP_CMD_PAIRING_REQ, sizeof(*req));
    c3ec:	2206      	movs	r2, #6
    c3ee:	2101      	movs	r1, #1
    c3f0:	4628      	mov	r0, r5
    c3f2:	f7fd fea0 	bl	a136 <smp_create_pdu>
	if (!req_buf) {
    c3f6:	4607      	mov	r7, r0
    c3f8:	2800      	cmp	r0, #0
    c3fa:	d052      	beq.n	c4a2 <bt_smp_send_pairing_req+0x104>
	req = net_buf_add(req_buf, sizeof(*req));
    c3fc:	2106      	movs	r1, #6
    c3fe:	3008      	adds	r0, #8
    c400:	f00d fff8 	bl	1a3f4 <net_buf_simple_add>
    c404:	4605      	mov	r5, r0
	req->auth_req = get_auth(BT_SMP_AUTH_DEFAULT);
    c406:	2009      	movs	r0, #9
    c408:	f7fd fe30 	bl	a06c <get_auth>
    c40c:	70a8      	strb	r0, [r5, #2]
	req->io_capability = get_io_capa();
    c40e:	f7fd fdaf 	bl	9f70 <get_io_capa>
    c412:	7028      	strb	r0, [r5, #0]
	req->oob_flag = BT_SMP_OOB_NOT_PRESENT;
    c414:	f04f 0900 	mov.w	r9, #0
    c418:	f885 9001 	strb.w	r9, [r5, #1]
	req->max_key_size = BT_SMP_MAX_ENC_KEY_SIZE;
    c41c:	2310      	movs	r3, #16
    c41e:	70eb      	strb	r3, [r5, #3]
	req->init_key_dist = SEND_KEYS;
    c420:	2205      	movs	r2, #5
    c422:	712a      	strb	r2, [r5, #4]
	req->resp_key_dist = RECV_KEYS;
    c424:	2307      	movs	r3, #7
    c426:	716b      	strb	r3, [r5, #5]
	smp->local_dist = SEND_KEYS;
    c428:	f884 2179 	strb.w	r2, [r4, #377]	; 0x179
	smp->remote_dist = RECV_KEYS;
    c42c:	f884 317a 	strb.w	r3, [r4, #378]	; 0x17a
	smp->preq[0] = BT_SMP_CMD_PAIRING_REQ;
    c430:	2301      	movs	r3, #1
    c432:	f884 30a5 	strb.w	r3, [r4, #165]	; 0xa5
	memcpy(smp->preq + 1, req, sizeof(*req));
    c436:	2206      	movs	r2, #6
    c438:	4629      	mov	r1, r5
    c43a:	f104 00a6 	add.w	r0, r4, #166	; 0xa6
    c43e:	f7f3 ff3f 	bl	2c0 <memcpy>
	smp_send(smp, req_buf, NULL);
    c442:	464a      	mov	r2, r9
    c444:	4639      	mov	r1, r7
    c446:	4620      	mov	r0, r4
    c448:	f7fd fec8 	bl	a1dc <smp_send>
	atomic_set_bit(&smp->allowed_cmds, BT_SMP_CMD_PAIRING_RSP);
    c44c:	349c      	adds	r4, #156	; 0x9c
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c44e:	f3bf 8f5b 	dmb	ish
    c452:	e854 3f00 	ldrex	r3, [r4]
    c456:	f043 0304 	orr.w	r3, r3, #4
    c45a:	e844 3200 	strex	r2, r3, [r4]
    c45e:	2a00      	cmp	r2, #0
    c460:	d1f7      	bne.n	c452 <bt_smp_send_pairing_req+0xb4>
    c462:	f3bf 8f5b 	dmb	ish
    c466:	f3bf 8f5b 	dmb	ish
    c46a:	e856 3f00 	ldrex	r3, [r6]
    c46e:	f043 0308 	orr.w	r3, r3, #8
    c472:	e846 3200 	strex	r2, r3, [r6]
    c476:	2a00      	cmp	r2, #0
    c478:	d1f7      	bne.n	c46a <bt_smp_send_pairing_req+0xcc>
    c47a:	f3bf 8f5b 	dmb	ish
}
    c47e:	4640      	mov	r0, r8
    c480:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -ENOTCONN;
    c484:	f06f 087f 	mvn.w	r8, #127	; 0x7f
    c488:	e7f9      	b.n	c47e <bt_smp_send_pairing_req+0xe0>
		return -EIO;
    c48a:	f06f 0804 	mvn.w	r8, #4
    c48e:	e7f6      	b.n	c47e <bt_smp_send_pairing_req+0xe0>
		return -EBUSY;
    c490:	f06f 080f 	mvn.w	r8, #15
    c494:	e7f3      	b.n	c47e <bt_smp_send_pairing_req+0xe0>
		return -EINVAL;
    c496:	f06f 0815 	mvn.w	r8, #21
    c49a:	e7f0      	b.n	c47e <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c49c:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c4a0:	e7ed      	b.n	c47e <bt_smp_send_pairing_req+0xe0>
		return -ENOBUFS;
    c4a2:	f06f 0868 	mvn.w	r8, #104	; 0x68
    c4a6:	e7ea      	b.n	c47e <bt_smp_send_pairing_req+0xe0>

0000c4a8 <smp_security_request>:
{
    c4a8:	b5f0      	push	{r4, r5, r6, r7, lr}
    c4aa:	b085      	sub	sp, #20
    c4ac:	4606      	mov	r6, r0
	struct bt_conn *conn = smp->chan.chan.conn;
    c4ae:	6804      	ldr	r4, [r0, #0]
	struct bt_smp_security_request *req = (void *)buf->data;
    c4b0:	688b      	ldr	r3, [r1, #8]
	if (sc_supported) {
    c4b2:	4a35      	ldr	r2, [pc, #212]	; (c588 <smp_security_request+0xe0>)
    c4b4:	7812      	ldrb	r2, [r2, #0]
    c4b6:	b332      	cbz	r2, c506 <smp_security_request+0x5e>
		auth = req->auth_req & BT_SMP_AUTH_MASK_SC;
    c4b8:	781d      	ldrb	r5, [r3, #0]
    c4ba:	f005 050f 	and.w	r5, r5, #15
	if (!conn->le.keys) {
    c4be:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4c0:	b32b      	cbz	r3, c50e <smp_security_request+0x66>
	if (!conn->le.keys) {
    c4c2:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4c4:	2b00      	cmp	r3, #0
    c4c6:	d039      	beq.n	c53c <smp_security_request+0x94>
	if ((auth & BT_SMP_AUTH_MITM) &&
    c4c8:	f015 0f04 	tst.w	r5, #4
    c4cc:	d12e      	bne.n	c52c <smp_security_request+0x84>
	if ((auth & BT_SMP_AUTH_SC) &&
    c4ce:	f015 0f08 	tst.w	r5, #8
    c4d2:	d004      	beq.n	c4de <smp_security_request+0x36>
	    !(conn->le.keys->keys & BT_KEYS_LTK_P256)) {
    c4d4:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c4d6:	899b      	ldrh	r3, [r3, #12]
	if ((auth & BT_SMP_AUTH_SC) &&
    c4d8:	f013 0f20 	tst.w	r3, #32
    c4dc:	d02e      	beq.n	c53c <smp_security_request+0x94>
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c4de:	6f23      	ldr	r3, [r4, #112]	; 0x70
					conn->le.keys->ltk.val,
    c4e0:	f103 021a 	add.w	r2, r3, #26
					conn->le.keys->enc_size) < 0) {
    c4e4:	79dd      	ldrb	r5, [r3, #7]
	if (bt_conn_le_start_encryption(conn, conn->le.keys->ltk.rand,
    c4e6:	e9d3 0104 	ldrd	r0, r1, [r3, #16]
    c4ea:	9502      	str	r5, [sp, #8]
    c4ec:	9201      	str	r2, [sp, #4]
    c4ee:	8b1b      	ldrh	r3, [r3, #24]
    c4f0:	9300      	str	r3, [sp, #0]
    c4f2:	4602      	mov	r2, r0
    c4f4:	460b      	mov	r3, r1
    c4f6:	4620      	mov	r0, r4
    c4f8:	f7f9 ffbc 	bl	6474 <bt_conn_le_start_encryption>
    c4fc:	2800      	cmp	r0, #0
    c4fe:	da24      	bge.n	c54a <smp_security_request+0xa2>
		return BT_SMP_ERR_UNSPECIFIED;
    c500:	2008      	movs	r0, #8
}
    c502:	b005      	add	sp, #20
    c504:	bdf0      	pop	{r4, r5, r6, r7, pc}
		auth = req->auth_req & BT_SMP_AUTH_MASK;
    c506:	781d      	ldrb	r5, [r3, #0]
    c508:	f005 0507 	and.w	r5, r5, #7
    c50c:	e7d7      	b.n	c4be <smp_security_request+0x16>
		conn->le.keys = bt_keys_find(BT_KEYS_LTK_P256, &conn->le.dst);
    c50e:	f104 0748 	add.w	r7, r4, #72	; 0x48
    c512:	4639      	mov	r1, r7
    c514:	2020      	movs	r0, #32
    c516:	f000 f98f 	bl	c838 <bt_keys_find>
    c51a:	6720      	str	r0, [r4, #112]	; 0x70
		if (!conn->le.keys) {
    c51c:	2800      	cmp	r0, #0
    c51e:	d1d0      	bne.n	c4c2 <smp_security_request+0x1a>
			conn->le.keys = bt_keys_find(BT_KEYS_LTK,
    c520:	4639      	mov	r1, r7
    c522:	2004      	movs	r0, #4
    c524:	f000 f988 	bl	c838 <bt_keys_find>
    c528:	6720      	str	r0, [r4, #112]	; 0x70
    c52a:	e7ca      	b.n	c4c2 <smp_security_request+0x1a>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c52c:	f3bf 8f5b 	dmb	ish
    c530:	689b      	ldr	r3, [r3, #8]
    c532:	f3bf 8f5b 	dmb	ish
	if ((auth & BT_SMP_AUTH_MITM) &&
    c536:	f013 0f01 	tst.w	r3, #1
    c53a:	d1c8      	bne.n	c4ce <smp_security_request+0x26>
	if (bt_smp_send_pairing_req(conn) < 0) {
    c53c:	4620      	mov	r0, r4
    c53e:	f7ff ff2e 	bl	c39e <bt_smp_send_pairing_req>
    c542:	2800      	cmp	r0, #0
    c544:	da10      	bge.n	c568 <smp_security_request+0xc0>
		return BT_SMP_ERR_UNSPECIFIED;
    c546:	2008      	movs	r0, #8
    c548:	e7db      	b.n	c502 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_ENC_PENDING);
    c54a:	36a0      	adds	r6, #160	; 0xa0
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c54c:	f3bf 8f5b 	dmb	ish
    c550:	e856 3f00 	ldrex	r3, [r6]
    c554:	f043 0302 	orr.w	r3, r3, #2
    c558:	e846 3200 	strex	r2, r3, [r6]
    c55c:	2a00      	cmp	r2, #0
    c55e:	d1f7      	bne.n	c550 <smp_security_request+0xa8>
    c560:	f3bf 8f5b 	dmb	ish
	return 0;
    c564:	2000      	movs	r0, #0
    c566:	e7cc      	b.n	c502 <smp_security_request+0x5a>
	atomic_set_bit(smp->flags, SMP_FLAG_SEC_REQ);
    c568:	36a0      	adds	r6, #160	; 0xa0
    c56a:	f3bf 8f5b 	dmb	ish
    c56e:	e856 3f00 	ldrex	r3, [r6]
    c572:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
    c576:	e846 3200 	strex	r2, r3, [r6]
    c57a:	2a00      	cmp	r2, #0
    c57c:	d1f7      	bne.n	c56e <smp_security_request+0xc6>
    c57e:	f3bf 8f5b 	dmb	ish
	return 0;
    c582:	2000      	movs	r0, #0
    c584:	e7bd      	b.n	c502 <smp_security_request+0x5a>
    c586:	bf00      	nop
    c588:	20000a3c 	.word	0x20000a3c

0000c58c <bt_smp_sign_verify>:
{
    c58c:	b530      	push	{r4, r5, lr}
    c58e:	b085      	sub	sp, #20
    c590:	4605      	mov	r5, r0
    c592:	460c      	mov	r4, r1
	return buf->data + buf->len;
    c594:	6889      	ldr	r1, [r1, #8]
    c596:	89a3      	ldrh	r3, [r4, #12]
	memcpy(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig));
    c598:	3b0c      	subs	r3, #12
    c59a:	220c      	movs	r2, #12
    c59c:	4419      	add	r1, r3
    c59e:	a801      	add	r0, sp, #4
    c5a0:	f7f3 fe8e 	bl	2c0 <memcpy>
	keys = bt_keys_find(BT_KEYS_REMOTE_CSRK, &conn->le.dst);
    c5a4:	f105 0148 	add.w	r1, r5, #72	; 0x48
    c5a8:	2010      	movs	r0, #16
    c5aa:	f000 f945 	bl	c838 <bt_keys_find>
	if (!keys) {
    c5ae:	b320      	cbz	r0, c5fa <bt_smp_sign_verify+0x6e>
    c5b0:	4605      	mov	r5, r0
	cnt = sys_cpu_to_le32(keys->remote_csrk.cnt);
    c5b2:	6ec3      	ldr	r3, [r0, #108]	; 0x6c
    c5b4:	a904      	add	r1, sp, #16
    c5b6:	f841 3d10 	str.w	r3, [r1, #-16]!
    c5ba:	68a0      	ldr	r0, [r4, #8]
    c5bc:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - sizeof(sig), &cnt, sizeof(cnt));
    c5be:	3b0c      	subs	r3, #12
    c5c0:	2204      	movs	r2, #4
    c5c2:	4418      	add	r0, r3
    c5c4:	f7f3 fe7c 	bl	2c0 <memcpy>
			   buf->len - sizeof(sig));
    c5c8:	89a2      	ldrh	r2, [r4, #12]
	err = smp_sign_buf(keys->remote_csrk.val, buf->data,
    c5ca:	3a0c      	subs	r2, #12
    c5cc:	b292      	uxth	r2, r2
    c5ce:	68a1      	ldr	r1, [r4, #8]
    c5d0:	f105 005c 	add.w	r0, r5, #92	; 0x5c
    c5d4:	f7fd feac 	bl	a330 <smp_sign_buf>
	if (err) {
    c5d8:	b990      	cbnz	r0, c600 <bt_smp_sign_verify+0x74>
    c5da:	68a1      	ldr	r1, [r4, #8]
    c5dc:	89a3      	ldrh	r3, [r4, #12]
	if (memcmp(sig, net_buf_tail(buf) - sizeof(sig), sizeof(sig))) {
    c5de:	3b0c      	subs	r3, #12
    c5e0:	220c      	movs	r2, #12
    c5e2:	4419      	add	r1, r3
    c5e4:	a801      	add	r0, sp, #4
    c5e6:	f01d f943 	bl	29870 <memcmp>
    c5ea:	4602      	mov	r2, r0
    c5ec:	b958      	cbnz	r0, c606 <bt_smp_sign_verify+0x7a>
	keys->remote_csrk.cnt++;
    c5ee:	6eeb      	ldr	r3, [r5, #108]	; 0x6c
    c5f0:	3301      	adds	r3, #1
    c5f2:	66eb      	str	r3, [r5, #108]	; 0x6c
}
    c5f4:	4610      	mov	r0, r2
    c5f6:	b005      	add	sp, #20
    c5f8:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c5fa:	f06f 0201 	mvn.w	r2, #1
    c5fe:	e7f9      	b.n	c5f4 <bt_smp_sign_verify+0x68>
		return -EIO;
    c600:	f06f 0204 	mvn.w	r2, #4
    c604:	e7f6      	b.n	c5f4 <bt_smp_sign_verify+0x68>
		return -EBADMSG;
    c606:	f06f 024c 	mvn.w	r2, #76	; 0x4c
    c60a:	e7f3      	b.n	c5f4 <bt_smp_sign_verify+0x68>

0000c60c <bt_smp_sign>:
{
    c60c:	b530      	push	{r4, r5, lr}
    c60e:	b083      	sub	sp, #12
    c610:	460c      	mov	r4, r1
	keys = bt_keys_find(BT_KEYS_LOCAL_CSRK, &conn->le.dst);
    c612:	f100 0148 	add.w	r1, r0, #72	; 0x48
    c616:	2008      	movs	r0, #8
    c618:	f000 f90e 	bl	c838 <bt_keys_find>
	if (!keys) {
    c61c:	b300      	cbz	r0, c660 <bt_smp_sign+0x54>
    c61e:	4605      	mov	r5, r0
	net_buf_add(buf, 12);
    c620:	210c      	movs	r1, #12
    c622:	f104 0008 	add.w	r0, r4, #8
    c626:	f00d fee5 	bl	1a3f4 <net_buf_simple_add>
	cnt = sys_cpu_to_le32(keys->local_csrk.cnt);
    c62a:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c62c:	a902      	add	r1, sp, #8
    c62e:	f841 3d04 	str.w	r3, [r1, #-4]!
    c632:	68a0      	ldr	r0, [r4, #8]
    c634:	89a3      	ldrh	r3, [r4, #12]
	memcpy(net_buf_tail(buf) - 12, &cnt, sizeof(cnt));
    c636:	3b0c      	subs	r3, #12
    c638:	2204      	movs	r2, #4
    c63a:	4418      	add	r0, r3
    c63c:	f7f3 fe40 	bl	2c0 <memcpy>
	err = smp_sign_buf(keys->local_csrk.val, buf->data, buf->len - 12);
    c640:	89a2      	ldrh	r2, [r4, #12]
    c642:	3a0c      	subs	r2, #12
    c644:	b292      	uxth	r2, r2
    c646:	68a1      	ldr	r1, [r4, #8]
    c648:	f105 0048 	add.w	r0, r5, #72	; 0x48
    c64c:	f7fd fe70 	bl	a330 <smp_sign_buf>
	if (err) {
    c650:	4602      	mov	r2, r0
    c652:	b940      	cbnz	r0, c666 <bt_smp_sign+0x5a>
	keys->local_csrk.cnt++;
    c654:	6dab      	ldr	r3, [r5, #88]	; 0x58
    c656:	3301      	adds	r3, #1
    c658:	65ab      	str	r3, [r5, #88]	; 0x58
}
    c65a:	4610      	mov	r0, r2
    c65c:	b003      	add	sp, #12
    c65e:	bd30      	pop	{r4, r5, pc}
		return -ENOENT;
    c660:	f06f 0201 	mvn.w	r2, #1
    c664:	e7f9      	b.n	c65a <bt_smp_sign+0x4e>
		return -EIO;
    c666:	f06f 0204 	mvn.w	r2, #4
    c66a:	e7f6      	b.n	c65a <bt_smp_sign+0x4e>

0000c66c <bt_smp_update_keys>:
{
    c66c:	b570      	push	{r4, r5, r6, lr}
    c66e:	4604      	mov	r4, r0
	smp = smp_chan_get(conn);
    c670:	f7fd fd5c 	bl	a12c <smp_chan_get>
	if (!smp) {
    c674:	2800      	cmp	r0, #0
    c676:	d03d      	beq.n	c6f4 <bt_smp_update_keys+0x88>
    c678:	4605      	mov	r5, r0
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c67a:	f3bf 8f5b 	dmb	ish
    c67e:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c682:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c686:	f013 0f08 	tst.w	r3, #8
    c68a:	d033      	beq.n	c6f4 <bt_smp_update_keys+0x88>
	if (conn->le.keys) {
    c68c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c68e:	b108      	cbz	r0, c694 <bt_smp_update_keys+0x28>
		bt_keys_clear(conn->le.keys);
    c690:	f000 f97f 	bl	c992 <bt_keys_clear>
	conn->le.keys = bt_keys_get_addr(&conn->le.dst);
    c694:	f104 0048 	add.w	r0, r4, #72	; 0x48
    c698:	f000 f8a4 	bl	c7e4 <bt_keys_get_addr>
    c69c:	6720      	str	r0, [r4, #112]	; 0x70
	if (!conn->le.keys) {
    c69e:	b348      	cbz	r0, c6f4 <bt_smp_update_keys+0x88>
    c6a0:	f3bf 8f5b 	dmb	ish
    c6a4:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c6a8:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC_DEBUG_KEY)) {
    c6ac:	f413 6f00 	tst.w	r3, #2048	; 0x800
    c6b0:	d121      	bne.n	c6f6 <bt_smp_update_keys+0x8a>
	switch (smp->method) {
    c6b2:	f895 30a4 	ldrb.w	r3, [r5, #164]	; 0xa4
    c6b6:	3b01      	subs	r3, #1
    c6b8:	2b02      	cmp	r3, #2
    c6ba:	d82b      	bhi.n	c714 <bt_smp_update_keys+0xa8>
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c6bc:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c6be:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6c0:	f3bf 8f5b 	dmb	ish
    c6c4:	e853 2f00 	ldrex	r2, [r3]
    c6c8:	f042 0201 	orr.w	r2, r2, #1
    c6cc:	e843 2100 	strex	r1, r2, [r3]
    c6d0:	2900      	cmp	r1, #0
    c6d2:	d1f7      	bne.n	c6c4 <bt_smp_update_keys+0x58>
    c6d4:	f3bf 8f5b 	dmb	ish
	conn->le.keys->enc_size = get_encryption_key_size(smp);
    c6d8:	6f26      	ldr	r6, [r4, #112]	; 0x70
    c6da:	4628      	mov	r0, r5
    c6dc:	f7fd fc8a 	bl	9ff4 <get_encryption_key_size>
    c6e0:	71f0      	strb	r0, [r6, #7]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c6e2:	f3bf 8f5b 	dmb	ish
    c6e6:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c6ea:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c6ee:	f013 0f20 	tst.w	r3, #32
    c6f2:	d11e      	bne.n	c732 <bt_smp_update_keys+0xc6>
    c6f4:	bd70      	pop	{r4, r5, r6, pc}
		atomic_set_bit(conn->le.keys->flags, BT_KEYS_DEBUG);
    c6f6:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c6f8:	3308      	adds	r3, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
    c6fa:	f3bf 8f5b 	dmb	ish
    c6fe:	e853 2f00 	ldrex	r2, [r3]
    c702:	f042 0202 	orr.w	r2, r2, #2
    c706:	e843 2100 	strex	r1, r2, [r3]
    c70a:	2900      	cmp	r1, #0
    c70c:	d1f7      	bne.n	c6fe <bt_smp_update_keys+0x92>
    c70e:	f3bf 8f5b 	dmb	ish
    c712:	e7ce      	b.n	c6b2 <bt_smp_update_keys+0x46>
		atomic_clear_bit(conn->le.keys->flags, BT_KEYS_AUTHENTICATED);
    c714:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c716:	3308      	adds	r3, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
    c718:	f3bf 8f5b 	dmb	ish
    c71c:	e853 2f00 	ldrex	r2, [r3]
    c720:	f022 0201 	bic.w	r2, r2, #1
    c724:	e843 2100 	strex	r1, r2, [r3]
    c728:	2900      	cmp	r1, #0
    c72a:	d1f7      	bne.n	c71c <bt_smp_update_keys+0xb0>
    c72c:	f3bf 8f5b 	dmb	ish
    c730:	e7d2      	b.n	c6d8 <bt_smp_update_keys+0x6c>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
    c732:	f3bf 8f5b 	dmb	ish
    c736:	f8d5 30a0 	ldr.w	r3, [r5, #160]	; 0xa0
    c73a:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(smp->flags, SMP_FLAG_SC) &&
    c73e:	f413 6f80 	tst.w	r3, #1024	; 0x400
    c742:	d0d7      	beq.n	c6f4 <bt_smp_update_keys+0x88>
		bt_keys_add_type(conn->le.keys, BT_KEYS_LTK_P256);
    c744:	2120      	movs	r1, #32
    c746:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c748:	f000 f90c 	bl	c964 <bt_keys_add_type>
		memcpy(conn->le.keys->ltk.val, smp->tk,
    c74c:	6f20      	ldr	r0, [r4, #112]	; 0x70
    c74e:	2210      	movs	r2, #16
    c750:	f105 01e3 	add.w	r1, r5, #227	; 0xe3
    c754:	301a      	adds	r0, #26
    c756:	f7f3 fdb3 	bl	2c0 <memcpy>
		conn->le.keys->ltk.rand = 0;
    c75a:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c75c:	2000      	movs	r0, #0
    c75e:	2100      	movs	r1, #0
    c760:	e9c3 0104 	strd	r0, r1, [r3, #16]
		conn->le.keys->ltk.ediv = 0;
    c764:	6f23      	ldr	r3, [r4, #112]	; 0x70
    c766:	2200      	movs	r2, #0
    c768:	831a      	strh	r2, [r3, #24]
    c76a:	e7c3      	b.n	c6f4 <bt_smp_update_keys+0x88>

0000c76c <bt_smp_get_tk>:
{
    c76c:	b570      	push	{r4, r5, r6, lr}
    c76e:	460d      	mov	r5, r1
	smp = smp_chan_get(conn);
    c770:	f7fd fcdc 	bl	a12c <smp_chan_get>
	if (!smp) {
    c774:	b300      	cbz	r0, c7b8 <bt_smp_get_tk+0x4c>
    c776:	4604      	mov	r4, r0
    c778:	f3bf 8f5b 	dmb	ish
    c77c:	f8d0 30a0 	ldr.w	r3, [r0, #160]	; 0xa0
    c780:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(smp->flags, SMP_FLAG_PAIRING)) {
    c784:	f013 0f08 	tst.w	r3, #8
    c788:	d101      	bne.n	c78e <bt_smp_get_tk+0x22>
		return false;
    c78a:	2000      	movs	r0, #0
    c78c:	bd70      	pop	{r4, r5, r6, pc}
	enc_size = get_encryption_key_size(smp);
    c78e:	f7fd fc31 	bl	9ff4 <get_encryption_key_size>
    c792:	4606      	mov	r6, r0
	memcpy(tk, smp->tk, enc_size);
    c794:	4602      	mov	r2, r0
    c796:	f104 01e3 	add.w	r1, r4, #227	; 0xe3
    c79a:	4628      	mov	r0, r5
    c79c:	f7f3 fd90 	bl	2c0 <memcpy>
	if (enc_size < sizeof(smp->tk)) {
    c7a0:	2e0f      	cmp	r6, #15
    c7a2:	d901      	bls.n	c7a8 <bt_smp_get_tk+0x3c>
	return true;
    c7a4:	2001      	movs	r0, #1
}
    c7a6:	bd70      	pop	{r4, r5, r6, pc}
		memset(tk + enc_size, 0, sizeof(smp->tk) - enc_size);
    c7a8:	f1c6 0210 	rsb	r2, r6, #16
    c7ac:	2100      	movs	r1, #0
    c7ae:	19a8      	adds	r0, r5, r6
    c7b0:	f01d f8f2 	bl	29998 <memset>
	return true;
    c7b4:	2001      	movs	r0, #1
    c7b6:	bd70      	pop	{r4, r5, r6, pc}
		return false;
    c7b8:	2000      	movs	r0, #0
    c7ba:	bd70      	pop	{r4, r5, r6, pc}

0000c7bc <bt_smp_init>:

int bt_smp_init(void)
{
    c7bc:	b508      	push	{r3, lr}
	};
	static struct bt_pub_key_cb pub_key_cb = {
		.func           = bt_smp_pkey_ready,
	};

	sc_supported = le_sc_supported();
    c7be:	f7fd fca9 	bl	a114 <le_sc_supported>
    c7c2:	4b05      	ldr	r3, [pc, #20]	; (c7d8 <bt_smp_init+0x1c>)
    c7c4:	7018      	strb	r0, [r3, #0]
	if (IS_ENABLED(CONFIG_BT_SMP_SC_ONLY) && !sc_supported) {
		BT_ERR("SC Only Mode selected but LE SC not supported");
		return -ENOENT;
	}

	bt_l2cap_le_fixed_chan_register(&chan);
    c7c6:	4805      	ldr	r0, [pc, #20]	; (c7dc <bt_smp_init+0x20>)
    c7c8:	f7fa fe04 	bl	73d4 <bt_l2cap_le_fixed_chan_register>
	}
#endif

	BT_DBG("LE SC %s", sc_supported ? "enabled" : "disabled");

	bt_pub_key_gen(&pub_key_cb);
    c7cc:	4804      	ldr	r0, [pc, #16]	; (c7e0 <bt_smp_init+0x24>)
    c7ce:	f7f9 fc7f 	bl	60d0 <bt_pub_key_gen>

	return smp_self_test();
}
    c7d2:	2000      	movs	r0, #0
    c7d4:	bd08      	pop	{r3, pc}
    c7d6:	bf00      	nop
    c7d8:	20000a3c 	.word	0x20000a3c
    c7dc:	2000bb7c 	.word	0x2000bb7c
    c7e0:	2000bb9c 	.word	0x2000bb9c

0000c7e4 <bt_keys_get_addr>:
#include "keys.h"

static struct bt_keys key_pool[CONFIG_BT_MAX_PAIRED];

struct bt_keys *bt_keys_get_addr(const bt_addr_le_t *addr)
{
    c7e4:	b5f0      	push	{r4, r5, r6, r7, lr}
    c7e6:	b083      	sub	sp, #12
    c7e8:	4606      	mov	r6, r0
	struct bt_keys *keys;
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c7ea:	2500      	movs	r5, #0
    c7ec:	b11d      	cbz	r5, c7f6 <bt_keys_get_addr+0x12>
		}
	}

	BT_DBG("unable to create keys for %s", bt_addr_le_str(addr));

	return NULL;
    c7ee:	2400      	movs	r4, #0
}
    c7f0:	4620      	mov	r0, r4
    c7f2:	b003      	add	sp, #12
    c7f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		keys = &key_pool[i];
    c7f6:	00eb      	lsls	r3, r5, #3
    c7f8:	442b      	add	r3, r5
    c7fa:	011a      	lsls	r2, r3, #4
    c7fc:	4c0d      	ldr	r4, [pc, #52]	; (c834 <bt_keys_get_addr+0x50>)
    c7fe:	4414      	add	r4, r2
	return memcmp(a, b, sizeof(*a));
    c800:	2207      	movs	r2, #7
    c802:	4631      	mov	r1, r6
    c804:	4620      	mov	r0, r4
    c806:	f01d f833 	bl	29870 <memcmp>
		if (!bt_addr_le_cmp(&keys->addr, addr)) {
    c80a:	2800      	cmp	r0, #0
    c80c:	d0f0      	beq.n	c7f0 <bt_keys_get_addr+0xc>
		if (!bt_addr_le_cmp(&keys->addr, BT_ADDR_LE_ANY)) {
    c80e:	2300      	movs	r3, #0
    c810:	9300      	str	r3, [sp, #0]
    c812:	f8cd 3003 	str.w	r3, [sp, #3]
    c816:	2207      	movs	r2, #7
    c818:	4669      	mov	r1, sp
    c81a:	4620      	mov	r0, r4
    c81c:	f01d f828 	bl	29870 <memcmp>
    c820:	b108      	cbz	r0, c826 <bt_keys_get_addr+0x42>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c822:	3501      	adds	r5, #1
    c824:	e7e2      	b.n	c7ec <bt_keys_get_addr+0x8>
	memcpy(dst, src, sizeof(*dst));
    c826:	2207      	movs	r2, #7
    c828:	4631      	mov	r1, r6
    c82a:	4620      	mov	r0, r4
    c82c:	f7f3 fd48 	bl	2c0 <memcpy>
			return keys;
    c830:	e7de      	b.n	c7f0 <bt_keys_get_addr+0xc>
    c832:	bf00      	nop
    c834:	20000a40 	.word	0x20000a40

0000c838 <bt_keys_find>:
		}
	}
}

struct bt_keys *bt_keys_find(int type, const bt_addr_le_t *addr)
{
    c838:	b570      	push	{r4, r5, r6, lr}
    c83a:	4605      	mov	r5, r0
    c83c:	460e      	mov	r6, r1
	int i;

	BT_DBG("type %d %s", type, bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c83e:	2400      	movs	r4, #0
    c840:	b10c      	cbz	r4, c846 <bt_keys_find+0xe>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c842:	2000      	movs	r0, #0
}
    c844:	bd70      	pop	{r4, r5, r6, pc}
		if ((key_pool[i].keys & type) &&
    c846:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c84a:	011a      	lsls	r2, r3, #4
    c84c:	4b0b      	ldr	r3, [pc, #44]	; (c87c <bt_keys_find+0x44>)
    c84e:	4413      	add	r3, r2
    c850:	899b      	ldrh	r3, [r3, #12]
    c852:	422b      	tst	r3, r5
    c854:	d101      	bne.n	c85a <bt_keys_find+0x22>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c856:	3401      	adds	r4, #1
    c858:	e7f2      	b.n	c840 <bt_keys_find+0x8>
		    !bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c85a:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c85e:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c860:	2207      	movs	r2, #7
    c862:	4631      	mov	r1, r6
    c864:	4805      	ldr	r0, [pc, #20]	; (c87c <bt_keys_find+0x44>)
    c866:	4418      	add	r0, r3
    c868:	f01d f802 	bl	29870 <memcmp>
		if ((key_pool[i].keys & type) &&
    c86c:	2800      	cmp	r0, #0
    c86e:	d1f2      	bne.n	c856 <bt_keys_find+0x1e>
			return &key_pool[i];
    c870:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c874:	0123      	lsls	r3, r4, #4
    c876:	4801      	ldr	r0, [pc, #4]	; (c87c <bt_keys_find+0x44>)
    c878:	4418      	add	r0, r3
    c87a:	bd70      	pop	{r4, r5, r6, pc}
    c87c:	20000a40 	.word	0x20000a40

0000c880 <bt_keys_find_irk>:

	return keys;
}

struct bt_keys *bt_keys_find_irk(const bt_addr_le_t *addr)
{
    c880:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	if (addr->type != BT_ADDR_LE_RANDOM) {
    c882:	7803      	ldrb	r3, [r0, #0]
    c884:	2b01      	cmp	r3, #1
    c886:	d004      	beq.n	c892 <bt_keys_find_irk+0x12>
		return false;
    c888:	2300      	movs	r3, #0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	if (!bt_addr_le_is_rpa(addr)) {
    c88a:	b153      	cbz	r3, c8a2 <bt_keys_find_irk+0x22>
    c88c:	4605      	mov	r5, r0
    c88e:	2400      	movs	r4, #0
    c890:	e00a      	b.n	c8a8 <bt_keys_find_irk+0x28>
	return BT_ADDR_IS_RPA(&addr->a);
    c892:	7983      	ldrb	r3, [r0, #6]
    c894:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
    c898:	2b40      	cmp	r3, #64	; 0x40
    c89a:	bf14      	ite	ne
    c89c:	2300      	movne	r3, #0
    c89e:	2301      	moveq	r3, #1
    c8a0:	e7f3      	b.n	c88a <bt_keys_find_irk+0xa>
		return NULL;
    c8a2:	2000      	movs	r0, #0
    c8a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c8a6:	3401      	adds	r4, #1
    c8a8:	b9c4      	cbnz	r4, c8dc <bt_keys_find_irk+0x5c>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c8aa:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c8ae:	011a      	lsls	r2, r3, #4
    c8b0:	4b1e      	ldr	r3, [pc, #120]	; (c92c <bt_keys_find_irk+0xac>)
    c8b2:	4413      	add	r3, r2
    c8b4:	899b      	ldrh	r3, [r3, #12]
    c8b6:	f013 0f02 	tst.w	r3, #2
    c8ba:	d0f4      	beq.n	c8a6 <bt_keys_find_irk+0x26>
			continue;
		}

		if (!bt_addr_cmp(&addr->a, &key_pool[i].irk.rpa)) {
    c8bc:	4611      	mov	r1, r2
    c8be:	3140      	adds	r1, #64	; 0x40
	return memcmp(a, b, sizeof(*a));
    c8c0:	2206      	movs	r2, #6
    c8c2:	4b1a      	ldr	r3, [pc, #104]	; (c92c <bt_keys_find_irk+0xac>)
    c8c4:	4419      	add	r1, r3
    c8c6:	1c68      	adds	r0, r5, #1
    c8c8:	f01c ffd2 	bl	29870 <memcmp>
    c8cc:	2800      	cmp	r0, #0
    c8ce:	d1ea      	bne.n	c8a6 <bt_keys_find_irk+0x26>
			BT_DBG("cached RPA %s for %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));
			return &key_pool[i];
    c8d0:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c8d4:	0123      	lsls	r3, r4, #4
    c8d6:	4815      	ldr	r0, [pc, #84]	; (c92c <bt_keys_find_irk+0xac>)
    c8d8:	4418      	add	r0, r3
    c8da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c8dc:	2400      	movs	r4, #0
    c8de:	e000      	b.n	c8e2 <bt_keys_find_irk+0x62>
		}
	}

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c8e0:	3401      	adds	r4, #1
    c8e2:	bb04      	cbnz	r4, c926 <bt_keys_find_irk+0xa6>
		if (!(key_pool[i].keys & BT_KEYS_IRK)) {
    c8e4:	eb04 03c4 	add.w	r3, r4, r4, lsl #3
    c8e8:	011a      	lsls	r2, r3, #4
    c8ea:	4b10      	ldr	r3, [pc, #64]	; (c92c <bt_keys_find_irk+0xac>)
    c8ec:	4413      	add	r3, r2
    c8ee:	899b      	ldrh	r3, [r3, #12]
    c8f0:	f013 0f02 	tst.w	r3, #2
    c8f4:	d0f4      	beq.n	c8e0 <bt_keys_find_irk+0x60>
			continue;
		}

		if (bt_rpa_irk_matches(key_pool[i].irk.val, &addr->a)) {
    c8f6:	4610      	mov	r0, r2
    c8f8:	3030      	adds	r0, #48	; 0x30
    c8fa:	1c6e      	adds	r6, r5, #1
    c8fc:	4631      	mov	r1, r6
    c8fe:	4b0b      	ldr	r3, [pc, #44]	; (c92c <bt_keys_find_irk+0xac>)
    c900:	4418      	add	r0, r3
    c902:	f7f7 f987 	bl	3c14 <bt_rpa_irk_matches>
    c906:	2800      	cmp	r0, #0
    c908:	d0ea      	beq.n	c8e0 <bt_keys_find_irk+0x60>
			BT_DBG("RPA %s matches %s",
			       bt_addr_str(&key_pool[i].irk.rpa),
			       bt_addr_le_str(&key_pool[i].addr));

			bt_addr_copy(&key_pool[i].irk.rpa, &addr->a);
    c90a:	4d08      	ldr	r5, [pc, #32]	; (c92c <bt_keys_find_irk+0xac>)
    c90c:	00e7      	lsls	r7, r4, #3
    c90e:	193a      	adds	r2, r7, r4
    c910:	0113      	lsls	r3, r2, #4
    c912:	3340      	adds	r3, #64	; 0x40
	memcpy(dst, src, sizeof(*dst));
    c914:	2206      	movs	r2, #6
    c916:	4631      	mov	r1, r6
    c918:	18e8      	adds	r0, r5, r3
    c91a:	f7f3 fcd1 	bl	2c0 <memcpy>

			return &key_pool[i];
    c91e:	443c      	add	r4, r7
    c920:	0120      	lsls	r0, r4, #4
    c922:	4428      	add	r0, r5
    c924:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	BT_DBG("No IRK for %s", bt_addr_le_str(addr));

	return NULL;
    c926:	2000      	movs	r0, #0
}
    c928:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    c92a:	bf00      	nop
    c92c:	20000a40 	.word	0x20000a40

0000c930 <bt_keys_find_addr>:

struct bt_keys *bt_keys_find_addr(const bt_addr_le_t *addr)
{
    c930:	b538      	push	{r3, r4, r5, lr}
    c932:	4605      	mov	r5, r0
	int i;

	BT_DBG("%s", bt_addr_le_str(addr));

	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c934:	2400      	movs	r4, #0
    c936:	b10c      	cbz	r4, c93c <bt_keys_find_addr+0xc>
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
			return &key_pool[i];
		}
	}

	return NULL;
    c938:	2000      	movs	r0, #0
}
    c93a:	bd38      	pop	{r3, r4, r5, pc}
		if (!bt_addr_le_cmp(&key_pool[i].addr, addr)) {
    c93c:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    c940:	0113      	lsls	r3, r2, #4
	return memcmp(a, b, sizeof(*a));
    c942:	2207      	movs	r2, #7
    c944:	4629      	mov	r1, r5
    c946:	4806      	ldr	r0, [pc, #24]	; (c960 <bt_keys_find_addr+0x30>)
    c948:	4418      	add	r0, r3
    c94a:	f01c ff91 	bl	29870 <memcmp>
    c94e:	b108      	cbz	r0, c954 <bt_keys_find_addr+0x24>
	for (i = 0; i < ARRAY_SIZE(key_pool); i++) {
    c950:	3401      	adds	r4, #1
    c952:	e7f0      	b.n	c936 <bt_keys_find_addr+0x6>
			return &key_pool[i];
    c954:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    c958:	0123      	lsls	r3, r4, #4
    c95a:	4801      	ldr	r0, [pc, #4]	; (c960 <bt_keys_find_addr+0x30>)
    c95c:	4418      	add	r0, r3
    c95e:	bd38      	pop	{r3, r4, r5, pc}
    c960:	20000a40 	.word	0x20000a40

0000c964 <bt_keys_add_type>:

void bt_keys_add_type(struct bt_keys *keys, int type)
{
	keys->keys |= type;
    c964:	8983      	ldrh	r3, [r0, #12]
    c966:	4319      	orrs	r1, r3
    c968:	8181      	strh	r1, [r0, #12]
    c96a:	4770      	bx	lr

0000c96c <bt_keys_get_type>:
{
    c96c:	b570      	push	{r4, r5, r6, lr}
    c96e:	4606      	mov	r6, r0
    c970:	460d      	mov	r5, r1
	keys = bt_keys_find(type, addr);
    c972:	f7ff ff61 	bl	c838 <bt_keys_find>
	if (keys) {
    c976:	4604      	mov	r4, r0
    c978:	b108      	cbz	r0, c97e <bt_keys_get_type+0x12>
}
    c97a:	4620      	mov	r0, r4
    c97c:	bd70      	pop	{r4, r5, r6, pc}
	keys = bt_keys_get_addr(addr);
    c97e:	4628      	mov	r0, r5
    c980:	f7ff ff30 	bl	c7e4 <bt_keys_get_addr>
	if (!keys) {
    c984:	4604      	mov	r4, r0
    c986:	2800      	cmp	r0, #0
    c988:	d0f7      	beq.n	c97a <bt_keys_get_type+0xe>
	bt_keys_add_type(keys, type);
    c98a:	4631      	mov	r1, r6
    c98c:	f7ff ffea 	bl	c964 <bt_keys_add_type>
	return keys;
    c990:	e7f3      	b.n	c97a <bt_keys_get_type+0xe>

0000c992 <bt_keys_clear>:
}

void bt_keys_clear(struct bt_keys *keys)
{
    c992:	b508      	push	{r3, lr}
	BT_DBG("keys for %s", bt_addr_le_str(&keys->addr));

	memset(keys, 0, sizeof(*keys));
    c994:	2290      	movs	r2, #144	; 0x90
    c996:	2100      	movs	r1, #0
    c998:	f01c fffe 	bl	29998 <memset>
    c99c:	bd08      	pop	{r3, pc}

0000c99e <status_cmd_handle>:
}
    c99e:	f06f 0015 	mvn.w	r0, #21
    c9a2:	4770      	bx	lr

0000c9a4 <evt_create>:
{
    c9a4:	b538      	push	{r3, r4, r5, lr}
    c9a6:	460d      	mov	r5, r1
    c9a8:	4614      	mov	r4, r2
	hdr = net_buf_add(buf, sizeof(*hdr));
    c9aa:	2102      	movs	r1, #2
    c9ac:	3008      	adds	r0, #8
    c9ae:	f00d fd21 	bl	1a3f4 <net_buf_simple_add>
	hdr->evt = evt;
    c9b2:	7005      	strb	r5, [r0, #0]
	hdr->len = len;
    c9b4:	7044      	strb	r4, [r0, #1]
    c9b6:	bd38      	pop	{r3, r4, r5, pc}

0000c9b8 <cmd_status>:
{
    c9b8:	b538      	push	{r3, r4, r5, lr}
    c9ba:	4605      	mov	r5, r0
	buf = bt_buf_get_cmd_complete(K_FOREVER);
    c9bc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    c9c0:	f7f9 fb5e 	bl	6080 <bt_buf_get_cmd_complete>
    c9c4:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_CMD_STATUS, sizeof(*cs));
    c9c6:	2204      	movs	r2, #4
    c9c8:	210f      	movs	r1, #15
    c9ca:	f7ff ffeb 	bl	c9a4 <evt_create>
	cs = net_buf_add(buf, sizeof(*cs));
    c9ce:	2104      	movs	r1, #4
    c9d0:	f104 0008 	add.w	r0, r4, #8
    c9d4:	f00d fd0e 	bl	1a3f4 <net_buf_simple_add>
	cs->status = status;
    c9d8:	7005      	strb	r5, [r0, #0]
	cs->ncmd = 1;
    c9da:	2301      	movs	r3, #1
    c9dc:	7043      	strb	r3, [r0, #1]
	cs->opcode = sys_cpu_to_le16(_opcode);
    c9de:	4b02      	ldr	r3, [pc, #8]	; (c9e8 <cmd_status+0x30>)
    c9e0:	881b      	ldrh	r3, [r3, #0]
    c9e2:	8043      	strh	r3, [r0, #2]
}
    c9e4:	4620      	mov	r0, r4
    c9e6:	bd38      	pop	{r3, r4, r5, pc}
    c9e8:	20000ad0 	.word	0x20000ad0

0000c9ec <disconnect>:
{
    c9ec:	b510      	push	{r4, lr}
    c9ee:	460c      	mov	r4, r1
	struct bt_hci_cp_disconnect *cmd = (void *)buf->data;
    c9f0:	6883      	ldr	r3, [r0, #8]
	status = ll_terminate_ind_send(handle, cmd->reason);
    c9f2:	7899      	ldrb	r1, [r3, #2]
    c9f4:	8818      	ldrh	r0, [r3, #0]
    c9f6:	f00b f966 	bl	17cc6 <ll_terminate_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    c9fa:	b100      	cbz	r0, c9fe <disconnect+0x12>
    c9fc:	200c      	movs	r0, #12
    c9fe:	f7ff ffdb 	bl	c9b8 <cmd_status>
    ca02:	6020      	str	r0, [r4, #0]
    ca04:	bd10      	pop	{r4, pc}
	...

0000ca08 <cmd_complete>:
{
    ca08:	b538      	push	{r3, r4, r5, lr}
    ca0a:	4604      	mov	r4, r0
    ca0c:	460d      	mov	r5, r1
	*buf = bt_buf_get_cmd_complete(K_FOREVER);
    ca0e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    ca12:	f7f9 fb35 	bl	6080 <bt_buf_get_cmd_complete>
    ca16:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_CMD_COMPLETE, sizeof(*cc) + plen);
    ca18:	1cea      	adds	r2, r5, #3
    ca1a:	b2d2      	uxtb	r2, r2
    ca1c:	210e      	movs	r1, #14
    ca1e:	f7ff ffc1 	bl	c9a4 <evt_create>
	cc = net_buf_add(*buf, sizeof(*cc));
    ca22:	6820      	ldr	r0, [r4, #0]
    ca24:	2103      	movs	r1, #3
    ca26:	3008      	adds	r0, #8
    ca28:	f00d fce4 	bl	1a3f4 <net_buf_simple_add>
	cc->ncmd = 1;
    ca2c:	2301      	movs	r3, #1
    ca2e:	7003      	strb	r3, [r0, #0]
	cc->opcode = sys_cpu_to_le16(_opcode);
    ca30:	4b04      	ldr	r3, [pc, #16]	; (ca44 <cmd_complete+0x3c>)
    ca32:	881b      	ldrh	r3, [r3, #0]
    ca34:	f8a0 3001 	strh.w	r3, [r0, #1]
	return net_buf_add(*buf, plen);
    ca38:	6820      	ldr	r0, [r4, #0]
    ca3a:	4629      	mov	r1, r5
    ca3c:	3008      	adds	r0, #8
    ca3e:	f00d fcd9 	bl	1a3f4 <net_buf_simple_add>
}
    ca42:	bd38      	pop	{r3, r4, r5, pc}
    ca44:	20000ad0 	.word	0x20000ad0

0000ca48 <set_event_mask_page_2>:
{
    ca48:	b570      	push	{r4, r5, r6, lr}
    ca4a:	460e      	mov	r6, r1
	struct bt_hci_cp_set_event_mask_page_2 *cmd = (void *)buf->data;
    ca4c:	6883      	ldr	r3, [r0, #8]
	return ((u16_t)src[1] << 8) | src[0];
    ca4e:	79da      	ldrb	r2, [r3, #7]
    ca50:	7999      	ldrb	r1, [r3, #6]
    ca52:	ea41 2102 	orr.w	r1, r1, r2, lsl #8
    ca56:	7958      	ldrb	r0, [r3, #5]
    ca58:	791a      	ldrb	r2, [r3, #4]
    ca5a:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ca5e:	2400      	movs	r4, #0
    ca60:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
	return ((u16_t)src[1] << 8) | src[0];
    ca64:	78d9      	ldrb	r1, [r3, #3]
    ca66:	789a      	ldrb	r2, [r3, #2]
    ca68:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
    ca6c:	7859      	ldrb	r1, [r3, #1]
    ca6e:	781b      	ldrb	r3, [r3, #0]
    ca70:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_le16(&src[2]) << 16) | sys_get_le16(&src[0]);
    ca74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	return ((u64_t)sys_get_le32(&src[4]) << 32) | sys_get_le32(&src[0]);
    ca78:	ea44 0003 	orr.w	r0, r4, r3
    ca7c:	4629      	mov	r1, r5
	event_mask_page_2 = sys_get_le64(cmd->events_page_2);
    ca7e:	4b04      	ldr	r3, [pc, #16]	; (ca90 <set_event_mask_page_2+0x48>)
    ca80:	e9c3 0100 	strd	r0, r1, [r3]
	ccst = cmd_complete(evt, sizeof(*ccst));
    ca84:	2101      	movs	r1, #1
    ca86:	4630      	mov	r0, r6
    ca88:	f7ff ffbe 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    ca8c:	7004      	strb	r4, [r0, #0]
    ca8e:	bd70      	pop	{r4, r5, r6, pc}
    ca90:	20000b60 	.word	0x20000b60

0000ca94 <read_local_version_info>:
{
    ca94:	b508      	push	{r3, lr}
    ca96:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ca98:	2109      	movs	r1, #9
    ca9a:	f7ff ffb5 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    ca9e:	2300      	movs	r3, #0
    caa0:	7003      	strb	r3, [r0, #0]
	rp->hci_version = BT_HCI_VERSION_5_0;
    caa2:	2209      	movs	r2, #9
    caa4:	7042      	strb	r2, [r0, #1]
	rp->hci_revision = sys_cpu_to_le16(0);
    caa6:	7083      	strb	r3, [r0, #2]
    caa8:	70c3      	strb	r3, [r0, #3]
	rp->lmp_version = RADIO_BLE_VERSION_NUMBER;
    caaa:	7102      	strb	r2, [r0, #4]
	rp->manufacturer = sys_cpu_to_le16(RADIO_BLE_COMPANY_ID);
    caac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    cab0:	7143      	strb	r3, [r0, #5]
    cab2:	7183      	strb	r3, [r0, #6]
	rp->lmp_subversion = sys_cpu_to_le16(RADIO_BLE_SUB_VERSION_NUMBER);
    cab4:	71c3      	strb	r3, [r0, #7]
    cab6:	7203      	strb	r3, [r0, #8]
    cab8:	bd08      	pop	{r3, pc}

0000caba <le_read_buffer_size>:
{
    caba:	b508      	push	{r3, lr}
    cabc:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cabe:	2104      	movs	r1, #4
    cac0:	f7ff ffa2 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cac4:	2300      	movs	r3, #0
    cac6:	7003      	strb	r3, [r0, #0]
	rp->le_max_len = sys_cpu_to_le16(RADIO_PACKET_TX_DATA_SIZE);
    cac8:	221b      	movs	r2, #27
    caca:	7042      	strb	r2, [r0, #1]
    cacc:	7083      	strb	r3, [r0, #2]
	rp->le_max_num = RADIO_PACKET_COUNT_TX_MAX;
    cace:	2302      	movs	r3, #2
    cad0:	70c3      	strb	r3, [r0, #3]
    cad2:	bd08      	pop	{r3, pc}

0000cad4 <le_read_supp_states>:
{
    cad4:	b508      	push	{r3, lr}
    cad6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cad8:	2109      	movs	r1, #9
    cada:	f7ff ff95 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cade:	2200      	movs	r2, #0
    cae0:	7002      	strb	r2, [r0, #0]
	dst[0] = val;
    cae2:	23ff      	movs	r3, #255	; 0xff
    cae4:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    cae6:	7083      	strb	r3, [r0, #2]
	dst[0] = val;
    cae8:	213f      	movs	r1, #63	; 0x3f
    caea:	70c1      	strb	r1, [r0, #3]
	dst[1] = val >> 8;
    caec:	7103      	strb	r3, [r0, #4]
	dst[0] = val;
    caee:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    caf0:	2303      	movs	r3, #3
    caf2:	7183      	strb	r3, [r0, #6]
	dst[0] = val;
    caf4:	71c2      	strb	r2, [r0, #7]
	dst[1] = val >> 8;
    caf6:	7202      	strb	r2, [r0, #8]
    caf8:	bd08      	pop	{r3, pc}

0000cafa <le_read_adv_chan_tx_power>:
{
    cafa:	b508      	push	{r3, lr}
    cafc:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cafe:	2102      	movs	r1, #2
    cb00:	f7ff ff82 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cb04:	2300      	movs	r3, #0
    cb06:	7003      	strb	r3, [r0, #0]
	rp->tx_power_level = 0;
    cb08:	7043      	strb	r3, [r0, #1]
    cb0a:	bd08      	pop	{r3, pc}

0000cb0c <vs_read_version_info>:
{
    cb0c:	b508      	push	{r3, lr}
    cb0e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cb10:	210d      	movs	r1, #13
    cb12:	f7ff ff79 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cb16:	2300      	movs	r3, #0
    cb18:	7003      	strb	r3, [r0, #0]
	rp->hw_platform = BT_HCI_VS_HW_PLAT;
    cb1a:	2202      	movs	r2, #2
    cb1c:	7042      	strb	r2, [r0, #1]
    cb1e:	7083      	strb	r3, [r0, #2]
	rp->hw_variant = BT_HCI_VS_HW_VAR;
    cb20:	70c2      	strb	r2, [r0, #3]
    cb22:	7103      	strb	r3, [r0, #4]
	rp->fw_variant = 0;
    cb24:	7143      	strb	r3, [r0, #5]
	rp->fw_version = (KERNEL_VERSION_MAJOR & 0xff);
    cb26:	2201      	movs	r2, #1
    cb28:	7182      	strb	r2, [r0, #6]
	rp->fw_revision = KERNEL_VERSION_MINOR;
    cb2a:	2209      	movs	r2, #9
    cb2c:	71c2      	strb	r2, [r0, #7]
    cb2e:	7203      	strb	r3, [r0, #8]
	rp->fw_build = (KERNEL_PATCHLEVEL & 0xffff);
    cb30:	2263      	movs	r2, #99	; 0x63
    cb32:	7242      	strb	r2, [r0, #9]
    cb34:	7283      	strb	r3, [r0, #10]
    cb36:	72c3      	strb	r3, [r0, #11]
    cb38:	7303      	strb	r3, [r0, #12]
    cb3a:	bd08      	pop	{r3, pc}

0000cb3c <meta_evt>:
{
    cb3c:	b570      	push	{r4, r5, r6, lr}
    cb3e:	4604      	mov	r4, r0
    cb40:	460e      	mov	r6, r1
    cb42:	4615      	mov	r5, r2
	evt_create(buf, BT_HCI_EVT_LE_META_EVENT, sizeof(*me) + melen);
    cb44:	3201      	adds	r2, #1
    cb46:	b2d2      	uxtb	r2, r2
    cb48:	213e      	movs	r1, #62	; 0x3e
    cb4a:	f7ff ff2b 	bl	c9a4 <evt_create>
	me = net_buf_add(buf, sizeof(*me));
    cb4e:	3408      	adds	r4, #8
    cb50:	2101      	movs	r1, #1
    cb52:	4620      	mov	r0, r4
    cb54:	f00d fc4e 	bl	1a3f4 <net_buf_simple_add>
	me->subevent = subevt;
    cb58:	7006      	strb	r6, [r0, #0]
	return net_buf_add(buf, melen);
    cb5a:	4629      	mov	r1, r5
    cb5c:	4620      	mov	r0, r4
    cb5e:	f00d fc49 	bl	1a3f4 <net_buf_simple_add>
}
    cb62:	bd70      	pop	{r4, r5, r6, pc}

0000cb64 <le_chan_sel_algo>:
{
    cb64:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cb66:	4b0f      	ldr	r3, [pc, #60]	; (cba4 <le_chan_sel_algo+0x40>)
    cb68:	e9d3 4500 	ldrd	r4, r5, [r3]
    cb6c:	2400      	movs	r4, #0
    cb6e:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    cb72:	ea54 0305 	orrs.w	r3, r4, r5
    cb76:	d008      	beq.n	cb8a <le_chan_sel_algo+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_CHAN_SEL_ALGO)) {
    cb78:	4b0b      	ldr	r3, [pc, #44]	; (cba8 <le_chan_sel_algo+0x44>)
    cb7a:	e9d3 4500 	ldrd	r4, r5, [r3]
    cb7e:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
    cb82:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    cb84:	ea54 0305 	orrs.w	r3, r4, r5
    cb88:	d100      	bne.n	cb8c <le_chan_sel_algo+0x28>
    cb8a:	bd38      	pop	{r3, r4, r5, pc}
    cb8c:	4613      	mov	r3, r2
    cb8e:	460d      	mov	r5, r1
    cb90:	4604      	mov	r4, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_CHAN_SEL_ALGO, sizeof(*sep));
    cb92:	2203      	movs	r2, #3
    cb94:	2114      	movs	r1, #20
    cb96:	4618      	mov	r0, r3
    cb98:	f7ff ffd0 	bl	cb3c <meta_evt>
	sep->handle = sys_cpu_to_le16(handle);
    cb9c:	8005      	strh	r5, [r0, #0]
	sep->chan_sel_algo = radio_le_chan_sel_algo->chan_sel_algo;
    cb9e:	78e3      	ldrb	r3, [r4, #3]
    cba0:	7083      	strb	r3, [r0, #2]
    cba2:	e7f2      	b.n	cb8a <le_chan_sel_algo+0x26>
    cba4:	2000bba8 	.word	0x2000bba8
    cba8:	2000bbb0 	.word	0x2000bbb0

0000cbac <disconn_complete>:
{
    cbac:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_DISCONN_COMPLETE)) {
    cbae:	4b11      	ldr	r3, [pc, #68]	; (cbf4 <disconn_complete+0x48>)
    cbb0:	e9d3 4500 	ldrd	r4, r5, [r3]
    cbb4:	f004 0410 	and.w	r4, r4, #16
    cbb8:	2500      	movs	r5, #0
    cbba:	ea54 0305 	orrs.w	r3, r4, r5
    cbbe:	d100      	bne.n	cbc2 <disconn_complete+0x16>
    cbc0:	bd70      	pop	{r4, r5, r6, pc}
    cbc2:	4614      	mov	r4, r2
    cbc4:	460e      	mov	r6, r1
    cbc6:	4605      	mov	r5, r0
	evt_create(buf, BT_HCI_EVT_DISCONN_COMPLETE, sizeof(*ep));
    cbc8:	2204      	movs	r2, #4
    cbca:	2105      	movs	r1, #5
    cbcc:	4620      	mov	r0, r4
    cbce:	f7ff fee9 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cbd2:	2104      	movs	r1, #4
    cbd4:	f104 0008 	add.w	r0, r4, #8
    cbd8:	f00d fc0c 	bl	1a3f4 <net_buf_simple_add>
	ep->status = 0x00;
    cbdc:	2300      	movs	r3, #0
    cbde:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cbe0:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->reason = *((u8_t *)pdu_data);
    cbe4:	782b      	ldrb	r3, [r5, #0]
    cbe6:	70c3      	strb	r3, [r0, #3]
	conn_count--;
    cbe8:	4a03      	ldr	r2, [pc, #12]	; (cbf8 <disconn_complete+0x4c>)
    cbea:	6813      	ldr	r3, [r2, #0]
    cbec:	3b01      	subs	r3, #1
    cbee:	6013      	str	r3, [r2, #0]
    cbf0:	e7e6      	b.n	cbc0 <disconn_complete+0x14>
    cbf2:	bf00      	nop
    cbf4:	2000bba8 	.word	0x2000bba8
    cbf8:	20000ad4 	.word	0x20000ad4

0000cbfc <enc_refresh_complete>:
{
    cbfc:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_KEY_REFRESH_COMPLETE)) {
    cbfe:	4b0d      	ldr	r3, [pc, #52]	; (cc34 <enc_refresh_complete+0x38>)
    cc00:	e9d3 4500 	ldrd	r4, r5, [r3]
    cc04:	2400      	movs	r4, #0
    cc06:	f405 4500 	and.w	r5, r5, #32768	; 0x8000
    cc0a:	ea54 0305 	orrs.w	r3, r4, r5
    cc0e:	d100      	bne.n	cc12 <enc_refresh_complete+0x16>
    cc10:	bd38      	pop	{r3, r4, r5, pc}
    cc12:	4614      	mov	r4, r2
    cc14:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_ENCRYPT_KEY_REFRESH_COMPLETE, sizeof(*ep));
    cc16:	2203      	movs	r2, #3
    cc18:	2130      	movs	r1, #48	; 0x30
    cc1a:	4620      	mov	r0, r4
    cc1c:	f7ff fec2 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cc20:	2103      	movs	r1, #3
    cc22:	f104 0008 	add.w	r0, r4, #8
    cc26:	f00d fbe5 	bl	1a3f4 <net_buf_simple_add>
	ep->status = 0x00;
    cc2a:	2300      	movs	r3, #0
    cc2c:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cc2e:	f8a0 5001 	strh.w	r5, [r0, #1]
    cc32:	e7ed      	b.n	cc10 <enc_refresh_complete+0x14>
    cc34:	2000bba8 	.word	0x2000bba8

0000cc38 <auth_payload_timeout_exp>:
{
    cc38:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask_page_2 & BT_EVT_MASK_AUTH_PAYLOAD_TIMEOUT_EXP)) {
    cc3a:	4b0c      	ldr	r3, [pc, #48]	; (cc6c <auth_payload_timeout_exp+0x34>)
    cc3c:	e9d3 4500 	ldrd	r4, r5, [r3]
    cc40:	f404 0400 	and.w	r4, r4, #8388608	; 0x800000
    cc44:	2500      	movs	r5, #0
    cc46:	ea54 0305 	orrs.w	r3, r4, r5
    cc4a:	d100      	bne.n	cc4e <auth_payload_timeout_exp+0x16>
    cc4c:	bd38      	pop	{r3, r4, r5, pc}
    cc4e:	4614      	mov	r4, r2
    cc50:	460d      	mov	r5, r1
	evt_create(buf, BT_HCI_EVT_AUTH_PAYLOAD_TIMEOUT_EXP, sizeof(*ep));
    cc52:	2202      	movs	r2, #2
    cc54:	2157      	movs	r1, #87	; 0x57
    cc56:	4620      	mov	r0, r4
    cc58:	f7ff fea4 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cc5c:	2102      	movs	r1, #2
    cc5e:	f104 0008 	add.w	r0, r4, #8
    cc62:	f00d fbc7 	bl	1a3f4 <net_buf_simple_add>
	ep->handle = sys_cpu_to_le16(handle);
    cc66:	8005      	strh	r5, [r0, #0]
    cc68:	e7f0      	b.n	cc4c <auth_payload_timeout_exp+0x14>
    cc6a:	bf00      	nop
    cc6c:	20000b60 	.word	0x20000b60

0000cc70 <remote_version_info>:
{
    cc70:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_REMOTE_VERSION_INFO)) {
    cc72:	4b11      	ldr	r3, [pc, #68]	; (ccb8 <remote_version_info+0x48>)
    cc74:	e9d3 4500 	ldrd	r4, r5, [r3]
    cc78:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    cc7c:	2500      	movs	r5, #0
    cc7e:	ea54 0305 	orrs.w	r3, r4, r5
    cc82:	d100      	bne.n	cc86 <remote_version_info+0x16>
    cc84:	bd70      	pop	{r4, r5, r6, pc}
    cc86:	4615      	mov	r5, r2
    cc88:	460e      	mov	r6, r1
    cc8a:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_REMOTE_VERSION_INFO, sizeof(*ep));
    cc8c:	2208      	movs	r2, #8
    cc8e:	210c      	movs	r1, #12
    cc90:	4628      	mov	r0, r5
    cc92:	f7ff fe87 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cc96:	2108      	movs	r1, #8
    cc98:	1868      	adds	r0, r5, r1
    cc9a:	f00d fbab 	bl	1a3f4 <net_buf_simple_add>
	ep->status = 0x00;
    cc9e:	2300      	movs	r3, #0
    cca0:	7003      	strb	r3, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    cca2:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->version = ver_ind->version_number;
    cca6:	7923      	ldrb	r3, [r4, #4]
    cca8:	70c3      	strb	r3, [r0, #3]
	ep->manufacturer = sys_cpu_to_le16(ver_ind->company_id);
    ccaa:	f8b4 3005 	ldrh.w	r3, [r4, #5]
    ccae:	8083      	strh	r3, [r0, #4]
	ep->subversion = sys_cpu_to_le16(ver_ind->sub_version_number);
    ccb0:	f8b4 3007 	ldrh.w	r3, [r4, #7]
    ccb4:	80c3      	strh	r3, [r0, #6]
    ccb6:	e7e5      	b.n	cc84 <remote_version_info+0x14>
    ccb8:	2000bba8 	.word	0x2000bba8

0000ccbc <encrypt_change>:
{
    ccbc:	b570      	push	{r4, r5, r6, lr}
	if (!(event_mask & BT_EVT_MASK_ENCRYPT_CHANGE)) {
    ccbe:	4b0f      	ldr	r3, [pc, #60]	; (ccfc <encrypt_change+0x40>)
    ccc0:	e9d3 4500 	ldrd	r4, r5, [r3]
    ccc4:	f004 0480 	and.w	r4, r4, #128	; 0x80
    ccc8:	2500      	movs	r5, #0
    ccca:	ea54 0305 	orrs.w	r3, r4, r5
    ccce:	d100      	bne.n	ccd2 <encrypt_change+0x16>
    ccd0:	bd70      	pop	{r4, r5, r6, pc}
    ccd2:	4615      	mov	r5, r2
    ccd4:	460e      	mov	r6, r1
    ccd6:	4604      	mov	r4, r0
	evt_create(buf, BT_HCI_EVT_ENCRYPT_CHANGE, sizeof(*ep));
    ccd8:	2204      	movs	r2, #4
    ccda:	2108      	movs	r1, #8
    ccdc:	4628      	mov	r0, r5
    ccde:	f7ff fe61 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, sizeof(*ep));
    cce2:	2104      	movs	r1, #4
    cce4:	f105 0008 	add.w	r0, r5, #8
    cce8:	f00d fb84 	bl	1a3f4 <net_buf_simple_add>
	ep->status = err;
    ccec:	7004      	strb	r4, [r0, #0]
	ep->handle = sys_cpu_to_le16(handle);
    ccee:	f8a0 6001 	strh.w	r6, [r0, #1]
	ep->encrypt = !err ? 1 : 0;
    ccf2:	fab4 f384 	clz	r3, r4
    ccf6:	095b      	lsrs	r3, r3, #5
    ccf8:	70c3      	strb	r3, [r0, #3]
    ccfa:	e7e9      	b.n	ccd0 <encrypt_change+0x14>
    ccfc:	2000bba8 	.word	0x2000bba8

0000cd00 <read_remote_ver_info>:
{
    cd00:	b510      	push	{r4, lr}
    cd02:	460c      	mov	r4, r1
	struct bt_hci_cp_read_remote_version_info *cmd = (void *)buf->data;
    cd04:	6883      	ldr	r3, [r0, #8]
	status = ll_version_ind_send(handle);
    cd06:	8818      	ldrh	r0, [r3, #0]
    cd08:	f00a ffc7 	bl	17c9a <ll_version_ind_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    cd0c:	b100      	cbz	r0, cd10 <read_remote_ver_info+0x10>
    cd0e:	200c      	movs	r0, #12
    cd10:	f7ff fe52 	bl	c9b8 <cmd_status>
    cd14:	6020      	str	r0, [r4, #0]
    cd16:	bd10      	pop	{r4, pc}

0000cd18 <link_control_cmd_handle>:
{
    cd18:	b508      	push	{r3, lr}
    cd1a:	460b      	mov	r3, r1
	switch (ocf) {
    cd1c:	2806      	cmp	r0, #6
    cd1e:	d004      	beq.n	cd2a <link_control_cmd_handle+0x12>
    cd20:	281d      	cmp	r0, #29
    cd22:	d008      	beq.n	cd36 <link_control_cmd_handle+0x1e>
		return -EINVAL;
    cd24:	f06f 0015 	mvn.w	r0, #21
}
    cd28:	bd08      	pop	{r3, pc}
		disconnect(cmd, evt);
    cd2a:	4611      	mov	r1, r2
    cd2c:	4618      	mov	r0, r3
    cd2e:	f7ff fe5d 	bl	c9ec <disconnect>
	return 0;
    cd32:	2000      	movs	r0, #0
		break;
    cd34:	bd08      	pop	{r3, pc}
		read_remote_ver_info(cmd, evt);
    cd36:	4611      	mov	r1, r2
    cd38:	4618      	mov	r0, r3
    cd3a:	f7ff ffe1 	bl	cd00 <read_remote_ver_info>
	return 0;
    cd3e:	2000      	movs	r0, #0
		break;
    cd40:	bd08      	pop	{r3, pc}
	...

0000cd44 <reset>:
{
    cd44:	b538      	push	{r3, r4, r5, lr}
	dup_count = -1;
    cd46:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    cd4a:	4b0f      	ldr	r3, [pc, #60]	; (cd88 <reset+0x44>)
    cd4c:	601a      	str	r2, [r3, #0]
	event_mask = DEFAULT_EVENT_MASK;
    cd4e:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
    cd52:	f641 75ff 	movw	r5, #8191	; 0x1fff
    cd56:	4b0d      	ldr	r3, [pc, #52]	; (cd8c <reset+0x48>)
    cd58:	e9c3 4500 	strd	r4, r5, [r3]
	event_mask_page_2 = DEFAULT_EVENT_MASK_PAGE_2;
    cd5c:	2400      	movs	r4, #0
    cd5e:	2500      	movs	r5, #0
    cd60:	4b0b      	ldr	r3, [pc, #44]	; (cd90 <reset+0x4c>)
    cd62:	e9c3 4500 	strd	r4, r5, [r3]
	le_event_mask = DEFAULT_LE_EVENT_MASK;
    cd66:	241f      	movs	r4, #31
    cd68:	2500      	movs	r5, #0
    cd6a:	4b0a      	ldr	r3, [pc, #40]	; (cd94 <reset+0x50>)
    cd6c:	e9c3 4500 	strd	r4, r5, [r3]
	if (buf) {
    cd70:	b140      	cbz	r0, cd84 <reset+0x40>
    cd72:	460c      	mov	r4, r1
		ll_reset();
    cd74:	f00a fc8c 	bl	17690 <ll_reset>
		ccst = cmd_complete(evt, sizeof(*ccst));
    cd78:	2101      	movs	r1, #1
    cd7a:	4620      	mov	r0, r4
    cd7c:	f7ff fe44 	bl	ca08 <cmd_complete>
		ccst->status = 0x00;
    cd80:	2300      	movs	r3, #0
    cd82:	7003      	strb	r3, [r0, #0]
    cd84:	bd38      	pop	{r3, r4, r5, pc}
    cd86:	bf00      	nop
    cd88:	20000ad8 	.word	0x20000ad8
    cd8c:	2000bba8 	.word	0x2000bba8
    cd90:	20000b60 	.word	0x20000b60
    cd94:	2000bbb0 	.word	0x2000bbb0

0000cd98 <read_tx_power_level>:
{
    cd98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    cd9a:	460a      	mov	r2, r1
	struct bt_hci_cp_read_tx_power_level *cmd = (void *)buf->data;
    cd9c:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cd9e:	881d      	ldrh	r5, [r3, #0]
    cda0:	b2ae      	uxth	r6, r5
	type = cmd->type;
    cda2:	789f      	ldrb	r7, [r3, #2]
	rp = cmd_complete(evt, sizeof(*rp));
    cda4:	2104      	movs	r1, #4
    cda6:	4610      	mov	r0, r2
    cda8:	f7ff fe2e 	bl	ca08 <cmd_complete>
    cdac:	4604      	mov	r4, r0
	status = ll_tx_power_level_get(handle, type, &rp->tx_power_level);
    cdae:	1cc2      	adds	r2, r0, #3
    cdb0:	4639      	mov	r1, r7
    cdb2:	4630      	mov	r0, r6
    cdb4:	f00a ff9d 	bl	17cf2 <ll_tx_power_level_get>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cdb8:	b120      	cbz	r0, cdc4 <read_tx_power_level+0x2c>
    cdba:	2302      	movs	r3, #2
    cdbc:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cdbe:	f8a4 5001 	strh.w	r5, [r4, #1]
    cdc2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    cdc4:	2300      	movs	r3, #0
    cdc6:	e7f9      	b.n	cdbc <read_tx_power_level+0x24>

0000cdc8 <read_auth_payload_timeout>:
{
    cdc8:	b570      	push	{r4, r5, r6, lr}
    cdca:	b082      	sub	sp, #8
    cdcc:	460e      	mov	r6, r1
	struct bt_hci_cp_read_auth_payload_timeout *cmd = (void *)buf->data;
    cdce:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    cdd0:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_get(handle, &auth_payload_timeout);
    cdd2:	f10d 0106 	add.w	r1, sp, #6
    cdd6:	b2a0      	uxth	r0, r4
    cdd8:	f00a ff9a 	bl	17d10 <ll_apto_get>
    cddc:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    cdde:	2105      	movs	r1, #5
    cde0:	4630      	mov	r0, r6
    cde2:	f7ff fe11 	bl	ca08 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cde6:	b14d      	cbz	r5, cdfc <read_auth_payload_timeout+0x34>
    cde8:	230c      	movs	r3, #12
    cdea:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    cdec:	f8a0 4001 	strh.w	r4, [r0, #1]
	rp->auth_payload_timeout = sys_cpu_to_le16(auth_payload_timeout);
    cdf0:	f8bd 3006 	ldrh.w	r3, [sp, #6]
    cdf4:	f8a0 3003 	strh.w	r3, [r0, #3]
}
    cdf8:	b002      	add	sp, #8
    cdfa:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    cdfc:	2300      	movs	r3, #0
    cdfe:	e7f4      	b.n	cdea <read_auth_payload_timeout+0x22>

0000ce00 <write_auth_payload_timeout>:
{
    ce00:	b570      	push	{r4, r5, r6, lr}
    ce02:	460e      	mov	r6, r1
	struct bt_hci_cp_write_auth_payload_timeout *cmd = (void *)buf->data;
    ce04:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    ce06:	881c      	ldrh	r4, [r3, #0]
	status = ll_apto_set(handle, auth_payload_timeout);
    ce08:	8859      	ldrh	r1, [r3, #2]
    ce0a:	b2a0      	uxth	r0, r4
    ce0c:	f00a ff9c 	bl	17d48 <ll_apto_set>
    ce10:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    ce12:	2103      	movs	r1, #3
    ce14:	4630      	mov	r0, r6
    ce16:	f7ff fdf7 	bl	ca08 <cmd_complete>
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ce1a:	b125      	cbz	r5, ce26 <write_auth_payload_timeout+0x26>
    ce1c:	230c      	movs	r3, #12
    ce1e:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    ce20:	f8a0 4001 	strh.w	r4, [r0, #1]
    ce24:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    ce26:	2300      	movs	r3, #0
    ce28:	e7f9      	b.n	ce1e <write_auth_payload_timeout+0x1e>

0000ce2a <ctrl_bb_cmd_handle>:
{
    ce2a:	b508      	push	{r3, lr}
    ce2c:	460b      	mov	r3, r1
	switch (ocf) {
    ce2e:	282d      	cmp	r0, #45	; 0x2d
    ce30:	d01f      	beq.n	ce72 <ctrl_bb_cmd_handle+0x48>
    ce32:	d908      	bls.n	ce46 <ctrl_bb_cmd_handle+0x1c>
    ce34:	287b      	cmp	r0, #123	; 0x7b
    ce36:	d022      	beq.n	ce7e <ctrl_bb_cmd_handle+0x54>
    ce38:	287c      	cmp	r0, #124	; 0x7c
    ce3a:	d026      	beq.n	ce8a <ctrl_bb_cmd_handle+0x60>
    ce3c:	2863      	cmp	r0, #99	; 0x63
    ce3e:	d012      	beq.n	ce66 <ctrl_bb_cmd_handle+0x3c>
		return -EINVAL;
    ce40:	f06f 0015 	mvn.w	r0, #21
}
    ce44:	bd08      	pop	{r3, pc}
	switch (ocf) {
    ce46:	2801      	cmp	r0, #1
    ce48:	d007      	beq.n	ce5a <ctrl_bb_cmd_handle+0x30>
    ce4a:	2803      	cmp	r0, #3
    ce4c:	d1f8      	bne.n	ce40 <ctrl_bb_cmd_handle+0x16>
		reset(cmd, evt);
    ce4e:	4611      	mov	r1, r2
    ce50:	4618      	mov	r0, r3
    ce52:	f7ff ff77 	bl	cd44 <reset>
	return 0;
    ce56:	2000      	movs	r0, #0
		break;
    ce58:	bd08      	pop	{r3, pc}
		set_event_mask(cmd, evt);
    ce5a:	4611      	mov	r1, r2
    ce5c:	4618      	mov	r0, r3
    ce5e:	f7f7 fd13 	bl	4888 <set_event_mask>
	return 0;
    ce62:	2000      	movs	r0, #0
		break;
    ce64:	bd08      	pop	{r3, pc}
		set_event_mask_page_2(cmd, evt);
    ce66:	4611      	mov	r1, r2
    ce68:	4618      	mov	r0, r3
    ce6a:	f7ff fded 	bl	ca48 <set_event_mask_page_2>
	return 0;
    ce6e:	2000      	movs	r0, #0
		break;
    ce70:	bd08      	pop	{r3, pc}
		read_tx_power_level(cmd, evt);
    ce72:	4611      	mov	r1, r2
    ce74:	4618      	mov	r0, r3
    ce76:	f7ff ff8f 	bl	cd98 <read_tx_power_level>
	return 0;
    ce7a:	2000      	movs	r0, #0
		break;
    ce7c:	bd08      	pop	{r3, pc}
		read_auth_payload_timeout(cmd, evt);
    ce7e:	4611      	mov	r1, r2
    ce80:	4618      	mov	r0, r3
    ce82:	f7ff ffa1 	bl	cdc8 <read_auth_payload_timeout>
	return 0;
    ce86:	2000      	movs	r0, #0
		break;
    ce88:	bd08      	pop	{r3, pc}
		write_auth_payload_timeout(cmd, evt);
    ce8a:	4611      	mov	r1, r2
    ce8c:	4618      	mov	r0, r3
    ce8e:	f7ff ffb7 	bl	ce00 <write_auth_payload_timeout>
	return 0;
    ce92:	2000      	movs	r0, #0
		break;
    ce94:	bd08      	pop	{r3, pc}

0000ce96 <read_supported_commands>:
{
    ce96:	b510      	push	{r4, lr}
    ce98:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    ce9a:	2141      	movs	r1, #65	; 0x41
    ce9c:	f7ff fdb4 	bl	ca08 <cmd_complete>
    cea0:	4604      	mov	r4, r0
	rp->status = 0x00;
    cea2:	2100      	movs	r1, #0
    cea4:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cea8:	2240      	movs	r2, #64	; 0x40
    ceaa:	f01c fd75 	bl	29998 <memset>
	rp->commands[2] |= BIT(7);
    ceae:	78e3      	ldrb	r3, [r4, #3]
    ceb0:	f063 037f 	orn	r3, r3, #127	; 0x7f
    ceb4:	70e3      	strb	r3, [r4, #3]
	rp->commands[5] |= BIT(6) | BIT(7);
    ceb6:	79a3      	ldrb	r3, [r4, #6]
    ceb8:	f063 033f 	orn	r3, r3, #63	; 0x3f
    cebc:	71a3      	strb	r3, [r4, #6]
	rp->commands[10] |= BIT(2);
    cebe:	7ae3      	ldrb	r3, [r4, #11]
    cec0:	f043 0304 	orr.w	r3, r3, #4
    cec4:	72e3      	strb	r3, [r4, #11]
	rp->commands[14] |= BIT(3) | BIT(5);
    cec6:	7be3      	ldrb	r3, [r4, #15]
    cec8:	f043 0328 	orr.w	r3, r3, #40	; 0x28
    cecc:	73e3      	strb	r3, [r4, #15]
	rp->commands[15] |= BIT(1);
    cece:	7c23      	ldrb	r3, [r4, #16]
    ced0:	f043 0302 	orr.w	r3, r3, #2
    ced4:	7423      	strb	r3, [r4, #16]
	rp->commands[22] |= BIT(2);
    ced6:	7de3      	ldrb	r3, [r4, #23]
    ced8:	f043 0304 	orr.w	r3, r3, #4
    cedc:	75e3      	strb	r3, [r4, #23]
	rp->commands[25] |= BIT(0) | BIT(1) | BIT(2) | BIT(4);
    cede:	7ea2      	ldrb	r2, [r4, #26]
	rp->commands[28] |= BIT(3);
    cee0:	7f63      	ldrb	r3, [r4, #29]
	rp->commands[25] |= BIT(5) | BIT(6) | BIT(7);
    cee2:	f062 0208 	orn	r2, r2, #8
    cee6:	76a2      	strb	r2, [r4, #26]
	rp->commands[26] |= BIT(4) | BIT(5);
    cee8:	22ff      	movs	r2, #255	; 0xff
    ceea:	76e2      	strb	r2, [r4, #27]
	rp->commands[28] |= BIT(1) | BIT(2);
    ceec:	f043 030f 	orr.w	r3, r3, #15
    cef0:	7763      	strb	r3, [r4, #29]
	rp->commands[0] |= BIT(5);
    cef2:	7863      	ldrb	r3, [r4, #1]
    cef4:	f043 0320 	orr.w	r3, r3, #32
    cef8:	7063      	strb	r3, [r4, #1]
	rp->commands[27] |= BIT(2) | BIT(4) | BIT(5);
    cefa:	7722      	strb	r2, [r4, #28]
	rp->commands[33] |= BIT(4) | BIT(5);
    cefc:	f894 1022 	ldrb.w	r1, [r4, #34]	; 0x22
	rp->commands[32] |= BIT(4) | BIT(5);
    cf00:	f894 3021 	ldrb.w	r3, [r4, #33]	; 0x21
    cf04:	f043 0330 	orr.w	r3, r3, #48	; 0x30
    cf08:	f884 3021 	strb.w	r3, [r4, #33]	; 0x21
	rp->commands[34] |= BIT(3) | BIT(4) | BIT(5) | BIT(6) | BIT(7);
    cf0c:	f894 2023 	ldrb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(0) | BIT(1) | BIT(2);
    cf10:	f894 3024 	ldrb.w	r3, [r4, #36]	; 0x24
	rp->commands[39] |= BIT(2);
    cf14:	f894 0028 	ldrb.w	r0, [r4, #40]	; 0x28
    cf18:	f040 0004 	orr.w	r0, r0, #4
    cf1c:	f884 0028 	strb.w	r0, [r4, #40]	; 0x28
	rp->commands[33] |= BIT(6) | BIT(7);
    cf20:	f061 010f 	orn	r1, r1, #15
    cf24:	f884 1022 	strb.w	r1, [r4, #34]	; 0x22
	rp->commands[34] |= BIT(0);
    cf28:	f042 02f9 	orr.w	r2, r2, #249	; 0xf9
    cf2c:	f884 2023 	strb.w	r2, [r4, #35]	; 0x23
	rp->commands[35] |= BIT(3);
    cf30:	f043 030f 	orr.w	r3, r3, #15
    cf34:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	rp->commands[38] |= BIT(7);
    cf38:	f894 3027 	ldrb.w	r3, [r4, #39]	; 0x27
    cf3c:	f063 037f 	orn	r3, r3, #127	; 0x7f
    cf40:	f884 3027 	strb.w	r3, [r4, #39]	; 0x27
    cf44:	bd10      	pop	{r4, pc}

0000cf46 <read_local_features>:
{
    cf46:	b510      	push	{r4, lr}
    cf48:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf4a:	2109      	movs	r1, #9
    cf4c:	f7ff fd5c 	bl	ca08 <cmd_complete>
    cf50:	4604      	mov	r4, r0
	rp->status = 0x00;
    cf52:	2100      	movs	r1, #0
    cf54:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cf58:	2208      	movs	r2, #8
    cf5a:	f01c fd1d 	bl	29998 <memset>
	rp->features[4] = (1 << 5) | (1 << 6);
    cf5e:	2360      	movs	r3, #96	; 0x60
    cf60:	7163      	strb	r3, [r4, #5]
    cf62:	bd10      	pop	{r4, pc}

0000cf64 <le_read_local_features>:
{
    cf64:	b510      	push	{r4, lr}
    cf66:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf68:	2109      	movs	r1, #9
    cf6a:	f7ff fd4d 	bl	ca08 <cmd_complete>
    cf6e:	4604      	mov	r4, r0
	rp->status = 0x00;
    cf70:	2100      	movs	r1, #0
    cf72:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cf76:	2208      	movs	r2, #8
    cf78:	f01c fd0e 	bl	29998 <memset>
	rp->features[0] = RADIO_BLE_FEAT & 0xFF;
    cf7c:	23ff      	movs	r3, #255	; 0xff
    cf7e:	7063      	strb	r3, [r4, #1]
	rp->features[1] = (RADIO_BLE_FEAT >> 8)  & 0xFF;
    cf80:	2341      	movs	r3, #65	; 0x41
    cf82:	70a3      	strb	r3, [r4, #2]
	rp->features[2] = (RADIO_BLE_FEAT >> 16)  & 0xFF;
    cf84:	2301      	movs	r3, #1
    cf86:	70e3      	strb	r3, [r4, #3]
    cf88:	bd10      	pop	{r4, pc}

0000cf8a <vs_read_supported_commands>:
{
    cf8a:	b510      	push	{r4, lr}
    cf8c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cf8e:	2141      	movs	r1, #65	; 0x41
    cf90:	f7ff fd3a 	bl	ca08 <cmd_complete>
    cf94:	4604      	mov	r4, r0
	rp->status = 0x00;
    cf96:	2100      	movs	r1, #0
    cf98:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->commands[0], 0, sizeof(rp->commands));
    cf9c:	2240      	movs	r2, #64	; 0x40
    cf9e:	f01c fcfb 	bl	29998 <memset>
	rp->commands[0] |= BIT(0) | BIT(1) | BIT(2);
    cfa2:	7863      	ldrb	r3, [r4, #1]
	rp->commands[0] |= BIT(5) | BIT(7);
    cfa4:	f063 0358 	orn	r3, r3, #88	; 0x58
    cfa8:	7063      	strb	r3, [r4, #1]
	rp->commands[1] |= BIT(0) | BIT(1);
    cfaa:	78a3      	ldrb	r3, [r4, #2]
    cfac:	f043 0303 	orr.w	r3, r3, #3
    cfb0:	70a3      	strb	r3, [r4, #2]
    cfb2:	bd10      	pop	{r4, pc}

0000cfb4 <vs_read_supported_features>:
{
    cfb4:	b508      	push	{r3, lr}
    cfb6:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    cfb8:	2109      	movs	r1, #9
    cfba:	f7ff fd25 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cfbe:	2100      	movs	r1, #0
    cfc0:	f800 1b01 	strb.w	r1, [r0], #1
	memset(&rp->features[0], 0x00, sizeof(rp->features));
    cfc4:	2208      	movs	r2, #8
    cfc6:	f01c fce7 	bl	29998 <memset>
    cfca:	bd08      	pop	{r3, pc}

0000cfcc <vs_read_static_addrs>:
{
    cfcc:	b510      	push	{r4, lr}
    cfce:	4608      	mov	r0, r1
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    cfd0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cfd4:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
    cfd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    cfdc:	d00d      	beq.n	cffa <vs_read_static_addrs+0x2e>
	      (NRF_FICR->DEVICEADDRTYPE & 0x01)) {
    cfde:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cfe2:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cfe6:	f013 0f01 	tst.w	r3, #1
    cfea:	d110      	bne.n	d00e <vs_read_static_addrs+0x42>
	rp = cmd_complete(evt, sizeof(*rp));
    cfec:	2102      	movs	r1, #2
    cfee:	f7ff fd0b 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    cff2:	2300      	movs	r3, #0
    cff4:	7003      	strb	r3, [r0, #0]
	rp->num_addrs = 0;
    cff6:	7043      	strb	r3, [r0, #1]
    cff8:	bd10      	pop	{r4, pc}
	    ((NRF_FICR->DEVICEADDR[1] & UINT16_MAX) != UINT16_MAX)) &&
    cffa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    cffe:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
    d002:	b29b      	uxth	r3, r3
	if (((NRF_FICR->DEVICEADDR[0] != UINT32_MAX) ||
    d004:	f64f 72ff 	movw	r2, #65535	; 0xffff
    d008:	4293      	cmp	r3, r2
    d00a:	d1e8      	bne.n	cfde <vs_read_static_addrs+0x12>
    d00c:	e7ee      	b.n	cfec <vs_read_static_addrs+0x20>
		rp = cmd_complete(evt, sizeof(*rp) + sizeof(*addr));
    d00e:	2118      	movs	r1, #24
    d010:	f7ff fcfa 	bl	ca08 <cmd_complete>
		rp->status = 0x00;
    d014:	2100      	movs	r1, #0
    d016:	7001      	strb	r1, [r0, #0]
		rp->num_addrs = 1;
    d018:	2301      	movs	r3, #1
    d01a:	7043      	strb	r3, [r0, #1]
		sys_put_le32(NRF_FICR->DEVICEADDR[0], &addr->bdaddr.val[0]);
    d01c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d020:	f8d2 30a4 	ldr.w	r3, [r2, #164]	; 0xa4
	dst[0] = val;
    d024:	7083      	strb	r3, [r0, #2]
	dst[1] = val >> 8;
    d026:	f3c3 2407 	ubfx	r4, r3, #8, #8
    d02a:	70c4      	strb	r4, [r0, #3]
	sys_put_le16(val >> 16, &dst[2]);
    d02c:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d02e:	7103      	strb	r3, [r0, #4]
	dst[1] = val >> 8;
    d030:	0a1b      	lsrs	r3, r3, #8
    d032:	7143      	strb	r3, [r0, #5]
		sys_put_le16(NRF_FICR->DEVICEADDR[1] | 0x0200, &addr->bdaddr.val[4]);
    d034:	f8d2 30a8 	ldr.w	r3, [r2, #168]	; 0xa8
    d038:	f443 7300 	orr.w	r3, r3, #512	; 0x200
    d03c:	b29b      	uxth	r3, r3
	dst[0] = val;
    d03e:	7183      	strb	r3, [r0, #6]
	dst[1] = val >> 8;
    d040:	0a1b      	lsrs	r3, r3, #8
		BT_ADDR_SET_STATIC(&addr->bdaddr);
    d042:	f063 033f 	orn	r3, r3, #63	; 0x3f
    d046:	71c3      	strb	r3, [r0, #7]
		memset(addr->ir, 0x00, sizeof(addr->ir));
    d048:	2210      	movs	r2, #16
    d04a:	3008      	adds	r0, #8
    d04c:	f01c fca4 	bl	29998 <memset>
		return;
    d050:	bd10      	pop	{r4, pc}

0000d052 <vs_read_key_hierarchy_roots>:
{
    d052:	b510      	push	{r4, lr}
    d054:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d056:	2121      	movs	r1, #33	; 0x21
    d058:	f7ff fcd6 	bl	ca08 <cmd_complete>
    d05c:	4604      	mov	r4, r0
	rp->status = 0x00;
    d05e:	2300      	movs	r3, #0
    d060:	7003      	strb	r3, [r0, #0]
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d062:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d066:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
    d06a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d06e:	d03f      	beq.n	d0f0 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d070:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d074:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
	if ((NRF_FICR->IR[0] != UINT32_MAX) &&
    d078:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d07c:	d038      	beq.n	d0f0 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d07e:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d082:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
	    (NRF_FICR->IR[1] != UINT32_MAX) &&
    d086:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d08a:	d031      	beq.n	d0f0 <vs_read_key_hierarchy_roots+0x9e>
	    (NRF_FICR->IR[3] != UINT32_MAX)) {
    d08c:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d090:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
	    (NRF_FICR->IR[2] != UINT32_MAX) &&
    d094:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d098:	d02a      	beq.n	d0f0 <vs_read_key_hierarchy_roots+0x9e>
		sys_put_le32(NRF_FICR->IR[0], &rp->ir[0]);
    d09a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d09e:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
	dst[0] = val;
    d0a2:	7043      	strb	r3, [r0, #1]
	dst[1] = val >> 8;
    d0a4:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d0a8:	7081      	strb	r1, [r0, #2]
	sys_put_le16(val >> 16, &dst[2]);
    d0aa:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d0ac:	70c3      	strb	r3, [r0, #3]
	dst[1] = val >> 8;
    d0ae:	0a1b      	lsrs	r3, r3, #8
    d0b0:	7103      	strb	r3, [r0, #4]
		sys_put_le32(NRF_FICR->IR[1], &rp->ir[4]);
    d0b2:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
	dst[0] = val;
    d0b6:	7143      	strb	r3, [r0, #5]
	dst[1] = val >> 8;
    d0b8:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d0bc:	7181      	strb	r1, [r0, #6]
	sys_put_le16(val >> 16, &dst[2]);
    d0be:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d0c0:	71c3      	strb	r3, [r0, #7]
	dst[1] = val >> 8;
    d0c2:	0a1b      	lsrs	r3, r3, #8
    d0c4:	7203      	strb	r3, [r0, #8]
		sys_put_le32(NRF_FICR->IR[2], &rp->ir[8]);
    d0c6:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
	dst[0] = val;
    d0ca:	7243      	strb	r3, [r0, #9]
	dst[1] = val >> 8;
    d0cc:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d0d0:	7281      	strb	r1, [r0, #10]
	sys_put_le16(val >> 16, &dst[2]);
    d0d2:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d0d4:	72c3      	strb	r3, [r0, #11]
	dst[1] = val >> 8;
    d0d6:	0a1b      	lsrs	r3, r3, #8
    d0d8:	7303      	strb	r3, [r0, #12]
		sys_put_le32(NRF_FICR->IR[3], &rp->ir[12]);
    d0da:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
	dst[0] = val;
    d0de:	7343      	strb	r3, [r0, #13]
	dst[1] = val >> 8;
    d0e0:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d0e4:	7382      	strb	r2, [r0, #14]
	sys_put_le16(val >> 16, &dst[2]);
    d0e6:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d0e8:	73c3      	strb	r3, [r0, #15]
	dst[1] = val >> 8;
    d0ea:	0a1b      	lsrs	r3, r3, #8
    d0ec:	7403      	strb	r3, [r0, #16]
    d0ee:	e004      	b.n	d0fa <vs_read_key_hierarchy_roots+0xa8>
		memset(rp->ir, 0x00, sizeof(rp->ir));
    d0f0:	2210      	movs	r2, #16
    d0f2:	2100      	movs	r1, #0
    d0f4:	1c60      	adds	r0, r4, #1
    d0f6:	f01c fc4f 	bl	29998 <memset>
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d0fa:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d0fe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
    d102:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d106:	d040      	beq.n	d18a <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d108:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d10c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
	if ((NRF_FICR->ER[0] != UINT32_MAX) &&
    d110:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d114:	d039      	beq.n	d18a <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d116:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d11a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
	    (NRF_FICR->ER[1] != UINT32_MAX) &&
    d11e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d122:	d032      	beq.n	d18a <vs_read_key_hierarchy_roots+0x138>
	    (NRF_FICR->ER[3] != UINT32_MAX)) {
    d124:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
    d128:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
	    (NRF_FICR->ER[2] != UINT32_MAX) &&
    d12c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
    d130:	d02b      	beq.n	d18a <vs_read_key_hierarchy_roots+0x138>
		sys_put_le32(NRF_FICR->ER[0], &rp->er[0]);
    d132:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    d136:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
	dst[0] = val;
    d13a:	7463      	strb	r3, [r4, #17]
	dst[1] = val >> 8;
    d13c:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d140:	74a1      	strb	r1, [r4, #18]
	sys_put_le16(val >> 16, &dst[2]);
    d142:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d144:	74e3      	strb	r3, [r4, #19]
	dst[1] = val >> 8;
    d146:	0a1b      	lsrs	r3, r3, #8
    d148:	7523      	strb	r3, [r4, #20]
		sys_put_le32(NRF_FICR->ER[1], &rp->er[4]);
    d14a:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
	dst[0] = val;
    d14e:	7563      	strb	r3, [r4, #21]
	dst[1] = val >> 8;
    d150:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d154:	75a1      	strb	r1, [r4, #22]
	sys_put_le16(val >> 16, &dst[2]);
    d156:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d158:	75e3      	strb	r3, [r4, #23]
	dst[1] = val >> 8;
    d15a:	0a1b      	lsrs	r3, r3, #8
    d15c:	7623      	strb	r3, [r4, #24]
		sys_put_le32(NRF_FICR->ER[2], &rp->er[8]);
    d15e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
	dst[0] = val;
    d162:	7663      	strb	r3, [r4, #25]
	dst[1] = val >> 8;
    d164:	f3c3 2107 	ubfx	r1, r3, #8, #8
    d168:	76a1      	strb	r1, [r4, #26]
	sys_put_le16(val >> 16, &dst[2]);
    d16a:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d16c:	76e3      	strb	r3, [r4, #27]
	dst[1] = val >> 8;
    d16e:	0a1b      	lsrs	r3, r3, #8
    d170:	7723      	strb	r3, [r4, #28]
		sys_put_le32(NRF_FICR->ER[3], &rp->er[12]);
    d172:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
	dst[0] = val;
    d176:	7763      	strb	r3, [r4, #29]
	dst[1] = val >> 8;
    d178:	f3c3 2207 	ubfx	r2, r3, #8, #8
    d17c:	77a2      	strb	r2, [r4, #30]
	sys_put_le16(val >> 16, &dst[2]);
    d17e:	0c1b      	lsrs	r3, r3, #16
	dst[0] = val;
    d180:	77e3      	strb	r3, [r4, #31]
	dst[1] = val >> 8;
    d182:	0a1b      	lsrs	r3, r3, #8
    d184:	f884 3020 	strb.w	r3, [r4, #32]
    d188:	bd10      	pop	{r4, pc}
		memset(rp->er, 0x00, sizeof(rp->er));
    d18a:	2210      	movs	r2, #16
    d18c:	2100      	movs	r1, #0
    d18e:	f104 0011 	add.w	r0, r4, #17
    d192:	f01c fc01 	bl	29998 <memset>
    d196:	bd10      	pop	{r4, pc}

0000d198 <read_bd_addr>:
{
    d198:	b508      	push	{r3, lr}
    d19a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d19c:	2107      	movs	r1, #7
    d19e:	f7ff fc33 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    d1a2:	2300      	movs	r3, #0
    d1a4:	4601      	mov	r1, r0
    d1a6:	f801 3b01 	strb.w	r3, [r1], #1
	ll_addr_get(0, &rp->bdaddr.val[0]);
    d1aa:	4618      	mov	r0, r3
    d1ac:	f00b fd64 	bl	18c78 <ll_addr_get>
    d1b0:	bd08      	pop	{r3, pc}

0000d1b2 <info_cmd_handle>:
{
    d1b2:	b508      	push	{r3, lr}
    d1b4:	460b      	mov	r3, r1
	switch (ocf) {
    d1b6:	3801      	subs	r0, #1
    d1b8:	2808      	cmp	r0, #8
    d1ba:	d81e      	bhi.n	d1fa <info_cmd_handle+0x48>
    d1bc:	e8df f000 	tbb	[pc, r0]
    d1c0:	1d110b05 	.word	0x1d110b05
    d1c4:	1d1d1d1d 	.word	0x1d1d1d1d
    d1c8:	17          	.byte	0x17
    d1c9:	00          	.byte	0x00
		read_local_version_info(cmd, evt);
    d1ca:	4611      	mov	r1, r2
    d1cc:	4618      	mov	r0, r3
    d1ce:	f7ff fc61 	bl	ca94 <read_local_version_info>
	return 0;
    d1d2:	2000      	movs	r0, #0
		break;
    d1d4:	bd08      	pop	{r3, pc}
		read_supported_commands(cmd, evt);
    d1d6:	4611      	mov	r1, r2
    d1d8:	4618      	mov	r0, r3
    d1da:	f7ff fe5c 	bl	ce96 <read_supported_commands>
	return 0;
    d1de:	2000      	movs	r0, #0
		break;
    d1e0:	bd08      	pop	{r3, pc}
		read_local_features(cmd, evt);
    d1e2:	4611      	mov	r1, r2
    d1e4:	4618      	mov	r0, r3
    d1e6:	f7ff feae 	bl	cf46 <read_local_features>
	return 0;
    d1ea:	2000      	movs	r0, #0
		break;
    d1ec:	bd08      	pop	{r3, pc}
		read_bd_addr(cmd, evt);
    d1ee:	4611      	mov	r1, r2
    d1f0:	4618      	mov	r0, r3
    d1f2:	f7ff ffd1 	bl	d198 <read_bd_addr>
	return 0;
    d1f6:	2000      	movs	r0, #0
		break;
    d1f8:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d1fa:	f06f 0015 	mvn.w	r0, #21
}
    d1fe:	bd08      	pop	{r3, pc}

0000d200 <le_set_random_address>:
{
    d200:	b510      	push	{r4, lr}
    d202:	460c      	mov	r4, r1
	ll_addr_set(1, &cmd->bdaddr.val[0]);
    d204:	6881      	ldr	r1, [r0, #8]
    d206:	2001      	movs	r0, #1
    d208:	f00b fd58 	bl	18cbc <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d20c:	2101      	movs	r1, #1
    d20e:	4620      	mov	r0, r4
    d210:	f7ff fbfa 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    d214:	2300      	movs	r3, #0
    d216:	7003      	strb	r3, [r0, #0]
    d218:	bd10      	pop	{r4, pc}

0000d21a <vs_write_bd_addr>:
{
    d21a:	b510      	push	{r4, lr}
    d21c:	460c      	mov	r4, r1
	ll_addr_set(0, &cmd->bdaddr.val[0]);
    d21e:	6881      	ldr	r1, [r0, #8]
    d220:	2000      	movs	r0, #0
    d222:	f00b fd4b 	bl	18cbc <ll_addr_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d226:	2101      	movs	r1, #1
    d228:	4620      	mov	r0, r4
    d22a:	f7ff fbed 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    d22e:	2300      	movs	r3, #0
    d230:	7003      	strb	r3, [r0, #0]
    d232:	bd10      	pop	{r4, pc}

0000d234 <le_read_wl_size>:
{
    d234:	b510      	push	{r4, lr}
    d236:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d238:	2102      	movs	r1, #2
    d23a:	f7ff fbe5 	bl	ca08 <cmd_complete>
    d23e:	4604      	mov	r4, r0
	rp->status = 0x00;
    d240:	2300      	movs	r3, #0
    d242:	7003      	strb	r3, [r0, #0]
	rp->wl_size = ll_wl_size_get();
    d244:	f00b ff3a 	bl	190bc <ll_wl_size_get>
    d248:	7060      	strb	r0, [r4, #1]
    d24a:	bd10      	pop	{r4, pc}

0000d24c <le_clear_wl>:
{
    d24c:	b510      	push	{r4, lr}
    d24e:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d250:	2101      	movs	r1, #1
    d252:	f7ff fbd9 	bl	ca08 <cmd_complete>
    d256:	4604      	mov	r4, r0
	ccst->status = ll_wl_clear();
    d258:	f00b ff32 	bl	190c0 <ll_wl_clear>
    d25c:	7020      	strb	r0, [r4, #0]
    d25e:	bd10      	pop	{r4, pc}

0000d260 <le_add_dev_to_wl>:
{
    d260:	b538      	push	{r3, r4, r5, lr}
    d262:	460d      	mov	r5, r1
	status = ll_wl_add(&cmd->addr);
    d264:	6880      	ldr	r0, [r0, #8]
    d266:	f00c f81d 	bl	192a4 <ll_wl_add>
    d26a:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d26c:	2101      	movs	r1, #1
    d26e:	4628      	mov	r0, r5
    d270:	f7ff fbca 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d274:	7004      	strb	r4, [r0, #0]
    d276:	bd38      	pop	{r3, r4, r5, pc}

0000d278 <le_rem_dev_from_wl>:
{
    d278:	b538      	push	{r3, r4, r5, lr}
    d27a:	460d      	mov	r5, r1
	status = ll_wl_remove(&cmd->addr);
    d27c:	6880      	ldr	r0, [r0, #8]
    d27e:	f00b ff35 	bl	190ec <ll_wl_remove>
    d282:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d284:	2101      	movs	r1, #1
    d286:	4628      	mov	r0, r5
    d288:	f7ff fbbe 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d28c:	7004      	strb	r4, [r0, #0]
    d28e:	bd38      	pop	{r3, r4, r5, pc}

0000d290 <le_encrypt>:
{
    d290:	b510      	push	{r4, lr}
    d292:	b084      	sub	sp, #16
    d294:	460c      	mov	r4, r1
	struct bt_hci_cp_le_encrypt *cmd = (void *)buf->data;
    d296:	6880      	ldr	r0, [r0, #8]
	ecb_encrypt(cmd->key, cmd->plaintext, enc_data, NULL);
    d298:	2300      	movs	r3, #0
    d29a:	466a      	mov	r2, sp
    d29c:	f100 0110 	add.w	r1, r0, #16
    d2a0:	f001 fc9e 	bl	ebe0 <ecb_encrypt>
	rp = cmd_complete(evt, sizeof(*rp));
    d2a4:	2111      	movs	r1, #17
    d2a6:	4620      	mov	r0, r4
    d2a8:	f7ff fbae 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    d2ac:	2300      	movs	r3, #0
    d2ae:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->enc_data, enc_data, 16);
    d2b2:	2210      	movs	r2, #16
    d2b4:	4669      	mov	r1, sp
    d2b6:	f7f3 f803 	bl	2c0 <memcpy>
}
    d2ba:	b004      	add	sp, #16
    d2bc:	bd10      	pop	{r4, pc}
	...

0000d2c0 <vs_read_build_info>:
{
    d2c0:	b570      	push	{r4, r5, r6, lr}
    d2c2:	b08a      	sub	sp, #40	; 0x28
    d2c4:	460e      	mov	r6, r1
	const char build_info[] = HCI_VS_BUILD_INFO;
    d2c6:	466c      	mov	r4, sp
    d2c8:	4d0c      	ldr	r5, [pc, #48]	; (d2fc <vs_read_build_info+0x3c>)
    d2ca:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2cc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2ce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
    d2d0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
    d2d2:	e895 0003 	ldmia.w	r5, {r0, r1}
    d2d6:	f844 0b04 	str.w	r0, [r4], #4
    d2da:	f824 1b02 	strh.w	r1, [r4], #2
    d2de:	0c09      	lsrs	r1, r1, #16
    d2e0:	7021      	strb	r1, [r4, #0]
	rp = cmd_complete(evt, sizeof(*rp) + sizeof(build_info));
    d2e2:	2128      	movs	r1, #40	; 0x28
    d2e4:	4630      	mov	r0, r6
    d2e6:	f7ff fb8f 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    d2ea:	2300      	movs	r3, #0
    d2ec:	f800 3b01 	strb.w	r3, [r0], #1
	memcpy(rp->info, build_info, sizeof(build_info));
    d2f0:	2227      	movs	r2, #39	; 0x27
    d2f2:	4669      	mov	r1, sp
    d2f4:	f7f2 ffe4 	bl	2c0 <memcpy>
}
    d2f8:	b00a      	add	sp, #40	; 0x28
    d2fa:	bd70      	pop	{r4, r5, r6, pc}
    d2fc:	0002d690 	.word	0x0002d690

0000d300 <vendor_cmd_handle>:
{
    d300:	b508      	push	{r3, lr}
    d302:	460b      	mov	r3, r1
	switch (ocf) {
    d304:	3801      	subs	r0, #1
    d306:	2809      	cmp	r0, #9
    d308:	d830      	bhi.n	d36c <vendor_cmd_handle+0x6c>
    d30a:	e8df f000 	tbb	[pc, r0]
    d30e:	0b05      	.short	0x0b05
    d310:	1d2f2f11 	.word	0x1d2f2f11
    d314:	2923172f 	.word	0x2923172f
		vs_read_version_info(cmd, evt);
    d318:	4611      	mov	r1, r2
    d31a:	4618      	mov	r0, r3
    d31c:	f7ff fbf6 	bl	cb0c <vs_read_version_info>
	return 0;
    d320:	2000      	movs	r0, #0
		break;
    d322:	bd08      	pop	{r3, pc}
		vs_read_supported_commands(cmd, evt);
    d324:	4611      	mov	r1, r2
    d326:	4618      	mov	r0, r3
    d328:	f7ff fe2f 	bl	cf8a <vs_read_supported_commands>
	return 0;
    d32c:	2000      	movs	r0, #0
		break;
    d32e:	bd08      	pop	{r3, pc}
		vs_read_supported_features(cmd, evt);
    d330:	4611      	mov	r1, r2
    d332:	4618      	mov	r0, r3
    d334:	f7ff fe3e 	bl	cfb4 <vs_read_supported_features>
	return 0;
    d338:	2000      	movs	r0, #0
		break;
    d33a:	bd08      	pop	{r3, pc}
		vs_read_build_info(cmd, evt);
    d33c:	4611      	mov	r1, r2
    d33e:	4618      	mov	r0, r3
    d340:	f7ff ffbe 	bl	d2c0 <vs_read_build_info>
	return 0;
    d344:	2000      	movs	r0, #0
		break;
    d346:	bd08      	pop	{r3, pc}
		vs_write_bd_addr(cmd, evt);
    d348:	4611      	mov	r1, r2
    d34a:	4618      	mov	r0, r3
    d34c:	f7ff ff65 	bl	d21a <vs_write_bd_addr>
	return 0;
    d350:	2000      	movs	r0, #0
		break;
    d352:	bd08      	pop	{r3, pc}
		vs_read_static_addrs(cmd, evt);
    d354:	4611      	mov	r1, r2
    d356:	4618      	mov	r0, r3
    d358:	f7ff fe38 	bl	cfcc <vs_read_static_addrs>
	return 0;
    d35c:	2000      	movs	r0, #0
		break;
    d35e:	bd08      	pop	{r3, pc}
		vs_read_key_hierarchy_roots(cmd, evt);
    d360:	4611      	mov	r1, r2
    d362:	4618      	mov	r0, r3
    d364:	f7ff fe75 	bl	d052 <vs_read_key_hierarchy_roots>
	return 0;
    d368:	2000      	movs	r0, #0
		break;
    d36a:	bd08      	pop	{r3, pc}
		return -EINVAL;
    d36c:	f06f 0015 	mvn.w	r0, #21
}
    d370:	bd08      	pop	{r3, pc}

0000d372 <le_unknown_rsp>:
{
    d372:	b508      	push	{r3, lr}
	switch (pdu_data->payload.llctrl.ctrldata.unknown_rsp.type) {
    d374:	7903      	ldrb	r3, [r0, #4]
    d376:	2b0e      	cmp	r3, #14
    d378:	d000      	beq.n	d37c <le_unknown_rsp+0xa>
    d37a:	bd08      	pop	{r3, pc}
    d37c:	4613      	mov	r3, r2
    d37e:	460a      	mov	r2, r1
		le_remote_feat_complete(BT_HCI_ERR_UNSUPP_REMOTE_FEATURE,
    d380:	2100      	movs	r1, #0
    d382:	201a      	movs	r0, #26
    d384:	f7f8 f966 	bl	5654 <le_remote_feat_complete>
}
    d388:	e7f7      	b.n	d37a <le_unknown_rsp+0x8>

0000d38a <le_rand>:
{
    d38a:	b508      	push	{r3, lr}
    d38c:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d38e:	2109      	movs	r1, #9
    d390:	f7ff fb3a 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    d394:	2300      	movs	r3, #0
    d396:	f800 3b01 	strb.w	r3, [r0], #1
	bt_rand(rp->rand, count);
    d39a:	2108      	movs	r1, #8
    d39c:	f003 fcb4 	bl	10d08 <bt_rand>
    d3a0:	bd08      	pop	{r3, pc}

0000d3a2 <le_set_adv_param>:
{
    d3a2:	b570      	push	{r4, r5, r6, lr}
    d3a4:	b08c      	sub	sp, #48	; 0x30
    d3a6:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_param *cmd = (void *)buf->data;
    d3a8:	6881      	ldr	r1, [r0, #8]
	min_interval = sys_le16_to_cpu(cmd->min_interval);
    d3aa:	460c      	mov	r4, r1
    d3ac:	f834 2b07 	ldrh.w	r2, [r4], #7
	status = ll_adv_params_set(0, 0, min_interval, cmd->type,
    d3b0:	790b      	ldrb	r3, [r1, #4]
    d3b2:	2000      	movs	r0, #0
    d3b4:	900a      	str	r0, [sp, #40]	; 0x28
    d3b6:	9009      	str	r0, [sp, #36]	; 0x24
    d3b8:	9008      	str	r0, [sp, #32]
    d3ba:	9007      	str	r0, [sp, #28]
    d3bc:	9006      	str	r0, [sp, #24]
    d3be:	9005      	str	r0, [sp, #20]
    d3c0:	7b8e      	ldrb	r6, [r1, #14]
    d3c2:	9604      	str	r6, [sp, #16]
    d3c4:	7b4e      	ldrb	r6, [r1, #13]
    d3c6:	9603      	str	r6, [sp, #12]
    d3c8:	9402      	str	r4, [sp, #8]
    d3ca:	798c      	ldrb	r4, [r1, #6]
    d3cc:	9401      	str	r4, [sp, #4]
    d3ce:	7949      	ldrb	r1, [r1, #5]
    d3d0:	9100      	str	r1, [sp, #0]
    d3d2:	4601      	mov	r1, r0
    d3d4:	f00c fc42 	bl	19c5c <ll_adv_params_set>
    d3d8:	b2c4      	uxtb	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d3da:	2101      	movs	r1, #1
    d3dc:	4628      	mov	r0, r5
    d3de:	f7ff fb13 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d3e2:	7004      	strb	r4, [r0, #0]
}
    d3e4:	b00c      	add	sp, #48	; 0x30
    d3e6:	bd70      	pop	{r4, r5, r6, pc}

0000d3e8 <le_set_adv_data>:
{
    d3e8:	b510      	push	{r4, lr}
    d3ea:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_adv_data *cmd = (void *)buf->data;
    d3ec:	6883      	ldr	r3, [r0, #8]
	ll_adv_data_set(cmd->len, &cmd->data[0]);
    d3ee:	1c59      	adds	r1, r3, #1
    d3f0:	7818      	ldrb	r0, [r3, #0]
    d3f2:	f00c fd57 	bl	19ea4 <ll_adv_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d3f6:	2101      	movs	r1, #1
    d3f8:	4620      	mov	r0, r4
    d3fa:	f7ff fb05 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    d3fe:	2300      	movs	r3, #0
    d400:	7003      	strb	r3, [r0, #0]
    d402:	bd10      	pop	{r4, pc}

0000d404 <le_set_scan_rsp_data>:
{
    d404:	b510      	push	{r4, lr}
    d406:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_scan_rsp_data *cmd = (void *)buf->data;
    d408:	6883      	ldr	r3, [r0, #8]
	ll_scan_data_set(cmd->len, &cmd->data[0]);
    d40a:	1c59      	adds	r1, r3, #1
    d40c:	7818      	ldrb	r0, [r3, #0]
    d40e:	f00c fda2 	bl	19f56 <ll_scan_data_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d412:	2101      	movs	r1, #1
    d414:	4620      	mov	r0, r4
    d416:	f7ff faf7 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    d41a:	2300      	movs	r3, #0
    d41c:	7003      	strb	r3, [r0, #0]
    d41e:	bd10      	pop	{r4, pc}

0000d420 <le_set_adv_enable>:
{
    d420:	b538      	push	{r3, r4, r5, lr}
    d422:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_adv_enable *cmd = (void *)buf->data;
    d424:	6883      	ldr	r3, [r0, #8]
	status = ll_adv_enable(cmd->enable);
    d426:	7818      	ldrb	r0, [r3, #0]
    d428:	f00c fdda 	bl	19fe0 <ll_adv_enable>
    d42c:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d42e:	2101      	movs	r1, #1
    d430:	4628      	mov	r0, r5
    d432:	f7ff fae9 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d436:	b114      	cbz	r4, d43e <le_set_adv_enable+0x1e>
    d438:	230c      	movs	r3, #12
    d43a:	7003      	strb	r3, [r0, #0]
    d43c:	bd38      	pop	{r3, r4, r5, pc}
    d43e:	2300      	movs	r3, #0
    d440:	e7fb      	b.n	d43a <le_set_adv_enable+0x1a>

0000d442 <le_set_scan_param>:
{
    d442:	b530      	push	{r4, r5, lr}
    d444:	b083      	sub	sp, #12
    d446:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_param *cmd = (void *)buf->data;
    d448:	6884      	ldr	r4, [r0, #8]
	interval = sys_le16_to_cpu(cmd->interval);
    d44a:	f8b4 1001 	ldrh.w	r1, [r4, #1]
	window = sys_le16_to_cpu(cmd->window);
    d44e:	f8b4 2003 	ldrh.w	r2, [r4, #3]
	status = ll_scan_params_set(cmd->scan_type, interval, window,
    d452:	7820      	ldrb	r0, [r4, #0]
    d454:	7963      	ldrb	r3, [r4, #5]
    d456:	79a4      	ldrb	r4, [r4, #6]
    d458:	9400      	str	r4, [sp, #0]
    d45a:	f00c fe53 	bl	1a104 <ll_scan_params_set>
    d45e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d460:	2101      	movs	r1, #1
    d462:	4628      	mov	r0, r5
    d464:	f7ff fad0 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d468:	b11c      	cbz	r4, d472 <le_set_scan_param+0x30>
    d46a:	230c      	movs	r3, #12
    d46c:	7003      	strb	r3, [r0, #0]
}
    d46e:	b003      	add	sp, #12
    d470:	bd30      	pop	{r4, r5, pc}
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d472:	2300      	movs	r3, #0
    d474:	e7fa      	b.n	d46c <le_set_scan_param+0x2a>
	...

0000d478 <le_set_scan_enable>:
{
    d478:	b538      	push	{r3, r4, r5, lr}
    d47a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_scan_enable *cmd = (void *)buf->data;
    d47c:	6883      	ldr	r3, [r0, #8]
	if (cmd->enable && cmd->filter_dup) {
    d47e:	781a      	ldrb	r2, [r3, #0]
    d480:	b13a      	cbz	r2, d492 <le_set_scan_enable+0x1a>
    d482:	785a      	ldrb	r2, [r3, #1]
    d484:	b12a      	cbz	r2, d492 <le_set_scan_enable+0x1a>
		dup_count = 0;
    d486:	2200      	movs	r2, #0
    d488:	490b      	ldr	r1, [pc, #44]	; (d4b8 <le_set_scan_enable+0x40>)
    d48a:	600a      	str	r2, [r1, #0]
		dup_curr = 0;
    d48c:	490b      	ldr	r1, [pc, #44]	; (d4bc <le_set_scan_enable+0x44>)
    d48e:	600a      	str	r2, [r1, #0]
    d490:	e003      	b.n	d49a <le_set_scan_enable+0x22>
		dup_count = -1;
    d492:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    d496:	4a08      	ldr	r2, [pc, #32]	; (d4b8 <le_set_scan_enable+0x40>)
    d498:	6011      	str	r1, [r2, #0]
	status = ll_scan_enable(cmd->enable);
    d49a:	7818      	ldrb	r0, [r3, #0]
    d49c:	f00c fe4e 	bl	1a13c <ll_scan_enable>
    d4a0:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d4a2:	2101      	movs	r1, #1
    d4a4:	4628      	mov	r0, r5
    d4a6:	f7ff faaf 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d4aa:	b114      	cbz	r4, d4b2 <le_set_scan_enable+0x3a>
    d4ac:	230c      	movs	r3, #12
    d4ae:	7003      	strb	r3, [r0, #0]
    d4b0:	bd38      	pop	{r3, r4, r5, pc}
    d4b2:	2300      	movs	r3, #0
    d4b4:	e7fb      	b.n	d4ae <le_set_scan_enable+0x36>
    d4b6:	bf00      	nop
    d4b8:	20000ad8 	.word	0x20000ad8
    d4bc:	20000adc 	.word	0x20000adc

0000d4c0 <le_create_connection>:
{
    d4c0:	b5f0      	push	{r4, r5, r6, r7, lr}
    d4c2:	b087      	sub	sp, #28
    d4c4:	460d      	mov	r5, r1
	struct bt_hci_cp_le_create_conn *cmd = (void *)buf->data;
    d4c6:	6884      	ldr	r4, [r0, #8]
	scan_interval = sys_le16_to_cpu(cmd->scan_interval);
    d4c8:	8820      	ldrh	r0, [r4, #0]
	scan_window = sys_le16_to_cpu(cmd->scan_window);
    d4ca:	8861      	ldrh	r1, [r4, #2]
	conn_interval_max = sys_le16_to_cpu(cmd->conn_interval_max);
    d4cc:	f8b4 700f 	ldrh.w	r7, [r4, #15]
	conn_latency = sys_le16_to_cpu(cmd->conn_latency);
    d4d0:	f8b4 e011 	ldrh.w	lr, [r4, #17]
	supervision_timeout = sys_le16_to_cpu(cmd->supervision_timeout);
    d4d4:	f8b4 c013 	ldrh.w	ip, [r4, #19]
	status = ll_create_connection(scan_interval, scan_window,
    d4d8:	7922      	ldrb	r2, [r4, #4]
    d4da:	7963      	ldrb	r3, [r4, #5]
    d4dc:	1da6      	adds	r6, r4, #6
    d4de:	7b24      	ldrb	r4, [r4, #12]
    d4e0:	f8cd c010 	str.w	ip, [sp, #16]
    d4e4:	f8cd e00c 	str.w	lr, [sp, #12]
    d4e8:	9702      	str	r7, [sp, #8]
    d4ea:	9401      	str	r4, [sp, #4]
    d4ec:	9600      	str	r6, [sp, #0]
    d4ee:	f00c fe65 	bl	1a1bc <ll_create_connection>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d4f2:	b100      	cbz	r0, d4f6 <le_create_connection+0x36>
    d4f4:	200c      	movs	r0, #12
    d4f6:	f7ff fa5f 	bl	c9b8 <cmd_status>
    d4fa:	6028      	str	r0, [r5, #0]
}
    d4fc:	b007      	add	sp, #28
    d4fe:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000d500 <le_create_conn_cancel>:
{
    d500:	b538      	push	{r3, r4, r5, lr}
    d502:	460d      	mov	r5, r1
	status = ll_connect_disable();
    d504:	f00b fa00 	bl	18908 <ll_connect_disable>
    d508:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d50a:	2101      	movs	r1, #1
    d50c:	4628      	mov	r0, r5
    d50e:	f7ff fa7b 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d512:	b114      	cbz	r4, d51a <le_create_conn_cancel+0x1a>
    d514:	230c      	movs	r3, #12
    d516:	7003      	strb	r3, [r0, #0]
    d518:	bd38      	pop	{r3, r4, r5, pc}
    d51a:	2300      	movs	r3, #0
    d51c:	e7fb      	b.n	d516 <le_create_conn_cancel+0x16>

0000d51e <le_set_host_chan_classif>:
{
    d51e:	b538      	push	{r3, r4, r5, lr}
    d520:	460d      	mov	r5, r1
	status = ll_chm_update(&cmd->ch_map[0]);
    d522:	6880      	ldr	r0, [r0, #8]
    d524:	f00a fb08 	bl	17b38 <ll_chm_update>
    d528:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d52a:	2101      	movs	r1, #1
    d52c:	4628      	mov	r0, r5
    d52e:	f7ff fa6b 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d532:	b114      	cbz	r4, d53a <le_set_host_chan_classif+0x1c>
    d534:	230c      	movs	r3, #12
    d536:	7003      	strb	r3, [r0, #0]
    d538:	bd38      	pop	{r3, r4, r5, pc}
    d53a:	2300      	movs	r3, #0
    d53c:	e7fb      	b.n	d536 <le_set_host_chan_classif+0x18>

0000d53e <le_start_encryption>:
{
    d53e:	b510      	push	{r4, lr}
    d540:	460c      	mov	r4, r1
	struct bt_hci_cp_le_start_encryption *cmd = (void *)buf->data;
    d542:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d544:	4611      	mov	r1, r2
    d546:	f831 0b02 	ldrh.w	r0, [r1], #2
	status = ll_enc_req_send(handle,
    d54a:	f102 030c 	add.w	r3, r2, #12
    d54e:	320a      	adds	r2, #10
    d550:	f00a fe2c 	bl	181ac <ll_enc_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d554:	b100      	cbz	r0, d558 <le_start_encryption+0x1a>
    d556:	200c      	movs	r0, #12
    d558:	f7ff fa2e 	bl	c9b8 <cmd_status>
    d55c:	6020      	str	r0, [r4, #0]
    d55e:	bd10      	pop	{r4, pc}

0000d560 <le_ltk_req_reply>:
{
    d560:	b570      	push	{r4, r5, r6, lr}
    d562:	460e      	mov	r6, r1
	handle = sys_le16_to_cpu(cmd->handle);
    d564:	6882      	ldr	r2, [r0, #8]
    d566:	f832 4b02 	ldrh.w	r4, [r2], #2
	status = ll_start_enc_req_send(handle, 0x00, &cmd->ltk[0]);
    d56a:	2100      	movs	r1, #0
    d56c:	b2a0      	uxth	r0, r4
    d56e:	f00a fb36 	bl	17bde <ll_start_enc_req_send>
    d572:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d574:	2103      	movs	r1, #3
    d576:	4630      	mov	r0, r6
    d578:	f7ff fa46 	bl	ca08 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d57c:	b125      	cbz	r5, d588 <le_ltk_req_reply+0x28>
    d57e:	230c      	movs	r3, #12
    d580:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d582:	f8a0 4001 	strh.w	r4, [r0, #1]
    d586:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d588:	2300      	movs	r3, #0
    d58a:	e7f9      	b.n	d580 <le_ltk_req_reply+0x20>

0000d58c <le_ltk_req_neg_reply>:
{
    d58c:	b570      	push	{r4, r5, r6, lr}
    d58e:	460e      	mov	r6, r1
	struct bt_hci_cp_le_ltk_req_neg_reply *cmd = (void *)buf->data;
    d590:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d592:	881c      	ldrh	r4, [r3, #0]
	status = ll_start_enc_req_send(handle, BT_HCI_ERR_PIN_OR_KEY_MISSING,
    d594:	2200      	movs	r2, #0
    d596:	2106      	movs	r1, #6
    d598:	b2a0      	uxth	r0, r4
    d59a:	f00a fb20 	bl	17bde <ll_start_enc_req_send>
    d59e:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d5a0:	2103      	movs	r1, #3
    d5a2:	4630      	mov	r0, r6
    d5a4:	f7ff fa30 	bl	ca08 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d5a8:	b125      	cbz	r5, d5b4 <le_ltk_req_neg_reply+0x28>
    d5aa:	230c      	movs	r3, #12
    d5ac:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d5ae:	f8a0 4001 	strh.w	r4, [r0, #1]
    d5b2:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d5b4:	2300      	movs	r3, #0
    d5b6:	e7f9      	b.n	d5ac <le_ltk_req_neg_reply+0x20>

0000d5b8 <le_read_chan_map>:
{
    d5b8:	b570      	push	{r4, r5, r6, lr}
    d5ba:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_chan_map *cmd = (void *)buf->data;
    d5bc:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d5be:	8815      	ldrh	r5, [r2, #0]
    d5c0:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d5c2:	2108      	movs	r1, #8
    d5c4:	4618      	mov	r0, r3
    d5c6:	f7ff fa1f 	bl	ca08 <cmd_complete>
    d5ca:	4604      	mov	r4, r0
	status = ll_chm_get(handle, rp->ch_map);
    d5cc:	1cc1      	adds	r1, r0, #3
    d5ce:	4630      	mov	r0, r6
    d5d0:	f00a faf0 	bl	17bb4 <ll_chm_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5d4:	b120      	cbz	r0, d5e0 <le_read_chan_map+0x28>
    d5d6:	2302      	movs	r3, #2
    d5d8:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_le16_to_cpu(handle);
    d5da:	f8a4 5001 	strh.w	r5, [r4, #1]
    d5de:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_UNKNOWN_CONN_ID;
    d5e0:	2300      	movs	r3, #0
    d5e2:	e7f9      	b.n	d5d8 <le_read_chan_map+0x20>

0000d5e4 <le_read_remote_features>:
{
    d5e4:	b510      	push	{r4, lr}
    d5e6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_read_remote_features *cmd = (void *)buf->data;
    d5e8:	6883      	ldr	r3, [r0, #8]
	status = ll_feature_req_send(handle);
    d5ea:	8818      	ldrh	r0, [r3, #0]
    d5ec:	f00a fb3f 	bl	17c6e <ll_feature_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d5f0:	b100      	cbz	r0, d5f4 <le_read_remote_features+0x10>
    d5f2:	200c      	movs	r0, #12
    d5f4:	f7ff f9e0 	bl	c9b8 <cmd_status>
    d5f8:	6020      	str	r0, [r4, #0]
    d5fa:	bd10      	pop	{r4, pc}

0000d5fc <le_conn_param_req_neg_reply>:
{
    d5fc:	b570      	push	{r4, r5, r6, lr}
    d5fe:	b082      	sub	sp, #8
    d600:	460e      	mov	r6, r1
	struct bt_hci_cp_le_conn_param_req_neg_reply *cmd = (void *)buf->data;
    d602:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d604:	881c      	ldrh	r4, [r3, #0]
	status = ll_conn_update(handle, 2, cmd->reason, 0, 0, 0);
    d606:	789a      	ldrb	r2, [r3, #2]
    d608:	2300      	movs	r3, #0
    d60a:	9301      	str	r3, [sp, #4]
    d60c:	9300      	str	r3, [sp, #0]
    d60e:	2102      	movs	r1, #2
    d610:	b2a0      	uxth	r0, r4
    d612:	f00a fa01 	bl	17a18 <ll_conn_update>
    d616:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d618:	2103      	movs	r1, #3
    d61a:	4630      	mov	r0, r6
    d61c:	f7ff f9f4 	bl	ca08 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d620:	b12d      	cbz	r5, d62e <le_conn_param_req_neg_reply+0x32>
    d622:	230c      	movs	r3, #12
    d624:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d626:	f8a0 4001 	strh.w	r4, [r0, #1]
}
    d62a:	b002      	add	sp, #8
    d62c:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d62e:	2300      	movs	r3, #0
    d630:	e7f8      	b.n	d624 <le_conn_param_req_neg_reply+0x28>

0000d632 <le_set_data_len>:
{
    d632:	b570      	push	{r4, r5, r6, lr}
    d634:	460e      	mov	r6, r1
	struct bt_hci_cp_le_set_data_len *cmd = (void *)buf->data;
    d636:	6883      	ldr	r3, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d638:	881c      	ldrh	r4, [r3, #0]
	status = ll_length_req_send(handle, tx_octets, tx_time);
    d63a:	889a      	ldrh	r2, [r3, #4]
    d63c:	8859      	ldrh	r1, [r3, #2]
    d63e:	b2a0      	uxth	r0, r4
    d640:	f00a fb99 	bl	17d76 <ll_length_req_send>
    d644:	4605      	mov	r5, r0
	rp = cmd_complete(evt, sizeof(*rp));
    d646:	2103      	movs	r1, #3
    d648:	4630      	mov	r0, r6
    d64a:	f7ff f9dd 	bl	ca08 <cmd_complete>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d64e:	b125      	cbz	r5, d65a <le_set_data_len+0x28>
    d650:	230c      	movs	r3, #12
    d652:	7003      	strb	r3, [r0, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d654:	f8a0 4001 	strh.w	r4, [r0, #1]
    d658:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d65a:	2300      	movs	r3, #0
    d65c:	e7f9      	b.n	d652 <le_set_data_len+0x20>

0000d65e <le_read_default_data_len>:
{
    d65e:	b510      	push	{r4, lr}
    d660:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d662:	2105      	movs	r1, #5
    d664:	f7ff f9d0 	bl	ca08 <cmd_complete>
    d668:	4604      	mov	r4, r0
	ll_length_default_get(&rp->max_tx_octets, &rp->max_tx_time);
    d66a:	1cc1      	adds	r1, r0, #3
    d66c:	3001      	adds	r0, #1
    d66e:	f00a fba9 	bl	17dc4 <ll_length_default_get>
	rp->status = 0x00;
    d672:	2300      	movs	r3, #0
    d674:	7023      	strb	r3, [r4, #0]
    d676:	bd10      	pop	{r4, pc}

0000d678 <le_write_default_data_len>:
{
    d678:	b538      	push	{r3, r4, r5, lr}
    d67a:	460d      	mov	r5, r1
	struct bt_hci_cp_le_write_default_data_len *cmd = (void *)buf->data;
    d67c:	6883      	ldr	r3, [r0, #8]
	status = ll_length_default_set(cmd->max_tx_octets, cmd->max_tx_time);
    d67e:	8859      	ldrh	r1, [r3, #2]
    d680:	8818      	ldrh	r0, [r3, #0]
    d682:	f00a fba9 	bl	17dd8 <ll_length_default_set>
    d686:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d688:	2101      	movs	r1, #1
    d68a:	4628      	mov	r0, r5
    d68c:	f7ff f9bc 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d690:	b114      	cbz	r4, d698 <le_write_default_data_len+0x20>
    d692:	231e      	movs	r3, #30
    d694:	7003      	strb	r3, [r0, #0]
    d696:	bd38      	pop	{r3, r4, r5, pc}
    d698:	2300      	movs	r3, #0
    d69a:	e7fb      	b.n	d694 <le_write_default_data_len+0x1c>

0000d69c <le_read_max_data_len>:
{
    d69c:	b510      	push	{r4, lr}
    d69e:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d6a0:	2109      	movs	r1, #9
    d6a2:	f7ff f9b1 	bl	ca08 <cmd_complete>
    d6a6:	4604      	mov	r4, r0
	ll_length_max_get(&rp->max_tx_octets, &rp->max_tx_time,
    d6a8:	1dc3      	adds	r3, r0, #7
    d6aa:	1d42      	adds	r2, r0, #5
    d6ac:	1cc1      	adds	r1, r0, #3
    d6ae:	3001      	adds	r0, #1
    d6b0:	f00a fb9c 	bl	17dec <ll_length_max_get>
	rp->status = 0x00;
    d6b4:	2300      	movs	r3, #0
    d6b6:	7023      	strb	r3, [r4, #0]
    d6b8:	bd10      	pop	{r4, pc}
	...

0000d6bc <le_phy_upd_complete>:
{
    d6bc:	b538      	push	{r3, r4, r5, lr}
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d6be:	4b1a      	ldr	r3, [pc, #104]	; (d728 <le_phy_upd_complete+0x6c>)
    d6c0:	e9d3 4500 	ldrd	r4, r5, [r3]
    d6c4:	2400      	movs	r4, #0
    d6c6:	f005 5500 	and.w	r5, r5, #536870912	; 0x20000000
    d6ca:	ea54 0305 	orrs.w	r3, r4, r5
    d6ce:	d008      	beq.n	d6e2 <le_phy_upd_complete+0x26>
	    !(le_event_mask & BT_EVT_MASK_LE_PHY_UPDATE_COMPLETE)) {
    d6d0:	4b16      	ldr	r3, [pc, #88]	; (d72c <le_phy_upd_complete+0x70>)
    d6d2:	e9d3 4500 	ldrd	r4, r5, [r3]
    d6d6:	f404 6400 	and.w	r4, r4, #2048	; 0x800
    d6da:	2500      	movs	r5, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    d6dc:	ea54 0305 	orrs.w	r3, r4, r5
    d6e0:	d100      	bne.n	d6e4 <le_phy_upd_complete+0x28>
    d6e2:	bd38      	pop	{r3, r4, r5, pc}
    d6e4:	4613      	mov	r3, r2
    d6e6:	460c      	mov	r4, r1
    d6e8:	4605      	mov	r5, r0
	sep = meta_evt(buf, BT_HCI_EVT_LE_PHY_UPDATE_COMPLETE, sizeof(*sep));
    d6ea:	2205      	movs	r2, #5
    d6ec:	210c      	movs	r1, #12
    d6ee:	4618      	mov	r0, r3
    d6f0:	f7ff fa24 	bl	cb3c <meta_evt>
	sep->status = radio_le_phy_upd_cmplt->status;
    d6f4:	78eb      	ldrb	r3, [r5, #3]
    d6f6:	7003      	strb	r3, [r0, #0]
	sep->handle = sys_cpu_to_le16(handle);
    d6f8:	f8a0 4001 	strh.w	r4, [r0, #1]
	sep->tx_phy = find_lsb_set(radio_le_phy_upd_cmplt->tx);
    d6fc:	792a      	ldrb	r2, [r5, #4]
	return __builtin_ffs(op);
    d6fe:	fa92 f3a2 	rbit	r3, r2
    d702:	fab3 f383 	clz	r3, r3
    d706:	b90a      	cbnz	r2, d70c <le_phy_upd_complete+0x50>
    d708:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d70c:	3301      	adds	r3, #1
    d70e:	70c3      	strb	r3, [r0, #3]
	sep->rx_phy = find_lsb_set(radio_le_phy_upd_cmplt->rx);
    d710:	796a      	ldrb	r2, [r5, #5]
    d712:	fa92 f3a2 	rbit	r3, r2
    d716:	fab3 f383 	clz	r3, r3
    d71a:	b90a      	cbnz	r2, d720 <le_phy_upd_complete+0x64>
    d71c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d720:	3301      	adds	r3, #1
    d722:	7103      	strb	r3, [r0, #4]
    d724:	e7dd      	b.n	d6e2 <le_phy_upd_complete+0x26>
    d726:	bf00      	nop
    d728:	2000bba8 	.word	0x2000bba8
    d72c:	2000bbb0 	.word	0x2000bbb0

0000d730 <le_read_phy>:
{
    d730:	b570      	push	{r4, r5, r6, lr}
    d732:	460b      	mov	r3, r1
	struct bt_hci_cp_le_read_phy *cmd = (void *) buf->data;
    d734:	6882      	ldr	r2, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d736:	8815      	ldrh	r5, [r2, #0]
    d738:	b2ae      	uxth	r6, r5
	rp = cmd_complete(evt, sizeof(*rp));
    d73a:	2105      	movs	r1, #5
    d73c:	4618      	mov	r0, r3
    d73e:	f7ff f963 	bl	ca08 <cmd_complete>
    d742:	4604      	mov	r4, r0
	status = ll_phy_get(handle, &rp->tx_phy, &rp->rx_phy);
    d744:	1d02      	adds	r2, r0, #4
    d746:	1cc1      	adds	r1, r0, #3
    d748:	4630      	mov	r0, r6
    d74a:	f00a fb59 	bl	17e00 <ll_phy_get>
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d74e:	b1c0      	cbz	r0, d782 <le_read_phy+0x52>
    d750:	230c      	movs	r3, #12
    d752:	7023      	strb	r3, [r4, #0]
	rp->handle = sys_cpu_to_le16(handle);
    d754:	f8a4 5001 	strh.w	r5, [r4, #1]
	rp->tx_phy = find_lsb_set(rp->tx_phy);
    d758:	78e2      	ldrb	r2, [r4, #3]
    d75a:	fa92 f3a2 	rbit	r3, r2
    d75e:	fab3 f383 	clz	r3, r3
    d762:	b90a      	cbnz	r2, d768 <le_read_phy+0x38>
    d764:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d768:	3301      	adds	r3, #1
    d76a:	70e3      	strb	r3, [r4, #3]
	rp->rx_phy = find_lsb_set(rp->rx_phy);
    d76c:	7922      	ldrb	r2, [r4, #4]
    d76e:	fa92 f3a2 	rbit	r3, r2
    d772:	fab3 f383 	clz	r3, r3
    d776:	b90a      	cbnz	r2, d77c <le_read_phy+0x4c>
    d778:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
    d77c:	3301      	adds	r3, #1
    d77e:	7123      	strb	r3, [r4, #4]
    d780:	bd70      	pop	{r4, r5, r6, pc}
	rp->status = (!status) ?  0x00 : BT_HCI_ERR_CMD_DISALLOWED;
    d782:	2300      	movs	r3, #0
    d784:	e7e5      	b.n	d752 <le_read_phy+0x22>

0000d786 <le_set_default_phy>:
{
    d786:	b538      	push	{r3, r4, r5, lr}
    d788:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_default_phy *cmd = (void *)buf->data;
    d78a:	6883      	ldr	r3, [r0, #8]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d78c:	781a      	ldrb	r2, [r3, #0]
    d78e:	f012 0f01 	tst.w	r2, #1
    d792:	d001      	beq.n	d798 <le_set_default_phy+0x12>
		cmd->tx_phys = 0x07;
    d794:	2107      	movs	r1, #7
    d796:	7059      	strb	r1, [r3, #1]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d798:	f012 0f02 	tst.w	r2, #2
    d79c:	d001      	beq.n	d7a2 <le_set_default_phy+0x1c>
		cmd->rx_phys = 0x07;
    d79e:	2207      	movs	r2, #7
    d7a0:	709a      	strb	r2, [r3, #2]
	status = ll_phy_default_set(cmd->tx_phys, cmd->rx_phys);
    d7a2:	7899      	ldrb	r1, [r3, #2]
    d7a4:	7858      	ldrb	r0, [r3, #1]
    d7a6:	f00a fb3f 	bl	17e28 <ll_phy_default_set>
    d7aa:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d7ac:	2101      	movs	r1, #1
    d7ae:	4628      	mov	r0, r5
    d7b0:	f7ff f92a 	bl	ca08 <cmd_complete>
	ccst->status = (!status) ? 0x00 : BT_HCI_ERR_INVALID_LL_PARAM;
    d7b4:	b114      	cbz	r4, d7bc <le_set_default_phy+0x36>
    d7b6:	231e      	movs	r3, #30
    d7b8:	7003      	strb	r3, [r0, #0]
    d7ba:	bd38      	pop	{r3, r4, r5, pc}
    d7bc:	2300      	movs	r3, #0
    d7be:	e7fb      	b.n	d7b8 <le_set_default_phy+0x32>

0000d7c0 <le_set_phy>:
{
    d7c0:	b538      	push	{r3, r4, r5, lr}
    d7c2:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_phy *cmd = (void *)buf->data;
    d7c4:	6881      	ldr	r1, [r0, #8]
	handle = sys_le16_to_cpu(cmd->handle);
    d7c6:	8808      	ldrh	r0, [r1, #0]
	phy_opts = sys_le16_to_cpu(cmd->phy_opts);
    d7c8:	f8b1 2005 	ldrh.w	r2, [r1, #5]
	if (cmd->all_phys & BT_HCI_LE_PHY_TX_ANY) {
    d7cc:	788b      	ldrb	r3, [r1, #2]
    d7ce:	f013 0f01 	tst.w	r3, #1
    d7d2:	d001      	beq.n	d7d8 <le_set_phy+0x18>
		cmd->tx_phys = 0x07;
    d7d4:	2507      	movs	r5, #7
    d7d6:	70cd      	strb	r5, [r1, #3]
	if (cmd->all_phys & BT_HCI_LE_PHY_RX_ANY) {
    d7d8:	f013 0f02 	tst.w	r3, #2
    d7dc:	d001      	beq.n	d7e2 <le_set_phy+0x22>
		cmd->rx_phys = 0x07;
    d7de:	2307      	movs	r3, #7
    d7e0:	710b      	strb	r3, [r1, #4]
	if (phy_opts & 0x03) {
    d7e2:	f012 0f03 	tst.w	r2, #3
    d7e6:	d00c      	beq.n	d802 <le_set_phy+0x42>
		phy_opts -= 1;
    d7e8:	3a01      	subs	r2, #1
		phy_opts &= 1;
    d7ea:	f002 0201 	and.w	r2, r2, #1
	status = ll_phy_req_send(handle, cmd->tx_phys, phy_opts,
    d7ee:	790b      	ldrb	r3, [r1, #4]
    d7f0:	78c9      	ldrb	r1, [r1, #3]
    d7f2:	f00a fb23 	bl	17e3c <ll_phy_req_send>
	*evt = cmd_status((!status) ? 0x00 : BT_HCI_ERR_CMD_DISALLOWED);
    d7f6:	b100      	cbz	r0, d7fa <le_set_phy+0x3a>
    d7f8:	200c      	movs	r0, #12
    d7fa:	f7ff f8dd 	bl	c9b8 <cmd_status>
    d7fe:	6020      	str	r0, [r4, #0]
    d800:	bd38      	pop	{r3, r4, r5, pc}
		phy_opts = 0;
    d802:	2200      	movs	r2, #0
    d804:	e7f3      	b.n	d7ee <le_set_phy+0x2e>

0000d806 <le_add_dev_to_rl>:
{
    d806:	b538      	push	{r3, r4, r5, lr}
    d808:	460d      	mov	r5, r1
	struct bt_hci_cp_le_add_dev_to_rl *cmd = (void *)buf->data;
    d80a:	6880      	ldr	r0, [r0, #8]
	status = ll_rl_add(&cmd->peer_id_addr, cmd->peer_irk, cmd->local_irk);
    d80c:	f100 0217 	add.w	r2, r0, #23
    d810:	1dc1      	adds	r1, r0, #7
    d812:	f00b fffd 	bl	19810 <ll_rl_add>
    d816:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d818:	2101      	movs	r1, #1
    d81a:	4628      	mov	r0, r5
    d81c:	f7ff f8f4 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d820:	7004      	strb	r4, [r0, #0]
    d822:	bd38      	pop	{r3, r4, r5, pc}

0000d824 <le_rem_dev_from_rl>:
{
    d824:	b538      	push	{r3, r4, r5, lr}
    d826:	460d      	mov	r5, r1
	status = ll_rl_remove(&cmd->peer_id_addr);
    d828:	6880      	ldr	r0, [r0, #8]
    d82a:	f00c f8af 	bl	1998c <ll_rl_remove>
    d82e:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d830:	2101      	movs	r1, #1
    d832:	4628      	mov	r0, r5
    d834:	f7ff f8e8 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d838:	7004      	strb	r4, [r0, #0]
    d83a:	bd38      	pop	{r3, r4, r5, pc}

0000d83c <le_clear_rl>:
{
    d83c:	b510      	push	{r4, lr}
    d83e:	4608      	mov	r0, r1
	ccst = cmd_complete(evt, sizeof(*ccst));
    d840:	2101      	movs	r1, #1
    d842:	f7ff f8e1 	bl	ca08 <cmd_complete>
    d846:	4604      	mov	r4, r0
	ccst->status = ll_rl_clear();
    d848:	f00b ffd6 	bl	197f8 <ll_rl_clear>
    d84c:	7020      	strb	r0, [r4, #0]
    d84e:	bd10      	pop	{r4, pc}

0000d850 <le_read_rl_size>:
{
    d850:	b510      	push	{r4, lr}
    d852:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d854:	2102      	movs	r1, #2
    d856:	f7ff f8d7 	bl	ca08 <cmd_complete>
    d85a:	4604      	mov	r4, r0
	rp->rl_size = ll_rl_size_get();
    d85c:	f00b ffca 	bl	197f4 <ll_rl_size_get>
    d860:	7060      	strb	r0, [r4, #1]
	rp->status = 0x00;
    d862:	2300      	movs	r3, #0
    d864:	7023      	strb	r3, [r4, #0]
    d866:	bd10      	pop	{r4, pc}

0000d868 <le_read_peer_rpa>:
{
    d868:	b510      	push	{r4, lr}
    d86a:	b082      	sub	sp, #8
    d86c:	460c      	mov	r4, r1
	memcpy(dst, src, sizeof(*dst));
    d86e:	2207      	movs	r2, #7
    d870:	6881      	ldr	r1, [r0, #8]
    d872:	4668      	mov	r0, sp
    d874:	f7f2 fd24 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d878:	2107      	movs	r1, #7
    d87a:	4620      	mov	r0, r4
    d87c:	f7ff f8c4 	bl	ca08 <cmd_complete>
    d880:	4604      	mov	r4, r0
	rp->status = ll_rl_crpa_get(&peer_id_addr, &rp->peer_rpa);
    d882:	1c41      	adds	r1, r0, #1
    d884:	4668      	mov	r0, sp
    d886:	f00c f925 	bl	19ad4 <ll_rl_crpa_get>
    d88a:	7020      	strb	r0, [r4, #0]
}
    d88c:	b002      	add	sp, #8
    d88e:	bd10      	pop	{r4, pc}

0000d890 <le_read_local_rpa>:
{
    d890:	b510      	push	{r4, lr}
    d892:	b082      	sub	sp, #8
    d894:	460c      	mov	r4, r1
    d896:	2207      	movs	r2, #7
    d898:	6881      	ldr	r1, [r0, #8]
    d89a:	4668      	mov	r0, sp
    d89c:	f7f2 fd10 	bl	2c0 <memcpy>
	rp = cmd_complete(evt, sizeof(*rp));
    d8a0:	2107      	movs	r1, #7
    d8a2:	4620      	mov	r0, r4
    d8a4:	f7ff f8b0 	bl	ca08 <cmd_complete>
    d8a8:	4604      	mov	r4, r0
	rp->status = ll_rl_lrpa_get(&peer_id_addr, &rp->local_rpa);
    d8aa:	1c41      	adds	r1, r0, #1
    d8ac:	4668      	mov	r0, sp
    d8ae:	f00c f939 	bl	19b24 <ll_rl_lrpa_get>
    d8b2:	7020      	strb	r0, [r4, #0]
}
    d8b4:	b002      	add	sp, #8
    d8b6:	bd10      	pop	{r4, pc}

0000d8b8 <le_set_addr_res_enable>:
{
    d8b8:	b538      	push	{r3, r4, r5, lr}
    d8ba:	460b      	mov	r3, r1
	struct bt_hci_cp_le_set_addr_res_enable *cmd = (void *)buf->data;
    d8bc:	6882      	ldr	r2, [r0, #8]
	u8_t enable = cmd->enable;
    d8be:	7815      	ldrb	r5, [r2, #0]
	ccst = cmd_complete(evt, sizeof(*ccst));
    d8c0:	2101      	movs	r1, #1
    d8c2:	4618      	mov	r0, r3
    d8c4:	f7ff f8a0 	bl	ca08 <cmd_complete>
    d8c8:	4604      	mov	r4, r0
	ccst->status = ll_rl_enable(enable);
    d8ca:	4628      	mov	r0, r5
    d8cc:	f00c f944 	bl	19b58 <ll_rl_enable>
    d8d0:	7020      	strb	r0, [r4, #0]
    d8d2:	bd38      	pop	{r3, r4, r5, pc}

0000d8d4 <le_set_rpa_timeout>:
{
    d8d4:	b510      	push	{r4, lr}
    d8d6:	460c      	mov	r4, r1
	struct bt_hci_cp_le_set_rpa_timeout *cmd = (void *)buf->data;
    d8d8:	6883      	ldr	r3, [r0, #8]
	ll_rl_timeout_set(timeout);
    d8da:	8818      	ldrh	r0, [r3, #0]
    d8dc:	f00c f954 	bl	19b88 <ll_rl_timeout_set>
	ccst = cmd_complete(evt, sizeof(*ccst));
    d8e0:	2101      	movs	r1, #1
    d8e2:	4620      	mov	r0, r4
    d8e4:	f7ff f890 	bl	ca08 <cmd_complete>
	ccst->status = 0x00;
    d8e8:	2300      	movs	r3, #0
    d8ea:	7003      	strb	r3, [r0, #0]
    d8ec:	bd10      	pop	{r4, pc}

0000d8ee <le_set_privacy_mode>:
{
    d8ee:	b538      	push	{r3, r4, r5, lr}
    d8f0:	460d      	mov	r5, r1
	struct bt_hci_cp_le_set_privacy_mode *cmd = (void *)buf->data;
    d8f2:	6880      	ldr	r0, [r0, #8]
	status = ll_priv_mode_set(&cmd->id_addr, cmd->mode);
    d8f4:	79c1      	ldrb	r1, [r0, #7]
    d8f6:	f00c f951 	bl	19b9c <ll_priv_mode_set>
    d8fa:	4604      	mov	r4, r0
	ccst = cmd_complete(evt, sizeof(*ccst));
    d8fc:	2101      	movs	r1, #1
    d8fe:	4628      	mov	r0, r5
    d900:	f7ff f882 	bl	ca08 <cmd_complete>
	ccst->status = status;
    d904:	7004      	strb	r4, [r0, #0]
    d906:	bd38      	pop	{r3, r4, r5, pc}

0000d908 <le_read_tx_power>:
{
    d908:	b508      	push	{r3, lr}
    d90a:	4608      	mov	r0, r1
	rp = cmd_complete(evt, sizeof(*rp));
    d90c:	2103      	movs	r1, #3
    d90e:	f7ff f87b 	bl	ca08 <cmd_complete>
	rp->status = 0x00;
    d912:	4601      	mov	r1, r0
    d914:	2300      	movs	r3, #0
    d916:	f801 3b02 	strb.w	r3, [r1], #2
	ll_tx_power_get(&rp->min_tx_power, &rp->max_tx_power);
    d91a:	3001      	adds	r0, #1
    d91c:	f00a f9f3 	bl	17d06 <ll_tx_power_get>
    d920:	bd08      	pop	{r3, pc}

0000d922 <controller_cmd_handle>:
{
    d922:	b508      	push	{r3, lr}
    d924:	460b      	mov	r3, r1
	switch (ocf) {
    d926:	3801      	subs	r0, #1
    d928:	284d      	cmp	r0, #77	; 0x4d
    d92a:	f200 8164 	bhi.w	dbf6 <controller_cmd_handle+0x2d4>
    d92e:	e8df f010 	tbh	[pc, r0, lsl #1]
    d932:	004e      	.short	0x004e
    d934:	005a0054 	.word	0x005a0054
    d938:	00600162 	.word	0x00600162
    d93c:	00960090 	.word	0x00960090
    d940:	00a2009c 	.word	0x00a2009c
    d944:	00ae00a8 	.word	0x00ae00a8
    d948:	00ba00b4 	.word	0x00ba00b4
    d94c:	006600c0 	.word	0x006600c0
    d950:	0072006c 	.word	0x0072006c
    d954:	00ea0078 	.word	0x00ea0078
    d958:	00de00c6 	.word	0x00de00c6
    d95c:	007e00e4 	.word	0x007e00e4
    d960:	00cc0084 	.word	0x00cc0084
    d964:	00d800d2 	.word	0x00d800d2
    d968:	0162008a 	.word	0x0162008a
    d96c:	01620162 	.word	0x01620162
    d970:	00f600f0 	.word	0x00f600f0
    d974:	010200fc 	.word	0x010200fc
    d978:	01620108 	.word	0x01620108
    d97c:	01260162 	.word	0x01260162
    d980:	0132012c 	.word	0x0132012c
    d984:	013e0138 	.word	0x013e0138
    d988:	014a0144 	.word	0x014a0144
    d98c:	010e0150 	.word	0x010e0150
    d990:	011a0114 	.word	0x011a0114
    d994:	01620120 	.word	0x01620120
    d998:	01620162 	.word	0x01620162
    d99c:	01620162 	.word	0x01620162
    d9a0:	01620162 	.word	0x01620162
    d9a4:	01620162 	.word	0x01620162
    d9a8:	01620162 	.word	0x01620162
    d9ac:	01620162 	.word	0x01620162
    d9b0:	01620162 	.word	0x01620162
    d9b4:	01620162 	.word	0x01620162
    d9b8:	01620162 	.word	0x01620162
    d9bc:	01620162 	.word	0x01620162
    d9c0:	01620162 	.word	0x01620162
    d9c4:	015c0162 	.word	0x015c0162
    d9c8:	01620162 	.word	0x01620162
    d9cc:	0156      	.short	0x0156
		le_set_event_mask(cmd, evt);
    d9ce:	4611      	mov	r1, r2
    d9d0:	4618      	mov	r0, r3
    d9d2:	f7f6 fe3f 	bl	4654 <le_set_event_mask>
	return 0;
    d9d6:	2000      	movs	r0, #0
		break;
    d9d8:	bd08      	pop	{r3, pc}
		le_read_buffer_size(cmd, evt);
    d9da:	4611      	mov	r1, r2
    d9dc:	4618      	mov	r0, r3
    d9de:	f7ff f86c 	bl	caba <le_read_buffer_size>
	return 0;
    d9e2:	2000      	movs	r0, #0
		break;
    d9e4:	bd08      	pop	{r3, pc}
		le_read_local_features(cmd, evt);
    d9e6:	4611      	mov	r1, r2
    d9e8:	4618      	mov	r0, r3
    d9ea:	f7ff fabb 	bl	cf64 <le_read_local_features>
	return 0;
    d9ee:	2000      	movs	r0, #0
		break;
    d9f0:	bd08      	pop	{r3, pc}
		le_set_random_address(cmd, evt);
    d9f2:	4611      	mov	r1, r2
    d9f4:	4618      	mov	r0, r3
    d9f6:	f7ff fc03 	bl	d200 <le_set_random_address>
	return 0;
    d9fa:	2000      	movs	r0, #0
		break;
    d9fc:	bd08      	pop	{r3, pc}
		le_read_wl_size(cmd, evt);
    d9fe:	4611      	mov	r1, r2
    da00:	4618      	mov	r0, r3
    da02:	f7ff fc17 	bl	d234 <le_read_wl_size>
	return 0;
    da06:	2000      	movs	r0, #0
		break;
    da08:	bd08      	pop	{r3, pc}
		le_clear_wl(cmd, evt);
    da0a:	4611      	mov	r1, r2
    da0c:	4618      	mov	r0, r3
    da0e:	f7ff fc1d 	bl	d24c <le_clear_wl>
	return 0;
    da12:	2000      	movs	r0, #0
		break;
    da14:	bd08      	pop	{r3, pc}
		le_add_dev_to_wl(cmd, evt);
    da16:	4611      	mov	r1, r2
    da18:	4618      	mov	r0, r3
    da1a:	f7ff fc21 	bl	d260 <le_add_dev_to_wl>
	return 0;
    da1e:	2000      	movs	r0, #0
		break;
    da20:	bd08      	pop	{r3, pc}
		le_rem_dev_from_wl(cmd, evt);
    da22:	4611      	mov	r1, r2
    da24:	4618      	mov	r0, r3
    da26:	f7ff fc27 	bl	d278 <le_rem_dev_from_wl>
	return 0;
    da2a:	2000      	movs	r0, #0
		break;
    da2c:	bd08      	pop	{r3, pc}
		le_encrypt(cmd, evt);
    da2e:	4611      	mov	r1, r2
    da30:	4618      	mov	r0, r3
    da32:	f7ff fc2d 	bl	d290 <le_encrypt>
	return 0;
    da36:	2000      	movs	r0, #0
		break;
    da38:	bd08      	pop	{r3, pc}
		le_rand(cmd, evt);
    da3a:	4611      	mov	r1, r2
    da3c:	4618      	mov	r0, r3
    da3e:	f7ff fca4 	bl	d38a <le_rand>
	return 0;
    da42:	2000      	movs	r0, #0
		break;
    da44:	bd08      	pop	{r3, pc}
		le_read_supp_states(cmd, evt);
    da46:	4611      	mov	r1, r2
    da48:	4618      	mov	r0, r3
    da4a:	f7ff f843 	bl	cad4 <le_read_supp_states>
	return 0;
    da4e:	2000      	movs	r0, #0
		break;
    da50:	bd08      	pop	{r3, pc}
		le_set_adv_param(cmd, evt);
    da52:	4611      	mov	r1, r2
    da54:	4618      	mov	r0, r3
    da56:	f7ff fca4 	bl	d3a2 <le_set_adv_param>
	return 0;
    da5a:	2000      	movs	r0, #0
		break;
    da5c:	bd08      	pop	{r3, pc}
		le_read_adv_chan_tx_power(cmd, evt);
    da5e:	4611      	mov	r1, r2
    da60:	4618      	mov	r0, r3
    da62:	f7ff f84a 	bl	cafa <le_read_adv_chan_tx_power>
	return 0;
    da66:	2000      	movs	r0, #0
		break;
    da68:	bd08      	pop	{r3, pc}
		le_set_adv_data(cmd, evt);
    da6a:	4611      	mov	r1, r2
    da6c:	4618      	mov	r0, r3
    da6e:	f7ff fcbb 	bl	d3e8 <le_set_adv_data>
	return 0;
    da72:	2000      	movs	r0, #0
		break;
    da74:	bd08      	pop	{r3, pc}
		le_set_scan_rsp_data(cmd, evt);
    da76:	4611      	mov	r1, r2
    da78:	4618      	mov	r0, r3
    da7a:	f7ff fcc3 	bl	d404 <le_set_scan_rsp_data>
	return 0;
    da7e:	2000      	movs	r0, #0
		break;
    da80:	bd08      	pop	{r3, pc}
		le_set_adv_enable(cmd, evt);
    da82:	4611      	mov	r1, r2
    da84:	4618      	mov	r0, r3
    da86:	f7ff fccb 	bl	d420 <le_set_adv_enable>
	return 0;
    da8a:	2000      	movs	r0, #0
		break;
    da8c:	bd08      	pop	{r3, pc}
		le_set_scan_param(cmd, evt);
    da8e:	4611      	mov	r1, r2
    da90:	4618      	mov	r0, r3
    da92:	f7ff fcd6 	bl	d442 <le_set_scan_param>
	return 0;
    da96:	2000      	movs	r0, #0
		break;
    da98:	bd08      	pop	{r3, pc}
		le_set_scan_enable(cmd, evt);
    da9a:	4611      	mov	r1, r2
    da9c:	4618      	mov	r0, r3
    da9e:	f7ff fceb 	bl	d478 <le_set_scan_enable>
	return 0;
    daa2:	2000      	movs	r0, #0
		break;
    daa4:	bd08      	pop	{r3, pc}
		le_create_connection(cmd, evt);
    daa6:	4611      	mov	r1, r2
    daa8:	4618      	mov	r0, r3
    daaa:	f7ff fd09 	bl	d4c0 <le_create_connection>
	return 0;
    daae:	2000      	movs	r0, #0
		break;
    dab0:	bd08      	pop	{r3, pc}
		le_create_conn_cancel(cmd, evt);
    dab2:	4611      	mov	r1, r2
    dab4:	4618      	mov	r0, r3
    dab6:	f7ff fd23 	bl	d500 <le_create_conn_cancel>
	return 0;
    daba:	2000      	movs	r0, #0
		break;
    dabc:	bd08      	pop	{r3, pc}
		le_set_host_chan_classif(cmd, evt);
    dabe:	4611      	mov	r1, r2
    dac0:	4618      	mov	r0, r3
    dac2:	f7ff fd2c 	bl	d51e <le_set_host_chan_classif>
	return 0;
    dac6:	2000      	movs	r0, #0
		break;
    dac8:	bd08      	pop	{r3, pc}
		le_start_encryption(cmd, evt);
    daca:	4611      	mov	r1, r2
    dacc:	4618      	mov	r0, r3
    dace:	f7ff fd36 	bl	d53e <le_start_encryption>
	return 0;
    dad2:	2000      	movs	r0, #0
		break;
    dad4:	bd08      	pop	{r3, pc}
		le_ltk_req_reply(cmd, evt);
    dad6:	4611      	mov	r1, r2
    dad8:	4618      	mov	r0, r3
    dada:	f7ff fd41 	bl	d560 <le_ltk_req_reply>
	return 0;
    dade:	2000      	movs	r0, #0
		break;
    dae0:	bd08      	pop	{r3, pc}
		le_ltk_req_neg_reply(cmd, evt);
    dae2:	4611      	mov	r1, r2
    dae4:	4618      	mov	r0, r3
    dae6:	f7ff fd51 	bl	d58c <le_ltk_req_neg_reply>
	return 0;
    daea:	2000      	movs	r0, #0
		break;
    daec:	bd08      	pop	{r3, pc}
		le_read_chan_map(cmd, evt);
    daee:	4611      	mov	r1, r2
    daf0:	4618      	mov	r0, r3
    daf2:	f7ff fd61 	bl	d5b8 <le_read_chan_map>
	return 0;
    daf6:	2000      	movs	r0, #0
		break;
    daf8:	bd08      	pop	{r3, pc}
		le_read_remote_features(cmd, evt);
    dafa:	4611      	mov	r1, r2
    dafc:	4618      	mov	r0, r3
    dafe:	f7ff fd71 	bl	d5e4 <le_read_remote_features>
	return 0;
    db02:	2000      	movs	r0, #0
		break;
    db04:	bd08      	pop	{r3, pc}
		le_conn_update(cmd, evt);
    db06:	4611      	mov	r1, r2
    db08:	4618      	mov	r0, r3
    db0a:	f7f9 f9c1 	bl	6e90 <le_conn_update>
	return 0;
    db0e:	2000      	movs	r0, #0
		break;
    db10:	bd08      	pop	{r3, pc}
		le_conn_param_req_reply(cmd, evt);
    db12:	4611      	mov	r1, r2
    db14:	4618      	mov	r0, r3
    db16:	f7f7 fe47 	bl	57a8 <le_conn_param_req_reply>
	return 0;
    db1a:	2000      	movs	r0, #0
		break;
    db1c:	bd08      	pop	{r3, pc}
		le_conn_param_req_neg_reply(cmd, evt);
    db1e:	4611      	mov	r1, r2
    db20:	4618      	mov	r0, r3
    db22:	f7ff fd6b 	bl	d5fc <le_conn_param_req_neg_reply>
	return 0;
    db26:	2000      	movs	r0, #0
		break;
    db28:	bd08      	pop	{r3, pc}
		le_set_data_len(cmd, evt);
    db2a:	4611      	mov	r1, r2
    db2c:	4618      	mov	r0, r3
    db2e:	f7ff fd80 	bl	d632 <le_set_data_len>
	return 0;
    db32:	2000      	movs	r0, #0
		break;
    db34:	bd08      	pop	{r3, pc}
		le_read_default_data_len(cmd, evt);
    db36:	4611      	mov	r1, r2
    db38:	4618      	mov	r0, r3
    db3a:	f7ff fd90 	bl	d65e <le_read_default_data_len>
	return 0;
    db3e:	2000      	movs	r0, #0
		break;
    db40:	bd08      	pop	{r3, pc}
		le_write_default_data_len(cmd, evt);
    db42:	4611      	mov	r1, r2
    db44:	4618      	mov	r0, r3
    db46:	f7ff fd97 	bl	d678 <le_write_default_data_len>
	return 0;
    db4a:	2000      	movs	r0, #0
		break;
    db4c:	bd08      	pop	{r3, pc}
		le_read_max_data_len(cmd, evt);
    db4e:	4611      	mov	r1, r2
    db50:	4618      	mov	r0, r3
    db52:	f7ff fda3 	bl	d69c <le_read_max_data_len>
	return 0;
    db56:	2000      	movs	r0, #0
		break;
    db58:	bd08      	pop	{r3, pc}
		le_read_phy(cmd, evt);
    db5a:	4611      	mov	r1, r2
    db5c:	4618      	mov	r0, r3
    db5e:	f7ff fde7 	bl	d730 <le_read_phy>
	return 0;
    db62:	2000      	movs	r0, #0
		break;
    db64:	bd08      	pop	{r3, pc}
		le_set_default_phy(cmd, evt);
    db66:	4611      	mov	r1, r2
    db68:	4618      	mov	r0, r3
    db6a:	f7ff fe0c 	bl	d786 <le_set_default_phy>
	return 0;
    db6e:	2000      	movs	r0, #0
		break;
    db70:	bd08      	pop	{r3, pc}
		le_set_phy(cmd, evt);
    db72:	4611      	mov	r1, r2
    db74:	4618      	mov	r0, r3
    db76:	f7ff fe23 	bl	d7c0 <le_set_phy>
	return 0;
    db7a:	2000      	movs	r0, #0
		break;
    db7c:	bd08      	pop	{r3, pc}
		le_add_dev_to_rl(cmd, evt);
    db7e:	4611      	mov	r1, r2
    db80:	4618      	mov	r0, r3
    db82:	f7ff fe40 	bl	d806 <le_add_dev_to_rl>
	return 0;
    db86:	2000      	movs	r0, #0
		break;
    db88:	bd08      	pop	{r3, pc}
		le_rem_dev_from_rl(cmd, evt);
    db8a:	4611      	mov	r1, r2
    db8c:	4618      	mov	r0, r3
    db8e:	f7ff fe49 	bl	d824 <le_rem_dev_from_rl>
	return 0;
    db92:	2000      	movs	r0, #0
		break;
    db94:	bd08      	pop	{r3, pc}
		le_clear_rl(cmd, evt);
    db96:	4611      	mov	r1, r2
    db98:	4618      	mov	r0, r3
    db9a:	f7ff fe4f 	bl	d83c <le_clear_rl>
	return 0;
    db9e:	2000      	movs	r0, #0
		break;
    dba0:	bd08      	pop	{r3, pc}
		le_read_rl_size(cmd, evt);
    dba2:	4611      	mov	r1, r2
    dba4:	4618      	mov	r0, r3
    dba6:	f7ff fe53 	bl	d850 <le_read_rl_size>
	return 0;
    dbaa:	2000      	movs	r0, #0
		break;
    dbac:	bd08      	pop	{r3, pc}
		le_read_peer_rpa(cmd, evt);
    dbae:	4611      	mov	r1, r2
    dbb0:	4618      	mov	r0, r3
    dbb2:	f7ff fe59 	bl	d868 <le_read_peer_rpa>
	return 0;
    dbb6:	2000      	movs	r0, #0
		break;
    dbb8:	bd08      	pop	{r3, pc}
		le_read_local_rpa(cmd, evt);
    dbba:	4611      	mov	r1, r2
    dbbc:	4618      	mov	r0, r3
    dbbe:	f7ff fe67 	bl	d890 <le_read_local_rpa>
	return 0;
    dbc2:	2000      	movs	r0, #0
		break;
    dbc4:	bd08      	pop	{r3, pc}
		le_set_addr_res_enable(cmd, evt);
    dbc6:	4611      	mov	r1, r2
    dbc8:	4618      	mov	r0, r3
    dbca:	f7ff fe75 	bl	d8b8 <le_set_addr_res_enable>
	return 0;
    dbce:	2000      	movs	r0, #0
		break;
    dbd0:	bd08      	pop	{r3, pc}
		le_set_rpa_timeout(cmd, evt);
    dbd2:	4611      	mov	r1, r2
    dbd4:	4618      	mov	r0, r3
    dbd6:	f7ff fe7d 	bl	d8d4 <le_set_rpa_timeout>
	return 0;
    dbda:	2000      	movs	r0, #0
		break;
    dbdc:	bd08      	pop	{r3, pc}
		le_set_privacy_mode(cmd, evt);
    dbde:	4611      	mov	r1, r2
    dbe0:	4618      	mov	r0, r3
    dbe2:	f7ff fe84 	bl	d8ee <le_set_privacy_mode>
	return 0;
    dbe6:	2000      	movs	r0, #0
		break;
    dbe8:	bd08      	pop	{r3, pc}
		le_read_tx_power(cmd, evt);
    dbea:	4611      	mov	r1, r2
    dbec:	4618      	mov	r0, r3
    dbee:	f7ff fe8b 	bl	d908 <le_read_tx_power>
	return 0;
    dbf2:	2000      	movs	r0, #0
		break;
    dbf4:	bd08      	pop	{r3, pc}
		return -EINVAL;
    dbf6:	f06f 0015 	mvn.w	r0, #21
}
    dbfa:	bd08      	pop	{r3, pc}

0000dbfc <data_buf_overflow>:
	if (!(event_mask & BT_EVT_MASK_DATA_BUFFER_OVERFLOW)) {
    dbfc:	4b0e      	ldr	r3, [pc, #56]	; (dc38 <data_buf_overflow+0x3c>)
    dbfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    dc02:	f002 7200 	and.w	r2, r2, #33554432	; 0x2000000
    dc06:	2300      	movs	r3, #0
    dc08:	4313      	orrs	r3, r2
    dc0a:	d100      	bne.n	dc0e <data_buf_overflow+0x12>
    dc0c:	4770      	bx	lr
{
    dc0e:	b510      	push	{r4, lr}
    dc10:	4604      	mov	r4, r0
	*buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    dc12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    dc16:	2001      	movs	r0, #1
    dc18:	f7f8 fa1c 	bl	6054 <bt_buf_get_rx>
    dc1c:	6020      	str	r0, [r4, #0]
	evt_create(*buf, BT_HCI_EVT_DATA_BUF_OVERFLOW, sizeof(*ep));
    dc1e:	2201      	movs	r2, #1
    dc20:	211a      	movs	r1, #26
    dc22:	f7fe febf 	bl	c9a4 <evt_create>
	ep = net_buf_add(*buf, sizeof(*ep));
    dc26:	6820      	ldr	r0, [r4, #0]
    dc28:	2101      	movs	r1, #1
    dc2a:	3008      	adds	r0, #8
    dc2c:	f00c fbe2 	bl	1a3f4 <net_buf_simple_add>
	ep->link_type = BT_OVERFLOW_LINK_ACL;
    dc30:	2301      	movs	r3, #1
    dc32:	7003      	strb	r3, [r0, #0]
    dc34:	bd10      	pop	{r4, pc}
    dc36:	bf00      	nop
    dc38:	2000bba8 	.word	0x2000bba8

0000dc3c <encode_data_ctrl>:
{
    dc3c:	b510      	push	{r4, lr}
    dc3e:	460c      	mov	r4, r1
	u16_t handle = node_rx->hdr.handle;
    dc40:	88c1      	ldrh	r1, [r0, #6]
	switch (pdu_data->payload.llctrl.opcode) {
    dc42:	78e0      	ldrb	r0, [r4, #3]
    dc44:	3803      	subs	r0, #3
    dc46:	2812      	cmp	r0, #18
    dc48:	d82e      	bhi.n	dca8 <encode_data_ctrl+0x6c>
    dc4a:	e8df f000 	tbb	[pc, r0]
    dc4e:	2d0a      	.short	0x2d0a
    dc50:	2d290e2d 	.word	0x2d290e2d
    dc54:	192d2d12 	.word	0x192d2d12
    dc58:	2d212d1d 	.word	0x2d212d1d
    dc5c:	252d2d2d 	.word	0x252d2d2d
    dc60:	25          	.byte	0x25
    dc61:	00          	.byte	0x00
		le_ltk_request(pdu_data, handle, buf);
    dc62:	4620      	mov	r0, r4
    dc64:	f7f7 feec 	bl	5a40 <le_ltk_request>
		break;
    dc68:	bd10      	pop	{r4, pc}
		encrypt_change(0x00, handle, buf);
    dc6a:	2000      	movs	r0, #0
    dc6c:	f7ff f826 	bl	ccbc <encrypt_change>
		break;
    dc70:	bd10      	pop	{r4, pc}
		le_remote_feat_complete(0x00, pdu_data, handle, buf);
    dc72:	4613      	mov	r3, r2
    dc74:	460a      	mov	r2, r1
    dc76:	4621      	mov	r1, r4
    dc78:	2000      	movs	r0, #0
    dc7a:	f7f7 fceb 	bl	5654 <le_remote_feat_complete>
		break;
    dc7e:	bd10      	pop	{r4, pc}
		remote_version_info(pdu_data, handle, buf);
    dc80:	4620      	mov	r0, r4
    dc82:	f7fe fff5 	bl	cc70 <remote_version_info>
		break;
    dc86:	bd10      	pop	{r4, pc}
		encrypt_change(pdu_data->payload.llctrl.ctrldata.reject_ind.
    dc88:	7920      	ldrb	r0, [r4, #4]
    dc8a:	f7ff f817 	bl	ccbc <encrypt_change>
		break;
    dc8e:	bd10      	pop	{r4, pc}
		le_conn_param_req(pdu_data, handle, buf);
    dc90:	4620      	mov	r0, r4
    dc92:	f7f7 fdd7 	bl	5844 <le_conn_param_req>
		break;
    dc96:	bd10      	pop	{r4, pc}
		le_data_len_change(pdu_data, handle, buf);
    dc98:	4620      	mov	r0, r4
    dc9a:	f7f6 fa43 	bl	4124 <le_data_len_change>
		break;
    dc9e:	bd10      	pop	{r4, pc}
		le_unknown_rsp(pdu_data, handle, buf);
    dca0:	4620      	mov	r0, r4
    dca2:	f7ff fb66 	bl	d372 <le_unknown_rsp>
		break;
    dca6:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    dca8:	4040      	eors	r0, r0
    dcaa:	f380 8811 	msr	BASEPRI, r0
    dcae:	f04f 0004 	mov.w	r0, #4
    dcb2:	df02      	svc	2

0000dcb4 <le_advertising_report>:
{
    dcb4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    dcb8:	b082      	sub	sp, #8
    dcba:	4605      	mov	r5, r0
    dcbc:	460e      	mov	r6, r1
    dcbe:	4691      	mov	r9, r2
	const u8_t c_adv_type[] = { 0x00, 0x01, 0x03, 0xff, 0x04,
    dcc0:	4b90      	ldr	r3, [pc, #576]	; (df04 <le_advertising_report+0x250>)
    dcc2:	e893 0003 	ldmia.w	r3, {r0, r1}
    dcc6:	9000      	str	r0, [sp, #0]
    dcc8:	f8ad 1004 	strh.w	r1, [sp, #4]
    dccc:	0c09      	lsrs	r1, r1, #16
    dcce:	f88d 1006 	strb.w	r1, [sp, #6]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    dcd2:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dcd4:	330b      	adds	r3, #11
    dcd6:	f816 8003 	ldrb.w	r8, [r6, r3]
	if (adv->tx_addr) {
    dcda:	782b      	ldrb	r3, [r5, #0]
    dcdc:	f013 0f40 	tst.w	r3, #64	; 0x40
    dce0:	d125      	bne.n	dd2e <le_advertising_report+0x7a>
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT)) {
    dce2:	4b89      	ldr	r3, [pc, #548]	; (df08 <le_advertising_report+0x254>)
    dce4:	e9d3 2300 	ldrd	r2, r3, [r3]
    dce8:	2200      	movs	r2, #0
    dcea:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    dcee:	4313      	orrs	r3, r2
    dcf0:	f000 80b0 	beq.w	de54 <le_advertising_report+0x1a0>
		   offsetof(struct pdu_adv, payload) + adv->len + 2];
    dcf4:	786b      	ldrb	r3, [r5, #1]
	direct = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    dcf6:	330c      	adds	r3, #12
    dcf8:	5cf7      	ldrb	r7, [r6, r3]
	if ((!direct && !(le_event_mask & BT_EVT_MASK_LE_ADVERTISING_REPORT)) ||
    dcfa:	b947      	cbnz	r7, dd0e <le_advertising_report+0x5a>
    dcfc:	4b83      	ldr	r3, [pc, #524]	; (df0c <le_advertising_report+0x258>)
    dcfe:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd02:	f002 0202 	and.w	r2, r2, #2
    dd06:	2300      	movs	r3, #0
    dd08:	4313      	orrs	r3, r2
    dd0a:	f000 80a3 	beq.w	de54 <le_advertising_report+0x1a0>
    dd0e:	b147      	cbz	r7, dd22 <le_advertising_report+0x6e>
	    (direct && !(le_event_mask & BT_HCI_EVT_LE_DIRECT_ADV_REPORT))) {
    dd10:	4b7e      	ldr	r3, [pc, #504]	; (df0c <le_advertising_report+0x258>)
    dd12:	e9d3 2300 	ldrd	r2, r3, [r3]
    dd16:	f002 020b 	and.w	r2, r2, #11
    dd1a:	2300      	movs	r3, #0
    dd1c:	4313      	orrs	r3, r2
    dd1e:	f000 8099 	beq.w	de54 <le_advertising_report+0x1a0>
	if (dup_count >= 0) {
    dd22:	4b7b      	ldr	r3, [pc, #492]	; (df10 <le_advertising_report+0x25c>)
    dd24:	681b      	ldr	r3, [r3, #0]
    dd26:	2b00      	cmp	r3, #0
    dd28:	db08      	blt.n	dd3c <le_advertising_report+0x88>
    dd2a:	2400      	movs	r4, #0
    dd2c:	e009      	b.n	dd42 <le_advertising_report+0x8e>
		ll_rl_crpa_set(0x00, NULL, rl_idx,
    dd2e:	1cab      	adds	r3, r5, #2
    dd30:	4642      	mov	r2, r8
    dd32:	2100      	movs	r1, #0
    dd34:	4608      	mov	r0, r1
    dd36:	f00b fea9 	bl	19a8c <ll_rl_crpa_set>
    dd3a:	e7d2      	b.n	dce2 <le_advertising_report+0x2e>
	return false;
    dd3c:	2300      	movs	r3, #0
    dd3e:	e054      	b.n	ddea <le_advertising_report+0x136>
		for (i = 0; i < dup_count; i++) {
    dd40:	3401      	adds	r4, #1
    dd42:	4b73      	ldr	r3, [pc, #460]	; (df10 <le_advertising_report+0x25c>)
    dd44:	681b      	ldr	r3, [r3, #0]
    dd46:	429c      	cmp	r4, r3
    dd48:	da26      	bge.n	dd98 <le_advertising_report+0xe4>
				    &dup_filter[i].addr.a.val[0],
    dd4a:	4972      	ldr	r1, [pc, #456]	; (df14 <le_advertising_report+0x260>)
    dd4c:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
			if (!memcmp(&adv->payload.adv_ind.addr[0],
    dd50:	2206      	movs	r2, #6
    dd52:	3102      	adds	r1, #2
    dd54:	1ca8      	adds	r0, r5, #2
    dd56:	f01b fd8b 	bl	29870 <memcmp>
    dd5a:	2800      	cmp	r0, #0
    dd5c:	d1f0      	bne.n	dd40 <le_advertising_report+0x8c>
			    adv->tx_addr == dup_filter[i].addr.type) {
    dd5e:	782b      	ldrb	r3, [r5, #0]
    dd60:	f3c3 1380 	ubfx	r3, r3, #6, #1
    dd64:	4a6b      	ldr	r2, [pc, #428]	; (df14 <le_advertising_report+0x260>)
    dd66:	eb02 02c4 	add.w	r2, r2, r4, lsl #3
    dd6a:	7852      	ldrb	r2, [r2, #1]
				    sizeof(bt_addr_t)) &&
    dd6c:	4293      	cmp	r3, r2
    dd6e:	d1e7      	bne.n	dd40 <le_advertising_report+0x8c>
				if (dup_filter[i].mask & BIT(adv->type)) {
    dd70:	4b68      	ldr	r3, [pc, #416]	; (df14 <le_advertising_report+0x260>)
    dd72:	f813 2034 	ldrb.w	r2, [r3, r4, lsl #3]
    dd76:	782b      	ldrb	r3, [r5, #0]
    dd78:	f003 030f 	and.w	r3, r3, #15
    dd7c:	fa22 f103 	lsr.w	r1, r2, r3
    dd80:	f011 0f01 	tst.w	r1, #1
    dd84:	d171      	bne.n	de6a <le_advertising_report+0x1b6>
				dup_filter[i].mask |= BIT(adv->type);
    dd86:	2101      	movs	r1, #1
    dd88:	fa01 f303 	lsl.w	r3, r1, r3
    dd8c:	431a      	orrs	r2, r3
    dd8e:	4b61      	ldr	r3, [pc, #388]	; (df14 <le_advertising_report+0x260>)
    dd90:	f803 2034 	strb.w	r2, [r3, r4, lsl #3]
				return false;
    dd94:	2300      	movs	r3, #0
    dd96:	e028      	b.n	ddea <le_advertising_report+0x136>
		memcpy(&dup_filter[dup_curr].addr.a.val[0],
    dd98:	f8df a17c 	ldr.w	sl, [pc, #380]	; df18 <le_advertising_report+0x264>
    dd9c:	f8da 0000 	ldr.w	r0, [sl]
    dda0:	4c5c      	ldr	r4, [pc, #368]	; (df14 <le_advertising_report+0x260>)
    dda2:	eb04 00c0 	add.w	r0, r4, r0, lsl #3
    dda6:	2206      	movs	r2, #6
    dda8:	1ca9      	adds	r1, r5, #2
    ddaa:	3002      	adds	r0, #2
    ddac:	f7f2 fa88 	bl	2c0 <memcpy>
		dup_filter[dup_curr].addr.type = adv->tx_addr;
    ddb0:	f8da 3000 	ldr.w	r3, [sl]
    ddb4:	782a      	ldrb	r2, [r5, #0]
    ddb6:	f3c2 1280 	ubfx	r2, r2, #6, #1
    ddba:	eb04 01c3 	add.w	r1, r4, r3, lsl #3
    ddbe:	704a      	strb	r2, [r1, #1]
		dup_filter[dup_curr].mask = BIT(adv->type);
    ddc0:	782a      	ldrb	r2, [r5, #0]
    ddc2:	f002 010f 	and.w	r1, r2, #15
    ddc6:	2201      	movs	r2, #1
    ddc8:	408a      	lsls	r2, r1
    ddca:	f804 2033 	strb.w	r2, [r4, r3, lsl #3]
		if (dup_count < CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    ddce:	4a50      	ldr	r2, [pc, #320]	; (df10 <le_advertising_report+0x25c>)
    ddd0:	6812      	ldr	r2, [r2, #0]
    ddd2:	2a0f      	cmp	r2, #15
    ddd4:	dc41      	bgt.n	de5a <le_advertising_report+0x1a6>
			dup_count++;
    ddd6:	3201      	adds	r2, #1
    ddd8:	4b4d      	ldr	r3, [pc, #308]	; (df10 <le_advertising_report+0x25c>)
    ddda:	601a      	str	r2, [r3, #0]
			dup_curr = dup_count;
    dddc:	f8ca 2000 	str.w	r2, [sl]
		if (dup_curr == CONFIG_BT_CTLR_DUP_FILTER_LEN) {
    dde0:	4b4d      	ldr	r3, [pc, #308]	; (df18 <le_advertising_report+0x264>)
    dde2:	681b      	ldr	r3, [r3, #0]
    dde4:	2b10      	cmp	r3, #16
    dde6:	d03c      	beq.n	de62 <le_advertising_report+0x1ae>
	return false;
    dde8:	2300      	movs	r3, #0
	if (dup_found(adv)) {
    ddea:	bb9b      	cbnz	r3, de54 <le_advertising_report+0x1a0>
	if (adv->type != PDU_ADV_TYPE_DIRECT_IND) {
    ddec:	782b      	ldrb	r3, [r5, #0]
    ddee:	f003 030f 	and.w	r3, r3, #15
    ddf2:	2b01      	cmp	r3, #1
    ddf4:	d03b      	beq.n	de6e <le_advertising_report+0x1ba>
		data_len = (adv->len - BDADDR_SIZE);
    ddf6:	786c      	ldrb	r4, [r5, #1]
    ddf8:	3c06      	subs	r4, #6
    ddfa:	b2e4      	uxtb	r4, r4
		  offsetof(struct pdu_adv, payload) + adv->len];
    ddfc:	786a      	ldrb	r2, [r5, #1]
    ddfe:	320a      	adds	r2, #10
	rssi = -b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    de00:	f816 a002 	ldrb.w	sl, [r6, r2]
    de04:	f1ca 0a00 	rsb	sl, sl, #0
    de08:	fa4f fa8a 	sxtb.w	sl, sl
	if (direct) {
    de0c:	2f00      	cmp	r7, #0
    de0e:	d041      	beq.n	de94 <le_advertising_report+0x1e0>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    de10:	2b01      	cmp	r3, #1
    de12:	d12e      	bne.n	de72 <le_advertising_report+0x1be>
		drp = meta_evt(buf, BT_HCI_EVT_LE_DIRECT_ADV_REPORT,
    de14:	2211      	movs	r2, #17
    de16:	210b      	movs	r1, #11
    de18:	4648      	mov	r0, r9
    de1a:	f7fe fe8f 	bl	cb3c <meta_evt>
    de1e:	4604      	mov	r4, r0
		drp->num_reports = 1;
    de20:	2301      	movs	r3, #1
    de22:	7003      	strb	r3, [r0, #0]
		dir_info->evt_type = c_adv_type[PDU_ADV_TYPE_DIRECT_IND];
    de24:	7043      	strb	r3, [r0, #1]
		if (rl_idx < ll_rl_size_get()) {
    de26:	f00b fce5 	bl	197f4 <ll_rl_size_get>
    de2a:	4580      	cmp	r8, r0
    de2c:	d227      	bcs.n	de7e <le_advertising_report+0x1ca>
			ll_rl_id_addr_get(rl_idx, &dir_info->addr.type,
    de2e:	1ce2      	adds	r2, r4, #3
    de30:	1ca1      	adds	r1, r4, #2
    de32:	4640      	mov	r0, r8
    de34:	f00b fa86 	bl	19344 <ll_rl_id_addr_get>
			dir_info->addr.type += 2;
    de38:	78a3      	ldrb	r3, [r4, #2]
    de3a:	3302      	adds	r3, #2
    de3c:	70a3      	strb	r3, [r4, #2]
		dir_info->dir_addr.type = 0x1;
    de3e:	2301      	movs	r3, #1
    de40:	7263      	strb	r3, [r4, #9]
		memcpy(&dir_info->dir_addr.a.val[0],
    de42:	2206      	movs	r2, #6
    de44:	f105 0108 	add.w	r1, r5, #8
    de48:	f104 000a 	add.w	r0, r4, #10
    de4c:	f7f2 fa38 	bl	2c0 <memcpy>
		dir_info->rssi = rssi;
    de50:	f884 a010 	strb.w	sl, [r4, #16]
}
    de54:	b002      	add	sp, #8
    de56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			dup_curr++;
    de5a:	3301      	adds	r3, #1
    de5c:	4a2e      	ldr	r2, [pc, #184]	; (df18 <le_advertising_report+0x264>)
    de5e:	6013      	str	r3, [r2, #0]
    de60:	e7be      	b.n	dde0 <le_advertising_report+0x12c>
			dup_curr = 0;
    de62:	2300      	movs	r3, #0
    de64:	4a2c      	ldr	r2, [pc, #176]	; (df18 <le_advertising_report+0x264>)
    de66:	6013      	str	r3, [r2, #0]
    de68:	e7bf      	b.n	ddea <le_advertising_report+0x136>
					return true;
    de6a:	2301      	movs	r3, #1
    de6c:	e7bd      	b.n	ddea <le_advertising_report+0x136>
		data_len = 0;
    de6e:	2400      	movs	r4, #0
    de70:	e7c4      	b.n	ddfc <le_advertising_report+0x148>
		LL_ASSERT(adv->type == PDU_ADV_TYPE_DIRECT_IND);
    de72:	4040      	eors	r0, r0
    de74:	f380 8811 	msr	BASEPRI, r0
    de78:	f04f 0004 	mov.w	r0, #4
    de7c:	df02      	svc	2
			dir_info->addr.type = adv->tx_addr;
    de7e:	4629      	mov	r1, r5
    de80:	f811 3b02 	ldrb.w	r3, [r1], #2
    de84:	f3c3 1380 	ubfx	r3, r3, #6, #1
    de88:	70a3      	strb	r3, [r4, #2]
			memcpy(&dir_info->addr.a.val[0],
    de8a:	2206      	movs	r2, #6
    de8c:	1ce0      	adds	r0, r4, #3
    de8e:	f7f2 fa17 	bl	2c0 <memcpy>
    de92:	e7d4      	b.n	de3e <le_advertising_report+0x18a>
	sep = meta_evt(buf, BT_HCI_EVT_LE_ADVERTISING_REPORT,
    de94:	f104 020b 	add.w	r2, r4, #11
    de98:	b2d2      	uxtb	r2, r2
    de9a:	2102      	movs	r1, #2
    de9c:	4648      	mov	r0, r9
    de9e:	f7fe fe4d 	bl	cb3c <meta_evt>
    dea2:	4607      	mov	r7, r0
	sep->num_reports = 1;
    dea4:	2301      	movs	r3, #1
    dea6:	7003      	strb	r3, [r0, #0]
	adv_info->evt_type = c_adv_type[adv->type];
    dea8:	782b      	ldrb	r3, [r5, #0]
    deaa:	f003 030f 	and.w	r3, r3, #15
    deae:	aa02      	add	r2, sp, #8
    deb0:	4413      	add	r3, r2
    deb2:	f813 3c08 	ldrb.w	r3, [r3, #-8]
    deb6:	7043      	strb	r3, [r0, #1]
		   offsetof(struct pdu_adv, payload) + adv->len + 1];
    deb8:	786b      	ldrb	r3, [r5, #1]
	rl_idx = b[offsetof(struct radio_pdu_node_rx, pdu_data) +
    deba:	330b      	adds	r3, #11
    debc:	5cf6      	ldrb	r6, [r6, r3]
	if (rl_idx < ll_rl_size_get()) {
    debe:	f00b fc99 	bl	197f4 <ll_rl_size_get>
    dec2:	4286      	cmp	r6, r0
    dec4:	d212      	bcs.n	deec <le_advertising_report+0x238>
		ll_rl_id_addr_get(rl_idx, &adv_info->addr.type,
    dec6:	1cfa      	adds	r2, r7, #3
    dec8:	1cb9      	adds	r1, r7, #2
    deca:	4630      	mov	r0, r6
    decc:	f00b fa3a 	bl	19344 <ll_rl_id_addr_get>
		adv_info->addr.type += 2;
    ded0:	78bb      	ldrb	r3, [r7, #2]
    ded2:	3302      	adds	r3, #2
    ded4:	70bb      	strb	r3, [r7, #2]
	adv_info->length = data_len;
    ded6:	727c      	strb	r4, [r7, #9]
	memcpy(&adv_info->data[0], &adv->payload.adv_ind.data[0], data_len);
    ded8:	370a      	adds	r7, #10
    deda:	4622      	mov	r2, r4
    dedc:	f105 0108 	add.w	r1, r5, #8
    dee0:	4638      	mov	r0, r7
    dee2:	f7f2 f9ed 	bl	2c0 <memcpy>
	*prssi = rssi;
    dee6:	f807 a004 	strb.w	sl, [r7, r4]
    deea:	e7b3      	b.n	de54 <le_advertising_report+0x1a0>
		adv_info->addr.type = adv->tx_addr;
    deec:	4629      	mov	r1, r5
    deee:	f811 3b02 	ldrb.w	r3, [r1], #2
    def2:	f3c3 1380 	ubfx	r3, r3, #6, #1
    def6:	70bb      	strb	r3, [r7, #2]
		memcpy(&adv_info->addr.a.val[0], &adv->payload.adv_ind.addr[0],
    def8:	2206      	movs	r2, #6
    defa:	1cf8      	adds	r0, r7, #3
    defc:	f7f2 f9e0 	bl	2c0 <memcpy>
    df00:	e7e9      	b.n	ded6 <le_advertising_report+0x222>
    df02:	bf00      	nop
    df04:	0002a640 	.word	0x0002a640
    df08:	2000bba8 	.word	0x2000bba8
    df0c:	2000bbb0 	.word	0x2000bbb0
    df10:	20000ad8 	.word	0x20000ad8
    df14:	20000ae0 	.word	0x20000ae0
    df18:	20000adc 	.word	0x20000adc

0000df1c <le_adv_ext_report>:
		  offsetof(struct pdu_adv, payload) + adv->len];
    df1c:	7842      	ldrb	r2, [r0, #1]
	if ((adv->type == PDU_ADV_TYPE_EXT_IND) && adv->len) {
    df1e:	7803      	ldrb	r3, [r0, #0]
    df20:	f003 030f 	and.w	r3, r3, #15
    df24:	2b07      	cmp	r3, #7
    df26:	d000      	beq.n	df2a <le_adv_ext_report+0xe>
    df28:	4770      	bx	lr
    df2a:	2a00      	cmp	r2, #0
    df2c:	d0fc      	beq.n	df28 <le_adv_ext_report+0xc>
		ptr = (u8_t *)h + sizeof(*h);
    df2e:	1d01      	adds	r1, r0, #4
		if (!p->ext_hdr_len) {
    df30:	7883      	ldrb	r3, [r0, #2]
    df32:	f013 0f3f 	tst.w	r3, #63	; 0x3f
    df36:	d0f7      	beq.n	df28 <le_adv_ext_report+0xc>
		if (h->adv_addr) {
    df38:	78c3      	ldrb	r3, [r0, #3]
    df3a:	f013 0f01 	tst.w	r3, #1
    df3e:	d0f3      	beq.n	df28 <le_adv_ext_report+0xc>
{
    df40:	b570      	push	{r4, r5, r6, lr}
    df42:	b092      	sub	sp, #72	; 0x48
			addr.type = adv->tx_addr;
    df44:	7803      	ldrb	r3, [r0, #0]
    df46:	f3c3 1380 	ubfx	r3, r3, #6, #1
    df4a:	f88d 3018 	strb.w	r3, [sp, #24]
			memcpy(&addr.a.val[0], ptr, sizeof(bt_addr_t));
    df4e:	2206      	movs	r2, #6
    df50:	f10d 0019 	add.w	r0, sp, #25
    df54:	f7f2 f9b4 	bl	2c0 <memcpy>
static inline int bt_addr_le_to_str(const bt_addr_le_t *addr, char *str,
				    size_t len)
{
	char type[10];

	switch (addr->type) {
    df58:	f89d 3018 	ldrb.w	r3, [sp, #24]
    df5c:	2b03      	cmp	r3, #3
    df5e:	d830      	bhi.n	dfc2 <le_adv_ext_report+0xa6>
    df60:	e8df f003 	tbb	[pc, r3]
    df64:	2a252002 	.word	0x2a252002
	case BT_ADDR_LE_PUBLIC:
		strcpy(type, "public");
    df68:	4919      	ldr	r1, [pc, #100]	; (dfd0 <le_adv_ext_report+0xb4>)
    df6a:	a808      	add	r0, sp, #32
    df6c:	f01b fe16 	bl	29b9c <strcpy>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
		break;
	}

	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    df70:	f89d 301e 	ldrb.w	r3, [sp, #30]
    df74:	f89d 201d 	ldrb.w	r2, [sp, #29]
    df78:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    df7c:	f89d 001b 	ldrb.w	r0, [sp, #27]
    df80:	f89d 401a 	ldrb.w	r4, [sp, #26]
    df84:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    df88:	ae08      	add	r6, sp, #32
    df8a:	9605      	str	r6, [sp, #20]
    df8c:	9504      	str	r5, [sp, #16]
    df8e:	9403      	str	r4, [sp, #12]
    df90:	9002      	str	r0, [sp, #8]
    df92:	9101      	str	r1, [sp, #4]
    df94:	9200      	str	r2, [sp, #0]
    df96:	4a0f      	ldr	r2, [pc, #60]	; (dfd4 <le_adv_ext_report+0xb8>)
    df98:	211b      	movs	r1, #27
    df9a:	a80b      	add	r0, sp, #44	; 0x2c
    df9c:	f7f4 fb38 	bl	2610 <snprintk>
}
    dfa0:	b012      	add	sp, #72	; 0x48
    dfa2:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    dfa4:	490c      	ldr	r1, [pc, #48]	; (dfd8 <le_adv_ext_report+0xbc>)
    dfa6:	a808      	add	r0, sp, #32
    dfa8:	f01b fdf8 	bl	29b9c <strcpy>
    dfac:	e7e0      	b.n	df70 <le_adv_ext_report+0x54>
		strcpy(type, "public id");
    dfae:	490b      	ldr	r1, [pc, #44]	; (dfdc <le_adv_ext_report+0xc0>)
    dfb0:	a808      	add	r0, sp, #32
    dfb2:	f01b fdf3 	bl	29b9c <strcpy>
    dfb6:	e7db      	b.n	df70 <le_adv_ext_report+0x54>
		strcpy(type, "random id");
    dfb8:	4909      	ldr	r1, [pc, #36]	; (dfe0 <le_adv_ext_report+0xc4>)
    dfba:	a808      	add	r0, sp, #32
    dfbc:	f01b fdee 	bl	29b9c <strcpy>
    dfc0:	e7d6      	b.n	df70 <le_adv_ext_report+0x54>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    dfc2:	4a08      	ldr	r2, [pc, #32]	; (dfe4 <le_adv_ext_report+0xc8>)
    dfc4:	210a      	movs	r1, #10
    dfc6:	a808      	add	r0, sp, #32
    dfc8:	f7f4 fb22 	bl	2610 <snprintk>
    dfcc:	e7d0      	b.n	df70 <le_adv_ext_report+0x54>
    dfce:	bf00      	nop
    dfd0:	0002d63c 	.word	0x0002d63c
    dfd4:	0002d66c 	.word	0x0002d66c
    dfd8:	0002d644 	.word	0x0002d644
    dfdc:	0002d64c 	.word	0x0002d64c
    dfe0:	0002d658 	.word	0x0002d658
    dfe4:	0002d664 	.word	0x0002d664

0000dfe8 <le_adv_ext_1M_report>:
{
    dfe8:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(0));
    dfea:	2301      	movs	r3, #1
    dfec:	f7ff ff96 	bl	df1c <le_adv_ext_report>
    dff0:	bd08      	pop	{r3, pc}

0000dff2 <le_adv_ext_coded_report>:
{
    dff2:	b508      	push	{r3, lr}
	le_adv_ext_report(pdu_data, b, buf, BIT(2));
    dff4:	2304      	movs	r3, #4
    dff6:	f7ff ff91 	bl	df1c <le_adv_ext_report>
    dffa:	bd08      	pop	{r3, pc}

0000dffc <le_scan_req_received>:
{
    dffc:	b570      	push	{r4, r5, r6, lr}
    dffe:	b092      	sub	sp, #72	; 0x48
    e000:	4604      	mov	r4, r0
    e002:	4610      	mov	r0, r2
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e004:	4b33      	ldr	r3, [pc, #204]	; (e0d4 <le_scan_req_received+0xd8>)
    e006:	e9d3 2300 	ldrd	r2, r3, [r3]
    e00a:	2200      	movs	r2, #0
    e00c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
    e010:	4313      	orrs	r3, r2
    e012:	d007      	beq.n	e024 <le_scan_req_received+0x28>
	    !(le_event_mask & BT_EVT_MASK_LE_SCAN_REQ_RECEIVED)) {
    e014:	4b30      	ldr	r3, [pc, #192]	; (e0d8 <le_scan_req_received+0xdc>)
    e016:	e9d3 2300 	ldrd	r2, r3, [r3]
    e01a:	f402 2280 	and.w	r2, r2, #262144	; 0x40000
    e01e:	2300      	movs	r3, #0
	if (!(event_mask & BT_EVT_MASK_LE_META_EVENT) ||
    e020:	4313      	orrs	r3, r2
    e022:	d146      	bne.n	e0b2 <le_scan_req_received+0xb6>
		addr.type = adv->tx_addr;
    e024:	4621      	mov	r1, r4
    e026:	f811 3b02 	ldrb.w	r3, [r1], #2
    e02a:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e02e:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e032:	2206      	movs	r2, #6
    e034:	f10d 0019 	add.w	r0, sp, #25
    e038:	f7f2 f942 	bl	2c0 <memcpy>
	switch (addr->type) {
    e03c:	f89d 3018 	ldrb.w	r3, [sp, #24]
    e040:	2b03      	cmp	r3, #3
    e042:	d830      	bhi.n	e0a6 <le_scan_req_received+0xaa>
    e044:	e8df f003 	tbb	[pc, r3]
    e048:	2a252002 	.word	0x2a252002
		strcpy(type, "public");
    e04c:	4923      	ldr	r1, [pc, #140]	; (e0dc <le_scan_req_received+0xe0>)
    e04e:	a808      	add	r0, sp, #32
    e050:	f01b fda4 	bl	29b9c <strcpy>
			addr->a.val[5], addr->a.val[4], addr->a.val[3],
    e054:	f89d 301e 	ldrb.w	r3, [sp, #30]
    e058:	f89d 201d 	ldrb.w	r2, [sp, #29]
    e05c:	f89d 101c 	ldrb.w	r1, [sp, #28]
			addr->a.val[2], addr->a.val[1], addr->a.val[0], type);
    e060:	f89d 001b 	ldrb.w	r0, [sp, #27]
    e064:	f89d 401a 	ldrb.w	r4, [sp, #26]
    e068:	f89d 5019 	ldrb.w	r5, [sp, #25]
	return snprintk(str, len, "%02X:%02X:%02X:%02X:%02X:%02X (%s)",
    e06c:	ae08      	add	r6, sp, #32
    e06e:	9605      	str	r6, [sp, #20]
    e070:	9504      	str	r5, [sp, #16]
    e072:	9403      	str	r4, [sp, #12]
    e074:	9002      	str	r0, [sp, #8]
    e076:	9101      	str	r1, [sp, #4]
    e078:	9200      	str	r2, [sp, #0]
    e07a:	4a19      	ldr	r2, [pc, #100]	; (e0e0 <le_scan_req_received+0xe4>)
    e07c:	211b      	movs	r1, #27
    e07e:	a80b      	add	r0, sp, #44	; 0x2c
    e080:	f7f4 fac6 	bl	2610 <snprintk>
}
    e084:	b012      	add	sp, #72	; 0x48
    e086:	bd70      	pop	{r4, r5, r6, pc}
		strcpy(type, "random");
    e088:	4916      	ldr	r1, [pc, #88]	; (e0e4 <le_scan_req_received+0xe8>)
    e08a:	a808      	add	r0, sp, #32
    e08c:	f01b fd86 	bl	29b9c <strcpy>
    e090:	e7e0      	b.n	e054 <le_scan_req_received+0x58>
		strcpy(type, "public id");
    e092:	4915      	ldr	r1, [pc, #84]	; (e0e8 <le_scan_req_received+0xec>)
    e094:	a808      	add	r0, sp, #32
    e096:	f01b fd81 	bl	29b9c <strcpy>
    e09a:	e7db      	b.n	e054 <le_scan_req_received+0x58>
		strcpy(type, "random id");
    e09c:	4913      	ldr	r1, [pc, #76]	; (e0ec <le_scan_req_received+0xf0>)
    e09e:	a808      	add	r0, sp, #32
    e0a0:	f01b fd7c 	bl	29b9c <strcpy>
    e0a4:	e7d6      	b.n	e054 <le_scan_req_received+0x58>
		snprintk(type, sizeof(type), "0x%02x", addr->type);
    e0a6:	4a12      	ldr	r2, [pc, #72]	; (e0f0 <le_scan_req_received+0xf4>)
    e0a8:	210a      	movs	r1, #10
    e0aa:	a808      	add	r0, sp, #32
    e0ac:	f7f4 fab0 	bl	2610 <snprintk>
    e0b0:	e7d0      	b.n	e054 <le_scan_req_received+0x58>
	sep = meta_evt(buf, BT_HCI_EVT_LE_SCAN_REQ_RECEIVED, sizeof(*sep));
    e0b2:	2208      	movs	r2, #8
    e0b4:	2113      	movs	r1, #19
    e0b6:	f7fe fd41 	bl	cb3c <meta_evt>
	sep->handle = 0;
    e0ba:	2300      	movs	r3, #0
    e0bc:	7003      	strb	r3, [r0, #0]
	sep->addr.type = adv->tx_addr;
    e0be:	4621      	mov	r1, r4
    e0c0:	f811 3b02 	ldrb.w	r3, [r1], #2
    e0c4:	f3c3 1380 	ubfx	r3, r3, #6, #1
    e0c8:	7043      	strb	r3, [r0, #1]
	memcpy(&sep->addr.a.val[0], &adv->payload.scan_req.scan_addr[0],
    e0ca:	2206      	movs	r2, #6
    e0cc:	3002      	adds	r0, #2
    e0ce:	f7f2 f8f7 	bl	2c0 <memcpy>
    e0d2:	e7d7      	b.n	e084 <le_scan_req_received+0x88>
    e0d4:	2000bba8 	.word	0x2000bba8
    e0d8:	2000bbb0 	.word	0x2000bbb0
    e0dc:	0002d63c 	.word	0x0002d63c
    e0e0:	0002d66c 	.word	0x0002d66c
    e0e4:	0002d644 	.word	0x0002d644
    e0e8:	0002d64c 	.word	0x0002d64c
    e0ec:	0002d658 	.word	0x0002d658
    e0f0:	0002d664 	.word	0x0002d664

0000e0f4 <encode_control>:
{
    e0f4:	b510      	push	{r4, lr}
    e0f6:	460c      	mov	r4, r1
	handle = node_rx->hdr.handle;
    e0f8:	88c1      	ldrh	r1, [r0, #6]
	switch (node_rx->hdr.type) {
    e0fa:	7903      	ldrb	r3, [r0, #4]
    e0fc:	3b02      	subs	r3, #2
    e0fe:	2b0a      	cmp	r3, #10
    e100:	d837      	bhi.n	e172 <encode_control+0x7e>
    e102:	e8df f003 	tbb	[pc, r3]
    e106:	0b06      	.short	0x0b06
    e108:	1e1a1510 	.word	0x1e1a1510
    e10c:	2e2a2622 	.word	0x2e2a2622
    e110:	32          	.byte	0x32
    e111:	00          	.byte	0x00
		le_advertising_report(pdu_data, b, buf);
    e112:	4601      	mov	r1, r0
    e114:	4620      	mov	r0, r4
    e116:	f7ff fdcd 	bl	dcb4 <le_advertising_report>
		break;
    e11a:	bd10      	pop	{r4, pc}
		le_adv_ext_1M_report(pdu_data, b, buf);
    e11c:	4601      	mov	r1, r0
    e11e:	4620      	mov	r0, r4
    e120:	f7ff ff62 	bl	dfe8 <le_adv_ext_1M_report>
		break;
    e124:	bd10      	pop	{r4, pc}
		le_adv_ext_coded_report(pdu_data, b, buf);
    e126:	4601      	mov	r1, r0
    e128:	4620      	mov	r0, r4
    e12a:	f7ff ff62 	bl	dff2 <le_adv_ext_coded_report>
		break;
    e12e:	bd10      	pop	{r4, pc}
		le_scan_req_received(pdu_data, b, buf);
    e130:	4601      	mov	r1, r0
    e132:	4620      	mov	r0, r4
    e134:	f7ff ff62 	bl	dffc <le_scan_req_received>
		break;
    e138:	bd10      	pop	{r4, pc}
		le_conn_complete(pdu_data, handle, buf);
    e13a:	4620      	mov	r0, r4
    e13c:	f7f7 f99e 	bl	547c <le_conn_complete>
		break;
    e140:	bd10      	pop	{r4, pc}
		disconn_complete(pdu_data, handle, buf);
    e142:	4620      	mov	r0, r4
    e144:	f7fe fd32 	bl	cbac <disconn_complete>
		break;
    e148:	bd10      	pop	{r4, pc}
		le_conn_update_complete(pdu_data, handle, buf);
    e14a:	4620      	mov	r0, r4
    e14c:	f7f6 f832 	bl	41b4 <le_conn_update_complete>
		break;
    e150:	bd10      	pop	{r4, pc}
		enc_refresh_complete(pdu_data, handle, buf);
    e152:	4620      	mov	r0, r4
    e154:	f7fe fd52 	bl	cbfc <enc_refresh_complete>
		break;
    e158:	bd10      	pop	{r4, pc}
		auth_payload_timeout_exp(pdu_data, handle, buf);
    e15a:	4620      	mov	r0, r4
    e15c:	f7fe fd6c 	bl	cc38 <auth_payload_timeout_exp>
		break;
    e160:	bd10      	pop	{r4, pc}
		le_chan_sel_algo(pdu_data, handle, buf);
    e162:	4620      	mov	r0, r4
    e164:	f7fe fcfe 	bl	cb64 <le_chan_sel_algo>
		break;
    e168:	bd10      	pop	{r4, pc}
		le_phy_upd_complete(pdu_data, handle, buf);
    e16a:	4620      	mov	r0, r4
    e16c:	f7ff faa6 	bl	d6bc <le_phy_upd_complete>
		return;
    e170:	bd10      	pop	{r4, pc}
		LL_ASSERT(0);
    e172:	4040      	eors	r0, r0
    e174:	f380 8811 	msr	BASEPRI, r0
    e178:	f04f 0004 	mov.w	r0, #4
    e17c:	df02      	svc	2
	...

0000e180 <hci_cmd_handle>:
{
    e180:	b510      	push	{r4, lr}
    e182:	b082      	sub	sp, #8
	struct net_buf *evt = NULL;
    e184:	2300      	movs	r3, #0
    e186:	9301      	str	r3, [sp, #4]
	if (cmd->len < sizeof(*chdr)) {
    e188:	8983      	ldrh	r3, [r0, #12]
    e18a:	2b02      	cmp	r3, #2
    e18c:	d94a      	bls.n	e224 <hci_cmd_handle+0xa4>
	chdr = (void *)cmd->data;
    e18e:	6882      	ldr	r2, [r0, #8]
	_opcode = sys_le16_to_cpu(chdr->opcode);
    e190:	8814      	ldrh	r4, [r2, #0]
    e192:	4926      	ldr	r1, [pc, #152]	; (e22c <hci_cmd_handle+0xac>)
    e194:	800c      	strh	r4, [r1, #0]
	if (cmd->len < chdr->param_len) {
    e196:	7892      	ldrb	r2, [r2, #2]
    e198:	4293      	cmp	r3, r2
    e19a:	d345      	bcc.n	e228 <hci_cmd_handle+0xa8>
    e19c:	4604      	mov	r4, r0
	net_buf_pull(cmd, sizeof(*chdr));
    e19e:	2103      	movs	r1, #3
    e1a0:	3008      	adds	r0, #8
    e1a2:	f00c f974 	bl	1a48e <net_buf_simple_pull>
	ocf = BT_OCF(_opcode);
    e1a6:	4b21      	ldr	r3, [pc, #132]	; (e22c <hci_cmd_handle+0xac>)
    e1a8:	881b      	ldrh	r3, [r3, #0]
    e1aa:	f3c3 0009 	ubfx	r0, r3, #0, #10
	switch (BT_OGF(_opcode)) {
    e1ae:	0a9b      	lsrs	r3, r3, #10
    e1b0:	2b04      	cmp	r3, #4
    e1b2:	d01c      	beq.n	e1ee <hci_cmd_handle+0x6e>
    e1b4:	d908      	bls.n	e1c8 <hci_cmd_handle+0x48>
    e1b6:	2b08      	cmp	r3, #8
    e1b8:	d023      	beq.n	e202 <hci_cmd_handle+0x82>
    e1ba:	2b3f      	cmp	r3, #63	; 0x3f
    e1bc:	d026      	beq.n	e20c <hci_cmd_handle+0x8c>
    e1be:	2b05      	cmp	r3, #5
    e1c0:	d01a      	beq.n	e1f8 <hci_cmd_handle+0x78>
		err = -EINVAL;
    e1c2:	f06f 0015 	mvn.w	r0, #21
    e1c6:	e00c      	b.n	e1e2 <hci_cmd_handle+0x62>
	switch (BT_OGF(_opcode)) {
    e1c8:	2b01      	cmp	r3, #1
    e1ca:	d006      	beq.n	e1da <hci_cmd_handle+0x5a>
    e1cc:	2b03      	cmp	r3, #3
    e1ce:	d1f8      	bne.n	e1c2 <hci_cmd_handle+0x42>
		err = ctrl_bb_cmd_handle(ocf, cmd, &evt);
    e1d0:	aa01      	add	r2, sp, #4
    e1d2:	4621      	mov	r1, r4
    e1d4:	f7fe fe29 	bl	ce2a <ctrl_bb_cmd_handle>
		break;
    e1d8:	e003      	b.n	e1e2 <hci_cmd_handle+0x62>
		err = link_control_cmd_handle(ocf, cmd, &evt);
    e1da:	aa01      	add	r2, sp, #4
    e1dc:	4621      	mov	r1, r4
    e1de:	f7fe fd9b 	bl	cd18 <link_control_cmd_handle>
	if (err == -EINVAL) {
    e1e2:	f110 0f16 	cmn.w	r0, #22
    e1e6:	d016      	beq.n	e216 <hci_cmd_handle+0x96>
	return evt;
    e1e8:	9801      	ldr	r0, [sp, #4]
}
    e1ea:	b002      	add	sp, #8
    e1ec:	bd10      	pop	{r4, pc}
		err = info_cmd_handle(ocf, cmd, &evt);
    e1ee:	aa01      	add	r2, sp, #4
    e1f0:	4621      	mov	r1, r4
    e1f2:	f7fe ffde 	bl	d1b2 <info_cmd_handle>
		break;
    e1f6:	e7f4      	b.n	e1e2 <hci_cmd_handle+0x62>
		err = status_cmd_handle(ocf, cmd, &evt);
    e1f8:	aa01      	add	r2, sp, #4
    e1fa:	4621      	mov	r1, r4
    e1fc:	f7fe fbcf 	bl	c99e <status_cmd_handle>
		break;
    e200:	e7ef      	b.n	e1e2 <hci_cmd_handle+0x62>
		err = controller_cmd_handle(ocf, cmd, &evt);
    e202:	aa01      	add	r2, sp, #4
    e204:	4621      	mov	r1, r4
    e206:	f7ff fb8c 	bl	d922 <controller_cmd_handle>
		break;
    e20a:	e7ea      	b.n	e1e2 <hci_cmd_handle+0x62>
		err = vendor_cmd_handle(ocf, cmd, &evt);
    e20c:	aa01      	add	r2, sp, #4
    e20e:	4621      	mov	r1, r4
    e210:	f7ff f876 	bl	d300 <vendor_cmd_handle>
		break;
    e214:	e7e5      	b.n	e1e2 <hci_cmd_handle+0x62>
		ccst = cmd_complete(&evt, sizeof(*ccst));
    e216:	2101      	movs	r1, #1
    e218:	a801      	add	r0, sp, #4
    e21a:	f7fe fbf5 	bl	ca08 <cmd_complete>
		ccst->status = BT_HCI_ERR_UNKNOWN_CMD;
    e21e:	2301      	movs	r3, #1
    e220:	7003      	strb	r3, [r0, #0]
    e222:	e7e1      	b.n	e1e8 <hci_cmd_handle+0x68>
		return NULL;
    e224:	2000      	movs	r0, #0
    e226:	e7e0      	b.n	e1ea <hci_cmd_handle+0x6a>
		return NULL;
    e228:	2000      	movs	r0, #0
    e22a:	e7de      	b.n	e1ea <hci_cmd_handle+0x6a>
    e22c:	20000ad0 	.word	0x20000ad0

0000e230 <hci_acl_handle>:
{
    e230:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	*evt = NULL;
    e234:	2300      	movs	r3, #0
    e236:	600b      	str	r3, [r1, #0]
	if (buf->len < sizeof(*acl)) {
    e238:	8983      	ldrh	r3, [r0, #12]
    e23a:	2b03      	cmp	r3, #3
    e23c:	d93e      	bls.n	e2bc <hci_acl_handle+0x8c>
    e23e:	4689      	mov	r9, r1
    e240:	4604      	mov	r4, r0
	acl = (void *)buf->data;
    e242:	f850 3f08 	ldr.w	r3, [r0, #8]!
	len = sys_le16_to_cpu(acl->len);
    e246:	f8b3 8002 	ldrh.w	r8, [r3, #2]
	handle = sys_le16_to_cpu(acl->handle);
    e24a:	881e      	ldrh	r6, [r3, #0]
	net_buf_pull(buf, sizeof(*acl));
    e24c:	2104      	movs	r1, #4
    e24e:	f00c f91e 	bl	1a48e <net_buf_simple_pull>
	if (buf->len < len) {
    e252:	89a3      	ldrh	r3, [r4, #12]
    e254:	4598      	cmp	r8, r3
    e256:	d835      	bhi.n	e2c4 <hci_acl_handle+0x94>
	flags = bt_acl_flags(handle);
    e258:	0b37      	lsrs	r7, r6, #12
	handle = bt_acl_handle(handle);
    e25a:	f3c6 060b 	ubfx	r6, r6, #0, #12
	radio_pdu_node_tx = radio_tx_mem_acquire();
    e25e:	f009 ff1f 	bl	180a0 <radio_tx_mem_acquire>
	if (!radio_pdu_node_tx) {
    e262:	4605      	mov	r5, r0
    e264:	b140      	cbz	r0, e278 <hci_acl_handle+0x48>
	if (flags == BT_ACL_START_NO_FLUSH || flags == BT_ACL_START) {
    e266:	b177      	cbz	r7, e286 <hci_acl_handle+0x56>
    e268:	2f02      	cmp	r7, #2
    e26a:	d00c      	beq.n	e286 <hci_acl_handle+0x56>
		pdu_data->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
    e26c:	7903      	ldrb	r3, [r0, #4]
    e26e:	2201      	movs	r2, #1
    e270:	f362 0301 	bfi	r3, r2, #0, #2
    e274:	7103      	strb	r3, [r0, #4]
    e276:	e00b      	b.n	e290 <hci_acl_handle+0x60>
		data_buf_overflow(evt);
    e278:	4648      	mov	r0, r9
    e27a:	f7ff fcbf 	bl	dbfc <data_buf_overflow>
		return -ENOBUFS;
    e27e:	f06f 0068 	mvn.w	r0, #104	; 0x68
    e282:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		pdu_data->ll_id = PDU_DATA_LLID_DATA_START;
    e286:	792b      	ldrb	r3, [r5, #4]
    e288:	2202      	movs	r2, #2
    e28a:	f362 0301 	bfi	r3, r2, #0, #2
    e28e:	712b      	strb	r3, [r5, #4]
	pdu_data->len = len;
    e290:	f885 8005 	strb.w	r8, [r5, #5]
	memcpy(&pdu_data->payload.lldata[0], buf->data, len);
    e294:	4642      	mov	r2, r8
    e296:	68a1      	ldr	r1, [r4, #8]
    e298:	1de8      	adds	r0, r5, #7
    e29a:	f7f2 f811 	bl	2c0 <memcpy>
	if (radio_tx_mem_enqueue(handle, radio_pdu_node_tx)) {
    e29e:	4629      	mov	r1, r5
    e2a0:	4630      	mov	r0, r6
    e2a2:	f009 ff0d 	bl	180c0 <radio_tx_mem_enqueue>
    e2a6:	b910      	cbnz	r0, e2ae <hci_acl_handle+0x7e>
	return 0;
    e2a8:	2000      	movs	r0, #0
}
    e2aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		radio_tx_mem_release(radio_pdu_node_tx);
    e2ae:	4628      	mov	r0, r5
    e2b0:	f009 fefe 	bl	180b0 <radio_tx_mem_release>
		return -EINVAL;
    e2b4:	f06f 0015 	mvn.w	r0, #21
    e2b8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e2bc:	f06f 0015 	mvn.w	r0, #21
    e2c0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return -EINVAL;
    e2c4:	f06f 0015 	mvn.w	r0, #21
    e2c8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0000e2cc <hci_acl_encode>:
{
    e2cc:	b570      	push	{r4, r5, r6, lr}
	handle = node_rx->hdr.handle;
    e2ce:	88c6      	ldrh	r6, [r0, #6]
	switch (pdu_data->ll_id) {
    e2d0:	7a03      	ldrb	r3, [r0, #8]
    e2d2:	f003 0303 	and.w	r3, r3, #3
    e2d6:	3b01      	subs	r3, #1
    e2d8:	2b01      	cmp	r3, #1
    e2da:	d81d      	bhi.n	e318 <hci_acl_encode+0x4c>
    e2dc:	4604      	mov	r4, r0
		acl = (void *)net_buf_add(buf, sizeof(*acl));
    e2de:	f101 0508 	add.w	r5, r1, #8
    e2e2:	2104      	movs	r1, #4
    e2e4:	4628      	mov	r0, r5
    e2e6:	f00c f885 	bl	1a3f4 <net_buf_simple_add>
		if (pdu_data->ll_id == PDU_DATA_LLID_DATA_START) {
    e2ea:	7a23      	ldrb	r3, [r4, #8]
    e2ec:	f003 0303 	and.w	r3, r3, #3
    e2f0:	2b02      	cmp	r3, #2
    e2f2:	d00e      	beq.n	e312 <hci_acl_encode+0x46>
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_CONT);
    e2f4:	f446 5680 	orr.w	r6, r6, #4096	; 0x1000
		acl->handle = sys_cpu_to_le16(handle_flags);
    e2f8:	8006      	strh	r6, [r0, #0]
		acl->len = sys_cpu_to_le16(pdu_data->len);
    e2fa:	7a63      	ldrb	r3, [r4, #9]
    e2fc:	8043      	strh	r3, [r0, #2]
		data = (void *)net_buf_add(buf, pdu_data->len);
    e2fe:	7a61      	ldrb	r1, [r4, #9]
    e300:	4628      	mov	r0, r5
    e302:	f00c f877 	bl	1a3f4 <net_buf_simple_add>
		memcpy(data, &pdu_data->payload.lldata[0], pdu_data->len);
    e306:	7a62      	ldrb	r2, [r4, #9]
    e308:	f104 010b 	add.w	r1, r4, #11
    e30c:	f7f1 ffd8 	bl	2c0 <memcpy>
}
    e310:	bd70      	pop	{r4, r5, r6, pc}
			handle_flags = bt_acl_handle_pack(handle, BT_ACL_START);
    e312:	f446 5600 	orr.w	r6, r6, #8192	; 0x2000
    e316:	e7ef      	b.n	e2f8 <hci_acl_encode+0x2c>
		LL_ASSERT(0);
    e318:	4040      	eors	r0, r0
    e31a:	f380 8811 	msr	BASEPRI, r0
    e31e:	f04f 0004 	mov.w	r0, #4
    e322:	df02      	svc	2

0000e324 <hci_evt_encode>:
{
    e324:	b510      	push	{r4, lr}
	pdu_data = (struct pdu_data *)node_rx->pdu_data;
    e326:	f100 0408 	add.w	r4, r0, #8
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e32a:	7903      	ldrb	r3, [r0, #4]
    e32c:	2b01      	cmp	r3, #1
    e32e:	d004      	beq.n	e33a <hci_evt_encode+0x16>
		encode_control(node_rx, pdu_data, buf);
    e330:	460a      	mov	r2, r1
    e332:	4621      	mov	r1, r4
    e334:	f7ff fede 	bl	e0f4 <encode_control>
    e338:	bd10      	pop	{r4, pc}
		encode_data_ctrl(node_rx, pdu_data, buf);
    e33a:	460a      	mov	r2, r1
    e33c:	4621      	mov	r1, r4
    e33e:	f7ff fc7d 	bl	dc3c <encode_data_ctrl>
    e342:	bd10      	pop	{r4, pc}

0000e344 <hci_num_cmplt_encode>:
{
    e344:	b570      	push	{r4, r5, r6, lr}
    e346:	4606      	mov	r6, r0
    e348:	460d      	mov	r5, r1
    e34a:	4614      	mov	r4, r2
	evt_create(buf, BT_HCI_EVT_NUM_COMPLETED_PACKETS, len);
    e34c:	2205      	movs	r2, #5
    e34e:	2113      	movs	r1, #19
    e350:	f7fe fb28 	bl	c9a4 <evt_create>
	ep = net_buf_add(buf, len);
    e354:	2105      	movs	r1, #5
    e356:	f106 0008 	add.w	r0, r6, #8
    e35a:	f00c f84b 	bl	1a3f4 <net_buf_simple_add>
	ep->num_handles = num_handles;
    e35e:	2301      	movs	r3, #1
    e360:	7003      	strb	r3, [r0, #0]
	hc->handle = sys_cpu_to_le16(handle);
    e362:	f8a0 5001 	strh.w	r5, [r0, #1]
	hc->count = sys_cpu_to_le16(num);
    e366:	f8a0 4003 	strh.w	r4, [r0, #3]
    e36a:	bd70      	pop	{r4, r5, r6, pc}

0000e36c <hci_get_class>:
	if (node_rx->hdr.type != NODE_RX_TYPE_DC_PDU) {
    e36c:	7903      	ldrb	r3, [r0, #4]
    e36e:	2b01      	cmp	r3, #1
    e370:	d011      	beq.n	e396 <hci_get_class+0x2a>
		switch (node_rx->hdr.type) {
    e372:	3b02      	subs	r3, #2
    e374:	2b0a      	cmp	r3, #10
    e376:	d80b      	bhi.n	e390 <hci_get_class+0x24>
    e378:	e8df f003 	tbb	[pc, r3]
    e37c:	06060606 	.word	0x06060606
    e380:	08080816 	.word	0x08080816
    e384:	0808      	.short	0x0808
    e386:	08          	.byte	0x08
    e387:	00          	.byte	0x00
			return HCI_CLASS_EVT_DISCARDABLE;
    e388:	2001      	movs	r0, #1
    e38a:	4770      	bx	lr
			return HCI_CLASS_EVT_CONNECTION;
    e38c:	2002      	movs	r0, #2
    e38e:	4770      	bx	lr
			return -1;
    e390:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
    e394:	4770      	bx	lr
	} else if (pdu_data->ll_id == PDU_DATA_LLID_CTRL) {
    e396:	7a03      	ldrb	r3, [r0, #8]
    e398:	f003 0303 	and.w	r3, r3, #3
    e39c:	2b03      	cmp	r3, #3
    e39e:	d001      	beq.n	e3a4 <hci_get_class+0x38>
		return HCI_CLASS_ACL_DATA;
    e3a0:	2003      	movs	r0, #3
}
    e3a2:	4770      	bx	lr
		return HCI_CLASS_EVT_CONNECTION;
    e3a4:	2002      	movs	r0, #2
    e3a6:	4770      	bx	lr
			return HCI_CLASS_EVT_REQUIRED;
    e3a8:	2000      	movs	r0, #0
    e3aa:	4770      	bx	lr

0000e3ac <_hci_driver_init>:
	.open	= hci_driver_open,
	.send	= hci_driver_send,
};

static int _hci_driver_init(struct device *unused)
{
    e3ac:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);

	bt_hci_driver_register(&drv);
    e3ae:	4802      	ldr	r0, [pc, #8]	; (e3b8 <_hci_driver_init+0xc>)
    e3b0:	f7f7 fcec 	bl	5d8c <bt_hci_driver_register>

	return 0;
}
    e3b4:	2000      	movs	r0, #0
    e3b6:	bd08      	pop	{r3, pc}
    e3b8:	0002d6b8 	.word	0x0002d6b8

0000e3bc <acl_handle>:
{
    e3bc:	b510      	push	{r4, lr}
    e3be:	b082      	sub	sp, #8
	err = hci_acl_handle(buf, &evt);
    e3c0:	a901      	add	r1, sp, #4
    e3c2:	f7ff ff35 	bl	e230 <hci_acl_handle>
    e3c6:	4604      	mov	r4, r0
	if (evt) {
    e3c8:	9801      	ldr	r0, [sp, #4]
    e3ca:	b108      	cbz	r0, e3d0 <acl_handle+0x14>
		bt_recv_prio(evt);
    e3cc:	f7f7 fc8c 	bl	5ce8 <bt_recv_prio>
}
    e3d0:	4620      	mov	r0, r4
    e3d2:	b002      	add	sp, #8
    e3d4:	bd10      	pop	{r4, pc}

0000e3d6 <cmd_handle>:
{
    e3d6:	b508      	push	{r3, lr}
	evt = hci_cmd_handle(buf);
    e3d8:	f7ff fed2 	bl	e180 <hci_cmd_handle>
	if (evt) {
    e3dc:	b108      	cbz	r0, e3e2 <cmd_handle+0xc>
		bt_recv_prio(evt);
    e3de:	f7f7 fc83 	bl	5ce8 <bt_recv_prio>
}
    e3e2:	2000      	movs	r0, #0
    e3e4:	bd08      	pop	{r3, pc}

0000e3e6 <hci_driver_send>:
{
    e3e6:	b538      	push	{r3, r4, r5, lr}
	if (!buf->len) {
    e3e8:	8983      	ldrh	r3, [r0, #12]
    e3ea:	b1cb      	cbz	r3, e420 <hci_driver_send+0x3a>
    e3ec:	4604      	mov	r4, r0
	return (void *)ROUND_UP((buf->__buf + buf->size), sizeof(int));
    e3ee:	f100 0310 	add.w	r3, r0, #16
    e3f2:	89c2      	ldrh	r2, [r0, #14]
    e3f4:	4413      	add	r3, r2
    e3f6:	3303      	adds	r3, #3
    e3f8:	f023 0303 	bic.w	r3, r3, #3
	return *(u8_t *)net_buf_user_data(buf);
    e3fc:	781b      	ldrb	r3, [r3, #0]
	switch (type) {
    e3fe:	b13b      	cbz	r3, e410 <hci_driver_send+0x2a>
    e400:	2b02      	cmp	r3, #2
    e402:	d110      	bne.n	e426 <hci_driver_send+0x40>
		err = acl_handle(buf);
    e404:	f7ff ffda 	bl	e3bc <acl_handle>
    e408:	4605      	mov	r5, r0
	if (!err) {
    e40a:	b12d      	cbz	r5, e418 <hci_driver_send+0x32>
}
    e40c:	4628      	mov	r0, r5
    e40e:	bd38      	pop	{r3, r4, r5, pc}
		err = cmd_handle(buf);
    e410:	f7ff ffe1 	bl	e3d6 <cmd_handle>
    e414:	4605      	mov	r5, r0
		break;
    e416:	e7f8      	b.n	e40a <hci_driver_send+0x24>
		net_buf_unref(buf);
    e418:	4620      	mov	r0, r4
    e41a:	f00b ff9f 	bl	1a35c <net_buf_unref>
    e41e:	e7f5      	b.n	e40c <hci_driver_send+0x26>
		return -EINVAL;
    e420:	f06f 0515 	mvn.w	r5, #21
    e424:	e7f2      	b.n	e40c <hci_driver_send+0x26>
		return -EINVAL;
    e426:	f06f 0515 	mvn.w	r5, #21
    e42a:	e7ef      	b.n	e40c <hci_driver_send+0x26>

0000e42c <prio_recv_thread>:
{
    e42c:	b530      	push	{r4, r5, lr}
    e42e:	b087      	sub	sp, #28
    e430:	e00f      	b.n	e452 <prio_recv_thread+0x26>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e432:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e436:	2001      	movs	r0, #1
    e438:	f7f7 fe0c 	bl	6054 <bt_buf_get_rx>
    e43c:	4605      	mov	r5, r0
			hci_num_cmplt_encode(buf, handle, num_cmplt);
    e43e:	4622      	mov	r2, r4
    e440:	f8bd 1012 	ldrh.w	r1, [sp, #18]
    e444:	f7ff ff7e 	bl	e344 <hci_num_cmplt_encode>
			bt_recv_prio(buf);
    e448:	4628      	mov	r0, r5
    e44a:	f7f7 fc4d 	bl	5ce8 <bt_recv_prio>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e44e:	f01a f977 	bl	28740 <_impl_k_yield>
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e452:	f10d 0112 	add.w	r1, sp, #18
    e456:	a805      	add	r0, sp, #20
    e458:	f009 fd22 	bl	17ea0 <radio_rx_get>
    e45c:	4604      	mov	r4, r0
    e45e:	2800      	cmp	r0, #0
    e460:	d1e7      	bne.n	e432 <prio_recv_thread+0x6>
		if (node_rx) {
    e462:	9b05      	ldr	r3, [sp, #20]
    e464:	b133      	cbz	r3, e474 <prio_recv_thread+0x48>
			radio_rx_dequeue();
    e466:	f00a fa5b 	bl	18920 <radio_rx_dequeue>
			k_fifo_put(&recv_fifo, node_rx);
    e46a:	9905      	ldr	r1, [sp, #20]
    e46c:	481a      	ldr	r0, [pc, #104]	; (e4d8 <prio_recv_thread+0xac>)
    e46e:	f019 ff29 	bl	282c4 <k_queue_append>
    e472:	e7ee      	b.n	e452 <prio_recv_thread+0x26>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
    e474:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e478:	4818      	ldr	r0, [pc, #96]	; (e4dc <prio_recv_thread+0xb0>)
    e47a:	f01a facd 	bl	28a18 <_impl_k_sem_take>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e47e:	f01a fb17 	bl	28ab0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - prio_ts > K_SECONDS(5)) {
    e482:	4b17      	ldr	r3, [pc, #92]	; (e4e0 <prio_recv_thread+0xb4>)
    e484:	681b      	ldr	r3, [r3, #0]
    e486:	1ac3      	subs	r3, r0, r3
    e488:	f241 3288 	movw	r2, #5000	; 0x1388
    e48c:	4293      	cmp	r3, r2
    e48e:	d9e0      	bls.n	e452 <prio_recv_thread+0x26>
	for (i = 0; i < size; i++) {
    e490:	2200      	movs	r2, #0
	size_t unused = 0;
    e492:	4613      	mov	r3, r2
    e494:	e001      	b.n	e49a <prio_recv_thread+0x6e>
			unused++;
    e496:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e498:	3201      	adds	r2, #1
    e49a:	f5b2 7fe0 	cmp.w	r2, #448	; 0x1c0
    e49e:	d203      	bcs.n	e4a8 <prio_recv_thread+0x7c>
		if ((unsigned char)stack[i] == 0xaa) {
    e4a0:	4910      	ldr	r1, [pc, #64]	; (e4e4 <prio_recv_thread+0xb8>)
    e4a2:	5c89      	ldrb	r1, [r1, r2]
    e4a4:	29aa      	cmp	r1, #170	; 0xaa
    e4a6:	d0f6      	beq.n	e496 <prio_recv_thread+0x6a>
	pcnt = ((size - unused) * 100) / size;
    e4a8:	f5c3 71e0 	rsb	r1, r3, #448	; 0x1c0
    e4ac:	2264      	movs	r2, #100	; 0x64
    e4ae:	fb02 f201 	mul.w	r2, r2, r1
    e4b2:	0992      	lsrs	r2, r2, #6
    e4b4:	480c      	ldr	r0, [pc, #48]	; (e4e8 <prio_recv_thread+0xbc>)
    e4b6:	fba0 0202 	umull	r0, r2, r0, r2
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e4ba:	9202      	str	r2, [sp, #8]
    e4bc:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e4c0:	9201      	str	r2, [sp, #4]
    e4c2:	9100      	str	r1, [sp, #0]
    e4c4:	4909      	ldr	r1, [pc, #36]	; (e4ec <prio_recv_thread+0xc0>)
    e4c6:	480a      	ldr	r0, [pc, #40]	; (e4f0 <prio_recv_thread+0xc4>)
    e4c8:	f7f4 f894 	bl	25f4 <printk>
    e4cc:	f01a faf0 	bl	28ab0 <_impl_k_uptime_get_32>
			prio_ts = k_uptime_get_32();
    e4d0:	4b03      	ldr	r3, [pc, #12]	; (e4e0 <prio_recv_thread+0xb4>)
    e4d2:	6018      	str	r0, [r3, #0]
		while ((num_cmplt = radio_rx_get(&node_rx, &handle))) {
    e4d4:	e7bd      	b.n	e452 <prio_recv_thread+0x26>
    e4d6:	bf00      	nop
    e4d8:	2000cd18 	.word	0x2000cd18
    e4dc:	2000cca8 	.word	0x2000cca8
    e4e0:	20000b68 	.word	0x20000b68
    e4e4:	200041d8 	.word	0x200041d8
    e4e8:	2492492d 	.word	0x2492492d
    e4ec:	0002d6c8 	.word	0x0002d6c8
    e4f0:	0002d430 	.word	0x0002d430

0000e4f4 <hci_driver_open>:
{
    e4f4:	b530      	push	{r4, r5, lr}
    e4f6:	b087      	sub	sp, #28
	err = ll_init(&sem_prio_recv);
    e4f8:	4814      	ldr	r0, [pc, #80]	; (e54c <hci_driver_open+0x58>)
    e4fa:	f00a fb39 	bl	18b70 <ll_init>
	if (err) {
    e4fe:	4605      	mov	r5, r0
    e500:	b110      	cbz	r0, e508 <hci_driver_open+0x14>
}
    e502:	4628      	mov	r0, r5
    e504:	b007      	add	sp, #28
    e506:	bd30      	pop	{r4, r5, pc}
	hci_init(NULL);
    e508:	f7f6 fc66 	bl	4dd8 <hci_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
    e50c:	2400      	movs	r4, #0
    e50e:	9405      	str	r4, [sp, #20]
    e510:	9404      	str	r4, [sp, #16]
    e512:	f06f 0309 	mvn.w	r3, #9
    e516:	9303      	str	r3, [sp, #12]
    e518:	9402      	str	r4, [sp, #8]
    e51a:	9401      	str	r4, [sp, #4]
    e51c:	9400      	str	r4, [sp, #0]
    e51e:	4b0c      	ldr	r3, [pc, #48]	; (e550 <hci_driver_open+0x5c>)
    e520:	f44f 72e0 	mov.w	r2, #448	; 0x1c0
    e524:	490b      	ldr	r1, [pc, #44]	; (e554 <hci_driver_open+0x60>)
    e526:	480c      	ldr	r0, [pc, #48]	; (e558 <hci_driver_open+0x64>)
    e528:	f01a fce2 	bl	28ef0 <_impl_k_thread_create>
    e52c:	9405      	str	r4, [sp, #20]
    e52e:	9404      	str	r4, [sp, #16]
    e530:	f06f 0307 	mvn.w	r3, #7
    e534:	9303      	str	r3, [sp, #12]
    e536:	9402      	str	r4, [sp, #8]
    e538:	9401      	str	r4, [sp, #4]
    e53a:	9400      	str	r4, [sp, #0]
    e53c:	4b07      	ldr	r3, [pc, #28]	; (e55c <hci_driver_open+0x68>)
    e53e:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e542:	4907      	ldr	r1, [pc, #28]	; (e560 <hci_driver_open+0x6c>)
    e544:	4807      	ldr	r0, [pc, #28]	; (e564 <hci_driver_open+0x70>)
    e546:	f01a fcd3 	bl	28ef0 <_impl_k_thread_create>
	return 0;
    e54a:	e7da      	b.n	e502 <hci_driver_open+0xe>
    e54c:	2000cca8 	.word	0x2000cca8
    e550:	0000e42d 	.word	0x0000e42d
    e554:	200041d8 	.word	0x200041d8
    e558:	20002b5c 	.word	0x20002b5c
    e55c:	0000e569 	.word	0x0000e569
    e560:	20004398 	.word	0x20004398
    e564:	20002a28 	.word	0x20002a28

0000e568 <recv_thread>:
{
    e568:	b510      	push	{r4, lr}
    e56a:	b086      	sub	sp, #24
    e56c:	e029      	b.n	e5c2 <recv_thread+0x5a>
		if (class == HCI_CLASS_EVT_DISCARDABLE) {
    e56e:	2801      	cmp	r0, #1
    e570:	d042      	beq.n	e5f8 <recv_thread+0x90>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_FOREVER);
    e572:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e576:	2001      	movs	r0, #1
    e578:	f7f7 fd6c 	bl	6054 <bt_buf_get_rx>
    e57c:	4604      	mov	r4, r0
		if (buf) {
    e57e:	b11c      	cbz	r4, e588 <recv_thread+0x20>
			hci_evt_encode(node_rx, buf);
    e580:	4621      	mov	r1, r4
    e582:	9805      	ldr	r0, [sp, #20]
    e584:	f7ff fece 	bl	e324 <hci_evt_encode>
	radio_rx_fc_set(node_rx->hdr.handle, 0);
    e588:	2100      	movs	r1, #0
    e58a:	9b05      	ldr	r3, [sp, #20]
    e58c:	88d8      	ldrh	r0, [r3, #6]
    e58e:	f009 fd4b 	bl	18028 <radio_rx_fc_set>
	node_rx->hdr.onion.next = 0;
    e592:	a806      	add	r0, sp, #24
    e594:	f850 3d04 	ldr.w	r3, [r0, #-4]!
    e598:	2200      	movs	r2, #0
    e59a:	601a      	str	r2, [r3, #0]
	radio_rx_mem_release(&node_rx);
    e59c:	f009 fcc0 	bl	17f20 <radio_rx_mem_release>
		if (buf) {
    e5a0:	b124      	cbz	r4, e5ac <recv_thread+0x44>
			if (buf->len) {
    e5a2:	89a3      	ldrh	r3, [r4, #12]
    e5a4:	b3ab      	cbz	r3, e612 <recv_thread+0xaa>
				bt_recv(buf);
    e5a6:	4620      	mov	r0, r4
    e5a8:	f7f7 fb74 	bl	5c94 <bt_recv>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
    e5ac:	f01a f8c8 	bl	28740 <_impl_k_yield>
K_SYSCALL_DECLARE0(K_SYSCALL_K_UPTIME_GET_32, k_uptime_get_32, u32_t);
    e5b0:	f01a fa7e 	bl	28ab0 <_impl_k_uptime_get_32>
		if (k_uptime_get_32() - rx_ts > K_SECONDS(5)) {
    e5b4:	4b29      	ldr	r3, [pc, #164]	; (e65c <recv_thread+0xf4>)
    e5b6:	681b      	ldr	r3, [r3, #0]
    e5b8:	1ac0      	subs	r0, r0, r3
    e5ba:	f241 3388 	movw	r3, #5000	; 0x1388
    e5be:	4298      	cmp	r0, r3
    e5c0:	d82b      	bhi.n	e61a <recv_thread+0xb2>
		node_rx = k_fifo_get(&recv_fifo, K_FOREVER);
    e5c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e5c6:	4826      	ldr	r0, [pc, #152]	; (e660 <recv_thread+0xf8>)
    e5c8:	f019 fea4 	bl	28314 <k_queue_get>
		if (node_rx && !buf) {
    e5cc:	b1f8      	cbz	r0, e60e <recv_thread+0xa6>
    e5ce:	4604      	mov	r4, r0
	s8_t class = hci_get_class(node_rx);
    e5d0:	f7ff fecc 	bl	e36c <hci_get_class>
    e5d4:	9405      	str	r4, [sp, #20]
	switch (class) {
    e5d6:	2800      	cmp	r0, #0
    e5d8:	db13      	blt.n	e602 <recv_thread+0x9a>
    e5da:	2802      	cmp	r0, #2
    e5dc:	ddc7      	ble.n	e56e <recv_thread+0x6>
    e5de:	2803      	cmp	r0, #3
    e5e0:	d10f      	bne.n	e602 <recv_thread+0x9a>
		buf = bt_buf_get_rx(BT_BUF_ACL_IN, K_FOREVER);
    e5e2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
    e5e6:	2003      	movs	r0, #3
    e5e8:	f7f7 fd34 	bl	6054 <bt_buf_get_rx>
    e5ec:	4604      	mov	r4, r0
		hci_acl_encode(node_rx, buf);
    e5ee:	4601      	mov	r1, r0
    e5f0:	9805      	ldr	r0, [sp, #20]
    e5f2:	f7ff fe6b 	bl	e2cc <hci_acl_encode>
    e5f6:	e7c7      	b.n	e588 <recv_thread+0x20>
			buf = bt_buf_get_rx(BT_BUF_EVT, K_NO_WAIT);
    e5f8:	2100      	movs	r1, #0
    e5fa:	f7f7 fd2b 	bl	6054 <bt_buf_get_rx>
    e5fe:	4604      	mov	r4, r0
    e600:	e7bd      	b.n	e57e <recv_thread+0x16>
		LL_ASSERT(0);
    e602:	4040      	eors	r0, r0
    e604:	f380 8811 	msr	BASEPRI, r0
    e608:	f04f 0004 	mov.w	r0, #4
    e60c:	df02      	svc	2
		struct net_buf *buf = NULL;
    e60e:	2400      	movs	r4, #0
    e610:	e7c6      	b.n	e5a0 <recv_thread+0x38>
				net_buf_unref(buf);
    e612:	4620      	mov	r0, r4
    e614:	f00b fea2 	bl	1a35c <net_buf_unref>
    e618:	e7c8      	b.n	e5ac <recv_thread+0x44>
	for (i = 0; i < size; i++) {
    e61a:	2200      	movs	r2, #0
	size_t unused = 0;
    e61c:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
    e61e:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
    e622:	d206      	bcs.n	e632 <recv_thread+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
    e624:	490f      	ldr	r1, [pc, #60]	; (e664 <recv_thread+0xfc>)
    e626:	5c89      	ldrb	r1, [r1, r2]
    e628:	29aa      	cmp	r1, #170	; 0xaa
    e62a:	d102      	bne.n	e632 <recv_thread+0xca>
			unused++;
    e62c:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
    e62e:	3201      	adds	r2, #1
    e630:	e7f5      	b.n	e61e <recv_thread+0xb6>
	pcnt = ((size - unused) * 100) / size;
    e632:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
    e636:	2264      	movs	r2, #100	; 0x64
    e638:	fb02 f201 	mul.w	r2, r2, r1
    e63c:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
    e63e:	9202      	str	r2, [sp, #8]
    e640:	f44f 6280 	mov.w	r2, #1024	; 0x400
    e644:	9201      	str	r2, [sp, #4]
    e646:	9100      	str	r1, [sp, #0]
    e648:	4907      	ldr	r1, [pc, #28]	; (e668 <recv_thread+0x100>)
    e64a:	4808      	ldr	r0, [pc, #32]	; (e66c <recv_thread+0x104>)
    e64c:	f7f3 ffd2 	bl	25f4 <printk>
    e650:	f01a fa2e 	bl	28ab0 <_impl_k_uptime_get_32>
			rx_ts = k_uptime_get_32();
    e654:	4b01      	ldr	r3, [pc, #4]	; (e65c <recv_thread+0xf4>)
    e656:	6018      	str	r0, [r3, #0]
    e658:	e7b3      	b.n	e5c2 <recv_thread+0x5a>
    e65a:	bf00      	nop
    e65c:	20000b6c 	.word	0x20000b6c
    e660:	2000cd18 	.word	0x2000cd18
    e664:	20004398 	.word	0x20004398
    e668:	0002d6e0 	.word	0x0002d6e0
    e66c:	0002d430 	.word	0x0002d430

0000e670 <mayfly_init>:
} mft[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT];

static void *mfl[MAYFLY_CALLEE_COUNT][MAYFLY_CALLER_COUNT][2];

void mayfly_init(void)
{
    e670:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	u8_t callee_id;

	callee_id = MAYFLY_CALLEE_COUNT;
    e672:	2304      	movs	r3, #4
	while (callee_id--) {
    e674:	e01d      	b.n	e6b2 <mayfly_init+0x42>
		u8_t caller_id;

		caller_id = MAYFLY_CALLER_COUNT;
		while (caller_id--) {
			memq_init(mfl[callee_id][caller_id],
    e676:	eb04 0086 	add.w	r0, r4, r6, lsl #2
    e67a:	4911      	ldr	r1, [pc, #68]	; (e6c0 <mayfly_init+0x50>)
    e67c:	0065      	lsls	r5, r4, #1
    e67e:	192b      	adds	r3, r5, r4
    e680:	009a      	lsls	r2, r3, #2
    e682:	0073      	lsls	r3, r6, #1
    e684:	eb03 0e06 	add.w	lr, r3, r6
    e688:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e68c:	46be      	mov	lr, r7
    e68e:	443a      	add	r2, r7
    e690:	440a      	add	r2, r1
    e692:	4425      	add	r5, r4
    e694:	00af      	lsls	r7, r5, #2
    e696:	4477      	add	r7, lr
    e698:	3204      	adds	r2, #4
    e69a:	4439      	add	r1, r7
    e69c:	4b09      	ldr	r3, [pc, #36]	; (e6c4 <mayfly_init+0x54>)
    e69e:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
    e6a2:	f000 f9f5 	bl	ea90 <memq_init>
		while (caller_id--) {
    e6a6:	4623      	mov	r3, r4
    e6a8:	1e5c      	subs	r4, r3, #1
    e6aa:	b2e4      	uxtb	r4, r4
    e6ac:	2b00      	cmp	r3, #0
    e6ae:	d1e2      	bne.n	e676 <mayfly_init+0x6>
	while (callee_id--) {
    e6b0:	4633      	mov	r3, r6
    e6b2:	1e5e      	subs	r6, r3, #1
    e6b4:	b2f6      	uxtb	r6, r6
    e6b6:	b10b      	cbz	r3, e6bc <mayfly_init+0x4c>
    e6b8:	2304      	movs	r3, #4
    e6ba:	e7f5      	b.n	e6a8 <mayfly_init+0x38>
				  &mft[callee_id][caller_id].head,
				  &mft[callee_id][caller_id].tail);
		}
	}
}
    e6bc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e6be:	bf00      	nop
    e6c0:	20000bf0 	.word	0x20000bf0
    e6c4:	20000b70 	.word	0x20000b70

0000e6c8 <mayfly_enable>:

void mayfly_enable(u8_t caller_id, u8_t callee_id, u8_t enable)
{
    e6c8:	b570      	push	{r4, r5, r6, lr}
	if (enable) {
    e6ca:	b1ea      	cbz	r2, e708 <mayfly_enable+0x40>
    e6cc:	4615      	mov	r5, r2
		if (mft[callee_id][caller_id].enable_req ==
    e6ce:	0042      	lsls	r2, r0, #1
    e6d0:	4402      	add	r2, r0
    e6d2:	0093      	lsls	r3, r2, #2
    e6d4:	004c      	lsls	r4, r1, #1
    e6d6:	440c      	add	r4, r1
    e6d8:	0122      	lsls	r2, r4, #4
    e6da:	441a      	add	r2, r3
    e6dc:	4b18      	ldr	r3, [pc, #96]	; (e740 <mayfly_enable+0x78>)
    e6de:	4413      	add	r3, r2
    e6e0:	7a1a      	ldrb	r2, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e6e2:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req ==
    e6e4:	429a      	cmp	r2, r3
    e6e6:	d003      	beq.n	e6f0 <mayfly_enable+0x28>
			mft[callee_id][caller_id].enable_req++;
		}

		mayfly_enable_cb(caller_id, callee_id, enable);
    e6e8:	462a      	mov	r2, r5
    e6ea:	f00a f9e8 	bl	18abe <mayfly_enable_cb>
    e6ee:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].enable_req++;
    e6f0:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e6f4:	00a3      	lsls	r3, r4, #2
    e6f6:	eb01 0641 	add.w	r6, r1, r1, lsl #1
    e6fa:	0134      	lsls	r4, r6, #4
    e6fc:	4423      	add	r3, r4
    e6fe:	4c10      	ldr	r4, [pc, #64]	; (e740 <mayfly_enable+0x78>)
    e700:	4423      	add	r3, r4
    e702:	3201      	adds	r2, #1
    e704:	721a      	strb	r2, [r3, #8]
    e706:	e7ef      	b.n	e6e8 <mayfly_enable+0x20>
	} else {
		if (mft[callee_id][caller_id].disable_req ==
    e708:	0042      	lsls	r2, r0, #1
    e70a:	4402      	add	r2, r0
    e70c:	0093      	lsls	r3, r2, #2
    e70e:	004c      	lsls	r4, r1, #1
    e710:	440c      	add	r4, r1
    e712:	0122      	lsls	r2, r4, #4
    e714:	441a      	add	r2, r3
    e716:	4b0a      	ldr	r3, [pc, #40]	; (e740 <mayfly_enable+0x78>)
    e718:	4413      	add	r3, r2
    e71a:	7a9a      	ldrb	r2, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e71c:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req ==
    e71e:	429a      	cmp	r2, r3
    e720:	d000      	beq.n	e724 <mayfly_enable+0x5c>
    e722:	bd70      	pop	{r4, r5, r6, pc}
			mft[callee_id][caller_id].disable_req++;
    e724:	eb00 0440 	add.w	r4, r0, r0, lsl #1
    e728:	00a3      	lsls	r3, r4, #2
    e72a:	eb01 0541 	add.w	r5, r1, r1, lsl #1
    e72e:	012c      	lsls	r4, r5, #4
    e730:	4423      	add	r3, r4
    e732:	4c03      	ldr	r4, [pc, #12]	; (e740 <mayfly_enable+0x78>)
    e734:	4423      	add	r3, r4
    e736:	3201      	adds	r2, #1
    e738:	729a      	strb	r2, [r3, #10]

			mayfly_pend(caller_id, callee_id);
    e73a:	f00a f9f7 	bl	18b2c <mayfly_pend>
		}
	}
}
    e73e:	e7f0      	b.n	e722 <mayfly_enable+0x5a>
    e740:	20000bf0 	.word	0x20000bf0

0000e744 <mayfly_enqueue>:

u32_t mayfly_enqueue(u8_t caller_id, u8_t callee_id, u8_t chain,
			struct mayfly *m)
{
    e744:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    e746:	4605      	mov	r5, r0
    e748:	460e      	mov	r6, r1
    e74a:	461c      	mov	r4, r3
	u8_t state;
	u8_t ack;

	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
		!mayfly_is_enabled(caller_id, callee_id) ||
    e74c:	b19a      	cbz	r2, e776 <mayfly_enqueue+0x32>
    e74e:	2101      	movs	r1, #1
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e750:	b2c9      	uxtb	r1, r1
		(mft[callee_id][caller_id].disable_req !=
		 mft[callee_id][caller_id].disable_ack);

	/* shadow the ack */
	ack = m->_ack;
    e752:	7862      	ldrb	r2, [r4, #1]

	/* already in queue */
	state = (m->_req - ack) & 0x03;
    e754:	7823      	ldrb	r3, [r4, #0]
    e756:	1a9b      	subs	r3, r3, r2
	if (state != 0) {
    e758:	f013 0303 	ands.w	r3, r3, #3
    e75c:	d032      	beq.n	e7c4 <mayfly_enqueue+0x80>
		if (chain) {
    e75e:	b371      	cbz	r1, e7be <mayfly_enqueue+0x7a>
			if (state != 1) {
    e760:	2b01      	cmp	r3, #1
    e762:	d04c      	beq.n	e7fe <mayfly_enqueue+0xba>
				/* mark as ready in queue */
				m->_req = ack + 1;
    e764:	3201      	adds	r2, #1
    e766:	b2d2      	uxtb	r2, r2
    e768:	7022      	strb	r2, [r4, #0]

				/* pend the callee for execution */
				mayfly_pend(caller_id, callee_id);
    e76a:	4631      	mov	r1, r6
    e76c:	4628      	mov	r0, r5
    e76e:	f00a f9dd 	bl	18b2c <mayfly_pend>

				return 0;
    e772:	2000      	movs	r0, #0
    e774:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e776:	f00a f9c6 	bl	18b06 <mayfly_prio_is_equal>
    e77a:	b908      	cbnz	r0, e780 <mayfly_enqueue+0x3c>
		!mayfly_is_enabled(caller_id, callee_id) ||
    e77c:	2101      	movs	r1, #1
    e77e:	e7e7      	b.n	e750 <mayfly_enqueue+0xc>
    e780:	4631      	mov	r1, r6
    e782:	4628      	mov	r0, r5
    e784:	f00a f9ad 	bl	18ae2 <mayfly_is_enabled>
	chain = chain || !mayfly_prio_is_equal(caller_id, callee_id) ||
    e788:	b1b8      	cbz	r0, e7ba <mayfly_enqueue+0x76>
		(mft[callee_id][caller_id].disable_req !=
    e78a:	481e      	ldr	r0, [pc, #120]	; (e804 <mayfly_enqueue+0xc0>)
    e78c:	0069      	lsls	r1, r5, #1
    e78e:	194a      	adds	r2, r1, r5
    e790:	0093      	lsls	r3, r2, #2
    e792:	0072      	lsls	r2, r6, #1
    e794:	eb02 0e06 	add.w	lr, r2, r6
    e798:	ea4f 170e 	mov.w	r7, lr, lsl #4
    e79c:	46be      	mov	lr, r7
    e79e:	443b      	add	r3, r7
    e7a0:	4403      	add	r3, r0
    e7a2:	7a9f      	ldrb	r7, [r3, #10]
		 mft[callee_id][caller_id].disable_ack);
    e7a4:	194b      	adds	r3, r1, r5
    e7a6:	0099      	lsls	r1, r3, #2
    e7a8:	4471      	add	r1, lr
    e7aa:	4408      	add	r0, r1
    e7ac:	7ac3      	ldrb	r3, [r0, #11]
		!mayfly_is_enabled(caller_id, callee_id) ||
    e7ae:	429f      	cmp	r7, r3
    e7b0:	d001      	beq.n	e7b6 <mayfly_enqueue+0x72>
    e7b2:	2101      	movs	r1, #1
    e7b4:	e7cc      	b.n	e750 <mayfly_enqueue+0xc>
    e7b6:	2100      	movs	r1, #0
    e7b8:	e7ca      	b.n	e750 <mayfly_enqueue+0xc>
    e7ba:	2101      	movs	r1, #1
    e7bc:	e7c8      	b.n	e750 <mayfly_enqueue+0xc>
			/* already ready */
			return 1;
		}

		/* mark as done in queue, and fall thru */
		m->_req = ack + 2;
    e7be:	1c93      	adds	r3, r2, #2
    e7c0:	b2db      	uxtb	r3, r3
    e7c2:	7023      	strb	r3, [r4, #0]
	}

	/* handle mayfly(s) that can be inline */
	if (!chain) {
    e7c4:	b1b1      	cbz	r1, e7f4 <mayfly_enqueue+0xb0>

		return 0;
	}

	/* new, add as ready in the queue */
	m->_req = ack + 1;
    e7c6:	3201      	adds	r2, #1
    e7c8:	b2d2      	uxtb	r2, r2
    e7ca:	7022      	strb	r2, [r4, #0]
	memq_enqueue(m, m->_link, &mft[callee_id][caller_id].tail);
    e7cc:	eb05 0345 	add.w	r3, r5, r5, lsl #1
    e7d0:	009a      	lsls	r2, r3, #2
    e7d2:	eb06 0146 	add.w	r1, r6, r6, lsl #1
    e7d6:	010b      	lsls	r3, r1, #4
    e7d8:	441a      	add	r2, r3
    e7da:	4b0a      	ldr	r3, [pc, #40]	; (e804 <mayfly_enqueue+0xc0>)
    e7dc:	441a      	add	r2, r3
    e7de:	3204      	adds	r2, #4
    e7e0:	6861      	ldr	r1, [r4, #4]
    e7e2:	4620      	mov	r0, r4
    e7e4:	f000 f957 	bl	ea96 <memq_enqueue>

	/* pend the callee for execution */
	mayfly_pend(caller_id, callee_id);
    e7e8:	4631      	mov	r1, r6
    e7ea:	4628      	mov	r0, r5
    e7ec:	f00a f99e 	bl	18b2c <mayfly_pend>

	return 0;
    e7f0:	2000      	movs	r0, #0
    e7f2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		m->fp(m->param);
    e7f4:	68e3      	ldr	r3, [r4, #12]
    e7f6:	68a0      	ldr	r0, [r4, #8]
    e7f8:	4798      	blx	r3
		return 0;
    e7fa:	2000      	movs	r0, #0
    e7fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return 1;
    e7fe:	2001      	movs	r0, #1
}
    e800:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    e802:	bf00      	nop
    e804:	20000bf0 	.word	0x20000bf0

0000e808 <mayfly_run>:

void mayfly_run(u8_t callee_id)
{
    e808:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    e80c:	b085      	sub	sp, #20
    e80e:	4682      	mov	sl, r0
	u8_t disable = 0;
	u8_t enable = 0;
	u8_t caller_id;

	/* iterate through each caller queue to this callee_id */
	caller_id = MAYFLY_CALLER_COUNT;
    e810:	2304      	movs	r3, #4
	u8_t enable = 0;
    e812:	f04f 0b00 	mov.w	fp, #0
	u8_t disable = 0;
    e816:	f8cd b004 	str.w	fp, [sp, #4]
	while (caller_id--) {
    e81a:	f103 39ff 	add.w	r9, r3, #4294967295	; 0xffffffff
    e81e:	fa5f f989 	uxtb.w	r9, r9
    e822:	2b00      	cmp	r3, #0
    e824:	f000 809b 	beq.w	e95e <mayfly_run+0x156>
		void *link;
		struct mayfly *m = 0;
    e828:	aa04      	add	r2, sp, #16
    e82a:	2300      	movs	r3, #0
    e82c:	f842 3d04 	str.w	r3, [r2, #-4]!

		/* fetch mayfly in callee queue, if any */
		link = memq_peek(mft[callee_id][caller_id].tail,
    e830:	4657      	mov	r7, sl
    e832:	464e      	mov	r6, r9
    e834:	4850      	ldr	r0, [pc, #320]	; (e978 <mayfly_run+0x170>)
    e836:	ea4f 0149 	mov.w	r1, r9, lsl #1
    e83a:	4449      	add	r1, r9
    e83c:	008b      	lsls	r3, r1, #2
    e83e:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e842:	4451      	add	r1, sl
    e844:	010c      	lsls	r4, r1, #4
    e846:	4423      	add	r3, r4
    e848:	18c4      	adds	r4, r0, r3
    e84a:	58c1      	ldr	r1, [r0, r3]
    e84c:	6860      	ldr	r0, [r4, #4]
    e84e:	f000 f929 	bl	eaa4 <memq_peek>
    e852:	4680      	mov	r8, r0
				 mft[callee_id][caller_id].head,
				 (void **)&m);
		while (link) {
    e854:	e017      	b.n	e886 <mayfly_run+0x7e>
			/* execute work if ready */
			req = m->_req;
			state = (req - m->_ack) & 0x03;
			if (state == 1) {
				/* mark mayfly as ran */
				m->_ack--;
    e856:	3a01      	subs	r2, #1
    e858:	705a      	strb	r2, [r3, #1]

				/* call the mayfly function */
				m->fp(m->param);
    e85a:	9b03      	ldr	r3, [sp, #12]
    e85c:	68da      	ldr	r2, [r3, #12]
    e85e:	6898      	ldr	r0, [r3, #8]
    e860:	4790      	blx	r2
    e862:	e01b      	b.n	e89c <mayfly_run+0x94>
				/* reset mayfly state to idle */
				m->_ack = req;
			}

			/* fetch next mayfly in callee queue, if any */
			link = memq_peek(mft[callee_id][caller_id].tail,
    e864:	4944      	ldr	r1, [pc, #272]	; (e978 <mayfly_run+0x170>)
    e866:	0072      	lsls	r2, r6, #1
    e868:	4432      	add	r2, r6
    e86a:	0093      	lsls	r3, r2, #2
    e86c:	007a      	lsls	r2, r7, #1
    e86e:	443a      	add	r2, r7
    e870:	0110      	lsls	r0, r2, #4
    e872:	4403      	add	r3, r0
    e874:	18c8      	adds	r0, r1, r3
    e876:	aa03      	add	r2, sp, #12
    e878:	58c9      	ldr	r1, [r1, r3]
    e87a:	6840      	ldr	r0, [r0, #4]
    e87c:	f000 f912 	bl	eaa4 <memq_peek>
    e880:	4680      	mov	r8, r0
					 (void **)&m);

			/* yield out of mayfly_run if a mayfly function was
			 * called.
			 */
			if (state == 1) {
    e882:	2c01      	cmp	r4, #1
    e884:	d026      	beq.n	e8d4 <mayfly_run+0xcc>
		while (link) {
    e886:	f1b8 0f00 	cmp.w	r8, #0
    e88a:	d030      	beq.n	e8ee <mayfly_run+0xe6>
			req = m->_req;
    e88c:	9b03      	ldr	r3, [sp, #12]
    e88e:	781c      	ldrb	r4, [r3, #0]
			state = (req - m->_ack) & 0x03;
    e890:	785a      	ldrb	r2, [r3, #1]
    e892:	1aa4      	subs	r4, r4, r2
    e894:	f004 0403 	and.w	r4, r4, #3
			if (state == 1) {
    e898:	2c01      	cmp	r4, #1
    e89a:	d0dc      	beq.n	e856 <mayfly_run+0x4e>
			req = m->_req;
    e89c:	9b03      	ldr	r3, [sp, #12]
    e89e:	781d      	ldrb	r5, [r3, #0]
    e8a0:	b2ed      	uxtb	r5, r5
			if (((req - m->_ack) & 0x03) != 1) {
    e8a2:	785b      	ldrb	r3, [r3, #1]
    e8a4:	1aeb      	subs	r3, r5, r3
    e8a6:	f003 0303 	and.w	r3, r3, #3
    e8aa:	2b01      	cmp	r3, #1
    e8ac:	d0da      	beq.n	e864 <mayfly_run+0x5c>
				memq_dequeue(mft[callee_id][caller_id].tail,
    e8ae:	0072      	lsls	r2, r6, #1
    e8b0:	4432      	add	r2, r6
    e8b2:	0093      	lsls	r3, r2, #2
    e8b4:	0079      	lsls	r1, r7, #1
    e8b6:	4439      	add	r1, r7
    e8b8:	010a      	lsls	r2, r1, #4
    e8ba:	441a      	add	r2, r3
    e8bc:	4b2e      	ldr	r3, [pc, #184]	; (e978 <mayfly_run+0x170>)
    e8be:	4413      	add	r3, r2
    e8c0:	2200      	movs	r2, #0
    e8c2:	4619      	mov	r1, r3
    e8c4:	6858      	ldr	r0, [r3, #4]
    e8c6:	f000 f8f6 	bl	eab6 <memq_dequeue>
				m->_link = link;
    e8ca:	9b03      	ldr	r3, [sp, #12]
    e8cc:	f8c3 8004 	str.w	r8, [r3, #4]
				m->_ack = req;
    e8d0:	705d      	strb	r5, [r3, #1]
    e8d2:	e7c7      	b.n	e864 <mayfly_run+0x5c>
				/* pend callee (tailchain) if mayfly queue is
				 * not empty or all caller queues are not
				 * processed.
				 */
				if (caller_id || link) {
    e8d4:	f1b9 0f00 	cmp.w	r9, #0
    e8d8:	d006      	beq.n	e8e8 <mayfly_run+0xe0>
					mayfly_pend(callee_id, callee_id);
    e8da:	4651      	mov	r1, sl
    e8dc:	4650      	mov	r0, sl
    e8de:	f00a f925 	bl	18b2c <mayfly_pend>
	}

	if (disable && !enable) {
		mayfly_enable_cb(callee_id, callee_id, 0);
	}
}
    e8e2:	b005      	add	sp, #20
    e8e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				if (caller_id || link) {
    e8e8:	2800      	cmp	r0, #0
    e8ea:	d0cc      	beq.n	e886 <mayfly_run+0x7e>
    e8ec:	e7f5      	b.n	e8da <mayfly_run+0xd2>
		if (mft[callee_id][caller_id].disable_req !=
    e8ee:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e8f2:	444a      	add	r2, r9
    e8f4:	0093      	lsls	r3, r2, #2
    e8f6:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e8fa:	4451      	add	r1, sl
    e8fc:	010a      	lsls	r2, r1, #4
    e8fe:	441a      	add	r2, r3
    e900:	4b1d      	ldr	r3, [pc, #116]	; (e978 <mayfly_run+0x170>)
    e902:	4413      	add	r3, r2
    e904:	7a99      	ldrb	r1, [r3, #10]
		    mft[callee_id][caller_id].disable_ack) {
    e906:	7adb      	ldrb	r3, [r3, #11]
		if (mft[callee_id][caller_id].disable_req !=
    e908:	4299      	cmp	r1, r3
    e90a:	d00b      	beq.n	e924 <mayfly_run+0x11c>
			mft[callee_id][caller_id].disable_ack =
    e90c:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e910:	0093      	lsls	r3, r2, #2
    e912:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e916:	0102      	lsls	r2, r0, #4
    e918:	4413      	add	r3, r2
    e91a:	4a17      	ldr	r2, [pc, #92]	; (e978 <mayfly_run+0x170>)
    e91c:	4413      	add	r3, r2
    e91e:	72d9      	strb	r1, [r3, #11]
			disable = 1;
    e920:	2301      	movs	r3, #1
    e922:	9301      	str	r3, [sp, #4]
		if (mft[callee_id][caller_id].enable_req !=
    e924:	ea4f 0249 	mov.w	r2, r9, lsl #1
    e928:	444a      	add	r2, r9
    e92a:	0093      	lsls	r3, r2, #2
    e92c:	ea4f 014a 	mov.w	r1, sl, lsl #1
    e930:	4451      	add	r1, sl
    e932:	010a      	lsls	r2, r1, #4
    e934:	441a      	add	r2, r3
    e936:	4b10      	ldr	r3, [pc, #64]	; (e978 <mayfly_run+0x170>)
    e938:	4413      	add	r3, r2
    e93a:	7a19      	ldrb	r1, [r3, #8]
		    mft[callee_id][caller_id].enable_ack) {
    e93c:	7a5b      	ldrb	r3, [r3, #9]
		if (mft[callee_id][caller_id].enable_req !=
    e93e:	4299      	cmp	r1, r3
    e940:	d00b      	beq.n	e95a <mayfly_run+0x152>
			mft[callee_id][caller_id].enable_ack =
    e942:	eb09 0249 	add.w	r2, r9, r9, lsl #1
    e946:	0093      	lsls	r3, r2, #2
    e948:	eb0a 004a 	add.w	r0, sl, sl, lsl #1
    e94c:	0102      	lsls	r2, r0, #4
    e94e:	4413      	add	r3, r2
    e950:	4a09      	ldr	r2, [pc, #36]	; (e978 <mayfly_run+0x170>)
    e952:	4413      	add	r3, r2
    e954:	7259      	strb	r1, [r3, #9]
			enable = 1;
    e956:	f04f 0b01 	mov.w	fp, #1
	while (caller_id--) {
    e95a:	464b      	mov	r3, r9
    e95c:	e75d      	b.n	e81a <mayfly_run+0x12>
	if (disable && !enable) {
    e95e:	9b01      	ldr	r3, [sp, #4]
    e960:	2b00      	cmp	r3, #0
    e962:	d0be      	beq.n	e8e2 <mayfly_run+0xda>
    e964:	f1bb 0f00 	cmp.w	fp, #0
    e968:	d1bb      	bne.n	e8e2 <mayfly_run+0xda>
		mayfly_enable_cb(callee_id, callee_id, 0);
    e96a:	2200      	movs	r2, #0
    e96c:	4651      	mov	r1, sl
    e96e:	4650      	mov	r0, sl
    e970:	f00a f8a5 	bl	18abe <mayfly_enable_cb>
    e974:	e7b5      	b.n	e8e2 <mayfly_run+0xda>
    e976:	bf00      	nop
    e978:	20000bf0 	.word	0x20000bf0

0000e97c <mem_init>:

#include "mem.h"

void mem_init(void *mem_pool, u16_t mem_size, u16_t mem_count,
	      void **mem_head)
{
    e97c:	b5f0      	push	{r4, r5, r6, r7, lr}
    e97e:	b083      	sub	sp, #12
    e980:	4607      	mov	r7, r0
    e982:	4608      	mov	r0, r1
	*mem_head = mem_pool;
    e984:	601f      	str	r7, [r3, #0]

	/* Store free mem_count after the list's next pointer at an aligned
	 * memory location to ensure atomic read/write (in ARM for now).
	 */
	*((u16_t *)MROUND((u8_t *)mem_pool + sizeof(mem_pool))) = mem_count;
    e986:	1dfb      	adds	r3, r7, #7
    e988:	f023 0303 	bic.w	r3, r3, #3
    e98c:	801a      	strh	r2, [r3, #0]

	/* Initialize next pointers to form a free list,
	 * next pointer is stored in the first 32-bit of each block
	 */
	memset(((u8_t *)mem_pool + (mem_size * (--mem_count))), 0,
    e98e:	460e      	mov	r6, r1
    e990:	3a01      	subs	r2, #1
    e992:	b295      	uxth	r5, r2
    e994:	2204      	movs	r2, #4
    e996:	2100      	movs	r1, #0
    e998:	fb05 7000 	mla	r0, r5, r0, r7
    e99c:	f01a fffc 	bl	29998 <memset>
	       sizeof(mem_pool));
	while (mem_count--) {
    e9a0:	e00b      	b.n	e9ba <mem_init+0x3e>
		u32_t next;

		next = (u32_t)((u8_t *) mem_pool +
			       (mem_size * (mem_count + 1)));
    e9a2:	fb04 6306 	mla	r3, r4, r6, r6
		next = (u32_t)((u8_t *) mem_pool +
    e9a6:	443b      	add	r3, r7
    e9a8:	a902      	add	r1, sp, #8
    e9aa:	f841 3d04 	str.w	r3, [r1, #-4]!
		memcpy(((u8_t *)mem_pool + (mem_size * mem_count)),
    e9ae:	2204      	movs	r2, #4
    e9b0:	fb04 7006 	mla	r0, r4, r6, r7
    e9b4:	f7f1 fc84 	bl	2c0 <memcpy>
	while (mem_count--) {
    e9b8:	4625      	mov	r5, r4
    e9ba:	1e6c      	subs	r4, r5, #1
    e9bc:	b2a4      	uxth	r4, r4
    e9be:	2d00      	cmp	r5, #0
    e9c0:	d1ef      	bne.n	e9a2 <mem_init+0x26>
		       (void *)&next, sizeof(next));
	}
}
    e9c2:	b003      	add	sp, #12
    e9c4:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000e9c6 <mem_acquire>:

void *mem_acquire(void **mem_head)
{
    e9c6:	b570      	push	{r4, r5, r6, lr}
    e9c8:	b082      	sub	sp, #8
	if (*mem_head) {
    e9ca:	6805      	ldr	r5, [r0, #0]
    e9cc:	b1a5      	cbz	r5, e9f8 <mem_acquire+0x32>
    e9ce:	4606      	mov	r6, r0
		u16_t free_count;
		void *head;
		void *mem;

		/* Get the free count from the list and decrement it */
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    e9d0:	1deb      	adds	r3, r5, #7
    e9d2:	f023 0303 	bic.w	r3, r3, #3
    e9d6:	881b      	ldrh	r3, [r3, #0]
					       sizeof(mem_head)));
		free_count--;
    e9d8:	3b01      	subs	r3, #1
    e9da:	b29c      	uxth	r4, r3

		mem = *mem_head;
		memcpy(&head, mem, sizeof(head));
    e9dc:	2204      	movs	r2, #4
    e9de:	4629      	mov	r1, r5
    e9e0:	eb0d 0002 	add.w	r0, sp, r2
    e9e4:	f7f1 fc6c 	bl	2c0 <memcpy>

		/* Store free mem_count after the list's next pointer */
		if (head) {
    e9e8:	9b01      	ldr	r3, [sp, #4]
    e9ea:	b11b      	cbz	r3, e9f4 <mem_acquire+0x2e>
			*((u16_t *)MROUND((u8_t *)head + sizeof(head))) =
    e9ec:	3307      	adds	r3, #7
    e9ee:	f023 0303 	bic.w	r3, r3, #3
    e9f2:	801c      	strh	r4, [r3, #0]
				free_count;
		}

		*mem_head = head;
    e9f4:	9b01      	ldr	r3, [sp, #4]
    e9f6:	6033      	str	r3, [r6, #0]
		return mem;
	}

	return NULL;
}
    e9f8:	4628      	mov	r0, r5
    e9fa:	b002      	add	sp, #8
    e9fc:	bd70      	pop	{r4, r5, r6, pc}

0000e9fe <mem_release>:

void mem_release(void *mem, void **mem_head)
{
    e9fe:	b570      	push	{r4, r5, r6, lr}
    ea00:	4606      	mov	r6, r0
    ea02:	460d      	mov	r5, r1
	u16_t free_count = 0;

	/* Get the free count from the list and increment it */
	if (*mem_head) {
    ea04:	680b      	ldr	r3, [r1, #0]
    ea06:	b183      	cbz	r3, ea2a <mem_release+0x2c>
		free_count = *((u16_t *)MROUND((u8_t *)*mem_head +
    ea08:	3307      	adds	r3, #7
    ea0a:	f023 0303 	bic.w	r3, r3, #3
    ea0e:	881c      	ldrh	r4, [r3, #0]
					       sizeof(mem_head)));
	}
	free_count++;
    ea10:	3401      	adds	r4, #1
    ea12:	b2a4      	uxth	r4, r4

	memcpy(mem, mem_head, sizeof(mem));
    ea14:	2204      	movs	r2, #4
    ea16:	4629      	mov	r1, r5
    ea18:	4630      	mov	r0, r6
    ea1a:	f7f1 fc51 	bl	2c0 <memcpy>

	/* Store free mem_count after the list's next pointer */
	*((u16_t *)MROUND((u8_t *)mem + sizeof(mem))) = free_count;
    ea1e:	1df3      	adds	r3, r6, #7
    ea20:	f023 0303 	bic.w	r3, r3, #3
    ea24:	801c      	strh	r4, [r3, #0]

	*mem_head = mem;
    ea26:	602e      	str	r6, [r5, #0]
    ea28:	bd70      	pop	{r4, r5, r6, pc}
	u16_t free_count = 0;
    ea2a:	2400      	movs	r4, #0
    ea2c:	e7f0      	b.n	ea10 <mem_release+0x12>

0000ea2e <mem_free_count_get>:
u16_t mem_free_count_get(void *mem_head)
{
	u16_t free_count = 0;

	/* Get the free count from the list */
	if (mem_head) {
    ea2e:	4603      	mov	r3, r0
    ea30:	b120      	cbz	r0, ea3c <mem_free_count_get+0xe>
		free_count = *((u16_t *)MROUND((u8_t *)mem_head +
    ea32:	3307      	adds	r3, #7
    ea34:	f023 0303 	bic.w	r3, r3, #3
    ea38:	8818      	ldrh	r0, [r3, #0]
    ea3a:	4770      	bx	lr
	u16_t free_count = 0;
    ea3c:	2000      	movs	r0, #0
					       sizeof(mem_head)));
	}

	return free_count;
}
    ea3e:	4770      	bx	lr

0000ea40 <mem_get>:

void *mem_get(void *mem_pool, u16_t mem_size, u16_t index)
{
	return ((void *)((u8_t *)mem_pool + (mem_size * index)));
}
    ea40:	fb02 0001 	mla	r0, r2, r1, r0
    ea44:	4770      	bx	lr

0000ea46 <mem_index_get>:

u16_t mem_index_get(void *mem, void *mem_pool, u16_t mem_size)
{
	return ((u16_t)((u8_t *)mem - (u8_t *)mem_pool) / mem_size);
    ea46:	1a40      	subs	r0, r0, r1
    ea48:	b280      	uxth	r0, r0
}
    ea4a:	fbb0 f0f2 	udiv	r0, r0, r2
    ea4e:	4770      	bx	lr

0000ea50 <mem_rcopy>:

void mem_rcopy(u8_t *dst, u8_t const *src, u16_t len)
{
	src += len;
    ea50:	4411      	add	r1, r2
	while (len--) {
    ea52:	e004      	b.n	ea5e <mem_rcopy+0xe>
		*dst++ = *--src;
    ea54:	f811 2d01 	ldrb.w	r2, [r1, #-1]!
    ea58:	7002      	strb	r2, [r0, #0]
	while (len--) {
    ea5a:	461a      	mov	r2, r3
		*dst++ = *--src;
    ea5c:	3001      	adds	r0, #1
	while (len--) {
    ea5e:	1e53      	subs	r3, r2, #1
    ea60:	b29b      	uxth	r3, r3
    ea62:	2a00      	cmp	r2, #0
    ea64:	d1f6      	bne.n	ea54 <mem_rcopy+0x4>
	}
}
    ea66:	4770      	bx	lr

0000ea68 <mem_nz>:

u8_t mem_nz(u8_t *src, u16_t len)
{
	while (len--) {
    ea68:	1e4b      	subs	r3, r1, #1
    ea6a:	b29b      	uxth	r3, r3
    ea6c:	b171      	cbz	r1, ea8c <mem_nz+0x24>
{
    ea6e:	b410      	push	{r4}
		if (*src++) {
    ea70:	1c44      	adds	r4, r0, #1
    ea72:	7802      	ldrb	r2, [r0, #0]
	while (len--) {
    ea74:	4619      	mov	r1, r3
		if (*src++) {
    ea76:	b93a      	cbnz	r2, ea88 <mem_nz+0x20>
    ea78:	4620      	mov	r0, r4
	while (len--) {
    ea7a:	3b01      	subs	r3, #1
    ea7c:	b29b      	uxth	r3, r3
    ea7e:	2900      	cmp	r1, #0
    ea80:	d1f6      	bne.n	ea70 <mem_nz+0x8>
			return 1;
		}
	}

	return 0;
    ea82:	2000      	movs	r0, #0
}
    ea84:	bc10      	pop	{r4}
    ea86:	4770      	bx	lr
			return 1;
    ea88:	2001      	movs	r0, #1
    ea8a:	e7fb      	b.n	ea84 <mem_nz+0x1c>
	return 0;
    ea8c:	2000      	movs	r0, #0
}
    ea8e:	4770      	bx	lr

0000ea90 <memq_init>:
inline void *memq_peek(void *tail, void *head, void **mem);

void *memq_init(void *link, void **head, void **tail)
{
	/* head and tail pointer to the initial link node */
	*head = *tail = link;
    ea90:	6010      	str	r0, [r2, #0]
    ea92:	6008      	str	r0, [r1, #0]

	return link;
}
    ea94:	4770      	bx	lr

0000ea96 <memq_enqueue>:

void *memq_enqueue(void *mem, void *link, void **tail)
{
	/* make the current tail link node point to new link node */
	*((void **)*tail) = link;
    ea96:	6813      	ldr	r3, [r2, #0]
    ea98:	6019      	str	r1, [r3, #0]

	/* assign mem to current tail link node */
	*((void **)*tail + 1) = mem;
    ea9a:	6813      	ldr	r3, [r2, #0]
    ea9c:	6058      	str	r0, [r3, #4]

	/* increment the tail! */
	*tail = link;
    ea9e:	6011      	str	r1, [r2, #0]

	return link;
}
    eaa0:	4608      	mov	r0, r1
    eaa2:	4770      	bx	lr

0000eaa4 <memq_peek>:
void *memq_peek(void *tail, void *head, void **mem)
{
	void *link;

	/* if head and tail are equal, then queue empty */
	if (head == tail) {
    eaa4:	4281      	cmp	r1, r0
    eaa6:	d004      	beq.n	eab2 <memq_peek+0xe>

	/* pick the head link node */
	link = head;

	/* extract the element node */
	if (mem) {
    eaa8:	b10a      	cbz	r2, eaae <memq_peek+0xa>
		*mem = *((void **)link + 1);
    eaaa:	684b      	ldr	r3, [r1, #4]
    eaac:	6013      	str	r3, [r2, #0]
	}

	return link;
}
    eaae:	4608      	mov	r0, r1
    eab0:	4770      	bx	lr
		return 0;
    eab2:	2100      	movs	r1, #0
    eab4:	e7fb      	b.n	eaae <memq_peek+0xa>

0000eab6 <memq_dequeue>:
void *memq_dequeue(void *tail, void **head, void **mem)
{
	void *link;

	/* use memq peek to get the link and mem */
	link = memq_peek(tail, *head, mem);
    eab6:	680b      	ldr	r3, [r1, #0]
	if (head == tail) {
    eab8:	4283      	cmp	r3, r0
    eaba:	d006      	beq.n	eaca <memq_dequeue+0x14>
	if (mem) {
    eabc:	b10a      	cbz	r2, eac2 <memq_dequeue+0xc>
		*mem = *((void **)link + 1);
    eabe:	6858      	ldr	r0, [r3, #4]
    eac0:	6010      	str	r0, [r2, #0]

	/* increment the head to next link node */
	*head = *((void **)link);
    eac2:	681a      	ldr	r2, [r3, #0]
    eac4:	600a      	str	r2, [r1, #0]

	return link;
}
    eac6:	4618      	mov	r0, r3
    eac8:	4770      	bx	lr
		return 0;
    eaca:	2300      	movs	r3, #0
    eacc:	e7f9      	b.n	eac2 <memq_dequeue+0xc>

0000eace <util_ones_count_get>:

#include <zephyr/types.h>
#include "util.h"

u8_t util_ones_count_get(u8_t *octets, u8_t octets_len)
{
    eace:	b410      	push	{r4}
	u8_t one_count = 0;
    ead0:	2200      	movs	r2, #0

	while (octets_len--) {
    ead2:	e008      	b.n	eae6 <util_ones_count_get+0x18>
		u8_t bite;

		bite = *octets;
		while (bite) {
			bite &= (bite - 1);
    ead4:	1e59      	subs	r1, r3, #1
    ead6:	b249      	sxtb	r1, r1
    ead8:	400b      	ands	r3, r1
			one_count++;
    eada:	3201      	adds	r2, #1
    eadc:	b2d2      	uxtb	r2, r2
		while (bite) {
    eade:	2b00      	cmp	r3, #0
    eae0:	d1f8      	bne.n	ead4 <util_ones_count_get+0x6>
		}
		octets++;
    eae2:	3001      	adds	r0, #1
	while (octets_len--) {
    eae4:	4621      	mov	r1, r4
    eae6:	1e4b      	subs	r3, r1, #1
    eae8:	b2dc      	uxtb	r4, r3
    eaea:	b109      	cbz	r1, eaf0 <util_ones_count_get+0x22>
		bite = *octets;
    eaec:	7803      	ldrb	r3, [r0, #0]
		while (bite) {
    eaee:	e7f6      	b.n	eade <util_ones_count_get+0x10>
	}

	return one_count;
}
    eaf0:	4610      	mov	r0, r2
    eaf2:	bc10      	pop	{r4}
    eaf4:	4770      	bx	lr
	...

0000eaf8 <cntr_init>:

static u8_t _refcount;

void cntr_init(void)
{
	NRF_RTC->PRESCALER = 0;
    eaf8:	4b05      	ldr	r3, [pc, #20]	; (eb10 <cntr_init+0x18>)
    eafa:	2200      	movs	r2, #0
    eafc:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
	NRF_RTC->EVTENSET = (RTC_EVTENSET_COMPARE0_Msk |
    eb00:	f44f 3240 	mov.w	r2, #196608	; 0x30000
    eb04:	f8c3 2344 	str.w	r2, [r3, #836]	; 0x344
			     RTC_EVTENSET_COMPARE1_Msk);
	NRF_RTC->INTENSET = (RTC_INTENSET_COMPARE0_Msk |
    eb08:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
    eb0c:	4770      	bx	lr
    eb0e:	bf00      	nop
    eb10:	4000b000 	.word	0x4000b000

0000eb14 <cntr_start>:
			     RTC_INTENSET_COMPARE1_Msk);
}

u32_t cntr_start(void)
{
	if (_refcount++) {
    eb14:	4a05      	ldr	r2, [pc, #20]	; (eb2c <cntr_start+0x18>)
    eb16:	7813      	ldrb	r3, [r2, #0]
    eb18:	1c59      	adds	r1, r3, #1
    eb1a:	7011      	strb	r1, [r2, #0]
    eb1c:	b923      	cbnz	r3, eb28 <cntr_start+0x14>
		return 1;
	}

	NRF_RTC->TASKS_START = 1;
    eb1e:	2201      	movs	r2, #1
    eb20:	4b03      	ldr	r3, [pc, #12]	; (eb30 <cntr_start+0x1c>)
    eb22:	601a      	str	r2, [r3, #0]

	return 0;
    eb24:	2000      	movs	r0, #0
    eb26:	4770      	bx	lr
		return 1;
    eb28:	2001      	movs	r0, #1
}
    eb2a:	4770      	bx	lr
    eb2c:	20000cb0 	.word	0x20000cb0
    eb30:	4000b000 	.word	0x4000b000

0000eb34 <cntr_stop>:

u32_t cntr_stop(void)
{
	LL_ASSERT(_refcount);
    eb34:	4b0a      	ldr	r3, [pc, #40]	; (eb60 <cntr_stop+0x2c>)
    eb36:	781b      	ldrb	r3, [r3, #0]
    eb38:	b14b      	cbz	r3, eb4e <cntr_stop+0x1a>

	if (--_refcount) {
    eb3a:	3b01      	subs	r3, #1
    eb3c:	b2db      	uxtb	r3, r3
    eb3e:	4a08      	ldr	r2, [pc, #32]	; (eb60 <cntr_stop+0x2c>)
    eb40:	7013      	strb	r3, [r2, #0]
    eb42:	b953      	cbnz	r3, eb5a <cntr_stop+0x26>
		return 1;
	}

	NRF_RTC->TASKS_STOP = 1;
    eb44:	2201      	movs	r2, #1
    eb46:	4b07      	ldr	r3, [pc, #28]	; (eb64 <cntr_stop+0x30>)
    eb48:	605a      	str	r2, [r3, #4]

	return 0;
    eb4a:	2000      	movs	r0, #0
    eb4c:	4770      	bx	lr
	LL_ASSERT(_refcount);
    eb4e:	4040      	eors	r0, r0
    eb50:	f380 8811 	msr	BASEPRI, r0
    eb54:	f04f 0004 	mov.w	r0, #4
    eb58:	df02      	svc	2
		return 1;
    eb5a:	2001      	movs	r0, #1
}
    eb5c:	4770      	bx	lr
    eb5e:	bf00      	nop
    eb60:	20000cb0 	.word	0x20000cb0
    eb64:	4000b000 	.word	0x4000b000

0000eb68 <cntr_cnt_get>:

u32_t cntr_cnt_get(void)
{
	return NRF_RTC->COUNTER;
    eb68:	4b01      	ldr	r3, [pc, #4]	; (eb70 <cntr_cnt_get+0x8>)
    eb6a:	f8d3 0504 	ldr.w	r0, [r3, #1284]	; 0x504
}
    eb6e:	4770      	bx	lr
    eb70:	4000b000 	.word	0x4000b000

0000eb74 <cntr_cmp_set>:

void cntr_cmp_set(u8_t cmp, u32_t value)
{
	NRF_RTC->CC[cmp] = value;
    eb74:	f500 70a8 	add.w	r0, r0, #336	; 0x150
    eb78:	4b01      	ldr	r3, [pc, #4]	; (eb80 <cntr_cmp_set+0xc>)
    eb7a:	f843 1020 	str.w	r1, [r3, r0, lsl #2]
    eb7e:	4770      	bx	lr
    eb80:	4000b000 	.word	0x4000b000

0000eb84 <do_ecb>:
	u8_t clear_text[16];
	u8_t cipher_text[16];
} __packed;

static void do_ecb(struct ecb_param *ecb)
{
    eb84:	e009      	b.n	eb9a <do_ecb+0x16>
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
		       (NRF_ECB->ECBDATAPTR != 0)) {
			/*__WFE();*/
		}
		NRF_ECB->TASKS_STOPECB = 1;
    eb86:	4b15      	ldr	r3, [pc, #84]	; (ebdc <do_ecb+0x58>)
    eb88:	2201      	movs	r2, #1
    eb8a:	605a      	str	r2, [r3, #4]
	} while ((NRF_ECB->EVENTS_ERRORECB != 0) || (NRF_ECB->ECBDATAPTR == 0));
    eb8c:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    eb90:	b91b      	cbnz	r3, eb9a <do_ecb+0x16>
    eb92:	4b12      	ldr	r3, [pc, #72]	; (ebdc <do_ecb+0x58>)
    eb94:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    eb98:	b9d3      	cbnz	r3, ebd0 <do_ecb+0x4c>
		NRF_ECB->TASKS_STOPECB = 1;
    eb9a:	4b10      	ldr	r3, [pc, #64]	; (ebdc <do_ecb+0x58>)
    eb9c:	2201      	movs	r2, #1
    eb9e:	605a      	str	r2, [r3, #4]
		NRF_ECB->ECBDATAPTR = (u32_t)ecb;
    eba0:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
		NRF_ECB->EVENTS_ENDECB = 0;
    eba4:	2100      	movs	r1, #0
    eba6:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_ECB->EVENTS_ERRORECB = 0;
    ebaa:	f8c3 1104 	str.w	r1, [r3, #260]	; 0x104
		NRF_ECB->TASKS_STARTECB = 1;
    ebae:	601a      	str	r2, [r3, #0]
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ebb0:	4b0a      	ldr	r3, [pc, #40]	; (ebdc <do_ecb+0x58>)
    ebb2:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    ebb6:	2b00      	cmp	r3, #0
    ebb8:	d1e5      	bne.n	eb86 <do_ecb+0x2>
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ebba:	4b08      	ldr	r3, [pc, #32]	; (ebdc <do_ecb+0x58>)
    ebbc:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		while ((NRF_ECB->EVENTS_ENDECB == 0) &&
    ebc0:	2b00      	cmp	r3, #0
    ebc2:	d1e0      	bne.n	eb86 <do_ecb+0x2>
		       (NRF_ECB->ECBDATAPTR != 0)) {
    ebc4:	4b05      	ldr	r3, [pc, #20]	; (ebdc <do_ecb+0x58>)
    ebc6:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
		       (NRF_ECB->EVENTS_ERRORECB == 0) &&
    ebca:	2b00      	cmp	r3, #0
    ebcc:	d1f0      	bne.n	ebb0 <do_ecb+0x2c>
    ebce:	e7da      	b.n	eb86 <do_ecb+0x2>

	NRF_ECB->ECBDATAPTR = 0;
    ebd0:	2200      	movs	r2, #0
    ebd2:	4b02      	ldr	r3, [pc, #8]	; (ebdc <do_ecb+0x58>)
    ebd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    ebd8:	4770      	bx	lr
    ebda:	bf00      	nop
    ebdc:	4000e000 	.word	0x4000e000

0000ebe0 <ecb_encrypt>:
	memcpy(cipher_text_be, &ecb.cipher_text[0], sizeof(ecb.cipher_text));
}

void ecb_encrypt(u8_t const *const key_le, u8_t const *const clear_text_le,
		 u8_t * const cipher_text_le, u8_t * const cipher_text_be)
{
    ebe0:	b570      	push	{r4, r5, r6, lr}
    ebe2:	b08c      	sub	sp, #48	; 0x30
    ebe4:	460e      	mov	r6, r1
    ebe6:	4615      	mov	r5, r2
    ebe8:	461c      	mov	r4, r3
	struct ecb_param ecb;

	mem_rcopy(&ecb.key[0], key_le, sizeof(ecb.key));
    ebea:	2210      	movs	r2, #16
    ebec:	4601      	mov	r1, r0
    ebee:	4668      	mov	r0, sp
    ebf0:	f7ff ff2e 	bl	ea50 <mem_rcopy>
	mem_rcopy(&ecb.clear_text[0], clear_text_le, sizeof(ecb.clear_text));
    ebf4:	2210      	movs	r2, #16
    ebf6:	4631      	mov	r1, r6
    ebf8:	eb0d 0002 	add.w	r0, sp, r2
    ebfc:	f7ff ff28 	bl	ea50 <mem_rcopy>

	do_ecb(&ecb);
    ec00:	4668      	mov	r0, sp
    ec02:	f7ff ffbf 	bl	eb84 <do_ecb>

	if (cipher_text_le) {
    ec06:	b125      	cbz	r5, ec12 <ecb_encrypt+0x32>
		mem_rcopy(cipher_text_le, &ecb.cipher_text[0],
    ec08:	2210      	movs	r2, #16
    ec0a:	a908      	add	r1, sp, #32
    ec0c:	4628      	mov	r0, r5
    ec0e:	f7ff ff1f 	bl	ea50 <mem_rcopy>
			  sizeof(ecb.cipher_text));
	}

	if (cipher_text_be) {
    ec12:	b124      	cbz	r4, ec1e <ecb_encrypt+0x3e>
		memcpy(cipher_text_be, &ecb.cipher_text[0],
    ec14:	2210      	movs	r2, #16
    ec16:	a908      	add	r1, sp, #32
    ec18:	4620      	mov	r0, r4
    ec1a:	f7f1 fb51 	bl	2c0 <memcpy>
			 sizeof(ecb.cipher_text));
	}
}
    ec1e:	b00c      	add	sp, #48	; 0x30
    ec20:	bd70      	pop	{r4, r5, r6, pc}
	...

0000ec24 <isr_radio>:
#endif

static radio_isr_fp sfp_radio_isr;

void isr_radio(void)
{
    ec24:	b508      	push	{r3, lr}
	if (sfp_radio_isr) {
    ec26:	4b02      	ldr	r3, [pc, #8]	; (ec30 <isr_radio+0xc>)
    ec28:	681b      	ldr	r3, [r3, #0]
    ec2a:	b103      	cbz	r3, ec2e <isr_radio+0xa>
		sfp_radio_isr();
    ec2c:	4798      	blx	r3
    ec2e:	bd08      	pop	{r3, pc}
    ec30:	20000ed0 	.word	0x20000ed0

0000ec34 <radio_isr_set>:
	}
}

void radio_isr_set(radio_isr_fp fp_radio_isr)
{
    ec34:	b508      	push	{r3, lr}
	sfp_radio_isr = fp_radio_isr;	/* atomic assignment of 32-bit word */
    ec36:	4b07      	ldr	r3, [pc, #28]	; (ec54 <radio_isr_set+0x20>)
    ec38:	6018      	str	r0, [r3, #0]

	NRF_RADIO->INTENSET = (0 |
    ec3a:	2210      	movs	r2, #16
    ec3c:	4b06      	ldr	r3, [pc, #24]	; (ec58 <radio_isr_set+0x24>)
    ec3e:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
  NVIC->ICPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
    ec42:	2202      	movs	r2, #2
    ec44:	4b05      	ldr	r3, [pc, #20]	; (ec5c <radio_isr_set+0x28>)
    ec46:	f8c3 2180 	str.w	r2, [r3, #384]	; 0x180
				/* | RADIO_INTENSET_RSSIEND_Msk |
				 */
	    );

	NVIC_ClearPendingIRQ(RADIO_IRQn);
	irq_enable(RADIO_IRQn);
    ec4a:	2001      	movs	r0, #1
    ec4c:	f018 fa3c 	bl	270c8 <_arch_irq_enable>
    ec50:	bd08      	pop	{r3, pc}
    ec52:	bf00      	nop
    ec54:	20000ed0 	.word	0x20000ed0
    ec58:	40001000 	.word	0x40001000
    ec5c:	e000e100 	.word	0xe000e100

0000ec60 <radio_setup>:
			u32_t volatile PDM;
			u32_t volatile PWM;
		} RAMPRI;
	} volatile *NRF_AMLI = (void volatile *)0x40000000UL;

	NRF_AMLI->RAMPRI.CPU0    = 0xFFFFFFFFUL;
    ec60:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
    ec64:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
    ec68:	f8c3 2e00 	str.w	r2, [r3, #3584]	; 0xe00
	NRF_AMLI->RAMPRI.SPIS1   = 0xFFFFFFFFUL;
    ec6c:	f8c3 2e04 	str.w	r2, [r3, #3588]	; 0xe04
	NRF_AMLI->RAMPRI.RADIO   = 0x00000000UL;
    ec70:	2100      	movs	r1, #0
    ec72:	f8c3 1e08 	str.w	r1, [r3, #3592]	; 0xe08
	NRF_AMLI->RAMPRI.ECB     = 0xFFFFFFFFUL;
    ec76:	f8c3 2e0c 	str.w	r2, [r3, #3596]	; 0xe0c
	NRF_AMLI->RAMPRI.CCM     = 0x00000000UL;
    ec7a:	f8c3 1e10 	str.w	r1, [r3, #3600]	; 0xe10
	NRF_AMLI->RAMPRI.AAR     = 0xFFFFFFFFUL;
    ec7e:	f8c3 2e14 	str.w	r2, [r3, #3604]	; 0xe14
	NRF_AMLI->RAMPRI.SAADC   = 0xFFFFFFFFUL;
    ec82:	f8c3 2e18 	str.w	r2, [r3, #3608]	; 0xe18
	NRF_AMLI->RAMPRI.UARTE   = 0xFFFFFFFFUL;
    ec86:	f8c3 2e1c 	str.w	r2, [r3, #3612]	; 0xe1c
	NRF_AMLI->RAMPRI.SERIAL0 = 0xFFFFFFFFUL;
    ec8a:	f8c3 2e20 	str.w	r2, [r3, #3616]	; 0xe20
	NRF_AMLI->RAMPRI.SERIAL2 = 0xFFFFFFFFUL;
    ec8e:	f8c3 2e24 	str.w	r2, [r3, #3620]	; 0xe24
	NRF_AMLI->RAMPRI.NFCT    = 0xFFFFFFFFUL;
    ec92:	f8c3 2e28 	str.w	r2, [r3, #3624]	; 0xe28
	NRF_AMLI->RAMPRI.I2S     = 0xFFFFFFFFUL;
    ec96:	f8c3 2e2c 	str.w	r2, [r3, #3628]	; 0xe2c
	NRF_AMLI->RAMPRI.PDM     = 0xFFFFFFFFUL;
    ec9a:	f8c3 2e30 	str.w	r2, [r3, #3632]	; 0xe30
	NRF_AMLI->RAMPRI.PWM     = 0xFFFFFFFFUL;
    ec9e:	f8c3 2e34 	str.w	r2, [r3, #3636]	; 0xe34
    eca2:	4770      	bx	lr

0000eca4 <radio_reset>:
#endif /* CONFIG_SOC_SERIES_NRF52X */
}

void radio_reset(void)
{
    eca4:	b508      	push	{r3, lr}
	irq_disable(RADIO_IRQn);
    eca6:	2001      	movs	r0, #1
    eca8:	f018 fa1c 	bl	270e4 <_arch_irq_disable>

	NRF_RADIO->POWER =
    ecac:	4b03      	ldr	r3, [pc, #12]	; (ecbc <radio_reset+0x18>)
    ecae:	2200      	movs	r2, #0
    ecb0:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
	    ((RADIO_POWER_POWER_Disabled << RADIO_POWER_POWER_Pos) &
	     RADIO_POWER_POWER_Msk);
	NRF_RADIO->POWER =
    ecb4:	2201      	movs	r2, #1
    ecb6:	f8c3 2ffc 	str.w	r2, [r3, #4092]	; 0xffc
    ecba:	bd08      	pop	{r3, pc}
    ecbc:	40001000 	.word	0x40001000

0000ecc0 <radio_phy_set>:

void radio_phy_set(u8_t phy, u8_t flags)
{
	u32_t mode;

	switch (phy) {
    ecc0:	2802      	cmp	r0, #2
    ecc2:	d106      	bne.n	ecd2 <radio_phy_set+0x12>
		mode = RADIO_MODE_MODE_Nrf_2Mbit;
		break;

#elif defined(CONFIG_SOC_SERIES_NRF52X)
	case BIT(1):
		mode = RADIO_MODE_MODE_Ble_2Mbit;
    ecc4:	2304      	movs	r3, #4
		break;
#endif /* CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
	}

	NRF_RADIO->MODE = (mode << RADIO_MODE_MODE_Pos) & RADIO_MODE_MODE_Msk;
    ecc6:	f003 030f 	and.w	r3, r3, #15
    ecca:	4a03      	ldr	r2, [pc, #12]	; (ecd8 <radio_phy_set+0x18>)
    eccc:	f8c2 3510 	str.w	r3, [r2, #1296]	; 0x510
    ecd0:	4770      	bx	lr
		mode = RADIO_MODE_MODE_Ble_1Mbit;
    ecd2:	2303      	movs	r3, #3
    ecd4:	e7f7      	b.n	ecc6 <radio_phy_set+0x6>
    ecd6:	bf00      	nop
    ecd8:	40001000 	.word	0x40001000

0000ecdc <radio_tx_power_set>:
}

void radio_tx_power_set(u32_t power)
{
	/* TODO map power to h/w values. */
	NRF_RADIO->TXPOWER = power;
    ecdc:	4b01      	ldr	r3, [pc, #4]	; (ece4 <radio_tx_power_set+0x8>)
    ecde:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
    ece2:	4770      	bx	lr
    ece4:	40001000 	.word	0x40001000

0000ece8 <radio_freq_chan_set>:
}

void radio_freq_chan_set(u32_t chan)
{
	NRF_RADIO->FREQUENCY = chan;
    ece8:	4b01      	ldr	r3, [pc, #4]	; (ecf0 <radio_freq_chan_set+0x8>)
    ecea:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
    ecee:	4770      	bx	lr
    ecf0:	40001000 	.word	0x40001000

0000ecf4 <radio_whiten_iv_set>:
}

void radio_whiten_iv_set(u32_t iv)
{
	NRF_RADIO->DATAWHITEIV = iv;
    ecf4:	4b07      	ldr	r3, [pc, #28]	; (ed14 <radio_whiten_iv_set+0x20>)
    ecf6:	f8c3 0554 	str.w	r0, [r3, #1364]	; 0x554

	NRF_RADIO->PCNF1 &= ~RADIO_PCNF1_WHITEEN_Msk;
    ecfa:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ecfe:	f022 7200 	bic.w	r2, r2, #33554432	; 0x2000000
    ed02:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
	NRF_RADIO->PCNF1 |= ((1UL) << RADIO_PCNF1_WHITEEN_Pos) &
    ed06:	f8d3 2518 	ldr.w	r2, [r3, #1304]	; 0x518
    ed0a:	f042 7200 	orr.w	r2, r2, #33554432	; 0x2000000
    ed0e:	f8c3 2518 	str.w	r2, [r3, #1304]	; 0x518
    ed12:	4770      	bx	lr
    ed14:	40001000 	.word	0x40001000

0000ed18 <radio_aa_set>:
			    RADIO_PCNF1_WHITEEN_Msk;
}

void radio_aa_set(u8_t *aa)
{
	NRF_RADIO->TXADDRESS =
    ed18:	4a0a      	ldr	r2, [pc, #40]	; (ed44 <radio_aa_set+0x2c>)
    ed1a:	2300      	movs	r3, #0
    ed1c:	f8c2 352c 	str.w	r3, [r2, #1324]	; 0x52c
	    (((0UL) << RADIO_TXADDRESS_TXADDRESS_Pos) &
	     RADIO_TXADDRESS_TXADDRESS_Msk);
	NRF_RADIO->RXADDRESSES =
    ed20:	2301      	movs	r3, #1
    ed22:	f8c2 3530 	str.w	r3, [r2, #1328]	; 0x530
	    ((RADIO_RXADDRESSES_ADDR0_Enabled) << RADIO_RXADDRESSES_ADDR0_Pos);
	NRF_RADIO->PREFIX0 = aa[3];
    ed26:	78c3      	ldrb	r3, [r0, #3]
    ed28:	f8c2 3524 	str.w	r3, [r2, #1316]	; 0x524
	NRF_RADIO->BASE0 = (aa[2] << 24) | (aa[1] << 16) | (aa[0] << 8);
    ed2c:	7881      	ldrb	r1, [r0, #2]
    ed2e:	7843      	ldrb	r3, [r0, #1]
    ed30:	041b      	lsls	r3, r3, #16
    ed32:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
    ed36:	7801      	ldrb	r1, [r0, #0]
    ed38:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
    ed3c:	f8c2 351c 	str.w	r3, [r2, #1308]	; 0x51c
    ed40:	4770      	bx	lr
    ed42:	bf00      	nop
    ed44:	40001000 	.word	0x40001000

0000ed48 <radio_pkt_configure>:
}

void radio_pkt_configure(u8_t bits_len, u8_t max_len, u8_t flags)
{
    ed48:	b410      	push	{r4}
	u8_t dc = flags & 0x01; /* Adv or Data channel */
    ed4a:	f002 0401 	and.w	r4, r2, #1
		bits_len = 5;
	}
#elif defined(CONFIG_SOC_SERIES_NRF52X)
	extra = 0;

	phy = (flags >> 1) & 0x07; /* phy */
    ed4e:	f3c2 0242 	ubfx	r2, r2, #1, #3
	switch (phy) {
    ed52:	2a02      	cmp	r2, #2
    ed54:	d020      	beq.n	ed98 <radio_pkt_configure+0x50>
	case BIT(0):
	default:
		extra |= (RADIO_PCNF0_PLEN_8bit << RADIO_PCNF0_PLEN_Pos) &
    ed56:	2300      	movs	r3, #0
	}

	/* To use same Data Channel PDU structure with nRF5 specific overhead
	 * byte, include the S1 field in radio packet configuration.
	 */
	if (dc) {
    ed58:	b10c      	cbz	r4, ed5e <radio_pkt_configure+0x16>
		extra |= (RADIO_PCNF0_S1INCL_Include <<
    ed5a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
	}
#endif /* CONFIG_SOC_SERIES_NRF52X */

	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
			    RADIO_PCNF0_S0LEN_Msk) |
			   ((((u32_t)bits_len) << RADIO_PCNF0_LFLEN_Pos) &
    ed5e:	f000 020f 	and.w	r2, r0, #15
			    RADIO_PCNF0_LFLEN_Msk) |
			   ((((u32_t)8-bits_len) << RADIO_PCNF0_S1LEN_Pos) &
    ed62:	f1c0 0008 	rsb	r0, r0, #8
    ed66:	0400      	lsls	r0, r0, #16
    ed68:	f400 2070 	and.w	r0, r0, #983040	; 0xf0000
			    RADIO_PCNF0_LFLEN_Msk) |
    ed6c:	4310      	orrs	r0, r2
			    RADIO_PCNF0_S1LEN_Msk) |
    ed6e:	4303      	orrs	r3, r0
    ed70:	f443 7380 	orr.w	r3, r3, #256	; 0x100
	NRF_RADIO->PCNF0 = (((1UL) << RADIO_PCNF0_S0LEN_Pos) &
    ed74:	4a0a      	ldr	r2, [pc, #40]	; (eda0 <radio_pkt_configure+0x58>)
    ed76:	f8c2 3514 	str.w	r3, [r2, #1300]	; 0x514
			   extra;

	NRF_RADIO->PCNF1 &= ~(RADIO_PCNF1_MAXLEN_Msk | RADIO_PCNF1_STATLEN_Msk |
    ed7a:	f8d2 0518 	ldr.w	r0, [r2, #1304]	; 0x518
    ed7e:	4b09      	ldr	r3, [pc, #36]	; (eda4 <radio_pkt_configure+0x5c>)
    ed80:	4003      	ands	r3, r0
    ed82:	f8c2 3518 	str.w	r3, [r2, #1304]	; 0x518
			      RADIO_PCNF1_BALEN_Msk | RADIO_PCNF1_ENDIAN_Msk);
	NRF_RADIO->PCNF1 |= ((((u32_t)max_len) << RADIO_PCNF1_MAXLEN_Pos) &
    ed86:	f8d2 3518 	ldr.w	r3, [r2, #1304]	; 0x518
    ed8a:	4319      	orrs	r1, r3
    ed8c:	f441 3140 	orr.w	r1, r1, #196608	; 0x30000
    ed90:	f8c2 1518 	str.w	r1, [r2, #1304]	; 0x518
			    (((3UL) << RADIO_PCNF1_BALEN_Pos) &
			     RADIO_PCNF1_BALEN_Msk) |
			    (((RADIO_PCNF1_ENDIAN_Little) <<
			      RADIO_PCNF1_ENDIAN_Pos) &
			     RADIO_PCNF1_ENDIAN_Msk);
}
    ed94:	bc10      	pop	{r4}
    ed96:	4770      	bx	lr
		extra |= (RADIO_PCNF0_PLEN_16bit << RADIO_PCNF0_PLEN_Pos) &
    ed98:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
    ed9c:	e7dc      	b.n	ed58 <radio_pkt_configure+0x10>
    ed9e:	bf00      	nop
    eda0:	40001000 	.word	0x40001000
    eda4:	fef80000 	.word	0xfef80000

0000eda8 <radio_pkt_rx_set>:

void radio_pkt_rx_set(void *rx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)rx_packet;
    eda8:	4b01      	ldr	r3, [pc, #4]	; (edb0 <radio_pkt_rx_set+0x8>)
    edaa:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    edae:	4770      	bx	lr
    edb0:	40001000 	.word	0x40001000

0000edb4 <radio_pkt_tx_set>:
}

void radio_pkt_tx_set(void *tx_packet)
{
	NRF_RADIO->PACKETPTR = (u32_t)tx_packet;
    edb4:	4b01      	ldr	r3, [pc, #4]	; (edbc <radio_pkt_tx_set+0x8>)
    edb6:	f8c3 0504 	str.w	r0, [r3, #1284]	; 0x504
    edba:	4770      	bx	lr
    edbc:	40001000 	.word	0x40001000

0000edc0 <radio_tx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 131; /* floor(129.5 + 1.6) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    edc0:	208c      	movs	r0, #140	; 0x8c
    edc2:	4770      	bx	lr

0000edc4 <radio_tx_chain_delay_get>:
	}
#else /* !CONFIG_SOC_NRF52840 */
	return 1; /* ceil(0.6) */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    edc4:	2001      	movs	r0, #1
    edc6:	4770      	bx	lr

0000edc8 <radio_rx_ready_delay_get>:
#else /* !CONFIG_BT_CTLR_TIFS_HW */
	return 130; /* ceil(129.5 + 0.2) */
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    edc8:	208c      	movs	r0, #140	; 0x8c
    edca:	4770      	bx	lr

0000edcc <radio_rx_chain_delay_get>:
		} else {
			return 20; /* ciel(19.6) */
		}
	}
#else /* !CONFIG_SOC_NRF52840 */
	switch (phy) {
    edcc:	2802      	cmp	r0, #2
    edce:	d101      	bne.n	edd4 <radio_rx_chain_delay_get+0x8>
	default:
	case BIT(0):
		return 10; /* ceil(9.4) */
	case BIT(1):
		return 5; /* ceil(5) */
    edd0:	2005      	movs	r0, #5
	}
#endif /* !CONFIG_SOC_NRF52840 */
#endif /* CONFIG_SOC_SERIES_NRF52X */
}
    edd2:	4770      	bx	lr
		return 10; /* ceil(9.4) */
    edd4:	200a      	movs	r0, #10
    edd6:	4770      	bx	lr

0000edd8 <radio_rx_enable>:

void radio_rx_enable(void)
{
	NRF_RADIO->TASKS_RXEN = 1;
    edd8:	2201      	movs	r2, #1
    edda:	4b01      	ldr	r3, [pc, #4]	; (ede0 <radio_rx_enable+0x8>)
    eddc:	605a      	str	r2, [r3, #4]
    edde:	4770      	bx	lr
    ede0:	40001000 	.word	0x40001000

0000ede4 <radio_tx_enable>:
}

void radio_tx_enable(void)
{
	NRF_RADIO->TASKS_TXEN = 1;
    ede4:	2201      	movs	r2, #1
    ede6:	4b01      	ldr	r3, [pc, #4]	; (edec <radio_tx_enable+0x8>)
    ede8:	601a      	str	r2, [r3, #0]
    edea:	4770      	bx	lr
    edec:	40001000 	.word	0x40001000

0000edf0 <radio_disable>:
	NRF_PPI->CHENCLR = PPI_CHEN_CH9_Msk | PPI_CHEN_CH12_Msk;
	NRF_PPI->TASKS_CHG[0].DIS = 1;
	NRF_PPI->TASKS_CHG[1].DIS = 1;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	NRF_RADIO->SHORTS = 0;
    edf0:	4b03      	ldr	r3, [pc, #12]	; (ee00 <radio_disable+0x10>)
    edf2:	2200      	movs	r2, #0
    edf4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_RADIO->TASKS_DISABLE = 1;
    edf8:	2201      	movs	r2, #1
    edfa:	611a      	str	r2, [r3, #16]
    edfc:	4770      	bx	lr
    edfe:	bf00      	nop
    ee00:	40001000 	.word	0x40001000

0000ee04 <radio_status_reset>:
}

void radio_status_reset(void)
{
	NRF_RADIO->EVENTS_READY = 0;
    ee04:	4b06      	ldr	r3, [pc, #24]	; (ee20 <radio_status_reset+0x1c>)
    ee06:	2200      	movs	r2, #0
    ee08:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_RADIO->EVENTS_ADDRESS = 0;
    ee0c:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_RADIO->EVENTS_PAYLOAD = 0;
    ee10:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108
	NRF_RADIO->EVENTS_END = 0;
    ee14:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
	NRF_RADIO->EVENTS_DISABLED = 0;
    ee18:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
    ee1c:	4770      	bx	lr
    ee1e:	bf00      	nop
    ee20:	40001000 	.word	0x40001000

0000ee24 <radio_is_ready>:
}

u32_t radio_is_ready(void)
{
	return (NRF_RADIO->EVENTS_READY != 0);
    ee24:	4b03      	ldr	r3, [pc, #12]	; (ee34 <radio_is_ready+0x10>)
    ee26:	f8d3 0100 	ldr.w	r0, [r3, #256]	; 0x100
}
    ee2a:	3000      	adds	r0, #0
    ee2c:	bf18      	it	ne
    ee2e:	2001      	movne	r0, #1
    ee30:	4770      	bx	lr
    ee32:	bf00      	nop
    ee34:	40001000 	.word	0x40001000

0000ee38 <radio_is_done>:

u32_t radio_is_done(void)
{
	return (NRF_RADIO->EVENTS_END != 0);
    ee38:	4b03      	ldr	r3, [pc, #12]	; (ee48 <radio_is_done+0x10>)
    ee3a:	f8d3 010c 	ldr.w	r0, [r3, #268]	; 0x10c
}
    ee3e:	3000      	adds	r0, #0
    ee40:	bf18      	it	ne
    ee42:	2001      	movne	r0, #1
    ee44:	4770      	bx	lr
    ee46:	bf00      	nop
    ee48:	40001000 	.word	0x40001000

0000ee4c <radio_is_idle>:
	return (NRF_RADIO->EVENTS_DISABLED != 0);
}

u32_t radio_is_idle(void)
{
	return (NRF_RADIO->STATE == 0);
    ee4c:	4b03      	ldr	r3, [pc, #12]	; (ee5c <radio_is_idle+0x10>)
    ee4e:	f8d3 0550 	ldr.w	r0, [r3, #1360]	; 0x550
}
    ee52:	fab0 f080 	clz	r0, r0
    ee56:	0940      	lsrs	r0, r0, #5
    ee58:	4770      	bx	lr
    ee5a:	bf00      	nop
    ee5c:	40001000 	.word	0x40001000

0000ee60 <radio_crc_configure>:

void radio_crc_configure(u32_t polynomial, u32_t iv)
{
	NRF_RADIO->CRCCNF =
    ee60:	4b04      	ldr	r3, [pc, #16]	; (ee74 <radio_crc_configure+0x14>)
    ee62:	f240 1203 	movw	r2, #259	; 0x103
    ee66:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	    (((RADIO_CRCCNF_SKIPADDR_Skip) << RADIO_CRCCNF_SKIPADDR_Pos) &
	     RADIO_CRCCNF_SKIPADDR_Msk) |
	    (((RADIO_CRCCNF_LEN_Three) << RADIO_CRCCNF_LEN_Pos) &
	       RADIO_CRCCNF_LEN_Msk);
	NRF_RADIO->CRCPOLY = polynomial;
    ee6a:	f8c3 0538 	str.w	r0, [r3, #1336]	; 0x538
	NRF_RADIO->CRCINIT = iv;
    ee6e:	f8c3 153c 	str.w	r1, [r3, #1340]	; 0x53c
    ee72:	4770      	bx	lr
    ee74:	40001000 	.word	0x40001000

0000ee78 <radio_crc_is_valid>:
}

u32_t radio_crc_is_valid(void)
{
	return (NRF_RADIO->CRCSTATUS != 0);
    ee78:	4b03      	ldr	r3, [pc, #12]	; (ee88 <radio_crc_is_valid+0x10>)
    ee7a:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    ee7e:	3000      	adds	r0, #0
    ee80:	bf18      	it	ne
    ee82:	2001      	movne	r0, #1
    ee84:	4770      	bx	lr
    ee86:	bf00      	nop
    ee88:	40001000 	.word	0x40001000

0000ee8c <radio_pkt_empty_get>:
			(RADIO_PDU_LEN_MAX + 3) : PDU_AC_SIZE_MAX];

void *radio_pkt_empty_get(void)
{
	return _pkt_empty;
}
    ee8c:	4800      	ldr	r0, [pc, #0]	; (ee90 <radio_pkt_empty_get+0x4>)
    ee8e:	4770      	bx	lr
    ee90:	20000dc4 	.word	0x20000dc4

0000ee94 <radio_pkt_scratch_get>:

void *radio_pkt_scratch_get(void)
{
	return _pkt_scratch;
}
    ee94:	4800      	ldr	r0, [pc, #0]	; (ee98 <radio_pkt_scratch_get+0x4>)
    ee96:	4770      	bx	lr
    ee98:	20000dc8 	.word	0x20000dc8

0000ee9c <radio_switch_complete_and_rx>:
#endif /* CONFIG_BT_CTLR_TIFS_HW */

void radio_switch_complete_and_rx(u8_t phy_rx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    ee9c:	220b      	movs	r2, #11
    ee9e:	4b02      	ldr	r3, [pc, #8]	; (eea8 <radio_switch_complete_and_rx+0xc>)
    eea0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eea4:	4770      	bx	lr
    eea6:	bf00      	nop
    eea8:	40001000 	.word	0x40001000

0000eeac <radio_switch_complete_and_tx>:

void radio_switch_complete_and_tx(u8_t phy_rx, u8_t flags_rx, u8_t phy_tx,
				  u8_t flags_tx)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->SHORTS = RADIO_SHORTS_READY_START_Msk |
    eeac:	2207      	movs	r2, #7
    eeae:	4b02      	ldr	r3, [pc, #8]	; (eeb8 <radio_switch_complete_and_tx+0xc>)
    eeb0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eeb4:	4770      	bx	lr
    eeb6:	bf00      	nop
    eeb8:	40001000 	.word	0x40001000

0000eebc <radio_switch_complete_and_disable>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_switch_complete_and_disable(void)
{
	NRF_RADIO->SHORTS =
    eebc:	2203      	movs	r2, #3
    eebe:	4b02      	ldr	r3, [pc, #8]	; (eec8 <radio_switch_complete_and_disable+0xc>)
    eec0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    eec4:	4770      	bx	lr
    eec6:	bf00      	nop
    eec8:	40001000 	.word	0x40001000

0000eecc <radio_rssi_measure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_rssi_measure(void)
{
	NRF_RADIO->SHORTS |=
    eecc:	4a03      	ldr	r2, [pc, #12]	; (eedc <radio_rssi_measure+0x10>)
    eece:	f8d2 3200 	ldr.w	r3, [r2, #512]	; 0x200
    eed2:	f443 7388 	orr.w	r3, r3, #272	; 0x110
    eed6:	f8c2 3200 	str.w	r3, [r2, #512]	; 0x200
    eeda:	4770      	bx	lr
    eedc:	40001000 	.word	0x40001000

0000eee0 <radio_rssi_get>:
	     RADIO_SHORTS_DISABLED_RSSISTOP_Msk);
}

u32_t radio_rssi_get(void)
{
	return NRF_RADIO->RSSISAMPLE;
    eee0:	4b01      	ldr	r3, [pc, #4]	; (eee8 <radio_rssi_get+0x8>)
    eee2:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    eee6:	4770      	bx	lr
    eee8:	40001000 	.word	0x40001000

0000eeec <radio_rssi_status_reset>:

void radio_rssi_status_reset(void)
{
	NRF_RADIO->EVENTS_RSSIEND = 0;
    eeec:	2200      	movs	r2, #0
    eeee:	4b02      	ldr	r3, [pc, #8]	; (eef8 <radio_rssi_status_reset+0xc>)
    eef0:	f8c3 211c 	str.w	r2, [r3, #284]	; 0x11c
    eef4:	4770      	bx	lr
    eef6:	bf00      	nop
    eef8:	40001000 	.word	0x40001000

0000eefc <radio_rssi_is_ready>:
}

u32_t radio_rssi_is_ready(void)
{
	return (NRF_RADIO->EVENTS_RSSIEND != 0);
    eefc:	4b03      	ldr	r3, [pc, #12]	; (ef0c <radio_rssi_is_ready+0x10>)
    eefe:	f8d3 011c 	ldr.w	r0, [r3, #284]	; 0x11c
}
    ef02:	3000      	adds	r0, #0
    ef04:	bf18      	it	ne
    ef06:	2001      	movne	r0, #1
    ef08:	4770      	bx	lr
    ef0a:	bf00      	nop
    ef0c:	40001000 	.word	0x40001000

0000ef10 <radio_filter_configure>:

void radio_filter_configure(u8_t bitmask_enable, u8_t bitmask_addr_type,
			    u8_t *bdaddr)
{
    ef10:	b470      	push	{r4, r5, r6}
	u8_t index;

	for (index = 0; index < 8; index++) {
    ef12:	2400      	movs	r4, #0
    ef14:	e019      	b.n	ef4a <radio_filter_configure+0x3a>
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ef16:	78d5      	ldrb	r5, [r2, #3]
			((u32_t)bdaddr[2] << 16) |
    ef18:	7893      	ldrb	r3, [r2, #2]
    ef1a:	041b      	lsls	r3, r3, #16
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ef1c:	ea43 6305 	orr.w	r3, r3, r5, lsl #24
			((u32_t)bdaddr[1] << 8) |
    ef20:	7855      	ldrb	r5, [r2, #1]
			((u32_t)bdaddr[2] << 16) |
    ef22:	ea43 2305 	orr.w	r3, r3, r5, lsl #8
			bdaddr[0];
    ef26:	7815      	ldrb	r5, [r2, #0]
			((u32_t)bdaddr[1] << 8) |
    ef28:	432b      	orrs	r3, r5
		NRF_RADIO->DAB[index] = ((u32_t)bdaddr[3] << 24) |
    ef2a:	4d0c      	ldr	r5, [pc, #48]	; (ef5c <radio_filter_configure+0x4c>)
    ef2c:	f504 76c0 	add.w	r6, r4, #384	; 0x180
    ef30:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		NRF_RADIO->DAP[index] = ((u32_t)bdaddr[5] << 8) | bdaddr[4];
    ef34:	7956      	ldrb	r6, [r2, #5]
    ef36:	7913      	ldrb	r3, [r2, #4]
    ef38:	ea43 2306 	orr.w	r3, r3, r6, lsl #8
    ef3c:	f504 76c4 	add.w	r6, r4, #392	; 0x188
    ef40:	f845 3026 	str.w	r3, [r5, r6, lsl #2]
		bdaddr += 6;
    ef44:	3206      	adds	r2, #6
	for (index = 0; index < 8; index++) {
    ef46:	3401      	adds	r4, #1
    ef48:	b2e4      	uxtb	r4, r4
    ef4a:	2c07      	cmp	r4, #7
    ef4c:	d9e3      	bls.n	ef16 <radio_filter_configure+0x6>
	}

	NRF_RADIO->DACNF = ((u32_t)bitmask_addr_type << 8) | bitmask_enable;
    ef4e:	ea40 2001 	orr.w	r0, r0, r1, lsl #8
    ef52:	4b02      	ldr	r3, [pc, #8]	; (ef5c <radio_filter_configure+0x4c>)
    ef54:	f8c3 0640 	str.w	r0, [r3, #1600]	; 0x640
}
    ef58:	bc70      	pop	{r4, r5, r6}
    ef5a:	4770      	bx	lr
    ef5c:	40001000 	.word	0x40001000

0000ef60 <radio_filter_disable>:

void radio_filter_disable(void)
{
	NRF_RADIO->DACNF &= ~(0x000000FF);
    ef60:	4a03      	ldr	r2, [pc, #12]	; (ef70 <radio_filter_disable+0x10>)
    ef62:	f8d2 3640 	ldr.w	r3, [r2, #1600]	; 0x640
    ef66:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
    ef6a:	f8c2 3640 	str.w	r3, [r2, #1600]	; 0x640
    ef6e:	4770      	bx	lr
    ef70:	40001000 	.word	0x40001000

0000ef74 <radio_filter_status_reset>:
}

void radio_filter_status_reset(void)
{
	NRF_RADIO->EVENTS_DEVMATCH = 0;
    ef74:	4b03      	ldr	r3, [pc, #12]	; (ef84 <radio_filter_status_reset+0x10>)
    ef76:	2200      	movs	r2, #0
    ef78:	f8c3 2114 	str.w	r2, [r3, #276]	; 0x114
	NRF_RADIO->EVENTS_DEVMISS = 0;
    ef7c:	f8c3 2118 	str.w	r2, [r3, #280]	; 0x118
    ef80:	4770      	bx	lr
    ef82:	bf00      	nop
    ef84:	40001000 	.word	0x40001000

0000ef88 <radio_filter_has_match>:
}

u32_t radio_filter_has_match(void)
{
	return (NRF_RADIO->EVENTS_DEVMATCH != 0);
    ef88:	4b03      	ldr	r3, [pc, #12]	; (ef98 <radio_filter_has_match+0x10>)
    ef8a:	f8d3 0114 	ldr.w	r0, [r3, #276]	; 0x114
}
    ef8e:	3000      	adds	r0, #0
    ef90:	bf18      	it	ne
    ef92:	2001      	movne	r0, #1
    ef94:	4770      	bx	lr
    ef96:	bf00      	nop
    ef98:	40001000 	.word	0x40001000

0000ef9c <radio_filter_match_get>:

u32_t radio_filter_match_get(void)
{
	return NRF_RADIO->DAI;
    ef9c:	4b01      	ldr	r3, [pc, #4]	; (efa4 <radio_filter_match_get+0x8>)
    ef9e:	f8d3 0410 	ldr.w	r0, [r3, #1040]	; 0x410
}
    efa2:	4770      	bx	lr
    efa4:	40001000 	.word	0x40001000

0000efa8 <radio_bc_configure>:

void radio_bc_configure(u32_t n)
{
	NRF_RADIO->BCC = n;
    efa8:	4b04      	ldr	r3, [pc, #16]	; (efbc <radio_bc_configure+0x14>)
    efaa:	f8c3 0560 	str.w	r0, [r3, #1376]	; 0x560
	NRF_RADIO->SHORTS |= RADIO_SHORTS_ADDRESS_BCSTART_Msk;
    efae:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
    efb2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
    efb6:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
    efba:	4770      	bx	lr
    efbc:	40001000 	.word	0x40001000

0000efc0 <radio_bc_status_reset>:
}

void radio_bc_status_reset(void)
{
	NRF_RADIO->EVENTS_BCMATCH = 0;
    efc0:	2200      	movs	r2, #0
    efc2:	4b02      	ldr	r3, [pc, #8]	; (efcc <radio_bc_status_reset+0xc>)
    efc4:	f8c3 2128 	str.w	r2, [r3, #296]	; 0x128
    efc8:	4770      	bx	lr
    efca:	bf00      	nop
    efcc:	40001000 	.word	0x40001000

0000efd0 <radio_bc_has_match>:
}

u32_t radio_bc_has_match(void)
{
	return (NRF_RADIO->EVENTS_BCMATCH != 0);
    efd0:	4b03      	ldr	r3, [pc, #12]	; (efe0 <radio_bc_has_match+0x10>)
    efd2:	f8d3 0128 	ldr.w	r0, [r3, #296]	; 0x128
}
    efd6:	3000      	adds	r0, #0
    efd8:	bf18      	it	ne
    efda:	2001      	movne	r0, #1
    efdc:	4770      	bx	lr
    efde:	bf00      	nop
    efe0:	40001000 	.word	0x40001000

0000efe4 <radio_tmr_status_reset>:

void radio_tmr_status_reset(void)
{
	NRF_RTC0->EVTENCLR = RTC_EVTENCLR_COMPARE2_Msk;
    efe4:	f44f 2280 	mov.w	r2, #262144	; 0x40000
    efe8:	4b04      	ldr	r3, [pc, #16]	; (effc <radio_tmr_status_reset+0x18>)
    efea:	f8c3 2348 	str.w	r2, [r3, #840]	; 0x348
	NRF_PPI->CHENCLR =
    efee:	f248 027f 	movw	r2, #32895	; 0x807f
    eff2:	f503 33a0 	add.w	r3, r3, #81920	; 0x14000
    eff6:	f8c3 2508 	str.w	r2, [r3, #1288]	; 0x508
    effa:	4770      	bx	lr
    effc:	4000b000 	.word	0x4000b000

0000f000 <radio_tmr_tifs_set>:
}

void radio_tmr_tifs_set(u32_t tifs)
{
#if defined(CONFIG_BT_CTLR_TIFS_HW)
	NRF_RADIO->TIFS = tifs;
    f000:	4b01      	ldr	r3, [pc, #4]	; (f008 <radio_tmr_tifs_set+0x8>)
    f002:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
    f006:	4770      	bx	lr
    f008:	40001000 	.word	0x40001000

0000f00c <radio_tmr_start>:
	NRF_TIMER1->CC[sw_tifs_toggle] = tifs;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

u32_t radio_tmr_start(u8_t trx, u32_t ticks_start, u32_t remainder)
{
    f00c:	b470      	push	{r4, r5, r6}
	if ((!(remainder / 1000000UL)) || (remainder & 0x80000000)) {
    f00e:	f5a2 2374 	sub.w	r3, r2, #999424	; 0xf4000
    f012:	f5a3 7310 	sub.w	r3, r3, #576	; 0x240
    f016:	4c21      	ldr	r4, [pc, #132]	; (f09c <radio_tmr_start+0x90>)
    f018:	42a3      	cmp	r3, r4
    f01a:	d906      	bls.n	f02a <radio_tmr_start+0x1e>
		ticks_start--;
    f01c:	3901      	subs	r1, #1
		remainder += 30517578UL;
    f01e:	f102 72e8 	add.w	r2, r2, #30408704	; 0x1d00000
    f022:	f502 32d4 	add.w	r2, r2, #108544	; 0x1a800
    f026:	f502 72a5 	add.w	r2, r2, #330	; 0x14a
	}
	remainder /= 1000000UL;
    f02a:	4b1d      	ldr	r3, [pc, #116]	; (f0a0 <radio_tmr_start+0x94>)
    f02c:	fba3 3202 	umull	r3, r2, r3, r2
    f030:	0c92      	lsrs	r2, r2, #18

	NRF_TIMER0->TASKS_CLEAR = 1;
    f032:	4b1c      	ldr	r3, [pc, #112]	; (f0a4 <radio_tmr_start+0x98>)
    f034:	2401      	movs	r4, #1
    f036:	60dc      	str	r4, [r3, #12]
	NRF_TIMER0->MODE = 0;
    f038:	2500      	movs	r5, #0
    f03a:	f8c3 5504 	str.w	r5, [r3, #1284]	; 0x504
	NRF_TIMER0->PRESCALER = 4;
    f03e:	2404      	movs	r4, #4
    f040:	f8c3 4510 	str.w	r4, [r3, #1296]	; 0x510
	NRF_TIMER0->BITMODE = 2;	/* 24 - bit */
    f044:	2602      	movs	r6, #2
    f046:	f8c3 6508 	str.w	r6, [r3, #1288]	; 0x508

	NRF_TIMER0->CC[0] = remainder;
    f04a:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_TIMER0->EVENTS_COMPARE[0] = 0;
    f04e:	f8c3 5140 	str.w	r5, [r3, #320]	; 0x140

	NRF_RTC0->CC[2] = ticks_start;
    f052:	4c15      	ldr	r4, [pc, #84]	; (f0a8 <radio_tmr_start+0x9c>)
    f054:	f8c4 1548 	str.w	r1, [r4, #1352]	; 0x548
	NRF_RTC0->EVTENSET = RTC_EVTENSET_COMPARE2_Msk;
    f058:	f44f 2180 	mov.w	r1, #262144	; 0x40000
    f05c:	f8c4 1344 	str.w	r1, [r4, #836]	; 0x344
	NRF_RTC0->EVENTS_COMPARE[2] = 0;
    f060:	f8c4 5148 	str.w	r5, [r4, #328]	; 0x148

	NRF_PPI->CH[1].EEP = (u32_t)&(NRF_RTC0->EVENTS_COMPARE[2]);
    f064:	4911      	ldr	r1, [pc, #68]	; (f0ac <radio_tmr_start+0xa0>)
    f066:	f504 74a4 	add.w	r4, r4, #328	; 0x148
    f06a:	f8c1 4518 	str.w	r4, [r1, #1304]	; 0x518
	NRF_PPI->CH[1].TEP = (u32_t)&(NRF_TIMER0->TASKS_START);
    f06e:	f8c1 351c 	str.w	r3, [r1, #1308]	; 0x51c
	NRF_PPI->CHENSET = PPI_CHEN_CH1_Msk;
    f072:	f8c1 6504 	str.w	r6, [r1, #1284]	; 0x504

	NRF_PPI->CH[0].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[0]);
    f076:	f503 73a0 	add.w	r3, r3, #320	; 0x140
    f07a:	f8c1 3510 	str.w	r3, [r1, #1296]	; 0x510
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f07e:	b948      	cbnz	r0, f094 <radio_tmr_start+0x88>
    f080:	490b      	ldr	r1, [pc, #44]	; (f0b0 <radio_tmr_start+0xa4>)
    f082:	4b0a      	ldr	r3, [pc, #40]	; (f0ac <radio_tmr_start+0xa0>)
    f084:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
				     (u32_t)&(NRF_RADIO->TASKS_RXEN);
	NRF_PPI->CHENSET = PPI_CHEN_CH0_Msk;
    f088:	2101      	movs	r1, #1
    f08a:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_PPI->CHG[0] = PPI_CHG_CH10_Msk | PPI_CHG_CH13_Msk;
	NRF_PPI->CHG[1] = PPI_CHG_CH11_Msk | PPI_CHG_CH14_Msk;
#endif /* !CONFIG_BT_CTLR_TIFS_HW */

	return remainder;
}
    f08e:	4610      	mov	r0, r2
    f090:	bc70      	pop	{r4, r5, r6}
    f092:	4770      	bx	lr
	NRF_PPI->CH[0].TEP = (trx) ? (u32_t)&(NRF_RADIO->TASKS_TXEN) :
    f094:	f5a1 31f0 	sub.w	r1, r1, #122880	; 0x1e000
    f098:	e7f3      	b.n	f082 <radio_tmr_start+0x76>
    f09a:	bf00      	nop
    f09c:	7ff0bdbf 	.word	0x7ff0bdbf
    f0a0:	431bde83 	.word	0x431bde83
    f0a4:	40008000 	.word	0x40008000
    f0a8:	4000b000 	.word	0x4000b000
    f0ac:	4001f000 	.word	0x4001f000
    f0b0:	40001004 	.word	0x40001004

0000f0b4 <radio_tmr_stop>:
	return start;
}

void radio_tmr_stop(void)
{
	NRF_TIMER0->TASKS_STOP = 1;
    f0b4:	4b02      	ldr	r3, [pc, #8]	; (f0c0 <radio_tmr_stop+0xc>)
    f0b6:	2201      	movs	r2, #1
    f0b8:	605a      	str	r2, [r3, #4]
	NRF_TIMER0->TASKS_SHUTDOWN = 1;
    f0ba:	611a      	str	r2, [r3, #16]
    f0bc:	4770      	bx	lr
    f0be:	bf00      	nop
    f0c0:	40008000 	.word	0x40008000

0000f0c4 <radio_tmr_hcto_configure>:
#endif /* !CONFIG_BT_CTLR_TIFS_HW */
}

void radio_tmr_hcto_configure(u32_t hcto)
{
	NRF_TIMER0->CC[1] = hcto;
    f0c4:	4b0e      	ldr	r3, [pc, #56]	; (f100 <radio_tmr_hcto_configure+0x3c>)
    f0c6:	f8c3 0544 	str.w	r0, [r3, #1348]	; 0x544
	NRF_TIMER0->EVENTS_COMPARE[1] = 0;
    f0ca:	2200      	movs	r2, #0
    f0cc:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144

	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f0d0:	f503 33b8 	add.w	r3, r3, #94208	; 0x17000
    f0d4:	4a0b      	ldr	r2, [pc, #44]	; (f104 <radio_tmr_hcto_configure+0x40>)
    f0d6:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f0da:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f0de:	3240      	adds	r2, #64	; 0x40
    f0e0:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CH[4].EEP = (u32_t)&(NRF_TIMER0->EVENTS_COMPARE[1]);
    f0e4:	f502 7280 	add.w	r2, r2, #256	; 0x100
    f0e8:	f8c3 2530 	str.w	r2, [r3, #1328]	; 0x530
	NRF_PPI->CH[4].TEP = (u32_t)&(NRF_RADIO->TASKS_DISABLE);
    f0ec:	f5a2 42e2 	sub.w	r2, r2, #28928	; 0x7100
    f0f0:	3a34      	subs	r2, #52	; 0x34
    f0f2:	f8c3 2534 	str.w	r2, [r3, #1332]	; 0x534
	NRF_PPI->CHENSET = (PPI_CHEN_CH3_Msk | PPI_CHEN_CH4_Msk);
    f0f6:	2218      	movs	r2, #24
    f0f8:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f0fc:	4770      	bx	lr
    f0fe:	bf00      	nop
    f100:	40008000 	.word	0x40008000
    f104:	40001104 	.word	0x40001104

0000f108 <radio_tmr_aa_capture>:
}

void radio_tmr_aa_capture(void)
{
	NRF_PPI->CH[2].EEP = (u32_t)&(NRF_RADIO->EVENTS_READY);
    f108:	4b0b      	ldr	r3, [pc, #44]	; (f138 <radio_tmr_aa_capture+0x30>)
    f10a:	4a0c      	ldr	r2, [pc, #48]	; (f13c <radio_tmr_aa_capture+0x34>)
    f10c:	f8c3 2520 	str.w	r2, [r3, #1312]	; 0x520
	NRF_PPI->CH[2].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[0]);
    f110:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f114:	3240      	adds	r2, #64	; 0x40
    f116:	f8c3 2524 	str.w	r2, [r3, #1316]	; 0x524
	NRF_PPI->CH[3].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f11a:	f5a2 42de 	sub.w	r2, r2, #28416	; 0x6f00
    f11e:	3a3c      	subs	r2, #60	; 0x3c
    f120:	f8c3 2528 	str.w	r2, [r3, #1320]	; 0x528
	NRF_PPI->CH[3].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[1]);
    f124:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f128:	3240      	adds	r2, #64	; 0x40
    f12a:	f8c3 252c 	str.w	r2, [r3, #1324]	; 0x52c
	NRF_PPI->CHENSET = (PPI_CHEN_CH2_Msk | PPI_CHEN_CH3_Msk);
    f12e:	220c      	movs	r2, #12
    f130:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f134:	4770      	bx	lr
    f136:	bf00      	nop
    f138:	4001f000 	.word	0x4001f000
    f13c:	40001100 	.word	0x40001100

0000f140 <radio_tmr_aa_get>:
}

u32_t radio_tmr_aa_get(void)
{
	return NRF_TIMER0->CC[1];
    f140:	4b01      	ldr	r3, [pc, #4]	; (f148 <radio_tmr_aa_get+0x8>)
    f142:	f8d3 0544 	ldr.w	r0, [r3, #1348]	; 0x544
}
    f146:	4770      	bx	lr
    f148:	40008000 	.word	0x40008000

0000f14c <radio_tmr_aa_save>:

static u32_t radio_tmr_aa;

void radio_tmr_aa_save(u32_t aa)
{
	radio_tmr_aa = aa;
    f14c:	4b01      	ldr	r3, [pc, #4]	; (f154 <radio_tmr_aa_save+0x8>)
    f14e:	6018      	str	r0, [r3, #0]
    f150:	4770      	bx	lr
    f152:	bf00      	nop
    f154:	20000ecc 	.word	0x20000ecc

0000f158 <radio_tmr_aa_restore>:

u32_t radio_tmr_aa_restore(void)
{
	/* NOTE: we dont need to restore for now, but return the saved value. */
	return radio_tmr_aa;
}
    f158:	4b01      	ldr	r3, [pc, #4]	; (f160 <radio_tmr_aa_restore+0x8>)
    f15a:	6818      	ldr	r0, [r3, #0]
    f15c:	4770      	bx	lr
    f15e:	bf00      	nop
    f160:	20000ecc 	.word	0x20000ecc

0000f164 <radio_tmr_ready_get>:

u32_t radio_tmr_ready_get(void)
{
	return NRF_TIMER0->CC[0];
    f164:	4b01      	ldr	r3, [pc, #4]	; (f16c <radio_tmr_ready_get+0x8>)
    f166:	f8d3 0540 	ldr.w	r0, [r3, #1344]	; 0x540
}
    f16a:	4770      	bx	lr
    f16c:	40008000 	.word	0x40008000

0000f170 <radio_tmr_end_capture>:

void radio_tmr_end_capture(void)
{
	NRF_PPI->CH[5].EEP = (u32_t)&(NRF_RADIO->EVENTS_END);
    f170:	4b06      	ldr	r3, [pc, #24]	; (f18c <radio_tmr_end_capture+0x1c>)
    f172:	4a07      	ldr	r2, [pc, #28]	; (f190 <radio_tmr_end_capture+0x20>)
    f174:	f8c3 2538 	str.w	r2, [r3, #1336]	; 0x538
	NRF_PPI->CH[5].TEP = (u32_t)&(NRF_TIMER0->TASKS_CAPTURE[2]);
    f178:	f502 42de 	add.w	r2, r2, #28416	; 0x6f00
    f17c:	323c      	adds	r2, #60	; 0x3c
    f17e:	f8c3 253c 	str.w	r2, [r3, #1340]	; 0x53c
	NRF_PPI->CHENSET = PPI_CHEN_CH5_Msk;
    f182:	2220      	movs	r2, #32
    f184:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f188:	4770      	bx	lr
    f18a:	bf00      	nop
    f18c:	4001f000 	.word	0x4001f000
    f190:	4000110c 	.word	0x4000110c

0000f194 <radio_tmr_end_get>:
}

u32_t radio_tmr_end_get(void)
{
	return NRF_TIMER0->CC[2];
    f194:	4b01      	ldr	r3, [pc, #4]	; (f19c <radio_tmr_end_get+0x8>)
    f196:	f8d3 0548 	ldr.w	r0, [r3, #1352]	; 0x548
}
    f19a:	4770      	bx	lr
    f19c:	40008000 	.word	0x40008000

0000f1a0 <radio_ccm_rx_pkt_set>:
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

static u8_t MALIGN(4) _ccm_scratch[(RADIO_PDU_LEN_MAX - 4) + 16];

void *radio_ccm_rx_pkt_set(struct ccm *ccm, u8_t phy, void *pkt)
{
    f1a0:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    f1a2:	4b18      	ldr	r3, [pc, #96]	; (f204 <radio_ccm_rx_pkt_set+0x64>)
    f1a4:	2400      	movs	r4, #0
    f1a6:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    f1aa:	2402      	movs	r4, #2
    f1ac:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	/* Enable CCM support for 8-bit length field PDUs. */
	mode |= (CCM_MODE_LENGTH_Extended << CCM_MODE_LENGTH_Pos) &
		CCM_MODE_LENGTH_Msk;

	/* Select CCM data rate based on current PHY in use. */
	switch (phy) {
    f1b0:	42a1      	cmp	r1, r4
    f1b2:	d125      	bne.n	f200 <radio_ccm_rx_pkt_set+0x60>
			 CCM_MODE_DATARATE_Pos) &
			CCM_MODE_DATARATE_Msk;
		break;

	case BIT(1):
		mode |= (CCM_MODE_DATARATE_2Mbit <<
    f1b4:	4914      	ldr	r1, [pc, #80]	; (f208 <radio_ccm_rx_pkt_set+0x68>)
		NRF_PPI->CHENSET = PPI_CHEN_CH15_Msk;
		break;
#endif /* CONFIG_SOC_NRF52840 */
	}
#endif
	NRF_CCM->MODE = mode;
    f1b6:	4b13      	ldr	r3, [pc, #76]	; (f204 <radio_ccm_rx_pkt_set+0x64>)
    f1b8:	f8c3 1504 	str.w	r1, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    f1bc:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)_pkt_scratch;
    f1c0:	4812      	ldr	r0, [pc, #72]	; (f20c <radio_ccm_rx_pkt_set+0x6c>)
    f1c2:	f8c3 050c 	str.w	r0, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)pkt;
    f1c6:	f8c3 2510 	str.w	r2, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    f1ca:	4a11      	ldr	r2, [pc, #68]	; (f210 <radio_ccm_rx_pkt_set+0x70>)
    f1cc:	f8c3 2514 	str.w	r2, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = 0;
    f1d0:	2200      	movs	r2, #0
    f1d2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    f1d6:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    f1da:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    f1de:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_ADDRESS);
    f1e2:	4a0c      	ldr	r2, [pc, #48]	; (f214 <radio_ccm_rx_pkt_set+0x74>)
    f1e4:	490c      	ldr	r1, [pc, #48]	; (f218 <radio_ccm_rx_pkt_set+0x78>)
    f1e6:	f8c2 1540 	str.w	r1, [r2, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_CCM->TASKS_CRYPT);
    f1ea:	f501 415f 	add.w	r1, r1, #57088	; 0xdf00
    f1ee:	f8c2 1544 	str.w	r1, [r2, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f1f2:	2140      	movs	r1, #64	; 0x40
    f1f4:	f8c2 1504 	str.w	r1, [r2, #1284]	; 0x504

	NRF_CCM->TASKS_KSGEN = 1;
    f1f8:	2201      	movs	r2, #1
    f1fa:	601a      	str	r2, [r3, #0]

	return _pkt_scratch;
}
    f1fc:	bc10      	pop	{r4}
    f1fe:	4770      	bx	lr
		mode |= (CCM_MODE_DATARATE_1Mbit <<
    f200:	4906      	ldr	r1, [pc, #24]	; (f21c <radio_ccm_rx_pkt_set+0x7c>)
    f202:	e7d8      	b.n	f1b6 <radio_ccm_rx_pkt_set+0x16>
    f204:	4000f000 	.word	0x4000f000
    f208:	01010001 	.word	0x01010001
    f20c:	20000dc8 	.word	0x20000dc8
    f210:	20000cb8 	.word	0x20000cb8
    f214:	4001f000 	.word	0x4001f000
    f218:	40001104 	.word	0x40001104
    f21c:	01000001 	.word	0x01000001

0000f220 <radio_ccm_tx_pkt_set>:

void *radio_ccm_tx_pkt_set(struct ccm *ccm, void *pkt)
{
    f220:	b410      	push	{r4}
	u32_t mode;

	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Disabled;
    f222:	4b10      	ldr	r3, [pc, #64]	; (f264 <radio_ccm_tx_pkt_set+0x44>)
    f224:	2200      	movs	r2, #0
    f226:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
	NRF_CCM->ENABLE = CCM_ENABLE_ENABLE_Enabled;
    f22a:	2402      	movs	r4, #2
    f22c:	f8c3 4500 	str.w	r4, [r3, #1280]	; 0x500
	 * radio Tx on any PHY.
	 */
	mode |= (CCM_MODE_DATARATE_2Mbit << CCM_MODE_DATARATE_Pos) &
		CCM_MODE_DATARATE_Msk;
#endif
	NRF_CCM->MODE = mode;
    f230:	4c0d      	ldr	r4, [pc, #52]	; (f268 <radio_ccm_tx_pkt_set+0x48>)
    f232:	f8c3 4504 	str.w	r4, [r3, #1284]	; 0x504
	NRF_CCM->CNFPTR = (u32_t)ccm;
    f236:	f8c3 0508 	str.w	r0, [r3, #1288]	; 0x508
	NRF_CCM->INPTR = (u32_t)pkt;
    f23a:	f8c3 150c 	str.w	r1, [r3, #1292]	; 0x50c
	NRF_CCM->OUTPTR = (u32_t)_pkt_scratch;
    f23e:	480b      	ldr	r0, [pc, #44]	; (f26c <radio_ccm_tx_pkt_set+0x4c>)
    f240:	f8c3 0510 	str.w	r0, [r3, #1296]	; 0x510
	NRF_CCM->SCRATCHPTR = (u32_t)_ccm_scratch;
    f244:	490a      	ldr	r1, [pc, #40]	; (f270 <radio_ccm_tx_pkt_set+0x50>)
    f246:	f8c3 1514 	str.w	r1, [r3, #1300]	; 0x514
	NRF_CCM->SHORTS = CCM_SHORTS_ENDKSGEN_CRYPT_Msk;
    f24a:	2101      	movs	r1, #1
    f24c:	f8c3 1200 	str.w	r1, [r3, #512]	; 0x200
	NRF_CCM->EVENTS_ENDKSGEN = 0;
    f250:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
	NRF_CCM->EVENTS_ENDCRYPT = 0;
    f254:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
	NRF_CCM->EVENTS_ERROR = 0;
    f258:	f8c3 2108 	str.w	r2, [r3, #264]	; 0x108

	NRF_CCM->TASKS_KSGEN = 1;
    f25c:	6019      	str	r1, [r3, #0]

	return _pkt_scratch;
}
    f25e:	bc10      	pop	{r4}
    f260:	4770      	bx	lr
    f262:	bf00      	nop
    f264:	4000f000 	.word	0x4000f000
    f268:	01010000 	.word	0x01010000
    f26c:	20000dc8 	.word	0x20000dc8
    f270:	20000cb8 	.word	0x20000cb8

0000f274 <radio_ccm_is_done>:

u32_t radio_ccm_is_done(void)
{
	NRF_CCM->INTENSET = CCM_INTENSET_ENDCRYPT_Msk;
    f274:	2202      	movs	r2, #2
    f276:	4b0d      	ldr	r3, [pc, #52]	; (f2ac <radio_ccm_is_done+0x38>)
    f278:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
	while (NRF_CCM->EVENTS_ENDCRYPT == 0) {
    f27c:	e002      	b.n	f284 <radio_ccm_is_done+0x10>
    f27e:	bf20      	wfe
  __ASM volatile ("sev");
    f280:	bf40      	sev
  __ASM volatile ("wfe");
    f282:	bf20      	wfe
    f284:	4b09      	ldr	r3, [pc, #36]	; (f2ac <radio_ccm_is_done+0x38>)
    f286:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
    f28a:	2b00      	cmp	r3, #0
    f28c:	d0f7      	beq.n	f27e <radio_ccm_is_done+0xa>
		__WFE();
		__SEV();
		__WFE();
	}
	NRF_CCM->INTENCLR = CCM_INTENCLR_ENDCRYPT_Msk;
    f28e:	4b07      	ldr	r3, [pc, #28]	; (f2ac <radio_ccm_is_done+0x38>)
    f290:	2202      	movs	r2, #2
    f292:	f8c3 2308 	str.w	r2, [r3, #776]	; 0x308
    f296:	f44f 4100 	mov.w	r1, #32768	; 0x8000
    f29a:	4a05      	ldr	r2, [pc, #20]	; (f2b0 <radio_ccm_is_done+0x3c>)
    f29c:	f8c2 1180 	str.w	r1, [r2, #384]	; 0x180
	NVIC_ClearPendingIRQ(CCM_AAR_IRQn);

	return (NRF_CCM->EVENTS_ERROR == 0);
    f2a0:	f8d3 0108 	ldr.w	r0, [r3, #264]	; 0x108
}
    f2a4:	fab0 f080 	clz	r0, r0
    f2a8:	0940      	lsrs	r0, r0, #5
    f2aa:	4770      	bx	lr
    f2ac:	4000f000 	.word	0x4000f000
    f2b0:	e000e100 	.word	0xe000e100

0000f2b4 <radio_ccm_mic_is_valid>:

u32_t radio_ccm_mic_is_valid(void)
{
	return (NRF_CCM->MICSTATUS != 0);
    f2b4:	4b03      	ldr	r3, [pc, #12]	; (f2c4 <radio_ccm_mic_is_valid+0x10>)
    f2b6:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f2ba:	3000      	adds	r0, #0
    f2bc:	bf18      	it	ne
    f2be:	2001      	movne	r0, #1
    f2c0:	4770      	bx	lr
    f2c2:	bf00      	nop
    f2c4:	4000f000 	.word	0x4000f000

0000f2c8 <radio_ar_configure>:

static u8_t MALIGN(4) _aar_scratch[3];

void radio_ar_configure(u32_t nirk, void *irk)
{
    f2c8:	b510      	push	{r4, lr}
	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Enabled << AAR_ENABLE_ENABLE_Pos) &
    f2ca:	4c13      	ldr	r4, [pc, #76]	; (f318 <radio_ar_configure+0x50>)
    f2cc:	2303      	movs	r3, #3
    f2ce:	f8c4 3500 	str.w	r3, [r4, #1280]	; 0x500
			  AAR_ENABLE_ENABLE_Msk;
	NRF_AAR->NIRK = nirk;
    f2d2:	f8c4 0504 	str.w	r0, [r4, #1284]	; 0x504
	NRF_AAR->IRKPTR = (u32_t)irk;
    f2d6:	f8c4 1508 	str.w	r1, [r4, #1288]	; 0x508
	NRF_AAR->ADDRPTR = (u32_t)NRF_RADIO->PACKETPTR - 1;
    f2da:	4b10      	ldr	r3, [pc, #64]	; (f31c <radio_ar_configure+0x54>)
    f2dc:	f8d3 3504 	ldr.w	r3, [r3, #1284]	; 0x504
    f2e0:	3b01      	subs	r3, #1
    f2e2:	f8c4 3510 	str.w	r3, [r4, #1296]	; 0x510
	NRF_AAR->SCRATCHPTR = (u32_t)&_aar_scratch[0];
    f2e6:	4b0e      	ldr	r3, [pc, #56]	; (f320 <radio_ar_configure+0x58>)
    f2e8:	f8c4 3514 	str.w	r3, [r4, #1300]	; 0x514

	NRF_AAR->EVENTS_END = 0;
    f2ec:	2300      	movs	r3, #0
    f2ee:	f8c4 3100 	str.w	r3, [r4, #256]	; 0x100
	NRF_AAR->EVENTS_RESOLVED = 0;
    f2f2:	f8c4 3104 	str.w	r3, [r4, #260]	; 0x104
	NRF_AAR->EVENTS_NOTRESOLVED = 0;
    f2f6:	f8c4 3108 	str.w	r3, [r4, #264]	; 0x108

	radio_bc_configure(64);
    f2fa:	2040      	movs	r0, #64	; 0x40
    f2fc:	f7ff fe54 	bl	efa8 <radio_bc_configure>
	radio_bc_status_reset();
    f300:	f7ff fe5e 	bl	efc0 <radio_bc_status_reset>

	NRF_PPI->CH[6].EEP = (u32_t)&(NRF_RADIO->EVENTS_BCMATCH);
    f304:	4b07      	ldr	r3, [pc, #28]	; (f324 <radio_ar_configure+0x5c>)
    f306:	4a08      	ldr	r2, [pc, #32]	; (f328 <radio_ar_configure+0x60>)
    f308:	f8c3 2540 	str.w	r2, [r3, #1344]	; 0x540
	NRF_PPI->CH[6].TEP = (u32_t)&(NRF_AAR->TASKS_START);
    f30c:	f8c3 4544 	str.w	r4, [r3, #1348]	; 0x544
	NRF_PPI->CHENSET = PPI_CHEN_CH6_Msk;
    f310:	2240      	movs	r2, #64	; 0x40
    f312:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
    f316:	bd10      	pop	{r4, pc}
    f318:	4000f000 	.word	0x4000f000
    f31c:	40001000 	.word	0x40001000
    f320:	20000cb4 	.word	0x20000cb4
    f324:	4001f000 	.word	0x4001f000
    f328:	40001128 	.word	0x40001128

0000f32c <radio_ar_match_get>:
}

u32_t radio_ar_match_get(void)
{
	return NRF_AAR->STATUS;
    f32c:	4b01      	ldr	r3, [pc, #4]	; (f334 <radio_ar_match_get+0x8>)
    f32e:	f8d3 0400 	ldr.w	r0, [r3, #1024]	; 0x400
}
    f332:	4770      	bx	lr
    f334:	4000f000 	.word	0x4000f000

0000f338 <radio_ar_status_reset>:

void radio_ar_status_reset(void)
{
    f338:	b508      	push	{r3, lr}
	radio_bc_status_reset();
    f33a:	f7ff fe41 	bl	efc0 <radio_bc_status_reset>

	NRF_AAR->ENABLE = (AAR_ENABLE_ENABLE_Disabled << AAR_ENABLE_ENABLE_Pos) &
    f33e:	2200      	movs	r2, #0
    f340:	4b01      	ldr	r3, [pc, #4]	; (f348 <radio_ar_status_reset+0x10>)
    f342:	f8c3 2500 	str.w	r2, [r3, #1280]	; 0x500
    f346:	bd08      	pop	{r3, pc}
    f348:	4000f000 	.word	0x4000f000

0000f34c <radio_ar_has_match>:
			  AAR_ENABLE_ENABLE_Msk;
}

u32_t radio_ar_has_match(void)
{
    f34c:	b508      	push	{r3, lr}
	return (radio_bc_has_match() &&
    f34e:	f7ff fe3f 	bl	efd0 <radio_bc_has_match>
		NRF_AAR->EVENTS_END &&
		NRF_AAR->EVENTS_RESOLVED &&
    f352:	b168      	cbz	r0, f370 <radio_ar_has_match+0x24>
		NRF_AAR->EVENTS_END &&
    f354:	4b0a      	ldr	r3, [pc, #40]	; (f380 <radio_ar_has_match+0x34>)
    f356:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
	return (radio_bc_has_match() &&
    f35a:	b15b      	cbz	r3, f374 <radio_ar_has_match+0x28>
		NRF_AAR->EVENTS_RESOLVED &&
    f35c:	4b08      	ldr	r3, [pc, #32]	; (f380 <radio_ar_has_match+0x34>)
    f35e:	f8d3 3104 	ldr.w	r3, [r3, #260]	; 0x104
		NRF_AAR->EVENTS_END &&
    f362:	b14b      	cbz	r3, f378 <radio_ar_has_match+0x2c>
		!NRF_AAR->EVENTS_NOTRESOLVED);
    f364:	4b06      	ldr	r3, [pc, #24]	; (f380 <radio_ar_has_match+0x34>)
    f366:	f8d3 3108 	ldr.w	r3, [r3, #264]	; 0x108
		NRF_AAR->EVENTS_RESOLVED &&
    f36a:	b13b      	cbz	r3, f37c <radio_ar_has_match+0x30>
    f36c:	2000      	movs	r0, #0
    f36e:	bd08      	pop	{r3, pc}
    f370:	2000      	movs	r0, #0
    f372:	bd08      	pop	{r3, pc}
    f374:	2000      	movs	r0, #0
    f376:	bd08      	pop	{r3, pc}
    f378:	2000      	movs	r0, #0
    f37a:	bd08      	pop	{r3, pc}
    f37c:	2001      	movs	r0, #1
}
    f37e:	bd08      	pop	{r3, pc}
    f380:	4000f000 	.word	0x4000f000
    f384:	00000000 	.word	0x00000000

0000f388 <isr>:

static int isr(struct rand *rng, bool store)
{
	u8_t last;

	if (!rng) {
    f388:	b1f0      	cbz	r0, f3c8 <isr+0x40>
{
    f38a:	b430      	push	{r4, r5}
    f38c:	4602      	mov	r2, r0
		return -ENOBUFS;
	}

	last = rng->last + 1;
    f38e:	78c0      	ldrb	r0, [r0, #3]
    f390:	1c43      	adds	r3, r0, #1
    f392:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f394:	7815      	ldrb	r5, [r2, #0]
    f396:	42ab      	cmp	r3, r5
    f398:	d012      	beq.n	f3c0 <isr+0x38>
		last = 0;
	}

	if (last == rng->first) {
    f39a:	7894      	ldrb	r4, [r2, #2]
    f39c:	42a3      	cmp	r3, r4
    f39e:	d016      	beq.n	f3ce <isr+0x46>
		 * new value could be generated before NRF_RNG task is stopped.
		 */
		return -ENOBUFS;
	}

	if (!store) {
    f3a0:	b1c1      	cbz	r1, f3d4 <isr+0x4c>
		return -EBUSY;
	}

	rng->rand[rng->last] = NRF_RNG->VALUE;
    f3a2:	490f      	ldr	r1, [pc, #60]	; (f3e0 <isr+0x58>)
    f3a4:	f8d1 1508 	ldr.w	r1, [r1, #1288]	; 0x508
    f3a8:	4410      	add	r0, r2
    f3aa:	7101      	strb	r1, [r0, #4]
	rng->last = last;
    f3ac:	70d3      	strb	r3, [r2, #3]

	last = rng->last + 1;
    f3ae:	3301      	adds	r3, #1
    f3b0:	b2db      	uxtb	r3, r3
	if (last == rng->count) {
    f3b2:	429d      	cmp	r5, r3
    f3b4:	d006      	beq.n	f3c4 <isr+0x3c>
		last = 0;
	}

	if (last == rng->first) {
    f3b6:	42a3      	cmp	r3, r4
    f3b8:	d10f      	bne.n	f3da <isr+0x52>
		return 0;
    f3ba:	2000      	movs	r0, #0
	}

	return -EBUSY;
}
    f3bc:	bc30      	pop	{r4, r5}
    f3be:	4770      	bx	lr
		last = 0;
    f3c0:	2300      	movs	r3, #0
    f3c2:	e7ea      	b.n	f39a <isr+0x12>
		last = 0;
    f3c4:	2300      	movs	r3, #0
    f3c6:	e7f6      	b.n	f3b6 <isr+0x2e>
		return -ENOBUFS;
    f3c8:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f3cc:	4770      	bx	lr
		return -ENOBUFS;
    f3ce:	f06f 0068 	mvn.w	r0, #104	; 0x68
    f3d2:	e7f3      	b.n	f3bc <isr+0x34>
		return -EBUSY;
    f3d4:	f06f 000f 	mvn.w	r0, #15
    f3d8:	e7f0      	b.n	f3bc <isr+0x34>
	return -EBUSY;
    f3da:	f06f 000f 	mvn.w	r0, #15
    f3de:	e7ed      	b.n	f3bc <isr+0x34>
    f3e0:	4000d000 	.word	0x4000d000
    f3e4:	00000000 	.word	0x00000000

0000f3e8 <isr>:

	DEBUG_RADIO_CLOSE(0);
}

static void isr(void)
{
    f3e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
    f3ec:	b08a      	sub	sp, #40	; 0x28
	u8_t rssi_ready;

	DEBUG_RADIO_ISR(1);

	/* Read radio status and events */
	trx_done = radio_is_done();
    f3ee:	f7ff fd23 	bl	ee38 <radio_is_done>
    f3f2:	b2c4      	uxtb	r4, r0
	if (trx_done) {
    f3f4:	b9e4      	cbnz	r4, f430 <isr+0x48>
		devmatch_id = radio_filter_match_get();
		irkmatch_ok = radio_ar_has_match();
		irkmatch_id = radio_ar_match_get();
		rssi_ready = radio_rssi_is_ready();
	} else {
		crc_ok = devmatch_ok = irkmatch_ok = rssi_ready = 0;
    f3f6:	46a0      	mov	r8, r4
    f3f8:	46a1      	mov	r9, r4
    f3fa:	4627      	mov	r7, r4
    f3fc:	4626      	mov	r6, r4
		devmatch_id = irkmatch_id = 0xFF;
    f3fe:	25ff      	movs	r5, #255	; 0xff
    f400:	46aa      	mov	sl, r5
	}

	/* Clear radio status and events */
	radio_status_reset();
    f402:	f7ff fcff 	bl	ee04 <radio_status_reset>
	radio_tmr_status_reset();
    f406:	f7ff fded 	bl	efe4 <radio_tmr_status_reset>
	radio_filter_status_reset();
    f40a:	f7ff fdb3 	bl	ef74 <radio_filter_status_reset>
	radio_ar_status_reset();
    f40e:	f7ff ff93 	bl	f338 <radio_ar_status_reset>
	radio_rssi_status_reset();
    f412:	f7ff fd6b 	bl	eeec <radio_rssi_status_reset>
#if defined(CONFIG_BT_CTLR_GPIO_PA_PIN) || \
    defined(CONFIG_BT_CTLR_GPIO_LNA_PIN)
	radio_gpio_pa_lna_disable();
#endif /* CONFIG_BT_CTLR_GPIO_PA_PIN || CONFIG_BT_CTLR_GPIO_LNA_PIN */

	switch (_radio.state) {
    f416:	4bb6      	ldr	r3, [pc, #728]	; (f6f0 <isr+0x308>)
    f418:	7c1b      	ldrb	r3, [r3, #16]
    f41a:	2b05      	cmp	r3, #5
    f41c:	f200 8456 	bhi.w	fccc <isr+0x8e4>
    f420:	e8df f013 	tbh	[pc, r3, lsl #1]
    f424:	00e801f3 	.word	0x00e801f3
    f428:	016e001c 	.word	0x016e001c
    f42c:	016e016e 	.word	0x016e016e
		crc_ok = radio_crc_is_valid();
    f430:	f7ff fd22 	bl	ee78 <radio_crc_is_valid>
    f434:	b2c6      	uxtb	r6, r0
		devmatch_ok = radio_filter_has_match();
    f436:	f7ff fda7 	bl	ef88 <radio_filter_has_match>
    f43a:	b2c7      	uxtb	r7, r0
		devmatch_id = radio_filter_match_get();
    f43c:	f7ff fdae 	bl	ef9c <radio_filter_match_get>
    f440:	fa5f fa80 	uxtb.w	sl, r0
		irkmatch_ok = radio_ar_has_match();
    f444:	f7ff ff82 	bl	f34c <radio_ar_has_match>
    f448:	fa5f f980 	uxtb.w	r9, r0
		irkmatch_id = radio_ar_match_get();
    f44c:	f7ff ff6e 	bl	f32c <radio_ar_match_get>
    f450:	b2c5      	uxtb	r5, r0
		rssi_ready = radio_rssi_is_ready();
    f452:	f7ff fd53 	bl	eefc <radio_rssi_is_ready>
    f456:	fa5f f880 	uxtb.w	r8, r0
    f45a:	e7d2      	b.n	f402 <isr+0x1a>
	_radio.state = STATE_RX;
    f45c:	4da4      	ldr	r5, [pc, #656]	; (f6f0 <isr+0x308>)
    f45e:	2301      	movs	r3, #1
    f460:	742b      	strb	r3, [r5, #16]
	hcto = radio_tmr_end_get() + RADIO_TIFS + 4 + 1; /* 1us, end jitter */
    f462:	f7ff fe97 	bl	f194 <radio_tmr_end_get>
    f466:	f100 049b 	add.w	r4, r0, #155	; 0x9b
	radio_tmr_tifs_set(RADIO_TIFS);
    f46a:	2096      	movs	r0, #150	; 0x96
    f46c:	f7ff fdc8 	bl	f000 <radio_tmr_tifs_set>
	switch (_radio.role) {
    f470:	7beb      	ldrb	r3, [r5, #15]
    f472:	3b01      	subs	r3, #1
    f474:	2b03      	cmp	r3, #3
    f476:	f200 80b7 	bhi.w	f5e8 <isr+0x200>
    f47a:	e8df f003 	tbb	[pc, r3]
    f47e:	3202      	.short	0x3202
    f480:	6868      	.short	0x6868
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f482:	2300      	movs	r3, #0
    f484:	461a      	mov	r2, r3
    f486:	4619      	mov	r1, r3
    f488:	4618      	mov	r0, r3
    f48a:	f7ff fd0f 	bl	eeac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(radio_pkt_scratch_get());
    f48e:	f7ff fd01 	bl	ee94 <radio_pkt_scratch_get>
    f492:	f7ff fc89 	bl	eda8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f496:	f7ff fcc5 	bl	ee24 <radio_is_ready>
    f49a:	b990      	cbnz	r0, f4c2 <isr+0xda>
		if (ctrl_rl_enabled()) {
    f49c:	f00a f802 	bl	194a4 <ctrl_rl_enabled>
    f4a0:	b9a8      	cbnz	r0, f4ce <isr+0xe6>
		hcto += radio_rx_chain_delay_get(0, 0);
    f4a2:	2100      	movs	r1, #0
    f4a4:	4608      	mov	r0, r1
    f4a6:	f7ff fc91 	bl	edcc <radio_rx_chain_delay_get>
    f4aa:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f4ac:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f4ae:	2100      	movs	r1, #0
    f4b0:	4608      	mov	r0, r1
    f4b2:	f7ff fc87 	bl	edc4 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f4b6:	1a20      	subs	r0, r4, r0
    f4b8:	f7ff fe04 	bl	f0c4 <radio_tmr_hcto_configure>
		radio_tmr_end_capture();
    f4bc:	f7ff fe58 	bl	f170 <radio_tmr_end_capture>
    f4c0:	e1a3      	b.n	f80a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f4c2:	4040      	eors	r0, r0
    f4c4:	f380 8811 	msr	BASEPRI, r0
    f4c8:	f04f 0004 	mov.w	r0, #4
    f4cc:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f4ce:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f4d2:	f009 fd63 	bl	18f9c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f4d6:	4601      	mov	r1, r0
    f4d8:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f4dc:	f7ff fef4 	bl	f2c8 <radio_ar_configure>
    f4e0:	e7df      	b.n	f4a2 <isr+0xba>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f4e2:	2300      	movs	r3, #0
    f4e4:	461a      	mov	r2, r3
    f4e6:	4619      	mov	r1, r3
    f4e8:	4618      	mov	r0, r3
    f4ea:	f7ff fcdf 	bl	eeac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f4ee:	4b80      	ldr	r3, [pc, #512]	; (f6f0 <isr+0x308>)
    f4f0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f4f4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f4f8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f4fc:	3008      	adds	r0, #8
    f4fe:	f7ff fc53 	bl	eda8 <radio_pkt_rx_set>
		LL_ASSERT(!radio_is_ready());
    f502:	f7ff fc8f 	bl	ee24 <radio_is_ready>
    f506:	b990      	cbnz	r0, f52e <isr+0x146>
		if (ctrl_rl_enabled()) {
    f508:	f009 ffcc 	bl	194a4 <ctrl_rl_enabled>
    f50c:	b9a8      	cbnz	r0, f53a <isr+0x152>
		hcto += radio_rx_chain_delay_get(0, 0);
    f50e:	2100      	movs	r1, #0
    f510:	4608      	mov	r0, r1
    f512:	f7ff fc5b 	bl	edcc <radio_rx_chain_delay_get>
    f516:	4404      	add	r4, r0
		hcto += addr_us_get(0);
    f518:	3428      	adds	r4, #40	; 0x28
		hcto -= radio_tx_chain_delay_get(0, 0);
    f51a:	2100      	movs	r1, #0
    f51c:	4608      	mov	r0, r1
    f51e:	f7ff fc51 	bl	edc4 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f522:	1a20      	subs	r0, r4, r0
    f524:	f7ff fdce 	bl	f0c4 <radio_tmr_hcto_configure>
		radio_rssi_measure();
    f528:	f7ff fcd0 	bl	eecc <radio_rssi_measure>
    f52c:	e16d      	b.n	f80a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f52e:	4040      	eors	r0, r0
    f530:	f380 8811 	msr	BASEPRI, r0
    f534:	f04f 0004 	mov.w	r0, #4
    f538:	df02      	svc	2
			u8_t count, *irks = ctrl_irks_get(&count);
    f53a:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f53e:	f009 fd2d 	bl	18f9c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f542:	4601      	mov	r1, r0
    f544:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f548:	f7ff febe 	bl	f2c8 <radio_ar_configure>
    f54c:	e7df      	b.n	f50e <isr+0x126>
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f54e:	4d68      	ldr	r5, [pc, #416]	; (f6f0 <isr+0x308>)
    f550:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f554:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
					     _radio.conn_curr->phy_tx,
    f558:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
		radio_switch_complete_and_tx(_radio.conn_curr->phy_rx, 0,
    f55c:	09d3      	lsrs	r3, r2, #7
    f55e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
    f562:	2100      	movs	r1, #0
    f564:	f000 0007 	and.w	r0, r0, #7
    f568:	f7ff fca0 	bl	eeac <radio_switch_complete_and_tx>
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f56c:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
			      packet_rx[_radio.packet_rx_last]->pdu_data);
    f570:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
    f574:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
		rx_packet_set(_radio.conn_curr, (struct pdu_data *)_radio.
    f578:	3108      	adds	r1, #8
    f57a:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
    f57e:	f002 fad3 	bl	11b28 <rx_packet_set>
		LL_ASSERT(!radio_is_ready());
    f582:	f7ff fc4f 	bl	ee24 <radio_is_ready>
    f586:	bb20      	cbnz	r0, f5d2 <isr+0x1ea>
		hcto += radio_rx_chain_delay_get(_radio.conn_curr->phy_rx, 1);
    f588:	4d59      	ldr	r5, [pc, #356]	; (f6f0 <isr+0x308>)
    f58a:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
    f58e:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
    f592:	2101      	movs	r1, #1
    f594:	f000 0007 	and.w	r0, r0, #7
    f598:	f7ff fc18 	bl	edcc <radio_rx_chain_delay_get>
    f59c:	4420      	add	r0, r4
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f59e:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
    f5a2:	f892 303a 	ldrb.w	r3, [r2, #58]	; 0x3a
    f5a6:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f5aa:	2b02      	cmp	r3, #2
    f5ac:	d01a      	beq.n	f5e4 <isr+0x1fc>
    f5ae:	2b04      	cmp	r3, #4
    f5b0:	d015      	beq.n	f5de <isr+0x1f6>
		return 40;
    f5b2:	2428      	movs	r4, #40	; 0x28
		hcto += addr_us_get(_radio.conn_curr->phy_rx);
    f5b4:	4404      	add	r4, r0
		hcto -= radio_tx_chain_delay_get(_radio.conn_curr->phy_tx,
    f5b6:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
    f5ba:	09c1      	lsrs	r1, r0, #7
    f5bc:	f3c0 00c2 	ubfx	r0, r0, #3, #3
    f5c0:	f7ff fc00 	bl	edc4 <radio_tx_chain_delay_get>
		radio_tmr_hcto_configure(hcto);
    f5c4:	1a20      	subs	r0, r4, r0
    f5c6:	f7ff fd7d 	bl	f0c4 <radio_tmr_hcto_configure>
		packet_tx_enqueue(1);
    f5ca:	2001      	movs	r0, #1
    f5cc:	f002 fb0a 	bl	11be4 <packet_tx_enqueue>
    f5d0:	e11b      	b.n	f80a <isr+0x422>
		LL_ASSERT(!radio_is_ready());
    f5d2:	4040      	eors	r0, r0
    f5d4:	f380 8811 	msr	BASEPRI, r0
    f5d8:	f04f 0004 	mov.w	r0, #4
    f5dc:	df02      	svc	2
		return 376;
    f5de:	f44f 74bc 	mov.w	r4, #376	; 0x178
    f5e2:	e7e7      	b.n	f5b4 <isr+0x1cc>
		return 24;
    f5e4:	2418      	movs	r4, #24
    f5e6:	e7e5      	b.n	f5b4 <isr+0x1cc>
		LL_ASSERT(0);
    f5e8:	4040      	eors	r0, r0
    f5ea:	f380 8811 	msr	BASEPRI, r0
    f5ee:	f04f 0004 	mov.w	r0, #4
    f5f2:	df02      	svc	2
	if (!((trx_done) || ((SILENT_CONNECTION) &&
    f5f4:	b144      	cbz	r4, f608 <isr+0x220>
	switch (_radio.role) {
    f5f6:	4b3e      	ldr	r3, [pc, #248]	; (f6f0 <isr+0x308>)
    f5f8:	7bdb      	ldrb	r3, [r3, #15]
    f5fa:	3b01      	subs	r3, #1
    f5fc:	2b03      	cmp	r3, #3
    f5fe:	d879      	bhi.n	f6f4 <isr+0x30c>
    f600:	e8df f003 	tbb	[pc, r3]
    f604:	70701c08 	.word	0x70701c08
		_radio.state = STATE_CLOSE;
    f608:	2203      	movs	r2, #3
    f60a:	4b39      	ldr	r3, [pc, #228]	; (f6f0 <isr+0x308>)
    f60c:	741a      	strb	r2, [r3, #16]
		radio_disable();
    f60e:	f7ff fbef 	bl	edf0 <radio_disable>
    f612:	e0fa      	b.n	f80a <isr+0x422>
		if (crc_ok) {
    f614:	b94e      	cbnz	r6, f62a <isr+0x242>
			err = 1;
    f616:	2001      	movs	r0, #1
		if (err) {
    f618:	2800      	cmp	r0, #0
    f61a:	f000 80f6 	beq.w	f80a <isr+0x422>
			_radio.state = STATE_CLOSE;
    f61e:	2203      	movs	r2, #3
    f620:	4b33      	ldr	r3, [pc, #204]	; (f6f0 <isr+0x308>)
    f622:	741a      	strb	r2, [r3, #16]
			radio_disable();
    f624:	f7ff fbe4 	bl	edf0 <radio_disable>
    f628:	e0ef      	b.n	f80a <isr+0x422>
			err = isr_rx_adv(devmatch_ok, devmatch_id, irkmatch_ok,
    f62a:	f8cd 8000 	str.w	r8, [sp]
    f62e:	462b      	mov	r3, r5
    f630:	464a      	mov	r2, r9
    f632:	4651      	mov	r1, sl
    f634:	4638      	mov	r0, r7
    f636:	f007 fc37 	bl	16ea8 <isr_rx_adv>
    f63a:	e7ed      	b.n	f618 <isr+0x230>
		rl_idx = devmatch_ok ?
    f63c:	b9a7      	cbnz	r7, f668 <isr+0x280>
    f63e:	f1b9 0f00 	cmp.w	r9, #0
    f642:	d11b      	bne.n	f67c <isr+0x294>
    f644:	24ff      	movs	r4, #255	; 0xff
		if (crc_ok &&
    f646:	b9f6      	cbnz	r6, f686 <isr+0x29e>
			err = 1;
    f648:	2001      	movs	r0, #1
		if (err) {
    f64a:	2800      	cmp	r0, #0
    f64c:	f000 80dd 	beq.w	f80a <isr+0x422>
			_radio.state = STATE_CLOSE;
    f650:	4c27      	ldr	r4, [pc, #156]	; (f6f0 <isr+0x308>)
    f652:	2303      	movs	r3, #3
    f654:	7423      	strb	r3, [r4, #16]
			radio_disable();
    f656:	f7ff fbcb 	bl	edf0 <radio_disable>
			_radio.scanner.state = 0;
    f65a:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
    f65e:	f36f 0341 	bfc	r3, #1, #1
    f662:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
    f666:	e0d0      	b.n	f80a <isr+0x422>
			 ctrl_rl_idx(!!(_radio.scanner.filter_policy & 0x01),
    f668:	4b21      	ldr	r3, [pc, #132]	; (f6f0 <isr+0x308>)
    f66a:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		rl_idx = devmatch_ok ?
    f66e:	4651      	mov	r1, sl
    f670:	f3c0 1000 	ubfx	r0, r0, #4, #1
    f674:	f009 fc9c 	bl	18fb0 <ctrl_rl_idx>
    f678:	4604      	mov	r4, r0
    f67a:	e7e4      	b.n	f646 <isr+0x25e>
    f67c:	4628      	mov	r0, r5
    f67e:	f009 fccd 	bl	1901c <ctrl_rl_irk_idx>
    f682:	4604      	mov	r4, r0
    f684:	e7df      	b.n	f646 <isr+0x25e>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f686:	4b1a      	ldr	r3, [pc, #104]	; (f6f0 <isr+0x308>)
    f688:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f68c:	f013 0f10 	tst.w	r3, #16
    f690:	d109      	bne.n	f6a6 <isr+0x2be>
	return (((_radio.scanner.filter_policy & 0x01) == 0) &&
    f692:	b91f      	cbnz	r7, f69c <isr+0x2b4>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f694:	2301      	movs	r3, #1
		if (crc_ok &&
    f696:	b9db      	cbnz	r3, f6d0 <isr+0x2e8>
			err = 1;
    f698:	2001      	movs	r0, #1
    f69a:	e7d6      	b.n	f64a <isr+0x262>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f69c:	4621      	mov	r1, r4
    f69e:	4648      	mov	r0, r9
    f6a0:	f009 fe1c 	bl	192dc <ctrl_rl_idx_allowed>
    f6a4:	b980      	cbnz	r0, f6c8 <isr+0x2e0>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f6a6:	4b12      	ldr	r3, [pc, #72]	; (f6f0 <isr+0x308>)
    f6a8:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f6ac:	f013 0f10 	tst.w	r3, #16
    f6b0:	d00c      	beq.n	f6cc <isr+0x2e4>
		(((_radio.scanner.filter_policy & 0x01) != 0) &&
    f6b2:	b10f      	cbz	r7, f6b8 <isr+0x2d0>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f6b4:	2301      	movs	r3, #1
    f6b6:	e7ee      	b.n	f696 <isr+0x2ae>
		 (devmatch_ok || ctrl_irk_whitelisted(rl_idx)));
    f6b8:	4620      	mov	r0, r4
    f6ba:	f009 fcd9 	bl	19070 <ctrl_irk_whitelisted>
    f6be:	b108      	cbz	r0, f6c4 <isr+0x2dc>
		 (!devmatch_ok || ctrl_rl_idx_allowed(irkmatch_ok, rl_idx))) ||
    f6c0:	2301      	movs	r3, #1
    f6c2:	e7e8      	b.n	f696 <isr+0x2ae>
    f6c4:	2300      	movs	r3, #0
    f6c6:	e7e6      	b.n	f696 <isr+0x2ae>
    f6c8:	2301      	movs	r3, #1
    f6ca:	e7e4      	b.n	f696 <isr+0x2ae>
    f6cc:	2300      	movs	r3, #0
    f6ce:	e7e2      	b.n	f696 <isr+0x2ae>
			err = isr_rx_scan(devmatch_ok, devmatch_id, irkmatch_ok,
    f6d0:	f8cd 8004 	str.w	r8, [sp, #4]
    f6d4:	9400      	str	r4, [sp, #0]
    f6d6:	462b      	mov	r3, r5
    f6d8:	464a      	mov	r2, r9
    f6da:	4651      	mov	r1, sl
    f6dc:	4638      	mov	r0, r7
    f6de:	f006 ffb7 	bl	16650 <isr_rx_scan>
    f6e2:	e7b2      	b.n	f64a <isr+0x262>
		isr_rx_conn(crc_ok, trx_done, rssi_ready);
    f6e4:	4642      	mov	r2, r8
    f6e6:	4621      	mov	r1, r4
    f6e8:	4630      	mov	r0, r6
    f6ea:	f004 fabb 	bl	13c64 <isr_rx_conn>
    f6ee:	e08c      	b.n	f80a <isr+0x422>
    f6f0:	20000f84 	.word	0x20000f84
		LL_ASSERT(0);
    f6f4:	4040      	eors	r0, r0
    f6f6:	f380 8811 	msr	BASEPRI, r0
    f6fa:	f04f 0004 	mov.w	r0, #4
    f6fe:	df02      	svc	2
	switch (_radio.role) {
    f700:	4bb3      	ldr	r3, [pc, #716]	; (f9d0 <isr+0x5e8>)
    f702:	7bdb      	ldrb	r3, [r3, #15]
    f704:	b2db      	uxtb	r3, r3
    f706:	2b04      	cmp	r3, #4
    f708:	f200 82b2 	bhi.w	fc70 <isr+0x888>
    f70c:	e8df f013 	tbh	[pc, r3, lsl #1]
    f710:	000502a0 	.word	0x000502a0
    f714:	00b5006f 	.word	0x00b5006f
    f718:	00b5      	.short	0x00b5
	if ((_radio.state == STATE_CLOSE) &&
    f71a:	4bad      	ldr	r3, [pc, #692]	; (f9d0 <isr+0x5e8>)
    f71c:	7c1b      	ldrb	r3, [r3, #16]
    f71e:	2b03      	cmp	r3, #3
    f720:	d00f      	beq.n	f742 <isr+0x35a>
		radio_filter_disable();
    f722:	f7ff fc1d 	bl	ef60 <radio_filter_disable>
			&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.first][0];
    f726:	4aaa      	ldr	r2, [pc, #680]	; (f9d0 <isr+0x5e8>)
    f728:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
		pdu_adv = (struct pdu_adv *)
    f72c:	eb03 0183 	add.w	r1, r3, r3, lsl #2
    f730:	ebc3 03c1 	rsb	r3, r3, r1, lsl #3
    f734:	3320      	adds	r3, #32
    f736:	4413      	add	r3, r2
		if ((_radio.state == STATE_CLOSE) &&
    f738:	7c12      	ldrb	r2, [r2, #16]
    f73a:	2a03      	cmp	r2, #3
    f73c:	d00f      	beq.n	f75e <isr+0x376>
	u32_t dont_close = 0;
    f73e:	2300      	movs	r3, #0
    f740:	e060      	b.n	f804 <isr+0x41c>
	    (_radio.advertiser.chan_map_current != 0)) {
    f742:	4ba3      	ldr	r3, [pc, #652]	; (f9d0 <isr+0x5e8>)
    f744:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
	if ((_radio.state == STATE_CLOSE) &&
    f748:	f013 0f0e 	tst.w	r3, #14
    f74c:	d0e9      	beq.n	f722 <isr+0x33a>
		adv_setup();
    f74e:	f002 fca5 	bl	1209c <adv_setup>
		radio_tx_enable();
    f752:	f7ff fb47 	bl	ede4 <radio_tx_enable>
		radio_tmr_end_capture();
    f756:	f7ff fd0b 	bl	f170 <radio_tmr_end_capture>
		dont_close = 1;
    f75a:	2301      	movs	r3, #1
    f75c:	e052      	b.n	f804 <isr+0x41c>
		    (pdu_adv->type != PDU_ADV_TYPE_DIRECT_IND)) {
    f75e:	79db      	ldrb	r3, [r3, #7]
    f760:	f003 030f 	and.w	r3, r3, #15
		if ((_radio.state == STATE_CLOSE) &&
    f764:	2b01      	cmp	r3, #1
    f766:	d040      	beq.n	f7ea <isr+0x402>
			rand_isr_get(sizeof(random_delay), &random_delay);
    f768:	f10d 0127 	add.w	r1, sp, #39	; 0x27
    f76c:	2001      	movs	r0, #1
    f76e:	f000 fb7d 	bl	fe6c <rand_isr_get>
			random_delay %= 10;
    f772:	f89d 3027 	ldrb.w	r3, [sp, #39]	; 0x27
    f776:	4a97      	ldr	r2, [pc, #604]	; (f9d4 <isr+0x5ec>)
    f778:	fba2 1203 	umull	r1, r2, r2, r3
    f77c:	08d2      	lsrs	r2, r2, #3
    f77e:	eb02 0282 	add.w	r2, r2, r2, lsl #2
    f782:	0051      	lsls	r1, r2, #1
    f784:	1a5a      	subs	r2, r3, r1
    f786:	b2d2      	uxtb	r2, r2
			random_delay += 1;
    f788:	3201      	adds	r2, #1
    f78a:	b2d2      	uxtb	r2, r2
    f78c:	f88d 2027 	strb.w	r2, [sp, #39]	; 0x27
					      TICKER_US_TO_TICKS(random_delay *
    f790:	b2d2      	uxtb	r2, r2
    f792:	4891      	ldr	r0, [pc, #580]	; (f9d8 <isr+0x5f0>)
    f794:	fba2 0100 	umull	r0, r1, r2, r0
    f798:	23e8      	movs	r3, #232	; 0xe8
    f79a:	fb03 1102 	mla	r1, r3, r2, r1
    f79e:	a38a      	add	r3, pc, #552	; (adr r3, f9c8 <isr+0x5e0>)
    f7a0:	e9d3 2300 	ldrd	r2, r3, [r3]
    f7a4:	f7f1 f81a 	bl	7dc <__aeabi_uldivmod>
			ticker_status =
    f7a8:	f640 63a2 	movw	r3, #3746	; 0xea2
    f7ac:	9306      	str	r3, [sp, #24]
    f7ae:	4b8b      	ldr	r3, [pc, #556]	; (f9dc <isr+0x5f4>)
    f7b0:	9305      	str	r3, [sp, #20]
    f7b2:	2400      	movs	r4, #0
    f7b4:	9404      	str	r4, [sp, #16]
    f7b6:	9403      	str	r4, [sp, #12]
    f7b8:	9402      	str	r4, [sp, #8]
    f7ba:	9401      	str	r4, [sp, #4]
    f7bc:	9400      	str	r4, [sp, #0]
    f7be:	b283      	uxth	r3, r0
    f7c0:	2205      	movs	r2, #5
    f7c2:	4621      	mov	r1, r4
    f7c4:	4620      	mov	r0, r4
    f7c6:	f000 fe1d 	bl	10404 <ticker_update>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f7ca:	b130      	cbz	r0, f7da <isr+0x3f2>
    f7cc:	2802      	cmp	r0, #2
    f7ce:	d004      	beq.n	f7da <isr+0x3f2>
    f7d0:	4b7f      	ldr	r3, [pc, #508]	; (f9d0 <isr+0x5e8>)
    f7d2:	7b9b      	ldrb	r3, [r3, #14]
    f7d4:	b2db      	uxtb	r3, r3
    f7d6:	2b05      	cmp	r3, #5
    f7d8:	d101      	bne.n	f7de <isr+0x3f6>
	u32_t dont_close = 0;
    f7da:	2300      	movs	r3, #0
    f7dc:	e012      	b.n	f804 <isr+0x41c>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    f7de:	4040      	eors	r0, r0
    f7e0:	f380 8811 	msr	BASEPRI, r0
    f7e4:	f04f 0004 	mov.w	r0, #4
    f7e8:	df02      	svc	2
	u32_t dont_close = 0;
    f7ea:	2300      	movs	r3, #0
    f7ec:	e00a      	b.n	f804 <isr+0x41c>
	if (_radio.state == STATE_CLOSE) {
    f7ee:	4b78      	ldr	r3, [pc, #480]	; (f9d0 <isr+0x5e8>)
    f7f0:	7c1b      	ldrb	r3, [r3, #16]
    f7f2:	2b03      	cmp	r3, #3
    f7f4:	d00c      	beq.n	f810 <isr+0x428>
		radio_filter_disable();
    f7f6:	f7ff fbb3 	bl	ef60 <radio_filter_disable>
		if (_radio.state == STATE_ABORT) {
    f7fa:	4b75      	ldr	r3, [pc, #468]	; (f9d0 <isr+0x5e8>)
    f7fc:	7c1b      	ldrb	r3, [r3, #16]
    f7fe:	2b05      	cmp	r3, #5
    f800:	d031      	beq.n	f866 <isr+0x47e>
	u32_t dont_close = 0;
    f802:	2300      	movs	r3, #0
	if (dont_close) {
    f804:	2b00      	cmp	r3, #0
    f806:	f000 8249 	beq.w	fc9c <isr+0x8b4>
		LL_ASSERT(0);
		break;
	}

	DEBUG_RADIO_ISR(0);
}
    f80a:	b00a      	add	sp, #40	; 0x28
    f80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		radio_tmr_tifs_set(RADIO_TIFS);
    f810:	2096      	movs	r0, #150	; 0x96
    f812:	f7ff fbf5 	bl	f000 <radio_tmr_tifs_set>
		radio_switch_complete_and_tx(0, 0, 0, 0);
    f816:	2300      	movs	r3, #0
    f818:	461a      	mov	r2, r3
    f81a:	4619      	mov	r1, r3
    f81c:	4618      	mov	r0, r3
    f81e:	f7ff fb45 	bl	eeac <radio_switch_complete_and_tx>
		radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->
    f822:	4b6b      	ldr	r3, [pc, #428]	; (f9d0 <isr+0x5e8>)
    f824:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    f828:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    f82c:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
    f830:	3008      	adds	r0, #8
    f832:	f7ff fab9 	bl	eda8 <radio_pkt_rx_set>
		radio_rssi_measure();
    f836:	f7ff fb49 	bl	eecc <radio_rssi_measure>
		if (ctrl_rl_enabled()) {
    f83a:	f009 fe33 	bl	194a4 <ctrl_rl_enabled>
    f83e:	b940      	cbnz	r0, f852 <isr+0x46a>
		_radio.state = STATE_RX;
    f840:	2401      	movs	r4, #1
    f842:	4b63      	ldr	r3, [pc, #396]	; (f9d0 <isr+0x5e8>)
    f844:	741c      	strb	r4, [r3, #16]
		radio_rx_enable();
    f846:	f7ff fac7 	bl	edd8 <radio_rx_enable>
		radio_tmr_end_capture();
    f84a:	f7ff fc91 	bl	f170 <radio_tmr_end_capture>
		dont_close = 1;
    f84e:	4623      	mov	r3, r4
    f850:	e7d8      	b.n	f804 <isr+0x41c>
			u8_t count, *irks = ctrl_irks_get(&count);
    f852:	f10d 0027 	add.w	r0, sp, #39	; 0x27
    f856:	f009 fba1 	bl	18f9c <ctrl_irks_get>
			radio_ar_configure(count, irks);
    f85a:	4601      	mov	r1, r0
    f85c:	f89d 0027 	ldrb.w	r0, [sp, #39]	; 0x27
    f860:	f7ff fd32 	bl	f2c8 <radio_ar_configure>
    f864:	e7ec      	b.n	f840 <isr+0x458>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
    f866:	2400      	movs	r4, #0
    f868:	9400      	str	r4, [sp, #0]
    f86a:	4623      	mov	r3, r4
    f86c:	2204      	movs	r2, #4
    f86e:	4621      	mov	r1, r4
    f870:	4620      	mov	r0, r4
    f872:	f000 fe15 	bl	104a0 <ticker_stop>
	u32_t dont_close = 0;
    f876:	4623      	mov	r3, r4
    f878:	e7c4      	b.n	f804 <isr+0x41c>
	if (_radio.conn_curr == 0) {
    f87a:	4b55      	ldr	r3, [pc, #340]	; (f9d0 <isr+0x5e8>)
    f87c:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f880:	2800      	cmp	r0, #0
    f882:	f000 81fb 	beq.w	fc7c <isr+0x894>
	reason_peer = _radio.conn_curr->llcp_terminate.reason_peer;
    f886:	f890 10b3 	ldrb.w	r1, [r0, #179]	; 0xb3
	if (reason_peer && ((_radio.role == ROLE_SLAVE) ||
    f88a:	b141      	cbz	r1, f89e <isr+0x4b6>
    f88c:	7bdb      	ldrb	r3, [r3, #15]
    f88e:	b2db      	uxtb	r3, r3
    f890:	2b03      	cmp	r3, #3
    f892:	d046      	beq.n	f922 <isr+0x53a>
    f894:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f898:	f013 0f01 	tst.w	r3, #1
    f89c:	d141      	bne.n	f922 <isr+0x53a>
	latency_event = _radio.conn_curr->latency_event;
    f89e:	f8b0 802a 	ldrh.w	r8, [r0, #42]	; 0x2a
	elapsed_event = latency_event + 1;
    f8a2:	f108 0401 	add.w	r4, r8, #1
    f8a6:	b2a4      	uxth	r4, r4
	if (_radio.packet_counter &&
    f8a8:	4b49      	ldr	r3, [pc, #292]	; (f9d0 <isr+0x5e8>)
    f8aa:	f893 3114 	ldrb.w	r3, [r3, #276]	; 0x114
    f8ae:	2b00      	cmp	r3, #0
    f8b0:	f000 80b8 	beq.w	fa24 <isr+0x63c>
		if (_radio.role == ROLE_SLAVE) {
    f8b4:	4b46      	ldr	r3, [pc, #280]	; (f9d0 <isr+0x5e8>)
    f8b6:	7bdb      	ldrb	r3, [r3, #15]
    f8b8:	b2db      	uxtb	r3, r3
    f8ba:	2b03      	cmp	r3, #3
    f8bc:	d03c      	beq.n	f938 <isr+0x550>
		} else if (reason_peer) {
    f8be:	2900      	cmp	r1, #0
    f8c0:	f000 80ad 	beq.w	fa1e <isr+0x636>
			_radio.conn_curr->master.terminate_ack = 1;
    f8c4:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
    f8c8:	f043 0301 	orr.w	r3, r3, #1
    f8cc:	f880 3050 	strb.w	r3, [r0, #80]	; 0x50
	ticks_drift_minus = 0;
    f8d0:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    f8d2:	4635      	mov	r5, r6
		_radio.conn_curr->connect_expire = 0;
    f8d4:	4b3e      	ldr	r3, [pc, #248]	; (f9d0 <isr+0x5e8>)
    f8d6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f8da:	2200      	movs	r2, #0
    f8dc:	879a      	strh	r2, [r3, #60]	; 0x3c
	if (_radio.conn_curr->supervision_expire) {
    f8de:	4b3c      	ldr	r3, [pc, #240]	; (f9d0 <isr+0x5e8>)
    f8e0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    f8e4:	f8b0 3040 	ldrh.w	r3, [r0, #64]	; 0x40
    f8e8:	2b00      	cmp	r3, #0
    f8ea:	f000 80d8 	beq.w	fa9e <isr+0x6b6>
		if (_radio.conn_curr->supervision_expire > elapsed_event) {
    f8ee:	429c      	cmp	r4, r3
    f8f0:	f080 80c9 	bcs.w	fa86 <isr+0x69e>
			_radio.conn_curr->supervision_expire -= elapsed_event;
    f8f4:	1b1b      	subs	r3, r3, r4
    f8f6:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
			_radio.conn_curr->latency_event = 0;
    f8fa:	4b35      	ldr	r3, [pc, #212]	; (f9d0 <isr+0x5e8>)
    f8fc:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    f900:	2100      	movs	r1, #0
    f902:	8551      	strh	r1, [r2, #42]	; 0x2a
			if (_radio.conn_curr->supervision_expire <= 6) {
    f904:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f908:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
    f90c:	2a06      	cmp	r2, #6
    f90e:	f240 8130 	bls.w	fb72 <isr+0x78a>
			else if (_radio.role == ROLE_SLAVE) {
    f912:	4a2f      	ldr	r2, [pc, #188]	; (f9d0 <isr+0x5e8>)
    f914:	7bd2      	ldrb	r2, [r2, #15]
    f916:	b2d2      	uxtb	r2, r2
    f918:	2a03      	cmp	r2, #3
    f91a:	f000 80a2 	beq.w	fa62 <isr+0x67a>
	force = 0;
    f91e:	2700      	movs	r7, #0
    f920:	e0be      	b.n	faa0 <isr+0x6b8>
		terminate_ind_rx_enqueue(_radio.conn_curr, reason_peer);
    f922:	f004 f90b 	bl	13b3c <terminate_ind_rx_enqueue>
		connection_release(_radio.conn_curr);
    f926:	4c2a      	ldr	r4, [pc, #168]	; (f9d0 <isr+0x5e8>)
    f928:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    f92c:	f002 f9b2 	bl	11c94 <connection_release>
		_radio.conn_curr = NULL;
    f930:	2300      	movs	r3, #0
    f932:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    f936:	e765      	b.n	f804 <isr+0x41c>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f938:	f7ff fc0e 	bl	f158 <radio_tmr_aa_restore>
    f93c:	4682      	mov	sl, r0
						     radio_tmr_ready_get();
    f93e:	f7ff fc11 	bl	f164 <radio_tmr_ready_get>
			start_to_address_actual_us = radio_tmr_aa_restore() -
    f942:	ebaa 0a00 	sub.w	sl, sl, r0
				_radio.conn_curr->slave.window_widening_event_us;
    f946:	4b22      	ldr	r3, [pc, #136]	; (f9d0 <isr+0x5e8>)
    f948:	f8d3 9110 	ldr.w	r9, [r3, #272]	; 0x110
			window_widening_event_us =
    f94c:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
				addr_us_get(_radio.conn_curr->phy_rx);
    f950:	f899 303a 	ldrb.w	r3, [r9, #58]	; 0x3a
    f954:	f003 0307 	and.w	r3, r3, #7
	switch (phy) {
    f958:	2b02      	cmp	r3, #2
    f95a:	d031      	beq.n	f9c0 <isr+0x5d8>
    f95c:	2b04      	cmp	r3, #4
    f95e:	d02c      	beq.n	f9ba <isr+0x5d2>
		return 40;
    f960:	2628      	movs	r6, #40	; 0x28
				preamble_to_addr_us +
    f962:	1987      	adds	r7, r0, r6
			start_to_address_expected_us = RADIO_TICKER_JITTER_US +
    f964:	3730      	adds	r7, #48	; 0x30
			if (start_to_address_actual_us <=
    f966:	45ba      	cmp	sl, r7
    f968:	d83c      	bhi.n	f9e4 <isr+0x5fc>
					TICKER_US_TO_TICKS(window_widening_event_us);
    f96a:	4e1d      	ldr	r6, [pc, #116]	; (f9e0 <isr+0x5f8>)
    f96c:	a316      	add	r3, pc, #88	; (adr r3, f9c8 <isr+0x5e0>)
    f96e:	e9d3 2300 	ldrd	r2, r3, [r3]
    f972:	fba0 0106 	umull	r0, r1, r0, r6
    f976:	f7f0 ff31 	bl	7dc <__aeabi_uldivmod>
				ticks_drift_plus =
    f97a:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS((u64_t)(start_to_address_expected_us -
    f97c:	eba7 000a 	sub.w	r0, r7, sl
    f980:	a311      	add	r3, pc, #68	; (adr r3, f9c8 <isr+0x5e0>)
    f982:	e9d3 2300 	ldrd	r2, r3, [r3]
    f986:	fba0 0106 	umull	r0, r1, r0, r6
    f98a:	f7f0 ff27 	bl	7dc <__aeabi_uldivmod>
				ticks_drift_minus =
    f98e:	b286      	uxth	r6, r0
			_radio.conn_curr->slave.window_widening_event_us = 0;
    f990:	2200      	movs	r2, #0
    f992:	f8c9 2060 	str.w	r2, [r9, #96]	; 0x60
			_radio.conn_curr->slave.window_size_event_us = 0;
    f996:	4b0e      	ldr	r3, [pc, #56]	; (f9d0 <isr+0x5e8>)
    f998:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
    f99c:	668a      	str	r2, [r1, #104]	; 0x68
			if (_radio.conn_curr->pkt_tx_head) {
    f99e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    f9a2:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
    f9a6:	b38a      	cbz	r2, fa0c <isr+0x624>
				if (pdu_data_tx->len ||
    f9a8:	7952      	ldrb	r2, [r2, #5]
    f9aa:	b91a      	cbnz	r2, f9b4 <isr+0x5cc>
				    _radio.conn_curr->packet_tx_head_offset) {
    f9ac:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
				if (pdu_data_tx->len ||
    f9b0:	2a00      	cmp	r2, #0
    f9b2:	d08f      	beq.n	f8d4 <isr+0x4ec>
					_radio.conn_curr->latency_event = 0;
    f9b4:	2200      	movs	r2, #0
    f9b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    f9b8:	e78c      	b.n	f8d4 <isr+0x4ec>
		return 376;
    f9ba:	f44f 76bc 	mov.w	r6, #376	; 0x178
    f9be:	e7d0      	b.n	f962 <isr+0x57a>
		return 24;
    f9c0:	2618      	movs	r6, #24
    f9c2:	e7ce      	b.n	f962 <isr+0x57a>
    f9c4:	f3af 8000 	nop.w
    f9c8:	1afd498d 	.word	0x1afd498d
    f9cc:	00000007 	.word	0x00000007
    f9d0:	20000f84 	.word	0x20000f84
    f9d4:	cccccccd 	.word	0xcccccccd
    f9d8:	d4a51000 	.word	0xd4a51000
    f9dc:	000113e5 	.word	0x000113e5
    f9e0:	3b9aca00 	.word	0x3b9aca00
					TICKER_US_TO_TICKS(start_to_address_actual_us);
    f9e4:	4faa      	ldr	r7, [pc, #680]	; (fc90 <isr+0x8a8>)
    f9e6:	a3a8      	add	r3, pc, #672	; (adr r3, fc88 <isr+0x8a0>)
    f9e8:	e9d3 2300 	ldrd	r2, r3, [r3]
    f9ec:	fbaa 0107 	umull	r0, r1, sl, r7
    f9f0:	f7f0 fef4 	bl	7dc <__aeabi_uldivmod>
				ticks_drift_plus =
    f9f4:	b285      	uxth	r5, r0
					TICKER_US_TO_TICKS(RADIO_TICKER_JITTER_US +
    f9f6:	f106 0030 	add.w	r0, r6, #48	; 0x30
    f9fa:	a3a3      	add	r3, pc, #652	; (adr r3, fc88 <isr+0x8a0>)
    f9fc:	e9d3 2300 	ldrd	r2, r3, [r3]
    fa00:	fba0 0107 	umull	r0, r1, r0, r7
    fa04:	f7f0 feea 	bl	7dc <__aeabi_uldivmod>
				ticks_drift_minus =
    fa08:	b286      	uxth	r6, r0
    fa0a:	e7c1      	b.n	f990 <isr+0x5a8>
			} else if (_radio.conn_curr->slave.latency_enabled) {
    fa0c:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
    fa10:	f012 0f01 	tst.w	r2, #1
    fa14:	f43f af5e 	beq.w	f8d4 <isr+0x4ec>
					_radio.conn_curr->latency;
    fa18:	8cda      	ldrh	r2, [r3, #38]	; 0x26
				_radio.conn_curr->latency_event =
    fa1a:	855a      	strh	r2, [r3, #42]	; 0x2a
    fa1c:	e75a      	b.n	f8d4 <isr+0x4ec>
	ticks_drift_minus = 0;
    fa1e:	2600      	movs	r6, #0
	ticks_drift_plus = 0;
    fa20:	4635      	mov	r5, r6
    fa22:	e757      	b.n	f8d4 <isr+0x4ec>
	else if (_radio.conn_curr->connect_expire) {
    fa24:	8f85      	ldrh	r5, [r0, #60]	; 0x3c
    fa26:	b195      	cbz	r5, fa4e <isr+0x666>
		if (_radio.conn_curr->connect_expire > elapsed_event) {
    fa28:	42ac      	cmp	r4, r5
    fa2a:	d204      	bcs.n	fa36 <isr+0x64e>
			_radio.conn_curr->connect_expire -= elapsed_event;
    fa2c:	1b2d      	subs	r5, r5, r4
    fa2e:	8785      	strh	r5, [r0, #60]	; 0x3c
	ticks_drift_minus = 0;
    fa30:	2500      	movs	r5, #0
	ticks_drift_plus = 0;
    fa32:	462e      	mov	r6, r5
    fa34:	e753      	b.n	f8de <isr+0x4f6>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x3e);
    fa36:	213e      	movs	r1, #62	; 0x3e
    fa38:	f004 f880 	bl	13b3c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fa3c:	4c95      	ldr	r4, [pc, #596]	; (fc94 <isr+0x8ac>)
    fa3e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    fa42:	f002 f927 	bl	11c94 <connection_release>
			_radio.conn_curr = NULL;
    fa46:	2300      	movs	r3, #0
    fa48:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fa4c:	e6da      	b.n	f804 <isr+0x41c>
		if (!_radio.conn_curr->supervision_expire) {
    fa4e:	f8b0 6040 	ldrh.w	r6, [r0, #64]	; 0x40
    fa52:	b926      	cbnz	r6, fa5e <isr+0x676>
				_radio.conn_curr->supervision_reload;
    fa54:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
    fa56:	f8a0 3040 	strh.w	r3, [r0, #64]	; 0x40
	ticks_drift_plus = 0;
    fa5a:	4635      	mov	r5, r6
    fa5c:	e73f      	b.n	f8de <isr+0x4f6>
	ticks_drift_minus = 0;
    fa5e:	462e      	mov	r6, r5
    fa60:	e73d      	b.n	f8de <isr+0x4f6>
				if (latency_event != 0) {
    fa62:	f1b8 0f00 	cmp.w	r8, #0
    fa66:	f040 8086 	bne.w	fb76 <isr+0x78e>
					force = _radio.conn_curr->slave.force & 0x01;
    fa6a:	6edf      	ldr	r7, [r3, #108]	; 0x6c
					_radio.conn_curr->slave.force >>= 1;
    fa6c:	087a      	lsrs	r2, r7, #1
    fa6e:	66da      	str	r2, [r3, #108]	; 0x6c
					if (force) {
    fa70:	f017 0701 	ands.w	r7, r7, #1
    fa74:	d014      	beq.n	faa0 <isr+0x6b8>
						_radio.conn_curr->slave.force |=
    fa76:	4b87      	ldr	r3, [pc, #540]	; (fc94 <isr+0x8ac>)
    fa78:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    fa7c:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
    fa7e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
    fa82:	66d3      	str	r3, [r2, #108]	; 0x6c
    fa84:	e00c      	b.n	faa0 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x08);
    fa86:	2108      	movs	r1, #8
    fa88:	f004 f858 	bl	13b3c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fa8c:	4c81      	ldr	r4, [pc, #516]	; (fc94 <isr+0x8ac>)
    fa8e:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    fa92:	f002 f8ff 	bl	11c94 <connection_release>
			_radio.conn_curr = NULL;
    fa96:	2300      	movs	r3, #0
    fa98:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fa9c:	e6b2      	b.n	f804 <isr+0x41c>
	force = 0;
    fa9e:	2700      	movs	r7, #0
	if (_radio.conn_curr->procedure_expire != 0) {
    faa0:	4b7c      	ldr	r3, [pc, #496]	; (fc94 <isr+0x8ac>)
    faa2:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
    faa6:	f8b0 3044 	ldrh.w	r3, [r0, #68]	; 0x44
    faaa:	b123      	cbz	r3, fab6 <isr+0x6ce>
		if (_radio.conn_curr->procedure_expire > elapsed_event) {
    faac:	429c      	cmp	r4, r3
    faae:	d264      	bcs.n	fb7a <isr+0x792>
			_radio.conn_curr->procedure_expire -= elapsed_event;
    fab0:	1b1b      	subs	r3, r3, r4
    fab2:	f8a0 3044 	strh.w	r3, [r0, #68]	; 0x44
	if (_radio.conn_curr->apto_expire != 0) {
    fab6:	4b77      	ldr	r3, [pc, #476]	; (fc94 <isr+0x8ac>)
    fab8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    fabc:	f8b2 304c 	ldrh.w	r3, [r2, #76]	; 0x4c
    fac0:	b123      	cbz	r3, facc <isr+0x6e4>
		if (_radio.conn_curr->apto_expire > elapsed_event) {
    fac2:	429c      	cmp	r4, r3
    fac4:	d265      	bcs.n	fb92 <isr+0x7aa>
			_radio.conn_curr->apto_expire -= elapsed_event;
    fac6:	1b1b      	subs	r3, r3, r4
    fac8:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	if (_radio.conn_curr->appto_expire != 0) {
    facc:	4b71      	ldr	r3, [pc, #452]	; (fc94 <isr+0x8ac>)
    face:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    fad2:	f8b2 3048 	ldrh.w	r3, [r2, #72]	; 0x48
    fad6:	b12b      	cbz	r3, fae4 <isr+0x6fc>
		if (_radio.conn_curr->appto_expire > elapsed_event) {
    fad8:	429c      	cmp	r4, r3
    fada:	f080 8090 	bcs.w	fbfe <isr+0x816>
			_radio.conn_curr->appto_expire -= elapsed_event;
    fade:	1b1b      	subs	r3, r3, r4
    fae0:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fae4:	4b6b      	ldr	r3, [pc, #428]	; (fc94 <isr+0x8ac>)
    fae6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    faea:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
    faee:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
    faf2:	4299      	cmp	r1, r3
    faf4:	d006      	beq.n	fb04 <isr+0x71c>
	    ((_radio.conn_curr->llcp_type == LLCP_CONN_UPD) ||
    faf6:	f892 3076 	ldrb.w	r3, [r2, #118]	; 0x76
    fafa:	3b01      	subs	r3, #1
    fafc:	b2db      	uxtb	r3, r3
	if ((_radio.conn_curr->llcp_ack != _radio.conn_curr->llcp_req) &&
    fafe:	2b01      	cmp	r3, #1
    fb00:	f240 809b 	bls.w	fc3a <isr+0x852>
	if ((force) || (latency_event != _radio.conn_curr->latency_event)) {
    fb04:	b937      	cbnz	r7, fb14 <isr+0x72c>
    fb06:	4b63      	ldr	r3, [pc, #396]	; (fc94 <isr+0x8ac>)
    fb08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    fb0c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    fb0e:	4598      	cmp	r8, r3
    fb10:	f000 8096 	beq.w	fc40 <isr+0x858>
		lazy = _radio.conn_curr->latency_event + 1;
    fb14:	4b5f      	ldr	r3, [pc, #380]	; (fc94 <isr+0x8ac>)
    fb16:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    fb1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
    fb1c:	3301      	adds	r3, #1
    fb1e:	b29b      	uxth	r3, r3
	if ((ticks_drift_plus != 0) || (ticks_drift_minus != 0) ||
    fb20:	b925      	cbnz	r5, fb2c <isr+0x744>
    fb22:	b91e      	cbnz	r6, fb2c <isr+0x744>
    fb24:	b913      	cbnz	r3, fb2c <isr+0x744>
	    (lazy != 0) || (force != 0)) {
    fb26:	2f00      	cmp	r7, #0
    fb28:	f000 80aa 	beq.w	fc80 <isr+0x898>
				    _radio.conn_curr->handle;
    fb2c:	4a59      	ldr	r2, [pc, #356]	; (fc94 <isr+0x8ac>)
    fb2e:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
		u8_t ticker_id = RADIO_TICKER_ID_FIRST_CONNECTION +
    fb32:	f892 4020 	ldrb.w	r4, [r2, #32]
    fb36:	3407      	adds	r4, #7
    fb38:	b2e4      	uxtb	r4, r4
		ticker_status =
    fb3a:	9406      	str	r4, [sp, #24]
    fb3c:	4a56      	ldr	r2, [pc, #344]	; (fc98 <isr+0x8b0>)
    fb3e:	9205      	str	r2, [sp, #20]
    fb40:	9704      	str	r7, [sp, #16]
    fb42:	9303      	str	r3, [sp, #12]
    fb44:	2000      	movs	r0, #0
    fb46:	9002      	str	r0, [sp, #8]
    fb48:	9001      	str	r0, [sp, #4]
    fb4a:	9600      	str	r6, [sp, #0]
    fb4c:	462b      	mov	r3, r5
    fb4e:	4622      	mov	r2, r4
    fb50:	4601      	mov	r1, r0
    fb52:	f000 fc57 	bl	10404 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fb56:	4603      	mov	r3, r0
    fb58:	2800      	cmp	r0, #0
    fb5a:	f43f ae53 	beq.w	f804 <isr+0x41c>
    fb5e:	2802      	cmp	r0, #2
    fb60:	f000 8090 	beq.w	fc84 <isr+0x89c>
    fb64:	4b4b      	ldr	r3, [pc, #300]	; (fc94 <isr+0x8ac>)
    fb66:	7b9b      	ldrb	r3, [r3, #14]
    fb68:	b2db      	uxtb	r3, r3
    fb6a:	429c      	cmp	r4, r3
    fb6c:	d16a      	bne.n	fc44 <isr+0x85c>
	u32_t dont_close = 0;
    fb6e:	2300      	movs	r3, #0
    fb70:	e648      	b.n	f804 <isr+0x41c>
				force = 1;
    fb72:	2701      	movs	r7, #1
    fb74:	e794      	b.n	faa0 <isr+0x6b8>
					force = 1;
    fb76:	2701      	movs	r7, #1
    fb78:	e792      	b.n	faa0 <isr+0x6b8>
			terminate_ind_rx_enqueue(_radio.conn_curr, 0x22);
    fb7a:	2122      	movs	r1, #34	; 0x22
    fb7c:	f003 ffde 	bl	13b3c <terminate_ind_rx_enqueue>
			connection_release(_radio.conn_curr);
    fb80:	4c44      	ldr	r4, [pc, #272]	; (fc94 <isr+0x8ac>)
    fb82:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
    fb86:	f002 f885 	bl	11c94 <connection_release>
			_radio.conn_curr = NULL;
    fb8a:	2300      	movs	r3, #0
    fb8c:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
    fb90:	e638      	b.n	f804 <isr+0x41c>
			_radio.conn_curr->apto_expire = 0;
    fb92:	2300      	movs	r3, #0
    fb94:	f8a2 304c 	strh.w	r3, [r2, #76]	; 0x4c
	}
}

static inline u8_t packet_rx_acquired_count_get(void)
{
	if (_radio.packet_rx_acquire >=
    fb98:	4b3e      	ldr	r3, [pc, #248]	; (fc94 <isr+0x8ac>)
    fb9a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
    fb9e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    fba2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
    fba4:	429a      	cmp	r2, r3
    fba6:	d318      	bcc.n	fbda <isr+0x7f2>
		return (_radio.packet_rx_acquire -
			_radio.packet_rx_last);
    fba8:	4b3a      	ldr	r3, [pc, #232]	; (fc94 <isr+0x8ac>)
    fbaa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
    fbae:	1ad3      	subs	r3, r2, r3
    fbb0:	b2db      	uxtb	r3, r3
	}
}

static inline struct radio_pdu_node_rx *packet_rx_reserve_get(u8_t count)
{
	if (count > packet_rx_acquired_count_get()) {
    fbb2:	2b01      	cmp	r3, #1
    fbb4:	d91b      	bls.n	fbee <isr+0x806>
		return 0;
	}

	return _radio.packet_rx[_radio.packet_rx_last];
    fbb6:	4b37      	ldr	r3, [pc, #220]	; (fc94 <isr+0x8ac>)
    fbb8:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
    fbbc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
    fbc0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
    fbc4:	b1ab      	cbz	r3, fbf2 <isr+0x80a>
			radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
    fbc6:	4a33      	ldr	r2, [pc, #204]	; (fc94 <isr+0x8ac>)
    fbc8:	f8d2 2110 	ldr.w	r2, [r2, #272]	; 0x110
    fbcc:	8c12      	ldrh	r2, [r2, #32]
    fbce:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_APTO;
    fbd0:	220a      	movs	r2, #10
    fbd2:	711a      	strb	r2, [r3, #4]
			packet_rx_enqueue();
    fbd4:	f003 ff3e 	bl	13a54 <packet_rx_enqueue>
    fbd8:	e778      	b.n	facc <isr+0x6e4>
		return (_radio.packet_rx_count -
    fbda:	492e      	ldr	r1, [pc, #184]	; (fc94 <isr+0x8ac>)
    fbdc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
    fbe0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
    fbe4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
    fbe6:	fa52 f383 	uxtab	r3, r2, r3
    fbea:	b2db      	uxtb	r3, r3
    fbec:	e7e1      	b.n	fbb2 <isr+0x7ca>
		return 0;
    fbee:	2300      	movs	r3, #0
    fbf0:	e7e8      	b.n	fbc4 <isr+0x7dc>
			LL_ASSERT(radio_pdu_node_rx);
    fbf2:	4040      	eors	r0, r0
    fbf4:	f380 8811 	msr	BASEPRI, r0
    fbf8:	f04f 0004 	mov.w	r0, #4
    fbfc:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
    fbfe:	2300      	movs	r3, #0
    fc00:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fc04:	4b23      	ldr	r3, [pc, #140]	; (fc94 <isr+0x8ac>)
    fc06:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
    fc0a:	f8b3 2044 	ldrh.w	r2, [r3, #68]	; 0x44
    fc0e:	2a00      	cmp	r2, #0
    fc10:	f47f af68 	bne.w	fae4 <isr+0x6fc>
			    (_radio.conn_curr->llcp_req ==
    fc14:	f893 1074 	ldrb.w	r1, [r3, #116]	; 0x74
			     _radio.conn_curr->llcp_ack)) {
    fc18:	f893 2075 	ldrb.w	r2, [r3, #117]	; 0x75
			if ((_radio.conn_curr->procedure_expire == 0) &&
    fc1c:	4291      	cmp	r1, r2
    fc1e:	f47f af61 	bne.w	fae4 <isr+0x6fc>
				_radio.conn_curr->llcp_type = LLCP_PING;
    fc22:	2207      	movs	r2, #7
    fc24:	f883 2076 	strb.w	r2, [r3, #118]	; 0x76
				_radio.conn_curr->llcp_ack--;
    fc28:	4b1a      	ldr	r3, [pc, #104]	; (fc94 <isr+0x8ac>)
    fc2a:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
    fc2e:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
    fc32:	3b01      	subs	r3, #1
    fc34:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
    fc38:	e754      	b.n	fae4 <isr+0x6fc>
		_radio.conn_curr->latency_event = 0;
    fc3a:	2300      	movs	r3, #0
    fc3c:	8553      	strh	r3, [r2, #42]	; 0x2a
    fc3e:	e761      	b.n	fb04 <isr+0x71c>
	lazy = 0;
    fc40:	2300      	movs	r3, #0
    fc42:	e76d      	b.n	fb20 <isr+0x738>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
    fc44:	4040      	eors	r0, r0
    fc46:	f380 8811 	msr	BASEPRI, r0
    fc4a:	f04f 0004 	mov.w	r0, #4
    fc4e:	df02      	svc	2
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fc50:	4b10      	ldr	r3, [pc, #64]	; (fc94 <isr+0x8ac>)
    fc52:	7c1b      	ldrb	r3, [r3, #16]
    fc54:	3b04      	subs	r3, #4
    fc56:	b2db      	uxtb	r3, r3
    fc58:	2b01      	cmp	r3, #1
    fc5a:	d803      	bhi.n	fc64 <isr+0x87c>
		_radio.state = STATE_NONE;
    fc5c:	2200      	movs	r2, #0
    fc5e:	4b0d      	ldr	r3, [pc, #52]	; (fc94 <isr+0x8ac>)
    fc60:	741a      	strb	r2, [r3, #16]
    fc62:	e5d2      	b.n	f80a <isr+0x422>
		LL_ASSERT((_radio.state == STATE_STOP) ||
    fc64:	4040      	eors	r0, r0
    fc66:	f380 8811 	msr	BASEPRI, r0
    fc6a:	f04f 0004 	mov.w	r0, #4
    fc6e:	df02      	svc	2
		LL_ASSERT(0);
    fc70:	4040      	eors	r0, r0
    fc72:	f380 8811 	msr	BASEPRI, r0
    fc76:	f04f 0004 	mov.w	r0, #4
    fc7a:	df02      	svc	2
	u32_t dont_close = 0;
    fc7c:	2300      	movs	r3, #0
    fc7e:	e5c1      	b.n	f804 <isr+0x41c>
    fc80:	2300      	movs	r3, #0
    fc82:	e5bf      	b.n	f804 <isr+0x41c>
    fc84:	2300      	movs	r3, #0
    fc86:	e5bd      	b.n	f804 <isr+0x41c>
    fc88:	1afd498d 	.word	0x1afd498d
    fc8c:	00000007 	.word	0x00000007
    fc90:	3b9aca00 	.word	0x3b9aca00
    fc94:	20000f84 	.word	0x20000f84
    fc98:	00011405 	.word	0x00011405
	_radio.role = ROLE_NONE;
    fc9c:	4d0e      	ldr	r5, [pc, #56]	; (fcd8 <isr+0x8f0>)
    fc9e:	2400      	movs	r4, #0
    fca0:	73ec      	strb	r4, [r5, #15]
	_radio.state = STATE_NONE;
    fca2:	742c      	strb	r4, [r5, #16]
	_radio.ticker_id_event = 0;
    fca4:	736c      	strb	r4, [r5, #13]
	radio_tmr_stop();
    fca6:	f7ff fa05 	bl	f0b4 <radio_tmr_stop>
	event_inactive(0, 0, 0, NULL);
    fcaa:	4623      	mov	r3, r4
    fcac:	4622      	mov	r2, r4
    fcae:	4621      	mov	r1, r4
    fcb0:	4620      	mov	r0, r4
    fcb2:	f001 fe29 	bl	11908 <event_inactive>
	clock_control_off(_radio.hf_clock, NULL);
    fcb6:	6828      	ldr	r0, [r5, #0]
 * @param sys A pointer to an opaque data representing the sub-system
 */
static inline int clock_control_off(struct device *dev,
				    clock_control_subsys_t sys)
{
	const struct clock_control_driver_api *api = dev->driver_api;
    fcb8:	6843      	ldr	r3, [r0, #4]

	return api->off(dev, sys);
    fcba:	685b      	ldr	r3, [r3, #4]
    fcbc:	4621      	mov	r1, r4
    fcbe:	4798      	blx	r3
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
    fcc0:	2201      	movs	r2, #1
    fcc2:	4611      	mov	r1, r2
    fcc4:	4620      	mov	r0, r4
    fcc6:	f7fe fcff 	bl	e6c8 <mayfly_enable>
    fcca:	e59e      	b.n	f80a <isr+0x422>
		LL_ASSERT(0);
    fccc:	4040      	eors	r0, r0
    fcce:	f380 8811 	msr	BASEPRI, r0
    fcd2:	f04f 0004 	mov.w	r0, #4
    fcd6:	df02      	svc	2
    fcd8:	20000f84 	.word	0x20000f84

0000fcdc <init>:
{
    fcdc:	b410      	push	{r4}
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fcde:	1d1c      	adds	r4, r3, #4
    fce0:	42a2      	cmp	r2, r4
    fce2:	d90e      	bls.n	fd02 <init+0x26>
	*rng = (struct rand *)context;
    fce4:	6001      	str	r1, [r0, #0]
	p->count = len - offsetof(struct rand, rand);
    fce6:	3a04      	subs	r2, #4
    fce8:	700a      	strb	r2, [r1, #0]
	p->threshold = threshold;
    fcea:	704b      	strb	r3, [r1, #1]
	p->first = p->last = 0;
    fcec:	2300      	movs	r3, #0
    fcee:	70cb      	strb	r3, [r1, #3]
    fcf0:	708b      	strb	r3, [r1, #2]
	if (!rng_isr || !rng_thr) {
    fcf2:	4b0c      	ldr	r3, [pc, #48]	; (fd24 <init+0x48>)
    fcf4:	681b      	ldr	r3, [r3, #0]
    fcf6:	b153      	cbz	r3, fd0e <init+0x32>
    fcf8:	4b0b      	ldr	r3, [pc, #44]	; (fd28 <init+0x4c>)
    fcfa:	681b      	ldr	r3, [r3, #0]
    fcfc:	b13b      	cbz	r3, fd0e <init+0x32>
}
    fcfe:	bc10      	pop	{r4}
    fd00:	4770      	bx	lr
	LL_ASSERT(len > (offsetof(struct rand, rand) + threshold));
    fd02:	4040      	eors	r0, r0
    fd04:	f380 8811 	msr	BASEPRI, r0
    fd08:	f04f 0004 	mov.w	r0, #4
    fd0c:	df02      	svc	2
		NRF_RNG->CONFIG = RNG_CONFIG_DERCEN_Msk;
    fd0e:	4b07      	ldr	r3, [pc, #28]	; (fd2c <init+0x50>)
    fd10:	2201      	movs	r2, #1
    fd12:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		NRF_RNG->EVENTS_VALRDY = 0;
    fd16:	2100      	movs	r1, #0
    fd18:	f8c3 1100 	str.w	r1, [r3, #256]	; 0x100
		NRF_RNG->INTENSET = RNG_INTENSET_VALRDY_Msk;
    fd1c:	f8c3 2304 	str.w	r2, [r3, #772]	; 0x304
		NRF_RNG->TASKS_START = 1;
    fd20:	601a      	str	r2, [r3, #0]
}
    fd22:	e7ec      	b.n	fcfe <init+0x22>
    fd24:	20000ed4 	.word	0x20000ed4
    fd28:	20000ed8 	.word	0x20000ed8
    fd2c:	4000d000 	.word	0x4000d000

0000fd30 <get>:
	LL_ASSERT(rng);
    fd30:	b1d0      	cbz	r0, fd68 <get+0x38>
{
    fd32:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    fd36:	4607      	mov	r7, r0
	first = rng->first;
    fd38:	f890 e002 	ldrb.w	lr, [r0, #2]
	last = rng->last;
    fd3c:	78c5      	ldrb	r5, [r0, #3]
	if (first <= last) {
    fd3e:	45ae      	cmp	lr, r5
    fd40:	d82e      	bhi.n	fda0 <get+0x70>
		d = &rand[octets];
    fd42:	440a      	add	r2, r1
		s = &rng->rand[first];
    fd44:	eb00 060e 	add.w	r6, r0, lr
    fd48:	3604      	adds	r6, #4
		avail = last - first;
    fd4a:	eba5 040e 	sub.w	r4, r5, lr
    fd4e:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fd50:	42a1      	cmp	r1, r4
    fd52:	d20f      	bcs.n	fd74 <get+0x44>
			remaining = avail - octets;
    fd54:	b2cb      	uxtb	r3, r1
    fd56:	1ae4      	subs	r4, r4, r3
    fd58:	fa5f fc84 	uxtb.w	ip, r4
			avail = octets;
    fd5c:	461c      	mov	r4, r3
		first += avail;
    fd5e:	44a6      	add	lr, r4
    fd60:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fd64:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fd66:	e00d      	b.n	fd84 <get+0x54>
	LL_ASSERT(rng);
    fd68:	4040      	eors	r0, r0
    fd6a:	f380 8811 	msr	BASEPRI, r0
    fd6e:	f04f 0004 	mov.w	r0, #4
    fd72:	df02      	svc	2
			remaining = 0;
    fd74:	f04f 0c00 	mov.w	ip, #0
    fd78:	e7f1      	b.n	fd5e <get+0x2e>
			*(--d) = *s++;
    fd7a:	7835      	ldrb	r5, [r6, #0]
    fd7c:	f802 5d01 	strb.w	r5, [r2, #-1]!
		while (avail--) {
    fd80:	461c      	mov	r4, r3
			*(--d) = *s++;
    fd82:	3601      	adds	r6, #1
		while (avail--) {
    fd84:	1e63      	subs	r3, r4, #1
    fd86:	b2db      	uxtb	r3, r3
    fd88:	2c00      	cmp	r4, #0
    fd8a:	d1f6      	bne.n	fd7a <get+0x4a>
		rng->first = first;
    fd8c:	f887 e002 	strb.w	lr, [r7, #2]
	if (remaining < rng->threshold) {
    fd90:	787b      	ldrb	r3, [r7, #1]
    fd92:	459c      	cmp	ip, r3
    fd94:	d202      	bcs.n	fd9c <get+0x6c>
		NRF_RNG->TASKS_START = 1;
    fd96:	2201      	movs	r2, #1
    fd98:	4b24      	ldr	r3, [pc, #144]	; (fe2c <get+0xfc>)
    fd9a:	601a      	str	r2, [r3, #0]
}
    fd9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		d = &rand[octets];
    fda0:	440a      	add	r2, r1
		s = &rng->rand[first];
    fda2:	eb00 080e 	add.w	r8, r0, lr
    fda6:	f108 0804 	add.w	r8, r8, #4
		avail = rng->count - first;
    fdaa:	7804      	ldrb	r4, [r0, #0]
    fdac:	eba4 040e 	sub.w	r4, r4, lr
    fdb0:	b2e4      	uxtb	r4, r4
		if (octets < avail) {
    fdb2:	42a1      	cmp	r1, r4
    fdb4:	d20d      	bcs.n	fdd2 <get+0xa2>
			remaining = avail + last - octets;
    fdb6:	eb05 0c04 	add.w	ip, r5, r4
    fdba:	fa5f fc8c 	uxtb.w	ip, ip
    fdbe:	b2cc      	uxtb	r4, r1
    fdc0:	ebac 0c04 	sub.w	ip, ip, r4
    fdc4:	fa5f fc8c 	uxtb.w	ip, ip
			first += avail;
    fdc8:	44a6      	add	lr, r4
    fdca:	fa5f fe8e 	uxtb.w	lr, lr
		octets -= avail;
    fdce:	1b08      	subs	r0, r1, r4
		while (avail--) {
    fdd0:	e00a      	b.n	fde8 <get+0xb8>
			remaining = last;
    fdd2:	46ac      	mov	ip, r5
			first = 0;
    fdd4:	f04f 0e00 	mov.w	lr, #0
    fdd8:	e7f9      	b.n	fdce <get+0x9e>
			*(--d) = *s++;
    fdda:	f898 6000 	ldrb.w	r6, [r8]
    fdde:	f802 6d01 	strb.w	r6, [r2, #-1]!
		while (avail--) {
    fde2:	461c      	mov	r4, r3
			*(--d) = *s++;
    fde4:	f108 0801 	add.w	r8, r8, #1
		while (avail--) {
    fde8:	1e63      	subs	r3, r4, #1
    fdea:	b2db      	uxtb	r3, r3
    fdec:	2c00      	cmp	r4, #0
    fdee:	d1f4      	bne.n	fdda <get+0xaa>
		if (octets && last) {
    fdf0:	b1c8      	cbz	r0, fe26 <get+0xf6>
    fdf2:	b1c5      	cbz	r5, fe26 <get+0xf6>
			s = &rng->rand[0];
    fdf4:	1d3e      	adds	r6, r7, #4
			if (octets < last) {
    fdf6:	42a8      	cmp	r0, r5
    fdf8:	d206      	bcs.n	fe08 <get+0xd8>
				remaining = last - octets;
    fdfa:	fa5f fe80 	uxtb.w	lr, r0
    fdfe:	eba5 040e 	sub.w	r4, r5, lr
    fe02:	fa5f fc84 	uxtb.w	ip, r4
    fe06:	e001      	b.n	fe0c <get+0xdc>
				remaining = 0;
    fe08:	46a4      	mov	ip, r4
	last = rng->last;
    fe0a:	46ae      	mov	lr, r5
			octets -= last;
    fe0c:	eba0 000e 	sub.w	r0, r0, lr
			while (last--) {
    fe10:	4671      	mov	r1, lr
    fe12:	e004      	b.n	fe1e <get+0xee>
				*(--d) = *s++;
    fe14:	7831      	ldrb	r1, [r6, #0]
    fe16:	f802 1d01 	strb.w	r1, [r2, #-1]!
    fe1a:	3601      	adds	r6, #1
			while (last--) {
    fe1c:	4619      	mov	r1, r3
    fe1e:	1e4b      	subs	r3, r1, #1
    fe20:	b2db      	uxtb	r3, r3
    fe22:	2900      	cmp	r1, #0
    fe24:	d1f6      	bne.n	fe14 <get+0xe4>
		rng->first = first;
    fe26:	f887 e002 	strb.w	lr, [r7, #2]
    fe2a:	e7b1      	b.n	fd90 <get+0x60>
    fe2c:	4000d000 	.word	0x4000d000

0000fe30 <rand_init>:
{
    fe30:	b508      	push	{r3, lr}
	init(&rng_thr, context, context_len, threshold);
    fe32:	4613      	mov	r3, r2
    fe34:	460a      	mov	r2, r1
    fe36:	4601      	mov	r1, r0
    fe38:	4801      	ldr	r0, [pc, #4]	; (fe40 <rand_init+0x10>)
    fe3a:	f7ff ff4f 	bl	fcdc <init>
    fe3e:	bd08      	pop	{r3, pc}
    fe40:	20000ed8 	.word	0x20000ed8

0000fe44 <rand_isr_init>:
{
    fe44:	b508      	push	{r3, lr}
	init(&rng_isr, context, context_len, threshold);
    fe46:	4613      	mov	r3, r2
    fe48:	460a      	mov	r2, r1
    fe4a:	4601      	mov	r1, r0
    fe4c:	4801      	ldr	r0, [pc, #4]	; (fe54 <rand_isr_init+0x10>)
    fe4e:	f7ff ff45 	bl	fcdc <init>
    fe52:	bd08      	pop	{r3, pc}
    fe54:	20000ed4 	.word	0x20000ed4

0000fe58 <rand_get>:
{
    fe58:	b508      	push	{r3, lr}
	return get(rng_thr, octets, rand);
    fe5a:	460a      	mov	r2, r1
    fe5c:	4601      	mov	r1, r0
    fe5e:	4b02      	ldr	r3, [pc, #8]	; (fe68 <rand_get+0x10>)
    fe60:	6818      	ldr	r0, [r3, #0]
    fe62:	f7ff ff65 	bl	fd30 <get>
}
    fe66:	bd08      	pop	{r3, pc}
    fe68:	20000ed8 	.word	0x20000ed8

0000fe6c <rand_isr_get>:
{
    fe6c:	b508      	push	{r3, lr}
	return get(rng_isr, octets, rand);
    fe6e:	460a      	mov	r2, r1
    fe70:	4601      	mov	r1, r0
    fe72:	4b02      	ldr	r3, [pc, #8]	; (fe7c <rand_isr_get+0x10>)
    fe74:	6818      	ldr	r0, [r3, #0]
    fe76:	f7ff ff5b 	bl	fd30 <get>
}
    fe7a:	bd08      	pop	{r3, pc}
    fe7c:	20000ed4 	.word	0x20000ed4

0000fe80 <isr_rand>:

void isr_rand(void *param)
{
    fe80:	b508      	push	{r3, lr}
	ARG_UNUSED(param);

	if (NRF_RNG->EVENTS_VALRDY) {
    fe82:	4b10      	ldr	r3, [pc, #64]	; (fec4 <isr_rand+0x44>)
    fe84:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
    fe88:	b903      	cbnz	r3, fe8c <isr_rand+0xc>
    fe8a:	bd08      	pop	{r3, pc}
		int ret;

		ret = isr(rng_isr, true);
    fe8c:	2101      	movs	r1, #1
    fe8e:	4b0e      	ldr	r3, [pc, #56]	; (fec8 <isr_rand+0x48>)
    fe90:	6818      	ldr	r0, [r3, #0]
    fe92:	f7ff fa79 	bl	f388 <isr>
		if (ret != -EBUSY) {
    fe96:	f110 0f10 	cmn.w	r0, #16
    fe9a:	d008      	beq.n	feae <isr_rand+0x2e>
			ret = isr(rng_thr, (ret == -ENOBUFS));
    fe9c:	f110 0f69 	cmn.w	r0, #105	; 0x69
    fea0:	bf14      	ite	ne
    fea2:	2100      	movne	r1, #0
    fea4:	2101      	moveq	r1, #1
    fea6:	4b09      	ldr	r3, [pc, #36]	; (fecc <isr_rand+0x4c>)
    fea8:	6818      	ldr	r0, [r3, #0]
    feaa:	f7ff fa6d 	bl	f388 <isr>
		}

		NRF_RNG->EVENTS_VALRDY = 0;
    feae:	2200      	movs	r2, #0
    feb0:	4b04      	ldr	r3, [pc, #16]	; (fec4 <isr_rand+0x44>)
    feb2:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100

		if (ret != -EBUSY) {
    feb6:	f110 0f10 	cmn.w	r0, #16
    feba:	d0e6      	beq.n	fe8a <isr_rand+0xa>
			NRF_RNG->TASKS_STOP = 1;
    febc:	2201      	movs	r2, #1
    febe:	605a      	str	r2, [r3, #4]
		}
	}
}
    fec0:	e7e3      	b.n	fe8a <isr_rand+0xa>
    fec2:	bf00      	nop
    fec4:	4000d000 	.word	0x4000d000
    fec8:	20000ed4 	.word	0x20000ed4
    fecc:	20000ed8 	.word	0x20000ed8

0000fed0 <ticker_by_slot_get>:
 * Static Functions
 ****************************************************************************/
static u8_t ticker_by_slot_get(struct ticker_node *node, u8_t ticker_id_head,
			       u32_t ticks_slot)
{
	while (ticker_id_head != TICKER_NULL) {
    fed0:	29ff      	cmp	r1, #255	; 0xff
    fed2:	d012      	beq.n	fefa <ticker_by_slot_get+0x2a>
{
    fed4:	b430      	push	{r4, r5}
		struct ticker_node *ticker;
		u32_t ticks_to_expire;

		ticker = &node[ticker_id_head];
    fed6:	eb01 04c1 	add.w	r4, r1, r1, lsl #3
    feda:	00a3      	lsls	r3, r4, #2
    fedc:	18c4      	adds	r4, r0, r3
		ticks_to_expire = ticker->ticks_to_expire;
    fede:	68a5      	ldr	r5, [r4, #8]

		if (ticks_slot <= ticks_to_expire) {
    fee0:	42aa      	cmp	r2, r5
    fee2:	d906      	bls.n	fef2 <ticker_by_slot_get+0x22>
			return TICKER_NULL;
		}

		if (ticker->ticks_slot) {
    fee4:	8ae4      	ldrh	r4, [r4, #22]
    fee6:	b92c      	cbnz	r4, fef4 <ticker_by_slot_get+0x24>
			break;
		}

		ticks_slot -= ticks_to_expire;
    fee8:	1b52      	subs	r2, r2, r5
		ticker_id_head = ticker->next;
    feea:	5cc1      	ldrb	r1, [r0, r3]
	while (ticker_id_head != TICKER_NULL) {
    feec:	29ff      	cmp	r1, #255	; 0xff
    feee:	d1f2      	bne.n	fed6 <ticker_by_slot_get+0x6>
    fef0:	e000      	b.n	fef4 <ticker_by_slot_get+0x24>
			return TICKER_NULL;
    fef2:	21ff      	movs	r1, #255	; 0xff
	}

	return ticker_id_head;
}
    fef4:	4608      	mov	r0, r1
    fef6:	bc30      	pop	{r4, r5}
    fef8:	4770      	bx	lr
    fefa:	4608      	mov	r0, r1
    fefc:	4770      	bx	lr

0000fefe <ticker_by_next_slot_get>:

static void ticker_by_next_slot_get(struct ticker_instance *instance,
				    u8_t *ticker_id_head, u32_t *ticks_current,
				    u32_t *ticks_to_expire)
{
    fefe:	b5f0      	push	{r4, r5, r6, r7, lr}
    ff00:	4694      	mov	ip, r2
	struct ticker_node *ticker;
	struct ticker_node *node;
	u32_t _ticks_to_expire;
	u8_t _ticker_id_head;

	node = instance->node;
    ff02:	6807      	ldr	r7, [r0, #0]

	_ticker_id_head = *ticker_id_head;
    ff04:	f891 e000 	ldrb.w	lr, [r1]
	_ticks_to_expire = *ticks_to_expire;
    ff08:	681e      	ldr	r6, [r3, #0]
	if ((_ticker_id_head == TICKER_NULL) ||
    ff0a:	f1be 0fff 	cmp.w	lr, #255	; 0xff
    ff0e:	d004      	beq.n	ff1a <ticker_by_next_slot_get+0x1c>
	    (*ticks_current != instance->ticks_current)) {
    ff10:	6942      	ldr	r2, [r0, #20]
	if ((_ticker_id_head == TICKER_NULL) ||
    ff12:	f8dc 4000 	ldr.w	r4, [ip]
    ff16:	4294      	cmp	r4, r2
    ff18:	d005      	beq.n	ff26 <ticker_by_next_slot_get+0x28>
		_ticker_id_head = instance->ticker_id_head;
    ff1a:	7e04      	ldrb	r4, [r0, #24]
		*ticks_current = instance->ticks_current;
    ff1c:	6940      	ldr	r0, [r0, #20]
    ff1e:	f8cc 0000 	str.w	r0, [ip]
		_ticks_to_expire = 0;
    ff22:	2600      	movs	r6, #0
    ff24:	e00a      	b.n	ff3c <ticker_by_next_slot_get+0x3e>
	} else {
		ticker = &node[_ticker_id_head];
    ff26:	eb0e 0ece 	add.w	lr, lr, lr, lsl #3
    ff2a:	ea4f 028e 	mov.w	r2, lr, lsl #2
    ff2e:	4696      	mov	lr, r2
    ff30:	18bd      	adds	r5, r7, r2
		_ticker_id_head = ticker->next;
    ff32:	5cbc      	ldrb	r4, [r7, r2]
    ff34:	e002      	b.n	ff3c <ticker_by_next_slot_get+0x3e>
	}

	while ((_ticker_id_head != TICKER_NULL) &&
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
		_ticks_to_expire += ticker->ticks_to_expire;
    ff36:	68a8      	ldr	r0, [r5, #8]
    ff38:	4406      	add	r6, r0
		_ticker_id_head = ticker->next;
    ff3a:	5cbc      	ldrb	r4, [r7, r2]
	while ((_ticker_id_head != TICKER_NULL) &&
    ff3c:	2cff      	cmp	r4, #255	; 0xff
    ff3e:	d006      	beq.n	ff4e <ticker_by_next_slot_get+0x50>
	       ((ticker = &node[_ticker_id_head])->ticks_slot == 0)) {
    ff40:	eb04 00c4 	add.w	r0, r4, r4, lsl #3
    ff44:	0082      	lsls	r2, r0, #2
    ff46:	18bd      	adds	r5, r7, r2
    ff48:	8ae8      	ldrh	r0, [r5, #22]
	while ((_ticker_id_head != TICKER_NULL) &&
    ff4a:	2800      	cmp	r0, #0
    ff4c:	d0f3      	beq.n	ff36 <ticker_by_next_slot_get+0x38>
	}

	if (_ticker_id_head != TICKER_NULL) {
    ff4e:	2cff      	cmp	r4, #255	; 0xff
    ff50:	d001      	beq.n	ff56 <ticker_by_next_slot_get+0x58>
		_ticks_to_expire += ticker->ticks_to_expire;
    ff52:	68aa      	ldr	r2, [r5, #8]
    ff54:	4416      	add	r6, r2
	}

	*ticker_id_head = _ticker_id_head;
    ff56:	700c      	strb	r4, [r1, #0]
	*ticks_to_expire = _ticks_to_expire;
    ff58:	601e      	str	r6, [r3, #0]
    ff5a:	bdf0      	pop	{r4, r5, r6, r7, pc}

0000ff5c <ticker_enqueue>:
}

static u8_t ticker_enqueue(struct ticker_instance *instance, u8_t id)
{
    ff5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
    ff60:	b085      	sub	sp, #20
    ff62:	4681      	mov	r9, r0
    ff64:	9102      	str	r1, [sp, #8]
	u32_t ticks_to_expire;
	u8_t previous;
	u8_t current;
	u8_t collide;

	node = &instance->node[0];
    ff66:	6806      	ldr	r6, [r0, #0]
	ticker_new = &node[id];
    ff68:	eb01 03c1 	add.w	r3, r1, r1, lsl #3
    ff6c:	009b      	lsls	r3, r3, #2
    ff6e:	9303      	str	r3, [sp, #12]
    ff70:	eb06 0a03 	add.w	sl, r6, r3
	ticks_to_expire = ticker_new->ticks_to_expire;
    ff74:	f8da 5008 	ldr.w	r5, [sl, #8]

	collide = ticker_id_slot_previous = TICKER_NULL;
	current = instance->ticker_id_head;
    ff78:	f890 8018 	ldrb.w	r8, [r0, #24]
	previous = current;
	ticks_slot_previous = instance->ticks_slot_previous;
    ff7c:	8b47      	ldrh	r7, [r0, #26]
	current = instance->ticker_id_head;
    ff7e:	4644      	mov	r4, r8
	collide = ticker_id_slot_previous = TICKER_NULL;
    ff80:	23ff      	movs	r3, #255	; 0xff
    ff82:	9301      	str	r3, [sp, #4]
	while ((current != TICKER_NULL) &&
    ff84:	e004      	b.n	ff90 <ticker_enqueue+0x34>

		if (ticker_current->ticks_slot != 0) {
			ticks_slot_previous = ticker_current->ticks_slot;
			ticker_id_slot_previous = current;
		} else {
			if (ticks_slot_previous > ticks_to_expire_current) {
    ff86:	4297      	cmp	r7, r2
    ff88:	d912      	bls.n	ffb0 <ticker_enqueue+0x54>
				ticks_slot_previous -= ticks_to_expire_current;
    ff8a:	1abf      	subs	r7, r7, r2
			} else {
				ticks_slot_previous = 0;
			}
		}
		previous = current;
    ff8c:	46a0      	mov	r8, r4
		current = ticker_current->next;
    ff8e:	5cf4      	ldrb	r4, [r6, r3]
	while ((current != TICKER_NULL) &&
    ff90:	2cff      	cmp	r4, #255	; 0xff
    ff92:	d00f      	beq.n	ffb4 <ticker_enqueue+0x58>
		 (ticker_current = &node[current])->ticks_to_expire))) {
    ff94:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
    ff98:	0093      	lsls	r3, r2, #2
    ff9a:	18f1      	adds	r1, r6, r3
		(ticks_to_expire_current =
    ff9c:	688a      	ldr	r2, [r1, #8]
	while ((current != TICKER_NULL) &&
    ff9e:	4295      	cmp	r5, r2
    ffa0:	d908      	bls.n	ffb4 <ticker_enqueue+0x58>
		ticks_to_expire -= ticks_to_expire_current;
    ffa2:	1aad      	subs	r5, r5, r2
		if (ticker_current->ticks_slot != 0) {
    ffa4:	8ac9      	ldrh	r1, [r1, #22]
    ffa6:	2900      	cmp	r1, #0
    ffa8:	d0ed      	beq.n	ff86 <ticker_enqueue+0x2a>
			ticks_slot_previous = ticker_current->ticks_slot;
    ffaa:	460f      	mov	r7, r1
			ticker_id_slot_previous = current;
    ffac:	9401      	str	r4, [sp, #4]
    ffae:	e7ed      	b.n	ff8c <ticker_enqueue+0x30>
				ticks_slot_previous = 0;
    ffb0:	2700      	movs	r7, #0
    ffb2:	e7eb      	b.n	ff8c <ticker_enqueue+0x30>
	}

	collide = ticker_by_slot_get(&node[0], current,
				     ticks_to_expire + ticker_new->ticks_slot);
    ffb4:	f8ba b016 	ldrh.w	fp, [sl, #22]
	collide = ticker_by_slot_get(&node[0], current,
    ffb8:	eb05 020b 	add.w	r2, r5, fp
    ffbc:	4621      	mov	r1, r4
    ffbe:	4630      	mov	r0, r6
    ffc0:	f7ff ff86 	bl	fed0 <ticker_by_slot_get>

	if ((ticker_new->ticks_slot == 0) ||
    ffc4:	f1bb 0f00 	cmp.w	fp, #0
    ffc8:	d007      	beq.n	ffda <ticker_enqueue+0x7e>
    ffca:	42af      	cmp	r7, r5
    ffcc:	d801      	bhi.n	ffd2 <ticker_enqueue+0x76>
	    ((ticks_slot_previous <= ticks_to_expire) &&
    ffce:	28ff      	cmp	r0, #255	; 0xff
    ffd0:	d003      	beq.n	ffda <ticker_enqueue+0x7e>

		if (current != TICKER_NULL) {
			node[current].ticks_to_expire -= ticks_to_expire;
		}
	} else {
		if (ticks_slot_previous > ticks_to_expire) {
    ffd2:	42af      	cmp	r7, r5
    ffd4:	d918      	bls.n	10008 <__kernel_ram_size+0x8>
			id = ticker_id_slot_previous;
    ffd6:	9801      	ldr	r0, [sp, #4]
    ffd8:	e016      	b.n	10008 <__kernel_ram_size+0x8>
		ticker_new->ticks_to_expire = ticks_to_expire;
    ffda:	f8ca 5008 	str.w	r5, [sl, #8]
		ticker_new->next = current;
    ffde:	9b03      	ldr	r3, [sp, #12]
    ffe0:	54f4      	strb	r4, [r6, r3]
		if (previous == current) {
    ffe2:	45a0      	cmp	r8, r4
    ffe4:	d013      	beq.n	1000e <__kernel_ram_size+0xe>
			node[previous].next = id;
    ffe6:	eb08 08c8 	add.w	r8, r8, r8, lsl #3
    ffea:	ea4f 0388 	mov.w	r3, r8, lsl #2
    ffee:	f89d 2008 	ldrb.w	r2, [sp, #8]
    fff2:	54f2      	strb	r2, [r6, r3]
		if (current != TICKER_NULL) {
    fff4:	2cff      	cmp	r4, #255	; 0xff
    fff6:	d00f      	beq.n	10018 <__kernel_ram_size+0x18>
			node[current].ticks_to_expire -= ticks_to_expire;
    fff8:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
    fffc:	00a3      	lsls	r3, r4, #2
    fffe:	441e      	add	r6, r3
   10000:	68b3      	ldr	r3, [r6, #8]
   10002:	1b5d      	subs	r5, r3, r5
   10004:	60b5      	str	r5, [r6, #8]
   10006:	9802      	ldr	r0, [sp, #8]
			id = collide;
		}
	}

	return id;
}
   10008:	b005      	add	sp, #20
   1000a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			instance->ticker_id_head = id;
   1000e:	f89d 3008 	ldrb.w	r3, [sp, #8]
   10012:	f889 3018 	strb.w	r3, [r9, #24]
   10016:	e7ed      	b.n	fff4 <ticker_enqueue+0x98>
   10018:	9802      	ldr	r0, [sp, #8]
   1001a:	e7f5      	b.n	10008 <__kernel_ram_size+0x8>

0001001c <ticker_dequeue>:

static u32_t ticker_dequeue(struct ticker_instance *instance, u8_t id)
{
   1001c:	b4f0      	push	{r4, r5, r6, r7}
	u32_t timeout;
	u8_t current;
	u32_t total;

	/* find the ticker's position in ticker list */
	node = &instance->node[0];
   1001e:	6806      	ldr	r6, [r0, #0]
	previous = instance->ticker_id_head;
   10020:	7e07      	ldrb	r7, [r0, #24]
	current = previous;
   10022:	463b      	mov	r3, r7
	total = 0;
   10024:	2500      	movs	r5, #0
	ticker_current = 0;
   10026:	462c      	mov	r4, r5
	while (current != TICKER_NULL) {
   10028:	2bff      	cmp	r3, #255	; 0xff
   1002a:	d00a      	beq.n	10042 <ticker_dequeue+0x26>

		ticker_current = &node[current];
   1002c:	eb03 04c3 	add.w	r4, r3, r3, lsl #3
   10030:	00a2      	lsls	r2, r4, #2
   10032:	18b4      	adds	r4, r6, r2

		if (current == id) {
   10034:	428b      	cmp	r3, r1
   10036:	d004      	beq.n	10042 <ticker_dequeue+0x26>
			break;
		}

		total += ticker_current->ticks_to_expire;
   10038:	68a7      	ldr	r7, [r4, #8]
   1003a:	443d      	add	r5, r7
		previous = current;
   1003c:	461f      	mov	r7, r3
		current = ticker_current->next;
   1003e:	5cb3      	ldrb	r3, [r6, r2]
   10040:	e7f2      	b.n	10028 <ticker_dequeue+0xc>
	}

	/* ticker not in active list */
	if (current == TICKER_NULL) {
   10042:	2bff      	cmp	r3, #255	; 0xff
   10044:	d017      	beq.n	10076 <ticker_dequeue+0x5a>
		return 0;
	}

	/* ticker is the first in the list */
	if (previous == current) {
   10046:	429f      	cmp	r7, r3
   10048:	d012      	beq.n	10070 <ticker_dequeue+0x54>
		instance->ticker_id_head = ticker_current->next;
	}

	/* remaining timeout between next timeout */
	timeout = ticker_current->ticks_to_expire;
   1004a:	68a0      	ldr	r0, [r4, #8]

	/* link previous ticker with next of this ticker
	 * i.e. removing the ticker from list
	 */
	node[previous].next = ticker_current->next;
   1004c:	eb07 07c7 	add.w	r7, r7, r7, lsl #3
   10050:	00bb      	lsls	r3, r7, #2
   10052:	7822      	ldrb	r2, [r4, #0]
   10054:	54f2      	strb	r2, [r6, r3]

	/* if this is not the last ticker, increment the
	 * next ticker by this ticker timeout
	 */
	if (ticker_current->next != TICKER_NULL) {
   10056:	7823      	ldrb	r3, [r4, #0]
   10058:	2bff      	cmp	r3, #255	; 0xff
   1005a:	d006      	beq.n	1006a <ticker_dequeue+0x4e>
		node[ticker_current->next].ticks_to_expire += timeout;
   1005c:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10060:	009a      	lsls	r2, r3, #2
   10062:	4416      	add	r6, r2
   10064:	68b3      	ldr	r3, [r6, #8]
   10066:	4403      	add	r3, r0
   10068:	60b3      	str	r3, [r6, #8]
	}

	return (total + timeout);
   1006a:	4428      	add	r0, r5
}
   1006c:	bcf0      	pop	{r4, r5, r6, r7}
   1006e:	4770      	bx	lr
		instance->ticker_id_head = ticker_current->next;
   10070:	7823      	ldrb	r3, [r4, #0]
   10072:	7603      	strb	r3, [r0, #24]
   10074:	e7e9      	b.n	1004a <ticker_dequeue+0x2e>
		return 0;
   10076:	2000      	movs	r0, #0
   10078:	e7f8      	b.n	1006c <ticker_dequeue+0x50>
	...

0001007c <ticker_remainder_inc>:
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
}

static u8_t ticker_remainder_inc(struct ticker_node *ticker)
{
	ticker->remainder_current += ticker->remainder_periodic;
   1007c:	69c3      	ldr	r3, [r0, #28]
   1007e:	6a02      	ldr	r2, [r0, #32]
   10080:	4413      	add	r3, r2
   10082:	6203      	str	r3, [r0, #32]
	if ((ticker->remainder_current < BIT(31)) &&
   10084:	4a05      	ldr	r2, [pc, #20]	; (1009c <ticker_remainder_inc+0x20>)
   10086:	441a      	add	r2, r3
   10088:	4905      	ldr	r1, [pc, #20]	; (100a0 <ticker_remainder_inc+0x24>)
   1008a:	428a      	cmp	r2, r1
   1008c:	d804      	bhi.n	10098 <ticker_remainder_inc+0x1c>
	    (ticker->remainder_current > (30517578UL / 2))) {
		ticker->remainder_current -= 30517578UL;
   1008e:	4a05      	ldr	r2, [pc, #20]	; (100a4 <ticker_remainder_inc+0x28>)
   10090:	441a      	add	r2, r3
   10092:	6202      	str	r2, [r0, #32]
		return 1;
   10094:	2001      	movs	r0, #1
   10096:	4770      	bx	lr
	}
	return 0;
   10098:	2000      	movs	r0, #0
}
   1009a:	4770      	bx	lr
   1009c:	ff172b5a 	.word	0xff172b5a
   100a0:	7f172b59 	.word	0x7f172b59
   100a4:	fe2e56b6 	.word	0xfe2e56b6

000100a8 <ticker_remainder_dec>:

static u8_t ticker_remainder_dec(struct ticker_node *ticker)
{
   100a8:	4603      	mov	r3, r0
	u8_t decrement = 0;

	if ((ticker->remainder_current >= BIT(31)) ||
   100aa:	6a01      	ldr	r1, [r0, #32]
   100ac:	4a07      	ldr	r2, [pc, #28]	; (100cc <ticker_remainder_dec+0x24>)
   100ae:	440a      	add	r2, r1
   100b0:	4807      	ldr	r0, [pc, #28]	; (100d0 <ticker_remainder_dec+0x28>)
   100b2:	4282      	cmp	r2, r0
   100b4:	d908      	bls.n	100c8 <ticker_remainder_dec+0x20>
	    (ticker->remainder_current <= (30517578UL / 2))) {
		decrement++;
		ticker->remainder_current += 30517578UL;
   100b6:	4a07      	ldr	r2, [pc, #28]	; (100d4 <ticker_remainder_dec+0x2c>)
   100b8:	440a      	add	r2, r1
   100ba:	621a      	str	r2, [r3, #32]
		decrement++;
   100bc:	2001      	movs	r0, #1
	}
	ticker->remainder_current -= ticker->remainder_periodic;
   100be:	69d9      	ldr	r1, [r3, #28]
   100c0:	6a1a      	ldr	r2, [r3, #32]
   100c2:	1a52      	subs	r2, r2, r1
   100c4:	621a      	str	r2, [r3, #32]

	return decrement;
}
   100c6:	4770      	bx	lr
	u8_t decrement = 0;
   100c8:	2000      	movs	r0, #0
   100ca:	e7f8      	b.n	100be <ticker_remainder_dec+0x16>
   100cc:	ff172b5a 	.word	0xff172b5a
   100d0:	7f172b59 	.word	0x7f172b59
   100d4:	01d1a94a 	.word	0x01d1a94a

000100d8 <ticker_job_op_cb>:

static void ticker_job_op_cb(struct ticker_user_op *user_op, u32_t status)
{
   100d8:	b510      	push	{r4, lr}
	user_op->op = TICKER_USER_OP_TYPE_NONE;
   100da:	2300      	movs	r3, #0
   100dc:	7003      	strb	r3, [r0, #0]
	user_op->status = status;
   100de:	6201      	str	r1, [r0, #32]
	if (user_op->fp_op_func) {
   100e0:	6a44      	ldr	r4, [r0, #36]	; 0x24
   100e2:	b11c      	cbz	r4, 100ec <ticker_job_op_cb+0x14>
   100e4:	460a      	mov	r2, r1
		user_op->fp_op_func(user_op->status, user_op->op_context);
   100e6:	6a81      	ldr	r1, [r0, #40]	; 0x28
   100e8:	4610      	mov	r0, r2
   100ea:	47a0      	blx	r4
   100ec:	bd10      	pop	{r4, pc}

000100ee <ticker_instance1_cmp_set>:
{
	cntr_cmp_set(0, value);
}

static void ticker_instance1_cmp_set(u32_t value)
{
   100ee:	b508      	push	{r3, lr}
	cntr_cmp_set(1, value);
   100f0:	4601      	mov	r1, r0
   100f2:	2001      	movs	r0, #1
   100f4:	f7fe fd3e 	bl	eb74 <cntr_cmp_set>
   100f8:	bd08      	pop	{r3, pc}

000100fa <ticker_instance0_cmp_set>:
{
   100fa:	b508      	push	{r3, lr}
	cntr_cmp_set(0, value);
   100fc:	4601      	mov	r1, r0
   100fe:	2000      	movs	r0, #0
   10100:	f7fe fd38 	bl	eb74 <cntr_cmp_set>
   10104:	bd08      	pop	{r3, pc}
	...

00010108 <ticker_instance1_sched>:
{
   10108:	b508      	push	{r3, lr}
	switch (caller_id) {
   1010a:	2803      	cmp	r0, #3
   1010c:	d841      	bhi.n	10192 <ticker_instance1_sched+0x8a>
   1010e:	e8df f000 	tbb	[pc, r0]
   10112:	1002      	.short	0x1002
   10114:	331d      	.short	0x331d
		switch (callee_id) {
   10116:	2901      	cmp	r1, #1
   10118:	d105      	bne.n	10126 <ticker_instance1_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   1011a:	4b21      	ldr	r3, [pc, #132]	; (101a0 <ticker_instance1_sched+0x98>)
   1011c:	2102      	movs	r1, #2
   1011e:	2000      	movs	r0, #0
   10120:	f7fe fb10 	bl	e744 <mayfly_enqueue>
		break;
   10124:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10126:	4040      	eors	r0, r0
   10128:	f380 8811 	msr	BASEPRI, r0
   1012c:	f04f 0004 	mov.w	r0, #4
   10130:	df02      	svc	2
		switch (callee_id) {
   10132:	2902      	cmp	r1, #2
   10134:	d104      	bne.n	10140 <ticker_instance1_sched+0x38>
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10136:	4b1b      	ldr	r3, [pc, #108]	; (101a4 <ticker_instance1_sched+0x9c>)
   10138:	4608      	mov	r0, r1
   1013a:	f7fe fb03 	bl	e744 <mayfly_enqueue>
		break;
   1013e:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10140:	4040      	eors	r0, r0
   10142:	f380 8811 	msr	BASEPRI, r0
   10146:	f04f 0004 	mov.w	r0, #4
   1014a:	df02      	svc	2
		switch (callee_id) {
   1014c:	2901      	cmp	r1, #1
   1014e:	d007      	beq.n	10160 <ticker_instance1_sched+0x58>
   10150:	2902      	cmp	r1, #2
   10152:	d00b      	beq.n	1016c <ticker_instance1_sched+0x64>
			LL_ASSERT(0);
   10154:	4040      	eors	r0, r0
   10156:	f380 8811 	msr	BASEPRI, r0
   1015a:	f04f 0004 	mov.w	r0, #4
   1015e:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   10160:	4b11      	ldr	r3, [pc, #68]	; (101a8 <ticker_instance1_sched+0xa0>)
   10162:	2102      	movs	r1, #2
   10164:	4608      	mov	r0, r1
   10166:	f7fe faed 	bl	e744 <mayfly_enqueue>
		break;
   1016a:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_2,
   1016c:	4b0f      	ldr	r3, [pc, #60]	; (101ac <ticker_instance1_sched+0xa4>)
   1016e:	2102      	movs	r1, #2
   10170:	4608      	mov	r0, r1
   10172:	f7fe fae7 	bl	e744 <mayfly_enqueue>
		break;
   10176:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   10178:	2902      	cmp	r1, #2
   1017a:	d104      	bne.n	10186 <ticker_instance1_sched+0x7e>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   1017c:	4b0c      	ldr	r3, [pc, #48]	; (101b0 <ticker_instance1_sched+0xa8>)
   1017e:	2003      	movs	r0, #3
   10180:	f7fe fae0 	bl	e744 <mayfly_enqueue>
		break;
   10184:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10186:	4040      	eors	r0, r0
   10188:	f380 8811 	msr	BASEPRI, r0
   1018c:	f04f 0004 	mov.w	r0, #4
   10190:	df02      	svc	2
		LL_ASSERT(0);
   10192:	4040      	eors	r0, r0
   10194:	f380 8811 	msr	BASEPRI, r0
   10198:	f04f 0004 	mov.w	r0, #4
   1019c:	df02      	svc	2
   1019e:	bf00      	nop
   101a0:	2000bc08 	.word	0x2000bc08
   101a4:	2000bc18 	.word	0x2000bc18
   101a8:	2000bc28 	.word	0x2000bc28
   101ac:	2000bc38 	.word	0x2000bc38
   101b0:	2000bc48 	.word	0x2000bc48

000101b4 <ticker_instance1_caller_id_get>:
	switch (user_id) {
   101b4:	1e83      	subs	r3, r0, #2
   101b6:	2b01      	cmp	r3, #1
   101b8:	d800      	bhi.n	101bc <ticker_instance1_caller_id_get+0x8>
}
   101ba:	4770      	bx	lr
		LL_ASSERT(0);
   101bc:	4040      	eors	r0, r0
   101be:	f380 8811 	msr	BASEPRI, r0
   101c2:	f04f 0004 	mov.w	r0, #4
   101c6:	df02      	svc	2

000101c8 <ticker_instance0_sched>:
{
   101c8:	b508      	push	{r3, lr}
	switch (caller_id) {
   101ca:	2803      	cmp	r0, #3
   101cc:	d843      	bhi.n	10256 <ticker_instance0_sched+0x8e>
   101ce:	e8df f000 	tbb	[pc, r0]
   101d2:	1002      	.short	0x1002
   101d4:	341e      	.short	0x341e
		switch (callee_id) {
   101d6:	2901      	cmp	r1, #1
   101d8:	d105      	bne.n	101e6 <ticker_instance0_sched+0x1e>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   101da:	4b22      	ldr	r3, [pc, #136]	; (10264 <ticker_instance0_sched+0x9c>)
   101dc:	2100      	movs	r1, #0
   101de:	4608      	mov	r0, r1
   101e0:	f7fe fab0 	bl	e744 <mayfly_enqueue>
		break;
   101e4:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   101e6:	4040      	eors	r0, r0
   101e8:	f380 8811 	msr	BASEPRI, r0
   101ec:	f04f 0004 	mov.w	r0, #4
   101f0:	df02      	svc	2
		switch (callee_id) {
   101f2:	2902      	cmp	r1, #2
   101f4:	d105      	bne.n	10202 <ticker_instance0_sched+0x3a>
			mayfly_enqueue(MAYFLY_CALL_ID_0,
   101f6:	4b1c      	ldr	r3, [pc, #112]	; (10268 <ticker_instance0_sched+0xa0>)
   101f8:	2101      	movs	r1, #1
   101fa:	2000      	movs	r0, #0
   101fc:	f7fe faa2 	bl	e744 <mayfly_enqueue>
		break;
   10200:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   10202:	4040      	eors	r0, r0
   10204:	f380 8811 	msr	BASEPRI, r0
   10208:	f04f 0004 	mov.w	r0, #4
   1020c:	df02      	svc	2
		switch (callee_id) {
   1020e:	2901      	cmp	r1, #1
   10210:	d007      	beq.n	10222 <ticker_instance0_sched+0x5a>
   10212:	2902      	cmp	r1, #2
   10214:	d00b      	beq.n	1022e <ticker_instance0_sched+0x66>
			LL_ASSERT(0);
   10216:	4040      	eors	r0, r0
   10218:	f380 8811 	msr	BASEPRI, r0
   1021c:	f04f 0004 	mov.w	r0, #4
   10220:	df02      	svc	2
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   10222:	4b12      	ldr	r3, [pc, #72]	; (1026c <ticker_instance0_sched+0xa4>)
   10224:	2100      	movs	r1, #0
   10226:	2001      	movs	r0, #1
   10228:	f7fe fa8c 	bl	e744 <mayfly_enqueue>
		break;
   1022c:	bd08      	pop	{r3, pc}
			mayfly_enqueue(MAYFLY_CALL_ID_1,
   1022e:	4b10      	ldr	r3, [pc, #64]	; (10270 <ticker_instance0_sched+0xa8>)
   10230:	2101      	movs	r1, #1
   10232:	4608      	mov	r0, r1
   10234:	f7fe fa86 	bl	e744 <mayfly_enqueue>
		break;
   10238:	bd08      	pop	{r3, pc}
		switch (callee_id) {
   1023a:	2902      	cmp	r1, #2
   1023c:	d105      	bne.n	1024a <ticker_instance0_sched+0x82>
			mayfly_enqueue(MAYFLY_CALL_ID_PROGRAM,
   1023e:	4b0d      	ldr	r3, [pc, #52]	; (10274 <ticker_instance0_sched+0xac>)
   10240:	2101      	movs	r1, #1
   10242:	2003      	movs	r0, #3
   10244:	f7fe fa7e 	bl	e744 <mayfly_enqueue>
		break;
   10248:	bd08      	pop	{r3, pc}
			LL_ASSERT(0);
   1024a:	4040      	eors	r0, r0
   1024c:	f380 8811 	msr	BASEPRI, r0
   10250:	f04f 0004 	mov.w	r0, #4
   10254:	df02      	svc	2
		LL_ASSERT(0);
   10256:	4040      	eors	r0, r0
   10258:	f380 8811 	msr	BASEPRI, r0
   1025c:	f04f 0004 	mov.w	r0, #4
   10260:	df02      	svc	2
   10262:	bf00      	nop
   10264:	2000bbb8 	.word	0x2000bbb8
   10268:	2000bbc8 	.word	0x2000bbc8
   1026c:	2000bbd8 	.word	0x2000bbd8
   10270:	2000bbe8 	.word	0x2000bbe8
   10274:	2000bbf8 	.word	0x2000bbf8

00010278 <ticker_instance0_caller_id_get>:
	switch (user_id) {
   10278:	2801      	cmp	r0, #1
   1027a:	d00a      	beq.n	10292 <ticker_instance0_caller_id_get+0x1a>
   1027c:	b138      	cbz	r0, 1028e <ticker_instance0_caller_id_get+0x16>
   1027e:	2803      	cmp	r0, #3
   10280:	d008      	beq.n	10294 <ticker_instance0_caller_id_get+0x1c>
		LL_ASSERT(0);
   10282:	4040      	eors	r0, r0
   10284:	f380 8811 	msr	BASEPRI, r0
   10288:	f04f 0004 	mov.w	r0, #4
   1028c:	df02      	svc	2
		return CALL_ID_WORKER;
   1028e:	2001      	movs	r0, #1
   10290:	4770      	bx	lr
		return CALL_ID_JOB;
   10292:	2002      	movs	r0, #2
}
   10294:	4770      	bx	lr
	...

00010298 <ticker_init>:
/*****************************************************************************
 * Public Interface
 ****************************************************************************/
u32_t ticker_init(u8_t instance_index, u8_t count_node, void *node,
		  u8_t count_user, void *user, u8_t count_op, void *user_op)
{
   10298:	b5f0      	push	{r4, r5, r6, r7, lr}
   1029a:	9d05      	ldr	r5, [sp, #20]
   1029c:	f89d 4018 	ldrb.w	r4, [sp, #24]
	    (sizeof(struct ticker_user) != TICKER_USER_T_SIZE) ||
	    (sizeof(struct ticker_user_op) != TICKER_USER_OP_T_SIZE)) {
		return TICKER_STATUS_FAILURE;
	}

	switch (instance_index) {
   102a0:	4606      	mov	r6, r0
   102a2:	b118      	cbz	r0, 102ac <ticker_init+0x14>
   102a4:	2801      	cmp	r0, #1
   102a6:	d019      	beq.n	102dc <ticker_init+0x44>
		instance->fp_sched = ticker_instance1_sched;
		instance->fp_cmp_set = ticker_instance1_cmp_set;
		break;

	default:
		return TICKER_STATUS_FAILURE;
   102a8:	2001      	movs	r0, #1
   102aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
		instance->fp_caller_id_get = ticker_instance0_caller_id_get;
   102ac:	202c      	movs	r0, #44	; 0x2c
   102ae:	4f20      	ldr	r7, [pc, #128]	; (10330 <ticker_init+0x98>)
   102b0:	fb00 7006 	mla	r0, r0, r6, r7
   102b4:	4f1f      	ldr	r7, [pc, #124]	; (10334 <ticker_init+0x9c>)
   102b6:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance0_sched;
   102b8:	4f1f      	ldr	r7, [pc, #124]	; (10338 <ticker_init+0xa0>)
   102ba:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance0_cmp_set;
   102bc:	4f1f      	ldr	r7, [pc, #124]	; (1033c <ticker_init+0xa4>)
   102be:	6287      	str	r7, [r0, #40]	; 0x28
	}

	instance->count_node = count_node;
   102c0:	f8df e06c 	ldr.w	lr, [pc, #108]	; 10330 <ticker_init+0x98>
   102c4:	202c      	movs	r0, #44	; 0x2c
   102c6:	fb00 f006 	mul.w	r0, r0, r6
   102ca:	eb0e 0700 	add.w	r7, lr, r0
   102ce:	7239      	strb	r1, [r7, #8]
	instance->node = node;
   102d0:	f84e 2000 	str.w	r2, [lr, r0]

	instance->count_user = count_user;
   102d4:	727b      	strb	r3, [r7, #9]
	instance->user = user;
   102d6:	607d      	str	r5, [r7, #4]
	struct ticker_user_op *user_op_ = (void *)user_op;
   102d8:	9907      	ldr	r1, [sp, #28]

	/** @todo check if enough ticker_user_op supplied */

	users = &instance->user[0];
	while (count_user--) {
   102da:	e015      	b.n	10308 <ticker_init+0x70>
		instance->fp_caller_id_get = ticker_instance1_caller_id_get;
   102dc:	202c      	movs	r0, #44	; 0x2c
   102de:	4f14      	ldr	r7, [pc, #80]	; (10330 <ticker_init+0x98>)
   102e0:	fb00 7006 	mla	r0, r0, r6, r7
   102e4:	4f16      	ldr	r7, [pc, #88]	; (10340 <ticker_init+0xa8>)
   102e6:	6207      	str	r7, [r0, #32]
		instance->fp_sched = ticker_instance1_sched;
   102e8:	4f16      	ldr	r7, [pc, #88]	; (10344 <ticker_init+0xac>)
   102ea:	6247      	str	r7, [r0, #36]	; 0x24
		instance->fp_cmp_set = ticker_instance1_cmp_set;
   102ec:	4f16      	ldr	r7, [pc, #88]	; (10348 <ticker_init+0xb0>)
   102ee:	6287      	str	r7, [r0, #40]	; 0x28
		break;
   102f0:	e7e6      	b.n	102c0 <ticker_init+0x28>
		users[count_user].user_op = user_op_;
   102f2:	eb05 03c2 	add.w	r3, r5, r2, lsl #3
   102f6:	6059      	str	r1, [r3, #4]
		user_op_ += users[count_user].count_user_op;
   102f8:	f815 3032 	ldrb.w	r3, [r5, r2, lsl #3]
   102fc:	202c      	movs	r0, #44	; 0x2c
   102fe:	fb00 1103 	mla	r1, r0, r3, r1
		count_op -= users[count_user].count_user_op;
   10302:	1ae3      	subs	r3, r4, r3
   10304:	b2dc      	uxtb	r4, r3
	while (count_user--) {
   10306:	4613      	mov	r3, r2
   10308:	1e5a      	subs	r2, r3, #1
   1030a:	b2d2      	uxtb	r2, r2
   1030c:	2b00      	cmp	r3, #0
   1030e:	d1f0      	bne.n	102f2 <ticker_init+0x5a>
	}

	if (count_op) {
   10310:	b964      	cbnz	r4, 1032c <ticker_init+0x94>
		return TICKER_STATUS_FAILURE;
	}

	instance->ticker_id_head = TICKER_NULL;
   10312:	222c      	movs	r2, #44	; 0x2c
   10314:	4b06      	ldr	r3, [pc, #24]	; (10330 <ticker_init+0x98>)
   10316:	fb02 3606 	mla	r6, r2, r6, r3
   1031a:	23ff      	movs	r3, #255	; 0xff
   1031c:	7633      	strb	r3, [r6, #24]
	instance->ticker_id_slot_previous = TICKER_NULL;
   1031e:	7673      	strb	r3, [r6, #25]
	instance->ticks_slot_previous = 0;
   10320:	2000      	movs	r0, #0
   10322:	8370      	strh	r0, [r6, #26]
	instance->ticks_current = 0;
   10324:	6170      	str	r0, [r6, #20]
	instance->ticks_elapsed_first = 0;
   10326:	72b0      	strb	r0, [r6, #10]
	instance->ticks_elapsed_last = 0;
   10328:	72f0      	strb	r0, [r6, #11]

	return TICKER_STATUS_SUCCESS;
   1032a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return TICKER_STATUS_FAILURE;
   1032c:	2001      	movs	r0, #1
}
   1032e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   10330:	20000edc 	.word	0x20000edc
   10334:	00010279 	.word	0x00010279
   10338:	000101c9 	.word	0x000101c9
   1033c:	000100fb 	.word	0x000100fb
   10340:	000101b5 	.word	0x000101b5
   10344:	00010109 	.word	0x00010109
   10348:	000100ef 	.word	0x000100ef

0001034c <ticker_trigger>:
{
	return !!(_instance[instance_index].count_node);
}

void ticker_trigger(u8_t instance_index)
{
   1034c:	b508      	push	{r3, lr}
	DEBUG_TICKER_ISR(1);

	if (_instance[instance_index].fp_sched) {
   1034e:	232c      	movs	r3, #44	; 0x2c
   10350:	4a04      	ldr	r2, [pc, #16]	; (10364 <ticker_trigger+0x18>)
   10352:	fb03 2000 	mla	r0, r3, r0, r2
   10356:	6a43      	ldr	r3, [r0, #36]	; 0x24
   10358:	b11b      	cbz	r3, 10362 <ticker_trigger+0x16>
		_instance[instance_index].fp_sched(CALL_ID_TRIGGER,
   1035a:	2201      	movs	r2, #1
   1035c:	4611      	mov	r1, r2
   1035e:	2000      	movs	r0, #0
   10360:	4798      	blx	r3
   10362:	bd08      	pop	{r3, pc}
   10364:	20000edc 	.word	0x20000edc

00010368 <ticker_start>:
u32_t ticker_start(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		   u32_t ticks_anchor, u32_t ticks_first, u32_t ticks_periodic,
		   u32_t remainder_periodic, u16_t lazy, u16_t ticks_slot,
		   ticker_timeout_func ticker_timeout_func, void *context,
		   ticker_op_func fp_op_func, void *op_context)
{
   10368:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1036c:	242c      	movs	r4, #44	; 0x2c
   1036e:	4d24      	ldr	r5, [pc, #144]	; (10400 <ticker_start+0x98>)
   10370:	fb04 5400 	mla	r4, r4, r0, r5
   10374:	6866      	ldr	r6, [r4, #4]
   10376:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1037a:	f89e 4003 	ldrb.w	r4, [lr, #3]
   1037e:	1c65      	adds	r5, r4, #1
   10380:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   10382:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10386:	42b5      	cmp	r5, r6
   10388:	d300      	bcc.n	1038c <ticker_start+0x24>
		last = 0;
   1038a:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   1038c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10390:	42b5      	cmp	r5, r6
   10392:	d032      	beq.n	103fa <ticker_start+0x92>
   10394:	469c      	mov	ip, r3
   10396:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10398:	f8de 3004 	ldr.w	r3, [lr, #4]
   1039c:	f04f 082c 	mov.w	r8, #44	; 0x2c
   103a0:	fb08 f604 	mul.w	r6, r8, r4
   103a4:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_START;
   103a6:	2003      	movs	r0, #3
   103a8:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   103aa:	7062      	strb	r2, [r4, #1]
	user_op->params.start.ticks_at_start = ticks_anchor;
   103ac:	f8c4 c004 	str.w	ip, [r4, #4]
	user_op->params.start.ticks_first = ticks_first;
   103b0:	9b06      	ldr	r3, [sp, #24]
   103b2:	60a3      	str	r3, [r4, #8]
	user_op->params.start.ticks_periodic = ticks_periodic;
   103b4:	9b07      	ldr	r3, [sp, #28]
   103b6:	60e3      	str	r3, [r4, #12]
	user_op->params.start.remainder_periodic = remainder_periodic;
   103b8:	9b08      	ldr	r3, [sp, #32]
   103ba:	6123      	str	r3, [r4, #16]
	user_op->params.start.ticks_slot = ticks_slot;
   103bc:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   103c0:	82e3      	strh	r3, [r4, #22]
	user_op->params.start.lazy = lazy;
   103c2:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   103c6:	82a3      	strh	r3, [r4, #20]
	user_op->params.start.fp_timeout_func = ticker_timeout_func;
   103c8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   103ca:	61a3      	str	r3, [r4, #24]
	user_op->params.start.context = context;
   103cc:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   103ce:	61e3      	str	r3, [r4, #28]
	user_op->status = TICKER_STATUS_BUSY;
   103d0:	2602      	movs	r6, #2
   103d2:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   103d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   103d6:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   103d8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   103da:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   103dc:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   103e0:	4b07      	ldr	r3, [pc, #28]	; (10400 <ticker_start+0x98>)
   103e2:	fb08 3307 	mla	r3, r8, r7, r3
   103e6:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   103e8:	6a1b      	ldr	r3, [r3, #32]
   103ea:	4608      	mov	r0, r1
   103ec:	4798      	blx	r3
   103ee:	2200      	movs	r2, #0
   103f0:	4631      	mov	r1, r6
   103f2:	47a8      	blx	r5

	return user_op->status;
   103f4:	6a20      	ldr	r0, [r4, #32]
   103f6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   103fa:	2001      	movs	r0, #1
}
   103fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10400:	20000edc 	.word	0x20000edc

00010404 <ticker_update>:

u32_t ticker_update(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		    u16_t ticks_drift_plus, u16_t ticks_drift_minus,
		    u16_t ticks_slot_plus, u16_t ticks_slot_minus, u16_t lazy,
		    u8_t force, ticker_op_func fp_op_func, void *op_context)
{
   10404:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   10408:	242c      	movs	r4, #44	; 0x2c
   1040a:	4d24      	ldr	r5, [pc, #144]	; (1049c <ticker_update+0x98>)
   1040c:	fb04 5400 	mla	r4, r4, r0, r5
   10410:	6866      	ldr	r6, [r4, #4]
   10412:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   10416:	f89e 4003 	ldrb.w	r4, [lr, #3]
   1041a:	1c65      	adds	r5, r4, #1
   1041c:	b2ed      	uxtb	r5, r5
	if (last >= user->count_user_op) {
   1041e:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10422:	42b5      	cmp	r5, r6
   10424:	d300      	bcc.n	10428 <ticker_update+0x24>
		last = 0;
   10426:	2500      	movs	r5, #0
	}

	if (last == user->first) {
   10428:	f89e 6001 	ldrb.w	r6, [lr, #1]
   1042c:	42b5      	cmp	r5, r6
   1042e:	d031      	beq.n	10494 <ticker_update+0x90>
   10430:	469c      	mov	ip, r3
   10432:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10434:	f8de 3004 	ldr.w	r3, [lr, #4]
   10438:	f04f 082c 	mov.w	r8, #44	; 0x2c
   1043c:	fb08 f604 	mul.w	r6, r8, r4
   10440:	199c      	adds	r4, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_UPDATE;
   10442:	2004      	movs	r0, #4
   10444:	5598      	strb	r0, [r3, r6]
	user_op->id = ticker_id;
   10446:	7062      	strb	r2, [r4, #1]
	user_op->params.update.ticks_drift_plus = ticks_drift_plus;
   10448:	f8a4 c004 	strh.w	ip, [r4, #4]
	user_op->params.update.ticks_drift_minus = ticks_drift_minus;
   1044c:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   10450:	80e3      	strh	r3, [r4, #6]
	user_op->params.update.ticks_slot_plus = ticks_slot_plus;
   10452:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   10456:	8123      	strh	r3, [r4, #8]
	user_op->params.update.ticks_slot_minus = ticks_slot_minus;
   10458:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   1045c:	8163      	strh	r3, [r4, #10]
	user_op->params.update.lazy = lazy;
   1045e:	f8bd 3024 	ldrh.w	r3, [sp, #36]	; 0x24
   10462:	81a3      	strh	r3, [r4, #12]
	user_op->params.update.force = force;
   10464:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   10468:	73a3      	strb	r3, [r4, #14]
	user_op->status = TICKER_STATUS_BUSY;
   1046a:	2602      	movs	r6, #2
   1046c:	6226      	str	r6, [r4, #32]
	user_op->fp_op_func = fp_op_func;
   1046e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10470:	6263      	str	r3, [r4, #36]	; 0x24
	user_op->op_context = op_context;
   10472:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   10474:	62a3      	str	r3, [r4, #40]	; 0x28

	user->last = last;
   10476:	f88e 5003 	strb.w	r5, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1047a:	4b08      	ldr	r3, [pc, #32]	; (1049c <ticker_update+0x98>)
   1047c:	fb08 3307 	mla	r3, r8, r7, r3
   10480:	6a5d      	ldr	r5, [r3, #36]	; 0x24
   10482:	6a1b      	ldr	r3, [r3, #32]
   10484:	4608      	mov	r0, r1
   10486:	4798      	blx	r3
   10488:	2200      	movs	r2, #0
   1048a:	4631      	mov	r1, r6
   1048c:	47a8      	blx	r5

	return user_op->status;
   1048e:	6a20      	ldr	r0, [r4, #32]
   10490:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   10494:	2001      	movs	r0, #1
}
   10496:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1049a:	bf00      	nop
   1049c:	20000edc 	.word	0x20000edc

000104a0 <ticker_stop>:

u32_t ticker_stop(u8_t instance_index, u8_t user_id, u8_t ticker_id,
		  ticker_op_func fp_op_func, void *op_context)
{
   104a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   104a4:	242c      	movs	r4, #44	; 0x2c
   104a6:	4d1b      	ldr	r5, [pc, #108]	; (10514 <ticker_stop+0x74>)
   104a8:	fb04 5400 	mla	r4, r4, r0, r5
   104ac:	6866      	ldr	r6, [r4, #4]
   104ae:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   104b2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   104b6:	1c6c      	adds	r4, r5, #1
   104b8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   104ba:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   104be:	42b4      	cmp	r4, r6
   104c0:	d300      	bcc.n	104c4 <ticker_stop+0x24>
		last = 0;
   104c2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   104c4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   104c8:	42b4      	cmp	r4, r6
   104ca:	d020      	beq.n	1050e <ticker_stop+0x6e>
   104cc:	4698      	mov	r8, r3
   104ce:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   104d0:	f8de 3004 	ldr.w	r3, [lr, #4]
   104d4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   104d8:	fb0c f505 	mul.w	r5, ip, r5
   104dc:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_STOP;
   104de:	2005      	movs	r0, #5
   104e0:	5558      	strb	r0, [r3, r5]
	user_op->id = ticker_id;
   104e2:	7072      	strb	r2, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   104e4:	2502      	movs	r5, #2
   104e6:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   104e8:	f8c6 8024 	str.w	r8, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   104ec:	9b06      	ldr	r3, [sp, #24]
   104ee:	62b3      	str	r3, [r6, #40]	; 0x28

	user->last = last;
   104f0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   104f4:	4b07      	ldr	r3, [pc, #28]	; (10514 <ticker_stop+0x74>)
   104f6:	fb0c 3307 	mla	r3, ip, r7, r3
   104fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   104fc:	6a1b      	ldr	r3, [r3, #32]
   104fe:	4608      	mov	r0, r1
   10500:	4798      	blx	r3
   10502:	2200      	movs	r2, #0
   10504:	4629      	mov	r1, r5
   10506:	47a0      	blx	r4

	return user_op->status;
   10508:	6a30      	ldr	r0, [r6, #32]
   1050a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1050e:	2001      	movs	r0, #1
}
   10510:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10514:	20000edc 	.word	0x20000edc

00010518 <ticker_next_slot_get>:

u32_t ticker_next_slot_get(u8_t instance_index, u8_t user_id, u8_t *ticker_id,
			   u32_t *ticks_current, u32_t *ticks_to_expire,
			   ticker_op_func fp_op_func, void *op_context)
{
   10518:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   1051c:	242c      	movs	r4, #44	; 0x2c
   1051e:	4d1f      	ldr	r5, [pc, #124]	; (1059c <ticker_next_slot_get+0x84>)
   10520:	fb04 5400 	mla	r4, r4, r0, r5
   10524:	6866      	ldr	r6, [r4, #4]
   10526:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   1052a:	f89e 5003 	ldrb.w	r5, [lr, #3]
   1052e:	1c6c      	adds	r4, r5, #1
   10530:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   10532:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   10536:	42b4      	cmp	r4, r6
   10538:	d300      	bcc.n	1053c <ticker_next_slot_get+0x24>
		last = 0;
   1053a:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   1053c:	f89e 6001 	ldrb.w	r6, [lr, #1]
   10540:	42b4      	cmp	r4, r6
   10542:	d027      	beq.n	10594 <ticker_next_slot_get+0x7c>
   10544:	469c      	mov	ip, r3
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   10546:	f8de 3004 	ldr.w	r3, [lr, #4]
   1054a:	f04f 092c 	mov.w	r9, #44	; 0x2c
   1054e:	fb09 f605 	mul.w	r6, r9, r5
   10552:	199d      	adds	r5, r3, r6
	user_op->op = TICKER_USER_OP_TYPE_SLOT_GET;
   10554:	f04f 0802 	mov.w	r8, #2
   10558:	f803 8006 	strb.w	r8, [r3, r6]
	user_op->id = TICKER_NULL;
   1055c:	23ff      	movs	r3, #255	; 0xff
   1055e:	706b      	strb	r3, [r5, #1]
	user_op->params.slot_get.ticker_id = ticker_id;
   10560:	606a      	str	r2, [r5, #4]
	user_op->params.slot_get.ticks_current = ticks_current;
   10562:	f8c5 c008 	str.w	ip, [r5, #8]
	user_op->params.slot_get.ticks_to_expire = ticks_to_expire;
   10566:	9b08      	ldr	r3, [sp, #32]
   10568:	60eb      	str	r3, [r5, #12]
	user_op->status = TICKER_STATUS_BUSY;
   1056a:	f8c5 8020 	str.w	r8, [r5, #32]
	user_op->fp_op_func = fp_op_func;
   1056e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10570:	626b      	str	r3, [r5, #36]	; 0x24
	user_op->op_context = op_context;
   10572:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10574:	62ab      	str	r3, [r5, #40]	; 0x28

	user->last = last;
   10576:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1057a:	4b08      	ldr	r3, [pc, #32]	; (1059c <ticker_next_slot_get+0x84>)
   1057c:	fb09 3300 	mla	r3, r9, r0, r3
   10580:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   10582:	6a1b      	ldr	r3, [r3, #32]
   10584:	4608      	mov	r0, r1
   10586:	4798      	blx	r3
   10588:	2200      	movs	r2, #0
   1058a:	4641      	mov	r1, r8
   1058c:	47a0      	blx	r4

	return user_op->status;
   1058e:	6a28      	ldr	r0, [r5, #32]
   10590:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return TICKER_STATUS_FAILURE;
   10594:	2001      	movs	r0, #1
}
   10596:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1059a:	bf00      	nop
   1059c:	20000edc 	.word	0x20000edc

000105a0 <ticker_job_idle_get>:

u32_t ticker_job_idle_get(u8_t instance_index, u8_t user_id,
			  ticker_op_func fp_op_func, void *op_context)
{
   105a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	struct ticker_instance *instance = &_instance[instance_index];
	struct ticker_user_op *user_op;
	struct ticker_user *user;
	u8_t last;

	user = &instance->user[user_id];
   105a4:	242c      	movs	r4, #44	; 0x2c
   105a6:	4d1b      	ldr	r5, [pc, #108]	; (10614 <ticker_job_idle_get+0x74>)
   105a8:	fb04 5400 	mla	r4, r4, r0, r5
   105ac:	6866      	ldr	r6, [r4, #4]
   105ae:	eb06 0ec1 	add.w	lr, r6, r1, lsl #3

	last = user->last + 1;
   105b2:	f89e 5003 	ldrb.w	r5, [lr, #3]
   105b6:	1c6c      	adds	r4, r5, #1
   105b8:	b2e4      	uxtb	r4, r4
	if (last >= user->count_user_op) {
   105ba:	f816 6031 	ldrb.w	r6, [r6, r1, lsl #3]
   105be:	42b4      	cmp	r4, r6
   105c0:	d300      	bcc.n	105c4 <ticker_job_idle_get+0x24>
		last = 0;
   105c2:	2400      	movs	r4, #0
	}

	if (last == user->first) {
   105c4:	f89e 6001 	ldrb.w	r6, [lr, #1]
   105c8:	42b4      	cmp	r4, r6
   105ca:	d020      	beq.n	1060e <ticker_job_idle_get+0x6e>
   105cc:	4698      	mov	r8, r3
   105ce:	4607      	mov	r7, r0
		return TICKER_STATUS_FAILURE;
	}

	user_op = &user->user_op[user->last];
   105d0:	f8de 3004 	ldr.w	r3, [lr, #4]
   105d4:	f04f 0c2c 	mov.w	ip, #44	; 0x2c
   105d8:	fb0c f505 	mul.w	r5, ip, r5
   105dc:	195e      	adds	r6, r3, r5
	user_op->op = TICKER_USER_OP_TYPE_IDLE_GET;
   105de:	2001      	movs	r0, #1
   105e0:	5558      	strb	r0, [r3, r5]
	user_op->id = TICKER_NULL;
   105e2:	23ff      	movs	r3, #255	; 0xff
   105e4:	7073      	strb	r3, [r6, #1]
	user_op->status = TICKER_STATUS_BUSY;
   105e6:	2502      	movs	r5, #2
   105e8:	6235      	str	r5, [r6, #32]
	user_op->fp_op_func = fp_op_func;
   105ea:	6272      	str	r2, [r6, #36]	; 0x24
	user_op->op_context = op_context;
   105ec:	f8c6 8028 	str.w	r8, [r6, #40]	; 0x28

	user->last = last;
   105f0:	f88e 4003 	strb.w	r4, [lr, #3]

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   105f4:	4b07      	ldr	r3, [pc, #28]	; (10614 <ticker_job_idle_get+0x74>)
   105f6:	fb0c 3307 	mla	r3, ip, r7, r3
   105fa:	6a5c      	ldr	r4, [r3, #36]	; 0x24
   105fc:	6a1b      	ldr	r3, [r3, #32]
   105fe:	4608      	mov	r0, r1
   10600:	4798      	blx	r3
   10602:	2200      	movs	r2, #0
   10604:	4629      	mov	r1, r5
   10606:	47a0      	blx	r4

	return user_op->status;
   10608:	6a30      	ldr	r0, [r6, #32]
   1060a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return TICKER_STATUS_FAILURE;
   1060e:	2001      	movs	r0, #1
}
   10610:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   10614:	20000edc 	.word	0x20000edc

00010618 <ticker_job_sched>:

void ticker_job_sched(u8_t instance_index, u8_t user_id)
{
   10618:	b510      	push	{r4, lr}
	struct ticker_instance *instance = &_instance[instance_index];

	instance->fp_sched(instance->fp_caller_id_get(user_id), CALL_ID_JOB, 0);
   1061a:	232c      	movs	r3, #44	; 0x2c
   1061c:	4a05      	ldr	r2, [pc, #20]	; (10634 <ticker_job_sched+0x1c>)
   1061e:	fb03 2000 	mla	r0, r3, r0, r2
   10622:	6a44      	ldr	r4, [r0, #36]	; 0x24
   10624:	6a03      	ldr	r3, [r0, #32]
   10626:	4608      	mov	r0, r1
   10628:	4798      	blx	r3
   1062a:	2200      	movs	r2, #0
   1062c:	2102      	movs	r1, #2
   1062e:	47a0      	blx	r4
   10630:	bd10      	pop	{r4, pc}
   10632:	bf00      	nop
   10634:	20000edc 	.word	0x20000edc

00010638 <ticker_ticks_now_get>:
}

u32_t ticker_ticks_now_get(void)
{
   10638:	b508      	push	{r3, lr}
	return cntr_cnt_get();
   1063a:	f7fe fa95 	bl	eb68 <cntr_cnt_get>
}
   1063e:	bd08      	pop	{r3, pc}

00010640 <ticker_ticks_diff_get>:

u32_t ticker_ticks_diff_get(u32_t ticks_now, u32_t ticks_old)
{
	return ((ticks_now - ticks_old) & 0x00FFFFFF);
   10640:	1a40      	subs	r0, r0, r1
}
   10642:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   10646:	4770      	bx	lr

00010648 <ticker_worker>:
{
   10648:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	instance->worker_trigger = 1;
   1064c:	2301      	movs	r3, #1
   1064e:	7743      	strb	r3, [r0, #29]
	if (instance->job_guard) {
   10650:	f890 901c 	ldrb.w	r9, [r0, #28]
   10654:	f1b9 0f00 	cmp.w	r9, #0
   10658:	d147      	bne.n	106ea <ticker_worker+0xa2>
	if (instance->ticker_id_head == TICKER_NULL) {
   1065a:	7e03      	ldrb	r3, [r0, #24]
   1065c:	2bff      	cmp	r3, #255	; 0xff
   1065e:	d030      	beq.n	106c2 <ticker_worker+0x7a>
   10660:	4607      	mov	r7, r0
	ticks_elapsed = ticker_ticks_diff_get(cntr_cnt_get(),
   10662:	f7fe fa81 	bl	eb68 <cntr_cnt_get>
   10666:	6979      	ldr	r1, [r7, #20]
   10668:	f7ff ffea 	bl	10640 <ticker_ticks_diff_get>
   1066c:	4605      	mov	r5, r0
	ticker_id_head = instance->ticker_id_head;
   1066e:	7e3c      	ldrb	r4, [r7, #24]
	node = &instance->node[0];
   10670:	f8d7 8000 	ldr.w	r8, [r7]
	ticks_expired = 0;
   10674:	2600      	movs	r6, #0
	while (ticker_id_head != TICKER_NULL) {
   10676:	2cff      	cmp	r4, #255	; 0xff
   10678:	d027      	beq.n	106ca <ticker_worker+0x82>
		ticker = &node[ticker_id_head];
   1067a:	eb04 04c4 	add.w	r4, r4, r4, lsl #3
   1067e:	00a3      	lsls	r3, r4, #2
   10680:	eb08 0103 	add.w	r1, r8, r3
		ticks_to_expire = ticker->ticks_to_expire;
   10684:	688a      	ldr	r2, [r1, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10686:	4295      	cmp	r5, r2
   10688:	d31f      	bcc.n	106ca <ticker_worker+0x82>
		ticks_elapsed -= ticks_to_expire;
   1068a:	1aad      	subs	r5, r5, r2
		ticks_expired += ticks_to_expire;
   1068c:	4416      	add	r6, r2
		ticker_id_head = ticker->next;
   1068e:	f818 4003 	ldrb.w	r4, [r8, r3]
		if (((ticker->req - ticker->ack) & 0xff) != 1) {
   10692:	784b      	ldrb	r3, [r1, #1]
   10694:	788a      	ldrb	r2, [r1, #2]
   10696:	1a9b      	subs	r3, r3, r2
   10698:	b2db      	uxtb	r3, r3
   1069a:	2b01      	cmp	r3, #1
   1069c:	d1eb      	bne.n	10676 <ticker_worker+0x2e>
		ticker->ack--;
   1069e:	3a01      	subs	r2, #1
   106a0:	708a      	strb	r2, [r1, #2]
		if (ticker->timeout_func) {
   106a2:	f8d1 a00c 	ldr.w	sl, [r1, #12]
   106a6:	f1ba 0f00 	cmp.w	sl, #0
   106aa:	d0e4      	beq.n	10676 <ticker_worker+0x2e>
			ticks_at_expire = (instance->ticks_current +
   106ac:	6978      	ldr	r0, [r7, #20]
   106ae:	4430      	add	r0, r6
					   ticker->ticks_to_expire_minus) &
   106b0:	8a8b      	ldrh	r3, [r1, #20]
					   ticks_expired -
   106b2:	1ac0      	subs	r0, r0, r3
			ticker->timeout_func(ticks_at_expire,
   106b4:	690b      	ldr	r3, [r1, #16]
   106b6:	8b4a      	ldrh	r2, [r1, #26]
   106b8:	6a09      	ldr	r1, [r1, #32]
   106ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   106be:	47d0      	blx	sl
   106c0:	e7d9      	b.n	10676 <ticker_worker+0x2e>
		instance->worker_trigger = 0;
   106c2:	2300      	movs	r3, #0
   106c4:	7743      	strb	r3, [r0, #29]
		return;
   106c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	if (instance->ticks_elapsed_first == instance->ticks_elapsed_last) {
   106ca:	7aba      	ldrb	r2, [r7, #10]
   106cc:	7afb      	ldrb	r3, [r7, #11]
   106ce:	429a      	cmp	r2, r3
   106d0:	d00d      	beq.n	106ee <ticker_worker+0xa6>
	instance->ticks_elapsed[instance->ticks_elapsed_last] = ticks_expired;
   106d2:	7afb      	ldrb	r3, [r7, #11]
   106d4:	3302      	adds	r3, #2
   106d6:	eb07 0383 	add.w	r3, r7, r3, lsl #2
   106da:	605e      	str	r6, [r3, #4]
	instance->worker_trigger = 0;
   106dc:	2300      	movs	r3, #0
   106de:	777b      	strb	r3, [r7, #29]
	instance->fp_sched(CALL_ID_WORKER, CALL_ID_JOB, 1);
   106e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
   106e2:	2201      	movs	r2, #1
   106e4:	2102      	movs	r1, #2
   106e6:	4610      	mov	r0, r2
   106e8:	4798      	blx	r3
   106ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		last = instance->ticks_elapsed_last + 1;
   106ee:	3301      	adds	r3, #1
   106f0:	b2db      	uxtb	r3, r3
		if (last == DOUBLE_BUFFER_SIZE) {
   106f2:	2b02      	cmp	r3, #2
   106f4:	d001      	beq.n	106fa <ticker_worker+0xb2>
		instance->ticks_elapsed_last = last;
   106f6:	72fb      	strb	r3, [r7, #11]
   106f8:	e7eb      	b.n	106d2 <ticker_worker+0x8a>
			last = 0;
   106fa:	464b      	mov	r3, r9
   106fc:	e7fb      	b.n	106f6 <ticker_worker+0xae>

000106fe <ticks_to_expire_prep>:
{
   106fe:	b570      	push	{r4, r5, r6, lr}
   10700:	4606      	mov	r6, r0
   10702:	4608      	mov	r0, r1
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10704:	68b4      	ldr	r4, [r6, #8]
	u16_t ticks_to_expire_minus = ticker->ticks_to_expire_minus;
   10706:	8ab5      	ldrh	r5, [r6, #20]
	if (((ticks_at_start - ticks_current) & BIT(23)) == 0) {
   10708:	1a51      	subs	r1, r2, r1
   1070a:	f411 0f00 	tst.w	r1, #8388608	; 0x800000
   1070e:	d10c      	bne.n	1072a <ticks_to_expire_prep+0x2c>
		ticks_to_expire += ticker_ticks_diff_get(ticks_at_start,
   10710:	4601      	mov	r1, r0
   10712:	4610      	mov	r0, r2
   10714:	f7ff ff94 	bl	10640 <ticker_ticks_diff_get>
   10718:	4420      	add	r0, r4
	if (ticks_to_expire > ticks_to_expire_minus) {
   1071a:	42a8      	cmp	r0, r5
   1071c:	d812      	bhi.n	10744 <ticks_to_expire_prep+0x46>
		ticks_to_expire_minus -= ticks_to_expire;
   1071e:	1a28      	subs	r0, r5, r0
   10720:	b285      	uxth	r5, r0
		ticks_to_expire = 0;
   10722:	2000      	movs	r0, #0
	ticker->ticks_to_expire = ticks_to_expire;
   10724:	60b0      	str	r0, [r6, #8]
	ticker->ticks_to_expire_minus = ticks_to_expire_minus;
   10726:	82b5      	strh	r5, [r6, #20]
   10728:	bd70      	pop	{r4, r5, r6, pc}
		delta_current_start = ticker_ticks_diff_get(ticks_current,
   1072a:	4611      	mov	r1, r2
   1072c:	f7ff ff88 	bl	10640 <ticker_ticks_diff_get>
		if (ticks_to_expire > delta_current_start) {
   10730:	4284      	cmp	r4, r0
   10732:	d901      	bls.n	10738 <ticks_to_expire_prep+0x3a>
			ticks_to_expire -= delta_current_start;
   10734:	1a20      	subs	r0, r4, r0
   10736:	e7f0      	b.n	1071a <ticks_to_expire_prep+0x1c>
			    (delta_current_start - ticks_to_expire);
   10738:	1b00      	subs	r0, r0, r4
			ticks_to_expire_minus +=
   1073a:	fa15 f080 	uxtah	r0, r5, r0
   1073e:	b285      	uxth	r5, r0
			ticks_to_expire = 0;
   10740:	2000      	movs	r0, #0
   10742:	e7ea      	b.n	1071a <ticks_to_expire_prep+0x1c>
		ticks_to_expire -= ticks_to_expire_minus;
   10744:	1b40      	subs	r0, r0, r5
		ticks_to_expire_minus = 0;
   10746:	2500      	movs	r5, #0
   10748:	e7ec      	b.n	10724 <ticks_to_expire_prep+0x26>

0001074a <ticker_job>:
{
   1074a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1074e:	b08d      	sub	sp, #52	; 0x34
	if (instance->worker_trigger) {
   10750:	7f43      	ldrb	r3, [r0, #29]
   10752:	9301      	str	r3, [sp, #4]
   10754:	2b00      	cmp	r3, #0
   10756:	f040 8254 	bne.w	10c02 <ticker_job+0x4b8>
	instance->job_guard = 1;
   1075a:	2301      	movs	r3, #1
   1075c:	7703      	strb	r3, [r0, #28]
	ticks_previous = instance->ticks_current;
   1075e:	6943      	ldr	r3, [r0, #20]
   10760:	930b      	str	r3, [sp, #44]	; 0x2c
	if (instance->ticks_elapsed_first != instance->ticks_elapsed_last) {
   10762:	7a83      	ldrb	r3, [r0, #10]
   10764:	7ac2      	ldrb	r2, [r0, #11]
   10766:	4293      	cmp	r3, r2
   10768:	d021      	beq.n	107ae <ticker_job+0x64>
		first = instance->ticks_elapsed_first + 1;
   1076a:	3301      	adds	r3, #1
   1076c:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   1076e:	2b02      	cmp	r3, #2
   10770:	d100      	bne.n	10774 <ticker_job+0x2a>
			first = 0;
   10772:	9b01      	ldr	r3, [sp, #4]
		instance->ticks_elapsed_first = first;
   10774:	7283      	strb	r3, [r0, #10]
		ticks_elapsed =
   10776:	3302      	adds	r3, #2
   10778:	eb00 0383 	add.w	r3, r0, r3, lsl #2
   1077c:	685b      	ldr	r3, [r3, #4]
   1077e:	9303      	str	r3, [sp, #12]
		instance->ticks_current += ticks_elapsed;
   10780:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   10782:	18d3      	adds	r3, r2, r3
		instance->ticks_current &= 0x00FFFFFF;
   10784:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
   10788:	6143      	str	r3, [r0, #20]
		flag_elapsed = 1;
   1078a:	2301      	movs	r3, #1
   1078c:	9304      	str	r3, [sp, #16]
   1078e:	9000      	str	r0, [sp, #0]
	ticker_id_old_head = instance->ticker_id_head;
   10790:	7e03      	ldrb	r3, [r0, #24]
   10792:	9309      	str	r3, [sp, #36]	; 0x24
	node = &instance->node[0];
   10794:	6803      	ldr	r3, [r0, #0]
   10796:	4619      	mov	r1, r3
	users = &instance->user[0];
   10798:	6843      	ldr	r3, [r0, #4]
   1079a:	9305      	str	r3, [sp, #20]
	count_user = instance->count_user;
   1079c:	7a43      	ldrb	r3, [r0, #9]
	pending = 0;
   1079e:	9a01      	ldr	r2, [sp, #4]
   107a0:	920a      	str	r2, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   107a2:	f04f 0bff 	mov.w	fp, #255	; 0xff
   107a6:	f8cd b01c 	str.w	fp, [sp, #28]
   107aa:	468b      	mov	fp, r1
   107ac:	e0cc      	b.n	10948 <ticker_job+0x1fe>
		flag_elapsed = 0;
   107ae:	9b01      	ldr	r3, [sp, #4]
   107b0:	9304      	str	r3, [sp, #16]
		ticks_elapsed = 0;
   107b2:	2300      	movs	r3, #0
   107b4:	9303      	str	r3, [sp, #12]
   107b6:	e7ea      	b.n	1078e <ticker_job+0x44>
				middle = 0;
   107b8:	9b01      	ldr	r3, [sp, #4]
   107ba:	e01d      	b.n	107f8 <ticker_job+0xae>
			     (user_op->params.update.ticks_drift_plus == 0) &&
   107bc:	6872      	ldr	r2, [r6, #4]
   107be:	bb82      	cbnz	r2, 10822 <ticker_job+0xd8>
			     (user_op->params.update.ticks_slot_plus == 0) &&
   107c0:	68b2      	ldr	r2, [r6, #8]
   107c2:	bb72      	cbnz	r2, 10822 <ticker_job+0xd8>
			     (user_op->params.update.lazy == 0) &&
   107c4:	68f2      	ldr	r2, [r6, #12]
   107c6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   107ca:	d12a      	bne.n	10822 <ticker_job+0xd8>
				ticker_job_op_cb(user_op,
   107cc:	2101      	movs	r1, #1
   107ce:	4630      	mov	r0, r6
   107d0:	f7ff fc82 	bl	100d8 <ticker_job_op_cb>
		while (user->middle != user->last) {
   107d4:	f894 a002 	ldrb.w	sl, [r4, #2]
   107d8:	78e3      	ldrb	r3, [r4, #3]
   107da:	459a      	cmp	sl, r3
   107dc:	f000 80b3 	beq.w	10946 <ticker_job+0x1fc>
			user_op = &user_ops[user->middle];
   107e0:	f04f 092c 	mov.w	r9, #44	; 0x2c
   107e4:	fb09 f90a 	mul.w	r9, r9, sl
   107e8:	eb08 0609 	add.w	r6, r8, r9
			middle = user->middle + 1;
   107ec:	f10a 0301 	add.w	r3, sl, #1
   107f0:	b2db      	uxtb	r3, r3
			if (middle == user->count_user_op) {
   107f2:	7822      	ldrb	r2, [r4, #0]
   107f4:	4293      	cmp	r3, r2
   107f6:	d0df      	beq.n	107b8 <ticker_job+0x6e>
			user->middle = middle;
   107f8:	70a3      	strb	r3, [r4, #2]
			ticker = &node[user_op->id];
   107fa:	7873      	ldrb	r3, [r6, #1]
   107fc:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10800:	009f      	lsls	r7, r3, #2
   10802:	eb0b 0507 	add.w	r5, fp, r7
			if (user_op->op < TICKER_USER_OP_TYPE_UPDATE) {
   10806:	f818 2009 	ldrb.w	r2, [r8, r9]
   1080a:	2a03      	cmp	r2, #3
   1080c:	d9e2      	bls.n	107d4 <ticker_job+0x8a>
			state = (ticker->req - ticker->ack) & 0xff;
   1080e:	786b      	ldrb	r3, [r5, #1]
   10810:	78a9      	ldrb	r1, [r5, #2]
   10812:	1a5b      	subs	r3, r3, r1
   10814:	b2db      	uxtb	r3, r3
			if ((user_op->op > TICKER_USER_OP_TYPE_STOP) ||
   10816:	2a05      	cmp	r2, #5
   10818:	d8d8      	bhi.n	107cc <ticker_job+0x82>
   1081a:	2b00      	cmp	r3, #0
   1081c:	d0d6      	beq.n	107cc <ticker_job+0x82>
			    (state == 0) ||
   1081e:	2a04      	cmp	r2, #4
   10820:	d0cc      	beq.n	107bc <ticker_job+0x72>
			if (state == 1) {
   10822:	2b01      	cmp	r3, #1
   10824:	f040 8085 	bne.w	10932 <ticker_job+0x1e8>
	ticker->ticks_to_expire = ticker_dequeue(instance, user_op->id);
   10828:	7871      	ldrb	r1, [r6, #1]
   1082a:	9800      	ldr	r0, [sp, #0]
   1082c:	f7ff fbf6 	bl	1001c <ticker_dequeue>
   10830:	60a8      	str	r0, [r5, #8]
	if (user_op->op == TICKER_USER_OP_TYPE_UPDATE) {
   10832:	f818 3009 	ldrb.w	r3, [r8, r9]
   10836:	2b04      	cmp	r3, #4
   10838:	d00b      	beq.n	10852 <ticker_job+0x108>
		ticker->req = ticker->ack;
   1083a:	78ab      	ldrb	r3, [r5, #2]
   1083c:	706b      	strb	r3, [r5, #1]
		if (instance->ticker_id_slot_previous == user_op->id) {
   1083e:	9b00      	ldr	r3, [sp, #0]
   10840:	7e5a      	ldrb	r2, [r3, #25]
   10842:	7873      	ldrb	r3, [r6, #1]
   10844:	429a      	cmp	r2, r3
   10846:	d06e      	beq.n	10926 <ticker_job+0x1dc>
	ticker_job_op_cb(user_op, TICKER_STATUS_SUCCESS);
   10848:	2100      	movs	r1, #0
   1084a:	4630      	mov	r0, r6
   1084c:	f7ff fc44 	bl	100d8 <ticker_job_op_cb>
   10850:	e7c0      	b.n	107d4 <ticker_job+0x8a>
		ticker_job_node_update(ticker, user_op, instance->ticks_current,
   10852:	9b00      	ldr	r3, [sp, #0]
   10854:	695b      	ldr	r3, [r3, #20]
   10856:	9306      	str	r3, [sp, #24]
	u32_t ticks_to_expire = ticker->ticks_to_expire;
   10858:	4681      	mov	r9, r0
	ticks_now = cntr_cnt_get();
   1085a:	f7fe f985 	bl	eb68 <cntr_cnt_get>
   1085e:	9008      	str	r0, [sp, #32]
	ticks_elapsed += ticker_ticks_diff_get(ticks_now, ticks_current);
   10860:	9906      	ldr	r1, [sp, #24]
   10862:	f7ff feed 	bl	10640 <ticker_ticks_diff_get>
   10866:	9b03      	ldr	r3, [sp, #12]
   10868:	4418      	add	r0, r3
	if (ticks_to_expire > ticks_elapsed) {
   1086a:	4581      	cmp	r9, r0
   1086c:	d909      	bls.n	10882 <ticker_job+0x138>
		ticks_to_expire -= ticks_elapsed;
   1086e:	eba9 0900 	sub.w	r9, r9, r0
	if ((ticker->ticks_periodic != 0) &&
   10872:	686b      	ldr	r3, [r5, #4]
   10874:	b37b      	cbz	r3, 108d6 <ticker_job+0x18c>
	    (user_op->params.update.lazy != 0)) {
   10876:	89b3      	ldrh	r3, [r6, #12]
	if ((ticker->ticks_periodic != 0) &&
   10878:	b36b      	cbz	r3, 108d6 <ticker_job+0x18c>
		user_op->params.update.lazy--;
   1087a:	3b01      	subs	r3, #1
   1087c:	81b3      	strh	r3, [r6, #12]
   1087e:	46a2      	mov	sl, r4
   10880:	e011      	b.n	108a6 <ticker_job+0x15c>
		ticker->ticks_to_expire_minus += ticks_elapsed -
   10882:	eba0 0909 	sub.w	r9, r0, r9
   10886:	8aab      	ldrh	r3, [r5, #20]
   10888:	fa13 f389 	uxtah	r3, r3, r9
   1088c:	82ab      	strh	r3, [r5, #20]
		ticks_to_expire = 0;
   1088e:	f04f 0900 	mov.w	r9, #0
   10892:	e7ee      	b.n	10872 <ticker_job+0x128>
					   ticker_remainder_dec(ticker);
   10894:	4628      	mov	r0, r5
   10896:	f7ff fc07 	bl	100a8 <ticker_remainder_dec>
			ticks_to_expire -= ticker->ticks_periodic +
   1089a:	4420      	add	r0, r4
   1089c:	eba9 0900 	sub.w	r9, r9, r0
			ticker->lazy_current--;
   108a0:	8b6b      	ldrh	r3, [r5, #26]
   108a2:	3b01      	subs	r3, #1
   108a4:	836b      	strh	r3, [r5, #26]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   108a6:	686c      	ldr	r4, [r5, #4]
   108a8:	454c      	cmp	r4, r9
   108aa:	d237      	bcs.n	1091c <ticker_job+0x1d2>
		       (ticker->lazy_current > user_op->params.update.lazy)) {
   108ac:	8b6a      	ldrh	r2, [r5, #26]
   108ae:	89b3      	ldrh	r3, [r6, #12]
		while ((ticks_to_expire > ticker->ticks_periodic) &&
   108b0:	429a      	cmp	r2, r3
   108b2:	d8ef      	bhi.n	10894 <ticker_job+0x14a>
   108b4:	4654      	mov	r4, sl
   108b6:	e009      	b.n	108cc <ticker_job+0x182>
			ticks_to_expire += ticker->ticks_periodic +
   108b8:	f8d5 a004 	ldr.w	sl, [r5, #4]
					   ticker_remainder_inc(ticker);
   108bc:	4628      	mov	r0, r5
   108be:	f7ff fbdd 	bl	1007c <ticker_remainder_inc>
			ticks_to_expire += ticker->ticks_periodic +
   108c2:	4450      	add	r0, sl
   108c4:	4481      	add	r9, r0
			ticker->lazy_current++;
   108c6:	8b6b      	ldrh	r3, [r5, #26]
   108c8:	3301      	adds	r3, #1
   108ca:	836b      	strh	r3, [r5, #26]
		while (ticker->lazy_current < user_op->params.update.lazy) {
   108cc:	8b6a      	ldrh	r2, [r5, #26]
   108ce:	89b3      	ldrh	r3, [r6, #12]
   108d0:	429a      	cmp	r2, r3
   108d2:	d3f1      	bcc.n	108b8 <ticker_job+0x16e>
		ticker->lazy_periodic = user_op->params.update.lazy;
   108d4:	832b      	strh	r3, [r5, #24]
				  user_op->params.update.ticks_drift_plus;
   108d6:	88b3      	ldrh	r3, [r6, #4]
	ticker->ticks_to_expire = ticks_to_expire +
   108d8:	444b      	add	r3, r9
   108da:	60ab      	str	r3, [r5, #8]
				user_op->params.update.ticks_drift_minus;
   108dc:	88f3      	ldrh	r3, [r6, #6]
	ticker->ticks_to_expire_minus +=
   108de:	8aaa      	ldrh	r2, [r5, #20]
   108e0:	4413      	add	r3, r2
   108e2:	82ab      	strh	r3, [r5, #20]
	ticks_to_expire_prep(ticker, ticks_current, ticks_now);
   108e4:	9a08      	ldr	r2, [sp, #32]
   108e6:	9906      	ldr	r1, [sp, #24]
   108e8:	4628      	mov	r0, r5
   108ea:	f7ff ff08 	bl	106fe <ticks_to_expire_prep>
	ticker->ticks_slot += user_op->params.update.ticks_slot_plus;
   108ee:	8933      	ldrh	r3, [r6, #8]
   108f0:	8aea      	ldrh	r2, [r5, #22]
   108f2:	4413      	add	r3, r2
   108f4:	b29b      	uxth	r3, r3
   108f6:	82eb      	strh	r3, [r5, #22]
	if (ticker->ticks_slot > user_op->params.update.ticks_slot_minus) {
   108f8:	8972      	ldrh	r2, [r6, #10]
   108fa:	4293      	cmp	r3, r2
   108fc:	d910      	bls.n	10920 <ticker_job+0x1d6>
		ticker->ticks_slot -= user_op->params.update.ticks_slot_minus;
   108fe:	1a9b      	subs	r3, r3, r2
   10900:	82eb      	strh	r3, [r5, #22]
	if (user_op->params.update.force != 0) {
   10902:	7bb3      	ldrb	r3, [r6, #14]
   10904:	b103      	cbz	r3, 10908 <ticker_job+0x1be>
		ticker->force = user_op->params.update.force;
   10906:	70eb      	strb	r3, [r5, #3]
	ticker->next = *insert_head;
   10908:	f89d 301c 	ldrb.w	r3, [sp, #28]
   1090c:	f80b 3007 	strb.w	r3, [fp, r7]
	*insert_head = user_op->id;
   10910:	7873      	ldrb	r3, [r6, #1]
   10912:	9307      	str	r3, [sp, #28]
		ticker->req++;
   10914:	786b      	ldrb	r3, [r5, #1]
   10916:	3301      	adds	r3, #1
   10918:	706b      	strb	r3, [r5, #1]
   1091a:	e795      	b.n	10848 <ticker_job+0xfe>
   1091c:	4654      	mov	r4, sl
   1091e:	e7d5      	b.n	108cc <ticker_job+0x182>
		ticker->ticks_slot = 0;
   10920:	2300      	movs	r3, #0
   10922:	82eb      	strh	r3, [r5, #22]
   10924:	e7ed      	b.n	10902 <ticker_job+0x1b8>
			instance->ticker_id_slot_previous = TICKER_NULL;
   10926:	23ff      	movs	r3, #255	; 0xff
   10928:	9900      	ldr	r1, [sp, #0]
   1092a:	764b      	strb	r3, [r1, #25]
			instance->ticks_slot_previous = 0;
   1092c:	2300      	movs	r3, #0
   1092e:	834b      	strh	r3, [r1, #26]
   10930:	e78a      	b.n	10848 <ticker_job+0xfe>
				instance->fp_sched(CALL_ID_JOB, CALL_ID_JOB, 1);
   10932:	9b00      	ldr	r3, [sp, #0]
   10934:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10936:	2201      	movs	r2, #1
   10938:	2102      	movs	r1, #2
   1093a:	4608      	mov	r0, r1
   1093c:	4798      	blx	r3
				user->middle = prev;
   1093e:	f884 a002 	strb.w	sl, [r4, #2]
				pending = 1;
   10942:	2301      	movs	r3, #1
   10944:	930a      	str	r3, [sp, #40]	; 0x28
	insert_head = TICKER_NULL;
   10946:	9b02      	ldr	r3, [sp, #8]
	while (count_user--) {
   10948:	1e5a      	subs	r2, r3, #1
   1094a:	b2d2      	uxtb	r2, r2
   1094c:	9202      	str	r2, [sp, #8]
   1094e:	b133      	cbz	r3, 1095e <ticker_job+0x214>
		user = &users[count_user];
   10950:	9b05      	ldr	r3, [sp, #20]
   10952:	9a02      	ldr	r2, [sp, #8]
   10954:	eb03 04c2 	add.w	r4, r3, r2, lsl #3
		user_ops = &user->user_op[0];
   10958:	f8d4 8004 	ldr.w	r8, [r4, #4]
   1095c:	e73a      	b.n	107d4 <ticker_job+0x8a>
   1095e:	9306      	str	r3, [sp, #24]
   10960:	f8dd b01c 	ldr.w	fp, [sp, #28]
	if (instance->ticker_id_head != ticker_id_old_head) {
   10964:	9b00      	ldr	r3, [sp, #0]
   10966:	7e1b      	ldrb	r3, [r3, #24]
   10968:	9a09      	ldr	r2, [sp, #36]	; 0x24
   1096a:	429a      	cmp	r2, r3
   1096c:	d00a      	beq.n	10984 <ticker_job+0x23a>
		flag_compare_update = 1;
   1096e:	2301      	movs	r3, #1
   10970:	9308      	str	r3, [sp, #32]
	if (flag_elapsed) {
   10972:	9b04      	ldr	r3, [sp, #16]
   10974:	b94b      	cbnz	r3, 1098a <ticker_job+0x240>
	node = &instance->node[0];
   10976:	9a00      	ldr	r2, [sp, #0]
   10978:	6813      	ldr	r3, [r2, #0]
   1097a:	9302      	str	r3, [sp, #8]
	users = &instance->user[0];
   1097c:	6853      	ldr	r3, [r2, #4]
   1097e:	930b      	str	r3, [sp, #44]	; 0x2c
	count_user = instance->count_user;
   10980:	7a53      	ldrb	r3, [r2, #9]
   10982:	e117      	b.n	10bb4 <ticker_job+0x46a>
	flag_compare_update = 0;
   10984:	9b06      	ldr	r3, [sp, #24]
   10986:	9308      	str	r3, [sp, #32]
   10988:	e7f3      	b.n	10972 <ticker_job+0x228>
	node = &instance->node[0];
   1098a:	9e00      	ldr	r6, [sp, #0]
   1098c:	f8d6 9000 	ldr.w	r9, [r6]
	ticks_expired = 0;
   10990:	f04f 0a00 	mov.w	sl, #0
   10994:	f8cd b004 	str.w	fp, [sp, #4]
   10998:	e02f      	b.n	109fa <ticker_job+0x2b0>
   1099a:	f8dd b004 	ldr.w	fp, [sp, #4]
			ticker->ticks_to_expire -= ticks_elapsed;
   1099e:	1a9b      	subs	r3, r3, r2
   109a0:	60ab      	str	r3, [r5, #8]
		if (instance->ticker_id_head != ticker_id_old_head) {
   109a2:	9b00      	ldr	r3, [sp, #0]
   109a4:	7e1b      	ldrb	r3, [r3, #24]
   109a6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   109a8:	429a      	cmp	r2, r3
   109aa:	d0e4      	beq.n	10976 <ticker_job+0x22c>
			flag_compare_update = 1;
   109ac:	9b04      	ldr	r3, [sp, #16]
   109ae:	9308      	str	r3, [sp, #32]
   109b0:	e7e1      	b.n	10976 <ticker_job+0x22c>
			instance->ticker_id_slot_previous = TICKER_NULL;
   109b2:	23ff      	movs	r3, #255	; 0xff
   109b4:	7673      	strb	r3, [r6, #25]
			instance->ticks_slot_previous = 0;
   109b6:	2300      	movs	r3, #0
   109b8:	8373      	strh	r3, [r6, #26]
   109ba:	e036      	b.n	10a2a <ticker_job+0x2e0>
				ticks_to_expire += ticker->ticks_periodic;
   109bc:	686c      	ldr	r4, [r5, #4]
   109be:	4404      	add	r4, r0
				ticks_to_expire += ticker_remainder_inc(ticker);
   109c0:	4628      	mov	r0, r5
   109c2:	f7ff fb5b 	bl	1007c <ticker_remainder_inc>
   109c6:	4420      	add	r0, r4
			while (count--) {
   109c8:	463b      	mov	r3, r7
   109ca:	1e5f      	subs	r7, r3, #1
   109cc:	2b00      	cmp	r3, #0
   109ce:	d1f5      	bne.n	109bc <ticker_job+0x272>
			ticker->ticks_to_expire = ticks_to_expire;
   109d0:	60a8      	str	r0, [r5, #8]
			ticks_to_expire_prep(ticker, instance->ticks_current,
   109d2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   109d4:	eb03 020a 	add.w	r2, r3, sl
   109d8:	6971      	ldr	r1, [r6, #20]
   109da:	4628      	mov	r0, r5
   109dc:	f7ff fe8f 	bl	106fe <ticks_to_expire_prep>
			ticker->lazy_current = ticker->lazy_periodic;
   109e0:	8b2b      	ldrh	r3, [r5, #24]
   109e2:	836b      	strh	r3, [r5, #26]
			ticker->force = 0;
   109e4:	2300      	movs	r3, #0
   109e6:	70eb      	strb	r3, [r5, #3]
			ticker->next = *insert_head;
   109e8:	f89d 3004 	ldrb.w	r3, [sp, #4]
   109ec:	f809 300b 	strb.w	r3, [r9, fp]
			ticker->req++;
   109f0:	786b      	ldrb	r3, [r5, #1]
   109f2:	3301      	adds	r3, #1
   109f4:	706b      	strb	r3, [r5, #1]
			*insert_head = id_expired;
   109f6:	f8cd 8004 	str.w	r8, [sp, #4]
	while (instance->ticker_id_head != TICKER_NULL) {
   109fa:	f896 8018 	ldrb.w	r8, [r6, #24]
   109fe:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   10a02:	d026      	beq.n	10a52 <ticker_job+0x308>
		ticker = &node[id_expired];
   10a04:	eb08 03c8 	add.w	r3, r8, r8, lsl #3
   10a08:	ea4f 0b83 	mov.w	fp, r3, lsl #2
   10a0c:	eb09 050b 	add.w	r5, r9, fp
		ticks_to_expire = ticker->ticks_to_expire;
   10a10:	68ab      	ldr	r3, [r5, #8]
		if (ticks_elapsed < ticks_to_expire) {
   10a12:	9a03      	ldr	r2, [sp, #12]
   10a14:	4293      	cmp	r3, r2
   10a16:	d8c0      	bhi.n	1099a <ticker_job+0x250>
		ticks_elapsed -= ticks_to_expire;
   10a18:	9a03      	ldr	r2, [sp, #12]
   10a1a:	1ad2      	subs	r2, r2, r3
   10a1c:	9203      	str	r2, [sp, #12]
		ticks_expired += ticks_to_expire;
   10a1e:	449a      	add	sl, r3
		if (instance->ticks_slot_previous > ticks_to_expire) {
   10a20:	8b72      	ldrh	r2, [r6, #26]
   10a22:	4293      	cmp	r3, r2
   10a24:	d2c5      	bcs.n	109b2 <ticker_job+0x268>
			instance->ticks_slot_previous -= ticks_to_expire;
   10a26:	1ad3      	subs	r3, r2, r3
   10a28:	8373      	strh	r3, [r6, #26]
		if (ticker->ticks_slot != 0) {
   10a2a:	8aeb      	ldrh	r3, [r5, #22]
   10a2c:	b11b      	cbz	r3, 10a36 <ticker_job+0x2ec>
			instance->ticker_id_slot_previous = id_expired;
   10a2e:	f886 8019 	strb.w	r8, [r6, #25]
			instance->ticks_slot_previous = ticker->ticks_slot;
   10a32:	8aeb      	ldrh	r3, [r5, #22]
   10a34:	8373      	strh	r3, [r6, #26]
		ticker->ticks_to_expire = 0;
   10a36:	2300      	movs	r3, #0
   10a38:	60ab      	str	r3, [r5, #8]
		instance->ticker_id_head = ticker->next;
   10a3a:	f819 300b 	ldrb.w	r3, [r9, fp]
   10a3e:	7633      	strb	r3, [r6, #24]
		if (ticker->ticks_periodic != 0) {
   10a40:	686b      	ldr	r3, [r5, #4]
   10a42:	b11b      	cbz	r3, 10a4c <ticker_job+0x302>
			count = 1 + ticker->lazy_periodic;
   10a44:	8b2b      	ldrh	r3, [r5, #24]
   10a46:	3301      	adds	r3, #1
			ticks_to_expire = 0;
   10a48:	2000      	movs	r0, #0
   10a4a:	e7be      	b.n	109ca <ticker_job+0x280>
			ticker->req = ticker->ack;
   10a4c:	78ab      	ldrb	r3, [r5, #2]
   10a4e:	706b      	strb	r3, [r5, #1]
   10a50:	e7d3      	b.n	109fa <ticker_job+0x2b0>
   10a52:	f8dd b004 	ldr.w	fp, [sp, #4]
   10a56:	e7a4      	b.n	109a2 <ticker_job+0x258>
				user_op = &user_ops[user_ops_first];
   10a58:	232c      	movs	r3, #44	; 0x2c
   10a5a:	9a03      	ldr	r2, [sp, #12]
   10a5c:	fb03 f302 	mul.w	r3, r3, r2
   10a60:	9905      	ldr	r1, [sp, #20]
   10a62:	4419      	add	r1, r3
   10a64:	9101      	str	r1, [sp, #4]
				first = user_ops_first + 1;
   10a66:	3201      	adds	r2, #1
   10a68:	b2d2      	uxtb	r2, r2
   10a6a:	4611      	mov	r1, r2
   10a6c:	9203      	str	r2, [sp, #12]
				if (first == user->count_user_op) {
   10a6e:	9a04      	ldr	r2, [sp, #16]
   10a70:	7812      	ldrb	r2, [r2, #0]
   10a72:	4291      	cmp	r1, r2
   10a74:	d013      	beq.n	10a9e <ticker_job+0x354>
				id_insert = user_op->id;
   10a76:	9a01      	ldr	r2, [sp, #4]
   10a78:	7857      	ldrb	r7, [r2, #1]
				ticker = &node[id_insert];
   10a7a:	eb07 02c7 	add.w	r2, r7, r7, lsl #3
   10a7e:	0094      	lsls	r4, r2, #2
   10a80:	9a02      	ldr	r2, [sp, #8]
   10a82:	4414      	add	r4, r2
				if (user_op->op != TICKER_USER_OP_TYPE_START) {
   10a84:	9a05      	ldr	r2, [sp, #20]
   10a86:	5cd3      	ldrb	r3, [r2, r3]
   10a88:	2b03      	cmp	r3, #3
   10a8a:	d16b      	bne.n	10b64 <ticker_job+0x41a>
				if (((ticker->req - ticker->ack) & 0xff) != 0) {
   10a8c:	7862      	ldrb	r2, [r4, #1]
   10a8e:	78a3      	ldrb	r3, [r4, #2]
   10a90:	429a      	cmp	r2, r3
   10a92:	d007      	beq.n	10aa4 <ticker_job+0x35a>
					ticker_job_op_cb(user_op,
   10a94:	2101      	movs	r1, #1
   10a96:	9801      	ldr	r0, [sp, #4]
   10a98:	f7ff fb1e 	bl	100d8 <ticker_job_op_cb>
   10a9c:	e062      	b.n	10b64 <ticker_job+0x41a>
					first = 0;
   10a9e:	9a06      	ldr	r2, [sp, #24]
   10aa0:	9203      	str	r2, [sp, #12]
   10aa2:	e7e8      	b.n	10a76 <ticker_job+0x32c>
				ticker_job_op_start(ticker, user_op,
   10aa4:	9b00      	ldr	r3, [sp, #0]
   10aa6:	6959      	ldr	r1, [r3, #20]
	ticker->ticks_periodic = start->ticks_periodic;
   10aa8:	9801      	ldr	r0, [sp, #4]
   10aaa:	68c3      	ldr	r3, [r0, #12]
   10aac:	6063      	str	r3, [r4, #4]
	ticker->remainder_periodic = start->remainder_periodic;
   10aae:	6903      	ldr	r3, [r0, #16]
   10ab0:	61e3      	str	r3, [r4, #28]
	ticker->lazy_periodic = start->lazy;
   10ab2:	8a83      	ldrh	r3, [r0, #20]
   10ab4:	8323      	strh	r3, [r4, #24]
	ticker->ticks_slot = start->ticks_slot;
   10ab6:	8ac3      	ldrh	r3, [r0, #22]
   10ab8:	82e3      	strh	r3, [r4, #22]
	ticker->timeout_func = start->fp_timeout_func;
   10aba:	6983      	ldr	r3, [r0, #24]
   10abc:	60e3      	str	r3, [r4, #12]
	ticker->context = start->context;
   10abe:	69c3      	ldr	r3, [r0, #28]
   10ac0:	6123      	str	r3, [r4, #16]
	ticker->ticks_to_expire = start->ticks_first;
   10ac2:	6883      	ldr	r3, [r0, #8]
   10ac4:	60a3      	str	r3, [r4, #8]
	ticker->ticks_to_expire_minus = 0;
   10ac6:	2500      	movs	r5, #0
   10ac8:	82a5      	strh	r5, [r4, #20]
	ticks_to_expire_prep(ticker, ticks_current, start->ticks_at_start);
   10aca:	6842      	ldr	r2, [r0, #4]
   10acc:	4620      	mov	r0, r4
   10ace:	f7ff fe16 	bl	106fe <ticks_to_expire_prep>
	ticker->remainder_current = 0;
   10ad2:	6225      	str	r5, [r4, #32]
	ticker->lazy_current = 0;
   10ad4:	8365      	strh	r5, [r4, #26]
	ticker->force = 1;
   10ad6:	2301      	movs	r3, #1
   10ad8:	70e3      	strb	r3, [r4, #3]
   10ada:	e054      	b.n	10b86 <ticker_job+0x43c>
		skip = 0;
   10adc:	f04f 0a00 	mov.w	sl, #0
   10ae0:	e00e      	b.n	10b00 <ticker_job+0x3b6>
				skip_collide = 0;
   10ae2:	2300      	movs	r3, #0
   10ae4:	e021      	b.n	10b2a <ticker_job+0x3e0>
		if (ticker->ticks_periodic != 0) {
   10ae6:	6865      	ldr	r5, [r4, #4]
   10ae8:	2d00      	cmp	r5, #0
   10aea:	d05b      	beq.n	10ba4 <ticker_job+0x45a>
						   ticker_remainder_inc(ticker);
   10aec:	4620      	mov	r0, r4
   10aee:	f7ff fac5 	bl	1007c <ticker_remainder_inc>
			ticker->ticks_to_expire += ticker->ticks_periodic +
   10af2:	4428      	add	r0, r5
   10af4:	68a5      	ldr	r5, [r4, #8]
   10af6:	4405      	add	r5, r0
   10af8:	60a5      	str	r5, [r4, #8]
			ticker->lazy_current++;
   10afa:	8b63      	ldrh	r3, [r4, #26]
   10afc:	3301      	adds	r3, #1
   10afe:	8363      	strh	r3, [r4, #26]
	while (id_insert !=
   10b00:	4639      	mov	r1, r7
   10b02:	9800      	ldr	r0, [sp, #0]
   10b04:	f7ff fa2a 	bl	ff5c <ticker_enqueue>
   10b08:	4605      	mov	r5, r0
   10b0a:	4287      	cmp	r7, r0
   10b0c:	d021      	beq.n	10b52 <ticker_job+0x408>
		if (id_collide != TICKER_NULL) {
   10b0e:	2dff      	cmp	r5, #255	; 0xff
   10b10:	d0e9      	beq.n	10ae6 <ticker_job+0x39c>
			struct ticker_node *ticker_collide = &node[id_collide];
   10b12:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   10b16:	ea4f 0883 	mov.w	r8, r3, lsl #2
   10b1a:	eb09 0608 	add.w	r6, r9, r8
			if (ticker_collide->lazy_current >
   10b1e:	8b73      	ldrh	r3, [r6, #26]
			    ticker_collide->lazy_periodic) {
   10b20:	8b32      	ldrh	r2, [r6, #24]
			if (ticker_collide->lazy_current >
   10b22:	4293      	cmp	r3, r2
   10b24:	d9dd      	bls.n	10ae2 <ticker_job+0x398>
				skip_collide = ticker_collide->lazy_current -
   10b26:	1a9b      	subs	r3, r3, r2
   10b28:	b29b      	uxth	r3, r3
			if (ticker_collide->ticks_periodic &&
   10b2a:	6872      	ldr	r2, [r6, #4]
   10b2c:	2a00      	cmp	r2, #0
   10b2e:	d0da      	beq.n	10ae6 <ticker_job+0x39c>
   10b30:	4553      	cmp	r3, sl
   10b32:	d8d8      	bhi.n	10ae6 <ticker_job+0x39c>
			    ticker_collide->force < ticker->force) {
   10b34:	78f2      	ldrb	r2, [r6, #3]
   10b36:	78e3      	ldrb	r3, [r4, #3]
			    skip_collide <= skip &&
   10b38:	429a      	cmp	r2, r3
   10b3a:	d2d4      	bcs.n	10ae6 <ticker_job+0x39c>
					ticker_dequeue(instance, id_collide);
   10b3c:	4629      	mov	r1, r5
   10b3e:	9800      	ldr	r0, [sp, #0]
   10b40:	f7ff fa6c 	bl	1001c <ticker_dequeue>
				ticker_collide->ticks_to_expire =
   10b44:	60b0      	str	r0, [r6, #8]
				ticker_collide->req = ticker_collide->ack;
   10b46:	78b3      	ldrb	r3, [r6, #2]
   10b48:	7073      	strb	r3, [r6, #1]
				ticker_collide->next = *insert_head;
   10b4a:	f809 b008 	strb.w	fp, [r9, r8]
				*insert_head = id_collide;
   10b4e:	46ab      	mov	fp, r5
   10b50:	e7d6      	b.n	10b00 <ticker_job+0x3b6>
	ticker->req = ticker->ack + 1;
   10b52:	78a3      	ldrb	r3, [r4, #2]
   10b54:	3301      	adds	r3, #1
   10b56:	7063      	strb	r3, [r4, #1]
	return TICKER_STATUS_SUCCESS;
   10b58:	2100      	movs	r1, #0
			if (user_op) {
   10b5a:	9b01      	ldr	r3, [sp, #4]
   10b5c:	b113      	cbz	r3, 10b64 <ticker_job+0x41a>
				ticker_job_op_cb(user_op, status);
   10b5e:	4618      	mov	r0, r3
   10b60:	f7ff faba 	bl	100d8 <ticker_job_op_cb>
		while ((insert_head != TICKER_NULL) ||
   10b64:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10b68:	d01e      	beq.n	10ba8 <ticker_job+0x45e>
			if (insert_head != TICKER_NULL) {
   10b6a:	f1bb 0fff 	cmp.w	fp, #255	; 0xff
   10b6e:	f43f af73 	beq.w	10a58 <ticker_job+0x30e>
				ticker = &node[id_insert];
   10b72:	eb0b 02cb 	add.w	r2, fp, fp, lsl #3
   10b76:	0093      	lsls	r3, r2, #2
   10b78:	9a02      	ldr	r2, [sp, #8]
   10b7a:	18d4      	adds	r4, r2, r3
				id_insert = insert_head;
   10b7c:	465f      	mov	r7, fp
				insert_head = ticker->next;
   10b7e:	f812 b003 	ldrb.w	fp, [r2, r3]
				user_op = NULL;
   10b82:	2300      	movs	r3, #0
   10b84:	9301      	str	r3, [sp, #4]
	struct ticker_node *node = &instance->node[0];
   10b86:	9b00      	ldr	r3, [sp, #0]
   10b88:	f8d3 9000 	ldr.w	r9, [r3]
	ticker->next = TICKER_NULL;
   10b8c:	23ff      	movs	r3, #255	; 0xff
   10b8e:	7023      	strb	r3, [r4, #0]
	if (ticker->lazy_current > ticker->lazy_periodic) {
   10b90:	f8b4 a01a 	ldrh.w	sl, [r4, #26]
   10b94:	8b23      	ldrh	r3, [r4, #24]
   10b96:	459a      	cmp	sl, r3
   10b98:	d9a0      	bls.n	10adc <ticker_job+0x392>
		skip = ticker->lazy_current -
   10b9a:	ebaa 0a03 	sub.w	sl, sl, r3
   10b9e:	fa1f fa8a 	uxth.w	sl, sl
   10ba2:	e7ad      	b.n	10b00 <ticker_job+0x3b6>
			return TICKER_STATUS_FAILURE;
   10ba4:	2101      	movs	r1, #1
   10ba6:	e7d8      	b.n	10b5a <ticker_job+0x410>
		       (user_ops_first != user->middle)) {
   10ba8:	9b04      	ldr	r3, [sp, #16]
   10baa:	789b      	ldrb	r3, [r3, #2]
		while ((insert_head != TICKER_NULL) ||
   10bac:	9a03      	ldr	r2, [sp, #12]
   10bae:	429a      	cmp	r2, r3
   10bb0:	d1db      	bne.n	10b6a <ticker_job+0x420>
	while (count_user--) {
   10bb2:	9b07      	ldr	r3, [sp, #28]
   10bb4:	1e5a      	subs	r2, r3, #1
   10bb6:	b2d2      	uxtb	r2, r2
   10bb8:	9207      	str	r2, [sp, #28]
   10bba:	b153      	cbz	r3, 10bd2 <ticker_job+0x488>
		user = &users[count_user];
   10bbc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   10bbe:	9a07      	ldr	r2, [sp, #28]
   10bc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   10bc4:	461a      	mov	r2, r3
   10bc6:	9304      	str	r3, [sp, #16]
		user_ops = (void *)&user->user_op[0];
   10bc8:	685b      	ldr	r3, [r3, #4]
   10bca:	9305      	str	r3, [sp, #20]
		user_ops_first = user->first;
   10bcc:	7853      	ldrb	r3, [r2, #1]
   10bce:	9303      	str	r3, [sp, #12]
   10bd0:	e7c8      	b.n	10b64 <ticker_job+0x41a>
	if (instance->ticker_id_head != ticker_id_old_head) {
   10bd2:	9b00      	ldr	r3, [sp, #0]
   10bd4:	7e1b      	ldrb	r3, [r3, #24]
   10bd6:	9a09      	ldr	r2, [sp, #36]	; 0x24
   10bd8:	429a      	cmp	r2, r3
   10bda:	d001      	beq.n	10be0 <ticker_job+0x496>
		flag_compare_update = 1;
   10bdc:	2301      	movs	r3, #1
   10bde:	9308      	str	r3, [sp, #32]
	if (!pending) {
   10be0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10be2:	b18b      	cbz	r3, 10c08 <ticker_job+0x4be>
	instance->job_guard = 0;
   10be4:	2300      	movs	r3, #0
   10be6:	9a00      	ldr	r2, [sp, #0]
   10be8:	7713      	strb	r3, [r2, #28]
	if (flag_compare_update) {
   10bea:	9b08      	ldr	r3, [sp, #32]
   10bec:	2b00      	cmp	r3, #0
   10bee:	d13f      	bne.n	10c70 <ticker_job+0x526>
	if (instance->worker_trigger) {
   10bf0:	9b00      	ldr	r3, [sp, #0]
   10bf2:	7f5b      	ldrb	r3, [r3, #29]
   10bf4:	b12b      	cbz	r3, 10c02 <ticker_job+0x4b8>
		instance->fp_sched(CALL_ID_JOB, CALL_ID_WORKER, 1);
   10bf6:	9b00      	ldr	r3, [sp, #0]
   10bf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   10bfa:	2201      	movs	r2, #1
   10bfc:	4611      	mov	r1, r2
   10bfe:	2002      	movs	r0, #2
   10c00:	4798      	blx	r3
}
   10c02:	b00d      	add	sp, #52	; 0x34
   10c04:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	users = &instance->user[0];
   10c08:	9a00      	ldr	r2, [sp, #0]
   10c0a:	f8d2 8004 	ldr.w	r8, [r2, #4]
	count_user = instance->count_user;
   10c0e:	7a53      	ldrb	r3, [r2, #9]
   10c10:	e026      	b.n	10c60 <ticker_job+0x516>
		uop->status = TICKER_STATUS_SUCCESS;
   10c12:	2300      	movs	r3, #0
   10c14:	623b      	str	r3, [r7, #32]
		fp_op_func = uop->fp_op_func;
   10c16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
	if (fp_op_func) {
   10c18:	b113      	cbz	r3, 10c20 <ticker_job+0x4d6>
		fp_op_func(uop->status, uop->op_context);
   10c1a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
   10c1c:	6a38      	ldr	r0, [r7, #32]
   10c1e:	4798      	blx	r3
			first = user->first + 1;
   10c20:	7863      	ldrb	r3, [r4, #1]
   10c22:	3301      	adds	r3, #1
   10c24:	b2db      	uxtb	r3, r3
			if (first == user->count_user_op) {
   10c26:	7822      	ldrb	r2, [r4, #0]
   10c28:	4293      	cmp	r3, r2
   10c2a:	d016      	beq.n	10c5a <ticker_job+0x510>
			user->first = first;
   10c2c:	7063      	strb	r3, [r4, #1]
		while (user->first != user->last) {
   10c2e:	7862      	ldrb	r2, [r4, #1]
   10c30:	78e3      	ldrb	r3, [r4, #3]
   10c32:	429a      	cmp	r2, r3
   10c34:	d013      	beq.n	10c5e <ticker_job+0x514>
			ticker_job_op_inquire(instance, &user_op[user->first]);
   10c36:	232c      	movs	r3, #44	; 0x2c
   10c38:	fb03 f302 	mul.w	r3, r3, r2
   10c3c:	18ef      	adds	r7, r5, r3
	switch (uop->op) {
   10c3e:	5ceb      	ldrb	r3, [r5, r3]
   10c40:	2b01      	cmp	r3, #1
   10c42:	d0e6      	beq.n	10c12 <ticker_job+0x4c8>
   10c44:	2b02      	cmp	r3, #2
   10c46:	d106      	bne.n	10c56 <ticker_job+0x50c>
		ticker_by_next_slot_get(instance,
   10c48:	68fb      	ldr	r3, [r7, #12]
   10c4a:	68ba      	ldr	r2, [r7, #8]
   10c4c:	6879      	ldr	r1, [r7, #4]
   10c4e:	9800      	ldr	r0, [sp, #0]
   10c50:	f7ff f955 	bl	fefe <ticker_by_next_slot_get>
   10c54:	e7dd      	b.n	10c12 <ticker_job+0x4c8>
	fp_op_func = NULL;
   10c56:	2300      	movs	r3, #0
   10c58:	e7de      	b.n	10c18 <ticker_job+0x4ce>
				first = 0;
   10c5a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   10c5c:	e7e6      	b.n	10c2c <ticker_job+0x4e2>
	while (count_user--) {
   10c5e:	4633      	mov	r3, r6
   10c60:	1e5e      	subs	r6, r3, #1
   10c62:	b2f6      	uxtb	r6, r6
   10c64:	2b00      	cmp	r3, #0
   10c66:	d0bd      	beq.n	10be4 <ticker_job+0x49a>
		user = &users[count_user];
   10c68:	eb08 04c6 	add.w	r4, r8, r6, lsl #3
		user_op = &user->user_op[0];
   10c6c:	6865      	ldr	r5, [r4, #4]
   10c6e:	e7de      	b.n	10c2e <ticker_job+0x4e4>
	if (instance->ticker_id_head == TICKER_NULL) {
   10c70:	7e13      	ldrb	r3, [r2, #24]
   10c72:	2bff      	cmp	r3, #255	; 0xff
   10c74:	d02f      	beq.n	10cd6 <ticker_job+0x58c>
	if (ticker_id_old_head == TICKER_NULL) {
   10c76:	9b09      	ldr	r3, [sp, #36]	; 0x24
   10c78:	2bff      	cmp	r3, #255	; 0xff
   10c7a:	d034      	beq.n	10ce6 <ticker_job+0x59c>
	ticker = &instance->node[instance->ticker_id_head];
   10c7c:	9800      	ldr	r0, [sp, #0]
   10c7e:	6802      	ldr	r2, [r0, #0]
   10c80:	7e03      	ldrb	r3, [r0, #24]
   10c82:	eb03 03c3 	add.w	r3, r3, r3, lsl #3
   10c86:	0099      	lsls	r1, r3, #2
   10c88:	440a      	add	r2, r1
	ticks_to_expire = ticker->ticks_to_expire;
   10c8a:	6897      	ldr	r7, [r2, #8]
	i = 10;
   10c8c:	250a      	movs	r5, #10
   10c8e:	4680      	mov	r8, r0
		LL_ASSERT(i);
   10c90:	b39d      	cbz	r5, 10cfa <ticker_job+0x5b0>
		i--;
   10c92:	3d01      	subs	r5, #1
		ctr = cntr_cnt_get();
   10c94:	f7fd ff68 	bl	eb68 <cntr_cnt_get>
   10c98:	4606      	mov	r6, r0
		cc = instance->ticks_current;
   10c9a:	f8d8 4014 	ldr.w	r4, [r8, #20]
		ticks_elapsed = ticker_ticks_diff_get(ctr, cc) +
   10c9e:	4621      	mov	r1, r4
   10ca0:	f7ff fcce 	bl	10640 <ticker_ticks_diff_get>
   10ca4:	3003      	adds	r0, #3
		cc += ((ticks_elapsed < ticks_to_expire) ?
   10ca6:	4287      	cmp	r7, r0
   10ca8:	bf2c      	ite	cs
   10caa:	19e4      	addcs	r4, r4, r7
   10cac:	1824      	addcc	r4, r4, r0
		cc &= 0x00FFFFFF;
   10cae:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
		instance->fp_cmp_set(cc);
   10cb2:	f8d8 3028 	ldr.w	r3, [r8, #40]	; 0x28
   10cb6:	4620      	mov	r0, r4
   10cb8:	4798      	blx	r3
		ctr_post = cntr_cnt_get();
   10cba:	f7fd ff55 	bl	eb68 <cntr_cnt_get>
	} while ((ticker_ticks_diff_get(ctr_post, ctr) +
   10cbe:	4631      	mov	r1, r6
   10cc0:	f7ff fcbe 	bl	10640 <ticker_ticks_diff_get>
   10cc4:	f100 0903 	add.w	r9, r0, #3
		  COUNTER_CMP_OFFSET_MIN) > ticker_ticks_diff_get(cc, ctr));
   10cc8:	4631      	mov	r1, r6
   10cca:	4620      	mov	r0, r4
   10ccc:	f7ff fcb8 	bl	10640 <ticker_ticks_diff_get>
   10cd0:	4581      	cmp	r9, r0
   10cd2:	d8dd      	bhi.n	10c90 <ticker_job+0x546>
   10cd4:	e78c      	b.n	10bf0 <ticker_job+0x4a6>
		if (cntr_stop() == 0) {
   10cd6:	f7fd ff2d 	bl	eb34 <cntr_stop>
   10cda:	2800      	cmp	r0, #0
   10cdc:	d188      	bne.n	10bf0 <ticker_job+0x4a6>
			instance->ticks_slot_previous = 0;
   10cde:	2300      	movs	r3, #0
   10ce0:	9a00      	ldr	r2, [sp, #0]
   10ce2:	8353      	strh	r3, [r2, #26]
   10ce4:	e784      	b.n	10bf0 <ticker_job+0x4a6>
		ticks_current = cntr_cnt_get();
   10ce6:	f7fd ff3f 	bl	eb68 <cntr_cnt_get>
   10cea:	4604      	mov	r4, r0
		if (cntr_start() == 0) {
   10cec:	f7fd ff12 	bl	eb14 <cntr_start>
   10cf0:	2800      	cmp	r0, #0
   10cf2:	d1c3      	bne.n	10c7c <ticker_job+0x532>
			instance->ticks_current = ticks_current;
   10cf4:	9b00      	ldr	r3, [sp, #0]
   10cf6:	615c      	str	r4, [r3, #20]
   10cf8:	e7c0      	b.n	10c7c <ticker_job+0x532>
		LL_ASSERT(i);
   10cfa:	4040      	eors	r0, r0
   10cfc:	f380 8811 	msr	BASEPRI, r0
   10d00:	f04f 0004 	mov.w	r0, #4
   10d04:	df02      	svc	2
	...

00010d08 <bt_rand>:
#include "hal/ecb.h"

K_MUTEX_DEFINE(mutex_rand);

int bt_rand(void *buf, size_t len)
{
   10d08:	b570      	push	{r4, r5, r6, lr}
   10d0a:	4606      	mov	r6, r0
   10d0c:	460c      	mov	r4, r1
	while (len) {
   10d0e:	b19c      	cbz	r4, 10d38 <bt_rand+0x30>
K_SYSCALL_DECLARE2(K_SYSCALL_K_MUTEX_LOCK, k_mutex_lock, int, struct k_mutex *, mutex, s32_t, timeout);
   10d10:	4d0a      	ldr	r5, [pc, #40]	; (10d3c <bt_rand+0x34>)
   10d12:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   10d16:	4628      	mov	r0, r5
   10d18:	f016 fe48 	bl	279ac <_impl_k_mutex_lock>
		k_mutex_lock(&mutex_rand, K_FOREVER);
		len = rand_get(len, buf);
   10d1c:	4631      	mov	r1, r6
   10d1e:	4620      	mov	r0, r4
   10d20:	f7ff f89a 	bl	fe58 <rand_get>
   10d24:	4604      	mov	r4, r0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_MUTEX_UNLOCK, k_mutex_unlock, struct k_mutex *, mutex);
   10d26:	4628      	mov	r0, r5
   10d28:	f016 feaa 	bl	27a80 <_impl_k_mutex_unlock>
		k_mutex_unlock(&mutex_rand);
		if (len) {
   10d2c:	2c00      	cmp	r4, #0
   10d2e:	d0ee      	beq.n	10d0e <bt_rand+0x6>
   10d30:	bf20      	wfe
  __ASM volatile ("sev");
   10d32:	bf40      	sev
  __ASM volatile ("wfe");
   10d34:	bf20      	wfe
   10d36:	e7ea      	b.n	10d0e <bt_rand+0x6>
			cpu_sleep();
		}
	}

	return 0;
}
   10d38:	2000      	movs	r0, #0
   10d3a:	bd70      	pop	{r4, r5, r6, pc}
   10d3c:	2000ccf0 	.word	0x2000ccf0

00010d40 <bt_encrypt_le>:

int bt_encrypt_le(const u8_t key[16], const u8_t plaintext[16],
		  u8_t enc_data[16])
{
   10d40:	b508      	push	{r3, lr}
	BT_DBG("key %s plaintext %s", bt_hex(key, 16), bt_hex(plaintext, 16));

	ecb_encrypt(key, plaintext, enc_data, NULL);
   10d42:	2300      	movs	r3, #0
   10d44:	f7fd ff4c 	bl	ebe0 <ecb_encrypt>

	BT_DBG("enc_data %s", bt_hex(enc_data, 16));

	return 0;
}
   10d48:	2000      	movs	r0, #0
   10d4a:	bd08      	pop	{r3, pc}

00010d4c <ticker_if_done>:
	*((u32_t volatile *)ops_context) = status;
   10d4c:	6008      	str	r0, [r1, #0]
   10d4e:	4770      	bx	lr

00010d50 <mayfly_xtal_start>:
{
   10d50:	b508      	push	{r3, lr}
	clock_control_on(_radio.hf_clock, NULL);
   10d52:	4b03      	ldr	r3, [pc, #12]	; (10d60 <mayfly_xtal_start+0x10>)
   10d54:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10d56:	6843      	ldr	r3, [r0, #4]
	return api->on(dev, sys);
   10d58:	681b      	ldr	r3, [r3, #0]
   10d5a:	2100      	movs	r1, #0
   10d5c:	4798      	blx	r3
   10d5e:	bd08      	pop	{r3, pc}
   10d60:	20000f84 	.word	0x20000f84

00010d64 <mayfly_xtal_stop>:
{
   10d64:	b508      	push	{r3, lr}
	clock_control_off(_radio.hf_clock, NULL);
   10d66:	4b03      	ldr	r3, [pc, #12]	; (10d74 <mayfly_xtal_stop+0x10>)
   10d68:	6818      	ldr	r0, [r3, #0]
	const struct clock_control_driver_api *api = dev->driver_api;
   10d6a:	6843      	ldr	r3, [r0, #4]
	return api->off(dev, sys);
   10d6c:	685b      	ldr	r3, [r3, #4]
   10d6e:	2100      	movs	r1, #0
   10d70:	4798      	blx	r3
   10d72:	bd08      	pop	{r3, pc}
   10d74:	20000f84 	.word	0x20000f84

00010d78 <prepare_reduced>:
	if (status == 0) {
   10d78:	b918      	cbnz	r0, 10d82 <prepare_reduced+0xa>
		hdr->ticks_xtal_to_start |= ((u32_t)1 << 31);
   10d7a:	680b      	ldr	r3, [r1, #0]
   10d7c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   10d80:	600b      	str	r3, [r1, #0]
   10d82:	4770      	bx	lr

00010d84 <prepare_normal>:
	if (status == 0) {
   10d84:	b918      	cbnz	r0, 10d8e <prepare_normal+0xa>
		hdr->ticks_xtal_to_start &= ~((u32_t)1 << 31);
   10d86:	680b      	ldr	r3, [r1, #0]
   10d88:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   10d8c:	600b      	str	r3, [r1, #0]
   10d8e:	4770      	bx	lr

00010d90 <chan_sel_remap>:
{
   10d90:	b470      	push	{r4, r5, r6}
	byte_count = 5;
   10d92:	2405      	movs	r4, #5
	chan_next = 0;
   10d94:	2200      	movs	r2, #0
	while (byte_count--) {
   10d96:	e011      	b.n	10dbc <chan_sel_remap+0x2c>
			chan_next++;
   10d98:	3201      	adds	r2, #1
   10d9a:	b2d2      	uxtb	r2, r2
			bite >>= 1;
   10d9c:	086d      	lsrs	r5, r5, #1
		while (bit_count--) {
   10d9e:	461c      	mov	r4, r3
   10da0:	1e63      	subs	r3, r4, #1
   10da2:	b2db      	uxtb	r3, r3
   10da4:	b134      	cbz	r4, 10db4 <chan_sel_remap+0x24>
			if (bite & 0x01) {
   10da6:	f015 0f01 	tst.w	r5, #1
   10daa:	d0f5      	beq.n	10d98 <chan_sel_remap+0x8>
				if (chan_index == 0) {
   10dac:	b111      	cbz	r1, 10db4 <chan_sel_remap+0x24>
				chan_index--;
   10dae:	3901      	subs	r1, #1
   10db0:	b2c9      	uxtb	r1, r1
   10db2:	e7f1      	b.n	10d98 <chan_sel_remap+0x8>
		if (bit_count < 8) {
   10db4:	2b07      	cmp	r3, #7
   10db6:	d907      	bls.n	10dc8 <chan_sel_remap+0x38>
		chan_map++;
   10db8:	3001      	adds	r0, #1
	while (byte_count--) {
   10dba:	4634      	mov	r4, r6
   10dbc:	1e63      	subs	r3, r4, #1
   10dbe:	b2de      	uxtb	r6, r3
   10dc0:	b114      	cbz	r4, 10dc8 <chan_sel_remap+0x38>
		bite = *chan_map;
   10dc2:	7805      	ldrb	r5, [r0, #0]
		bit_count = 8;
   10dc4:	2408      	movs	r4, #8
		while (bit_count--) {
   10dc6:	e7eb      	b.n	10da0 <chan_sel_remap+0x10>
}
   10dc8:	4610      	mov	r0, r2
   10dca:	bc70      	pop	{r4, r5, r6}
   10dcc:	4770      	bx	lr
	...

00010dd0 <chan_sel_1>:
{
   10dd0:	b570      	push	{r4, r5, r6, lr}
   10dd2:	4605      	mov	r5, r0
   10dd4:	f89d 6010 	ldrb.w	r6, [sp, #16]
	chan_next = ((*chan_use) + (hop * (1 + latency))) % 37;
   10dd8:	7804      	ldrb	r4, [r0, #0]
   10dda:	fb02 1101 	mla	r1, r2, r1, r1
   10dde:	4421      	add	r1, r4
   10de0:	4c0f      	ldr	r4, [pc, #60]	; (10e20 <chan_sel_1+0x50>)
   10de2:	fb84 2401 	smull	r2, r4, r4, r1
   10de6:	1862      	adds	r2, r4, r1
   10de8:	17cc      	asrs	r4, r1, #31
   10dea:	ebc4 1462 	rsb	r4, r4, r2, asr #5
   10dee:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   10df2:	eb04 0482 	add.w	r4, r4, r2, lsl #2
   10df6:	1b0c      	subs	r4, r1, r4
   10df8:	b2e0      	uxtb	r0, r4
	*chan_use = chan_next;
   10dfa:	7028      	strb	r0, [r5, #0]
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10dfc:	08c2      	lsrs	r2, r0, #3
   10dfe:	5c9a      	ldrb	r2, [r3, r2]
   10e00:	f004 0407 	and.w	r4, r4, #7
   10e04:	fa42 f404 	asr.w	r4, r2, r4
   10e08:	f014 0f01 	tst.w	r4, #1
   10e0c:	d107      	bne.n	10e1e <chan_sel_1+0x4e>
		chan_index = chan_next % chan_count;
   10e0e:	fbb0 f1f6 	udiv	r1, r0, r6
   10e12:	fb06 0111 	mls	r1, r6, r1, r0
		chan_next = chan_sel_remap(chan_map, chan_index);
   10e16:	b2c9      	uxtb	r1, r1
   10e18:	4618      	mov	r0, r3
   10e1a:	f7ff ffb9 	bl	10d90 <chan_sel_remap>
}
   10e1e:	bd70      	pop	{r4, r5, r6, pc}
   10e20:	dd67c8a7 	.word	0xdd67c8a7

00010e24 <chan_rev_8>:
	o = 0;
   10e24:	2300      	movs	r3, #0
	for (iterate = 0; iterate < 8; iterate++) {
   10e26:	461a      	mov	r2, r3
   10e28:	e007      	b.n	10e3a <chan_rev_8+0x16>
		o <<= 1;
   10e2a:	005b      	lsls	r3, r3, #1
   10e2c:	b2db      	uxtb	r3, r3
		o |= (i & 1);
   10e2e:	f000 0101 	and.w	r1, r0, #1
   10e32:	430b      	orrs	r3, r1
		i >>= 1;
   10e34:	0840      	lsrs	r0, r0, #1
	for (iterate = 0; iterate < 8; iterate++) {
   10e36:	3201      	adds	r2, #1
   10e38:	b2d2      	uxtb	r2, r2
   10e3a:	2a07      	cmp	r2, #7
   10e3c:	d9f5      	bls.n	10e2a <chan_rev_8+0x6>
}
   10e3e:	4618      	mov	r0, r3
   10e40:	4770      	bx	lr

00010e42 <chan_perm>:
{
   10e42:	b538      	push	{r3, r4, r5, lr}
   10e44:	4604      	mov	r4, r0
	return (chan_rev_8((i >> 8) & 0xFF) << 8) | chan_rev_8(i & 0xFF);
   10e46:	0a00      	lsrs	r0, r0, #8
   10e48:	f7ff ffec 	bl	10e24 <chan_rev_8>
   10e4c:	0205      	lsls	r5, r0, #8
   10e4e:	b2e0      	uxtb	r0, r4
   10e50:	f7ff ffe8 	bl	10e24 <chan_rev_8>
   10e54:	b200      	sxth	r0, r0
   10e56:	4328      	orrs	r0, r5
}
   10e58:	b280      	uxth	r0, r0
   10e5a:	bd38      	pop	{r3, r4, r5, pc}

00010e5c <chan_mam>:
	return ((u32_t)a * 17 + b) & 0xFFFF;
   10e5c:	eb00 1000 	add.w	r0, r0, r0, lsl #4
   10e60:	fa11 f080 	uxtah	r0, r1, r0
}
   10e64:	b280      	uxth	r0, r0
   10e66:	4770      	bx	lr

00010e68 <chan_prn>:
{
   10e68:	b538      	push	{r3, r4, r5, lr}
   10e6a:	460d      	mov	r5, r1
	prn_e = counter ^ chan_id;
   10e6c:	4048      	eors	r0, r1
	for (iterate = 0; iterate < 3; iterate++) {
   10e6e:	2400      	movs	r4, #0
   10e70:	e006      	b.n	10e80 <chan_prn+0x18>
		prn_e = chan_perm(prn_e);
   10e72:	f7ff ffe6 	bl	10e42 <chan_perm>
		prn_e = chan_mam(prn_e, chan_id);
   10e76:	4629      	mov	r1, r5
   10e78:	f7ff fff0 	bl	10e5c <chan_mam>
	for (iterate = 0; iterate < 3; iterate++) {
   10e7c:	3401      	adds	r4, #1
   10e7e:	b2e4      	uxtb	r4, r4
   10e80:	2c02      	cmp	r4, #2
   10e82:	d9f6      	bls.n	10e72 <chan_prn+0xa>
	prn_e ^= chan_id;
   10e84:	4068      	eors	r0, r5
}
   10e86:	b280      	uxth	r0, r0
   10e88:	bd38      	pop	{r3, r4, r5, pc}
	...

00010e8c <chan_sel_2>:
{
   10e8c:	b538      	push	{r3, r4, r5, lr}
   10e8e:	4615      	mov	r5, r2
   10e90:	461c      	mov	r4, r3
	prn_e = chan_prn(counter, chan_id);
   10e92:	f7ff ffe9 	bl	10e68 <chan_prn>
   10e96:	4601      	mov	r1, r0
	chan_next = prn_e % 37;
   10e98:	4a0e      	ldr	r2, [pc, #56]	; (10ed4 <chan_sel_2+0x48>)
   10e9a:	fba2 3200 	umull	r3, r2, r2, r0
   10e9e:	1a80      	subs	r0, r0, r2
   10ea0:	eb02 0250 	add.w	r2, r2, r0, lsr #1
   10ea4:	0952      	lsrs	r2, r2, #5
   10ea6:	eb02 00c2 	add.w	r0, r2, r2, lsl #3
   10eaa:	eb02 0280 	add.w	r2, r2, r0, lsl #2
   10eae:	1a8a      	subs	r2, r1, r2
   10eb0:	b2d0      	uxtb	r0, r2
	if ((chan_map[chan_next >> 3] & (1 << (chan_next % 8))) == 0) {
   10eb2:	08c3      	lsrs	r3, r0, #3
   10eb4:	5ceb      	ldrb	r3, [r5, r3]
   10eb6:	f000 0207 	and.w	r2, r0, #7
   10eba:	4113      	asrs	r3, r2
   10ebc:	f013 0f01 	tst.w	r3, #1
   10ec0:	d106      	bne.n	10ed0 <chan_sel_2+0x44>
		chan_index = ((u32_t)chan_count * prn_e) >> 16;
   10ec2:	fb04 f101 	mul.w	r1, r4, r1
		chan_next = chan_sel_remap(chan_map, chan_index);
   10ec6:	f3c1 4107 	ubfx	r1, r1, #16, #8
   10eca:	4628      	mov	r0, r5
   10ecc:	f7ff ff60 	bl	10d90 <chan_sel_remap>
}
   10ed0:	bd38      	pop	{r3, r4, r5, pc}
   10ed2:	bf00      	nop
   10ed4:	bacf914d 	.word	0xbacf914d

00010ed8 <ctrl_tx_last_enqueue>:
}

static void ctrl_tx_last_enqueue(struct connection *conn,
				 struct radio_pdu_node_tx *node_tx)
{
	node_tx->next = conn->pkt_tx_ctrl_last->next;
   10ed8:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10edc:	681b      	ldr	r3, [r3, #0]
   10ede:	600b      	str	r3, [r1, #0]
	conn->pkt_tx_ctrl_last->next = node_tx;
   10ee0:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10ee4:	6019      	str	r1, [r3, #0]
	conn->pkt_tx_ctrl_last = node_tx;
   10ee6:	f8c0 1144 	str.w	r1, [r0, #324]	; 0x144
   10eea:	4770      	bx	lr

00010eec <ctrl_tx_enqueue>:
}

static void ctrl_tx_enqueue(struct connection *conn,
			    struct radio_pdu_node_tx *node_tx)
{
   10eec:	b538      	push	{r3, r4, r5, lr}
   10eee:	4604      	mov	r4, r0
   10ef0:	460d      	mov	r5, r1
	/* check if a packet was tx-ed and not acked by peer */
	if (
	    /* An explicit empty PDU is not enqueued */
	    !conn->empty &&
   10ef2:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
	if (
   10ef6:	f013 0f80 	tst.w	r3, #128	; 0x80
   10efa:	d11f      	bne.n	10f3c <ctrl_tx_enqueue+0x50>
	    /* and data/ctrl packet is in the head */
	    conn->pkt_tx_head &&
   10efc:	f8d0 213c 	ldr.w	r2, [r0, #316]	; 0x13c
	    !conn->empty &&
   10f00:	b1e2      	cbz	r2, 10f3c <ctrl_tx_enqueue+0x50>
	    conn->pkt_tx_head &&
   10f02:	f013 0f08 	tst.w	r3, #8
   10f06:	d119      	bne.n	10f3c <ctrl_tx_enqueue+0x50>

		/* if data transmited once, keep it at head of the tx list,
		 * as we will insert a ctrl after it, hence advance the
		 * data pointer
		 */
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   10f08:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   10f0c:	429a      	cmp	r2, r3
   10f0e:	d007      	beq.n	10f20 <ctrl_tx_enqueue+0x34>
		}

		/* if no ctrl packet already queued, new ctrl added will be
		 * the ctrl pointer and is inserted after head.
		 */
		if (!conn->pkt_tx_ctrl) {
   10f10:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10f14:	b143      	cbz	r3, 10f28 <ctrl_tx_enqueue+0x3c>
			node_tx->next = conn->pkt_tx_head->next;
			conn->pkt_tx_head->next = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10f16:	4629      	mov	r1, r5
   10f18:	4620      	mov	r0, r4
   10f1a:	f7ff ffdd 	bl	10ed8 <ctrl_tx_last_enqueue>
   10f1e:	e014      	b.n	10f4a <ctrl_tx_enqueue+0x5e>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   10f20:	681b      	ldr	r3, [r3, #0]
   10f22:	f8c0 3148 	str.w	r3, [r0, #328]	; 0x148
   10f26:	e7f3      	b.n	10f10 <ctrl_tx_enqueue+0x24>
			node_tx->next = conn->pkt_tx_head->next;
   10f28:	6813      	ldr	r3, [r2, #0]
   10f2a:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head->next = node_tx;
   10f2c:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10f30:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_ctrl = node_tx;
   10f32:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10f36:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10f3a:	e006      	b.n	10f4a <ctrl_tx_enqueue+0x5e>
		/* No packet needing ACK. */

		/* If first ctrl packet then add it as head else add it to the
		 * tail of the ctrl packets.
		 */
		if (!conn->pkt_tx_ctrl) {
   10f3c:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   10f40:	b133      	cbz	r3, 10f50 <ctrl_tx_enqueue+0x64>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
			conn->pkt_tx_ctrl = node_tx;
			conn->pkt_tx_ctrl_last = node_tx;
		} else {
			ctrl_tx_last_enqueue(conn, node_tx);
   10f42:	4629      	mov	r1, r5
   10f44:	4620      	mov	r0, r4
   10f46:	f7ff ffc7 	bl	10ed8 <ctrl_tx_last_enqueue>
		}
	}

	/* Update last pointer if ctrl added at end of tx list */
	if (node_tx->next == 0) {
   10f4a:	682b      	ldr	r3, [r5, #0]
   10f4c:	b153      	cbz	r3, 10f64 <ctrl_tx_enqueue+0x78>
   10f4e:	bd38      	pop	{r3, r4, r5, pc}
			node_tx->next = conn->pkt_tx_head;
   10f50:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   10f54:	602b      	str	r3, [r5, #0]
			conn->pkt_tx_head = node_tx;
   10f56:	f8c4 513c 	str.w	r5, [r4, #316]	; 0x13c
			conn->pkt_tx_ctrl = node_tx;
   10f5a:	f8c4 5140 	str.w	r5, [r4, #320]	; 0x140
			conn->pkt_tx_ctrl_last = node_tx;
   10f5e:	f8c4 5144 	str.w	r5, [r4, #324]	; 0x144
   10f62:	e7f2      	b.n	10f4a <ctrl_tx_enqueue+0x5e>
		conn->pkt_tx_last = node_tx;
   10f64:	f8c4 514c 	str.w	r5, [r4, #332]	; 0x14c
	}
}
   10f68:	e7f1      	b.n	10f4e <ctrl_tx_enqueue+0x62>

00010f6a <ctrl_tx_sec_enqueue>:

static void ctrl_tx_sec_enqueue(struct connection *conn,
				  struct radio_pdu_node_tx *node_tx)
{
   10f6a:	b508      	push	{r3, lr}
	if (conn->pause_tx) {
   10f6c:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   10f70:	f013 0f08 	tst.w	r3, #8
   10f74:	d010      	beq.n	10f98 <ctrl_tx_sec_enqueue+0x2e>
		if (!conn->pkt_tx_ctrl) {
   10f76:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   10f7a:	b13b      	cbz	r3, 10f8c <ctrl_tx_sec_enqueue+0x22>
			node_tx->next = conn->pkt_tx_head;
			conn->pkt_tx_head = node_tx;
		} else {
			node_tx->next = conn->pkt_tx_ctrl_last->next;
   10f7c:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10f80:	681b      	ldr	r3, [r3, #0]
   10f82:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_ctrl_last->next = node_tx;
   10f84:	f8d0 3144 	ldr.w	r3, [r0, #324]	; 0x144
   10f88:	6019      	str	r1, [r3, #0]
   10f8a:	bd08      	pop	{r3, pc}
			node_tx->next = conn->pkt_tx_head;
   10f8c:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   10f90:	600b      	str	r3, [r1, #0]
			conn->pkt_tx_head = node_tx;
   10f92:	f8c0 113c 	str.w	r1, [r0, #316]	; 0x13c
   10f96:	bd08      	pop	{r3, pc}
		}
	} else {
		ctrl_tx_enqueue(conn, node_tx);
   10f98:	f7ff ffa8 	bl	10eec <ctrl_tx_enqueue>
   10f9c:	bd08      	pop	{r3, pc}
	...

00010fa0 <conn_update_req>:
}

#if defined(CONFIG_BT_CTLR_SCHED_ADVANCED)
static u32_t conn_update_req(struct connection *conn)
{
	if (conn->llcp_req != conn->llcp_ack) {
   10fa0:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   10fa4:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   10fa8:	428b      	cmp	r3, r1
   10faa:	d001      	beq.n	10fb0 <conn_update_req+0x10>
		return 1;
   10fac:	2001      	movs	r0, #1
   10fae:	4770      	bx	lr
{
   10fb0:	b530      	push	{r4, r5, lr}
	}

	if (!conn->role) {
   10fb2:	f990 301d 	ldrsb.w	r3, [r0, #29]
   10fb6:	2b00      	cmp	r3, #0
   10fb8:	db2a      	blt.n	11010 <conn_update_req+0x70>
		conn->llcp.conn_upd.win_size = 1;
   10fba:	2401      	movs	r4, #1
   10fbc:	f880 4088 	strb.w	r4, [r0, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   10fc0:	2200      	movs	r2, #0
   10fc2:	f8c0 2084 	str.w	r2, [r0, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->conn_interval;
   10fc6:	8c85      	ldrh	r5, [r0, #36]	; 0x24
   10fc8:	f8a0 507a 	strh.w	r5, [r0, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->latency;
   10fcc:	8cc3      	ldrh	r3, [r0, #38]	; 0x26
   10fce:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->conn_interval *
					      conn->supervision_reload *
   10fd2:	8fc3      	ldrh	r3, [r0, #62]	; 0x3e
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10fd4:	fb03 f305 	mul.w	r3, r3, r5
					      conn->supervision_reload *
   10fd8:	ebc3 1543 	rsb	r5, r3, r3, lsl #5
   10fdc:	eb03 0385 	add.w	r3, r3, r5, lsl #2
					      125 / 1000;
   10fe0:	4d26      	ldr	r5, [pc, #152]	; (1107c <conn_update_req+0xdc>)
   10fe2:	fb85 e503 	smull	lr, r5, r5, r3
   10fe6:	17db      	asrs	r3, r3, #31
   10fe8:	ebc3 13a5 	rsb	r3, r3, r5, asr #6
		conn->llcp.conn_upd.timeout = conn->conn_interval *
   10fec:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		/* conn->llcp.conn_upd.instant     = 0; */
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   10ff0:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
   10ff4:	f364 0301 	bfi	r3, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 1;
   10ff8:	b2db      	uxtb	r3, r3
   10ffa:	f043 0304 	orr.w	r3, r3, #4
   10ffe:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78

		conn->llcp_type = LLCP_CONN_UPD;
   11002:	f880 4076 	strb.w	r4, [r0, #118]	; 0x76
		conn->llcp_ack--;
   11006:	3901      	subs	r1, #1
   11008:	f880 1075 	strb.w	r1, [r0, #117]	; 0x75

		return 0;
   1100c:	4610      	mov	r0, r2
   1100e:	bd30      	pop	{r4, r5, pc}

#if defined(CONFIG_BT_CTLR_CONN_PARAM_REQ)
	} else if (conn->common.fex_valid &&
   11010:	f890 3050 	ldrb.w	r3, [r0, #80]	; 0x50
   11014:	f013 0f20 	tst.w	r3, #32
   11018:	d101      	bne.n	1101e <conn_update_req+0x7e>
		return 0;
#endif /* !CONFIG_BT_CTLR_CONN_PARAM_REQ */

	}

	return 2;
   1101a:	2002      	movs	r0, #2
   1101c:	bd30      	pop	{r4, r5, pc}
		   (conn->llcp_features &
   1101e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
	} else if (conn->common.fex_valid &&
   11022:	f013 0f02 	tst.w	r3, #2
   11026:	d101      	bne.n	1102c <conn_update_req+0x8c>
	return 2;
   11028:	2002      	movs	r0, #2
}
   1102a:	bd30      	pop	{r4, r5, pc}
		conn->llcp_conn_param.status = 0;
   1102c:	2300      	movs	r3, #0
   1102e:	f880 30c3 	strb.w	r3, [r0, #195]	; 0xc3
		conn->llcp_conn_param.interval = conn->conn_interval;
   11032:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   11034:	f8a0 10c4 	strh.w	r1, [r0, #196]	; 0xc4
		conn->llcp_conn_param.latency = conn->latency;
   11038:	8cc2      	ldrh	r2, [r0, #38]	; 0x26
   1103a:	f8a0 20c6 	strh.w	r2, [r0, #198]	; 0xc6
						conn->supervision_reload *
   1103e:	8fc2      	ldrh	r2, [r0, #62]	; 0x3e
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11040:	fb02 f201 	mul.w	r2, r2, r1
						conn->supervision_reload *
   11044:	ebc2 1142 	rsb	r1, r2, r2, lsl #5
   11048:	eb02 0281 	add.w	r2, r2, r1, lsl #2
						125 / 1000;
   1104c:	490b      	ldr	r1, [pc, #44]	; (1107c <conn_update_req+0xdc>)
   1104e:	fb81 4102 	smull	r4, r1, r1, r2
   11052:	17d2      	asrs	r2, r2, #31
   11054:	ebc2 12a1 	rsb	r2, r2, r1, asr #6
		conn->llcp_conn_param.timeout = conn->conn_interval *
   11058:	f8a0 20c8 	strh.w	r2, [r0, #200]	; 0xc8
		conn->llcp_conn_param.state = LLCP_CPR_STATE_REQ;
   1105c:	f890 20c2 	ldrb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.cmd = 0;
   11060:	f002 02f8 	and.w	r2, r2, #248	; 0xf8
   11064:	f363 02c3 	bfi	r2, r3, #3, #1
   11068:	f880 20c2 	strb.w	r2, [r0, #194]	; 0xc2
		conn->llcp_conn_param.ack--;
   1106c:	f890 20c1 	ldrb.w	r2, [r0, #193]	; 0xc1
   11070:	3a01      	subs	r2, #1
   11072:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
		return 0;
   11076:	4618      	mov	r0, r3
   11078:	bd30      	pop	{r4, r5, pc}
   1107a:	bf00      	nop
   1107c:	10624dd3 	.word	0x10624dd3

00011080 <rx_fc_lock>:
	packet_rx_allocate(0xff);
}

static void rx_fc_lock(u16_t handle)
{
	if (_radio.fc_req == _radio.fc_ack) {
   11080:	4a0d      	ldr	r2, [pc, #52]	; (110b8 <rx_fc_lock+0x38>)
   11082:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11086:	b2db      	uxtb	r3, r3
   11088:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   1108c:	4293      	cmp	r3, r2
   1108e:	d000      	beq.n	11092 <rx_fc_lock+0x12>
   11090:	4770      	bx	lr
		u8_t req;

		_radio.fc_handle[_radio.fc_req] = handle;
   11092:	4a09      	ldr	r2, [pc, #36]	; (110b8 <rx_fc_lock+0x38>)
   11094:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   11098:	33b8      	adds	r3, #184	; 0xb8
   1109a:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   1109e:	80d8      	strh	r0, [r3, #6]
		req = _radio.fc_req + 1;
   110a0:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   110a4:	3301      	adds	r3, #1
   110a6:	b2db      	uxtb	r3, r3
		if (req == TRIPLE_BUFFER_SIZE) {
   110a8:	2b03      	cmp	r3, #3
   110aa:	d003      	beq.n	110b4 <rx_fc_lock+0x34>
			req = 0;
		}
		_radio.fc_req = req;
   110ac:	4a02      	ldr	r2, [pc, #8]	; (110b8 <rx_fc_lock+0x38>)
   110ae:	f882 317c 	strb.w	r3, [r2, #380]	; 0x17c
	}
}
   110b2:	e7ed      	b.n	11090 <rx_fc_lock+0x10>
			req = 0;
   110b4:	2300      	movs	r3, #0
   110b6:	e7f9      	b.n	110ac <rx_fc_lock+0x2c>
   110b8:	20000f84 	.word	0x20000f84

000110bc <ticker_success_assert>:
	LL_ASSERT(status == TICKER_STATUS_SUCCESS);
   110bc:	b900      	cbnz	r0, 110c0 <ticker_success_assert+0x4>
   110be:	4770      	bx	lr
   110c0:	4040      	eors	r0, r0
   110c2:	f380 8811 	msr	BASEPRI, r0
   110c6:	f04f 0004 	mov.w	r0, #4
   110ca:	df02      	svc	2

000110cc <start_enc_rsp_send>:
{
   110cc:	b510      	push	{r4, lr}
   110ce:	4604      	mov	r4, r0
	if (!pdu_ctrl_tx) {
   110d0:	b171      	cbz	r1, 110f0 <start_enc_rsp_send+0x24>
   110d2:	460b      	mov	r3, r1
	struct radio_pdu_node_tx *node_tx = NULL;
   110d4:	2100      	movs	r1, #0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   110d6:	781a      	ldrb	r2, [r3, #0]
   110d8:	f042 0203 	orr.w	r2, r2, #3
   110dc:	701a      	strb	r2, [r3, #0]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   110de:	2201      	movs	r2, #1
   110e0:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   110e2:	2206      	movs	r2, #6
   110e4:	70da      	strb	r2, [r3, #3]
	if (node_tx) {
   110e6:	b111      	cbz	r1, 110ee <start_enc_rsp_send+0x22>
		ctrl_tx_enqueue(conn, node_tx);
   110e8:	4620      	mov	r0, r4
   110ea:	f7ff feff 	bl	10eec <ctrl_tx_enqueue>
   110ee:	bd10      	pop	{r4, pc}
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   110f0:	4806      	ldr	r0, [pc, #24]	; (1110c <start_enc_rsp_send+0x40>)
   110f2:	f7fd fc68 	bl	e9c6 <mem_acquire>
		LL_ASSERT(node_tx);
   110f6:	4601      	mov	r1, r0
   110f8:	b108      	cbz	r0, 110fe <start_enc_rsp_send+0x32>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   110fa:	1d03      	adds	r3, r0, #4
   110fc:	e7eb      	b.n	110d6 <start_enc_rsp_send+0xa>
		LL_ASSERT(node_tx);
   110fe:	4040      	eors	r0, r0
   11100:	f380 8811 	msr	BASEPRI, r0
   11104:	f04f 0004 	mov.w	r0, #4
   11108:	df02      	svc	2
   1110a:	bf00      	nop
   1110c:	200010dc 	.word	0x200010dc

00011110 <ticker_stop_adv_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11110:	2801      	cmp	r0, #1
   11112:	d005      	beq.n	11120 <ticker_stop_adv_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   11114:	4b0d      	ldr	r3, [pc, #52]	; (1114c <ticker_stop_adv_assert+0x3c>)
   11116:	7b1b      	ldrb	r3, [r3, #12]
   11118:	b2db      	uxtb	r3, r3
   1111a:	2b05      	cmp	r3, #5
   1111c:	d00f      	beq.n	1113e <ticker_stop_adv_assert+0x2e>
   1111e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_ADV) {
   11120:	4b0a      	ldr	r3, [pc, #40]	; (1114c <ticker_stop_adv_assert+0x3c>)
   11122:	7b9b      	ldrb	r3, [r3, #14]
   11124:	b2db      	uxtb	r3, r3
   11126:	2b05      	cmp	r3, #5
   11128:	d103      	bne.n	11132 <ticker_stop_adv_assert+0x22>
			_radio.ticker_id_stop = 0;
   1112a:	2200      	movs	r2, #0
   1112c:	4b07      	ldr	r3, [pc, #28]	; (1114c <ticker_stop_adv_assert+0x3c>)
   1112e:	739a      	strb	r2, [r3, #14]
   11130:	4770      	bx	lr
			LL_ASSERT(0);
   11132:	4040      	eors	r0, r0
   11134:	f380 8811 	msr	BASEPRI, r0
   11138:	f04f 0004 	mov.w	r0, #4
   1113c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_ADV);
   1113e:	4040      	eors	r0, r0
   11140:	f380 8811 	msr	BASEPRI, r0
   11144:	f04f 0004 	mov.w	r0, #4
   11148:	df02      	svc	2
   1114a:	bf00      	nop
   1114c:	20000f84 	.word	0x20000f84

00011150 <ticker_stop_scan_assert>:
	if (status == TICKER_STATUS_FAILURE) {
   11150:	2801      	cmp	r0, #1
   11152:	d005      	beq.n	11160 <ticker_stop_scan_assert+0x10>
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   11154:	4b0d      	ldr	r3, [pc, #52]	; (1118c <ticker_stop_scan_assert+0x3c>)
   11156:	7b1b      	ldrb	r3, [r3, #12]
   11158:	b2db      	uxtb	r3, r3
   1115a:	2b06      	cmp	r3, #6
   1115c:	d00f      	beq.n	1117e <ticker_stop_scan_assert+0x2e>
   1115e:	4770      	bx	lr
		if (_radio.ticker_id_stop == RADIO_TICKER_ID_SCAN) {
   11160:	4b0a      	ldr	r3, [pc, #40]	; (1118c <ticker_stop_scan_assert+0x3c>)
   11162:	7b9b      	ldrb	r3, [r3, #14]
   11164:	b2db      	uxtb	r3, r3
   11166:	2b06      	cmp	r3, #6
   11168:	d103      	bne.n	11172 <ticker_stop_scan_assert+0x22>
			_radio.ticker_id_stop = 0;
   1116a:	2200      	movs	r2, #0
   1116c:	4b07      	ldr	r3, [pc, #28]	; (1118c <ticker_stop_scan_assert+0x3c>)
   1116e:	739a      	strb	r2, [r3, #14]
   11170:	4770      	bx	lr
			LL_ASSERT(0);
   11172:	4040      	eors	r0, r0
   11174:	f380 8811 	msr	BASEPRI, r0
   11178:	f04f 0004 	mov.w	r0, #4
   1117c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare != RADIO_TICKER_ID_SCAN);
   1117e:	4040      	eors	r0, r0
   11180:	f380 8811 	msr	BASEPRI, r0
   11184:	f04f 0004 	mov.w	r0, #4
   11188:	df02      	svc	2
   1118a:	bf00      	nop
   1118c:	20000f84 	.word	0x20000f84

00011190 <conn_update>:
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   11190:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	      conn->event_counter) & 0xFFFF) > 0x7FFF) {
   11194:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11196:	1a9b      	subs	r3, r3, r2
   11198:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant -
   1119a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   1119e:	da5b      	bge.n	11258 <conn_update+0xc8>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   111a0:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   111a4:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   111a8:	429a      	cmp	r2, r3
   111aa:	d13d      	bne.n	11228 <conn_update+0x98>
	if (_radio.conn_upd == 0) {
   111ac:	4b2c      	ldr	r3, [pc, #176]	; (11260 <conn_update+0xd0>)
   111ae:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   111b2:	2b00      	cmp	r3, #0
   111b4:	d03e      	beq.n	11234 <conn_update+0xa4>
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_size;
   111b6:	790b      	ldrb	r3, [r1, #4]
	conn->llcp.conn_upd.win_size =
   111b8:	f880 3088 	strb.w	r3, [r0, #136]	; 0x88
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.win_offset *
   111bc:	f8b1 2005 	ldrh.w	r2, [r1, #5]
   111c0:	f240 43e2 	movw	r3, #1250	; 0x4e2
   111c4:	fb03 f302 	mul.w	r3, r3, r2
	conn->llcp.conn_upd.win_offset_us =
   111c8:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.interval;
   111cc:	f8b1 3007 	ldrh.w	r3, [r1, #7]
	conn->llcp.conn_upd.interval =
   111d0:	f8a0 307a 	strh.w	r3, [r0, #122]	; 0x7a
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.latency;
   111d4:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	conn->llcp.conn_upd.latency =
   111d8:	f8a0 307c 	strh.w	r3, [r0, #124]	; 0x7c
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.timeout;
   111dc:	f8b1 300b 	ldrh.w	r3, [r1, #11]
	conn->llcp.conn_upd.timeout =
   111e0:	f8a0 307e 	strh.w	r3, [r0, #126]	; 0x7e
		pdu_data_rx->payload.llctrl.ctrldata.conn_update_ind.instant;
   111e4:	f8b1 300d 	ldrh.w	r3, [r1, #13]
	conn->llcp.conn_upd.instant =
   111e8:	f8a0 3080 	strh.w	r3, [r0, #128]	; 0x80
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   111ec:	f890 3078 	ldrb.w	r3, [r0, #120]	; 0x78
	conn->llcp.conn_upd.is_internal = 0;
   111f0:	f003 03fc 	and.w	r3, r3, #252	; 0xfc
   111f4:	f36f 0382 	bfc	r3, #2, #1
   111f8:	f880 3078 	strb.w	r3, [r0, #120]	; 0x78
	conn->llcp_type = LLCP_CONN_UPD;
   111fc:	2301      	movs	r3, #1
   111fe:	f880 3076 	strb.w	r3, [r0, #118]	; 0x76
	conn->llcp_ack--;
   11202:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11206:	3b01      	subs	r3, #1
   11208:	f880 3075 	strb.w	r3, [r0, #117]	; 0x75
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   1120c:	f890 20c0 	ldrb.w	r2, [r0, #192]	; 0xc0
   11210:	f890 30c1 	ldrb.w	r3, [r0, #193]	; 0xc1
   11214:	429a      	cmp	r2, r3
   11216:	d021      	beq.n	1125c <conn_update+0xcc>
	    (conn->llcp_conn_param.state == LLCP_CPR_STATE_RSP_WAIT)) {
   11218:	f890 30c2 	ldrb.w	r3, [r0, #194]	; 0xc2
   1121c:	f003 0307 	and.w	r3, r3, #7
	if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   11220:	2b04      	cmp	r3, #4
   11222:	d015      	beq.n	11250 <conn_update+0xc0>
	return 0;
   11224:	2000      	movs	r0, #0
}
   11226:	4770      	bx	lr
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11228:	4040      	eors	r0, r0
   1122a:	f380 8811 	msr	BASEPRI, r0
   1122e:	f04f 0004 	mov.w	r0, #4
   11232:	df02      	svc	2
		LL_ASSERT(conn->role);
   11234:	f990 301d 	ldrsb.w	r3, [r0, #29]
   11238:	2b00      	cmp	r3, #0
   1123a:	da03      	bge.n	11244 <conn_update+0xb4>
		_radio.conn_upd = conn;
   1123c:	4b08      	ldr	r3, [pc, #32]	; (11260 <conn_update+0xd0>)
   1123e:	f8c3 0184 	str.w	r0, [r3, #388]	; 0x184
   11242:	e7b8      	b.n	111b6 <conn_update+0x26>
		LL_ASSERT(conn->role);
   11244:	4040      	eors	r0, r0
   11246:	f380 8811 	msr	BASEPRI, r0
   1124a:	f04f 0004 	mov.w	r0, #4
   1124e:	df02      	svc	2
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   11250:	f880 20c1 	strb.w	r2, [r0, #193]	; 0xc1
	return 0;
   11254:	2000      	movs	r0, #0
   11256:	4770      	bx	lr
		return 1;
   11258:	2001      	movs	r0, #1
   1125a:	4770      	bx	lr
	return 0;
   1125c:	2000      	movs	r0, #0
   1125e:	4770      	bx	lr
   11260:	20000f84 	.word	0x20000f84

00011264 <pause_enc_rsp_send>:
{
   11264:	b510      	push	{r4, lr}
   11266:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11268:	480b      	ldr	r0, [pc, #44]	; (11298 <pause_enc_rsp_send+0x34>)
   1126a:	f7fd fbac 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   1126e:	b160      	cbz	r0, 1128a <pause_enc_rsp_send+0x26>
   11270:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11272:	7903      	ldrb	r3, [r0, #4]
   11274:	f043 0303 	orr.w	r3, r3, #3
   11278:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   1127a:	2301      	movs	r3, #1
   1127c:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1127e:	230b      	movs	r3, #11
   11280:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   11282:	4620      	mov	r0, r4
   11284:	f7ff fe32 	bl	10eec <ctrl_tx_enqueue>
   11288:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   1128a:	4040      	eors	r0, r0
   1128c:	f380 8811 	msr	BASEPRI, r0
   11290:	f04f 0004 	mov.w	r0, #4
   11294:	df02      	svc	2
   11296:	bf00      	nop
   11298:	200010dc 	.word	0x200010dc

0001129c <ping_resp_send>:
{
   1129c:	b510      	push	{r4, lr}
   1129e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112a0:	480b      	ldr	r0, [pc, #44]	; (112d0 <ping_resp_send+0x34>)
   112a2:	f7fd fb90 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   112a6:	b160      	cbz	r0, 112c2 <ping_resp_send+0x26>
   112a8:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112aa:	7903      	ldrb	r3, [r0, #4]
   112ac:	f043 0303 	orr.w	r3, r3, #3
   112b0:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   112b2:	2301      	movs	r3, #1
   112b4:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PING_RSP;
   112b6:	2313      	movs	r3, #19
   112b8:	71c3      	strb	r3, [r0, #7]
	ctrl_tx_enqueue(conn, node_tx);
   112ba:	4620      	mov	r0, r4
   112bc:	f7ff fe16 	bl	10eec <ctrl_tx_enqueue>
   112c0:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   112c2:	4040      	eors	r0, r0
   112c4:	f380 8811 	msr	BASEPRI, r0
   112c8:	f04f 0004 	mov.w	r0, #4
   112cc:	df02      	svc	2
   112ce:	bf00      	nop
   112d0:	200010dc 	.word	0x200010dc

000112d4 <length_resp_send>:
{
   112d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   112d6:	4604      	mov	r4, r0
   112d8:	460f      	mov	r7, r1
   112da:	4615      	mov	r5, r2
   112dc:	461e      	mov	r6, r3
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   112de:	480e      	ldr	r0, [pc, #56]	; (11318 <length_resp_send+0x44>)
   112e0:	f7fd fb71 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   112e4:	b190      	cbz	r0, 1130c <length_resp_send+0x38>
   112e6:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   112e8:	7903      	ldrb	r3, [r0, #4]
   112ea:	f043 0303 	orr.w	r3, r3, #3
   112ee:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   112f0:	2309      	movs	r3, #9
   112f2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   112f4:	2315      	movs	r3, #21
   112f6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_octets =
   112f8:	8107      	strh	r7, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_octets =
   112fa:	8186      	strh	r6, [r0, #12]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_rx_time =
   112fc:	8145      	strh	r5, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.length_rsp.max_tx_time =
   112fe:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   11302:	81c3      	strh	r3, [r0, #14]
	ctrl_tx_enqueue(conn, node_tx);
   11304:	4620      	mov	r0, r4
   11306:	f7ff fdf1 	bl	10eec <ctrl_tx_enqueue>
   1130a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	LL_ASSERT(node_tx);
   1130c:	4040      	eors	r0, r0
   1130e:	f380 8811 	msr	BASEPRI, r0
   11312:	f04f 0004 	mov.w	r0, #4
   11316:	df02      	svc	2
   11318:	200010dc 	.word	0x200010dc

0001131c <reject_ext_ind_send>:
{
   1131c:	b570      	push	{r4, r5, r6, lr}
   1131e:	4604      	mov	r4, r0
   11320:	460e      	mov	r6, r1
   11322:	4615      	mov	r5, r2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11324:	480c      	ldr	r0, [pc, #48]	; (11358 <reject_ext_ind_send+0x3c>)
   11326:	f7fd fb4e 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   1132a:	b170      	cbz	r0, 1134a <reject_ext_ind_send+0x2e>
   1132c:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1132e:	7903      	ldrb	r3, [r0, #4]
   11330:	f043 0303 	orr.w	r3, r3, #3
   11334:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11336:	2303      	movs	r3, #3
   11338:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   1133a:	2311      	movs	r3, #17
   1133c:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.reject_opcode =
   1133e:	7206      	strb	r6, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.reject_ext_ind.error_code =
   11340:	7245      	strb	r5, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   11342:	4620      	mov	r0, r4
   11344:	f7ff fdd2 	bl	10eec <ctrl_tx_enqueue>
   11348:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(node_tx);
   1134a:	4040      	eors	r0, r0
   1134c:	f380 8811 	msr	BASEPRI, r0
   11350:	f04f 0004 	mov.w	r0, #4
   11354:	df02      	svc	2
   11356:	bf00      	nop
   11358:	200010dc 	.word	0x200010dc

0001135c <phy_rsp_send>:
{
   1135c:	b510      	push	{r4, lr}
   1135e:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11360:	4810      	ldr	r0, [pc, #64]	; (113a4 <phy_rsp_send+0x48>)
   11362:	f7fd fb30 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   11366:	b1b0      	cbz	r0, 11396 <phy_rsp_send+0x3a>
   11368:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1136a:	7903      	ldrb	r3, [r0, #4]
   1136c:	f043 0303 	orr.w	r3, r3, #3
   11370:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11372:	2303      	movs	r3, #3
   11374:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_PHY_RSP;
   11376:	2317      	movs	r3, #23
   11378:	71c3      	strb	r3, [r0, #7]
		conn->phy_pref_tx;
   1137a:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1137e:	f3c3 0302 	ubfx	r3, r3, #0, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.tx_phys =
   11382:	7203      	strb	r3, [r0, #8]
		conn->phy_pref_rx;
   11384:	f894 3039 	ldrb.w	r3, [r4, #57]	; 0x39
   11388:	f3c3 03c2 	ubfx	r3, r3, #3, #3
	pdu_ctrl_tx->payload.llctrl.ctrldata.phy_rsp.rx_phys =
   1138c:	7243      	strb	r3, [r0, #9]
	ctrl_tx_enqueue(conn, node_tx);
   1138e:	4620      	mov	r0, r4
   11390:	f7ff fdac 	bl	10eec <ctrl_tx_enqueue>
   11394:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11396:	4040      	eors	r0, r0
   11398:	f380 8811 	msr	BASEPRI, r0
   1139c:	f04f 0004 	mov.w	r0, #4
   113a0:	df02      	svc	2
   113a2:	bf00      	nop
   113a4:	200010dc 	.word	0x200010dc

000113a8 <unknown_rsp_send>:
{
   113a8:	b538      	push	{r3, r4, r5, lr}
   113aa:	4604      	mov	r4, r0
   113ac:	460d      	mov	r5, r1
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   113ae:	480c      	ldr	r0, [pc, #48]	; (113e0 <unknown_rsp_send+0x38>)
   113b0:	f7fd fb09 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   113b4:	b168      	cbz	r0, 113d2 <unknown_rsp_send+0x2a>
   113b6:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   113b8:	7903      	ldrb	r3, [r0, #4]
   113ba:	f043 0303 	orr.w	r3, r3, #3
   113be:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   113c0:	2302      	movs	r3, #2
   113c2:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_UNKNOWN_RSP;
   113c4:	2307      	movs	r3, #7
   113c6:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.unknown_rsp.type = type;
   113c8:	7205      	strb	r5, [r0, #8]
	ctrl_tx_enqueue(conn, node_tx);
   113ca:	4620      	mov	r0, r4
   113cc:	f7ff fd8e 	bl	10eec <ctrl_tx_enqueue>
   113d0:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   113d2:	4040      	eors	r0, r0
   113d4:	f380 8811 	msr	BASEPRI, r0
   113d8:	f04f 0004 	mov.w	r0, #4
   113dc:	df02      	svc	2
   113de:	bf00      	nop
   113e0:	200010dc 	.word	0x200010dc

000113e4 <ticker_update_adv_assert>:
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   113e4:	b120      	cbz	r0, 113f0 <ticker_update_adv_assert+0xc>
   113e6:	4b06      	ldr	r3, [pc, #24]	; (11400 <ticker_update_adv_assert+0x1c>)
   113e8:	7b9b      	ldrb	r3, [r3, #14]
   113ea:	b2db      	uxtb	r3, r3
   113ec:	2b05      	cmp	r3, #5
   113ee:	d100      	bne.n	113f2 <ticker_update_adv_assert+0xe>
   113f0:	4770      	bx	lr
   113f2:	4040      	eors	r0, r0
   113f4:	f380 8811 	msr	BASEPRI, r0
   113f8:	f04f 0004 	mov.w	r0, #4
   113fc:	df02      	svc	2
   113fe:	bf00      	nop
   11400:	20000f84 	.word	0x20000f84

00011404 <ticker_update_slave_assert>:
	u8_t ticker_id = (u32_t)params & 0xFF;
   11404:	b2c9      	uxtb	r1, r1
	LL_ASSERT((status == TICKER_STATUS_SUCCESS) ||
   11406:	b120      	cbz	r0, 11412 <ticker_update_slave_assert+0xe>
   11408:	4b05      	ldr	r3, [pc, #20]	; (11420 <ticker_update_slave_assert+0x1c>)
   1140a:	7b9b      	ldrb	r3, [r3, #14]
   1140c:	b2db      	uxtb	r3, r3
   1140e:	4299      	cmp	r1, r3
   11410:	d100      	bne.n	11414 <ticker_update_slave_assert+0x10>
   11412:	4770      	bx	lr
   11414:	4040      	eors	r0, r0
   11416:	f380 8811 	msr	BASEPRI, r0
   1141a:	f04f 0004 	mov.w	r0, #4
   1141e:	df02      	svc	2
   11420:	20000f84 	.word	0x20000f84

00011424 <ticker_op_latency_cancelled>:

static void ticker_op_latency_cancelled(u32_t ticker_status, void *params)
{
	struct connection *conn;

	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11424:	b930      	cbnz	r0, 11434 <ticker_op_latency_cancelled+0x10>

	conn = (struct connection *)params;
	conn->slave.latency_cancel = 0;
   11426:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   1142a:	f36f 0341 	bfc	r3, #1, #1
   1142e:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
   11432:	4770      	bx	lr
	LL_ASSERT(ticker_status == TICKER_STATUS_SUCCESS);
   11434:	4040      	eors	r0, r0
   11436:	f380 8811 	msr	BASEPRI, r0
   1143a:	f04f 0004 	mov.w	r0, #4
   1143e:	df02      	svc	2

00011440 <packet_rx_allocate>:
{
   11440:	b570      	push	{r4, r5, r6, lr}
	if (max > _radio.link_rx_data_quota) {
   11442:	4b22      	ldr	r3, [pc, #136]	; (114cc <packet_rx_allocate+0x8c>)
   11444:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
   11448:	4283      	cmp	r3, r0
   1144a:	d300      	bcc.n	1144e <packet_rx_allocate+0xe>
   1144c:	4603      	mov	r3, r0
	acquire = _radio.packet_rx_acquire + 1;
   1144e:	4a1f      	ldr	r2, [pc, #124]	; (114cc <packet_rx_allocate+0x8c>)
   11450:	f892 413e 	ldrb.w	r4, [r2, #318]	; 0x13e
   11454:	3401      	adds	r4, #1
   11456:	b2e4      	uxtb	r4, r4
	if (acquire == _radio.packet_rx_count) {
   11458:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   1145c:	4294      	cmp	r4, r2
   1145e:	d10d      	bne.n	1147c <packet_rx_allocate+0x3c>
		acquire = 0;
   11460:	2400      	movs	r4, #0
   11462:	e00b      	b.n	1147c <packet_rx_allocate+0x3c>
			mem_release(link, &_radio.link_rx_free);
   11464:	491a      	ldr	r1, [pc, #104]	; (114d0 <packet_rx_allocate+0x90>)
   11466:	4630      	mov	r0, r6
   11468:	f7fd fac9 	bl	e9fe <mem_release>
			break;
   1146c:	bd70      	pop	{r4, r5, r6, pc}
		_radio.link_rx_data_quota--;
   1146e:	4a17      	ldr	r2, [pc, #92]	; (114cc <packet_rx_allocate+0x8c>)
   11470:	f892 3150 	ldrb.w	r3, [r2, #336]	; 0x150
   11474:	3b01      	subs	r3, #1
   11476:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
	while ((max--) && (acquire != _radio.packet_rx_last)) {
   1147a:	462b      	mov	r3, r5
   1147c:	1e5d      	subs	r5, r3, #1
   1147e:	b2ed      	uxtb	r5, r5
   11480:	b313      	cbz	r3, 114c8 <packet_rx_allocate+0x88>
   11482:	4b12      	ldr	r3, [pc, #72]	; (114cc <packet_rx_allocate+0x8c>)
   11484:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   11488:	b2db      	uxtb	r3, r3
   1148a:	429c      	cmp	r4, r3
   1148c:	d01c      	beq.n	114c8 <packet_rx_allocate+0x88>
		link = mem_acquire(&_radio.link_rx_free);
   1148e:	4810      	ldr	r0, [pc, #64]	; (114d0 <packet_rx_allocate+0x90>)
   11490:	f7fd fa99 	bl	e9c6 <mem_acquire>
		if (!link) {
   11494:	4606      	mov	r6, r0
   11496:	b1b8      	cbz	r0, 114c8 <packet_rx_allocate+0x88>
		radio_pdu_node_rx = mem_acquire(&_radio.pkt_rx_data_free);
   11498:	480e      	ldr	r0, [pc, #56]	; (114d4 <packet_rx_allocate+0x94>)
   1149a:	f7fd fa94 	bl	e9c6 <mem_acquire>
		if (!radio_pdu_node_rx) {
   1149e:	4602      	mov	r2, r0
   114a0:	2800      	cmp	r0, #0
   114a2:	d0df      	beq.n	11464 <packet_rx_allocate+0x24>
		radio_pdu_node_rx->hdr.onion.link = link;
   114a4:	6006      	str	r6, [r0, #0]
		_radio.packet_rx[_radio.packet_rx_acquire] = radio_pdu_node_rx;
   114a6:	4b09      	ldr	r3, [pc, #36]	; (114cc <packet_rx_allocate+0x8c>)
   114a8:	f8d3 1138 	ldr.w	r1, [r3, #312]	; 0x138
   114ac:	f893 013e 	ldrb.w	r0, [r3, #318]	; 0x13e
   114b0:	f841 2020 	str.w	r2, [r1, r0, lsl #2]
		_radio.packet_rx_acquire = acquire;
   114b4:	f883 413e 	strb.w	r4, [r3, #318]	; 0x13e
		acquire = _radio.packet_rx_acquire + 1;
   114b8:	3401      	adds	r4, #1
   114ba:	b2e4      	uxtb	r4, r4
		if (acquire == _radio.packet_rx_count) {
   114bc:	f893 313c 	ldrb.w	r3, [r3, #316]	; 0x13c
   114c0:	429c      	cmp	r4, r3
   114c2:	d1d4      	bne.n	1146e <packet_rx_allocate+0x2e>
			acquire = 0;
   114c4:	2400      	movs	r4, #0
   114c6:	e7d2      	b.n	1146e <packet_rx_allocate+0x2e>
   114c8:	bd70      	pop	{r4, r5, r6, pc}
   114ca:	bf00      	nop
   114cc:	20000f84 	.word	0x20000f84
   114d0:	200010c8 	.word	0x200010c8
   114d4:	200010b0 	.word	0x200010b0

000114d8 <tx_cmplt_get>:
{
   114d8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
	_first = *first;
   114dc:	780c      	ldrb	r4, [r1, #0]
	if (_first == last) {
   114de:	4294      	cmp	r4, r2
   114e0:	d043      	beq.n	1156a <tx_cmplt_get+0x92>
   114e2:	4690      	mov	r8, r2
   114e4:	4689      	mov	r9, r1
   114e6:	4607      	mov	r7, r0
	*handle = _radio.pkt_release[_first].handle;
   114e8:	4b21      	ldr	r3, [pc, #132]	; (11570 <tx_cmplt_get+0x98>)
   114ea:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   114ee:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   114f2:	8003      	strh	r3, [r0, #0]
	cmplt = 0;
   114f4:	2600      	movs	r6, #0
   114f6:	e00f      	b.n	11518 <tx_cmplt_get+0x40>
			_radio.pkt_release[_first].node_tx =
   114f8:	2301      	movs	r3, #1
   114fa:	606b      	str	r3, [r5, #4]
			cmplt++;
   114fc:	441e      	add	r6, r3
   114fe:	b2f6      	uxtb	r6, r6
		if (((u32_t)node_tx & ~(0x00000003)) != 0) {
   11500:	f030 0303 	bics.w	r3, r0, #3
   11504:	d126      	bne.n	11554 <tx_cmplt_get+0x7c>
		_first = _first + 1;
   11506:	3401      	adds	r4, #1
   11508:	b2e4      	uxtb	r4, r4
		if (_first == _radio.packet_tx_count) {
   1150a:	4b19      	ldr	r3, [pc, #100]	; (11570 <tx_cmplt_get+0x98>)
   1150c:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   11510:	429c      	cmp	r4, r3
   11512:	d023      	beq.n	1155c <tx_cmplt_get+0x84>
	} while (_first != last);
   11514:	4544      	cmp	r4, r8
   11516:	d023      	beq.n	11560 <tx_cmplt_get+0x88>
		if (*handle != _radio.pkt_release[_first].handle) {
   11518:	883a      	ldrh	r2, [r7, #0]
   1151a:	4b15      	ldr	r3, [pc, #84]	; (11570 <tx_cmplt_get+0x98>)
   1151c:	f8d3 316c 	ldr.w	r3, [r3, #364]	; 0x16c
   11520:	eb03 05c4 	add.w	r5, r3, r4, lsl #3
   11524:	f833 3034 	ldrh.w	r3, [r3, r4, lsl #3]
   11528:	429a      	cmp	r2, r3
   1152a:	d119      	bne.n	11560 <tx_cmplt_get+0x88>
		node_tx = _radio.pkt_release[_first].node_tx;
   1152c:	6868      	ldr	r0, [r5, #4]
		pdu_data_tx = (struct pdu_data *)node_tx->pdu_data;
   1152e:	1d03      	adds	r3, r0, #4
		if ((!node_tx) || (node_tx == (struct radio_pdu_node_tx *)1) ||
   11530:	2801      	cmp	r0, #1
   11532:	d9e1      	bls.n	114f8 <tx_cmplt_get+0x20>
   11534:	f030 0203 	bics.w	r2, r0, #3
   11538:	d009      	beq.n	1154e <tx_cmplt_get+0x76>
		    ((((u32_t)node_tx & ~(0x00000003)) != 0) &&
   1153a:	b143      	cbz	r3, 1154e <tx_cmplt_get+0x76>
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1153c:	7943      	ldrb	r3, [r0, #5]
   1153e:	b133      	cbz	r3, 1154e <tx_cmplt_get+0x76>
		     ((pdu_data_tx->ll_id == PDU_DATA_LLID_DATA_START) ||
   11540:	7903      	ldrb	r3, [r0, #4]
   11542:	f003 0303 	and.w	r3, r3, #3
   11546:	3b01      	subs	r3, #1
   11548:	b2db      	uxtb	r3, r3
		     (pdu_data_tx) && (pdu_data_tx->len != 0) &&
   1154a:	2b01      	cmp	r3, #1
   1154c:	d9d4      	bls.n	114f8 <tx_cmplt_get+0x20>
			_radio.pkt_release[_first].node_tx =
   1154e:	2302      	movs	r3, #2
   11550:	606b      	str	r3, [r5, #4]
   11552:	e7d5      	b.n	11500 <tx_cmplt_get+0x28>
			mem_release(node_tx, &_radio.pkt_tx_data_free);
   11554:	4907      	ldr	r1, [pc, #28]	; (11574 <tx_cmplt_get+0x9c>)
   11556:	f7fd fa52 	bl	e9fe <mem_release>
   1155a:	e7d4      	b.n	11506 <tx_cmplt_get+0x2e>
			_first = 0;
   1155c:	2400      	movs	r4, #0
   1155e:	e7d9      	b.n	11514 <tx_cmplt_get+0x3c>
	*first = _first;
   11560:	f889 4000 	strb.w	r4, [r9]
}
   11564:	4630      	mov	r0, r6
   11566:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return 0;
   1156a:	2600      	movs	r6, #0
   1156c:	e7fa      	b.n	11564 <tx_cmplt_get+0x8c>
   1156e:	bf00      	nop
   11570:	20000f84 	.word	0x20000f84
   11574:	200010e4 	.word	0x200010e4

00011578 <ticker_job_disable>:
{
   11578:	b508      	push	{r3, lr}
	if (_radio.state != STATE_NONE) {
   1157a:	4b05      	ldr	r3, [pc, #20]	; (11590 <ticker_job_disable+0x18>)
   1157c:	7c1b      	ldrb	r3, [r3, #16]
   1157e:	b903      	cbnz	r3, 11582 <ticker_job_disable+0xa>
   11580:	bd08      	pop	{r3, pc}
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   11582:	2200      	movs	r2, #0
   11584:	2101      	movs	r1, #1
   11586:	4608      	mov	r0, r1
   11588:	f7fd f89e 	bl	e6c8 <mayfly_enable>
}
   1158c:	e7f8      	b.n	11580 <ticker_job_disable+0x8>
   1158e:	bf00      	nop
   11590:	20000f84 	.word	0x20000f84

00011594 <connection_get>:
	if (handle < _radio.connection_count) {
   11594:	4b0d      	ldr	r3, [pc, #52]	; (115cc <connection_get+0x38>)
   11596:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   1159a:	4283      	cmp	r3, r0
   1159c:	d910      	bls.n	115c0 <connection_get+0x2c>
{
   1159e:	b510      	push	{r4, lr}
   115a0:	4604      	mov	r4, r0
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE, handle);
   115a2:	4602      	mov	r2, r0
   115a4:	f44f 71aa 	mov.w	r1, #340	; 0x154
   115a8:	4b08      	ldr	r3, [pc, #32]	; (115cc <connection_get+0x38>)
   115aa:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   115ae:	f7fd fa47 	bl	ea40 <mem_get>
		if ((conn) && (conn->handle == handle)) {
   115b2:	4603      	mov	r3, r0
   115b4:	b110      	cbz	r0, 115bc <connection_get+0x28>
   115b6:	8c02      	ldrh	r2, [r0, #32]
   115b8:	4294      	cmp	r4, r2
   115ba:	d104      	bne.n	115c6 <connection_get+0x32>
}
   115bc:	4618      	mov	r0, r3
   115be:	bd10      	pop	{r4, pc}
	return 0;
   115c0:	2300      	movs	r3, #0
}
   115c2:	4618      	mov	r0, r3
   115c4:	4770      	bx	lr
	return 0;
   115c6:	2300      	movs	r3, #0
   115c8:	e7f8      	b.n	115bc <connection_get+0x28>
   115ca:	bf00      	nop
   115cc:	20000f84 	.word	0x20000f84

000115d0 <role_disable>:
{
   115d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   115d2:	b087      	sub	sp, #28
   115d4:	4604      	mov	r4, r0
   115d6:	460d      	mov	r5, r1
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   115d8:	2302      	movs	r3, #2
   115da:	9305      	str	r3, [sp, #20]
	switch (ticker_id_primary) {
   115dc:	2805      	cmp	r0, #5
   115de:	d00d      	beq.n	115fc <role_disable+0x2c>
   115e0:	2806      	cmp	r0, #6
   115e2:	d02a      	beq.n	1163a <role_disable+0x6a>
		if (ticker_id_primary >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   115e4:	2806      	cmp	r0, #6
   115e6:	d957      	bls.n	11698 <role_disable+0xc8>
			conn_handle = ticker_id_primary -
   115e8:	3807      	subs	r0, #7
			conn = connection_get(conn_handle);
   115ea:	b280      	uxth	r0, r0
   115ec:	f7ff ffd2 	bl	11594 <connection_get>
			if (!conn) {
   115f0:	2800      	cmp	r0, #0
   115f2:	f000 8153 	beq.w	1189c <role_disable+0x2cc>
			ticks_xtal_to_start =
   115f6:	6806      	ldr	r6, [r0, #0]
			ticks_active_to_start =
   115f8:	6847      	ldr	r7, [r0, #4]
		break;
   115fa:	e023      	b.n	11644 <role_disable+0x74>
		ticks_xtal_to_start =
   115fc:	4b9f      	ldr	r3, [pc, #636]	; (1187c <role_disable+0x2ac>)
   115fe:	695e      	ldr	r6, [r3, #20]
		ticks_active_to_start =
   11600:	699f      	ldr	r7, [r3, #24]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11602:	ab05      	add	r3, sp, #20
   11604:	9300      	str	r3, [sp, #0]
   11606:	4b9e      	ldr	r3, [pc, #632]	; (11880 <role_disable+0x2b0>)
   11608:	460a      	mov	r2, r1
   1160a:	2103      	movs	r1, #3
   1160c:	2000      	movs	r0, #0
   1160e:	f7fe ff47 	bl	104a0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11612:	2802      	cmp	r0, #2
   11614:	d00d      	beq.n	11632 <role_disable+0x62>
		LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11616:	9b05      	ldr	r3, [sp, #20]
   11618:	b1a3      	cbz	r3, 11644 <role_disable+0x74>
   1161a:	9b05      	ldr	r3, [sp, #20]
   1161c:	2b01      	cmp	r3, #1
   1161e:	d011      	beq.n	11644 <role_disable+0x74>
   11620:	4040      	eors	r0, r0
   11622:	f380 8811 	msr	BASEPRI, r0
   11626:	f04f 0004 	mov.w	r0, #4
   1162a:	df02      	svc	2
   1162c:	bf20      	wfe
  __ASM volatile ("sev");
   1162e:	bf40      	sev
  __ASM volatile ("wfe");
   11630:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   11632:	9b05      	ldr	r3, [sp, #20]
   11634:	2b02      	cmp	r3, #2
   11636:	d0f9      	beq.n	1162c <role_disable+0x5c>
   11638:	e7ed      	b.n	11616 <role_disable+0x46>
		ticks_xtal_to_start =
   1163a:	4b90      	ldr	r3, [pc, #576]	; (1187c <role_disable+0x2ac>)
   1163c:	f8d3 60cc 	ldr.w	r6, [r3, #204]	; 0xcc
		ticks_active_to_start =
   11640:	f8d3 70d0 	ldr.w	r7, [r3, #208]	; 0xd0
	LL_ASSERT(!_radio.ticker_id_stop);
   11644:	4b8d      	ldr	r3, [pc, #564]	; (1187c <role_disable+0x2ac>)
   11646:	7b9b      	ldrb	r3, [r3, #14]
   11648:	2b00      	cmp	r3, #0
   1164a:	d12b      	bne.n	116a4 <role_disable+0xd4>
	_radio.ticker_id_stop = ticker_id_primary;
   1164c:	4b8b      	ldr	r3, [pc, #556]	; (1187c <role_disable+0x2ac>)
   1164e:	739c      	strb	r4, [r3, #14]
	ret_cb = TICKER_STATUS_BUSY;
   11650:	ab06      	add	r3, sp, #24
   11652:	2202      	movs	r2, #2
   11654:	f843 2d04 	str.w	r2, [r3, #-4]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11658:	9300      	str	r3, [sp, #0]
   1165a:	4b89      	ldr	r3, [pc, #548]	; (11880 <role_disable+0x2b0>)
   1165c:	4622      	mov	r2, r4
   1165e:	2103      	movs	r1, #3
   11660:	2000      	movs	r0, #0
   11662:	f7fe ff1d 	bl	104a0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   11666:	2802      	cmp	r0, #2
   11668:	d022      	beq.n	116b0 <role_disable+0xe0>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   1166a:	9b05      	ldr	r3, [sp, #20]
   1166c:	b973      	cbnz	r3, 1168c <role_disable+0xbc>
	if ((_radio.ticker_id_prepare == ticker_id_primary)
   1166e:	4b83      	ldr	r3, [pc, #524]	; (1187c <role_disable+0x2ac>)
   11670:	7b1b      	ldrb	r3, [r3, #12]
   11672:	b2db      	uxtb	r3, r3
   11674:	429c      	cmp	r4, r3
   11676:	d02d      	beq.n	116d4 <role_disable+0x104>
	    || (_radio.ticker_id_event == ticker_id_primary)) {
   11678:	4b80      	ldr	r3, [pc, #512]	; (1187c <role_disable+0x2ac>)
   1167a:	7b5b      	ldrb	r3, [r3, #13]
   1167c:	b2db      	uxtb	r3, r3
   1167e:	429c      	cmp	r4, r3
   11680:	d028      	beq.n	116d4 <role_disable+0x104>
	if (!_radio.ticker_id_stop) {
   11682:	4b7e      	ldr	r3, [pc, #504]	; (1187c <role_disable+0x2ac>)
   11684:	7b9b      	ldrb	r3, [r3, #14]
   11686:	b90b      	cbnz	r3, 1168c <role_disable+0xbc>
		ret_cb = TICKER_STATUS_FAILURE;
   11688:	2301      	movs	r3, #1
   1168a:	9305      	str	r3, [sp, #20]
	_radio.ticker_id_stop = 0;
   1168c:	2200      	movs	r2, #0
   1168e:	4b7b      	ldr	r3, [pc, #492]	; (1187c <role_disable+0x2ac>)
   11690:	739a      	strb	r2, [r3, #14]
	return ret_cb;
   11692:	9805      	ldr	r0, [sp, #20]
}
   11694:	b007      	add	sp, #28
   11696:	bdf0      	pop	{r4, r5, r6, r7, pc}
			LL_ASSERT(0);
   11698:	4040      	eors	r0, r0
   1169a:	f380 8811 	msr	BASEPRI, r0
   1169e:	f04f 0004 	mov.w	r0, #4
   116a2:	df02      	svc	2
	LL_ASSERT(!_radio.ticker_id_stop);
   116a4:	4040      	eors	r0, r0
   116a6:	f380 8811 	msr	BASEPRI, r0
   116aa:	f04f 0004 	mov.w	r0, #4
   116ae:	df02      	svc	2
		if (_radio.ticker_id_event == ticker_id_primary) {
   116b0:	4b72      	ldr	r3, [pc, #456]	; (1187c <role_disable+0x2ac>)
   116b2:	7b5b      	ldrb	r3, [r3, #13]
   116b4:	b2db      	uxtb	r3, r3
   116b6:	429c      	cmp	r4, r3
   116b8:	d108      	bne.n	116cc <role_disable+0xfc>
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   116ba:	2201      	movs	r2, #1
   116bc:	4611      	mov	r1, r2
   116be:	2003      	movs	r0, #3
   116c0:	f7fd f802 	bl	e6c8 <mayfly_enable>
   116c4:	e002      	b.n	116cc <role_disable+0xfc>
   116c6:	bf20      	wfe
  __ASM volatile ("sev");
   116c8:	bf40      	sev
  __ASM volatile ("wfe");
   116ca:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   116cc:	9b05      	ldr	r3, [sp, #20]
   116ce:	2b02      	cmp	r3, #2
   116d0:	d0f9      	beq.n	116c6 <role_disable+0xf6>
   116d2:	e7ca      	b.n	1166a <role_disable+0x9a>
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   116d4:	ab06      	add	r3, sp, #24
   116d6:	2202      	movs	r2, #2
   116d8:	f843 2d10 	str.w	r2, [r3, #-16]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   116dc:	9300      	str	r3, [sp, #0]
   116de:	4b68      	ldr	r3, [pc, #416]	; (11880 <role_disable+0x2b0>)
   116e0:	2200      	movs	r2, #0
   116e2:	2103      	movs	r1, #3
   116e4:	4610      	mov	r0, r2
   116e6:	f7fe fedb 	bl	104a0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   116ea:	2802      	cmp	r0, #2
   116ec:	d029      	beq.n	11742 <role_disable+0x172>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   116ee:	9b02      	ldr	r3, [sp, #8]
   116f0:	2b00      	cmp	r3, #0
   116f2:	d17c      	bne.n	117ee <role_disable+0x21e>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   116f4:	2302      	movs	r3, #2
   116f6:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   116f8:	4b60      	ldr	r3, [pc, #384]	; (1187c <role_disable+0x2ac>)
   116fa:	7b1b      	ldrb	r3, [r3, #12]
   116fc:	2b00      	cmp	r3, #0
   116fe:	d02e      	beq.n	1175e <role_disable+0x18e>
		_radio.ticker_id_prepare = 0;
   11700:	2000      	movs	r0, #0
   11702:	4b5e      	ldr	r3, [pc, #376]	; (1187c <role_disable+0x2ac>)
   11704:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11706:	ab03      	add	r3, sp, #12
   11708:	9300      	str	r3, [sp, #0]
   1170a:	4b5d      	ldr	r3, [pc, #372]	; (11880 <role_disable+0x2b0>)
   1170c:	2201      	movs	r2, #1
   1170e:	2103      	movs	r1, #3
   11710:	f7fe fec6 	bl	104a0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   11714:	2802      	cmp	r0, #2
   11716:	d028      	beq.n	1176a <role_disable+0x19a>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   11718:	9b03      	ldr	r3, [sp, #12]
   1171a:	2b00      	cmp	r3, #0
   1171c:	d142      	bne.n	117a4 <role_disable+0x1d4>
			ticks_xtal_to_start &= ~BIT(31);
   1171e:	f026 4600 	bic.w	r6, r6, #2147483648	; 0x80000000
			if (ticks_active_to_start > ticks_xtal_to_start) {
   11722:	42b7      	cmp	r7, r6
   11724:	d92f      	bls.n	11786 <role_disable+0x1b6>
				retval = mayfly_enqueue(
   11726:	4b57      	ldr	r3, [pc, #348]	; (11884 <role_disable+0x2b4>)
   11728:	2200      	movs	r2, #0
   1172a:	4611      	mov	r1, r2
   1172c:	2003      	movs	r0, #3
   1172e:	f7fd f809 	bl	e744 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11732:	2800      	cmp	r0, #0
   11734:	d0a5      	beq.n	11682 <role_disable+0xb2>
   11736:	4040      	eors	r0, r0
   11738:	f380 8811 	msr	BASEPRI, r0
   1173c:	f04f 0004 	mov.w	r0, #4
   11740:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11742:	2201      	movs	r2, #1
   11744:	4611      	mov	r1, r2
   11746:	2003      	movs	r0, #3
   11748:	f7fc ffbe 	bl	e6c8 <mayfly_enable>
		LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1174c:	9b02      	ldr	r3, [sp, #8]
   1174e:	2b02      	cmp	r3, #2
   11750:	d1cd      	bne.n	116ee <role_disable+0x11e>
   11752:	4040      	eors	r0, r0
   11754:	f380 8811 	msr	BASEPRI, r0
   11758:	f04f 0004 	mov.w	r0, #4
   1175c:	df02      	svc	2
		LL_ASSERT(_radio.ticker_id_prepare);
   1175e:	4040      	eors	r0, r0
   11760:	f380 8811 	msr	BASEPRI, r0
   11764:	f04f 0004 	mov.w	r0, #4
   11768:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_APP,
   1176a:	2201      	movs	r2, #1
   1176c:	4611      	mov	r1, r2
   1176e:	2003      	movs	r0, #3
   11770:	f7fc ffaa 	bl	e6c8 <mayfly_enable>
			LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   11774:	9b03      	ldr	r3, [sp, #12]
   11776:	2b02      	cmp	r3, #2
   11778:	d1ce      	bne.n	11718 <role_disable+0x148>
   1177a:	4040      	eors	r0, r0
   1177c:	f380 8811 	msr	BASEPRI, r0
   11780:	f04f 0004 	mov.w	r0, #4
   11784:	df02      	svc	2
				retval = mayfly_enqueue(
   11786:	4b40      	ldr	r3, [pc, #256]	; (11888 <role_disable+0x2b8>)
   11788:	2200      	movs	r2, #0
   1178a:	4611      	mov	r1, r2
   1178c:	2003      	movs	r0, #3
   1178e:	f7fc ffd9 	bl	e744 <mayfly_enqueue>
				LL_ASSERT(!retval);
   11792:	2800      	cmp	r0, #0
   11794:	f43f af75 	beq.w	11682 <role_disable+0xb2>
   11798:	4040      	eors	r0, r0
   1179a:	f380 8811 	msr	BASEPRI, r0
   1179e:	f04f 0004 	mov.w	r0, #4
   117a2:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   117a4:	9b03      	ldr	r3, [sp, #12]
   117a6:	2b01      	cmp	r3, #1
   117a8:	d11b      	bne.n	117e2 <role_disable+0x212>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   117aa:	4b36      	ldr	r3, [pc, #216]	; (11884 <role_disable+0x2b4>)
   117ac:	2200      	movs	r2, #0
   117ae:	4611      	mov	r1, r2
   117b0:	2003      	movs	r0, #3
   117b2:	f7fc ffc7 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   117b6:	b970      	cbnz	r0, 117d6 <role_disable+0x206>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   117b8:	4b33      	ldr	r3, [pc, #204]	; (11888 <role_disable+0x2b8>)
   117ba:	2200      	movs	r2, #0
   117bc:	4611      	mov	r1, r2
   117be:	2003      	movs	r0, #3
   117c0:	f7fc ffc0 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   117c4:	2800      	cmp	r0, #0
   117c6:	f43f af5c 	beq.w	11682 <role_disable+0xb2>
   117ca:	4040      	eors	r0, r0
   117cc:	f380 8811 	msr	BASEPRI, r0
   117d0:	f04f 0004 	mov.w	r0, #4
   117d4:	df02      	svc	2
			LL_ASSERT(!retval);
   117d6:	4040      	eors	r0, r0
   117d8:	f380 8811 	msr	BASEPRI, r0
   117dc:	f04f 0004 	mov.w	r0, #4
   117e0:	df02      	svc	2
			LL_ASSERT(0);
   117e2:	4040      	eors	r0, r0
   117e4:	f380 8811 	msr	BASEPRI, r0
   117e8:	f04f 0004 	mov.w	r0, #4
   117ec:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   117ee:	9b02      	ldr	r3, [sp, #8]
   117f0:	2b01      	cmp	r3, #1
   117f2:	d14d      	bne.n	11890 <role_disable+0x2c0>
		if (ticker_id_stop != TICKER_NULL) {
   117f4:	2dff      	cmp	r5, #255	; 0xff
   117f6:	d011      	beq.n	1181c <role_disable+0x24c>
			u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   117f8:	ab06      	add	r3, sp, #24
   117fa:	2202      	movs	r2, #2
   117fc:	f843 2d08 	str.w	r2, [r3, #-8]!
			ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11800:	9300      	str	r3, [sp, #0]
   11802:	4b1f      	ldr	r3, [pc, #124]	; (11880 <role_disable+0x2b0>)
   11804:	462a      	mov	r2, r5
   11806:	2103      	movs	r1, #3
   11808:	2000      	movs	r0, #0
   1180a:	f7fe fe49 	bl	104a0 <ticker_stop>
			if (ret == TICKER_STATUS_BUSY) {
   1180e:	2802      	cmp	r0, #2
   11810:	d018      	beq.n	11844 <role_disable+0x274>
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11812:	9b04      	ldr	r3, [sp, #16]
   11814:	b113      	cbz	r3, 1181c <role_disable+0x24c>
   11816:	9b04      	ldr	r3, [sp, #16]
   11818:	2b01      	cmp	r3, #1
   1181a:	d121      	bne.n	11860 <role_disable+0x290>
		if (_radio.role != ROLE_NONE) {
   1181c:	4b17      	ldr	r3, [pc, #92]	; (1187c <role_disable+0x2ac>)
   1181e:	7bdb      	ldrb	r3, [r3, #15]
   11820:	2b00      	cmp	r3, #0
   11822:	f43f af2e 	beq.w	11682 <role_disable+0xb2>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   11826:	4b19      	ldr	r3, [pc, #100]	; (1188c <role_disable+0x2bc>)
   11828:	2204      	movs	r2, #4
   1182a:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_APP,
   1182c:	2200      	movs	r2, #0
   1182e:	4611      	mov	r1, r2
   11830:	2003      	movs	r0, #3
   11832:	f7fc ff87 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11836:	b1e0      	cbz	r0, 11872 <role_disable+0x2a2>
   11838:	4040      	eors	r0, r0
   1183a:	f380 8811 	msr	BASEPRI, r0
   1183e:	f04f 0004 	mov.w	r0, #4
   11842:	df02      	svc	2
				mayfly_enable(RADIO_TICKER_USER_ID_APP,
   11844:	2201      	movs	r2, #1
   11846:	4611      	mov	r1, r2
   11848:	2003      	movs	r0, #3
   1184a:	f7fc ff3d 	bl	e6c8 <mayfly_enable>
				LL_ASSERT(ret_cb != TICKER_STATUS_BUSY);
   1184e:	9b04      	ldr	r3, [sp, #16]
   11850:	2b02      	cmp	r3, #2
   11852:	d1de      	bne.n	11812 <role_disable+0x242>
   11854:	4040      	eors	r0, r0
   11856:	f380 8811 	msr	BASEPRI, r0
   1185a:	f04f 0004 	mov.w	r0, #4
   1185e:	df02      	svc	2
			LL_ASSERT((ret_cb == TICKER_STATUS_SUCCESS) ||
   11860:	4040      	eors	r0, r0
   11862:	f380 8811 	msr	BASEPRI, r0
   11866:	f04f 0004 	mov.w	r0, #4
   1186a:	df02      	svc	2
   1186c:	bf20      	wfe
  __ASM volatile ("sev");
   1186e:	bf40      	sev
  __ASM volatile ("wfe");
   11870:	bf20      	wfe
			while (_radio.role != ROLE_NONE) {
   11872:	4b02      	ldr	r3, [pc, #8]	; (1187c <role_disable+0x2ac>)
   11874:	7bdb      	ldrb	r3, [r3, #15]
   11876:	2b00      	cmp	r3, #0
   11878:	d1f8      	bne.n	1186c <role_disable+0x29c>
   1187a:	e702      	b.n	11682 <role_disable+0xb2>
   1187c:	20000f84 	.word	0x20000f84
   11880:	00010d4d 	.word	0x00010d4d
   11884:	2000bc98 	.word	0x2000bc98
   11888:	2000bd58 	.word	0x2000bd58
   1188c:	2000bcc8 	.word	0x2000bcc8
		LL_ASSERT(0);
   11890:	4040      	eors	r0, r0
   11892:	f380 8811 	msr	BASEPRI, r0
   11896:	f04f 0004 	mov.w	r0, #4
   1189a:	df02      	svc	2
				return 1;
   1189c:	2001      	movs	r0, #1
   1189e:	e6f9      	b.n	11694 <role_disable+0xc4>

000118a0 <event_stop>:
{
   118a0:	b508      	push	{r3, lr}
	s_mfy_radio_stop.param = context;
   118a2:	4a08      	ldr	r2, [pc, #32]	; (118c4 <event_stop+0x24>)
   118a4:	6093      	str	r3, [r2, #8]
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   118a6:	4613      	mov	r3, r2
   118a8:	2200      	movs	r2, #0
   118aa:	4611      	mov	r1, r2
   118ac:	4610      	mov	r0, r2
   118ae:	f7fc ff49 	bl	e744 <mayfly_enqueue>
	LL_ASSERT(!retval);
   118b2:	b900      	cbnz	r0, 118b6 <event_stop+0x16>
   118b4:	bd08      	pop	{r3, pc}
   118b6:	4040      	eors	r0, r0
   118b8:	f380 8811 	msr	BASEPRI, r0
   118bc:	f04f 0004 	mov.w	r0, #4
   118c0:	df02      	svc	2
   118c2:	bf00      	nop
   118c4:	2000bca8 	.word	0x2000bca8

000118c8 <event_adv_stop>:
{
   118c8:	b500      	push	{lr}
   118ca:	b083      	sub	sp, #12
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   118cc:	2305      	movs	r3, #5
   118ce:	2200      	movs	r2, #0
   118d0:	4611      	mov	r1, r2
   118d2:	4610      	mov	r0, r2
   118d4:	f7ff ffe4 	bl	118a0 <event_stop>
	ticker_status =
   118d8:	f241 73e4 	movw	r3, #6116	; 0x17e4
   118dc:	9300      	str	r3, [sp, #0]
   118de:	4b09      	ldr	r3, [pc, #36]	; (11904 <event_adv_stop+0x3c>)
   118e0:	2205      	movs	r2, #5
   118e2:	2100      	movs	r1, #0
   118e4:	4608      	mov	r0, r1
   118e6:	f7fe fddb 	bl	104a0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   118ea:	b108      	cbz	r0, 118f0 <event_adv_stop+0x28>
   118ec:	2802      	cmp	r0, #2
   118ee:	d102      	bne.n	118f6 <event_adv_stop+0x2e>
}
   118f0:	b003      	add	sp, #12
   118f2:	f85d fb04 	ldr.w	pc, [sp], #4
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   118f6:	4040      	eors	r0, r0
   118f8:	f380 8811 	msr	BASEPRI, r0
   118fc:	f04f 0004 	mov.w	r0, #4
   11900:	df02      	svc	2
   11902:	bf00      	nop
   11904:	00012189 	.word	0x00012189

00011908 <event_inactive>:
{
   11908:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1190a:	4b07      	ldr	r3, [pc, #28]	; (11928 <event_inactive+0x20>)
   1190c:	2200      	movs	r2, #0
   1190e:	4611      	mov	r1, r2
   11910:	4610      	mov	r0, r2
   11912:	f7fc ff17 	bl	e744 <mayfly_enqueue>
	LL_ASSERT(!retval);
   11916:	b900      	cbnz	r0, 1191a <event_inactive+0x12>
   11918:	bd08      	pop	{r3, pc}
   1191a:	4040      	eors	r0, r0
   1191c:	f380 8811 	msr	BASEPRI, r0
   11920:	f04f 0004 	mov.w	r0, #4
   11924:	df02      	svc	2
   11926:	bf00      	nop
   11928:	2000bc78 	.word	0x2000bc78

0001192c <mayfly_xtal_retain>:
{
   1192c:	b508      	push	{r3, lr}
	if (retain) {
   1192e:	b1d1      	cbz	r1, 11966 <mayfly_xtal_retain+0x3a>
		if (!s_xtal_retained) {
   11930:	4b1c      	ldr	r3, [pc, #112]	; (119a4 <mayfly_xtal_retain+0x78>)
   11932:	781b      	ldrb	r3, [r3, #0]
   11934:	b953      	cbnz	r3, 1194c <mayfly_xtal_retain+0x20>
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   11936:	2801      	cmp	r0, #1
   11938:	d109      	bne.n	1194e <mayfly_xtal_retain+0x22>
			s_xtal_retained = 1;
   1193a:	2201      	movs	r2, #1
   1193c:	4b19      	ldr	r3, [pc, #100]	; (119a4 <mayfly_xtal_retain+0x78>)
   1193e:	701a      	strb	r2, [r3, #0]
			retval = mayfly_enqueue(caller_id,
   11940:	4b19      	ldr	r3, [pc, #100]	; (119a8 <mayfly_xtal_retain+0x7c>)
   11942:	2200      	movs	r2, #0
   11944:	4611      	mov	r1, r2
   11946:	f7fc fefd 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   1194a:	b930      	cbnz	r0, 1195a <mayfly_xtal_retain+0x2e>
   1194c:	bd08      	pop	{r3, pc}
			LL_ASSERT(caller_id == RADIO_TICKER_USER_ID_JOB);
   1194e:	4040      	eors	r0, r0
   11950:	f380 8811 	msr	BASEPRI, r0
   11954:	f04f 0004 	mov.w	r0, #4
   11958:	df02      	svc	2
			LL_ASSERT(!retval);
   1195a:	4040      	eors	r0, r0
   1195c:	f380 8811 	msr	BASEPRI, r0
   11960:	f04f 0004 	mov.w	r0, #4
   11964:	df02      	svc	2
		if (s_xtal_retained) {
   11966:	4b0f      	ldr	r3, [pc, #60]	; (119a4 <mayfly_xtal_retain+0x78>)
   11968:	781b      	ldrb	r3, [r3, #0]
   1196a:	2b00      	cmp	r3, #0
   1196c:	d0ee      	beq.n	1194c <mayfly_xtal_retain+0x20>
			s_xtal_retained = 0;
   1196e:	2200      	movs	r2, #0
   11970:	4b0c      	ldr	r3, [pc, #48]	; (119a4 <mayfly_xtal_retain+0x78>)
   11972:	701a      	strb	r2, [r3, #0]
			switch (caller_id) {
   11974:	b138      	cbz	r0, 11986 <mayfly_xtal_retain+0x5a>
   11976:	2801      	cmp	r0, #1
   11978:	d012      	beq.n	119a0 <mayfly_xtal_retain+0x74>
				LL_ASSERT(0);
   1197a:	4040      	eors	r0, r0
   1197c:	f380 8811 	msr	BASEPRI, r0
   11980:	f04f 0004 	mov.w	r0, #4
   11984:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[0];
   11986:	4b09      	ldr	r3, [pc, #36]	; (119ac <mayfly_xtal_retain+0x80>)
			retval = mayfly_enqueue(caller_id,
   11988:	2200      	movs	r2, #0
   1198a:	4611      	mov	r1, r2
   1198c:	f7fc feda 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   11990:	2800      	cmp	r0, #0
   11992:	d0db      	beq.n	1194c <mayfly_xtal_retain+0x20>
   11994:	4040      	eors	r0, r0
   11996:	f380 8811 	msr	BASEPRI, r0
   1199a:	f04f 0004 	mov.w	r0, #4
   1199e:	df02      	svc	2
				p_mfy_xtal_stop = &s_mfy_xtal_stop[1];
   119a0:	4b03      	ldr	r3, [pc, #12]	; (119b0 <mayfly_xtal_retain+0x84>)
   119a2:	e7f1      	b.n	11988 <mayfly_xtal_retain+0x5c>
   119a4:	200014fc 	.word	0x200014fc
   119a8:	2000bd18 	.word	0x2000bd18
   119ac:	2000bd28 	.word	0x2000bd28
   119b0:	2000bd38 	.word	0x2000bd38

000119b4 <event_active>:
{
   119b4:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   119b6:	4b07      	ldr	r3, [pc, #28]	; (119d4 <event_active+0x20>)
   119b8:	2200      	movs	r2, #0
   119ba:	4611      	mov	r1, r2
   119bc:	4610      	mov	r0, r2
   119be:	f7fc fec1 	bl	e744 <mayfly_enqueue>
	LL_ASSERT(!retval);
   119c2:	b900      	cbnz	r0, 119c6 <event_active+0x12>
   119c4:	bd08      	pop	{r3, pc}
   119c6:	4040      	eors	r0, r0
   119c8:	f380 8811 	msr	BASEPRI, r0
   119cc:	f04f 0004 	mov.w	r0, #4
   119d0:	df02      	svc	2
   119d2:	bf00      	nop
   119d4:	2000bc68 	.word	0x2000bc68

000119d8 <event_xtal>:
{
   119d8:	b508      	push	{r3, lr}
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   119da:	4b07      	ldr	r3, [pc, #28]	; (119f8 <event_xtal+0x20>)
   119dc:	2200      	movs	r2, #0
   119de:	4611      	mov	r1, r2
   119e0:	4610      	mov	r0, r2
   119e2:	f7fc feaf 	bl	e744 <mayfly_enqueue>
	LL_ASSERT(!retval);
   119e6:	b900      	cbnz	r0, 119ea <event_xtal+0x12>
   119e8:	bd08      	pop	{r3, pc}
   119ea:	4040      	eors	r0, r0
   119ec:	f380 8811 	msr	BASEPRI, r0
   119f0:	f04f 0004 	mov.w	r0, #4
   119f4:	df02      	svc	2
   119f6:	bf00      	nop
   119f8:	2000bd08 	.word	0x2000bd08

000119fc <mayfly_radio_active>:
{
   119fc:	b508      	push	{r3, lr}
	if ((u32_t)params) {
   119fe:	b148      	cbz	r0, 11a14 <mayfly_radio_active+0x18>
		if (s_active++) {
   11a00:	4a0e      	ldr	r2, [pc, #56]	; (11a3c <mayfly_radio_active+0x40>)
   11a02:	7813      	ldrb	r3, [r2, #0]
   11a04:	1c59      	adds	r1, r3, #1
   11a06:	7011      	strb	r1, [r2, #0]
   11a08:	b103      	cbz	r3, 11a0c <mayfly_radio_active+0x10>
   11a0a:	bd08      	pop	{r3, pc}
		radio_active_callback(1);
   11a0c:	2001      	movs	r0, #1
   11a0e:	f007 f8a5 	bl	18b5c <radio_active_callback>
   11a12:	bd08      	pop	{r3, pc}
		LL_ASSERT(s_active);
   11a14:	4b09      	ldr	r3, [pc, #36]	; (11a3c <mayfly_radio_active+0x40>)
   11a16:	781b      	ldrb	r3, [r3, #0]
   11a18:	b14b      	cbz	r3, 11a2e <mayfly_radio_active+0x32>
		if (--s_active) {
   11a1a:	3b01      	subs	r3, #1
   11a1c:	b2db      	uxtb	r3, r3
   11a1e:	4a07      	ldr	r2, [pc, #28]	; (11a3c <mayfly_radio_active+0x40>)
   11a20:	7013      	strb	r3, [r2, #0]
   11a22:	2b00      	cmp	r3, #0
   11a24:	d1f1      	bne.n	11a0a <mayfly_radio_active+0xe>
		radio_active_callback(0);
   11a26:	2000      	movs	r0, #0
   11a28:	f007 f898 	bl	18b5c <radio_active_callback>
   11a2c:	e7ed      	b.n	11a0a <mayfly_radio_active+0xe>
		LL_ASSERT(s_active);
   11a2e:	4040      	eors	r0, r0
   11a30:	f380 8811 	msr	BASEPRI, r0
   11a34:	f04f 0004 	mov.w	r0, #4
   11a38:	df02      	svc	2
   11a3a:	bf00      	nop
   11a3c:	20001468 	.word	0x20001468

00011a40 <mayfly_radio_inactive>:
{
   11a40:	b508      	push	{r3, lr}
	mayfly_radio_active(0);
   11a42:	2000      	movs	r0, #0
   11a44:	f7ff ffda 	bl	119fc <mayfly_radio_active>
   11a48:	bd08      	pop	{r3, pc}
	...

00011a4c <mayfly_radio_stop>:
{
   11a4c:	b538      	push	{r3, r4, r5, lr}
	enum state state = (enum state)((u32_t)params & 0xff);
   11a4e:	b2c4      	uxtb	r4, r0
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   11a50:	1f23      	subs	r3, r4, #4
   11a52:	b2db      	uxtb	r3, r3
   11a54:	2b01      	cmp	r3, #1
   11a56:	d808      	bhi.n	11a6a <mayfly_radio_stop+0x1e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11a58:	4b10      	ldr	r3, [pc, #64]	; (11a9c <mayfly_radio_stop+0x50>)
   11a5a:	7c1b      	ldrb	r3, [r3, #16]
		      (_radio.state != STATE_STOP) &&
   11a5c:	b16b      	cbz	r3, 11a7a <mayfly_radio_stop+0x2e>
	radio_used = ((_radio.state != STATE_NONE) &&
   11a5e:	2b04      	cmp	r3, #4
   11a60:	d014      	beq.n	11a8c <mayfly_radio_stop+0x40>
		      (_radio.state != STATE_STOP) &&
   11a62:	2b05      	cmp	r3, #5
   11a64:	d007      	beq.n	11a76 <mayfly_radio_stop+0x2a>
   11a66:	2301      	movs	r3, #1
   11a68:	e008      	b.n	11a7c <mayfly_radio_stop+0x30>
	LL_ASSERT((state == STATE_STOP) || (state == STATE_ABORT));
   11a6a:	4040      	eors	r0, r0
   11a6c:	f380 8811 	msr	BASEPRI, r0
   11a70:	f04f 0004 	mov.w	r0, #4
   11a74:	df02      	svc	2
		      (_radio.state != STATE_STOP) &&
   11a76:	2300      	movs	r3, #0
   11a78:	e000      	b.n	11a7c <mayfly_radio_stop+0x30>
   11a7a:	2300      	movs	r3, #0
	radio_used = ((_radio.state != STATE_NONE) &&
   11a7c:	461d      	mov	r5, r3
	if (radio_used || !radio_is_idle()) {
   11a7e:	b13b      	cbz	r3, 11a90 <mayfly_radio_stop+0x44>
		if (radio_used) {
   11a80:	b10d      	cbz	r5, 11a86 <mayfly_radio_stop+0x3a>
			_radio.state = state;
   11a82:	4b06      	ldr	r3, [pc, #24]	; (11a9c <mayfly_radio_stop+0x50>)
   11a84:	741c      	strb	r4, [r3, #16]
		radio_disable();
   11a86:	f7fd f9b3 	bl	edf0 <radio_disable>
   11a8a:	bd38      	pop	{r3, r4, r5, pc}
		      (_radio.state != STATE_STOP) &&
   11a8c:	2300      	movs	r3, #0
   11a8e:	e7f5      	b.n	11a7c <mayfly_radio_stop+0x30>
	if (radio_used || !radio_is_idle()) {
   11a90:	f7fd f9dc 	bl	ee4c <radio_is_idle>
   11a94:	2800      	cmp	r0, #0
   11a96:	d0f3      	beq.n	11a80 <mayfly_radio_stop+0x34>
   11a98:	e7f7      	b.n	11a8a <mayfly_radio_stop+0x3e>
   11a9a:	bf00      	nop
   11a9c:	20000f84 	.word	0x20000f84

00011aa0 <adv_scan_conn_configure>:
{
   11aa0:	b508      	push	{r3, lr}
	radio_reset();
   11aa2:	f7fd f8ff 	bl	eca4 <radio_reset>
	radio_tx_power_set(0);
   11aa6:	2000      	movs	r0, #0
   11aa8:	f7fd f918 	bl	ecdc <radio_tx_power_set>
	radio_isr_set(isr);
   11aac:	4801      	ldr	r0, [pc, #4]	; (11ab4 <adv_scan_conn_configure+0x14>)
   11aae:	f7fd f8c1 	bl	ec34 <radio_isr_set>
   11ab2:	bd08      	pop	{r3, pc}
   11ab4:	0000f3e9 	.word	0x0000f3e9

00011ab8 <adv_scan_configure>:
{
   11ab8:	b570      	push	{r4, r5, r6, lr}
   11aba:	b082      	sub	sp, #8
   11abc:	4604      	mov	r4, r0
   11abe:	460e      	mov	r6, r1
	u32_t aa = 0x8e89bed6;
   11ac0:	ad02      	add	r5, sp, #8
   11ac2:	4b0d      	ldr	r3, [pc, #52]	; (11af8 <adv_scan_configure+0x40>)
   11ac4:	f845 3d04 	str.w	r3, [r5, #-4]!
	adv_scan_conn_configure();
   11ac8:	f7ff ffea 	bl	11aa0 <adv_scan_conn_configure>
	radio_phy_set(phy, flags);
   11acc:	4631      	mov	r1, r6
   11ace:	4620      	mov	r0, r4
   11ad0:	f7fd f8f6 	bl	ecc0 <radio_phy_set>
	radio_aa_set((u8_t *)&aa);
   11ad4:	4628      	mov	r0, r5
   11ad6:	f7fd f91f 	bl	ed18 <radio_aa_set>
	radio_pkt_configure(8, PDU_AC_PAYLOAD_SIZE_MAX, (phy << 1));
   11ada:	0062      	lsls	r2, r4, #1
   11adc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   11ae0:	2125      	movs	r1, #37	; 0x25
   11ae2:	2008      	movs	r0, #8
   11ae4:	f7fd f930 	bl	ed48 <radio_pkt_configure>
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   11ae8:	4904      	ldr	r1, [pc, #16]	; (11afc <adv_scan_configure+0x44>)
   11aea:	f240 605b 	movw	r0, #1627	; 0x65b
   11aee:	f7fd f9b7 	bl	ee60 <radio_crc_configure>
}
   11af2:	b002      	add	sp, #8
   11af4:	bd70      	pop	{r4, r5, r6, pc}
   11af6:	bf00      	nop
   11af8:	8e89bed6 	.word	0x8e89bed6
   11afc:	00555555 	.word	0x00555555

00011b00 <connection_configure>:
{
   11b00:	b510      	push	{r4, lr}
   11b02:	4604      	mov	r4, r0
	adv_scan_conn_configure();
   11b04:	f7ff ffcc 	bl	11aa0 <adv_scan_conn_configure>
	radio_aa_set(conn->access_addr);
   11b08:	f104 0010 	add.w	r0, r4, #16
   11b0c:	f7fd f904 	bl	ed18 <radio_aa_set>
			    (((u32_t)conn->crc_init[2] << 16) |
   11b10:	7da1      	ldrb	r1, [r4, #22]
			     ((u32_t)conn->crc_init[1] << 8) |
   11b12:	7d63      	ldrb	r3, [r4, #21]
   11b14:	021b      	lsls	r3, r3, #8
			    (((u32_t)conn->crc_init[2] << 16) |
   11b16:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			     ((u32_t)conn->crc_init[0])));
   11b1a:	7d21      	ldrb	r1, [r4, #20]
	radio_crc_configure(((0x5bUL) | ((0x06UL) << 8) | ((0x00UL) << 16)),
   11b1c:	4319      	orrs	r1, r3
   11b1e:	f240 605b 	movw	r0, #1627	; 0x65b
   11b22:	f7fd f99d 	bl	ee60 <radio_crc_configure>
   11b26:	bd10      	pop	{r4, pc}

00011b28 <rx_packet_set>:
{
   11b28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11b2a:	4605      	mov	r5, r0
   11b2c:	460f      	mov	r7, r1
	max_rx_octets = conn->max_rx_octets;
   11b2e:	8e06      	ldrh	r6, [r0, #48]	; 0x30
	phy = conn->phy_rx;
   11b30:	f890 403a 	ldrb.w	r4, [r0, #58]	; 0x3a
   11b34:	f004 0407 	and.w	r4, r4, #7
	radio_phy_set(phy, 0);
   11b38:	2100      	movs	r1, #0
   11b3a:	4620      	mov	r0, r4
   11b3c:	f7fd f8c0 	bl	ecc0 <radio_phy_set>
	if (conn->enc_rx) {
   11b40:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   11b44:	f013 0f10 	tst.w	r3, #16
   11b48:	d10a      	bne.n	11b60 <rx_packet_set+0x38>
		radio_pkt_configure(8, max_rx_octets, (phy << 1) | 0x01);
   11b4a:	0062      	lsls	r2, r4, #1
   11b4c:	f042 0201 	orr.w	r2, r2, #1
   11b50:	b2f1      	uxtb	r1, r6
   11b52:	2008      	movs	r0, #8
   11b54:	f7fd f8f8 	bl	ed48 <radio_pkt_configure>
		radio_pkt_rx_set(pdu_data_rx);
   11b58:	4638      	mov	r0, r7
   11b5a:	f7fd f925 	bl	eda8 <radio_pkt_rx_set>
   11b5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_rx_octets + 4), (phy << 1) | 0x01);
   11b60:	0062      	lsls	r2, r4, #1
   11b62:	1d31      	adds	r1, r6, #4
   11b64:	f042 0201 	orr.w	r2, r2, #1
   11b68:	b2c9      	uxtb	r1, r1
   11b6a:	2008      	movs	r0, #8
   11b6c:	f7fd f8ec 	bl	ed48 <radio_pkt_configure>
		radio_pkt_rx_set(radio_ccm_rx_pkt_set(&conn->ccm_rx, phy,
   11b70:	463a      	mov	r2, r7
   11b72:	4621      	mov	r1, r4
   11b74:	f105 00f9 	add.w	r0, r5, #249	; 0xf9
   11b78:	f7fd fb12 	bl	f1a0 <radio_ccm_rx_pkt_set>
   11b7c:	f7fd f914 	bl	eda8 <radio_pkt_rx_set>
   11b80:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00011b82 <packet_rx_callback>:
{
   11b82:	b508      	push	{r3, lr}
	radio_event_callback();
   11b84:	f006 ffec 	bl	18b60 <radio_event_callback>
   11b88:	bd08      	pop	{r3, pc}
	...

00011b8c <pdu_node_tx_release>:
{
   11b8c:	b538      	push	{r3, r4, r5, lr}
	last = _radio.packet_release_last + 1;
   11b8e:	4a14      	ldr	r2, [pc, #80]	; (11be0 <pdu_node_tx_release+0x54>)
   11b90:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
   11b94:	3301      	adds	r3, #1
   11b96:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_tx_count) {
   11b98:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   11b9c:	4293      	cmp	r3, r2
   11b9e:	d017      	beq.n	11bd0 <pdu_node_tx_release+0x44>
	LL_ASSERT(last != _radio.packet_release_first);
   11ba0:	4a0f      	ldr	r2, [pc, #60]	; (11be0 <pdu_node_tx_release+0x54>)
   11ba2:	f892 2173 	ldrb.w	r2, [r2, #371]	; 0x173
   11ba6:	4293      	cmp	r3, r2
   11ba8:	d014      	beq.n	11bd4 <pdu_node_tx_release+0x48>
	_radio.pkt_release[_radio.packet_release_last].handle = handle;
   11baa:	4a0d      	ldr	r2, [pc, #52]	; (11be0 <pdu_node_tx_release+0x54>)
   11bac:	f8d2 416c 	ldr.w	r4, [r2, #364]	; 0x16c
   11bb0:	f892 5174 	ldrb.w	r5, [r2, #372]	; 0x174
   11bb4:	f824 0035 	strh.w	r0, [r4, r5, lsl #3]
	_radio.pkt_release[_radio.packet_release_last].node_tx = node_tx;
   11bb8:	f8d2 016c 	ldr.w	r0, [r2, #364]	; 0x16c
   11bbc:	f892 4174 	ldrb.w	r4, [r2, #372]	; 0x174
   11bc0:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   11bc4:	6041      	str	r1, [r0, #4]
	_radio.packet_release_last = last;
   11bc6:	f882 3174 	strb.w	r3, [r2, #372]	; 0x174
	packet_rx_callback();
   11bca:	f7ff ffda 	bl	11b82 <packet_rx_callback>
   11bce:	bd38      	pop	{r3, r4, r5, pc}
		last = 0;
   11bd0:	2300      	movs	r3, #0
   11bd2:	e7e5      	b.n	11ba0 <pdu_node_tx_release+0x14>
	LL_ASSERT(last != _radio.packet_release_first);
   11bd4:	4040      	eors	r0, r0
   11bd6:	f380 8811 	msr	BASEPRI, r0
   11bda:	f04f 0004 	mov.w	r0, #4
   11bde:	df02      	svc	2
   11be0:	20000f84 	.word	0x20000f84

00011be4 <packet_tx_enqueue>:
{
   11be4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   11be6:	e016      	b.n	11c16 <packet_tx_enqueue+0x32>
			if (conn->pkt_tx_data == 0) {
   11be8:	f8d0 3148 	ldr.w	r3, [r0, #328]	; 0x148
   11bec:	2b00      	cmp	r3, #0
   11bee:	d040      	beq.n	11c72 <packet_tx_enqueue+0x8e>
			if (conn->pkt_tx_last) {
   11bf0:	f8d0 314c 	ldr.w	r3, [r0, #332]	; 0x14c
   11bf4:	b103      	cbz	r3, 11bf8 <packet_tx_enqueue+0x14>
				conn->pkt_tx_last->next = node_tx_new;
   11bf6:	601d      	str	r5, [r3, #0]
			conn->pkt_tx_last = node_tx_new;
   11bf8:	f8c0 514c 	str.w	r5, [r0, #332]	; 0x14c
		first = _radio.packet_tx_first + 1;
   11bfc:	4a24      	ldr	r2, [pc, #144]	; (11c90 <packet_tx_enqueue+0xac>)
   11bfe:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   11c02:	3301      	adds	r3, #1
   11c04:	b2db      	uxtb	r3, r3
		if (first == _radio.packet_tx_count) {
   11c06:	f892 2170 	ldrb.w	r2, [r2, #368]	; 0x170
   11c0a:	4293      	cmp	r3, r2
   11c0c:	d03c      	beq.n	11c88 <packet_tx_enqueue+0xa4>
		_radio.packet_tx_first = first;
   11c0e:	4a20      	ldr	r2, [pc, #128]	; (11c90 <packet_tx_enqueue+0xac>)
   11c10:	f882 3171 	strb.w	r3, [r2, #369]	; 0x171
	while ((max--) && (_radio.packet_tx_first != _radio.packet_tx_last)) {
   11c14:	4638      	mov	r0, r7
   11c16:	1e47      	subs	r7, r0, #1
   11c18:	b2ff      	uxtb	r7, r7
   11c1a:	2800      	cmp	r0, #0
   11c1c:	d036      	beq.n	11c8c <packet_tx_enqueue+0xa8>
   11c1e:	4a1c      	ldr	r2, [pc, #112]	; (11c90 <packet_tx_enqueue+0xac>)
   11c20:	f892 3171 	ldrb.w	r3, [r2, #369]	; 0x171
   11c24:	b2db      	uxtb	r3, r3
   11c26:	f892 2172 	ldrb.w	r2, [r2, #370]	; 0x172
   11c2a:	4293      	cmp	r3, r2
   11c2c:	d02e      	beq.n	11c8c <packet_tx_enqueue+0xa8>
		pdu_data_q_tx = &_radio.pkt_tx[_radio.packet_tx_first];
   11c2e:	4b18      	ldr	r3, [pc, #96]	; (11c90 <packet_tx_enqueue+0xac>)
   11c30:	f8d3 6168 	ldr.w	r6, [r3, #360]	; 0x168
   11c34:	f893 4171 	ldrb.w	r4, [r3, #369]	; 0x171
   11c38:	b2e4      	uxtb	r4, r4
   11c3a:	eb06 02c4 	add.w	r2, r6, r4, lsl #3
		node_tx_new = pdu_data_q_tx->node_tx;
   11c3e:	6855      	ldr	r5, [r2, #4]
		node_tx_new->next = NULL;
   11c40:	2200      	movs	r2, #0
   11c42:	602a      	str	r2, [r5, #0]
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   11c44:	f836 2034 	ldrh.w	r2, [r6, r4, lsl #3]
   11c48:	f44f 71aa 	mov.w	r1, #340	; 0x154
   11c4c:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   11c50:	f7fc fef6 	bl	ea40 <mem_get>
		if (conn->handle == pdu_data_q_tx->handle) {
   11c54:	8c02      	ldrh	r2, [r0, #32]
   11c56:	f836 3034 	ldrh.w	r3, [r6, r4, lsl #3]
   11c5a:	429a      	cmp	r2, r3
   11c5c:	d0c4      	beq.n	11be8 <packet_tx_enqueue+0x4>
			pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11c5e:	792b      	ldrb	r3, [r5, #4]
   11c60:	f36f 0301 	bfc	r3, #0, #2
   11c64:	712b      	strb	r3, [r5, #4]
			pdu_node_tx_release(pdu_data_q_tx->handle, node_tx_new);
   11c66:	4629      	mov	r1, r5
   11c68:	f836 0034 	ldrh.w	r0, [r6, r4, lsl #3]
   11c6c:	f7ff ff8e 	bl	11b8c <pdu_node_tx_release>
   11c70:	e7c4      	b.n	11bfc <packet_tx_enqueue+0x18>
				conn->pkt_tx_data = node_tx_new;
   11c72:	f8c0 5148 	str.w	r5, [r0, #328]	; 0x148
				if (conn->pkt_tx_head == 0) {
   11c76:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11c7a:	2b00      	cmp	r3, #0
   11c7c:	d1b8      	bne.n	11bf0 <packet_tx_enqueue+0xc>
					conn->pkt_tx_head = node_tx_new;
   11c7e:	f8c0 513c 	str.w	r5, [r0, #316]	; 0x13c
					conn->pkt_tx_last = NULL;
   11c82:	f8c0 314c 	str.w	r3, [r0, #332]	; 0x14c
   11c86:	e7b3      	b.n	11bf0 <packet_tx_enqueue+0xc>
			first = 0;
   11c88:	2300      	movs	r3, #0
   11c8a:	e7c0      	b.n	11c0e <packet_tx_enqueue+0x2a>
   11c8c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   11c8e:	bf00      	nop
   11c90:	20000f84 	.word	0x20000f84

00011c94 <connection_release>:
{
   11c94:	b510      	push	{r4, lr}
   11c96:	b082      	sub	sp, #8
   11c98:	4604      	mov	r4, r0
	mayfly_enable(RADIO_TICKER_USER_ID_WORKER, RADIO_TICKER_USER_ID_JOB, 1);
   11c9a:	2201      	movs	r2, #1
   11c9c:	4611      	mov	r1, r2
   11c9e:	2000      	movs	r0, #0
   11ca0:	f7fc fd12 	bl	e6c8 <mayfly_enable>
			    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   11ca4:	8c22      	ldrh	r2, [r4, #32]
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   11ca6:	3207      	adds	r2, #7
	ticker_status =
   11ca8:	f242 2345 	movw	r3, #8773	; 0x2245
   11cac:	9300      	str	r3, [sp, #0]
   11cae:	4b46      	ldr	r3, [pc, #280]	; (11dc8 <connection_release+0x134>)
   11cb0:	b2d2      	uxtb	r2, r2
   11cb2:	2100      	movs	r1, #0
   11cb4:	4608      	mov	r0, r1
   11cb6:	f7fe fbf3 	bl	104a0 <ticker_stop>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11cba:	b108      	cbz	r0, 11cc0 <connection_release+0x2c>
   11cbc:	2802      	cmp	r0, #2
   11cbe:	d12a      	bne.n	11d16 <connection_release+0x82>
	if ((_radio.state == STATE_ABORT) &&
   11cc0:	4b42      	ldr	r3, [pc, #264]	; (11dcc <connection_release+0x138>)
   11cc2:	7c1b      	ldrb	r3, [r3, #16]
   11cc4:	2b05      	cmp	r3, #5
   11cc6:	d13e      	bne.n	11d46 <connection_release+0xb2>
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11cc8:	4b40      	ldr	r3, [pc, #256]	; (11dcc <connection_release+0x138>)
   11cca:	7b1a      	ldrb	r2, [r3, #12]
   11ccc:	b2d2      	uxtb	r2, r2
					  conn->handle))) {
   11cce:	8c23      	ldrh	r3, [r4, #32]
	    (_radio.ticker_id_prepare == (RADIO_TICKER_ID_FIRST_CONNECTION +
   11cd0:	3307      	adds	r3, #7
	if ((_radio.state == STATE_ABORT) &&
   11cd2:	429a      	cmp	r2, r3
   11cd4:	d137      	bne.n	11d46 <connection_release+0xb2>
		_radio.ticker_id_prepare = 0;
   11cd6:	2000      	movs	r0, #0
   11cd8:	4b3c      	ldr	r3, [pc, #240]	; (11dcc <connection_release+0x138>)
   11cda:	7318      	strb	r0, [r3, #12]
		ticker_status =
   11cdc:	f242 2356 	movw	r3, #8790	; 0x2256
   11ce0:	9300      	str	r3, [sp, #0]
   11ce2:	4b39      	ldr	r3, [pc, #228]	; (11dc8 <connection_release+0x134>)
   11ce4:	2201      	movs	r2, #1
   11ce6:	4601      	mov	r1, r0
   11ce8:	f7fe fbda 	bl	104a0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11cec:	b108      	cbz	r0, 11cf2 <connection_release+0x5e>
   11cee:	2802      	cmp	r0, #2
   11cf0:	d117      	bne.n	11d22 <connection_release+0x8e>
		ticker_status =
   11cf2:	f242 235d 	movw	r3, #8797	; 0x225d
   11cf6:	9300      	str	r3, [sp, #0]
   11cf8:	4b33      	ldr	r3, [pc, #204]	; (11dc8 <connection_release+0x134>)
   11cfa:	2200      	movs	r2, #0
   11cfc:	4611      	mov	r1, r2
   11cfe:	4610      	mov	r0, r2
   11d00:	f7fe fbce 	bl	104a0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11d04:	b1f8      	cbz	r0, 11d46 <connection_release+0xb2>
   11d06:	2802      	cmp	r0, #2
   11d08:	d01d      	beq.n	11d46 <connection_release+0xb2>
   11d0a:	4040      	eors	r0, r0
   11d0c:	f380 8811 	msr	BASEPRI, r0
   11d10:	f04f 0004 	mov.w	r0, #4
   11d14:	df02      	svc	2
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11d16:	4040      	eors	r0, r0
   11d18:	f380 8811 	msr	BASEPRI, r0
   11d1c:	f04f 0004 	mov.w	r0, #4
   11d20:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   11d22:	4040      	eors	r0, r0
   11d24:	f380 8811 	msr	BASEPRI, r0
   11d28:	f04f 0004 	mov.w	r0, #4
   11d2c:	df02      	svc	2
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11d2e:	790b      	ldrb	r3, [r1, #4]
   11d30:	f36f 0301 	bfc	r3, #0, #2
   11d34:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11d36:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11d3a:	681b      	ldr	r3, [r3, #0]
   11d3c:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		pdu_node_tx_release(conn->handle, node_tx);
   11d40:	8c20      	ldrh	r0, [r4, #32]
   11d42:	f7ff ff23 	bl	11b8c <pdu_node_tx_release>
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11d46:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11d4a:	f8d4 3140 	ldr.w	r3, [r4, #320]	; 0x140
   11d4e:	4299      	cmp	r1, r3
   11d50:	d00c      	beq.n	11d6c <connection_release+0xd8>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11d52:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head != conn->pkt_tx_ctrl) &&
   11d56:	4299      	cmp	r1, r3
   11d58:	d1e9      	bne.n	11d2e <connection_release+0x9a>
   11d5a:	e007      	b.n	11d6c <connection_release+0xd8>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11d5c:	6803      	ldr	r3, [r0, #0]
   11d5e:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_ctrl = conn->pkt_tx_head;
   11d62:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
		mem_release(release, &_radio.pkt_tx_ctrl_free);
   11d66:	491a      	ldr	r1, [pc, #104]	; (11dd0 <connection_release+0x13c>)
   11d68:	f7fc fe49 	bl	e9fe <mem_release>
	while ((conn->pkt_tx_head) &&
   11d6c:	f8d4 013c 	ldr.w	r0, [r4, #316]	; 0x13c
   11d70:	b118      	cbz	r0, 11d7a <connection_release+0xe6>
	       (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11d72:	f8d4 3148 	ldr.w	r3, [r4, #328]	; 0x148
	while ((conn->pkt_tx_head) &&
   11d76:	4298      	cmp	r0, r3
   11d78:	d1f0      	bne.n	11d5c <connection_release+0xc8>
	conn->pkt_tx_ctrl = NULL;
   11d7a:	2300      	movs	r3, #0
   11d7c:	f8c4 3140 	str.w	r3, [r4, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   11d80:	f8c4 3144 	str.w	r3, [r4, #324]	; 0x144
	while (conn->pkt_tx_head) {
   11d84:	e00d      	b.n	11da2 <connection_release+0x10e>
		pdu_data_tx->ll_id = PDU_DATA_LLID_RESV;
   11d86:	790b      	ldrb	r3, [r1, #4]
   11d88:	f36f 0301 	bfc	r3, #0, #2
   11d8c:	710b      	strb	r3, [r1, #4]
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   11d8e:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11d92:	681b      	ldr	r3, [r3, #0]
   11d94:	f8c4 313c 	str.w	r3, [r4, #316]	; 0x13c
		conn->pkt_tx_data = conn->pkt_tx_head;
   11d98:	f8c4 3148 	str.w	r3, [r4, #328]	; 0x148
		pdu_node_tx_release(conn->handle, node_tx);
   11d9c:	8c20      	ldrh	r0, [r4, #32]
   11d9e:	f7ff fef5 	bl	11b8c <pdu_node_tx_release>
	while (conn->pkt_tx_head) {
   11da2:	f8d4 113c 	ldr.w	r1, [r4, #316]	; 0x13c
   11da6:	2900      	cmp	r1, #0
   11da8:	d1ed      	bne.n	11d86 <connection_release+0xf2>
	conn->handle = 0xffff;
   11daa:	f64f 73ff 	movw	r3, #65535	; 0xffff
   11dae:	8423      	strh	r3, [r4, #32]
	if (_radio.conn_upd == conn) {
   11db0:	4b06      	ldr	r3, [pc, #24]	; (11dcc <connection_release+0x138>)
   11db2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   11db6:	429c      	cmp	r4, r3
   11db8:	d001      	beq.n	11dbe <connection_release+0x12a>
}
   11dba:	b002      	add	sp, #8
   11dbc:	bd10      	pop	{r4, pc}
		_radio.conn_upd = NULL;
   11dbe:	2200      	movs	r2, #0
   11dc0:	4b02      	ldr	r3, [pc, #8]	; (11dcc <connection_release+0x138>)
   11dc2:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
}
   11dc6:	e7f8      	b.n	11dba <connection_release+0x126>
   11dc8:	000110bd 	.word	0x000110bd
   11dcc:	20000f84 	.word	0x20000f84
   11dd0:	200010dc 	.word	0x200010dc

00011dd4 <chan_map_update>:
{
   11dd4:	b538      	push	{r3, r4, r5, lr}
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11dd6:	f8b1 3009 	ldrh.w	r3, [r1, #9]
	      conn->event_counter) & 0xffff) > 0x7fff) {
   11dda:	8c42      	ldrh	r2, [r0, #34]	; 0x22
   11ddc:	1a9b      	subs	r3, r3, r2
   11dde:	b29b      	uxth	r3, r3
	if (((pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant -
   11de0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   11de4:	da22      	bge.n	11e2c <chan_map_update+0x58>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11de6:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   11dea:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   11dee:	429a      	cmp	r2, r3
   11df0:	d116      	bne.n	11e20 <chan_map_update+0x4c>
   11df2:	460d      	mov	r5, r1
   11df4:	4604      	mov	r4, r0
	memcpy(&conn->llcp.chan_map.chm[0],
   11df6:	2205      	movs	r2, #5
   11df8:	3104      	adds	r1, #4
   11dfa:	3079      	adds	r0, #121	; 0x79
   11dfc:	f7ee fa60 	bl	2c0 <memcpy>
		pdu_data_rx->payload.llctrl.ctrldata.chan_map_ind.instant;
   11e00:	f8b5 3009 	ldrh.w	r3, [r5, #9]
	conn->llcp.chan_map.instant =
   11e04:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
	conn->llcp.chan_map.initiate = 0;
   11e08:	2000      	movs	r0, #0
   11e0a:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
	conn->llcp_type = LLCP_CHAN_MAP;
   11e0e:	2302      	movs	r3, #2
   11e10:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	conn->llcp_ack--;
   11e14:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   11e18:	3b01      	subs	r3, #1
   11e1a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	return 0;
   11e1e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   11e20:	4040      	eors	r0, r0
   11e22:	f380 8811 	msr	BASEPRI, r0
   11e26:	f04f 0004 	mov.w	r0, #4
   11e2a:	df02      	svc	2
		return 1;
   11e2c:	2001      	movs	r0, #1
}
   11e2e:	bd38      	pop	{r3, r4, r5, pc}

00011e30 <feature_rsp_send>:
{
   11e30:	b538      	push	{r3, r4, r5, lr}
   11e32:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11e34:	4812      	ldr	r0, [pc, #72]	; (11e80 <feature_rsp_send+0x50>)
   11e36:	f7fc fdc6 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   11e3a:	b1d8      	cbz	r0, 11e74 <feature_rsp_send+0x44>
   11e3c:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11e3e:	7903      	ldrb	r3, [r0, #4]
   11e40:	f043 0303 	orr.w	r3, r3, #3
   11e44:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11e46:	2309      	movs	r3, #9
   11e48:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_FEATURE_RSP;
   11e4a:	71c3      	strb	r3, [r0, #7]
	memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_rsp.features[0],
   11e4c:	2208      	movs	r2, #8
   11e4e:	2100      	movs	r1, #0
   11e50:	4410      	add	r0, r2
   11e52:	f017 fda1 	bl	29998 <memset>
		conn->llcp_features & 0xFF;
   11e56:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   11e5a:	7223      	strb	r3, [r4, #8]
		(conn->llcp_features >> 8) & 0xFF;
   11e5c:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   11e60:	0a1b      	lsrs	r3, r3, #8
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   11e62:	7263      	strb	r3, [r4, #9]
		(conn->llcp_features >> 16) & 0xFF;
   11e64:	f8b5 30a6 	ldrh.w	r3, [r5, #166]	; 0xa6
	pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   11e68:	72a3      	strb	r3, [r4, #10]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11e6a:	4621      	mov	r1, r4
   11e6c:	4628      	mov	r0, r5
   11e6e:	f7ff f87c 	bl	10f6a <ctrl_tx_sec_enqueue>
   11e72:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(node_tx);
   11e74:	4040      	eors	r0, r0
   11e76:	f380 8811 	msr	BASEPRI, r0
   11e7a:	f04f 0004 	mov.w	r0, #4
   11e7e:	df02      	svc	2
   11e80:	200010dc 	.word	0x200010dc

00011e84 <empty_tx_enqueue>:
{
   11e84:	b510      	push	{r4, lr}
   11e86:	4604      	mov	r4, r0
	conn->empty = 1;
   11e88:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   11e8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   11e90:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
	pdu_data_tx = (struct pdu_data *)radio_pkt_empty_get();
   11e94:	f7fc fffa 	bl	ee8c <radio_pkt_empty_get>
	pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11e98:	7803      	ldrb	r3, [r0, #0]
   11e9a:	2201      	movs	r2, #1
   11e9c:	f362 0301 	bfi	r3, r2, #0, #2
   11ea0:	7003      	strb	r3, [r0, #0]
	pdu_data_tx->len = 0;
   11ea2:	2300      	movs	r3, #0
   11ea4:	7043      	strb	r3, [r0, #1]
	if (conn->pkt_tx_head) {
   11ea6:	f8d4 313c 	ldr.w	r3, [r4, #316]	; 0x13c
   11eaa:	b123      	cbz	r3, 11eb6 <empty_tx_enqueue+0x32>
		pdu_data_tx->md = 1;
   11eac:	7803      	ldrb	r3, [r0, #0]
   11eae:	f043 0310 	orr.w	r3, r3, #16
   11eb2:	7003      	strb	r3, [r0, #0]
   11eb4:	bd10      	pop	{r4, pc}
		pdu_data_tx->md = 0;
   11eb6:	7803      	ldrb	r3, [r0, #0]
   11eb8:	f36f 1304 	bfc	r3, #4, #1
   11ebc:	7003      	strb	r3, [r0, #0]
}
   11ebe:	bd10      	pop	{r4, pc}

00011ec0 <prepare_pdu_data_tx>:
{
   11ec0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11ec2:	460c      	mov	r4, r1
	    conn->empty ||
   11ec4:	f890 20f8 	ldrb.w	r2, [r0, #248]	; 0xf8
	if (/* empty packet */
   11ec8:	f012 0f80 	tst.w	r2, #128	; 0x80
   11ecc:	d109      	bne.n	11ee2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11ece:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
	    conn->empty ||
   11ed2:	b133      	cbz	r3, 11ee2 <prepare_pdu_data_tx+0x22>
	    !conn->pkt_tx_head ||
   11ed4:	f012 0f08 	tst.w	r2, #8
   11ed8:	d00e      	beq.n	11ef8 <prepare_pdu_data_tx+0x38>
	    (conn->pause_tx && (conn->pkt_tx_head != conn->pkt_tx_ctrl))) {
   11eda:	f8d0 2140 	ldr.w	r2, [r0, #320]	; 0x140
   11ede:	4293      	cmp	r3, r2
   11ee0:	d00a      	beq.n	11ef8 <prepare_pdu_data_tx+0x38>
			_pdu_data_tx = empty_tx_enqueue(conn);
   11ee2:	f7ff ffcf 	bl	11e84 <empty_tx_enqueue>
   11ee6:	4602      	mov	r2, r0
	_pdu_data_tx->rfu = 0;
   11ee8:	7813      	ldrb	r3, [r2, #0]
   11eea:	f36f 1347 	bfc	r3, #5, #3
   11eee:	7013      	strb	r3, [r2, #0]
	_pdu_data_tx->resv = 0;
   11ef0:	2300      	movs	r3, #0
   11ef2:	7093      	strb	r3, [r2, #2]
	*pdu_data_tx = _pdu_data_tx;
   11ef4:	6022      	str	r2, [r4, #0]
   11ef6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11ef8:	3304      	adds	r3, #4
					conn->packet_tx_head_offset);
   11efa:	f890 6151 	ldrb.w	r6, [r0, #337]	; 0x151
		_pdu_data_tx = (void *)(conn->pkt_tx_head->pdu_data +
   11efe:	199a      	adds	r2, r3, r6
		if (!conn->packet_tx_head_len) {
   11f00:	f890 1150 	ldrb.w	r1, [r0, #336]	; 0x150
   11f04:	b911      	cbnz	r1, 11f0c <prepare_pdu_data_tx+0x4c>
			conn->packet_tx_head_len = _pdu_data_tx->len;
   11f06:	7851      	ldrb	r1, [r2, #1]
   11f08:	f880 1150 	strb.w	r1, [r0, #336]	; 0x150
		if (conn->packet_tx_head_offset) {
   11f0c:	b126      	cbz	r6, 11f18 <prepare_pdu_data_tx+0x58>
			_pdu_data_tx->ll_id = PDU_DATA_LLID_DATA_CONTINUE;
   11f0e:	5d99      	ldrb	r1, [r3, r6]
   11f10:	2501      	movs	r5, #1
   11f12:	f365 0101 	bfi	r1, r5, #0, #2
   11f16:	5599      	strb	r1, [r3, r6]
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11f18:	f890 5150 	ldrb.w	r5, [r0, #336]	; 0x150
				    conn->packet_tx_head_offset;
   11f1c:	f890 1151 	ldrb.w	r1, [r0, #337]	; 0x151
		_pdu_data_tx->len = conn->packet_tx_head_len -
   11f20:	1a6d      	subs	r5, r5, r1
   11f22:	b2ed      	uxtb	r5, r5
   11f24:	7055      	strb	r5, [r2, #1]
		_pdu_data_tx->md = 0;
   11f26:	5d99      	ldrb	r1, [r3, r6]
   11f28:	f36f 1104 	bfc	r1, #4, #1
   11f2c:	5599      	strb	r1, [r3, r6]
		switch (conn->phy_tx_time) {
   11f2e:	f890 1039 	ldrb.w	r1, [r0, #57]	; 0x39
   11f32:	f001 0107 	and.w	r1, r1, #7
   11f36:	2902      	cmp	r1, #2
   11f38:	d02d      	beq.n	11f96 <prepare_pdu_data_tx+0xd6>
			max_tx_octets = (conn->max_tx_time >> 3) - 10;
   11f3a:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11f3c:	08c9      	lsrs	r1, r1, #3
   11f3e:	390a      	subs	r1, #10
   11f40:	b289      	uxth	r1, r1
		if (conn->enc_tx) {
   11f42:	f890 70f8 	ldrb.w	r7, [r0, #248]	; 0xf8
   11f46:	f017 0f20 	tst.w	r7, #32
   11f4a:	d001      	beq.n	11f50 <prepare_pdu_data_tx+0x90>
			max_tx_octets -= 4;
   11f4c:	3904      	subs	r1, #4
   11f4e:	b289      	uxth	r1, r1
		if (max_tx_octets > conn->max_tx_octets) {
   11f50:	8dc7      	ldrh	r7, [r0, #46]	; 0x2e
   11f52:	42b9      	cmp	r1, r7
   11f54:	d800      	bhi.n	11f58 <prepare_pdu_data_tx+0x98>
   11f56:	460f      	mov	r7, r1
		if (_pdu_data_tx->len > max_tx_octets) {
   11f58:	b2ad      	uxth	r5, r5
   11f5a:	42af      	cmp	r7, r5
   11f5c:	d204      	bcs.n	11f68 <prepare_pdu_data_tx+0xa8>
			_pdu_data_tx->len = max_tx_octets;
   11f5e:	7057      	strb	r7, [r2, #1]
			_pdu_data_tx->md = 1;
   11f60:	5d99      	ldrb	r1, [r3, r6]
   11f62:	f041 0110 	orr.w	r1, r1, #16
   11f66:	5599      	strb	r1, [r3, r6]
		if (conn->pkt_tx_head->next) {
   11f68:	f8d0 113c 	ldr.w	r1, [r0, #316]	; 0x13c
   11f6c:	6809      	ldr	r1, [r1, #0]
   11f6e:	b119      	cbz	r1, 11f78 <prepare_pdu_data_tx+0xb8>
			_pdu_data_tx->md = 1;
   11f70:	5d99      	ldrb	r1, [r3, r6]
   11f72:	f041 0110 	orr.w	r1, r1, #16
   11f76:	5599      	strb	r1, [r3, r6]
		if (!conn->pkt_tx_ctrl &&
   11f78:	f8d0 3140 	ldr.w	r3, [r0, #320]	; 0x140
   11f7c:	2b00      	cmp	r3, #0
   11f7e:	d1b3      	bne.n	11ee8 <prepare_pdu_data_tx+0x28>
		    (conn->pkt_tx_head != conn->pkt_tx_data)) {
   11f80:	f8d0 313c 	ldr.w	r3, [r0, #316]	; 0x13c
   11f84:	f8d0 1148 	ldr.w	r1, [r0, #328]	; 0x148
		if (!conn->pkt_tx_ctrl &&
   11f88:	428b      	cmp	r3, r1
   11f8a:	d0ad      	beq.n	11ee8 <prepare_pdu_data_tx+0x28>
			conn->pkt_tx_ctrl = conn->pkt_tx_ctrl_last =
   11f8c:	f8c0 3144 	str.w	r3, [r0, #324]	; 0x144
   11f90:	f8c0 3140 	str.w	r3, [r0, #320]	; 0x140
   11f94:	e7a8      	b.n	11ee8 <prepare_pdu_data_tx+0x28>
			max_tx_octets = (conn->max_tx_time >> 2) - 11;
   11f96:	8e81      	ldrh	r1, [r0, #52]	; 0x34
   11f98:	0889      	lsrs	r1, r1, #2
   11f9a:	390b      	subs	r1, #11
   11f9c:	b289      	uxth	r1, r1
			break;
   11f9e:	e7d0      	b.n	11f42 <prepare_pdu_data_tx+0x82>

00011fa0 <version_ind_send>:
{
   11fa0:	b510      	push	{r4, lr}
   11fa2:	4604      	mov	r4, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   11fa4:	4810      	ldr	r0, [pc, #64]	; (11fe8 <version_ind_send+0x48>)
   11fa6:	f7fc fd0e 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   11faa:	b1b8      	cbz	r0, 11fdc <version_ind_send+0x3c>
   11fac:	4601      	mov	r1, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   11fae:	7903      	ldrb	r3, [r0, #4]
   11fb0:	f043 0303 	orr.w	r3, r3, #3
   11fb4:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   11fb6:	2306      	movs	r3, #6
   11fb8:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_VERSION_IND;
   11fba:	230c      	movs	r3, #12
   11fbc:	71c3      	strb	r3, [r0, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   11fbe:	2309      	movs	r3, #9
   11fc0:	7203      	strb	r3, [r0, #8]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   11fc2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   11fc6:	7243      	strb	r3, [r0, #9]
   11fc8:	7283      	strb	r3, [r0, #10]
	pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   11fca:	72c3      	strb	r3, [r0, #11]
   11fcc:	7303      	strb	r3, [r0, #12]
	ctrl_tx_sec_enqueue(conn, node_tx);
   11fce:	4620      	mov	r0, r4
   11fd0:	f7fe ffcb 	bl	10f6a <ctrl_tx_sec_enqueue>
	empty_tx_enqueue(conn);
   11fd4:	4620      	mov	r0, r4
   11fd6:	f7ff ff55 	bl	11e84 <empty_tx_enqueue>
   11fda:	bd10      	pop	{r4, pc}
	LL_ASSERT(node_tx);
   11fdc:	4040      	eors	r0, r0
   11fde:	f380 8811 	msr	BASEPRI, r0
   11fe2:	f04f 0004 	mov.w	r0, #4
   11fe6:	df02      	svc	2
   11fe8:	200010dc 	.word	0x200010dc

00011fec <tx_packet_set>:
{
   11fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   11fee:	4605      	mov	r5, r0
   11ff0:	460f      	mov	r7, r1
	max_tx_octets = conn->max_tx_octets;
   11ff2:	8dc6      	ldrh	r6, [r0, #46]	; 0x2e
	phy = conn->phy_tx;
   11ff4:	f890 1038 	ldrb.w	r1, [r0, #56]	; 0x38
   11ff8:	f3c1 04c2 	ubfx	r4, r1, #3, #3
	radio_phy_set(phy, flags);
   11ffc:	09c9      	lsrs	r1, r1, #7
   11ffe:	4620      	mov	r0, r4
   12000:	f7fc fe5e 	bl	ecc0 <radio_phy_set>
	if (conn->enc_tx) {
   12004:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12008:	f013 0f20 	tst.w	r3, #32
   1200c:	d10a      	bne.n	12024 <tx_packet_set+0x38>
		radio_pkt_configure(8, max_tx_octets, (phy << 1) | 0x01);
   1200e:	0062      	lsls	r2, r4, #1
   12010:	f042 0201 	orr.w	r2, r2, #1
   12014:	b2f1      	uxtb	r1, r6
   12016:	2008      	movs	r0, #8
   12018:	f7fc fe96 	bl	ed48 <radio_pkt_configure>
		radio_pkt_tx_set(pdu_data_tx);
   1201c:	4638      	mov	r0, r7
   1201e:	f7fc fec9 	bl	edb4 <radio_pkt_tx_set>
   12022:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		radio_pkt_configure(8, (max_tx_octets + 4), (phy << 1) | 0x01);
   12024:	0062      	lsls	r2, r4, #1
   12026:	1d31      	adds	r1, r6, #4
   12028:	f042 0201 	orr.w	r2, r2, #1
   1202c:	b2c9      	uxtb	r1, r1
   1202e:	2008      	movs	r0, #8
   12030:	f7fc fe8a 	bl	ed48 <radio_pkt_configure>
		radio_pkt_tx_set(radio_ccm_tx_pkt_set(&conn->ccm_tx,
   12034:	4639      	mov	r1, r7
   12036:	f505 708d 	add.w	r0, r5, #282	; 0x11a
   1203a:	f7fd f8f1 	bl	f220 <radio_ccm_tx_pkt_set>
   1203e:	f7fc feb9 	bl	edb4 <radio_pkt_tx_set>
   12042:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

00012044 <chan_set>:
{
   12044:	b510      	push	{r4, lr}
   12046:	4604      	mov	r4, r0
	switch (chan) {
   12048:	2826      	cmp	r0, #38	; 0x26
   1204a:	d013      	beq.n	12074 <chan_set+0x30>
   1204c:	2827      	cmp	r0, #39	; 0x27
   1204e:	d015      	beq.n	1207c <chan_set+0x38>
   12050:	2825      	cmp	r0, #37	; 0x25
   12052:	d008      	beq.n	12066 <chan_set+0x22>
		if (chan < 11) {
   12054:	280a      	cmp	r0, #10
   12056:	d915      	bls.n	12084 <chan_set+0x40>
		} else if (chan < 40) {
   12058:	2827      	cmp	r0, #39	; 0x27
   1205a:	d818      	bhi.n	1208e <chan_set+0x4a>
			radio_freq_chan_set(28 + (2 * (chan - 11)));
   1205c:	3003      	adds	r0, #3
   1205e:	0040      	lsls	r0, r0, #1
   12060:	f7fc fe42 	bl	ece8 <radio_freq_chan_set>
   12064:	e002      	b.n	1206c <chan_set+0x28>
		radio_freq_chan_set(2);
   12066:	2002      	movs	r0, #2
   12068:	f7fc fe3e 	bl	ece8 <radio_freq_chan_set>
	radio_whiten_iv_set(chan);
   1206c:	4620      	mov	r0, r4
   1206e:	f7fc fe41 	bl	ecf4 <radio_whiten_iv_set>
   12072:	bd10      	pop	{r4, pc}
		radio_freq_chan_set(26);
   12074:	201a      	movs	r0, #26
   12076:	f7fc fe37 	bl	ece8 <radio_freq_chan_set>
		break;
   1207a:	e7f7      	b.n	1206c <chan_set+0x28>
		radio_freq_chan_set(80);
   1207c:	2050      	movs	r0, #80	; 0x50
   1207e:	f7fc fe33 	bl	ece8 <radio_freq_chan_set>
		break;
   12082:	e7f3      	b.n	1206c <chan_set+0x28>
			radio_freq_chan_set(4 + (2 * chan));
   12084:	3002      	adds	r0, #2
   12086:	0040      	lsls	r0, r0, #1
   12088:	f7fc fe2e 	bl	ece8 <radio_freq_chan_set>
   1208c:	e7ee      	b.n	1206c <chan_set+0x28>
			LL_ASSERT(0);
   1208e:	4040      	eors	r0, r0
   12090:	f380 8811 	msr	BASEPRI, r0
   12094:	f04f 0004 	mov.w	r0, #4
   12098:	df02      	svc	2
	...

0001209c <adv_setup>:
{
   1209c:	b538      	push	{r3, r4, r5, lr}
	if (_radio.advertiser.adv_data.first !=
   1209e:	4a39      	ldr	r2, [pc, #228]	; (12184 <adv_setup+0xe8>)
   120a0:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
	    _radio.advertiser.adv_data.last) {
   120a4:	f892 2076 	ldrb.w	r2, [r2, #118]	; 0x76
	if (_radio.advertiser.adv_data.first !=
   120a8:	4293      	cmp	r3, r2
   120aa:	d037      	beq.n	1211c <adv_setup+0x80>
		first = _radio.advertiser.adv_data.first + 1;
   120ac:	3301      	adds	r3, #1
   120ae:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   120b0:	2b02      	cmp	r3, #2
   120b2:	d031      	beq.n	12118 <adv_setup+0x7c>
		_radio.advertiser.adv_data.first = first;
   120b4:	4a33      	ldr	r2, [pc, #204]	; (12184 <adv_setup+0xe8>)
   120b6:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
		upd = 1;
   120ba:	2101      	movs	r1, #1
	if (_radio.advertiser.scan_data.first != _radio.
   120bc:	4a31      	ldr	r2, [pc, #196]	; (12184 <adv_setup+0xe8>)
   120be:	f892 30c5 	ldrb.w	r3, [r2, #197]	; 0xc5
	    advertiser.scan_data.last) {
   120c2:	f892 20c6 	ldrb.w	r2, [r2, #198]	; 0xc6
	if (_radio.advertiser.scan_data.first != _radio.
   120c6:	4293      	cmp	r3, r2
   120c8:	d007      	beq.n	120da <adv_setup+0x3e>
		first = _radio.advertiser.scan_data.first + 1;
   120ca:	3301      	adds	r3, #1
   120cc:	b2db      	uxtb	r3, r3
		if (first == DOUBLE_BUFFER_SIZE) {
   120ce:	2b02      	cmp	r3, #2
   120d0:	d026      	beq.n	12120 <adv_setup+0x84>
		_radio.advertiser.scan_data.first = first;
   120d2:	4a2c      	ldr	r2, [pc, #176]	; (12184 <adv_setup+0xe8>)
   120d4:	f882 30c5 	strb.w	r3, [r2, #197]	; 0xc5
		upd = 1;
   120d8:	2101      	movs	r1, #1
			_radio.advertiser.adv_data.first];
   120da:	4c2a      	ldr	r4, [pc, #168]	; (12184 <adv_setup+0xe8>)
   120dc:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
	pdu = (struct pdu_adv *)
   120e0:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   120e4:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   120e8:	3320      	adds	r3, #32
   120ea:	441c      	add	r4, r3
   120ec:	1de5      	adds	r5, r4, #7
	if (upd) {
   120ee:	b9c9      	cbnz	r1, 12124 <adv_setup+0x88>
	radio_pkt_tx_set(pdu);
   120f0:	4628      	mov	r0, r5
   120f2:	f7fc fe5f 	bl	edb4 <radio_pkt_tx_set>
	if ((pdu->type != PDU_ADV_TYPE_NONCONN_IND) &&
   120f6:	79e3      	ldrb	r3, [r4, #7]
   120f8:	f003 030f 	and.w	r3, r3, #15
   120fc:	2b02      	cmp	r3, #2
   120fe:	d020      	beq.n	12142 <adv_setup+0xa6>
   12100:	2b07      	cmp	r3, #7
   12102:	d01e      	beq.n	12142 <adv_setup+0xa6>
		_radio.state = STATE_TX;
   12104:	2202      	movs	r2, #2
   12106:	4b1f      	ldr	r3, [pc, #124]	; (12184 <adv_setup+0xe8>)
   12108:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   1210a:	2096      	movs	r0, #150	; 0x96
   1210c:	f7fc ff78 	bl	f000 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   12110:	2000      	movs	r0, #0
   12112:	f7fc fec3 	bl	ee9c <radio_switch_complete_and_rx>
   12116:	e019      	b.n	1214c <adv_setup+0xb0>
			first = 0;
   12118:	2300      	movs	r3, #0
   1211a:	e7cb      	b.n	120b4 <adv_setup+0x18>
	u8_t upd = 0;
   1211c:	2100      	movs	r1, #0
   1211e:	e7cd      	b.n	120bc <adv_setup+0x20>
			first = 0;
   12120:	2300      	movs	r3, #0
   12122:	e7d6      	b.n	120d2 <adv_setup+0x36>
			_radio.advertiser.scan_data.first];
   12124:	4817      	ldr	r0, [pc, #92]	; (12184 <adv_setup+0xe8>)
   12126:	f890 30c5 	ldrb.w	r3, [r0, #197]	; 0xc5
		struct pdu_adv *scan_pdu = (struct pdu_adv *)
   1212a:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1212e:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   12132:	3370      	adds	r3, #112	; 0x70
   12134:	4418      	add	r0, r3
		memcpy(&scan_pdu->payload.scan_rsp.addr[0],
   12136:	2206      	movs	r2, #6
   12138:	1ca9      	adds	r1, r5, #2
   1213a:	3009      	adds	r0, #9
   1213c:	f7ee f8c0 	bl	2c0 <memcpy>
   12140:	e7d6      	b.n	120f0 <adv_setup+0x54>
		_radio.state = STATE_CLOSE;
   12142:	2203      	movs	r2, #3
   12144:	4b0f      	ldr	r3, [pc, #60]	; (12184 <adv_setup+0xe8>)
   12146:	741a      	strb	r2, [r3, #16]
		radio_switch_complete_and_disable();
   12148:	f7fc feb8 	bl	eebc <radio_switch_complete_and_disable>
	bitmap = _radio.advertiser.chan_map_current;
   1214c:	4b0d      	ldr	r3, [pc, #52]	; (12184 <adv_setup+0xe8>)
   1214e:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   12152:	f3c2 0142 	ubfx	r1, r2, #1, #3
   12156:	b2ca      	uxtb	r2, r1
   12158:	4613      	mov	r3, r2
	chan = 0;
   1215a:	2000      	movs	r0, #0
	while ((bitmap & 0x01) == 0) {
   1215c:	e002      	b.n	12164 <adv_setup+0xc8>
		chan++;
   1215e:	3001      	adds	r0, #1
   12160:	b2c0      	uxtb	r0, r0
		bitmap >>= 1;
   12162:	085b      	lsrs	r3, r3, #1
	while ((bitmap & 0x01) == 0) {
   12164:	f013 0f01 	tst.w	r3, #1
   12168:	d0f9      	beq.n	1215e <adv_setup+0xc2>
		(_radio.advertiser.chan_map_current - 1);
   1216a:	3a01      	subs	r2, #1
	_radio.advertiser.chan_map_current &=
   1216c:	4b05      	ldr	r3, [pc, #20]	; (12184 <adv_setup+0xe8>)
   1216e:	400a      	ands	r2, r1
   12170:	f893 1024 	ldrb.w	r1, [r3, #36]	; 0x24
   12174:	f362 0143 	bfi	r1, r2, #1, #3
   12178:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	chan_set(37 + chan);
   1217c:	3025      	adds	r0, #37	; 0x25
   1217e:	f7ff ff61 	bl	12044 <chan_set>
   12182:	bd38      	pop	{r3, r4, r5, pc}
   12184:	20000f84 	.word	0x20000f84

00012188 <ticker_stop_adv_stop>:
	if (status != TICKER_STATUS_SUCCESS) {
   12188:	b158      	cbz	r0, 121a2 <ticker_stop_adv_stop+0x1a>
		LL_ASSERT(_radio.ticker_id_stop == RADIO_TICKER_ID_ADV);
   1218a:	4b6c      	ldr	r3, [pc, #432]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   1218c:	7b9b      	ldrb	r3, [r3, #14]
   1218e:	b2db      	uxtb	r3, r3
   12190:	2b05      	cmp	r3, #5
   12192:	d100      	bne.n	12196 <ticker_stop_adv_stop+0xe>
   12194:	4770      	bx	lr
   12196:	4040      	eors	r0, r0
   12198:	f380 8811 	msr	BASEPRI, r0
   1219c:	f04f 0004 	mov.w	r0, #4
   121a0:	df02      	svc	2
{
   121a2:	b500      	push	{lr}
   121a4:	b085      	sub	sp, #20
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   121a6:	4b65      	ldr	r3, [pc, #404]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   121a8:	7b1b      	ldrb	r3, [r3, #12]
   121aa:	b2db      	uxtb	r3, r3
   121ac:	2b05      	cmp	r3, #5
   121ae:	d010      	beq.n	121d2 <ticker_stop_adv_stop+0x4a>
	    (_radio.ticker_id_event == RADIO_TICKER_ID_ADV)) {
   121b0:	4b62      	ldr	r3, [pc, #392]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   121b2:	7b5b      	ldrb	r3, [r3, #13]
   121b4:	b2db      	uxtb	r3, r3
	if ((_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV) ||
   121b6:	2b05      	cmp	r3, #5
   121b8:	d00b      	beq.n	121d2 <ticker_stop_adv_stop+0x4a>
	retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   121ba:	4b61      	ldr	r3, [pc, #388]	; (12340 <ticker_stop_adv_stop+0x1b8>)
   121bc:	2200      	movs	r2, #0
   121be:	4611      	mov	r1, r2
   121c0:	2001      	movs	r0, #1
   121c2:	f7fc fabf 	bl	e744 <mayfly_enqueue>
	LL_ASSERT(!retval);
   121c6:	2800      	cmp	r0, #0
   121c8:	f040 80b1 	bne.w	1232e <ticker_stop_adv_stop+0x1a6>
}
   121cc:	b005      	add	sp, #20
   121ce:	f85d fb04 	ldr.w	pc, [sp], #4
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   121d2:	ab04      	add	r3, sp, #16
   121d4:	2202      	movs	r2, #2
   121d6:	f843 2d08 	str.w	r2, [r3, #-8]!
	ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   121da:	9300      	str	r3, [sp, #0]
   121dc:	4b59      	ldr	r3, [pc, #356]	; (12344 <ticker_stop_adv_stop+0x1bc>)
   121de:	2200      	movs	r2, #0
   121e0:	2101      	movs	r1, #1
   121e2:	4610      	mov	r0, r2
   121e4:	f7fe f95c 	bl	104a0 <ticker_stop>
	if (ret == TICKER_STATUS_BUSY) {
   121e8:	2802      	cmp	r0, #2
   121ea:	d02c      	beq.n	12246 <ticker_stop_adv_stop+0xbe>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   121ec:	9b02      	ldr	r3, [sp, #8]
   121ee:	2b00      	cmp	r3, #0
   121f0:	d17e      	bne.n	122f0 <ticker_stop_adv_stop+0x168>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   121f2:	2302      	movs	r3, #2
   121f4:	9303      	str	r3, [sp, #12]
		LL_ASSERT(_radio.ticker_id_prepare);
   121f6:	4b51      	ldr	r3, [pc, #324]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   121f8:	7b1b      	ldrb	r3, [r3, #12]
   121fa:	2b00      	cmp	r3, #0
   121fc:	d031      	beq.n	12262 <ticker_stop_adv_stop+0xda>
		_radio.ticker_id_prepare = 0;
   121fe:	2000      	movs	r0, #0
   12200:	4b4e      	ldr	r3, [pc, #312]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   12202:	7318      	strb	r0, [r3, #12]
		ret = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   12204:	ab03      	add	r3, sp, #12
   12206:	9300      	str	r3, [sp, #0]
   12208:	4b4e      	ldr	r3, [pc, #312]	; (12344 <ticker_stop_adv_stop+0x1bc>)
   1220a:	2201      	movs	r2, #1
   1220c:	4611      	mov	r1, r2
   1220e:	f7fe f947 	bl	104a0 <ticker_stop>
		if (ret == TICKER_STATUS_BUSY) {
   12212:	2802      	cmp	r0, #2
   12214:	d02b      	beq.n	1226e <ticker_stop_adv_stop+0xe6>
		if (ret_cb == TICKER_STATUS_SUCCESS) {
   12216:	9b03      	ldr	r3, [sp, #12]
   12218:	2b00      	cmp	r3, #0
   1221a:	d144      	bne.n	122a6 <ticker_stop_adv_stop+0x11e>
			if (_radio.advertiser.hdr.ticks_active_to_start >
   1221c:	4b47      	ldr	r3, [pc, #284]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   1221e:	699a      	ldr	r2, [r3, #24]
			    (_radio.advertiser.hdr.ticks_xtal_to_start &
   12220:	695b      	ldr	r3, [r3, #20]
   12222:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
			if (_radio.advertiser.hdr.ticks_active_to_start >
   12226:	429a      	cmp	r2, r3
   12228:	d92f      	bls.n	1228a <ticker_stop_adv_stop+0x102>
				retval = mayfly_enqueue(
   1222a:	4b47      	ldr	r3, [pc, #284]	; (12348 <ticker_stop_adv_stop+0x1c0>)
   1222c:	2200      	movs	r2, #0
   1222e:	4611      	mov	r1, r2
   12230:	2001      	movs	r0, #1
   12232:	f7fc fa87 	bl	e744 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12236:	2800      	cmp	r0, #0
   12238:	d0bf      	beq.n	121ba <ticker_stop_adv_stop+0x32>
   1223a:	4040      	eors	r0, r0
   1223c:	f380 8811 	msr	BASEPRI, r0
   12240:	f04f 0004 	mov.w	r0, #4
   12244:	df02      	svc	2
		mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   12246:	2201      	movs	r2, #1
   12248:	4611      	mov	r1, r2
   1224a:	4610      	mov	r0, r2
   1224c:	f7fc fa3c 	bl	e6c8 <mayfly_enable>
   12250:	e003      	b.n	1225a <ticker_stop_adv_stop+0xd2>
			ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   12252:	2101      	movs	r1, #1
   12254:	2000      	movs	r0, #0
   12256:	f7fe f9df 	bl	10618 <ticker_job_sched>
		while (ret_cb == TICKER_STATUS_BUSY) {
   1225a:	9b02      	ldr	r3, [sp, #8]
   1225c:	2b02      	cmp	r3, #2
   1225e:	d0f8      	beq.n	12252 <ticker_stop_adv_stop+0xca>
   12260:	e7c4      	b.n	121ec <ticker_stop_adv_stop+0x64>
		LL_ASSERT(_radio.ticker_id_prepare);
   12262:	4040      	eors	r0, r0
   12264:	f380 8811 	msr	BASEPRI, r0
   12268:	f04f 0004 	mov.w	r0, #4
   1226c:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_JOB,
   1226e:	2201      	movs	r2, #1
   12270:	4611      	mov	r1, r2
   12272:	4610      	mov	r0, r2
   12274:	f7fc fa28 	bl	e6c8 <mayfly_enable>
   12278:	e003      	b.n	12282 <ticker_stop_adv_stop+0xfa>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1227a:	2101      	movs	r1, #1
   1227c:	2000      	movs	r0, #0
   1227e:	f7fe f9cb 	bl	10618 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12282:	9b03      	ldr	r3, [sp, #12]
   12284:	2b02      	cmp	r3, #2
   12286:	d0f8      	beq.n	1227a <ticker_stop_adv_stop+0xf2>
   12288:	e7c5      	b.n	12216 <ticker_stop_adv_stop+0x8e>
				retval = mayfly_enqueue(
   1228a:	4b30      	ldr	r3, [pc, #192]	; (1234c <ticker_stop_adv_stop+0x1c4>)
   1228c:	2200      	movs	r2, #0
   1228e:	4611      	mov	r1, r2
   12290:	2001      	movs	r0, #1
   12292:	f7fc fa57 	bl	e744 <mayfly_enqueue>
				LL_ASSERT(!retval);
   12296:	2800      	cmp	r0, #0
   12298:	d08f      	beq.n	121ba <ticker_stop_adv_stop+0x32>
   1229a:	4040      	eors	r0, r0
   1229c:	f380 8811 	msr	BASEPRI, r0
   122a0:	f04f 0004 	mov.w	r0, #4
   122a4:	df02      	svc	2
		} else if (ret_cb == TICKER_STATUS_FAILURE) {
   122a6:	9b03      	ldr	r3, [sp, #12]
   122a8:	2b01      	cmp	r3, #1
   122aa:	d11b      	bne.n	122e4 <ticker_stop_adv_stop+0x15c>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   122ac:	4b26      	ldr	r3, [pc, #152]	; (12348 <ticker_stop_adv_stop+0x1c0>)
   122ae:	2200      	movs	r2, #0
   122b0:	4611      	mov	r1, r2
   122b2:	2001      	movs	r0, #1
   122b4:	f7fc fa46 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   122b8:	b970      	cbnz	r0, 122d8 <ticker_stop_adv_stop+0x150>
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   122ba:	4b24      	ldr	r3, [pc, #144]	; (1234c <ticker_stop_adv_stop+0x1c4>)
   122bc:	2200      	movs	r2, #0
   122be:	4611      	mov	r1, r2
   122c0:	2001      	movs	r0, #1
   122c2:	f7fc fa3f 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   122c6:	2800      	cmp	r0, #0
   122c8:	f43f af77 	beq.w	121ba <ticker_stop_adv_stop+0x32>
   122cc:	4040      	eors	r0, r0
   122ce:	f380 8811 	msr	BASEPRI, r0
   122d2:	f04f 0004 	mov.w	r0, #4
   122d6:	df02      	svc	2
			LL_ASSERT(!retval);
   122d8:	4040      	eors	r0, r0
   122da:	f380 8811 	msr	BASEPRI, r0
   122de:	f04f 0004 	mov.w	r0, #4
   122e2:	df02      	svc	2
			LL_ASSERT(0);
   122e4:	4040      	eors	r0, r0
   122e6:	f380 8811 	msr	BASEPRI, r0
   122ea:	f04f 0004 	mov.w	r0, #4
   122ee:	df02      	svc	2
	} else if (ret_cb == TICKER_STATUS_FAILURE) {
   122f0:	9b02      	ldr	r3, [sp, #8]
   122f2:	2b01      	cmp	r3, #1
   122f4:	d115      	bne.n	12322 <ticker_stop_adv_stop+0x19a>
		if (_radio.role != ROLE_NONE) {
   122f6:	4b11      	ldr	r3, [pc, #68]	; (1233c <ticker_stop_adv_stop+0x1b4>)
   122f8:	7bdb      	ldrb	r3, [r3, #15]
   122fa:	2b00      	cmp	r3, #0
   122fc:	f43f af5d 	beq.w	121ba <ticker_stop_adv_stop+0x32>
			s_mfy_radio_stop.param = (void *)STATE_STOP;
   12300:	4b13      	ldr	r3, [pc, #76]	; (12350 <ticker_stop_adv_stop+0x1c8>)
   12302:	2204      	movs	r2, #4
   12304:	609a      	str	r2, [r3, #8]
			retval = mayfly_enqueue(RADIO_TICKER_USER_ID_JOB,
   12306:	2200      	movs	r2, #0
   12308:	4611      	mov	r1, r2
   1230a:	2001      	movs	r0, #1
   1230c:	f7fc fa1a 	bl	e744 <mayfly_enqueue>
			LL_ASSERT(!retval);
   12310:	2800      	cmp	r0, #0
   12312:	f43f af52 	beq.w	121ba <ticker_stop_adv_stop+0x32>
   12316:	4040      	eors	r0, r0
   12318:	f380 8811 	msr	BASEPRI, r0
   1231c:	f04f 0004 	mov.w	r0, #4
   12320:	df02      	svc	2
		LL_ASSERT(0);
   12322:	4040      	eors	r0, r0
   12324:	f380 8811 	msr	BASEPRI, r0
   12328:	f04f 0004 	mov.w	r0, #4
   1232c:	df02      	svc	2
	LL_ASSERT(!retval);
   1232e:	4040      	eors	r0, r0
   12330:	f380 8811 	msr	BASEPRI, r0
   12334:	f04f 0004 	mov.w	r0, #4
   12338:	df02      	svc	2
   1233a:	bf00      	nop
   1233c:	20000f84 	.word	0x20000f84
   12340:	2000bc58 	.word	0x2000bc58
   12344:	00010d4d 	.word	0x00010d4d
   12348:	2000bc88 	.word	0x2000bc88
   1234c:	2000bd48 	.word	0x2000bd48
   12350:	2000bcb8 	.word	0x2000bcb8
   12354:	00000000 	.word	0x00000000

00012358 <sched_free_win_offset_calc>:
{
   12358:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1235c:	b091      	sub	sp, #68	; 0x44
   1235e:	9009      	str	r0, [sp, #36]	; 0x24
   12360:	910a      	str	r1, [sp, #40]	; 0x28
   12362:	9207      	str	r2, [sp, #28]
   12364:	469b      	mov	fp, r3
   12366:	9d1a      	ldr	r5, [sp, #104]	; 0x68
   12368:	f8dd a06c 	ldr.w	sl, [sp, #108]	; 0x6c
	if (conn_curr->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1236c:	6803      	ldr	r3, [r0, #0]
   1236e:	2b00      	cmp	r3, #0
   12370:	db0f      	blt.n	12392 <sched_free_win_offset_calc+0x3a>
	u32_t ticks_prepare_reduced = 0;
   12372:	2300      	movs	r3, #0
   12374:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12376:	27ff      	movs	r7, #255	; 0xff
   12378:	f88d 7037 	strb.w	r7, [sp, #55]	; 0x37
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1237c:	2300      	movs	r3, #0
   1237e:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   12382:	930f      	str	r3, [sp, #60]	; 0x3c
   12384:	930e      	str	r3, [sp, #56]	; 0x38
		ticks_anchor_prev = offset_index = _win_offset = 0;
   12386:	461c      	mov	r4, r3
	ticker_id = ticker_id_prev = ticker_id_other = 0xFF;
   12388:	9706      	str	r7, [sp, #24]
	ticks_slot_prev_abs = 0;
   1238a:	461e      	mov	r6, r3
	ticks_to_expire = ticks_to_expire_prev = ticks_anchor =
   1238c:	9308      	str	r3, [sp, #32]
		ticks_anchor_prev = offset_index = _win_offset = 0;
   1238e:	4698      	mov	r8, r3
   12390:	e06d      	b.n	1246e <sched_free_win_offset_calc+0x116>
				conn_curr->hdr.ticks_preempt_to_start;
   12392:	6881      	ldr	r1, [r0, #8]
				conn_curr->hdr.ticks_active_to_start :
   12394:	6842      	ldr	r2, [r0, #4]
		ticks_prepare_reduced = ((conn_curr->hdr.ticks_xtal_to_start &
   12396:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   1239a:	4291      	cmp	r1, r2
   1239c:	bf2c      	ite	cs
   1239e:	1a5b      	subcs	r3, r3, r1
   123a0:	1a9b      	subcc	r3, r3, r2
   123a2:	930b      	str	r3, [sp, #44]	; 0x2c
   123a4:	e7e7      	b.n	12376 <sched_free_win_offset_calc+0x1e>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   123a6:	2101      	movs	r1, #1
   123a8:	2000      	movs	r0, #0
   123aa:	f7fe f935 	bl	10618 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   123ae:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   123b0:	2b02      	cmp	r3, #2
   123b2:	d0f8      	beq.n	123a6 <sched_free_win_offset_calc+0x4e>
   123b4:	e06c      	b.n	12490 <sched_free_win_offset_calc+0x138>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   123b6:	4040      	eors	r0, r0
   123b8:	f380 8811 	msr	BASEPRI, r0
   123bc:	f04f 0004 	mov.w	r0, #4
   123c0:	df02      	svc	2
			LL_ASSERT(0);
   123c2:	4040      	eors	r0, r0
   123c4:	f380 8811 	msr	BASEPRI, r0
   123c8:	f04f 0004 	mov.w	r0, #4
   123cc:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   123ce:	f8d9 1008 	ldr.w	r1, [r9, #8]
					conn->hdr.ticks_active_to_start :
   123d2:	f8d9 2004 	ldr.w	r2, [r9, #4]
					((conn->hdr.ticks_xtal_to_start &
   123d6:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   123da:	4291      	cmp	r1, r2
   123dc:	bf2c      	ite	cs
   123de:	ebc3 0301 	rsbcs	r3, r3, r1
   123e2:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   123e6:	9a05      	ldr	r2, [sp, #20]
   123e8:	441a      	add	r2, r3
   123ea:	9205      	str	r2, [sp, #20]
   123ec:	e085      	b.n	124fa <sched_free_win_offset_calc+0x1a2>
					memcpy(win_offset +
   123ee:	2202      	movs	r2, #2
   123f0:	a90d      	add	r1, sp, #52	; 0x34
   123f2:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   123f6:	f7ed ff63 	bl	2c0 <memcpy>
					offset_index++;
   123fa:	3401      	adds	r4, #1
   123fc:	b2e4      	uxtb	r4, r4
					ticks_to_expire_prev +=
   123fe:	3728      	adds	r7, #40	; 0x28
				while ((offset_index < *offset_max) &&
   12400:	782b      	ldrb	r3, [r5, #0]
   12402:	429c      	cmp	r4, r3
   12404:	d21f      	bcs.n	12446 <sched_free_win_offset_calc+0xee>
				       (ticker_ticks_diff_get(ticks_to_expire_normal,
   12406:	4639      	mov	r1, r7
   12408:	9805      	ldr	r0, [sp, #20]
   1240a:	f7fe f919 	bl	10640 <ticker_ticks_diff_get>
					 conn->hdr.ticks_slot))) {
   1240e:	f8d9 300c 	ldr.w	r3, [r9, #12]
							    625 + 1250) +
   12412:	4433      	add	r3, r6
   12414:	3364      	adds	r3, #100	; 0x64
				while ((offset_index < *offset_max) &&
   12416:	4298      	cmp	r0, r3
   12418:	d315      	bcc.n	12446 <sched_free_win_offset_calc+0xee>
						TICKER_TICKS_TO_US(ticks_to_expire_prev +
   1241a:	19bb      	adds	r3, r7, r6
   1241c:	485a      	ldr	r0, [pc, #360]	; (12588 <sched_free_win_offset_calc+0x230>)
   1241e:	fba3 0100 	umull	r0, r1, r3, r0
   12422:	2207      	movs	r2, #7
   12424:	fb02 1103 	mla	r1, r2, r3, r1
   12428:	a355      	add	r3, pc, #340	; (adr r3, 12580 <sched_free_win_offset_calc+0x228>)
   1242a:	e9d3 2300 	ldrd	r2, r3, [r3]
   1242e:	f7ee f9d5 	bl	7dc <__aeabi_uldivmod>
								   ticks_slot_prev_abs) / 1250;
   12432:	4b56      	ldr	r3, [pc, #344]	; (1258c <sched_free_win_offset_calc+0x234>)
   12434:	fba3 3000 	umull	r3, r0, r3, r0
					_win_offset =
   12438:	f3c0 208f 	ubfx	r0, r0, #10, #16
   1243c:	f8ad 0034 	strh.w	r0, [sp, #52]	; 0x34
					if (_win_offset >= conn_interval) {
   12440:	4558      	cmp	r0, fp
   12442:	d3d4      	bcc.n	123ee <sched_free_win_offset_calc+0x96>
						ticks_to_expire_prev = 0;
   12444:	2700      	movs	r7, #0
				*ticks_to_offset_next = ticks_to_expire_prev;
   12446:	9b07      	ldr	r3, [sp, #28]
   12448:	601f      	str	r7, [r3, #0]
				if (_win_offset >= conn_interval) {
   1244a:	f8bd 3034 	ldrh.w	r3, [sp, #52]	; 0x34
   1244e:	459b      	cmp	fp, r3
   12450:	d95e      	bls.n	12510 <sched_free_win_offset_calc+0x1b8>
			ticks_anchor_prev = ticks_anchor;
   12452:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
			ticker_id_prev = ticker_id;
   12456:	f89d 7037 	ldrb.w	r7, [sp, #55]	; 0x37
				conn->hdr.ticks_slot;
   1245a:	f8d9 600c 	ldr.w	r6, [r9, #12]
			ticks_slot_prev_abs =
   1245e:	3664      	adds	r6, #100	; 0x64
			ticks_to_expire_prev = ticks_to_expire_normal;
   12460:	9b05      	ldr	r3, [sp, #20]
   12462:	9308      	str	r3, [sp, #32]
   12464:	e000      	b.n	12468 <sched_free_win_offset_calc+0x110>
			ticker_id_other = ticker_id;
   12466:	9206      	str	r2, [sp, #24]
	} while (offset_index < *offset_max);
   12468:	782b      	ldrb	r3, [r5, #0]
   1246a:	429c      	cmp	r4, r3
   1246c:	d251      	bcs.n	12512 <sched_free_win_offset_calc+0x1ba>
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1246e:	2302      	movs	r3, #2
   12470:	930c      	str	r3, [sp, #48]	; 0x30
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12472:	ab0c      	add	r3, sp, #48	; 0x30
   12474:	9302      	str	r3, [sp, #8]
   12476:	4b46      	ldr	r3, [pc, #280]	; (12590 <sched_free_win_offset_calc+0x238>)
   12478:	9301      	str	r3, [sp, #4]
   1247a:	ab0e      	add	r3, sp, #56	; 0x38
   1247c:	9300      	str	r3, [sp, #0]
   1247e:	ab0f      	add	r3, sp, #60	; 0x3c
   12480:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   12484:	2101      	movs	r1, #1
   12486:	2000      	movs	r0, #0
   12488:	f7fe f846 	bl	10518 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1248c:	2802      	cmp	r0, #2
   1248e:	d08e      	beq.n	123ae <sched_free_win_offset_calc+0x56>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   12490:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   12492:	2b00      	cmp	r3, #0
   12494:	d18f      	bne.n	123b6 <sched_free_win_offset_calc+0x5e>
		if (ticker_id == 0xff) {
   12496:	f89d 2037 	ldrb.w	r2, [sp, #55]	; 0x37
   1249a:	2aff      	cmp	r2, #255	; 0xff
   1249c:	d039      	beq.n	12512 <sched_free_win_offset_calc+0x1ba>
		if ((ticker_id_prev != 0xff) &&
   1249e:	2fff      	cmp	r7, #255	; 0xff
   124a0:	d002      	beq.n	124a8 <sched_free_win_offset_calc+0x150>
		    (ticks_anchor != ticks_anchor_prev)) {
   124a2:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
		if ((ticker_id_prev != 0xff) &&
   124a4:	4598      	cmp	r8, r3
   124a6:	d18c      	bne.n	123c2 <sched_free_win_offset_calc+0x6a>
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   124a8:	2a05      	cmp	r2, #5
   124aa:	d9dd      	bls.n	12468 <sched_free_win_offset_calc+0x110>
				  _radio.connection_count)) {
   124ac:	4b39      	ldr	r3, [pc, #228]	; (12594 <sched_free_win_offset_calc+0x23c>)
   124ae:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   124b2:	3307      	adds	r3, #7
		if (ticker_id <= RADIO_TICKER_ID_ADV ||
   124b4:	429a      	cmp	r2, r3
   124b6:	dad7      	bge.n	12468 <sched_free_win_offset_calc+0x110>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION) {
   124b8:	2a06      	cmp	r2, #6
   124ba:	d9d4      	bls.n	12466 <sched_free_win_offset_calc+0x10e>
		if (ticker_id_other != 0xFF) {
   124bc:	9b06      	ldr	r3, [sp, #24]
   124be:	2bff      	cmp	r3, #255	; 0xff
   124c0:	d127      	bne.n	12512 <sched_free_win_offset_calc+0x1ba>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   124c2:	3a07      	subs	r2, #7
   124c4:	b292      	uxth	r2, r2
   124c6:	f44f 71aa 	mov.w	r1, #340	; 0x154
   124ca:	4b32      	ldr	r3, [pc, #200]	; (12594 <sched_free_win_offset_calc+0x23c>)
   124cc:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   124d0:	f7fc fab6 	bl	ea40 <mem_get>
   124d4:	4681      	mov	r9, r0
		if ((conn != conn_curr) && (is_select || !conn->role)) {
   124d6:	9b09      	ldr	r3, [sp, #36]	; 0x24
   124d8:	4283      	cmp	r3, r0
   124da:	d0c5      	beq.n	12468 <sched_free_win_offset_calc+0x110>
   124dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   124de:	b91b      	cbnz	r3, 124e8 <sched_free_win_offset_calc+0x190>
   124e0:	f990 301d 	ldrsb.w	r3, [r0, #29]
   124e4:	2b00      	cmp	r3, #0
   124e6:	dbbf      	blt.n	12468 <sched_free_win_offset_calc+0x110>
				ticks_to_expire + ticks_prepare_reduced;
   124e8:	9b0e      	ldr	r3, [sp, #56]	; 0x38
			u32_t ticks_to_expire_normal =
   124ea:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   124ec:	18d3      	adds	r3, r2, r3
   124ee:	9305      	str	r3, [sp, #20]
			if (conn->hdr.ticks_xtal_to_start &
   124f0:	f8d9 3000 	ldr.w	r3, [r9]
   124f4:	2b00      	cmp	r3, #0
   124f6:	f6ff af6a 	blt.w	123ce <sched_free_win_offset_calc+0x76>
			if (*ticks_to_offset_next < ticks_to_expire_normal) {
   124fa:	9b07      	ldr	r3, [sp, #28]
   124fc:	681f      	ldr	r7, [r3, #0]
   124fe:	9b05      	ldr	r3, [sp, #20]
   12500:	42bb      	cmp	r3, r7
   12502:	d9a6      	bls.n	12452 <sched_free_win_offset_calc+0xfa>
				if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12504:	9a08      	ldr	r2, [sp, #32]
   12506:	42ba      	cmp	r2, r7
   12508:	f4ff af7a 	bcc.w	12400 <sched_free_win_offset_calc+0xa8>
   1250c:	4617      	mov	r7, r2
   1250e:	e777      	b.n	12400 <sched_free_win_offset_calc+0xa8>
   12510:	9708      	str	r7, [sp, #32]
	if (ticker_id == 0xFF) {
   12512:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
   12516:	2bff      	cmp	r3, #255	; 0xff
   12518:	d003      	beq.n	12522 <sched_free_win_offset_calc+0x1ca>
	*offset_max = offset_index;
   1251a:	702c      	strb	r4, [r5, #0]
}
   1251c:	b011      	add	sp, #68	; 0x44
   1251e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (ticks_to_expire_prev < *ticks_to_offset_next) {
   12522:	9b07      	ldr	r3, [sp, #28]
   12524:	681f      	ldr	r7, [r3, #0]
   12526:	9a08      	ldr	r2, [sp, #32]
   12528:	42ba      	cmp	r2, r7
   1252a:	d300      	bcc.n	1252e <sched_free_win_offset_calc+0x1d6>
   1252c:	4617      	mov	r7, r2
		while (offset_index < *offset_max) {
   1252e:	782b      	ldrb	r3, [r5, #0]
   12530:	429c      	cmp	r4, r3
   12532:	d21f      	bcs.n	12574 <sched_free_win_offset_calc+0x21c>
				TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12534:	19bb      	adds	r3, r7, r6
   12536:	4814      	ldr	r0, [pc, #80]	; (12588 <sched_free_win_offset_calc+0x230>)
   12538:	fba3 0100 	umull	r0, r1, r3, r0
   1253c:	2207      	movs	r2, #7
   1253e:	fb02 1103 	mla	r1, r2, r3, r1
   12542:	a30f      	add	r3, pc, #60	; (adr r3, 12580 <sched_free_win_offset_calc+0x228>)
   12544:	e9d3 2300 	ldrd	r2, r3, [r3]
   12548:	f7ee f948 	bl	7dc <__aeabi_uldivmod>
						   ticks_slot_prev_abs) / 1250;
   1254c:	4b0f      	ldr	r3, [pc, #60]	; (1258c <sched_free_win_offset_calc+0x234>)
   1254e:	fba3 2300 	umull	r2, r3, r3, r0
			_win_offset =
   12552:	f3c3 238f 	ubfx	r3, r3, #10, #16
   12556:	f8ad 3034 	strh.w	r3, [sp, #52]	; 0x34
			if (_win_offset >= conn_interval) {
   1255a:	459b      	cmp	fp, r3
   1255c:	d909      	bls.n	12572 <sched_free_win_offset_calc+0x21a>
			memcpy(win_offset + (sizeof(u16_t) * offset_index),
   1255e:	2202      	movs	r2, #2
   12560:	a90d      	add	r1, sp, #52	; 0x34
   12562:	eb0a 0044 	add.w	r0, sl, r4, lsl #1
   12566:	f7ed feab 	bl	2c0 <memcpy>
			offset_index++;
   1256a:	3401      	adds	r4, #1
   1256c:	b2e4      	uxtb	r4, r4
			ticks_to_expire_prev += TICKER_US_TO_TICKS(1250);
   1256e:	3728      	adds	r7, #40	; 0x28
   12570:	e7dd      	b.n	1252e <sched_free_win_offset_calc+0x1d6>
				ticks_to_expire_prev = 0;
   12572:	2700      	movs	r7, #0
		*ticks_to_offset_next = ticks_to_expire_prev;
   12574:	9b07      	ldr	r3, [sp, #28]
   12576:	601f      	str	r7, [r3, #0]
   12578:	e7cf      	b.n	1251a <sched_free_win_offset_calc+0x1c2>
   1257a:	bf00      	nop
   1257c:	f3af 8000 	nop.w
   12580:	3b9aca00 	.word	0x3b9aca00
   12584:	00000000 	.word	0x00000000
   12588:	1afd498d 	.word	0x1afd498d
   1258c:	d1b71759 	.word	0xd1b71759
   12590:	00010d4d 	.word	0x00010d4d
   12594:	20000f84 	.word	0x20000f84

00012598 <mayfly_sched_free_win_offset_calc>:
{
   12598:	b500      	push	{lr}
   1259a:	b085      	sub	sp, #20
	u32_t ticks_to_offset_default = 0;
   1259c:	2300      	movs	r3, #0
   1259e:	9303      	str	r3, [sp, #12]
	u8_t offset_max = 6;
   125a0:	2306      	movs	r3, #6
   125a2:	f88d 300b 	strb.w	r3, [sp, #11]
	if (conn->role) {
   125a6:	f990 301d 	ldrsb.w	r3, [r0, #29]
   125aa:	2b00      	cmp	r3, #0
   125ac:	db0e      	blt.n	125cc <mayfly_sched_free_win_offset_calc+0x34>
	ticks_to_offset_next = &ticks_to_offset_default;
   125ae:	aa03      	add	r2, sp, #12
				   (u8_t *)conn->llcp_conn_param.pdu_win_offset0);
   125b0:	f8d0 10dc 	ldr.w	r1, [r0, #220]	; 0xdc
	sched_free_win_offset_calc(conn, 0, ticks_to_offset_next,
   125b4:	f8b0 30c4 	ldrh.w	r3, [r0, #196]	; 0xc4
   125b8:	9101      	str	r1, [sp, #4]
   125ba:	f10d 010b 	add.w	r1, sp, #11
   125be:	9100      	str	r1, [sp, #0]
   125c0:	2100      	movs	r1, #0
   125c2:	f7ff fec9 	bl	12358 <sched_free_win_offset_calc>
}
   125c6:	b005      	add	sp, #20
   125c8:	f85d fb04 	ldr.w	pc, [sp], #4
			conn->slave.ticks_to_offset;
   125cc:	6f03      	ldr	r3, [r0, #112]	; 0x70
		conn->llcp_conn_param.ticks_to_offset_next =
   125ce:	4602      	mov	r2, r0
   125d0:	f842 3fe4 	str.w	r3, [r2, #228]!
   125d4:	e7ec      	b.n	125b0 <mayfly_sched_free_win_offset_calc+0x18>
	...

000125d8 <mayfly_sched_win_offset_select>:
{
   125d8:	b570      	push	{r4, r5, r6, lr}
   125da:	b088      	sub	sp, #32
   125dc:	4606      	mov	r6, r0
	u16_t win_offset_m[OFFSET_M_MAX] = {0, };
   125de:	ac05      	add	r4, sp, #20
   125e0:	2500      	movs	r5, #0
   125e2:	9505      	str	r5, [sp, #20]
   125e4:	9506      	str	r5, [sp, #24]
   125e6:	9507      	str	r5, [sp, #28]
	u8_t offset_m_max = OFFSET_M_MAX;
   125e8:	2306      	movs	r3, #6
   125ea:	f88d 3013 	strb.w	r3, [sp, #19]
		TICKER_US_TO_TICKS(conn->llcp_conn_param.offset0 * 1250);
   125ee:	f8b0 20ce 	ldrh.w	r2, [r0, #206]	; 0xce
   125f2:	4843      	ldr	r0, [pc, #268]	; (12700 <mayfly_sched_win_offset_select+0x128>)
   125f4:	fba2 0100 	umull	r0, r1, r2, r0
   125f8:	f240 1323 	movw	r3, #291	; 0x123
   125fc:	fb03 1102 	mla	r1, r3, r2, r1
   12600:	a33d      	add	r3, pc, #244	; (adr r3, 126f8 <mayfly_sched_win_offset_select+0x120>)
   12602:	e9d3 2300 	ldrd	r2, r3, [r3]
   12606:	f7ee f8e9 	bl	7dc <__aeabi_uldivmod>
   1260a:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ticks_to_offset =
   1260e:	aa08      	add	r2, sp, #32
   12610:	f842 0d14 	str.w	r0, [r2, #-20]!
	sched_free_win_offset_calc(conn, 1, &ticks_to_offset,
   12614:	f8b6 30c4 	ldrh.w	r3, [r6, #196]	; 0xc4
   12618:	9401      	str	r4, [sp, #4]
   1261a:	f10d 0113 	add.w	r1, sp, #19
   1261e:	9100      	str	r1, [sp, #0]
   12620:	2101      	movs	r1, #1
   12622:	4630      	mov	r0, r6
   12624:	f7ff fe98 	bl	12358 <sched_free_win_offset_calc>
	u8_t has_offset_s = 0;
   12628:	462c      	mov	r4, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1262a:	e018      	b.n	1265e <mayfly_sched_win_offset_select+0x86>
			offset_index_m++;
   1262c:	3301      	adds	r3, #1
   1262e:	b2db      	uxtb	r3, r3
		while (offset_index_m < offset_m_max) {
   12630:	f89d 1013 	ldrb.w	r1, [sp, #19]
   12634:	428b      	cmp	r3, r1
   12636:	d20e      	bcs.n	12656 <mayfly_sched_win_offset_select+0x7e>
			if (win_offset_s != 0xffff) {
   12638:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1263c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   12640:	4282      	cmp	r2, r0
   12642:	d0f3      	beq.n	1262c <mayfly_sched_win_offset_select+0x54>
				    win_offset_m[offset_index_m]) {
   12644:	a808      	add	r0, sp, #32
   12646:	eb00 0043 	add.w	r0, r0, r3, lsl #1
   1264a:	f830 0c0c 	ldrh.w	r0, [r0, #-12]
				if (win_offset_s ==
   1264e:	4282      	cmp	r2, r0
   12650:	d001      	beq.n	12656 <mayfly_sched_win_offset_select+0x7e>
				has_offset_s = 1;
   12652:	2401      	movs	r4, #1
   12654:	e7ea      	b.n	1262c <mayfly_sched_win_offset_select+0x54>
		if (offset_index_m < offset_m_max) {
   12656:	428b      	cmp	r3, r1
   12658:	d30e      	bcc.n	12678 <mayfly_sched_win_offset_select+0xa0>
		offset_index_s++;
   1265a:	3501      	adds	r5, #1
   1265c:	b2ed      	uxtb	r5, r5
	while (offset_index_s < OFFSET_S_MAX) {
   1265e:	2d05      	cmp	r5, #5
   12660:	d80a      	bhi.n	12678 <mayfly_sched_win_offset_select+0xa0>
		       ((u8_t *)&conn->llcp_conn_param.offset0 +
   12662:	f106 01ce 	add.w	r1, r6, #206	; 0xce
		memcpy((u8_t *)&win_offset_s,
   12666:	2202      	movs	r2, #2
   12668:	eb01 0145 	add.w	r1, r1, r5, lsl #1
   1266c:	f10d 000a 	add.w	r0, sp, #10
   12670:	f7ed fe26 	bl	2c0 <memcpy>
		u8_t offset_index_m = 0;
   12674:	2300      	movs	r3, #0
		while (offset_index_m < offset_m_max) {
   12676:	e7db      	b.n	12630 <mayfly_sched_win_offset_select+0x58>
	if (offset_index_s < OFFSET_S_MAX) {
   12678:	2d05      	cmp	r5, #5
   1267a:	d91d      	bls.n	126b8 <mayfly_sched_win_offset_select+0xe0>
	} else if (!has_offset_s) {
   1267c:	b35c      	cbz	r4, 126d6 <mayfly_sched_win_offset_select+0xfe>
		conn->llcp_ack = conn->llcp_req;
   1267e:	f896 3074 	ldrb.w	r3, [r6, #116]	; 0x74
   12682:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		_radio.conn_upd = NULL;
   12686:	2200      	movs	r2, #0
   12688:	4b1e      	ldr	r3, [pc, #120]	; (12704 <mayfly_sched_win_offset_select+0x12c>)
   1268a:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
			((u8_t *)conn->llcp.conn_upd.pdu_win_offset -
   1268e:	f8d6 308c 	ldr.w	r3, [r6, #140]	; 0x8c
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   12692:	f813 2c05 	ldrb.w	r2, [r3, #-5]
   12696:	f042 0203 	orr.w	r2, r2, #3
   1269a:	f803 2c05 	strb.w	r2, [r3, #-5]
		pdu_ctrl_tx->len =
   1269e:	2203      	movs	r2, #3
   126a0:	f803 2c04 	strb.w	r2, [r3, #-4]
		pdu_ctrl_tx->payload.llctrl.opcode =
   126a4:	2211      	movs	r2, #17
   126a6:	f803 2c02 	strb.w	r2, [r3, #-2]
			reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   126aa:	220f      	movs	r2, #15
   126ac:	f803 2c01 	strb.w	r2, [r3, #-1]
			error_code = 0x20; /* Unsupported parameter value */
   126b0:	2220      	movs	r2, #32
   126b2:	701a      	strb	r2, [r3, #0]
}
   126b4:	b008      	add	sp, #32
   126b6:	bd70      	pop	{r4, r5, r6, pc}
			win_offset_s * 1250;
   126b8:	a908      	add	r1, sp, #32
   126ba:	f831 2d16 	ldrh.w	r2, [r1, #-22]!
   126be:	f240 43e2 	movw	r3, #1250	; 0x4e2
   126c2:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   126c6:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   126ca:	2202      	movs	r2, #2
   126cc:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   126d0:	f7ed fdf6 	bl	2c0 <memcpy>
   126d4:	e7ee      	b.n	126b4 <mayfly_sched_win_offset_select+0xdc>
			win_offset_m[0] * 1250;
   126d6:	a908      	add	r1, sp, #32
   126d8:	f831 2d0c 	ldrh.w	r2, [r1, #-12]!
   126dc:	f240 43e2 	movw	r3, #1250	; 0x4e2
   126e0:	fb03 f302 	mul.w	r3, r3, r2
		conn->llcp.conn_upd.win_offset_us =
   126e4:	f8c6 3084 	str.w	r3, [r6, #132]	; 0x84
		memcpy(conn->llcp.conn_upd.pdu_win_offset,
   126e8:	2202      	movs	r2, #2
   126ea:	f8d6 008c 	ldr.w	r0, [r6, #140]	; 0x8c
   126ee:	f7ed fde7 	bl	2c0 <memcpy>
   126f2:	e7df      	b.n	126b4 <mayfly_sched_win_offset_select+0xdc>
   126f4:	f3af 8000 	nop.w
   126f8:	1afd498d 	.word	0x1afd498d
   126fc:	00000007 	.word	0x00000007
   12700:	09ce5400 	.word	0x09ce5400
   12704:	20000f84 	.word	0x20000f84

00012708 <sched_after_mstr_free_slot_get>:
{
   12708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1270c:	b08b      	sub	sp, #44	; 0x2c
   1270e:	4604      	mov	r4, r0
   12710:	468b      	mov	fp, r1
   12712:	4615      	mov	r5, r2
   12714:	469a      	mov	sl, r3
	ticker_id = ticker_id_prev = 0xff;
   12716:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1271a:	f88d 8027 	strb.w	r8, [sp, #39]	; 0x27
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   1271e:	2300      	movs	r3, #0
   12720:	f8ca 3000 	str.w	r3, [sl]
   12724:	9308      	str	r3, [sp, #32]
	ticks_slot_prev_abs = 0;
   12726:	461f      	mov	r7, r3
	ticks_to_expire = ticks_to_expire_prev = *us_offset = 0;
   12728:	9305      	str	r3, [sp, #20]
   1272a:	e01f      	b.n	1276c <sched_after_mstr_free_slot_get+0x64>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   1272c:	4621      	mov	r1, r4
   1272e:	2000      	movs	r0, #0
   12730:	f7fd ff72 	bl	10618 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   12734:	9b07      	ldr	r3, [sp, #28]
   12736:	2b02      	cmp	r3, #2
   12738:	d0f8      	beq.n	1272c <sched_after_mstr_free_slot_get+0x24>
   1273a:	e028      	b.n	1278e <sched_after_mstr_free_slot_get+0x86>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1273c:	4040      	eors	r0, r0
   1273e:	f380 8811 	msr	BASEPRI, r0
   12742:	f04f 0004 	mov.w	r0, #4
   12746:	df02      	svc	2
					conn->hdr.ticks_preempt_to_start;
   12748:	6881      	ldr	r1, [r0, #8]
					conn->hdr.ticks_active_to_start :
   1274a:	6842      	ldr	r2, [r0, #4]
					((conn->hdr.ticks_xtal_to_start &
   1274c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
					  (~((u32_t)1 << 31))) -
   12750:	4291      	cmp	r1, r2
   12752:	bf2c      	ite	cs
   12754:	ebc3 0301 	rsbcs	r3, r3, r1
   12758:	ebc3 0302 	rsbcc	r3, r3, r2
				ticks_to_expire_normal -=
   1275c:	4499      	add	r9, r3
   1275e:	e03a      	b.n	127d6 <sched_after_mstr_free_slot_get+0xce>
			ticker_id_prev = ticker_id;
   12760:	f89d 8027 	ldrb.w	r8, [sp, #39]	; 0x27
				conn->hdr.ticks_slot;
   12764:	68f7      	ldr	r7, [r6, #12]
			ticks_slot_prev_abs =
   12766:	3727      	adds	r7, #39	; 0x27
			ticks_to_expire_prev = ticks_to_expire_normal;
   12768:	f8cd 9014 	str.w	r9, [sp, #20]
		u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   1276c:	2302      	movs	r3, #2
   1276e:	9307      	str	r3, [sp, #28]
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   12770:	ab07      	add	r3, sp, #28
   12772:	9302      	str	r3, [sp, #8]
   12774:	4b2c      	ldr	r3, [pc, #176]	; (12828 <sched_after_mstr_free_slot_get+0x120>)
   12776:	9301      	str	r3, [sp, #4]
   12778:	ab08      	add	r3, sp, #32
   1277a:	9300      	str	r3, [sp, #0]
   1277c:	462b      	mov	r3, r5
   1277e:	f10d 0227 	add.w	r2, sp, #39	; 0x27
   12782:	4621      	mov	r1, r4
   12784:	2000      	movs	r0, #0
   12786:	f7fd fec7 	bl	10518 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   1278a:	2802      	cmp	r0, #2
   1278c:	d0d2      	beq.n	12734 <sched_after_mstr_free_slot_get+0x2c>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   1278e:	9b07      	ldr	r3, [sp, #28]
   12790:	2b00      	cmp	r3, #0
   12792:	d1d3      	bne.n	1273c <sched_after_mstr_free_slot_get+0x34>
		if (ticker_id == 0xff) {
   12794:	f89d 2027 	ldrb.w	r2, [sp, #39]	; 0x27
   12798:	2aff      	cmp	r2, #255	; 0xff
   1279a:	d028      	beq.n	127ee <sched_after_mstr_free_slot_get+0xe6>
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   1279c:	2a06      	cmp	r2, #6
   1279e:	d9e5      	bls.n	1276c <sched_after_mstr_free_slot_get+0x64>
				  _radio.connection_count)) {
   127a0:	4b22      	ldr	r3, [pc, #136]	; (1282c <sched_after_mstr_free_slot_get+0x124>)
   127a2:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		    ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   127a6:	3307      	adds	r3, #7
		if (ticker_id < RADIO_TICKER_ID_FIRST_CONNECTION ||
   127a8:	429a      	cmp	r2, r3
   127aa:	dadf      	bge.n	1276c <sched_after_mstr_free_slot_get+0x64>
		conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   127ac:	3a07      	subs	r2, #7
   127ae:	b292      	uxth	r2, r2
   127b0:	f44f 71aa 	mov.w	r1, #340	; 0x154
   127b4:	4b1d      	ldr	r3, [pc, #116]	; (1282c <sched_after_mstr_free_slot_get+0x124>)
   127b6:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   127ba:	f7fc f941 	bl	ea40 <mem_get>
		if (conn && !conn->role) {
   127be:	4606      	mov	r6, r0
   127c0:	2800      	cmp	r0, #0
   127c2:	d0d3      	beq.n	1276c <sched_after_mstr_free_slot_get+0x64>
   127c4:	f990 301d 	ldrsb.w	r3, [r0, #29]
   127c8:	2b00      	cmp	r3, #0
   127ca:	dbcf      	blt.n	1276c <sched_after_mstr_free_slot_get+0x64>
			u32_t ticks_to_expire_normal = ticks_to_expire;
   127cc:	f8dd 9020 	ldr.w	r9, [sp, #32]
			if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   127d0:	6803      	ldr	r3, [r0, #0]
   127d2:	2b00      	cmp	r3, #0
   127d4:	dbb8      	blt.n	12748 <sched_after_mstr_free_slot_get+0x40>
			if ((ticker_id_prev != 0xFF) &&
   127d6:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   127da:	d0c1      	beq.n	12760 <sched_after_mstr_free_slot_get+0x58>
			    (ticker_ticks_diff_get(ticks_to_expire_normal,
   127dc:	9905      	ldr	r1, [sp, #20]
   127de:	4648      	mov	r0, r9
   127e0:	f7fd ff2e 	bl	10640 <ticker_ticks_diff_get>
			     (ticks_slot_prev_abs + ticks_slot_abs +
   127e4:	eb07 030b 	add.w	r3, r7, fp
   127e8:	3302      	adds	r3, #2
			if ((ticker_id_prev != 0xFF) &&
   127ea:	4298      	cmp	r0, r3
   127ec:	d9b8      	bls.n	12760 <sched_after_mstr_free_slot_get+0x58>
	if (ticker_id_prev != 0xff) {
   127ee:	f1b8 0fff 	cmp.w	r8, #255	; 0xff
   127f2:	d010      	beq.n	12816 <sched_after_mstr_free_slot_get+0x10e>
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   127f4:	9b05      	ldr	r3, [sp, #20]
   127f6:	443b      	add	r3, r7
   127f8:	461f      	mov	r7, r3
   127fa:	480d      	ldr	r0, [pc, #52]	; (12830 <sched_after_mstr_free_slot_get+0x128>)
   127fc:	fba3 0100 	umull	r0, r1, r3, r0
   12800:	2307      	movs	r3, #7
   12802:	fb03 1107 	mla	r1, r3, r7, r1
   12806:	a306      	add	r3, pc, #24	; (adr r3, 12820 <sched_after_mstr_free_slot_get+0x118>)
   12808:	e9d3 2300 	ldrd	r2, r3, [r3]
   1280c:	f7ed ffe6 	bl	7dc <__aeabi_uldivmod>
						ticks_slot_prev_abs) +
   12810:	3020      	adds	r0, #32
		*us_offset = TICKER_TICKS_TO_US(ticks_to_expire_prev +
   12812:	f8ca 0000 	str.w	r0, [sl]
}
   12816:	b00b      	add	sp, #44	; 0x2c
   12818:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1281c:	f3af 8000 	nop.w
   12820:	3b9aca00 	.word	0x3b9aca00
   12824:	00000000 	.word	0x00000000
   12828:	00010d4d 	.word	0x00010d4d
   1282c:	20000f84 	.word	0x20000f84
   12830:	1afd498d 	.word	0x1afd498d
   12834:	00000000 	.word	0x00000000

00012838 <sched_after_mstr_free_offset_get>:
{
   12838:	b570      	push	{r4, r5, r6, lr}
   1283a:	b082      	sub	sp, #8
   1283c:	4606      	mov	r6, r0
   1283e:	4615      	mov	r5, r2
   12840:	461c      	mov	r4, r3
	u32_t ticks_anchor_offset = ticks_anchor;
   12842:	aa02      	add	r2, sp, #8
   12844:	f842 5d04 	str.w	r5, [r2, #-4]!
	sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_JOB,
   12848:	3127      	adds	r1, #39	; 0x27
   1284a:	2001      	movs	r0, #1
   1284c:	f7ff ff5c 	bl	12708 <sched_after_mstr_free_slot_get>
	if (ticks_anchor_offset != ticks_anchor) {
   12850:	9801      	ldr	r0, [sp, #4]
   12852:	4285      	cmp	r5, r0
   12854:	d011      	beq.n	1287a <sched_after_mstr_free_offset_get+0x42>
			TICKER_TICKS_TO_US(ticker_ticks_diff_get(ticks_anchor_offset,
   12856:	4629      	mov	r1, r5
   12858:	f7fd fef2 	bl	10640 <ticker_ticks_diff_get>
   1285c:	4602      	mov	r2, r0
   1285e:	4810      	ldr	r0, [pc, #64]	; (128a0 <sched_after_mstr_free_offset_get+0x68>)
   12860:	fba2 0100 	umull	r0, r1, r2, r0
   12864:	2307      	movs	r3, #7
   12866:	fb03 1102 	mla	r1, r3, r2, r1
   1286a:	a30b      	add	r3, pc, #44	; (adr r3, 12898 <sched_after_mstr_free_offset_get+0x60>)
   1286c:	e9d3 2300 	ldrd	r2, r3, [r3]
   12870:	f7ed ffb4 	bl	7dc <__aeabi_uldivmod>
		*win_offset_us +=
   12874:	6823      	ldr	r3, [r4, #0]
   12876:	4418      	add	r0, r3
   12878:	6020      	str	r0, [r4, #0]
	if ((*win_offset_us & ((u32_t)1 << 31)) == 0) {
   1287a:	6823      	ldr	r3, [r4, #0]
   1287c:	2b00      	cmp	r3, #0
   1287e:	db09      	blt.n	12894 <sched_after_mstr_free_offset_get+0x5c>
		u32_t conn_interval_us = conn_interval * 1250;
   12880:	f240 40e2 	movw	r0, #1250	; 0x4e2
   12884:	fb00 f006 	mul.w	r0, r0, r6
		while (*win_offset_us > conn_interval_us) {
   12888:	e001      	b.n	1288e <sched_after_mstr_free_offset_get+0x56>
			*win_offset_us -= conn_interval_us;
   1288a:	1a1b      	subs	r3, r3, r0
   1288c:	6023      	str	r3, [r4, #0]
		while (*win_offset_us > conn_interval_us) {
   1288e:	6823      	ldr	r3, [r4, #0]
   12890:	4298      	cmp	r0, r3
   12892:	d3fa      	bcc.n	1288a <sched_after_mstr_free_offset_get+0x52>
}
   12894:	b002      	add	sp, #8
   12896:	bd70      	pop	{r4, r5, r6, pc}
   12898:	3b9aca00 	.word	0x3b9aca00
   1289c:	00000000 	.word	0x00000000
   128a0:	1afd498d 	.word	0x1afd498d

000128a4 <mayfly_sched_win_offset_use>:
{
   128a4:	b510      	push	{r4, lr}
   128a6:	b082      	sub	sp, #8
   128a8:	4604      	mov	r4, r0
	sched_after_mstr_free_offset_get(conn->conn_interval,
   128aa:	f100 0384 	add.w	r3, r0, #132	; 0x84
   128ae:	f8d0 2090 	ldr.w	r2, [r0, #144]	; 0x90
   128b2:	68c1      	ldr	r1, [r0, #12]
   128b4:	8c80      	ldrh	r0, [r0, #36]	; 0x24
   128b6:	f7ff ffbf 	bl	12838 <sched_after_mstr_free_offset_get>
	win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   128ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   128be:	4a07      	ldr	r2, [pc, #28]	; (128dc <mayfly_sched_win_offset_use+0x38>)
   128c0:	fba2 2303 	umull	r2, r3, r2, r3
   128c4:	0a9b      	lsrs	r3, r3, #10
   128c6:	a902      	add	r1, sp, #8
   128c8:	f821 3d02 	strh.w	r3, [r1, #-2]!
	memcpy(conn->llcp.conn_upd.pdu_win_offset, &win_offset,
   128cc:	2202      	movs	r2, #2
   128ce:	f8d4 008c 	ldr.w	r0, [r4, #140]	; 0x8c
   128d2:	f7ed fcf5 	bl	2c0 <memcpy>
}
   128d6:	b002      	add	sp, #8
   128d8:	bd10      	pop	{r4, pc}
   128da:	bf00      	nop
   128dc:	d1b71759 	.word	0xd1b71759

000128e0 <mayfly_sched_after_mstr_free_offset_get>:
{
   128e0:	b510      	push	{r4, lr}
	sched_after_mstr_free_offset_get(_radio.scanner.conn_interval,
   128e2:	4c05      	ldr	r4, [pc, #20]	; (128f8 <mayfly_sched_after_mstr_free_offset_get+0x18>)
   128e4:	f504 7380 	add.w	r3, r4, #256	; 0x100
   128e8:	4602      	mov	r2, r0
   128ea:	f8d4 10f8 	ldr.w	r1, [r4, #248]	; 0xf8
   128ee:	f8b4 00f0 	ldrh.w	r0, [r4, #240]	; 0xf0
   128f2:	f7ff ffa1 	bl	12838 <sched_after_mstr_free_offset_get>
   128f6:	bd10      	pop	{r4, pc}
   128f8:	20000f84 	.word	0x20000f84

000128fc <enc_rsp_send>:
{
   128fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   12900:	4605      	mov	r5, r0
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   12902:	4818      	ldr	r0, [pc, #96]	; (12964 <enc_rsp_send+0x68>)
   12904:	f7fc f85f 	bl	e9c6 <mem_acquire>
	LL_ASSERT(node_tx);
   12908:	b330      	cbz	r0, 12958 <enc_rsp_send+0x5c>
   1290a:	4604      	mov	r4, r0
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1290c:	7903      	ldrb	r3, [r0, #4]
   1290e:	f043 0303 	orr.w	r3, r3, #3
   12912:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   12914:	230d      	movs	r3, #13
   12916:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_RSP;
   12918:	2604      	movs	r6, #4
   1291a:	71c6      	strb	r6, [r0, #7]
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds);
   1291c:	f100 0808 	add.w	r8, r0, #8
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.skds),
   12920:	4641      	mov	r1, r8
   12922:	2008      	movs	r0, #8
   12924:	f7fd faa2 	bl	fe6c <rand_isr_get>
		     pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs);
   12928:	f104 0710 	add.w	r7, r4, #16
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_rsp.ivs),
   1292c:	4639      	mov	r1, r7
   1292e:	4630      	mov	r0, r6
   12930:	f7fd fa9c 	bl	fe6c <rand_isr_get>
	memcpy(&conn->llcp.encryption.skd[8],
   12934:	2208      	movs	r2, #8
   12936:	4641      	mov	r1, r8
   12938:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   1293c:	f7ed fcc0 	bl	2c0 <memcpy>
	memcpy(&conn->ccm_rx.iv[4],
   12940:	4632      	mov	r2, r6
   12942:	4639      	mov	r1, r7
   12944:	f505 708b 	add.w	r0, r5, #278	; 0x116
   12948:	f7ed fcba 	bl	2c0 <memcpy>
	ctrl_tx_enqueue(conn, node_tx);
   1294c:	4621      	mov	r1, r4
   1294e:	4628      	mov	r0, r5
   12950:	f7fe facc 	bl	10eec <ctrl_tx_enqueue>
   12954:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	LL_ASSERT(node_tx);
   12958:	4040      	eors	r0, r0
   1295a:	f380 8811 	msr	BASEPRI, r0
   1295e:	f04f 0004 	mov.w	r0, #4
   12962:	df02      	svc	2
   12964:	200010dc 	.word	0x200010dc

00012968 <enc_req_reused_send>:
{
   12968:	b538      	push	{r3, r4, r5, lr}
   1296a:	4605      	mov	r5, r0
   1296c:	460c      	mov	r4, r1
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1296e:	790b      	ldrb	r3, [r1, #4]
   12970:	f043 0303 	orr.w	r3, r3, #3
   12974:	710b      	strb	r3, [r1, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata)
   12976:	2317      	movs	r3, #23
   12978:	714b      	strb	r3, [r1, #5]
	pdu_ctrl_tx->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   1297a:	2303      	movs	r3, #3
   1297c:	71cb      	strb	r3, [r1, #7]
	memcpy(&pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.rand[0],
   1297e:	2208      	movs	r2, #8
   12980:	f100 0179 	add.w	r1, r0, #121	; 0x79
   12984:	18a0      	adds	r0, r4, r2
   12986:	f7ed fc9b 	bl	2c0 <memcpy>
		conn->llcp.encryption.ediv[0];
   1298a:	f895 3081 	ldrb.w	r3, [r5, #129]	; 0x81
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[0] =
   1298e:	7423      	strb	r3, [r4, #16]
		conn->llcp.encryption.ediv[1];
   12990:	f895 3082 	ldrb.w	r3, [r5, #130]	; 0x82
	pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ediv[1] =
   12994:	7463      	strb	r3, [r4, #17]
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.skdm),
   12996:	f104 0112 	add.w	r1, r4, #18
   1299a:	2008      	movs	r0, #8
   1299c:	f7fd fa66 	bl	fe6c <rand_isr_get>
	rand_isr_get(sizeof(pdu_ctrl_tx->payload.llctrl.ctrldata.enc_req.ivm),
   129a0:	f104 011a 	add.w	r1, r4, #26
   129a4:	2004      	movs	r0, #4
   129a6:	f7fd fa61 	bl	fe6c <rand_isr_get>
   129aa:	bd38      	pop	{r3, r4, r5, pc}

000129ac <isr_rx_conn_pkt_ctrl>:
{
   129ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   129b0:	b082      	sub	sp, #8
   129b2:	4604      	mov	r4, r0
   129b4:	460f      	mov	r7, r1
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   129b6:	f100 0608 	add.w	r6, r0, #8
	if (_radio.conn_curr->role) {
   129ba:	4ba0      	ldr	r3, [pc, #640]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   129bc:	f8d3 5110 	ldr.w	r5, [r3, #272]	; 0x110
   129c0:	f995 301d 	ldrsb.w	r3, [r5, #29]
   129c4:	2b00      	cmp	r3, #0
   129c6:	db11      	blt.n	129ec <isr_rx_conn_pkt_ctrl+0x40>
		switch (pdu_data_rx->payload.llctrl.opcode) {
   129c8:	7ac1      	ldrb	r1, [r0, #11]
   129ca:	2918      	cmp	r1, #24
   129cc:	d82c      	bhi.n	12a28 <isr_rx_conn_pkt_ctrl+0x7c>
   129ce:	e8df f001 	tbb	[pc, r1]
   129d2:	2323      	.short	0x2323
   129d4:	2b2b232b 	.word	0x2b2b232b
   129d8:	2b232b2b 	.word	0x2b232b2b
   129dc:	2b2b2b23 	.word	0x2b2b2b23
   129e0:	2b2b2b2b 	.word	0x2b2b2b2b
   129e4:	2b2b2b2b 	.word	0x2b2b2b2b
   129e8:	2b2b      	.short	0x2b2b
   129ea:	23          	.byte	0x23
   129eb:	00          	.byte	0x00
		switch (pdu_data_rx->payload.llctrl.opcode) {
   129ec:	7ac1      	ldrb	r1, [r0, #11]
   129ee:	1f0a      	subs	r2, r1, #4
   129f0:	2a15      	cmp	r2, #21
   129f2:	d819      	bhi.n	12a28 <isr_rx_conn_pkt_ctrl+0x7c>
   129f4:	e8df f002 	tbb	[pc, r2]
   129f8:	18180b0b 	.word	0x18180b0b
   129fc:	18181818 	.word	0x18181818
   12a00:	180b1818 	.word	0x180b1818
   12a04:	1818180b 	.word	0x1818180b
   12a08:	0b181818 	.word	0x0b181818
   12a0c:	0b18      	.short	0x0b18
			unknown_rsp_send(_radio.conn_curr,
   12a0e:	4628      	mov	r0, r5
   12a10:	f7fe fcca 	bl	113a8 <unknown_rsp_send>
			return 0;
   12a14:	2400      	movs	r4, #0
   12a16:	e003      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			unknown_rsp_send(_radio.conn_curr,
   12a18:	4628      	mov	r0, r5
   12a1a:	f7fe fcc5 	bl	113a8 <unknown_rsp_send>
			return 0;
   12a1e:	2400      	movs	r4, #0
}
   12a20:	4620      	mov	r0, r4
   12a22:	b002      	add	sp, #8
   12a24:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	switch (pdu_data_rx->payload.llctrl.opcode) {
   12a28:	7ae1      	ldrb	r1, [r4, #11]
   12a2a:	2919      	cmp	r1, #25
   12a2c:	f200 87e6 	bhi.w	139fc <isr_rx_conn_pkt_ctrl+0x1050>
   12a30:	e8df f011 	tbh	[pc, r1, lsl #1]
   12a34:	002e001a 	.word	0x002e001a
   12a38:	0042003d 	.word	0x0042003d
   12a3c:	00800065 	.word	0x00800065
   12a40:	04c60099 	.word	0x04c60099
   12a44:	010600de 	.word	0x010600de
   12a48:	014b012d 	.word	0x014b012d
   12a4c:	01ad0170 	.word	0x01ad0170
   12a50:	01c400de 	.word	0x01c400de
   12a54:	0395032d 	.word	0x0395032d
   12a58:	04c104bb 	.word	0x04c104bb
   12a5c:	05180518 	.word	0x05180518
   12a60:	06de0606 	.word	0x06de0606
   12a64:	07b9071b 	.word	0x07b9071b
		if (conn_update(_radio.conn_curr, pdu_data_rx) == 0) {
   12a68:	4631      	mov	r1, r6
   12a6a:	4628      	mov	r0, r5
   12a6c:	f7fe fb90 	bl	11190 <conn_update>
   12a70:	b930      	cbnz	r0, 12a80 <isr_rx_conn_pkt_ctrl+0xd4>
			_radio.conn_curr->procedure_expire = 0;
   12a72:	4b72      	ldr	r3, [pc, #456]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12a74:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a78:	2400      	movs	r4, #0
   12a7a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   12a7e:	e7cf      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12a80:	4b6e      	ldr	r3, [pc, #440]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12a82:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12a86:	2228      	movs	r2, #40	; 0x28
   12a88:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12a8c:	2400      	movs	r4, #0
   12a8e:	e7c7      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		if (chan_map_update(_radio.conn_curr, pdu_data_rx)) {
   12a90:	4631      	mov	r1, r6
   12a92:	4628      	mov	r0, r5
   12a94:	f7ff f99e 	bl	11dd4 <chan_map_update>
   12a98:	2800      	cmp	r0, #0
   12a9a:	f000 87b5 	beq.w	13a08 <isr_rx_conn_pkt_ctrl+0x105c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   12a9e:	4b67      	ldr	r3, [pc, #412]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12aa0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12aa4:	2228      	movs	r2, #40	; 0x28
   12aa6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   12aaa:	2400      	movs	r4, #0
   12aac:	e7b8      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			pdu_data_rx->payload.llctrl.ctrldata.terminate_ind.error_code;
   12aae:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_terminate.reason_peer =
   12ab0:	f885 30b3 	strb.w	r3, [r5, #179]	; 0xb3
	u8_t nack = 0;
   12ab4:	2400      	movs	r4, #0
		break;
   12ab6:	e7b3      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   12ab8:	2208      	movs	r2, #8
   12aba:	f104 0116 	add.w	r1, r4, #22
   12abe:	f105 0093 	add.w	r0, r5, #147	; 0x93
   12ac2:	f7ed fbfd 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   12ac6:	4d5d      	ldr	r5, [pc, #372]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12ac8:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   12acc:	2204      	movs	r2, #4
   12ace:	f104 011e 	add.w	r1, r4, #30
   12ad2:	f500 7089 	add.w	r0, r0, #274	; 0x112
   12ad6:	f7ed fbf3 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12ada:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   12ade:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12ae2:	f043 0304 	orr.w	r3, r3, #4
   12ae6:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   12aea:	f8d5 3110 	ldr.w	r3, [r5, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   12aee:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   12af2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12af6:	2301      	movs	r3, #1
   12af8:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   12afa:	2400      	movs	r4, #0
		break;
   12afc:	e790      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[8],
   12afe:	2208      	movs	r2, #8
   12b00:	f104 010c 	add.w	r1, r4, #12
   12b04:	f105 009b 	add.w	r0, r5, #155	; 0x9b
   12b08:	f7ed fbda 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[4],
   12b0c:	4d4b      	ldr	r5, [pc, #300]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12b0e:	f8d5 0110 	ldr.w	r0, [r5, #272]	; 0x110
   12b12:	2204      	movs	r2, #4
   12b14:	f104 0114 	add.w	r1, r4, #20
   12b18:	f500 708b 	add.w	r0, r0, #278	; 0x116
   12b1c:	f7ed fbd0 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_rx = 1;
   12b20:	f8d5 2110 	ldr.w	r2, [r5, #272]	; 0x110
   12b24:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   12b28:	f043 0304 	orr.w	r3, r3, #4
   12b2c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t nack = 0;
   12b30:	2400      	movs	r4, #0
		break;
   12b32:	e775      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   12b34:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12b38:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12b3c:	429a      	cmp	r2, r3
   12b3e:	d10c      	bne.n	12b5a <isr_rx_conn_pkt_ctrl+0x1ae>
		_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12b40:	2303      	movs	r3, #3
   12b42:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
		_radio.conn_curr->llcp_ack--;
   12b46:	4b3d      	ldr	r3, [pc, #244]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12b48:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12b4c:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   12b50:	3b01      	subs	r3, #1
   12b52:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
	u8_t nack = 0;
   12b56:	2400      	movs	r4, #0
		break;
   12b58:	e762      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(_radio.conn_curr->llcp_req ==
   12b5a:	4040      	eors	r0, r0
   12b5c:	f380 8811 	msr	BASEPRI, r0
   12b60:	f04f 0004 	mov.w	r0, #4
   12b64:	df02      	svc	2
		if (_radio.role == ROLE_SLAVE) {
   12b66:	4b35      	ldr	r3, [pc, #212]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12b68:	7bdb      	ldrb	r3, [r3, #15]
   12b6a:	b2db      	uxtb	r3, r3
   12b6c:	2b03      	cmp	r3, #3
   12b6e:	d027      	beq.n	12bc0 <isr_rx_conn_pkt_ctrl+0x214>
			_radio.conn_curr->pause_rx = 0;
   12b70:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12b74:	f36f 0382 	bfc	r3, #2, #1
   12b78:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   12b7c:	4b2f      	ldr	r3, [pc, #188]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12b7e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b82:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12b86:	f36f 02c3 	bfc	r2, #3, #1
   12b8a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		if (_radio.conn_curr->refresh) {
   12b8e:	4b2b      	ldr	r3, [pc, #172]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12b90:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12b94:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12b98:	f012 0f40 	tst.w	r2, #64	; 0x40
   12b9c:	d007      	beq.n	12bae <isr_rx_conn_pkt_ctrl+0x202>
			_radio.conn_curr->refresh = 0;
   12b9e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12ba2:	f36f 1286 	bfc	r2, #6, #1
   12ba6:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_ENC_REFRESH;
   12baa:	2309      	movs	r3, #9
   12bac:	7123      	strb	r3, [r4, #4]
		*rx_enqueue = 1;
   12bae:	2301      	movs	r3, #1
   12bb0:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   12bb2:	4b22      	ldr	r3, [pc, #136]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12bb4:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12bb8:	2400      	movs	r4, #0
   12bba:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   12bbe:	e72f      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   12bc0:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12bc4:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12bc8:	429a      	cmp	r2, r3
   12bca:	d10b      	bne.n	12be4 <isr_rx_conn_pkt_ctrl+0x238>
			_radio.conn_curr->llcp_type = LLCP_ENCRYPTION;
   12bcc:	2303      	movs	r3, #3
   12bce:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			_radio.conn_curr->llcp_ack--;
   12bd2:	4b1a      	ldr	r3, [pc, #104]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12bd4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12bd8:	f892 3075 	ldrb.w	r3, [r2, #117]	; 0x75
   12bdc:	3b01      	subs	r3, #1
   12bde:	f882 3075 	strb.w	r3, [r2, #117]	; 0x75
   12be2:	e7d4      	b.n	12b8e <isr_rx_conn_pkt_ctrl+0x1e2>
			LL_ASSERT(_radio.conn_curr->llcp_req ==
   12be4:	4040      	eors	r0, r0
   12be6:	f380 8811 	msr	BASEPRI, r0
   12bea:	f04f 0004 	mov.w	r0, #4
   12bee:	df02      	svc	2
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12bf0:	7b23      	ldrb	r3, [r4, #12]
   12bf2:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12bf6:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   12bfa:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12bfe:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   12c02:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12c04:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12c08:	7ba2      	ldrb	r2, [r4, #14]
   12c0a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   12c0e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&req->features[0]);
   12c12:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12c16:	4013      	ands	r3, r2
   12c18:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12c1c:	4a07      	ldr	r2, [pc, #28]	; (12c3c <isr_rx_conn_pkt_ctrl+0x290>)
   12c1e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12c22:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12c26:	f043 0320 	orr.w	r3, r3, #32
   12c2a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		feature_rsp_send(_radio.conn_curr);
   12c2e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   12c32:	f7ff f8fd 	bl	11e30 <feature_rsp_send>
	u8_t nack = 0;
   12c36:	2400      	movs	r4, #0
	break;
   12c38:	e6f2      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   12c3a:	bf00      	nop
   12c3c:	20000f84 	.word	0x20000f84
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12c40:	7b23      	ldrb	r3, [r4, #12]
   12c42:	f043 437f 	orr.w	r3, r3, #4278190080	; 0xff000000
   12c46:	f443 037e 	orr.w	r3, r3, #16646144	; 0xfe0000
   12c4a:	f443 5343 	orr.w	r3, r3, #12480	; 0x30c0
   12c4e:	f043 0310 	orr.w	r3, r3, #16
	       (features[1] << 8) | (features[2] << 16);
   12c52:	7b62      	ldrb	r2, [r4, #13]
	feat = ~RADIO_BLE_FEAT_BIT_MASK_VALID | features[0] |
   12c54:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
	       (features[1] << 8) | (features[2] << 16);
   12c58:	7ba2      	ldrb	r2, [r4, #14]
   12c5a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	feat &= RADIO_BLE_FEAT_BIT_MASK;
   12c5e:	f3c3 0310 	ubfx	r3, r3, #0, #17
		_radio.conn_curr->llcp_features &= feat_get(&rsp->features[0]);
   12c62:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   12c66:	4013      	ands	r3, r2
   12c68:	f8c5 30a4 	str.w	r3, [r5, #164]	; 0xa4
		_radio.conn_curr->common.fex_valid = 1;
   12c6c:	4ad2      	ldr	r2, [pc, #840]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12c6e:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12c72:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   12c76:	f043 0320 	orr.w	r3, r3, #32
   12c7a:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
		*rx_enqueue = 1;
   12c7e:	2301      	movs	r3, #1
   12c80:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   12c82:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12c86:	2400      	movs	r4, #0
   12c88:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	break;
   12c8c:	e6c8      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		pause_enc_rsp_send(_radio.conn_curr);
   12c8e:	4628      	mov	r0, r5
   12c90:	f7fe fae8 	bl	11264 <pause_enc_rsp_send>
		_radio.conn_curr->pause_rx = 1;
   12c94:	4bc8      	ldr	r3, [pc, #800]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12c96:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12c9a:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12c9e:	f042 0204 	orr.w	r2, r2, #4
   12ca2:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   12ca6:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   12caa:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   12cae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   12cb2:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->enc_rx = 0;
   12cb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12cba:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12cbe:	f36f 1204 	bfc	r2, #4, #1
   12cc2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12cc6:	2400      	movs	r4, #0
		break;
   12cc8:	e6aa      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.role == ROLE_MASTER) {
   12cca:	4bbb      	ldr	r3, [pc, #748]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12ccc:	7bdb      	ldrb	r3, [r3, #15]
   12cce:	b2db      	uxtb	r3, r3
   12cd0:	2b04      	cmp	r3, #4
   12cd2:	d00a      	beq.n	12cea <isr_rx_conn_pkt_ctrl+0x33e>
		_radio.conn_curr->enc_tx = 0;
   12cd4:	4bb8      	ldr	r3, [pc, #736]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12cd6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12cda:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12cde:	f36f 1245 	bfc	r2, #5, #1
   12ce2:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	u8_t nack = 0;
   12ce6:	2400      	movs	r4, #0
		break;
   12ce8:	e69a      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			pause_enc_rsp_send(_radio.conn_curr);
   12cea:	4628      	mov	r0, r5
   12cec:	f7fe faba 	bl	11264 <pause_enc_rsp_send>
			_radio.conn_curr->pause_rx = 1;
   12cf0:	4ab1      	ldr	r2, [pc, #708]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12cf2:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12cf6:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   12cfa:	f043 0304 	orr.w	r3, r3, #4
   12cfe:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			_radio.conn_curr->enc_rx = 0;
   12d02:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12d06:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   12d0a:	f36f 1204 	bfc	r2, #4, #1
   12d0e:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   12d12:	e7df      	b.n	12cd4 <isr_rx_conn_pkt_ctrl+0x328>
			version_ind.version_number;
   12d14:	7b23      	ldrb	r3, [r4, #12]
		_radio.conn_curr->llcp_version.version_number =
   12d16:	f885 30a9 	strb.w	r3, [r5, #169]	; 0xa9
		_radio.conn_curr->llcp_version. company_id =
   12d1a:	4ba7      	ldr	r3, [pc, #668]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12d1c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.company_id;
   12d20:	f8b4 100d 	ldrh.w	r1, [r4, #13]
		_radio.conn_curr->llcp_version. company_id =
   12d24:	f8a2 10aa 	strh.w	r1, [r2, #170]	; 0xaa
		_radio.conn_curr->llcp_version.sub_version_number =
   12d28:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
			pdu_data_rx->payload.llctrl.ctrldata.version_ind.sub_version_number;
   12d2c:	f8b4 100f 	ldrh.w	r1, [r4, #15]
		_radio.conn_curr->llcp_version.sub_version_number =
   12d30:	f8a2 10ac 	strh.w	r1, [r2, #172]	; 0xac
		if ((_radio.conn_curr->llcp_version.tx != 0) &&
   12d34:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12d38:	f893 30a8 	ldrb.w	r3, [r3, #168]	; 0xa8
   12d3c:	f003 0303 	and.w	r3, r3, #3
   12d40:	2b01      	cmp	r3, #1
   12d42:	d011      	beq.n	12d68 <isr_rx_conn_pkt_ctrl+0x3bc>
		_radio.conn_curr->llcp_version.rx = 1;
   12d44:	4a9c      	ldr	r2, [pc, #624]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12d46:	f8d2 1110 	ldr.w	r1, [r2, #272]	; 0x110
   12d4a:	f891 30a8 	ldrb.w	r3, [r1, #168]	; 0xa8
   12d4e:	f043 0302 	orr.w	r3, r3, #2
   12d52:	f881 30a8 	strb.w	r3, [r1, #168]	; 0xa8
		if (_radio.conn_curr->llcp_version.tx == 0) {
   12d56:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   12d5a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
   12d5e:	f012 0f01 	tst.w	r2, #1
   12d62:	d009      	beq.n	12d78 <isr_rx_conn_pkt_ctrl+0x3cc>
	u8_t nack = 0;
   12d64:	2400      	movs	r4, #0
   12d66:	e65b      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			*rx_enqueue = 1;
   12d68:	703b      	strb	r3, [r7, #0]
			_radio.conn_curr->procedure_expire = 0;
   12d6a:	4b93      	ldr	r3, [pc, #588]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12d6c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12d70:	2200      	movs	r2, #0
   12d72:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   12d76:	e7e5      	b.n	12d44 <isr_rx_conn_pkt_ctrl+0x398>
			_radio.conn_curr->llcp_version.tx = 1;
   12d78:	f042 0201 	orr.w	r2, r2, #1
   12d7c:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
			version_ind_send(_radio.conn_curr);
   12d80:	4b8d      	ldr	r3, [pc, #564]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12d82:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   12d86:	f7ff f90b 	bl	11fa0 <version_ind_send>
	u8_t nack = 0;
   12d8a:	2400      	movs	r4, #0
   12d8c:	e648      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->pause_rx = 0;
   12d8e:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12d92:	f36f 0382 	bfc	r3, #2, #1
   12d96:	f885 30f8 	strb.w	r3, [r5, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   12d9a:	4b87      	ldr	r3, [pc, #540]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12d9c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   12da0:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   12da4:	f36f 01c3 	bfc	r1, #3, #1
   12da8:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   12dac:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   12db0:	2400      	movs	r4, #0
   12db2:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		*rx_enqueue = 1;
   12db6:	2301      	movs	r3, #1
   12db8:	703b      	strb	r3, [r7, #0]
		break;
   12dba:	e631      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		if (_radio.conn_upd && (_radio.conn_upd != _radio.conn_curr)) {
   12dbc:	4a7e      	ldr	r2, [pc, #504]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12dbe:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   12dc2:	b142      	cbz	r2, 12dd6 <isr_rx_conn_pkt_ctrl+0x42a>
   12dc4:	4295      	cmp	r5, r2
   12dc6:	d006      	beq.n	12dd6 <isr_rx_conn_pkt_ctrl+0x42a>
			reject_ext_ind_send(_radio.conn_curr,
   12dc8:	2220      	movs	r2, #32
   12dca:	210f      	movs	r1, #15
   12dcc:	4628      	mov	r0, r5
   12dce:	f7fe faa5 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   12dd2:	2400      	movs	r4, #0
			break;
   12dd4:	e624      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		if (!_radio.conn_curr->role) {
   12dd6:	2b00      	cmp	r3, #0
   12dd8:	f2c0 80bc 	blt.w	12f54 <isr_rx_conn_pkt_ctrl+0x5a8>
			if ((conn->llcp_conn_param.req !=
   12ddc:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
					conn->llcp_conn_param.ack) &&
   12de0:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
			if ((conn->llcp_conn_param.req !=
   12de4:	429a      	cmp	r2, r3
   12de6:	d008      	beq.n	12dfa <isr_rx_conn_pkt_ctrl+0x44e>
			    ((conn->llcp_conn_param.state ==
   12de8:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.ack) &&
   12dec:	f013 0307 	ands.w	r3, r3, #7
   12df0:	d016      	beq.n	12e20 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_REQ) ||
   12df2:	2b04      	cmp	r3, #4
   12df4:	d014      	beq.n	12e20 <isr_rx_conn_pkt_ctrl+0x474>
			      LLCP_CPR_STATE_RSP_WAIT) ||
   12df6:	2b05      	cmp	r3, #5
   12df8:	d012      	beq.n	12e20 <isr_rx_conn_pkt_ctrl+0x474>
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12dfa:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   12dfe:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   12e02:	429a      	cmp	r2, r3
   12e04:	d105      	bne.n	12e12 <isr_rx_conn_pkt_ctrl+0x466>
				   (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   12e06:	f895 20f4 	ldrb.w	r2, [r5, #244]	; 0xf4
   12e0a:	f895 30f5 	ldrb.w	r3, [r5, #245]	; 0xf5
			} else if ((conn->llcp_req != conn->llcp_ack) ||
   12e0e:	429a      	cmp	r2, r3
   12e10:	d00d      	beq.n	12e2e <isr_rx_conn_pkt_ctrl+0x482>
				reject_ext_ind_send(_radio.conn_curr,
   12e12:	222a      	movs	r2, #42	; 0x2a
   12e14:	210f      	movs	r1, #15
   12e16:	4628      	mov	r0, r5
   12e18:	f7fe fa80 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   12e1c:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12e1e:	e5ff      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   12e20:	2223      	movs	r2, #35	; 0x23
   12e22:	210f      	movs	r1, #15
   12e24:	4628      	mov	r0, r5
   12e26:	f7fe fa79 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   12e2a:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   12e2c:	e5f8      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
				if ((cpr->interval_min < 6) ||
   12e2e:	89a0      	ldrh	r0, [r4, #12]
   12e30:	b282      	uxth	r2, r0
   12e32:	2a05      	cmp	r2, #5
   12e34:	d970      	bls.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12e36:	89e3      	ldrh	r3, [r4, #14]
				if ((cpr->interval_min < 6) ||
   12e38:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12e3c:	d86c      	bhi.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->interval_max > 3200) ||
   12e3e:	429a      	cmp	r2, r3
   12e40:	d86a      	bhi.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->latency > 499) ||
   12e42:	8a22      	ldrh	r2, [r4, #16]
				    (cpr->interval_min > cpr->interval_max) ||
   12e44:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12e48:	d266      	bcs.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12e4a:	8a61      	ldrh	r1, [r4, #18]
				    (cpr->latency > 499) ||
   12e4c:	2909      	cmp	r1, #9
   12e4e:	d963      	bls.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->timeout < 10) ||
   12e50:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   12e54:	d860      	bhi.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				     ((cpr->latency + 1) *
   12e56:	fb02 3203 	mla	r2, r2, r3, r3
				    (cpr->timeout > 3200) ||
   12e5a:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   12e5e:	da5b      	bge.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				    (cpr->preferred_periodicity >
   12e60:	7d22      	ldrb	r2, [r4, #20]
				      cpr->interval_max)) ||
   12e62:	4293      	cmp	r3, r2
   12e64:	d358      	bcc.n	12f18 <isr_rx_conn_pkt_ctrl+0x56c>
				conn->llcp_conn_param.interval = cpr->interval_min;
   12e66:	f8a5 00c4 	strh.w	r0, [r5, #196]	; 0xc4
				conn->llcp_conn_param.latency =	cpr->latency;
   12e6a:	8a23      	ldrh	r3, [r4, #16]
   12e6c:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
				conn->llcp_conn_param.timeout =	cpr->timeout;
   12e70:	8a62      	ldrh	r2, [r4, #18]
   12e72:	b293      	uxth	r3, r2
   12e74:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
					cpr->preferred_periodicity;
   12e78:	7d22      	ldrb	r2, [r4, #20]
				conn->llcp_conn_param.preferred_periodicity =
   12e7a:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
					cpr->reference_conn_event_count;
   12e7e:	f8b4 2015 	ldrh.w	r2, [r4, #21]
				conn->llcp_conn_param.reference_conn_event_count =
   12e82:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
				conn->llcp_conn_param.offset0 =	cpr->offset0;
   12e86:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12e8a:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
				conn->llcp_conn_param.offset1 =	cpr->offset1;
   12e8e:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12e92:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
				conn->llcp_conn_param.offset2 =	cpr->offset2;
   12e96:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12e9a:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
				conn->llcp_conn_param.offset3 =	cpr->offset3;
   12e9e:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12ea2:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
				conn->llcp_conn_param.offset4 =	cpr->offset4;
   12ea6:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   12eaa:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
				conn->llcp_conn_param.offset5 =	cpr->offset5;
   12eae:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   12eb2:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
				     conn->conn_interval) ||
   12eb6:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   12eba:	6a6a      	ldr	r2, [r5, #36]	; 0x24
				if ((conn->llcp_conn_param.interval !=
   12ebc:	4291      	cmp	r1, r2
   12ebe:	d10f      	bne.n	12ee0 <isr_rx_conn_pkt_ctrl+0x534>
				    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   12ec0:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   12ec2:	f240 42e2 	movw	r2, #1250	; 0x4e2
   12ec6:	fb02 f201 	mul.w	r2, r2, r1
   12eca:	f242 7110 	movw	r1, #10000	; 0x2710
   12ece:	fb01 2303 	mla	r3, r1, r3, r2
   12ed2:	3b01      	subs	r3, #1
   12ed4:	fb93 f3f2 	sdiv	r3, r3, r2
   12ed8:	b29b      	uxth	r3, r3
				     conn->supervision_reload)) {
   12eda:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
				     conn->latency) ||
   12edc:	4293      	cmp	r3, r2
   12ede:	d02c      	beq.n	12f3a <isr_rx_conn_pkt_ctrl+0x58e>
					if (conn->pause_tx) {
   12ee0:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   12ee4:	f013 0f08 	tst.w	r3, #8
   12ee8:	d01d      	beq.n	12f26 <isr_rx_conn_pkt_ctrl+0x57a>
						conn->llcp_conn_param.state =
   12eea:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12eee:	2202      	movs	r2, #2
   12ef0:	f362 0302 	bfi	r3, r2, #0, #3
   12ef4:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.ack--;
   12ef8:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   12efc:	3b01      	subs	r3, #1
   12efe:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
				if (_radio.conn_upd == 0) {
   12f02:	4b2d      	ldr	r3, [pc, #180]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12f04:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   12f08:	2b00      	cmp	r3, #0
   12f0a:	f040 8580 	bne.w	13a0e <isr_rx_conn_pkt_ctrl+0x1062>
					_radio.conn_upd = conn;
   12f0e:	4b2a      	ldr	r3, [pc, #168]	; (12fb8 <isr_rx_conn_pkt_ctrl+0x60c>)
   12f10:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   12f14:	2400      	movs	r4, #0
   12f16:	e583      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
					reject_ext_ind_send(conn,
   12f18:	221e      	movs	r2, #30
   12f1a:	210f      	movs	r1, #15
   12f1c:	4628      	mov	r0, r5
   12f1e:	f7fe f9fd 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   12f22:	2400      	movs	r4, #0
					break;
   12f24:	e57c      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
						*rx_enqueue = 1;
   12f26:	2301      	movs	r3, #1
   12f28:	703b      	strb	r3, [r7, #0]
						conn->llcp_conn_param.state =
   12f2a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   12f2e:	2203      	movs	r2, #3
   12f30:	f362 0302 	bfi	r3, r2, #0, #3
   12f34:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12f38:	e7de      	b.n	12ef8 <isr_rx_conn_pkt_ctrl+0x54c>
					conn->llcp_conn_param.status = 0;
   12f3a:	2300      	movs	r3, #0
   12f3c:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
					conn->llcp_conn_param.cmd = 0;
   12f40:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
					conn->llcp_conn_param.state =
   12f44:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   12f48:	2201      	movs	r2, #1
   12f4a:	f362 0302 	bfi	r3, r2, #0, #3
   12f4e:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   12f52:	e7d1      	b.n	12ef8 <isr_rx_conn_pkt_ctrl+0x54c>
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12f54:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12f58:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		} else if ((_radio.conn_curr->llcp_conn_param.req ==
   12f5c:	429a      	cmp	r2, r3
   12f5e:	d007      	beq.n	12f70 <isr_rx_conn_pkt_ctrl+0x5c4>
			   (_radio.conn_curr->llcp_conn_param.state ==
   12f60:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
			    _radio.conn_curr->llcp_conn_param.ack) ||
   12f64:	f013 0307 	ands.w	r3, r3, #7
   12f68:	d002      	beq.n	12f70 <isr_rx_conn_pkt_ctrl+0x5c4>
			    LLCP_CPR_STATE_REQ) ||
   12f6a:	2b04      	cmp	r3, #4
   12f6c:	f040 8089 	bne.w	13082 <isr_rx_conn_pkt_ctrl+0x6d6>
			if ((cpr->interval_min < 6) ||
   12f70:	89a1      	ldrh	r1, [r4, #12]
   12f72:	b28a      	uxth	r2, r1
   12f74:	2a05      	cmp	r2, #5
   12f76:	d917      	bls.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12f78:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   12f7a:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   12f7e:	d813      	bhi.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->interval_max > 3200) ||
   12f80:	429a      	cmp	r2, r3
   12f82:	d811      	bhi.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->latency > 499) ||
   12f84:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   12f86:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   12f8a:	d20d      	bcs.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12f8c:	8a60      	ldrh	r0, [r4, #18]
			    (cpr->latency > 499) ||
   12f8e:	2809      	cmp	r0, #9
   12f90:	d90a      	bls.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12f92:	f5b0 6f48 	cmp.w	r0, #3200	; 0xc80
   12f96:	d807      	bhi.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   12f98:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   12f9c:	ebb2 0f80 	cmp.w	r2, r0, lsl #2
   12fa0:	da02      	bge.n	12fa8 <isr_rx_conn_pkt_ctrl+0x5fc>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   12fa2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   12fa4:	4293      	cmp	r3, r2
   12fa6:	d209      	bcs.n	12fbc <isr_rx_conn_pkt_ctrl+0x610>
				reject_ext_ind_send(conn,
   12fa8:	221e      	movs	r2, #30
   12faa:	210f      	movs	r1, #15
   12fac:	4628      	mov	r0, r5
   12fae:	f7fe f9b5 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   12fb2:	2400      	movs	r4, #0
				break;
   12fb4:	e534      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   12fb6:	bf00      	nop
   12fb8:	20000f84 	.word	0x20000f84
			conn->llcp_conn_param.interval = cpr->interval_min;
   12fbc:	f8a5 10c4 	strh.w	r1, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   12fc0:	8a23      	ldrh	r3, [r4, #16]
   12fc2:	f8a5 30c6 	strh.w	r3, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   12fc6:	8a62      	ldrh	r2, [r4, #18]
   12fc8:	b293      	uxth	r3, r2
   12fca:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   12fce:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   12fd0:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   12fd4:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   12fd8:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   12fdc:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   12fe0:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   12fe4:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   12fe8:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   12fec:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   12ff0:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   12ff4:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   12ff8:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   12ffc:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13000:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13004:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13008:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			     conn->conn_interval) ||
   1300c:	f8d5 10c4 	ldr.w	r1, [r5, #196]	; 0xc4
   13010:	6a6a      	ldr	r2, [r5, #36]	; 0x24
			if ((conn->llcp_conn_param.interval !=
   13012:	4291      	cmp	r1, r2
   13014:	d013      	beq.n	1303e <isr_rx_conn_pkt_ctrl+0x692>
				*rx_enqueue = 1;
   13016:	2301      	movs	r3, #1
   13018:	703b      	strb	r3, [r7, #0]
				conn->llcp_conn_param.state =
   1301a:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   1301e:	2203      	movs	r2, #3
   13020:	f362 0302 	bfi	r3, r2, #0, #3
   13024:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
			conn->llcp_conn_param.ack--;
   13028:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
   1302c:	3b01      	subs	r3, #1
   1302e:	f885 30c1 	strb.w	r3, [r5, #193]	; 0xc1
			if (_radio.conn_upd == 0) {
   13032:	4bcb      	ldr	r3, [pc, #812]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13034:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   13038:	b1f3      	cbz	r3, 13078 <isr_rx_conn_pkt_ctrl+0x6cc>
	u8_t nack = 0;
   1303a:	2400      	movs	r4, #0
   1303c:	e4f0      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			    (RADIO_CONN_EVENTS(conn->llcp_conn_param.timeout *
   1303e:	8ca9      	ldrh	r1, [r5, #36]	; 0x24
   13040:	f240 42e2 	movw	r2, #1250	; 0x4e2
   13044:	fb02 f201 	mul.w	r2, r2, r1
   13048:	f242 7110 	movw	r1, #10000	; 0x2710
   1304c:	fb01 2303 	mla	r3, r1, r3, r2
   13050:	3b01      	subs	r3, #1
   13052:	fb93 f3f2 	sdiv	r3, r3, r2
   13056:	b29b      	uxth	r3, r3
			     conn->supervision_reload)) {
   13058:	8fea      	ldrh	r2, [r5, #62]	; 0x3e
			    (conn->llcp_conn_param.latency != conn->latency) ||
   1305a:	4293      	cmp	r3, r2
   1305c:	d1db      	bne.n	13016 <isr_rx_conn_pkt_ctrl+0x66a>
				conn->llcp_conn_param.status = 0;
   1305e:	2300      	movs	r3, #0
   13060:	f885 30c3 	strb.w	r3, [r5, #195]	; 0xc3
				conn->llcp_conn_param.cmd = 0;
   13064:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
				conn->llcp_conn_param.state =
   13068:	f003 03f7 	and.w	r3, r3, #247	; 0xf7
   1306c:	2201      	movs	r2, #1
   1306e:	f362 0302 	bfi	r3, r2, #0, #3
   13072:	f885 30c2 	strb.w	r3, [r5, #194]	; 0xc2
   13076:	e7d7      	b.n	13028 <isr_rx_conn_pkt_ctrl+0x67c>
				_radio.conn_upd = conn;
   13078:	4bb9      	ldr	r3, [pc, #740]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1307a:	f8c3 5184 	str.w	r5, [r3, #388]	; 0x184
	u8_t nack = 0;
   1307e:	2400      	movs	r4, #0
   13080:	e4ce      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			LL_ASSERT(0);
   13082:	4040      	eors	r0, r0
   13084:	f380 8811 	msr	BASEPRI, r0
   13088:	f04f 0004 	mov.w	r0, #4
   1308c:	df02      	svc	2
		if (!_radio.conn_curr->role &&
   1308e:	2b00      	cmp	r3, #0
   13090:	f2c0 84c0 	blt.w	13a14 <isr_rx_conn_pkt_ctrl+0x1068>
		    (_radio.conn_curr->llcp_conn_param.req !=
   13094:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
		     _radio.conn_curr->llcp_conn_param.ack) &&
   13098:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
		if (!_radio.conn_curr->role &&
   1309c:	429a      	cmp	r2, r3
   1309e:	f000 84bc 	beq.w	13a1a <isr_rx_conn_pkt_ctrl+0x106e>
		    (_radio.conn_curr->llcp_conn_param.state ==
   130a2:	f895 30c2 	ldrb.w	r3, [r5, #194]	; 0xc2
   130a6:	f003 0307 	and.w	r3, r3, #7
		     _radio.conn_curr->llcp_conn_param.ack) &&
   130aa:	2b04      	cmp	r3, #4
   130ac:	d001      	beq.n	130b2 <isr_rx_conn_pkt_ctrl+0x706>
	u8_t nack = 0;
   130ae:	2400      	movs	r4, #0
   130b0:	e4b6      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			if ((cpr->interval_min < 6) ||
   130b2:	89a2      	ldrh	r2, [r4, #12]
   130b4:	2a05      	cmp	r2, #5
   130b6:	d917      	bls.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   130b8:	89e3      	ldrh	r3, [r4, #14]
			if ((cpr->interval_min < 6) ||
   130ba:	f5b3 6f48 	cmp.w	r3, #3200	; 0xc80
   130be:	d813      	bhi.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->interval_max > 3200) ||
   130c0:	429a      	cmp	r2, r3
   130c2:	d811      	bhi.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->latency > 499) ||
   130c4:	8a22      	ldrh	r2, [r4, #16]
			    (cpr->interval_min > cpr->interval_max) ||
   130c6:	f5b2 7ffa 	cmp.w	r2, #500	; 0x1f4
   130ca:	d20d      	bcs.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   130cc:	8a61      	ldrh	r1, [r4, #18]
			    (cpr->latency > 499) ||
   130ce:	2909      	cmp	r1, #9
   130d0:	d90a      	bls.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   130d2:	f5b1 6f48 	cmp.w	r1, #3200	; 0xc80
   130d6:	d807      	bhi.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    ((cpr->timeout * 4) <= ((cpr->latency + 1) *
   130d8:	fb02 3203 	mla	r2, r2, r3, r3
			    (cpr->timeout < 10) || (cpr->timeout > 3200) ||
   130dc:	ebb2 0f81 	cmp.w	r2, r1, lsl #2
   130e0:	da02      	bge.n	130e8 <isr_rx_conn_pkt_ctrl+0x73c>
			    (cpr->preferred_periodicity > cpr->interval_max)) {
   130e2:	7d22      	ldrb	r2, [r4, #20]
						    cpr->interval_max)) ||
   130e4:	4293      	cmp	r3, r2
   130e6:	d206      	bcs.n	130f6 <isr_rx_conn_pkt_ctrl+0x74a>
				reject_ext_ind_send(conn,
   130e8:	221e      	movs	r2, #30
   130ea:	2110      	movs	r1, #16
   130ec:	4628      	mov	r0, r5
   130ee:	f7fe f915 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   130f2:	2400      	movs	r4, #0
				break;
   130f4:	e494      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->procedure_expire = 0;
   130f6:	2300      	movs	r3, #0
   130f8:	f8a5 3044 	strh.w	r3, [r5, #68]	; 0x44
			conn->llcp_conn_param.interval = cpr->interval_min;
   130fc:	89a2      	ldrh	r2, [r4, #12]
   130fe:	f8a5 20c4 	strh.w	r2, [r5, #196]	; 0xc4
			conn->llcp_conn_param.latency =	cpr->latency;
   13102:	8a22      	ldrh	r2, [r4, #16]
   13104:	f8a5 20c6 	strh.w	r2, [r5, #198]	; 0xc6
			conn->llcp_conn_param.timeout =	cpr->timeout;
   13108:	8a62      	ldrh	r2, [r4, #18]
   1310a:	f8a5 20c8 	strh.w	r2, [r5, #200]	; 0xc8
				cpr->preferred_periodicity;
   1310e:	7d22      	ldrb	r2, [r4, #20]
			conn->llcp_conn_param.preferred_periodicity =
   13110:	f885 20ca 	strb.w	r2, [r5, #202]	; 0xca
				cpr->reference_conn_event_count;
   13114:	f8b4 2015 	ldrh.w	r2, [r4, #21]
			conn->llcp_conn_param.reference_conn_event_count =
   13118:	f8a5 20cc 	strh.w	r2, [r5, #204]	; 0xcc
			conn->llcp_conn_param.offset0 =	cpr->offset0;
   1311c:	f8b4 2017 	ldrh.w	r2, [r4, #23]
   13120:	f8a5 20ce 	strh.w	r2, [r5, #206]	; 0xce
			conn->llcp_conn_param.offset1 =	cpr->offset1;
   13124:	f8b4 2019 	ldrh.w	r2, [r4, #25]
   13128:	f8a5 20d0 	strh.w	r2, [r5, #208]	; 0xd0
			conn->llcp_conn_param.offset2 =	cpr->offset2;
   1312c:	f8b4 201b 	ldrh.w	r2, [r4, #27]
   13130:	f8a5 20d2 	strh.w	r2, [r5, #210]	; 0xd2
			conn->llcp_conn_param.offset3 =	cpr->offset3;
   13134:	f8b4 201d 	ldrh.w	r2, [r4, #29]
   13138:	f8a5 20d4 	strh.w	r2, [r5, #212]	; 0xd4
			conn->llcp_conn_param.offset4 =	cpr->offset4;
   1313c:	f8b4 201f 	ldrh.w	r2, [r4, #31]
   13140:	f8a5 20d6 	strh.w	r2, [r5, #214]	; 0xd6
			conn->llcp_conn_param.offset5 =	cpr->offset5;
   13144:	f8b4 2021 	ldrh.w	r2, [r4, #33]	; 0x21
   13148:	f8a5 20d8 	strh.w	r2, [r5, #216]	; 0xd8
			conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP;
   1314c:	f895 20c2 	ldrb.w	r2, [r5, #194]	; 0xc2
   13150:	2101      	movs	r1, #1
   13152:	f361 0202 	bfi	r2, r1, #0, #3
   13156:	f885 20c2 	strb.w	r2, [r5, #194]	; 0xc2
	u8_t nack = 0;
   1315a:	461c      	mov	r4, r3
   1315c:	e460      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	} else if (_radio.conn_curr->llcp_phy.ack !=
   1315e:	4b80      	ldr	r3, [pc, #512]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13160:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13164:	f893 10f5 	ldrb.w	r1, [r3, #245]	; 0xf5
		   _radio.conn_curr->llcp_phy.req) {
   13168:	f893 20f4 	ldrb.w	r2, [r3, #244]	; 0xf4
	} else if (_radio.conn_curr->llcp_phy.ack !=
   1316c:	4291      	cmp	r1, r2
   1316e:	d112      	bne.n	13196 <isr_rx_conn_pkt_ctrl+0x7ea>
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13170:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
		   _radio.conn_curr->llcp_conn_param.req) {
   13174:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
	} else if (_radio.conn_curr->llcp_conn_param.ack !=
   13178:	4291      	cmp	r1, r2
   1317a:	d14c      	bne.n	13216 <isr_rx_conn_pkt_ctrl+0x86a>
	} else if (_radio.conn_curr->llcp_length.ack !=
   1317c:	f893 10e9 	ldrb.w	r1, [r3, #233]	; 0xe9
		   _radio.conn_curr->llcp_length.req) {
   13180:	f893 20e8 	ldrb.w	r2, [r3, #232]	; 0xe8
	} else if (_radio.conn_curr->llcp_length.ack !=
   13184:	4291      	cmp	r1, r2
   13186:	f000 80ef 	beq.w	13368 <isr_rx_conn_pkt_ctrl+0x9bc>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_LENGTH_REQ) {
   1318a:	7b21      	ldrb	r1, [r4, #12]
   1318c:	2914      	cmp	r1, #20
   1318e:	f000 80cb 	beq.w	13328 <isr_rx_conn_pkt_ctrl+0x97c>
	u8_t nack = 0;
   13192:	2400      	movs	r4, #0
   13194:	e444      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode == PDU_DATA_LLCTRL_TYPE_PHY_REQ) {
   13196:	7b23      	ldrb	r3, [r4, #12]
   13198:	2b16      	cmp	r3, #22
   1319a:	d001      	beq.n	131a0 <isr_rx_conn_pkt_ctrl+0x7f4>
	u8_t nack = 0;
   1319c:	2400      	movs	r4, #0
   1319e:	e43f      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		if (rej_ext_ind->error_code != 0x23) {
   131a0:	7b63      	ldrb	r3, [r4, #13]
   131a2:	2b23      	cmp	r3, #35	; 0x23
   131a4:	d017      	beq.n	131d6 <isr_rx_conn_pkt_ctrl+0x82a>
			_radio.conn_curr->llcp_phy.ack =
   131a6:	4b6e      	ldr	r3, [pc, #440]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   131a8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_phy.req;
   131ac:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
			_radio.conn_curr->llcp_phy.ack =
   131b0:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   131b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   131b8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   131bc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
			_radio.conn_curr->phy_tx_time =
   131c0:	f892 0039 	ldrb.w	r0, [r2, #57]	; 0x39
   131c4:	f361 0002 	bfi	r0, r1, #0, #3
   131c8:	f882 0039 	strb.w	r0, [r2, #57]	; 0x39
			_radio.conn_curr->procedure_expire = 0;
   131cc:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   131d0:	2200      	movs	r2, #0
   131d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (!_radio.conn_curr->llcp_phy.cmd) {
   131d6:	4b62      	ldr	r3, [pc, #392]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   131d8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   131dc:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   131e0:	f013 0f02 	tst.w	r3, #2
   131e4:	f000 841c 	beq.w	13a20 <isr_rx_conn_pkt_ctrl+0x1074>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   131e8:	230c      	movs	r3, #12
   131ea:	7123      	strb	r3, [r4, #4]
		p->status = rej_ext_ind->error_code;
   131ec:	7b63      	ldrb	r3, [r4, #13]
   131ee:	72e3      	strb	r3, [r4, #11]
		p->tx = _radio.conn_curr->phy_tx;
   131f0:	4a5b      	ldr	r2, [pc, #364]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   131f2:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   131f6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   131fa:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   131fe:	7323      	strb	r3, [r4, #12]
		p->rx = _radio.conn_curr->phy_rx;
   13200:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13204:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   13208:	f3c3 0302 	ubfx	r3, r3, #0, #3
   1320c:	7363      	strb	r3, [r4, #13]
		*rx_enqueue = 1;
   1320e:	2301      	movs	r3, #1
   13210:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   13212:	2400      	movs	r4, #0
   13214:	e404      	b.n	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	if (rej_ext_ind->reject_opcode != PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ) {
   13216:	7b23      	ldrb	r3, [r4, #12]
   13218:	2b0f      	cmp	r3, #15
   1321a:	d002      	beq.n	13222 <isr_rx_conn_pkt_ctrl+0x876>
	u8_t nack = 0;
   1321c:	2400      	movs	r4, #0
   1321e:	f7ff bbff 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	conn = _radio.conn_curr;
   13222:	4b4f      	ldr	r3, [pc, #316]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   13224:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	if (!conn->role && (rej_ext_ind->error_code == 0x1a)) {
   13228:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1322c:	2a00      	cmp	r2, #0
   1322e:	db02      	blt.n	13236 <isr_rx_conn_pkt_ctrl+0x88a>
   13230:	7b62      	ldrb	r2, [r4, #13]
   13232:	2a1a      	cmp	r2, #26
   13234:	d037      	beq.n	132a6 <isr_rx_conn_pkt_ctrl+0x8fa>
	else if (rej_ext_ind->error_code != 0x23) {
   13236:	7b62      	ldrb	r2, [r4, #13]
   13238:	2a23      	cmp	r2, #35	; 0x23
   1323a:	d012      	beq.n	13262 <isr_rx_conn_pkt_ctrl+0x8b6>
		LL_ASSERT(_radio.conn_upd == conn);
   1323c:	4a48      	ldr	r2, [pc, #288]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1323e:	f8d2 2184 	ldr.w	r2, [r2, #388]	; 0x184
   13242:	4293      	cmp	r3, r2
   13244:	d166      	bne.n	13314 <isr_rx_conn_pkt_ctrl+0x968>
		_radio.conn_upd = NULL;
   13246:	2200      	movs	r2, #0
   13248:	4945      	ldr	r1, [pc, #276]	; (13360 <isr_rx_conn_pkt_ctrl+0x9b4>)
   1324a:	f8c1 2184 	str.w	r2, [r1, #388]	; 0x184
			conn->llcp_conn_param.req;
   1324e:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
		conn->llcp_conn_param.ack =
   13252:	f883 10c1 	strb.w	r1, [r3, #193]	; 0xc1
		conn->procedure_expire = 0;
   13256:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		if (conn->role) {
   1325a:	f993 201d 	ldrsb.w	r2, [r3, #29]
   1325e:	2a00      	cmp	r2, #0
   13260:	db5e      	blt.n	13320 <isr_rx_conn_pkt_ctrl+0x974>
	if (!conn->llcp_conn_param.cmd) {
   13262:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   13266:	f012 0f08 	tst.w	r2, #8
   1326a:	f000 83dc 	beq.w	13a26 <isr_rx_conn_pkt_ctrl+0x107a>
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   1326e:	2208      	movs	r2, #8
   13270:	7122      	strb	r2, [r4, #4]
	cp->status = rej_ext_ind->error_code;
   13272:	7b62      	ldrb	r2, [r4, #13]
   13274:	72e2      	strb	r2, [r4, #11]
	cp->interval = conn->conn_interval;
   13276:	8c9a      	ldrh	r2, [r3, #36]	; 0x24
   13278:	81a2      	strh	r2, [r4, #12]
	cp->latency = conn->latency;
   1327a:	8cda      	ldrh	r2, [r3, #38]	; 0x26
   1327c:	81e2      	strh	r2, [r4, #14]
	cp->timeout = conn->supervision_reload *
   1327e:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
		      conn->conn_interval * 125 / 1000;
   13280:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
	cp->timeout = conn->supervision_reload *
   13282:	fb03 f302 	mul.w	r3, r3, r2
		      conn->conn_interval * 125 / 1000;
   13286:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   1328a:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   1328e:	4a35      	ldr	r2, [pc, #212]	; (13364 <isr_rx_conn_pkt_ctrl+0x9b8>)
   13290:	fb82 1203 	smull	r1, r2, r2, r3
   13294:	17db      	asrs	r3, r3, #31
	cp->timeout = conn->supervision_reload *
   13296:	ebc3 1392 	rsb	r3, r3, r2, lsr #6
   1329a:	8223      	strh	r3, [r4, #16]
	*rx_enqueue = 1;
   1329c:	2301      	movs	r3, #1
   1329e:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   132a0:	2400      	movs	r4, #0
   132a2:	f7ff bbbd 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   132a6:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   132aa:	f893 0075 	ldrb.w	r0, [r3, #117]	; 0x75
   132ae:	4282      	cmp	r2, r0
   132b0:	d12a      	bne.n	13308 <isr_rx_conn_pkt_ctrl+0x95c>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   132b2:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   132b6:	2105      	movs	r1, #5
   132b8:	f361 0202 	bfi	r2, r1, #0, #3
   132bc:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   132c0:	2501      	movs	r5, #1
   132c2:	f883 5088 	strb.w	r5, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   132c6:	2400      	movs	r4, #0
   132c8:	f8c3 4084 	str.w	r4, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   132cc:	f8b3 10c4 	ldrh.w	r1, [r3, #196]	; 0xc4
   132d0:	f8a3 107a 	strh.w	r1, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   132d4:	f8b3 10c6 	ldrh.w	r1, [r3, #198]	; 0xc6
   132d8:	f8a3 107c 	strh.w	r1, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   132dc:	f8b3 10c8 	ldrh.w	r1, [r3, #200]	; 0xc8
   132e0:	f8a3 107e 	strh.w	r1, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   132e4:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   132e8:	f365 0101 	bfi	r1, r5, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   132ec:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   132f0:	406a      	eors	r2, r5
   132f2:	f362 0182 	bfi	r1, r2, #2, #1
   132f6:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   132fa:	f883 5076 	strb.w	r5, [r3, #118]	; 0x76
		conn->llcp_ack--;
   132fe:	3801      	subs	r0, #1
   13300:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
   13304:	f7ff bb8c 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   13308:	4040      	eors	r0, r0
   1330a:	f380 8811 	msr	BASEPRI, r0
   1330e:	f04f 0004 	mov.w	r0, #4
   13312:	df02      	svc	2
		LL_ASSERT(_radio.conn_upd == conn);
   13314:	4040      	eors	r0, r0
   13316:	f380 8811 	msr	BASEPRI, r0
   1331a:	f04f 0004 	mov.w	r0, #4
   1331e:	df02      	svc	2
			    conn->llcp_conn_param.ticks_to_offset_next;
   13320:	f8d3 20e4 	ldr.w	r2, [r3, #228]	; 0xe4
			conn->slave.ticks_to_offset =
   13324:	671a      	str	r2, [r3, #112]	; 0x70
   13326:	e79c      	b.n	13262 <isr_rx_conn_pkt_ctrl+0x8b6>
		conn->llcp_length.ack = conn->llcp_length.req;
   13328:	f883 20e9 	strb.w	r2, [r3, #233]	; 0xe9
		conn->procedure_expire = 0;
   1332c:	2200      	movs	r2, #0
   1332e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
		conn->pause_tx = 0;
   13332:	f893 10f8 	ldrb.w	r1, [r3, #248]	; 0xf8
   13336:	f362 01c3 	bfi	r1, r2, #3, #1
   1333a:	f883 10f8 	strb.w	r1, [r3, #248]	; 0xf8
		pdu_data_rx->len = offsetof(struct pdu_data_llctrl,
   1333e:	2109      	movs	r1, #9
   13340:	7261      	strb	r1, [r4, #9]
		pdu_data_rx->payload.llctrl.opcode =
   13342:	2115      	movs	r1, #21
   13344:	72e1      	strb	r1, [r4, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   13346:	8e19      	ldrh	r1, [r3, #48]	; 0x30
   13348:	81a1      	strh	r1, [r4, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   1334a:	8dd9      	ldrh	r1, [r3, #46]	; 0x2e
   1334c:	8221      	strh	r1, [r4, #16]
		lr->max_rx_time = conn->max_rx_time;
   1334e:	8ed9      	ldrh	r1, [r3, #54]	; 0x36
   13350:	81e1      	strh	r1, [r4, #14]
		lr->max_tx_time = conn->max_tx_time;
   13352:	8e9b      	ldrh	r3, [r3, #52]	; 0x34
   13354:	8263      	strh	r3, [r4, #18]
		*rx_enqueue = 1;
   13356:	2301      	movs	r3, #1
   13358:	703b      	strb	r3, [r7, #0]
	u8_t nack = 0;
   1335a:	4614      	mov	r4, r2
   1335c:	f7ff bb60 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13360:	20000f84 	.word	0x20000f84
   13364:	10624dd3 	.word	0x10624dd3
		switch (rej_ext_ind->reject_opcode) {
   13368:	7b22      	ldrb	r2, [r4, #12]
   1336a:	2a03      	cmp	r2, #3
   1336c:	f040 835e 	bne.w	13a2c <isr_rx_conn_pkt_ctrl+0x1080>
			_radio.conn_curr->pause_rx = 0;
   13370:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13374:	f36f 0282 	bfc	r2, #2, #1
   13378:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1337c:	4bcb      	ldr	r3, [pc, #812]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   1337e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13382:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13386:	f36f 01c3 	bfc	r1, #3, #1
   1338a:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
			_radio.conn_curr->procedure_expire = 0;
   1338e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13392:	2300      	movs	r3, #0
   13394:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
			pdu_rx->payload.llctrl.opcode =
   13398:	220d      	movs	r2, #13
   1339a:	72e2      	strb	r2, [r4, #11]
				rej_ext_ind->error_code;
   1339c:	7b62      	ldrb	r2, [r4, #13]
			pdu_rx->payload.llctrl.ctrldata.reject_ind.error_code =
   1339e:	7322      	strb	r2, [r4, #12]
			*rx_enqueue = 1;
   133a0:	2201      	movs	r2, #1
   133a2:	703a      	strb	r2, [r7, #0]
	u8_t nack = 0;
   133a4:	461c      	mov	r4, r3
   133a6:	f7ff bb3b 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		ping_resp_send(_radio.conn_curr);
   133aa:	4628      	mov	r0, r5
   133ac:	f7fd ff76 	bl	1129c <ping_resp_send>
	u8_t nack = 0;
   133b0:	2400      	movs	r4, #0
		break;
   133b2:	f7ff bb35 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		_radio.conn_curr->procedure_expire = 0;
   133b6:	2400      	movs	r4, #0
   133b8:	f8a5 4044 	strh.w	r4, [r5, #68]	; 0x44
		break;
   133bc:	f7ff bb30 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_length.req !=
   133c0:	f895 30e8 	ldrb.w	r3, [r5, #232]	; 0xe8
			   _radio.conn_curr->llcp_length.ack) {
   133c4:	f895 20e9 	ldrb.w	r2, [r5, #233]	; 0xe9
		} else if (_radio.conn_curr->llcp_length.req !=
   133c8:	4293      	cmp	r3, r2
   133ca:	d014      	beq.n	133f6 <isr_rx_conn_pkt_ctrl+0xa4a>
			_radio.conn_curr->llcp_length.ack =
   133cc:	f885 30e9 	strb.w	r3, [r5, #233]	; 0xe9
			_radio.conn_curr->pause_tx = 0;
   133d0:	4bb6      	ldr	r3, [pc, #728]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   133d2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133d6:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   133da:	f36f 02c3 	bfc	r2, #3, #1
   133de:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			*rx_enqueue = 1;
   133e2:	2301      	movs	r3, #1
   133e4:	703b      	strb	r3, [r7, #0]
		_radio.conn_curr->procedure_expire = 0;
   133e6:	4bb1      	ldr	r3, [pc, #708]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   133e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   133ec:	2400      	movs	r4, #0
   133ee:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
		break;
   133f2:	f7ff bb15 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		} else if (_radio.conn_curr->llcp_phy.req !=
   133f6:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			   _radio.conn_curr->llcp_phy.ack) {
   133fa:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		} else if (_radio.conn_curr->llcp_phy.req !=
   133fe:	4293      	cmp	r3, r2
   13400:	d02a      	beq.n	13458 <isr_rx_conn_pkt_ctrl+0xaac>
			_radio.conn_curr->llcp_phy.ack =
   13402:	f885 30f5 	strb.w	r3, [r5, #245]	; 0xf5
			_radio.conn_curr->phy_tx_time =
   13406:	49a9      	ldr	r1, [pc, #676]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13408:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
				_radio.conn_curr->phy_tx;
   1340c:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   13410:	f3c2 02c2 	ubfx	r2, r2, #3, #3
			_radio.conn_curr->phy_tx_time =
   13414:	f893 0039 	ldrb.w	r0, [r3, #57]	; 0x39
   13418:	f362 0002 	bfi	r0, r2, #0, #3
   1341c:	f883 0039 	strb.w	r0, [r3, #57]	; 0x39
			if (_radio.conn_curr->llcp_phy.cmd) {
   13420:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13424:	f893 30f7 	ldrb.w	r3, [r3, #247]	; 0xf7
   13428:	f013 0f02 	tst.w	r3, #2
   1342c:	d0db      	beq.n	133e6 <isr_rx_conn_pkt_ctrl+0xa3a>
				radio_pdu_node_rx->hdr.type =
   1342e:	230c      	movs	r3, #12
   13430:	7123      	strb	r3, [r4, #4]
				p->status = 0;
   13432:	2300      	movs	r3, #0
   13434:	72e3      	strb	r3, [r4, #11]
				p->tx = _radio.conn_curr->phy_tx;
   13436:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   1343a:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
   1343e:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   13442:	7323      	strb	r3, [r4, #12]
				p->rx = _radio.conn_curr->phy_rx;
   13444:	f8d1 3110 	ldr.w	r3, [r1, #272]	; 0x110
   13448:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   1344c:	f3c3 0302 	ubfx	r3, r3, #0, #3
   13450:	7363      	strb	r3, [r4, #13]
				*rx_enqueue = 1;
   13452:	2301      	movs	r3, #1
   13454:	703b      	strb	r3, [r7, #0]
   13456:	e7c6      	b.n	133e6 <isr_rx_conn_pkt_ctrl+0xa3a>
			switch (llctrl->ctrldata.unknown_rsp.type) {
   13458:	7b23      	ldrb	r3, [r4, #12]
   1345a:	2b12      	cmp	r3, #18
   1345c:	d0c3      	beq.n	133e6 <isr_rx_conn_pkt_ctrl+0xa3a>
				*rx_enqueue = 1;
   1345e:	2301      	movs	r3, #1
   13460:	703b      	strb	r3, [r7, #0]
				break;
   13462:	e7c0      	b.n	133e6 <isr_rx_conn_pkt_ctrl+0xa3a>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13464:	4b91      	ldr	r3, [pc, #580]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13466:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1346a:	8e01      	ldrh	r1, [r0, #48]	; 0x30
	eff_tx_octets = _radio.conn_curr->max_tx_octets;
   1346c:	8dc5      	ldrh	r5, [r0, #46]	; 0x2e
	eff_rx_time = _radio.conn_curr->max_rx_time;
   1346e:	f8b0 9036 	ldrh.w	r9, [r0, #54]	; 0x36
	eff_tx_time = _radio.conn_curr->max_tx_time;
   13472:	f8b0 8034 	ldrh.w	r8, [r0, #52]	; 0x34
	    ((_radio.conn_curr->llcp_length.req ==
   13476:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
	      _radio.conn_curr->llcp_length.ack) &&
   1347a:	f890 30e9 	ldrb.w	r3, [r0, #233]	; 0xe9
	if (/* Local idle, and Peer request then complete the Peer procedure
   1347e:	429a      	cmp	r2, r3
   13480:	d020      	beq.n	134c4 <isr_rx_conn_pkt_ctrl+0xb18>
	      PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13482:	429a      	cmp	r2, r3
   13484:	d007      	beq.n	13496 <isr_rx_conn_pkt_ctrl+0xaea>
	     ((((_radio.conn_curr->llcp_length.state ==
   13486:	f890 30ea 	ldrb.w	r3, [r0, #234]	; 0xea
		 LLCP_LENGTH_STATE_REQ) ||
   1348a:	f003 0303 	and.w	r3, r3, #3
	      _radio.conn_curr->llcp_length.ack) &&
   1348e:	2b01      	cmp	r3, #1
   13490:	d960      	bls.n	13554 <isr_rx_conn_pkt_ctrl+0xba8>
		PDU_DATA_LLCTRL_TYPE_LENGTH_REQ)) ||
   13492:	2b02      	cmp	r3, #2
   13494:	d062      	beq.n	1355c <isr_rx_conn_pkt_ctrl+0xbb0>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13496:	78f3      	ldrb	r3, [r6, #3]
   13498:	2b15      	cmp	r3, #21
   1349a:	f040 80cb 	bne.w	13634 <isr_rx_conn_pkt_ctrl+0xc88>
	u8_t nack = 0;
   1349e:	2400      	movs	r4, #0
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   134a0:	78f3      	ldrb	r3, [r6, #3]
	if ((PDU_DATA_LLCTRL_TYPE_LENGTH_REQ ==
   134a2:	2b14      	cmp	r3, #20
   134a4:	f47f aabc 	bne.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	     pdu_data_rx->payload.llctrl.opcode) && !nack) {
   134a8:	2c00      	cmp	r4, #0
   134aa:	f47f aab9 	bne.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		length_resp_send(_radio.conn_curr, eff_rx_octets, eff_rx_time,
   134ae:	4b7f      	ldr	r3, [pc, #508]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   134b0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   134b4:	f8cd 8000 	str.w	r8, [sp]
   134b8:	462b      	mov	r3, r5
   134ba:	464a      	mov	r2, r9
   134bc:	f7fd ff0a 	bl	112d4 <length_resp_send>
		break;
   134c0:	f7ff baae 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	     (pdu_data_rx->payload.llctrl.opcode ==
   134c4:	78f4      	ldrb	r4, [r6, #3]
	      _radio.conn_curr->llcp_length.ack) &&
   134c6:	2c14      	cmp	r4, #20
   134c8:	d1db      	bne.n	13482 <isr_rx_conn_pkt_ctrl+0xad6>
		if (lr->max_rx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   134ca:	88b3      	ldrh	r3, [r6, #4]
   134cc:	2b1a      	cmp	r3, #26
   134ce:	d903      	bls.n	134d8 <isr_rx_conn_pkt_ctrl+0xb2c>
			eff_tx_octets = min(lr->max_rx_octets,
   134d0:	8d85      	ldrh	r5, [r0, #44]	; 0x2c
   134d2:	429d      	cmp	r5, r3
   134d4:	bf28      	it	cs
   134d6:	461d      	movcs	r5, r3
		if (lr->max_tx_octets >= RADIO_LL_LENGTH_OCTETS_RX_MIN) {
   134d8:	f8b6 a008 	ldrh.w	sl, [r6, #8]
   134dc:	f1ba 0f1a 	cmp.w	sl, #26
   134e0:	d942      	bls.n	13568 <isr_rx_conn_pkt_ctrl+0xbbc>
			eff_rx_octets = min(lr->max_tx_octets,
   134e2:	f1ba 0f1b 	cmp.w	sl, #27
   134e6:	bf28      	it	cs
   134e8:	f04f 0a1b 	movcs.w	sl, #27
		if (lr->max_rx_time >=
   134ec:	88f3      	ldrh	r3, [r6, #6]
   134ee:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   134f2:	d304      	bcc.n	134fe <isr_rx_conn_pkt_ctrl+0xb52>
			eff_tx_time = min(lr->max_rx_time,
   134f4:	f8b0 8032 	ldrh.w	r8, [r0, #50]	; 0x32
   134f8:	4598      	cmp	r8, r3
   134fa:	bf28      	it	cs
   134fc:	4698      	movcs	r8, r3
		if (lr->max_tx_time >=
   134fe:	8973      	ldrh	r3, [r6, #10]
   13500:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   13504:	d305      	bcc.n	13512 <isr_rx_conn_pkt_ctrl+0xb66>
			eff_rx_time = min(lr->max_tx_time,
   13506:	f5b3 7fa4 	cmp.w	r3, #328	; 0x148
   1350a:	bf28      	it	cs
   1350c:	f44f 73a4 	movcs.w	r3, #328	; 0x148
   13510:	4699      	mov	r9, r3
		if (eff_rx_octets != _radio.conn_curr->max_rx_octets) {
   13512:	4551      	cmp	r1, sl
   13514:	d066      	beq.n	135e4 <isr_rx_conn_pkt_ctrl+0xc38>
	if (_radio.packet_rx_acquire >=
   13516:	4b65      	ldr	r3, [pc, #404]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13518:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1351c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13520:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13522:	429a      	cmp	r2, r3
   13524:	d322      	bcc.n	1356c <isr_rx_conn_pkt_ctrl+0xbc0>
			_radio.packet_rx_last);
   13526:	4b61      	ldr	r3, [pc, #388]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13528:	f893 413d 	ldrb.w	r4, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1352c:	1b14      	subs	r4, r2, r4
   1352e:	b2e4      	uxtb	r4, r4
			free_count_rx = packet_rx_acquired_count_get()
   13530:	b2a4      	uxth	r4, r4
				+ mem_free_count_get(_radio.pkt_rx_data_free);
   13532:	4b5e      	ldr	r3, [pc, #376]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13534:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   13538:	f7fb fa79 	bl	ea2e <mem_free_count_get>
			free_count_rx = packet_rx_acquired_count_get()
   1353c:	1823      	adds	r3, r4, r0
   1353e:	b29b      	uxth	r3, r3
			LL_ASSERT(free_count_rx <= 0xFF);
   13540:	2bff      	cmp	r3, #255	; 0xff
   13542:	d81d      	bhi.n	13580 <isr_rx_conn_pkt_ctrl+0xbd4>
			if (_radio.packet_rx_data_count == free_count_rx) {
   13544:	4a59      	ldr	r2, [pc, #356]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13546:	f892 2136 	ldrb.w	r2, [r2, #310]	; 0x136
   1354a:	4293      	cmp	r3, r2
   1354c:	d01e      	beq.n	1358c <isr_rx_conn_pkt_ctrl+0xbe0>
   1354e:	4651      	mov	r1, sl
				nack = 1;
   13550:	2401      	movs	r4, #1
   13552:	e7a5      	b.n	134a0 <isr_rx_conn_pkt_ctrl+0xaf4>
	       (pdu_data_rx->payload.llctrl.opcode ==
   13554:	78f2      	ldrb	r2, [r6, #3]
		 LLCP_LENGTH_STATE_ACK_WAIT)) &&
   13556:	2a14      	cmp	r2, #20
   13558:	d19b      	bne.n	13492 <isr_rx_conn_pkt_ctrl+0xae6>
   1355a:	e7b6      	b.n	134ca <isr_rx_conn_pkt_ctrl+0xb1e>
	       ((pdu_data_rx->payload.llctrl.opcode ==
   1355c:	78f3      	ldrb	r3, [r6, #3]
		 PDU_DATA_LLCTRL_TYPE_LENGTH_RSP) ||
   1355e:	3b14      	subs	r3, #20
   13560:	b2db      	uxtb	r3, r3
		LLCP_LENGTH_STATE_RSP_WAIT) &&
   13562:	2b01      	cmp	r3, #1
   13564:	d897      	bhi.n	13496 <isr_rx_conn_pkt_ctrl+0xaea>
   13566:	e7b0      	b.n	134ca <isr_rx_conn_pkt_ctrl+0xb1e>
	eff_rx_octets = _radio.conn_curr->max_rx_octets;
   13568:	468a      	mov	sl, r1
   1356a:	e7bf      	b.n	134ec <isr_rx_conn_pkt_ctrl+0xb40>
		return (_radio.packet_rx_count -
   1356c:	4b4f      	ldr	r3, [pc, #316]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   1356e:	f893 413c 	ldrb.w	r4, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   13572:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13576:	1ae4      	subs	r4, r4, r3
			_radio.packet_rx_last +
   13578:	fa52 f484 	uxtab	r4, r2, r4
   1357c:	b2e4      	uxtb	r4, r4
   1357e:	e7d7      	b.n	13530 <isr_rx_conn_pkt_ctrl+0xb84>
			LL_ASSERT(free_count_rx <= 0xFF);
   13580:	4040      	eors	r0, r0
   13582:	f380 8811 	msr	BASEPRI, r0
   13586:	f04f 0004 	mov.w	r0, #4
   1358a:	df02      	svc	2
				_radio.conn_curr->max_tx_octets = eff_tx_octets;
   1358c:	4b47      	ldr	r3, [pc, #284]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   1358e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13592:	85d5      	strh	r5, [r2, #46]	; 0x2e
				_radio.conn_curr->llcp_length.rx_octets =
   13594:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13598:	f8a2 a0ec 	strh.w	sl, [r2, #236]	; 0xec
				_radio.conn_curr->llcp_length.tx_octets =
   1359c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135a0:	f8a2 50ee 	strh.w	r5, [r2, #238]	; 0xee
				_radio.conn_curr->max_tx_time = eff_tx_time;
   135a4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135a8:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
				_radio.conn_curr->llcp_length.rx_time =
   135ac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135b0:	f8a2 90f0 	strh.w	r9, [r2, #240]	; 0xf0
				_radio.conn_curr->llcp_length.tx_time =
   135b4:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135b8:	f8a2 80f2 	strh.w	r8, [r2, #242]	; 0xf2
				_radio.conn_curr->llcp_length.ack =
   135bc:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
					(_radio.conn_curr->llcp_length.req - 1);
   135c0:	f891 20e8 	ldrb.w	r2, [r1, #232]	; 0xe8
   135c4:	3a01      	subs	r2, #1
				_radio.conn_curr->llcp_length.ack =
   135c6:	f881 20e9 	strb.w	r2, [r1, #233]	; 0xe9
				_radio.conn_curr->llcp_length.state =
   135ca:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   135ce:	f891 20ea 	ldrb.w	r2, [r1, #234]	; 0xea
   135d2:	f042 0203 	orr.w	r2, r2, #3
   135d6:	f881 20ea 	strb.w	r2, [r1, #234]	; 0xea
				_radio.state = STATE_CLOSE;
   135da:	2203      	movs	r2, #3
   135dc:	741a      	strb	r2, [r3, #16]
   135de:	4651      	mov	r1, sl
	u8_t nack = 0;
   135e0:	2400      	movs	r4, #0
   135e2:	e75d      	b.n	134a0 <isr_rx_conn_pkt_ctrl+0xaf4>
			_radio.conn_curr->pause_tx = 0;
   135e4:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   135e8:	f36f 03c3 	bfc	r3, #3, #1
   135ec:	f880 30f8 	strb.w	r3, [r0, #248]	; 0xf8
			_radio.conn_curr->max_tx_octets = eff_tx_octets;
   135f0:	4b2e      	ldr	r3, [pc, #184]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   135f2:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135f6:	85d5      	strh	r5, [r2, #46]	; 0x2e
			_radio.conn_curr->max_rx_time = eff_rx_time;
   135f8:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   135fc:	f8a2 9036 	strh.w	r9, [r2, #54]	; 0x36
			_radio.conn_curr->max_tx_time = eff_tx_time;
   13600:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13604:	f8a2 8034 	strh.w	r8, [r2, #52]	; 0x34
			_radio.conn_curr->llcp_length.ack =
   13608:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
				_radio.conn_curr->llcp_length.req;
   1360c:	f892 10e8 	ldrb.w	r1, [r2, #232]	; 0xe8
			_radio.conn_curr->llcp_length.ack =
   13610:	f882 10e9 	strb.w	r1, [r2, #233]	; 0xe9
			_radio.conn_curr->procedure_expire = 0;
   13614:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13618:	2400      	movs	r4, #0
   1361a:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
			lr->max_rx_octets = eff_rx_octets;
   1361e:	f8a6 a004 	strh.w	sl, [r6, #4]
			lr->max_tx_octets = eff_tx_octets;
   13622:	8135      	strh	r5, [r6, #8]
			lr->max_rx_time = eff_rx_time;
   13624:	f8a6 9006 	strh.w	r9, [r6, #6]
			lr->max_tx_time = eff_tx_time;
   13628:	f8a6 800a 	strh.w	r8, [r6, #10]
			*rx_enqueue = 1;
   1362c:	2301      	movs	r3, #1
   1362e:	703b      	strb	r3, [r7, #0]
   13630:	4651      	mov	r1, sl
   13632:	e735      	b.n	134a0 <isr_rx_conn_pkt_ctrl+0xaf4>
		LL_ASSERT(pdu_data_rx->payload.llctrl.opcode ==
   13634:	4040      	eors	r0, r0
   13636:	f380 8811 	msr	BASEPRI, r0
   1363a:	f04f 0004 	mov.w	r0, #4
   1363e:	df02      	svc	2
		if (_radio.role == ROLE_MASTER) {
   13640:	4b1a      	ldr	r3, [pc, #104]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   13642:	7bdb      	ldrb	r3, [r3, #15]
   13644:	b2db      	uxtb	r3, r3
   13646:	2b04      	cmp	r3, #4
   13648:	d032      	beq.n	136b0 <isr_rx_conn_pkt_ctrl+0xd04>
			_radio.conn_curr->llcp_phy.state =
   1364a:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   1364e:	2202      	movs	r2, #2
   13650:	f362 0301 	bfi	r3, r2, #0, #2
   13654:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			if (_radio.conn_curr->llcp_phy.ack ==
   13658:	4b14      	ldr	r3, [pc, #80]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   1365a:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   1365e:	f893 20f5 	ldrb.w	r2, [r3, #245]	; 0xf5
			    _radio.conn_curr->llcp_phy.req) {
   13662:	f893 10f4 	ldrb.w	r1, [r3, #244]	; 0xf4
			if (_radio.conn_curr->llcp_phy.ack ==
   13666:	428a      	cmp	r2, r1
   13668:	f000 8099 	beq.w	1379e <isr_rx_conn_pkt_ctrl+0xdf2>
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1366c:	4a0f      	ldr	r2, [pc, #60]	; (136ac <isr_rx_conn_pkt_ctrl+0xd00>)
   1366e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13672:	7b61      	ldrb	r1, [r4, #13]
   13674:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13678:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1367c:	4029      	ands	r1, r5
   1367e:	f361 0384 	bfi	r3, r1, #2, #3
   13682:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13686:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1368a:	7b21      	ldrb	r1, [r4, #12]
   1368c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13690:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13694:	f361 1347 	bfi	r3, r1, #5, #3
   13698:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			phy_rsp_send(_radio.conn_curr);
   1369c:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   136a0:	f7fd fe5c 	bl	1135c <phy_rsp_send>
	u8_t nack = 0;
   136a4:	2400      	movs	r4, #0
   136a6:	f7ff b9bb 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   136aa:	bf00      	nop
   136ac:	20000f84 	.word	0x20000f84
			if ((_radio.conn_curr->llcp_phy.ack !=
   136b0:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
			     _radio.conn_curr->llcp_phy.req) &&
   136b4:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
			if ((_radio.conn_curr->llcp_phy.ack !=
   136b8:	429a      	cmp	r2, r3
   136ba:	d007      	beq.n	136cc <isr_rx_conn_pkt_ctrl+0xd20>
			    ((_radio.conn_curr->llcp_phy.state ==
   136bc:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
			      LLCP_PHY_STATE_RSP_WAIT) ||
   136c0:	f003 0303 	and.w	r3, r3, #3
   136c4:	3b01      	subs	r3, #1
   136c6:	b2db      	uxtb	r3, r3
			     _radio.conn_curr->llcp_phy.req) &&
   136c8:	2b02      	cmp	r3, #2
   136ca:	d913      	bls.n	136f4 <isr_rx_conn_pkt_ctrl+0xd48>
			} else if ((_radio.conn_curr->llcp_req !=
   136cc:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
				    _radio.conn_curr->llcp_ack) ||
   136d0:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
			} else if ((_radio.conn_curr->llcp_req !=
   136d4:	429a      	cmp	r2, r3
   136d6:	d105      	bne.n	136e4 <isr_rx_conn_pkt_ctrl+0xd38>
				   (_radio.conn_curr->llcp_conn_param.req !=
   136d8:	f895 20c0 	ldrb.w	r2, [r5, #192]	; 0xc0
				    _radio.conn_curr->llcp_conn_param.ack)) {
   136dc:	f895 30c1 	ldrb.w	r3, [r5, #193]	; 0xc1
				    _radio.conn_curr->llcp_ack) ||
   136e0:	429a      	cmp	r2, r3
   136e2:	d00f      	beq.n	13704 <isr_rx_conn_pkt_ctrl+0xd58>
				reject_ext_ind_send(_radio.conn_curr,
   136e4:	222a      	movs	r2, #42	; 0x2a
   136e6:	2116      	movs	r1, #22
   136e8:	4628      	mov	r0, r5
   136ea:	f7fd fe17 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   136ee:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   136f0:	f7ff b996 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
				reject_ext_ind_send(_radio.conn_curr,
   136f4:	2223      	movs	r2, #35	; 0x23
   136f6:	2116      	movs	r1, #22
   136f8:	4628      	mov	r0, r5
   136fa:	f7fd fe0f 	bl	1131c <reject_ext_ind_send>
	u8_t nack = 0;
   136fe:	2400      	movs	r4, #0
				reject_ext_ind_send(_radio.conn_curr,
   13700:	f7ff b98e 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
				_radio.conn_curr->llcp_phy.state =
   13704:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13708:	f043 0303 	orr.w	r3, r3, #3
   1370c:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
				if (_radio.conn_curr->llcp_phy.ack ==
   13710:	4bce      	ldr	r3, [pc, #824]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13712:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13716:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
				    _radio.conn_curr->llcp_phy.req) {
   1371a:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
				if (_radio.conn_curr->llcp_phy.ack ==
   1371e:	428b      	cmp	r3, r1
   13720:	d01a      	beq.n	13758 <isr_rx_conn_pkt_ctrl+0xdac>
				_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   13722:	49ca      	ldr	r1, [pc, #808]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13724:	f8d1 0110 	ldr.w	r0, [r1, #272]	; 0x110
   13728:	7b62      	ldrb	r2, [r4, #13]
   1372a:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   1372e:	f3c3 0582 	ubfx	r5, r3, #2, #3
   13732:	402a      	ands	r2, r5
   13734:	f362 0384 	bfi	r3, r2, #2, #3
   13738:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   1373c:	f8d1 1110 	ldr.w	r1, [r1, #272]	; 0x110
   13740:	7b22      	ldrb	r2, [r4, #12]
   13742:	f891 30f6 	ldrb.w	r3, [r1, #246]	; 0xf6
   13746:	ea02 1253 	and.w	r2, r2, r3, lsr #5
   1374a:	f362 1347 	bfi	r3, r2, #5, #3
   1374e:	f881 30f6 	strb.w	r3, [r1, #246]	; 0xf6
	u8_t nack = 0;
   13752:	2400      	movs	r4, #0
   13754:	f7ff b964 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
					_radio.conn_curr->llcp_phy.ack--;
   13758:	3b01      	subs	r3, #1
   1375a:	f882 30f5 	strb.w	r3, [r2, #245]	; 0xf5
					_radio.conn_curr->llcp_phy.cmd = 0;
   1375e:	4bbb      	ldr	r3, [pc, #748]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   13760:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13764:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   13768:	f36f 0141 	bfc	r1, #1, #1
   1376c:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
					_radio.conn_curr->llcp_phy.tx =
   13770:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_tx;
   13774:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
					_radio.conn_curr->llcp_phy.tx =
   13778:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   1377c:	f360 0184 	bfi	r1, r0, #2, #3
   13780:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
					_radio.conn_curr->llcp_phy.rx =
   13784:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
						_radio.conn_curr->phy_pref_rx;
   13788:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   1378c:	f3c2 02c2 	ubfx	r2, r2, #3, #3
					_radio.conn_curr->llcp_phy.rx =
   13790:	f893 10f6 	ldrb.w	r1, [r3, #246]	; 0xf6
   13794:	f362 1147 	bfi	r1, r2, #5, #3
   13798:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
   1379c:	e7c1      	b.n	13722 <isr_rx_conn_pkt_ctrl+0xd76>
				_radio.conn_curr->llcp_phy.ack--;
   1379e:	3a01      	subs	r2, #1
   137a0:	f883 20f5 	strb.w	r2, [r3, #245]	; 0xf5
				_radio.conn_curr->llcp_phy.cmd = 0;
   137a4:	4ba9      	ldr	r3, [pc, #676]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   137a6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   137aa:	f892 10f7 	ldrb.w	r1, [r2, #247]	; 0xf7
   137ae:	f36f 0141 	bfc	r1, #1, #1
   137b2:	f882 10f7 	strb.w	r1, [r2, #247]	; 0xf7
				_radio.conn_curr->llcp_phy.tx =
   137b6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_tx;
   137ba:	f892 0038 	ldrb.w	r0, [r2, #56]	; 0x38
				_radio.conn_curr->llcp_phy.tx =
   137be:	f892 10f6 	ldrb.w	r1, [r2, #246]	; 0xf6
   137c2:	f360 0184 	bfi	r1, r0, #2, #3
   137c6:	f882 10f6 	strb.w	r1, [r2, #246]	; 0xf6
				_radio.conn_curr->llcp_phy.rx =
   137ca:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
					_radio.conn_curr->phy_pref_rx;
   137ce:	f892 1039 	ldrb.w	r1, [r2, #57]	; 0x39
   137d2:	f3c1 01c2 	ubfx	r1, r1, #3, #3
				_radio.conn_curr->llcp_phy.rx =
   137d6:	f892 00f6 	ldrb.w	r0, [r2, #246]	; 0xf6
   137da:	f361 1047 	bfi	r0, r1, #5, #3
   137de:	f882 00f6 	strb.w	r0, [r2, #246]	; 0xf6
				_radio.conn_curr->procedure_expire =
   137e2:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
					_radio.conn_curr->procedure_reload;
   137e6:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
				_radio.conn_curr->procedure_expire =
   137ea:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
   137ee:	e73d      	b.n	1366c <isr_rx_conn_pkt_ctrl+0xcc0>
		if ((_radio.role == ROLE_MASTER) &&
   137f0:	4b96      	ldr	r3, [pc, #600]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   137f2:	7bdb      	ldrb	r3, [r3, #15]
   137f4:	b2db      	uxtb	r3, r3
   137f6:	2b04      	cmp	r3, #4
   137f8:	d002      	beq.n	13800 <isr_rx_conn_pkt_ctrl+0xe54>
	u8_t nack = 0;
   137fa:	2400      	movs	r4, #0
   137fc:	f7ff b910 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		    (_radio.conn_curr->llcp_phy.ack !=
   13800:	f895 20f5 	ldrb.w	r2, [r5, #245]	; 0xf5
		     _radio.conn_curr->llcp_phy.req) &&
   13804:	f895 30f4 	ldrb.w	r3, [r5, #244]	; 0xf4
		if ((_radio.role == ROLE_MASTER) &&
   13808:	429a      	cmp	r2, r3
   1380a:	f000 8112 	beq.w	13a32 <isr_rx_conn_pkt_ctrl+0x1086>
		    (_radio.conn_curr->llcp_phy.state ==
   1380e:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13812:	f003 0303 	and.w	r3, r3, #3
		     _radio.conn_curr->llcp_phy.req) &&
   13816:	2b02      	cmp	r3, #2
   13818:	d002      	beq.n	13820 <isr_rx_conn_pkt_ctrl+0xe74>
	u8_t nack = 0;
   1381a:	2400      	movs	r4, #0
   1381c:	f7ff b900 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_UPD;
   13820:	f895 30f6 	ldrb.w	r3, [r5, #246]	; 0xf6
   13824:	f043 0303 	orr.w	r3, r3, #3
   13828:	f885 30f6 	strb.w	r3, [r5, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.tx &= p->rx_phys;
   1382c:	4a87      	ldr	r2, [pc, #540]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1382e:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   13832:	7b61      	ldrb	r1, [r4, #13]
   13834:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13838:	f3c3 0582 	ubfx	r5, r3, #2, #3
   1383c:	4029      	ands	r1, r5
   1383e:	f361 0384 	bfi	r3, r1, #2, #3
   13842:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->llcp_phy.rx &= p->tx_phys;
   13846:	f8d2 0110 	ldr.w	r0, [r2, #272]	; 0x110
   1384a:	7b21      	ldrb	r1, [r4, #12]
   1384c:	f890 30f6 	ldrb.w	r3, [r0, #246]	; 0xf6
   13850:	ea01 1153 	and.w	r1, r1, r3, lsr #5
   13854:	f361 1347 	bfi	r3, r1, #5, #3
   13858:	f880 30f6 	strb.w	r3, [r0, #246]	; 0xf6
			_radio.conn_curr->procedure_expire = 0;
   1385c:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   13860:	2400      	movs	r4, #0
   13862:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
   13866:	f7ff b8db 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	struct connection *conn = _radio.conn_curr;
   1386a:	4b78      	ldr	r3, [pc, #480]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   1386c:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	if (!((p->m_to_s_phy | p->s_to_m_phy) & 0x07)) {
   13870:	7b23      	ldrb	r3, [r4, #12]
   13872:	7b61      	ldrb	r1, [r4, #13]
   13874:	430b      	orrs	r3, r1
   13876:	f013 0f07 	tst.w	r3, #7
   1387a:	d134      	bne.n	138e6 <isr_rx_conn_pkt_ctrl+0xf3a>
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   1387c:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   13880:	f892 10f4 	ldrb.w	r1, [r2, #244]	; 0xf4
   13884:	428b      	cmp	r3, r1
   13886:	f000 8086 	beq.w	13996 <isr_rx_conn_pkt_ctrl+0xfea>
		    (conn->llcp_phy.state != LLCP_PHY_STATE_RSP_WAIT)) {
   1388a:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   1388e:	f003 0303 	and.w	r3, r3, #3
		if ((conn->llcp_phy.ack == conn->llcp_phy.req) ||
   13892:	2b02      	cmp	r3, #2
   13894:	d00c      	beq.n	138b0 <isr_rx_conn_pkt_ctrl+0xf04>
			return 0;
   13896:	2300      	movs	r3, #0
		if (phy_upd_ind(radio_pdu_node_rx, rx_enqueue)) {
   13898:	2b00      	cmp	r3, #0
   1389a:	f000 80cd 	beq.w	13a38 <isr_rx_conn_pkt_ctrl+0x108c>
			_radio.conn_curr->llcp_terminate.reason_peer = 0x28;
   1389e:	4b6b      	ldr	r3, [pc, #428]	; (13a4c <isr_rx_conn_pkt_ctrl+0x10a0>)
   138a0:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   138a4:	2228      	movs	r2, #40	; 0x28
   138a6:	f883 20b3 	strb.w	r2, [r3, #179]	; 0xb3
	u8_t nack = 0;
   138aa:	2400      	movs	r4, #0
   138ac:	f7ff b8b8 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   138b0:	f882 10f5 	strb.w	r1, [r2, #245]	; 0xf5
		conn->procedure_expire = 0;
   138b4:	2300      	movs	r3, #0
   138b6:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
		if (!conn->llcp_phy.cmd) {
   138ba:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   138be:	f013 0f02 	tst.w	r3, #2
   138c2:	d06a      	beq.n	1399a <isr_rx_conn_pkt_ctrl+0xfee>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   138c4:	230c      	movs	r3, #12
   138c6:	7123      	strb	r3, [r4, #4]
		p->status = 0;
   138c8:	2300      	movs	r3, #0
   138ca:	72e3      	strb	r3, [r4, #11]
		p->tx = conn->phy_tx;
   138cc:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   138d0:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   138d4:	7321      	strb	r1, [r4, #12]
		p->rx = conn->phy_rx;
   138d6:	f892 203a 	ldrb.w	r2, [r2, #58]	; 0x3a
   138da:	f3c2 0202 	ubfx	r2, r2, #0, #3
   138de:	7362      	strb	r2, [r4, #13]
		*rx_enqueue = 1;
   138e0:	2201      	movs	r2, #1
   138e2:	703a      	strb	r2, [r7, #0]
   138e4:	e7d8      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
	if (((p->instant - conn->event_counter) & 0xffff) > 0x7fff) {
   138e6:	89e3      	ldrh	r3, [r4, #14]
   138e8:	8c51      	ldrh	r1, [r2, #34]	; 0x22
   138ea:	1a5b      	subs	r3, r3, r1
   138ec:	b29b      	uxth	r3, r3
   138ee:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   138f2:	da54      	bge.n	1399e <isr_rx_conn_pkt_ctrl+0xff2>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   138f4:	f892 3074 	ldrb.w	r3, [r2, #116]	; 0x74
   138f8:	f892 1075 	ldrb.w	r1, [r2, #117]	; 0x75
   138fc:	428b      	cmp	r3, r1
   138fe:	d134      	bne.n	1396a <isr_rx_conn_pkt_ctrl+0xfbe>
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13900:	f892 30f5 	ldrb.w	r3, [r2, #245]	; 0xf5
   13904:	f892 00f4 	ldrb.w	r0, [r2, #244]	; 0xf4
   13908:	4283      	cmp	r3, r0
   1390a:	d005      	beq.n	13918 <isr_rx_conn_pkt_ctrl+0xf6c>
	    (conn->llcp_phy.state == LLCP_PHY_STATE_RSP_WAIT)) {
   1390c:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13910:	f003 0303 	and.w	r3, r3, #3
	if ((conn->llcp_phy.ack != conn->llcp_phy.req) &&
   13914:	2b02      	cmp	r3, #2
   13916:	d02e      	beq.n	13976 <isr_rx_conn_pkt_ctrl+0xfca>
	conn->llcp.phy_upd_ind.tx = p->s_to_m_phy;
   13918:	7b60      	ldrb	r0, [r4, #13]
   1391a:	f000 0007 	and.w	r0, r0, #7
   1391e:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13922:	f360 0384 	bfi	r3, r0, #2, #3
   13926:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.rx = p->m_to_s_phy;
   1392a:	7b25      	ldrb	r5, [r4, #12]
   1392c:	b2db      	uxtb	r3, r3
   1392e:	f365 1347 	bfi	r3, r5, #5, #3
   13932:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp.phy_upd_ind.instant = p->instant;
   13936:	89e3      	ldrh	r3, [r4, #14]
   13938:	f8a2 307a 	strh.w	r3, [r2, #122]	; 0x7a
	conn->llcp.phy_upd_ind.initiate = 0;
   1393c:	f892 3078 	ldrb.w	r3, [r2, #120]	; 0x78
   13940:	f36f 0300 	bfc	r3, #0, #1
   13944:	f882 3078 	strb.w	r3, [r2, #120]	; 0x78
	conn->llcp_type = LLCP_PHY_UPD;
   13948:	2408      	movs	r4, #8
   1394a:	f882 4076 	strb.w	r4, [r2, #118]	; 0x76
	conn->llcp_ack--;
   1394e:	3901      	subs	r1, #1
   13950:	f882 1075 	strb.w	r1, [r2, #117]	; 0x75
	if (conn->llcp.phy_upd_ind.tx) {
   13954:	f003 031c 	and.w	r3, r3, #28
   13958:	b31b      	cbz	r3, 139a2 <isr_rx_conn_pkt_ctrl+0xff6>
		conn->phy_tx_time = conn->llcp.phy_upd_ind.tx;
   1395a:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   1395e:	f360 0302 	bfi	r3, r0, #0, #3
   13962:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	return 0;
   13966:	2300      	movs	r3, #0
   13968:	e796      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
	LL_ASSERT(conn->llcp_req == conn->llcp_ack);
   1396a:	4040      	eors	r0, r0
   1396c:	f380 8811 	msr	BASEPRI, r0
   13970:	f04f 0004 	mov.w	r0, #4
   13974:	df02      	svc	2
		conn->llcp_phy.ack = conn->llcp_phy.req;
   13976:	f882 00f5 	strb.w	r0, [r2, #245]	; 0xf5
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   1397a:	f892 30f7 	ldrb.w	r3, [r2, #247]	; 0xf7
   1397e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   13982:	f892 0078 	ldrb.w	r0, [r2, #120]	; 0x78
   13986:	f363 0041 	bfi	r0, r3, #1, #1
   1398a:	f882 0078 	strb.w	r0, [r2, #120]	; 0x78
		conn->procedure_expire = 0;
   1398e:	2300      	movs	r3, #0
   13990:	f8a2 3044 	strh.w	r3, [r2, #68]	; 0x44
   13994:	e7c0      	b.n	13918 <isr_rx_conn_pkt_ctrl+0xf6c>
			return 0;
   13996:	2300      	movs	r3, #0
   13998:	e77e      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
			return 0;
   1399a:	2300      	movs	r3, #0
   1399c:	e77c      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
		return 1;
   1399e:	2301      	movs	r3, #1
   139a0:	e77a      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
	return 0;
   139a2:	2300      	movs	r3, #0
   139a4:	e778      	b.n	13898 <isr_rx_conn_pkt_ctrl+0xeec>
		if (!_radio.conn_curr->role) {
   139a6:	2b00      	cmp	r3, #0
   139a8:	db49      	blt.n	13a3e <isr_rx_conn_pkt_ctrl+0x1092>
			if (!(p->phys & (conn->phy_tx | conn->phy_rx))) {
   139aa:	7b21      	ldrb	r1, [r4, #12]
   139ac:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   139b0:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   139b4:	f895 203a 	ldrb.w	r2, [r5, #58]	; 0x3a
   139b8:	f002 0207 	and.w	r2, r2, #7
   139bc:	4313      	orrs	r3, r2
   139be:	4219      	tst	r1, r3
   139c0:	d040      	beq.n	13a44 <isr_rx_conn_pkt_ctrl+0x1098>
			if (conn->llcp_req != conn->llcp_ack) {
   139c2:	f895 2074 	ldrb.w	r2, [r5, #116]	; 0x74
   139c6:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   139ca:	429a      	cmp	r2, r3
   139cc:	d002      	beq.n	139d4 <isr_rx_conn_pkt_ctrl+0x1028>
	u8_t nack = 0;
   139ce:	2400      	movs	r4, #0
   139d0:	f7ff b826 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
			memcpy(&conn->llcp.chan_map.chm[0],
   139d4:	2205      	movs	r2, #5
   139d6:	491e      	ldr	r1, [pc, #120]	; (13a50 <isr_rx_conn_pkt_ctrl+0x10a4>)
   139d8:	f105 0079 	add.w	r0, r5, #121	; 0x79
   139dc:	f7ec fc70 	bl	2c0 <memcpy>
			conn->llcp.chan_map.initiate = 1;
   139e0:	2301      	movs	r3, #1
   139e2:	f885 3078 	strb.w	r3, [r5, #120]	; 0x78
			conn->llcp_type = LLCP_CHAN_MAP;
   139e6:	2302      	movs	r3, #2
   139e8:	f885 3076 	strb.w	r3, [r5, #118]	; 0x76
			conn->llcp_ack--;
   139ec:	f895 3075 	ldrb.w	r3, [r5, #117]	; 0x75
   139f0:	3b01      	subs	r3, #1
   139f2:	f885 3075 	strb.w	r3, [r5, #117]	; 0x75
	u8_t nack = 0;
   139f6:	2400      	movs	r4, #0
   139f8:	f7ff b812 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
		unknown_rsp_send(_radio.conn_curr,
   139fc:	4628      	mov	r0, r5
   139fe:	f7fd fcd3 	bl	113a8 <unknown_rsp_send>
	u8_t nack = 0;
   13a02:	2400      	movs	r4, #0
		break;
   13a04:	f7ff b80c 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
	u8_t nack = 0;
   13a08:	2400      	movs	r4, #0
   13a0a:	f7ff b809 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a0e:	2400      	movs	r4, #0
   13a10:	f7ff b806 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a14:	2400      	movs	r4, #0
   13a16:	f7ff b803 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a1a:	2400      	movs	r4, #0
   13a1c:	f7ff b800 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a20:	2400      	movs	r4, #0
   13a22:	f7fe bffd 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a26:	2400      	movs	r4, #0
   13a28:	f7fe bffa 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a2c:	2400      	movs	r4, #0
   13a2e:	f7fe bff7 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a32:	2400      	movs	r4, #0
   13a34:	f7fe bff4 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a38:	2400      	movs	r4, #0
   13a3a:	f7fe bff1 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a3e:	2400      	movs	r4, #0
   13a40:	f7fe bfee 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a44:	2400      	movs	r4, #0
   13a46:	f7fe bfeb 	b.w	12a20 <isr_rx_conn_pkt_ctrl+0x74>
   13a4a:	bf00      	nop
   13a4c:	20000f84 	.word	0x20000f84
   13a50:	2000109a 	.word	0x2000109a

00013a54 <packet_rx_enqueue>:
{
   13a54:	b508      	push	{r3, lr}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   13a56:	4a1a      	ldr	r2, [pc, #104]	; (13ac0 <packet_rx_enqueue+0x6c>)
   13a58:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   13a5c:	b2db      	uxtb	r3, r3
   13a5e:	f892 213e 	ldrb.w	r2, [r2, #318]	; 0x13e
   13a62:	4293      	cmp	r3, r2
   13a64:	d01d      	beq.n	13aa2 <packet_rx_enqueue+0x4e>
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13a66:	4a16      	ldr	r2, [pc, #88]	; (13ac0 <packet_rx_enqueue+0x6c>)
   13a68:	f8d2 3138 	ldr.w	r3, [r2, #312]	; 0x138
   13a6c:	f892 113d 	ldrb.w	r1, [r2, #317]	; 0x13d
   13a70:	f853 0021 	ldr.w	r0, [r3, r1, lsl #2]
	link = radio_pdu_node_rx->hdr.onion.link;
   13a74:	6801      	ldr	r1, [r0, #0]
	    _radio.packet_release_last;
   13a76:	f892 3174 	ldrb.w	r3, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   13a7a:	7003      	strb	r3, [r0, #0]
	last = _radio.packet_rx_last + 1;
   13a7c:	f892 313d 	ldrb.w	r3, [r2, #317]	; 0x13d
   13a80:	3301      	adds	r3, #1
   13a82:	b2db      	uxtb	r3, r3
	if (last == _radio.packet_rx_count) {
   13a84:	f892 213c 	ldrb.w	r2, [r2, #316]	; 0x13c
   13a88:	4293      	cmp	r3, r2
   13a8a:	d010      	beq.n	13aae <packet_rx_enqueue+0x5a>
	_radio.packet_rx_last = last;
   13a8c:	4a0c      	ldr	r2, [pc, #48]	; (13ac0 <packet_rx_enqueue+0x6c>)
   13a8e:	f882 313d 	strb.w	r3, [r2, #317]	; 0x13d
	link = memq_enqueue(radio_pdu_node_rx, link,
   13a92:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   13a96:	f7fa fffe 	bl	ea96 <memq_enqueue>
	LL_ASSERT(link);
   13a9a:	b150      	cbz	r0, 13ab2 <packet_rx_enqueue+0x5e>
	packet_rx_callback();
   13a9c:	f7fe f871 	bl	11b82 <packet_rx_callback>
   13aa0:	bd08      	pop	{r3, pc}
	LL_ASSERT(_radio.packet_rx_last != _radio.packet_rx_acquire);
   13aa2:	4040      	eors	r0, r0
   13aa4:	f380 8811 	msr	BASEPRI, r0
   13aa8:	f04f 0004 	mov.w	r0, #4
   13aac:	df02      	svc	2
		last = 0;
   13aae:	2300      	movs	r3, #0
   13ab0:	e7ec      	b.n	13a8c <packet_rx_enqueue+0x38>
	LL_ASSERT(link);
   13ab2:	4040      	eors	r0, r0
   13ab4:	f380 8811 	msr	BASEPRI, r0
   13ab8:	f04f 0004 	mov.w	r0, #4
   13abc:	df02      	svc	2
   13abe:	bf00      	nop
   13ac0:	20000f84 	.word	0x20000f84

00013ac4 <mayfly_adv_stop>:
{
   13ac4:	b510      	push	{r4, lr}
	if (_radio.packet_rx_acquire >=
   13ac6:	4b1c      	ldr	r3, [pc, #112]	; (13b38 <mayfly_adv_stop+0x74>)
   13ac8:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13acc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13ad0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13ad2:	429a      	cmp	r2, r3
   13ad4:	d31d      	bcc.n	13b12 <mayfly_adv_stop+0x4e>
			_radio.packet_rx_last);
   13ad6:	4b18      	ldr	r3, [pc, #96]	; (13b38 <mayfly_adv_stop+0x74>)
   13ad8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13adc:	1ad3      	subs	r3, r2, r3
   13ade:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13ae0:	b30b      	cbz	r3, 13b26 <mayfly_adv_stop+0x62>
	return _radio.packet_rx[_radio.packet_rx_last];
   13ae2:	4b15      	ldr	r3, [pc, #84]	; (13b38 <mayfly_adv_stop+0x74>)
   13ae4:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13ae8:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13aec:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
	LL_ASSERT(radio_pdu_node_rx);
   13af0:	b1dc      	cbz	r4, 13b2a <mayfly_adv_stop+0x66>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   13af2:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13af6:	80e3      	strh	r3, [r4, #6]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   13af8:	2306      	movs	r3, #6
   13afa:	7123      	strb	r3, [r4, #4]
	memset(radio_le_conn_cmplt, 0x00, sizeof(struct radio_le_conn_cmplt));
   13afc:	221d      	movs	r2, #29
   13afe:	2100      	movs	r1, #0
   13b00:	f104 000b 	add.w	r0, r4, #11
   13b04:	f015 ff48 	bl	29998 <memset>
	radio_le_conn_cmplt->status = 0x3c;
   13b08:	233c      	movs	r3, #60	; 0x3c
   13b0a:	72e3      	strb	r3, [r4, #11]
	packet_rx_enqueue();
   13b0c:	f7ff ffa2 	bl	13a54 <packet_rx_enqueue>
   13b10:	bd10      	pop	{r4, pc}
		return (_radio.packet_rx_count -
   13b12:	4909      	ldr	r1, [pc, #36]	; (13b38 <mayfly_adv_stop+0x74>)
   13b14:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   13b18:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13b1c:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   13b1e:	fa52 f383 	uxtab	r3, r2, r3
   13b22:	b2db      	uxtb	r3, r3
   13b24:	e7dc      	b.n	13ae0 <mayfly_adv_stop+0x1c>
		return 0;
   13b26:	2400      	movs	r4, #0
   13b28:	e7e2      	b.n	13af0 <mayfly_adv_stop+0x2c>
	LL_ASSERT(radio_pdu_node_rx);
   13b2a:	4040      	eors	r0, r0
   13b2c:	f380 8811 	msr	BASEPRI, r0
   13b30:	f04f 0004 	mov.w	r0, #4
   13b34:	df02      	svc	2
   13b36:	bf00      	nop
   13b38:	20000f84 	.word	0x20000f84

00013b3c <terminate_ind_rx_enqueue>:
{
   13b3c:	b510      	push	{r4, lr}
   13b3e:	4603      	mov	r3, r0
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   13b40:	f8d0 40b4 	ldr.w	r4, [r0, #180]	; 0xb4
   13b44:	b1bc      	cbz	r4, 13b76 <terminate_ind_rx_enqueue+0x3a>
   13b46:	30b4      	adds	r0, #180	; 0xb4
   13b48:	460a      	mov	r2, r1
	radio_pdu_node_rx->hdr.handle = conn->handle;
   13b4a:	8c19      	ldrh	r1, [r3, #32]
   13b4c:	f8a3 10ba 	strh.w	r1, [r3, #186]	; 0xba
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_TERMINATE;
   13b50:	2107      	movs	r1, #7
   13b52:	f883 10b8 	strb.w	r1, [r3, #184]	; 0xb8
	*((u8_t *)radio_pdu_node_rx->pdu_data) = reason;
   13b56:	f883 20bc 	strb.w	r2, [r3, #188]	; 0xbc
	    _radio.packet_release_last;
   13b5a:	4a0d      	ldr	r2, [pc, #52]	; (13b90 <terminate_ind_rx_enqueue+0x54>)
   13b5c:	f892 1174 	ldrb.w	r1, [r2, #372]	; 0x174
	radio_pdu_node_rx->hdr.onion.packet_release_last =
   13b60:	f883 10b4 	strb.w	r1, [r3, #180]	; 0xb4
	link = memq_enqueue(radio_pdu_node_rx, link,
   13b64:	f502 72a6 	add.w	r2, r2, #332	; 0x14c
   13b68:	4621      	mov	r1, r4
   13b6a:	f7fa ff94 	bl	ea96 <memq_enqueue>
	LL_ASSERT(link);
   13b6e:	b140      	cbz	r0, 13b82 <terminate_ind_rx_enqueue+0x46>
	packet_rx_callback();
   13b70:	f7fe f807 	bl	11b82 <packet_rx_callback>
   13b74:	bd10      	pop	{r4, pc}
	LL_ASSERT(radio_pdu_node_rx->hdr.onion.link);
   13b76:	4040      	eors	r0, r0
   13b78:	f380 8811 	msr	BASEPRI, r0
   13b7c:	f04f 0004 	mov.w	r0, #4
   13b80:	df02      	svc	2
	LL_ASSERT(link);
   13b82:	4040      	eors	r0, r0
   13b84:	f380 8811 	msr	BASEPRI, r0
   13b88:	f04f 0004 	mov.w	r0, #4
   13b8c:	df02      	svc	2
   13b8e:	bf00      	nop
   13b90:	20000f84 	.word	0x20000f84

00013b94 <isr_rx_scan_report>:
{
   13b94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	if (_radio.packet_rx_acquire >=
   13b98:	4b31      	ldr	r3, [pc, #196]	; (13c60 <isr_rx_scan_report+0xcc>)
   13b9a:	f893 413e 	ldrb.w	r4, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   13b9e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13ba2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   13ba4:	429c      	cmp	r4, r3
   13ba6:	d327      	bcc.n	13bf8 <isr_rx_scan_report+0x64>
			_radio.packet_rx_last);
   13ba8:	4b2d      	ldr	r3, [pc, #180]	; (13c60 <isr_rx_scan_report+0xcc>)
   13baa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   13bae:	1ae3      	subs	r3, r4, r3
   13bb0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   13bb2:	2b02      	cmp	r3, #2
   13bb4:	d92a      	bls.n	13c0c <isr_rx_scan_report+0x78>
	return _radio.packet_rx[_radio.packet_rx_last];
   13bb6:	4b2a      	ldr	r3, [pc, #168]	; (13c60 <isr_rx_scan_report+0xcc>)
   13bb8:	f8d3 4138 	ldr.w	r4, [r3, #312]	; 0x138
   13bbc:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13bc0:	f854 4023 	ldr.w	r4, [r4, r3, lsl #2]
	if (radio_pdu_node_rx == 0) {
   13bc4:	2c00      	cmp	r4, #0
   13bc6:	d047      	beq.n	13c58 <isr_rx_scan_report+0xc4>
	radio_pdu_node_rx->hdr.handle = 0xffff;
   13bc8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   13bcc:	80e3      	strh	r3, [r4, #6]
	} else if (_radio.scanner.phy) {
   13bce:	4b24      	ldr	r3, [pc, #144]	; (13c60 <isr_rx_scan_report+0xcc>)
   13bd0:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   13bd4:	f013 0f07 	tst.w	r3, #7
   13bd8:	d020      	beq.n	13c1c <isr_rx_scan_report+0x88>
		switch (_radio.scanner.phy) {
   13bda:	4b21      	ldr	r3, [pc, #132]	; (13c60 <isr_rx_scan_report+0xcc>)
   13bdc:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   13be0:	f003 0307 	and.w	r3, r3, #7
   13be4:	2b01      	cmp	r3, #1
   13be6:	d013      	beq.n	13c10 <isr_rx_scan_report+0x7c>
   13be8:	2b04      	cmp	r3, #4
   13bea:	d014      	beq.n	13c16 <isr_rx_scan_report+0x82>
			LL_ASSERT(0);
   13bec:	4040      	eors	r0, r0
   13bee:	f380 8811 	msr	BASEPRI, r0
   13bf2:	f04f 0004 	mov.w	r0, #4
   13bf6:	df02      	svc	2
		return (_radio.packet_rx_count -
   13bf8:	4d19      	ldr	r5, [pc, #100]	; (13c60 <isr_rx_scan_report+0xcc>)
   13bfa:	f895 313c 	ldrb.w	r3, [r5, #316]	; 0x13c
			_radio.packet_rx_last +
   13bfe:	f895 513d 	ldrb.w	r5, [r5, #317]	; 0x13d
		return (_radio.packet_rx_count -
   13c02:	1b5b      	subs	r3, r3, r5
			_radio.packet_rx_last +
   13c04:	fa54 f383 	uxtab	r3, r4, r3
   13c08:	b2db      	uxtb	r3, r3
   13c0a:	e7d2      	b.n	13bb2 <isr_rx_scan_report+0x1e>
		return 0;
   13c0c:	2400      	movs	r4, #0
   13c0e:	e7d9      	b.n	13bc4 <isr_rx_scan_report+0x30>
			radio_pdu_node_rx->hdr.type =
   13c10:	2303      	movs	r3, #3
   13c12:	7123      	strb	r3, [r4, #4]
			break;
   13c14:	e004      	b.n	13c20 <isr_rx_scan_report+0x8c>
			radio_pdu_node_rx->hdr.type =
   13c16:	2304      	movs	r3, #4
   13c18:	7123      	strb	r3, [r4, #4]
			break;
   13c1a:	e001      	b.n	13c20 <isr_rx_scan_report+0x8c>
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_REPORT;
   13c1c:	2302      	movs	r3, #2
   13c1e:	7123      	strb	r3, [r4, #4]
   13c20:	4615      	mov	r5, r2
   13c22:	460e      	mov	r6, r1
	pdu_adv_rx = (struct pdu_adv *)radio_pdu_node_rx->pdu_data;
   13c24:	f104 0708 	add.w	r7, r4, #8
			     pdu_adv_rx->len] =
   13c28:	f894 8009 	ldrb.w	r8, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13c2c:	f108 0802 	add.w	r8, r8, #2
			     pdu_adv_rx->len] =
   13c30:	b968      	cbnz	r0, 13c4e <isr_rx_scan_report+0xba>
   13c32:	207f      	movs	r0, #127	; 0x7f
   13c34:	f807 0008 	strb.w	r0, [r7, r8]
			     pdu_adv_rx->len + 1] = rl_idx;
   13c38:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13c3a:	3303      	adds	r3, #3
			     pdu_adv_rx->len + 1] = rl_idx;
   13c3c:	54fe      	strb	r6, [r7, r3]
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   13c3e:	7a63      	ldrb	r3, [r4, #9]
	((u8_t *)pdu_adv_rx)[offsetof(struct pdu_adv, payload) +
   13c40:	3304      	adds	r3, #4
			     pdu_adv_rx->len + 2] = dir_report ? 1 : 0;
   13c42:	54fd      	strb	r5, [r7, r3]
	packet_rx_enqueue();
   13c44:	f7ff ff06 	bl	13a54 <packet_rx_enqueue>
	return 0;
   13c48:	2000      	movs	r0, #0
   13c4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		(rssi_ready) ? (radio_rssi_get() & 0x7f) : 0x7f;
   13c4e:	f7fb f947 	bl	eee0 <radio_rssi_get>
			     pdu_adv_rx->len] =
   13c52:	f000 007f 	and.w	r0, r0, #127	; 0x7f
   13c56:	e7ed      	b.n	13c34 <isr_rx_scan_report+0xa0>
		return 1;
   13c58:	2001      	movs	r0, #1
}
   13c5a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   13c5e:	bf00      	nop
   13c60:	20000f84 	.word	0x20000f84

00013c64 <isr_rx_conn>:
{
   13c64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   13c68:	b084      	sub	sp, #16
	u8_t rx_enqueue = 0;
   13c6a:	2300      	movs	r3, #0
   13c6c:	f88d 300b 	strb.w	r3, [sp, #11]
	_radio.packet_counter++;
   13c70:	4bc1      	ldr	r3, [pc, #772]	; (13f78 <isr_rx_conn+0x314>)
   13c72:	f893 2114 	ldrb.w	r2, [r3, #276]	; 0x114
   13c76:	3201      	adds	r2, #1
   13c78:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	radio_pdu_node_rx = _radio.packet_rx[_radio.packet_rx_last];
   13c7c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   13c80:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   13c84:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
	radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   13c88:	2301      	movs	r3, #1
   13c8a:	712b      	strb	r3, [r5, #4]
	if (crc_ok) {
   13c8c:	4607      	mov	r7, r0
   13c8e:	2800      	cmp	r0, #0
   13c90:	d143      	bne.n	13d1a <isr_rx_conn+0xb6>
		if (_radio.crc_expire == 0) {
   13c92:	4bb9      	ldr	r3, [pc, #740]	; (13f78 <isr_rx_conn+0x314>)
   13c94:	f893 3115 	ldrb.w	r3, [r3, #277]	; 0x115
   13c98:	b91b      	cbnz	r3, 13ca2 <isr_rx_conn+0x3e>
			_radio.crc_expire = 2;
   13c9a:	2202      	movs	r2, #2
   13c9c:	4bb6      	ldr	r3, [pc, #728]	; (13f78 <isr_rx_conn+0x314>)
   13c9e:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
		_radio.crc_expire--;
   13ca2:	4bb5      	ldr	r3, [pc, #724]	; (13f78 <isr_rx_conn+0x314>)
   13ca4:	f893 4115 	ldrb.w	r4, [r3, #277]	; 0x115
   13ca8:	3c01      	subs	r4, #1
   13caa:	b2e4      	uxtb	r4, r4
   13cac:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		crc_close = (_radio.crc_expire == 0);
   13cb0:	fab4 f484 	clz	r4, r4
   13cb4:	0964      	lsrs	r4, r4, #5
		if (!_radio.conn_curr->supervision_expire) {
   13cb6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13cba:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
   13cbe:	2a00      	cmp	r2, #0
   13cc0:	f040 8387 	bne.w	143d2 <isr_rx_conn+0x76e>
				_radio.conn_curr->supervision_reload;
   13cc4:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
			_radio.conn_curr->supervision_expire =
   13cc6:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	struct radio_pdu_node_tx *tx_release = NULL;
   13cca:	2600      	movs	r6, #0
	is_empty_pdu_tx_retry = _radio.conn_curr->empty;
   13ccc:	f8df 92a8 	ldr.w	r9, [pc, #680]	; 13f78 <isr_rx_conn+0x314>
   13cd0:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   13cd4:	f890 80f8 	ldrb.w	r8, [r0, #248]	; 0xf8
   13cd8:	ea4f 18d8 	mov.w	r8, r8, lsr #7
	prepare_pdu_data_tx(_radio.conn_curr, &pdu_data_tx);
   13cdc:	a903      	add	r1, sp, #12
   13cde:	f7fe f8ef 	bl	11ec0 <prepare_pdu_data_tx>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13ce2:	f899 3010 	ldrb.w	r3, [r9, #16]
			STATE_CLOSE : STATE_TX;
   13ce6:	2b03      	cmp	r3, #3
   13ce8:	f000 8376 	beq.w	143d8 <isr_rx_conn+0x774>
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   13cec:	2c00      	cmp	r4, #0
   13cee:	f040 8372 	bne.w	143d6 <isr_rx_conn+0x772>
   13cf2:	b147      	cbz	r7, 13d06 <isr_rx_conn+0xa2>
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13cf4:	7a2b      	ldrb	r3, [r5, #8]
   13cf6:	f013 0f10 	tst.w	r3, #16
   13cfa:	d104      	bne.n	13d06 <isr_rx_conn+0xa2>
			 (pdu_data_tx->len == 0)) ||
   13cfc:	9b03      	ldr	r3, [sp, #12]
   13cfe:	785b      	ldrb	r3, [r3, #1]
			((crc_ok) && (pdu_data_rx->md == 0) &&
   13d00:	2b00      	cmp	r3, #0
   13d02:	f000 83aa 	beq.w	1445a <isr_rx_conn+0x7f6>
			_radio.conn_curr->llcp_terminate.reason_peer) ?
   13d06:	4b9c      	ldr	r3, [pc, #624]	; (13f78 <isr_rx_conn+0x314>)
   13d08:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d0c:	f893 30b3 	ldrb.w	r3, [r3, #179]	; 0xb3
			 (pdu_data_tx->len == 0)) ||
   13d10:	2b00      	cmp	r3, #0
   13d12:	f000 83a4 	beq.w	1445e <isr_rx_conn+0x7fa>
			STATE_CLOSE : STATE_TX;
   13d16:	2303      	movs	r3, #3
   13d18:	e35e      	b.n	143d8 <isr_rx_conn+0x774>
	pdu_data_rx = (struct pdu_data *)radio_pdu_node_rx->pdu_data;
   13d1a:	f105 0808 	add.w	r8, r5, #8
	if (pdu_data_rx->nesn != _radio.conn_curr->sn) {
   13d1e:	7a2a      	ldrb	r2, [r5, #8]
   13d20:	f3c2 0280 	ubfx	r2, r2, #2, #1
   13d24:	4b94      	ldr	r3, [pc, #592]	; (13f78 <isr_rx_conn+0x314>)
   13d26:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13d2a:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   13d2e:	f003 0301 	and.w	r3, r3, #1
   13d32:	429a      	cmp	r2, r3
   13d34:	f000 81cd 	beq.w	140d2 <isr_rx_conn+0x46e>
		_radio.conn_curr->sn++;
   13d38:	f083 0301 	eor.w	r3, r3, #1
   13d3c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13d40:	f363 0200 	bfi	r2, r3, #0, #1
   13d44:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		if (_radio.role == ROLE_SLAVE) {
   13d48:	4b8b      	ldr	r3, [pc, #556]	; (13f78 <isr_rx_conn+0x314>)
   13d4a:	7bdb      	ldrb	r3, [r3, #15]
   13d4c:	b2db      	uxtb	r3, r3
   13d4e:	2b03      	cmp	r3, #3
   13d50:	d02c      	beq.n	13dac <isr_rx_conn+0x148>
		if (_radio.conn_curr->empty == 0) {
   13d52:	4b89      	ldr	r3, [pc, #548]	; (13f78 <isr_rx_conn+0x314>)
   13d54:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13d58:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13d5c:	f012 0f80 	tst.w	r2, #128	; 0x80
   13d60:	f040 81ae 	bne.w	140c0 <isr_rx_conn+0x45c>
			node_tx = _radio.conn_curr->pkt_tx_head;
   13d64:	f8d3 613c 	ldr.w	r6, [r3, #316]	; 0x13c
				(node_tx->pdu_data +
   13d68:	f106 0c04 	add.w	ip, r6, #4
				 _radio.conn_curr->packet_tx_head_offset);
   13d6c:	f893 e151 	ldrb.w	lr, [r3, #337]	; 0x151
			pdu_data_tx = (struct pdu_data *)
   13d70:	eb0c 090e 	add.w	r9, ip, lr
			pdu_data_tx_len = pdu_data_tx->len;
   13d74:	f899 4001 	ldrb.w	r4, [r9, #1]
			if (pdu_data_tx_len != 0) {
   13d78:	2c00      	cmp	r4, #0
   13d7a:	f000 8145 	beq.w	14008 <isr_rx_conn+0x3a4>
				if (_radio.conn_curr->enc_tx) {
   13d7e:	f012 0f20 	tst.w	r2, #32
   13d82:	d00a      	beq.n	13d9a <isr_rx_conn+0x136>
					_radio.conn_curr->ccm_tx.counter++;
   13d84:	f8d3 012a 	ldr.w	r0, [r3, #298]	; 0x12a
   13d88:	f8d3 112e 	ldr.w	r1, [r3, #302]	; 0x12e
   13d8c:	3001      	adds	r0, #1
   13d8e:	f141 0100 	adc.w	r1, r1, #0
   13d92:	f8c3 012a 	str.w	r0, [r3, #298]	; 0x12a
   13d96:	f8c3 112e 	str.w	r1, [r3, #302]	; 0x12e
				if (pdu_data_tx->ll_id == PDU_DATA_LLID_CTRL) {
   13d9a:	f81c 300e 	ldrb.w	r3, [ip, lr]
   13d9e:	f003 0303 	and.w	r3, r3, #3
   13da2:	2b03      	cmp	r3, #3
   13da4:	d00c      	beq.n	13dc0 <isr_rx_conn+0x15c>
	u8_t terminate = 0;
   13da6:	f04f 0900 	mov.w	r9, #0
   13daa:	e12e      	b.n	1400a <isr_rx_conn+0x3a6>
			_radio.conn_curr->slave.latency_enabled = 1;
   13dac:	4b72      	ldr	r3, [pc, #456]	; (13f78 <isr_rx_conn+0x314>)
   13dae:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13db2:	f892 3050 	ldrb.w	r3, [r2, #80]	; 0x50
   13db6:	f043 0301 	orr.w	r3, r3, #1
   13dba:	f882 3050 	strb.w	r3, [r2, #80]	; 0x50
   13dbe:	e7c8      	b.n	13d52 <isr_rx_conn+0xee>
	switch (pdu_data_tx->payload.llctrl.opcode) {
   13dc0:	f899 3003 	ldrb.w	r3, [r9, #3]
   13dc4:	3b02      	subs	r3, #2
   13dc6:	2b16      	cmp	r3, #22
   13dc8:	f200 8118 	bhi.w	13ffc <isr_rx_conn+0x398>
   13dcc:	e8df f013 	tbh	[pc, r3, lsl #1]
   13dd0:	00330017 	.word	0x00330017
   13dd4:	01160057 	.word	0x01160057
   13dd8:	01160116 	.word	0x01160116
   13ddc:	01160116 	.word	0x01160116
   13de0:	007d0063 	.word	0x007d0063
   13de4:	00970116 	.word	0x00970116
   13de8:	01160116 	.word	0x01160116
   13dec:	01160116 	.word	0x01160116
   13df0:	01160116 	.word	0x01160116
   13df4:	011600af 	.word	0x011600af
   13df8:	00e000d6 	.word	0x00e000d6
   13dfc:	0106      	.short	0x0106
		_radio.state = STATE_CLOSE;
   13dfe:	2203      	movs	r2, #3
   13e00:	4b5d      	ldr	r3, [pc, #372]	; (13f78 <isr_rx_conn+0x314>)
   13e02:	741a      	strb	r2, [r3, #16]
		radio_disable();
   13e04:	f7fa fff4 	bl	edf0 <radio_disable>
		LL_ASSERT(!radio_is_ready());
   13e08:	f7fb f80c 	bl	ee24 <radio_is_ready>
   13e0c:	b958      	cbnz	r0, 13e26 <isr_rx_conn+0x1c2>
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13e0e:	4b5a      	ldr	r3, [pc, #360]	; (13f78 <isr_rx_conn+0x314>)
   13e10:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
		     (pdu_data_tx->payload.llctrl.ctrldata.terminate_ind.
   13e14:	f899 1004 	ldrb.w	r1, [r9, #4]
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13e18:	2913      	cmp	r1, #19
   13e1a:	d00a      	beq.n	13e32 <isr_rx_conn+0x1ce>
   13e1c:	f7ff fe8e 	bl	13b3c <terminate_ind_rx_enqueue>
		terminate = 1;
   13e20:	f04f 0901 	mov.w	r9, #1
   13e24:	e0f1      	b.n	1400a <isr_rx_conn+0x3a6>
		LL_ASSERT(!radio_is_ready());
   13e26:	4040      	eors	r0, r0
   13e28:	f380 8811 	msr	BASEPRI, r0
   13e2c:	f04f 0004 	mov.w	r0, #4
   13e30:	df02      	svc	2
		terminate_ind_rx_enqueue(_radio.conn_curr,
   13e32:	2116      	movs	r1, #22
   13e34:	e7f2      	b.n	13e1c <isr_rx_conn+0x1b8>
		memcpy(&_radio.conn_curr->llcp.encryption.skd[0],
   13e36:	f8df a140 	ldr.w	sl, [pc, #320]	; 13f78 <isr_rx_conn+0x314>
   13e3a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13e3e:	2208      	movs	r2, #8
   13e40:	f109 010e 	add.w	r1, r9, #14
   13e44:	3093      	adds	r0, #147	; 0x93
   13e46:	f7ec fa3b 	bl	2c0 <memcpy>
		memcpy(&_radio.conn_curr->ccm_rx.iv[0],
   13e4a:	f8da 0110 	ldr.w	r0, [sl, #272]	; 0x110
   13e4e:	2204      	movs	r2, #4
   13e50:	f109 0116 	add.w	r1, r9, #22
   13e54:	f500 7089 	add.w	r0, r0, #274	; 0x112
   13e58:	f7ec fa32 	bl	2c0 <memcpy>
		_radio.conn_curr->pause_tx = 1;
   13e5c:	f8da 2110 	ldr.w	r2, [sl, #272]	; 0x110
   13e60:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13e64:	f043 0308 	orr.w	r3, r3, #8
   13e68:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13e6c:	f8da 3110 	ldr.w	r3, [sl, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13e70:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13e74:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13e78:	f04f 0900 	mov.w	r9, #0
   13e7c:	e0c5      	b.n	1400a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13e7e:	4b3e      	ldr	r3, [pc, #248]	; (13f78 <isr_rx_conn+0x314>)
   13e80:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13e84:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13e88:	f043 0308 	orr.w	r3, r3, #8
   13e8c:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13e90:	f04f 0900 	mov.w	r9, #0
   13e94:	e0b9      	b.n	1400a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_tx = 1;
   13e96:	4b38      	ldr	r3, [pc, #224]	; (13f78 <isr_rx_conn+0x314>)
   13e98:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13e9c:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13ea0:	f042 0208 	orr.w	r2, r2, #8
   13ea4:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->refresh = 1;
   13ea8:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   13eac:	f891 20f8 	ldrb.w	r2, [r1, #248]	; 0xf8
   13eb0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   13eb4:	f881 20f8 	strb.w	r2, [r1, #248]	; 0xf8
		_radio.conn_curr->procedure_expire =
   13eb8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->procedure_reload;
   13ebc:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
		_radio.conn_curr->procedure_expire =
   13ec0:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
	u8_t terminate = 0;
   13ec4:	f04f 0900 	mov.w	r9, #0
   13ec8:	e09f      	b.n	1400a <isr_rx_conn+0x3a6>
		if (_radio.role == ROLE_MASTER) {
   13eca:	4b2b      	ldr	r3, [pc, #172]	; (13f78 <isr_rx_conn+0x314>)
   13ecc:	7bdb      	ldrb	r3, [r3, #15]
   13ece:	b2db      	uxtb	r3, r3
   13ed0:	2b04      	cmp	r3, #4
   13ed2:	d00b      	beq.n	13eec <isr_rx_conn+0x288>
			_radio.conn_curr->pause_tx = 1;
   13ed4:	4b28      	ldr	r3, [pc, #160]	; (13f78 <isr_rx_conn+0x314>)
   13ed6:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13eda:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   13ede:	f043 0308 	orr.w	r3, r3, #8
   13ee2:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
	u8_t terminate = 0;
   13ee6:	f04f 0900 	mov.w	r9, #0
   13eea:	e08e      	b.n	1400a <isr_rx_conn+0x3a6>
			enc_req_reused_send(_radio.conn_curr, *node_tx);
   13eec:	4631      	mov	r1, r6
   13eee:	4b22      	ldr	r3, [pc, #136]	; (13f78 <isr_rx_conn+0x314>)
   13ef0:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   13ef4:	f7fe fd38 	bl	12968 <enc_req_reused_send>
			*node_tx = NULL;
   13ef8:	2600      	movs	r6, #0
	u8_t terminate = 0;
   13efa:	46b1      	mov	r9, r6
   13efc:	e085      	b.n	1400a <isr_rx_conn+0x3a6>
		_radio.conn_curr->pause_rx = 0;
   13efe:	4b1e      	ldr	r3, [pc, #120]	; (13f78 <isr_rx_conn+0x314>)
   13f00:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f04:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13f08:	f36f 0182 	bfc	r1, #2, #1
   13f0c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->pause_tx = 0;
   13f10:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   13f14:	f892 10f8 	ldrb.w	r1, [r2, #248]	; 0xf8
   13f18:	f36f 01c3 	bfc	r1, #3, #1
   13f1c:	f882 10f8 	strb.w	r1, [r2, #248]	; 0xf8
		_radio.conn_curr->procedure_expire = 0;
   13f20:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f24:	f04f 0900 	mov.w	r9, #0
   13f28:	f8a3 9044 	strh.w	r9, [r3, #68]	; 0x44
   13f2c:	e06d      	b.n	1400a <isr_rx_conn+0x3a6>
		if ((_radio.conn_curr->llcp_length.req !=
   13f2e:	4b12      	ldr	r3, [pc, #72]	; (13f78 <isr_rx_conn+0x314>)
   13f30:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f34:	f893 10e8 	ldrb.w	r1, [r3, #232]	; 0xe8
		     _radio.conn_curr->llcp_length.ack) &&
   13f38:	f893 20e9 	ldrb.w	r2, [r3, #233]	; 0xe9
		if ((_radio.conn_curr->llcp_length.req !=
   13f3c:	4291      	cmp	r1, r2
   13f3e:	d060      	beq.n	14002 <isr_rx_conn+0x39e>
		    (_radio.conn_curr->llcp_length.state ==
   13f40:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13f44:	f002 0203 	and.w	r2, r2, #3
		     _radio.conn_curr->llcp_length.ack) &&
   13f48:	2a01      	cmp	r2, #1
   13f4a:	d002      	beq.n	13f52 <isr_rx_conn+0x2ee>
	u8_t terminate = 0;
   13f4c:	f04f 0900 	mov.w	r9, #0
   13f50:	e05b      	b.n	1400a <isr_rx_conn+0x3a6>
			_radio.conn_curr->pause_tx = 1;
   13f52:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   13f56:	f042 0208 	orr.w	r2, r2, #8
   13f5a:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->llcp_length.state =
   13f5e:	4b06      	ldr	r3, [pc, #24]	; (13f78 <isr_rx_conn+0x314>)
   13f60:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f64:	f893 20ea 	ldrb.w	r2, [r3, #234]	; 0xea
   13f68:	2102      	movs	r1, #2
   13f6a:	f361 0201 	bfi	r2, r1, #0, #2
   13f6e:	f883 20ea 	strb.w	r2, [r3, #234]	; 0xea
	u8_t terminate = 0;
   13f72:	f04f 0900 	mov.w	r9, #0
   13f76:	e048      	b.n	1400a <isr_rx_conn+0x3a6>
   13f78:	20000f84 	.word	0x20000f84
		_radio.conn_curr->llcp_phy.state = LLCP_PHY_STATE_RSP_WAIT;
   13f7c:	4bbe      	ldr	r3, [pc, #760]	; (14278 <isr_rx_conn+0x614>)
   13f7e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   13f82:	f893 20f6 	ldrb.w	r2, [r3, #246]	; 0xf6
   13f86:	2102      	movs	r1, #2
   13f88:	f361 0201 	bfi	r2, r1, #0, #2
   13f8c:	f883 20f6 	strb.w	r2, [r3, #246]	; 0xf6
		if (_radio.role == ROLE_SLAVE) {
   13f90:	4bb9      	ldr	r3, [pc, #740]	; (14278 <isr_rx_conn+0x614>)
   13f92:	7bdb      	ldrb	r3, [r3, #15]
   13f94:	b2db      	uxtb	r3, r3
   13f96:	2b03      	cmp	r3, #3
   13f98:	d002      	beq.n	13fa0 <isr_rx_conn+0x33c>
	u8_t terminate = 0;
   13f9a:	f04f 0900 	mov.w	r9, #0
   13f9e:	e034      	b.n	1400a <isr_rx_conn+0x3a6>
	u8_t phy_tx_time[8] = {BIT(0), BIT(0), BIT(1), BIT(0),
   13fa0:	4ab6      	ldr	r2, [pc, #728]	; (1427c <isr_rx_conn+0x618>)
   13fa2:	e892 0003 	ldmia.w	r2, {r0, r1}
   13fa6:	e88d 0003 	stmia.w	sp, {r0, r1}
	struct connection *conn = _radio.conn_curr;
   13faa:	4bb3      	ldr	r3, [pc, #716]	; (14278 <isr_rx_conn+0x614>)
   13fac:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
	u8_t phys = conn->llcp_phy.tx | conn->phy_tx;
   13fb0:	f892 30f6 	ldrb.w	r3, [r2, #246]	; 0xf6
   13fb4:	f3c3 0382 	ubfx	r3, r3, #2, #3
   13fb8:	f892 1038 	ldrb.w	r1, [r2, #56]	; 0x38
   13fbc:	f3c1 01c2 	ubfx	r1, r1, #3, #3
   13fc0:	430b      	orrs	r3, r1
	conn->phy_tx_time = phy_tx_time[phys];
   13fc2:	a904      	add	r1, sp, #16
   13fc4:	440b      	add	r3, r1
   13fc6:	f813 1c10 	ldrb.w	r1, [r3, #-16]
   13fca:	f892 3039 	ldrb.w	r3, [r2, #57]	; 0x39
   13fce:	f361 0302 	bfi	r3, r1, #0, #3
   13fd2:	f882 3039 	strb.w	r3, [r2, #57]	; 0x39
	u8_t terminate = 0;
   13fd6:	f04f 0900 	mov.w	r9, #0
   13fda:	e016      	b.n	1400a <isr_rx_conn+0x3a6>
		_radio.conn_curr->phy_tx_time =
   13fdc:	4ba6      	ldr	r3, [pc, #664]	; (14278 <isr_rx_conn+0x614>)
   13fde:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
			_radio.conn_curr->llcp.phy_upd_ind.tx;
   13fe2:	f893 2078 	ldrb.w	r2, [r3, #120]	; 0x78
   13fe6:	f3c2 0282 	ubfx	r2, r2, #2, #3
		_radio.conn_curr->phy_tx_time =
   13fea:	f893 1039 	ldrb.w	r1, [r3, #57]	; 0x39
   13fee:	f362 0102 	bfi	r1, r2, #0, #3
   13ff2:	f883 1039 	strb.w	r1, [r3, #57]	; 0x39
	u8_t terminate = 0;
   13ff6:	f04f 0900 	mov.w	r9, #0
   13ffa:	e006      	b.n	1400a <isr_rx_conn+0x3a6>
   13ffc:	f04f 0900 	mov.w	r9, #0
   14000:	e003      	b.n	1400a <isr_rx_conn+0x3a6>
   14002:	f04f 0900 	mov.w	r9, #0
   14006:	e000      	b.n	1400a <isr_rx_conn+0x3a6>
	u8_t terminate = 0;
   14008:	46a1      	mov	r9, r4
			_radio.conn_curr->packet_tx_head_offset += pdu_data_tx_len;
   1400a:	4b9b      	ldr	r3, [pc, #620]	; (14278 <isr_rx_conn+0x614>)
   1400c:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14010:	f893 2151 	ldrb.w	r2, [r3, #337]	; 0x151
   14014:	4414      	add	r4, r2
   14016:	b2e4      	uxtb	r4, r4
   14018:	f883 4151 	strb.w	r4, [r3, #337]	; 0x151
			    _radio.conn_curr->packet_tx_head_len) {
   1401c:	f893 3150 	ldrb.w	r3, [r3, #336]	; 0x150
			if (_radio.conn_curr->packet_tx_head_offset ==
   14020:	429c      	cmp	r4, r3
   14022:	d01c      	beq.n	1405e <isr_rx_conn+0x3fa>
	struct radio_pdu_node_tx *tx_release = NULL;
   14024:	2600      	movs	r6, #0
	if (terminate) {
   14026:	f1b9 0f00 	cmp.w	r9, #0
   1402a:	d155      	bne.n	140d8 <isr_rx_conn+0x474>
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   1402c:	7a2a      	ldrb	r2, [r5, #8]
   1402e:	f3c2 02c0 	ubfx	r2, r2, #3, #1
   14032:	4b91      	ldr	r3, [pc, #580]	; (14278 <isr_rx_conn+0x614>)
   14034:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14038:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   1403c:	f3c3 0340 	ubfx	r3, r3, #1, #1
   14040:	429a      	cmp	r2, r3
   14042:	d053      	beq.n	140ec <isr_rx_conn+0x488>
	return 0;
   14044:	2300      	movs	r3, #0
		if (terminate) {
   14046:	2b00      	cmp	r3, #0
   14048:	f040 81f5 	bne.w	14436 <isr_rx_conn+0x7d2>
		_radio.crc_expire = 0;
   1404c:	4b8a      	ldr	r3, [pc, #552]	; (14278 <isr_rx_conn+0x614>)
   1404e:	2400      	movs	r4, #0
   14050:	f883 4115 	strb.w	r4, [r3, #277]	; 0x115
		_radio.conn_curr->supervision_expire = 0;
   14054:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14058:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
   1405c:	e636      	b.n	13ccc <isr_rx_conn+0x68>
	struct connection *conn = _radio.conn_curr;
   1405e:	4b86      	ldr	r3, [pc, #536]	; (14278 <isr_rx_conn+0x614>)
   14060:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
	conn->packet_tx_head_len = 0;
   14064:	2200      	movs	r2, #0
   14066:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   1406a:	f883 2151 	strb.w	r2, [r3, #337]	; 0x151
	if (conn->pkt_tx_head == conn->pkt_tx_ctrl) {
   1406e:	f8d3 213c 	ldr.w	r2, [r3, #316]	; 0x13c
   14072:	f8d3 1140 	ldr.w	r1, [r3, #320]	; 0x140
   14076:	428a      	cmp	r2, r1
   14078:	d007      	beq.n	1408a <isr_rx_conn+0x426>
		if (conn->pkt_tx_head == conn->pkt_tx_data) {
   1407a:	f8d3 1148 	ldr.w	r1, [r3, #328]	; 0x148
   1407e:	428a      	cmp	r2, r1
   14080:	d01a      	beq.n	140b8 <isr_rx_conn+0x454>
		conn->pkt_tx_head = conn->pkt_tx_head->next;
   14082:	6812      	ldr	r2, [r2, #0]
   14084:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
   14088:	e7cd      	b.n	14026 <isr_rx_conn+0x3c2>
		if (node_tx) {
   1408a:	2e00      	cmp	r6, #0
   1408c:	d0cb      	beq.n	14026 <isr_rx_conn+0x3c2>
			conn->pkt_tx_head = conn->pkt_tx_head->next;
   1408e:	6812      	ldr	r2, [r2, #0]
   14090:	f8c3 213c 	str.w	r2, [r3, #316]	; 0x13c
			if (conn->pkt_tx_ctrl == conn->pkt_tx_ctrl_last) {
   14094:	f8d3 0144 	ldr.w	r0, [r3, #324]	; 0x144
   14098:	4281      	cmp	r1, r0
   1409a:	d007      	beq.n	140ac <isr_rx_conn+0x448>
				conn->pkt_tx_ctrl = conn->pkt_tx_head;
   1409c:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
			mem_release(node_tx, &_radio. pkt_tx_ctrl_free);
   140a0:	4977      	ldr	r1, [pc, #476]	; (14280 <isr_rx_conn+0x61c>)
   140a2:	4630      	mov	r0, r6
   140a4:	f7fa fcab 	bl	e9fe <mem_release>
	return NULL;
   140a8:	2600      	movs	r6, #0
   140aa:	e7bc      	b.n	14026 <isr_rx_conn+0x3c2>
				conn->pkt_tx_ctrl = NULL;
   140ac:	2200      	movs	r2, #0
   140ae:	f8c3 2140 	str.w	r2, [r3, #320]	; 0x140
				conn->pkt_tx_ctrl_last = NULL;
   140b2:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
   140b6:	e7f3      	b.n	140a0 <isr_rx_conn+0x43c>
			conn->pkt_tx_data = conn->pkt_tx_data->next;
   140b8:	6809      	ldr	r1, [r1, #0]
   140ba:	f8c3 1148 	str.w	r1, [r3, #328]	; 0x148
   140be:	e7e0      	b.n	14082 <isr_rx_conn+0x41e>
			_radio.conn_curr->empty = 0;
   140c0:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   140c4:	f36f 12c7 	bfc	r2, #7, #1
   140c8:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	struct radio_pdu_node_tx *tx_release = NULL;
   140cc:	2600      	movs	r6, #0
	u8_t terminate = 0;
   140ce:	46b1      	mov	r9, r6
   140d0:	e7a9      	b.n	14026 <isr_rx_conn+0x3c2>
	struct radio_pdu_node_tx *tx_release = NULL;
   140d2:	2600      	movs	r6, #0
	u8_t terminate = 0;
   140d4:	46b1      	mov	r9, r6
   140d6:	e7a6      	b.n	14026 <isr_rx_conn+0x3c2>
		connection_release(_radio.conn_curr);
   140d8:	4c67      	ldr	r4, [pc, #412]	; (14278 <isr_rx_conn+0x614>)
   140da:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   140de:	f7fd fdd9 	bl	11c94 <connection_release>
		_radio.conn_curr = NULL;
   140e2:	2300      	movs	r3, #0
   140e4:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
		return terminate;
   140e8:	464b      	mov	r3, r9
   140ea:	e7ac      	b.n	14046 <isr_rx_conn+0x3e2>
	if (_radio.packet_rx_acquire >=
   140ec:	4a62      	ldr	r2, [pc, #392]	; (14278 <isr_rx_conn+0x614>)
   140ee:	f892 013e 	ldrb.w	r0, [r2, #318]	; 0x13e
	    _radio.packet_rx_last) {
   140f2:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   140f6:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   140f8:	4290      	cmp	r0, r2
   140fa:	d347      	bcc.n	1418c <isr_rx_conn+0x528>
			_radio.packet_rx_last);
   140fc:	4b5e      	ldr	r3, [pc, #376]	; (14278 <isr_rx_conn+0x614>)
   140fe:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14102:	1ac3      	subs	r3, r0, r3
   14104:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14106:	2b02      	cmp	r3, #2
   14108:	d94a      	bls.n	141a0 <isr_rx_conn+0x53c>
	return _radio.packet_rx[_radio.packet_rx_last];
   1410a:	4b5b      	ldr	r3, [pc, #364]	; (14278 <isr_rx_conn+0x614>)
   1410c:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14110:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14114:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if ((pdu_data_rx->sn == _radio.conn_curr->nesn) &&
   14118:	2b00      	cmp	r3, #0
   1411a:	f000 814e 	beq.w	143ba <isr_rx_conn+0x756>
	    ((_radio.fc_ena == 0) ||
   1411e:	4b56      	ldr	r3, [pc, #344]	; (14278 <isr_rx_conn+0x614>)
   14120:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
	    (packet_rx_reserve_get(3) != 0) &&
   14124:	2b00      	cmp	r3, #0
   14126:	d045      	beq.n	141b4 <isr_rx_conn+0x550>
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   14128:	4b53      	ldr	r3, [pc, #332]	; (14278 <isr_rx_conn+0x614>)
   1412a:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   1412e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	    ((_radio.fc_ena == 0) ||
   14132:	429a      	cmp	r2, r3
   14134:	d036      	beq.n	141a4 <isr_rx_conn+0x540>
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   14136:	4b50      	ldr	r3, [pc, #320]	; (14278 <isr_rx_conn+0x614>)
   14138:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
	      (_radio.fc_req == _radio.fc_ack)) ||
   1413c:	429a      	cmp	r2, r3
   1413e:	f000 813e 	beq.w	143be <isr_rx_conn+0x75a>
	      (_radio.fc_req != _radio.fc_ack) &&
   14142:	4a4d      	ldr	r2, [pc, #308]	; (14278 <isr_rx_conn+0x614>)
   14144:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   14148:	b2db      	uxtb	r3, r3
   1414a:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	     ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1414e:	4293      	cmp	r3, r2
   14150:	f000 8137 	beq.w	143c2 <isr_rx_conn+0x75e>
		(((_radio.fc_req == 0) &&
   14154:	4b48      	ldr	r3, [pc, #288]	; (14278 <isr_rx_conn+0x614>)
   14156:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
	      (_radio.fc_req != _radio.fc_ack) &&
   1415a:	b92b      	cbnz	r3, 14168 <isr_rx_conn+0x504>
		  (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] ==
   1415c:	4b46      	ldr	r3, [pc, #280]	; (14278 <isr_rx_conn+0x614>)
   1415e:	f8b3 217a 	ldrh.w	r2, [r3, #378]	; 0x17a
		   _radio.conn_curr->handle)) ||
   14162:	8c0b      	ldrh	r3, [r1, #32]
		(((_radio.fc_req == 0) &&
   14164:	429a      	cmp	r2, r3
   14166:	d025      	beq.n	141b4 <isr_rx_conn+0x550>
		 ((_radio.fc_req != 0) &&
   14168:	4b43      	ldr	r3, [pc, #268]	; (14278 <isr_rx_conn+0x614>)
   1416a:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
		   _radio.conn_curr->handle)) ||
   1416e:	2b00      	cmp	r3, #0
   14170:	f000 8129 	beq.w	143c6 <isr_rx_conn+0x762>
		  (_radio.fc_handle[_radio.fc_req - 1] ==
   14174:	4b40      	ldr	r3, [pc, #256]	; (14278 <isr_rx_conn+0x614>)
   14176:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   1417a:	32b7      	adds	r2, #183	; 0xb7
   1417c:	eb03 0342 	add.w	r3, r3, r2, lsl #1
   14180:	88da      	ldrh	r2, [r3, #6]
		   _radio.conn_curr->handle)))))) {
   14182:	8c0b      	ldrh	r3, [r1, #32]
		 ((_radio.fc_req != 0) &&
   14184:	429a      	cmp	r2, r3
   14186:	d015      	beq.n	141b4 <isr_rx_conn+0x550>
	return 0;
   14188:	2300      	movs	r3, #0
   1418a:	e75c      	b.n	14046 <isr_rx_conn+0x3e2>
		return (_radio.packet_rx_count -
   1418c:	4a3a      	ldr	r2, [pc, #232]	; (14278 <isr_rx_conn+0x614>)
   1418e:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   14192:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14196:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   14198:	fa50 f383 	uxtab	r3, r0, r3
   1419c:	b2db      	uxtb	r3, r3
   1419e:	e7b2      	b.n	14106 <isr_rx_conn+0x4a2>
		return 0;
   141a0:	2300      	movs	r3, #0
   141a2:	e7b9      	b.n	14118 <isr_rx_conn+0x4b4>
	      (_radio.fc_req == _radio.fc_ack)) ||
   141a4:	4834      	ldr	r0, [pc, #208]	; (14278 <isr_rx_conn+0x614>)
   141a6:	f890 317c 	ldrb.w	r3, [r0, #380]	; 0x17c
   141aa:	b2db      	uxtb	r3, r3
   141ac:	f890 017d 	ldrb.w	r0, [r0, #381]	; 0x17d
	     ((_radio.link_rx_head == _radio.link_rx_tail) &&
   141b0:	4283      	cmp	r3, r0
   141b2:	d1c0      	bne.n	14136 <isr_rx_conn+0x4d2>
		if (pdu_data_rx->len != 0) {
   141b4:	7a68      	ldrb	r0, [r5, #9]
   141b6:	2800      	cmp	r0, #0
   141b8:	f000 80b8 	beq.w	1432c <isr_rx_conn+0x6c8>
			if (_radio.conn_curr->enc_rx) {
   141bc:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   141c0:	f013 0f10 	tst.w	r3, #16
   141c4:	d133      	bne.n	1422e <isr_rx_conn+0x5ca>
		u8_t ccm_rx_increment = 0;
   141c6:	464c      	mov	r4, r9
			if ((_radio.conn_curr->enc_rx &&
   141c8:	4b2b      	ldr	r3, [pc, #172]	; (14278 <isr_rx_conn+0x614>)
   141ca:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   141ce:	f893 30f8 	ldrb.w	r3, [r3, #248]	; 0xf8
   141d2:	f013 0f10 	tst.w	r3, #16
   141d6:	d135      	bne.n	14244 <isr_rx_conn+0x5e0>
			    (_radio.conn_curr->pause_rx &&
   141d8:	4b27      	ldr	r3, [pc, #156]	; (14278 <isr_rx_conn+0x614>)
   141da:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   141de:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
			     !radio_ccm_mic_is_valid()) ||
   141e2:	f012 0f04 	tst.w	r2, #4
   141e6:	f000 8082 	beq.w	142ee <isr_rx_conn+0x68a>
	u8_t opcode = pdu_data->payload.llctrl.opcode;
   141ea:	f898 1003 	ldrb.w	r1, [r8, #3]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   141ee:	7a2a      	ldrb	r2, [r5, #8]
   141f0:	f002 0203 	and.w	r2, r2, #3
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   141f4:	2a03      	cmp	r2, #3
   141f6:	d02a      	beq.n	1424e <isr_rx_conn+0x5ea>
   141f8:	2201      	movs	r2, #1
			    (_radio.conn_curr->pause_rx &&
   141fa:	2a00      	cmp	r2, #0
   141fc:	d077      	beq.n	142ee <isr_rx_conn+0x68a>
				_radio.state = STATE_CLOSE;
   141fe:	2203      	movs	r2, #3
   14200:	4b1d      	ldr	r3, [pc, #116]	; (14278 <isr_rx_conn+0x614>)
   14202:	741a      	strb	r2, [r3, #16]
				radio_disable();
   14204:	f7fa fdf4 	bl	edf0 <radio_disable>
				LL_ASSERT(!radio_is_ready());
   14208:	f7fa fe0c 	bl	ee24 <radio_is_ready>
   1420c:	2800      	cmp	r0, #0
   1420e:	d168      	bne.n	142e2 <isr_rx_conn+0x67e>
				terminate_ind_rx_enqueue(_radio.conn_curr,
   14210:	4c19      	ldr	r4, [pc, #100]	; (14278 <isr_rx_conn+0x614>)
   14212:	213d      	movs	r1, #61	; 0x3d
   14214:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14218:	f7ff fc90 	bl	13b3c <terminate_ind_rx_enqueue>
				connection_release(_radio.conn_curr);
   1421c:	f8d4 0110 	ldr.w	r0, [r4, #272]	; 0x110
   14220:	f7fd fd38 	bl	11c94 <connection_release>
				_radio.conn_curr = NULL;
   14224:	2300      	movs	r3, #0
   14226:	f8c4 3110 	str.w	r3, [r4, #272]	; 0x110
				return 1; /* terminated */
   1422a:	2301      	movs	r3, #1
   1422c:	e70b      	b.n	14046 <isr_rx_conn+0x3e2>
				done = radio_ccm_is_done();
   1422e:	f7fb f821 	bl	f274 <radio_ccm_is_done>
				LL_ASSERT(done);
   14232:	b108      	cbz	r0, 14238 <isr_rx_conn+0x5d4>
				ccm_rx_increment = 1;
   14234:	2401      	movs	r4, #1
   14236:	e7c7      	b.n	141c8 <isr_rx_conn+0x564>
				LL_ASSERT(done);
   14238:	4040      	eors	r0, r0
   1423a:	f380 8811 	msr	BASEPRI, r0
   1423e:	f04f 0004 	mov.w	r0, #4
   14242:	df02      	svc	2
			     !radio_ccm_mic_is_valid()) ||
   14244:	f7fb f836 	bl	f2b4 <radio_ccm_mic_is_valid>
			if ((_radio.conn_curr->enc_rx &&
   14248:	2800      	cmp	r0, #0
   1424a:	d0d8      	beq.n	141fe <isr_rx_conn+0x59a>
   1424c:	e7c4      	b.n	141d8 <isr_rx_conn+0x574>
   1424e:	f993 201d 	ldrsb.w	r2, [r3, #29]
	return (pdu_data->ll_id != PDU_DATA_LLID_CTRL) ||
   14252:	2a00      	cmp	r2, #0
   14254:	db1d      	blt.n	14292 <isr_rx_conn+0x62e>
		((!conn->refresh &&
   14256:	f893 00f8 	ldrb.w	r0, [r3, #248]	; 0xf8
	       (!conn->role &&
   1425a:	f010 0040 	ands.w	r0, r0, #64	; 0x40
   1425e:	d111      	bne.n	14284 <isr_rx_conn+0x620>
		((!conn->refresh &&
   14260:	2902      	cmp	r1, #2
   14262:	d00f      	beq.n	14284 <isr_rx_conn+0x620>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14264:	2905      	cmp	r1, #5
   14266:	d014      	beq.n	14292 <isr_rx_conn+0x62e>
   14268:	2906      	cmp	r1, #6
   1426a:	d012      	beq.n	14292 <isr_rx_conn+0x62e>
   1426c:	290d      	cmp	r1, #13
   1426e:	d010      	beq.n	14292 <isr_rx_conn+0x62e>
   14270:	2911      	cmp	r1, #17
   14272:	d00e      	beq.n	14292 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14274:	2201      	movs	r2, #1
   14276:	e7c0      	b.n	141fa <isr_rx_conn+0x596>
   14278:	20000f84 	.word	0x20000f84
   1427c:	0002a658 	.word	0x0002a658
   14280:	200010dc 	.word	0x200010dc
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   14284:	b128      	cbz	r0, 14292 <isr_rx_conn+0x62e>
		 (conn->refresh &&
   14286:	2902      	cmp	r1, #2
   14288:	d003      	beq.n	14292 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   1428a:	290b      	cmp	r1, #11
   1428c:	d001      	beq.n	14292 <isr_rx_conn+0x62e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   1428e:	2904      	cmp	r1, #4
   14290:	d1e8      	bne.n	14264 <isr_rx_conn+0x600>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   14292:	2a00      	cmp	r2, #0
   14294:	db01      	blt.n	1429a <isr_rx_conn+0x636>
   14296:	2200      	movs	r2, #0
   14298:	e7af      	b.n	141fa <isr_rx_conn+0x596>
		((!conn->refresh &&
   1429a:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	       (conn->role &&
   1429e:	f012 0240 	ands.w	r2, r2, #64	; 0x40
   142a2:	d109      	bne.n	142b8 <isr_rx_conn+0x654>
		((!conn->refresh &&
   142a4:	2902      	cmp	r1, #2
   142a6:	d007      	beq.n	142b8 <isr_rx_conn+0x654>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   142a8:	2906      	cmp	r1, #6
   142aa:	d014      	beq.n	142d6 <isr_rx_conn+0x672>
   142ac:	290d      	cmp	r1, #13
   142ae:	d014      	beq.n	142da <isr_rx_conn+0x676>
   142b0:	2911      	cmp	r1, #17
   142b2:	d114      	bne.n	142de <isr_rx_conn+0x67a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   142b4:	2200      	movs	r2, #0
   142b6:	e7a0      	b.n	141fa <isr_rx_conn+0x596>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)) ||
   142b8:	b13a      	cbz	r2, 142ca <isr_rx_conn+0x666>
		 (conn->refresh &&
   142ba:	2902      	cmp	r1, #2
   142bc:	d007      	beq.n	142ce <isr_rx_conn+0x66a>
		  (opcode != PDU_DATA_LLCTRL_TYPE_TERMINATE_IND) &&
   142be:	290b      	cmp	r1, #11
   142c0:	d007      	beq.n	142d2 <isr_rx_conn+0x66e>
		  (opcode != PDU_DATA_LLCTRL_TYPE_PAUSE_ENC_RSP) &&
   142c2:	2903      	cmp	r1, #3
   142c4:	d1f0      	bne.n	142a8 <isr_rx_conn+0x644>
		  (opcode != PDU_DATA_LLCTRL_TYPE_REJECT_EXT_IND)))) ||
   142c6:	2200      	movs	r2, #0
   142c8:	e797      	b.n	141fa <isr_rx_conn+0x596>
   142ca:	2200      	movs	r2, #0
   142cc:	e795      	b.n	141fa <isr_rx_conn+0x596>
   142ce:	2200      	movs	r2, #0
   142d0:	e793      	b.n	141fa <isr_rx_conn+0x596>
   142d2:	2200      	movs	r2, #0
   142d4:	e791      	b.n	141fa <isr_rx_conn+0x596>
   142d6:	2200      	movs	r2, #0
   142d8:	e78f      	b.n	141fa <isr_rx_conn+0x596>
   142da:	2200      	movs	r2, #0
   142dc:	e78d      	b.n	141fa <isr_rx_conn+0x596>
   142de:	2201      	movs	r2, #1
   142e0:	e78b      	b.n	141fa <isr_rx_conn+0x596>
				LL_ASSERT(!radio_is_ready());
   142e2:	4040      	eors	r0, r0
   142e4:	f380 8811 	msr	BASEPRI, r0
   142e8:	f04f 0004 	mov.w	r0, #4
   142ec:	df02      	svc	2
			_radio.conn_curr->appto_expire = 0;
   142ee:	2200      	movs	r2, #0
   142f0:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
			_radio.conn_curr->apto_expire = 0;
   142f4:	4b70      	ldr	r3, [pc, #448]	; (144b8 <isr_rx_conn+0x854>)
   142f6:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   142fa:	f8a3 204c 	strh.w	r2, [r3, #76]	; 0x4c
			switch (pdu_data_rx->ll_id) {
   142fe:	7a2b      	ldrb	r3, [r5, #8]
   14300:	f013 0303 	ands.w	r3, r3, #3
   14304:	d00c      	beq.n	14320 <isr_rx_conn+0x6bc>
   14306:	2b02      	cmp	r3, #2
   14308:	d905      	bls.n	14316 <isr_rx_conn+0x6b2>
				nack = isr_rx_conn_pkt_ctrl(radio_pdu_node_rx,
   1430a:	f10d 010b 	add.w	r1, sp, #11
   1430e:	4628      	mov	r0, r5
   14310:	f7fe fb4c 	bl	129ac <isr_rx_conn_pkt_ctrl>
   14314:	e030      	b.n	14378 <isr_rx_conn+0x714>
				*rx_enqueue = 1;
   14316:	2301      	movs	r3, #1
   14318:	f88d 300b 	strb.w	r3, [sp, #11]
	u8_t nack = 0;
   1431c:	4648      	mov	r0, r9
   1431e:	e02b      	b.n	14378 <isr_rx_conn+0x714>
				LL_ASSERT(0);
   14320:	4040      	eors	r0, r0
   14322:	f380 8811 	msr	BASEPRI, r0
   14326:	f04f 0004 	mov.w	r0, #4
   1432a:	df02      	svc	2
		} else if ((_radio.conn_curr->enc_rx) ||
   1432c:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14330:	f013 0f14 	tst.w	r3, #20
   14334:	d01f      	beq.n	14376 <isr_rx_conn+0x712>
			appto_reload_new = (conn->apto_reload >
   14336:	f8b1 204a 	ldrh.w	r2, [r1, #74]	; 0x4a
					    (conn->latency + 6)) ?
   1433a:	8ccb      	ldrh	r3, [r1, #38]	; 0x26
   1433c:	1d9c      	adds	r4, r3, #6
			appto_reload_new = (conn->apto_reload >
   1433e:	42a2      	cmp	r2, r4
   14340:	dd04      	ble.n	1434c <isr_rx_conn+0x6e8>
					   (conn->apto_reload -
   14342:	1ad3      	subs	r3, r2, r3
   14344:	b29b      	uxth	r3, r3
			appto_reload_new = (conn->apto_reload >
   14346:	3b06      	subs	r3, #6
   14348:	b29b      	uxth	r3, r3
   1434a:	e000      	b.n	1434e <isr_rx_conn+0x6ea>
   1434c:	4613      	mov	r3, r2
			if (conn->appto_reload != appto_reload_new) {
   1434e:	f8b1 4046 	ldrh.w	r4, [r1, #70]	; 0x46
   14352:	429c      	cmp	r4, r3
   14354:	d004      	beq.n	14360 <isr_rx_conn+0x6fc>
				conn->appto_reload = appto_reload_new;
   14356:	f8a1 3046 	strh.w	r3, [r1, #70]	; 0x46
				conn->apto_expire = 0;
   1435a:	2300      	movs	r3, #0
   1435c:	f8a1 304c 	strh.w	r3, [r1, #76]	; 0x4c
			if (conn->apto_expire == 0) {
   14360:	f8b1 304c 	ldrh.w	r3, [r1, #76]	; 0x4c
   14364:	bb3b      	cbnz	r3, 143b6 <isr_rx_conn+0x752>
				conn->appto_expire = conn->appto_reload;
   14366:	f8b1 3046 	ldrh.w	r3, [r1, #70]	; 0x46
   1436a:	f8a1 3048 	strh.w	r3, [r1, #72]	; 0x48
				conn->apto_expire = conn->apto_reload;
   1436e:	f8a1 204c 	strh.w	r2, [r1, #76]	; 0x4c
		u8_t ccm_rx_increment = 0;
   14372:	4604      	mov	r4, r0
   14374:	e000      	b.n	14378 <isr_rx_conn+0x714>
   14376:	4604      	mov	r4, r0
		if (!nack) {
   14378:	bb38      	cbnz	r0, 143ca <isr_rx_conn+0x766>
			_radio.conn_curr->nesn++;
   1437a:	4b4f      	ldr	r3, [pc, #316]	; (144b8 <isr_rx_conn+0x854>)
   1437c:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14380:	f891 30f8 	ldrb.w	r3, [r1, #248]	; 0xf8
   14384:	f3c3 0240 	ubfx	r2, r3, #1, #1
   14388:	f082 0201 	eor.w	r2, r2, #1
   1438c:	f362 0341 	bfi	r3, r2, #1, #1
   14390:	f881 30f8 	strb.w	r3, [r1, #248]	; 0xf8
			if (ccm_rx_increment) {
   14394:	b1dc      	cbz	r4, 143ce <isr_rx_conn+0x76a>
				_radio.conn_curr->ccm_rx.counter++;
   14396:	4b48      	ldr	r3, [pc, #288]	; (144b8 <isr_rx_conn+0x854>)
   14398:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   1439c:	f8d1 2109 	ldr.w	r2, [r1, #265]	; 0x109
   143a0:	f8d1 310d 	ldr.w	r3, [r1, #269]	; 0x10d
   143a4:	3201      	adds	r2, #1
   143a6:	f143 0300 	adc.w	r3, r3, #0
   143aa:	f8c1 2109 	str.w	r2, [r1, #265]	; 0x109
   143ae:	f8c1 310d 	str.w	r3, [r1, #269]	; 0x10d
	return 0;
   143b2:	2300      	movs	r3, #0
   143b4:	e647      	b.n	14046 <isr_rx_conn+0x3e2>
		u8_t ccm_rx_increment = 0;
   143b6:	4604      	mov	r4, r0
   143b8:	e7de      	b.n	14378 <isr_rx_conn+0x714>
	return 0;
   143ba:	2300      	movs	r3, #0
   143bc:	e643      	b.n	14046 <isr_rx_conn+0x3e2>
   143be:	2300      	movs	r3, #0
   143c0:	e641      	b.n	14046 <isr_rx_conn+0x3e2>
   143c2:	2300      	movs	r3, #0
   143c4:	e63f      	b.n	14046 <isr_rx_conn+0x3e2>
   143c6:	2300      	movs	r3, #0
   143c8:	e63d      	b.n	14046 <isr_rx_conn+0x3e2>
   143ca:	2300      	movs	r3, #0
   143cc:	e63b      	b.n	14046 <isr_rx_conn+0x3e2>
   143ce:	2300      	movs	r3, #0
   143d0:	e639      	b.n	14046 <isr_rx_conn+0x3e2>
	struct radio_pdu_node_tx *tx_release = NULL;
   143d2:	2600      	movs	r6, #0
   143d4:	e47a      	b.n	13ccc <isr_rx_conn+0x68>
			STATE_CLOSE : STATE_TX;
   143d6:	2303      	movs	r3, #3
	_radio.state = ((_radio.state == STATE_CLOSE) || (crc_close) ||
   143d8:	4a37      	ldr	r2, [pc, #220]	; (144b8 <isr_rx_conn+0x854>)
   143da:	7413      	strb	r3, [r2, #16]
	if (_radio.state == STATE_CLOSE) {
   143dc:	2b03      	cmp	r3, #3
   143de:	d040      	beq.n	14462 <isr_rx_conn+0x7fe>
		radio_tmr_tifs_set(RADIO_TIFS);
   143e0:	2096      	movs	r0, #150	; 0x96
   143e2:	f7fa fe0d 	bl	f000 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(_radio.conn_curr->phy_rx);
   143e6:	4b34      	ldr	r3, [pc, #208]	; (144b8 <isr_rx_conn+0x854>)
   143e8:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   143ec:	f893 003a 	ldrb.w	r0, [r3, #58]	; 0x3a
   143f0:	f000 0007 	and.w	r0, r0, #7
   143f4:	f7fa fd52 	bl	ee9c <radio_switch_complete_and_rx>
		radio_tmr_end_capture();
   143f8:	f7fa feba 	bl	f170 <radio_tmr_end_capture>
	pdu_data_tx->sn = _radio.conn_curr->sn;
   143fc:	9a03      	ldr	r2, [sp, #12]
   143fe:	4b2e      	ldr	r3, [pc, #184]	; (144b8 <isr_rx_conn+0x854>)
   14400:	f8d3 1110 	ldr.w	r1, [r3, #272]	; 0x110
   14404:	f891 00f8 	ldrb.w	r0, [r1, #248]	; 0xf8
   14408:	7811      	ldrb	r1, [r2, #0]
   1440a:	f360 01c3 	bfi	r1, r0, #3, #1
   1440e:	7011      	strb	r1, [r2, #0]
	pdu_data_tx->nesn = _radio.conn_curr->nesn;
   14410:	9903      	ldr	r1, [sp, #12]
   14412:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
   14416:	f892 20f8 	ldrb.w	r2, [r2, #248]	; 0xf8
   1441a:	f3c2 0240 	ubfx	r2, r2, #1, #1
   1441e:	7808      	ldrb	r0, [r1, #0]
   14420:	f362 0082 	bfi	r0, r2, #2, #1
   14424:	7008      	strb	r0, [r1, #0]
	tx_packet_set(_radio.conn_curr, pdu_data_tx);
   14426:	9903      	ldr	r1, [sp, #12]
   14428:	f8d3 0110 	ldr.w	r0, [r3, #272]	; 0x110
   1442c:	f7fd fdde 	bl	11fec <tx_packet_set>
	LL_ASSERT(!radio_is_ready());
   14430:	f7fa fcf8 	bl	ee24 <radio_is_ready>
   14434:	bb38      	cbnz	r0, 14486 <isr_rx_conn+0x822>
	if (!radio_tmr_aa_restore()) {
   14436:	f7fa fe8f 	bl	f158 <radio_tmr_aa_restore>
   1443a:	b350      	cbz	r0, 14492 <isr_rx_conn+0x82e>
	if (!_radio.conn_curr) {
   1443c:	4b1e      	ldr	r3, [pc, #120]	; (144b8 <isr_rx_conn+0x854>)
   1443e:	f8d3 3110 	ldr.w	r3, [r3, #272]	; 0x110
   14442:	b13b      	cbz	r3, 14454 <isr_rx_conn+0x7f0>
	if (tx_release) {
   14444:	b11e      	cbz	r6, 1444e <isr_rx_conn+0x7ea>
		pdu_node_tx_release(_radio.conn_curr->handle, tx_release);
   14446:	4631      	mov	r1, r6
   14448:	8c18      	ldrh	r0, [r3, #32]
   1444a:	f7fd fb9f 	bl	11b8c <pdu_node_tx_release>
	if (rx_enqueue) {
   1444e:	f89d 300b 	ldrb.w	r3, [sp, #11]
   14452:	bb1b      	cbnz	r3, 1449c <isr_rx_conn+0x838>
}
   14454:	b004      	add	sp, #16
   14456:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			STATE_CLOSE : STATE_TX;
   1445a:	2303      	movs	r3, #3
   1445c:	e7bc      	b.n	143d8 <isr_rx_conn+0x774>
   1445e:	2302      	movs	r3, #2
   14460:	e7ba      	b.n	143d8 <isr_rx_conn+0x774>
		if (_radio.role == ROLE_MASTER) {
   14462:	7bd3      	ldrb	r3, [r2, #15]
   14464:	b2db      	uxtb	r3, r3
   14466:	2b04      	cmp	r3, #4
   14468:	d002      	beq.n	14470 <isr_rx_conn+0x80c>
			radio_switch_complete_and_disable();
   1446a:	f7fa fd27 	bl	eebc <radio_switch_complete_and_disable>
   1446e:	e7c5      	b.n	143fc <isr_rx_conn+0x798>
			_radio.conn_curr->empty = is_empty_pdu_tx_retry;
   14470:	f8d2 3110 	ldr.w	r3, [r2, #272]	; 0x110
   14474:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   14478:	f368 12c7 	bfi	r2, r8, #7, #1
   1447c:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			radio_disable();
   14480:	f7fa fcb6 	bl	edf0 <radio_disable>
			goto isr_rx_conn_exit;
   14484:	e7d7      	b.n	14436 <isr_rx_conn+0x7d2>
	LL_ASSERT(!radio_is_ready());
   14486:	4040      	eors	r0, r0
   14488:	f380 8811 	msr	BASEPRI, r0
   1448c:	f04f 0004 	mov.w	r0, #4
   14490:	df02      	svc	2
		radio_tmr_aa_save(radio_tmr_aa_get());
   14492:	f7fa fe55 	bl	f140 <radio_tmr_aa_get>
   14496:	f7fa fe59 	bl	f14c <radio_tmr_aa_save>
   1449a:	e7cf      	b.n	1443c <isr_rx_conn+0x7d8>
		rx_fc_lock(_radio.conn_curr->handle);
   1449c:	4c06      	ldr	r4, [pc, #24]	; (144b8 <isr_rx_conn+0x854>)
   1449e:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   144a2:	8c18      	ldrh	r0, [r3, #32]
   144a4:	f7fc fdec 	bl	11080 <rx_fc_lock>
		radio_pdu_node_rx->hdr.handle = _radio.conn_curr->handle;
   144a8:	f8d4 3110 	ldr.w	r3, [r4, #272]	; 0x110
   144ac:	8c1b      	ldrh	r3, [r3, #32]
   144ae:	80eb      	strh	r3, [r5, #6]
		packet_rx_enqueue();
   144b0:	f7ff fad0 	bl	13a54 <packet_rx_enqueue>
	return;
   144b4:	e7ce      	b.n	14454 <isr_rx_conn+0x7f0>
   144b6:	bf00      	nop
   144b8:	20000f84 	.word	0x20000f84

000144bc <prepare_normal_set>:
	if (hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) {
   144bc:	6803      	ldr	r3, [r0, #0]
   144be:	2b00      	cmp	r3, #0
   144c0:	db00      	blt.n	144c4 <prepare_normal_set+0x8>
   144c2:	4770      	bx	lr
{
   144c4:	b530      	push	{r4, r5, lr}
   144c6:	b089      	sub	sp, #36	; 0x24
			ticks_active_to_start : hdr->ticks_preempt_to_start;
   144c8:	6885      	ldr	r5, [r0, #8]
			 hdr->ticks_preempt_to_start) ? hdr->
   144ca:	6844      	ldr	r4, [r0, #4]
			(hdr->ticks_xtal_to_start & (~((u32_t)1 << 31))) -
   144cc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
		u32_t ticks_drift_minus =
   144d0:	42a5      	cmp	r5, r4
   144d2:	bf2c      	ite	cs
   144d4:	1b5b      	subcs	r3, r3, r5
   144d6:	1b1b      	subcc	r3, r3, r4
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   144d8:	b29b      	uxth	r3, r3
		ticker_status =
   144da:	9006      	str	r0, [sp, #24]
   144dc:	480a      	ldr	r0, [pc, #40]	; (14508 <prepare_normal_set+0x4c>)
   144de:	9005      	str	r0, [sp, #20]
   144e0:	2000      	movs	r0, #0
   144e2:	9004      	str	r0, [sp, #16]
   144e4:	9003      	str	r0, [sp, #12]
   144e6:	9002      	str	r0, [sp, #8]
   144e8:	9301      	str	r3, [sp, #4]
   144ea:	9300      	str	r3, [sp, #0]
   144ec:	4603      	mov	r3, r0
   144ee:	f7fb ff89 	bl	10404 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   144f2:	b108      	cbz	r0, 144f8 <prepare_normal_set+0x3c>
   144f4:	2802      	cmp	r0, #2
   144f6:	d101      	bne.n	144fc <prepare_normal_set+0x40>
}
   144f8:	b009      	add	sp, #36	; 0x24
   144fa:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   144fc:	4040      	eors	r0, r0
   144fe:	f380 8811 	msr	BASEPRI, r0
   14502:	f04f 0004 	mov.w	r0, #4
   14506:	df02      	svc	2
   14508:	00010d85 	.word	0x00010d85

0001450c <event_common_prepare>:
{
   1450c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   14510:	b08a      	sub	sp, #40	; 0x28
   14512:	4681      	mov	r9, r0
   14514:	468a      	mov	sl, r1
   14516:	4616      	mov	r6, r2
   14518:	461f      	mov	r7, r3
   1451a:	f89d 504c 	ldrb.w	r5, [sp, #76]	; 0x4c
	u32_t _ticks_xtal_to_start = *ticks_xtal_to_start;
   1451e:	6814      	ldr	r4, [r2, #0]
	u32_t _ticks_active_to_start = *ticks_active_to_start;
   14520:	f8d3 8000 	ldr.w	r8, [r3]
	if (_ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14524:	2c00      	cmp	r4, #0
   14526:	db25      	blt.n	14574 <event_common_prepare+0x68>
	if (_ticks_active_to_start < _ticks_xtal_to_start) {
   14528:	4544      	cmp	r4, r8
   1452a:	d828      	bhi.n	1457e <event_common_prepare+0x72>
	} else if (_ticks_active_to_start > _ticks_xtal_to_start) {
   1452c:	4544      	cmp	r4, r8
   1452e:	d251      	bcs.n	145d4 <event_common_prepare+0xc8>
		ticks_to_xtal = _ticks_active_to_start - _ticks_xtal_to_start;
   14530:	eba8 0404 	sub.w	r4, r8, r4
		event_active(0, 0, 0, NULL);
   14534:	2300      	movs	r3, #0
   14536:	461a      	mov	r2, r3
   14538:	4619      	mov	r1, r3
   1453a:	4618      	mov	r0, r3
   1453c:	f7fd fa3a 	bl	119b4 <event_active>
		ticker_status =
   14540:	f241 43d1 	movw	r3, #5329	; 0x14d1
   14544:	9308      	str	r3, [sp, #32]
   14546:	4b5e      	ldr	r3, [pc, #376]	; (146c0 <event_common_prepare+0x1b4>)
   14548:	9307      	str	r3, [sp, #28]
   1454a:	2000      	movs	r0, #0
   1454c:	9006      	str	r0, [sp, #24]
   1454e:	4b5d      	ldr	r3, [pc, #372]	; (146c4 <event_common_prepare+0x1b8>)
   14550:	9305      	str	r3, [sp, #20]
   14552:	9004      	str	r0, [sp, #16]
   14554:	9003      	str	r0, [sp, #12]
   14556:	9002      	str	r0, [sp, #8]
   14558:	9001      	str	r0, [sp, #4]
   1455a:	9400      	str	r4, [sp, #0]
   1455c:	464b      	mov	r3, r9
   1455e:	2201      	movs	r2, #1
   14560:	4601      	mov	r1, r0
   14562:	f7fb ff01 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14566:	2800      	cmp	r0, #0
   14568:	f000 8091 	beq.w	1468e <event_common_prepare+0x182>
   1456c:	2802      	cmp	r0, #2
   1456e:	d12b      	bne.n	145c8 <event_common_prepare+0xbc>
		ticks_to_start = _ticks_active_to_start;
   14570:	4644      	mov	r4, r8
   14572:	e03b      	b.n	145ec <event_common_prepare+0xe0>
		_ticks_xtal_to_start =
   14574:	9c12      	ldr	r4, [sp, #72]	; 0x48
   14576:	4544      	cmp	r4, r8
   14578:	bf38      	it	cc
   1457a:	4644      	movcc	r4, r8
   1457c:	e7d4      	b.n	14528 <event_common_prepare+0x1c>
		ticks_to_active = _ticks_xtal_to_start - _ticks_active_to_start;
   1457e:	eba4 0308 	sub.w	r3, r4, r8
		ticker_status =
   14582:	f241 42bc 	movw	r2, #5308	; 0x14bc
   14586:	9208      	str	r2, [sp, #32]
   14588:	4a4d      	ldr	r2, [pc, #308]	; (146c0 <event_common_prepare+0x1b4>)
   1458a:	9207      	str	r2, [sp, #28]
   1458c:	2000      	movs	r0, #0
   1458e:	9006      	str	r0, [sp, #24]
   14590:	4a4d      	ldr	r2, [pc, #308]	; (146c8 <event_common_prepare+0x1bc>)
   14592:	9205      	str	r2, [sp, #20]
   14594:	9004      	str	r0, [sp, #16]
   14596:	9003      	str	r0, [sp, #12]
   14598:	9002      	str	r0, [sp, #8]
   1459a:	9001      	str	r0, [sp, #4]
   1459c:	9300      	str	r3, [sp, #0]
   1459e:	464b      	mov	r3, r9
   145a0:	2201      	movs	r2, #1
   145a2:	4601      	mov	r1, r0
   145a4:	f7fb fee0 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   145a8:	b108      	cbz	r0, 145ae <event_common_prepare+0xa2>
   145aa:	2802      	cmp	r0, #2
   145ac:	d106      	bne.n	145bc <event_common_prepare+0xb0>
		event_xtal(0, 0, 0, NULL);
   145ae:	2300      	movs	r3, #0
   145b0:	461a      	mov	r2, r3
   145b2:	4619      	mov	r1, r3
   145b4:	4618      	mov	r0, r3
   145b6:	f7fd fa0f 	bl	119d8 <event_xtal>
   145ba:	e017      	b.n	145ec <event_common_prepare+0xe0>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   145bc:	4040      	eors	r0, r0
   145be:	f380 8811 	msr	BASEPRI, r0
   145c2:	f04f 0004 	mov.w	r0, #4
   145c6:	df02      	svc	2
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   145c8:	4040      	eors	r0, r0
   145ca:	f380 8811 	msr	BASEPRI, r0
   145ce:	f04f 0004 	mov.w	r0, #4
   145d2:	df02      	svc	2
		event_active(0, 0, 0, NULL);
   145d4:	2300      	movs	r3, #0
   145d6:	461a      	mov	r2, r3
   145d8:	4619      	mov	r1, r3
   145da:	4618      	mov	r0, r3
   145dc:	f7fd f9ea 	bl	119b4 <event_active>
		event_xtal(0, 0, 0, NULL);
   145e0:	2300      	movs	r3, #0
   145e2:	461a      	mov	r2, r3
   145e4:	4619      	mov	r1, r3
   145e6:	4618      	mov	r0, r3
   145e8:	f7fd f9f6 	bl	119d8 <event_xtal>
	_radio.remainder_anchor = remainder;
   145ec:	4b37      	ldr	r3, [pc, #220]	; (146cc <event_common_prepare+0x1c0>)
   145ee:	f8c3 a008 	str.w	sl, [r3, #8]
	ticker_status =
   145f2:	f241 43e9 	movw	r3, #5353	; 0x14e9
   145f6:	9308      	str	r3, [sp, #32]
   145f8:	4b31      	ldr	r3, [pc, #196]	; (146c0 <event_common_prepare+0x1b4>)
   145fa:	9307      	str	r3, [sp, #28]
   145fc:	9b15      	ldr	r3, [sp, #84]	; 0x54
   145fe:	9306      	str	r3, [sp, #24]
   14600:	9b14      	ldr	r3, [sp, #80]	; 0x50
   14602:	9305      	str	r3, [sp, #20]
   14604:	2000      	movs	r0, #0
   14606:	9004      	str	r0, [sp, #16]
   14608:	9003      	str	r0, [sp, #12]
   1460a:	9002      	str	r0, [sp, #8]
   1460c:	9001      	str	r0, [sp, #4]
   1460e:	9400      	str	r4, [sp, #0]
   14610:	464b      	mov	r3, r9
   14612:	4602      	mov	r2, r0
   14614:	4601      	mov	r1, r0
   14616:	f7fb fea7 	bl	10368 <ticker_start>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1461a:	b108      	cbz	r0, 14620 <event_common_prepare+0x114>
   1461c:	2802      	cmp	r0, #2
   1461e:	d138      	bne.n	14692 <event_common_prepare+0x186>
	event_stop(0, 0, 0, (void *)STATE_ABORT);
   14620:	2305      	movs	r3, #5
   14622:	2200      	movs	r2, #0
   14624:	4611      	mov	r1, r2
   14626:	4610      	mov	r0, r2
   14628:	f7fd f93a 	bl	118a0 <event_stop>
	if (_radio.ticks_active_to_start != _ticks_active_to_start) {
   1462c:	4b27      	ldr	r3, [pc, #156]	; (146cc <event_common_prepare+0x1c0>)
   1462e:	f8d3 3180 	ldr.w	r3, [r3, #384]	; 0x180
   14632:	4598      	cmp	r8, r3
   14634:	d01d      	beq.n	14672 <event_common_prepare+0x166>
			 (*ticks_xtal_to_start & ~(((u32_t)1 << 31))) :
   14636:	6832      	ldr	r2, [r6, #0]
   14638:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
		u32_t ticks_to_start_new =
   1463c:	429a      	cmp	r2, r3
   1463e:	bf38      	it	cc
   14640:	461a      	movcc	r2, r3
		*ticks_active_to_start = _radio.ticks_active_to_start;
   14642:	603b      	str	r3, [r7, #0]
		if ((*ticks_xtal_to_start) & ((u32_t)1 << 31)) {
   14644:	6833      	ldr	r3, [r6, #0]
   14646:	2b00      	cmp	r3, #0
   14648:	db29      	blt.n	1469e <event_common_prepare+0x192>
			ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1464a:	b2a3      	uxth	r3, r4
   1464c:	b292      	uxth	r2, r2
		ticker_status =
   1464e:	f241 5116 	movw	r1, #5398	; 0x1516
   14652:	9106      	str	r1, [sp, #24]
   14654:	491a      	ldr	r1, [pc, #104]	; (146c0 <event_common_prepare+0x1b4>)
   14656:	9105      	str	r1, [sp, #20]
   14658:	2000      	movs	r0, #0
   1465a:	9004      	str	r0, [sp, #16]
   1465c:	9003      	str	r0, [sp, #12]
   1465e:	9302      	str	r3, [sp, #8]
   14660:	9201      	str	r2, [sp, #4]
   14662:	9200      	str	r2, [sp, #0]
   14664:	462a      	mov	r2, r5
   14666:	4601      	mov	r1, r0
   14668:	f7fb fecc 	bl	10404 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1466c:	b108      	cbz	r0, 14672 <event_common_prepare+0x166>
   1466e:	2802      	cmp	r0, #2
   14670:	d119      	bne.n	146a6 <event_common_prepare+0x19a>
	packet_tx_enqueue(0xFF);
   14672:	20ff      	movs	r0, #255	; 0xff
   14674:	f7fd fab6 	bl	11be4 <packet_tx_enqueue>
		s_mfy_xtal_stop_calc.param = (void *)(u32_t)ticker_id;
   14678:	4b15      	ldr	r3, [pc, #84]	; (146d0 <event_common_prepare+0x1c4>)
   1467a:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1467c:	2201      	movs	r2, #1
   1467e:	4611      	mov	r1, r2
   14680:	2000      	movs	r0, #0
   14682:	f7fa f85f 	bl	e744 <mayfly_enqueue>
		LL_ASSERT(!retval);
   14686:	b9a0      	cbnz	r0, 146b2 <event_common_prepare+0x1a6>
}
   14688:	b00a      	add	sp, #40	; 0x28
   1468a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		ticks_to_start = _ticks_active_to_start;
   1468e:	4644      	mov	r4, r8
   14690:	e7ac      	b.n	145ec <event_common_prepare+0xe0>
	LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14692:	4040      	eors	r0, r0
   14694:	f380 8811 	msr	BASEPRI, r0
   14698:	f04f 0004 	mov.w	r0, #4
   1469c:	df02      	svc	2
			*ticks_xtal_to_start &= ~(((u32_t)1 << 31));
   1469e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   146a2:	6033      	str	r3, [r6, #0]
   146a4:	e7d1      	b.n	1464a <event_common_prepare+0x13e>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   146a6:	4040      	eors	r0, r0
   146a8:	f380 8811 	msr	BASEPRI, r0
   146ac:	f04f 0004 	mov.w	r0, #4
   146b0:	df02      	svc	2
		LL_ASSERT(!retval);
   146b2:	4040      	eors	r0, r0
   146b4:	f380 8811 	msr	BASEPRI, r0
   146b8:	f04f 0004 	mov.w	r0, #4
   146bc:	df02      	svc	2
   146be:	bf00      	nop
   146c0:	000110bd 	.word	0x000110bd
   146c4:	000119d9 	.word	0x000119d9
   146c8:	000119b5 	.word	0x000119b5
   146cc:	20000f84 	.word	0x20000f84
   146d0:	2000bd68 	.word	0x2000bd68

000146d4 <radio_event_adv_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   146d4:	4b0d      	ldr	r3, [pc, #52]	; (1470c <radio_event_adv_prepare+0x38>)
   146d6:	7b1b      	ldrb	r3, [r3, #12]
   146d8:	b993      	cbnz	r3, 14700 <radio_event_adv_prepare+0x2c>
{
   146da:	b510      	push	{r4, lr}
   146dc:	b084      	sub	sp, #16
	_radio.ticker_id_prepare = RADIO_TICKER_ID_ADV;
   146de:	4a0b      	ldr	r2, [pc, #44]	; (1470c <radio_event_adv_prepare+0x38>)
   146e0:	2305      	movs	r3, #5
   146e2:	7313      	strb	r3, [r2, #12]
	event_common_prepare(ticks_at_expire, remainder,
   146e4:	2400      	movs	r4, #0
   146e6:	9403      	str	r4, [sp, #12]
   146e8:	4c09      	ldr	r4, [pc, #36]	; (14710 <radio_event_adv_prepare+0x3c>)
   146ea:	9402      	str	r4, [sp, #8]
   146ec:	9301      	str	r3, [sp, #4]
   146ee:	69d3      	ldr	r3, [r2, #28]
   146f0:	9300      	str	r3, [sp, #0]
   146f2:	f102 0318 	add.w	r3, r2, #24
   146f6:	3214      	adds	r2, #20
   146f8:	f7ff ff08 	bl	1450c <event_common_prepare>
}
   146fc:	b004      	add	sp, #16
   146fe:	bd10      	pop	{r4, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   14700:	4040      	eors	r0, r0
   14702:	f380 8811 	msr	BASEPRI, r0
   14706:	f04f 0004 	mov.w	r0, #4
   1470a:	df02      	svc	2
   1470c:	20000f84 	.word	0x20000f84
   14710:	00015fd1 	.word	0x00015fd1
   14714:	00000000 	.word	0x00000000

00014718 <event_connection_prepare>:
{
   14718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1471c:	b08f      	sub	sp, #60	; 0x3c
	LL_ASSERT(!_radio.ticker_id_prepare);
   1471e:	4ccb      	ldr	r4, [pc, #812]	; (14a4c <event_connection_prepare+0x334>)
   14720:	7b24      	ldrb	r4, [r4, #12]
   14722:	2c00      	cmp	r4, #0
   14724:	d135      	bne.n	14792 <event_connection_prepare+0x7a>
				   conn->handle;
   14726:	8c1d      	ldrh	r5, [r3, #32]
	_radio.ticker_id_prepare = RADIO_TICKER_ID_FIRST_CONNECTION +
   14728:	3507      	adds	r5, #7
   1472a:	b2ed      	uxtb	r5, r5
   1472c:	4cc7      	ldr	r4, [pc, #796]	; (14a4c <event_connection_prepare+0x334>)
   1472e:	7325      	strb	r5, [r4, #12]
	if (conn->role) {
   14730:	f993 401d 	ldrsb.w	r4, [r3, #29]
   14734:	2c00      	cmp	r4, #0
   14736:	db32      	blt.n	1479e <event_connection_prepare+0x86>
   14738:	461c      	mov	r4, r3
   1473a:	910a      	str	r1, [sp, #40]	; 0x28
   1473c:	4606      	mov	r6, r0
	conn->latency_prepare += lazy;
   1473e:	8d1d      	ldrh	r5, [r3, #40]	; 0x28
   14740:	4415      	add	r5, r2
   14742:	b2ad      	uxth	r5, r5
   14744:	851d      	strh	r5, [r3, #40]	; 0x28
	event_counter = conn->event_counter + conn->latency_prepare;
   14746:	8c5b      	ldrh	r3, [r3, #34]	; 0x22
   14748:	441d      	add	r5, r3
   1474a:	b2ad      	uxth	r5, r5
	if (conn->llcp_ack == conn->llcp_req) {
   1474c:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   14750:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14754:	429a      	cmp	r2, r3
   14756:	d02d      	beq.n	147b4 <event_connection_prepare+0x9c>
	if (conn->llcp_ack != conn->llcp_req) {
   14758:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   1475c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14760:	429a      	cmp	r2, r3
   14762:	f000 861a 	beq.w	1539a <event_connection_prepare+0xc82>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   14766:	2305      	movs	r3, #5
   14768:	2200      	movs	r2, #0
   1476a:	4611      	mov	r1, r2
   1476c:	4610      	mov	r0, r2
   1476e:	f7fd f897 	bl	118a0 <event_stop>
		switch (conn->llcp_type) {
   14772:	f894 3076 	ldrb.w	r3, [r4, #118]	; 0x76
   14776:	3b01      	subs	r3, #1
   14778:	2b07      	cmp	r3, #7
   1477a:	f201 80d6 	bhi.w	1592a <event_connection_prepare+0x1212>
   1477e:	e8df f013 	tbh	[pc, r3, lsl #1]
   14782:	029f      	.short	0x029f
   14784:	05b1054e 	.word	0x05b1054e
   14788:	072706ee 	.word	0x072706ee
   1478c:	07ac08d4 	.word	0x07ac08d4
   14790:	07c7      	.short	0x07c7
	LL_ASSERT(!_radio.ticker_id_prepare);
   14792:	4040      	eors	r0, r0
   14794:	f380 8811 	msr	BASEPRI, r0
   14798:	f04f 0004 	mov.w	r0, #4
   1479c:	df02      	svc	2
		    conn->slave.window_widening_periodic_us * (lazy + 1);
   1479e:	6d5c      	ldr	r4, [r3, #84]	; 0x54
   147a0:	fb02 4404 	mla	r4, r2, r4, r4
		conn->slave.window_widening_prepare_us +=
   147a4:	6ddd      	ldr	r5, [r3, #92]	; 0x5c
   147a6:	442c      	add	r4, r5
   147a8:	65dc      	str	r4, [r3, #92]	; 0x5c
		    conn->slave.window_widening_max_us) {
   147aa:	6d9d      	ldr	r5, [r3, #88]	; 0x58
		if (conn->slave.window_widening_prepare_us >
   147ac:	42ac      	cmp	r4, r5
   147ae:	d9c3      	bls.n	14738 <event_connection_prepare+0x20>
			conn->slave.window_widening_prepare_us =
   147b0:	65dd      	str	r5, [r3, #92]	; 0x5c
   147b2:	e7c1      	b.n	14738 <event_connection_prepare+0x20>
		if (conn->llcp_conn_param.ack != conn->llcp_conn_param.req) {
   147b4:	f894 20c1 	ldrb.w	r2, [r4, #193]	; 0xc1
   147b8:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   147bc:	429a      	cmp	r2, r3
   147be:	d00b      	beq.n	147d8 <event_connection_prepare+0xc0>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   147c0:	2305      	movs	r3, #5
   147c2:	2200      	movs	r2, #0
   147c4:	4611      	mov	r1, r2
   147c6:	4610      	mov	r0, r2
   147c8:	f7fd f86a 	bl	118a0 <event_stop>
	conn_upd = _radio.conn_upd;
   147cc:	4b9f      	ldr	r3, [pc, #636]	; (14a4c <event_connection_prepare+0x334>)
   147ce:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (conn_upd && (conn_upd != conn)) {
   147d2:	b1fb      	cbz	r3, 14814 <event_connection_prepare+0xfc>
   147d4:	429c      	cmp	r4, r3
   147d6:	d01d      	beq.n	14814 <event_connection_prepare+0xfc>
		if (conn->llcp_phy.ack != conn->llcp_phy.req) {
   147d8:	f894 20f5 	ldrb.w	r2, [r4, #245]	; 0xf5
   147dc:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   147e0:	429a      	cmp	r2, r3
   147e2:	d0b9      	beq.n	14758 <event_connection_prepare+0x40>
			event_stop(0, 0, 0, (void *)STATE_ABORT);
   147e4:	2305      	movs	r3, #5
   147e6:	2200      	movs	r2, #0
   147e8:	4611      	mov	r1, r2
   147ea:	4610      	mov	r0, r2
   147ec:	f7fd f858 	bl	118a0 <event_stop>
	switch (conn->llcp_phy.state) {
   147f0:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   147f4:	f003 0303 	and.w	r3, r3, #3
   147f8:	2b03      	cmp	r3, #3
   147fa:	f200 8257 	bhi.w	14cac <event_connection_prepare+0x594>
   147fe:	a201      	add	r2, pc, #4	; (adr r2, 14804 <event_connection_prepare+0xec>)
   14800:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14804:	00014afd 	.word	0x00014afd
   14808:	00014759 	.word	0x00014759
   1480c:	00014759 	.word	0x00014759
   14810:	00014b77 	.word	0x00014b77
	switch (conn->llcp_conn_param.state) {
   14814:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14818:	f003 0307 	and.w	r3, r3, #7
   1481c:	2b05      	cmp	r3, #5
   1481e:	f200 8167 	bhi.w	14af0 <event_connection_prepare+0x3d8>
   14822:	a201      	add	r2, pc, #4	; (adr r2, 14828 <event_connection_prepare+0x110>)
   14824:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   14828:	00014841 	.word	0x00014841
   1482c:	0001490b 	.word	0x0001490b
   14830:	00014a59 	.word	0x00014a59
   14834:	000147d9 	.word	0x000147d9
   14838:	000147d9 	.word	0x000147d9
   1483c:	000147d9 	.word	0x000147d9
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14840:	4883      	ldr	r0, [pc, #524]	; (14a50 <event_connection_prepare+0x338>)
   14842:	f7fa f8c0 	bl	e9c6 <mem_acquire>
	if (!node_tx) {
   14846:	4680      	mov	r8, r0
   14848:	2800      	cmp	r0, #0
   1484a:	d0c5      	beq.n	147d8 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_RSP_WAIT;
   1484c:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14850:	2204      	movs	r2, #4
   14852:	f362 0302 	bfi	r3, r2, #0, #3
   14856:	f884 30c2 	strb.w	r3, [r4, #194]	; 0xc2
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1485a:	7903      	ldrb	r3, [r0, #4]
   1485c:	f043 0303 	orr.w	r3, r3, #3
   14860:	7103      	strb	r3, [r0, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14862:	2318      	movs	r3, #24
   14864:	7143      	strb	r3, [r0, #5]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14866:	230f      	movs	r3, #15
   14868:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   1486a:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   1486e:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   14870:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   14874:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   14876:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   1487a:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   1487c:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   14880:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = 0;
   14882:	2300      	movs	r3, #0
   14884:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count = event_counter;
   14886:	f8a0 5011 	strh.w	r5, [r0, #17]
	p->offset0 = 0x0000;
   1488a:	74c3      	strb	r3, [r0, #19]
   1488c:	7503      	strb	r3, [r0, #20]
	p->offset1 = 0xffff;
   1488e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   14892:	7543      	strb	r3, [r0, #21]
   14894:	7583      	strb	r3, [r0, #22]
	p->offset2 = 0xffff;
   14896:	75c3      	strb	r3, [r0, #23]
   14898:	7603      	strb	r3, [r0, #24]
	p->offset3 = 0xffff;
   1489a:	7643      	strb	r3, [r0, #25]
   1489c:	7683      	strb	r3, [r0, #26]
	p->offset4 = 0xffff;
   1489e:	76c3      	strb	r3, [r0, #27]
   148a0:	7703      	strb	r3, [r0, #28]
	p->offset5 = 0xffff;
   148a2:	7743      	strb	r3, [r0, #29]
   148a4:	7783      	strb	r3, [r0, #30]
	ctrl_tx_enqueue(conn, node_tx);
   148a6:	4601      	mov	r1, r0
   148a8:	4620      	mov	r0, r4
   148aa:	f7fc fb1f 	bl	10eec <ctrl_tx_enqueue>
	_radio.conn_upd = conn;
   148ae:	4b67      	ldr	r3, [pc, #412]	; (14a4c <event_connection_prepare+0x334>)
   148b0:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
	conn->procedure_expire = conn->procedure_reload;
   148b4:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   148b8:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
		conn->llcp_conn_param.ticks_ref = ticks_at_expire;
   148bc:	f8c4 60e0 	str.w	r6, [r4, #224]	; 0xe0
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   148c0:	6823      	ldr	r3, [r4, #0]
   148c2:	2b00      	cmp	r3, #0
   148c4:	db13      	blt.n	148ee <event_connection_prepare+0x1d6>
		conn->llcp_conn_param.pdu_win_offset0 = (u16_t *)&p->offset0;
   148c6:	f108 0313 	add.w	r3, r8, #19
   148ca:	f8c4 30dc 	str.w	r3, [r4, #220]	; 0xdc
		s_mfy_sched_offset.param = (void *)conn;
   148ce:	4b61      	ldr	r3, [pc, #388]	; (14a54 <event_connection_prepare+0x33c>)
   148d0:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   148d2:	2201      	movs	r2, #1
   148d4:	4611      	mov	r1, r2
   148d6:	2000      	movs	r0, #0
   148d8:	f7f9 ff34 	bl	e744 <mayfly_enqueue>
		LL_ASSERT(!retval);
   148dc:	2800      	cmp	r0, #0
   148de:	f43f af7b 	beq.w	147d8 <event_connection_prepare+0xc0>
   148e2:	4040      	eors	r0, r0
   148e4:	f380 8811 	msr	BASEPRI, r0
   148e8:	f04f 0004 	mov.w	r0, #4
   148ec:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   148ee:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   148f0:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   148f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   148f6:	4291      	cmp	r1, r2
   148f8:	bf2c      	ite	cs
   148fa:	ebc3 0301 	rsbcs	r3, r3, r1
   148fe:	ebc3 0302 	rsbcc	r3, r3, r2
			conn->llcp_conn_param.ticks_ref -=
   14902:	4433      	add	r3, r6
   14904:	f8c4 30e0 	str.w	r3, [r4, #224]	; 0xe0
   14908:	e7dd      	b.n	148c6 <event_connection_prepare+0x1ae>
	if (conn->llcp_conn_param.status) {
   1490a:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   1490e:	bbb3      	cbnz	r3, 1497e <event_connection_prepare+0x266>
	if (!conn->role) {
   14910:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14914:	2b00      	cmp	r3, #0
   14916:	db52      	blt.n	149be <event_connection_prepare+0x2a6>
		if (conn->llcp_req != conn->llcp_ack) {
   14918:	f894 2074 	ldrb.w	r2, [r4, #116]	; 0x74
   1491c:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14920:	429a      	cmp	r2, r3
   14922:	f47f af59 	bne.w	147d8 <event_connection_prepare+0xc0>
		conn->llcp_conn_param.state = LLCP_CPR_STATE_UPD;
   14926:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   1492a:	2105      	movs	r1, #5
   1492c:	f361 0202 	bfi	r2, r1, #0, #3
   14930:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
		conn->llcp.conn_upd.win_size = 1;
   14934:	2001      	movs	r0, #1
   14936:	f884 0088 	strb.w	r0, [r4, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   1493a:	2100      	movs	r1, #0
   1493c:	f8c4 1084 	str.w	r1, [r4, #132]	; 0x84
		conn->llcp.conn_upd.interval = conn->llcp_conn_param.interval;
   14940:	f8b4 10c4 	ldrh.w	r1, [r4, #196]	; 0xc4
   14944:	f8a4 107a 	strh.w	r1, [r4, #122]	; 0x7a
		conn->llcp.conn_upd.latency = conn->llcp_conn_param.latency;
   14948:	f8b4 10c6 	ldrh.w	r1, [r4, #198]	; 0xc6
   1494c:	f8a4 107c 	strh.w	r1, [r4, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = conn->llcp_conn_param.timeout;
   14950:	f8b4 10c8 	ldrh.w	r1, [r4, #200]	; 0xc8
   14954:	f8a4 107e 	strh.w	r1, [r4, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_SELECT;
   14958:	f894 1078 	ldrb.w	r1, [r4, #120]	; 0x78
   1495c:	f04f 0e02 	mov.w	lr, #2
   14960:	f36e 0101 	bfi	r1, lr, #0, #2
		conn->llcp.conn_upd.is_internal = !conn->llcp_conn_param.cmd;
   14964:	f3c2 02c4 	ubfx	r2, r2, #3, #5
   14968:	4042      	eors	r2, r0
   1496a:	f362 0182 	bfi	r1, r2, #2, #1
   1496e:	f884 1078 	strb.w	r1, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   14972:	f884 0076 	strb.w	r0, [r4, #118]	; 0x76
		conn->llcp_ack--;
   14976:	3b01      	subs	r3, #1
   14978:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   1497c:	e72c      	b.n	147d8 <event_connection_prepare+0xc0>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1497e:	4834      	ldr	r0, [pc, #208]	; (14a50 <event_connection_prepare+0x338>)
   14980:	f7fa f821 	bl	e9c6 <mem_acquire>
		if (!node_tx) {
   14984:	4601      	mov	r1, r0
   14986:	2800      	cmp	r0, #0
   14988:	f43f af26 	beq.w	147d8 <event_connection_prepare+0xc0>
		pdu->ll_id = PDU_DATA_LLID_CTRL;
   1498c:	7903      	ldrb	r3, [r0, #4]
   1498e:	f043 0303 	orr.w	r3, r3, #3
   14992:	7103      	strb	r3, [r0, #4]
		pdu->payload.llctrl.opcode =
   14994:	2311      	movs	r3, #17
   14996:	71c3      	strb	r3, [r0, #7]
		pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14998:	2303      	movs	r3, #3
   1499a:	7143      	strb	r3, [r0, #5]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_CONN_PARAM_REQ;
   1499c:	230f      	movs	r3, #15
   1499e:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp_conn_param.status;
   149a0:	f894 30c3 	ldrb.w	r3, [r4, #195]	; 0xc3
   149a4:	7243      	strb	r3, [r0, #9]
		ctrl_tx_enqueue(conn, node_tx);
   149a6:	4620      	mov	r0, r4
   149a8:	f7fc faa0 	bl	10eec <ctrl_tx_enqueue>
		conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   149ac:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   149b0:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
		_radio.conn_upd = NULL;
   149b4:	2200      	movs	r2, #0
   149b6:	4b25      	ldr	r3, [pc, #148]	; (14a4c <event_connection_prepare+0x334>)
   149b8:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   149bc:	e70c      	b.n	147d8 <event_connection_prepare+0xc0>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   149be:	4824      	ldr	r0, [pc, #144]	; (14a50 <event_connection_prepare+0x338>)
   149c0:	f7fa f801 	bl	e9c6 <mem_acquire>
	if (!node_tx) {
   149c4:	4601      	mov	r1, r0
   149c6:	2800      	cmp	r0, #0
   149c8:	f43f af06 	beq.w	147d8 <event_connection_prepare+0xc0>
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   149cc:	7903      	ldrb	r3, [r0, #4]
   149ce:	f043 0303 	orr.w	r3, r3, #3
   149d2:	7103      	strb	r3, [r0, #4]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   149d4:	2318      	movs	r3, #24
   149d6:	7143      	strb	r3, [r0, #5]
	pdu->payload.llctrl.opcode =
   149d8:	2310      	movs	r3, #16
   149da:	71c3      	strb	r3, [r0, #7]
	p->interval_min = conn->llcp_conn_param.interval;
   149dc:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   149e0:	8103      	strh	r3, [r0, #8]
	p->interval_max = conn->llcp_conn_param.interval;
   149e2:	f8b4 30c4 	ldrh.w	r3, [r4, #196]	; 0xc4
   149e6:	8143      	strh	r3, [r0, #10]
	p->latency = conn->llcp_conn_param.latency;
   149e8:	f8b4 30c6 	ldrh.w	r3, [r4, #198]	; 0xc6
   149ec:	8183      	strh	r3, [r0, #12]
	p->timeout = conn->llcp_conn_param.timeout;
   149ee:	f8b4 30c8 	ldrh.w	r3, [r4, #200]	; 0xc8
   149f2:	81c3      	strh	r3, [r0, #14]
	p->preferred_periodicity = conn->llcp_conn_param.preferred_periodicity;
   149f4:	f894 30ca 	ldrb.w	r3, [r4, #202]	; 0xca
   149f8:	7403      	strb	r3, [r0, #16]
	p->reference_conn_event_count =
   149fa:	f8b4 30cc 	ldrh.w	r3, [r4, #204]	; 0xcc
   149fe:	f8a0 3011 	strh.w	r3, [r0, #17]
	p->offset0 = conn->llcp_conn_param.offset0;
   14a02:	f8b4 30ce 	ldrh.w	r3, [r4, #206]	; 0xce
   14a06:	f8a0 3013 	strh.w	r3, [r0, #19]
	p->offset1 = conn->llcp_conn_param.offset1;
   14a0a:	f8b4 30d0 	ldrh.w	r3, [r4, #208]	; 0xd0
   14a0e:	f8a0 3015 	strh.w	r3, [r0, #21]
	p->offset2 = conn->llcp_conn_param.offset2;
   14a12:	f8b4 30d2 	ldrh.w	r3, [r4, #210]	; 0xd2
   14a16:	f8a0 3017 	strh.w	r3, [r0, #23]
	p->offset3 = conn->llcp_conn_param.offset3;
   14a1a:	f8b4 30d4 	ldrh.w	r3, [r4, #212]	; 0xd4
   14a1e:	f8a0 3019 	strh.w	r3, [r0, #25]
	p->offset4 = conn->llcp_conn_param.offset4;
   14a22:	f8b4 30d6 	ldrh.w	r3, [r4, #214]	; 0xd6
   14a26:	f8a0 301b 	strh.w	r3, [r0, #27]
	p->offset5 = conn->llcp_conn_param.offset5;
   14a2a:	f8b4 30d8 	ldrh.w	r3, [r4, #216]	; 0xd8
   14a2e:	f8a0 301d 	strh.w	r3, [r0, #29]
	ctrl_tx_enqueue(conn, node_tx);
   14a32:	4620      	mov	r0, r4
   14a34:	f7fc fa5a 	bl	10eec <ctrl_tx_enqueue>
	conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   14a38:	f894 30c0 	ldrb.w	r3, [r4, #192]	; 0xc0
   14a3c:	f884 30c1 	strb.w	r3, [r4, #193]	; 0xc1
	_radio.conn_upd = NULL;
   14a40:	2200      	movs	r2, #0
   14a42:	4b02      	ldr	r3, [pc, #8]	; (14a4c <event_connection_prepare+0x334>)
   14a44:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   14a48:	e6c6      	b.n	147d8 <event_connection_prepare+0xc0>
   14a4a:	bf00      	nop
   14a4c:	20000f84 	.word	0x20000f84
   14a50:	200010dc 	.word	0x200010dc
   14a54:	2000bcf8 	.word	0x2000bcf8
	if (conn->pause_tx) {
   14a58:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   14a5c:	f013 0f08 	tst.w	r3, #8
   14a60:	f47f aeba 	bne.w	147d8 <event_connection_prepare+0xc0>
	if (_radio.packet_rx_acquire >=
   14a64:	4b94      	ldr	r3, [pc, #592]	; (14cb8 <event_connection_prepare+0x5a0>)
   14a66:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14a6a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14a6e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14a70:	429a      	cmp	r2, r3
   14a72:	d331      	bcc.n	14ad8 <event_connection_prepare+0x3c0>
			_radio.packet_rx_last);
   14a74:	4b90      	ldr	r3, [pc, #576]	; (14cb8 <event_connection_prepare+0x5a0>)
   14a76:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14a7a:	1ad3      	subs	r3, r2, r3
   14a7c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14a7e:	2b01      	cmp	r3, #1
   14a80:	d934      	bls.n	14aec <event_connection_prepare+0x3d4>
	return _radio.packet_rx[_radio.packet_rx_last];
   14a82:	4b8d      	ldr	r3, [pc, #564]	; (14cb8 <event_connection_prepare+0x5a0>)
   14a84:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14a88:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14a8c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
	if (!node_rx) {
   14a90:	2b00      	cmp	r3, #0
   14a92:	f43f aea1 	beq.w	147d8 <event_connection_prepare+0xc0>
	conn->llcp_conn_param.state = LLCP_CPR_STATE_APP_WAIT;
   14a96:	f894 20c2 	ldrb.w	r2, [r4, #194]	; 0xc2
   14a9a:	2103      	movs	r1, #3
   14a9c:	f361 0202 	bfi	r2, r1, #0, #3
   14aa0:	f884 20c2 	strb.w	r2, [r4, #194]	; 0xc2
	node_rx->hdr.handle = conn->handle;
   14aa4:	8c22      	ldrh	r2, [r4, #32]
   14aa6:	80da      	strh	r2, [r3, #6]
	node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   14aa8:	2201      	movs	r2, #1
   14aaa:	711a      	strb	r2, [r3, #4]
	pdu->ll_id = PDU_DATA_LLID_CTRL;
   14aac:	7a1a      	ldrb	r2, [r3, #8]
   14aae:	430a      	orrs	r2, r1
   14ab0:	721a      	strb	r2, [r3, #8]
	pdu->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14ab2:	2218      	movs	r2, #24
   14ab4:	725a      	strb	r2, [r3, #9]
	pdu->payload.llctrl.opcode =
   14ab6:	220f      	movs	r2, #15
   14ab8:	72da      	strb	r2, [r3, #11]
	p->interval_min = conn->llcp_conn_param.interval;
   14aba:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   14abe:	819a      	strh	r2, [r3, #12]
	p->interval_max = conn->llcp_conn_param.interval;
   14ac0:	f8b4 20c4 	ldrh.w	r2, [r4, #196]	; 0xc4
   14ac4:	81da      	strh	r2, [r3, #14]
	p->latency = conn->llcp_conn_param.latency;
   14ac6:	f8b4 20c6 	ldrh.w	r2, [r4, #198]	; 0xc6
   14aca:	821a      	strh	r2, [r3, #16]
	p->timeout = conn->llcp_conn_param.timeout;
   14acc:	f8b4 20c8 	ldrh.w	r2, [r4, #200]	; 0xc8
   14ad0:	825a      	strh	r2, [r3, #18]
	packet_rx_enqueue();
   14ad2:	f7fe ffbf 	bl	13a54 <packet_rx_enqueue>
   14ad6:	e67f      	b.n	147d8 <event_connection_prepare+0xc0>
		return (_radio.packet_rx_count -
   14ad8:	4977      	ldr	r1, [pc, #476]	; (14cb8 <event_connection_prepare+0x5a0>)
   14ada:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   14ade:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   14ae2:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   14ae4:	fa52 f383 	uxtab	r3, r2, r3
   14ae8:	b2db      	uxtb	r3, r3
   14aea:	e7c8      	b.n	14a7e <event_connection_prepare+0x366>
		return 0;
   14aec:	2300      	movs	r3, #0
   14aee:	e7cf      	b.n	14a90 <event_connection_prepare+0x378>
		LL_ASSERT(0);
   14af0:	4040      	eors	r0, r0
   14af2:	f380 8811 	msr	BASEPRI, r0
   14af6:	f04f 0004 	mov.w	r0, #4
   14afa:	df02      	svc	2
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14afc:	486f      	ldr	r0, [pc, #444]	; (14cbc <event_connection_prepare+0x5a4>)
   14afe:	f7f9 ff62 	bl	e9c6 <mem_acquire>
		if (!node_tx) {
   14b02:	4601      	mov	r1, r0
   14b04:	2800      	cmp	r0, #0
   14b06:	f43f ae27 	beq.w	14758 <event_connection_prepare+0x40>
		conn->llcp_phy.state = LLCP_PHY_STATE_ACK_WAIT;
   14b0a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b0e:	2201      	movs	r2, #1
   14b10:	f362 0301 	bfi	r3, r2, #0, #2
   14b14:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		conn->phy_pref_tx = conn->llcp_phy.tx;
   14b18:	b2db      	uxtb	r3, r3
   14b1a:	f3c3 0082 	ubfx	r0, r3, #2, #3
   14b1e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14b22:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_pref_rx = conn->llcp_phy.rx;
   14b26:	095b      	lsrs	r3, r3, #5
   14b28:	f894 0039 	ldrb.w	r0, [r4, #57]	; 0x39
   14b2c:	f363 00c5 	bfi	r0, r3, #3, #3
   14b30:	f884 0039 	strb.w	r0, [r4, #57]	; 0x39
		conn->phy_pref_flags = conn->llcp_phy.flags;
   14b34:	f894 00f7 	ldrb.w	r0, [r4, #247]	; 0xf7
   14b38:	4613      	mov	r3, r2
   14b3a:	f360 1386 	bfi	r3, r0, #6, #1
   14b3e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14b42:	790b      	ldrb	r3, [r1, #4]
   14b44:	f043 0303 	orr.w	r3, r3, #3
   14b48:	710b      	strb	r3, [r1, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14b4a:	2303      	movs	r3, #3
   14b4c:	714b      	strb	r3, [r1, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   14b4e:	2316      	movs	r3, #22
   14b50:	71cb      	strb	r3, [r1, #7]
		pr->tx_phys = conn->llcp_phy.tx;
   14b52:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b56:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14b5a:	720b      	strb	r3, [r1, #8]
		pr->rx_phys = conn->llcp_phy.rx;
   14b5c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b60:	f3c3 1342 	ubfx	r3, r3, #5, #3
   14b64:	724b      	strb	r3, [r1, #9]
		ctrl_tx_enqueue(conn, node_tx);
   14b66:	4620      	mov	r0, r4
   14b68:	f7fc f9c0 	bl	10eec <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   14b6c:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   14b70:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   14b74:	e5f0      	b.n	14758 <event_connection_prepare+0x40>
		conn->llcp_phy.ack = conn->llcp_phy.req;
   14b76:	f894 30f4 	ldrb.w	r3, [r4, #244]	; 0xf4
   14b7a:	f884 30f5 	strb.w	r3, [r4, #245]	; 0xf5
		if (conn->llcp_phy.tx & BIT(1)) {
   14b7e:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b82:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14b86:	f013 0f02 	tst.w	r3, #2
   14b8a:	d047      	beq.n	14c1c <event_connection_prepare+0x504>
			conn->llcp_phy.tx = BIT(1);
   14b8c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b90:	2202      	movs	r2, #2
   14b92:	f362 0384 	bfi	r3, r2, #2, #3
   14b96:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.rx & BIT(1)) {
   14b9a:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14b9e:	095b      	lsrs	r3, r3, #5
   14ba0:	f013 0f02 	tst.w	r3, #2
   14ba4:	d057      	beq.n	14c56 <event_connection_prepare+0x53e>
			conn->llcp_phy.rx = BIT(1);
   14ba6:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14baa:	2202      	movs	r2, #2
   14bac:	f362 1347 	bfi	r3, r2, #5, #3
   14bb0:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
		if (conn->llcp_phy.tx != conn->phy_tx) {
   14bb4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14bb8:	f3c3 0382 	ubfx	r3, r3, #2, #3
   14bbc:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   14bc0:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   14bc4:	4293      	cmp	r3, r2
   14bc6:	d063      	beq.n	14c90 <event_connection_prepare+0x578>
			conn->llcp.phy_upd_ind.tx = conn->llcp_phy.tx;
   14bc8:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14bcc:	f363 0284 	bfi	r2, r3, #2, #3
   14bd0:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		if (conn->llcp_phy.rx != conn->phy_rx) {
   14bd4:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14bd8:	095b      	lsrs	r3, r3, #5
   14bda:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   14bde:	f002 0207 	and.w	r2, r2, #7
   14be2:	4293      	cmp	r3, r2
   14be4:	d05b      	beq.n	14c9e <event_connection_prepare+0x586>
			conn->llcp.phy_upd_ind.rx = conn->llcp_phy.rx;
   14be6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14bea:	f363 1247 	bfi	r2, r3, #5, #3
   14bee:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.initiate = 1;
   14bf2:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
		conn->llcp.phy_upd_ind.cmd = conn->llcp_phy.cmd;
   14bf6:	f894 20f7 	ldrb.w	r2, [r4, #247]	; 0xf7
   14bfa:	f3c2 0240 	ubfx	r2, r2, #1, #1
   14bfe:	f043 0301 	orr.w	r3, r3, #1
   14c02:	f362 0341 	bfi	r3, r2, #1, #1
   14c06:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_PHY_UPD;
   14c0a:	2308      	movs	r3, #8
   14c0c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_ack--;
   14c10:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   14c14:	3b01      	subs	r3, #1
   14c16:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
   14c1a:	e59d      	b.n	14758 <event_connection_prepare+0x40>
		} else if (conn->llcp_phy.tx & BIT(0)) {
   14c1c:	f013 0f01 	tst.w	r3, #1
   14c20:	d007      	beq.n	14c32 <event_connection_prepare+0x51a>
			conn->llcp_phy.tx = BIT(0);
   14c22:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c26:	2201      	movs	r2, #1
   14c28:	f362 0384 	bfi	r3, r2, #2, #3
   14c2c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c30:	e7b3      	b.n	14b9a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.tx & BIT(2)) {
   14c32:	f013 0f04 	tst.w	r3, #4
   14c36:	d007      	beq.n	14c48 <event_connection_prepare+0x530>
			conn->llcp_phy.tx = BIT(2);
   14c38:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c3c:	2204      	movs	r2, #4
   14c3e:	f362 0384 	bfi	r3, r2, #2, #3
   14c42:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c46:	e7a8      	b.n	14b9a <event_connection_prepare+0x482>
			conn->llcp_phy.tx = 0;
   14c48:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c4c:	f36f 0384 	bfc	r3, #2, #3
   14c50:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c54:	e7a1      	b.n	14b9a <event_connection_prepare+0x482>
		} else if (conn->llcp_phy.rx & BIT(0)) {
   14c56:	f013 0f01 	tst.w	r3, #1
   14c5a:	d007      	beq.n	14c6c <event_connection_prepare+0x554>
			conn->llcp_phy.rx = BIT(0);
   14c5c:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c60:	2201      	movs	r2, #1
   14c62:	f362 1347 	bfi	r3, r2, #5, #3
   14c66:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c6a:	e7a3      	b.n	14bb4 <event_connection_prepare+0x49c>
		} else if (conn->llcp_phy.rx & BIT(2)) {
   14c6c:	f013 0f04 	tst.w	r3, #4
   14c70:	d007      	beq.n	14c82 <event_connection_prepare+0x56a>
			conn->llcp_phy.rx = BIT(2);
   14c72:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c76:	2204      	movs	r2, #4
   14c78:	f362 1347 	bfi	r3, r2, #5, #3
   14c7c:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c80:	e798      	b.n	14bb4 <event_connection_prepare+0x49c>
			conn->llcp_phy.rx = 0;
   14c82:	f894 30f6 	ldrb.w	r3, [r4, #246]	; 0xf6
   14c86:	f36f 1347 	bfc	r3, #5, #3
   14c8a:	f884 30f6 	strb.w	r3, [r4, #246]	; 0xf6
   14c8e:	e791      	b.n	14bb4 <event_connection_prepare+0x49c>
			conn->llcp.phy_upd_ind.tx = 0;
   14c90:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14c94:	f36f 0384 	bfc	r3, #2, #3
   14c98:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14c9c:	e79a      	b.n	14bd4 <event_connection_prepare+0x4bc>
			conn->llcp.phy_upd_ind.rx = 0;
   14c9e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14ca2:	f36f 1347 	bfc	r3, #5, #3
   14ca6:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   14caa:	e7a2      	b.n	14bf2 <event_connection_prepare+0x4da>
		LL_ASSERT(0);
   14cac:	4040      	eors	r0, r0
   14cae:	f380 8811 	msr	BASEPRI, r0
   14cb2:	f04f 0004 	mov.w	r0, #4
   14cb6:	df02      	svc	2
   14cb8:	20000f84 	.word	0x20000f84
   14cbc:	200010dc 	.word	0x200010dc
	conn_upd = _radio.conn_upd;
   14cc0:	4bb7      	ldr	r3, [pc, #732]	; (14fa0 <event_connection_prepare+0x888>)
   14cc2:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
	if (!conn_upd) {
   14cc6:	2b00      	cmp	r3, #0
   14cc8:	f000 814b 	beq.w	14f62 <event_connection_prepare+0x84a>
	instant_latency = (event_counter - conn->llcp.conn_upd.instant) &
   14ccc:	f8b4 8080 	ldrh.w	r8, [r4, #128]	; 0x80
   14cd0:	eba5 0808 	sub.w	r8, r5, r8
   14cd4:	fa1f f888 	uxth.w	r8, r8
	if (conn->llcp.conn_upd.state != LLCP_CUI_STATE_INPROG) {
   14cd8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14cdc:	f013 0f03 	tst.w	r3, #3
   14ce0:	f040 8143 	bne.w	14f6a <event_connection_prepare+0x852>
	} else if (instant_latency <= 0x7FFF) {
   14ce4:	f418 4f00 	tst.w	r8, #32768	; 0x8000
   14ce8:	f040 8296 	bne.w	15218 <event_connection_prepare+0xb00>
		conn->llcp_ack = conn->llcp_req;
   14cec:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   14cf0:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14cf4:	f894 20c0 	ldrb.w	r2, [r4, #192]	; 0xc0
   14cf8:	f894 30c1 	ldrb.w	r3, [r4, #193]	; 0xc1
   14cfc:	429a      	cmp	r2, r3
   14cfe:	d006      	beq.n	14d0e <event_connection_prepare+0x5f6>
		    (conn->llcp_conn_param.state == LLCP_CPR_STATE_UPD)) {
   14d00:	f894 30c2 	ldrb.w	r3, [r4, #194]	; 0xc2
   14d04:	f003 0307 	and.w	r3, r3, #7
		if ((conn->llcp_conn_param.req != conn->llcp_conn_param.ack) &&
   14d08:	2b05      	cmp	r3, #5
   14d0a:	f000 81bb 	beq.w	15084 <event_connection_prepare+0x96c>
		_radio.ticker_id_prepare = 0;
   14d0e:	4ba4      	ldr	r3, [pc, #656]	; (14fa0 <event_connection_prepare+0x888>)
   14d10:	2200      	movs	r2, #0
   14d12:	731a      	strb	r2, [r3, #12]
		if (_radio.conn_upd == conn) {
   14d14:	f8d3 3184 	ldr.w	r3, [r3, #388]	; 0x184
   14d18:	429c      	cmp	r4, r3
   14d1a:	f000 81b9 	beq.w	15090 <event_connection_prepare+0x978>
		if ((conn->llcp.conn_upd.interval !=
   14d1e:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
		     conn->conn_interval) ||
   14d22:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
		if ((conn->llcp.conn_upd.interval !=
   14d24:	429a      	cmp	r2, r3
   14d26:	f000 81b7 	beq.w	15098 <event_connection_prepare+0x980>
	if (_radio.packet_rx_acquire >=
   14d2a:	4b9d      	ldr	r3, [pc, #628]	; (14fa0 <event_connection_prepare+0x888>)
   14d2c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   14d30:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14d34:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   14d36:	429a      	cmp	r2, r3
   14d38:	f0c0 81c7 	bcc.w	150ca <event_connection_prepare+0x9b2>
			_radio.packet_rx_last);
   14d3c:	4b98      	ldr	r3, [pc, #608]	; (14fa0 <event_connection_prepare+0x888>)
   14d3e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   14d42:	1ad3      	subs	r3, r2, r3
   14d44:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   14d46:	2b01      	cmp	r3, #1
   14d48:	f240 81c9 	bls.w	150de <event_connection_prepare+0x9c6>
	return _radio.packet_rx[_radio.packet_rx_last];
   14d4c:	4b94      	ldr	r3, [pc, #592]	; (14fa0 <event_connection_prepare+0x888>)
   14d4e:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   14d52:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   14d56:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   14d5a:	2b00      	cmp	r3, #0
   14d5c:	f000 81c1 	beq.w	150e2 <event_connection_prepare+0x9ca>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   14d60:	8c22      	ldrh	r2, [r4, #32]
   14d62:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONN_UPDATE;
   14d64:	2208      	movs	r2, #8
   14d66:	711a      	strb	r2, [r3, #4]
			radio_le_conn_update_cmplt->status = 0x00;
   14d68:	2200      	movs	r2, #0
   14d6a:	72da      	strb	r2, [r3, #11]
			radio_le_conn_update_cmplt->interval =
   14d6c:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   14d70:	819a      	strh	r2, [r3, #12]
			radio_le_conn_update_cmplt->latency =
   14d72:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14d76:	81da      	strh	r2, [r3, #14]
			radio_le_conn_update_cmplt->timeout =
   14d78:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   14d7c:	821a      	strh	r2, [r3, #16]
			packet_rx_enqueue();
   14d7e:	f7fe fe69 	bl	13a54 <packet_rx_enqueue>
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   14d82:	6823      	ldr	r3, [r4, #0]
   14d84:	2b00      	cmp	r3, #0
   14d86:	f2c0 81b2 	blt.w	150ee <event_connection_prepare+0x9d6>
   14d8a:	46b1      	mov	r9, r6
		conn_interval_old = instant_latency * conn->conn_interval;
   14d8c:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   14d8e:	fb18 f303 	smulbb	r3, r8, r3
   14d92:	b29b      	uxth	r3, r3
			conn->llcp.conn_upd.interval;
   14d94:	f8b4 a07a 	ldrh.w	sl, [r4, #122]	; 0x7a
		latency = conn_interval_old /
   14d98:	fbb3 fbfa 	udiv	fp, r3, sl
		conn_interval_new = latency *
   14d9c:	fb1a f00b 	smulbb	r0, sl, fp
   14da0:	b280      	uxth	r0, r0
		if (conn_interval_new > conn_interval_old) {
   14da2:	4283      	cmp	r3, r0
   14da4:	f080 81b1 	bcs.w	1510a <event_connection_prepare+0x9f2>
				TICKER_US_TO_TICKS((conn_interval_new -
   14da8:	1ac3      	subs	r3, r0, r3
   14daa:	17d9      	asrs	r1, r3, #31
   14dac:	487d      	ldr	r0, [pc, #500]	; (14fa4 <event_connection_prepare+0x88c>)
   14dae:	f240 1223 	movw	r2, #291	; 0x123
   14db2:	fb02 f203 	mul.w	r2, r2, r3
   14db6:	fb00 2201 	mla	r2, r0, r1, r2
   14dba:	fba3 0100 	umull	r0, r1, r3, r0
   14dbe:	4411      	add	r1, r2
   14dc0:	a375      	add	r3, pc, #468	; (adr r3, 14f98 <event_connection_prepare+0x880>)
   14dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
   14dc6:	f7eb fd09 	bl	7dc <__aeabi_uldivmod>
   14dca:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire +=
   14dce:	eb00 0309 	add.w	r3, r0, r9
   14dd2:	930b      	str	r3, [sp, #44]	; 0x2c
		conn->latency_prepare -= (instant_latency - latency);
   14dd4:	ebab 0308 	sub.w	r3, fp, r8
   14dd8:	8d22      	ldrh	r2, [r4, #40]	; 0x28
   14dda:	fa12 f383 	uxtah	r3, r2, r3
   14dde:	8523      	strh	r3, [r4, #40]	; 0x28
			conn->hdr.ticks_active_to_start;
   14de0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start :
   14de2:	6823      	ldr	r3, [r4, #0]
		ticks_slot_offset =
   14de4:	429a      	cmp	r2, r3
   14de6:	bf38      	it	cc
   14de8:	461a      	movcc	r2, r3
   14dea:	920c      	str	r2, [sp, #48]	; 0x30
		conn_interval_us = conn->llcp.conn_upd.interval * 1250;
   14dec:	f240 49e2 	movw	r9, #1250	; 0x4e2
   14df0:	fb09 f90a 	mul.w	r9, r9, sl
		if (conn->role) {
   14df4:	f994 301d 	ldrsb.w	r3, [r4, #29]
   14df8:	2b00      	cmp	r3, #0
   14dfa:	f2c0 819d 	blt.w	15138 <event_connection_prepare+0xa20>
				TICKER_US_TO_TICKS(conn->llcp.conn_upd.win_offset_us);
   14dfe:	f8d4 0084 	ldr.w	r0, [r4, #132]	; 0x84
   14e02:	a365      	add	r3, pc, #404	; (adr r3, 14f98 <event_connection_prepare+0x880>)
   14e04:	e9d3 2300 	ldrd	r2, r3, [r3]
   14e08:	4967      	ldr	r1, [pc, #412]	; (14fa8 <event_connection_prepare+0x890>)
   14e0a:	fba0 0101 	umull	r0, r1, r0, r1
   14e0e:	f7eb fce5 	bl	7dc <__aeabi_uldivmod>
			ticks_win_offset =
   14e12:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_win_offset += 1;
   14e16:	f100 0b01 	add.w	fp, r0, #1
		periodic_us = conn_interval_us;
   14e1a:	46c8      	mov	r8, r9
		conn->conn_interval = conn->llcp.conn_upd.interval;
   14e1c:	f8a4 a024 	strh.w	sl, [r4, #36]	; 0x24
		conn->latency = conn->llcp.conn_upd.latency;
   14e20:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   14e24:	84e2      	strh	r2, [r4, #38]	; 0x26
			RADIO_CONN_EVENTS((conn->llcp.conn_upd.timeout
   14e26:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   14e2a:	f242 7110 	movw	r1, #10000	; 0x2710
   14e2e:	fb01 9303 	mla	r3, r1, r3, r9
   14e32:	3b01      	subs	r3, #1
   14e34:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->supervision_reload =
   14e38:	87e3      	strh	r3, [r4, #62]	; 0x3e
			RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   14e3a:	4b5c      	ldr	r3, [pc, #368]	; (14fac <event_connection_prepare+0x894>)
   14e3c:	444b      	add	r3, r9
   14e3e:	fbb3 f3f9 	udiv	r3, r3, r9
		conn->procedure_reload =
   14e42:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   14e46:	4b5a      	ldr	r3, [pc, #360]	; (14fb0 <event_connection_prepare+0x898>)
   14e48:	444b      	add	r3, r9
   14e4a:	fbb3 f9f9 	udiv	r9, r3, r9
   14e4e:	fa1f f989 	uxth.w	r9, r9
   14e52:	f8a4 904a 	strh.w	r9, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14e56:	1d93      	adds	r3, r2, #6
   14e58:	4599      	cmp	r9, r3
   14e5a:	dd07      	ble.n	14e6c <event_connection_prepare+0x754>
				     (conn->apto_reload - (conn->latency + 6)) :
   14e5c:	eba9 0902 	sub.w	r9, r9, r2
   14e60:	fa1f f989 	uxth.w	r9, r9
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   14e64:	f1a9 0906 	sub.w	r9, r9, #6
   14e68:	fa1f f989 	uxth.w	r9, r9
   14e6c:	f8a4 9046 	strh.w	r9, [r4, #70]	; 0x46
		if (!conn->llcp.conn_upd.is_internal) {
   14e70:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   14e74:	f013 0f04 	tst.w	r3, #4
   14e78:	d102      	bne.n	14e80 <event_connection_prepare+0x768>
			conn->supervision_expire = 0;
   14e7a:	2300      	movs	r3, #0
   14e7c:	f8a4 3040 	strh.w	r3, [r4, #64]	; 0x40
		mayfly_was_enabled =
   14e80:	2101      	movs	r1, #1
   14e82:	2000      	movs	r0, #0
   14e84:	f003 fe2d 	bl	18ae2 <mayfly_is_enabled>
   14e88:	4681      	mov	r9, r0
		mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   14e8a:	2200      	movs	r2, #0
   14e8c:	2101      	movs	r1, #1
   14e8e:	4610      	mov	r0, r2
   14e90:	f7f9 fc1a 	bl	e6c8 <mayfly_enable>
				    conn->handle, ticker_success_assert,
   14e94:	8c22      	ldrh	r2, [r4, #32]
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   14e96:	3207      	adds	r2, #7
		ticker_status =
   14e98:	f641 13e3 	movw	r3, #6627	; 0x19e3
   14e9c:	9300      	str	r3, [sp, #0]
   14e9e:	4b45      	ldr	r3, [pc, #276]	; (14fb4 <event_connection_prepare+0x89c>)
   14ea0:	b2d2      	uxtb	r2, r2
   14ea2:	2100      	movs	r1, #0
   14ea4:	4608      	mov	r0, r1
   14ea6:	f7fb fafb 	bl	104a0 <ticker_stop>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14eaa:	b110      	cbz	r0, 14eb2 <event_connection_prepare+0x79a>
   14eac:	2802      	cmp	r0, #2
   14eae:	f040 819a 	bne.w	151e6 <event_connection_prepare+0xace>
				     conn->handle,
   14eb2:	f8b4 a020 	ldrh.w	sl, [r4, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14eb6:	f10a 0a07 	add.w	sl, sl, #7
   14eba:	fa5f fa8a 	uxtb.w	sl, sl
				     TICKER_US_TO_TICKS(periodic_us),
   14ebe:	4b3a      	ldr	r3, [pc, #232]	; (14fa8 <event_connection_prepare+0x890>)
   14ec0:	fba8 2303 	umull	r2, r3, r8, r3
   14ec4:	4617      	mov	r7, r2
   14ec6:	4698      	mov	r8, r3
   14ec8:	a333      	add	r3, pc, #204	; (adr r3, 14f98 <event_connection_prepare+0x880>)
   14eca:	e9d3 2300 	ldrd	r2, r3, [r3]
   14ece:	4638      	mov	r0, r7
   14ed0:	4641      	mov	r1, r8
   14ed2:	f7eb fc83 	bl	7dc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14ed6:	f020 437f 	bic.w	r3, r0, #4278190080	; 0xff000000
   14eda:	930d      	str	r3, [sp, #52]	; 0x34
				     TICKER_REMAINDER(periodic_us),
   14edc:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   14ee0:	2100      	movs	r1, #0
   14ee2:	4a35      	ldr	r2, [pc, #212]	; (14fb8 <event_connection_prepare+0x8a0>)
   14ee4:	2307      	movs	r3, #7
   14ee6:	fb03 f300 	mul.w	r3, r3, r0
   14eea:	fb02 3301 	mla	r3, r2, r1, r3
   14eee:	fba0 0102 	umull	r0, r1, r0, r2
   14ef2:	4419      	add	r1, r3
   14ef4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   14ef8:	2300      	movs	r3, #0
   14efa:	1a3f      	subs	r7, r7, r0
   14efc:	eb68 0801 	sbc.w	r8, r8, r1
   14f00:	4638      	mov	r0, r7
   14f02:	4641      	mov	r1, r8
   14f04:	f7eb fc6a 	bl	7dc <__aeabi_uldivmod>
   14f08:	4602      	mov	r2, r0
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   14f0a:	68e3      	ldr	r3, [r4, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   14f0c:	990c      	ldr	r1, [sp, #48]	; 0x30
   14f0e:	440b      	add	r3, r1
   14f10:	b29b      	uxth	r3, r3
   14f12:	f994 101d 	ldrsb.w	r1, [r4, #29]
   14f16:	2900      	cmp	r1, #0
   14f18:	f2c0 816b 	blt.w	151f2 <event_connection_prepare+0xada>
   14f1c:	4927      	ldr	r1, [pc, #156]	; (14fbc <event_connection_prepare+0x8a4>)
		ticker_status =
   14f1e:	f641 10f3 	movw	r0, #6643	; 0x19f3
   14f22:	9008      	str	r0, [sp, #32]
   14f24:	4823      	ldr	r0, [pc, #140]	; (14fb4 <event_connection_prepare+0x89c>)
   14f26:	9007      	str	r0, [sp, #28]
   14f28:	9406      	str	r4, [sp, #24]
   14f2a:	9105      	str	r1, [sp, #20]
   14f2c:	9304      	str	r3, [sp, #16]
   14f2e:	2000      	movs	r0, #0
   14f30:	9003      	str	r0, [sp, #12]
   14f32:	9202      	str	r2, [sp, #8]
   14f34:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   14f36:	9301      	str	r3, [sp, #4]
   14f38:	f8cd b000 	str.w	fp, [sp]
   14f3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   14f3e:	4652      	mov	r2, sl
   14f40:	4601      	mov	r1, r0
   14f42:	f7fb fa11 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   14f46:	b110      	cbz	r0, 14f4e <event_connection_prepare+0x836>
   14f48:	2802      	cmp	r0, #2
   14f4a:	f040 8154 	bne.w	151f6 <event_connection_prepare+0xade>
		if (mayfly_was_enabled) {
   14f4e:	f1b9 0f00 	cmp.w	r9, #0
   14f52:	f040 8156 	bne.w	15202 <event_connection_prepare+0xaea>
			if (event_conn_upd_prep(conn, event_counter,
   14f56:	f1b9 0f00 	cmp.w	r9, #0
   14f5a:	f040 821e 	bne.w	1539a <event_connection_prepare+0xc82>
   14f5e:	f000 be59 	b.w	15c14 <event_connection_prepare+0x14fc>
		_radio.conn_upd = conn;
   14f62:	4b0f      	ldr	r3, [pc, #60]	; (14fa0 <event_connection_prepare+0x888>)
   14f64:	f8c3 4184 	str.w	r4, [r3, #388]	; 0x184
   14f68:	e6b0      	b.n	14ccc <event_connection_prepare+0x5b4>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   14f6a:	4815      	ldr	r0, [pc, #84]	; (14fc0 <event_connection_prepare+0x8a8>)
   14f6c:	f7f9 fd2b 	bl	e9c6 <mem_acquire>
		if (!node_tx) {
   14f70:	4680      	mov	r8, r0
   14f72:	2800      	cmp	r0, #0
   14f74:	f000 814d 	beq.w	15212 <event_connection_prepare+0xafa>
		pdu_ctrl_tx = (struct pdu_data *)node_tx->pdu_data;
   14f78:	1d03      	adds	r3, r0, #4
		switch (conn->llcp.conn_upd.state) {
   14f7a:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14f7e:	f002 0203 	and.w	r2, r2, #3
   14f82:	2a01      	cmp	r2, #1
   14f84:	d01e      	beq.n	14fc4 <event_connection_prepare+0x8ac>
   14f86:	2a02      	cmp	r2, #2
   14f88:	d066      	beq.n	15058 <event_connection_prepare+0x940>
			LL_ASSERT(0);
   14f8a:	4040      	eors	r0, r0
   14f8c:	f380 8811 	msr	BASEPRI, r0
   14f90:	f04f 0004 	mov.w	r0, #4
   14f94:	df02      	svc	2
   14f96:	bf00      	nop
   14f98:	1afd498d 	.word	0x1afd498d
   14f9c:	00000007 	.word	0x00000007
   14fa0:	20000f84 	.word	0x20000f84
   14fa4:	09ce5400 	.word	0x09ce5400
   14fa8:	3b9aca00 	.word	0x3b9aca00
   14fac:	026259ff 	.word	0x026259ff
   14fb0:	01c9c37f 	.word	0x01c9c37f
   14fb4:	000110bd 	.word	0x000110bd
   14fb8:	1afd498d 	.word	0x1afd498d
   14fbc:	00015c7d 	.word	0x00015c7d
   14fc0:	200010dc 	.word	0x200010dc
			fp_mayfly_select_or_use = mayfly_sched_win_offset_use;
   14fc4:	49bc      	ldr	r1, [pc, #752]	; (152b8 <event_connection_prepare+0xba0>)
	conn->llcp.conn_upd.state = LLCP_CUI_STATE_INPROG;
   14fc6:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   14fca:	f36f 0201 	bfc	r2, #0, #2
   14fce:	f884 2078 	strb.w	r2, [r4, #120]	; 0x78
		event_counter + conn->latency + 6;
   14fd2:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   14fd4:	442a      	add	r2, r5
   14fd6:	b292      	uxth	r2, r2
   14fd8:	3206      	adds	r2, #6
	conn->llcp.conn_upd.instant =
   14fda:	f8a4 2080 	strh.w	r2, [r4, #128]	; 0x80
	pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   14fde:	f898 2004 	ldrb.w	r2, [r8, #4]
   14fe2:	f042 0203 	orr.w	r2, r2, #3
   14fe6:	f888 2004 	strb.w	r2, [r8, #4]
	pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   14fea:	220c      	movs	r2, #12
   14fec:	705a      	strb	r2, [r3, #1]
	pdu_ctrl_tx->payload.llctrl.opcode =
   14fee:	2200      	movs	r2, #0
   14ff0:	70da      	strb	r2, [r3, #3]
		conn->llcp.conn_upd.win_size;
   14ff2:	f894 2088 	ldrb.w	r2, [r4, #136]	; 0x88
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.win_size =
   14ff6:	711a      	strb	r2, [r3, #4]
		win_offset = conn->llcp.conn_upd.win_offset_us / 1250;
   14ff8:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   14ffc:	48af      	ldr	r0, [pc, #700]	; (152bc <event_connection_prepare+0xba4>)
   14ffe:	fba0 0202 	umull	r0, r2, r0, r2
   15002:	0a92      	lsrs	r2, r2, #10
   15004:	f8a3 2005 	strh.w	r2, [r3, #5]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.interval =
   15008:	f8b4 207a 	ldrh.w	r2, [r4, #122]	; 0x7a
   1500c:	f8a3 2007 	strh.w	r2, [r3, #7]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.latency =
   15010:	f8b4 207c 	ldrh.w	r2, [r4, #124]	; 0x7c
   15014:	f8a3 2009 	strh.w	r2, [r3, #9]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.timeout =
   15018:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   1501c:	f8a3 200b 	strh.w	r2, [r3, #11]
	pdu_ctrl_tx->payload.llctrl.ctrldata.conn_update_ind.instant =
   15020:	f8b4 2080 	ldrh.w	r2, [r4, #128]	; 0x80
   15024:	f8a3 200d 	strh.w	r2, [r3, #13]
		conn->llcp.conn_upd.ticks_anchor = ticks_at_expire;
   15028:	f8c4 6090 	str.w	r6, [r4, #144]	; 0x90
		if (conn->hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   1502c:	6820      	ldr	r0, [r4, #0]
   1502e:	2800      	cmp	r0, #0
   15030:	db14      	blt.n	1505c <event_connection_prepare+0x944>
		conn->llcp.conn_upd.pdu_win_offset = (u16_t *)
   15032:	3305      	adds	r3, #5
   15034:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		mayfly_sched_offset->fp = fp_mayfly_select_or_use;
   15038:	4ba1      	ldr	r3, [pc, #644]	; (152c0 <event_connection_prepare+0xba8>)
   1503a:	60d9      	str	r1, [r3, #12]
		mayfly_sched_offset->param = (void *)conn;
   1503c:	609c      	str	r4, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   1503e:	2201      	movs	r2, #1
   15040:	4611      	mov	r1, r2
   15042:	2000      	movs	r0, #0
   15044:	f7f9 fb7e 	bl	e744 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15048:	b9b0      	cbnz	r0, 15078 <event_connection_prepare+0x960>
		ctrl_tx_enqueue(conn, node_tx);
   1504a:	4641      	mov	r1, r8
   1504c:	4620      	mov	r0, r4
   1504e:	f7fb ff4d 	bl	10eec <ctrl_tx_enqueue>
	return 1;
   15052:	f04f 0901 	mov.w	r9, #1
   15056:	e77e      	b.n	14f56 <event_connection_prepare+0x83e>
			fp_mayfly_select_or_use =
   15058:	499a      	ldr	r1, [pc, #616]	; (152c4 <event_connection_prepare+0xbac>)
   1505a:	e7b4      	b.n	14fc6 <event_connection_prepare+0x8ae>
				conn->hdr.ticks_preempt_to_start;
   1505c:	68a7      	ldr	r7, [r4, #8]
				conn->hdr.ticks_active_to_start :
   1505e:	6862      	ldr	r2, [r4, #4]
				((conn->hdr.ticks_xtal_to_start &
   15060:	f020 4e00 	bic.w	lr, r0, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15064:	4297      	cmp	r7, r2
   15066:	bf2c      	ite	cs
   15068:	ebce 0207 	rsbcs	r2, lr, r7
   1506c:	ebce 0202 	rsbcc	r2, lr, r2
			conn->llcp.conn_upd.ticks_anchor -=
   15070:	4432      	add	r2, r6
   15072:	f8c4 2090 	str.w	r2, [r4, #144]	; 0x90
   15076:	e7dc      	b.n	15032 <event_connection_prepare+0x91a>
		LL_ASSERT(!retval);
   15078:	4040      	eors	r0, r0
   1507a:	f380 8811 	msr	BASEPRI, r0
   1507e:	f04f 0004 	mov.w	r0, #4
   15082:	df02      	svc	2
			conn->llcp_conn_param.ack = conn->llcp_conn_param.req;
   15084:	f884 20c1 	strb.w	r2, [r4, #193]	; 0xc1
			conn->procedure_expire = 0;
   15088:	2300      	movs	r3, #0
   1508a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1508e:	e63e      	b.n	14d0e <event_connection_prepare+0x5f6>
			_radio.conn_upd = NULL;
   15090:	4b8d      	ldr	r3, [pc, #564]	; (152c8 <event_connection_prepare+0xbb0>)
   15092:	f8c3 2184 	str.w	r2, [r3, #388]	; 0x184
   15096:	e642      	b.n	14d1e <event_connection_prepare+0x606>
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   15098:	f8b4 107c 	ldrh.w	r1, [r4, #124]	; 0x7c
   1509c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
		     conn->conn_interval) ||
   1509e:	4291      	cmp	r1, r2
   150a0:	f47f ae43 	bne.w	14d2a <event_connection_prepare+0x612>
		    (RADIO_CONN_EVENTS(conn->llcp.conn_upd.timeout *
   150a4:	f8b4 207e 	ldrh.w	r2, [r4, #126]	; 0x7e
   150a8:	f240 41e2 	movw	r1, #1250	; 0x4e2
   150ac:	fb01 f103 	mul.w	r1, r1, r3
   150b0:	f242 7310 	movw	r3, #10000	; 0x2710
   150b4:	fb03 1302 	mla	r3, r3, r2, r1
   150b8:	3b01      	subs	r3, #1
   150ba:	fb93 f3f1 	sdiv	r3, r3, r1
   150be:	b29b      	uxth	r3, r3
		     conn->supervision_reload)) {
   150c0:	8fe2      	ldrh	r2, [r4, #62]	; 0x3e
		    (conn->llcp.conn_upd.latency != conn->latency) ||
   150c2:	4293      	cmp	r3, r2
   150c4:	f47f ae31 	bne.w	14d2a <event_connection_prepare+0x612>
   150c8:	e65b      	b.n	14d82 <event_connection_prepare+0x66a>
		return (_radio.packet_rx_count -
   150ca:	497f      	ldr	r1, [pc, #508]	; (152c8 <event_connection_prepare+0xbb0>)
   150cc:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   150d0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   150d4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   150d6:	fa52 f383 	uxtab	r3, r2, r3
   150da:	b2db      	uxtb	r3, r3
   150dc:	e633      	b.n	14d46 <event_connection_prepare+0x62e>
		return 0;
   150de:	2300      	movs	r3, #0
   150e0:	e63b      	b.n	14d5a <event_connection_prepare+0x642>
			LL_ASSERT(radio_pdu_node_rx);
   150e2:	4040      	eors	r0, r0
   150e4:	f380 8811 	msr	BASEPRI, r0
   150e8:	f04f 0004 	mov.w	r0, #4
   150ec:	df02      	svc	2
				conn->hdr.ticks_preempt_to_start;
   150ee:	68a1      	ldr	r1, [r4, #8]
				conn->hdr.ticks_active_to_start :
   150f0:	6862      	ldr	r2, [r4, #4]
			conn->hdr.ticks_xtal_to_start &= ~((u32_t)1 << 31);
   150f2:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
   150f6:	6023      	str	r3, [r4, #0]
			ticks_at_expire -= (conn->hdr.ticks_xtal_to_start -
   150f8:	4291      	cmp	r1, r2
   150fa:	bf2c      	ite	cs
   150fc:	ebc3 0301 	rsbcs	r3, r3, r1
   15100:	ebc3 0302 	rsbcc	r3, r3, r2
   15104:	eb06 0903 	add.w	r9, r6, r3
   15108:	e640      	b.n	14d8c <event_connection_prepare+0x674>
				TICKER_US_TO_TICKS((conn_interval_old -
   1510a:	1a1b      	subs	r3, r3, r0
   1510c:	17d9      	asrs	r1, r3, #31
   1510e:	486f      	ldr	r0, [pc, #444]	; (152cc <event_connection_prepare+0xbb4>)
   15110:	f240 1223 	movw	r2, #291	; 0x123
   15114:	fb02 f203 	mul.w	r2, r2, r3
   15118:	fb00 2201 	mla	r2, r0, r1, r2
   1511c:	fba3 0100 	umull	r0, r1, r3, r0
   15120:	4411      	add	r1, r2
   15122:	a363      	add	r3, pc, #396	; (adr r3, 152b0 <event_connection_prepare+0xb98>)
   15124:	e9d3 2300 	ldrd	r2, r3, [r3]
   15128:	f7eb fb58 	bl	7dc <__aeabi_uldivmod>
   1512c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   15130:	eba9 0300 	sub.w	r3, r9, r0
   15134:	930b      	str	r3, [sp, #44]	; 0x2c
   15136:	e64d      	b.n	14dd4 <event_connection_prepare+0x6bc>
				conn->slave.window_widening_periodic_us *
   15138:	6d62      	ldr	r2, [r4, #84]	; 0x54
			conn->slave.window_widening_prepare_us -=
   1513a:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   1513c:	fb02 3218 	mls	r2, r2, r8, r3
   15140:	65e2      	str	r2, [r4, #92]	; 0x5c
				(((gc_lookup_ppm[_radio.sca] +
   15142:	4b61      	ldr	r3, [pc, #388]	; (152c8 <event_connection_prepare+0xbb0>)
   15144:	f893 311c 	ldrb.w	r3, [r3, #284]	; 0x11c
   15148:	4861      	ldr	r0, [pc, #388]	; (152d0 <event_connection_prepare+0xbb8>)
   1514a:	f830 3013 	ldrh.w	r3, [r0, r3, lsl #1]
				   gc_lookup_ppm[conn->slave.sca]) *
   1514e:	f894 1050 	ldrb.w	r1, [r4, #80]	; 0x50
   15152:	f3c1 0182 	ubfx	r1, r1, #2, #3
   15156:	f830 1011 	ldrh.w	r1, [r0, r1, lsl #1]
				(((gc_lookup_ppm[_radio.sca] +
   1515a:	440b      	add	r3, r1
				   gc_lookup_ppm[conn->slave.sca]) *
   1515c:	fb03 f309 	mul.w	r3, r3, r9
				  conn_interval_us) + (1000000 - 1)) / 1000000;
   15160:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   15164:	f203 233f 	addw	r3, r3, #575	; 0x23f
   15168:	495a      	ldr	r1, [pc, #360]	; (152d4 <event_connection_prepare+0xbbc>)
   1516a:	fba1 1303 	umull	r1, r3, r1, r3
   1516e:	ea4f 4893 	mov.w	r8, r3, lsr #18
			conn->slave.window_widening_periodic_us =
   15172:	f8c4 8054 	str.w	r8, [r4, #84]	; 0x54
				(conn_interval_us >> 1) - RADIO_TIFS;
   15176:	ea4f 0359 	mov.w	r3, r9, lsr #1
   1517a:	3b96      	subs	r3, #150	; 0x96
			conn->slave.window_widening_max_us =
   1517c:	65a3      	str	r3, [r4, #88]	; 0x58
				conn->llcp.conn_upd.win_size * 1250;
   1517e:	f894 0088 	ldrb.w	r0, [r4, #136]	; 0x88
   15182:	f240 41e2 	movw	r1, #1250	; 0x4e2
   15186:	fb01 f100 	mul.w	r1, r1, r0
			conn->slave.window_size_prepare_us =
   1518a:	6661      	str	r1, [r4, #100]	; 0x64
			conn->slave.ticks_to_offset = 0;
   1518c:	2100      	movs	r1, #0
   1518e:	6721      	str	r1, [r4, #112]	; 0x70
				conn->slave.window_widening_periodic_us *
   15190:	fb08 f00b 	mul.w	r0, r8, fp
			conn->slave.window_widening_prepare_us +=
   15194:	4402      	add	r2, r0
   15196:	65e2      	str	r2, [r4, #92]	; 0x5c
			if (conn->slave.window_widening_prepare_us >
   15198:	4293      	cmp	r3, r2
   1519a:	d200      	bcs.n	1519e <event_connection_prepare+0xa86>
				conn->slave.window_widening_prepare_us =
   1519c:	65e3      	str	r3, [r4, #92]	; 0x5c
				TICKER_US_TO_TICKS(conn->slave.window_widening_periodic_us *
   1519e:	f8df b140 	ldr.w	fp, [pc, #320]	; 152e0 <event_connection_prepare+0xbc8>
   151a2:	a343      	add	r3, pc, #268	; (adr r3, 152b0 <event_connection_prepare+0xb98>)
   151a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   151a8:	fba0 010b 	umull	r0, r1, r0, fp
   151ac:	f7eb fb16 	bl	7dc <__aeabi_uldivmod>
   151b0:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
			ticks_at_expire -=
   151b4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   151b6:	1a1b      	subs	r3, r3, r0
   151b8:	930b      	str	r3, [sp, #44]	; 0x2c
				TICKER_US_TO_TICKS((conn->llcp.conn_upd.win_offset_us /
   151ba:	f8d4 3084 	ldr.w	r3, [r4, #132]	; 0x84
   151be:	4a3f      	ldr	r2, [pc, #252]	; (152bc <event_connection_prepare+0xba4>)
   151c0:	fba2 2303 	umull	r2, r3, r2, r3
   151c4:	0a9b      	lsrs	r3, r3, #10
   151c6:	f240 40e2 	movw	r0, #1250	; 0x4e2
   151ca:	fb00 f003 	mul.w	r0, r0, r3
   151ce:	a338      	add	r3, pc, #224	; (adr r3, 152b0 <event_connection_prepare+0xb98>)
   151d0:	e9d3 2300 	ldrd	r2, r3, [r3]
   151d4:	fba0 010b 	umull	r0, r1, r0, fp
   151d8:	f7eb fb00 	bl	7dc <__aeabi_uldivmod>
			ticks_win_offset =
   151dc:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
			periodic_us -=
   151e0:	eba9 0808 	sub.w	r8, r9, r8
   151e4:	e61a      	b.n	14e1c <event_connection_prepare+0x704>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   151e6:	4040      	eors	r0, r0
   151e8:	f380 8811 	msr	BASEPRI, r0
   151ec:	f04f 0004 	mov.w	r0, #4
   151f0:	df02      	svc	2
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   151f2:	4939      	ldr	r1, [pc, #228]	; (152d8 <event_connection_prepare+0xbc0>)
   151f4:	e693      	b.n	14f1e <event_connection_prepare+0x806>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   151f6:	4040      	eors	r0, r0
   151f8:	f380 8811 	msr	BASEPRI, r0
   151fc:	f04f 0004 	mov.w	r0, #4
   15200:	df02      	svc	2
			mayfly_enable(RADIO_TICKER_USER_ID_WORKER,
   15202:	2201      	movs	r2, #1
   15204:	4611      	mov	r1, r2
   15206:	2000      	movs	r0, #0
   15208:	f7f9 fa5e 	bl	e6c8 <mayfly_enable>
		return 0;
   1520c:	f04f 0900 	mov.w	r9, #0
   15210:	e6a1      	b.n	14f56 <event_connection_prepare+0x83e>
			return 1;
   15212:	f04f 0901 	mov.w	r9, #1
   15216:	e69e      	b.n	14f56 <event_connection_prepare+0x83e>
	return 1;
   15218:	f04f 0901 	mov.w	r9, #1
   1521c:	e69b      	b.n	14f56 <event_connection_prepare+0x83e>
	if (conn->llcp.chan_map.initiate) {
   1521e:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15222:	b9f3      	cbnz	r3, 15262 <event_connection_prepare+0xb4a>
	} else if (((event_counter - conn->llcp.chan_map.instant) & 0xFFFF)
   15224:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   15228:	1aeb      	subs	r3, r5, r3
   1522a:	b29b      	uxth	r3, r3
   1522c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15230:	f280 80b3 	bge.w	1539a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   15234:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15238:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		memcpy(&conn->data_chan_map[0],
   1523c:	f104 0817 	add.w	r8, r4, #23
   15240:	2205      	movs	r2, #5
   15242:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15246:	4640      	mov	r0, r8
   15248:	f7eb f83a 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   1524c:	2105      	movs	r1, #5
   1524e:	4640      	mov	r0, r8
   15250:	f7f9 fc3d 	bl	eace <util_ones_count_get>
		conn->data_chan_count =
   15254:	7f63      	ldrb	r3, [r4, #29]
   15256:	f360 0305 	bfi	r3, r0, #0, #6
   1525a:	7763      	strb	r3, [r4, #29]
		conn->chm_update = 1;
   1525c:	2301      	movs	r3, #1
   1525e:	7723      	strb	r3, [r4, #28]
   15260:	e09b      	b.n	1539a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15262:	481e      	ldr	r0, [pc, #120]	; (152dc <event_connection_prepare+0xbc4>)
   15264:	f7f9 fbaf 	bl	e9c6 <mem_acquire>
		if (node_tx) {
   15268:	4680      	mov	r8, r0
   1526a:	2800      	cmp	r0, #0
   1526c:	f000 8095 	beq.w	1539a <event_connection_prepare+0xc82>
			conn->llcp.chan_map.initiate = 0;
   15270:	2300      	movs	r3, #0
   15272:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
				event_counter + conn->latency + 6;
   15276:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
   15278:	442b      	add	r3, r5
   1527a:	b29b      	uxth	r3, r3
   1527c:	3306      	adds	r3, #6
			conn->llcp.chan_map.instant =
   1527e:	f8a4 307e 	strh.w	r3, [r4, #126]	; 0x7e
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   15282:	7903      	ldrb	r3, [r0, #4]
   15284:	f043 0303 	orr.w	r3, r3, #3
   15288:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   1528a:	2308      	movs	r3, #8
   1528c:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   1528e:	2301      	movs	r3, #1
   15290:	71c3      	strb	r3, [r0, #7]
			memcpy(&pdu_ctrl_tx->payload.llctrl.
   15292:	2205      	movs	r2, #5
   15294:	f104 0179 	add.w	r1, r4, #121	; 0x79
   15298:	3008      	adds	r0, #8
   1529a:	f7eb f811 	bl	2c0 <memcpy>
			pdu_ctrl_tx->payload.llctrl.ctrldata.chan_map_ind.instant =
   1529e:	f8b4 307e 	ldrh.w	r3, [r4, #126]	; 0x7e
   152a2:	f8a8 300d 	strh.w	r3, [r8, #13]
			ctrl_tx_enqueue(conn, node_tx);
   152a6:	4641      	mov	r1, r8
   152a8:	4620      	mov	r0, r4
   152aa:	f7fb fe1f 	bl	10eec <ctrl_tx_enqueue>
   152ae:	e074      	b.n	1539a <event_connection_prepare+0xc82>
   152b0:	1afd498d 	.word	0x1afd498d
   152b4:	00000007 	.word	0x00000007
   152b8:	000128a5 	.word	0x000128a5
   152bc:	d1b71759 	.word	0xd1b71759
   152c0:	2000bce8 	.word	0x2000bce8
   152c4:	000125d9 	.word	0x000125d9
   152c8:	20000f84 	.word	0x20000f84
   152cc:	09ce5400 	.word	0x09ce5400
   152d0:	0002db28 	.word	0x0002db28
   152d4:	431bde83 	.word	0x431bde83
   152d8:	00015c75 	.word	0x00015c75
   152dc:	200010dc 	.word	0x200010dc
   152e0:	3b9aca00 	.word	0x3b9aca00
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   152e4:	48d9      	ldr	r0, [pc, #868]	; (1564c <event_connection_prepare+0xf34>)
   152e6:	f7f9 fb6e 	bl	e9c6 <mem_acquire>
	if (node_tx) {
   152ea:	4680      	mov	r8, r0
   152ec:	2800      	cmp	r0, #0
   152ee:	d054      	beq.n	1539a <event_connection_prepare+0xc82>
		struct pdu_data *pdu_ctrl_tx =
   152f0:	f100 0904 	add.w	r9, r0, #4
		conn->llcp_ack = conn->llcp_req;
   152f4:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   152f8:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		if (!conn->role) {
   152fc:	f994 301d 	ldrsb.w	r3, [r4, #29]
   15300:	2b00      	cmp	r3, #0
   15302:	f2c0 808c 	blt.w	1541e <event_connection_prepare+0xd06>
			ecb_encrypt(&conn->llcp.encryption.ltk[0],
   15306:	f104 0af9 	add.w	sl, r4, #249	; 0xf9
   1530a:	4653      	mov	r3, sl
   1530c:	2200      	movs	r2, #0
   1530e:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15312:	f104 0083 	add.w	r0, r4, #131	; 0x83
   15316:	f7f9 fc63 	bl	ebe0 <ecb_encrypt>
			memcpy(&conn->ccm_tx.key[0], &conn->ccm_rx.key[0],
   1531a:	2210      	movs	r2, #16
   1531c:	4651      	mov	r1, sl
   1531e:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   15322:	f7ea ffcd 	bl	2c0 <memcpy>
			memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   15326:	2208      	movs	r2, #8
   15328:	f504 7189 	add.w	r1, r4, #274	; 0x112
   1532c:	f204 1033 	addw	r0, r4, #307	; 0x133
   15330:	f7ea ffc6 	bl	2c0 <memcpy>
			conn->ccm_rx.counter = 0;
   15334:	2300      	movs	r3, #0
   15336:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   1533a:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   1533e:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   15342:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   15346:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   1534a:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   1534e:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   15352:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
			conn->ccm_tx.counter = 0;
   15356:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   1535a:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   1535e:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   15362:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
			conn->ccm_rx.direction = 0;
   15366:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   1536a:	f363 0200 	bfi	r2, r3, #0, #1
   1536e:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
			conn->ccm_tx.direction = 1;
   15372:	f894 3132 	ldrb.w	r3, [r4, #306]	; 0x132
   15376:	f043 0301 	orr.w	r3, r3, #1
   1537a:	f884 3132 	strb.w	r3, [r4, #306]	; 0x132
			conn->enc_rx = 1;
   1537e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
			conn->enc_tx = 1;
   15382:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   15386:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
			start_enc_rsp_send(conn, pdu_ctrl_tx);
   1538a:	4649      	mov	r1, r9
   1538c:	4620      	mov	r0, r4
   1538e:	f7fb fe9d 	bl	110cc <start_enc_rsp_send>
		ctrl_tx_enqueue(conn, node_tx);
   15392:	4641      	mov	r1, r8
   15394:	4620      	mov	r0, r4
   15396:	f7fb fda9 	bl	10eec <ctrl_tx_enqueue>
	if (conn->llcp_terminate.ack != conn->llcp_terminate.req) {
   1539a:	f894 20b1 	ldrb.w	r2, [r4, #177]	; 0xb1
   1539e:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   153a2:	429a      	cmp	r2, r3
   153a4:	d021      	beq.n	153ea <event_connection_prepare+0xcd2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   153a6:	2305      	movs	r3, #5
   153a8:	2200      	movs	r2, #0
   153aa:	4611      	mov	r1, r2
   153ac:	4610      	mov	r0, r2
   153ae:	f7fc fa77 	bl	118a0 <event_stop>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   153b2:	48a6      	ldr	r0, [pc, #664]	; (1564c <event_connection_prepare+0xf34>)
   153b4:	f7f9 fb07 	bl	e9c6 <mem_acquire>
		if (node_tx) {
   153b8:	4601      	mov	r1, r0
   153ba:	b1b0      	cbz	r0, 153ea <event_connection_prepare+0xcd2>
			conn->llcp_terminate.ack = conn->llcp_terminate.req;
   153bc:	f894 30b0 	ldrb.w	r3, [r4, #176]	; 0xb0
   153c0:	f884 30b1 	strb.w	r3, [r4, #177]	; 0xb1
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   153c4:	7903      	ldrb	r3, [r0, #4]
   153c6:	f043 0303 	orr.w	r3, r3, #3
   153ca:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len =
   153cc:	2302      	movs	r3, #2
   153ce:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   153d0:	71c3      	strb	r3, [r0, #7]
				error_code = conn->llcp_terminate.reason_own;
   153d2:	f894 30b2 	ldrb.w	r3, [r4, #178]	; 0xb2
   153d6:	7203      	strb	r3, [r0, #8]
			ctrl_tx_enqueue(conn, node_tx);
   153d8:	4620      	mov	r0, r4
   153da:	f7fb fd87 	bl	10eec <ctrl_tx_enqueue>
			conn->procedure_expire = conn->supervision_reload;
   153de:	8fe3      	ldrh	r3, [r4, #62]	; 0x3e
   153e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
			if (conn->procedure_expire <= 1) {
   153e4:	2b01      	cmp	r3, #1
   153e6:	f240 82a6 	bls.w	15936 <event_connection_prepare+0x121e>
	if (conn->llcp_length.ack != conn->llcp_length.req) {
   153ea:	f894 20e9 	ldrb.w	r2, [r4, #233]	; 0xe9
   153ee:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   153f2:	429a      	cmp	r2, r3
   153f4:	f000 83f9 	beq.w	15bea <event_connection_prepare+0x14d2>
		event_stop(0, 0, 0, (void *)STATE_ABORT);
   153f8:	2305      	movs	r3, #5
   153fa:	2200      	movs	r2, #0
   153fc:	4611      	mov	r1, r2
   153fe:	4610      	mov	r0, r2
   15400:	f7fc fa4e 	bl	118a0 <event_stop>
	switch (conn->llcp_length.state) {
   15404:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   15408:	f003 0303 	and.w	r3, r3, #3
   1540c:	2b03      	cmp	r3, #3
   1540e:	f200 8427 	bhi.w	15c60 <event_connection_prepare+0x1548>
   15412:	e8df f013 	tbh	[pc, r3, lsl #1]
   15416:	0299      	.short	0x0299
   15418:	03ea03ea 	.word	0x03ea03ea
   1541c:	02fa      	.short	0x02fa
		else if (!conn->pause_tx || conn->refresh) {
   1541e:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15422:	f003 0348 	and.w	r3, r3, #72	; 0x48
   15426:	2b08      	cmp	r3, #8
   15428:	d079      	beq.n	1551e <event_connection_prepare+0xe06>
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1542a:	7903      	ldrb	r3, [r0, #4]
   1542c:	f043 0303 	orr.w	r3, r3, #3
   15430:	7103      	strb	r3, [r0, #4]
			if (conn->llcp.encryption.error_code) {
   15432:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15436:	b333      	cbz	r3, 15486 <event_connection_prepare+0xd6e>
	if (conn->common.fex_valid &&
   15438:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   1543c:	f013 0f20 	tst.w	r3, #32
   15440:	d00e      	beq.n	15460 <event_connection_prepare+0xd48>
	    (conn->llcp_features & BIT(BT_LE_FEAT_BIT_EXT_REJ_IND))) {
   15442:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
	if (conn->common.fex_valid &&
   15446:	f013 0f04 	tst.w	r3, #4
   1544a:	d009      	beq.n	15460 <event_connection_prepare+0xd48>
		pdu->payload.llctrl.opcode =
   1544c:	2311      	movs	r3, #17
   1544e:	71c3      	strb	r3, [r0, #7]
		p->reject_opcode = PDU_DATA_LLCTRL_TYPE_ENC_REQ;
   15450:	2303      	movs	r3, #3
   15452:	7203      	strb	r3, [r0, #8]
		p->error_code = conn->llcp.encryption.error_code;
   15454:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15458:	7243      	strb	r3, [r0, #9]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ext_ind);
   1545a:	2302      	movs	r3, #2
   1545c:	7143      	strb	r3, [r0, #5]
   1545e:	e009      	b.n	15474 <event_connection_prepare+0xd5c>
		pdu->payload.llctrl.opcode = PDU_DATA_LLCTRL_TYPE_REJECT_IND;
   15460:	230d      	movs	r3, #13
   15462:	f888 3007 	strb.w	r3, [r8, #7]
		p->error_code =	conn->llcp.encryption.error_code;
   15466:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1546a:	f888 3008 	strb.w	r3, [r8, #8]
		pdu->len = sizeof(struct pdu_data_llctrl_reject_ind);
   1546e:	2301      	movs	r3, #1
   15470:	f888 3005 	strb.w	r3, [r8, #5]
	pdu->len += offsetof(struct pdu_data_llctrl, ctrldata);
   15474:	f898 3005 	ldrb.w	r3, [r8, #5]
   15478:	3301      	adds	r3, #1
   1547a:	f888 3005 	strb.w	r3, [r8, #5]
	conn->llcp.encryption.error_code = 0;
   1547e:	2300      	movs	r3, #0
   15480:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
   15484:	e785      	b.n	15392 <event_connection_prepare+0xc7a>
				enc_rsp_send(conn);
   15486:	4620      	mov	r0, r4
   15488:	f7fd fa38 	bl	128fc <enc_rsp_send>
				ecb_encrypt(&conn->llcp.encryption.ltk[0],
   1548c:	f104 09f9 	add.w	r9, r4, #249	; 0xf9
   15490:	464b      	mov	r3, r9
   15492:	2200      	movs	r2, #0
   15494:	f104 0193 	add.w	r1, r4, #147	; 0x93
   15498:	f104 0083 	add.w	r0, r4, #131	; 0x83
   1549c:	f7f9 fba0 	bl	ebe0 <ecb_encrypt>
				memcpy(&conn->ccm_tx.key[0],
   154a0:	2210      	movs	r2, #16
   154a2:	4649      	mov	r1, r9
   154a4:	f504 708d 	add.w	r0, r4, #282	; 0x11a
   154a8:	f7ea ff0a 	bl	2c0 <memcpy>
				memcpy(&conn->ccm_tx.iv[0], &conn->ccm_rx.iv[0],
   154ac:	2208      	movs	r2, #8
   154ae:	f504 7189 	add.w	r1, r4, #274	; 0x112
   154b2:	f204 1033 	addw	r0, r4, #307	; 0x133
   154b6:	f7ea ff03 	bl	2c0 <memcpy>
				conn->ccm_rx.counter = 0;
   154ba:	2300      	movs	r3, #0
   154bc:	f884 3109 	strb.w	r3, [r4, #265]	; 0x109
   154c0:	f884 310a 	strb.w	r3, [r4, #266]	; 0x10a
   154c4:	f884 310b 	strb.w	r3, [r4, #267]	; 0x10b
   154c8:	f884 310c 	strb.w	r3, [r4, #268]	; 0x10c
   154cc:	f884 310d 	strb.w	r3, [r4, #269]	; 0x10d
   154d0:	f884 310e 	strb.w	r3, [r4, #270]	; 0x10e
   154d4:	f884 310f 	strb.w	r3, [r4, #271]	; 0x10f
   154d8:	f884 3110 	strb.w	r3, [r4, #272]	; 0x110
				conn->ccm_tx.counter = 0;
   154dc:	f8a4 312a 	strh.w	r3, [r4, #298]	; 0x12a
   154e0:	f8a4 312c 	strh.w	r3, [r4, #300]	; 0x12c
   154e4:	f8a4 312e 	strh.w	r3, [r4, #302]	; 0x12e
   154e8:	f8a4 3130 	strh.w	r3, [r4, #304]	; 0x130
				conn->ccm_rx.direction = 1;
   154ec:	f894 2111 	ldrb.w	r2, [r4, #273]	; 0x111
   154f0:	f042 0201 	orr.w	r2, r2, #1
   154f4:	f884 2111 	strb.w	r2, [r4, #273]	; 0x111
				conn->ccm_tx.direction = 0;
   154f8:	f894 2132 	ldrb.w	r2, [r4, #306]	; 0x132
   154fc:	f363 0200 	bfi	r2, r3, #0, #1
   15500:	f884 2132 	strb.w	r2, [r4, #306]	; 0x132
				conn->enc_rx = 1;
   15504:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   15508:	f043 0310 	orr.w	r3, r3, #16
   1550c:	f884 30f8 	strb.w	r3, [r4, #248]	; 0xf8
				pdu_ctrl_tx->len =
   15510:	2301      	movs	r3, #1
   15512:	f888 3005 	strb.w	r3, [r8, #5]
				pdu_ctrl_tx->payload.llctrl.opcode =
   15516:	2305      	movs	r3, #5
   15518:	f888 3007 	strb.w	r3, [r8, #7]
   1551c:	e739      	b.n	15392 <event_connection_prepare+0xc7a>
			_radio.conn_curr->enc_tx = 1;
   1551e:	f8df 9134 	ldr.w	r9, [pc, #308]	; 15654 <event_connection_prepare+0xf3c>
   15522:	f8d9 2110 	ldr.w	r2, [r9, #272]	; 0x110
   15526:	f892 30f8 	ldrb.w	r3, [r2, #248]	; 0xf8
   1552a:	f043 0320 	orr.w	r3, r3, #32
   1552e:	f882 30f8 	strb.w	r3, [r2, #248]	; 0xf8
			start_enc_rsp_send(_radio.conn_curr, NULL);
   15532:	2100      	movs	r1, #0
   15534:	f8d9 0110 	ldr.w	r0, [r9, #272]	; 0x110
   15538:	f7fb fdc8 	bl	110cc <start_enc_rsp_send>
			_radio.conn_curr->pause_rx = 0;
   1553c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15540:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15544:	f36f 0282 	bfc	r2, #2, #1
   15548:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
			_radio.conn_curr->pause_tx = 0;
   1554c:	f8d9 3110 	ldr.w	r3, [r9, #272]	; 0x110
   15550:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15554:	f36f 02c3 	bfc	r2, #3, #1
   15558:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
   1555c:	e719      	b.n	15392 <event_connection_prepare+0xc7a>
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   1555e:	483b      	ldr	r0, [pc, #236]	; (1564c <event_connection_prepare+0xf34>)
   15560:	f7f9 fa31 	bl	e9c6 <mem_acquire>
	if (node_tx) {
   15564:	4680      	mov	r8, r0
   15566:	2800      	cmp	r0, #0
   15568:	f43f af17 	beq.w	1539a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1556c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   15570:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		conn->llcp_features = RADIO_BLE_FEAT;
   15574:	4b36      	ldr	r3, [pc, #216]	; (15650 <event_connection_prepare+0xf38>)
   15576:	f8c4 30a4 	str.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1557a:	7903      	ldrb	r3, [r0, #4]
   1557c:	f043 0303 	orr.w	r3, r3, #3
   15580:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15582:	2309      	movs	r3, #9
   15584:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   15586:	f994 301d 	ldrsb.w	r3, [r4, #29]
   1558a:	2b00      	cmp	r3, #0
   1558c:	db1e      	blt.n	155cc <event_connection_prepare+0xeb4>
   1558e:	2308      	movs	r3, #8
   15590:	f888 3007 	strb.w	r3, [r8, #7]
		memset(&pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0],
   15594:	2208      	movs	r2, #8
   15596:	2100      	movs	r1, #0
   15598:	eb08 0002 	add.w	r0, r8, r2
   1559c:	f014 f9fc 	bl	29998 <memset>
			conn->llcp_features & 0xFF;
   155a0:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[0] =
   155a4:	f888 3008 	strb.w	r3, [r8, #8]
			(conn->llcp_features >> 8) & 0xFF;
   155a8:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   155ac:	0a1b      	lsrs	r3, r3, #8
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[1] =
   155ae:	f888 3009 	strb.w	r3, [r8, #9]
			(conn->llcp_features >> 16) & 0xFF;
   155b2:	f8b4 30a6 	ldrh.w	r3, [r4, #166]	; 0xa6
		pdu_ctrl_tx->payload.llctrl.ctrldata.feature_req.features[2] =
   155b6:	f888 300a 	strb.w	r3, [r8, #10]
		ctrl_tx_enqueue(conn, node_tx);
   155ba:	4641      	mov	r1, r8
   155bc:	4620      	mov	r0, r4
   155be:	f7fb fc95 	bl	10eec <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   155c2:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   155c6:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   155ca:	e6e6      	b.n	1539a <event_connection_prepare+0xc82>
		pdu_ctrl_tx->payload.llctrl.opcode =
   155cc:	230e      	movs	r3, #14
   155ce:	e7df      	b.n	15590 <event_connection_prepare+0xe78>
	if (conn->llcp_version.tx == 0) {
   155d0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   155d4:	f013 0f01 	tst.w	r3, #1
   155d8:	d03e      	beq.n	15658 <event_connection_prepare+0xf40>
	} else if (conn->llcp_version.rx != 0) {
   155da:	f013 0f02 	tst.w	r3, #2
   155de:	d076      	beq.n	156ce <event_connection_prepare+0xfb6>
		conn->llcp_ack = conn->llcp_req;
   155e0:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   155e4:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
	if (_radio.packet_rx_acquire >=
   155e8:	4b1a      	ldr	r3, [pc, #104]	; (15654 <event_connection_prepare+0xf3c>)
   155ea:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   155ee:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   155f2:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   155f4:	429a      	cmp	r2, r3
   155f6:	d358      	bcc.n	156aa <event_connection_prepare+0xf92>
			_radio.packet_rx_last);
   155f8:	4b16      	ldr	r3, [pc, #88]	; (15654 <event_connection_prepare+0xf3c>)
   155fa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   155fe:	1ad3      	subs	r3, r2, r3
   15600:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15602:	2b01      	cmp	r3, #1
   15604:	d95b      	bls.n	156be <event_connection_prepare+0xfa6>
	return _radio.packet_rx[_radio.packet_rx_last];
   15606:	4b13      	ldr	r3, [pc, #76]	; (15654 <event_connection_prepare+0xf3c>)
   15608:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1560c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15610:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(radio_pdu_node_rx);
   15614:	2b00      	cmp	r3, #0
   15616:	d054      	beq.n	156c2 <event_connection_prepare+0xfaa>
		radio_pdu_node_rx->hdr.handle = conn->handle;
   15618:	8c22      	ldrh	r2, [r4, #32]
   1561a:	80da      	strh	r2, [r3, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   1561c:	2201      	movs	r2, #1
   1561e:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15620:	7a1a      	ldrb	r2, [r3, #8]
   15622:	f042 0203 	orr.w	r2, r2, #3
   15626:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   15628:	2206      	movs	r2, #6
   1562a:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   1562c:	220c      	movs	r2, #12
   1562e:	72da      	strb	r2, [r3, #11]
			conn->llcp_version.version_number;
   15630:	f894 20a9 	ldrb.w	r2, [r4, #169]	; 0xa9
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.version_number =
   15634:	731a      	strb	r2, [r3, #12]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.company_id =
   15636:	f8b4 20aa 	ldrh.w	r2, [r4, #170]	; 0xaa
   1563a:	f8a3 200d 	strh.w	r2, [r3, #13]
		pdu_ctrl_rx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   1563e:	f8b4 20ac 	ldrh.w	r2, [r4, #172]	; 0xac
   15642:	f8a3 200f 	strh.w	r2, [r3, #15]
		packet_rx_enqueue();
   15646:	f7fe fa05 	bl	13a54 <packet_rx_enqueue>
   1564a:	e6a6      	b.n	1539a <event_connection_prepare+0xc82>
   1564c:	200010dc 	.word	0x200010dc
   15650:	000141ff 	.word	0x000141ff
   15654:	20000f84 	.word	0x20000f84
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15658:	48b9      	ldr	r0, [pc, #740]	; (15940 <event_connection_prepare+0x1228>)
   1565a:	f7f9 f9b4 	bl	e9c6 <mem_acquire>
		if (node_tx) {
   1565e:	4601      	mov	r1, r0
   15660:	2800      	cmp	r0, #0
   15662:	f43f ae9a 	beq.w	1539a <event_connection_prepare+0xc82>
			conn->llcp_ack = conn->llcp_req;
   15666:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1566a:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
			conn->llcp_version.tx = 1;
   1566e:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15672:	f043 0301 	orr.w	r3, r3, #1
   15676:	f884 30a8 	strb.w	r3, [r4, #168]	; 0xa8
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   1567a:	7903      	ldrb	r3, [r0, #4]
   1567c:	f043 0303 	orr.w	r3, r3, #3
   15680:	7103      	strb	r3, [r0, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   15682:	2306      	movs	r3, #6
   15684:	7143      	strb	r3, [r0, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   15686:	230c      	movs	r3, #12
   15688:	71c3      	strb	r3, [r0, #7]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.version_number =
   1568a:	2309      	movs	r3, #9
   1568c:	7203      	strb	r3, [r0, #8]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.company_id =
   1568e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   15692:	7243      	strb	r3, [r0, #9]
   15694:	7283      	strb	r3, [r0, #10]
			pdu_ctrl_tx->payload.llctrl.ctrldata.version_ind.sub_version_number =
   15696:	72c3      	strb	r3, [r0, #11]
   15698:	7303      	strb	r3, [r0, #12]
			ctrl_tx_enqueue(conn, node_tx);
   1569a:	4620      	mov	r0, r4
   1569c:	f7fb fc26 	bl	10eec <ctrl_tx_enqueue>
			conn->procedure_expire = conn->procedure_reload;
   156a0:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   156a4:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   156a8:	e677      	b.n	1539a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   156aa:	49a6      	ldr	r1, [pc, #664]	; (15944 <event_connection_prepare+0x122c>)
   156ac:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   156b0:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   156b4:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   156b6:	fa52 f383 	uxtab	r3, r2, r3
   156ba:	b2db      	uxtb	r3, r3
   156bc:	e7a1      	b.n	15602 <event_connection_prepare+0xeea>
		return 0;
   156be:	2300      	movs	r3, #0
   156c0:	e7a8      	b.n	15614 <event_connection_prepare+0xefc>
		LL_ASSERT(radio_pdu_node_rx);
   156c2:	4040      	eors	r0, r0
   156c4:	f380 8811 	msr	BASEPRI, r0
   156c8:	f04f 0004 	mov.w	r0, #4
   156cc:	df02      	svc	2
		LL_ASSERT(0);
   156ce:	4040      	eors	r0, r0
   156d0:	f380 8811 	msr	BASEPRI, r0
   156d4:	f04f 0004 	mov.w	r0, #4
   156d8:	df02      	svc	2
	node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   156da:	4899      	ldr	r0, [pc, #612]	; (15940 <event_connection_prepare+0x1228>)
   156dc:	f7f9 f973 	bl	e9c6 <mem_acquire>
	if (node_tx) {
   156e0:	4601      	mov	r1, r0
   156e2:	2800      	cmp	r0, #0
   156e4:	f43f ae59 	beq.w	1539a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   156e8:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   156ec:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   156f0:	7903      	ldrb	r3, [r0, #4]
   156f2:	f043 0303 	orr.w	r3, r3, #3
   156f6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata);
   156f8:	2301      	movs	r3, #1
   156fa:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   156fc:	2312      	movs	r3, #18
   156fe:	71c3      	strb	r3, [r0, #7]
		ctrl_tx_enqueue(conn, node_tx);
   15700:	4620      	mov	r0, r4
   15702:	f7fb fbf3 	bl	10eec <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   15706:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   1570a:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1570e:	e644      	b.n	1539a <event_connection_prepare+0xc82>
	if (conn->llcp.phy_upd_ind.initiate) {
   15710:	f894 2078 	ldrb.w	r2, [r4, #120]	; 0x78
   15714:	f012 0f01 	tst.w	r2, #1
   15718:	d16b      	bne.n	157f2 <event_connection_prepare+0x10da>
	} else if (((event_counter - conn->llcp.phy_upd_ind.instant) & 0xFFFF)
   1571a:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   1571e:	1aeb      	subs	r3, r5, r3
   15720:	b29b      	uxth	r3, r3
   15722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   15726:	f6bf ae38 	bge.w	1539a <event_connection_prepare+0xc82>
		conn->llcp_ack = conn->llcp_req;
   1572a:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1572e:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
		old_tx = conn->phy_tx;
   15732:	f894 1038 	ldrb.w	r1, [r4, #56]	; 0x38
   15736:	f3c1 01c2 	ubfx	r1, r1, #3, #3
		old_rx = conn->phy_rx;
   1573a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1573e:	f000 0007 	and.w	r0, r0, #7
		if (conn->llcp.phy_upd_ind.tx) {
   15742:	f012 0f1c 	tst.w	r2, #28
   15746:	d009      	beq.n	1575c <event_connection_prepare+0x1044>
			conn->phy_tx = conn->llcp.phy_upd_ind.tx;
   15748:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1574c:	f3c3 0382 	ubfx	r3, r3, #2, #3
   15750:	f894 e038 	ldrb.w	lr, [r4, #56]	; 0x38
   15754:	f363 0ec5 	bfi	lr, r3, #3, #3
   15758:	f884 e038 	strb.w	lr, [r4, #56]	; 0x38
		if (conn->llcp.phy_upd_ind.rx) {
   1575c:	f012 0fe0 	tst.w	r2, #224	; 0xe0
   15760:	d008      	beq.n	15774 <event_connection_prepare+0x105c>
			conn->phy_rx = conn->llcp.phy_upd_ind.rx;
   15762:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15766:	095b      	lsrs	r3, r3, #5
   15768:	f894 e03a 	ldrb.w	lr, [r4, #58]	; 0x3a
   1576c:	f363 0e02 	bfi	lr, r3, #0, #3
   15770:	f884 e03a 	strb.w	lr, [r4, #58]	; 0x3a
		conn->phy_flags = conn->phy_pref_flags;
   15774:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   15778:	f3c3 1e80 	ubfx	lr, r3, #6, #1
   1577c:	f36e 13c7 	bfi	r3, lr, #7, #1
   15780:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   15784:	f012 0f02 	tst.w	r2, #2
   15788:	d105      	bne.n	15796 <event_connection_prepare+0x107e>
   1578a:	b2db      	uxtb	r3, r3
   1578c:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   15790:	4299      	cmp	r1, r3
   15792:	f000 80b0 	beq.w	158f6 <event_connection_prepare+0x11de>
	if (_radio.packet_rx_acquire >=
   15796:	4b6b      	ldr	r3, [pc, #428]	; (15944 <event_connection_prepare+0x122c>)
   15798:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1579c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   157a0:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   157a2:	429a      	cmp	r2, r3
   157a4:	f0c0 80af 	bcc.w	15906 <event_connection_prepare+0x11ee>
			_radio.packet_rx_last);
   157a8:	4b66      	ldr	r3, [pc, #408]	; (15944 <event_connection_prepare+0x122c>)
   157aa:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   157ae:	1ad3      	subs	r3, r2, r3
   157b0:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   157b2:	2b01      	cmp	r3, #1
   157b4:	f240 80b1 	bls.w	1591a <event_connection_prepare+0x1202>
	return _radio.packet_rx[_radio.packet_rx_last];
   157b8:	4b62      	ldr	r3, [pc, #392]	; (15944 <event_connection_prepare+0x122c>)
   157ba:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   157be:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   157c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   157c6:	2b00      	cmp	r3, #0
   157c8:	f000 80a9 	beq.w	1591e <event_connection_prepare+0x1206>
		node_rx->hdr.handle = conn->handle;
   157cc:	8c22      	ldrh	r2, [r4, #32]
   157ce:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_PHY_UPDATE;
   157d0:	220c      	movs	r2, #12
   157d2:	711a      	strb	r2, [r3, #4]
		p->status = 0;
   157d4:	2200      	movs	r2, #0
   157d6:	72da      	strb	r2, [r3, #11]
		p->tx = conn->phy_tx;
   157d8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   157dc:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   157e0:	731a      	strb	r2, [r3, #12]
		p->rx = conn->phy_rx;
   157e2:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   157e6:	f3c2 0202 	ubfx	r2, r2, #0, #3
   157ea:	735a      	strb	r2, [r3, #13]
		packet_rx_enqueue();
   157ec:	f7fe f932 	bl	13a54 <packet_rx_enqueue>
   157f0:	e5d3      	b.n	1539a <event_connection_prepare+0xc82>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   157f2:	4853      	ldr	r0, [pc, #332]	; (15940 <event_connection_prepare+0x1228>)
   157f4:	f7f9 f8e7 	bl	e9c6 <mem_acquire>
		if (node_tx) {
   157f8:	4680      	mov	r8, r0
   157fa:	2800      	cmp	r0, #0
   157fc:	f43f adcd 	beq.w	1539a <event_connection_prepare+0xc82>
			conn->llcp.phy_upd_ind.initiate = 0;
   15800:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   15804:	f36f 0300 	bfc	r3, #0, #1
   15808:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
			if (!((conn->llcp.phy_upd_ind.tx |
   1580c:	b2db      	uxtb	r3, r3
   1580e:	f3c3 0282 	ubfx	r2, r3, #2, #3
   15812:	ea52 1353 	orrs.w	r3, r2, r3, lsr #5
   15816:	d147      	bne.n	158a8 <event_connection_prepare+0x1190>
				conn->llcp_ack = conn->llcp_req;
   15818:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   1581c:	f884 3075 	strb.w	r3, [r4, #117]	; 0x75
				conn->llcp.phy_upd_ind.instant = 0;
   15820:	2300      	movs	r3, #0
   15822:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
				if (conn->llcp.phy_upd_ind.cmd) {
   15826:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   1582a:	f013 0f02 	tst.w	r3, #2
   1582e:	d041      	beq.n	158b4 <event_connection_prepare+0x119c>
	if (_radio.packet_rx_acquire >=
   15830:	4b44      	ldr	r3, [pc, #272]	; (15944 <event_connection_prepare+0x122c>)
   15832:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15836:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1583a:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1583c:	429a      	cmp	r2, r3
   1583e:	d321      	bcc.n	15884 <event_connection_prepare+0x116c>
			_radio.packet_rx_last);
   15840:	4b40      	ldr	r3, [pc, #256]	; (15944 <event_connection_prepare+0x122c>)
   15842:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15846:	1ad3      	subs	r3, r2, r3
   15848:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1584a:	2b01      	cmp	r3, #1
   1584c:	d924      	bls.n	15898 <event_connection_prepare+0x1180>
	return _radio.packet_rx[_radio.packet_rx_last];
   1584e:	4b3d      	ldr	r3, [pc, #244]	; (15944 <event_connection_prepare+0x122c>)
   15850:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15854:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15858:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
					LL_ASSERT(node_rx);
   1585c:	b1f3      	cbz	r3, 1589c <event_connection_prepare+0x1184>
					node_rx->hdr.handle = conn->handle;
   1585e:	8c22      	ldrh	r2, [r4, #32]
   15860:	80da      	strh	r2, [r3, #6]
					node_rx->hdr.type =
   15862:	220c      	movs	r2, #12
   15864:	711a      	strb	r2, [r3, #4]
					p->status = 0;
   15866:	2200      	movs	r2, #0
   15868:	72da      	strb	r2, [r3, #11]
					p->tx = conn->phy_tx;
   1586a:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1586e:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   15872:	731a      	strb	r2, [r3, #12]
					p->rx = conn->phy_rx;
   15874:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
   15878:	f3c2 0202 	ubfx	r2, r2, #0, #3
   1587c:	735a      	strb	r2, [r3, #13]
					packet_rx_enqueue();
   1587e:	f7fe f8e9 	bl	13a54 <packet_rx_enqueue>
   15882:	e017      	b.n	158b4 <event_connection_prepare+0x119c>
		return (_radio.packet_rx_count -
   15884:	492f      	ldr	r1, [pc, #188]	; (15944 <event_connection_prepare+0x122c>)
   15886:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1588a:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1588e:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15890:	fa52 f383 	uxtab	r3, r2, r3
   15894:	b2db      	uxtb	r3, r3
   15896:	e7d8      	b.n	1584a <event_connection_prepare+0x1132>
		return 0;
   15898:	2300      	movs	r3, #0
   1589a:	e7df      	b.n	1585c <event_connection_prepare+0x1144>
					LL_ASSERT(node_rx);
   1589c:	4040      	eors	r0, r0
   1589e:	f380 8811 	msr	BASEPRI, r0
   158a2:	f04f 0004 	mov.w	r0, #4
   158a6:	df02      	svc	2
								 conn->latency +
   158a8:	8ce3      	ldrh	r3, [r4, #38]	; 0x26
				conn->llcp.phy_upd_ind.instant = event_counter +
   158aa:	442b      	add	r3, r5
   158ac:	b29b      	uxth	r3, r3
								 conn->latency +
   158ae:	3306      	adds	r3, #6
				conn->llcp.phy_upd_ind.instant = event_counter +
   158b0:	f8a4 307a 	strh.w	r3, [r4, #122]	; 0x7a
			pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   158b4:	f898 3004 	ldrb.w	r3, [r8, #4]
   158b8:	f043 0303 	orr.w	r3, r3, #3
   158bc:	f888 3004 	strb.w	r3, [r8, #4]
			pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl,
   158c0:	2305      	movs	r3, #5
   158c2:	f888 3005 	strb.w	r3, [r8, #5]
			pdu_ctrl_tx->payload.llctrl.opcode =
   158c6:	2318      	movs	r3, #24
   158c8:	f888 3007 	strb.w	r3, [r8, #7]
			p->m_to_s_phy = conn->llcp.phy_upd_ind.tx;
   158cc:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   158d0:	f3c3 0382 	ubfx	r3, r3, #2, #3
   158d4:	f888 3008 	strb.w	r3, [r8, #8]
			p->s_to_m_phy = conn->llcp.phy_upd_ind.rx;
   158d8:	f894 3078 	ldrb.w	r3, [r4, #120]	; 0x78
   158dc:	f3c3 1342 	ubfx	r3, r3, #5, #3
   158e0:	f888 3009 	strb.w	r3, [r8, #9]
			p->instant = conn->llcp.phy_upd_ind.instant;
   158e4:	f8b4 307a 	ldrh.w	r3, [r4, #122]	; 0x7a
   158e8:	f8a8 300a 	strh.w	r3, [r8, #10]
			ctrl_tx_enqueue(conn, node_tx);
   158ec:	4641      	mov	r1, r8
   158ee:	4620      	mov	r0, r4
   158f0:	f7fb fafc 	bl	10eec <ctrl_tx_enqueue>
   158f4:	e551      	b.n	1539a <event_connection_prepare+0xc82>
		    (conn->phy_rx == old_rx)) {
   158f6:	f894 303a 	ldrb.w	r3, [r4, #58]	; 0x3a
   158fa:	f003 0307 	and.w	r3, r3, #7
		if (!conn->llcp.phy_upd_ind.cmd && (conn->phy_tx == old_tx) &&
   158fe:	4298      	cmp	r0, r3
   15900:	f47f af49 	bne.w	15796 <event_connection_prepare+0x107e>
   15904:	e549      	b.n	1539a <event_connection_prepare+0xc82>
		return (_radio.packet_rx_count -
   15906:	490f      	ldr	r1, [pc, #60]	; (15944 <event_connection_prepare+0x122c>)
   15908:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   1590c:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15910:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15912:	fa52 f383 	uxtab	r3, r2, r3
   15916:	b2db      	uxtb	r3, r3
   15918:	e74b      	b.n	157b2 <event_connection_prepare+0x109a>
		return 0;
   1591a:	2300      	movs	r3, #0
   1591c:	e753      	b.n	157c6 <event_connection_prepare+0x10ae>
		LL_ASSERT(node_rx);
   1591e:	4040      	eors	r0, r0
   15920:	f380 8811 	msr	BASEPRI, r0
   15924:	f04f 0004 	mov.w	r0, #4
   15928:	df02      	svc	2
			LL_ASSERT(0);
   1592a:	4040      	eors	r0, r0
   1592c:	f380 8811 	msr	BASEPRI, r0
   15930:	f04f 0004 	mov.w	r0, #4
   15934:	df02      	svc	2
				conn->procedure_expire++;
   15936:	3301      	adds	r3, #1
   15938:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   1593c:	e555      	b.n	153ea <event_connection_prepare+0xcd2>
   1593e:	bf00      	nop
   15940:	200010dc 	.word	0x200010dc
   15944:	20000f84 	.word	0x20000f84
	if (_radio.packet_rx_acquire >=
   15948:	4bbf      	ldr	r3, [pc, #764]	; (15c48 <event_connection_prepare+0x1530>)
   1594a:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1594e:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15952:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15954:	429a      	cmp	r2, r3
   15956:	d346      	bcc.n	159e6 <event_connection_prepare+0x12ce>
			_radio.packet_rx_last);
   15958:	4bbb      	ldr	r3, [pc, #748]	; (15c48 <event_connection_prepare+0x1530>)
   1595a:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1595e:	eba2 0808 	sub.w	r8, r2, r8
   15962:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   15966:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   1596a:	4bb7      	ldr	r3, [pc, #732]	; (15c48 <event_connection_prepare+0x1530>)
   1596c:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15970:	f7f9 f85d 	bl	ea2e <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15974:	4440      	add	r0, r8
   15976:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   15978:	28ff      	cmp	r0, #255	; 0xff
   1597a:	d840      	bhi.n	159fe <event_connection_prepare+0x12e6>
		if (_radio.packet_rx_data_count != free_count_rx) {
   1597c:	4bb2      	ldr	r3, [pc, #712]	; (15c48 <event_connection_prepare+0x1530>)
   1597e:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   15982:	4298      	cmp	r0, r3
   15984:	f040 8131 	bne.w	15bea <event_connection_prepare+0x14d2>
		node_tx = mem_acquire(&_radio.pkt_tx_ctrl_free);
   15988:	48b0      	ldr	r0, [pc, #704]	; (15c4c <event_connection_prepare+0x1534>)
   1598a:	f7f9 f81c 	bl	e9c6 <mem_acquire>
		if (!node_tx) {
   1598e:	4601      	mov	r1, r0
   15990:	2800      	cmp	r0, #0
   15992:	f000 812a 	beq.w	15bea <event_connection_prepare+0x14d2>
		conn->llcp_length.state = LLCP_LENGTH_STATE_ACK_WAIT;
   15996:	f894 30ea 	ldrb.w	r3, [r4, #234]	; 0xea
   1599a:	2201      	movs	r2, #1
   1599c:	f362 0301 	bfi	r3, r2, #0, #2
   159a0:	f884 30ea 	strb.w	r3, [r4, #234]	; 0xea
		conn->default_tx_octets = conn->llcp_length.tx_octets;
   159a4:	f8b4 30ee 	ldrh.w	r3, [r4, #238]	; 0xee
   159a8:	85a3      	strh	r3, [r4, #44]	; 0x2c
		conn->default_tx_time = conn->llcp_length.tx_time;
   159aa:	f8b4 30f2 	ldrh.w	r3, [r4, #242]	; 0xf2
   159ae:	8663      	strh	r3, [r4, #50]	; 0x32
		pdu_ctrl_tx->ll_id = PDU_DATA_LLID_CTRL;
   159b0:	7903      	ldrb	r3, [r0, #4]
   159b2:	f043 0303 	orr.w	r3, r3, #3
   159b6:	7103      	strb	r3, [r0, #4]
		pdu_ctrl_tx->len = offsetof(struct pdu_data_llctrl, ctrldata) +
   159b8:	2309      	movs	r3, #9
   159ba:	7143      	strb	r3, [r0, #5]
		pdu_ctrl_tx->payload.llctrl.opcode =
   159bc:	2314      	movs	r3, #20
   159be:	71c3      	strb	r3, [r0, #7]
		lr->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   159c0:	231b      	movs	r3, #27
   159c2:	7203      	strb	r3, [r0, #8]
   159c4:	2300      	movs	r3, #0
   159c6:	7243      	strb	r3, [r0, #9]
		lr->max_tx_octets = conn->default_tx_octets;
   159c8:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   159ca:	8183      	strh	r3, [r0, #12]
		lr->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX,
   159cc:	2348      	movs	r3, #72	; 0x48
   159ce:	7283      	strb	r3, [r0, #10]
   159d0:	72ca      	strb	r2, [r1, #11]
		lr->max_tx_time = conn->default_tx_time;
   159d2:	8e63      	ldrh	r3, [r4, #50]	; 0x32
   159d4:	81c3      	strh	r3, [r0, #14]
		ctrl_tx_enqueue(conn, node_tx);
   159d6:	4620      	mov	r0, r4
   159d8:	f7fb fa88 	bl	10eec <ctrl_tx_enqueue>
		conn->procedure_expire = conn->procedure_reload;
   159dc:	f8b4 3042 	ldrh.w	r3, [r4, #66]	; 0x42
   159e0:	f8a4 3044 	strh.w	r3, [r4, #68]	; 0x44
   159e4:	e101      	b.n	15bea <event_connection_prepare+0x14d2>
		return (_radio.packet_rx_count -
   159e6:	4b98      	ldr	r3, [pc, #608]	; (15c48 <event_connection_prepare+0x1530>)
   159e8:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   159ec:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   159f0:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   159f4:	fa52 f888 	uxtab	r8, r2, r8
   159f8:	fa5f f888 	uxtb.w	r8, r8
   159fc:	e7b3      	b.n	15966 <event_connection_prepare+0x124e>
		LL_ASSERT(free_count_rx <= 0xFF);
   159fe:	4040      	eors	r0, r0
   15a00:	f380 8811 	msr	BASEPRI, r0
   15a04:	f04f 0004 	mov.w	r0, #4
   15a08:	df02      	svc	2
	if (_radio.packet_rx_acquire >=
   15a0a:	4b8f      	ldr	r3, [pc, #572]	; (15c48 <event_connection_prepare+0x1530>)
   15a0c:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15a10:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15a14:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15a16:	429a      	cmp	r2, r3
   15a18:	d352      	bcc.n	15ac0 <event_connection_prepare+0x13a8>
			_radio.packet_rx_last);
   15a1a:	4b8b      	ldr	r3, [pc, #556]	; (15c48 <event_connection_prepare+0x1530>)
   15a1c:	f893 813d 	ldrb.w	r8, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15a20:	eba2 0808 	sub.w	r8, r2, r8
   15a24:	fa5f f888 	uxtb.w	r8, r8
		free_count_rx = packet_rx_acquired_count_get() +
   15a28:	fa1f f888 	uxth.w	r8, r8
			mem_free_count_get(_radio.pkt_rx_data_free);
   15a2c:	4b86      	ldr	r3, [pc, #536]	; (15c48 <event_connection_prepare+0x1530>)
   15a2e:	f8d3 012c 	ldr.w	r0, [r3, #300]	; 0x12c
   15a32:	f7f8 fffc 	bl	ea2e <mem_free_count_get>
		free_count_rx = packet_rx_acquired_count_get() +
   15a36:	4440      	add	r0, r8
   15a38:	b280      	uxth	r0, r0
		LL_ASSERT(free_count_rx <= 0xFF);
   15a3a:	28ff      	cmp	r0, #255	; 0xff
   15a3c:	d84c      	bhi.n	15ad8 <event_connection_prepare+0x13c0>
		if (_radio.packet_rx_data_count != free_count_rx) {
   15a3e:	4b82      	ldr	r3, [pc, #520]	; (15c48 <event_connection_prepare+0x1530>)
   15a40:	f893 3136 	ldrb.w	r3, [r3, #310]	; 0x136
   15a44:	4298      	cmp	r0, r3
   15a46:	d14d      	bne.n	15ae4 <event_connection_prepare+0x13cc>
		conn->llcp_length.ack = conn->llcp_length.req;
   15a48:	f894 30e8 	ldrb.w	r3, [r4, #232]	; 0xe8
   15a4c:	f884 30e9 	strb.w	r3, [r4, #233]	; 0xe9
		conn->procedure_expire = 0;
   15a50:	2100      	movs	r1, #0
   15a52:	f8a4 1044 	strh.w	r1, [r4, #68]	; 0x44
		_radio.conn_curr->pause_tx = 0;
   15a56:	f8df 81f0 	ldr.w	r8, [pc, #496]	; 15c48 <event_connection_prepare+0x1530>
   15a5a:	f8d8 3110 	ldr.w	r3, [r8, #272]	; 0x110
   15a5e:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
   15a62:	f361 02c3 	bfi	r2, r1, #3, #1
   15a66:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
		conn->max_rx_octets = conn->llcp_length.rx_octets;
   15a6a:	f8b4 30ec 	ldrh.w	r3, [r4, #236]	; 0xec
   15a6e:	8623      	strh	r3, [r4, #48]	; 0x30
		conn->max_rx_time = conn->llcp_length.rx_time;
   15a70:	f8b4 30f0 	ldrh.w	r3, [r4, #240]	; 0xf0
   15a74:	86e3      	strh	r3, [r4, #54]	; 0x36
		free_count_conn = mem_free_count_get(_radio.conn_free);
   15a76:	f8d8 0108 	ldr.w	r0, [r8, #264]	; 0x108
   15a7a:	f7f8 ffd8 	bl	ea2e <mem_free_count_get>
		if (_radio.advertiser.conn) {
   15a7e:	f8d8 30c8 	ldr.w	r3, [r8, #200]	; 0xc8
   15a82:	b10b      	cbz	r3, 15a88 <event_connection_prepare+0x1370>
			free_count_conn++;
   15a84:	3001      	adds	r0, #1
   15a86:	b280      	uxth	r0, r0
		if (_radio.scanner.conn) {
   15a88:	4b6f      	ldr	r3, [pc, #444]	; (15c48 <event_connection_prepare+0x1530>)
   15a8a:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   15a8e:	b10b      	cbz	r3, 15a94 <event_connection_prepare+0x137c>
			free_count_conn++;
   15a90:	3001      	adds	r0, #1
   15a92:	b280      	uxth	r0, r0
		packet_rx_data_size = MROUND(offsetof(struct radio_pdu_node_rx,
   15a94:	f8b4 9030 	ldrh.w	r9, [r4, #48]	; 0x30
   15a98:	f109 090e 	add.w	r9, r9, #14
   15a9c:	fa1f f989 	uxth.w	r9, r9
   15aa0:	f029 0903 	bic.w	r9, r9, #3
   15aa4:	fa1f f989 	uxth.w	r9, r9
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15aa8:	3001      	adds	r0, #1
   15aaa:	4b67      	ldr	r3, [pc, #412]	; (15c48 <event_connection_prepare+0x1530>)
   15aac:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   15ab0:	4298      	cmp	r0, r3
   15ab2:	d038      	beq.n	15b26 <event_connection_prepare+0x140e>
		    (packet_rx_data_size > _radio.packet_rx_data_size)) {
   15ab4:	4b64      	ldr	r3, [pc, #400]	; (15c48 <event_connection_prepare+0x1530>)
   15ab6:	f8b3 3134 	ldrh.w	r3, [r3, #308]	; 0x134
		if (((free_count_conn + 1) == _radio.connection_count) ||
   15aba:	4599      	cmp	r9, r3
   15abc:	d833      	bhi.n	15b26 <event_connection_prepare+0x140e>
   15abe:	e066      	b.n	15b8e <event_connection_prepare+0x1476>
		return (_radio.packet_rx_count -
   15ac0:	4b61      	ldr	r3, [pc, #388]	; (15c48 <event_connection_prepare+0x1530>)
   15ac2:	f893 813c 	ldrb.w	r8, [r3, #316]	; 0x13c
			_radio.packet_rx_last +
   15ac6:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15aca:	eba8 0803 	sub.w	r8, r8, r3
			_radio.packet_rx_last +
   15ace:	fa52 f888 	uxtab	r8, r2, r8
   15ad2:	fa5f f888 	uxtb.w	r8, r8
   15ad6:	e7a7      	b.n	15a28 <event_connection_prepare+0x1310>
		LL_ASSERT(free_count_rx <= 0xFF);
   15ad8:	4040      	eors	r0, r0
   15ada:	f380 8811 	msr	BASEPRI, r0
   15ade:	f04f 0004 	mov.w	r0, #4
   15ae2:	df02      	svc	2
			LL_ASSERT(0);
   15ae4:	4040      	eors	r0, r0
   15ae6:	f380 8811 	msr	BASEPRI, r0
   15aea:	f04f 0004 	mov.w	r0, #4
   15aee:	df02      	svc	2
					_radio.packet_rx_acquire -= 1;
   15af0:	3b01      	subs	r3, #1
   15af2:	4a55      	ldr	r2, [pc, #340]	; (15c48 <event_connection_prepare+0x1530>)
   15af4:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   15af8:	4f53      	ldr	r7, [pc, #332]	; (15c48 <event_connection_prepare+0x1530>)
   15afa:	f8d7 3138 	ldr.w	r3, [r7, #312]	; 0x138
						_radio.packet_rx_acquire];
   15afe:	f897 213e 	ldrb.w	r2, [r7, #318]	; 0x13e
				node_rx = _radio.packet_rx[
   15b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
				mem_release(node_rx->hdr.onion.link,
   15b06:	f507 71a2 	add.w	r1, r7, #324	; 0x144
   15b0a:	6818      	ldr	r0, [r3, #0]
   15b0c:	f7f8 ff77 	bl	e9fe <mem_release>
				LL_ASSERT(_radio.link_rx_data_quota <
   15b10:	f897 3150 	ldrb.w	r3, [r7, #336]	; 0x150
   15b14:	f897 213c 	ldrb.w	r2, [r7, #316]	; 0x13c
   15b18:	3a01      	subs	r2, #1
   15b1a:	4293      	cmp	r3, r2
   15b1c:	da14      	bge.n	15b48 <event_connection_prepare+0x1430>
				_radio.link_rx_data_quota++;
   15b1e:	3301      	adds	r3, #1
   15b20:	4a49      	ldr	r2, [pc, #292]	; (15c48 <event_connection_prepare+0x1530>)
   15b22:	f882 3150 	strb.w	r3, [r2, #336]	; 0x150
			while (_radio.packet_rx_acquire !=
   15b26:	4a48      	ldr	r2, [pc, #288]	; (15c48 <event_connection_prepare+0x1530>)
   15b28:	f892 313e 	ldrb.w	r3, [r2, #318]	; 0x13e
				_radio.packet_rx_last) {
   15b2c:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
   15b30:	b2d2      	uxtb	r2, r2
			while (_radio.packet_rx_acquire !=
   15b32:	4293      	cmp	r3, r2
   15b34:	d00e      	beq.n	15b54 <event_connection_prepare+0x143c>
				if (_radio.packet_rx_acquire == 0) {
   15b36:	2b00      	cmp	r3, #0
   15b38:	d1da      	bne.n	15af0 <event_connection_prepare+0x13d8>
						_radio.packet_rx_count - 1;
   15b3a:	4a43      	ldr	r2, [pc, #268]	; (15c48 <event_connection_prepare+0x1530>)
   15b3c:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
   15b40:	3b01      	subs	r3, #1
					_radio.packet_rx_acquire =
   15b42:	f882 313e 	strb.w	r3, [r2, #318]	; 0x13e
   15b46:	e7d7      	b.n	15af8 <event_connection_prepare+0x13e0>
				LL_ASSERT(_radio.link_rx_data_quota <
   15b48:	4040      	eors	r0, r0
   15b4a:	f380 8811 	msr	BASEPRI, r0
   15b4e:	f04f 0004 	mov.w	r0, #4
   15b52:	df02      	svc	2
			if (conn->max_rx_octets < (PDU_AC_SIZE_MAX +
   15b54:	8e23      	ldrh	r3, [r4, #48]	; 0x30
   15b56:	2b29      	cmp	r3, #41	; 0x29
   15b58:	d85f      	bhi.n	15c1a <event_connection_prepare+0x1502>
				_radio.packet_rx_data_size =
   15b5a:	2234      	movs	r2, #52	; 0x34
   15b5c:	4b3a      	ldr	r3, [pc, #232]	; (15c48 <event_connection_prepare+0x1530>)
   15b5e:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
				_radio.packet_rx_data_pool_size /
   15b62:	4b39      	ldr	r3, [pc, #228]	; (15c48 <event_connection_prepare+0x1530>)
   15b64:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
				_radio.packet_rx_data_size;
   15b68:	f8b3 1134 	ldrh.w	r1, [r3, #308]	; 0x134
			_radio.packet_rx_data_count =
   15b6c:	fbb2 f2f1 	udiv	r2, r2, r1
   15b70:	b2d2      	uxtb	r2, r2
   15b72:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
			LL_ASSERT(_radio.packet_rx_data_count);
   15b76:	2a00      	cmp	r2, #0
   15b78:	d053      	beq.n	15c22 <event_connection_prepare+0x150a>
			mem_init(_radio.pkt_rx_data_pool,
   15b7a:	4833      	ldr	r0, [pc, #204]	; (15c48 <event_connection_prepare+0x1530>)
   15b7c:	f500 7396 	add.w	r3, r0, #300	; 0x12c
   15b80:	f8d0 0128 	ldr.w	r0, [r0, #296]	; 0x128
   15b84:	f7f8 fefa 	bl	e97c <mem_init>
			packet_rx_allocate(4);
   15b88:	2004      	movs	r0, #4
   15b8a:	f7fb fc59 	bl	11440 <packet_rx_allocate>
	if (_radio.packet_rx_acquire >=
   15b8e:	4b2e      	ldr	r3, [pc, #184]	; (15c48 <event_connection_prepare+0x1530>)
   15b90:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   15b94:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15b98:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   15b9a:	429a      	cmp	r2, r3
   15b9c:	d347      	bcc.n	15c2e <event_connection_prepare+0x1516>
			_radio.packet_rx_last);
   15b9e:	4b2a      	ldr	r3, [pc, #168]	; (15c48 <event_connection_prepare+0x1530>)
   15ba0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   15ba4:	1ad3      	subs	r3, r2, r3
   15ba6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   15ba8:	2b01      	cmp	r3, #1
   15baa:	d94a      	bls.n	15c42 <event_connection_prepare+0x152a>
	return _radio.packet_rx[_radio.packet_rx_last];
   15bac:	4b26      	ldr	r3, [pc, #152]	; (15c48 <event_connection_prepare+0x1530>)
   15bae:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   15bb2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   15bb6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
		LL_ASSERT(node_rx);
   15bba:	2b00      	cmp	r3, #0
   15bbc:	d04a      	beq.n	15c54 <event_connection_prepare+0x153c>
		node_rx->hdr.handle = conn->handle;
   15bbe:	8c22      	ldrh	r2, [r4, #32]
   15bc0:	80da      	strh	r2, [r3, #6]
		node_rx->hdr.type = NODE_RX_TYPE_DC_PDU;
   15bc2:	2201      	movs	r2, #1
   15bc4:	711a      	strb	r2, [r3, #4]
		pdu_ctrl_rx->ll_id = PDU_DATA_LLID_CTRL;
   15bc6:	7a1a      	ldrb	r2, [r3, #8]
   15bc8:	f042 0203 	orr.w	r2, r2, #3
   15bcc:	721a      	strb	r2, [r3, #8]
		pdu_ctrl_rx->len = offsetof(struct pdu_data_llctrl,
   15bce:	2209      	movs	r2, #9
   15bd0:	725a      	strb	r2, [r3, #9]
		pdu_ctrl_rx->payload.llctrl.opcode =
   15bd2:	2215      	movs	r2, #21
   15bd4:	72da      	strb	r2, [r3, #11]
		lr->max_rx_octets = conn->max_rx_octets;
   15bd6:	8e22      	ldrh	r2, [r4, #48]	; 0x30
   15bd8:	819a      	strh	r2, [r3, #12]
		lr->max_tx_octets = conn->max_tx_octets;
   15bda:	8de2      	ldrh	r2, [r4, #46]	; 0x2e
   15bdc:	821a      	strh	r2, [r3, #16]
		lr->max_rx_time = conn->max_rx_time;
   15bde:	8ee2      	ldrh	r2, [r4, #54]	; 0x36
   15be0:	81da      	strh	r2, [r3, #14]
		lr->max_tx_time = conn->max_tx_time;
   15be2:	8ea2      	ldrh	r2, [r4, #52]	; 0x34
   15be4:	825a      	strh	r2, [r3, #18]
		packet_rx_enqueue();
   15be6:	f7fd ff35 	bl	13a54 <packet_rx_enqueue>
	event_common_prepare(ticks_at_expire, remainder,
   15bea:	1d23      	adds	r3, r4, #4
   15bec:	68a1      	ldr	r1, [r4, #8]
			     (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle),
   15bee:	8c22      	ldrh	r2, [r4, #32]
	event_common_prepare(ticks_at_expire, remainder,
   15bf0:	3207      	adds	r2, #7
   15bf2:	b2d2      	uxtb	r2, r2
   15bf4:	f994 001d 	ldrsb.w	r0, [r4, #29]
   15bf8:	2800      	cmp	r0, #0
   15bfa:	db37      	blt.n	15c6c <event_connection_prepare+0x1554>
   15bfc:	4814      	ldr	r0, [pc, #80]	; (15c50 <event_connection_prepare+0x1538>)
   15bfe:	9403      	str	r4, [sp, #12]
   15c00:	9002      	str	r0, [sp, #8]
   15c02:	9201      	str	r2, [sp, #4]
   15c04:	9100      	str	r1, [sp, #0]
   15c06:	4622      	mov	r2, r4
   15c08:	990a      	ldr	r1, [sp, #40]	; 0x28
   15c0a:	4630      	mov	r0, r6
   15c0c:	f7fe fc7e 	bl	1450c <event_common_prepare>
	conn->event_counter = event_counter + 1;
   15c10:	3501      	adds	r5, #1
   15c12:	8465      	strh	r5, [r4, #34]	; 0x22
}
   15c14:	b00f      	add	sp, #60	; 0x3c
   15c16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
				_radio.packet_rx_data_size =
   15c1a:	4b0b      	ldr	r3, [pc, #44]	; (15c48 <event_connection_prepare+0x1530>)
   15c1c:	f8a3 9134 	strh.w	r9, [r3, #308]	; 0x134
   15c20:	e79f      	b.n	15b62 <event_connection_prepare+0x144a>
			LL_ASSERT(_radio.packet_rx_data_count);
   15c22:	4040      	eors	r0, r0
   15c24:	f380 8811 	msr	BASEPRI, r0
   15c28:	f04f 0004 	mov.w	r0, #4
   15c2c:	df02      	svc	2
		return (_radio.packet_rx_count -
   15c2e:	4906      	ldr	r1, [pc, #24]	; (15c48 <event_connection_prepare+0x1530>)
   15c30:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   15c34:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   15c38:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   15c3a:	fa52 f383 	uxtab	r3, r2, r3
   15c3e:	b2db      	uxtb	r3, r3
   15c40:	e7b2      	b.n	15ba8 <event_connection_prepare+0x1490>
		return 0;
   15c42:	2300      	movs	r3, #0
   15c44:	e7b9      	b.n	15bba <event_connection_prepare+0x14a2>
   15c46:	bf00      	nop
   15c48:	20000f84 	.word	0x20000f84
   15c4c:	200010dc 	.word	0x200010dc
   15c50:	000160c9 	.word	0x000160c9
		LL_ASSERT(node_rx);
   15c54:	4040      	eors	r0, r0
   15c56:	f380 8811 	msr	BASEPRI, r0
   15c5a:	f04f 0004 	mov.w	r0, #4
   15c5e:	df02      	svc	2
		LL_ASSERT(0);
   15c60:	4040      	eors	r0, r0
   15c62:	f380 8811 	msr	BASEPRI, r0
   15c66:	f04f 0004 	mov.w	r0, #4
   15c6a:	df02      	svc	2
	event_common_prepare(ticks_at_expire, remainder,
   15c6c:	4800      	ldr	r0, [pc, #0]	; (15c70 <event_connection_prepare+0x1558>)
   15c6e:	e7c6      	b.n	15bfe <event_connection_prepare+0x14e6>
   15c70:	00016205 	.word	0x00016205

00015c74 <event_slave_prepare>:
{
   15c74:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15c76:	f7fe fd4f 	bl	14718 <event_connection_prepare>
   15c7a:	bd08      	pop	{r3, pc}

00015c7c <event_master_prepare>:
{
   15c7c:	b508      	push	{r3, lr}
	event_connection_prepare(ticks_at_expire, remainder, lazy, context);
   15c7e:	f7fe fd4b 	bl	14718 <event_connection_prepare>
   15c82:	bd08      	pop	{r3, pc}

00015c84 <event_scan_prepare>:
	LL_ASSERT(!_radio.ticker_id_prepare);
   15c84:	4b20      	ldr	r3, [pc, #128]	; (15d08 <event_scan_prepare+0x84>)
   15c86:	7b1b      	ldrb	r3, [r3, #12]
   15c88:	bb23      	cbnz	r3, 15cd4 <event_scan_prepare+0x50>
{
   15c8a:	b530      	push	{r4, r5, lr}
   15c8c:	b085      	sub	sp, #20
   15c8e:	4605      	mov	r5, r0
	_radio.ticker_id_prepare = RADIO_TICKER_ID_SCAN;
   15c90:	4c1d      	ldr	r4, [pc, #116]	; (15d08 <event_scan_prepare+0x84>)
   15c92:	2306      	movs	r3, #6
   15c94:	7323      	strb	r3, [r4, #12]
	event_common_prepare(ticks_at_expire, remainder,
   15c96:	2200      	movs	r2, #0
   15c98:	9203      	str	r2, [sp, #12]
   15c9a:	4a1c      	ldr	r2, [pc, #112]	; (15d0c <event_scan_prepare+0x88>)
   15c9c:	9202      	str	r2, [sp, #8]
   15c9e:	9301      	str	r3, [sp, #4]
   15ca0:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   15ca4:	9300      	str	r3, [sp, #0]
   15ca6:	f104 03d0 	add.w	r3, r4, #208	; 0xd0
   15caa:	f104 02cc 	add.w	r2, r4, #204	; 0xcc
   15cae:	f7fe fc2d 	bl	1450c <event_common_prepare>
	if (_radio.scanner.conn) {
   15cb2:	f8d4 30fc 	ldr.w	r3, [r4, #252]	; 0xfc
   15cb6:	b15b      	cbz	r3, 15cd0 <event_scan_prepare+0x4c>
		if (_radio.scanner.hdr.ticks_xtal_to_start & ((u32_t)1 << 31)) {
   15cb8:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   15cbc:	2b00      	cmp	r3, #0
   15cbe:	db0f      	blt.n	15ce0 <event_scan_prepare+0x5c>
		s_mfy_sched_after_mstr_free_offset_get.param =
   15cc0:	4b13      	ldr	r3, [pc, #76]	; (15d10 <event_scan_prepare+0x8c>)
   15cc2:	609d      	str	r5, [r3, #8]
		retval = mayfly_enqueue(RADIO_TICKER_USER_ID_WORKER,
   15cc4:	2201      	movs	r2, #1
   15cc6:	4611      	mov	r1, r2
   15cc8:	2000      	movs	r0, #0
   15cca:	f7f8 fd3b 	bl	e744 <mayfly_enqueue>
		LL_ASSERT(!retval);
   15cce:	b9a8      	cbnz	r0, 15cfc <event_scan_prepare+0x78>
}
   15cd0:	b005      	add	sp, #20
   15cd2:	bd30      	pop	{r4, r5, pc}
	LL_ASSERT(!_radio.ticker_id_prepare);
   15cd4:	4040      	eors	r0, r0
   15cd6:	f380 8811 	msr	BASEPRI, r0
   15cda:	f04f 0004 	mov.w	r0, #4
   15cde:	df02      	svc	2
				_radio.scanner.hdr.ticks_preempt_to_start;
   15ce0:	f8d4 10d4 	ldr.w	r1, [r4, #212]	; 0xd4
				_radio.scanner.hdr.ticks_active_to_start :
   15ce4:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
				((_radio.scanner.hdr.ticks_xtal_to_start &
   15ce8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
				  (~((u32_t)1 << 31))) -
   15cec:	4291      	cmp	r1, r2
   15cee:	bf2c      	ite	cs
   15cf0:	ebc3 0301 	rsbcs	r3, r3, r1
   15cf4:	ebc3 0302 	rsbcc	r3, r3, r2
			ticks_at_expire_normal -=
   15cf8:	441d      	add	r5, r3
   15cfa:	e7e1      	b.n	15cc0 <event_scan_prepare+0x3c>
		LL_ASSERT(!retval);
   15cfc:	4040      	eors	r0, r0
   15cfe:	f380 8811 	msr	BASEPRI, r0
   15d02:	f04f 0004 	mov.w	r0, #4
   15d06:	df02      	svc	2
   15d08:	20000f84 	.word	0x20000f84
   15d0c:	000163a1 	.word	0x000163a1
   15d10:	2000bcd8 	.word	0x2000bcd8
   15d14:	00000000 	.word	0x00000000

00015d18 <mayfly_xtal_stop_calc>:
{
   15d18:	b530      	push	{r4, r5, lr}
   15d1a:	b08d      	sub	sp, #52	; 0x34
   15d1c:	4604      	mov	r4, r0
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   15d1e:	2302      	movs	r3, #2
   15d20:	930b      	str	r3, [sp, #44]	; 0x2c
	ticker_id = 0xff;
   15d22:	23ff      	movs	r3, #255	; 0xff
   15d24:	f88d 3023 	strb.w	r3, [sp, #35]	; 0x23
	ticks_to_expire = 0;
   15d28:	2300      	movs	r3, #0
   15d2a:	930a      	str	r3, [sp, #40]	; 0x28
   15d2c:	e012      	b.n	15d54 <mayfly_xtal_stop_calc+0x3c>
				ticker_job_sched(RADIO_TICKER_INSTANCE_ID_RADIO,
   15d2e:	2101      	movs	r1, #1
   15d30:	2000      	movs	r0, #0
   15d32:	f7fa fc71 	bl	10618 <ticker_job_sched>
			while (ret_cb == TICKER_STATUS_BUSY) {
   15d36:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15d38:	2b02      	cmp	r3, #2
   15d3a:	d0f8      	beq.n	15d2e <mayfly_xtal_stop_calc+0x16>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15d3c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   15d3e:	b9cb      	cbnz	r3, 15d74 <mayfly_xtal_stop_calc+0x5c>
	} while (ticker_id != 0xff &&
   15d40:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
			       _radio.connection_count));
   15d44:	2aff      	cmp	r2, #255	; 0xff
   15d46:	d01b      	beq.n	15d80 <mayfly_xtal_stop_calc+0x68>
   15d48:	4b8b      	ldr	r3, [pc, #556]	; (15f78 <mayfly_xtal_stop_calc+0x260>)
   15d4a:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
		 ticker_id >= (RADIO_TICKER_ID_FIRST_CONNECTION +
   15d4e:	3307      	adds	r3, #7
	} while (ticker_id != 0xff &&
   15d50:	429a      	cmp	r2, r3
   15d52:	db15      	blt.n	15d80 <mayfly_xtal_stop_calc+0x68>
		ret = ticker_next_slot_get(RADIO_TICKER_INSTANCE_ID_RADIO,
   15d54:	ab0b      	add	r3, sp, #44	; 0x2c
   15d56:	9302      	str	r3, [sp, #8]
   15d58:	4b88      	ldr	r3, [pc, #544]	; (15f7c <mayfly_xtal_stop_calc+0x264>)
   15d5a:	9301      	str	r3, [sp, #4]
   15d5c:	ab0a      	add	r3, sp, #40	; 0x28
   15d5e:	9300      	str	r3, [sp, #0]
   15d60:	ab09      	add	r3, sp, #36	; 0x24
   15d62:	f10d 0223 	add.w	r2, sp, #35	; 0x23
   15d66:	2101      	movs	r1, #1
   15d68:	2000      	movs	r0, #0
   15d6a:	f7fa fbd5 	bl	10518 <ticker_next_slot_get>
		if (ret == TICKER_STATUS_BUSY) {
   15d6e:	2802      	cmp	r0, #2
   15d70:	d1e4      	bne.n	15d3c <mayfly_xtal_stop_calc+0x24>
   15d72:	e7e0      	b.n	15d36 <mayfly_xtal_stop_calc+0x1e>
		LL_ASSERT(ret_cb == TICKER_STATUS_SUCCESS);
   15d74:	4040      	eors	r0, r0
   15d76:	f380 8811 	msr	BASEPRI, r0
   15d7a:	f04f 0004 	mov.w	r0, #4
   15d7e:	df02      	svc	2
	if ((ticker_id != 0xff) &&
   15d80:	2aff      	cmp	r2, #255	; 0xff
   15d82:	d002      	beq.n	15d8a <mayfly_xtal_stop_calc+0x72>
	    (ticks_to_expire <
   15d84:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	if ((ticker_id != 0xff) &&
   15d86:	2ba8      	cmp	r3, #168	; 0xa8
   15d88:	d91a      	bls.n	15dc0 <mayfly_xtal_stop_calc+0xa8>
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 0);
   15d8a:	2100      	movs	r1, #0
   15d8c:	2001      	movs	r0, #1
   15d8e:	f7fb fdcd 	bl	1192c <mayfly_xtal_retain>
		if ((ticker_id != 0xff) && (ticker_id >= RADIO_TICKER_ID_ADV)) {
   15d92:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15d96:	1f53      	subs	r3, r2, #5
   15d98:	b2db      	uxtb	r3, r3
   15d9a:	2bf9      	cmp	r3, #249	; 0xf9
   15d9c:	d80e      	bhi.n	15dbc <mayfly_xtal_stop_calc+0xa4>
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15d9e:	2a06      	cmp	r2, #6
   15da0:	f200 80d1 	bhi.w	15f46 <mayfly_xtal_stop_calc+0x22e>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15da4:	2a05      	cmp	r2, #5
   15da6:	f000 80de 	beq.w	15f66 <mayfly_xtal_stop_calc+0x24e>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15daa:	2a06      	cmp	r2, #6
   15dac:	f040 80d5 	bne.w	15f5a <mayfly_xtal_stop_calc+0x242>
				hdr = &_radio.scanner.hdr;
   15db0:	4873      	ldr	r0, [pc, #460]	; (15f80 <mayfly_xtal_stop_calc+0x268>)
			prepare_normal_set(hdr, RADIO_TICKER_USER_ID_JOB,
   15db2:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15db6:	2101      	movs	r1, #1
   15db8:	f7fe fb80 	bl	144bc <prepare_normal_set>
}
   15dbc:	b00d      	add	sp, #52	; 0x34
   15dbe:	bd30      	pop	{r4, r5, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_JOB, 1);
   15dc0:	2101      	movs	r1, #1
   15dc2:	4608      	mov	r0, r1
   15dc4:	f7fb fdb2 	bl	1192c <mayfly_xtal_retain>
		if (ticker_id >= RADIO_TICKER_ID_ADV) {
   15dc8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
   15dcc:	2b04      	cmp	r3, #4
   15dce:	d9f5      	bls.n	15dbc <mayfly_xtal_stop_calc+0xa4>
			u8_t ticker_id_current = ((u32_t)params & 0xff);
   15dd0:	b2e4      	uxtb	r4, r4
			if (ticker_id >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15dd2:	2b06      	cmp	r3, #6
   15dd4:	d82a      	bhi.n	15e2c <mayfly_xtal_stop_calc+0x114>
			} else if (ticker_id == RADIO_TICKER_ID_ADV) {
   15dd6:	2b05      	cmp	r3, #5
   15dd8:	d03a      	beq.n	15e50 <mayfly_xtal_stop_calc+0x138>
			} else if (ticker_id == RADIO_TICKER_ID_SCAN) {
   15dda:	2b06      	cmp	r3, #6
   15ddc:	d132      	bne.n	15e44 <mayfly_xtal_stop_calc+0x12c>
				hdr = &_radio.scanner.hdr;
   15dde:	4968      	ldr	r1, [pc, #416]	; (15f80 <mayfly_xtal_stop_calc+0x268>)
			struct connection *conn = NULL;
   15de0:	2500      	movs	r5, #0
				hdr->ticks_preempt_to_start;
   15de2:	688b      	ldr	r3, [r1, #8]
				hdr->ticks_active_to_start :
   15de4:	684a      	ldr	r2, [r1, #4]
			ticks_prepare_to_start =
   15de6:	429a      	cmp	r2, r3
   15de8:	bf38      	it	cc
   15dea:	461a      	movcc	r2, r3
			if ((hdr->ticks_xtal_to_start & ((u32_t)1 << 31)) != 0) {
   15dec:	680b      	ldr	r3, [r1, #0]
   15dee:	2b00      	cmp	r3, #0
   15df0:	db31      	blt.n	15e56 <mayfly_xtal_stop_calc+0x13e>
				if (hdr->ticks_xtal_to_start >
   15df2:	429a      	cmp	r2, r3
   15df4:	d336      	bcc.n	15e64 <mayfly_xtal_stop_calc+0x14c>
			if (ticker_id_current >= RADIO_TICKER_ID_FIRST_CONNECTION) {
   15df6:	2c06      	cmp	r4, #6
   15df8:	d84e      	bhi.n	15e98 <mayfly_xtal_stop_calc+0x180>
			struct connection *conn_curr = NULL;
   15dfa:	2400      	movs	r4, #0
			if ((conn) && (conn_curr) &&
   15dfc:	2d00      	cmp	r5, #0
   15dfe:	d0dd      	beq.n	15dbc <mayfly_xtal_stop_calc+0xa4>
   15e00:	2c00      	cmp	r4, #0
   15e02:	d0db      	beq.n	15dbc <mayfly_xtal_stop_calc+0xa4>
			    (conn_curr->conn_interval == conn->conn_interval)) {
   15e04:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   15e06:	8caa      	ldrh	r2, [r5, #36]	; 0x24
			if ((conn) && (conn_curr) &&
   15e08:	4293      	cmp	r3, r2
   15e0a:	d1d7      	bne.n	15dbc <mayfly_xtal_stop_calc+0xa4>
					TICKER_US_TO_TICKS(conn->conn_interval * 1250);
   15e0c:	b292      	uxth	r2, r2
   15e0e:	485d      	ldr	r0, [pc, #372]	; (15f84 <mayfly_xtal_stop_calc+0x26c>)
   15e10:	fba2 0100 	umull	r0, r1, r2, r0
   15e14:	f240 1323 	movw	r3, #291	; 0x123
   15e18:	fb03 1102 	mla	r1, r3, r2, r1
   15e1c:	a354      	add	r3, pc, #336	; (adr r3, 15f70 <mayfly_xtal_stop_calc+0x258>)
   15e1e:	e9d3 2300 	ldrd	r2, r3, [r3]
   15e22:	f7ea fcdb 	bl	7dc <__aeabi_uldivmod>
				u32_t ticks_conn_interval =
   15e26:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
				while (ticks_to_expire > ticks_conn_interval) {
   15e2a:	e050      	b.n	15ece <mayfly_xtal_stop_calc+0x1b6>
				conn = mem_get(_radio.conn_pool,
   15e2c:	3b07      	subs	r3, #7
   15e2e:	b29a      	uxth	r2, r3
   15e30:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15e34:	4b50      	ldr	r3, [pc, #320]	; (15f78 <mayfly_xtal_stop_calc+0x260>)
   15e36:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15e3a:	f7f8 fe01 	bl	ea40 <mem_get>
   15e3e:	4605      	mov	r5, r0
				hdr = &conn->hdr;
   15e40:	4601      	mov	r1, r0
   15e42:	e7ce      	b.n	15de2 <mayfly_xtal_stop_calc+0xca>
				LL_ASSERT(0);
   15e44:	4040      	eors	r0, r0
   15e46:	f380 8811 	msr	BASEPRI, r0
   15e4a:	f04f 0004 	mov.w	r0, #4
   15e4e:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15e50:	494d      	ldr	r1, [pc, #308]	; (15f88 <mayfly_xtal_stop_calc+0x270>)
			struct connection *conn = NULL;
   15e52:	2500      	movs	r5, #0
   15e54:	e7c5      	b.n	15de2 <mayfly_xtal_stop_calc+0xca>
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15e56:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						     (~((u32_t)1 << 31))) -
   15e5a:	1ad3      	subs	r3, r2, r3
				ticks_to_expire -= ((hdr->ticks_xtal_to_start &
   15e5c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15e5e:	4413      	add	r3, r2
   15e60:	930a      	str	r3, [sp, #40]	; 0x28
   15e62:	e7c8      	b.n	15df6 <mayfly_xtal_stop_calc+0xde>
					u32_t ticks_drift_plus =
   15e64:	1a9b      	subs	r3, r3, r2
						ticker_update(
   15e66:	f89d 2023 	ldrb.w	r2, [sp, #35]	; 0x23
   15e6a:	b29b      	uxth	r3, r3
					ticker_status =
   15e6c:	9106      	str	r1, [sp, #24]
   15e6e:	4947      	ldr	r1, [pc, #284]	; (15f8c <mayfly_xtal_stop_calc+0x274>)
   15e70:	9105      	str	r1, [sp, #20]
   15e72:	2000      	movs	r0, #0
   15e74:	9004      	str	r0, [sp, #16]
   15e76:	9003      	str	r0, [sp, #12]
   15e78:	9302      	str	r3, [sp, #8]
   15e7a:	9001      	str	r0, [sp, #4]
   15e7c:	9000      	str	r0, [sp, #0]
   15e7e:	2101      	movs	r1, #1
   15e80:	f7fa fac0 	bl	10404 <ticker_update>
					LL_ASSERT((TICKER_STATUS_SUCCESS ==
   15e84:	2800      	cmp	r0, #0
   15e86:	d0b6      	beq.n	15df6 <mayfly_xtal_stop_calc+0xde>
   15e88:	2802      	cmp	r0, #2
   15e8a:	d0b4      	beq.n	15df6 <mayfly_xtal_stop_calc+0xde>
   15e8c:	4040      	eors	r0, r0
   15e8e:	f380 8811 	msr	BASEPRI, r0
   15e92:	f04f 0004 	mov.w	r0, #4
   15e96:	df02      	svc	2
					mem_get(_radio.conn_pool,
   15e98:	3c07      	subs	r4, #7
				conn_curr =
   15e9a:	b2a2      	uxth	r2, r4
   15e9c:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15ea0:	4b35      	ldr	r3, [pc, #212]	; (15f78 <mayfly_xtal_stop_calc+0x260>)
   15ea2:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15ea6:	f7f8 fdcb 	bl	ea40 <mem_get>
   15eaa:	4604      	mov	r4, r0
					conn_curr->hdr.ticks_preempt_to_start;
   15eac:	6883      	ldr	r3, [r0, #8]
					conn_curr->hdr.ticks_active_to_start :
   15eae:	6842      	ldr	r2, [r0, #4]
				ticks_prepare_to_start =
   15eb0:	429a      	cmp	r2, r3
   15eb2:	bf38      	it	cc
   15eb4:	461a      	movcc	r2, r3
				if ((conn_curr->hdr.ticks_xtal_to_start &
   15eb6:	6803      	ldr	r3, [r0, #0]
   15eb8:	2b00      	cmp	r3, #0
   15eba:	da9f      	bge.n	15dfc <mayfly_xtal_stop_calc+0xe4>
						((conn_curr->hdr.ticks_xtal_to_start &
   15ebc:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
						  (~((u32_t)1 << 31))) -
   15ec0:	1a9b      	subs	r3, r3, r2
					ticks_to_expire +=
   15ec2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   15ec4:	4413      	add	r3, r2
   15ec6:	930a      	str	r3, [sp, #40]	; 0x28
   15ec8:	e798      	b.n	15dfc <mayfly_xtal_stop_calc+0xe4>
					ticks_to_expire -= ticks_conn_interval;
   15eca:	1a1b      	subs	r3, r3, r0
   15ecc:	930a      	str	r3, [sp, #40]	; 0x28
				while (ticks_to_expire > ticks_conn_interval) {
   15ece:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   15ed0:	4298      	cmp	r0, r3
   15ed2:	d3fa      	bcc.n	15eca <mayfly_xtal_stop_calc+0x1b2>
   15ed4:	f994 101d 	ldrsb.w	r1, [r4, #29]
				if (conn_curr->role && !conn->role &&
   15ed8:	2900      	cmp	r1, #0
   15eda:	db1c      	blt.n	15f16 <mayfly_xtal_stop_calc+0x1fe>
				} else if (!conn_curr->role && conn->role &&
   15edc:	2900      	cmp	r1, #0
   15ede:	f6ff af6d 	blt.w	15dbc <mayfly_xtal_stop_calc+0xa4>
   15ee2:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15ee6:	2a00      	cmp	r2, #0
   15ee8:	f6bf af68 	bge.w	15dbc <mayfly_xtal_stop_calc+0xa4>
					     conn_curr->hdr.ticks_slot))) {
   15eec:	68e2      	ldr	r2, [r4, #12]
								625) +
   15eee:	323b      	adds	r2, #59	; 0x3b
				} else if (!conn_curr->role && conn->role &&
   15ef0:	4293      	cmp	r3, r2
   15ef2:	f4bf af63 	bcs.w	15dbc <mayfly_xtal_stop_calc+0xa4>
					status = conn_update_req(conn);
   15ef6:	4628      	mov	r0, r5
   15ef8:	f7fb f852 	bl	10fa0 <conn_update_req>
					if ((status == 2) &&
   15efc:	2802      	cmp	r0, #2
   15efe:	f47f af5d 	bne.w	15dbc <mayfly_xtal_stop_calc+0xa4>
   15f02:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
   15f06:	f013 0f02 	tst.w	r3, #2
   15f0a:	f43f af57 	beq.w	15dbc <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn_curr);
   15f0e:	4620      	mov	r0, r4
   15f10:	f7fb f846 	bl	10fa0 <conn_update_req>
   15f14:	e752      	b.n	15dbc <mayfly_xtal_stop_calc+0xa4>
				if (conn_curr->role && !conn->role &&
   15f16:	f995 201d 	ldrsb.w	r2, [r5, #29]
   15f1a:	2a00      	cmp	r2, #0
   15f1c:	dbde      	blt.n	15edc <mayfly_xtal_stop_calc+0x1c4>
				      conn_curr->hdr.ticks_slot))) {
   15f1e:	68e2      	ldr	r2, [r4, #12]
							 625) +
   15f20:	323b      	adds	r2, #59	; 0x3b
				if (conn_curr->role && !conn->role &&
   15f22:	4293      	cmp	r3, r2
   15f24:	d2da      	bcs.n	15edc <mayfly_xtal_stop_calc+0x1c4>
					status = conn_update_req(conn_curr);
   15f26:	4620      	mov	r0, r4
   15f28:	f7fb f83a 	bl	10fa0 <conn_update_req>
					if ((status == 2) &&
   15f2c:	2802      	cmp	r0, #2
   15f2e:	f47f af45 	bne.w	15dbc <mayfly_xtal_stop_calc+0xa4>
   15f32:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   15f36:	f013 0f02 	tst.w	r3, #2
   15f3a:	f43f af3f 	beq.w	15dbc <mayfly_xtal_stop_calc+0xa4>
						conn_update_req(conn);
   15f3e:	4628      	mov	r0, r5
   15f40:	f7fb f82e 	bl	10fa0 <conn_update_req>
   15f44:	e73a      	b.n	15dbc <mayfly_xtal_stop_calc+0xa4>
				conn = mem_get(_radio.conn_pool,
   15f46:	3a07      	subs	r2, #7
   15f48:	b292      	uxth	r2, r2
   15f4a:	f44f 71aa 	mov.w	r1, #340	; 0x154
   15f4e:	4b0a      	ldr	r3, [pc, #40]	; (15f78 <mayfly_xtal_stop_calc+0x260>)
   15f50:	f8d3 0104 	ldr.w	r0, [r3, #260]	; 0x104
   15f54:	f7f8 fd74 	bl	ea40 <mem_get>
   15f58:	e72b      	b.n	15db2 <mayfly_xtal_stop_calc+0x9a>
				LL_ASSERT(0);
   15f5a:	4040      	eors	r0, r0
   15f5c:	f380 8811 	msr	BASEPRI, r0
   15f60:	f04f 0004 	mov.w	r0, #4
   15f64:	df02      	svc	2
				hdr = &_radio.advertiser.hdr;
   15f66:	4808      	ldr	r0, [pc, #32]	; (15f88 <mayfly_xtal_stop_calc+0x270>)
   15f68:	e723      	b.n	15db2 <mayfly_xtal_stop_calc+0x9a>
   15f6a:	bf00      	nop
   15f6c:	f3af 8000 	nop.w
   15f70:	1afd498d 	.word	0x1afd498d
   15f74:	00000007 	.word	0x00000007
   15f78:	20000f84 	.word	0x20000f84
   15f7c:	00010d4d 	.word	0x00010d4d
   15f80:	20001050 	.word	0x20001050
   15f84:	09ce5400 	.word	0x09ce5400
   15f88:	20000f98 	.word	0x20000f98
   15f8c:	00010d79 	.word	0x00010d79

00015f90 <preempt_calc>:
{
   15f90:	b570      	push	{r4, r5, r6, lr}
   15f92:	4605      	mov	r5, r0
   15f94:	460e      	mov	r6, r1
   15f96:	4614      	mov	r4, r2
		ticker_ticks_diff_get(ticker_ticks_now_get(), ticks_at_expire);
   15f98:	f7fa fb4e 	bl	10638 <ticker_ticks_now_get>
	u32_t diff =
   15f9c:	4621      	mov	r1, r4
   15f9e:	f7fa fb4f 	bl	10640 <ticker_ticks_diff_get>
	diff += 3;
   15fa2:	1cc4      	adds	r4, r0, #3
	if (diff > TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US)) {
   15fa4:	2c09      	cmp	r4, #9
   15fa6:	d801      	bhi.n	15fac <preempt_calc+0x1c>
	return 0;
   15fa8:	2000      	movs	r0, #0
   15faa:	bd70      	pop	{r4, r5, r6, pc}
		mayfly_xtal_retain(RADIO_TICKER_USER_ID_WORKER, 0);
   15fac:	2100      	movs	r1, #0
   15fae:	4608      	mov	r0, r1
   15fb0:	f7fb fcbc 	bl	1192c <mayfly_xtal_retain>
		prepare_normal_set(hdr, RADIO_TICKER_USER_ID_WORKER, ticker_id);
   15fb4:	4632      	mov	r2, r6
   15fb6:	2100      	movs	r1, #0
   15fb8:	4628      	mov	r0, r5
   15fba:	f7fe fa7f 	bl	144bc <prepare_normal_set>
		diff += hdr->ticks_preempt_to_start;
   15fbe:	68ab      	ldr	r3, [r5, #8]
   15fc0:	441c      	add	r4, r3
		if (diff <
   15fc2:	2c26      	cmp	r4, #38	; 0x26
   15fc4:	d802      	bhi.n	15fcc <preempt_calc+0x3c>
			hdr->ticks_preempt_to_start = diff;
   15fc6:	60ac      	str	r4, [r5, #8]
		return 1;
   15fc8:	2001      	movs	r0, #1
   15fca:	bd70      	pop	{r4, r5, r6, pc}
   15fcc:	2001      	movs	r0, #1
}
   15fce:	bd70      	pop	{r4, r5, r6, pc}

00015fd0 <event_adv>:
{
   15fd0:	b538      	push	{r3, r4, r5, lr}
	LL_ASSERT(_radio.role == ROLE_NONE);
   15fd2:	4b3b      	ldr	r3, [pc, #236]	; (160c0 <event_adv+0xf0>)
   15fd4:	7bdb      	ldrb	r3, [r3, #15]
   15fd6:	2b00      	cmp	r3, #0
   15fd8:	d142      	bne.n	16060 <event_adv+0x90>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   15fda:	4b39      	ldr	r3, [pc, #228]	; (160c0 <event_adv+0xf0>)
   15fdc:	7b1b      	ldrb	r3, [r3, #12]
   15fde:	b2db      	uxtb	r3, r3
   15fe0:	2b05      	cmp	r3, #5
   15fe2:	d143      	bne.n	1606c <event_adv+0x9c>
   15fe4:	4605      	mov	r5, r0
	_radio.role = ROLE_ADV;
   15fe6:	4c36      	ldr	r4, [pc, #216]	; (160c0 <event_adv+0xf0>)
   15fe8:	2101      	movs	r1, #1
   15fea:	73e1      	strb	r1, [r4, #15]
	_radio.ticker_id_prepare = 0;
   15fec:	2300      	movs	r3, #0
   15fee:	7323      	strb	r3, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_ADV;
   15ff0:	2305      	movs	r3, #5
   15ff2:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   15ff4:	6060      	str	r0, [r4, #4]
	adv_scan_configure(_radio.advertiser.phy_p, 1);
   15ff6:	f894 0025 	ldrb.w	r0, [r4, #37]	; 0x25
   15ffa:	f000 0007 	and.w	r0, r0, #7
   15ffe:	f7fb fd5b 	bl	11ab8 <adv_scan_configure>
	_radio.advertiser.chan_map_current = _radio.advertiser.chan_map;
   16002:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   16006:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   1600a:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   1600e:	f363 0243 	bfi	r2, r3, #1, #3
   16012:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	adv_setup();
   16016:	f7fc f841 	bl	1209c <adv_setup>
	if (ctrl_rl_enabled()) {
   1601a:	f003 fa43 	bl	194a4 <ctrl_rl_enabled>
   1601e:	bb58      	cbnz	r0, 16078 <event_adv+0xa8>
	if (_radio.advertiser.filter_policy) {
   16020:	4b27      	ldr	r3, [pc, #156]	; (160c0 <event_adv+0xf0>)
   16022:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
   16026:	f013 0fc0 	tst.w	r3, #192	; 0xc0
   1602a:	d134      	bne.n	16096 <event_adv+0xc6>
	remainder_us = radio_tmr_start(1,
   1602c:	4c24      	ldr	r4, [pc, #144]	; (160c0 <event_adv+0xf0>)
   1602e:	68a2      	ldr	r2, [r4, #8]
   16030:	f105 0109 	add.w	r1, r5, #9
   16034:	2001      	movs	r0, #1
   16036:	f7f8 ffe9 	bl	f00c <radio_tmr_start>
	radio_tmr_end_capture();
   1603a:	f7f9 f899 	bl	f170 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.advertiser.hdr, RADIO_TICKER_ID_ADV,
   1603e:	462a      	mov	r2, r5
   16040:	2105      	movs	r1, #5
   16042:	f104 0014 	add.w	r0, r4, #20
   16046:	f7ff ffa3 	bl	15f90 <preempt_calc>
   1604a:	bb68      	cbnz	r0, 160a8 <event_adv+0xd8>
		ticker_status =
   1604c:	2300      	movs	r3, #0
   1604e:	4a1d      	ldr	r2, [pc, #116]	; (160c4 <event_adv+0xf4>)
   16050:	4619      	mov	r1, r3
   16052:	4618      	mov	r0, r3
   16054:	f7fa faa4 	bl	105a0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16058:	b108      	cbz	r0, 1605e <event_adv+0x8e>
   1605a:	2802      	cmp	r0, #2
   1605c:	d129      	bne.n	160b2 <event_adv+0xe2>
   1605e:	bd38      	pop	{r3, r4, r5, pc}
	LL_ASSERT(_radio.role == ROLE_NONE);
   16060:	4040      	eors	r0, r0
   16062:	f380 8811 	msr	BASEPRI, r0
   16066:	f04f 0004 	mov.w	r0, #4
   1606a:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_ADV);
   1606c:	4040      	eors	r0, r0
   1606e:	f380 8811 	msr	BASEPRI, r0
   16072:	f04f 0004 	mov.w	r0, #4
   16076:	df02      	svc	2
			ctrl_filter_get(!!(_radio.advertiser.filter_policy));
   16078:	f894 3025 	ldrb.w	r3, [r4, #37]	; 0x25
   1607c:	f013 0fc0 	tst.w	r3, #192	; 0xc0
		struct ll_filter *filter =
   16080:	bf14      	ite	ne
   16082:	2001      	movne	r0, #1
   16084:	2000      	moveq	r0, #0
   16086:	f003 f80f 	bl	190a8 <ctrl_filter_get>
		radio_filter_configure(filter->enable_bitmask,
   1608a:	1c82      	adds	r2, r0, #2
   1608c:	7841      	ldrb	r1, [r0, #1]
   1608e:	7800      	ldrb	r0, [r0, #0]
   16090:	f7f8 ff3e 	bl	ef10 <radio_filter_configure>
   16094:	e7ca      	b.n	1602c <event_adv+0x5c>
		struct ll_filter *wl = ctrl_filter_get(true);
   16096:	2001      	movs	r0, #1
   16098:	f003 f806 	bl	190a8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1609c:	1c82      	adds	r2, r0, #2
   1609e:	7841      	ldrb	r1, [r0, #1]
   160a0:	7800      	ldrb	r0, [r0, #0]
   160a2:	f7f8 ff35 	bl	ef10 <radio_filter_configure>
   160a6:	e7c1      	b.n	1602c <event_adv+0x5c>
		_radio.state = STATE_STOP;
   160a8:	2204      	movs	r2, #4
   160aa:	7422      	strb	r2, [r4, #16]
		radio_disable();
   160ac:	f7f8 fea0 	bl	edf0 <radio_disable>
   160b0:	bd38      	pop	{r3, r4, r5, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   160b2:	4040      	eors	r0, r0
   160b4:	f380 8811 	msr	BASEPRI, r0
   160b8:	f04f 0004 	mov.w	r0, #4
   160bc:	df02      	svc	2
   160be:	bf00      	nop
   160c0:	20000f84 	.word	0x20000f84
   160c4:	00011579 	.word	0x00011579

000160c8 <event_master>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   160c8:	4a4c      	ldr	r2, [pc, #304]	; (161fc <event_master+0x134>)
   160ca:	7bd2      	ldrb	r2, [r2, #15]
   160cc:	2a00      	cmp	r2, #0
   160ce:	d174      	bne.n	161ba <event_master+0xf2>
{
   160d0:	b530      	push	{r4, r5, lr}
   160d2:	b085      	sub	sp, #20
	LL_ASSERT(_radio.ticker_id_prepare ==
   160d4:	4a49      	ldr	r2, [pc, #292]	; (161fc <event_master+0x134>)
   160d6:	7b12      	ldrb	r2, [r2, #12]
   160d8:	b2d2      	uxtb	r2, r2
   160da:	8c19      	ldrh	r1, [r3, #32]
   160dc:	1dcc      	adds	r4, r1, #7
   160de:	42a2      	cmp	r2, r4
   160e0:	d171      	bne.n	161c6 <event_master+0xfe>
   160e2:	461c      	mov	r4, r3
   160e4:	4605      	mov	r5, r0
	_radio.role = ROLE_MASTER;
   160e6:	4b45      	ldr	r3, [pc, #276]	; (161fc <event_master+0x134>)
   160e8:	2204      	movs	r2, #4
   160ea:	73da      	strb	r2, [r3, #15]
	_radio.state = STATE_TX;
   160ec:	2002      	movs	r0, #2
   160ee:	7418      	strb	r0, [r3, #16]
	_radio.ticker_id_prepare = 0;
   160f0:	2200      	movs	r2, #0
   160f2:	731a      	strb	r2, [r3, #12]
	    (RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   160f4:	3107      	adds	r1, #7
   160f6:	b2c9      	uxtb	r1, r1
	_radio.ticker_id_event =
   160f8:	7359      	strb	r1, [r3, #13]
	_radio.ticks_anchor = ticks_at_expire;
   160fa:	605d      	str	r5, [r3, #4]
	_radio.packet_counter = 0;
   160fc:	f883 2114 	strb.w	r2, [r3, #276]	; 0x114
	_radio.crc_expire = 0;
   16100:	f883 2115 	strb.w	r2, [r3, #277]	; 0x115
	_radio.conn_curr = conn;
   16104:	f8c3 4110 	str.w	r4, [r3, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16108:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1610a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   1610c:	8522      	strh	r2, [r4, #40]	; 0x28
	packet_tx_enqueue(2);
   1610e:	f7fb fd69 	bl	11be4 <packet_tx_enqueue>
	prepare_pdu_data_tx(conn, &pdu_data_tx);
   16112:	a903      	add	r1, sp, #12
   16114:	4620      	mov	r0, r4
   16116:	f7fb fed3 	bl	11ec0 <prepare_pdu_data_tx>
	pdu_data_tx->sn = conn->sn;
   1611a:	9b03      	ldr	r3, [sp, #12]
   1611c:	f894 10f8 	ldrb.w	r1, [r4, #248]	; 0xf8
   16120:	781a      	ldrb	r2, [r3, #0]
   16122:	f361 02c3 	bfi	r2, r1, #3, #1
   16126:	701a      	strb	r2, [r3, #0]
	pdu_data_tx->nesn = conn->nesn;
   16128:	9a03      	ldr	r2, [sp, #12]
   1612a:	f894 30f8 	ldrb.w	r3, [r4, #248]	; 0xf8
   1612e:	f3c3 0340 	ubfx	r3, r3, #1, #1
   16132:	7811      	ldrb	r1, [r2, #0]
   16134:	f363 0182 	bfi	r1, r3, #2, #1
   16138:	7011      	strb	r1, [r2, #0]
	connection_configure(conn);
   1613a:	4620      	mov	r0, r4
   1613c:	f7fb fce0 	bl	11b00 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16140:	2096      	movs	r0, #150	; 0x96
   16142:	f7f8 ff5d 	bl	f000 <radio_tmr_tifs_set>
	radio_switch_complete_and_rx(conn->phy_rx);
   16146:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1614a:	f000 0007 	and.w	r0, r0, #7
   1614e:	f7f8 fea5 	bl	ee9c <radio_switch_complete_and_rx>
	tx_packet_set(conn, pdu_data_tx);
   16152:	9903      	ldr	r1, [sp, #12]
   16154:	4620      	mov	r0, r4
   16156:	f7fb ff49 	bl	11fec <tx_packet_set>
	if (conn->data_chan_sel) {
   1615a:	7f63      	ldrb	r3, [r4, #29]
   1615c:	f013 0f40 	tst.w	r3, #64	; 0x40
   16160:	d037      	beq.n	161d2 <event_master+0x10a>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   16162:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16164:	3801      	subs	r0, #1
   16166:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1616a:	f104 0217 	add.w	r2, r4, #23
   1616e:	8be1      	ldrh	r1, [r4, #30]
   16170:	b280      	uxth	r0, r0
   16172:	f7fa fe8b 	bl	10e8c <chan_sel_2>
	chan_set(data_chan_use);
   16176:	f7fb ff65 	bl	12044 <chan_set>
		remainder_us = radio_tmr_start(1,
   1617a:	4b20      	ldr	r3, [pc, #128]	; (161fc <event_master+0x134>)
   1617c:	689a      	ldr	r2, [r3, #8]
   1617e:	f105 0109 	add.w	r1, r5, #9
   16182:	2001      	movs	r0, #1
   16184:	f7f8 ff42 	bl	f00c <radio_tmr_start>
		radio_tmr_end_capture();
   16188:	f7f8 fff2 	bl	f170 <radio_tmr_end_capture>
				      conn->handle), ticks_at_expire)) {
   1618c:	8c21      	ldrh	r1, [r4, #32]
	    preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1618e:	3107      	adds	r1, #7
   16190:	462a      	mov	r2, r5
   16192:	b2c9      	uxtb	r1, r1
   16194:	4620      	mov	r0, r4
   16196:	f7ff fefb 	bl	15f90 <preempt_calc>
	if (0 !=
   1619a:	bb38      	cbnz	r0, 161ec <event_master+0x124>
		ticker_status =
   1619c:	2300      	movs	r3, #0
   1619e:	4a18      	ldr	r2, [pc, #96]	; (16200 <event_master+0x138>)
   161a0:	4619      	mov	r1, r3
   161a2:	4618      	mov	r0, r3
   161a4:	f7fa f9fc 	bl	105a0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   161a8:	b328      	cbz	r0, 161f6 <event_master+0x12e>
   161aa:	2802      	cmp	r0, #2
   161ac:	d023      	beq.n	161f6 <event_master+0x12e>
   161ae:	4040      	eors	r0, r0
   161b0:	f380 8811 	msr	BASEPRI, r0
   161b4:	f04f 0004 	mov.w	r0, #4
   161b8:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   161ba:	4040      	eors	r0, r0
   161bc:	f380 8811 	msr	BASEPRI, r0
   161c0:	f04f 0004 	mov.w	r0, #4
   161c4:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   161c6:	4040      	eors	r0, r0
   161c8:	f380 8811 	msr	BASEPRI, r0
   161cc:	f04f 0004 	mov.w	r0, #4
   161d0:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   161d2:	7fa1      	ldrb	r1, [r4, #30]
   161d4:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   161d6:	7f63      	ldrb	r3, [r4, #29]
   161d8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   161dc:	9300      	str	r3, [sp, #0]
   161de:	f104 0317 	add.w	r3, r4, #23
   161e2:	f104 001f 	add.w	r0, r4, #31
   161e6:	f7fa fdf3 	bl	10dd0 <chan_sel_1>
   161ea:	e7c4      	b.n	16176 <event_master+0xae>
		_radio.state = STATE_STOP;
   161ec:	2204      	movs	r2, #4
   161ee:	4b03      	ldr	r3, [pc, #12]	; (161fc <event_master+0x134>)
   161f0:	741a      	strb	r2, [r3, #16]
		radio_disable();
   161f2:	f7f8 fdfd 	bl	edf0 <radio_disable>
}
   161f6:	b005      	add	sp, #20
   161f8:	bd30      	pop	{r4, r5, pc}
   161fa:	bf00      	nop
   161fc:	20000f84 	.word	0x20000f84
   16200:	00011579 	.word	0x00011579

00016204 <event_slave>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   16204:	4a64      	ldr	r2, [pc, #400]	; (16398 <event_slave+0x194>)
   16206:	7bd2      	ldrb	r2, [r2, #15]
   16208:	2a00      	cmp	r2, #0
   1620a:	f040 809d 	bne.w	16348 <event_slave+0x144>
{
   1620e:	b5f0      	push	{r4, r5, r6, r7, lr}
   16210:	b083      	sub	sp, #12
	LL_ASSERT(_radio.ticker_id_prepare ==
   16212:	4a61      	ldr	r2, [pc, #388]	; (16398 <event_slave+0x194>)
   16214:	7b11      	ldrb	r1, [r2, #12]
   16216:	b2c9      	uxtb	r1, r1
   16218:	8c1a      	ldrh	r2, [r3, #32]
   1621a:	1dd4      	adds	r4, r2, #7
   1621c:	42a1      	cmp	r1, r4
   1621e:	f040 8099 	bne.w	16354 <event_slave+0x150>
   16222:	461c      	mov	r4, r3
   16224:	4606      	mov	r6, r0
	_radio.role = ROLE_SLAVE;
   16226:	4d5c      	ldr	r5, [pc, #368]	; (16398 <event_slave+0x194>)
   16228:	2303      	movs	r3, #3
   1622a:	73eb      	strb	r3, [r5, #15]
	_radio.state = STATE_RX;
   1622c:	2301      	movs	r3, #1
   1622e:	742b      	strb	r3, [r5, #16]
	_radio.ticker_id_prepare = 0;
   16230:	2700      	movs	r7, #0
   16232:	732f      	strb	r7, [r5, #12]
		(RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle);
   16234:	3207      	adds	r2, #7
   16236:	b2d2      	uxtb	r2, r2
	_radio.ticker_id_event =
   16238:	736a      	strb	r2, [r5, #13]
	_radio.ticks_anchor = ticks_at_expire;
   1623a:	6068      	str	r0, [r5, #4]
	_radio.packet_counter = 0;
   1623c:	f885 7114 	strb.w	r7, [r5, #276]	; 0x114
	_radio.crc_expire = 0;
   16240:	f885 7115 	strb.w	r7, [r5, #277]	; 0x115
	_radio.conn_curr = conn;
   16244:	f8c5 4110 	str.w	r4, [r5, #272]	; 0x110
	conn->latency_event = conn->latency_prepare;
   16248:	8d23      	ldrh	r3, [r4, #40]	; 0x28
   1624a:	8563      	strh	r3, [r4, #42]	; 0x2a
	conn->latency_prepare = 0;
   1624c:	8527      	strh	r7, [r4, #40]	; 0x28
	connection_configure(conn);
   1624e:	4620      	mov	r0, r4
   16250:	f7fb fc56 	bl	11b00 <connection_configure>
	radio_tmr_tifs_set(RADIO_TIFS);
   16254:	2096      	movs	r0, #150	; 0x96
   16256:	f7f8 fed3 	bl	f000 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(conn->phy_rx, 0, conn->phy_tx,
   1625a:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   1625e:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   16262:	09d3      	lsrs	r3, r2, #7
   16264:	f3c2 02c2 	ubfx	r2, r2, #3, #3
   16268:	4639      	mov	r1, r7
   1626a:	f000 0007 	and.w	r0, r0, #7
   1626e:	f7f8 fe1d 	bl	eeac <radio_switch_complete_and_tx>
		      _radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   16272:	f8d5 3138 	ldr.w	r3, [r5, #312]	; 0x138
   16276:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   1627a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
	rx_packet_set(conn, (struct pdu_data *)
   1627e:	3108      	adds	r1, #8
   16280:	4620      	mov	r0, r4
   16282:	f7fb fc51 	bl	11b28 <rx_packet_set>
	if (conn->data_chan_sel) {
   16286:	7f63      	ldrb	r3, [r4, #29]
   16288:	f013 0f40 	tst.w	r3, #64	; 0x40
   1628c:	d068      	beq.n	16360 <event_slave+0x15c>
		data_chan_use = chan_sel_2(conn->event_counter - 1,
   1628e:	8c60      	ldrh	r0, [r4, #34]	; 0x22
   16290:	3801      	subs	r0, #1
   16292:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   16296:	f104 0217 	add.w	r2, r4, #23
   1629a:	8be1      	ldrh	r1, [r4, #30]
   1629c:	b280      	uxth	r0, r0
   1629e:	f7fa fdf5 	bl	10e8c <chan_sel_2>
	chan_set(data_chan_use);
   162a2:	f7fb fecf 	bl	12044 <chan_set>
		conn->slave.window_widening_prepare_us;
   162a6:	6de3      	ldr	r3, [r4, #92]	; 0x5c
	conn->slave.window_widening_event_us +=
   162a8:	6e22      	ldr	r2, [r4, #96]	; 0x60
   162aa:	4413      	add	r3, r2
   162ac:	6623      	str	r3, [r4, #96]	; 0x60
	conn->slave.window_widening_prepare_us = 0;
   162ae:	2200      	movs	r2, #0
   162b0:	65e2      	str	r2, [r4, #92]	; 0x5c
	    conn->slave.window_widening_max_us) {
   162b2:	6da2      	ldr	r2, [r4, #88]	; 0x58
	if (conn->slave.window_widening_event_us >
   162b4:	4293      	cmp	r3, r2
   162b6:	d900      	bls.n	162ba <event_slave+0xb6>
		conn->slave.window_widening_event_us =
   162b8:	6622      	str	r2, [r4, #96]	; 0x60
		conn->slave.window_size_prepare_us;
   162ba:	6e62      	ldr	r2, [r4, #100]	; 0x64
	conn->slave.window_size_event_us +=
   162bc:	6ea3      	ldr	r3, [r4, #104]	; 0x68
   162be:	4413      	add	r3, r2
   162c0:	66a3      	str	r3, [r4, #104]	; 0x68
	conn->slave.window_size_prepare_us = 0;
   162c2:	2700      	movs	r7, #0
   162c4:	6667      	str	r7, [r4, #100]	; 0x64
	remainder_us =
   162c6:	4b34      	ldr	r3, [pc, #208]	; (16398 <event_slave+0x194>)
   162c8:	689a      	ldr	r2, [r3, #8]
   162ca:	f106 0109 	add.w	r1, r6, #9
   162ce:	4638      	mov	r0, r7
   162d0:	f7f8 fe9c 	bl	f00c <radio_tmr_start>
   162d4:	4605      	mov	r5, r0
	radio_tmr_aa_capture();
   162d6:	f7f8 ff17 	bl	f108 <radio_tmr_aa_capture>
	radio_tmr_aa_save(0);
   162da:	4638      	mov	r0, r7
   162dc:	f7f8 ff36 	bl	f14c <radio_tmr_aa_save>
	       (conn->slave.window_widening_event_us << 1) +
   162e0:	6e20      	ldr	r0, [r4, #96]	; 0x60
	       (RADIO_TICKER_JITTER_US << 2) +
   162e2:	eb05 0540 	add.w	r5, r5, r0, lsl #1
	       conn->slave.window_size_event_us;
   162e6:	6ea0      	ldr	r0, [r4, #104]	; 0x68
	       (conn->slave.window_widening_event_us << 1) +
   162e8:	4405      	add	r5, r0
	hcto = remainder_us + RADIO_TICKER_JITTER_US +
   162ea:	3550      	adds	r5, #80	; 0x50
	hcto += radio_rx_ready_delay_get(conn->phy_rx);
   162ec:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   162f0:	f000 0007 	and.w	r0, r0, #7
   162f4:	f7f8 fd68 	bl	edc8 <radio_rx_ready_delay_get>
   162f8:	4405      	add	r5, r0
	hcto += addr_us_get(conn->phy_rx);
   162fa:	f894 003a 	ldrb.w	r0, [r4, #58]	; 0x3a
   162fe:	f000 0007 	and.w	r0, r0, #7
	switch (phy) {
   16302:	2802      	cmp	r0, #2
   16304:	d03c      	beq.n	16380 <event_slave+0x17c>
   16306:	2804      	cmp	r0, #4
   16308:	d037      	beq.n	1637a <event_slave+0x176>
		return 40;
   1630a:	2328      	movs	r3, #40	; 0x28
	hcto += addr_us_get(conn->phy_rx);
   1630c:	441d      	add	r5, r3
	hcto += radio_rx_chain_delay_get(conn->phy_rx, 1);
   1630e:	2101      	movs	r1, #1
   16310:	f7f8 fd5c 	bl	edcc <radio_rx_chain_delay_get>
	radio_tmr_hcto_configure(hcto);
   16314:	4428      	add	r0, r5
   16316:	f7f8 fed5 	bl	f0c4 <radio_tmr_hcto_configure>
				      conn->handle), ticks_at_expire) != 0) {
   1631a:	8c21      	ldrh	r1, [r4, #32]
	if (preempt_calc(&conn->hdr, (RADIO_TICKER_ID_FIRST_CONNECTION +
   1631c:	3107      	adds	r1, #7
   1631e:	4632      	mov	r2, r6
   16320:	b2c9      	uxtb	r1, r1
   16322:	4620      	mov	r0, r4
   16324:	f7ff fe34 	bl	15f90 <preempt_calc>
   16328:	bb60      	cbnz	r0, 16384 <event_slave+0x180>
		ticker_status =
   1632a:	2300      	movs	r3, #0
   1632c:	4a1b      	ldr	r2, [pc, #108]	; (1639c <event_slave+0x198>)
   1632e:	4619      	mov	r1, r3
   16330:	4618      	mov	r0, r3
   16332:	f7fa f935 	bl	105a0 <ticker_job_idle_get>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16336:	b350      	cbz	r0, 1638e <event_slave+0x18a>
   16338:	2802      	cmp	r0, #2
   1633a:	d028      	beq.n	1638e <event_slave+0x18a>
   1633c:	4040      	eors	r0, r0
   1633e:	f380 8811 	msr	BASEPRI, r0
   16342:	f04f 0004 	mov.w	r0, #4
   16346:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   16348:	4040      	eors	r0, r0
   1634a:	f380 8811 	msr	BASEPRI, r0
   1634e:	f04f 0004 	mov.w	r0, #4
   16352:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare ==
   16354:	4040      	eors	r0, r0
   16356:	f380 8811 	msr	BASEPRI, r0
   1635a:	f04f 0004 	mov.w	r0, #4
   1635e:	df02      	svc	2
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   16360:	7fa1      	ldrb	r1, [r4, #30]
   16362:	8d62      	ldrh	r2, [r4, #42]	; 0x2a
					   conn->data_chan_count);
   16364:	7f63      	ldrb	r3, [r4, #29]
   16366:	f003 033f 	and.w	r3, r3, #63	; 0x3f
		data_chan_use = chan_sel_1(&conn->data_chan_use,
   1636a:	9300      	str	r3, [sp, #0]
   1636c:	f104 0317 	add.w	r3, r4, #23
   16370:	f104 001f 	add.w	r0, r4, #31
   16374:	f7fa fd2c 	bl	10dd0 <chan_sel_1>
   16378:	e793      	b.n	162a2 <event_slave+0x9e>
		return 376;
   1637a:	f44f 73bc 	mov.w	r3, #376	; 0x178
   1637e:	e7c5      	b.n	1630c <event_slave+0x108>
		return 24;
   16380:	2318      	movs	r3, #24
   16382:	e7c3      	b.n	1630c <event_slave+0x108>
		_radio.state = STATE_STOP;
   16384:	2204      	movs	r2, #4
   16386:	4b04      	ldr	r3, [pc, #16]	; (16398 <event_slave+0x194>)
   16388:	741a      	strb	r2, [r3, #16]
		radio_disable();
   1638a:	f7f8 fd31 	bl	edf0 <radio_disable>
	packet_tx_enqueue(2);
   1638e:	2002      	movs	r0, #2
   16390:	f7fb fc28 	bl	11be4 <packet_tx_enqueue>
}
   16394:	b003      	add	sp, #12
   16396:	bdf0      	pop	{r4, r5, r6, r7, pc}
   16398:	20000f84 	.word	0x20000f84
   1639c:	00011579 	.word	0x00011579

000163a0 <event_scan>:
	LL_ASSERT(_radio.role == ROLE_NONE);
   163a0:	4b67      	ldr	r3, [pc, #412]	; (16540 <event_scan+0x1a0>)
   163a2:	7bdb      	ldrb	r3, [r3, #15]
   163a4:	2b00      	cmp	r3, #0
   163a6:	f040 808b 	bne.w	164c0 <event_scan+0x120>
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   163aa:	4b65      	ldr	r3, [pc, #404]	; (16540 <event_scan+0x1a0>)
   163ac:	7b1b      	ldrb	r3, [r3, #12]
   163ae:	b2db      	uxtb	r3, r3
   163b0:	2b06      	cmp	r3, #6
   163b2:	f040 808b 	bne.w	164cc <event_scan+0x12c>
{
   163b6:	b570      	push	{r4, r5, r6, lr}
   163b8:	b08c      	sub	sp, #48	; 0x30
   163ba:	4605      	mov	r5, r0
	_radio.role = ROLE_SCAN;
   163bc:	4c60      	ldr	r4, [pc, #384]	; (16540 <event_scan+0x1a0>)
   163be:	2302      	movs	r3, #2
   163c0:	73e3      	strb	r3, [r4, #15]
	_radio.state = STATE_RX;
   163c2:	2101      	movs	r1, #1
   163c4:	7421      	strb	r1, [r4, #16]
	_radio.ticker_id_prepare = 0;
   163c6:	2200      	movs	r2, #0
   163c8:	7322      	strb	r2, [r4, #12]
	_radio.ticker_id_event = RADIO_TICKER_ID_SCAN;
   163ca:	2306      	movs	r3, #6
   163cc:	7363      	strb	r3, [r4, #13]
	_radio.ticks_anchor = ticks_at_expire;
   163ce:	6060      	str	r0, [r4, #4]
	_radio.scanner.state = 0;
   163d0:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   163d4:	f362 0341 	bfi	r3, r2, #1, #1
   163d8:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
	adv_scan_configure(_radio.scanner.phy, 1); /* if coded then use S8. */
   163dc:	f894 00dd 	ldrb.w	r0, [r4, #221]	; 0xdd
   163e0:	f000 0007 	and.w	r0, r0, #7
   163e4:	f7fb fb68 	bl	11ab8 <adv_scan_configure>
	chan_set(37 + _radio.scanner.chan++);
   163e8:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   163ec:	f3c3 0081 	ubfx	r0, r3, #2, #2
   163f0:	1c42      	adds	r2, r0, #1
   163f2:	f362 0383 	bfi	r3, r2, #2, #2
   163f6:	f884 30dc 	strb.w	r3, [r4, #220]	; 0xdc
   163fa:	3025      	adds	r0, #37	; 0x25
   163fc:	f7fb fe22 	bl	12044 <chan_set>
	if (_radio.scanner.chan == 3) {
   16400:	f894 30dc 	ldrb.w	r3, [r4, #220]	; 0xdc
   16404:	f003 030c 	and.w	r3, r3, #12
   16408:	2b0c      	cmp	r3, #12
   1640a:	d065      	beq.n	164d8 <event_scan+0x138>
	radio_tmr_tifs_set(RADIO_TIFS);
   1640c:	2096      	movs	r0, #150	; 0x96
   1640e:	f7f8 fdf7 	bl	f000 <radio_tmr_tifs_set>
	radio_switch_complete_and_tx(0, 0, 0, 0);
   16412:	2300      	movs	r3, #0
   16414:	461a      	mov	r2, r3
   16416:	4619      	mov	r1, r3
   16418:	4618      	mov	r0, r3
   1641a:	f7f8 fd47 	bl	eeac <radio_switch_complete_and_tx>
	radio_pkt_rx_set(_radio.packet_rx[_radio.packet_rx_last]->pdu_data);
   1641e:	4b48      	ldr	r3, [pc, #288]	; (16540 <event_scan+0x1a0>)
   16420:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16424:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16428:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
   1642c:	3008      	adds	r0, #8
   1642e:	f7f8 fcbb 	bl	eda8 <radio_pkt_rx_set>
	radio_rssi_measure();
   16432:	f7f8 fd4b 	bl	eecc <radio_rssi_measure>
	if (ctrl_rl_enabled()) {
   16436:	f003 f835 	bl	194a4 <ctrl_rl_enabled>
   1643a:	2800      	cmp	r0, #0
   1643c:	d153      	bne.n	164e6 <event_scan+0x146>
	if (_radio.scanner.filter_policy) {
   1643e:	4b40      	ldr	r3, [pc, #256]	; (16540 <event_scan+0x1a0>)
   16440:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16444:	f013 0f30 	tst.w	r3, #48	; 0x30
   16448:	d165      	bne.n	16516 <event_scan+0x176>
	remainder_us = radio_tmr_start(0,
   1644a:	4c3d      	ldr	r4, [pc, #244]	; (16540 <event_scan+0x1a0>)
   1644c:	68a2      	ldr	r2, [r4, #8]
   1644e:	f105 0109 	add.w	r1, r5, #9
   16452:	2000      	movs	r0, #0
   16454:	f7f8 fdda 	bl	f00c <radio_tmr_start>
	radio_tmr_end_capture();
   16458:	f7f8 fe8a 	bl	f170 <radio_tmr_end_capture>
	if (preempt_calc(&_radio.scanner.hdr, RADIO_TICKER_ID_SCAN,
   1645c:	462a      	mov	r2, r5
   1645e:	2106      	movs	r1, #6
   16460:	f104 00cc 	add.w	r0, r4, #204	; 0xcc
   16464:	f7ff fd94 	bl	15f90 <preempt_calc>
   16468:	2800      	cmp	r0, #0
   1646a:	d15d      	bne.n	16528 <event_scan+0x188>
				     _radio.scanner.ticks_window +
   1646c:	4b34      	ldr	r3, [pc, #208]	; (16540 <event_scan+0x1a0>)
   1646e:	f8d3 30ec 	ldr.w	r3, [r3, #236]	; 0xec
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16472:	3309      	adds	r3, #9
		ticker_status =
   16474:	f641 0287 	movw	r2, #6279	; 0x1887
   16478:	9208      	str	r2, [sp, #32]
   1647a:	4a32      	ldr	r2, [pc, #200]	; (16544 <event_scan+0x1a4>)
   1647c:	9207      	str	r2, [sp, #28]
   1647e:	2204      	movs	r2, #4
   16480:	9206      	str	r2, [sp, #24]
   16482:	4931      	ldr	r1, [pc, #196]	; (16548 <event_scan+0x1a8>)
   16484:	9105      	str	r1, [sp, #20]
   16486:	2000      	movs	r0, #0
   16488:	9004      	str	r0, [sp, #16]
   1648a:	9003      	str	r0, [sp, #12]
   1648c:	9002      	str	r0, [sp, #8]
   1648e:	9001      	str	r0, [sp, #4]
   16490:	9300      	str	r3, [sp, #0]
   16492:	462b      	mov	r3, r5
   16494:	4601      	mov	r1, r0
   16496:	f7f9 ff67 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1649a:	b108      	cbz	r0, 164a0 <event_scan+0x100>
   1649c:	2802      	cmp	r0, #2
   1649e:	d149      	bne.n	16534 <event_scan+0x194>
			ticker_status =
   164a0:	2300      	movs	r3, #0
   164a2:	4a2a      	ldr	r2, [pc, #168]	; (1654c <event_scan+0x1ac>)
   164a4:	4619      	mov	r1, r3
   164a6:	4618      	mov	r0, r3
   164a8:	f7fa f87a 	bl	105a0 <ticker_job_idle_get>
			LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   164ac:	2800      	cmp	r0, #0
   164ae:	d03f      	beq.n	16530 <event_scan+0x190>
   164b0:	2802      	cmp	r0, #2
   164b2:	d03d      	beq.n	16530 <event_scan+0x190>
   164b4:	4040      	eors	r0, r0
   164b6:	f380 8811 	msr	BASEPRI, r0
   164ba:	f04f 0004 	mov.w	r0, #4
   164be:	df02      	svc	2
	LL_ASSERT(_radio.role == ROLE_NONE);
   164c0:	4040      	eors	r0, r0
   164c2:	f380 8811 	msr	BASEPRI, r0
   164c6:	f04f 0004 	mov.w	r0, #4
   164ca:	df02      	svc	2
	LL_ASSERT(_radio.ticker_id_prepare == RADIO_TICKER_ID_SCAN);
   164cc:	4040      	eors	r0, r0
   164ce:	f380 8811 	msr	BASEPRI, r0
   164d2:	f04f 0004 	mov.w	r0, #4
   164d6:	df02      	svc	2
		_radio.scanner.chan = 0;
   164d8:	f894 20dc 	ldrb.w	r2, [r4, #220]	; 0xdc
   164dc:	f36f 0283 	bfc	r2, #2, #2
   164e0:	f884 20dc 	strb.w	r2, [r4, #220]	; 0xdc
   164e4:	e792      	b.n	1640c <event_scan+0x6c>
			ctrl_filter_get(!!(_radio.scanner.filter_policy & 0x1));
   164e6:	4b16      	ldr	r3, [pc, #88]	; (16540 <event_scan+0x1a0>)
   164e8:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
		struct ll_filter *filter =
   164ec:	f3c0 1000 	ubfx	r0, r0, #4, #1
   164f0:	f002 fdda 	bl	190a8 <ctrl_filter_get>
   164f4:	4604      	mov	r4, r0
		u8_t count, *irks = ctrl_irks_get(&count);
   164f6:	f10d 002f 	add.w	r0, sp, #47	; 0x2f
   164fa:	f002 fd4f 	bl	18f9c <ctrl_irks_get>
   164fe:	4606      	mov	r6, r0
		radio_filter_configure(filter->enable_bitmask,
   16500:	1ca2      	adds	r2, r4, #2
   16502:	7861      	ldrb	r1, [r4, #1]
   16504:	7820      	ldrb	r0, [r4, #0]
   16506:	f7f8 fd03 	bl	ef10 <radio_filter_configure>
		radio_ar_configure(count, irks);
   1650a:	4631      	mov	r1, r6
   1650c:	f89d 002f 	ldrb.w	r0, [sp, #47]	; 0x2f
   16510:	f7f8 feda 	bl	f2c8 <radio_ar_configure>
   16514:	e799      	b.n	1644a <event_scan+0xaa>
		struct ll_filter *wl = ctrl_filter_get(true);
   16516:	2001      	movs	r0, #1
   16518:	f002 fdc6 	bl	190a8 <ctrl_filter_get>
		radio_filter_configure(wl->enable_bitmask,
   1651c:	1c82      	adds	r2, r0, #2
   1651e:	7841      	ldrb	r1, [r0, #1]
   16520:	7800      	ldrb	r0, [r0, #0]
   16522:	f7f8 fcf5 	bl	ef10 <radio_filter_configure>
   16526:	e790      	b.n	1644a <event_scan+0xaa>
		_radio.state = STATE_STOP;
   16528:	2204      	movs	r2, #4
   1652a:	7422      	strb	r2, [r4, #16]
		radio_disable();
   1652c:	f7f8 fc60 	bl	edf0 <radio_disable>
}
   16530:	b00c      	add	sp, #48	; 0x30
   16532:	bd70      	pop	{r4, r5, r6, pc}
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16534:	4040      	eors	r0, r0
   16536:	f380 8811 	msr	BASEPRI, r0
   1653a:	f04f 0004 	mov.w	r0, #4
   1653e:	df02      	svc	2
   16540:	20000f84 	.word	0x20000f84
   16544:	000110bd 	.word	0x000110bd
   16548:	000118a1 	.word	0x000118a1
   1654c:	00011579 	.word	0x00011579

00016550 <access_addr_get>:
{
   16550:	b5f0      	push	{r4, r5, r6, r7, lr}
   16552:	b083      	sub	sp, #12
	retry = 3;
   16554:	2403      	movs	r4, #3
   16556:	e059      	b.n	1660c <access_addr_get+0xbc>
	LL_ASSERT(retry);
   16558:	4040      	eors	r0, r0
   1655a:	f380 8811 	msr	BASEPRI, r0
   1655e:	f04f 0004 	mov.w	r0, #4
   16562:	df02      	svc	2
	consecutive_bit = (access_addr >> bit_idx) & 0x01;
   16564:	9900      	ldr	r1, [sp, #0]
   16566:	0fc9      	lsrs	r1, r1, #31
	transitions = 0;
   16568:	4607      	mov	r7, r0
	bit_idx = 31;
   1656a:	221f      	movs	r2, #31
	consecutive_cnt = 1;
   1656c:	2501      	movs	r5, #1
	while (bit_idx--) {
   1656e:	e010      	b.n	16592 <access_addr_get+0x42>
			consecutive_cnt++;
   16570:	3501      	adds	r5, #1
   16572:	b2ed      	uxtb	r5, r5
   16574:	e01c      	b.n	165b0 <access_addr_get+0x60>
		    ((bit_idx < 28) && (transitions < 1)) ||
   16576:	b9ff      	cbnz	r7, 165b8 <access_addr_get+0x68>
			if (consecutive_bit) {
   16578:	b319      	cbz	r1, 165c2 <access_addr_get+0x72>
				access_addr &= ~BIT(bit_idx);
   1657a:	2201      	movs	r2, #1
   1657c:	409a      	lsls	r2, r3
   1657e:	ea26 0602 	bic.w	r6, r6, r2
   16582:	9600      	str	r6, [sp, #0]
				consecutive_bit = 0;
   16584:	4601      	mov	r1, r0
			transitions++;
   16586:	3701      	adds	r7, #1
   16588:	b2ff      	uxtb	r7, r7
			consecutive_cnt = 1;
   1658a:	2501      	movs	r5, #1
	while (bit_idx--) {
   1658c:	461a      	mov	r2, r3
		if (transitions > 24) {
   1658e:	2f18      	cmp	r7, #24
   16590:	d81d      	bhi.n	165ce <access_addr_get+0x7e>
	while (bit_idx--) {
   16592:	1e53      	subs	r3, r2, #1
   16594:	b2db      	uxtb	r3, r3
   16596:	b32a      	cbz	r2, 165e4 <access_addr_get+0x94>
		bit = (access_addr >> bit_idx) & 0x01;
   16598:	9e00      	ldr	r6, [sp, #0]
   1659a:	469e      	mov	lr, r3
   1659c:	fa26 f203 	lsr.w	r2, r6, r3
   165a0:	f002 0201 	and.w	r2, r2, #1
		if (bit == consecutive_bit) {
   165a4:	4291      	cmp	r1, r2
   165a6:	d0e3      	beq.n	16570 <access_addr_get+0x20>
			transitions++;
   165a8:	3701      	adds	r7, #1
   165aa:	b2ff      	uxtb	r7, r7
			consecutive_bit = bit;
   165ac:	4611      	mov	r1, r2
			consecutive_cnt = 1;
   165ae:	2501      	movs	r5, #1
		if ((consecutive_cnt > 6) ||
   165b0:	2d06      	cmp	r5, #6
   165b2:	d8e1      	bhi.n	16578 <access_addr_get+0x28>
   165b4:	2b1b      	cmp	r3, #27
   165b6:	d9de      	bls.n	16576 <access_addr_get+0x26>
		    ((bit_idx < 28) && (transitions < 1)) ||
   165b8:	2b1a      	cmp	r3, #26
   165ba:	d8e7      	bhi.n	1658c <access_addr_get+0x3c>
		    ((bit_idx < 27) && (transitions < 2))) {
   165bc:	2f01      	cmp	r7, #1
   165be:	d8e5      	bhi.n	1658c <access_addr_get+0x3c>
   165c0:	e7da      	b.n	16578 <access_addr_get+0x28>
				access_addr |= BIT(bit_idx);
   165c2:	2101      	movs	r1, #1
   165c4:	fa01 f203 	lsl.w	r2, r1, r3
   165c8:	4316      	orrs	r6, r2
   165ca:	9600      	str	r6, [sp, #0]
   165cc:	e7db      	b.n	16586 <access_addr_get+0x36>
			if (consecutive_bit) {
   165ce:	2900      	cmp	r1, #0
   165d0:	d02d      	beq.n	1662e <access_addr_get+0xde>
				access_addr &= ~(BIT(bit_idx + 1) - 1);
   165d2:	f10e 0e01 	add.w	lr, lr, #1
   165d6:	2301      	movs	r3, #1
   165d8:	fa03 f30e 	lsl.w	r3, r3, lr
   165dc:	425b      	negs	r3, r3
   165de:	9a00      	ldr	r2, [sp, #0]
   165e0:	4013      	ands	r3, r2
   165e2:	9300      	str	r3, [sp, #0]
	adv_aa_check = access_addr ^ 0x8e89bed6;
   165e4:	4b19      	ldr	r3, [pc, #100]	; (1664c <access_addr_get+0xfc>)
   165e6:	9a00      	ldr	r2, [sp, #0]
   165e8:	4053      	eors	r3, r2
   165ea:	a802      	add	r0, sp, #8
   165ec:	f840 3d04 	str.w	r3, [r0, #-4]!
	if (util_ones_count_get((u8_t *)&adv_aa_check,
   165f0:	2104      	movs	r1, #4
   165f2:	f7f8 fa6c 	bl	eace <util_ones_count_get>
   165f6:	2801      	cmp	r0, #1
   165f8:	d908      	bls.n	1660c <access_addr_get+0xbc>
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   165fa:	9800      	ldr	r0, [sp, #0]
   165fc:	b283      	uxth	r3, r0
   165fe:	ebb3 4f10 	cmp.w	r3, r0, lsr #16
   16602:	d120      	bne.n	16646 <access_addr_get+0xf6>
	    !((access_addr & 0xFF) ^ (access_addr >> 24))) {
   16604:	b2c3      	uxtb	r3, r0
	if (!((access_addr & 0xFFFF) ^ (access_addr >> 16)) &&
   16606:	ebb3 6f10 	cmp.w	r3, r0, lsr #24
   1660a:	d11c      	bne.n	16646 <access_addr_get+0xf6>
	LL_ASSERT(retry);
   1660c:	2c00      	cmp	r4, #0
   1660e:	d0a3      	beq.n	16558 <access_addr_get+0x8>
	retry--;
   16610:	3c01      	subs	r4, #1
   16612:	b2e4      	uxtb	r4, r4
	len = sizeof(u32_t);
   16614:	2004      	movs	r0, #4
	while (len) {
   16616:	2800      	cmp	r0, #0
   16618:	d0a4      	beq.n	16564 <access_addr_get+0x14>
		len = rand_get(len, (u8_t *)&access_addr);
   1661a:	4669      	mov	r1, sp
   1661c:	f7f9 fc1c 	bl	fe58 <rand_get>
   16620:	b2c0      	uxtb	r0, r0
		if (len) {
   16622:	2800      	cmp	r0, #0
   16624:	d0f7      	beq.n	16616 <access_addr_get+0xc6>
   16626:	bf20      	wfe
  __ASM volatile ("sev");
   16628:	bf40      	sev
  __ASM volatile ("wfe");
   1662a:	bf20      	wfe
   1662c:	e7f3      	b.n	16616 <access_addr_get+0xc6>
				access_addr |= (BIT(bit_idx + 1) - 1);
   1662e:	f10e 0e01 	add.w	lr, lr, #1
   16632:	2301      	movs	r3, #1
   16634:	fa03 fe0e 	lsl.w	lr, r3, lr
   16638:	f10e 3eff 	add.w	lr, lr, #4294967295	; 0xffffffff
   1663c:	9b00      	ldr	r3, [sp, #0]
   1663e:	ea43 030e 	orr.w	r3, r3, lr
   16642:	9300      	str	r3, [sp, #0]
   16644:	e7ce      	b.n	165e4 <access_addr_get+0x94>
}
   16646:	b003      	add	sp, #12
   16648:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1664a:	bf00      	nop
   1664c:	8e89bed6 	.word	0x8e89bed6

00016650 <isr_rx_scan>:
{
   16650:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16654:	b08f      	sub	sp, #60	; 0x3c
   16656:	4617      	mov	r7, r2
   16658:	f89d 5060 	ldrb.w	r5, [sp, #96]	; 0x60
   1665c:	f89d 6064 	ldrb.w	r6, [sp, #100]	; 0x64
		_radio.packet_rx[_radio.packet_rx_last]->pdu_data;
   16660:	4b99      	ldr	r3, [pc, #612]	; (168c8 <isr_rx_scan+0x278>)
   16662:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16666:	f893 113d 	ldrb.w	r1, [r3, #317]	; 0x13d
   1666a:	f852 4021 	ldr.w	r4, [r2, r1, lsl #2]
	pdu_adv_rx = (struct pdu_adv *)
   1666e:	f104 0808 	add.w	r8, r4, #8
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   16672:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16676:	b15b      	cbz	r3, 16690 <isr_rx_scan+0x40>
   16678:	4b93      	ldr	r3, [pc, #588]	; (168c8 <isr_rx_scan+0x278>)
   1667a:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
   1667e:	b34b      	cbz	r3, 166d4 <isr_rx_scan+0x84>
				      (_radio.fc_req == _radio.fc_ack)) &&
   16680:	4a91      	ldr	r2, [pc, #580]	; (168c8 <isr_rx_scan+0x278>)
   16682:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   16686:	b2db      	uxtb	r3, r3
   16688:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
	if ((_radio.scanner.conn) && ((_radio.fc_ena == 0) ||
   1668c:	4293      	cmp	r3, r2
   1668e:	d021      	beq.n	166d4 <isr_rx_scan+0x84>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   16690:	7a23      	ldrb	r3, [r4, #8]
   16692:	f013 030f 	ands.w	r3, r3, #15
   16696:	f000 82e9 	beq.w	16c6c <isr_rx_scan+0x61c>
   1669a:	2b06      	cmp	r3, #6
   1669c:	f000 82e6 	beq.w	16c6c <isr_rx_scan+0x61c>
	else if (((pdu_adv_rx->type == PDU_ADV_TYPE_ADV_IND) ||
   166a0:	2b00      	cmp	r3, #0
   166a2:	f000 83d9 	beq.w	16e58 <isr_rx_scan+0x808>
   166a6:	2b01      	cmp	r3, #1
   166a8:	f000 8355 	beq.w	16d56 <isr_rx_scan+0x706>
	bool dir_report = false;
   166ac:	f04f 0900 	mov.w	r9, #0
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   166b0:	7a23      	ldrb	r3, [r4, #8]
   166b2:	f003 030f 	and.w	r3, r3, #15
					&dir_report))) ||
   166b6:	2b02      	cmp	r3, #2
   166b8:	f000 83d0 	beq.w	16e5c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_NONCONN_IND) ||
   166bc:	2b06      	cmp	r3, #6
   166be:	f000 83cd 	beq.w	16e5c <isr_rx_scan+0x80c>
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND) ||
   166c2:	2b07      	cmp	r3, #7
   166c4:	f000 839f 	beq.w	16e06 <isr_rx_scan+0x7b6>
		   (_radio.scanner.phy)) ||
   166c8:	2b04      	cmp	r3, #4
   166ca:	f000 83a3 	beq.w	16e14 <isr_rx_scan+0x7c4>
		return 1;
   166ce:	f04f 0a01 	mov.w	sl, #1
   166d2:	e3cb      	b.n	16e6c <isr_rx_scan+0x81c>
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   166d4:	4b7c      	ldr	r3, [pc, #496]	; (168c8 <isr_rx_scan+0x278>)
   166d6:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   166da:	f013 0f10 	tst.w	r3, #16
   166de:	d072      	beq.n	167c6 <isr_rx_scan+0x176>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   166e0:	7a23      	ldrb	r3, [r4, #8]
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   166e2:	f013 030f 	ands.w	r3, r3, #15
   166e6:	f000 80da 	beq.w	1689e <isr_rx_scan+0x24e>
		((pdu->type == PDU_ADV_TYPE_ADV_IND) ||
   166ea:	2b01      	cmp	r3, #1
   166ec:	f000 808f 	beq.w	1680e <isr_rx_scan+0x1be>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   166f0:	2300      	movs	r3, #0
				      (_radio.fc_req == _radio.fc_ack)) &&
   166f2:	2b00      	cmp	r3, #0
   166f4:	d0cc      	beq.n	16690 <isr_rx_scan+0x40>
	    ((radio_tmr_end_get() + 502 + (RADIO_TICKER_JITTER_US << 1)) <
   166f6:	f7f8 fd4d 	bl	f194 <radio_tmr_end_get>
   166fa:	f200 2916 	addw	r9, r0, #534	; 0x216
	     (TICKER_TICKS_TO_US(_radio.scanner.hdr.ticks_slot) -
   166fe:	4b72      	ldr	r3, [pc, #456]	; (168c8 <isr_rx_scan+0x278>)
   16700:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
   16704:	4871      	ldr	r0, [pc, #452]	; (168cc <isr_rx_scan+0x27c>)
   16706:	fba3 0100 	umull	r0, r1, r3, r0
   1670a:	2207      	movs	r2, #7
   1670c:	fb02 1103 	mla	r1, r2, r3, r1
   16710:	a36b      	add	r3, pc, #428	; (adr r3, 168c0 <isr_rx_scan+0x270>)
   16712:	e9d3 2300 	ldrd	r2, r3, [r3]
   16716:	f7ea f861 	bl	7dc <__aeabi_uldivmod>
   1671a:	f5a0 7096 	sub.w	r0, r0, #300	; 0x12c
	    isr_scan_init_check(pdu_adv_rx, rl_idx) &&
   1671e:	4581      	cmp	r9, r0
   16720:	d2b6      	bcs.n	16690 <isr_rx_scan+0x40>
	if (_radio.packet_rx_acquire >=
   16722:	4b69      	ldr	r3, [pc, #420]	; (168c8 <isr_rx_scan+0x278>)
   16724:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16728:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1672c:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   1672e:	429a      	cmp	r2, r3
   16730:	f0c0 80b7 	bcc.w	168a2 <isr_rx_scan+0x252>
			_radio.packet_rx_last);
   16734:	4b64      	ldr	r3, [pc, #400]	; (168c8 <isr_rx_scan+0x278>)
   16736:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1673a:	1ad3      	subs	r3, r2, r3
   1673c:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   1673e:	2b03      	cmp	r3, #3
   16740:	f240 80b9 	bls.w	168b6 <isr_rx_scan+0x266>
	return _radio.packet_rx[_radio.packet_rx_last];
   16744:	4b60      	ldr	r3, [pc, #384]	; (168c8 <isr_rx_scan+0x278>)
   16746:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1674a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1674e:	f852 9023 	ldr.w	r9, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   16752:	f1b9 0f00 	cmp.w	r9, #0
   16756:	f000 839a 	beq.w	16e8e <isr_rx_scan+0x83e>
		_radio.state = STATE_STOP;
   1675a:	f8df a16c 	ldr.w	sl, [pc, #364]	; 168c8 <isr_rx_scan+0x278>
   1675e:	2304      	movs	r3, #4
   16760:	f88a 3010 	strb.w	r3, [sl, #16]
		conn = _radio.scanner.conn;
   16764:	f8da 80fc 	ldr.w	r8, [sl, #252]	; 0xfc
		_radio.scanner.conn = NULL;
   16768:	2300      	movs	r3, #0
   1676a:	f8ca 30fc 	str.w	r3, [sl, #252]	; 0xfc
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   1676e:	f7f8 fb91 	bl	ee94 <radio_pkt_scratch_get>
   16772:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_CONNECT_IND;
   16774:	7803      	ldrb	r3, [r0, #0]
   16776:	2205      	movs	r2, #5
   16778:	f362 0303 	bfi	r3, r2, #0, #4
			pdu_adv_tx->chan_sel = 1;
   1677c:	b2db      	uxtb	r3, r3
   1677e:	f043 0320 	orr.w	r3, r3, #32
   16782:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16784:	7a23      	ldrb	r3, [r4, #8]
   16786:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1678a:	7802      	ldrb	r2, [r0, #0]
   1678c:	f363 12c7 	bfi	r2, r3, #7, #1
   16790:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_connect_ind);
   16792:	2322      	movs	r3, #34	; 0x22
   16794:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16796:	4628      	mov	r0, r5
   16798:	f002 fbde 	bl	18f58 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   1679c:	f89a 30de 	ldrb.w	r3, [sl, #222]	; 0xde
   167a0:	f013 0f01 	tst.w	r3, #1
   167a4:	f000 8098 	beq.w	168d8 <isr_rx_scan+0x288>
   167a8:	2800      	cmp	r0, #0
   167aa:	f000 8095 	beq.w	168d8 <isr_rx_scan+0x288>
			pdu_adv_tx->tx_addr = 1;
   167ae:	7832      	ldrb	r2, [r6, #0]
   167b0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   167b4:	4633      	mov	r3, r6
   167b6:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   167ba:	2206      	movs	r2, #6
   167bc:	4601      	mov	r1, r0
   167be:	4618      	mov	r0, r3
   167c0:	f7e9 fd7e 	bl	2c0 <memcpy>
   167c4:	e096      	b.n	168f4 <isr_rx_scan+0x2a4>
	if (rl_idx != FILTER_IDX_NONE) {
   167c6:	2dff      	cmp	r5, #255	; 0xff
   167c8:	d00a      	beq.n	167e0 <isr_rx_scan+0x190>
		return (rl_idx == _radio.scanner.rl_idx);
   167ca:	4b3f      	ldr	r3, [pc, #252]	; (168c8 <isr_rx_scan+0x278>)
   167cc:	f893 30df 	ldrb.w	r3, [r3, #223]	; 0xdf
   167d0:	429d      	cmp	r5, r3
   167d2:	bf14      	ite	ne
   167d4:	2300      	movne	r3, #0
   167d6:	2301      	moveq	r3, #1
	return ((((_radio.scanner.filter_policy & 0x01) != 0) ||
   167d8:	2b00      	cmp	r3, #0
   167da:	d181      	bne.n	166e0 <isr_rx_scan+0x90>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   167dc:	2300      	movs	r3, #0
   167de:	e788      	b.n	166f2 <isr_rx_scan+0xa2>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   167e0:	4b39      	ldr	r3, [pc, #228]	; (168c8 <isr_rx_scan+0x278>)
   167e2:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   167e6:	f3c2 1280 	ubfx	r2, r2, #6, #1
   167ea:	7a23      	ldrb	r3, [r4, #8]
   167ec:	f3c3 1380 	ubfx	r3, r3, #6, #1
   167f0:	429a      	cmp	r2, r3
   167f2:	d001      	beq.n	167f8 <isr_rx_scan+0x1a8>
   167f4:	2300      	movs	r3, #0
   167f6:	e7ef      	b.n	167d8 <isr_rx_scan+0x188>
		(memcmp(&_radio.scanner.adv_addr[0],
   167f8:	2206      	movs	r2, #6
   167fa:	f108 0102 	add.w	r1, r8, #2
   167fe:	4834      	ldr	r0, [pc, #208]	; (168d0 <isr_rx_scan+0x280>)
   16800:	f013 f836 	bl	29870 <memcmp>
	return ((_radio.scanner.adv_addr_type == pdu->tx_addr) &&
   16804:	b908      	cbnz	r0, 1680a <isr_rx_scan+0x1ba>
   16806:	2301      	movs	r3, #1
   16808:	e7e6      	b.n	167d8 <isr_rx_scan+0x188>
   1680a:	2300      	movs	r3, #0
   1680c:	e7e4      	b.n	167d8 <isr_rx_scan+0x188>
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   1680e:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16810:	f108 0a08 	add.w	sl, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16814:	462a      	mov	r2, r5
   16816:	4651      	mov	r1, sl
   16818:	09c0      	lsrs	r0, r0, #7
   1681a:	f002 fe17 	bl	1944c <ctrl_rl_addr_resolve>
   1681e:	4681      	mov	r9, r0
   16820:	b9d0      	cbnz	r0, 16858 <isr_rx_scan+0x208>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   16822:	4b29      	ldr	r3, [pc, #164]	; (168c8 <isr_rx_scan+0x278>)
   16824:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16828:	f013 0f01 	tst.w	r3, #1
   1682c:	d119      	bne.n	16862 <isr_rx_scan+0x212>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   1682e:	4b26      	ldr	r3, [pc, #152]	; (168c8 <isr_rx_scan+0x278>)
   16830:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16834:	7a23      	ldrb	r3, [r4, #8]
   16836:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16838:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1683c:	d017      	beq.n	1686e <isr_rx_scan+0x21e>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   1683e:	4b22      	ldr	r3, [pc, #136]	; (168c8 <isr_rx_scan+0x278>)
   16840:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16844:	f013 0f20 	tst.w	r3, #32
   16848:	d003      	beq.n	16852 <isr_rx_scan+0x202>
   1684a:	f994 3008 	ldrsb.w	r3, [r4, #8]
   1684e:	2b00      	cmp	r3, #0
   16850:	db17      	blt.n	16882 <isr_rx_scan+0x232>
			BDADDR_SIZE) == 0))) ||
   16852:	f1b9 0f00 	cmp.w	r9, #0
   16856:	d11d      	bne.n	16894 <isr_rx_scan+0x244>
		((pdu->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16858:	f1b9 0f00 	cmp.w	r9, #0
   1685c:	d01d      	beq.n	1689a <isr_rx_scan+0x24a>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1685e:	2301      	movs	r3, #1
   16860:	e747      	b.n	166f2 <isr_rx_scan+0xa2>
	} else if (init && _radio.scanner.rpa_gen && ctrl_lrpa_get(rl_idx)) {
   16862:	4628      	mov	r0, r5
   16864:	f002 fb78 	bl	18f58 <ctrl_lrpa_get>
   16868:	2800      	cmp	r0, #0
   1686a:	d1f5      	bne.n	16858 <isr_rx_scan+0x208>
   1686c:	e7df      	b.n	1682e <isr_rx_scan+0x1de>
		(memcmp(&_radio.scanner.init_addr[0],
   1686e:	2206      	movs	r2, #6
   16870:	4651      	mov	r1, sl
   16872:	4818      	ldr	r0, [pc, #96]	; (168d4 <isr_rx_scan+0x284>)
   16874:	f012 fffc 	bl	29870 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16878:	2800      	cmp	r0, #0
   1687a:	d1e0      	bne.n	1683e <isr_rx_scan+0x1ee>
			BDADDR_SIZE) == 0))) ||
   1687c:	f04f 0901 	mov.w	r9, #1
   16880:	e7ea      	b.n	16858 <isr_rx_scan+0x208>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16882:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16886:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   1688a:	2b40      	cmp	r3, #64	; 0x40
   1688c:	d1e1      	bne.n	16852 <isr_rx_scan+0x202>
		return true;
   1688e:	f04f 0901 	mov.w	r9, #1
   16892:	e7de      	b.n	16852 <isr_rx_scan+0x202>
			BDADDR_SIZE) == 0))) ||
   16894:	f04f 0901 	mov.w	r9, #1
   16898:	e7de      	b.n	16858 <isr_rx_scan+0x208>
		isr_scan_init_adva_check(pdu, rl_idx)) &&
   1689a:	2300      	movs	r3, #0
   1689c:	e729      	b.n	166f2 <isr_rx_scan+0xa2>
   1689e:	2301      	movs	r3, #1
   168a0:	e727      	b.n	166f2 <isr_rx_scan+0xa2>
		return (_radio.packet_rx_count -
   168a2:	4909      	ldr	r1, [pc, #36]	; (168c8 <isr_rx_scan+0x278>)
   168a4:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   168a8:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   168ac:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   168ae:	fa52 f383 	uxtab	r3, r2, r3
   168b2:	b2db      	uxtb	r3, r3
   168b4:	e743      	b.n	1673e <isr_rx_scan+0xee>
		return 0;
   168b6:	f04f 0900 	mov.w	r9, #0
   168ba:	e74a      	b.n	16752 <isr_rx_scan+0x102>
   168bc:	f3af 8000 	nop.w
   168c0:	3b9aca00 	.word	0x3b9aca00
   168c4:	00000000 	.word	0x00000000
   168c8:	20000f84 	.word	0x20000f84
   168cc:	1afd498d 	.word	0x1afd498d
   168d0:	2000106a 	.word	0x2000106a
   168d4:	20001064 	.word	0x20001064
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   168d8:	4962      	ldr	r1, [pc, #392]	; (16a64 <isr_rx_scan+0x414>)
   168da:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   168de:	09db      	lsrs	r3, r3, #7
   168e0:	7832      	ldrb	r2, [r6, #0]
   168e2:	f363 1286 	bfi	r2, r3, #6, #1
   168e6:	4630      	mov	r0, r6
   168e8:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.connect_ind.init_addr[0],
   168ec:	2206      	movs	r2, #6
   168ee:	31e0      	adds	r1, #224	; 0xe0
   168f0:	f7e9 fce6 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.adv_addr[0],
   168f4:	f106 0308 	add.w	r3, r6, #8
   168f8:	930b      	str	r3, [sp, #44]	; 0x2c
   168fa:	2206      	movs	r2, #6
   168fc:	f104 010a 	add.w	r1, r4, #10
   16900:	4618      	mov	r0, r3
   16902:	f7e9 fcdd 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.
   16906:	2204      	movs	r2, #4
   16908:	f108 0110 	add.w	r1, r8, #16
   1690c:	f106 000e 	add.w	r0, r6, #14
   16910:	f7e9 fcd6 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.crc_init[0],
   16914:	2203      	movs	r2, #3
   16916:	f108 0114 	add.w	r1, r8, #20
   1691a:	f106 0012 	add.w	r0, r6, #18
   1691e:	f7e9 fccf 	bl	2c0 <memcpy>
		pdu_adv_tx->payload.connect_ind.lldata.win_size = 1;
   16922:	2301      	movs	r3, #1
   16924:	7573      	strb	r3, [r6, #21]
			(u32_t)_radio.scanner.conn_interval * 1250;
   16926:	4b4f      	ldr	r3, [pc, #316]	; (16a64 <isr_rx_scan+0x414>)
   16928:	f8b3 30f0 	ldrh.w	r3, [r3, #240]	; 0xf0
		conn_interval_us =
   1692c:	f240 42e2 	movw	r2, #1250	; 0x4e2
   16930:	fb02 fb03 	mul.w	fp, r2, r3
		conn_offset_us = radio_tmr_end_get() + 502 + 1250;
   16934:	f7f8 fc2e 	bl	f194 <radio_tmr_end_get>
   16938:	f500 6adb 	add.w	sl, r0, #1752	; 0x6d8
		if (!_radio.remainder_anchor ||
   1693c:	4b49      	ldr	r3, [pc, #292]	; (16a64 <isr_rx_scan+0x414>)
   1693e:	689b      	ldr	r3, [r3, #8]
   16940:	2b00      	cmp	r3, #0
   16942:	dd75      	ble.n	16a30 <isr_rx_scan+0x3e0>
		if (_radio.scanner.win_offset_us == 0) {
   16944:	4b47      	ldr	r3, [pc, #284]	; (16a64 <isr_rx_scan+0x414>)
   16946:	f8d3 3100 	ldr.w	r3, [r3, #256]	; 0x100
   1694a:	2b00      	cmp	r3, #0
   1694c:	d174      	bne.n	16a38 <isr_rx_scan+0x3e8>
			pdu_adv_tx->payload.connect_ind.lldata.win_offset = 0;
   1694e:	75b3      	strb	r3, [r6, #22]
   16950:	75f3      	strb	r3, [r6, #23]
		conn_space_us -= radio_tx_ready_delay_get(0, 0);
   16952:	2100      	movs	r1, #0
   16954:	4608      	mov	r0, r1
   16956:	f7f8 fa33 	bl	edc0 <radio_tx_ready_delay_get>
   1695a:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us -= radio_tx_chain_delay_get(0, 0);
   1695e:	2100      	movs	r1, #0
   16960:	4608      	mov	r0, r1
   16962:	f7f8 fa2f 	bl	edc4 <radio_tx_chain_delay_get>
   16966:	ebaa 0a00 	sub.w	sl, sl, r0
		conn_space_us += TICKER_TICKS_TO_US(1);
   1696a:	f10a 031e 	add.w	r3, sl, #30
   1696e:	930c      	str	r3, [sp, #48]	; 0x30
			_radio.scanner.conn_interval;
   16970:	f8df a0f0 	ldr.w	sl, [pc, #240]	; 16a64 <isr_rx_scan+0x414>
		pdu_adv_tx->payload.connect_ind.lldata.interval =
   16974:	f8ba 30f0 	ldrh.w	r3, [sl, #240]	; 0xf0
   16978:	8333      	strh	r3, [r6, #24]
		pdu_adv_tx->payload.connect_ind.lldata.latency =
   1697a:	f8ba 30f2 	ldrh.w	r3, [sl, #242]	; 0xf2
   1697e:	8373      	strh	r3, [r6, #26]
		pdu_adv_tx->payload.connect_ind.lldata.timeout =
   16980:	f8ba 30f4 	ldrh.w	r3, [sl, #244]	; 0xf4
   16984:	83b3      	strh	r3, [r6, #28]
		memcpy(&pdu_adv_tx->payload.connect_ind.lldata.chan_map[0],
   16986:	2205      	movs	r2, #5
   16988:	f108 0117 	add.w	r1, r8, #23
   1698c:	f106 001e 	add.w	r0, r6, #30
   16990:	f7e9 fc96 	bl	2c0 <memcpy>
			conn->data_chan_hop;
   16994:	f898 201e 	ldrb.w	r2, [r8, #30]
		pdu_adv_tx->payload.connect_ind.lldata.hop =
   16998:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   1699c:	f362 0304 	bfi	r3, r2, #0, #5
   169a0:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		pdu_adv_tx->payload.connect_ind.lldata.sca = _radio.sca;
   169a4:	f89a 211c 	ldrb.w	r2, [sl, #284]	; 0x11c
   169a8:	b2db      	uxtb	r3, r3
   169aa:	f362 1347 	bfi	r3, r2, #5, #3
   169ae:	f886 3023 	strb.w	r3, [r6, #35]	; 0x23
		radio_switch_complete_and_disable();
   169b2:	f7f8 fa83 	bl	eebc <radio_switch_complete_and_disable>
		radio_pkt_tx_set(pdu_adv_tx);
   169b6:	4630      	mov	r0, r6
   169b8:	f7f8 f9fc 	bl	edb4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   169bc:	f7f8 fa32 	bl	ee24 <radio_is_ready>
   169c0:	4682      	mov	sl, r0
   169c2:	2800      	cmp	r0, #0
   169c4:	d148      	bne.n	16a58 <isr_rx_scan+0x408>
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   169c6:	f44f 72aa 	mov.w	r2, #340	; 0x154
   169ca:	4b26      	ldr	r3, [pc, #152]	; (16a64 <isr_rx_scan+0x414>)
   169cc:	f8d3 1104 	ldr.w	r1, [r3, #260]	; 0x104
   169d0:	4640      	mov	r0, r8
   169d2:	f7f8 f838 	bl	ea46 <mem_index_get>
   169d6:	f8a8 0020 	strh.w	r0, [r8, #32]
		radio_pdu_node_rx->hdr.handle = conn->handle;
   169da:	f8a9 0006 	strh.w	r0, [r9, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   169de:	2206      	movs	r2, #6
   169e0:	f889 2004 	strb.w	r2, [r9, #4]
		radio_le_conn_cmplt->status = 0x00;
   169e4:	2300      	movs	r3, #0
   169e6:	f889 300b 	strb.w	r3, [r9, #11]
		radio_le_conn_cmplt->role = 0x00;
   169ea:	f889 300c 	strb.w	r3, [r9, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv_tx->tx_addr;
   169ee:	4631      	mov	r1, r6
   169f0:	f811 3b02 	ldrb.w	r3, [r1], #2
   169f4:	f3c3 1380 	ubfx	r3, r3, #6, #1
   169f8:	f889 301a 	strb.w	r3, [r9, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   169fc:	f109 001b 	add.w	r0, r9, #27
   16a00:	f7e9 fc5e 	bl	2c0 <memcpy>
		if (irkmatch_ok && rl_idx != FILTER_IDX_NONE) {
   16a04:	b397      	cbz	r7, 16a6c <isr_rx_scan+0x41c>
   16a06:	2dff      	cmp	r5, #255	; 0xff
   16a08:	d030      	beq.n	16a6c <isr_rx_scan+0x41c>
			ll_rl_id_addr_get(rl_idx,
   16a0a:	f109 020e 	add.w	r2, r9, #14
   16a0e:	f109 010d 	add.w	r1, r9, #13
   16a12:	4628      	mov	r0, r5
   16a14:	f002 fc96 	bl	19344 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   16a18:	f899 300d 	ldrb.w	r3, [r9, #13]
   16a1c:	3302      	adds	r3, #2
   16a1e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   16a22:	2206      	movs	r2, #6
   16a24:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16a26:	f109 0014 	add.w	r0, r9, #20
   16a2a:	f7e9 fc49 	bl	2c0 <memcpy>
   16a2e:	e02e      	b.n	16a8e <isr_rx_scan+0x43e>
			conn_offset_us -= TICKER_TICKS_TO_US(1);
   16a30:	f200 6aba 	addw	sl, r0, #1722	; 0x6ba
   16a34:	e786      	b.n	16944 <isr_rx_scan+0x2f4>
				conn_space_us += conn_interval_us;
   16a36:	445b      	add	r3, fp
			while ((conn_space_us & ((u32_t)1 << 31)) ||
   16a38:	2b00      	cmp	r3, #0
   16a3a:	dbfc      	blt.n	16a36 <isr_rx_scan+0x3e6>
   16a3c:	459a      	cmp	sl, r3
   16a3e:	d8fa      	bhi.n	16a36 <isr_rx_scan+0x3e6>
				(conn_space_us - conn_offset_us) / 1250;
   16a40:	eba3 020a 	sub.w	r2, r3, sl
   16a44:	4908      	ldr	r1, [pc, #32]	; (16a68 <isr_rx_scan+0x418>)
   16a46:	fba1 1202 	umull	r1, r2, r1, r2
			pdu_adv_tx->payload.connect_ind.lldata.win_offset =
   16a4a:	0a92      	lsrs	r2, r2, #10
   16a4c:	82f2      	strh	r2, [r6, #22]
			pdu_adv_tx->payload.connect_ind.lldata.win_size++;
   16a4e:	7d72      	ldrb	r2, [r6, #21]
   16a50:	3201      	adds	r2, #1
   16a52:	7572      	strb	r2, [r6, #21]
   16a54:	469a      	mov	sl, r3
   16a56:	e77c      	b.n	16952 <isr_rx_scan+0x302>
		LL_ASSERT(!radio_is_ready());
   16a58:	4040      	eors	r0, r0
   16a5a:	f380 8811 	msr	BASEPRI, r0
   16a5e:	f04f 0004 	mov.w	r0, #4
   16a62:	df02      	svc	2
   16a64:	20000f84 	.word	0x20000f84
   16a68:	d1b71759 	.word	0xd1b71759
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   16a6c:	2206      	movs	r2, #6
   16a6e:	2100      	movs	r1, #0
   16a70:	f109 0014 	add.w	r0, r9, #20
   16a74:	f012 ff90 	bl	29998 <memset>
				pdu_adv_tx->rx_addr;
   16a78:	7833      	ldrb	r3, [r6, #0]
   16a7a:	f3c3 13c0 	ubfx	r3, r3, #7, #1
			radio_le_conn_cmplt->peer_addr_type =
   16a7e:	f889 300d 	strb.w	r3, [r9, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   16a82:	2206      	movs	r2, #6
   16a84:	990b      	ldr	r1, [sp, #44]	; 0x2c
   16a86:	f109 000e 	add.w	r0, r9, #14
   16a8a:	f7e9 fc19 	bl	2c0 <memcpy>
		radio_le_conn_cmplt->interval = _radio.scanner.conn_interval;
   16a8e:	4dce      	ldr	r5, [pc, #824]	; (16dc8 <isr_rx_scan+0x778>)
   16a90:	f8b5 30f0 	ldrh.w	r3, [r5, #240]	; 0xf0
   16a94:	f8a9 3021 	strh.w	r3, [r9, #33]	; 0x21
		radio_le_conn_cmplt->latency = _radio.scanner. conn_latency;
   16a98:	f8b5 30f2 	ldrh.w	r3, [r5, #242]	; 0xf2
   16a9c:	f8a9 3023 	strh.w	r3, [r9, #35]	; 0x23
		radio_le_conn_cmplt->timeout = _radio.scanner.conn_timeout;
   16aa0:	f8b5 30f4 	ldrh.w	r3, [r5, #244]	; 0xf4
   16aa4:	f8a9 3025 	strh.w	r3, [r9, #37]	; 0x25
			pdu_adv_tx->payload.connect_ind.lldata.sca;
   16aa8:	f896 3023 	ldrb.w	r3, [r6, #35]	; 0x23
   16aac:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   16ab0:	f889 3027 	strb.w	r3, [r9, #39]	; 0x27
		rx_fc_lock(conn->handle);
   16ab4:	f8b8 0020 	ldrh.w	r0, [r8, #32]
   16ab8:	f7fa fae2 	bl	11080 <rx_fc_lock>
		packet_rx_enqueue();
   16abc:	f7fc ffca 	bl	13a54 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   16ac0:	f895 113e 	ldrb.w	r1, [r5, #318]	; 0x13e
	    _radio.packet_rx_last) {
   16ac4:	f895 213d 	ldrb.w	r2, [r5, #317]	; 0x13d
   16ac8:	b2d2      	uxtb	r2, r2
	if (_radio.packet_rx_acquire >=
   16aca:	4291      	cmp	r1, r2
   16acc:	f0c0 80b9 	bcc.w	16c42 <isr_rx_scan+0x5f2>
			_radio.packet_rx_last);
   16ad0:	f895 313d 	ldrb.w	r3, [r5, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   16ad4:	1acb      	subs	r3, r1, r3
   16ad6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   16ad8:	2b02      	cmp	r3, #2
   16ada:	f240 80bc 	bls.w	16c56 <isr_rx_scan+0x606>
	return _radio.packet_rx[_radio.packet_rx_last];
   16ade:	4bba      	ldr	r3, [pc, #744]	; (16dc8 <isr_rx_scan+0x778>)
   16ae0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   16ae4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   16ae8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   16aec:	2b00      	cmp	r3, #0
   16aee:	f000 80b4 	beq.w	16c5a <isr_rx_scan+0x60a>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   16af2:	f8b8 2020 	ldrh.w	r2, [r8, #32]
   16af6:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   16af8:	220b      	movs	r2, #11
   16afa:	711a      	strb	r2, [r3, #4]
			if (pdu_adv_rx->chan_sel) {
   16afc:	7a22      	ldrb	r2, [r4, #8]
   16afe:	f012 0f20 	tst.w	r2, #32
   16b02:	f000 80b0 	beq.w	16c66 <isr_rx_scan+0x616>
					((u16_t)conn->access_addr[1] << 8) |
   16b06:	f898 1011 	ldrb.w	r1, [r8, #17]
					conn->access_addr[0];
   16b0a:	f898 2010 	ldrb.w	r2, [r8, #16]
				u16_t aa_ls =
   16b0e:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   16b12:	f898 0013 	ldrb.w	r0, [r8, #19]
					 conn->access_addr[2];
   16b16:	f898 1012 	ldrb.w	r1, [r8, #18]
				u16_t aa_ms =
   16b1a:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   16b1e:	f898 001d 	ldrb.w	r0, [r8, #29]
   16b22:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   16b26:	f888 001d 	strb.w	r0, [r8, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   16b2a:	404a      	eors	r2, r1
   16b2c:	f8a8 201e 	strh.w	r2, [r8, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   16b30:	2201      	movs	r2, #1
   16b32:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   16b34:	f7fc ff8e 	bl	13a54 <packet_rx_enqueue>
		conn->hdr.ticks_slot = _radio.scanner.ticks_conn_slot;
   16b38:	4ea3      	ldr	r6, [pc, #652]	; (16dc8 <isr_rx_scan+0x778>)
   16b3a:	f8d6 30f8 	ldr.w	r3, [r6, #248]	; 0xf8
   16b3e:	f8c8 300c 	str.w	r3, [r8, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   16b42:	f8d6 5180 	ldr.w	r5, [r6, #384]	; 0x180
   16b46:	f8c8 5004 	str.w	r5, [r8, #4]
		conn->hdr.ticks_xtal_to_start =
   16b4a:	2327      	movs	r3, #39	; 0x27
   16b4c:	f8c8 3000 	str.w	r3, [r8]
		conn->hdr.ticks_preempt_to_start =
   16b50:	2400      	movs	r4, #0
   16b52:	f8c8 4008 	str.w	r4, [r8, #8]
		ticks_slot_offset =
   16b56:	429d      	cmp	r5, r3
   16b58:	bf38      	it	cc
   16b5a:	461d      	movcc	r5, r3
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   16b5c:	f44f 63c6 	mov.w	r3, #1584	; 0x630
   16b60:	9300      	str	r3, [sp, #0]
   16b62:	4b9a      	ldr	r3, [pc, #616]	; (16dcc <isr_rx_scan+0x77c>)
   16b64:	2206      	movs	r2, #6
   16b66:	4621      	mov	r1, r4
   16b68:	4620      	mov	r0, r4
   16b6a:	f7f9 fc99 	bl	104a0 <ticker_stop>
		ticker_stop_scan_assert(ticker_status, (void *)__LINE__);
   16b6e:	f240 6131 	movw	r1, #1585	; 0x631
   16b72:	f7fa faed 	bl	11150 <ticker_stop_scan_assert>
		ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   16b76:	9400      	str	r4, [sp, #0]
   16b78:	4623      	mov	r3, r4
   16b7a:	2204      	movs	r2, #4
   16b7c:	4621      	mov	r1, r4
   16b7e:	4620      	mov	r0, r4
   16b80:	f7f9 fc8e 	bl	104a0 <ticker_stop>
				     conn->handle,
   16b84:	f8b8 3020 	ldrh.w	r3, [r8, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16b88:	3307      	adds	r3, #7
   16b8a:	b2db      	uxtb	r3, r3
   16b8c:	930b      	str	r3, [sp, #44]	; 0x2c
				     (_radio.ticks_anchor - ticks_slot_offset),
   16b8e:	6876      	ldr	r6, [r6, #4]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16b90:	1b76      	subs	r6, r6, r5
				     TICKER_US_TO_TICKS(conn_space_us),
   16b92:	4f8f      	ldr	r7, [pc, #572]	; (16dd0 <isr_rx_scan+0x780>)
   16b94:	a38a      	add	r3, pc, #552	; (adr r3, 16dc0 <isr_rx_scan+0x770>)
   16b96:	e9d3 2300 	ldrd	r2, r3, [r3]
   16b9a:	990c      	ldr	r1, [sp, #48]	; 0x30
   16b9c:	fba1 0107 	umull	r0, r1, r1, r7
   16ba0:	f7e9 fe1c 	bl	7dc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16ba4:	f020 497f 	bic.w	r9, r0, #4278190080	; 0xff000000
				     TICKER_US_TO_TICKS(conn_interval_us),
   16ba8:	fbab 1207 	umull	r1, r2, fp, r7
   16bac:	468b      	mov	fp, r1
   16bae:	4694      	mov	ip, r2
   16bb0:	a383      	add	r3, pc, #524	; (adr r3, 16dc0 <isr_rx_scan+0x770>)
   16bb2:	e9d3 2300 	ldrd	r2, r3, [r3]
   16bb6:	e9cd bc0c 	strd	fp, ip, [sp, #48]	; 0x30
   16bba:	4658      	mov	r0, fp
   16bbc:	4661      	mov	r1, ip
   16bbe:	f7e9 fe0d 	bl	7dc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16bc2:	f020 477f 	bic.w	r7, r0, #4278190080	; 0xff000000
				     TICKER_REMAINDER(conn_interval_us),
   16bc6:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   16bca:	2100      	movs	r1, #0
   16bcc:	4a81      	ldr	r2, [pc, #516]	; (16dd4 <isr_rx_scan+0x784>)
   16bce:	2307      	movs	r3, #7
   16bd0:	fb03 f300 	mul.w	r3, r3, r0
   16bd4:	fb02 3301 	mla	r3, r2, r1, r3
   16bd8:	fba0 0102 	umull	r0, r1, r0, r2
   16bdc:	4419      	add	r1, r3
   16bde:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   16be2:	2300      	movs	r3, #0
   16be4:	e9dd bc0c 	ldrd	fp, ip, [sp, #48]	; 0x30
   16be8:	ebbb 0b00 	subs.w	fp, fp, r0
   16bec:	eb6c 0c01 	sbc.w	ip, ip, r1
   16bf0:	4658      	mov	r0, fp
   16bf2:	4661      	mov	r1, ip
   16bf4:	f7e9 fdf2 	bl	7dc <__aeabi_uldivmod>
				     (ticks_slot_offset + conn->hdr.ticks_slot),
   16bf8:	f8d8 300c 	ldr.w	r3, [r8, #12]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   16bfc:	442b      	add	r3, r5
   16bfe:	b29b      	uxth	r3, r3
		ticker_status =
   16c00:	f44f 62c9 	mov.w	r2, #1608	; 0x648
   16c04:	9208      	str	r2, [sp, #32]
   16c06:	4a74      	ldr	r2, [pc, #464]	; (16dd8 <isr_rx_scan+0x788>)
   16c08:	9207      	str	r2, [sp, #28]
   16c0a:	f8cd 8018 	str.w	r8, [sp, #24]
   16c0e:	4a73      	ldr	r2, [pc, #460]	; (16ddc <isr_rx_scan+0x78c>)
   16c10:	9205      	str	r2, [sp, #20]
   16c12:	9304      	str	r3, [sp, #16]
   16c14:	9403      	str	r4, [sp, #12]
   16c16:	9002      	str	r0, [sp, #8]
   16c18:	9701      	str	r7, [sp, #4]
   16c1a:	f8cd 9000 	str.w	r9, [sp]
   16c1e:	4633      	mov	r3, r6
   16c20:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   16c22:	4621      	mov	r1, r4
   16c24:	4620      	mov	r0, r4
   16c26:	f7f9 fb9f 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   16c2a:	2800      	cmp	r0, #0
   16c2c:	f000 8132 	beq.w	16e94 <isr_rx_scan+0x844>
   16c30:	2802      	cmp	r0, #2
   16c32:	f000 811b 	beq.w	16e6c <isr_rx_scan+0x81c>
   16c36:	4040      	eors	r0, r0
   16c38:	f380 8811 	msr	BASEPRI, r0
   16c3c:	f04f 0004 	mov.w	r0, #4
   16c40:	df02      	svc	2
		return (_radio.packet_rx_count -
   16c42:	4a61      	ldr	r2, [pc, #388]	; (16dc8 <isr_rx_scan+0x778>)
   16c44:	f892 313c 	ldrb.w	r3, [r2, #316]	; 0x13c
			_radio.packet_rx_last +
   16c48:	f892 213d 	ldrb.w	r2, [r2, #317]	; 0x13d
		return (_radio.packet_rx_count -
   16c4c:	1a9b      	subs	r3, r3, r2
			_radio.packet_rx_last +
   16c4e:	fa51 f383 	uxtab	r3, r1, r3
   16c52:	b2db      	uxtb	r3, r3
   16c54:	e740      	b.n	16ad8 <isr_rx_scan+0x488>
		return 0;
   16c56:	2300      	movs	r3, #0
   16c58:	e748      	b.n	16aec <isr_rx_scan+0x49c>
			LL_ASSERT(radio_pdu_node_rx);
   16c5a:	4040      	eors	r0, r0
   16c5c:	f380 8811 	msr	BASEPRI, r0
   16c60:	f04f 0004 	mov.w	r0, #4
   16c64:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   16c66:	2200      	movs	r2, #0
   16c68:	72da      	strb	r2, [r3, #11]
   16c6a:	e763      	b.n	16b34 <isr_rx_scan+0x4e4>
		 (_radio.scanner.type != 0) &&
   16c6c:	4a56      	ldr	r2, [pc, #344]	; (16dc8 <isr_rx_scan+0x778>)
   16c6e:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
		  (pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_IND)) &&
   16c72:	f012 0f08 	tst.w	r2, #8
   16c76:	f43f ad13 	beq.w	166a0 <isr_rx_scan+0x50>
		 (_radio.scanner.conn == 0)) {
   16c7a:	4a53      	ldr	r2, [pc, #332]	; (16dc8 <isr_rx_scan+0x778>)
   16c7c:	f8d2 20fc 	ldr.w	r2, [r2, #252]	; 0xfc
		 (_radio.scanner.type != 0) &&
   16c80:	2a00      	cmp	r2, #0
   16c82:	f47f ad0d 	bne.w	166a0 <isr_rx_scan+0x50>
		err = isr_rx_scan_report(rssi_ready,
   16c86:	b37f      	cbz	r7, 16ce8 <isr_rx_scan+0x698>
   16c88:	4629      	mov	r1, r5
   16c8a:	2200      	movs	r2, #0
   16c8c:	4630      	mov	r0, r6
   16c8e:	f7fc ff81 	bl	13b94 <isr_rx_scan_report>
		if (err) {
   16c92:	4682      	mov	sl, r0
   16c94:	2800      	cmp	r0, #0
   16c96:	f040 80e9 	bne.w	16e6c <isr_rx_scan+0x81c>
		pdu_adv_tx = (struct pdu_adv *)radio_pkt_scratch_get();
   16c9a:	f7f8 f8fb 	bl	ee94 <radio_pkt_scratch_get>
   16c9e:	4606      	mov	r6, r0
		pdu_adv_tx->type = PDU_ADV_TYPE_SCAN_REQ;
   16ca0:	7803      	ldrb	r3, [r0, #0]
   16ca2:	2203      	movs	r2, #3
   16ca4:	f362 0303 	bfi	r3, r2, #0, #4
   16ca8:	7003      	strb	r3, [r0, #0]
		pdu_adv_tx->rx_addr = pdu_adv_rx->tx_addr;
   16caa:	7a23      	ldrb	r3, [r4, #8]
   16cac:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16cb0:	7802      	ldrb	r2, [r0, #0]
   16cb2:	f363 12c7 	bfi	r2, r3, #7, #1
   16cb6:	7002      	strb	r2, [r0, #0]
		pdu_adv_tx->len = sizeof(struct pdu_adv_payload_scan_req);
   16cb8:	230c      	movs	r3, #12
   16cba:	7043      	strb	r3, [r0, #1]
		lrpa = ctrl_lrpa_get(rl_idx);
   16cbc:	4628      	mov	r0, r5
   16cbe:	f002 f94b 	bl	18f58 <ctrl_lrpa_get>
		if (_radio.scanner.rpa_gen && lrpa) {
   16cc2:	4b41      	ldr	r3, [pc, #260]	; (16dc8 <isr_rx_scan+0x778>)
   16cc4:	f893 30de 	ldrb.w	r3, [r3, #222]	; 0xde
   16cc8:	f013 0f01 	tst.w	r3, #1
   16ccc:	d00e      	beq.n	16cec <isr_rx_scan+0x69c>
   16cce:	b168      	cbz	r0, 16cec <isr_rx_scan+0x69c>
			pdu_adv_tx->tx_addr = 1;
   16cd0:	7832      	ldrb	r2, [r6, #0]
   16cd2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   16cd6:	4633      	mov	r3, r6
   16cd8:	f803 2b02 	strb.w	r2, [r3], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16cdc:	2206      	movs	r2, #6
   16cde:	4601      	mov	r1, r0
   16ce0:	4618      	mov	r0, r3
   16ce2:	f7e9 faed 	bl	2c0 <memcpy>
   16ce6:	e00f      	b.n	16d08 <isr_rx_scan+0x6b8>
		err = isr_rx_scan_report(rssi_ready,
   16ce8:	21ff      	movs	r1, #255	; 0xff
   16cea:	e7ce      	b.n	16c8a <isr_rx_scan+0x63a>
			pdu_adv_tx->tx_addr = _radio.scanner.init_addr_type;
   16cec:	4936      	ldr	r1, [pc, #216]	; (16dc8 <isr_rx_scan+0x778>)
   16cee:	f891 30dd 	ldrb.w	r3, [r1, #221]	; 0xdd
   16cf2:	09db      	lsrs	r3, r3, #7
   16cf4:	7832      	ldrb	r2, [r6, #0]
   16cf6:	f363 1286 	bfi	r2, r3, #6, #1
   16cfa:	4630      	mov	r0, r6
   16cfc:	f800 2b02 	strb.w	r2, [r0], #2
			memcpy(&pdu_adv_tx->payload.scan_req.scan_addr[0],
   16d00:	2206      	movs	r2, #6
   16d02:	31e0      	adds	r1, #224	; 0xe0
   16d04:	f7e9 fadc 	bl	2c0 <memcpy>
		memcpy(&pdu_adv_tx->payload.scan_req.adv_addr[0],
   16d08:	2206      	movs	r2, #6
   16d0a:	f104 010a 	add.w	r1, r4, #10
   16d0e:	f106 0008 	add.w	r0, r6, #8
   16d12:	f7e9 fad5 	bl	2c0 <memcpy>
		_radio.scanner.state = 1;
   16d16:	4b2c      	ldr	r3, [pc, #176]	; (16dc8 <isr_rx_scan+0x778>)
   16d18:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   16d1c:	f042 0202 	orr.w	r2, r2, #2
   16d20:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		_radio.state = STATE_TX;
   16d24:	2202      	movs	r2, #2
   16d26:	741a      	strb	r2, [r3, #16]
		radio_tmr_tifs_set(RADIO_TIFS);
   16d28:	2096      	movs	r0, #150	; 0x96
   16d2a:	f7f8 f969 	bl	f000 <radio_tmr_tifs_set>
		radio_switch_complete_and_rx(0);
   16d2e:	2000      	movs	r0, #0
   16d30:	f7f8 f8b4 	bl	ee9c <radio_switch_complete_and_rx>
		radio_pkt_tx_set(pdu_adv_tx);
   16d34:	4630      	mov	r0, r6
   16d36:	f7f8 f83d 	bl	edb4 <radio_pkt_tx_set>
		radio_tmr_end_capture();
   16d3a:	f7f8 fa19 	bl	f170 <radio_tmr_end_capture>
		LL_ASSERT(!radio_is_ready());
   16d3e:	f7f8 f871 	bl	ee24 <radio_is_ready>
   16d42:	4682      	mov	sl, r0
   16d44:	2800      	cmp	r0, #0
   16d46:	f000 8091 	beq.w	16e6c <isr_rx_scan+0x81c>
   16d4a:	4040      	eors	r0, r0
   16d4c:	f380 8811 	msr	BASEPRI, r0
   16d50:	f04f 0004 	mov.w	r0, #4
   16d54:	df02      	svc	2
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16d56:	7a20      	ldrb	r0, [r4, #8]
				 pdu->payload.direct_ind.tgt_addr, rl_idx)) {
   16d58:	f108 0908 	add.w	r9, r8, #8
	if (ctrl_rl_addr_resolve(pdu->rx_addr,
   16d5c:	462a      	mov	r2, r5
   16d5e:	4649      	mov	r1, r9
   16d60:	09c0      	lsrs	r0, r0, #7
   16d62:	f002 fb73 	bl	1944c <ctrl_rl_addr_resolve>
   16d66:	4682      	mov	sl, r0
   16d68:	2800      	cmp	r0, #0
   16d6a:	d146      	bne.n	16dfa <isr_rx_scan+0x7aa>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16d6c:	4b16      	ldr	r3, [pc, #88]	; (16dc8 <isr_rx_scan+0x778>)
   16d6e:	f893 20dd 	ldrb.w	r2, [r3, #221]	; 0xdd
   16d72:	7a23      	ldrb	r3, [r4, #8]
   16d74:	09db      	lsrs	r3, r3, #7
			BDADDR_SIZE) == 0))) ||
   16d76:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16d7a:	d00b      	beq.n	16d94 <isr_rx_scan+0x744>
	if (((_radio.scanner.filter_policy & 0x02) != 0) &&
   16d7c:	4b12      	ldr	r3, [pc, #72]	; (16dc8 <isr_rx_scan+0x778>)
   16d7e:	f893 30dd 	ldrb.w	r3, [r3, #221]	; 0xdd
   16d82:	f013 0f20 	tst.w	r3, #32
   16d86:	d02d      	beq.n	16de4 <isr_rx_scan+0x794>
   16d88:	f994 3008 	ldrsb.w	r3, [r4, #8]
   16d8c:	2b00      	cmp	r3, #0
   16d8e:	db0c      	blt.n	16daa <isr_rx_scan+0x75a>
	bool dir_report = false;
   16d90:	46d1      	mov	r9, sl
   16d92:	e028      	b.n	16de6 <isr_rx_scan+0x796>
		(memcmp(&_radio.scanner.init_addr[0],
   16d94:	2206      	movs	r2, #6
   16d96:	4649      	mov	r1, r9
   16d98:	4811      	ldr	r0, [pc, #68]	; (16de0 <isr_rx_scan+0x790>)
   16d9a:	f012 fd69 	bl	29870 <memcmp>
	return (((_radio.scanner.init_addr_type == pdu->rx_addr) &&
   16d9e:	2800      	cmp	r0, #0
   16da0:	d1ec      	bne.n	16d7c <isr_rx_scan+0x72c>
	bool dir_report = false;
   16da2:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16da4:	f04f 0a01 	mov.w	sl, #1
   16da8:	e029      	b.n	16dfe <isr_rx_scan+0x7ae>
	    ((pdu->payload.direct_ind.tgt_addr[5] & 0xc0) == 0x40)) {
   16daa:	f898 300d 	ldrb.w	r3, [r8, #13]
	    (pdu->rx_addr != 0) &&
   16dae:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   16db2:	2b40      	cmp	r3, #64	; 0x40
   16db4:	d01d      	beq.n	16df2 <isr_rx_scan+0x7a2>
	bool dir_report = false;
   16db6:	46d1      	mov	r9, sl
   16db8:	e015      	b.n	16de6 <isr_rx_scan+0x796>
   16dba:	bf00      	nop
   16dbc:	f3af 8000 	nop.w
   16dc0:	1afd498d 	.word	0x1afd498d
   16dc4:	00000007 	.word	0x00000007
   16dc8:	20000f84 	.word	0x20000f84
   16dcc:	00011151 	.word	0x00011151
   16dd0:	3b9aca00 	.word	0x3b9aca00
   16dd4:	1afd498d 	.word	0x1afd498d
   16dd8:	000110bd 	.word	0x000110bd
   16ddc:	00015c7d 	.word	0x00015c7d
   16de0:	20001064 	.word	0x20001064
   16de4:	46d1      	mov	r9, sl
			BDADDR_SIZE) == 0))) ||
   16de6:	f1ba 0f00 	cmp.w	sl, #0
   16dea:	d008      	beq.n	16dfe <isr_rx_scan+0x7ae>
   16dec:	f04f 0a01 	mov.w	sl, #1
   16df0:	e005      	b.n	16dfe <isr_rx_scan+0x7ae>
			*dir_report = true;
   16df2:	f04f 0901 	mov.w	r9, #1
		return true;
   16df6:	46ca      	mov	sl, r9
   16df8:	e7f5      	b.n	16de6 <isr_rx_scan+0x796>
	bool dir_report = false;
   16dfa:	f04f 0900 	mov.w	r9, #0
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_DIRECT_IND) &&
   16dfe:	f1ba 0f00 	cmp.w	sl, #0
   16e02:	d12b      	bne.n	16e5c <isr_rx_scan+0x80c>
   16e04:	e454      	b.n	166b0 <isr_rx_scan+0x60>
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_EXT_IND) &&
   16e06:	4a26      	ldr	r2, [pc, #152]	; (16ea0 <isr_rx_scan+0x850>)
   16e08:	f892 20dd 	ldrb.w	r2, [r2, #221]	; 0xdd
   16e0c:	f012 0f07 	tst.w	r2, #7
   16e10:	d124      	bne.n	16e5c <isr_rx_scan+0x80c>
   16e12:	e459      	b.n	166c8 <isr_rx_scan+0x78>
		   (_radio.scanner.state != 0) &&
   16e14:	4b22      	ldr	r3, [pc, #136]	; (16ea0 <isr_rx_scan+0x850>)
   16e16:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
		  ((pdu_adv_rx->type == PDU_ADV_TYPE_SCAN_RSP) &&
   16e1a:	f013 0f02 	tst.w	r3, #2
   16e1e:	d102      	bne.n	16e26 <isr_rx_scan+0x7d6>
		return 1;
   16e20:	f04f 0a01 	mov.w	sl, #1
   16e24:	e022      	b.n	16e6c <isr_rx_scan+0x81c>
	struct pdu_adv *sreq = (struct pdu_adv *)radio_pkt_scratch_get();
   16e26:	f7f8 f835 	bl	ee94 <radio_pkt_scratch_get>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16e2a:	7802      	ldrb	r2, [r0, #0]
   16e2c:	7a23      	ldrb	r3, [r4, #8]
   16e2e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16e32:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16e36:	d004      	beq.n	16e42 <isr_rx_scan+0x7f2>
   16e38:	2300      	movs	r3, #0
		   (_radio.scanner.state != 0) &&
   16e3a:	b97b      	cbnz	r3, 16e5c <isr_rx_scan+0x80c>
		return 1;
   16e3c:	f04f 0a01 	mov.w	sl, #1
   16e40:	e014      	b.n	16e6c <isr_rx_scan+0x81c>
		(memcmp(&sreq->payload.scan_req.adv_addr[0],
   16e42:	2206      	movs	r2, #6
   16e44:	f108 0102 	add.w	r1, r8, #2
   16e48:	3008      	adds	r0, #8
   16e4a:	f012 fd11 	bl	29870 <memcmp>
	return ((sreq->rx_addr == srsp->tx_addr) &&
   16e4e:	b108      	cbz	r0, 16e54 <isr_rx_scan+0x804>
   16e50:	2300      	movs	r3, #0
   16e52:	e7f2      	b.n	16e3a <isr_rx_scan+0x7ea>
   16e54:	2301      	movs	r3, #1
   16e56:	e7f0      	b.n	16e3a <isr_rx_scan+0x7ea>
	bool dir_report = false;
   16e58:	f04f 0900 	mov.w	r9, #0
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16e5c:	7a63      	ldrb	r3, [r4, #9]
		   isr_scan_rsp_adva_matches(pdu_adv_rx))) &&
   16e5e:	b1db      	cbz	r3, 16e98 <isr_rx_scan+0x848>
		 (pdu_adv_rx->len != 0) && (!_radio.scanner.conn)) {
   16e60:	4b0f      	ldr	r3, [pc, #60]	; (16ea0 <isr_rx_scan+0x850>)
   16e62:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   16e66:	b12b      	cbz	r3, 16e74 <isr_rx_scan+0x824>
		return 1;
   16e68:	f04f 0a01 	mov.w	sl, #1
}
   16e6c:	4650      	mov	r0, sl
   16e6e:	b00f      	add	sp, #60	; 0x3c
   16e70:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = isr_rx_scan_report(rssi_ready,
   16e74:	b907      	cbnz	r7, 16e78 <isr_rx_scan+0x828>
   16e76:	25ff      	movs	r5, #255	; 0xff
   16e78:	464a      	mov	r2, r9
   16e7a:	4629      	mov	r1, r5
   16e7c:	4630      	mov	r0, r6
   16e7e:	f7fc fe89 	bl	13b94 <isr_rx_scan_report>
		if (err) {
   16e82:	4682      	mov	sl, r0
   16e84:	2800      	cmp	r0, #0
   16e86:	d1f1      	bne.n	16e6c <isr_rx_scan+0x81c>
	return 1;
   16e88:	f04f 0a01 	mov.w	sl, #1
   16e8c:	e7ee      	b.n	16e6c <isr_rx_scan+0x81c>
			return 1;
   16e8e:	f04f 0a01 	mov.w	sl, #1
   16e92:	e7eb      	b.n	16e6c <isr_rx_scan+0x81c>
		return 0;
   16e94:	4682      	mov	sl, r0
   16e96:	e7e9      	b.n	16e6c <isr_rx_scan+0x81c>
		return 1;
   16e98:	f04f 0a01 	mov.w	sl, #1
   16e9c:	e7e6      	b.n	16e6c <isr_rx_scan+0x81c>
   16e9e:	bf00      	nop
   16ea0:	20000f84 	.word	0x20000f84
   16ea4:	00000000 	.word	0x00000000

00016ea8 <isr_rx_adv>:
{
   16ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   16eac:	b08f      	sub	sp, #60	; 0x3c
   16eae:	4604      	mov	r4, r0
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16eb0:	b9fa      	cbnz	r2, 16ef2 <isr_rx_adv+0x4a>
   16eb2:	20ff      	movs	r0, #255	; 0xff
   16eb4:	f88d 0037 	strb.w	r0, [sp, #55]	; 0x37
	pdu_adv = (struct pdu_adv *)radio_pkt_scratch_get();
   16eb8:	f7f7 ffec 	bl	ee94 <radio_pkt_scratch_get>
   16ebc:	4680      	mov	r8, r0
		[_radio.advertiser.adv_data.first][0];
   16ebe:	4f9d      	ldr	r7, [pc, #628]	; (17134 <isr_rx_adv+0x28c>)
   16ec0:	f897 3075 	ldrb.w	r3, [r7, #117]	; 0x75
	_pdu_adv = (struct pdu_adv *)&_radio.advertiser.adv_data.data
   16ec4:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16ec8:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16ecc:	3320      	adds	r3, #32
   16ece:	441f      	add	r7, r3
   16ed0:	1dfd      	adds	r5, r7, #7
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16ed2:	7803      	ldrb	r3, [r0, #0]
   16ed4:	f003 030f 	and.w	r3, r3, #15
   16ed8:	2b03      	cmp	r3, #3
   16eda:	d00e      	beq.n	16efa <isr_rx_adv+0x52>
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16edc:	f898 3000 	ldrb.w	r3, [r8]
   16ee0:	f003 030f 	and.w	r3, r3, #15
   16ee4:	2b05      	cmp	r3, #5
   16ee6:	d065      	beq.n	16fb4 <isr_rx_adv+0x10c>
	return 1;
   16ee8:	2301      	movs	r3, #1
}
   16eea:	4618      	mov	r0, r3
   16eec:	b00f      	add	sp, #60	; 0x3c
   16eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	u8_t rl_idx = irkmatch_ok ? ctrl_rl_irk_idx(irkmatch_id) :
   16ef2:	4618      	mov	r0, r3
   16ef4:	f002 f892 	bl	1901c <ctrl_rl_irk_idx>
   16ef8:	e7dc      	b.n	16eb4 <isr_rx_adv+0xc>
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16efa:	7843      	ldrb	r3, [r0, #1]
	if ((pdu_adv->type == PDU_ADV_TYPE_SCAN_REQ) &&
   16efc:	2b0c      	cmp	r3, #12
   16efe:	d1ed      	bne.n	16edc <isr_rx_adv+0x34>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16f00:	4b8c      	ldr	r3, [pc, #560]	; (17134 <isr_rx_adv+0x28c>)
   16f02:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16f06:	f013 0f40 	tst.w	r3, #64	; 0x40
   16f0a:	d030      	beq.n	16f6e <isr_rx_adv+0xc6>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16f0c:	4b89      	ldr	r3, [pc, #548]	; (17134 <isr_rx_adv+0x28c>)
   16f0e:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16f12:	f013 0f40 	tst.w	r3, #64	; 0x40
   16f16:	d04b      	beq.n	16fb0 <isr_rx_adv+0x108>
		(((_radio.advertiser.filter_policy & 0x01) != 0) &&
   16f18:	2c00      	cmp	r4, #0
   16f1a:	d034      	beq.n	16f86 <isr_rx_adv+0xde>
	return (adv->tx_addr == sr->rx_addr) &&
   16f1c:	79fb      	ldrb	r3, [r7, #7]
   16f1e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16f22:	f898 2000 	ldrb.w	r2, [r8]
   16f26:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16f2a:	d034      	beq.n	16f96 <isr_rx_adv+0xee>
   16f2c:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16f2e:	2b00      	cmp	r3, #0
   16f30:	d13c      	bne.n	16fac <isr_rx_adv+0x104>
   16f32:	2300      	movs	r3, #0
	    (pdu_adv->len == sizeof(struct pdu_adv_payload_scan_req)) &&
   16f34:	2b00      	cmp	r3, #0
   16f36:	d0d1      	beq.n	16edc <isr_rx_adv+0x34>
		_radio.state = STATE_CLOSE;
   16f38:	4c7e      	ldr	r4, [pc, #504]	; (17134 <isr_rx_adv+0x28c>)
   16f3a:	2303      	movs	r3, #3
   16f3c:	7423      	strb	r3, [r4, #16]
		radio_switch_complete_and_disable();
   16f3e:	f7f7 ffbd 	bl	eebc <radio_switch_complete_and_disable>
		     data[_radio.advertiser.scan_data.first][0]);
   16f42:	f894 30c5 	ldrb.w	r3, [r4, #197]	; 0xc5
		radio_pkt_tx_set(&_radio.advertiser.scan_data.
   16f46:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   16f4a:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   16f4e:	3370      	adds	r3, #112	; 0x70
   16f50:	4423      	add	r3, r4
   16f52:	1dd8      	adds	r0, r3, #7
   16f54:	f7f7 ff2e 	bl	edb4 <radio_pkt_tx_set>
		LL_ASSERT(!radio_is_ready());
   16f58:	f7f7 ff64 	bl	ee24 <radio_is_ready>
   16f5c:	4603      	mov	r3, r0
   16f5e:	2800      	cmp	r0, #0
   16f60:	d0c3      	beq.n	16eea <isr_rx_adv+0x42>
   16f62:	4040      	eors	r0, r0
   16f64:	f380 8811 	msr	BASEPRI, r0
   16f68:	f04f 0004 	mov.w	r0, #4
   16f6c:	df02      	svc	2
		 ctrl_rl_addr_allowed(sr->tx_addr,
   16f6e:	4601      	mov	r1, r0
   16f70:	f811 0b02 	ldrb.w	r0, [r1], #2
   16f74:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   16f78:	f3c0 1080 	ubfx	r0, r0, #6, #1
   16f7c:	f002 fa0e 	bl	1939c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x01) == 0) &&
   16f80:	2800      	cmp	r0, #0
   16f82:	d1cb      	bne.n	16f1c <isr_rx_adv+0x74>
   16f84:	e7c2      	b.n	16f0c <isr_rx_adv+0x64>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16f86:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   16f8a:	f002 f871 	bl	19070 <ctrl_irk_whitelisted>
   16f8e:	2800      	cmp	r0, #0
   16f90:	d1c4      	bne.n	16f1c <isr_rx_adv+0x74>
   16f92:	2300      	movs	r3, #0
   16f94:	e7ce      	b.n	16f34 <isr_rx_adv+0x8c>
		 !memcmp(adv->payload.adv_ind.addr,
   16f96:	2206      	movs	r2, #6
   16f98:	f108 0108 	add.w	r1, r8, #8
   16f9c:	1ca8      	adds	r0, r5, #2
   16f9e:	f012 fc67 	bl	29870 <memcmp>
	return (adv->tx_addr == sr->rx_addr) &&
   16fa2:	b908      	cbnz	r0, 16fa8 <isr_rx_adv+0x100>
   16fa4:	2301      	movs	r3, #1
   16fa6:	e7c2      	b.n	16f2e <isr_rx_adv+0x86>
   16fa8:	2300      	movs	r3, #0
   16faa:	e7c0      	b.n	16f2e <isr_rx_adv+0x86>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16fac:	2301      	movs	r3, #1
   16fae:	e7c1      	b.n	16f34 <isr_rx_adv+0x8c>
   16fb0:	2300      	movs	r3, #0
   16fb2:	e7bf      	b.n	16f34 <isr_rx_adv+0x8c>
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   16fb4:	f898 3001 	ldrb.w	r3, [r8, #1]
	} else if ((pdu_adv->type == PDU_ADV_TYPE_CONNECT_IND) &&
   16fb8:	2b22      	cmp	r3, #34	; 0x22
   16fba:	d001      	beq.n	16fc0 <isr_rx_adv+0x118>
	return 1;
   16fbc:	2301      	movs	r3, #1
   16fbe:	e794      	b.n	16eea <isr_rx_adv+0x42>
	if (adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   16fc0:	79fb      	ldrb	r3, [r7, #7]
   16fc2:	f003 030f 	and.w	r3, r3, #15
   16fc6:	2b01      	cmp	r3, #1
   16fc8:	d01a      	beq.n	17000 <isr_rx_adv+0x158>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   16fca:	4b5a      	ldr	r3, [pc, #360]	; (17134 <isr_rx_adv+0x28c>)
   16fcc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16fd0:	09db      	lsrs	r3, r3, #7
   16fd2:	d06d      	beq.n	170b0 <isr_rx_adv+0x208>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16fd4:	4b57      	ldr	r3, [pc, #348]	; (17134 <isr_rx_adv+0x28c>)
   16fd6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
				      rl_idx)) ||
   16fda:	09db      	lsrs	r3, r3, #7
   16fdc:	f000 8096 	beq.w	1710c <isr_rx_adv+0x264>
		(((_radio.advertiser.filter_policy & 0x02) != 0) &&
   16fe0:	2c00      	cmp	r4, #0
   16fe2:	d071      	beq.n	170c8 <isr_rx_adv+0x220>
	return (adv->tx_addr == ci->rx_addr) &&
   16fe4:	79fb      	ldrb	r3, [r7, #7]
   16fe6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   16fea:	f898 2000 	ldrb.w	r2, [r8]
   16fee:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   16ff2:	d071      	beq.n	170d8 <isr_rx_adv+0x230>
   16ff4:	2300      	movs	r3, #0
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   16ff6:	2b00      	cmp	r3, #0
   16ff8:	f000 809a 	beq.w	17130 <isr_rx_adv+0x288>
   16ffc:	2301      	movs	r3, #1
   16ffe:	e086      	b.n	1710e <isr_rx_adv+0x266>
		return ctrl_rl_addr_allowed(ci->tx_addr,
   17000:	4641      	mov	r1, r8
   17002:	f811 0b02 	ldrb.w	r0, [r1], #2
   17006:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   1700a:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1700e:	f002 f9c5 	bl	1939c <ctrl_rl_addr_allowed>
		       isr_adv_ci_adva_check(adv, ci) &&
   17012:	b908      	cbnz	r0, 17018 <isr_rx_adv+0x170>
   17014:	2300      	movs	r3, #0
   17016:	e07a      	b.n	1710e <isr_rx_adv+0x266>
	return (adv->tx_addr == ci->rx_addr) &&
   17018:	79fb      	ldrb	r3, [r7, #7]
   1701a:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1701e:	f898 2000 	ldrb.w	r2, [r8]
   17022:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   17026:	d003      	beq.n	17030 <isr_rx_adv+0x188>
   17028:	2300      	movs	r3, #0
					    rl_idx) &&
   1702a:	b9db      	cbnz	r3, 17064 <isr_rx_adv+0x1bc>
		       isr_adv_ci_adva_check(adv, ci) &&
   1702c:	2300      	movs	r3, #0
   1702e:	e06e      	b.n	1710e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17030:	79fb      	ldrb	r3, [r7, #7]
   17032:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   17036:	2b01      	cmp	r3, #1
   17038:	d008      	beq.n	1704c <isr_rx_adv+0x1a4>
		 (!memcmp(adv->payload.adv_ind.addr,
   1703a:	2206      	movs	r2, #6
   1703c:	f108 0108 	add.w	r1, r8, #8
   17040:	1ca8      	adds	r0, r5, #2
   17042:	f012 fc15 	bl	29870 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   17046:	b958      	cbnz	r0, 17060 <isr_rx_adv+0x1b8>
	return (adv->tx_addr == ci->rx_addr) &&
   17048:	2301      	movs	r3, #1
   1704a:	e7ee      	b.n	1702a <isr_rx_adv+0x182>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   1704c:	2206      	movs	r2, #6
   1704e:	f108 0108 	add.w	r1, r8, #8
   17052:	1ca8      	adds	r0, r5, #2
   17054:	f012 fc0c 	bl	29870 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17058:	2800      	cmp	r0, #0
   1705a:	d1ee      	bne.n	1703a <isr_rx_adv+0x192>
	return (adv->tx_addr == ci->rx_addr) &&
   1705c:	2301      	movs	r3, #1
   1705e:	e7e4      	b.n	1702a <isr_rx_adv+0x182>
   17060:	2300      	movs	r3, #0
   17062:	e7e2      	b.n	1702a <isr_rx_adv+0x182>
		       isr_adv_ci_tgta_check(adv, ci, *rl_idx);
   17064:	f89d 3037 	ldrb.w	r3, [sp, #55]	; 0x37
	if (rl_idx != FILTER_IDX_NONE) {
   17068:	2bff      	cmp	r3, #255	; 0xff
   1706a:	d009      	beq.n	17080 <isr_rx_adv+0x1d8>
		return rl_idx == _radio.advertiser.rl_idx;
   1706c:	4a31      	ldr	r2, [pc, #196]	; (17134 <isr_rx_adv+0x28c>)
   1706e:	f892 2026 	ldrb.w	r2, [r2, #38]	; 0x26
   17072:	4293      	cmp	r3, r2
   17074:	bf14      	ite	ne
   17076:	2300      	movne	r3, #0
   17078:	2301      	moveq	r3, #1
		       isr_adv_ci_adva_check(adv, ci) &&
   1707a:	b9bb      	cbnz	r3, 170ac <isr_rx_adv+0x204>
   1707c:	2300      	movs	r3, #0
   1707e:	e046      	b.n	1710e <isr_rx_adv+0x266>
	return (adv->rx_addr == ci->tx_addr) &&
   17080:	79fa      	ldrb	r2, [r7, #7]
   17082:	f898 3000 	ldrb.w	r3, [r8]
   17086:	f3c3 1380 	ubfx	r3, r3, #6, #1
   1708a:	ebb3 1fd2 	cmp.w	r3, r2, lsr #7
   1708e:	d001      	beq.n	17094 <isr_rx_adv+0x1ec>
   17090:	2300      	movs	r3, #0
   17092:	e7f2      	b.n	1707a <isr_rx_adv+0x1d2>
	       !memcmp(adv->payload.direct_ind.tgt_addr,
   17094:	2206      	movs	r2, #6
   17096:	f108 0102 	add.w	r1, r8, #2
   1709a:	f105 0008 	add.w	r0, r5, #8
   1709e:	f012 fbe7 	bl	29870 <memcmp>
	return (adv->rx_addr == ci->tx_addr) &&
   170a2:	b908      	cbnz	r0, 170a8 <isr_rx_adv+0x200>
   170a4:	2301      	movs	r3, #1
   170a6:	e7e8      	b.n	1707a <isr_rx_adv+0x1d2>
   170a8:	2300      	movs	r3, #0
   170aa:	e7e6      	b.n	1707a <isr_rx_adv+0x1d2>
		       isr_adv_ci_adva_check(adv, ci) &&
   170ac:	2301      	movs	r3, #1
   170ae:	e02e      	b.n	1710e <isr_rx_adv+0x266>
		 ctrl_rl_addr_allowed(ci->tx_addr,
   170b0:	4641      	mov	r1, r8
   170b2:	f811 0b02 	ldrb.w	r0, [r1], #2
   170b6:	f10d 0237 	add.w	r2, sp, #55	; 0x37
   170ba:	f3c0 1080 	ubfx	r0, r0, #6, #1
   170be:	f002 f96d 	bl	1939c <ctrl_rl_addr_allowed>
	return ((((_radio.advertiser.filter_policy & 0x02) == 0) &&
   170c2:	2800      	cmp	r0, #0
   170c4:	d18e      	bne.n	16fe4 <isr_rx_adv+0x13c>
   170c6:	e785      	b.n	16fd4 <isr_rx_adv+0x12c>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   170c8:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   170cc:	f001 ffd0 	bl	19070 <ctrl_irk_whitelisted>
   170d0:	2800      	cmp	r0, #0
   170d2:	d187      	bne.n	16fe4 <isr_rx_adv+0x13c>
   170d4:	2300      	movs	r3, #0
   170d6:	e01a      	b.n	1710e <isr_rx_adv+0x266>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   170d8:	79fb      	ldrb	r3, [r7, #7]
   170da:	f003 030f 	and.w	r3, r3, #15
	return (adv->tx_addr == ci->rx_addr) &&
   170de:	2b01      	cmp	r3, #1
   170e0:	d008      	beq.n	170f4 <isr_rx_adv+0x24c>
		 (!memcmp(adv->payload.adv_ind.addr,
   170e2:	2206      	movs	r2, #6
   170e4:	f108 0108 	add.w	r1, r8, #8
   170e8:	1ca8      	adds	r0, r5, #2
   170ea:	f012 fbc1 	bl	29870 <memcmp>
			 ci->payload.connect_ind.adv_addr, BDADDR_SIZE)) ||
   170ee:	b958      	cbnz	r0, 17108 <isr_rx_adv+0x260>
	return (adv->tx_addr == ci->rx_addr) &&
   170f0:	2301      	movs	r3, #1
   170f2:	e780      	b.n	16ff6 <isr_rx_adv+0x14e>
		 !memcmp(adv->payload.direct_ind.adv_addr,
   170f4:	2206      	movs	r2, #6
   170f6:	f108 0108 	add.w	r1, r8, #8
   170fa:	1ca8      	adds	r0, r5, #2
   170fc:	f012 fbb8 	bl	29870 <memcmp>
		(((adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   17100:	2800      	cmp	r0, #0
   17102:	d1ee      	bne.n	170e2 <isr_rx_adv+0x23a>
	return (adv->tx_addr == ci->rx_addr) &&
   17104:	2301      	movs	r3, #1
   17106:	e776      	b.n	16ff6 <isr_rx_adv+0x14e>
   17108:	2300      	movs	r3, #0
   1710a:	e774      	b.n	16ff6 <isr_rx_adv+0x14e>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   1710c:	2300      	movs	r3, #0
		   (pdu_adv->len == sizeof(struct pdu_adv_payload_connect_ind)) &&
   1710e:	2b00      	cmp	r3, #0
   17110:	f000 8232 	beq.w	17578 <isr_rx_adv+0x6d0>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   17114:	4b07      	ldr	r3, [pc, #28]	; (17134 <isr_rx_adv+0x28c>)
   17116:	f893 317e 	ldrb.w	r3, [r3, #382]	; 0x17e
		   isr_adv_ci_check(_pdu_adv, pdu_adv, devmatch_ok, &rl_idx) &&
   1711a:	b16b      	cbz	r3, 17138 <isr_rx_adv+0x290>
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   1711c:	4a05      	ldr	r2, [pc, #20]	; (17134 <isr_rx_adv+0x28c>)
   1711e:	f892 317c 	ldrb.w	r3, [r2, #380]	; 0x17c
   17122:	b2db      	uxtb	r3, r3
   17124:	f892 217d 	ldrb.w	r2, [r2, #381]	; 0x17d
   17128:	4293      	cmp	r3, r2
   1712a:	d005      	beq.n	17138 <isr_rx_adv+0x290>
	return 1;
   1712c:	2301      	movs	r3, #1
   1712e:	e6dc      	b.n	16eea <isr_rx_adv+0x42>
		 (devmatch_ok || ctrl_irk_whitelisted(*rl_idx)))) &&
   17130:	2300      	movs	r3, #0
   17132:	e7ec      	b.n	1710e <isr_rx_adv+0x266>
   17134:	20000f84 	.word	0x20000f84
		   (_radio.advertiser.conn)) {
   17138:	4bd9      	ldr	r3, [pc, #868]	; (174a0 <isr_rx_adv+0x5f8>)
   1713a:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
		   ((_radio.fc_ena == 0) || (_radio.fc_req == _radio.fc_ack)) &&
   1713e:	2b00      	cmp	r3, #0
   17140:	f000 821c 	beq.w	1757c <isr_rx_adv+0x6d4>
	if (_radio.packet_rx_acquire >=
   17144:	4bd6      	ldr	r3, [pc, #856]	; (174a0 <isr_rx_adv+0x5f8>)
   17146:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   1714a:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   1714e:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   17150:	429a      	cmp	r2, r3
   17152:	f0c0 81cf 	bcc.w	174f4 <isr_rx_adv+0x64c>
			_radio.packet_rx_last);
   17156:	4bd2      	ldr	r3, [pc, #840]	; (174a0 <isr_rx_adv+0x5f8>)
   17158:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   1715c:	1ad3      	subs	r3, r2, r3
   1715e:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   17160:	2b03      	cmp	r3, #3
   17162:	f240 81d1 	bls.w	17508 <isr_rx_adv+0x660>
	return _radio.packet_rx[_radio.packet_rx_last];
   17166:	4bce      	ldr	r3, [pc, #824]	; (174a0 <isr_rx_adv+0x5f8>)
   17168:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   1716c:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   17170:	f852 5023 	ldr.w	r5, [r2, r3, lsl #2]
		if (radio_pdu_node_rx == 0) {
   17174:	2d00      	cmp	r5, #0
   17176:	f000 8203 	beq.w	17580 <isr_rx_adv+0x6d8>
		_radio.state = STATE_STOP;
   1717a:	4ec9      	ldr	r6, [pc, #804]	; (174a0 <isr_rx_adv+0x5f8>)
   1717c:	f04f 0904 	mov.w	r9, #4
   17180:	f886 9010 	strb.w	r9, [r6, #16]
		radio_disable();
   17184:	f7f7 fe34 	bl	edf0 <radio_disable>
		conn = _radio.advertiser.conn;
   17188:	f8d6 40c8 	ldr.w	r4, [r6, #200]	; 0xc8
		_radio.advertiser.conn = NULL;
   1718c:	2300      	movs	r3, #0
   1718e:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
		conn->handle = mem_index_get(conn, _radio.conn_pool,
   17192:	f44f 72aa 	mov.w	r2, #340	; 0x154
   17196:	f8d6 1104 	ldr.w	r1, [r6, #260]	; 0x104
   1719a:	4620      	mov	r0, r4
   1719c:	f7f7 fc53 	bl	ea46 <mem_index_get>
   171a0:	8420      	strh	r0, [r4, #32]
		memcpy(&conn->crc_init[0],
   171a2:	2203      	movs	r2, #3
   171a4:	f108 0112 	add.w	r1, r8, #18
   171a8:	f104 0014 	add.w	r0, r4, #20
   171ac:	f7e9 f888 	bl	2c0 <memcpy>
		memcpy(&conn->access_addr[0],
   171b0:	f104 0a10 	add.w	sl, r4, #16
   171b4:	464a      	mov	r2, r9
   171b6:	f108 010e 	add.w	r1, r8, #14
   171ba:	4650      	mov	r0, sl
   171bc:	f7e9 f880 	bl	2c0 <memcpy>
		memcpy(&conn->data_chan_map[0],
   171c0:	f104 0617 	add.w	r6, r4, #23
   171c4:	2205      	movs	r2, #5
   171c6:	f108 011e 	add.w	r1, r8, #30
   171ca:	4630      	mov	r0, r6
   171cc:	f7e9 f878 	bl	2c0 <memcpy>
			util_ones_count_get(&conn->data_chan_map[0],
   171d0:	2105      	movs	r1, #5
   171d2:	4630      	mov	r0, r6
   171d4:	f7f7 fc7b 	bl	eace <util_ones_count_get>
		conn->data_chan_count =
   171d8:	7f63      	ldrb	r3, [r4, #29]
   171da:	f360 0305 	bfi	r3, r0, #0, #6
   171de:	7763      	strb	r3, [r4, #29]
		conn->data_chan_hop = pdu_adv->payload.connect_ind.lldata.hop;
   171e0:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   171e4:	f3c3 0304 	ubfx	r3, r3, #0, #5
   171e8:	77a3      	strb	r3, [r4, #30]
			pdu_adv->payload.connect_ind.lldata.interval;
   171ea:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		conn->conn_interval =
   171ee:	84a3      	strh	r3, [r4, #36]	; 0x24
			pdu_adv->payload.connect_ind.lldata.interval * 1250;
   171f0:	f8b8 3018 	ldrh.w	r3, [r8, #24]
   171f4:	f240 46e2 	movw	r6, #1250	; 0x4e2
   171f8:	fb06 f603 	mul.w	r6, r6, r3
		conn->latency = pdu_adv->payload.connect_ind.lldata.latency;
   171fc:	f8b8 301a 	ldrh.w	r3, [r8, #26]
   17200:	84e3      	strh	r3, [r4, #38]	; 0x26
		memcpy((void *)&conn->slave.force, &conn->access_addr[0],
   17202:	464a      	mov	r2, r9
   17204:	4651      	mov	r1, sl
   17206:	f104 006c 	add.w	r0, r4, #108	; 0x6c
   1720a:	f7e9 f859 	bl	2c0 <memcpy>
			RADIO_CONN_EVENTS((pdu_adv->payload.connect_ind.lldata.timeout
   1720e:	f8b8 301c 	ldrh.w	r3, [r8, #28]
   17212:	f242 7210 	movw	r2, #10000	; 0x2710
   17216:	fb02 6303 	mla	r3, r2, r3, r6
   1721a:	3b01      	subs	r3, #1
   1721c:	fbb3 f3f6 	udiv	r3, r3, r6
		conn->supervision_reload =
   17220:	87e3      	strh	r3, [r4, #62]	; 0x3e
		conn->procedure_reload = RADIO_CONN_EVENTS((40 * 1000 * 1000),
   17222:	4ba0      	ldr	r3, [pc, #640]	; (174a4 <isr_rx_adv+0x5fc>)
   17224:	4433      	add	r3, r6
   17226:	fbb3 f3f6 	udiv	r3, r3, r6
   1722a:	f8a4 3042 	strh.w	r3, [r4, #66]	; 0x42
		conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   1722e:	4b9e      	ldr	r3, [pc, #632]	; (174a8 <isr_rx_adv+0x600>)
   17230:	4433      	add	r3, r6
   17232:	fbb3 f3f6 	udiv	r3, r3, r6
   17236:	b29b      	uxth	r3, r3
   17238:	f8a4 304a 	strh.w	r3, [r4, #74]	; 0x4a
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   1723c:	8ce2      	ldrh	r2, [r4, #38]	; 0x26
   1723e:	1d91      	adds	r1, r2, #6
   17240:	428b      	cmp	r3, r1
   17242:	dd03      	ble.n	1724c <isr_rx_adv+0x3a4>
				     (conn->apto_reload - (conn->latency + 6)) :
   17244:	1a9b      	subs	r3, r3, r2
   17246:	b29b      	uxth	r3, r3
		conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17248:	3b06      	subs	r3, #6
   1724a:	b29b      	uxth	r3, r3
   1724c:	f8a4 3046 	strh.w	r3, [r4, #70]	; 0x46
		radio_pdu_node_rx->hdr.handle = conn->handle;
   17250:	8c23      	ldrh	r3, [r4, #32]
   17252:	80eb      	strh	r3, [r5, #6]
		radio_pdu_node_rx->hdr.type = NODE_RX_TYPE_CONNECTION;
   17254:	2206      	movs	r2, #6
   17256:	712a      	strb	r2, [r5, #4]
		radio_le_conn_cmplt->status = 0x00;
   17258:	2300      	movs	r3, #0
   1725a:	72eb      	strb	r3, [r5, #11]
		radio_le_conn_cmplt->role = 0x01;
   1725c:	2301      	movs	r3, #1
   1725e:	732b      	strb	r3, [r5, #12]
		radio_le_conn_cmplt->own_addr_type = pdu_adv->rx_addr;
   17260:	4641      	mov	r1, r8
   17262:	f811 3b08 	ldrb.w	r3, [r1], #8
   17266:	f3c3 13c0 	ubfx	r3, r3, #7, #1
   1726a:	76ab      	strb	r3, [r5, #26]
		memcpy(&radio_le_conn_cmplt->own_addr[0],
   1726c:	f105 001b 	add.w	r0, r5, #27
   17270:	f7e9 f826 	bl	2c0 <memcpy>
		if (rl_idx != FILTER_IDX_NONE) {
   17274:	f89d 0037 	ldrb.w	r0, [sp, #55]	; 0x37
   17278:	28ff      	cmp	r0, #255	; 0xff
   1727a:	f000 8147 	beq.w	1750c <isr_rx_adv+0x664>
			ll_rl_id_addr_get(rl_idx,
   1727e:	f105 020e 	add.w	r2, r5, #14
   17282:	f105 010d 	add.w	r1, r5, #13
   17286:	f002 f85d 	bl	19344 <ll_rl_id_addr_get>
			radio_le_conn_cmplt->peer_addr_type += 2;
   1728a:	7b6b      	ldrb	r3, [r5, #13]
   1728c:	3302      	adds	r3, #2
   1728e:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_rpa[0],
   17290:	2206      	movs	r2, #6
   17292:	f108 0102 	add.w	r1, r8, #2
   17296:	f105 0014 	add.w	r0, r5, #20
   1729a:	f7e9 f811 	bl	2c0 <memcpy>
			pdu_adv->payload.connect_ind.lldata.interval;
   1729e:	f8b8 3018 	ldrh.w	r3, [r8, #24]
		radio_le_conn_cmplt->interval =
   172a2:	f8a5 3021 	strh.w	r3, [r5, #33]	; 0x21
			pdu_adv->payload.connect_ind.lldata.latency;
   172a6:	f8b8 301a 	ldrh.w	r3, [r8, #26]
		radio_le_conn_cmplt->latency =
   172aa:	f8a5 3023 	strh.w	r3, [r5, #35]	; 0x23
			pdu_adv->payload.connect_ind.lldata.timeout;
   172ae:	f8b8 301c 	ldrh.w	r3, [r8, #28]
		radio_le_conn_cmplt->timeout =
   172b2:	f8a5 3025 	strh.w	r3, [r5, #37]	; 0x25
			pdu_adv->payload.connect_ind.lldata.sca;
   172b6:	f898 3023 	ldrb.w	r3, [r8, #35]	; 0x23
   172ba:	f3c3 1342 	ubfx	r3, r3, #5, #3
		radio_le_conn_cmplt->mca =
   172be:	f885 3027 	strb.w	r3, [r5, #39]	; 0x27
		rx_fc_lock(conn->handle);
   172c2:	8c20      	ldrh	r0, [r4, #32]
   172c4:	f7f9 fedc 	bl	11080 <rx_fc_lock>
		packet_rx_enqueue();
   172c8:	f7fc fbc4 	bl	13a54 <packet_rx_enqueue>
	if (_radio.packet_rx_acquire >=
   172cc:	4b74      	ldr	r3, [pc, #464]	; (174a0 <isr_rx_adv+0x5f8>)
   172ce:	f893 213e 	ldrb.w	r2, [r3, #318]	; 0x13e
	    _radio.packet_rx_last) {
   172d2:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   172d6:	b2db      	uxtb	r3, r3
	if (_radio.packet_rx_acquire >=
   172d8:	429a      	cmp	r2, r3
   172da:	f0c0 8129 	bcc.w	17530 <isr_rx_adv+0x688>
			_radio.packet_rx_last);
   172de:	4b70      	ldr	r3, [pc, #448]	; (174a0 <isr_rx_adv+0x5f8>)
   172e0:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
		return (_radio.packet_rx_acquire -
   172e4:	1ad3      	subs	r3, r2, r3
   172e6:	b2db      	uxtb	r3, r3
	if (count > packet_rx_acquired_count_get()) {
   172e8:	2b02      	cmp	r3, #2
   172ea:	f240 812b 	bls.w	17544 <isr_rx_adv+0x69c>
	return _radio.packet_rx[_radio.packet_rx_last];
   172ee:	4b6c      	ldr	r3, [pc, #432]	; (174a0 <isr_rx_adv+0x5f8>)
   172f0:	f8d3 2138 	ldr.w	r2, [r3, #312]	; 0x138
   172f4:	f893 313d 	ldrb.w	r3, [r3, #317]	; 0x13d
   172f8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
			LL_ASSERT(radio_pdu_node_rx);
   172fc:	2b00      	cmp	r3, #0
   172fe:	f000 8123 	beq.w	17548 <isr_rx_adv+0x6a0>
			radio_pdu_node_rx->hdr.handle = conn->handle;
   17302:	8c22      	ldrh	r2, [r4, #32]
   17304:	80da      	strh	r2, [r3, #6]
			radio_pdu_node_rx->hdr.type =
   17306:	220b      	movs	r2, #11
   17308:	711a      	strb	r2, [r3, #4]
			if (pdu_adv->chan_sel) {
   1730a:	f898 2000 	ldrb.w	r2, [r8]
   1730e:	f012 0f20 	tst.w	r2, #32
   17312:	f000 811f 	beq.w	17554 <isr_rx_adv+0x6ac>
					((u16_t)conn->access_addr[1] << 8) |
   17316:	7c61      	ldrb	r1, [r4, #17]
					conn->access_addr[0];
   17318:	7c22      	ldrb	r2, [r4, #16]
				u16_t aa_ls =
   1731a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
					((u16_t)conn->access_addr[3] << 8) |
   1731e:	7ce0      	ldrb	r0, [r4, #19]
					 conn->access_addr[2];
   17320:	7ca1      	ldrb	r1, [r4, #18]
				u16_t aa_ms =
   17322:	ea41 2100 	orr.w	r1, r1, r0, lsl #8
				conn->data_chan_sel = 1;
   17326:	7f60      	ldrb	r0, [r4, #29]
   17328:	f040 0040 	orr.w	r0, r0, #64	; 0x40
   1732c:	7760      	strb	r0, [r4, #29]
				conn->data_chan_id = aa_ms ^ aa_ls;
   1732e:	404a      	eors	r2, r1
   17330:	83e2      	strh	r2, [r4, #30]
				le_chan_sel_algo->chan_sel_algo = 0x01;
   17332:	2201      	movs	r2, #1
   17334:	72da      	strb	r2, [r3, #11]
			packet_rx_enqueue();
   17336:	f7fc fb8d 	bl	13a54 <packet_rx_enqueue>
		conn->slave.sca = pdu_adv->payload.connect_ind.lldata.sca;
   1733a:	f898 2023 	ldrb.w	r2, [r8, #35]	; 0x23
   1733e:	0952      	lsrs	r2, r2, #5
   17340:	f894 3050 	ldrb.w	r3, [r4, #80]	; 0x50
   17344:	f362 0384 	bfi	r3, r2, #2, #3
   17348:	f884 3050 	strb.w	r3, [r4, #80]	; 0x50
			(((gc_lookup_ppm[_radio.sca] +
   1734c:	4d54      	ldr	r5, [pc, #336]	; (174a0 <isr_rx_adv+0x5f8>)
   1734e:	f895 311c 	ldrb.w	r3, [r5, #284]	; 0x11c
   17352:	4956      	ldr	r1, [pc, #344]	; (174ac <isr_rx_adv+0x604>)
   17354:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
			   gc_lookup_ppm[conn->slave.sca]) *
   17358:	f831 2012 	ldrh.w	r2, [r1, r2, lsl #1]
			(((gc_lookup_ppm[_radio.sca] +
   1735c:	4413      	add	r3, r2
			   gc_lookup_ppm[conn->slave.sca]) *
   1735e:	fb03 f306 	mul.w	r3, r3, r6
			  conn_interval_us) + (1000000 - 1)) / 1000000;
   17362:	f503 2374 	add.w	r3, r3, #999424	; 0xf4000
   17366:	f203 233f 	addw	r3, r3, #575	; 0x23f
   1736a:	4a51      	ldr	r2, [pc, #324]	; (174b0 <isr_rx_adv+0x608>)
   1736c:	fba2 2303 	umull	r2, r3, r2, r3
   17370:	0c9b      	lsrs	r3, r3, #18
		conn->slave.window_widening_periodic_us =
   17372:	6563      	str	r3, [r4, #84]	; 0x54
			(conn_interval_us >> 1) - RADIO_TIFS;
   17374:	0873      	lsrs	r3, r6, #1
   17376:	3b96      	subs	r3, #150	; 0x96
		conn->slave.window_widening_max_us =
   17378:	65a3      	str	r3, [r4, #88]	; 0x58
			pdu_adv->payload.connect_ind.lldata.win_size * 1250;
   1737a:	f898 3015 	ldrb.w	r3, [r8, #21]
   1737e:	f240 49e2 	movw	r9, #1250	; 0x4e2
   17382:	fb09 f303 	mul.w	r3, r9, r3
		conn->slave.window_size_event_us =
   17386:	66a3      	str	r3, [r4, #104]	; 0x68
		conn->slave.window_size_prepare_us = 0;
   17388:	f04f 0b00 	mov.w	fp, #0
   1738c:	f8c4 b064 	str.w	fp, [r4, #100]	; 0x64
		rx_ready_delay = radio_rx_ready_delay_get(0);
   17390:	4658      	mov	r0, fp
   17392:	f7f7 fd19 	bl	edc8 <radio_rx_ready_delay_get>
   17396:	4682      	mov	sl, r0
			TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   17398:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1739c:	a33e      	add	r3, pc, #248	; (adr r3, 17498 <isr_rx_adv+0x5f0>)
   1739e:	e9d3 2300 	ldrd	r2, r3, [r3]
   173a2:	4944      	ldr	r1, [pc, #272]	; (174b4 <isr_rx_adv+0x60c>)
   173a4:	fba0 0101 	umull	r0, r1, r0, r1
   173a8:	f7e9 fa18 	bl	7dc <__aeabi_uldivmod>
   173ac:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
		conn->hdr.ticks_slot =
   173b0:	60e0      	str	r0, [r4, #12]
		conn->hdr.ticks_active_to_start = _radio.ticks_active_to_start;
   173b2:	f8d5 5180 	ldr.w	r5, [r5, #384]	; 0x180
   173b6:	6065      	str	r5, [r4, #4]
		conn->hdr.ticks_xtal_to_start =
   173b8:	2327      	movs	r3, #39	; 0x27
   173ba:	6023      	str	r3, [r4, #0]
		conn->hdr.ticks_preempt_to_start =
   173bc:	f8c4 b008 	str.w	fp, [r4, #8]
		ticks_slot_offset =
   173c0:	429d      	cmp	r5, r3
   173c2:	bf38      	it	cc
   173c4:	461d      	movcc	r5, r3
			conn->slave.window_widening_periodic_us;
   173c6:	6d63      	ldr	r3, [r4, #84]	; 0x54
		conn_interval_us -=
   173c8:	1af6      	subs	r6, r6, r3
		conn_offset_us = radio_tmr_end_get();
   173ca:	f7f7 fee3 	bl	f194 <radio_tmr_end_get>
			((u64_t)pdu_adv->payload.connect_ind.lldata.win_offset +
   173ce:	f8b8 2016 	ldrh.w	r2, [r8, #22]
   173d2:	b292      	uxth	r2, r2
		conn_offset_us +=
   173d4:	fb09 9902 	mla	r9, r9, r2, r9
   173d8:	4481      	add	r9, r0
		conn_offset_us -= radio_tx_chain_delay_get(0, 0);
   173da:	4659      	mov	r1, fp
   173dc:	4658      	mov	r0, fp
   173de:	f7f7 fcf1 	bl	edc4 <radio_tx_chain_delay_get>
   173e2:	eba9 0000 	sub.w	r0, r9, r0
		conn_offset_us -= rx_ready_delay;
   173e6:	eba0 0a0a 	sub.w	sl, r0, sl
		conn_offset_us -= RADIO_TICKER_JITTER_US;
   173ea:	f1aa 0a30 	sub.w	sl, sl, #48	; 0x30
		ticker_status = ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   173ee:	f240 4372 	movw	r3, #1138	; 0x472
   173f2:	9300      	str	r3, [sp, #0]
   173f4:	4b30      	ldr	r3, [pc, #192]	; (174b8 <isr_rx_adv+0x610>)
   173f6:	2205      	movs	r2, #5
   173f8:	4659      	mov	r1, fp
   173fa:	4658      	mov	r0, fp
   173fc:	f7f9 f850 	bl	104a0 <ticker_stop>
		ticker_stop_adv_assert(ticker_status, (void *)__LINE__);
   17400:	f240 4173 	movw	r1, #1139	; 0x473
   17404:	f7f9 fe84 	bl	11110 <ticker_stop_adv_assert>
		if (_pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   17408:	79fb      	ldrb	r3, [r7, #7]
   1740a:	f003 030f 	and.w	r3, r3, #15
   1740e:	2b01      	cmp	r3, #1
   17410:	f000 80a3 	beq.w	1755a <isr_rx_adv+0x6b2>
		     RADIO_TICKER_ID_FIRST_CONNECTION + conn->handle,
   17414:	8c23      	ldrh	r3, [r4, #32]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17416:	3307      	adds	r3, #7
   17418:	b2db      	uxtb	r3, r3
   1741a:	930b      	str	r3, [sp, #44]	; 0x2c
		     (_radio.ticks_anchor - ticks_slot_offset),
   1741c:	4b20      	ldr	r3, [pc, #128]	; (174a0 <isr_rx_adv+0x5f8>)
   1741e:	685b      	ldr	r3, [r3, #4]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17420:	eba3 0905 	sub.w	r9, r3, r5
		     TICKER_US_TO_TICKS(conn_offset_us),
   17424:	f04f 0800 	mov.w	r8, #0
   17428:	4f22      	ldr	r7, [pc, #136]	; (174b4 <isr_rx_adv+0x60c>)
   1742a:	a31b      	add	r3, pc, #108	; (adr r3, 17498 <isr_rx_adv+0x5f0>)
   1742c:	e9d3 2300 	ldrd	r2, r3, [r3]
   17430:	fbaa 0107 	umull	r0, r1, sl, r7
   17434:	f7e9 f9d2 	bl	7dc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   17438:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
		     TICKER_US_TO_TICKS(conn_interval_us),
   1743c:	fba6 6707 	umull	r6, r7, r6, r7
   17440:	a315      	add	r3, pc, #84	; (adr r3, 17498 <isr_rx_adv+0x5f0>)
   17442:	e9d3 2300 	ldrd	r2, r3, [r3]
   17446:	4630      	mov	r0, r6
   17448:	4639      	mov	r1, r7
   1744a:	f7e9 f9c7 	bl	7dc <__aeabi_uldivmod>
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1744e:	f020 4b7f 	bic.w	fp, r0, #4278190080	; 0xff000000
		     TICKER_REMAINDER(conn_interval_us), TICKER_NULL_LAZY,
   17452:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   17456:	2100      	movs	r1, #0
   17458:	4a18      	ldr	r2, [pc, #96]	; (174bc <isr_rx_adv+0x614>)
   1745a:	2307      	movs	r3, #7
   1745c:	fb03 f300 	mul.w	r3, r3, r0
   17460:	fb02 3301 	mla	r3, r2, r1, r3
   17464:	fba0 0102 	umull	r0, r1, r0, r2
   17468:	4419      	add	r1, r3
   1746a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1746e:	2300      	movs	r3, #0
   17470:	1a30      	subs	r0, r6, r0
   17472:	eb67 0101 	sbc.w	r1, r7, r1
   17476:	f7e9 f9b1 	bl	7dc <__aeabi_uldivmod>
		     (ticks_slot_offset + conn->hdr.ticks_slot),
   1747a:	68e3      	ldr	r3, [r4, #12]
		ticker_status = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1747c:	442b      	add	r3, r5
   1747e:	b29b      	uxth	r3, r3
   17480:	f240 428a 	movw	r2, #1162	; 0x48a
   17484:	9208      	str	r2, [sp, #32]
   17486:	4a0e      	ldr	r2, [pc, #56]	; (174c0 <isr_rx_adv+0x618>)
   17488:	9207      	str	r2, [sp, #28]
   1748a:	9406      	str	r4, [sp, #24]
   1748c:	4a0d      	ldr	r2, [pc, #52]	; (174c4 <isr_rx_adv+0x61c>)
   1748e:	9205      	str	r2, [sp, #20]
   17490:	e01a      	b.n	174c8 <isr_rx_adv+0x620>
   17492:	bf00      	nop
   17494:	f3af 8000 	nop.w
   17498:	1afd498d 	.word	0x1afd498d
   1749c:	00000007 	.word	0x00000007
   174a0:	20000f84 	.word	0x20000f84
   174a4:	026259ff 	.word	0x026259ff
   174a8:	01c9c37f 	.word	0x01c9c37f
   174ac:	0002db28 	.word	0x0002db28
   174b0:	431bde83 	.word	0x431bde83
   174b4:	3b9aca00 	.word	0x3b9aca00
   174b8:	00011111 	.word	0x00011111
   174bc:	1afd498d 	.word	0x1afd498d
   174c0:	000110bd 	.word	0x000110bd
   174c4:	00015c75 	.word	0x00015c75
   174c8:	9304      	str	r3, [sp, #16]
   174ca:	f8cd 800c 	str.w	r8, [sp, #12]
   174ce:	9002      	str	r0, [sp, #8]
   174d0:	f8cd b004 	str.w	fp, [sp, #4]
   174d4:	f8cd a000 	str.w	sl, [sp]
   174d8:	464b      	mov	r3, r9
   174da:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   174dc:	4641      	mov	r1, r8
   174de:	4640      	mov	r0, r8
   174e0:	f7f8 ff42 	bl	10368 <ticker_start>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   174e4:	4603      	mov	r3, r0
   174e6:	2800      	cmp	r0, #0
   174e8:	f43f acff 	beq.w	16eea <isr_rx_adv+0x42>
   174ec:	2802      	cmp	r0, #2
   174ee:	d13d      	bne.n	1756c <isr_rx_adv+0x6c4>
		return 0;
   174f0:	2300      	movs	r3, #0
   174f2:	e4fa      	b.n	16eea <isr_rx_adv+0x42>
		return (_radio.packet_rx_count -
   174f4:	4923      	ldr	r1, [pc, #140]	; (17584 <isr_rx_adv+0x6dc>)
   174f6:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   174fa:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   174fe:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   17500:	fa52 f383 	uxtab	r3, r2, r3
   17504:	b2db      	uxtb	r3, r3
   17506:	e62b      	b.n	17160 <isr_rx_adv+0x2b8>
		return 0;
   17508:	2500      	movs	r5, #0
   1750a:	e633      	b.n	17174 <isr_rx_adv+0x2cc>
			memset(&radio_le_conn_cmplt->peer_rpa[0], 0x0,
   1750c:	2206      	movs	r2, #6
   1750e:	2100      	movs	r1, #0
   17510:	f105 0014 	add.w	r0, r5, #20
   17514:	f012 fa40 	bl	29998 <memset>
			radio_le_conn_cmplt->peer_addr_type = pdu_adv->tx_addr;
   17518:	4641      	mov	r1, r8
   1751a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1751e:	f3c3 1380 	ubfx	r3, r3, #6, #1
   17522:	736b      	strb	r3, [r5, #13]
			memcpy(&radio_le_conn_cmplt->peer_addr[0],
   17524:	2206      	movs	r2, #6
   17526:	f105 000e 	add.w	r0, r5, #14
   1752a:	f7e8 fec9 	bl	2c0 <memcpy>
   1752e:	e6b6      	b.n	1729e <isr_rx_adv+0x3f6>
		return (_radio.packet_rx_count -
   17530:	4914      	ldr	r1, [pc, #80]	; (17584 <isr_rx_adv+0x6dc>)
   17532:	f891 313c 	ldrb.w	r3, [r1, #316]	; 0x13c
			_radio.packet_rx_last +
   17536:	f891 113d 	ldrb.w	r1, [r1, #317]	; 0x13d
		return (_radio.packet_rx_count -
   1753a:	1a5b      	subs	r3, r3, r1
			_radio.packet_rx_last +
   1753c:	fa52 f383 	uxtab	r3, r2, r3
   17540:	b2db      	uxtb	r3, r3
   17542:	e6d1      	b.n	172e8 <isr_rx_adv+0x440>
		return 0;
   17544:	2300      	movs	r3, #0
   17546:	e6d9      	b.n	172fc <isr_rx_adv+0x454>
			LL_ASSERT(radio_pdu_node_rx);
   17548:	4040      	eors	r0, r0
   1754a:	f380 8811 	msr	BASEPRI, r0
   1754e:	f04f 0004 	mov.w	r0, #4
   17552:	df02      	svc	2
				le_chan_sel_algo->chan_sel_algo = 0x00;
   17554:	2200      	movs	r2, #0
   17556:	72da      	strb	r2, [r3, #11]
   17558:	e6ed      	b.n	17336 <isr_rx_adv+0x48e>
			ticker_stop(RADIO_TICKER_INSTANCE_ID_RADIO,
   1755a:	4658      	mov	r0, fp
   1755c:	f8cd b000 	str.w	fp, [sp]
   17560:	465b      	mov	r3, fp
   17562:	2203      	movs	r2, #3
   17564:	4659      	mov	r1, fp
   17566:	f7f8 ff9b 	bl	104a0 <ticker_stop>
   1756a:	e753      	b.n	17414 <isr_rx_adv+0x56c>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1756c:	4040      	eors	r0, r0
   1756e:	f380 8811 	msr	BASEPRI, r0
   17572:	f04f 0004 	mov.w	r0, #4
   17576:	df02      	svc	2
	return 1;
   17578:	2301      	movs	r3, #1
   1757a:	e4b6      	b.n	16eea <isr_rx_adv+0x42>
   1757c:	2301      	movs	r3, #1
   1757e:	e4b4      	b.n	16eea <isr_rx_adv+0x42>
			return 1;
   17580:	2301      	movs	r3, #1
   17582:	e4b2      	b.n	16eea <isr_rx_adv+0x42>
   17584:	20000f84 	.word	0x20000f84

00017588 <radio_init>:
{
   17588:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1758c:	f89d e018 	ldrb.w	lr, [sp, #24]
   17590:	f8bd c01c 	ldrh.w	ip, [sp, #28]
   17594:	9d09      	ldr	r5, [sp, #36]	; 0x24
   17596:	f8bd 6028 	ldrh.w	r6, [sp, #40]	; 0x28
	_radio.hf_clock = hf_clock;
   1759a:	4c3b      	ldr	r4, [pc, #236]	; (17688 <radio_init+0x100>)
   1759c:	6020      	str	r0, [r4, #0]
	_radio.sca = sca;
   1759e:	f884 111c 	strb.w	r1, [r4, #284]	; 0x11c
	mem_radio_end = mem_radio + mem_size;
   175a2:	19a8      	adds	r0, r5, r6
	_radio.connection_count = connection_count_max;
   175a4:	f884 210c 	strb.w	r2, [r4, #268]	; 0x10c
	_radio.conn_pool = mem_radio;
   175a8:	f8c4 5104 	str.w	r5, [r4, #260]	; 0x104
	mem_radio += (sizeof(struct connection) * _radio.connection_count);
   175ac:	f44f 71aa 	mov.w	r1, #340	; 0x154
   175b0:	fb01 5102 	mla	r1, r1, r2, r5
	rx_count_max += 3;
   175b4:	f103 0803 	add.w	r8, r3, #3
   175b8:	fa5f f888 	uxtb.w	r8, r8
	tx_count_max += 1;
   175bc:	f10e 0701 	add.w	r7, lr, #1
   175c0:	b2ff      	uxtb	r7, r7
	_radio.packet_rx_count = (rx_count_max + 1);
   175c2:	3304      	adds	r3, #4
   175c4:	b2dd      	uxtb	r5, r3
   175c6:	f884 513c 	strb.w	r5, [r4, #316]	; 0x13c
	_radio.packet_tx_count = (tx_count_max + 1);
   175ca:	f10e 0e02 	add.w	lr, lr, #2
   175ce:	fa5f fe8e 	uxtb.w	lr, lr
   175d2:	f884 e170 	strb.w	lr, [r4, #368]	; 0x170
	_radio.link_rx_data_quota = rx_count_max;
   175d6:	f884 8150 	strb.w	r8, [r4, #336]	; 0x150
	_radio.packet_rx = (void *)mem_radio;
   175da:	f8c4 1138 	str.w	r1, [r4, #312]	; 0x138
	mem_radio +=
   175de:	eb01 0185 	add.w	r1, r1, r5, lsl #2
	_radio.pkt_tx = (void *)mem_radio;
   175e2:	f8c4 1168 	str.w	r1, [r4, #360]	; 0x168
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   175e6:	ea4f 0ece 	mov.w	lr, lr, lsl #3
   175ea:	4471      	add	r1, lr
	_radio.pkt_release = (void *)mem_radio;
   175ec:	f8c4 116c 	str.w	r1, [r4, #364]	; 0x16c
	mem_radio += (sizeof(struct pdu_data_q_tx) * _radio.packet_tx_count);
   175f0:	4471      	add	r1, lr
	_radio.packet_data_octets_max = packet_data_octets_max;
   175f2:	f8a4 c130 	strh.w	ip, [r4, #304]	; 0x130
	    (offsetof(struct pdu_data, payload) +
   175f6:	f10c 0303 	add.w	r3, ip, #3
	if ((PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA) <
   175fa:	2b2a      	cmp	r3, #42	; 0x2a
   175fc:	d931      	bls.n	17662 <radio_init+0xda>
		    (MROUND(offsetof(struct radio_pdu_node_rx, pdu_data) +
   175fe:	f10c 0c0e 	add.w	ip, ip, #14
		_radio.packet_rx_data_pool_size =
   17602:	f02c 0c03 	bic.w	ip, ip, #3
   17606:	fb1c f808 	smulbb	r8, ip, r8
   1760a:	f8a4 8132 	strh.w	r8, [r4, #306]	; 0x132
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   1760e:	4c1e      	ldr	r4, [pc, #120]	; (17688 <radio_init+0x100>)
   17610:	2334      	movs	r3, #52	; 0x34
   17612:	f8a4 3134 	strh.w	r3, [r4, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   17616:	f8b4 e132 	ldrh.w	lr, [r4, #306]	; 0x132
   1761a:	4b1c      	ldr	r3, [pc, #112]	; (1768c <radio_init+0x104>)
   1761c:	fba3 c30e 	umull	ip, r3, r3, lr
   17620:	091b      	lsrs	r3, r3, #4
   17622:	f884 3136 	strb.w	r3, [r4, #310]	; 0x136
	_radio.pkt_rx_data_pool = mem_radio;
   17626:	f8c4 1128 	str.w	r1, [r4, #296]	; 0x128
	mem_radio += _radio.packet_rx_data_pool_size;
   1762a:	4471      	add	r1, lr
	_radio.link_rx_pool = mem_radio;
   1762c:	f8c4 1140 	str.w	r1, [r4, #320]	; 0x140
	mem_radio += (sizeof(void *) * 2 * (_radio.packet_rx_count +
   17630:	442a      	add	r2, r5
   17632:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	_radio.pkt_tx_ctrl_pool = mem_radio;
   17636:	f8c4 2154 	str.w	r2, [r4, #340]	; 0x154
	mem_radio += PACKET_TX_CTRL_SIZE_MIN * PACKET_MEM_COUNT_TX_CTRL;
   1763a:	3248      	adds	r2, #72	; 0x48
		MROUND(offsetof(struct radio_pdu_node_tx, pdu_data) +
   1763c:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   17640:	330a      	adds	r3, #10
   17642:	b29b      	uxth	r3, r3
   17644:	f023 0303 	bic.w	r3, r3, #3
   17648:	b29b      	uxth	r3, r3
	_radio.packet_tx_data_size =
   1764a:	f8a4 3164 	strh.w	r3, [r4, #356]	; 0x164
	_radio.pkt_tx_data_pool = mem_radio;
   1764e:	f8c4 215c 	str.w	r2, [r4, #348]	; 0x15c
	mem_radio += (_radio.packet_tx_data_size * tx_count_max);
   17652:	fb03 2707 	mla	r7, r3, r7, r2
	if (retcode) {
   17656:	1a3f      	subs	r7, r7, r0
   17658:	d00d      	beq.n	17676 <radio_init+0xee>
		return (retcode + mem_size);
   1765a:	4437      	add	r7, r6
}
   1765c:	4638      	mov	r0, r7
   1765e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			  (PDU_AC_SIZE_MAX + PDU_AC_SIZE_EXTRA)) * rx_count_max);
   17662:	eb08 0348 	add.w	r3, r8, r8, lsl #1
   17666:	eb08 0883 	add.w	r8, r8, r3, lsl #2
   1766a:	ea4f 0388 	mov.w	r3, r8, lsl #2
		_radio.packet_rx_data_pool_size =
   1766e:	4c06      	ldr	r4, [pc, #24]	; (17688 <radio_init+0x100>)
   17670:	f8a4 3132 	strh.w	r3, [r4, #306]	; 0x132
   17674:	e7cb      	b.n	1760e <radio_init+0x86>
	_radio.fc_ena = 1;
   17676:	2201      	movs	r2, #1
   17678:	4b03      	ldr	r3, [pc, #12]	; (17688 <radio_init+0x100>)
   1767a:	f883 217e 	strb.w	r2, [r3, #382]	; 0x17e
	common_init();
   1767e:	f7ec ff21 	bl	44c4 <common_init>
	radio_setup();
   17682:	f7f7 faed 	bl	ec60 <radio_setup>
	return retcode;
   17686:	e7e9      	b.n	1765c <radio_init+0xd4>
   17688:	20000f84 	.word	0x20000f84
   1768c:	4ec4ec4f 	.word	0x4ec4ec4f

00017690 <ll_reset>:
{
   17690:	b510      	push	{r4, lr}
	role_disable(RADIO_TICKER_ID_ADV, RADIO_TICKER_ID_ADV_STOP);
   17692:	2103      	movs	r1, #3
   17694:	2005      	movs	r0, #5
   17696:	f7f9 ff9b 	bl	115d0 <role_disable>
	role_disable(RADIO_TICKER_ID_SCAN, RADIO_TICKER_ID_SCAN_STOP);
   1769a:	2104      	movs	r1, #4
   1769c:	2006      	movs	r0, #6
   1769e:	f7f9 ff97 	bl	115d0 <role_disable>
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   176a2:	2400      	movs	r4, #0
   176a4:	e006      	b.n	176b4 <ll_reset+0x24>
		role_disable(RADIO_TICKER_ID_FIRST_CONNECTION + conn_handle,
   176a6:	1de0      	adds	r0, r4, #7
   176a8:	21ff      	movs	r1, #255	; 0xff
   176aa:	b2c0      	uxtb	r0, r0
   176ac:	f7f9 ff90 	bl	115d0 <role_disable>
	     conn_handle++) {
   176b0:	3401      	adds	r4, #1
   176b2:	b2a4      	uxth	r4, r4
	for (conn_handle = 0; conn_handle < _radio.connection_count;
   176b4:	4b1d      	ldr	r3, [pc, #116]	; (1772c <ll_reset+0x9c>)
   176b6:	f893 310c 	ldrb.w	r3, [r3, #268]	; 0x10c
   176ba:	429c      	cmp	r4, r3
   176bc:	d3f3      	bcc.n	176a6 <ll_reset+0x16>
	_radio.advertiser.is_enabled = 0;
   176be:	4b1b      	ldr	r3, [pc, #108]	; (1772c <ll_reset+0x9c>)
   176c0:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   176c4:	f36f 0200 	bfc	r2, #0, #1
   176c8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
	_radio.advertiser.conn = NULL;
   176cc:	2000      	movs	r0, #0
   176ce:	f8c3 00c8 	str.w	r0, [r3, #200]	; 0xc8
	_radio.scanner.is_enabled = 0;
   176d2:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   176d6:	f360 0200 	bfi	r2, r0, #0, #1
   176da:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	_radio.scanner.conn = NULL;
   176de:	f8c3 00fc 	str.w	r0, [r3, #252]	; 0xfc
	_radio.packet_rx_data_size = PACKET_RX_DATA_SIZE_MIN;
   176e2:	2234      	movs	r2, #52	; 0x34
   176e4:	f8a3 2134 	strh.w	r2, [r3, #308]	; 0x134
	_radio.packet_rx_data_count = (_radio.packet_rx_data_pool_size /
   176e8:	f8b3 2132 	ldrh.w	r2, [r3, #306]	; 0x132
   176ec:	4910      	ldr	r1, [pc, #64]	; (17730 <ll_reset+0xa0>)
   176ee:	fba1 1202 	umull	r1, r2, r1, r2
   176f2:	0912      	lsrs	r2, r2, #4
   176f4:	f883 2136 	strb.w	r2, [r3, #310]	; 0x136
	_radio.packet_rx_last = 0;
   176f8:	f883 013d 	strb.w	r0, [r3, #317]	; 0x13d
	_radio.packet_rx_acquire = 0;
   176fc:	f883 013e 	strb.w	r0, [r3, #318]	; 0x13e
	_radio.link_rx_data_quota = _radio.packet_rx_count - 1;
   17700:	f893 213c 	ldrb.w	r2, [r3, #316]	; 0x13c
   17704:	3a01      	subs	r2, #1
   17706:	f883 2150 	strb.w	r2, [r3, #336]	; 0x150
	_radio.packet_tx_first = 0;
   1770a:	f883 0171 	strb.w	r0, [r3, #369]	; 0x171
	_radio.packet_tx_last = 0;
   1770e:	f883 0172 	strb.w	r0, [r3, #370]	; 0x172
	_radio.packet_release_first = 0;
   17712:	f883 0173 	strb.w	r0, [r3, #371]	; 0x173
	_radio.packet_release_last = 0;
   17716:	f883 0174 	strb.w	r0, [r3, #372]	; 0x174
	_radio.fc_ack = _radio.fc_req;
   1771a:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   1771e:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	ll_filter_reset(false);
   17722:	f002 fa69 	bl	19bf8 <ll_filter_reset>
	common_init();
   17726:	f7ec fecd 	bl	44c4 <common_init>
   1772a:	bd10      	pop	{r4, pc}
   1772c:	20000f84 	.word	0x20000f84
   17730:	4ec4ec4f 	.word	0x4ec4ec4f

00017734 <radio_adv_data_get>:
}
   17734:	4800      	ldr	r0, [pc, #0]	; (17738 <radio_adv_data_get+0x4>)
   17736:	4770      	bx	lr
   17738:	20000fab 	.word	0x20000fab

0001773c <radio_scan_data_get>:
}
   1773c:	4800      	ldr	r0, [pc, #0]	; (17740 <radio_scan_data_get+0x4>)
   1773e:	4770      	bx	lr
   17740:	20000ffb 	.word	0x20000ffb

00017744 <radio_adv_is_enabled>:
	return _radio.advertiser.is_enabled;
   17744:	4b02      	ldr	r3, [pc, #8]	; (17750 <radio_adv_is_enabled+0xc>)
   17746:	f893 0024 	ldrb.w	r0, [r3, #36]	; 0x24
}
   1774a:	f000 0001 	and.w	r0, r0, #1
   1774e:	4770      	bx	lr
   17750:	20000f84 	.word	0x20000f84

00017754 <radio_adv_filter_pol_get>:
	if (_radio.advertiser.is_enabled) {
   17754:	4b06      	ldr	r3, [pc, #24]	; (17770 <radio_adv_filter_pol_get+0x1c>)
   17756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1775a:	f013 0f01 	tst.w	r3, #1
   1775e:	d004      	beq.n	1776a <radio_adv_filter_pol_get+0x16>
		return _radio.advertiser.filter_policy;
   17760:	4b03      	ldr	r3, [pc, #12]	; (17770 <radio_adv_filter_pol_get+0x1c>)
   17762:	f893 0025 	ldrb.w	r0, [r3, #37]	; 0x25
   17766:	0980      	lsrs	r0, r0, #6
   17768:	4770      	bx	lr
	return 0;
   1776a:	2000      	movs	r0, #0
}
   1776c:	4770      	bx	lr
   1776e:	bf00      	nop
   17770:	20000f84 	.word	0x20000f84

00017774 <radio_scan_is_enabled>:
	return _radio.scanner.is_enabled;
   17774:	4b02      	ldr	r3, [pc, #8]	; (17780 <radio_scan_is_enabled+0xc>)
   17776:	f893 00dc 	ldrb.w	r0, [r3, #220]	; 0xdc
}
   1777a:	f000 0001 	and.w	r0, r0, #1
   1777e:	4770      	bx	lr
   17780:	20000f84 	.word	0x20000f84

00017784 <radio_scan_filter_pol_get>:
	if (_radio.scanner.is_enabled) {
   17784:	4b06      	ldr	r3, [pc, #24]	; (177a0 <radio_scan_filter_pol_get+0x1c>)
   17786:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   1778a:	f013 0f01 	tst.w	r3, #1
   1778e:	d005      	beq.n	1779c <radio_scan_filter_pol_get+0x18>
		return _radio.scanner.filter_policy;
   17790:	4b03      	ldr	r3, [pc, #12]	; (177a0 <radio_scan_filter_pol_get+0x1c>)
   17792:	f893 00dd 	ldrb.w	r0, [r3, #221]	; 0xdd
   17796:	f3c0 1001 	ubfx	r0, r0, #4, #2
   1779a:	4770      	bx	lr
	return 0;
   1779c:	2000      	movs	r0, #0
}
   1779e:	4770      	bx	lr
   177a0:	20000f84 	.word	0x20000f84
   177a4:	00000000 	.word	0x00000000

000177a8 <radio_connect_enable>:
{
   177a8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   177ac:	b083      	sub	sp, #12
	if (_radio.scanner.conn) {
   177ae:	4c94      	ldr	r4, [pc, #592]	; (17a00 <radio_connect_enable+0x258>)
   177b0:	f8d4 40fc 	ldr.w	r4, [r4, #252]	; 0xfc
   177b4:	b11c      	cbz	r4, 177be <radio_connect_enable+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   177b6:	200c      	movs	r0, #12
}
   177b8:	b003      	add	sp, #12
   177ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   177be:	461f      	mov	r7, r3
   177c0:	4616      	mov	r6, r2
   177c2:	460d      	mov	r5, r1
   177c4:	4604      	mov	r4, r0
	link = mem_acquire(&_radio.link_rx_free);
   177c6:	488f      	ldr	r0, [pc, #572]	; (17a04 <radio_connect_enable+0x25c>)
   177c8:	f7f7 f8fd 	bl	e9c6 <mem_acquire>
	if (!link) {
   177cc:	4681      	mov	r9, r0
   177ce:	2800      	cmp	r0, #0
   177d0:	f000 810f 	beq.w	179f2 <radio_connect_enable+0x24a>
	conn = mem_acquire(&_radio.conn_free);
   177d4:	488c      	ldr	r0, [pc, #560]	; (17a08 <radio_connect_enable+0x260>)
   177d6:	f7f7 f8f6 	bl	e9c6 <mem_acquire>
   177da:	9001      	str	r0, [sp, #4]
	if (!conn) {
   177dc:	2800      	cmp	r0, #0
   177de:	f000 8102 	beq.w	179e6 <radio_connect_enable+0x23e>
	_radio.scanner.adv_addr_type = adv_addr_type;
   177e2:	f8df 821c 	ldr.w	r8, [pc, #540]	; 17a00 <radio_connect_enable+0x258>
   177e6:	f898 30dd 	ldrb.w	r3, [r8, #221]	; 0xdd
   177ea:	f364 1386 	bfi	r3, r4, #6, #1
   177ee:	f888 30dd 	strb.w	r3, [r8, #221]	; 0xdd
	memcpy(&_radio.scanner.adv_addr[0], adv_addr, BDADDR_SIZE);
   177f2:	2206      	movs	r2, #6
   177f4:	4629      	mov	r1, r5
   177f6:	f108 00e6 	add.w	r0, r8, #230	; 0xe6
   177fa:	f7e8 fd61 	bl	2c0 <memcpy>
	_radio.scanner.conn_interval = interval;
   177fe:	f8a8 60f0 	strh.w	r6, [r8, #240]	; 0xf0
	_radio.scanner.conn_latency = latency;
   17802:	f8a8 70f2 	strh.w	r7, [r8, #242]	; 0xf2
	_radio.scanner.conn_timeout = timeout;
   17806:	f8bd 3028 	ldrh.w	r3, [sp, #40]	; 0x28
   1780a:	f8a8 30f4 	strh.w	r3, [r8, #244]	; 0xf4
		TICKER_US_TO_TICKS(RADIO_TICKER_START_PART_US +
   1780e:	2100      	movs	r1, #0
   17810:	4608      	mov	r0, r1
   17812:	f7f7 fad5 	bl	edc0 <radio_tx_ready_delay_get>
   17816:	f200 4052 	addw	r0, r0, #1106	; 0x452
   1781a:	2400      	movs	r4, #0
   1781c:	a376      	add	r3, pc, #472	; (adr r3, 179f8 <radio_connect_enable+0x250>)
   1781e:	e9d3 2300 	ldrd	r2, r3, [r3]
   17822:	497a      	ldr	r1, [pc, #488]	; (17a0c <radio_connect_enable+0x264>)
   17824:	fba0 0101 	umull	r0, r1, r0, r1
   17828:	f7e8 ffd8 	bl	7dc <__aeabi_uldivmod>
   1782c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_conn_slot =
   17830:	f8c8 00f8 	str.w	r0, [r8, #248]	; 0xf8
	conn->handle = 0xFFFF;
   17834:	9b01      	ldr	r3, [sp, #4]
   17836:	f64f 72ff 	movw	r2, #65535	; 0xffff
   1783a:	841a      	strh	r2, [r3, #32]
	conn->llcp_features = RADIO_BLE_FEAT;
   1783c:	f502 4284 	add.w	r2, r2, #16896	; 0x4200
   17840:	f8c3 20a4 	str.w	r2, [r3, #164]	; 0xa4
	access_addr = access_addr_get();
   17844:	f7fe fe84 	bl	16550 <access_addr_get>
   17848:	9000      	str	r0, [sp, #0]
	memcpy(&conn->access_addr[0], &access_addr, sizeof(conn->access_addr));
   1784a:	2204      	movs	r2, #4
   1784c:	4669      	mov	r1, sp
   1784e:	9801      	ldr	r0, [sp, #4]
   17850:	3010      	adds	r0, #16
   17852:	f7e8 fd35 	bl	2c0 <memcpy>
	memcpy(&conn->crc_init[0], &conn, 3);
   17856:	a902      	add	r1, sp, #8
   17858:	f851 0d04 	ldr.w	r0, [r1, #-4]!
   1785c:	2203      	movs	r2, #3
   1785e:	3014      	adds	r0, #20
   17860:	f7e8 fd2e 	bl	2c0 <memcpy>
	memcpy(&conn->data_chan_map[0], &_radio.data_chan_map[0],
   17864:	2205      	movs	r2, #5
   17866:	f508 718b 	add.w	r1, r8, #278	; 0x116
   1786a:	9801      	ldr	r0, [sp, #4]
   1786c:	3017      	adds	r0, #23
   1786e:	f7e8 fd27 	bl	2c0 <memcpy>
	conn->data_chan_count = _radio.data_chan_count;
   17872:	9b01      	ldr	r3, [sp, #4]
   17874:	f898 111b 	ldrb.w	r1, [r8, #283]	; 0x11b
   17878:	7f5a      	ldrb	r2, [r3, #29]
   1787a:	f361 0205 	bfi	r2, r1, #0, #6
	conn->data_chan_sel = 0;
   1787e:	f364 1286 	bfi	r2, r4, #6, #1
   17882:	775a      	strb	r2, [r3, #29]
	conn->data_chan_hop = 6;
   17884:	2506      	movs	r5, #6
   17886:	779d      	strb	r5, [r3, #30]
	conn->data_chan_use = 0;
   17888:	77dc      	strb	r4, [r3, #31]
	conn->event_counter = 0;
   1788a:	845c      	strh	r4, [r3, #34]	; 0x22
	conn->conn_interval = _radio.scanner.conn_interval;
   1788c:	f8b8 20f0 	ldrh.w	r2, [r8, #240]	; 0xf0
   17890:	849a      	strh	r2, [r3, #36]	; 0x24
	conn->latency_prepare = 0;
   17892:	851c      	strh	r4, [r3, #40]	; 0x28
	conn->latency_event = 0;
   17894:	855c      	strh	r4, [r3, #42]	; 0x2a
	conn->latency = _radio.scanner.conn_latency;
   17896:	f8b8 00f2 	ldrh.w	r0, [r8, #242]	; 0xf2
   1789a:	84d8      	strh	r0, [r3, #38]	; 0x26
	conn->default_tx_octets = _radio.default_tx_octets;
   1789c:	f8b8 211e 	ldrh.w	r2, [r8, #286]	; 0x11e
   178a0:	859a      	strh	r2, [r3, #44]	; 0x2c
	conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   178a2:	221b      	movs	r2, #27
   178a4:	85da      	strh	r2, [r3, #46]	; 0x2e
	conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   178a6:	861a      	strh	r2, [r3, #48]	; 0x30
	conn->default_tx_time = _radio.default_tx_time;
   178a8:	f8b8 2120 	ldrh.w	r2, [r8, #288]	; 0x120
   178ac:	865a      	strh	r2, [r3, #50]	; 0x32
	conn->max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   178ae:	f44f 72a4 	mov.w	r2, #328	; 0x148
   178b2:	869a      	strh	r2, [r3, #52]	; 0x34
	conn->max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MIN, 0);
   178b4:	86da      	strh	r2, [r3, #54]	; 0x36
	conn->phy_pref_tx = _radio.default_phy_tx;
   178b6:	f898 1122 	ldrb.w	r1, [r8, #290]	; 0x122
   178ba:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   178be:	f361 0202 	bfi	r2, r1, #0, #3
	conn->phy_tx = BIT(0);
   178c2:	2101      	movs	r1, #1
   178c4:	f361 02c5 	bfi	r2, r1, #3, #3
	conn->phy_flags = 0;
   178c8:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   178cc:	f364 12c7 	bfi	r2, r4, #7, #1
   178d0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
	conn->phy_tx_time = BIT(0);
   178d4:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   178d8:	f361 0202 	bfi	r2, r1, #0, #3
   178dc:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_pref_rx = _radio.default_phy_rx;
   178e0:	f898 6124 	ldrb.w	r6, [r8, #292]	; 0x124
   178e4:	b2d2      	uxtb	r2, r2
   178e6:	f366 02c5 	bfi	r2, r6, #3, #3
   178ea:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
	conn->phy_rx = BIT(0);
   178ee:	f893 203a 	ldrb.w	r2, [r3, #58]	; 0x3a
   178f2:	f361 0202 	bfi	r2, r1, #0, #3
   178f6:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
	conn->role = 0;
   178fa:	7f5a      	ldrb	r2, [r3, #29]
   178fc:	f364 12c7 	bfi	r2, r4, #7, #1
   17900:	775a      	strb	r2, [r3, #29]
	conn->connect_expire = 6;
   17902:	879d      	strh	r5, [r3, #60]	; 0x3c
	conn->common.fex_valid = 0;
   17904:	f893 2050 	ldrb.w	r2, [r3, #80]	; 0x50
	conn->master.terminate_ack = 0;
   17908:	f002 02df 	and.w	r2, r2, #223	; 0xdf
   1790c:	f364 0200 	bfi	r2, r4, #0, #1
   17910:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
		(u32_t)_radio.scanner.conn_interval * 1250;
   17914:	f8b8 10f0 	ldrh.w	r1, [r8, #240]	; 0xf0
	conn_interval_us =
   17918:	f240 42e2 	movw	r2, #1250	; 0x4e2
   1791c:	fb02 f101 	mul.w	r1, r2, r1
		RADIO_CONN_EVENTS((_radio.scanner.conn_timeout * 10 * 1000),
   17920:	f8b8 20f4 	ldrh.w	r2, [r8, #244]	; 0xf4
   17924:	f242 7510 	movw	r5, #10000	; 0x2710
   17928:	fb05 1202 	mla	r2, r5, r2, r1
   1792c:	3a01      	subs	r2, #1
   1792e:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->supervision_reload =
   17932:	87da      	strh	r2, [r3, #62]	; 0x3e
	conn->supervision_expire = 0;
   17934:	f8a3 4040 	strh.w	r4, [r3, #64]	; 0x40
		RADIO_CONN_EVENTS((40 * 1000 * 1000), conn_interval_us);
   17938:	4a35      	ldr	r2, [pc, #212]	; (17a10 <radio_connect_enable+0x268>)
   1793a:	440a      	add	r2, r1
   1793c:	fbb2 f2f1 	udiv	r2, r2, r1
	conn->procedure_reload =
   17940:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	conn->procedure_expire = 0;
   17944:	f8a3 4044 	strh.w	r4, [r3, #68]	; 0x44
	conn->apto_reload = RADIO_CONN_EVENTS((30 * 1000 * 1000),
   17948:	4a32      	ldr	r2, [pc, #200]	; (17a14 <radio_connect_enable+0x26c>)
   1794a:	440a      	add	r2, r1
   1794c:	fbb2 f2f1 	udiv	r2, r2, r1
   17950:	b292      	uxth	r2, r2
   17952:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17956:	1d81      	adds	r1, r0, #6
   17958:	428a      	cmp	r2, r1
   1795a:	dd03      	ble.n	17964 <radio_connect_enable+0x1bc>
			     (conn->apto_reload - (conn->latency + 6)) :
   1795c:	1a12      	subs	r2, r2, r0
   1795e:	b292      	uxth	r2, r2
	conn->appto_reload = (conn->apto_reload > (conn->latency + 6)) ?
   17960:	3a06      	subs	r2, #6
   17962:	b292      	uxth	r2, r2
   17964:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
	conn->apto_expire = 0;
   17968:	2000      	movs	r0, #0
   1796a:	f8a3 004c 	strh.w	r0, [r3, #76]	; 0x4c
	conn->appto_expire = 0;
   1796e:	f8a3 0048 	strh.w	r0, [r3, #72]	; 0x48
	conn->llcp_req = 0;
   17972:	f883 0074 	strb.w	r0, [r3, #116]	; 0x74
	conn->llcp_ack = 0;
   17976:	f883 0075 	strb.w	r0, [r3, #117]	; 0x75
	conn->llcp_version.tx = 0;
   1797a:	f893 20a8 	ldrb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_version.rx = 0;
   1797e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   17982:	f360 0241 	bfi	r2, r0, #1, #1
   17986:	f883 20a8 	strb.w	r2, [r3, #168]	; 0xa8
	conn->llcp_terminate.req = 0;
   1798a:	f883 00b0 	strb.w	r0, [r3, #176]	; 0xb0
	conn->llcp_terminate.ack = 0;
   1798e:	f883 00b1 	strb.w	r0, [r3, #177]	; 0xb1
	conn->llcp_terminate.reason_peer = 0;
   17992:	f883 00b3 	strb.w	r0, [r3, #179]	; 0xb3
	conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   17996:	f8c3 90b4 	str.w	r9, [r3, #180]	; 0xb4
	conn->llcp_conn_param.req = 0;
   1799a:	f883 00c0 	strb.w	r0, [r3, #192]	; 0xc0
	conn->llcp_conn_param.ack = 0;
   1799e:	f883 00c1 	strb.w	r0, [r3, #193]	; 0xc1
	conn->llcp_length.req = 0;
   179a2:	f883 00e8 	strb.w	r0, [r3, #232]	; 0xe8
	conn->llcp_length.ack = 0;
   179a6:	f883 00e9 	strb.w	r0, [r3, #233]	; 0xe9
	conn->llcp_phy.req = 0;
   179aa:	f883 00f4 	strb.w	r0, [r3, #244]	; 0xf4
	conn->llcp_phy.ack = 0;
   179ae:	f883 00f5 	strb.w	r0, [r3, #245]	; 0xf5
	conn->sn = 0;
   179b2:	f893 20f8 	ldrb.w	r2, [r3, #248]	; 0xf8
	conn->empty = 0;
   179b6:	f002 0280 	and.w	r2, r2, #128	; 0x80
   179ba:	f360 12c7 	bfi	r2, r0, #7, #1
   179be:	f883 20f8 	strb.w	r2, [r3, #248]	; 0xf8
	conn->pkt_tx_head = NULL;
   179c2:	f8c3 013c 	str.w	r0, [r3, #316]	; 0x13c
	conn->pkt_tx_ctrl = NULL;
   179c6:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
	conn->pkt_tx_ctrl_last = NULL;
   179ca:	f8c3 0144 	str.w	r0, [r3, #324]	; 0x144
	conn->pkt_tx_data = NULL;
   179ce:	f8c3 0148 	str.w	r0, [r3, #328]	; 0x148
	conn->pkt_tx_last = NULL;
   179d2:	f8c3 014c 	str.w	r0, [r3, #332]	; 0x14c
	conn->packet_tx_head_len = 0;
   179d6:	f883 0150 	strb.w	r0, [r3, #336]	; 0x150
	conn->packet_tx_head_offset = 0;
   179da:	f883 0151 	strb.w	r0, [r3, #337]	; 0x151
	_radio.scanner.conn = conn;
   179de:	4a08      	ldr	r2, [pc, #32]	; (17a00 <radio_connect_enable+0x258>)
   179e0:	f8c2 30fc 	str.w	r3, [r2, #252]	; 0xfc
	return 0;
   179e4:	e6e8      	b.n	177b8 <radio_connect_enable+0x10>
		mem_release(link, &_radio.link_rx_free);
   179e6:	4907      	ldr	r1, [pc, #28]	; (17a04 <radio_connect_enable+0x25c>)
   179e8:	4648      	mov	r0, r9
   179ea:	f7f7 f808 	bl	e9fe <mem_release>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   179ee:	2007      	movs	r0, #7
   179f0:	e6e2      	b.n	177b8 <radio_connect_enable+0x10>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   179f2:	2007      	movs	r0, #7
   179f4:	e6e0      	b.n	177b8 <radio_connect_enable+0x10>
   179f6:	bf00      	nop
   179f8:	1afd498d 	.word	0x1afd498d
   179fc:	00000007 	.word	0x00000007
   17a00:	20000f84 	.word	0x20000f84
   17a04:	200010c8 	.word	0x200010c8
   17a08:	2000108c 	.word	0x2000108c
   17a0c:	3b9aca00 	.word	0x3b9aca00
   17a10:	026259ff 	.word	0x026259ff
   17a14:	01c9c37f 	.word	0x01c9c37f

00017a18 <ll_conn_update>:
{
   17a18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   17a1c:	460c      	mov	r4, r1
   17a1e:	4690      	mov	r8, r2
   17a20:	461f      	mov	r7, r3
   17a22:	f8bd 6018 	ldrh.w	r6, [sp, #24]
   17a26:	f8bd 501c 	ldrh.w	r5, [sp, #28]
	conn = connection_get(handle);
   17a2a:	f7f9 fdb3 	bl	11594 <connection_get>
	if (!conn) {
   17a2e:	2800      	cmp	r0, #0
   17a30:	d078      	beq.n	17b24 <ll_conn_update+0x10c>
   17a32:	4603      	mov	r3, r0
	if (!cmd) {
   17a34:	b984      	cbnz	r4, 17a58 <ll_conn_update+0x40>
		if (conn->common.fex_valid &&
   17a36:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   17a3a:	f012 0f20 	tst.w	r2, #32
   17a3e:	d007      	beq.n	17a50 <ll_conn_update+0x38>
		    (conn->llcp_features &
   17a40:	f8d0 20a4 	ldr.w	r2, [r0, #164]	; 0xa4
		if (conn->common.fex_valid &&
   17a44:	f012 0f02 	tst.w	r2, #2
   17a48:	d002      	beq.n	17a50 <ll_conn_update+0x38>
			cmd++;
   17a4a:	3401      	adds	r4, #1
   17a4c:	b2e4      	uxtb	r4, r4
   17a4e:	e003      	b.n	17a58 <ll_conn_update+0x40>
		} else if (conn->role) {
   17a50:	f993 201d 	ldrsb.w	r2, [r3, #29]
   17a54:	2a00      	cmp	r2, #0
   17a56:	db68      	blt.n	17b2a <ll_conn_update+0x112>
	if (!cmd) {
   17a58:	bb1c      	cbnz	r4, 17aa2 <ll_conn_update+0x8a>
		if (conn->llcp_req != conn->llcp_ack) {
   17a5a:	f893 2074 	ldrb.w	r2, [r3, #116]	; 0x74
   17a5e:	f893 1075 	ldrb.w	r1, [r3, #117]	; 0x75
   17a62:	428a      	cmp	r2, r1
   17a64:	d002      	beq.n	17a6c <ll_conn_update+0x54>
			return 1;
   17a66:	2001      	movs	r0, #1
   17a68:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		conn->llcp.conn_upd.win_size = 1;
   17a6c:	2401      	movs	r4, #1
   17a6e:	f883 4088 	strb.w	r4, [r3, #136]	; 0x88
		conn->llcp.conn_upd.win_offset_us = 0;
   17a72:	2000      	movs	r0, #0
   17a74:	f8c3 0084 	str.w	r0, [r3, #132]	; 0x84
		conn->llcp.conn_upd.interval = interval;
   17a78:	f8a3 707a 	strh.w	r7, [r3, #122]	; 0x7a
		conn->llcp.conn_upd.latency = latency;
   17a7c:	f8a3 607c 	strh.w	r6, [r3, #124]	; 0x7c
		conn->llcp.conn_upd.timeout = timeout;
   17a80:	f8a3 507e 	strh.w	r5, [r3, #126]	; 0x7e
		conn->llcp.conn_upd.state = LLCP_CUI_STATE_USE;
   17a84:	f893 1078 	ldrb.w	r1, [r3, #120]	; 0x78
   17a88:	f364 0101 	bfi	r1, r4, #0, #2
		conn->llcp.conn_upd.is_internal = 0;
   17a8c:	f360 0182 	bfi	r1, r0, #2, #1
   17a90:	f883 1078 	strb.w	r1, [r3, #120]	; 0x78
		conn->llcp_type = LLCP_CONN_UPD;
   17a94:	f883 4076 	strb.w	r4, [r3, #118]	; 0x76
		conn->llcp_req++;
   17a98:	4422      	add	r2, r4
   17a9a:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74
   17a9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		cmd--;
   17aa2:	3c01      	subs	r4, #1
		if (cmd) {
   17aa4:	f014 04ff 	ands.w	r4, r4, #255	; 0xff
   17aa8:	d01c      	beq.n	17ae4 <ll_conn_update+0xcc>
			if ((conn->llcp_conn_param.req ==
   17aaa:	f893 10c0 	ldrb.w	r1, [r3, #192]	; 0xc0
			     conn->llcp_conn_param.ack) ||
   17aae:	f893 20c1 	ldrb.w	r2, [r3, #193]	; 0xc1
			if ((conn->llcp_conn_param.req ==
   17ab2:	4291      	cmp	r1, r2
   17ab4:	d03c      	beq.n	17b30 <ll_conn_update+0x118>
			    (conn->llcp_conn_param.state !=
   17ab6:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   17aba:	f002 0207 	and.w	r2, r2, #7
			     conn->llcp_conn_param.ack) ||
   17abe:	2a03      	cmp	r2, #3
   17ac0:	d002      	beq.n	17ac8 <ll_conn_update+0xb0>
				return 1;
   17ac2:	2001      	movs	r0, #1
   17ac4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = status;
   17ac8:	f883 80c3 	strb.w	r8, [r3, #195]	; 0xc3
			conn->llcp_conn_param.state = cmd;
   17acc:	f893 20c2 	ldrb.w	r2, [r3, #194]	; 0xc2
   17ad0:	f364 0202 	bfi	r2, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   17ad4:	b2d2      	uxtb	r2, r2
   17ad6:	f042 0208 	orr.w	r2, r2, #8
   17ada:	f883 20c2 	strb.w	r2, [r3, #194]	; 0xc2
	return 0;
   17ade:	2000      	movs	r0, #0
   17ae0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			if (conn->llcp_conn_param.req !=
   17ae4:	f893 20c0 	ldrb.w	r2, [r3, #192]	; 0xc0
			    conn->llcp_conn_param.ack) {
   17ae8:	f893 10c1 	ldrb.w	r1, [r3, #193]	; 0xc1
			if (conn->llcp_conn_param.req !=
   17aec:	428a      	cmp	r2, r1
   17aee:	d002      	beq.n	17af6 <ll_conn_update+0xde>
				return 1;
   17af0:	2001      	movs	r0, #1
}
   17af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			conn->llcp_conn_param.status = 0;
   17af6:	2000      	movs	r0, #0
   17af8:	f883 00c3 	strb.w	r0, [r3, #195]	; 0xc3
			conn->llcp_conn_param.interval = interval;
   17afc:	f8a3 70c4 	strh.w	r7, [r3, #196]	; 0xc4
			conn->llcp_conn_param.latency = latency;
   17b00:	f8a3 60c6 	strh.w	r6, [r3, #198]	; 0xc6
			conn->llcp_conn_param.timeout = timeout;
   17b04:	f8a3 50c8 	strh.w	r5, [r3, #200]	; 0xc8
			conn->llcp_conn_param.state = cmd;
   17b08:	f893 10c2 	ldrb.w	r1, [r3, #194]	; 0xc2
   17b0c:	f364 0102 	bfi	r1, r4, #0, #3
			conn->llcp_conn_param.cmd = 1;
   17b10:	b2c9      	uxtb	r1, r1
   17b12:	f041 0108 	orr.w	r1, r1, #8
   17b16:	f883 10c2 	strb.w	r1, [r3, #194]	; 0xc2
			conn->llcp_conn_param.req++;
   17b1a:	3201      	adds	r2, #1
   17b1c:	f883 20c0 	strb.w	r2, [r3, #192]	; 0xc0
   17b20:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 1;
   17b24:	2001      	movs	r0, #1
   17b26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
			return 1;
   17b2a:	2001      	movs	r0, #1
   17b2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return 1;
   17b30:	2001      	movs	r0, #1
   17b32:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	...

00017b38 <ll_chm_update>:
{
   17b38:	b570      	push	{r4, r5, r6, lr}
   17b3a:	4606      	mov	r6, r0
	memcpy(&_radio.data_chan_map[0], chm,
   17b3c:	4c1c      	ldr	r4, [pc, #112]	; (17bb0 <ll_chm_update+0x78>)
   17b3e:	f504 758b 	add.w	r5, r4, #278	; 0x116
   17b42:	2205      	movs	r2, #5
   17b44:	4601      	mov	r1, r0
   17b46:	4628      	mov	r0, r5
   17b48:	f7e8 fbba 	bl	2c0 <memcpy>
		util_ones_count_get(&_radio.data_chan_map[0],
   17b4c:	2105      	movs	r1, #5
   17b4e:	4628      	mov	r0, r5
   17b50:	f7f6 ffbd 	bl	eace <util_ones_count_get>
	_radio.data_chan_count =
   17b54:	f884 011b 	strb.w	r0, [r4, #283]	; 0x11b
	instance = _radio.connection_count;
   17b58:	f894 310c 	ldrb.w	r3, [r4, #268]	; 0x10c
	while (instance--) {
   17b5c:	e000      	b.n	17b60 <ll_chm_update+0x28>
{
   17b5e:	462b      	mov	r3, r5
	while (instance--) {
   17b60:	1e5d      	subs	r5, r3, #1
   17b62:	b2ed      	uxtb	r5, r5
   17b64:	b303      	cbz	r3, 17ba8 <ll_chm_update+0x70>
		conn = connection_get(instance);
   17b66:	4628      	mov	r0, r5
   17b68:	f7f9 fd14 	bl	11594 <connection_get>
		if (!conn || conn->role) {
   17b6c:	4604      	mov	r4, r0
   17b6e:	2800      	cmp	r0, #0
   17b70:	d0f5      	beq.n	17b5e <ll_chm_update+0x26>
   17b72:	f990 301d 	ldrsb.w	r3, [r0, #29]
   17b76:	2b00      	cmp	r3, #0
   17b78:	dbf1      	blt.n	17b5e <ll_chm_update+0x26>
		if (conn->llcp_req != conn->llcp_ack) {
   17b7a:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17b7e:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   17b82:	429a      	cmp	r2, r3
   17b84:	d112      	bne.n	17bac <ll_chm_update+0x74>
		memcpy(&conn->llcp.chan_map.chm[0], chm,
   17b86:	2205      	movs	r2, #5
   17b88:	4631      	mov	r1, r6
   17b8a:	3079      	adds	r0, #121	; 0x79
   17b8c:	f7e8 fb98 	bl	2c0 <memcpy>
		conn->llcp.chan_map.initiate = 1;
   17b90:	2301      	movs	r3, #1
   17b92:	f884 3078 	strb.w	r3, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_CHAN_MAP;
   17b96:	2302      	movs	r3, #2
   17b98:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
		conn->llcp_req++;
   17b9c:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17ba0:	3301      	adds	r3, #1
   17ba2:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   17ba6:	e7da      	b.n	17b5e <ll_chm_update+0x26>
	return 0;
   17ba8:	2000      	movs	r0, #0
   17baa:	bd70      	pop	{r4, r5, r6, pc}
			return 1;
   17bac:	2001      	movs	r0, #1
}
   17bae:	bd70      	pop	{r4, r5, r6, pc}
   17bb0:	20000f84 	.word	0x20000f84

00017bb4 <ll_chm_get>:
{
   17bb4:	b538      	push	{r3, r4, r5, lr}
   17bb6:	460d      	mov	r5, r1
	conn = connection_get(handle);
   17bb8:	f7f9 fcec 	bl	11594 <connection_get>
	if (!conn) {
   17bbc:	4604      	mov	r4, r0
   17bbe:	b160      	cbz	r0, 17bda <ll_chm_get+0x26>
		conn->chm_update = 0;
   17bc0:	2300      	movs	r3, #0
   17bc2:	7723      	strb	r3, [r4, #28]
		memcpy(chm, conn->data_chan_map, sizeof(conn->data_chan_map));
   17bc4:	2205      	movs	r2, #5
   17bc6:	f104 0117 	add.w	r1, r4, #23
   17bca:	4628      	mov	r0, r5
   17bcc:	f7e8 fb78 	bl	2c0 <memcpy>
	} while (conn->chm_update);
   17bd0:	7f23      	ldrb	r3, [r4, #28]
   17bd2:	2b00      	cmp	r3, #0
   17bd4:	d1f4      	bne.n	17bc0 <ll_chm_get+0xc>
	return 0;
   17bd6:	2000      	movs	r0, #0
   17bd8:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17bda:	2001      	movs	r0, #1
}
   17bdc:	bd38      	pop	{r3, r4, r5, pc}

00017bde <ll_start_enc_req_send>:
{
   17bde:	b570      	push	{r4, r5, r6, lr}
   17be0:	460d      	mov	r5, r1
   17be2:	4616      	mov	r6, r2
	conn = connection_get(handle);
   17be4:	f7f9 fcd6 	bl	11594 <connection_get>
	if (!conn) {
   17be8:	2800      	cmp	r0, #0
   17bea:	d03e      	beq.n	17c6a <ll_start_enc_req_send+0x8c>
   17bec:	4604      	mov	r4, r0
	if (error_code) {
   17bee:	b32d      	cbz	r5, 17c3c <ll_start_enc_req_send+0x5e>
		if (conn->refresh == 0) {
   17bf0:	f890 30f8 	ldrb.w	r3, [r0, #248]	; 0xf8
   17bf4:	f013 0f40 	tst.w	r3, #64	; 0x40
   17bf8:	d111      	bne.n	17c1e <ll_start_enc_req_send+0x40>
			if (conn->llcp_req != conn->llcp_ack) {
   17bfa:	f890 3074 	ldrb.w	r3, [r0, #116]	; 0x74
   17bfe:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17c02:	4293      	cmp	r3, r2
   17c04:	d001      	beq.n	17c0a <ll_start_enc_req_send+0x2c>
				return 1;
   17c06:	2001      	movs	r0, #1
   17c08:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp.encryption.error_code = error_code;
   17c0a:	f880 5078 	strb.w	r5, [r0, #120]	; 0x78
			conn->llcp_type = LLCP_ENCRYPTION;
   17c0e:	2203      	movs	r2, #3
   17c10:	f880 2076 	strb.w	r2, [r0, #118]	; 0x76
			conn->llcp_req++;
   17c14:	3301      	adds	r3, #1
   17c16:	f880 3074 	strb.w	r3, [r0, #116]	; 0x74
	return 0;
   17c1a:	2000      	movs	r0, #0
   17c1c:	bd70      	pop	{r4, r5, r6, pc}
			if (conn->llcp_terminate.ack !=
   17c1e:	f890 20b1 	ldrb.w	r2, [r0, #177]	; 0xb1
			    conn->llcp_terminate.req) {
   17c22:	f890 30b0 	ldrb.w	r3, [r0, #176]	; 0xb0
			if (conn->llcp_terminate.ack !=
   17c26:	429a      	cmp	r2, r3
   17c28:	d001      	beq.n	17c2e <ll_start_enc_req_send+0x50>
				return 1;
   17c2a:	2001      	movs	r0, #1
   17c2c:	bd70      	pop	{r4, r5, r6, pc}
			conn->llcp_terminate.reason_own = error_code;
   17c2e:	f880 50b2 	strb.w	r5, [r0, #178]	; 0xb2
			conn->llcp_terminate.req++;
   17c32:	3301      	adds	r3, #1
   17c34:	f880 30b0 	strb.w	r3, [r0, #176]	; 0xb0
	return 0;
   17c38:	2000      	movs	r0, #0
   17c3a:	bd70      	pop	{r4, r5, r6, pc}
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   17c3c:	2210      	movs	r2, #16
   17c3e:	4631      	mov	r1, r6
   17c40:	3083      	adds	r0, #131	; 0x83
   17c42:	f7e8 fb3d 	bl	2c0 <memcpy>
		if (conn->llcp_req != conn->llcp_ack) {
   17c46:	f894 3074 	ldrb.w	r3, [r4, #116]	; 0x74
   17c4a:	f894 2075 	ldrb.w	r2, [r4, #117]	; 0x75
   17c4e:	4293      	cmp	r3, r2
   17c50:	d001      	beq.n	17c56 <ll_start_enc_req_send+0x78>
			return 1;
   17c52:	2001      	movs	r0, #1
}
   17c54:	bd70      	pop	{r4, r5, r6, pc}
		conn->llcp.encryption.error_code = 0;
   17c56:	2000      	movs	r0, #0
   17c58:	f884 0078 	strb.w	r0, [r4, #120]	; 0x78
		conn->llcp_type = LLCP_ENCRYPTION;
   17c5c:	2203      	movs	r2, #3
   17c5e:	f884 2076 	strb.w	r2, [r4, #118]	; 0x76
		conn->llcp_req++;
   17c62:	3301      	adds	r3, #1
   17c64:	f884 3074 	strb.w	r3, [r4, #116]	; 0x74
   17c68:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17c6a:	2001      	movs	r0, #1
   17c6c:	bd70      	pop	{r4, r5, r6, pc}

00017c6e <ll_feature_req_send>:
{
   17c6e:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17c70:	f7f9 fc90 	bl	11594 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17c74:	b178      	cbz	r0, 17c96 <ll_feature_req_send+0x28>
   17c76:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17c7a:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17c7e:	428a      	cmp	r2, r1
   17c80:	d001      	beq.n	17c86 <ll_feature_req_send+0x18>
		return 1;
   17c82:	2001      	movs	r0, #1
}
   17c84:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_FEATURE_EXCHANGE;
   17c86:	2104      	movs	r1, #4
   17c88:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17c8c:	3201      	adds	r2, #1
   17c8e:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17c92:	2000      	movs	r0, #0
   17c94:	bd08      	pop	{r3, pc}
		return 1;
   17c96:	2001      	movs	r0, #1
   17c98:	bd08      	pop	{r3, pc}

00017c9a <ll_version_ind_send>:
{
   17c9a:	b508      	push	{r3, lr}
	conn = connection_get(handle);
   17c9c:	f7f9 fc7a 	bl	11594 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack)) {
   17ca0:	b178      	cbz	r0, 17cc2 <ll_version_ind_send+0x28>
   17ca2:	f890 2074 	ldrb.w	r2, [r0, #116]	; 0x74
   17ca6:	f890 1075 	ldrb.w	r1, [r0, #117]	; 0x75
   17caa:	428a      	cmp	r2, r1
   17cac:	d001      	beq.n	17cb2 <ll_version_ind_send+0x18>
		return 1;
   17cae:	2001      	movs	r0, #1
}
   17cb0:	bd08      	pop	{r3, pc}
	conn->llcp_type = LLCP_VERSION_EXCHANGE;
   17cb2:	2105      	movs	r1, #5
   17cb4:	f880 1076 	strb.w	r1, [r0, #118]	; 0x76
	conn->llcp_req++;
   17cb8:	3201      	adds	r2, #1
   17cba:	f880 2074 	strb.w	r2, [r0, #116]	; 0x74
	return 0;
   17cbe:	2000      	movs	r0, #0
   17cc0:	bd08      	pop	{r3, pc}
		return 1;
   17cc2:	2001      	movs	r0, #1
   17cc4:	bd08      	pop	{r3, pc}

00017cc6 <ll_terminate_ind_send>:
{
   17cc6:	b510      	push	{r4, lr}
   17cc8:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17cca:	f7f9 fc63 	bl	11594 <connection_get>
	if (!conn || (conn->llcp_terminate.ack != conn->llcp_terminate.req)) {
   17cce:	b170      	cbz	r0, 17cee <ll_terminate_ind_send+0x28>
   17cd0:	f890 10b1 	ldrb.w	r1, [r0, #177]	; 0xb1
   17cd4:	f890 20b0 	ldrb.w	r2, [r0, #176]	; 0xb0
   17cd8:	4291      	cmp	r1, r2
   17cda:	d001      	beq.n	17ce0 <ll_terminate_ind_send+0x1a>
		return 1;
   17cdc:	2001      	movs	r0, #1
}
   17cde:	bd10      	pop	{r4, pc}
	conn->llcp_terminate.reason_own = reason;
   17ce0:	f880 40b2 	strb.w	r4, [r0, #178]	; 0xb2
	conn->llcp_terminate.req++;
   17ce4:	3201      	adds	r2, #1
   17ce6:	f880 20b0 	strb.w	r2, [r0, #176]	; 0xb0
	return 0;
   17cea:	2000      	movs	r0, #0
   17cec:	bd10      	pop	{r4, pc}
		return 1;
   17cee:	2001      	movs	r0, #1
   17cf0:	bd10      	pop	{r4, pc}

00017cf2 <ll_tx_power_level_get>:
{
   17cf2:	b510      	push	{r4, lr}
   17cf4:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17cf6:	f7f9 fc4d 	bl	11594 <connection_get>
	if (!conn) {
   17cfa:	b110      	cbz	r0, 17d02 <ll_tx_power_level_get+0x10>
	*tx_power_level = 0;
   17cfc:	2000      	movs	r0, #0
   17cfe:	7020      	strb	r0, [r4, #0]
	return 0;
   17d00:	bd10      	pop	{r4, pc}
		return 1;
   17d02:	2001      	movs	r0, #1
}
   17d04:	bd10      	pop	{r4, pc}

00017d06 <ll_tx_power_get>:
	*min = 0;
   17d06:	2300      	movs	r3, #0
   17d08:	7003      	strb	r3, [r0, #0]
	*max = 0;
   17d0a:	700b      	strb	r3, [r1, #0]
   17d0c:	4770      	bx	lr
	...

00017d10 <ll_apto_get>:
{
   17d10:	b510      	push	{r4, lr}
   17d12:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17d14:	f7f9 fc3e 	bl	11594 <connection_get>
	if (!conn) {
   17d18:	b188      	cbz	r0, 17d3e <ll_apto_get+0x2e>
	*apto = conn->apto_reload * conn->conn_interval * 125 / 1000;
   17d1a:	f8b0 104a 	ldrh.w	r1, [r0, #74]	; 0x4a
   17d1e:	8c83      	ldrh	r3, [r0, #36]	; 0x24
   17d20:	fb03 f301 	mul.w	r3, r3, r1
   17d24:	ebc3 1243 	rsb	r2, r3, r3, lsl #5
   17d28:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   17d2c:	4a05      	ldr	r2, [pc, #20]	; (17d44 <ll_apto_get+0x34>)
   17d2e:	fb82 1203 	smull	r1, r2, r2, r3
   17d32:	17db      	asrs	r3, r3, #31
   17d34:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   17d38:	8023      	strh	r3, [r4, #0]
	return 0;
   17d3a:	2000      	movs	r0, #0
   17d3c:	bd10      	pop	{r4, pc}
		return 1;
   17d3e:	2001      	movs	r0, #1
}
   17d40:	bd10      	pop	{r4, pc}
   17d42:	bf00      	nop
   17d44:	10624dd3 	.word	0x10624dd3

00017d48 <ll_apto_set>:
{
   17d48:	b510      	push	{r4, lr}
   17d4a:	460c      	mov	r4, r1
	conn = connection_get(handle);
   17d4c:	f7f9 fc22 	bl	11594 <connection_get>
	if (!conn) {
   17d50:	b178      	cbz	r0, 17d72 <ll_apto_set+0x2a>
	conn->apto_reload = RADIO_CONN_EVENTS(apto * 10 * 1000,
   17d52:	8c81      	ldrh	r1, [r0, #36]	; 0x24
   17d54:	f240 43e2 	movw	r3, #1250	; 0x4e2
   17d58:	fb03 f301 	mul.w	r3, r3, r1
   17d5c:	f242 7110 	movw	r1, #10000	; 0x2710
   17d60:	fb01 3404 	mla	r4, r1, r4, r3
   17d64:	3c01      	subs	r4, #1
   17d66:	fb94 f4f3 	sdiv	r4, r4, r3
   17d6a:	f8a0 404a 	strh.w	r4, [r0, #74]	; 0x4a
	return 0;
   17d6e:	2000      	movs	r0, #0
   17d70:	bd10      	pop	{r4, pc}
		return 1;
   17d72:	2001      	movs	r0, #1
}
   17d74:	bd10      	pop	{r4, pc}

00017d76 <ll_length_req_send>:
{
   17d76:	b538      	push	{r3, r4, r5, lr}
   17d78:	460d      	mov	r5, r1
   17d7a:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17d7c:	f7f9 fc0a 	bl	11594 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17d80:	b1f0      	cbz	r0, 17dc0 <ll_length_req_send+0x4a>
   17d82:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17d86:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17d8a:	4291      	cmp	r1, r2
   17d8c:	d001      	beq.n	17d92 <ll_length_req_send+0x1c>
		return 1;
   17d8e:	2001      	movs	r0, #1
   17d90:	bd38      	pop	{r3, r4, r5, pc}
	    (conn->llcp_length.req != conn->llcp_length.ack)) {
   17d92:	f890 20e8 	ldrb.w	r2, [r0, #232]	; 0xe8
   17d96:	f890 10e9 	ldrb.w	r1, [r0, #233]	; 0xe9
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17d9a:	428a      	cmp	r2, r1
   17d9c:	d001      	beq.n	17da2 <ll_length_req_send+0x2c>
		return 1;
   17d9e:	2001      	movs	r0, #1
}
   17da0:	bd38      	pop	{r3, r4, r5, pc}
	conn->llcp_length.state = LLCP_LENGTH_STATE_REQ;
   17da2:	f890 10ea 	ldrb.w	r1, [r0, #234]	; 0xea
   17da6:	f36f 0101 	bfc	r1, #0, #2
   17daa:	f880 10ea 	strb.w	r1, [r0, #234]	; 0xea
	conn->llcp_length.tx_octets = tx_octets;
   17dae:	f8a0 50ee 	strh.w	r5, [r0, #238]	; 0xee
	conn->llcp_length.tx_time = tx_time;
   17db2:	f8a0 40f2 	strh.w	r4, [r0, #242]	; 0xf2
	conn->llcp_length.req++;
   17db6:	3201      	adds	r2, #1
   17db8:	f880 20e8 	strb.w	r2, [r0, #232]	; 0xe8
	return 0;
   17dbc:	2000      	movs	r0, #0
   17dbe:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17dc0:	2001      	movs	r0, #1
   17dc2:	bd38      	pop	{r3, r4, r5, pc}

00017dc4 <ll_length_default_get>:
	*max_tx_octets = _radio.default_tx_octets;
   17dc4:	4b03      	ldr	r3, [pc, #12]	; (17dd4 <ll_length_default_get+0x10>)
   17dc6:	f8b3 211e 	ldrh.w	r2, [r3, #286]	; 0x11e
   17dca:	8002      	strh	r2, [r0, #0]
	*max_tx_time = _radio.default_tx_time;
   17dcc:	f8b3 3120 	ldrh.w	r3, [r3, #288]	; 0x120
   17dd0:	800b      	strh	r3, [r1, #0]
   17dd2:	4770      	bx	lr
   17dd4:	20000f84 	.word	0x20000f84

00017dd8 <ll_length_default_set>:
	_radio.default_tx_octets = max_tx_octets;
   17dd8:	4b03      	ldr	r3, [pc, #12]	; (17de8 <ll_length_default_set+0x10>)
   17dda:	f8a3 011e 	strh.w	r0, [r3, #286]	; 0x11e
	_radio.default_tx_time = max_tx_time;
   17dde:	f8a3 1120 	strh.w	r1, [r3, #288]	; 0x120
}
   17de2:	2000      	movs	r0, #0
   17de4:	4770      	bx	lr
   17de6:	bf00      	nop
   17de8:	20000f84 	.word	0x20000f84

00017dec <ll_length_max_get>:
{
   17dec:	b410      	push	{r4}
	*max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17dee:	241b      	movs	r4, #27
   17df0:	8004      	strh	r4, [r0, #0]
	*max_tx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17df2:	f44f 70a4 	mov.w	r0, #328	; 0x148
   17df6:	8008      	strh	r0, [r1, #0]
	*max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MAX;
   17df8:	8014      	strh	r4, [r2, #0]
	*max_rx_time = RADIO_PKT_TIME(RADIO_LL_LENGTH_OCTETS_RX_MAX, BIT(2));
   17dfa:	8018      	strh	r0, [r3, #0]
}
   17dfc:	bc10      	pop	{r4}
   17dfe:	4770      	bx	lr

00017e00 <ll_phy_get>:
{
   17e00:	b538      	push	{r3, r4, r5, lr}
   17e02:	460d      	mov	r5, r1
   17e04:	4614      	mov	r4, r2
	conn = connection_get(handle);
   17e06:	f7f9 fbc5 	bl	11594 <connection_get>
	if (!conn) {
   17e0a:	b158      	cbz	r0, 17e24 <ll_phy_get+0x24>
	*tx = conn->phy_tx;
   17e0c:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   17e10:	f3c3 03c2 	ubfx	r3, r3, #3, #3
   17e14:	702b      	strb	r3, [r5, #0]
	*rx = conn->phy_rx;
   17e16:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   17e1a:	f3c3 0302 	ubfx	r3, r3, #0, #3
   17e1e:	7023      	strb	r3, [r4, #0]
	return 0;
   17e20:	2000      	movs	r0, #0
   17e22:	bd38      	pop	{r3, r4, r5, pc}
		return 1;
   17e24:	2001      	movs	r0, #1
}
   17e26:	bd38      	pop	{r3, r4, r5, pc}

00017e28 <ll_phy_default_set>:
	_radio.default_phy_tx = tx;
   17e28:	4b03      	ldr	r3, [pc, #12]	; (17e38 <ll_phy_default_set+0x10>)
   17e2a:	f8a3 0122 	strh.w	r0, [r3, #290]	; 0x122
	_radio.default_phy_rx = rx;
   17e2e:	f8a3 1124 	strh.w	r1, [r3, #292]	; 0x124
}
   17e32:	2000      	movs	r0, #0
   17e34:	4770      	bx	lr
   17e36:	bf00      	nop
   17e38:	20000f84 	.word	0x20000f84

00017e3c <ll_phy_req_send>:
{
   17e3c:	b570      	push	{r4, r5, r6, lr}
   17e3e:	460e      	mov	r6, r1
   17e40:	4615      	mov	r5, r2
   17e42:	461c      	mov	r4, r3
	conn = connection_get(handle);
   17e44:	f7f9 fba6 	bl	11594 <connection_get>
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17e48:	b338      	cbz	r0, 17e9a <ll_phy_req_send+0x5e>
   17e4a:	4603      	mov	r3, r0
   17e4c:	f890 1074 	ldrb.w	r1, [r0, #116]	; 0x74
   17e50:	f890 2075 	ldrb.w	r2, [r0, #117]	; 0x75
   17e54:	4291      	cmp	r1, r2
   17e56:	d001      	beq.n	17e5c <ll_phy_req_send+0x20>
		return 1;
   17e58:	2001      	movs	r0, #1
   17e5a:	bd70      	pop	{r4, r5, r6, pc}
	    (conn->llcp_phy.req != conn->llcp_phy.ack)) {
   17e5c:	f890 20f4 	ldrb.w	r2, [r0, #244]	; 0xf4
   17e60:	f890 10f5 	ldrb.w	r1, [r0, #245]	; 0xf5
	if (!conn || (conn->llcp_req != conn->llcp_ack) ||
   17e64:	428a      	cmp	r2, r1
   17e66:	d001      	beq.n	17e6c <ll_phy_req_send+0x30>
		return 1;
   17e68:	2001      	movs	r0, #1
}
   17e6a:	bd70      	pop	{r4, r5, r6, pc}
	conn->llcp_phy.state = LLCP_PHY_STATE_REQ;
   17e6c:	f890 10f6 	ldrb.w	r1, [r0, #246]	; 0xf6
	conn->llcp_phy.cmd = 1;
   17e70:	f890 00f7 	ldrb.w	r0, [r0, #247]	; 0xf7
	conn->llcp_phy.tx = tx;
   17e74:	f001 01fc 	and.w	r1, r1, #252	; 0xfc
   17e78:	f366 0184 	bfi	r1, r6, #2, #3
	conn->llcp_phy.flags = flags;
   17e7c:	f040 0002 	orr.w	r0, r0, #2
   17e80:	f365 0000 	bfi	r0, r5, #0, #1
   17e84:	f883 00f7 	strb.w	r0, [r3, #247]	; 0xf7
	conn->llcp_phy.rx = rx;
   17e88:	f364 1147 	bfi	r1, r4, #5, #3
   17e8c:	f883 10f6 	strb.w	r1, [r3, #246]	; 0xf6
	conn->llcp_phy.req++;
   17e90:	3201      	adds	r2, #1
   17e92:	f883 20f4 	strb.w	r2, [r3, #244]	; 0xf4
	return 0;
   17e96:	2000      	movs	r0, #0
   17e98:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
   17e9a:	2001      	movs	r0, #1
   17e9c:	bd70      	pop	{r4, r5, r6, pc}
	...

00017ea0 <radio_rx_get>:
{
   17ea0:	b5f0      	push	{r4, r5, r6, r7, lr}
   17ea2:	b083      	sub	sp, #12
   17ea4:	4606      	mov	r6, r0
   17ea6:	4608      	mov	r0, r1
	if (_radio.link_rx_head != _radio.link_rx_tail) {
   17ea8:	4b1b      	ldr	r3, [pc, #108]	; (17f18 <radio_rx_get+0x78>)
   17eaa:	f8d3 2148 	ldr.w	r2, [r3, #328]	; 0x148
   17eae:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17eb2:	429a      	cmp	r2, r3
   17eb4:	d024      	beq.n	17f00 <radio_rx_get+0x60>
		_radio_pdu_node_rx = *((void **)_radio.link_rx_head + 1);
   17eb6:	6857      	ldr	r7, [r2, #4]
		cmplt = tx_cmplt_get(handle,
   17eb8:	783a      	ldrb	r2, [r7, #0]
   17eba:	4918      	ldr	r1, [pc, #96]	; (17f1c <radio_rx_get+0x7c>)
   17ebc:	f7f9 fb0c 	bl	114d8 <tx_cmplt_get>
		if (!cmplt) {
   17ec0:	4605      	mov	r5, r0
   17ec2:	b9d0      	cbnz	r0, 17efa <radio_rx_get+0x5a>
			first = _radio.packet_release_first;
   17ec4:	4b14      	ldr	r3, [pc, #80]	; (17f18 <radio_rx_get+0x78>)
   17ec6:	f893 3173 	ldrb.w	r3, [r3, #371]	; 0x173
   17eca:	f88d 3005 	strb.w	r3, [sp, #5]
			cmplt_curr = 0;
   17ece:	4604      	mov	r4, r0
   17ed0:	e000      	b.n	17ed4 <radio_rx_get+0x34>
   17ed2:	4604      	mov	r4, r0
				cmplt_curr = tx_cmplt_get(&handle, &first,
   17ed4:	4b10      	ldr	r3, [pc, #64]	; (17f18 <radio_rx_get+0x78>)
   17ed6:	f893 2174 	ldrb.w	r2, [r3, #372]	; 0x174
   17eda:	f10d 0105 	add.w	r1, sp, #5
   17ede:	f10d 0006 	add.w	r0, sp, #6
   17ee2:	f7f9 faf9 	bl	114d8 <tx_cmplt_get>
				 (cmplt_prev != cmplt_curr));
   17ee6:	2c00      	cmp	r4, #0
   17ee8:	d1f3      	bne.n	17ed2 <radio_rx_get+0x32>
			} while ((cmplt_prev != 0) ||
   17eea:	4284      	cmp	r4, r0
   17eec:	d001      	beq.n	17ef2 <radio_rx_get+0x52>
   17eee:	4604      	mov	r4, r0
   17ef0:	e7f0      	b.n	17ed4 <radio_rx_get+0x34>
			*radio_pdu_node_rx = _radio_pdu_node_rx;
   17ef2:	6037      	str	r7, [r6, #0]
}
   17ef4:	4628      	mov	r0, r5
   17ef6:	b003      	add	sp, #12
   17ef8:	bdf0      	pop	{r4, r5, r6, r7, pc}
			*radio_pdu_node_rx = NULL;
   17efa:	2300      	movs	r3, #0
   17efc:	6033      	str	r3, [r6, #0]
   17efe:	e7f9      	b.n	17ef4 <radio_rx_get+0x54>
		cmplt = tx_cmplt_get(handle, &_radio.packet_release_first,
   17f00:	4905      	ldr	r1, [pc, #20]	; (17f18 <radio_rx_get+0x78>)
   17f02:	f891 2174 	ldrb.w	r2, [r1, #372]	; 0x174
   17f06:	f201 1173 	addw	r1, r1, #371	; 0x173
   17f0a:	f7f9 fae5 	bl	114d8 <tx_cmplt_get>
   17f0e:	4605      	mov	r5, r0
		*radio_pdu_node_rx = NULL;
   17f10:	2300      	movs	r3, #0
   17f12:	6033      	str	r3, [r6, #0]
   17f14:	e7ee      	b.n	17ef4 <radio_rx_get+0x54>
   17f16:	bf00      	nop
   17f18:	20000f84 	.word	0x20000f84
   17f1c:	200010f7 	.word	0x200010f7

00017f20 <radio_rx_mem_release>:
{
   17f20:	b570      	push	{r4, r5, r6, lr}
   17f22:	4606      	mov	r6, r0
	_radio_pdu_node_rx = *radio_pdu_node_rx;
   17f24:	6800      	ldr	r0, [r0, #0]
	while (_radio_pdu_node_rx) {
   17f26:	e003      	b.n	17f30 <radio_rx_mem_release+0x10>
			mem_release(_radio_pdu_node_rx_free,
   17f28:	491e      	ldr	r1, [pc, #120]	; (17fa4 <radio_rx_mem_release+0x84>)
   17f2a:	f7f6 fd68 	bl	e9fe <mem_release>
{
   17f2e:	4620      	mov	r0, r4
	while (_radio_pdu_node_rx) {
   17f30:	b398      	cbz	r0, 17f9a <radio_rx_mem_release+0x7a>
		_radio_pdu_node_rx = _radio_pdu_node_rx->hdr.onion.next;
   17f32:	6804      	ldr	r4, [r0, #0]
		switch (_radio_pdu_node_rx_free->hdr.type) {
   17f34:	7903      	ldrb	r3, [r0, #4]
   17f36:	3b01      	subs	r3, #1
   17f38:	2b0b      	cmp	r3, #11
   17f3a:	d828      	bhi.n	17f8e <radio_rx_mem_release+0x6e>
   17f3c:	a201      	add	r2, pc, #4	; (adr r2, 17f44 <radio_rx_mem_release+0x24>)
   17f3e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   17f42:	bf00      	nop
   17f44:	00017f29 	.word	0x00017f29
   17f48:	00017f29 	.word	0x00017f29
   17f4c:	00017f29 	.word	0x00017f29
   17f50:	00017f29 	.word	0x00017f29
   17f54:	00017f29 	.word	0x00017f29
   17f58:	00017f29 	.word	0x00017f29
   17f5c:	00017f75 	.word	0x00017f75
   17f60:	00017f29 	.word	0x00017f29
   17f64:	00017f29 	.word	0x00017f29
   17f68:	00017f29 	.word	0x00017f29
   17f6c:	00017f29 	.word	0x00017f29
   17f70:	00017f29 	.word	0x00017f29
			conn = mem_get(_radio.conn_pool, CONNECTION_T_SIZE,
   17f74:	4d0c      	ldr	r5, [pc, #48]	; (17fa8 <radio_rx_mem_release+0x88>)
   17f76:	88c2      	ldrh	r2, [r0, #6]
   17f78:	f44f 71aa 	mov.w	r1, #340	; 0x154
   17f7c:	f8d5 0104 	ldr.w	r0, [r5, #260]	; 0x104
   17f80:	f7f6 fd5e 	bl	ea40 <mem_get>
			mem_release(conn, &_radio.conn_free);
   17f84:	f505 7184 	add.w	r1, r5, #264	; 0x108
   17f88:	f7f6 fd39 	bl	e9fe <mem_release>
			break;
   17f8c:	e7cf      	b.n	17f2e <radio_rx_mem_release+0xe>
			LL_ASSERT(0);
   17f8e:	4040      	eors	r0, r0
   17f90:	f380 8811 	msr	BASEPRI, r0
   17f94:	f04f 0004 	mov.w	r0, #4
   17f98:	df02      	svc	2
	*radio_pdu_node_rx = _radio_pdu_node_rx;
   17f9a:	6030      	str	r0, [r6, #0]
	packet_rx_allocate(0xff);
   17f9c:	20ff      	movs	r0, #255	; 0xff
   17f9e:	f7f9 fa4f 	bl	11440 <packet_rx_allocate>
   17fa2:	bd70      	pop	{r4, r5, r6, pc}
   17fa4:	200010b0 	.word	0x200010b0
   17fa8:	20000f84 	.word	0x20000f84

00017fac <do_radio_rx_fc_set>:
	if (req == ack) {
   17fac:	4291      	cmp	r1, r2
   17fae:	d007      	beq.n	17fc0 <do_radio_rx_fc_set+0x14>
	} else if (((req == 0) &&
   17fb0:	bb41      	cbnz	r1, 18004 <do_radio_rx_fc_set+0x58>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   17fb2:	4b1c      	ldr	r3, [pc, #112]	; (18024 <do_radio_rx_fc_set+0x78>)
   17fb4:	f8b3 317a 	ldrh.w	r3, [r3, #378]	; 0x17a
	} else if (((req == 0) &&
   17fb8:	4298      	cmp	r0, r3
   17fba:	d023      	beq.n	18004 <do_radio_rx_fc_set+0x58>
		return 1;
   17fbc:	2001      	movs	r0, #1
   17fbe:	4770      	bx	lr
{
   17fc0:	b430      	push	{r4, r5}
		if (_radio.link_rx_head == _radio.link_rx_tail) {
   17fc2:	4b18      	ldr	r3, [pc, #96]	; (18024 <do_radio_rx_fc_set+0x78>)
   17fc4:	f8d3 4148 	ldr.w	r4, [r3, #328]	; 0x148
   17fc8:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   17fcc:	429c      	cmp	r4, r3
   17fce:	d002      	beq.n	17fd6 <do_radio_rx_fc_set+0x2a>
			return 1;
   17fd0:	2001      	movs	r0, #1
}
   17fd2:	bc30      	pop	{r4, r5}
   17fd4:	4770      	bx	lr
			if (ack1 == 0) {
   17fd6:	b19a      	cbz	r2, 18000 <do_radio_rx_fc_set+0x54>
			u8_t ack1 = ack;
   17fd8:	4613      	mov	r3, r2
			_radio.fc_handle[--ack1] = handle;
   17fda:	3b01      	subs	r3, #1
   17fdc:	b2db      	uxtb	r3, r3
   17fde:	4c11      	ldr	r4, [pc, #68]	; (18024 <do_radio_rx_fc_set+0x78>)
   17fe0:	f103 05b8 	add.w	r5, r3, #184	; 0xb8
   17fe4:	eb04 0545 	add.w	r5, r4, r5, lsl #1
   17fe8:	80e8      	strh	r0, [r5, #6]
			_radio.fc_ack = ack1;
   17fea:	f884 317d 	strb.w	r3, [r4, #381]	; 0x17d
			if (req != _radio.fc_req) {
   17fee:	f894 317c 	ldrb.w	r3, [r4, #380]	; 0x17c
   17ff2:	b2db      	uxtb	r3, r3
   17ff4:	4299      	cmp	r1, r3
   17ff6:	d00f      	beq.n	18018 <do_radio_rx_fc_set+0x6c>
				_radio.fc_ack = ack;
   17ff8:	f884 217d 	strb.w	r2, [r4, #381]	; 0x17d
				return 1;
   17ffc:	2001      	movs	r0, #1
   17ffe:	e7e8      	b.n	17fd2 <do_radio_rx_fc_set+0x26>
				ack1 = TRIPLE_BUFFER_SIZE;
   18000:	2303      	movs	r3, #3
   18002:	e7ea      	b.n	17fda <do_radio_rx_fc_set+0x2e>
		    (_radio.fc_handle[TRIPLE_BUFFER_SIZE - 1] != handle)) ||
   18004:	b151      	cbz	r1, 1801c <do_radio_rx_fc_set+0x70>
		   ((req != 0) && (_radio.fc_handle[req - 1] != handle))) {
   18006:	31b7      	adds	r1, #183	; 0xb7
   18008:	4b06      	ldr	r3, [pc, #24]	; (18024 <do_radio_rx_fc_set+0x78>)
   1800a:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   1800e:	88cb      	ldrh	r3, [r1, #6]
   18010:	4298      	cmp	r0, r3
   18012:	d005      	beq.n	18020 <do_radio_rx_fc_set+0x74>
		return 1;
   18014:	2001      	movs	r0, #1
   18016:	4770      	bx	lr
	return 0;
   18018:	2000      	movs	r0, #0
   1801a:	e7da      	b.n	17fd2 <do_radio_rx_fc_set+0x26>
   1801c:	4608      	mov	r0, r1
   1801e:	4770      	bx	lr
   18020:	2000      	movs	r0, #0
   18022:	4770      	bx	lr
   18024:	20000f84 	.word	0x20000f84

00018028 <radio_rx_fc_set>:
{
   18028:	b538      	push	{r3, r4, r5, lr}
   1802a:	4604      	mov	r4, r0
	if (_radio.fc_ena) {
   1802c:	4b1b      	ldr	r3, [pc, #108]	; (1809c <radio_rx_fc_set+0x74>)
   1802e:	f893 017e 	ldrb.w	r0, [r3, #382]	; 0x17e
   18032:	b338      	cbz	r0, 18084 <radio_rx_fc_set+0x5c>
		u8_t req = _radio.fc_req;
   18034:	f893 217c 	ldrb.w	r2, [r3, #380]	; 0x17c
   18038:	b2d5      	uxtb	r5, r2
		u8_t ack = _radio.fc_ack;
   1803a:	f893 217d 	ldrb.w	r2, [r3, #381]	; 0x17d
		if (fc) {
   1803e:	b141      	cbz	r1, 18052 <radio_rx_fc_set+0x2a>
			if (handle != 0xffff) {
   18040:	f64f 73ff 	movw	r3, #65535	; 0xffff
   18044:	429c      	cmp	r4, r3
   18046:	d023      	beq.n	18090 <radio_rx_fc_set+0x68>
   18048:	4620      	mov	r0, r4
				return do_radio_rx_fc_set(handle, req, ack);
   1804a:	4629      	mov	r1, r5
   1804c:	f7ff ffae 	bl	17fac <do_radio_rx_fc_set>
   18050:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18052:	4b12      	ldr	r3, [pc, #72]	; (1809c <radio_rx_fc_set+0x74>)
   18054:	f8d3 0148 	ldr.w	r0, [r3, #328]	; 0x148
   18058:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   1805c:	4298      	cmp	r0, r3
   1805e:	d001      	beq.n	18064 <radio_rx_fc_set+0x3c>
	return 0;
   18060:	4608      	mov	r0, r1
   18062:	bd38      	pop	{r3, r4, r5, pc}
		} else if ((_radio.link_rx_head == _radio.link_rx_tail) &&
   18064:	4295      	cmp	r5, r2
   18066:	d015      	beq.n	18094 <radio_rx_fc_set+0x6c>
			_radio.fc_ack = req;
   18068:	4b0c      	ldr	r3, [pc, #48]	; (1809c <radio_rx_fc_set+0x74>)
   1806a:	f883 517d 	strb.w	r5, [r3, #381]	; 0x17d
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1806e:	f8d3 314c 	ldr.w	r3, [r3, #332]	; 0x14c
   18072:	4298      	cmp	r0, r3
   18074:	d010      	beq.n	18098 <radio_rx_fc_set+0x70>
			    (req == _radio.fc_req)) {
   18076:	4b09      	ldr	r3, [pc, #36]	; (1809c <radio_rx_fc_set+0x74>)
   18078:	f893 317c 	ldrb.w	r3, [r3, #380]	; 0x17c
   1807c:	b2db      	uxtb	r3, r3
			if ((_radio.link_rx_head != _radio.link_rx_tail) &&
   1807e:	429d      	cmp	r5, r3
   18080:	d001      	beq.n	18086 <radio_rx_fc_set+0x5e>
	return 0;
   18082:	4608      	mov	r0, r1
}
   18084:	bd38      	pop	{r3, r4, r5, pc}
				_radio.fc_ack = ack;
   18086:	4b05      	ldr	r3, [pc, #20]	; (1809c <radio_rx_fc_set+0x74>)
   18088:	f883 217d 	strb.w	r2, [r3, #381]	; 0x17d
	return 0;
   1808c:	4608      	mov	r0, r1
   1808e:	bd38      	pop	{r3, r4, r5, pc}
   18090:	2000      	movs	r0, #0
   18092:	bd38      	pop	{r3, r4, r5, pc}
   18094:	4608      	mov	r0, r1
   18096:	bd38      	pop	{r3, r4, r5, pc}
   18098:	4608      	mov	r0, r1
   1809a:	bd38      	pop	{r3, r4, r5, pc}
   1809c:	20000f84 	.word	0x20000f84

000180a0 <radio_tx_mem_acquire>:
{
   180a0:	b508      	push	{r3, lr}
	return mem_acquire(&_radio.pkt_tx_data_free);
   180a2:	4802      	ldr	r0, [pc, #8]	; (180ac <radio_tx_mem_acquire+0xc>)
   180a4:	f7f6 fc8f 	bl	e9c6 <mem_acquire>
}
   180a8:	bd08      	pop	{r3, pc}
   180aa:	bf00      	nop
   180ac:	200010e4 	.word	0x200010e4

000180b0 <radio_tx_mem_release>:
{
   180b0:	b508      	push	{r3, lr}
	mem_release(node_tx, &_radio.pkt_tx_data_free);
   180b2:	4902      	ldr	r1, [pc, #8]	; (180bc <radio_tx_mem_release+0xc>)
   180b4:	f7f6 fca3 	bl	e9fe <mem_release>
   180b8:	bd08      	pop	{r3, pc}
   180ba:	bf00      	nop
   180bc:	200010e4 	.word	0x200010e4

000180c0 <radio_tx_mem_enqueue>:
}

u32_t radio_tx_mem_enqueue(u16_t handle, struct radio_pdu_node_tx *node_tx)
{
   180c0:	b570      	push	{r4, r5, r6, lr}
   180c2:	b088      	sub	sp, #32
   180c4:	4605      	mov	r5, r0
   180c6:	460e      	mov	r6, r1
	u8_t last;
	struct connection *conn;
	struct pdu_data *pdu_data;

	last = _radio.packet_tx_last + 1;
   180c8:	4b36      	ldr	r3, [pc, #216]	; (181a4 <radio_tx_mem_enqueue+0xe4>)
   180ca:	f893 4172 	ldrb.w	r4, [r3, #370]	; 0x172
   180ce:	3401      	adds	r4, #1
   180d0:	b2e4      	uxtb	r4, r4
	if (last == _radio.packet_tx_count) {
   180d2:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   180d6:	429c      	cmp	r4, r3
   180d8:	d02a      	beq.n	18130 <radio_tx_mem_enqueue+0x70>
		last = 0;
	}

	pdu_data = (struct pdu_data *)node_tx->pdu_data;
	conn = connection_get(handle);
   180da:	4628      	mov	r0, r5
   180dc:	f7f9 fa5a 	bl	11594 <connection_get>
	if (!conn || (last == _radio.packet_tx_first)) {
   180e0:	4601      	mov	r1, r0
   180e2:	2800      	cmp	r0, #0
   180e4:	d057      	beq.n	18196 <radio_tx_mem_enqueue+0xd6>
   180e6:	4b2f      	ldr	r3, [pc, #188]	; (181a4 <radio_tx_mem_enqueue+0xe4>)
   180e8:	f893 3171 	ldrb.w	r3, [r3, #369]	; 0x171
   180ec:	b2db      	uxtb	r3, r3
   180ee:	429c      	cmp	r4, r3
   180f0:	d053      	beq.n	1819a <radio_tx_mem_enqueue+0xda>
		return 1;
	}

	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   180f2:	7972      	ldrb	r2, [r6, #5]
   180f4:	4b2b      	ldr	r3, [pc, #172]	; (181a4 <radio_tx_mem_enqueue+0xe4>)
   180f6:	f8b3 3164 	ldrh.w	r3, [r3, #356]	; 0x164
   180fa:	3b07      	subs	r3, #7
   180fc:	429a      	cmp	r2, r3
   180fe:	d819      	bhi.n	18134 <radio_tx_mem_enqueue+0x74>
				    offsetof(struct radio_pdu_node_tx,
					     pdu_data) -
				    offsetof(struct pdu_data, payload)));

	_radio.pkt_tx[_radio.packet_tx_last].handle = handle;
   18100:	4b28      	ldr	r3, [pc, #160]	; (181a4 <radio_tx_mem_enqueue+0xe4>)
   18102:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18106:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   1810a:	f822 5030 	strh.w	r5, [r2, r0, lsl #3]
	_radio.pkt_tx[_radio.packet_tx_last].  node_tx = node_tx;
   1810e:	f8d3 2168 	ldr.w	r2, [r3, #360]	; 0x168
   18112:	f893 0172 	ldrb.w	r0, [r3, #370]	; 0x172
   18116:	eb02 02c0 	add.w	r2, r2, r0, lsl #3
   1811a:	6056      	str	r6, [r2, #4]
	_radio.packet_tx_last = last;
   1811c:	f883 4172 	strb.w	r4, [r3, #370]	; 0x172

	/* break slave latency */
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18120:	f991 301d 	ldrsb.w	r3, [r1, #29]
   18124:	2b00      	cmp	r3, #0
   18126:	db0b      	blt.n	18140 <radio_tx_mem_enqueue+0x80>
				 (void *)conn);
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
			  (ticker_status == TICKER_STATUS_BUSY));
	}

	return 0;
   18128:	2300      	movs	r3, #0
}
   1812a:	4618      	mov	r0, r3
   1812c:	b008      	add	sp, #32
   1812e:	bd70      	pop	{r4, r5, r6, pc}
		last = 0;
   18130:	2400      	movs	r4, #0
   18132:	e7d2      	b.n	180da <radio_tx_mem_enqueue+0x1a>
	LL_ASSERT(pdu_data->len <= (_radio.packet_tx_data_size -
   18134:	4040      	eors	r0, r0
   18136:	f380 8811 	msr	BASEPRI, r0
   1813a:	f04f 0004 	mov.w	r0, #4
   1813e:	df02      	svc	2
	if (conn->role && conn->latency_event && !conn->slave.latency_cancel) {
   18140:	8d4b      	ldrh	r3, [r1, #42]	; 0x2a
   18142:	b363      	cbz	r3, 1819e <radio_tx_mem_enqueue+0xde>
   18144:	f891 3050 	ldrb.w	r3, [r1, #80]	; 0x50
   18148:	f013 0f02 	tst.w	r3, #2
   1814c:	d001      	beq.n	18152 <radio_tx_mem_enqueue+0x92>
	return 0;
   1814e:	2300      	movs	r3, #0
   18150:	e7eb      	b.n	1812a <radio_tx_mem_enqueue+0x6a>
		conn->slave.latency_cancel = 1;
   18152:	f043 0302 	orr.w	r3, r3, #2
   18156:	f881 3050 	strb.w	r3, [r1, #80]	; 0x50
				 conn->handle, 0, 0, 0, 0, 1, 0,
   1815a:	8c0a      	ldrh	r2, [r1, #32]
		ticker_status = ticker_update(RADIO_TICKER_INSTANCE_ID_RADIO,
   1815c:	3207      	adds	r2, #7
   1815e:	9106      	str	r1, [sp, #24]
   18160:	4b11      	ldr	r3, [pc, #68]	; (181a8 <radio_tx_mem_enqueue+0xe8>)
   18162:	9305      	str	r3, [sp, #20]
   18164:	2000      	movs	r0, #0
   18166:	9004      	str	r0, [sp, #16]
   18168:	2301      	movs	r3, #1
   1816a:	9303      	str	r3, [sp, #12]
   1816c:	9002      	str	r0, [sp, #8]
   1816e:	9001      	str	r0, [sp, #4]
   18170:	9000      	str	r0, [sp, #0]
   18172:	4603      	mov	r3, r0
   18174:	b2d2      	uxtb	r2, r2
   18176:	2103      	movs	r1, #3
   18178:	f7f8 f944 	bl	10404 <ticker_update>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1817c:	4603      	mov	r3, r0
   1817e:	2800      	cmp	r0, #0
   18180:	d0d3      	beq.n	1812a <radio_tx_mem_enqueue+0x6a>
   18182:	2802      	cmp	r0, #2
   18184:	d101      	bne.n	1818a <radio_tx_mem_enqueue+0xca>
	return 0;
   18186:	2300      	movs	r3, #0
   18188:	e7cf      	b.n	1812a <radio_tx_mem_enqueue+0x6a>
		LL_ASSERT((ticker_status == TICKER_STATUS_SUCCESS) ||
   1818a:	4040      	eors	r0, r0
   1818c:	f380 8811 	msr	BASEPRI, r0
   18190:	f04f 0004 	mov.w	r0, #4
   18194:	df02      	svc	2
		return 1;
   18196:	2301      	movs	r3, #1
   18198:	e7c7      	b.n	1812a <radio_tx_mem_enqueue+0x6a>
   1819a:	2301      	movs	r3, #1
   1819c:	e7c5      	b.n	1812a <radio_tx_mem_enqueue+0x6a>
	return 0;
   1819e:	2300      	movs	r3, #0
   181a0:	e7c3      	b.n	1812a <radio_tx_mem_enqueue+0x6a>
   181a2:	bf00      	nop
   181a4:	20000f84 	.word	0x20000f84
   181a8:	00011425 	.word	0x00011425

000181ac <ll_enc_req_send>:
{
   181ac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   181b0:	4680      	mov	r8, r0
   181b2:	4689      	mov	r9, r1
   181b4:	4616      	mov	r6, r2
   181b6:	461f      	mov	r7, r3
	conn = connection_get(handle);
   181b8:	f7f9 f9ec 	bl	11594 <connection_get>
	if (!conn) {
   181bc:	2800      	cmp	r0, #0
   181be:	d055      	beq.n	1826c <ll_enc_req_send+0xc0>
   181c0:	4605      	mov	r5, r0
	node_tx = radio_tx_mem_acquire();
   181c2:	f7ff ff6d 	bl	180a0 <radio_tx_mem_acquire>
	if (node_tx) {
   181c6:	4604      	mov	r4, r0
   181c8:	2800      	cmp	r0, #0
   181ca:	d051      	beq.n	18270 <ll_enc_req_send+0xc4>
		memcpy(&conn->llcp.encryption.ltk[0], ltk,
   181cc:	2210      	movs	r2, #16
   181ce:	4639      	mov	r1, r7
   181d0:	f105 0083 	add.w	r0, r5, #131	; 0x83
   181d4:	f7e8 f874 	bl	2c0 <memcpy>
		if ((conn->enc_rx == 0) && (conn->enc_tx == 0)) {
   181d8:	f895 30f8 	ldrb.w	r3, [r5, #248]	; 0xf8
   181dc:	f013 0330 	ands.w	r3, r3, #48	; 0x30
   181e0:	d008      	beq.n	181f4 <ll_enc_req_send+0x48>
		} else if ((conn->enc_rx != 0) && (conn->enc_tx != 0)) {
   181e2:	2b30      	cmp	r3, #48	; 0x30
   181e4:	d02d      	beq.n	18242 <ll_enc_req_send+0x96>
			radio_tx_mem_release(node_tx);
   181e6:	4620      	mov	r0, r4
   181e8:	f7ff ff62 	bl	180b0 <radio_tx_mem_release>
			return 1;
   181ec:	2301      	movs	r3, #1
}
   181ee:	4618      	mov	r0, r3
   181f0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   181f4:	7923      	ldrb	r3, [r4, #4]
   181f6:	f043 0303 	orr.w	r3, r3, #3
   181fa:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len = offsetof(struct pdu_data_llctrl,
   181fc:	2317      	movs	r3, #23
   181fe:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18200:	2303      	movs	r3, #3
   18202:	71e3      	strb	r3, [r4, #7]
			memcpy(enc_req->rand, rand, sizeof(enc_req->rand));
   18204:	2208      	movs	r2, #8
   18206:	4649      	mov	r1, r9
   18208:	18a0      	adds	r0, r4, r2
   1820a:	f7e8 f859 	bl	2c0 <memcpy>
			enc_req->ediv[0] = ediv[0];
   1820e:	7833      	ldrb	r3, [r6, #0]
   18210:	7423      	strb	r3, [r4, #16]
			enc_req->ediv[1] = ediv[1];
   18212:	7873      	ldrb	r3, [r6, #1]
   18214:	7463      	strb	r3, [r4, #17]
			bt_rand(enc_req->skdm, sizeof(enc_req->skdm));
   18216:	2108      	movs	r1, #8
   18218:	f104 0012 	add.w	r0, r4, #18
   1821c:	f7f8 fd74 	bl	10d08 <bt_rand>
			bt_rand(enc_req->ivm, sizeof(enc_req->ivm));
   18220:	2104      	movs	r1, #4
   18222:	f104 001a 	add.w	r0, r4, #26
   18226:	f7f8 fd6f 	bl	10d08 <bt_rand>
		if (radio_tx_mem_enqueue(handle, node_tx)) {
   1822a:	4621      	mov	r1, r4
   1822c:	4640      	mov	r0, r8
   1822e:	f7ff ff47 	bl	180c0 <radio_tx_mem_enqueue>
   18232:	4603      	mov	r3, r0
   18234:	2800      	cmp	r0, #0
   18236:	d0da      	beq.n	181ee <ll_enc_req_send+0x42>
			radio_tx_mem_release(node_tx);
   18238:	4620      	mov	r0, r4
   1823a:	f7ff ff39 	bl	180b0 <radio_tx_mem_release>
			return 1;
   1823e:	2301      	movs	r3, #1
   18240:	e7d5      	b.n	181ee <ll_enc_req_send+0x42>
			memcpy(&conn->llcp.encryption.rand[0], rand,
   18242:	2208      	movs	r2, #8
   18244:	4649      	mov	r1, r9
   18246:	f105 0079 	add.w	r0, r5, #121	; 0x79
   1824a:	f7e8 f839 	bl	2c0 <memcpy>
			conn->llcp.encryption.ediv[0] = ediv[0];
   1824e:	7833      	ldrb	r3, [r6, #0]
   18250:	f885 3081 	strb.w	r3, [r5, #129]	; 0x81
			conn->llcp.encryption.ediv[1] = ediv[1];
   18254:	7873      	ldrb	r3, [r6, #1]
   18256:	f885 3082 	strb.w	r3, [r5, #130]	; 0x82
			pdu_data_tx->ll_id = PDU_DATA_LLID_CTRL;
   1825a:	7923      	ldrb	r3, [r4, #4]
   1825c:	f043 0303 	orr.w	r3, r3, #3
   18260:	7123      	strb	r3, [r4, #4]
			pdu_data_tx->len =
   18262:	2301      	movs	r3, #1
   18264:	7163      	strb	r3, [r4, #5]
			pdu_data_tx->payload.llctrl.opcode =
   18266:	230a      	movs	r3, #10
   18268:	71e3      	strb	r3, [r4, #7]
   1826a:	e7de      	b.n	1822a <ll_enc_req_send+0x7e>
		return 1;
   1826c:	2301      	movs	r3, #1
   1826e:	e7be      	b.n	181ee <ll_enc_req_send+0x42>
	return 1;
   18270:	2301      	movs	r3, #1
   18272:	e7bc      	b.n	181ee <ll_enc_req_send+0x42>

void __weak ll_adv_scan_state_cb(u8_t bm)
{
   18274:	4770      	bx	lr

00018276 <ll_adv_scan_state_cb>:

	k_delayed_work_cancel(&rpa_work);
}

void ll_adv_scan_state_cb(u8_t bm)
{
   18276:	b508      	push	{r3, lr}
	if (bm) {
   18278:	b910      	cbnz	r0, 18280 <ll_adv_scan_state_cb+0xa>
		rpa_refresh_start();
	} else {
		rpa_refresh_stop();
   1827a:	f000 fe5f 	bl	18f3c <rpa_refresh_stop>
   1827e:	bd08      	pop	{r3, pc}
		rpa_refresh_start();
   18280:	f000 fe48 	bl	18f14 <rpa_refresh_start>
   18284:	bd08      	pop	{r3, pc}
	...

00018288 <radio_adv_enable>:
{
   18288:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1828c:	b08f      	sub	sp, #60	; 0x3c
   1828e:	f88d 202f 	strb.w	r2, [sp, #47]	; 0x2f
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   18292:	2202      	movs	r2, #2
   18294:	920d      	str	r2, [sp, #52]	; 0x34
	if (_radio.advertiser.is_enabled) {
   18296:	4aca      	ldr	r2, [pc, #808]	; (185c0 <radio_adv_enable+0x338>)
   18298:	f892 2024 	ldrb.w	r2, [r2, #36]	; 0x24
   1829c:	f012 0f01 	tst.w	r2, #1
   182a0:	d003      	beq.n	182aa <radio_adv_enable+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   182a2:	200c      	movs	r0, #12
}
   182a4:	b00f      	add	sp, #60	; 0x3c
   182a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   182aa:	461d      	mov	r5, r3
   182ac:	460c      	mov	r4, r1
   182ae:	4607      	mov	r7, r0
		&_radio.advertiser.adv_data.data[_radio.advertiser.adv_data.last][0];
   182b0:	4bc3      	ldr	r3, [pc, #780]	; (185c0 <radio_adv_enable+0x338>)
   182b2:	f893 2076 	ldrb.w	r2, [r3, #118]	; 0x76
	pdu_adv = (struct pdu_adv *)
   182b6:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   182ba:	ebc2 02c1 	rsb	r2, r2, r1, lsl #3
   182be:	3220      	adds	r2, #32
   182c0:	eb03 0802 	add.w	r8, r3, r2
	if ((pdu_adv->type == PDU_ADV_TYPE_ADV_IND) ||
   182c4:	f898 3007 	ldrb.w	r3, [r8, #7]
   182c8:	f003 030f 	and.w	r3, r3, #15
   182cc:	2b01      	cmp	r3, #1
   182ce:	d97f      	bls.n	183d0 <radio_adv_enable+0x148>
		conn = NULL;
   182d0:	2600      	movs	r6, #0
	_radio.advertiser.phy_p = phy_p;
   182d2:	4abb      	ldr	r2, [pc, #748]	; (185c0 <radio_adv_enable+0x338>)
   182d4:	f892 3025 	ldrb.w	r3, [r2, #37]	; 0x25
   182d8:	f367 0302 	bfi	r3, r7, #0, #3
	_radio.advertiser.chan_map = chan_map;
   182dc:	a80e      	add	r0, sp, #56	; 0x38
   182de:	f810 1d09 	ldrb.w	r1, [r0, #-9]!
   182e2:	f361 03c5 	bfi	r3, r1, #3, #3
	_radio.advertiser.filter_policy = filter_policy;
   182e6:	f365 1387 	bfi	r3, r5, #6, #2
   182ea:	f882 3025 	strb.w	r3, [r2, #37]	; 0x25
	_radio.advertiser.rl_idx = rl_idx;
   182ee:	f89d 3058 	ldrb.w	r3, [sp, #88]	; 0x58
   182f2:	f882 3026 	strb.w	r3, [r2, #38]	; 0x26
		_radio.ticks_active_to_start;
   182f6:	f8d2 3180 	ldr.w	r3, [r2, #384]	; 0x180
	_radio.advertiser.hdr.ticks_active_to_start =
   182fa:	6193      	str	r3, [r2, #24]
	_radio.advertiser.hdr.ticks_xtal_to_start =
   182fc:	2327      	movs	r3, #39	; 0x27
   182fe:	6153      	str	r3, [r2, #20]
	_radio.advertiser.hdr.ticks_preempt_to_start =
   18300:	2300      	movs	r3, #0
   18302:	61d3      	str	r3, [r2, #28]
	chan_cnt = util_ones_count_get(&chan_map, sizeof(chan_map));
   18304:	2101      	movs	r1, #1
   18306:	f7f6 fbe2 	bl	eace <util_ones_count_get>
	if (pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) {
   1830a:	f898 5007 	ldrb.w	r5, [r8, #7]
   1830e:	f005 050f 	and.w	r5, r5, #15
   18312:	2d01      	cmp	r5, #1
   18314:	f000 8108 	beq.w	18528 <radio_adv_enable+0x2a0>
	} else if (pdu_adv->type == PDU_ADV_TYPE_NONCONN_IND) {
   18318:	2d02      	cmp	r5, #2
   1831a:	f000 8111 	beq.w	18540 <radio_adv_enable+0x2b8>
			      152 + 376) * chan_cnt;
   1831e:	b280      	uxth	r0, r0
		ticks_slot = (RADIO_TICKER_START_PART_US + 376 + 152 + 176 +
   18320:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18324:	ebc0 10c3 	rsb	r0, r0, r3, lsl #7
   18328:	0080      	lsls	r0, r0, #2
   1832a:	b280      	uxth	r0, r0
	_radio.advertiser.hdr.ticks_slot = TICKER_US_TO_TICKS(ticks_slot);
   1832c:	a3a2      	add	r3, pc, #648	; (adr r3, 185b8 <radio_adv_enable+0x330>)
   1832e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18332:	49a4      	ldr	r1, [pc, #656]	; (185c4 <radio_adv_enable+0x33c>)
   18334:	fba0 0101 	umull	r0, r1, r0, r1
   18338:	f7e8 fa50 	bl	7dc <__aeabi_uldivmod>
   1833c:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   18340:	4a9f      	ldr	r2, [pc, #636]	; (185c0 <radio_adv_enable+0x338>)
   18342:	6210      	str	r0, [r2, #32]
		_radio.advertiser.hdr.ticks_active_to_start;
   18344:	6991      	ldr	r1, [r2, #24]
		_radio.advertiser.hdr.ticks_xtal_to_start :
   18346:	6953      	ldr	r3, [r2, #20]
	ticks_slot_offset =
   18348:	4299      	cmp	r1, r3
   1834a:	bf38      	it	cc
   1834c:	4619      	movcc	r1, r3
   1834e:	4688      	mov	r8, r1
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18350:	2d01      	cmp	r5, #1
   18352:	f000 80ff 	beq.w	18554 <radio_adv_enable+0x2cc>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18356:	f7f8 f96f 	bl	10638 <ticker_ticks_now_get>
   1835a:	4607      	mov	r7, r0
				     TICKER_US_TO_TICKS((u64_t) interval * 625),
   1835c:	b2a4      	uxth	r4, r4
   1835e:	489a      	ldr	r0, [pc, #616]	; (185c8 <radio_adv_enable+0x340>)
   18360:	fba4 0100 	umull	r0, r1, r4, r0
   18364:	2391      	movs	r3, #145	; 0x91
   18366:	fb03 1104 	mla	r1, r3, r4, r1
   1836a:	a393      	add	r3, pc, #588	; (adr r3, 185b8 <radio_adv_enable+0x330>)
   1836c:	e9d3 2300 	ldrd	r2, r3, [r3]
   18370:	f7e8 fa34 	bl	7dc <__aeabi_uldivmod>
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18374:	f020 427f 	bic.w	r2, r0, #4278190080	; 0xff000000
				      _radio.advertiser.hdr.ticks_slot),
   18378:	4b91      	ldr	r3, [pc, #580]	; (185c0 <radio_adv_enable+0x338>)
   1837a:	6a1b      	ldr	r3, [r3, #32]
			ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   1837c:	4443      	add	r3, r8
   1837e:	b29b      	uxth	r3, r3
		ret =
   18380:	a90d      	add	r1, sp, #52	; 0x34
   18382:	9108      	str	r1, [sp, #32]
   18384:	4991      	ldr	r1, [pc, #580]	; (185cc <radio_adv_enable+0x344>)
   18386:	9107      	str	r1, [sp, #28]
   18388:	2000      	movs	r0, #0
   1838a:	9006      	str	r0, [sp, #24]
   1838c:	4990      	ldr	r1, [pc, #576]	; (185d0 <radio_adv_enable+0x348>)
   1838e:	9105      	str	r1, [sp, #20]
   18390:	9304      	str	r3, [sp, #16]
   18392:	9003      	str	r0, [sp, #12]
   18394:	9002      	str	r0, [sp, #8]
   18396:	9201      	str	r2, [sp, #4]
   18398:	9000      	str	r0, [sp, #0]
   1839a:	463b      	mov	r3, r7
   1839c:	2205      	movs	r2, #5
   1839e:	2103      	movs	r1, #3
   183a0:	f7f7 ffe2 	bl	10368 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   183a4:	2802      	cmp	r0, #2
   183a6:	f000 813b 	beq.w	18620 <radio_adv_enable+0x398>
	if (ret_cb == TICKER_STATUS_SUCCESS) {
   183aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   183ac:	2b00      	cmp	r3, #0
   183ae:	f040 80f2 	bne.w	18596 <radio_adv_enable+0x30e>
		_radio.advertiser.is_enabled = 1;
   183b2:	4b83      	ldr	r3, [pc, #524]	; (185c0 <radio_adv_enable+0x338>)
   183b4:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   183b8:	f042 0201 	orr.w	r2, r2, #1
   183bc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   183c0:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   183c4:	f013 0f01 	tst.w	r3, #1
   183c8:	f000 812e 	beq.w	18628 <radio_adv_enable+0x3a0>
		return 0;
   183cc:	2000      	movs	r0, #0
   183ce:	e769      	b.n	182a4 <radio_adv_enable+0x1c>
		if (_radio.advertiser.conn) {
   183d0:	4b7b      	ldr	r3, [pc, #492]	; (185c0 <radio_adv_enable+0x338>)
   183d2:	f8d3 30c8 	ldr.w	r3, [r3, #200]	; 0xc8
   183d6:	b10b      	cbz	r3, 183dc <radio_adv_enable+0x154>
			return BT_HCI_ERR_CMD_DISALLOWED;
   183d8:	200c      	movs	r0, #12
   183da:	e763      	b.n	182a4 <radio_adv_enable+0x1c>
		link = mem_acquire(&_radio.link_rx_free);
   183dc:	487d      	ldr	r0, [pc, #500]	; (185d4 <radio_adv_enable+0x34c>)
   183de:	f7f6 faf2 	bl	e9c6 <mem_acquire>
		if (!link) {
   183e2:	4681      	mov	r9, r0
   183e4:	2800      	cmp	r0, #0
   183e6:	f000 8124 	beq.w	18632 <radio_adv_enable+0x3aa>
		conn = mem_acquire(&_radio.conn_free);
   183ea:	487b      	ldr	r0, [pc, #492]	; (185d8 <radio_adv_enable+0x350>)
   183ec:	f7f6 faeb 	bl	e9c6 <mem_acquire>
		if (!conn) {
   183f0:	4606      	mov	r6, r0
   183f2:	2800      	cmp	r0, #0
   183f4:	f000 8092 	beq.w	1851c <radio_adv_enable+0x294>
		conn->handle = 0xFFFF;
   183f8:	f64f 73ff 	movw	r3, #65535	; 0xffff
   183fc:	8403      	strh	r3, [r0, #32]
		conn->llcp_features = RADIO_BLE_FEAT;
   183fe:	f503 4384 	add.w	r3, r3, #16896	; 0x4200
   18402:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4
		conn->data_chan_sel = 0;
   18406:	7f43      	ldrb	r3, [r0, #29]
   18408:	f36f 1386 	bfc	r3, #6, #1
   1840c:	7743      	strb	r3, [r0, #29]
		conn->data_chan_use = 0;
   1840e:	2300      	movs	r3, #0
   18410:	77c3      	strb	r3, [r0, #31]
		conn->event_counter = 0;
   18412:	8443      	strh	r3, [r0, #34]	; 0x22
		conn->latency_prepare = 0;
   18414:	8503      	strh	r3, [r0, #40]	; 0x28
		conn->latency_event = 0;
   18416:	8543      	strh	r3, [r0, #42]	; 0x2a
		conn->default_tx_octets = _radio.default_tx_octets;
   18418:	4969      	ldr	r1, [pc, #420]	; (185c0 <radio_adv_enable+0x338>)
   1841a:	f8b1 211e 	ldrh.w	r2, [r1, #286]	; 0x11e
   1841e:	8582      	strh	r2, [r0, #44]	; 0x2c
		conn->max_tx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18420:	221b      	movs	r2, #27
   18422:	85c2      	strh	r2, [r0, #46]	; 0x2e
		conn->max_rx_octets = RADIO_LL_LENGTH_OCTETS_RX_MIN;
   18424:	8602      	strh	r2, [r0, #48]	; 0x30
		conn->default_tx_time = _radio.default_tx_time;
   18426:	f8b1 2120 	ldrh.w	r2, [r1, #288]	; 0x120
   1842a:	8642      	strh	r2, [r0, #50]	; 0x32
		conn->max_tx_time =
   1842c:	f44f 72a4 	mov.w	r2, #328	; 0x148
   18430:	8682      	strh	r2, [r0, #52]	; 0x34
		conn->max_rx_time =
   18432:	86c2      	strh	r2, [r0, #54]	; 0x36
		conn->phy_pref_tx = _radio.default_phy_tx;
   18434:	f891 0122 	ldrb.w	r0, [r1, #290]	; 0x122
   18438:	f896 2038 	ldrb.w	r2, [r6, #56]	; 0x38
   1843c:	f360 0202 	bfi	r2, r0, #0, #3
		conn->phy_tx = BIT(0);
   18440:	2001      	movs	r0, #1
   18442:	f360 02c5 	bfi	r2, r0, #3, #3
		conn->phy_flags = 0;
   18446:	f002 02bf 	and.w	r2, r2, #191	; 0xbf
   1844a:	f363 12c7 	bfi	r2, r3, #7, #1
   1844e:	f886 2038 	strb.w	r2, [r6, #56]	; 0x38
		conn->phy_tx_time = BIT(0);
   18452:	f896 2039 	ldrb.w	r2, [r6, #57]	; 0x39
   18456:	f360 0202 	bfi	r2, r0, #0, #3
   1845a:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_pref_rx = _radio.default_phy_rx;
   1845e:	f891 e124 	ldrb.w	lr, [r1, #292]	; 0x124
   18462:	b2d2      	uxtb	r2, r2
   18464:	f36e 02c5 	bfi	r2, lr, #3, #3
   18468:	f886 2039 	strb.w	r2, [r6, #57]	; 0x39
		conn->phy_rx = BIT(0);
   1846c:	f896 203a 	ldrb.w	r2, [r6, #58]	; 0x3a
   18470:	f360 0202 	bfi	r2, r0, #0, #3
   18474:	f886 203a 	strb.w	r2, [r6, #58]	; 0x3a
		conn->role = 1;
   18478:	7f72      	ldrb	r2, [r6, #29]
   1847a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   1847e:	7772      	strb	r2, [r6, #29]
		conn->connect_expire = 6;
   18480:	2206      	movs	r2, #6
   18482:	87b2      	strh	r2, [r6, #60]	; 0x3c
		conn->common.fex_valid = 0;
   18484:	f896 2050 	ldrb.w	r2, [r6, #80]	; 0x50
		conn->slave.latency_cancel = 0;
   18488:	f002 02de 	and.w	r2, r2, #222	; 0xde
   1848c:	f363 0241 	bfi	r2, r3, #1, #1
   18490:	f886 2050 	strb.w	r2, [r6, #80]	; 0x50
		conn->slave.window_widening_prepare_us = 0;
   18494:	65f3      	str	r3, [r6, #92]	; 0x5c
		conn->slave.window_widening_event_us = 0;
   18496:	6633      	str	r3, [r6, #96]	; 0x60
		conn->slave.ticks_to_offset = 0;
   18498:	6733      	str	r3, [r6, #112]	; 0x70
		conn->supervision_expire = 0;
   1849a:	f8a6 3040 	strh.w	r3, [r6, #64]	; 0x40
		conn->procedure_expire = 0;
   1849e:	f8a6 3044 	strh.w	r3, [r6, #68]	; 0x44
		conn->apto_expire = 0;
   184a2:	f8a6 304c 	strh.w	r3, [r6, #76]	; 0x4c
		conn->appto_expire = 0;
   184a6:	f8a6 3048 	strh.w	r3, [r6, #72]	; 0x48
		conn->llcp_req = 0;
   184aa:	f886 3074 	strb.w	r3, [r6, #116]	; 0x74
		conn->llcp_ack = 0;
   184ae:	f886 3075 	strb.w	r3, [r6, #117]	; 0x75
		conn->llcp_version.tx = 0;
   184b2:	f896 20a8 	ldrb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_version.rx = 0;
   184b6:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
   184ba:	f363 0241 	bfi	r2, r3, #1, #1
   184be:	f886 20a8 	strb.w	r2, [r6, #168]	; 0xa8
		conn->llcp_terminate.req = 0;
   184c2:	f886 30b0 	strb.w	r3, [r6, #176]	; 0xb0
		conn->llcp_terminate.ack = 0;
   184c6:	f886 30b1 	strb.w	r3, [r6, #177]	; 0xb1
		conn->llcp_terminate.reason_peer = 0;
   184ca:	f886 30b3 	strb.w	r3, [r6, #179]	; 0xb3
		conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link = link;
   184ce:	f8c6 90b4 	str.w	r9, [r6, #180]	; 0xb4
		conn->llcp_conn_param.req = 0;
   184d2:	f886 30c0 	strb.w	r3, [r6, #192]	; 0xc0
		conn->llcp_conn_param.ack = 0;
   184d6:	f886 30c1 	strb.w	r3, [r6, #193]	; 0xc1
		conn->llcp_length.req = 0;
   184da:	f886 30e8 	strb.w	r3, [r6, #232]	; 0xe8
		conn->llcp_length.ack = 0;
   184de:	f886 30e9 	strb.w	r3, [r6, #233]	; 0xe9
		conn->llcp_phy.req = 0;
   184e2:	f886 30f4 	strb.w	r3, [r6, #244]	; 0xf4
		conn->llcp_phy.ack = 0;
   184e6:	f886 30f5 	strb.w	r3, [r6, #245]	; 0xf5
		conn->sn = 0;
   184ea:	f896 20f8 	ldrb.w	r2, [r6, #248]	; 0xf8
		conn->empty = 0;
   184ee:	f002 0280 	and.w	r2, r2, #128	; 0x80
   184f2:	f363 12c7 	bfi	r2, r3, #7, #1
   184f6:	f886 20f8 	strb.w	r2, [r6, #248]	; 0xf8
		conn->pkt_tx_head = NULL;
   184fa:	f8c6 313c 	str.w	r3, [r6, #316]	; 0x13c
		conn->pkt_tx_ctrl = NULL;
   184fe:	f8c6 3140 	str.w	r3, [r6, #320]	; 0x140
		conn->pkt_tx_ctrl_last = NULL;
   18502:	f8c6 3144 	str.w	r3, [r6, #324]	; 0x144
		conn->pkt_tx_data = NULL;
   18506:	f8c6 3148 	str.w	r3, [r6, #328]	; 0x148
		conn->pkt_tx_last = NULL;
   1850a:	f8c6 314c 	str.w	r3, [r6, #332]	; 0x14c
		conn->packet_tx_head_len = 0;
   1850e:	f886 3150 	strb.w	r3, [r6, #336]	; 0x150
		conn->packet_tx_head_offset = 0;
   18512:	f886 3151 	strb.w	r3, [r6, #337]	; 0x151
		_radio.advertiser.conn = conn;
   18516:	f8c1 60c8 	str.w	r6, [r1, #200]	; 0xc8
   1851a:	e6da      	b.n	182d2 <radio_adv_enable+0x4a>
			mem_release(link, &_radio.link_rx_free);
   1851c:	492d      	ldr	r1, [pc, #180]	; (185d4 <radio_adv_enable+0x34c>)
   1851e:	4648      	mov	r0, r9
   18520:	f7f6 fa6d 	bl	e9fe <mem_release>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18524:	2007      	movs	r0, #7
   18526:	e6bd      	b.n	182a4 <radio_adv_enable+0x1c>
		ticks_slot = ((RADIO_TICKER_START_PART_US + 176 + 152 + 40) *
   18528:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   1852c:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   18530:	ebc0 00c3 	rsb	r0, r0, r3, lsl #3
   18534:	0080      	lsls	r0, r0, #2
   18536:	b280      	uxth	r0, r0
   18538:	f500 709c 	add.w	r0, r0, #312	; 0x138
   1853c:	b280      	uxth	r0, r0
   1853e:	e6f5      	b.n	1832c <radio_adv_enable+0xa4>
		ticks_slot = (RADIO_TICKER_START_PART_US + 376) * chan_cnt;
   18540:	b280      	uxth	r0, r0
   18542:	eb00 0340 	add.w	r3, r0, r0, lsl #1
   18546:	ebc3 03c3 	rsb	r3, r3, r3, lsl #3
   1854a:	eb00 00c3 	add.w	r0, r0, r3, lsl #3
   1854e:	0080      	lsls	r0, r0, #2
   18550:	b280      	uxth	r0, r0
   18552:	e6eb      	b.n	1832c <radio_adv_enable+0xa4>
	if ((pdu_adv->type == PDU_ADV_TYPE_DIRECT_IND) &&
   18554:	2c00      	cmp	r4, #0
   18556:	f47f aefe 	bne.w	18356 <radio_adv_enable+0xce>
		u32_t ticks_now = ticker_ticks_now_get();
   1855a:	f7f8 f86d 	bl	10638 <ticker_ticks_now_get>
   1855e:	4604      	mov	r4, r0
				    _radio.advertiser.hdr.ticks_slot),
   18560:	4b17      	ldr	r3, [pc, #92]	; (185c0 <radio_adv_enable+0x338>)
   18562:	6a1b      	ldr	r3, [r3, #32]
		ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   18564:	eb08 0203 	add.w	r2, r8, r3
   18568:	b293      	uxth	r3, r2
   1856a:	a90d      	add	r1, sp, #52	; 0x34
   1856c:	9108      	str	r1, [sp, #32]
   1856e:	4917      	ldr	r1, [pc, #92]	; (185cc <radio_adv_enable+0x344>)
   18570:	9107      	str	r1, [sp, #28]
   18572:	2000      	movs	r0, #0
   18574:	9006      	str	r0, [sp, #24]
   18576:	4916      	ldr	r1, [pc, #88]	; (185d0 <radio_adv_enable+0x348>)
   18578:	9105      	str	r1, [sp, #20]
   1857a:	9304      	str	r3, [sp, #16]
   1857c:	9003      	str	r0, [sp, #12]
   1857e:	9002      	str	r0, [sp, #8]
   18580:	9201      	str	r2, [sp, #4]
   18582:	9000      	str	r0, [sp, #0]
   18584:	4623      	mov	r3, r4
   18586:	2205      	movs	r2, #5
   18588:	2103      	movs	r1, #3
   1858a:	f7f7 feed 	bl	10368 <ticker_start>
		if (ret == TICKER_STATUS_BUSY) {
   1858e:	2802      	cmp	r0, #2
   18590:	d027      	beq.n	185e2 <radio_adv_enable+0x35a>
		if (ret_cb != TICKER_STATUS_SUCCESS) {
   18592:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18594:	b34b      	cbz	r3, 185ea <radio_adv_enable+0x362>
	if (conn) {
   18596:	2e00      	cmp	r6, #0
   18598:	d04d      	beq.n	18636 <radio_adv_enable+0x3ae>
		mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.
   1859a:	4c09      	ldr	r4, [pc, #36]	; (185c0 <radio_adv_enable+0x338>)
   1859c:	f504 71a2 	add.w	r1, r4, #324	; 0x144
   185a0:	f8d6 00b4 	ldr.w	r0, [r6, #180]	; 0xb4
   185a4:	f7f6 fa2b 	bl	e9fe <mem_release>
		mem_release(conn, &_radio.conn_free);
   185a8:	f504 7184 	add.w	r1, r4, #264	; 0x108
   185ac:	4630      	mov	r0, r6
   185ae:	f7f6 fa26 	bl	e9fe <mem_release>
	return BT_HCI_ERR_CMD_DISALLOWED;
   185b2:	200c      	movs	r0, #12
   185b4:	e676      	b.n	182a4 <radio_adv_enable+0x1c>
   185b6:	bf00      	nop
   185b8:	1afd498d 	.word	0x1afd498d
   185bc:	00000007 	.word	0x00000007
   185c0:	20000f84 	.word	0x20000f84
   185c4:	3b9aca00 	.word	0x3b9aca00
   185c8:	84e72a00 	.word	0x84e72a00
   185cc:	00010d4d 	.word	0x00010d4d
   185d0:	000146d5 	.word	0x000146d5
   185d4:	200010c8 	.word	0x200010c8
   185d8:	2000108c 	.word	0x2000108c
   185dc:	bf20      	wfe
  __ASM volatile ("sev");
   185de:	bf40      	sev
  __ASM volatile ("wfe");
   185e0:	bf20      	wfe
			while (ret_cb == TICKER_STATUS_BUSY) {
   185e2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   185e4:	2b02      	cmp	r3, #2
   185e6:	d0f9      	beq.n	185dc <radio_adv_enable+0x354>
   185e8:	e7d3      	b.n	18592 <radio_adv_enable+0x30a>
		ret_cb = TICKER_STATUS_BUSY;
   185ea:	ab0e      	add	r3, sp, #56	; 0x38
   185ec:	2202      	movs	r2, #2
   185ee:	f843 2d04 	str.w	r2, [r3, #-4]!
		ret =
   185f2:	9308      	str	r3, [sp, #32]
   185f4:	4b11      	ldr	r3, [pc, #68]	; (1863c <radio_adv_enable+0x3b4>)
   185f6:	9307      	str	r3, [sp, #28]
   185f8:	2000      	movs	r0, #0
   185fa:	9006      	str	r0, [sp, #24]
   185fc:	4b10      	ldr	r3, [pc, #64]	; (18640 <radio_adv_enable+0x3b8>)
   185fe:	9305      	str	r3, [sp, #20]
   18600:	9004      	str	r0, [sp, #16]
   18602:	9003      	str	r0, [sp, #12]
   18604:	9002      	str	r0, [sp, #8]
   18606:	9001      	str	r0, [sp, #4]
   18608:	f24a 33fe 	movw	r3, #41982	; 0xa3fe
   1860c:	9300      	str	r3, [sp, #0]
   1860e:	4623      	mov	r3, r4
   18610:	2203      	movs	r2, #3
   18612:	4611      	mov	r1, r2
   18614:	f7f7 fea8 	bl	10368 <ticker_start>
	    !interval) {
   18618:	e6c4      	b.n	183a4 <radio_adv_enable+0x11c>
   1861a:	bf20      	wfe
  __ASM volatile ("sev");
   1861c:	bf40      	sev
  __ASM volatile ("wfe");
   1861e:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18620:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18622:	2b02      	cmp	r3, #2
   18624:	d0f9      	beq.n	1861a <radio_adv_enable+0x392>
   18626:	e6c0      	b.n	183aa <radio_adv_enable+0x122>
			ll_adv_scan_state_cb(BIT(0));
   18628:	2001      	movs	r0, #1
   1862a:	f7ff fe24 	bl	18276 <ll_adv_scan_state_cb>
		return 0;
   1862e:	2000      	movs	r0, #0
   18630:	e638      	b.n	182a4 <radio_adv_enable+0x1c>
			return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   18632:	2007      	movs	r0, #7
   18634:	e636      	b.n	182a4 <radio_adv_enable+0x1c>
	return BT_HCI_ERR_CMD_DISALLOWED;
   18636:	200c      	movs	r0, #12
   18638:	e634      	b.n	182a4 <radio_adv_enable+0x1c>
   1863a:	bf00      	nop
   1863c:	00010d4d 	.word	0x00010d4d
   18640:	000118c9 	.word	0x000118c9

00018644 <radio_adv_disable>:
{
   18644:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_ADV,
   18646:	2103      	movs	r1, #3
   18648:	2005      	movs	r0, #5
   1864a:	f7f8 ffc1 	bl	115d0 <role_disable>
	if (!status) {
   1864e:	4604      	mov	r4, r0
   18650:	b9f0      	cbnz	r0, 18690 <radio_adv_disable+0x4c>
		_radio.advertiser.is_enabled = 0;
   18652:	4b13      	ldr	r3, [pc, #76]	; (186a0 <radio_adv_disable+0x5c>)
   18654:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   18658:	f36f 0200 	bfc	r2, #0, #1
   1865c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (!_radio.scanner.is_enabled) {
   18660:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18664:	f013 0f01 	tst.w	r3, #1
   18668:	d016      	beq.n	18698 <radio_adv_disable+0x54>
		conn = _radio.advertiser.conn;
   1866a:	4b0d      	ldr	r3, [pc, #52]	; (186a0 <radio_adv_disable+0x5c>)
   1866c:	f8d3 50c8 	ldr.w	r5, [r3, #200]	; 0xc8
		if (conn) {
   18670:	b175      	cbz	r5, 18690 <radio_adv_disable+0x4c>
			_radio.advertiser.conn = NULL;
   18672:	461e      	mov	r6, r3
   18674:	2300      	movs	r3, #0
   18676:	f8c6 30c8 	str.w	r3, [r6, #200]	; 0xc8
			mem_release(conn->llcp_terminate.radio_pdu_node_rx.hdr.onion.link,
   1867a:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   1867e:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   18682:	f7f6 f9bc 	bl	e9fe <mem_release>
			mem_release(conn, &_radio.conn_free);
   18686:	f506 7184 	add.w	r1, r6, #264	; 0x108
   1868a:	4628      	mov	r0, r5
   1868c:	f7f6 f9b7 	bl	e9fe <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   18690:	b104      	cbz	r4, 18694 <radio_adv_disable+0x50>
   18692:	240c      	movs	r4, #12
}
   18694:	4620      	mov	r0, r4
   18696:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   18698:	f7ff fded 	bl	18276 <ll_adv_scan_state_cb>
   1869c:	e7e5      	b.n	1866a <radio_adv_disable+0x26>
   1869e:	bf00      	nop
   186a0:	20000f84 	.word	0x20000f84
   186a4:	00000000 	.word	0x00000000

000186a8 <radio_scan_enable>:
{
   186a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   186ac:	b08f      	sub	sp, #60	; 0x3c
	u32_t volatile ret_cb = TICKER_STATUS_BUSY;
   186ae:	2402      	movs	r4, #2
   186b0:	940d      	str	r4, [sp, #52]	; 0x34
	if (_radio.scanner.is_enabled) {
   186b2:	4c77      	ldr	r4, [pc, #476]	; (18890 <radio_scan_enable+0x1e8>)
   186b4:	f894 40dc 	ldrb.w	r4, [r4, #220]	; 0xdc
   186b8:	f014 0f01 	tst.w	r4, #1
   186bc:	d003      	beq.n	186c6 <radio_scan_enable+0x1e>
		return BT_HCI_ERR_CMD_DISALLOWED;
   186be:	200c      	movs	r0, #12
}
   186c0:	b00f      	add	sp, #60	; 0x3c
   186c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   186c6:	461d      	mov	r5, r3
   186c8:	4617      	mov	r7, r2
   186ca:	460e      	mov	r6, r1
	_radio.scanner.type = type;
   186cc:	4c70      	ldr	r4, [pc, #448]	; (18890 <radio_scan_enable+0x1e8>)
   186ce:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   186d2:	f360 03c3 	bfi	r3, r0, #3, #1
	_radio.scanner.phy = type >> 1;
   186d6:	f3c0 0042 	ubfx	r0, r0, #1, #3
   186da:	f360 0302 	bfi	r3, r0, #0, #3
	_radio.scanner.rpa_gen = rpa_gen;
   186de:	f894 20de 	ldrb.w	r2, [r4, #222]	; 0xde
   186e2:	f89d 1068 	ldrb.w	r1, [sp, #104]	; 0x68
   186e6:	f361 0200 	bfi	r2, r1, #0, #1
   186ea:	f884 20de 	strb.w	r2, [r4, #222]	; 0xde
	_radio.scanner.rl_idx = rl_idx;
   186ee:	f89d 206c 	ldrb.w	r2, [sp, #108]	; 0x6c
   186f2:	f884 20df 	strb.w	r2, [r4, #223]	; 0xdf
	_radio.scanner.init_addr_type = init_addr_type;
   186f6:	f366 13c7 	bfi	r3, r6, #7, #1
   186fa:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
	memcpy(&_radio.scanner.init_addr[0], init_addr, BDADDR_SIZE);
   186fe:	2206      	movs	r2, #6
   18700:	4639      	mov	r1, r7
   18702:	f104 00e0 	add.w	r0, r4, #224	; 0xe0
   18706:	f7e7 fddb 	bl	2c0 <memcpy>
		TICKER_US_TO_TICKS((u64_t) window * 625);
   1870a:	f8bd 2060 	ldrh.w	r2, [sp, #96]	; 0x60
   1870e:	4e61      	ldr	r6, [pc, #388]	; (18894 <radio_scan_enable+0x1ec>)
   18710:	f04f 0a91 	mov.w	sl, #145	; 0x91
   18714:	fba2 0106 	umull	r0, r1, r2, r6
   18718:	fb0a 1102 	mla	r1, sl, r2, r1
   1871c:	a35a      	add	r3, pc, #360	; (adr r3, 18888 <radio_scan_enable+0x1e0>)
   1871e:	e9d3 2300 	ldrd	r2, r3, [r3]
   18722:	f7e8 f85b 	bl	7dc <__aeabi_uldivmod>
   18726:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	_radio.scanner.ticks_window =
   1872a:	f8c4 00ec 	str.w	r0, [r4, #236]	; 0xec
	_radio.scanner.filter_policy = filter_policy;
   1872e:	f894 30dd 	ldrb.w	r3, [r4, #221]	; 0xdd
   18732:	f89d 2064 	ldrb.w	r2, [sp, #100]	; 0x64
   18736:	f362 1305 	bfi	r3, r2, #4, #2
   1873a:	f884 30dd 	strb.w	r3, [r4, #221]	; 0xdd
		_radio.ticks_active_to_start;
   1873e:	f8d4 9180 	ldr.w	r9, [r4, #384]	; 0x180
	_radio.scanner.hdr.ticks_active_to_start =
   18742:	f8c4 90d0 	str.w	r9, [r4, #208]	; 0xd0
	_radio.scanner.hdr.ticks_xtal_to_start =
   18746:	2327      	movs	r3, #39	; 0x27
   18748:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
	_radio.scanner.hdr.ticks_preempt_to_start =
   1874c:	2300      	movs	r3, #0
   1874e:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
		_radio.scanner.ticks_window +
   18752:	f100 0809 	add.w	r8, r0, #9
	_radio.scanner.hdr.ticks_slot =
   18756:	f8c4 80d8 	str.w	r8, [r4, #216]	; 0xd8
	ticks_interval = TICKER_US_TO_TICKS((u64_t) interval * 625);
   1875a:	b2aa      	uxth	r2, r5
   1875c:	fba2 6706 	umull	r6, r7, r2, r6
   18760:	fb0a 7702 	mla	r7, sl, r2, r7
   18764:	a348      	add	r3, pc, #288	; (adr r3, 18888 <radio_scan_enable+0x1e0>)
   18766:	e9d3 2300 	ldrd	r2, r3, [r3]
   1876a:	4630      	mov	r0, r6
   1876c:	4639      	mov	r1, r7
   1876e:	f7e8 f835 	bl	7dc <__aeabi_uldivmod>
   18772:	4604      	mov	r4, r0
   18774:	f020 4a7f 	bic.w	sl, r0, #4278190080	; 0xff000000
	    (ticks_interval -
   18778:	f1aa 0327 	sub.w	r3, sl, #39	; 0x27
	if (_radio.scanner.hdr.ticks_slot >
   1877c:	4598      	cmp	r8, r3
   1877e:	d902      	bls.n	18786 <radio_scan_enable+0xde>
		_radio.scanner.hdr.ticks_slot =
   18780:	4a43      	ldr	r2, [pc, #268]	; (18890 <radio_scan_enable+0x1e8>)
   18782:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
	ticks_slot_offset =
   18786:	f1b9 0f27 	cmp.w	r9, #39	; 0x27
   1878a:	bf38      	it	cc
   1878c:	f04f 0927 	movcc.w	r9, #39	; 0x27
	ticks_anchor = ticker_ticks_now_get();
   18790:	f7f7 ff52 	bl	10638 <ticker_ticks_now_get>
   18794:	4683      	mov	fp, r0
	if ((_radio.scanner.conn) ||
   18796:	4b3e      	ldr	r3, [pc, #248]	; (18890 <radio_scan_enable+0x1e8>)
   18798:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   1879c:	2b00      	cmp	r3, #0
   1879e:	d045      	beq.n	1882c <radio_scan_enable+0x184>
		us_offset = 0;
   187a0:	2300      	movs	r3, #0
   187a2:	930c      	str	r3, [sp, #48]	; 0x30
			   (ticks_anchor + TICKER_US_TO_TICKS(us_offset)), 0,
   187a4:	f04f 0800 	mov.w	r8, #0
   187a8:	a337      	add	r3, pc, #220	; (adr r3, 18888 <radio_scan_enable+0x1e0>)
   187aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   187ae:	493a      	ldr	r1, [pc, #232]	; (18898 <radio_scan_enable+0x1f0>)
   187b0:	980c      	ldr	r0, [sp, #48]	; 0x30
   187b2:	fba0 0101 	umull	r0, r1, r0, r1
   187b6:	f7e8 f811 	bl	7dc <__aeabi_uldivmod>
   187ba:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   187be:	4483      	add	fp, r0
			   TICKER_REMAINDER((u64_t) interval * 625),
   187c0:	f024 447f 	bic.w	r4, r4, #4278190080	; 0xff000000
   187c4:	2500      	movs	r5, #0
   187c6:	4835      	ldr	r0, [pc, #212]	; (1889c <radio_scan_enable+0x1f4>)
   187c8:	2307      	movs	r3, #7
   187ca:	fb03 f304 	mul.w	r3, r3, r4
   187ce:	fb00 3305 	mla	r3, r0, r5, r3
   187d2:	fba4 0100 	umull	r0, r1, r4, r0
   187d6:	4419      	add	r1, r3
   187d8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   187dc:	2300      	movs	r3, #0
   187de:	1a30      	subs	r0, r6, r0
   187e0:	eb67 0101 	sbc.w	r1, r7, r1
   187e4:	f7e7 fffa 	bl	7dc <__aeabi_uldivmod>
			    _radio.scanner.hdr.ticks_slot),
   187e8:	4b29      	ldr	r3, [pc, #164]	; (18890 <radio_scan_enable+0x1e8>)
   187ea:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
	ret = ticker_start(RADIO_TICKER_INSTANCE_ID_RADIO,
   187ee:	4499      	add	r9, r3
   187f0:	fa1f f389 	uxth.w	r3, r9
   187f4:	aa0d      	add	r2, sp, #52	; 0x34
   187f6:	9208      	str	r2, [sp, #32]
   187f8:	4a29      	ldr	r2, [pc, #164]	; (188a0 <radio_scan_enable+0x1f8>)
   187fa:	9207      	str	r2, [sp, #28]
   187fc:	f8cd 8018 	str.w	r8, [sp, #24]
   18800:	4a28      	ldr	r2, [pc, #160]	; (188a4 <radio_scan_enable+0x1fc>)
   18802:	9205      	str	r2, [sp, #20]
   18804:	9304      	str	r3, [sp, #16]
   18806:	f8cd 800c 	str.w	r8, [sp, #12]
   1880a:	9002      	str	r0, [sp, #8]
   1880c:	f8cd a004 	str.w	sl, [sp, #4]
   18810:	f8cd 8000 	str.w	r8, [sp]
   18814:	465b      	mov	r3, fp
   18816:	2206      	movs	r2, #6
   18818:	2103      	movs	r1, #3
   1881a:	4640      	mov	r0, r8
   1881c:	f7f7 fda4 	bl	10368 <ticker_start>
	if (ret == TICKER_STATUS_BUSY) {
   18820:	2802      	cmp	r0, #2
   18822:	d017      	beq.n	18854 <radio_scan_enable+0x1ac>
	if (ret_cb != TICKER_STATUS_SUCCESS) {
   18824:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18826:	b1cb      	cbz	r3, 1885c <radio_scan_enable+0x1b4>
		return BT_HCI_ERR_CMD_DISALLOWED;
   18828:	200c      	movs	r0, #12
   1882a:	e749      	b.n	186c0 <radio_scan_enable+0x18>
		u32_t ticks_ref = 0;
   1882c:	2300      	movs	r3, #0
   1882e:	930b      	str	r3, [sp, #44]	; 0x2c
						_radio.scanner.hdr.ticks_slot),
   18830:	4b17      	ldr	r3, [pc, #92]	; (18890 <radio_scan_enable+0x1e8>)
   18832:	f8d3 10d8 	ldr.w	r1, [r3, #216]	; 0xd8
		sched_after_mstr_free_slot_get(RADIO_TICKER_USER_ID_APP,
   18836:	ab0c      	add	r3, sp, #48	; 0x30
   18838:	aa0b      	add	r2, sp, #44	; 0x2c
   1883a:	4449      	add	r1, r9
   1883c:	2003      	movs	r0, #3
   1883e:	f7f9 ff63 	bl	12708 <sched_after_mstr_free_slot_get>
		if (us_offset) {
   18842:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   18844:	2b00      	cmp	r3, #0
   18846:	d0ad      	beq.n	187a4 <radio_scan_enable+0xfc>
			ticks_anchor = ticks_ref;
   18848:	f8dd b02c 	ldr.w	fp, [sp, #44]	; 0x2c
   1884c:	e7aa      	b.n	187a4 <radio_scan_enable+0xfc>
   1884e:	bf20      	wfe
  __ASM volatile ("sev");
   18850:	bf40      	sev
  __ASM volatile ("wfe");
   18852:	bf20      	wfe
		while (ret_cb == TICKER_STATUS_BUSY) {
   18854:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   18856:	2b02      	cmp	r3, #2
   18858:	d0f9      	beq.n	1884e <radio_scan_enable+0x1a6>
   1885a:	e7e3      	b.n	18824 <radio_scan_enable+0x17c>
	_radio.scanner.is_enabled = 1;
   1885c:	4b0c      	ldr	r3, [pc, #48]	; (18890 <radio_scan_enable+0x1e8>)
   1885e:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18862:	f042 0201 	orr.w	r2, r2, #1
   18866:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
	if (!_radio.advertiser.is_enabled) {
   1886a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   1886e:	f013 0f01 	tst.w	r3, #1
   18872:	d001      	beq.n	18878 <radio_scan_enable+0x1d0>
	return 0;
   18874:	2000      	movs	r0, #0
   18876:	e723      	b.n	186c0 <radio_scan_enable+0x18>
		ll_adv_scan_state_cb(BIT(1));
   18878:	2002      	movs	r0, #2
   1887a:	f7ff fcfc 	bl	18276 <ll_adv_scan_state_cb>
	return 0;
   1887e:	2000      	movs	r0, #0
   18880:	e71e      	b.n	186c0 <radio_scan_enable+0x18>
   18882:	bf00      	nop
   18884:	f3af 8000 	nop.w
   18888:	1afd498d 	.word	0x1afd498d
   1888c:	00000007 	.word	0x00000007
   18890:	20000f84 	.word	0x20000f84
   18894:	84e72a00 	.word	0x84e72a00
   18898:	3b9aca00 	.word	0x3b9aca00
   1889c:	1afd498d 	.word	0x1afd498d
   188a0:	00010d4d 	.word	0x00010d4d
   188a4:	00015c85 	.word	0x00015c85

000188a8 <radio_scan_disable>:
{
   188a8:	b570      	push	{r4, r5, r6, lr}
	status = role_disable(RADIO_TICKER_ID_SCAN,
   188aa:	2104      	movs	r1, #4
   188ac:	2006      	movs	r0, #6
   188ae:	f7f8 fe8f 	bl	115d0 <role_disable>
	if (!status) {
   188b2:	4604      	mov	r4, r0
   188b4:	b9f0      	cbnz	r0, 188f4 <radio_scan_disable+0x4c>
		_radio.scanner.is_enabled = 0;
   188b6:	4b13      	ldr	r3, [pc, #76]	; (18904 <radio_scan_disable+0x5c>)
   188b8:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   188bc:	f36f 0200 	bfc	r2, #0, #1
   188c0:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		if (!_radio.advertiser.is_enabled) {
   188c4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   188c8:	f013 0f01 	tst.w	r3, #1
   188cc:	d016      	beq.n	188fc <radio_scan_disable+0x54>
		conn = _radio.scanner.conn;
   188ce:	4b0d      	ldr	r3, [pc, #52]	; (18904 <radio_scan_disable+0x5c>)
   188d0:	f8d3 50fc 	ldr.w	r5, [r3, #252]	; 0xfc
		if (conn) {
   188d4:	b175      	cbz	r5, 188f4 <radio_scan_disable+0x4c>
			_radio.scanner.conn = NULL;
   188d6:	461e      	mov	r6, r3
   188d8:	2300      	movs	r3, #0
   188da:	f8c6 30fc 	str.w	r3, [r6, #252]	; 0xfc
			mem_release(conn->llcp_terminate.
   188de:	f506 71a2 	add.w	r1, r6, #324	; 0x144
   188e2:	f8d5 00b4 	ldr.w	r0, [r5, #180]	; 0xb4
   188e6:	f7f6 f88a 	bl	e9fe <mem_release>
			mem_release(conn, &_radio.conn_free);
   188ea:	f506 7184 	add.w	r1, r6, #264	; 0x108
   188ee:	4628      	mov	r0, r5
   188f0:	f7f6 f885 	bl	e9fe <mem_release>
	return status ? BT_HCI_ERR_CMD_DISALLOWED : 0;
   188f4:	b104      	cbz	r4, 188f8 <radio_scan_disable+0x50>
   188f6:	240c      	movs	r4, #12
}
   188f8:	4620      	mov	r0, r4
   188fa:	bd70      	pop	{r4, r5, r6, pc}
			ll_adv_scan_state_cb(0);
   188fc:	f7ff fcbb 	bl	18276 <ll_adv_scan_state_cb>
   18900:	e7e5      	b.n	188ce <radio_scan_disable+0x26>
   18902:	bf00      	nop
   18904:	20000f84 	.word	0x20000f84

00018908 <ll_connect_disable>:
{
   18908:	b508      	push	{r3, lr}
	if (_radio.scanner.conn == 0) {
   1890a:	4b04      	ldr	r3, [pc, #16]	; (1891c <ll_connect_disable+0x14>)
   1890c:	f8d3 30fc 	ldr.w	r3, [r3, #252]	; 0xfc
   18910:	b113      	cbz	r3, 18918 <ll_connect_disable+0x10>
	status = radio_scan_disable();
   18912:	f7ff ffc9 	bl	188a8 <radio_scan_disable>
	return status;
   18916:	bd08      	pop	{r3, pc}
		return BT_HCI_ERR_CMD_DISALLOWED;
   18918:	200c      	movs	r0, #12
}
   1891a:	bd08      	pop	{r3, pc}
   1891c:	20000f84 	.word	0x20000f84

00018920 <radio_rx_dequeue>:
{
   18920:	b530      	push	{r4, r5, lr}
   18922:	b083      	sub	sp, #12
	struct radio_pdu_node_rx *radio_pdu_node_rx = NULL;
   18924:	aa02      	add	r2, sp, #8
   18926:	2300      	movs	r3, #0
   18928:	f842 3d04 	str.w	r3, [r2, #-4]!
	link = memq_dequeue(_radio.link_rx_tail, &_radio.link_rx_head,
   1892c:	4947      	ldr	r1, [pc, #284]	; (18a4c <radio_rx_dequeue+0x12c>)
   1892e:	f8d1 014c 	ldr.w	r0, [r1, #332]	; 0x14c
   18932:	f501 71a4 	add.w	r1, r1, #328	; 0x148
   18936:	f7f6 f8be 	bl	eab6 <memq_dequeue>
	LL_ASSERT(link);
   1893a:	b178      	cbz	r0, 1895c <radio_rx_dequeue+0x3c>
	mem_release(link, &_radio.link_rx_free);
   1893c:	4944      	ldr	r1, [pc, #272]	; (18a50 <radio_rx_dequeue+0x130>)
   1893e:	f7f6 f85e 	bl	e9fe <mem_release>
	switch (radio_pdu_node_rx->hdr.type) {
   18942:	9a01      	ldr	r2, [sp, #4]
   18944:	7913      	ldrb	r3, [r2, #4]
   18946:	3b01      	subs	r3, #1
   18948:	2b0b      	cmp	r3, #11
   1894a:	d824      	bhi.n	18996 <radio_rx_dequeue+0x76>
   1894c:	e8df f003 	tbb	[pc, r3]
   18950:	0c0c0c0c 	.word	0x0c0c0c0c
   18954:	0c180c0c 	.word	0x0c180c0c
   18958:	0c0c0c0c 	.word	0x0c0c0c0c
	LL_ASSERT(link);
   1895c:	4040      	eors	r0, r0
   1895e:	f380 8811 	msr	BASEPRI, r0
   18962:	f04f 0004 	mov.w	r0, #4
   18966:	df02      	svc	2
		LL_ASSERT(_radio.link_rx_data_quota <
   18968:	4938      	ldr	r1, [pc, #224]	; (18a4c <radio_rx_dequeue+0x12c>)
   1896a:	f891 3150 	ldrb.w	r3, [r1, #336]	; 0x150
   1896e:	f891 113c 	ldrb.w	r1, [r1, #316]	; 0x13c
   18972:	3901      	subs	r1, #1
   18974:	428b      	cmp	r3, r1
   18976:	da08      	bge.n	1898a <radio_rx_dequeue+0x6a>
		_radio.link_rx_data_quota++;
   18978:	3301      	adds	r3, #1
   1897a:	4934      	ldr	r1, [pc, #208]	; (18a4c <radio_rx_dequeue+0x12c>)
   1897c:	f881 3150 	strb.w	r3, [r1, #336]	; 0x150
	if (radio_pdu_node_rx->hdr.type == NODE_RX_TYPE_CONNECTION) {
   18980:	7913      	ldrb	r3, [r2, #4]
   18982:	2b06      	cmp	r3, #6
   18984:	d00d      	beq.n	189a2 <radio_rx_dequeue+0x82>
}
   18986:	b003      	add	sp, #12
   18988:	bd30      	pop	{r4, r5, pc}
		LL_ASSERT(_radio.link_rx_data_quota <
   1898a:	4040      	eors	r0, r0
   1898c:	f380 8811 	msr	BASEPRI, r0
   18990:	f04f 0004 	mov.w	r0, #4
   18994:	df02      	svc	2
		LL_ASSERT(0);
   18996:	4040      	eors	r0, r0
   18998:	f380 8811 	msr	BASEPRI, r0
   1899c:	f04f 0004 	mov.w	r0, #4
   189a0:	df02      	svc	2
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   189a2:	7ad3      	ldrb	r3, [r2, #11]
   189a4:	2b3c      	cmp	r3, #60	; 0x3c
   189a6:	d002      	beq.n	189ae <radio_rx_dequeue+0x8e>
		    radio_le_conn_cmplt->role) {
   189a8:	7b12      	ldrb	r2, [r2, #12]
		if ((radio_le_conn_cmplt->status == 0x3c) ||
   189aa:	2a00      	cmp	r2, #0
   189ac:	d039      	beq.n	18a22 <radio_rx_dequeue+0x102>
			if (radio_le_conn_cmplt->status == 0x3c) {
   189ae:	2b3c      	cmp	r3, #60	; 0x3c
   189b0:	d02a      	beq.n	18a08 <radio_rx_dequeue+0xe8>
		struct connection *conn = NULL;
   189b2:	2400      	movs	r4, #0
			LL_ASSERT(_radio.advertiser.is_enabled);
   189b4:	4b25      	ldr	r3, [pc, #148]	; (18a4c <radio_rx_dequeue+0x12c>)
   189b6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   189ba:	f013 0f01 	tst.w	r3, #1
   189be:	d02a      	beq.n	18a16 <radio_rx_dequeue+0xf6>
			_radio.advertiser.is_enabled = 0;
   189c0:	4b22      	ldr	r3, [pc, #136]	; (18a4c <radio_rx_dequeue+0x12c>)
   189c2:	f893 2024 	ldrb.w	r2, [r3, #36]	; 0x24
   189c6:	f36f 0200 	bfc	r2, #0, #1
   189ca:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
		if (conn) {
   189ce:	b15c      	cbz	r4, 189e8 <radio_rx_dequeue+0xc8>
			mem_release(node_rx->hdr.onion.link,
   189d0:	4d1e      	ldr	r5, [pc, #120]	; (18a4c <radio_rx_dequeue+0x12c>)
   189d2:	f505 71a2 	add.w	r1, r5, #324	; 0x144
   189d6:	f8d4 00b4 	ldr.w	r0, [r4, #180]	; 0xb4
   189da:	f7f6 f810 	bl	e9fe <mem_release>
			mem_release(conn, &_radio.conn_free);
   189de:	f505 7184 	add.w	r1, r5, #264	; 0x108
   189e2:	4620      	mov	r0, r4
   189e4:	f7f6 f80b 	bl	e9fe <mem_release>
		bm = ((u8_t)_radio.scanner.is_enabled << 1) |
   189e8:	4b18      	ldr	r3, [pc, #96]	; (18a4c <radio_rx_dequeue+0x12c>)
   189ea:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   189ee:	f002 0201 	and.w	r2, r2, #1
		     _radio.advertiser.is_enabled;
   189f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
   189f6:	f003 0301 	and.w	r3, r3, #1
		if (!bm) {
   189fa:	ea53 0342 	orrs.w	r3, r3, r2, lsl #1
   189fe:	d1c2      	bne.n	18986 <radio_rx_dequeue+0x66>
			ll_adv_scan_state_cb(0);
   18a00:	2000      	movs	r0, #0
   18a02:	f7ff fc38 	bl	18276 <ll_adv_scan_state_cb>
}
   18a06:	e7be      	b.n	18986 <radio_rx_dequeue+0x66>
				conn = _radio.advertiser.conn;
   18a08:	4b10      	ldr	r3, [pc, #64]	; (18a4c <radio_rx_dequeue+0x12c>)
   18a0a:	f8d3 40c8 	ldr.w	r4, [r3, #200]	; 0xc8
				_radio.advertiser.conn = NULL;
   18a0e:	2200      	movs	r2, #0
   18a10:	f8c3 20c8 	str.w	r2, [r3, #200]	; 0xc8
   18a14:	e7ce      	b.n	189b4 <radio_rx_dequeue+0x94>
			LL_ASSERT(_radio.advertiser.is_enabled);
   18a16:	4040      	eors	r0, r0
   18a18:	f380 8811 	msr	BASEPRI, r0
   18a1c:	f04f 0004 	mov.w	r0, #4
   18a20:	df02      	svc	2
			LL_ASSERT(_radio.scanner.is_enabled);
   18a22:	4b0a      	ldr	r3, [pc, #40]	; (18a4c <radio_rx_dequeue+0x12c>)
   18a24:	f893 30dc 	ldrb.w	r3, [r3, #220]	; 0xdc
   18a28:	f013 0f01 	tst.w	r3, #1
   18a2c:	d008      	beq.n	18a40 <radio_rx_dequeue+0x120>
			_radio.scanner.is_enabled = 0;
   18a2e:	4b07      	ldr	r3, [pc, #28]	; (18a4c <radio_rx_dequeue+0x12c>)
   18a30:	f893 20dc 	ldrb.w	r2, [r3, #220]	; 0xdc
   18a34:	f36f 0200 	bfc	r2, #0, #1
   18a38:	f883 20dc 	strb.w	r2, [r3, #220]	; 0xdc
		struct connection *conn = NULL;
   18a3c:	2400      	movs	r4, #0
   18a3e:	e7c6      	b.n	189ce <radio_rx_dequeue+0xae>
			LL_ASSERT(_radio.scanner.is_enabled);
   18a40:	4040      	eors	r0, r0
   18a42:	f380 8811 	msr	BASEPRI, r0
   18a46:	f04f 0004 	mov.w	r0, #4
   18a4a:	df02      	svc	2
   18a4c:	20000f84 	.word	0x20000f84
   18a50:	200010c8 	.word	0x200010c8

00018a54 <radio_nrf5_isr>:
void radio_event_callback(void)
{
	k_sem_give(sem_recv);
}

ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18a54:	4668      	mov	r0, sp
   18a56:	f020 0107 	bic.w	r1, r0, #7
   18a5a:	468d      	mov	sp, r1
   18a5c:	b501      	push	{r0, lr}
{
	isr_radio();
   18a5e:	f7f6 f8e1 	bl	ec24 <isr_radio>

	ISR_DIRECT_PM();
   18a62:	f00e fb75 	bl	27150 <_arch_isr_direct_pm>
extern void _IntExit(void);

static inline void _arch_isr_direct_footer(int maybe_swap)
{
	if (maybe_swap) {
		_IntExit();
   18a66:	f00e f90f 	bl	26c88 <_ExcExit>
ISR_DIRECT_DECLARE(radio_nrf5_isr)
   18a6a:	e8bd 4001 	ldmia.w	sp!, {r0, lr}
   18a6e:	4685      	mov	sp, r0
   18a70:	4770      	bx	lr
	...

00018a74 <rtc0_nrf5_isr>:
	return 1;
}

static void rtc0_nrf5_isr(void *arg)
{
   18a74:	b510      	push	{r4, lr}
	u32_t compare0, compare1;

	/* store interested events */
	compare0 = NRF_RTC0->EVENTS_COMPARE[0];
   18a76:	4b0c      	ldr	r3, [pc, #48]	; (18aa8 <rtc0_nrf5_isr+0x34>)
   18a78:	f8d3 2140 	ldr.w	r2, [r3, #320]	; 0x140
	compare1 = NRF_RTC0->EVENTS_COMPARE[1];
   18a7c:	f8d3 4144 	ldr.w	r4, [r3, #324]	; 0x144

	/* On compare0 run ticker worker instance0 */
	if (compare0) {
   18a80:	b922      	cbnz	r2, 18a8c <rtc0_nrf5_isr+0x18>

		ticker_trigger(0);
	}

	/* On compare1 run ticker worker instance1 */
	if (compare1) {
   18a82:	b94c      	cbnz	r4, 18a98 <rtc0_nrf5_isr+0x24>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;

		ticker_trigger(1);
	}

	mayfly_run(MAYFLY_CALL_ID_0);
   18a84:	2000      	movs	r0, #0
   18a86:	f7f5 febf 	bl	e808 <mayfly_run>
   18a8a:	bd10      	pop	{r4, pc}
		NRF_RTC0->EVENTS_COMPARE[0] = 0;
   18a8c:	2000      	movs	r0, #0
   18a8e:	f8c3 0140 	str.w	r0, [r3, #320]	; 0x140
		ticker_trigger(0);
   18a92:	f7f7 fc5b 	bl	1034c <ticker_trigger>
   18a96:	e7f4      	b.n	18a82 <rtc0_nrf5_isr+0xe>
		NRF_RTC0->EVENTS_COMPARE[1] = 0;
   18a98:	2200      	movs	r2, #0
   18a9a:	4b03      	ldr	r3, [pc, #12]	; (18aa8 <rtc0_nrf5_isr+0x34>)
   18a9c:	f8c3 2144 	str.w	r2, [r3, #324]	; 0x144
		ticker_trigger(1);
   18aa0:	2001      	movs	r0, #1
   18aa2:	f7f7 fc53 	bl	1034c <ticker_trigger>
   18aa6:	e7ed      	b.n	18a84 <rtc0_nrf5_isr+0x10>
   18aa8:	4000b000 	.word	0x4000b000

00018aac <swi4_nrf5_isr>:
{
	isr_rand(arg);
}

static void swi4_nrf5_isr(void *arg)
{
   18aac:	b508      	push	{r3, lr}
	mayfly_run(MAYFLY_CALL_ID_1);
   18aae:	2001      	movs	r0, #1
   18ab0:	f7f5 feaa 	bl	e808 <mayfly_run>
   18ab4:	bd08      	pop	{r3, pc}

00018ab6 <rng_nrf5_isr>:
{
   18ab6:	b508      	push	{r3, lr}
	isr_rand(arg);
   18ab8:	f7f7 f9e2 	bl	fe80 <isr_rand>
   18abc:	bd08      	pop	{r3, pc}

00018abe <mayfly_enable_cb>:
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   18abe:	2901      	cmp	r1, #1
   18ac0:	d105      	bne.n	18ace <mayfly_enable_cb+0x10>
{
   18ac2:	b508      	push	{r3, lr}
	if (enable) {
   18ac4:	b94a      	cbnz	r2, 18ada <mayfly_enable_cb+0x1c>
		irq_disable(SWI4_IRQn);
   18ac6:	2018      	movs	r0, #24
   18ac8:	f00e fb0c 	bl	270e4 <_arch_irq_disable>
   18acc:	bd08      	pop	{r3, pc}
	LL_ASSERT(callee_id == MAYFLY_CALL_ID_1);
   18ace:	4040      	eors	r0, r0
   18ad0:	f380 8811 	msr	BASEPRI, r0
   18ad4:	f04f 0004 	mov.w	r0, #4
   18ad8:	df02      	svc	2
		irq_enable(SWI4_IRQn);
   18ada:	2018      	movs	r0, #24
   18adc:	f00e faf4 	bl	270c8 <_arch_irq_enable>
   18ae0:	bd08      	pop	{r3, pc}

00018ae2 <mayfly_is_enabled>:
{
   18ae2:	b508      	push	{r3, lr}
	if (callee_id == MAYFLY_CALL_ID_0) {
   18ae4:	b129      	cbz	r1, 18af2 <mayfly_is_enabled+0x10>
	} else if (callee_id == MAYFLY_CALL_ID_1) {
   18ae6:	2901      	cmp	r1, #1
   18ae8:	d107      	bne.n	18afa <mayfly_is_enabled+0x18>
		return irq_is_enabled(SWI4_IRQn);
   18aea:	2018      	movs	r0, #24
   18aec:	f00e fb08 	bl	27100 <_arch_irq_is_enabled>
   18af0:	bd08      	pop	{r3, pc}
		return irq_is_enabled(RTC0_IRQn);
   18af2:	200b      	movs	r0, #11
   18af4:	f00e fb04 	bl	27100 <_arch_irq_is_enabled>
   18af8:	bd08      	pop	{r3, pc}
	LL_ASSERT(0);
   18afa:	4040      	eors	r0, r0
   18afc:	f380 8811 	msr	BASEPRI, r0
   18b00:	f04f 0004 	mov.w	r0, #4
   18b04:	df02      	svc	2

00018b06 <mayfly_prio_is_equal>:
		(callee_id == MAYFLY_CALL_ID_1)) ||
   18b06:	4288      	cmp	r0, r1
   18b08:	d009      	beq.n	18b1e <mayfly_prio_is_equal+0x18>
	return (caller_id == callee_id) ||
   18b0a:	b908      	cbnz	r0, 18b10 <mayfly_prio_is_equal+0xa>
	       ((caller_id == MAYFLY_CALL_ID_0) &&
   18b0c:	2901      	cmp	r1, #1
   18b0e:	d008      	beq.n	18b22 <mayfly_prio_is_equal+0x1c>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   18b10:	2801      	cmp	r0, #1
   18b12:	d001      	beq.n	18b18 <mayfly_prio_is_equal+0x12>
   18b14:	2000      	movs	r0, #0
   18b16:	4770      	bx	lr
	       ((caller_id == MAYFLY_CALL_ID_1) &&
   18b18:	b129      	cbz	r1, 18b26 <mayfly_prio_is_equal+0x20>
		(callee_id == MAYFLY_CALL_ID_1)) ||
   18b1a:	2000      	movs	r0, #0
   18b1c:	4770      	bx	lr
   18b1e:	2001      	movs	r0, #1
   18b20:	4770      	bx	lr
   18b22:	2001      	movs	r0, #1
   18b24:	4770      	bx	lr
   18b26:	2001      	movs	r0, #1
}
   18b28:	4770      	bx	lr
	...

00018b2c <mayfly_pend>:
	switch (callee_id) {
   18b2c:	b139      	cbz	r1, 18b3e <mayfly_pend+0x12>
   18b2e:	2901      	cmp	r1, #1
   18b30:	d00b      	beq.n	18b4a <mayfly_pend+0x1e>
		LL_ASSERT(0);
   18b32:	4040      	eors	r0, r0
   18b34:	f380 8811 	msr	BASEPRI, r0
   18b38:	f04f 0004 	mov.w	r0, #4
   18b3c:	df02      	svc	2
  NVIC->ISPR[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   18b3e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   18b42:	4b05      	ldr	r3, [pc, #20]	; (18b58 <mayfly_pend+0x2c>)
   18b44:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18b48:	4770      	bx	lr
   18b4a:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   18b4e:	4b02      	ldr	r3, [pc, #8]	; (18b58 <mayfly_pend+0x2c>)
   18b50:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
   18b54:	4770      	bx	lr
   18b56:	bf00      	nop
   18b58:	e000e100 	.word	0xe000e100

00018b5c <radio_active_callback>:
{
   18b5c:	4770      	bx	lr
	...

00018b60 <radio_event_callback>:
{
   18b60:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   18b62:	4b02      	ldr	r3, [pc, #8]	; (18b6c <radio_event_callback+0xc>)
   18b64:	6818      	ldr	r0, [r3, #0]
   18b66:	f00f ff44 	bl	289f2 <_impl_k_sem_give>
   18b6a:	bd08      	pop	{r3, pc}
   18b6c:	200018a8 	.word	0x200018a8

00018b70 <ll_init>:
}

int ll_init(struct k_sem *sem_rx)
{
   18b70:	b510      	push	{r4, lr}
   18b72:	b086      	sub	sp, #24
	struct device *clk_k32;
	struct device *clk_m16;
	u32_t err;

	sem_recv = sem_rx;
   18b74:	4b37      	ldr	r3, [pc, #220]	; (18c54 <ll_init+0xe4>)
   18b76:	6018      	str	r0, [r3, #0]

	/* TODO: bind and use RNG driver */
	rand_init(rand_context, sizeof(rand_context), RAND_THREAD_THRESHOLD);
   18b78:	2204      	movs	r2, #4
   18b7a:	2109      	movs	r1, #9
   18b7c:	4836      	ldr	r0, [pc, #216]	; (18c58 <ll_init+0xe8>)
   18b7e:	f7f7 f957 	bl	fe30 <rand_init>
	rand_isr_init(rand_isr_context, sizeof(rand_isr_context),
   18b82:	220c      	movs	r2, #12
   18b84:	2111      	movs	r1, #17
   18b86:	4835      	ldr	r0, [pc, #212]	; (18c5c <ll_init+0xec>)
   18b88:	f7f7 f95c 	bl	fe44 <rand_isr_init>
		      RAND_ISR_THRESHOLD);

	clk_k32 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_K32SRC_DRV_NAME);
   18b8c:	4834      	ldr	r0, [pc, #208]	; (18c60 <ll_init+0xf0>)
   18b8e:	f00e fc69 	bl	27464 <device_get_binding>
	if (!clk_k32) {
   18b92:	2800      	cmp	r0, #0
   18b94:	d054      	beq.n	18c40 <ll_init+0xd0>
	const struct clock_control_driver_api *api = dev->driver_api;
   18b96:	6842      	ldr	r2, [r0, #4]
	return api->on(dev, sys);
   18b98:	6812      	ldr	r2, [r2, #0]
   18b9a:	2101      	movs	r1, #1
   18b9c:	4790      	blx	r2
	}

	clock_control_on(clk_k32, (void *)CLOCK_CONTROL_NRF5_K32SRC);

	/* TODO: bind and use counter driver */
	cntr_init();
   18b9e:	f7f5 ffab 	bl	eaf8 <cntr_init>

	mayfly_init();
   18ba2:	f7f5 fd65 	bl	e670 <mayfly_init>

	_ticker_users[MAYFLY_CALL_ID_0][0] = RADIO_TICKER_USER_WORKER_OPS;
   18ba6:	4b2f      	ldr	r3, [pc, #188]	; (18c64 <ll_init+0xf4>)
   18ba8:	2108      	movs	r1, #8
   18baa:	7019      	strb	r1, [r3, #0]
	_ticker_users[MAYFLY_CALL_ID_1][0] = RADIO_TICKER_USER_JOB_OPS;
   18bac:	2203      	movs	r2, #3
   18bae:	721a      	strb	r2, [r3, #8]
	_ticker_users[MAYFLY_CALL_ID_2][0] = 0;
   18bb0:	2000      	movs	r0, #0
   18bb2:	7418      	strb	r0, [r3, #16]
	_ticker_users[MAYFLY_CALL_ID_PROGRAM][0] = TICKER_USER_APP_OPS;
   18bb4:	2202      	movs	r2, #2
   18bb6:	761a      	strb	r2, [r3, #24]

	ticker_init(RADIO_TICKER_INSTANCE_ID_RADIO, TICKER_NODES,
   18bb8:	4a2b      	ldr	r2, [pc, #172]	; (18c68 <ll_init+0xf8>)
   18bba:	9202      	str	r2, [sp, #8]
   18bbc:	220d      	movs	r2, #13
   18bbe:	9201      	str	r2, [sp, #4]
   18bc0:	9300      	str	r3, [sp, #0]
   18bc2:	2304      	movs	r3, #4
   18bc4:	4a29      	ldr	r2, [pc, #164]	; (18c6c <ll_init+0xfc>)
   18bc6:	f7f7 fb67 	bl	10298 <ticker_init>
		    &_ticker_nodes[0], MAYFLY_CALLER_COUNT, &_ticker_users[0],
		    TICKER_USER_OPS, &_ticker_user_ops[0]);

	clk_m16 = device_get_binding(CONFIG_CLOCK_CONTROL_NRF5_M16SRC_DRV_NAME);
   18bca:	4829      	ldr	r0, [pc, #164]	; (18c70 <ll_init+0x100>)
   18bcc:	f00e fc4a 	bl	27464 <device_get_binding>
	if (!clk_m16) {
   18bd0:	2800      	cmp	r0, #0
   18bd2:	d038      	beq.n	18c46 <ll_init+0xd6>
		return -ENODEV;
	}

	err = radio_init(clk_m16, CLOCK_CONTROL_NRF5_K32SRC_ACCURACY,
   18bd4:	f44f 7357 	mov.w	r3, #860	; 0x35c
   18bd8:	9304      	str	r3, [sp, #16]
   18bda:	4b26      	ldr	r3, [pc, #152]	; (18c74 <ll_init+0x104>)
   18bdc:	9303      	str	r3, [sp, #12]
   18bde:	231b      	movs	r3, #27
   18be0:	9302      	str	r3, [sp, #8]
   18be2:	9301      	str	r3, [sp, #4]
   18be4:	2302      	movs	r3, #2
   18be6:	9300      	str	r3, [sp, #0]
   18be8:	2301      	movs	r3, #1
   18bea:	461a      	mov	r2, r3
   18bec:	2107      	movs	r1, #7
   18bee:	f7fe fccb 	bl	17588 <radio_init>
			 RADIO_CONNECTION_CONTEXT_MAX,
			 RADIO_PACKET_COUNT_RX_MAX,
			 RADIO_PACKET_COUNT_TX_MAX,
			 RADIO_LL_LENGTH_OCTETS_RX_MAX,
			 RADIO_PACKET_TX_DATA_SIZE, &_radio[0], sizeof(_radio));
	if (err) {
   18bf2:	bb58      	cbnz	r0, 18c4c <ll_init+0xdc>
		BT_ERR("Required RAM size: %d, supplied: %u.", err,
		       sizeof(_radio));
		return -ENOMEM;
	}

	ll_filter_reset(true);
   18bf4:	2001      	movs	r0, #1
   18bf6:	f000 ffff 	bl	19bf8 <ll_filter_reset>

	IRQ_DIRECT_CONNECT(NRF5_IRQ_RADIO_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   18bfa:	2200      	movs	r2, #0
   18bfc:	4611      	mov	r1, r2
   18bfe:	2001      	movs	r0, #1
   18c00:	f00e fa8c 	bl	2711c <_irq_priority_set>
			   radio_nrf5_isr, 0);
	IRQ_CONNECT(NRF5_IRQ_RTC0_IRQn, CONFIG_BT_CTLR_WORKER_PRIO,
   18c04:	2200      	movs	r2, #0
   18c06:	4611      	mov	r1, r2
   18c08:	200b      	movs	r0, #11
   18c0a:	f00e fa87 	bl	2711c <_irq_priority_set>
		    rtc0_nrf5_isr, NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_SWI4_IRQn, CONFIG_BT_CTLR_JOB_PRIO, swi4_nrf5_isr,
   18c0e:	2200      	movs	r2, #0
   18c10:	4611      	mov	r1, r2
   18c12:	2018      	movs	r0, #24
   18c14:	f00e fa82 	bl	2711c <_irq_priority_set>
		    NULL, 0);
	IRQ_CONNECT(NRF5_IRQ_RNG_IRQn, 1, rng_nrf5_isr, NULL, 0);
   18c18:	2200      	movs	r2, #0
   18c1a:	2101      	movs	r1, #1
   18c1c:	200d      	movs	r0, #13
   18c1e:	f00e fa7d 	bl	2711c <_irq_priority_set>

	irq_enable(NRF5_IRQ_RADIO_IRQn);
   18c22:	2001      	movs	r0, #1
   18c24:	f00e fa50 	bl	270c8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RTC0_IRQn);
   18c28:	200b      	movs	r0, #11
   18c2a:	f00e fa4d 	bl	270c8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_SWI4_IRQn);
   18c2e:	2018      	movs	r0, #24
   18c30:	f00e fa4a 	bl	270c8 <_arch_irq_enable>
	irq_enable(NRF5_IRQ_RNG_IRQn);
   18c34:	200d      	movs	r0, #13
   18c36:	f00e fa47 	bl	270c8 <_arch_irq_enable>

	return 0;
   18c3a:	2000      	movs	r0, #0
}
   18c3c:	b006      	add	sp, #24
   18c3e:	bd10      	pop	{r4, pc}
		return -ENODEV;
   18c40:	f06f 0012 	mvn.w	r0, #18
   18c44:	e7fa      	b.n	18c3c <ll_init+0xcc>
		return -ENODEV;
   18c46:	f06f 0012 	mvn.w	r0, #18
   18c4a:	e7f7      	b.n	18c3c <ll_init+0xcc>
		return -ENOMEM;
   18c4c:	f06f 000b 	mvn.w	r0, #11
   18c50:	e7f4      	b.n	18c3c <ll_init+0xcc>
   18c52:	bf00      	nop
   18c54:	200018a8 	.word	0x200018a8
   18c58:	20001888 	.word	0x20001888
   18c5c:	20001894 	.word	0x20001894
   18c60:	0002a960 	.word	0x0002a960
   18c64:	20001868 	.word	0x20001868
   18c68:	2000162c 	.word	0x2000162c
   18c6c:	2000150c 	.word	0x2000150c
   18c70:	0002a96c 	.word	0x0002a96c
   18c74:	2000110c 	.word	0x2000110c

00018c78 <ll_addr_get>:
	*instance_index = RADIO_TICKER_INSTANCE_ID_RADIO;
}

u8_t *ll_addr_get(u8_t addr_type, u8_t *bdaddr)
{
	if (addr_type > 1) {
   18c78:	2801      	cmp	r0, #1
   18c7a:	d814      	bhi.n	18ca6 <ll_addr_get+0x2e>
{
   18c7c:	b538      	push	{r3, r4, r5, lr}
   18c7e:	460c      	mov	r4, r1
		return NULL;
	}

	if (addr_type) {
   18c80:	b140      	cbz	r0, 18c94 <ll_addr_get+0x1c>
		if (bdaddr) {
   18c82:	b191      	cbz	r1, 18caa <ll_addr_get+0x32>
			memcpy(bdaddr, _ll_context.rnd_addr, BDADDR_SIZE);
   18c84:	4d0b      	ldr	r5, [pc, #44]	; (18cb4 <ll_addr_get+0x3c>)
   18c86:	2206      	movs	r2, #6
   18c88:	4629      	mov	r1, r5
   18c8a:	4620      	mov	r0, r4
   18c8c:	f7e7 fb18 	bl	2c0 <memcpy>
		}

		return _ll_context.rnd_addr;
   18c90:	4628      	mov	r0, r5
   18c92:	bd38      	pop	{r3, r4, r5, pc}
	}

	if (bdaddr) {
   18c94:	b159      	cbz	r1, 18cae <ll_addr_get+0x36>
		memcpy(bdaddr, _ll_context.pub_addr, BDADDR_SIZE);
   18c96:	4d08      	ldr	r5, [pc, #32]	; (18cb8 <ll_addr_get+0x40>)
   18c98:	2206      	movs	r2, #6
   18c9a:	4629      	mov	r1, r5
   18c9c:	4620      	mov	r0, r4
   18c9e:	f7e7 fb0f 	bl	2c0 <memcpy>
	}

	return _ll_context.pub_addr;
   18ca2:	4628      	mov	r0, r5
   18ca4:	bd38      	pop	{r3, r4, r5, pc}
		return NULL;
   18ca6:	2000      	movs	r0, #0
   18ca8:	4770      	bx	lr
		return _ll_context.rnd_addr;
   18caa:	4802      	ldr	r0, [pc, #8]	; (18cb4 <ll_addr_get+0x3c>)
   18cac:	bd38      	pop	{r3, r4, r5, pc}
	return _ll_context.pub_addr;
   18cae:	4802      	ldr	r0, [pc, #8]	; (18cb8 <ll_addr_get+0x40>)
}
   18cb0:	bd38      	pop	{r3, r4, r5, pc}
   18cb2:	bf00      	nop
   18cb4:	20001506 	.word	0x20001506
   18cb8:	20001500 	.word	0x20001500

00018cbc <ll_addr_set>:

void ll_addr_set(u8_t addr_type, u8_t const *const bdaddr)
{
   18cbc:	b508      	push	{r3, lr}
	if (addr_type) {
   18cbe:	b920      	cbnz	r0, 18cca <ll_addr_set+0xe>
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
	} else {
		memcpy(_ll_context.pub_addr, bdaddr, BDADDR_SIZE);
   18cc0:	2206      	movs	r2, #6
   18cc2:	4804      	ldr	r0, [pc, #16]	; (18cd4 <ll_addr_set+0x18>)
   18cc4:	f7e7 fafc 	bl	2c0 <memcpy>
   18cc8:	bd08      	pop	{r3, pc}
		memcpy(_ll_context.rnd_addr, bdaddr, BDADDR_SIZE);
   18cca:	2206      	movs	r2, #6
   18ccc:	4802      	ldr	r0, [pc, #8]	; (18cd8 <ll_addr_set+0x1c>)
   18cce:	f7e7 faf7 	bl	2c0 <memcpy>
   18cd2:	bd08      	pop	{r3, pc}
   18cd4:	20001500 	.word	0x20001500
   18cd8:	20001506 	.word	0x20001506

00018cdc <wl_clear>:
	for (int i = 0; i < WL_SIZE; i++) {
   18cdc:	2300      	movs	r3, #0
   18cde:	e007      	b.n	18cf0 <wl_clear+0x14>
		wl[i].taken = 0;
   18ce0:	4a05      	ldr	r2, [pc, #20]	; (18cf8 <wl_clear+0x1c>)
   18ce2:	f812 1033 	ldrb.w	r1, [r2, r3, lsl #3]
   18ce6:	f36f 0100 	bfc	r1, #0, #1
   18cea:	f802 1033 	strb.w	r1, [r2, r3, lsl #3]
	for (int i = 0; i < WL_SIZE; i++) {
   18cee:	3301      	adds	r3, #1
   18cf0:	2b07      	cmp	r3, #7
   18cf2:	ddf5      	ble.n	18ce0 <wl_clear+0x4>
}
   18cf4:	4770      	bx	lr
   18cf6:	bf00      	nop
   18cf8:	20001ae0 	.word	0x20001ae0

00018cfc <filter_clear>:
	filter->enable_bitmask = 0;
   18cfc:	2300      	movs	r3, #0
   18cfe:	7003      	strb	r3, [r0, #0]
	filter->addr_type_bitmask = 0;
   18d00:	7043      	strb	r3, [r0, #1]
   18d02:	4770      	bx	lr

00018d04 <rl_clear>:
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18d04:	2300      	movs	r3, #0
   18d06:	e009      	b.n	18d1c <rl_clear+0x18>
		rl[i].taken = 0;
   18d08:	4907      	ldr	r1, [pc, #28]	; (18d28 <rl_clear+0x24>)
   18d0a:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18d0e:	00c2      	lsls	r2, r0, #3
   18d10:	5c88      	ldrb	r0, [r1, r2]
   18d12:	f36f 0000 	bfc	r0, #0, #1
   18d16:	5488      	strb	r0, [r1, r2]
	for (u8_t i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18d18:	3301      	adds	r3, #1
   18d1a:	b2db      	uxtb	r3, r3
   18d1c:	2b07      	cmp	r3, #7
   18d1e:	d9f3      	bls.n	18d08 <rl_clear+0x4>
	peer_irk_count = 0;
   18d20:	2200      	movs	r2, #0
   18d22:	4b02      	ldr	r3, [pc, #8]	; (18d2c <rl_clear+0x28>)
   18d24:	701a      	strb	r2, [r3, #0]
   18d26:	4770      	bx	lr
   18d28:	20001968 	.word	0x20001968
   18d2c:	200018dc 	.word	0x200018dc

00018d30 <wl_find>:
{
   18d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   18d32:	4606      	mov	r6, r0
   18d34:	460f      	mov	r7, r1
	if (free) {
   18d36:	4615      	mov	r5, r2
   18d38:	b10a      	cbz	r2, 18d3e <wl_find+0xe>
		*free = FILTER_IDX_NONE;
   18d3a:	23ff      	movs	r3, #255	; 0xff
   18d3c:	7013      	strb	r3, [r2, #0]
{
   18d3e:	2400      	movs	r4, #0
   18d40:	e00c      	b.n	18d5c <wl_find+0x2c>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18d42:	4816      	ldr	r0, [pc, #88]	; (18d9c <wl_find+0x6c>)
   18d44:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   18d48:	2206      	movs	r2, #6
   18d4a:	4639      	mov	r1, r7
   18d4c:	3002      	adds	r0, #2
   18d4e:	f010 fd8f 	bl	29870 <memcmp>
   18d52:	b9a0      	cbnz	r0, 18d7e <wl_find+0x4e>
			return i;
   18d54:	b2e0      	uxtb	r0, r4
   18d56:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			*free = i;
   18d58:	702c      	strb	r4, [r5, #0]
	for (i = 0; i < WL_SIZE; i++) {
   18d5a:	3401      	adds	r4, #1
   18d5c:	2c07      	cmp	r4, #7
   18d5e:	dc1a      	bgt.n	18d96 <wl_find+0x66>
		if (LIST_MATCH(wl, i, addr_type, addr)) {
   18d60:	4b0e      	ldr	r3, [pc, #56]	; (18d9c <wl_find+0x6c>)
   18d62:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18d66:	f013 0f01 	tst.w	r3, #1
   18d6a:	d008      	beq.n	18d7e <wl_find+0x4e>
   18d6c:	4b0b      	ldr	r3, [pc, #44]	; (18d9c <wl_find+0x6c>)
   18d6e:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18d72:	f3c3 0340 	ubfx	r3, r3, #1, #1
   18d76:	f006 0201 	and.w	r2, r6, #1
   18d7a:	4293      	cmp	r3, r2
   18d7c:	d0e1      	beq.n	18d42 <wl_find+0x12>
		} else if (free && !wl[i].taken && (*free == FILTER_IDX_NONE)) {
   18d7e:	2d00      	cmp	r5, #0
   18d80:	d0eb      	beq.n	18d5a <wl_find+0x2a>
   18d82:	4b06      	ldr	r3, [pc, #24]	; (18d9c <wl_find+0x6c>)
   18d84:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18d88:	f013 0f01 	tst.w	r3, #1
   18d8c:	d1e5      	bne.n	18d5a <wl_find+0x2a>
   18d8e:	782b      	ldrb	r3, [r5, #0]
   18d90:	2bff      	cmp	r3, #255	; 0xff
   18d92:	d1e2      	bne.n	18d5a <wl_find+0x2a>
   18d94:	e7e0      	b.n	18d58 <wl_find+0x28>
	return FILTER_IDX_NONE;
   18d96:	20ff      	movs	r0, #255	; 0xff
}
   18d98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   18d9a:	bf00      	nop
   18d9c:	20001ae0 	.word	0x20001ae0

00018da0 <wl_remove>:
{
   18da0:	b508      	push	{r3, lr}
	u8_t i = wl_find(id_addr->type, id_addr->a.val, NULL);
   18da2:	4601      	mov	r1, r0
   18da4:	f811 0b01 	ldrb.w	r0, [r1], #1
   18da8:	2200      	movs	r2, #0
   18daa:	f7ff ffc1 	bl	18d30 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   18dae:	2807      	cmp	r0, #7
   18db0:	d901      	bls.n	18db6 <wl_remove+0x16>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   18db2:	2002      	movs	r0, #2
}
   18db4:	bd08      	pop	{r3, pc}
		u8_t j = wl[i].rl_idx;
   18db6:	4b0b      	ldr	r3, [pc, #44]	; (18de4 <wl_remove+0x44>)
   18db8:	eb03 03c0 	add.w	r3, r3, r0, lsl #3
   18dbc:	785b      	ldrb	r3, [r3, #1]
		if (j < ARRAY_SIZE(rl)) {
   18dbe:	2b07      	cmp	r3, #7
   18dc0:	d807      	bhi.n	18dd2 <wl_remove+0x32>
			rl[j].wl = 0;
   18dc2:	4909      	ldr	r1, [pc, #36]	; (18de8 <wl_remove+0x48>)
   18dc4:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18dc8:	00da      	lsls	r2, r3, #3
   18dca:	5c8b      	ldrb	r3, [r1, r2]
   18dcc:	f36f 1345 	bfc	r3, #5, #1
   18dd0:	548b      	strb	r3, [r1, r2]
		wl[i].taken = 0;
   18dd2:	4b04      	ldr	r3, [pc, #16]	; (18de4 <wl_remove+0x44>)
   18dd4:	f813 2030 	ldrb.w	r2, [r3, r0, lsl #3]
   18dd8:	f36f 0200 	bfc	r2, #0, #1
   18ddc:	f803 2030 	strb.w	r2, [r3, r0, lsl #3]
		return 0;
   18de0:	2000      	movs	r0, #0
   18de2:	bd08      	pop	{r3, pc}
   18de4:	20001ae0 	.word	0x20001ae0
   18de8:	20001968 	.word	0x20001968

00018dec <filter_insert>:
{
   18dec:	b538      	push	{r3, r4, r5, lr}
	filter->enable_bitmask |= BIT(index);
   18dee:	2401      	movs	r4, #1
   18df0:	fa04 f501 	lsl.w	r5, r4, r1
   18df4:	7804      	ldrb	r4, [r0, #0]
   18df6:	432c      	orrs	r4, r5
   18df8:	7004      	strb	r4, [r0, #0]
	filter->addr_type_bitmask |= ((addr_type & 0x01) << index);
   18dfa:	f002 0201 	and.w	r2, r2, #1
   18dfe:	fa02 f401 	lsl.w	r4, r2, r1
   18e02:	7842      	ldrb	r2, [r0, #1]
   18e04:	4322      	orrs	r2, r4
   18e06:	7042      	strb	r2, [r0, #1]
	memcpy(&filter->bdaddr[index][0], bdaddr, BDADDR_SIZE);
   18e08:	eb01 0141 	add.w	r1, r1, r1, lsl #1
   18e0c:	004a      	lsls	r2, r1, #1
   18e0e:	4410      	add	r0, r2
   18e10:	2206      	movs	r2, #6
   18e12:	4619      	mov	r1, r3
   18e14:	3002      	adds	r0, #2
   18e16:	f7e7 fa53 	bl	2c0 <memcpy>
   18e1a:	bd38      	pop	{r3, r4, r5, pc}

00018e1c <filter_wl_update>:
{
   18e1c:	b510      	push	{r4, lr}
	filter_clear(&wl_filter);
   18e1e:	481b      	ldr	r0, [pc, #108]	; (18e8c <filter_wl_update+0x70>)
   18e20:	f7ff ff6c 	bl	18cfc <filter_clear>
	for (i = 0; i < WL_SIZE; i++) {
   18e24:	2400      	movs	r4, #0
   18e26:	e00c      	b.n	18e42 <filter_wl_update+0x26>
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18e28:	4b19      	ldr	r3, [pc, #100]	; (18e90 <filter_wl_update+0x74>)
   18e2a:	f813 2031 	ldrb.w	r2, [r3, r1, lsl #3]
				      wl[i].id_addr.val);
   18e2e:	eb03 03c1 	add.w	r3, r3, r1, lsl #3
			filter_insert(&wl_filter, i, wl[i].id_addr_type,
   18e32:	3302      	adds	r3, #2
   18e34:	f3c2 0240 	ubfx	r2, r2, #1, #1
   18e38:	4814      	ldr	r0, [pc, #80]	; (18e8c <filter_wl_update+0x70>)
   18e3a:	f7ff ffd7 	bl	18dec <filter_insert>
	for (i = 0; i < WL_SIZE; i++) {
   18e3e:	3401      	adds	r4, #1
   18e40:	b2e4      	uxtb	r4, r4
   18e42:	2c07      	cmp	r4, #7
   18e44:	d820      	bhi.n	18e88 <filter_wl_update+0x6c>
		if (!wl[i].taken) {
   18e46:	4621      	mov	r1, r4
   18e48:	4b11      	ldr	r3, [pc, #68]	; (18e90 <filter_wl_update+0x74>)
   18e4a:	f813 3034 	ldrb.w	r3, [r3, r4, lsl #3]
   18e4e:	f013 0f01 	tst.w	r3, #1
   18e52:	d0f4      	beq.n	18e3e <filter_wl_update+0x22>
		j = wl[i].rl_idx;
   18e54:	4b0e      	ldr	r3, [pc, #56]	; (18e90 <filter_wl_update+0x74>)
   18e56:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   18e5a:	785b      	ldrb	r3, [r3, #1]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18e5c:	4a0d      	ldr	r2, [pc, #52]	; (18e94 <filter_wl_update+0x78>)
   18e5e:	7812      	ldrb	r2, [r2, #0]
   18e60:	2a00      	cmp	r2, #0
   18e62:	d0e1      	beq.n	18e28 <filter_wl_update+0xc>
   18e64:	2b07      	cmp	r3, #7
   18e66:	d8df      	bhi.n	18e28 <filter_wl_update+0xc>
   18e68:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   18e6c:	00c2      	lsls	r2, r0, #3
   18e6e:	480a      	ldr	r0, [pc, #40]	; (18e98 <filter_wl_update+0x7c>)
   18e70:	5c82      	ldrb	r2, [r0, r2]
   18e72:	f012 0f04 	tst.w	r2, #4
   18e76:	d0d7      	beq.n	18e28 <filter_wl_update+0xc>
		    rl[j].dev) {
   18e78:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   18e7c:	00da      	lsls	r2, r3, #3
   18e7e:	5c83      	ldrb	r3, [r0, r2]
		if (!rl_enable || j >= ARRAY_SIZE(rl) || !rl[j].pirk ||
   18e80:	f013 0f10 	tst.w	r3, #16
   18e84:	d0db      	beq.n	18e3e <filter_wl_update+0x22>
   18e86:	e7cf      	b.n	18e28 <filter_wl_update+0xc>
}
   18e88:	bd10      	pop	{r4, pc}
   18e8a:	bf00      	nop
   18e8c:	20001b20 	.word	0x20001b20
   18e90:	20001ae0 	.word	0x20001ae0
   18e94:	20001aa8 	.word	0x20001aa8
   18e98:	20001968 	.word	0x20001968

00018e9c <filter_rl_update>:
{
   18e9c:	b510      	push	{r4, lr}
	filter_clear(&rl_filter);
   18e9e:	4810      	ldr	r0, [pc, #64]	; (18ee0 <filter_rl_update+0x44>)
   18ea0:	f7ff ff2c 	bl	18cfc <filter_clear>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   18ea4:	2400      	movs	r4, #0
   18ea6:	e001      	b.n	18eac <filter_rl_update+0x10>
   18ea8:	3401      	adds	r4, #1
   18eaa:	b2e4      	uxtb	r4, r4
   18eac:	2c07      	cmp	r4, #7
   18eae:	d815      	bhi.n	18edc <filter_rl_update+0x40>
		if (rl[i].taken) {
   18eb0:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   18eb4:	00d3      	lsls	r3, r2, #3
   18eb6:	4a0b      	ldr	r2, [pc, #44]	; (18ee4 <filter_rl_update+0x48>)
   18eb8:	5cd3      	ldrb	r3, [r2, r3]
   18eba:	f013 0f01 	tst.w	r3, #1
   18ebe:	d0f3      	beq.n	18ea8 <filter_rl_update+0xc>
			filter_insert(&rl_filter, i, rl[i].id_addr_type,
   18ec0:	4611      	mov	r1, r2
   18ec2:	00a3      	lsls	r3, r4, #2
   18ec4:	4423      	add	r3, r4
   18ec6:	00da      	lsls	r2, r3, #3
   18ec8:	188b      	adds	r3, r1, r2
   18eca:	5c8a      	ldrb	r2, [r1, r2]
   18ecc:	3301      	adds	r3, #1
   18ece:	f3c2 1280 	ubfx	r2, r2, #6, #1
   18ed2:	4621      	mov	r1, r4
   18ed4:	4802      	ldr	r0, [pc, #8]	; (18ee0 <filter_rl_update+0x44>)
   18ed6:	f7ff ff89 	bl	18dec <filter_insert>
   18eda:	e7e5      	b.n	18ea8 <filter_rl_update+0xc>
}
   18edc:	bd10      	pop	{r4, pc}
   18ede:	bf00      	nop
   18ee0:	20001aac 	.word	0x20001aac
   18ee4:	20001968 	.word	0x20001968

00018ee8 <rl_access_check>:
{
   18ee8:	b508      	push	{r3, lr}
	if (check_ar) {
   18eea:	b110      	cbz	r0, 18ef2 <rl_access_check+0xa>
		if (!rl_enable) {
   18eec:	4b08      	ldr	r3, [pc, #32]	; (18f10 <rl_access_check+0x28>)
   18eee:	781b      	ldrb	r3, [r3, #0]
   18ef0:	b15b      	cbz	r3, 18f0a <rl_access_check+0x22>
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18ef2:	f7fe fc27 	bl	17744 <radio_adv_is_enabled>
   18ef6:	b108      	cbz	r0, 18efc <rl_access_check+0x14>
   18ef8:	2000      	movs	r0, #0
   18efa:	bd08      	pop	{r3, pc}
   18efc:	f7fe fc3a 	bl	17774 <radio_scan_is_enabled>
   18f00:	b108      	cbz	r0, 18f06 <rl_access_check+0x1e>
   18f02:	2000      	movs	r0, #0
}
   18f04:	bd08      	pop	{r3, pc}
	return (radio_adv_is_enabled() || radio_scan_is_enabled()) ? 0 : 1;
   18f06:	2001      	movs	r0, #1
   18f08:	bd08      	pop	{r3, pc}
			return -1;
   18f0a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   18f0e:	bd08      	pop	{r3, pc}
   18f10:	20001aa8 	.word	0x20001aa8

00018f14 <rpa_refresh_start>:
{
   18f14:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18f16:	4b05      	ldr	r3, [pc, #20]	; (18f2c <rpa_refresh_start+0x18>)
   18f18:	781b      	ldrb	r3, [r3, #0]
   18f1a:	b903      	cbnz	r3, 18f1e <rpa_refresh_start+0xa>
   18f1c:	bd08      	pop	{r3, pc}
   18f1e:	4b04      	ldr	r3, [pc, #16]	; (18f30 <rpa_refresh_start+0x1c>)
   18f20:	681a      	ldr	r2, [r3, #0]
   18f22:	4904      	ldr	r1, [pc, #16]	; (18f34 <rpa_refresh_start+0x20>)
   18f24:	4804      	ldr	r0, [pc, #16]	; (18f38 <rpa_refresh_start+0x24>)
   18f26:	f010 fbad 	bl	29684 <k_delayed_work_submit_to_queue>
   18f2a:	e7f7      	b.n	18f1c <rpa_refresh_start+0x8>
   18f2c:	20001aa8 	.word	0x20001aa8
   18f30:	20002bc4 	.word	0x20002bc4
   18f34:	20002a90 	.word	0x20002a90
   18f38:	20002bd8 	.word	0x20002bd8

00018f3c <rpa_refresh_stop>:
{
   18f3c:	b508      	push	{r3, lr}
	if (!rl_enable) {
   18f3e:	4b04      	ldr	r3, [pc, #16]	; (18f50 <rpa_refresh_stop+0x14>)
   18f40:	781b      	ldrb	r3, [r3, #0]
   18f42:	b903      	cbnz	r3, 18f46 <rpa_refresh_stop+0xa>
   18f44:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&rpa_work);
   18f46:	4803      	ldr	r0, [pc, #12]	; (18f54 <rpa_refresh_stop+0x18>)
   18f48:	f010 fb42 	bl	295d0 <k_delayed_work_cancel>
   18f4c:	e7fa      	b.n	18f44 <rpa_refresh_stop+0x8>
   18f4e:	bf00      	nop
   18f50:	20001aa8 	.word	0x20001aa8
   18f54:	20002a90 	.word	0x20002a90

00018f58 <ctrl_lrpa_get>:
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18f58:	2807      	cmp	r0, #7
   18f5a:	d816      	bhi.n	18f8a <ctrl_lrpa_get+0x32>
   18f5c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18f60:	00d3      	lsls	r3, r2, #3
   18f62:	4a0d      	ldr	r2, [pc, #52]	; (18f98 <ctrl_lrpa_get+0x40>)
   18f64:	5cd3      	ldrb	r3, [r2, r3]
   18f66:	f013 0f08 	tst.w	r3, #8
   18f6a:	d010      	beq.n	18f8e <ctrl_lrpa_get+0x36>
	    !rl[rl_idx].rpas_ready) {
   18f6c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   18f70:	00d3      	lsls	r3, r2, #3
   18f72:	4a09      	ldr	r2, [pc, #36]	; (18f98 <ctrl_lrpa_get+0x40>)
   18f74:	5cd3      	ldrb	r3, [r2, r3]
	if ((rl_idx >= ARRAY_SIZE(rl)) || !rl[rl_idx].lirk ||
   18f76:	f013 0f02 	tst.w	r3, #2
   18f7a:	d00a      	beq.n	18f92 <ctrl_lrpa_get+0x3a>
	return rl[rl_idx].local_rpa;
   18f7c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   18f80:	00c2      	lsls	r2, r0, #3
   18f82:	4b05      	ldr	r3, [pc, #20]	; (18f98 <ctrl_lrpa_get+0x40>)
   18f84:	4413      	add	r3, r2
   18f86:	6a58      	ldr	r0, [r3, #36]	; 0x24
   18f88:	4770      	bx	lr
		return NULL;
   18f8a:	2000      	movs	r0, #0
   18f8c:	4770      	bx	lr
   18f8e:	2000      	movs	r0, #0
   18f90:	4770      	bx	lr
   18f92:	2000      	movs	r0, #0
}
   18f94:	4770      	bx	lr
   18f96:	bf00      	nop
   18f98:	20001968 	.word	0x20001968

00018f9c <ctrl_irks_get>:
	*count = peer_irk_count;
   18f9c:	4b02      	ldr	r3, [pc, #8]	; (18fa8 <ctrl_irks_get+0xc>)
   18f9e:	781b      	ldrb	r3, [r3, #0]
   18fa0:	7003      	strb	r3, [r0, #0]
}
   18fa2:	4802      	ldr	r0, [pc, #8]	; (18fac <ctrl_irks_get+0x10>)
   18fa4:	4770      	bx	lr
   18fa6:	bf00      	nop
   18fa8:	200018dc 	.word	0x200018dc
   18fac:	200018e8 	.word	0x200018e8

00018fb0 <ctrl_rl_idx>:
	if (whitelist) {
   18fb0:	b1c8      	cbz	r0, 18fe6 <ctrl_rl_idx+0x36>
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18fb2:	2907      	cmp	r1, #7
   18fb4:	d80b      	bhi.n	18fce <ctrl_rl_idx+0x1e>
		LL_ASSERT(wl[devmatch_id].taken);
   18fb6:	4b17      	ldr	r3, [pc, #92]	; (19014 <ctrl_rl_idx+0x64>)
   18fb8:	f813 3031 	ldrb.w	r3, [r3, r1, lsl #3]
   18fbc:	f013 0f01 	tst.w	r3, #1
   18fc0:	d00b      	beq.n	18fda <ctrl_rl_idx+0x2a>
		i = wl[devmatch_id].rl_idx;
   18fc2:	4b14      	ldr	r3, [pc, #80]	; (19014 <ctrl_rl_idx+0x64>)
   18fc4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   18fc8:	7849      	ldrb	r1, [r1, #1]
}
   18fca:	4608      	mov	r0, r1
   18fcc:	4770      	bx	lr
		LL_ASSERT(devmatch_id < ARRAY_SIZE(wl));
   18fce:	4040      	eors	r0, r0
   18fd0:	f380 8811 	msr	BASEPRI, r0
   18fd4:	f04f 0004 	mov.w	r0, #4
   18fd8:	df02      	svc	2
		LL_ASSERT(wl[devmatch_id].taken);
   18fda:	4040      	eors	r0, r0
   18fdc:	f380 8811 	msr	BASEPRI, r0
   18fe0:	f04f 0004 	mov.w	r0, #4
   18fe4:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   18fe6:	2907      	cmp	r1, #7
   18fe8:	d80d      	bhi.n	19006 <ctrl_rl_idx+0x56>
		LL_ASSERT(rl[i].taken);
   18fea:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   18fee:	00d3      	lsls	r3, r2, #3
   18ff0:	4a09      	ldr	r2, [pc, #36]	; (19018 <ctrl_rl_idx+0x68>)
   18ff2:	5cd3      	ldrb	r3, [r2, r3]
   18ff4:	f013 0f01 	tst.w	r3, #1
   18ff8:	d1e7      	bne.n	18fca <ctrl_rl_idx+0x1a>
   18ffa:	4040      	eors	r0, r0
   18ffc:	f380 8811 	msr	BASEPRI, r0
   19000:	f04f 0004 	mov.w	r0, #4
   19004:	df02      	svc	2
		LL_ASSERT(devmatch_id < ARRAY_SIZE(rl));
   19006:	4040      	eors	r0, r0
   19008:	f380 8811 	msr	BASEPRI, r0
   1900c:	f04f 0004 	mov.w	r0, #4
   19010:	df02      	svc	2
   19012:	bf00      	nop
   19014:	20001ae0 	.word	0x20001ae0
   19018:	20001968 	.word	0x20001968

0001901c <ctrl_rl_irk_idx>:
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1901c:	4b11      	ldr	r3, [pc, #68]	; (19064 <ctrl_rl_irk_idx+0x48>)
   1901e:	781b      	ldrb	r3, [r3, #0]
   19020:	4283      	cmp	r3, r0
   19022:	d90c      	bls.n	1903e <ctrl_rl_irk_idx+0x22>
	i = peer_irk_rl_ids[irkmatch_id];
   19024:	4b10      	ldr	r3, [pc, #64]	; (19068 <ctrl_rl_irk_idx+0x4c>)
   19026:	5c18      	ldrb	r0, [r3, r0]
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   19028:	2807      	cmp	r0, #7
   1902a:	d80e      	bhi.n	1904a <ctrl_rl_irk_idx+0x2e>
	LL_ASSERT(rl[i].taken);
   1902c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19030:	00d3      	lsls	r3, r2, #3
   19032:	4a0e      	ldr	r2, [pc, #56]	; (1906c <ctrl_rl_irk_idx+0x50>)
   19034:	5cd3      	ldrb	r3, [r2, r3]
   19036:	f013 0f01 	tst.w	r3, #1
   1903a:	d00c      	beq.n	19056 <ctrl_rl_irk_idx+0x3a>
}
   1903c:	4770      	bx	lr
	LL_ASSERT(irkmatch_id < peer_irk_count);
   1903e:	4040      	eors	r0, r0
   19040:	f380 8811 	msr	BASEPRI, r0
   19044:	f04f 0004 	mov.w	r0, #4
   19048:	df02      	svc	2
	LL_ASSERT(i < CONFIG_BT_CTLR_RL_SIZE);
   1904a:	4040      	eors	r0, r0
   1904c:	f380 8811 	msr	BASEPRI, r0
   19050:	f04f 0004 	mov.w	r0, #4
   19054:	df02      	svc	2
	LL_ASSERT(rl[i].taken);
   19056:	4040      	eors	r0, r0
   19058:	f380 8811 	msr	BASEPRI, r0
   1905c:	f04f 0004 	mov.w	r0, #4
   19060:	df02      	svc	2
   19062:	bf00      	nop
   19064:	200018dc 	.word	0x200018dc
   19068:	200018e0 	.word	0x200018e0
   1906c:	20001968 	.word	0x20001968

00019070 <ctrl_irk_whitelisted>:
	if (rl_idx >= ARRAY_SIZE(rl)) {
   19070:	2807      	cmp	r0, #7
   19072:	d815      	bhi.n	190a0 <ctrl_irk_whitelisted+0x30>
	LL_ASSERT(rl[rl_idx].taken);
   19074:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   19078:	00d3      	lsls	r3, r2, #3
   1907a:	4a0a      	ldr	r2, [pc, #40]	; (190a4 <ctrl_irk_whitelisted+0x34>)
   1907c:	5cd3      	ldrb	r3, [r2, r3]
   1907e:	f013 0f01 	tst.w	r3, #1
   19082:	d007      	beq.n	19094 <ctrl_irk_whitelisted+0x24>
	return rl[rl_idx].wl;
   19084:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19088:	00c3      	lsls	r3, r0, #3
   1908a:	4a06      	ldr	r2, [pc, #24]	; (190a4 <ctrl_irk_whitelisted+0x34>)
   1908c:	5cd0      	ldrb	r0, [r2, r3]
   1908e:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19092:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   19094:	4040      	eors	r0, r0
   19096:	f380 8811 	msr	BASEPRI, r0
   1909a:	f04f 0004 	mov.w	r0, #4
   1909e:	df02      	svc	2
		return false;
   190a0:	2000      	movs	r0, #0
}
   190a2:	4770      	bx	lr
   190a4:	20001968 	.word	0x20001968

000190a8 <ctrl_filter_get>:
	if (whitelist) {
   190a8:	b908      	cbnz	r0, 190ae <ctrl_filter_get+0x6>
	return &rl_filter;
   190aa:	4802      	ldr	r0, [pc, #8]	; (190b4 <ctrl_filter_get+0xc>)
}
   190ac:	4770      	bx	lr
		return &wl_filter;
   190ae:	4802      	ldr	r0, [pc, #8]	; (190b8 <ctrl_filter_get+0x10>)
   190b0:	4770      	bx	lr
   190b2:	bf00      	nop
   190b4:	20001aac 	.word	0x20001aac
   190b8:	20001b20 	.word	0x20001b20

000190bc <ll_wl_size_get>:
}
   190bc:	2008      	movs	r0, #8
   190be:	4770      	bx	lr

000190c0 <ll_wl_clear>:
{
   190c0:	b510      	push	{r4, lr}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   190c2:	f7fe fb47 	bl	17754 <radio_adv_filter_pol_get>
   190c6:	b110      	cbz	r0, 190ce <ll_wl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   190c8:	240c      	movs	r4, #12
}
   190ca:	4620      	mov	r0, r4
   190cc:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   190ce:	f7fe fb59 	bl	17784 <radio_scan_filter_pol_get>
   190d2:	f010 0401 	ands.w	r4, r0, #1
   190d6:	d001      	beq.n	190dc <ll_wl_clear+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   190d8:	240c      	movs	r4, #12
   190da:	e7f6      	b.n	190ca <ll_wl_clear+0xa>
	wl_clear();
   190dc:	f7ff fdfe 	bl	18cdc <wl_clear>
	wl_anon = 0;
   190e0:	2200      	movs	r2, #0
   190e2:	4b01      	ldr	r3, [pc, #4]	; (190e8 <ll_wl_clear+0x28>)
   190e4:	701a      	strb	r2, [r3, #0]
	return 0;
   190e6:	e7f0      	b.n	190ca <ll_wl_clear+0xa>
   190e8:	20002a20 	.word	0x20002a20

000190ec <ll_wl_remove>:
{
   190ec:	b510      	push	{r4, lr}
   190ee:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   190f0:	f7fe fb30 	bl	17754 <radio_adv_filter_pol_get>
   190f4:	b108      	cbz	r0, 190fa <ll_wl_remove+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   190f6:	200c      	movs	r0, #12
   190f8:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   190fa:	f7fe fb43 	bl	17784 <radio_scan_filter_pol_get>
   190fe:	f010 0001 	ands.w	r0, r0, #1
   19102:	d001      	beq.n	19108 <ll_wl_remove+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19104:	200c      	movs	r0, #12
}
   19106:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   19108:	7823      	ldrb	r3, [r4, #0]
   1910a:	2bff      	cmp	r3, #255	; 0xff
   1910c:	d003      	beq.n	19116 <ll_wl_remove+0x2a>
	return wl_remove(addr);
   1910e:	4620      	mov	r0, r4
   19110:	f7ff fe46 	bl	18da0 <wl_remove>
   19114:	bd10      	pop	{r4, pc}
		wl_anon = 0;
   19116:	2200      	movs	r2, #0
   19118:	4b01      	ldr	r3, [pc, #4]	; (19120 <ll_wl_remove+0x34>)
   1911a:	701a      	strb	r2, [r3, #0]
		return 0;
   1911c:	bd10      	pop	{r4, pc}
   1911e:	bf00      	nop
   19120:	20002a20 	.word	0x20002a20

00019124 <ll_filters_adv_update>:
{
   19124:	b508      	push	{r3, lr}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19126:	b918      	cbnz	r0, 19130 <ll_filters_adv_update+0xc>
	if (rl_enable && !radio_scan_is_enabled()) {
   19128:	4b09      	ldr	r3, [pc, #36]	; (19150 <ll_filters_adv_update+0x2c>)
   1912a:	781b      	ldrb	r3, [r3, #0]
   1912c:	b943      	cbnz	r3, 19140 <ll_filters_adv_update+0x1c>
   1912e:	bd08      	pop	{r3, pc}
	if (adv_fp && !(radio_scan_filter_pol_get() & 0x1)) {
   19130:	f7fe fb28 	bl	17784 <radio_scan_filter_pol_get>
   19134:	f010 0f01 	tst.w	r0, #1
   19138:	d1f6      	bne.n	19128 <ll_filters_adv_update+0x4>
		filter_wl_update();
   1913a:	f7ff fe6f 	bl	18e1c <filter_wl_update>
   1913e:	e7f3      	b.n	19128 <ll_filters_adv_update+0x4>
	if (rl_enable && !radio_scan_is_enabled()) {
   19140:	f7fe fb18 	bl	17774 <radio_scan_is_enabled>
   19144:	2800      	cmp	r0, #0
   19146:	d1f2      	bne.n	1912e <ll_filters_adv_update+0xa>
		filter_rl_update();
   19148:	f7ff fea8 	bl	18e9c <filter_rl_update>
}
   1914c:	e7ef      	b.n	1912e <ll_filters_adv_update+0xa>
   1914e:	bf00      	nop
   19150:	20001aa8 	.word	0x20001aa8

00019154 <ll_filters_scan_update>:
{
   19154:	b508      	push	{r3, lr}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19156:	f010 0f01 	tst.w	r0, #1
   1915a:	d103      	bne.n	19164 <ll_filters_scan_update+0x10>
	if (rl_enable && !radio_adv_is_enabled()) {
   1915c:	4b08      	ldr	r3, [pc, #32]	; (19180 <ll_filters_scan_update+0x2c>)
   1915e:	781b      	ldrb	r3, [r3, #0]
   19160:	b93b      	cbnz	r3, 19172 <ll_filters_scan_update+0x1e>
   19162:	bd08      	pop	{r3, pc}
	if ((scan_fp & 0x1) && !radio_adv_filter_pol_get()) {
   19164:	f7fe faf6 	bl	17754 <radio_adv_filter_pol_get>
   19168:	2800      	cmp	r0, #0
   1916a:	d1f7      	bne.n	1915c <ll_filters_scan_update+0x8>
		filter_wl_update();
   1916c:	f7ff fe56 	bl	18e1c <filter_wl_update>
   19170:	e7f4      	b.n	1915c <ll_filters_scan_update+0x8>
	if (rl_enable && !radio_adv_is_enabled()) {
   19172:	f7fe fae7 	bl	17744 <radio_adv_is_enabled>
   19176:	2800      	cmp	r0, #0
   19178:	d1f3      	bne.n	19162 <ll_filters_scan_update+0xe>
		filter_rl_update();
   1917a:	f7ff fe8f 	bl	18e9c <filter_rl_update>
}
   1917e:	e7f0      	b.n	19162 <ll_filters_scan_update+0xe>
   19180:	20001aa8 	.word	0x20001aa8

00019184 <ll_rl_find>:
{
   19184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19188:	4607      	mov	r7, r0
   1918a:	4688      	mov	r8, r1
	if (free) {
   1918c:	4616      	mov	r6, r2
   1918e:	b10a      	cbz	r2, 19194 <ll_rl_find+0x10>
		*free = FILTER_IDX_NONE;
   19190:	23ff      	movs	r3, #255	; 0xff
   19192:	7013      	strb	r3, [r2, #0]
{
   19194:	2400      	movs	r4, #0
   19196:	e00e      	b.n	191b6 <ll_rl_find+0x32>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   19198:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   1919c:	00d3      	lsls	r3, r2, #3
   1919e:	481a      	ldr	r0, [pc, #104]	; (19208 <ll_rl_find+0x84>)
   191a0:	4418      	add	r0, r3
   191a2:	2206      	movs	r2, #6
   191a4:	4641      	mov	r1, r8
   191a6:	3001      	adds	r0, #1
   191a8:	f010 fb62 	bl	29870 <memcmp>
   191ac:	b9c8      	cbnz	r0, 191e2 <ll_rl_find+0x5e>
   191ae:	e027      	b.n	19200 <ll_rl_find+0x7c>
			*free = i;
   191b0:	7034      	strb	r4, [r6, #0]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   191b2:	3401      	adds	r4, #1
   191b4:	b2e4      	uxtb	r4, r4
   191b6:	2c07      	cmp	r4, #7
   191b8:	d821      	bhi.n	191fe <ll_rl_find+0x7a>
		if (LIST_MATCH(rl, i, id_addr_type, id_addr)) {
   191ba:	4625      	mov	r5, r4
   191bc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   191c0:	00d3      	lsls	r3, r2, #3
   191c2:	4a11      	ldr	r2, [pc, #68]	; (19208 <ll_rl_find+0x84>)
   191c4:	5cd3      	ldrb	r3, [r2, r3]
   191c6:	f013 0f01 	tst.w	r3, #1
   191ca:	d00a      	beq.n	191e2 <ll_rl_find+0x5e>
   191cc:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   191d0:	00d3      	lsls	r3, r2, #3
   191d2:	4a0d      	ldr	r2, [pc, #52]	; (19208 <ll_rl_find+0x84>)
   191d4:	5cd3      	ldrb	r3, [r2, r3]
   191d6:	f3c3 1380 	ubfx	r3, r3, #6, #1
   191da:	f007 0201 	and.w	r2, r7, #1
   191de:	4293      	cmp	r3, r2
   191e0:	d0da      	beq.n	19198 <ll_rl_find+0x14>
		} else if (free && !rl[i].taken && (*free == FILTER_IDX_NONE)) {
   191e2:	2e00      	cmp	r6, #0
   191e4:	d0e5      	beq.n	191b2 <ll_rl_find+0x2e>
   191e6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   191ea:	00eb      	lsls	r3, r5, #3
   191ec:	4a06      	ldr	r2, [pc, #24]	; (19208 <ll_rl_find+0x84>)
   191ee:	5cd3      	ldrb	r3, [r2, r3]
   191f0:	f013 0f01 	tst.w	r3, #1
   191f4:	d1dd      	bne.n	191b2 <ll_rl_find+0x2e>
   191f6:	7833      	ldrb	r3, [r6, #0]
   191f8:	2bff      	cmp	r3, #255	; 0xff
   191fa:	d1da      	bne.n	191b2 <ll_rl_find+0x2e>
   191fc:	e7d8      	b.n	191b0 <ll_rl_find+0x2c>
	return FILTER_IDX_NONE;
   191fe:	24ff      	movs	r4, #255	; 0xff
}
   19200:	4620      	mov	r0, r4
   19202:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19206:	bf00      	nop
   19208:	20001968 	.word	0x20001968

0001920c <wl_add>:
{
   1920c:	b570      	push	{r4, r5, r6, lr}
   1920e:	b082      	sub	sp, #8
   19210:	4605      	mov	r5, r0
	i = wl_find(id_addr->type, id_addr->a.val, &j);
   19212:	4604      	mov	r4, r0
   19214:	f814 0b01 	ldrb.w	r0, [r4], #1
   19218:	f10d 0207 	add.w	r2, sp, #7
   1921c:	4621      	mov	r1, r4
   1921e:	f7ff fd87 	bl	18d30 <wl_find>
	if (i < ARRAY_SIZE(wl)) {
   19222:	2807      	cmp	r0, #7
   19224:	d802      	bhi.n	1922c <wl_add+0x20>
		return BT_HCI_ERR_INVALID_PARAM;
   19226:	2012      	movs	r0, #18
}
   19228:	b002      	add	sp, #8
   1922a:	bd70      	pop	{r4, r5, r6, pc}
	} else if (j >= ARRAY_SIZE(wl)) {
   1922c:	f89d 6007 	ldrb.w	r6, [sp, #7]
   19230:	2e07      	cmp	r6, #7
   19232:	d901      	bls.n	19238 <wl_add+0x2c>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   19234:	2007      	movs	r0, #7
   19236:	e7f7      	b.n	19228 <wl_add+0x1c>
	wl[i].id_addr_type = id_addr->type & 0x1;
   19238:	4629      	mov	r1, r5
   1923a:	f811 2b01 	ldrb.w	r2, [r1], #1
   1923e:	4817      	ldr	r0, [pc, #92]	; (1929c <wl_add+0x90>)
   19240:	f810 3036 	ldrb.w	r3, [r0, r6, lsl #3]
   19244:	f362 0341 	bfi	r3, r2, #1, #1
   19248:	f800 3036 	strb.w	r3, [r0, r6, lsl #3]
	bt_addr_copy(&wl[i].id_addr, &id_addr->a);
   1924c:	eb00 00c6 	add.w	r0, r0, r6, lsl #3
	memcpy(dst, src, sizeof(*dst));
   19250:	2206      	movs	r2, #6
   19252:	3002      	adds	r0, #2
   19254:	f7e7 f834 	bl	2c0 <memcpy>
	j = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19258:	2200      	movs	r2, #0
   1925a:	4621      	mov	r1, r4
   1925c:	7828      	ldrb	r0, [r5, #0]
   1925e:	f7ff ff91 	bl	19184 <ll_rl_find>
	if (j < ARRAY_SIZE(rl)) {
   19262:	2807      	cmp	r0, #7
   19264:	d814      	bhi.n	19290 <wl_add+0x84>
		wl[i].rl_idx = j;
   19266:	4b0d      	ldr	r3, [pc, #52]	; (1929c <wl_add+0x90>)
   19268:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   1926c:	7058      	strb	r0, [r3, #1]
		rl[j].wl = 1;
   1926e:	490c      	ldr	r1, [pc, #48]	; (192a0 <wl_add+0x94>)
   19270:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19274:	00c3      	lsls	r3, r0, #3
   19276:	5cca      	ldrb	r2, [r1, r3]
   19278:	f042 0220 	orr.w	r2, r2, #32
   1927c:	54ca      	strb	r2, [r1, r3]
	wl[i].taken = 1;
   1927e:	4a07      	ldr	r2, [pc, #28]	; (1929c <wl_add+0x90>)
   19280:	f812 3036 	ldrb.w	r3, [r2, r6, lsl #3]
   19284:	f043 0301 	orr.w	r3, r3, #1
   19288:	f802 3036 	strb.w	r3, [r2, r6, lsl #3]
	return 0;
   1928c:	2000      	movs	r0, #0
   1928e:	e7cb      	b.n	19228 <wl_add+0x1c>
		wl[i].rl_idx = FILTER_IDX_NONE;
   19290:	4b02      	ldr	r3, [pc, #8]	; (1929c <wl_add+0x90>)
   19292:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   19296:	22ff      	movs	r2, #255	; 0xff
   19298:	705a      	strb	r2, [r3, #1]
   1929a:	e7f0      	b.n	1927e <wl_add+0x72>
   1929c:	20001ae0 	.word	0x20001ae0
   192a0:	20001968 	.word	0x20001968

000192a4 <ll_wl_add>:
{
   192a4:	b510      	push	{r4, lr}
   192a6:	4604      	mov	r4, r0
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   192a8:	f7fe fa54 	bl	17754 <radio_adv_filter_pol_get>
   192ac:	b108      	cbz	r0, 192b2 <ll_wl_add+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   192ae:	200c      	movs	r0, #12
   192b0:	bd10      	pop	{r4, pc}
	if (radio_adv_filter_pol_get() || (radio_scan_filter_pol_get() & 0x1)) {
   192b2:	f7fe fa67 	bl	17784 <radio_scan_filter_pol_get>
   192b6:	f010 0001 	ands.w	r0, r0, #1
   192ba:	d001      	beq.n	192c0 <ll_wl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   192bc:	200c      	movs	r0, #12
}
   192be:	bd10      	pop	{r4, pc}
	if (addr->type == ADDR_TYPE_ANON) {
   192c0:	7823      	ldrb	r3, [r4, #0]
   192c2:	2bff      	cmp	r3, #255	; 0xff
   192c4:	d003      	beq.n	192ce <ll_wl_add+0x2a>
	return wl_add(addr);
   192c6:	4620      	mov	r0, r4
   192c8:	f7ff ffa0 	bl	1920c <wl_add>
   192cc:	bd10      	pop	{r4, pc}
		wl_anon = 1;
   192ce:	2201      	movs	r2, #1
   192d0:	4b01      	ldr	r3, [pc, #4]	; (192d8 <ll_wl_add+0x34>)
   192d2:	701a      	strb	r2, [r3, #0]
		return 0;
   192d4:	bd10      	pop	{r4, pc}
   192d6:	bf00      	nop
   192d8:	20002a20 	.word	0x20002a20

000192dc <ctrl_rl_idx_allowed>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || irkmatch_ok) {
   192dc:	4b17      	ldr	r3, [pc, #92]	; (1933c <ctrl_rl_idx_allowed+0x60>)
   192de:	781b      	ldrb	r3, [r3, #0]
   192e0:	b32b      	cbz	r3, 1932e <ctrl_rl_idx_allowed+0x52>
   192e2:	2907      	cmp	r1, #7
   192e4:	d825      	bhi.n	19332 <ctrl_rl_idx_allowed+0x56>
   192e6:	bb30      	cbnz	r0, 19336 <ctrl_rl_idx_allowed+0x5a>
	LL_ASSERT(rl[rl_idx].taken);
   192e8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   192ec:	00d3      	lsls	r3, r2, #3
   192ee:	4a14      	ldr	r2, [pc, #80]	; (19340 <ctrl_rl_idx_allowed+0x64>)
   192f0:	5cd3      	ldrb	r3, [r2, r3]
   192f2:	f013 0f01 	tst.w	r3, #1
   192f6:	d010      	beq.n	1931a <ctrl_rl_idx_allowed+0x3e>
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   192f8:	eb01 0281 	add.w	r2, r1, r1, lsl #2
   192fc:	00d3      	lsls	r3, r2, #3
   192fe:	4a10      	ldr	r2, [pc, #64]	; (19340 <ctrl_rl_idx_allowed+0x64>)
   19300:	5cd3      	ldrb	r3, [r2, r3]
   19302:	f013 0f04 	tst.w	r3, #4
   19306:	d00e      	beq.n	19326 <ctrl_rl_idx_allowed+0x4a>
   19308:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   1930c:	00cb      	lsls	r3, r1, #3
   1930e:	5cd3      	ldrb	r3, [r2, r3]
   19310:	f013 0f10 	tst.w	r3, #16
   19314:	d009      	beq.n	1932a <ctrl_rl_idx_allowed+0x4e>
   19316:	2001      	movs	r0, #1
   19318:	4770      	bx	lr
	LL_ASSERT(rl[rl_idx].taken);
   1931a:	4040      	eors	r0, r0
   1931c:	f380 8811 	msr	BASEPRI, r0
   19320:	f04f 0004 	mov.w	r0, #4
   19324:	df02      	svc	2
	return !rl[rl_idx].pirk || rl[rl_idx].dev;
   19326:	2001      	movs	r0, #1
   19328:	4770      	bx	lr
   1932a:	2000      	movs	r0, #0
   1932c:	4770      	bx	lr
		return true;
   1932e:	2001      	movs	r0, #1
   19330:	4770      	bx	lr
   19332:	2001      	movs	r0, #1
   19334:	4770      	bx	lr
   19336:	2001      	movs	r0, #1
}
   19338:	4770      	bx	lr
   1933a:	bf00      	nop
   1933c:	20001aa8 	.word	0x20001aa8
   19340:	20001968 	.word	0x20001968

00019344 <ll_rl_id_addr_get>:
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   19344:	2807      	cmp	r0, #7
   19346:	d81a      	bhi.n	1937e <ll_rl_id_addr_get+0x3a>
{
   19348:	b570      	push	{r4, r5, r6, lr}
   1934a:	4603      	mov	r3, r0
	LL_ASSERT(rl[rl_idx].taken);
   1934c:	eb00 0580 	add.w	r5, r0, r0, lsl #2
   19350:	00ec      	lsls	r4, r5, #3
   19352:	4811      	ldr	r0, [pc, #68]	; (19398 <ll_rl_id_addr_get+0x54>)
   19354:	5d00      	ldrb	r0, [r0, r4]
   19356:	f010 0f01 	tst.w	r0, #1
   1935a:	d016      	beq.n	1938a <ll_rl_id_addr_get+0x46>
   1935c:	4610      	mov	r0, r2
	*id_addr_type = rl[rl_idx].id_addr_type;
   1935e:	4d0e      	ldr	r5, [pc, #56]	; (19398 <ll_rl_id_addr_get+0x54>)
   19360:	009c      	lsls	r4, r3, #2
   19362:	18e6      	adds	r6, r4, r3
   19364:	00f2      	lsls	r2, r6, #3
   19366:	4616      	mov	r6, r2
   19368:	5caa      	ldrb	r2, [r5, r2]
   1936a:	f3c2 1280 	ubfx	r2, r2, #6, #1
   1936e:	700a      	strb	r2, [r1, #0]
	memcpy(id_addr, rl[rl_idx].id_addr.val, BDADDR_SIZE);
   19370:	4631      	mov	r1, r6
   19372:	4429      	add	r1, r5
   19374:	2206      	movs	r2, #6
   19376:	3101      	adds	r1, #1
   19378:	f7e6 ffa2 	bl	2c0 <memcpy>
   1937c:	bd70      	pop	{r4, r5, r6, pc}
	LL_ASSERT(rl_idx < CONFIG_BT_CTLR_RL_SIZE);
   1937e:	4040      	eors	r0, r0
   19380:	f380 8811 	msr	BASEPRI, r0
   19384:	f04f 0004 	mov.w	r0, #4
   19388:	df02      	svc	2
	LL_ASSERT(rl[rl_idx].taken);
   1938a:	4040      	eors	r0, r0
   1938c:	f380 8811 	msr	BASEPRI, r0
   19390:	f04f 0004 	mov.w	r0, #4
   19394:	df02      	svc	2
   19396:	bf00      	nop
   19398:	20001968 	.word	0x20001968

0001939c <ctrl_rl_addr_allowed>:
	if (!rl_enable || *rl_idx != FILTER_IDX_NONE) {
   1939c:	4b29      	ldr	r3, [pc, #164]	; (19444 <ctrl_rl_addr_allowed+0xa8>)
   1939e:	781b      	ldrb	r3, [r3, #0]
   193a0:	2b00      	cmp	r3, #0
   193a2:	d04a      	beq.n	1943a <ctrl_rl_addr_allowed+0x9e>
   193a4:	7813      	ldrb	r3, [r2, #0]
   193a6:	2bff      	cmp	r3, #255	; 0xff
   193a8:	d001      	beq.n	193ae <ctrl_rl_addr_allowed+0x12>
		return true;
   193aa:	2001      	movs	r0, #1
   193ac:	4770      	bx	lr
   193ae:	2300      	movs	r3, #0
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193b0:	2b07      	cmp	r3, #7
   193b2:	d844      	bhi.n	1943e <ctrl_rl_addr_allowed+0xa2>
{
   193b4:	b5f0      	push	{r4, r5, r6, r7, lr}
   193b6:	e005      	b.n	193c4 <ctrl_rl_addr_allowed+0x28>
			if (j == BDADDR_SIZE) {
   193b8:	2c06      	cmp	r4, #6
   193ba:	d026      	beq.n	1940a <ctrl_rl_addr_allowed+0x6e>
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   193bc:	3301      	adds	r3, #1
   193be:	b2db      	uxtb	r3, r3
   193c0:	2b07      	cmp	r3, #7
   193c2:	d838      	bhi.n	19436 <ctrl_rl_addr_allowed+0x9a>
		if (rl[i].taken && (rl[i].id_addr_type == id_addr_type)) {
   193c4:	461e      	mov	r6, r3
   193c6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   193ca:	00ec      	lsls	r4, r5, #3
   193cc:	4d1e      	ldr	r5, [pc, #120]	; (19448 <ctrl_rl_addr_allowed+0xac>)
   193ce:	5d2c      	ldrb	r4, [r5, r4]
   193d0:	f014 0f01 	tst.w	r4, #1
   193d4:	d0f2      	beq.n	193bc <ctrl_rl_addr_allowed+0x20>
   193d6:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   193da:	00ec      	lsls	r4, r5, #3
   193dc:	4d1a      	ldr	r5, [pc, #104]	; (19448 <ctrl_rl_addr_allowed+0xac>)
   193de:	5d2c      	ldrb	r4, [r5, r4]
   193e0:	f3c4 1480 	ubfx	r4, r4, #6, #1
   193e4:	4284      	cmp	r4, r0
   193e6:	d1e9      	bne.n	193bc <ctrl_rl_addr_allowed+0x20>
			u8_t *addr = rl[i].id_addr.val;
   193e8:	eb03 0583 	add.w	r5, r3, r3, lsl #2
   193ec:	00ec      	lsls	r4, r5, #3
   193ee:	4d16      	ldr	r5, [pc, #88]	; (19448 <ctrl_rl_addr_allowed+0xac>)
   193f0:	4425      	add	r5, r4
   193f2:	3501      	adds	r5, #1
			for (j = 0; j < BDADDR_SIZE; j++) {
   193f4:	2400      	movs	r4, #0
   193f6:	2c05      	cmp	r4, #5
   193f8:	d8de      	bhi.n	193b8 <ctrl_rl_addr_allowed+0x1c>
				if (addr[j] != id_addr[j]) {
   193fa:	f815 e004 	ldrb.w	lr, [r5, r4]
   193fe:	5d0f      	ldrb	r7, [r1, r4]
   19400:	45be      	cmp	lr, r7
   19402:	d1d9      	bne.n	193b8 <ctrl_rl_addr_allowed+0x1c>
			for (j = 0; j < BDADDR_SIZE; j++) {
   19404:	3401      	adds	r4, #1
   19406:	b2e4      	uxtb	r4, r4
   19408:	e7f5      	b.n	193f6 <ctrl_rl_addr_allowed+0x5a>
				*rl_idx = i;
   1940a:	7013      	strb	r3, [r2, #0]
				return !rl[i].pirk || rl[i].dev;
   1940c:	eb06 0286 	add.w	r2, r6, r6, lsl #2
   19410:	00d3      	lsls	r3, r2, #3
   19412:	4a0d      	ldr	r2, [pc, #52]	; (19448 <ctrl_rl_addr_allowed+0xac>)
   19414:	5cd3      	ldrb	r3, [r2, r3]
   19416:	f013 0f04 	tst.w	r3, #4
   1941a:	d00a      	beq.n	19432 <ctrl_rl_addr_allowed+0x96>
   1941c:	eb06 0686 	add.w	r6, r6, r6, lsl #2
   19420:	00f3      	lsls	r3, r6, #3
   19422:	5cd3      	ldrb	r3, [r2, r3]
   19424:	f013 0f10 	tst.w	r3, #16
   19428:	d101      	bne.n	1942e <ctrl_rl_addr_allowed+0x92>
   1942a:	2000      	movs	r0, #0
   1942c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1942e:	2001      	movs	r0, #1
   19430:	bdf0      	pop	{r4, r5, r6, r7, pc}
   19432:	2001      	movs	r0, #1
   19434:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return true;
   19436:	2001      	movs	r0, #1
   19438:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return true;
   1943a:	2001      	movs	r0, #1
   1943c:	4770      	bx	lr
	return true;
   1943e:	2001      	movs	r0, #1
}
   19440:	4770      	bx	lr
   19442:	bf00      	nop
   19444:	20001aa8 	.word	0x20001aa8
   19448:	20001968 	.word	0x20001968

0001944c <ctrl_rl_addr_resolve>:
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   1944c:	4b13      	ldr	r3, [pc, #76]	; (1949c <ctrl_rl_addr_resolve+0x50>)
   1944e:	781b      	ldrb	r3, [r3, #0]
   19450:	b1db      	cbz	r3, 1948a <ctrl_rl_addr_resolve+0x3e>
   19452:	2a07      	cmp	r2, #7
   19454:	d81b      	bhi.n	1948e <ctrl_rl_addr_resolve+0x42>
{
   19456:	b510      	push	{r4, lr}
	if (!rl_enable || rl_idx >= ARRAY_SIZE(rl) || !rl[rl_idx].lirk) {
   19458:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1945c:	00e3      	lsls	r3, r4, #3
   1945e:	4c10      	ldr	r4, [pc, #64]	; (194a0 <ctrl_rl_addr_resolve+0x54>)
   19460:	5ce3      	ldrb	r3, [r4, r3]
   19462:	f013 0f08 	tst.w	r3, #8
   19466:	d014      	beq.n	19492 <ctrl_rl_addr_resolve+0x46>
	if ((id_addr_type != 0) && ((id_addr[5] & 0xc0) == 0x40)) {
   19468:	b1a8      	cbz	r0, 19496 <ctrl_rl_addr_resolve+0x4a>
   1946a:	794b      	ldrb	r3, [r1, #5]
   1946c:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19470:	2b40      	cmp	r3, #64	; 0x40
   19472:	d001      	beq.n	19478 <ctrl_rl_addr_resolve+0x2c>
	return false;
   19474:	2000      	movs	r0, #0
}
   19476:	bd10      	pop	{r4, pc}
		return bt_rpa_irk_matches(rl[rl_idx].local_irk,
   19478:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   1947c:	00d3      	lsls	r3, r2, #3
   1947e:	4620      	mov	r0, r4
   19480:	4418      	add	r0, r3
   19482:	3007      	adds	r0, #7
   19484:	f7ea fbc6 	bl	3c14 <bt_rpa_irk_matches>
   19488:	bd10      	pop	{r4, pc}
		return false;
   1948a:	2000      	movs	r0, #0
   1948c:	4770      	bx	lr
   1948e:	2000      	movs	r0, #0
   19490:	4770      	bx	lr
   19492:	2000      	movs	r0, #0
   19494:	bd10      	pop	{r4, pc}
	return false;
   19496:	2000      	movs	r0, #0
   19498:	bd10      	pop	{r4, pc}
   1949a:	bf00      	nop
   1949c:	20001aa8 	.word	0x20001aa8
   194a0:	20001968 	.word	0x20001968

000194a4 <ctrl_rl_enabled>:
	return rl_enable;
   194a4:	4b02      	ldr	r3, [pc, #8]	; (194b0 <ctrl_rl_enabled+0xc>)
   194a6:	7818      	ldrb	r0, [r3, #0]
}
   194a8:	3000      	adds	r0, #0
   194aa:	bf18      	it	ne
   194ac:	2001      	movne	r0, #1
   194ae:	4770      	bx	lr
   194b0:	20001aa8 	.word	0x20001aa8

000194b4 <ll_rl_pdu_adv_update>:
{
   194b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   194b6:	4605      	mov	r5, r0
   194b8:	460c      	mov	r4, r1
	u8_t *adva = pdu->type == PDU_ADV_TYPE_SCAN_RSP ?
   194ba:	780b      	ldrb	r3, [r1, #0]
   194bc:	f003 030f 	and.w	r3, r3, #15
				  &pdu->payload.scan_rsp.addr[0] :
   194c0:	2b04      	cmp	r3, #4
   194c2:	d024      	beq.n	1950e <ll_rl_pdu_adv_update+0x5a>
   194c4:	1c8f      	adds	r7, r1, #2
	struct ll_adv_set *ll_adv = ll_adv_set_get();
   194c6:	f000 fbc5 	bl	19c54 <ll_adv_set_get>
   194ca:	4606      	mov	r6, r0
	if (idx < ARRAY_SIZE(rl) && rl[idx].lirk) {
   194cc:	2d07      	cmp	r5, #7
   194ce:	d826      	bhi.n	1951e <ll_rl_pdu_adv_update+0x6a>
   194d0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194d4:	00d3      	lsls	r3, r2, #3
   194d6:	4a30      	ldr	r2, [pc, #192]	; (19598 <ll_rl_pdu_adv_update+0xe4>)
   194d8:	5cd3      	ldrb	r3, [r2, r3]
   194da:	f013 0f08 	tst.w	r3, #8
   194de:	d01e      	beq.n	1951e <ll_rl_pdu_adv_update+0x6a>
		LL_ASSERT(rl[idx].rpas_ready);
   194e0:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   194e4:	00d3      	lsls	r3, r2, #3
   194e6:	4a2c      	ldr	r2, [pc, #176]	; (19598 <ll_rl_pdu_adv_update+0xe4>)
   194e8:	5cd3      	ldrb	r3, [r2, r3]
   194ea:	f013 0f02 	tst.w	r3, #2
   194ee:	d010      	beq.n	19512 <ll_rl_pdu_adv_update+0x5e>
		pdu->tx_addr = 1;
   194f0:	7823      	ldrb	r3, [r4, #0]
   194f2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   194f6:	7023      	strb	r3, [r4, #0]
		memcpy(adva, rl[idx].local_rpa->val, BDADDR_SIZE);
   194f8:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   194fc:	00da      	lsls	r2, r3, #3
   194fe:	4b26      	ldr	r3, [pc, #152]	; (19598 <ll_rl_pdu_adv_update+0xe4>)
   19500:	4413      	add	r3, r2
   19502:	2206      	movs	r2, #6
   19504:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19506:	4638      	mov	r0, r7
   19508:	f7e6 feda 	bl	2c0 <memcpy>
   1950c:	e014      	b.n	19538 <ll_rl_pdu_adv_update+0x84>
				  &pdu->payload.scan_rsp.addr[0] :
   1950e:	1c8f      	adds	r7, r1, #2
   19510:	e7d9      	b.n	194c6 <ll_rl_pdu_adv_update+0x12>
		LL_ASSERT(rl[idx].rpas_ready);
   19512:	4040      	eors	r0, r0
   19514:	f380 8811 	msr	BASEPRI, r0
   19518:	f04f 0004 	mov.w	r0, #4
   1951c:	df02      	svc	2
		pdu->tx_addr = ll_adv->own_addr_type & 0x1;
   1951e:	7833      	ldrb	r3, [r6, #0]
   19520:	f3c3 1340 	ubfx	r3, r3, #5, #1
   19524:	7822      	ldrb	r2, [r4, #0]
   19526:	f363 1286 	bfi	r2, r3, #6, #1
   1952a:	7022      	strb	r2, [r4, #0]
		ll_addr_get(ll_adv->own_addr_type & 0x1, adva);
   1952c:	7830      	ldrb	r0, [r6, #0]
   1952e:	4639      	mov	r1, r7
   19530:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19534:	f7ff fba0 	bl	18c78 <ll_addr_get>
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19538:	7823      	ldrb	r3, [r4, #0]
   1953a:	f003 030f 	and.w	r3, r3, #15
   1953e:	2b01      	cmp	r3, #1
   19540:	d000      	beq.n	19544 <ll_rl_pdu_adv_update+0x90>
   19542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		if (idx < ARRAY_SIZE(rl) && rl[idx].pirk) {
   19544:	2d07      	cmp	r5, #7
   19546:	d807      	bhi.n	19558 <ll_rl_pdu_adv_update+0xa4>
   19548:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1954c:	00d3      	lsls	r3, r2, #3
   1954e:	4a12      	ldr	r2, [pc, #72]	; (19598 <ll_rl_pdu_adv_update+0xe4>)
   19550:	5cd3      	ldrb	r3, [r2, r3]
   19552:	f013 0f04 	tst.w	r3, #4
   19556:	d10d      	bne.n	19574 <ll_rl_pdu_adv_update+0xc0>
			pdu->rx_addr = ll_adv->id_addr_type;
   19558:	4631      	mov	r1, r6
   1955a:	f811 3b02 	ldrb.w	r3, [r1], #2
   1955e:	09db      	lsrs	r3, r3, #7
   19560:	7822      	ldrb	r2, [r4, #0]
   19562:	f363 12c7 	bfi	r2, r3, #7, #1
   19566:	4620      	mov	r0, r4
   19568:	f800 2b08 	strb.w	r2, [r0], #8
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1956c:	2206      	movs	r2, #6
   1956e:	f7e6 fea7 	bl	2c0 <memcpy>
}
   19572:	e7e6      	b.n	19542 <ll_rl_pdu_adv_update+0x8e>
			pdu->rx_addr = 1;
   19574:	7823      	ldrb	r3, [r4, #0]
   19576:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   1957a:	4620      	mov	r0, r4
   1957c:	f800 3b08 	strb.w	r3, [r0], #8
			       rl[idx].peer_rpa.val, BDADDR_SIZE);
   19580:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19584:	00eb      	lsls	r3, r5, #3
   19586:	3318      	adds	r3, #24
   19588:	4611      	mov	r1, r2
   1958a:	4419      	add	r1, r3
			memcpy(&pdu->payload.direct_ind.tgt_addr[0],
   1958c:	2206      	movs	r2, #6
   1958e:	4411      	add	r1, r2
   19590:	f7e6 fe96 	bl	2c0 <memcpy>
   19594:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   19596:	bf00      	nop
   19598:	20001968 	.word	0x20001968

0001959c <rpa_adv_refresh>:
{
   1959c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	ll_adv = ll_adv_set_get();
   195a0:	f000 fb58 	bl	19c54 <ll_adv_set_get>
   195a4:	4606      	mov	r6, r0
	if (ll_adv->own_addr_type != BT_ADDR_LE_PUBLIC_ID &&
   195a6:	7803      	ldrb	r3, [r0, #0]
   195a8:	f003 0360 	and.w	r3, r3, #96	; 0x60
   195ac:	2b40      	cmp	r3, #64	; 0x40
   195ae:	d003      	beq.n	195b8 <rpa_adv_refresh+0x1c>
   195b0:	2b60      	cmp	r3, #96	; 0x60
   195b2:	d001      	beq.n	195b8 <rpa_adv_refresh+0x1c>
   195b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   195b8:	f7fe f8bc 	bl	17734 <radio_adv_data_get>
   195bc:	4604      	mov	r4, r0
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   195be:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   195c2:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   195c6:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   195ca:	1887      	adds	r7, r0, r2
	if (radio_adv_data->first == radio_adv_data->last) {
   195cc:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   195d0:	429d      	cmp	r5, r3
   195d2:	d02d      	beq.n	19630 <rpa_adv_refresh+0x94>
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   195d4:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   195d8:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   195dc:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   195e0:	5ca0      	ldrb	r0, [r4, r2]
   195e2:	5ce1      	ldrb	r1, [r4, r3]
   195e4:	f360 0103 	bfi	r1, r0, #0, #4
	pdu->rfu = 0;
   195e8:	f36f 1104 	bfc	r1, #4, #1
   195ec:	54e1      	strb	r1, [r4, r3]
		pdu->chan_sel = prev->chan_sel;
   195ee:	5ca2      	ldrb	r2, [r4, r2]
   195f0:	f3c2 1240 	ubfx	r2, r2, #5, #1
   195f4:	b2c9      	uxtb	r1, r1
   195f6:	f362 1145 	bfi	r1, r2, #5, #1
   195fa:	54e1      	strb	r1, [r4, r3]
	idx = ll_rl_find(ll_adv->id_addr_type, ll_adv->id_addr, NULL);
   195fc:	4631      	mov	r1, r6
   195fe:	f811 0b02 	ldrb.w	r0, [r1], #2
   19602:	2200      	movs	r2, #0
   19604:	09c0      	lsrs	r0, r0, #7
   19606:	f7ff fdbd 	bl	19184 <ll_rl_find>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1960a:	2807      	cmp	r0, #7
   1960c:	d816      	bhi.n	1963c <rpa_adv_refresh+0xa0>
	ll_rl_pdu_adv_update(idx, pdu);
   1960e:	4641      	mov	r1, r8
   19610:	f7ff ff50 	bl	194b4 <ll_rl_pdu_adv_update>
	       prev->len - BDADDR_SIZE);
   19614:	787a      	ldrb	r2, [r7, #1]
	memcpy(&pdu->payload.adv_ind.data[0], &prev->payload.adv_ind.data[0],
   19616:	3a06      	subs	r2, #6
   19618:	f107 0108 	add.w	r1, r7, #8
   1961c:	f108 0008 	add.w	r0, r8, #8
   19620:	f7e6 fe4e 	bl	2c0 <memcpy>
	pdu->len = prev->len;
   19624:	787b      	ldrb	r3, [r7, #1]
   19626:	f888 3001 	strb.w	r3, [r8, #1]
	radio_adv_data->last = last;
   1962a:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   1962e:	e7c1      	b.n	195b4 <rpa_adv_refresh+0x18>
		last = radio_adv_data->last + 1;
   19630:	3501      	adds	r5, #1
   19632:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19634:	2d02      	cmp	r5, #2
   19636:	d1cd      	bne.n	195d4 <rpa_adv_refresh+0x38>
			last = 0;
   19638:	2500      	movs	r5, #0
   1963a:	e7cb      	b.n	195d4 <rpa_adv_refresh+0x38>
	LL_ASSERT(idx < ARRAY_SIZE(rl));
   1963c:	4040      	eors	r0, r0
   1963e:	f380 8811 	msr	BASEPRI, r0
   19642:	f04f 0004 	mov.w	r0, #4
   19646:	df02      	svc	2

00019648 <ll_rl_rpa_update>:
{
   19648:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1964c:	b085      	sub	sp, #20
   1964e:	4681      	mov	r9, r0
K_SYSCALL_DECLARE0_RET64(K_SYSCALL_K_UPTIME_GET, k_uptime_get, s64_t);
   19650:	f00f fa44 	bl	28adc <_impl_k_uptime_get>
   19654:	4606      	mov	r6, r0
   19656:	460f      	mov	r7, r1
	bool all = timeout || (rpa_last_ms == -1) ||
   19658:	f1b9 0f00 	cmp.w	r9, #0
   1965c:	d115      	bne.n	1968a <ll_rl_rpa_update+0x42>
   1965e:	4b57      	ldr	r3, [pc, #348]	; (197bc <ll_rl_rpa_update+0x174>)
   19660:	e9d3 0100 	ldrd	r0, r1, [r3]
   19664:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   19668:	bf08      	it	eq
   1966a:	f1b0 3fff 	cmpeq.w	r0, #4294967295	; 0xffffffff
   1966e:	d010      	beq.n	19692 <ll_rl_rpa_update+0x4a>
		   (now - rpa_last_ms >= rpa_timeout_ms);
   19670:	1a30      	subs	r0, r6, r0
   19672:	eb67 0101 	sbc.w	r1, r7, r1
   19676:	4b52      	ldr	r3, [pc, #328]	; (197c0 <ll_rl_rpa_update+0x178>)
   19678:	681a      	ldr	r2, [r3, #0]
   1967a:	2300      	movs	r3, #0
	bool all = timeout || (rpa_last_ms == -1) ||
   1967c:	4290      	cmp	r0, r2
   1967e:	eb71 0303 	sbcs.w	r3, r1, r3
   19682:	db09      	blt.n	19698 <ll_rl_rpa_update+0x50>
   19684:	f04f 0801 	mov.w	r8, #1
   19688:	e001      	b.n	1968e <ll_rl_rpa_update+0x46>
   1968a:	f04f 0801 	mov.w	r8, #1
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   1968e:	2400      	movs	r4, #0
   19690:	e02a      	b.n	196e8 <ll_rl_rpa_update+0xa0>
	bool all = timeout || (rpa_last_ms == -1) ||
   19692:	f04f 0801 	mov.w	r8, #1
   19696:	e7fa      	b.n	1968e <ll_rl_rpa_update+0x46>
   19698:	f04f 0800 	mov.w	r8, #0
   1969c:	e7f7      	b.n	1968e <ll_rl_rpa_update+0x46>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1969e:	7818      	ldrb	r0, [r3, #0]
   196a0:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   196a2:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   196a4:	3b01      	subs	r3, #1
   196a6:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   196a8:	2a00      	cmp	r2, #0
   196aa:	d1f8      	bne.n	1969e <ll_rl_rpa_update+0x56>
				err = bt_rpa_create(irk, &rl[i].peer_rpa);
   196ac:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   196b0:	00d3      	lsls	r3, r2, #3
   196b2:	3318      	adds	r3, #24
   196b4:	4943      	ldr	r1, [pc, #268]	; (197c4 <ll_rl_rpa_update+0x17c>)
   196b6:	4419      	add	r1, r3
   196b8:	3106      	adds	r1, #6
   196ba:	4668      	mov	r0, sp
   196bc:	f7ea fabe 	bl	3c3c <bt_rpa_create>
				LL_ASSERT(!err);
   196c0:	2800      	cmp	r0, #0
   196c2:	d13c      	bne.n	1973e <ll_rl_rpa_update+0xf6>
			if (rl[i].lirk) {
   196c4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   196c8:	00d3      	lsls	r3, r2, #3
   196ca:	4a3e      	ldr	r2, [pc, #248]	; (197c4 <ll_rl_rpa_update+0x17c>)
   196cc:	5cd3      	ldrb	r3, [r2, r3]
   196ce:	f013 0f08 	tst.w	r3, #8
   196d2:	d13a      	bne.n	1974a <ll_rl_rpa_update+0x102>
			rl[i].rpas_ready = 1;
   196d4:	493b      	ldr	r1, [pc, #236]	; (197c4 <ll_rl_rpa_update+0x17c>)
   196d6:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   196da:	00eb      	lsls	r3, r5, #3
   196dc:	5cca      	ldrb	r2, [r1, r3]
   196de:	f042 0202 	orr.w	r2, r2, #2
   196e2:	54ca      	strb	r2, [r1, r3]
	for (i = 0; i < CONFIG_BT_CTLR_RL_SIZE; i++) {
   196e4:	3401      	adds	r4, #1
   196e6:	b2e4      	uxtb	r4, r4
   196e8:	2c07      	cmp	r4, #7
   196ea:	d854      	bhi.n	19796 <ll_rl_rpa_update+0x14e>
		if ((rl[i].taken) && (all || !rl[i].rpas_ready)) {
   196ec:	4625      	mov	r5, r4
   196ee:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   196f2:	00d3      	lsls	r3, r2, #3
   196f4:	4a33      	ldr	r2, [pc, #204]	; (197c4 <ll_rl_rpa_update+0x17c>)
   196f6:	5cd3      	ldrb	r3, [r2, r3]
   196f8:	f013 0f01 	tst.w	r3, #1
   196fc:	d0f2      	beq.n	196e4 <ll_rl_rpa_update+0x9c>
   196fe:	f1b8 0f00 	cmp.w	r8, #0
   19702:	d107      	bne.n	19714 <ll_rl_rpa_update+0xcc>
   19704:	eb04 0284 	add.w	r2, r4, r4, lsl #2
   19708:	00d3      	lsls	r3, r2, #3
   1970a:	4a2e      	ldr	r2, [pc, #184]	; (197c4 <ll_rl_rpa_update+0x17c>)
   1970c:	5cd3      	ldrb	r3, [r2, r3]
   1970e:	f013 0f02 	tst.w	r3, #2
   19712:	d1e7      	bne.n	196e4 <ll_rl_rpa_update+0x9c>
			if (rl[i].pirk) {
   19714:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19718:	00d3      	lsls	r3, r2, #3
   1971a:	4a2a      	ldr	r2, [pc, #168]	; (197c4 <ll_rl_rpa_update+0x17c>)
   1971c:	5cd3      	ldrb	r3, [r2, r3]
   1971e:	f013 0f04 	tst.w	r3, #4
   19722:	d0cf      	beq.n	196c4 <ll_rl_rpa_update+0x7c>
				sys_memcpy_swap(irk, peer_irks[rl[i].pirk_idx],
   19724:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19728:	00da      	lsls	r2, r3, #3
   1972a:	4b26      	ldr	r3, [pc, #152]	; (197c4 <ll_rl_rpa_update+0x17c>)
   1972c:	4413      	add	r3, r2
   1972e:	7dda      	ldrb	r2, [r3, #23]
   19730:	4b25      	ldr	r3, [pc, #148]	; (197c8 <ll_rl_rpa_update+0x180>)
   19732:	eb03 1302 	add.w	r3, r3, r2, lsl #4
	src += length - 1;
   19736:	330f      	adds	r3, #15
   19738:	2210      	movs	r2, #16
   1973a:	4669      	mov	r1, sp
   1973c:	e7b4      	b.n	196a8 <ll_rl_rpa_update+0x60>
				LL_ASSERT(!err);
   1973e:	4040      	eors	r0, r0
   19740:	f380 8811 	msr	BASEPRI, r0
   19744:	f04f 0004 	mov.w	r0, #4
   19748:	df02      	svc	2
				err = bt_rpa_create(rl[i].local_irk, &rpa);
   1974a:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1974e:	00d3      	lsls	r3, r2, #3
   19750:	481c      	ldr	r0, [pc, #112]	; (197c4 <ll_rl_rpa_update+0x17c>)
   19752:	4418      	add	r0, r3
   19754:	4669      	mov	r1, sp
   19756:	3007      	adds	r0, #7
   19758:	f7ea fa70 	bl	3c3c <bt_rpa_create>
				LL_ASSERT(!err);
   1975c:	b9a8      	cbnz	r0, 1978a <ll_rl_rpa_update+0x142>
				rl[i].local_rpa = &rpa;
   1975e:	00ab      	lsls	r3, r5, #2
   19760:	442b      	add	r3, r5
   19762:	00da      	lsls	r2, r3, #3
   19764:	4b17      	ldr	r3, [pc, #92]	; (197c4 <ll_rl_rpa_update+0x17c>)
   19766:	eb03 0a02 	add.w	sl, r3, r2
   1976a:	f8ca d024 	str.w	sp, [sl, #36]	; 0x24
				bt_addr_copy(&local_rpas[i], &rpa);
   1976e:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   19772:	ea4f 0b43 	mov.w	fp, r3, lsl #1
   19776:	4b15      	ldr	r3, [pc, #84]	; (197cc <ll_rl_rpa_update+0x184>)
   19778:	449b      	add	fp, r3
   1977a:	2206      	movs	r2, #6
   1977c:	4669      	mov	r1, sp
   1977e:	4658      	mov	r0, fp
   19780:	f7e6 fd9e 	bl	2c0 <memcpy>
				rl[i].local_rpa = &local_rpas[i];
   19784:	f8ca b024 	str.w	fp, [sl, #36]	; 0x24
   19788:	e7a4      	b.n	196d4 <ll_rl_rpa_update+0x8c>
				LL_ASSERT(!err);
   1978a:	4040      	eors	r0, r0
   1978c:	f380 8811 	msr	BASEPRI, r0
   19790:	f04f 0004 	mov.w	r0, #4
   19794:	df02      	svc	2
	if (all) {
   19796:	f1b8 0f00 	cmp.w	r8, #0
   1979a:	d002      	beq.n	197a2 <ll_rl_rpa_update+0x15a>
		rpa_last_ms = now;
   1979c:	4b07      	ldr	r3, [pc, #28]	; (197bc <ll_rl_rpa_update+0x174>)
   1979e:	e9c3 6700 	strd	r6, r7, [r3]
	if (timeout) {
   197a2:	f1b9 0f00 	cmp.w	r9, #0
   197a6:	d102      	bne.n	197ae <ll_rl_rpa_update+0x166>
}
   197a8:	b005      	add	sp, #20
   197aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if (radio_adv_is_enabled()) {
   197ae:	f7fd ffc9 	bl	17744 <radio_adv_is_enabled>
   197b2:	2800      	cmp	r0, #0
   197b4:	d0f8      	beq.n	197a8 <ll_rl_rpa_update+0x160>
			rpa_adv_refresh();
   197b6:	f7ff fef1 	bl	1959c <rpa_adv_refresh>
}
   197ba:	e7f5      	b.n	197a8 <ll_rl_rpa_update+0x160>
   197bc:	20002a18 	.word	0x20002a18
   197c0:	20002bc4 	.word	0x20002bc4
   197c4:	20001968 	.word	0x20001968
   197c8:	200018e8 	.word	0x200018e8
   197cc:	200018ac 	.word	0x200018ac

000197d0 <rpa_timeout>:
{
   197d0:	b508      	push	{r3, lr}
	ll_rl_rpa_update(true);
   197d2:	2001      	movs	r0, #1
   197d4:	f7ff ff38 	bl	19648 <ll_rl_rpa_update>
   197d8:	4b03      	ldr	r3, [pc, #12]	; (197e8 <rpa_timeout+0x18>)
   197da:	681a      	ldr	r2, [r3, #0]
   197dc:	4903      	ldr	r1, [pc, #12]	; (197ec <rpa_timeout+0x1c>)
   197de:	4804      	ldr	r0, [pc, #16]	; (197f0 <rpa_timeout+0x20>)
   197e0:	f00f ff50 	bl	29684 <k_delayed_work_submit_to_queue>
   197e4:	bd08      	pop	{r3, pc}
   197e6:	bf00      	nop
   197e8:	20002bc4 	.word	0x20002bc4
   197ec:	20002a90 	.word	0x20002a90
   197f0:	20002bd8 	.word	0x20002bd8

000197f4 <ll_rl_size_get>:
}

u32_t ll_rl_size_get(void)
{
	return CONFIG_BT_CTLR_RL_SIZE;
}
   197f4:	2008      	movs	r0, #8
   197f6:	4770      	bx	lr

000197f8 <ll_rl_clear>:

u32_t ll_rl_clear(void)
{
   197f8:	b508      	push	{r3, lr}
	if (!rl_access_check(false)) {
   197fa:	2000      	movs	r0, #0
   197fc:	f7ff fb74 	bl	18ee8 <rl_access_check>
   19800:	b908      	cbnz	r0, 19806 <ll_rl_clear+0xe>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19802:	200c      	movs	r0, #12
	}

	rl_clear();

	return 0;
}
   19804:	bd08      	pop	{r3, pc}
	rl_clear();
   19806:	f7ff fa7d 	bl	18d04 <rl_clear>
	return 0;
   1980a:	2000      	movs	r0, #0
   1980c:	bd08      	pop	{r3, pc}
	...

00019810 <ll_rl_add>:

u32_t ll_rl_add(bt_addr_le_t *id_addr, const u8_t pirk[16],
		const u8_t lirk[16])
{
   19810:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   19814:	b082      	sub	sp, #8
   19816:	4605      	mov	r5, r0
   19818:	460c      	mov	r4, r1
   1981a:	4616      	mov	r6, r2
	u8_t i, j;

	if (!rl_access_check(false)) {
   1981c:	2000      	movs	r0, #0
   1981e:	f7ff fb63 	bl	18ee8 <rl_access_check>
   19822:	b918      	cbnz	r0, 1982c <ll_rl_add+0x1c>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19824:	200c      	movs	r0, #12
		rl[i].wl = 0;
	}
	rl[i].taken = 1;

	return 0;
}
   19826:	b002      	add	sp, #8
   19828:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	i = ll_rl_find(id_addr->type, id_addr->a.val, &j);
   1982c:	462f      	mov	r7, r5
   1982e:	f817 0b01 	ldrb.w	r0, [r7], #1
   19832:	f10d 0207 	add.w	r2, sp, #7
   19836:	4639      	mov	r1, r7
   19838:	f7ff fca4 	bl	19184 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   1983c:	2807      	cmp	r0, #7
   1983e:	d801      	bhi.n	19844 <ll_rl_add+0x34>
		return BT_HCI_ERR_INVALID_PARAM;
   19840:	2012      	movs	r0, #18
   19842:	e7f0      	b.n	19826 <ll_rl_add+0x16>
	} else if (j >= ARRAY_SIZE(rl)) {
   19844:	f89d 8007 	ldrb.w	r8, [sp, #7]
   19848:	f1b8 0f07 	cmp.w	r8, #7
   1984c:	d901      	bls.n	19852 <ll_rl_add+0x42>
		return BT_HCI_ERR_MEM_CAPACITY_EXCEEDED;
   1984e:	2007      	movs	r0, #7
   19850:	e7e9      	b.n	19826 <ll_rl_add+0x16>
	bt_addr_copy(&rl[i].id_addr, &id_addr->a);
   19852:	f8df a130 	ldr.w	sl, [pc, #304]	; 19984 <ll_rl_add+0x174>
   19856:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1985a:	4443      	add	r3, r8
   1985c:	ea4f 09c3 	mov.w	r9, r3, lsl #3
   19860:	eb0a 0009 	add.w	r0, sl, r9
   19864:	2206      	movs	r2, #6
   19866:	4639      	mov	r1, r7
   19868:	3001      	adds	r0, #1
   1986a:	f7e6 fd29 	bl	2c0 <memcpy>
	rl[i].id_addr_type = id_addr->type & 0x1;
   1986e:	782a      	ldrb	r2, [r5, #0]
   19870:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19874:	f362 1386 	bfi	r3, r2, #6, #1
   19878:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].pirk = mem_nz((u8_t *)pirk, 16);
   1987c:	2110      	movs	r1, #16
   1987e:	4620      	mov	r0, r4
   19880:	f7f5 f8f2 	bl	ea68 <mem_nz>
   19884:	f81a 3009 	ldrb.w	r3, [sl, r9]
   19888:	f360 0382 	bfi	r3, r0, #2, #1
   1988c:	f80a 3009 	strb.w	r3, [sl, r9]
	rl[i].lirk = mem_nz((u8_t *)lirk, 16);
   19890:	2110      	movs	r1, #16
   19892:	4630      	mov	r0, r6
   19894:	f7f5 f8e8 	bl	ea68 <mem_nz>
   19898:	f81a 3009 	ldrb.w	r3, [sl, r9]
   1989c:	f360 03c3 	bfi	r3, r0, #3, #1
   198a0:	f80a 3009 	strb.w	r3, [sl, r9]
	if (rl[i].pirk) {
   198a4:	f013 0f04 	tst.w	r3, #4
   198a8:	d016      	beq.n	198d8 <ll_rl_add+0xc8>
		rl[i].pirk_idx = peer_irk_count;
   198aa:	4933      	ldr	r1, [pc, #204]	; (19978 <ll_rl_add+0x168>)
   198ac:	780a      	ldrb	r2, [r1, #0]
   198ae:	4653      	mov	r3, sl
   198b0:	444b      	add	r3, r9
   198b2:	75da      	strb	r2, [r3, #23]
		peer_irk_rl_ids[peer_irk_count] = i;
   198b4:	4b31      	ldr	r3, [pc, #196]	; (1997c <ll_rl_add+0x16c>)
   198b6:	f803 8002 	strb.w	r8, [r3, r2]
		sys_memcpy_swap(peer_irks[peer_irk_count++], pirk, 16);
   198ba:	1c53      	adds	r3, r2, #1
   198bc:	700b      	strb	r3, [r1, #0]
   198be:	340f      	adds	r4, #15
   198c0:	4b2f      	ldr	r3, [pc, #188]	; (19980 <ll_rl_add+0x170>)
   198c2:	eb03 1302 	add.w	r3, r3, r2, lsl #4
   198c6:	2210      	movs	r2, #16
   198c8:	e004      	b.n	198d4 <ll_rl_add+0xc4>
		*((u8_t *)dst++) = *((u8_t *)src--);
   198ca:	7821      	ldrb	r1, [r4, #0]
   198cc:	7019      	strb	r1, [r3, #0]
	for (; length > 0; length--) {
   198ce:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   198d0:	3c01      	subs	r4, #1
   198d2:	3301      	adds	r3, #1
	for (; length > 0; length--) {
   198d4:	2a00      	cmp	r2, #0
   198d6:	d1f8      	bne.n	198ca <ll_rl_add+0xba>
	if (rl[i].lirk) {
   198d8:	eb08 0288 	add.w	r2, r8, r8, lsl #2
   198dc:	00d3      	lsls	r3, r2, #3
   198de:	4a29      	ldr	r2, [pc, #164]	; (19984 <ll_rl_add+0x174>)
   198e0:	5cd3      	ldrb	r3, [r2, r3]
   198e2:	f013 0f08 	tst.w	r3, #8
   198e6:	d12f      	bne.n	19948 <ll_rl_add+0x138>
	memset(rl[i].curr_rpa.val, 0x00, sizeof(rl[i].curr_rpa));
   198e8:	4e26      	ldr	r6, [pc, #152]	; (19984 <ll_rl_add+0x174>)
   198ea:	ea4f 0488 	mov.w	r4, r8, lsl #2
   198ee:	eb04 0208 	add.w	r2, r4, r8
   198f2:	00d3      	lsls	r3, r2, #3
   198f4:	3318      	adds	r3, #24
   198f6:	2206      	movs	r2, #6
   198f8:	2100      	movs	r1, #0
   198fa:	18f0      	adds	r0, r6, r3
   198fc:	f010 f84c 	bl	29998 <memset>
	rl[i].rpas_ready = 0;
   19900:	4444      	add	r4, r8
   19902:	00e2      	lsls	r2, r4, #3
   19904:	5cb3      	ldrb	r3, [r6, r2]
	rl[i].dev = 0;
   19906:	f003 03fd 	and.w	r3, r3, #253	; 0xfd
   1990a:	f36f 1304 	bfc	r3, #4, #1
   1990e:	54b3      	strb	r3, [r6, r2]
	j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19910:	2200      	movs	r2, #0
   19912:	4639      	mov	r1, r7
   19914:	7828      	ldrb	r0, [r5, #0]
   19916:	f7ff fa0b 	bl	18d30 <wl_find>
	if (j < ARRAY_SIZE(wl)) {
   1991a:	2807      	cmp	r0, #7
   1991c:	d822      	bhi.n	19964 <ll_rl_add+0x154>
		wl[j].rl_idx = i;
   1991e:	4b1a      	ldr	r3, [pc, #104]	; (19988 <ll_rl_add+0x178>)
   19920:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19924:	f880 8001 	strb.w	r8, [r0, #1]
		rl[i].wl = 1;
   19928:	00e3      	lsls	r3, r4, #3
   1992a:	5cf2      	ldrb	r2, [r6, r3]
   1992c:	f042 0220 	orr.w	r2, r2, #32
   19930:	54f2      	strb	r2, [r6, r3]
	rl[i].taken = 1;
   19932:	4914      	ldr	r1, [pc, #80]	; (19984 <ll_rl_add+0x174>)
   19934:	eb08 0888 	add.w	r8, r8, r8, lsl #2
   19938:	ea4f 03c8 	mov.w	r3, r8, lsl #3
   1993c:	5cca      	ldrb	r2, [r1, r3]
   1993e:	f042 0201 	orr.w	r2, r2, #1
   19942:	54ca      	strb	r2, [r1, r3]
	return 0;
   19944:	2000      	movs	r0, #0
   19946:	e76e      	b.n	19826 <ll_rl_add+0x16>
		memcpy(rl[i].local_irk, lirk, 16);
   19948:	ea4f 0388 	mov.w	r3, r8, lsl #2
   1994c:	4443      	add	r3, r8
   1994e:	00da      	lsls	r2, r3, #3
   19950:	4c0c      	ldr	r4, [pc, #48]	; (19984 <ll_rl_add+0x174>)
   19952:	4414      	add	r4, r2
   19954:	2210      	movs	r2, #16
   19956:	4631      	mov	r1, r6
   19958:	1de0      	adds	r0, r4, #7
   1995a:	f7e6 fcb1 	bl	2c0 <memcpy>
		rl[i].local_rpa = NULL;
   1995e:	2300      	movs	r3, #0
   19960:	6263      	str	r3, [r4, #36]	; 0x24
   19962:	e7c1      	b.n	198e8 <ll_rl_add+0xd8>
		rl[i].wl = 0;
   19964:	4a07      	ldr	r2, [pc, #28]	; (19984 <ll_rl_add+0x174>)
   19966:	eb08 0188 	add.w	r1, r8, r8, lsl #2
   1996a:	00cb      	lsls	r3, r1, #3
   1996c:	5cd1      	ldrb	r1, [r2, r3]
   1996e:	f36f 1145 	bfc	r1, #5, #1
   19972:	54d1      	strb	r1, [r2, r3]
   19974:	e7dd      	b.n	19932 <ll_rl_add+0x122>
   19976:	bf00      	nop
   19978:	200018dc 	.word	0x200018dc
   1997c:	200018e0 	.word	0x200018e0
   19980:	200018e8 	.word	0x200018e8
   19984:	20001968 	.word	0x20001968
   19988:	20001ae0 	.word	0x20001ae0

0001998c <ll_rl_remove>:

u32_t ll_rl_remove(bt_addr_le_t *id_addr)
{
   1998c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19990:	4604      	mov	r4, r0
	u8_t i;

	if (!rl_access_check(false)) {
   19992:	2000      	movs	r0, #0
   19994:	f7ff faa8 	bl	18ee8 <rl_access_check>
   19998:	b910      	cbnz	r0, 199a0 <ll_rl_remove+0x14>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1999a:	200c      	movs	r0, #12
   1999c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   199a0:	4626      	mov	r6, r4
   199a2:	f816 0b01 	ldrb.w	r0, [r6], #1
   199a6:	2200      	movs	r2, #0
   199a8:	4631      	mov	r1, r6
   199aa:	f7ff fbeb 	bl	19184 <ll_rl_find>
   199ae:	4605      	mov	r5, r0
	if (i < ARRAY_SIZE(rl)) {
   199b0:	2807      	cmp	r0, #7
   199b2:	d902      	bls.n	199ba <ll_rl_remove+0x2e>
		}
		rl[i].taken = 0;
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   199b4:	2002      	movs	r0, #2
}
   199b6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (rl[i].pirk) {
   199ba:	eb00 0280 	add.w	r2, r0, r0, lsl #2
   199be:	00d3      	lsls	r3, r2, #3
   199c0:	4a2d      	ldr	r2, [pc, #180]	; (19a78 <ll_rl_remove+0xec>)
   199c2:	5cd3      	ldrb	r3, [r2, r3]
   199c4:	f013 0f04 	tst.w	r3, #4
   199c8:	d03e      	beq.n	19a48 <ll_rl_remove+0xbc>
			u8_t pi = rl[i].pirk_idx, pj = peer_irk_count - 1;
   199ca:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   199ce:	00da      	lsls	r2, r3, #3
   199d0:	4b29      	ldr	r3, [pc, #164]	; (19a78 <ll_rl_remove+0xec>)
   199d2:	4413      	add	r3, r2
   199d4:	7ddf      	ldrb	r7, [r3, #23]
   199d6:	4b29      	ldr	r3, [pc, #164]	; (19a7c <ll_rl_remove+0xf0>)
   199d8:	781b      	ldrb	r3, [r3, #0]
   199da:	3b01      	subs	r3, #1
			if (pj && pi != pj) {
   199dc:	f013 08ff 	ands.w	r8, r3, #255	; 0xff
   199e0:	d02e      	beq.n	19a40 <ll_rl_remove+0xb4>
   199e2:	4547      	cmp	r7, r8
   199e4:	d02c      	beq.n	19a40 <ll_rl_remove+0xb4>
				memcpy(peer_irks[pi], peer_irks[pj], 16);
   199e6:	4826      	ldr	r0, [pc, #152]	; (19a80 <ll_rl_remove+0xf4>)
   199e8:	2210      	movs	r2, #16
   199ea:	eb00 1108 	add.w	r1, r0, r8, lsl #4
   199ee:	eb00 1007 	add.w	r0, r0, r7, lsl #4
   199f2:	f7e6 fc65 	bl	2c0 <memcpy>
				for (k = 0;
   199f6:	2300      	movs	r3, #0
   199f8:	e001      	b.n	199fe <ll_rl_remove+0x72>
				     k++) {
   199fa:	3301      	adds	r3, #1
   199fc:	b2db      	uxtb	r3, r3
				for (k = 0;
   199fe:	2b07      	cmp	r3, #7
   19a00:	d81e      	bhi.n	19a40 <ll_rl_remove+0xb4>
					if (rl[k].taken && rl[k].pirk &&
   19a02:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   19a06:	00ca      	lsls	r2, r1, #3
   19a08:	491b      	ldr	r1, [pc, #108]	; (19a78 <ll_rl_remove+0xec>)
   19a0a:	5c8a      	ldrb	r2, [r1, r2]
   19a0c:	f012 0f01 	tst.w	r2, #1
   19a10:	d0f3      	beq.n	199fa <ll_rl_remove+0x6e>
   19a12:	eb03 0183 	add.w	r1, r3, r3, lsl #2
   19a16:	00ca      	lsls	r2, r1, #3
   19a18:	4917      	ldr	r1, [pc, #92]	; (19a78 <ll_rl_remove+0xec>)
   19a1a:	5c8a      	ldrb	r2, [r1, r2]
   19a1c:	f012 0f04 	tst.w	r2, #4
   19a20:	d0eb      	beq.n	199fa <ll_rl_remove+0x6e>
					    rl[k].pirk_idx == pj) {
   19a22:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19a26:	00d1      	lsls	r1, r2, #3
   19a28:	4a13      	ldr	r2, [pc, #76]	; (19a78 <ll_rl_remove+0xec>)
   19a2a:	440a      	add	r2, r1
   19a2c:	7dd2      	ldrb	r2, [r2, #23]
					if (rl[k].taken && rl[k].pirk &&
   19a2e:	4590      	cmp	r8, r2
   19a30:	d1e3      	bne.n	199fa <ll_rl_remove+0x6e>
						rl[k].pirk_idx = pi;
   19a32:	2128      	movs	r1, #40	; 0x28
   19a34:	4a10      	ldr	r2, [pc, #64]	; (19a78 <ll_rl_remove+0xec>)
   19a36:	fb01 2003 	mla	r0, r1, r3, r2
   19a3a:	75c7      	strb	r7, [r0, #23]
						peer_irk_rl_ids[pi] = k;
   19a3c:	4a11      	ldr	r2, [pc, #68]	; (19a84 <ll_rl_remove+0xf8>)
   19a3e:	55d3      	strb	r3, [r2, r7]
			peer_irk_count--;
   19a40:	4a0e      	ldr	r2, [pc, #56]	; (19a7c <ll_rl_remove+0xf0>)
   19a42:	7813      	ldrb	r3, [r2, #0]
   19a44:	3b01      	subs	r3, #1
   19a46:	7013      	strb	r3, [r2, #0]
		j = wl_find(id_addr->type, id_addr->a.val, NULL);
   19a48:	2200      	movs	r2, #0
   19a4a:	4631      	mov	r1, r6
   19a4c:	7820      	ldrb	r0, [r4, #0]
   19a4e:	f7ff f96f 	bl	18d30 <wl_find>
		if (j < ARRAY_SIZE(wl)) {
   19a52:	2807      	cmp	r0, #7
   19a54:	d804      	bhi.n	19a60 <ll_rl_remove+0xd4>
			wl[j].rl_idx = FILTER_IDX_NONE;
   19a56:	4b0c      	ldr	r3, [pc, #48]	; (19a88 <ll_rl_remove+0xfc>)
   19a58:	eb03 00c0 	add.w	r0, r3, r0, lsl #3
   19a5c:	23ff      	movs	r3, #255	; 0xff
   19a5e:	7043      	strb	r3, [r0, #1]
		rl[i].taken = 0;
   19a60:	4a05      	ldr	r2, [pc, #20]	; (19a78 <ll_rl_remove+0xec>)
   19a62:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   19a66:	00eb      	lsls	r3, r5, #3
   19a68:	5cd1      	ldrb	r1, [r2, r3]
   19a6a:	f36f 0100 	bfc	r1, #0, #1
   19a6e:	54d1      	strb	r1, [r2, r3]
		return 0;
   19a70:	2000      	movs	r0, #0
   19a72:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   19a76:	bf00      	nop
   19a78:	20001968 	.word	0x20001968
   19a7c:	200018dc 	.word	0x200018dc
   19a80:	200018e8 	.word	0x200018e8
   19a84:	200018e0 	.word	0x200018e0
   19a88:	20001ae0 	.word	0x20001ae0

00019a8c <ll_rl_crpa_set>:

void ll_rl_crpa_set(u8_t id_addr_type, u8_t *id_addr, u8_t rl_idx, u8_t *crpa)
{
   19a8c:	b510      	push	{r4, lr}
   19a8e:	461c      	mov	r4, r3
	if ((crpa[5] & 0xc0) == 0x40) {
   19a90:	795b      	ldrb	r3, [r3, #5]
   19a92:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   19a96:	2b40      	cmp	r3, #64	; 0x40
   19a98:	d000      	beq.n	19a9c <ll_rl_crpa_set+0x10>
   19a9a:	bd10      	pop	{r4, pc}

		if (id_addr) {
   19a9c:	b119      	cbz	r1, 19aa6 <ll_rl_crpa_set+0x1a>
			/* find the device and return its RPA */
			rl_idx = ll_rl_find(id_addr_type, id_addr, NULL);
   19a9e:	2200      	movs	r2, #0
   19aa0:	f7ff fb70 	bl	19184 <ll_rl_find>
   19aa4:	4602      	mov	r2, r0
		}

		if (rl_idx < ARRAY_SIZE(rl) && rl[rl_idx].taken) {
   19aa6:	2a07      	cmp	r2, #7
   19aa8:	d8f7      	bhi.n	19a9a <ll_rl_crpa_set+0xe>
   19aaa:	eb02 0182 	add.w	r1, r2, r2, lsl #2
   19aae:	00cb      	lsls	r3, r1, #3
   19ab0:	4907      	ldr	r1, [pc, #28]	; (19ad0 <ll_rl_crpa_set+0x44>)
   19ab2:	5ccb      	ldrb	r3, [r1, r3]
   19ab4:	f013 0f01 	tst.w	r3, #1
   19ab8:	d0ef      	beq.n	19a9a <ll_rl_crpa_set+0xe>
				memcpy(rl[rl_idx].curr_rpa.val, crpa,
   19aba:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   19abe:	00d0      	lsls	r0, r2, #3
   19ac0:	3018      	adds	r0, #24
   19ac2:	2206      	movs	r2, #6
   19ac4:	4621      	mov	r1, r4
   19ac6:	4b02      	ldr	r3, [pc, #8]	; (19ad0 <ll_rl_crpa_set+0x44>)
   19ac8:	4418      	add	r0, r3
   19aca:	f7e6 fbf9 	bl	2c0 <memcpy>
				       sizeof(bt_addr_t));
		}
	}
}
   19ace:	e7e4      	b.n	19a9a <ll_rl_crpa_set+0xe>
   19ad0:	20001968 	.word	0x20001968

00019ad4 <ll_rl_crpa_get>:

u32_t ll_rl_crpa_get(bt_addr_le_t *id_addr, bt_addr_t *crpa)
{
   19ad4:	b538      	push	{r3, r4, r5, lr}
   19ad6:	460d      	mov	r5, r1
	u8_t i;

	/* find the device and return its RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19ad8:	4601      	mov	r1, r0
   19ada:	f811 0b01 	ldrb.w	r0, [r1], #1
   19ade:	2200      	movs	r2, #0
   19ae0:	f7ff fb50 	bl	19184 <ll_rl_find>
	if (i < ARRAY_SIZE(rl) &&
   19ae4:	2807      	cmp	r0, #7
   19ae6:	d901      	bls.n	19aec <ll_rl_crpa_get+0x18>
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
			bt_addr_copy(crpa, &rl[i].curr_rpa);
			return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19ae8:	2002      	movs	r0, #2
   19aea:	bd38      	pop	{r3, r4, r5, pc}
   19aec:	4604      	mov	r4, r0
	    mem_nz(rl[i].curr_rpa.val, sizeof(rl[i].curr_rpa.val))) {
   19aee:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   19af2:	00d8      	lsls	r0, r3, #3
   19af4:	3018      	adds	r0, #24
   19af6:	2106      	movs	r1, #6
   19af8:	4b09      	ldr	r3, [pc, #36]	; (19b20 <ll_rl_crpa_get+0x4c>)
   19afa:	4418      	add	r0, r3
   19afc:	f7f4 ffb4 	bl	ea68 <mem_nz>
	if (i < ARRAY_SIZE(rl) &&
   19b00:	b908      	cbnz	r0, 19b06 <ll_rl_crpa_get+0x32>
	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19b02:	2002      	movs	r0, #2
}
   19b04:	bd38      	pop	{r3, r4, r5, pc}
			bt_addr_copy(crpa, &rl[i].curr_rpa);
   19b06:	eb04 0484 	add.w	r4, r4, r4, lsl #2
   19b0a:	00e1      	lsls	r1, r4, #3
   19b0c:	3118      	adds	r1, #24
   19b0e:	2206      	movs	r2, #6
   19b10:	4b03      	ldr	r3, [pc, #12]	; (19b20 <ll_rl_crpa_get+0x4c>)
   19b12:	4419      	add	r1, r3
   19b14:	4628      	mov	r0, r5
   19b16:	f7e6 fbd3 	bl	2c0 <memcpy>
			return 0;
   19b1a:	2000      	movs	r0, #0
   19b1c:	bd38      	pop	{r3, r4, r5, pc}
   19b1e:	bf00      	nop
   19b20:	20001968 	.word	0x20001968

00019b24 <ll_rl_lrpa_get>:

u32_t ll_rl_lrpa_get(bt_addr_le_t *id_addr, bt_addr_t *lrpa)
{
   19b24:	b510      	push	{r4, lr}
   19b26:	460c      	mov	r4, r1
	u8_t i;

	/* find the device and return the local RPA */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19b28:	4601      	mov	r1, r0
   19b2a:	f811 0b01 	ldrb.w	r0, [r1], #1
   19b2e:	2200      	movs	r2, #0
   19b30:	f7ff fb28 	bl	19184 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19b34:	2807      	cmp	r0, #7
   19b36:	d901      	bls.n	19b3c <ll_rl_lrpa_get+0x18>
		bt_addr_copy(lrpa, rl[i].local_rpa);
		return 0;
	}

	return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19b38:	2002      	movs	r0, #2
}
   19b3a:	bd10      	pop	{r4, pc}
		bt_addr_copy(lrpa, rl[i].local_rpa);
   19b3c:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19b40:	00c2      	lsls	r2, r0, #3
   19b42:	4b04      	ldr	r3, [pc, #16]	; (19b54 <ll_rl_lrpa_get+0x30>)
   19b44:	4413      	add	r3, r2
   19b46:	2206      	movs	r2, #6
   19b48:	6a59      	ldr	r1, [r3, #36]	; 0x24
   19b4a:	4620      	mov	r0, r4
   19b4c:	f7e6 fbb8 	bl	2c0 <memcpy>
		return 0;
   19b50:	2000      	movs	r0, #0
   19b52:	bd10      	pop	{r4, pc}
   19b54:	20001968 	.word	0x20001968

00019b58 <ll_rl_enable>:

u32_t ll_rl_enable(u8_t enable)
{
   19b58:	b510      	push	{r4, lr}
   19b5a:	4604      	mov	r4, r0
	if (!rl_access_check(false)) {
   19b5c:	2000      	movs	r0, #0
   19b5e:	f7ff f9c3 	bl	18ee8 <rl_access_check>
   19b62:	b908      	cbnz	r0, 19b68 <ll_rl_enable+0x10>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19b64:	200c      	movs	r0, #12
   19b66:	bd10      	pop	{r4, pc}
	}

	switch (enable) {
   19b68:	b11c      	cbz	r4, 19b72 <ll_rl_enable+0x1a>
   19b6a:	2c01      	cmp	r4, #1
   19b6c:	d005      	beq.n	19b7a <ll_rl_enable+0x22>
		break;
	case BT_HCI_ADDR_RES_ENABLE:
		rl_enable = 1;
		break;
	default:
		return BT_HCI_ERR_INVALID_PARAM;
   19b6e:	2012      	movs	r0, #18
	}

	return 0;
}
   19b70:	bd10      	pop	{r4, pc}
		rl_enable = 0;
   19b72:	2000      	movs	r0, #0
   19b74:	4b03      	ldr	r3, [pc, #12]	; (19b84 <ll_rl_enable+0x2c>)
   19b76:	7018      	strb	r0, [r3, #0]
		break;
   19b78:	bd10      	pop	{r4, pc}
		rl_enable = 1;
   19b7a:	2201      	movs	r2, #1
   19b7c:	4b01      	ldr	r3, [pc, #4]	; (19b84 <ll_rl_enable+0x2c>)
   19b7e:	701a      	strb	r2, [r3, #0]
	return 0;
   19b80:	2000      	movs	r0, #0
		break;
   19b82:	bd10      	pop	{r4, pc}
   19b84:	20001aa8 	.word	0x20001aa8

00019b88 <ll_rl_timeout_set>:

void ll_rl_timeout_set(u16_t timeout)
{
	rpa_timeout_ms = timeout * 1000;
   19b88:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   19b8c:	fb03 f000 	mul.w	r0, r3, r0
   19b90:	4b01      	ldr	r3, [pc, #4]	; (19b98 <ll_rl_timeout_set+0x10>)
   19b92:	6018      	str	r0, [r3, #0]
   19b94:	4770      	bx	lr
   19b96:	bf00      	nop
   19b98:	20002bc4 	.word	0x20002bc4

00019b9c <ll_priv_mode_set>:
}

u32_t ll_priv_mode_set(bt_addr_le_t *id_addr, u8_t mode)
{
   19b9c:	b538      	push	{r3, r4, r5, lr}
   19b9e:	4604      	mov	r4, r0
   19ba0:	460d      	mov	r5, r1
	u8_t i;

	if (!rl_access_check(false)) {
   19ba2:	2000      	movs	r0, #0
   19ba4:	f7ff f9a0 	bl	18ee8 <rl_access_check>
   19ba8:	b908      	cbnz	r0, 19bae <ll_priv_mode_set+0x12>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19baa:	200c      	movs	r0, #12
   19bac:	bd38      	pop	{r3, r4, r5, pc}
	}

	/* find the device and mark it as empty */
	i = ll_rl_find(id_addr->type, id_addr->a.val, NULL);
   19bae:	4621      	mov	r1, r4
   19bb0:	f811 0b01 	ldrb.w	r0, [r1], #1
   19bb4:	2200      	movs	r2, #0
   19bb6:	f7ff fae5 	bl	19184 <ll_rl_find>
	if (i < ARRAY_SIZE(rl)) {
   19bba:	2807      	cmp	r0, #7
   19bbc:	d901      	bls.n	19bc2 <ll_priv_mode_set+0x26>
			break;
		default:
			return BT_HCI_ERR_INVALID_PARAM;
		}
	} else {
		return BT_HCI_ERR_UNKNOWN_CONN_ID;
   19bbe:	2002      	movs	r0, #2
   19bc0:	bd38      	pop	{r3, r4, r5, pc}
		switch (mode) {
   19bc2:	b11d      	cbz	r5, 19bcc <ll_priv_mode_set+0x30>
   19bc4:	2d01      	cmp	r5, #1
   19bc6:	d00b      	beq.n	19be0 <ll_priv_mode_set+0x44>
			return BT_HCI_ERR_INVALID_PARAM;
   19bc8:	2012      	movs	r0, #18
	}

	return 0;
}
   19bca:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 0;
   19bcc:	4a09      	ldr	r2, [pc, #36]	; (19bf4 <ll_priv_mode_set+0x58>)
   19bce:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19bd2:	00c3      	lsls	r3, r0, #3
   19bd4:	5cd1      	ldrb	r1, [r2, r3]
   19bd6:	f36f 1104 	bfc	r1, #4, #1
   19bda:	54d1      	strb	r1, [r2, r3]
	return 0;
   19bdc:	2000      	movs	r0, #0
			break;
   19bde:	bd38      	pop	{r3, r4, r5, pc}
			rl[i].dev = 1;
   19be0:	4904      	ldr	r1, [pc, #16]	; (19bf4 <ll_priv_mode_set+0x58>)
   19be2:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   19be6:	00c3      	lsls	r3, r0, #3
   19be8:	5cca      	ldrb	r2, [r1, r3]
   19bea:	f042 0210 	orr.w	r2, r2, #16
   19bee:	54ca      	strb	r2, [r1, r3]
	return 0;
   19bf0:	2000      	movs	r0, #0
			break;
   19bf2:	bd38      	pop	{r3, r4, r5, pc}
   19bf4:	20001968 	.word	0x20001968

00019bf8 <ll_filter_reset>:

#endif /* CONFIG_BT_CTLR_PRIVACY */

void ll_filter_reset(bool init)
{
   19bf8:	b538      	push	{r3, r4, r5, lr}
   19bfa:	4605      	mov	r5, r0
	wl_anon = 0;
   19bfc:	2400      	movs	r4, #0
   19bfe:	4b0e      	ldr	r3, [pc, #56]	; (19c38 <ll_filter_reset+0x40>)
   19c00:	701c      	strb	r4, [r3, #0]

#if defined(CONFIG_BT_CTLR_PRIVACY)
	wl_clear();
   19c02:	f7ff f86b 	bl	18cdc <wl_clear>

	rl_enable = 0;
   19c06:	4b0d      	ldr	r3, [pc, #52]	; (19c3c <ll_filter_reset+0x44>)
   19c08:	701c      	strb	r4, [r3, #0]
	rpa_timeout_ms = DEFAULT_RPA_TIMEOUT_MS;
   19c0a:	4a0d      	ldr	r2, [pc, #52]	; (19c40 <ll_filter_reset+0x48>)
   19c0c:	4b0d      	ldr	r3, [pc, #52]	; (19c44 <ll_filter_reset+0x4c>)
   19c0e:	601a      	str	r2, [r3, #0]
	rpa_last_ms = -1;
   19c10:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   19c14:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   19c18:	4b0b      	ldr	r3, [pc, #44]	; (19c48 <ll_filter_reset+0x50>)
   19c1a:	e9c3 0100 	strd	r0, r1, [r3]
	rl_clear();
   19c1e:	f7ff f871 	bl	18d04 <rl_clear>
	if (init) {
   19c22:	b91d      	cbnz	r5, 19c2c <ll_filter_reset+0x34>
		k_delayed_work_init(&rpa_work, rpa_timeout);
	} else {
		k_delayed_work_cancel(&rpa_work);
   19c24:	4809      	ldr	r0, [pc, #36]	; (19c4c <ll_filter_reset+0x54>)
   19c26:	f00f fcd3 	bl	295d0 <k_delayed_work_cancel>
   19c2a:	bd38      	pop	{r3, r4, r5, pc}
		k_delayed_work_init(&rpa_work, rpa_timeout);
   19c2c:	4908      	ldr	r1, [pc, #32]	; (19c50 <ll_filter_reset+0x58>)
   19c2e:	4807      	ldr	r0, [pc, #28]	; (19c4c <ll_filter_reset+0x54>)
   19c30:	f00f fcb0 	bl	29594 <k_delayed_work_init>
   19c34:	bd38      	pop	{r3, r4, r5, pc}
   19c36:	bf00      	nop
   19c38:	20002a20 	.word	0x20002a20
   19c3c:	20001aa8 	.word	0x20001aa8
   19c40:	000dbba0 	.word	0x000dbba0
   19c44:	20002bc4 	.word	0x20002bc4
   19c48:	20002a18 	.word	0x20002a18
   19c4c:	20002a90 	.word	0x20002a90
   19c50:	000197d1 	.word	0x000197d1

00019c54 <ll_adv_set_get>:
static struct ll_adv_set ll_adv;

struct ll_adv_set *ll_adv_set_get(void)
{
	return &ll_adv;
}
   19c54:	4800      	ldr	r0, [pc, #0]	; (19c58 <ll_adv_set_get+0x4>)
   19c56:	4770      	bx	lr
   19c58:	20001b54 	.word	0x20001b54

00019c5c <ll_adv_params_set>:
u32_t ll_adv_params_set(u8_t handle, u16_t evt_prop, u32_t interval,
			u8_t adv_type, u8_t own_addr_type,
			u8_t direct_addr_type, u8_t const *const direct_addr,
			u8_t chan_map, u8_t filter_policy, u8_t *tx_pwr,
			u8_t phy_p, u8_t skip, u8_t phy_s, u8_t sid, u8_t sreq)
{
   19c5c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   19c60:	b087      	sub	sp, #28
   19c62:	4689      	mov	r9, r1
   19c64:	4614      	mov	r4, r2
   19c66:	461e      	mov	r6, r3
   19c68:	f89d 8040 	ldrb.w	r8, [sp, #64]	; 0x40
   19c6c:	f89d b044 	ldrb.w	fp, [sp, #68]	; 0x44
   19c70:	f89d 5058 	ldrb.w	r5, [sp, #88]	; 0x58
	u8_t const pdu_adv_type[] = {PDU_ADV_TYPE_ADV_IND,
   19c74:	4b89      	ldr	r3, [pc, #548]	; (19e9c <ll_adv_params_set+0x240>)
   19c76:	e893 0003 	ldmia.w	r3, {r0, r1}
   19c7a:	9004      	str	r0, [sp, #16]
   19c7c:	f8ad 1014 	strh.w	r1, [sp, #20]
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	struct radio_adv_data *radio_adv_data;
	struct pdu_adv *pdu;

	if (radio_adv_is_enabled()) {
   19c80:	f7fd fd60 	bl	17744 <radio_adv_is_enabled>
   19c84:	9001      	str	r0, [sp, #4]
   19c86:	b128      	cbz	r0, 19c94 <ll_adv_params_set+0x38>
		return BT_HCI_ERR_CMD_DISALLOWED;
   19c88:	230c      	movs	r3, #12
   19c8a:	9301      	str	r3, [sp, #4]
	if (pdu->len == 0) {
		pdu->len = BDADDR_SIZE;
	}

	return 0;
}
   19c8c:	9801      	ldr	r0, [sp, #4]
   19c8e:	b007      	add	sp, #28
   19c90:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	ll_adv.phy_p = BIT(0);
   19c94:	4b82      	ldr	r3, [pc, #520]	; (19ea0 <ll_adv_params_set+0x244>)
   19c96:	7a1a      	ldrb	r2, [r3, #8]
   19c98:	2101      	movs	r1, #1
   19c9a:	f361 0202 	bfi	r2, r1, #0, #3
   19c9e:	721a      	strb	r2, [r3, #8]
	if (adv_type > 0x04) {
   19ca0:	2e04      	cmp	r6, #4
   19ca2:	d90f      	bls.n	19cc4 <ll_adv_params_set+0x68>
		if (evt_prop & BIT(4)) {
   19ca4:	f019 0f10 	tst.w	r9, #16
   19ca8:	d071      	beq.n	19d8e <ll_adv_params_set+0x132>
			u8_t const leg_adv_type[] = { 0x03, 0x04, 0x02, 0x00};
   19caa:	4b7c      	ldr	r3, [pc, #496]	; (19e9c <ll_adv_params_set+0x240>)
   19cac:	689b      	ldr	r3, [r3, #8]
   19cae:	9303      	str	r3, [sp, #12]
			adv_type = leg_adv_type[evt_prop & 0x03];
   19cb0:	f009 0303 	and.w	r3, r9, #3
   19cb4:	aa06      	add	r2, sp, #24
   19cb6:	4413      	add	r3, r2
   19cb8:	f813 6c0c 	ldrb.w	r6, [r3, #-12]
			if (evt_prop & BIT(3)) {
   19cbc:	f019 0f08 	tst.w	r9, #8
   19cc0:	d000      	beq.n	19cc4 <ll_adv_params_set+0x68>
				adv_type = 0x01;
   19cc2:	460e      	mov	r6, r1
	if (adv_type != 0x01) {
   19cc4:	2e01      	cmp	r6, #1
   19cc6:	d071      	beq.n	19dac <ll_adv_params_set+0x150>
		ll_adv.interval = interval;
   19cc8:	4b75      	ldr	r3, [pc, #468]	; (19ea0 <ll_adv_params_set+0x244>)
   19cca:	60dc      	str	r4, [r3, #12]
	ll_adv.chan_map = chan_map;
   19ccc:	4a74      	ldr	r2, [pc, #464]	; (19ea0 <ll_adv_params_set+0x244>)
   19cce:	7813      	ldrb	r3, [r2, #0]
   19cd0:	f89d 104c 	ldrb.w	r1, [sp, #76]	; 0x4c
   19cd4:	f361 0302 	bfi	r3, r1, #0, #3
	ll_adv.filter_policy = filter_policy;
   19cd8:	f89d 1050 	ldrb.w	r1, [sp, #80]	; 0x50
   19cdc:	f361 03c4 	bfi	r3, r1, #3, #2
   19ce0:	7013      	strb	r3, [r2, #0]
	radio_adv_data = radio_adv_data_get();
   19ce2:	f7fd fd27 	bl	17734 <radio_adv_data_get>
   19ce6:	4607      	mov	r7, r0
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19ce8:	f890 404f 	ldrb.w	r4, [r0, #79]	; 0x4f
   19cec:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   19cf0:	ebc4 04c3 	rsb	r4, r4, r3, lsl #3
   19cf4:	eb00 0a04 	add.w	sl, r0, r4
	pdu->type = pdu_adv_type[adv_type];
   19cf8:	ab06      	add	r3, sp, #24
   19cfa:	441e      	add	r6, r3
   19cfc:	f816 2c08 	ldrb.w	r2, [r6, #-8]
   19d00:	5d03      	ldrb	r3, [r0, r4]
   19d02:	f362 0303 	bfi	r3, r2, #0, #4
	pdu->rfu = 0;
   19d06:	f36f 1304 	bfc	r3, #4, #1
   19d0a:	5503      	strb	r3, [r0, r4]
	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2) &&
   19d0c:	f003 030f 	and.w	r3, r3, #15
   19d10:	2b01      	cmp	r3, #1
   19d12:	d94f      	bls.n	19db4 <ll_adv_params_set+0x158>
		pdu->chan_sel = 0;
   19d14:	5d03      	ldrb	r3, [r0, r4]
   19d16:	f36f 1345 	bfc	r3, #5, #1
   19d1a:	5503      	strb	r3, [r0, r4]
	ll_adv.own_addr_type = own_addr_type;
   19d1c:	4a60      	ldr	r2, [pc, #384]	; (19ea0 <ll_adv_params_set+0x244>)
   19d1e:	7813      	ldrb	r3, [r2, #0]
   19d20:	f368 1346 	bfi	r3, r8, #5, #2
   19d24:	7013      	strb	r3, [r2, #0]
	if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   19d26:	f003 0360 	and.w	r3, r3, #96	; 0x60
   19d2a:	2b40      	cmp	r3, #64	; 0x40
   19d2c:	d047      	beq.n	19dbe <ll_adv_params_set+0x162>
   19d2e:	2b60      	cmp	r3, #96	; 0x60
   19d30:	d045      	beq.n	19dbe <ll_adv_params_set+0x162>
	pdu->tx_addr = own_addr_type & 0x1;
   19d32:	f008 0801 	and.w	r8, r8, #1
   19d36:	5d3b      	ldrb	r3, [r7, r4]
   19d38:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19d3c:	f36f 13c7 	bfc	r3, #7, #1
   19d40:	553b      	strb	r3, [r7, r4]
	if (pdu->type == PDU_ADV_TYPE_DIRECT_IND) {
   19d42:	f003 030f 	and.w	r3, r3, #15
   19d46:	2b01      	cmp	r3, #1
   19d48:	d044      	beq.n	19dd4 <ll_adv_params_set+0x178>
	} else if (pdu->type == PDU_ADV_TYPE_EXT_IND) {
   19d4a:	2b07      	cmp	r3, #7
   19d4c:	d050      	beq.n	19df0 <ll_adv_params_set+0x194>
	} else if (pdu->len == 0) {
   19d4e:	f89a 3001 	ldrb.w	r3, [sl, #1]
   19d52:	b913      	cbnz	r3, 19d5a <ll_adv_params_set+0xfe>
		pdu->len = BDADDR_SIZE;
   19d54:	2306      	movs	r3, #6
   19d56:	f88a 3001 	strb.w	r3, [sl, #1]
	radio_adv_data = radio_scan_data_get();
   19d5a:	f7fd fcef 	bl	1773c <radio_scan_data_get>
	pdu = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19d5e:	f890 204f 	ldrb.w	r2, [r0, #79]	; 0x4f
   19d62:	eb02 0382 	add.w	r3, r2, r2, lsl #2
   19d66:	ebc2 02c3 	rsb	r2, r2, r3, lsl #3
   19d6a:	1881      	adds	r1, r0, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19d6c:	5c83      	ldrb	r3, [r0, r2]
   19d6e:	2404      	movs	r4, #4
   19d70:	f364 0303 	bfi	r3, r4, #0, #4
	pdu->tx_addr = own_addr_type & 0x1;
   19d74:	f003 03cf 	and.w	r3, r3, #207	; 0xcf
   19d78:	f368 1386 	bfi	r3, r8, #6, #1
	pdu->rx_addr = 0;
   19d7c:	f36f 13c7 	bfc	r3, #7, #1
   19d80:	5483      	strb	r3, [r0, r2]
	if (pdu->len == 0) {
   19d82:	784b      	ldrb	r3, [r1, #1]
   19d84:	2b00      	cmp	r3, #0
   19d86:	d181      	bne.n	19c8c <ll_adv_params_set+0x30>
		pdu->len = BDADDR_SIZE;
   19d88:	2306      	movs	r3, #6
   19d8a:	704b      	strb	r3, [r1, #1]
   19d8c:	e77e      	b.n	19c8c <ll_adv_params_set+0x30>
			if (((evt_prop & 0x03) == 0x03) ||
   19d8e:	f009 0303 	and.w	r3, r9, #3
   19d92:	2b03      	cmp	r3, #3
   19d94:	d07c      	beq.n	19e90 <ll_adv_params_set+0x234>
   19d96:	f009 030c 	and.w	r3, r9, #12
   19d9a:	2b0c      	cmp	r3, #12
   19d9c:	d07b      	beq.n	19e96 <ll_adv_params_set+0x23a>
			ll_adv.phy_p = phy_p;
   19d9e:	4b40      	ldr	r3, [pc, #256]	; (19ea0 <ll_adv_params_set+0x244>)
   19da0:	7a1a      	ldrb	r2, [r3, #8]
   19da2:	f365 0202 	bfi	r2, r5, #0, #3
   19da6:	721a      	strb	r2, [r3, #8]
			adv_type = 0x05; /* PDU_ADV_TYPE_EXT_IND */
   19da8:	2605      	movs	r6, #5
   19daa:	e78b      	b.n	19cc4 <ll_adv_params_set+0x68>
		ll_adv.interval = 0;
   19dac:	2200      	movs	r2, #0
   19dae:	4b3c      	ldr	r3, [pc, #240]	; (19ea0 <ll_adv_params_set+0x244>)
   19db0:	60da      	str	r2, [r3, #12]
   19db2:	e78b      	b.n	19ccc <ll_adv_params_set+0x70>
		pdu->chan_sel = 1;
   19db4:	5d03      	ldrb	r3, [r0, r4]
   19db6:	f043 0320 	orr.w	r3, r3, #32
   19dba:	5503      	strb	r3, [r0, r4]
   19dbc:	e7ae      	b.n	19d1c <ll_adv_params_set+0xc0>
		ll_adv.id_addr_type = direct_addr_type;
   19dbe:	4838      	ldr	r0, [pc, #224]	; (19ea0 <ll_adv_params_set+0x244>)
   19dc0:	7803      	ldrb	r3, [r0, #0]
   19dc2:	f36b 13c7 	bfi	r3, fp, #7, #1
   19dc6:	f800 3b02 	strb.w	r3, [r0], #2
		memcpy(&ll_adv.id_addr, direct_addr, BDADDR_SIZE);
   19dca:	2206      	movs	r2, #6
   19dcc:	9912      	ldr	r1, [sp, #72]	; 0x48
   19dce:	f7e6 fa77 	bl	2c0 <memcpy>
   19dd2:	e7ae      	b.n	19d32 <ll_adv_params_set+0xd6>
		pdu->rx_addr = direct_addr_type;
   19dd4:	5d3b      	ldrb	r3, [r7, r4]
   19dd6:	f36b 13c7 	bfi	r3, fp, #7, #1
   19dda:	553b      	strb	r3, [r7, r4]
		memcpy(&pdu->payload.direct_ind.tgt_addr[0], direct_addr,
   19ddc:	2206      	movs	r2, #6
   19dde:	9912      	ldr	r1, [sp, #72]	; 0x48
   19de0:	f10a 0008 	add.w	r0, sl, #8
   19de4:	f7e6 fa6c 	bl	2c0 <memcpy>
		pdu->len = sizeof(struct pdu_adv_payload_direct_ind);
   19de8:	230c      	movs	r3, #12
   19dea:	f88a 3001 	strb.w	r3, [sl, #1]
   19dee:	e7b4      	b.n	19d5a <ll_adv_params_set+0xfe>
		p = (void *)&pdu->payload.adv_ext_ind;
   19df0:	f10a 0302 	add.w	r3, sl, #2
		ptr = (u8_t *)h + sizeof(*h);
   19df4:	f10a 0104 	add.w	r1, sl, #4
		p->ext_hdr_len = 0;
   19df8:	f89a 2002 	ldrb.w	r2, [sl, #2]
		p->adv_mode = evt_prop & 0x03;
   19dfc:	f002 02c0 	and.w	r2, r2, #192	; 0xc0
   19e00:	f369 1287 	bfi	r2, r9, #6, #2
   19e04:	f88a 2002 	strb.w	r2, [sl, #2]
		*(u8_t *)h = 0;
   19e08:	2200      	movs	r2, #0
   19e0a:	f88a 2003 	strb.w	r2, [sl, #3]
		if (!(evt_prop & BIT(5)) && !p->adv_mode && (phy_p != BIT(2))) {
   19e0e:	f019 0f20 	tst.w	r9, #32
   19e12:	d10e      	bne.n	19e32 <ll_adv_params_set+0x1d6>
   19e14:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19e18:	f012 0fc0 	tst.w	r2, #192	; 0xc0
   19e1c:	d109      	bne.n	19e32 <ll_adv_params_set+0x1d6>
   19e1e:	2d04      	cmp	r5, #4
   19e20:	d007      	beq.n	19e32 <ll_adv_params_set+0x1d6>
			h->adv_addr = 1;
   19e22:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19e26:	f042 0201 	orr.w	r2, r2, #1
   19e2a:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr += BDADDR_SIZE;
   19e2e:	f10a 010a 	add.w	r1, sl, #10
		if (evt_prop & BIT(6)) {
   19e32:	f019 0f40 	tst.w	r9, #64	; 0x40
   19e36:	d006      	beq.n	19e46 <ll_adv_params_set+0x1ea>
			h->tx_pwr = 1;
   19e38:	f89a 2003 	ldrb.w	r2, [sl, #3]
   19e3c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   19e40:	f88a 2003 	strb.w	r2, [sl, #3]
			ptr++;
   19e44:	3101      	adds	r1, #1
		len = ptr - (u8_t *)p;
   19e46:	1acb      	subs	r3, r1, r3
   19e48:	b2db      	uxtb	r3, r3
		if (len > (offsetof(struct pdu_adv_payload_com_ext_adv,
   19e4a:	2b02      	cmp	r3, #2
   19e4c:	d916      	bls.n	19e7c <ll_adv_params_set+0x220>
			p->ext_hdr_len = len -
   19e4e:	1e58      	subs	r0, r3, #1
   19e50:	f89a 2002 	ldrb.w	r2, [sl, #2]
   19e54:	f360 0205 	bfi	r2, r0, #0, #6
   19e58:	f88a 2002 	strb.w	r2, [sl, #2]
			pdu->len = len;
   19e5c:	f88a 3001 	strb.w	r3, [sl, #1]
		if (h->tx_pwr) {
   19e60:	f89a 3003 	ldrb.w	r3, [sl, #3]
   19e64:	f013 0f40 	tst.w	r3, #64	; 0x40
   19e68:	f43f af77 	beq.w	19d5a <ll_adv_params_set+0xfe>
			if (tx_pwr) {
   19e6c:	9b15      	ldr	r3, [sp, #84]	; 0x54
   19e6e:	b16b      	cbz	r3, 19e8c <ll_adv_params_set+0x230>
				if (*tx_pwr != 0x7F) {
   19e70:	781b      	ldrb	r3, [r3, #0]
   19e72:	2b7f      	cmp	r3, #127	; 0x7f
   19e74:	d006      	beq.n	19e84 <ll_adv_params_set+0x228>
			*ptr = _tx_pwr;
   19e76:	f801 3c01 	strb.w	r3, [r1, #-1]
   19e7a:	e76e      	b.n	19d5a <ll_adv_params_set+0xfe>
			pdu->len = offsetof(struct pdu_adv_payload_com_ext_adv,
   19e7c:	2301      	movs	r3, #1
   19e7e:	f88a 3001 	strb.w	r3, [sl, #1]
   19e82:	e7ed      	b.n	19e60 <ll_adv_params_set+0x204>
					*tx_pwr = _tx_pwr;
   19e84:	2300      	movs	r3, #0
   19e86:	9a15      	ldr	r2, [sp, #84]	; 0x54
   19e88:	7013      	strb	r3, [r2, #0]
   19e8a:	e7f4      	b.n	19e76 <ll_adv_params_set+0x21a>
			_tx_pwr = 0;
   19e8c:	2300      	movs	r3, #0
   19e8e:	e7f2      	b.n	19e76 <ll_adv_params_set+0x21a>
				return 0x12; /* invalid HCI cmd param */
   19e90:	2312      	movs	r3, #18
   19e92:	9301      	str	r3, [sp, #4]
   19e94:	e6fa      	b.n	19c8c <ll_adv_params_set+0x30>
   19e96:	2312      	movs	r3, #18
   19e98:	9301      	str	r3, [sp, #4]
   19e9a:	e6f7      	b.n	19c8c <ll_adv_params_set+0x30>
   19e9c:	0002a660 	.word	0x0002a660
   19ea0:	20001b54 	.word	0x20001b54

00019ea4 <ll_adv_data_set>:

void ll_adv_data_set(u8_t len, u8_t const *const data)
{
   19ea4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19ea8:	4606      	mov	r6, r0
   19eaa:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* Dont update data if directed or extended advertising. */
	radio_adv_data = radio_adv_data_get();
   19eac:	f7fd fc42 	bl	17734 <radio_adv_data_get>
	prev = (struct pdu_adv *)&radio_adv_data->data[radio_adv_data->last][0];
   19eb0:	f890 504f 	ldrb.w	r5, [r0, #79]	; 0x4f
   19eb4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19eb8:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19ebc:	1881      	adds	r1, r0, r2
	if ((prev->type == PDU_ADV_TYPE_DIRECT_IND) ||
   19ebe:	5c83      	ldrb	r3, [r0, r2]
   19ec0:	f003 030f 	and.w	r3, r3, #15
   19ec4:	2b01      	cmp	r3, #1
   19ec6:	d03e      	beq.n	19f46 <ll_adv_data_set+0xa2>
   19ec8:	4604      	mov	r4, r0
   19eca:	2b07      	cmp	r3, #7
   19ecc:	d03b      	beq.n	19f46 <ll_adv_data_set+0xa2>
		 */
		return;
	}

	/* use the last index in double buffer, */
	if (radio_adv_data->first == radio_adv_data->last) {
   19ece:	f890 304e 	ldrb.w	r3, [r0, #78]	; 0x4e
   19ed2:	429d      	cmp	r5, r3
   19ed4:	d039      	beq.n	19f4a <ll_adv_data_set+0xa6>
	} else {
		last = radio_adv_data->last;
	}

	/* update adv pdu fields. */
	pdu = (struct pdu_adv *)&radio_adv_data->data[last][0];
   19ed6:	eb05 0385 	add.w	r3, r5, r5, lsl #2
   19eda:	ebc5 03c3 	rsb	r3, r5, r3, lsl #3
   19ede:	eb04 0803 	add.w	r8, r4, r3
	pdu->type = prev->type;
   19ee2:	f814 e002 	ldrb.w	lr, [r4, r2]
   19ee6:	5ce0      	ldrb	r0, [r4, r3]
   19ee8:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
   19eec:	f36f 1004 	bfc	r0, #4, #1
   19ef0:	54e0      	strb	r0, [r4, r3]

	if (IS_ENABLED(CONFIG_BT_CTLR_CHAN_SEL_2)) {
		pdu->chan_sel = prev->chan_sel;
   19ef2:	5ca0      	ldrb	r0, [r4, r2]
   19ef4:	f3c0 1040 	ubfx	r0, r0, #5, #1
   19ef8:	f814 e003 	ldrb.w	lr, [r4, r3]
   19efc:	f360 1e45 	bfi	lr, r0, #5, #1
   19f00:	f804 e003 	strb.w	lr, [r4, r3]
	} else {
		pdu->chan_sel = 0;
	}

	pdu->tx_addr = prev->tx_addr;
   19f04:	5ca0      	ldrb	r0, [r4, r2]
   19f06:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19f0a:	fa5f fe8e 	uxtb.w	lr, lr
   19f0e:	f360 1e86 	bfi	lr, r0, #6, #1
   19f12:	f804 e003 	strb.w	lr, [r4, r3]
	pdu->rx_addr = prev->rx_addr;
   19f16:	5ca2      	ldrb	r2, [r4, r2]
   19f18:	09d2      	lsrs	r2, r2, #7
   19f1a:	fa5f f08e 	uxtb.w	r0, lr
   19f1e:	f362 10c7 	bfi	r0, r2, #7, #1
   19f22:	54e0      	strb	r0, [r4, r3]
	memcpy(&pdu->payload.adv_ind.addr[0],
   19f24:	2206      	movs	r2, #6
   19f26:	3102      	adds	r1, #2
   19f28:	f108 0002 	add.w	r0, r8, #2
   19f2c:	f7e6 f9c8 	bl	2c0 <memcpy>
	       &prev->payload.adv_ind.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.adv_ind.data[0], data, len);
   19f30:	4632      	mov	r2, r6
   19f32:	4639      	mov	r1, r7
   19f34:	f108 0008 	add.w	r0, r8, #8
   19f38:	f7e6 f9c2 	bl	2c0 <memcpy>
	pdu->len = BDADDR_SIZE + len;
   19f3c:	3606      	adds	r6, #6
   19f3e:	f888 6001 	strb.w	r6, [r8, #1]

	/* commit the update so controller picks it. */
	radio_adv_data->last = last;
   19f42:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19f46:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_adv_data->last + 1;
   19f4a:	3501      	adds	r5, #1
   19f4c:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19f4e:	2d02      	cmp	r5, #2
   19f50:	d1c1      	bne.n	19ed6 <ll_adv_data_set+0x32>
			last = 0;
   19f52:	2500      	movs	r5, #0
   19f54:	e7bf      	b.n	19ed6 <ll_adv_data_set+0x32>

00019f56 <ll_scan_data_set>:
}

void ll_scan_data_set(u8_t len, u8_t const *const data)
{
   19f56:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19f5a:	4606      	mov	r6, r0
   19f5c:	460f      	mov	r7, r1
	struct pdu_adv *prev;
	struct pdu_adv *pdu;
	u8_t last;

	/* use the last index in double buffer, */
	radio_scan_data = radio_scan_data_get();
   19f5e:	f7fd fbed 	bl	1773c <radio_scan_data_get>
   19f62:	4604      	mov	r4, r0
	if (radio_scan_data->first == radio_scan_data->last) {
   19f64:	f890 204e 	ldrb.w	r2, [r0, #78]	; 0x4e
   19f68:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
   19f6c:	429a      	cmp	r2, r3
   19f6e:	d031      	beq.n	19fd4 <ll_scan_data_set+0x7e>
		last = radio_scan_data->last + 1;
		if (last == DOUBLE_BUFFER_SIZE) {
			last = 0;
		}
	} else {
		last = radio_scan_data->last;
   19f70:	461d      	mov	r5, r3
	}

	/* update scan pdu fields. */
	prev = (struct pdu_adv *)
   19f72:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   19f76:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   19f7a:	18e1      	adds	r1, r4, r3
	       &radio_scan_data->data[radio_scan_data->last][0];
	pdu = (struct pdu_adv *)&radio_scan_data->data[last][0];
   19f7c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   19f80:	ebc5 02c2 	rsb	r2, r5, r2, lsl #3
   19f84:	eb04 0802 	add.w	r8, r4, r2
	pdu->type = PDU_ADV_TYPE_SCAN_RSP;
   19f88:	5ca0      	ldrb	r0, [r4, r2]
   19f8a:	f04f 0e04 	mov.w	lr, #4
   19f8e:	f36e 0003 	bfi	r0, lr, #0, #4
	pdu->rfu = 0;
	pdu->chan_sel = 0;
   19f92:	f000 00ef 	and.w	r0, r0, #239	; 0xef
   19f96:	f36f 1045 	bfc	r0, #5, #1
   19f9a:	54a0      	strb	r0, [r4, r2]
	pdu->tx_addr = prev->tx_addr;
   19f9c:	5ce0      	ldrb	r0, [r4, r3]
   19f9e:	f3c0 1080 	ubfx	r0, r0, #6, #1
   19fa2:	5ca3      	ldrb	r3, [r4, r2]
   19fa4:	f360 1386 	bfi	r3, r0, #6, #1
	pdu->rx_addr = 0;
   19fa8:	f36f 13c7 	bfc	r3, #7, #1
   19fac:	54a3      	strb	r3, [r4, r2]
	pdu->len = BDADDR_SIZE + len;
   19fae:	1db3      	adds	r3, r6, #6
   19fb0:	f888 3001 	strb.w	r3, [r8, #1]
	memcpy(&pdu->payload.scan_rsp.addr[0],
   19fb4:	2206      	movs	r2, #6
   19fb6:	3102      	adds	r1, #2
   19fb8:	f108 0002 	add.w	r0, r8, #2
   19fbc:	f7e6 f980 	bl	2c0 <memcpy>
	       &prev->payload.scan_rsp.addr[0], BDADDR_SIZE);
	memcpy(&pdu->payload.scan_rsp.data[0], data, len);
   19fc0:	4632      	mov	r2, r6
   19fc2:	4639      	mov	r1, r7
   19fc4:	f108 0008 	add.w	r0, r8, #8
   19fc8:	f7e6 f97a 	bl	2c0 <memcpy>

	/* commit the update so controller picks it. */
	radio_scan_data->last = last;
   19fcc:	f884 504f 	strb.w	r5, [r4, #79]	; 0x4f
   19fd0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		last = radio_scan_data->last + 1;
   19fd4:	1c5d      	adds	r5, r3, #1
   19fd6:	b2ed      	uxtb	r5, r5
		if (last == DOUBLE_BUFFER_SIZE) {
   19fd8:	2d02      	cmp	r5, #2
   19fda:	d1ca      	bne.n	19f72 <ll_scan_data_set+0x1c>
			last = 0;
   19fdc:	2500      	movs	r5, #0
   19fde:	e7c8      	b.n	19f72 <ll_scan_data_set+0x1c>

00019fe0 <ll_adv_enable>:
}

u32_t ll_adv_enable(u8_t enable)
{
   19fe0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   19fe4:	b082      	sub	sp, #8
	u8_t   rl_idx = FILTER_IDX_NONE;
	struct pdu_adv *pdu_scan;
	struct pdu_adv *pdu_adv;
	u32_t status;

	if (!enable) {
   19fe6:	b120      	cbz	r0, 19ff2 <ll_adv_enable+0x12>
		return radio_adv_disable();
	} else if (radio_adv_is_enabled()) {
   19fe8:	f7fd fbac 	bl	17744 <radio_adv_is_enabled>
   19fec:	b130      	cbz	r0, 19ffc <ll_adv_enable+0x1c>
		return 0;
   19fee:	2000      	movs	r0, #0
   19ff0:	e001      	b.n	19ff6 <ll_adv_enable+0x16>
		return radio_adv_disable();
   19ff2:	f7fe fb27 	bl	18644 <radio_adv_disable>
	status = radio_adv_enable(ll_adv.interval, ll_adv.chan_map,
				  ll_adv.filter_policy, rl_idx);
#endif /* !CONFIG_BT_CTLR_ADV_EXT */

	return status;
}
   19ff6:	b002      	add	sp, #8
   19ff8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	radio_adv_data = radio_adv_data_get();
   19ffc:	f7fd fb9a 	bl	17734 <radio_adv_data_get>
   1a000:	4605      	mov	r5, r0
	radio_scan_data = radio_scan_data_get();
   1a002:	f7fd fb9b 	bl	1773c <radio_scan_data_get>
			[radio_adv_data->last][0];
   1a006:	f895 204f 	ldrb.w	r2, [r5, #79]	; 0x4f
	pdu_adv = (struct pdu_adv *)&radio_adv_data->data
   1a00a:	eb02 0482 	add.w	r4, r2, r2, lsl #2
   1a00e:	ebc2 04c4 	rsb	r4, r2, r4, lsl #3
   1a012:	192e      	adds	r6, r5, r4
			[radio_scan_data->last][0];
   1a014:	f890 304f 	ldrb.w	r3, [r0, #79]	; 0x4f
	pdu_scan = (struct pdu_adv *)&radio_scan_data->data
   1a018:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   1a01c:	ebc3 03c2 	rsb	r3, r3, r2, lsl #3
   1a020:	18c7      	adds	r7, r0, r3
	} else if (pdu_adv->type == PDU_ADV_TYPE_EXT_IND) {
   1a022:	5d2b      	ldrb	r3, [r5, r4]
   1a024:	f003 030f 	and.w	r3, r3, #15
   1a028:	2b07      	cmp	r3, #7
   1a02a:	d023      	beq.n	1a074 <ll_adv_enable+0x94>
		ll_filters_adv_update(ll_adv.filter_policy);
   1a02c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 1a100 <ll_adv_enable+0x120>
   1a030:	f898 0000 	ldrb.w	r0, [r8]
   1a034:	f3c0 00c1 	ubfx	r0, r0, #3, #2
   1a038:	f7ff f874 	bl	19124 <ll_filters_adv_update>
		if (ll_adv.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a03c:	f898 3000 	ldrb.w	r3, [r8]
   1a040:	f003 0360 	and.w	r3, r3, #96	; 0x60
   1a044:	2b40      	cmp	r3, #64	; 0x40
   1a046:	d02b      	beq.n	1a0a0 <ll_adv_enable+0xc0>
   1a048:	2b60      	cmp	r3, #96	; 0x60
   1a04a:	d029      	beq.n	1a0a0 <ll_adv_enable+0xc0>
		bool priv = false;
   1a04c:	2300      	movs	r3, #0
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a04e:	f04f 08ff 	mov.w	r8, #255	; 0xff
		if (!priv) {
   1a052:	2b00      	cmp	r3, #0
   1a054:	d03b      	beq.n	1a0ce <ll_adv_enable+0xee>
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a056:	4b2a      	ldr	r3, [pc, #168]	; (1a100 <ll_adv_enable+0x120>)
   1a058:	7a18      	ldrb	r0, [r3, #8]
   1a05a:	8999      	ldrh	r1, [r3, #12]
				  ll_adv.chan_map, ll_adv.filter_policy,
   1a05c:	781a      	ldrb	r2, [r3, #0]
	status = radio_adv_enable(ll_adv.phy_p, ll_adv.interval,
   1a05e:	f8cd 8000 	str.w	r8, [sp]
   1a062:	f3c2 03c1 	ubfx	r3, r2, #3, #2
   1a066:	f002 0207 	and.w	r2, r2, #7
   1a06a:	f000 0007 	and.w	r0, r0, #7
   1a06e:	f7fe f90b 	bl	18288 <radio_adv_enable>
	return status;
   1a072:	e7c0      	b.n	19ff6 <ll_adv_enable+0x16>
		ptr = (u8_t *)h + sizeof(*h);
   1a074:	1d37      	adds	r7, r6, #4
		if (h->adv_addr) {
   1a076:	78f3      	ldrb	r3, [r6, #3]
   1a078:	f013 0f01 	tst.w	r3, #1
   1a07c:	d102      	bne.n	1a084 <ll_adv_enable+0xa4>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a07e:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a082:	e7e8      	b.n	1a056 <ll_adv_enable+0x76>
			memcpy(ptr, ll_addr_get(pdu_adv->tx_addr, NULL),
   1a084:	5d28      	ldrb	r0, [r5, r4]
   1a086:	2100      	movs	r1, #0
   1a088:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a08c:	f7fe fdf4 	bl	18c78 <ll_addr_get>
   1a090:	2206      	movs	r2, #6
   1a092:	4601      	mov	r1, r0
   1a094:	4638      	mov	r0, r7
   1a096:	f7e6 f913 	bl	2c0 <memcpy>
	u8_t   rl_idx = FILTER_IDX_NONE;
   1a09a:	f04f 08ff 	mov.w	r8, #255	; 0xff
   1a09e:	e7da      	b.n	1a056 <ll_adv_enable+0x76>
			rl_idx = ll_rl_find(ll_adv.id_addr_type,
   1a0a0:	4917      	ldr	r1, [pc, #92]	; (1a100 <ll_adv_enable+0x120>)
   1a0a2:	f811 0b02 	ldrb.w	r0, [r1], #2
   1a0a6:	2200      	movs	r2, #0
   1a0a8:	09c0      	lsrs	r0, r0, #7
   1a0aa:	f7ff f86b 	bl	19184 <ll_rl_find>
   1a0ae:	4680      	mov	r8, r0
			if (rl_idx != FILTER_IDX_NONE) {
   1a0b0:	28ff      	cmp	r0, #255	; 0xff
   1a0b2:	d002      	beq.n	1a0ba <ll_adv_enable+0xda>
				ll_rl_rpa_update(false);
   1a0b4:	2000      	movs	r0, #0
   1a0b6:	f7ff fac7 	bl	19648 <ll_rl_rpa_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_adv);
   1a0ba:	4631      	mov	r1, r6
   1a0bc:	4640      	mov	r0, r8
   1a0be:	f7ff f9f9 	bl	194b4 <ll_rl_pdu_adv_update>
			ll_rl_pdu_adv_update(rl_idx, pdu_scan);
   1a0c2:	4639      	mov	r1, r7
   1a0c4:	4640      	mov	r0, r8
   1a0c6:	f7ff f9f5 	bl	194b4 <ll_rl_pdu_adv_update>
			priv = true;
   1a0ca:	2301      	movs	r3, #1
   1a0cc:	e7c1      	b.n	1a052 <ll_adv_enable+0x72>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a0ce:	3602      	adds	r6, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a0d0:	5d28      	ldrb	r0, [r5, r4]
   1a0d2:	2100      	movs	r1, #0
   1a0d4:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a0d8:	f7fe fdce 	bl	18c78 <ll_addr_get>
			memcpy(&pdu_adv->payload.adv_ind.addr[0],
   1a0dc:	2206      	movs	r2, #6
   1a0de:	4601      	mov	r1, r0
   1a0e0:	4630      	mov	r0, r6
   1a0e2:	f7e6 f8ed 	bl	2c0 <memcpy>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a0e6:	3702      	adds	r7, #2
			       ll_addr_get(pdu_adv->tx_addr, NULL), BDADDR_SIZE);
   1a0e8:	5d28      	ldrb	r0, [r5, r4]
   1a0ea:	2100      	movs	r1, #0
   1a0ec:	f3c0 1080 	ubfx	r0, r0, #6, #1
   1a0f0:	f7fe fdc2 	bl	18c78 <ll_addr_get>
			memcpy(&pdu_scan->payload.scan_rsp.addr[0],
   1a0f4:	2206      	movs	r2, #6
   1a0f6:	4601      	mov	r1, r0
   1a0f8:	4638      	mov	r0, r7
   1a0fa:	f7e6 f8e1 	bl	2c0 <memcpy>
   1a0fe:	e7aa      	b.n	1a056 <ll_adv_enable+0x76>
   1a100:	20001b54 	.word	0x20001b54

0001a104 <ll_scan_params_set>:
	u8_t  filter_policy:2;
} ll_scan;

u32_t ll_scan_params_set(u8_t type, u16_t interval, u16_t window,
			 u8_t own_addr_type, u8_t filter_policy)
{
   1a104:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a106:	4607      	mov	r7, r0
   1a108:	460e      	mov	r6, r1
   1a10a:	4615      	mov	r5, r2
   1a10c:	461c      	mov	r4, r3
	if (radio_scan_is_enabled()) {
   1a10e:	f7fd fb31 	bl	17774 <radio_scan_is_enabled>
   1a112:	b110      	cbz	r0, 1a11a <ll_scan_params_set+0x16>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a114:	220c      	movs	r2, #12
	ll_scan.window = window;
	ll_scan.own_addr_type = own_addr_type;
	ll_scan.filter_policy = filter_policy;

	return 0;
}
   1a116:	4610      	mov	r0, r2
   1a118:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1a11a:	4602      	mov	r2, r0
	ll_scan.type = type;
   1a11c:	4906      	ldr	r1, [pc, #24]	; (1a138 <ll_scan_params_set+0x34>)
   1a11e:	790b      	ldrb	r3, [r1, #4]
   1a120:	f367 0303 	bfi	r3, r7, #0, #4
	ll_scan.interval = interval;
   1a124:	800e      	strh	r6, [r1, #0]
	ll_scan.window = window;
   1a126:	804d      	strh	r5, [r1, #2]
	ll_scan.own_addr_type = own_addr_type;
   1a128:	f364 1305 	bfi	r3, r4, #4, #2
	ll_scan.filter_policy = filter_policy;
   1a12c:	f89d 0018 	ldrb.w	r0, [sp, #24]
   1a130:	f360 1387 	bfi	r3, r0, #6, #2
   1a134:	710b      	strb	r3, [r1, #4]
	return 0;
   1a136:	e7ee      	b.n	1a116 <ll_scan_params_set+0x12>
   1a138:	20001b64 	.word	0x20001b64

0001a13c <ll_scan_enable>:

u32_t ll_scan_enable(u8_t enable)
{
   1a13c:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a13e:	b085      	sub	sp, #20
	u32_t status;
	u8_t  rpa_gen = 0;

	if (!enable) {
   1a140:	b120      	cbz	r0, 1a14c <ll_scan_enable+0x10>
		return radio_scan_disable();
	} else if (radio_scan_is_enabled()) {
   1a142:	f7fd fb17 	bl	17774 <radio_scan_is_enabled>
   1a146:	b128      	cbz	r0, 1a154 <ll_scan_enable+0x18>
		/* Duplicate filtering is processed in the HCI layer */
		return 0;
   1a148:	2000      	movs	r0, #0
   1a14a:	e001      	b.n	1a150 <ll_scan_enable+0x14>
		return radio_scan_disable();
   1a14c:	f7fe fbac 	bl	188a8 <radio_scan_disable>
				   ll_scan.interval, ll_scan.window,
				   ll_scan.filter_policy, rpa_gen,
				   FILTER_IDX_NONE);

	return status;
}
   1a150:	b005      	add	sp, #20
   1a152:	bdf0      	pop	{r4, r5, r6, r7, pc}
	ll_filters_scan_update(ll_scan.filter_policy);
   1a154:	4c18      	ldr	r4, [pc, #96]	; (1a1b8 <ll_scan_enable+0x7c>)
   1a156:	7920      	ldrb	r0, [r4, #4]
   1a158:	0980      	lsrs	r0, r0, #6
   1a15a:	f7fe fffb 	bl	19154 <ll_filters_scan_update>
	if ((ll_scan.type & 0x1) &&
   1a15e:	7923      	ldrb	r3, [r4, #4]
   1a160:	f013 0f01 	tst.w	r3, #1
   1a164:	d00d      	beq.n	1a182 <ll_scan_enable+0x46>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a166:	7923      	ldrb	r3, [r4, #4]
   1a168:	f003 0330 	and.w	r3, r3, #48	; 0x30
	if ((ll_scan.type & 0x1) &&
   1a16c:	2b20      	cmp	r3, #32
   1a16e:	d003      	beq.n	1a178 <ll_scan_enable+0x3c>
	    (ll_scan.own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a170:	2b30      	cmp	r3, #48	; 0x30
   1a172:	d001      	beq.n	1a178 <ll_scan_enable+0x3c>
	u8_t  rpa_gen = 0;
   1a174:	2700      	movs	r7, #0
   1a176:	e005      	b.n	1a184 <ll_scan_enable+0x48>
		ll_rl_rpa_update(false);
   1a178:	2000      	movs	r0, #0
   1a17a:	f7ff fa65 	bl	19648 <ll_rl_rpa_update>
		rpa_gen = 1;
   1a17e:	2701      	movs	r7, #1
   1a180:	e000      	b.n	1a184 <ll_scan_enable+0x48>
	u8_t  rpa_gen = 0;
   1a182:	2700      	movs	r7, #0
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a184:	4d0c      	ldr	r5, [pc, #48]	; (1a1b8 <ll_scan_enable+0x7c>)
   1a186:	792c      	ldrb	r4, [r5, #4]
   1a188:	f004 060f 	and.w	r6, r4, #15
   1a18c:	f3c4 1400 	ubfx	r4, r4, #4, #1
   1a190:	2100      	movs	r1, #0
   1a192:	4620      	mov	r0, r4
   1a194:	f7fe fd70 	bl	18c78 <ll_addr_get>
   1a198:	882b      	ldrh	r3, [r5, #0]
   1a19a:	8869      	ldrh	r1, [r5, #2]
				   ll_scan.filter_policy, rpa_gen,
   1a19c:	792a      	ldrb	r2, [r5, #4]
   1a19e:	0992      	lsrs	r2, r2, #6
	status = radio_scan_enable(ll_scan.type, ll_scan.own_addr_type & 0x1,
   1a1a0:	25ff      	movs	r5, #255	; 0xff
   1a1a2:	9503      	str	r5, [sp, #12]
   1a1a4:	9702      	str	r7, [sp, #8]
   1a1a6:	9201      	str	r2, [sp, #4]
   1a1a8:	9100      	str	r1, [sp, #0]
   1a1aa:	4602      	mov	r2, r0
   1a1ac:	4621      	mov	r1, r4
   1a1ae:	4630      	mov	r0, r6
   1a1b0:	f7fe fa7a 	bl	186a8 <radio_scan_enable>
	return status;
   1a1b4:	e7cc      	b.n	1a150 <ll_scan_enable+0x14>
   1a1b6:	bf00      	nop
   1a1b8:	20001b64 	.word	0x20001b64

0001a1bc <ll_create_connection>:
u32_t ll_create_connection(u16_t scan_interval, u16_t scan_window,
			   u8_t filter_policy, u8_t peer_addr_type,
			   u8_t *peer_addr, u8_t own_addr_type,
			   u16_t interval, u16_t latency,
			   u16_t timeout)
{
   1a1bc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1a1c0:	b085      	sub	sp, #20
   1a1c2:	4607      	mov	r7, r0
   1a1c4:	4688      	mov	r8, r1
   1a1c6:	4615      	mov	r5, r2
   1a1c8:	461e      	mov	r6, r3
   1a1ca:	f89d 4034 	ldrb.w	r4, [sp, #52]	; 0x34
	u32_t status;
	u8_t  rpa_gen = 0;
	u8_t  rl_idx = FILTER_IDX_NONE;

	if (radio_scan_is_enabled()) {
   1a1ce:	f7fd fad1 	bl	17774 <radio_scan_is_enabled>
   1a1d2:	b120      	cbz	r0, 1a1de <ll_create_connection+0x22>
		return BT_HCI_ERR_CMD_DISALLOWED;
   1a1d4:	230c      	movs	r3, #12
#endif
	return radio_scan_enable(0, own_addr_type,
				 ll_addr_get(own_addr_type, NULL),
				 scan_interval, scan_window,
				 filter_policy, rpa_gen, rl_idx);
}
   1a1d6:	4618      	mov	r0, r3
   1a1d8:	b005      	add	sp, #20
   1a1da:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	status = radio_connect_enable(peer_addr_type, peer_addr, interval,
   1a1de:	f8bd 3040 	ldrh.w	r3, [sp, #64]	; 0x40
   1a1e2:	9300      	str	r3, [sp, #0]
   1a1e4:	f8bd 303c 	ldrh.w	r3, [sp, #60]	; 0x3c
   1a1e8:	f8bd 2038 	ldrh.w	r2, [sp, #56]	; 0x38
   1a1ec:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a1ee:	4630      	mov	r0, r6
   1a1f0:	f7fd fada 	bl	177a8 <radio_connect_enable>
	if (status) {
   1a1f4:	4603      	mov	r3, r0
   1a1f6:	2800      	cmp	r0, #0
   1a1f8:	d1ed      	bne.n	1a1d6 <ll_create_connection+0x1a>
	ll_filters_scan_update(filter_policy);
   1a1fa:	4628      	mov	r0, r5
   1a1fc:	f7fe ffaa 	bl	19154 <ll_filters_scan_update>
	if (!filter_policy && ctrl_rl_enabled()) {
   1a200:	b1c5      	cbz	r5, 1a234 <ll_create_connection+0x78>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1a202:	f04f 09ff 	mov.w	r9, #255	; 0xff
	if (own_addr_type == BT_ADDR_LE_PUBLIC_ID ||
   1a206:	1ea3      	subs	r3, r4, #2
   1a208:	b2db      	uxtb	r3, r3
   1a20a:	2b01      	cmp	r3, #1
   1a20c:	d91f      	bls.n	1a24e <ll_create_connection+0x92>
	u8_t  rpa_gen = 0;
   1a20e:	2600      	movs	r6, #0
	return radio_scan_enable(0, own_addr_type,
   1a210:	2100      	movs	r1, #0
   1a212:	4620      	mov	r0, r4
   1a214:	f7fe fd30 	bl	18c78 <ll_addr_get>
   1a218:	f8cd 900c 	str.w	r9, [sp, #12]
   1a21c:	9602      	str	r6, [sp, #8]
   1a21e:	9501      	str	r5, [sp, #4]
   1a220:	f8cd 8000 	str.w	r8, [sp]
   1a224:	463b      	mov	r3, r7
   1a226:	4602      	mov	r2, r0
   1a228:	4621      	mov	r1, r4
   1a22a:	2000      	movs	r0, #0
   1a22c:	f7fe fa3c 	bl	186a8 <radio_scan_enable>
   1a230:	4603      	mov	r3, r0
   1a232:	e7d0      	b.n	1a1d6 <ll_create_connection+0x1a>
	if (!filter_policy && ctrl_rl_enabled()) {
   1a234:	f7ff f936 	bl	194a4 <ctrl_rl_enabled>
   1a238:	b910      	cbnz	r0, 1a240 <ll_create_connection+0x84>
	u8_t  rl_idx = FILTER_IDX_NONE;
   1a23a:	f04f 09ff 	mov.w	r9, #255	; 0xff
   1a23e:	e7e2      	b.n	1a206 <ll_create_connection+0x4a>
		rl_idx = ll_rl_find(peer_addr_type, peer_addr, NULL);
   1a240:	2200      	movs	r2, #0
   1a242:	990c      	ldr	r1, [sp, #48]	; 0x30
   1a244:	4630      	mov	r0, r6
   1a246:	f7fe ff9d 	bl	19184 <ll_rl_find>
   1a24a:	4681      	mov	r9, r0
   1a24c:	e7db      	b.n	1a206 <ll_create_connection+0x4a>
		ll_rl_rpa_update(false);
   1a24e:	2000      	movs	r0, #0
   1a250:	f7ff f9fa 	bl	19648 <ll_rl_rpa_update>
		own_addr_type &= 0x1;
   1a254:	f004 0401 	and.w	r4, r4, #1
		rpa_gen = 1;
   1a258:	2601      	movs	r6, #1
   1a25a:	e7d9      	b.n	1a210 <ll_create_connection+0x54>

0001a25c <pool_id>:
	return &_net_buf_pool_list[id];
}

static int pool_id(struct net_buf_pool *pool)
{
	return pool - _net_buf_pool_list;
   1a25c:	4b01      	ldr	r3, [pc, #4]	; (1a264 <pool_id+0x8>)
   1a25e:	1ac0      	subs	r0, r0, r3
}
   1a260:	1140      	asrs	r0, r0, #5
   1a262:	4770      	bx	lr
   1a264:	2000cd28 	.word	0x2000cd28

0001a268 <net_buf_pool_get>:
}
   1a268:	4b01      	ldr	r3, [pc, #4]	; (1a270 <net_buf_pool_get+0x8>)
   1a26a:	eb03 1040 	add.w	r0, r3, r0, lsl #5
   1a26e:	4770      	bx	lr
   1a270:	2000cd28 	.word	0x2000cd28

0001a274 <net_buf_reset>:
void net_buf_reset(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf->flags == 0);
	NET_BUF_ASSERT(buf->frags == NULL);

	buf->len   = 0;
   1a274:	2300      	movs	r3, #0
   1a276:	8183      	strh	r3, [r0, #12]
	buf->data  = buf->__buf;
   1a278:	f100 0310 	add.w	r3, r0, #16
   1a27c:	6083      	str	r3, [r0, #8]
   1a27e:	4770      	bx	lr

0001a280 <net_buf_alloc>:
struct net_buf *net_buf_alloc_debug(struct net_buf_pool *pool, s32_t timeout,
				    const char *func, int line)
#else
struct net_buf *net_buf_alloc(struct net_buf_pool *pool, s32_t timeout)
#endif
{
   1a280:	b570      	push	{r4, r5, r6, lr}
   1a282:	4605      	mov	r5, r0
	__asm__ volatile(
   1a284:	f04f 0320 	mov.w	r3, #32
   1a288:	f3ef 8611 	mrs	r6, BASEPRI
   1a28c:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	/* If there are uninitialized buffers we're guaranteed to succeed
	 * with the allocation one way or another.
	 */
	if (pool->uninit_count) {
   1a290:	8a43      	ldrh	r3, [r0, #18]
   1a292:	b373      	cbz	r3, 1a2f2 <net_buf_alloc+0x72>

		/* If this is not the first access to the pool, we can
		 * be opportunistic and try to fetch a previously used
		 * buffer from the LIFO with K_NO_WAIT.
		 */
		if (pool->uninit_count < pool->buf_count) {
   1a294:	8a02      	ldrh	r2, [r0, #16]
   1a296:	4293      	cmp	r3, r2
   1a298:	d207      	bcs.n	1a2aa <net_buf_alloc+0x2a>
			buf = k_lifo_get(&pool->free, K_NO_WAIT);
   1a29a:	2100      	movs	r1, #0
   1a29c:	f00e f83a 	bl	28314 <k_queue_get>
			if (buf) {
   1a2a0:	4604      	mov	r4, r0
   1a2a2:	b110      	cbz	r0, 1a2aa <net_buf_alloc+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   1a2a4:	f386 8811 	msr	BASEPRI, r6
   1a2a8:	e019      	b.n	1a2de <net_buf_alloc+0x5e>
				irq_unlock(key);
				goto success;
			}
		}

		uninit_count = pool->uninit_count--;
   1a2aa:	8a6b      	ldrh	r3, [r5, #18]
   1a2ac:	1e5a      	subs	r2, r3, #1
   1a2ae:	826a      	strh	r2, [r5, #18]
   1a2b0:	f386 8811 	msr	BASEPRI, r6
	buf = UNINIT_BUF(pool, pool->buf_count - uninit_count);
   1a2b4:	69ea      	ldr	r2, [r5, #28]
   1a2b6:	8a2c      	ldrh	r4, [r5, #16]
   1a2b8:	1ae4      	subs	r4, r4, r3
   1a2ba:	8aab      	ldrh	r3, [r5, #20]
   1a2bc:	3303      	adds	r3, #3
   1a2be:	f023 0303 	bic.w	r3, r3, #3
   1a2c2:	8ae9      	ldrh	r1, [r5, #22]
   1a2c4:	3103      	adds	r1, #3
   1a2c6:	f021 0103 	bic.w	r1, r1, #3
   1a2ca:	440b      	add	r3, r1
   1a2cc:	3310      	adds	r3, #16
   1a2ce:	fb03 2404 	mla	r4, r3, r4, r2
	buf->pool_id = pool_id(pool);
   1a2d2:	4628      	mov	r0, r5
   1a2d4:	f7ff ffc2 	bl	1a25c <pool_id>
   1a2d8:	71a0      	strb	r0, [r4, #6]
	buf->size = pool->buf_size;
   1a2da:	8aab      	ldrh	r3, [r5, #20]
   1a2dc:	81e3      	strh	r3, [r4, #14]
	}

success:
	NET_BUF_DBG("allocated buf %p", buf);

	buf->ref   = 1;
   1a2de:	2301      	movs	r3, #1
   1a2e0:	7123      	strb	r3, [r4, #4]
	buf->flags = 0;
   1a2e2:	2300      	movs	r3, #0
   1a2e4:	7163      	strb	r3, [r4, #5]
	buf->frags = NULL;
   1a2e6:	6023      	str	r3, [r4, #0]
	net_buf_reset(buf);
   1a2e8:	4620      	mov	r0, r4
   1a2ea:	f7ff ffc3 	bl	1a274 <net_buf_reset>
	pool->avail_count--;
	NET_BUF_ASSERT(pool->avail_count >= 0);
#endif

	return buf;
}
   1a2ee:	4620      	mov	r0, r4
   1a2f0:	bd70      	pop	{r4, r5, r6, pc}
   1a2f2:	f386 8811 	msr	BASEPRI, r6
	buf = k_lifo_get(&pool->free, timeout);
   1a2f6:	f00e f80d 	bl	28314 <k_queue_get>
	if (!buf) {
   1a2fa:	4604      	mov	r4, r0
   1a2fc:	2800      	cmp	r0, #0
   1a2fe:	d1ee      	bne.n	1a2de <net_buf_alloc+0x5e>
   1a300:	e7f5      	b.n	1a2ee <net_buf_alloc+0x6e>

0001a302 <net_buf_get>:
struct net_buf *net_buf_get_debug(struct k_fifo *fifo, s32_t timeout,
				  const char *func, int line)
#else
struct net_buf *net_buf_get(struct k_fifo *fifo, s32_t timeout)
#endif
{
   1a302:	b570      	push	{r4, r5, r6, lr}
   1a304:	4605      	mov	r5, r0
	struct net_buf *buf, *frag;

	NET_BUF_DBG("%s():%d: fifo %p timeout %d", func, line, fifo, timeout);

	buf = k_fifo_get(fifo, timeout);
   1a306:	f00e f805 	bl	28314 <k_queue_get>
	if (!buf) {
   1a30a:	4606      	mov	r6, r0
   1a30c:	b188      	cbz	r0, 1a332 <net_buf_get+0x30>
   1a30e:	4604      	mov	r4, r0
   1a310:	e009      	b.n	1a326 <net_buf_get+0x24>

	NET_BUF_DBG("%s():%d: buf %p fifo %p", func, line, buf, fifo);

	/* Get any fragments belonging to this buffer */
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
		frag->frags = k_fifo_get(fifo, K_NO_WAIT);
   1a312:	2100      	movs	r1, #0
   1a314:	4628      	mov	r0, r5
   1a316:	f00d fffd 	bl	28314 <k_queue_get>
   1a31a:	6020      	str	r0, [r4, #0]
		NET_BUF_ASSERT(frag->frags);

		/* The fragments flag is only for FIFO-internal usage */
		frag->flags &= ~NET_BUF_FRAGS;
   1a31c:	7963      	ldrb	r3, [r4, #5]
   1a31e:	f023 0301 	bic.w	r3, r3, #1
   1a322:	7163      	strb	r3, [r4, #5]
	for (frag = buf; (frag->flags & NET_BUF_FRAGS); frag = frag->frags) {
   1a324:	4604      	mov	r4, r0
   1a326:	7963      	ldrb	r3, [r4, #5]
   1a328:	f013 0f01 	tst.w	r3, #1
   1a32c:	d1f1      	bne.n	1a312 <net_buf_get+0x10>
	}

	/* Mark the end of the fragment list */
	frag->frags = NULL;
   1a32e:	2300      	movs	r3, #0
   1a330:	6023      	str	r3, [r4, #0]

	return buf;
}
   1a332:	4630      	mov	r0, r6
   1a334:	bd70      	pop	{r4, r5, r6, pc}

0001a336 <net_buf_reserve>:
{
	NET_BUF_ASSERT(buf);
	NET_BUF_ASSERT(buf->len == 0);
	NET_BUF_DBG("buf %p reserve %zu", buf, reserve);

	buf->data = buf->__buf + reserve;
   1a336:	f100 0310 	add.w	r3, r0, #16
   1a33a:	4419      	add	r1, r3
   1a33c:	6081      	str	r1, [r0, #8]
   1a33e:	4770      	bx	lr

0001a340 <net_buf_put>:
}

void net_buf_put(struct k_fifo *fifo, struct net_buf *buf)
{
   1a340:	b510      	push	{r4, lr}
	struct net_buf *tail;

	NET_BUF_ASSERT(fifo);
	NET_BUF_ASSERT(buf);

	for (tail = buf; tail->frags; tail = tail->frags) {
   1a342:	460a      	mov	r2, r1
   1a344:	e004      	b.n	1a350 <net_buf_put+0x10>
		tail->flags |= NET_BUF_FRAGS;
   1a346:	7953      	ldrb	r3, [r2, #5]
   1a348:	f043 0301 	orr.w	r3, r3, #1
   1a34c:	7153      	strb	r3, [r2, #5]
	for (tail = buf; tail->frags; tail = tail->frags) {
   1a34e:	4622      	mov	r2, r4
   1a350:	6814      	ldr	r4, [r2, #0]
   1a352:	2c00      	cmp	r4, #0
   1a354:	d1f7      	bne.n	1a346 <net_buf_put+0x6>
	}

	k_fifo_put_list(fifo, buf, tail);
   1a356:	f00d ffc1 	bl	282dc <k_queue_append_list>
   1a35a:	bd10      	pop	{r4, pc}

0001a35c <net_buf_unref>:
#if defined(CONFIG_NET_BUF_LOG)
void net_buf_unref_debug(struct net_buf *buf, const char *func, int line)
#else
void net_buf_unref(struct net_buf *buf)
#endif
{
   1a35c:	b538      	push	{r3, r4, r5, lr}
   1a35e:	4604      	mov	r4, r0
	NET_BUF_ASSERT(buf);

	while (buf) {
   1a360:	e006      	b.n	1a370 <net_buf_unref+0x14>
	struct net_buf_pool *pool = net_buf_pool_get(buf->pool_id);
   1a362:	79a0      	ldrb	r0, [r4, #6]
   1a364:	f7ff ff80 	bl	1a268 <net_buf_pool_get>
	k_lifo_put(&pool->free, buf);
   1a368:	4621      	mov	r1, r4
   1a36a:	f00d ffb1 	bl	282d0 <k_queue_prepend>
{
   1a36e:	462c      	mov	r4, r5
	while (buf) {
   1a370:	b17c      	cbz	r4, 1a392 <net_buf_unref+0x36>
		struct net_buf *frags = buf->frags;
   1a372:	6825      	ldr	r5, [r4, #0]
		}
#endif
		NET_BUF_DBG("buf %p ref %u pool_id %u frags %p", buf, buf->ref,
			    buf->pool_id, buf->frags);

		if (--buf->ref > 0) {
   1a374:	7923      	ldrb	r3, [r4, #4]
   1a376:	3b01      	subs	r3, #1
   1a378:	b2db      	uxtb	r3, r3
   1a37a:	7123      	strb	r3, [r4, #4]
   1a37c:	b94b      	cbnz	r3, 1a392 <net_buf_unref+0x36>
			return;
		}

		buf->frags = NULL;
   1a37e:	6023      	str	r3, [r4, #0]

		pool = net_buf_pool_get(buf->pool_id);
   1a380:	79a0      	ldrb	r0, [r4, #6]
   1a382:	f7ff ff71 	bl	1a268 <net_buf_pool_get>
#if defined(CONFIG_NET_BUF_POOL_USAGE)
		pool->avail_count++;
		NET_BUF_ASSERT(pool->avail_count <= pool->buf_count);
#endif

		if (pool->destroy) {
   1a386:	6983      	ldr	r3, [r0, #24]
   1a388:	2b00      	cmp	r3, #0
   1a38a:	d0ea      	beq.n	1a362 <net_buf_unref+0x6>
			pool->destroy(buf);
   1a38c:	4620      	mov	r0, r4
   1a38e:	4798      	blx	r3
   1a390:	e7ed      	b.n	1a36e <net_buf_unref+0x12>
   1a392:	bd38      	pop	{r3, r4, r5, pc}

0001a394 <net_buf_ref>:
{
	NET_BUF_ASSERT(buf);

	NET_BUF_DBG("buf %p (old) ref %u pool_id %u",
		    buf, buf->ref, buf->pool_id);
	buf->ref++;
   1a394:	7903      	ldrb	r3, [r0, #4]
   1a396:	3301      	adds	r3, #1
   1a398:	7103      	strb	r3, [r0, #4]
	return buf;
}
   1a39a:	4770      	bx	lr

0001a39c <net_buf_frag_last>:

struct net_buf *net_buf_frag_last(struct net_buf *buf)
{
	NET_BUF_ASSERT(buf);

	while (buf->frags) {
   1a39c:	e000      	b.n	1a3a0 <net_buf_frag_last+0x4>
		buf = buf->frags;
   1a39e:	4618      	mov	r0, r3
	while (buf->frags) {
   1a3a0:	6803      	ldr	r3, [r0, #0]
   1a3a2:	2b00      	cmp	r3, #0
   1a3a4:	d1fb      	bne.n	1a39e <net_buf_frag_last+0x2>
	}

	return buf;
}
   1a3a6:	4770      	bx	lr

0001a3a8 <net_buf_frag_insert>:

void net_buf_frag_insert(struct net_buf *parent, struct net_buf *frag)
{
   1a3a8:	b570      	push	{r4, r5, r6, lr}
   1a3aa:	4604      	mov	r4, r0
   1a3ac:	460d      	mov	r5, r1
	NET_BUF_ASSERT(parent);
	NET_BUF_ASSERT(frag);

	if (parent->frags) {
   1a3ae:	6806      	ldr	r6, [r0, #0]
   1a3b0:	b11e      	cbz	r6, 1a3ba <net_buf_frag_insert+0x12>
		net_buf_frag_last(frag)->frags = parent->frags;
   1a3b2:	4608      	mov	r0, r1
   1a3b4:	f7ff fff2 	bl	1a39c <net_buf_frag_last>
   1a3b8:	6006      	str	r6, [r0, #0]
	}
	/* Take ownership of the fragment reference */
	parent->frags = frag;
   1a3ba:	6025      	str	r5, [r4, #0]
   1a3bc:	bd70      	pop	{r4, r5, r6, pc}

0001a3be <net_buf_frag_add>:
}

struct net_buf *net_buf_frag_add(struct net_buf *head, struct net_buf *frag)
{
   1a3be:	b538      	push	{r3, r4, r5, lr}
   1a3c0:	460d      	mov	r5, r1
	NET_BUF_ASSERT(frag);

	if (!head) {
   1a3c2:	b138      	cbz	r0, 1a3d4 <net_buf_frag_add+0x16>
   1a3c4:	4604      	mov	r4, r0
		return net_buf_ref(frag);
	}

	net_buf_frag_insert(net_buf_frag_last(head), frag);
   1a3c6:	f7ff ffe9 	bl	1a39c <net_buf_frag_last>
   1a3ca:	4629      	mov	r1, r5
   1a3cc:	f7ff ffec 	bl	1a3a8 <net_buf_frag_insert>

	return head;
   1a3d0:	4620      	mov	r0, r4
}
   1a3d2:	bd38      	pop	{r3, r4, r5, pc}
		return net_buf_ref(frag);
   1a3d4:	4608      	mov	r0, r1
   1a3d6:	f7ff ffdd 	bl	1a394 <net_buf_ref>
   1a3da:	bd38      	pop	{r3, r4, r5, pc}

0001a3dc <net_buf_frag_del>:
				       struct net_buf *frag,
				       const char *func, int line)
#else
struct net_buf *net_buf_frag_del(struct net_buf *parent, struct net_buf *frag)
#endif
{
   1a3dc:	b510      	push	{r4, lr}
	struct net_buf *next_frag;

	NET_BUF_ASSERT(frag);

	if (parent) {
   1a3de:	b108      	cbz	r0, 1a3e4 <net_buf_frag_del+0x8>
		NET_BUF_ASSERT(parent->frags);
		NET_BUF_ASSERT(parent->frags == frag);
		parent->frags = frag->frags;
   1a3e0:	680a      	ldr	r2, [r1, #0]
   1a3e2:	6002      	str	r2, [r0, #0]
	}

	next_frag = frag->frags;
   1a3e4:	680c      	ldr	r4, [r1, #0]

	frag->frags = NULL;
   1a3e6:	2300      	movs	r3, #0
   1a3e8:	600b      	str	r3, [r1, #0]

#if defined(CONFIG_NET_BUF_LOG)
	net_buf_unref_debug(frag, func, line);
#else
	net_buf_unref(frag);
   1a3ea:	4608      	mov	r0, r1
   1a3ec:	f7ff ffb6 	bl	1a35c <net_buf_unref>
#endif

	return next_frag;
}
   1a3f0:	4620      	mov	r0, r4
   1a3f2:	bd10      	pop	{r4, pc}

0001a3f4 <net_buf_simple_add>:
	return buf->data + buf->len;
   1a3f4:	6802      	ldr	r2, [r0, #0]
   1a3f6:	8883      	ldrh	r3, [r0, #4]

	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_tailroom(buf) >= len);

	buf->len += len;
   1a3f8:	4419      	add	r1, r3
   1a3fa:	8081      	strh	r1, [r0, #4]
	return tail;
}
   1a3fc:	18d0      	adds	r0, r2, r3
   1a3fe:	4770      	bx	lr

0001a400 <net_buf_simple_add_mem>:

void *net_buf_simple_add_mem(struct net_buf_simple *buf, const void *mem,
			     size_t len)
{
   1a400:	b538      	push	{r3, r4, r5, lr}
   1a402:	460d      	mov	r5, r1
   1a404:	4614      	mov	r4, r2
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	return memcpy(net_buf_simple_add(buf, len), mem, len);
   1a406:	4611      	mov	r1, r2
   1a408:	f7ff fff4 	bl	1a3f4 <net_buf_simple_add>
   1a40c:	4622      	mov	r2, r4
   1a40e:	4629      	mov	r1, r5
   1a410:	f7e5 ff56 	bl	2c0 <memcpy>
}
   1a414:	bd38      	pop	{r3, r4, r5, pc}

0001a416 <net_buf_simple_add_u8>:

u8_t *net_buf_simple_add_u8(struct net_buf_simple *buf, u8_t val)
{
   1a416:	b510      	push	{r4, lr}
   1a418:	460c      	mov	r4, r1
	u8_t *u8;

	NET_BUF_SIMPLE_DBG("buf %p val 0x%02x", buf, val);

	u8 = net_buf_simple_add(buf, 1);
   1a41a:	2101      	movs	r1, #1
   1a41c:	f7ff ffea 	bl	1a3f4 <net_buf_simple_add>
	*u8 = val;
   1a420:	7004      	strb	r4, [r0, #0]

	return u8;
}
   1a422:	bd10      	pop	{r4, pc}

0001a424 <net_buf_simple_add_le16>:

void net_buf_simple_add_le16(struct net_buf_simple *buf, u16_t val)
{
   1a424:	b510      	push	{r4, lr}
   1a426:	b082      	sub	sp, #8
   1a428:	ac02      	add	r4, sp, #8
   1a42a:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a42e:	2102      	movs	r1, #2
   1a430:	f7ff ffe0 	bl	1a3f4 <net_buf_simple_add>
   1a434:	2202      	movs	r2, #2
   1a436:	4621      	mov	r1, r4
   1a438:	f7e5 ff42 	bl	2c0 <memcpy>
}
   1a43c:	b002      	add	sp, #8
   1a43e:	bd10      	pop	{r4, pc}

0001a440 <net_buf_simple_add_be16>:

void net_buf_simple_add_be16(struct net_buf_simple *buf, u16_t val)
{
   1a440:	b510      	push	{r4, lr}
   1a442:	b082      	sub	sp, #8
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_be16(val);
   1a444:	0a0b      	lsrs	r3, r1, #8
   1a446:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1a44a:	ac02      	add	r4, sp, #8
   1a44c:	f824 1d02 	strh.w	r1, [r4, #-2]!
	memcpy(net_buf_simple_add(buf, sizeof(val)), &val, sizeof(val));
   1a450:	2102      	movs	r1, #2
   1a452:	f7ff ffcf 	bl	1a3f4 <net_buf_simple_add>
   1a456:	2202      	movs	r2, #2
   1a458:	4621      	mov	r1, r4
   1a45a:	f7e5 ff31 	bl	2c0 <memcpy>
}
   1a45e:	b002      	add	sp, #8
   1a460:	bd10      	pop	{r4, pc}

0001a462 <net_buf_simple_push>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(net_buf_simple_headroom(buf) >= len);

	buf->data -= len;
   1a462:	6803      	ldr	r3, [r0, #0]
   1a464:	1a5b      	subs	r3, r3, r1
   1a466:	6003      	str	r3, [r0, #0]
	buf->len += len;
   1a468:	8882      	ldrh	r2, [r0, #4]
   1a46a:	4411      	add	r1, r2
   1a46c:	8081      	strh	r1, [r0, #4]
	return buf->data;
}
   1a46e:	4618      	mov	r0, r3
   1a470:	4770      	bx	lr

0001a472 <net_buf_simple_push_le16>:

void net_buf_simple_push_le16(struct net_buf_simple *buf, u16_t val)
{
   1a472:	b510      	push	{r4, lr}
   1a474:	b082      	sub	sp, #8
   1a476:	ac02      	add	r4, sp, #8
   1a478:	f824 1d02 	strh.w	r1, [r4, #-2]!
	NET_BUF_SIMPLE_DBG("buf %p val %u", buf, val);

	val = sys_cpu_to_le16(val);
	memcpy(net_buf_simple_push(buf, sizeof(val)), &val, sizeof(val));
   1a47c:	2102      	movs	r1, #2
   1a47e:	f7ff fff0 	bl	1a462 <net_buf_simple_push>
   1a482:	2202      	movs	r2, #2
   1a484:	4621      	mov	r1, r4
   1a486:	f7e5 ff1b 	bl	2c0 <memcpy>
}
   1a48a:	b002      	add	sp, #8
   1a48c:	bd10      	pop	{r4, pc}

0001a48e <net_buf_simple_pull>:
{
	NET_BUF_SIMPLE_DBG("buf %p len %zu", buf, len);

	NET_BUF_SIMPLE_ASSERT(buf->len >= len);

	buf->len -= len;
   1a48e:	8883      	ldrh	r3, [r0, #4]
   1a490:	1a5b      	subs	r3, r3, r1
   1a492:	8083      	strh	r3, [r0, #4]
	return buf->data += len;
   1a494:	6803      	ldr	r3, [r0, #0]
   1a496:	4419      	add	r1, r3
   1a498:	6001      	str	r1, [r0, #0]
}
   1a49a:	4608      	mov	r0, r1
   1a49c:	4770      	bx	lr

0001a49e <net_buf_simple_pull_u8>:

u8_t net_buf_simple_pull_u8(struct net_buf_simple *buf)
{
   1a49e:	b510      	push	{r4, lr}
	u8_t val;

	val = buf->data[0];
   1a4a0:	6803      	ldr	r3, [r0, #0]
   1a4a2:	781c      	ldrb	r4, [r3, #0]
	net_buf_simple_pull(buf, 1);
   1a4a4:	2101      	movs	r1, #1
   1a4a6:	f7ff fff2 	bl	1a48e <net_buf_simple_pull>

	return val;
}
   1a4aa:	4620      	mov	r0, r4
   1a4ac:	bd10      	pop	{r4, pc}

0001a4ae <net_buf_simple_pull_le16>:

u16_t net_buf_simple_pull_le16(struct net_buf_simple *buf)
{
   1a4ae:	b510      	push	{r4, lr}
	u16_t val;

	val = UNALIGNED_GET((u16_t *)buf->data);
   1a4b0:	6803      	ldr	r3, [r0, #0]
   1a4b2:	881c      	ldrh	r4, [r3, #0]
	net_buf_simple_pull(buf, sizeof(val));
   1a4b4:	2102      	movs	r1, #2
   1a4b6:	f7ff ffea 	bl	1a48e <net_buf_simple_pull>

	return sys_le16_to_cpu(val);
}
   1a4ba:	4620      	mov	r0, r4
   1a4bc:	bd10      	pop	{r4, pc}

0001a4be <net_buf_simple_headroom>:
	return sys_be32_to_cpu(val);
}

size_t net_buf_simple_headroom(struct net_buf_simple *buf)
{
	return buf->data - buf->__buf;
   1a4be:	f850 3b08 	ldr.w	r3, [r0], #8
}
   1a4c2:	1a18      	subs	r0, r3, r0
   1a4c4:	4770      	bx	lr

0001a4c6 <net_buf_simple_tailroom>:

size_t net_buf_simple_tailroom(struct net_buf_simple *buf)
{
   1a4c6:	b538      	push	{r3, r4, r5, lr}
   1a4c8:	4605      	mov	r5, r0
	return buf->size - net_buf_simple_headroom(buf) - buf->len;
   1a4ca:	88c4      	ldrh	r4, [r0, #6]
   1a4cc:	f7ff fff7 	bl	1a4be <net_buf_simple_headroom>
   1a4d0:	1a20      	subs	r0, r4, r0
   1a4d2:	88ab      	ldrh	r3, [r5, #4]
}
   1a4d4:	1ac0      	subs	r0, r0, r3
   1a4d6:	bd38      	pop	{r3, r4, r5, pc}

0001a4d8 <processing_data>:

	return NET_DROP;
}

static void processing_data(struct net_pkt *pkt, bool is_loopback)
{
   1a4d8:	b510      	push	{r4, lr}
   1a4da:	4604      	mov	r4, r0
	if (!pkt->frags) {
   1a4dc:	6883      	ldr	r3, [r0, #8]
   1a4de:	b18b      	cbz	r3, 1a504 <processing_data+0x2c>
	if (!is_loopback && !locally_routed) {
   1a4e0:	b1b1      	cbz	r1, 1a510 <processing_data+0x38>
	return net_buf_frags_len(pkt->frags);
}

static inline u8_t *net_pkt_ip_data(struct net_pkt *pkt)
{
	return pkt->frags->data;
   1a4e2:	68a3      	ldr	r3, [r4, #8]
   1a4e4:	689b      	ldr	r3, [r3, #8]
	switch (NET_IPV6_HDR(pkt)->vtc & 0xf0) {
   1a4e6:	781b      	ldrb	r3, [r3, #0]
   1a4e8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   1a4ec:	2b60      	cmp	r3, #96	; 0x60
   1a4ee:	d01d      	beq.n	1a52c <processing_data+0x54>
	net_stats.processing_error++;
}

static inline void net_stats_update_ip_errors_protoerr(void)
{
	net_stats.ip_errors.protoerr++;
   1a4f0:	4b18      	ldr	r3, [pc, #96]	; (1a554 <processing_data+0x7c>)
   1a4f2:	6a1a      	ldr	r2, [r3, #32]
   1a4f4:	3201      	adds	r2, #1
   1a4f6:	621a      	str	r2, [r3, #32]
}

static inline void net_stats_update_ip_errors_vhlerr(void)
{
	net_stats.ip_errors.vhlerr++;
   1a4f8:	68da      	ldr	r2, [r3, #12]
   1a4fa:	3201      	adds	r2, #1
   1a4fc:	60da      	str	r2, [r3, #12]
	return NET_DROP;
   1a4fe:	2002      	movs	r0, #2
	switch (process_data(pkt, is_loopback)) {
   1a500:	bb18      	cbnz	r0, 1a54a <processing_data+0x72>
   1a502:	bd10      	pop	{r4, pc}
	net_stats.processing_error++;
   1a504:	4a13      	ldr	r2, [pc, #76]	; (1a554 <processing_data+0x7c>)
   1a506:	6813      	ldr	r3, [r2, #0]
   1a508:	3301      	adds	r3, #1
   1a50a:	6013      	str	r3, [r2, #0]
		return NET_DROP;
   1a50c:	2002      	movs	r0, #2
   1a50e:	e7f7      	b.n	1a500 <processing_data+0x28>
	return pkt->iface;
   1a510:	6940      	ldr	r0, [r0, #20]
 * @return verdict about the packet
 */
static inline enum net_verdict net_if_recv_data(struct net_if *iface,
						struct net_pkt *pkt)
{
	return iface->l2->recv(iface, pkt);
   1a512:	6843      	ldr	r3, [r0, #4]
   1a514:	681b      	ldr	r3, [r3, #0]
   1a516:	4621      	mov	r1, r4
   1a518:	4798      	blx	r3
		if (ret != NET_CONTINUE) {
   1a51a:	2801      	cmp	r0, #1
   1a51c:	d0e1      	beq.n	1a4e2 <processing_data+0xa>
			if (ret == NET_DROP) {
   1a51e:	2802      	cmp	r0, #2
   1a520:	d1ee      	bne.n	1a500 <processing_data+0x28>
   1a522:	4a0c      	ldr	r2, [pc, #48]	; (1a554 <processing_data+0x7c>)
   1a524:	6813      	ldr	r3, [r2, #0]
   1a526:	3301      	adds	r3, #1
   1a528:	6013      	str	r3, [r2, #0]
   1a52a:	e7e9      	b.n	1a500 <processing_data+0x28>
	net_stats.ipv6.sent++;
}

static inline void net_stats_update_ipv6_recv(void)
{
	net_stats.ipv6.recv++;
   1a52c:	4a09      	ldr	r2, [pc, #36]	; (1a554 <processing_data+0x7c>)
   1a52e:	6a53      	ldr	r3, [r2, #36]	; 0x24
   1a530:	3301      	adds	r3, #1
   1a532:	6253      	str	r3, [r2, #36]	; 0x24
	pkt->family = family;
   1a534:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a538:	220a      	movs	r2, #10
   1a53a:	f362 03c6 	bfi	r3, r2, #3, #4
   1a53e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		return net_ipv6_process_pkt(pkt);
   1a542:	4620      	mov	r0, r4
   1a544:	f006 fd1e 	bl	20f84 <net_ipv6_process_pkt>
   1a548:	e7da      	b.n	1a500 <processing_data+0x28>
		NET_DBG("Consumed pkt %p", pkt);
		break;
	case NET_DROP:
	default:
		NET_DBG("Dropping pkt %p", pkt);
		net_pkt_unref(pkt);
   1a54a:	4620      	mov	r0, r4
   1a54c:	f002 fc75 	bl	1ce3a <net_pkt_unref>
		break;
	}
}
   1a550:	e7d7      	b.n	1a502 <processing_data+0x2a>
   1a552:	bf00      	nop
   1a554:	20002ab8 	.word	0x20002ab8

0001a558 <net_rx_thread>:

static void net_rx_thread(void)
{
   1a558:	b510      	push	{r4, lr}
	 * can only be started when RX side is ready to receive packets.
	 * We synchronize the startup of the device so that both RX and TX
	 * are only started fully when both are ready to receive or send
	 * data.
	 */
	net_if_init(&startup_sync);
   1a55a:	4c16      	ldr	r4, [pc, #88]	; (1a5b4 <net_rx_thread+0x5c>)
   1a55c:	4620      	mov	r0, r4
   1a55e:	f001 faaf 	bl	1bac0 <net_if_init>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1a562:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a566:	4620      	mov	r0, r4
   1a568:	f00e fa56 	bl	28a18 <_impl_k_sem_take>

	k_sem_take(&startup_sync, K_FOREVER);

	/* This will take the interface up and start everything. */
	net_if_post_init();
   1a56c:	f001 faee 	bl	1bb4c <net_if_post_init>
   1a570:	e010      	b.n	1a594 <net_rx_thread+0x3c>
	return net_buf_frags_len(pkt->frags);
   1a572:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1a574:	2200      	movs	r2, #0
   1a576:	e002      	b.n	1a57e <net_rx_thread+0x26>
		bytes += buf->len;
   1a578:	8999      	ldrh	r1, [r3, #12]
   1a57a:	440a      	add	r2, r1
		buf = buf->frags;
   1a57c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1a57e:	2b00      	cmp	r3, #0
   1a580:	d1fa      	bne.n	1a578 <net_rx_thread+0x20>
	net_stats.bytes.received += bytes;
   1a582:	490d      	ldr	r1, [pc, #52]	; (1a5b8 <net_rx_thread+0x60>)
   1a584:	688b      	ldr	r3, [r1, #8]
   1a586:	441a      	add	r2, r3
   1a588:	608a      	str	r2, [r1, #8]
#endif
		NET_DBG("Received pkt %p len %zu", pkt, pkt_len);

		net_stats_update_bytes_recv(pkt_len);

		processing_data(pkt, false);
   1a58a:	2100      	movs	r1, #0
   1a58c:	f7ff ffa4 	bl	1a4d8 <processing_data>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1a590:	f00e f8d6 	bl	28740 <_impl_k_yield>
		pkt = k_fifo_get(&rx_queue, K_FOREVER);
   1a594:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1a598:	4808      	ldr	r0, [pc, #32]	; (1a5bc <net_rx_thread+0x64>)
   1a59a:	f00d febb 	bl	28314 <k_queue_get>
	for (i = 0; i < size; i++) {
   1a59e:	2300      	movs	r3, #0
   1a5a0:	f240 52db 	movw	r2, #1499	; 0x5db
   1a5a4:	4293      	cmp	r3, r2
   1a5a6:	d8e4      	bhi.n	1a572 <net_rx_thread+0x1a>
		if ((unsigned char)stack[i] == 0xaa) {
   1a5a8:	4a05      	ldr	r2, [pc, #20]	; (1a5c0 <net_rx_thread+0x68>)
   1a5aa:	5cd2      	ldrb	r2, [r2, r3]
   1a5ac:	2aaa      	cmp	r2, #170	; 0xaa
   1a5ae:	d1e0      	bne.n	1a572 <net_rx_thread+0x1a>
	for (i = 0; i < size; i++) {
   1a5b0:	3301      	adds	r3, #1
   1a5b2:	e7f5      	b.n	1a5a0 <net_rx_thread+0x48>
   1a5b4:	2000ccc0 	.word	0x2000ccc0
   1a5b8:	20002ab8 	.word	0x20002ab8
   1a5bc:	20001b6c 	.word	0x20001b6c
   1a5c0:	20004798 	.word	0x20004798

0001a5c4 <init_rx_queue>:
		k_yield();
	}
}

static void init_rx_queue(void)
{
   1a5c4:	b500      	push	{lr}
   1a5c6:	b087      	sub	sp, #28
	k_fifo_init(&rx_queue);
   1a5c8:	480b      	ldr	r0, [pc, #44]	; (1a5f8 <init_rx_queue+0x34>)
   1a5ca:	f00d fe48 	bl	2825e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1a5ce:	2300      	movs	r3, #0
   1a5d0:	9305      	str	r3, [sp, #20]
   1a5d2:	2201      	movs	r2, #1
   1a5d4:	9204      	str	r2, [sp, #16]
   1a5d6:	f06f 0207 	mvn.w	r2, #7
   1a5da:	9203      	str	r2, [sp, #12]
   1a5dc:	9302      	str	r3, [sp, #8]
   1a5de:	9301      	str	r3, [sp, #4]
   1a5e0:	9300      	str	r3, [sp, #0]
   1a5e2:	4b06      	ldr	r3, [pc, #24]	; (1a5fc <init_rx_queue+0x38>)
   1a5e4:	f240 52dc 	movw	r2, #1500	; 0x5dc
   1a5e8:	4905      	ldr	r1, [pc, #20]	; (1a600 <init_rx_queue+0x3c>)
   1a5ea:	4806      	ldr	r0, [pc, #24]	; (1a604 <init_rx_queue+0x40>)
   1a5ec:	f00e fc80 	bl	28ef0 <_impl_k_thread_create>
	rx_tid = k_thread_create(&rx_thread_data, rx_stack,
				 K_THREAD_STACK_SIZEOF(rx_stack),
				 (k_thread_entry_t)net_rx_thread,
				 NULL, NULL, NULL, K_PRIO_COOP(8),
				 K_ESSENTIAL, K_NO_WAIT);
}
   1a5f0:	b007      	add	sp, #28
   1a5f2:	f85d fb04 	ldr.w	pc, [sp], #4
   1a5f6:	bf00      	nop
   1a5f8:	20001b6c 	.word	0x20001b6c
   1a5fc:	0001a559 	.word	0x0001a559
   1a600:	20004798 	.word	0x20004798
   1a604:	20001b7c 	.word	0x20001b7c

0001a608 <net_init>:

	NET_DBG("Network L2 init done");
}

static int net_init(struct device *unused)
{
   1a608:	b508      	push	{r3, lr}

	net_hostname_init();

	NET_DBG("Priority %d", CONFIG_NET_INIT_PRIO);

	net_pkt_init();
   1a60a:	f002 ffb2 	bl	1d572 <net_pkt_init>

	net_context_init();
   1a60e:	f002 faf1 	bl	1cbf4 <net_context_init>
	net_icmpv6_init();
   1a612:	f004 fa0b 	bl	1ea2c <net_icmpv6_init>
	net_ipv6_init();
   1a616:	f006 fe89 	bl	2132c <net_ipv6_init>
	net_conn_init();
   1a61a:	f00a fb55 	bl	24cc8 <net_conn_init>
	net_udp_init();
   1a61e:	f008 fa6b 	bl	22af8 <net_udp_init>
	net_tcp_init();
   1a622:	f008 fc4f 	bl	22ec4 <net_tcp_init>
	net_route_init();
   1a626:	f007 ffca 	bl	225be <net_route_init>

	l2_init();
	l3_init();

	net_mgmt_event_init();
   1a62a:	f008 f8b3 	bl	22794 <net_mgmt_event_init>

	init_rx_queue();
   1a62e:	f7ff ffc9 	bl	1a5c4 <init_rx_queue>
		return status;
	}
#endif

	return status;
}
   1a632:	2000      	movs	r0, #0
   1a634:	bd08      	pop	{r3, pc}
	...

0001a638 <net_send_data>:
	if (!pkt || !pkt->frags) {
   1a638:	2800      	cmp	r0, #0
   1a63a:	f000 80bc 	beq.w	1a7b6 <net_send_data+0x17e>
{
   1a63e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a640:	b091      	sub	sp, #68	; 0x44
   1a642:	4604      	mov	r4, r0
	if (!pkt || !pkt->frags) {
   1a644:	6883      	ldr	r3, [r0, #8]
   1a646:	2b00      	cmp	r3, #0
   1a648:	f000 80b8 	beq.w	1a7bc <net_send_data+0x184>
	return pkt->iface;
   1a64c:	6943      	ldr	r3, [r0, #20]
	if (!net_pkt_iface(pkt)) {
   1a64e:	2b00      	cmp	r3, #0
   1a650:	f000 80b7 	beq.w	1a7c2 <net_send_data+0x18a>
	return pkt->family;
   1a654:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1a658:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1a65c:	2b0a      	cmp	r3, #10
   1a65e:	d103      	bne.n	1a668 <net_send_data+0x30>
	net_stats.ipv6.sent++;
   1a660:	4a59      	ldr	r2, [pc, #356]	; (1a7c8 <net_send_data+0x190>)
   1a662:	6a93      	ldr	r3, [r2, #40]	; 0x28
   1a664:	3301      	adds	r3, #1
   1a666:	6293      	str	r3, [r2, #40]	; 0x28
   1a668:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1a66c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1a670:	2b0a      	cmp	r3, #10
   1a672:	d00b      	beq.n	1a68c <net_send_data+0x54>
	return 0;
   1a674:	2000      	movs	r0, #0
	if (status < 0) {
   1a676:	2800      	cmp	r0, #0
   1a678:	db06      	blt.n	1a688 <net_send_data+0x50>
	} else if (status > 0) {
   1a67a:	f340 8091 	ble.w	1a7a0 <net_send_data+0x168>
		processing_data(pkt, true);
   1a67e:	2101      	movs	r1, #1
   1a680:	4620      	mov	r0, r4
   1a682:	f7ff ff29 	bl	1a4d8 <processing_data>
		return 0;
   1a686:	2000      	movs	r0, #0
}
   1a688:	b011      	add	sp, #68	; 0x44
   1a68a:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return pkt->frags->data;
   1a68c:	68a3      	ldr	r3, [r4, #8]
   1a68e:	689d      	ldr	r5, [r3, #8]
		if (net_ipv6_addr_cmp(&NET_IPV6_HDR(pkt)->dst,
   1a690:	3518      	adds	r5, #24
   1a692:	f004 fd93 	bl	1f1bc <net_ipv6_unspecified_address>
 *  @return True if the addresses are the same, false otherwise.
 */
static inline bool net_ipv6_addr_cmp(const struct in6_addr *addr1,
				     const struct in6_addr *addr2)
{
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a696:	2210      	movs	r2, #16
   1a698:	4601      	mov	r1, r0
   1a69a:	4628      	mov	r0, r5
   1a69c:	f00f f8e8 	bl	29870 <memcmp>
   1a6a0:	2800      	cmp	r0, #0
   1a6a2:	d07a      	beq.n	1a79a <net_send_data+0x162>
   1a6a4:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a6a6:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a6a8:	f850 3f18 	ldr.w	r3, [r0, #24]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a6ac:	b9ab      	cbnz	r3, 1a6da <net_send_data+0xa2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a6ae:	6843      	ldr	r3, [r0, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a6b0:	2b00      	cmp	r3, #0
   1a6b2:	d141      	bne.n	1a738 <net_send_data+0x100>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a6b4:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a6b6:	2b00      	cmp	r3, #0
   1a6b8:	d140      	bne.n	1a73c <net_send_data+0x104>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a6ba:	68c2      	ldr	r2, [r0, #12]
   1a6bc:	0a13      	lsrs	r3, r2, #8
   1a6be:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a6c2:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a6c6:	0211      	lsls	r1, r2, #8
   1a6c8:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a6cc:	430b      	orrs	r3, r1
   1a6ce:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a6d2:	2b01      	cmp	r3, #1
   1a6d4:	d034      	beq.n	1a740 <net_send_data+0x108>
   1a6d6:	2300      	movs	r3, #0
   1a6d8:	e000      	b.n	1a6dc <net_send_data+0xa4>
   1a6da:	2300      	movs	r3, #0
   1a6dc:	b393      	cbz	r3, 1a744 <net_send_data+0x10c>
   1a6de:	68a3      	ldr	r3, [r4, #8]
   1a6e0:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&addr, &NET_IPV6_HDR(pkt)->src);
   1a6e4:	ae0c      	add	r6, sp, #48	; 0x30
   1a6e6:	4675      	mov	r5, lr
   1a6e8:	f855 0f08 	ldr.w	r0, [r5, #8]!
   1a6ec:	6869      	ldr	r1, [r5, #4]
   1a6ee:	68aa      	ldr	r2, [r5, #8]
   1a6f0:	68eb      	ldr	r3, [r5, #12]
   1a6f2:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1a6f4:	ab10      	add	r3, sp, #64	; 0x40
   1a6f6:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1a6fa:	e88d 000f 	stmia.w	sp, {r0, r1, r2, r3}
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1a6fe:	af08      	add	r7, sp, #32
   1a700:	4673      	mov	r3, lr
   1a702:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1a706:	6859      	ldr	r1, [r3, #4]
   1a708:	689a      	ldr	r2, [r3, #8]
   1a70a:	68db      	ldr	r3, [r3, #12]
   1a70c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1a70e:	af08      	add	r7, sp, #32
   1a710:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1a712:	f8ce 0008 	str.w	r0, [lr, #8]
   1a716:	6069      	str	r1, [r5, #4]
   1a718:	60aa      	str	r2, [r5, #8]
   1a71a:	60eb      	str	r3, [r5, #12]
   1a71c:	68a3      	ldr	r3, [r4, #8]
   1a71e:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1a720:	ad04      	add	r5, sp, #16
   1a722:	e89d 000f 	ldmia.w	sp, {r0, r1, r2, r3}
   1a726:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1a72a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1a72c:	61b8      	str	r0, [r7, #24]
   1a72e:	61f9      	str	r1, [r7, #28]
   1a730:	623a      	str	r2, [r7, #32]
   1a732:	627b      	str	r3, [r7, #36]	; 0x24
			return 1;
   1a734:	2001      	movs	r0, #1
   1a736:	e79e      	b.n	1a676 <net_send_data+0x3e>
   1a738:	2300      	movs	r3, #0
   1a73a:	e7cf      	b.n	1a6dc <net_send_data+0xa4>
   1a73c:	2300      	movs	r3, #0
   1a73e:	e7cd      	b.n	1a6dc <net_send_data+0xa4>
   1a740:	2301      	movs	r3, #1
   1a742:	e7cb      	b.n	1a6dc <net_send_data+0xa4>
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   1a744:	2100      	movs	r1, #0
   1a746:	f000 f9c5 	bl	1aad4 <net_if_ipv6_addr_lookup>
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->dst) ||
   1a74a:	2800      	cmp	r0, #0
   1a74c:	d1c7      	bne.n	1a6de <net_send_data+0xa6>
   1a74e:	68a3      	ldr	r3, [r4, #8]
		if (net_is_ipv6_addr_loopback(&NET_IPV6_HDR(pkt)->src)) {
   1a750:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a752:	f853 2f08 	ldr.w	r2, [r3, #8]!
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a756:	b99a      	cbnz	r2, 1a780 <net_send_data+0x148>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a758:	685a      	ldr	r2, [r3, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1a75a:	b9aa      	cbnz	r2, 1a788 <net_send_data+0x150>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a75c:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1a75e:	b9aa      	cbnz	r2, 1a78c <net_send_data+0x154>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   1a760:	68da      	ldr	r2, [r3, #12]
   1a762:	0a13      	lsrs	r3, r2, #8
   1a764:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   1a768:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   1a76c:	0211      	lsls	r1, r2, #8
   1a76e:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   1a772:	430b      	orrs	r3, r1
   1a774:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1a778:	2b01      	cmp	r3, #1
   1a77a:	d009      	beq.n	1a790 <net_send_data+0x158>
   1a77c:	2300      	movs	r3, #0
   1a77e:	e000      	b.n	1a782 <net_send_data+0x14a>
   1a780:	2300      	movs	r3, #0
   1a782:	b93b      	cbnz	r3, 1a794 <net_send_data+0x15c>
	return 0;
   1a784:	2000      	movs	r0, #0
   1a786:	e776      	b.n	1a676 <net_send_data+0x3e>
   1a788:	2300      	movs	r3, #0
   1a78a:	e7fa      	b.n	1a782 <net_send_data+0x14a>
   1a78c:	2300      	movs	r3, #0
   1a78e:	e7f8      	b.n	1a782 <net_send_data+0x14a>
   1a790:	2301      	movs	r3, #1
   1a792:	e7f6      	b.n	1a782 <net_send_data+0x14a>
			return -EADDRNOTAVAIL;
   1a794:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a798:	e76d      	b.n	1a676 <net_send_data+0x3e>
			return -EADDRNOTAVAIL;
   1a79a:	f06f 007c 	mvn.w	r0, #124	; 0x7c
   1a79e:	e76a      	b.n	1a676 <net_send_data+0x3e>
	if (net_if_send_data(net_pkt_iface(pkt), pkt) == NET_DROP) {
   1a7a0:	4621      	mov	r1, r4
   1a7a2:	6960      	ldr	r0, [r4, #20]
   1a7a4:	f000 ffe0 	bl	1b768 <net_if_send_data>
   1a7a8:	2802      	cmp	r0, #2
   1a7aa:	d001      	beq.n	1a7b0 <net_send_data+0x178>
	return 0;
   1a7ac:	2000      	movs	r0, #0
   1a7ae:	e76b      	b.n	1a688 <net_send_data+0x50>
		return -EIO;
   1a7b0:	f06f 0004 	mvn.w	r0, #4
   1a7b4:	e768      	b.n	1a688 <net_send_data+0x50>
		return -ENODATA;
   1a7b6:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a7ba:	4770      	bx	lr
   1a7bc:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a7c0:	e762      	b.n	1a688 <net_send_data+0x50>
		return -EINVAL;
   1a7c2:	f06f 0015 	mvn.w	r0, #21
   1a7c6:	e75f      	b.n	1a688 <net_send_data+0x50>
   1a7c8:	20002ab8 	.word	0x20002ab8

0001a7cc <net_recv_data>:
{
   1a7cc:	b508      	push	{r3, lr}
	if (!pkt->frags) {
   1a7ce:	688b      	ldr	r3, [r1, #8]
   1a7d0:	b19b      	cbz	r3, 1a7fa <net_recv_data+0x2e>
   1a7d2:	f3bf 8f5b 	dmb	ish
   1a7d6:	68c3      	ldr	r3, [r0, #12]
   1a7d8:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1a7dc:	f013 0f01 	tst.w	r3, #1
   1a7e0:	d00e      	beq.n	1a800 <net_recv_data+0x34>
	pkt->iface = iface;
   1a7e2:	6148      	str	r0, [r1, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1a7e4:	7d43      	ldrb	r3, [r0, #21]
   1a7e6:	f881 3025 	strb.w	r3, [r1, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1a7ea:	7d43      	ldrb	r3, [r0, #21]
   1a7ec:	f881 302d 	strb.w	r3, [r1, #45]	; 0x2d
	k_fifo_put(&rx_queue, pkt);
   1a7f0:	4805      	ldr	r0, [pc, #20]	; (1a808 <net_recv_data+0x3c>)
   1a7f2:	f00d fd67 	bl	282c4 <k_queue_append>
	return 0;
   1a7f6:	2000      	movs	r0, #0
   1a7f8:	bd08      	pop	{r3, pc}
		return -ENODATA;
   1a7fa:	f06f 003c 	mvn.w	r0, #60	; 0x3c
   1a7fe:	bd08      	pop	{r3, pc}
		return -ENETDOWN;
   1a800:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1a804:	bd08      	pop	{r3, pc}
   1a806:	bf00      	nop
   1a808:	20001b6c 	.word	0x20001b6c

0001a80c <ipv6_addr_expired>:
						  lifetime);

	NET_DBG("IPv6 address %s is deprecated",
		net_sprint_ipv6_addr(&ifaddr->address.in6_addr));

	ifaddr->addr_state = NET_ADDR_DEPRECATED;
   1a80c:	2302      	movs	r3, #2
   1a80e:	f880 3051 	strb.w	r3, [r0, #81]	; 0x51
   1a812:	4770      	bx	lr

0001a814 <prefix_lf_timeout>:
		CONTAINER_OF(work, struct net_if_ipv6_prefix, lifetime);

	NET_DBG("Prefix %s/%d expired",
		net_sprint_ipv6_addr(&prefix->prefix), prefix->len);

	prefix->is_used = false;
   1a814:	2300      	movs	r3, #0
   1a816:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
   1a81a:	4770      	bx	lr

0001a81c <ipv6_router_expired>:
						    lifetime);

	NET_DBG("IPv6 router %s is expired",
		net_sprint_ipv6_addr(&router->address.in6_addr));

	router->is_used = false;
   1a81c:	2300      	movs	r3, #0
   1a81e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1a822:	4770      	bx	lr

0001a824 <ipv6_addr_find>:
{
   1a824:	b570      	push	{r4, r5, r6, lr}
   1a826:	4605      	mov	r5, r0
   1a828:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1a82a:	2400      	movs	r4, #0
   1a82c:	e000      	b.n	1a830 <ipv6_addr_find+0xc>
   1a82e:	3401      	adds	r4, #1
   1a830:	2c02      	cmp	r4, #2
   1a832:	dc19      	bgt.n	1a868 <ipv6_addr_find+0x44>
		if (!iface->ipv6.unicast[i].is_used) {
   1a834:	236c      	movs	r3, #108	; 0x6c
   1a836:	fb03 5304 	mla	r3, r3, r4, r5
   1a83a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a83e:	2b00      	cmp	r3, #0
   1a840:	d0f5      	beq.n	1a82e <ipv6_addr_find+0xa>
				&iface->ipv6.unicast[i].address.in6_addr)) {
   1a842:	216c      	movs	r1, #108	; 0x6c
   1a844:	fb01 f104 	mul.w	r1, r1, r4
   1a848:	3120      	adds	r1, #32
   1a84a:	4429      	add	r1, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1a84c:	2210      	movs	r2, #16
   1a84e:	4411      	add	r1, r2
   1a850:	4630      	mov	r0, r6
   1a852:	f00f f80d 	bl	29870 <memcmp>
		if (net_ipv6_addr_cmp(addr,
   1a856:	2800      	cmp	r0, #0
   1a858:	d1e9      	bne.n	1a82e <ipv6_addr_find+0xa>
			return &iface->ipv6.unicast[i];
   1a85a:	206c      	movs	r0, #108	; 0x6c
   1a85c:	fb00 f004 	mul.w	r0, r0, r4
   1a860:	3020      	adds	r0, #32
   1a862:	4428      	add	r0, r5
   1a864:	300c      	adds	r0, #12
   1a866:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1a868:	2000      	movs	r0, #0
}
   1a86a:	bd70      	pop	{r4, r5, r6, pc}

0001a86c <ipv6_prefix_find>:
{
   1a86c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1a86e:	4605      	mov	r5, r0
   1a870:	460e      	mov	r6, r1
   1a872:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1a874:	2400      	movs	r4, #0
   1a876:	e000      	b.n	1a87a <ipv6_prefix_find+0xe>
   1a878:	3401      	adds	r4, #1
   1a87a:	2c01      	cmp	r4, #1
   1a87c:	dc21      	bgt.n	1a8c2 <ipv6_prefix_find+0x56>
		if (!iface->ipv6.unicast[i].is_used) {
   1a87e:	236c      	movs	r3, #108	; 0x6c
   1a880:	fb03 5304 	mla	r3, r3, r4, r5
   1a884:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1a888:	2b00      	cmp	r3, #0
   1a88a:	d0f5      	beq.n	1a878 <ipv6_prefix_find+0xc>
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a88c:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   1a890:	0099      	lsls	r1, r3, #2
   1a892:	f501 7100 	add.w	r1, r1, #512	; 0x200
   1a896:	4429      	add	r1, r5
   1a898:	2210      	movs	r2, #16
   1a89a:	4411      	add	r1, r2
   1a89c:	4630      	mov	r0, r6
   1a89e:	f00e ffe7 	bl	29870 <memcmp>
   1a8a2:	2800      	cmp	r0, #0
   1a8a4:	d1e8      	bne.n	1a878 <ipv6_prefix_find+0xc>
		    prefix_len == iface->ipv6.prefix[i].len) {
   1a8a6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1a8aa:	0093      	lsls	r3, r2, #2
   1a8ac:	461a      	mov	r2, r3
   1a8ae:	442b      	add	r3, r5
   1a8b0:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (net_ipv6_addr_cmp(prefix, &iface->ipv6.prefix[i].prefix) &&
   1a8b4:	42bb      	cmp	r3, r7
   1a8b6:	d1df      	bne.n	1a878 <ipv6_prefix_find+0xc>
			return &iface->ipv6.prefix[i];
   1a8b8:	f502 70ec 	add.w	r0, r2, #472	; 0x1d8
   1a8bc:	4428      	add	r0, r5
   1a8be:	3010      	adds	r0, #16
   1a8c0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return NULL;
   1a8c2:	2000      	movs	r0, #0
}
   1a8c4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0001a8c8 <net_if_ipv6_start_dad>:
	ifaddr->addr_state = NET_ADDR_TENTATIVE;
   1a8c8:	2300      	movs	r3, #0
   1a8ca:	f881 3065 	strb.w	r3, [r1, #101]	; 0x65
   1a8ce:	f3bf 8f5b 	dmb	ish
   1a8d2:	68c3      	ldr	r3, [r0, #12]
   1a8d4:	f3bf 8f5b 	dmb	ish
	if (net_if_is_up(iface)) {
   1a8d8:	f013 0f01 	tst.w	r3, #1
   1a8dc:	d100      	bne.n	1a8e0 <net_if_ipv6_start_dad+0x18>
   1a8de:	4770      	bx	lr
{
   1a8e0:	b510      	push	{r4, lr}
   1a8e2:	460c      	mov	r4, r1
		ifaddr->dad_count = 1;
   1a8e4:	2301      	movs	r3, #1
   1a8e6:	f881 3066 	strb.w	r3, [r1, #102]	; 0x66
		if (!net_ipv6_start_dad(iface, ifaddr)) {
   1a8ea:	f006 f969 	bl	20bc0 <net_ipv6_start_dad>
   1a8ee:	b100      	cbz	r0, 1a8f2 <net_if_ipv6_start_dad+0x2a>
   1a8f0:	bd10      	pop	{r4, pc}
   1a8f2:	2264      	movs	r2, #100	; 0x64
   1a8f4:	f104 013c 	add.w	r1, r4, #60	; 0x3c
   1a8f8:	4801      	ldr	r0, [pc, #4]	; (1a900 <net_if_ipv6_start_dad+0x38>)
   1a8fa:	f00e fec3 	bl	29684 <k_delayed_work_submit_to_queue>
}
   1a8fe:	e7f7      	b.n	1a8f0 <net_if_ipv6_start_dad+0x28>
   1a900:	20002bd8 	.word	0x20002bd8

0001a904 <net_if_ipv6_prefix_init>:
{
   1a904:	b5f0      	push	{r4, r5, r6, r7, lr}
   1a906:	b085      	sub	sp, #20
   1a908:	4605      	mov	r5, r0
   1a90a:	460e      	mov	r6, r1
   1a90c:	461f      	mov	r7, r3
	prefix->is_used = true;
   1a90e:	2301      	movs	r3, #1
   1a910:	f880 303a 	strb.w	r3, [r0, #58]	; 0x3a
	prefix->len = len;
   1a914:	f880 2038 	strb.w	r2, [r0, #56]	; 0x38
	net_ipaddr_copy(&prefix->prefix, addr);
   1a918:	466c      	mov	r4, sp
   1a91a:	6808      	ldr	r0, [r1, #0]
   1a91c:	6849      	ldr	r1, [r1, #4]
   1a91e:	68b2      	ldr	r2, [r6, #8]
   1a920:	68f3      	ldr	r3, [r6, #12]
   1a922:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1a924:	466c      	mov	r4, sp
   1a926:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1a928:	62a8      	str	r0, [r5, #40]	; 0x28
   1a92a:	62e9      	str	r1, [r5, #44]	; 0x2c
   1a92c:	632a      	str	r2, [r5, #48]	; 0x30
   1a92e:	636b      	str	r3, [r5, #52]	; 0x34
	k_delayed_work_init(&prefix->lifetime, prefix_lf_timeout);
   1a930:	4907      	ldr	r1, [pc, #28]	; (1a950 <net_if_ipv6_prefix_init+0x4c>)
   1a932:	4628      	mov	r0, r5
   1a934:	f00e fe2e 	bl	29594 <k_delayed_work_init>
	if (lifetime == NET_IPV6_ND_INFINITE_LIFETIME) {
   1a938:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   1a93c:	d004      	beq.n	1a948 <net_if_ipv6_prefix_init+0x44>
		prefix->is_infinite = false;
   1a93e:	2300      	movs	r3, #0
   1a940:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
}
   1a944:	b005      	add	sp, #20
   1a946:	bdf0      	pop	{r4, r5, r6, r7, pc}
		prefix->is_infinite = true;
   1a948:	2301      	movs	r3, #1
   1a94a:	f885 3039 	strb.w	r3, [r5, #57]	; 0x39
   1a94e:	e7f9      	b.n	1a944 <net_if_ipv6_prefix_init+0x40>
   1a950:	0001a815 	.word	0x0001a815

0001a954 <join_mcast_allnodes>:
{
   1a954:	b500      	push	{lr}
   1a956:	b085      	sub	sp, #20
					u16_t addr0, u16_t addr1,
					u16_t addr2, u16_t addr3,
					u16_t addr4, u16_t addr5,
					u16_t addr6, u16_t addr7)
{
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1a958:	f240 23ff 	movw	r3, #767	; 0x2ff
   1a95c:	f8ad 3000 	strh.w	r3, [sp]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1a960:	2300      	movs	r3, #0
   1a962:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1a966:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1a96a:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1a96e:	f8ad 3008 	strh.w	r3, [sp, #8]
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1a972:	f8ad 300a 	strh.w	r3, [sp, #10]
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1a976:	f8ad 300c 	strh.w	r3, [sp, #12]
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1a97a:	f44f 7380 	mov.w	r3, #256	; 0x100
   1a97e:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a982:	4669      	mov	r1, sp
   1a984:	f006 faa4 	bl	20ed0 <net_ipv6_mld_join>
}
   1a988:	b005      	add	sp, #20
   1a98a:	f85d fb04 	ldr.w	pc, [sp], #4

0001a98e <join_mcast_solicit_node>:
{
   1a98e:	b500      	push	{lr}
   1a990:	b085      	sub	sp, #20
	dst->s6_addr[0]   = 0xFF;
   1a992:	22ff      	movs	r2, #255	; 0xff
   1a994:	f88d 2000 	strb.w	r2, [sp]
	dst->s6_addr[1]   = 0x02;
   1a998:	2302      	movs	r3, #2
   1a99a:	f88d 3001 	strb.w	r3, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1a99e:	2300      	movs	r3, #0
   1a9a0:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1a9a4:	f8ad 3004 	strh.w	r3, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1a9a8:	f8ad 3006 	strh.w	r3, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1a9ac:	f8ad 3008 	strh.w	r3, [sp, #8]
	dst->s6_addr[10]  = 0;
   1a9b0:	f88d 300a 	strb.w	r3, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1a9b4:	2301      	movs	r3, #1
   1a9b6:	f88d 300b 	strb.w	r3, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1a9ba:	f88d 200c 	strb.w	r2, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1a9be:	7b4b      	ldrb	r3, [r1, #13]
   1a9c0:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1a9c4:	89cb      	ldrh	r3, [r1, #14]
   1a9c6:	f8ad 300e 	strh.w	r3, [sp, #14]
	ret = net_ipv6_mld_join(iface, &addr);
   1a9ca:	4669      	mov	r1, sp
   1a9cc:	f006 fa80 	bl	20ed0 <net_ipv6_mld_join>
}
   1a9d0:	b005      	add	sp, #20
   1a9d2:	f85d fb04 	ldr.w	pc, [sp], #4

0001a9d6 <leave_mcast_all>:
{
   1a9d6:	b538      	push	{r3, r4, r5, lr}
   1a9d8:	4605      	mov	r5, r0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1a9da:	2400      	movs	r4, #0
   1a9dc:	e000      	b.n	1a9e0 <leave_mcast_all+0xa>
   1a9de:	3401      	adds	r4, #1
   1a9e0:	2c04      	cmp	r4, #4
   1a9e2:	dc1a      	bgt.n	1aa1a <leave_mcast_all+0x44>
		if (!iface->ipv6.mcast[i].is_used ||
   1a9e4:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a9e8:	00d3      	lsls	r3, r2, #3
   1a9ea:	442b      	add	r3, r5
   1a9ec:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1a9f0:	f013 0f01 	tst.w	r3, #1
   1a9f4:	d0f3      	beq.n	1a9de <leave_mcast_all+0x8>
		    !iface->ipv6.mcast[i].is_joined) {
   1a9f6:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1a9fa:	00d3      	lsls	r3, r2, #3
   1a9fc:	461a      	mov	r2, r3
   1a9fe:	442b      	add	r3, r5
   1aa00:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1aa04:	f013 0f02 	tst.w	r3, #2
   1aa08:	d0e9      	beq.n	1a9de <leave_mcast_all+0x8>
				   &iface->ipv6.mcast[i].address.in6_addr);
   1aa0a:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1aa0e:	4429      	add	r1, r5
		net_ipv6_mld_leave(iface,
   1aa10:	3118      	adds	r1, #24
   1aa12:	4628      	mov	r0, r5
   1aa14:	f006 fa96 	bl	20f44 <net_ipv6_mld_leave>
   1aa18:	e7e1      	b.n	1a9de <leave_mcast_all+0x8>
}
   1aa1a:	bd38      	pop	{r3, r4, r5, pc}

0001aa1c <net_if_prepare_events>:
{
   1aa1c:	b570      	push	{r4, r5, r6, lr}
	int ev_count = 0;
   1aa1e:	2400      	movs	r4, #0
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1aa20:	4d0a      	ldr	r5, [pc, #40]	; (1aa4c <net_if_prepare_events+0x30>)
   1aa22:	e00d      	b.n	1aa40 <net_if_prepare_events+0x24>
		k_poll_event_init(&__net_if_event_start[ev_count],
   1aa24:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   1aa28:	0098      	lsls	r0, r3, #2
   1aa2a:	f105 0318 	add.w	r3, r5, #24
   1aa2e:	2200      	movs	r2, #0
   1aa30:	2104      	movs	r1, #4
   1aa32:	4e07      	ldr	r6, [pc, #28]	; (1aa50 <net_if_prepare_events+0x34>)
   1aa34:	4430      	add	r0, r6
   1aa36:	f00d f927 	bl	27c88 <k_poll_event_init>
		ev_count++;
   1aa3a:	3401      	adds	r4, #1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1aa3c:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1aa40:	4b04      	ldr	r3, [pc, #16]	; (1aa54 <net_if_prepare_events+0x38>)
   1aa42:	429d      	cmp	r5, r3
   1aa44:	d1ee      	bne.n	1aa24 <net_if_prepare_events+0x8>
}
   1aa46:	4620      	mov	r0, r4
   1aa48:	bd70      	pop	{r4, r5, r6, pc}
   1aa4a:	bf00      	nop
   1aa4c:	2000ce00 	.word	0x2000ce00
   1aa50:	2000d0a0 	.word	0x2000d0a0
   1aa54:	2000d0a0 	.word	0x2000d0a0

0001aa58 <net_if_lookup_by_dev>:
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1aa58:	4b06      	ldr	r3, [pc, #24]	; (1aa74 <net_if_lookup_by_dev+0x1c>)
   1aa5a:	4a07      	ldr	r2, [pc, #28]	; (1aa78 <net_if_lookup_by_dev+0x20>)
   1aa5c:	4293      	cmp	r3, r2
   1aa5e:	d005      	beq.n	1aa6c <net_if_lookup_by_dev+0x14>
		if (iface->dev == dev) {
   1aa60:	681a      	ldr	r2, [r3, #0]
   1aa62:	4282      	cmp	r2, r0
   1aa64:	d003      	beq.n	1aa6e <net_if_lookup_by_dev+0x16>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1aa66:	f503 7328 	add.w	r3, r3, #672	; 0x2a0
   1aa6a:	e7f6      	b.n	1aa5a <net_if_lookup_by_dev+0x2>
	return NULL;
   1aa6c:	2300      	movs	r3, #0
}
   1aa6e:	4618      	mov	r0, r3
   1aa70:	4770      	bx	lr
   1aa72:	bf00      	nop
   1aa74:	2000ce00 	.word	0x2000ce00
   1aa78:	2000d0a0 	.word	0x2000d0a0

0001aa7c <net_if_get_default>:
	if (__net_if_start == __net_if_end) {
   1aa7c:	4b03      	ldr	r3, [pc, #12]	; (1aa8c <net_if_get_default+0x10>)
   1aa7e:	4a04      	ldr	r2, [pc, #16]	; (1aa90 <net_if_get_default+0x14>)
   1aa80:	429a      	cmp	r2, r3
   1aa82:	d001      	beq.n	1aa88 <net_if_get_default+0xc>
	return __net_if_start;
   1aa84:	4802      	ldr	r0, [pc, #8]	; (1aa90 <net_if_get_default+0x14>)
}
   1aa86:	4770      	bx	lr
		return NULL;
   1aa88:	2000      	movs	r0, #0
   1aa8a:	4770      	bx	lr
   1aa8c:	2000d0a0 	.word	0x2000d0a0
   1aa90:	2000ce00 	.word	0x2000ce00

0001aa94 <net_if_start_rs>:
{
   1aa94:	b510      	push	{r4, lr}
   1aa96:	4604      	mov	r4, r0
	if (!net_ipv6_start_rs(iface)) {
   1aa98:	f006 fa16 	bl	20ec8 <net_ipv6_start_rs>
   1aa9c:	b100      	cbz	r0, 1aaa0 <net_if_start_rs+0xc>
   1aa9e:	bd10      	pop	{r4, pc}
   1aaa0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1aaa4:	f504 7118 	add.w	r1, r4, #608	; 0x260
   1aaa8:	4801      	ldr	r0, [pc, #4]	; (1aab0 <net_if_start_rs+0x1c>)
   1aaaa:	f00e fdeb 	bl	29684 <k_delayed_work_submit_to_queue>
}
   1aaae:	e7f6      	b.n	1aa9e <net_if_start_rs+0xa>
   1aab0:	20002bd8 	.word	0x20002bd8

0001aab4 <rs_timeout>:
{
   1aab4:	b508      	push	{r3, lr}
	struct net_if *iface = CONTAINER_OF(work, struct net_if, ipv6.rs_timer);
   1aab6:	f5a0 7018 	sub.w	r0, r0, #608	; 0x260
	iface->ipv6.rs_count++;
   1aaba:	f890 3296 	ldrb.w	r3, [r0, #662]	; 0x296
   1aabe:	3301      	adds	r3, #1
   1aac0:	b2db      	uxtb	r3, r3
   1aac2:	f880 3296 	strb.w	r3, [r0, #662]	; 0x296
	if (iface->ipv6.rs_count < RS_COUNT) {
   1aac6:	2b02      	cmp	r3, #2
   1aac8:	d900      	bls.n	1aacc <rs_timeout+0x18>
   1aaca:	bd08      	pop	{r3, pc}
		net_if_start_rs(iface);
   1aacc:	f7ff ffe2 	bl	1aa94 <net_if_start_rs>
}
   1aad0:	e7fb      	b.n	1aaca <rs_timeout+0x16>
	...

0001aad4 <net_if_ipv6_addr_lookup>:
{
   1aad4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1aad8:	4607      	mov	r7, r0
   1aada:	4688      	mov	r8, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1aadc:	4d1b      	ldr	r5, [pc, #108]	; (1ab4c <net_if_ipv6_addr_lookup+0x78>)
   1aade:	e02d      	b.n	1ab3c <net_if_ipv6_addr_lookup+0x68>
			if (net_is_ipv6_prefix(addr->s6_addr,
   1aae0:	b9ee      	cbnz	r6, 1ab1e <net_if_ipv6_addr_lookup+0x4a>
		for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1aae2:	3401      	adds	r4, #1
   1aae4:	2c02      	cmp	r4, #2
   1aae6:	dc27      	bgt.n	1ab38 <net_if_ipv6_addr_lookup+0x64>
			if (!iface->ipv6.unicast[i].is_used ||
   1aae8:	236c      	movs	r3, #108	; 0x6c
   1aaea:	fb03 5304 	mla	r3, r3, r4, r5
   1aaee:	f893 6094 	ldrb.w	r6, [r3, #148]	; 0x94
   1aaf2:	2e00      	cmp	r6, #0
   1aaf4:	d0f5      	beq.n	1aae2 <net_if_ipv6_addr_lookup+0xe>
			    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1aaf6:	236c      	movs	r3, #108	; 0x6c
   1aaf8:	fb03 5304 	mla	r3, r3, r4, r5
   1aafc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
			if (!iface->ipv6.unicast[i].is_used ||
   1aafe:	2b0a      	cmp	r3, #10
   1ab00:	d1ef      	bne.n	1aae2 <net_if_ipv6_addr_lookup+0xe>
				iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1ab02:	216c      	movs	r1, #108	; 0x6c
   1ab04:	fb01 f104 	mul.w	r1, r1, r4
   1ab08:	3120      	adds	r1, #32
   1ab0a:	4429      	add	r1, r5
	if (memcmp(addr1, addr2, bytes)) {
   1ab0c:	2210      	movs	r2, #16
   1ab0e:	4411      	add	r1, r2
   1ab10:	4638      	mov	r0, r7
   1ab12:	f00e fead 	bl	29870 <memcmp>
   1ab16:	2800      	cmp	r0, #0
   1ab18:	d0e2      	beq.n	1aae0 <net_if_ipv6_addr_lookup+0xc>
		return false;
   1ab1a:	2600      	movs	r6, #0
   1ab1c:	e7e0      	b.n	1aae0 <net_if_ipv6_addr_lookup+0xc>
				if (ret) {
   1ab1e:	f1b8 0f00 	cmp.w	r8, #0
   1ab22:	d001      	beq.n	1ab28 <net_if_ipv6_addr_lookup+0x54>
					*ret = iface;
   1ab24:	f8c8 5000 	str.w	r5, [r8]
				return &iface->ipv6.unicast[i];
   1ab28:	206c      	movs	r0, #108	; 0x6c
   1ab2a:	fb00 f004 	mul.w	r0, r0, r4
   1ab2e:	3020      	adds	r0, #32
   1ab30:	4428      	add	r0, r5
   1ab32:	300c      	adds	r0, #12
   1ab34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1ab38:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1ab3c:	4b04      	ldr	r3, [pc, #16]	; (1ab50 <net_if_ipv6_addr_lookup+0x7c>)
   1ab3e:	429d      	cmp	r5, r3
   1ab40:	d001      	beq.n	1ab46 <net_if_ipv6_addr_lookup+0x72>
   1ab42:	2400      	movs	r4, #0
   1ab44:	e7ce      	b.n	1aae4 <net_if_ipv6_addr_lookup+0x10>
	return NULL;
   1ab46:	2000      	movs	r0, #0
}
   1ab48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ab4c:	2000ce00 	.word	0x2000ce00
   1ab50:	2000d0a0 	.word	0x2000d0a0

0001ab54 <dad_timeout>:
{
   1ab54:	b530      	push	{r4, r5, lr}
   1ab56:	b083      	sub	sp, #12
	struct net_if_addr *tmp, *ifaddr = CONTAINER_OF(work,
   1ab58:	f1a0 053c 	sub.w	r5, r0, #60	; 0x3c
	struct net_if *iface = NULL;
   1ab5c:	a902      	add	r1, sp, #8
   1ab5e:	2300      	movs	r3, #0
   1ab60:	f841 3d04 	str.w	r3, [r1, #-4]!
	ifaddr->addr_state = NET_ADDR_PREFERRED;
   1ab64:	2301      	movs	r3, #1
   1ab66:	f880 3029 	strb.w	r3, [r0, #41]	; 0x29
	tmp = net_if_ipv6_addr_lookup(&ifaddr->address.in6_addr, &iface);
   1ab6a:	f1a0 0438 	sub.w	r4, r0, #56	; 0x38
   1ab6e:	4620      	mov	r0, r4
   1ab70:	f7ff ffb0 	bl	1aad4 <net_if_ipv6_addr_lookup>
	if (tmp == ifaddr) {
   1ab74:	4285      	cmp	r5, r0
   1ab76:	d001      	beq.n	1ab7c <dad_timeout+0x28>
}
   1ab78:	b003      	add	sp, #12
   1ab7a:	bd30      	pop	{r4, r5, pc}
void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length);

static inline void net_mgmt_event_notify(u32_t mgmt_event, struct net_if *iface)
{
	net_mgmt_event_notify_with_info(mgmt_event, iface, NULL, 0);
   1ab7c:	2300      	movs	r3, #0
   1ab7e:	461a      	mov	r2, r3
   1ab80:	9901      	ldr	r1, [sp, #4]
   1ab82:	4807      	ldr	r0, [pc, #28]	; (1aba0 <dad_timeout+0x4c>)
   1ab84:	f007 fdcc 	bl	22720 <net_mgmt_event_notify_with_info>
		net_ipv6_nbr_rm(iface, &ifaddr->address.in6_addr);
   1ab88:	4621      	mov	r1, r4
   1ab8a:	9801      	ldr	r0, [sp, #4]
   1ab8c:	f004 faf6 	bl	1f17c <net_ipv6_nbr_rm>
		join_mcast_allnodes(iface);
   1ab90:	9801      	ldr	r0, [sp, #4]
   1ab92:	f7ff fedf 	bl	1a954 <join_mcast_allnodes>
		join_mcast_solicit_node(iface, &ifaddr->address.in6_addr);
   1ab96:	4621      	mov	r1, r4
   1ab98:	9801      	ldr	r0, [sp, #4]
   1ab9a:	f7ff fef8 	bl	1a98e <join_mcast_solicit_node>
}
   1ab9e:	e7eb      	b.n	1ab78 <dad_timeout+0x24>
   1aba0:	f060000d 	.word	0xf060000d

0001aba4 <net_if_ipv6_addr_update_lifetime>:
{
   1aba4:	b508      	push	{r3, lr}
   1aba6:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1abaa:	fb02 f201 	mul.w	r2, r2, r1
   1abae:	f100 0114 	add.w	r1, r0, #20
   1abb2:	4802      	ldr	r0, [pc, #8]	; (1abbc <net_if_ipv6_addr_update_lifetime+0x18>)
   1abb4:	f00e fd66 	bl	29684 <k_delayed_work_submit_to_queue>
   1abb8:	bd08      	pop	{r3, pc}
   1abba:	bf00      	nop
   1abbc:	20002bd8 	.word	0x20002bd8

0001abc0 <net_if_ipv6_addr_add>:
{
   1abc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1abc4:	b084      	sub	sp, #16
   1abc6:	4605      	mov	r5, r0
   1abc8:	460e      	mov	r6, r1
   1abca:	4690      	mov	r8, r2
   1abcc:	461f      	mov	r7, r3
	ifaddr = ipv6_addr_find(iface, addr);
   1abce:	f7ff fe29 	bl	1a824 <ipv6_addr_find>
	if (ifaddr) {
   1abd2:	4604      	mov	r4, r0
   1abd4:	b118      	cbz	r0, 1abde <net_if_ipv6_addr_add+0x1e>
}
   1abd6:	4620      	mov	r0, r4
   1abd8:	b004      	add	sp, #16
   1abda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1abde:	2300      	movs	r3, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1abe0:	2b02      	cmp	r3, #2
   1abe2:	dcf8      	bgt.n	1abd6 <net_if_ipv6_addr_add+0x16>
		if (iface->ipv6.unicast[i].is_used) {
   1abe4:	226c      	movs	r2, #108	; 0x6c
   1abe6:	fb02 5203 	mla	r2, r2, r3, r5
   1abea:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1abee:	b10a      	cbz	r2, 1abf4 <net_if_ipv6_addr_add+0x34>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1abf0:	3301      	adds	r3, #1
   1abf2:	e7f5      	b.n	1abe0 <net_if_ipv6_addr_add+0x20>
		net_if_addr_init(&iface->ipv6.unicast[i], addr, addr_type,
   1abf4:	f04f 0e6c 	mov.w	lr, #108	; 0x6c
   1abf8:	fb0e fe03 	mul.w	lr, lr, r3
   1abfc:	f10e 0e20 	add.w	lr, lr, #32
   1ac00:	44ae      	add	lr, r5
   1ac02:	f10e 040c 	add.w	r4, lr, #12
	ifaddr->is_used = true;
   1ac06:	2301      	movs	r3, #1
   1ac08:	f884 3068 	strb.w	r3, [r4, #104]	; 0x68
	ifaddr->address.family = AF_INET6;
   1ac0c:	230a      	movs	r3, #10
   1ac0e:	f8ae 300c 	strh.w	r3, [lr, #12]
	ifaddr->addr_type = addr_type;
   1ac12:	f884 8064 	strb.w	r8, [r4, #100]	; 0x64
	net_ipaddr_copy(&ifaddr->address.in6_addr, addr);
   1ac16:	46ec      	mov	ip, sp
   1ac18:	6830      	ldr	r0, [r6, #0]
   1ac1a:	6871      	ldr	r1, [r6, #4]
   1ac1c:	68b2      	ldr	r2, [r6, #8]
   1ac1e:	68f3      	ldr	r3, [r6, #12]
   1ac20:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1ac24:	466e      	mov	r6, sp
   1ac26:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ac28:	f8ce 0010 	str.w	r0, [lr, #16]
   1ac2c:	f8ce 1014 	str.w	r1, [lr, #20]
   1ac30:	f8ce 2018 	str.w	r2, [lr, #24]
   1ac34:	f8ce 301c 	str.w	r3, [lr, #28]
	k_delayed_work_init(&ifaddr->dad_timer, dad_timeout);
   1ac38:	4910      	ldr	r1, [pc, #64]	; (1ac7c <net_if_ipv6_addr_add+0xbc>)
   1ac3a:	f10e 0048 	add.w	r0, lr, #72	; 0x48
   1ac3e:	f00e fca9 	bl	29594 <k_delayed_work_init>
	if (vlifetime) {
   1ac42:	b96f      	cbnz	r7, 1ac60 <net_if_ipv6_addr_add+0xa0>
		ifaddr->is_infinite = true;
   1ac44:	2301      	movs	r3, #1
   1ac46:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ac4a:	4621      	mov	r1, r4
   1ac4c:	4628      	mov	r0, r5
   1ac4e:	f7ff fe3b 	bl	1a8c8 <net_if_ipv6_start_dad>
   1ac52:	2300      	movs	r3, #0
   1ac54:	461a      	mov	r2, r3
   1ac56:	4629      	mov	r1, r5
   1ac58:	4809      	ldr	r0, [pc, #36]	; (1ac80 <net_if_ipv6_addr_add+0xc0>)
   1ac5a:	f007 fd61 	bl	22720 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.unicast[i];
   1ac5e:	e7ba      	b.n	1abd6 <net_if_ipv6_addr_add+0x16>
		ifaddr->is_infinite = false;
   1ac60:	2300      	movs	r3, #0
   1ac62:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
		k_delayed_work_init(&ifaddr->lifetime, ipv6_addr_expired);
   1ac66:	4907      	ldr	r1, [pc, #28]	; (1ac84 <net_if_ipv6_addr_add+0xc4>)
   1ac68:	f104 0014 	add.w	r0, r4, #20
   1ac6c:	f00e fc92 	bl	29594 <k_delayed_work_init>
		net_if_ipv6_addr_update_lifetime(ifaddr, vlifetime);
   1ac70:	4639      	mov	r1, r7
   1ac72:	4620      	mov	r0, r4
   1ac74:	f7ff ff96 	bl	1aba4 <net_if_ipv6_addr_update_lifetime>
   1ac78:	e7e7      	b.n	1ac4a <net_if_ipv6_addr_add+0x8a>
   1ac7a:	bf00      	nop
   1ac7c:	0001ab55 	.word	0x0001ab55
   1ac80:	f0600001 	.word	0xf0600001
   1ac84:	0001a80d 	.word	0x0001a80d

0001ac88 <net_if_start_dad>:
{
   1ac88:	b570      	push	{r4, r5, r6, lr}
   1ac8a:	b084      	sub	sp, #16
   1ac8c:	4605      	mov	r5, r0
	struct in6_addr addr = { };
   1ac8e:	2300      	movs	r3, #0
   1ac90:	9302      	str	r3, [sp, #8]
   1ac92:	9303      	str	r3, [sp, #12]
	net_ipv6_addr_create_iid(&addr, &iface->link_addr);
   1ac94:	f100 0410 	add.w	r4, r0, #16
 *  @param lladdr Link local address
 */
static inline void net_ipv6_addr_create_iid(struct in6_addr *addr,
					    struct net_linkaddr *lladdr)
{
	addr->s6_addr[0] = 0xfe;
   1ac98:	22fe      	movs	r2, #254	; 0xfe
   1ac9a:	f88d 2000 	strb.w	r2, [sp]
	addr->s6_addr[1] = 0x80;
   1ac9e:	2280      	movs	r2, #128	; 0x80
   1aca0:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1aca4:	f8ad 3002 	strh.w	r3, [sp, #2]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1aca8:	9301      	str	r3, [sp, #4]

	switch (lladdr->len) {
   1acaa:	7922      	ldrb	r2, [r4, #4]
   1acac:	2a06      	cmp	r2, #6
   1acae:	d020      	beq.n	1acf2 <net_if_start_dad+0x6a>
   1acb0:	2a08      	cmp	r2, #8
   1acb2:	d044      	beq.n	1ad3e <net_if_start_dad+0xb6>
   1acb4:	2a02      	cmp	r2, #2
   1acb6:	d008      	beq.n	1acca <net_if_start_dad+0x42>
	ifaddr = net_if_ipv6_addr_add(iface, &addr, NET_ADDR_AUTOCONF, 0);
   1acb8:	2300      	movs	r3, #0
   1acba:	2201      	movs	r2, #1
   1acbc:	4669      	mov	r1, sp
   1acbe:	4628      	mov	r0, r5
   1acc0:	f7ff ff7e 	bl	1abc0 <net_if_ipv6_addr_add>
   1acc4:	4606      	mov	r6, r0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1acc6:	2400      	movs	r4, #0
   1acc8:	e045      	b.n	1ad56 <net_if_start_dad+0xce>
	case 2:
		/* The generated IPv6 shall not toggle the
		 * Universal/Local bit. RFC 6282 ch 3.2.2
		 */
		if (lladdr->type == NET_LINK_IEEE802154) {
   1acca:	7963      	ldrb	r3, [r4, #5]
   1accc:	2b01      	cmp	r3, #1
   1acce:	d1f3      	bne.n	1acb8 <net_if_start_dad+0x30>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   1acd0:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   1acd2:	22ff      	movs	r2, #255	; 0xff
   1acd4:	f88d 200b 	strb.w	r2, [sp, #11]
			addr->s6_addr[12] = 0xfe;
   1acd8:	22fe      	movs	r2, #254	; 0xfe
   1acda:	f88d 200c 	strb.w	r2, [sp, #12]
			addr->s6_addr[13] = 0;
   1acde:	f88d 300d 	strb.w	r3, [sp, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   1ace2:	6903      	ldr	r3, [r0, #16]
   1ace4:	781a      	ldrb	r2, [r3, #0]
   1ace6:	f88d 200e 	strb.w	r2, [sp, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   1acea:	785b      	ldrb	r3, [r3, #1]
   1acec:	f88d 300f 	strb.w	r3, [sp, #15]
   1acf0:	e7e2      	b.n	1acb8 <net_if_start_dad+0x30>
		break;
	case 6:
		/* We do not toggle the Universal/Local bit
		 * in Bluetooth. See RFC 7668 ch 3.2.2
		 */
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1acf2:	2203      	movs	r2, #3
   1acf4:	6901      	ldr	r1, [r0, #16]
   1acf6:	a802      	add	r0, sp, #8
   1acf8:	f7e5 fae2 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1acfc:	23ff      	movs	r3, #255	; 0xff
   1acfe:	f88d 300b 	strb.w	r3, [sp, #11]
		addr->s6_addr[12] = 0xfe;
   1ad02:	23fe      	movs	r3, #254	; 0xfe
   1ad04:	f88d 300c 	strb.w	r3, [sp, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1ad08:	6929      	ldr	r1, [r5, #16]
   1ad0a:	2203      	movs	r2, #3
   1ad0c:	4411      	add	r1, r2
   1ad0e:	f10d 000d 	add.w	r0, sp, #13
   1ad12:	f7e5 fad5 	bl	2c0 <memcpy>

#if defined(CONFIG_NET_L2_BT_ZEP1656)
		/* Workaround against older Linux kernel BT IPSP code.
		 * This will be removed eventually.
		 */
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1ad16:	7963      	ldrb	r3, [r4, #5]
   1ad18:	2b02      	cmp	r3, #2
   1ad1a:	d009      	beq.n	1ad30 <net_if_start_dad+0xa8>
			addr->s6_addr[8] ^= 0x02;
		}
#endif

		if (lladdr->type == NET_LINK_ETHERNET) {
   1ad1c:	7963      	ldrb	r3, [r4, #5]
   1ad1e:	2b03      	cmp	r3, #3
   1ad20:	d1ca      	bne.n	1acb8 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1ad22:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ad26:	f083 0302 	eor.w	r3, r3, #2
   1ad2a:	f88d 3008 	strb.w	r3, [sp, #8]
   1ad2e:	e7c3      	b.n	1acb8 <net_if_start_dad+0x30>
			addr->s6_addr[8] ^= 0x02;
   1ad30:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ad34:	f083 0302 	eor.w	r3, r3, #2
   1ad38:	f88d 3008 	strb.w	r3, [sp, #8]
   1ad3c:	e7ee      	b.n	1ad1c <net_if_start_dad+0x94>
		}

		break;
	case 8:
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   1ad3e:	6901      	ldr	r1, [r0, #16]
   1ad40:	a802      	add	r0, sp, #8
   1ad42:	f7e5 fabd 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   1ad46:	f89d 3008 	ldrb.w	r3, [sp, #8]
   1ad4a:	f083 0302 	eor.w	r3, r3, #2
   1ad4e:	f88d 3008 	strb.w	r3, [sp, #8]
   1ad52:	e7b1      	b.n	1acb8 <net_if_start_dad+0x30>
   1ad54:	3401      	adds	r4, #1
   1ad56:	2c02      	cmp	r4, #2
   1ad58:	dc18      	bgt.n	1ad8c <net_if_start_dad+0x104>
		if (!iface->ipv6.unicast[i].is_used ||
   1ad5a:	236c      	movs	r3, #108	; 0x6c
   1ad5c:	fb03 5304 	mla	r3, r3, r4, r5
   1ad60:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ad64:	2b00      	cmp	r3, #0
   1ad66:	d0f5      	beq.n	1ad54 <net_if_start_dad+0xcc>
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ad68:	236c      	movs	r3, #108	; 0x6c
   1ad6a:	fb03 5304 	mla	r3, r3, r4, r5
   1ad6e:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1ad70:	2b0a      	cmp	r3, #10
   1ad72:	d1ef      	bne.n	1ad54 <net_if_start_dad+0xcc>
		    &iface->ipv6.unicast[i] == ifaddr) {
   1ad74:	216c      	movs	r1, #108	; 0x6c
   1ad76:	fb01 f104 	mul.w	r1, r1, r4
   1ad7a:	3120      	adds	r1, #32
   1ad7c:	4429      	add	r1, r5
   1ad7e:	310c      	adds	r1, #12
		    iface->ipv6.unicast[i].address.family != AF_INET6 ||
   1ad80:	428e      	cmp	r6, r1
   1ad82:	d0e7      	beq.n	1ad54 <net_if_start_dad+0xcc>
		net_if_ipv6_start_dad(iface, &iface->ipv6.unicast[i]);
   1ad84:	4628      	mov	r0, r5
   1ad86:	f7ff fd9f 	bl	1a8c8 <net_if_ipv6_start_dad>
   1ad8a:	e7e3      	b.n	1ad54 <net_if_start_dad+0xcc>
}
   1ad8c:	b004      	add	sp, #16
   1ad8e:	bd70      	pop	{r4, r5, r6, pc}

0001ad90 <net_if_ipv6_maddr_add>:
	return addr->s6_addr[0] == 0xFF;
   1ad90:	780b      	ldrb	r3, [r1, #0]
	if (!net_is_ipv6_addr_mcast(addr)) {
   1ad92:	2bff      	cmp	r3, #255	; 0xff
   1ad94:	d134      	bne.n	1ae00 <net_if_ipv6_maddr_add+0x70>
{
   1ad96:	b570      	push	{r4, r5, r6, lr}
   1ad98:	2400      	movs	r4, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ad9a:	2c04      	cmp	r4, #4
   1ad9c:	dc2e      	bgt.n	1adfc <net_if_ipv6_maddr_add+0x6c>
		if (iface->ipv6.mcast[i].is_used) {
   1ad9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ada2:	00d3      	lsls	r3, r2, #3
   1ada4:	4403      	add	r3, r0
   1ada6:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1adaa:	f013 0f01 	tst.w	r3, #1
   1adae:	d001      	beq.n	1adb4 <net_if_ipv6_maddr_add+0x24>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1adb0:	3401      	adds	r4, #1
   1adb2:	e7f2      	b.n	1ad9a <net_if_ipv6_maddr_add+0xa>
   1adb4:	4605      	mov	r5, r0
		iface->ipv6.mcast[i].is_used = true;
   1adb6:	0066      	lsls	r6, r4, #1
   1adb8:	1932      	adds	r2, r6, r4
   1adba:	00d3      	lsls	r3, r2, #3
   1adbc:	4403      	add	r3, r0
   1adbe:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1adc2:	f042 0201 	orr.w	r2, r2, #1
   1adc6:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
		iface->ipv6.mcast[i].address.family = AF_INET6;
   1adca:	220a      	movs	r2, #10
   1adcc:	f8a3 2174 	strh.w	r2, [r3, #372]	; 0x174
		memcpy(&iface->ipv6.mcast[i].address.in6_addr, addr, 16);
   1add0:	1933      	adds	r3, r6, r4
   1add2:	00d8      	lsls	r0, r3, #3
   1add4:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1add8:	4428      	add	r0, r5
   1adda:	2210      	movs	r2, #16
   1addc:	3018      	adds	r0, #24
   1adde:	f7e5 fa6f 	bl	2c0 <memcpy>
   1ade2:	2300      	movs	r3, #0
   1ade4:	461a      	mov	r2, r3
   1ade6:	4629      	mov	r1, r5
   1ade8:	4806      	ldr	r0, [pc, #24]	; (1ae04 <net_if_ipv6_maddr_add+0x74>)
   1adea:	f007 fc99 	bl	22720 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.mcast[i];
   1adee:	4434      	add	r4, r6
   1adf0:	00e0      	lsls	r0, r4, #3
   1adf2:	f500 70b0 	add.w	r0, r0, #352	; 0x160
   1adf6:	4428      	add	r0, r5
   1adf8:	3010      	adds	r0, #16
   1adfa:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   1adfc:	2000      	movs	r0, #0
   1adfe:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   1ae00:	2000      	movs	r0, #0
   1ae02:	4770      	bx	lr
   1ae04:	f0600003 	.word	0xf0600003

0001ae08 <net_if_ipv6_maddr_rm>:
{
   1ae08:	b570      	push	{r4, r5, r6, lr}
   1ae0a:	4605      	mov	r5, r0
   1ae0c:	460e      	mov	r6, r1
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ae0e:	2400      	movs	r4, #0
   1ae10:	e000      	b.n	1ae14 <net_if_ipv6_maddr_rm+0xc>
   1ae12:	3401      	adds	r4, #1
   1ae14:	2c04      	cmp	r4, #4
   1ae16:	dc25      	bgt.n	1ae64 <net_if_ipv6_maddr_rm+0x5c>
		if (!iface->ipv6.mcast[i].is_used) {
   1ae18:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ae1c:	00d3      	lsls	r3, r2, #3
   1ae1e:	461a      	mov	r2, r3
   1ae20:	442b      	add	r3, r5
   1ae22:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ae26:	f013 0f01 	tst.w	r3, #1
   1ae2a:	d0f2      	beq.n	1ae12 <net_if_ipv6_maddr_rm+0xa>
			    &iface->ipv6.mcast[i].address.in6_addr,
   1ae2c:	f502 70b0 	add.w	r0, r2, #352	; 0x160
   1ae30:	4428      	add	r0, r5
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ae32:	2210      	movs	r2, #16
   1ae34:	4631      	mov	r1, r6
   1ae36:	3018      	adds	r0, #24
   1ae38:	f00e fd1a 	bl	29870 <memcmp>
		if (!net_ipv6_addr_cmp(
   1ae3c:	2800      	cmp	r0, #0
   1ae3e:	d1e8      	bne.n	1ae12 <net_if_ipv6_maddr_rm+0xa>
		iface->ipv6.mcast[i].is_used = false;
   1ae40:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1ae44:	00e3      	lsls	r3, r4, #3
   1ae46:	442b      	add	r3, r5
   1ae48:	f893 2170 	ldrb.w	r2, [r3, #368]	; 0x170
   1ae4c:	f36f 0200 	bfc	r2, #0, #1
   1ae50:	f883 2170 	strb.w	r2, [r3, #368]	; 0x170
   1ae54:	2300      	movs	r3, #0
   1ae56:	461a      	mov	r2, r3
   1ae58:	4629      	mov	r1, r5
   1ae5a:	4803      	ldr	r0, [pc, #12]	; (1ae68 <net_if_ipv6_maddr_rm+0x60>)
   1ae5c:	f007 fc60 	bl	22720 <net_mgmt_event_notify_with_info>
		return true;
   1ae60:	2001      	movs	r0, #1
   1ae62:	bd70      	pop	{r4, r5, r6, pc}
	return false;
   1ae64:	2000      	movs	r0, #0
}
   1ae66:	bd70      	pop	{r4, r5, r6, pc}
   1ae68:	f0600004 	.word	0xf0600004

0001ae6c <net_if_ipv6_addr_rm>:
{
   1ae6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ae70:	b084      	sub	sp, #16
   1ae72:	4606      	mov	r6, r0
   1ae74:	460f      	mov	r7, r1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ae76:	2400      	movs	r4, #0
   1ae78:	e009      	b.n	1ae8e <net_if_ipv6_addr_rm+0x22>
			k_delayed_work_cancel(&iface->ipv6.unicast[i].lifetime);
   1ae7a:	206c      	movs	r0, #108	; 0x6c
   1ae7c:	fb00 f004 	mul.w	r0, r0, r4
   1ae80:	3030      	adds	r0, #48	; 0x30
   1ae82:	4430      	add	r0, r6
   1ae84:	3010      	adds	r0, #16
   1ae86:	f00e fba3 	bl	295d0 <k_delayed_work_cancel>
   1ae8a:	e01c      	b.n	1aec6 <net_if_ipv6_addr_rm+0x5a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ae8c:	3401      	adds	r4, #1
   1ae8e:	2c02      	cmp	r4, #2
   1ae90:	dc46      	bgt.n	1af20 <net_if_ipv6_addr_rm+0xb4>
		if (!iface->ipv6.unicast[i].is_used) {
   1ae92:	236c      	movs	r3, #108	; 0x6c
   1ae94:	fb03 6304 	mla	r3, r3, r4, r6
   1ae98:	f893 5094 	ldrb.w	r5, [r3, #148]	; 0x94
   1ae9c:	2d00      	cmp	r5, #0
   1ae9e:	d0f5      	beq.n	1ae8c <net_if_ipv6_addr_rm+0x20>
			    &iface->ipv6.unicast[i].address.in6_addr,
   1aea0:	206c      	movs	r0, #108	; 0x6c
   1aea2:	fb00 f004 	mul.w	r0, r0, r4
   1aea6:	3020      	adds	r0, #32
   1aea8:	4430      	add	r0, r6
   1aeaa:	2210      	movs	r2, #16
   1aeac:	4639      	mov	r1, r7
   1aeae:	4410      	add	r0, r2
   1aeb0:	f00e fcde 	bl	29870 <memcmp>
		if (!net_ipv6_addr_cmp(
   1aeb4:	2800      	cmp	r0, #0
   1aeb6:	d1e9      	bne.n	1ae8c <net_if_ipv6_addr_rm+0x20>
		if (!iface->ipv6.unicast[i].is_infinite) {
   1aeb8:	236c      	movs	r3, #108	; 0x6c
   1aeba:	fb03 6304 	mla	r3, r3, r4, r6
   1aebe:	f893 3093 	ldrb.w	r3, [r3, #147]	; 0x93
   1aec2:	2b00      	cmp	r3, #0
   1aec4:	d0d9      	beq.n	1ae7a <net_if_ipv6_addr_rm+0xe>
		iface->ipv6.unicast[i].is_used = false;
   1aec6:	236c      	movs	r3, #108	; 0x6c
   1aec8:	fb03 6404 	mla	r4, r3, r4, r6
   1aecc:	f04f 0800 	mov.w	r8, #0
   1aed0:	f884 8094 	strb.w	r8, [r4, #148]	; 0x94
	dst->s6_addr[0]   = 0xFF;
   1aed4:	23ff      	movs	r3, #255	; 0xff
   1aed6:	f88d 3000 	strb.w	r3, [sp]
	dst->s6_addr[1]   = 0x02;
   1aeda:	2202      	movs	r2, #2
   1aedc:	f88d 2001 	strb.w	r2, [sp, #1]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1aee0:	f8ad 8002 	strh.w	r8, [sp, #2]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1aee4:	f8ad 8004 	strh.w	r8, [sp, #4]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1aee8:	f8ad 8006 	strh.w	r8, [sp, #6]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1aeec:	f8ad 8008 	strh.w	r8, [sp, #8]
	dst->s6_addr[10]  = 0;
   1aef0:	f88d 800a 	strb.w	r8, [sp, #10]
	dst->s6_addr[11]  = 0x01;
   1aef4:	2201      	movs	r2, #1
   1aef6:	f88d 200b 	strb.w	r2, [sp, #11]
	dst->s6_addr[12]  = 0xFF;
   1aefa:	f88d 300c 	strb.w	r3, [sp, #12]
	dst->s6_addr[13]  = src->s6_addr[13];
   1aefe:	7b7b      	ldrb	r3, [r7, #13]
   1af00:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1af04:	89fb      	ldrh	r3, [r7, #14]
   1af06:	f8ad 300e 	strh.w	r3, [sp, #14]
		net_if_ipv6_maddr_rm(iface, &maddr);
   1af0a:	4669      	mov	r1, sp
   1af0c:	4630      	mov	r0, r6
   1af0e:	f7ff ff7b 	bl	1ae08 <net_if_ipv6_maddr_rm>
   1af12:	4643      	mov	r3, r8
   1af14:	4642      	mov	r2, r8
   1af16:	4631      	mov	r1, r6
   1af18:	4804      	ldr	r0, [pc, #16]	; (1af2c <net_if_ipv6_addr_rm+0xc0>)
   1af1a:	f007 fc01 	bl	22720 <net_mgmt_event_notify_with_info>
   1af1e:	e000      	b.n	1af22 <net_if_ipv6_addr_rm+0xb6>
	return false;
   1af20:	2500      	movs	r5, #0
}
   1af22:	4628      	mov	r0, r5
   1af24:	b004      	add	sp, #16
   1af26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1af2a:	bf00      	nop
   1af2c:	f0600002 	.word	0xf0600002

0001af30 <net_if_ipv6_dad_failed>:
{
   1af30:	b510      	push	{r4, lr}
   1af32:	b082      	sub	sp, #8
   1af34:	ab02      	add	r3, sp, #8
   1af36:	f843 0d04 	str.w	r0, [r3, #-4]!
   1af3a:	460c      	mov	r4, r1
	ifaddr = net_if_ipv6_addr_lookup(addr, &iface);
   1af3c:	4619      	mov	r1, r3
   1af3e:	4620      	mov	r0, r4
   1af40:	f7ff fdc8 	bl	1aad4 <net_if_ipv6_addr_lookup>
	if (!ifaddr) {
   1af44:	b160      	cbz	r0, 1af60 <net_if_ipv6_dad_failed+0x30>
	k_delayed_work_cancel(&ifaddr->dad_timer);
   1af46:	303c      	adds	r0, #60	; 0x3c
   1af48:	f00e fb42 	bl	295d0 <k_delayed_work_cancel>
   1af4c:	2300      	movs	r3, #0
   1af4e:	461a      	mov	r2, r3
   1af50:	9901      	ldr	r1, [sp, #4]
   1af52:	4804      	ldr	r0, [pc, #16]	; (1af64 <net_if_ipv6_dad_failed+0x34>)
   1af54:	f007 fbe4 	bl	22720 <net_mgmt_event_notify_with_info>
	net_if_ipv6_addr_rm(iface, addr);
   1af58:	4621      	mov	r1, r4
   1af5a:	9801      	ldr	r0, [sp, #4]
   1af5c:	f7ff ff86 	bl	1ae6c <net_if_ipv6_addr_rm>
}
   1af60:	b002      	add	sp, #8
   1af62:	bd10      	pop	{r4, pc}
   1af64:	f060000e 	.word	0xf060000e

0001af68 <net_if_ipv6_maddr_lookup>:
{
   1af68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1af6a:	4607      	mov	r7, r0
   1af6c:	460e      	mov	r6, r1
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1af6e:	4d22      	ldr	r5, [pc, #136]	; (1aff8 <net_if_ipv6_maddr_lookup+0x90>)
   1af70:	e034      	b.n	1afdc <net_if_ipv6_maddr_lookup+0x74>
		return false;
   1af72:	2300      	movs	r3, #0
			if (net_is_ipv6_prefix(maddr->s6_addr,
   1af74:	bb13      	cbnz	r3, 1afbc <net_if_ipv6_maddr_lookup+0x54>
		for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1af76:	3401      	adds	r4, #1
   1af78:	2c04      	cmp	r4, #4
   1af7a:	dc2d      	bgt.n	1afd8 <net_if_ipv6_maddr_lookup+0x70>
			if (!iface->ipv6.mcast[i].is_used ||
   1af7c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1af80:	00d3      	lsls	r3, r2, #3
   1af82:	442b      	add	r3, r5
   1af84:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1af88:	f013 0f01 	tst.w	r3, #1
   1af8c:	d0f3      	beq.n	1af76 <net_if_ipv6_maddr_lookup+0xe>
			    iface->ipv6.mcast[i].address.family != AF_INET6) {
   1af8e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1af92:	00d3      	lsls	r3, r2, #3
   1af94:	442b      	add	r3, r5
   1af96:	f8b3 3174 	ldrh.w	r3, [r3, #372]	; 0x174
			if (!iface->ipv6.mcast[i].is_used ||
   1af9a:	2b0a      	cmp	r3, #10
   1af9c:	d1eb      	bne.n	1af76 <net_if_ipv6_maddr_lookup+0xe>
				iface->ipv6.mcast[i].address.in6_addr.s6_addr,
   1af9e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1afa2:	00d3      	lsls	r3, r2, #3
   1afa4:	f503 73b0 	add.w	r3, r3, #352	; 0x160
   1afa8:	18e9      	adds	r1, r5, r3
	if (memcmp(addr1, addr2, bytes)) {
   1afaa:	2210      	movs	r2, #16
   1afac:	3118      	adds	r1, #24
   1afae:	4638      	mov	r0, r7
   1afb0:	f00e fc5e 	bl	29870 <memcmp>
   1afb4:	2800      	cmp	r0, #0
   1afb6:	d1dc      	bne.n	1af72 <net_if_ipv6_maddr_lookup+0xa>
		return true;
   1afb8:	2301      	movs	r3, #1
   1afba:	e7db      	b.n	1af74 <net_if_ipv6_maddr_lookup+0xc>
				if (ret) {
   1afbc:	b106      	cbz	r6, 1afc0 <net_if_ipv6_maddr_lookup+0x58>
					*ret = iface;
   1afbe:	6035      	str	r5, [r6, #0]
				return &iface->ipv6.mcast[i];
   1afc0:	eb04 0444 	add.w	r4, r4, r4, lsl #1
   1afc4:	00e3      	lsls	r3, r4, #3
   1afc6:	f503 70b0 	add.w	r0, r3, #352	; 0x160
   1afca:	4428      	add	r0, r5
   1afcc:	3010      	adds	r0, #16
   1afce:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1afd0:	2400      	movs	r4, #0
   1afd2:	e7d1      	b.n	1af78 <net_if_ipv6_maddr_lookup+0x10>
   1afd4:	2400      	movs	r4, #0
   1afd6:	e7cf      	b.n	1af78 <net_if_ipv6_maddr_lookup+0x10>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1afd8:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1afdc:	4b07      	ldr	r3, [pc, #28]	; (1affc <net_if_ipv6_maddr_lookup+0x94>)
   1afde:	429d      	cmp	r5, r3
   1afe0:	d008      	beq.n	1aff4 <net_if_ipv6_maddr_lookup+0x8c>
		if (ret && *ret && iface != *ret) {
   1afe2:	2e00      	cmp	r6, #0
   1afe4:	d0f4      	beq.n	1afd0 <net_if_ipv6_maddr_lookup+0x68>
   1afe6:	6833      	ldr	r3, [r6, #0]
   1afe8:	2b00      	cmp	r3, #0
   1afea:	d0f3      	beq.n	1afd4 <net_if_ipv6_maddr_lookup+0x6c>
   1afec:	429d      	cmp	r5, r3
   1afee:	d1f3      	bne.n	1afd8 <net_if_ipv6_maddr_lookup+0x70>
   1aff0:	2400      	movs	r4, #0
   1aff2:	e7c1      	b.n	1af78 <net_if_ipv6_maddr_lookup+0x10>
	return NULL;
   1aff4:	2000      	movs	r0, #0
}
   1aff6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1aff8:	2000ce00 	.word	0x2000ce00
   1affc:	2000d0a0 	.word	0x2000d0a0

0001b000 <net_if_mcast_monitor>:
{
   1b000:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b002:	4605      	mov	r5, r0
   1b004:	460e      	mov	r6, r1
   1b006:	4617      	mov	r7, r2
	return list->head;
   1b008:	4b13      	ldr	r3, [pc, #76]	; (1b058 <net_if_mcast_monitor+0x58>)
   1b00a:	681b      	ldr	r3, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b00c:	b11b      	cbz	r3, 1b016 <net_if_mcast_monitor+0x16>
   1b00e:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b010:	b173      	cbz	r3, 1b030 <net_if_mcast_monitor+0x30>
	return node->next;
   1b012:	681c      	ldr	r4, [r3, #0]
   1b014:	e00c      	b.n	1b030 <net_if_mcast_monitor+0x30>
   1b016:	461c      	mov	r4, r3
   1b018:	e00a      	b.n	1b030 <net_if_mcast_monitor+0x30>
			mon->cb(iface, addr, is_joined);
   1b01a:	689b      	ldr	r3, [r3, #8]
   1b01c:	463a      	mov	r2, r7
   1b01e:	4631      	mov	r1, r6
   1b020:	4628      	mov	r0, r5
   1b022:	4798      	blx	r3
   1b024:	e008      	b.n	1b038 <net_if_mcast_monitor+0x38>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b026:	4623      	mov	r3, r4
   1b028:	e00c      	b.n	1b044 <net_if_mcast_monitor+0x44>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b02a:	4622      	mov	r2, r4
   1b02c:	4623      	mov	r3, r4
   1b02e:	4614      	mov	r4, r2
   1b030:	b183      	cbz	r3, 1b054 <net_if_mcast_monitor+0x54>
		if (iface == mon->iface) {
   1b032:	685a      	ldr	r2, [r3, #4]
   1b034:	42aa      	cmp	r2, r5
   1b036:	d0f0      	beq.n	1b01a <net_if_mcast_monitor+0x1a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&mcast_monitor_callbacks,
   1b038:	2c00      	cmp	r4, #0
   1b03a:	d0f6      	beq.n	1b02a <net_if_mcast_monitor+0x2a>
   1b03c:	4622      	mov	r2, r4
   1b03e:	2c00      	cmp	r4, #0
   1b040:	d0f1      	beq.n	1b026 <net_if_mcast_monitor+0x26>
	return node->next;
   1b042:	6823      	ldr	r3, [r4, #0]
   1b044:	b113      	cbz	r3, 1b04c <net_if_mcast_monitor+0x4c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b046:	b11a      	cbz	r2, 1b050 <net_if_mcast_monitor+0x50>
	return node->next;
   1b048:	6822      	ldr	r2, [r4, #0]
   1b04a:	e7ef      	b.n	1b02c <net_if_mcast_monitor+0x2c>
   1b04c:	2200      	movs	r2, #0
   1b04e:	e7ed      	b.n	1b02c <net_if_mcast_monitor+0x2c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b050:	2200      	movs	r2, #0
   1b052:	e7eb      	b.n	1b02c <net_if_mcast_monitor+0x2c>
}
   1b054:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b056:	bf00      	nop
   1b058:	20001bec 	.word	0x20001bec

0001b05c <net_if_ipv6_prefix_add>:
{
   1b05c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b060:	4605      	mov	r5, r0
   1b062:	460e      	mov	r6, r1
   1b064:	4617      	mov	r7, r2
   1b066:	4698      	mov	r8, r3
	if_prefix = ipv6_prefix_find(iface, prefix, len);
   1b068:	f7ff fc00 	bl	1a86c <ipv6_prefix_find>
	if (if_prefix) {
   1b06c:	4604      	mov	r4, r0
   1b06e:	b110      	cbz	r0, 1b076 <net_if_ipv6_prefix_add+0x1a>
}
   1b070:	4620      	mov	r0, r4
   1b072:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b076:	2300      	movs	r3, #0
   1b078:	e000      	b.n	1b07c <net_if_ipv6_prefix_add+0x20>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b07a:	3301      	adds	r3, #1
   1b07c:	2b01      	cmp	r3, #1
   1b07e:	dcf7      	bgt.n	1b070 <net_if_ipv6_prefix_add+0x14>
		if (iface->ipv6.prefix[i].is_used) {
   1b080:	ebc3 1103 	rsb	r1, r3, r3, lsl #4
   1b084:	008a      	lsls	r2, r1, #2
   1b086:	442a      	add	r2, r5
   1b088:	f892 2222 	ldrb.w	r2, [r2, #546]	; 0x222
   1b08c:	2a00      	cmp	r2, #0
   1b08e:	d1f4      	bne.n	1b07a <net_if_ipv6_prefix_add+0x1e>
		net_if_ipv6_prefix_init(&iface->ipv6.prefix[i], prefix, len,
   1b090:	ebc3 1303 	rsb	r3, r3, r3, lsl #4
   1b094:	009a      	lsls	r2, r3, #2
   1b096:	f502 74ec 	add.w	r4, r2, #472	; 0x1d8
   1b09a:	442c      	add	r4, r5
   1b09c:	3410      	adds	r4, #16
   1b09e:	4643      	mov	r3, r8
   1b0a0:	463a      	mov	r2, r7
   1b0a2:	4631      	mov	r1, r6
   1b0a4:	4620      	mov	r0, r4
   1b0a6:	f7ff fc2d 	bl	1a904 <net_if_ipv6_prefix_init>
   1b0aa:	2300      	movs	r3, #0
   1b0ac:	461a      	mov	r2, r3
   1b0ae:	4629      	mov	r1, r5
   1b0b0:	4801      	ldr	r0, [pc, #4]	; (1b0b8 <net_if_ipv6_prefix_add+0x5c>)
   1b0b2:	f007 fb35 	bl	22720 <net_mgmt_event_notify_with_info>
		return &iface->ipv6.prefix[i];
   1b0b6:	e7db      	b.n	1b070 <net_if_ipv6_prefix_add+0x14>
   1b0b8:	f0600005 	.word	0xf0600005

0001b0bc <net_if_ipv6_prefix_lookup>:
{
   1b0bc:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b0c0:	4605      	mov	r5, r0
   1b0c2:	4688      	mov	r8, r1
   1b0c4:	4617      	mov	r7, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b0c6:	2400      	movs	r4, #0
   1b0c8:	e01d      	b.n	1b106 <net_if_ipv6_prefix_lookup+0x4a>
	if (memcmp(addr1, addr2, bytes)) {
   1b0ca:	4652      	mov	r2, sl
   1b0cc:	4641      	mov	r1, r8
   1b0ce:	4648      	mov	r0, r9
   1b0d0:	f00e fbce 	bl	29870 <memcmp>
   1b0d4:	b9a0      	cbnz	r0, 1b100 <net_if_ipv6_prefix_lookup+0x44>
	if (!remain) {
   1b0d6:	f1bb 0f00 	cmp.w	fp, #0
   1b0da:	d012      	beq.n	1b102 <net_if_ipv6_prefix_lookup+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b0dc:	f1cb 0208 	rsb	r2, fp, #8
   1b0e0:	23ff      	movs	r3, #255	; 0xff
   1b0e2:	4093      	lsls	r3, r2
   1b0e4:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b0e8:	fa03 f30b 	lsl.w	r3, r3, fp
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b0ec:	f819 200a 	ldrb.w	r2, [r9, sl]
   1b0f0:	f818 100a 	ldrb.w	r1, [r8, sl]
   1b0f4:	404a      	eors	r2, r1
   1b0f6:	4213      	tst	r3, r2
   1b0f8:	bf0c      	ite	eq
   1b0fa:	2601      	moveq	r6, #1
   1b0fc:	2600      	movne	r6, #0
   1b0fe:	e000      	b.n	1b102 <net_if_ipv6_prefix_lookup+0x46>
		return false;
   1b100:	2600      	movs	r6, #0
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b102:	b9e6      	cbnz	r6, 1b13e <net_if_ipv6_prefix_lookup+0x82>
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b104:	3401      	adds	r4, #1
   1b106:	2c01      	cmp	r4, #1
   1b108:	dc22      	bgt.n	1b150 <net_if_ipv6_prefix_lookup+0x94>
		if (!iface->ipv6.prefix[i].is_used) {
   1b10a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b10e:	0093      	lsls	r3, r2, #2
   1b110:	442b      	add	r3, r5
   1b112:	f893 6222 	ldrb.w	r6, [r3, #546]	; 0x222
   1b116:	2e00      	cmp	r6, #0
   1b118:	d0f4      	beq.n	1b104 <net_if_ipv6_prefix_lookup+0x48>
		if (net_is_ipv6_prefix(iface->ipv6.prefix[i].prefix.s6_addr,
   1b11a:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b11e:	0093      	lsls	r3, r2, #2
   1b120:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b124:	442b      	add	r3, r5
   1b126:	f103 0910 	add.w	r9, r3, #16
	u8_t bits = 128 - length;
   1b12a:	f1c7 0380 	rsb	r3, r7, #128	; 0x80
	u8_t bytes = length / 8;
   1b12e:	ea4f 0ad7 	mov.w	sl, r7, lsr #3
	u8_t remain = bits % 8;
   1b132:	f003 0b07 	and.w	fp, r3, #7
	if (length > 128) {
   1b136:	2f80      	cmp	r7, #128	; 0x80
   1b138:	d9c7      	bls.n	1b0ca <net_if_ipv6_prefix_lookup+0xe>
		return false;
   1b13a:	2600      	movs	r6, #0
   1b13c:	e7e1      	b.n	1b102 <net_if_ipv6_prefix_lookup+0x46>
			return &iface->ipv6.prefix[i];
   1b13e:	ebc4 1404 	rsb	r4, r4, r4, lsl #4
   1b142:	00a3      	lsls	r3, r4, #2
   1b144:	f503 70ec 	add.w	r0, r3, #472	; 0x1d8
   1b148:	4428      	add	r0, r5
   1b14a:	3010      	adds	r0, #16
   1b14c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return NULL;
   1b150:	2000      	movs	r0, #0
}
   1b152:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	...

0001b158 <net_if_ipv6_addr_onlink>:
{
   1b158:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b15c:	4606      	mov	r6, r0
   1b15e:	4688      	mov	r8, r1
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1b160:	4d2d      	ldr	r5, [pc, #180]	; (1b218 <net_if_ipv6_addr_onlink+0xc0>)
   1b162:	e048      	b.n	1b1f6 <net_if_ipv6_addr_onlink+0x9e>
	if (memcmp(addr1, addr2, bytes)) {
   1b164:	465a      	mov	r2, fp
   1b166:	4641      	mov	r1, r8
   1b168:	4648      	mov	r0, r9
   1b16a:	f00e fb81 	bl	29870 <memcmp>
   1b16e:	b9a8      	cbnz	r0, 1b19c <net_if_ipv6_addr_onlink+0x44>
	if (!remain) {
   1b170:	f1ba 0f00 	cmp.w	sl, #0
   1b174:	d013      	beq.n	1b19e <net_if_ipv6_addr_onlink+0x46>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   1b176:	f1ca 0208 	rsb	r2, sl, #8
   1b17a:	23ff      	movs	r3, #255	; 0xff
   1b17c:	4093      	lsls	r3, r2
   1b17e:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   1b182:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   1b186:	f819 300b 	ldrb.w	r3, [r9, fp]
   1b18a:	f818 200b 	ldrb.w	r2, [r8, fp]
   1b18e:	4053      	eors	r3, r2
   1b190:	ea1a 0f03 	tst.w	sl, r3
   1b194:	bf0c      	ite	eq
   1b196:	2701      	moveq	r7, #1
   1b198:	2700      	movne	r7, #0
   1b19a:	e000      	b.n	1b19e <net_if_ipv6_addr_onlink+0x46>
		return false;
   1b19c:	2700      	movs	r7, #0
			if (tmp->ipv6.prefix[i].is_used &&
   1b19e:	bb0f      	cbnz	r7, 1b1e4 <net_if_ipv6_addr_onlink+0x8c>
		for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b1a0:	3401      	adds	r4, #1
   1b1a2:	2c01      	cmp	r4, #1
   1b1a4:	dc25      	bgt.n	1b1f2 <net_if_ipv6_addr_onlink+0x9a>
			if (tmp->ipv6.prefix[i].is_used &&
   1b1a6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b1aa:	0093      	lsls	r3, r2, #2
   1b1ac:	442b      	add	r3, r5
   1b1ae:	f893 7222 	ldrb.w	r7, [r3, #546]	; 0x222
   1b1b2:	2f00      	cmp	r7, #0
   1b1b4:	d0f4      	beq.n	1b1a0 <net_if_ipv6_addr_onlink+0x48>
			    net_is_ipv6_prefix(tmp->ipv6.prefix[i].prefix.
   1b1b6:	0122      	lsls	r2, r4, #4
   1b1b8:	1b11      	subs	r1, r2, r4
   1b1ba:	008b      	lsls	r3, r1, #2
   1b1bc:	4619      	mov	r1, r3
   1b1be:	f503 7300 	add.w	r3, r3, #512	; 0x200
   1b1c2:	442b      	add	r3, r5
   1b1c4:	f103 0910 	add.w	r9, r3, #16
   1b1c8:	460a      	mov	r2, r1
   1b1ca:	442a      	add	r2, r5
   1b1cc:	f892 3220 	ldrb.w	r3, [r2, #544]	; 0x220
	u8_t bits = 128 - length;
   1b1d0:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   1b1d4:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   1b1d8:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   1b1dc:	2b80      	cmp	r3, #128	; 0x80
   1b1de:	d9c1      	bls.n	1b164 <net_if_ipv6_addr_onlink+0xc>
		return false;
   1b1e0:	2700      	movs	r7, #0
   1b1e2:	e7dc      	b.n	1b19e <net_if_ipv6_addr_onlink+0x46>
				if (iface) {
   1b1e4:	b1a6      	cbz	r6, 1b210 <net_if_ipv6_addr_onlink+0xb8>
					*iface = tmp;
   1b1e6:	6035      	str	r5, [r6, #0]
   1b1e8:	e012      	b.n	1b210 <net_if_ipv6_addr_onlink+0xb8>
   1b1ea:	2400      	movs	r4, #0
   1b1ec:	e7d9      	b.n	1b1a2 <net_if_ipv6_addr_onlink+0x4a>
   1b1ee:	2400      	movs	r4, #0
   1b1f0:	e7d7      	b.n	1b1a2 <net_if_ipv6_addr_onlink+0x4a>
	for (tmp = __net_if_start; tmp != __net_if_end; tmp++) {
   1b1f2:	f505 7528 	add.w	r5, r5, #672	; 0x2a0
   1b1f6:	4b09      	ldr	r3, [pc, #36]	; (1b21c <net_if_ipv6_addr_onlink+0xc4>)
   1b1f8:	429d      	cmp	r5, r3
   1b1fa:	d008      	beq.n	1b20e <net_if_ipv6_addr_onlink+0xb6>
		if (iface && *iface && *iface != tmp) {
   1b1fc:	2e00      	cmp	r6, #0
   1b1fe:	d0f4      	beq.n	1b1ea <net_if_ipv6_addr_onlink+0x92>
   1b200:	6833      	ldr	r3, [r6, #0]
   1b202:	2b00      	cmp	r3, #0
   1b204:	d0f3      	beq.n	1b1ee <net_if_ipv6_addr_onlink+0x96>
   1b206:	429d      	cmp	r5, r3
   1b208:	d1f3      	bne.n	1b1f2 <net_if_ipv6_addr_onlink+0x9a>
   1b20a:	2400      	movs	r4, #0
   1b20c:	e7c9      	b.n	1b1a2 <net_if_ipv6_addr_onlink+0x4a>
	return false;
   1b20e:	2700      	movs	r7, #0
}
   1b210:	4638      	mov	r0, r7
   1b212:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b216:	bf00      	nop
   1b218:	2000ce00 	.word	0x2000ce00
   1b21c:	2000d0a0 	.word	0x2000d0a0

0001b220 <net_if_ipv6_prefix_set_timer>:
{
   1b220:	b508      	push	{r3, lr}
	u32_t timeout = lifetime * MSEC_PER_SEC;
   1b222:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b226:	fb02 f201 	mul.w	r2, r2, r1
	if (lifetime > (0xfffffffe / MSEC_PER_SEC)) {
   1b22a:	4b05      	ldr	r3, [pc, #20]	; (1b240 <net_if_ipv6_prefix_set_timer+0x20>)
   1b22c:	4299      	cmp	r1, r3
   1b22e:	d901      	bls.n	1b234 <net_if_ipv6_prefix_set_timer+0x14>
		timeout = 0xfffffffe;
   1b230:	f06f 0201 	mvn.w	r2, #1
   1b234:	4601      	mov	r1, r0
   1b236:	4803      	ldr	r0, [pc, #12]	; (1b244 <net_if_ipv6_prefix_set_timer+0x24>)
   1b238:	f00e fa24 	bl	29684 <k_delayed_work_submit_to_queue>
   1b23c:	bd08      	pop	{r3, pc}
   1b23e:	bf00      	nop
   1b240:	00418937 	.word	0x00418937
   1b244:	20002bd8 	.word	0x20002bd8

0001b248 <net_if_ipv6_prefix_unset_timer>:
{
   1b248:	b508      	push	{r3, lr}
	if (!prefix->is_used) {
   1b24a:	f890 303a 	ldrb.w	r3, [r0, #58]	; 0x3a
   1b24e:	b903      	cbnz	r3, 1b252 <net_if_ipv6_prefix_unset_timer+0xa>
   1b250:	bd08      	pop	{r3, pc}
	k_delayed_work_cancel(&prefix->lifetime);
   1b252:	f00e f9bd 	bl	295d0 <k_delayed_work_cancel>
   1b256:	e7fb      	b.n	1b250 <net_if_ipv6_prefix_unset_timer+0x8>

0001b258 <net_if_ipv6_prefix_rm>:
{
   1b258:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b25c:	4606      	mov	r6, r0
   1b25e:	460f      	mov	r7, r1
   1b260:	4690      	mov	r8, r2
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1b262:	2400      	movs	r4, #0
   1b264:	e000      	b.n	1b268 <net_if_ipv6_prefix_rm+0x10>
   1b266:	3401      	adds	r4, #1
   1b268:	2c01      	cmp	r4, #1
   1b26a:	dc2f      	bgt.n	1b2cc <net_if_ipv6_prefix_rm+0x74>
		if (!iface->ipv6.prefix[i].is_used) {
   1b26c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b270:	0093      	lsls	r3, r2, #2
   1b272:	461a      	mov	r2, r3
   1b274:	4433      	add	r3, r6
   1b276:	f893 5222 	ldrb.w	r5, [r3, #546]	; 0x222
   1b27a:	2d00      	cmp	r5, #0
   1b27c:	d0f3      	beq.n	1b266 <net_if_ipv6_prefix_rm+0xe>
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b27e:	f502 7000 	add.w	r0, r2, #512	; 0x200
   1b282:	4430      	add	r0, r6
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1b284:	2210      	movs	r2, #16
   1b286:	4639      	mov	r1, r7
   1b288:	4410      	add	r0, r2
   1b28a:	f00e faf1 	bl	29870 <memcmp>
   1b28e:	2800      	cmp	r0, #0
   1b290:	d1e9      	bne.n	1b266 <net_if_ipv6_prefix_rm+0xe>
		    iface->ipv6.prefix[i].len != len) {
   1b292:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1b296:	0093      	lsls	r3, r2, #2
   1b298:	4433      	add	r3, r6
   1b29a:	f893 3220 	ldrb.w	r3, [r3, #544]	; 0x220
		if (!net_ipv6_addr_cmp(&iface->ipv6.prefix[i].prefix, addr) ||
   1b29e:	4543      	cmp	r3, r8
   1b2a0:	d1e1      	bne.n	1b266 <net_if_ipv6_prefix_rm+0xe>
		net_if_ipv6_prefix_unset_timer(&iface->ipv6.prefix[i]);
   1b2a2:	0127      	lsls	r7, r4, #4
   1b2a4:	1b3a      	subs	r2, r7, r4
   1b2a6:	0093      	lsls	r3, r2, #2
   1b2a8:	f503 73ec 	add.w	r3, r3, #472	; 0x1d8
   1b2ac:	18f0      	adds	r0, r6, r3
   1b2ae:	3010      	adds	r0, #16
   1b2b0:	f7ff ffca 	bl	1b248 <net_if_ipv6_prefix_unset_timer>
		iface->ipv6.prefix[i].is_used = false;
   1b2b4:	1b3c      	subs	r4, r7, r4
   1b2b6:	00a3      	lsls	r3, r4, #2
   1b2b8:	4433      	add	r3, r6
   1b2ba:	2200      	movs	r2, #0
   1b2bc:	f883 2222 	strb.w	r2, [r3, #546]	; 0x222
   1b2c0:	4613      	mov	r3, r2
   1b2c2:	4631      	mov	r1, r6
   1b2c4:	4803      	ldr	r0, [pc, #12]	; (1b2d4 <net_if_ipv6_prefix_rm+0x7c>)
   1b2c6:	f007 fa2b 	bl	22720 <net_mgmt_event_notify_with_info>
		return true;
   1b2ca:	e000      	b.n	1b2ce <net_if_ipv6_prefix_rm+0x76>
	return false;
   1b2cc:	2500      	movs	r5, #0
}
   1b2ce:	4628      	mov	r0, r5
   1b2d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1b2d4:	f0600006 	.word	0xf0600006

0001b2d8 <net_if_ipv6_router_lookup>:
{
   1b2d8:	b570      	push	{r4, r5, r6, lr}
   1b2da:	4605      	mov	r5, r0
   1b2dc:	460e      	mov	r6, r1
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b2de:	2400      	movs	r4, #0
   1b2e0:	2c00      	cmp	r4, #0
   1b2e2:	dd01      	ble.n	1b2e8 <net_if_ipv6_router_lookup+0x10>
	return NULL;
   1b2e4:	2000      	movs	r0, #0
}
   1b2e6:	bd70      	pop	{r4, r5, r6, pc}
		if (!routers[i].is_used ||
   1b2e8:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b2ec:	009a      	lsls	r2, r3, #2
   1b2ee:	4b11      	ldr	r3, [pc, #68]	; (1b334 <net_if_ipv6_router_lookup+0x5c>)
   1b2f0:	4413      	add	r3, r2
   1b2f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
   1b2f6:	b123      	cbz	r3, 1b302 <net_if_ipv6_router_lookup+0x2a>
		    routers[i].address.family != AF_INET6 ||
   1b2f8:	4b0e      	ldr	r3, [pc, #56]	; (1b334 <net_if_ipv6_router_lookup+0x5c>)
   1b2fa:	4413      	add	r3, r2
   1b2fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
		if (!routers[i].is_used ||
   1b2fe:	2b0a      	cmp	r3, #10
   1b300:	d001      	beq.n	1b306 <net_if_ipv6_router_lookup+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b302:	3401      	adds	r4, #1
   1b304:	e7ec      	b.n	1b2e0 <net_if_ipv6_router_lookup+0x8>
		    routers[i].iface != iface) {
   1b306:	4b0b      	ldr	r3, [pc, #44]	; (1b334 <net_if_ipv6_router_lookup+0x5c>)
   1b308:	4413      	add	r3, r2
   1b30a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
		    routers[i].address.family != AF_INET6 ||
   1b30c:	42ab      	cmp	r3, r5
   1b30e:	d1f8      	bne.n	1b302 <net_if_ipv6_router_lookup+0x2a>
		if (net_ipv6_addr_cmp(&routers[i].address.in6_addr, addr)) {
   1b310:	eb04 1204 	add.w	r2, r4, r4, lsl #4
   1b314:	0093      	lsls	r3, r2, #2
   1b316:	3328      	adds	r3, #40	; 0x28
   1b318:	4a06      	ldr	r2, [pc, #24]	; (1b334 <net_if_ipv6_router_lookup+0x5c>)
   1b31a:	4413      	add	r3, r2
   1b31c:	2210      	movs	r2, #16
   1b31e:	4631      	mov	r1, r6
   1b320:	1d18      	adds	r0, r3, #4
   1b322:	f00e faa5 	bl	29870 <memcmp>
   1b326:	2800      	cmp	r0, #0
   1b328:	d1eb      	bne.n	1b302 <net_if_ipv6_router_lookup+0x2a>
			return &routers[i];
   1b32a:	2344      	movs	r3, #68	; 0x44
   1b32c:	4801      	ldr	r0, [pc, #4]	; (1b334 <net_if_ipv6_router_lookup+0x5c>)
   1b32e:	fb03 0004 	mla	r0, r3, r4, r0
   1b332:	bd70      	pop	{r4, r5, r6, pc}
   1b334:	20001bf4 	.word	0x20001bf4

0001b338 <net_if_ipv6_router_find_default>:
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b338:	2300      	movs	r3, #0
   1b33a:	2b00      	cmp	r3, #0
   1b33c:	dd01      	ble.n	1b342 <net_if_ipv6_router_find_default+0xa>
	return NULL;
   1b33e:	2000      	movs	r0, #0
}
   1b340:	4770      	bx	lr
		if (!routers[i].is_used ||
   1b342:	eb03 1203 	add.w	r2, r3, r3, lsl #4
   1b346:	0091      	lsls	r1, r2, #2
   1b348:	4a0e      	ldr	r2, [pc, #56]	; (1b384 <net_if_ipv6_router_find_default+0x4c>)
   1b34a:	440a      	add	r2, r1
   1b34c:	f892 2040 	ldrb.w	r2, [r2, #64]	; 0x40
   1b350:	b14a      	cbz	r2, 1b366 <net_if_ipv6_router_find_default+0x2e>
		    !routers[i].is_default ||
   1b352:	4a0c      	ldr	r2, [pc, #48]	; (1b384 <net_if_ipv6_router_find_default+0x4c>)
   1b354:	440a      	add	r2, r1
   1b356:	f892 2041 	ldrb.w	r2, [r2, #65]	; 0x41
		if (!routers[i].is_used ||
   1b35a:	b122      	cbz	r2, 1b366 <net_if_ipv6_router_find_default+0x2e>
		    routers[i].address.family != AF_INET6) {
   1b35c:	4a09      	ldr	r2, [pc, #36]	; (1b384 <net_if_ipv6_router_find_default+0x4c>)
   1b35e:	440a      	add	r2, r1
   1b360:	8d12      	ldrh	r2, [r2, #40]	; 0x28
		    !routers[i].is_default ||
   1b362:	2a0a      	cmp	r2, #10
   1b364:	d001      	beq.n	1b36a <net_if_ipv6_router_find_default+0x32>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b366:	3301      	adds	r3, #1
   1b368:	e7e7      	b.n	1b33a <net_if_ipv6_router_find_default+0x2>
		if (iface && iface != routers[i].iface) {
   1b36a:	b120      	cbz	r0, 1b376 <net_if_ipv6_router_find_default+0x3e>
   1b36c:	4a05      	ldr	r2, [pc, #20]	; (1b384 <net_if_ipv6_router_find_default+0x4c>)
   1b36e:	440a      	add	r2, r1
   1b370:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
   1b372:	4290      	cmp	r0, r2
   1b374:	d1f7      	bne.n	1b366 <net_if_ipv6_router_find_default+0x2e>
		return &routers[i];
   1b376:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b37a:	009a      	lsls	r2, r3, #2
   1b37c:	4801      	ldr	r0, [pc, #4]	; (1b384 <net_if_ipv6_router_find_default+0x4c>)
   1b37e:	4410      	add	r0, r2
   1b380:	4770      	bx	lr
   1b382:	bf00      	nop
   1b384:	20001bf4 	.word	0x20001bf4

0001b388 <net_if_ipv6_router_update_lifetime>:
}

void net_if_ipv6_router_update_lifetime(struct net_if_router *router,
					u32_t lifetime)
{
   1b388:	b508      	push	{r3, lr}
   1b38a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b38e:	fb02 f201 	mul.w	r2, r2, r1
   1b392:	4601      	mov	r1, r0
   1b394:	4801      	ldr	r0, [pc, #4]	; (1b39c <net_if_ipv6_router_update_lifetime+0x14>)
   1b396:	f00e f975 	bl	29684 <k_delayed_work_submit_to_queue>
   1b39a:	bd08      	pop	{r3, pc}
   1b39c:	20002bd8 	.word	0x20002bd8

0001b3a0 <net_if_ipv6_router_add>:
}

struct net_if_router *net_if_ipv6_router_add(struct net_if *iface,
					     struct in6_addr *addr,
					     u16_t lifetime)
{
   1b3a0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1b3a4:	b084      	sub	sp, #16
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b3a6:	2300      	movs	r3, #0
   1b3a8:	2b00      	cmp	r3, #0
   1b3aa:	dd04      	ble.n	1b3b6 <net_if_ipv6_router_add+0x16>
		net_mgmt_event_notify(NET_EVENT_IPV6_ROUTER_ADD, iface);

		return &routers[i];
	}

	return NULL;
   1b3ac:	2400      	movs	r4, #0
}
   1b3ae:	4620      	mov	r0, r4
   1b3b0:	b004      	add	sp, #16
   1b3b2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (routers[i].is_used) {
   1b3b6:	eb03 1403 	add.w	r4, r3, r3, lsl #4
   1b3ba:	00a5      	lsls	r5, r4, #2
   1b3bc:	4c20      	ldr	r4, [pc, #128]	; (1b440 <net_if_ipv6_router_add+0xa0>)
   1b3be:	442c      	add	r4, r5
   1b3c0:	f894 4040 	ldrb.w	r4, [r4, #64]	; 0x40
   1b3c4:	b10c      	cbz	r4, 1b3ca <net_if_ipv6_router_add+0x2a>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b3c6:	3301      	adds	r3, #1
   1b3c8:	e7ee      	b.n	1b3a8 <net_if_ipv6_router_add+0x8>
   1b3ca:	4616      	mov	r6, r2
   1b3cc:	460f      	mov	r7, r1
   1b3ce:	4680      	mov	r8, r0
		net_if_router_init(&routers[i], iface, addr, lifetime);
   1b3d0:	eb03 1303 	add.w	r3, r3, r3, lsl #4
   1b3d4:	009a      	lsls	r2, r3, #2
   1b3d6:	4c1a      	ldr	r4, [pc, #104]	; (1b440 <net_if_ipv6_router_add+0xa0>)
   1b3d8:	4414      	add	r4, r2
	router->is_used = true;
   1b3da:	2301      	movs	r3, #1
   1b3dc:	f884 3040 	strb.w	r3, [r4, #64]	; 0x40
	router->iface = iface;
   1b3e0:	63e0      	str	r0, [r4, #60]	; 0x3c
	router->address.family = AF_INET6;
   1b3e2:	230a      	movs	r3, #10
   1b3e4:	8523      	strh	r3, [r4, #40]	; 0x28
	net_ipaddr_copy(&router->address.in6_addr, addr);
   1b3e6:	466d      	mov	r5, sp
   1b3e8:	6808      	ldr	r0, [r1, #0]
   1b3ea:	6849      	ldr	r1, [r1, #4]
   1b3ec:	68ba      	ldr	r2, [r7, #8]
   1b3ee:	68fb      	ldr	r3, [r7, #12]
   1b3f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1b3f2:	466d      	mov	r5, sp
   1b3f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1b3f6:	62e0      	str	r0, [r4, #44]	; 0x2c
   1b3f8:	6321      	str	r1, [r4, #48]	; 0x30
   1b3fa:	6362      	str	r2, [r4, #52]	; 0x34
   1b3fc:	63a3      	str	r3, [r4, #56]	; 0x38
	if (lifetime) {
   1b3fe:	b966      	cbnz	r6, 1b41a <net_if_ipv6_router_add+0x7a>
		router->is_default = false;
   1b400:	2300      	movs	r3, #0
   1b402:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = true;
   1b406:	2301      	movs	r3, #1
   1b408:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
   1b40c:	2300      	movs	r3, #0
   1b40e:	461a      	mov	r2, r3
   1b410:	4641      	mov	r1, r8
   1b412:	480c      	ldr	r0, [pc, #48]	; (1b444 <net_if_ipv6_router_add+0xa4>)
   1b414:	f007 f984 	bl	22720 <net_mgmt_event_notify_with_info>
		return &routers[i];
   1b418:	e7c9      	b.n	1b3ae <net_if_ipv6_router_add+0xe>
		router->is_default = true;
   1b41a:	2301      	movs	r3, #1
   1b41c:	f884 3041 	strb.w	r3, [r4, #65]	; 0x41
		router->is_infinite = false;
   1b420:	2300      	movs	r3, #0
   1b422:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
		k_delayed_work_init(&router->lifetime, ipv6_router_expired);
   1b426:	4908      	ldr	r1, [pc, #32]	; (1b448 <net_if_ipv6_router_add+0xa8>)
   1b428:	4620      	mov	r0, r4
   1b42a:	f00e f8b3 	bl	29594 <k_delayed_work_init>
   1b42e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1b432:	fb02 f206 	mul.w	r2, r2, r6
   1b436:	4621      	mov	r1, r4
   1b438:	4804      	ldr	r0, [pc, #16]	; (1b44c <net_if_ipv6_router_add+0xac>)
   1b43a:	f00e f923 	bl	29684 <k_delayed_work_submit_to_queue>
   1b43e:	e7e5      	b.n	1b40c <net_if_ipv6_router_add+0x6c>
   1b440:	20001bf4 	.word	0x20001bf4
   1b444:	f0600009 	.word	0xf0600009
   1b448:	0001a81d 	.word	0x0001a81d
   1b44c:	20002bd8 	.word	0x20002bd8

0001b450 <net_if_ipv6_router_rm>:

bool net_if_ipv6_router_rm(struct net_if_router *router)
{
   1b450:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b454:	2400      	movs	r4, #0
   1b456:	2c00      	cmp	r4, #0
   1b458:	dd03      	ble.n	1b462 <net_if_ipv6_router_rm+0x12>
			i, net_sprint_ipv6_addr(&routers[i].address.in6_addr));

		return true;
	}

	return false;
   1b45a:	2500      	movs	r5, #0
}
   1b45c:	4628      	mov	r0, r5
   1b45e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!routers[i].is_used) {
   1b462:	eb04 1304 	add.w	r3, r4, r4, lsl #4
   1b466:	009a      	lsls	r2, r3, #2
   1b468:	4b0d      	ldr	r3, [pc, #52]	; (1b4a0 <net_if_ipv6_router_rm+0x50>)
   1b46a:	4413      	add	r3, r2
   1b46c:	f893 5040 	ldrb.w	r5, [r3, #64]	; 0x40
   1b470:	b11d      	cbz	r5, 1b47a <net_if_ipv6_router_rm+0x2a>
		if (&routers[i] != router) {
   1b472:	4b0b      	ldr	r3, [pc, #44]	; (1b4a0 <net_if_ipv6_router_rm+0x50>)
   1b474:	4413      	add	r3, r2
   1b476:	4283      	cmp	r3, r0
   1b478:	d001      	beq.n	1b47e <net_if_ipv6_router_rm+0x2e>
	for (i = 0; i < CONFIG_NET_MAX_ROUTERS; i++) {
   1b47a:	3401      	adds	r4, #1
   1b47c:	e7eb      	b.n	1b456 <net_if_ipv6_router_rm+0x6>
		k_delayed_work_cancel(&routers[i].lifetime);
   1b47e:	f8df 8020 	ldr.w	r8, [pc, #32]	; 1b4a0 <net_if_ipv6_router_rm+0x50>
   1b482:	4617      	mov	r7, r2
   1b484:	4447      	add	r7, r8
   1b486:	4638      	mov	r0, r7
   1b488:	f00e f8a2 	bl	295d0 <k_delayed_work_cancel>
		routers[i].is_used = false;
   1b48c:	2200      	movs	r2, #0
   1b48e:	f887 2040 	strb.w	r2, [r7, #64]	; 0x40
   1b492:	4613      	mov	r3, r2
   1b494:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
   1b496:	4803      	ldr	r0, [pc, #12]	; (1b4a4 <net_if_ipv6_router_rm+0x54>)
   1b498:	f007 f942 	bl	22720 <net_mgmt_event_notify_with_info>
		return true;
   1b49c:	e7de      	b.n	1b45c <net_if_ipv6_router_rm+0xc>
   1b49e:	bf00      	nop
   1b4a0:	20001bf4 	.word	0x20001bf4
   1b4a4:	f060000a 	.word	0xf060000a

0001b4a8 <net_if_ipv6_get_ll>:

struct in6_addr *net_if_ipv6_get_ll(struct net_if *iface,
				    enum net_addr_state addr_state)
{
   1b4a8:	b430      	push	{r4, r5}
   1b4aa:	4604      	mov	r4, r0
	int i;

	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4ac:	2300      	movs	r3, #0
   1b4ae:	e006      	b.n	1b4be <net_if_ipv6_get_ll+0x16>
		if (!iface->ipv6.unicast[i].is_used ||
		    (addr_state != NET_ADDR_ANY_STATE &&
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1b4b0:	226c      	movs	r2, #108	; 0x6c
   1b4b2:	fb02 4203 	mla	r2, r2, r3, r4
   1b4b6:	8d92      	ldrh	r2, [r2, #44]	; 0x2c
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b4b8:	2a0a      	cmp	r2, #10
   1b4ba:	d014      	beq.n	1b4e6 <net_if_ipv6_get_ll+0x3e>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b4bc:	3301      	adds	r3, #1
   1b4be:	2b02      	cmp	r3, #2
   1b4c0:	dc1d      	bgt.n	1b4fe <net_if_ipv6_get_ll+0x56>
		if (!iface->ipv6.unicast[i].is_used ||
   1b4c2:	226c      	movs	r2, #108	; 0x6c
   1b4c4:	fb02 4203 	mla	r2, r2, r3, r4
   1b4c8:	f892 2094 	ldrb.w	r2, [r2, #148]	; 0x94
   1b4cc:	2a00      	cmp	r2, #0
   1b4ce:	d0f5      	beq.n	1b4bc <net_if_ipv6_get_ll+0x14>
   1b4d0:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   1b4d4:	d0ec      	beq.n	1b4b0 <net_if_ipv6_get_ll+0x8>
		     iface->ipv6.unicast[i].addr_state != addr_state) ||
   1b4d6:	226c      	movs	r2, #108	; 0x6c
   1b4d8:	fb02 4203 	mla	r2, r2, r3, r4
   1b4dc:	f992 2091 	ldrsb.w	r2, [r2, #145]	; 0x91
		    (addr_state != NET_ADDR_ANY_STATE &&
   1b4e0:	4291      	cmp	r1, r2
   1b4e2:	d1eb      	bne.n	1b4bc <net_if_ipv6_get_ll+0x14>
   1b4e4:	e7e4      	b.n	1b4b0 <net_if_ipv6_get_ll+0x8>
			continue;
		}
		if (net_is_ipv6_ll_addr(&iface->ipv6.unicast[i].address.in6_addr)) {
   1b4e6:	206c      	movs	r0, #108	; 0x6c
   1b4e8:	fb00 f003 	mul.w	r0, r0, r3
   1b4ec:	3020      	adds	r0, #32
   1b4ee:	4420      	add	r0, r4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b4f0:	f830 5f10 	ldrh.w	r5, [r0, #16]!
   1b4f4:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b4f8:	4295      	cmp	r5, r2
   1b4fa:	d1df      	bne.n	1b4bc <net_if_ipv6_get_ll+0x14>
   1b4fc:	e000      	b.n	1b500 <net_if_ipv6_get_ll+0x58>
			return &iface->ipv6.unicast[i].address.in6_addr;
		}
	}

	return NULL;
   1b4fe:	2000      	movs	r0, #0
}
   1b500:	bc30      	pop	{r4, r5}
   1b502:	4770      	bx	lr

0001b504 <net_if_ipv6_select_src_addr>:
	return src;
}

const struct in6_addr *net_if_ipv6_select_src_addr(struct net_if *dst_iface,
						   struct in6_addr *dst)
{
   1b504:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1b508:	4607      	mov	r7, r0
   1b50a:	880a      	ldrh	r2, [r1, #0]
	struct in6_addr *src = NULL;
	u8_t best_match = 0;
	struct net_if *iface;

	if (!net_is_ipv6_ll_addr(dst) && !net_is_ipv6_addr_mcast(dst)) {
   1b50c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1b510:	429a      	cmp	r2, r3
   1b512:	f000 80d7 	beq.w	1b6c4 <net_if_ipv6_select_src_addr+0x1c0>
	return addr->s6_addr[0] == 0xFF;
   1b516:	780b      	ldrb	r3, [r1, #0]
   1b518:	2bff      	cmp	r3, #255	; 0xff
   1b51a:	d004      	beq.n	1b526 <net_if_ipv6_select_src_addr+0x22>
	u8_t best_match = 0;
   1b51c:	f04f 0900 	mov.w	r9, #0
   1b520:	4e74      	ldr	r6, [pc, #464]	; (1b6f4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b522:	46c8      	mov	r8, r9
   1b524:	e05b      	b.n	1b5de <net_if_ipv6_select_src_addr+0xda>
   1b526:	4c73      	ldr	r4, [pc, #460]	; (1b6f4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b528:	e0c0      	b.n	1b6ac <net_if_ipv6_select_src_addr+0x1a8>
	    addr->address.family == AF_INET6 &&
   1b52a:	246c      	movs	r4, #108	; 0x6c
   1b52c:	fb04 640e 	mla	r4, r4, lr, r6
   1b530:	8da4      	ldrh	r4, [r4, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b532:	2c0a      	cmp	r4, #10
   1b534:	d01e      	beq.n	1b574 <net_if_ipv6_select_src_addr+0x70>
	return false;
   1b536:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b538:	bb8b      	cbnz	r3, 1b59e <net_if_ipv6_select_src_addr+0x9a>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b53a:	f10e 0e01 	add.w	lr, lr, #1
   1b53e:	fa5f fe8e 	uxtb.w	lr, lr
   1b542:	f1be 0f02 	cmp.w	lr, #2
   1b546:	d846      	bhi.n	1b5d6 <net_if_ipv6_select_src_addr+0xd2>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b548:	46f4      	mov	ip, lr
   1b54a:	236c      	movs	r3, #108	; 0x6c
   1b54c:	fb03 f30e 	mul.w	r3, r3, lr
   1b550:	f103 0220 	add.w	r2, r3, #32
   1b554:	4432      	add	r2, r6
   1b556:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b558:	4433      	add	r3, r6
   1b55a:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b55e:	2b00      	cmp	r3, #0
   1b560:	d0ea      	beq.n	1b538 <net_if_ipv6_select_src_addr+0x34>
   1b562:	246c      	movs	r4, #108	; 0x6c
   1b564:	fb04 640e 	mla	r4, r4, lr, r6
   1b568:	f994 4091 	ldrsb.w	r4, [r4, #145]	; 0x91
   1b56c:	2c01      	cmp	r4, #1
   1b56e:	d0dc      	beq.n	1b52a <net_if_ipv6_select_src_addr+0x26>
	return false;
   1b570:	2300      	movs	r3, #0
   1b572:	e7e1      	b.n	1b538 <net_if_ipv6_select_src_addr+0x34>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1b574:	8894      	ldrh	r4, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b576:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b57a:	4294      	cmp	r4, r2
   1b57c:	d1dc      	bne.n	1b538 <net_if_ipv6_select_src_addr+0x34>
	return false;
   1b57e:	2300      	movs	r3, #0
   1b580:	e7da      	b.n	1b538 <net_if_ipv6_select_src_addr+0x34>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b582:	4055      	eors	r5, r2
			for (k = 0; k < 8; k++) {
   1b584:	2300      	movs	r3, #0
   1b586:	2b07      	cmp	r3, #7
   1b588:	d81b      	bhi.n	1b5c2 <net_if_ipv6_select_src_addr+0xbe>
				if (!(xor & 0x80)) {
   1b58a:	f015 0f80 	tst.w	r5, #128	; 0x80
   1b58e:	d118      	bne.n	1b5c2 <net_if_ipv6_select_src_addr+0xbe>
					len++;
   1b590:	3401      	adds	r4, #1
   1b592:	b2e4      	uxtb	r4, r4
					xor <<= 1;
   1b594:	006d      	lsls	r5, r5, #1
   1b596:	b2ed      	uxtb	r5, r5
			for (k = 0; k < 8; k++) {
   1b598:	3301      	adds	r3, #1
   1b59a:	b2db      	uxtb	r3, r3
   1b59c:	e7f3      	b.n	1b586 <net_if_ipv6_select_src_addr+0x82>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b59e:	2400      	movs	r4, #0
   1b5a0:	4623      	mov	r3, r4
	for (j = 0; j < 16; j++) {
   1b5a2:	2b0f      	cmp	r3, #15
   1b5a4:	d80d      	bhi.n	1b5c2 <net_if_ipv6_select_src_addr+0xbe>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b5a6:	5ccd      	ldrb	r5, [r1, r3]
   1b5a8:	226c      	movs	r2, #108	; 0x6c
   1b5aa:	fb02 620c 	mla	r2, r2, ip, r6
   1b5ae:	441a      	add	r2, r3
   1b5b0:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b5b4:	4295      	cmp	r5, r2
   1b5b6:	d1e4      	bne.n	1b582 <net_if_ipv6_select_src_addr+0x7e>
			len += 8;
   1b5b8:	3408      	adds	r4, #8
   1b5ba:	b2e4      	uxtb	r4, r4
	for (j = 0; j < 16; j++) {
   1b5bc:	3301      	adds	r3, #1
   1b5be:	b2db      	uxtb	r3, r3
   1b5c0:	e7ef      	b.n	1b5a2 <net_if_ipv6_select_src_addr+0x9e>
		if (len >= *best_so_far) {
   1b5c2:	454c      	cmp	r4, r9
   1b5c4:	d3b9      	bcc.n	1b53a <net_if_ipv6_select_src_addr+0x36>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b5c6:	206c      	movs	r0, #108	; 0x6c
   1b5c8:	fb00 f00c 	mul.w	r0, r0, ip
   1b5cc:	3020      	adds	r0, #32
   1b5ce:	4430      	add	r0, r6
   1b5d0:	3010      	adds	r0, #16
			*best_so_far = len;
   1b5d2:	46a1      	mov	r9, r4
   1b5d4:	e7b1      	b.n	1b53a <net_if_ipv6_select_src_addr+0x36>
		     iface++) {
			struct in6_addr *addr;

			addr = net_if_ipv6_get_best_match(iface, dst,
							  &best_match);
			if (addr) {
   1b5d6:	b150      	cbz	r0, 1b5ee <net_if_ipv6_select_src_addr+0xea>
		     iface++) {
   1b5d8:	f506 7628 	add.w	r6, r6, #672	; 0x2a0
   1b5dc:	4680      	mov	r8, r0
		for (iface = __net_if_start;
   1b5de:	b947      	cbnz	r7, 1b5f2 <net_if_ipv6_select_src_addr+0xee>
		     !dst_iface && iface != __net_if_end;
   1b5e0:	4b45      	ldr	r3, [pc, #276]	; (1b6f8 <net_if_ipv6_select_src_addr+0x1f4>)
   1b5e2:	429e      	cmp	r6, r3
   1b5e4:	d005      	beq.n	1b5f2 <net_if_ipv6_select_src_addr+0xee>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b5e6:	f04f 0e00 	mov.w	lr, #0
	struct in6_addr *src = NULL;
   1b5ea:	4670      	mov	r0, lr
   1b5ec:	e7a9      	b.n	1b542 <net_if_ipv6_select_src_addr+0x3e>
			if (addr) {
   1b5ee:	4640      	mov	r0, r8
   1b5f0:	e7f2      	b.n	1b5d8 <net_if_ipv6_select_src_addr+0xd4>
				src = addr;
			}
		}

		/* If caller has supplied interface, then use that */
		if (dst_iface) {
   1b5f2:	2f00      	cmp	r7, #0
   1b5f4:	d073      	beq.n	1b6de <net_if_ipv6_select_src_addr+0x1da>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b5f6:	2500      	movs	r5, #0
	struct in6_addr *src = NULL;
   1b5f8:	46a8      	mov	r8, r5
   1b5fa:	e009      	b.n	1b610 <net_if_ipv6_select_src_addr+0x10c>
	    addr->address.family == AF_INET6 &&
   1b5fc:	206c      	movs	r0, #108	; 0x6c
   1b5fe:	fb00 7005 	mla	r0, r0, r5, r7
   1b602:	8d80      	ldrh	r0, [r0, #44]	; 0x2c
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b604:	280a      	cmp	r0, #10
   1b606:	d01b      	beq.n	1b640 <net_if_ipv6_select_src_addr+0x13c>
	return false;
   1b608:	2300      	movs	r3, #0
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b60a:	bb73      	cbnz	r3, 1b66a <net_if_ipv6_select_src_addr+0x166>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1b60c:	3501      	adds	r5, #1
   1b60e:	b2ed      	uxtb	r5, r5
   1b610:	2d02      	cmp	r5, #2
   1b612:	d864      	bhi.n	1b6de <net_if_ipv6_select_src_addr+0x1da>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b614:	462e      	mov	r6, r5
   1b616:	236c      	movs	r3, #108	; 0x6c
   1b618:	fb03 f305 	mul.w	r3, r3, r5
   1b61c:	f103 0220 	add.w	r2, r3, #32
   1b620:	443a      	add	r2, r7
   1b622:	320c      	adds	r2, #12
	if (addr->is_used && addr->addr_state == NET_ADDR_PREFERRED &&
   1b624:	443b      	add	r3, r7
   1b626:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1b62a:	2b00      	cmp	r3, #0
   1b62c:	d0ed      	beq.n	1b60a <net_if_ipv6_select_src_addr+0x106>
   1b62e:	206c      	movs	r0, #108	; 0x6c
   1b630:	fb00 7005 	mla	r0, r0, r5, r7
   1b634:	f990 0091 	ldrsb.w	r0, [r0, #145]	; 0x91
   1b638:	2801      	cmp	r0, #1
   1b63a:	d0df      	beq.n	1b5fc <net_if_ipv6_select_src_addr+0xf8>
	return false;
   1b63c:	2300      	movs	r3, #0
   1b63e:	e7e4      	b.n	1b60a <net_if_ipv6_select_src_addr+0x106>
   1b640:	8890      	ldrh	r0, [r2, #4]
	    addr->address.family == AF_INET6 &&
   1b642:	f248 02fe 	movw	r2, #33022	; 0x80fe
   1b646:	4290      	cmp	r0, r2
   1b648:	d1df      	bne.n	1b60a <net_if_ipv6_select_src_addr+0x106>
	return false;
   1b64a:	2300      	movs	r3, #0
   1b64c:	e7dd      	b.n	1b60a <net_if_ipv6_select_src_addr+0x106>
			xor = src->s6_addr[j] ^ dst->s6_addr[j];
   1b64e:	4054      	eors	r4, r2
			for (k = 0; k < 8; k++) {
   1b650:	2300      	movs	r3, #0
   1b652:	2b07      	cmp	r3, #7
   1b654:	d81b      	bhi.n	1b68e <net_if_ipv6_select_src_addr+0x18a>
				if (!(xor & 0x80)) {
   1b656:	f014 0f80 	tst.w	r4, #128	; 0x80
   1b65a:	d118      	bne.n	1b68e <net_if_ipv6_select_src_addr+0x18a>
					len++;
   1b65c:	3001      	adds	r0, #1
   1b65e:	b2c0      	uxtb	r0, r0
					xor <<= 1;
   1b660:	0064      	lsls	r4, r4, #1
   1b662:	b2e4      	uxtb	r4, r4
			for (k = 0; k < 8; k++) {
   1b664:	3301      	adds	r3, #1
   1b666:	b2db      	uxtb	r3, r3
   1b668:	e7f3      	b.n	1b652 <net_if_ipv6_select_src_addr+0x14e>
		if (!is_proper_ipv6_address(&iface->ipv6.unicast[i])) {
   1b66a:	2000      	movs	r0, #0
   1b66c:	4603      	mov	r3, r0
	for (j = 0; j < 16; j++) {
   1b66e:	2b0f      	cmp	r3, #15
   1b670:	d80d      	bhi.n	1b68e <net_if_ipv6_select_src_addr+0x18a>
		if (src->s6_addr[j] == dst->s6_addr[j]) {
   1b672:	5ccc      	ldrb	r4, [r1, r3]
   1b674:	226c      	movs	r2, #108	; 0x6c
   1b676:	fb02 7206 	mla	r2, r2, r6, r7
   1b67a:	441a      	add	r2, r3
   1b67c:	f892 2030 	ldrb.w	r2, [r2, #48]	; 0x30
   1b680:	4294      	cmp	r4, r2
   1b682:	d1e4      	bne.n	1b64e <net_if_ipv6_select_src_addr+0x14a>
			len += 8;
   1b684:	3008      	adds	r0, #8
   1b686:	b2c0      	uxtb	r0, r0
	for (j = 0; j < 16; j++) {
   1b688:	3301      	adds	r3, #1
   1b68a:	b2db      	uxtb	r3, r3
   1b68c:	e7ef      	b.n	1b66e <net_if_ipv6_select_src_addr+0x16a>
		if (len >= *best_so_far) {
   1b68e:	4548      	cmp	r0, r9
   1b690:	d3bc      	bcc.n	1b60c <net_if_ipv6_select_src_addr+0x108>
			src = &iface->ipv6.unicast[i].address.in6_addr;
   1b692:	f04f 086c 	mov.w	r8, #108	; 0x6c
   1b696:	fb08 f806 	mul.w	r8, r8, r6
   1b69a:	f108 0820 	add.w	r8, r8, #32
   1b69e:	44b8      	add	r8, r7
   1b6a0:	f108 0810 	add.w	r8, r8, #16
			*best_so_far = len;
   1b6a4:	4681      	mov	r9, r0
   1b6a6:	e7b1      	b.n	1b60c <net_if_ipv6_select_src_addr+0x108>
		}

	} else {
		for (iface = __net_if_start;
		     !dst_iface && iface != __net_if_end;
		     iface++) {
   1b6a8:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
		for (iface = __net_if_start;
   1b6ac:	b97f      	cbnz	r7, 1b6ce <net_if_ipv6_select_src_addr+0x1ca>
		     !dst_iface && iface != __net_if_end;
   1b6ae:	4b12      	ldr	r3, [pc, #72]	; (1b6f8 <net_if_ipv6_select_src_addr+0x1f4>)
   1b6b0:	429c      	cmp	r4, r3
   1b6b2:	d009      	beq.n	1b6c8 <net_if_ipv6_select_src_addr+0x1c4>
			struct in6_addr *addr;

			addr = net_if_ipv6_get_ll(iface, NET_ADDR_PREFERRED);
   1b6b4:	2101      	movs	r1, #1
   1b6b6:	4620      	mov	r0, r4
   1b6b8:	f7ff fef6 	bl	1b4a8 <net_if_ipv6_get_ll>
			if (addr) {
   1b6bc:	4680      	mov	r8, r0
   1b6be:	2800      	cmp	r0, #0
   1b6c0:	d0f2      	beq.n	1b6a8 <net_if_ipv6_select_src_addr+0x1a4>
   1b6c2:	e006      	b.n	1b6d2 <net_if_ipv6_select_src_addr+0x1ce>
   1b6c4:	4c0b      	ldr	r4, [pc, #44]	; (1b6f4 <net_if_ipv6_select_src_addr+0x1f0>)
   1b6c6:	e7f1      	b.n	1b6ac <net_if_ipv6_select_src_addr+0x1a8>
	struct in6_addr *src = NULL;
   1b6c8:	f04f 0800 	mov.w	r8, #0
   1b6cc:	e001      	b.n	1b6d2 <net_if_ipv6_select_src_addr+0x1ce>
   1b6ce:	f04f 0800 	mov.w	r8, #0
				src = addr;
				break;
			}
		}

		if (dst_iface) {
   1b6d2:	b127      	cbz	r7, 1b6de <net_if_ipv6_select_src_addr+0x1da>
			src = net_if_ipv6_get_ll(dst_iface, NET_ADDR_PREFERRED);
   1b6d4:	2101      	movs	r1, #1
   1b6d6:	4638      	mov	r0, r7
   1b6d8:	f7ff fee6 	bl	1b4a8 <net_if_ipv6_get_ll>
   1b6dc:	4680      	mov	r8, r0
		}
	}

	if (!src) {
   1b6de:	f1b8 0f00 	cmp.w	r8, #0
   1b6e2:	d002      	beq.n	1b6ea <net_if_ipv6_select_src_addr+0x1e6>
		return net_ipv6_unspecified_address();
	}

	return src;
   1b6e4:	4640      	mov	r0, r8
}
   1b6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
		return net_ipv6_unspecified_address();
   1b6ea:	f003 fd67 	bl	1f1bc <net_ipv6_unspecified_address>
   1b6ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1b6f2:	bf00      	nop
   1b6f4:	2000ce00 	.word	0x2000ce00
   1b6f8:	2000d0a0 	.word	0x2000d0a0

0001b6fc <net_if_ipv6_calc_reachable_time>:

u32_t net_if_ipv6_calc_reachable_time(struct net_if *iface)
{
   1b6fc:	b510      	push	{r4, lr}
   1b6fe:	4604      	mov	r4, r0
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
		sys_rand32_get() %
   1b700:	f7e5 ffde 	bl	16c0 <sys_rand32_get>
		(MAX_RANDOM_FACTOR * iface->ipv6.base_reachable_time -
   1b704:	f8d4 3288 	ldr.w	r3, [r4, #648]	; 0x288
	return MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time +
   1b708:	fbb0 f2f3 	udiv	r2, r0, r3
		 MIN_RANDOM_FACTOR * iface->ipv6.base_reachable_time);
}
   1b70c:	fb03 0012 	mls	r0, r3, r2, r0
   1b710:	bd10      	pop	{r4, pc}
	...

0001b714 <net_if_call_link_cb>:
	sys_slist_find_and_remove(&link_callbacks, &link->node);
}

void net_if_call_link_cb(struct net_if *iface, struct net_linkaddr *lladdr,
			 int status)
{
   1b714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1b716:	4605      	mov	r5, r0
   1b718:	460e      	mov	r6, r1
   1b71a:	4617      	mov	r7, r2
	return list->head;
   1b71c:	4b11      	ldr	r3, [pc, #68]	; (1b764 <net_if_call_link_cb+0x50>)
   1b71e:	681b      	ldr	r3, [r3, #0]
	struct net_if_link_cb *link, *tmp;

	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b720:	b11b      	cbz	r3, 1b72a <net_if_call_link_cb+0x16>
   1b722:	461c      	mov	r4, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b724:	b143      	cbz	r3, 1b738 <net_if_call_link_cb+0x24>
	return node->next;
   1b726:	681c      	ldr	r4, [r3, #0]
   1b728:	e006      	b.n	1b738 <net_if_call_link_cb+0x24>
   1b72a:	461c      	mov	r4, r3
   1b72c:	e004      	b.n	1b738 <net_if_call_link_cb+0x24>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b72e:	4623      	mov	r3, r4
   1b730:	e00e      	b.n	1b750 <net_if_call_link_cb+0x3c>
   1b732:	4622      	mov	r2, r4
   1b734:	4623      	mov	r3, r4
   1b736:	4614      	mov	r4, r2
   1b738:	b193      	cbz	r3, 1b760 <net_if_call_link_cb+0x4c>
		link->cb(iface, lladdr, status);
   1b73a:	685b      	ldr	r3, [r3, #4]
   1b73c:	463a      	mov	r2, r7
   1b73e:	4631      	mov	r1, r6
   1b740:	4628      	mov	r0, r5
   1b742:	4798      	blx	r3
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&link_callbacks, link, tmp, node) {
   1b744:	2c00      	cmp	r4, #0
   1b746:	d0f4      	beq.n	1b732 <net_if_call_link_cb+0x1e>
   1b748:	4622      	mov	r2, r4
   1b74a:	2c00      	cmp	r4, #0
   1b74c:	d0ef      	beq.n	1b72e <net_if_call_link_cb+0x1a>
	return node->next;
   1b74e:	6823      	ldr	r3, [r4, #0]
   1b750:	b113      	cbz	r3, 1b758 <net_if_call_link_cb+0x44>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b752:	b11a      	cbz	r2, 1b75c <net_if_call_link_cb+0x48>
	return node->next;
   1b754:	6822      	ldr	r2, [r4, #0]
   1b756:	e7ed      	b.n	1b734 <net_if_call_link_cb+0x20>
   1b758:	2200      	movs	r2, #0
   1b75a:	e7eb      	b.n	1b734 <net_if_call_link_cb+0x20>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1b75c:	2200      	movs	r2, #0
   1b75e:	e7e9      	b.n	1b734 <net_if_call_link_cb+0x20>
	}
}
   1b760:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1b762:	bf00      	nop
   1b764:	20001be4 	.word	0x20001be4

0001b768 <net_if_send_data>:
{
   1b768:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1b76c:	4606      	mov	r6, r0
   1b76e:	460c      	mov	r4, r1
	return pkt->context;
   1b770:	68cf      	ldr	r7, [r1, #12]
	return &pkt->lladdr_src;
}

static inline struct net_linkaddr *net_pkt_ll_dst(struct net_pkt *pkt)
{
	return &pkt->lladdr_dst;
   1b772:	f101 0928 	add.w	r9, r1, #40	; 0x28
	return pkt->token;
   1b776:	f8d1 a010 	ldr.w	sl, [r1, #16]
   1b77a:	f3bf 8f5b 	dmb	ish
   1b77e:	68c3      	ldr	r3, [r0, #12]
   1b780:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b784:	f013 0f01 	tst.w	r3, #1
   1b788:	d10a      	bne.n	1b7a0 <net_if_send_data+0x38>
		status = -ENETDOWN;
   1b78a:	f06f 0872 	mvn.w	r8, #114	; 0x72
		verdict = NET_DROP;
   1b78e:	2502      	movs	r5, #2
	if (context && verdict == NET_DROP) {
   1b790:	b10f      	cbz	r7, 1b796 <net_if_send_data+0x2e>
   1b792:	2d02      	cmp	r5, #2
   1b794:	d02e      	beq.n	1b7f4 <net_if_send_data+0x8c>
	if (verdict == NET_DROP && dst->addr) {
   1b796:	2d02      	cmp	r5, #2
   1b798:	d050      	beq.n	1b83c <net_if_send_data+0xd4>
}
   1b79a:	4628      	mov	r0, r5
   1b79c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   1b7a0:	f3bf 8f5b 	dmb	ish
   1b7a4:	68c3      	ldr	r3, [r0, #12]
   1b7a6:	f3bf 8f5b 	dmb	ish
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b7aa:	f013 0f02 	tst.w	r3, #2
   1b7ae:	d101      	bne.n	1b7b4 <net_if_send_data+0x4c>
	    !net_pkt_ll_src(pkt)->addr) {
   1b7b0:	6a0b      	ldr	r3, [r1, #32]
	if (!atomic_test_bit(iface->flags, NET_IF_POINTOPOINT) &&
   1b7b2:	b173      	cbz	r3, 1b7d2 <net_if_send_data+0x6a>
	return pkt->family;
   1b7b4:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1b7b8:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1b7bc:	2b0a      	cmp	r3, #10
   1b7be:	d00f      	beq.n	1b7e0 <net_if_send_data+0x78>
   1b7c0:	4621      	mov	r1, r4
	verdict = iface->l2->send(iface, pkt);
   1b7c2:	6873      	ldr	r3, [r6, #4]
   1b7c4:	685b      	ldr	r3, [r3, #4]
   1b7c6:	4630      	mov	r0, r6
   1b7c8:	4798      	blx	r3
   1b7ca:	4605      	mov	r5, r0
	int status = -EIO;
   1b7cc:	f06f 0804 	mvn.w	r8, #4
   1b7d0:	e7de      	b.n	1b790 <net_if_send_data+0x28>
	return net_if_get_link_addr(pkt->iface);
   1b7d2:	694b      	ldr	r3, [r1, #20]
		net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   1b7d4:	691a      	ldr	r2, [r3, #16]
   1b7d6:	620a      	str	r2, [r1, #32]
		net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   1b7d8:	7d1b      	ldrb	r3, [r3, #20]
   1b7da:	f881 3024 	strb.w	r3, [r1, #36]	; 0x24
   1b7de:	e7e9      	b.n	1b7b4 <net_if_send_data+0x4c>
		pkt = net_ipv6_prepare_for_send(pkt);
   1b7e0:	4620      	mov	r0, r4
   1b7e2:	f005 f9fb 	bl	20bdc <net_ipv6_prepare_for_send>
		if (!pkt) {
   1b7e6:	4601      	mov	r1, r0
   1b7e8:	2800      	cmp	r0, #0
   1b7ea:	d1ea      	bne.n	1b7c2 <net_if_send_data+0x5a>
	int status = -EIO;
   1b7ec:	f06f 0804 	mvn.w	r8, #4
			verdict = NET_CONTINUE;
   1b7f0:	2501      	movs	r5, #1
   1b7f2:	e7cd      	b.n	1b790 <net_if_send_data+0x28>
	if (!context) {
   1b7f4:	2f00      	cmp	r7, #0
   1b7f6:	d0ce      	beq.n	1b796 <net_if_send_data+0x2e>
	if (context->send_cb) {
   1b7f8:	f8d7 b034 	ldr.w	fp, [r7, #52]	; 0x34
   1b7fc:	f1bb 0f00 	cmp.w	fp, #0
   1b800:	d004      	beq.n	1b80c <net_if_send_data+0xa4>
		context->send_cb(context, status, token, context->user_data);
   1b802:	683b      	ldr	r3, [r7, #0]
   1b804:	4652      	mov	r2, sl
   1b806:	4641      	mov	r1, r8
   1b808:	4638      	mov	r0, r7
   1b80a:	47d8      	blx	fp
static inline
enum net_ip_protocol net_context_get_ip_proto(struct net_context *context)
{
	NET_ASSERT(context);

	if (context->flags & NET_CONTEXT_PROTO) {
   1b80c:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b810:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b814:	d009      	beq.n	1b82a <net_if_send_data+0xc2>
		return IPPROTO_TCP;
   1b816:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b818:	2b11      	cmp	r3, #17
   1b81a:	d008      	beq.n	1b82e <net_if_send_data+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b81c:	2b06      	cmp	r3, #6
   1b81e:	d1ba      	bne.n	1b796 <net_if_send_data+0x2e>
	net_stats.tcp.resent += bytes;
}

static inline void net_stats_update_tcp_seg_sent(void)
{
	net_stats.tcp.sent++;
   1b820:	4a0b      	ldr	r2, [pc, #44]	; (1b850 <net_if_send_data+0xe8>)
   1b822:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b824:	3301      	adds	r3, #1
   1b826:	6593      	str	r3, [r2, #88]	; 0x58
   1b828:	e7b5      	b.n	1b796 <net_if_send_data+0x2e>
	}

	return IPPROTO_UDP;
   1b82a:	2311      	movs	r3, #17
   1b82c:	e7f4      	b.n	1b818 <net_if_send_data+0xb0>
	net_stats.udp.sent++;
   1b82e:	4a08      	ldr	r2, [pc, #32]	; (1b850 <net_if_send_data+0xe8>)
   1b830:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b834:	3301      	adds	r3, #1
   1b836:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b83a:	e7ac      	b.n	1b796 <net_if_send_data+0x2e>
	if (verdict == NET_DROP && dst->addr) {
   1b83c:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   1b83e:	2b00      	cmp	r3, #0
   1b840:	d0ab      	beq.n	1b79a <net_if_send_data+0x32>
		net_if_call_link_cb(iface, dst, status);
   1b842:	4642      	mov	r2, r8
   1b844:	4649      	mov	r1, r9
   1b846:	4630      	mov	r0, r6
   1b848:	f7ff ff64 	bl	1b714 <net_if_call_link_cb>
   1b84c:	e7a5      	b.n	1b79a <net_if_send_data+0x32>
   1b84e:	bf00      	nop
   1b850:	20002ab8 	.word	0x20002ab8

0001b854 <net_if_tx>:
{
   1b854:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1b858:	4606      	mov	r6, r0
	const struct net_if_api *api = iface->dev->driver_api;
   1b85a:	f850 3b18 	ldr.w	r3, [r0], #24
   1b85e:	f8d3 9004 	ldr.w	r9, [r3, #4]
	pkt = k_fifo_get(&iface->tx_queue, K_NO_WAIT);
   1b862:	2100      	movs	r1, #0
   1b864:	f00c fd56 	bl	28314 <k_queue_get>
	if (!pkt) {
   1b868:	2800      	cmp	r0, #0
   1b86a:	d062      	beq.n	1b932 <net_if_tx+0xde>
   1b86c:	4605      	mov	r5, r0
	return &pkt->lladdr_dst;
   1b86e:	f100 0828 	add.w	r8, r0, #40	; 0x28
	return pkt->context;
   1b872:	68c7      	ldr	r7, [r0, #12]
	return pkt->token;
   1b874:	f8d0 a010 	ldr.w	sl, [r0, #16]
   1b878:	f3bf 8f5b 	dmb	ish
   1b87c:	68f3      	ldr	r3, [r6, #12]
   1b87e:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1b882:	f013 0f01 	tst.w	r3, #1
   1b886:	d039      	beq.n	1b8fc <net_if_tx+0xa8>
	return net_buf_frags_len(pkt->frags);
   1b888:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1b88a:	2400      	movs	r4, #0
   1b88c:	e002      	b.n	1b894 <net_if_tx+0x40>
		bytes += buf->len;
   1b88e:	899a      	ldrh	r2, [r3, #12]
   1b890:	4414      	add	r4, r2
		buf = buf->frags;
   1b892:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1b894:	2b00      	cmp	r3, #0
   1b896:	d1fa      	bne.n	1b88e <net_if_tx+0x3a>
	pkt->sent_or_eof = sent;
   1b898:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
	pkt->pkt_queued = send;
   1b89c:	f043 0301 	orr.w	r3, r3, #1
   1b8a0:	f36f 0341 	bfc	r3, #1, #1
   1b8a4:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		status = api->send(iface, pkt);
   1b8a8:	f8d9 3004 	ldr.w	r3, [r9, #4]
   1b8ac:	4629      	mov	r1, r5
   1b8ae:	4630      	mov	r0, r6
   1b8b0:	4798      	blx	r3
   1b8b2:	4681      	mov	r9, r0
	if (status < 0) {
   1b8b4:	f1b9 0f00 	cmp.w	r9, #0
   1b8b8:	db23      	blt.n	1b902 <net_if_tx+0xae>
	net_stats.bytes.sent += bytes;
   1b8ba:	4a21      	ldr	r2, [pc, #132]	; (1b940 <net_if_tx+0xec>)
   1b8bc:	6853      	ldr	r3, [r2, #4]
   1b8be:	441c      	add	r4, r3
   1b8c0:	6054      	str	r4, [r2, #4]
	if (context) {
   1b8c2:	b18f      	cbz	r7, 1b8e8 <net_if_tx+0x94>
	if (!context) {
   1b8c4:	b187      	cbz	r7, 1b8e8 <net_if_tx+0x94>
	if (context->send_cb) {
   1b8c6:	6b7c      	ldr	r4, [r7, #52]	; 0x34
   1b8c8:	b124      	cbz	r4, 1b8d4 <net_if_tx+0x80>
		context->send_cb(context, status, token, context->user_data);
   1b8ca:	683b      	ldr	r3, [r7, #0]
   1b8cc:	4652      	mov	r2, sl
   1b8ce:	4649      	mov	r1, r9
   1b8d0:	4638      	mov	r0, r7
   1b8d2:	47a0      	blx	r4
	if (context->flags & NET_CONTEXT_PROTO) {
   1b8d4:	f897 305d 	ldrb.w	r3, [r7, #93]	; 0x5d
   1b8d8:	f013 0f40 	tst.w	r3, #64	; 0x40
   1b8dc:	d01b      	beq.n	1b916 <net_if_tx+0xc2>
		return IPPROTO_TCP;
   1b8de:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1b8e0:	2b11      	cmp	r3, #17
   1b8e2:	d01a      	beq.n	1b91a <net_if_tx+0xc6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1b8e4:	2b06      	cmp	r3, #6
   1b8e6:	d01f      	beq.n	1b928 <net_if_tx+0xd4>
	if (dst->addr) {
   1b8e8:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1b8ea:	b32b      	cbz	r3, 1b938 <net_if_tx+0xe4>
		net_if_call_link_cb(iface, dst, status);
   1b8ec:	464a      	mov	r2, r9
   1b8ee:	4641      	mov	r1, r8
   1b8f0:	4630      	mov	r0, r6
   1b8f2:	f7ff ff0f 	bl	1b714 <net_if_call_link_cb>
	return true;
   1b8f6:	2001      	movs	r0, #1
   1b8f8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		status = -ENETDOWN;
   1b8fc:	f06f 0972 	mvn.w	r9, #114	; 0x72
   1b900:	e7d8      	b.n	1b8b4 <net_if_tx+0x60>
	pkt->sent_or_eof = sent;
   1b902:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1b906:	f36f 0300 	bfc	r3, #0, #1
   1b90a:	f885 3038 	strb.w	r3, [r5, #56]	; 0x38
		net_pkt_unref(pkt);
   1b90e:	4628      	mov	r0, r5
   1b910:	f001 fa93 	bl	1ce3a <net_pkt_unref>
   1b914:	e7d5      	b.n	1b8c2 <net_if_tx+0x6e>
	return IPPROTO_UDP;
   1b916:	2311      	movs	r3, #17
   1b918:	e7e2      	b.n	1b8e0 <net_if_tx+0x8c>
	net_stats.udp.sent++;
   1b91a:	4a09      	ldr	r2, [pc, #36]	; (1b940 <net_if_tx+0xec>)
   1b91c:	f8d2 3084 	ldr.w	r3, [r2, #132]	; 0x84
   1b920:	3301      	adds	r3, #1
   1b922:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
   1b926:	e7df      	b.n	1b8e8 <net_if_tx+0x94>
	net_stats.tcp.sent++;
   1b928:	4a05      	ldr	r2, [pc, #20]	; (1b940 <net_if_tx+0xec>)
   1b92a:	6d93      	ldr	r3, [r2, #88]	; 0x58
   1b92c:	3301      	adds	r3, #1
   1b92e:	6593      	str	r3, [r2, #88]	; 0x58
   1b930:	e7da      	b.n	1b8e8 <net_if_tx+0x94>
		return false;
   1b932:	2000      	movs	r0, #0
   1b934:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return true;
   1b938:	2001      	movs	r0, #1
}
   1b93a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   1b93e:	bf00      	nop
   1b940:	20002ab8 	.word	0x20002ab8

0001b944 <net_if_flush_tx>:
	return (!list->head);
   1b944:	6983      	ldr	r3, [r0, #24]
	if (k_fifo_is_empty(&iface->tx_queue)) {
   1b946:	b14b      	cbz	r3, 1b95c <net_if_flush_tx+0x18>
{
   1b948:	b510      	push	{r4, lr}
   1b94a:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b94c:	f00c fef8 	bl	28740 <_impl_k_yield>
		if (!net_if_tx(iface)) {
   1b950:	4620      	mov	r0, r4
   1b952:	f7ff ff7f 	bl	1b854 <net_if_tx>
   1b956:	2800      	cmp	r0, #0
   1b958:	d1fa      	bne.n	1b950 <net_if_flush_tx+0xc>
   1b95a:	bd10      	pop	{r4, pc}
   1b95c:	4770      	bx	lr

0001b95e <net_if_process_events>:
{
   1b95e:	b538      	push	{r3, r4, r5, lr}
   1b960:	4604      	mov	r4, r0
   1b962:	460d      	mov	r5, r1
	for (; ev_count; event++, ev_count--) {
   1b964:	e001      	b.n	1b96a <net_if_process_events+0xc>
   1b966:	3414      	adds	r4, #20
   1b968:	3d01      	subs	r5, #1
   1b96a:	b145      	cbz	r5, 1b97e <net_if_process_events+0x20>
		switch (event->state) {
   1b96c:	7b63      	ldrb	r3, [r4, #13]
   1b96e:	091b      	lsrs	r3, r3, #4
   1b970:	2b04      	cmp	r3, #4
   1b972:	d1f8      	bne.n	1b966 <net_if_process_events+0x8>
			iface = CONTAINER_OF(event->fifo, struct net_if,
   1b974:	6920      	ldr	r0, [r4, #16]
			net_if_tx(iface);
   1b976:	3818      	subs	r0, #24
   1b978:	f7ff ff6c 	bl	1b854 <net_if_tx>
			break;
   1b97c:	e7f3      	b.n	1b966 <net_if_process_events+0x8>
}
   1b97e:	bd38      	pop	{r3, r4, r5, pc}

0001b980 <net_if_tx_thread>:
{
   1b980:	b538      	push	{r3, r4, r5, lr}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1b982:	f00d f836 	bl	289f2 <_impl_k_sem_give>
		ev_count = net_if_prepare_events();
   1b986:	f7ff f849 	bl	1aa1c <net_if_prepare_events>
   1b98a:	4605      	mov	r5, r0
		ret = k_poll(__net_if_event_start, ev_count, K_FOREVER);
   1b98c:	4c06      	ldr	r4, [pc, #24]	; (1b9a8 <net_if_tx_thread+0x28>)
   1b98e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1b992:	4601      	mov	r1, r0
   1b994:	4620      	mov	r0, r4
   1b996:	f00c f98b 	bl	27cb0 <k_poll>
		net_if_process_events(__net_if_event_start, ev_count);
   1b99a:	4629      	mov	r1, r5
   1b99c:	4620      	mov	r0, r4
   1b99e:	f7ff ffde 	bl	1b95e <net_if_process_events>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   1b9a2:	f00c fecd 	bl	28740 <_impl_k_yield>
   1b9a6:	e7ee      	b.n	1b986 <net_if_tx_thread+0x6>
   1b9a8:	2000d0a0 	.word	0x2000d0a0

0001b9ac <net_if_get_by_index>:

struct net_if *net_if_get_by_index(u8_t index)
{
	if (&__net_if_start[index] >= __net_if_end) {
   1b9ac:	4a05      	ldr	r2, [pc, #20]	; (1b9c4 <net_if_get_by_index+0x18>)
   1b9ae:	f44f 7328 	mov.w	r3, #672	; 0x2a0
   1b9b2:	fb03 2000 	mla	r0, r3, r0, r2
   1b9b6:	4b04      	ldr	r3, [pc, #16]	; (1b9c8 <net_if_get_by_index+0x1c>)
   1b9b8:	4298      	cmp	r0, r3
   1b9ba:	d200      	bcs.n	1b9be <net_if_get_by_index+0x12>
		NET_DBG("Index %d is too large", index);
		return NULL;
	}

	return &__net_if_start[index];
}
   1b9bc:	4770      	bx	lr
		return NULL;
   1b9be:	2000      	movs	r0, #0
   1b9c0:	e7fc      	b.n	1b9bc <net_if_get_by_index+0x10>
   1b9c2:	bf00      	nop
   1b9c4:	2000ce00 	.word	0x2000ce00
   1b9c8:	2000d0a0 	.word	0x2000d0a0

0001b9cc <net_if_get_by_iface>:

u8_t net_if_get_by_iface(struct net_if *iface)
{
	NET_ASSERT(iface >= __net_if_start && iface < __net_if_end);

	return iface - __net_if_start;
   1b9cc:	4b03      	ldr	r3, [pc, #12]	; (1b9dc <net_if_get_by_iface+0x10>)
   1b9ce:	1ac0      	subs	r0, r0, r3
   1b9d0:	1140      	asrs	r0, r0, #5
   1b9d2:	4b03      	ldr	r3, [pc, #12]	; (1b9e0 <net_if_get_by_iface+0x14>)
   1b9d4:	fb03 f000 	mul.w	r0, r3, r0
}
   1b9d8:	b2c0      	uxtb	r0, r0
   1b9da:	4770      	bx	lr
   1b9dc:	2000ce00 	.word	0x2000ce00
   1b9e0:	3cf3cf3d 	.word	0x3cf3cf3d

0001b9e4 <net_if_foreach>:

void net_if_foreach(net_if_cb_t cb, void *user_data)
{
   1b9e4:	b570      	push	{r4, r5, r6, lr}
   1b9e6:	4606      	mov	r6, r0
   1b9e8:	460d      	mov	r5, r1
	struct net_if *iface;

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b9ea:	4c05      	ldr	r4, [pc, #20]	; (1ba00 <net_if_foreach+0x1c>)
   1b9ec:	e004      	b.n	1b9f8 <net_if_foreach+0x14>
		cb(iface, user_data);
   1b9ee:	4629      	mov	r1, r5
   1b9f0:	4620      	mov	r0, r4
   1b9f2:	47b0      	blx	r6
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1b9f4:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1b9f8:	4b02      	ldr	r3, [pc, #8]	; (1ba04 <net_if_foreach+0x20>)
   1b9fa:	429c      	cmp	r4, r3
   1b9fc:	d1f7      	bne.n	1b9ee <net_if_foreach+0xa>
	}
}
   1b9fe:	bd70      	pop	{r4, r5, r6, pc}
   1ba00:	2000ce00 	.word	0x2000ce00
   1ba04:	2000d0a0 	.word	0x2000d0a0

0001ba08 <net_if_up>:

int net_if_up(struct net_if *iface)
{
   1ba08:	b570      	push	{r4, r5, r6, lr}
   1ba0a:	f3bf 8f5b 	dmb	ish
   1ba0e:	68c5      	ldr	r5, [r0, #12]
   1ba10:	f3bf 8f5b 	dmb	ish
	int status;

	NET_DBG("iface %p", iface);

	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1ba14:	f015 0501 	ands.w	r5, r5, #1
   1ba18:	d123      	bne.n	1ba62 <net_if_up+0x5a>
   1ba1a:	f100 060c 	add.w	r6, r0, #12
   1ba1e:	4604      	mov	r4, r0
		return 0;
	}

	/* If the L2 does not support enable just set the flag */
	if (!iface->l2->enable) {
   1ba20:	6843      	ldr	r3, [r0, #4]
   1ba22:	68db      	ldr	r3, [r3, #12]
   1ba24:	b11b      	cbz	r3, 1ba2e <net_if_up+0x26>
		goto done;
	}

	/* Notify L2 to enable the interface */
	status = iface->l2->enable(iface, true);
   1ba26:	2101      	movs	r1, #1
   1ba28:	4798      	blx	r3
	if (status < 0) {
   1ba2a:	2800      	cmp	r0, #0
   1ba2c:	db1b      	blt.n	1ba66 <net_if_up+0x5e>
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1ba2e:	f3bf 8f5b 	dmb	ish
   1ba32:	e856 3f00 	ldrex	r3, [r6]
   1ba36:	f043 0301 	orr.w	r3, r3, #1
   1ba3a:	e846 3200 	strex	r2, r3, [r6]
   1ba3e:	2a00      	cmp	r2, #0
   1ba40:	d1f7      	bne.n	1ba32 <net_if_up+0x2a>
   1ba42:	f3bf 8f5b 	dmb	ish
done:
	atomic_set_bit(iface->flags, NET_IF_UP);

#if defined(CONFIG_NET_IPV6_DAD)
	NET_DBG("Starting DAD for iface %p", iface);
	net_if_start_dad(iface);
   1ba46:	4620      	mov	r0, r4
   1ba48:	f7ff f91e 	bl	1ac88 <net_if_start_dad>
	join_mcast_solicit_node(iface, &iface->ipv6.mcast[0].address.in6_addr);
#endif

#if defined(CONFIG_NET_IPV6_ND)
	NET_DBG("Starting ND/RS for iface %p", iface);
	net_if_start_rs(iface);
   1ba4c:	4620      	mov	r0, r4
   1ba4e:	f7ff f821 	bl	1aa94 <net_if_start_rs>
   1ba52:	2300      	movs	r3, #0
   1ba54:	461a      	mov	r2, r3
   1ba56:	4621      	mov	r1, r4
   1ba58:	4804      	ldr	r0, [pc, #16]	; (1ba6c <net_if_up+0x64>)
   1ba5a:	f006 fe61 	bl	22720 <net_mgmt_event_notify_with_info>
#endif

	net_mgmt_event_notify(NET_EVENT_IF_UP, iface);

	return 0;
}
   1ba5e:	4628      	mov	r0, r5
   1ba60:	bd70      	pop	{r4, r5, r6, pc}
		return 0;
   1ba62:	2500      	movs	r5, #0
   1ba64:	e7fb      	b.n	1ba5e <net_if_up+0x56>
		return status;
   1ba66:	4605      	mov	r5, r0
   1ba68:	e7f9      	b.n	1ba5e <net_if_up+0x56>
   1ba6a:	bf00      	nop
   1ba6c:	d0010002 	.word	0xd0010002

0001ba70 <net_if_down>:

int net_if_down(struct net_if *iface)
{
   1ba70:	b510      	push	{r4, lr}
   1ba72:	4604      	mov	r4, r0
	int status;

	NET_DBG("iface %p", iface);

	leave_mcast_all(iface);
   1ba74:	f7fe ffaf 	bl	1a9d6 <leave_mcast_all>

	net_if_flush_tx(iface);
   1ba78:	4620      	mov	r0, r4
   1ba7a:	f7ff ff63 	bl	1b944 <net_if_flush_tx>

	/* If the L2 does not support enable just clear the flag */
	if (!iface->l2->enable) {
   1ba7e:	6863      	ldr	r3, [r4, #4]
   1ba80:	68db      	ldr	r3, [r3, #12]
   1ba82:	b123      	cbz	r3, 1ba8e <net_if_down+0x1e>
		goto done;
	}

	/* Notify L2 to disable the interface */
	status = iface->l2->enable(iface, false);
   1ba84:	2100      	movs	r1, #0
   1ba86:	4620      	mov	r0, r4
   1ba88:	4798      	blx	r3
	if (status < 0) {
   1ba8a:	2800      	cmp	r0, #0
   1ba8c:	db14      	blt.n	1bab8 <net_if_down+0x48>
		return status;
	}

done:
	atomic_clear_bit(iface->flags, NET_IF_UP);
   1ba8e:	f104 030c 	add.w	r3, r4, #12
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   1ba92:	f3bf 8f5b 	dmb	ish
   1ba96:	e853 2f00 	ldrex	r2, [r3]
   1ba9a:	f022 0201 	bic.w	r2, r2, #1
   1ba9e:	e843 2100 	strex	r1, r2, [r3]
   1baa2:	2900      	cmp	r1, #0
   1baa4:	d1f7      	bne.n	1ba96 <net_if_down+0x26>
   1baa6:	f3bf 8f5b 	dmb	ish
   1baaa:	2300      	movs	r3, #0
   1baac:	461a      	mov	r2, r3
   1baae:	4621      	mov	r1, r4
   1bab0:	4802      	ldr	r0, [pc, #8]	; (1babc <net_if_down+0x4c>)
   1bab2:	f006 fe35 	bl	22720 <net_mgmt_event_notify_with_info>

	net_mgmt_event_notify(NET_EVENT_IF_DOWN, iface);

	return 0;
   1bab6:	2000      	movs	r0, #0
}
   1bab8:	bd10      	pop	{r4, pc}
   1baba:	bf00      	nop
   1babc:	d0010001 	.word	0xd0010001

0001bac0 <net_if_init>:

void net_if_init(struct k_sem *startup_sync)
{
   1bac0:	b570      	push	{r4, r5, r6, lr}
   1bac2:	b086      	sub	sp, #24
   1bac4:	4606      	mov	r6, r0
	struct net_if *iface;

	NET_DBG("");

	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bac6:	4c1b      	ldr	r4, [pc, #108]	; (1bb34 <net_if_init+0x74>)
   1bac8:	e01b      	b.n	1bb02 <net_if_init+0x42>
	const struct net_if_api *api = iface->dev->driver_api;
   1baca:	4620      	mov	r0, r4
   1bacc:	f850 3b18 	ldr.w	r3, [r0], #24
   1bad0:	685d      	ldr	r5, [r3, #4]
	k_fifo_init(&iface->tx_queue);
   1bad2:	f00c fbc4 	bl	2825e <k_queue_init>
	api->init(iface);
   1bad6:	682b      	ldr	r3, [r5, #0]
   1bad8:	4620      	mov	r0, r4
   1bada:	4798      	blx	r3
#if defined(CONFIG_NET_IPV4)
		iface->ipv4.ttl = CONFIG_NET_INITIAL_TTL;
#endif

#if defined(CONFIG_NET_IPV6)
		iface->ipv6.hop_limit = CONFIG_NET_INITIAL_HOP_LIMIT;
   1badc:	2340      	movs	r3, #64	; 0x40
   1bade:	f884 3294 	strb.w	r3, [r4, #660]	; 0x294
		iface->ipv6.base_reachable_time = REACHABLE_TIME;
   1bae2:	f247 5330 	movw	r3, #30000	; 0x7530
   1bae6:	f8c4 3288 	str.w	r3, [r4, #648]	; 0x288
 *
 * @param iface Network interface
 */
static inline void net_if_ipv6_set_reachable_time(struct net_if *iface)
{
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   1baea:	4620      	mov	r0, r4
   1baec:	f7ff fe06 	bl	1b6fc <net_if_ipv6_calc_reachable_time>
   1baf0:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c

		net_if_ipv6_set_reachable_time(iface);

#if defined(CONFIG_NET_IPV6_ND)
		k_delayed_work_init(&iface->ipv6.rs_timer, rs_timeout);
   1baf4:	4910      	ldr	r1, [pc, #64]	; (1bb38 <net_if_init+0x78>)
   1baf6:	f504 7018 	add.w	r0, r4, #608	; 0x260
   1bafa:	f00d fd4b 	bl	29594 <k_delayed_work_init>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bafe:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1bb02:	4b0e      	ldr	r3, [pc, #56]	; (1bb3c <net_if_init+0x7c>)
   1bb04:	429c      	cmp	r4, r3
   1bb06:	d1e0      	bne.n	1baca <net_if_init+0xa>
#endif
#endif
	}

	if (iface == __net_if_start) {
   1bb08:	4b0a      	ldr	r3, [pc, #40]	; (1bb34 <net_if_init+0x74>)
   1bb0a:	429c      	cmp	r4, r3
   1bb0c:	d010      	beq.n	1bb30 <net_if_init+0x70>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   1bb0e:	2300      	movs	r3, #0
   1bb10:	9305      	str	r3, [sp, #20]
   1bb12:	2201      	movs	r2, #1
   1bb14:	9204      	str	r2, [sp, #16]
   1bb16:	f06f 0208 	mvn.w	r2, #8
   1bb1a:	9203      	str	r2, [sp, #12]
   1bb1c:	9302      	str	r3, [sp, #8]
   1bb1e:	9301      	str	r3, [sp, #4]
   1bb20:	9600      	str	r6, [sp, #0]
   1bb22:	4b07      	ldr	r3, [pc, #28]	; (1bb40 <net_if_init+0x80>)
   1bb24:	f44f 6296 	mov.w	r2, #1200	; 0x4b0
   1bb28:	4906      	ldr	r1, [pc, #24]	; (1bb44 <net_if_init+0x84>)
   1bb2a:	4807      	ldr	r0, [pc, #28]	; (1bb48 <net_if_init+0x88>)
   1bb2c:	f00d f9e0 	bl	28ef0 <_impl_k_thread_create>
	k_thread_create(&tx_thread_data, tx_stack,
			K_THREAD_STACK_SIZEOF(tx_stack),
			(k_thread_entry_t)net_if_tx_thread,
			startup_sync, NULL, NULL, K_PRIO_COOP(7),
			K_ESSENTIAL, K_NO_WAIT);
}
   1bb30:	b006      	add	sp, #24
   1bb32:	bd70      	pop	{r4, r5, r6, pc}
   1bb34:	2000ce00 	.word	0x2000ce00
   1bb38:	0001aab5 	.word	0x0001aab5
   1bb3c:	2000d0a0 	.word	0x2000d0a0
   1bb40:	0001b981 	.word	0x0001b981
   1bb44:	20004d78 	.word	0x20004d78
   1bb48:	20000428 	.word	0x20000428

0001bb4c <net_if_post_init>:

void net_if_post_init(void)
{
   1bb4c:	b510      	push	{r4, lr}
	struct net_if *iface;

	NET_DBG("");

	/* After TX is running, attempt to bring the interface up */
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bb4e:	4c05      	ldr	r4, [pc, #20]	; (1bb64 <net_if_post_init+0x18>)
   1bb50:	e004      	b.n	1bb5c <net_if_post_init+0x10>
		net_if_up(iface);
   1bb52:	4620      	mov	r0, r4
   1bb54:	f7ff ff58 	bl	1ba08 <net_if_up>
	for (iface = __net_if_start; iface != __net_if_end; iface++) {
   1bb58:	f504 7428 	add.w	r4, r4, #672	; 0x2a0
   1bb5c:	4b02      	ldr	r3, [pc, #8]	; (1bb68 <net_if_post_init+0x1c>)
   1bb5e:	429c      	cmp	r4, r3
   1bb60:	d1f7      	bne.n	1bb52 <net_if_post_init+0x6>

	/* RPL init must be done after the network interface is up
	 * as the RPL code wants to add multicast address to interface.
	 */
	net_rpl_init();
}
   1bb62:	bd10      	pop	{r4, pc}
   1bb64:	2000ce00 	.word	0x2000ce00
   1bb68:	2000d0a0 	.word	0x2000d0a0

0001bb6c <check_used_port>:

static int check_used_port(enum net_ip_protocol ip_proto,
			   u16_t local_port,
			   const struct sockaddr *local_addr)

{
   1bb6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bb6e:	4605      	mov	r5, r0
   1bb70:	460e      	mov	r6, r1
   1bb72:	4617      	mov	r7, r2
	int i;

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bb74:	2400      	movs	r4, #0
   1bb76:	e003      	b.n	1bb80 <check_used_port+0x14>
   1bb78:	2311      	movs	r3, #17
		if (!net_context_is_used(&contexts[i])) {
			continue;
		}

		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1bb7a:	42ab      	cmp	r3, r5
   1bb7c:	d010      	beq.n	1bba0 <check_used_port+0x34>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bb7e:	3401      	adds	r4, #1
   1bb80:	2c05      	cmp	r4, #5
   1bb82:	dc2b      	bgt.n	1bbdc <check_used_port+0x70>
	return context->flags & NET_CONTEXT_IN_USE;
   1bb84:	2368      	movs	r3, #104	; 0x68
   1bb86:	4a16      	ldr	r2, [pc, #88]	; (1bbe0 <check_used_port+0x74>)
   1bb88:	fb03 2304 	mla	r3, r3, r4, r2
   1bb8c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1bb90:	f013 0f01 	tst.w	r3, #1
   1bb94:	d0f3      	beq.n	1bb7e <check_used_port+0x12>
	if (context->flags & NET_CONTEXT_PROTO) {
   1bb96:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bb9a:	d0ed      	beq.n	1bb78 <check_used_port+0xc>
		return IPPROTO_TCP;
   1bb9c:	2306      	movs	r3, #6
   1bb9e:	e7ec      	b.n	1bb7a <check_used_port+0xe>
		      net_sin((struct sockaddr *)&
   1bba0:	2368      	movs	r3, #104	; 0x68
   1bba2:	fb03 f304 	mul.w	r3, r3, r4
   1bba6:	3308      	adds	r3, #8
   1bba8:	4a0d      	ldr	r2, [pc, #52]	; (1bbe0 <check_used_port+0x74>)
   1bbaa:	4413      	add	r3, r2
			      contexts[i].local)->sin_port == local_port)) {
   1bbac:	885a      	ldrh	r2, [r3, #2]
		if (!(net_context_get_ip_proto(&contexts[i]) == ip_proto &&
   1bbae:	42b2      	cmp	r2, r6
   1bbb0:	d1e5      	bne.n	1bb7e <check_used_port+0x12>
			continue;
		}

		if (local_addr->sa_family == AF_INET6) {
   1bbb2:	883a      	ldrh	r2, [r7, #0]
   1bbb4:	2a0a      	cmp	r2, #10
   1bbb6:	d007      	beq.n	1bbc8 <check_used_port+0x5c>
				      local_addr)->sin6_addr)) {
				return -EEXIST;
			}
		} else {
			if (net_ipv4_addr_cmp(
				    net_sin_ptr(&contexts[i].local)->
   1bbb8:	685b      	ldr	r3, [r3, #4]
	return UNALIGNED_GET(&addr1->s_addr) == UNALIGNED_GET(&addr2->s_addr);
   1bbba:	681a      	ldr	r2, [r3, #0]
   1bbbc:	687b      	ldr	r3, [r7, #4]
			if (net_ipv4_addr_cmp(
   1bbbe:	429a      	cmp	r2, r3
   1bbc0:	d1dd      	bne.n	1bb7e <check_used_port+0x12>
							      sin_addr,
				    &((struct sockaddr_in *)
				      local_addr)->sin_addr)) {
				return -EEXIST;
   1bbc2:	f06f 0010 	mvn.w	r0, #16
			}
		}
	}

	return 0;
}
   1bbc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1bbc8:	2210      	movs	r2, #16
   1bbca:	1d39      	adds	r1, r7, #4
   1bbcc:	6858      	ldr	r0, [r3, #4]
   1bbce:	f00d fe4f 	bl	29870 <memcmp>
			if (net_ipv6_addr_cmp(
   1bbd2:	2800      	cmp	r0, #0
   1bbd4:	d1d3      	bne.n	1bb7e <check_used_port+0x12>
				return -EEXIST;
   1bbd6:	f06f 0010 	mvn.w	r0, #16
   1bbda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return 0;
   1bbdc:	2000      	movs	r0, #0
   1bbde:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bbe0:	20001c38 	.word	0x20001c38

0001bbe4 <find_available_port>:

static u16_t find_available_port(struct net_context *context,
				    const struct sockaddr *addr)
{
   1bbe4:	b570      	push	{r4, r5, r6, lr}
   1bbe6:	4606      	mov	r6, r0
   1bbe8:	460d      	mov	r5, r1
	if (!net_sin(addr)->sin_port) {
   1bbea:	884c      	ldrh	r4, [r1, #2]
   1bbec:	b16c      	cbz	r4, 1bc0a <find_available_port+0x26>

		return htons(local_port);
	}

	return net_sin(addr)->sin_port;
}
   1bbee:	4620      	mov	r0, r4
   1bbf0:	bd70      	pop	{r4, r5, r6, pc}
	return IPPROTO_UDP;
   1bbf2:	2011      	movs	r0, #17
				 htons(local_port), addr) == -EEXIST);
   1bbf4:	0a1c      	lsrs	r4, r3, #8
   1bbf6:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
		} while (check_used_port(
   1bbfa:	b29c      	uxth	r4, r3
   1bbfc:	462a      	mov	r2, r5
   1bbfe:	4621      	mov	r1, r4
   1bc00:	f7ff ffb4 	bl	1bb6c <check_used_port>
				 htons(local_port), addr) == -EEXIST);
   1bc04:	f110 0f11 	cmn.w	r0, #17
   1bc08:	d1f1      	bne.n	1bbee <find_available_port+0xa>
			local_port = sys_rand32_get() | 0x8000;
   1bc0a:	f7e5 fd59 	bl	16c0 <sys_rand32_get>
   1bc0e:	ea6f 4040 	mvn.w	r0, r0, lsl #17
   1bc12:	ea6f 4050 	mvn.w	r0, r0, lsr #17
   1bc16:	b283      	uxth	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1bc18:	f896 205d 	ldrb.w	r2, [r6, #93]	; 0x5d
   1bc1c:	f012 0f40 	tst.w	r2, #64	; 0x40
   1bc20:	d0e7      	beq.n	1bbf2 <find_available_port+0xe>
		return IPPROTO_TCP;
   1bc22:	2006      	movs	r0, #6
   1bc24:	e7e6      	b.n	1bbf4 <find_available_port+0x10>

0001bc26 <queue_fin>:
	return ret;
}

#if defined(CONFIG_NET_TCP)
static void queue_fin(struct net_context *ctx)
{
   1bc26:	b500      	push	{lr}
   1bc28:	b087      	sub	sp, #28
   1bc2a:	4603      	mov	r3, r0
	struct net_pkt *pkt = NULL;
   1bc2c:	2200      	movs	r2, #0
   1bc2e:	a906      	add	r1, sp, #24
   1bc30:	f841 2d04 	str.w	r2, [r1, #-4]!
	int ret;

	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1bc34:	6e00      	ldr	r0, [r0, #96]	; 0x60
				      NULL, &ctx->remote, &pkt);
   1bc36:	3314      	adds	r3, #20
	ret = net_tcp_prepare_segment(ctx->tcp, NET_TCP_FIN, NULL, 0,
   1bc38:	9102      	str	r1, [sp, #8]
   1bc3a:	9301      	str	r3, [sp, #4]
   1bc3c:	9200      	str	r2, [sp, #0]
   1bc3e:	4613      	mov	r3, r2
   1bc40:	2101      	movs	r1, #1
   1bc42:	f007 f9dd 	bl	23000 <net_tcp_prepare_segment>
	if (ret || !pkt) {
   1bc46:	b928      	cbnz	r0, 1bc54 <queue_fin+0x2e>
   1bc48:	9805      	ldr	r0, [sp, #20]
   1bc4a:	b118      	cbz	r0, 1bc54 <queue_fin+0x2e>
		return;
	}

	ret = net_tcp_send_pkt(pkt);
   1bc4c:	f007 fcdc 	bl	23608 <net_tcp_send_pkt>
	if (ret < 0) {
   1bc50:	2800      	cmp	r0, #0
   1bc52:	db02      	blt.n	1bc5a <queue_fin+0x34>
		net_pkt_unref(pkt);
	}
}
   1bc54:	b007      	add	sp, #28
   1bc56:	f85d fb04 	ldr.w	pc, [sp], #4
		net_pkt_unref(pkt);
   1bc5a:	9805      	ldr	r0, [sp, #20]
   1bc5c:	f001 f8ed 	bl	1ce3a <net_pkt_unref>
   1bc60:	e7f8      	b.n	1bc54 <queue_fin+0x2e>

0001bc62 <tcp_hdr_len>:

	return ret;
}

static int tcp_hdr_len(struct net_pkt *pkt)
{
   1bc62:	b500      	push	{lr}
   1bc64:	b087      	sub	sp, #28
	struct net_tcp_hdr hdr, *tcp_hdr;

	/* "Offset": 4-bit field in high nibble, units of dwords */
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1bc66:	a901      	add	r1, sp, #4
   1bc68:	f007 fb1c 	bl	232a4 <net_tcp_get_hdr>
	if (tcp_hdr) {
   1bc6c:	b128      	cbz	r0, 1bc7a <tcp_hdr_len+0x18>
		return 4 * (tcp_hdr->offset >> 4);
   1bc6e:	7b00      	ldrb	r0, [r0, #12]
   1bc70:	0900      	lsrs	r0, r0, #4
   1bc72:	0080      	lsls	r0, r0, #2
	}

	return 0;
}
   1bc74:	b007      	add	sp, #28
   1bc76:	f85d fb04 	ldr.w	pc, [sp], #4
	return 0;
   1bc7a:	2000      	movs	r0, #0
   1bc7c:	e7fa      	b.n	1bc74 <tcp_hdr_len+0x12>

0001bc7e <set_appdata_values>:

	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
}

static void set_appdata_values(struct net_pkt *pkt, enum net_ip_protocol proto)
{
   1bc7e:	b570      	push	{r4, r5, r6, lr}
   1bc80:	b082      	sub	sp, #8
   1bc82:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1bc84:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1bc86:	2400      	movs	r4, #0
   1bc88:	e002      	b.n	1bc90 <set_appdata_values+0x12>
		bytes += buf->len;
   1bc8a:	899a      	ldrh	r2, [r3, #12]
   1bc8c:	4414      	add	r4, r2
		buf = buf->frags;
   1bc8e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1bc90:	2b00      	cmp	r3, #0
   1bc92:	d1fa      	bne.n	1bc8a <set_appdata_values+0xc>
	u16_t proto_len = 0;
	struct net_buf *frag;
	u16_t offset;

#if defined(CONFIG_NET_UDP)
	if (proto == IPPROTO_UDP) {
   1bc94:	2911      	cmp	r1, #17
   1bc96:	d020      	beq.n	1bcda <set_appdata_values+0x5c>
	u16_t proto_len = 0;
   1bc98:	2600      	movs	r6, #0
		proto_len = sizeof(struct net_udp_hdr);
	}
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (proto == IPPROTO_TCP) {
   1bc9a:	2906      	cmp	r1, #6
   1bc9c:	d01f      	beq.n	1bcde <set_appdata_values+0x60>
		proto_len = tcp_hdr_len(pkt);
	}
#endif /* CONFIG_NET_TCP */

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1bc9e:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1bca2:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   1bca6:	4419      	add	r1, r3
   1bca8:	4431      	add	r1, r6
   1bcaa:	f10d 0206 	add.w	r2, sp, #6
   1bcae:	b289      	uxth	r1, r1
   1bcb0:	4628      	mov	r0, r5
   1bcb2:	f001 fb91 	bl	1d3d8 <net_frag_get_pos>
				proto_len,
				&offset);
	if (frag) {
   1bcb6:	b120      	cbz	r0, 1bcc2 <set_appdata_values+0x44>
		net_pkt_set_appdata(pkt, frag->data + offset);
   1bcb8:	6883      	ldr	r3, [r0, #8]
   1bcba:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1bcbe:	4413      	add	r3, r2
	pkt->appdata = data;
   1bcc0:	61ab      	str	r3, [r5, #24]
	}

	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1bcc2:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
   1bcc6:	1ae3      	subs	r3, r4, r3
   1bcc8:	b29b      	uxth	r3, r3
			       net_pkt_ipv6_ext_len(pkt) - proto_len);
   1bcca:	f895 403b 	ldrb.w	r4, [r5, #59]	; 0x3b
	net_pkt_set_appdatalen(pkt, total_len - net_pkt_ip_hdr_len(pkt) -
   1bcce:	1b1b      	subs	r3, r3, r4
   1bcd0:	b29b      	uxth	r3, r3
   1bcd2:	1b9b      	subs	r3, r3, r6
	pkt->appdatalen = len;
   1bcd4:	862b      	strh	r3, [r5, #48]	; 0x30

	NET_ASSERT_INFO(net_pkt_appdatalen(pkt) < total_len,
			"Wrong appdatalen %u, total %zu",
			net_pkt_appdatalen(pkt), total_len);
}
   1bcd6:	b002      	add	sp, #8
   1bcd8:	bd70      	pop	{r4, r5, r6, pc}
		proto_len = sizeof(struct net_udp_hdr);
   1bcda:	2608      	movs	r6, #8
   1bcdc:	e7dd      	b.n	1bc9a <set_appdata_values+0x1c>
		proto_len = tcp_hdr_len(pkt);
   1bcde:	4628      	mov	r0, r5
   1bce0:	f7ff ffbf 	bl	1bc62 <tcp_hdr_len>
   1bce4:	b286      	uxth	r6, r0
   1bce6:	e7da      	b.n	1bc9e <set_appdata_values+0x20>

0001bce8 <packet_received>:

static enum net_verdict packet_received(struct net_conn *conn,
					struct net_pkt *pkt,
					void *user_data)
{
   1bce8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1bcea:	460d      	mov	r5, r1
   1bcec:	4616      	mov	r6, r2
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1bcee:	2300      	movs	r3, #0
   1bcf0:	e000      	b.n	1bcf4 <packet_received+0xc>
   1bcf2:	3301      	adds	r3, #1
   1bcf4:	2b05      	cmp	r3, #5
   1bcf6:	dc12      	bgt.n	1bd1e <packet_received+0x36>
	return context->flags & NET_CONTEXT_IN_USE;
   1bcf8:	2268      	movs	r2, #104	; 0x68
   1bcfa:	4926      	ldr	r1, [pc, #152]	; (1bd94 <packet_received+0xac>)
   1bcfc:	fb02 1203 	mla	r2, r2, r3, r1
   1bd00:	f892 205d 	ldrb.w	r2, [r2, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1bd04:	f012 0f01 	tst.w	r2, #1
   1bd08:	d0f3      	beq.n	1bcf2 <packet_received+0xa>
		if (contexts[i].conn_handler == conn_handler) {
   1bd0a:	2268      	movs	r2, #104	; 0x68
   1bd0c:	fb02 1203 	mla	r2, r2, r3, r1
   1bd10:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   1bd12:	4290      	cmp	r0, r2
   1bd14:	d1ed      	bne.n	1bcf2 <packet_received+0xa>
			return &contexts[i];
   1bd16:	2268      	movs	r2, #104	; 0x68
   1bd18:	fb02 1403 	mla	r4, r2, r3, r1
   1bd1c:	e000      	b.n	1bd20 <packet_received+0x38>
	return NULL;
   1bd1e:	2400      	movs	r4, #0
static inline void net_context_set_iface(struct net_context *context,
					 struct net_if *iface)
{
	NET_ASSERT(iface);

	context->iface = net_if_get_by_iface(iface);
   1bd20:	6968      	ldr	r0, [r5, #20]
   1bd22:	f7ff fe53 	bl	1b9cc <net_if_get_by_iface>
   1bd26:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
	pkt->context = ctx;
   1bd2a:	60ec      	str	r4, [r5, #12]

	/* If there is no callback registered, then we can only drop
	 * the packet.
	 */

	if (!context->recv_cb) {
   1bd2c:	6b23      	ldr	r3, [r4, #48]	; 0x30
   1bd2e:	b373      	cbz	r3, 1bd8e <packet_received+0xa6>
	if (context->flags & NET_CONTEXT_PROTO) {
   1bd30:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1bd34:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bd38:	d017      	beq.n	1bd6a <packet_received+0x82>
		return IPPROTO_TCP;
   1bd3a:	2206      	movs	r2, #6
		return NET_DROP;
	}

	if (net_context_get_ip_proto(context) != IPPROTO_TCP) {
   1bd3c:	2a06      	cmp	r2, #6
   1bd3e:	d016      	beq.n	1bd6e <packet_received+0x86>
		/* TCP packets get appdata earlier in tcp_established(). */
		set_appdata_values(pkt, IPPROTO_UDP);
   1bd40:	2111      	movs	r1, #17
   1bd42:	4628      	mov	r0, r5
   1bd44:	f7ff ff9b 	bl	1bc7e <set_appdata_values>
	return pkt->appdatalen;
   1bd48:	8e29      	ldrh	r1, [r5, #48]	; 0x30
	net_stats.tcp.bytes.received += bytes;
   1bd4a:	4a13      	ldr	r2, [pc, #76]	; (1bd98 <packet_received+0xb0>)
   1bd4c:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
   1bd4e:	440b      	add	r3, r1
   1bd50:	64d3      	str	r3, [r2, #76]	; 0x4c
		net_pkt_appdata(pkt), net_pkt_appdatalen(pkt),
		net_pkt_get_len(pkt));

	net_stats_update_tcp_recv(net_pkt_appdatalen(pkt));

	context->recv_cb(context, pkt, 0, user_data);
   1bd52:	6b27      	ldr	r7, [r4, #48]	; 0x30
   1bd54:	4633      	mov	r3, r6
   1bd56:	2200      	movs	r2, #0
   1bd58:	4629      	mov	r1, r5
   1bd5a:	4620      	mov	r0, r4
   1bd5c:	47b8      	blx	r7
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1bd5e:	f104 0044 	add.w	r0, r4, #68	; 0x44
   1bd62:	f00c fe46 	bl	289f2 <_impl_k_sem_give>

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	k_sem_give(&context->recv_data_wait);
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return NET_OK;
   1bd66:	2000      	movs	r0, #0
   1bd68:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1bd6a:	2211      	movs	r2, #17
   1bd6c:	e7e6      	b.n	1bd3c <packet_received+0x54>
	if (context->flags & NET_CONTEXT_TYPE) {
   1bd6e:	f013 0f20 	tst.w	r3, #32
   1bd72:	d00a      	beq.n	1bd8a <packet_received+0xa2>
		return SOCK_STREAM;
   1bd74:	2301      	movs	r3, #1
	else if (net_context_get_type(context) == SOCK_STREAM) {
   1bd76:	2b01      	cmp	r3, #1
   1bd78:	d1e6      	bne.n	1bd48 <packet_received+0x60>
   1bd7a:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
		if (net_pkt_appdatalen(pkt) == 0) {
   1bd7c:	2b00      	cmp	r3, #0
   1bd7e:	d1e3      	bne.n	1bd48 <packet_received+0x60>
			net_pkt_unref(pkt);
   1bd80:	4628      	mov	r0, r5
   1bd82:	f001 f85a 	bl	1ce3a <net_pkt_unref>
			return NET_OK;
   1bd86:	2000      	movs	r0, #0
   1bd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return SOCK_DGRAM;
   1bd8a:	2302      	movs	r3, #2
   1bd8c:	e7f3      	b.n	1bd76 <packet_received+0x8e>
		return NET_DROP;
   1bd8e:	2002      	movs	r0, #2
}
   1bd90:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1bd92:	bf00      	nop
   1bd94:	20001c38 	.word	0x20001c38
   1bd98:	20002ab8 	.word	0x20002ab8

0001bd9c <send_reset>:
{
   1bd9c:	b510      	push	{r4, lr}
   1bd9e:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bda0:	aa02      	add	r2, sp, #8
   1bda2:	2300      	movs	r3, #0
   1bda4:	f842 3d04 	str.w	r3, [r2, #-4]!
	ret = net_tcp_prepare_reset(context->tcp, remote, &pkt);
   1bda8:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bdaa:	f007 f85a 	bl	22e62 <net_tcp_prepare_reset>
	if (ret || !pkt) {
   1bdae:	4604      	mov	r4, r0
   1bdb0:	b928      	cbnz	r0, 1bdbe <send_reset+0x22>
   1bdb2:	9801      	ldr	r0, [sp, #4]
   1bdb4:	b118      	cbz	r0, 1bdbe <send_reset+0x22>
	ret = net_send_data(pkt);
   1bdb6:	f7fe fc3f 	bl	1a638 <net_send_data>
	if (ret < 0) {
   1bdba:	1e04      	subs	r4, r0, #0
   1bdbc:	db02      	blt.n	1bdc4 <send_reset+0x28>
}
   1bdbe:	4620      	mov	r0, r4
   1bdc0:	b002      	add	sp, #8
   1bdc2:	bd10      	pop	{r4, pc}
		net_pkt_unref(pkt);
   1bdc4:	9801      	ldr	r0, [sp, #4]
   1bdc6:	f001 f838 	bl	1ce3a <net_pkt_unref>
   1bdca:	e7f8      	b.n	1bdbe <send_reset+0x22>

0001bdcc <send_ack>:
{
   1bdcc:	b510      	push	{r4, lr}
   1bdce:	b082      	sub	sp, #8
	struct net_pkt *pkt = NULL;
   1bdd0:	2300      	movs	r3, #0
   1bdd2:	9301      	str	r3, [sp, #4]
	if (!force && context->tcp->send_ack == context->tcp->sent_ack) {
   1bdd4:	b932      	cbnz	r2, 1bde4 <send_ack+0x18>
   1bdd6:	6e03      	ldr	r3, [r0, #96]	; 0x60
   1bdd8:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1bddc:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
   1bde0:	429a      	cmp	r2, r3
   1bde2:	d011      	beq.n	1be08 <send_ack+0x3c>
	ret = net_tcp_prepare_ack(context->tcp, remote, &pkt);
   1bde4:	aa01      	add	r2, sp, #4
   1bde6:	6e00      	ldr	r0, [r0, #96]	; 0x60
   1bde8:	f007 f99c 	bl	23124 <net_tcp_prepare_ack>
	if (ret) {
   1bdec:	4604      	mov	r4, r0
   1bdee:	b110      	cbz	r0, 1bdf6 <send_ack+0x2a>
}
   1bdf0:	4620      	mov	r0, r4
   1bdf2:	b002      	add	sp, #8
   1bdf4:	bd10      	pop	{r4, pc}
	ret = net_tcp_send_pkt(pkt);
   1bdf6:	9801      	ldr	r0, [sp, #4]
   1bdf8:	f007 fc06 	bl	23608 <net_tcp_send_pkt>
	if (ret < 0) {
   1bdfc:	1e04      	subs	r4, r0, #0
   1bdfe:	daf7      	bge.n	1bdf0 <send_ack+0x24>
		net_pkt_unref(pkt);
   1be00:	9801      	ldr	r0, [sp, #4]
   1be02:	f001 f81a 	bl	1ce3a <net_pkt_unref>
   1be06:	e7f3      	b.n	1bdf0 <send_ack+0x24>
		return 0;
   1be08:	2400      	movs	r4, #0
   1be0a:	e7f1      	b.n	1bdf0 <send_ack+0x24>

0001be0c <_tcp_synack_received>:
	switch (net_tcp_get_state(context->tcp)) {
   1be0c:	6e13      	ldr	r3, [r2, #96]	; 0x60
 *
 * @param tcp TCP context
 */
static inline enum net_tcp_state net_tcp_get_state(const struct net_tcp *tcp)
{
	return (enum net_tcp_state)tcp->state;
   1be0e:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1be12:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1be16:	2b02      	cmp	r3, #2
   1be18:	d001      	beq.n	1be1e <_tcp_synack_received+0x12>
}
   1be1a:	2002      	movs	r0, #2
   1be1c:	4770      	bx	lr
{
   1be1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1be20:	b09f      	sub	sp, #124	; 0x7c
   1be22:	4615      	mov	r5, r2
   1be24:	460c      	mov	r4, r1
	context->iface = net_if_get_by_iface(iface);
   1be26:	6948      	ldr	r0, [r1, #20]
   1be28:	f7ff fdd0 	bl	1b9cc <net_if_get_by_iface>
   1be2c:	f885 005c 	strb.w	r0, [r5, #92]	; 0x5c
	pkt->context = ctx;
   1be30:	60e5      	str	r5, [r4, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1be32:	a911      	add	r1, sp, #68	; 0x44
   1be34:	4620      	mov	r0, r4
   1be36:	f007 fa35 	bl	232a4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1be3a:	4606      	mov	r6, r0
   1be3c:	b1f8      	cbz	r0, 1be7e <_tcp_synack_received+0x72>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_RST) {
   1be3e:	7b43      	ldrb	r3, [r0, #13]
   1be40:	f013 0f04 	tst.w	r3, #4
   1be44:	d11e      	bne.n	1be84 <_tcp_synack_received+0x78>
	if (NET_TCP_FLAGS(tcp_hdr) & NET_TCP_SYN) {
   1be46:	f013 0f02 	tst.w	r3, #2
   1be4a:	d013      	beq.n	1be74 <_tcp_synack_received+0x68>
		context->tcp->send_ack =
   1be4c:	6e2a      	ldr	r2, [r5, #96]	; 0x60
	return ((u16_t)src[0] << 8) | src[1];
   1be4e:	7901      	ldrb	r1, [r0, #4]
   1be50:	7943      	ldrb	r3, [r0, #5]
   1be52:	ea43 2101 	orr.w	r1, r3, r1, lsl #8
   1be56:	7980      	ldrb	r0, [r0, #6]
   1be58:	79f3      	ldrb	r3, [r6, #7]
   1be5a:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1be5e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
			sys_get_be32(tcp_hdr->seq) + 1;
   1be62:	3301      	adds	r3, #1
		context->tcp->send_ack =
   1be64:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		context->tcp->recv_max_ack = context->tcp->send_seq + 1;
   1be68:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   1be6a:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1be6e:	3301      	adds	r3, #1
   1be70:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	if (NET_TCP_FLAGS(tcp_hdr) == (NET_TCP_SYN | NET_TCP_ACK)) {
   1be74:	7b73      	ldrb	r3, [r6, #13]
   1be76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
   1be7a:	2b12      	cmp	r3, #18
   1be7c:	d019      	beq.n	1beb2 <_tcp_synack_received+0xa6>
}
   1be7e:	2002      	movs	r0, #2
   1be80:	b01f      	add	sp, #124	; 0x7c
   1be82:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1be84:	4621      	mov	r1, r4
   1be86:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1be88:	f007 fa87 	bl	2339a <net_tcp_validate_seq>
   1be8c:	b160      	cbz	r0, 1bea8 <_tcp_synack_received+0x9c>
	net_stats.tcp.drop++;
}

static inline void net_stats_update_tcp_seg_rst(void)
{
	net_stats.tcp.rst++;
   1be8e:	4a40      	ldr	r2, [pc, #256]	; (1bf90 <_tcp_synack_received+0x184>)
   1be90:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1be92:	3301      	adds	r3, #1
   1be94:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->connect_cb) {
   1be96:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1be98:	2b00      	cmp	r3, #0
   1be9a:	d0f0      	beq.n	1be7e <_tcp_synack_received+0x72>
			context->connect_cb(context, -ECONNREFUSED,
   1be9c:	682a      	ldr	r2, [r5, #0]
   1be9e:	f06f 016e 	mvn.w	r1, #110	; 0x6e
   1bea2:	4628      	mov	r0, r5
   1bea4:	4798      	blx	r3
   1bea6:	e7ea      	b.n	1be7e <_tcp_synack_received+0x72>
	net_stats.tcp.ackerr++;
}

static inline void net_stats_update_tcp_seg_rsterr(void)
{
	net_stats.tcp.rsterr++;
   1bea8:	4a39      	ldr	r2, [pc, #228]	; (1bf90 <_tcp_synack_received+0x184>)
   1beaa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1beac:	3301      	adds	r3, #1
   1beae:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1beb0:	e7e5      	b.n	1be7e <_tcp_synack_received+0x72>
	return pkt->family;
   1beb2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1beb6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_pkt_family(pkt) == AF_INET6) {
   1beba:	2b0a      	cmp	r3, #10
   1bebc:	d1df      	bne.n	1be7e <_tcp_synack_received+0x72>
			r6addr.sin6_family = AF_INET6;
   1bebe:	f04f 0e0a 	mov.w	lr, #10
   1bec2:	f8ad e014 	strh.w	lr, [sp, #20]
			r6addr.sin6_port = tcp_hdr->src_port;
   1bec6:	8833      	ldrh	r3, [r6, #0]
   1bec8:	f8ad 3016 	strh.w	r3, [sp, #22]
	return pkt->frags->data;
   1becc:	68a7      	ldr	r7, [r4, #8]
			net_ipaddr_copy(&r6addr.sin6_addr,
   1bece:	ac16      	add	r4, sp, #88	; 0x58
   1bed0:	68bb      	ldr	r3, [r7, #8]
   1bed2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1bed6:	6859      	ldr	r1, [r3, #4]
   1bed8:	689a      	ldr	r2, [r3, #8]
   1beda:	68db      	ldr	r3, [r3, #12]
   1bedc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bede:	ac06      	add	r4, sp, #24
   1bee0:	ab16      	add	r3, sp, #88	; 0x58
   1bee2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1bee4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			l6addr.sin6_family = AF_INET6;
   1bee8:	f8ad e02c 	strh.w	lr, [sp, #44]	; 0x2c
			l6addr.sin6_port = htons(tcp_hdr->dst_port);
   1beec:	8872      	ldrh	r2, [r6, #2]
   1beee:	0a13      	lsrs	r3, r2, #8
   1bef0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1bef4:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
			net_ipaddr_copy(&l6addr.sin6_addr,
   1bef8:	ac1a      	add	r4, sp, #104	; 0x68
   1befa:	68bb      	ldr	r3, [r7, #8]
   1befc:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1bf00:	6859      	ldr	r1, [r3, #4]
   1bf02:	689a      	ldr	r2, [r3, #8]
   1bf04:	68db      	ldr	r3, [r3, #12]
   1bf06:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1bf08:	ac0c      	add	r4, sp, #48	; 0x30
   1bf0a:	ab1e      	add	r3, sp, #120	; 0x78
   1bf0c:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1bf10:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		net_tcp_unregister(context->conn_handler);
   1bf14:	462c      	mov	r4, r5
	return net_conn_unregister(handle);
   1bf16:	f854 0f2c 	ldr.w	r0, [r4, #44]!
   1bf1a:	f008 fcdb 	bl	248d4 <net_conn_unregister>
				       ntohs(tcp_hdr->src_port),
   1bf1e:	8832      	ldrh	r2, [r6, #0]
   1bf20:	0a13      	lsrs	r3, r2, #8
   1bf22:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
				       ntohs(tcp_hdr->dst_port),
   1bf26:	8871      	ldrh	r1, [r6, #2]
   1bf28:	0a0a      	lsrs	r2, r1, #8
   1bf2a:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
		ret = net_tcp_register(raddr,
   1bf2e:	b292      	uxth	r2, r2
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1bf30:	9403      	str	r4, [sp, #12]
   1bf32:	9502      	str	r5, [sp, #8]
   1bf34:	4917      	ldr	r1, [pc, #92]	; (1bf94 <_tcp_synack_received+0x188>)
   1bf36:	9101      	str	r1, [sp, #4]
   1bf38:	9200      	str	r2, [sp, #0]
   1bf3a:	b29b      	uxth	r3, r3
   1bf3c:	aa0b      	add	r2, sp, #44	; 0x2c
   1bf3e:	a905      	add	r1, sp, #20
   1bf40:	2006      	movs	r0, #6
   1bf42:	f008 fce5 	bl	24910 <net_conn_register>
		if (ret < 0) {
   1bf46:	2800      	cmp	r0, #0
   1bf48:	db1c      	blt.n	1bf84 <_tcp_synack_received+0x178>
		net_tcp_change_state(context->tcp, NET_TCP_ESTABLISHED);
   1bf4a:	2104      	movs	r1, #4
   1bf4c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bf4e:	f006 ffba 	bl	22ec6 <net_tcp_change_state>
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1bf52:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1bf56:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1bf5a:	f043 0304 	orr.w	r3, r3, #4
   1bf5e:	f885 305d 	strb.w	r3, [r5, #93]	; 0x5d
		send_ack(context, raddr, false);
   1bf62:	2200      	movs	r2, #0
   1bf64:	a905      	add	r1, sp, #20
   1bf66:	4628      	mov	r0, r5
   1bf68:	f7ff ff30 	bl	1bdcc <send_ack>
		k_sem_give(&context->tcp->connect_wait);
   1bf6c:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1bf6e:	30ac      	adds	r0, #172	; 0xac
   1bf70:	f00c fd3f 	bl	289f2 <_impl_k_sem_give>
		if (context->connect_cb) {
   1bf74:	6bab      	ldr	r3, [r5, #56]	; 0x38
   1bf76:	2b00      	cmp	r3, #0
   1bf78:	d081      	beq.n	1be7e <_tcp_synack_received+0x72>
			context->connect_cb(context, 0, context->user_data);
   1bf7a:	682a      	ldr	r2, [r5, #0]
   1bf7c:	2100      	movs	r1, #0
   1bf7e:	4628      	mov	r0, r5
   1bf80:	4798      	blx	r3
   1bf82:	e77c      	b.n	1be7e <_tcp_synack_received+0x72>
			send_reset(context, raddr);
   1bf84:	a905      	add	r1, sp, #20
   1bf86:	4628      	mov	r0, r5
   1bf88:	f7ff ff08 	bl	1bd9c <send_reset>
			return NET_DROP;
   1bf8c:	e777      	b.n	1be7e <_tcp_synack_received+0x72>
   1bf8e:	bf00      	nop
   1bf90:	20002ab8 	.word	0x20002ab8
   1bf94:	0001c4ed 	.word	0x0001c4ed

0001bf98 <create_udp_packet>:
{
   1bf98:	b570      	push	{r4, r5, r6, lr}
	return pkt->family;
   1bf9a:	f891 4038 	ldrb.w	r4, [r1, #56]	; 0x38
   1bf9e:	f3c4 04c3 	ubfx	r4, r4, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1bfa2:	2c0a      	cmp	r4, #10
   1bfa4:	d118      	bne.n	1bfd8 <create_udp_packet+0x40>
   1bfa6:	461e      	mov	r6, r3
   1bfa8:	4615      	mov	r5, r2
   1bfaa:	4604      	mov	r4, r0
		pkt = net_ipv6_create(context, pkt, NULL, &addr6->sin6_addr);
   1bfac:	1d13      	adds	r3, r2, #4
   1bfae:	2200      	movs	r2, #0
   1bfb0:	f003 f9a4 	bl	1f2fc <net_ipv6_create>
   1bfb4:	4601      	mov	r1, r0
				     net_pkt_ip_hdr_len(pkt) +
   1bfb6:	f890 0033 	ldrb.w	r0, [r0, #51]	; 0x33
				     net_pkt_ipv6_ext_len(pkt),
   1bfba:	f891 203b 	ldrb.w	r2, [r1, #59]	; 0x3b
		tmp = net_udp_insert(context, pkt,
   1bfbe:	886b      	ldrh	r3, [r5, #2]
   1bfc0:	4402      	add	r2, r0
   1bfc2:	4620      	mov	r0, r4
   1bfc4:	f006 fd90 	bl	22ae8 <net_udp_insert>
		if (!tmp) {
   1bfc8:	4605      	mov	r5, r0
   1bfca:	b140      	cbz	r0, 1bfde <create_udp_packet+0x46>
		r = net_ipv6_finalize(context, pkt);
   1bfcc:	4601      	mov	r1, r0
   1bfce:	4620      	mov	r0, r4
   1bfd0:	f003 fbf0 	bl	1f7b4 <net_ipv6_finalize>
	*out_pkt = pkt;
   1bfd4:	6035      	str	r5, [r6, #0]
	return r;
   1bfd6:	bd70      	pop	{r4, r5, r6, pc}
		return -EPROTONOSUPPORT;
   1bfd8:	f06f 007a 	mvn.w	r0, #122	; 0x7a
   1bfdc:	bd70      	pop	{r4, r5, r6, pc}
			return -ENOMEM;
   1bfde:	f06f 000b 	mvn.w	r0, #11
}
   1bfe2:	bd70      	pop	{r4, r5, r6, pc}

0001bfe4 <send_data>:
{
   1bfe4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1bfe8:	4604      	mov	r4, r0
   1bfea:	4615      	mov	r5, r2
   1bfec:	9e06      	ldr	r6, [sp, #24]
   1bfee:	9f07      	ldr	r7, [sp, #28]
	context->send_cb = cb;
   1bff0:	6342      	str	r2, [r0, #52]	; 0x34
	context->user_data = user_data;
   1bff2:	6007      	str	r7, [r0, #0]
	pkt->token = token;
   1bff4:	610e      	str	r6, [r1, #16]
	if (context->flags & NET_CONTEXT_PROTO) {
   1bff6:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1bffa:	f013 0f40 	tst.w	r3, #64	; 0x40
   1bffe:	d011      	beq.n	1c024 <send_data+0x40>
		return IPPROTO_TCP;
   1c000:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c002:	2b11      	cmp	r3, #17
   1c004:	d010      	beq.n	1c028 <send_data+0x44>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c006:	2b06      	cmp	r3, #6
   1c008:	d113      	bne.n	1c032 <send_data+0x4e>
		int ret = net_tcp_send_data(context);
   1c00a:	4620      	mov	r0, r4
   1c00c:	f007 fbf8 	bl	23800 <net_tcp_send_data>
   1c010:	4680      	mov	r8, r0
		if (cb) {
   1c012:	b125      	cbz	r5, 1c01e <send_data+0x3a>
			cb(context, ret, token, user_data);
   1c014:	463b      	mov	r3, r7
   1c016:	4632      	mov	r2, r6
   1c018:	4601      	mov	r1, r0
   1c01a:	4620      	mov	r0, r4
   1c01c:	47a8      	blx	r5
}
   1c01e:	4640      	mov	r0, r8
   1c020:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return IPPROTO_UDP;
   1c024:	2311      	movs	r3, #17
   1c026:	e7ec      	b.n	1c002 <send_data+0x1e>
		return net_send_data(pkt);
   1c028:	4608      	mov	r0, r1
   1c02a:	f7fe fb05 	bl	1a638 <net_send_data>
   1c02e:	4680      	mov	r8, r0
   1c030:	e7f5      	b.n	1c01e <send_data+0x3a>
	return -EPROTONOSUPPORT;
   1c032:	f06f 087a 	mvn.w	r8, #122	; 0x7a
   1c036:	e7f2      	b.n	1c01e <send_data+0x3a>

0001c038 <net_context_get>:
{
   1c038:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	if (family == AF_INET) {
   1c03c:	2802      	cmp	r0, #2
   1c03e:	f000 80e9 	beq.w	1c214 <net_context_get+0x1dc>
	if (family != AF_INET && family != AF_INET6) {
   1c042:	280a      	cmp	r0, #10
   1c044:	f040 80e9 	bne.w	1c21a <net_context_get+0x1e2>
	if (type != SOCK_DGRAM && type != SOCK_STREAM) {
   1c048:	1e4c      	subs	r4, r1, #1
   1c04a:	b2e4      	uxtb	r4, r4
   1c04c:	2c01      	cmp	r4, #1
   1c04e:	f200 80e7 	bhi.w	1c220 <net_context_get+0x1e8>
	if (ip_proto != IPPROTO_UDP && ip_proto != IPPROTO_TCP) {
   1c052:	2a11      	cmp	r2, #17
   1c054:	d002      	beq.n	1c05c <net_context_get+0x24>
   1c056:	2a06      	cmp	r2, #6
   1c058:	f040 80e5 	bne.w	1c226 <net_context_get+0x1ee>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c05c:	2901      	cmp	r1, #1
   1c05e:	d01c      	beq.n	1c09a <net_context_get+0x62>
   1c060:	2902      	cmp	r1, #2
   1c062:	d01f      	beq.n	1c0a4 <net_context_get+0x6c>
	if (!context) {
   1c064:	2b00      	cmp	r3, #0
   1c066:	f000 80e1 	beq.w	1c22c <net_context_get+0x1f4>
   1c06a:	461f      	mov	r7, r3
   1c06c:	4690      	mov	r8, r2
   1c06e:	460e      	mov	r6, r1
   1c070:	4681      	mov	r9, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c072:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c076:	4870      	ldr	r0, [pc, #448]	; (1c238 <net_context_get+0x200>)
   1c078:	f00c fcce 	bl	28a18 <_impl_k_sem_take>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c07c:	2400      	movs	r4, #0
   1c07e:	2c05      	cmp	r4, #5
   1c080:	f300 80c5 	bgt.w	1c20e <net_context_get+0x1d6>
	return context->flags & NET_CONTEXT_IN_USE;
   1c084:	2568      	movs	r5, #104	; 0x68
   1c086:	4b6d      	ldr	r3, [pc, #436]	; (1c23c <net_context_get+0x204>)
   1c088:	fb05 3504 	mla	r5, r5, r4, r3
   1c08c:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
		if (net_context_is_used(&contexts[i])) {
   1c090:	f013 0f01 	tst.w	r3, #1
   1c094:	d00b      	beq.n	1c0ae <net_context_get+0x76>
	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1c096:	3401      	adds	r4, #1
   1c098:	e7f1      	b.n	1c07e <net_context_get+0x46>
	if ((type == SOCK_STREAM && ip_proto == IPPROTO_UDP) ||
   1c09a:	2a11      	cmp	r2, #17
   1c09c:	d1e0      	bne.n	1c060 <net_context_get+0x28>
		return -EOPNOTSUPP;
   1c09e:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c0a2:	e076      	b.n	1c192 <net_context_get+0x15a>
	    (type == SOCK_DGRAM && ip_proto == IPPROTO_TCP)) {
   1c0a4:	2a06      	cmp	r2, #6
   1c0a6:	d1dd      	bne.n	1c064 <net_context_get+0x2c>
		return -EOPNOTSUPP;
   1c0a8:	f06f 045e 	mvn.w	r4, #94	; 0x5e
   1c0ac:	e071      	b.n	1c192 <net_context_get+0x15a>
		if (ip_proto == IPPROTO_TCP) {
   1c0ae:	f1b8 0f06 	cmp.w	r8, #6
   1c0b2:	d071      	beq.n	1c198 <net_context_get+0x160>
		contexts[i].flags = 0;
   1c0b4:	f04f 0a68 	mov.w	sl, #104	; 0x68
   1c0b8:	4b60      	ldr	r3, [pc, #384]	; (1c23c <net_context_get+0x204>)
   1c0ba:	fb0a 3a04 	mla	sl, sl, r4, r3
   1c0be:	2300      	movs	r3, #0
   1c0c0:	f88a 305d 	strb.w	r3, [sl, #93]	; 0x5d
		atomic_set(&contexts[i].refcount, 1);
   1c0c4:	f10a 0304 	add.w	r3, sl, #4
	return __atomic_exchange_n(target, value, __ATOMIC_SEQ_CST);
   1c0c8:	2201      	movs	r2, #1
   1c0ca:	f3bf 8f5b 	dmb	ish
   1c0ce:	e853 1f00 	ldrex	r1, [r3]
   1c0d2:	e843 2000 	strex	r0, r2, [r3]
   1c0d6:	2800      	cmp	r0, #0
   1c0d8:	d1f9      	bne.n	1c0ce <net_context_get+0x96>
   1c0da:	f3bf 8f5b 	dmb	ish
	if (family == AF_INET6) {
   1c0de:	f1b9 0f0a 	cmp.w	r9, #10
   1c0e2:	d06d      	beq.n	1c1c0 <net_context_get+0x188>
	context->flags &= ~NET_CONTEXT_FAMILY;
   1c0e4:	2368      	movs	r3, #104	; 0x68
   1c0e6:	4a55      	ldr	r2, [pc, #340]	; (1c23c <net_context_get+0x204>)
   1c0e8:	fb03 2304 	mla	r3, r3, r4, r2
   1c0ec:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c0f0:	f022 0210 	bic.w	r2, r2, #16
   1c0f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (type == SOCK_STREAM) {
   1c0f8:	2e01      	cmp	r6, #1
   1c0fa:	d068      	beq.n	1c1ce <net_context_get+0x196>
	context->flags &= ~NET_CONTEXT_TYPE;
   1c0fc:	2368      	movs	r3, #104	; 0x68
   1c0fe:	4a4f      	ldr	r2, [pc, #316]	; (1c23c <net_context_get+0x204>)
   1c100:	fb03 2304 	mla	r3, r3, r4, r2
   1c104:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c108:	f022 0220 	bic.w	r2, r2, #32
   1c10c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
	if (ip_proto == IPPROTO_TCP) {
   1c110:	f1b8 0f06 	cmp.w	r8, #6
   1c114:	d066      	beq.n	1c1e4 <net_context_get+0x1ac>
	context->flags &= ~NET_CONTEXT_PROTO;
   1c116:	2368      	movs	r3, #104	; 0x68
   1c118:	4a48      	ldr	r2, [pc, #288]	; (1c23c <net_context_get+0x204>)
   1c11a:	fb03 2304 	mla	r3, r3, r4, r2
   1c11e:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c122:	f022 0240 	bic.w	r2, r2, #64	; 0x40
   1c126:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].flags |= NET_CONTEXT_IN_USE;
   1c12a:	f8df 8110 	ldr.w	r8, [pc, #272]	; 1c23c <net_context_get+0x204>
   1c12e:	2568      	movs	r5, #104	; 0x68
   1c130:	fb05 f504 	mul.w	r5, r5, r4
   1c134:	eb08 0305 	add.w	r3, r8, r5
   1c138:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c13c:	f042 0201 	orr.w	r2, r2, #1
   1c140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
		contexts[i].iface = 0;
   1c144:	2600      	movs	r6, #0
   1c146:	f883 605c 	strb.w	r6, [r3, #92]	; 0x5c
		memset(&contexts[i].remote, 0, sizeof(struct sockaddr));
   1c14a:	f105 0010 	add.w	r0, r5, #16
   1c14e:	4440      	add	r0, r8
   1c150:	2218      	movs	r2, #24
   1c152:	4631      	mov	r1, r6
   1c154:	3004      	adds	r0, #4
   1c156:	f00d fc1f 	bl	29998 <memset>
		memset(&contexts[i].local, 0, sizeof(struct sockaddr_ptr));
   1c15a:	3508      	adds	r5, #8
   1c15c:	4445      	add	r5, r8
   1c15e:	220c      	movs	r2, #12
   1c160:	4631      	mov	r1, r6
   1c162:	4628      	mov	r0, r5
   1c164:	f00d fc18 	bl	29998 <memset>
		if (family == AF_INET6) {
   1c168:	f1b9 0f0a 	cmp.w	r9, #10
   1c16c:	d045      	beq.n	1c1fa <net_context_get+0x1c2>
		k_sem_init(&contexts[i].recv_data_wait, 1, UINT_MAX);
   1c16e:	2068      	movs	r0, #104	; 0x68
   1c170:	fb00 f404 	mul.w	r4, r0, r4
   1c174:	3440      	adds	r4, #64	; 0x40
   1c176:	4831      	ldr	r0, [pc, #196]	; (1c23c <net_context_get+0x204>)
   1c178:	4420      	add	r0, r4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1c17a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1c17e:	2101      	movs	r1, #1
   1c180:	3004      	adds	r0, #4
   1c182:	f00c fc2d 	bl	289e0 <_impl_k_sem_init>
		*context = &contexts[i];
   1c186:	f8c7 a000 	str.w	sl, [r7]
		ret = 0;
   1c18a:	2400      	movs	r4, #0
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c18c:	482a      	ldr	r0, [pc, #168]	; (1c238 <net_context_get+0x200>)
   1c18e:	f00c fc30 	bl	289f2 <_impl_k_sem_give>
}
   1c192:	4620      	mov	r0, r4
   1c194:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
			contexts[i].tcp = net_tcp_alloc(&contexts[i]);
   1c198:	2568      	movs	r5, #104	; 0x68
   1c19a:	4b28      	ldr	r3, [pc, #160]	; (1c23c <net_context_get+0x204>)
   1c19c:	fb05 3504 	mla	r5, r5, r4, r3
   1c1a0:	4628      	mov	r0, r5
   1c1a2:	f006 fdab 	bl	22cfc <net_tcp_alloc>
   1c1a6:	6628      	str	r0, [r5, #96]	; 0x60
			if (!contexts[i].tcp) {
   1c1a8:	2800      	cmp	r0, #0
   1c1aa:	d042      	beq.n	1c232 <net_context_get+0x1fa>
			k_delayed_work_init(&contexts[i].tcp->ack_timer,
   1c1ac:	4924      	ldr	r1, [pc, #144]	; (1c240 <net_context_get+0x208>)
   1c1ae:	3008      	adds	r0, #8
   1c1b0:	f00d f9f0 	bl	29594 <k_delayed_work_init>
			k_delayed_work_init(&contexts[i].tcp->fin_timer,
   1c1b4:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c1b6:	4923      	ldr	r1, [pc, #140]	; (1c244 <net_context_get+0x20c>)
   1c1b8:	3030      	adds	r0, #48	; 0x30
   1c1ba:	f00d f9eb 	bl	29594 <k_delayed_work_init>
   1c1be:	e779      	b.n	1c0b4 <net_context_get+0x7c>
		context->flags |= NET_CONTEXT_FAMILY;
   1c1c0:	f89a 205d 	ldrb.w	r2, [sl, #93]	; 0x5d
   1c1c4:	f042 0210 	orr.w	r2, r2, #16
   1c1c8:	f88a 205d 	strb.w	r2, [sl, #93]	; 0x5d
   1c1cc:	e794      	b.n	1c0f8 <net_context_get+0xc0>
		context->flags |= NET_CONTEXT_TYPE;
   1c1ce:	2368      	movs	r3, #104	; 0x68
   1c1d0:	4a1a      	ldr	r2, [pc, #104]	; (1c23c <net_context_get+0x204>)
   1c1d2:	fb03 2304 	mla	r3, r3, r4, r2
   1c1d6:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c1da:	f042 0220 	orr.w	r2, r2, #32
   1c1de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1c1e2:	e795      	b.n	1c110 <net_context_get+0xd8>
		context->flags |= NET_CONTEXT_PROTO;
   1c1e4:	2368      	movs	r3, #104	; 0x68
   1c1e6:	4a15      	ldr	r2, [pc, #84]	; (1c23c <net_context_get+0x204>)
   1c1e8:	fb03 2304 	mla	r3, r3, r4, r2
   1c1ec:	f893 205d 	ldrb.w	r2, [r3, #93]	; 0x5d
   1c1f0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   1c1f4:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
   1c1f8:	e797      	b.n	1c12a <net_context_get+0xf2>
			addr6->sin6_port = find_available_port(&contexts[i],
   1c1fa:	4629      	mov	r1, r5
   1c1fc:	4650      	mov	r0, sl
   1c1fe:	f7ff fcf1 	bl	1bbe4 <find_available_port>
   1c202:	8068      	strh	r0, [r5, #2]
			if (!addr6->sin6_port) {
   1c204:	2800      	cmp	r0, #0
   1c206:	d1b2      	bne.n	1c16e <net_context_get+0x136>
				return -EADDRINUSE;
   1c208:	f06f 046f 	mvn.w	r4, #111	; 0x6f
   1c20c:	e7c1      	b.n	1c192 <net_context_get+0x15a>
	int i, ret = -ENOENT;
   1c20e:	f06f 0401 	mvn.w	r4, #1
   1c212:	e7bb      	b.n	1c18c <net_context_get+0x154>
		return -EPFNOSUPPORT;
   1c214:	f06f 045f 	mvn.w	r4, #95	; 0x5f
   1c218:	e7bb      	b.n	1c192 <net_context_get+0x15a>
		return -EAFNOSUPPORT;
   1c21a:	f06f 0469 	mvn.w	r4, #105	; 0x69
   1c21e:	e7b8      	b.n	1c192 <net_context_get+0x15a>
		return -EPROTOTYPE;
   1c220:	f06f 046a 	mvn.w	r4, #106	; 0x6a
   1c224:	e7b5      	b.n	1c192 <net_context_get+0x15a>
		return -EPROTONOSUPPORT;
   1c226:	f06f 047a 	mvn.w	r4, #122	; 0x7a
   1c22a:	e7b2      	b.n	1c192 <net_context_get+0x15a>
		return -EINVAL;
   1c22c:	f06f 0415 	mvn.w	r4, #21
   1c230:	e7af      	b.n	1c192 <net_context_get+0x15a>
				return -ENOBUFS;
   1c232:	f06f 0468 	mvn.w	r4, #104	; 0x68
   1c236:	e7ac      	b.n	1c192 <net_context_get+0x15a>
   1c238:	20001ea8 	.word	0x20001ea8
   1c23c:	20001c38 	.word	0x20001c38
   1c240:	0001c311 	.word	0x0001c311
   1c244:	0001c305 	.word	0x0001c305

0001c248 <net_context_ref>:
	int old_rc = atomic_inc(&context->refcount);
   1c248:	1d03      	adds	r3, r0, #4
	return __atomic_fetch_add(target, value, __ATOMIC_SEQ_CST);
   1c24a:	f3bf 8f5b 	dmb	ish
   1c24e:	e853 0f00 	ldrex	r0, [r3]
   1c252:	1c42      	adds	r2, r0, #1
   1c254:	e843 2100 	strex	r1, r2, [r3]
   1c258:	2900      	cmp	r1, #0
   1c25a:	d1f8      	bne.n	1c24e <net_context_ref+0x6>
   1c25c:	f3bf 8f5b 	dmb	ish
}
   1c260:	3001      	adds	r0, #1
   1c262:	4770      	bx	lr

0001c264 <net_context_unref>:
{
   1c264:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	int old_rc = atomic_dec(&context->refcount);
   1c266:	1d02      	adds	r2, r0, #4
	return __atomic_fetch_sub(target, value, __ATOMIC_SEQ_CST);
   1c268:	f3bf 8f5b 	dmb	ish
   1c26c:	e852 3f00 	ldrex	r3, [r2]
   1c270:	1e59      	subs	r1, r3, #1
   1c272:	e842 1400 	strex	r4, r1, [r2]
   1c276:	2c00      	cmp	r4, #0
   1c278:	d1f8      	bne.n	1c26c <net_context_unref+0x8>
   1c27a:	f3bf 8f5b 	dmb	ish
	if (old_rc != 1) {
   1c27e:	2b01      	cmp	r3, #1
   1c280:	d001      	beq.n	1c286 <net_context_unref+0x22>
		return old_rc - 1;
   1c282:	1e58      	subs	r0, r3, #1
   1c284:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1c286:	4604      	mov	r4, r0
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1c288:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1c28c:	481b      	ldr	r0, [pc, #108]	; (1c2fc <net_context_unref+0x98>)
   1c28e:	f00c fbc3 	bl	28a18 <_impl_k_sem_take>
	if (context->tcp) {
   1c292:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c294:	b13b      	cbz	r3, 1c2a6 <net_context_unref+0x42>
   1c296:	2500      	movs	r5, #0
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c298:	2d00      	cmp	r5, #0
   1c29a:	dd15      	ble.n	1c2c8 <net_context_unref+0x64>
		net_tcp_release(context->tcp);
   1c29c:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c29e:	f006 fe3d 	bl	22f1c <net_tcp_release>
		context->tcp = NULL;
   1c2a2:	2300      	movs	r3, #0
   1c2a4:	6623      	str	r3, [r4, #96]	; 0x60
	if (context->conn_handler) {
   1c2a6:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c2a8:	b118      	cbz	r0, 1c2b2 <net_context_unref+0x4e>
		net_conn_unregister(context->conn_handler);
   1c2aa:	f008 fb13 	bl	248d4 <net_conn_unregister>
		context->conn_handler = NULL;
   1c2ae:	2300      	movs	r3, #0
   1c2b0:	62e3      	str	r3, [r4, #44]	; 0x2c
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c2b2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
	context->flags &= ~NET_CONTEXT_IN_USE;
   1c2b6:	f003 03f8 	and.w	r3, r3, #248	; 0xf8
   1c2ba:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1c2be:	480f      	ldr	r0, [pc, #60]	; (1c2fc <net_context_unref+0x98>)
   1c2c0:	f00c fb97 	bl	289f2 <_impl_k_sem_give>
	return 0;
   1c2c4:	2000      	movs	r0, #0
}
   1c2c6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			if (tcp_backlog[i].tcp != context->tcp) {
   1c2c8:	eb05 0285 	add.w	r2, r5, r5, lsl #2
   1c2cc:	0113      	lsls	r3, r2, #4
   1c2ce:	4a0c      	ldr	r2, [pc, #48]	; (1c300 <net_context_unref+0x9c>)
   1c2d0:	58d2      	ldr	r2, [r2, r3]
   1c2d2:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c2d4:	429a      	cmp	r2, r3
   1c2d6:	d001      	beq.n	1c2dc <net_context_unref+0x78>
		for (i = 0; i < CONFIG_NET_TCP_BACKLOG_SIZE; i++) {
   1c2d8:	3501      	adds	r5, #1
   1c2da:	e7dd      	b.n	1c298 <net_context_unref+0x34>
			k_delayed_work_cancel(&tcp_backlog[i].ack_timer);
   1c2dc:	4f08      	ldr	r7, [pc, #32]	; (1c300 <net_context_unref+0x9c>)
   1c2de:	00ae      	lsls	r6, r5, #2
   1c2e0:	1972      	adds	r2, r6, r5
   1c2e2:	0113      	lsls	r3, r2, #4
   1c2e4:	3328      	adds	r3, #40	; 0x28
   1c2e6:	18f8      	adds	r0, r7, r3
   1c2e8:	f00d f972 	bl	295d0 <k_delayed_work_cancel>
			memset(&tcp_backlog[i], 0, sizeof(tcp_backlog[i]));
   1c2ec:	442e      	add	r6, r5
   1c2ee:	0130      	lsls	r0, r6, #4
   1c2f0:	2250      	movs	r2, #80	; 0x50
   1c2f2:	2100      	movs	r1, #0
   1c2f4:	4438      	add	r0, r7
   1c2f6:	f00d fb4f 	bl	29998 <memset>
   1c2fa:	e7ed      	b.n	1c2d8 <net_context_unref+0x74>
   1c2fc:	20001ea8 	.word	0x20001ea8
   1c300:	20001ec0 	.word	0x20001ec0

0001c304 <handle_fin_timeout>:
{
   1c304:	b508      	push	{r3, lr}
	net_context_unref(tcp->context);
   1c306:	f850 0c30 	ldr.w	r0, [r0, #-48]
   1c30a:	f7ff ffab 	bl	1c264 <net_context_unref>
   1c30e:	bd08      	pop	{r3, pc}

0001c310 <handle_ack_timeout>:
	return (enum net_tcp_state)tcp->state;
   1c310:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   1c314:	f3c3 3343 	ubfx	r3, r3, #13, #4
	if (net_tcp_get_state(tcp) == NET_TCP_LAST_ACK) {
   1c318:	2b06      	cmp	r3, #6
   1c31a:	d000      	beq.n	1c31e <handle_ack_timeout+0xe>
   1c31c:	4770      	bx	lr
{
   1c31e:	b510      	push	{r4, lr}
   1c320:	f1a0 0208 	sub.w	r2, r0, #8
   1c324:	4604      	mov	r4, r0
		net_tcp_change_state(tcp, NET_TCP_CLOSED);
   1c326:	2100      	movs	r1, #0
   1c328:	4610      	mov	r0, r2
   1c32a:	f006 fdcc 	bl	22ec6 <net_tcp_change_state>
		net_context_unref(tcp->context);
   1c32e:	f854 0c08 	ldr.w	r0, [r4, #-8]
   1c332:	f7ff ff97 	bl	1c264 <net_context_unref>
   1c336:	bd10      	pop	{r4, pc}

0001c338 <tcp_synack_received>:
NET_CONN_CB(tcp_synack_received)
   1c338:	b570      	push	{r4, r5, r6, lr}
   1c33a:	4605      	mov	r5, r0
   1c33c:	460e      	mov	r6, r1
   1c33e:	4614      	mov	r4, r2
   1c340:	4610      	mov	r0, r2
   1c342:	f7ff ff81 	bl	1c248 <net_context_ref>
   1c346:	4622      	mov	r2, r4
   1c348:	4631      	mov	r1, r6
   1c34a:	4628      	mov	r0, r5
   1c34c:	f7ff fd5e 	bl	1be0c <_tcp_synack_received>
   1c350:	4605      	mov	r5, r0
   1c352:	4620      	mov	r0, r4
   1c354:	f7ff ff86 	bl	1c264 <net_context_unref>
   1c358:	4628      	mov	r0, r5
   1c35a:	bd70      	pop	{r4, r5, r6, pc}

0001c35c <_tcp_established>:
{
   1c35c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1c360:	b087      	sub	sp, #28
   1c362:	4607      	mov	r7, r0
   1c364:	460e      	mov	r6, r1
   1c366:	4614      	mov	r4, r2
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   1c368:	a901      	add	r1, sp, #4
   1c36a:	4630      	mov	r0, r6
   1c36c:	f006 ff9a 	bl	232a4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   1c370:	2800      	cmp	r0, #0
   1c372:	f000 80b5 	beq.w	1c4e0 <_tcp_established+0x184>
   1c376:	4605      	mov	r5, r0
	if (net_tcp_get_state(context->tcp) < NET_TCP_ESTABLISHED) {
   1c378:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c37a:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
   1c37e:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c382:	2b03      	cmp	r3, #3
   1c384:	d804      	bhi.n	1c390 <_tcp_established+0x34>
		return NET_DROP;
   1c386:	2502      	movs	r5, #2
}
   1c388:	4628      	mov	r0, r5
   1c38a:	b007      	add	sp, #28
   1c38c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	tcp_flags = NET_TCP_FLAGS(tcp_hdr);
   1c390:	f890 800d 	ldrb.w	r8, [r0, #13]
	if (tcp_flags & NET_TCP_ACK) {
   1c394:	f018 0f10 	tst.w	r8, #16
   1c398:	d116      	bne.n	1c3c8 <_tcp_established+0x6c>
	if (tcp_flags & NET_TCP_RST) {
   1c39a:	f018 0f04 	tst.w	r8, #4
   1c39e:	d121      	bne.n	1c3e4 <_tcp_established+0x88>
	return ((u16_t)src[0] << 8) | src[1];
   1c3a0:	792a      	ldrb	r2, [r5, #4]
   1c3a2:	796b      	ldrb	r3, [r5, #5]
   1c3a4:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   1c3a8:	79a9      	ldrb	r1, [r5, #6]
   1c3aa:	79eb      	ldrb	r3, [r5, #7]
   1c3ac:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   1c3b0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
			    context->tcp->send_ack) < 0) {
   1c3b4:	6e22      	ldr	r2, [r4, #96]	; 0x60
	if (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   1c3b6:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
 *
 * @return < 0 if seq1 < seq2, 0 if seq1 == seq2, > 0 if seq > seq2
 */
static inline s32_t net_tcp_seq_cmp(u32_t seq1, u32_t seq2)
{
	return (s32_t)(seq1 - seq2);
   1c3ba:	1a99      	subs	r1, r3, r2
   1c3bc:	2900      	cmp	r1, #0
   1c3be:	db2e      	blt.n	1c41e <_tcp_established+0xc2>
	if (sys_get_be32(tcp_hdr->seq) - context->tcp->send_ack) {
   1c3c0:	429a      	cmp	r2, r3
   1c3c2:	d033      	beq.n	1c42c <_tcp_established+0xd0>
		return NET_DROP;
   1c3c4:	2502      	movs	r5, #2
   1c3c6:	e7df      	b.n	1c388 <_tcp_established+0x2c>
	return ((u16_t)src[0] << 8) | src[1];
   1c3c8:	7a03      	ldrb	r3, [r0, #8]
   1c3ca:	7a41      	ldrb	r1, [r0, #9]
   1c3cc:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   1c3d0:	7a82      	ldrb	r2, [r0, #10]
   1c3d2:	7ac3      	ldrb	r3, [r0, #11]
   1c3d4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
		net_tcp_ack_received(context,
   1c3d8:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   1c3dc:	4620      	mov	r0, r4
   1c3de:	f007 fa49 	bl	23874 <net_tcp_ack_received>
   1c3e2:	e7da      	b.n	1c39a <_tcp_established+0x3e>
		if (!net_tcp_validate_seq(context->tcp, pkt)) {
   1c3e4:	4631      	mov	r1, r6
   1c3e6:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c3e8:	f006 ffd7 	bl	2339a <net_tcp_validate_seq>
   1c3ec:	b928      	cbnz	r0, 1c3fa <_tcp_established+0x9e>
   1c3ee:	4a3d      	ldr	r2, [pc, #244]	; (1c4e4 <_tcp_established+0x188>)
   1c3f0:	6e93      	ldr	r3, [r2, #104]	; 0x68
   1c3f2:	3301      	adds	r3, #1
   1c3f4:	6693      	str	r3, [r2, #104]	; 0x68
			return NET_DROP;
   1c3f6:	2502      	movs	r5, #2
   1c3f8:	e7c6      	b.n	1c388 <_tcp_established+0x2c>
	net_stats.tcp.rst++;
   1c3fa:	4a3a      	ldr	r2, [pc, #232]	; (1c4e4 <_tcp_established+0x188>)
   1c3fc:	6ed3      	ldr	r3, [r2, #108]	; 0x6c
   1c3fe:	3301      	adds	r3, #1
   1c400:	66d3      	str	r3, [r2, #108]	; 0x6c
		if (context->recv_cb) {
   1c402:	6b25      	ldr	r5, [r4, #48]	; 0x30
   1c404:	b135      	cbz	r5, 1c414 <_tcp_established+0xb8>
					 context->tcp->recv_user_data);
   1c406:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, -ECONNRESET,
   1c408:	685b      	ldr	r3, [r3, #4]
   1c40a:	f06f 0267 	mvn.w	r2, #103	; 0x67
   1c40e:	2100      	movs	r1, #0
   1c410:	4620      	mov	r0, r4
   1c412:	47a8      	blx	r5
		net_context_unref(context);
   1c414:	4620      	mov	r0, r4
   1c416:	f7ff ff25 	bl	1c264 <net_context_unref>
		return NET_DROP;
   1c41a:	2502      	movs	r5, #2
   1c41c:	e7b4      	b.n	1c388 <_tcp_established+0x2c>
		send_ack(context, &conn->remote_addr, true);
   1c41e:	2201      	movs	r2, #1
   1c420:	4639      	mov	r1, r7
   1c422:	4620      	mov	r0, r4
   1c424:	f7ff fcd2 	bl	1bdcc <send_ack>
		return NET_DROP;
   1c428:	2502      	movs	r5, #2
   1c42a:	e7ad      	b.n	1c388 <_tcp_established+0x2c>
	set_appdata_values(pkt, IPPROTO_TCP);
   1c42c:	2106      	movs	r1, #6
   1c42e:	4630      	mov	r0, r6
   1c430:	f7ff fc25 	bl	1bc7e <set_appdata_values>
	return pkt->appdatalen;
   1c434:	f8b6 9030 	ldrh.w	r9, [r6, #48]	; 0x30
	if (data_len > net_tcp_get_recv_wnd(context->tcp)) {
   1c438:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c43a:	f006 fcc5 	bl	22dc8 <net_tcp_get_recv_wnd>
   1c43e:	4581      	cmp	r9, r0
   1c440:	d901      	bls.n	1c446 <_tcp_established+0xea>
		return NET_DROP;
   1c442:	2502      	movs	r5, #2
   1c444:	e7a0      	b.n	1c388 <_tcp_established+0x2c>
	ret = packet_received(conn, pkt, context->tcp->recv_user_data);
   1c446:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c448:	685a      	ldr	r2, [r3, #4]
   1c44a:	4631      	mov	r1, r6
   1c44c:	4638      	mov	r0, r7
   1c44e:	f7ff fc4b 	bl	1bce8 <packet_received>
   1c452:	4605      	mov	r5, r0
	context->tcp->send_ack += data_len;
   1c454:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c456:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c45a:	444b      	add	r3, r9
   1c45c:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
	if (tcp_flags & NET_TCP_FIN) {
   1c460:	f018 0f01 	tst.w	r8, #1
   1c464:	d022      	beq.n	1c4ac <_tcp_established+0x150>
		context->tcp->fin_rcvd = 1;
   1c466:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c468:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   1c46c:	f043 0304 	orr.w	r3, r3, #4
   1c470:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
		if (net_tcp_get_state(context->tcp) == NET_TCP_ESTABLISHED) {
   1c474:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c476:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   1c47a:	f3c3 3343 	ubfx	r3, r3, #13, #4
   1c47e:	2b04      	cmp	r3, #4
   1c480:	d02a      	beq.n	1c4d8 <_tcp_established+0x17c>
		context->tcp->send_ack += 1;
   1c482:	6e22      	ldr	r2, [r4, #96]	; 0x60
   1c484:	f8d2 309c 	ldr.w	r3, [r2, #156]	; 0x9c
   1c488:	3301      	adds	r3, #1
   1c48a:	f8c2 309c 	str.w	r3, [r2, #156]	; 0x9c
		if (context->recv_cb) {
   1c48e:	6b26      	ldr	r6, [r4, #48]	; 0x30
   1c490:	b12e      	cbz	r6, 1c49e <_tcp_established+0x142>
					 context->tcp->recv_user_data);
   1c492:	6e23      	ldr	r3, [r4, #96]	; 0x60
			context->recv_cb(context, NULL, 0,
   1c494:	685b      	ldr	r3, [r3, #4]
   1c496:	2200      	movs	r2, #0
   1c498:	4611      	mov	r1, r2
   1c49a:	4620      	mov	r0, r4
   1c49c:	47b0      	blx	r6
		k_delayed_work_submit(&context->tcp->ack_timer, ACK_TIMEOUT);
   1c49e:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c4a0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c4a4:	3108      	adds	r1, #8
   1c4a6:	4810      	ldr	r0, [pc, #64]	; (1c4e8 <_tcp_established+0x18c>)
   1c4a8:	f00d f8ec 	bl	29684 <k_delayed_work_submit_to_queue>
	send_ack(context, &conn->remote_addr, false);
   1c4ac:	2200      	movs	r2, #0
   1c4ae:	4639      	mov	r1, r7
   1c4b0:	4620      	mov	r0, r4
   1c4b2:	f7ff fc8b 	bl	1bdcc <send_ack>
	if (sys_slist_is_empty(&context->tcp->sent_list)
   1c4b6:	6e23      	ldr	r3, [r4, #96]	; 0x60
   1c4b8:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
   1c4bc:	2a00      	cmp	r2, #0
   1c4be:	f47f af63 	bne.w	1c388 <_tcp_established+0x2c>
	    && context->tcp->fin_sent) {
   1c4c2:	f893 30a6 	ldrb.w	r3, [r3, #166]	; 0xa6
   1c4c6:	f003 0306 	and.w	r3, r3, #6
   1c4ca:	2b06      	cmp	r3, #6
   1c4cc:	f47f af5c 	bne.w	1c388 <_tcp_established+0x2c>
		net_context_unref(context);
   1c4d0:	4620      	mov	r0, r4
   1c4d2:	f7ff fec7 	bl	1c264 <net_context_unref>
   1c4d6:	e757      	b.n	1c388 <_tcp_established+0x2c>
			net_tcp_change_state(context->tcp, NET_TCP_CLOSE_WAIT);
   1c4d8:	2105      	movs	r1, #5
   1c4da:	f006 fcf4 	bl	22ec6 <net_tcp_change_state>
   1c4de:	e7d0      	b.n	1c482 <_tcp_established+0x126>
		return NET_DROP;
   1c4e0:	2502      	movs	r5, #2
   1c4e2:	e751      	b.n	1c388 <_tcp_established+0x2c>
   1c4e4:	20002ab8 	.word	0x20002ab8
   1c4e8:	20002bd8 	.word	0x20002bd8

0001c4ec <tcp_established>:
NET_CONN_CB(tcp_established)
   1c4ec:	b570      	push	{r4, r5, r6, lr}
   1c4ee:	4605      	mov	r5, r0
   1c4f0:	460e      	mov	r6, r1
   1c4f2:	4614      	mov	r4, r2
   1c4f4:	4610      	mov	r0, r2
   1c4f6:	f7ff fea7 	bl	1c248 <net_context_ref>
   1c4fa:	4622      	mov	r2, r4
   1c4fc:	4631      	mov	r1, r6
   1c4fe:	4628      	mov	r0, r5
   1c500:	f7ff ff2c 	bl	1c35c <_tcp_established>
   1c504:	4605      	mov	r5, r0
   1c506:	4620      	mov	r0, r4
   1c508:	f7ff feac 	bl	1c264 <net_context_unref>
   1c50c:	4628      	mov	r0, r5
   1c50e:	bd70      	pop	{r4, r5, r6, pc}

0001c510 <net_context_put>:
	if (!PART_OF_ARRAY(contexts, context)) {
   1c510:	b390      	cbz	r0, 1c578 <net_context_put+0x68>
{
   1c512:	b510      	push	{r4, lr}
   1c514:	4604      	mov	r4, r0
	if (!PART_OF_ARRAY(contexts, context)) {
   1c516:	4a1d      	ldr	r2, [pc, #116]	; (1c58c <net_context_put+0x7c>)
   1c518:	4290      	cmp	r0, r2
   1c51a:	d330      	bcc.n	1c57e <net_context_put+0x6e>
   1c51c:	f502 721c 	add.w	r2, r2, #624	; 0x270
   1c520:	4290      	cmp	r0, r2
   1c522:	d22f      	bcs.n	1c584 <net_context_put+0x74>
	context->connect_cb = NULL;
   1c524:	2200      	movs	r2, #0
   1c526:	6382      	str	r2, [r0, #56]	; 0x38
	context->recv_cb = NULL;
   1c528:	6302      	str	r2, [r0, #48]	; 0x30
	context->send_cb = NULL;
   1c52a:	6342      	str	r2, [r0, #52]	; 0x34
	if (context->flags & NET_CONTEXT_PROTO) {
   1c52c:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1c530:	f012 0f40 	tst.w	r2, #64	; 0x40
   1c534:	d007      	beq.n	1c546 <net_context_put+0x36>
		return IPPROTO_TCP;
   1c536:	2106      	movs	r1, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c538:	2906      	cmp	r1, #6
   1c53a:	d006      	beq.n	1c54a <net_context_put+0x3a>
	net_context_unref(context);
   1c53c:	4620      	mov	r0, r4
   1c53e:	f7ff fe91 	bl	1c264 <net_context_unref>
	return 0;
   1c542:	2000      	movs	r0, #0
   1c544:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1c546:	2111      	movs	r1, #17
   1c548:	e7f6      	b.n	1c538 <net_context_put+0x28>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c54a:	f3c2 0241 	ubfx	r2, r2, #1, #2
		if ((net_context_get_state(context) == NET_CONTEXT_CONNECTED ||
   1c54e:	2a02      	cmp	r2, #2
   1c550:	d001      	beq.n	1c556 <net_context_put+0x46>
   1c552:	2a03      	cmp	r2, #3
   1c554:	d1f2      	bne.n	1c53c <net_context_put+0x2c>
		    && !context->tcp->fin_rcvd) {
   1c556:	6e21      	ldr	r1, [r4, #96]	; 0x60
   1c558:	f891 30a6 	ldrb.w	r3, [r1, #166]	; 0xa6
   1c55c:	f013 0f04 	tst.w	r3, #4
   1c560:	d1ec      	bne.n	1c53c <net_context_put+0x2c>
   1c562:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1c566:	3130      	adds	r1, #48	; 0x30
   1c568:	4809      	ldr	r0, [pc, #36]	; (1c590 <net_context_put+0x80>)
   1c56a:	f00d f88b 	bl	29684 <k_delayed_work_submit_to_queue>
			queue_fin(context);
   1c56e:	4620      	mov	r0, r4
   1c570:	f7ff fb59 	bl	1bc26 <queue_fin>
			return 0;
   1c574:	2000      	movs	r0, #0
   1c576:	bd10      	pop	{r4, pc}
		return -EINVAL;
   1c578:	f06f 0015 	mvn.w	r0, #21
   1c57c:	4770      	bx	lr
   1c57e:	f06f 0015 	mvn.w	r0, #21
   1c582:	bd10      	pop	{r4, pc}
   1c584:	f06f 0015 	mvn.w	r0, #21
}
   1c588:	bd10      	pop	{r4, pc}
   1c58a:	bf00      	nop
   1c58c:	20001c38 	.word	0x20001c38
   1c590:	20002bd8 	.word	0x20002bd8

0001c594 <net_context_bind>:
	if (context->conn_handler) {
   1c594:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   1c596:	2b00      	cmp	r3, #0
   1c598:	d15c      	bne.n	1c654 <net_context_bind+0xc0>
	if (addr->sa_family == AF_INET6) {
   1c59a:	880b      	ldrh	r3, [r1, #0]
   1c59c:	2b0a      	cmp	r3, #10
   1c59e:	d15d      	bne.n	1c65c <net_context_bind+0xc8>
{
   1c5a0:	b570      	push	{r4, r5, r6, lr}
   1c5a2:	b082      	sub	sp, #8
		struct net_if *iface = NULL;
   1c5a4:	2300      	movs	r3, #0
   1c5a6:	9301      	str	r3, [sp, #4]
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c5a8:	2a17      	cmp	r2, #23
   1c5aa:	d945      	bls.n	1c638 <net_context_bind+0xa4>
   1c5ac:	460d      	mov	r5, r1
   1c5ae:	4604      	mov	r4, r0
	return addr->s6_addr[0] == 0xFF;
   1c5b0:	790b      	ldrb	r3, [r1, #4]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c5b2:	2bff      	cmp	r3, #255	; 0xff
   1c5b4:	d009      	beq.n	1c5ca <net_context_bind+0x36>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c5b6:	684b      	ldr	r3, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5b8:	b983      	cbnz	r3, 1c5dc <net_context_bind+0x48>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c5ba:	688b      	ldr	r3, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c5bc:	bb2b      	cbnz	r3, 1c60a <net_context_bind+0x76>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5be:	68cb      	ldr	r3, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c5c0:	bb2b      	cbnz	r3, 1c60e <net_context_bind+0x7a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c5c2:	690b      	ldr	r3, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c5c4:	b32b      	cbz	r3, 1c612 <net_context_bind+0x7e>
   1c5c6:	2300      	movs	r3, #0
   1c5c8:	e009      	b.n	1c5de <net_context_bind+0x4a>
			maddr = net_if_ipv6_maddr_lookup(&addr6->sin6_addr,
   1c5ca:	a901      	add	r1, sp, #4
   1c5cc:	1d28      	adds	r0, r5, #4
   1c5ce:	f7fe fccb 	bl	1af68 <net_if_ipv6_maddr_lookup>
			if (!maddr) {
   1c5d2:	4606      	mov	r6, r0
   1c5d4:	2800      	cmp	r0, #0
   1c5d6:	d034      	beq.n	1c642 <net_context_bind+0xae>
			ptr = &maddr->address.in6_addr;
   1c5d8:	3608      	adds	r6, #8
   1c5da:	e007      	b.n	1c5ec <net_context_bind+0x58>
   1c5dc:	2300      	movs	r3, #0
		} else if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c5de:	b1d3      	cbz	r3, 1c616 <net_context_bind+0x82>
			iface = net_if_get_default();
   1c5e0:	f7fe fa4c 	bl	1aa7c <net_if_get_default>
   1c5e4:	9001      	str	r0, [sp, #4]
			ptr = (struct in6_addr *)net_ipv6_unspecified_address();
   1c5e6:	f002 fde9 	bl	1f1bc <net_ipv6_unspecified_address>
   1c5ea:	4606      	mov	r6, r0
		if (!iface) {
   1c5ec:	9801      	ldr	r0, [sp, #4]
   1c5ee:	b370      	cbz	r0, 1c64e <net_context_bind+0xba>
	context->iface = net_if_get_by_iface(iface);
   1c5f0:	f7ff f9ec 	bl	1b9cc <net_if_get_by_iface>
   1c5f4:	f884 005c 	strb.w	r0, [r4, #92]	; 0x5c
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c5f8:	230a      	movs	r3, #10
   1c5fa:	8123      	strh	r3, [r4, #8]
		net_sin6_ptr(&context->local)->sin6_addr = ptr;
   1c5fc:	60e6      	str	r6, [r4, #12]
		if (addr6->sin6_port) {
   1c5fe:	8869      	ldrh	r1, [r5, #2]
   1c600:	b989      	cbnz	r1, 1c626 <net_context_bind+0x92>
				net_sin6_ptr(&context->local)->sin6_port;
   1c602:	8963      	ldrh	r3, [r4, #10]
			addr6->sin6_port =
   1c604:	806b      	strh	r3, [r5, #2]
		return 0;
   1c606:	2300      	movs	r3, #0
   1c608:	e018      	b.n	1c63c <net_context_bind+0xa8>
   1c60a:	2300      	movs	r3, #0
   1c60c:	e7e7      	b.n	1c5de <net_context_bind+0x4a>
   1c60e:	2300      	movs	r3, #0
   1c610:	e7e5      	b.n	1c5de <net_context_bind+0x4a>
   1c612:	2301      	movs	r3, #1
   1c614:	e7e3      	b.n	1c5de <net_context_bind+0x4a>
			ifaddr = net_if_ipv6_addr_lookup(&addr6->sin6_addr,
   1c616:	a901      	add	r1, sp, #4
   1c618:	1d28      	adds	r0, r5, #4
   1c61a:	f7fe fa5b 	bl	1aad4 <net_if_ipv6_addr_lookup>
			if (!ifaddr) {
   1c61e:	4606      	mov	r6, r0
   1c620:	b190      	cbz	r0, 1c648 <net_context_bind+0xb4>
			ptr = &ifaddr->address.in6_addr;
   1c622:	3604      	adds	r6, #4
   1c624:	e7e2      	b.n	1c5ec <net_context_bind+0x58>
			ret = check_used_port(AF_INET6, addr6->sin6_port,
   1c626:	462a      	mov	r2, r5
   1c628:	4618      	mov	r0, r3
   1c62a:	f7ff fa9f 	bl	1bb6c <check_used_port>
			if (!ret) {
   1c62e:	4603      	mov	r3, r0
   1c630:	b920      	cbnz	r0, 1c63c <net_context_bind+0xa8>
					addr6->sin6_port;
   1c632:	886a      	ldrh	r2, [r5, #2]
				net_sin6_ptr(&context->local)->sin6_port =
   1c634:	8162      	strh	r2, [r4, #10]
   1c636:	e001      	b.n	1c63c <net_context_bind+0xa8>
			return -EINVAL;
   1c638:	f06f 0315 	mvn.w	r3, #21
}
   1c63c:	4618      	mov	r0, r3
   1c63e:	b002      	add	sp, #8
   1c640:	bd70      	pop	{r4, r5, r6, pc}
				return -ENOENT;
   1c642:	f06f 0301 	mvn.w	r3, #1
   1c646:	e7f9      	b.n	1c63c <net_context_bind+0xa8>
				return -ENOENT;
   1c648:	f06f 0301 	mvn.w	r3, #1
   1c64c:	e7f6      	b.n	1c63c <net_context_bind+0xa8>
			return -EADDRNOTAVAIL;
   1c64e:	f06f 037c 	mvn.w	r3, #124	; 0x7c
   1c652:	e7f3      	b.n	1c63c <net_context_bind+0xa8>
		return -EISCONN;
   1c654:	f06f 037e 	mvn.w	r3, #126	; 0x7e
}
   1c658:	4618      	mov	r0, r3
   1c65a:	4770      	bx	lr
	return -EINVAL;
   1c65c:	f06f 0315 	mvn.w	r3, #21
   1c660:	e7fa      	b.n	1c658 <net_context_bind+0xc4>

0001c662 <bind_default>:
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c662:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c666:	f013 0f10 	tst.w	r3, #16
   1c66a:	d006      	beq.n	1c67a <bind_default+0x18>
		return AF_INET6;
   1c66c:	230a      	movs	r3, #10
	if (family == AF_INET6) {
   1c66e:	2b0a      	cmp	r3, #10
   1c670:	d120      	bne.n	1c6b4 <bind_default+0x52>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c672:	68c3      	ldr	r3, [r0, #12]
   1c674:	b11b      	cbz	r3, 1c67e <bind_default+0x1c>
			return 0;
   1c676:	2000      	movs	r0, #0
   1c678:	4770      	bx	lr
	return AF_INET;
   1c67a:	2302      	movs	r3, #2
   1c67c:	e7f7      	b.n	1c66e <bind_default+0xc>
{
   1c67e:	b530      	push	{r4, r5, lr}
   1c680:	b087      	sub	sp, #28
   1c682:	4604      	mov	r4, r0
		addr6.sin6_family = AF_INET6;
   1c684:	ad06      	add	r5, sp, #24
   1c686:	230a      	movs	r3, #10
   1c688:	f825 3d18 	strh.w	r3, [r5, #-24]!
		memcpy(&addr6.sin6_addr, net_ipv6_unspecified_address(),
   1c68c:	f002 fd96 	bl	1f1bc <net_ipv6_unspecified_address>
   1c690:	2210      	movs	r2, #16
   1c692:	4601      	mov	r1, r0
   1c694:	a801      	add	r0, sp, #4
   1c696:	f7e3 fe13 	bl	2c0 <memcpy>
			find_available_port(context,
   1c69a:	4629      	mov	r1, r5
   1c69c:	4620      	mov	r0, r4
   1c69e:	f7ff faa1 	bl	1bbe4 <find_available_port>
		addr6.sin6_port =
   1c6a2:	f8ad 0002 	strh.w	r0, [sp, #2]
		return net_context_bind(context, (struct sockaddr *)&addr6,
   1c6a6:	2218      	movs	r2, #24
   1c6a8:	4629      	mov	r1, r5
   1c6aa:	4620      	mov	r0, r4
   1c6ac:	f7ff ff72 	bl	1c594 <net_context_bind>
}
   1c6b0:	b007      	add	sp, #28
   1c6b2:	bd30      	pop	{r4, r5, pc}
	return -EINVAL;
   1c6b4:	f06f 0015 	mvn.w	r0, #21
   1c6b8:	4770      	bx	lr

0001c6ba <sendto>:
{
   1c6ba:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c6bc:	b085      	sub	sp, #20
   1c6be:	9003      	str	r0, [sp, #12]
	return pkt->context;
   1c6c0:	68c5      	ldr	r5, [r0, #12]
	return context->flags & NET_CONTEXT_IN_USE;
   1c6c2:	f895 005d 	ldrb.w	r0, [r5, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c6c6:	f010 0f01 	tst.w	r0, #1
   1c6ca:	d072      	beq.n	1c7b2 <sendto+0xf8>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c6cc:	f010 0f40 	tst.w	r0, #64	; 0x40
   1c6d0:	d01f      	beq.n	1c712 <sendto+0x58>
		return IPPROTO_TCP;
   1c6d2:	f04f 0e06 	mov.w	lr, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c6d6:	f1be 0f06 	cmp.w	lr, #6
   1c6da:	d01d      	beq.n	1c718 <sendto+0x5e>
   1c6dc:	461f      	mov	r7, r3
   1c6de:	4616      	mov	r6, r2
   1c6e0:	460c      	mov	r4, r1
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c6e2:	f1be 0f11 	cmp.w	lr, #17
   1c6e6:	d024      	beq.n	1c732 <sendto+0x78>
	if (!dst_addr) {
   1c6e8:	2c00      	cmp	r4, #0
   1c6ea:	d068      	beq.n	1c7be <sendto+0x104>
	if (net_pkt_family(pkt) == AF_INET6) {
   1c6ec:	9903      	ldr	r1, [sp, #12]
	return pkt->family;
   1c6ee:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1c6f2:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   1c6f6:	2b0a      	cmp	r3, #10
   1c6f8:	d164      	bne.n	1c7c4 <sendto+0x10a>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c6fa:	2e17      	cmp	r6, #23
   1c6fc:	d965      	bls.n	1c7ca <sendto+0x110>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c6fe:	6863      	ldr	r3, [r4, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c700:	b9f3      	cbnz	r3, 1c740 <sendto+0x86>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c702:	68a3      	ldr	r3, [r4, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c704:	bb63      	cbnz	r3, 1c760 <sendto+0xa6>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c706:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c708:	bb63      	cbnz	r3, 1c764 <sendto+0xaa>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c70a:	6923      	ldr	r3, [r4, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c70c:	b363      	cbz	r3, 1c768 <sendto+0xae>
   1c70e:	2300      	movs	r3, #0
   1c710:	e017      	b.n	1c742 <sendto+0x88>
	return IPPROTO_UDP;
   1c712:	f04f 0e11 	mov.w	lr, #17
   1c716:	e7de      	b.n	1c6d6 <sendto+0x1c>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c718:	f3c0 0041 	ubfx	r0, r0, #1, #2
		if (net_context_get_state(context) != NET_CONTEXT_CONNECTED) {
   1c71c:	2802      	cmp	r0, #2
   1c71e:	d14b      	bne.n	1c7b8 <sendto+0xfe>
		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1c720:	6e28      	ldr	r0, [r5, #96]	; 0x60
   1c722:	f8b0 00a4 	ldrh.w	r0, [r0, #164]	; 0xa4
   1c726:	f410 7f80 	tst.w	r0, #256	; 0x100
   1c72a:	d0d7      	beq.n	1c6dc <sendto+0x22>
			return -ESHUTDOWN;
   1c72c:	f06f 036d 	mvn.w	r3, #109	; 0x6d
   1c730:	e03c      	b.n	1c7ac <sendto+0xf2>
		ret = bind_default(context);
   1c732:	4628      	mov	r0, r5
   1c734:	f7ff ff95 	bl	1c662 <bind_default>
		if (ret) {
   1c738:	4603      	mov	r3, r0
   1c73a:	2800      	cmp	r0, #0
   1c73c:	d0d4      	beq.n	1c6e8 <sendto+0x2e>
   1c73e:	e035      	b.n	1c7ac <sendto+0xf2>
   1c740:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c742:	2b00      	cmp	r3, #0
   1c744:	d144      	bne.n	1c7d0 <sendto+0x116>
	if (context->flags & NET_CONTEXT_PROTO) {
   1c746:	f895 305d 	ldrb.w	r3, [r5, #93]	; 0x5d
   1c74a:	f013 0f40 	tst.w	r3, #64	; 0x40
   1c74e:	d00d      	beq.n	1c76c <sendto+0xb2>
		return IPPROTO_TCP;
   1c750:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1c752:	2b11      	cmp	r3, #17
   1c754:	d00c      	beq.n	1c770 <sendto+0xb6>
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1c756:	2b06      	cmp	r3, #6
   1c758:	d13d      	bne.n	1c7d6 <sendto+0x11c>
	return net_buf_frags_len(pkt->frags);
   1c75a:	688a      	ldr	r2, [r1, #8]
	size_t bytes = 0;
   1c75c:	2000      	movs	r0, #0
   1c75e:	e011      	b.n	1c784 <sendto+0xca>
   1c760:	2300      	movs	r3, #0
   1c762:	e7ee      	b.n	1c742 <sendto+0x88>
   1c764:	2300      	movs	r3, #0
   1c766:	e7ec      	b.n	1c742 <sendto+0x88>
   1c768:	2301      	movs	r3, #1
   1c76a:	e7ea      	b.n	1c742 <sendto+0x88>
	return IPPROTO_UDP;
   1c76c:	2311      	movs	r3, #17
   1c76e:	e7f0      	b.n	1c752 <sendto+0x98>
		ret = create_udp_packet(context, pkt, dst_addr, &pkt);
   1c770:	ab03      	add	r3, sp, #12
   1c772:	4622      	mov	r2, r4
   1c774:	4628      	mov	r0, r5
   1c776:	f7ff fc0f 	bl	1bf98 <create_udp_packet>
   1c77a:	4603      	mov	r3, r0
   1c77c:	e009      	b.n	1c792 <sendto+0xd8>
		bytes += buf->len;
   1c77e:	8994      	ldrh	r4, [r2, #12]
   1c780:	4420      	add	r0, r4
		buf = buf->frags;
   1c782:	6812      	ldr	r2, [r2, #0]
	while (buf) {
   1c784:	2a00      	cmp	r2, #0
   1c786:	d1fa      	bne.n	1c77e <sendto+0xc4>
	pkt->appdatalen = len;
   1c788:	8608      	strh	r0, [r1, #48]	; 0x30
		ret = net_tcp_queue_data(context, pkt);
   1c78a:	4628      	mov	r0, r5
   1c78c:	f006 fd08 	bl	231a0 <net_tcp_queue_data>
   1c790:	4603      	mov	r3, r0
	if (ret < 0) {
   1c792:	2b00      	cmp	r3, #0
   1c794:	db0a      	blt.n	1c7ac <sendto+0xf2>
	return send_data(context, pkt, cb, timeout, token, user_data);
   1c796:	9b0c      	ldr	r3, [sp, #48]	; 0x30
   1c798:	9301      	str	r3, [sp, #4]
   1c79a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   1c79c:	9300      	str	r3, [sp, #0]
   1c79e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   1c7a0:	463a      	mov	r2, r7
   1c7a2:	9903      	ldr	r1, [sp, #12]
   1c7a4:	4628      	mov	r0, r5
   1c7a6:	f7ff fc1d 	bl	1bfe4 <send_data>
   1c7aa:	4603      	mov	r3, r0
}
   1c7ac:	4618      	mov	r0, r3
   1c7ae:	b005      	add	sp, #20
   1c7b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -EBADF;
   1c7b2:	f06f 0308 	mvn.w	r3, #8
   1c7b6:	e7f9      	b.n	1c7ac <sendto+0xf2>
			return -ENOTCONN;
   1c7b8:	f06f 037f 	mvn.w	r3, #127	; 0x7f
   1c7bc:	e7f6      	b.n	1c7ac <sendto+0xf2>
		return -EDESTADDRREQ;
   1c7be:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c7c2:	e7f3      	b.n	1c7ac <sendto+0xf2>
		return -EINVAL;
   1c7c4:	f06f 0315 	mvn.w	r3, #21
   1c7c8:	e7f0      	b.n	1c7ac <sendto+0xf2>
			return -EINVAL;
   1c7ca:	f06f 0315 	mvn.w	r3, #21
   1c7ce:	e7ed      	b.n	1c7ac <sendto+0xf2>
			return -EDESTADDRREQ;
   1c7d0:	f06f 0378 	mvn.w	r3, #120	; 0x78
   1c7d4:	e7ea      	b.n	1c7ac <sendto+0xf2>
		return -EPROTONOSUPPORT;
   1c7d6:	f06f 037a 	mvn.w	r3, #122	; 0x7a
   1c7da:	e7e7      	b.n	1c7ac <sendto+0xf2>

0001c7dc <recv_udp>:
#if defined(CONFIG_NET_UDP)
static int recv_udp(struct net_context *context,
		    net_context_recv_cb_t cb,
		    s32_t timeout,
		    void *user_data)
{
   1c7dc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1c7de:	b08f      	sub	sp, #60	; 0x3c
   1c7e0:	4604      	mov	r4, r0
   1c7e2:	460d      	mov	r5, r1
   1c7e4:	461e      	mov	r6, r3
	struct sockaddr local_addr = {
   1c7e6:	2300      	movs	r3, #0
   1c7e8:	9304      	str	r3, [sp, #16]
   1c7ea:	9305      	str	r3, [sp, #20]
   1c7ec:	9306      	str	r3, [sp, #24]
   1c7ee:	9307      	str	r3, [sp, #28]
   1c7f0:	9308      	str	r3, [sp, #32]
   1c7f2:	9309      	str	r3, [sp, #36]	; 0x24
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c7f4:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   1c7f8:	f013 0f10 	tst.w	r3, #16
   1c7fc:	d037      	beq.n	1c86e <recv_udp+0x92>
		return AF_INET6;
   1c7fe:	230a      	movs	r3, #10
   1c800:	f8ad 3010 	strh.w	r3, [sp, #16]
	u16_t lport = 0;
	int ret;

	ARG_UNUSED(timeout);

	if (context->conn_handler) {
   1c804:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   1c806:	b118      	cbz	r0, 1c810 <recv_udp+0x34>
		net_conn_unregister(context->conn_handler);
   1c808:	f008 f864 	bl	248d4 <net_conn_unregister>
		context->conn_handler = NULL;
   1c80c:	2300      	movs	r3, #0
   1c80e:	62e3      	str	r3, [r4, #44]	; 0x2c
	}

	ret = bind_default(context);
   1c810:	4620      	mov	r0, r4
   1c812:	f7ff ff26 	bl	1c662 <bind_default>
	if (ret) {
   1c816:	4603      	mov	r3, r0
   1c818:	bb30      	cbnz	r0, 1c868 <recv_udp+0x8c>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c81a:	f894 705d 	ldrb.w	r7, [r4, #93]	; 0x5d
   1c81e:	f017 0f10 	tst.w	r7, #16
   1c822:	d026      	beq.n	1c872 <recv_udp+0x96>
		return AF_INET6;
   1c824:	230a      	movs	r3, #10
		return ret;
	}

#if defined(CONFIG_NET_IPV6)
	if (net_context_get_family(context) == AF_INET6) {
   1c826:	2b0a      	cmp	r3, #10
   1c828:	d025      	beq.n	1c876 <recv_udp+0x9a>
	u16_t lport = 0;
   1c82a:	f04f 0e00 	mov.w	lr, #0
	struct sockaddr *laddr = NULL;
   1c82e:	4672      	mov	r2, lr

		lport = net_sin((struct sockaddr *)&context->local)->sin_port;
	}
#endif /* CONFIG_NET_IPV4 */

	context->recv_cb = cb;
   1c830:	6325      	str	r5, [r4, #48]	; 0x30
	if (context->flags & NET_CONTEXT_PROTO) {
   1c832:	f017 0f40 	tst.w	r7, #64	; 0x40
   1c836:	d037      	beq.n	1c8a8 <recv_udp+0xcc>
		return IPPROTO_TCP;
   1c838:	2006      	movs	r0, #6

	ret = net_conn_register(net_context_get_ip_proto(context),
   1c83a:	f017 0f80 	tst.w	r7, #128	; 0x80
   1c83e:	d135      	bne.n	1c8ac <recv_udp+0xd0>
   1c840:	2100      	movs	r1, #0
				context->flags & NET_CONTEXT_REMOTE_ADDR_SET ?
							&context->remote : NULL,
				laddr,
				ntohs(net_sin(&context->remote)->sin_port),
   1c842:	8ae5      	ldrh	r5, [r4, #22]
   1c844:	022b      	lsls	r3, r5, #8
   1c846:	ea43 2315 	orr.w	r3, r3, r5, lsr #8
				ntohs(lport),
   1c84a:	ea4f 251e 	mov.w	r5, lr, lsr #8
   1c84e:	ea45 250e 	orr.w	r5, r5, lr, lsl #8
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c852:	b2ad      	uxth	r5, r5
   1c854:	342c      	adds	r4, #44	; 0x2c
   1c856:	9403      	str	r4, [sp, #12]
   1c858:	9602      	str	r6, [sp, #8]
   1c85a:	4c16      	ldr	r4, [pc, #88]	; (1c8b4 <recv_udp+0xd8>)
   1c85c:	9401      	str	r4, [sp, #4]
   1c85e:	9500      	str	r5, [sp, #0]
   1c860:	b29b      	uxth	r3, r3
   1c862:	f008 f855 	bl	24910 <net_conn_register>
   1c866:	4603      	mov	r3, r0
				packet_received,
				user_data,
				&context->conn_handler);

	return ret;
}
   1c868:	4618      	mov	r0, r3
   1c86a:	b00f      	add	sp, #60	; 0x3c
   1c86c:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   1c86e:	2302      	movs	r3, #2
   1c870:	e7c6      	b.n	1c800 <recv_udp+0x24>
   1c872:	2302      	movs	r3, #2
   1c874:	e7d7      	b.n	1c826 <recv_udp+0x4a>
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c876:	68e3      	ldr	r3, [r4, #12]
   1c878:	b1a3      	cbz	r3, 1c8a4 <recv_udp+0xc8>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c87a:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1c87e:	6818      	ldr	r0, [r3, #0]
   1c880:	6859      	ldr	r1, [r3, #4]
   1c882:	689a      	ldr	r2, [r3, #8]
   1c884:	68db      	ldr	r3, [r3, #12]
   1c886:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1c88a:	f10d 0e14 	add.w	lr, sp, #20
   1c88e:	ab0e      	add	r3, sp, #56	; 0x38
   1c890:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c894:	e88e 000f 	stmia.w	lr, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c898:	aa04      	add	r2, sp, #16
			net_sin6((struct sockaddr *)&context->local)->sin6_port;
   1c89a:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
		net_sin6(&local_addr)->sin6_port =
   1c89e:	f8ad e012 	strh.w	lr, [sp, #18]
   1c8a2:	e7c5      	b.n	1c830 <recv_udp+0x54>
	struct sockaddr *laddr = NULL;
   1c8a4:	2200      	movs	r2, #0
   1c8a6:	e7f8      	b.n	1c89a <recv_udp+0xbe>
	return IPPROTO_UDP;
   1c8a8:	2011      	movs	r0, #17
   1c8aa:	e7c6      	b.n	1c83a <recv_udp+0x5e>
	ret = net_conn_register(net_context_get_ip_proto(context),
   1c8ac:	f104 0114 	add.w	r1, r4, #20
   1c8b0:	e7c7      	b.n	1c842 <recv_udp+0x66>
   1c8b2:	bf00      	nop
   1c8b4:	0001bce9 	.word	0x0001bce9

0001c8b8 <net_context_connect>:
{
   1c8b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1c8bc:	b090      	sub	sp, #64	; 0x40
	return context->flags & NET_CONTEXT_IN_USE;
   1c8be:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	if (!net_context_is_used(context)) {
   1c8c2:	f014 0f01 	tst.w	r4, #1
   1c8c6:	f000 80c9 	beq.w	1ca5c <net_context_connect+0x1a4>
   1c8ca:	461f      	mov	r7, r3
   1c8cc:	4615      	mov	r5, r2
   1c8ce:	460e      	mov	r6, r1
   1c8d0:	4604      	mov	r4, r0
	ret = bind_default(context);
   1c8d2:	f7ff fec6 	bl	1c662 <bind_default>
	if (ret) {
   1c8d6:	4680      	mov	r8, r0
   1c8d8:	2800      	cmp	r0, #0
   1c8da:	f040 80c1 	bne.w	1ca60 <net_context_connect+0x1a8>
	if (addr->sa_family != net_context_get_family(context)) {
   1c8de:	8831      	ldrh	r1, [r6, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   1c8e0:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c8e4:	f013 0f10 	tst.w	r3, #16
   1c8e8:	d02b      	beq.n	1c942 <net_context_connect+0x8a>
		return AF_INET6;
   1c8ea:	220a      	movs	r2, #10
   1c8ec:	4291      	cmp	r1, r2
   1c8ee:	f040 80bb 	bne.w	1ca68 <net_context_connect+0x1b0>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1c8f2:	f3c3 0341 	ubfx	r3, r3, #1, #2
	if (net_context_get_state(context) == NET_CONTEXT_LISTENING) {
   1c8f6:	2b03      	cmp	r3, #3
   1c8f8:	f000 80b9 	beq.w	1ca6e <net_context_connect+0x1b6>
	if (net_context_get_family(context) == AF_INET6) {
   1c8fc:	2a0a      	cmp	r2, #10
   1c8fe:	f040 80b9 	bne.w	1ca74 <net_context_connect+0x1bc>
		if (addrlen < sizeof(struct sockaddr_in6)) {
   1c902:	2d17      	cmp	r5, #23
   1c904:	f240 80b9 	bls.w	1ca7a <net_context_connect+0x1c2>
	return addr->s6_addr[0] == 0xFF;
   1c908:	7e23      	ldrb	r3, [r4, #24]
		if (net_is_ipv6_addr_mcast(&addr6->sin6_addr)) {
   1c90a:	2bff      	cmp	r3, #255	; 0xff
   1c90c:	f000 80b8 	beq.w	1ca80 <net_context_connect+0x1c8>
		memcpy(&addr6->sin6_addr, &net_sin6(addr)->sin6_addr,
   1c910:	2210      	movs	r2, #16
   1c912:	1d31      	adds	r1, r6, #4
   1c914:	f104 0018 	add.w	r0, r4, #24
   1c918:	f7e3 fcd2 	bl	2c0 <memcpy>
		addr6->sin6_port = net_sin6(addr)->sin6_port;
   1c91c:	f8b6 c002 	ldrh.w	ip, [r6, #2]
   1c920:	f8a4 c016 	strh.w	ip, [r4, #22]
		addr6->sin6_family = AF_INET6;
   1c924:	230a      	movs	r3, #10
   1c926:	82a3      	strh	r3, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c928:	69a3      	ldr	r3, [r4, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c92a:	b963      	cbnz	r3, 1c946 <net_context_connect+0x8e>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c92c:	69e3      	ldr	r3, [r4, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1c92e:	2b00      	cmp	r3, #0
   1c930:	d174      	bne.n	1ca1c <net_context_connect+0x164>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c932:	6a23      	ldr	r3, [r4, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1c934:	2b00      	cmp	r3, #0
   1c936:	d173      	bne.n	1ca20 <net_context_connect+0x168>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1c938:	6a63      	ldr	r3, [r4, #36]	; 0x24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1c93a:	2b00      	cmp	r3, #0
   1c93c:	d072      	beq.n	1ca24 <net_context_connect+0x16c>
   1c93e:	4643      	mov	r3, r8
   1c940:	e002      	b.n	1c948 <net_context_connect+0x90>
	return AF_INET;
   1c942:	2202      	movs	r2, #2
   1c944:	e7d2      	b.n	1c8ec <net_context_connect+0x34>
   1c946:	4643      	mov	r3, r8
		if (!net_is_ipv6_addr_unspecified(&addr6->sin6_addr)) {
   1c948:	f013 0f01 	tst.w	r3, #1
   1c94c:	d16c      	bne.n	1ca28 <net_context_connect+0x170>
			context->flags |= NET_CONTEXT_REMOTE_ADDR_SET;
   1c94e:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c952:	f063 037f 	orn	r3, r3, #127	; 0x7f
   1c956:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
		net_sin6_ptr(&context->local)->sin6_family = AF_INET6;
   1c95a:	230a      	movs	r3, #10
   1c95c:	8123      	strh	r3, [r4, #8]
		net_sin6(&local_addr)->sin6_family = AF_INET6;
   1c95e:	f8ad 3018 	strh.w	r3, [sp, #24]
		net_sin6(&local_addr)->sin6_port = lport =
   1c962:	f8b4 e00a 	ldrh.w	lr, [r4, #10]
   1c966:	f8ad e01a 	strh.w	lr, [sp, #26]
		if (net_sin6_ptr(&context->local)->sin6_addr) {
   1c96a:	68e3      	ldr	r3, [r4, #12]
   1c96c:	2b00      	cmp	r3, #0
   1c96e:	d062      	beq.n	1ca36 <net_context_connect+0x17e>
			net_ipaddr_copy(&net_sin6(&local_addr)->sin6_addr,
   1c970:	ad0c      	add	r5, sp, #48	; 0x30
   1c972:	6818      	ldr	r0, [r3, #0]
   1c974:	6859      	ldr	r1, [r3, #4]
   1c976:	689a      	ldr	r2, [r3, #8]
   1c978:	68db      	ldr	r3, [r3, #12]
   1c97a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1c97c:	ad07      	add	r5, sp, #28
   1c97e:	ab10      	add	r3, sp, #64	; 0x40
   1c980:	e913 000f 	ldmdb	r3, {r0, r1, r2, r3}
   1c984:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
			laddr = &local_addr;
   1c988:	aa06      	add	r2, sp, #24
	if (context->flags & NET_CONTEXT_TYPE) {
   1c98a:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c98e:	f013 0f20 	tst.w	r3, #32
   1c992:	d052      	beq.n	1ca3a <net_context_connect+0x182>
		return SOCK_STREAM;
   1c994:	2301      	movs	r3, #1
	if (net_context_get_type(context) == SOCK_DGRAM) {
   1c996:	2b02      	cmp	r3, #2
   1c998:	d051      	beq.n	1ca3e <net_context_connect+0x186>
	if (net_context_get_type(context) != SOCK_STREAM) {
   1c99a:	2b01      	cmp	r3, #1
   1c99c:	d173      	bne.n	1ca86 <net_context_connect+0x1ce>
			       ntohs(rport),
   1c99e:	ea4f 231c 	mov.w	r3, ip, lsr #8
   1c9a2:	ea43 230c 	orr.w	r3, r3, ip, lsl #8
			       ntohs(lport),
   1c9a6:	ea4f 211e 	mov.w	r1, lr, lsr #8
   1c9aa:	ea41 210e 	orr.w	r1, r1, lr, lsl #8
	ret = net_tcp_register(addr,
   1c9ae:	b289      	uxth	r1, r1
   1c9b0:	f104 002c 	add.w	r0, r4, #44	; 0x2c
	return net_conn_register(IPPROTO_TCP, remote_addr, local_addr,
   1c9b4:	9003      	str	r0, [sp, #12]
   1c9b6:	9402      	str	r4, [sp, #8]
   1c9b8:	4835      	ldr	r0, [pc, #212]	; (1ca90 <net_context_connect+0x1d8>)
   1c9ba:	9001      	str	r0, [sp, #4]
   1c9bc:	9100      	str	r1, [sp, #0]
   1c9be:	b29b      	uxth	r3, r3
   1c9c0:	4631      	mov	r1, r6
   1c9c2:	2006      	movs	r0, #6
   1c9c4:	f007 ffa4 	bl	24910 <net_conn_register>
	if (ret < 0) {
   1c9c8:	2800      	cmp	r0, #0
   1c9ca:	db5f      	blt.n	1ca8c <net_context_connect+0x1d4>
	context->connect_cb = cb;
   1c9cc:	63a7      	str	r7, [r4, #56]	; 0x38
	context->user_data = user_data;
   1c9ce:	9b17      	ldr	r3, [sp, #92]	; 0x5c
   1c9d0:	6023      	str	r3, [r4, #0]
	context->flags &= ~(NET_CONTEXT_STATE_MASK << NET_CONTEXT_STATE_SHIFT);
   1c9d2:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1c9d6:	f003 03f9 	and.w	r3, r3, #249	; 0xf9
	context->flags |= ((state & NET_CONTEXT_STATE_MASK) <<
   1c9da:	f043 0302 	orr.w	r3, r3, #2
   1c9de:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
	net_tcp_change_state(context->tcp, NET_TCP_SYN_SENT);
   1c9e2:	2102      	movs	r1, #2
   1c9e4:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c9e6:	f006 fa6e 	bl	22ec6 <net_tcp_change_state>
	struct net_pkt *pkt = NULL;
   1c9ea:	2200      	movs	r2, #0
   1c9ec:	ab10      	add	r3, sp, #64	; 0x40
   1c9ee:	f843 2d2c 	str.w	r2, [r3, #-44]!
	ret = net_tcp_prepare_segment(context->tcp, flags, NULL, 0,
   1c9f2:	9302      	str	r3, [sp, #8]
   1c9f4:	9601      	str	r6, [sp, #4]
   1c9f6:	9200      	str	r2, [sp, #0]
   1c9f8:	4613      	mov	r3, r2
   1c9fa:	2102      	movs	r1, #2
   1c9fc:	6e20      	ldr	r0, [r4, #96]	; 0x60
   1c9fe:	f006 faff 	bl	23000 <net_tcp_prepare_segment>
	if (ret) {
   1ca02:	b310      	cbz	r0, 1ca4a <net_context_connect+0x192>
	if (timeout != 0 && k_sem_take(&context->tcp->connect_wait, timeout)) {
   1ca04:	9b16      	ldr	r3, [sp, #88]	; 0x58
   1ca06:	b35b      	cbz	r3, 1ca60 <net_context_connect+0x1a8>
   1ca08:	6e20      	ldr	r0, [r4, #96]	; 0x60
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   1ca0a:	4619      	mov	r1, r3
   1ca0c:	30ac      	adds	r0, #172	; 0xac
   1ca0e:	f00c f803 	bl	28a18 <_impl_k_sem_take>
   1ca12:	4680      	mov	r8, r0
   1ca14:	b320      	cbz	r0, 1ca60 <net_context_connect+0x1a8>
		return -ETIMEDOUT;
   1ca16:	f06f 0873 	mvn.w	r8, #115	; 0x73
   1ca1a:	e021      	b.n	1ca60 <net_context_connect+0x1a8>
   1ca1c:	4643      	mov	r3, r8
   1ca1e:	e793      	b.n	1c948 <net_context_connect+0x90>
   1ca20:	4643      	mov	r3, r8
   1ca22:	e791      	b.n	1c948 <net_context_connect+0x90>
   1ca24:	2301      	movs	r3, #1
   1ca26:	e78f      	b.n	1c948 <net_context_connect+0x90>
			context->flags &= ~NET_CONTEXT_REMOTE_ADDR_SET;
   1ca28:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1ca2c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
   1ca30:	f884 305d 	strb.w	r3, [r4, #93]	; 0x5d
   1ca34:	e791      	b.n	1c95a <net_context_connect+0xa2>
	struct sockaddr *laddr = NULL;
   1ca36:	2200      	movs	r2, #0
   1ca38:	e7a7      	b.n	1c98a <net_context_connect+0xd2>
	return SOCK_DGRAM;
   1ca3a:	2302      	movs	r3, #2
   1ca3c:	e7ab      	b.n	1c996 <net_context_connect+0xde>
		if (cb) {
   1ca3e:	b17f      	cbz	r7, 1ca60 <net_context_connect+0x1a8>
			cb(context, 0, user_data);
   1ca40:	9a17      	ldr	r2, [sp, #92]	; 0x5c
   1ca42:	2100      	movs	r1, #0
   1ca44:	4620      	mov	r0, r4
   1ca46:	47b8      	blx	r7
   1ca48:	e00a      	b.n	1ca60 <net_context_connect+0x1a8>
	ret = net_send_data(pkt);
   1ca4a:	9805      	ldr	r0, [sp, #20]
   1ca4c:	f7fd fdf4 	bl	1a638 <net_send_data>
	if (ret < 0) {
   1ca50:	2800      	cmp	r0, #0
   1ca52:	dad7      	bge.n	1ca04 <net_context_connect+0x14c>
		net_pkt_unref(pkt);
   1ca54:	9805      	ldr	r0, [sp, #20]
   1ca56:	f000 f9f0 	bl	1ce3a <net_pkt_unref>
   1ca5a:	e7d3      	b.n	1ca04 <net_context_connect+0x14c>
		return -EBADF;
   1ca5c:	f06f 0808 	mvn.w	r8, #8
}
   1ca60:	4640      	mov	r0, r8
   1ca62:	b010      	add	sp, #64	; 0x40
   1ca64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EINVAL;
   1ca68:	f06f 0815 	mvn.w	r8, #21
   1ca6c:	e7f8      	b.n	1ca60 <net_context_connect+0x1a8>
		return -EOPNOTSUPP;
   1ca6e:	f06f 085e 	mvn.w	r8, #94	; 0x5e
   1ca72:	e7f5      	b.n	1ca60 <net_context_connect+0x1a8>
		return -EINVAL; /* Not IPv4 or IPv6 */
   1ca74:	f06f 0815 	mvn.w	r8, #21
   1ca78:	e7f2      	b.n	1ca60 <net_context_connect+0x1a8>
			return -EINVAL;
   1ca7a:	f06f 0815 	mvn.w	r8, #21
   1ca7e:	e7ef      	b.n	1ca60 <net_context_connect+0x1a8>
			return -EADDRNOTAVAIL;
   1ca80:	f06f 087c 	mvn.w	r8, #124	; 0x7c
   1ca84:	e7ec      	b.n	1ca60 <net_context_connect+0x1a8>
		return -ENOTSUP;
   1ca86:	f06f 0885 	mvn.w	r8, #133	; 0x85
   1ca8a:	e7e9      	b.n	1ca60 <net_context_connect+0x1a8>
		return ret;
   1ca8c:	4680      	mov	r8, r0
   1ca8e:	e7e7      	b.n	1ca60 <net_context_connect+0x1a8>
   1ca90:	0001c339 	.word	0x0001c339

0001ca94 <net_context_send>:
{
   1ca94:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ca96:	b085      	sub	sp, #20
	return pkt->context;
   1ca98:	68c4      	ldr	r4, [r0, #12]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1ca9a:	f994 505d 	ldrsb.w	r5, [r4, #93]	; 0x5d
   1ca9e:	2d00      	cmp	r5, #0
   1caa0:	da17      	bge.n	1cad2 <net_context_send+0x3e>
	    !net_sin(&context->remote)->sin_port) {
   1caa2:	8ae5      	ldrh	r5, [r4, #22]
	if (!(context->flags & NET_CONTEXT_REMOTE_ADDR_SET) ||
   1caa4:	b1c5      	cbz	r5, 1cad8 <net_context_send+0x44>
	return pkt->family;
   1caa6:	f890 5038 	ldrb.w	r5, [r0, #56]	; 0x38
   1caaa:	f3c5 05c3 	ubfx	r5, r5, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   1caae:	2d0a      	cmp	r5, #10
   1cab0:	d00d      	beq.n	1cace <net_context_send+0x3a>
		addrlen = 0;
   1cab2:	2700      	movs	r7, #0
   1cab4:	461e      	mov	r6, r3
   1cab6:	460b      	mov	r3, r1
	return sendto(pkt, &context->remote, addrlen, cb, timeout, token,
   1cab8:	990a      	ldr	r1, [sp, #40]	; 0x28
   1caba:	9102      	str	r1, [sp, #8]
   1cabc:	9601      	str	r6, [sp, #4]
   1cabe:	9200      	str	r2, [sp, #0]
   1cac0:	463a      	mov	r2, r7
   1cac2:	f104 0114 	add.w	r1, r4, #20
   1cac6:	f7ff fdf8 	bl	1c6ba <sendto>
}
   1caca:	b005      	add	sp, #20
   1cacc:	bdf0      	pop	{r4, r5, r6, r7, pc}
		addrlen = sizeof(struct sockaddr_in6);
   1cace:	2718      	movs	r7, #24
   1cad0:	e7f0      	b.n	1cab4 <net_context_send+0x20>
		return -EDESTADDRREQ;
   1cad2:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1cad6:	e7f8      	b.n	1caca <net_context_send+0x36>
   1cad8:	f06f 0078 	mvn.w	r0, #120	; 0x78
   1cadc:	e7f5      	b.n	1caca <net_context_send+0x36>

0001cade <net_context_sendto>:
{
   1cade:	b510      	push	{r4, lr}
   1cae0:	b084      	sub	sp, #16
   1cae2:	461c      	mov	r4, r3
	return pkt->context;
   1cae4:	68c3      	ldr	r3, [r0, #12]
	if (context->flags & NET_CONTEXT_PROTO) {
   1cae6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   1caea:	f013 0f40 	tst.w	r3, #64	; 0x40
   1caee:	d00d      	beq.n	1cb0c <net_context_sendto+0x2e>
		return IPPROTO_TCP;
   1caf0:	2306      	movs	r3, #6
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1caf2:	2b06      	cmp	r3, #6
   1caf4:	d00c      	beq.n	1cb10 <net_context_sendto+0x32>
	return sendto(pkt, dst_addr, addrlen, cb, timeout, token, user_data);
   1caf6:	9b08      	ldr	r3, [sp, #32]
   1caf8:	9302      	str	r3, [sp, #8]
   1cafa:	9b07      	ldr	r3, [sp, #28]
   1cafc:	9301      	str	r3, [sp, #4]
   1cafe:	9b06      	ldr	r3, [sp, #24]
   1cb00:	9300      	str	r3, [sp, #0]
   1cb02:	4623      	mov	r3, r4
   1cb04:	f7ff fdd9 	bl	1c6ba <sendto>
}
   1cb08:	b004      	add	sp, #16
   1cb0a:	bd10      	pop	{r4, pc}
	return IPPROTO_UDP;
   1cb0c:	2311      	movs	r3, #17
   1cb0e:	e7f0      	b.n	1caf2 <net_context_sendto+0x14>
		return net_context_send(pkt, cb, timeout, token, user_data);
   1cb10:	9b08      	ldr	r3, [sp, #32]
   1cb12:	9300      	str	r3, [sp, #0]
   1cb14:	9b07      	ldr	r3, [sp, #28]
   1cb16:	9a06      	ldr	r2, [sp, #24]
   1cb18:	4621      	mov	r1, r4
   1cb1a:	f7ff ffbb 	bl	1ca94 <net_context_send>
   1cb1e:	e7f3      	b.n	1cb08 <net_context_sendto+0x2a>

0001cb20 <net_context_recv>:

int net_context_recv(struct net_context *context,
		     net_context_recv_cb_t cb,
		     s32_t timeout,
		     void *user_data)
{
   1cb20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	return context->flags & NET_CONTEXT_IN_USE;
   1cb22:	f890 405d 	ldrb.w	r4, [r0, #93]	; 0x5d
	NET_ASSERT(context);

	if (!net_context_is_used(context)) {
   1cb26:	f014 0f01 	tst.w	r4, #1
   1cb2a:	d030      	beq.n	1cb8e <net_context_recv+0x6e>
	if (context->flags & NET_CONTEXT_PROTO) {
   1cb2c:	f014 0f40 	tst.w	r4, #64	; 0x40
   1cb30:	d023      	beq.n	1cb7a <net_context_recv+0x5a>
		return IPPROTO_TCP;
   1cb32:	2606      	movs	r6, #6
   1cb34:	4617      	mov	r7, r2
   1cb36:	4605      	mov	r5, r0
			context, cb, timeout, user_data);
	}
#endif /* CONFIG_NET_OFFLOAD */

#if defined(CONFIG_NET_UDP)
	if (net_context_get_ip_proto(context) == IPPROTO_UDP) {
   1cb38:	2e11      	cmp	r6, #17
   1cb3a:	d020      	beq.n	1cb7e <net_context_recv+0x5e>
		}
	} else
#endif /* CONFIG_NET_UDP */

#if defined(CONFIG_NET_TCP)
	if (net_context_get_ip_proto(context) == IPPROTO_TCP) {
   1cb3c:	2e06      	cmp	r6, #6
   1cb3e:	d129      	bne.n	1cb94 <net_context_recv+0x74>
		NET_ASSERT(context->tcp);

		if (context->tcp->flags & NET_TCP_IS_SHUTDOWN) {
   1cb40:	6e02      	ldr	r2, [r0, #96]	; 0x60
   1cb42:	f8b2 00a4 	ldrh.w	r0, [r2, #164]	; 0xa4
   1cb46:	f410 7f80 	tst.w	r0, #256	; 0x100
   1cb4a:	d126      	bne.n	1cb9a <net_context_recv+0x7a>
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   1cb4c:	f3c4 0441 	ubfx	r4, r4, #1, #2
			return -ESHUTDOWN;
		} else if (net_context_get_state(context)
   1cb50:	2c02      	cmp	r4, #2
   1cb52:	d125      	bne.n	1cba0 <net_context_recv+0x80>
			   != NET_CONTEXT_CONNECTED) {
			return -ENOTCONN;
		}

		context->recv_cb = cb;
   1cb54:	6329      	str	r1, [r5, #48]	; 0x30
		context->tcp->recv_user_data = user_data;
   1cb56:	6053      	str	r3, [r2, #4]
	{
		return -EPROTOTYPE;
	}

#if defined(CONFIG_NET_CONTEXT_SYNC_RECV)
	if (timeout) {
   1cb58:	b32f      	cbz	r7, 1cba6 <net_context_recv+0x86>
		/* Make sure we have the lock, then the packet_received()
		 * callback will release the semaphore when data has been
		 * received.
		 */
		while (k_sem_take(&context->recv_data_wait, K_NO_WAIT)) {
   1cb5a:	f105 0444 	add.w	r4, r5, #68	; 0x44
   1cb5e:	2100      	movs	r1, #0
   1cb60:	4620      	mov	r0, r4
   1cb62:	f00b ff59 	bl	28a18 <_impl_k_sem_take>
   1cb66:	4606      	mov	r6, r0
   1cb68:	2800      	cmp	r0, #0
   1cb6a:	d1f6      	bne.n	1cb5a <net_context_recv+0x3a>
   1cb6c:	4639      	mov	r1, r7
   1cb6e:	4620      	mov	r0, r4
   1cb70:	f00b ff52 	bl	28a18 <_impl_k_sem_take>
			;
		}

		if (!k_sem_take(&context->recv_data_wait, timeout)) {
   1cb74:	b140      	cbz	r0, 1cb88 <net_context_recv+0x68>
		}
	}
#endif /* CONFIG_NET_CONTEXT_SYNC_RECV */

	return 0;
}
   1cb76:	4630      	mov	r0, r6
   1cb78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return IPPROTO_UDP;
   1cb7a:	2611      	movs	r6, #17
   1cb7c:	e7da      	b.n	1cb34 <net_context_recv+0x14>
		int ret = recv_udp(context, cb, timeout, user_data);
   1cb7e:	f7ff fe2d 	bl	1c7dc <recv_udp>
		if (ret < 0) {
   1cb82:	1e06      	subs	r6, r0, #0
   1cb84:	dae8      	bge.n	1cb58 <net_context_recv+0x38>
   1cb86:	e7f6      	b.n	1cb76 <net_context_recv+0x56>
			return -ETIMEDOUT;
   1cb88:	f06f 0673 	mvn.w	r6, #115	; 0x73
   1cb8c:	e7f3      	b.n	1cb76 <net_context_recv+0x56>
		return -EBADF;
   1cb8e:	f06f 0608 	mvn.w	r6, #8
   1cb92:	e7f0      	b.n	1cb76 <net_context_recv+0x56>
		return -EPROTOTYPE;
   1cb94:	f06f 066a 	mvn.w	r6, #106	; 0x6a
   1cb98:	e7ed      	b.n	1cb76 <net_context_recv+0x56>
			return -ESHUTDOWN;
   1cb9a:	f06f 066d 	mvn.w	r6, #109	; 0x6d
   1cb9e:	e7ea      	b.n	1cb76 <net_context_recv+0x56>
			return -ENOTCONN;
   1cba0:	f06f 067f 	mvn.w	r6, #127	; 0x7f
   1cba4:	e7e7      	b.n	1cb76 <net_context_recv+0x56>
	return 0;
   1cba6:	2600      	movs	r6, #0
   1cba8:	e7e5      	b.n	1cb76 <net_context_recv+0x56>
	...

0001cbac <net_context_foreach>:
#else
	return -EPROTOTYPE;
#endif
}
void net_context_foreach(net_context_cb_t cb, void *user_data)
{
   1cbac:	b570      	push	{r4, r5, r6, lr}
   1cbae:	4606      	mov	r6, r0
   1cbb0:	460d      	mov	r5, r1
   1cbb2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1cbb6:	480d      	ldr	r0, [pc, #52]	; (1cbec <net_context_foreach+0x40>)
   1cbb8:	f00b ff2e 	bl	28a18 <_impl_k_sem_take>
	int i;

	k_sem_take(&contexts_lock, K_FOREVER);

	for (i = 0; i < NET_MAX_CONTEXT; i++) {
   1cbbc:	2400      	movs	r4, #0
   1cbbe:	e000      	b.n	1cbc2 <net_context_foreach+0x16>
   1cbc0:	3401      	adds	r4, #1
   1cbc2:	2c05      	cmp	r4, #5
   1cbc4:	dc0e      	bgt.n	1cbe4 <net_context_foreach+0x38>
	return context->flags & NET_CONTEXT_IN_USE;
   1cbc6:	2368      	movs	r3, #104	; 0x68
   1cbc8:	4a09      	ldr	r2, [pc, #36]	; (1cbf0 <net_context_foreach+0x44>)
   1cbca:	fb03 2304 	mla	r3, r3, r4, r2
   1cbce:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
		if (!net_context_is_used(&contexts[i])) {
   1cbd2:	f013 0f01 	tst.w	r3, #1
   1cbd6:	d0f3      	beq.n	1cbc0 <net_context_foreach+0x14>
			continue;
		}

		cb(&contexts[i], user_data);
   1cbd8:	4629      	mov	r1, r5
   1cbda:	2068      	movs	r0, #104	; 0x68
   1cbdc:	fb00 2004 	mla	r0, r0, r4, r2
   1cbe0:	47b0      	blx	r6
   1cbe2:	e7ed      	b.n	1cbc0 <net_context_foreach+0x14>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   1cbe4:	4801      	ldr	r0, [pc, #4]	; (1cbec <net_context_foreach+0x40>)
   1cbe6:	f00b ff04 	bl	289f2 <_impl_k_sem_give>
   1cbea:	bd70      	pop	{r4, r5, r6, pc}
   1cbec:	20001ea8 	.word	0x20001ea8
   1cbf0:	20001c38 	.word	0x20001c38

0001cbf4 <net_context_init>:

	k_sem_give(&contexts_lock);
}

void net_context_init(void)
{
   1cbf4:	b508      	push	{r3, lr}
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   1cbf6:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   1cbfa:	2101      	movs	r1, #1
   1cbfc:	4801      	ldr	r0, [pc, #4]	; (1cc04 <net_context_init+0x10>)
   1cbfe:	f00b feef 	bl	289e0 <_impl_k_sem_init>
   1cc02:	bd08      	pop	{r3, pc}
   1cc04:	20001ea8 	.word	0x20001ea8

0001cc08 <net_pkt_get_reserve>:
#else /* CONFIG_NET_DEBUG_NET_PKT */
struct net_pkt *net_pkt_get_reserve(struct k_mem_slab *slab,
				    u16_t reserve_head,
				    s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1cc08:	b570      	push	{r4, r5, r6, lr}
   1cc0a:	b082      	sub	sp, #8
   1cc0c:	4604      	mov	r4, r0
   1cc0e:	460d      	mov	r5, r1
   1cc10:	4616      	mov	r6, r2
	struct net_pkt *pkt;
	int ret;

	if (k_is_in_isr()) {
   1cc12:	f00c f863 	bl	28cdc <k_is_in_isr>
   1cc16:	b198      	cbz	r0, 1cc40 <net_pkt_get_reserve+0x38>
		ret = k_mem_slab_alloc(slab, (void **)&pkt, K_NO_WAIT);
   1cc18:	2200      	movs	r2, #0
   1cc1a:	a901      	add	r1, sp, #4
   1cc1c:	4620      	mov	r0, r4
   1cc1e:	f00a fde9 	bl	277f4 <k_mem_slab_alloc>
	} else {
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
	}

	if (ret) {
   1cc22:	b998      	cbnz	r0, 1cc4c <net_pkt_get_reserve+0x44>
		return NULL;
	}

	memset(pkt, 0, sizeof(struct net_pkt));
   1cc24:	2244      	movs	r2, #68	; 0x44
   1cc26:	2100      	movs	r1, #0
   1cc28:	9801      	ldr	r0, [sp, #4]
   1cc2a:	f00c feb5 	bl	29998 <memset>

	net_pkt_set_ll_reserve(pkt, reserve_head);
   1cc2e:	9801      	ldr	r0, [sp, #4]
	pkt->ll_reserve = len;
   1cc30:	f880 5032 	strb.w	r5, [r0, #50]	; 0x32

	pkt->ref = 1;
   1cc34:	2301      	movs	r3, #1
   1cc36:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
	pkt->slab = slab;
   1cc3a:	6044      	str	r4, [r0, #4]
	NET_DBG("%s [%u] pkt %p reserve %u ref %d (%s():%d)",
		slab2str(slab), k_mem_slab_num_free_get(slab),
		pkt, reserve_head, pkt->ref, caller, line);
#endif
	return pkt;
}
   1cc3c:	b002      	add	sp, #8
   1cc3e:	bd70      	pop	{r4, r5, r6, pc}
		ret = k_mem_slab_alloc(slab, (void **)&pkt, timeout);
   1cc40:	4632      	mov	r2, r6
   1cc42:	a901      	add	r1, sp, #4
   1cc44:	4620      	mov	r0, r4
   1cc46:	f00a fdd5 	bl	277f4 <k_mem_slab_alloc>
   1cc4a:	e7ea      	b.n	1cc22 <net_pkt_get_reserve+0x1a>
		return NULL;
   1cc4c:	2000      	movs	r0, #0
   1cc4e:	e7f5      	b.n	1cc3c <net_pkt_get_reserve+0x34>

0001cc50 <net_pkt_get>:
#else
static struct net_pkt *net_pkt_get(struct k_mem_slab *slab,
				   struct net_context *context,
				   s32_t timeout)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
   1cc50:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_pkt *pkt;

	if (!context) {
   1cc52:	2900      	cmp	r1, #0
   1cc54:	d038      	beq.n	1ccc8 <net_pkt_get+0x78>
   1cc56:	460c      	mov	r4, r1
   1cc58:	4617      	mov	r7, r2
   1cc5a:	4606      	mov	r6, r0
	return net_if_get_by_index(context->iface);
   1cc5c:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1cc60:	f7fe fea4 	bl	1b9ac <net_if_get_by_index>
   1cc64:	4605      	mov	r5, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cc66:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1cc6a:	f013 0f10 	tst.w	r3, #16
   1cc6e:	d024      	beq.n	1ccba <net_pkt_get+0x6a>
		return AF_INET6;
   1cc70:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1cc72:	2b0a      	cmp	r3, #10
   1cc74:	d023      	beq.n	1ccbe <net_pkt_get+0x6e>
	struct in6_addr *addr6 = NULL;
   1cc76:	2100      	movs	r1, #0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1cc78:	686b      	ldr	r3, [r5, #4]
   1cc7a:	689b      	ldr	r3, [r3, #8]
   1cc7c:	4628      	mov	r0, r5
   1cc7e:	4798      	blx	r3
#if defined(CONFIG_NET_DEBUG_NET_PKT)
	pkt = net_pkt_get_reserve_debug(slab,
					net_if_get_ll_reserve(iface, addr6),
					timeout, caller, line);
#else
	pkt = net_pkt_get_reserve(slab, net_if_get_ll_reserve(iface, addr6),
   1cc80:	463a      	mov	r2, r7
   1cc82:	4601      	mov	r1, r0
   1cc84:	4630      	mov	r0, r6
   1cc86:	f7ff ffbf 	bl	1cc08 <net_pkt_get_reserve>
				  timeout);
#endif
	if (pkt) {
   1cc8a:	4603      	mov	r3, r0
   1cc8c:	b198      	cbz	r0, 1ccb6 <net_pkt_get+0x66>
	pkt->context = ctx;
   1cc8e:	60c4      	str	r4, [r0, #12]
	pkt->iface = iface;
   1cc90:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1cc92:	7d6a      	ldrb	r2, [r5, #21]
   1cc94:	f880 2025 	strb.w	r2, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1cc98:	7d6a      	ldrb	r2, [r5, #21]
   1cc9a:	f880 202d 	strb.w	r2, [r0, #45]	; 0x2d
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cc9e:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   1cca2:	f012 0f10 	tst.w	r2, #16
   1cca6:	d00d      	beq.n	1ccc4 <net_pkt_get+0x74>
		return AF_INET6;
   1cca8:	210a      	movs	r1, #10
	pkt->family = family;
   1ccaa:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   1ccae:	f361 02c6 	bfi	r2, r1, #3, #4
   1ccb2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
					   net_context_get_family(context));
		}
	}

	return pkt;
}
   1ccb6:	4618      	mov	r0, r3
   1ccb8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	return AF_INET;
   1ccba:	2302      	movs	r3, #2
   1ccbc:	e7d9      	b.n	1cc72 <net_pkt_get+0x22>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1ccbe:	f104 0118 	add.w	r1, r4, #24
   1ccc2:	e7d9      	b.n	1cc78 <net_pkt_get+0x28>
   1ccc4:	2102      	movs	r1, #2
   1ccc6:	e7f0      	b.n	1ccaa <net_pkt_get+0x5a>
		return NULL;
   1ccc8:	2300      	movs	r3, #0
   1ccca:	e7f4      	b.n	1ccb6 <net_pkt_get+0x66>

0001cccc <net_pkt_get_reserve_data>:
{
   1cccc:	b570      	push	{r4, r5, r6, lr}
   1ccce:	4604      	mov	r4, r0
   1ccd0:	460d      	mov	r5, r1
   1ccd2:	4616      	mov	r6, r2
	if (k_is_in_isr()) {
   1ccd4:	f00c f802 	bl	28cdc <k_is_in_isr>
   1ccd8:	b158      	cbz	r0, 1ccf2 <net_pkt_get_reserve_data+0x26>
		frag = net_buf_alloc(pool, K_NO_WAIT);
   1ccda:	2100      	movs	r1, #0
   1ccdc:	4620      	mov	r0, r4
   1ccde:	f7fd facf 	bl	1a280 <net_buf_alloc>
   1cce2:	4604      	mov	r4, r0
	if (!frag) {
   1cce4:	b11c      	cbz	r4, 1ccee <net_pkt_get_reserve_data+0x22>
	net_buf_reserve(frag, reserve_head);
   1cce6:	4629      	mov	r1, r5
   1cce8:	4620      	mov	r0, r4
   1ccea:	f7fd fb24 	bl	1a336 <net_buf_reserve>
}
   1ccee:	4620      	mov	r0, r4
   1ccf0:	bd70      	pop	{r4, r5, r6, pc}
		frag = net_buf_alloc(pool, timeout);
   1ccf2:	4631      	mov	r1, r6
   1ccf4:	4620      	mov	r0, r4
   1ccf6:	f7fd fac3 	bl	1a280 <net_buf_alloc>
   1ccfa:	4604      	mov	r4, r0
   1ccfc:	e7f2      	b.n	1cce4 <net_pkt_get_reserve_data+0x18>

0001ccfe <_pkt_get_data>:
{
	struct in6_addr *addr6 = NULL;
	struct net_if *iface;
	struct net_buf *frag;

	if (!context) {
   1ccfe:	b1f1      	cbz	r1, 1cd3e <_pkt_get_data+0x40>
{
   1cd00:	b570      	push	{r4, r5, r6, lr}
   1cd02:	460c      	mov	r4, r1
   1cd04:	4616      	mov	r6, r2
   1cd06:	4605      	mov	r5, r0
	return net_if_get_by_index(context->iface);
   1cd08:	f891 005c 	ldrb.w	r0, [r1, #92]	; 0x5c
   1cd0c:	f7fe fe4e 	bl	1b9ac <net_if_get_by_index>
	if (context->flags & NET_CONTEXT_FAMILY) {
   1cd10:	f894 305d 	ldrb.w	r3, [r4, #93]	; 0x5d
   1cd14:	f013 0f10 	tst.w	r3, #16
   1cd18:	d00c      	beq.n	1cd34 <_pkt_get_data+0x36>
		return AF_INET6;
   1cd1a:	230a      	movs	r3, #10

	iface = net_context_get_iface(context);

	NET_ASSERT(iface);

	if (net_context_get_family(context) == AF_INET6) {
   1cd1c:	2b0a      	cmp	r3, #10
   1cd1e:	d00b      	beq.n	1cd38 <_pkt_get_data+0x3a>
	struct in6_addr *addr6 = NULL;
   1cd20:	2100      	movs	r1, #0
   1cd22:	6843      	ldr	r3, [r0, #4]
   1cd24:	689b      	ldr	r3, [r3, #8]
   1cd26:	4798      	blx	r3
	frag = net_pkt_get_reserve_data_debug(pool,
					      net_if_get_ll_reserve(iface,
								    addr6),
					      timeout, caller, line);
#else
	frag = net_pkt_get_reserve_data(pool,
   1cd28:	4632      	mov	r2, r6
   1cd2a:	4601      	mov	r1, r0
   1cd2c:	4628      	mov	r0, r5
   1cd2e:	f7ff ffcd 	bl	1cccc <net_pkt_get_reserve_data>
					net_if_get_ll_reserve(iface, addr6),
					timeout);
#endif
	return frag;
   1cd32:	bd70      	pop	{r4, r5, r6, pc}
	return AF_INET;
   1cd34:	2302      	movs	r3, #2
   1cd36:	e7f1      	b.n	1cd1c <_pkt_get_data+0x1e>
		addr6 = &((struct sockaddr_in6 *) &context->remote)->sin6_addr;
   1cd38:	f104 0118 	add.w	r1, r4, #24
   1cd3c:	e7f1      	b.n	1cd22 <_pkt_get_data+0x24>
		return NULL;
   1cd3e:	2000      	movs	r0, #0
   1cd40:	4770      	bx	lr
	...

0001cd44 <net_pkt_get_reserve_rx>:
{
   1cd44:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&rx_pkts, reserve_head, timeout);
   1cd46:	460a      	mov	r2, r1
   1cd48:	4601      	mov	r1, r0
   1cd4a:	4802      	ldr	r0, [pc, #8]	; (1cd54 <net_pkt_get_reserve_rx+0x10>)
   1cd4c:	f7ff ff5c 	bl	1cc08 <net_pkt_get_reserve>
}
   1cd50:	bd08      	pop	{r3, pc}
   1cd52:	bf00      	nop
   1cd54:	2000cc28 	.word	0x2000cc28

0001cd58 <net_pkt_get_reserve_tx>:
{
   1cd58:	b508      	push	{r3, lr}
	return net_pkt_get_reserve(&tx_pkts, reserve_head, timeout);
   1cd5a:	460a      	mov	r2, r1
   1cd5c:	4601      	mov	r1, r0
   1cd5e:	4802      	ldr	r0, [pc, #8]	; (1cd68 <net_pkt_get_reserve_tx+0x10>)
   1cd60:	f7ff ff52 	bl	1cc08 <net_pkt_get_reserve>
}
   1cd64:	bd08      	pop	{r3, pc}
   1cd66:	bf00      	nop
   1cd68:	2000cc44 	.word	0x2000cc44

0001cd6c <net_pkt_get_reserve_rx_data>:
{
   1cd6c:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&rx_bufs, reserve_head, timeout);
   1cd6e:	460a      	mov	r2, r1
   1cd70:	4601      	mov	r1, r0
   1cd72:	4802      	ldr	r0, [pc, #8]	; (1cd7c <net_pkt_get_reserve_rx_data+0x10>)
   1cd74:	f7ff ffaa 	bl	1cccc <net_pkt_get_reserve_data>
}
   1cd78:	bd08      	pop	{r3, pc}
   1cd7a:	bf00      	nop
   1cd7c:	2000cda8 	.word	0x2000cda8

0001cd80 <net_pkt_get_reserve_tx_data>:
{
   1cd80:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_data(&tx_bufs, reserve_head, timeout);
   1cd82:	460a      	mov	r2, r1
   1cd84:	4601      	mov	r1, r0
   1cd86:	4802      	ldr	r0, [pc, #8]	; (1cd90 <net_pkt_get_reserve_tx_data+0x10>)
   1cd88:	f7ff ffa0 	bl	1cccc <net_pkt_get_reserve_data>
}
   1cd8c:	bd08      	pop	{r3, pc}
   1cd8e:	bf00      	nop
   1cd90:	2000cdc8 	.word	0x2000cdc8

0001cd94 <net_pkt_get_frag>:
{
   1cd94:	b538      	push	{r3, r4, r5, lr}
   1cd96:	4604      	mov	r4, r0
   1cd98:	460d      	mov	r5, r1
	return pkt->context;
   1cd9a:	68c3      	ldr	r3, [r0, #12]
	if (context && context->data_pool) {
   1cd9c:	b143      	cbz	r3, 1cdb0 <net_pkt_get_frag+0x1c>
   1cd9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   1cda0:	b133      	cbz	r3, 1cdb0 <net_pkt_get_frag+0x1c>
		return net_pkt_get_reserve_data(context->data_pool(),
   1cda2:	4798      	blx	r3
   1cda4:	462a      	mov	r2, r5
   1cda6:	f894 1032 	ldrb.w	r1, [r4, #50]	; 0x32
   1cdaa:	f7ff ff8f 	bl	1cccc <net_pkt_get_reserve_data>
   1cdae:	bd38      	pop	{r3, r4, r5, pc}
	if (pkt->slab == &rx_pkts) {
   1cdb0:	6862      	ldr	r2, [r4, #4]
   1cdb2:	4b07      	ldr	r3, [pc, #28]	; (1cdd0 <net_pkt_get_frag+0x3c>)
   1cdb4:	429a      	cmp	r2, r3
   1cdb6:	d005      	beq.n	1cdc4 <net_pkt_get_frag+0x30>
	return net_pkt_get_reserve_tx_data(net_pkt_ll_reserve(pkt),
   1cdb8:	4629      	mov	r1, r5
   1cdba:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cdbe:	f7ff ffdf 	bl	1cd80 <net_pkt_get_reserve_tx_data>
}
   1cdc2:	bd38      	pop	{r3, r4, r5, pc}
		return net_pkt_get_reserve_rx_data(net_pkt_ll_reserve(pkt),
   1cdc4:	4629      	mov	r1, r5
   1cdc6:	f894 0032 	ldrb.w	r0, [r4, #50]	; 0x32
   1cdca:	f7ff ffcf 	bl	1cd6c <net_pkt_get_reserve_rx_data>
   1cdce:	bd38      	pop	{r3, r4, r5, pc}
   1cdd0:	2000cc28 	.word	0x2000cc28

0001cdd4 <net_pkt_get_tx>:

	return net_pkt_get(&rx_pkts, context, timeout);
}

struct net_pkt *net_pkt_get_tx(struct net_context *context, s32_t timeout)
{
   1cdd4:	b538      	push	{r3, r4, r5, lr}
   1cdd6:	4604      	mov	r4, r0
   1cdd8:	460d      	mov	r5, r1
	if (context->tx_slab) {
   1cdda:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   1cddc:	b133      	cbz	r3, 1cdec <net_pkt_get_tx+0x18>
		return context->tx_slab();
   1cdde:	4798      	blx	r3

	NET_ASSERT_INFO(context, "TX context not set");

	slab = get_tx_slab(context);

	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cde0:	b130      	cbz	r0, 1cdf0 <net_pkt_get_tx+0x1c>
   1cde2:	462a      	mov	r2, r5
   1cde4:	4621      	mov	r1, r4
   1cde6:	f7ff ff33 	bl	1cc50 <net_pkt_get>
}
   1cdea:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1cdec:	2000      	movs	r0, #0
   1cdee:	e7f7      	b.n	1cde0 <net_pkt_get_tx+0xc>
	return net_pkt_get(slab ? slab : &tx_pkts, context, timeout);
   1cdf0:	4800      	ldr	r0, [pc, #0]	; (1cdf4 <net_pkt_get_tx+0x20>)
   1cdf2:	e7f6      	b.n	1cde2 <net_pkt_get_tx+0xe>
   1cdf4:	2000cc44 	.word	0x2000cc44

0001cdf8 <net_pkt_get_data>:

struct net_buf *net_pkt_get_data(struct net_context *context, s32_t timeout)
{
   1cdf8:	b538      	push	{r3, r4, r5, lr}
   1cdfa:	4604      	mov	r4, r0
   1cdfc:	460d      	mov	r5, r1
	if (context->data_pool) {
   1cdfe:	6c03      	ldr	r3, [r0, #64]	; 0x40
   1ce00:	b133      	cbz	r3, 1ce10 <net_pkt_get_data+0x18>
		return context->data_pool();
   1ce02:	4798      	blx	r3
	pool = get_data_pool(context);

	/* The context is not known in RX path so we can only have TX
	 * data here.
	 */
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1ce04:	b130      	cbz	r0, 1ce14 <net_pkt_get_data+0x1c>
   1ce06:	462a      	mov	r2, r5
   1ce08:	4621      	mov	r1, r4
   1ce0a:	f7ff ff78 	bl	1ccfe <_pkt_get_data>
}
   1ce0e:	bd38      	pop	{r3, r4, r5, pc}
	return NULL;
   1ce10:	2000      	movs	r0, #0
   1ce12:	e7f7      	b.n	1ce04 <net_pkt_get_data+0xc>
	return _pkt_get_data(pool ? pool : &tx_bufs, context, timeout);
   1ce14:	4800      	ldr	r0, [pc, #0]	; (1ce18 <net_pkt_get_data+0x20>)
   1ce16:	e7f6      	b.n	1ce06 <net_pkt_get_data+0xe>
   1ce18:	2000cdc8 	.word	0x2000cdc8

0001ce1c <net_pkt_ref>:
				  int line)
#else
struct net_pkt *net_pkt_ref(struct net_pkt *pkt)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!pkt) {
   1ce1c:	4603      	mov	r3, r0
   1ce1e:	b120      	cbz	r0, 1ce2a <net_pkt_ref+0xe>
	NET_DBG("%s [%d] pkt %p ref %d (%s():%d)",
		slab2str(pkt->slab), k_mem_slab_num_free_get(pkt->slab),
		pkt, pkt->ref + 1, caller, line);
#endif

	pkt->ref++;
   1ce20:	f890 2040 	ldrb.w	r2, [r0, #64]	; 0x40
   1ce24:	3201      	adds	r2, #1
   1ce26:	f880 2040 	strb.w	r2, [r0, #64]	; 0x40

	return pkt;
}
   1ce2a:	4618      	mov	r0, r3
   1ce2c:	4770      	bx	lr

0001ce2e <net_pkt_frag_unref>:
			      const char *caller, int line)
#else
void net_pkt_frag_unref(struct net_buf *frag)
#endif /* CONFIG_NET_DEBUG_NET_PKT */
{
	if (!frag) {
   1ce2e:	b118      	cbz	r0, 1ce38 <net_pkt_frag_unref+0xa>
{
   1ce30:	b508      	push	{r3, lr}

	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif
	net_buf_unref(frag);
   1ce32:	f7fd fa93 	bl	1a35c <net_buf_unref>
   1ce36:	bd08      	pop	{r3, pc}
   1ce38:	4770      	bx	lr

0001ce3a <net_pkt_unref>:
{
   1ce3a:	b500      	push	{lr}
   1ce3c:	b083      	sub	sp, #12
   1ce3e:	9001      	str	r0, [sp, #4]
	if (!pkt) {
   1ce40:	b188      	cbz	r0, 1ce66 <net_pkt_unref+0x2c>
	if (!pkt->ref) {
   1ce42:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
   1ce46:	b173      	cbz	r3, 1ce66 <net_pkt_unref+0x2c>
	if (--pkt->ref > 0) {
   1ce48:	3b01      	subs	r3, #1
   1ce4a:	b2db      	uxtb	r3, r3
   1ce4c:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
   1ce50:	b94b      	cbnz	r3, 1ce66 <net_pkt_unref+0x2c>
	if (pkt->frags) {
   1ce52:	6880      	ldr	r0, [r0, #8]
   1ce54:	b108      	cbz	r0, 1ce5a <net_pkt_unref+0x20>
		net_pkt_frag_unref(pkt->frags);
   1ce56:	f7ff ffea 	bl	1ce2e <net_pkt_frag_unref>
	k_mem_slab_free(pkt->slab, (void **)&pkt);
   1ce5a:	a902      	add	r1, sp, #8
   1ce5c:	f851 3d04 	ldr.w	r3, [r1, #-4]!
   1ce60:	6858      	ldr	r0, [r3, #4]
   1ce62:	f00a fcf5 	bl	27850 <k_mem_slab_free>
}
   1ce66:	b003      	add	sp, #12
   1ce68:	f85d fb04 	ldr.w	pc, [sp], #4

0001ce6c <net_pkt_frag_del>:
#else
struct net_buf *net_pkt_frag_del(struct net_pkt *pkt,
				 struct net_buf *parent,
				 struct net_buf *frag)
#endif
{
   1ce6c:	b510      	push	{r4, lr}
   1ce6e:	4604      	mov	r4, r0
   1ce70:	4608      	mov	r0, r1
	if (frag->ref == 1) {
		net_pkt_alloc_del(frag, caller, line);
	}
#endif

	if (pkt->frags == frag && !parent) {
   1ce72:	68a3      	ldr	r3, [r4, #8]
   1ce74:	4293      	cmp	r3, r2
   1ce76:	d003      	beq.n	1ce80 <net_pkt_frag_del+0x14>
		pkt->frags = tmp;

		return tmp;
	}

	return net_buf_frag_del(parent, frag);
   1ce78:	4611      	mov	r1, r2
   1ce7a:	f7fd faaf 	bl	1a3dc <net_buf_frag_del>
}
   1ce7e:	bd10      	pop	{r4, pc}
	if (pkt->frags == frag && !parent) {
   1ce80:	2900      	cmp	r1, #0
   1ce82:	d1f9      	bne.n	1ce78 <net_pkt_frag_del+0xc>
		tmp = net_buf_frag_del(NULL, frag);
   1ce84:	4611      	mov	r1, r2
   1ce86:	f7fd faa9 	bl	1a3dc <net_buf_frag_del>
		pkt->frags = tmp;
   1ce8a:	60a0      	str	r0, [r4, #8]
		return tmp;
   1ce8c:	bd10      	pop	{r4, pc}

0001ce8e <net_pkt_frag_add>:
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	/* We do not use net_buf_frag_add() as this one will refcount
	 * the frag once more if !pkt->frags
	 */
	if (!pkt->frags) {
   1ce8e:	6883      	ldr	r3, [r0, #8]
   1ce90:	b143      	cbz	r3, 1cea4 <net_pkt_frag_add+0x16>
{
   1ce92:	b510      	push	{r4, lr}
   1ce94:	460c      	mov	r4, r1
		pkt->frags = frag;
		return;
	}

	net_buf_frag_insert(net_buf_frag_last(pkt->frags), frag);
   1ce96:	4618      	mov	r0, r3
   1ce98:	f7fd fa80 	bl	1a39c <net_buf_frag_last>
   1ce9c:	4621      	mov	r1, r4
   1ce9e:	f7fd fa83 	bl	1a3a8 <net_buf_frag_insert>
   1cea2:	bd10      	pop	{r4, pc}
		pkt->frags = frag;
   1cea4:	6081      	str	r1, [r0, #8]
		return;
   1cea6:	4770      	bx	lr

0001cea8 <net_pkt_frag_insert>:
void net_pkt_frag_insert_debug(struct net_pkt *pkt, struct net_buf *frag,
			       const char *caller, int line)
#else
void net_pkt_frag_insert(struct net_pkt *pkt, struct net_buf *frag)
#endif
{
   1cea8:	b538      	push	{r3, r4, r5, lr}
   1ceaa:	4604      	mov	r4, r0
   1ceac:	460d      	mov	r5, r1
	NET_DBG("pkt %p frag %p (%s:%d)", pkt, frag, caller, line);

	net_buf_frag_last(frag)->frags = pkt->frags;
   1ceae:	4608      	mov	r0, r1
   1ceb0:	f7fd fa74 	bl	1a39c <net_buf_frag_last>
   1ceb4:	68a3      	ldr	r3, [r4, #8]
   1ceb6:	6003      	str	r3, [r0, #0]
	pkt->frags = frag;
   1ceb8:	60a5      	str	r5, [r4, #8]
   1ceba:	bd38      	pop	{r3, r4, r5, pc}

0001cebc <net_pkt_copy>:
}

struct net_buf *net_pkt_copy(struct net_pkt *pkt, size_t amount,
			     size_t reserve, s32_t timeout)
{
   1cebc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1cec0:	b085      	sub	sp, #20
   1cec2:	9002      	str	r0, [sp, #8]
   1cec4:	460d      	mov	r5, r1
   1cec6:	4614      	mov	r4, r2
   1cec8:	9303      	str	r3, [sp, #12]
	struct net_buf *frag, *first, *orig;
	u8_t *orig_data;
	size_t orig_len;

	orig = pkt->frags;
   1ceca:	f8d0 a008 	ldr.w	sl, [r0, #8]

	frag = net_pkt_get_frag(pkt, timeout);
   1cece:	4619      	mov	r1, r3
   1ced0:	f7ff ff60 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   1ced4:	9001      	str	r0, [sp, #4]
   1ced6:	b1b8      	cbz	r0, 1cf08 <net_pkt_copy+0x4c>
		return NULL;
	}

	if (reserve > net_buf_tailroom(frag)) {
   1ced8:	f100 0608 	add.w	r6, r0, #8
   1cedc:	4630      	mov	r0, r6
   1cede:	f7fd faf2 	bl	1a4c6 <net_buf_simple_tailroom>
   1cee2:	42a0      	cmp	r0, r4
   1cee4:	d30b      	bcc.n	1cefe <net_pkt_copy+0x42>
			reserve, net_buf_tailroom(frag));
		net_pkt_frag_unref(frag);
		return NULL;
	}

	net_buf_add(frag, reserve);
   1cee6:	4621      	mov	r1, r4
   1cee8:	4630      	mov	r0, r6
   1ceea:	f7fd fa83 	bl	1a3f4 <net_buf_simple_add>
	first = frag;

	NET_DBG("Copying frag %p with %zu bytes and reserving %zu bytes",
		first, amount, reserve);

	if (!orig->len) {
   1ceee:	f8ba 700c 	ldrh.w	r7, [sl, #12]
   1cef2:	b14f      	cbz	r7, 1cf08 <net_pkt_copy+0x4c>
		NET_DBG("Original fragment empty!");
		return frag;
	}

	orig_len = orig->len;
	orig_data = orig->data;
   1cef4:	f8da 9008 	ldr.w	r9, [sl, #8]
	frag = net_pkt_get_frag(pkt, timeout);
   1cef8:	f8dd b004 	ldr.w	fp, [sp, #4]

	while (orig && amount) {
   1cefc:	e01c      	b.n	1cf38 <net_pkt_copy+0x7c>
		net_pkt_frag_unref(frag);
   1cefe:	9801      	ldr	r0, [sp, #4]
   1cf00:	f7ff ff95 	bl	1ce2e <net_pkt_frag_unref>
		return NULL;
   1cf04:	2300      	movs	r3, #0
   1cf06:	9301      	str	r3, [sp, #4]
			orig_data = orig->data;
		}
	}

	return first;
}
   1cf08:	9801      	ldr	r0, [sp, #4]
   1cf0a:	b005      	add	sp, #20
   1cf0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			copy_len = amount;
   1cf10:	46a8      	mov	r8, r5
		if ((copy_len - left_len) >= 0) {
   1cf12:	eba8 0304 	sub.w	r3, r8, r4
   1cf16:	2b00      	cmp	r3, #0
   1cf18:	db2e      	blt.n	1cf78 <net_pkt_copy+0xbc>
			amount -= left_len;
   1cf1a:	1b2d      	subs	r5, r5, r4
			memcpy(net_buf_add(frag, left_len), orig_data,
   1cf1c:	4621      	mov	r1, r4
   1cf1e:	4630      	mov	r0, r6
   1cf20:	f7fd fa68 	bl	1a3f4 <net_buf_simple_add>
   1cf24:	4622      	mov	r2, r4
   1cf26:	4649      	mov	r1, r9
   1cf28:	f7e3 f9ca 	bl	2c0 <memcpy>
			if (!net_buf_tailroom(frag)) {
   1cf2c:	4630      	mov	r0, r6
   1cf2e:	f7fd faca 	bl	1a4c6 <net_buf_simple_tailroom>
   1cf32:	b180      	cbz	r0, 1cf56 <net_pkt_copy+0x9a>
			orig_len -= left_len;
   1cf34:	1b3f      	subs	r7, r7, r4
			orig_data += left_len;
   1cf36:	44a1      	add	r9, r4
	while (orig && amount) {
   1cf38:	f1ba 0f00 	cmp.w	sl, #0
   1cf3c:	d0e4      	beq.n	1cf08 <net_pkt_copy+0x4c>
   1cf3e:	2d00      	cmp	r5, #0
   1cf40:	d0e2      	beq.n	1cf08 <net_pkt_copy+0x4c>
		int left_len = net_buf_tailroom(frag);
   1cf42:	f10b 0608 	add.w	r6, fp, #8
   1cf46:	4630      	mov	r0, r6
   1cf48:	f7fd fabd 	bl	1a4c6 <net_buf_simple_tailroom>
   1cf4c:	4604      	mov	r4, r0
		if (amount > orig_len) {
   1cf4e:	42bd      	cmp	r5, r7
   1cf50:	d9de      	bls.n	1cf10 <net_pkt_copy+0x54>
			copy_len = orig_len;
   1cf52:	46b8      	mov	r8, r7
   1cf54:	e7dd      	b.n	1cf12 <net_pkt_copy+0x56>
				struct net_buf *new_frag =
   1cf56:	9903      	ldr	r1, [sp, #12]
   1cf58:	9802      	ldr	r0, [sp, #8]
   1cf5a:	f7ff ff1b 	bl	1cd94 <net_pkt_get_frag>
				if (!new_frag) {
   1cf5e:	4606      	mov	r6, r0
   1cf60:	b128      	cbz	r0, 1cf6e <net_pkt_copy+0xb2>
				net_buf_frag_add(frag, new_frag);
   1cf62:	4601      	mov	r1, r0
   1cf64:	4658      	mov	r0, fp
   1cf66:	f7fd fa2a 	bl	1a3be <net_buf_frag_add>
				frag = new_frag;
   1cf6a:	46b3      	mov	fp, r6
   1cf6c:	e7e2      	b.n	1cf34 <net_pkt_copy+0x78>
					net_pkt_frag_unref(first);
   1cf6e:	9801      	ldr	r0, [sp, #4]
   1cf70:	f7ff ff5d 	bl	1ce2e <net_pkt_frag_unref>
					return NULL;
   1cf74:	9601      	str	r6, [sp, #4]
   1cf76:	e7c7      	b.n	1cf08 <net_pkt_copy+0x4c>
			amount -= copy_len;
   1cf78:	eba5 0508 	sub.w	r5, r5, r8
			memcpy(net_buf_add(frag, copy_len), orig_data,
   1cf7c:	4641      	mov	r1, r8
   1cf7e:	4630      	mov	r0, r6
   1cf80:	f7fd fa38 	bl	1a3f4 <net_buf_simple_add>
   1cf84:	4642      	mov	r2, r8
   1cf86:	4649      	mov	r1, r9
   1cf88:	f7e3 f99a 	bl	2c0 <memcpy>
		orig = orig->frags;
   1cf8c:	f8da a000 	ldr.w	sl, [sl]
		if (orig) {
   1cf90:	f1ba 0f00 	cmp.w	sl, #0
   1cf94:	d0d0      	beq.n	1cf38 <net_pkt_copy+0x7c>
			orig_len = orig->len;
   1cf96:	f8ba 700c 	ldrh.w	r7, [sl, #12]
			orig_data = orig->data;
   1cf9a:	f8da 9008 	ldr.w	r9, [sl, #8]
   1cf9e:	e7cb      	b.n	1cf38 <net_pkt_copy+0x7c>

0001cfa0 <net_frag_linear_copy>:

int net_frag_linear_copy(struct net_buf *dst, struct net_buf *src,
			 u16_t offset, u16_t len)
{
   1cfa0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   1cfa4:	4680      	mov	r8, r0
   1cfa6:	460e      	mov	r6, r1
   1cfa8:	4615      	mov	r5, r2
   1cfaa:	4699      	mov	r9, r3
	u16_t to_copy;
	u16_t copied;

	if (dst->size < len) {
   1cfac:	89c3      	ldrh	r3, [r0, #14]
   1cfae:	454b      	cmp	r3, r9
   1cfb0:	d206      	bcs.n	1cfc0 <net_frag_linear_copy+0x20>
		return -ENOMEM;
   1cfb2:	f06f 000b 	mvn.w	r0, #11
   1cfb6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
	}

	/* find the right fragment to start copying from */
	while (src && offset >= src->len) {
		offset -= src->len;
   1cfba:	1a6d      	subs	r5, r5, r1
   1cfbc:	b2ad      	uxth	r5, r5
		src = src->frags;
   1cfbe:	6836      	ldr	r6, [r6, #0]
	while (src && offset >= src->len) {
   1cfc0:	b336      	cbz	r6, 1d010 <net_frag_linear_copy+0x70>
   1cfc2:	89b1      	ldrh	r1, [r6, #12]
   1cfc4:	428d      	cmp	r5, r1
   1cfc6:	d2f8      	bcs.n	1cfba <net_frag_linear_copy+0x1a>
   1cfc8:	2700      	movs	r7, #0
   1cfca:	e015      	b.n	1cff8 <net_frag_linear_copy+0x58>
	}

	/* traverse the fragment chain until len bytes are copied */
	copied = 0;
	while (src && len > 0) {
		to_copy = min(len, src->len - offset);
   1cfcc:	89b4      	ldrh	r4, [r6, #12]
   1cfce:	1b64      	subs	r4, r4, r5
   1cfd0:	454c      	cmp	r4, r9
   1cfd2:	bfa8      	it	ge
   1cfd4:	464c      	movge	r4, r9
   1cfd6:	b2a4      	uxth	r4, r4
		memcpy(dst->data + copied, src->data + offset, to_copy);
   1cfd8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   1cfdc:	68b1      	ldr	r1, [r6, #8]
   1cfde:	4622      	mov	r2, r4
   1cfe0:	4429      	add	r1, r5
   1cfe2:	4438      	add	r0, r7
   1cfe4:	f7e3 f96c 	bl	2c0 <memcpy>

		copied += to_copy;
   1cfe8:	4427      	add	r7, r4
   1cfea:	b2bf      	uxth	r7, r7
		/* to_copy is always <= len */
		len -= to_copy;
   1cfec:	eba9 0404 	sub.w	r4, r9, r4
   1cff0:	fa1f f984 	uxth.w	r9, r4
		src = src->frags;
   1cff4:	6836      	ldr	r6, [r6, #0]
		/* after the first iteration, this value will be 0 */
		offset = 0;
   1cff6:	2500      	movs	r5, #0
	while (src && len > 0) {
   1cff8:	b116      	cbz	r6, 1d000 <net_frag_linear_copy+0x60>
   1cffa:	f1b9 0f00 	cmp.w	r9, #0
   1cffe:	d1e5      	bne.n	1cfcc <net_frag_linear_copy+0x2c>
	}

	if (len > 0) {
   1d000:	f1b9 0f00 	cmp.w	r9, #0
   1d004:	d106      	bne.n	1d014 <net_frag_linear_copy+0x74>
		return -ENOMEM;
	}

	dst->len = copied;
   1d006:	f8a8 700c 	strh.w	r7, [r8, #12]

	return 0;
   1d00a:	2000      	movs	r0, #0
   1d00c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   1d010:	2700      	movs	r7, #0
   1d012:	e7f1      	b.n	1cff8 <net_frag_linear_copy+0x58>
		return -ENOMEM;
   1d014:	f06f 000b 	mvn.w	r0, #11
}
   1d018:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}

0001d01c <net_pkt_compact>:

	return copied;
}

bool net_pkt_compact(struct net_pkt *pkt)
{
   1d01c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d020:	4680      	mov	r8, r0
	struct net_buf *frag, *prev;

	NET_DBG("Compacting data in pkt %p", pkt);

	frag = pkt->frags;
   1d022:	6884      	ldr	r4, [r0, #8]
	prev = NULL;
   1d024:	2700      	movs	r7, #0

	while (frag) {
   1d026:	e009      	b.n	1d03c <net_pkt_compact+0x20>
			 */
			size_t copy_len;

			copy_len = frag->frags->len;
			if (copy_len > net_buf_tailroom(frag)) {
				copy_len = net_buf_tailroom(frag);
   1d028:	4630      	mov	r0, r6
   1d02a:	f7fd fa4c 	bl	1a4c6 <net_buf_simple_tailroom>
   1d02e:	4605      	mov	r5, r0
   1d030:	e011      	b.n	1d056 <net_pkt_compact+0x3a>

				/* Then check next fragment */
				continue;
			}
		} else {
			if (!frag->len) {
   1d032:	89a3      	ldrh	r3, [r4, #12]
   1d034:	2b00      	cmp	r3, #0
   1d036:	d030      	beq.n	1d09a <net_pkt_compact+0x7e>

				break;
			}
		}

		prev = frag;
   1d038:	4627      	mov	r7, r4
		frag = frag->frags;
   1d03a:	6824      	ldr	r4, [r4, #0]
	while (frag) {
   1d03c:	2c00      	cmp	r4, #0
   1d03e:	d031      	beq.n	1d0a4 <net_pkt_compact+0x88>
		if (frag->frags) {
   1d040:	6823      	ldr	r3, [r4, #0]
   1d042:	2b00      	cmp	r3, #0
   1d044:	d0f5      	beq.n	1d032 <net_pkt_compact+0x16>
			copy_len = frag->frags->len;
   1d046:	899d      	ldrh	r5, [r3, #12]
			if (copy_len > net_buf_tailroom(frag)) {
   1d048:	f104 0608 	add.w	r6, r4, #8
   1d04c:	4630      	mov	r0, r6
   1d04e:	f7fd fa3a 	bl	1a4c6 <net_buf_simple_tailroom>
   1d052:	4285      	cmp	r5, r0
   1d054:	d8e8      	bhi.n	1d028 <net_pkt_compact+0xc>
	return buf->data + buf->len;
   1d056:	68a0      	ldr	r0, [r4, #8]
   1d058:	89a3      	ldrh	r3, [r4, #12]
			memcpy(net_buf_tail(frag), frag->frags->data, copy_len);
   1d05a:	6821      	ldr	r1, [r4, #0]
   1d05c:	462a      	mov	r2, r5
   1d05e:	6889      	ldr	r1, [r1, #8]
   1d060:	4418      	add	r0, r3
   1d062:	f7e3 f92d 	bl	2c0 <memcpy>
			net_buf_add(frag, copy_len);
   1d066:	4629      	mov	r1, r5
   1d068:	4630      	mov	r0, r6
   1d06a:	f7fd f9c3 	bl	1a3f4 <net_buf_simple_add>
			memmove(frag->frags->data,
   1d06e:	6823      	ldr	r3, [r4, #0]
   1d070:	6898      	ldr	r0, [r3, #8]
				frag->frags->len - copy_len);
   1d072:	899a      	ldrh	r2, [r3, #12]
			memmove(frag->frags->data,
   1d074:	1b52      	subs	r2, r2, r5
   1d076:	1941      	adds	r1, r0, r5
   1d078:	f00c fc2a 	bl	298d0 <memmove>
			frag->frags->len -= copy_len;
   1d07c:	6822      	ldr	r2, [r4, #0]
   1d07e:	8993      	ldrh	r3, [r2, #12]
   1d080:	1b5d      	subs	r5, r3, r5
   1d082:	8195      	strh	r5, [r2, #12]
			if (net_buf_tailroom(frag)) {
   1d084:	4630      	mov	r0, r6
   1d086:	f7fd fa1e 	bl	1a4c6 <net_buf_simple_tailroom>
   1d08a:	2800      	cmp	r0, #0
   1d08c:	d0d4      	beq.n	1d038 <net_pkt_compact+0x1c>
				net_pkt_frag_del(pkt, frag, frag->frags);
   1d08e:	6822      	ldr	r2, [r4, #0]
   1d090:	4621      	mov	r1, r4
   1d092:	4640      	mov	r0, r8
   1d094:	f7ff feea 	bl	1ce6c <net_pkt_frag_del>
				continue;
   1d098:	e7d0      	b.n	1d03c <net_pkt_compact+0x20>
				net_pkt_frag_del(pkt, prev, frag);
   1d09a:	4622      	mov	r2, r4
   1d09c:	4639      	mov	r1, r7
   1d09e:	4640      	mov	r0, r8
   1d0a0:	f7ff fee4 	bl	1ce6c <net_pkt_frag_del>
	}

	return true;
}
   1d0a4:	2001      	movs	r0, #1
   1d0a6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d0aa <net_pkt_append>:
	return 0;
}

u16_t net_pkt_append(struct net_pkt *pkt, u16_t len, const u8_t *data,
		    s32_t timeout)
{
   1d0aa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
	struct net_buf *frag;

	if (!pkt || !data) {
   1d0ae:	b3d0      	cbz	r0, 1d126 <net_pkt_append+0x7c>
   1d0b0:	460c      	mov	r4, r1
   1d0b2:	4690      	mov	r8, r2
   1d0b4:	469a      	mov	sl, r3
   1d0b6:	4681      	mov	r9, r0
   1d0b8:	b3ca      	cbz	r2, 1d12e <net_pkt_append+0x84>
		return 0;
	}

	if (!pkt->frags) {
   1d0ba:	6883      	ldr	r3, [r0, #8]
   1d0bc:	b133      	cbz	r3, 1d0cc <net_pkt_append+0x22>
	struct net_buf *frag = net_buf_frag_last(pkt->frags);
   1d0be:	f8d9 0008 	ldr.w	r0, [r9, #8]
   1d0c2:	f7fd f96b 	bl	1a39c <net_buf_frag_last>
   1d0c6:	4605      	mov	r5, r0
	u16_t added_len = 0;
   1d0c8:	2700      	movs	r7, #0
   1d0ca:	e024      	b.n	1d116 <net_pkt_append+0x6c>
		frag = net_pkt_get_frag(pkt, timeout);
   1d0cc:	4651      	mov	r1, sl
   1d0ce:	f7ff fe61 	bl	1cd94 <net_pkt_get_frag>
		if (!frag) {
   1d0d2:	4601      	mov	r1, r0
   1d0d4:	b368      	cbz	r0, 1d132 <net_pkt_append+0x88>
			return 0;
		}

		net_pkt_frag_add(pkt, frag);
   1d0d6:	4648      	mov	r0, r9
   1d0d8:	f7ff fed9 	bl	1ce8e <net_pkt_frag_add>
   1d0dc:	e7ef      	b.n	1d0be <net_pkt_append+0x14>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d0de:	4628      	mov	r0, r5
   1d0e0:	f7fd f9f1 	bl	1a4c6 <net_buf_simple_tailroom>
   1d0e4:	b286      	uxth	r6, r0
		void *data = net_buf_add(frag, count);
   1d0e6:	4631      	mov	r1, r6
   1d0e8:	4628      	mov	r0, r5
   1d0ea:	f7fd f983 	bl	1a3f4 <net_buf_simple_add>
		memcpy(data, value, count);
   1d0ee:	4632      	mov	r2, r6
   1d0f0:	4641      	mov	r1, r8
   1d0f2:	f7e3 f8e5 	bl	2c0 <memcpy>
		len -= count;
   1d0f6:	1ba4      	subs	r4, r4, r6
   1d0f8:	b2a4      	uxth	r4, r4
		added_len += count;
   1d0fa:	4437      	add	r7, r6
   1d0fc:	b2bf      	uxth	r7, r7
		value += count;
   1d0fe:	44b0      	add	r8, r6
		if (len == 0) {
   1d100:	b194      	cbz	r4, 1d128 <net_pkt_append+0x7e>
		frag = net_pkt_get_frag(pkt, timeout);
   1d102:	4651      	mov	r1, sl
   1d104:	4648      	mov	r0, r9
   1d106:	f7ff fe45 	bl	1cd94 <net_pkt_get_frag>
		if (!frag) {
   1d10a:	4605      	mov	r5, r0
   1d10c:	b160      	cbz	r0, 1d128 <net_pkt_append+0x7e>
		net_pkt_frag_add(pkt, frag);
   1d10e:	4601      	mov	r1, r0
   1d110:	4648      	mov	r0, r9
   1d112:	f7ff febc 	bl	1ce8e <net_pkt_frag_add>
		u16_t count = min(len, net_buf_tailroom(frag));
   1d116:	3508      	adds	r5, #8
   1d118:	4628      	mov	r0, r5
   1d11a:	f7fd f9d4 	bl	1a4c6 <net_buf_simple_tailroom>
   1d11e:	4284      	cmp	r4, r0
   1d120:	d2dd      	bcs.n	1d0de <net_pkt_append+0x34>
   1d122:	4626      	mov	r6, r4
   1d124:	e7df      	b.n	1d0e6 <net_pkt_append+0x3c>
		return 0;
   1d126:	2700      	movs	r7, #0
	}

	return net_pkt_append_bytes(pkt, data, len, timeout);
}
   1d128:	4638      	mov	r0, r7
   1d12a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		return 0;
   1d12e:	2700      	movs	r7, #0
   1d130:	e7fa      	b.n	1d128 <net_pkt_append+0x7e>
			return 0;
   1d132:	2700      	movs	r7, #0
   1d134:	e7f8      	b.n	1d128 <net_pkt_append+0x7e>

0001d136 <net_frag_read>:
	return NULL;
}

struct net_buf *net_frag_read(struct net_buf *frag, u16_t offset,
			      u16_t *pos, u16_t len, u8_t *data)
{
   1d136:	b4f0      	push	{r4, r5, r6, r7}
   1d138:	9e04      	ldr	r6, [sp, #16]
	if (!frag) {
   1d13a:	4604      	mov	r4, r0
   1d13c:	b188      	cbz	r0, 1d162 <net_frag_read+0x2c>
	while (frag) {
   1d13e:	b17c      	cbz	r4, 1d160 <net_frag_read+0x2a>
		if (offset == frag->len) {
   1d140:	89a0      	ldrh	r0, [r4, #12]
   1d142:	4288      	cmp	r0, r1
   1d144:	d005      	beq.n	1d152 <net_frag_read+0x1c>
		} else if (offset < frag->len) {
   1d146:	4288      	cmp	r0, r1
   1d148:	d807      	bhi.n	1d15a <net_frag_read+0x24>
		offset -= frag->len;
   1d14a:	1a09      	subs	r1, r1, r0
   1d14c:	b289      	uxth	r1, r1
		frag = frag->frags;
   1d14e:	6824      	ldr	r4, [r4, #0]
   1d150:	e7f5      	b.n	1d13e <net_frag_read+0x8>
			*pos = 0;
   1d152:	2100      	movs	r1, #0
   1d154:	8011      	strh	r1, [r2, #0]
			return frag->frags;
   1d156:	6820      	ldr	r0, [r4, #0]
   1d158:	e003      	b.n	1d162 <net_frag_read+0x2c>
			*pos = offset;
   1d15a:	8011      	strh	r1, [r2, #0]
			return frag;
   1d15c:	4620      	mov	r0, r4
   1d15e:	e000      	b.n	1d162 <net_frag_read+0x2c>
	return NULL;
   1d160:	4620      	mov	r0, r4
	u16_t copy = 0;

	frag = adjust_offset(frag, offset, pos);
	if (!frag) {
   1d162:	b350      	cbz	r0, 1d1ba <net_frag_read+0x84>
   1d164:	2500      	movs	r5, #0
   1d166:	e00d      	b.n	1d184 <net_frag_read+0x4e>
	while (len-- > 0 && frag) {
		if (data) {
			frag = net_frag_read_byte(frag, *pos,
						  pos, data + copy++);
		} else {
			frag = net_frag_read_byte(frag, *pos, pos, NULL);
   1d168:	8813      	ldrh	r3, [r2, #0]
	*pos = offset + 1;
   1d16a:	3301      	adds	r3, #1
   1d16c:	b29b      	uxth	r3, r3
   1d16e:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d170:	8984      	ldrh	r4, [r0, #12]
   1d172:	42a3      	cmp	r3, r4
   1d174:	d304      	bcc.n	1d180 <net_frag_read+0x4a>
		*pos = 0;
   1d176:	2300      	movs	r3, #0
   1d178:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d17a:	6800      	ldr	r0, [r0, #0]
   1d17c:	e000      	b.n	1d180 <net_frag_read+0x4a>
						  pos, data + copy++);
   1d17e:	4625      	mov	r5, r4
   1d180:	460b      	mov	r3, r1
		}

		/* Error: Still reamining length to be read, but no data. */
		if (!frag && len) {
   1d182:	b1c0      	cbz	r0, 1d1b6 <net_frag_read+0x80>
	while (len-- > 0 && frag) {
   1d184:	1e59      	subs	r1, r3, #1
   1d186:	b289      	uxth	r1, r1
   1d188:	b1db      	cbz	r3, 1d1c2 <net_frag_read+0x8c>
   1d18a:	b1d0      	cbz	r0, 1d1c2 <net_frag_read+0x8c>
		if (data) {
   1d18c:	2e00      	cmp	r6, #0
   1d18e:	d0eb      	beq.n	1d168 <net_frag_read+0x32>
			frag = net_frag_read_byte(frag, *pos,
   1d190:	8813      	ldrh	r3, [r2, #0]
						  pos, data + copy++);
   1d192:	1c6c      	adds	r4, r5, #1
   1d194:	b2a4      	uxth	r4, r4
	if (data) {
   1d196:	42ee      	cmn	r6, r5
   1d198:	d002      	beq.n	1d1a0 <net_frag_read+0x6a>
		*data = frag->data[offset];
   1d19a:	6887      	ldr	r7, [r0, #8]
   1d19c:	5cff      	ldrb	r7, [r7, r3]
   1d19e:	5577      	strb	r7, [r6, r5]
	*pos = offset + 1;
   1d1a0:	3301      	adds	r3, #1
   1d1a2:	b29b      	uxth	r3, r3
   1d1a4:	8013      	strh	r3, [r2, #0]
	if (*pos >= frag->len) {
   1d1a6:	8985      	ldrh	r5, [r0, #12]
   1d1a8:	42ab      	cmp	r3, r5
   1d1aa:	d3e8      	bcc.n	1d17e <net_frag_read+0x48>
		*pos = 0;
   1d1ac:	2300      	movs	r3, #0
   1d1ae:	8013      	strh	r3, [r2, #0]
		return frag->frags;
   1d1b0:	6800      	ldr	r0, [r0, #0]
						  pos, data + copy++);
   1d1b2:	4625      	mov	r5, r4
   1d1b4:	e7e4      	b.n	1d180 <net_frag_read+0x4a>
		if (!frag && len) {
   1d1b6:	2900      	cmp	r1, #0
   1d1b8:	d0e4      	beq.n	1d184 <net_frag_read+0x4e>
	}

	return frag;

error:
	*pos = 0xffff;
   1d1ba:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d1be:	8013      	strh	r3, [r2, #0]

	return NULL;
   1d1c0:	2000      	movs	r0, #0
}
   1d1c2:	bcf0      	pop	{r4, r5, r6, r7}
   1d1c4:	4770      	bx	lr

0001d1c6 <net_frag_read_be16>:

struct net_buf *net_frag_read_be16(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u16_t *value)
{
   1d1c6:	b510      	push	{r4, lr}
   1d1c8:	b084      	sub	sp, #16
   1d1ca:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v16[2];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u16_t), v16);
   1d1cc:	ab03      	add	r3, sp, #12
   1d1ce:	9300      	str	r3, [sp, #0]
   1d1d0:	2302      	movs	r3, #2
   1d1d2:	f7ff ffb0 	bl	1d136 <net_frag_read>

	*value = v16[0] << 8 | v16[1];
   1d1d6:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1d1da:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d1de:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d1e2:	8023      	strh	r3, [r4, #0]

	return ret_frag;
}
   1d1e4:	b004      	add	sp, #16
   1d1e6:	bd10      	pop	{r4, pc}

0001d1e8 <net_frag_read_be32>:

struct net_buf *net_frag_read_be32(struct net_buf *frag, u16_t offset,
				   u16_t *pos, u32_t *value)
{
   1d1e8:	b510      	push	{r4, lr}
   1d1ea:	b084      	sub	sp, #16
   1d1ec:	461c      	mov	r4, r3
	struct net_buf *ret_frag;
	u8_t v32[4];

	ret_frag = net_frag_read(frag, offset, pos, sizeof(u32_t), v32);
   1d1ee:	ab03      	add	r3, sp, #12
   1d1f0:	9300      	str	r3, [sp, #0]
   1d1f2:	2304      	movs	r3, #4
   1d1f4:	f7ff ff9f 	bl	1d136 <net_frag_read>

	*value = v32[0] << 24 | v32[1] << 16 | v32[2] << 8 | v32[3];
   1d1f8:	f89d 200c 	ldrb.w	r2, [sp, #12]
   1d1fc:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1d200:	041b      	lsls	r3, r3, #16
   1d202:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
   1d206:	f89d 200e 	ldrb.w	r2, [sp, #14]
   1d20a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1d20e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   1d212:	4313      	orrs	r3, r2
   1d214:	6023      	str	r3, [r4, #0]

	return ret_frag;
}
   1d216:	b004      	add	sp, #16
   1d218:	bd10      	pop	{r4, pc}

0001d21a <net_pkt_write>:

struct net_buf *net_pkt_write(struct net_pkt *pkt, struct net_buf *frag,
			      u16_t offset, u16_t *pos,
			      u16_t len, u8_t *data,
			      s32_t timeout)
{
   1d21a:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d21e:	b083      	sub	sp, #12
   1d220:	9201      	str	r2, [sp, #4]
   1d222:	469b      	mov	fp, r3
   1d224:	f8bd 6030 	ldrh.w	r6, [sp, #48]	; 0x30
   1d228:	9f0d      	ldr	r7, [sp, #52]	; 0x34
	if (!pkt) {
   1d22a:	2800      	cmp	r0, #0
   1d22c:	d06d      	beq.n	1d30a <net_pkt_write+0xf0>
   1d22e:	460c      	mov	r4, r1
   1d230:	4682      	mov	sl, r0
   1d232:	4615      	mov	r5, r2
	if (data) {
   1d234:	b364      	cbz	r4, 1d290 <net_pkt_write+0x76>
		if (!frag) {
   1d236:	2c00      	cmp	r4, #0
   1d238:	d065      	beq.n	1d306 <net_pkt_write+0xec>
		if (offset < frag->len) {
   1d23a:	89a3      	ldrh	r3, [r4, #12]
   1d23c:	42ab      	cmp	r3, r5
   1d23e:	d863      	bhi.n	1d308 <net_pkt_write+0xee>
		if (offset == frag->len) {
   1d240:	d032      	beq.n	1d2a8 <net_pkt_write+0x8e>
		if (offset > frag->len) {
   1d242:	42ab      	cmp	r3, r5
   1d244:	d2f6      	bcs.n	1d234 <net_pkt_write+0x1a>
			offset -= frag->len;
   1d246:	1aed      	subs	r5, r5, r3
   1d248:	b2ad      	uxth	r5, r5
			tailroom = net_buf_tailroom(frag);
   1d24a:	f104 0908 	add.w	r9, r4, #8
   1d24e:	4648      	mov	r0, r9
   1d250:	f7fd f939 	bl	1a4c6 <net_buf_simple_tailroom>
   1d254:	fa1f f880 	uxth.w	r8, r0
			if (offset < tailroom) {
   1d258:	4545      	cmp	r5, r8
   1d25a:	d33a      	bcc.n	1d2d2 <net_pkt_write+0xb8>
			if (offset == tailroom) {
   1d25c:	4545      	cmp	r5, r8
   1d25e:	d03e      	beq.n	1d2de <net_pkt_write+0xc4>
			if (offset > tailroom) {
   1d260:	4545      	cmp	r5, r8
   1d262:	d9e7      	bls.n	1d234 <net_pkt_write+0x1a>
				net_buf_add(frag, tailroom);
   1d264:	b281      	uxth	r1, r0
   1d266:	4648      	mov	r0, r9
   1d268:	f7fd f8c4 	bl	1a3f4 <net_buf_simple_add>
				offset -= tailroom;
   1d26c:	eba5 0508 	sub.w	r5, r5, r8
   1d270:	b2ad      	uxth	r5, r5
				frag = check_and_create_data(pkt,
   1d272:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d274:	2c00      	cmp	r4, #0
   1d276:	d1dd      	bne.n	1d234 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d278:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d27a:	4650      	mov	r0, sl
   1d27c:	f7ff fd8a 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   1d280:	4604      	mov	r4, r0
   1d282:	2800      	cmp	r0, #0
   1d284:	d0d6      	beq.n	1d234 <net_pkt_write+0x1a>
	net_pkt_frag_add(pkt, frag);
   1d286:	4601      	mov	r1, r0
   1d288:	4650      	mov	r0, sl
   1d28a:	f7ff fe00 	bl	1ce8e <net_pkt_frag_add>
   1d28e:	e7d1      	b.n	1d234 <net_pkt_write+0x1a>
	frag = net_pkt_get_frag(pkt, timeout);
   1d290:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d292:	4650      	mov	r0, sl
   1d294:	f7ff fd7e 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   1d298:	4604      	mov	r4, r0
   1d29a:	2800      	cmp	r0, #0
   1d29c:	d0cb      	beq.n	1d236 <net_pkt_write+0x1c>
	net_pkt_frag_add(pkt, frag);
   1d29e:	4601      	mov	r1, r0
   1d2a0:	4650      	mov	r0, sl
   1d2a2:	f7ff fdf4 	bl	1ce8e <net_pkt_frag_add>
   1d2a6:	e7c6      	b.n	1d236 <net_pkt_write+0x1c>
			if (net_buf_tailroom(frag)) {
   1d2a8:	f104 0008 	add.w	r0, r4, #8
   1d2ac:	f7fd f90b 	bl	1a4c6 <net_buf_simple_tailroom>
   1d2b0:	bb50      	cbnz	r0, 1d308 <net_pkt_write+0xee>
			return check_and_create_data(pkt, frag->frags,
   1d2b2:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d2b4:	b10c      	cbz	r4, 1d2ba <net_pkt_write+0xa0>
			*pos = 0;
   1d2b6:	2500      	movs	r5, #0
   1d2b8:	e026      	b.n	1d308 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d2ba:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d2bc:	4650      	mov	r0, sl
   1d2be:	f7ff fd69 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   1d2c2:	4604      	mov	r4, r0
   1d2c4:	2800      	cmp	r0, #0
   1d2c6:	d0f6      	beq.n	1d2b6 <net_pkt_write+0x9c>
	net_pkt_frag_add(pkt, frag);
   1d2c8:	4601      	mov	r1, r0
   1d2ca:	4650      	mov	r0, sl
   1d2cc:	f7ff fddf 	bl	1ce8e <net_pkt_frag_add>
   1d2d0:	e7f1      	b.n	1d2b6 <net_pkt_write+0x9c>
				net_buf_add(frag, offset);
   1d2d2:	4629      	mov	r1, r5
   1d2d4:	4648      	mov	r0, r9
   1d2d6:	f7fd f88d 	bl	1a3f4 <net_buf_simple_add>
				*pos = frag->len;
   1d2da:	89a5      	ldrh	r5, [r4, #12]
   1d2dc:	e014      	b.n	1d308 <net_pkt_write+0xee>
				net_buf_add(frag, tailroom);
   1d2de:	b281      	uxth	r1, r0
   1d2e0:	4648      	mov	r0, r9
   1d2e2:	f7fd f887 	bl	1a3f4 <net_buf_simple_add>
				return check_and_create_data(pkt,
   1d2e6:	6824      	ldr	r4, [r4, #0]
	if (data) {
   1d2e8:	b10c      	cbz	r4, 1d2ee <net_pkt_write+0xd4>
				*pos = 0;
   1d2ea:	2500      	movs	r5, #0
   1d2ec:	e00c      	b.n	1d308 <net_pkt_write+0xee>
	frag = net_pkt_get_frag(pkt, timeout);
   1d2ee:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d2f0:	4650      	mov	r0, sl
   1d2f2:	f7ff fd4f 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   1d2f6:	4604      	mov	r4, r0
   1d2f8:	2800      	cmp	r0, #0
   1d2fa:	d0f6      	beq.n	1d2ea <net_pkt_write+0xd0>
	net_pkt_frag_add(pkt, frag);
   1d2fc:	4601      	mov	r1, r0
   1d2fe:	4650      	mov	r0, sl
   1d300:	f7ff fdc5 	bl	1ce8e <net_pkt_frag_add>
   1d304:	e7f1      	b.n	1d2ea <net_pkt_write+0xd0>
		if (!frag) {
   1d306:	9d01      	ldr	r5, [sp, #4]
		NET_ERR("Invalid packet");
		goto error;
	}

	frag = adjust_write_offset(pkt, frag, offset, &offset, timeout);
	if (!frag) {
   1d308:	b96c      	cbnz	r4, 1d326 <net_pkt_write+0x10c>
			net_pkt_frag_add(pkt, frag);
		}
	} while (1);

error:
	*pos = 0xffff;
   1d30a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1d30e:	f8ab 3000 	strh.w	r3, [fp]

	return NULL;
   1d312:	2000      	movs	r0, #0
   1d314:	e02d      	b.n	1d372 <net_pkt_write+0x158>
		len -= count;
   1d316:	eba6 0608 	sub.w	r6, r6, r8
   1d31a:	b2b6      	uxth	r6, r6
		if (len == 0) {
   1d31c:	b32e      	cbz	r6, 1d36a <net_pkt_write+0x150>
		data += count;
   1d31e:	4447      	add	r7, r8
		frag = frag->frags;
   1d320:	6824      	ldr	r4, [r4, #0]
		if (!frag) {
   1d322:	b34c      	cbz	r4, 1d378 <net_pkt_write+0x15e>
		offset = 0;
   1d324:	2500      	movs	r5, #0
		u16_t space = frag->size - net_buf_headroom(frag) - offset;
   1d326:	f8b4 800e 	ldrh.w	r8, [r4, #14]
   1d32a:	f104 0908 	add.w	r9, r4, #8
   1d32e:	4648      	mov	r0, r9
   1d330:	f7fd f8c5 	bl	1a4be <net_buf_simple_headroom>
   1d334:	eba8 0800 	sub.w	r8, r8, r0
   1d338:	fa1f f888 	uxth.w	r8, r8
   1d33c:	eba8 0805 	sub.w	r8, r8, r5
   1d340:	fa1f f888 	uxth.w	r8, r8
		u16_t count = min(len, space);
   1d344:	45b0      	cmp	r8, r6
   1d346:	bf28      	it	cs
   1d348:	46b0      	movcs	r8, r6
		memcpy(frag->data + offset, data, count);
   1d34a:	68a0      	ldr	r0, [r4, #8]
   1d34c:	4642      	mov	r2, r8
   1d34e:	4639      	mov	r1, r7
   1d350:	4428      	add	r0, r5
   1d352:	f7e2 ffb5 	bl	2c0 <memcpy>
		size_to_add = offset + count - frag->len;
   1d356:	eb05 0108 	add.w	r1, r5, r8
   1d35a:	89a3      	ldrh	r3, [r4, #12]
   1d35c:	1ac9      	subs	r1, r1, r3
		if (size_to_add > 0) {
   1d35e:	2900      	cmp	r1, #0
   1d360:	ddd9      	ble.n	1d316 <net_pkt_write+0xfc>
			net_buf_add(frag, size_to_add);
   1d362:	4648      	mov	r0, r9
   1d364:	f7fd f846 	bl	1a3f4 <net_buf_simple_add>
   1d368:	e7d5      	b.n	1d316 <net_pkt_write+0xfc>
			*pos = offset + count;
   1d36a:	4445      	add	r5, r8
   1d36c:	f8ab 5000 	strh.w	r5, [fp]
			return frag;
   1d370:	4620      	mov	r0, r4
}
   1d372:	b003      	add	sp, #12
   1d374:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
			frag = net_pkt_get_frag(pkt, timeout);
   1d378:	990e      	ldr	r1, [sp, #56]	; 0x38
   1d37a:	4650      	mov	r0, sl
   1d37c:	f7ff fd0a 	bl	1cd94 <net_pkt_get_frag>
			if (!frag) {
   1d380:	4604      	mov	r4, r0
   1d382:	2800      	cmp	r0, #0
   1d384:	d0c1      	beq.n	1d30a <net_pkt_write+0xf0>
			net_pkt_frag_add(pkt, frag);
   1d386:	4601      	mov	r1, r0
   1d388:	4650      	mov	r0, sl
   1d38a:	f7ff fd80 	bl	1ce8e <net_pkt_frag_add>
   1d38e:	e7c9      	b.n	1d324 <net_pkt_write+0x10a>

0001d390 <net_pkt_get_info>:
void net_pkt_get_info(struct k_mem_slab **rx,
		      struct k_mem_slab **tx,
		      struct net_buf_pool **rx_data,
		      struct net_buf_pool **tx_data)
{
	if (rx) {
   1d390:	b170      	cbz	r0, 1d3b0 <net_pkt_get_info+0x20>
{
   1d392:	b410      	push	{r4}
   1d394:	4604      	mov	r4, r0
		*rx = &rx_pkts;
   1d396:	480c      	ldr	r0, [pc, #48]	; (1d3c8 <net_pkt_get_info+0x38>)
   1d398:	6020      	str	r0, [r4, #0]
	}

	if (tx) {
   1d39a:	b109      	cbz	r1, 1d3a0 <net_pkt_get_info+0x10>
		*tx = &tx_pkts;
   1d39c:	480b      	ldr	r0, [pc, #44]	; (1d3cc <net_pkt_get_info+0x3c>)
   1d39e:	6008      	str	r0, [r1, #0]
	}

	if (rx_data) {
   1d3a0:	b10a      	cbz	r2, 1d3a6 <net_pkt_get_info+0x16>
		*rx_data = &rx_bufs;
   1d3a2:	490b      	ldr	r1, [pc, #44]	; (1d3d0 <net_pkt_get_info+0x40>)
   1d3a4:	6011      	str	r1, [r2, #0]
	}

	if (tx_data) {
   1d3a6:	b10b      	cbz	r3, 1d3ac <net_pkt_get_info+0x1c>
		*tx_data = &tx_bufs;
   1d3a8:	4a0a      	ldr	r2, [pc, #40]	; (1d3d4 <net_pkt_get_info+0x44>)
   1d3aa:	601a      	str	r2, [r3, #0]
	}
}
   1d3ac:	bc10      	pop	{r4}
   1d3ae:	4770      	bx	lr
	if (tx) {
   1d3b0:	b109      	cbz	r1, 1d3b6 <net_pkt_get_info+0x26>
		*tx = &tx_pkts;
   1d3b2:	4806      	ldr	r0, [pc, #24]	; (1d3cc <net_pkt_get_info+0x3c>)
   1d3b4:	6008      	str	r0, [r1, #0]
	if (rx_data) {
   1d3b6:	b10a      	cbz	r2, 1d3bc <net_pkt_get_info+0x2c>
		*rx_data = &rx_bufs;
   1d3b8:	4905      	ldr	r1, [pc, #20]	; (1d3d0 <net_pkt_get_info+0x40>)
   1d3ba:	6011      	str	r1, [r2, #0]
	if (tx_data) {
   1d3bc:	2b00      	cmp	r3, #0
   1d3be:	d0f6      	beq.n	1d3ae <net_pkt_get_info+0x1e>
		*tx_data = &tx_bufs;
   1d3c0:	4a04      	ldr	r2, [pc, #16]	; (1d3d4 <net_pkt_get_info+0x44>)
   1d3c2:	601a      	str	r2, [r3, #0]
   1d3c4:	4770      	bx	lr
   1d3c6:	bf00      	nop
   1d3c8:	2000cc28 	.word	0x2000cc28
   1d3cc:	2000cc44 	.word	0x2000cc44
   1d3d0:	2000cda8 	.word	0x2000cda8
   1d3d4:	2000cdc8 	.word	0x2000cdc8

0001d3d8 <net_frag_get_pos>:
#endif /* CONFIG_NET_DEBUG_NET_PKT */

struct net_buf *net_frag_get_pos(struct net_pkt *pkt,
				 u16_t offset,
				 u16_t *pos)
{
   1d3d8:	b500      	push	{lr}
   1d3da:	b083      	sub	sp, #12
	struct net_buf *frag;

	frag = net_frag_skip(pkt->frags, offset, pos, 0);
   1d3dc:	6880      	ldr	r0, [r0, #8]
 */
static inline struct net_buf *net_frag_skip(struct net_buf *frag,
					    u16_t offset,
					    u16_t *pos, u16_t len)
{
	return net_frag_read(frag, offset, pos, len, NULL);
   1d3de:	2300      	movs	r3, #0
   1d3e0:	9300      	str	r3, [sp, #0]
   1d3e2:	f7ff fea8 	bl	1d136 <net_frag_read>
	if (!frag) {
		return NULL;
	}

	return frag;
}
   1d3e6:	b003      	add	sp, #12
   1d3e8:	f85d fb04 	ldr.w	pc, [sp], #4

0001d3ec <net_pkt_icmp_data>:
#else
#define too_short_msg(...)
#endif

struct net_icmp_hdr *net_pkt_icmp_data(struct net_pkt *pkt)
{
   1d3ec:	b500      	push	{lr}
   1d3ee:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d3f0:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d3f4:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d3f8:	f10d 0206 	add.w	r2, sp, #6
   1d3fc:	4419      	add	r1, r3
   1d3fe:	f7ff ffeb 	bl	1d3d8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d402:	b130      	cbz	r0, 1d412 <net_pkt_icmp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("icmp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_icmp_hdr *)(frag->data + offset);
   1d404:	6880      	ldr	r0, [r0, #8]
   1d406:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d40a:	4418      	add	r0, r3
}
   1d40c:	b003      	add	sp, #12
   1d40e:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d412:	2000      	movs	r0, #0
   1d414:	e7fa      	b.n	1d40c <net_pkt_icmp_data+0x20>

0001d416 <net_pkt_icmp_opt_data>:

u8_t *net_pkt_icmp_opt_data(struct net_pkt *pkt, size_t opt_len)
{
   1d416:	b500      	push	{lr}
   1d418:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d41a:	f890 3033 	ldrb.w	r3, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) + opt_len,
   1d41e:	f890 203b 	ldrb.w	r2, [r0, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1d422:	4413      	add	r3, r2
	frag = net_frag_get_pos(pkt,
   1d424:	4419      	add	r1, r3
   1d426:	f10d 0206 	add.w	r2, sp, #6
   1d42a:	b289      	uxth	r1, r1
   1d42c:	f7ff ffd4 	bl	1d3d8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d430:	b130      	cbz	r0, 1d440 <net_pkt_icmp_opt_data+0x2a>
		/* We tried to read past the end of the data */
		too_short_msg("icmp opt data", pkt, offset, opt_len);
		return NULL;
	}

	return frag->data + offset;
   1d432:	6880      	ldr	r0, [r0, #8]
   1d434:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d438:	4418      	add	r0, r3
}
   1d43a:	b003      	add	sp, #12
   1d43c:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d440:	2000      	movs	r0, #0
   1d442:	e7fa      	b.n	1d43a <net_pkt_icmp_opt_data+0x24>

0001d444 <net_pkt_udp_data>:

struct net_udp_hdr *net_pkt_udp_data(struct net_pkt *pkt)
{
   1d444:	b500      	push	{lr}
   1d446:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d448:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d44c:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d450:	f10d 0206 	add.w	r2, sp, #6
   1d454:	4419      	add	r1, r3
   1d456:	f7ff ffbf 	bl	1d3d8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d45a:	b130      	cbz	r0, 1d46a <net_pkt_udp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("udp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_udp_hdr *)(frag->data + offset);
   1d45c:	6880      	ldr	r0, [r0, #8]
   1d45e:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d462:	4418      	add	r0, r3
}
   1d464:	b003      	add	sp, #12
   1d466:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d46a:	2000      	movs	r0, #0
   1d46c:	e7fa      	b.n	1d464 <net_pkt_udp_data+0x20>

0001d46e <net_pkt_tcp_data>:

struct net_tcp_hdr *net_pkt_tcp_data(struct net_pkt *pkt)
{
   1d46e:	b500      	push	{lr}
   1d470:	b083      	sub	sp, #12
	struct net_buf *frag;
	u16_t offset;

	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1d472:	f890 1033 	ldrb.w	r1, [r0, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt),
   1d476:	f890 303b 	ldrb.w	r3, [r0, #59]	; 0x3b
	frag = net_frag_get_pos(pkt,
   1d47a:	f10d 0206 	add.w	r2, sp, #6
   1d47e:	4419      	add	r1, r3
   1d480:	f7ff ffaa 	bl	1d3d8 <net_frag_get_pos>
				&offset);
	if (!frag) {
   1d484:	b130      	cbz	r0, 1d494 <net_pkt_tcp_data+0x26>
		/* We tried to read past the end of the data */
		too_short_msg("tcp data", pkt, offset, 0);
		return NULL;
	}

	return (struct net_tcp_hdr *)(frag->data + offset);
   1d486:	6880      	ldr	r0, [r0, #8]
   1d488:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   1d48c:	4418      	add	r0, r3
}
   1d48e:	b003      	add	sp, #12
   1d490:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   1d494:	2000      	movs	r0, #0
   1d496:	e7fa      	b.n	1d48e <net_pkt_tcp_data+0x20>

0001d498 <net_pkt_clone>:

struct net_pkt *net_pkt_clone(struct net_pkt *pkt, s32_t timeout)
{
   1d498:	b570      	push	{r4, r5, r6, lr}
   1d49a:	b082      	sub	sp, #8
	struct net_pkt *clone;
	struct net_buf *frag;
	u16_t pos;

	if (!pkt) {
   1d49c:	4605      	mov	r5, r0
   1d49e:	2800      	cmp	r0, #0
   1d4a0:	d065      	beq.n	1d56e <net_pkt_clone+0xd6>
   1d4a2:	460e      	mov	r6, r1
		return NULL;
	}

	clone = net_pkt_get_reserve(pkt->slab, 0, timeout);
   1d4a4:	460a      	mov	r2, r1
   1d4a6:	2100      	movs	r1, #0
   1d4a8:	6840      	ldr	r0, [r0, #4]
   1d4aa:	f7ff fbad 	bl	1cc08 <net_pkt_get_reserve>
	if (!clone) {
   1d4ae:	4604      	mov	r4, r0
   1d4b0:	2800      	cmp	r0, #0
   1d4b2:	d054      	beq.n	1d55e <net_pkt_clone+0xc6>
		return NULL;
	}

	clone->frags = NULL;
   1d4b4:	2300      	movs	r3, #0
   1d4b6:	6083      	str	r3, [r0, #8]

	if (pkt->frags) {
   1d4b8:	68ab      	ldr	r3, [r5, #8]
   1d4ba:	b173      	cbz	r3, 1d4da <net_pkt_clone+0x42>
   1d4bc:	2100      	movs	r1, #0
   1d4be:	e002      	b.n	1d4c6 <net_pkt_clone+0x2e>
		bytes += buf->len;
   1d4c0:	899a      	ldrh	r2, [r3, #12]
   1d4c2:	4411      	add	r1, r2
		buf = buf->frags;
   1d4c4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1d4c6:	2b00      	cmp	r3, #0
   1d4c8:	d1fa      	bne.n	1d4c0 <net_pkt_clone+0x28>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1d4ca:	4633      	mov	r3, r6
   1d4cc:	2200      	movs	r2, #0
   1d4ce:	4628      	mov	r0, r5
   1d4d0:	f7ff fcf4 	bl	1cebc <net_pkt_copy>
		clone->frags = net_pkt_copy_all(pkt, 0, timeout);
   1d4d4:	60a0      	str	r0, [r4, #8]
		if (!clone->frags) {
   1d4d6:	2800      	cmp	r0, #0
   1d4d8:	d044      	beq.n	1d564 <net_pkt_clone+0xcc>
			net_pkt_unref(clone);
			return NULL;
		}
	}

	clone->context = pkt->context;
   1d4da:	68eb      	ldr	r3, [r5, #12]
   1d4dc:	60e3      	str	r3, [r4, #12]
	clone->token = pkt->token;
   1d4de:	692b      	ldr	r3, [r5, #16]
   1d4e0:	6123      	str	r3, [r4, #16]
	clone->iface = pkt->iface;
   1d4e2:	696b      	ldr	r3, [r5, #20]
   1d4e4:	6163      	str	r3, [r4, #20]

	if (clone->frags) {
   1d4e6:	68a3      	ldr	r3, [r4, #8]
   1d4e8:	b1db      	cbz	r3, 1d522 <net_pkt_clone+0x8a>
		frag = net_frag_get_pos(clone, net_pkt_ip_hdr_len(pkt), &pos);
   1d4ea:	f10d 0206 	add.w	r2, sp, #6
   1d4ee:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   1d4f2:	4620      	mov	r0, r4
   1d4f4:	f7ff ff70 	bl	1d3d8 <net_frag_get_pos>

		net_pkt_set_appdata(clone, frag->data + pos);
   1d4f8:	6883      	ldr	r3, [r0, #8]
   1d4fa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1d4fe:	4413      	add	r3, r2
	pkt->appdata = data;
   1d500:	61a3      	str	r3, [r4, #24]
	return pkt->appdatalen;
   1d502:	8e2b      	ldrh	r3, [r5, #48]	; 0x30
	pkt->appdatalen = len;
   1d504:	8623      	strh	r3, [r4, #48]	; 0x30

		/* The link header pointers are only usable if there is
		 * a fragment that we copied because those pointers point
		 * to start of the fragment which we do not have right now.
		 */
		memcpy(&clone->lladdr_src, &pkt->lladdr_src,
   1d506:	2208      	movs	r2, #8
   1d508:	f105 0120 	add.w	r1, r5, #32
   1d50c:	f104 0020 	add.w	r0, r4, #32
   1d510:	f7e2 fed6 	bl	2c0 <memcpy>
		       sizeof(clone->lladdr_src));
		memcpy(&clone->lladdr_dst, &pkt->lladdr_dst,
   1d514:	2208      	movs	r2, #8
   1d516:	f105 0128 	add.w	r1, r5, #40	; 0x28
   1d51a:	f104 0028 	add.w	r0, r4, #40	; 0x28
   1d51e:	f7e2 fecf 	bl	2c0 <memcpy>
	pkt->next_hdr = hdr;
   1d522:	2300      	movs	r3, #0
   1d524:	61e3      	str	r3, [r4, #28]
	return pkt->ip_hdr_len;
   1d526:	f895 3033 	ldrb.w	r3, [r5, #51]	; 0x33
	pkt->ip_hdr_len = len;
   1d52a:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->family;
   1d52e:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   1d532:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	pkt->family = family;
   1d536:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   1d53a:	f363 02c6 	bfi	r2, r3, #3, #4
   1d53e:	f884 2038 	strb.w	r2, [r4, #56]	; 0x38
	net_pkt_set_ip_hdr_len(clone, net_pkt_ip_hdr_len(pkt));

	net_pkt_set_family(clone, net_pkt_family(pkt));

#if defined(CONFIG_NET_IPV6)
	clone->ipv6_hop_limit = pkt->ipv6_hop_limit;
   1d542:	f895 303a 	ldrb.w	r3, [r5, #58]	; 0x3a
   1d546:	f884 303a 	strb.w	r3, [r4, #58]	; 0x3a
	clone->ipv6_ext_len = pkt->ipv6_ext_len;
   1d54a:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
   1d54e:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	clone->ipv6_ext_opt_len = pkt->ipv6_ext_opt_len;
   1d552:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
   1d556:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	clone->ipv6_prev_hdr_start = pkt->ipv6_prev_hdr_start;
   1d55a:	8feb      	ldrh	r3, [r5, #62]	; 0x3e
   1d55c:	87e3      	strh	r3, [r4, #62]	; 0x3e
#endif

	NET_DBG("Cloned %p to %p", pkt, clone);

	return clone;
}
   1d55e:	4620      	mov	r0, r4
   1d560:	b002      	add	sp, #8
   1d562:	bd70      	pop	{r4, r5, r6, pc}
			net_pkt_unref(clone);
   1d564:	4620      	mov	r0, r4
   1d566:	f7ff fc68 	bl	1ce3a <net_pkt_unref>
			return NULL;
   1d56a:	2400      	movs	r4, #0
   1d56c:	e7f7      	b.n	1d55e <net_pkt_clone+0xc6>
		return NULL;
   1d56e:	4604      	mov	r4, r0
   1d570:	e7f5      	b.n	1d55e <net_pkt_clone+0xc6>

0001d572 <net_pkt_init>:

void net_pkt_init(void)
{
   1d572:	4770      	bx	lr

0001d574 <net_value_to_udec>:
	*(ptr - 1) = '\0';
	return buf;
}

static int net_value_to_udec(char *buf, u32_t value, int precision)
{
   1d574:	b470      	push	{r4, r5, r6}
	int i;
	int temp;
	char *start = buf;

	divisor = 1000000000;
	if (precision < 0)
   1d576:	2a00      	cmp	r2, #0
   1d578:	db03      	blt.n	1d582 <net_value_to_udec+0xe>
	for (i = 9; i >= 0; i--, divisor /= 10) {
		temp = value / divisor;
		value = value % divisor;
		if ((precision > i) || (temp != 0)) {
			precision = i;
			*buf++ = (char) (temp + '0');
   1d57a:	4606      	mov	r6, r0
   1d57c:	2409      	movs	r4, #9
   1d57e:	4b0e      	ldr	r3, [pc, #56]	; (1d5b8 <net_value_to_udec+0x44>)
   1d580:	e00a      	b.n	1d598 <net_value_to_udec+0x24>
		precision = 1;
   1d582:	2201      	movs	r2, #1
   1d584:	e7f9      	b.n	1d57a <net_value_to_udec+0x6>
			*buf++ = (char) (temp + '0');
   1d586:	3530      	adds	r5, #48	; 0x30
   1d588:	7035      	strb	r5, [r6, #0]
			precision = i;
   1d58a:	4622      	mov	r2, r4
			*buf++ = (char) (temp + '0');
   1d58c:	3601      	adds	r6, #1
	for (i = 9; i >= 0; i--, divisor /= 10) {
   1d58e:	3c01      	subs	r4, #1
   1d590:	4d0a      	ldr	r5, [pc, #40]	; (1d5bc <net_value_to_udec+0x48>)
   1d592:	fba5 5303 	umull	r5, r3, r5, r3
   1d596:	08db      	lsrs	r3, r3, #3
   1d598:	2c00      	cmp	r4, #0
   1d59a:	db08      	blt.n	1d5ae <net_value_to_udec+0x3a>
		temp = value / divisor;
   1d59c:	fbb1 f5f3 	udiv	r5, r1, r3
		value = value % divisor;
   1d5a0:	fb03 1115 	mls	r1, r3, r5, r1
		if ((precision > i) || (temp != 0)) {
   1d5a4:	42a2      	cmp	r2, r4
   1d5a6:	dcee      	bgt.n	1d586 <net_value_to_udec+0x12>
   1d5a8:	2d00      	cmp	r5, #0
   1d5aa:	d0f0      	beq.n	1d58e <net_value_to_udec+0x1a>
   1d5ac:	e7eb      	b.n	1d586 <net_value_to_udec+0x12>
		}
	}
	*buf = 0;
   1d5ae:	2300      	movs	r3, #0
   1d5b0:	7033      	strb	r3, [r6, #0]

	return buf - start;
}
   1d5b2:	1a30      	subs	r0, r6, r0
   1d5b4:	bc70      	pop	{r4, r5, r6}
   1d5b6:	4770      	bx	lr
   1d5b8:	3b9aca00 	.word	0x3b9aca00
   1d5bc:	cccccccd 	.word	0xcccccccd

0001d5c0 <calc_chksum>:

	return 0;
}

static u16_t calc_chksum(u16_t sum, const u8_t *ptr, u16_t len)
{
   1d5c0:	b410      	push	{r4}
	u16_t tmp;
	const u8_t *end;

	end = ptr + len - 1;
   1d5c2:	3a01      	subs	r2, #1
   1d5c4:	440a      	add	r2, r1

	while (ptr < end) {
   1d5c6:	e000      	b.n	1d5ca <calc_chksum+0xa>
		tmp = (ptr[0] << 8) + ptr[1];
		sum += tmp;
		if (sum < tmp) {
			sum++;
		}
		ptr += 2;
   1d5c8:	3102      	adds	r1, #2
	while (ptr < end) {
   1d5ca:	4291      	cmp	r1, r2
   1d5cc:	d20b      	bcs.n	1d5e6 <calc_chksum+0x26>
		tmp = (ptr[0] << 8) + ptr[1];
   1d5ce:	780c      	ldrb	r4, [r1, #0]
   1d5d0:	784b      	ldrb	r3, [r1, #1]
   1d5d2:	eb03 2304 	add.w	r3, r3, r4, lsl #8
   1d5d6:	b29b      	uxth	r3, r3
		sum += tmp;
   1d5d8:	4418      	add	r0, r3
   1d5da:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d5dc:	4283      	cmp	r3, r0
   1d5de:	d9f3      	bls.n	1d5c8 <calc_chksum+0x8>
			sum++;
   1d5e0:	3001      	adds	r0, #1
   1d5e2:	b280      	uxth	r0, r0
   1d5e4:	e7f0      	b.n	1d5c8 <calc_chksum+0x8>
	}

	if (ptr == end) {
   1d5e6:	d001      	beq.n	1d5ec <calc_chksum+0x2c>
			sum++;
		}
	}

	return sum;
}
   1d5e8:	bc10      	pop	{r4}
   1d5ea:	4770      	bx	lr
		tmp = ptr[0] << 8;
   1d5ec:	780b      	ldrb	r3, [r1, #0]
   1d5ee:	021b      	lsls	r3, r3, #8
		sum += tmp;
   1d5f0:	4418      	add	r0, r3
   1d5f2:	b280      	uxth	r0, r0
		if (sum < tmp) {
   1d5f4:	4283      	cmp	r3, r0
   1d5f6:	d9f7      	bls.n	1d5e8 <calc_chksum+0x28>
			sum++;
   1d5f8:	3001      	adds	r0, #1
   1d5fa:	b280      	uxth	r0, r0
   1d5fc:	e7f4      	b.n	1d5e8 <calc_chksum+0x28>

0001d5fe <convert_port>:
	return false;
}

#if defined(CONFIG_NET_IPV6) || defined(CONFIG_NET_IPV4)
static bool convert_port(const char *buf, u16_t *port)
{
   1d5fe:	b530      	push	{r4, r5, lr}
   1d600:	b083      	sub	sp, #12
   1d602:	4604      	mov	r4, r0
   1d604:	460d      	mov	r5, r1
	unsigned long tmp;
	char *endptr;

	tmp = strtoul(buf, &endptr, 10);
   1d606:	220a      	movs	r2, #10
   1d608:	a901      	add	r1, sp, #4
   1d60a:	f00c ff6d 	bl	2a4e8 <strtoul>
	if ((endptr == buf && tmp == 0) ||
   1d60e:	9b01      	ldr	r3, [sp, #4]
   1d610:	429c      	cmp	r4, r3
   1d612:	d008      	beq.n	1d626 <convert_port+0x28>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d614:	7822      	ldrb	r2, [r4, #0]
	if ((endptr == buf && tmp == 0) ||
   1d616:	b16a      	cbz	r2, 1d634 <convert_port+0x36>
	    !(*buf != '\0' && *endptr == '\0') ||
   1d618:	781b      	ldrb	r3, [r3, #0]
   1d61a:	b973      	cbnz	r3, 1d63a <convert_port+0x3c>
	    ((unsigned long)(unsigned short)tmp != tmp)) {
   1d61c:	b283      	uxth	r3, r0
	    !(*buf != '\0' && *endptr == '\0') ||
   1d61e:	4298      	cmp	r0, r3
   1d620:	d005      	beq.n	1d62e <convert_port+0x30>
		return false;
   1d622:	2000      	movs	r0, #0
   1d624:	e007      	b.n	1d636 <convert_port+0x38>
	if ((endptr == buf && tmp == 0) ||
   1d626:	2800      	cmp	r0, #0
   1d628:	d1f4      	bne.n	1d614 <convert_port+0x16>
		return false;
   1d62a:	2000      	movs	r0, #0
   1d62c:	e003      	b.n	1d636 <convert_port+0x38>
	}

	*port = tmp;
   1d62e:	802b      	strh	r3, [r5, #0]

	return true;
   1d630:	2001      	movs	r0, #1
   1d632:	e000      	b.n	1d636 <convert_port+0x38>
		return false;
   1d634:	2000      	movs	r0, #0
}
   1d636:	b003      	add	sp, #12
   1d638:	bd30      	pop	{r4, r5, pc}
		return false;
   1d63a:	2000      	movs	r0, #0
   1d63c:	e7fb      	b.n	1d636 <convert_port+0x38>

0001d63e <net_byte_to_hex>:
{
   1d63e:	b430      	push	{r4, r5}
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d640:	090c      	lsrs	r4, r1, #4
   1d642:	2500      	movs	r5, #0
   1d644:	e00a      	b.n	1d65c <net_byte_to_hex+0x1e>
		if (i == 0 && !pad && !val) {
   1d646:	b96b      	cbnz	r3, 1d664 <net_byte_to_hex+0x26>
   1d648:	b12c      	cbz	r4, 1d656 <net_byte_to_hex+0x18>
   1d64a:	e00b      	b.n	1d664 <net_byte_to_hex+0x26>
			*ptr++ = (char) (val - 10 + base);
   1d64c:	4414      	add	r4, r2
   1d64e:	b2e4      	uxtb	r4, r4
   1d650:	3c0a      	subs	r4, #10
   1d652:	7004      	strb	r4, [r0, #0]
   1d654:	3001      	adds	r0, #1
	for (i = 0, val = (byte & 0xf0) >> 4; i < 2; i++, val = byte & 0x0f) {
   1d656:	3501      	adds	r5, #1
   1d658:	f001 040f 	and.w	r4, r1, #15
   1d65c:	2d01      	cmp	r5, #1
   1d65e:	dc07      	bgt.n	1d670 <net_byte_to_hex+0x32>
		if (i == 0 && !pad && !val) {
   1d660:	2d00      	cmp	r5, #0
   1d662:	d0f0      	beq.n	1d646 <net_byte_to_hex+0x8>
		if (val < 10) {
   1d664:	2c09      	cmp	r4, #9
   1d666:	dcf1      	bgt.n	1d64c <net_byte_to_hex+0xe>
			*ptr++ = (char) (val + '0');
   1d668:	3430      	adds	r4, #48	; 0x30
   1d66a:	7004      	strb	r4, [r0, #0]
   1d66c:	3001      	adds	r0, #1
   1d66e:	e7f2      	b.n	1d656 <net_byte_to_hex+0x18>
	*ptr = '\0';
   1d670:	2300      	movs	r3, #0
   1d672:	7003      	strb	r3, [r0, #0]
}
   1d674:	bc30      	pop	{r4, r5}
   1d676:	4770      	bx	lr

0001d678 <net_sprint_ll_addr_buf>:
{
   1d678:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d67c:	4607      	mov	r7, r0
   1d67e:	460e      	mov	r6, r1
   1d680:	4690      	mov	r8, r2
	switch (ll_len) {
   1d682:	2906      	cmp	r1, #6
   1d684:	d002      	beq.n	1d68c <net_sprint_ll_addr_buf+0x14>
   1d686:	2908      	cmp	r1, #8
   1d688:	d000      	beq.n	1d68c <net_sprint_ll_addr_buf+0x14>
		len = 6;
   1d68a:	2606      	movs	r6, #6
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d68c:	b2dd      	uxtb	r5, r3
	char *ptr = buf;
   1d68e:	4640      	mov	r0, r8
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d690:	2400      	movs	r4, #0
   1d692:	e00c      	b.n	1d6ae <net_sprint_ll_addr_buf+0x36>
		ptr = net_byte_to_hex(ptr, (char)ll[i], 'A', true);
   1d694:	2301      	movs	r3, #1
   1d696:	2241      	movs	r2, #65	; 0x41
   1d698:	5d39      	ldrb	r1, [r7, r4]
   1d69a:	f7ff ffd0 	bl	1d63e <net_byte_to_hex>
   1d69e:	4602      	mov	r2, r0
		*ptr++ = ':';
   1d6a0:	3001      	adds	r0, #1
   1d6a2:	233a      	movs	r3, #58	; 0x3a
   1d6a4:	7013      	strb	r3, [r2, #0]
		blen -= 3;
   1d6a6:	3d03      	subs	r5, #3
   1d6a8:	b2ed      	uxtb	r5, r5
	for (i = 0, blen = buflen; i < len && blen > 0; i++) {
   1d6aa:	3401      	adds	r4, #1
   1d6ac:	b2e4      	uxtb	r4, r4
   1d6ae:	42b4      	cmp	r4, r6
   1d6b0:	d201      	bcs.n	1d6b6 <net_sprint_ll_addr_buf+0x3e>
   1d6b2:	2d00      	cmp	r5, #0
   1d6b4:	d1ee      	bne.n	1d694 <net_sprint_ll_addr_buf+0x1c>
	if (!(ptr - buf)) {
   1d6b6:	4540      	cmp	r0, r8
   1d6b8:	d005      	beq.n	1d6c6 <net_sprint_ll_addr_buf+0x4e>
	*(ptr - 1) = '\0';
   1d6ba:	2300      	movs	r3, #0
   1d6bc:	f800 3c01 	strb.w	r3, [r0, #-1]
	return buf;
   1d6c0:	4640      	mov	r0, r8
   1d6c2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return NULL;
   1d6c6:	2000      	movs	r0, #0
}
   1d6c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001d6cc <net_addr_ntop>:
{
   1d6cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1d6d0:	b087      	sub	sp, #28
	unsigned char zeros[8] = { 0 };
   1d6d2:	2300      	movs	r3, #0
   1d6d4:	9304      	str	r3, [sp, #16]
   1d6d6:	9305      	str	r3, [sp, #20]
	if (family == AF_INET6) {
   1d6d8:	280a      	cmp	r0, #10
   1d6da:	d011      	beq.n	1d700 <net_addr_ntop+0x34>
	} else if (family == AF_INET) {
   1d6dc:	2802      	cmp	r0, #2
   1d6de:	f040 80c8 	bne.w	1d872 <net_addr_ntop+0x1a6>
		addr = (struct in_addr *)src;
   1d6e2:	9101      	str	r1, [sp, #4]
		len = 4;
   1d6e4:	f04f 0804 	mov.w	r8, #4
		delim = '.';
   1d6e8:	f04f 0b2e 	mov.w	fp, #46	; 0x2e
	s8_t pos = -1;
   1d6ec:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
	u8_t i, bl, bh, longest = 1;
   1d6f0:	f04f 0a01 	mov.w	sl, #1
   1d6f4:	9202      	str	r2, [sp, #8]
   1d6f6:	9003      	str	r0, [sp, #12]
	char *ptr = dst;
   1d6f8:	4616      	mov	r6, r2
	bool needcolon = false;
   1d6fa:	2500      	movs	r5, #0
	for (i = 0; i < len; i++) {
   1d6fc:	462c      	mov	r4, r5
   1d6fe:	e072      	b.n	1d7e6 <net_addr_ntop+0x11a>
		w = (u16_t *)addr6->s6_addr16;
   1d700:	460f      	mov	r7, r1
		for (i = 0; i < 8; i++) {
   1d702:	461d      	mov	r5, r3
   1d704:	e001      	b.n	1d70a <net_addr_ntop+0x3e>
   1d706:	3501      	adds	r5, #1
   1d708:	b2ed      	uxtb	r5, r5
   1d70a:	2d07      	cmp	r5, #7
   1d70c:	d810      	bhi.n	1d730 <net_addr_ntop+0x64>
   1d70e:	462b      	mov	r3, r5
			for (j = i; j < 8; j++) {
   1d710:	2b07      	cmp	r3, #7
   1d712:	d8f8      	bhi.n	1d706 <net_addr_ntop+0x3a>
				if (UNALIGNED_GET(&w[j]) != 0) {
   1d714:	f837 1013 	ldrh.w	r1, [r7, r3, lsl #1]
   1d718:	2900      	cmp	r1, #0
   1d71a:	d1f4      	bne.n	1d706 <net_addr_ntop+0x3a>
				zeros[i]++;
   1d71c:	a906      	add	r1, sp, #24
   1d71e:	194c      	adds	r4, r1, r5
   1d720:	f814 1c08 	ldrb.w	r1, [r4, #-8]
   1d724:	3101      	adds	r1, #1
   1d726:	f804 1c08 	strb.w	r1, [r4, #-8]
			for (j = i; j < 8; j++) {
   1d72a:	3301      	adds	r3, #1
   1d72c:	b2db      	uxtb	r3, r3
   1d72e:	e7ef      	b.n	1d710 <net_addr_ntop+0x44>
   1d730:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d734:	f04f 0a01 	mov.w	sl, #1
   1d738:	2300      	movs	r3, #0
   1d73a:	e001      	b.n	1d740 <net_addr_ntop+0x74>
		for (i = 0; i < 8; i++) {
   1d73c:	3301      	adds	r3, #1
   1d73e:	b2db      	uxtb	r3, r3
   1d740:	2b07      	cmp	r3, #7
   1d742:	d809      	bhi.n	1d758 <net_addr_ntop+0x8c>
			if (zeros[i] > longest) {
   1d744:	a906      	add	r1, sp, #24
   1d746:	4419      	add	r1, r3
   1d748:	f811 1c08 	ldrb.w	r1, [r1, #-8]
   1d74c:	458a      	cmp	sl, r1
   1d74e:	d2f5      	bcs.n	1d73c <net_addr_ntop+0x70>
				pos = i;
   1d750:	fa4f f983 	sxtb.w	r9, r3
				longest = zeros[i];
   1d754:	468a      	mov	sl, r1
   1d756:	e7f1      	b.n	1d73c <net_addr_ntop+0x70>
		if (longest == 1) {
   1d758:	f1ba 0f01 	cmp.w	sl, #1
   1d75c:	d004      	beq.n	1d768 <net_addr_ntop+0x9c>
		len = 8;
   1d75e:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d762:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
   1d766:	e7c5      	b.n	1d6f4 <net_addr_ntop+0x28>
		len = 8;
   1d768:	f04f 0808 	mov.w	r8, #8
	char delim = ':';
   1d76c:	f04f 0b3a 	mov.w	fp, #58	; 0x3a
			pos = -1;
   1d770:	f04f 39ff 	mov.w	r9, #4294967295	; 0xffffffff
   1d774:	e7be      	b.n	1d6f4 <net_addr_ntop+0x28>
			value = (u32_t)addr->s4_addr[i];
   1d776:	9a01      	ldr	r2, [sp, #4]
   1d778:	5cd1      	ldrb	r1, [r2, r3]
   1d77a:	b28b      	uxth	r3, r1
			if (value == 0) {
   1d77c:	b93b      	cbnz	r3, 1d78e <net_addr_ntop+0xc2>
				*ptr++ = '0';
   1d77e:	4633      	mov	r3, r6
   1d780:	2230      	movs	r2, #48	; 0x30
   1d782:	f803 2b02 	strb.w	r2, [r3], #2
				*ptr++ = delim;
   1d786:	f886 b001 	strb.w	fp, [r6, #1]
   1d78a:	461e      	mov	r6, r3
				continue;
   1d78c:	e029      	b.n	1d7e2 <net_addr_ntop+0x116>
			l = net_value_to_udec(ptr, value, 0);
   1d78e:	2200      	movs	r2, #0
   1d790:	4630      	mov	r0, r6
   1d792:	f7ff feef 	bl	1d574 <net_value_to_udec>
			ptr += l;
   1d796:	fa56 f080 	uxtab	r0, r6, r0
			*ptr++ = delim;
   1d79a:	1c46      	adds	r6, r0, #1
   1d79c:	f880 b000 	strb.w	fp, [r0]
			continue;
   1d7a0:	e01f      	b.n	1d7e2 <net_addr_ntop+0x116>
			if (needcolon || i == 0) {
   1d7a2:	b905      	cbnz	r5, 1d7a6 <net_addr_ntop+0xda>
   1d7a4:	b95c      	cbnz	r4, 1d7be <net_addr_ntop+0xf2>
				*ptr++ = ':';
   1d7a6:	1c73      	adds	r3, r6, #1
   1d7a8:	223a      	movs	r2, #58	; 0x3a
   1d7aa:	7032      	strb	r2, [r6, #0]
			*ptr++ = ':';
   1d7ac:	1c5e      	adds	r6, r3, #1
   1d7ae:	223a      	movs	r2, #58	; 0x3a
   1d7b0:	701a      	strb	r2, [r3, #0]
			i += longest - 1;
   1d7b2:	4454      	add	r4, sl
   1d7b4:	b2e4      	uxtb	r4, r4
   1d7b6:	3c01      	subs	r4, #1
   1d7b8:	b2e4      	uxtb	r4, r4
			needcolon = false;
   1d7ba:	2500      	movs	r5, #0
			continue;
   1d7bc:	e011      	b.n	1d7e2 <net_addr_ntop+0x116>
   1d7be:	4633      	mov	r3, r6
   1d7c0:	e7f4      	b.n	1d7ac <net_addr_ntop+0xe0>
				ptr = net_byte_to_hex(ptr, bh, 'a', false);
   1d7c2:	2300      	movs	r3, #0
   1d7c4:	2261      	movs	r2, #97	; 0x61
   1d7c6:	4630      	mov	r0, r6
   1d7c8:	f7ff ff39 	bl	1d63e <net_byte_to_hex>
   1d7cc:	e002      	b.n	1d7d4 <net_addr_ntop+0x108>
					*ptr++ = (char) (bh - 10 + 'a');
   1d7ce:	1c70      	adds	r0, r6, #1
   1d7d0:	3157      	adds	r1, #87	; 0x57
   1d7d2:	7031      	strb	r1, [r6, #0]
			ptr = net_byte_to_hex(ptr, bl, 'a', true);
   1d7d4:	2301      	movs	r3, #1
   1d7d6:	2261      	movs	r2, #97	; 0x61
   1d7d8:	4629      	mov	r1, r5
   1d7da:	f7ff ff30 	bl	1d63e <net_byte_to_hex>
   1d7de:	4606      	mov	r6, r0
		needcolon = true;
   1d7e0:	2501      	movs	r5, #1
	for (i = 0; i < len; i++) {
   1d7e2:	3401      	adds	r4, #1
   1d7e4:	b2e4      	uxtb	r4, r4
   1d7e6:	4623      	mov	r3, r4
   1d7e8:	45a0      	cmp	r8, r4
   1d7ea:	dd31      	ble.n	1d850 <net_addr_ntop+0x184>
		if (len == 4) {
   1d7ec:	f1b8 0f04 	cmp.w	r8, #4
   1d7f0:	d0c1      	beq.n	1d776 <net_addr_ntop+0xaa>
		if (i == pos) {
   1d7f2:	454b      	cmp	r3, r9
   1d7f4:	d0d5      	beq.n	1d7a2 <net_addr_ntop+0xd6>
		if (needcolon) {
   1d7f6:	b115      	cbz	r5, 1d7fe <net_addr_ntop+0x132>
			*ptr++ = ':';
   1d7f8:	233a      	movs	r3, #58	; 0x3a
   1d7fa:	7033      	strb	r3, [r6, #0]
   1d7fc:	3601      	adds	r6, #1
		value = (u32_t)sys_be16_to_cpu(UNALIGNED_GET(&w[i]));
   1d7fe:	f837 3014 	ldrh.w	r3, [r7, r4, lsl #1]
   1d802:	021d      	lsls	r5, r3, #8
   1d804:	ea45 2513 	orr.w	r5, r5, r3, lsr #8
   1d808:	b22d      	sxth	r5, r5
		bh = value >> 8;
   1d80a:	f3c5 2107 	ubfx	r1, r5, #8, #8
		bl = value & 0xff;
   1d80e:	b2ed      	uxtb	r5, r5
		if (bh) {
   1d810:	b139      	cbz	r1, 1d822 <net_addr_ntop+0x156>
			if (bh > 0x0f) {
   1d812:	290f      	cmp	r1, #15
   1d814:	d8d5      	bhi.n	1d7c2 <net_addr_ntop+0xf6>
				if (bh < 10) {
   1d816:	2909      	cmp	r1, #9
   1d818:	d8d9      	bhi.n	1d7ce <net_addr_ntop+0x102>
					*ptr++ = (char)(bh + '0');
   1d81a:	1c70      	adds	r0, r6, #1
   1d81c:	3130      	adds	r1, #48	; 0x30
   1d81e:	7031      	strb	r1, [r6, #0]
   1d820:	e7d8      	b.n	1d7d4 <net_addr_ntop+0x108>
		} else if (bl > 0x0f) {
   1d822:	2d0f      	cmp	r5, #15
   1d824:	d806      	bhi.n	1d834 <net_addr_ntop+0x168>
			if (bl < 10) {
   1d826:	2d09      	cmp	r5, #9
   1d828:	d80d      	bhi.n	1d846 <net_addr_ntop+0x17a>
				*ptr++ = (char)(bl + '0');
   1d82a:	3530      	adds	r5, #48	; 0x30
   1d82c:	7035      	strb	r5, [r6, #0]
   1d82e:	3601      	adds	r6, #1
		needcolon = true;
   1d830:	2501      	movs	r5, #1
   1d832:	e7d6      	b.n	1d7e2 <net_addr_ntop+0x116>
			ptr = net_byte_to_hex(ptr, bl, 'a', false);
   1d834:	2300      	movs	r3, #0
   1d836:	2261      	movs	r2, #97	; 0x61
   1d838:	4629      	mov	r1, r5
   1d83a:	4630      	mov	r0, r6
   1d83c:	f7ff feff 	bl	1d63e <net_byte_to_hex>
   1d840:	4606      	mov	r6, r0
		needcolon = true;
   1d842:	2501      	movs	r5, #1
   1d844:	e7cd      	b.n	1d7e2 <net_addr_ntop+0x116>
				*ptr++ = (char) (bl - 10 + 'a');
   1d846:	3557      	adds	r5, #87	; 0x57
   1d848:	7035      	strb	r5, [r6, #0]
   1d84a:	3601      	adds	r6, #1
		needcolon = true;
   1d84c:	2501      	movs	r5, #1
   1d84e:	e7c8      	b.n	1d7e2 <net_addr_ntop+0x116>
	if (!(ptr - dst)) {
   1d850:	9b02      	ldr	r3, [sp, #8]
   1d852:	429e      	cmp	r6, r3
   1d854:	d00f      	beq.n	1d876 <net_addr_ntop+0x1aa>
	if (family == AF_INET) {
   1d856:	9b03      	ldr	r3, [sp, #12]
   1d858:	2b02      	cmp	r3, #2
   1d85a:	d005      	beq.n	1d868 <net_addr_ntop+0x19c>
		*ptr = '\0';
   1d85c:	2300      	movs	r3, #0
   1d85e:	7033      	strb	r3, [r6, #0]
	return dst;
   1d860:	9802      	ldr	r0, [sp, #8]
}
   1d862:	b007      	add	sp, #28
   1d864:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		*(ptr - 1) = '\0';
   1d868:	2300      	movs	r3, #0
   1d86a:	f806 3c01 	strb.w	r3, [r6, #-1]
	return dst;
   1d86e:	9802      	ldr	r0, [sp, #8]
   1d870:	e7f7      	b.n	1d862 <net_addr_ntop+0x196>
		return NULL;
   1d872:	2000      	movs	r0, #0
   1d874:	e7f5      	b.n	1d862 <net_addr_ntop+0x196>
		return NULL;
   1d876:	2000      	movs	r0, #0
   1d878:	e7f3      	b.n	1d862 <net_addr_ntop+0x196>

0001d87a <net_addr_pton>:
{
   1d87a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1d87e:	b082      	sub	sp, #8
   1d880:	460d      	mov	r5, r1
   1d882:	4616      	mov	r6, r2
	if (family == AF_INET) {
   1d884:	2802      	cmp	r0, #2
   1d886:	d010      	beq.n	1d8aa <net_addr_pton+0x30>
	} else if (family == AF_INET6) {
   1d888:	280a      	cmp	r0, #10
   1d88a:	f040 80c6 	bne.w	1da1a <net_addr_pton+0x1a0>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d88e:	212e      	movs	r1, #46	; 0x2e
   1d890:	4628      	mov	r0, r5
   1d892:	f00c f90f 	bl	29ab4 <strchr>
   1d896:	b378      	cbz	r0, 1d8f8 <net_addr_pton+0x7e>
   1d898:	2706      	movs	r7, #6
		if (*src == ':') {
   1d89a:	782b      	ldrb	r3, [r5, #0]
   1d89c:	2b3a      	cmp	r3, #58	; 0x3a
   1d89e:	d02d      	beq.n	1d8fc <net_addr_pton+0x82>
		len = strlen(src);
   1d8a0:	4628      	mov	r0, r5
   1d8a2:	f7e2 ff2d 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d8a6:	2300      	movs	r3, #0
   1d8a8:	e02b      	b.n	1d902 <net_addr_pton+0x88>
		len = strlen(src);
   1d8aa:	4608      	mov	r0, r1
   1d8ac:	f7e2 ff28 	bl	700 <strlen>
		for (i = 0; i < len; i++) {
   1d8b0:	2300      	movs	r3, #0
   1d8b2:	e000      	b.n	1d8b6 <net_addr_pton+0x3c>
   1d8b4:	3301      	adds	r3, #1
   1d8b6:	4283      	cmp	r3, r0
   1d8b8:	d20a      	bcs.n	1d8d0 <net_addr_pton+0x56>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d8ba:	5ce9      	ldrb	r1, [r5, r3]
   1d8bc:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d8c0:	b2d2      	uxtb	r2, r2
   1d8c2:	2a09      	cmp	r2, #9
   1d8c4:	d9f6      	bls.n	1d8b4 <net_addr_pton+0x3a>
   1d8c6:	292e      	cmp	r1, #46	; 0x2e
   1d8c8:	d0f4      	beq.n	1d8b4 <net_addr_pton+0x3a>
				return -EINVAL;
   1d8ca:	f06f 0015 	mvn.w	r0, #21
   1d8ce:	e0a9      	b.n	1da24 <net_addr_pton+0x1aa>
		memset(addr, 0, sizeof(struct in_addr));
   1d8d0:	2204      	movs	r2, #4
   1d8d2:	2100      	movs	r1, #0
   1d8d4:	4630      	mov	r0, r6
   1d8d6:	f00c f85f 	bl	29998 <memset>
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8da:	2400      	movs	r4, #0
   1d8dc:	e008      	b.n	1d8f0 <net_addr_pton+0x76>
			addr->s4_addr[i] = strtol(src, &endptr, 10);
   1d8de:	220a      	movs	r2, #10
   1d8e0:	a901      	add	r1, sp, #4
   1d8e2:	4628      	mov	r0, r5
   1d8e4:	f00c fd46 	bl	2a374 <strtol>
   1d8e8:	5530      	strb	r0, [r6, r4]
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8ea:	3401      	adds	r4, #1
			src = ++endptr;
   1d8ec:	9d01      	ldr	r5, [sp, #4]
   1d8ee:	3501      	adds	r5, #1
		for (i = 0; i < sizeof(struct in_addr); i++) {
   1d8f0:	2c03      	cmp	r4, #3
   1d8f2:	d9f4      	bls.n	1d8de <net_addr_pton+0x64>
	return 0;
   1d8f4:	2000      	movs	r0, #0
   1d8f6:	e095      	b.n	1da24 <net_addr_pton+0x1aa>
		int expected_groups = strchr(src, '.') ? 6 : 8;
   1d8f8:	2708      	movs	r7, #8
   1d8fa:	e7ce      	b.n	1d89a <net_addr_pton+0x20>
			src++;
   1d8fc:	3501      	adds	r5, #1
   1d8fe:	e7cf      	b.n	1d8a0 <net_addr_pton+0x26>
		for (i = 0; i < len; i++) {
   1d900:	3301      	adds	r3, #1
   1d902:	4283      	cmp	r3, r0
   1d904:	da16      	bge.n	1d934 <net_addr_pton+0xba>
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d906:	5ce9      	ldrb	r1, [r5, r3]
   1d908:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   1d90c:	b2d2      	uxtb	r2, r2
   1d90e:	2a09      	cmp	r2, #9
   1d910:	d9f6      	bls.n	1d900 <net_addr_pton+0x86>
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d912:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   1d916:	b2d2      	uxtb	r2, r2
			if (!(src[i] >= '0' && src[i] <= '9') &&
   1d918:	2a05      	cmp	r2, #5
   1d91a:	d9f1      	bls.n	1d900 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d91c:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   1d920:	b2d2      	uxtb	r2, r2
			    !(src[i] >= 'A' && src[i] <= 'F') &&
   1d922:	2a05      	cmp	r2, #5
   1d924:	d9ec      	bls.n	1d900 <net_addr_pton+0x86>
			    !(src[i] >= 'a' && src[i] <= 'f') &&
   1d926:	292e      	cmp	r1, #46	; 0x2e
   1d928:	d0ea      	beq.n	1d900 <net_addr_pton+0x86>
			    src[i] != '.' && src[i] != ':')
   1d92a:	293a      	cmp	r1, #58	; 0x3a
   1d92c:	d0e8      	beq.n	1d900 <net_addr_pton+0x86>
				return -EINVAL;
   1d92e:	f06f 0015 	mvn.w	r0, #21
   1d932:	e077      	b.n	1da24 <net_addr_pton+0x1aa>
   1d934:	2400      	movs	r4, #0
   1d936:	e001      	b.n	1d93c <net_addr_pton+0xc2>
				src++;
   1d938:	3501      	adds	r5, #1
		for (i = 0; i < expected_groups; i++) {
   1d93a:	3401      	adds	r4, #1
   1d93c:	42bc      	cmp	r4, r7
   1d93e:	da3c      	bge.n	1d9ba <net_addr_pton+0x140>
			if (!src || *src == '\0') {
   1d940:	2d00      	cmp	r5, #0
   1d942:	d06d      	beq.n	1da20 <net_addr_pton+0x1a6>
   1d944:	782b      	ldrb	r3, [r5, #0]
   1d946:	2b00      	cmp	r3, #0
   1d948:	d06f      	beq.n	1da2a <net_addr_pton+0x1b0>
			if (*src != ':') {
   1d94a:	2b3a      	cmp	r3, #58	; 0x3a
   1d94c:	d023      	beq.n	1d996 <net_addr_pton+0x11c>
				UNALIGNED_PUT(htons(strtol(src, NULL, 16)),
   1d94e:	2210      	movs	r2, #16
   1d950:	2100      	movs	r1, #0
   1d952:	4628      	mov	r0, r5
   1d954:	f00c fd0e 	bl	2a374 <strtol>
   1d958:	f3c0 2807 	ubfx	r8, r0, #8, #8
   1d95c:	2210      	movs	r2, #16
   1d95e:	2100      	movs	r1, #0
   1d960:	4628      	mov	r0, r5
   1d962:	f00c fd07 	bl	2a374 <strtol>
   1d966:	ea48 2000 	orr.w	r0, r8, r0, lsl #8
   1d96a:	f826 0014 	strh.w	r0, [r6, r4, lsl #1]
				src = strchr(src, ':');
   1d96e:	213a      	movs	r1, #58	; 0x3a
   1d970:	4628      	mov	r0, r5
   1d972:	f00c f89f 	bl	29ab4 <strchr>
				if (!src && i < expected_groups - 1) {
   1d976:	4605      	mov	r5, r0
   1d978:	2800      	cmp	r0, #0
   1d97a:	d1dd      	bne.n	1d938 <net_addr_pton+0xbe>
   1d97c:	1e7b      	subs	r3, r7, #1
   1d97e:	429c      	cmp	r4, r3
   1d980:	dada      	bge.n	1d938 <net_addr_pton+0xbe>
					return -EINVAL;
   1d982:	f06f 0015 	mvn.w	r0, #21
   1d986:	e04d      	b.n	1da24 <net_addr_pton+0x1aa>
				UNALIGNED_PUT(0, &addr->s6_addr16[i]);
   1d988:	eb06 0244 	add.w	r2, r6, r4, lsl #1
   1d98c:	2300      	movs	r3, #0
   1d98e:	f806 3014 	strb.w	r3, [r6, r4, lsl #1]
   1d992:	7053      	strb	r3, [r2, #1]
			for (; i < expected_groups; i++) {
   1d994:	3401      	adds	r4, #1
   1d996:	42bc      	cmp	r4, r7
   1d998:	dbf6      	blt.n	1d988 <net_addr_pton+0x10e>
			tmp = strrchr(src, ':');
   1d99a:	213a      	movs	r1, #58	; 0x3a
   1d99c:	4628      	mov	r0, r5
   1d99e:	f00c f9df 	bl	29d60 <strrchr>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d9a2:	4285      	cmp	r5, r0
   1d9a4:	d003      	beq.n	1d9ae <net_addr_pton+0x134>
			if (expected_groups == 6) {
   1d9a6:	2f06      	cmp	r7, #6
   1d9a8:	d00b      	beq.n	1d9c2 <net_addr_pton+0x148>
			i = expected_groups - 1;
   1d9aa:	1e7c      	subs	r4, r7, #1
   1d9ac:	e00f      	b.n	1d9ce <net_addr_pton+0x154>
			if (src == tmp && (expected_groups == 6 || !src[1])) {
   1d9ae:	2f06      	cmp	r7, #6
   1d9b0:	d002      	beq.n	1d9b8 <net_addr_pton+0x13e>
   1d9b2:	786b      	ldrb	r3, [r5, #1]
   1d9b4:	2b00      	cmp	r3, #0
   1d9b6:	d1f6      	bne.n	1d9a6 <net_addr_pton+0x12c>
				src++;
   1d9b8:	3501      	adds	r5, #1
		if (expected_groups == 6) {
   1d9ba:	2f06      	cmp	r7, #6
   1d9bc:	d029      	beq.n	1da12 <net_addr_pton+0x198>
	return 0;
   1d9be:	2000      	movs	r0, #0
   1d9c0:	e030      	b.n	1da24 <net_addr_pton+0x1aa>
				tmp--;
   1d9c2:	3801      	subs	r0, #1
   1d9c4:	e7f1      	b.n	1d9aa <net_addr_pton+0x130>
			} while (tmp-- != src);
   1d9c6:	1e43      	subs	r3, r0, #1
   1d9c8:	4285      	cmp	r5, r0
   1d9ca:	d005      	beq.n	1d9d8 <net_addr_pton+0x15e>
   1d9cc:	4618      	mov	r0, r3
				if (*tmp == ':') {
   1d9ce:	7803      	ldrb	r3, [r0, #0]
   1d9d0:	2b3a      	cmp	r3, #58	; 0x3a
   1d9d2:	d1f8      	bne.n	1d9c6 <net_addr_pton+0x14c>
					i--;
   1d9d4:	3c01      	subs	r4, #1
   1d9d6:	e7f6      	b.n	1d9c6 <net_addr_pton+0x14c>
			src++;
   1d9d8:	3501      	adds	r5, #1
   1d9da:	e7ae      	b.n	1d93a <net_addr_pton+0xc0>
				src++;
   1d9dc:	3501      	adds	r5, #1
			for (i = 0; i < 4; i++) {
   1d9de:	3401      	adds	r4, #1
   1d9e0:	2c03      	cmp	r4, #3
   1d9e2:	dc18      	bgt.n	1da16 <net_addr_pton+0x19c>
				if (!src || !*src) {
   1d9e4:	b325      	cbz	r5, 1da30 <net_addr_pton+0x1b6>
   1d9e6:	782b      	ldrb	r3, [r5, #0]
   1d9e8:	b32b      	cbz	r3, 1da36 <net_addr_pton+0x1bc>
				addr->s6_addr[12 + i] = strtol(src, NULL, 10);
   1d9ea:	f104 070c 	add.w	r7, r4, #12
   1d9ee:	220a      	movs	r2, #10
   1d9f0:	2100      	movs	r1, #0
   1d9f2:	4628      	mov	r0, r5
   1d9f4:	f00c fcbe 	bl	2a374 <strtol>
   1d9f8:	55f0      	strb	r0, [r6, r7]
				src = strchr(src, '.');
   1d9fa:	212e      	movs	r1, #46	; 0x2e
   1d9fc:	4628      	mov	r0, r5
   1d9fe:	f00c f859 	bl	29ab4 <strchr>
				if (!src && i < 3) {
   1da02:	4605      	mov	r5, r0
   1da04:	2800      	cmp	r0, #0
   1da06:	d1e9      	bne.n	1d9dc <net_addr_pton+0x162>
   1da08:	2c02      	cmp	r4, #2
   1da0a:	dce7      	bgt.n	1d9dc <net_addr_pton+0x162>
					return -EINVAL;
   1da0c:	f06f 0015 	mvn.w	r0, #21
   1da10:	e008      	b.n	1da24 <net_addr_pton+0x1aa>
   1da12:	2400      	movs	r4, #0
   1da14:	e7e4      	b.n	1d9e0 <net_addr_pton+0x166>
	return 0;
   1da16:	2000      	movs	r0, #0
   1da18:	e004      	b.n	1da24 <net_addr_pton+0x1aa>
		return -EINVAL;
   1da1a:	f06f 0015 	mvn.w	r0, #21
   1da1e:	e001      	b.n	1da24 <net_addr_pton+0x1aa>
				return -EINVAL;
   1da20:	f06f 0015 	mvn.w	r0, #21
}
   1da24:	b002      	add	sp, #8
   1da26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
				return -EINVAL;
   1da2a:	f06f 0015 	mvn.w	r0, #21
   1da2e:	e7f9      	b.n	1da24 <net_addr_pton+0x1aa>
					return -EINVAL;
   1da30:	f06f 0015 	mvn.w	r0, #21
   1da34:	e7f6      	b.n	1da24 <net_addr_pton+0x1aa>
   1da36:	f06f 0015 	mvn.w	r0, #21
   1da3a:	e7f3      	b.n	1da24 <net_addr_pton+0x1aa>

0001da3c <parse_ipv6>:
#endif /* CONFIG_NET_IPV6 || CONFIG_NET_IPV4 */

#if defined(CONFIG_NET_IPV6)
static bool parse_ipv6(const char *str, size_t str_len,
		       struct sockaddr *addr, bool has_port)
{
   1da3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1da40:	b08f      	sub	sp, #60	; 0x3c
   1da42:	4605      	mov	r5, r0
   1da44:	4688      	mov	r8, r1
   1da46:	4617      	mov	r7, r2
   1da48:	461e      	mov	r6, r3
	struct in6_addr *addr6;
	char ipaddr[INET6_ADDRSTRLEN + 1];
	int end, len, ret, i;
	u16_t port;

	len = min(INET6_ADDRSTRLEN, str_len);
   1da4a:	460c      	mov	r4, r1
   1da4c:	292e      	cmp	r1, #46	; 0x2e
   1da4e:	bf28      	it	cs
   1da50:	242e      	movcs	r4, #46	; 0x2e

	for (i = 0; i < len; i++) {
   1da52:	2300      	movs	r3, #0
   1da54:	42a3      	cmp	r3, r4
   1da56:	da04      	bge.n	1da62 <parse_ipv6+0x26>
		if (!str[i]) {
   1da58:	5cea      	ldrb	r2, [r5, r3]
   1da5a:	b10a      	cbz	r2, 1da60 <parse_ipv6+0x24>
	for (i = 0; i < len; i++) {
   1da5c:	3301      	adds	r3, #1
   1da5e:	e7f9      	b.n	1da54 <parse_ipv6+0x18>
			len = i;
   1da60:	461c      	mov	r4, r3
			break;
		}
	}

	if (has_port) {
   1da62:	b18e      	cbz	r6, 1da88 <parse_ipv6+0x4c>
		/* IPv6 address with port number */
		ptr = memchr(str, ']', len);
   1da64:	4622      	mov	r2, r4
   1da66:	215d      	movs	r1, #93	; 0x5d
   1da68:	4628      	mov	r0, r5
   1da6a:	f7e2 fbd9 	bl	220 <memchr>
		if (!ptr) {
   1da6e:	4681      	mov	r9, r0
   1da70:	2800      	cmp	r0, #0
   1da72:	d043      	beq.n	1dafc <parse_ipv6+0xc0>
			return false;
		}

		end = min(len, ptr - (str + 1));
   1da74:	1c69      	adds	r1, r5, #1
   1da76:	1a43      	subs	r3, r0, r1
   1da78:	429c      	cmp	r4, r3
   1da7a:	bfa8      	it	ge
   1da7c:	461c      	movge	r4, r3
		memcpy(ipaddr, str + 1, end);
   1da7e:	4622      	mov	r2, r4
   1da80:	a802      	add	r0, sp, #8
   1da82:	f7e2 fc1d 	bl	2c0 <memcpy>
   1da86:	e006      	b.n	1da96 <parse_ipv6+0x5a>
	} else {
		end = len;
		memcpy(ipaddr, str, end);
   1da88:	4622      	mov	r2, r4
   1da8a:	4629      	mov	r1, r5
   1da8c:	a802      	add	r0, sp, #8
   1da8e:	f7e2 fc17 	bl	2c0 <memcpy>
	char *ptr = NULL;
   1da92:	f04f 0900 	mov.w	r9, #0
	}

	ipaddr[end] = '\0';
   1da96:	2200      	movs	r2, #0
   1da98:	ab0e      	add	r3, sp, #56	; 0x38
   1da9a:	4423      	add	r3, r4
   1da9c:	f803 2c30 	strb.w	r2, [r3, #-48]

	addr6 = &net_sin6(addr)->sin6_addr;

	ret = net_addr_pton(AF_INET6, ipaddr, addr6);
   1daa0:	1d3a      	adds	r2, r7, #4
   1daa2:	a902      	add	r1, sp, #8
   1daa4:	200a      	movs	r0, #10
   1daa6:	f7ff fee8 	bl	1d87a <net_addr_pton>
	if (ret < 0) {
   1daaa:	2800      	cmp	r0, #0
   1daac:	db28      	blt.n	1db00 <parse_ipv6+0xc4>
		return false;
	}

	net_sin6(addr)->sin6_family = AF_INET6;
   1daae:	230a      	movs	r3, #10
   1dab0:	803b      	strh	r3, [r7, #0]

	if (!has_port) {
   1dab2:	b33e      	cbz	r6, 1db04 <parse_ipv6+0xc8>
		return true;
	}

	if ((ptr + 1) < (str + str_len) && *(ptr + 1) == ':') {
   1dab4:	f109 0301 	add.w	r3, r9, #1
   1dab8:	4445      	add	r5, r8
   1daba:	42ab      	cmp	r3, r5
   1dabc:	d223      	bcs.n	1db06 <parse_ipv6+0xca>
   1dabe:	f899 3001 	ldrb.w	r3, [r9, #1]
   1dac2:	2b3a      	cmp	r3, #58	; 0x3a
   1dac4:	d11f      	bne.n	1db06 <parse_ipv6+0xca>
		len = str_len - end;
   1dac6:	eba8 0404 	sub.w	r4, r8, r4

		/* Re-use the ipaddr buf for port conversion */
		memcpy(ipaddr, ptr + 2, len);
   1daca:	4622      	mov	r2, r4
   1dacc:	f109 0102 	add.w	r1, r9, #2
   1dad0:	a802      	add	r0, sp, #8
   1dad2:	f7e2 fbf5 	bl	2c0 <memcpy>
		ipaddr[len] = '\0';
   1dad6:	ab0e      	add	r3, sp, #56	; 0x38
   1dad8:	441c      	add	r4, r3
   1dada:	2300      	movs	r3, #0
   1dadc:	f804 3c30 	strb.w	r3, [r4, #-48]

		ret = convert_port(ipaddr, &port);
   1dae0:	f10d 0106 	add.w	r1, sp, #6
   1dae4:	a802      	add	r0, sp, #8
   1dae6:	f7ff fd8a 	bl	1d5fe <convert_port>
		if (!ret) {
   1daea:	4606      	mov	r6, r0
   1daec:	b158      	cbz	r0, 1db06 <parse_ipv6+0xca>
			return false;
		}

		net_sin6(addr)->sin6_port = htons(port);
   1daee:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   1daf2:	0a13      	lsrs	r3, r2, #8
   1daf4:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   1daf8:	807b      	strh	r3, [r7, #2]
   1dafa:	e004      	b.n	1db06 <parse_ipv6+0xca>
			return false;
   1dafc:	2600      	movs	r6, #0
   1dafe:	e002      	b.n	1db06 <parse_ipv6+0xca>
		return false;
   1db00:	2600      	movs	r6, #0
   1db02:	e000      	b.n	1db06 <parse_ipv6+0xca>
		return true;
   1db04:	2601      	movs	r6, #1
			net_addr_ntop(AF_INET6, addr6,
				      ipaddr, sizeof(ipaddr) - 1));
	}

	return true;
}
   1db06:	4630      	mov	r0, r6
   1db08:	b00f      	add	sp, #60	; 0x3c
   1db0a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

0001db0e <net_calc_chksum>:
	return pkt->family;
   1db0e:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1db12:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	switch (net_pkt_family(pkt)) {
   1db16:	2b0a      	cmp	r3, #10
   1db18:	d001      	beq.n	1db1e <net_calc_chksum+0x10>
		return 0;
   1db1a:	2000      	movs	r0, #0
   1db1c:	4770      	bx	lr
{
   1db1e:	b5f0      	push	{r4, r5, r6, r7, lr}
   1db20:	b085      	sub	sp, #20
   1db22:	4604      	mov	r4, r0
	return pkt->frags->data;
   1db24:	6885      	ldr	r5, [r0, #8]
   1db26:	68a8      	ldr	r0, [r5, #8]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1db28:	7902      	ldrb	r2, [r0, #4]
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1db2a:	7943      	ldrb	r3, [r0, #5]
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1db2c:	eb03 2302 	add.w	r3, r3, r2, lsl #8
   1db30:	b29b      	uxth	r3, r3
			NET_IPV6_HDR(pkt)->len[1] - net_pkt_ipv6_ext_len(pkt);
   1db32:	f894 703b 	ldrb.w	r7, [r4, #59]	; 0x3b
		upper_layer_len = (NET_IPV6_HDR(pkt)->len[0] << 8) +
   1db36:	1bdb      	subs	r3, r3, r7
		sum = calc_chksum(upper_layer_len + proto,
   1db38:	fa11 f383 	uxtah	r3, r1, r3
   1db3c:	2220      	movs	r2, #32
   1db3e:	f100 0108 	add.w	r1, r0, #8
   1db42:	b298      	uxth	r0, r3
   1db44:	f7ff fd3c 	bl	1d5c0 <calc_chksum>
   1db48:	4606      	mov	r6, r0
	u16_t proto_len = net_pkt_ip_hdr_len(pkt) +
   1db4a:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
	return net_frag_read(frag, offset, pos, len, NULL);
   1db4e:	2300      	movs	r3, #0
   1db50:	9300      	str	r3, [sp, #0]
   1db52:	f10d 020e 	add.w	r2, sp, #14
   1db56:	4439      	add	r1, r7
   1db58:	4628      	mov	r0, r5
   1db5a:	f7ff faec 	bl	1d136 <net_frag_read>
	if (!frag) {
   1db5e:	4605      	mov	r5, r0
   1db60:	b318      	cbz	r0, 1dbaa <net_calc_chksum+0x9c>
	ptr = frag->data + offset;
   1db62:	6881      	ldr	r1, [r0, #8]
   1db64:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   1db68:	4419      	add	r1, r3
	len = frag->len - offset;
   1db6a:	8984      	ldrh	r4, [r0, #12]
   1db6c:	1ae4      	subs	r4, r4, r3
   1db6e:	b224      	sxth	r4, r4
   1db70:	e003      	b.n	1db7a <net_calc_chksum+0x6c>
			len = frag->len - 1;
   1db72:	89ac      	ldrh	r4, [r5, #12]
   1db74:	3c01      	subs	r4, #1
   1db76:	b224      	sxth	r4, r4
			ptr++;
   1db78:	3101      	adds	r1, #1
	while (frag) {
   1db7a:	b1bd      	cbz	r5, 1dbac <net_calc_chksum+0x9e>
		sum = calc_chksum(sum, ptr, len);
   1db7c:	b2a4      	uxth	r4, r4
   1db7e:	4622      	mov	r2, r4
   1db80:	4630      	mov	r0, r6
   1db82:	f7ff fd1d 	bl	1d5c0 <calc_chksum>
   1db86:	4606      	mov	r6, r0
		frag = frag->frags;
   1db88:	682d      	ldr	r5, [r5, #0]
		if (!frag) {
   1db8a:	b17d      	cbz	r5, 1dbac <net_calc_chksum+0x9e>
		ptr = frag->data;
   1db8c:	68a9      	ldr	r1, [r5, #8]
		if (len % 2) {
   1db8e:	f014 0f01 	tst.w	r4, #1
   1db92:	d007      	beq.n	1dba4 <net_calc_chksum+0x96>
			u16_t tmp = *ptr;
   1db94:	780b      	ldrb	r3, [r1, #0]
			sum += tmp;
   1db96:	441e      	add	r6, r3
   1db98:	b2b6      	uxth	r6, r6
			if (sum < tmp) {
   1db9a:	42b3      	cmp	r3, r6
   1db9c:	d9e9      	bls.n	1db72 <net_calc_chksum+0x64>
				sum++;
   1db9e:	3601      	adds	r6, #1
   1dba0:	b2b6      	uxth	r6, r6
   1dba2:	e7e6      	b.n	1db72 <net_calc_chksum+0x64>
			len = frag->len;
   1dba4:	f9b5 400c 	ldrsh.w	r4, [r5, #12]
   1dba8:	e7e7      	b.n	1db7a <net_calc_chksum+0x6c>
		return 0;
   1dbaa:	2600      	movs	r6, #0
	sum = (sum == 0) ? 0xffff : htons(sum);
   1dbac:	b91e      	cbnz	r6, 1dbb6 <net_calc_chksum+0xa8>
   1dbae:	f64f 70ff 	movw	r0, #65535	; 0xffff
}
   1dbb2:	b005      	add	sp, #20
   1dbb4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	sum = (sum == 0) ? 0xffff : htons(sum);
   1dbb6:	0a30      	lsrs	r0, r6, #8
   1dbb8:	ea40 2006 	orr.w	r0, r0, r6, lsl #8
   1dbbc:	b280      	uxth	r0, r0
   1dbbe:	e7f8      	b.n	1dbb2 <net_calc_chksum+0xa4>

0001dbc0 <net_header_fits>:
	if (hdr && hdr > pkt->frags->data &&
   1dbc0:	460b      	mov	r3, r1
   1dbc2:	b151      	cbz	r1, 1dbda <net_header_fits+0x1a>
   1dbc4:	6880      	ldr	r0, [r0, #8]
   1dbc6:	6881      	ldr	r1, [r0, #8]
   1dbc8:	428b      	cmp	r3, r1
   1dbca:	d908      	bls.n	1dbde <net_header_fits+0x1e>
	    (hdr + hdr_size) <= (pkt->frags->data + pkt->frags->len)) {
   1dbcc:	4413      	add	r3, r2
   1dbce:	8982      	ldrh	r2, [r0, #12]
   1dbd0:	4411      	add	r1, r2
	if (hdr && hdr > pkt->frags->data &&
   1dbd2:	428b      	cmp	r3, r1
   1dbd4:	d905      	bls.n	1dbe2 <net_header_fits+0x22>
	return false;
   1dbd6:	2000      	movs	r0, #0
   1dbd8:	4770      	bx	lr
   1dbda:	2000      	movs	r0, #0
   1dbdc:	4770      	bx	lr
   1dbde:	2000      	movs	r0, #0
   1dbe0:	4770      	bx	lr
		return true;
   1dbe2:	2001      	movs	r0, #1
}
   1dbe4:	4770      	bx	lr

0001dbe6 <net_ipaddr_parse>:

bool net_ipaddr_parse(const char *str, size_t str_len, struct sockaddr *addr)
{
	int i, count;

	if (!str || str_len == 0) {
   1dbe6:	b1d8      	cbz	r0, 1dc20 <net_ipaddr_parse+0x3a>
{
   1dbe8:	b538      	push	{r3, r4, r5, lr}
	if (!str || str_len == 0) {
   1dbea:	b1d9      	cbz	r1, 1dc24 <net_ipaddr_parse+0x3e>
		return false;
	}

	/* We cannot accept empty string here */
	if (*str == '\0') {
   1dbec:	7804      	ldrb	r4, [r0, #0]
   1dbee:	b1dc      	cbz	r4, 1dc28 <net_ipaddr_parse+0x42>
		return false;
	}

	if (*str == '[') {
   1dbf0:	2c5b      	cmp	r4, #91	; 0x5b
   1dbf2:	d002      	beq.n	1dbfa <net_ipaddr_parse+0x14>
   1dbf4:	2500      	movs	r5, #0
   1dbf6:	462b      	mov	r3, r5
   1dbf8:	e004      	b.n	1dc04 <net_ipaddr_parse+0x1e>
#if defined(CONFIG_NET_IPV6)
		return parse_ipv6(str, str_len, addr, true);
   1dbfa:	2301      	movs	r3, #1
   1dbfc:	f7ff ff1e 	bl	1da3c <parse_ipv6>
   1dc00:	bd38      	pop	{r3, r4, r5, pc}
#else
		return false;
#endif /* CONFIG_NET_IPV6 */
	}

	for (count = i = 0; str[i] && i < str_len; i++) {
   1dc02:	3301      	adds	r3, #1
   1dc04:	5cc4      	ldrb	r4, [r0, r3]
   1dc06:	b12c      	cbz	r4, 1dc14 <net_ipaddr_parse+0x2e>
   1dc08:	4299      	cmp	r1, r3
   1dc0a:	d903      	bls.n	1dc14 <net_ipaddr_parse+0x2e>
		if (str[i] == ':') {
   1dc0c:	2c3a      	cmp	r4, #58	; 0x3a
   1dc0e:	d1f8      	bne.n	1dc02 <net_ipaddr_parse+0x1c>
			count++;
   1dc10:	3501      	adds	r5, #1
   1dc12:	e7f6      	b.n	1dc02 <net_ipaddr_parse+0x1c>
		}
	}

	if (count == 1) {
   1dc14:	2d01      	cmp	r5, #1
   1dc16:	d009      	beq.n	1dc2c <net_ipaddr_parse+0x46>
#if defined(CONFIG_NET_IPV4) && !defined(CONFIG_NET_IPV6)
	return parse_ipv4(str, str_len, addr, false);
#endif

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	return parse_ipv6(str, str_len, addr, false);
   1dc18:	2300      	movs	r3, #0
   1dc1a:	f7ff ff0f 	bl	1da3c <parse_ipv6>
   1dc1e:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1dc20:	2000      	movs	r0, #0
   1dc22:	4770      	bx	lr
   1dc24:	2000      	movs	r0, #0
   1dc26:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1dc28:	2000      	movs	r0, #0
   1dc2a:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1dc2c:	2000      	movs	r0, #0
#endif
}
   1dc2e:	bd38      	pop	{r3, r4, r5, pc}

0001dc30 <net_bt_reserve>:
{
	ARG_UNUSED(iface);
	ARG_UNUSED(unused);

	return 0;
}
   1dc30:	2000      	movs	r0, #0
   1dc32:	4770      	bx	lr

0001dc34 <net_bt_enable>:
	return iface->dev;
   1dc34:	6803      	ldr	r3, [r0, #0]

static int net_bt_enable(struct net_if *iface, bool state)
{
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc36:	689b      	ldr	r3, [r3, #8]

	NET_DBG("iface %p %s", iface, state ? "up" : "down");

	if (state && ctxt->ipsp_chan.chan.state != BT_L2CAP_CONNECTED) {
   1dc38:	b129      	cbz	r1, 1dc46 <net_bt_enable+0x12>
   1dc3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
   1dc3e:	2b03      	cmp	r3, #3
   1dc40:	d103      	bne.n	1dc4a <net_bt_enable+0x16>
		return -ENETDOWN;
	}

	return 0;
   1dc42:	2000      	movs	r0, #0
   1dc44:	4770      	bx	lr
   1dc46:	2000      	movs	r0, #0
   1dc48:	4770      	bx	lr
		return -ENETDOWN;
   1dc4a:	f06f 0072 	mvn.w	r0, #114	; 0x72
}
   1dc4e:	4770      	bx	lr

0001dc50 <ipsp_accept>:

static int ipsp_accept(struct bt_conn *conn, struct bt_l2cap_chan **chan)
{
	NET_DBG("Incoming conn %p", conn);

	if (bt_context_data.ipsp_chan.chan.conn) {
   1dc50:	4b04      	ldr	r3, [pc, #16]	; (1dc64 <ipsp_accept+0x14>)
   1dc52:	685b      	ldr	r3, [r3, #4]
   1dc54:	b91b      	cbnz	r3, 1dc5e <ipsp_accept+0xe>
		NET_ERR("No channels available");
		return -ENOMEM;
	}

	*chan = &bt_context_data.ipsp_chan.chan;
   1dc56:	4b04      	ldr	r3, [pc, #16]	; (1dc68 <ipsp_accept+0x18>)
   1dc58:	600b      	str	r3, [r1, #0]

	return 0;
   1dc5a:	2000      	movs	r0, #0
   1dc5c:	4770      	bx	lr
		return -ENOMEM;
   1dc5e:	f06f 000b 	mvn.w	r0, #11
}
   1dc62:	4770      	bx	lr
   1dc64:	2000bd78 	.word	0x2000bd78
   1dc68:	2000bd7c 	.word	0x2000bd7c

0001dc6c <net_bt_send>:
{
   1dc6c:	b538      	push	{r3, r4, r5, lr}
   1dc6e:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dc70:	689d      	ldr	r5, [r3, #8]
	return pkt->family;
   1dc72:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   1dc76:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) != AF_INET6) {
   1dc7a:	2b0a      	cmp	r3, #10
   1dc7c:	d001      	beq.n	1dc82 <net_bt_send+0x16>
		return NET_DROP;
   1dc7e:	2002      	movs	r0, #2
   1dc80:	bd38      	pop	{r3, r4, r5, pc}
   1dc82:	460c      	mov	r4, r1
	if (!net_6lo_compress(pkt, true, NULL)) {
   1dc84:	2200      	movs	r2, #0
   1dc86:	2101      	movs	r1, #1
   1dc88:	4620      	mov	r0, r4
   1dc8a:	f003 fe95 	bl	219b8 <net_6lo_compress>
   1dc8e:	b908      	cbnz	r0, 1dc94 <net_bt_send+0x28>
		return NET_DROP;
   1dc90:	2002      	movs	r0, #2
}
   1dc92:	bd38      	pop	{r3, r4, r5, pc}
	net_if_queue_tx(ctxt->iface, pkt);
   1dc94:	6828      	ldr	r0, [r5, #0]
	k_fifo_put(&iface->tx_queue, pkt);
   1dc96:	4621      	mov	r1, r4
   1dc98:	3018      	adds	r0, #24
   1dc9a:	f00a fb13 	bl	282c4 <k_queue_append>
	return NET_OK;
   1dc9e:	2000      	movs	r0, #0
   1dca0:	bd38      	pop	{r3, r4, r5, pc}

0001dca2 <net_bt_recv>:
{
   1dca2:	b508      	push	{r3, lr}
	if (!net_6lo_uncompress(pkt)) {
   1dca4:	4608      	mov	r0, r1
   1dca6:	f004 fad4 	bl	22252 <net_6lo_uncompress>
   1dcaa:	b908      	cbnz	r0, 1dcb0 <net_bt_recv+0xe>
		return NET_DROP;
   1dcac:	2002      	movs	r0, #2
   1dcae:	bd08      	pop	{r3, pc}
	return NET_CONTINUE;
   1dcb0:	2001      	movs	r0, #1
}
   1dcb2:	bd08      	pop	{r3, pc}

0001dcb4 <connected>:
	return bt_l2cap_chan_disconnect(&ctxt->ipsp_chan.chan);
}

static void connected(struct bt_conn *conn, u8_t err)
{
	if (err) {
   1dcb4:	b951      	cbnz	r1, 1dccc <connected+0x18>
{
   1dcb6:	b508      	push	{r3, lr}
		NET_ERR("Failed to connect to %s (%u)\n", addr, err);
#endif
		return;
	}

	if (conn != default_conn) {
   1dcb8:	4b05      	ldr	r3, [pc, #20]	; (1dcd0 <connected+0x1c>)
   1dcba:	681b      	ldr	r3, [r3, #0]
   1dcbc:	4283      	cmp	r3, r0
   1dcbe:	d000      	beq.n	1dcc2 <connected+0xe>
   1dcc0:	bd08      	pop	{r3, pc}
		return;
	}

	bt_l2cap_chan_connect(conn, &bt_context_data.ipsp_chan.chan,
   1dcc2:	2223      	movs	r2, #35	; 0x23
   1dcc4:	4903      	ldr	r1, [pc, #12]	; (1dcd4 <connected+0x20>)
   1dcc6:	f7ea f905 	bl	7ed4 <bt_l2cap_chan_connect>
   1dcca:	e7f9      	b.n	1dcc0 <connected+0xc>
   1dccc:	4770      	bx	lr
   1dcce:	bf00      	nop
   1dcd0:	20001f10 	.word	0x20001f10
   1dcd4:	2000bd7c 	.word	0x2000bd7c

0001dcd8 <ipsp_recv>:
{
   1dcd8:	b570      	push	{r4, r5, r6, lr}
   1dcda:	4605      	mov	r5, r0
   1dcdc:	460e      	mov	r6, r1
	pkt = net_pkt_get_reserve_rx(0, K_FOREVER);
   1dcde:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dce2:	2000      	movs	r0, #0
   1dce4:	f7ff f82e 	bl	1cd44 <net_pkt_get_reserve_rx>
   1dce8:	4604      	mov	r4, r0
	net_pkt_ll_dst(pkt)->addr = ctxt->src.val;
   1dcea:	f105 039c 	add.w	r3, r5, #156	; 0x9c
   1dcee:	6283      	str	r3, [r0, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = sizeof(ctxt->src);
   1dcf0:	2206      	movs	r2, #6
   1dcf2:	f880 202c 	strb.w	r2, [r0, #44]	; 0x2c
	net_pkt_ll_dst(pkt)->type = NET_LINK_BLUETOOTH;
   1dcf6:	2302      	movs	r3, #2
   1dcf8:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
	net_pkt_ll_src(pkt)->addr = ctxt->dst.val;
   1dcfc:	f105 01a2 	add.w	r1, r5, #162	; 0xa2
   1dd00:	6201      	str	r1, [r0, #32]
	net_pkt_ll_src(pkt)->len = sizeof(ctxt->dst);
   1dd02:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
	net_pkt_ll_src(pkt)->type = NET_LINK_BLUETOOTH;
   1dd06:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	net_pkt_frag_add(pkt, net_buf_ref(buf));
   1dd0a:	4630      	mov	r0, r6
   1dd0c:	f7fc fb42 	bl	1a394 <net_buf_ref>
   1dd10:	4601      	mov	r1, r0
   1dd12:	4620      	mov	r0, r4
   1dd14:	f7ff f8bb 	bl	1ce8e <net_pkt_frag_add>
	if (net_recv_data(ctxt->iface, pkt) < 0) {
   1dd18:	4621      	mov	r1, r4
   1dd1a:	f855 0c04 	ldr.w	r0, [r5, #-4]
   1dd1e:	f7fc fd55 	bl	1a7cc <net_recv_data>
   1dd22:	2800      	cmp	r0, #0
   1dd24:	db00      	blt.n	1dd28 <ipsp_recv+0x50>
   1dd26:	bd70      	pop	{r4, r5, r6, pc}
		net_pkt_unref(pkt);
   1dd28:	4620      	mov	r0, r4
   1dd2a:	f7ff f886 	bl	1ce3a <net_pkt_unref>
}
   1dd2e:	e7fa      	b.n	1dd26 <ipsp_recv+0x4e>

0001dd30 <ipsp_alloc_buf>:
{
   1dd30:	b508      	push	{r3, lr}
	return net_pkt_get_reserve_rx_data(0, K_FOREVER);
   1dd32:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1dd36:	2000      	movs	r0, #0
   1dd38:	f7ff f818 	bl	1cd6c <net_pkt_get_reserve_rx_data>
}
   1dd3c:	bd08      	pop	{r3, pc}
	...

0001dd40 <ipsp_disconnected>:
{
   1dd40:	b510      	push	{r4, lr}
   1dd42:	4604      	mov	r4, r0
	net_if_down(ctxt->iface);
   1dd44:	f850 0c04 	ldr.w	r0, [r0, #-4]
   1dd48:	f7fd fe92 	bl	1ba70 <net_if_down>
	if (chan->conn != default_conn) {
   1dd4c:	6823      	ldr	r3, [r4, #0]
   1dd4e:	4a05      	ldr	r2, [pc, #20]	; (1dd64 <ipsp_disconnected+0x24>)
   1dd50:	6810      	ldr	r0, [r2, #0]
   1dd52:	4283      	cmp	r3, r0
   1dd54:	d000      	beq.n	1dd58 <ipsp_disconnected+0x18>
   1dd56:	bd10      	pop	{r4, pc}
	bt_conn_unref(default_conn);
   1dd58:	f7e8 fe28 	bl	69ac <bt_conn_unref>
	default_conn = NULL;
   1dd5c:	2200      	movs	r2, #0
   1dd5e:	4b01      	ldr	r3, [pc, #4]	; (1dd64 <ipsp_disconnected+0x24>)
   1dd60:	601a      	str	r2, [r3, #0]
   1dd62:	e7f8      	b.n	1dd56 <ipsp_disconnected+0x16>
   1dd64:	20001f10 	.word	0x20001f10

0001dd68 <disconnected>:
			      L2CAP_IPSP_PSM);
}

static void disconnected(struct bt_conn *conn, u8_t reason)
{
   1dd68:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_L2_BT)
	char addr[BT_ADDR_LE_STR_LEN];
#endif

	if (conn != default_conn) {
   1dd6a:	4b06      	ldr	r3, [pc, #24]	; (1dd84 <disconnected+0x1c>)
   1dd6c:	681b      	ldr	r3, [r3, #0]
   1dd6e:	4283      	cmp	r3, r0
   1dd70:	d000      	beq.n	1dd74 <disconnected+0xc>
   1dd72:	bd08      	pop	{r3, pc}
	bt_addr_le_to_str(bt_conn_get_dst(conn), addr, sizeof(addr));

	NET_DBG("Disconnected: %s (reason %u)\n", addr, reason);
#endif

	bt_conn_unref(default_conn);
   1dd74:	4618      	mov	r0, r3
   1dd76:	f7e8 fe19 	bl	69ac <bt_conn_unref>
	default_conn = NULL;
   1dd7a:	2200      	movs	r2, #0
   1dd7c:	4b01      	ldr	r3, [pc, #4]	; (1dd84 <disconnected+0x1c>)
   1dd7e:	601a      	str	r2, [r3, #0]
   1dd80:	e7f7      	b.n	1dd72 <disconnected+0xa>
   1dd82:	bf00      	nop
   1dd84:	20001f10 	.word	0x20001f10

0001dd88 <ipsp_connected>:
{
   1dd88:	b570      	push	{r4, r5, r6, lr}
   1dd8a:	b08e      	sub	sp, #56	; 0x38
   1dd8c:	4604      	mov	r4, r0
	if (bt_conn_get_info(chan->conn, &info) < 0) {
   1dd8e:	a909      	add	r1, sp, #36	; 0x24
   1dd90:	6800      	ldr	r0, [r0, #0]
   1dd92:	f7e8 ff41 	bl	6c18 <bt_conn_get_info>
   1dd96:	2800      	cmp	r0, #0
   1dd98:	db06      	blt.n	1dda8 <ipsp_connected+0x20>
	sys_memcpy_swap(ctxt->src.val, info.le.src->a.val, sizeof(ctxt->src));
   1dd9a:	f104 069c 	add.w	r6, r4, #156	; 0x9c
   1dd9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
	src += length - 1;
   1dda0:	3306      	adds	r3, #6
   1dda2:	4631      	mov	r1, r6
   1dda4:	2206      	movs	r2, #6
   1dda6:	e008      	b.n	1ddba <ipsp_connected+0x32>
		bt_l2cap_chan_disconnect(chan);
   1dda8:	4620      	mov	r0, r4
   1ddaa:	f7ea f8b2 	bl	7f12 <bt_l2cap_chan_disconnect>
   1ddae:	e05a      	b.n	1de66 <ipsp_connected+0xde>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ddb0:	7818      	ldrb	r0, [r3, #0]
   1ddb2:	7008      	strb	r0, [r1, #0]
	for (; length > 0; length--) {
   1ddb4:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ddb6:	3b01      	subs	r3, #1
   1ddb8:	3101      	adds	r1, #1
	for (; length > 0; length--) {
   1ddba:	2a00      	cmp	r2, #0
   1ddbc:	d1f8      	bne.n	1ddb0 <ipsp_connected+0x28>
	sys_memcpy_swap(ctxt->dst.val, info.le.dst->a.val, sizeof(ctxt->dst));
   1ddbe:	f104 01a2 	add.w	r1, r4, #162	; 0xa2
   1ddc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
	src += length - 1;
   1ddc4:	3306      	adds	r3, #6
   1ddc6:	4608      	mov	r0, r1
   1ddc8:	2206      	movs	r2, #6
   1ddca:	e004      	b.n	1ddd6 <ipsp_connected+0x4e>
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ddcc:	781d      	ldrb	r5, [r3, #0]
   1ddce:	7005      	strb	r5, [r0, #0]
	for (; length > 0; length--) {
   1ddd0:	3a01      	subs	r2, #1
		*((u8_t *)dst++) = *((u8_t *)src--);
   1ddd2:	3b01      	subs	r3, #1
   1ddd4:	3001      	adds	r0, #1
	for (; length > 0; length--) {
   1ddd6:	2a00      	cmp	r2, #0
   1ddd8:	d1f8      	bne.n	1ddcc <ipsp_connected+0x44>
	net_if_set_link_addr(ctxt->iface, ctxt->src.val, sizeof(ctxt->src.val),
   1ddda:	f854 3c04 	ldr.w	r3, [r4, #-4]
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ddde:	f3bf 8f5b 	dmb	ish
   1dde2:	68da      	ldr	r2, [r3, #12]
   1dde4:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(iface->flags, NET_IF_UP)) {
   1dde8:	f012 0f01 	tst.w	r2, #1
   1ddec:	d104      	bne.n	1ddf8 <ipsp_connected+0x70>
	iface->link_addr.addr = addr;
   1ddee:	611e      	str	r6, [r3, #16]
	iface->link_addr.len = len;
   1ddf0:	2206      	movs	r2, #6
   1ddf2:	751a      	strb	r2, [r3, #20]
	iface->link_addr.type = type;
   1ddf4:	2202      	movs	r2, #2
   1ddf6:	755a      	strb	r2, [r3, #21]
	ll.addr = ctxt->dst.val;
   1ddf8:	9107      	str	r1, [sp, #28]
	ll.len = sizeof(ctxt->dst.val);
   1ddfa:	2306      	movs	r3, #6
   1ddfc:	f88d 3020 	strb.w	r3, [sp, #32]
	ll.type = NET_LINK_BLUETOOTH;
   1de00:	2302      	movs	r3, #2
   1de02:	f88d 3021 	strb.w	r3, [sp, #33]	; 0x21
	addr->s6_addr[0] = 0xfe;
   1de06:	23fe      	movs	r3, #254	; 0xfe
   1de08:	f88d 300c 	strb.w	r3, [sp, #12]
	addr->s6_addr[1] = 0x80;
   1de0c:	2380      	movs	r3, #128	; 0x80
   1de0e:	f88d 300d 	strb.w	r3, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   1de12:	2300      	movs	r3, #0
   1de14:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   1de18:	9304      	str	r3, [sp, #16]
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   1de1a:	2203      	movs	r2, #3
   1de1c:	a805      	add	r0, sp, #20
   1de1e:	f7e2 fa4f 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   1de22:	23ff      	movs	r3, #255	; 0xff
   1de24:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   1de28:	23fe      	movs	r3, #254	; 0xfe
   1de2a:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   1de2e:	2203      	movs	r2, #3
   1de30:	9907      	ldr	r1, [sp, #28]
   1de32:	4411      	add	r1, r2
   1de34:	f10d 0019 	add.w	r0, sp, #25
   1de38:	f7e2 fa42 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   1de3c:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1de40:	2b02      	cmp	r3, #2
   1de42:	d012      	beq.n	1de6a <ipsp_connected+0xe2>
		if (lladdr->type == NET_LINK_ETHERNET) {
   1de44:	f89d 3021 	ldrb.w	r3, [sp, #33]	; 0x21
   1de48:	2b03      	cmp	r3, #3
   1de4a:	d015      	beq.n	1de78 <ipsp_connected+0xf0>
	net_ipv6_nbr_add(ctxt->iface, &in6, &ll, false,
   1de4c:	2305      	movs	r3, #5
   1de4e:	9300      	str	r3, [sp, #0]
   1de50:	2300      	movs	r3, #0
   1de52:	aa07      	add	r2, sp, #28
   1de54:	a903      	add	r1, sp, #12
   1de56:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1de5a:	f002 f903 	bl	20064 <net_ipv6_nbr_add>
	net_if_up(ctxt->iface);
   1de5e:	f854 0c04 	ldr.w	r0, [r4, #-4]
   1de62:	f7fd fdd1 	bl	1ba08 <net_if_up>
}
   1de66:	b00e      	add	sp, #56	; 0x38
   1de68:	bd70      	pop	{r4, r5, r6, pc}
			addr->s6_addr[8] ^= 0x02;
   1de6a:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1de6e:	f083 0302 	eor.w	r3, r3, #2
   1de72:	f88d 3014 	strb.w	r3, [sp, #20]
   1de76:	e7e5      	b.n	1de44 <ipsp_connected+0xbc>
			addr->s6_addr[8] ^= 0x02;
   1de78:	f89d 3014 	ldrb.w	r3, [sp, #20]
   1de7c:	f083 0302 	eor.w	r3, r3, #2
   1de80:	f88d 3014 	strb.w	r3, [sp, #20]
   1de84:	e7e2      	b.n	1de4c <ipsp_connected+0xc4>
	...

0001de88 <net_bt_init>:
	.disconnected = disconnected,
};
#endif /* CONFIG_NET_L2_BT_MGMT */

static int net_bt_init(struct device *dev)
{
   1de88:	b508      	push	{r3, lr}
	NET_DBG("dev %p driver_data %p", dev, dev->driver_data);

#if defined(CONFIG_NET_L2_BT_MGMT)
	bt_conn_cb_register(&conn_callbacks);
   1de8a:	4804      	ldr	r0, [pc, #16]	; (1de9c <net_bt_init+0x14>)
   1de8c:	f7e8 fbb6 	bl	65fc <bt_conn_cb_register>
#endif
	bt_l2cap_server_register(&server);
   1de90:	4803      	ldr	r0, [pc, #12]	; (1dea0 <net_bt_init+0x18>)
   1de92:	f7e9 ffc5 	bl	7e20 <bt_l2cap_server_register>

	return 0;
}
   1de96:	2000      	movs	r0, #0
   1de98:	bd08      	pop	{r3, pc}
   1de9a:	bf00      	nop
   1de9c:	2000be2c 	.word	0x2000be2c
   1dea0:	2000be5c 	.word	0x2000be5c

0001dea4 <bt_iface_send>:
{
   1dea4:	b538      	push	{r3, r4, r5, lr}
	return iface->dev;
   1dea6:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dea8:	689c      	ldr	r4, [r3, #8]
	frags = pkt->frags;
   1deaa:	688d      	ldr	r5, [r1, #8]
	pkt->frags = NULL;
   1deac:	2300      	movs	r3, #0
   1deae:	608b      	str	r3, [r1, #8]
	net_pkt_unref(pkt);
   1deb0:	4608      	mov	r0, r1
   1deb2:	f7fe ffc2 	bl	1ce3a <net_pkt_unref>
	ret = bt_l2cap_chan_send(&ctxt->ipsp_chan.chan, frags);
   1deb6:	4629      	mov	r1, r5
   1deb8:	1d20      	adds	r0, r4, #4
   1deba:	f7ea f9bb 	bl	8234 <bt_l2cap_chan_send>
}
   1debe:	bd38      	pop	{r3, r4, r5, pc}

0001dec0 <bt_iface_init>:
   1dec0:	6803      	ldr	r3, [r0, #0]
	struct bt_context *ctxt = net_if_get_device(iface)->driver_data;
   1dec2:	689b      	ldr	r3, [r3, #8]
	ctxt->iface = iface;
   1dec4:	6018      	str	r0, [r3, #0]
	atomic_set_bit(iface->flags, NET_IF_POINTOPOINT);
   1dec6:	300c      	adds	r0, #12
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   1dec8:	f3bf 8f5b 	dmb	ish
   1decc:	e850 3f00 	ldrex	r3, [r0]
   1ded0:	f043 0302 	orr.w	r3, r3, #2
   1ded4:	e840 3200 	strex	r2, r3, [r0]
   1ded8:	2a00      	cmp	r2, #0
   1deda:	d1f7      	bne.n	1decc <bt_iface_init+0xc>
   1dedc:	f3bf 8f5b 	dmb	ish
   1dee0:	4770      	bx	lr
	...

0001dee4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>:
{
   1dee4:	b510      	push	{r4, lr}
   1dee6:	b086      	sub	sp, #24
   1dee8:	4614      	mov	r4, r2
	if (!strcmp(data, "on")) {
   1deea:	4913      	ldr	r1, [pc, #76]	; (1df38 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x54>)
   1deec:	4610      	mov	r0, r2
   1deee:	f7e2 fa8b 	bl	408 <strcmp>
   1def2:	b140      	cbz	r0, 1df06 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x22>
	} else if (!strcmp(data, "off")) {
   1def4:	4911      	ldr	r1, [pc, #68]	; (1df3c <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x58>)
   1def6:	4620      	mov	r0, r4
   1def8:	f7e2 fa86 	bl	408 <strcmp>
   1defc:	b9c0      	cbnz	r0, 1df30 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x4c>
		return bt_le_adv_stop();
   1defe:	f7e8 f879 	bl	5ff4 <bt_le_adv_stop>
}
   1df02:	b006      	add	sp, #24
   1df04:	bd10      	pop	{r4, pc}
		return bt_le_adv_start(BT_LE_ADV_CONN, ad, ARRAY_SIZE(ad),
   1df06:	2300      	movs	r3, #0
   1df08:	9303      	str	r3, [sp, #12]
   1df0a:	9304      	str	r3, [sp, #16]
   1df0c:	9305      	str	r3, [sp, #20]
   1df0e:	2301      	movs	r3, #1
   1df10:	f88d 300c 	strb.w	r3, [sp, #12]
   1df14:	22a0      	movs	r2, #160	; 0xa0
   1df16:	f8ad 200e 	strh.w	r2, [sp, #14]
   1df1a:	22f0      	movs	r2, #240	; 0xf0
   1df1c:	f8ad 2010 	strh.w	r2, [sp, #16]
   1df20:	9300      	str	r3, [sp, #0]
   1df22:	4b07      	ldr	r3, [pc, #28]	; (1df40 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x5c>)
   1df24:	2202      	movs	r2, #2
   1df26:	4907      	ldr	r1, [pc, #28]	; (1df44 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x60>)
   1df28:	a803      	add	r0, sp, #12
   1df2a:	f7e7 ffb9 	bl	5ea0 <bt_le_adv_start>
   1df2e:	e7e8      	b.n	1df02 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
		return -EINVAL;
   1df30:	f06f 0015 	mvn.w	r0, #21
   1df34:	e7e5      	b.n	1df02 <net_mgmt_NET_REQUEST_BT_ADVERTISE+0x1e>
   1df36:	bf00      	nop
   1df38:	0002db48 	.word	0x0002db48
   1df3c:	0002db4c 	.word	0x0002db4c
   1df40:	0002db50 	.word	0x0002db50
   1df44:	0002db38 	.word	0x0002db38

0001df48 <net_icmpv6_register_handler>:
	node->next = list->head;
   1df48:	4b04      	ldr	r3, [pc, #16]	; (1df5c <net_icmpv6_register_handler+0x14>)
   1df4a:	681a      	ldr	r2, [r3, #0]
   1df4c:	6002      	str	r2, [r0, #0]
	list->head = node;
   1df4e:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   1df50:	685b      	ldr	r3, [r3, #4]
   1df52:	b103      	cbz	r3, 1df56 <net_icmpv6_register_handler+0xe>
   1df54:	4770      	bx	lr
		list->tail = list->head;
   1df56:	4b01      	ldr	r3, [pc, #4]	; (1df5c <net_icmpv6_register_handler+0x14>)
   1df58:	6058      	str	r0, [r3, #4]
}

void net_icmpv6_register_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_prepend(&handlers, &handler->node);
}
   1df5a:	e7fb      	b.n	1df54 <net_icmpv6_register_handler+0xc>
   1df5c:	20001f14 	.word	0x20001f14

0001df60 <net_icmpv6_unregister_handler>:

void net_icmpv6_unregister_handler(struct net_icmpv6_handler *handler)
{
	sys_slist_find_and_remove(&handlers, &handler->node);
   1df60:	4601      	mov	r1, r0
	return list->head;
   1df62:	4b10      	ldr	r3, [pc, #64]	; (1dfa4 <net_icmpv6_unregister_handler+0x44>)
   1df64:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   1df66:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1df68:	b1d3      	cbz	r3, 1dfa0 <net_icmpv6_unregister_handler+0x40>
		if (test == node) {
   1df6a:	4299      	cmp	r1, r3
   1df6c:	d002      	beq.n	1df74 <net_icmpv6_unregister_handler+0x14>
		prev = test;
   1df6e:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   1df70:	681b      	ldr	r3, [r3, #0]
   1df72:	e7f9      	b.n	1df68 <net_icmpv6_unregister_handler+0x8>
	if (!prev_node) {
   1df74:	b142      	cbz	r2, 1df88 <net_icmpv6_unregister_handler+0x28>
		prev_node->next = node->next;
   1df76:	6803      	ldr	r3, [r0, #0]
   1df78:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   1df7a:	4b0a      	ldr	r3, [pc, #40]	; (1dfa4 <net_icmpv6_unregister_handler+0x44>)
   1df7c:	685b      	ldr	r3, [r3, #4]
   1df7e:	4298      	cmp	r0, r3
   1df80:	d00b      	beq.n	1df9a <net_icmpv6_unregister_handler+0x3a>
	node->next = NULL;
   1df82:	2300      	movs	r3, #0
   1df84:	6003      	str	r3, [r0, #0]
   1df86:	4770      	bx	lr
		list->head = node->next;
   1df88:	6802      	ldr	r2, [r0, #0]
   1df8a:	4b06      	ldr	r3, [pc, #24]	; (1dfa4 <net_icmpv6_unregister_handler+0x44>)
   1df8c:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   1df8e:	685b      	ldr	r3, [r3, #4]
   1df90:	4298      	cmp	r0, r3
   1df92:	d1f6      	bne.n	1df82 <net_icmpv6_unregister_handler+0x22>
			list->tail = list->head;
   1df94:	4b03      	ldr	r3, [pc, #12]	; (1dfa4 <net_icmpv6_unregister_handler+0x44>)
   1df96:	605a      	str	r2, [r3, #4]
   1df98:	e7f3      	b.n	1df82 <net_icmpv6_unregister_handler+0x22>
			list->tail = prev_node;
   1df9a:	4b02      	ldr	r3, [pc, #8]	; (1dfa4 <net_icmpv6_unregister_handler+0x44>)
   1df9c:	605a      	str	r2, [r3, #4]
   1df9e:	e7f0      	b.n	1df82 <net_icmpv6_unregister_handler+0x22>
   1dfa0:	4770      	bx	lr
   1dfa2:	bf00      	nop
   1dfa4:	20001f14 	.word	0x20001f14

0001dfa8 <net_icmpv6_set_chksum>:
#define echo_reply_debug(pkt)
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

struct net_buf *net_icmpv6_set_chksum(struct net_pkt *pkt,
				      struct net_buf *frag)
{
   1dfa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1dfac:	b086      	sub	sp, #24
   1dfae:	4606      	mov	r6, r0
   1dfb0:	460d      	mov	r5, r1
	struct net_icmp_hdr *icmp_hdr;
	u16_t chksum = 0;
   1dfb2:	2300      	movs	r3, #0
   1dfb4:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	icmp_hdr = net_pkt_icmp_data(pkt);
   1dfb8:	f7ff fa18 	bl	1d3ec <net_pkt_icmp_data>
   1dfbc:	4604      	mov	r4, r0
 */
static inline
struct net_icmp_hdr *net_icmp_header_fits(struct net_pkt *pkt,
					  struct net_icmp_hdr *hdr)
{
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1dfbe:	2204      	movs	r2, #4
   1dfc0:	4601      	mov	r1, r0
   1dfc2:	4630      	mov	r0, r6
   1dfc4:	f7ff fdfc 	bl	1dbc0 <net_header_fits>
   1dfc8:	b170      	cbz	r0, 1dfe8 <net_icmpv6_set_chksum+0x40>
		return hdr;
   1dfca:	4623      	mov	r3, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1dfcc:	b173      	cbz	r3, 1dfec <net_icmpv6_set_chksum+0x44>
		icmp_hdr->chksum = 0;
   1dfce:	2300      	movs	r3, #0
   1dfd0:	70a3      	strb	r3, [r4, #2]
   1dfd2:	70e3      	strb	r3, [r4, #3]
extern u16_t net_calc_chksum_ipv4(struct net_pkt *pkt);
#endif /* CONFIG_NET_IPV4 */

static inline u16_t net_calc_chksum_icmpv6(struct net_pkt *pkt)
{
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1dfd4:	213a      	movs	r1, #58	; 0x3a
   1dfd6:	4630      	mov	r0, r6
   1dfd8:	f7ff fd99 	bl	1db0e <net_calc_chksum>
		icmp_hdr->chksum = ~net_calc_chksum_icmpv6(pkt);
   1dfdc:	43c0      	mvns	r0, r0
   1dfde:	8060      	strh	r0, [r4, #2]

		return frag;
   1dfe0:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   1dfe2:	b006      	add	sp, #24
   1dfe4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1dfe8:	2300      	movs	r3, #0
   1dfea:	e7ef      	b.n	1dfcc <net_icmpv6_set_chksum+0x24>
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dfec:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1dff0:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt) +
   1dff4:	441a      	add	r2, r3
   1dff6:	3202      	adds	r2, #2
   1dff8:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   1dffc:	f8cd 8008 	str.w	r8, [sp, #8]
   1e000:	f10d 0416 	add.w	r4, sp, #22
   1e004:	9401      	str	r4, [sp, #4]
   1e006:	2702      	movs	r7, #2
   1e008:	9700      	str	r7, [sp, #0]
   1e00a:	ab05      	add	r3, sp, #20
   1e00c:	b292      	uxth	r2, r2
   1e00e:	4629      	mov	r1, r5
   1e010:	4630      	mov	r0, r6
   1e012:	f7ff f902 	bl	1d21a <net_pkt_write>
   1e016:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1e018:	213a      	movs	r1, #58	; 0x3a
   1e01a:	4630      	mov	r0, r6
   1e01c:	f7ff fd77 	bl	1db0e <net_calc_chksum>
	chksum = ~net_calc_chksum_icmpv6(pkt);
   1e020:	43c0      	mvns	r0, r0
   1e022:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   1e026:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1e02a:	3a02      	subs	r2, #2
   1e02c:	f8cd 8008 	str.w	r8, [sp, #8]
   1e030:	9401      	str	r4, [sp, #4]
   1e032:	9700      	str	r7, [sp, #0]
   1e034:	ab05      	add	r3, sp, #20
   1e036:	b292      	uxth	r2, r2
   1e038:	4629      	mov	r1, r5
   1e03a:	4630      	mov	r0, r6
   1e03c:	f7ff f8ed 	bl	1d21a <net_pkt_write>
	return frag;
   1e040:	e7cf      	b.n	1dfe2 <net_icmpv6_set_chksum+0x3a>

0001e042 <net_icmpv6_get_hdr>:

struct net_icmp_hdr *net_icmpv6_get_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e042:	b5f0      	push	{r4, r5, r6, r7, lr}
   1e044:	b085      	sub	sp, #20
   1e046:	4605      	mov	r5, r0
   1e048:	460f      	mov	r7, r1
	/* If the ICMP header can fit the first fragment, then access it
	 * directly (fast path), otherwise read the values one by one
	 * using net_frag_read*() functions (slow path).
	 */

	icmp_hdr = net_pkt_icmp_data(pkt);
   1e04a:	f7ff f9cf 	bl	1d3ec <net_pkt_icmp_data>
   1e04e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e050:	2204      	movs	r2, #4
   1e052:	4601      	mov	r1, r0
   1e054:	4628      	mov	r0, r5
   1e056:	f7ff fdb3 	bl	1dbc0 <net_header_fits>
   1e05a:	b120      	cbz	r0, 1e066 <net_icmpv6_get_hdr+0x24>
		return hdr;
   1e05c:	4626      	mov	r6, r4
	if (net_icmp_header_fits(pkt, icmp_hdr)) {
   1e05e:	b126      	cbz	r6, 1e06a <net_icmpv6_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e060:	4620      	mov	r0, r4
   1e062:	b005      	add	sp, #20
   1e064:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   1e066:	2600      	movs	r6, #0
   1e068:	e7f9      	b.n	1e05e <net_icmpv6_get_hdr+0x1c>
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e06a:	68a8      	ldr	r0, [r5, #8]
   1e06c:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt), &pos, &hdr->type);
   1e070:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
static inline struct net_buf *net_frag_read_u8(struct net_buf *frag,
					      u16_t offset,
					      u16_t *pos,
					      u8_t *value)
{
	return net_frag_read(frag, offset, pos, 1, value);
   1e074:	9700      	str	r7, [sp, #0]
   1e076:	2301      	movs	r3, #1
   1e078:	f10d 020e 	add.w	r2, sp, #14
   1e07c:	4421      	add	r1, r4
   1e07e:	f7ff f85a 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->code);
   1e082:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e086:	1c7b      	adds	r3, r7, #1
   1e088:	9300      	str	r3, [sp, #0]
   1e08a:	2301      	movs	r3, #1
   1e08c:	f10d 020e 	add.w	r2, sp, #14
   1e090:	f7ff f851 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e094:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   1e098:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   1e09a:	9300      	str	r3, [sp, #0]
   1e09c:	2302      	movs	r3, #2
   1e09e:	f10d 020e 	add.w	r2, sp, #14
   1e0a2:	f7ff f848 	bl	1d136 <net_frag_read>
	if (!frag) {
   1e0a6:	b108      	cbz	r0, 1e0ac <net_icmpv6_get_hdr+0x6a>
	return hdr;
   1e0a8:	463c      	mov	r4, r7
   1e0aa:	e7d9      	b.n	1e060 <net_icmpv6_get_hdr+0x1e>
		return NULL;
   1e0ac:	4634      	mov	r4, r6
   1e0ae:	e7d7      	b.n	1e060 <net_icmpv6_get_hdr+0x1e>

0001e0b0 <net_icmpv6_set_hdr>:

struct net_icmp_hdr *net_icmpv6_set_hdr(struct net_pkt *pkt,
					struct net_icmp_hdr *hdr)
{
   1e0b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e0b4:	b086      	sub	sp, #24
   1e0b6:	4606      	mov	r6, r0
   1e0b8:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   1e0ba:	2204      	movs	r2, #4
   1e0bc:	f7ff fd80 	bl	1dbc0 <net_header_fits>
   1e0c0:	b128      	cbz	r0, 1e0ce <net_icmpv6_set_hdr+0x1e>
		return hdr;
   1e0c2:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_icmp_header_fits(pkt, hdr)) {
   1e0c4:	b12d      	cbz	r5, 1e0d2 <net_icmpv6_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   1e0c6:	4620      	mov	r0, r4
   1e0c8:	b006      	add	sp, #24
   1e0ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   1e0ce:	2500      	movs	r5, #0
   1e0d0:	e7f8      	b.n	1e0c4 <net_icmpv6_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e0d2:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt), &pos,
   1e0d6:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e0da:	f44f 777a 	mov.w	r7, #1000	; 0x3e8
   1e0de:	9702      	str	r7, [sp, #8]
   1e0e0:	9401      	str	r4, [sp, #4]
   1e0e2:	f04f 0801 	mov.w	r8, #1
   1e0e6:	f8cd 8000 	str.w	r8, [sp]
   1e0ea:	f10d 0316 	add.w	r3, sp, #22
   1e0ee:	440a      	add	r2, r1
   1e0f0:	68b1      	ldr	r1, [r6, #8]
   1e0f2:	4630      	mov	r0, r6
   1e0f4:	f7ff f891 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->code),
   1e0f8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e0fc:	eb04 0308 	add.w	r3, r4, r8
   1e100:	9702      	str	r7, [sp, #8]
   1e102:	9301      	str	r3, [sp, #4]
   1e104:	f8cd 8000 	str.w	r8, [sp]
   1e108:	f10d 0316 	add.w	r3, sp, #22
   1e10c:	4601      	mov	r1, r0
   1e10e:	4630      	mov	r0, r6
   1e110:	f7ff f883 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e114:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   1e118:	1ca3      	adds	r3, r4, #2
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   1e11a:	9702      	str	r7, [sp, #8]
   1e11c:	9301      	str	r3, [sp, #4]
   1e11e:	2302      	movs	r3, #2
   1e120:	9300      	str	r3, [sp, #0]
   1e122:	f10d 0316 	add.w	r3, sp, #22
   1e126:	4601      	mov	r1, r0
   1e128:	4630      	mov	r0, r6
   1e12a:	f7ff f876 	bl	1d21a <net_pkt_write>
	if (!frag) {
   1e12e:	2800      	cmp	r0, #0
   1e130:	d1c9      	bne.n	1e0c6 <net_icmpv6_set_hdr+0x16>
		return NULL;
   1e132:	462c      	mov	r4, r5
   1e134:	e7c7      	b.n	1e0c6 <net_icmpv6_set_hdr+0x16>
	...

0001e138 <handle_echo_request>:

	return hdr;
}

static enum net_verdict handle_echo_request(struct net_pkt *orig)
{
   1e138:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1e13c:	b09a      	sub	sp, #104	; 0x68
   1e13e:	4606      	mov	r6, r0
	return pkt->iface;
   1e140:	6945      	ldr	r5, [r0, #20]

	echo_request_debug(orig);

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e142:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e146:	2000      	movs	r0, #0
   1e148:	f7fe fe06 	bl	1cd58 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e14c:	2800      	cmp	r0, #0
   1e14e:	f000 80a1 	beq.w	1e294 <handle_echo_request+0x15c>
   1e152:	4604      	mov	r4, r0
	return pkt->frags->data;
   1e154:	68b3      	ldr	r3, [r6, #8]
	size_t bytes = 0;
   1e156:	2100      	movs	r1, #0
   1e158:	e002      	b.n	1e160 <handle_echo_request+0x28>
		bytes += buf->len;
   1e15a:	899a      	ldrh	r2, [r3, #12]
   1e15c:	4411      	add	r1, r2
		buf = buf->frags;
   1e15e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1e160:	2b00      	cmp	r3, #0
   1e162:	d1fa      	bne.n	1e15a <handle_echo_request+0x22>
	return net_pkt_copy(pkt, net_buf_frags_len(pkt->frags),
   1e164:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e168:	2200      	movs	r2, #0
   1e16a:	4630      	mov	r0, r6
   1e16c:	f7fe fea6 	bl	1cebc <net_pkt_copy>

	payload_len = sys_get_be16(NET_IPV6_HDR(orig)->len) -
		sizeof(NET_ICMPH_LEN) - NET_ICMPV6_UNUSED_LEN;

	frag = net_pkt_copy_all(orig, 0, PKT_WAIT_TIME);
	if (!frag) {
   1e170:	4607      	mov	r7, r0
   1e172:	2800      	cmp	r0, #0
   1e174:	f000 808b 	beq.w	1e28e <handle_echo_request+0x156>
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e178:	4601      	mov	r1, r0
   1e17a:	4620      	mov	r0, r4
   1e17c:	f7fe fe87 	bl	1ce8e <net_pkt_frag_add>
	pkt->family = family;
   1e180:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e184:	220a      	movs	r2, #10
   1e186:	f362 03c6 	bfi	r3, r2, #3, #4
   1e18a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e18e:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e190:	7d6b      	ldrb	r3, [r5, #21]
   1e192:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e196:	7d6b      	ldrb	r3, [r5, #21]
   1e198:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e19c:	f107 0008 	add.w	r0, r7, #8
   1e1a0:	f7fc f98d 	bl	1a4be <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e1a4:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ip_hdr_len = len;
   1e1a8:	2328      	movs	r3, #40	; 0x28
   1e1aa:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->ipv6_ext_len;
   1e1ae:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	net_pkt_set_ip_hdr_len(pkt, sizeof(struct net_ipv6_hdr));

	if (net_pkt_ipv6_ext_len(orig)) {
   1e1b2:	2b00      	cmp	r3, #0
   1e1b4:	d076      	beq.n	1e2a4 <handle_echo_request+0x16c>
	pkt->ipv6_ext_len = len;
   1e1b6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1e1ba:	68a3      	ldr	r3, [r4, #8]
   1e1bc:	689b      	ldr	r3, [r3, #8]
	} else {
		net_pkt_set_ipv6_ext_len(pkt, 0);
	}

	/* Set up IPv6 Header fields */
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e1be:	2260      	movs	r2, #96	; 0x60
   1e1c0:	701a      	strb	r2, [r3, #0]
   1e1c2:	68a3      	ldr	r3, [r4, #8]
   1e1c4:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e1c6:	2300      	movs	r3, #0
   1e1c8:	7053      	strb	r3, [r2, #1]
   1e1ca:	68a2      	ldr	r2, [r4, #8]
   1e1cc:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e1ce:	7093      	strb	r3, [r2, #2]
   1e1d0:	70d3      	strb	r3, [r2, #3]
   1e1d2:	68a3      	ldr	r3, [r4, #8]
   1e1d4:	689b      	ldr	r3, [r3, #8]
	return iface->ipv6.hop_limit;
   1e1d6:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
	NET_IPV6_HDR(pkt)->hop_limit = net_if_ipv6_get_hop_limit(iface);
   1e1da:	71da      	strb	r2, [r3, #7]
   1e1dc:	68a3      	ldr	r3, [r4, #8]
   1e1de:	f8d3 c008 	ldr.w	ip, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   1e1e2:	f89c 3018 	ldrb.w	r3, [ip, #24]

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   1e1e6:	2bff      	cmp	r3, #255	; 0xff
   1e1e8:	d060      	beq.n	1e2ac <handle_echo_request+0x174>
   1e1ea:	68b3      	ldr	r3, [r6, #8]
   1e1ec:	689d      	ldr	r5, [r3, #8]
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e1ee:	af0e      	add	r7, sp, #56	; 0x38
   1e1f0:	462b      	mov	r3, r5
   1e1f2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e1f6:	6859      	ldr	r1, [r3, #4]
   1e1f8:	689a      	ldr	r2, [r3, #8]
   1e1fa:	68db      	ldr	r3, [r3, #12]
   1e1fc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e1fe:	af01      	add	r7, sp, #4
   1e200:	ab0e      	add	r3, sp, #56	; 0x38
   1e202:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e204:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e208:	f10d 0e48 	add.w	lr, sp, #72	; 0x48
   1e20c:	462b      	mov	r3, r5
   1e20e:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e212:	6859      	ldr	r1, [r3, #4]
   1e214:	689a      	ldr	r2, [r3, #8]
   1e216:	68db      	ldr	r3, [r3, #12]
   1e218:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e21c:	ad12      	add	r5, sp, #72	; 0x48
   1e21e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e220:	f8cc 0008 	str.w	r0, [ip, #8]
   1e224:	f8cc 100c 	str.w	r1, [ip, #12]
   1e228:	f8cc 2010 	str.w	r2, [ip, #16]
   1e22c:	f8cc 3014 	str.w	r3, [ip, #20]
   1e230:	68a3      	ldr	r3, [r4, #8]
   1e232:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e236:	ad16      	add	r5, sp, #88	; 0x58
   1e238:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e23c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
   1e240:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e242:	f8ce 0018 	str.w	r0, [lr, #24]
   1e246:	f8ce 101c 	str.w	r1, [lr, #28]
   1e24a:	f8ce 2020 	str.w	r2, [lr, #32]
   1e24e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
			goto drop;
		}
#endif
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e252:	6ab3      	ldr	r3, [r6, #40]	; 0x28
   1e254:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e256:	f896 302c 	ldrb.w	r3, [r6, #44]	; 0x2c
   1e25a:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	/* We must not set the destination ll address here but trust
	 * that it is set properly using a value from neighbor cache.
	 */
	net_pkt_ll_dst(pkt)->addr = NULL;
   1e25e:	2500      	movs	r5, #0
   1e260:	62a5      	str	r5, [r4, #40]	; 0x28

	/* ICMPv6 fields */
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1e262:	a905      	add	r1, sp, #20
   1e264:	4620      	mov	r0, r4
   1e266:	f7ff feec 	bl	1e042 <net_icmpv6_get_hdr>
   1e26a:	4601      	mov	r1, r0
	icmp_hdr->type = NET_ICMPV6_ECHO_REPLY;
   1e26c:	2381      	movs	r3, #129	; 0x81
   1e26e:	7003      	strb	r3, [r0, #0]
	icmp_hdr->code = 0;
   1e270:	7045      	strb	r5, [r0, #1]
	icmp_hdr->chksum = 0;
   1e272:	7085      	strb	r5, [r0, #2]
   1e274:	70c5      	strb	r5, [r0, #3]
	net_icmpv6_set_hdr(pkt, icmp_hdr);
   1e276:	4620      	mov	r0, r4
   1e278:	f7ff ff1a 	bl	1e0b0 <net_icmpv6_set_hdr>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e27c:	68a1      	ldr	r1, [r4, #8]
   1e27e:	4620      	mov	r0, r4
   1e280:	f7ff fe92 	bl	1dfa8 <net_icmpv6_set_chksum>

	echo_reply_debug(pkt);

	if (net_send_data(pkt) < 0) {
   1e284:	4620      	mov	r0, r4
   1e286:	f7fc f9d7 	bl	1a638 <net_send_data>
   1e28a:	42a8      	cmp	r0, r5
   1e28c:	da3c      	bge.n	1e308 <handle_echo_request+0x1d0>
	net_stats_update_icmp_sent();

	return NET_OK;

drop:
	net_pkt_unref(pkt);
   1e28e:	4620      	mov	r0, r4
   1e290:	f7fe fdd3 	bl	1ce3a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e294:	4a21      	ldr	r2, [pc, #132]	; (1e31c <handle_echo_request+0x1e4>)
   1e296:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e298:	3301      	adds	r3, #1
   1e29a:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return NET_DROP;
   1e29c:	2002      	movs	r0, #2
}
   1e29e:	b01a      	add	sp, #104	; 0x68
   1e2a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	pkt->ipv6_ext_len = len;
   1e2a4:	2300      	movs	r3, #0
   1e2a6:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
   1e2aa:	e786      	b.n	1e1ba <handle_echo_request+0x82>
	return pkt->frags->data;
   1e2ac:	68b3      	ldr	r3, [r6, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e2ae:	af06      	add	r7, sp, #24
   1e2b0:	689b      	ldr	r3, [r3, #8]
   1e2b2:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e2b6:	6859      	ldr	r1, [r3, #4]
   1e2b8:	689a      	ldr	r2, [r3, #8]
   1e2ba:	68db      	ldr	r3, [r3, #12]
   1e2bc:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e2be:	af06      	add	r7, sp, #24
   1e2c0:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   1e2c2:	f8cc 0018 	str.w	r0, [ip, #24]
   1e2c6:	f8cc 101c 	str.w	r1, [ip, #28]
   1e2ca:	f8cc 2020 	str.w	r2, [ip, #32]
   1e2ce:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e2d2:	68a3      	ldr	r3, [r4, #8]
   1e2d4:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e2d8:	68b3      	ldr	r3, [r6, #8]
   1e2da:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e2dc:	3118      	adds	r1, #24
   1e2de:	4628      	mov	r0, r5
   1e2e0:	f7fd f910 	bl	1b504 <net_if_ipv6_select_src_addr>
   1e2e4:	4603      	mov	r3, r0
   1e2e6:	ad0a      	add	r5, sp, #40	; 0x28
   1e2e8:	6800      	ldr	r0, [r0, #0]
   1e2ea:	6859      	ldr	r1, [r3, #4]
   1e2ec:	689a      	ldr	r2, [r3, #8]
   1e2ee:	68db      	ldr	r3, [r3, #12]
   1e2f0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e2f2:	ad0a      	add	r5, sp, #40	; 0x28
   1e2f4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e2f6:	f8c8 0008 	str.w	r0, [r8, #8]
   1e2fa:	f8c8 100c 	str.w	r1, [r8, #12]
   1e2fe:	f8c8 2010 	str.w	r2, [r8, #16]
   1e302:	f8c8 3014 	str.w	r3, [r8, #20]
   1e306:	e7a4      	b.n	1e252 <handle_echo_request+0x11a>
	net_pkt_unref(orig);
   1e308:	4630      	mov	r0, r6
   1e30a:	f7fe fd96 	bl	1ce3a <net_pkt_unref>
	net_stats.icmp.sent++;
   1e30e:	4a03      	ldr	r2, [pc, #12]	; (1e31c <handle_echo_request+0x1e4>)
   1e310:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e312:	3301      	adds	r3, #1
   1e314:	6393      	str	r3, [r2, #56]	; 0x38
	return NET_OK;
   1e316:	4628      	mov	r0, r5
   1e318:	e7c1      	b.n	1e29e <handle_echo_request+0x166>
   1e31a:	bf00      	nop
   1e31c:	20002ab8 	.word	0x20002ab8

0001e320 <net_icmpv6_get_ns_hdr>:
{
   1e320:	b570      	push	{r4, r5, r6, lr}
   1e322:	b084      	sub	sp, #16
   1e324:	4605      	mov	r5, r0
   1e326:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e328:	2104      	movs	r1, #4
   1e32a:	f7ff f874 	bl	1d416 <net_pkt_icmp_opt_data>
   1e32e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e330:	2214      	movs	r2, #20
   1e332:	4601      	mov	r1, r0
   1e334:	4628      	mov	r0, r5
   1e336:	f7ff fc43 	bl	1dbc0 <net_header_fits>
   1e33a:	b110      	cbz	r0, 1e342 <net_icmpv6_get_ns_hdr+0x22>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e33c:	4620      	mov	r0, r4
}
   1e33e:	b004      	add	sp, #16
   1e340:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read(pkt->frags,
   1e342:	68a8      	ldr	r0, [r5, #8]
			     net_pkt_ip_hdr_len(pkt) +
   1e344:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e348:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e34c:	4419      	add	r1, r3
	frag = net_frag_read(pkt->frags,
   1e34e:	3108      	adds	r1, #8
			     &pos, sizeof(struct in6_addr), (u8_t *)&hdr->tgt);
   1e350:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(pkt->frags,
   1e352:	9300      	str	r3, [sp, #0]
   1e354:	2310      	movs	r3, #16
   1e356:	f10d 020e 	add.w	r2, sp, #14
   1e35a:	b289      	uxth	r1, r1
   1e35c:	f7fe feeb 	bl	1d136 <net_frag_read>
	if (!frag) {
   1e360:	2800      	cmp	r0, #0
   1e362:	d0ec      	beq.n	1e33e <net_icmpv6_get_ns_hdr+0x1e>
	return hdr;
   1e364:	4630      	mov	r0, r6
   1e366:	e7ea      	b.n	1e33e <net_icmpv6_get_ns_hdr+0x1e>

0001e368 <net_icmpv6_set_ns_hdr>:
{
   1e368:	b570      	push	{r4, r5, r6, lr}
   1e36a:	b086      	sub	sp, #24
   1e36c:	4605      	mov	r5, r0
   1e36e:	460e      	mov	r6, r1
	const u32_t reserved = 0;
   1e370:	2300      	movs	r3, #0
   1e372:	9305      	str	r3, [sp, #20]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e374:	2104      	movs	r1, #4
   1e376:	f7ff f84e 	bl	1d416 <net_pkt_icmp_opt_data>
   1e37a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e37c:	2214      	movs	r2, #20
   1e37e:	4601      	mov	r1, r0
   1e380:	4628      	mov	r0, r5
   1e382:	f7ff fc1d 	bl	1dbc0 <net_header_fits>
   1e386:	b110      	cbz	r0, 1e38e <net_icmpv6_set_ns_hdr+0x26>
		return (struct net_icmpv6_ns_hdr *)opt_data;
   1e388:	4620      	mov	r0, r4
}
   1e38a:	b006      	add	sp, #24
   1e38c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e38e:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e392:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e396:	441a      	add	r2, r3
   1e398:	3204      	adds	r2, #4
   1e39a:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e39e:	9402      	str	r4, [sp, #8]
   1e3a0:	ab05      	add	r3, sp, #20
   1e3a2:	9301      	str	r3, [sp, #4]
   1e3a4:	2304      	movs	r3, #4
   1e3a6:	9300      	str	r3, [sp, #0]
   1e3a8:	f10d 0312 	add.w	r3, sp, #18
   1e3ac:	b292      	uxth	r2, r2
   1e3ae:	68a9      	ldr	r1, [r5, #8]
   1e3b0:	4628      	mov	r0, r5
   1e3b2:	f7fe ff32 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e3b6:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e3ba:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e3bc:	9402      	str	r4, [sp, #8]
   1e3be:	9301      	str	r3, [sp, #4]
   1e3c0:	2310      	movs	r3, #16
   1e3c2:	9300      	str	r3, [sp, #0]
   1e3c4:	f10d 0312 	add.w	r3, sp, #18
   1e3c8:	4601      	mov	r1, r0
   1e3ca:	4628      	mov	r0, r5
   1e3cc:	f7fe ff25 	bl	1d21a <net_pkt_write>
	if (!frag) {
   1e3d0:	2800      	cmp	r0, #0
   1e3d2:	d0da      	beq.n	1e38a <net_icmpv6_set_ns_hdr+0x22>
	return hdr;
   1e3d4:	4630      	mov	r0, r6
   1e3d6:	e7d8      	b.n	1e38a <net_icmpv6_set_ns_hdr+0x22>

0001e3d8 <net_icmpv6_get_nd_opt_hdr>:
{
   1e3d8:	b570      	push	{r4, r5, r6, lr}
   1e3da:	b084      	sub	sp, #16
   1e3dc:	4605      	mov	r5, r0
   1e3de:	460e      	mov	r6, r1
	return pkt->ipv6_ext_opt_len;
   1e3e0:	f890 103c 	ldrb.w	r1, [r0, #60]	; 0x3c
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr) +
   1e3e4:	3104      	adds	r1, #4
   1e3e6:	f7ff f816 	bl	1d416 <net_pkt_icmp_opt_data>
   1e3ea:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e3ec:	2202      	movs	r2, #2
   1e3ee:	4601      	mov	r1, r0
   1e3f0:	4628      	mov	r0, r5
   1e3f2:	f7ff fbe5 	bl	1dbc0 <net_header_fits>
   1e3f6:	b110      	cbz	r0, 1e3fe <net_icmpv6_get_nd_opt_hdr+0x26>
		return (struct net_icmpv6_nd_opt_hdr *)opt_data;
   1e3f8:	4620      	mov	r0, r4
}
   1e3fa:	b004      	add	sp, #16
   1e3fc:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags,
   1e3fe:	68a8      	ldr	r0, [r5, #8]
				net_pkt_ip_hdr_len(pkt) +
   1e400:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e404:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1e408:	4419      	add	r1, r3
				net_pkt_ipv6_ext_opt_len(pkt),
   1e40a:	f895 303c 	ldrb.w	r3, [r5, #60]	; 0x3c
				sizeof(struct net_icmp_hdr) +
   1e40e:	4419      	add	r1, r3
   1e410:	b289      	uxth	r1, r1
	frag = net_frag_read_u8(pkt->frags,
   1e412:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e414:	9600      	str	r6, [sp, #0]
   1e416:	2301      	movs	r3, #1
   1e418:	f10d 020e 	add.w	r2, sp, #14
   1e41c:	b289      	uxth	r1, r1
   1e41e:	f7fe fe8a 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->len);
   1e422:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e426:	1c73      	adds	r3, r6, #1
   1e428:	9300      	str	r3, [sp, #0]
   1e42a:	2301      	movs	r3, #1
   1e42c:	f10d 020e 	add.w	r2, sp, #14
   1e430:	f7fe fe81 	bl	1d136 <net_frag_read>
	if (!frag) {
   1e434:	2800      	cmp	r0, #0
   1e436:	d0e0      	beq.n	1e3fa <net_icmpv6_get_nd_opt_hdr+0x22>
	return hdr;
   1e438:	4630      	mov	r0, r6
   1e43a:	e7de      	b.n	1e3fa <net_icmpv6_get_nd_opt_hdr+0x22>

0001e43c <net_icmpv6_get_na_hdr>:
{
   1e43c:	b570      	push	{r4, r5, r6, lr}
   1e43e:	b084      	sub	sp, #16
   1e440:	4605      	mov	r5, r0
   1e442:	460e      	mov	r6, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e444:	2104      	movs	r1, #4
   1e446:	f7fe ffe6 	bl	1d416 <net_pkt_icmp_opt_data>
   1e44a:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e44c:	2214      	movs	r2, #20
   1e44e:	4601      	mov	r1, r0
   1e450:	4628      	mov	r0, r5
   1e452:	f7ff fbb5 	bl	1dbc0 <net_header_fits>
   1e456:	b110      	cbz	r0, 1e45e <net_icmpv6_get_na_hdr+0x22>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e458:	4620      	mov	r0, r4
}
   1e45a:	b004      	add	sp, #16
   1e45c:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e45e:	68a8      	ldr	r0, [r5, #8]
   1e460:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e464:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e468:	4419      	add	r1, r3
   1e46a:	3104      	adds	r1, #4
   1e46c:	9600      	str	r6, [sp, #0]
   1e46e:	2301      	movs	r3, #1
   1e470:	f10d 020e 	add.w	r2, sp, #14
   1e474:	b289      	uxth	r1, r1
   1e476:	f7fe fe5e 	bl	1d136 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 3); /* reserved */
   1e47a:	f8bd 100e 	ldrh.w	r1, [sp, #14]
	return net_frag_read(frag, offset, pos, len, NULL);
   1e47e:	2300      	movs	r3, #0
   1e480:	9300      	str	r3, [sp, #0]
   1e482:	2303      	movs	r3, #3
   1e484:	f10d 020e 	add.w	r2, sp, #14
   1e488:	f7fe fe55 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e48c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->tgt);
   1e490:	1d33      	adds	r3, r6, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(struct in6_addr),
   1e492:	9300      	str	r3, [sp, #0]
   1e494:	2310      	movs	r3, #16
   1e496:	f10d 020e 	add.w	r2, sp, #14
   1e49a:	f7fe fe4c 	bl	1d136 <net_frag_read>
	if (!frag) {
   1e49e:	2800      	cmp	r0, #0
   1e4a0:	d0db      	beq.n	1e45a <net_icmpv6_get_na_hdr+0x1e>
	return hdr;
   1e4a2:	4630      	mov	r0, r6
   1e4a4:	e7d9      	b.n	1e45a <net_icmpv6_get_na_hdr+0x1e>

0001e4a6 <net_icmpv6_set_na_hdr>:
{
   1e4a6:	b570      	push	{r4, r5, r6, lr}
   1e4a8:	b086      	sub	sp, #24
   1e4aa:	4605      	mov	r5, r0
   1e4ac:	460e      	mov	r6, r1
	const u8_t reserved[3] = { 0 };
   1e4ae:	2300      	movs	r3, #0
   1e4b0:	f8ad 3014 	strh.w	r3, [sp, #20]
   1e4b4:	f88d 3016 	strb.w	r3, [sp, #22]
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e4b8:	2104      	movs	r1, #4
   1e4ba:	f7fe ffac 	bl	1d416 <net_pkt_icmp_opt_data>
   1e4be:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e4c0:	2214      	movs	r2, #20
   1e4c2:	4601      	mov	r1, r0
   1e4c4:	4628      	mov	r0, r5
   1e4c6:	f7ff fb7b 	bl	1dbc0 <net_header_fits>
   1e4ca:	b110      	cbz	r0, 1e4d2 <net_icmpv6_set_na_hdr+0x2c>
		return (struct net_icmpv6_na_hdr *)opt_data;
   1e4cc:	4620      	mov	r0, r4
}
   1e4ce:	b006      	add	sp, #24
   1e4d0:	bd70      	pop	{r4, r5, r6, pc}
			     net_pkt_ip_hdr_len(pkt) +
   1e4d2:	f895 2033 	ldrb.w	r2, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   1e4d6:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   1e4da:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, pkt->frags,
   1e4dc:	3204      	adds	r2, #4
   1e4de:	f44f 747a 	mov.w	r4, #1000	; 0x3e8
   1e4e2:	9402      	str	r4, [sp, #8]
   1e4e4:	9601      	str	r6, [sp, #4]
   1e4e6:	2301      	movs	r3, #1
   1e4e8:	9300      	str	r3, [sp, #0]
   1e4ea:	f10d 0312 	add.w	r3, sp, #18
   1e4ee:	b292      	uxth	r2, r2
   1e4f0:	68a9      	ldr	r1, [r5, #8]
   1e4f2:	4628      	mov	r0, r5
   1e4f4:	f7fe fe91 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(reserved),
   1e4f8:	f8bd 2012 	ldrh.w	r2, [sp, #18]
   1e4fc:	9402      	str	r4, [sp, #8]
   1e4fe:	ab05      	add	r3, sp, #20
   1e500:	9301      	str	r3, [sp, #4]
   1e502:	2303      	movs	r3, #3
   1e504:	9300      	str	r3, [sp, #0]
   1e506:	f10d 0312 	add.w	r3, sp, #18
   1e50a:	4601      	mov	r1, r0
   1e50c:	4628      	mov	r0, r5
   1e50e:	f7fe fe84 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e512:	f8bd 2012 	ldrh.w	r2, [sp, #18]
			     (u8_t *)&hdr->tgt, PKT_WAIT_TIME);
   1e516:	1d33      	adds	r3, r6, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(struct in6_addr),
   1e518:	9402      	str	r4, [sp, #8]
   1e51a:	9301      	str	r3, [sp, #4]
   1e51c:	2310      	movs	r3, #16
   1e51e:	9300      	str	r3, [sp, #0]
   1e520:	f10d 0312 	add.w	r3, sp, #18
   1e524:	4601      	mov	r1, r0
   1e526:	4628      	mov	r0, r5
   1e528:	f7fe fe77 	bl	1d21a <net_pkt_write>
	if (!frag) {
   1e52c:	2800      	cmp	r0, #0
   1e52e:	d0ce      	beq.n	1e4ce <net_icmpv6_set_na_hdr+0x28>
	return hdr;
   1e530:	4630      	mov	r0, r6
   1e532:	e7cc      	b.n	1e4ce <net_icmpv6_set_na_hdr+0x28>

0001e534 <net_icmpv6_get_ra_hdr>:
{
   1e534:	b570      	push	{r4, r5, r6, lr}
   1e536:	b084      	sub	sp, #16
   1e538:	4606      	mov	r6, r0
   1e53a:	460d      	mov	r5, r1
	opt_data = net_pkt_icmp_opt_data(pkt, sizeof(struct net_icmp_hdr));
   1e53c:	2104      	movs	r1, #4
   1e53e:	f7fe ff6a 	bl	1d416 <net_pkt_icmp_opt_data>
   1e542:	4604      	mov	r4, r0
	if (net_header_fits(pkt, opt_data, sizeof(*hdr))) {
   1e544:	220c      	movs	r2, #12
   1e546:	4601      	mov	r1, r0
   1e548:	4630      	mov	r0, r6
   1e54a:	f7ff fb39 	bl	1dbc0 <net_header_fits>
   1e54e:	b110      	cbz	r0, 1e556 <net_icmpv6_get_ra_hdr+0x22>
		return (struct net_icmpv6_ra_hdr *)opt_data;
   1e550:	4620      	mov	r0, r4
}
   1e552:	b004      	add	sp, #16
   1e554:	bd70      	pop	{r4, r5, r6, pc}
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e556:	68b0      	ldr	r0, [r6, #8]
   1e558:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1e55c:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
	frag = net_frag_read_u8(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   1e560:	4419      	add	r1, r3
   1e562:	3104      	adds	r1, #4
	return net_frag_read(frag, offset, pos, 1, value);
   1e564:	9500      	str	r5, [sp, #0]
   1e566:	2301      	movs	r3, #1
   1e568:	f10d 020e 	add.w	r2, sp, #14
   1e56c:	b289      	uxth	r1, r1
   1e56e:	f7fe fde2 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   1e572:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   1e576:	1c6b      	adds	r3, r5, #1
   1e578:	9300      	str	r3, [sp, #0]
   1e57a:	2301      	movs	r3, #1
   1e57c:	f10d 020e 	add.w	r2, sp, #14
   1e580:	f7fe fdd9 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e584:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->router_lifetime);
   1e588:	1cab      	adds	r3, r5, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->router_lifetime),
   1e58a:	9300      	str	r3, [sp, #0]
   1e58c:	2302      	movs	r3, #2
   1e58e:	f10d 020e 	add.w	r2, sp, #14
   1e592:	f7fe fdd0 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e596:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->reachable_time);
   1e59a:	1d2b      	adds	r3, r5, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->reachable_time),
   1e59c:	9300      	str	r3, [sp, #0]
   1e59e:	2304      	movs	r3, #4
   1e5a0:	f10d 020e 	add.w	r2, sp, #14
   1e5a4:	f7fe fdc7 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e5a8:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->retrans_timer);
   1e5ac:	f105 0308 	add.w	r3, r5, #8
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->retrans_timer),
   1e5b0:	9300      	str	r3, [sp, #0]
   1e5b2:	2304      	movs	r3, #4
   1e5b4:	f10d 020e 	add.w	r2, sp, #14
   1e5b8:	f7fe fdbd 	bl	1d136 <net_frag_read>
	if (!frag) {
   1e5bc:	2800      	cmp	r0, #0
   1e5be:	d0c8      	beq.n	1e552 <net_icmpv6_get_ra_hdr+0x1e>
	return hdr;
   1e5c0:	4628      	mov	r0, r5
   1e5c2:	e7c6      	b.n	1e552 <net_icmpv6_get_ra_hdr+0x1e>

0001e5c4 <net_icmpv6_send_error>:

int net_icmpv6_send_error(struct net_pkt *orig, u8_t type, u8_t code,
			  u32_t param)
{
   1e5c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e5c8:	b09f      	sub	sp, #124	; 0x7c
   1e5ca:	4605      	mov	r5, r0
   1e5cc:	4688      	mov	r8, r1
   1e5ce:	4692      	mov	sl, r2
   1e5d0:	4699      	mov	r9, r3
	return pkt->frags->data;
   1e5d2:	6883      	ldr	r3, [r0, #8]
   1e5d4:	689b      	ldr	r3, [r3, #8]
	struct net_buf *frag;
	struct net_if *iface;
	size_t extra_len, reserve;
	int err = -EIO;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_ICMPV6) {
   1e5d6:	799b      	ldrb	r3, [r3, #6]
   1e5d8:	2b3a      	cmp	r3, #58	; 0x3a
   1e5da:	d01d      	beq.n	1e618 <net_icmpv6_send_error+0x54>
	return pkt->iface;
   1e5dc:	696f      	ldr	r7, [r5, #20]
		}
	}

	iface = net_pkt_iface(orig);

	pkt = net_pkt_get_reserve_tx(0, PKT_WAIT_TIME);
   1e5de:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   1e5e2:	2000      	movs	r0, #0
   1e5e4:	f7fe fbb8 	bl	1cd58 <net_pkt_get_reserve_tx>
	if (!pkt) {
   1e5e8:	4604      	mov	r4, r0
   1e5ea:	2800      	cmp	r0, #0
   1e5ec:	f000 8141 	beq.w	1e872 <net_icmpv6_send_error+0x2ae>
	return pkt->frags->data;
   1e5f0:	68ab      	ldr	r3, [r5, #8]
   1e5f2:	6899      	ldr	r1, [r3, #8]
	 * to store the param variable.
	 */
	reserve = sizeof(struct net_ipv6_hdr) + sizeof(struct net_icmp_hdr) +
		NET_ICMPV6_UNUSED_LEN;

	if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_UDP) {
   1e5f4:	798b      	ldrb	r3, [r1, #6]
   1e5f6:	2b11      	cmp	r3, #17
   1e5f8:	d019      	beq.n	1e62e <net_icmpv6_send_error+0x6a>
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_udp_hdr);
	} else if (NET_IPV6_HDR(orig)->nexthdr == IPPROTO_TCP) {
   1e5fa:	2b06      	cmp	r3, #6
   1e5fc:	d019      	beq.n	1e632 <net_icmpv6_send_error+0x6e>
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e5fe:	687b      	ldr	r3, [r7, #4]
   1e600:	689b      	ldr	r3, [r3, #8]
   1e602:	3118      	adds	r1, #24
   1e604:	4638      	mov	r0, r7
   1e606:	4798      	blx	r3
		extra_len = sizeof(struct net_ipv6_hdr) +
			sizeof(struct net_tcp_hdr);
	} else {
		size_t space = CONFIG_NET_BUF_DATA_SIZE -
   1e608:	f5c0 7000 	rsb	r0, r0, #512	; 0x200
			net_if_get_ll_reserve(iface,
					      &NET_IPV6_HDR(orig)->dst);

		if (reserve > space) {
   1e60c:	282f      	cmp	r0, #47	; 0x2f
   1e60e:	f240 80de 	bls.w	1e7ce <net_icmpv6_send_error+0x20a>
			extra_len = 0;
		} else {
			extra_len = space - reserve;
   1e612:	f1a0 0630 	sub.w	r6, r0, #48	; 0x30
   1e616:	e00d      	b.n	1e634 <net_icmpv6_send_error+0x70>
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e618:	a906      	add	r1, sp, #24
   1e61a:	f7ff fd12 	bl	1e042 <net_icmpv6_get_hdr>
   1e61e:	b118      	cbz	r0, 1e628 <net_icmpv6_send_error+0x64>
		    icmp_hdr->code < 128) {
   1e620:	f99d 3019 	ldrsb.w	r3, [sp, #25]
		if (!net_icmpv6_get_hdr(orig, icmp_hdr) ||
   1e624:	2b00      	cmp	r3, #0
   1e626:	dbd9      	blt.n	1e5dc <net_icmpv6_send_error+0x18>
			err = -EINVAL;
   1e628:	f06f 0515 	mvn.w	r5, #21
   1e62c:	e119      	b.n	1e862 <net_icmpv6_send_error+0x29e>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e62e:	2630      	movs	r6, #48	; 0x30
   1e630:	e000      	b.n	1e634 <net_icmpv6_send_error+0x70>
		extra_len = sizeof(struct net_ipv6_hdr) +
   1e632:	263c      	movs	r6, #60	; 0x3c
	}

	/* We only copy minimal IPv6 + next header from original message.
	 * This is so that the memory pressure is minimized.
	 */
	frag = net_pkt_copy(orig, extra_len, reserve, PKT_WAIT_TIME);
   1e634:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   1e638:	2230      	movs	r2, #48	; 0x30
   1e63a:	4631      	mov	r1, r6
   1e63c:	4628      	mov	r0, r5
   1e63e:	f7fe fc3d 	bl	1cebc <net_pkt_copy>
	if (!frag) {
   1e642:	4683      	mov	fp, r0
   1e644:	2800      	cmp	r0, #0
   1e646:	f000 8104 	beq.w	1e852 <net_icmpv6_send_error+0x28e>
		err = -ENOMEM;
		goto drop;
	}

	net_pkt_frag_add(pkt, frag);
   1e64a:	4601      	mov	r1, r0
   1e64c:	4620      	mov	r0, r4
   1e64e:	f7fe fc1e 	bl	1ce8e <net_pkt_frag_add>
	pkt->family = family;
   1e652:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1e656:	220a      	movs	r2, #10
   1e658:	f362 03c6 	bfi	r3, r2, #3, #4
   1e65c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->iface = iface;
   1e660:	6167      	str	r7, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e662:	7d7b      	ldrb	r3, [r7, #21]
   1e664:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e668:	7d7b      	ldrb	r3, [r7, #21]
   1e66a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_set_family(pkt, AF_INET6);
	net_pkt_set_iface(pkt, iface);
	net_pkt_set_ll_reserve(pkt, net_buf_headroom(frag));
   1e66e:	f10b 0008 	add.w	r0, fp, #8
   1e672:	f7fb ff24 	bl	1a4be <net_buf_simple_headroom>
	pkt->ll_reserve = len;
   1e676:	f884 0032 	strb.w	r0, [r4, #50]	; 0x32
	pkt->ipv6_ext_len = len;
   1e67a:	2000      	movs	r0, #0
   1e67c:	f884 003b 	strb.w	r0, [r4, #59]	; 0x3b
	net_pkt_set_ipv6_ext_len(pkt, 0);

	setup_ipv6_header(pkt, extra_len, net_if_ipv6_get_hop_limit(iface),
   1e680:	b2b6      	uxth	r6, r6
	return iface->ipv6.hop_limit;
   1e682:	f897 3294 	ldrb.w	r3, [r7, #660]	; 0x294
   1e686:	f88d 8014 	strb.w	r8, [sp, #20]
   1e68a:	f88d a015 	strb.w	sl, [sp, #21]
	struct net_buf *frag = pkt->frags;
   1e68e:	68a1      	ldr	r1, [r4, #8]
	const u32_t unused = 0;
   1e690:	9006      	str	r0, [sp, #24]
	return pkt->frags->data;
   1e692:	688a      	ldr	r2, [r1, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1e694:	f04f 0e60 	mov.w	lr, #96	; 0x60
   1e698:	f882 e000 	strb.w	lr, [r2]
   1e69c:	68a2      	ldr	r2, [r4, #8]
   1e69e:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1e6a0:	7050      	strb	r0, [r2, #1]
   1e6a2:	68a2      	ldr	r2, [r4, #8]
   1e6a4:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1e6a6:	7090      	strb	r0, [r2, #2]
   1e6a8:	70d0      	strb	r0, [r2, #3]
	sys_put_be16(NET_ICMPH_LEN + extra_len + NET_ICMPV6_UNUSED_LEN,
   1e6aa:	3608      	adds	r6, #8
   1e6ac:	b2b6      	uxth	r6, r6
   1e6ae:	68a2      	ldr	r2, [r4, #8]
   1e6b0:	6892      	ldr	r2, [r2, #8]
	dst[0] = val >> 8;
   1e6b2:	0a30      	lsrs	r0, r6, #8
   1e6b4:	7110      	strb	r0, [r2, #4]
	dst[1] = val;
   1e6b6:	7156      	strb	r6, [r2, #5]
   1e6b8:	68a2      	ldr	r2, [r4, #8]
   1e6ba:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1e6bc:	203a      	movs	r0, #58	; 0x3a
   1e6be:	7190      	strb	r0, [r2, #6]
   1e6c0:	68a2      	ldr	r2, [r4, #8]
   1e6c2:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->hop_limit = hop_limit;
   1e6c4:	71d3      	strb	r3, [r2, #7]
	pkt->ip_hdr_len = len;
   1e6c6:	2228      	movs	r2, #40	; 0x28
   1e6c8:	f884 2033 	strb.w	r2, [r4, #51]	; 0x33
	frag = net_pkt_write(pkt, frag, net_pkt_ip_hdr_len(pkt), &pos,
   1e6cc:	f44f 767a 	mov.w	r6, #1000	; 0x3e8
   1e6d0:	9602      	str	r6, [sp, #8]
   1e6d2:	ab05      	add	r3, sp, #20
   1e6d4:	9301      	str	r3, [sp, #4]
   1e6d6:	f04f 0a01 	mov.w	sl, #1
   1e6da:	f8cd a000 	str.w	sl, [sp]
   1e6de:	f10d 0316 	add.w	r3, sp, #22
   1e6e2:	4620      	mov	r0, r4
   1e6e4:	f7fe fd99 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(icmp_code),
   1e6e8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e6ec:	9602      	str	r6, [sp, #8]
   1e6ee:	f10d 0315 	add.w	r3, sp, #21
   1e6f2:	9301      	str	r3, [sp, #4]
   1e6f4:	f8cd a000 	str.w	sl, [sp]
   1e6f8:	f10d 0316 	add.w	r3, sp, #22
   1e6fc:	4601      	mov	r1, r0
   1e6fe:	4620      	mov	r0, r4
   1e700:	f7fe fd8b 	bl	1d21a <net_pkt_write>
	net_pkt_write(pkt, frag, pos, &pos, 4, (u8_t *)&unused, PKT_WAIT_TIME);
   1e704:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   1e708:	9602      	str	r6, [sp, #8]
   1e70a:	ab06      	add	r3, sp, #24
   1e70c:	9301      	str	r3, [sp, #4]
   1e70e:	2304      	movs	r3, #4
   1e710:	9300      	str	r3, [sp, #0]
   1e712:	f10d 0316 	add.w	r3, sp, #22
   1e716:	4601      	mov	r1, r0
   1e718:	4620      	mov	r0, r4
   1e71a:	f7fe fd7e 	bl	1d21a <net_pkt_write>
			  type, code);

	/* Depending on error option, we store the param into the ICMP message.
	 */
	if (type == NET_ICMPV6_PARAM_PROBLEM) {
   1e71e:	f1b8 0f04 	cmp.w	r8, #4
   1e722:	d056      	beq.n	1e7d2 <net_icmpv6_send_error+0x20e>
	return pkt->frags->data;
   1e724:	68ab      	ldr	r3, [r5, #8]
   1e726:	689e      	ldr	r6, [r3, #8]
   1e728:	7e33      	ldrb	r3, [r6, #24]
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
			     sizeof(struct net_icmp_hdr));
	}

	if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(orig)->dst)) {
   1e72a:	2bff      	cmp	r3, #255	; 0xff
   1e72c:	d05f      	beq.n	1e7ee <net_icmpv6_send_error+0x22a>
				net_if_ipv6_select_src_addr(iface,
						    &NET_IPV6_HDR(orig)->dst));
	} else {
		struct in6_addr addr;

		net_ipaddr_copy(&addr, &NET_IPV6_HDR(orig)->src);
   1e72e:	af12      	add	r7, sp, #72	; 0x48
   1e730:	4633      	mov	r3, r6
   1e732:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e736:	6859      	ldr	r1, [r3, #4]
   1e738:	689a      	ldr	r2, [r3, #8]
   1e73a:	68db      	ldr	r3, [r3, #12]
   1e73c:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   1e73e:	af06      	add	r7, sp, #24
   1e740:	ab12      	add	r3, sp, #72	; 0x48
   1e742:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
   1e744:	e887 000f 	stmia.w	r7, {r0, r1, r2, r3}
   1e748:	68a3      	ldr	r3, [r4, #8]
   1e74a:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e74e:	f10d 0e58 	add.w	lr, sp, #88	; 0x58
   1e752:	4633      	mov	r3, r6
   1e754:	f853 0f18 	ldr.w	r0, [r3, #24]!
   1e758:	6859      	ldr	r1, [r3, #4]
   1e75a:	689a      	ldr	r2, [r3, #8]
   1e75c:	68db      	ldr	r3, [r3, #12]
   1e75e:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e762:	ae16      	add	r6, sp, #88	; 0x58
   1e764:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e766:	f8cc 0008 	str.w	r0, [ip, #8]
   1e76a:	f8cc 100c 	str.w	r1, [ip, #12]
   1e76e:	f8cc 2010 	str.w	r2, [ip, #16]
   1e772:	f8cc 3014 	str.w	r3, [ip, #20]
   1e776:	68a3      	ldr	r3, [r4, #8]
   1e778:	f8d3 e008 	ldr.w	lr, [r3, #8]
				&NET_IPV6_HDR(orig)->dst);
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, &addr);
   1e77c:	ae1a      	add	r6, sp, #104	; 0x68
   1e77e:	e897 000f 	ldmia.w	r7, {r0, r1, r2, r3}
   1e782:	e886 000f 	stmia.w	r6, {r0, r1, r2, r3}
   1e786:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e788:	f8ce 0018 	str.w	r0, [lr, #24]
   1e78c:	f8ce 101c 	str.w	r1, [lr, #28]
   1e790:	f8ce 2020 	str.w	r2, [lr, #32]
   1e794:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	}

	net_pkt_ll_src(pkt)->addr = net_pkt_ll_dst(orig)->addr;
   1e798:	6aab      	ldr	r3, [r5, #40]	; 0x28
   1e79a:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = net_pkt_ll_dst(orig)->len;
   1e79c:	f895 302c 	ldrb.w	r3, [r5, #44]	; 0x2c
   1e7a0:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	net_pkt_ll_dst(pkt)->addr = net_pkt_ll_src(orig)->addr;
   1e7a4:	6a2b      	ldr	r3, [r5, #32]
   1e7a6:	62a3      	str	r3, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->len = net_pkt_ll_src(orig)->len;
   1e7a8:	f895 3024 	ldrb.w	r3, [r5, #36]	; 0x24
   1e7ac:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	/* Clear and then set the chksum */
	frag = net_icmpv6_set_chksum(pkt, pkt->frags);
   1e7b0:	68a1      	ldr	r1, [r4, #8]
   1e7b2:	4620      	mov	r0, r4
   1e7b4:	f7ff fbf8 	bl	1dfa8 <net_icmpv6_set_chksum>
			" from %s to %s", type, code, param,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e7b8:	4620      	mov	r0, r4
   1e7ba:	f7fb ff3d 	bl	1a638 <net_send_data>
   1e7be:	2800      	cmp	r0, #0
   1e7c0:	db4a      	blt.n	1e858 <net_icmpv6_send_error+0x294>
   1e7c2:	4a2d      	ldr	r2, [pc, #180]	; (1e878 <net_icmpv6_send_error+0x2b4>)
   1e7c4:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e7c6:	3301      	adds	r3, #1
   1e7c8:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e7ca:	2500      	movs	r5, #0
   1e7cc:	e04d      	b.n	1e86a <net_icmpv6_send_error+0x2a6>
			extra_len = 0;
   1e7ce:	2600      	movs	r6, #0
   1e7d0:	e730      	b.n	1e634 <net_icmpv6_send_error+0x70>
		sys_put_be32(param, (u8_t *)net_pkt_icmp_data(pkt) +
   1e7d2:	4620      	mov	r0, r4
   1e7d4:	f7fe fe0a 	bl	1d3ec <net_pkt_icmp_data>
	sys_put_be16(val >> 16, dst);
   1e7d8:	ea4f 4319 	mov.w	r3, r9, lsr #16
	dst[0] = val >> 8;
   1e7dc:	0a1a      	lsrs	r2, r3, #8
   1e7de:	7102      	strb	r2, [r0, #4]
	dst[1] = val;
   1e7e0:	7143      	strb	r3, [r0, #5]
	dst[0] = val >> 8;
   1e7e2:	f3c9 2307 	ubfx	r3, r9, #8, #8
   1e7e6:	7183      	strb	r3, [r0, #6]
	dst[1] = val;
   1e7e8:	f880 9007 	strb.w	r9, [r0, #7]
   1e7ec:	e79a      	b.n	1e724 <net_icmpv6_send_error+0x160>
   1e7ee:	68a3      	ldr	r3, [r4, #8]
   1e7f0:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   1e7f4:	f10d 0e28 	add.w	lr, sp, #40	; 0x28
   1e7f8:	4633      	mov	r3, r6
   1e7fa:	f853 0f08 	ldr.w	r0, [r3, #8]!
   1e7fe:	6859      	ldr	r1, [r3, #4]
   1e800:	689a      	ldr	r2, [r3, #8]
   1e802:	68db      	ldr	r3, [r3, #12]
   1e804:	e8ae 000f 	stmia.w	lr!, {r0, r1, r2, r3}
   1e808:	ae0a      	add	r6, sp, #40	; 0x28
   1e80a:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e80c:	f8cc 0018 	str.w	r0, [ip, #24]
   1e810:	f8cc 101c 	str.w	r1, [ip, #28]
   1e814:	f8cc 2020 	str.w	r2, [ip, #32]
   1e818:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   1e81c:	68a3      	ldr	r3, [r4, #8]
   1e81e:	f8d3 8008 	ldr.w	r8, [r3, #8]
   1e822:	68ab      	ldr	r3, [r5, #8]
   1e824:	6899      	ldr	r1, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1e826:	3118      	adds	r1, #24
   1e828:	4638      	mov	r0, r7
   1e82a:	f7fc fe6b 	bl	1b504 <net_if_ipv6_select_src_addr>
   1e82e:	4603      	mov	r3, r0
   1e830:	ae0e      	add	r6, sp, #56	; 0x38
   1e832:	6800      	ldr	r0, [r0, #0]
   1e834:	6859      	ldr	r1, [r3, #4]
   1e836:	689a      	ldr	r2, [r3, #8]
   1e838:	68db      	ldr	r3, [r3, #12]
   1e83a:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1e83c:	ae0e      	add	r6, sp, #56	; 0x38
   1e83e:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1e840:	f8c8 0008 	str.w	r0, [r8, #8]
   1e844:	f8c8 100c 	str.w	r1, [r8, #12]
   1e848:	f8c8 2010 	str.w	r2, [r8, #16]
   1e84c:	f8c8 3014 	str.w	r3, [r8, #20]
   1e850:	e7a2      	b.n	1e798 <net_icmpv6_send_error+0x1d4>
		err = -ENOMEM;
   1e852:	f06f 050b 	mvn.w	r5, #11
   1e856:	e001      	b.n	1e85c <net_icmpv6_send_error+0x298>
	int err = -EIO;
   1e858:	f06f 0504 	mvn.w	r5, #4
	}

drop:
	net_pkt_unref(pkt);
   1e85c:	4620      	mov	r0, r4
   1e85e:	f7fe faec 	bl	1ce3a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e862:	4a05      	ldr	r2, [pc, #20]	; (1e878 <net_icmpv6_send_error+0x2b4>)
   1e864:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e866:	3301      	adds	r3, #1
   1e868:	63d3      	str	r3, [r2, #60]	; 0x3c

drop_no_pkt:
	net_stats_update_icmp_drop();

	return err;
}
   1e86a:	4628      	mov	r0, r5
   1e86c:	b01f      	add	sp, #124	; 0x7c
   1e86e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		err = -ENOMEM;
   1e872:	f06f 050b 	mvn.w	r5, #11
   1e876:	e7f4      	b.n	1e862 <net_icmpv6_send_error+0x29e>
   1e878:	20002ab8 	.word	0x20002ab8

0001e87c <net_icmpv6_send_echo_request>:

int net_icmpv6_send_echo_request(struct net_if *iface,
				 struct in6_addr *dst,
				 u16_t identifier,
				 u16_t sequence)
{
   1e87c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1e880:	b08d      	sub	sp, #52	; 0x34
   1e882:	4605      	mov	r5, r0
   1e884:	460e      	mov	r6, r1
   1e886:	4692      	mov	sl, r2
   1e888:	4699      	mov	r9, r3
	const struct in6_addr *src;
	struct net_pkt *pkt;

	src = net_if_ipv6_select_src_addr(iface, dst);
   1e88a:	f7fc fe3b 	bl	1b504 <net_if_ipv6_select_src_addr>
   1e88e:	4680      	mov	r8, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1e890:	686b      	ldr	r3, [r5, #4]
   1e892:	689b      	ldr	r3, [r3, #8]
   1e894:	4631      	mov	r1, r6
   1e896:	4628      	mov	r0, r5
   1e898:	4798      	blx	r3

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1e89a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1e89e:	f7fe fa5b 	bl	1cd58 <net_pkt_get_reserve_tx>
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt, src, dst, iface, IPPROTO_ICMPV6);
   1e8a2:	273a      	movs	r7, #58	; 0x3a
   1e8a4:	9700      	str	r7, [sp, #0]
   1e8a6:	462b      	mov	r3, r5
   1e8a8:	4632      	mov	r2, r6
   1e8aa:	4641      	mov	r1, r8
   1e8ac:	f000 fcc1 	bl	1f232 <net_ipv6_create_raw>
   1e8b0:	4604      	mov	r4, r0
	pkt->family = family;
   1e8b2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   1e8b6:	220a      	movs	r2, #10
   1e8b8:	f362 03c6 	bfi	r3, r2, #3, #4
   1e8bc:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
	pkt->iface = iface;
   1e8c0:	6145      	str	r5, [r0, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1e8c2:	7d6b      	ldrb	r3, [r5, #21]
   1e8c4:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1e8c8:	7d6b      	ldrb	r3, [r5, #21]
   1e8ca:	f880 302d 	strb.w	r3, [r0, #45]	; 0x2d
   1e8ce:	aa0c      	add	r2, sp, #48	; 0x30
   1e8d0:	2380      	movs	r3, #128	; 0x80
   1e8d2:	f802 3d23 	strb.w	r3, [r2, #-35]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e8d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e8da:	2101      	movs	r1, #1
   1e8dc:	f7fe fbe5 	bl	1d0aa <net_pkt_append>
   1e8e0:	f04f 0b00 	mov.w	fp, #0
   1e8e4:	aa0c      	add	r2, sp, #48	; 0x30
   1e8e6:	f802 bd24 	strb.w	fp, [r2, #-36]!
   1e8ea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e8ee:	2101      	movs	r1, #1
   1e8f0:	4620      	mov	r0, r4
   1e8f2:	f7fe fbda 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e8f6:	ad0c      	add	r5, sp, #48	; 0x30
   1e8f8:	f825 bd22 	strh.w	fp, [r5, #-34]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e8fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e900:	462a      	mov	r2, r5
   1e902:	2102      	movs	r1, #2
   1e904:	4620      	mov	r0, r4
   1e906:	f7fe fbd0 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e90a:	ea4f 221a 	mov.w	r2, sl, lsr #8
   1e90e:	ea42 220a 	orr.w	r2, r2, sl, lsl #8
   1e912:	f8ad 200e 	strh.w	r2, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e916:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e91a:	462a      	mov	r2, r5
   1e91c:	2102      	movs	r1, #2
   1e91e:	4620      	mov	r0, r4
   1e920:	f7fe fbc3 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1e924:	ea4f 2319 	mov.w	r3, r9, lsr #8
   1e928:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   1e92c:	f8ad 300e 	strh.w	r3, [sp, #14]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1e930:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1e934:	462a      	mov	r2, r5
   1e936:	2102      	movs	r1, #2
   1e938:	4620      	mov	r0, r4
   1e93a:	f7fe fbb6 	bl	1d0aa <net_pkt_append>
	return pkt->frags->data;
   1e93e:	68a3      	ldr	r3, [r4, #8]
   1e940:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_pkt_append_u8(pkt, 0);   /* code */
	net_pkt_append_be16(pkt, 0); /* checksum */
	net_pkt_append_be16(pkt, identifier);
	net_pkt_append_be16(pkt, sequence);

	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1e944:	ad04      	add	r5, sp, #16
   1e946:	f8d8 0000 	ldr.w	r0, [r8]
   1e94a:	f8d8 1004 	ldr.w	r1, [r8, #4]
   1e94e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   1e952:	f8d8 300c 	ldr.w	r3, [r8, #12]
   1e956:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e958:	ad04      	add	r5, sp, #16
   1e95a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e95c:	f8cc 0008 	str.w	r0, [ip, #8]
   1e960:	f8cc 100c 	str.w	r1, [ip, #12]
   1e964:	f8cc 2010 	str.w	r2, [ip, #16]
   1e968:	f8cc 3014 	str.w	r3, [ip, #20]
   1e96c:	68a3      	ldr	r3, [r4, #8]
   1e96e:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1e972:	ad08      	add	r5, sp, #32
   1e974:	6830      	ldr	r0, [r6, #0]
   1e976:	6871      	ldr	r1, [r6, #4]
   1e978:	68b2      	ldr	r2, [r6, #8]
   1e97a:	68f3      	ldr	r3, [r6, #12]
   1e97c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1e97e:	ad08      	add	r5, sp, #32
   1e980:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1e982:	f8ce 0018 	str.w	r0, [lr, #24]
   1e986:	f8ce 101c 	str.w	r1, [lr, #28]
   1e98a:	f8ce 2020 	str.w	r2, [lr, #32]
   1e98e:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24

	/* Clear and then set the chksum */
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1e992:	68a1      	ldr	r1, [r4, #8]
   1e994:	4620      	mov	r0, r4
   1e996:	f7ff fb07 	bl	1dfa8 <net_icmpv6_set_chksum>

	if (net_ipv6_finalize_raw(pkt, IPPROTO_ICMPV6) < 0) {
   1e99a:	4639      	mov	r1, r7
   1e99c:	4620      	mov	r0, r4
   1e99e:	f000 fce6 	bl	1f36e <net_ipv6_finalize_raw>
   1e9a2:	4558      	cmp	r0, fp
   1e9a4:	db0c      	blt.n	1e9c0 <net_icmpv6_send_echo_request+0x144>
			" from %s to %s", NET_ICMPV6_ECHO_REQUEST,
			net_sprint_ipv6_addr(&NET_IPV6_HDR(pkt)->src), out);
	} while (0);
#endif /* CONFIG_NET_DEBUG_ICMPV6 */

	if (net_send_data(pkt) >= 0) {
   1e9a6:	4620      	mov	r0, r4
   1e9a8:	f7fb fe46 	bl	1a638 <net_send_data>
   1e9ac:	4558      	cmp	r0, fp
   1e9ae:	db07      	blt.n	1e9c0 <net_icmpv6_send_echo_request+0x144>
	net_stats.icmp.sent++;
   1e9b0:	4a08      	ldr	r2, [pc, #32]	; (1e9d4 <net_icmpv6_send_echo_request+0x158>)
   1e9b2:	6b93      	ldr	r3, [r2, #56]	; 0x38
   1e9b4:	3301      	adds	r3, #1
   1e9b6:	6393      	str	r3, [r2, #56]	; 0x38
		net_stats_update_icmp_sent();
		return 0;
   1e9b8:	4658      	mov	r0, fp
drop:
	net_pkt_unref(pkt);
	net_stats_update_icmp_drop();

	return -EIO;
}
   1e9ba:	b00d      	add	sp, #52	; 0x34
   1e9bc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	net_pkt_unref(pkt);
   1e9c0:	4620      	mov	r0, r4
   1e9c2:	f7fe fa3a 	bl	1ce3a <net_pkt_unref>
	net_stats.icmp.drop++;
   1e9c6:	4a03      	ldr	r2, [pc, #12]	; (1e9d4 <net_icmpv6_send_echo_request+0x158>)
   1e9c8:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1e9ca:	3301      	adds	r3, #1
   1e9cc:	63d3      	str	r3, [r2, #60]	; 0x3c
	return -EIO;
   1e9ce:	f06f 0004 	mvn.w	r0, #4
   1e9d2:	e7f2      	b.n	1e9ba <net_icmpv6_send_echo_request+0x13e>
   1e9d4:	20002ab8 	.word	0x20002ab8

0001e9d8 <net_icmpv6_input>:

enum net_verdict net_icmpv6_input(struct net_pkt *pkt,
				  u8_t type, u8_t code)
{
   1e9d8:	b538      	push	{r3, r4, r5, lr}
	net_stats.icmp.recv++;
   1e9da:	4c12      	ldr	r4, [pc, #72]	; (1ea24 <net_icmpv6_input+0x4c>)
   1e9dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
   1e9de:	3301      	adds	r3, #1
   1e9e0:	6363      	str	r3, [r4, #52]	; 0x34
	return list->head;
   1e9e2:	4b11      	ldr	r3, [pc, #68]	; (1ea28 <net_icmpv6_input+0x50>)
   1e9e4:	681b      	ldr	r3, [r3, #0]
   1e9e6:	e005      	b.n	1e9f4 <net_icmpv6_input+0x1c>
	struct net_icmpv6_handler *cb;

	net_stats_update_icmp_recv();

	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1e9e8:	461d      	mov	r5, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e9ea:	b17b      	cbz	r3, 1ea0c <net_icmpv6_input+0x34>
	return node->next;
   1e9ec:	681c      	ldr	r4, [r3, #0]
   1e9ee:	b18c      	cbz	r4, 1ea14 <net_icmpv6_input+0x3c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1e9f0:	b175      	cbz	r5, 1ea10 <net_icmpv6_input+0x38>
	return node->next;
   1e9f2:	681b      	ldr	r3, [r3, #0]
   1e9f4:	b183      	cbz	r3, 1ea18 <net_icmpv6_input+0x40>
		if (cb->type == type && (cb->code == code || cb->code == 0)) {
   1e9f6:	791c      	ldrb	r4, [r3, #4]
   1e9f8:	428c      	cmp	r4, r1
   1e9fa:	d1f5      	bne.n	1e9e8 <net_icmpv6_input+0x10>
   1e9fc:	795c      	ldrb	r4, [r3, #5]
   1e9fe:	4294      	cmp	r4, r2
   1ea00:	d001      	beq.n	1ea06 <net_icmpv6_input+0x2e>
   1ea02:	2c00      	cmp	r4, #0
   1ea04:	d1f0      	bne.n	1e9e8 <net_icmpv6_input+0x10>
			return cb->handler(pkt);
   1ea06:	689b      	ldr	r3, [r3, #8]
   1ea08:	4798      	blx	r3
   1ea0a:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   1ea0c:	461c      	mov	r4, r3
   1ea0e:	e7ee      	b.n	1e9ee <net_icmpv6_input+0x16>
   1ea10:	2300      	movs	r3, #0
   1ea12:	e7ef      	b.n	1e9f4 <net_icmpv6_input+0x1c>
	SYS_SLIST_FOR_EACH_CONTAINER(&handlers, cb, node) {
   1ea14:	2300      	movs	r3, #0
   1ea16:	e7ed      	b.n	1e9f4 <net_icmpv6_input+0x1c>
	net_stats.icmp.drop++;
   1ea18:	4a02      	ldr	r2, [pc, #8]	; (1ea24 <net_icmpv6_input+0x4c>)
   1ea1a:	6bd3      	ldr	r3, [r2, #60]	; 0x3c
   1ea1c:	3301      	adds	r3, #1
   1ea1e:	63d3      	str	r3, [r2, #60]	; 0x3c
		}
	}

	net_stats_update_icmp_drop();

	return NET_DROP;
   1ea20:	2002      	movs	r0, #2
}
   1ea22:	bd38      	pop	{r3, r4, r5, pc}
   1ea24:	20002ab8 	.word	0x20002ab8
   1ea28:	20001f14 	.word	0x20001f14

0001ea2c <net_icmpv6_init>:
	.code = 0,
	.handler = handle_echo_request,
};

void net_icmpv6_init(void)
{
   1ea2c:	b508      	push	{r3, lr}
	net_icmpv6_register_handler(&echo_request_handler);
   1ea2e:	4802      	ldr	r0, [pc, #8]	; (1ea38 <net_icmpv6_init+0xc>)
   1ea30:	f7ff fa8a 	bl	1df48 <net_icmpv6_register_handler>
   1ea34:	bd08      	pop	{r3, pc}
   1ea36:	bf00      	nop
   1ea38:	2000be68 	.word	0x2000be68

0001ea3c <net_nbr_unref>:
void net_nbr_unref_debug(struct net_nbr *nbr, const char *caller, int line)
#define net_nbr_unref(nbr) net_nbr_unref_debug(nbr, __func__, __LINE__)
#else
void net_nbr_unref(struct net_nbr *nbr)
#endif
{
   1ea3c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref - 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref - 1);
#endif
	if (--nbr->ref) {
   1ea3e:	7803      	ldrb	r3, [r0, #0]
   1ea40:	3b01      	subs	r3, #1
   1ea42:	b2db      	uxtb	r3, r3
   1ea44:	7003      	strb	r3, [r0, #0]
   1ea46:	b913      	cbnz	r3, 1ea4e <net_nbr_unref+0x12>
		return;
	}

	if (nbr->remove) {
   1ea48:	6903      	ldr	r3, [r0, #16]
   1ea4a:	b103      	cbz	r3, 1ea4e <net_nbr_unref+0x12>
		nbr->remove(nbr);
   1ea4c:	4798      	blx	r3
   1ea4e:	bd08      	pop	{r3, pc}

0001ea50 <net_nbr_ref>:
#if defined(CONFIG_NET_DEBUG_IPV6_NBR_CACHE)
	NET_DBG("nbr %p ref %u (%s():%d)", nbr, nbr->ref + 1, caller, line);
#else
	NET_DBG("nbr %p ref %u", nbr, nbr->ref + 1);
#endif
	nbr->ref++;
   1ea50:	7803      	ldrb	r3, [r0, #0]
   1ea52:	3301      	adds	r3, #1
   1ea54:	7003      	strb	r3, [r0, #0]

	return nbr;
}
   1ea56:	4770      	bx	lr

0001ea58 <net_nbr_get>:

struct net_nbr *net_nbr_get(struct net_nbr_table *table)
{
	int i;

	for (i = 0; i < table->nbr_count; i++) {
   1ea58:	2100      	movs	r1, #0
   1ea5a:	8903      	ldrh	r3, [r0, #8]
   1ea5c:	4299      	cmp	r1, r3
   1ea5e:	da17      	bge.n	1ea90 <net_nbr_get+0x38>
{
   1ea60:	b510      	push	{r4, lr}
		struct net_nbr *nbr = get_nbr(table->nbr, i);
   1ea62:	6802      	ldr	r2, [r0, #0]
			  start->size + start->extra_data_size) * idx));
   1ea64:	8853      	ldrh	r3, [r2, #2]
   1ea66:	8894      	ldrh	r4, [r2, #4]
   1ea68:	4423      	add	r3, r4
   1ea6a:	3314      	adds	r3, #20
   1ea6c:	fb03 f301 	mul.w	r3, r3, r1
	return (struct net_nbr *)((void *)start +
   1ea70:	18d4      	adds	r4, r2, r3

		if (!nbr->ref) {
   1ea72:	5cd3      	ldrb	r3, [r2, r3]
   1ea74:	b12b      	cbz	r3, 1ea82 <net_nbr_get+0x2a>
	for (i = 0; i < table->nbr_count; i++) {
   1ea76:	3101      	adds	r1, #1
   1ea78:	8903      	ldrh	r3, [r0, #8]
   1ea7a:	4299      	cmp	r1, r3
   1ea7c:	dbf1      	blt.n	1ea62 <net_nbr_get+0xa>

			return net_nbr_ref(nbr);
		}
	}

	return NULL;
   1ea7e:	2000      	movs	r0, #0
}
   1ea80:	bd10      	pop	{r4, pc}
			nbr->data = nbr->__nbr;
   1ea82:	f104 0314 	add.w	r3, r4, #20
   1ea86:	60e3      	str	r3, [r4, #12]
			return net_nbr_ref(nbr);
   1ea88:	4620      	mov	r0, r4
   1ea8a:	f7ff ffe1 	bl	1ea50 <net_nbr_ref>
   1ea8e:	bd10      	pop	{r4, pc}
	return NULL;
   1ea90:	2000      	movs	r0, #0
   1ea92:	4770      	bx	lr

0001ea94 <net_nbr_link>:
int net_nbr_link(struct net_nbr *nbr, struct net_if *iface,
		 struct net_linkaddr *lladdr)
{
	int i, avail = -1;

	if (nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   1ea94:	7843      	ldrb	r3, [r0, #1]
   1ea96:	2bff      	cmp	r3, #255	; 0xff
   1ea98:	d158      	bne.n	1eb4c <net_nbr_link+0xb8>
{
   1ea9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ea9e:	4690      	mov	r8, r2
   1eaa0:	460f      	mov	r7, r1
   1eaa2:	4606      	mov	r6, r0
   1eaa4:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   1eaa8:	2400      	movs	r4, #0
   1eaaa:	e008      	b.n	1eabe <net_nbr_link+0x2a>
		return -EALREADY;
	}

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1eaac:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1eab0:	4b2a      	ldr	r3, [pc, #168]	; (1eb5c <net_nbr_link+0xc8>)
   1eab2:	4413      	add	r3, r2
   1eab4:	7a1b      	ldrb	r3, [r3, #8]
   1eab6:	b933      	cbnz	r3, 1eac6 <net_nbr_link+0x32>
			avail = i;
   1eab8:	4625      	mov	r5, r4
   1eaba:	e004      	b.n	1eac6 <net_nbr_link+0x32>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1eabc:	3401      	adds	r4, #1
   1eabe:	2c07      	cmp	r4, #7
   1eac0:	dc1e      	bgt.n	1eb00 <net_nbr_link+0x6c>
		if (avail < 0 && !net_neighbor_lladdr[i].ref) {
   1eac2:	2d00      	cmp	r5, #0
   1eac4:	dbf2      	blt.n	1eaac <net_nbr_link+0x18>
		}

		if (net_neighbor_lladdr[i].ref &&
   1eac6:	eb04 02c4 	add.w	r2, r4, r4, lsl #3
   1eaca:	4b24      	ldr	r3, [pc, #144]	; (1eb5c <net_nbr_link+0xc8>)
   1eacc:	4413      	add	r3, r2
   1eace:	7a1b      	ldrb	r3, [r3, #8]
   1ead0:	2b00      	cmp	r3, #0
   1ead2:	d0f3      	beq.n	1eabc <net_nbr_link+0x28>
		    !memcmp(lladdr->addr,
			    net_neighbor_lladdr[i].lladdr.addr,
   1ead4:	4921      	ldr	r1, [pc, #132]	; (1eb5c <net_nbr_link+0xc8>)
   1ead6:	4411      	add	r1, r2
		    !memcmp(lladdr->addr,
   1ead8:	f898 2004 	ldrb.w	r2, [r8, #4]
   1eadc:	3102      	adds	r1, #2
   1eade:	f8d8 0000 	ldr.w	r0, [r8]
   1eae2:	f00a fec5 	bl	29870 <memcmp>
		if (net_neighbor_lladdr[i].ref &&
   1eae6:	4603      	mov	r3, r0
   1eae8:	2800      	cmp	r0, #0
   1eaea:	d1e7      	bne.n	1eabc <net_nbr_link+0x28>
			    lladdr->len)) {
			/* We found same lladdr in nbr cache so just
			 * increase the ref count.
			 */
			net_neighbor_lladdr[i].ref++;
   1eaec:	eb04 01c4 	add.w	r1, r4, r4, lsl #3
   1eaf0:	4a1a      	ldr	r2, [pc, #104]	; (1eb5c <net_nbr_link+0xc8>)
   1eaf2:	440a      	add	r2, r1
   1eaf4:	7a11      	ldrb	r1, [r2, #8]
   1eaf6:	3101      	adds	r1, #1
   1eaf8:	7211      	strb	r1, [r2, #8]

			nbr->idx = i;
   1eafa:	7074      	strb	r4, [r6, #1]
			nbr->iface = iface;
   1eafc:	60b7      	str	r7, [r6, #8]

			return 0;
   1eafe:	e019      	b.n	1eb34 <net_nbr_link+0xa0>
		}
	}

	if (avail < 0) {
   1eb00:	2d00      	cmp	r5, #0
   1eb02:	db27      	blt.n	1eb54 <net_nbr_link+0xc0>
	}

	/* There was no existing entry in the lladdr cache,
	 * so allocate one for this lladdr.
	 */
	net_neighbor_lladdr[avail].ref++;
   1eb04:	eb05 02c5 	add.w	r2, r5, r5, lsl #3
   1eb08:	4b14      	ldr	r3, [pc, #80]	; (1eb5c <net_nbr_link+0xc8>)
   1eb0a:	4413      	add	r3, r2
   1eb0c:	7a1a      	ldrb	r2, [r3, #8]
   1eb0e:	3201      	adds	r2, #1
   1eb10:	721a      	strb	r2, [r3, #8]
	nbr->idx = avail;
   1eb12:	7075      	strb	r5, [r6, #1]

	net_linkaddr_set(&net_neighbor_lladdr[avail].lladdr, lladdr->addr,
   1eb14:	f8d8 1000 	ldr.w	r1, [r8]
   1eb18:	f898 2004 	ldrb.w	r2, [r8, #4]
 * This value should always be <= NET_LINK_ADDR_MAX_LENGTH.
 */
static inline int net_linkaddr_set(struct net_linkaddr_storage *lladdr_store,
				   u8_t *new_addr, u8_t new_len)
{
	if (!lladdr_store || !new_addr) {
   1eb1c:	b109      	cbz	r1, 1eb22 <net_nbr_link+0x8e>
		return -EINVAL;
	}

	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1eb1e:	2a06      	cmp	r2, #6
   1eb20:	d90b      	bls.n	1eb3a <net_nbr_link+0xa6>
			 lladdr->len);
	net_neighbor_lladdr[avail].lladdr.len = lladdr->len;
   1eb22:	f898 2004 	ldrb.w	r2, [r8, #4]
   1eb26:	eb05 05c5 	add.w	r5, r5, r5, lsl #3
   1eb2a:	4b0c      	ldr	r3, [pc, #48]	; (1eb5c <net_nbr_link+0xc8>)
   1eb2c:	441d      	add	r5, r3
   1eb2e:	706a      	strb	r2, [r5, #1]

	nbr->iface = iface;
   1eb30:	60b7      	str	r7, [r6, #8]

	return 0;
   1eb32:	2300      	movs	r3, #0
}
   1eb34:	4618      	mov	r0, r3
   1eb36:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return -EMSGSIZE;
	}

	lladdr_store->len = new_len;
   1eb3a:	eb05 03c5 	add.w	r3, r5, r5, lsl #3
   1eb3e:	4807      	ldr	r0, [pc, #28]	; (1eb5c <net_nbr_link+0xc8>)
   1eb40:	4418      	add	r0, r3
   1eb42:	7042      	strb	r2, [r0, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   1eb44:	3002      	adds	r0, #2
   1eb46:	f7e1 fbbb 	bl	2c0 <memcpy>
   1eb4a:	e7ea      	b.n	1eb22 <net_nbr_link+0x8e>
		return -EALREADY;
   1eb4c:	f06f 0377 	mvn.w	r3, #119	; 0x77
}
   1eb50:	4618      	mov	r0, r3
   1eb52:	4770      	bx	lr
		return -ENOENT;
   1eb54:	f06f 0301 	mvn.w	r3, #1
   1eb58:	e7ec      	b.n	1eb34 <net_nbr_link+0xa0>
   1eb5a:	bf00      	nop
   1eb5c:	20001f1c 	.word	0x20001f1c

0001eb60 <net_nbr_get_lladdr>:
{
	NET_ASSERT_INFO(idx < CONFIG_NET_IPV6_MAX_NEIGHBORS,
			"idx %d >= max %d", idx,
			CONFIG_NET_IPV6_MAX_NEIGHBORS);

	return &net_neighbor_lladdr[idx].lladdr;
   1eb60:	eb00 00c0 	add.w	r0, r0, r0, lsl #3
}
   1eb64:	4b01      	ldr	r3, [pc, #4]	; (1eb6c <net_nbr_get_lladdr+0xc>)
   1eb66:	4418      	add	r0, r3
   1eb68:	4770      	bx	lr
   1eb6a:	bf00      	nop
   1eb6c:	20001f1c 	.word	0x20001f1c

0001eb70 <ipv6_nbr_set_state>:
	bool is_router;
};

static inline struct net_ipv6_nbr_data *net_ipv6_nbr_data(struct net_nbr *nbr)
{
	return (struct net_ipv6_nbr_data *)nbr->data;
   1eb70:	68c2      	ldr	r2, [r0, #12]
}

static void ipv6_nbr_set_state(struct net_nbr *nbr,
			       enum net_ipv6_nbr_state new_state)
{
	if (new_state == net_ipv6_nbr_data(nbr)->state ||
   1eb72:	f892 3064 	ldrb.w	r3, [r2, #100]	; 0x64
   1eb76:	428b      	cmp	r3, r1
   1eb78:	d003      	beq.n	1eb82 <ipv6_nbr_set_state+0x12>
   1eb7a:	2b05      	cmp	r3, #5
   1eb7c:	d001      	beq.n	1eb82 <ipv6_nbr_set_state+0x12>

	NET_DBG("nbr %p %s -> %s", nbr,
		net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state),
		net_ipv6_nbr_state2str(new_state));

	net_ipv6_nbr_data(nbr)->state = new_state;
   1eb7e:	f882 1064 	strb.w	r1, [r2, #100]	; 0x64
   1eb82:	4770      	bx	lr

0001eb84 <iface_cb>:
	net_nbr_cb_t cb;
	void *user_data;
};

static void iface_cb(struct net_if *iface, void *user_data)
{
   1eb84:	b570      	push	{r4, r5, r6, lr}
   1eb86:	4605      	mov	r5, r0
   1eb88:	460e      	mov	r6, r1
	struct iface_cb_data *data = user_data;
	int i;

	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1eb8a:	2400      	movs	r4, #0
   1eb8c:	e000      	b.n	1eb90 <iface_cb+0xc>
   1eb8e:	3401      	adds	r4, #1
   1eb90:	2c07      	cmp	r4, #7
   1eb92:	dc0c      	bgt.n	1ebae <iface_cb+0x2a>
	return &net_neighbor_pool[idx].nbr;
   1eb94:	4a06      	ldr	r2, [pc, #24]	; (1ebb0 <iface_cb+0x2c>)
   1eb96:	01e3      	lsls	r3, r4, #7
   1eb98:	18d0      	adds	r0, r2, r3
		struct net_nbr *nbr = get_nbr(i);

		if (!nbr->ref || nbr->iface != iface) {
   1eb9a:	5cd3      	ldrb	r3, [r2, r3]
   1eb9c:	2b00      	cmp	r3, #0
   1eb9e:	d0f6      	beq.n	1eb8e <iface_cb+0xa>
   1eba0:	6883      	ldr	r3, [r0, #8]
   1eba2:	42ab      	cmp	r3, r5
   1eba4:	d1f3      	bne.n	1eb8e <iface_cb+0xa>
			continue;
		}

		data->cb(nbr, data->user_data);
   1eba6:	6833      	ldr	r3, [r6, #0]
   1eba8:	6871      	ldr	r1, [r6, #4]
   1ebaa:	4798      	blx	r3
   1ebac:	e7ef      	b.n	1eb8e <iface_cb+0xa>
	}
}
   1ebae:	bd70      	pop	{r4, r5, r6, pc}
   1ebb0:	2000be98 	.word	0x2000be98

0001ebb4 <iface_cb>:

	return "<unknown type>";
}

static void iface_cb(struct net_if *iface, void *user_data)
{
   1ebb4:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ebb6:	b085      	sub	sp, #20
   1ebb8:	4605      	mov	r5, r0
	const char *extra;
	int i, count;

	ARG_UNUSED(user_data);

	printk("\nInterface %p (%s)\n", iface, iface2str(iface, &extra));
   1ebba:	a903      	add	r1, sp, #12
   1ebbc:	f004 ff0a 	bl	239d4 <iface2str>
   1ebc0:	4602      	mov	r2, r0
   1ebc2:	4629      	mov	r1, r5
   1ebc4:	4885      	ldr	r0, [pc, #532]	; (1eddc <iface_cb+0x228>)
   1ebc6:	f7e3 fd15 	bl	25f4 <printk>
	printk("=======================%s\n", extra);
   1ebca:	9903      	ldr	r1, [sp, #12]
   1ebcc:	4884      	ldr	r0, [pc, #528]	; (1ede0 <iface_cb+0x22c>)
   1ebce:	f7e3 fd11 	bl	25f4 <printk>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   1ebd2:	f3bf 8f5b 	dmb	ish
   1ebd6:	68eb      	ldr	r3, [r5, #12]
   1ebd8:	f3bf 8f5b 	dmb	ish

	if (!net_if_is_up(iface)) {
   1ebdc:	f013 0f01 	tst.w	r3, #1
   1ebe0:	d014      	beq.n	1ec0c <iface_cb+0x58>
#if NET_LOG_ENABLED > 0
static inline char *net_sprint_ll_addr(const u8_t *ll, u8_t ll_len)
{
	static char buf[sizeof("xx:xx:xx:xx:xx:xx:xx:xx")];

	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   1ebe2:	2318      	movs	r3, #24
   1ebe4:	4a7f      	ldr	r2, [pc, #508]	; (1ede4 <iface_cb+0x230>)
   1ebe6:	7d29      	ldrb	r1, [r5, #20]
   1ebe8:	6928      	ldr	r0, [r5, #16]
   1ebea:	f7fe fd45 	bl	1d678 <net_sprint_ll_addr_buf>
		printk("Interface is down.\n");
		return;
	}

	printk("Link addr : %s\n", net_sprint_ll_addr(iface->link_addr.addr,
   1ebee:	4601      	mov	r1, r0
   1ebf0:	487d      	ldr	r0, [pc, #500]	; (1ede8 <iface_cb+0x234>)
   1ebf2:	f7e3 fcff 	bl	25f4 <printk>
						      iface->link_addr.len));
	printk("MTU       : %d\n", iface->mtu);
   1ebf6:	8d29      	ldrh	r1, [r5, #40]	; 0x28
   1ebf8:	487c      	ldr	r0, [pc, #496]	; (1edec <iface_cb+0x238>)
   1ebfa:	f7e3 fcfb 	bl	25f4 <printk>

#if defined(CONFIG_NET_IPV6)
	count = 0;

	printk("IPv6 unicast addresses (max %d):\n", NET_IF_MAX_IPV6_ADDR);
   1ebfe:	2103      	movs	r1, #3
   1ec00:	487b      	ldr	r0, [pc, #492]	; (1edf0 <iface_cb+0x23c>)
   1ec02:	f7e3 fcf7 	bl	25f4 <printk>
	count = 0;
   1ec06:	2700      	movs	r7, #0
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ec08:	463c      	mov	r4, r7
   1ec0a:	e02e      	b.n	1ec6a <iface_cb+0xb6>
		printk("Interface is down.\n");
   1ec0c:	4879      	ldr	r0, [pc, #484]	; (1edf4 <iface_cb+0x240>)
   1ec0e:	f7e3 fcf1 	bl	25f4 <printk>
   1ec12:	e0db      	b.n	1edcc <iface_cb+0x218>
		return "<unknown type>";
   1ec14:	4a78      	ldr	r2, [pc, #480]	; (1edf8 <iface_cb+0x244>)
   1ec16:	e006      	b.n	1ec26 <iface_cb+0x72>
		return "DHCP";
   1ec18:	4a78      	ldr	r2, [pc, #480]	; (1edfc <iface_cb+0x248>)
   1ec1a:	e004      	b.n	1ec26 <iface_cb+0x72>
		return "manual";
   1ec1c:	4a78      	ldr	r2, [pc, #480]	; (1ee00 <iface_cb+0x24c>)
   1ec1e:	e002      	b.n	1ec26 <iface_cb+0x72>
	return "<invalid type>";
   1ec20:	4a78      	ldr	r2, [pc, #480]	; (1ee04 <iface_cb+0x250>)
   1ec22:	e000      	b.n	1ec26 <iface_cb+0x72>
		return "autoconf";
   1ec24:	4a78      	ldr	r2, [pc, #480]	; (1ee08 <iface_cb+0x254>)

		if (!unicast->is_used) {
			continue;
		}

		printk("\t%s %s %s%s\n",
   1ec26:	236c      	movs	r3, #108	; 0x6c
   1ec28:	fb03 5304 	mla	r3, r3, r4, r5
   1ec2c:	f993 3091 	ldrsb.w	r3, [r3, #145]	; 0x91
	switch (addr_state) {
   1ec30:	3301      	adds	r3, #1
   1ec32:	2b03      	cmp	r3, #3
   1ec34:	d809      	bhi.n	1ec4a <iface_cb+0x96>
   1ec36:	e8df f003 	tbb	[pc, r3]
   1ec3a:	0a02      	.short	0x0a02
   1ec3c:	0604      	.short	0x0604
		return "<unknown state>";
   1ec3e:	4b73      	ldr	r3, [pc, #460]	; (1ee0c <iface_cb+0x258>)
   1ec40:	e006      	b.n	1ec50 <iface_cb+0x9c>
		return "preferred";
   1ec42:	4b73      	ldr	r3, [pc, #460]	; (1ee10 <iface_cb+0x25c>)
   1ec44:	e004      	b.n	1ec50 <iface_cb+0x9c>
		return "deprecated";
   1ec46:	4b73      	ldr	r3, [pc, #460]	; (1ee14 <iface_cb+0x260>)
   1ec48:	e002      	b.n	1ec50 <iface_cb+0x9c>
	return "<invalid state>";
   1ec4a:	4b73      	ldr	r3, [pc, #460]	; (1ee18 <iface_cb+0x264>)
   1ec4c:	e000      	b.n	1ec50 <iface_cb+0x9c>
		return "tentative";
   1ec4e:	4b73      	ldr	r3, [pc, #460]	; (1ee1c <iface_cb+0x268>)
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
		       addrtype2str(unicast->addr_type),
		       addrstate2str(unicast->addr_state),
		       unicast->is_infinite ? " infinite" : "");
   1ec50:	266c      	movs	r6, #108	; 0x6c
   1ec52:	fb06 5604 	mla	r6, r6, r4, r5
   1ec56:	f896 0093 	ldrb.w	r0, [r6, #147]	; 0x93
		printk("\t%s %s %s%s\n",
   1ec5a:	b368      	cbz	r0, 1ecb8 <iface_cb+0x104>
   1ec5c:	4870      	ldr	r0, [pc, #448]	; (1ee20 <iface_cb+0x26c>)
   1ec5e:	9000      	str	r0, [sp, #0]
   1ec60:	4870      	ldr	r0, [pc, #448]	; (1ee24 <iface_cb+0x270>)
   1ec62:	f7e3 fcc7 	bl	25f4 <printk>
		count++;
   1ec66:	3701      	adds	r7, #1
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1ec68:	3401      	adds	r4, #1
   1ec6a:	2c02      	cmp	r4, #2
   1ec6c:	dc26      	bgt.n	1ecbc <iface_cb+0x108>
		if (!unicast->is_used) {
   1ec6e:	236c      	movs	r3, #108	; 0x6c
   1ec70:	fb03 5304 	mla	r3, r3, r4, r5
   1ec74:	f893 3094 	ldrb.w	r3, [r3, #148]	; 0x94
   1ec78:	2b00      	cmp	r3, #0
   1ec7a:	d0f5      	beq.n	1ec68 <iface_cb+0xb4>
		       net_sprint_ipv6_addr(&unicast->address.in6_addr),
   1ec7c:	266c      	movs	r6, #108	; 0x6c
   1ec7e:	fb06 f604 	mul.w	r6, r6, r4
   1ec82:	f106 0120 	add.w	r1, r6, #32
   1ec86:	4429      	add	r1, r5
static inline char *net_sprint_ipv6_addr(const struct in6_addr *addr)
{
#if defined(CONFIG_NET_IPV6)
	static char buf[NET_IPV6_ADDR_LEN];

	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   1ec88:	2328      	movs	r3, #40	; 0x28
   1ec8a:	4a67      	ldr	r2, [pc, #412]	; (1ee28 <iface_cb+0x274>)
   1ec8c:	3110      	adds	r1, #16
   1ec8e:	200a      	movs	r0, #10
   1ec90:	f7fe fd1c 	bl	1d6cc <net_addr_ntop>
   1ec94:	4601      	mov	r1, r0
		printk("\t%s %s %s%s\n",
   1ec96:	442e      	add	r6, r5
   1ec98:	f896 3090 	ldrb.w	r3, [r6, #144]	; 0x90
	switch (addr_type) {
   1ec9c:	2b03      	cmp	r3, #3
   1ec9e:	d8bf      	bhi.n	1ec20 <iface_cb+0x6c>
   1eca0:	a201      	add	r2, pc, #4	; (adr r2, 1eca8 <iface_cb+0xf4>)
   1eca2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
   1eca6:	bf00      	nop
   1eca8:	0001ec15 	.word	0x0001ec15
   1ecac:	0001ec25 	.word	0x0001ec25
   1ecb0:	0001ec19 	.word	0x0001ec19
   1ecb4:	0001ec1d 	.word	0x0001ec1d
		printk("\t%s %s %s%s\n",
   1ecb8:	485c      	ldr	r0, [pc, #368]	; (1ee2c <iface_cb+0x278>)
   1ecba:	e7d0      	b.n	1ec5e <iface_cb+0xaa>
	}

	if (count == 0) {
   1ecbc:	b137      	cbz	r7, 1eccc <iface_cb+0x118>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 multicast addresses (max %d):\n", NET_IF_MAX_IPV6_MADDR);
   1ecbe:	2105      	movs	r1, #5
   1ecc0:	485b      	ldr	r0, [pc, #364]	; (1ee30 <iface_cb+0x27c>)
   1ecc2:	f7e3 fc97 	bl	25f4 <printk>
	count = 0;
   1ecc6:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ecc8:	4634      	mov	r4, r6
   1ecca:	e004      	b.n	1ecd6 <iface_cb+0x122>
		printk("\t<none>\n");
   1eccc:	4859      	ldr	r0, [pc, #356]	; (1ee34 <iface_cb+0x280>)
   1ecce:	f7e3 fc91 	bl	25f4 <printk>
   1ecd2:	e7f4      	b.n	1ecbe <iface_cb+0x10a>
	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1ecd4:	3401      	adds	r4, #1
   1ecd6:	2c04      	cmp	r4, #4
   1ecd8:	dc18      	bgt.n	1ed0c <iface_cb+0x158>
		mcast = &iface->ipv6.mcast[i];

		if (!mcast->is_used) {
   1ecda:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1ecde:	00d3      	lsls	r3, r2, #3
   1ece0:	461a      	mov	r2, r3
   1ece2:	442b      	add	r3, r5
   1ece4:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1ece8:	f013 0f01 	tst.w	r3, #1
   1ecec:	d0f2      	beq.n	1ecd4 <iface_cb+0x120>
			continue;
		}

		printk("\t%s\n",
		       net_sprint_ipv6_addr(&mcast->address.in6_addr));
   1ecee:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1ecf2:	4429      	add	r1, r5
   1ecf4:	2328      	movs	r3, #40	; 0x28
   1ecf6:	4a4c      	ldr	r2, [pc, #304]	; (1ee28 <iface_cb+0x274>)
   1ecf8:	3118      	adds	r1, #24
   1ecfa:	200a      	movs	r0, #10
   1ecfc:	f7fe fce6 	bl	1d6cc <net_addr_ntop>
		printk("\t%s\n",
   1ed00:	4601      	mov	r1, r0
   1ed02:	484d      	ldr	r0, [pc, #308]	; (1ee38 <iface_cb+0x284>)
   1ed04:	f7e3 fc76 	bl	25f4 <printk>

		count++;
   1ed08:	3601      	adds	r6, #1
   1ed0a:	e7e3      	b.n	1ecd4 <iface_cb+0x120>
	}

	if (count == 0) {
   1ed0c:	b136      	cbz	r6, 1ed1c <iface_cb+0x168>
		printk("\t<none>\n");
	}

	count = 0;

	printk("IPv6 prefixes (max %d):\n", NET_IF_MAX_IPV6_PREFIX);
   1ed0e:	2102      	movs	r1, #2
   1ed10:	484a      	ldr	r0, [pc, #296]	; (1ee3c <iface_cb+0x288>)
   1ed12:	f7e3 fc6f 	bl	25f4 <printk>
	count = 0;
   1ed16:	2600      	movs	r6, #0
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ed18:	4634      	mov	r4, r6
   1ed1a:	e009      	b.n	1ed30 <iface_cb+0x17c>
		printk("\t<none>\n");
   1ed1c:	4845      	ldr	r0, [pc, #276]	; (1ee34 <iface_cb+0x280>)
   1ed1e:	f7e3 fc69 	bl	25f4 <printk>
   1ed22:	e7f4      	b.n	1ed0e <iface_cb+0x15a>

		if (!prefix->is_used) {
			continue;
		}

		printk("\t%s/%d%s\n",
   1ed24:	4b41      	ldr	r3, [pc, #260]	; (1ee2c <iface_cb+0x278>)
   1ed26:	4846      	ldr	r0, [pc, #280]	; (1ee40 <iface_cb+0x28c>)
   1ed28:	f7e3 fc64 	bl	25f4 <printk>
		       net_sprint_ipv6_addr(&prefix->prefix),
		       prefix->len,
		       prefix->is_infinite ? " infinite" : "");

		count++;
   1ed2c:	3601      	adds	r6, #1
	for (i = 0; i < NET_IF_MAX_IPV6_PREFIX; i++) {
   1ed2e:	3401      	adds	r4, #1
   1ed30:	2c01      	cmp	r4, #1
   1ed32:	dc1e      	bgt.n	1ed72 <iface_cb+0x1be>
		if (!prefix->is_used) {
   1ed34:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   1ed38:	0093      	lsls	r3, r2, #2
   1ed3a:	461a      	mov	r2, r3
   1ed3c:	442b      	add	r3, r5
   1ed3e:	f893 3222 	ldrb.w	r3, [r3, #546]	; 0x222
   1ed42:	2b00      	cmp	r3, #0
   1ed44:	d0f3      	beq.n	1ed2e <iface_cb+0x17a>
		       net_sprint_ipv6_addr(&prefix->prefix),
   1ed46:	0127      	lsls	r7, r4, #4
   1ed48:	f502 7100 	add.w	r1, r2, #512	; 0x200
   1ed4c:	4429      	add	r1, r5
   1ed4e:	2328      	movs	r3, #40	; 0x28
   1ed50:	4a35      	ldr	r2, [pc, #212]	; (1ee28 <iface_cb+0x274>)
   1ed52:	3110      	adds	r1, #16
   1ed54:	200a      	movs	r0, #10
   1ed56:	f7fe fcb9 	bl	1d6cc <net_addr_ntop>
   1ed5a:	4601      	mov	r1, r0
		       prefix->len,
   1ed5c:	1b3f      	subs	r7, r7, r4
   1ed5e:	00bb      	lsls	r3, r7, #2
   1ed60:	442b      	add	r3, r5
   1ed62:	f893 2220 	ldrb.w	r2, [r3, #544]	; 0x220
		       prefix->is_infinite ? " infinite" : "");
   1ed66:	f893 3221 	ldrb.w	r3, [r3, #545]	; 0x221
		printk("\t%s/%d%s\n",
   1ed6a:	2b00      	cmp	r3, #0
   1ed6c:	d0da      	beq.n	1ed24 <iface_cb+0x170>
   1ed6e:	4b2c      	ldr	r3, [pc, #176]	; (1ee20 <iface_cb+0x26c>)
   1ed70:	e7d9      	b.n	1ed26 <iface_cb+0x172>
	}

	if (count == 0) {
   1ed72:	b36e      	cbz	r6, 1edd0 <iface_cb+0x21c>
		printk("\t<none>\n");
	}

	router = net_if_ipv6_router_find_default(iface, NULL);
   1ed74:	2100      	movs	r1, #0
   1ed76:	4628      	mov	r0, r5
   1ed78:	f7fc fade 	bl	1b338 <net_if_ipv6_router_find_default>
	if (router) {
   1ed7c:	4604      	mov	r4, r0
   1ed7e:	b188      	cbz	r0, 1eda4 <iface_cb+0x1f0>
		printk("IPv6 default router :\n");
   1ed80:	4830      	ldr	r0, [pc, #192]	; (1ee44 <iface_cb+0x290>)
   1ed82:	f7e3 fc37 	bl	25f4 <printk>
   1ed86:	2328      	movs	r3, #40	; 0x28
   1ed88:	4a27      	ldr	r2, [pc, #156]	; (1ee28 <iface_cb+0x274>)
   1ed8a:	f104 012c 	add.w	r1, r4, #44	; 0x2c
   1ed8e:	200a      	movs	r0, #10
   1ed90:	f7fe fc9c 	bl	1d6cc <net_addr_ntop>
   1ed94:	4601      	mov	r1, r0
		printk("\t%s%s\n",
		       net_sprint_ipv6_addr(&router->address.in6_addr),
		       router->is_infinite ? " infinite" : "");
   1ed96:	f894 3042 	ldrb.w	r3, [r4, #66]	; 0x42
		printk("\t%s%s\n",
   1ed9a:	b1eb      	cbz	r3, 1edd8 <iface_cb+0x224>
   1ed9c:	4a20      	ldr	r2, [pc, #128]	; (1ee20 <iface_cb+0x26c>)
   1ed9e:	482a      	ldr	r0, [pc, #168]	; (1ee48 <iface_cb+0x294>)
   1eda0:	f7e3 fc28 	bl	25f4 <printk>
	}

	printk("IPv6 hop limit           : %d\n", iface->ipv6.hop_limit);
   1eda4:	f895 1294 	ldrb.w	r1, [r5, #660]	; 0x294
   1eda8:	4828      	ldr	r0, [pc, #160]	; (1ee4c <iface_cb+0x298>)
   1edaa:	f7e3 fc23 	bl	25f4 <printk>
	printk("IPv6 base reachable time : %d\n",
   1edae:	f8d5 1288 	ldr.w	r1, [r5, #648]	; 0x288
   1edb2:	4827      	ldr	r0, [pc, #156]	; (1ee50 <iface_cb+0x29c>)
   1edb4:	f7e3 fc1e 	bl	25f4 <printk>
	       iface->ipv6.base_reachable_time);
	printk("IPv6 reachable time      : %d\n", iface->ipv6.reachable_time);
   1edb8:	f8d5 128c 	ldr.w	r1, [r5, #652]	; 0x28c
   1edbc:	4825      	ldr	r0, [pc, #148]	; (1ee54 <iface_cb+0x2a0>)
   1edbe:	f7e3 fc19 	bl	25f4 <printk>
	printk("IPv6 retransmit timer    : %d\n", iface->ipv6.retrans_timer);
   1edc2:	f8d5 1290 	ldr.w	r1, [r5, #656]	; 0x290
   1edc6:	4824      	ldr	r0, [pc, #144]	; (1ee58 <iface_cb+0x2a4>)
   1edc8:	f7e3 fc14 	bl	25f4 <printk>
	       net_sprint_ipv4_addr(&iface->dhcpv4.requested_ip));
	printk("DHCPv4 state      : %s\n",
	       net_dhcpv4_state_name(iface->dhcpv4.state));
	printk("DHCPv4 attempts   : %d\n", iface->dhcpv4.attempts);
#endif /* CONFIG_NET_DHCPV4 */
}
   1edcc:	b005      	add	sp, #20
   1edce:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("\t<none>\n");
   1edd0:	4818      	ldr	r0, [pc, #96]	; (1ee34 <iface_cb+0x280>)
   1edd2:	f7e3 fc0f 	bl	25f4 <printk>
   1edd6:	e7cd      	b.n	1ed74 <iface_cb+0x1c0>
		printk("\t%s%s\n",
   1edd8:	4a14      	ldr	r2, [pc, #80]	; (1ee2c <iface_cb+0x278>)
   1edda:	e7e0      	b.n	1ed9e <iface_cb+0x1ea>
   1eddc:	0002dcec 	.word	0x0002dcec
   1ede0:	0002de9c 	.word	0x0002de9c
   1ede4:	200024a8 	.word	0x200024a8
   1ede8:	0002dd14 	.word	0x0002dd14
   1edec:	0002dd24 	.word	0x0002dd24
   1edf0:	0002dd34 	.word	0x0002dd34
   1edf4:	0002dd00 	.word	0x0002dd00
   1edf8:	0002dc54 	.word	0x0002dc54
   1edfc:	0002dc8c 	.word	0x0002dc8c
   1ee00:	0002dc94 	.word	0x0002dc94
   1ee04:	0002dc9c 	.word	0x0002dc9c
   1ee08:	0002dc80 	.word	0x0002dc80
   1ee0c:	0002dcac 	.word	0x0002dcac
   1ee10:	0002dcc8 	.word	0x0002dcc8
   1ee14:	0002dcd4 	.word	0x0002dcd4
   1ee18:	0002dba0 	.word	0x0002dba0
   1ee1c:	0002dcbc 	.word	0x0002dcbc
   1ee20:	0002dce0 	.word	0x0002dce0
   1ee24:	0002dd58 	.word	0x0002dd58
   1ee28:	200024c0 	.word	0x200024c0
   1ee2c:	0002afec 	.word	0x0002afec
   1ee30:	0002dd74 	.word	0x0002dd74
   1ee34:	0002dd68 	.word	0x0002dd68
   1ee38:	0002dd98 	.word	0x0002dd98
   1ee3c:	0002dda0 	.word	0x0002dda0
   1ee40:	0002ddbc 	.word	0x0002ddbc
   1ee44:	0002ddc8 	.word	0x0002ddc8
   1ee48:	0002dde0 	.word	0x0002dde0
   1ee4c:	0002dde8 	.word	0x0002dde8
   1ee50:	0002de08 	.word	0x0002de08
   1ee54:	0002de28 	.word	0x0002de28
   1ee58:	0002de48 	.word	0x0002de48

0001ee5c <net_neighbor_data_remove>:
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
				lladdr, is_router, state);
}

void net_neighbor_data_remove(struct net_nbr *nbr)
{
   1ee5c:	4770      	bx	lr

0001ee5e <net_neighbor_table_clear>:

	return;
}

void net_neighbor_table_clear(struct net_nbr_table *table)
{
   1ee5e:	4770      	bx	lr

0001ee60 <nbr_lookup>:
{
   1ee60:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1ee62:	460e      	mov	r6, r1
   1ee64:	4617      	mov	r7, r2
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1ee66:	2400      	movs	r4, #0
   1ee68:	e000      	b.n	1ee6c <nbr_lookup+0xc>
   1ee6a:	3401      	adds	r4, #1
   1ee6c:	2c07      	cmp	r4, #7
   1ee6e:	dc11      	bgt.n	1ee94 <nbr_lookup+0x34>
	return &net_neighbor_pool[idx].nbr;
   1ee70:	4a0a      	ldr	r2, [pc, #40]	; (1ee9c <nbr_lookup+0x3c>)
   1ee72:	01e3      	lsls	r3, r4, #7
   1ee74:	18d5      	adds	r5, r2, r3
		if (!nbr->ref) {
   1ee76:	5cd3      	ldrb	r3, [r2, r3]
   1ee78:	2b00      	cmp	r3, #0
   1ee7a:	d0f6      	beq.n	1ee6a <nbr_lookup+0xa>
		if (nbr->iface == iface &&
   1ee7c:	68ab      	ldr	r3, [r5, #8]
   1ee7e:	42b3      	cmp	r3, r6
   1ee80:	d1f3      	bne.n	1ee6a <nbr_lookup+0xa>
   1ee82:	68e8      	ldr	r0, [r5, #12]
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1ee84:	2210      	movs	r2, #16
   1ee86:	4639      	mov	r1, r7
   1ee88:	3004      	adds	r0, #4
   1ee8a:	f00a fcf1 	bl	29870 <memcmp>
   1ee8e:	2800      	cmp	r0, #0
   1ee90:	d1eb      	bne.n	1ee6a <nbr_lookup+0xa>
   1ee92:	e000      	b.n	1ee96 <nbr_lookup+0x36>
	return NULL;
   1ee94:	2500      	movs	r5, #0
}
   1ee96:	4628      	mov	r0, r5
   1ee98:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   1ee9a:	bf00      	nop
   1ee9c:	2000be98 	.word	0x2000be98

0001eea0 <nbr_clear_ns_pending>:
{
   1eea0:	b510      	push	{r4, lr}
   1eea2:	4604      	mov	r4, r0
	k_delayed_work_cancel(&data->send_ns);
   1eea4:	303c      	adds	r0, #60	; 0x3c
   1eea6:	f00a fb93 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   1eeaa:	6820      	ldr	r0, [r4, #0]
   1eeac:	b118      	cbz	r0, 1eeb6 <nbr_clear_ns_pending+0x16>
		net_pkt_unref(data->pending);
   1eeae:	f7fd ffc4 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   1eeb2:	2300      	movs	r3, #0
   1eeb4:	6023      	str	r3, [r4, #0]
   1eeb6:	bd10      	pop	{r4, pc}

0001eeb8 <ns_reply_timeout>:
{
   1eeb8:	b538      	push	{r3, r4, r5, lr}
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   1eeba:	f1a0 013c 	sub.w	r1, r0, #60	; 0x3c
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1eebe:	2300      	movs	r3, #0
   1eec0:	2b07      	cmp	r3, #7
   1eec2:	dc07      	bgt.n	1eed4 <ns_reply_timeout+0x1c>
	return &net_neighbor_pool[idx].nbr;
   1eec4:	4c0d      	ldr	r4, [pc, #52]	; (1eefc <ns_reply_timeout+0x44>)
   1eec6:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   1eeca:	68e2      	ldr	r2, [r4, #12]
   1eecc:	4291      	cmp	r1, r2
   1eece:	d002      	beq.n	1eed6 <ns_reply_timeout+0x1e>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   1eed0:	3301      	adds	r3, #1
   1eed2:	e7f5      	b.n	1eec0 <ns_reply_timeout+0x8>
	return NULL;
   1eed4:	2400      	movs	r4, #0
	if (!nbr) {
   1eed6:	b184      	cbz	r4, 1eefa <ns_reply_timeout+0x42>
	if (!data->pending) {
   1eed8:	f850 3c3c 	ldr.w	r3, [r0, #-60]
   1eedc:	b16b      	cbz	r3, 1eefa <ns_reply_timeout+0x42>
   1eede:	4605      	mov	r5, r0
	net_pkt_unref(data->pending);
   1eee0:	4618      	mov	r0, r3
   1eee2:	f7fd ffaa 	bl	1ce3a <net_pkt_unref>
	net_pkt_unref(data->pending);
   1eee6:	f855 0c3c 	ldr.w	r0, [r5, #-60]
   1eeea:	f7fd ffa6 	bl	1ce3a <net_pkt_unref>
	data->pending = NULL;
   1eeee:	2300      	movs	r3, #0
   1eef0:	f845 3c3c 	str.w	r3, [r5, #-60]
	net_nbr_unref(nbr);
   1eef4:	4620      	mov	r0, r4
   1eef6:	f7ff fda1 	bl	1ea3c <net_nbr_unref>
   1eefa:	bd38      	pop	{r3, r4, r5, pc}
   1eefc:	2000be98 	.word	0x2000be98

0001ef00 <nbr_init>:
{
   1ef00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef04:	b084      	sub	sp, #16
   1ef06:	4604      	mov	r4, r0
   1ef08:	4616      	mov	r6, r2
   1ef0a:	4698      	mov	r8, r3
	nbr->idx = NET_NBR_LLADDR_UNKNOWN;
   1ef0c:	23ff      	movs	r3, #255	; 0xff
   1ef0e:	7043      	strb	r3, [r0, #1]
	nbr->iface = iface;
   1ef10:	6081      	str	r1, [r0, #8]
   1ef12:	68c7      	ldr	r7, [r0, #12]
	net_ipaddr_copy(&net_ipv6_nbr_data(nbr)->addr, addr);
   1ef14:	466d      	mov	r5, sp
   1ef16:	6810      	ldr	r0, [r2, #0]
   1ef18:	6851      	ldr	r1, [r2, #4]
   1ef1a:	6892      	ldr	r2, [r2, #8]
   1ef1c:	68f3      	ldr	r3, [r6, #12]
   1ef1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1ef20:	466d      	mov	r5, sp
   1ef22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1ef24:	6078      	str	r0, [r7, #4]
   1ef26:	60b9      	str	r1, [r7, #8]
   1ef28:	60fa      	str	r2, [r7, #12]
   1ef2a:	613b      	str	r3, [r7, #16]
	ipv6_nbr_set_state(nbr, state);
   1ef2c:	f89d 1028 	ldrb.w	r1, [sp, #40]	; 0x28
   1ef30:	4620      	mov	r0, r4
   1ef32:	f7ff fe1d 	bl	1eb70 <ipv6_nbr_set_state>
   1ef36:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->is_router = is_router;
   1ef38:	f883 8069 	strb.w	r8, [r3, #105]	; 0x69
   1ef3c:	68e3      	ldr	r3, [r4, #12]
	net_ipv6_nbr_data(nbr)->pending = NULL;
   1ef3e:	2200      	movs	r2, #0
   1ef40:	601a      	str	r2, [r3, #0]
   1ef42:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->reachable,
   1ef44:	4905      	ldr	r1, [pc, #20]	; (1ef5c <nbr_init+0x5c>)
   1ef46:	3014      	adds	r0, #20
   1ef48:	f00a fb24 	bl	29594 <k_delayed_work_init>
   1ef4c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_init(&net_ipv6_nbr_data(nbr)->send_ns,
   1ef4e:	4904      	ldr	r1, [pc, #16]	; (1ef60 <nbr_init+0x60>)
   1ef50:	303c      	adds	r0, #60	; 0x3c
   1ef52:	f00a fb1f 	bl	29594 <k_delayed_work_init>
}
   1ef56:	b004      	add	sp, #16
   1ef58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1ef5c:	00020a8d 	.word	0x00020a8d
   1ef60:	0001eeb9 	.word	0x0001eeb9

0001ef64 <nbr_new>:
{
   1ef64:	b5f0      	push	{r4, r5, r6, r7, lr}
   1ef66:	b083      	sub	sp, #12
   1ef68:	4605      	mov	r5, r0
   1ef6a:	460e      	mov	r6, r1
   1ef6c:	461f      	mov	r7, r3
	struct net_nbr *nbr = net_nbr_get(&net_neighbor.table);
   1ef6e:	4807      	ldr	r0, [pc, #28]	; (1ef8c <nbr_new+0x28>)
   1ef70:	f7ff fd72 	bl	1ea58 <net_nbr_get>
	if (!nbr) {
   1ef74:	4604      	mov	r4, r0
   1ef76:	b128      	cbz	r0, 1ef84 <nbr_new+0x20>
	nbr_init(nbr, iface, addr, true, state);
   1ef78:	9700      	str	r7, [sp, #0]
   1ef7a:	2301      	movs	r3, #1
   1ef7c:	4632      	mov	r2, r6
   1ef7e:	4629      	mov	r1, r5
   1ef80:	f7ff ffbe 	bl	1ef00 <nbr_init>
}
   1ef84:	4620      	mov	r0, r4
   1ef86:	b003      	add	sp, #12
   1ef88:	bdf0      	pop	{r4, r5, r6, r7, pc}
   1ef8a:	bf00      	nop
   1ef8c:	2000be8c 	.word	0x2000be8c

0001ef90 <nbr_new>:
}

static struct net_nbr *nbr_new(struct net_if *iface,
			       struct in6_addr *addr,
			       u8_t prefix_len)
{
   1ef90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1ef94:	b084      	sub	sp, #16
   1ef96:	4604      	mov	r4, r0
   1ef98:	460e      	mov	r6, r1
   1ef9a:	4690      	mov	r8, r2
	struct net_nbr *nbr = net_nbr_get(&net_nbr_routes.table);
   1ef9c:	480c      	ldr	r0, [pc, #48]	; (1efd0 <nbr_new+0x40>)
   1ef9e:	f7ff fd5b 	bl	1ea58 <net_nbr_get>

	if (!nbr) {
   1efa2:	4605      	mov	r5, r0
   1efa4:	b180      	cbz	r0, 1efc8 <nbr_new+0x38>
		return NULL;
	}

	nbr->iface = iface;
   1efa6:	6084      	str	r4, [r0, #8]
	return (struct net_route_entry *)nbr->data;
   1efa8:	68c7      	ldr	r7, [r0, #12]

	net_ipaddr_copy(&net_route_data(nbr)->addr, addr);
   1efaa:	466c      	mov	r4, sp
   1efac:	6830      	ldr	r0, [r6, #0]
   1efae:	6871      	ldr	r1, [r6, #4]
   1efb0:	68b2      	ldr	r2, [r6, #8]
   1efb2:	68f3      	ldr	r3, [r6, #12]
   1efb4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   1efb6:	466c      	mov	r4, sp
   1efb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   1efba:	6138      	str	r0, [r7, #16]
   1efbc:	6179      	str	r1, [r7, #20]
   1efbe:	61ba      	str	r2, [r7, #24]
   1efc0:	61fb      	str	r3, [r7, #28]
	return (struct net_route_entry *)nbr->data;
   1efc2:	68eb      	ldr	r3, [r5, #12]
	net_route_data(nbr)->prefix_len = prefix_len;
   1efc4:	f883 8020 	strb.w	r8, [r3, #32]
		nbr->idx, nbr, iface,
		net_sprint_ipv6_addr(&net_route_data(nbr)->addr),
		prefix_len);

	return nbr;
}
   1efc8:	4628      	mov	r0, r5
   1efca:	b004      	add	sp, #16
   1efcc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   1efd0:	2000c2b0 	.word	0x2000c2b0

0001efd4 <update_ll_reserve>:
 * Thus we need to check it here. Note that this cannot happen for IPv4
 * as 802.15.4 supports IPv6 only.
 */
static struct net_pkt *update_ll_reserve(struct net_pkt *pkt,
					 struct in6_addr *addr)
{
   1efd4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1efd8:	4682      	mov	sl, r0
	return pkt->forwarding;
   1efda:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38

	/* No need to do anything if we are forwarding the packet
	 * as we already know everything about the destination of
	 * the packet.
	 */
	if (net_pkt_forwarding(pkt)) {
   1efde:	f013 0f04 	tst.w	r3, #4
   1efe2:	d002      	beq.n	1efea <update_ll_reserve+0x16>
			pos = 0;
		}
	}

	return pkt;
}
   1efe4:	4650      	mov	r0, sl
   1efe6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return pkt->iface;
   1efea:	6940      	ldr	r0, [r0, #20]
   1efec:	6843      	ldr	r3, [r0, #4]
   1efee:	689b      	ldr	r3, [r3, #8]
   1eff0:	4798      	blx	r3
	if (reserve == net_pkt_ll_reserve(pkt)) {
   1eff2:	f89a 3032 	ldrb.w	r3, [sl, #50]	; 0x32
   1eff6:	4283      	cmp	r3, r0
   1eff8:	d0f4      	beq.n	1efe4 <update_ll_reserve+0x10>
	pkt->ll_reserve = len;
   1effa:	f88a 0032 	strb.w	r0, [sl, #50]	; 0x32
	orig_frag = pkt->frags;
   1effe:	f8da 7008 	ldr.w	r7, [sl, #8]
	copy_len = orig_frag->len;
   1f002:	89be      	ldrh	r6, [r7, #12]
	pkt->frags = NULL;
   1f004:	2400      	movs	r4, #0
   1f006:	f8ca 4008 	str.w	r4, [sl, #8]
	frag = NULL;
   1f00a:	46a1      	mov	r9, r4
	pos = 0;
   1f00c:	46a0      	mov	r8, r4
	while (orig_frag) {
   1f00e:	e020      	b.n	1f052 <update_ll_reserve+0x7e>
			frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f010:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f014:	4650      	mov	r0, sl
   1f016:	f7fd febd 	bl	1cd94 <net_pkt_get_frag>
   1f01a:	4681      	mov	r9, r0
			net_pkt_frag_add(pkt, frag);
   1f01c:	4601      	mov	r1, r0
   1f01e:	4650      	mov	r0, sl
   1f020:	f7fd ff35 	bl	1ce8e <net_pkt_frag_add>
			room_len = net_buf_tailroom(frag);
   1f024:	f109 0008 	add.w	r0, r9, #8
   1f028:	f7fb fa4d 	bl	1a4c6 <net_buf_simple_tailroom>
   1f02c:	b284      	uxth	r4, r0
   1f02e:	e014      	b.n	1f05a <update_ll_reserve+0x86>
			memcpy(net_buf_add(frag, room_len),
   1f030:	4621      	mov	r1, r4
   1f032:	f109 0008 	add.w	r0, r9, #8
   1f036:	f7fb f9dd 	bl	1a3f4 <net_buf_simple_add>
			       orig_frag->data + pos, room_len);
   1f03a:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, room_len),
   1f03c:	4622      	mov	r2, r4
   1f03e:	4441      	add	r1, r8
   1f040:	f7e1 f93e 	bl	2c0 <memcpy>
			copy_len -= room_len;
   1f044:	1b36      	subs	r6, r6, r4
   1f046:	b2b6      	uxth	r6, r6
			pos += room_len;
   1f048:	4444      	add	r4, r8
   1f04a:	fa1f f884 	uxth.w	r8, r4
			room_len = 0;
   1f04e:	2400      	movs	r4, #0
		if (!copy_len) {
   1f050:	b19e      	cbz	r6, 1f07a <update_ll_reserve+0xa6>
	while (orig_frag) {
   1f052:	2f00      	cmp	r7, #0
   1f054:	d0c6      	beq.n	1efe4 <update_ll_reserve+0x10>
		if (!room_len) {
   1f056:	2c00      	cmp	r4, #0
   1f058:	d0da      	beq.n	1f010 <update_ll_reserve+0x3c>
		if (room_len >= copy_len) {
   1f05a:	42b4      	cmp	r4, r6
   1f05c:	d3e8      	bcc.n	1f030 <update_ll_reserve+0x5c>
			memcpy(net_buf_add(frag, copy_len),
   1f05e:	4631      	mov	r1, r6
   1f060:	f109 0008 	add.w	r0, r9, #8
   1f064:	f7fb f9c6 	bl	1a3f4 <net_buf_simple_add>
			       orig_frag->data + pos, copy_len);
   1f068:	68b9      	ldr	r1, [r7, #8]
			memcpy(net_buf_add(frag, copy_len),
   1f06a:	4632      	mov	r2, r6
   1f06c:	4441      	add	r1, r8
   1f06e:	f7e1 f927 	bl	2c0 <memcpy>
			room_len -= copy_len;
   1f072:	1ba4      	subs	r4, r4, r6
   1f074:	b2a4      	uxth	r4, r4
			copy_len = 0;
   1f076:	2600      	movs	r6, #0
   1f078:	e7ea      	b.n	1f050 <update_ll_reserve+0x7c>
			orig_frag = orig_frag->frags;
   1f07a:	683d      	ldr	r5, [r7, #0]
			tmp->frags = NULL;
   1f07c:	2300      	movs	r3, #0
   1f07e:	603b      	str	r3, [r7, #0]
			net_pkt_frag_unref(tmp);
   1f080:	4638      	mov	r0, r7
   1f082:	f7fd fed4 	bl	1ce2e <net_pkt_frag_unref>
			if (!orig_frag) {
   1f086:	2d00      	cmp	r5, #0
   1f088:	d0ac      	beq.n	1efe4 <update_ll_reserve+0x10>
			orig_frag = orig_frag->frags;
   1f08a:	462f      	mov	r7, r5
			pos = 0;
   1f08c:	46b0      	mov	r8, r6
			copy_len = orig_frag->len;
   1f08e:	89ae      	ldrh	r6, [r5, #12]
   1f090:	e7df      	b.n	1f052 <update_ll_reserve+0x7e>

0001f092 <setup_headers>:
	       llao_len - lladdr->len - 2);
}

static void setup_headers(struct net_pkt *pkt, u8_t nd6_len,
			  u8_t icmp_type)
{
   1f092:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   1f094:	4604      	mov	r4, r0
   1f096:	460e      	mov	r6, r1
   1f098:	4617      	mov	r7, r2
	net_buf_add(pkt->frags,
   1f09a:	6880      	ldr	r0, [r0, #8]
   1f09c:	212c      	movs	r1, #44	; 0x2c
   1f09e:	3008      	adds	r0, #8
   1f0a0:	f7fb f9a8 	bl	1a3f4 <net_buf_simple_add>
	return pkt->frags->data;
   1f0a4:	68a3      	ldr	r3, [r4, #8]
   1f0a6:	689b      	ldr	r3, [r3, #8]
		    sizeof(struct net_ipv6_hdr) +
		    sizeof(struct net_icmp_hdr));

	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f0a8:	2260      	movs	r2, #96	; 0x60
   1f0aa:	701a      	strb	r2, [r3, #0]
   1f0ac:	68a3      	ldr	r3, [r4, #8]
   1f0ae:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f0b0:	2500      	movs	r5, #0
   1f0b2:	705d      	strb	r5, [r3, #1]
   1f0b4:	68a3      	ldr	r3, [r4, #8]
   1f0b6:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f0b8:	709d      	strb	r5, [r3, #2]
   1f0ba:	70dd      	strb	r5, [r3, #3]
   1f0bc:	68a3      	ldr	r3, [r4, #8]
   1f0be:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[0] = 0;
   1f0c0:	711d      	strb	r5, [r3, #4]
   1f0c2:	68a3      	ldr	r3, [r4, #8]
   1f0c4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = NET_ICMPH_LEN + nd6_len;
   1f0c6:	3604      	adds	r6, #4
   1f0c8:	715e      	strb	r6, [r3, #5]
   1f0ca:	68a3      	ldr	r3, [r4, #8]
   1f0cc:	689b      	ldr	r3, [r3, #8]

	NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_ICMPV6;
   1f0ce:	223a      	movs	r2, #58	; 0x3a
   1f0d0:	719a      	strb	r2, [r3, #6]
   1f0d2:	68a3      	ldr	r3, [r4, #8]
   1f0d4:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->hop_limit = NET_IPV6_ND_HOP_LIMIT;
   1f0d6:	22ff      	movs	r2, #255	; 0xff
   1f0d8:	71da      	strb	r2, [r3, #7]

	/* In this special case where we know there are no long extension
	 * headers, so we can use this header cast.
	 */
	net_pkt_icmp_data(pkt)->type = icmp_type;
   1f0da:	4620      	mov	r0, r4
   1f0dc:	f7fe f986 	bl	1d3ec <net_pkt_icmp_data>
   1f0e0:	7007      	strb	r7, [r0, #0]
	net_pkt_icmp_data(pkt)->code = 0;
   1f0e2:	4620      	mov	r0, r4
   1f0e4:	f7fe f982 	bl	1d3ec <net_pkt_icmp_data>
   1f0e8:	7045      	strb	r5, [r0, #1]
   1f0ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0001f0ec <nbr_free>:
{
   1f0ec:	b538      	push	{r3, r4, r5, lr}
   1f0ee:	4604      	mov	r4, r0
   1f0f0:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f0f2:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f0f6:	f00a fa6b 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   1f0fa:	6828      	ldr	r0, [r5, #0]
   1f0fc:	b118      	cbz	r0, 1f106 <nbr_free+0x1a>
		net_pkt_unref(data->pending);
   1f0fe:	f7fd fe9c 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   1f102:	2300      	movs	r3, #0
   1f104:	602b      	str	r3, [r5, #0]
   1f106:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f108:	3014      	adds	r0, #20
   1f10a:	f00a fa61 	bl	295d0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f10e:	4620      	mov	r0, r4
   1f110:	f7ff fc94 	bl	1ea3c <net_nbr_unref>
   1f114:	bd38      	pop	{r3, r4, r5, pc}
	...

0001f118 <net_ipv6_nbr_state2str>:
	switch (state) {
   1f118:	2805      	cmp	r0, #5
   1f11a:	d80e      	bhi.n	1f13a <net_ipv6_nbr_state2str+0x22>
   1f11c:	e8df f000 	tbb	[pc, r0]
   1f120:	07050f03 	.word	0x07050f03
   1f124:	0b09      	.short	0x0b09
		return "incomplete";
   1f126:	4807      	ldr	r0, [pc, #28]	; (1f144 <net_ipv6_nbr_state2str+0x2c>)
   1f128:	4770      	bx	lr
		return "stale";
   1f12a:	4807      	ldr	r0, [pc, #28]	; (1f148 <net_ipv6_nbr_state2str+0x30>)
   1f12c:	4770      	bx	lr
		return "delay";
   1f12e:	4807      	ldr	r0, [pc, #28]	; (1f14c <net_ipv6_nbr_state2str+0x34>)
   1f130:	4770      	bx	lr
		return "probe";
   1f132:	4807      	ldr	r0, [pc, #28]	; (1f150 <net_ipv6_nbr_state2str+0x38>)
   1f134:	4770      	bx	lr
		return "static";
   1f136:	4807      	ldr	r0, [pc, #28]	; (1f154 <net_ipv6_nbr_state2str+0x3c>)
   1f138:	4770      	bx	lr
	return "<invalid state>";
   1f13a:	4807      	ldr	r0, [pc, #28]	; (1f158 <net_ipv6_nbr_state2str+0x40>)
   1f13c:	4770      	bx	lr
		return "reachable";
   1f13e:	4807      	ldr	r0, [pc, #28]	; (1f15c <net_ipv6_nbr_state2str+0x44>)
}
   1f140:	4770      	bx	lr
   1f142:	bf00      	nop
   1f144:	0002db68 	.word	0x0002db68
   1f148:	0002db80 	.word	0x0002db80
   1f14c:	0002db88 	.word	0x0002db88
   1f150:	0002db90 	.word	0x0002db90
   1f154:	0002db98 	.word	0x0002db98
   1f158:	0002dba0 	.word	0x0002dba0
   1f15c:	0002db74 	.word	0x0002db74

0001f160 <net_ipv6_nbr_foreach>:
{
   1f160:	b500      	push	{lr}
   1f162:	b083      	sub	sp, #12
	struct iface_cb_data cb_data = {
   1f164:	9000      	str	r0, [sp, #0]
   1f166:	9101      	str	r1, [sp, #4]
	net_if_foreach(iface_cb, &cb_data);
   1f168:	4669      	mov	r1, sp
   1f16a:	4803      	ldr	r0, [pc, #12]	; (1f178 <net_ipv6_nbr_foreach+0x18>)
   1f16c:	f7fc fc3a 	bl	1b9e4 <net_if_foreach>
}
   1f170:	b003      	add	sp, #12
   1f172:	f85d fb04 	ldr.w	pc, [sp], #4
   1f176:	bf00      	nop
   1f178:	0001eb85 	.word	0x0001eb85

0001f17c <net_ipv6_nbr_rm>:
{
   1f17c:	b538      	push	{r3, r4, r5, lr}
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   1f17e:	460a      	mov	r2, r1
   1f180:	4601      	mov	r1, r0
   1f182:	480d      	ldr	r0, [pc, #52]	; (1f1b8 <net_ipv6_nbr_rm+0x3c>)
   1f184:	f7ff fe6c 	bl	1ee60 <nbr_lookup>
	if (!nbr) {
   1f188:	b1a0      	cbz	r0, 1f1b4 <net_ipv6_nbr_rm+0x38>
   1f18a:	4604      	mov	r4, r0
   1f18c:	68c5      	ldr	r5, [r0, #12]
	k_delayed_work_cancel(&data->send_ns);
   1f18e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   1f192:	f00a fa1d 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   1f196:	6828      	ldr	r0, [r5, #0]
   1f198:	b118      	cbz	r0, 1f1a2 <net_ipv6_nbr_rm+0x26>
		net_pkt_unref(data->pending);
   1f19a:	f7fd fe4e 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   1f19e:	2300      	movs	r3, #0
   1f1a0:	602b      	str	r3, [r5, #0]
   1f1a2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   1f1a4:	3014      	adds	r0, #20
   1f1a6:	f00a fa13 	bl	295d0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   1f1aa:	4620      	mov	r0, r4
   1f1ac:	f7ff fc46 	bl	1ea3c <net_nbr_unref>
	return true;
   1f1b0:	2001      	movs	r0, #1
   1f1b2:	bd38      	pop	{r3, r4, r5, pc}
		return false;
   1f1b4:	2000      	movs	r0, #0
}
   1f1b6:	bd38      	pop	{r3, r4, r5, pc}
   1f1b8:	2000be8c 	.word	0x2000be8c

0001f1bc <net_ipv6_unspecified_address>:
}
   1f1bc:	4800      	ldr	r0, [pc, #0]	; (1f1c0 <net_ipv6_unspecified_address+0x4>)
   1f1be:	4770      	bx	lr
   1f1c0:	0002db58 	.word	0x0002db58

0001f1c4 <create_mldv2>:

static struct net_pkt *create_mldv2(struct net_pkt *pkt,
				    const struct in6_addr *addr,
				    u16_t record_type,
				    u8_t num_sources)
{
   1f1c4:	b570      	push	{r4, r5, r6, lr}
   1f1c6:	b082      	sub	sp, #8
   1f1c8:	4604      	mov	r4, r0
   1f1ca:	460e      	mov	r6, r1
   1f1cc:	461d      	mov	r5, r3
   1f1ce:	a902      	add	r1, sp, #8
   1f1d0:	f801 2d03 	strb.w	r2, [r1, #-3]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f1d4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1d8:	460a      	mov	r2, r1
   1f1da:	2101      	movs	r1, #1
   1f1dc:	f7fd ff65 	bl	1d0aa <net_pkt_append>
   1f1e0:	aa02      	add	r2, sp, #8
   1f1e2:	2300      	movs	r3, #0
   1f1e4:	f802 3d04 	strb.w	r3, [r2, #-4]!
   1f1e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f1ec:	2101      	movs	r1, #1
   1f1ee:	4620      	mov	r0, r4
   1f1f0:	f7fd ff5b 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f1f4:	022b      	lsls	r3, r5, #8
   1f1f6:	aa02      	add	r2, sp, #8
   1f1f8:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f1fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f200:	2102      	movs	r1, #2
   1f202:	4620      	mov	r0, r4
   1f204:	f7fd ff51 	bl	1d0aa <net_pkt_append>
   1f208:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f20c:	4632      	mov	r2, r6
   1f20e:	2110      	movs	r1, #16
   1f210:	4620      	mov	r0, r4
   1f212:	f7fd ff4a 	bl	1d0aa <net_pkt_append>
	net_pkt_append_u8(pkt, 0); /* aux data len */
	net_pkt_append_be16(pkt, num_sources); /* number of addresses */
	net_pkt_append_all(pkt, sizeof(struct in6_addr), addr->s6_addr,
			K_FOREVER);

	if (num_sources > 0) {
   1f216:	b915      	cbnz	r5, 1f21e <create_mldv2+0x5a>
				net_ipv6_unspecified_address()->s6_addr,
				K_FOREVER);
	}

	return pkt;
}
   1f218:	4620      	mov	r0, r4
   1f21a:	b002      	add	sp, #8
   1f21c:	bd70      	pop	{r4, r5, r6, pc}
				net_ipv6_unspecified_address()->s6_addr,
   1f21e:	f7ff ffcd 	bl	1f1bc <net_ipv6_unspecified_address>
   1f222:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f226:	4602      	mov	r2, r0
   1f228:	2110      	movs	r1, #16
   1f22a:	4620      	mov	r0, r4
   1f22c:	f7fd ff3d 	bl	1d0aa <net_pkt_append>
   1f230:	e7f2      	b.n	1f218 <create_mldv2+0x54>

0001f232 <net_ipv6_create_raw>:
{
   1f232:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   1f236:	b088      	sub	sp, #32
   1f238:	4604      	mov	r4, r0
   1f23a:	460e      	mov	r6, r1
   1f23c:	4617      	mov	r7, r2
   1f23e:	461d      	mov	r5, r3
	header = net_pkt_get_frag(pkt, K_FOREVER);
   1f240:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f244:	f7fd fda6 	bl	1cd94 <net_pkt_get_frag>
   1f248:	4680      	mov	r8, r0
	net_pkt_frag_insert(pkt, header);
   1f24a:	4601      	mov	r1, r0
   1f24c:	4620      	mov	r0, r4
   1f24e:	f7fd fe2b 	bl	1cea8 <net_pkt_frag_insert>
	return pkt->frags->data;
   1f252:	68a3      	ldr	r3, [r4, #8]
   1f254:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->vtc = 0x60;
   1f256:	2260      	movs	r2, #96	; 0x60
   1f258:	701a      	strb	r2, [r3, #0]
   1f25a:	68a3      	ldr	r3, [r4, #8]
   1f25c:	689a      	ldr	r2, [r3, #8]
	NET_IPV6_HDR(pkt)->tcflow = 0;
   1f25e:	2300      	movs	r3, #0
   1f260:	7053      	strb	r3, [r2, #1]
   1f262:	68a2      	ldr	r2, [r4, #8]
   1f264:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->flow = 0;
   1f266:	7093      	strb	r3, [r2, #2]
   1f268:	70d3      	strb	r3, [r2, #3]
   1f26a:	68a2      	ldr	r2, [r4, #8]
   1f26c:	6892      	ldr	r2, [r2, #8]
	NET_IPV6_HDR(pkt)->nexthdr = 0;
   1f26e:	7193      	strb	r3, [r2, #6]
   1f270:	68a3      	ldr	r3, [r4, #8]
   1f272:	689b      	ldr	r3, [r3, #8]
	return pkt->ipv6_hop_limit;
   1f274:	f894 203a 	ldrb.w	r2, [r4, #58]	; 0x3a
	NET_IPV6_HDR(pkt)->hop_limit = net_pkt_ipv6_hop_limit(pkt);
   1f278:	71da      	strb	r2, [r3, #7]
	return pkt->frags->data;
   1f27a:	68a3      	ldr	r3, [r4, #8]
   1f27c:	689b      	ldr	r3, [r3, #8]
	if (NET_IPV6_HDR(pkt)->hop_limit == 0) {
   1f27e:	79da      	ldrb	r2, [r3, #7]
   1f280:	b912      	cbnz	r2, 1f288 <net_ipv6_create_raw+0x56>
	return iface->ipv6.hop_limit;
   1f282:	f895 2294 	ldrb.w	r2, [r5, #660]	; 0x294
		NET_IPV6_HDR(pkt)->hop_limit =
   1f286:	71da      	strb	r2, [r3, #7]
   1f288:	68a3      	ldr	r3, [r4, #8]
   1f28a:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f28e:	466d      	mov	r5, sp
   1f290:	6838      	ldr	r0, [r7, #0]
   1f292:	6879      	ldr	r1, [r7, #4]
   1f294:	68ba      	ldr	r2, [r7, #8]
   1f296:	68fb      	ldr	r3, [r7, #12]
   1f298:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f29a:	466d      	mov	r5, sp
   1f29c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f29e:	f8ce 0018 	str.w	r0, [lr, #24]
   1f2a2:	f8ce 101c 	str.w	r1, [lr, #28]
   1f2a6:	f8ce 2020 	str.w	r2, [lr, #32]
   1f2aa:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
   1f2ae:	68a3      	ldr	r3, [r4, #8]
   1f2b0:	689f      	ldr	r7, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f2b2:	6830      	ldr	r0, [r6, #0]
   1f2b4:	6871      	ldr	r1, [r6, #4]
   1f2b6:	68b2      	ldr	r2, [r6, #8]
   1f2b8:	68f3      	ldr	r3, [r6, #12]
   1f2ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f2bc:	ad04      	add	r5, sp, #16
   1f2be:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f2c0:	60b8      	str	r0, [r7, #8]
   1f2c2:	60f9      	str	r1, [r7, #12]
   1f2c4:	613a      	str	r2, [r7, #16]
   1f2c6:	617b      	str	r3, [r7, #20]
	pkt->ipv6_ext_len = len;
   1f2c8:	2300      	movs	r3, #0
   1f2ca:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1f2ce:	68a3      	ldr	r3, [r4, #8]
   1f2d0:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->nexthdr = next_header;
   1f2d2:	f89d 2038 	ldrb.w	r2, [sp, #56]	; 0x38
   1f2d6:	719a      	strb	r2, [r3, #6]
	pkt->ip_hdr_len = len;
   1f2d8:	2128      	movs	r1, #40	; 0x28
   1f2da:	f884 1033 	strb.w	r1, [r4, #51]	; 0x33
	pkt->family = family;
   1f2de:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f2e2:	220a      	movs	r2, #10
   1f2e4:	f362 03c6 	bfi	r3, r2, #3, #4
   1f2e8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	net_buf_add(header, sizeof(struct net_ipv6_hdr));
   1f2ec:	f108 0008 	add.w	r0, r8, #8
   1f2f0:	f7fb f880 	bl	1a3f4 <net_buf_simple_add>
}
   1f2f4:	4620      	mov	r0, r4
   1f2f6:	b008      	add	sp, #32
   1f2f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0001f2fc <net_ipv6_create>:
{
   1f2fc:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f2fe:	b083      	sub	sp, #12
   1f300:	4605      	mov	r5, r0
   1f302:	460e      	mov	r6, r1
   1f304:	461f      	mov	r7, r3
	if (!src) {
   1f306:	4614      	mov	r4, r2
   1f308:	b14a      	cbz	r2, 1f31e <net_ipv6_create+0x22>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f30a:	6823      	ldr	r3, [r4, #0]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f30c:	b94b      	cbnz	r3, 1f322 <net_ipv6_create+0x26>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f30e:	6863      	ldr	r3, [r4, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1f310:	b9fb      	cbnz	r3, 1f352 <net_ipv6_create+0x56>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f312:	68a3      	ldr	r3, [r4, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1f314:	b9fb      	cbnz	r3, 1f356 <net_ipv6_create+0x5a>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1f316:	68e3      	ldr	r3, [r4, #12]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f318:	b1fb      	cbz	r3, 1f35a <net_ipv6_create+0x5e>
   1f31a:	2300      	movs	r3, #0
   1f31c:	e002      	b.n	1f324 <net_ipv6_create+0x28>
		src = ((struct sockaddr_in6_ptr *)&context->local)->sin6_addr;
   1f31e:	68c4      	ldr	r4, [r0, #12]
   1f320:	e7f3      	b.n	1f30a <net_ipv6_create+0xe>
   1f322:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(src)
   1f324:	b9db      	cbnz	r3, 1f35e <net_ipv6_create+0x62>
	return addr->s6_addr[0] == 0xFF;
   1f326:	7823      	ldrb	r3, [r4, #0]
	    || net_is_ipv6_addr_mcast(src)) {
   1f328:	2bff      	cmp	r3, #255	; 0xff
   1f32a:	d018      	beq.n	1f35e <net_ipv6_create+0x62>
	return net_if_get_by_index(context->iface);
   1f32c:	f895 005c 	ldrb.w	r0, [r5, #92]	; 0x5c
   1f330:	f7fc fb3c 	bl	1b9ac <net_if_get_by_index>
   1f334:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_PROTO) {
   1f336:	f895 205d 	ldrb.w	r2, [r5, #93]	; 0x5d
   1f33a:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f33e:	d114      	bne.n	1f36a <net_ipv6_create+0x6e>
	return IPPROTO_UDP;
   1f340:	2211      	movs	r2, #17
	return net_ipv6_create_raw(pkt,
   1f342:	9200      	str	r2, [sp, #0]
   1f344:	463a      	mov	r2, r7
   1f346:	4621      	mov	r1, r4
   1f348:	4630      	mov	r0, r6
   1f34a:	f7ff ff72 	bl	1f232 <net_ipv6_create_raw>
}
   1f34e:	b003      	add	sp, #12
   1f350:	bdf0      	pop	{r4, r5, r6, r7, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1f352:	2300      	movs	r3, #0
   1f354:	e7e6      	b.n	1f324 <net_ipv6_create+0x28>
   1f356:	2300      	movs	r3, #0
   1f358:	e7e4      	b.n	1f324 <net_ipv6_create+0x28>
   1f35a:	2301      	movs	r3, #1
   1f35c:	e7e2      	b.n	1f324 <net_ipv6_create+0x28>
		src = net_if_ipv6_select_src_addr(net_pkt_iface(pkt),
   1f35e:	4639      	mov	r1, r7
   1f360:	6970      	ldr	r0, [r6, #20]
   1f362:	f7fc f8cf 	bl	1b504 <net_if_ipv6_select_src_addr>
   1f366:	4604      	mov	r4, r0
   1f368:	e7e0      	b.n	1f32c <net_ipv6_create+0x30>
		return IPPROTO_TCP;
   1f36a:	2206      	movs	r2, #6
   1f36c:	e7e9      	b.n	1f342 <net_ipv6_create+0x46>

0001f36e <net_ipv6_finalize_raw>:
{
   1f36e:	b538      	push	{r3, r4, r5, lr}
   1f370:	4605      	mov	r5, r0
   1f372:	460c      	mov	r4, r1
	net_pkt_compact(pkt);
   1f374:	f7fd fe52 	bl	1d01c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   1f378:	68a8      	ldr	r0, [r5, #8]
   1f37a:	4603      	mov	r3, r0
	size_t bytes = 0;
   1f37c:	2200      	movs	r2, #0
   1f37e:	e002      	b.n	1f386 <net_ipv6_finalize_raw+0x18>
		bytes += buf->len;
   1f380:	8999      	ldrh	r1, [r3, #12]
   1f382:	440a      	add	r2, r1
		buf = buf->frags;
   1f384:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f386:	2b00      	cmp	r3, #0
   1f388:	d1fa      	bne.n	1f380 <net_ipv6_finalize_raw+0x12>
	total_len -= sizeof(struct net_ipv6_hdr);
   1f38a:	3a28      	subs	r2, #40	; 0x28
	return pkt->frags->data;
   1f38c:	6883      	ldr	r3, [r0, #8]
	NET_IPV6_HDR(pkt)->len[0] = total_len / 256;
   1f38e:	0a11      	lsrs	r1, r2, #8
   1f390:	7119      	strb	r1, [r3, #4]
   1f392:	68ab      	ldr	r3, [r5, #8]
   1f394:	689b      	ldr	r3, [r3, #8]
	NET_IPV6_HDR(pkt)->len[1] = total_len - NET_IPV6_HDR(pkt)->len[0] * 256;
   1f396:	715a      	strb	r2, [r3, #5]
	if (next_header == IPPROTO_UDP) {
   1f398:	2c11      	cmp	r4, #17
   1f39a:	d005      	beq.n	1f3a8 <net_ipv6_finalize_raw+0x3a>
	if (next_header == IPPROTO_TCP) {
   1f39c:	2c06      	cmp	r4, #6
   1f39e:	d008      	beq.n	1f3b2 <net_ipv6_finalize_raw+0x44>
	if (next_header == IPPROTO_ICMPV6) {
   1f3a0:	2c3a      	cmp	r4, #58	; 0x3a
   1f3a2:	d00b      	beq.n	1f3bc <net_ipv6_finalize_raw+0x4e>
}
   1f3a4:	2000      	movs	r0, #0
   1f3a6:	bd38      	pop	{r3, r4, r5, pc}
		net_udp_set_chksum(pkt, pkt->frags);
   1f3a8:	68a9      	ldr	r1, [r5, #8]
   1f3aa:	4628      	mov	r0, r5
   1f3ac:	f003 fa9b 	bl	228e6 <net_udp_set_chksum>
   1f3b0:	e7f8      	b.n	1f3a4 <net_ipv6_finalize_raw+0x36>
		net_tcp_set_chksum(pkt, pkt->frags);
   1f3b2:	68a9      	ldr	r1, [r5, #8]
   1f3b4:	4628      	mov	r0, r5
   1f3b6:	f004 f8da 	bl	2356e <net_tcp_set_chksum>
   1f3ba:	e7f3      	b.n	1f3a4 <net_ipv6_finalize_raw+0x36>
		net_icmpv6_set_chksum(pkt, pkt->frags);
   1f3bc:	68a9      	ldr	r1, [r5, #8]
   1f3be:	4628      	mov	r0, r5
   1f3c0:	f7fe fdf2 	bl	1dfa8 <net_icmpv6_set_chksum>
   1f3c4:	e7ee      	b.n	1f3a4 <net_ipv6_finalize_raw+0x36>
	...

0001f3c8 <send_mldv2_raw>:

static int send_mldv2_raw(struct net_if *iface, struct net_buf *frags)
{
   1f3c8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   1f3cc:	b08d      	sub	sp, #52	; 0x34
   1f3ce:	4680      	mov	r8, r0
   1f3d0:	4689      	mov	r9, r1
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   1f3d2:	f240 23ff 	movw	r3, #767	; 0x2ff
   1f3d6:	f8ad 3020 	strh.w	r3, [sp, #32]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   1f3da:	2500      	movs	r5, #0
   1f3dc:	f8ad 5022 	strh.w	r5, [sp, #34]	; 0x22
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   1f3e0:	f8ad 5024 	strh.w	r5, [sp, #36]	; 0x24
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   1f3e4:	f8ad 5026 	strh.w	r5, [sp, #38]	; 0x26
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   1f3e8:	f8ad 5028 	strh.w	r5, [sp, #40]	; 0x28
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   1f3ec:	f8ad 502a 	strh.w	r5, [sp, #42]	; 0x2a
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   1f3f0:	f8ad 502c 	strh.w	r5, [sp, #44]	; 0x2c
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   1f3f4:	f44f 53b0 	mov.w	r3, #5632	; 0x1600
   1f3f8:	f8ad 302e 	strh.w	r3, [sp, #46]	; 0x2e
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1f3fc:	6843      	ldr	r3, [r0, #4]
   1f3fe:	689b      	ldr	r3, [r3, #8]
   1f400:	a908      	add	r1, sp, #32
   1f402:	4798      	blx	r3
	int ret;

	/* Sent to all MLDv2-capable routers */
	net_ipv6_addr_create(&dst, 0xff02, 0, 0, 0, 0, 0, 0, 0x0016);

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, &dst),
   1f404:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f408:	f7fd fca6 	bl	1cd58 <net_pkt_get_reserve_tx>
   1f40c:	4604      	mov	r4, r0
				     K_FOREVER);

	pkt = net_ipv6_create_raw(pkt,
   1f40e:	a908      	add	r1, sp, #32
   1f410:	4640      	mov	r0, r8
   1f412:	f7fc f877 	bl	1b504 <net_if_ipv6_select_src_addr>
   1f416:	9500      	str	r5, [sp, #0]
   1f418:	4643      	mov	r3, r8
   1f41a:	aa08      	add	r2, sp, #32
   1f41c:	4601      	mov	r1, r0
   1f41e:	4620      	mov	r0, r4
   1f420:	f7ff ff07 	bl	1f232 <net_ipv6_create_raw>
   1f424:	4604      	mov	r4, r0
   1f426:	6883      	ldr	r3, [r0, #8]
   1f428:	689b      	ldr	r3, [r3, #8]
				  net_if_ipv6_select_src_addr(iface, &dst),
				  &dst,
				  iface,
				  NET_IPV6_NEXTHDR_HBHO);

	NET_IPV6_HDR(pkt)->hop_limit = 1; /* RFC 3810 ch 7.4 */
   1f42a:	2601      	movs	r6, #1
   1f42c:	71de      	strb	r6, [r3, #7]

	net_pkt_set_ipv6_hdr_prev(pkt, pkt->frags->len);
   1f42e:	6883      	ldr	r3, [r0, #8]
   1f430:	899b      	ldrh	r3, [r3, #12]
	pkt->ipv6_prev_hdr_start = offset;
   1f432:	87c3      	strh	r3, [r0, #62]	; 0x3e
   1f434:	aa0c      	add	r2, sp, #48	; 0x30
   1f436:	233a      	movs	r3, #58	; 0x3a
   1f438:	f802 3d15 	strb.w	r3, [r2, #-21]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f43c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f440:	4631      	mov	r1, r6
   1f442:	f7fd fe32 	bl	1d0aa <net_pkt_append>
   1f446:	aa0c      	add	r2, sp, #48	; 0x30
   1f448:	f802 5d16 	strb.w	r5, [r2, #-22]!
   1f44c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f450:	4631      	mov	r1, r6
   1f452:	4620      	mov	r0, r4
   1f454:	f7fd fe29 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f458:	af0c      	add	r7, sp, #48	; 0x30
   1f45a:	f240 2305 	movw	r3, #517	; 0x205
   1f45e:	f827 3d14 	strh.w	r3, [r7, #-20]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f462:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f466:	463a      	mov	r2, r7
   1f468:	2102      	movs	r1, #2
   1f46a:	4620      	mov	r0, r4
   1f46c:	f7fd fe1d 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f470:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f474:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f478:	463a      	mov	r2, r7
   1f47a:	2102      	movs	r1, #2
   1f47c:	4620      	mov	r0, r4
   1f47e:	f7fd fe14 	bl	1d0aa <net_pkt_append>
   1f482:	aa0c      	add	r2, sp, #48	; 0x30
   1f484:	f802 5d17 	strb.w	r5, [r2, #-23]!
   1f488:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f48c:	4631      	mov	r1, r6
   1f48e:	4620      	mov	r0, r4
   1f490:	f7fd fe0b 	bl	1d0aa <net_pkt_append>
   1f494:	aa0c      	add	r2, sp, #48	; 0x30
   1f496:	f802 5d18 	strb.w	r5, [r2, #-24]!
   1f49a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f49e:	4631      	mov	r1, r6
   1f4a0:	4620      	mov	r0, r4
   1f4a2:	f7fd fe02 	bl	1d0aa <net_pkt_append>
   1f4a6:	aa0c      	add	r2, sp, #48	; 0x30
   1f4a8:	238f      	movs	r3, #143	; 0x8f
   1f4aa:	f802 3d19 	strb.w	r3, [r2, #-25]!
   1f4ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f4b2:	4631      	mov	r1, r6
   1f4b4:	4620      	mov	r0, r4
   1f4b6:	f7fd fdf8 	bl	1d0aa <net_pkt_append>
   1f4ba:	aa0c      	add	r2, sp, #48	; 0x30
   1f4bc:	f802 5d1a 	strb.w	r5, [r2, #-26]!
   1f4c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f4c4:	4631      	mov	r1, r6
   1f4c6:	4620      	mov	r0, r4
   1f4c8:	f7fd fdef 	bl	1d0aa <net_pkt_append>
	u16_t value = sys_cpu_to_be16(data);
   1f4cc:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f4d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f4d4:	463a      	mov	r2, r7
   1f4d6:	2102      	movs	r1, #2
   1f4d8:	4620      	mov	r0, r4
   1f4da:	f7fd fde6 	bl	1d0aa <net_pkt_append>
	/* ICMPv6 header */
	net_pkt_append_u8(pkt, NET_ICMPV6_MLDv2); /* type */
	net_pkt_append_u8(pkt, 0); /* code */
	net_pkt_append_be16(pkt, 0); /* chksum */

	pkt->frags->len = NET_IPV6ICMPH_LEN + ROUTER_ALERT_LEN;
   1f4de:	68a3      	ldr	r3, [r4, #8]
   1f4e0:	2234      	movs	r2, #52	; 0x34
   1f4e2:	819a      	strh	r2, [r3, #12]
	pkt->iface = iface;
   1f4e4:	f8c4 8014 	str.w	r8, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f4e8:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f4ec:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f4f0:	f898 3015 	ldrb.w	r3, [r8, #21]
   1f4f4:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	u16_t value = sys_cpu_to_be16(data);
   1f4f8:	f8ad 501c 	strh.w	r5, [sp, #28]
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f4fc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f500:	463a      	mov	r2, r7
   1f502:	2102      	movs	r1, #2
   1f504:	4620      	mov	r0, r4
   1f506:	f7fd fdd0 	bl	1d0aa <net_pkt_append>
	net_pkt_set_iface(pkt, iface);

	net_pkt_append_be16(pkt, 0); /* reserved field */

	/* Insert the actual multicast record(s) here */
	net_pkt_frag_add(pkt, frags);
   1f50a:	4649      	mov	r1, r9
   1f50c:	4620      	mov	r0, r4
   1f50e:	f7fd fcbe 	bl	1ce8e <net_pkt_frag_add>

	ret = net_ipv6_finalize_raw(pkt, NET_IPV6_NEXTHDR_HBHO);
   1f512:	4629      	mov	r1, r5
   1f514:	4620      	mov	r0, r4
   1f516:	f7ff ff2a 	bl	1f36e <net_ipv6_finalize_raw>
	if (ret < 0) {
   1f51a:	1e05      	subs	r5, r0, #0
   1f51c:	db35      	blt.n	1f58a <send_mldv2_raw+0x1c2>
	pkt->ipv6_ext_len = len;
   1f51e:	2308      	movs	r3, #8
   1f520:	f884 303b 	strb.w	r3, [r4, #59]	; 0x3b
		goto drop;
	}

	net_pkt_set_ipv6_ext_len(pkt, ROUTER_ALERT_LEN);

	net_pkt_write_be16(pkt, pkt->frags,
   1f524:	68a6      	ldr	r6, [r4, #8]
	return net_calc_chksum(pkt, IPPROTO_ICMPV6);
   1f526:	213a      	movs	r1, #58	; 0x3a
   1f528:	4620      	mov	r0, r4
   1f52a:	f7fe faf0 	bl	1db0e <net_calc_chksum>
			   NET_IPV6H_LEN + ROUTER_ALERT_LEN + 2,
			   &pos, ntohs(~net_calc_chksum_icmpv6(pkt)));
   1f52e:	ea6f 2020 	mvn.w	r0, r0, asr #8
   1f532:	b2c5      	uxtb	r5, r0
   1f534:	213a      	movs	r1, #58	; 0x3a
   1f536:	4620      	mov	r0, r4
   1f538:	f7fe fae9 	bl	1db0e <net_calc_chksum>
   1f53c:	43c0      	mvns	r0, r0
   1f53e:	ea45 2000 	orr.w	r0, r5, r0, lsl #8
	net_pkt_write_be16(pkt, pkt->frags,
   1f542:	b280      	uxth	r0, r0
						 struct net_buf *frag,
						 u16_t offset,
						 u16_t *pos,
						 u16_t data)
{
	u16_t value = htons(data);
   1f544:	0a03      	lsrs	r3, r0, #8
   1f546:	ea43 2000 	orr.w	r0, r3, r0, lsl #8
   1f54a:	f8ad 001c 	strh.w	r0, [sp, #28]

	return net_pkt_write(pkt, frag, offset, pos, sizeof(u16_t),
   1f54e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f552:	9302      	str	r3, [sp, #8]
   1f554:	ab07      	add	r3, sp, #28
   1f556:	9301      	str	r3, [sp, #4]
   1f558:	2302      	movs	r3, #2
   1f55a:	9300      	str	r3, [sp, #0]
   1f55c:	f10d 031e 	add.w	r3, sp, #30
   1f560:	2232      	movs	r2, #50	; 0x32
   1f562:	4631      	mov	r1, r6
   1f564:	4620      	mov	r0, r4
   1f566:	f7fd fe58 	bl	1d21a <net_pkt_write>

	ret = net_send_data(pkt);
   1f56a:	4620      	mov	r0, r4
   1f56c:	f7fb f864 	bl	1a638 <net_send_data>
	if (ret < 0) {
   1f570:	1e05      	subs	r5, r0, #0
   1f572:	db0a      	blt.n	1f58a <send_mldv2_raw+0x1c2>
	net_stats.icmp.sent++;
   1f574:	4b0d      	ldr	r3, [pc, #52]	; (1f5ac <send_mldv2_raw+0x1e4>)
   1f576:	6b9a      	ldr	r2, [r3, #56]	; 0x38
   1f578:	3201      	adds	r2, #1
   1f57a:	639a      	str	r2, [r3, #56]	; 0x38
	net_stats.ipv6_mld.recv++;
}

static inline void net_stats_update_ipv6_mld_sent(void)
{
	net_stats.ipv6_mld.sent++;
   1f57c:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   1f580:	3201      	adds	r2, #1
   1f582:	f8c3 209c 	str.w	r2, [r3, #156]	; 0x9c
	}

	net_stats_update_icmp_sent();
	net_stats_update_ipv6_mld_sent();

	return 0;
   1f586:	2500      	movs	r5, #0
   1f588:	e00b      	b.n	1f5a2 <send_mldv2_raw+0x1da>

drop:
	net_pkt_unref(pkt);
   1f58a:	4620      	mov	r0, r4
   1f58c:	f7fd fc55 	bl	1ce3a <net_pkt_unref>
	net_stats.icmp.drop++;
   1f590:	4b06      	ldr	r3, [pc, #24]	; (1f5ac <send_mldv2_raw+0x1e4>)
   1f592:	6bda      	ldr	r2, [r3, #60]	; 0x3c
   1f594:	3201      	adds	r2, #1
   1f596:	63da      	str	r2, [r3, #60]	; 0x3c
}

static inline void net_stats_update_ipv6_mld_drop(void)
{
	net_stats.ipv6_mld.drop++;
   1f598:	f8d3 20a0 	ldr.w	r2, [r3, #160]	; 0xa0
   1f59c:	3201      	adds	r2, #1
   1f59e:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_stats_update_icmp_drop();
	net_stats_update_ipv6_mld_drop();

	return ret;
}
   1f5a2:	4628      	mov	r0, r5
   1f5a4:	b00d      	add	sp, #52	; 0x34
   1f5a6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   1f5aa:	bf00      	nop
   1f5ac:	20002ab8 	.word	0x20002ab8

0001f5b0 <send_mldv2>:

static int send_mldv2(struct net_if *iface, const struct in6_addr *addr,
		      u8_t mode)
{
   1f5b0:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f5b2:	b083      	sub	sp, #12
   1f5b4:	4605      	mov	r5, r0
   1f5b6:	460e      	mov	r6, r1
   1f5b8:	4617      	mov	r7, r2
   1f5ba:	6843      	ldr	r3, [r0, #4]
   1f5bc:	689b      	ldr	r3, [r3, #8]
   1f5be:	2100      	movs	r1, #0
   1f5c0:	4798      	blx	r3
	struct net_pkt *pkt;
	int ret;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f5c2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f5c6:	f7fd fbc7 	bl	1cd58 <net_pkt_get_reserve_tx>
   1f5ca:	4604      	mov	r4, r0
	u16_t value = sys_cpu_to_be16(data);
   1f5cc:	aa02      	add	r2, sp, #8
   1f5ce:	f44f 7380 	mov.w	r3, #256	; 0x100
   1f5d2:	f822 3d02 	strh.w	r3, [r2, #-2]!
	return net_pkt_append(pkt, len, data, timeout) == len;
   1f5d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f5da:	2102      	movs	r1, #2
   1f5dc:	f7fd fd65 	bl	1d0aa <net_pkt_append>
				     K_FOREVER);

	net_pkt_append_be16(pkt, 1); /* number of records */

	pkt = create_mldv2(pkt, addr, mode, 1);
   1f5e0:	2301      	movs	r3, #1
   1f5e2:	463a      	mov	r2, r7
   1f5e4:	4631      	mov	r1, r6
   1f5e6:	4620      	mov	r0, r4
   1f5e8:	f7ff fdec 	bl	1f1c4 <create_mldv2>
   1f5ec:	4604      	mov	r4, r0

	ret = send_mldv2_raw(iface, pkt->frags);
   1f5ee:	6881      	ldr	r1, [r0, #8]
   1f5f0:	4628      	mov	r0, r5
   1f5f2:	f7ff fee9 	bl	1f3c8 <send_mldv2_raw>
   1f5f6:	4605      	mov	r5, r0

	pkt->frags = NULL;
   1f5f8:	2300      	movs	r3, #0
   1f5fa:	60a3      	str	r3, [r4, #8]

	net_pkt_unref(pkt);
   1f5fc:	4620      	mov	r0, r4
   1f5fe:	f7fd fc1c 	bl	1ce3a <net_pkt_unref>

	return ret;
}
   1f602:	4628      	mov	r0, r5
   1f604:	b003      	add	sp, #12
   1f606:	bdf0      	pop	{r4, r5, r6, r7, pc}

0001f608 <send_mld_report>:

	return ret;
}

static void send_mld_report(struct net_if *iface)
{
   1f608:	b5f0      	push	{r4, r5, r6, r7, lr}
   1f60a:	b087      	sub	sp, #28
   1f60c:	4605      	mov	r5, r0
   1f60e:	6843      	ldr	r3, [r0, #4]
   1f610:	689b      	ldr	r3, [r3, #8]
   1f612:	2100      	movs	r1, #0
   1f614:	4798      	blx	r3
	struct net_pkt *pkt;
	int i, count = 0;

	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   1f616:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f61a:	f7fd fb9d 	bl	1cd58 <net_pkt_get_reserve_tx>
   1f61e:	4606      	mov	r6, r0
   1f620:	2400      	movs	r4, #0
   1f622:	aa06      	add	r2, sp, #24
   1f624:	f802 4d04 	strb.w	r4, [r2, #-4]!
   1f628:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f62c:	2101      	movs	r1, #1
   1f62e:	f7fd fd3c 	bl	1d0aa <net_pkt_append>
	int i, count = 0;
   1f632:	4627      	mov	r7, r4
				     K_FOREVER);

	net_pkt_append_u8(pkt, 0); /* This will be the record count */

	for (i = 0; i < NET_IF_MAX_IPV6_MADDR; i++) {
   1f634:	e000      	b.n	1f638 <send_mld_report+0x30>
   1f636:	3401      	adds	r4, #1
   1f638:	2c04      	cmp	r4, #4
   1f63a:	dc1e      	bgt.n	1f67a <send_mld_report+0x72>
		if (!iface->ipv6.mcast[i].is_used ||
   1f63c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f640:	00d3      	lsls	r3, r2, #3
   1f642:	442b      	add	r3, r5
   1f644:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
   1f648:	f013 0f01 	tst.w	r3, #1
   1f64c:	d0f3      	beq.n	1f636 <send_mld_report+0x2e>
		    !iface->ipv6.mcast[i].is_joined) {
   1f64e:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   1f652:	00d3      	lsls	r3, r2, #3
   1f654:	461a      	mov	r2, r3
   1f656:	442b      	add	r3, r5
   1f658:	f893 3170 	ldrb.w	r3, [r3, #368]	; 0x170
		if (!iface->ipv6.mcast[i].is_used ||
   1f65c:	f013 0f02 	tst.w	r3, #2
   1f660:	d0e9      	beq.n	1f636 <send_mld_report+0x2e>
			continue;
		}

		pkt = create_mldv2(pkt, &iface->ipv6.mcast[i].address.in6_addr,
   1f662:	f502 71b0 	add.w	r1, r2, #352	; 0x160
   1f666:	4429      	add	r1, r5
   1f668:	2300      	movs	r3, #0
   1f66a:	2202      	movs	r2, #2
   1f66c:	3118      	adds	r1, #24
   1f66e:	4630      	mov	r0, r6
   1f670:	f7ff fda8 	bl	1f1c4 <create_mldv2>
   1f674:	4606      	mov	r6, r0
				   NET_IPV6_MLDv2_MODE_IS_EXCLUDE, 0);
		count++;
   1f676:	3701      	adds	r7, #1
   1f678:	e7dd      	b.n	1f636 <send_mld_report+0x2e>
	}

	if (count > 0) {
   1f67a:	2f00      	cmp	r7, #0
   1f67c:	dd16      	ble.n	1f6ac <send_mld_report+0xa4>
		u16_t pos;

		/* Write back the record count */
		net_pkt_write_u8(pkt, pkt->frags, 0, &pos, count);
   1f67e:	68b1      	ldr	r1, [r6, #8]
   1f680:	f88d 7015 	strb.w	r7, [sp, #21]
	return net_pkt_write(pkt, frag, offset, pos, sizeof(u8_t),
   1f684:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   1f688:	9302      	str	r3, [sp, #8]
   1f68a:	f10d 0315 	add.w	r3, sp, #21
   1f68e:	9301      	str	r3, [sp, #4]
   1f690:	2301      	movs	r3, #1
   1f692:	9300      	str	r3, [sp, #0]
   1f694:	f10d 0316 	add.w	r3, sp, #22
   1f698:	2200      	movs	r2, #0
   1f69a:	4630      	mov	r0, r6
   1f69c:	f7fd fdbd 	bl	1d21a <net_pkt_write>

		send_mldv2_raw(iface, pkt->frags);
   1f6a0:	68b1      	ldr	r1, [r6, #8]
   1f6a2:	4628      	mov	r0, r5
   1f6a4:	f7ff fe90 	bl	1f3c8 <send_mldv2_raw>

		pkt->frags = NULL;
   1f6a8:	2300      	movs	r3, #0
   1f6aa:	60b3      	str	r3, [r6, #8]
	}

	net_pkt_unref(pkt);
   1f6ac:	4630      	mov	r0, r6
   1f6ae:	f7fd fbc4 	bl	1ce3a <net_pkt_unref>
}
   1f6b2:	b007      	add	sp, #28
   1f6b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

0001f6b8 <handle_mld_query>:

static enum net_verdict handle_mld_query(struct net_pkt *pkt)
{
   1f6b8:	b570      	push	{r4, r5, r6, lr}
   1f6ba:	b08a      	sub	sp, #40	; 0x28
   1f6bc:	4605      	mov	r5, r0
	return net_buf_frags_len(pkt->frags);
   1f6be:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f6c0:	2200      	movs	r2, #0
   1f6c2:	e002      	b.n	1f6ca <handle_mld_query+0x12>
		bytes += buf->len;
   1f6c4:	8999      	ldrh	r1, [r3, #12]
   1f6c6:	440a      	add	r2, r1
		buf = buf->frags;
   1f6c8:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f6ca:	2b00      	cmp	r3, #0
   1f6cc:	d1fa      	bne.n	1f6c4 <handle_mld_query+0xc>
	u16_t total_len = net_pkt_get_len(pkt);
   1f6ce:	b294      	uxth	r4, r2
	net_stats.ipv6_mld.recv++;
   1f6d0:	4a37      	ldr	r2, [pc, #220]	; (1f7b0 <handle_mld_query+0xf8>)
   1f6d2:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   1f6d6:	3301      	adds	r3, #1
   1f6d8:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

	net_stats_update_ipv6_mld_recv();

	/* offset tells now where the ICMPv6 header is starting */
	frag = net_frag_get_pos(pkt,
				net_pkt_ip_hdr_len(pkt) +
   1f6dc:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1f6e0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
				net_pkt_ip_hdr_len(pkt) +
   1f6e4:	4419      	add	r1, r3
	frag = net_frag_get_pos(pkt,
   1f6e6:	3104      	adds	r1, #4
   1f6e8:	f10d 0212 	add.w	r2, sp, #18
   1f6ec:	b289      	uxth	r1, r1
   1f6ee:	4628      	mov	r0, r5
   1f6f0:	f7fd fe72 	bl	1d3d8 <net_frag_get_pos>
				sizeof(struct net_icmp_hdr),
				&offset);

	frag = net_frag_read_be16(frag, offset, &pos, &max_rsp_code);
   1f6f4:	f10d 0316 	add.w	r3, sp, #22
   1f6f8:	aa04      	add	r2, sp, #16
   1f6fa:	f8bd 1012 	ldrh.w	r1, [sp, #18]
   1f6fe:	f7fd fd62 	bl	1d1c6 <net_frag_read_be16>
	frag = net_frag_skip(frag, pos, &pos, 2); /* two reserved bytes */
   1f702:	f8bd 1010 	ldrh.w	r1, [sp, #16]
	return net_frag_read(frag, offset, pos, len, NULL);
   1f706:	2600      	movs	r6, #0
   1f708:	9600      	str	r6, [sp, #0]
   1f70a:	2302      	movs	r3, #2
   1f70c:	aa04      	add	r2, sp, #16
   1f70e:	f7fd fd12 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(mcast), mcast.s6_addr);
   1f712:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f716:	ab06      	add	r3, sp, #24
   1f718:	9300      	str	r3, [sp, #0]
   1f71a:	2310      	movs	r3, #16
   1f71c:	eb0d 0203 	add.w	r2, sp, r3
   1f720:	f7fd fd09 	bl	1d136 <net_frag_read>
	frag = net_frag_skip(frag, pos, &pos, 2); /* skip S, QRV & QQIC */
   1f724:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f728:	9600      	str	r6, [sp, #0]
   1f72a:	2302      	movs	r3, #2
   1f72c:	aa04      	add	r2, sp, #16
   1f72e:	f7fd fd02 	bl	1d136 <net_frag_read>
	frag = net_frag_read_be16(pkt->frags, pos, &pos, &num_src);
   1f732:	ab05      	add	r3, sp, #20
   1f734:	aa04      	add	r2, sp, #16
   1f736:	f8bd 1010 	ldrh.w	r1, [sp, #16]
   1f73a:	68a8      	ldr	r0, [r5, #8]
   1f73c:	f7fd fd43 	bl	1d1c6 <net_frag_read_be16>
	if (!frag && pos == 0xffff) {
   1f740:	b358      	cbz	r0, 1f79a <handle_mld_query+0xe2>
		goto drop;
	}

	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f742:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
		sizeof(struct in6_addr) * num_src;
   1f746:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   1f74a:	0112      	lsls	r2, r2, #4
   1f74c:	b292      	uxth	r2, r2
		sizeof(struct net_icmp_hdr) + (2 + 2 + 16 + 2 + 2) +
   1f74e:	4413      	add	r3, r2
   1f750:	b29b      	uxth	r3, r3
	pkt_len = sizeof(struct net_ipv6_hdr) +	net_pkt_ipv6_ext_len(pkt) +
   1f752:	3344      	adds	r3, #68	; 0x44
   1f754:	b29b      	uxth	r3, r3

	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f756:	429c      	cmp	r4, r3
   1f758:	d307      	bcc.n	1f76a <handle_mld_query+0xb2>
   1f75a:	f5b3 6fa0 	cmp.w	r3, #1280	; 0x500
   1f75e:	d804      	bhi.n	1f76a <handle_mld_query+0xb2>
	return pkt->frags->data;
   1f760:	68ab      	ldr	r3, [r5, #8]
   1f762:	689b      	ldr	r3, [r3, #8]
	     (NET_IPV6_HDR(pkt)->hop_limit != 1))) {
   1f764:	79db      	ldrb	r3, [r3, #7]
	if ((total_len < pkt_len || pkt_len > NET_IPV6_MTU ||
   1f766:	2b01      	cmp	r3, #1
   1f768:	d006      	beq.n	1f778 <handle_mld_query+0xc0>
		struct net_icmp_hdr hdr, *icmp_hdr;

		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f76a:	a903      	add	r1, sp, #12
   1f76c:	4628      	mov	r0, r5
   1f76e:	f7fe fc68 	bl	1e042 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f772:	b148      	cbz	r0, 1f788 <handle_mld_query+0xd0>
   1f774:	7843      	ldrb	r3, [r0, #1]
   1f776:	b93b      	cbnz	r3, 1f788 <handle_mld_query+0xd0>
			goto drop;
		}
	}

	/* Currently we only support a unspecified address query. */
	if (!net_ipv6_addr_cmp(&mcast, net_ipv6_unspecified_address())) {
   1f778:	f7ff fd20 	bl	1f1bc <net_ipv6_unspecified_address>
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   1f77c:	2210      	movs	r2, #16
   1f77e:	4601      	mov	r1, r0
   1f780:	a806      	add	r0, sp, #24
   1f782:	f00a f875 	bl	29870 <memcmp>
   1f786:	b178      	cbz	r0, 1f7a8 <handle_mld_query+0xf0>
	net_stats.ipv6_mld.drop++;
   1f788:	4a09      	ldr	r2, [pc, #36]	; (1f7b0 <handle_mld_query+0xf8>)
   1f78a:	f8d2 30a0 	ldr.w	r3, [r2, #160]	; 0xa0
   1f78e:	3301      	adds	r3, #1
   1f790:	f8c2 30a0 	str.w	r3, [r2, #160]	; 0xa0

drop:
	net_stats_update_ipv6_mld_drop();

	return NET_DROP;
}
   1f794:	2002      	movs	r0, #2
   1f796:	b00a      	add	sp, #40	; 0x28
   1f798:	bd70      	pop	{r4, r5, r6, pc}
	if (!frag && pos == 0xffff) {
   1f79a:	f8bd 2010 	ldrh.w	r2, [sp, #16]
   1f79e:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1f7a2:	429a      	cmp	r2, r3
   1f7a4:	d1cd      	bne.n	1f742 <handle_mld_query+0x8a>
   1f7a6:	e7ef      	b.n	1f788 <handle_mld_query+0xd0>
	send_mld_report(net_pkt_iface(pkt));
   1f7a8:	6968      	ldr	r0, [r5, #20]
   1f7aa:	f7ff ff2d 	bl	1f608 <send_mld_report>
   1f7ae:	e7eb      	b.n	1f788 <handle_mld_query+0xd0>
   1f7b0:	20002ab8 	.word	0x20002ab8

0001f7b4 <net_ipv6_finalize>:
{
   1f7b4:	b508      	push	{r3, lr}
   1f7b6:	460b      	mov	r3, r1
	if (context->flags & NET_CONTEXT_PROTO) {
   1f7b8:	f890 205d 	ldrb.w	r2, [r0, #93]	; 0x5d
   1f7bc:	f012 0f40 	tst.w	r2, #64	; 0x40
   1f7c0:	d104      	bne.n	1f7cc <net_ipv6_finalize+0x18>
	return IPPROTO_UDP;
   1f7c2:	2111      	movs	r1, #17
	return net_ipv6_finalize_raw(pkt, net_context_get_ip_proto(context));
   1f7c4:	4618      	mov	r0, r3
   1f7c6:	f7ff fdd2 	bl	1f36e <net_ipv6_finalize_raw>
}
   1f7ca:	bd08      	pop	{r3, pc}
		return IPPROTO_TCP;
   1f7cc:	2106      	movs	r1, #6
   1f7ce:	e7f9      	b.n	1f7c4 <net_ipv6_finalize+0x10>

0001f7d0 <net_ipv6_nbr_lookup>:
{
   1f7d0:	b508      	push	{r3, lr}
	return nbr_lookup(&net_neighbor.table, iface, addr);
   1f7d2:	460a      	mov	r2, r1
   1f7d4:	4601      	mov	r1, r0
   1f7d6:	4802      	ldr	r0, [pc, #8]	; (1f7e0 <net_ipv6_nbr_lookup+0x10>)
   1f7d8:	f7ff fb42 	bl	1ee60 <nbr_lookup>
}
   1f7dc:	bd08      	pop	{r3, pc}
   1f7de:	bf00      	nop
   1f7e0:	2000be8c 	.word	0x2000be8c

0001f7e4 <net_ipv6_send_na>:
{
   1f7e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1f7e8:	b093      	sub	sp, #76	; 0x4c
   1f7ea:	4605      	mov	r5, r0
   1f7ec:	468b      	mov	fp, r1
   1f7ee:	4692      	mov	sl, r2
   1f7f0:	4699      	mov	r9, r3
   1f7f2:	6843      	ldr	r3, [r0, #4]
   1f7f4:	689b      	ldr	r3, [r3, #8]
   1f7f6:	4611      	mov	r1, r2
   1f7f8:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1f7fa:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f7fe:	f7fd faab 	bl	1cd58 <net_pkt_get_reserve_tx>
   1f802:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1f804:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1f808:	f7fd fac4 	bl	1cd94 <net_pkt_get_frag>
   1f80c:	4607      	mov	r7, r0
	net_pkt_frag_add(pkt, frag);
   1f80e:	4601      	mov	r1, r0
   1f810:	4620      	mov	r0, r4
   1f812:	f7fd fb3c 	bl	1ce8e <net_pkt_frag_add>
	pkt->iface = iface;
   1f816:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1f818:	7d6b      	ldrb	r3, [r5, #21]
   1f81a:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1f81e:	7d6b      	ldrb	r3, [r5, #21]
   1f820:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1f824:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1f828:	220a      	movs	r2, #10
   1f82a:	f362 03c6 	bfi	r3, r2, #3, #4
   1f82e:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1f832:	2328      	movs	r3, #40	; 0x28
   1f834:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   1f838:	68a3      	ldr	r3, [r4, #8]
   1f83a:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1f83c:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1f840:	461a      	mov	r2, r3
   1f842:	2100      	movs	r1, #0
   1f844:	1ac0      	subs	r0, r0, r3
   1f846:	f00a f8a7 	bl	29998 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1f84a:	2300      	movs	r3, #0
   1f84c:	6223      	str	r3, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1f84e:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24
	if (iface->link_addr.len == 6) {
   1f852:	7d2b      	ldrb	r3, [r5, #20]
   1f854:	2b06      	cmp	r3, #6
   1f856:	f000 8092 	beq.w	1f97e <net_ipv6_send_na+0x19a>
	} else if (iface->link_addr.len == 8) {
   1f85a:	2b08      	cmp	r3, #8
   1f85c:	f000 808d 	beq.w	1f97a <net_ipv6_send_na+0x196>
	return 0;
   1f860:	2600      	movs	r6, #0
	pkt->ipv6_ext_len = len;
   1f862:	f04f 0800 	mov.w	r8, #0
   1f866:	f884 803b 	strb.w	r8, [r4, #59]	; 0x3b
	setup_headers(pkt, sizeof(struct net_icmpv6_na_hdr) + llao_len,
   1f86a:	f106 0514 	add.w	r5, r6, #20
   1f86e:	2288      	movs	r2, #136	; 0x88
   1f870:	f005 01fc 	and.w	r1, r5, #252	; 0xfc
   1f874:	4620      	mov	r0, r4
   1f876:	f7ff fc0c 	bl	1f092 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_na_hdr) + llao_len);
   1f87a:	4629      	mov	r1, r5
   1f87c:	f107 0008 	add.w	r0, r7, #8
   1f880:	f7fa fdb8 	bl	1a3f4 <net_buf_simple_add>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1f884:	a901      	add	r1, sp, #4
   1f886:	4620      	mov	r0, r4
   1f888:	f7fe fdd8 	bl	1e43c <net_icmpv6_get_na_hdr>
   1f88c:	4607      	mov	r7, r0
	return pkt->frags->data;
   1f88e:	68a3      	ldr	r3, [r4, #8]
   1f890:	f8d3 e008 	ldr.w	lr, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1f894:	ad06      	add	r5, sp, #24
   1f896:	f8db 0000 	ldr.w	r0, [fp]
   1f89a:	f8db 1004 	ldr.w	r1, [fp, #4]
   1f89e:	f8db 2008 	ldr.w	r2, [fp, #8]
   1f8a2:	f8db 300c 	ldr.w	r3, [fp, #12]
   1f8a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f8a8:	ad06      	add	r5, sp, #24
   1f8aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f8ac:	f8ce 0008 	str.w	r0, [lr, #8]
   1f8b0:	f8ce 100c 	str.w	r1, [lr, #12]
   1f8b4:	f8ce 2010 	str.w	r2, [lr, #16]
   1f8b8:	f8ce 3014 	str.w	r3, [lr, #20]
   1f8bc:	68a3      	ldr	r3, [r4, #8]
   1f8be:	f8d3 c008 	ldr.w	ip, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1f8c2:	ad0a      	add	r5, sp, #40	; 0x28
   1f8c4:	f8da 0000 	ldr.w	r0, [sl]
   1f8c8:	f8da 1004 	ldr.w	r1, [sl, #4]
   1f8cc:	f8da 2008 	ldr.w	r2, [sl, #8]
   1f8d0:	f8da 300c 	ldr.w	r3, [sl, #12]
   1f8d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f8d6:	ad0a      	add	r5, sp, #40	; 0x28
   1f8d8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f8da:	f8cc 0018 	str.w	r0, [ip, #24]
   1f8de:	f8cc 101c 	str.w	r1, [ip, #28]
   1f8e2:	f8cc 2020 	str.w	r2, [ip, #32]
   1f8e6:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
	net_ipaddr_copy(&na_hdr->tgt, tgt);
   1f8ea:	ad0e      	add	r5, sp, #56	; 0x38
   1f8ec:	f8d9 0000 	ldr.w	r0, [r9]
   1f8f0:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1f8f4:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1f8f8:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1f8fc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   1f8fe:	ad0e      	add	r5, sp, #56	; 0x38
   1f900:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   1f902:	6078      	str	r0, [r7, #4]
   1f904:	60b9      	str	r1, [r7, #8]
   1f906:	60fa      	str	r2, [r7, #12]
   1f908:	613b      	str	r3, [r7, #16]
	return pkt->iface;
   1f90a:	f8d4 a014 	ldr.w	sl, [r4, #20]
		 (u8_t *)net_pkt_icmp_data(pkt) + sizeof(struct net_icmp_hdr) +
   1f90e:	4620      	mov	r0, r4
   1f910:	f7fd fd6c 	bl	1d3ec <net_pkt_icmp_data>
	set_llao(&net_pkt_iface(pkt)->link_addr,
   1f914:	f100 0518 	add.w	r5, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1f918:	2302      	movs	r3, #2
   1f91a:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1f91c:	08f3      	lsrs	r3, r6, #3
   1f91e:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1f920:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f924:	f8da 1010 	ldr.w	r1, [sl, #16]
   1f928:	301a      	adds	r0, #26
   1f92a:	f7e0 fcc9 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f92e:	f89a 2014 	ldrb.w	r2, [sl, #20]
   1f932:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1f934:	1ab2      	subs	r2, r6, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1f936:	3a02      	subs	r2, #2
   1f938:	4641      	mov	r1, r8
   1f93a:	4428      	add	r0, r5
   1f93c:	f00a f82c 	bl	29998 <memset>
	na_hdr->flags = flags;
   1f940:	f89d 3070 	ldrb.w	r3, [sp, #112]	; 0x70
   1f944:	703b      	strb	r3, [r7, #0]
	net_icmpv6_set_na_hdr(pkt, na_hdr);
   1f946:	4639      	mov	r1, r7
   1f948:	4620      	mov	r0, r4
   1f94a:	f7fe fdac 	bl	1e4a6 <net_icmpv6_set_na_hdr>
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f94e:	68a3      	ldr	r3, [r4, #8]
		sizeof(struct net_icmpv6_na_hdr) + llao_len;
   1f950:	3640      	adds	r6, #64	; 0x40
	pkt->frags->len = NET_IPV6ICMPH_LEN +
   1f952:	819e      	strh	r6, [r3, #12]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1f954:	68a1      	ldr	r1, [r4, #8]
   1f956:	4620      	mov	r0, r4
   1f958:	f7fe fb26 	bl	1dfa8 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   1f95c:	4620      	mov	r0, r4
   1f95e:	f7fa fe6b 	bl	1a638 <net_send_data>
   1f962:	4540      	cmp	r0, r8
   1f964:	db0d      	blt.n	1f982 <net_ipv6_send_na+0x19e>
	net_stats.ipv6_nd.sent++;
   1f966:	4a0d      	ldr	r2, [pc, #52]	; (1f99c <net_ipv6_send_na+0x1b8>)
   1f968:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1f96c:	3301      	adds	r3, #1
   1f96e:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1f972:	4640      	mov	r0, r8
}
   1f974:	b013      	add	sp, #76	; 0x4c
   1f976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1f97a:	2610      	movs	r6, #16
   1f97c:	e771      	b.n	1f862 <net_ipv6_send_na+0x7e>
		return 8;
   1f97e:	2608      	movs	r6, #8
   1f980:	e76f      	b.n	1f862 <net_ipv6_send_na+0x7e>
	net_pkt_unref(pkt);
   1f982:	4620      	mov	r0, r4
   1f984:	f7fd fa59 	bl	1ce3a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   1f988:	4a04      	ldr	r2, [pc, #16]	; (1f99c <net_ipv6_send_na+0x1b8>)
   1f98a:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1f98e:	3301      	adds	r3, #1
   1f990:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   1f994:	f06f 0015 	mvn.w	r0, #21
   1f998:	e7ec      	b.n	1f974 <net_ipv6_send_na+0x190>
   1f99a:	bf00      	nop
   1f99c:	20002ab8 	.word	0x20002ab8

0001f9a0 <net_ipv6_nbr_set_reachable_timer>:
{
   1f9a0:	b508      	push	{r3, lr}
   1f9a2:	68c9      	ldr	r1, [r1, #12]
   1f9a4:	f8d0 228c 	ldr.w	r2, [r0, #652]	; 0x28c
   1f9a8:	3114      	adds	r1, #20
   1f9aa:	4802      	ldr	r0, [pc, #8]	; (1f9b4 <net_ipv6_nbr_set_reachable_timer+0x14>)
   1f9ac:	f009 fe6a 	bl	29684 <k_delayed_work_submit_to_queue>
   1f9b0:	bd08      	pop	{r3, pc}
   1f9b2:	bf00      	nop
   1f9b4:	20002bd8 	.word	0x20002bd8

0001f9b8 <handle_na_input>:
{
   1f9b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   1f9bc:	b090      	sub	sp, #64	; 0x40
   1f9be:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   1f9c0:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   1f9c2:	2200      	movs	r2, #0
   1f9c4:	e002      	b.n	1f9cc <handle_na_input+0x14>
		bytes += buf->len;
   1f9c6:	8999      	ldrh	r1, [r3, #12]
   1f9c8:	440a      	add	r2, r1
		buf = buf->frags;
   1f9ca:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   1f9cc:	2b00      	cmp	r3, #0
   1f9ce:	d1fa      	bne.n	1f9c6 <handle_na_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   1f9d0:	b295      	uxth	r5, r2
	na_hdr = net_icmpv6_get_na_hdr(pkt, &nahdr);
   1f9d2:	a90a      	add	r1, sp, #40	; 0x28
   1f9d4:	4620      	mov	r0, r4
   1f9d6:	f7fe fd31 	bl	1e43c <net_icmpv6_get_na_hdr>
   1f9da:	4607      	mov	r7, r0
	net_stats.ipv6_nd.recv++;
   1f9dc:	4aaf      	ldr	r2, [pc, #700]	; (1fc9c <handle_na_input+0x2e4>)
   1f9de:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   1f9e2:	3301      	adds	r3, #1
   1f9e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   1f9e8:	2d41      	cmp	r5, #65	; 0x41
   1f9ea:	d904      	bls.n	1f9f6 <handle_na_input+0x3e>
	return pkt->frags->data;
   1f9ec:	68a3      	ldr	r3, [r4, #8]
   1f9ee:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1f9f0:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   1f9f2:	2bff      	cmp	r3, #255	; 0xff
   1f9f4:	d010      	beq.n	1fa18 <handle_na_input+0x60>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   1f9f6:	a905      	add	r1, sp, #20
   1f9f8:	4620      	mov	r0, r4
   1f9fa:	f7fe fb22 	bl	1e042 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   1f9fe:	b108      	cbz	r0, 1fa04 <handle_na_input+0x4c>
   1fa00:	7843      	ldrb	r3, [r0, #1]
   1fa02:	b1cb      	cbz	r3, 1fa38 <handle_na_input+0x80>
	net_stats.ipv6_nd.drop++;
   1fa04:	4aa5      	ldr	r2, [pc, #660]	; (1fc9c <handle_na_input+0x2e4>)
   1fa06:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   1fa0a:	3301      	adds	r3, #1
   1fa0c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   1fa10:	2002      	movs	r0, #2
}
   1fa12:	b010      	add	sp, #64	; 0x40
   1fa14:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	return addr->s6_addr[0] == 0xFF;
   1fa18:	7903      	ldrb	r3, [r0, #4]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   1fa1a:	2bff      	cmp	r3, #255	; 0xff
   1fa1c:	d0eb      	beq.n	1f9f6 <handle_na_input+0x3e>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fa1e:	a905      	add	r1, sp, #20
   1fa20:	4620      	mov	r0, r4
   1fa22:	f7fe fd0b 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fa26:	7803      	ldrb	r3, [r0, #0]
	    net_is_ipv6_addr_mcast(&na_hdr->tgt) ||
   1fa28:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fa2c:	d004      	beq.n	1fa38 <handle_na_input+0x80>
   1fa2e:	68a3      	ldr	r3, [r4, #8]
   1fa30:	689b      	ldr	r3, [r3, #8]
   1fa32:	7e1b      	ldrb	r3, [r3, #24]
	    (net_is_solicited(pkt) &&
   1fa34:	2bff      	cmp	r3, #255	; 0xff
   1fa36:	d0de      	beq.n	1f9f6 <handle_na_input+0x3e>
	pkt->ipv6_ext_opt_len = len;
   1fa38:	2314      	movs	r3, #20
   1fa3a:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1fa3e:	a90f      	add	r1, sp, #60	; 0x3c
   1fa40:	4620      	mov	r0, r4
   1fa42:	f7fe fcc9 	bl	1e3d8 <net_icmpv6_get_nd_opt_hdr>
	return net_buf_frags_len(pkt->frags);
   1fa46:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   1fa48:	2600      	movs	r6, #0
	while (buf) {
   1fa4a:	b11b      	cbz	r3, 1fa54 <handle_na_input+0x9c>
		bytes += buf->len;
   1fa4c:	899a      	ldrh	r2, [r3, #12]
   1fa4e:	4416      	add	r6, r2
		buf = buf->frags;
   1fa50:	681b      	ldr	r3, [r3, #0]
   1fa52:	e7fa      	b.n	1fa4a <handle_na_input+0x92>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   1fa54:	3e2c      	subs	r6, #44	; 0x2c
	u16_t tllao_offset = 0;
   1fa56:	2500      	movs	r5, #0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1fa58:	e00b      	b.n	1fa72 <handle_na_input+0xba>
					     (nd_opt_hdr->len << 3));
   1fa5a:	00db      	lsls	r3, r3, #3
   1fa5c:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   1fa5e:	4413      	add	r3, r2
   1fa60:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   1fa62:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   1fa66:	4293      	cmp	r3, r2
   1fa68:	d9cc      	bls.n	1fa04 <handle_na_input+0x4c>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   1fa6a:	a90f      	add	r1, sp, #60	; 0x3c
   1fa6c:	4620      	mov	r0, r4
   1fa6e:	f7fe fcb3 	bl	1e3d8 <net_icmpv6_get_nd_opt_hdr>
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   1fa72:	b190      	cbz	r0, 1fa9a <handle_na_input+0xe2>
	return pkt->ipv6_ext_opt_len;
   1fa74:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   1fa78:	4296      	cmp	r6, r2
   1fa7a:	d90e      	bls.n	1fa9a <handle_na_input+0xe2>
		if (!nd_opt_hdr->len) {
   1fa7c:	7843      	ldrb	r3, [r0, #1]
   1fa7e:	b163      	cbz	r3, 1fa9a <handle_na_input+0xe2>
		switch (nd_opt_hdr->type) {
   1fa80:	7801      	ldrb	r1, [r0, #0]
   1fa82:	2902      	cmp	r1, #2
   1fa84:	d1e9      	bne.n	1fa5a <handle_na_input+0xa2>
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1fa86:	f894 5033 	ldrb.w	r5, [r4, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   1fa8a:	f894 103b 	ldrb.w	r1, [r4, #59]	; 0x3b
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1fa8e:	440d      	add	r5, r1
				sizeof(struct net_icmp_hdr) +
   1fa90:	4415      	add	r5, r2
   1fa92:	b2ad      	uxth	r5, r5
			tllao_offset = net_pkt_ip_hdr_len(pkt) +
   1fa94:	3506      	adds	r5, #6
   1fa96:	b2ad      	uxth	r5, r5
			break;
   1fa98:	e7df      	b.n	1fa5a <handle_na_input+0xa2>
	return pkt->iface;
   1fa9a:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   1fa9e:	f107 0904 	add.w	r9, r7, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1faa2:	2600      	movs	r6, #0
   1faa4:	e003      	b.n	1faae <handle_na_input+0xf6>
		if (net_is_ipv6_prefix(addr->s6_addr,
   1faa6:	f1ba 0f00 	cmp.w	sl, #0
   1faaa:	d11f      	bne.n	1faec <handle_na_input+0x134>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   1faac:	3601      	adds	r6, #1
   1faae:	2e02      	cmp	r6, #2
   1fab0:	dc23      	bgt.n	1fafa <handle_na_input+0x142>
		if (!iface->ipv6.unicast[i].is_used ||
   1fab2:	236c      	movs	r3, #108	; 0x6c
   1fab4:	fb03 8306 	mla	r3, r3, r6, r8
   1fab8:	f893 a094 	ldrb.w	sl, [r3, #148]	; 0x94
   1fabc:	f1ba 0f00 	cmp.w	sl, #0
   1fac0:	d0f4      	beq.n	1faac <handle_na_input+0xf4>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   1fac2:	236c      	movs	r3, #108	; 0x6c
   1fac4:	fb03 8306 	mla	r3, r3, r6, r8
   1fac8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   1faca:	2b0a      	cmp	r3, #10
   1facc:	d1ee      	bne.n	1faac <handle_na_input+0xf4>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   1face:	216c      	movs	r1, #108	; 0x6c
   1fad0:	fb01 f106 	mul.w	r1, r1, r6
   1fad4:	3120      	adds	r1, #32
   1fad6:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   1fad8:	2210      	movs	r2, #16
   1fada:	4411      	add	r1, r2
   1fadc:	4648      	mov	r0, r9
   1fade:	f009 fec7 	bl	29870 <memcmp>
   1fae2:	2800      	cmp	r0, #0
   1fae4:	d0df      	beq.n	1faa6 <handle_na_input+0xee>
		return false;
   1fae6:	f04f 0a00 	mov.w	sl, #0
   1faea:	e7dc      	b.n	1faa6 <handle_na_input+0xee>
			return &iface->ipv6.unicast[i];
   1faec:	236c      	movs	r3, #108	; 0x6c
   1faee:	fb03 f306 	mul.w	r3, r3, r6
   1faf2:	3320      	adds	r3, #32
   1faf4:	4443      	add	r3, r8
   1faf6:	330c      	adds	r3, #12
   1faf8:	e000      	b.n	1fafc <handle_na_input+0x144>
	return NULL;
   1fafa:	2300      	movs	r3, #0
	if (ifaddr) {
   1fafc:	b17b      	cbz	r3, 1fb1e <handle_na_input+0x166>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   1fafe:	f993 3065 	ldrsb.w	r3, [r3, #101]	; 0x65
   1fb02:	2b00      	cmp	r3, #0
   1fb04:	f47f af7e 	bne.w	1fa04 <handle_na_input+0x4c>
   1fb08:	6960      	ldr	r0, [r4, #20]
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   1fb0a:	88ba      	ldrh	r2, [r7, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   1fb0c:	f248 03fe 	movw	r3, #33022	; 0x80fe
   1fb10:	429a      	cmp	r2, r3
   1fb12:	f43f af77 	beq.w	1fa04 <handle_na_input+0x4c>
	net_if_ipv6_dad_failed(iface, addr);
   1fb16:	4649      	mov	r1, r9
   1fb18:	f7fb fa0a 	bl	1af30 <net_if_ipv6_dad_failed>
   1fb1c:	e772      	b.n	1fa04 <handle_na_input+0x4c>
	struct net_linkaddr_storage lladdr = { 0 };
   1fb1e:	2300      	movs	r3, #0
   1fb20:	9303      	str	r3, [sp, #12]
   1fb22:	9304      	str	r3, [sp, #16]
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt),
   1fb24:	1d3a      	adds	r2, r7, #4
   1fb26:	6961      	ldr	r1, [r4, #20]
   1fb28:	485d      	ldr	r0, [pc, #372]	; (1fca0 <handle_na_input+0x2e8>)
   1fb2a:	f7ff f999 	bl	1ee60 <nbr_lookup>
	if (!nbr) {
   1fb2e:	4606      	mov	r6, r0
   1fb30:	2800      	cmp	r0, #0
   1fb32:	f000 8107 	beq.w	1fd44 <handle_na_input+0x38c>
	if (tllao_offset) {
   1fb36:	b995      	cbnz	r5, 1fb5e <handle_na_input+0x1a6>
	if (nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   1fb38:	7873      	ldrb	r3, [r6, #1]
   1fb3a:	2bff      	cmp	r3, #255	; 0xff
   1fb3c:	d135      	bne.n	1fbaa <handle_na_input+0x1f2>
		if (!tllao_offset) {
   1fb3e:	bb2d      	cbnz	r5, 1fb8c <handle_na_input+0x1d4>
			return false;
   1fb40:	2300      	movs	r3, #0
	if (!handle_na_neighbor(pkt, na_hdr, tllao_offset)) {
   1fb42:	2b00      	cmp	r3, #0
   1fb44:	f43f af5e 	beq.w	1fa04 <handle_na_input+0x4c>
	net_pkt_unref(pkt);
   1fb48:	4620      	mov	r0, r4
   1fb4a:	f7fd f976 	bl	1ce3a <net_pkt_unref>
	net_stats.ipv6_nd.sent++;
   1fb4e:	4a53      	ldr	r2, [pc, #332]	; (1fc9c <handle_na_input+0x2e4>)
   1fb50:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1fb54:	3301      	adds	r3, #1
   1fb56:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return NET_OK;
   1fb5a:	2000      	movs	r0, #0
   1fb5c:	e759      	b.n	1fa12 <handle_na_input+0x5a>
   1fb5e:	6963      	ldr	r3, [r4, #20]
		lladdr.len = net_pkt_iface(pkt)->link_addr.len;
   1fb60:	7d1b      	ldrb	r3, [r3, #20]
   1fb62:	f88d 300d 	strb.w	r3, [sp, #13]
		frag = net_frag_read(pkt->frags, tllao_offset,
   1fb66:	f10d 020e 	add.w	r2, sp, #14
   1fb6a:	9200      	str	r2, [sp, #0]
   1fb6c:	f10d 020a 	add.w	r2, sp, #10
   1fb70:	4629      	mov	r1, r5
   1fb72:	68a0      	ldr	r0, [r4, #8]
   1fb74:	f7fd fadf 	bl	1d136 <net_frag_read>
		if (!frag && pos == 0xffff) {
   1fb78:	2800      	cmp	r0, #0
   1fb7a:	d1dd      	bne.n	1fb38 <handle_na_input+0x180>
   1fb7c:	f8bd 200a 	ldrh.w	r2, [sp, #10]
   1fb80:	f64f 73ff 	movw	r3, #65535	; 0xffff
   1fb84:	429a      	cmp	r2, r3
   1fb86:	d1d7      	bne.n	1fb38 <handle_na_input+0x180>
			return false;
   1fb88:	2300      	movs	r3, #0
   1fb8a:	e7da      	b.n	1fb42 <handle_na_input+0x18a>
		nbr_lladdr.len = lladdr.len;
   1fb8c:	f89d 300d 	ldrb.w	r3, [sp, #13]
   1fb90:	f88d 3018 	strb.w	r3, [sp, #24]
		nbr_lladdr.addr = lladdr.addr;
   1fb94:	aa10      	add	r2, sp, #64	; 0x40
   1fb96:	f10d 030e 	add.w	r3, sp, #14
   1fb9a:	f842 3d2c 	str.w	r3, [r2, #-44]!
		if (net_nbr_link(nbr, net_pkt_iface(pkt), &nbr_lladdr)) {
   1fb9e:	6961      	ldr	r1, [r4, #20]
   1fba0:	4630      	mov	r0, r6
   1fba2:	f7fe ff77 	bl	1ea94 <net_nbr_link>
   1fba6:	2800      	cmp	r0, #0
   1fba8:	d14a      	bne.n	1fc40 <handle_na_input+0x288>
	cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   1fbaa:	7870      	ldrb	r0, [r6, #1]
   1fbac:	f7fe ffd8 	bl	1eb60 <net_nbr_get_lladdr>
	if (!cached_lladdr) {
   1fbb0:	4680      	mov	r8, r0
   1fbb2:	2800      	cmp	r0, #0
   1fbb4:	f000 80c8 	beq.w	1fd48 <handle_na_input+0x390>
	if (tllao_offset) {
   1fbb8:	2d00      	cmp	r5, #0
   1fbba:	d145      	bne.n	1fc48 <handle_na_input+0x290>
	bool lladdr_changed = false;
   1fbbc:	2700      	movs	r7, #0
   1fbbe:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   1fbc0:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fbc4:	2b00      	cmp	r3, #0
   1fbc6:	d155      	bne.n	1fc74 <handle_na_input+0x2bc>
		if (!tllao_offset) {
   1fbc8:	2d00      	cmp	r5, #0
   1fbca:	f000 80bf 	beq.w	1fd4c <handle_na_input+0x394>
		if (lladdr_changed) {
   1fbce:	b11f      	cbz	r7, 1fbd8 <handle_na_input+0x220>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1fbd0:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fbd4:	2a06      	cmp	r2, #6
   1fbd6:	d941      	bls.n	1fc5c <handle_na_input+0x2a4>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fbd8:	a905      	add	r1, sp, #20
   1fbda:	4620      	mov	r0, r4
   1fbdc:	f7fe fc2e 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fbe0:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1fbe2:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fbe6:	d040      	beq.n	1fc6a <handle_na_input+0x2b2>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1fbe8:	2101      	movs	r1, #1
   1fbea:	4630      	mov	r0, r6
   1fbec:	f7fe ffc0 	bl	1eb70 <ipv6_nbr_set_state>
   1fbf0:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->ns_count = 0;
   1fbf2:	2200      	movs	r2, #0
   1fbf4:	f883 2068 	strb.w	r2, [r3, #104]	; 0x68
   1fbf8:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1fbfa:	3014      	adds	r0, #20
   1fbfc:	f009 fce8 	bl	295d0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1fc00:	4631      	mov	r1, r6
   1fc02:	6960      	ldr	r0, [r4, #20]
   1fc04:	f7ff fecc 	bl	1f9a0 <net_ipv6_nbr_set_reachable_timer>
   1fc08:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fc0a:	a905      	add	r1, sp, #20
   1fc0c:	4620      	mov	r0, r4
   1fc0e:	f7fe fc15 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1fc12:	7803      	ldrb	r3, [r0, #0]
   1fc14:	09db      	lsrs	r3, r3, #7
		net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1fc16:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1fc1a:	68f3      	ldr	r3, [r6, #12]
	pending = net_ipv6_nbr_data(nbr)->pending;
   1fc1c:	681d      	ldr	r5, [r3, #0]
	if (pending) {
   1fc1e:	2d00      	cmp	r5, #0
   1fc20:	f000 8098 	beq.w	1fd54 <handle_na_input+0x39c>
		if (net_send_data(pending) < 0) {
   1fc24:	4628      	mov	r0, r5
   1fc26:	f7fa fd07 	bl	1a638 <net_send_data>
   1fc2a:	2800      	cmp	r0, #0
   1fc2c:	f2c0 8086 	blt.w	1fd3c <handle_na_input+0x384>
   1fc30:	68f3      	ldr	r3, [r6, #12]
			net_ipv6_nbr_data(nbr)->pending = NULL;
   1fc32:	2200      	movs	r2, #0
   1fc34:	601a      	str	r2, [r3, #0]
		net_pkt_unref(pending);
   1fc36:	4628      	mov	r0, r5
   1fc38:	f7fd f8ff 	bl	1ce3a <net_pkt_unref>
	return true;
   1fc3c:	2301      	movs	r3, #1
   1fc3e:	e780      	b.n	1fb42 <handle_na_input+0x18a>
			nbr_free(nbr);
   1fc40:	4630      	mov	r0, r6
   1fc42:	f7ff fa53 	bl	1f0ec <nbr_free>
   1fc46:	e77b      	b.n	1fb40 <handle_na_input+0x188>
		lladdr_changed = memcmp(lladdr.addr,
   1fc48:	7842      	ldrb	r2, [r0, #1]
   1fc4a:	1c81      	adds	r1, r0, #2
   1fc4c:	f10d 000e 	add.w	r0, sp, #14
   1fc50:	f009 fe0e 	bl	29870 <memcmp>
   1fc54:	1c07      	adds	r7, r0, #0
   1fc56:	bf18      	it	ne
   1fc58:	2701      	movne	r7, #1
   1fc5a:	e7b0      	b.n	1fbbe <handle_na_input+0x206>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fc5c:	f10d 010e 	add.w	r1, sp, #14
   1fc60:	f108 0002 	add.w	r0, r8, #2
   1fc64:	f7e0 fb2c 	bl	2c0 <memcpy>
   1fc68:	e7b6      	b.n	1fbd8 <handle_na_input+0x220>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fc6a:	2102      	movs	r1, #2
   1fc6c:	4630      	mov	r0, r6
   1fc6e:	f7fe ff7f 	bl	1eb70 <ipv6_nbr_set_state>
   1fc72:	e7c9      	b.n	1fc08 <handle_na_input+0x250>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fc74:	a905      	add	r1, sp, #20
   1fc76:	4620      	mov	r0, r4
   1fc78:	f7fe fbe0 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fc7c:	7803      	ldrb	r3, [r0, #0]
	if (!net_is_override(pkt) && lladdr_changed) {
   1fc7e:	f013 0f20 	tst.w	r3, #32
   1fc82:	d10f      	bne.n	1fca4 <handle_na_input+0x2ec>
   1fc84:	b177      	cbz	r7, 1fca4 <handle_na_input+0x2ec>
   1fc86:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state ==
   1fc88:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   1fc8c:	2b01      	cmp	r3, #1
   1fc8e:	d15f      	bne.n	1fd50 <handle_na_input+0x398>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   1fc90:	2102      	movs	r1, #2
   1fc92:	4630      	mov	r0, r6
   1fc94:	f7fe ff6c 	bl	1eb70 <ipv6_nbr_set_state>
		return false;
   1fc98:	2300      	movs	r3, #0
   1fc9a:	e752      	b.n	1fb42 <handle_na_input+0x18a>
   1fc9c:	20002ab8 	.word	0x20002ab8
   1fca0:	2000be8c 	.word	0x2000be8c
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fca4:	a905      	add	r1, sp, #20
   1fca6:	4620      	mov	r0, r4
   1fca8:	f7fe fbc8 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fcac:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fcae:	f013 0f20 	tst.w	r3, #32
   1fcb2:	d018      	beq.n	1fce6 <handle_na_input+0x32e>
		if (lladdr_changed) {
   1fcb4:	b14f      	cbz	r7, 1fcca <handle_na_input+0x312>
			net_linkaddr_set(cached_lladdr, lladdr.addr,
   1fcb6:	f898 2001 	ldrb.w	r2, [r8, #1]
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   1fcba:	2a06      	cmp	r2, #6
   1fcbc:	d805      	bhi.n	1fcca <handle_na_input+0x312>
	memcpy(lladdr_store->addr, new_addr, new_len);
   1fcbe:	f10d 010e 	add.w	r1, sp, #14
   1fcc2:	f108 0002 	add.w	r0, r8, #2
   1fcc6:	f7e0 fafb 	bl	2c0 <memcpy>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fcca:	a905      	add	r1, sp, #20
   1fccc:	4620      	mov	r0, r4
   1fcce:	f7fe fbb5 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_SOLICITED;
   1fcd2:	7803      	ldrb	r3, [r0, #0]
		if (net_is_solicited(pkt)) {
   1fcd4:	f013 0f40 	tst.w	r3, #64	; 0x40
   1fcd8:	d11e      	bne.n	1fd18 <handle_na_input+0x360>
			if (lladdr_changed) {
   1fcda:	b17f      	cbz	r7, 1fcfc <handle_na_input+0x344>
				ipv6_nbr_set_state(nbr,
   1fcdc:	2102      	movs	r1, #2
   1fcde:	4630      	mov	r0, r6
   1fce0:	f7fe ff46 	bl	1eb70 <ipv6_nbr_set_state>
   1fce4:	e00a      	b.n	1fcfc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fce6:	a905      	add	r1, sp, #20
   1fce8:	4620      	mov	r0, r4
   1fcea:	f7fe fba7 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_OVERRIDE;
   1fcee:	7803      	ldrb	r3, [r0, #0]
	if (net_is_override(pkt) ||
   1fcf0:	f013 0f20 	tst.w	r3, #32
   1fcf4:	d102      	bne.n	1fcfc <handle_na_input+0x344>
	    (!net_is_override(pkt) && tllao_offset && !lladdr_changed)) {
   1fcf6:	b10d      	cbz	r5, 1fcfc <handle_na_input+0x344>
   1fcf8:	2f00      	cmp	r7, #0
   1fcfa:	d0db      	beq.n	1fcb4 <handle_na_input+0x2fc>
   1fcfc:	68f3      	ldr	r3, [r6, #12]
	if (net_ipv6_nbr_data(nbr)->is_router && !net_is_router(pkt)) {
   1fcfe:	f893 3069 	ldrb.w	r3, [r3, #105]	; 0x69
   1fd02:	b9b3      	cbnz	r3, 1fd32 <handle_na_input+0x37a>
   1fd04:	68f5      	ldr	r5, [r6, #12]
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fd06:	a905      	add	r1, sp, #20
   1fd08:	4620      	mov	r0, r4
   1fd0a:	f7fe fb97 	bl	1e43c <net_icmpv6_get_na_hdr>
	return na_hdr->flags & NET_ICMPV6_NA_FLAG_ROUTER;
   1fd0e:	7803      	ldrb	r3, [r0, #0]
   1fd10:	09db      	lsrs	r3, r3, #7
	net_ipv6_nbr_data(nbr)->is_router = net_is_router(pkt);
   1fd12:	f885 3069 	strb.w	r3, [r5, #105]	; 0x69
   1fd16:	e780      	b.n	1fc1a <handle_na_input+0x262>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_REACHABLE);
   1fd18:	2101      	movs	r1, #1
   1fd1a:	4630      	mov	r0, r6
   1fd1c:	f7fe ff28 	bl	1eb70 <ipv6_nbr_set_state>
   1fd20:	68f0      	ldr	r0, [r6, #12]
			k_delayed_work_cancel(
   1fd22:	3014      	adds	r0, #20
   1fd24:	f009 fc54 	bl	295d0 <k_delayed_work_cancel>
			net_ipv6_nbr_set_reachable_timer(net_pkt_iface(pkt),
   1fd28:	4631      	mov	r1, r6
   1fd2a:	6960      	ldr	r0, [r4, #20]
   1fd2c:	f7ff fe38 	bl	1f9a0 <net_ipv6_nbr_set_reachable_timer>
   1fd30:	e7e4      	b.n	1fcfc <handle_na_input+0x344>
	na_hdr = net_icmpv6_get_na_hdr(pkt, &hdr);
   1fd32:	a905      	add	r1, sp, #20
   1fd34:	4620      	mov	r0, r4
   1fd36:	f7fe fb81 	bl	1e43c <net_icmpv6_get_na_hdr>
   1fd3a:	e7e3      	b.n	1fd04 <handle_na_input+0x34c>
			nbr_clear_ns_pending(net_ipv6_nbr_data(nbr));
   1fd3c:	68f0      	ldr	r0, [r6, #12]
   1fd3e:	f7ff f8af 	bl	1eea0 <nbr_clear_ns_pending>
   1fd42:	e778      	b.n	1fc36 <handle_na_input+0x27e>
		return false;
   1fd44:	2300      	movs	r3, #0
   1fd46:	e6fc      	b.n	1fb42 <handle_na_input+0x18a>
		return false;
   1fd48:	2300      	movs	r3, #0
   1fd4a:	e6fa      	b.n	1fb42 <handle_na_input+0x18a>
			return false;
   1fd4c:	2300      	movs	r3, #0
   1fd4e:	e6f8      	b.n	1fb42 <handle_na_input+0x18a>
		return false;
   1fd50:	2300      	movs	r3, #0
   1fd52:	e6f6      	b.n	1fb42 <handle_na_input+0x18a>
	return true;
   1fd54:	2301      	movs	r3, #1
   1fd56:	e6f4      	b.n	1fb42 <handle_na_input+0x18a>

0001fd58 <net_ipv6_send_ns>:
{
   1fd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   1fd5c:	b09d      	sub	sp, #116	; 0x74
   1fd5e:	4605      	mov	r5, r0
   1fd60:	9101      	str	r1, [sp, #4]
   1fd62:	4691      	mov	r9, r2
   1fd64:	461e      	mov	r6, r3
   1fd66:	9f26      	ldr	r7, [sp, #152]	; 0x98
   1fd68:	f89d b09c 	ldrb.w	fp, [sp, #156]	; 0x9c
	return iface->l2->reserve(iface, (void *)dst_ip6);
   1fd6c:	6843      	ldr	r3, [r0, #4]
   1fd6e:	689b      	ldr	r3, [r3, #8]
   1fd70:	4631      	mov	r1, r6
   1fd72:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, dst),
   1fd74:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fd78:	f7fc ffee 	bl	1cd58 <net_pkt_get_reserve_tx>
   1fd7c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   1fd7e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   1fd82:	f7fd f807 	bl	1cd94 <net_pkt_get_frag>
   1fd86:	4682      	mov	sl, r0
	net_pkt_frag_add(pkt, frag);
   1fd88:	4601      	mov	r1, r0
   1fd8a:	4620      	mov	r0, r4
   1fd8c:	f7fd f87f 	bl	1ce8e <net_pkt_frag_add>
	pkt->iface = iface;
   1fd90:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   1fd92:	7d6b      	ldrb	r3, [r5, #21]
   1fd94:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   1fd98:	7d6b      	ldrb	r3, [r5, #21]
   1fd9a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   1fd9e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   1fda2:	220a      	movs	r2, #10
   1fda4:	f362 03c6 	bfi	r3, r2, #3, #4
   1fda8:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   1fdac:	2328      	movs	r3, #40	; 0x28
   1fdae:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	pkt->ipv6_ext_len = len;
   1fdb2:	2500      	movs	r5, #0
   1fdb4:	f884 503b 	strb.w	r5, [r4, #59]	; 0x3b
	return pkt->frags->data;
   1fdb8:	68a3      	ldr	r3, [r4, #8]
   1fdba:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   1fdbc:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   1fdc0:	461a      	mov	r2, r3
   1fdc2:	4629      	mov	r1, r5
   1fdc4:	1ac0      	subs	r0, r0, r3
   1fdc6:	f009 fde7 	bl	29998 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   1fdca:	6225      	str	r5, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   1fdcc:	f884 5024 	strb.w	r5, [r4, #36]	; 0x24
	return pkt->iface;
   1fdd0:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   1fdd2:	7d1b      	ldrb	r3, [r3, #20]
   1fdd4:	2b06      	cmp	r3, #6
   1fdd6:	f000 808b 	beq.w	1fef0 <net_ipv6_send_ns+0x198>
	} else if (iface->link_addr.len == 8) {
   1fdda:	2b08      	cmp	r3, #8
   1fddc:	f000 8085 	beq.w	1feea <net_ipv6_send_ns+0x192>
	return 0;
   1fde0:	f04f 0800 	mov.w	r8, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_ns_hdr) + llao_len,
   1fde4:	2287      	movs	r2, #135	; 0x87
   1fde6:	f108 0114 	add.w	r1, r8, #20
   1fdea:	4620      	mov	r0, r4
   1fdec:	f7ff f951 	bl	1f092 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_ns_hdr));
   1fdf0:	f10a 0a08 	add.w	sl, sl, #8
   1fdf4:	2114      	movs	r1, #20
   1fdf6:	4650      	mov	r0, sl
   1fdf8:	f7fa fafc 	bl	1a3f4 <net_buf_simple_add>
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &hdr);
   1fdfc:	a903      	add	r1, sp, #12
   1fdfe:	4620      	mov	r0, r4
   1fe00:	f7fe fa8e 	bl	1e320 <net_icmpv6_get_ns_hdr>
   1fe04:	4605      	mov	r5, r0
	if (!dst) {
   1fe06:	2e00      	cmp	r6, #0
   1fe08:	d075      	beq.n	1fef6 <net_ipv6_send_ns+0x19e>
	return pkt->frags->data;
   1fe0a:	68a3      	ldr	r3, [r4, #8]
   1fe0c:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst, dst);
   1fe10:	f10d 0c20 	add.w	ip, sp, #32
   1fe14:	6830      	ldr	r0, [r6, #0]
   1fe16:	6871      	ldr	r1, [r6, #4]
   1fe18:	68b2      	ldr	r2, [r6, #8]
   1fe1a:	68f3      	ldr	r3, [r6, #12]
   1fe1c:	e8ac 000f 	stmia.w	ip!, {r0, r1, r2, r3}
   1fe20:	ae08      	add	r6, sp, #32
   1fe22:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fe24:	f8ce 0018 	str.w	r0, [lr, #24]
   1fe28:	f8ce 101c 	str.w	r1, [lr, #28]
   1fe2c:	f8ce 2020 	str.w	r2, [lr, #32]
   1fe30:	f8ce 3024 	str.w	r3, [lr, #36]	; 0x24
	net_ipaddr_copy(&ns_hdr->tgt, tgt);
   1fe34:	ae0c      	add	r6, sp, #48	; 0x30
   1fe36:	6838      	ldr	r0, [r7, #0]
   1fe38:	6879      	ldr	r1, [r7, #4]
   1fe3a:	68ba      	ldr	r2, [r7, #8]
   1fe3c:	68fb      	ldr	r3, [r7, #12]
   1fe3e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fe40:	1d2f      	adds	r7, r5, #4
   1fe42:	ae0c      	add	r6, sp, #48	; 0x30
   1fe44:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fe46:	6068      	str	r0, [r5, #4]
   1fe48:	6079      	str	r1, [r7, #4]
   1fe4a:	60ba      	str	r2, [r7, #8]
   1fe4c:	60fb      	str	r3, [r7, #12]
	net_icmpv6_set_ns_hdr(pkt, ns_hdr);
   1fe4e:	4629      	mov	r1, r5
   1fe50:	4620      	mov	r0, r4
   1fe52:	f7fe fa89 	bl	1e368 <net_icmpv6_set_ns_hdr>
	if (is_my_address) {
   1fe56:	f1bb 0f00 	cmp.w	fp, #0
   1fe5a:	d06a      	beq.n	1ff32 <net_ipv6_send_ns+0x1da>
   1fe5c:	68a3      	ldr	r3, [r4, #8]
   1fe5e:	689f      	ldr	r7, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1fe60:	f7ff f9ac 	bl	1f1bc <net_ipv6_unspecified_address>
   1fe64:	4603      	mov	r3, r0
   1fe66:	ae10      	add	r6, sp, #64	; 0x40
   1fe68:	6800      	ldr	r0, [r0, #0]
   1fe6a:	6859      	ldr	r1, [r3, #4]
   1fe6c:	689a      	ldr	r2, [r3, #8]
   1fe6e:	68db      	ldr	r3, [r3, #12]
   1fe70:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1fe72:	ae10      	add	r6, sp, #64	; 0x40
   1fe74:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1fe76:	60b8      	str	r0, [r7, #8]
   1fe78:	60f9      	str	r1, [r7, #12]
   1fe7a:	613a      	str	r2, [r7, #16]
   1fe7c:	617b      	str	r3, [r7, #20]
   1fe7e:	68a3      	ldr	r3, [r4, #8]
   1fe80:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->len[1] -= llao_len;
   1fe82:	795a      	ldrb	r2, [r3, #5]
   1fe84:	eba2 0808 	sub.w	r8, r2, r8
   1fe88:	f883 8005 	strb.w	r8, [r3, #5]
	net_icmpv6_set_chksum(pkt, pkt->frags);
   1fe8c:	68a1      	ldr	r1, [r4, #8]
   1fe8e:	4620      	mov	r0, r4
   1fe90:	f7fe f88a 	bl	1dfa8 <net_icmpv6_set_chksum>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), &ns_hdr->tgt);
   1fe94:	3504      	adds	r5, #4
   1fe96:	462a      	mov	r2, r5
   1fe98:	6961      	ldr	r1, [r4, #20]
   1fe9a:	486f      	ldr	r0, [pc, #444]	; (20058 <net_ipv6_send_ns+0x300>)
   1fe9c:	f7fe ffe0 	bl	1ee60 <nbr_lookup>
	if (!nbr) {
   1fea0:	4606      	mov	r6, r0
   1fea2:	2800      	cmp	r0, #0
   1fea4:	f000 80ad 	beq.w	20002 <net_ipv6_send_ns+0x2aa>
	if (pending) {
   1fea8:	9801      	ldr	r0, [sp, #4]
   1feaa:	b170      	cbz	r0, 1feca <net_ipv6_send_ns+0x172>
   1feac:	68f5      	ldr	r5, [r6, #12]
		if (!net_ipv6_nbr_data(nbr)->pending) {
   1feae:	682b      	ldr	r3, [r5, #0]
   1feb0:	2b00      	cmp	r3, #0
   1feb2:	f040 80b1 	bne.w	20018 <net_ipv6_send_ns+0x2c0>
			net_ipv6_nbr_data(nbr)->pending = net_pkt_ref(pending);
   1feb6:	f7fc ffb1 	bl	1ce1c <net_pkt_ref>
   1feba:	6028      	str	r0, [r5, #0]
   1febc:	68f1      	ldr	r1, [r6, #12]
   1febe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   1fec2:	313c      	adds	r1, #60	; 0x3c
   1fec4:	4865      	ldr	r0, [pc, #404]	; (2005c <net_ipv6_send_ns+0x304>)
   1fec6:	f009 fbdd 	bl	29684 <k_delayed_work_submit_to_queue>
	if (net_send_data(pkt) < 0) {
   1feca:	4620      	mov	r0, r4
   1fecc:	f7fa fbb4 	bl	1a638 <net_send_data>
   1fed0:	2800      	cmp	r0, #0
   1fed2:	f2c0 80b0 	blt.w	20036 <net_ipv6_send_ns+0x2de>
   1fed6:	4a62      	ldr	r2, [pc, #392]	; (20060 <net_ipv6_send_ns+0x308>)
   1fed8:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   1fedc:	3301      	adds	r3, #1
   1fede:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   1fee2:	2000      	movs	r0, #0
}
   1fee4:	b01d      	add	sp, #116	; 0x74
   1fee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return 16;
   1feea:	f04f 0810 	mov.w	r8, #16
   1feee:	e779      	b.n	1fde4 <net_ipv6_send_ns+0x8c>
		return 8;
   1fef0:	f04f 0808 	mov.w	r8, #8
   1fef4:	e776      	b.n	1fde4 <net_ipv6_send_ns+0x8c>
   1fef6:	68a3      	ldr	r3, [r4, #8]
   1fef8:	689b      	ldr	r3, [r3, #8]
	dst->s6_addr[0]   = 0xFF;
   1fefa:	21ff      	movs	r1, #255	; 0xff
   1fefc:	7619      	strb	r1, [r3, #24]
	dst->s6_addr[1]   = 0x02;
   1fefe:	2202      	movs	r2, #2
   1ff00:	765a      	strb	r2, [r3, #25]
	UNALIGNED_PUT(0, &dst->s6_addr16[1]);
   1ff02:	2200      	movs	r2, #0
   1ff04:	769a      	strb	r2, [r3, #26]
   1ff06:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(0, &dst->s6_addr16[2]);
   1ff08:	771a      	strb	r2, [r3, #28]
   1ff0a:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(0, &dst->s6_addr16[3]);
   1ff0c:	779a      	strb	r2, [r3, #30]
   1ff0e:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(0, &dst->s6_addr16[4]);
   1ff10:	f883 2020 	strb.w	r2, [r3, #32]
   1ff14:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	dst->s6_addr[10]  = 0;
   1ff18:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
	dst->s6_addr[11]  = 0x01;
   1ff1c:	2201      	movs	r2, #1
   1ff1e:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	dst->s6_addr[12]  = 0xFF;
   1ff22:	f883 1024 	strb.w	r1, [r3, #36]	; 0x24
	dst->s6_addr[13]  = src->s6_addr[13];
   1ff26:	7b7a      	ldrb	r2, [r7, #13]
   1ff28:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(UNALIGNED_GET(&src->s6_addr16[7]), &dst->s6_addr16[7]);
   1ff2c:	89fa      	ldrh	r2, [r7, #14]
   1ff2e:	84da      	strh	r2, [r3, #38]	; 0x26
   1ff30:	e780      	b.n	1fe34 <net_ipv6_send_ns+0xdc>
		if (src) {
   1ff32:	f1b9 0f00 	cmp.w	r9, #0
   1ff36:	d025      	beq.n	1ff84 <net_ipv6_send_ns+0x22c>
   1ff38:	68a3      	ldr	r3, [r4, #8]
   1ff3a:	f8d3 e008 	ldr.w	lr, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, src);
   1ff3e:	ae14      	add	r6, sp, #80	; 0x50
   1ff40:	f8d9 0000 	ldr.w	r0, [r9]
   1ff44:	f8d9 1004 	ldr.w	r1, [r9, #4]
   1ff48:	f8d9 2008 	ldr.w	r2, [r9, #8]
   1ff4c:	f8d9 300c 	ldr.w	r3, [r9, #12]
   1ff50:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ff52:	ae14      	add	r6, sp, #80	; 0x50
   1ff54:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ff56:	f8ce 0008 	str.w	r0, [lr, #8]
   1ff5a:	f8ce 100c 	str.w	r1, [lr, #12]
   1ff5e:	f8ce 2010 	str.w	r2, [lr, #16]
   1ff62:	f8ce 3014 	str.w	r3, [lr, #20]
   1ff66:	68a3      	ldr	r3, [r4, #8]
   1ff68:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ff6a:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ff6c:	b9fa      	cbnz	r2, 1ffae <net_ipv6_send_ns+0x256>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ff6e:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   1ff70:	2a00      	cmp	r2, #0
   1ff72:	d140      	bne.n	1fff6 <net_ipv6_send_ns+0x29e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ff74:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   1ff76:	2a00      	cmp	r2, #0
   1ff78:	d13f      	bne.n	1fffa <net_ipv6_send_ns+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   1ff7a:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   1ff7c:	2b00      	cmp	r3, #0
   1ff7e:	d03e      	beq.n	1fffe <net_ipv6_send_ns+0x2a6>
   1ff80:	2300      	movs	r3, #0
   1ff82:	e015      	b.n	1ffb0 <net_ipv6_send_ns+0x258>
   1ff84:	68a3      	ldr	r3, [r4, #8]
   1ff86:	689f      	ldr	r7, [r3, #8]
			net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   1ff88:	f107 0118 	add.w	r1, r7, #24
   1ff8c:	6960      	ldr	r0, [r4, #20]
   1ff8e:	f7fb fab9 	bl	1b504 <net_if_ipv6_select_src_addr>
   1ff92:	4603      	mov	r3, r0
   1ff94:	ae18      	add	r6, sp, #96	; 0x60
   1ff96:	6800      	ldr	r0, [r0, #0]
   1ff98:	6859      	ldr	r1, [r3, #4]
   1ff9a:	689a      	ldr	r2, [r3, #8]
   1ff9c:	68db      	ldr	r3, [r3, #12]
   1ff9e:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   1ffa0:	ae18      	add	r6, sp, #96	; 0x60
   1ffa2:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   1ffa4:	60b8      	str	r0, [r7, #8]
   1ffa6:	60f9      	str	r1, [r7, #12]
   1ffa8:	613a      	str	r2, [r7, #16]
   1ffaa:	617b      	str	r3, [r7, #20]
   1ffac:	e7db      	b.n	1ff66 <net_ipv6_send_ns+0x20e>
   1ffae:	2300      	movs	r3, #0
		if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   1ffb0:	bbab      	cbnz	r3, 2001e <net_ipv6_send_ns+0x2c6>
		net_buf_add(frag, llao_len);
   1ffb2:	4641      	mov	r1, r8
   1ffb4:	4650      	mov	r0, sl
   1ffb6:	f7fa fa1d 	bl	1a3f4 <net_buf_simple_add>
	return pkt->iface;
   1ffba:	f8d4 9014 	ldr.w	r9, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   1ffbe:	4620      	mov	r0, r4
   1ffc0:	f7fd fa14 	bl	1d3ec <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   1ffc4:	f100 0618 	add.w	r6, r0, #24
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   1ffc8:	2301      	movs	r3, #1
   1ffca:	7603      	strb	r3, [r0, #24]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   1ffcc:	ea4f 03d8 	mov.w	r3, r8, lsr #3
   1ffd0:	7643      	strb	r3, [r0, #25]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   1ffd2:	f899 2014 	ldrb.w	r2, [r9, #20]
   1ffd6:	f8d9 1010 	ldr.w	r1, [r9, #16]
   1ffda:	301a      	adds	r0, #26
   1ffdc:	f7e0 f970 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1ffe0:	f899 2014 	ldrb.w	r2, [r9, #20]
   1ffe4:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   1ffe6:	eba8 0202 	sub.w	r2, r8, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   1ffea:	3a02      	subs	r2, #2
   1ffec:	2100      	movs	r1, #0
   1ffee:	4430      	add	r0, r6
   1fff0:	f009 fcd2 	bl	29998 <memset>
   1fff4:	e74a      	b.n	1fe8c <net_ipv6_send_ns+0x134>
   1fff6:	2300      	movs	r3, #0
   1fff8:	e7da      	b.n	1ffb0 <net_ipv6_send_ns+0x258>
   1fffa:	2300      	movs	r3, #0
   1fffc:	e7d8      	b.n	1ffb0 <net_ipv6_send_ns+0x258>
   1fffe:	2301      	movs	r3, #1
   20000:	e7d6      	b.n	1ffb0 <net_ipv6_send_ns+0x258>
		nbr = nbr_new(net_pkt_iface(pkt), &ns_hdr->tgt, false,
   20002:	2300      	movs	r3, #0
   20004:	461a      	mov	r2, r3
   20006:	4629      	mov	r1, r5
   20008:	6960      	ldr	r0, [r4, #20]
   2000a:	f7fe ffab 	bl	1ef64 <nbr_new>
		if (!nbr) {
   2000e:	4606      	mov	r6, r0
   20010:	2800      	cmp	r0, #0
   20012:	f47f af49 	bne.w	1fea8 <net_ipv6_send_ns+0x150>
   20016:	e002      	b.n	2001e <net_ipv6_send_ns+0x2c6>
			net_pkt_unref(pending);
   20018:	9801      	ldr	r0, [sp, #4]
   2001a:	f7fc ff0e 	bl	1ce3a <net_pkt_unref>
	net_pkt_unref(pkt);
   2001e:	4620      	mov	r0, r4
   20020:	f7fc ff0b 	bl	1ce3a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20024:	4a0e      	ldr	r2, [pc, #56]	; (20060 <net_ipv6_send_ns+0x308>)
   20026:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   2002a:	3301      	adds	r3, #1
   2002c:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20030:	f06f 0015 	mvn.w	r0, #21
   20034:	e756      	b.n	1fee4 <net_ipv6_send_ns+0x18c>
		if (pending) {
   20036:	9b01      	ldr	r3, [sp, #4]
   20038:	2b00      	cmp	r3, #0
   2003a:	d0f0      	beq.n	2001e <net_ipv6_send_ns+0x2c6>
   2003c:	68f5      	ldr	r5, [r6, #12]
	k_delayed_work_cancel(&data->send_ns);
   2003e:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20042:	f009 fac5 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   20046:	6828      	ldr	r0, [r5, #0]
   20048:	2800      	cmp	r0, #0
   2004a:	d0e8      	beq.n	2001e <net_ipv6_send_ns+0x2c6>
		net_pkt_unref(data->pending);
   2004c:	f7fc fef5 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   20050:	2300      	movs	r3, #0
   20052:	602b      	str	r3, [r5, #0]
   20054:	e7e3      	b.n	2001e <net_ipv6_send_ns+0x2c6>
   20056:	bf00      	nop
   20058:	2000be8c 	.word	0x2000be8c
   2005c:	20002bd8 	.word	0x20002bd8
   20060:	20002ab8 	.word	0x20002ab8

00020064 <net_ipv6_nbr_add>:
{
   20064:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   20068:	b083      	sub	sp, #12
   2006a:	4605      	mov	r5, r0
   2006c:	460e      	mov	r6, r1
   2006e:	4617      	mov	r7, r2
   20070:	4698      	mov	r8, r3
	nbr = nbr_lookup(&net_neighbor.table, iface, addr);
   20072:	460a      	mov	r2, r1
   20074:	4601      	mov	r1, r0
   20076:	482c      	ldr	r0, [pc, #176]	; (20128 <net_ipv6_nbr_add+0xc4>)
   20078:	f7fe fef2 	bl	1ee60 <nbr_lookup>
	if (!nbr) {
   2007c:	4604      	mov	r4, r0
   2007e:	b180      	cbz	r0, 200a2 <net_ipv6_nbr_add+0x3e>
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   20080:	463a      	mov	r2, r7
   20082:	4629      	mov	r1, r5
   20084:	4620      	mov	r0, r4
   20086:	f7fe fd05 	bl	1ea94 <net_nbr_link>
   2008a:	f110 0f78 	cmn.w	r0, #120	; 0x78
   2008e:	d013      	beq.n	200b8 <net_ipv6_nbr_add+0x54>
   20090:	68e3      	ldr	r3, [r4, #12]
	if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_INCOMPLETE) {
   20092:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20096:	2b00      	cmp	r3, #0
   20098:	d03c      	beq.n	20114 <net_ipv6_nbr_add+0xb0>
}
   2009a:	4620      	mov	r0, r4
   2009c:	b003      	add	sp, #12
   2009e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		nbr = nbr_new(iface, addr, is_router, state);
   200a2:	f89d 3028 	ldrb.w	r3, [sp, #40]	; 0x28
   200a6:	4642      	mov	r2, r8
   200a8:	4631      	mov	r1, r6
   200aa:	4628      	mov	r0, r5
   200ac:	f7fe ff5a 	bl	1ef64 <nbr_new>
		if (!nbr) {
   200b0:	4604      	mov	r4, r0
   200b2:	2800      	cmp	r0, #0
   200b4:	d1e4      	bne.n	20080 <net_ipv6_nbr_add+0x1c>
   200b6:	e7f0      	b.n	2009a <net_ipv6_nbr_add+0x36>
   200b8:	68e3      	ldr	r3, [r4, #12]
	    net_ipv6_nbr_data(nbr)->state != NET_IPV6_NBR_STATE_STATIC) {
   200ba:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
	if (net_nbr_link(nbr, iface, lladdr) == -EALREADY &&
   200be:	2b05      	cmp	r3, #5
   200c0:	d0e6      	beq.n	20090 <net_ipv6_nbr_add+0x2c>
		cached_lladdr = net_nbr_get_lladdr(nbr->idx);
   200c2:	7860      	ldrb	r0, [r4, #1]
   200c4:	f7fe fd4c 	bl	1eb60 <net_nbr_get_lladdr>
   200c8:	4680      	mov	r8, r0
		if (memcmp(cached_lladdr->addr, lladdr->addr, lladdr->len)) {
   200ca:	f100 0902 	add.w	r9, r0, #2
   200ce:	793a      	ldrb	r2, [r7, #4]
   200d0:	6839      	ldr	r1, [r7, #0]
   200d2:	4648      	mov	r0, r9
   200d4:	f009 fbcc 	bl	29870 <memcmp>
   200d8:	b190      	cbz	r0, 20100 <net_ipv6_nbr_add+0x9c>
			net_linkaddr_set(cached_lladdr, lladdr->addr,
   200da:	6839      	ldr	r1, [r7, #0]
   200dc:	793a      	ldrb	r2, [r7, #4]
	if (!lladdr_store || !new_addr) {
   200de:	f1b8 0f00 	cmp.w	r8, #0
   200e2:	d002      	beq.n	200ea <net_ipv6_nbr_add+0x86>
   200e4:	b109      	cbz	r1, 200ea <net_ipv6_nbr_add+0x86>
	if (new_len > NET_LINK_ADDR_MAX_LENGTH) {
   200e6:	2a06      	cmp	r2, #6
   200e8:	d904      	bls.n	200f4 <net_ipv6_nbr_add+0x90>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   200ea:	2102      	movs	r1, #2
   200ec:	4620      	mov	r0, r4
   200ee:	f7fe fd3f 	bl	1eb70 <ipv6_nbr_set_state>
   200f2:	e7cd      	b.n	20090 <net_ipv6_nbr_add+0x2c>
	lladdr_store->len = new_len;
   200f4:	f888 2001 	strb.w	r2, [r8, #1]
	memcpy(lladdr_store->addr, new_addr, new_len);
   200f8:	4648      	mov	r0, r9
   200fa:	f7e0 f8e1 	bl	2c0 <memcpy>
   200fe:	e7f4      	b.n	200ea <net_ipv6_nbr_add+0x86>
   20100:	68e3      	ldr	r3, [r4, #12]
		} else if (net_ipv6_nbr_data(nbr)->state ==
   20102:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20106:	2b00      	cmp	r3, #0
   20108:	d1c2      	bne.n	20090 <net_ipv6_nbr_add+0x2c>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_STALE);
   2010a:	2102      	movs	r1, #2
   2010c:	4620      	mov	r0, r4
   2010e:	f7fe fd2f 	bl	1eb70 <ipv6_nbr_set_state>
   20112:	e7bd      	b.n	20090 <net_ipv6_nbr_add+0x2c>
		net_ipv6_send_ns(iface, NULL, NULL, NULL, addr, false);
   20114:	2100      	movs	r1, #0
   20116:	9101      	str	r1, [sp, #4]
   20118:	9600      	str	r6, [sp, #0]
   2011a:	460b      	mov	r3, r1
   2011c:	460a      	mov	r2, r1
   2011e:	4628      	mov	r0, r5
   20120:	f7ff fe1a 	bl	1fd58 <net_ipv6_send_ns>
   20124:	e7b9      	b.n	2009a <net_ipv6_nbr_add+0x36>
   20126:	bf00      	nop
   20128:	2000be8c 	.word	0x2000be8c

0002012c <handle_ra_input>:
{
   2012c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20130:	b098      	sub	sp, #96	; 0x60
   20132:	4606      	mov	r6, r0
	return net_buf_frags_len(pkt->frags);
   20134:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20136:	2200      	movs	r2, #0
   20138:	e002      	b.n	20140 <handle_ra_input+0x14>
		bytes += buf->len;
   2013a:	8999      	ldrh	r1, [r3, #12]
   2013c:	440a      	add	r2, r1
		buf = buf->frags;
   2013e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20140:	2b00      	cmp	r3, #0
   20142:	d1fa      	bne.n	2013a <handle_ra_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20144:	b292      	uxth	r2, r2
	net_stats.ipv6_nd.recv++;
   20146:	49b7      	ldr	r1, [pc, #732]	; (20424 <handle_ra_input+0x2f8>)
   20148:	f8d1 3090 	ldr.w	r3, [r1, #144]	; 0x90
   2014c:	3301      	adds	r3, #1
   2014e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   20152:	2a39      	cmp	r2, #57	; 0x39
   20154:	d904      	bls.n	20160 <handle_ra_input+0x34>
	return pkt->frags->data;
   20156:	68b3      	ldr	r3, [r6, #8]
   20158:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   2015a:	79da      	ldrb	r2, [r3, #7]
			  sizeof(struct net_icmpv6_nd_opt_hdr))) ||
   2015c:	2aff      	cmp	r2, #255	; 0xff
   2015e:	d010      	beq.n	20182 <handle_ra_input+0x56>
		icmp_hdr = net_icmpv6_get_hdr(pkt, &icmphdr);
   20160:	a907      	add	r1, sp, #28
   20162:	4630      	mov	r0, r6
   20164:	f7fd ff6d 	bl	1e042 <net_icmpv6_get_hdr>
		if (!icmp_hdr || icmp_hdr->code != 0) {
   20168:	b108      	cbz	r0, 2016e <handle_ra_input+0x42>
   2016a:	7843      	ldrb	r3, [r0, #1]
   2016c:	b173      	cbz	r3, 2018c <handle_ra_input+0x60>
	net_stats.ipv6_nd.drop++;
   2016e:	4aad      	ldr	r2, [pc, #692]	; (20424 <handle_ra_input+0x2f8>)
   20170:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20174:	3301      	adds	r3, #1
   20176:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   2017a:	2002      	movs	r0, #2
}
   2017c:	b018      	add	sp, #96	; 0x60
   2017e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20182:	891a      	ldrh	r2, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT) ||
   20184:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20188:	429a      	cmp	r2, r3
   2018a:	d1e9      	bne.n	20160 <handle_ra_input+0x34>
	offset = sizeof(struct net_ipv6_hdr) + net_pkt_ipv6_ext_len(pkt) +
   2018c:	f896 103b 	ldrb.w	r1, [r6, #59]	; 0x3b
   20190:	312c      	adds	r1, #44	; 0x2c
   20192:	ac18      	add	r4, sp, #96	; 0x60
   20194:	f824 1d1c 	strh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, 1, value);
   20198:	f10d 0347 	add.w	r3, sp, #71	; 0x47
   2019c:	9300      	str	r3, [sp, #0]
   2019e:	2301      	movs	r3, #1
   201a0:	4622      	mov	r2, r4
   201a2:	68b0      	ldr	r0, [r6, #8]
   201a4:	f7fc ffc7 	bl	1d136 <net_frag_read>
	frag = net_frag_skip(frag, offset, &offset, 1); /* flags */
   201a8:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	return net_frag_read(frag, offset, pos, len, NULL);
   201ac:	2300      	movs	r3, #0
   201ae:	9300      	str	r3, [sp, #0]
   201b0:	2301      	movs	r3, #1
   201b2:	4622      	mov	r2, r4
   201b4:	f7fc ffbf 	bl	1d136 <net_frag_read>
	if (!frag) {
   201b8:	4604      	mov	r4, r0
   201ba:	2800      	cmp	r0, #0
   201bc:	d0d7      	beq.n	2016e <handle_ra_input+0x42>
	if (hop_limit) {
   201be:	f89d 3047 	ldrb.w	r3, [sp, #71]	; 0x47
   201c2:	b113      	cbz	r3, 201ca <handle_ra_input+0x9e>
	return pkt->iface;
   201c4:	6972      	ldr	r2, [r6, #20]
	iface->ipv6.hop_limit = hop_limit;
   201c6:	f882 3294 	strb.w	r3, [r2, #660]	; 0x294
	frag = net_frag_read_be16(frag, offset, &offset, &router_lifetime);
   201ca:	f10d 0352 	add.w	r3, sp, #82	; 0x52
   201ce:	aa11      	add	r2, sp, #68	; 0x44
   201d0:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   201d4:	4620      	mov	r0, r4
   201d6:	f7fc fff6 	bl	1d1c6 <net_frag_read_be16>
	frag = net_frag_read_be32(frag, offset, &offset, &reachable_time);
   201da:	ab13      	add	r3, sp, #76	; 0x4c
   201dc:	aa11      	add	r2, sp, #68	; 0x44
   201de:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   201e2:	f7fd f801 	bl	1d1e8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, offset, &offset, &retrans_timer);
   201e6:	ab12      	add	r3, sp, #72	; 0x48
   201e8:	aa11      	add	r2, sp, #68	; 0x44
   201ea:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   201ee:	f7fc fffb 	bl	1d1e8 <net_frag_read_be32>
	if (!frag) {
   201f2:	4605      	mov	r5, r0
   201f4:	2800      	cmp	r0, #0
   201f6:	d0ba      	beq.n	2016e <handle_ra_input+0x42>
	ra_hdr = net_icmpv6_get_ra_hdr(pkt, &hdr);
   201f8:	a915      	add	r1, sp, #84	; 0x54
   201fa:	4630      	mov	r0, r6
   201fc:	f7fe f99a 	bl	1e534 <net_icmpv6_get_ra_hdr>
	if (reachable_time &&
   20200:	9b13      	ldr	r3, [sp, #76]	; 0x4c
   20202:	b16b      	cbz	r3, 20220 <handle_ra_input+0xf4>
   20204:	6972      	ldr	r2, [r6, #20]
	return iface->ipv6.reachable_time;
   20206:	f8d2 428c 	ldr.w	r4, [r2, #652]	; 0x28c
	     ra_hdr->reachable_time)) {
   2020a:	6841      	ldr	r1, [r0, #4]
	if (reachable_time &&
   2020c:	428c      	cmp	r4, r1
   2020e:	d007      	beq.n	20220 <handle_ra_input+0xf4>
	iface->ipv6.base_reachable_time = reachable_time;
   20210:	f8c2 3288 	str.w	r3, [r2, #648]	; 0x288
   20214:	6974      	ldr	r4, [r6, #20]
	iface->ipv6.reachable_time = net_if_ipv6_calc_reachable_time(iface);
   20216:	4620      	mov	r0, r4
   20218:	f7fb fa70 	bl	1b6fc <net_if_ipv6_calc_reachable_time>
   2021c:	f8c4 028c 	str.w	r0, [r4, #652]	; 0x28c
	if (retrans_timer) {
   20220:	9b12      	ldr	r3, [sp, #72]	; 0x48
   20222:	b113      	cbz	r3, 2022a <handle_ra_input+0xfe>
   20224:	6972      	ldr	r2, [r6, #20]
 * @param retrans_timer New retransmit timer
 */
static inline void net_if_ipv6_set_retrans_timer(struct net_if *iface,
						 u32_t retrans_timer)
{
	iface->ipv6.retrans_timer = retrans_timer;
   20226:	f8c2 3290 	str.w	r3, [r2, #656]	; 0x290
	struct net_nbr *nbr = NULL;
   2022a:	2700      	movs	r7, #0
   2022c:	e060      	b.n	202f0 <handle_ra_input+0x1c4>
			frag = handle_ra_neighbor(pkt, frag, length, offset,
   2022e:	f89d 4043 	ldrb.w	r4, [sp, #67]	; 0x43
   20232:	f8bd 8044 	ldrh.w	r8, [sp, #68]	; 0x44
	llstorage.len = NET_LINK_ADDR_MAX_LENGTH;
   20236:	2306      	movs	r3, #6
   20238:	f88d 301d 	strb.w	r3, [sp, #29]
	lladdr.len = NET_LINK_ADDR_MAX_LENGTH;
   2023c:	f88d 3010 	strb.w	r3, [sp, #16]
	lladdr.addr = llstorage.addr;
   20240:	f10d 031e 	add.w	r3, sp, #30
   20244:	9303      	str	r3, [sp, #12]
	if (net_pkt_ll_src(pkt)->len < lladdr.len) {
   20246:	f896 3024 	ldrb.w	r3, [r6, #36]	; 0x24
   2024a:	2b05      	cmp	r3, #5
   2024c:	d801      	bhi.n	20252 <handle_ra_input+0x126>
		lladdr.len = net_pkt_ll_src(pkt)->len;
   2024e:	f88d 3010 	strb.w	r3, [sp, #16]
	frag = net_frag_read(frag, offset, pos, lladdr.len, lladdr.addr);
   20252:	f89d 3010 	ldrb.w	r3, [sp, #16]
   20256:	f10d 021e 	add.w	r2, sp, #30
   2025a:	9200      	str	r2, [sp, #0]
   2025c:	aa11      	add	r2, sp, #68	; 0x44
   2025e:	4641      	mov	r1, r8
   20260:	4628      	mov	r0, r5
   20262:	f7fc ff68 	bl	1d136 <net_frag_read>
	if (!frag && offset) {
   20266:	4605      	mov	r5, r0
   20268:	b318      	cbz	r0, 202b2 <handle_ra_input+0x186>
	padding = len * 8 - 2 - lladdr.len;
   2026a:	00e3      	lsls	r3, r4, #3
   2026c:	b2db      	uxtb	r3, r3
   2026e:	f89d 2010 	ldrb.w	r2, [sp, #16]
   20272:	1a9b      	subs	r3, r3, r2
   20274:	b2db      	uxtb	r3, r3
   20276:	3b02      	subs	r3, #2
	if (padding) {
   20278:	f013 03ff 	ands.w	r3, r3, #255	; 0xff
   2027c:	d009      	beq.n	20292 <handle_ra_input+0x166>
		frag = net_frag_read(frag, *pos, pos, padding, NULL);
   2027e:	aa18      	add	r2, sp, #96	; 0x60
   20280:	f832 1d1c 	ldrh.w	r1, [r2, #-28]!
   20284:	2000      	movs	r0, #0
   20286:	9000      	str	r0, [sp, #0]
   20288:	4628      	mov	r0, r5
   2028a:	f7fc ff54 	bl	1d136 <net_frag_read>
		if (!frag && *pos) {
   2028e:	4605      	mov	r5, r0
   20290:	b198      	cbz	r0, 202ba <handle_ra_input+0x18e>
	return pkt->frags->data;
   20292:	68b3      	ldr	r3, [r6, #8]
   20294:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20296:	2302      	movs	r3, #2
   20298:	9300      	str	r3, [sp, #0]
   2029a:	2301      	movs	r3, #1
   2029c:	aa03      	add	r2, sp, #12
   2029e:	3108      	adds	r1, #8
   202a0:	6970      	ldr	r0, [r6, #20]
   202a2:	f7ff fedf 	bl	20064 <net_ipv6_nbr_add>
   202a6:	4607      	mov	r7, r0
			if (!frag && offset) {
   202a8:	bb15      	cbnz	r5, 202f0 <handle_ra_input+0x1c4>
   202aa:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   202ae:	b1fb      	cbz	r3, 202f0 <handle_ra_input+0x1c4>
   202b0:	e75d      	b.n	2016e <handle_ra_input+0x42>
	if (!frag && offset) {
   202b2:	f1b8 0f00 	cmp.w	r8, #0
   202b6:	d0d8      	beq.n	2026a <handle_ra_input+0x13e>
   202b8:	e7f6      	b.n	202a8 <handle_ra_input+0x17c>
		if (!frag && *pos) {
   202ba:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   202be:	2b00      	cmp	r3, #0
   202c0:	d0e7      	beq.n	20292 <handle_ra_input+0x166>
   202c2:	e7f1      	b.n	202a8 <handle_ra_input+0x17c>
			frag = net_frag_skip(frag, offset, &offset, 2);
   202c4:	ac18      	add	r4, sp, #96	; 0x60
   202c6:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
	return net_frag_read(frag, offset, pos, len, NULL);
   202ca:	2300      	movs	r3, #0
   202cc:	9300      	str	r3, [sp, #0]
   202ce:	2302      	movs	r3, #2
   202d0:	4622      	mov	r2, r4
   202d2:	f7fc ff30 	bl	1d136 <net_frag_read>
			frag = net_frag_read_be32(frag, offset, &offset, &mtu);
   202d6:	ab0f      	add	r3, sp, #60	; 0x3c
   202d8:	4622      	mov	r2, r4
   202da:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   202de:	f7fc ff83 	bl	1d1e8 <net_frag_read_be32>
			if (!frag && offset) {
   202e2:	4605      	mov	r5, r0
   202e4:	2800      	cmp	r0, #0
   202e6:	d03b      	beq.n	20360 <handle_ra_input+0x234>
	return pkt->iface;
   202e8:	6973      	ldr	r3, [r6, #20]
			net_if_set_mtu(net_pkt_iface(pkt), mtu);
   202ea:	f8bd 203c 	ldrh.w	r2, [sp, #60]	; 0x3c
	iface->mtu = mtu;
   202ee:	851a      	strh	r2, [r3, #40]	; 0x28
	while (frag) {
   202f0:	2d00      	cmp	r5, #0
   202f2:	f000 8170 	beq.w	205d6 <handle_ra_input+0x4aa>
		frag = net_frag_read(frag, offset, &offset, 1, &type);
   202f6:	ac18      	add	r4, sp, #96	; 0x60
   202f8:	f834 1d1c 	ldrh.w	r1, [r4, #-28]!
   202fc:	f10d 0342 	add.w	r3, sp, #66	; 0x42
   20300:	9300      	str	r3, [sp, #0]
   20302:	2301      	movs	r3, #1
   20304:	4622      	mov	r2, r4
   20306:	4628      	mov	r0, r5
   20308:	f7fc ff15 	bl	1d136 <net_frag_read>
		frag = net_frag_read(frag, offset, &offset, 1, &length);
   2030c:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20310:	f10d 0343 	add.w	r3, sp, #67	; 0x43
   20314:	9300      	str	r3, [sp, #0]
   20316:	2301      	movs	r3, #1
   20318:	4622      	mov	r2, r4
   2031a:	f7fc ff0c 	bl	1d136 <net_frag_read>
		if (!frag) {
   2031e:	4605      	mov	r5, r0
   20320:	2800      	cmp	r0, #0
   20322:	f43f af24 	beq.w	2016e <handle_ra_input+0x42>
		switch (type) {
   20326:	f89d 3042 	ldrb.w	r3, [sp, #66]	; 0x42
   2032a:	2b03      	cmp	r3, #3
   2032c:	d01d      	beq.n	2036a <handle_ra_input+0x23e>
   2032e:	2b05      	cmp	r3, #5
   20330:	d0c8      	beq.n	202c4 <handle_ra_input+0x198>
   20332:	2b01      	cmp	r3, #1
   20334:	f43f af7b 	beq.w	2022e <handle_ra_input+0x102>
			frag = net_frag_skip(frag, offset, &offset,
   20338:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
					     length * 8 - 2);
   2033c:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   20340:	00db      	lsls	r3, r3, #3
			frag = net_frag_skip(frag, offset, &offset,
   20342:	3b02      	subs	r3, #2
   20344:	b29b      	uxth	r3, r3
	return net_frag_read(frag, offset, pos, len, NULL);
   20346:	2200      	movs	r2, #0
   20348:	9200      	str	r2, [sp, #0]
   2034a:	aa11      	add	r2, sp, #68	; 0x44
   2034c:	f7fc fef3 	bl	1d136 <net_frag_read>
			if (!frag && offset) {
   20350:	4605      	mov	r5, r0
   20352:	2800      	cmp	r0, #0
   20354:	d1cc      	bne.n	202f0 <handle_ra_input+0x1c4>
   20356:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2035a:	2b00      	cmp	r3, #0
   2035c:	d0c8      	beq.n	202f0 <handle_ra_input+0x1c4>
   2035e:	e706      	b.n	2016e <handle_ra_input+0x42>
			if (!frag && offset) {
   20360:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   20364:	2b00      	cmp	r3, #0
   20366:	d0bf      	beq.n	202e8 <handle_ra_input+0x1bc>
   20368:	e701      	b.n	2016e <handle_ra_input+0x42>
			frag = handle_ra_prefix(pkt, frag, length, offset,
   2036a:	f89d 3043 	ldrb.w	r3, [sp, #67]	; 0x43
   2036e:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
	prefix_info.type = NET_ICMPV6_ND_OPT_PREFIX_INFO;
   20372:	2203      	movs	r2, #3
   20374:	f88d 201c 	strb.w	r2, [sp, #28]
	prefix_info.len = len * 8 - 2;
   20378:	4093      	lsls	r3, r2
   2037a:	b2db      	uxtb	r3, r3
   2037c:	3b02      	subs	r3, #2
   2037e:	f88d 301d 	strb.w	r3, [sp, #29]
	frag = net_frag_read(frag, offset, pos, 1, &prefix_info.prefix_len);
   20382:	f10d 031e 	add.w	r3, sp, #30
   20386:	9300      	str	r3, [sp, #0]
   20388:	2301      	movs	r3, #1
   2038a:	aa11      	add	r2, sp, #68	; 0x44
   2038c:	f7fc fed3 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, 1, &prefix_info.flags);
   20390:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   20394:	f10d 031f 	add.w	r3, sp, #31
   20398:	9300      	str	r3, [sp, #0]
   2039a:	2301      	movs	r3, #1
   2039c:	aa11      	add	r2, sp, #68	; 0x44
   2039e:	f7fc feca 	bl	1d136 <net_frag_read>
	frag = net_frag_read_be32(frag, *pos, pos, &prefix_info.valid_lifetime);
   203a2:	ab08      	add	r3, sp, #32
   203a4:	aa11      	add	r2, sp, #68	; 0x44
   203a6:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   203aa:	f7fc ff1d 	bl	1d1e8 <net_frag_read_be32>
	frag = net_frag_read_be32(frag, *pos, pos,
   203ae:	ab09      	add	r3, sp, #36	; 0x24
   203b0:	aa11      	add	r2, sp, #68	; 0x44
   203b2:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   203b6:	f7fc ff17 	bl	1d1e8 <net_frag_read_be32>
	frag = net_frag_skip(frag, *pos, pos, 4);
   203ba:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   203be:	2300      	movs	r3, #0
   203c0:	9300      	str	r3, [sp, #0]
   203c2:	2304      	movs	r3, #4
   203c4:	aa11      	add	r2, sp, #68	; 0x44
   203c6:	f7fc feb6 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, *pos, pos, sizeof(struct in6_addr),
   203ca:	f8bd 1044 	ldrh.w	r1, [sp, #68]	; 0x44
   203ce:	ab0b      	add	r3, sp, #44	; 0x2c
   203d0:	9300      	str	r3, [sp, #0]
   203d2:	2310      	movs	r3, #16
   203d4:	aa11      	add	r2, sp, #68	; 0x44
   203d6:	f7fc feae 	bl	1d136 <net_frag_read>
	if (!frag && *pos) {
   203da:	4605      	mov	r5, r0
   203dc:	b320      	cbz	r0, 20428 <handle_ra_input+0x2fc>
	if (prefix_info.valid_lifetime >= prefix_info.preferred_lifetime &&
   203de:	9b09      	ldr	r3, [sp, #36]	; 0x24
   203e0:	9a08      	ldr	r2, [sp, #32]
   203e2:	429a      	cmp	r2, r3
   203e4:	d314      	bcc.n	20410 <handle_ra_input+0x2e4>
   203e6:	f8bd 202c 	ldrh.w	r2, [sp, #44]	; 0x2c
   203ea:	f248 03fe 	movw	r3, #33022	; 0x80fe
   203ee:	429a      	cmp	r2, r3
   203f0:	d00e      	beq.n	20410 <handle_ra_input+0x2e4>
		if (prefix_info.flags & NET_ICMPV6_RA_FLAG_ONLINK) {
   203f2:	f99d 301f 	ldrsb.w	r3, [sp, #31]
   203f6:	2b00      	cmp	r3, #0
   203f8:	db1b      	blt.n	20432 <handle_ra_input+0x306>
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   203fa:	f89d 301f 	ldrb.w	r3, [sp, #31]
   203fe:	f013 0f40 	tst.w	r3, #64	; 0x40
   20402:	d005      	beq.n	20410 <handle_ra_input+0x2e4>
		    prefix_info.valid_lifetime &&
   20404:	9b08      	ldr	r3, [sp, #32]
		if ((prefix_info.flags & NET_ICMPV6_RA_FLAG_AUTONOMOUS) &&
   20406:	b11b      	cbz	r3, 20410 <handle_ra_input+0x2e4>
		    (prefix_info.prefix_len == NET_IPV6_DEFAULT_PREFIX_LEN)) {
   20408:	f89d 301e 	ldrb.w	r3, [sp, #30]
		    prefix_info.valid_lifetime &&
   2040c:	2b40      	cmp	r3, #64	; 0x40
   2040e:	d03e      	beq.n	2048e <handle_ra_input+0x362>
			if (!frag && offset) {
   20410:	2d00      	cmp	r5, #0
   20412:	f47f af6d 	bne.w	202f0 <handle_ra_input+0x1c4>
   20416:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2041a:	2b00      	cmp	r3, #0
   2041c:	f43f af68 	beq.w	202f0 <handle_ra_input+0x1c4>
   20420:	e6a5      	b.n	2016e <handle_ra_input+0x42>
   20422:	bf00      	nop
   20424:	20002ab8 	.word	0x20002ab8
	if (!frag && *pos) {
   20428:	f8bd 3044 	ldrh.w	r3, [sp, #68]	; 0x44
   2042c:	2b00      	cmp	r3, #0
   2042e:	d0d6      	beq.n	203de <handle_ra_input+0x2b2>
   20430:	e7ee      	b.n	20410 <handle_ra_input+0x2e4>
	prefix = net_if_ipv6_prefix_lookup(net_pkt_iface(pkt),
   20432:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20436:	a90b      	add	r1, sp, #44	; 0x2c
   20438:	6970      	ldr	r0, [r6, #20]
   2043a:	f7fa fe3f 	bl	1b0bc <net_if_ipv6_prefix_lookup>
	if (!prefix) {
   2043e:	4603      	mov	r3, r0
   20440:	b160      	cbz	r0, 2045c <handle_ra_input+0x330>
	switch (prefix_info->valid_lifetime) {
   20442:	9a08      	ldr	r2, [sp, #32]
   20444:	b1ba      	cbz	r2, 20476 <handle_ra_input+0x34a>
   20446:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   2044a:	d01c      	beq.n	20486 <handle_ra_input+0x35a>
	prefix->is_infinite = is_infinite;
   2044c:	2200      	movs	r2, #0
   2044e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		net_if_ipv6_prefix_set_timer(prefix,
   20452:	9908      	ldr	r1, [sp, #32]
   20454:	4618      	mov	r0, r3
   20456:	f7fa fee3 	bl	1b220 <net_if_ipv6_prefix_set_timer>
   2045a:	e7ce      	b.n	203fa <handle_ra_input+0x2ce>
		if (!prefix_info->valid_lifetime) {
   2045c:	9b08      	ldr	r3, [sp, #32]
   2045e:	2b00      	cmp	r3, #0
   20460:	d0cb      	beq.n	203fa <handle_ra_input+0x2ce>
		prefix = net_if_ipv6_prefix_add(net_pkt_iface(pkt),
   20462:	f89d 201e 	ldrb.w	r2, [sp, #30]
   20466:	a90b      	add	r1, sp, #44	; 0x2c
   20468:	6970      	ldr	r0, [r6, #20]
   2046a:	f7fa fdf7 	bl	1b05c <net_if_ipv6_prefix_add>
		if (prefix) {
   2046e:	4603      	mov	r3, r0
   20470:	2800      	cmp	r0, #0
   20472:	d1e6      	bne.n	20442 <handle_ra_input+0x316>
   20474:	e7c1      	b.n	203fa <handle_ra_input+0x2ce>
		net_if_ipv6_prefix_rm(net_pkt_iface(pkt),
   20476:	f893 2038 	ldrb.w	r2, [r3, #56]	; 0x38
   2047a:	f103 0128 	add.w	r1, r3, #40	; 0x28
   2047e:	6970      	ldr	r0, [r6, #20]
   20480:	f7fa feea 	bl	1b258 <net_if_ipv6_prefix_rm>
   20484:	e7b9      	b.n	203fa <handle_ra_input+0x2ce>
   20486:	2201      	movs	r2, #1
   20488:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
   2048c:	e7b5      	b.n	203fa <handle_ra_input+0x2ce>
	struct in6_addr addr = { };
   2048e:	2300      	movs	r3, #0
   20490:	9305      	str	r3, [sp, #20]
   20492:	9306      	str	r3, [sp, #24]
	return pkt->iface;
   20494:	6974      	ldr	r4, [r6, #20]
	return &iface->link_addr;
   20496:	f104 0810 	add.w	r8, r4, #16
	addr->s6_addr[0] = 0xfe;
   2049a:	22fe      	movs	r2, #254	; 0xfe
   2049c:	f88d 200c 	strb.w	r2, [sp, #12]
	addr->s6_addr[1] = 0x80;
   204a0:	2280      	movs	r2, #128	; 0x80
   204a2:	f88d 200d 	strb.w	r2, [sp, #13]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   204a6:	f8ad 300e 	strh.w	r3, [sp, #14]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   204aa:	9304      	str	r3, [sp, #16]
	switch (lladdr->len) {
   204ac:	f898 2004 	ldrb.w	r2, [r8, #4]
   204b0:	2a06      	cmp	r2, #6
   204b2:	d032      	beq.n	2051a <handle_ra_input+0x3ee>
   204b4:	2a08      	cmp	r2, #8
   204b6:	d058      	beq.n	2056a <handle_ra_input+0x43e>
   204b8:	2a02      	cmp	r2, #2
   204ba:	d018      	beq.n	204ee <handle_ra_input+0x3c2>
	memcpy(&addr, &prefix_info->prefix, sizeof(struct in6_addr) / 2);
   204bc:	2208      	movs	r2, #8
   204be:	a90b      	add	r1, sp, #44	; 0x2c
   204c0:	a803      	add	r0, sp, #12
   204c2:	f7df fefd 	bl	2c0 <memcpy>
	ifaddr = net_if_ipv6_addr_lookup(&addr, NULL);
   204c6:	2100      	movs	r1, #0
   204c8:	a803      	add	r0, sp, #12
   204ca:	f7fa fb03 	bl	1aad4 <net_if_ipv6_addr_lookup>
	if (ifaddr && ifaddr->addr_type == NET_ADDR_AUTOCONF) {
   204ce:	4604      	mov	r4, r0
   204d0:	b118      	cbz	r0, 204da <handle_ra_input+0x3ae>
   204d2:	f890 3064 	ldrb.w	r3, [r0, #100]	; 0x64
   204d6:	2b01      	cmp	r3, #1
   204d8:	d052      	beq.n	20580 <handle_ra_input+0x454>
		if (prefix_info->valid_lifetime ==
   204da:	9b08      	ldr	r3, [sp, #32]
   204dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   204e0:	d072      	beq.n	205c8 <handle_ra_input+0x49c>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   204e2:	2201      	movs	r2, #1
   204e4:	a903      	add	r1, sp, #12
   204e6:	6970      	ldr	r0, [r6, #20]
   204e8:	f7fa fb6a 	bl	1abc0 <net_if_ipv6_addr_add>
   204ec:	e790      	b.n	20410 <handle_ra_input+0x2e4>
		if (lladdr->type == NET_LINK_IEEE802154) {
   204ee:	f898 3005 	ldrb.w	r3, [r8, #5]
   204f2:	2b01      	cmp	r3, #1
   204f4:	d1e2      	bne.n	204bc <handle_ra_input+0x390>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   204f6:	2300      	movs	r3, #0
			addr->s6_addr[11] = 0xff;
   204f8:	22ff      	movs	r2, #255	; 0xff
   204fa:	f88d 2017 	strb.w	r2, [sp, #23]
			addr->s6_addr[12] = 0xfe;
   204fe:	22fe      	movs	r2, #254	; 0xfe
   20500:	f88d 2018 	strb.w	r2, [sp, #24]
			addr->s6_addr[13] = 0;
   20504:	f88d 3019 	strb.w	r3, [sp, #25]
			addr->s6_addr[14] = lladdr->addr[0];
   20508:	6923      	ldr	r3, [r4, #16]
   2050a:	781b      	ldrb	r3, [r3, #0]
   2050c:	f88d 301a 	strb.w	r3, [sp, #26]
			addr->s6_addr[15] = lladdr->addr[1];
   20510:	6923      	ldr	r3, [r4, #16]
   20512:	785b      	ldrb	r3, [r3, #1]
   20514:	f88d 301b 	strb.w	r3, [sp, #27]
   20518:	e7d0      	b.n	204bc <handle_ra_input+0x390>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   2051a:	2203      	movs	r2, #3
   2051c:	6921      	ldr	r1, [r4, #16]
   2051e:	a805      	add	r0, sp, #20
   20520:	f7df fece 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   20524:	23ff      	movs	r3, #255	; 0xff
   20526:	f88d 3017 	strb.w	r3, [sp, #23]
		addr->s6_addr[12] = 0xfe;
   2052a:	23fe      	movs	r3, #254	; 0xfe
   2052c:	f88d 3018 	strb.w	r3, [sp, #24]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   20530:	6921      	ldr	r1, [r4, #16]
   20532:	2203      	movs	r2, #3
   20534:	4411      	add	r1, r2
   20536:	f10d 0019 	add.w	r0, sp, #25
   2053a:	f7df fec1 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   2053e:	f898 3005 	ldrb.w	r3, [r8, #5]
   20542:	2b02      	cmp	r3, #2
   20544:	d00a      	beq.n	2055c <handle_ra_input+0x430>
		if (lladdr->type == NET_LINK_ETHERNET) {
   20546:	f898 3005 	ldrb.w	r3, [r8, #5]
   2054a:	2b03      	cmp	r3, #3
   2054c:	d1b6      	bne.n	204bc <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2054e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20552:	f083 0302 	eor.w	r3, r3, #2
   20556:	f88d 3014 	strb.w	r3, [sp, #20]
   2055a:	e7af      	b.n	204bc <handle_ra_input+0x390>
			addr->s6_addr[8] ^= 0x02;
   2055c:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20560:	f083 0302 	eor.w	r3, r3, #2
   20564:	f88d 3014 	strb.w	r3, [sp, #20]
   20568:	e7ed      	b.n	20546 <handle_ra_input+0x41a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   2056a:	6921      	ldr	r1, [r4, #16]
   2056c:	a805      	add	r0, sp, #20
   2056e:	f7df fea7 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   20572:	f89d 3014 	ldrb.w	r3, [sp, #20]
   20576:	f083 0302 	eor.w	r3, r3, #2
   2057a:	f88d 3014 	strb.w	r3, [sp, #20]
   2057e:	e79d      	b.n	204bc <handle_ra_input+0x390>
		if (prefix_info->valid_lifetime ==
   20580:	f8dd 8020 	ldr.w	r8, [sp, #32]
   20584:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   20588:	d015      	beq.n	205b6 <handle_ra_input+0x48a>
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   2058a:	f5b8 5fe1 	cmp.w	r8, #7200	; 0x1c20
   2058e:	d80a      	bhi.n	205a6 <handle_ra_input+0x47a>
	return _timeout_remaining_get(&work->timeout);
   20590:	3020      	adds	r0, #32
   20592:	f008 ff79 	bl	29488 <_timeout_remaining_get>
	return k_delayed_work_remaining_get(work) / MSEC_PER_SEC;
   20596:	4a30      	ldr	r2, [pc, #192]	; (20658 <handle_ra_input+0x52c>)
   20598:	fb82 3200 	smull	r3, r2, r2, r0
   2059c:	17c3      	asrs	r3, r0, #31
   2059e:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
		if ((prefix_info->valid_lifetime > TWO_HOURS) ||
   205a2:	4598      	cmp	r8, r3
   205a4:	d90a      	bls.n	205bc <handle_ra_input+0x490>
			net_if_ipv6_addr_update_lifetime(ifaddr,
   205a6:	9908      	ldr	r1, [sp, #32]
   205a8:	4620      	mov	r0, r4
   205aa:	f7fa fafb 	bl	1aba4 <net_if_ipv6_addr_update_lifetime>
	ifaddr->is_infinite = is_infinite;
   205ae:	2300      	movs	r3, #0
   205b0:	f884 3067 	strb.w	r3, [r4, #103]	; 0x67
   205b4:	e72c      	b.n	20410 <handle_ra_input+0x2e4>
   205b6:	f880 3067 	strb.w	r3, [r0, #103]	; 0x67
   205ba:	e729      	b.n	20410 <handle_ra_input+0x2e4>
			net_if_ipv6_addr_update_lifetime(ifaddr, TWO_HOURS);
   205bc:	f44f 51e1 	mov.w	r1, #7200	; 0x1c20
   205c0:	4620      	mov	r0, r4
   205c2:	f7fa faef 	bl	1aba4 <net_if_ipv6_addr_update_lifetime>
   205c6:	e7f2      	b.n	205ae <handle_ra_input+0x482>
			net_if_ipv6_addr_add(net_pkt_iface(pkt),
   205c8:	2300      	movs	r3, #0
   205ca:	2201      	movs	r2, #1
   205cc:	a903      	add	r1, sp, #12
   205ce:	6970      	ldr	r0, [r6, #20]
   205d0:	f7fa faf6 	bl	1abc0 <net_if_ipv6_addr_add>
   205d4:	e71c      	b.n	20410 <handle_ra_input+0x2e4>
	return pkt->frags->data;
   205d6:	68b3      	ldr	r3, [r6, #8]
   205d8:	6899      	ldr	r1, [r3, #8]
	router = net_if_ipv6_router_lookup(net_pkt_iface(pkt),
   205da:	3108      	adds	r1, #8
   205dc:	6970      	ldr	r0, [r6, #20]
   205de:	f7fa fe7b 	bl	1b2d8 <net_if_ipv6_router_lookup>
	if (router) {
   205e2:	4603      	mov	r3, r0
   205e4:	b350      	cbz	r0, 2063c <handle_ra_input+0x510>
		if (!router_lifetime) {
   205e6:	f8bd 1052 	ldrh.w	r1, [sp, #82]	; 0x52
   205ea:	b321      	cbz	r1, 20636 <handle_ra_input+0x50a>
			if (nbr) {
   205ec:	b11f      	cbz	r7, 205f6 <handle_ra_input+0x4ca>
   205ee:	68fa      	ldr	r2, [r7, #12]
				net_ipv6_nbr_data(nbr)->is_router = true;
   205f0:	2001      	movs	r0, #1
   205f2:	f882 0069 	strb.w	r0, [r2, #105]	; 0x69
			net_if_ipv6_router_update_lifetime(router,
   205f6:	4618      	mov	r0, r3
   205f8:	f7fa fec6 	bl	1b388 <net_if_ipv6_router_update_lifetime>
	if (nbr && net_ipv6_nbr_data(nbr)->pending) {
   205fc:	b18f      	cbz	r7, 20622 <handle_ra_input+0x4f6>
   205fe:	68fb      	ldr	r3, [r7, #12]
   20600:	6818      	ldr	r0, [r3, #0]
   20602:	b170      	cbz	r0, 20622 <handle_ra_input+0x4f6>
		if (net_send_data(net_ipv6_nbr_data(nbr)->pending) < 0) {
   20604:	f7fa f818 	bl	1a638 <net_send_data>
   20608:	2800      	cmp	r0, #0
   2060a:	db20      	blt.n	2064e <handle_ra_input+0x522>
   2060c:	68fc      	ldr	r4, [r7, #12]
	k_delayed_work_cancel(&data->send_ns);
   2060e:	f104 003c 	add.w	r0, r4, #60	; 0x3c
   20612:	f008 ffdd 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   20616:	6820      	ldr	r0, [r4, #0]
   20618:	b118      	cbz	r0, 20622 <handle_ra_input+0x4f6>
		net_pkt_unref(data->pending);
   2061a:	f7fc fc0e 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   2061e:	2300      	movs	r3, #0
   20620:	6023      	str	r3, [r4, #0]
	return pkt->iface;
   20622:	6970      	ldr	r0, [r6, #20]
	k_delayed_work_cancel(&net_pkt_iface(pkt)->ipv6.rs_timer);
   20624:	f500 7018 	add.w	r0, r0, #608	; 0x260
   20628:	f008 ffd2 	bl	295d0 <k_delayed_work_cancel>
	net_pkt_unref(pkt);
   2062c:	4630      	mov	r0, r6
   2062e:	f7fc fc04 	bl	1ce3a <net_pkt_unref>
	return NET_OK;
   20632:	2000      	movs	r0, #0
   20634:	e5a2      	b.n	2017c <handle_ra_input+0x50>
			net_if_ipv6_router_rm(router);
   20636:	f7fa ff0b 	bl	1b450 <net_if_ipv6_router_rm>
   2063a:	e7df      	b.n	205fc <handle_ra_input+0x4d0>
	return pkt->frags->data;
   2063c:	68b3      	ldr	r3, [r6, #8]
   2063e:	6899      	ldr	r1, [r3, #8]
		net_if_ipv6_router_add(net_pkt_iface(pkt),
   20640:	f8bd 2052 	ldrh.w	r2, [sp, #82]	; 0x52
   20644:	3108      	adds	r1, #8
   20646:	6970      	ldr	r0, [r6, #20]
   20648:	f7fa feaa 	bl	1b3a0 <net_if_ipv6_router_add>
   2064c:	e7d6      	b.n	205fc <handle_ra_input+0x4d0>
   2064e:	68fb      	ldr	r3, [r7, #12]
			net_pkt_unref(net_ipv6_nbr_data(nbr)->pending);
   20650:	6818      	ldr	r0, [r3, #0]
   20652:	f7fc fbf2 	bl	1ce3a <net_pkt_unref>
   20656:	e7d9      	b.n	2060c <handle_ra_input+0x4e0>
   20658:	10624dd3 	.word	0x10624dd3

0002065c <handle_ns_input>:
{
   2065c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20660:	b0a5      	sub	sp, #148	; 0x94
   20662:	4604      	mov	r4, r0
	return net_buf_frags_len(pkt->frags);
   20664:	6883      	ldr	r3, [r0, #8]
	size_t bytes = 0;
   20666:	2200      	movs	r2, #0
   20668:	e002      	b.n	20670 <handle_ns_input+0x14>
		bytes += buf->len;
   2066a:	8999      	ldrh	r1, [r3, #12]
   2066c:	440a      	add	r2, r1
		buf = buf->frags;
   2066e:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   20670:	2b00      	cmp	r3, #0
   20672:	d1fa      	bne.n	2066a <handle_ns_input+0xe>
	u16_t total_len = net_pkt_get_len(pkt);
   20674:	b295      	uxth	r5, r2
	ns_hdr = net_icmpv6_get_ns_hdr(pkt, &nshdr);
   20676:	a90a      	add	r1, sp, #40	; 0x28
   20678:	4620      	mov	r0, r4
   2067a:	f7fd fe51 	bl	1e320 <net_icmpv6_get_ns_hdr>
   2067e:	4606      	mov	r6, r0
	net_stats.ipv6_nd.recv++;
   20680:	4aa6      	ldr	r2, [pc, #664]	; (2091c <handle_ns_input+0x2c0>)
   20682:	f8d2 3090 	ldr.w	r3, [r2, #144]	; 0x90
   20686:	3301      	adds	r3, #1
   20688:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
	if ((total_len < (sizeof(struct net_ipv6_hdr) +
   2068c:	2d3f      	cmp	r5, #63	; 0x3f
   2068e:	d904      	bls.n	2069a <handle_ns_input+0x3e>
	return pkt->frags->data;
   20690:	68a3      	ldr	r3, [r4, #8]
   20692:	689b      	ldr	r3, [r3, #8]
	    (NET_IPV6_HDR(pkt)->hop_limit != NET_IPV6_ND_HOP_LIMIT)) {
   20694:	79db      	ldrb	r3, [r3, #7]
			  sizeof(struct net_icmpv6_ns_hdr))) ||
   20696:	2bff      	cmp	r3, #255	; 0xff
   20698:	d002      	beq.n	206a0 <handle_ns_input+0x44>
	return addr->s6_addr[0] == 0xFF;
   2069a:	7933      	ldrb	r3, [r6, #4]
		if (net_is_ipv6_addr_mcast(&ns_hdr->tgt)) {
   2069c:	2bff      	cmp	r3, #255	; 0xff
   2069e:	d00a      	beq.n	206b6 <handle_ns_input+0x5a>
	pkt->ipv6_ext_opt_len = len;
   206a0:	2314      	movs	r3, #20
   206a2:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
	nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   206a6:	a90f      	add	r1, sp, #60	; 0x3c
   206a8:	4620      	mov	r0, r4
   206aa:	f7fd fe95 	bl	1e3d8 <net_icmpv6_get_nd_opt_hdr>
   206ae:	4607      	mov	r7, r0
	return net_buf_frags_len(pkt->frags);
   206b0:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   206b2:	2500      	movs	r5, #0
   206b4:	e00e      	b.n	206d4 <handle_ns_input+0x78>
			icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   206b6:	a908      	add	r1, sp, #32
   206b8:	4620      	mov	r0, r4
   206ba:	f7fd fcc2 	bl	1e042 <net_icmpv6_get_hdr>
			if (!icmp_hdr || icmp_hdr->code != 0) {
   206be:	2800      	cmp	r0, #0
   206c0:	f000 80b7 	beq.w	20832 <handle_ns_input+0x1d6>
   206c4:	7843      	ldrb	r3, [r0, #1]
   206c6:	2b00      	cmp	r3, #0
   206c8:	f040 80b3 	bne.w	20832 <handle_ns_input+0x1d6>
   206cc:	e7e8      	b.n	206a0 <handle_ns_input+0x44>
		bytes += buf->len;
   206ce:	899a      	ldrh	r2, [r3, #12]
   206d0:	4415      	add	r5, r2
		buf = buf->frags;
   206d2:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   206d4:	2b00      	cmp	r3, #0
   206d6:	d1fa      	bne.n	206ce <handle_ns_input+0x72>
	left_len = net_pkt_get_len(pkt) - (sizeof(struct net_ipv6_hdr) +
   206d8:	3d2c      	subs	r5, #44	; 0x2c
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   206da:	e042      	b.n	20762 <handle_ns_input+0x106>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   206dc:	2100      	movs	r1, #0
			if (net_is_ipv6_addr_unspecified(
   206de:	2900      	cmp	r1, #0
   206e0:	f040 80a7 	bne.w	20832 <handle_ns_input+0x1d6>
					   net_pkt_ip_hdr_len(pkt) +
   206e4:	f894 1033 	ldrb.w	r1, [r4, #51]	; 0x33
					   net_pkt_ipv6_ext_len(pkt) +
   206e8:	f894 003b 	ldrb.w	r0, [r4, #59]	; 0x3b
					   net_pkt_ip_hdr_len(pkt) +
   206ec:	4401      	add	r1, r0
					   sizeof(struct net_icmp_hdr) +
   206ee:	4411      	add	r1, r2
   206f0:	b289      	uxth	r1, r1
			handle_ns_neighbor(pkt, nd_opt_hdr->len,
   206f2:	3106      	adds	r1, #6
	lladdr.len = 8 * ll_len - 2;
   206f4:	00db      	lsls	r3, r3, #3
   206f6:	b2db      	uxtb	r3, r3
   206f8:	3b02      	subs	r3, #2
   206fa:	b2db      	uxtb	r3, r3
   206fc:	f88d 3019 	strb.w	r3, [sp, #25]
	frag = net_frag_read(pkt->frags, sllao_offset,
   20700:	f10d 021a 	add.w	r2, sp, #26
   20704:	9200      	str	r2, [sp, #0]
   20706:	f10d 0216 	add.w	r2, sp, #22
   2070a:	b289      	uxth	r1, r1
   2070c:	68a0      	ldr	r0, [r4, #8]
   2070e:	f7fc fd12 	bl	1d136 <net_frag_read>
	if (!frag && pos == 0xffff) {
   20712:	2800      	cmp	r0, #0
   20714:	d042      	beq.n	2079c <handle_ns_input+0x140>
	nbr_lladdr.len = lladdr.len;
   20716:	f89d 3019 	ldrb.w	r3, [sp, #25]
   2071a:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24
	nbr_lladdr.addr = lladdr.addr;
   2071e:	f10d 021a 	add.w	r2, sp, #26
   20722:	9208      	str	r2, [sp, #32]
	if (net_pkt_ll_src(pkt)->len < nbr_lladdr.len) {
   20724:	f894 2024 	ldrb.w	r2, [r4, #36]	; 0x24
   20728:	4293      	cmp	r3, r2
   2072a:	d901      	bls.n	20730 <handle_ns_input+0xd4>
		nbr_lladdr.len = net_pkt_ll_src(pkt)->len;
   2072c:	f88d 2024 	strb.w	r2, [sp, #36]	; 0x24
	return pkt->frags->data;
   20730:	68a3      	ldr	r3, [r4, #8]
   20732:	6899      	ldr	r1, [r3, #8]
	return net_ipv6_nbr_add(net_pkt_iface(pkt), &NET_IPV6_HDR(pkt)->src,
   20734:	2300      	movs	r3, #0
   20736:	9300      	str	r3, [sp, #0]
   20738:	aa08      	add	r2, sp, #32
   2073a:	3108      	adds	r1, #8
   2073c:	6960      	ldr	r0, [r4, #20]
   2073e:	f7ff fc91 	bl	20064 <net_ipv6_nbr_add>
	return pkt->ipv6_ext_opt_len;
   20742:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
					     (nd_opt_hdr->len << 3));
   20746:	787b      	ldrb	r3, [r7, #1]
   20748:	00db      	lsls	r3, r3, #3
   2074a:	b2db      	uxtb	r3, r3
		net_pkt_set_ipv6_ext_opt_len(pkt,
   2074c:	4413      	add	r3, r2
   2074e:	b2db      	uxtb	r3, r3
	pkt->ipv6_ext_opt_len = len;
   20750:	f884 303c 	strb.w	r3, [r4, #60]	; 0x3c
		if (prev_opt_len >= net_pkt_ipv6_ext_opt_len(pkt)) {
   20754:	429a      	cmp	r2, r3
   20756:	d26c      	bcs.n	20832 <handle_ns_input+0x1d6>
		nd_opt_hdr = net_icmpv6_get_nd_opt_hdr(pkt, &ndopthdr);
   20758:	a90f      	add	r1, sp, #60	; 0x3c
   2075a:	4620      	mov	r0, r4
   2075c:	f7fd fe3c 	bl	1e3d8 <net_icmpv6_get_nd_opt_hdr>
   20760:	4607      	mov	r7, r0
	while (nd_opt_hdr && net_pkt_ipv6_ext_opt_len(pkt) < left_len) {
   20762:	b317      	cbz	r7, 207aa <handle_ns_input+0x14e>
	return pkt->ipv6_ext_opt_len;
   20764:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   20768:	4295      	cmp	r5, r2
   2076a:	d91e      	bls.n	207aa <handle_ns_input+0x14e>
		if (!nd_opt_hdr->len) {
   2076c:	787b      	ldrb	r3, [r7, #1]
   2076e:	b1e3      	cbz	r3, 207aa <handle_ns_input+0x14e>
		switch (nd_opt_hdr->type) {
   20770:	7839      	ldrb	r1, [r7, #0]
   20772:	2901      	cmp	r1, #1
   20774:	d1e5      	bne.n	20742 <handle_ns_input+0xe6>
	return pkt->frags->data;
   20776:	68a1      	ldr	r1, [r4, #8]
   20778:	6889      	ldr	r1, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2077a:	6888      	ldr	r0, [r1, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2077c:	2800      	cmp	r0, #0
   2077e:	d1ad      	bne.n	206dc <handle_ns_input+0x80>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20780:	68c8      	ldr	r0, [r1, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20782:	b928      	cbnz	r0, 20790 <handle_ns_input+0x134>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20784:	6908      	ldr	r0, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20786:	b928      	cbnz	r0, 20794 <handle_ns_input+0x138>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20788:	6949      	ldr	r1, [r1, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2078a:	b129      	cbz	r1, 20798 <handle_ns_input+0x13c>
   2078c:	2100      	movs	r1, #0
   2078e:	e7a6      	b.n	206de <handle_ns_input+0x82>
   20790:	2100      	movs	r1, #0
   20792:	e7a4      	b.n	206de <handle_ns_input+0x82>
   20794:	2100      	movs	r1, #0
   20796:	e7a2      	b.n	206de <handle_ns_input+0x82>
   20798:	2101      	movs	r1, #1
   2079a:	e7a0      	b.n	206de <handle_ns_input+0x82>
	if (!frag && pos == 0xffff) {
   2079c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   207a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
   207a4:	429a      	cmp	r2, r3
   207a6:	d1b6      	bne.n	20716 <handle_ns_input+0xba>
   207a8:	e7cb      	b.n	20742 <handle_ns_input+0xe6>
	return pkt->iface;
   207aa:	f8d4 8014 	ldr.w	r8, [r4, #20]
	ifaddr = net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   207ae:	f106 0904 	add.w	r9, r6, #4
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   207b2:	2500      	movs	r5, #0
   207b4:	e001      	b.n	207ba <handle_ns_input+0x15e>
		if (net_is_ipv6_prefix(addr->s6_addr,
   207b6:	b9ef      	cbnz	r7, 207f4 <handle_ns_input+0x198>
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   207b8:	3501      	adds	r5, #1
   207ba:	2d02      	cmp	r5, #2
   207bc:	dc21      	bgt.n	20802 <handle_ns_input+0x1a6>
		if (!iface->ipv6.unicast[i].is_used ||
   207be:	236c      	movs	r3, #108	; 0x6c
   207c0:	fb03 8305 	mla	r3, r3, r5, r8
   207c4:	f893 7094 	ldrb.w	r7, [r3, #148]	; 0x94
   207c8:	2f00      	cmp	r7, #0
   207ca:	d0f5      	beq.n	207b8 <handle_ns_input+0x15c>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   207cc:	236c      	movs	r3, #108	; 0x6c
   207ce:	fb03 8305 	mla	r3, r3, r5, r8
   207d2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   207d4:	2b0a      	cmp	r3, #10
   207d6:	d1ef      	bne.n	207b8 <handle_ns_input+0x15c>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   207d8:	216c      	movs	r1, #108	; 0x6c
   207da:	fb01 f105 	mul.w	r1, r1, r5
   207de:	3120      	adds	r1, #32
   207e0:	4441      	add	r1, r8
	if (memcmp(addr1, addr2, bytes)) {
   207e2:	2210      	movs	r2, #16
   207e4:	4411      	add	r1, r2
   207e6:	4648      	mov	r0, r9
   207e8:	f009 f842 	bl	29870 <memcmp>
   207ec:	2800      	cmp	r0, #0
   207ee:	d0e2      	beq.n	207b6 <handle_ns_input+0x15a>
		return false;
   207f0:	2700      	movs	r7, #0
   207f2:	e7e0      	b.n	207b6 <handle_ns_input+0x15a>
			return &iface->ipv6.unicast[i];
   207f4:	236c      	movs	r3, #108	; 0x6c
   207f6:	fb03 f505 	mul.w	r5, r3, r5
   207fa:	3520      	adds	r5, #32
   207fc:	4445      	add	r5, r8
   207fe:	350c      	adds	r5, #12
   20800:	e000      	b.n	20804 <handle_ns_input+0x1a8>
	return NULL;
   20802:	2500      	movs	r5, #0
	if (!ifaddr) {
   20804:	b1ad      	cbz	r5, 20832 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   20806:	68a3      	ldr	r3, [r4, #8]
   20808:	6898      	ldr	r0, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2080a:	6883      	ldr	r3, [r0, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2080c:	b93b      	cbnz	r3, 2081e <handle_ns_input+0x1c2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2080e:	68c3      	ldr	r3, [r0, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20810:	b9cb      	cbnz	r3, 20846 <handle_ns_input+0x1ea>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20812:	6903      	ldr	r3, [r0, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20814:	b9cb      	cbnz	r3, 2084a <handle_ns_input+0x1ee>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20816:	6943      	ldr	r3, [r0, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20818:	b1cb      	cbz	r3, 2084e <handle_ns_input+0x1f2>
   2081a:	2300      	movs	r3, #0
   2081c:	e000      	b.n	20820 <handle_ns_input+0x1c4>
   2081e:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&NET_IPV6_HDR(pkt)->src)) {
   20820:	2b00      	cmp	r3, #0
   20822:	d07d      	beq.n	20920 <handle_ns_input+0x2c4>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20824:	6982      	ldr	r2, [r0, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20826:	f240 23ff 	movw	r3, #767	; 0x2ff
   2082a:	429a      	cmp	r2, r3
   2082c:	d011      	beq.n	20852 <handle_ns_input+0x1f6>
   2082e:	2300      	movs	r3, #0
		if (!net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20830:	bb0b      	cbnz	r3, 20876 <handle_ns_input+0x21a>
	net_stats.ipv6_nd.drop++;
   20832:	4a3a      	ldr	r2, [pc, #232]	; (2091c <handle_ns_input+0x2c0>)
   20834:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20838:	3301      	adds	r3, #1
   2083a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return NET_DROP;
   2083e:	2002      	movs	r0, #2
}
   20840:	b025      	add	sp, #148	; 0x94
   20842:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20846:	2300      	movs	r3, #0
   20848:	e7ea      	b.n	20820 <handle_ns_input+0x1c4>
   2084a:	2300      	movs	r3, #0
   2084c:	e7e8      	b.n	20820 <handle_ns_input+0x1c4>
   2084e:	2301      	movs	r3, #1
   20850:	e7e6      	b.n	20820 <handle_ns_input+0x1c4>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20852:	69c3      	ldr	r3, [r0, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20854:	b95b      	cbnz	r3, 2086e <handle_ns_input+0x212>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20856:	6a03      	ldr	r3, [r0, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20858:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   2085c:	d001      	beq.n	20862 <handle_ns_input+0x206>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2085e:	2300      	movs	r3, #0
   20860:	e7e6      	b.n	20830 <handle_ns_input+0x1d4>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   20862:	6a43      	ldr	r3, [r0, #36]	; 0x24
   20864:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20866:	2bff      	cmp	r3, #255	; 0xff
   20868:	d003      	beq.n	20872 <handle_ns_input+0x216>
   2086a:	2300      	movs	r3, #0
   2086c:	e7e0      	b.n	20830 <handle_ns_input+0x1d4>
   2086e:	2300      	movs	r3, #0
   20870:	e7de      	b.n	20830 <handle_ns_input+0x1d4>
   20872:	2301      	movs	r3, #1
   20874:	e7dc      	b.n	20830 <handle_ns_input+0x1d4>
		if (ifaddr->addr_state == NET_ADDR_TENTATIVE) {
   20876:	f995 3065 	ldrsb.w	r3, [r5, #101]	; 0x65
   2087a:	b94b      	cbnz	r3, 20890 <handle_ns_input+0x234>
	return pkt->iface;
   2087c:	6960      	ldr	r0, [r4, #20]
			dad_failed(net_pkt_iface(pkt),
   2087e:	1d29      	adds	r1, r5, #4
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   20880:	88aa      	ldrh	r2, [r5, #4]
	if (net_is_ipv6_ll_addr(addr)) {
   20882:	f248 03fe 	movw	r3, #33022	; 0x80fe
   20886:	429a      	cmp	r2, r3
   20888:	d0d3      	beq.n	20832 <handle_ns_input+0x1d6>
	net_if_ipv6_dad_failed(iface, addr);
   2088a:	f7fa fb51 	bl	1af30 <net_if_ipv6_dad_failed>
   2088e:	e7d0      	b.n	20832 <handle_ns_input+0x1d6>
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20890:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   20894:	7603      	strb	r3, [r0, #24]
   20896:	2300      	movs	r3, #0
   20898:	2202      	movs	r2, #2
   2089a:	7642      	strb	r2, [r0, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   2089c:	7683      	strb	r3, [r0, #26]
   2089e:	76c3      	strb	r3, [r0, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   208a0:	7703      	strb	r3, [r0, #28]
   208a2:	7743      	strb	r3, [r0, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   208a4:	7783      	strb	r3, [r0, #30]
   208a6:	77c3      	strb	r3, [r0, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   208a8:	f880 3020 	strb.w	r3, [r0, #32]
   208ac:	f880 3021 	strb.w	r3, [r0, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   208b0:	f880 3022 	strb.w	r3, [r0, #34]	; 0x22
   208b4:	f880 3023 	strb.w	r3, [r0, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   208b8:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
   208bc:	f880 3025 	strb.w	r3, [r0, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   208c0:	f880 3026 	strb.w	r3, [r0, #38]	; 0x26
   208c4:	2301      	movs	r3, #1
   208c6:	f880 3027 	strb.w	r3, [r0, #39]	; 0x27
	return pkt->frags->data;
   208ca:	68a3      	ldr	r3, [r4, #8]
   208cc:	f8d3 8008 	ldr.w	r8, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   208d0:	f108 0118 	add.w	r1, r8, #24
   208d4:	6960      	ldr	r0, [r4, #20]
   208d6:	f7fa fe15 	bl	1b504 <net_if_ipv6_select_src_addr>
   208da:	4603      	mov	r3, r0
   208dc:	ae10      	add	r6, sp, #64	; 0x40
   208de:	6800      	ldr	r0, [r0, #0]
   208e0:	6859      	ldr	r1, [r3, #4]
   208e2:	689a      	ldr	r2, [r3, #8]
   208e4:	68db      	ldr	r3, [r3, #12]
   208e6:	c60f      	stmia	r6!, {r0, r1, r2, r3}
   208e8:	ae10      	add	r6, sp, #64	; 0x40
   208ea:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   208ec:	f8c8 0008 	str.w	r0, [r8, #8]
   208f0:	f8c8 100c 	str.w	r1, [r8, #12]
   208f4:	f8c8 2010 	str.w	r2, [r8, #16]
   208f8:	f8c8 3014 	str.w	r3, [r8, #20]
		flags = NET_ICMPV6_NA_FLAG_OVERRIDE;
   208fc:	2320      	movs	r3, #32
   208fe:	68a2      	ldr	r2, [r4, #8]
   20900:	6891      	ldr	r1, [r2, #8]
	ret = net_ipv6_send_na(net_pkt_iface(pkt),
   20902:	9300      	str	r3, [sp, #0]
   20904:	1d2b      	adds	r3, r5, #4
   20906:	f101 0218 	add.w	r2, r1, #24
   2090a:	3108      	adds	r1, #8
   2090c:	6960      	ldr	r0, [r4, #20]
   2090e:	f7fe ff69 	bl	1f7e4 <net_ipv6_send_na>
	if (!ret) {
   20912:	2800      	cmp	r0, #0
   20914:	f000 80b5 	beq.w	20a82 <handle_ns_input+0x426>
	return NET_DROP;
   20918:	2002      	movs	r0, #2
   2091a:	e791      	b.n	20840 <handle_ns_input+0x1e4>
   2091c:	20002ab8 	.word	0x20002ab8
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20920:	2100      	movs	r1, #0
   20922:	3008      	adds	r0, #8
   20924:	f7fa f8d6 	bl	1aad4 <net_if_ipv6_addr_lookup>
	if (net_is_my_ipv6_addr(&NET_IPV6_HDR(pkt)->src)) {
   20928:	4607      	mov	r7, r0
   2092a:	2800      	cmp	r0, #0
   2092c:	d181      	bne.n	20832 <handle_ns_input+0x1d6>
   2092e:	68a3      	ldr	r3, [r4, #8]
   20930:	f8d3 8008 	ldr.w	r8, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   20934:	f8d8 2018 	ldr.w	r2, [r8, #24]
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   20938:	f240 23ff 	movw	r3, #767	; 0x2ff
   2093c:	429a      	cmp	r2, r3
   2093e:	d02b      	beq.n	20998 <handle_ns_input+0x33c>
   20940:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_solicited_node(&NET_IPV6_HDR(pkt)->dst)) {
   20942:	9303      	str	r3, [sp, #12]
   20944:	2b00      	cmp	r3, #0
   20946:	d03c      	beq.n	209c2 <handle_ns_input+0x366>
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20948:	af14      	add	r7, sp, #80	; 0x50
   2094a:	4643      	mov	r3, r8
   2094c:	f853 0f08 	ldr.w	r0, [r3, #8]!
   20950:	6859      	ldr	r1, [r3, #4]
   20952:	689a      	ldr	r2, [r3, #8]
   20954:	68db      	ldr	r3, [r3, #12]
   20956:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20958:	af14      	add	r7, sp, #80	; 0x50
   2095a:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   2095c:	f8c8 0018 	str.w	r0, [r8, #24]
   20960:	f8c8 101c 	str.w	r1, [r8, #28]
   20964:	f8c8 2020 	str.w	r2, [r8, #32]
   20968:	f8c8 3024 	str.w	r3, [r8, #36]	; 0x24
   2096c:	68a3      	ldr	r3, [r4, #8]
   2096e:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   20972:	af18      	add	r7, sp, #96	; 0x60
   20974:	f856 0f04 	ldr.w	r0, [r6, #4]!
   20978:	6871      	ldr	r1, [r6, #4]
   2097a:	68b2      	ldr	r2, [r6, #8]
   2097c:	68f3      	ldr	r3, [r6, #12]
   2097e:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20980:	ae18      	add	r6, sp, #96	; 0x60
   20982:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20984:	f8ce 0008 	str.w	r0, [lr, #8]
   20988:	f8ce 100c 	str.w	r1, [lr, #12]
   2098c:	f8ce 2010 	str.w	r2, [lr, #16]
   20990:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   20994:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   20996:	e7b2      	b.n	208fe <handle_ns_input+0x2a2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   20998:	f8d8 301c 	ldr.w	r3, [r8, #28]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == htonl(0xff020000) &&
   2099c:	b96b      	cbnz	r3, 209ba <handle_ns_input+0x35e>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   2099e:	f8d8 3020 	ldr.w	r3, [r8, #32]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00000000 &&
   209a2:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
   209a6:	d001      	beq.n	209ac <handle_ns_input+0x350>
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   209a8:	2300      	movs	r3, #0
   209aa:	e7ca      	b.n	20942 <handle_ns_input+0x2e6>
		((UNALIGNED_GET(&addr->s6_addr32[3]) & htonl(0xff000000)) ==
   209ac:	f8d8 3024 	ldr.w	r3, [r8, #36]	; 0x24
   209b0:	b2db      	uxtb	r3, r3
		UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0x00000001) &&
   209b2:	2bff      	cmp	r3, #255	; 0xff
   209b4:	d003      	beq.n	209be <handle_ns_input+0x362>
   209b6:	2300      	movs	r3, #0
   209b8:	e7c3      	b.n	20942 <handle_ns_input+0x2e6>
   209ba:	2300      	movs	r3, #0
   209bc:	e7c1      	b.n	20942 <handle_ns_input+0x2e6>
   209be:	2301      	movs	r3, #1
   209c0:	e7bf      	b.n	20942 <handle_ns_input+0x2e6>
	return pkt->iface;
   209c2:	f8d4 a014 	ldr.w	sl, [r4, #20]
	if (net_if_ipv6_addr_lookup_by_iface(net_pkt_iface(pkt),
   209c6:	f108 0818 	add.w	r8, r8, #24
	for (i = 0; i < NET_IF_MAX_IPV6_ADDR; i++) {
   209ca:	f04f 0900 	mov.w	r9, #0
   209ce:	e004      	b.n	209da <handle_ns_input+0x37e>
		return false;
   209d0:	f8dd b00c 	ldr.w	fp, [sp, #12]
   209d4:	e01e      	b.n	20a14 <handle_ns_input+0x3b8>
   209d6:	f109 0901 	add.w	r9, r9, #1
   209da:	f1b9 0f02 	cmp.w	r9, #2
   209de:	dc22      	bgt.n	20a26 <handle_ns_input+0x3ca>
		if (!iface->ipv6.unicast[i].is_used ||
   209e0:	236c      	movs	r3, #108	; 0x6c
   209e2:	fb03 a309 	mla	r3, r3, r9, sl
   209e6:	f893 b094 	ldrb.w	fp, [r3, #148]	; 0x94
   209ea:	f1bb 0f00 	cmp.w	fp, #0
   209ee:	d0f2      	beq.n	209d6 <handle_ns_input+0x37a>
		    iface->ipv6.unicast[i].address.family != AF_INET6) {
   209f0:	236c      	movs	r3, #108	; 0x6c
   209f2:	fb03 a309 	mla	r3, r3, r9, sl
   209f6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
		if (!iface->ipv6.unicast[i].is_used ||
   209f8:	2b0a      	cmp	r3, #10
   209fa:	d1ec      	bne.n	209d6 <handle_ns_input+0x37a>
			iface->ipv6.unicast[i].address.in6_addr.s6_addr,
   209fc:	216c      	movs	r1, #108	; 0x6c
   209fe:	fb01 f109 	mul.w	r1, r1, r9
   20a02:	3120      	adds	r1, #32
   20a04:	4451      	add	r1, sl
	if (memcmp(addr1, addr2, bytes)) {
   20a06:	2210      	movs	r2, #16
   20a08:	4411      	add	r1, r2
   20a0a:	4640      	mov	r0, r8
   20a0c:	f008 ff30 	bl	29870 <memcmp>
   20a10:	2800      	cmp	r0, #0
   20a12:	d1dd      	bne.n	209d0 <handle_ns_input+0x374>
		if (net_is_ipv6_prefix(addr->s6_addr,
   20a14:	f1bb 0f00 	cmp.w	fp, #0
   20a18:	d0dd      	beq.n	209d6 <handle_ns_input+0x37a>
			return &iface->ipv6.unicast[i];
   20a1a:	276c      	movs	r7, #108	; 0x6c
   20a1c:	fb07 f709 	mul.w	r7, r7, r9
   20a20:	3720      	adds	r7, #32
   20a22:	4457      	add	r7, sl
   20a24:	370c      	adds	r7, #12
   20a26:	2f00      	cmp	r7, #0
   20a28:	f43f af03 	beq.w	20832 <handle_ns_input+0x1d6>
	return pkt->frags->data;
   20a2c:	68a3      	ldr	r3, [r4, #8]
   20a2e:	f8d3 c008 	ldr.w	ip, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->dst,
   20a32:	af1c      	add	r7, sp, #112	; 0x70
   20a34:	4663      	mov	r3, ip
   20a36:	f853 0f08 	ldr.w	r0, [r3, #8]!
   20a3a:	6859      	ldr	r1, [r3, #4]
   20a3c:	689a      	ldr	r2, [r3, #8]
   20a3e:	68db      	ldr	r3, [r3, #12]
   20a40:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20a42:	af1c      	add	r7, sp, #112	; 0x70
   20a44:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   20a46:	f8cc 0018 	str.w	r0, [ip, #24]
   20a4a:	f8cc 101c 	str.w	r1, [ip, #28]
   20a4e:	f8cc 2020 	str.w	r2, [ip, #32]
   20a52:	f8cc 3024 	str.w	r3, [ip, #36]	; 0x24
   20a56:	68a3      	ldr	r3, [r4, #8]
   20a58:	f8d3 e008 	ldr.w	lr, [r3, #8]
		net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src, &ns_hdr->tgt);
   20a5c:	af20      	add	r7, sp, #128	; 0x80
   20a5e:	f856 0f04 	ldr.w	r0, [r6, #4]!
   20a62:	6871      	ldr	r1, [r6, #4]
   20a64:	68b2      	ldr	r2, [r6, #8]
   20a66:	68f3      	ldr	r3, [r6, #12]
   20a68:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   20a6a:	ae20      	add	r6, sp, #128	; 0x80
   20a6c:	ce0f      	ldmia	r6!, {r0, r1, r2, r3}
   20a6e:	f8ce 0008 	str.w	r0, [lr, #8]
   20a72:	f8ce 100c 	str.w	r1, [lr, #12]
   20a76:	f8ce 2010 	str.w	r2, [lr, #16]
   20a7a:	f8ce 3014 	str.w	r3, [lr, #20]
		flags = NET_ICMPV6_NA_FLAG_SOLICITED |
   20a7e:	2360      	movs	r3, #96	; 0x60
		goto send_na;
   20a80:	e73d      	b.n	208fe <handle_ns_input+0x2a2>
		net_pkt_unref(pkt);
   20a82:	4620      	mov	r0, r4
   20a84:	f7fc f9d9 	bl	1ce3a <net_pkt_unref>
		return NET_OK;
   20a88:	2000      	movs	r0, #0
   20a8a:	e6d9      	b.n	20840 <handle_ns_input+0x1e4>

00020a8c <nd_reachable_timeout>:
{
   20a8c:	b530      	push	{r4, r5, lr}
   20a8e:	b083      	sub	sp, #12
	struct net_ipv6_nbr_data *data = CONTAINER_OF(work,
   20a90:	f1a0 0514 	sub.w	r5, r0, #20
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20a94:	2300      	movs	r3, #0
   20a96:	2b07      	cmp	r3, #7
   20a98:	dc07      	bgt.n	20aaa <nd_reachable_timeout+0x1e>
	return &net_neighbor_pool[idx].nbr;
   20a9a:	4c47      	ldr	r4, [pc, #284]	; (20bb8 <nd_reachable_timeout+0x12c>)
   20a9c:	eb04 14c3 	add.w	r4, r4, r3, lsl #7
		if (nbr->data == (u8_t *)data) {
   20aa0:	68e2      	ldr	r2, [r4, #12]
   20aa2:	4295      	cmp	r5, r2
   20aa4:	d002      	beq.n	20aac <nd_reachable_timeout+0x20>
	for (i = 0; i < CONFIG_NET_IPV6_MAX_NEIGHBORS; i++) {
   20aa6:	3301      	adds	r3, #1
   20aa8:	e7f5      	b.n	20a96 <nd_reachable_timeout+0xa>
	return NULL;
   20aaa:	2400      	movs	r4, #0
	if (!data || !nbr) {
   20aac:	b38d      	cbz	r5, 20b12 <nd_reachable_timeout+0x86>
   20aae:	b384      	cbz	r4, 20b12 <nd_reachable_timeout+0x86>
   20ab0:	4603      	mov	r3, r0
	switch (data->state) {
   20ab2:	f890 2050 	ldrb.w	r2, [r0, #80]	; 0x50
   20ab6:	2a04      	cmp	r2, #4
   20ab8:	d82b      	bhi.n	20b12 <nd_reachable_timeout+0x86>
   20aba:	e8df f002 	tbb	[pc, r2]
   20abe:	2703      	.short	0x2703
   20ac0:	3f2c      	.short	0x3f2c
   20ac2:	45          	.byte	0x45
   20ac3:	00          	.byte	0x00
		if (data->ns_count >= MAX_MULTICAST_SOLICIT) {
   20ac4:	f890 2054 	ldrb.w	r2, [r0, #84]	; 0x54
   20ac8:	2a02      	cmp	r2, #2
   20aca:	d912      	bls.n	20af2 <nd_reachable_timeout+0x66>
   20acc:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20ace:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20ad2:	f008 fd7d 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   20ad6:	6828      	ldr	r0, [r5, #0]
   20ad8:	b118      	cbz	r0, 20ae2 <nd_reachable_timeout+0x56>
		net_pkt_unref(data->pending);
   20ada:	f7fc f9ae 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   20ade:	2300      	movs	r3, #0
   20ae0:	602b      	str	r3, [r5, #0]
   20ae2:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   20ae4:	3014      	adds	r0, #20
   20ae6:	f008 fd73 	bl	295d0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20aea:	4620      	mov	r0, r4
   20aec:	f7fd ffa6 	bl	1ea3c <net_nbr_unref>
   20af0:	e00f      	b.n	20b12 <nd_reachable_timeout+0x86>
			data->ns_count++;
   20af2:	3201      	adds	r2, #1
   20af4:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   20af8:	68a0      	ldr	r0, [r4, #8]
   20afa:	2100      	movs	r1, #0
   20afc:	9101      	str	r1, [sp, #4]
   20afe:	3b10      	subs	r3, #16
   20b00:	9300      	str	r3, [sp, #0]
   20b02:	460b      	mov	r3, r1
   20b04:	460a      	mov	r2, r1
   20b06:	f7ff f927 	bl	1fd58 <net_ipv6_send_ns>
   20b0a:	e002      	b.n	20b12 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_STALE;
   20b0c:	2202      	movs	r2, #2
   20b0e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
}
   20b12:	b003      	add	sp, #12
   20b14:	bd30      	pop	{r4, r5, pc}
   20b16:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20b18:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20b1c:	f008 fd58 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   20b20:	6828      	ldr	r0, [r5, #0]
   20b22:	b118      	cbz	r0, 20b2c <nd_reachable_timeout+0xa0>
		net_pkt_unref(data->pending);
   20b24:	f7fc f989 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   20b28:	2300      	movs	r3, #0
   20b2a:	602b      	str	r3, [r5, #0]
   20b2c:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   20b2e:	3014      	adds	r0, #20
   20b30:	f008 fd4e 	bl	295d0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20b34:	4620      	mov	r0, r4
   20b36:	f7fd ff81 	bl	1ea3c <net_nbr_unref>
   20b3a:	e7ea      	b.n	20b12 <nd_reachable_timeout+0x86>
		data->state = NET_IPV6_NBR_STATE_PROBE;
   20b3c:	2204      	movs	r2, #4
   20b3e:	f880 2050 	strb.w	r2, [r0, #80]	; 0x50
		data->ns_count = 0;
   20b42:	2200      	movs	r2, #0
   20b44:	f880 2054 	strb.w	r2, [r0, #84]	; 0x54
		if (data->ns_count >= MAX_UNICAST_SOLICIT) {
   20b48:	f893 2054 	ldrb.w	r2, [r3, #84]	; 0x54
   20b4c:	2a02      	cmp	r2, #2
   20b4e:	d91f      	bls.n	20b90 <nd_reachable_timeout+0x104>
			router = net_if_ipv6_router_lookup(nbr->iface,
   20b50:	f1a3 0110 	sub.w	r1, r3, #16
   20b54:	68a0      	ldr	r0, [r4, #8]
   20b56:	f7fa fbbf 	bl	1b2d8 <net_if_ipv6_router_lookup>
			if (router && !router->is_infinite) {
   20b5a:	2800      	cmp	r0, #0
   20b5c:	d0d9      	beq.n	20b12 <nd_reachable_timeout+0x86>
   20b5e:	f890 2042 	ldrb.w	r2, [r0, #66]	; 0x42
   20b62:	2a00      	cmp	r2, #0
   20b64:	d1d5      	bne.n	20b12 <nd_reachable_timeout+0x86>
				net_if_ipv6_router_rm(router);
   20b66:	f7fa fc73 	bl	1b450 <net_if_ipv6_router_rm>
   20b6a:	68e5      	ldr	r5, [r4, #12]
	k_delayed_work_cancel(&data->send_ns);
   20b6c:	f105 003c 	add.w	r0, r5, #60	; 0x3c
   20b70:	f008 fd2e 	bl	295d0 <k_delayed_work_cancel>
	if (data->pending) {
   20b74:	6828      	ldr	r0, [r5, #0]
   20b76:	b118      	cbz	r0, 20b80 <nd_reachable_timeout+0xf4>
		net_pkt_unref(data->pending);
   20b78:	f7fc f95f 	bl	1ce3a <net_pkt_unref>
		data->pending = NULL;
   20b7c:	2300      	movs	r3, #0
   20b7e:	602b      	str	r3, [r5, #0]
   20b80:	68e0      	ldr	r0, [r4, #12]
	k_delayed_work_cancel(&net_ipv6_nbr_data(nbr)->reachable);
   20b82:	3014      	adds	r0, #20
   20b84:	f008 fd24 	bl	295d0 <k_delayed_work_cancel>
	net_nbr_unref(nbr);
   20b88:	4620      	mov	r0, r4
   20b8a:	f7fd ff57 	bl	1ea3c <net_nbr_unref>
   20b8e:	e7c0      	b.n	20b12 <nd_reachable_timeout+0x86>
			data->ns_count++;
   20b90:	3201      	adds	r2, #1
   20b92:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
			net_ipv6_send_ns(nbr->iface, NULL, NULL, NULL,
   20b96:	68a0      	ldr	r0, [r4, #8]
   20b98:	2100      	movs	r1, #0
   20b9a:	9101      	str	r1, [sp, #4]
   20b9c:	3b10      	subs	r3, #16
   20b9e:	9300      	str	r3, [sp, #0]
   20ba0:	460b      	mov	r3, r1
   20ba2:	460a      	mov	r2, r1
   20ba4:	f7ff f8d8 	bl	1fd58 <net_ipv6_send_ns>
   20ba8:	68e1      	ldr	r1, [r4, #12]
	return k_delayed_work_submit_to_queue(&k_sys_work_q, work, delay);
   20baa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   20bae:	3114      	adds	r1, #20
   20bb0:	4802      	ldr	r0, [pc, #8]	; (20bbc <nd_reachable_timeout+0x130>)
   20bb2:	f008 fd67 	bl	29684 <k_delayed_work_submit_to_queue>
   20bb6:	e7ac      	b.n	20b12 <nd_reachable_timeout+0x86>
   20bb8:	2000be98 	.word	0x2000be98
   20bbc:	20002bd8 	.word	0x20002bd8

00020bc0 <net_ipv6_start_dad>:
{
   20bc0:	b500      	push	{lr}
   20bc2:	b083      	sub	sp, #12
	return net_ipv6_send_ns(iface, NULL, NULL, NULL,
   20bc4:	2301      	movs	r3, #1
   20bc6:	9301      	str	r3, [sp, #4]
   20bc8:	3104      	adds	r1, #4
   20bca:	9100      	str	r1, [sp, #0]
   20bcc:	2300      	movs	r3, #0
   20bce:	461a      	mov	r2, r3
   20bd0:	4619      	mov	r1, r3
   20bd2:	f7ff f8c1 	bl	1fd58 <net_ipv6_send_ns>
}
   20bd6:	b003      	add	sp, #12
   20bd8:	f85d fb04 	ldr.w	pc, [sp], #4

00020bdc <net_ipv6_prepare_for_send>:
{
   20bdc:	b570      	push	{r4, r5, r6, lr}
   20bde:	b084      	sub	sp, #16
	struct net_if *iface = NULL;
   20be0:	2300      	movs	r3, #0
   20be2:	9303      	str	r3, [sp, #12]
	return pkt->iface;
   20be4:	6943      	ldr	r3, [r0, #20]
   20be6:	f3bf 8f5b 	dmb	ish
   20bea:	68db      	ldr	r3, [r3, #12]
   20bec:	f3bf 8f5b 	dmb	ish
	if (atomic_test_bit(net_pkt_iface(pkt)->flags, NET_IF_POINTOPOINT)) {
   20bf0:	f013 0f02 	tst.w	r3, #2
   20bf4:	d108      	bne.n	20c08 <net_ipv6_prepare_for_send+0x2c>
   20bf6:	4604      	mov	r4, r0
	if (net_pkt_ll_dst(pkt)->addr ||
   20bf8:	6a83      	ldr	r3, [r0, #40]	; 0x28
   20bfa:	b13b      	cbz	r3, 20c0c <net_ipv6_prepare_for_send+0x30>
	return pkt->frags->data;
   20bfc:	68a3      	ldr	r3, [r4, #8]
   20bfe:	6899      	ldr	r1, [r3, #8]
		return update_ll_reserve(pkt, &NET_IPV6_HDR(pkt)->dst);
   20c00:	3118      	adds	r1, #24
   20c02:	4620      	mov	r0, r4
   20c04:	f7fe f9e6 	bl	1efd4 <update_ll_reserve>
}
   20c08:	b004      	add	sp, #16
   20c0a:	bd70      	pop	{r4, r5, r6, pc}
   20c0c:	6883      	ldr	r3, [r0, #8]
   20c0e:	6899      	ldr	r1, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   20c10:	7e0b      	ldrb	r3, [r1, #24]
	if (net_pkt_ll_dst(pkt)->addr ||
   20c12:	2bff      	cmp	r3, #255	; 0xff
   20c14:	d0f2      	beq.n	20bfc <net_ipv6_prepare_for_send+0x20>
	if (net_if_ipv6_addr_onlink(&iface,
   20c16:	3118      	adds	r1, #24
   20c18:	a803      	add	r0, sp, #12
   20c1a:	f7fa fa9d 	bl	1b158 <net_if_ipv6_addr_onlink>
   20c1e:	b348      	cbz	r0, 20c74 <net_ipv6_prepare_for_send+0x98>
   20c20:	68a3      	ldr	r3, [r4, #8]
   20c22:	689d      	ldr	r5, [r3, #8]
		nexthop = &NET_IPV6_HDR(pkt)->dst;
   20c24:	3518      	adds	r5, #24
		net_pkt_set_iface(pkt, iface);
   20c26:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20c28:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20c2a:	7d5a      	ldrb	r2, [r3, #21]
   20c2c:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20c30:	7d5b      	ldrb	r3, [r3, #21]
   20c32:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	if (!iface) {
   20c36:	9b03      	ldr	r3, [sp, #12]
   20c38:	2b00      	cmp	r3, #0
   20c3a:	d03e      	beq.n	20cba <net_ipv6_prepare_for_send+0xde>
	nbr = nbr_lookup(&net_neighbor.table, net_pkt_iface(pkt), nexthop);
   20c3c:	462a      	mov	r2, r5
   20c3e:	6961      	ldr	r1, [r4, #20]
   20c40:	4832      	ldr	r0, [pc, #200]	; (20d0c <net_ipv6_prepare_for_send+0x130>)
   20c42:	f7fe f90d 	bl	1ee60 <nbr_lookup>
	if (nbr && nbr->idx != NET_NBR_LLADDR_UNKNOWN) {
   20c46:	4606      	mov	r6, r0
   20c48:	2800      	cmp	r0, #0
   20c4a:	d051      	beq.n	20cf0 <net_ipv6_prepare_for_send+0x114>
   20c4c:	7840      	ldrb	r0, [r0, #1]
   20c4e:	28ff      	cmp	r0, #255	; 0xff
   20c50:	d04e      	beq.n	20cf0 <net_ipv6_prepare_for_send+0x114>
		lladdr = net_nbr_get_lladdr(nbr->idx);
   20c52:	f7fd ff85 	bl	1eb60 <net_nbr_get_lladdr>
		net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   20c56:	1c83      	adds	r3, r0, #2
   20c58:	62a3      	str	r3, [r4, #40]	; 0x28
		net_pkt_ll_dst(pkt)->len = lladdr->len;
   20c5a:	7843      	ldrb	r3, [r0, #1]
   20c5c:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c
   20c60:	68f3      	ldr	r3, [r6, #12]
		if (net_ipv6_nbr_data(nbr)->state == NET_IPV6_NBR_STATE_STALE) {
   20c62:	f893 3064 	ldrb.w	r3, [r3, #100]	; 0x64
   20c66:	2b02      	cmp	r3, #2
   20c68:	d036      	beq.n	20cd8 <net_ipv6_prepare_for_send+0xfc>
		return update_ll_reserve(pkt, nexthop);
   20c6a:	4629      	mov	r1, r5
   20c6c:	4620      	mov	r0, r4
   20c6e:	f7fe f9b1 	bl	1efd4 <update_ll_reserve>
   20c72:	e7c9      	b.n	20c08 <net_ipv6_prepare_for_send+0x2c>
	return pkt->frags->data;
   20c74:	68a3      	ldr	r3, [r4, #8]
   20c76:	6899      	ldr	r1, [r3, #8]
		route = net_route_lookup(NULL, &NET_IPV6_HDR(pkt)->dst);
   20c78:	3118      	adds	r1, #24
   20c7a:	2000      	movs	r0, #0
   20c7c:	f001 fb26 	bl	222cc <net_route_lookup>
		if (route) {
   20c80:	4606      	mov	r6, r0
   20c82:	b160      	cbz	r0, 20c9e <net_ipv6_prepare_for_send+0xc2>
			nexthop = net_route_get_nexthop(route);
   20c84:	f001 fc06 	bl	22494 <net_route_get_nexthop>
			if (!nexthop) {
   20c88:	4605      	mov	r5, r0
   20c8a:	2800      	cmp	r0, #0
   20c8c:	d1d3      	bne.n	20c36 <net_ipv6_prepare_for_send+0x5a>
				net_route_del(route);
   20c8e:	4630      	mov	r0, r6
   20c90:	f001 fbac 	bl	223ec <net_route_del>
				net_pkt_unref(pkt);
   20c94:	4620      	mov	r0, r4
   20c96:	f7fc f8d0 	bl	1ce3a <net_pkt_unref>
				return NULL;
   20c9a:	2000      	movs	r0, #0
   20c9c:	e7b4      	b.n	20c08 <net_ipv6_prepare_for_send+0x2c>
   20c9e:	68a3      	ldr	r3, [r4, #8]
   20ca0:	6899      	ldr	r1, [r3, #8]
			router = net_if_ipv6_router_find_default(NULL,
   20ca2:	3118      	adds	r1, #24
   20ca4:	2000      	movs	r0, #0
   20ca6:	f7fa fb47 	bl	1b338 <net_if_ipv6_router_find_default>
			if (!router) {
   20caa:	4605      	mov	r5, r0
   20cac:	b108      	cbz	r0, 20cb2 <net_ipv6_prepare_for_send+0xd6>
			nexthop = &router->address.in6_addr;
   20cae:	352c      	adds	r5, #44	; 0x2c
   20cb0:	e7c1      	b.n	20c36 <net_ipv6_prepare_for_send+0x5a>
   20cb2:	68a3      	ldr	r3, [r4, #8]
   20cb4:	689d      	ldr	r5, [r3, #8]
				nexthop = &NET_IPV6_HDR(pkt)->dst;
   20cb6:	3518      	adds	r5, #24
				goto try_send;
   20cb8:	e7c0      	b.n	20c3c <net_ipv6_prepare_for_send+0x60>
		if (net_if_ipv6_addr_onlink(&iface, nexthop)) {
   20cba:	4629      	mov	r1, r5
   20cbc:	a803      	add	r0, sp, #12
   20cbe:	f7fa fa4b 	bl	1b158 <net_if_ipv6_addr_onlink>
   20cc2:	2800      	cmp	r0, #0
   20cc4:	d0ba      	beq.n	20c3c <net_ipv6_prepare_for_send+0x60>
			net_pkt_set_iface(pkt, iface);
   20cc6:	9b03      	ldr	r3, [sp, #12]
	pkt->iface = iface;
   20cc8:	6163      	str	r3, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20cca:	7d5a      	ldrb	r2, [r3, #21]
   20ccc:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20cd0:	7d5b      	ldrb	r3, [r3, #21]
   20cd2:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
   20cd6:	e7b1      	b.n	20c3c <net_ipv6_prepare_for_send+0x60>
			ipv6_nbr_set_state(nbr, NET_IPV6_NBR_STATE_DELAY);
   20cd8:	2103      	movs	r1, #3
   20cda:	4630      	mov	r0, r6
   20cdc:	f7fd ff48 	bl	1eb70 <ipv6_nbr_set_state>
   20ce0:	68f1      	ldr	r1, [r6, #12]
   20ce2:	f241 3288 	movw	r2, #5000	; 0x1388
   20ce6:	3114      	adds	r1, #20
   20ce8:	4809      	ldr	r0, [pc, #36]	; (20d10 <net_ipv6_prepare_for_send+0x134>)
   20cea:	f008 fccb 	bl	29684 <k_delayed_work_submit_to_queue>
   20cee:	e7bc      	b.n	20c6a <net_ipv6_prepare_for_send+0x8e>
	return pkt->iface;
   20cf0:	6960      	ldr	r0, [r4, #20]
	return pkt->frags->data;
   20cf2:	68a3      	ldr	r3, [r4, #8]
   20cf4:	689a      	ldr	r2, [r3, #8]
	if (net_ipv6_send_ns(net_pkt_iface(pkt),
   20cf6:	2600      	movs	r6, #0
   20cf8:	9601      	str	r6, [sp, #4]
   20cfa:	9500      	str	r5, [sp, #0]
   20cfc:	4633      	mov	r3, r6
   20cfe:	3208      	adds	r2, #8
   20d00:	4621      	mov	r1, r4
   20d02:	f7ff f829 	bl	1fd58 <net_ipv6_send_ns>
		return NULL;
   20d06:	4630      	mov	r0, r6
   20d08:	e77e      	b.n	20c08 <net_ipv6_prepare_for_send+0x2c>
   20d0a:	bf00      	nop
   20d0c:	2000be8c 	.word	0x2000be8c
   20d10:	20002bd8 	.word	0x20002bd8

00020d14 <net_ipv6_send_rs>:
{
   20d14:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   20d18:	b084      	sub	sp, #16
   20d1a:	4605      	mov	r5, r0
	return iface->l2->reserve(iface, (void *)dst_ip6);
   20d1c:	6843      	ldr	r3, [r0, #4]
   20d1e:	689b      	ldr	r3, [r3, #8]
   20d20:	2100      	movs	r1, #0
   20d22:	4798      	blx	r3
	pkt = net_pkt_get_reserve_tx(net_if_get_ll_reserve(iface, NULL),
   20d24:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20d28:	f7fc f816 	bl	1cd58 <net_pkt_get_reserve_tx>
   20d2c:	4604      	mov	r4, r0
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   20d2e:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20d32:	f7fc f82f 	bl	1cd94 <net_pkt_get_frag>
   20d36:	4606      	mov	r6, r0
	net_pkt_frag_add(pkt, frag);
   20d38:	4601      	mov	r1, r0
   20d3a:	4620      	mov	r0, r4
   20d3c:	f7fc f8a7 	bl	1ce8e <net_pkt_frag_add>
	pkt->iface = iface;
   20d40:	6165      	str	r5, [r4, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   20d42:	7d6b      	ldrb	r3, [r5, #21]
   20d44:	f884 3025 	strb.w	r3, [r4, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   20d48:	7d6b      	ldrb	r3, [r5, #21]
   20d4a:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	pkt->family = family;
   20d4e:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   20d52:	220a      	movs	r2, #10
   20d54:	f362 03c6 	bfi	r3, r2, #3, #4
   20d58:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->ip_hdr_len = len;
   20d5c:	2328      	movs	r3, #40	; 0x28
   20d5e:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	return pkt->frags->data;
   20d62:	68a3      	ldr	r3, [r4, #8]
   20d64:	6898      	ldr	r0, [r3, #8]
	return pkt->ll_reserve;
   20d66:	f894 3032 	ldrb.w	r3, [r4, #50]	; 0x32
	memset(net_pkt_ll(pkt), 0, net_pkt_ll_reserve(pkt));
   20d6a:	461a      	mov	r2, r3
   20d6c:	2100      	movs	r1, #0
   20d6e:	1ac0      	subs	r0, r0, r3
   20d70:	f008 fe12 	bl	29998 <memset>
	net_pkt_ll_src(pkt)->addr = NULL;
   20d74:	2200      	movs	r2, #0
   20d76:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->len = 0;
   20d78:	f884 2024 	strb.w	r2, [r4, #36]	; 0x24
	return pkt->frags->data;
   20d7c:	68a3      	ldr	r3, [r4, #8]
   20d7e:	689b      	ldr	r3, [r3, #8]
	UNALIGNED_PUT(htons(addr0), &addr->s6_addr16[0]);
   20d80:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   20d84:	7619      	strb	r1, [r3, #24]
   20d86:	2102      	movs	r1, #2
   20d88:	7659      	strb	r1, [r3, #25]
	UNALIGNED_PUT(htons(addr1), &addr->s6_addr16[1]);
   20d8a:	769a      	strb	r2, [r3, #26]
   20d8c:	76da      	strb	r2, [r3, #27]
	UNALIGNED_PUT(htons(addr2), &addr->s6_addr16[2]);
   20d8e:	771a      	strb	r2, [r3, #28]
   20d90:	775a      	strb	r2, [r3, #29]
	UNALIGNED_PUT(htons(addr3), &addr->s6_addr16[3]);
   20d92:	779a      	strb	r2, [r3, #30]
   20d94:	77da      	strb	r2, [r3, #31]
	UNALIGNED_PUT(htons(addr4), &addr->s6_addr16[4]);
   20d96:	f883 2020 	strb.w	r2, [r3, #32]
   20d9a:	f883 2021 	strb.w	r2, [r3, #33]	; 0x21
	UNALIGNED_PUT(htons(addr5), &addr->s6_addr16[5]);
   20d9e:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   20da2:	f883 2023 	strb.w	r2, [r3, #35]	; 0x23
	UNALIGNED_PUT(htons(addr6), &addr->s6_addr16[6]);
   20da6:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
   20daa:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
	UNALIGNED_PUT(htons(addr7), &addr->s6_addr16[7]);
   20dae:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
   20db2:	2201      	movs	r2, #1
   20db4:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
   20db8:	68a3      	ldr	r3, [r4, #8]
   20dba:	f8d3 8008 	ldr.w	r8, [r3, #8]
	net_ipaddr_copy(&NET_IPV6_HDR(pkt)->src,
   20dbe:	f108 0118 	add.w	r1, r8, #24
   20dc2:	4628      	mov	r0, r5
   20dc4:	f7fa fb9e 	bl	1b504 <net_if_ipv6_select_src_addr>
   20dc8:	4603      	mov	r3, r0
   20dca:	466d      	mov	r5, sp
   20dcc:	6800      	ldr	r0, [r0, #0]
   20dce:	6859      	ldr	r1, [r3, #4]
   20dd0:	689a      	ldr	r2, [r3, #8]
   20dd2:	68db      	ldr	r3, [r3, #12]
   20dd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   20dd6:	466d      	mov	r5, sp
   20dd8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   20dda:	f8c8 0008 	str.w	r0, [r8, #8]
   20dde:	f8c8 100c 	str.w	r1, [r8, #12]
   20de2:	f8c8 2010 	str.w	r2, [r8, #16]
   20de6:	f8c8 3014 	str.w	r3, [r8, #20]
   20dea:	68a3      	ldr	r3, [r4, #8]
   20dec:	689b      	ldr	r3, [r3, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20dee:	689a      	ldr	r2, [r3, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20df0:	b93a      	cbnz	r2, 20e02 <net_ipv6_send_rs+0xee>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20df2:	68da      	ldr	r2, [r3, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   20df4:	b982      	cbnz	r2, 20e18 <net_ipv6_send_rs+0x104>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20df6:	691a      	ldr	r2, [r3, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   20df8:	b982      	cbnz	r2, 20e1c <net_ipv6_send_rs+0x108>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   20dfa:	695b      	ldr	r3, [r3, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   20dfc:	b183      	cbz	r3, 20e20 <net_ipv6_send_rs+0x10c>
   20dfe:	2300      	movs	r3, #0
   20e00:	e000      	b.n	20e04 <net_ipv6_send_rs+0xf0>
   20e02:	2300      	movs	r3, #0
	if (!unspec_src) {
   20e04:	461f      	mov	r7, r3
   20e06:	b97b      	cbnz	r3, 20e28 <net_ipv6_send_rs+0x114>
	return pkt->iface;
   20e08:	6963      	ldr	r3, [r4, #20]
	if (iface->link_addr.len == 6) {
   20e0a:	7d1b      	ldrb	r3, [r3, #20]
   20e0c:	2b06      	cmp	r3, #6
   20e0e:	d02a      	beq.n	20e66 <net_ipv6_send_rs+0x152>
	} else if (iface->link_addr.len == 8) {
   20e10:	2b08      	cmp	r3, #8
   20e12:	d007      	beq.n	20e24 <net_ipv6_send_rs+0x110>
	return 0;
   20e14:	2500      	movs	r5, #0
   20e16:	e008      	b.n	20e2a <net_ipv6_send_rs+0x116>
   20e18:	2300      	movs	r3, #0
   20e1a:	e7f3      	b.n	20e04 <net_ipv6_send_rs+0xf0>
   20e1c:	2300      	movs	r3, #0
   20e1e:	e7f1      	b.n	20e04 <net_ipv6_send_rs+0xf0>
   20e20:	2301      	movs	r3, #1
   20e22:	e7ef      	b.n	20e04 <net_ipv6_send_rs+0xf0>
		return 16;
   20e24:	2510      	movs	r5, #16
   20e26:	e000      	b.n	20e2a <net_ipv6_send_rs+0x116>
	u8_t llao_len = 0;
   20e28:	2500      	movs	r5, #0
	setup_headers(pkt, sizeof(struct net_icmpv6_rs_hdr) + llao_len,
   20e2a:	2285      	movs	r2, #133	; 0x85
   20e2c:	1d29      	adds	r1, r5, #4
   20e2e:	4620      	mov	r0, r4
   20e30:	f7fe f92f 	bl	1f092 <setup_headers>
	net_buf_add(frag, sizeof(struct net_icmpv6_rs_hdr));
   20e34:	3608      	adds	r6, #8
   20e36:	2104      	movs	r1, #4
   20e38:	4630      	mov	r0, r6
   20e3a:	f7f9 fadb 	bl	1a3f4 <net_buf_simple_add>
	if (!unspec_src) {
   20e3e:	b1a7      	cbz	r7, 20e6a <net_ipv6_send_rs+0x156>
	net_icmpv6_set_chksum(pkt, pkt->frags);
   20e40:	68a1      	ldr	r1, [r4, #8]
   20e42:	4620      	mov	r0, r4
   20e44:	f7fd f8b0 	bl	1dfa8 <net_icmpv6_set_chksum>
	if (net_send_data(pkt) < 0) {
   20e48:	4620      	mov	r0, r4
   20e4a:	f7f9 fbf5 	bl	1a638 <net_send_data>
   20e4e:	2800      	cmp	r0, #0
   20e50:	db2b      	blt.n	20eaa <net_ipv6_send_rs+0x196>
	net_stats.ipv6_nd.sent++;
   20e52:	4a1c      	ldr	r2, [pc, #112]	; (20ec4 <net_ipv6_send_rs+0x1b0>)
   20e54:	f8d2 3094 	ldr.w	r3, [r2, #148]	; 0x94
   20e58:	3301      	adds	r3, #1
   20e5a:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94
	return 0;
   20e5e:	2000      	movs	r0, #0
}
   20e60:	b004      	add	sp, #16
   20e62:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		return 8;
   20e66:	2508      	movs	r5, #8
   20e68:	e7df      	b.n	20e2a <net_ipv6_send_rs+0x116>
		net_buf_add(frag, llao_len);
   20e6a:	4629      	mov	r1, r5
   20e6c:	4630      	mov	r0, r6
   20e6e:	f7f9 fac1 	bl	1a3f4 <net_buf_simple_add>
   20e72:	f8d4 8014 	ldr.w	r8, [r4, #20]
			 (u8_t *)net_pkt_icmp_data(pkt) +
   20e76:	4620      	mov	r0, r4
   20e78:	f7fc fab8 	bl	1d3ec <net_pkt_icmp_data>
		set_llao(&net_pkt_iface(pkt)->link_addr,
   20e7c:	f100 0608 	add.w	r6, r0, #8
	llao[NET_ICMPV6_OPT_TYPE_OFFSET] = type;
   20e80:	2301      	movs	r3, #1
   20e82:	7203      	strb	r3, [r0, #8]
	llao[NET_ICMPV6_OPT_LEN_OFFSET] = llao_len >> 3;
   20e84:	08eb      	lsrs	r3, r5, #3
   20e86:	7243      	strb	r3, [r0, #9]
	memcpy(&llao[NET_ICMPV6_OPT_DATA_OFFSET], lladdr->addr, lladdr->len);
   20e88:	f898 2014 	ldrb.w	r2, [r8, #20]
   20e8c:	f8d8 1010 	ldr.w	r1, [r8, #16]
   20e90:	300a      	adds	r0, #10
   20e92:	f7df fa15 	bl	2c0 <memcpy>
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20e96:	f898 2014 	ldrb.w	r2, [r8, #20]
   20e9a:	1c90      	adds	r0, r2, #2
	       llao_len - lladdr->len - 2);
   20e9c:	1aaa      	subs	r2, r5, r2
	memset(&llao[NET_ICMPV6_OPT_DATA_OFFSET + lladdr->len], 0,
   20e9e:	3a02      	subs	r2, #2
   20ea0:	2100      	movs	r1, #0
   20ea2:	4430      	add	r0, r6
   20ea4:	f008 fd78 	bl	29998 <memset>
   20ea8:	e7ca      	b.n	20e40 <net_ipv6_send_rs+0x12c>
	net_pkt_unref(pkt);
   20eaa:	4620      	mov	r0, r4
   20eac:	f7fb ffc5 	bl	1ce3a <net_pkt_unref>
	net_stats.ipv6_nd.drop++;
   20eb0:	4a04      	ldr	r2, [pc, #16]	; (20ec4 <net_ipv6_send_rs+0x1b0>)
   20eb2:	f8d2 308c 	ldr.w	r3, [r2, #140]	; 0x8c
   20eb6:	3301      	adds	r3, #1
   20eb8:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
	return -EINVAL;
   20ebc:	f06f 0015 	mvn.w	r0, #21
   20ec0:	e7ce      	b.n	20e60 <net_ipv6_send_rs+0x14c>
   20ec2:	bf00      	nop
   20ec4:	20002ab8 	.word	0x20002ab8

00020ec8 <net_ipv6_start_rs>:
{
   20ec8:	b508      	push	{r3, lr}
	return net_ipv6_send_rs(iface);
   20eca:	f7ff ff23 	bl	20d14 <net_ipv6_send_rs>
}
   20ece:	bd08      	pop	{r3, pc}

00020ed0 <net_ipv6_mld_join>:
{
   20ed0:	b570      	push	{r4, r5, r6, lr}
   20ed2:	b082      	sub	sp, #8
   20ed4:	ab02      	add	r3, sp, #8
   20ed6:	f843 0d04 	str.w	r0, [r3, #-4]!
   20eda:	460d      	mov	r5, r1
	maddr = net_if_ipv6_maddr_lookup(addr, &iface);
   20edc:	4619      	mov	r1, r3
   20ede:	4628      	mov	r0, r5
   20ee0:	f7fa f842 	bl	1af68 <net_if_ipv6_maddr_lookup>
	if (maddr && net_if_ipv6_maddr_is_joined(maddr)) {
   20ee4:	4604      	mov	r4, r0
   20ee6:	b118      	cbz	r0, 20ef0 <net_ipv6_mld_join+0x20>
	return addr->is_joined;
   20ee8:	7803      	ldrb	r3, [r0, #0]
   20eea:	f013 0f02 	tst.w	r3, #2
   20eee:	d123      	bne.n	20f38 <net_ipv6_mld_join+0x68>
	if (!maddr) {
   20ef0:	b1c4      	cbz	r4, 20f24 <net_ipv6_mld_join+0x54>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_EXCLUDE);
   20ef2:	2202      	movs	r2, #2
   20ef4:	4629      	mov	r1, r5
   20ef6:	9801      	ldr	r0, [sp, #4]
   20ef8:	f7fe fb5a 	bl	1f5b0 <send_mldv2>
	if (ret < 0) {
   20efc:	1e06      	subs	r6, r0, #0
   20efe:	db0e      	blt.n	20f1e <net_ipv6_mld_join+0x4e>
	addr->is_joined = true;
   20f00:	7823      	ldrb	r3, [r4, #0]
   20f02:	f043 0302 	orr.w	r3, r3, #2
   20f06:	7023      	strb	r3, [r4, #0]
	net_if_mcast_monitor(iface, addr, true);
   20f08:	2201      	movs	r2, #1
   20f0a:	4629      	mov	r1, r5
   20f0c:	9801      	ldr	r0, [sp, #4]
   20f0e:	f7fa f877 	bl	1b000 <net_if_mcast_monitor>
   20f12:	2300      	movs	r3, #0
   20f14:	461a      	mov	r2, r3
   20f16:	9901      	ldr	r1, [sp, #4]
   20f18:	4809      	ldr	r0, [pc, #36]	; (20f40 <net_ipv6_mld_join+0x70>)
   20f1a:	f001 fc01 	bl	22720 <net_mgmt_event_notify_with_info>
}
   20f1e:	4630      	mov	r0, r6
   20f20:	b002      	add	sp, #8
   20f22:	bd70      	pop	{r4, r5, r6, pc}
		maddr = net_if_ipv6_maddr_add(iface, addr);
   20f24:	4629      	mov	r1, r5
   20f26:	9801      	ldr	r0, [sp, #4]
   20f28:	f7f9 ff32 	bl	1ad90 <net_if_ipv6_maddr_add>
		if (!maddr) {
   20f2c:	4604      	mov	r4, r0
   20f2e:	2800      	cmp	r0, #0
   20f30:	d1df      	bne.n	20ef2 <net_ipv6_mld_join+0x22>
			return -ENOMEM;
   20f32:	f06f 060b 	mvn.w	r6, #11
   20f36:	e7f2      	b.n	20f1e <net_ipv6_mld_join+0x4e>
		return -EALREADY;
   20f38:	f06f 0677 	mvn.w	r6, #119	; 0x77
   20f3c:	e7ef      	b.n	20f1e <net_ipv6_mld_join+0x4e>
   20f3e:	bf00      	nop
   20f40:	f0600007 	.word	0xf0600007

00020f44 <net_ipv6_mld_leave>:
{
   20f44:	b570      	push	{r4, r5, r6, lr}
   20f46:	4604      	mov	r4, r0
   20f48:	460d      	mov	r5, r1
	if (!net_if_ipv6_maddr_rm(iface, addr)) {
   20f4a:	f7f9 ff5d 	bl	1ae08 <net_if_ipv6_maddr_rm>
   20f4e:	b198      	cbz	r0, 20f78 <net_ipv6_mld_leave+0x34>
	ret = send_mldv2(iface, addr, NET_IPV6_MLDv2_MODE_IS_INCLUDE);
   20f50:	2201      	movs	r2, #1
   20f52:	4629      	mov	r1, r5
   20f54:	4620      	mov	r0, r4
   20f56:	f7fe fb2b 	bl	1f5b0 <send_mldv2>
	if (ret < 0) {
   20f5a:	1e06      	subs	r6, r0, #0
   20f5c:	db0a      	blt.n	20f74 <net_ipv6_mld_leave+0x30>
	net_if_mcast_monitor(iface, addr, false);
   20f5e:	2200      	movs	r2, #0
   20f60:	4629      	mov	r1, r5
   20f62:	4620      	mov	r0, r4
   20f64:	f7fa f84c 	bl	1b000 <net_if_mcast_monitor>
   20f68:	2300      	movs	r3, #0
   20f6a:	461a      	mov	r2, r3
   20f6c:	4621      	mov	r1, r4
   20f6e:	4804      	ldr	r0, [pc, #16]	; (20f80 <net_ipv6_mld_leave+0x3c>)
   20f70:	f001 fbd6 	bl	22720 <net_mgmt_event_notify_with_info>
}
   20f74:	4630      	mov	r0, r6
   20f76:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   20f78:	f06f 0615 	mvn.w	r6, #21
   20f7c:	e7fa      	b.n	20f74 <net_ipv6_mld_leave+0x30>
   20f7e:	bf00      	nop
   20f80:	f0600008 	.word	0xf0600008

00020f84 <net_ipv6_process_pkt>:
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
		proto == IPPROTO_TCP);
}

enum net_verdict net_ipv6_process_pkt(struct net_pkt *pkt)
{
   20f84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   20f88:	b089      	sub	sp, #36	; 0x24
	return pkt->frags->data;
   20f8a:	6884      	ldr	r4, [r0, #8]
   20f8c:	68a7      	ldr	r7, [r4, #8]
	size_t bytes = 0;
   20f8e:	2300      	movs	r3, #0
   20f90:	e002      	b.n	20f98 <net_ipv6_process_pkt+0x14>
		bytes += buf->len;
   20f92:	89a2      	ldrh	r2, [r4, #12]
   20f94:	4413      	add	r3, r2
		buf = buf->frags;
   20f96:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   20f98:	2c00      	cmp	r4, #0
   20f9a:	d1fa      	bne.n	20f92 <net_ipv6_process_pkt+0xe>
	struct net_ipv6_hdr *hdr = NET_IPV6_HDR(pkt);
	int real_len = net_pkt_get_len(pkt);
   20f9c:	461e      	mov	r6, r3
	int pkt_len = (hdr->len[0] << 8) + hdr->len[1] + sizeof(*hdr);
   20f9e:	7939      	ldrb	r1, [r7, #4]
   20fa0:	797a      	ldrb	r2, [r7, #5]
   20fa2:	eb02 2201 	add.w	r2, r2, r1, lsl #8
   20fa6:	3228      	adds	r2, #40	; 0x28
	u8_t next, next_hdr, length;
	u8_t first_option;
	u16_t offset, total_len = 0;
	u8_t ext_bitmap;

	if (real_len != pkt_len) {
   20fa8:	4293      	cmp	r3, r2
   20faa:	d007      	beq.n	20fbc <net_ipv6_process_pkt+0x38>
	net_stats.ipv6.drop++;
   20fac:	4abd      	ldr	r2, [pc, #756]	; (212a4 <net_ipv6_process_pkt+0x320>)
   20fae:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20fb0:	3301      	adds	r3, #1
   20fb2:	6313      	str	r3, [r2, #48]	; 0x30
		return NET_DROP;
#endif
	}

drop:
	return NET_DROP;
   20fb4:	2002      	movs	r0, #2

	NET_DBG("Unknown next header type");
	net_stats_update_ip_errors_protoerr();

	return NET_DROP;
}
   20fb6:	b009      	add	sp, #36	; 0x24
   20fb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return addr->s6_addr[0] == 0xFF;
   20fbc:	7a3b      	ldrb	r3, [r7, #8]
	if (net_is_ipv6_addr_mcast(&hdr->src)) {
   20fbe:	2bff      	cmp	r3, #255	; 0xff
   20fc0:	d105      	bne.n	20fce <net_ipv6_process_pkt+0x4a>
   20fc2:	4ab8      	ldr	r2, [pc, #736]	; (212a4 <net_ipv6_process_pkt+0x320>)
   20fc4:	6b13      	ldr	r3, [r2, #48]	; 0x30
   20fc6:	3301      	adds	r3, #1
   20fc8:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   20fca:	2002      	movs	r0, #2
   20fcc:	e7f3      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
   20fce:	4605      	mov	r5, r0
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   20fd0:	f107 0818 	add.w	r8, r7, #24
	return net_if_ipv6_addr_lookup(addr, NULL) != NULL;
   20fd4:	2100      	movs	r1, #0
   20fd6:	4640      	mov	r0, r8
   20fd8:	f7f9 fd7c 	bl	1aad4 <net_if_ipv6_addr_lookup>
   20fdc:	2800      	cmp	r0, #0
   20fde:	d06f      	beq.n	210c0 <net_ipv6_process_pkt+0x13c>
	net_pkt_set_next_hdr(pkt, &hdr->nexthdr);
   20fe0:	1dbb      	adds	r3, r7, #6
	pkt->next_hdr = hdr;
   20fe2:	61eb      	str	r3, [r5, #28]
	pkt->ipv6_ext_len = len;
   20fe4:	2300      	movs	r3, #0
   20fe6:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	pkt->ip_hdr_len = len;
   20fea:	2328      	movs	r3, #40	; 0x28
   20fec:	f885 3033 	strb.w	r3, [r5, #51]	; 0x33
	next = *(net_pkt_next_hdr(pkt));
   20ff0:	f897 9006 	ldrb.w	r9, [r7, #6]
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   20ff4:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   20ff8:	f000 80b0 	beq.w	2115c <net_ipv6_process_pkt+0x1d8>
   20ffc:	f1b9 0f11 	cmp.w	r9, #17
   21000:	f000 80ae 	beq.w	21160 <net_ipv6_process_pkt+0x1dc>
   21004:	f1b9 0f06 	cmp.w	r9, #6
   21008:	f000 80a6 	beq.w	21158 <net_ipv6_process_pkt+0x1d4>
   2100c:	2300      	movs	r3, #0
	if (is_upper_layer_protocol_header(next)) {
   2100e:	2b00      	cmp	r3, #0
   21010:	f040 8166 	bne.w	212e0 <net_ipv6_process_pkt+0x35c>
	frag = pkt->frags;
   21014:	f8d5 a008 	ldr.w	sl, [r5, #8]
	offset = sizeof(struct net_ipv6_hdr);
   21018:	2328      	movs	r3, #40	; 0x28
   2101a:	f8ad 301c 	strh.w	r3, [sp, #28]
	next = hdr->nexthdr;
   2101e:	464f      	mov	r7, r9
	ext_bitmap = 0;
   21020:	2300      	movs	r3, #0
   21022:	9303      	str	r3, [sp, #12]
	u16_t offset, total_len = 0;
   21024:	9302      	str	r3, [sp, #8]
   21026:	46a3      	mov	fp, r4
   21028:	4654      	mov	r4, sl
	while (frag) {
   2102a:	2c00      	cmp	r4, #0
   2102c:	f000 8156 	beq.w	212dc <net_ipv6_process_pkt+0x358>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21030:	2f3a      	cmp	r7, #58	; 0x3a
   21032:	f000 8099 	beq.w	21168 <net_ipv6_process_pkt+0x1e4>
   21036:	2f11      	cmp	r7, #17
   21038:	f000 8098 	beq.w	2116c <net_ipv6_process_pkt+0x1e8>
   2103c:	2f06      	cmp	r7, #6
   2103e:	f000 8091 	beq.w	21164 <net_ipv6_process_pkt+0x1e0>
   21042:	2300      	movs	r3, #0
		if (is_upper_layer_protocol_header(next)) {
   21044:	2b00      	cmp	r3, #0
   21046:	f040 8093 	bne.w	21170 <net_ipv6_process_pkt+0x1ec>
		start_of_ext = offset;
   2104a:	f10d 0820 	add.w	r8, sp, #32
   2104e:	f838 1d04 	ldrh.w	r1, [r8, #-4]!
	return net_frag_read(frag, offset, pos, 1, value);
   21052:	f10d 031f 	add.w	r3, sp, #31
   21056:	9300      	str	r3, [sp, #0]
   21058:	2301      	movs	r3, #1
   2105a:	4642      	mov	r2, r8
   2105c:	4620      	mov	r0, r4
   2105e:	f7fc f86a 	bl	1d136 <net_frag_read>
		frag = net_frag_read_u8(frag, offset, &offset, &length);
   21062:	f8bd 101c 	ldrh.w	r1, [sp, #28]
   21066:	f10d 031e 	add.w	r3, sp, #30
   2106a:	9300      	str	r3, [sp, #0]
   2106c:	2301      	movs	r3, #1
   2106e:	4642      	mov	r2, r8
   21070:	f7fc f861 	bl	1d136 <net_frag_read>
		if (!frag && offset == 0xffff) {
   21074:	4604      	mov	r4, r0
   21076:	2800      	cmp	r0, #0
   21078:	f000 8081 	beq.w	2117e <net_ipv6_process_pkt+0x1fa>
		length = length * 8 + 8;
   2107c:	f89d 801e 	ldrb.w	r8, [sp, #30]
   21080:	f108 0801 	add.w	r8, r8, #1
   21084:	ea4f 08c8 	mov.w	r8, r8, lsl #3
   21088:	fa5f f888 	uxtb.w	r8, r8
   2108c:	f88d 801e 	strb.w	r8, [sp, #30]
		total_len += length;
   21090:	fa1f f888 	uxth.w	r8, r8
   21094:	9b02      	ldr	r3, [sp, #8]
   21096:	4443      	add	r3, r8
   21098:	b29b      	uxth	r3, r3
   2109a:	9302      	str	r3, [sp, #8]
		switch (next) {
   2109c:	2f00      	cmp	r7, #0
   2109e:	d077      	beq.n	21190 <net_ipv6_process_pkt+0x20c>
   210a0:	2f3b      	cmp	r7, #59	; 0x3b
   210a2:	d073      	beq.n	2118c <net_ipv6_process_pkt+0x208>
			      offset - 1);
   210a4:	f8bd 301c 	ldrh.w	r3, [sp, #28]
	net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   210a8:	3b01      	subs	r3, #1
   210aa:	2201      	movs	r2, #1
   210ac:	2104      	movs	r1, #4
   210ae:	4628      	mov	r0, r5
   210b0:	f7fd fa88 	bl	1e5c4 <net_icmpv6_send_error>
	net_stats.ip_errors.protoerr++;
   210b4:	4a7b      	ldr	r2, [pc, #492]	; (212a4 <net_ipv6_process_pkt+0x320>)
   210b6:	6a13      	ldr	r3, [r2, #32]
   210b8:	3301      	adds	r3, #1
   210ba:	6213      	str	r3, [r2, #32]
	return NET_DROP;
   210bc:	2002      	movs	r0, #2
   210be:	e77a      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
	return net_if_ipv6_maddr_lookup(maddr, NULL) != NULL;
   210c0:	2100      	movs	r1, #0
   210c2:	4640      	mov	r0, r8
   210c4:	f7f9 ff50 	bl	1af68 <net_if_ipv6_maddr_lookup>
	if (!net_is_my_ipv6_addr(&hdr->dst) &&
   210c8:	2800      	cmp	r0, #0
   210ca:	d189      	bne.n	20fe0 <net_ipv6_process_pkt+0x5c>
	return addr->s6_addr[0] == 0xFF;
   210cc:	7e3b      	ldrb	r3, [r7, #24]
	    !net_is_my_ipv6_maddr(&hdr->dst) &&
   210ce:	2bff      	cmp	r3, #255	; 0xff
   210d0:	d086      	beq.n	20fe0 <net_ipv6_process_pkt+0x5c>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   210d2:	f8d8 3000 	ldr.w	r3, [r8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210d6:	bb8b      	cbnz	r3, 2113c <net_ipv6_process_pkt+0x1b8>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   210d8:	f8d8 3004 	ldr.w	r3, [r8, #4]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   210dc:	bb83      	cbnz	r3, 21140 <net_ipv6_process_pkt+0x1bc>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210de:	f8d8 3008 	ldr.w	r3, [r8, #8]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   210e2:	bb7b      	cbnz	r3, 21144 <net_ipv6_process_pkt+0x1c0>
		ntohl(UNALIGNED_GET(&addr->s6_addr32[3])) == 1;
   210e4:	f8d8 200c 	ldr.w	r2, [r8, #12]
   210e8:	0a13      	lsrs	r3, r2, #8
   210ea:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
   210ee:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   210f2:	0211      	lsls	r1, r2, #8
   210f4:	f401 017f 	and.w	r1, r1, #16711680	; 0xff0000
   210f8:	430b      	orrs	r3, r1
   210fa:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   210fe:	2b01      	cmp	r3, #1
   21100:	d022      	beq.n	21148 <net_ipv6_process_pkt+0x1c4>
   21102:	2300      	movs	r3, #0
	    !net_is_ipv6_addr_mcast(&hdr->dst) &&
   21104:	2b00      	cmp	r3, #0
   21106:	f47f af6b 	bne.w	20fe0 <net_ipv6_process_pkt+0x5c>
		if (net_route_get_info(net_pkt_iface(pkt), &hdr->dst, &route,
   2110a:	ab06      	add	r3, sp, #24
   2110c:	aa05      	add	r2, sp, #20
   2110e:	4641      	mov	r1, r8
   21110:	6968      	ldr	r0, [r5, #20]
   21112:	f001 f9f5 	bl	22500 <net_route_get_info>
   21116:	b1c8      	cbz	r0, 2114c <net_ipv6_process_pkt+0x1c8>
			if (route) {
   21118:	9b05      	ldr	r3, [sp, #20]
   2111a:	b13b      	cbz	r3, 2112c <net_ipv6_process_pkt+0x1a8>
				net_pkt_set_iface(pkt, route->iface);
   2111c:	68db      	ldr	r3, [r3, #12]
	pkt->iface = iface;
   2111e:	616b      	str	r3, [r5, #20]
	pkt->lladdr_src.type = iface->link_addr.type;
   21120:	7d5a      	ldrb	r2, [r3, #21]
   21122:	f885 2025 	strb.w	r2, [r5, #37]	; 0x25
	pkt->lladdr_dst.type = iface->link_addr.type;
   21126:	7d5b      	ldrb	r3, [r3, #21]
   21128:	f885 302d 	strb.w	r3, [r5, #45]	; 0x2d
			ret = net_route_packet(pkt, nexthop);
   2112c:	9906      	ldr	r1, [sp, #24]
   2112e:	4628      	mov	r0, r5
   21130:	f001 fa0c 	bl	2254c <net_route_packet>
			if (ret < 0) {
   21134:	2800      	cmp	r0, #0
   21136:	db09      	blt.n	2114c <net_ipv6_process_pkt+0x1c8>
				return NET_OK;
   21138:	2000      	movs	r0, #0
   2113a:	e73c      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
   2113c:	2300      	movs	r3, #0
   2113e:	e7e1      	b.n	21104 <net_ipv6_process_pkt+0x180>
   21140:	2300      	movs	r3, #0
   21142:	e7df      	b.n	21104 <net_ipv6_process_pkt+0x180>
   21144:	2300      	movs	r3, #0
   21146:	e7dd      	b.n	21104 <net_ipv6_process_pkt+0x180>
   21148:	2301      	movs	r3, #1
   2114a:	e7db      	b.n	21104 <net_ipv6_process_pkt+0x180>
	net_stats.ipv6.drop++;
   2114c:	4a55      	ldr	r2, [pc, #340]	; (212a4 <net_ipv6_process_pkt+0x320>)
   2114e:	6b13      	ldr	r3, [r2, #48]	; 0x30
   21150:	3301      	adds	r3, #1
   21152:	6313      	str	r3, [r2, #48]	; 0x30
	return NET_DROP;
   21154:	2002      	movs	r0, #2
   21156:	e72e      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
	return (proto == IPPROTO_ICMPV6 || proto == IPPROTO_UDP ||
   21158:	2301      	movs	r3, #1
   2115a:	e758      	b.n	2100e <net_ipv6_process_pkt+0x8a>
   2115c:	2301      	movs	r3, #1
   2115e:	e756      	b.n	2100e <net_ipv6_process_pkt+0x8a>
   21160:	2301      	movs	r3, #1
   21162:	e754      	b.n	2100e <net_ipv6_process_pkt+0x8a>
   21164:	2301      	movs	r3, #1
   21166:	e76d      	b.n	21044 <net_ipv6_process_pkt+0xc0>
   21168:	2301      	movs	r3, #1
   2116a:	e76b      	b.n	21044 <net_ipv6_process_pkt+0xc0>
   2116c:	2301      	movs	r3, #1
   2116e:	e769      	b.n	21044 <net_ipv6_process_pkt+0xc0>
			net_pkt_set_ipv6_ext_len(pkt, offset -
   21170:	f89d 301c 	ldrb.w	r3, [sp, #28]
   21174:	3b28      	subs	r3, #40	; 0x28
	pkt->ipv6_ext_len = len;
   21176:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
   2117a:	46b9      	mov	r9, r7
   2117c:	e0b2      	b.n	212e4 <net_ipv6_process_pkt+0x360>
		if (!frag && offset == 0xffff) {
   2117e:	f8bd 201c 	ldrh.w	r2, [sp, #28]
   21182:	f64f 73ff 	movw	r3, #65535	; 0xffff
   21186:	429a      	cmp	r2, r3
   21188:	f47f af78 	bne.w	2107c <net_ipv6_process_pkt+0xf8>
	return NET_DROP;
   2118c:	2002      	movs	r0, #2
   2118e:	e712      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
			if (first_option != NET_IPV6_NEXTHDR_HBHO) {
   21190:	f1b9 0f00 	cmp.w	r9, #0
   21194:	d186      	bne.n	210a4 <net_ipv6_process_pkt+0x120>
			if (ext_bitmap & NET_IPV6_EXT_HDR_BITMAP_HBHO) {
   21196:	9a03      	ldr	r2, [sp, #12]
   21198:	f012 0f01 	tst.w	r2, #1
   2119c:	d182      	bne.n	210a4 <net_ipv6_process_pkt+0x120>
			ext_bitmap |= NET_IPV6_EXT_HDR_BITMAP_HBHO;
   2119e:	f042 0301 	orr.w	r3, r2, #1
   211a2:	9303      	str	r3, [sp, #12]
			frag = handle_ext_hdr_options(pkt, frag, real_len,
   211a4:	f8bd 101c 	ldrh.w	r1, [sp, #28]
	if (len > total_len) {
   211a8:	4546      	cmp	r6, r8
   211aa:	f2c0 8094 	blt.w	212d6 <net_ipv6_process_pkt+0x352>
	return net_frag_read(frag, offset, pos, 1, value);
   211ae:	f10d 0313 	add.w	r3, sp, #19
   211b2:	9300      	str	r3, [sp, #0]
   211b4:	2301      	movs	r3, #1
   211b6:	aa06      	add	r2, sp, #24
   211b8:	4620      	mov	r0, r4
   211ba:	f7fb ffbc 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   211be:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   211c2:	ab05      	add	r3, sp, #20
   211c4:	9300      	str	r3, [sp, #0]
   211c6:	2301      	movs	r3, #1
   211c8:	aa06      	add	r2, sp, #24
   211ca:	f7fb ffb4 	bl	1d136 <net_frag_read>
	if (!frag && loc == 0xffff) {
   211ce:	4604      	mov	r4, r0
   211d0:	b108      	cbz	r0, 211d6 <net_ipv6_process_pkt+0x252>
   211d2:	2702      	movs	r7, #2
   211d4:	e027      	b.n	21226 <net_ipv6_process_pkt+0x2a2>
   211d6:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   211da:	f64f 73ff 	movw	r3, #65535	; 0xffff
   211de:	429a      	cmp	r2, r3
   211e0:	d068      	beq.n	212b4 <net_ipv6_process_pkt+0x330>
   211e2:	2702      	movs	r7, #2
   211e4:	e01f      	b.n	21226 <net_ipv6_process_pkt+0x2a2>
			length++;
   211e6:	3701      	adds	r7, #1
   211e8:	b2bf      	uxth	r7, r7
			loc--;
   211ea:	f8bd 3018 	ldrh.w	r3, [sp, #24]
   211ee:	3b01      	subs	r3, #1
   211f0:	f8ad 3018 	strh.w	r3, [sp, #24]
		if (length >= len) {
   211f4:	45b8      	cmp	r8, r7
   211f6:	d960      	bls.n	212ba <net_ipv6_process_pkt+0x336>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_type);
   211f8:	f10d 0a20 	add.w	sl, sp, #32
   211fc:	f83a 1d08 	ldrh.w	r1, [sl, #-8]!
   21200:	f10d 0313 	add.w	r3, sp, #19
   21204:	9300      	str	r3, [sp, #0]
   21206:	2301      	movs	r3, #1
   21208:	4652      	mov	r2, sl
   2120a:	4620      	mov	r0, r4
   2120c:	f7fb ff93 	bl	1d136 <net_frag_read>
		frag = net_frag_read_u8(frag, loc, &loc, &opt_len);
   21210:	f8bd 1018 	ldrh.w	r1, [sp, #24]
   21214:	ab05      	add	r3, sp, #20
   21216:	9300      	str	r3, [sp, #0]
   21218:	2301      	movs	r3, #1
   2121a:	4652      	mov	r2, sl
   2121c:	f7fb ff8b 	bl	1d136 <net_frag_read>
		if (!frag && loc == 0xffff) {
   21220:	4604      	mov	r4, r0
   21222:	2800      	cmp	r0, #0
   21224:	d040      	beq.n	212a8 <net_ipv6_process_pkt+0x324>
	while (frag && (length < len)) {
   21226:	2c00      	cmp	r4, #0
   21228:	d047      	beq.n	212ba <net_ipv6_process_pkt+0x336>
   2122a:	45b8      	cmp	r8, r7
   2122c:	d945      	bls.n	212ba <net_ipv6_process_pkt+0x336>
		switch (opt_type) {
   2122e:	f89d 3013 	ldrb.w	r3, [sp, #19]
   21232:	2b00      	cmp	r3, #0
   21234:	d0d7      	beq.n	211e6 <net_ipv6_process_pkt+0x262>
   21236:	2b01      	cmp	r3, #1
   21238:	d009      	beq.n	2124e <net_ipv6_process_pkt+0x2ca>
	switch (opt_type & 0xc0) {
   2123a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
   2123e:	2b80      	cmp	r3, #128	; 0x80
   21240:	d019      	beq.n	21276 <net_ipv6_process_pkt+0x2f2>
   21242:	2bc0      	cmp	r3, #192	; 0xc0
   21244:	d012      	beq.n	2126c <net_ipv6_process_pkt+0x2e8>
   21246:	2b40      	cmp	r3, #64	; 0x40
   21248:	d00e      	beq.n	21268 <net_ipv6_process_pkt+0x2e4>
	return pkt;
   2124a:	462b      	mov	r3, r5
   2124c:	e01a      	b.n	21284 <net_ipv6_process_pkt+0x300>
			length += opt_len + 2;
   2124e:	f89d 3014 	ldrb.w	r3, [sp, #20]
   21252:	441f      	add	r7, r3
   21254:	b2bf      	uxth	r7, r7
   21256:	3702      	adds	r7, #2
   21258:	b2bf      	uxth	r7, r7
			loc += opt_len + 2;
   2125a:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   2125e:	4413      	add	r3, r2
   21260:	3302      	adds	r3, #2
   21262:	f8ad 3018 	strh.w	r3, [sp, #24]
   21266:	e7c5      	b.n	211f4 <net_ipv6_process_pkt+0x270>
		return NULL;
   21268:	2300      	movs	r3, #0
   2126a:	e00b      	b.n	21284 <net_ipv6_process_pkt+0x300>
	return pkt->frags->data;
   2126c:	68ab      	ldr	r3, [r5, #8]
   2126e:	689b      	ldr	r3, [r3, #8]
	return addr->s6_addr[0] == 0xFF;
   21270:	7e1b      	ldrb	r3, [r3, #24]
		if (net_is_ipv6_addr_mcast(&NET_IPV6_HDR(pkt)->dst)) {
   21272:	2bff      	cmp	r3, #255	; 0xff
   21274:	d013      	beq.n	2129e <net_ipv6_process_pkt+0x31a>
		net_icmpv6_send_error(pkt, NET_ICMPV6_PARAM_PROBLEM,
   21276:	463b      	mov	r3, r7
   21278:	2202      	movs	r2, #2
   2127a:	2104      	movs	r1, #4
   2127c:	4628      	mov	r0, r5
   2127e:	f7fd f9a1 	bl	1e5c4 <net_icmpv6_send_error>
		return NULL;
   21282:	2300      	movs	r3, #0
			if (!check_unknown_option(pkt, opt_type, length)) {
   21284:	b1b3      	cbz	r3, 212b4 <net_ipv6_process_pkt+0x330>
			length += opt_len + 2;
   21286:	f89d 3014 	ldrb.w	r3, [sp, #20]
   2128a:	441f      	add	r7, r3
   2128c:	b2bf      	uxth	r7, r7
   2128e:	3702      	adds	r7, #2
   21290:	b2bf      	uxth	r7, r7
			loc += opt_len;
   21292:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   21296:	4413      	add	r3, r2
   21298:	f8ad 3018 	strh.w	r3, [sp, #24]
   2129c:	e7aa      	b.n	211f4 <net_ipv6_process_pkt+0x270>
			return NULL;
   2129e:	2300      	movs	r3, #0
   212a0:	e7f0      	b.n	21284 <net_ipv6_process_pkt+0x300>
   212a2:	bf00      	nop
   212a4:	20002ab8 	.word	0x20002ab8
		if (!frag && loc == 0xffff) {
   212a8:	f8bd 2018 	ldrh.w	r2, [sp, #24]
   212ac:	f64f 73ff 	movw	r3, #65535	; 0xffff
   212b0:	429a      	cmp	r2, r3
   212b2:	d1b8      	bne.n	21226 <net_ipv6_process_pkt+0x2a2>
	return NULL;
   212b4:	465c      	mov	r4, fp
	*verdict = NET_DROP;
   212b6:	2302      	movs	r3, #2
   212b8:	e007      	b.n	212ca <net_ipv6_process_pkt+0x346>
	if (length != len) {
   212ba:	45b8      	cmp	r8, r7
   212bc:	d1fa      	bne.n	212b4 <net_ipv6_process_pkt+0x330>
	*pos += length;
   212be:	f8bd 301c 	ldrh.w	r3, [sp, #28]
   212c2:	441f      	add	r7, r3
   212c4:	f8ad 701c 	strh.w	r7, [sp, #28]
	*verdict = NET_CONTINUE;
   212c8:	2301      	movs	r3, #1
		if (verdict == NET_DROP) {
   212ca:	2b02      	cmp	r3, #2
   212cc:	f43f af5e 	beq.w	2118c <net_ipv6_process_pkt+0x208>
		next = next_hdr;
   212d0:	f89d 701f 	ldrb.w	r7, [sp, #31]
   212d4:	e6a9      	b.n	2102a <net_ipv6_process_pkt+0xa6>
		return NULL;
   212d6:	465c      	mov	r4, fp
		*verdict = NET_DROP;
   212d8:	2302      	movs	r3, #2
   212da:	e7f6      	b.n	212ca <net_ipv6_process_pkt+0x346>
   212dc:	46b9      	mov	r9, r7
   212de:	e001      	b.n	212e4 <net_ipv6_process_pkt+0x360>
	u16_t offset, total_len = 0;
   212e0:	2300      	movs	r3, #0
   212e2:	9302      	str	r3, [sp, #8]
	if (total_len > 0) {
   212e4:	9b02      	ldr	r3, [sp, #8]
   212e6:	b10b      	cbz	r3, 212ec <net_ipv6_process_pkt+0x368>
	pkt->ipv6_ext_len = len;
   212e8:	f885 303b 	strb.w	r3, [r5, #59]	; 0x3b
	switch (next) {
   212ec:	f1b9 0f11 	cmp.w	r9, #17
   212f0:	d011      	beq.n	21316 <net_ipv6_process_pkt+0x392>
   212f2:	f1b9 0f3a 	cmp.w	r9, #58	; 0x3a
   212f6:	d004      	beq.n	21302 <net_ipv6_process_pkt+0x37e>
   212f8:	f1b9 0f06 	cmp.w	r9, #6
   212fc:	d010      	beq.n	21320 <net_ipv6_process_pkt+0x39c>
	return NET_DROP;
   212fe:	2002      	movs	r0, #2
   21300:	e659      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
	icmp_hdr = net_icmpv6_get_hdr(pkt, &hdr);
   21302:	a906      	add	r1, sp, #24
   21304:	4628      	mov	r0, r5
   21306:	f7fc fe9c 	bl	1e042 <net_icmpv6_get_hdr>
	return net_icmpv6_input(pkt, icmp_hdr->type, icmp_hdr->code);
   2130a:	7842      	ldrb	r2, [r0, #1]
   2130c:	7801      	ldrb	r1, [r0, #0]
   2130e:	4628      	mov	r0, r5
   21310:	f7fd fb62 	bl	1e9d8 <net_icmpv6_input>
		return process_icmpv6_pkt(pkt, hdr);
   21314:	e64f      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_UDP, pkt);
   21316:	4629      	mov	r1, r5
   21318:	2011      	movs	r0, #17
   2131a:	f003 fbd3 	bl	24ac4 <net_conn_input>
   2131e:	e64a      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
		return net_conn_input(IPPROTO_TCP, pkt);
   21320:	4629      	mov	r1, r5
   21322:	2006      	movs	r0, #6
   21324:	f003 fbce 	bl	24ac4 <net_conn_input>
   21328:	e645      	b.n	20fb6 <net_ipv6_process_pkt+0x32>
   2132a:	bf00      	nop

0002132c <net_ipv6_init>:

void net_ipv6_init(void)
{
   2132c:	b508      	push	{r3, lr}
#if defined(CONFIG_NET_IPV6_NBR_CACHE)
	net_icmpv6_register_handler(&ns_input_handler);
   2132e:	4806      	ldr	r0, [pc, #24]	; (21348 <net_ipv6_init+0x1c>)
   21330:	f7fc fe0a 	bl	1df48 <net_icmpv6_register_handler>
	net_icmpv6_register_handler(&na_input_handler);
   21334:	4805      	ldr	r0, [pc, #20]	; (2134c <net_ipv6_init+0x20>)
   21336:	f7fc fe07 	bl	1df48 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_ND)
	net_icmpv6_register_handler(&ra_input_handler);
   2133a:	4805      	ldr	r0, [pc, #20]	; (21350 <net_ipv6_init+0x24>)
   2133c:	f7fc fe04 	bl	1df48 <net_icmpv6_register_handler>
#endif
#if defined(CONFIG_NET_IPV6_MLD)
	net_icmpv6_register_handler(&mld_query_input_handler);
   21340:	4804      	ldr	r0, [pc, #16]	; (21354 <net_ipv6_init+0x28>)
   21342:	f7fc fe01 	bl	1df48 <net_icmpv6_register_handler>
   21346:	bd08      	pop	{r3, pc}
   21348:	2000c298 	.word	0x2000c298
   2134c:	2000be80 	.word	0x2000be80
   21350:	2000c2a4 	.word	0x2000c2a4
   21354:	2000be74 	.word	0x2000be74

00021358 <uncompress_IPHC_header>:
	}
}
#endif

static inline bool uncompress_IPHC_header(struct net_pkt *pkt)
{
   21358:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
#if defined(CONFIG_NET_6LO_CONTEXT)
	struct net_6lo_context *src = NULL;
	struct net_6lo_context *dst = NULL;
#endif

	if (CIPHC[1] & NET_6LO_IPHC_CID_1) {
   2135c:	6883      	ldr	r3, [r0, #8]
   2135e:	689b      	ldr	r3, [r3, #8]
   21360:	f993 3001 	ldrsb.w	r3, [r3, #1]
   21364:	2b00      	cmp	r3, #0
   21366:	f2c0 831e 	blt.w	219a6 <uncompress_IPHC_header+0x64e>
   2136a:	4604      	mov	r4, r0
		NET_WARN("Context based uncompression not enabled");
		return false;
#endif
	}

	frag = net_pkt_get_frag(pkt, NET_6LO_RX_PKT_TIMEOUT);
   2136c:	2164      	movs	r1, #100	; 0x64
   2136e:	f7fb fd11 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   21372:	4607      	mov	r7, r0
   21374:	2800      	cmp	r0, #0
   21376:	f000 8319 	beq.w	219ac <uncompress_IPHC_header+0x654>
		return false;
	}

	ipv6 = (struct net_ipv6_hdr *)(frag->data);
   2137a:	6886      	ldr	r6, [r0, #8]

	/* Version is always 6 */
	ipv6->vtc = 0x60;
   2137c:	2360      	movs	r3, #96	; 0x60
   2137e:	7033      	strb	r3, [r6, #0]
	pkt->ip_hdr_len = len;
   21380:	2328      	movs	r3, #40	; 0x28
   21382:	f884 3033 	strb.w	r3, [r4, #51]	; 0x33
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   21386:	68a3      	ldr	r3, [r4, #8]
   21388:	689a      	ldr	r2, [r3, #8]
   2138a:	7813      	ldrb	r3, [r2, #0]
   2138c:	f003 0318 	and.w	r3, r3, #24
   21390:	2b18      	cmp	r3, #24
   21392:	d863      	bhi.n	2145c <uncompress_IPHC_header+0x104>
   21394:	e8df f003 	tbb	[pc, r3]
   21398:	6262620d 	.word	0x6262620d
   2139c:	62626262 	.word	0x62626262
   213a0:	6262623c 	.word	0x6262623c
   213a4:	62626262 	.word	0x62626262
   213a8:	6262624c 	.word	0x6262624c
   213ac:	62626262 	.word	0x62626262
   213b0:	5c          	.byte	0x5c
   213b1:	00          	.byte	0x00
		tcl = CIPHC[offset++];
   213b2:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   213b4:	0993      	lsrs	r3, r2, #6
   213b6:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   213ba:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   213bc:	7832      	ldrb	r2, [r6, #0]
   213be:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   213c2:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   213c4:	68a2      	ldr	r2, [r4, #8]
   213c6:	6892      	ldr	r2, [r2, #8]
   213c8:	f992 2003 	ldrsb.w	r2, [r2, #3]
   213cc:	f002 020f 	and.w	r2, r2, #15
   213d0:	ea42 1303 	orr.w	r3, r2, r3, lsl #4
   213d4:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   213d6:	68a3      	ldr	r3, [r4, #8]
   213d8:	6899      	ldr	r1, [r3, #8]
   213da:	2202      	movs	r2, #2
   213dc:	3104      	adds	r1, #4
   213de:	18b0      	adds	r0, r6, r2
   213e0:	f7de ff6e 	bl	2c0 <memcpy>
		offset += 2;
   213e4:	2506      	movs	r5, #6
	net_pkt_set_ip_hdr_len(pkt, NET_IPV6H_LEN);

	/* Uncompress Traffic class and Flow label */
	offset = uncompress_tfl(pkt, ipv6, offset);

	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   213e6:	68a3      	ldr	r3, [r4, #8]
   213e8:	689b      	ldr	r3, [r3, #8]
   213ea:	781a      	ldrb	r2, [r3, #0]
   213ec:	f012 0f04 	tst.w	r2, #4
   213f0:	d103      	bne.n	213fa <uncompress_IPHC_header+0xa2>
		ipv6->nexthdr = CIPHC[offset];
   213f2:	5d5b      	ldrb	r3, [r3, r5]
   213f4:	71b3      	strb	r3, [r6, #6]
		offset++;
   213f6:	3501      	adds	r5, #1
   213f8:	b2ed      	uxtb	r5, r5
	switch (CIPHC[0] & NET_6LO_IPHC_HLIM255) {
   213fa:	68a3      	ldr	r3, [r4, #8]
   213fc:	689a      	ldr	r2, [r3, #8]
   213fe:	7813      	ldrb	r3, [r2, #0]
   21400:	f003 0303 	and.w	r3, r3, #3
   21404:	2b03      	cmp	r3, #3
   21406:	d82f      	bhi.n	21468 <uncompress_IPHC_header+0x110>
   21408:	e8df f003 	tbb	[pc, r3]
   2140c:	4f4c492a 	.word	0x4f4c492a
		tcl = ((CIPHC[offset] & 0xF0) >> 6);
   21410:	7893      	ldrb	r3, [r2, #2]
   21412:	099a      	lsrs	r2, r3, #6
		ipv6->tcflow = ((tcl & 0x0F) << 4) | (CIPHC[offset++] & 0x0F);
   21414:	f003 030f 	and.w	r3, r3, #15
   21418:	ea43 1302 	orr.w	r3, r3, r2, lsl #4
   2141c:	7073      	strb	r3, [r6, #1]
		memcpy(&ipv6->flow, &CIPHC[offset], 2);
   2141e:	68a3      	ldr	r3, [r4, #8]
   21420:	6899      	ldr	r1, [r3, #8]
   21422:	2202      	movs	r2, #2
   21424:	3103      	adds	r1, #3
   21426:	18b0      	adds	r0, r6, r2
   21428:	f7de ff4a 	bl	2c0 <memcpy>
		offset += 2;
   2142c:	2505      	movs	r5, #5
   2142e:	e7da      	b.n	213e6 <uncompress_IPHC_header+0x8e>
		tcl = CIPHC[offset];
   21430:	7892      	ldrb	r2, [r2, #2]
		tcl = (tcl >> 6) | (tcl << 2);
   21432:	0993      	lsrs	r3, r2, #6
   21434:	ea43 0382 	orr.w	r3, r3, r2, lsl #2
   21438:	b2db      	uxtb	r3, r3
		ipv6->vtc |= ((tcl & 0xF0) >> 4);
   2143a:	7832      	ldrb	r2, [r6, #0]
   2143c:	ea42 1213 	orr.w	r2, r2, r3, lsr #4
   21440:	7032      	strb	r2, [r6, #0]
		ipv6->tcflow = (tcl & 0x0F) << 4;
   21442:	011b      	lsls	r3, r3, #4
   21444:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21446:	2300      	movs	r3, #0
   21448:	70b3      	strb	r3, [r6, #2]
   2144a:	70f3      	strb	r3, [r6, #3]
		offset++;
   2144c:	2503      	movs	r5, #3
   2144e:	e7ca      	b.n	213e6 <uncompress_IPHC_header+0x8e>
		ipv6->tcflow = 0;
   21450:	2300      	movs	r3, #0
   21452:	7073      	strb	r3, [r6, #1]
		ipv6->flow = 0;
   21454:	70b3      	strb	r3, [r6, #2]
   21456:	70f3      	strb	r3, [r6, #3]
   21458:	2502      	movs	r5, #2
   2145a:	e7c4      	b.n	213e6 <uncompress_IPHC_header+0x8e>
	switch (CIPHC[0] & NET_6LO_IPHC_TF_11) {
   2145c:	2502      	movs	r5, #2
   2145e:	e7c2      	b.n	213e6 <uncompress_IPHC_header+0x8e>
		ipv6->hop_limit = CIPHC[offset++];
   21460:	1c6b      	adds	r3, r5, #1
   21462:	5d52      	ldrb	r2, [r2, r5]
   21464:	71f2      	strb	r2, [r6, #7]
   21466:	b2dd      	uxtb	r5, r3

	/* Uncompress Hoplimit */
	offset = uncompress_hoplimit(pkt, ipv6, offset);

	/* First set to zero and copy relevant bits */
	memset(&ipv6->src.s6_addr[0], 0, 16);
   21468:	2210      	movs	r2, #16
   2146a:	2100      	movs	r1, #0
   2146c:	f106 0008 	add.w	r0, r6, #8
   21470:	f008 fa92 	bl	29998 <memset>
	memset(&ipv6->dst.s6_addr[0], 0, 16);
   21474:	2210      	movs	r2, #16
   21476:	2100      	movs	r1, #0
   21478:	f106 0018 	add.w	r0, r6, #24
   2147c:	f008 fa8c 	bl	29998 <memset>

	/* Uncompress Source Address */
	if (CIPHC[1] & NET_6LO_IPHC_SAC_1) {
   21480:	68a3      	ldr	r3, [r4, #8]
   21482:	689b      	ldr	r3, [r3, #8]
   21484:	785b      	ldrb	r3, [r3, #1]
   21486:	f013 0f40 	tst.w	r3, #64	; 0x40
   2148a:	d011      	beq.n	214b0 <uncompress_IPHC_header+0x158>
		NET_DBG("SAC_1");

		if ((CIPHC[1] & NET_6LO_IPHC_SAM_11) == NET_6LO_IPHC_SAM_00) {
   2148c:	f013 0f30 	tst.w	r3, #48	; 0x30
   21490:	d05e      	beq.n	21550 <uncompress_IPHC_header+0x1f8>
	}

	return true;

fail:
	net_pkt_frag_unref(frag);
   21492:	4638      	mov	r0, r7
   21494:	f7fb fccb 	bl	1ce2e <net_pkt_frag_unref>
	return false;
   21498:	2000      	movs	r0, #0
   2149a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		ipv6->hop_limit = 1;
   2149e:	2301      	movs	r3, #1
   214a0:	71f3      	strb	r3, [r6, #7]
   214a2:	e7e1      	b.n	21468 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 64;
   214a4:	2340      	movs	r3, #64	; 0x40
   214a6:	71f3      	strb	r3, [r6, #7]
   214a8:	e7de      	b.n	21468 <uncompress_IPHC_header+0x110>
		ipv6->hop_limit = 255;
   214aa:	23ff      	movs	r3, #255	; 0xff
   214ac:	71f3      	strb	r3, [r6, #7]
   214ae:	e7db      	b.n	21468 <uncompress_IPHC_header+0x110>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   214b0:	68a3      	ldr	r3, [r4, #8]
   214b2:	6899      	ldr	r1, [r3, #8]
   214b4:	784b      	ldrb	r3, [r1, #1]
   214b6:	f003 0330 	and.w	r3, r3, #48	; 0x30
   214ba:	2b10      	cmp	r3, #16
   214bc:	d059      	beq.n	21572 <uncompress_IPHC_header+0x21a>
   214be:	d93e      	bls.n	2153e <uncompress_IPHC_header+0x1e6>
   214c0:	2b20      	cmp	r3, #32
   214c2:	d065      	beq.n	21590 <uncompress_IPHC_header+0x238>
   214c4:	2b30      	cmp	r3, #48	; 0x30
   214c6:	d143      	bne.n	21550 <uncompress_IPHC_header+0x1f8>
		net_ipv6_addr_create_iid(&ipv6->src, net_pkt_ll_src(pkt));
   214c8:	f106 0808 	add.w	r8, r6, #8
	return &pkt->lladdr_src;
   214cc:	f104 0920 	add.w	r9, r4, #32
	addr->s6_addr[0] = 0xfe;
   214d0:	23fe      	movs	r3, #254	; 0xfe
   214d2:	7233      	strb	r3, [r6, #8]
	addr->s6_addr[1] = 0x80;
   214d4:	2380      	movs	r3, #128	; 0x80
   214d6:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   214da:	2300      	movs	r3, #0
   214dc:	f888 3002 	strb.w	r3, [r8, #2]
   214e0:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   214e4:	f888 3004 	strb.w	r3, [r8, #4]
   214e8:	f888 3005 	strb.w	r3, [r8, #5]
   214ec:	f888 3006 	strb.w	r3, [r8, #6]
   214f0:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   214f4:	f899 2004 	ldrb.w	r2, [r9, #4]
   214f8:	2a06      	cmp	r2, #6
   214fa:	d05b      	beq.n	215b4 <uncompress_IPHC_header+0x25c>
   214fc:	2a08      	cmp	r2, #8
   214fe:	f000 8082 	beq.w	21606 <uncompress_IPHC_header+0x2ae>
   21502:	2a02      	cmp	r2, #2
   21504:	d124      	bne.n	21550 <uncompress_IPHC_header+0x1f8>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21506:	f899 3005 	ldrb.w	r3, [r9, #5]
   2150a:	2b01      	cmp	r3, #1
   2150c:	d120      	bne.n	21550 <uncompress_IPHC_header+0x1f8>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   2150e:	2300      	movs	r3, #0
   21510:	f888 3008 	strb.w	r3, [r8, #8]
   21514:	f888 3009 	strb.w	r3, [r8, #9]
   21518:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   2151c:	22ff      	movs	r2, #255	; 0xff
   2151e:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   21522:	22fe      	movs	r2, #254	; 0xfe
   21524:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   21528:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   2152c:	6a23      	ldr	r3, [r4, #32]
   2152e:	781b      	ldrb	r3, [r3, #0]
   21530:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   21534:	6a23      	ldr	r3, [r4, #32]
   21536:	785b      	ldrb	r3, [r3, #1]
   21538:	f888 300f 	strb.w	r3, [r8, #15]
   2153c:	e008      	b.n	21550 <uncompress_IPHC_header+0x1f8>
	switch (CIPHC[1] & NET_6LO_IPHC_SAM_11) {
   2153e:	b93b      	cbnz	r3, 21550 <uncompress_IPHC_header+0x1f8>
		memcpy(ipv6->src.s6_addr, &CIPHC[offset], 16);
   21540:	2210      	movs	r2, #16
   21542:	4429      	add	r1, r5
   21544:	f106 0008 	add.w	r0, r6, #8
   21548:	f7de feba 	bl	2c0 <memcpy>
		offset += 16;
   2154c:	3510      	adds	r5, #16
   2154e:	b2ed      	uxtb	r5, r5
	if (CIPHC[1] & NET_6LO_IPHC_M_1) {
   21550:	68a3      	ldr	r3, [r4, #8]
   21552:	6899      	ldr	r1, [r3, #8]
   21554:	784b      	ldrb	r3, [r1, #1]
   21556:	f013 0f08 	tst.w	r3, #8
   2155a:	d160      	bne.n	2161e <uncompress_IPHC_header+0x2c6>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   2155c:	f003 0303 	and.w	r3, r3, #3
   21560:	2b03      	cmp	r3, #3
   21562:	f200 80ad 	bhi.w	216c0 <uncompress_IPHC_header+0x368>
   21566:	e8df f013 	tbh	[pc, r3, lsl #1]
   2156a:	00a3      	.short	0x00a3
   2156c:	00e500d6 	.word	0x00e500d6
   21570:	00f9      	.short	0x00f9
		ipv6->src.s6_addr[0] = 0xFE;
   21572:	23fe      	movs	r3, #254	; 0xfe
   21574:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21576:	2380      	movs	r3, #128	; 0x80
   21578:	7273      	strb	r3, [r6, #9]
		memcpy(&ipv6->src.s6_addr[8], &CIPHC[offset], 8);
   2157a:	68a3      	ldr	r3, [r4, #8]
   2157c:	6899      	ldr	r1, [r3, #8]
   2157e:	2208      	movs	r2, #8
   21580:	4429      	add	r1, r5
   21582:	f106 0010 	add.w	r0, r6, #16
   21586:	f7de fe9b 	bl	2c0 <memcpy>
		offset += 8;
   2158a:	3508      	adds	r5, #8
   2158c:	b2ed      	uxtb	r5, r5
   2158e:	e7df      	b.n	21550 <uncompress_IPHC_header+0x1f8>
		ipv6->src.s6_addr[0] = 0xFE;
   21590:	23fe      	movs	r3, #254	; 0xfe
   21592:	7233      	strb	r3, [r6, #8]
		ipv6->src.s6_addr[1] = 0x80;
   21594:	2280      	movs	r2, #128	; 0x80
   21596:	7272      	strb	r2, [r6, #9]
		ipv6->src.s6_addr[11] = 0xFF;
   21598:	22ff      	movs	r2, #255	; 0xff
   2159a:	74f2      	strb	r2, [r6, #19]
		ipv6->src.s6_addr[12] = 0xFE;
   2159c:	7533      	strb	r3, [r6, #20]
		memcpy(&ipv6->src.s6_addr[14], &CIPHC[offset], 2);
   2159e:	68a3      	ldr	r3, [r4, #8]
   215a0:	6899      	ldr	r1, [r3, #8]
   215a2:	2202      	movs	r2, #2
   215a4:	4429      	add	r1, r5
   215a6:	f106 0016 	add.w	r0, r6, #22
   215aa:	f7de fe89 	bl	2c0 <memcpy>
		offset += 2;
   215ae:	3502      	adds	r5, #2
   215b0:	b2ed      	uxtb	r5, r5
   215b2:	e7cd      	b.n	21550 <uncompress_IPHC_header+0x1f8>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   215b4:	2203      	movs	r2, #3
   215b6:	6a21      	ldr	r1, [r4, #32]
   215b8:	f108 0008 	add.w	r0, r8, #8
   215bc:	f7de fe80 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   215c0:	23ff      	movs	r3, #255	; 0xff
   215c2:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   215c6:	23fe      	movs	r3, #254	; 0xfe
   215c8:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   215cc:	6a21      	ldr	r1, [r4, #32]
   215ce:	2203      	movs	r2, #3
   215d0:	4411      	add	r1, r2
   215d2:	f108 000d 	add.w	r0, r8, #13
   215d6:	f7de fe73 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   215da:	f899 3005 	ldrb.w	r3, [r9, #5]
   215de:	2b02      	cmp	r3, #2
   215e0:	d00a      	beq.n	215f8 <uncompress_IPHC_header+0x2a0>
		if (lladdr->type == NET_LINK_ETHERNET) {
   215e2:	f899 3005 	ldrb.w	r3, [r9, #5]
   215e6:	2b03      	cmp	r3, #3
   215e8:	d1b2      	bne.n	21550 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   215ea:	f898 3008 	ldrb.w	r3, [r8, #8]
   215ee:	f083 0302 	eor.w	r3, r3, #2
   215f2:	f888 3008 	strb.w	r3, [r8, #8]
   215f6:	e7ab      	b.n	21550 <uncompress_IPHC_header+0x1f8>
			addr->s6_addr[8] ^= 0x02;
   215f8:	f898 3008 	ldrb.w	r3, [r8, #8]
   215fc:	f083 0302 	eor.w	r3, r3, #2
   21600:	f888 3008 	strb.w	r3, [r8, #8]
   21604:	e7ed      	b.n	215e2 <uncompress_IPHC_header+0x28a>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21606:	6a21      	ldr	r1, [r4, #32]
   21608:	f108 0008 	add.w	r0, r8, #8
   2160c:	f7de fe58 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   21610:	f898 3008 	ldrb.w	r3, [r8, #8]
   21614:	f083 0302 	eor.w	r3, r3, #2
   21618:	f888 3008 	strb.w	r3, [r8, #8]
   2161c:	e798      	b.n	21550 <uncompress_IPHC_header+0x1f8>
	if (CIPHC[1] & NET_6LO_IPHC_DAC_1) {
   2161e:	784b      	ldrb	r3, [r1, #1]
   21620:	f013 0f04 	tst.w	r3, #4
   21624:	d142      	bne.n	216ac <uncompress_IPHC_header+0x354>
	switch (CIPHC[1] & NET_6LO_IPHC_DAM_11) {
   21626:	f003 0303 	and.w	r3, r3, #3
   2162a:	2b03      	cmp	r3, #3
   2162c:	d848      	bhi.n	216c0 <uncompress_IPHC_header+0x368>
   2162e:	e8df f003 	tbb	[pc, r3]
   21632:	0b02      	.short	0x0b02
   21634:	311e      	.short	0x311e
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   21636:	2210      	movs	r2, #16
   21638:	4429      	add	r1, r5
   2163a:	f106 0018 	add.w	r0, r6, #24
   2163e:	f7de fe3f 	bl	2c0 <memcpy>
		offset += 16;
   21642:	3510      	adds	r5, #16
   21644:	b2ed      	uxtb	r5, r5
   21646:	e03b      	b.n	216c0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21648:	23ff      	movs	r3, #255	; 0xff
   2164a:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   2164c:	68a3      	ldr	r3, [r4, #8]
   2164e:	689b      	ldr	r3, [r3, #8]
   21650:	1c69      	adds	r1, r5, #1
   21652:	5d5b      	ldrb	r3, [r3, r5]
   21654:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[11], &CIPHC[offset], 5);
   21656:	68a3      	ldr	r3, [r4, #8]
   21658:	689b      	ldr	r3, [r3, #8]
   2165a:	2205      	movs	r2, #5
   2165c:	fa53 f181 	uxtab	r1, r3, r1
   21660:	f106 0023 	add.w	r0, r6, #35	; 0x23
   21664:	f7de fe2c 	bl	2c0 <memcpy>
		offset += 5;
   21668:	3506      	adds	r5, #6
   2166a:	b2ed      	uxtb	r5, r5
   2166c:	e028      	b.n	216c0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   2166e:	23ff      	movs	r3, #255	; 0xff
   21670:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = CIPHC[offset++];
   21672:	68a3      	ldr	r3, [r4, #8]
   21674:	689b      	ldr	r3, [r3, #8]
   21676:	1c69      	adds	r1, r5, #1
   21678:	5d5b      	ldrb	r3, [r3, r5]
   2167a:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[13], &CIPHC[offset], 3);
   2167c:	68a3      	ldr	r3, [r4, #8]
   2167e:	689b      	ldr	r3, [r3, #8]
   21680:	2203      	movs	r2, #3
   21682:	fa53 f181 	uxtab	r1, r3, r1
   21686:	f106 0025 	add.w	r0, r6, #37	; 0x25
   2168a:	f7de fe19 	bl	2c0 <memcpy>
		offset += 3;
   2168e:	3504      	adds	r5, #4
   21690:	b2ed      	uxtb	r5, r5
   21692:	e015      	b.n	216c0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFF;
   21694:	23ff      	movs	r3, #255	; 0xff
   21696:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x02;
   21698:	2302      	movs	r3, #2
   2169a:	7673      	strb	r3, [r6, #25]
		ipv6->dst.s6_addr[15] = CIPHC[offset++];
   2169c:	68a3      	ldr	r3, [r4, #8]
   2169e:	689a      	ldr	r2, [r3, #8]
   216a0:	1c6b      	adds	r3, r5, #1
   216a2:	5d52      	ldrb	r2, [r2, r5]
   216a4:	f886 2027 	strb.w	r2, [r6, #39]	; 0x27
   216a8:	b2dd      	uxtb	r5, r3
   216aa:	e009      	b.n	216c0 <uncompress_IPHC_header+0x368>
		return 0;
   216ac:	2500      	movs	r5, #0
   216ae:	e007      	b.n	216c0 <uncompress_IPHC_header+0x368>
		memcpy(&ipv6->dst.s6_addr[0], &CIPHC[offset], 16);
   216b0:	2210      	movs	r2, #16
   216b2:	4429      	add	r1, r5
   216b4:	f106 0018 	add.w	r0, r6, #24
   216b8:	f7de fe02 	bl	2c0 <memcpy>
		offset += 16;
   216bc:	3510      	adds	r5, #16
   216be:	b2ed      	uxtb	r5, r5
	net_buf_add(frag, NET_IPV6H_LEN);
   216c0:	f107 0a08 	add.w	sl, r7, #8
   216c4:	2128      	movs	r1, #40	; 0x28
   216c6:	4650      	mov	r0, sl
   216c8:	f7f8 fe94 	bl	1a3f4 <net_buf_simple_add>
	if (!(CIPHC[0] & NET_6LO_IPHC_NH_1)) {
   216cc:	68a3      	ldr	r3, [r4, #8]
   216ce:	689b      	ldr	r3, [r3, #8]
   216d0:	781a      	ldrb	r2, [r3, #0]
   216d2:	f012 0f04 	tst.w	r2, #4
   216d6:	f000 8114 	beq.w	21902 <uncompress_IPHC_header+0x5aa>
	if ((CIPHC[offset] & 0xF0) != NET_6LO_NHC_UDP_BARE) {
   216da:	5d5b      	ldrb	r3, [r3, r5]
   216dc:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   216e0:	2bf0      	cmp	r3, #240	; 0xf0
   216e2:	f47f aed6 	bne.w	21492 <uncompress_IPHC_header+0x13a>
	ipv6->nexthdr = IPPROTO_UDP;
   216e6:	2311      	movs	r3, #17
   216e8:	71b3      	strb	r3, [r6, #6]
	udp = (struct net_udp_hdr *)(frag->data + NET_IPV6H_LEN);
   216ea:	f8d7 b008 	ldr.w	fp, [r7, #8]
   216ee:	f10b 0928 	add.w	r9, fp, #40	; 0x28
	chksum = CIPHC[offset] & NET_6LO_NHC_UDP_CHKSUM_1;
   216f2:	68a3      	ldr	r3, [r4, #8]
   216f4:	6898      	ldr	r0, [r3, #8]
   216f6:	f810 8005 	ldrb.w	r8, [r0, r5]
   216fa:	f008 0808 	and.w	r8, r8, #8
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   216fe:	1c69      	adds	r1, r5, #1
   21700:	b2c9      	uxtb	r1, r1
   21702:	5d43      	ldrb	r3, [r0, r5]
   21704:	f003 0303 	and.w	r3, r3, #3
   21708:	2b03      	cmp	r3, #3
   2170a:	f200 80ed 	bhi.w	218e8 <uncompress_IPHC_header+0x590>
   2170e:	e8df f003 	tbb	[pc, r3]
   21712:	ae95      	.short	0xae95
   21714:	d3c0      	.short	0xd3c0
		ipv6->dst.s6_addr[0] = 0xFE;
   21716:	23fe      	movs	r3, #254	; 0xfe
   21718:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   2171a:	2380      	movs	r3, #128	; 0x80
   2171c:	7673      	strb	r3, [r6, #25]
		memcpy(&ipv6->dst.s6_addr[8], &CIPHC[offset], 8);
   2171e:	68a3      	ldr	r3, [r4, #8]
   21720:	6899      	ldr	r1, [r3, #8]
   21722:	2208      	movs	r2, #8
   21724:	4429      	add	r1, r5
   21726:	f106 0020 	add.w	r0, r6, #32
   2172a:	f7de fdc9 	bl	2c0 <memcpy>
		offset += 8;
   2172e:	3508      	adds	r5, #8
   21730:	b2ed      	uxtb	r5, r5
   21732:	e7c5      	b.n	216c0 <uncompress_IPHC_header+0x368>
		ipv6->dst.s6_addr[0] = 0xFE;
   21734:	23fe      	movs	r3, #254	; 0xfe
   21736:	7633      	strb	r3, [r6, #24]
		ipv6->dst.s6_addr[1] = 0x80;
   21738:	2280      	movs	r2, #128	; 0x80
   2173a:	7672      	strb	r2, [r6, #25]
		ipv6->dst.s6_addr[11] = 0xFF;
   2173c:	22ff      	movs	r2, #255	; 0xff
   2173e:	f886 2023 	strb.w	r2, [r6, #35]	; 0x23
		ipv6->dst.s6_addr[12] = 0xFE;
   21742:	f886 3024 	strb.w	r3, [r6, #36]	; 0x24
		memcpy(&ipv6->dst.s6_addr[14], &CIPHC[offset], 2);
   21746:	68a3      	ldr	r3, [r4, #8]
   21748:	6899      	ldr	r1, [r3, #8]
   2174a:	2202      	movs	r2, #2
   2174c:	4429      	add	r1, r5
   2174e:	f106 0026 	add.w	r0, r6, #38	; 0x26
   21752:	f7de fdb5 	bl	2c0 <memcpy>
		offset += 2;
   21756:	3502      	adds	r5, #2
   21758:	b2ed      	uxtb	r5, r5
   2175a:	e7b1      	b.n	216c0 <uncompress_IPHC_header+0x368>
		net_ipv6_addr_create_iid(&ipv6->dst, net_pkt_ll_dst(pkt));
   2175c:	f106 0818 	add.w	r8, r6, #24
	return &pkt->lladdr_dst;
   21760:	f104 0928 	add.w	r9, r4, #40	; 0x28
	addr->s6_addr[0] = 0xfe;
   21764:	23fe      	movs	r3, #254	; 0xfe
   21766:	7633      	strb	r3, [r6, #24]
	addr->s6_addr[1] = 0x80;
   21768:	2380      	movs	r3, #128	; 0x80
   2176a:	f888 3001 	strb.w	r3, [r8, #1]
	UNALIGNED_PUT(0, &addr->s6_addr16[1]);
   2176e:	2300      	movs	r3, #0
   21770:	f888 3002 	strb.w	r3, [r8, #2]
   21774:	f888 3003 	strb.w	r3, [r8, #3]
	UNALIGNED_PUT(0, &addr->s6_addr32[1]);
   21778:	f888 3004 	strb.w	r3, [r8, #4]
   2177c:	f888 3005 	strb.w	r3, [r8, #5]
   21780:	f888 3006 	strb.w	r3, [r8, #6]
   21784:	f888 3007 	strb.w	r3, [r8, #7]
	switch (lladdr->len) {
   21788:	f899 2004 	ldrb.w	r2, [r9, #4]
   2178c:	2a06      	cmp	r2, #6
   2178e:	d01f      	beq.n	217d0 <uncompress_IPHC_header+0x478>
   21790:	2a08      	cmp	r2, #8
   21792:	d047      	beq.n	21824 <uncompress_IPHC_header+0x4cc>
   21794:	2a02      	cmp	r2, #2
   21796:	d193      	bne.n	216c0 <uncompress_IPHC_header+0x368>
		if (lladdr->type == NET_LINK_IEEE802154) {
   21798:	f899 3005 	ldrb.w	r3, [r9, #5]
   2179c:	2b01      	cmp	r3, #1
   2179e:	d18f      	bne.n	216c0 <uncompress_IPHC_header+0x368>
			UNALIGNED_PUT(0, &addr->s6_addr32[2]);
   217a0:	2300      	movs	r3, #0
   217a2:	f888 3008 	strb.w	r3, [r8, #8]
   217a6:	f888 3009 	strb.w	r3, [r8, #9]
   217aa:	f888 300a 	strb.w	r3, [r8, #10]
			addr->s6_addr[11] = 0xff;
   217ae:	22ff      	movs	r2, #255	; 0xff
   217b0:	f888 200b 	strb.w	r2, [r8, #11]
			addr->s6_addr[12] = 0xfe;
   217b4:	22fe      	movs	r2, #254	; 0xfe
   217b6:	f888 200c 	strb.w	r2, [r8, #12]
			addr->s6_addr[13] = 0;
   217ba:	f888 300d 	strb.w	r3, [r8, #13]
			addr->s6_addr[14] = lladdr->addr[0];
   217be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   217c0:	781b      	ldrb	r3, [r3, #0]
   217c2:	f888 300e 	strb.w	r3, [r8, #14]
			addr->s6_addr[15] = lladdr->addr[1];
   217c6:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   217c8:	785b      	ldrb	r3, [r3, #1]
   217ca:	f888 300f 	strb.w	r3, [r8, #15]
   217ce:	e777      	b.n	216c0 <uncompress_IPHC_header+0x368>
		memcpy(&addr->s6_addr[8], lladdr->addr, 3);
   217d0:	2203      	movs	r2, #3
   217d2:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   217d4:	f108 0008 	add.w	r0, r8, #8
   217d8:	f7de fd72 	bl	2c0 <memcpy>
		addr->s6_addr[11] = 0xff;
   217dc:	23ff      	movs	r3, #255	; 0xff
   217de:	f888 300b 	strb.w	r3, [r8, #11]
		addr->s6_addr[12] = 0xfe;
   217e2:	23fe      	movs	r3, #254	; 0xfe
   217e4:	f888 300c 	strb.w	r3, [r8, #12]
		memcpy(&addr->s6_addr[13], lladdr->addr + 3, 3);
   217e8:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   217ea:	2203      	movs	r2, #3
   217ec:	4411      	add	r1, r2
   217ee:	f108 000d 	add.w	r0, r8, #13
   217f2:	f7de fd65 	bl	2c0 <memcpy>
		if (lladdr->type == NET_LINK_BLUETOOTH) {
   217f6:	f899 3005 	ldrb.w	r3, [r9, #5]
   217fa:	2b02      	cmp	r3, #2
   217fc:	d00b      	beq.n	21816 <uncompress_IPHC_header+0x4be>
		if (lladdr->type == NET_LINK_ETHERNET) {
   217fe:	f899 3005 	ldrb.w	r3, [r9, #5]
   21802:	2b03      	cmp	r3, #3
   21804:	f47f af5c 	bne.w	216c0 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21808:	f898 3008 	ldrb.w	r3, [r8, #8]
   2180c:	f083 0302 	eor.w	r3, r3, #2
   21810:	f888 3008 	strb.w	r3, [r8, #8]
   21814:	e754      	b.n	216c0 <uncompress_IPHC_header+0x368>
			addr->s6_addr[8] ^= 0x02;
   21816:	f898 3008 	ldrb.w	r3, [r8, #8]
   2181a:	f083 0302 	eor.w	r3, r3, #2
   2181e:	f888 3008 	strb.w	r3, [r8, #8]
   21822:	e7ec      	b.n	217fe <uncompress_IPHC_header+0x4a6>
		memcpy(&addr->s6_addr[8], lladdr->addr, lladdr->len);
   21824:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21826:	f108 0008 	add.w	r0, r8, #8
   2182a:	f7de fd49 	bl	2c0 <memcpy>
		addr->s6_addr[8] ^= 0x02;
   2182e:	f898 3008 	ldrb.w	r3, [r8, #8]
   21832:	f083 0302 	eor.w	r3, r3, #2
   21836:	f888 3008 	strb.w	r3, [r8, #8]
   2183a:	e741      	b.n	216c0 <uncompress_IPHC_header+0x368>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2183c:	2202      	movs	r2, #2
   2183e:	4401      	add	r1, r0
   21840:	4648      	mov	r0, r9
   21842:	f7de fd3d 	bl	2c0 <memcpy>
		offset += 2;
   21846:	1ce9      	adds	r1, r5, #3
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   21848:	68a3      	ldr	r3, [r4, #8]
   2184a:	689b      	ldr	r3, [r3, #8]
   2184c:	2202      	movs	r2, #2
   2184e:	fa53 f181 	uxtab	r1, r3, r1
   21852:	eb09 0002 	add.w	r0, r9, r2
   21856:	f7de fd33 	bl	2c0 <memcpy>
		offset += 2;
   2185a:	3505      	adds	r5, #5
   2185c:	b2ed      	uxtb	r5, r5
	if (!chksum) {
   2185e:	f1b8 0f00 	cmp.w	r8, #0
   21862:	d043      	beq.n	218ec <uncompress_IPHC_header+0x594>
	net_buf_add(frag, NET_UDPH_LEN);
   21864:	2108      	movs	r1, #8
   21866:	4650      	mov	r0, sl
   21868:	f7f8 fdc4 	bl	1a3f4 <net_buf_simple_add>
   2186c:	e04c      	b.n	21908 <uncompress_IPHC_header+0x5b0>
		memcpy(&udp->src_port, &CIPHC[offset], 2);
   2186e:	2202      	movs	r2, #2
   21870:	4401      	add	r1, r0
   21872:	4648      	mov	r0, r9
   21874:	f7de fd24 	bl	2c0 <memcpy>
		offset += 2;
   21878:	1ceb      	adds	r3, r5, #3
   2187a:	b2db      	uxtb	r3, r3
		udp->dst_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   2187c:	68a2      	ldr	r2, [r4, #8]
   2187e:	6892      	ldr	r2, [r2, #8]
   21880:	5cd3      	ldrb	r3, [r2, r3]
   21882:	021b      	lsls	r3, r3, #8
   21884:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   21888:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   2188c:	3504      	adds	r5, #4
   2188e:	b2ed      	uxtb	r5, r5
   21890:	e7e5      	b.n	2185e <uncompress_IPHC_header+0x506>
		udp->src_port = htons(((u16_t)NET_6LO_NHC_UDP_8_BIT_PORT
   21892:	5c43      	ldrb	r3, [r0, r1]
   21894:	021b      	lsls	r3, r3, #8
   21896:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   2189a:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		offset++;
   2189e:	1ca9      	adds	r1, r5, #2
		memcpy(&udp->dst_port, &CIPHC[offset], 2);
   218a0:	68a3      	ldr	r3, [r4, #8]
   218a2:	689b      	ldr	r3, [r3, #8]
   218a4:	2202      	movs	r2, #2
   218a6:	fa53 f181 	uxtab	r1, r3, r1
   218aa:	eb09 0002 	add.w	r0, r9, r2
   218ae:	f7de fd07 	bl	2c0 <memcpy>
		offset += 2;
   218b2:	3504      	adds	r5, #4
   218b4:	b2ed      	uxtb	r5, r5
   218b6:	e7d2      	b.n	2185e <uncompress_IPHC_header+0x506>
		udp->src_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   218b8:	5c43      	ldrb	r3, [r0, r1]
   218ba:	091b      	lsrs	r3, r3, #4
   218bc:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
   218c0:	021b      	lsls	r3, r3, #8
   218c2:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   218c6:	f8ab 3028 	strh.w	r3, [fp, #40]	; 0x28
		udp->dst_port = htons((NET_6LO_NHC_UDP_4_BIT_PORT << 4) |
   218ca:	68a3      	ldr	r3, [r4, #8]
   218cc:	689b      	ldr	r3, [r3, #8]
   218ce:	5c5b      	ldrb	r3, [r3, r1]
   218d0:	021b      	lsls	r3, r3, #8
   218d2:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
   218d6:	f443 4330 	orr.w	r3, r3, #45056	; 0xb000
   218da:	f043 03f0 	orr.w	r3, r3, #240	; 0xf0
   218de:	f8a9 3002 	strh.w	r3, [r9, #2]
		offset++;
   218e2:	3502      	adds	r5, #2
   218e4:	b2ed      	uxtb	r5, r5
   218e6:	e7ba      	b.n	2185e <uncompress_IPHC_header+0x506>
	switch (CIPHC[offset++] & NET_6LO_NHC_UDP_PORT_11) {
   218e8:	460d      	mov	r5, r1
   218ea:	e7b8      	b.n	2185e <uncompress_IPHC_header+0x506>
		memcpy(&udp->chksum, &CIPHC[offset], 2);
   218ec:	68a3      	ldr	r3, [r4, #8]
   218ee:	6899      	ldr	r1, [r3, #8]
   218f0:	2202      	movs	r2, #2
   218f2:	4429      	add	r1, r5
   218f4:	f10b 002e 	add.w	r0, fp, #46	; 0x2e
   218f8:	f7de fce2 	bl	2c0 <memcpy>
		offset += 2;
   218fc:	3502      	adds	r5, #2
   218fe:	b2ed      	uxtb	r5, r5
   21900:	e7b0      	b.n	21864 <uncompress_IPHC_header+0x50c>
	u8_t chksum = 0;
   21902:	f04f 0800 	mov.w	r8, #0
	struct net_udp_hdr *udp = NULL;
   21906:	46c1      	mov	r9, r8
	if (pkt->frags->len < offset) {
   21908:	68a3      	ldr	r3, [r4, #8]
   2190a:	899a      	ldrh	r2, [r3, #12]
   2190c:	fa1f fa85 	uxth.w	sl, r5
   21910:	4552      	cmp	r2, sl
   21912:	f4ff adbe 	bcc.w	21492 <uncompress_IPHC_header+0x13a>
	memmove(pkt->frags->data, pkt->frags->data + offset,
   21916:	6898      	ldr	r0, [r3, #8]
   21918:	1b52      	subs	r2, r2, r5
   2191a:	1941      	adds	r1, r0, r5
   2191c:	f007 ffd8 	bl	298d0 <memmove>
	pkt->frags->len -= offset;
   21920:	68a2      	ldr	r2, [r4, #8]
   21922:	8993      	ldrh	r3, [r2, #12]
   21924:	eba3 0a0a 	sub.w	sl, r3, sl
   21928:	f8a2 a00c 	strh.w	sl, [r2, #12]
	return pkt->ll_reserve;
   2192c:	f894 2032 	ldrb.w	r2, [r4, #50]	; 0x32
	if (net_pkt_ll_reserve(pkt)) {
   21930:	b94a      	cbnz	r2, 21946 <uncompress_IPHC_header+0x5ee>
	net_pkt_frag_insert(pkt, frag);
   21932:	4639      	mov	r1, r7
   21934:	4620      	mov	r0, r4
   21936:	f7fb fab7 	bl	1cea8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   2193a:	4620      	mov	r0, r4
   2193c:	f7fb fb6e 	bl	1d01c <net_pkt_compact>
	return net_buf_frags_len(pkt->frags);
   21940:	68a3      	ldr	r3, [r4, #8]
	size_t bytes = 0;
   21942:	2200      	movs	r2, #0
   21944:	e00b      	b.n	2195e <uncompress_IPHC_header+0x606>
		memcpy(frag->data - net_pkt_ll_reserve(pkt),
   21946:	68bb      	ldr	r3, [r7, #8]
   21948:	4250      	negs	r0, r2
	return pkt->frags->data;
   2194a:	68a1      	ldr	r1, [r4, #8]
   2194c:	6889      	ldr	r1, [r1, #8]
   2194e:	4401      	add	r1, r0
   21950:	4418      	add	r0, r3
   21952:	f7de fcb5 	bl	2c0 <memcpy>
   21956:	e7ec      	b.n	21932 <uncompress_IPHC_header+0x5da>
		bytes += buf->len;
   21958:	8999      	ldrh	r1, [r3, #12]
   2195a:	440a      	add	r2, r1
		buf = buf->frags;
   2195c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2195e:	2b00      	cmp	r3, #0
   21960:	d1fa      	bne.n	21958 <uncompress_IPHC_header+0x600>
	len = net_pkt_get_len(pkt) - NET_IPV6H_LEN;
   21962:	b293      	uxth	r3, r2
   21964:	3b28      	subs	r3, #40	; 0x28
   21966:	b29b      	uxth	r3, r3
	ipv6->len[0] = len >> 8;
   21968:	0a1a      	lsrs	r2, r3, #8
   2196a:	7132      	strb	r2, [r6, #4]
	ipv6->len[1] = (u8_t)len;
   2196c:	7173      	strb	r3, [r6, #5]
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2196e:	79b1      	ldrb	r1, [r6, #6]
   21970:	2911      	cmp	r1, #17
   21972:	d002      	beq.n	2197a <uncompress_IPHC_header+0x622>
	return true;
   21974:	2001      	movs	r0, #1
   21976:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if (ipv6->nexthdr == IPPROTO_UDP && udp) {
   2197a:	f1b9 0f00 	cmp.w	r9, #0
   2197e:	d018      	beq.n	219b2 <uncompress_IPHC_header+0x65a>
		udp->len = htons(len);
   21980:	ea42 2303 	orr.w	r3, r2, r3, lsl #8
   21984:	f8a9 3004 	strh.w	r3, [r9, #4]
		if (chksum) {
   21988:	f1b8 0f00 	cmp.w	r8, #0
   2198c:	d102      	bne.n	21994 <uncompress_IPHC_header+0x63c>
	return true;
   2198e:	2001      	movs	r0, #1
}
   21990:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return net_calc_chksum(pkt, IPPROTO_UDP);
   21994:	4620      	mov	r0, r4
   21996:	f7fc f8ba 	bl	1db0e <net_calc_chksum>
			udp->chksum = ~net_calc_chksum_udp(pkt);
   2199a:	43c0      	mvns	r0, r0
   2199c:	f8a9 0006 	strh.w	r0, [r9, #6]
	return true;
   219a0:	2001      	movs	r0, #1
   219a2:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   219a6:	2000      	movs	r0, #0
   219a8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
		return false;
   219ac:	2000      	movs	r0, #0
   219ae:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	return true;
   219b2:	2001      	movs	r0, #1
   219b4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

000219b8 <net_6lo_compress>:
	return true;
}

bool net_6lo_compress(struct net_pkt *pkt, bool iphc,
		      fragment_handler_t fragment)
{
   219b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   219bc:	b085      	sub	sp, #20
   219be:	4604      	mov	r4, r0
   219c0:	4617      	mov	r7, r2
	if (iphc) {
   219c2:	460d      	mov	r5, r1
   219c4:	b9f9      	cbnz	r1, 21a06 <net_6lo_compress+0x4e>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   219c6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   219ca:	f7fb f9e3 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   219ce:	4606      	mov	r6, r0
   219d0:	2800      	cmp	r0, #0
   219d2:	f000 8438 	beq.w	22246 <net_6lo_compress+0x88e>
	frag->data[0] = NET_6LO_DISPATCH_IPV6;
   219d6:	f850 3f08 	ldr.w	r3, [r0, #8]!
   219da:	2241      	movs	r2, #65	; 0x41
   219dc:	701a      	strb	r2, [r3, #0]
	net_buf_add(frag, 1);
   219de:	2101      	movs	r1, #1
   219e0:	f7f8 fd08 	bl	1a3f4 <net_buf_simple_add>
	net_pkt_frag_insert(pkt, frag);
   219e4:	4631      	mov	r1, r6
   219e6:	4620      	mov	r0, r4
   219e8:	f7fb fa5e 	bl	1cea8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   219ec:	4620      	mov	r0, r4
   219ee:	f7fb fb15 	bl	1d01c <net_pkt_compact>
	if (fragment) {
   219f2:	2f00      	cmp	r7, #0
   219f4:	f000 842a 	beq.w	2224c <net_6lo_compress+0x894>
		return fragment(pkt, -1);
   219f8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   219fc:	4620      	mov	r0, r4
   219fe:	47b8      	blx	r7
		return compress_IPHC_header(pkt, fragment);
	} else {
		return compress_ipv6_header(pkt, fragment);
	}
}
   21a00:	b005      	add	sp, #20
   21a02:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   21a06:	6883      	ldr	r3, [r0, #8]
   21a08:	689e      	ldr	r6, [r3, #8]
	if (pkt->frags->len < NET_IPV6H_LEN) {
   21a0a:	899b      	ldrh	r3, [r3, #12]
   21a0c:	2b27      	cmp	r3, #39	; 0x27
   21a0e:	f240 8411 	bls.w	22234 <net_6lo_compress+0x87c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   21a12:	79b2      	ldrb	r2, [r6, #6]
   21a14:	2a11      	cmp	r2, #17
   21a16:	d02f      	beq.n	21a78 <net_6lo_compress+0xc0>
	frag = net_pkt_get_frag(pkt, K_FOREVER);
   21a18:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   21a1c:	4620      	mov	r0, r4
   21a1e:	f7fb f9b9 	bl	1cd94 <net_pkt_get_frag>
	if (!frag) {
   21a22:	4680      	mov	r8, r0
   21a24:	2800      	cmp	r0, #0
   21a26:	f000 8408 	beq.w	2223a <net_6lo_compress+0x882>
	IPHC[offset++] = NET_6LO_DISPATCH_IPHC;
   21a2a:	6883      	ldr	r3, [r0, #8]
   21a2c:	2260      	movs	r2, #96	; 0x60
   21a2e:	701a      	strb	r2, [r3, #0]
	IPHC[offset++] = 0;
   21a30:	6883      	ldr	r3, [r0, #8]
   21a32:	2200      	movs	r2, #0
   21a34:	705a      	strb	r2, [r3, #1]
	tcl = ((ipv6->vtc & 0x0F) << 4) | ((ipv6->tcflow & 0xF0) >> 4);
   21a36:	7830      	ldrb	r0, [r6, #0]
   21a38:	7871      	ldrb	r1, [r6, #1]
   21a3a:	090b      	lsrs	r3, r1, #4
   21a3c:	ea43 1300 	orr.w	r3, r3, r0, lsl #4
   21a40:	b2db      	uxtb	r3, r3
	tcl = (tcl << 6) | (tcl >> 2);   /* ECN(2), DSCP(6) */
   21a42:	089a      	lsrs	r2, r3, #2
   21a44:	ea42 1383 	orr.w	r3, r2, r3, lsl #6
   21a48:	b25b      	sxtb	r3, r3
   21a4a:	b2da      	uxtb	r2, r3
	if (((ipv6->tcflow & 0x0F) == 0) && (ipv6->flow == 0)) {
   21a4c:	f011 0f0f 	tst.w	r1, #15
   21a50:	d121      	bne.n	21a96 <net_6lo_compress+0xde>
   21a52:	f8b6 e002 	ldrh.w	lr, [r6, #2]
   21a56:	f1be 0f00 	cmp.w	lr, #0
   21a5a:	d11c      	bne.n	21a96 <net_6lo_compress+0xde>
		if (((ipv6->vtc & 0x0F) == 0) && ((ipv6->tcflow & 0xF0) == 0)) {
   21a5c:	f010 0f0f 	tst.w	r0, #15
   21a60:	d10e      	bne.n	21a80 <net_6lo_compress+0xc8>
   21a62:	f011 0ff0 	tst.w	r1, #240	; 0xf0
   21a66:	d10b      	bne.n	21a80 <net_6lo_compress+0xc8>
			IPHC[0] |= NET_6LO_IPHC_TF_11;
   21a68:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21a6c:	7813      	ldrb	r3, [r2, #0]
   21a6e:	f043 0318 	orr.w	r3, r3, #24
   21a72:	7013      	strb	r3, [r2, #0]
   21a74:	2202      	movs	r2, #2
   21a76:	e025      	b.n	21ac4 <net_6lo_compress+0x10c>
	if (ipv6->nexthdr == IPPROTO_UDP &&
   21a78:	2b2f      	cmp	r3, #47	; 0x2f
   21a7a:	d8cd      	bhi.n	21a18 <net_6lo_compress+0x60>
		return false;
   21a7c:	2000      	movs	r0, #0
   21a7e:	e7bf      	b.n	21a00 <net_6lo_compress+0x48>
			IPHC[0] |= NET_6LO_IPHC_TF_10;
   21a80:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21a84:	780b      	ldrb	r3, [r1, #0]
   21a86:	f043 0310 	orr.w	r3, r3, #16
   21a8a:	700b      	strb	r3, [r1, #0]
			IPHC[offset++] = tcl;
   21a8c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21a90:	709a      	strb	r2, [r3, #2]
   21a92:	2203      	movs	r2, #3
   21a94:	e016      	b.n	21ac4 <net_6lo_compress+0x10c>
		if (((ipv6->vtc & 0x0F) == 0) && (ipv6->tcflow & 0x30)) {
   21a96:	f010 0f0f 	tst.w	r0, #15
   21a9a:	d102      	bne.n	21aa2 <net_6lo_compress+0xea>
   21a9c:	f011 0f30 	tst.w	r1, #48	; 0x30
   21aa0:	d128      	bne.n	21af4 <net_6lo_compress+0x13c>
			IPHC[0] |= NET_6LO_IPHC_TF_00;
   21aa2:	f8d8 3008 	ldr.w	r3, [r8, #8]
			IPHC[offset++] = tcl;
   21aa6:	709a      	strb	r2, [r3, #2]
			IPHC[offset++] = ipv6->tcflow & 0x0F;
   21aa8:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21aac:	7873      	ldrb	r3, [r6, #1]
   21aae:	f003 030f 	and.w	r3, r3, #15
   21ab2:	70d3      	strb	r3, [r2, #3]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   21ab4:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21ab8:	2202      	movs	r2, #2
   21aba:	18b1      	adds	r1, r6, r2
   21abc:	3004      	adds	r0, #4
   21abe:	f7de fbff 	bl	2c0 <memcpy>
			offset += 2;
   21ac2:	2206      	movs	r2, #6
	if (ipv6->nexthdr == IPPROTO_UDP) {
   21ac4:	79b3      	ldrb	r3, [r6, #6]
   21ac6:	2b11      	cmp	r3, #17
   21ac8:	d02d      	beq.n	21b26 <net_6lo_compress+0x16e>
		IPHC[offset++] = ipv6->nexthdr;
   21aca:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21ace:	f102 0901 	add.w	r9, r2, #1
   21ad2:	548b      	strb	r3, [r1, r2]
	switch (ipv6->hop_limit) {
   21ad4:	79f3      	ldrb	r3, [r6, #7]
   21ad6:	2b40      	cmp	r3, #64	; 0x40
   21ad8:	d040      	beq.n	21b5c <net_6lo_compress+0x1a4>
   21ada:	2bff      	cmp	r3, #255	; 0xff
   21adc:	d045      	beq.n	21b6a <net_6lo_compress+0x1b2>
   21ade:	2b01      	cmp	r3, #1
   21ae0:	d029      	beq.n	21b36 <net_6lo_compress+0x17e>
		IPHC[offset++] = ipv6->hop_limit;
   21ae2:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21ae6:	f109 0201 	add.w	r2, r9, #1
   21aea:	f801 3009 	strb.w	r3, [r1, r9]
   21aee:	fa5f f982 	uxtb.w	r9, r2
   21af2:	e026      	b.n	21b42 <net_6lo_compress+0x18a>
			IPHC[0] |= NET_6LO_IPHC_TF_01;
   21af4:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21af8:	780a      	ldrb	r2, [r1, #0]
   21afa:	f042 0208 	orr.w	r2, r2, #8
   21afe:	700a      	strb	r2, [r1, #0]
			IPHC[offset++] = (tcl & 0xC0) | (ipv6->tcflow & 0x0F);
   21b00:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b04:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   21b08:	f996 1001 	ldrsb.w	r1, [r6, #1]
   21b0c:	f001 010f 	and.w	r1, r1, #15
   21b10:	430b      	orrs	r3, r1
   21b12:	7093      	strb	r3, [r2, #2]
			memcpy(&IPHC[offset], &ipv6->flow, 2);
   21b14:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21b18:	2202      	movs	r2, #2
   21b1a:	18b1      	adds	r1, r6, r2
   21b1c:	3003      	adds	r0, #3
   21b1e:	f7de fbcf 	bl	2c0 <memcpy>
			offset += 2;
   21b22:	2205      	movs	r2, #5
   21b24:	e7ce      	b.n	21ac4 <net_6lo_compress+0x10c>
		IPHC[0] |= NET_6LO_IPHC_NH_1;
   21b26:	f8d8 1008 	ldr.w	r1, [r8, #8]
   21b2a:	780b      	ldrb	r3, [r1, #0]
   21b2c:	f043 0304 	orr.w	r3, r3, #4
   21b30:	700b      	strb	r3, [r1, #0]
   21b32:	4691      	mov	r9, r2
   21b34:	e7ce      	b.n	21ad4 <net_6lo_compress+0x11c>
		IPHC[0] |= NET_6LO_IPHC_HLIM1;
   21b36:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b3a:	7813      	ldrb	r3, [r2, #0]
   21b3c:	f043 0301 	orr.w	r3, r3, #1
   21b40:	7013      	strb	r3, [r2, #0]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21b42:	68b3      	ldr	r3, [r6, #8]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21b44:	b9c3      	cbnz	r3, 21b78 <net_6lo_compress+0x1c0>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21b46:	68f3      	ldr	r3, [r6, #12]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   21b48:	2b00      	cmp	r3, #0
   21b4a:	d176      	bne.n	21c3a <net_6lo_compress+0x282>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21b4c:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   21b4e:	2b00      	cmp	r3, #0
   21b50:	d175      	bne.n	21c3e <net_6lo_compress+0x286>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   21b52:	6973      	ldr	r3, [r6, #20]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21b54:	2b00      	cmp	r3, #0
   21b56:	d074      	beq.n	21c42 <net_6lo_compress+0x28a>
   21b58:	2300      	movs	r3, #0
   21b5a:	e00e      	b.n	21b7a <net_6lo_compress+0x1c2>
		IPHC[0] |= NET_6LO_IPHC_HLIM64;
   21b5c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b60:	7813      	ldrb	r3, [r2, #0]
   21b62:	f043 0302 	orr.w	r3, r3, #2
   21b66:	7013      	strb	r3, [r2, #0]
   21b68:	e7eb      	b.n	21b42 <net_6lo_compress+0x18a>
		IPHC[0] |= NET_6LO_IPHC_HLIM255;
   21b6a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21b6e:	7813      	ldrb	r3, [r2, #0]
   21b70:	f043 0303 	orr.w	r3, r3, #3
   21b74:	7013      	strb	r3, [r2, #0]
   21b76:	e7e4      	b.n	21b42 <net_6lo_compress+0x18a>
   21b78:	2300      	movs	r3, #0
	if (net_is_ipv6_addr_unspecified(&ipv6->src)) {
   21b7a:	2b00      	cmp	r3, #0
   21b7c:	d163      	bne.n	21c46 <net_6lo_compress+0x28e>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21b7e:	8932      	ldrh	r2, [r6, #8]
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21b80:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21b84:	429a      	cmp	r2, r3
   21b86:	d065      	beq.n	21c54 <net_6lo_compress+0x29c>
		IPHC[1] |= NET_6LO_IPHC_SAM_00;
   21b88:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], ipv6->src.s6_addr,
   21b8c:	2210      	movs	r2, #16
   21b8e:	f106 0108 	add.w	r1, r6, #8
   21b92:	4448      	add	r0, r9
   21b94:	f7de fb94 	bl	2c0 <memcpy>
		offset += sizeof(struct in6_addr);
   21b98:	f109 0910 	add.w	r9, r9, #16
   21b9c:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   21ba0:	f1b9 0f00 	cmp.w	r9, #0
   21ba4:	f000 812d 	beq.w	21e02 <net_6lo_compress+0x44a>
	return addr->s6_addr[0] == 0xFF;
   21ba8:	7e33      	ldrb	r3, [r6, #24]
	if (net_is_ipv6_addr_mcast(&ipv6->dst)) {
   21baa:	2bff      	cmp	r3, #255	; 0xff
   21bac:	f000 812e 	beq.w	21e0c <net_6lo_compress+0x454>
	return UNALIGNED_GET(&addr->s6_addr16[0]) == htons(0xFE80);
   21bb0:	8b32      	ldrh	r2, [r6, #24]
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21bb2:	f248 03fe 	movw	r3, #33022	; 0x80fe
   21bb6:	429a      	cmp	r2, r3
   21bb8:	f000 81bf 	beq.w	21f3a <net_6lo_compress+0x582>
		IPHC[1] |= NET_6LO_IPHC_DAM_00;
   21bbc:	f8d8 0008 	ldr.w	r0, [r8, #8]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21bc0:	2210      	movs	r2, #16
   21bc2:	f106 0118 	add.w	r1, r6, #24
   21bc6:	4448      	add	r0, r9
   21bc8:	f7de fb7a 	bl	2c0 <memcpy>
		offset += 16;
   21bcc:	f109 0910 	add.w	r9, r9, #16
   21bd0:	fa5f f989 	uxtb.w	r9, r9
	if (!offset) {
   21bd4:	f1b9 0f00 	cmp.w	r9, #0
   21bd8:	f000 8287 	beq.w	220ea <net_6lo_compress+0x732>
	if (ipv6->nexthdr != IPPROTO_UDP) {
   21bdc:	79b3      	ldrb	r3, [r6, #6]
   21bde:	2b11      	cmp	r3, #17
   21be0:	f000 8288 	beq.w	220f4 <net_6lo_compress+0x73c>
	compressed = NET_IPV6H_LEN;
   21be4:	2628      	movs	r6, #40	; 0x28
	net_buf_add(frag, offset);
   21be6:	f108 0a08 	add.w	sl, r8, #8
   21bea:	4649      	mov	r1, r9
   21bec:	4650      	mov	r0, sl
   21bee:	f7f8 fc01 	bl	1a3f4 <net_buf_simple_add>
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   21bf2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21bf6:	68a3      	ldr	r3, [r4, #8]
   21bf8:	6899      	ldr	r1, [r3, #8]
	       pkt->frags->len - compressed);
   21bfa:	899a      	ldrh	r2, [r3, #12]
	memcpy(&IPHC[offset], pkt->frags->data + compressed,
   21bfc:	1b92      	subs	r2, r2, r6
   21bfe:	4431      	add	r1, r6
   21c00:	4448      	add	r0, r9
   21c02:	f7de fb5d 	bl	2c0 <memcpy>
	net_buf_add(frag, pkt->frags->len - compressed);
   21c06:	68a3      	ldr	r3, [r4, #8]
   21c08:	8999      	ldrh	r1, [r3, #12]
   21c0a:	1b89      	subs	r1, r1, r6
   21c0c:	4650      	mov	r0, sl
   21c0e:	f7f8 fbf1 	bl	1a3f4 <net_buf_simple_add>
	net_pkt_frag_del(pkt, NULL, pkt->frags);
   21c12:	68a2      	ldr	r2, [r4, #8]
   21c14:	2100      	movs	r1, #0
   21c16:	4620      	mov	r0, r4
   21c18:	f7fb f928 	bl	1ce6c <net_pkt_frag_del>
	net_pkt_frag_insert(pkt, frag);
   21c1c:	4641      	mov	r1, r8
   21c1e:	4620      	mov	r0, r4
   21c20:	f7fb f942 	bl	1cea8 <net_pkt_frag_insert>
	net_pkt_compact(pkt);
   21c24:	4620      	mov	r0, r4
   21c26:	f7fb f9f9 	bl	1d01c <net_pkt_compact>
	if (fragment) {
   21c2a:	2f00      	cmp	r7, #0
   21c2c:	f000 8308 	beq.w	22240 <net_6lo_compress+0x888>
		return fragment(pkt, compressed - offset);
   21c30:	eba6 0109 	sub.w	r1, r6, r9
   21c34:	4620      	mov	r0, r4
   21c36:	47b8      	blx	r7
   21c38:	e6e2      	b.n	21a00 <net_6lo_compress+0x48>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   21c3a:	2300      	movs	r3, #0
   21c3c:	e79d      	b.n	21b7a <net_6lo_compress+0x1c2>
   21c3e:	2300      	movs	r3, #0
   21c40:	e79b      	b.n	21b7a <net_6lo_compress+0x1c2>
   21c42:	2301      	movs	r3, #1
   21c44:	e799      	b.n	21b7a <net_6lo_compress+0x1c2>
		IPHC[1] |= NET_6LO_IPHC_SAC_1;
   21c46:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21c4a:	7853      	ldrb	r3, [r2, #1]
   21c4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   21c50:	7053      	strb	r3, [r2, #1]
   21c52:	e7a5      	b.n	21ba0 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c54:	8973      	ldrh	r3, [r6, #10]
   21c56:	b91b      	cbnz	r3, 21c60 <net_6lo_compress+0x2a8>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21c58:	68f3      	ldr	r3, [r6, #12]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21c5a:	b33b      	cbz	r3, 21cac <net_6lo_compress+0x2f4>
   21c5c:	2300      	movs	r3, #0
   21c5e:	e000      	b.n	21c62 <net_6lo_compress+0x2aa>
   21c60:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->src) &&
   21c62:	9301      	str	r3, [sp, #4]
   21c64:	2b00      	cmp	r3, #0
   21c66:	d08f      	beq.n	21b88 <net_6lo_compress+0x1d0>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21c68:	6933      	ldr	r3, [r6, #16]
   21c6a:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21c6e:	d01f      	beq.n	21cb0 <net_6lo_compress+0x2f8>
   21c70:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->src)) {
   21c72:	469a      	mov	sl, r3
   21c74:	bb1b      	cbnz	r3, 21cbe <net_6lo_compress+0x306>
			if (!net_pkt_ll_src(pkt)) {
   21c76:	f114 0320 	adds.w	r3, r4, #32
   21c7a:	f000 80bf 	beq.w	21dfc <net_6lo_compress+0x444>
	if (!addr || !lladdr) {
   21c7e:	f116 0b08 	adds.w	fp, r6, #8
   21c82:	d008      	beq.n	21c96 <net_6lo_compress+0x2de>
   21c84:	b13b      	cbz	r3, 21c96 <net_6lo_compress+0x2de>
	switch (lladdr->len) {
   21c86:	791a      	ldrb	r2, [r3, #4]
   21c88:	2a06      	cmp	r2, #6
   21c8a:	d03e      	beq.n	21d0a <net_6lo_compress+0x352>
   21c8c:	2a08      	cmp	r2, #8
   21c8e:	f000 808c 	beq.w	21daa <net_6lo_compress+0x3f2>
   21c92:	2a02      	cmp	r2, #2
   21c94:	d026      	beq.n	21ce4 <net_6lo_compress+0x32c>
			if (net_ipv6_addr_based_on_ll(&ipv6->src,
   21c96:	f1ba 0f00 	cmp.w	sl, #0
   21c9a:	f000 809c 	beq.w	21dd6 <net_6lo_compress+0x41e>
				IPHC[1] |= NET_6LO_IPHC_SAM_11;
   21c9e:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ca2:	7853      	ldrb	r3, [r2, #1]
   21ca4:	f043 0330 	orr.w	r3, r3, #48	; 0x30
   21ca8:	7053      	strb	r3, [r2, #1]
   21caa:	e779      	b.n	21ba0 <net_6lo_compress+0x1e8>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21cac:	2301      	movs	r3, #1
   21cae:	e7d8      	b.n	21c62 <net_6lo_compress+0x2aa>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21cb0:	8ab3      	ldrh	r3, [r6, #20]
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21cb2:	2bfe      	cmp	r3, #254	; 0xfe
   21cb4:	d001      	beq.n	21cba <net_6lo_compress+0x302>
   21cb6:	2300      	movs	r3, #0
   21cb8:	e7db      	b.n	21c72 <net_6lo_compress+0x2ba>
   21cba:	2301      	movs	r3, #1
   21cbc:	e7d9      	b.n	21c72 <net_6lo_compress+0x2ba>
			IPHC[1] |= NET_6LO_IPHC_SAM_10;
   21cbe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21cc2:	7853      	ldrb	r3, [r2, #1]
   21cc4:	f043 0320 	orr.w	r3, r3, #32
   21cc8:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->src.s6_addr[14], 2);
   21cca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21cce:	2202      	movs	r2, #2
   21cd0:	f106 0116 	add.w	r1, r6, #22
   21cd4:	4448      	add	r0, r9
   21cd6:	f7de faf3 	bl	2c0 <memcpy>
			offset += 2;
   21cda:	f109 0902 	add.w	r9, r9, #2
   21cde:	fa5f f989 	uxtb.w	r9, r9
   21ce2:	e75d      	b.n	21ba0 <net_6lo_compress+0x1e8>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21ce4:	6a21      	ldr	r1, [r4, #32]
   21ce6:	f10b 000e 	add.w	r0, fp, #14
   21cea:	f007 fdc1 	bl	29870 <memcmp>
   21cee:	2800      	cmp	r0, #0
   21cf0:	d1d1      	bne.n	21c96 <net_6lo_compress+0x2de>
		    addr->s6_addr[10] == 0 &&
   21cf2:	f8db 3008 	ldr.w	r3, [fp, #8]
   21cf6:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21cfa:	d1cc      	bne.n	21c96 <net_6lo_compress+0x2de>
		    addr->s6_addr[12] == 0xfe) {
   21cfc:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21d00:	2bfe      	cmp	r3, #254	; 0xfe
   21d02:	d1c8      	bne.n	21c96 <net_6lo_compress+0x2de>
			return true;
   21d04:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d08:	e7c5      	b.n	21c96 <net_6lo_compress+0x2de>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21d0a:	795b      	ldrb	r3, [r3, #5]
   21d0c:	2b03      	cmp	r3, #3
   21d0e:	d026      	beq.n	21d5e <net_6lo_compress+0x3a6>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21d10:	2b02      	cmp	r3, #2
   21d12:	d1c0      	bne.n	21c96 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d14:	6a21      	ldr	r1, [r4, #32]
   21d16:	2202      	movs	r2, #2
   21d18:	3101      	adds	r1, #1
   21d1a:	f10b 0009 	add.w	r0, fp, #9
   21d1e:	f007 fda7 	bl	29870 <memcmp>
   21d22:	2800      	cmp	r0, #0
   21d24:	d1b7      	bne.n	21c96 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d26:	6a21      	ldr	r1, [r4, #32]
   21d28:	2203      	movs	r2, #3
   21d2a:	4411      	add	r1, r2
   21d2c:	f10b 000d 	add.w	r0, fp, #13
   21d30:	f007 fd9e 	bl	29870 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d34:	2800      	cmp	r0, #0
   21d36:	d1ae      	bne.n	21c96 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21d38:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d3c:	2bff      	cmp	r3, #255	; 0xff
   21d3e:	d1aa      	bne.n	21c96 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe
   21d40:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21d44:	2bfe      	cmp	r3, #254	; 0xfe
   21d46:	d1a6      	bne.n	21c96 <net_6lo_compress+0x2de>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   21d48:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21d4c:	f083 0302 	eor.w	r3, r3, #2
   21d50:	6a22      	ldr	r2, [r4, #32]
   21d52:	7812      	ldrb	r2, [r2, #0]
   21d54:	4293      	cmp	r3, r2
   21d56:	d19e      	bne.n	21c96 <net_6lo_compress+0x2de>
				return true;
   21d58:	f8dd a004 	ldr.w	sl, [sp, #4]
   21d5c:	e79b      	b.n	21c96 <net_6lo_compress+0x2de>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d5e:	6a21      	ldr	r1, [r4, #32]
   21d60:	2202      	movs	r2, #2
   21d62:	3101      	adds	r1, #1
   21d64:	f10b 0009 	add.w	r0, fp, #9
   21d68:	f007 fd82 	bl	29870 <memcmp>
   21d6c:	2800      	cmp	r0, #0
   21d6e:	d192      	bne.n	21c96 <net_6lo_compress+0x2de>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d70:	6a21      	ldr	r1, [r4, #32]
   21d72:	2203      	movs	r2, #3
   21d74:	4411      	add	r1, r2
   21d76:	f10b 000d 	add.w	r0, fp, #13
   21d7a:	f007 fd79 	bl	29870 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21d7e:	2800      	cmp	r0, #0
   21d80:	d189      	bne.n	21c96 <net_6lo_compress+0x2de>
			    addr->s6_addr[11] == 0xff &&
   21d82:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   21d86:	2bff      	cmp	r3, #255	; 0xff
   21d88:	d185      	bne.n	21c96 <net_6lo_compress+0x2de>
			    addr->s6_addr[12] == 0xfe &&
   21d8a:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   21d8e:	2bfe      	cmp	r3, #254	; 0xfe
   21d90:	d181      	bne.n	21c96 <net_6lo_compress+0x2de>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21d92:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21d96:	f083 0302 	eor.w	r3, r3, #2
   21d9a:	6a22      	ldr	r2, [r4, #32]
   21d9c:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   21d9e:	4293      	cmp	r3, r2
   21da0:	f47f af79 	bne.w	21c96 <net_6lo_compress+0x2de>
				return true;
   21da4:	f8dd a004 	ldr.w	sl, [sp, #4]
   21da8:	e775      	b.n	21c96 <net_6lo_compress+0x2de>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   21daa:	6a21      	ldr	r1, [r4, #32]
   21dac:	3a01      	subs	r2, #1
   21dae:	3101      	adds	r1, #1
   21db0:	f10b 0009 	add.w	r0, fp, #9
   21db4:	f007 fd5c 	bl	29870 <memcmp>
   21db8:	2800      	cmp	r0, #0
   21dba:	f47f af6c 	bne.w	21c96 <net_6lo_compress+0x2de>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   21dbe:	f89b 3008 	ldrb.w	r3, [fp, #8]
   21dc2:	f083 0302 	eor.w	r3, r3, #2
   21dc6:	6a22      	ldr	r2, [r4, #32]
   21dc8:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   21dca:	4293      	cmp	r3, r2
   21dcc:	f47f af63 	bne.w	21c96 <net_6lo_compress+0x2de>
			return true;
   21dd0:	f8dd a004 	ldr.w	sl, [sp, #4]
   21dd4:	e75f      	b.n	21c96 <net_6lo_compress+0x2de>
				IPHC[1] |= NET_6LO_IPHC_SAM_01;
   21dd6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21dda:	7853      	ldrb	r3, [r2, #1]
   21ddc:	f043 0310 	orr.w	r3, r3, #16
   21de0:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->src.s6_addr[8], 8);
   21de2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21de6:	2208      	movs	r2, #8
   21de8:	f106 0110 	add.w	r1, r6, #16
   21dec:	4448      	add	r0, r9
   21dee:	f7de fa67 	bl	2c0 <memcpy>
				offset += 8;
   21df2:	f109 0908 	add.w	r9, r9, #8
   21df6:	fa5f f989 	uxtb.w	r9, r9
   21dfa:	e6d1      	b.n	21ba0 <net_6lo_compress+0x1e8>
				return 0;
   21dfc:	f04f 0900 	mov.w	r9, #0
   21e00:	e6ce      	b.n	21ba0 <net_6lo_compress+0x1e8>
		net_pkt_frag_unref(frag);
   21e02:	4640      	mov	r0, r8
   21e04:	f7fb f813 	bl	1ce2e <net_pkt_frag_unref>
		return false;
   21e08:	2000      	movs	r0, #0
   21e0a:	e5f9      	b.n	21a00 <net_6lo_compress+0x48>
	IPHC[1] |= NET_6LO_IPHC_M_1;
   21e0c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21e10:	7853      	ldrb	r3, [r2, #1]
   21e12:	f043 0308 	orr.w	r3, r3, #8
   21e16:	7053      	strb	r3, [r2, #1]
	return ((addr->s6_addr[1] == 0x02) &&
   21e18:	7e73      	ldrb	r3, [r6, #25]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e1a:	2b02      	cmp	r3, #2
   21e1c:	d00a      	beq.n	21e34 <net_6lo_compress+0x47c>
   21e1e:	2300      	movs	r3, #0
	if (net_6lo_maddr_8_bit_compressible(&ipv6->dst)) {
   21e20:	b9db      	cbnz	r3, 21e5a <net_6lo_compress+0x4a2>
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21e22:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e24:	bb63      	cbnz	r3, 21e80 <net_6lo_compress+0x4c8>
   21e26:	6a32      	ldr	r2, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21e28:	bba2      	cbnz	r2, 21e94 <net_6lo_compress+0x4dc>
		 (addr->s6_addr[12] == 0x00));
   21e2a:	f896 2024 	ldrb.w	r2, [r6, #36]	; 0x24
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e2e:	b39a      	cbz	r2, 21e98 <net_6lo_compress+0x4e0>
   21e30:	2200      	movs	r2, #0
   21e32:	e026      	b.n	21e82 <net_6lo_compress+0x4ca>
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21e34:	8b73      	ldrh	r3, [r6, #26]
	return ((addr->s6_addr[1] == 0x02) &&
   21e36:	b943      	cbnz	r3, 21e4a <net_6lo_compress+0x492>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21e38:	69f3      	ldr	r3, [r6, #28]
		 (UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21e3a:	b943      	cbnz	r3, 21e4e <net_6lo_compress+0x496>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e3c:	6a33      	ldr	r3, [r6, #32]
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21e3e:	b943      	cbnz	r3, 21e52 <net_6lo_compress+0x49a>
		 (addr->s6_addr[14] == 0x00));
   21e40:	f896 3026 	ldrb.w	r3, [r6, #38]	; 0x26
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e44:	b13b      	cbz	r3, 21e56 <net_6lo_compress+0x49e>
   21e46:	2300      	movs	r3, #0
   21e48:	e7ea      	b.n	21e20 <net_6lo_compress+0x468>
   21e4a:	2300      	movs	r3, #0
   21e4c:	e7e8      	b.n	21e20 <net_6lo_compress+0x468>
   21e4e:	2300      	movs	r3, #0
   21e50:	e7e6      	b.n	21e20 <net_6lo_compress+0x468>
   21e52:	2300      	movs	r3, #0
   21e54:	e7e4      	b.n	21e20 <net_6lo_compress+0x468>
   21e56:	2301      	movs	r3, #1
   21e58:	e7e2      	b.n	21e20 <net_6lo_compress+0x468>
		IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21e5a:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21e5e:	7853      	ldrb	r3, [r2, #1]
   21e60:	f043 0303 	orr.w	r3, r3, #3
   21e64:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[15], 1);
   21e66:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21e6a:	2201      	movs	r2, #1
   21e6c:	f106 0127 	add.w	r1, r6, #39	; 0x27
   21e70:	4448      	add	r0, r9
   21e72:	f7de fa25 	bl	2c0 <memcpy>
		offset++;
   21e76:	f109 0901 	add.w	r9, r9, #1
   21e7a:	fa5f f989 	uxtb.w	r9, r9
   21e7e:	e6a9      	b.n	21bd4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e80:	2200      	movs	r2, #0
	} else if (net_6lo_maddr_32_bit_compressible(&ipv6->dst)) {
   21e82:	b95a      	cbnz	r2, 21e9c <net_6lo_compress+0x4e4>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21e84:	bb43      	cbnz	r3, 21ed8 <net_6lo_compress+0x520>
   21e86:	8c33      	ldrh	r3, [r6, #32]
	return ((UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00) &&
   21e88:	bbab      	cbnz	r3, 21ef6 <net_6lo_compress+0x53e>
		 (addr->s6_addr[10] == 0x00));
   21e8a:	f896 3022 	ldrb.w	r3, [r6, #34]	; 0x22
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21e8e:	b3a3      	cbz	r3, 21efa <net_6lo_compress+0x542>
   21e90:	2300      	movs	r3, #0
   21e92:	e022      	b.n	21eda <net_6lo_compress+0x522>
		 (UNALIGNED_GET(&addr->s6_addr32[2]) == 0x00) &&
   21e94:	2200      	movs	r2, #0
   21e96:	e7f4      	b.n	21e82 <net_6lo_compress+0x4ca>
   21e98:	2201      	movs	r2, #1
   21e9a:	e7f2      	b.n	21e82 <net_6lo_compress+0x4ca>
		IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21e9c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21ea0:	7853      	ldrb	r3, [r2, #1]
   21ea2:	f043 0302 	orr.w	r3, r3, #2
   21ea6:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21ea8:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21eac:	2201      	movs	r2, #1
   21eae:	f106 0119 	add.w	r1, r6, #25
   21eb2:	4448      	add	r0, r9
   21eb4:	f7de fa04 	bl	2c0 <memcpy>
		offset++;
   21eb8:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[13], 3);
   21ebc:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21ec0:	2203      	movs	r2, #3
   21ec2:	f106 0125 	add.w	r1, r6, #37	; 0x25
   21ec6:	fa53 f080 	uxtab	r0, r3, r0
   21eca:	f7de f9f9 	bl	2c0 <memcpy>
		offset += 3;
   21ece:	f109 0904 	add.w	r9, r9, #4
   21ed2:	fa5f f989 	uxtb.w	r9, r9
   21ed6:	e67d      	b.n	21bd4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21ed8:	2300      	movs	r3, #0
	} else if (net_6lo_maddr_48_bit_compressible(&ipv6->dst)) {
   21eda:	b983      	cbnz	r3, 21efe <net_6lo_compress+0x546>
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[0], 16);
   21edc:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21ee0:	2210      	movs	r2, #16
   21ee2:	f106 0118 	add.w	r1, r6, #24
   21ee6:	4448      	add	r0, r9
   21ee8:	f7de f9ea 	bl	2c0 <memcpy>
		offset += 16;
   21eec:	f109 0910 	add.w	r9, r9, #16
   21ef0:	fa5f f989 	uxtb.w	r9, r9
   21ef4:	e66e      	b.n	21bd4 <net_6lo_compress+0x21c>
		 (UNALIGNED_GET(&addr->s6_addr16[4]) == 0x00) &&
   21ef6:	2300      	movs	r3, #0
   21ef8:	e7ef      	b.n	21eda <net_6lo_compress+0x522>
   21efa:	2301      	movs	r3, #1
   21efc:	e7ed      	b.n	21eda <net_6lo_compress+0x522>
		IPHC[1] |= NET_6LO_IPHC_DAM_01;
   21efe:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f02:	7853      	ldrb	r3, [r2, #1]
   21f04:	f043 0301 	orr.w	r3, r3, #1
   21f08:	7053      	strb	r3, [r2, #1]
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[1], 1);
   21f0a:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21f0e:	2201      	movs	r2, #1
   21f10:	f106 0119 	add.w	r1, r6, #25
   21f14:	4448      	add	r0, r9
   21f16:	f7de f9d3 	bl	2c0 <memcpy>
		offset++;
   21f1a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &ipv6->dst.s6_addr[11], 5);
   21f1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   21f22:	2205      	movs	r2, #5
   21f24:	f106 0123 	add.w	r1, r6, #35	; 0x23
   21f28:	fa53 f080 	uxtab	r0, r3, r0
   21f2c:	f7de f9c8 	bl	2c0 <memcpy>
		offset += 5;
   21f30:	f109 0906 	add.w	r9, r9, #6
   21f34:	fa5f f989 	uxtb.w	r9, r9
   21f38:	e64c      	b.n	21bd4 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21f3a:	8b73      	ldrh	r3, [r6, #26]
   21f3c:	b91b      	cbnz	r3, 21f46 <net_6lo_compress+0x58e>
		 (UNALIGNED_GET(&addr->s6_addr32[1]) == 0x00));
   21f3e:	69f3      	ldr	r3, [r6, #28]
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21f40:	b343      	cbz	r3, 21f94 <net_6lo_compress+0x5dc>
   21f42:	2300      	movs	r3, #0
   21f44:	e000      	b.n	21f48 <net_6lo_compress+0x590>
   21f46:	2300      	movs	r3, #0
	if (net_is_ipv6_ll_addr(&ipv6->dst) &&
   21f48:	9301      	str	r3, [sp, #4]
   21f4a:	2b00      	cmp	r3, #0
   21f4c:	f43f ae36 	beq.w	21bbc <net_6lo_compress+0x204>
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21f50:	6a33      	ldr	r3, [r6, #32]
   21f52:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21f56:	d01f      	beq.n	21f98 <net_6lo_compress+0x5e0>
   21f58:	2300      	movs	r3, #0
		if (net_6lo_addr_16_bit_compressible(&ipv6->dst)) {
   21f5a:	469a      	mov	sl, r3
   21f5c:	bb1b      	cbnz	r3, 21fa6 <net_6lo_compress+0x5ee>
			if (!net_pkt_ll_dst(pkt)) {
   21f5e:	f114 0328 	adds.w	r3, r4, #40	; 0x28
   21f62:	f000 80bf 	beq.w	220e4 <net_6lo_compress+0x72c>
	if (!addr || !lladdr) {
   21f66:	f116 0b18 	adds.w	fp, r6, #24
   21f6a:	d008      	beq.n	21f7e <net_6lo_compress+0x5c6>
   21f6c:	b13b      	cbz	r3, 21f7e <net_6lo_compress+0x5c6>
	switch (lladdr->len) {
   21f6e:	791a      	ldrb	r2, [r3, #4]
   21f70:	2a06      	cmp	r2, #6
   21f72:	d03e      	beq.n	21ff2 <net_6lo_compress+0x63a>
   21f74:	2a08      	cmp	r2, #8
   21f76:	f000 808c 	beq.w	22092 <net_6lo_compress+0x6da>
   21f7a:	2a02      	cmp	r2, #2
   21f7c:	d026      	beq.n	21fcc <net_6lo_compress+0x614>
			if (net_ipv6_addr_based_on_ll(&ipv6->dst,
   21f7e:	f1ba 0f00 	cmp.w	sl, #0
   21f82:	f000 809c 	beq.w	220be <net_6lo_compress+0x706>
				IPHC[1] |= NET_6LO_IPHC_DAM_11;
   21f86:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21f8a:	7853      	ldrb	r3, [r2, #1]
   21f8c:	f043 0303 	orr.w	r3, r3, #3
   21f90:	7053      	strb	r3, [r2, #1]
   21f92:	e61f      	b.n	21bd4 <net_6lo_compress+0x21c>
	return ((UNALIGNED_GET(&addr->s6_addr16[1]) == 0x00) &&
   21f94:	2301      	movs	r3, #1
   21f96:	e7d7      	b.n	21f48 <net_6lo_compress+0x590>
		 (UNALIGNED_GET(&addr->s6_addr16[6]) == htons(0xFE00)));
   21f98:	8cb3      	ldrh	r3, [r6, #36]	; 0x24
	return ((UNALIGNED_GET(&addr->s6_addr32[2]) == htonl(0xFF)) &&
   21f9a:	2bfe      	cmp	r3, #254	; 0xfe
   21f9c:	d001      	beq.n	21fa2 <net_6lo_compress+0x5ea>
   21f9e:	2300      	movs	r3, #0
   21fa0:	e7db      	b.n	21f5a <net_6lo_compress+0x5a2>
   21fa2:	2301      	movs	r3, #1
   21fa4:	e7d9      	b.n	21f5a <net_6lo_compress+0x5a2>
			IPHC[1] |= NET_6LO_IPHC_DAM_10;
   21fa6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   21faa:	7853      	ldrb	r3, [r2, #1]
   21fac:	f043 0302 	orr.w	r3, r3, #2
   21fb0:	7053      	strb	r3, [r2, #1]
			memcpy(&IPHC[offset], &ipv6->dst.s6_addr[14], 2);
   21fb2:	f8d8 0008 	ldr.w	r0, [r8, #8]
   21fb6:	2202      	movs	r2, #2
   21fb8:	f106 0126 	add.w	r1, r6, #38	; 0x26
   21fbc:	4448      	add	r0, r9
   21fbe:	f7de f97f 	bl	2c0 <memcpy>
			offset += 2;
   21fc2:	f109 0902 	add.w	r9, r9, #2
   21fc6:	fa5f f989 	uxtb.w	r9, r9
   21fca:	e603      	b.n	21bd4 <net_6lo_compress+0x21c>
		if (!memcmp(&addr->s6_addr[14], lladdr->addr, lladdr->len) &&
   21fcc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21fce:	f10b 000e 	add.w	r0, fp, #14
   21fd2:	f007 fc4d 	bl	29870 <memcmp>
   21fd6:	2800      	cmp	r0, #0
   21fd8:	d1d1      	bne.n	21f7e <net_6lo_compress+0x5c6>
		    addr->s6_addr[10] == 0 &&
   21fda:	f8db 3008 	ldr.w	r3, [fp, #8]
   21fde:	f1b3 4f7f 	cmp.w	r3, #4278190080	; 0xff000000
   21fe2:	d1cc      	bne.n	21f7e <net_6lo_compress+0x5c6>
		    addr->s6_addr[12] == 0xfe) {
   21fe4:	f89b 300c 	ldrb.w	r3, [fp, #12]
		    addr->s6_addr[11] == 0xff &&
   21fe8:	2bfe      	cmp	r3, #254	; 0xfe
   21fea:	d1c8      	bne.n	21f7e <net_6lo_compress+0x5c6>
			return true;
   21fec:	f8dd a004 	ldr.w	sl, [sp, #4]
   21ff0:	e7c5      	b.n	21f7e <net_6lo_compress+0x5c6>
		if (lladdr->type == NET_LINK_ETHERNET) {
   21ff2:	795b      	ldrb	r3, [r3, #5]
   21ff4:	2b03      	cmp	r3, #3
   21ff6:	d026      	beq.n	22046 <net_6lo_compress+0x68e>
		} else if (lladdr->type == NET_LINK_BLUETOOTH) {
   21ff8:	2b02      	cmp	r3, #2
   21ffa:	d1c0      	bne.n	21f7e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   21ffc:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   21ffe:	2202      	movs	r2, #2
   22000:	3101      	adds	r1, #1
   22002:	f10b 0009 	add.w	r0, fp, #9
   22006:	f007 fc33 	bl	29870 <memcmp>
   2200a:	2800      	cmp	r0, #0
   2200c:	d1b7      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2200e:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22010:	2203      	movs	r2, #3
   22012:	4411      	add	r1, r2
   22014:	f10b 000d 	add.w	r0, fp, #13
   22018:	f007 fc2a 	bl	29870 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   2201c:	2800      	cmp	r0, #0
   2201e:	d1ae      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   22020:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22024:	2bff      	cmp	r3, #255	; 0xff
   22026:	d1aa      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe
   22028:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   2202c:	2bfe      	cmp	r3, #254	; 0xfe
   2202e:	d1a6      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    && (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]
   22030:	f89b 3008 	ldrb.w	r3, [fp, #8]
   22034:	f083 0302 	eor.w	r3, r3, #2
   22038:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   2203a:	7812      	ldrb	r2, [r2, #0]
   2203c:	4293      	cmp	r3, r2
   2203e:	d19e      	bne.n	21f7e <net_6lo_compress+0x5c6>
				return true;
   22040:	f8dd a004 	ldr.w	sl, [sp, #4]
   22044:	e79b      	b.n	21f7e <net_6lo_compress+0x5c6>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22046:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22048:	2202      	movs	r2, #2
   2204a:	3101      	adds	r1, #1
   2204c:	f10b 0009 	add.w	r0, fp, #9
   22050:	f007 fc0e 	bl	29870 <memcmp>
   22054:	2800      	cmp	r0, #0
   22056:	d192      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   22058:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   2205a:	2203      	movs	r2, #3
   2205c:	4411      	add	r1, r2
   2205e:	f10b 000d 	add.w	r0, fp, #13
   22062:	f007 fc05 	bl	29870 <memcmp>
			if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1], 2) &&
   22066:	2800      	cmp	r0, #0
   22068:	d189      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    addr->s6_addr[11] == 0xff &&
   2206a:	f89b 300b 	ldrb.w	r3, [fp, #11]
			    !memcmp(&addr->s6_addr[13], &lladdr->addr[3], 3) &&
   2206e:	2bff      	cmp	r3, #255	; 0xff
   22070:	d185      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    addr->s6_addr[12] == 0xfe &&
   22072:	f89b 300c 	ldrb.w	r3, [fp, #12]
			    addr->s6_addr[11] == 0xff &&
   22076:	2bfe      	cmp	r3, #254	; 0xfe
   22078:	d181      	bne.n	21f7e <net_6lo_compress+0x5c6>
			    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   2207a:	f89b 3008 	ldrb.w	r3, [fp, #8]
   2207e:	f083 0302 	eor.w	r3, r3, #2
   22082:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   22084:	7812      	ldrb	r2, [r2, #0]
			    addr->s6_addr[12] == 0xfe &&
   22086:	4293      	cmp	r3, r2
   22088:	f47f af79 	bne.w	21f7e <net_6lo_compress+0x5c6>
				return true;
   2208c:	f8dd a004 	ldr.w	sl, [sp, #4]
   22090:	e775      	b.n	21f7e <net_6lo_compress+0x5c6>
		if (!memcmp(&addr->s6_addr[9], &lladdr->addr[1],
   22092:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   22094:	3a01      	subs	r2, #1
   22096:	3101      	adds	r1, #1
   22098:	f10b 0009 	add.w	r0, fp, #9
   2209c:	f007 fbe8 	bl	29870 <memcmp>
   220a0:	2800      	cmp	r0, #0
   220a2:	f47f af6c 	bne.w	21f7e <net_6lo_compress+0x5c6>
		    (addr->s6_addr[8] ^ 0x02) == lladdr->addr[0]) {
   220a6:	f89b 3008 	ldrb.w	r3, [fp, #8]
   220aa:	f083 0302 	eor.w	r3, r3, #2
   220ae:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   220b0:	7812      	ldrb	r2, [r2, #0]
			    lladdr->len - 1) &&
   220b2:	4293      	cmp	r3, r2
   220b4:	f47f af63 	bne.w	21f7e <net_6lo_compress+0x5c6>
			return true;
   220b8:	f8dd a004 	ldr.w	sl, [sp, #4]
   220bc:	e75f      	b.n	21f7e <net_6lo_compress+0x5c6>
				IPHC[1] |= NET_6LO_IPHC_DAM_01;
   220be:	f8d8 2008 	ldr.w	r2, [r8, #8]
   220c2:	7853      	ldrb	r3, [r2, #1]
   220c4:	f043 0301 	orr.w	r3, r3, #1
   220c8:	7053      	strb	r3, [r2, #1]
				memcpy(&IPHC[offset], &ipv6->dst.s6_addr[8], 8);
   220ca:	f8d8 0008 	ldr.w	r0, [r8, #8]
   220ce:	2208      	movs	r2, #8
   220d0:	f106 0120 	add.w	r1, r6, #32
   220d4:	4448      	add	r0, r9
   220d6:	f7de f8f3 	bl	2c0 <memcpy>
				offset += 8;
   220da:	f109 0908 	add.w	r9, r9, #8
   220de:	fa5f f989 	uxtb.w	r9, r9
   220e2:	e577      	b.n	21bd4 <net_6lo_compress+0x21c>
				return 0;
   220e4:	f04f 0900 	mov.w	r9, #0
   220e8:	e574      	b.n	21bd4 <net_6lo_compress+0x21c>
		net_pkt_frag_unref(frag);
   220ea:	4640      	mov	r0, r8
   220ec:	f7fa fe9f 	bl	1ce2e <net_pkt_frag_unref>
		return false;
   220f0:	2000      	movs	r0, #0
   220f2:	e485      	b.n	21a00 <net_6lo_compress+0x48>
		udp = net_udp_get_hdr(pkt, &hdr);
   220f4:	a902      	add	r1, sp, #8
   220f6:	4620      	mov	r0, r4
   220f8:	f000 fc68 	bl	229cc <net_udp_get_hdr>
   220fc:	4606      	mov	r6, r0
		IPHC[offset] = NET_6LO_NHC_UDP_BARE;
   220fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22102:	22f0      	movs	r2, #240	; 0xf0
   22104:	f803 2009 	strb.w	r2, [r3, r9]
	if ((((htons(udp->src_port) >> 4) & 0xFFF) ==
   22108:	8802      	ldrh	r2, [r0, #0]
   2210a:	0a13      	lsrs	r3, r2, #8
   2210c:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   22110:	b29b      	uxth	r3, r3
   22112:	f640 720b 	movw	r2, #3851	; 0xf0b
   22116:	ebb2 1f13 	cmp.w	r2, r3, lsr #4
   2211a:	d025      	beq.n	22168 <net_6lo_compress+0x7b0>
	} else if (((htons(udp->dst_port) >> 8) & 0xFF) ==
   2211c:	8872      	ldrh	r2, [r6, #2]
   2211e:	b2d2      	uxtb	r2, r2
   22120:	2af0      	cmp	r2, #240	; 0xf0
   22122:	d046      	beq.n	221b2 <net_6lo_compress+0x7fa>
	} else if (((htons(udp->src_port) >> 8) & 0xFF) ==
   22124:	0a1b      	lsrs	r3, r3, #8
   22126:	2bf0      	cmp	r3, #240	; 0xf0
   22128:	d062      	beq.n	221f0 <net_6lo_compress+0x838>
		offset++;
   2212a:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 4);
   2212e:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22132:	2204      	movs	r2, #4
   22134:	4631      	mov	r1, r6
   22136:	fa53 f080 	uxtab	r0, r3, r0
   2213a:	f7de f8c1 	bl	2c0 <memcpy>
		offset += 4;
   2213e:	f109 0905 	add.w	r9, r9, #5
   22142:	fa5f f989 	uxtb.w	r9, r9
	memcpy(&IPHC[offset], &udp->chksum, 2);
   22146:	f8d8 0008 	ldr.w	r0, [r8, #8]
   2214a:	2202      	movs	r2, #2
   2214c:	1db1      	adds	r1, r6, #6
   2214e:	4448      	add	r0, r9
   22150:	f7de f8b6 	bl	2c0 <memcpy>
	offset += 2;
   22154:	f109 0902 	add.w	r9, r9, #2
   22158:	fa5f f989 	uxtb.w	r9, r9
		net_udp_set_hdr(pkt, udp);
   2215c:	4631      	mov	r1, r6
   2215e:	4620      	mov	r0, r4
   22160:	f000 fc74 	bl	22a4c <net_udp_set_hdr>
		compressed += NET_UDPH_LEN;
   22164:	2630      	movs	r6, #48	; 0x30
   22166:	e53e      	b.n	21be6 <net_6lo_compress+0x22e>
	    (((htons(udp->dst_port) >> 4) & 0xFFF) ==
   22168:	8841      	ldrh	r1, [r0, #2]
   2216a:	0a0a      	lsrs	r2, r1, #8
   2216c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   22170:	f3c2 120b 	ubfx	r2, r2, #4, #12
	    NET_6LO_NHC_UDP_4_BIT_PORT) &&
   22174:	f640 710b 	movw	r1, #3851	; 0xf0b
   22178:	428a      	cmp	r2, r1
   2217a:	d1cf      	bne.n	2211c <net_6lo_compress+0x764>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_11;
   2217c:	f8d8 2008 	ldr.w	r2, [r8, #8]
   22180:	f812 3009 	ldrb.w	r3, [r2, r9]
   22184:	f043 0303 	orr.w	r3, r3, #3
   22188:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   2218c:	f109 0101 	add.w	r1, r9, #1
   22190:	b2c9      	uxtb	r1, r1
		tmp = (u8_t)(htons(udp->src_port));
   22192:	8803      	ldrh	r3, [r0, #0]
   22194:	0a1b      	lsrs	r3, r3, #8
		tmp = tmp << 4;
   22196:	011b      	lsls	r3, r3, #4
   22198:	b2db      	uxtb	r3, r3
		tmp |= (((u8_t)(htons(udp->dst_port))) & 0x0F);
   2219a:	8842      	ldrh	r2, [r0, #2]
   2219c:	f3c2 2203 	ubfx	r2, r2, #8, #4
   221a0:	4313      	orrs	r3, r2
		IPHC[offset++] = tmp;
   221a2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   221a6:	f109 0902 	add.w	r9, r9, #2
   221aa:	fa5f f989 	uxtb.w	r9, r9
   221ae:	5453      	strb	r3, [r2, r1]
   221b0:	e7c9      	b.n	22146 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_01;
   221b2:	f8d8 2008 	ldr.w	r2, [r8, #8]
   221b6:	f812 3009 	ldrb.w	r3, [r2, r9]
   221ba:	f043 0301 	orr.w	r3, r3, #1
   221be:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   221c2:	f109 0001 	add.w	r0, r9, #1
		memcpy(&IPHC[offset], &udp->src_port, 2);
   221c6:	f8d8 3008 	ldr.w	r3, [r8, #8]
   221ca:	2202      	movs	r2, #2
   221cc:	4631      	mov	r1, r6
   221ce:	fa53 f080 	uxtab	r0, r3, r0
   221d2:	f7de f875 	bl	2c0 <memcpy>
		offset += 2;
   221d6:	f109 0303 	add.w	r3, r9, #3
   221da:	b2db      	uxtb	r3, r3
		IPHC[offset++] = (u8_t)(htons(udp->dst_port));
   221dc:	f8d8 1008 	ldr.w	r1, [r8, #8]
   221e0:	f109 0904 	add.w	r9, r9, #4
   221e4:	fa5f f989 	uxtb.w	r9, r9
   221e8:	8872      	ldrh	r2, [r6, #2]
   221ea:	0a12      	lsrs	r2, r2, #8
   221ec:	54ca      	strb	r2, [r1, r3]
   221ee:	e7aa      	b.n	22146 <net_6lo_compress+0x78e>
		IPHC[offset] |= NET_6LO_NHC_UDP_PORT_10;
   221f0:	f8d8 2008 	ldr.w	r2, [r8, #8]
   221f4:	f812 3009 	ldrb.w	r3, [r2, r9]
   221f8:	f043 0302 	orr.w	r3, r3, #2
   221fc:	f802 3009 	strb.w	r3, [r2, r9]
		offset++;
   22200:	f109 0301 	add.w	r3, r9, #1
   22204:	fa5f fe83 	uxtb.w	lr, r3
		IPHC[offset++] = (u8_t)(htons(udp->src_port));
   22208:	f109 0002 	add.w	r0, r9, #2
   2220c:	4631      	mov	r1, r6
   2220e:	f831 2b02 	ldrh.w	r2, [r1], #2
   22212:	0a12      	lsrs	r2, r2, #8
   22214:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22218:	f803 200e 	strb.w	r2, [r3, lr]
		memcpy(&IPHC[offset], &udp->dst_port, 2);
   2221c:	f8d8 3008 	ldr.w	r3, [r8, #8]
   22220:	2202      	movs	r2, #2
   22222:	fa53 f080 	uxtab	r0, r3, r0
   22226:	f7de f84b 	bl	2c0 <memcpy>
		offset += 2;
   2222a:	f109 0904 	add.w	r9, r9, #4
   2222e:	fa5f f989 	uxtb.w	r9, r9
   22232:	e788      	b.n	22146 <net_6lo_compress+0x78e>
		return false;
   22234:	2000      	movs	r0, #0
   22236:	f7ff bbe3 	b.w	21a00 <net_6lo_compress+0x48>
		return false;
   2223a:	2000      	movs	r0, #0
   2223c:	f7ff bbe0 	b.w	21a00 <net_6lo_compress+0x48>
	return true;
   22240:	4628      	mov	r0, r5
		return compress_IPHC_header(pkt, fragment);
   22242:	f7ff bbdd 	b.w	21a00 <net_6lo_compress+0x48>
		return false;
   22246:	4628      	mov	r0, r5
   22248:	f7ff bbda 	b.w	21a00 <net_6lo_compress+0x48>
	return true;
   2224c:	2001      	movs	r0, #1
		return compress_ipv6_header(pkt, fragment);
   2224e:	f7ff bbd7 	b.w	21a00 <net_6lo_compress+0x48>

00022252 <net_6lo_uncompress>:

bool net_6lo_uncompress(struct net_pkt *pkt)
{
   22252:	b510      	push	{r4, lr}
	NET_ASSERT(pkt && pkt->frags);

	if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPHC) ==
   22254:	6883      	ldr	r3, [r0, #8]
   22256:	689b      	ldr	r3, [r3, #8]
   22258:	781b      	ldrb	r3, [r3, #0]
   2225a:	f003 0260 	and.w	r2, r3, #96	; 0x60
   2225e:	2a60      	cmp	r2, #96	; 0x60
   22260:	d005      	beq.n	2226e <net_6lo_uncompress+0x1c>
	    NET_6LO_DISPATCH_IPHC) {
		/* Uncompress IPHC header */
		return uncompress_IPHC_header(pkt);

	} else if ((pkt->frags->data[0] & NET_6LO_DISPATCH_IPV6) ==
   22262:	f003 0341 	and.w	r3, r3, #65	; 0x41
   22266:	2b41      	cmp	r3, #65	; 0x41
   22268:	d004      	beq.n	22274 <net_6lo_uncompress+0x22>
		return uncompress_ipv6_header(pkt);
	}

	NET_DBG("pkt %p is not compressed", pkt);

	return true;
   2226a:	2001      	movs	r0, #1
}
   2226c:	bd10      	pop	{r4, pc}
		return uncompress_IPHC_header(pkt);
   2226e:	f7ff f873 	bl	21358 <uncompress_IPHC_header>
   22272:	bd10      	pop	{r4, pc}
	struct net_buf *frag = pkt->frags;
   22274:	6884      	ldr	r4, [r0, #8]
	memmove(frag->data, frag->data + 1, frag->len - 1);
   22276:	68a0      	ldr	r0, [r4, #8]
   22278:	89a2      	ldrh	r2, [r4, #12]
   2227a:	3a01      	subs	r2, #1
   2227c:	1c41      	adds	r1, r0, #1
   2227e:	f007 fb27 	bl	298d0 <memmove>
	frag->len -= 1;
   22282:	89a3      	ldrh	r3, [r4, #12]
   22284:	3b01      	subs	r3, #1
   22286:	81a3      	strh	r3, [r4, #12]
		return uncompress_ipv6_header(pkt);
   22288:	2001      	movs	r0, #1
   2228a:	bd10      	pop	{r4, pc}

0002228c <net_route_entry_remove>:
{
   2228c:	4770      	bx	lr

0002228e <net_route_entries_table_clear>:
{
   2228e:	4770      	bx	lr

00022290 <nbr_nexthop_put>:

	return nbr;
}

static int nbr_nexthop_put(struct net_nbr *nbr)
{
   22290:	b508      	push	{r3, lr}
	NET_ASSERT(nbr);

	NET_DBG("[%d] nbr %p iface %p", nbr->idx, nbr, nbr->iface);

	net_nbr_unref(nbr);
   22292:	f7fc fbd3 	bl	1ea3c <net_nbr_unref>

	return 0;
}
   22296:	2000      	movs	r0, #0
   22298:	bd08      	pop	{r3, pc}
	...

0002229c <net_route_get_nbr>:
{
   2229c:	b430      	push	{r4, r5}
   2229e:	4605      	mov	r5, r0
	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   222a0:	2300      	movs	r3, #0
   222a2:	e000      	b.n	222a6 <net_route_get_nbr+0xa>
   222a4:	3301      	adds	r3, #1
   222a6:	2b07      	cmp	r3, #7
   222a8:	dc0b      	bgt.n	222c2 <net_route_get_nbr+0x26>
	return &net_route_entries_pool[idx].nbr;
   222aa:	4c07      	ldr	r4, [pc, #28]	; (222c8 <net_route_get_nbr+0x2c>)
   222ac:	00da      	lsls	r2, r3, #3
   222ae:	1ad2      	subs	r2, r2, r3
   222b0:	00d1      	lsls	r1, r2, #3
   222b2:	1860      	adds	r0, r4, r1
		if (!nbr->ref) {
   222b4:	5c62      	ldrb	r2, [r4, r1]
   222b6:	2a00      	cmp	r2, #0
   222b8:	d0f4      	beq.n	222a4 <net_route_get_nbr+0x8>
		if (nbr->data == (u8_t *)route) {
   222ba:	68c2      	ldr	r2, [r0, #12]
   222bc:	42aa      	cmp	r2, r5
   222be:	d1f1      	bne.n	222a4 <net_route_get_nbr+0x8>
   222c0:	e000      	b.n	222c4 <net_route_get_nbr+0x28>
	return NULL;
   222c2:	2000      	movs	r0, #0
}
   222c4:	bc30      	pop	{r4, r5}
   222c6:	4770      	bx	lr
   222c8:	2000c2bc 	.word	0x2000c2bc

000222cc <net_route_lookup>:
	sys_slist_prepend(&routes, &route->node);
}

struct net_route_entry *net_route_lookup(struct net_if *iface,
					 struct in6_addr *dst)
{
   222cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   222d0:	b083      	sub	sp, #12
   222d2:	4606      	mov	r6, r0
   222d4:	9101      	str	r1, [sp, #4]
	struct net_route_entry *route, *found = NULL;
	u8_t longest_match = 0;
	int i;

	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   222d6:	2400      	movs	r4, #0
	u8_t longest_match = 0;
   222d8:	4625      	mov	r5, r4
	struct net_route_entry *route, *found = NULL;
   222da:	4627      	mov	r7, r4
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   222dc:	e00b      	b.n	222f6 <net_route_lookup+0x2a>
	return (struct net_route_entry *)nbr->data;
   222de:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   222e2:	00da      	lsls	r2, r3, #3
   222e4:	4b3f      	ldr	r3, [pc, #252]	; (223e4 <net_route_lookup+0x118>)
   222e6:	4413      	add	r3, r2
   222e8:	f8d3 800c 	ldr.w	r8, [r3, #12]
			continue;
		}

		route = net_route_data(nbr);

		if (route->prefix_len >= longest_match &&
   222ec:	f898 3020 	ldrb.w	r3, [r8, #32]
   222f0:	429d      	cmp	r5, r3
   222f2:	d917      	bls.n	22324 <net_route_lookup+0x58>
	for (i = 0; i < CONFIG_NET_MAX_ROUTES && longest_match < 128; i++) {
   222f4:	3401      	adds	r4, #1
   222f6:	2c07      	cmp	r4, #7
   222f8:	dc46      	bgt.n	22388 <net_route_lookup+0xbc>
   222fa:	f015 0f80 	tst.w	r5, #128	; 0x80
   222fe:	d143      	bne.n	22388 <net_route_lookup+0xbc>
		if (!nbr->ref) {
   22300:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   22304:	00d3      	lsls	r3, r2, #3
   22306:	4a37      	ldr	r2, [pc, #220]	; (223e4 <net_route_lookup+0x118>)
   22308:	5cd3      	ldrb	r3, [r2, r3]
   2230a:	2b00      	cmp	r3, #0
   2230c:	d0f2      	beq.n	222f4 <net_route_lookup+0x28>
		if (iface && nbr->iface != iface) {
   2230e:	2e00      	cmp	r6, #0
   22310:	d0e5      	beq.n	222de <net_route_lookup+0x12>
   22312:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   22316:	00da      	lsls	r2, r3, #3
   22318:	4b32      	ldr	r3, [pc, #200]	; (223e4 <net_route_lookup+0x118>)
   2231a:	4413      	add	r3, r2
   2231c:	689b      	ldr	r3, [r3, #8]
   2231e:	429e      	cmp	r6, r3
   22320:	d1e8      	bne.n	222f4 <net_route_lookup+0x28>
   22322:	e7dc      	b.n	222de <net_route_lookup+0x12>
		    net_is_ipv6_prefix((u8_t *)dst,
				       (u8_t *)&route->addr,
   22324:	f108 0910 	add.w	r9, r8, #16
	u8_t bits = 128 - length;
   22328:	f1c3 0a80 	rsb	sl, r3, #128	; 0x80
	u8_t bytes = length / 8;
   2232c:	ea4f 0bd3 	mov.w	fp, r3, lsr #3
	u8_t remain = bits % 8;
   22330:	f00a 0a07 	and.w	sl, sl, #7
	if (length > 128) {
   22334:	2b80      	cmp	r3, #128	; 0x80
   22336:	d906      	bls.n	22346 <net_route_lookup+0x7a>
		return false;
   22338:	2300      	movs	r3, #0
		if (route->prefix_len >= longest_match &&
   2233a:	2b00      	cmp	r3, #0
   2233c:	d0da      	beq.n	222f4 <net_route_lookup+0x28>
				       route->prefix_len)) {
			found = route;
			longest_match = route->prefix_len;
   2233e:	f898 5020 	ldrb.w	r5, [r8, #32]
			found = route;
   22342:	4647      	mov	r7, r8
   22344:	e7d6      	b.n	222f4 <net_route_lookup+0x28>
	if (memcmp(addr1, addr2, bytes)) {
   22346:	465a      	mov	r2, fp
   22348:	4649      	mov	r1, r9
   2234a:	9801      	ldr	r0, [sp, #4]
   2234c:	f007 fa90 	bl	29870 <memcmp>
   22350:	b9b0      	cbnz	r0, 22380 <net_route_lookup+0xb4>
	if (!remain) {
   22352:	f1ba 0f00 	cmp.w	sl, #0
   22356:	d015      	beq.n	22384 <net_route_lookup+0xb8>
	mask = ((0xff << (8 - remain)) ^ 0xff) << remain;
   22358:	f1ca 0208 	rsb	r2, sl, #8
   2235c:	23ff      	movs	r3, #255	; 0xff
   2235e:	4093      	lsls	r3, r2
   22360:	f083 03ff 	eor.w	r3, r3, #255	; 0xff
   22364:	fa03 fa0a 	lsl.w	sl, r3, sl
	return (addr1[bytes] & mask) == (addr2[bytes] & mask);
   22368:	9b01      	ldr	r3, [sp, #4]
   2236a:	f813 300b 	ldrb.w	r3, [r3, fp]
   2236e:	f819 200b 	ldrb.w	r2, [r9, fp]
   22372:	4053      	eors	r3, r2
   22374:	ea1a 0f03 	tst.w	sl, r3
   22378:	bf0c      	ite	eq
   2237a:	2301      	moveq	r3, #1
   2237c:	2300      	movne	r3, #0
   2237e:	e7dc      	b.n	2233a <net_route_lookup+0x6e>
		return false;
   22380:	2300      	movs	r3, #0
   22382:	e7da      	b.n	2233a <net_route_lookup+0x6e>
		return true;
   22384:	2301      	movs	r3, #1
   22386:	e7d8      	b.n	2233a <net_route_lookup+0x6e>
		}
	}

	if (found) {
   22388:	b1c7      	cbz	r7, 223bc <net_route_lookup+0xf0>
	sys_slist_find_and_remove(&routes, &route->node);
   2238a:	463a      	mov	r2, r7
	return list->head;
   2238c:	4b16      	ldr	r3, [pc, #88]	; (223e8 <net_route_lookup+0x11c>)
   2238e:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   22390:	2100      	movs	r1, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22392:	b16b      	cbz	r3, 223b0 <net_route_lookup+0xe4>
		if (test == node) {
   22394:	429a      	cmp	r2, r3
   22396:	d002      	beq.n	2239e <net_route_lookup+0xd2>
		prev = test;
   22398:	4619      	mov	r1, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   2239a:	681b      	ldr	r3, [r3, #0]
   2239c:	e7f9      	b.n	22392 <net_route_lookup+0xc6>
	if (!prev_node) {
   2239e:	b189      	cbz	r1, 223c4 <net_route_lookup+0xf8>
		prev_node->next = node->next;
   223a0:	683b      	ldr	r3, [r7, #0]
   223a2:	600b      	str	r3, [r1, #0]
		if (list->tail == node) {
   223a4:	4b10      	ldr	r3, [pc, #64]	; (223e8 <net_route_lookup+0x11c>)
   223a6:	685b      	ldr	r3, [r3, #4]
   223a8:	429a      	cmp	r2, r3
   223aa:	d014      	beq.n	223d6 <net_route_lookup+0x10a>
	node->next = NULL;
   223ac:	2300      	movs	r3, #0
   223ae:	603b      	str	r3, [r7, #0]
	node->next = list->head;
   223b0:	4b0d      	ldr	r3, [pc, #52]	; (223e8 <net_route_lookup+0x11c>)
   223b2:	6819      	ldr	r1, [r3, #0]
   223b4:	6039      	str	r1, [r7, #0]
	list->head = node;
   223b6:	601a      	str	r2, [r3, #0]
	if (!list->tail) {
   223b8:	685b      	ldr	r3, [r3, #4]
   223ba:	b17b      	cbz	r3, 223dc <net_route_lookup+0x110>

		update_route_access(found);
	}

	return found;
}
   223bc:	4638      	mov	r0, r7
   223be:	b003      	add	sp, #12
   223c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		list->head = node->next;
   223c4:	6839      	ldr	r1, [r7, #0]
   223c6:	4b08      	ldr	r3, [pc, #32]	; (223e8 <net_route_lookup+0x11c>)
   223c8:	6019      	str	r1, [r3, #0]
		if (list->tail == node) {
   223ca:	685b      	ldr	r3, [r3, #4]
   223cc:	429a      	cmp	r2, r3
   223ce:	d1ed      	bne.n	223ac <net_route_lookup+0xe0>
			list->tail = list->head;
   223d0:	4b05      	ldr	r3, [pc, #20]	; (223e8 <net_route_lookup+0x11c>)
   223d2:	6059      	str	r1, [r3, #4]
   223d4:	e7ea      	b.n	223ac <net_route_lookup+0xe0>
			list->tail = prev_node;
   223d6:	4b04      	ldr	r3, [pc, #16]	; (223e8 <net_route_lookup+0x11c>)
   223d8:	6059      	str	r1, [r3, #4]
   223da:	e7e7      	b.n	223ac <net_route_lookup+0xe0>
		list->tail = list->head;
   223dc:	4b02      	ldr	r3, [pc, #8]	; (223e8 <net_route_lookup+0x11c>)
   223de:	605a      	str	r2, [r3, #4]
	return found;
   223e0:	e7ec      	b.n	223bc <net_route_lookup+0xf0>
   223e2:	bf00      	nop
   223e4:	2000c2bc 	.word	0x2000c2bc
   223e8:	20001f64 	.word	0x20001f64

000223ec <net_route_del>:
int net_route_del(struct net_route_entry *route)
{
	struct net_nbr *nbr;
	struct net_route_nexthop *nexthop_route;

	if (!route) {
   223ec:	2800      	cmp	r0, #0
   223ee:	d046      	beq.n	2247e <net_route_del+0x92>
{
   223f0:	b538      	push	{r3, r4, r5, lr}
   223f2:	4604      	mov	r4, r0
		return -EINVAL;
	}

	sys_slist_find_and_remove(&routes, &route->node);
   223f4:	4601      	mov	r1, r0
	return list->head;
   223f6:	4b25      	ldr	r3, [pc, #148]	; (2248c <net_route_del+0xa0>)
   223f8:	681b      	ldr	r3, [r3, #0]
	sys_snode_t *prev = NULL;
   223fa:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   223fc:	b16b      	cbz	r3, 2241a <net_route_del+0x2e>
		if (test == node) {
   223fe:	4299      	cmp	r1, r3
   22400:	d002      	beq.n	22408 <net_route_del+0x1c>
		prev = test;
   22402:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   22404:	681b      	ldr	r3, [r3, #0]
   22406:	e7f9      	b.n	223fc <net_route_del+0x10>
	if (!prev_node) {
   22408:	b1aa      	cbz	r2, 22436 <net_route_del+0x4a>
		prev_node->next = node->next;
   2240a:	6823      	ldr	r3, [r4, #0]
   2240c:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   2240e:	4b1f      	ldr	r3, [pc, #124]	; (2248c <net_route_del+0xa0>)
   22410:	685b      	ldr	r3, [r3, #4]
   22412:	429c      	cmp	r4, r3
   22414:	d018      	beq.n	22448 <net_route_del+0x5c>
	node->next = NULL;
   22416:	2300      	movs	r3, #0
   22418:	6023      	str	r3, [r4, #0]

	nbr = net_route_get_nbr(route);
   2241a:	4620      	mov	r0, r4
   2241c:	f7ff ff3e 	bl	2229c <net_route_get_nbr>
	if (!nbr) {
   22420:	4605      	mov	r5, r0
   22422:	2800      	cmp	r0, #0
   22424:	d02e      	beq.n	22484 <net_route_del+0x98>
   22426:	2300      	movs	r3, #0
   22428:	461a      	mov	r2, r3
   2242a:	6881      	ldr	r1, [r0, #8]
   2242c:	4818      	ldr	r0, [pc, #96]	; (22490 <net_route_del+0xa4>)
   2242e:	f000 f977 	bl	22720 <net_mgmt_event_notify_with_info>
	return list->head;
   22432:	6864      	ldr	r4, [r4, #4]
   22434:	e011      	b.n	2245a <net_route_del+0x6e>
		list->head = node->next;
   22436:	6822      	ldr	r2, [r4, #0]
   22438:	4b14      	ldr	r3, [pc, #80]	; (2248c <net_route_del+0xa0>)
   2243a:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   2243c:	685b      	ldr	r3, [r3, #4]
   2243e:	429c      	cmp	r4, r3
   22440:	d1e9      	bne.n	22416 <net_route_del+0x2a>
			list->tail = list->head;
   22442:	4b12      	ldr	r3, [pc, #72]	; (2248c <net_route_del+0xa0>)
   22444:	605a      	str	r2, [r3, #4]
   22446:	e7e6      	b.n	22416 <net_route_del+0x2a>
			list->tail = prev_node;
   22448:	4b10      	ldr	r3, [pc, #64]	; (2248c <net_route_del+0xa0>)
   2244a:	605a      	str	r2, [r3, #4]
   2244c:	e7e3      	b.n	22416 <net_route_del+0x2a>

	net_route_info("Deleted", route, &route->addr);

	net_mgmt_event_notify(NET_EVENT_IPV6_ROUTE_DEL, nbr->iface);

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2244e:	4622      	mov	r2, r4
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22450:	b154      	cbz	r4, 22468 <net_route_del+0x7c>
	return node->next;
   22452:	6823      	ldr	r3, [r4, #0]
   22454:	b153      	cbz	r3, 2246c <net_route_del+0x80>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22456:	b15a      	cbz	r2, 22470 <net_route_del+0x84>
	return node->next;
   22458:	6824      	ldr	r4, [r4, #0]
   2245a:	b15c      	cbz	r4, 22474 <net_route_del+0x88>
		if (!nexthop_route->nbr) {
   2245c:	6860      	ldr	r0, [r4, #4]
   2245e:	2800      	cmp	r0, #0
   22460:	d0f5      	beq.n	2244e <net_route_del+0x62>
			continue;
		}

		nbr_nexthop_put(nexthop_route->nbr);
   22462:	f7ff ff15 	bl	22290 <nbr_nexthop_put>
   22466:	e7f2      	b.n	2244e <net_route_del+0x62>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22468:	4623      	mov	r3, r4
   2246a:	e7f3      	b.n	22454 <net_route_del+0x68>
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   2246c:	2400      	movs	r4, #0
   2246e:	e7f4      	b.n	2245a <net_route_del+0x6e>
   22470:	2400      	movs	r4, #0
   22472:	e7f2      	b.n	2245a <net_route_del+0x6e>
	net_nbr_unref(nbr);
   22474:	4628      	mov	r0, r5
   22476:	f7fc fae1 	bl	1ea3c <net_nbr_unref>
	}

	nbr_free(nbr);

	return 0;
   2247a:	2000      	movs	r0, #0
   2247c:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   2247e:	f06f 0015 	mvn.w	r0, #21
   22482:	4770      	bx	lr
		return -ENOENT;
   22484:	f06f 0001 	mvn.w	r0, #1
}
   22488:	bd38      	pop	{r3, r4, r5, pc}
   2248a:	bf00      	nop
   2248c:	20001f64 	.word	0x20001f64
   22490:	f060000c 	.word	0xf060000c

00022494 <net_route_get_nexthop>:
struct in6_addr *net_route_get_nexthop(struct net_route_entry *route)
{
	struct net_route_nexthop *nexthop_route;
	struct net_ipv6_nbr_data *ipv6_nbr_data;

	if (!route) {
   22494:	b1b8      	cbz	r0, 224c6 <net_route_get_nexthop+0x32>
	return list->head;
   22496:	6843      	ldr	r3, [r0, #4]
		return NULL;
	}

	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   22498:	b19b      	cbz	r3, 224c2 <net_route_get_nexthop+0x2e>
		struct in6_addr *addr;

		NET_ASSERT(nexthop_route->nbr->idx != NET_NBR_LLADDR_UNKNOWN);

		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   2249a:	685a      	ldr	r2, [r3, #4]
   2249c:	7851      	ldrb	r1, [r2, #1]
   2249e:	29ff      	cmp	r1, #255	; 0xff
   224a0:	d002      	beq.n	224a8 <net_route_get_nexthop+0x14>
   224a2:	68d0      	ldr	r0, [r2, #12]
		}

		ipv6_nbr_data = net_ipv6_nbr_data(nexthop_route->nbr);
		NET_ASSERT(ipv6_nbr_data);

		addr = &ipv6_nbr_data->addr;
   224a4:	3004      	adds	r0, #4
		NET_ASSERT(addr);

		return addr;
   224a6:	4770      	bx	lr
	SYS_SLIST_FOR_EACH_CONTAINER(&route->nexthop, nexthop_route, node) {
   224a8:	4619      	mov	r1, r3
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   224aa:	b123      	cbz	r3, 224b6 <net_route_get_nexthop+0x22>
	return node->next;
   224ac:	681a      	ldr	r2, [r3, #0]
   224ae:	b132      	cbz	r2, 224be <net_route_get_nexthop+0x2a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   224b0:	b119      	cbz	r1, 224ba <net_route_get_nexthop+0x26>
	return node->next;
   224b2:	681b      	ldr	r3, [r3, #0]
   224b4:	e7f0      	b.n	22498 <net_route_get_nexthop+0x4>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   224b6:	461a      	mov	r2, r3
   224b8:	e7f9      	b.n	224ae <net_route_get_nexthop+0x1a>
   224ba:	2300      	movs	r3, #0
   224bc:	e7ec      	b.n	22498 <net_route_get_nexthop+0x4>
   224be:	2300      	movs	r3, #0
   224c0:	e7ea      	b.n	22498 <net_route_get_nexthop+0x4>
	}

	return NULL;
   224c2:	2000      	movs	r0, #0
   224c4:	4770      	bx	lr
		return NULL;
   224c6:	2000      	movs	r0, #0
}
   224c8:	4770      	bx	lr
	...

000224cc <net_route_foreach>:

int net_route_foreach(net_route_cb_t cb, void *user_data)
{
   224cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   224ce:	4607      	mov	r7, r0
   224d0:	460e      	mov	r6, r1
	int i, ret = 0;
   224d2:	2500      	movs	r5, #0

	for (i = 0; i < CONFIG_NET_MAX_ROUTES; i++) {
   224d4:	462c      	mov	r4, r5
   224d6:	e000      	b.n	224da <net_route_foreach+0xe>
   224d8:	3401      	adds	r4, #1
   224da:	2c07      	cmp	r4, #7
   224dc:	dc0b      	bgt.n	224f6 <net_route_foreach+0x2a>
	return (struct net_route_entry *)nbr->data;
   224de:	ebc4 03c4 	rsb	r3, r4, r4, lsl #3
   224e2:	00da      	lsls	r2, r3, #3
   224e4:	4b05      	ldr	r3, [pc, #20]	; (224fc <net_route_foreach+0x30>)
   224e6:	4413      	add	r3, r2
   224e8:	68d8      	ldr	r0, [r3, #12]
		if (!nbr) {
			continue;
		}

		route = net_route_data(nbr);
		if (!route) {
   224ea:	2800      	cmp	r0, #0
   224ec:	d0f4      	beq.n	224d8 <net_route_foreach+0xc>
			continue;
		}

		cb(route, user_data);
   224ee:	4631      	mov	r1, r6
   224f0:	47b8      	blx	r7

		ret++;
   224f2:	3501      	adds	r5, #1
   224f4:	e7f0      	b.n	224d8 <net_route_foreach+0xc>
	}

	return ret;
}
   224f6:	4628      	mov	r0, r5
   224f8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   224fa:	bf00      	nop
   224fc:	2000c2bc 	.word	0x2000c2bc

00022500 <net_route_get_info>:

bool net_route_get_info(struct net_if *iface,
			struct in6_addr *dst,
			struct net_route_entry **route,
			struct in6_addr **nexthop)
{
   22500:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   22502:	4607      	mov	r7, r0
   22504:	460c      	mov	r4, r1
   22506:	4615      	mov	r5, r2
   22508:	461e      	mov	r6, r3
	struct net_if_router *router;

	/* Search in neighbor table first, if not search in routing table. */
	if (net_ipv6_nbr_lookup(iface, dst)) {
   2250a:	f7fd f961 	bl	1f7d0 <net_ipv6_nbr_lookup>
   2250e:	b120      	cbz	r0, 2251a <net_route_get_info+0x1a>
		/* Found nexthop, no need to look into routing table. */
		*route = NULL;
   22510:	2300      	movs	r3, #0
   22512:	602b      	str	r3, [r5, #0]
		*nexthop = dst;
   22514:	6034      	str	r4, [r6, #0]

		return true;
   22516:	2001      	movs	r0, #1
   22518:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	*route = net_route_lookup(iface, dst);
   2251a:	4621      	mov	r1, r4
   2251c:	4638      	mov	r0, r7
   2251e:	f7ff fed5 	bl	222cc <net_route_lookup>
   22522:	6028      	str	r0, [r5, #0]
	if (*route) {
   22524:	b130      	cbz	r0, 22534 <net_route_get_info+0x34>
		*nexthop = net_route_get_nexthop(*route);
   22526:	f7ff ffb5 	bl	22494 <net_route_get_nexthop>
   2252a:	6030      	str	r0, [r6, #0]
		if (!*nexthop) {
   2252c:	b108      	cbz	r0, 22532 <net_route_get_info+0x32>
			return false;
		}

		return true;
   2252e:	2001      	movs	r0, #1
   22530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   22532:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	} else {
		/* No specific route to this host, use the default
		 * route instead.
		 */
		router = net_if_ipv6_router_find_default(NULL, dst);
   22534:	4621      	mov	r1, r4
   22536:	2000      	movs	r0, #0
   22538:	f7f8 fefe 	bl	1b338 <net_if_ipv6_router_find_default>
		if (!router) {
   2253c:	4603      	mov	r3, r0
   2253e:	b118      	cbz	r0, 22548 <net_route_get_info+0x48>
			return false;
		}

		*nexthop = &router->address.in6_addr;
   22540:	332c      	adds	r3, #44	; 0x2c
   22542:	6033      	str	r3, [r6, #0]

		return true;
   22544:	2001      	movs	r0, #1
   22546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return false;
   22548:	2000      	movs	r0, #0
	}

	return false;
}
   2254a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0002254c <net_route_packet>:

int net_route_packet(struct net_pkt *pkt, struct in6_addr *nexthop)
{
   2254c:	b570      	push	{r4, r5, r6, lr}
   2254e:	4604      	mov	r4, r0
	struct net_linkaddr_storage *lladdr;
	struct net_nbr *nbr;

	nbr = net_ipv6_nbr_lookup(net_pkt_iface(pkt), nexthop);
   22550:	6940      	ldr	r0, [r0, #20]
   22552:	f7fd f93d 	bl	1f7d0 <net_ipv6_nbr_lookup>
	if (!nbr) {
   22556:	b330      	cbz	r0, 225a6 <net_route_packet+0x5a>
		NET_DBG("Cannot find %s neighbor.",
			net_sprint_ipv6_addr(nexthop));
		return -ENOENT;
	}

	lladdr = net_nbr_get_lladdr(nbr->idx);
   22558:	7840      	ldrb	r0, [r0, #1]
   2255a:	f7fc fb01 	bl	1eb60 <net_nbr_get_lladdr>
	if (!lladdr) {
   2255e:	4605      	mov	r5, r0
   22560:	b320      	cbz	r0, 225ac <net_route_packet+0x60>
		NET_DBG("Cannot find %s neighbor link layer address.",
			net_sprint_ipv6_addr(nexthop));
		return -ESRCH;
	}

	if (!net_pkt_ll_src(pkt)->addr) {
   22562:	6a20      	ldr	r0, [r4, #32]
   22564:	b328      	cbz	r0, 225b2 <net_route_packet+0x66>
	}

	/* Sanitycheck: If src and dst ll addresses are going to be same,
	 * then something went wrong in route lookup.
	 */
	if (!memcmp(net_pkt_ll_src(pkt)->addr, lladdr->addr, lladdr->len)) {
   22566:	1cae      	adds	r6, r5, #2
   22568:	786a      	ldrb	r2, [r5, #1]
   2256a:	4631      	mov	r1, r6
   2256c:	f007 f980 	bl	29870 <memcmp>
   22570:	b310      	cbz	r0, 225b8 <net_route_packet+0x6c>
	pkt->forwarding = forward;
   22572:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22576:	f043 0304 	orr.w	r3, r3, #4
   2257a:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return net_if_get_link_addr(pkt->iface);
   2257e:	6963      	ldr	r3, [r4, #20]
	net_pkt_set_forwarding(pkt, true);

	/* Set the destination and source ll address in the packet.
	 * We set the destination address to be the nexthop recipient.
	 */
	net_pkt_ll_src(pkt)->addr = net_pkt_ll_if(pkt)->addr;
   22580:	691a      	ldr	r2, [r3, #16]
   22582:	6222      	str	r2, [r4, #32]
	net_pkt_ll_src(pkt)->type = net_pkt_ll_if(pkt)->type;
   22584:	7d5a      	ldrb	r2, [r3, #21]
   22586:	f884 2025 	strb.w	r2, [r4, #37]	; 0x25
	net_pkt_ll_src(pkt)->len = net_pkt_ll_if(pkt)->len;
   2258a:	7d1b      	ldrb	r3, [r3, #20]
   2258c:	f884 3024 	strb.w	r3, [r4, #36]	; 0x24

	net_pkt_ll_dst(pkt)->addr = lladdr->addr;
   22590:	62a6      	str	r6, [r4, #40]	; 0x28
	net_pkt_ll_dst(pkt)->type = lladdr->type;
   22592:	782b      	ldrb	r3, [r5, #0]
   22594:	f884 302d 	strb.w	r3, [r4, #45]	; 0x2d
	net_pkt_ll_dst(pkt)->len = lladdr->len;
   22598:	786b      	ldrb	r3, [r5, #1]
   2259a:	f884 302c 	strb.w	r3, [r4, #44]	; 0x2c

	return net_send_data(pkt);
   2259e:	4620      	mov	r0, r4
   225a0:	f7f8 f84a 	bl	1a638 <net_send_data>
   225a4:	bd70      	pop	{r4, r5, r6, pc}
		return -ENOENT;
   225a6:	f06f 0001 	mvn.w	r0, #1
   225aa:	bd70      	pop	{r4, r5, r6, pc}
		return -ESRCH;
   225ac:	f06f 0002 	mvn.w	r0, #2
   225b0:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   225b2:	f06f 0015 	mvn.w	r0, #21
   225b6:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   225b8:	f06f 0015 	mvn.w	r0, #21
}
   225bc:	bd70      	pop	{r4, r5, r6, pc}

000225be <net_route_init>:

void net_route_init(void)
{
   225be:	4770      	bx	lr

000225c0 <mgmt_thread>:
			  K_THREAD_STACK_SIZEOF(mgmt_stack));
#endif
}

static void mgmt_thread(void)
{
   225c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   225c2:	e079      	b.n	226b8 <mgmt_thread+0xf8>
		out_event = 0;
   225c4:	2100      	movs	r1, #0
   225c6:	4a48      	ldr	r2, [pc, #288]	; (226e8 <mgmt_thread+0x128>)
   225c8:	8011      	strh	r1, [r2, #0]
   225ca:	e089      	b.n	226e0 <mgmt_thread+0x120>
		return NULL;
   225cc:	2600      	movs	r6, #0
		k_sem_take(&network_event, K_FOREVER);

		NET_DBG("Handling events, forwarding it relevantly");

		mgmt_event = mgmt_pop_event();
		if (!mgmt_event) {
   225ce:	b13e      	cbz	r6, 225e0 <mgmt_thread+0x20>
	return list->head;
   225d0:	4b46      	ldr	r3, [pc, #280]	; (226ec <mgmt_thread+0x12c>)
   225d2:	681d      	ldr	r5, [r3, #0]
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   225d4:	b15d      	cbz	r5, 225ee <mgmt_thread+0x2e>
   225d6:	462c      	mov	r4, r5
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   225d8:	b105      	cbz	r5, 225dc <mgmt_thread+0x1c>
	return node->next;
   225da:	682c      	ldr	r4, [r5, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   225dc:	2700      	movs	r7, #0
   225de:	e01f      	b.n	22620 <mgmt_thread+0x60>
   225e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   225e4:	2100      	movs	r1, #0
   225e6:	4842      	ldr	r0, [pc, #264]	; (226f0 <mgmt_thread+0x130>)
   225e8:	f006 f9fa 	bl	289e0 <_impl_k_sem_init>
			NET_DBG("Some event got probably lost (%u)",
				k_sem_count_get(&network_event));

			k_sem_init(&network_event, 0, UINT_MAX);

			continue;
   225ec:	e064      	b.n	226b8 <mgmt_thread+0xf8>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   225ee:	462c      	mov	r4, r5
   225f0:	e7f4      	b.n	225dc <mgmt_thread+0x1c>
		if (NET_MGMT_EVENT_SYNCHRONOUS(cb->event_mask)) {
   225f2:	f012 6f00 	tst.w	r2, #134217728	; 0x8000000
   225f6:	d04c      	beq.n	22692 <mgmt_thread+0xd2>
			struct mgmt_event_wait *sync_data =
   225f8:	686a      	ldr	r2, [r5, #4]
			if (sync_data->iface &&
   225fa:	6993      	ldr	r3, [r2, #24]
   225fc:	2b00      	cmp	r3, #0
   225fe:	d02c      	beq.n	2265a <mgmt_thread+0x9a>
			    sync_data->iface != mgmt_event->iface) {
   22600:	6870      	ldr	r0, [r6, #4]
			if (sync_data->iface &&
   22602:	4283      	cmp	r3, r0
   22604:	d029      	beq.n	2265a <mgmt_thread+0x9a>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   22606:	2c00      	cmp	r4, #0
   22608:	d04b      	beq.n	226a2 <mgmt_thread+0xe2>
   2260a:	4622      	mov	r2, r4
   2260c:	2c00      	cmp	r4, #0
   2260e:	d046      	beq.n	2269e <mgmt_thread+0xde>
	return node->next;
   22610:	6823      	ldr	r3, [r4, #0]
   22612:	2b00      	cmp	r3, #0
   22614:	d047      	beq.n	226a6 <mgmt_thread+0xe6>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22616:	2a00      	cmp	r2, #0
   22618:	d047      	beq.n	226aa <mgmt_thread+0xea>
	return node->next;
   2261a:	6823      	ldr	r3, [r4, #0]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2261c:	4625      	mov	r5, r4
   2261e:	461c      	mov	r4, r3
   22620:	2d00      	cmp	r5, #0
   22622:	d044      	beq.n	226ae <mgmt_thread+0xee>
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   22624:	6831      	ldr	r1, [r6, #0]
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   22626:	68aa      	ldr	r2, [r5, #8]
   22628:	0f13      	lsrs	r3, r2, #28
		if (!(NET_MGMT_GET_LAYER(mgmt_event->event) &
   2262a:	ea03 7311 	and.w	r3, r3, r1, lsr #28
   2262e:	f013 0f03 	tst.w	r3, #3
   22632:	d0e8      	beq.n	22606 <mgmt_thread+0x46>
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22634:	0c13      	lsrs	r3, r2, #16
		    !(NET_MGMT_GET_LAYER_CODE(mgmt_event->event) &
   22636:	ea03 4311 	and.w	r3, r3, r1, lsr #16
   2263a:	f3c3 030a 	ubfx	r3, r3, #0, #11
		      NET_MGMT_GET_LAYER(cb->event_mask)) ||
   2263e:	2b00      	cmp	r3, #0
   22640:	d0e1      	beq.n	22606 <mgmt_thread+0x46>
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   22642:	b28b      	uxth	r3, r1
		      NET_MGMT_GET_LAYER_CODE(cb->event_mask)) ||
   22644:	2b00      	cmp	r3, #0
   22646:	d0d4      	beq.n	225f2 <mgmt_thread+0x32>
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22648:	b293      	uxth	r3, r2
		    (NET_MGMT_GET_COMMAND(mgmt_event->event) &&
   2264a:	2b00      	cmp	r3, #0
   2264c:	d0d1      	beq.n	225f2 <mgmt_thread+0x32>
		     !(NET_MGMT_GET_COMMAND(mgmt_event->event) &
   2264e:	ea01 0302 	and.w	r3, r1, r2
   22652:	b29b      	uxth	r3, r3
		     NET_MGMT_GET_COMMAND(cb->event_mask) &&
   22654:	2b00      	cmp	r3, #0
   22656:	d0d6      	beq.n	22606 <mgmt_thread+0x46>
   22658:	e7cb      	b.n	225f2 <mgmt_thread+0x32>
			cb->raised_event = mgmt_event->event;
   2265a:	60a9      	str	r1, [r5, #8]
			sync_data->iface = mgmt_event->iface;
   2265c:	6873      	ldr	r3, [r6, #4]
   2265e:	6193      	str	r3, [r2, #24]
	if (!prev_node) {
   22660:	b15f      	cbz	r7, 2267a <mgmt_thread+0xba>
		prev_node->next = node->next;
   22662:	682b      	ldr	r3, [r5, #0]
   22664:	603b      	str	r3, [r7, #0]
		if (list->tail == node) {
   22666:	4b21      	ldr	r3, [pc, #132]	; (226ec <mgmt_thread+0x12c>)
   22668:	685b      	ldr	r3, [r3, #4]
   2266a:	429d      	cmp	r5, r3
   2266c:	d00e      	beq.n	2268c <mgmt_thread+0xcc>
	node->next = NULL;
   2266e:	2300      	movs	r3, #0
   22670:	602b      	str	r3, [r5, #0]
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22672:	6868      	ldr	r0, [r5, #4]
   22674:	f006 f9bd 	bl	289f2 <_impl_k_sem_give>
   22678:	e7c5      	b.n	22606 <mgmt_thread+0x46>
		list->head = node->next;
   2267a:	682a      	ldr	r2, [r5, #0]
   2267c:	4b1b      	ldr	r3, [pc, #108]	; (226ec <mgmt_thread+0x12c>)
   2267e:	601a      	str	r2, [r3, #0]
		if (list->tail == node) {
   22680:	685b      	ldr	r3, [r3, #4]
   22682:	429d      	cmp	r5, r3
   22684:	d1f3      	bne.n	2266e <mgmt_thread+0xae>
			list->tail = list->head;
   22686:	4b19      	ldr	r3, [pc, #100]	; (226ec <mgmt_thread+0x12c>)
   22688:	605a      	str	r2, [r3, #4]
   2268a:	e7f0      	b.n	2266e <mgmt_thread+0xae>
			list->tail = prev_node;
   2268c:	4b17      	ldr	r3, [pc, #92]	; (226ec <mgmt_thread+0x12c>)
   2268e:	605f      	str	r7, [r3, #4]
   22690:	e7ed      	b.n	2266e <mgmt_thread+0xae>
			cb->handler(cb, mgmt_event->event, mgmt_event->iface);
   22692:	686b      	ldr	r3, [r5, #4]
   22694:	6872      	ldr	r2, [r6, #4]
   22696:	4628      	mov	r0, r5
   22698:	4798      	blx	r3
			prev = &cb->node;
   2269a:	462f      	mov	r7, r5
   2269c:	e7b3      	b.n	22606 <mgmt_thread+0x46>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2269e:	4623      	mov	r3, r4
   226a0:	e7b7      	b.n	22612 <mgmt_thread+0x52>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&event_callbacks, cb, tmp, node) {
   226a2:	4623      	mov	r3, r4
   226a4:	e7ba      	b.n	2261c <mgmt_thread+0x5c>
   226a6:	2300      	movs	r3, #0
   226a8:	e7b8      	b.n	2261c <mgmt_thread+0x5c>
   226aa:	2300      	movs	r3, #0
   226ac:	e7b6      	b.n	2261c <mgmt_thread+0x5c>
	mgmt_event->event = 0;
   226ae:	2300      	movs	r3, #0
   226b0:	6033      	str	r3, [r6, #0]
	mgmt_event->iface = NULL;
   226b2:	6073      	str	r3, [r6, #4]
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   226b4:	f006 f844 	bl	28740 <_impl_k_yield>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   226b8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   226bc:	480c      	ldr	r0, [pc, #48]	; (226f0 <mgmt_thread+0x130>)
   226be:	f006 f9ab 	bl	28a18 <_impl_k_sem_take>
	if (!events[out_event].event) {
   226c2:	4b09      	ldr	r3, [pc, #36]	; (226e8 <mgmt_thread+0x128>)
   226c4:	881b      	ldrh	r3, [r3, #0]
   226c6:	4a0b      	ldr	r2, [pc, #44]	; (226f4 <mgmt_thread+0x134>)
   226c8:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   226cc:	2a00      	cmp	r2, #0
   226ce:	f43f af7d 	beq.w	225cc <mgmt_thread+0xc>
	out_event++;
   226d2:	1c5a      	adds	r2, r3, #1
   226d4:	b292      	uxth	r2, r2
   226d6:	4904      	ldr	r1, [pc, #16]	; (226e8 <mgmt_thread+0x128>)
   226d8:	800a      	strh	r2, [r1, #0]
	if (out_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   226da:	2a02      	cmp	r2, #2
   226dc:	f43f af72 	beq.w	225c4 <mgmt_thread+0x4>
	return &events[o_idx];
   226e0:	4e04      	ldr	r6, [pc, #16]	; (226f4 <mgmt_thread+0x134>)
   226e2:	eb06 06c3 	add.w	r6, r6, r3, lsl #3
   226e6:	e772      	b.n	225ce <mgmt_thread+0xe>
   226e8:	20001ff4 	.word	0x20001ff4
   226ec:	20001f6c 	.word	0x20001f6c
   226f0:	2000cc60 	.word	0x2000cc60
   226f4:	20001f74 	.word	0x20001f74

000226f8 <net_mgmt_add_event_callback>:
	node->next = list->head;
   226f8:	4b07      	ldr	r3, [pc, #28]	; (22718 <net_mgmt_add_event_callback+0x20>)
   226fa:	681a      	ldr	r2, [r3, #0]
   226fc:	6002      	str	r2, [r0, #0]
	list->head = node;
   226fe:	6018      	str	r0, [r3, #0]
	if (!list->tail) {
   22700:	685b      	ldr	r3, [r3, #4]
   22702:	b12b      	cbz	r3, 22710 <net_mgmt_add_event_callback+0x18>
{
	NET_DBG("Adding event callback %p", cb);

	sys_slist_prepend(&event_callbacks, &cb->node);

	mgmt_add_event_mask(cb->event_mask);
   22704:	6881      	ldr	r1, [r0, #8]
	global_event_mask |= event_mask;
   22706:	4a05      	ldr	r2, [pc, #20]	; (2271c <net_mgmt_add_event_callback+0x24>)
   22708:	6813      	ldr	r3, [r2, #0]
   2270a:	430b      	orrs	r3, r1
   2270c:	6013      	str	r3, [r2, #0]
   2270e:	4770      	bx	lr
		list->tail = list->head;
   22710:	4b01      	ldr	r3, [pc, #4]	; (22718 <net_mgmt_add_event_callback+0x20>)
   22712:	6058      	str	r0, [r3, #4]
   22714:	e7f6      	b.n	22704 <net_mgmt_add_event_callback+0xc>
   22716:	bf00      	nop
   22718:	20001f6c 	.word	0x20001f6c
   2271c:	20001f84 	.word	0x20001f84

00022720 <net_mgmt_event_notify_with_info>:
	return ((mgmt_event & global_event_mask) == mgmt_event);
   22720:	4b17      	ldr	r3, [pc, #92]	; (22780 <net_mgmt_event_notify_with_info+0x60>)
   22722:	681b      	ldr	r3, [r3, #0]
}

void net_mgmt_event_notify_with_info(u32_t mgmt_event, struct net_if *iface,
				     void *info, size_t length)
{
	if (mgmt_is_event_handled(mgmt_event)) {
   22724:	ea30 0303 	bics.w	r3, r0, r3
   22728:	d000      	beq.n	2272c <net_mgmt_event_notify_with_info+0xc>
   2272a:	4770      	bx	lr
{
   2272c:	b510      	push	{r4, lr}
	events[in_event].event = mgmt_event;
   2272e:	4c15      	ldr	r4, [pc, #84]	; (22784 <net_mgmt_event_notify_with_info+0x64>)
   22730:	8823      	ldrh	r3, [r4, #0]
   22732:	4a15      	ldr	r2, [pc, #84]	; (22788 <net_mgmt_event_notify_with_info+0x68>)
   22734:	f842 0033 	str.w	r0, [r2, r3, lsl #3]
	events[in_event].iface = iface;
   22738:	eb02 02c3 	add.w	r2, r2, r3, lsl #3
   2273c:	6051      	str	r1, [r2, #4]
	in_event++;
   2273e:	3301      	adds	r3, #1
   22740:	b29b      	uxth	r3, r3
   22742:	8023      	strh	r3, [r4, #0]
	if (in_event == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22744:	2b02      	cmp	r3, #2
   22746:	d009      	beq.n	2275c <net_mgmt_event_notify_with_info+0x3c>
	if (in_event == out_event) {
   22748:	4b0e      	ldr	r3, [pc, #56]	; (22784 <net_mgmt_event_notify_with_info+0x64>)
   2274a:	881a      	ldrh	r2, [r3, #0]
   2274c:	4b0f      	ldr	r3, [pc, #60]	; (2278c <net_mgmt_event_notify_with_info+0x6c>)
   2274e:	881b      	ldrh	r3, [r3, #0]
   22750:	429a      	cmp	r2, r3
   22752:	d006      	beq.n	22762 <net_mgmt_event_notify_with_info+0x42>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   22754:	480e      	ldr	r0, [pc, #56]	; (22790 <net_mgmt_event_notify_with_info+0x70>)
   22756:	f006 f94c 	bl	289f2 <_impl_k_sem_give>
   2275a:	bd10      	pop	{r4, pc}
		in_event = 0;
   2275c:	2200      	movs	r2, #0
   2275e:	8022      	strh	r2, [r4, #0]
   22760:	e7f2      	b.n	22748 <net_mgmt_event_notify_with_info+0x28>
		u16_t o_idx = out_event + 1;
   22762:	3301      	adds	r3, #1
   22764:	b29b      	uxth	r3, r3
		if (o_idx == CONFIG_NET_MGMT_EVENT_QUEUE_SIZE) {
   22766:	2b02      	cmp	r3, #2
   22768:	d007      	beq.n	2277a <net_mgmt_event_notify_with_info+0x5a>
		if (events[o_idx].event) {
   2276a:	4a07      	ldr	r2, [pc, #28]	; (22788 <net_mgmt_event_notify_with_info+0x68>)
   2276c:	f852 2033 	ldr.w	r2, [r2, r3, lsl #3]
   22770:	2a00      	cmp	r2, #0
   22772:	d0ef      	beq.n	22754 <net_mgmt_event_notify_with_info+0x34>
			out_event = o_idx;
   22774:	4a05      	ldr	r2, [pc, #20]	; (2278c <net_mgmt_event_notify_with_info+0x6c>)
   22776:	8013      	strh	r3, [r2, #0]
   22778:	e7ec      	b.n	22754 <net_mgmt_event_notify_with_info+0x34>
			o_idx = 0;
   2277a:	2300      	movs	r3, #0
   2277c:	e7f5      	b.n	2276a <net_mgmt_event_notify_with_info+0x4a>
   2277e:	bf00      	nop
   22780:	20001f84 	.word	0x20001f84
   22784:	20001f88 	.word	0x20001f88
   22788:	20001f74 	.word	0x20001f74
   2278c:	20001ff4 	.word	0x20001ff4
   22790:	2000cc60 	.word	0x2000cc60

00022794 <net_mgmt_event_init>:
	return mgmt_event_wait_call(iface, mgmt_event_mask,
				    raised_event, NULL, info, timeout);
}

void net_mgmt_event_init(void)
{
   22794:	b510      	push	{r4, lr}
   22796:	b086      	sub	sp, #24
	list->head = NULL;
   22798:	4b0f      	ldr	r3, [pc, #60]	; (227d8 <net_mgmt_event_init+0x44>)
   2279a:	2400      	movs	r4, #0
   2279c:	601c      	str	r4, [r3, #0]
	list->tail = NULL;
   2279e:	605c      	str	r4, [r3, #4]
	sys_slist_init(&event_callbacks);
	global_event_mask = 0;
   227a0:	4b0e      	ldr	r3, [pc, #56]	; (227dc <net_mgmt_event_init+0x48>)
   227a2:	601c      	str	r4, [r3, #0]

	in_event = 0;
   227a4:	4b0e      	ldr	r3, [pc, #56]	; (227e0 <net_mgmt_event_init+0x4c>)
   227a6:	801c      	strh	r4, [r3, #0]
	out_event = 0;
   227a8:	4b0e      	ldr	r3, [pc, #56]	; (227e4 <net_mgmt_event_init+0x50>)
   227aa:	801c      	strh	r4, [r3, #0]

	memset(events, 0,
   227ac:	2210      	movs	r2, #16
   227ae:	4621      	mov	r1, r4
   227b0:	480d      	ldr	r0, [pc, #52]	; (227e8 <net_mgmt_event_init+0x54>)
   227b2:	f007 f8f1 	bl	29998 <memset>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   227b6:	9405      	str	r4, [sp, #20]
   227b8:	9404      	str	r4, [sp, #16]
   227ba:	f06f 0308 	mvn.w	r3, #8
   227be:	9303      	str	r3, [sp, #12]
   227c0:	9402      	str	r4, [sp, #8]
   227c2:	9401      	str	r4, [sp, #4]
   227c4:	9400      	str	r4, [sp, #0]
   227c6:	4b09      	ldr	r3, [pc, #36]	; (227ec <net_mgmt_event_init+0x58>)
   227c8:	f44f 7200 	mov.w	r2, #512	; 0x200
   227cc:	4908      	ldr	r1, [pc, #32]	; (227f0 <net_mgmt_event_init+0x5c>)
   227ce:	4809      	ldr	r0, [pc, #36]	; (227f4 <net_mgmt_event_init+0x60>)
   227d0:	f006 fb8e 	bl	28ef0 <_impl_k_thread_create>
			K_PRIO_COOP(CONFIG_NET_MGMT_EVENT_THREAD_PRIO), 0, 0);

	NET_DBG("Net MGMT initialized: queue of %u entries, stack size of %u",
		CONFIG_NET_MGMT_EVENT_QUEUE_SIZE,
		CONFIG_NET_MGMT_EVENT_STACK_SIZE);
}
   227d4:	b006      	add	sp, #24
   227d6:	bd10      	pop	{r4, pc}
   227d8:	20001f6c 	.word	0x20001f6c
   227dc:	20001f84 	.word	0x20001f84
   227e0:	20001f88 	.word	0x20001f88
   227e4:	20001ff4 	.word	0x20001ff4
   227e8:	20001f74 	.word	0x20001f74
   227ec:	000225c1 	.word	0x000225c1
   227f0:	20009900 	.word	0x20009900
   227f4:	20001f8c 	.word	0x20001f8c

000227f8 <net_udp_insert_raw>:

struct net_pkt *net_udp_insert_raw(struct net_pkt *pkt,
				   u16_t offset,
				   u16_t src_port,
				   u16_t dst_port)
{
   227f8:	b5f0      	push	{r4, r5, r6, r7, lr}
   227fa:	b085      	sub	sp, #20
   227fc:	4605      	mov	r5, r0
   227fe:	f8ad 2006 	strh.w	r2, [sp, #6]
   22802:	f8ad 3004 	strh.w	r3, [sp, #4]
	struct net_buf *frag, *prev, *udp;
	u16_t pos;

	frag = net_frag_get_pos(pkt, offset, &pos);
   22806:	f10d 020e 	add.w	r2, sp, #14
   2280a:	f7fa fde5 	bl	1d3d8 <net_frag_get_pos>
	if (!frag && pos == 0xffff) {
   2280e:	4602      	mov	r2, r0
   22810:	b168      	cbz	r0, 2282e <net_udp_insert_raw+0x36>
	}

	/* We can only insert the UDP header between existing two
	 * fragments.
	 */
	if (frag && pos != 0) {
   22812:	b11a      	cbz	r2, 2281c <net_udp_insert_raw+0x24>
   22814:	f8bd 300e 	ldrh.w	r3, [sp, #14]
   22818:	2b00      	cmp	r3, #0
   2281a:	d15c      	bne.n	228d6 <net_udp_insert_raw+0xde>
		NET_DBG("Cannot insert UDP data into offset %d", offset);
		return NULL;
	}

	if (pkt->frags != frag) {
   2281c:	68ab      	ldr	r3, [r5, #8]
   2281e:	429a      	cmp	r2, r3
   22820:	d00d      	beq.n	2283e <net_udp_insert_raw+0x46>
		struct net_buf *tmp = pkt->frags;

		prev = NULL;

		while (tmp->frags) {
   22822:	681c      	ldr	r4, [r3, #0]
   22824:	b174      	cbz	r4, 22844 <net_udp_insert_raw+0x4c>
			if (tmp->frags == frag) {
   22826:	42a2      	cmp	r2, r4
   22828:	d00b      	beq.n	22842 <net_udp_insert_raw+0x4a>
				prev = tmp;
				break;
			}

			tmp = tmp->frags;
   2282a:	4623      	mov	r3, r4
   2282c:	e7f9      	b.n	22822 <net_udp_insert_raw+0x2a>
	if (!frag && pos == 0xffff) {
   2282e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   22832:	f64f 73ff 	movw	r3, #65535	; 0xffff
   22836:	4299      	cmp	r1, r3
   22838:	d1eb      	bne.n	22812 <net_udp_insert_raw+0x1a>
		return NULL;
   2283a:	2000      	movs	r0, #0
   2283c:	e049      	b.n	228d2 <net_udp_insert_raw+0xda>
		}
	} else {
		prev = pkt->frags;
   2283e:	461c      	mov	r4, r3
   22840:	e000      	b.n	22844 <net_udp_insert_raw+0x4c>
				prev = tmp;
   22842:	461c      	mov	r4, r3
	}

	if (!prev) {
   22844:	2c00      	cmp	r4, #0
   22846:	d048      	beq.n	228da <net_udp_insert_raw+0xe2>
		goto fail;
	}

	udp = net_pkt_get_frag(pkt, PKT_WAIT_TIME);
   22848:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
   2284c:	4628      	mov	r0, r5
   2284e:	f7fa faa1 	bl	1cd94 <net_pkt_get_frag>
	if (!udp) {
   22852:	4607      	mov	r7, r0
   22854:	2800      	cmp	r0, #0
   22856:	d042      	beq.n	228de <net_udp_insert_raw+0xe6>
		goto fail;
	}

	/* Source and destination ports are already in network byte order */
	net_buf_add_mem(udp, &src_port, sizeof(src_port));
   22858:	f100 0608 	add.w	r6, r0, #8
   2285c:	2202      	movs	r2, #2
   2285e:	f10d 0106 	add.w	r1, sp, #6
   22862:	4630      	mov	r0, r6
   22864:	f7f7 fdcc 	bl	1a400 <net_buf_simple_add_mem>
	net_buf_add_mem(udp, &dst_port, sizeof(dst_port));
   22868:	2202      	movs	r2, #2
   2286a:	a901      	add	r1, sp, #4
   2286c:	4630      	mov	r0, r6
   2286e:	f7f7 fdc7 	bl	1a400 <net_buf_simple_add_mem>
	return net_buf_frags_len(pkt->frags);
   22872:	68ab      	ldr	r3, [r5, #8]
	size_t bytes = 0;
   22874:	2200      	movs	r2, #0
   22876:	e002      	b.n	2287e <net_udp_insert_raw+0x86>
		bytes += buf->len;
   22878:	8999      	ldrh	r1, [r3, #12]
   2287a:	440a      	add	r2, r1
		buf = buf->frags;
   2287c:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2287e:	2b00      	cmp	r3, #0
   22880:	d1fa      	bne.n	22878 <net_udp_insert_raw+0x80>

	net_buf_add_be16(udp, net_pkt_get_len(pkt) -
   22882:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
   22886:	1a51      	subs	r1, r2, r1
   22888:	b289      	uxth	r1, r1
   2288a:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
   2288e:	1a89      	subs	r1, r1, r2
   22890:	b289      	uxth	r1, r1
   22892:	3108      	adds	r1, #8
   22894:	b289      	uxth	r1, r1
   22896:	4630      	mov	r0, r6
   22898:	f7f7 fdd2 	bl	1a440 <net_buf_simple_add_be16>
			 net_pkt_ip_hdr_len(pkt) -
			 net_pkt_ipv6_ext_len(pkt) +
			 sizeof(struct net_udp_hdr));

	net_buf_add_be16(udp, 0); /* chksum */
   2289c:	2100      	movs	r1, #0
   2289e:	4630      	mov	r0, r6
   228a0:	f7f7 fdce 	bl	1a440 <net_buf_simple_add_be16>

	net_buf_frag_insert(prev, udp);
   228a4:	4639      	mov	r1, r7
   228a6:	4620      	mov	r0, r4
   228a8:	f7f7 fd7e 	bl	1a3a8 <net_buf_frag_insert>

	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   228ac:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
				net_pkt_ipv6_ext_len(pkt) +
   228b0:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
	frag = net_frag_get_pos(pkt, net_pkt_ip_hdr_len(pkt) +
   228b4:	4419      	add	r1, r3
   228b6:	3108      	adds	r1, #8
   228b8:	f10d 020e 	add.w	r2, sp, #14
   228bc:	b289      	uxth	r1, r1
   228be:	4628      	mov	r0, r5
   228c0:	f7fa fd8a 	bl	1d3d8 <net_frag_get_pos>
				sizeof(struct net_udp_hdr),
				&pos);
	if (frag) {
   228c4:	b168      	cbz	r0, 228e2 <net_udp_insert_raw+0xea>
		net_pkt_set_appdata(pkt, frag->data + pos);
   228c6:	6883      	ldr	r3, [r0, #8]
   228c8:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   228cc:	4413      	add	r3, r2
	pkt->appdata = data;
   228ce:	61ab      	str	r3, [r5, #24]
	}

	return pkt;
   228d0:	4628      	mov	r0, r5

fail:
	NET_DBG("Cannot insert UDP header into %p", pkt);
	return NULL;
}
   228d2:	b005      	add	sp, #20
   228d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return NULL;
   228d6:	2000      	movs	r0, #0
   228d8:	e7fb      	b.n	228d2 <net_udp_insert_raw+0xda>
	return NULL;
   228da:	2000      	movs	r0, #0
   228dc:	e7f9      	b.n	228d2 <net_udp_insert_raw+0xda>
   228de:	2000      	movs	r0, #0
   228e0:	e7f7      	b.n	228d2 <net_udp_insert_raw+0xda>
	return pkt;
   228e2:	4628      	mov	r0, r5
   228e4:	e7f5      	b.n	228d2 <net_udp_insert_raw+0xda>

000228e6 <net_udp_set_chksum>:

struct net_buf *net_udp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   228e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   228ea:	b086      	sub	sp, #24
   228ec:	4606      	mov	r6, r0
   228ee:	460d      	mov	r5, r1
	struct net_udp_hdr *hdr;
	u16_t chksum = 0;
   228f0:	2300      	movs	r3, #0
   228f2:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   228f6:	f7fa fda5 	bl	1d444 <net_pkt_udp_data>
   228fa:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   228fc:	2208      	movs	r2, #8
   228fe:	4601      	mov	r1, r0
   22900:	4630      	mov	r0, r6
   22902:	f7fb f95d 	bl	1dbc0 <net_header_fits>
   22906:	b170      	cbz	r0, 22926 <net_udp_set_chksum+0x40>
		return hdr;
   22908:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2290a:	b173      	cbz	r3, 2292a <net_udp_set_chksum+0x44>
		hdr->chksum = 0;
   2290c:	2300      	movs	r3, #0
   2290e:	71a3      	strb	r3, [r4, #6]
   22910:	71e3      	strb	r3, [r4, #7]
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22912:	2111      	movs	r1, #17
   22914:	4630      	mov	r0, r6
   22916:	f7fb f8fa 	bl	1db0e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_udp(pkt);
   2291a:	43c0      	mvns	r0, r0
   2291c:	80e0      	strh	r0, [r4, #6]

		return frag;
   2291e:	4628      	mov	r0, r5
			     (u8_t *)&chksum, PKT_WAIT_TIME);

	NET_ASSERT(frag);

	return frag;
}
   22920:	b006      	add	sp, #24
   22922:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   22926:	2300      	movs	r3, #0
   22928:	e7ef      	b.n	2290a <net_udp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   2292a:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2292e:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   22932:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   22934:	3206      	adds	r2, #6
   22936:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   2293a:	f8cd 8008 	str.w	r8, [sp, #8]
   2293e:	f10d 0416 	add.w	r4, sp, #22
   22942:	9401      	str	r4, [sp, #4]
   22944:	2702      	movs	r7, #2
   22946:	9700      	str	r7, [sp, #0]
   22948:	ab05      	add	r3, sp, #20
   2294a:	b292      	uxth	r2, r2
   2294c:	4629      	mov	r1, r5
   2294e:	4630      	mov	r0, r6
   22950:	f7fa fc63 	bl	1d21a <net_pkt_write>
   22954:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_UDP);
   22956:	2111      	movs	r1, #17
   22958:	4630      	mov	r0, r6
   2295a:	f7fb f8d8 	bl	1db0e <net_calc_chksum>
	chksum = ~net_calc_chksum_udp(pkt);
   2295e:	43c0      	mvns	r0, r0
   22960:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   22964:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   22968:	3a02      	subs	r2, #2
   2296a:	f8cd 8008 	str.w	r8, [sp, #8]
   2296e:	9401      	str	r4, [sp, #4]
   22970:	9700      	str	r7, [sp, #0]
   22972:	ab05      	add	r3, sp, #20
   22974:	b292      	uxth	r2, r2
   22976:	4629      	mov	r1, r5
   22978:	4630      	mov	r0, r6
   2297a:	f7fa fc4e 	bl	1d21a <net_pkt_write>
	return frag;
   2297e:	e7cf      	b.n	22920 <net_udp_set_chksum+0x3a>

00022980 <net_udp_get_chksum>:

u16_t net_udp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   22980:	b570      	push	{r4, r5, r6, lr}
   22982:	b084      	sub	sp, #16
   22984:	4605      	mov	r5, r0
   22986:	460e      	mov	r6, r1
	struct net_udp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_udp_data(pkt);
   22988:	f7fa fd5c 	bl	1d444 <net_pkt_udp_data>
   2298c:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   2298e:	2208      	movs	r2, #8
   22990:	4601      	mov	r1, r0
   22992:	4628      	mov	r0, r5
   22994:	f7fb f914 	bl	1dbc0 <net_header_fits>
   22998:	b120      	cbz	r0, 229a4 <net_udp_get_chksum+0x24>
		return hdr;
   2299a:	4623      	mov	r3, r4
	if (net_udp_header_fits(pkt, hdr)) {
   2299c:	b123      	cbz	r3, 229a8 <net_udp_get_chksum+0x28>
		return hdr->chksum;
   2299e:	88e0      	ldrh	r0, [r4, #6]
			     2 + 2 + 2 /* src + dst + len */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   229a0:	b004      	add	sp, #16
   229a2:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   229a4:	2300      	movs	r3, #0
   229a6:	e7f9      	b.n	2299c <net_udp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   229a8:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   229ac:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   229b0:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   229b2:	3106      	adds	r1, #6
   229b4:	f10d 030e 	add.w	r3, sp, #14
   229b8:	9300      	str	r3, [sp, #0]
   229ba:	2302      	movs	r3, #2
   229bc:	aa03      	add	r2, sp, #12
   229be:	b289      	uxth	r1, r1
   229c0:	4630      	mov	r0, r6
   229c2:	f7fa fbb8 	bl	1d136 <net_frag_read>
	return chksum;
   229c6:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   229ca:	e7e9      	b.n	229a0 <net_udp_get_chksum+0x20>

000229cc <net_udp_get_hdr>:

struct net_udp_hdr *net_udp_get_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   229cc:	b5f0      	push	{r4, r5, r6, r7, lr}
   229ce:	b085      	sub	sp, #20
   229d0:	4605      	mov	r5, r0
   229d2:	460f      	mov	r7, r1
	struct net_udp_hdr *udp_hdr;
	struct net_buf *frag;
	u16_t pos;

	udp_hdr = net_pkt_udp_data(pkt);
   229d4:	f7fa fd36 	bl	1d444 <net_pkt_udp_data>
   229d8:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   229da:	2208      	movs	r2, #8
   229dc:	4601      	mov	r1, r0
   229de:	4628      	mov	r0, r5
   229e0:	f7fb f8ee 	bl	1dbc0 <net_header_fits>
   229e4:	b120      	cbz	r0, 229f0 <net_udp_get_hdr+0x24>
		return hdr;
   229e6:	4626      	mov	r6, r4
	if (net_udp_header_fits(pkt, udp_hdr)) {
   229e8:	b126      	cbz	r6, 229f4 <net_udp_get_hdr+0x28>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   229ea:	4620      	mov	r0, r4
   229ec:	b005      	add	sp, #20
   229ee:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   229f0:	2600      	movs	r6, #0
   229f2:	e7f9      	b.n	229e8 <net_udp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   229f4:	68a8      	ldr	r0, [r5, #8]
   229f6:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   229fa:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   229fe:	9700      	str	r7, [sp, #0]
   22a00:	2302      	movs	r3, #2
   22a02:	f10d 020e 	add.w	r2, sp, #14
   22a06:	4421      	add	r1, r4
   22a08:	f7fa fb95 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   22a0c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   22a10:	1cbb      	adds	r3, r7, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   22a12:	9300      	str	r3, [sp, #0]
   22a14:	2302      	movs	r3, #2
   22a16:	f10d 020e 	add.w	r2, sp, #14
   22a1a:	f7fa fb8c 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   22a1e:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->len);
   22a22:	1d3b      	adds	r3, r7, #4
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->len),
   22a24:	9300      	str	r3, [sp, #0]
   22a26:	2302      	movs	r3, #2
   22a28:	f10d 020e 	add.w	r2, sp, #14
   22a2c:	f7fa fb83 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22a30:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   22a34:	1dbb      	adds	r3, r7, #6
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   22a36:	9300      	str	r3, [sp, #0]
   22a38:	2302      	movs	r3, #2
   22a3a:	f10d 020e 	add.w	r2, sp, #14
   22a3e:	f7fa fb7a 	bl	1d136 <net_frag_read>
	if (!frag) {
   22a42:	b108      	cbz	r0, 22a48 <net_udp_get_hdr+0x7c>
	return hdr;
   22a44:	463c      	mov	r4, r7
   22a46:	e7d0      	b.n	229ea <net_udp_get_hdr+0x1e>
		return NULL;
   22a48:	4634      	mov	r4, r6
   22a4a:	e7ce      	b.n	229ea <net_udp_get_hdr+0x1e>

00022a4c <net_udp_set_hdr>:

struct net_udp_hdr *net_udp_set_hdr(struct net_pkt *pkt,
				    struct net_udp_hdr *hdr)
{
   22a4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   22a50:	b086      	sub	sp, #24
   22a52:	4606      	mov	r6, r0
   22a54:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   22a56:	2208      	movs	r2, #8
   22a58:	f7fb f8b2 	bl	1dbc0 <net_header_fits>
   22a5c:	b128      	cbz	r0, 22a6a <net_udp_set_hdr+0x1e>
		return hdr;
   22a5e:	4625      	mov	r5, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_udp_header_fits(pkt, hdr)) {
   22a60:	b12d      	cbz	r5, 22a6e <net_udp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   22a62:	4620      	mov	r0, r4
   22a64:	b006      	add	sp, #24
   22a66:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   22a6a:	2500      	movs	r5, #0
   22a6c:	e7f8      	b.n	22a60 <net_udp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   22a6e:	f896 1033 	ldrb.w	r1, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   22a72:	f896 203b 	ldrb.w	r2, [r6, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   22a76:	f44f 787a 	mov.w	r8, #1000	; 0x3e8
   22a7a:	f8cd 8008 	str.w	r8, [sp, #8]
   22a7e:	9401      	str	r4, [sp, #4]
   22a80:	2702      	movs	r7, #2
   22a82:	9700      	str	r7, [sp, #0]
   22a84:	f10d 0316 	add.w	r3, sp, #22
   22a88:	440a      	add	r2, r1
   22a8a:	68b1      	ldr	r1, [r6, #8]
   22a8c:	4630      	mov	r0, r6
   22a8e:	f7fa fbc4 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   22a92:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, PKT_WAIT_TIME);
   22a96:	19e3      	adds	r3, r4, r7
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   22a98:	f8cd 8008 	str.w	r8, [sp, #8]
   22a9c:	9301      	str	r3, [sp, #4]
   22a9e:	9700      	str	r7, [sp, #0]
   22aa0:	f10d 0316 	add.w	r3, sp, #22
   22aa4:	4601      	mov	r1, r0
   22aa6:	4630      	mov	r0, r6
   22aa8:	f7fa fbb7 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   22aac:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->len, PKT_WAIT_TIME);
   22ab0:	1d23      	adds	r3, r4, #4
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->len),
   22ab2:	f8cd 8008 	str.w	r8, [sp, #8]
   22ab6:	9301      	str	r3, [sp, #4]
   22ab8:	9700      	str	r7, [sp, #0]
   22aba:	f10d 0316 	add.w	r3, sp, #22
   22abe:	4601      	mov	r1, r0
   22ac0:	4630      	mov	r0, r6
   22ac2:	f7fa fbaa 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   22ac6:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, PKT_WAIT_TIME);
   22aca:	1da3      	adds	r3, r4, #6
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   22acc:	f8cd 8008 	str.w	r8, [sp, #8]
   22ad0:	9301      	str	r3, [sp, #4]
   22ad2:	9700      	str	r7, [sp, #0]
   22ad4:	f10d 0316 	add.w	r3, sp, #22
   22ad8:	4601      	mov	r1, r0
   22ada:	4630      	mov	r0, r6
   22adc:	f7fa fb9d 	bl	1d21a <net_pkt_write>
	if (!frag) {
   22ae0:	2800      	cmp	r0, #0
   22ae2:	d1be      	bne.n	22a62 <net_udp_set_hdr+0x16>
		return NULL;
   22ae4:	462c      	mov	r4, r5
   22ae6:	e7bc      	b.n	22a62 <net_udp_set_hdr+0x16>

00022ae8 <net_udp_insert>:

struct net_pkt *net_udp_insert(struct net_context *context,
			       struct net_pkt *pkt,
			       u16_t offset,
			       u16_t port)
{
   22ae8:	b510      	push	{r4, lr}
   22aea:	460c      	mov	r4, r1
   22aec:	4611      	mov	r1, r2
	return net_udp_insert_raw(pkt,
   22aee:	8942      	ldrh	r2, [r0, #10]
   22af0:	4620      	mov	r0, r4
   22af2:	f7ff fe81 	bl	227f8 <net_udp_insert_raw>
				  offset,
				  net_sin((struct sockaddr *)
					  &context->local)->sin_port,
				  port);
}
   22af6:	bd10      	pop	{r4, pc}

00022af8 <net_udp_init>:
{
	return net_conn_unregister(handle);
}

void net_udp_init(void)
{
   22af8:	4770      	bx	lr

00022afa <abort_connection>:
			pkt = net_pkt_ref(pkt);				\
		}							\
	} while (0)

static void abort_connection(struct net_tcp *tcp)
{
   22afa:	b538      	push	{r3, r4, r5, lr}
	struct net_context *ctx = tcp->context;
   22afc:	6804      	ldr	r4, [r0, #0]

	NET_DBG("[%p] segment retransmission exceeds %d, resetting context %p",
		tcp, CONFIG_NET_TCP_RETRY_COUNT, ctx);

	if (ctx->recv_cb) {
   22afe:	6b25      	ldr	r5, [r4, #48]	; 0x30
   22b00:	b12d      	cbz	r5, 22b0e <abort_connection+0x14>
		ctx->recv_cb(ctx, NULL, -ECONNRESET, tcp->recv_user_data);
   22b02:	6843      	ldr	r3, [r0, #4]
   22b04:	f06f 0267 	mvn.w	r2, #103	; 0x67
   22b08:	2100      	movs	r1, #0
   22b0a:	4620      	mov	r0, r4
   22b0c:	47a8      	blx	r5
	}

	net_context_unref(ctx);
   22b0e:	4620      	mov	r0, r4
   22b10:	f7f9 fba8 	bl	1c264 <net_context_unref>
   22b14:	bd38      	pop	{r3, r4, r5, pc}

00022b16 <restart_timer>:

	return net_send_data(pkt);
}

static void restart_timer(struct net_tcp *tcp)
{
   22b16:	b510      	push	{r4, lr}
   22b18:	4604      	mov	r4, r0
	return (!list->head);
   22b1a:	f8d0 308c 	ldr.w	r3, [r0, #140]	; 0x8c
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   22b1e:	b17b      	cbz	r3, 22b40 <restart_timer+0x2a>
		tcp->flags |= NET_TCP_RETRYING;
   22b20:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22b24:	f443 7300 	orr.w	r3, r3, #512	; 0x200
   22b28:	f8a0 30a4 	strh.w	r3, [r0, #164]	; 0xa4
		tcp->retry_timeout_shift = 0;
   22b2c:	f36f 0304 	bfc	r3, #0, #5
   22b30:	f880 30a4 	strb.w	r3, [r0, #164]	; 0xa4
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   22b34:	2200      	movs	r2, #0
   22b36:	21c8      	movs	r1, #200	; 0xc8
   22b38:	3058      	adds	r0, #88	; 0x58
   22b3a:	f006 fb63 	bl	29204 <_impl_k_timer_start>
   22b3e:	bd10      	pop	{r4, pc}
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22b40:	3058      	adds	r0, #88	; 0x58
   22b42:	f006 fc17 	bl	29374 <_impl_k_timer_stop>
			k_timer_start(&tcp->retry_timer, TIME_WAIT_MS, 0);
			net_context_ref(tcp->context);
		}
	} else {
		k_timer_stop(&tcp->retry_timer);
		tcp->flags &= ~NET_TCP_RETRYING;
   22b46:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   22b4a:	f3c3 1247 	ubfx	r2, r3, #5, #8
   22b4e:	f022 0210 	bic.w	r2, r2, #16
   22b52:	f362 134c 	bfi	r3, r2, #5, #8
   22b56:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
   22b5a:	bd10      	pop	{r4, pc}

00022b5c <ack_timer_cancel>:
{
   22b5c:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->ack_timer);
   22b5e:	3008      	adds	r0, #8
   22b60:	f006 fd36 	bl	295d0 <k_delayed_work_cancel>
   22b64:	bd08      	pop	{r3, pc}

00022b66 <fin_timer_cancel>:
{
   22b66:	b508      	push	{r3, lr}
	k_delayed_work_cancel(&tcp->fin_timer);
   22b68:	3030      	adds	r0, #48	; 0x30
   22b6a:	f006 fd31 	bl	295d0 <k_delayed_work_cancel>
   22b6e:	bd08      	pop	{r3, pc}

00022b70 <finalize_segment>:
{
   22b70:	b508      	push	{r3, lr}
	return pkt->family;
   22b72:	f891 3038 	ldrb.w	r3, [r1, #56]	; 0x38
   22b76:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   22b7a:	2b0a      	cmp	r3, #10
   22b7c:	d001      	beq.n	22b82 <finalize_segment+0x12>
	return 0;
   22b7e:	2000      	movs	r0, #0
}
   22b80:	bd08      	pop	{r3, pc}
		return net_ipv6_finalize(context, pkt);
   22b82:	f7fc fe17 	bl	1f7b4 <net_ipv6_finalize>
   22b86:	bd08      	pop	{r3, pc}

00022b88 <prepare_segment>:
{
   22b88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   22b8c:	b085      	sub	sp, #20
   22b8e:	4606      	mov	r6, r0
   22b90:	460d      	mov	r5, r1
	struct net_context *context = tcp->context;
   22b92:	6807      	ldr	r7, [r0, #0]
	if (pkt) {
   22b94:	b192      	cbz	r2, 22bbc <prepare_segment+0x34>
   22b96:	4614      	mov	r4, r2
		tail = pkt->frags;
   22b98:	f8d2 8008 	ldr.w	r8, [r2, #8]
		pkt->frags = NULL;
   22b9c:	2300      	movs	r3, #0
   22b9e:	6093      	str	r3, [r2, #8]
		pkt_allocated = false;
   22ba0:	469a      	mov	sl, r3
   22ba2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   22ba6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6) {
   22baa:	2b0a      	cmp	r3, #10
   22bac:	d013      	beq.n	22bd6 <prepare_segment+0x4e>
		if (pkt_allocated) {
   22bae:	f1ba 0f00 	cmp.w	sl, #0
   22bb2:	d174      	bne.n	22c9e <prepare_segment+0x116>
		return NULL;
   22bb4:	2000      	movs	r0, #0
}
   22bb6:	b005      	add	sp, #20
   22bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		pkt = net_pkt_get_tx(context, ALLOC_TIMEOUT);
   22bbc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   22bc0:	4638      	mov	r0, r7
   22bc2:	f7fa f907 	bl	1cdd4 <net_pkt_get_tx>
		if (!pkt) {
   22bc6:	4604      	mov	r4, r0
   22bc8:	2800      	cmp	r0, #0
   22bca:	d0f4      	beq.n	22bb6 <prepare_segment+0x2e>
		pkt_allocated = true;
   22bcc:	f04f 0a01 	mov.w	sl, #1
	struct net_buf *header, *tail = NULL;
   22bd0:	f04f 0800 	mov.w	r8, #0
   22bd4:	e7e5      	b.n	22ba2 <prepare_segment+0x1a>
				net_sin6_ptr(segment->src_addr)->sin6_addr,
   22bd6:	692a      	ldr	r2, [r5, #16]
				&(net_sin6(segment->dst_addr)->sin6_addr));
   22bd8:	696b      	ldr	r3, [r5, #20]
		net_ipv6_create(tcp->context, pkt,
   22bda:	3304      	adds	r3, #4
   22bdc:	6852      	ldr	r2, [r2, #4]
   22bde:	4621      	mov	r1, r4
   22be0:	6830      	ldr	r0, [r6, #0]
   22be2:	f7fc fb8b 	bl	1f2fc <net_ipv6_create>
		dst_port = net_sin6(segment->dst_addr)->sin6_port;
   22be6:	696b      	ldr	r3, [r5, #20]
   22be8:	f8b3 b002 	ldrh.w	fp, [r3, #2]
		src_port = ((struct sockaddr_in6_ptr *)&context->local)->
   22bec:	897b      	ldrh	r3, [r7, #10]
   22bee:	9302      	str	r3, [sp, #8]
	return pkt->frags->data;
   22bf0:	68a3      	ldr	r3, [r4, #8]
   22bf2:	689b      	ldr	r3, [r3, #8]
		NET_IPV6_HDR(pkt)->nexthdr = IPPROTO_TCP;
   22bf4:	2206      	movs	r2, #6
   22bf6:	719a      	strb	r2, [r3, #6]
	header = net_pkt_get_data(context, ALLOC_TIMEOUT);
   22bf8:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   22bfc:	4638      	mov	r0, r7
   22bfe:	f7fa f8fb 	bl	1cdf8 <net_pkt_get_data>
	if (!header) {
   22c02:	9001      	str	r0, [sp, #4]
   22c04:	2800      	cmp	r0, #0
   22c06:	d04f      	beq.n	22ca8 <prepare_segment+0x120>
	net_pkt_frag_add(pkt, header);
   22c08:	9e01      	ldr	r6, [sp, #4]
   22c0a:	4631      	mov	r1, r6
   22c0c:	4620      	mov	r0, r4
   22c0e:	f7fa f93e 	bl	1ce8e <net_pkt_frag_add>
	tcp_hdr = (struct net_tcp_hdr *)net_buf_add(header, NET_TCPH_LEN);
   22c12:	2114      	movs	r1, #20
   22c14:	f106 0008 	add.w	r0, r6, #8
   22c18:	f7f7 fbec 	bl	1a3f4 <net_buf_simple_add>
   22c1c:	4606      	mov	r6, r0
	if (segment->options && segment->optlen) {
   22c1e:	68eb      	ldr	r3, [r5, #12]
   22c20:	9303      	str	r3, [sp, #12]
   22c22:	2b00      	cmp	r3, #0
   22c24:	d05d      	beq.n	22ce2 <prepare_segment+0x15a>
   22c26:	f895 900b 	ldrb.w	r9, [r5, #11]
   22c2a:	f1b9 0f00 	cmp.w	r9, #0
   22c2e:	d145      	bne.n	22cbc <prepare_segment+0x134>
	tcp_hdr->offset = (NET_TCPH_LEN + optlen) << 2;
   22c30:	f109 0914 	add.w	r9, r9, #20
   22c34:	fa5f f989 	uxtb.w	r9, r9
   22c38:	ea4f 0989 	mov.w	r9, r9, lsl #2
   22c3c:	f886 900c 	strb.w	r9, [r6, #12]
	tcp_hdr->src_port = src_port;
   22c40:	f8bd 3008 	ldrh.w	r3, [sp, #8]
   22c44:	8033      	strh	r3, [r6, #0]
	tcp_hdr->dst_port = dst_port;
   22c46:	f8a6 b002 	strh.w	fp, [r6, #2]
	sys_put_be32(segment->seq, tcp_hdr->seq);
   22c4a:	682b      	ldr	r3, [r5, #0]
	sys_put_be16(val >> 16, dst);
   22c4c:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   22c4e:	0a11      	lsrs	r1, r2, #8
   22c50:	7131      	strb	r1, [r6, #4]
	dst[1] = val;
   22c52:	7172      	strb	r2, [r6, #5]
	dst[0] = val >> 8;
   22c54:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22c58:	71b2      	strb	r2, [r6, #6]
	dst[1] = val;
   22c5a:	71f3      	strb	r3, [r6, #7]
	sys_put_be32(segment->ack, tcp_hdr->ack);
   22c5c:	686b      	ldr	r3, [r5, #4]
	sys_put_be16(val >> 16, dst);
   22c5e:	0c1a      	lsrs	r2, r3, #16
	dst[0] = val >> 8;
   22c60:	0a11      	lsrs	r1, r2, #8
   22c62:	7231      	strb	r1, [r6, #8]
	dst[1] = val;
   22c64:	7272      	strb	r2, [r6, #9]
	dst[0] = val >> 8;
   22c66:	f3c3 2207 	ubfx	r2, r3, #8, #8
   22c6a:	72b2      	strb	r2, [r6, #10]
	dst[1] = val;
   22c6c:	72f3      	strb	r3, [r6, #11]
	tcp_hdr->flags = segment->flags;
   22c6e:	7aab      	ldrb	r3, [r5, #10]
   22c70:	7373      	strb	r3, [r6, #13]
	sys_put_be16(segment->wnd, tcp_hdr->wnd);
   22c72:	892b      	ldrh	r3, [r5, #8]
	dst[0] = val >> 8;
   22c74:	0a1a      	lsrs	r2, r3, #8
   22c76:	73b2      	strb	r2, [r6, #14]
	dst[1] = val;
   22c78:	73f3      	strb	r3, [r6, #15]
	tcp_hdr->urg[0] = 0;
   22c7a:	2300      	movs	r3, #0
   22c7c:	74b3      	strb	r3, [r6, #18]
	tcp_hdr->urg[1] = 0;
   22c7e:	74f3      	strb	r3, [r6, #19]
	if (tail) {
   22c80:	f1b8 0f00 	cmp.w	r8, #0
   22c84:	d003      	beq.n	22c8e <prepare_segment+0x106>
		net_pkt_frag_add(pkt, tail);
   22c86:	4641      	mov	r1, r8
   22c88:	4620      	mov	r0, r4
   22c8a:	f7fa f900 	bl	1ce8e <net_pkt_frag_add>
	if (finalize_segment(context, pkt) < 0) {
   22c8e:	4621      	mov	r1, r4
   22c90:	4638      	mov	r0, r7
   22c92:	f7ff ff6d 	bl	22b70 <finalize_segment>
   22c96:	2800      	cmp	r0, #0
   22c98:	db26      	blt.n	22ce8 <prepare_segment+0x160>
	return pkt;
   22c9a:	4620      	mov	r0, r4
   22c9c:	e78b      	b.n	22bb6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22c9e:	4620      	mov	r0, r4
   22ca0:	f7fa f8cb 	bl	1ce3a <net_pkt_unref>
		return NULL;
   22ca4:	2000      	movs	r0, #0
   22ca6:	e786      	b.n	22bb6 <prepare_segment+0x2e>
		if (pkt_allocated) {
   22ca8:	f1ba 0f00 	cmp.w	sl, #0
   22cac:	d101      	bne.n	22cb2 <prepare_segment+0x12a>
		return NULL;
   22cae:	2000      	movs	r0, #0
   22cb0:	e781      	b.n	22bb6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22cb2:	4620      	mov	r0, r4
   22cb4:	f7fa f8c1 	bl	1ce3a <net_pkt_unref>
		return NULL;
   22cb8:	2000      	movs	r0, #0
   22cba:	e77c      	b.n	22bb6 <prepare_segment+0x2e>
	memcpy(net_buf_add(header, len), data, len);
   22cbc:	4649      	mov	r1, r9
   22cbe:	9801      	ldr	r0, [sp, #4]
   22cc0:	3008      	adds	r0, #8
   22cc2:	f7f7 fb97 	bl	1a3f4 <net_buf_simple_add>
   22cc6:	464a      	mov	r2, r9
   22cc8:	9903      	ldr	r1, [sp, #12]
   22cca:	f7dd faf9 	bl	2c0 <memcpy>
	if ((len & 0x3u) != 0u) {
   22cce:	f019 0f03 	tst.w	r9, #3
   22cd2:	d0ad      	beq.n	22c30 <prepare_segment+0xa8>
		optlen = (len & 0xfffCu) + 4u;
   22cd4:	f009 09fc 	and.w	r9, r9, #252	; 0xfc
   22cd8:	f109 0904 	add.w	r9, r9, #4
   22cdc:	fa5f f989 	uxtb.w	r9, r9
   22ce0:	e7a6      	b.n	22c30 <prepare_segment+0xa8>
	u8_t optlen = 0;
   22ce2:	f04f 0900 	mov.w	r9, #0
   22ce6:	e7a3      	b.n	22c30 <prepare_segment+0xa8>
		if (pkt_allocated) {
   22ce8:	f1ba 0f00 	cmp.w	sl, #0
   22cec:	d101      	bne.n	22cf2 <prepare_segment+0x16a>
		return NULL;
   22cee:	2000      	movs	r0, #0
   22cf0:	e761      	b.n	22bb6 <prepare_segment+0x2e>
			net_pkt_unref(pkt);
   22cf2:	4620      	mov	r0, r4
   22cf4:	f7fa f8a1 	bl	1ce3a <net_pkt_unref>
		return NULL;
   22cf8:	2000      	movs	r0, #0
   22cfa:	e75c      	b.n	22bb6 <prepare_segment+0x2e>

00022cfc <net_tcp_alloc>:
{
   22cfc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   22cfe:	f04f 0320 	mov.w	r3, #32
   22d02:	f3ef 8411 	mrs	r4, BASEPRI
   22d06:	f383 8811 	msr	BASEPRI, r3
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22d0a:	2300      	movs	r3, #0
   22d0c:	2b05      	cmp	r3, #5
   22d0e:	dc18      	bgt.n	22d42 <net_tcp_alloc+0x46>
	return tcp->flags & NET_TCP_IN_USE;
   22d10:	22c8      	movs	r2, #200	; 0xc8
   22d12:	492b      	ldr	r1, [pc, #172]	; (22dc0 <net_tcp_alloc+0xc4>)
   22d14:	fb02 1203 	mla	r2, r2, r3, r1
   22d18:	f8b2 20a4 	ldrh.w	r2, [r2, #164]	; 0xa4
   22d1c:	f3c2 1247 	ubfx	r2, r2, #5, #8
		if (!net_tcp_is_used(&tcp_context[i])) {
   22d20:	f012 0f01 	tst.w	r2, #1
   22d24:	d001      	beq.n	22d2a <net_tcp_alloc+0x2e>
	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   22d26:	3301      	adds	r3, #1
   22d28:	e7f0      	b.n	22d0c <net_tcp_alloc+0x10>
			tcp_context[i].flags |= NET_TCP_IN_USE;
   22d2a:	21c8      	movs	r1, #200	; 0xc8
   22d2c:	4d24      	ldr	r5, [pc, #144]	; (22dc0 <net_tcp_alloc+0xc4>)
   22d2e:	fb01 5103 	mla	r1, r1, r3, r5
   22d32:	f042 0201 	orr.w	r2, r2, #1
   22d36:	f8b1 50a4 	ldrh.w	r5, [r1, #164]	; 0xa4
   22d3a:	f362 154c 	bfi	r5, r2, #5, #8
   22d3e:	f8a1 50a4 	strh.w	r5, [r1, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22d42:	f384 8811 	msr	BASEPRI, r4
	if (i >= NET_MAX_TCP_CONTEXT) {
   22d46:	2b05      	cmp	r3, #5
   22d48:	dc37      	bgt.n	22dba <net_tcp_alloc+0xbe>
   22d4a:	4607      	mov	r7, r0
	memset(&tcp_context[i], 0, sizeof(struct net_tcp));
   22d4c:	4e1c      	ldr	r6, [pc, #112]	; (22dc0 <net_tcp_alloc+0xc4>)
   22d4e:	22c8      	movs	r2, #200	; 0xc8
   22d50:	fb02 f403 	mul.w	r4, r2, r3
   22d54:	1935      	adds	r5, r6, r4
   22d56:	2100      	movs	r1, #0
   22d58:	4628      	mov	r0, r5
   22d5a:	f006 fe1d 	bl	29998 <memset>
	tcp_context[i].flags = NET_TCP_IN_USE;
   22d5e:	f8b5 20a4 	ldrh.w	r2, [r5, #164]	; 0xa4
   22d62:	2101      	movs	r1, #1
   22d64:	f361 124c 	bfi	r2, r1, #5, #8
   22d68:	f8a5 20a4 	strh.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].state = NET_TCP_CLOSED;
   22d6c:	f8d5 20a4 	ldr.w	r2, [r5, #164]	; 0xa4
   22d70:	f36f 3250 	bfc	r2, #13, #4
   22d74:	f8c5 20a4 	str.w	r2, [r5, #164]	; 0xa4
	tcp_context[i].context = context;
   22d78:	5137      	str	r7, [r6, r4]
	return sys_rand32_get();
   22d7a:	f7de fca1 	bl	16c0 <sys_rand32_get>
	tcp_context[i].send_seq = tcp_init_isn();
   22d7e:	f8c5 0098 	str.w	r0, [r5, #152]	; 0x98
	tcp_context[i].recv_max_ack = tcp_context[i].send_seq + 1u;
   22d82:	3001      	adds	r0, #1
   22d84:	f8c5 0094 	str.w	r0, [r5, #148]	; 0x94
	tcp_context[i].recv_wnd = min(NET_TCP_MAX_WIN, NET_TCP_BUF_MAX_LEN);
   22d88:	f44f 63a0 	mov.w	r3, #1280	; 0x500
   22d8c:	f8a5 30c4 	strh.w	r3, [r5, #196]	; 0xc4
	tcp_context[i].accept_cb = NULL;
   22d90:	2700      	movs	r7, #0
   22d92:	f8c5 70a8 	str.w	r7, [r5, #168]	; 0xa8
	k_timer_init(&tcp_context[i].retry_timer, tcp_retry_expired, NULL);
   22d96:	f104 0058 	add.w	r0, r4, #88	; 0x58
   22d9a:	463a      	mov	r2, r7
   22d9c:	4909      	ldr	r1, [pc, #36]	; (22dc4 <net_tcp_alloc+0xc8>)
   22d9e:	4430      	add	r0, r6
   22da0:	f006 fa1c 	bl	291dc <k_timer_init>
	k_sem_init(&tcp_context[i].connect_wait, 0, UINT_MAX);
   22da4:	f104 03a8 	add.w	r3, r4, #168	; 0xa8
   22da8:	18f0      	adds	r0, r6, r3
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   22daa:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   22dae:	4639      	mov	r1, r7
   22db0:	3004      	adds	r0, #4
   22db2:	f005 fe15 	bl	289e0 <_impl_k_sem_init>
}
   22db6:	4628      	mov	r0, r5
   22db8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   22dba:	2500      	movs	r5, #0
   22dbc:	e7fb      	b.n	22db6 <net_tcp_alloc+0xba>
   22dbe:	bf00      	nop
   22dc0:	20001ff8 	.word	0x20001ff8
   22dc4:	00023739 	.word	0x00023739

00022dc8 <net_tcp_get_recv_wnd>:
}
   22dc8:	f8b0 00c4 	ldrh.w	r0, [r0, #196]	; 0xc4
   22dcc:	4770      	bx	lr

00022dce <net_tcp_get_recv_mss>:
{
   22dce:	b508      	push	{r3, lr}
	sa_family_t family = net_context_get_family(tcp->context);
   22dd0:	6802      	ldr	r2, [r0, #0]
	if (context->flags & NET_CONTEXT_FAMILY) {
   22dd2:	f892 305d 	ldrb.w	r3, [r2, #93]	; 0x5d
   22dd6:	f013 0f10 	tst.w	r3, #16
   22dda:	d006      	beq.n	22dea <net_tcp_get_recv_mss+0x1c>
		return AF_INET6;
   22ddc:	230a      	movs	r3, #10
	if (family == AF_INET) {
   22dde:	2b02      	cmp	r3, #2
   22de0:	d019      	beq.n	22e16 <net_tcp_get_recv_mss+0x48>
	else if (family == AF_INET6) {
   22de2:	2b0a      	cmp	r3, #10
   22de4:	d003      	beq.n	22dee <net_tcp_get_recv_mss+0x20>
	return 0;
   22de6:	2000      	movs	r0, #0
}
   22de8:	bd08      	pop	{r3, pc}
	return AF_INET;
   22dea:	2302      	movs	r3, #2
   22dec:	e7f7      	b.n	22dde <net_tcp_get_recv_mss+0x10>
	return net_if_get_by_index(context->iface);
   22dee:	f892 005c 	ldrb.w	r0, [r2, #92]	; 0x5c
   22df2:	f7f8 fddb 	bl	1b9ac <net_if_get_by_index>
		if (iface && iface->mtu >= NET_IPV6TCPH_LEN) {
   22df6:	b120      	cbz	r0, 22e02 <net_tcp_get_recv_mss+0x34>
   22df8:	8d00      	ldrh	r0, [r0, #40]	; 0x28
   22dfa:	283b      	cmp	r0, #59	; 0x3b
   22dfc:	d903      	bls.n	22e06 <net_tcp_get_recv_mss+0x38>
			mss = iface->mtu - NET_IPV6TCPH_LEN;
   22dfe:	383c      	subs	r0, #60	; 0x3c
   22e00:	e002      	b.n	22e08 <net_tcp_get_recv_mss+0x3a>
		int mss = 0;
   22e02:	2000      	movs	r0, #0
   22e04:	e000      	b.n	22e08 <net_tcp_get_recv_mss+0x3a>
   22e06:	2000      	movs	r0, #0
		if (mss < NET_IPV6_MTU) {
   22e08:	f5b0 6fa0 	cmp.w	r0, #1280	; 0x500
   22e0c:	da01      	bge.n	22e12 <net_tcp_get_recv_mss+0x44>
			mss = NET_IPV6_MTU;
   22e0e:	f44f 60a0 	mov.w	r0, #1280	; 0x500
		return mss;
   22e12:	b280      	uxth	r0, r0
   22e14:	bd08      	pop	{r3, pc}
		return 0;
   22e16:	2000      	movs	r0, #0
   22e18:	bd08      	pop	{r3, pc}

00022e1a <net_tcp_set_syn_opt>:
{
   22e1a:	b570      	push	{r4, r5, r6, lr}
   22e1c:	460e      	mov	r6, r1
   22e1e:	4614      	mov	r4, r2
	*optionlen = 0;
   22e20:	2300      	movs	r3, #0
   22e22:	7013      	strb	r3, [r2, #0]
	if (!(tcp->flags & NET_TCP_RECV_MSS_SET)) {
   22e24:	f8b0 30a4 	ldrh.w	r3, [r0, #164]	; 0xa4
   22e28:	f413 6f80 	tst.w	r3, #1024	; 0x400
   22e2c:	d00f      	beq.n	22e4e <net_tcp_set_syn_opt+0x34>
		recv_mss = 0;
   22e2e:	2000      	movs	r0, #0
	UNALIGNED_PUT(htonl((u32_t)recv_mss | NET_TCP_MSS_HEADER),
   22e30:	7822      	ldrb	r2, [r4, #0]
   22e32:	0203      	lsls	r3, r0, #8
   22e34:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
   22e38:	ea43 6000 	orr.w	r0, r3, r0, lsl #24
   22e3c:	f440 6080 	orr.w	r0, r0, #1024	; 0x400
   22e40:	f040 0002 	orr.w	r0, r0, #2
   22e44:	50b0      	str	r0, [r6, r2]
	*optionlen += NET_TCP_MSS_SIZE;
   22e46:	7823      	ldrb	r3, [r4, #0]
   22e48:	3304      	adds	r3, #4
   22e4a:	7023      	strb	r3, [r4, #0]
   22e4c:	bd70      	pop	{r4, r5, r6, pc}
   22e4e:	4605      	mov	r5, r0
		recv_mss = net_tcp_get_recv_mss(tcp);
   22e50:	f7ff ffbd 	bl	22dce <net_tcp_get_recv_mss>
		tcp->flags |= NET_TCP_RECV_MSS_SET;
   22e54:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22e58:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
   22e5c:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
   22e60:	e7e6      	b.n	22e30 <net_tcp_set_syn_opt+0x16>

00022e62 <net_tcp_prepare_reset>:
{
   22e62:	b510      	push	{r4, lr}
   22e64:	b086      	sub	sp, #24
	struct tcp_segment segment = { 0 };
   22e66:	2300      	movs	r3, #0
   22e68:	9300      	str	r3, [sp, #0]
   22e6a:	9301      	str	r3, [sp, #4]
   22e6c:	9302      	str	r3, [sp, #8]
   22e6e:	9303      	str	r3, [sp, #12]
   22e70:	9304      	str	r3, [sp, #16]
   22e72:	9305      	str	r3, [sp, #20]
	if ((net_context_get_state(tcp->context) != NET_CONTEXT_UNCONNECTED) &&
   22e74:	6803      	ldr	r3, [r0, #0]
	return (context->flags >> NET_CONTEXT_STATE_SHIFT) &
   22e76:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   22e7a:	f013 0f06 	tst.w	r3, #6
   22e7e:	d01a      	beq.n	22eb6 <net_tcp_prepare_reset+0x54>
	return (enum net_tcp_state)tcp->state;
   22e80:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22e84:	f3c3 3343 	ubfx	r3, r3, #13, #4
   22e88:	2b02      	cmp	r3, #2
   22e8a:	d014      	beq.n	22eb6 <net_tcp_prepare_reset+0x54>
	    (net_tcp_get_state(tcp) != NET_TCP_SYN_SENT) &&
   22e8c:	2b09      	cmp	r3, #9
   22e8e:	d012      	beq.n	22eb6 <net_tcp_prepare_reset+0x54>
   22e90:	4614      	mov	r4, r2
		segment.ack = tcp->send_ack;
   22e92:	f8d0 309c 	ldr.w	r3, [r0, #156]	; 0x9c
   22e96:	9301      	str	r3, [sp, #4]
		segment.flags = NET_TCP_RST | NET_TCP_ACK;
   22e98:	2314      	movs	r3, #20
   22e9a:	f88d 300a 	strb.w	r3, [sp, #10]
		segment.seq = tcp->send_seq;
   22e9e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   22ea2:	9300      	str	r3, [sp, #0]
		segment.src_addr = &tcp->context->local;
   22ea4:	6803      	ldr	r3, [r0, #0]
   22ea6:	3308      	adds	r3, #8
   22ea8:	9304      	str	r3, [sp, #16]
		segment.dst_addr = remote;
   22eaa:	9105      	str	r1, [sp, #20]
		*pkt = prepare_segment(tcp, &segment, NULL);
   22eac:	2200      	movs	r2, #0
   22eae:	4669      	mov	r1, sp
   22eb0:	f7ff fe6a 	bl	22b88 <prepare_segment>
   22eb4:	6020      	str	r0, [r4, #0]
}
   22eb6:	2000      	movs	r0, #0
   22eb8:	b006      	add	sp, #24
   22eba:	bd10      	pop	{r4, pc}

00022ebc <net_tcp_state_str>:
}
   22ebc:	4800      	ldr	r0, [pc, #0]	; (22ec0 <net_tcp_state_str+0x4>)
   22ebe:	4770      	bx	lr
   22ec0:	0002afec 	.word	0x0002afec

00022ec4 <net_tcp_init>:
		}
	}
}

void net_tcp_init(void)
{
   22ec4:	4770      	bx	lr

00022ec6 <net_tcp_change_state>:
   22ec6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22eca:	f3c3 3343 	ubfx	r3, r3, #13, #4
void net_tcp_change_state(struct net_tcp *tcp,
			  enum net_tcp_state new_state)
{
	NET_ASSERT(tcp);

	if (net_tcp_get_state(tcp) == new_state) {
   22ece:	428b      	cmp	r3, r1
   22ed0:	d022      	beq.n	22f18 <net_tcp_change_state+0x52>

#if defined(CONFIG_NET_DEBUG_TCP)
	validate_state_transition(tcp->state, new_state);
#endif /* CONFIG_NET_DEBUG_TCP */

	tcp->state = new_state;
   22ed2:	f001 010f 	and.w	r1, r1, #15
   22ed6:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   22eda:	f361 3350 	bfi	r3, r1, #13, #4
   22ede:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	if (net_tcp_get_state(tcp) != NET_TCP_CLOSED) {
   22ee2:	b9c9      	cbnz	r1, 22f18 <net_tcp_change_state+0x52>
		return;
	}

	if (!tcp->context) {
   22ee4:	6803      	ldr	r3, [r0, #0]
   22ee6:	b1bb      	cbz	r3, 22f18 <net_tcp_change_state+0x52>
{
   22ee8:	b530      	push	{r4, r5, lr}
   22eea:	b083      	sub	sp, #12
   22eec:	4604      	mov	r4, r0
		return;
	}

	/* Remove any port handlers if we are closing */
	if (tcp->context->conn_handler) {
   22eee:	6ad8      	ldr	r0, [r3, #44]	; 0x2c
   22ef0:	b120      	cbz	r0, 22efc <net_tcp_change_state+0x36>
	return net_conn_unregister(handle);
   22ef2:	f001 fcef 	bl	248d4 <net_conn_unregister>
		net_tcp_unregister(tcp->context->conn_handler);
		tcp->context->conn_handler = NULL;
   22ef6:	6823      	ldr	r3, [r4, #0]
   22ef8:	2200      	movs	r2, #0
   22efa:	62da      	str	r2, [r3, #44]	; 0x2c
	}

	if (tcp->accept_cb) {
   22efc:	f8d4 50a8 	ldr.w	r5, [r4, #168]	; 0xa8
   22f00:	b145      	cbz	r5, 22f14 <net_tcp_change_state+0x4e>
		tcp->accept_cb(tcp->context,
   22f02:	6820      	ldr	r0, [r4, #0]
   22f04:	6803      	ldr	r3, [r0, #0]
   22f06:	9300      	str	r3, [sp, #0]
   22f08:	f06f 037d 	mvn.w	r3, #125	; 0x7d
   22f0c:	2218      	movs	r2, #24
   22f0e:	f100 0114 	add.w	r1, r0, #20
   22f12:	47a8      	blx	r5
			       &tcp->context->remote,
			       sizeof(struct sockaddr),
			       -ENETRESET,
			       tcp->context->user_data);
	}
}
   22f14:	b003      	add	sp, #12
   22f16:	bd30      	pop	{r4, r5, pc}
   22f18:	4770      	bx	lr
	...

00022f1c <net_tcp_release>:
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22f1c:	2800      	cmp	r0, #0
   22f1e:	d064      	beq.n	22fea <net_tcp_release+0xce>
{
   22f20:	b538      	push	{r3, r4, r5, lr}
   22f22:	4605      	mov	r5, r0
	if (!PART_OF_ARRAY(tcp_context, tcp)) {
   22f24:	4b35      	ldr	r3, [pc, #212]	; (22ffc <net_tcp_release+0xe0>)
   22f26:	4298      	cmp	r0, r3
   22f28:	d362      	bcc.n	22ff0 <net_tcp_release+0xd4>
   22f2a:	f503 6396 	add.w	r3, r3, #1200	; 0x4b0
   22f2e:	4298      	cmp	r0, r3
   22f30:	d261      	bcs.n	22ff6 <net_tcp_release+0xda>
	return list->head;
   22f32:	f8d0 008c 	ldr.w	r0, [r0, #140]	; 0x8c
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22f36:	b140      	cbz	r0, 22f4a <net_tcp_release+0x2e>
   22f38:	3834      	subs	r0, #52	; 0x34
   22f3a:	b140      	cbz	r0, 22f4e <net_tcp_release+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f3c:	f110 0434 	adds.w	r4, r0, #52	; 0x34
   22f40:	d000      	beq.n	22f44 <net_tcp_release+0x28>
	return node->next;
   22f42:	6b44      	ldr	r4, [r0, #52]	; 0x34
   22f44:	b12c      	cbz	r4, 22f52 <net_tcp_release+0x36>
   22f46:	3c34      	subs	r4, #52	; 0x34
   22f48:	e00d      	b.n	22f66 <net_tcp_release+0x4a>
   22f4a:	2000      	movs	r0, #0
   22f4c:	e7f5      	b.n	22f3a <net_tcp_release+0x1e>
   22f4e:	4604      	mov	r4, r0
   22f50:	e009      	b.n	22f66 <net_tcp_release+0x4a>
   22f52:	2400      	movs	r4, #0
   22f54:	e007      	b.n	22f66 <net_tcp_release+0x4a>
			list->tail = list->head;
   22f56:	f8c5 2090 	str.w	r2, [r5, #144]	; 0x90
   22f5a:	e00e      	b.n	22f7a <net_tcp_release+0x5e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f5c:	461a      	mov	r2, r3
   22f5e:	e015      	b.n	22f8c <net_tcp_release+0x70>
   22f60:	3b34      	subs	r3, #52	; 0x34
   22f62:	4620      	mov	r0, r4
   22f64:	461c      	mov	r4, r3
   22f66:	b1d0      	cbz	r0, 22f9e <net_tcp_release+0x82>
		sys_slist_remove(&tcp->sent_list, NULL, &pkt->sent_list);
   22f68:	f100 0334 	add.w	r3, r0, #52	; 0x34
		list->head = node->next;
   22f6c:	6b42      	ldr	r2, [r0, #52]	; 0x34
   22f6e:	f8c5 208c 	str.w	r2, [r5, #140]	; 0x8c
		if (list->tail == node) {
   22f72:	f8d5 1090 	ldr.w	r1, [r5, #144]	; 0x90
   22f76:	428b      	cmp	r3, r1
   22f78:	d0ed      	beq.n	22f56 <net_tcp_release+0x3a>
	node->next = NULL;
   22f7a:	2300      	movs	r3, #0
   22f7c:	6343      	str	r3, [r0, #52]	; 0x34
		net_pkt_unref(pkt);
   22f7e:	f7f9 ff5c 	bl	1ce3a <net_pkt_unref>
	SYS_SLIST_FOR_EACH_CONTAINER_SAFE(&tcp->sent_list, pkt, tmp,
   22f82:	b144      	cbz	r4, 22f96 <net_tcp_release+0x7a>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f84:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   22f88:	d0e8      	beq.n	22f5c <net_tcp_release+0x40>
	return node->next;
   22f8a:	6b62      	ldr	r2, [r4, #52]	; 0x34
   22f8c:	b12a      	cbz	r2, 22f9a <net_tcp_release+0x7e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   22f8e:	2b00      	cmp	r3, #0
   22f90:	d0e6      	beq.n	22f60 <net_tcp_release+0x44>
	return node->next;
   22f92:	6b63      	ldr	r3, [r4, #52]	; 0x34
   22f94:	e7e4      	b.n	22f60 <net_tcp_release+0x44>
   22f96:	4623      	mov	r3, r4
   22f98:	e7e3      	b.n	22f62 <net_tcp_release+0x46>
   22f9a:	2300      	movs	r3, #0
   22f9c:	e7e1      	b.n	22f62 <net_tcp_release+0x46>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_TIMER_STOP, k_timer_stop, struct k_timer *, timer);
   22f9e:	f105 0058 	add.w	r0, r5, #88	; 0x58
   22fa2:	f006 f9e7 	bl	29374 <_impl_k_timer_stop>
	sem->count = 0;
   22fa6:	2400      	movs	r4, #0
   22fa8:	f8c5 40b4 	str.w	r4, [r5, #180]	; 0xb4
	ack_timer_cancel(tcp);
   22fac:	4628      	mov	r0, r5
   22fae:	f7ff fdd5 	bl	22b5c <ack_timer_cancel>
	fin_timer_cancel(tcp);
   22fb2:	4628      	mov	r0, r5
   22fb4:	f7ff fdd7 	bl	22b66 <fin_timer_cancel>
	net_tcp_change_state(tcp, NET_TCP_CLOSED);
   22fb8:	4621      	mov	r1, r4
   22fba:	4628      	mov	r0, r5
   22fbc:	f7ff ff83 	bl	22ec6 <net_tcp_change_state>
	tcp->context = NULL;
   22fc0:	602c      	str	r4, [r5, #0]
	__asm__ volatile(
   22fc2:	f04f 0320 	mov.w	r3, #32
   22fc6:	f3ef 8111 	mrs	r1, BASEPRI
   22fca:	f383 8811 	msr	BASEPRI, r3
	tcp->flags &= ~(NET_TCP_IN_USE | NET_TCP_RECV_MSS_SET);
   22fce:	f8b5 30a4 	ldrh.w	r3, [r5, #164]	; 0xa4
   22fd2:	f3c3 1247 	ubfx	r2, r3, #5, #8
   22fd6:	f022 0221 	bic.w	r2, r2, #33	; 0x21
   22fda:	f362 134c 	bfi	r3, r2, #5, #8
   22fde:	f8a5 30a4 	strh.w	r3, [r5, #164]	; 0xa4
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   22fe2:	f381 8811 	msr	BASEPRI, r1
	return 0;
   22fe6:	4620      	mov	r0, r4
   22fe8:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   22fea:	f06f 0015 	mvn.w	r0, #21
   22fee:	4770      	bx	lr
   22ff0:	f06f 0015 	mvn.w	r0, #21
   22ff4:	bd38      	pop	{r3, r4, r5, pc}
   22ff6:	f06f 0015 	mvn.w	r0, #21
}
   22ffa:	bd38      	pop	{r3, r4, r5, pc}
   22ffc:	20001ff8 	.word	0x20001ff8

00023000 <net_tcp_prepare_segment>:
{
   23000:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23004:	b086      	sub	sp, #24
   23006:	4604      	mov	r4, r0
   23008:	460d      	mov	r5, r1
   2300a:	4692      	mov	sl, r2
   2300c:	4699      	mov	r9, r3
   2300e:	9f0e      	ldr	r7, [sp, #56]	; 0x38
   23010:	f8dd 8040 	ldr.w	r8, [sp, #64]	; 0x40
	struct tcp_segment segment = { 0 };
   23014:	2300      	movs	r3, #0
   23016:	9300      	str	r3, [sp, #0]
   23018:	9301      	str	r3, [sp, #4]
   2301a:	9302      	str	r3, [sp, #8]
   2301c:	9303      	str	r3, [sp, #12]
   2301e:	9304      	str	r3, [sp, #16]
   23020:	9305      	str	r3, [sp, #20]
	if (!local) {
   23022:	2f00      	cmp	r7, #0
   23024:	d050      	beq.n	230c8 <net_tcp_prepare_segment+0xc8>
	seq = tcp->send_seq;
   23026:	f8d4 6098 	ldr.w	r6, [r4, #152]	; 0x98
	if (flags & NET_TCP_ACK) {
   2302a:	f015 0f10 	tst.w	r5, #16
   2302e:	d009      	beq.n	23044 <net_tcp_prepare_segment+0x44>
	return (enum net_tcp_state)tcp->state;
   23030:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23034:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_1) {
   23038:	2b07      	cmp	r3, #7
   2303a:	d048      	beq.n	230ce <net_tcp_prepare_segment+0xce>
		} else if (net_tcp_get_state(tcp) == NET_TCP_FIN_WAIT_2) {
   2303c:	2b08      	cmp	r3, #8
   2303e:	d055      	beq.n	230ec <net_tcp_prepare_segment+0xec>
		} else if (net_tcp_get_state(tcp) == NET_TCP_CLOSE_WAIT) {
   23040:	2b05      	cmp	r3, #5
   23042:	d058      	beq.n	230f6 <net_tcp_prepare_segment+0xf6>
	if (flags & NET_TCP_FIN) {
   23044:	f015 0f01 	tst.w	r5, #1
   23048:	d010      	beq.n	2306c <net_tcp_prepare_segment+0x6c>
		tcp->flags |= NET_TCP_FINAL_SENT;
   2304a:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   2304e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   23052:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
		flags |= NET_TCP_ACK;
   23056:	f045 0510 	orr.w	r5, r5, #16
		seq += 2;
   2305a:	3602      	adds	r6, #2
   2305c:	f8d4 30a4 	ldr.w	r3, [r4, #164]	; 0xa4
   23060:	f3c3 3343 	ubfx	r3, r3, #13, #4
		if (net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED ||
   23064:	2b04      	cmp	r3, #4
   23066:	d053      	beq.n	23110 <net_tcp_prepare_segment+0x110>
   23068:	2b03      	cmp	r3, #3
   2306a:	d051      	beq.n	23110 <net_tcp_prepare_segment+0x110>
	if (flags & NET_TCP_SYN) {
   2306c:	f015 0f02 	tst.w	r5, #2
   23070:	d000      	beq.n	23074 <net_tcp_prepare_segment+0x74>
		seq++;
   23072:	3601      	adds	r6, #1
	wnd = net_tcp_get_recv_wnd(tcp);
   23074:	4620      	mov	r0, r4
   23076:	f7ff fea7 	bl	22dc8 <net_tcp_get_recv_wnd>
	segment.src_addr = (struct sockaddr_ptr *)local;
   2307a:	9704      	str	r7, [sp, #16]
	segment.dst_addr = remote;
   2307c:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
   2307e:	9305      	str	r3, [sp, #20]
	segment.seq = tcp->send_seq;
   23080:	f8d4 3098 	ldr.w	r3, [r4, #152]	; 0x98
   23084:	9300      	str	r3, [sp, #0]
	segment.ack = tcp->send_ack;
   23086:	f8d4 309c 	ldr.w	r3, [r4, #156]	; 0x9c
   2308a:	9301      	str	r3, [sp, #4]
	segment.flags = flags;
   2308c:	f88d 500a 	strb.w	r5, [sp, #10]
	segment.wnd = wnd;
   23090:	f8ad 0008 	strh.w	r0, [sp, #8]
	segment.options = options;
   23094:	f8cd a00c 	str.w	sl, [sp, #12]
	segment.optlen = optlen;
   23098:	f88d 900b 	strb.w	r9, [sp, #11]
	*send_pkt = prepare_segment(tcp, &segment, *send_pkt);
   2309c:	f8d8 2000 	ldr.w	r2, [r8]
   230a0:	4669      	mov	r1, sp
   230a2:	4620      	mov	r0, r4
   230a4:	f7ff fd70 	bl	22b88 <prepare_segment>
   230a8:	f8c8 0000 	str.w	r0, [r8]
	if (!*send_pkt) {
   230ac:	b3a8      	cbz	r0, 2311a <net_tcp_prepare_segment+0x11a>
	tcp->send_seq = seq;
   230ae:	f8c4 6098 	str.w	r6, [r4, #152]	; 0x98
	if (net_tcp_seq_greater(tcp->send_seq, tcp->recv_max_ack)) {
   230b2:	f8d4 3094 	ldr.w	r3, [r4, #148]	; 0x94
	return (s32_t)(seq1 - seq2);
   230b6:	1af3      	subs	r3, r6, r3
   230b8:	2b00      	cmp	r3, #0
   230ba:	dd31      	ble.n	23120 <net_tcp_prepare_segment+0x120>
		tcp->recv_max_ack = tcp->send_seq;
   230bc:	f8c4 6094 	str.w	r6, [r4, #148]	; 0x94
	return 0;
   230c0:	2000      	movs	r0, #0
}
   230c2:	b006      	add	sp, #24
   230c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
		local = &tcp->context->local;
   230c8:	6807      	ldr	r7, [r0, #0]
   230ca:	3708      	adds	r7, #8
   230cc:	e7ab      	b.n	23026 <net_tcp_prepare_segment+0x26>
			if (flags & NET_TCP_FIN) {
   230ce:	f015 0f01 	tst.w	r5, #1
   230d2:	d006      	beq.n	230e2 <net_tcp_prepare_segment+0xe2>
				flags &= ~NET_TCP_FIN;
   230d4:	f005 05fe 	and.w	r5, r5, #254	; 0xfe
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   230d8:	2109      	movs	r1, #9
   230da:	4620      	mov	r0, r4
   230dc:	f7ff fef3 	bl	22ec6 <net_tcp_change_state>
   230e0:	e7b0      	b.n	23044 <net_tcp_prepare_segment+0x44>
				net_tcp_change_state(tcp, NET_TCP_CLOSING);
   230e2:	210a      	movs	r1, #10
   230e4:	4620      	mov	r0, r4
   230e6:	f7ff feee 	bl	22ec6 <net_tcp_change_state>
   230ea:	e7ab      	b.n	23044 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   230ec:	2109      	movs	r1, #9
   230ee:	4620      	mov	r0, r4
   230f0:	f7ff fee9 	bl	22ec6 <net_tcp_change_state>
   230f4:	e7a6      	b.n	23044 <net_tcp_prepare_segment+0x44>
			tcp->flags |= NET_TCP_IS_SHUTDOWN;
   230f6:	f8b4 30a4 	ldrh.w	r3, [r4, #164]	; 0xa4
   230fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
   230fe:	f8a4 30a4 	strh.w	r3, [r4, #164]	; 0xa4
			flags |= NET_TCP_FIN;
   23102:	f045 0501 	orr.w	r5, r5, #1
			net_tcp_change_state(tcp, NET_TCP_LAST_ACK);
   23106:	2106      	movs	r1, #6
   23108:	4620      	mov	r0, r4
   2310a:	f7ff fedc 	bl	22ec6 <net_tcp_change_state>
   2310e:	e799      	b.n	23044 <net_tcp_prepare_segment+0x44>
			net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_1);
   23110:	2107      	movs	r1, #7
   23112:	4620      	mov	r0, r4
   23114:	f7ff fed7 	bl	22ec6 <net_tcp_change_state>
   23118:	e7a8      	b.n	2306c <net_tcp_prepare_segment+0x6c>
		return -EINVAL;
   2311a:	f06f 0015 	mvn.w	r0, #21
   2311e:	e7d0      	b.n	230c2 <net_tcp_prepare_segment+0xc2>
	return 0;
   23120:	2000      	movs	r0, #0
   23122:	e7ce      	b.n	230c2 <net_tcp_prepare_segment+0xc2>

00023124 <net_tcp_prepare_ack>:
{
   23124:	b570      	push	{r4, r5, r6, lr}
   23126:	b088      	sub	sp, #32
   23128:	4604      	mov	r4, r0
   2312a:	460d      	mov	r5, r1
   2312c:	4616      	mov	r6, r2
   2312e:	f8d0 30a4 	ldr.w	r3, [r0, #164]	; 0xa4
   23132:	f3c3 3343 	ubfx	r3, r3, #13, #4
	switch (net_tcp_get_state(tcp)) {
   23136:	2b03      	cmp	r3, #3
   23138:	d011      	beq.n	2315e <net_tcp_prepare_ack+0x3a>
   2313a:	d327      	bcc.n	2318c <net_tcp_prepare_ack+0x68>
   2313c:	3b06      	subs	r3, #6
   2313e:	2b01      	cmp	r3, #1
   23140:	d824      	bhi.n	2318c <net_tcp_prepare_ack+0x68>
		tcp->send_seq--;
   23142:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23146:	3b01      	subs	r3, #1
   23148:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		return net_tcp_prepare_segment(tcp, NET_TCP_FIN | NET_TCP_ACK,
   2314c:	9202      	str	r2, [sp, #8]
   2314e:	9101      	str	r1, [sp, #4]
   23150:	2200      	movs	r2, #0
   23152:	9200      	str	r2, [sp, #0]
   23154:	4613      	mov	r3, r2
   23156:	2111      	movs	r1, #17
   23158:	f7ff ff52 	bl	23000 <net_tcp_prepare_segment>
   2315c:	e014      	b.n	23188 <net_tcp_prepare_ack+0x64>
		tcp->send_seq--;
   2315e:	f8d0 3098 	ldr.w	r3, [r0, #152]	; 0x98
   23162:	3b01      	subs	r3, #1
   23164:	f8c0 3098 	str.w	r3, [r0, #152]	; 0x98
		net_tcp_set_syn_opt(tcp, options, &optionlen);
   23168:	f10d 0217 	add.w	r2, sp, #23
   2316c:	a906      	add	r1, sp, #24
   2316e:	f7ff fe54 	bl	22e1a <net_tcp_set_syn_opt>
		return net_tcp_prepare_segment(tcp, NET_TCP_SYN | NET_TCP_ACK,
   23172:	f89d 3017 	ldrb.w	r3, [sp, #23]
   23176:	9602      	str	r6, [sp, #8]
   23178:	9501      	str	r5, [sp, #4]
   2317a:	2200      	movs	r2, #0
   2317c:	9200      	str	r2, [sp, #0]
   2317e:	aa06      	add	r2, sp, #24
   23180:	2112      	movs	r1, #18
   23182:	4620      	mov	r0, r4
   23184:	f7ff ff3c 	bl	23000 <net_tcp_prepare_segment>
}
   23188:	b008      	add	sp, #32
   2318a:	bd70      	pop	{r4, r5, r6, pc}
		return net_tcp_prepare_segment(tcp, NET_TCP_ACK, 0, 0, NULL,
   2318c:	9602      	str	r6, [sp, #8]
   2318e:	9501      	str	r5, [sp, #4]
   23190:	2200      	movs	r2, #0
   23192:	9200      	str	r2, [sp, #0]
   23194:	4613      	mov	r3, r2
   23196:	2110      	movs	r1, #16
   23198:	4620      	mov	r0, r4
   2319a:	f7ff ff31 	bl	23000 <net_tcp_prepare_segment>
   2319e:	e7f3      	b.n	23188 <net_tcp_prepare_ack+0x64>

000231a0 <net_tcp_queue_data>:
{
   231a0:	b570      	push	{r4, r5, r6, lr}
   231a2:	b086      	sub	sp, #24
   231a4:	4605      	mov	r5, r0
   231a6:	9105      	str	r1, [sp, #20]
	struct net_conn *conn = (struct net_conn *)context->conn_handler;
   231a8:	6ac0      	ldr	r0, [r0, #44]	; 0x2c
	return net_buf_frags_len(pkt->frags);
   231aa:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   231ac:	2400      	movs	r4, #0
   231ae:	e002      	b.n	231b6 <net_tcp_queue_data+0x16>
		bytes += buf->len;
   231b0:	899a      	ldrh	r2, [r3, #12]
   231b2:	4414      	add	r4, r2
		buf = buf->frags;
   231b4:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   231b6:	2b00      	cmp	r3, #0
   231b8:	d1fa      	bne.n	231b0 <net_tcp_queue_data+0x10>
	ret = net_tcp_prepare_segment(context->tcp, NET_TCP_PSH | NET_TCP_ACK,
   231ba:	ab05      	add	r3, sp, #20
   231bc:	9302      	str	r3, [sp, #8]
   231be:	9001      	str	r0, [sp, #4]
   231c0:	2200      	movs	r2, #0
   231c2:	9200      	str	r2, [sp, #0]
   231c4:	4613      	mov	r3, r2
   231c6:	2118      	movs	r1, #24
   231c8:	6e28      	ldr	r0, [r5, #96]	; 0x60
   231ca:	f7ff ff19 	bl	23000 <net_tcp_prepare_segment>
	if (ret) {
   231ce:	4606      	mov	r6, r0
   231d0:	bb10      	cbnz	r0, 23218 <net_tcp_queue_data+0x78>
	context->tcp->send_seq += data_len;
   231d2:	6e2a      	ldr	r2, [r5, #96]	; 0x60
   231d4:	f8d2 3098 	ldr.w	r3, [r2, #152]	; 0x98
   231d8:	4423      	add	r3, r4
   231da:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98
	net_stats.tcp.bytes.sent += bytes;
   231de:	4a1b      	ldr	r2, [pc, #108]	; (2324c <net_tcp_queue_data+0xac>)
   231e0:	6c93      	ldr	r3, [r2, #72]	; 0x48
   231e2:	441c      	add	r4, r3
   231e4:	6494      	str	r4, [r2, #72]	; 0x48
	sys_slist_append(&context->tcp->sent_list, &pkt->sent_list);
   231e6:	6e2b      	ldr	r3, [r5, #96]	; 0x60
   231e8:	9905      	ldr	r1, [sp, #20]
   231ea:	f101 0234 	add.w	r2, r1, #52	; 0x34
	node->next = NULL;
   231ee:	6348      	str	r0, [r1, #52]	; 0x34
	if (!list->tail) {
   231f0:	f8d3 1090 	ldr.w	r1, [r3, #144]	; 0x90
   231f4:	b199      	cbz	r1, 2321e <net_tcp_queue_data+0x7e>
		list->tail->next = node;
   231f6:	600a      	str	r2, [r1, #0]
		list->tail = node;
   231f8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
	if (k_timer_remaining_get(&context->tcp->retry_timer) == 0) {
   231fc:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return _timeout_remaining_get(&timer->timeout);
   231fe:	3058      	adds	r0, #88	; 0x58
   23200:	f006 f942 	bl	29488 <_timeout_remaining_get>
   23204:	b180      	cbz	r0, 23228 <net_tcp_queue_data+0x88>
	do_ref_if_needed(context->tcp, pkt);
   23206:	9805      	ldr	r0, [sp, #20]
	return pkt->family;
   23208:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   2320c:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   23210:	2b0a      	cmp	r3, #10
   23212:	d015      	beq.n	23240 <net_tcp_queue_data+0xa0>
   23214:	f7f9 fe02 	bl	1ce1c <net_pkt_ref>
}
   23218:	4630      	mov	r0, r6
   2321a:	b006      	add	sp, #24
   2321c:	bd70      	pop	{r4, r5, r6, pc}
		list->tail = node;
   2321e:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
		list->head = node;
   23222:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
   23226:	e7e9      	b.n	231fc <net_tcp_queue_data+0x5c>
		k_timer_start(&context->tcp->retry_timer,
   23228:	6e28      	ldr	r0, [r5, #96]	; 0x60
	return ((u32_t)1 << tcp->retry_timeout_shift) * INIT_RETRY_MS;
   2322a:	f890 30a4 	ldrb.w	r3, [r0, #164]	; 0xa4
   2322e:	f003 031f 	and.w	r3, r3, #31
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_TIMER_START, k_timer_start, struct k_timer *, timer, s32_t, duration, s32_t, period);
   23232:	2200      	movs	r2, #0
   23234:	21c8      	movs	r1, #200	; 0xc8
   23236:	4099      	lsls	r1, r3
   23238:	3058      	adds	r0, #88	; 0x58
   2323a:	f005 ffe3 	bl	29204 <_impl_k_timer_start>
   2323e:	e7e2      	b.n	23206 <net_tcp_queue_data+0x66>
	do_ref_if_needed(context->tcp, pkt);
   23240:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   23244:	2b02      	cmp	r3, #2
   23246:	d1e5      	bne.n	23214 <net_tcp_queue_data+0x74>
   23248:	e7e6      	b.n	23218 <net_tcp_queue_data+0x78>
   2324a:	bf00      	nop
   2324c:	20002ab8 	.word	0x20002ab8

00023250 <net_tcp_foreach>:

void net_tcp_foreach(net_tcp_cb_t cb, void *user_data)
{
   23250:	b570      	push	{r4, r5, r6, lr}
   23252:	4606      	mov	r6, r0
   23254:	460d      	mov	r5, r1
	__asm__ volatile(
   23256:	f04f 0320 	mov.w	r3, #32
   2325a:	f3ef 8111 	mrs	r1, BASEPRI
   2325e:	f383 8811 	msr	BASEPRI, r3
	int i, key;

	key = irq_lock();

	for (i = 0; i < NET_MAX_TCP_CONTEXT; i++) {
   23262:	2400      	movs	r4, #0
   23264:	e000      	b.n	23268 <net_tcp_foreach+0x18>
   23266:	3401      	adds	r4, #1
   23268:	2c05      	cmp	r4, #5
   2326a:	dc16      	bgt.n	2329a <net_tcp_foreach+0x4a>
	return tcp->flags & NET_TCP_IN_USE;
   2326c:	23c8      	movs	r3, #200	; 0xc8
   2326e:	4a0c      	ldr	r2, [pc, #48]	; (232a0 <net_tcp_foreach+0x50>)
   23270:	fb03 2304 	mla	r3, r3, r4, r2
   23274:	f8b3 30a4 	ldrh.w	r3, [r3, #164]	; 0xa4
		if (!net_tcp_is_used(&tcp_context[i])) {
   23278:	f013 0f20 	tst.w	r3, #32
   2327c:	d0f3      	beq.n	23266 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2327e:	f381 8811 	msr	BASEPRI, r1
			continue;
		}

		irq_unlock(key);

		cb(&tcp_context[i], user_data);
   23282:	4629      	mov	r1, r5
   23284:	20c8      	movs	r0, #200	; 0xc8
   23286:	fb00 2004 	mla	r0, r0, r4, r2
   2328a:	47b0      	blx	r6
	__asm__ volatile(
   2328c:	f04f 0320 	mov.w	r3, #32
   23290:	f3ef 8111 	mrs	r1, BASEPRI
   23294:	f383 8811 	msr	BASEPRI, r3
   23298:	e7e5      	b.n	23266 <net_tcp_foreach+0x16>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2329a:	f381 8811 	msr	BASEPRI, r1
   2329e:	bd70      	pop	{r4, r5, r6, pc}
   232a0:	20001ff8 	.word	0x20001ff8

000232a4 <net_tcp_get_hdr>:
					+ net_tcp_get_recv_wnd(tcp)) < 0);
}

struct net_tcp_hdr *net_tcp_get_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   232a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   232a6:	b085      	sub	sp, #20
   232a8:	4605      	mov	r5, r0
   232aa:	460e      	mov	r6, r1
	struct net_tcp_hdr *tcp_hdr;
	struct net_buf *frag;
	u16_t pos;

	tcp_hdr = net_pkt_tcp_data(pkt);
   232ac:	f7fa f8df 	bl	1d46e <net_pkt_tcp_data>
   232b0:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   232b2:	2214      	movs	r2, #20
   232b4:	4601      	mov	r1, r0
   232b6:	4628      	mov	r0, r5
   232b8:	f7fa fc82 	bl	1dbc0 <net_header_fits>
   232bc:	b120      	cbz	r0, 232c8 <net_tcp_get_hdr+0x24>
		return hdr;
   232be:	4627      	mov	r7, r4
	if (net_tcp_header_fits(pkt, tcp_hdr)) {
   232c0:	b127      	cbz	r7, 232cc <net_tcp_get_hdr+0x28>

		return NULL;
	}

	return hdr;
}
   232c2:	4620      	mov	r0, r4
   232c4:	b005      	add	sp, #20
   232c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return NULL;
   232c8:	2700      	movs	r7, #0
   232ca:	e7f9      	b.n	232c0 <net_tcp_get_hdr+0x1c>
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   232cc:	68a8      	ldr	r0, [r5, #8]
   232ce:	f895 4033 	ldrb.w	r4, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   232d2:	f895 103b 	ldrb.w	r1, [r5, #59]	; 0x3b
	frag = net_frag_read(pkt->frags, net_pkt_ip_hdr_len(pkt) +
   232d6:	9600      	str	r6, [sp, #0]
   232d8:	2302      	movs	r3, #2
   232da:	f10d 020e 	add.w	r2, sp, #14
   232de:	4421      	add	r1, r4
   232e0:	f7f9 ff29 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   232e4:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->dst_port);
   232e8:	1cb3      	adds	r3, r6, #2
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->dst_port),
   232ea:	9300      	str	r3, [sp, #0]
   232ec:	2302      	movs	r3, #2
   232ee:	f10d 020e 	add.w	r2, sp, #14
   232f2:	f7f9 ff20 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->seq), hdr->seq);
   232f6:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   232fa:	1d33      	adds	r3, r6, #4
   232fc:	9300      	str	r3, [sp, #0]
   232fe:	2304      	movs	r3, #4
   23300:	f10d 020e 	add.w	r2, sp, #14
   23304:	f7f9 ff17 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->ack), hdr->ack);
   23308:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   2330c:	f106 0308 	add.w	r3, r6, #8
   23310:	9300      	str	r3, [sp, #0]
   23312:	2304      	movs	r3, #4
   23314:	f10d 020e 	add.w	r2, sp, #14
   23318:	f7f9 ff0d 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->offset);
   2331c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23320:	f106 030c 	add.w	r3, r6, #12
	return net_frag_read(frag, offset, pos, 1, value);
   23324:	9300      	str	r3, [sp, #0]
   23326:	2301      	movs	r3, #1
   23328:	f10d 020e 	add.w	r2, sp, #14
   2332c:	f7f9 ff03 	bl	1d136 <net_frag_read>
	frag = net_frag_read_u8(frag, pos, &pos, &hdr->flags);
   23330:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23334:	f106 030d 	add.w	r3, r6, #13
   23338:	9300      	str	r3, [sp, #0]
   2333a:	2301      	movs	r3, #1
   2333c:	f10d 020e 	add.w	r2, sp, #14
   23340:	f7f9 fef9 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd);
   23344:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23348:	f106 030e 	add.w	r3, r6, #14
   2334c:	9300      	str	r3, [sp, #0]
   2334e:	2302      	movs	r3, #2
   23350:	f10d 020e 	add.w	r2, sp, #14
   23354:	f7f9 feef 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23358:	f8bd 100e 	ldrh.w	r1, [sp, #14]
			     (u8_t *)&hdr->chksum);
   2335c:	f106 0310 	add.w	r3, r6, #16
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->chksum),
   23360:	9300      	str	r3, [sp, #0]
   23362:	2302      	movs	r3, #2
   23364:	f10d 020e 	add.w	r2, sp, #14
   23368:	f7f9 fee5 	bl	1d136 <net_frag_read>
	frag = net_frag_read(frag, pos, &pos, sizeof(hdr->urg), hdr->urg);
   2336c:	f8bd 100e 	ldrh.w	r1, [sp, #14]
   23370:	f106 0312 	add.w	r3, r6, #18
   23374:	9300      	str	r3, [sp, #0]
   23376:	2302      	movs	r3, #2
   23378:	f10d 020e 	add.w	r2, sp, #14
   2337c:	f7f9 fedb 	bl	1d136 <net_frag_read>
	if (!frag && pos == 0xffff) {
   23380:	b108      	cbz	r0, 23386 <net_tcp_get_hdr+0xe2>
	return hdr;
   23382:	4634      	mov	r4, r6
   23384:	e79d      	b.n	232c2 <net_tcp_get_hdr+0x1e>
	if (!frag && pos == 0xffff) {
   23386:	f8bd 200e 	ldrh.w	r2, [sp, #14]
   2338a:	f64f 73ff 	movw	r3, #65535	; 0xffff
   2338e:	429a      	cmp	r2, r3
   23390:	d001      	beq.n	23396 <net_tcp_get_hdr+0xf2>
	return hdr;
   23392:	4634      	mov	r4, r6
   23394:	e795      	b.n	232c2 <net_tcp_get_hdr+0x1e>
		return NULL;
   23396:	463c      	mov	r4, r7
   23398:	e793      	b.n	232c2 <net_tcp_get_hdr+0x1e>

0002339a <net_tcp_validate_seq>:
{
   2339a:	b570      	push	{r4, r5, r6, lr}
   2339c:	b086      	sub	sp, #24
   2339e:	4606      	mov	r6, r0
   233a0:	4608      	mov	r0, r1
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   233a2:	a901      	add	r1, sp, #4
   233a4:	f7ff ff7e 	bl	232a4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   233a8:	b1e8      	cbz	r0, 233e6 <net_tcp_validate_seq+0x4c>
   233aa:	4603      	mov	r3, r0
	return ((u16_t)src[0] << 8) | src[1];
   233ac:	7900      	ldrb	r0, [r0, #4]
   233ae:	795c      	ldrb	r4, [r3, #5]
   233b0:	ea44 2000 	orr.w	r0, r4, r0, lsl #8
   233b4:	799a      	ldrb	r2, [r3, #6]
   233b6:	79dc      	ldrb	r4, [r3, #7]
   233b8:	ea44 2402 	orr.w	r4, r4, r2, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   233bc:	ea44 4400 	orr.w	r4, r4, r0, lsl #16
	return (net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   233c0:	f8d6 509c 	ldr.w	r5, [r6, #156]	; 0x9c
   233c4:	1b63      	subs	r3, r4, r5
				tcp->send_ack) >= 0) &&
   233c6:	2b00      	cmp	r3, #0
   233c8:	db0b      	blt.n	233e2 <net_tcp_validate_seq+0x48>
					+ net_tcp_get_recv_wnd(tcp)) < 0);
   233ca:	4630      	mov	r0, r6
   233cc:	f7ff fcfc 	bl	22dc8 <net_tcp_get_recv_wnd>
		(net_tcp_seq_cmp(sys_get_be32(tcp_hdr->seq),
   233d0:	4428      	add	r0, r5
   233d2:	1a24      	subs	r4, r4, r0
				tcp->send_ack) >= 0) &&
   233d4:	2c00      	cmp	r4, #0
   233d6:	db02      	blt.n	233de <net_tcp_validate_seq+0x44>
   233d8:	2000      	movs	r0, #0
}
   233da:	b006      	add	sp, #24
   233dc:	bd70      	pop	{r4, r5, r6, pc}
				tcp->send_ack) >= 0) &&
   233de:	2001      	movs	r0, #1
   233e0:	e7fb      	b.n	233da <net_tcp_validate_seq+0x40>
   233e2:	2000      	movs	r0, #0
   233e4:	e7f9      	b.n	233da <net_tcp_validate_seq+0x40>
		return false;
   233e6:	2000      	movs	r0, #0
   233e8:	e7f7      	b.n	233da <net_tcp_validate_seq+0x40>

000233ea <net_tcp_set_hdr>:

struct net_tcp_hdr *net_tcp_set_hdr(struct net_pkt *pkt,
				    struct net_tcp_hdr *hdr)
{
   233ea:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   233ee:	b087      	sub	sp, #28
   233f0:	4605      	mov	r5, r0
   233f2:	460c      	mov	r4, r1
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   233f4:	2214      	movs	r2, #20
   233f6:	f7fa fbe3 	bl	1dbc0 <net_header_fits>
   233fa:	b128      	cbz	r0, 23408 <net_tcp_set_hdr+0x1e>
		return hdr;
   233fc:	4626      	mov	r6, r4
	struct net_buf *frag;
	u16_t pos;

	if (net_tcp_header_fits(pkt, hdr)) {
   233fe:	b12e      	cbz	r6, 2340c <net_tcp_set_hdr+0x22>
		NET_ASSERT(frag);
		return NULL;
	}

	return hdr;
}
   23400:	4620      	mov	r0, r4
   23402:	b007      	add	sp, #28
   23404:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	return NULL;
   23408:	2600      	movs	r6, #0
   2340a:	e7f8      	b.n	233fe <net_tcp_set_hdr+0x14>
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   2340c:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt),
   23410:	f895 203b 	ldrb.w	r2, [r5, #59]	; 0x3b
	frag = net_pkt_write(pkt, pkt->frags, net_pkt_ip_hdr_len(pkt) +
   23414:	f44f 77fa 	mov.w	r7, #500	; 0x1f4
   23418:	9702      	str	r7, [sp, #8]
   2341a:	9401      	str	r4, [sp, #4]
   2341c:	f04f 0802 	mov.w	r8, #2
   23420:	f8cd 8000 	str.w	r8, [sp]
   23424:	f10d 0316 	add.w	r3, sp, #22
   23428:	440a      	add	r2, r1
   2342a:	68a9      	ldr	r1, [r5, #8]
   2342c:	4628      	mov	r0, r5
   2342e:	f7f9 fef4 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   23432:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->dst_port, ALLOC_TIMEOUT);
   23436:	eb04 0308 	add.w	r3, r4, r8
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->dst_port),
   2343a:	9702      	str	r7, [sp, #8]
   2343c:	9301      	str	r3, [sp, #4]
   2343e:	f8cd 8000 	str.w	r8, [sp]
   23442:	f10d 0316 	add.w	r3, sp, #22
   23446:	4601      	mov	r1, r0
   23448:	4628      	mov	r0, r5
   2344a:	f7f9 fee6 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->seq), hdr->seq,
   2344e:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23452:	1d23      	adds	r3, r4, #4
   23454:	9702      	str	r7, [sp, #8]
   23456:	9301      	str	r3, [sp, #4]
   23458:	f04f 0904 	mov.w	r9, #4
   2345c:	f8cd 9000 	str.w	r9, [sp]
   23460:	f10d 0316 	add.w	r3, sp, #22
   23464:	4601      	mov	r1, r0
   23466:	4628      	mov	r0, r5
   23468:	f7f9 fed7 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->ack), hdr->ack,
   2346c:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23470:	f104 0308 	add.w	r3, r4, #8
   23474:	9702      	str	r7, [sp, #8]
   23476:	9301      	str	r3, [sp, #4]
   23478:	f8cd 9000 	str.w	r9, [sp]
   2347c:	f10d 0316 	add.w	r3, sp, #22
   23480:	4601      	mov	r1, r0
   23482:	4628      	mov	r0, r5
   23484:	f7f9 fec9 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->offset),
   23488:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   2348c:	f104 030c 	add.w	r3, r4, #12
   23490:	9702      	str	r7, [sp, #8]
   23492:	9301      	str	r3, [sp, #4]
   23494:	f04f 0901 	mov.w	r9, #1
   23498:	f8cd 9000 	str.w	r9, [sp]
   2349c:	f10d 0316 	add.w	r3, sp, #22
   234a0:	4601      	mov	r1, r0
   234a2:	4628      	mov	r0, r5
   234a4:	f7f9 feb9 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->flags),
   234a8:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   234ac:	f104 030d 	add.w	r3, r4, #13
   234b0:	9702      	str	r7, [sp, #8]
   234b2:	9301      	str	r3, [sp, #4]
   234b4:	f8cd 9000 	str.w	r9, [sp]
   234b8:	f10d 0316 	add.w	r3, sp, #22
   234bc:	4601      	mov	r1, r0
   234be:	4628      	mov	r0, r5
   234c0:	f7f9 feab 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->wnd), hdr->wnd,
   234c4:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   234c8:	f104 030e 	add.w	r3, r4, #14
   234cc:	9702      	str	r7, [sp, #8]
   234ce:	9301      	str	r3, [sp, #4]
   234d0:	f8cd 8000 	str.w	r8, [sp]
   234d4:	f10d 0316 	add.w	r3, sp, #22
   234d8:	4601      	mov	r1, r0
   234da:	4628      	mov	r0, r5
   234dc:	f7f9 fe9d 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   234e0:	f8bd 2016 	ldrh.w	r2, [sp, #22]
			     (u8_t *)&hdr->chksum, ALLOC_TIMEOUT);
   234e4:	f104 0310 	add.w	r3, r4, #16
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->chksum),
   234e8:	9702      	str	r7, [sp, #8]
   234ea:	9301      	str	r3, [sp, #4]
   234ec:	f8cd 8000 	str.w	r8, [sp]
   234f0:	f10d 0316 	add.w	r3, sp, #22
   234f4:	4601      	mov	r1, r0
   234f6:	4628      	mov	r0, r5
   234f8:	f7f9 fe8f 	bl	1d21a <net_pkt_write>
	frag = net_pkt_write(pkt, frag, pos, &pos, sizeof(hdr->urg), hdr->urg,
   234fc:	f8bd 2016 	ldrh.w	r2, [sp, #22]
   23500:	f104 0312 	add.w	r3, r4, #18
   23504:	9702      	str	r7, [sp, #8]
   23506:	9301      	str	r3, [sp, #4]
   23508:	f8cd 8000 	str.w	r8, [sp]
   2350c:	f10d 0316 	add.w	r3, sp, #22
   23510:	4601      	mov	r1, r0
   23512:	4628      	mov	r0, r5
   23514:	f7f9 fe81 	bl	1d21a <net_pkt_write>
	if (!frag) {
   23518:	2800      	cmp	r0, #0
   2351a:	f47f af71 	bne.w	23400 <net_tcp_set_hdr+0x16>
		return NULL;
   2351e:	4634      	mov	r4, r6
   23520:	e76e      	b.n	23400 <net_tcp_set_hdr+0x16>

00023522 <net_tcp_get_chksum>:

u16_t net_tcp_get_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   23522:	b570      	push	{r4, r5, r6, lr}
   23524:	b084      	sub	sp, #16
   23526:	4605      	mov	r5, r0
   23528:	460e      	mov	r6, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum;
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   2352a:	f7f9 ffa0 	bl	1d46e <net_pkt_tcp_data>
   2352e:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23530:	2214      	movs	r2, #20
   23532:	4601      	mov	r1, r0
   23534:	4628      	mov	r0, r5
   23536:	f7fa fb43 	bl	1dbc0 <net_header_fits>
   2353a:	b120      	cbz	r0, 23546 <net_tcp_get_chksum+0x24>
		return hdr;
   2353c:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   2353e:	b123      	cbz	r3, 2354a <net_tcp_get_chksum+0x28>
		return hdr->chksum;
   23540:	8a20      	ldrh	r0, [r4, #16]
			     1 + 1 + 2 /* offset + flags + wnd */,
			     &pos, sizeof(chksum), (u8_t *)&chksum);
	NET_ASSERT(frag);

	return chksum;
}
   23542:	b004      	add	sp, #16
   23544:	bd70      	pop	{r4, r5, r6, pc}
	return NULL;
   23546:	2300      	movs	r3, #0
   23548:	e7f9      	b.n	2353e <net_tcp_get_chksum+0x1c>
			     net_pkt_ip_hdr_len(pkt) +
   2354a:	f895 1033 	ldrb.w	r1, [r5, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   2354e:	f895 303b 	ldrb.w	r3, [r5, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   23552:	4419      	add	r1, r3
	frag = net_frag_read(frag,
   23554:	3110      	adds	r1, #16
   23556:	f10d 030e 	add.w	r3, sp, #14
   2355a:	9300      	str	r3, [sp, #0]
   2355c:	2302      	movs	r3, #2
   2355e:	aa03      	add	r2, sp, #12
   23560:	b289      	uxth	r1, r1
   23562:	4630      	mov	r0, r6
   23564:	f7f9 fde7 	bl	1d136 <net_frag_read>
	return chksum;
   23568:	f8bd 000e 	ldrh.w	r0, [sp, #14]
   2356c:	e7e9      	b.n	23542 <net_tcp_get_chksum+0x20>

0002356e <net_tcp_set_chksum>:

struct net_buf *net_tcp_set_chksum(struct net_pkt *pkt, struct net_buf *frag)
{
   2356e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   23572:	b086      	sub	sp, #24
   23574:	4606      	mov	r6, r0
   23576:	460d      	mov	r5, r1
	struct net_tcp_hdr *hdr;
	u16_t chksum = 0;
   23578:	2300      	movs	r3, #0
   2357a:	f8ad 3016 	strh.w	r3, [sp, #22]
	u16_t pos;

	hdr = net_pkt_tcp_data(pkt);
   2357e:	f7f9 ff76 	bl	1d46e <net_pkt_tcp_data>
   23582:	4604      	mov	r4, r0
	if (net_header_fits(pkt, (u8_t *)hdr, sizeof(*hdr))) {
   23584:	2214      	movs	r2, #20
   23586:	4601      	mov	r1, r0
   23588:	4630      	mov	r0, r6
   2358a:	f7fa fb19 	bl	1dbc0 <net_header_fits>
   2358e:	b170      	cbz	r0, 235ae <net_tcp_set_chksum+0x40>
		return hdr;
   23590:	4623      	mov	r3, r4
	if (net_tcp_header_fits(pkt, hdr)) {
   23592:	b173      	cbz	r3, 235b2 <net_tcp_set_chksum+0x44>
		hdr->chksum = 0;
   23594:	2300      	movs	r3, #0
   23596:	7423      	strb	r3, [r4, #16]
   23598:	7463      	strb	r3, [r4, #17]
	return net_calc_chksum(pkt, IPPROTO_TCP);
   2359a:	2106      	movs	r1, #6
   2359c:	4630      	mov	r0, r6
   2359e:	f7fa fab6 	bl	1db0e <net_calc_chksum>
		hdr->chksum = ~net_calc_chksum_tcp(pkt);
   235a2:	43c0      	mvns	r0, r0
   235a4:	8220      	strh	r0, [r4, #16]

		return frag;
   235a6:	4628      	mov	r0, r5
			     (u8_t *)&chksum, ALLOC_TIMEOUT);

	NET_ASSERT(frag);

	return frag;
}
   235a8:	b006      	add	sp, #24
   235aa:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	return NULL;
   235ae:	2300      	movs	r3, #0
   235b0:	e7ef      	b.n	23592 <net_tcp_set_chksum+0x24>
			     net_pkt_ip_hdr_len(pkt) +
   235b2:	f896 2033 	ldrb.w	r2, [r6, #51]	; 0x33
			     net_pkt_ipv6_ext_len(pkt) +
   235b6:	f896 303b 	ldrb.w	r3, [r6, #59]	; 0x3b
			     net_pkt_ip_hdr_len(pkt) +
   235ba:	441a      	add	r2, r3
	frag = net_pkt_write(pkt, frag,
   235bc:	3210      	adds	r2, #16
   235be:	f44f 78fa 	mov.w	r8, #500	; 0x1f4
   235c2:	f8cd 8008 	str.w	r8, [sp, #8]
   235c6:	f10d 0416 	add.w	r4, sp, #22
   235ca:	9401      	str	r4, [sp, #4]
   235cc:	2702      	movs	r7, #2
   235ce:	9700      	str	r7, [sp, #0]
   235d0:	ab05      	add	r3, sp, #20
   235d2:	b292      	uxth	r2, r2
   235d4:	4629      	mov	r1, r5
   235d6:	4630      	mov	r0, r6
   235d8:	f7f9 fe1f 	bl	1d21a <net_pkt_write>
   235dc:	4605      	mov	r5, r0
	return net_calc_chksum(pkt, IPPROTO_TCP);
   235de:	2106      	movs	r1, #6
   235e0:	4630      	mov	r0, r6
   235e2:	f7fa fa94 	bl	1db0e <net_calc_chksum>
	chksum = ~net_calc_chksum_tcp(pkt);
   235e6:	43c0      	mvns	r0, r0
   235e8:	f8ad 0016 	strh.w	r0, [sp, #22]
	frag = net_pkt_write(pkt, frag, pos - 2, &pos, sizeof(chksum),
   235ec:	f8bd 2014 	ldrh.w	r2, [sp, #20]
   235f0:	3a02      	subs	r2, #2
   235f2:	f8cd 8008 	str.w	r8, [sp, #8]
   235f6:	9401      	str	r4, [sp, #4]
   235f8:	9700      	str	r7, [sp, #0]
   235fa:	ab05      	add	r3, sp, #20
   235fc:	b292      	uxth	r2, r2
   235fe:	4629      	mov	r1, r5
   23600:	4630      	mov	r0, r6
   23602:	f7f9 fe0a 	bl	1d21a <net_pkt_write>
	return frag;
   23606:	e7cf      	b.n	235a8 <net_tcp_set_chksum+0x3a>

00023608 <net_tcp_send_pkt>:
{
   23608:	b570      	push	{r4, r5, r6, lr}
   2360a:	b086      	sub	sp, #24
   2360c:	4605      	mov	r5, r0
	return pkt->context;
   2360e:	68c6      	ldr	r6, [r0, #12]
	tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   23610:	a901      	add	r1, sp, #4
   23612:	f7ff fe47 	bl	232a4 <net_tcp_get_hdr>
	if (!tcp_hdr) {
   23616:	2800      	cmp	r0, #0
   23618:	f000 8086 	beq.w	23728 <net_tcp_send_pkt+0x120>
   2361c:	4604      	mov	r4, r0
	return ((u16_t)src[0] << 8) | src[1];
   2361e:	7a02      	ldrb	r2, [r0, #8]
   23620:	7a43      	ldrb	r3, [r0, #9]
   23622:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   23626:	7a81      	ldrb	r1, [r0, #10]
   23628:	7ac3      	ldrb	r3, [r0, #11]
   2362a:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2362e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
	if (sys_get_be32(tcp_hdr->ack) != ctx->tcp->send_ack) {
   23632:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23634:	f8d2 209c 	ldr.w	r2, [r2, #156]	; 0x9c
   23638:	429a      	cmp	r2, r3
   2363a:	d039      	beq.n	236b0 <net_tcp_send_pkt+0xa8>
	sys_put_be16(val >> 16, dst);
   2363c:	0c13      	lsrs	r3, r2, #16
	dst[0] = val >> 8;
   2363e:	0a19      	lsrs	r1, r3, #8
   23640:	7201      	strb	r1, [r0, #8]
	dst[1] = val;
   23642:	7243      	strb	r3, [r0, #9]
	dst[0] = val >> 8;
   23644:	f3c2 2307 	ubfx	r3, r2, #8, #8
   23648:	7283      	strb	r3, [r0, #10]
	dst[1] = val;
   2364a:	72c2      	strb	r2, [r0, #11]
		calc_chksum = true;
   2364c:	2201      	movs	r2, #1
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2364e:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23650:	f8d3 10a0 	ldr.w	r1, [r3, #160]	; 0xa0
   23654:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
   23658:	4299      	cmp	r1, r3
   2365a:	d007      	beq.n	2366c <net_tcp_send_pkt+0x64>
		(tcp_hdr->flags & NET_TCP_ACK) == 0) {
   2365c:	7b63      	ldrb	r3, [r4, #13]
	if (ctx->tcp->sent_ack != ctx->tcp->send_ack &&
   2365e:	f013 0f10 	tst.w	r3, #16
   23662:	d103      	bne.n	2366c <net_tcp_send_pkt+0x64>
		tcp_hdr->flags |= NET_TCP_ACK;
   23664:	f043 0310 	orr.w	r3, r3, #16
   23668:	7363      	strb	r3, [r4, #13]
		calc_chksum = true;
   2366a:	2201      	movs	r2, #1
	if (calc_chksum) {
   2366c:	bb12      	cbnz	r2, 236b4 <net_tcp_send_pkt+0xac>
	if (tcp_hdr->flags & NET_TCP_FIN) {
   2366e:	7b63      	ldrb	r3, [r4, #13]
   23670:	f013 0f01 	tst.w	r3, #1
   23674:	d006      	beq.n	23684 <net_tcp_send_pkt+0x7c>
		ctx->tcp->fin_sent = 1;
   23676:	6e32      	ldr	r2, [r6, #96]	; 0x60
   23678:	f892 30a6 	ldrb.w	r3, [r2, #166]	; 0xa6
   2367c:	f043 0302 	orr.w	r3, r3, #2
   23680:	f882 30a6 	strb.w	r3, [r2, #166]	; 0xa6
	ctx->tcp->sent_ack = ctx->tcp->send_ack;
   23684:	6e33      	ldr	r3, [r6, #96]	; 0x60
   23686:	f8d3 209c 	ldr.w	r2, [r3, #156]	; 0x9c
   2368a:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
	net_tcp_set_hdr(pkt, tcp_hdr);
   2368e:	4621      	mov	r1, r4
   23690:	4628      	mov	r0, r5
   23692:	f7ff feaa 	bl	233ea <net_tcp_set_hdr>
	return pkt->family;
   23696:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   2369a:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (is_6lo_technology(pkt)) {
   2369e:	2b0a      	cmp	r3, #10
   236a0:	d00d      	beq.n	236be <net_tcp_send_pkt+0xb6>
	return net_send_data(pkt);
   236a2:	4628      	mov	r0, r5
   236a4:	f7f6 ffc8 	bl	1a638 <net_send_data>
   236a8:	4604      	mov	r4, r0
}
   236aa:	4620      	mov	r0, r4
   236ac:	b006      	add	sp, #24
   236ae:	bd70      	pop	{r4, r5, r6, pc}
	bool calc_chksum = false;
   236b0:	2200      	movs	r2, #0
   236b2:	e7cc      	b.n	2364e <net_tcp_send_pkt+0x46>
		net_tcp_set_chksum(pkt, pkt->frags);
   236b4:	68a9      	ldr	r1, [r5, #8]
   236b6:	4628      	mov	r0, r5
   236b8:	f7ff ff59 	bl	2356e <net_tcp_set_chksum>
   236bc:	e7d7      	b.n	2366e <net_tcp_send_pkt+0x66>
	if (is_6lo_technology(pkt)) {
   236be:	f895 302d 	ldrb.w	r3, [r5, #45]	; 0x2d
   236c2:	2b02      	cmp	r3, #2
   236c4:	d1ed      	bne.n	236a2 <net_tcp_send_pkt+0x9a>
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   236c6:	6e33      	ldr	r3, [r6, #96]	; 0x60
	return list->head;
   236c8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
   236cc:	b10b      	cbz	r3, 236d2 <net_tcp_send_pkt+0xca>
   236ce:	3b34      	subs	r3, #52	; 0x34
   236d0:	e006      	b.n	236e0 <net_tcp_send_pkt+0xd8>
   236d2:	2300      	movs	r3, #0
   236d4:	e004      	b.n	236e0 <net_tcp_send_pkt+0xd8>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236d6:	4611      	mov	r1, r2
   236d8:	e009      	b.n	236ee <net_tcp_send_pkt+0xe6>
	return node->next;
   236da:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   236dc:	f1a2 0334 	sub.w	r3, r2, #52	; 0x34
   236e0:	b163      	cbz	r3, 236fc <net_tcp_send_pkt+0xf4>
			if (check_pkt == pkt) {
   236e2:	42ab      	cmp	r3, r5
   236e4:	d009      	beq.n	236fa <net_tcp_send_pkt+0xf2>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236e6:	f113 0234 	adds.w	r2, r3, #52	; 0x34
   236ea:	d0f4      	beq.n	236d6 <net_tcp_send_pkt+0xce>
	return node->next;
   236ec:	6b59      	ldr	r1, [r3, #52]	; 0x34
		SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list,
   236ee:	b111      	cbz	r1, 236f6 <net_tcp_send_pkt+0xee>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   236f0:	2a00      	cmp	r2, #0
   236f2:	d1f2      	bne.n	236da <net_tcp_send_pkt+0xd2>
   236f4:	e7f2      	b.n	236dc <net_tcp_send_pkt+0xd4>
   236f6:	2300      	movs	r3, #0
   236f8:	e7f2      	b.n	236e0 <net_tcp_send_pkt+0xd8>
				pkt_in_slist = true;
   236fa:	2301      	movs	r3, #1
		if (pkt_in_slist) {
   236fc:	2b00      	cmp	r3, #0
   236fe:	d0d0      	beq.n	236a2 <net_tcp_send_pkt+0x9a>
			new_pkt = net_pkt_clone(pkt, ALLOC_TIMEOUT);
   23700:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   23704:	4628      	mov	r0, r5
   23706:	f7f9 fec7 	bl	1d498 <net_pkt_clone>
			if (!new_pkt) {
   2370a:	4605      	mov	r5, r0
   2370c:	b178      	cbz	r0, 2372e <net_tcp_send_pkt+0x126>
			ret = net_send_data(new_pkt);
   2370e:	f7f6 ff93 	bl	1a638 <net_send_data>
			if (ret < 0) {
   23712:	1e04      	subs	r4, r0, #0
   23714:	db04      	blt.n	23720 <net_tcp_send_pkt+0x118>
	net_stats.tcp.rexmit++;
   23716:	4a07      	ldr	r2, [pc, #28]	; (23734 <net_tcp_send_pkt+0x12c>)
   23718:	6f13      	ldr	r3, [r2, #112]	; 0x70
   2371a:	3301      	adds	r3, #1
   2371c:	6713      	str	r3, [r2, #112]	; 0x70
   2371e:	e7c4      	b.n	236aa <net_tcp_send_pkt+0xa2>
				net_pkt_unref(new_pkt);
   23720:	4628      	mov	r0, r5
   23722:	f7f9 fb8a 	bl	1ce3a <net_pkt_unref>
   23726:	e7c0      	b.n	236aa <net_tcp_send_pkt+0xa2>
		return -EMSGSIZE;
   23728:	f06f 0479 	mvn.w	r4, #121	; 0x79
   2372c:	e7bd      	b.n	236aa <net_tcp_send_pkt+0xa2>
				return -ENOMEM;
   2372e:	f06f 040b 	mvn.w	r4, #11
   23732:	e7ba      	b.n	236aa <net_tcp_send_pkt+0xa2>
   23734:	20002ab8 	.word	0x20002ab8

00023738 <tcp_retry_expired>:
	return (!list->head);
   23738:	6b43      	ldr	r3, [r0, #52]	; 0x34
	if (!sys_slist_is_empty(&tcp->sent_list)) {
   2373a:	2b00      	cmp	r3, #0
   2373c:	d05c      	beq.n	237f8 <tcp_retry_expired+0xc0>
{
   2373e:	b510      	push	{r4, lr}
   23740:	f1a0 0158 	sub.w	r1, r0, #88	; 0x58
   23744:	4604      	mov	r4, r0
		tcp->retry_timeout_shift++;
   23746:	f890 204c 	ldrb.w	r2, [r0, #76]	; 0x4c
   2374a:	f002 031f 	and.w	r3, r2, #31
   2374e:	3301      	adds	r3, #1
   23750:	f003 031f 	and.w	r3, r3, #31
   23754:	f363 0204 	bfi	r2, r3, #0, #5
   23758:	f880 204c 	strb.w	r2, [r0, #76]	; 0x4c
		if (tcp->retry_timeout_shift > CONFIG_NET_TCP_RETRY_COUNT) {
   2375c:	2b09      	cmp	r3, #9
   2375e:	dc2f      	bgt.n	237c0 <tcp_retry_expired+0x88>
   23760:	2200      	movs	r2, #0
   23762:	21c8      	movs	r1, #200	; 0xc8
   23764:	4099      	lsls	r1, r3
   23766:	f005 fd4d 	bl	29204 <_impl_k_timer_start>
	return list->head;
   2376a:	6b63      	ldr	r3, [r4, #52]	; 0x34
		pkt = CONTAINER_OF(sys_slist_peek_head(&tcp->sent_list),
   2376c:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
	return pkt->sent_or_eof;
   23770:	791a      	ldrb	r2, [r3, #4]
		if (net_pkt_sent(pkt)) {
   23772:	f012 0f01 	tst.w	r2, #1
   23776:	d00d      	beq.n	23794 <tcp_retry_expired+0x5c>
	return pkt->family;
   23778:	f3c2 02c3 	ubfx	r2, r2, #3, #4
			do_ref_if_needed(tcp, pkt);
   2377c:	2a0a      	cmp	r2, #10
   2377e:	d023      	beq.n	237c8 <tcp_retry_expired+0x90>
   23780:	4620      	mov	r0, r4
   23782:	f7f9 fb4b 	bl	1ce1c <net_pkt_ref>
   23786:	4604      	mov	r4, r0
	pkt->sent_or_eof = sent;
   23788:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2378c:	f36f 0300 	bfc	r3, #0, #1
   23790:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	pkt->pkt_queued = send;
   23794:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23798:	f043 0302 	orr.w	r3, r3, #2
   2379c:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   237a0:	4620      	mov	r0, r4
   237a2:	f7ff ff31 	bl	23608 <net_tcp_send_pkt>
   237a6:	2800      	cmp	r0, #0
   237a8:	db13      	blt.n	237d2 <tcp_retry_expired+0x9a>
	return pkt->family;
   237aa:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   237ae:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   237b2:	2b0a      	cmp	r3, #10
   237b4:	d01b      	beq.n	237ee <tcp_retry_expired+0xb6>
   237b6:	4a11      	ldr	r2, [pc, #68]	; (237fc <tcp_retry_expired+0xc4>)
   237b8:	6f13      	ldr	r3, [r2, #112]	; 0x70
   237ba:	3301      	adds	r3, #1
   237bc:	6713      	str	r3, [r2, #112]	; 0x70
   237be:	bd10      	pop	{r4, pc}
			abort_connection(tcp);
   237c0:	4608      	mov	r0, r1
   237c2:	f7ff f99a 	bl	22afa <abort_connection>
			return;
   237c6:	bd10      	pop	{r4, pc}
			do_ref_if_needed(tcp, pkt);
   237c8:	f813 3c07 	ldrb.w	r3, [r3, #-7]
   237cc:	2b02      	cmp	r3, #2
   237ce:	d1d7      	bne.n	23780 <tcp_retry_expired+0x48>
   237d0:	e7da      	b.n	23788 <tcp_retry_expired+0x50>
   237d2:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   237d6:	f3c3 03c3 	ubfx	r3, r3, #3, #4
		if (net_tcp_send_pkt(pkt) < 0 && !is_6lo_technology(pkt)) {
   237da:	2b0a      	cmp	r3, #10
   237dc:	d103      	bne.n	237e6 <tcp_retry_expired+0xae>
   237de:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   237e2:	2b02      	cmp	r3, #2
   237e4:	d0e1      	beq.n	237aa <tcp_retry_expired+0x72>
			net_pkt_unref(pkt);
   237e6:	4620      	mov	r0, r4
   237e8:	f7f9 fb27 	bl	1ce3a <net_pkt_unref>
   237ec:	bd10      	pop	{r4, pc}
			    !is_6lo_technology(pkt)) {
   237ee:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
			if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   237f2:	2b02      	cmp	r3, #2
   237f4:	d1df      	bne.n	237b6 <tcp_retry_expired+0x7e>
   237f6:	e7e2      	b.n	237be <tcp_retry_expired+0x86>
   237f8:	4770      	bx	lr
   237fa:	bf00      	nop
   237fc:	20002ab8 	.word	0x20002ab8

00023800 <net_tcp_send_data>:
{
   23800:	b510      	push	{r4, lr}
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   23802:	6e03      	ldr	r3, [r0, #96]	; 0x60
   23804:	f8d3 408c 	ldr.w	r4, [r3, #140]	; 0x8c
   23808:	b10c      	cbz	r4, 2380e <net_tcp_send_data+0xe>
   2380a:	3c34      	subs	r4, #52	; 0x34
   2380c:	e013      	b.n	23836 <net_tcp_send_data+0x36>
   2380e:	2400      	movs	r4, #0
   23810:	e011      	b.n	23836 <net_tcp_send_data+0x36>
				net_pkt_unref(pkt);
   23812:	4620      	mov	r0, r4
   23814:	f7f9 fb11 	bl	1ce3a <net_pkt_unref>
	pkt->pkt_queued = send;
   23818:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   2381c:	f043 0302 	orr.w	r3, r3, #2
   23820:	f884 3038 	strb.w	r3, [r4, #56]	; 0x38
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23824:	f114 0334 	adds.w	r3, r4, #52	; 0x34
   23828:	d01e      	beq.n	23868 <net_tcp_send_data+0x68>
	return node->next;
   2382a:	6b62      	ldr	r2, [r4, #52]	; 0x34
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2382c:	b1f2      	cbz	r2, 2386c <net_tcp_send_data+0x6c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2382e:	b103      	cbz	r3, 23832 <net_tcp_send_data+0x32>
	return node->next;
   23830:	6b63      	ldr	r3, [r4, #52]	; 0x34
   23832:	f1a3 0434 	sub.w	r4, r3, #52	; 0x34
   23836:	b1dc      	cbz	r4, 23870 <net_tcp_send_data+0x70>
	return pkt->pkt_queued;
   23838:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
		if (net_pkt_queued(pkt)) {
   2383c:	f013 0f02 	tst.w	r3, #2
   23840:	d1f0      	bne.n	23824 <net_tcp_send_data+0x24>
		if (!net_pkt_sent(pkt)) {
   23842:	f013 0f01 	tst.w	r3, #1
   23846:	d1ed      	bne.n	23824 <net_tcp_send_data+0x24>
			ret = net_tcp_send_pkt(pkt);
   23848:	4620      	mov	r0, r4
   2384a:	f7ff fedd 	bl	23608 <net_tcp_send_pkt>
			if (ret < 0 && !is_6lo_technology(pkt)) {
   2384e:	2800      	cmp	r0, #0
   23850:	dae2      	bge.n	23818 <net_tcp_send_data+0x18>
	return pkt->family;
   23852:	f894 3038 	ldrb.w	r3, [r4, #56]	; 0x38
   23856:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2385a:	2b0a      	cmp	r3, #10
   2385c:	d1d9      	bne.n	23812 <net_tcp_send_data+0x12>
   2385e:	f894 302d 	ldrb.w	r3, [r4, #45]	; 0x2d
   23862:	2b02      	cmp	r3, #2
   23864:	d1d5      	bne.n	23812 <net_tcp_send_data+0x12>
   23866:	e7d7      	b.n	23818 <net_tcp_send_data+0x18>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23868:	461a      	mov	r2, r3
   2386a:	e7df      	b.n	2382c <net_tcp_send_data+0x2c>
	SYS_SLIST_FOR_EACH_CONTAINER(&context->tcp->sent_list, pkt, sent_list) {
   2386c:	2400      	movs	r4, #0
   2386e:	e7e2      	b.n	23836 <net_tcp_send_data+0x36>
}
   23870:	2000      	movs	r0, #0
   23872:	bd10      	pop	{r4, pc}

00023874 <net_tcp_ack_received>:
{
   23874:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23878:	b087      	sub	sp, #28
   2387a:	4681      	mov	r9, r0
   2387c:	4688      	mov	r8, r1
	struct net_tcp *tcp = ctx->tcp;
   2387e:	6e05      	ldr	r5, [r0, #96]	; 0x60
	return (!list->head);
   23880:	f8d5 308c 	ldr.w	r3, [r5, #140]	; 0x8c
	if (IS_ENABLED(CONFIG_NET_STATISTICS_TCP) &&
   23884:	b10b      	cbz	r3, 2388a <net_tcp_ack_received+0x16>
		valid_ack = true;
   23886:	2700      	movs	r7, #0
   23888:	e033      	b.n	238f2 <net_tcp_ack_received+0x7e>
	net_stats.tcp.ackerr++;
   2388a:	4a51      	ldr	r2, [pc, #324]	; (239d0 <net_tcp_ack_received+0x15c>)
   2388c:	6e53      	ldr	r3, [r2, #100]	; 0x64
   2388e:	3301      	adds	r3, #1
   23890:	6653      	str	r3, [r2, #100]	; 0x64
   23892:	e7f8      	b.n	23886 <net_tcp_ack_received+0x12>
		list->head = node->next;
   23894:	6823      	ldr	r3, [r4, #0]
   23896:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   2389a:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   2389e:	42a2      	cmp	r2, r4
   238a0:	d005      	beq.n	238ae <net_tcp_ack_received+0x3a>
	node->next = NULL;
   238a2:	2300      	movs	r3, #0
   238a4:	6023      	str	r3, [r4, #0]
			net_pkt_unref(pkt);
   238a6:	4630      	mov	r0, r6
   238a8:	f7f9 fac7 	bl	1ce3a <net_pkt_unref>
   238ac:	e021      	b.n	238f2 <net_tcp_ack_received+0x7e>
			list->tail = list->head;
   238ae:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   238b2:	e7f6      	b.n	238a2 <net_tcp_ack_received+0x2e>
   238b4:	4a46      	ldr	r2, [pc, #280]	; (239d0 <net_tcp_ack_received+0x15c>)
   238b6:	6e53      	ldr	r3, [r2, #100]	; 0x64
   238b8:	3301      	adds	r3, #1
   238ba:	6653      	str	r3, [r2, #100]	; 0x64
	if (valid_ack && net_tcp_get_state(tcp) == NET_TCP_ESTABLISHED) {
   238bc:	b12f      	cbz	r7, 238ca <net_tcp_ack_received+0x56>
	return (enum net_tcp_state)tcp->state;
   238be:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   238c2:	f3c3 3343 	ubfx	r3, r3, #13, #4
   238c6:	2b04      	cmp	r3, #4
   238c8:	d046      	beq.n	23958 <net_tcp_ack_received+0xe4>
}
   238ca:	b007      	add	sp, #28
   238cc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
				net_tcp_change_state(tcp, NET_TCP_FIN_WAIT_2);
   238d0:	2108      	movs	r1, #8
   238d2:	4628      	mov	r0, r5
   238d4:	f7ff faf7 	bl	22ec6 <net_tcp_change_state>
		list->head = node->next;
   238d8:	6823      	ldr	r3, [r4, #0]
   238da:	f8c5 308c 	str.w	r3, [r5, #140]	; 0x8c
		if (list->tail == node) {
   238de:	f8d5 2090 	ldr.w	r2, [r5, #144]	; 0x90
   238e2:	42a2      	cmp	r2, r4
   238e4:	d035      	beq.n	23952 <net_tcp_ack_received+0xde>
	node->next = NULL;
   238e6:	2300      	movs	r3, #0
   238e8:	6023      	str	r3, [r4, #0]
		net_pkt_unref(pkt);
   238ea:	4630      	mov	r0, r6
   238ec:	f7f9 faa5 	bl	1ce3a <net_pkt_unref>
		valid_ack = true;
   238f0:	2701      	movs	r7, #1
	return (!list->head);
   238f2:	f8d5 408c 	ldr.w	r4, [r5, #140]	; 0x8c
	while (!sys_slist_is_empty(list)) {
   238f6:	2c00      	cmp	r4, #0
   238f8:	d0e0      	beq.n	238bc <net_tcp_ack_received+0x48>
		pkt = CONTAINER_OF(head, struct net_pkt, sent_list);
   238fa:	f1a4 0634 	sub.w	r6, r4, #52	; 0x34
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   238fe:	a901      	add	r1, sp, #4
   23900:	4630      	mov	r0, r6
   23902:	f7ff fccf 	bl	232a4 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   23906:	4602      	mov	r2, r0
   23908:	2800      	cmp	r0, #0
   2390a:	d0c3      	beq.n	23894 <net_tcp_ack_received+0x20>
	return ((u16_t)src[0] << 8) | src[1];
   2390c:	7903      	ldrb	r3, [r0, #4]
   2390e:	7941      	ldrb	r1, [r0, #5]
   23910:	ea41 2103 	orr.w	r1, r1, r3, lsl #8
   23914:	7980      	ldrb	r0, [r0, #6]
   23916:	79d3      	ldrb	r3, [r2, #7]
   23918:	ea43 2300 	orr.w	r3, r3, r0, lsl #8
	return ((u32_t)sys_get_be16(&src[0]) << 16) | sys_get_be16(&src[2]);
   2391c:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
	return pkt->appdatalen;
   23920:	f834 3c04 	ldrh.w	r3, [r4, #-4]
		seq = sys_get_be32(tcp_hdr->seq) + net_pkt_appdatalen(pkt) - 1;
   23924:	440b      	add	r3, r1
   23926:	3b01      	subs	r3, #1
   23928:	eba8 0303 	sub.w	r3, r8, r3
		if (!net_tcp_seq_greater(ack, seq)) {
   2392c:	2b00      	cmp	r3, #0
   2392e:	ddc1      	ble.n	238b4 <net_tcp_ack_received+0x40>
		if (tcp_hdr->flags & NET_TCP_FIN) {
   23930:	7b53      	ldrb	r3, [r2, #13]
   23932:	f013 0f01 	tst.w	r3, #1
   23936:	d0cf      	beq.n	238d8 <net_tcp_ack_received+0x64>
   23938:	f8d5 30a4 	ldr.w	r3, [r5, #164]	; 0xa4
   2393c:	f3c3 3343 	ubfx	r3, r3, #13, #4
			if (s == NET_TCP_FIN_WAIT_1) {
   23940:	2b07      	cmp	r3, #7
   23942:	d0c5      	beq.n	238d0 <net_tcp_ack_received+0x5c>
			} else if (s == NET_TCP_CLOSING) {
   23944:	2b0a      	cmp	r3, #10
   23946:	d1c7      	bne.n	238d8 <net_tcp_ack_received+0x64>
				net_tcp_change_state(tcp, NET_TCP_TIME_WAIT);
   23948:	2109      	movs	r1, #9
   2394a:	4628      	mov	r0, r5
   2394c:	f7ff fabb 	bl	22ec6 <net_tcp_change_state>
   23950:	e7c2      	b.n	238d8 <net_tcp_ack_received+0x64>
			list->tail = list->head;
   23952:	f8c5 3090 	str.w	r3, [r5, #144]	; 0x90
   23956:	e7c6      	b.n	238e6 <net_tcp_ack_received+0x72>
		restart_timer(ctx->tcp);
   23958:	f8d9 0060 	ldr.w	r0, [r9, #96]	; 0x60
   2395c:	f7ff f8db 	bl	22b16 <restart_timer>
		if (ctx->tcp->flags & NET_TCP_RETRYING) {
   23960:	f8d9 3060 	ldr.w	r3, [r9, #96]	; 0x60
   23964:	f8b3 20a4 	ldrh.w	r2, [r3, #164]	; 0xa4
   23968:	f412 7f00 	tst.w	r2, #512	; 0x200
   2396c:	d0ad      	beq.n	238ca <net_tcp_ack_received+0x56>
	return list->head;
   2396e:	f8d3 008c 	ldr.w	r0, [r3, #140]	; 0x8c
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   23972:	b108      	cbz	r0, 23978 <net_tcp_ack_received+0x104>
   23974:	3834      	subs	r0, #52	; 0x34
   23976:	e013      	b.n	239a0 <net_tcp_ack_received+0x12c>
   23978:	2000      	movs	r0, #0
   2397a:	e011      	b.n	239a0 <net_tcp_ack_received+0x12c>
					do_ref_if_needed(ctx->tcp, pkt);
   2397c:	f7f9 fa4e 	bl	1ce1c <net_pkt_ref>
	pkt->sent_or_eof = sent;
   23980:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   23984:	f36f 0300 	bfc	r3, #0, #1
   23988:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   2398c:	b140      	cbz	r0, 239a0 <net_tcp_ack_received+0x12c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   2398e:	f110 0334 	adds.w	r3, r0, #52	; 0x34
   23992:	d014      	beq.n	239be <net_tcp_ack_received+0x14a>
	return node->next;
   23994:	6b42      	ldr	r2, [r0, #52]	; 0x34
   23996:	b1a2      	cbz	r2, 239c2 <net_tcp_ack_received+0x14e>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   23998:	b103      	cbz	r3, 2399c <net_tcp_ack_received+0x128>
	return node->next;
   2399a:	6b43      	ldr	r3, [r0, #52]	; 0x34
   2399c:	f1a3 0034 	sub.w	r0, r3, #52	; 0x34
   239a0:	b188      	cbz	r0, 239c6 <net_tcp_ack_received+0x152>
	return pkt->sent_or_eof;
   239a2:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
				if (net_pkt_sent(pkt)) {
   239a6:	f013 0f01 	tst.w	r3, #1
   239aa:	d0ef      	beq.n	2398c <net_tcp_ack_received+0x118>
	return pkt->family;
   239ac:	f3c3 03c3 	ubfx	r3, r3, #3, #4
					do_ref_if_needed(ctx->tcp, pkt);
   239b0:	2b0a      	cmp	r3, #10
   239b2:	d1e3      	bne.n	2397c <net_tcp_ack_received+0x108>
   239b4:	f890 302d 	ldrb.w	r3, [r0, #45]	; 0x2d
   239b8:	2b02      	cmp	r3, #2
   239ba:	d1df      	bne.n	2397c <net_tcp_ack_received+0x108>
   239bc:	e7e0      	b.n	23980 <net_tcp_ack_received+0x10c>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   239be:	461a      	mov	r2, r3
   239c0:	e7e9      	b.n	23996 <net_tcp_ack_received+0x122>
			SYS_SLIST_FOR_EACH_CONTAINER(&ctx->tcp->sent_list, pkt,
   239c2:	2000      	movs	r0, #0
   239c4:	e7ec      	b.n	239a0 <net_tcp_ack_received+0x12c>
			net_tcp_send_data(ctx);
   239c6:	4648      	mov	r0, r9
   239c8:	f7ff ff1a 	bl	23800 <net_tcp_send_data>
}
   239cc:	e77d      	b.n	238ca <net_tcp_ack_received+0x56>
   239ce:	bf00      	nop
   239d0:	20002ab8 	.word	0x20002ab8

000239d4 <iface2str>:
	if (iface->l2 == &NET_L2_GET_NAME(BLUETOOTH)) {
   239d4:	6842      	ldr	r2, [r0, #4]
   239d6:	4b08      	ldr	r3, [pc, #32]	; (239f8 <iface2str+0x24>)
   239d8:	429a      	cmp	r2, r3
   239da:	d004      	beq.n	239e6 <iface2str+0x12>
	if (extra) {
   239dc:	b151      	cbz	r1, 239f4 <iface2str+0x20>
		*extra = "==============";
   239de:	4b07      	ldr	r3, [pc, #28]	; (239fc <iface2str+0x28>)
   239e0:	600b      	str	r3, [r1, #0]
	return "<unknown type>";
   239e2:	4807      	ldr	r0, [pc, #28]	; (23a00 <iface2str+0x2c>)
   239e4:	4770      	bx	lr
		if (extra) {
   239e6:	b119      	cbz	r1, 239f0 <iface2str+0x1c>
			*extra = "=========";
   239e8:	4b06      	ldr	r3, [pc, #24]	; (23a04 <iface2str+0x30>)
   239ea:	600b      	str	r3, [r1, #0]
		return "Bluetooth";
   239ec:	4806      	ldr	r0, [pc, #24]	; (23a08 <iface2str+0x34>)
   239ee:	4770      	bx	lr
   239f0:	4805      	ldr	r0, [pc, #20]	; (23a08 <iface2str+0x34>)
   239f2:	4770      	bx	lr
	return "<unknown type>";
   239f4:	4802      	ldr	r0, [pc, #8]	; (23a00 <iface2str+0x2c>)
}
   239f6:	4770      	bx	lr
   239f8:	0002a5f8 	.word	0x0002a5f8
   239fc:	0002dc70 	.word	0x0002dc70
   23a00:	0002dc54 	.word	0x0002dc54
   23a04:	0002dc64 	.word	0x0002dc64
   23a08:	0002dc48 	.word	0x0002dc48

00023a0c <slab_pool_found_already>:
				    struct k_mem_slab *slab,
				    struct net_buf_pool *pool)
{
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   23a0c:	2300      	movs	r3, #0
   23a0e:	2b05      	cmp	r3, #5
   23a10:	dc18      	bgt.n	23a44 <slab_pool_found_already+0x38>
{
   23a12:	b410      	push	{r4}
   23a14:	e008      	b.n	23a28 <slab_pool_found_already+0x1c>
		if (slab) {
			if (info->tx_slabs[i] == slab) {
				return true;
			}
		} else {
			if (info->data_pools[i] == pool) {
   23a16:	f103 0408 	add.w	r4, r3, #8
   23a1a:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   23a1e:	4294      	cmp	r4, r2
   23a20:	d00e      	beq.n	23a40 <slab_pool_found_already+0x34>
	for (i = 0; i < CONFIG_NET_MAX_CONTEXTS; i++) {
   23a22:	3301      	adds	r3, #1
   23a24:	2b05      	cmp	r3, #5
   23a26:	dc08      	bgt.n	23a3a <slab_pool_found_already+0x2e>
		if (slab) {
   23a28:	2900      	cmp	r1, #0
   23a2a:	d0f4      	beq.n	23a16 <slab_pool_found_already+0xa>
			if (info->tx_slabs[i] == slab) {
   23a2c:	1c9c      	adds	r4, r3, #2
   23a2e:	f850 4024 	ldr.w	r4, [r0, r4, lsl #2]
   23a32:	42a1      	cmp	r1, r4
   23a34:	d1f5      	bne.n	23a22 <slab_pool_found_already+0x16>
				return true;
   23a36:	2001      	movs	r0, #1
   23a38:	e000      	b.n	23a3c <slab_pool_found_already+0x30>
				return true;
			}
		}
	}

	return false;
   23a3a:	2000      	movs	r0, #0
}
   23a3c:	bc10      	pop	{r4}
   23a3e:	4770      	bx	lr
				return true;
   23a40:	2001      	movs	r0, #1
   23a42:	e7fb      	b.n	23a3c <slab_pool_found_already+0x30>
	return false;
   23a44:	2000      	movs	r0, #0
}
   23a46:	4770      	bx	lr

00023a48 <net_shell_cmd_allocs>:
{
   23a48:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_NET_PKT to see allocations.\n");
   23a4a:	4802      	ldr	r0, [pc, #8]	; (23a54 <net_shell_cmd_allocs+0xc>)
   23a4c:	f7de fdd2 	bl	25f4 <printk>
}
   23a50:	2000      	movs	r0, #0
   23a52:	bd08      	pop	{r3, pc}
   23a54:	0002df4c 	.word	0x0002df4c

00023a58 <net_shell_cmd_app>:
{
   23a58:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_APP and either CONFIG_NET_APP_CLIENT "
   23a5a:	4802      	ldr	r0, [pc, #8]	; (23a64 <net_shell_cmd_app+0xc>)
   23a5c:	f7de fdca 	bl	25f4 <printk>
}
   23a60:	2000      	movs	r0, #0
   23a62:	bd08      	pop	{r3, pc}
   23a64:	0002df84 	.word	0x0002df84

00023a68 <net_shell_cmd_arp>:
{
   23a68:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_ARP, CONFIG_NET_IPV4 and "
   23a6a:	4802      	ldr	r0, [pc, #8]	; (23a74 <net_shell_cmd_arp+0xc>)
   23a6c:	f7de fdc2 	bl	25f4 <printk>
}
   23a70:	2000      	movs	r0, #0
   23a72:	bd08      	pop	{r3, pc}
   23a74:	0002e008 	.word	0x0002e008

00023a78 <net_shell_cmd_dns>:
{
   23a78:	b508      	push	{r3, lr}
	printk("DNS resolver not supported.\n");
   23a7a:	4802      	ldr	r0, [pc, #8]	; (23a84 <net_shell_cmd_dns+0xc>)
   23a7c:	f7de fdba 	bl	25f4 <printk>
}
   23a80:	2000      	movs	r0, #0
   23a82:	bd08      	pop	{r3, pc}
   23a84:	0002e108 	.word	0x0002e108

00023a88 <net_shell_cmd_http>:
{
   23a88:	b508      	push	{r3, lr}
	printk("Enable CONFIG_NET_DEBUG_HTTP_CONN and CONFIG_HTTP_SERVER "
   23a8a:	4802      	ldr	r0, [pc, #8]	; (23a94 <net_shell_cmd_http+0xc>)
   23a8c:	f7de fdb2 	bl	25f4 <printk>
}
   23a90:	2000      	movs	r0, #0
   23a92:	bd08      	pop	{r3, pc}
   23a94:	0002e128 	.word	0x0002e128

00023a98 <context_info>:
	return context->flags & NET_CONTEXT_IN_USE;
   23a98:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
#if defined(CONFIG_NET_CONTEXT_NET_PKT_POOL)
	struct ctx_info *info = user_data;
	struct k_mem_slab *slab;
	struct net_buf_pool *pool;

	if (!net_context_is_used(context)) {
   23a9c:	f013 0f01 	tst.w	r3, #1
   23aa0:	d032      	beq.n	23b08 <context_info+0x70>
{
   23aa2:	b570      	push	{r4, r5, r6, lr}
   23aa4:	460d      	mov	r5, r1
   23aa6:	4604      	mov	r4, r0
		return;
	}

	if (context->tx_slab) {
   23aa8:	6bc3      	ldr	r3, [r0, #60]	; 0x3c
   23aaa:	b19b      	cbz	r3, 23ad4 <context_info+0x3c>
		slab = context->tx_slab();
   23aac:	4798      	blx	r3
   23aae:	4606      	mov	r6, r0

		if (slab_pool_found_already(info, slab, NULL)) {
   23ab0:	2200      	movs	r2, #0
   23ab2:	4601      	mov	r1, r0
   23ab4:	4628      	mov	r0, r5
   23ab6:	f7ff ffa9 	bl	23a0c <slab_pool_found_already>
   23aba:	b100      	cbz	r0, 23abe <context_info+0x26>
   23abc:	bd70      	pop	{r4, r5, r6, pc}
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%zu\t%u\t%u\tETX\n",
		       slab, slab->num_blocks * slab->block_size,
		       slab->num_blocks, k_mem_slab_num_free_get(slab));
#else
		printk("%p\t%d\tETX\n", slab, slab->num_blocks);
   23abe:	68b2      	ldr	r2, [r6, #8]
   23ac0:	4631      	mov	r1, r6
   23ac2:	4812      	ldr	r0, [pc, #72]	; (23b0c <context_info+0x74>)
   23ac4:	f7de fd96 	bl	25f4 <printk>
#endif
		info->are_external_pools = true;
   23ac8:	2301      	movs	r3, #1
   23aca:	712b      	strb	r3, [r5, #4]
		info->tx_slabs[info->pos] = slab;
   23acc:	682b      	ldr	r3, [r5, #0]
   23ace:	3302      	adds	r3, #2
   23ad0:	f845 6023 	str.w	r6, [r5, r3, lsl #2]
	}

	if (context->data_pool) {
   23ad4:	6c23      	ldr	r3, [r4, #64]	; 0x40
   23ad6:	b19b      	cbz	r3, 23b00 <context_info+0x68>
		pool = context->data_pool();
   23ad8:	4798      	blx	r3
   23ada:	4604      	mov	r4, r0

		if (slab_pool_found_already(info, NULL, pool)) {
   23adc:	4602      	mov	r2, r0
   23ade:	2100      	movs	r1, #0
   23ae0:	4628      	mov	r0, r5
   23ae2:	f7ff ff93 	bl	23a0c <slab_pool_found_already>
   23ae6:	2800      	cmp	r0, #0
   23ae8:	d1e8      	bne.n	23abc <context_info+0x24>
#if defined(CONFIG_NET_DEBUG_NET_PKT)
		printk("%p\t%d\t%d\t%d\tEDATA (%s)\n",
		       pool, pool->pool_size, pool->buf_count,
		       pool->avail_count, pool->name);
#else
		printk("%p\t%d\tEDATA\n", pool, pool->buf_count);
   23aea:	8a22      	ldrh	r2, [r4, #16]
   23aec:	4621      	mov	r1, r4
   23aee:	4808      	ldr	r0, [pc, #32]	; (23b10 <context_info+0x78>)
   23af0:	f7de fd80 	bl	25f4 <printk>
#endif
		info->are_external_pools = true;
   23af4:	2301      	movs	r3, #1
   23af6:	712b      	strb	r3, [r5, #4]
		info->data_pools[info->pos] = pool;
   23af8:	682b      	ldr	r3, [r5, #0]
   23afa:	3308      	adds	r3, #8
   23afc:	f845 4023 	str.w	r4, [r5, r3, lsl #2]
	}

	info->pos++;
   23b00:	682b      	ldr	r3, [r5, #0]
   23b02:	3301      	adds	r3, #1
   23b04:	602b      	str	r3, [r5, #0]
   23b06:	e7d9      	b.n	23abc <context_info+0x24>
   23b08:	4770      	bx	lr
   23b0a:	bf00      	nop
   23b0c:	0002dc0c 	.word	0x0002dc0c
   23b10:	0002dc18 	.word	0x0002dc18

00023b14 <net_shell_cmd_rpl>:
}

#endif /* CONFIG_NET_RPL */

int net_shell_cmd_rpl(int argc, char *argv[])
{
   23b14:	b508      	push	{r3, lr}
		printk("No parents found.\n");
	}

	printk("\n");
#else
	printk("RPL not enabled, set CONFIG_NET_RPL to enable it.\n");
   23b16:	4802      	ldr	r0, [pc, #8]	; (23b20 <net_shell_cmd_rpl+0xc>)
   23b18:	f7de fd6c 	bl	25f4 <printk>
#endif

	return 0;
}
   23b1c:	2000      	movs	r0, #0
   23b1e:	bd08      	pop	{r3, pc}
   23b20:	0002e338 	.word	0x0002e338

00023b24 <net_shell_cmd_stacks>:
extern K_THREAD_STACK_DEFINE(sys_work_q_stack,
			     CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);
#endif

int net_shell_cmd_stacks(int argc, char *argv[])
{
   23b24:	b530      	push	{r4, r5, lr}
   23b26:	b087      	sub	sp, #28
	struct net_stack_info *info;

	ARG_UNUSED(argc);
	ARG_UNUSED(argv);

	for (info = __net_stack_start; info != __net_stack_end; info++) {
   23b28:	4d3f      	ldr	r5, [pc, #252]	; (23c28 <net_shell_cmd_stacks+0x104>)
   23b2a:	e011      	b.n	23b50 <net_shell_cmd_stacks+0x2c>
						unsigned *unused)
{
	*unused = stack_unused_space_get(stack, size);

	/* Calculate the real size reserved for the stack */
	*pcnt = ((size - *unused) * 100) / size;
   23b2c:	1a81      	subs	r1, r0, r2
   23b2e:	2364      	movs	r3, #100	; 0x64
   23b30:	fb03 f301 	mul.w	r3, r3, r1
   23b34:	fbb3 f3f0 	udiv	r3, r3, r0
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
					     info->size, &pcnt, &unused);

#if defined(CONFIG_INIT_STACKS)
		printk("%s [%s] stack size %zu/%zu bytes unused %u usage"
   23b38:	9304      	str	r3, [sp, #16]
   23b3a:	9003      	str	r0, [sp, #12]
   23b3c:	9102      	str	r1, [sp, #8]
   23b3e:	9201      	str	r2, [sp, #4]
   23b40:	9000      	str	r0, [sp, #0]
   23b42:	68eb      	ldr	r3, [r5, #12]
   23b44:	68aa      	ldr	r2, [r5, #8]
   23b46:	6869      	ldr	r1, [r5, #4]
   23b48:	4838      	ldr	r0, [pc, #224]	; (23c2c <net_shell_cmd_stacks+0x108>)
   23b4a:	f7de fd53 	bl	25f4 <printk>
	for (info = __net_stack_start; info != __net_stack_end; info++) {
   23b4e:	3514      	adds	r5, #20
   23b50:	4b37      	ldr	r3, [pc, #220]	; (23c30 <net_shell_cmd_stacks+0x10c>)
   23b52:	429d      	cmp	r5, r3
   23b54:	d00b      	beq.n	23b6e <net_shell_cmd_stacks+0x4a>
		net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(info->stack),
   23b56:	682c      	ldr	r4, [r5, #0]
   23b58:	6928      	ldr	r0, [r5, #16]
   23b5a:	2300      	movs	r3, #0
	size_t unused = 0;
   23b5c:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23b5e:	4298      	cmp	r0, r3
   23b60:	d9e4      	bls.n	23b2c <net_shell_cmd_stacks+0x8>
		if ((unsigned char)stack[i] == 0xaa) {
   23b62:	5ce1      	ldrb	r1, [r4, r3]
   23b64:	29aa      	cmp	r1, #170	; 0xaa
   23b66:	d1e1      	bne.n	23b2c <net_shell_cmd_stacks+0x8>
			unused++;
   23b68:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23b6a:	3301      	adds	r3, #1
   23b6c:	e7f7      	b.n	23b5e <net_shell_cmd_stacks+0x3a>
   23b6e:	2300      	movs	r3, #0
   23b70:	461a      	mov	r2, r3
   23b72:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23b76:	d206      	bcs.n	23b86 <net_shell_cmd_stacks+0x62>
		if ((unsigned char)stack[i] == 0xaa) {
   23b78:	492e      	ldr	r1, [pc, #184]	; (23c34 <net_shell_cmd_stacks+0x110>)
   23b7a:	5cc9      	ldrb	r1, [r1, r3]
   23b7c:	29aa      	cmp	r1, #170	; 0xaa
   23b7e:	d102      	bne.n	23b86 <net_shell_cmd_stacks+0x62>
			unused++;
   23b80:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23b82:	3301      	adds	r3, #1
   23b84:	e7f5      	b.n	23b72 <net_shell_cmd_stacks+0x4e>
   23b86:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   23b8a:	2364      	movs	r3, #100	; 0x64
   23b8c:	fb03 f301 	mul.w	r3, r3, r1
   23b90:	0adb      	lsrs	r3, r3, #11

#if defined(CONFIG_INIT_STACKS)
	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_main_stack),
				     K_THREAD_STACK_SIZEOF(_main_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   23b92:	9304      	str	r3, [sp, #16]
   23b94:	f44f 6300 	mov.w	r3, #2048	; 0x800
   23b98:	9303      	str	r3, [sp, #12]
   23b9a:	9102      	str	r1, [sp, #8]
   23b9c:	9201      	str	r2, [sp, #4]
   23b9e:	9300      	str	r3, [sp, #0]
   23ba0:	4a25      	ldr	r2, [pc, #148]	; (23c38 <net_shell_cmd_stacks+0x114>)
   23ba2:	4926      	ldr	r1, [pc, #152]	; (23c3c <net_shell_cmd_stacks+0x118>)
   23ba4:	4826      	ldr	r0, [pc, #152]	; (23c40 <net_shell_cmd_stacks+0x11c>)
   23ba6:	f7de fd25 	bl	25f4 <printk>
   23baa:	2300      	movs	r3, #0
	size_t unused = 0;
   23bac:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23bae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
   23bb2:	d206      	bcs.n	23bc2 <net_shell_cmd_stacks+0x9e>
		if ((unsigned char)stack[i] == 0xaa) {
   23bb4:	4923      	ldr	r1, [pc, #140]	; (23c44 <net_shell_cmd_stacks+0x120>)
   23bb6:	5cc9      	ldrb	r1, [r1, r3]
   23bb8:	29aa      	cmp	r1, #170	; 0xaa
   23bba:	d102      	bne.n	23bc2 <net_shell_cmd_stacks+0x9e>
			unused++;
   23bbc:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23bbe:	3301      	adds	r3, #1
   23bc0:	e7f5      	b.n	23bae <net_shell_cmd_stacks+0x8a>
   23bc2:	f5c2 6100 	rsb	r1, r2, #2048	; 0x800
   23bc6:	2364      	movs	r3, #100	; 0x64
   23bc8:	fb03 f301 	mul.w	r3, r3, r1
   23bcc:	0adb      	lsrs	r3, r3, #11
	       CONFIG_MAIN_STACK_SIZE - unused, CONFIG_MAIN_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(_interrupt_stack),
				     K_THREAD_STACK_SIZEOF(_interrupt_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   23bce:	9304      	str	r3, [sp, #16]
   23bd0:	f44f 6300 	mov.w	r3, #2048	; 0x800
   23bd4:	9303      	str	r3, [sp, #12]
   23bd6:	9102      	str	r1, [sp, #8]
   23bd8:	9201      	str	r2, [sp, #4]
   23bda:	9300      	str	r3, [sp, #0]
   23bdc:	4a1a      	ldr	r2, [pc, #104]	; (23c48 <net_shell_cmd_stacks+0x124>)
   23bde:	491b      	ldr	r1, [pc, #108]	; (23c4c <net_shell_cmd_stacks+0x128>)
   23be0:	4817      	ldr	r0, [pc, #92]	; (23c40 <net_shell_cmd_stacks+0x11c>)
   23be2:	f7de fd07 	bl	25f4 <printk>
   23be6:	2300      	movs	r3, #0
	size_t unused = 0;
   23be8:	461a      	mov	r2, r3
	for (i = 0; i < size; i++) {
   23bea:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
   23bee:	d206      	bcs.n	23bfe <net_shell_cmd_stacks+0xda>
		if ((unsigned char)stack[i] == 0xaa) {
   23bf0:	4917      	ldr	r1, [pc, #92]	; (23c50 <net_shell_cmd_stacks+0x12c>)
   23bf2:	5cc9      	ldrb	r1, [r1, r3]
   23bf4:	29aa      	cmp	r1, #170	; 0xaa
   23bf6:	d102      	bne.n	23bfe <net_shell_cmd_stacks+0xda>
			unused++;
   23bf8:	3201      	adds	r2, #1
	for (i = 0; i < size; i++) {
   23bfa:	3301      	adds	r3, #1
   23bfc:	e7f5      	b.n	23bea <net_shell_cmd_stacks+0xc6>
   23bfe:	f5c2 6180 	rsb	r1, r2, #1024	; 0x400
   23c02:	2364      	movs	r3, #100	; 0x64
   23c04:	fb03 f301 	mul.w	r3, r3, r1
   23c08:	0a9b      	lsrs	r3, r3, #10
	       CONFIG_ISR_STACK_SIZE - unused, CONFIG_ISR_STACK_SIZE, pcnt);

	net_analyze_stack_get_values(K_THREAD_STACK_BUFFER(sys_work_q_stack),
				     K_THREAD_STACK_SIZEOF(sys_work_q_stack),
				     &pcnt, &unused);
	printk("%s [%s] stack size %d/%d bytes unused %u usage"
   23c0a:	9304      	str	r3, [sp, #16]
   23c0c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   23c10:	9303      	str	r3, [sp, #12]
   23c12:	9102      	str	r1, [sp, #8]
   23c14:	9201      	str	r2, [sp, #4]
   23c16:	9300      	str	r3, [sp, #0]
   23c18:	4a0e      	ldr	r2, [pc, #56]	; (23c54 <net_shell_cmd_stacks+0x130>)
   23c1a:	490f      	ldr	r1, [pc, #60]	; (23c58 <net_shell_cmd_stacks+0x134>)
   23c1c:	4808      	ldr	r0, [pc, #32]	; (23c40 <net_shell_cmd_stacks+0x11c>)
   23c1e:	f7de fce9 	bl	25f4 <printk>
#else
	printk("Enable CONFIG_INIT_STACKS to see usage information.\n");
#endif

	return 0;
}
   23c22:	2000      	movs	r0, #0
   23c24:	b007      	add	sp, #28
   23c26:	bd30      	pop	{r4, r5, pc}
   23c28:	2000d0b4 	.word	0x2000d0b4
   23c2c:	0002e36c 	.word	0x0002e36c
   23c30:	2000d0f0 	.word	0x2000d0f0
   23c34:	2000a360 	.word	0x2000a360
   23c38:	0002e3b0 	.word	0x0002e3b0
   23c3c:	0002e3bc 	.word	0x0002e3bc
   23c40:	0002e3c4 	.word	0x0002e3c4
   23c44:	2000aca0 	.word	0x2000aca0
   23c48:	0002e404 	.word	0x0002e404
   23c4c:	0002e418 	.word	0x0002e418
   23c50:	2000b4a0 	.word	0x2000b4a0
   23c54:	0002e41c 	.word	0x0002e41c
   23c58:	0002e430 	.word	0x0002e430

00023c5c <net_shell_cmd_stats>:

int net_shell_cmd_stats(int argc, char *argv[])
{
   23c5c:	b510      	push	{r4, lr}
   23c5e:	b082      	sub	sp, #8
	printk("IPv6 recv      %d\tsent\t%d\tdrop\t%d\tforwarded\t%d\n",
   23c60:	4c34      	ldr	r4, [pc, #208]	; (23d34 <net_shell_cmd_stats+0xd8>)
   23c62:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   23c64:	9300      	str	r3, [sp, #0]
   23c66:	6b23      	ldr	r3, [r4, #48]	; 0x30
   23c68:	6aa2      	ldr	r2, [r4, #40]	; 0x28
   23c6a:	6a61      	ldr	r1, [r4, #36]	; 0x24
   23c6c:	4832      	ldr	r0, [pc, #200]	; (23d38 <net_shell_cmd_stats+0xdc>)
   23c6e:	f7de fcc1 	bl	25f4 <printk>
	printk("IPv6 ND recv   %d\tsent\t%d\tdrop\t%d\n",
   23c72:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   23c76:	f8d4 2094 	ldr.w	r2, [r4, #148]	; 0x94
   23c7a:	f8d4 1090 	ldr.w	r1, [r4, #144]	; 0x90
   23c7e:	482f      	ldr	r0, [pc, #188]	; (23d3c <net_shell_cmd_stats+0xe0>)
   23c80:	f7de fcb8 	bl	25f4 <printk>
	printk("IPv6 MLD recv  %d\tsent\t%d\tdrop\t%d\n",
   23c84:	f8d4 30a0 	ldr.w	r3, [r4, #160]	; 0xa0
   23c88:	f8d4 209c 	ldr.w	r2, [r4, #156]	; 0x9c
   23c8c:	f8d4 1098 	ldr.w	r1, [r4, #152]	; 0x98
   23c90:	482b      	ldr	r0, [pc, #172]	; (23d40 <net_shell_cmd_stats+0xe4>)
   23c92:	f7de fcaf 	bl	25f4 <printk>
	printk("IP vhlerr      %d\thblener\t%d\tlblener\t%d\n",
   23c96:	6963      	ldr	r3, [r4, #20]
   23c98:	6922      	ldr	r2, [r4, #16]
   23c9a:	68e1      	ldr	r1, [r4, #12]
   23c9c:	4829      	ldr	r0, [pc, #164]	; (23d44 <net_shell_cmd_stats+0xe8>)
   23c9e:	f7de fca9 	bl	25f4 <printk>
	printk("IP fragerr     %d\tchkerr\t%d\tprotoer\t%d\n",
   23ca2:	6a23      	ldr	r3, [r4, #32]
   23ca4:	69e2      	ldr	r2, [r4, #28]
   23ca6:	69a1      	ldr	r1, [r4, #24]
   23ca8:	4827      	ldr	r0, [pc, #156]	; (23d48 <net_shell_cmd_stats+0xec>)
   23caa:	f7de fca3 	bl	25f4 <printk>
	printk("ICMP recv      %d\tsent\t%d\tdrop\t%d\n",
   23cae:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   23cb0:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   23cb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
   23cb4:	4825      	ldr	r0, [pc, #148]	; (23d4c <net_shell_cmd_stats+0xf0>)
   23cb6:	f7de fc9d 	bl	25f4 <printk>
	printk("ICMP typeer    %d\tchkerr\t%d\n",
   23cba:	6c62      	ldr	r2, [r4, #68]	; 0x44
   23cbc:	6c21      	ldr	r1, [r4, #64]	; 0x40
   23cbe:	4824      	ldr	r0, [pc, #144]	; (23d50 <net_shell_cmd_stats+0xf4>)
   23cc0:	f7de fc98 	bl	25f4 <printk>
	printk("UDP recv       %d\tsent\t%d\tdrop\t%d\n",
   23cc4:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   23cc6:	f8d4 2084 	ldr.w	r2, [r4, #132]	; 0x84
   23cca:	f8d4 1080 	ldr.w	r1, [r4, #128]	; 0x80
   23cce:	4821      	ldr	r0, [pc, #132]	; (23d54 <net_shell_cmd_stats+0xf8>)
   23cd0:	f7de fc90 	bl	25f4 <printk>
	printk("UDP chkerr     %d\n",
   23cd4:	f8d4 1088 	ldr.w	r1, [r4, #136]	; 0x88
   23cd8:	481f      	ldr	r0, [pc, #124]	; (23d58 <net_shell_cmd_stats+0xfc>)
   23cda:	f7de fc8b 	bl	25f4 <printk>
	printk("TCP bytes recv %u\tsent\t%d\n",
   23cde:	6ca2      	ldr	r2, [r4, #72]	; 0x48
   23ce0:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   23ce2:	481e      	ldr	r0, [pc, #120]	; (23d5c <net_shell_cmd_stats+0x100>)
   23ce4:	f7de fc86 	bl	25f4 <printk>
	printk("TCP seg recv   %d\tsent\t%d\tdrop\t%d\n",
   23ce8:	6de3      	ldr	r3, [r4, #92]	; 0x5c
   23cea:	6da2      	ldr	r2, [r4, #88]	; 0x58
   23cec:	6d61      	ldr	r1, [r4, #84]	; 0x54
   23cee:	481c      	ldr	r0, [pc, #112]	; (23d60 <net_shell_cmd_stats+0x104>)
   23cf0:	f7de fc80 	bl	25f4 <printk>
	printk("TCP seg resent %d\tchkerr\t%d\tackerr\t%d\n",
   23cf4:	6e63      	ldr	r3, [r4, #100]	; 0x64
   23cf6:	6e22      	ldr	r2, [r4, #96]	; 0x60
   23cf8:	6d21      	ldr	r1, [r4, #80]	; 0x50
   23cfa:	481a      	ldr	r0, [pc, #104]	; (23d64 <net_shell_cmd_stats+0x108>)
   23cfc:	f7de fc7a 	bl	25f4 <printk>
	printk("TCP seg rsterr %d\trst\t%d\tre-xmit\t%d\n",
   23d00:	6f23      	ldr	r3, [r4, #112]	; 0x70
   23d02:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
   23d04:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   23d06:	4818      	ldr	r0, [pc, #96]	; (23d68 <net_shell_cmd_stats+0x10c>)
   23d08:	f7de fc74 	bl	25f4 <printk>
	printk("TCP conn drop  %d\tconnrst\t%d\n",
   23d0c:	6fa2      	ldr	r2, [r4, #120]	; 0x78
   23d0e:	6f61      	ldr	r1, [r4, #116]	; 0x74
   23d10:	4816      	ldr	r0, [pc, #88]	; (23d6c <net_shell_cmd_stats+0x110>)
   23d12:	f7de fc6f 	bl	25f4 <printk>
	printk("Bytes received %u\n", GET_STAT(bytes.received));
   23d16:	68a1      	ldr	r1, [r4, #8]
   23d18:	4815      	ldr	r0, [pc, #84]	; (23d70 <net_shell_cmd_stats+0x114>)
   23d1a:	f7de fc6b 	bl	25f4 <printk>
	printk("Bytes sent     %u\n", GET_STAT(bytes.sent));
   23d1e:	6861      	ldr	r1, [r4, #4]
   23d20:	4814      	ldr	r0, [pc, #80]	; (23d74 <net_shell_cmd_stats+0x118>)
   23d22:	f7de fc67 	bl	25f4 <printk>
	printk("Processing err %d\n", GET_STAT(processing_error));
   23d26:	6821      	ldr	r1, [r4, #0]
   23d28:	4813      	ldr	r0, [pc, #76]	; (23d78 <net_shell_cmd_stats+0x11c>)
   23d2a:	f7de fc63 	bl	25f4 <printk>
#else
	printk("Network statistics not compiled in.\n");
#endif

	return 0;
}
   23d2e:	2000      	movs	r0, #0
   23d30:	b002      	add	sp, #8
   23d32:	bd10      	pop	{r4, pc}
   23d34:	20002ab8 	.word	0x20002ab8
   23d38:	0002e438 	.word	0x0002e438
   23d3c:	0002e468 	.word	0x0002e468
   23d40:	0002e48c 	.word	0x0002e48c
   23d44:	0002e4b0 	.word	0x0002e4b0
   23d48:	0002e4dc 	.word	0x0002e4dc
   23d4c:	0002e504 	.word	0x0002e504
   23d50:	0002e528 	.word	0x0002e528
   23d54:	0002e548 	.word	0x0002e548
   23d58:	0002e56c 	.word	0x0002e56c
   23d5c:	0002e580 	.word	0x0002e580
   23d60:	0002e59c 	.word	0x0002e59c
   23d64:	0002e5c0 	.word	0x0002e5c0
   23d68:	0002e5e8 	.word	0x0002e5e8
   23d6c:	0002e610 	.word	0x0002e610
   23d70:	0002e630 	.word	0x0002e630
   23d74:	0002e644 	.word	0x0002e644
   23d78:	0002e658 	.word	0x0002e658

00023d7c <tcp_sent_cb>:

static void tcp_sent_cb(struct net_context *context,
			int status,
			void *token,
			void *user_data)
{
   23d7c:	b508      	push	{r3, lr}
	printk("Message sent\n");
   23d7e:	4802      	ldr	r0, [pc, #8]	; (23d88 <tcp_sent_cb+0xc>)
   23d80:	f7de fc38 	bl	25f4 <printk>
   23d84:	bd08      	pop	{r3, pc}
   23d86:	bf00      	nop
   23d88:	0002e918 	.word	0x0002e918

00023d8c <net_shell_cmd_conn>:
{
   23d8c:	b510      	push	{r4, lr}
   23d8e:	b082      	sub	sp, #8
	int count = 0;
   23d90:	ac02      	add	r4, sp, #8
   23d92:	2300      	movs	r3, #0
   23d94:	f844 3d04 	str.w	r3, [r4, #-4]!
	printk("     Context   \tIface         Flags "
   23d98:	4810      	ldr	r0, [pc, #64]	; (23ddc <net_shell_cmd_conn+0x50>)
   23d9a:	f7de fc2b 	bl	25f4 <printk>
	net_context_foreach(context_cb, &count);
   23d9e:	4621      	mov	r1, r4
   23da0:	480f      	ldr	r0, [pc, #60]	; (23de0 <net_shell_cmd_conn+0x54>)
   23da2:	f7f8 ff03 	bl	1cbac <net_context_foreach>
	if (count == 0) {
   23da6:	9b01      	ldr	r3, [sp, #4]
   23da8:	b17b      	cbz	r3, 23dca <net_shell_cmd_conn+0x3e>
	printk("\nTCP        Src port  Dst port   Send-Seq   Send-Ack  MSS"
   23daa:	490e      	ldr	r1, [pc, #56]	; (23de4 <net_shell_cmd_conn+0x58>)
   23dac:	480e      	ldr	r0, [pc, #56]	; (23de8 <net_shell_cmd_conn+0x5c>)
   23dae:	f7de fc21 	bl	25f4 <printk>
	count = 0;
   23db2:	a902      	add	r1, sp, #8
   23db4:	2300      	movs	r3, #0
   23db6:	f841 3d04 	str.w	r3, [r1, #-4]!
	net_tcp_foreach(tcp_cb, &count);
   23dba:	480c      	ldr	r0, [pc, #48]	; (23dec <net_shell_cmd_conn+0x60>)
   23dbc:	f7ff fa48 	bl	23250 <net_tcp_foreach>
	if (count == 0) {
   23dc0:	9b01      	ldr	r3, [sp, #4]
   23dc2:	b133      	cbz	r3, 23dd2 <net_shell_cmd_conn+0x46>
}
   23dc4:	2000      	movs	r0, #0
   23dc6:	b002      	add	sp, #8
   23dc8:	bd10      	pop	{r4, pc}
		printk("No connections\n");
   23dca:	4809      	ldr	r0, [pc, #36]	; (23df0 <net_shell_cmd_conn+0x64>)
   23dcc:	f7de fc12 	bl	25f4 <printk>
   23dd0:	e7eb      	b.n	23daa <net_shell_cmd_conn+0x1e>
		printk("No TCP connections\n");
   23dd2:	4808      	ldr	r0, [pc, #32]	; (23df4 <net_shell_cmd_conn+0x68>)
   23dd4:	f7de fc0e 	bl	25f4 <printk>
   23dd8:	e7f4      	b.n	23dc4 <net_shell_cmd_conn+0x38>
   23dda:	bf00      	nop
   23ddc:	0002e064 	.word	0x0002e064
   23de0:	00023f69 	.word	0x00023f69
   23de4:	0002afec 	.word	0x0002afec
   23de8:	0002e0b4 	.word	0x0002e0b4
   23dec:	00023df9 	.word	0x00023df9
   23df0:	0002e0a4 	.word	0x0002e0a4
   23df4:	0002e0f4 	.word	0x0002e0f4

00023df8 <tcp_cb>:
{
   23df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   23dfc:	b084      	sub	sp, #16
   23dfe:	4604      	mov	r4, r0
   23e00:	460f      	mov	r7, r1
	u16_t recv_mss = net_tcp_get_recv_mss(tcp);
   23e02:	f7fe ffe4 	bl	22dce <net_tcp_get_recv_mss>
   23e06:	4680      	mov	r8, r0
	       ntohs(net_sin6_ptr(&tcp->context->local)->sin6_port),
   23e08:	6823      	ldr	r3, [r4, #0]
   23e0a:	895a      	ldrh	r2, [r3, #10]
   23e0c:	0215      	lsls	r5, r2, #8
   23e0e:	ea45 2512 	orr.w	r5, r5, r2, lsr #8
   23e12:	b2ad      	uxth	r5, r5
	       ntohs(net_sin6(&tcp->context->remote)->sin6_port),
   23e14:	8adb      	ldrh	r3, [r3, #22]
   23e16:	021e      	lsls	r6, r3, #8
   23e18:	ea46 2613 	orr.w	r6, r6, r3, lsr #8
   23e1c:	b2b6      	uxth	r6, r6
	printk("%p    %5u     %5u %10u %10u %5u   %s\n",
   23e1e:	f8d4 9098 	ldr.w	r9, [r4, #152]	; 0x98
   23e22:	f8d4 a09c 	ldr.w	sl, [r4, #156]	; 0x9c
   23e26:	f8d4 00a4 	ldr.w	r0, [r4, #164]	; 0xa4
   23e2a:	f3c0 3043 	ubfx	r0, r0, #13, #4
   23e2e:	f7ff f845 	bl	22ebc <net_tcp_state_str>
   23e32:	9003      	str	r0, [sp, #12]
   23e34:	f8cd 8008 	str.w	r8, [sp, #8]
   23e38:	f8cd a004 	str.w	sl, [sp, #4]
   23e3c:	f8cd 9000 	str.w	r9, [sp]
   23e40:	4633      	mov	r3, r6
   23e42:	462a      	mov	r2, r5
   23e44:	4621      	mov	r1, r4
   23e46:	4804      	ldr	r0, [pc, #16]	; (23e58 <tcp_cb+0x60>)
   23e48:	f7de fbd4 	bl	25f4 <printk>
	(*count)++;
   23e4c:	683b      	ldr	r3, [r7, #0]
   23e4e:	3301      	adds	r3, #1
   23e50:	603b      	str	r3, [r7, #0]
}
   23e52:	b004      	add	sp, #16
   23e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   23e58:	0002e874 	.word	0x0002e874

00023e5c <get_addresses>:
{
   23e5c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   23e60:	b083      	sub	sp, #12
   23e62:	460d      	mov	r5, r1
   23e64:	4616      	mov	r6, r2
   23e66:	461f      	mov	r7, r3
	if (context->local.family == AF_INET6) {
   23e68:	8903      	ldrh	r3, [r0, #8]
   23e6a:	2b0a      	cmp	r3, #10
   23e6c:	d008      	beq.n	23e80 <get_addresses+0x24>
	if (context->local.family == AF_UNSPEC) {
   23e6e:	b393      	cbz	r3, 23ed6 <get_addresses+0x7a>
		snprintk(addr_local, local_len, "AF_UNK(%d)",
   23e70:	4a1c      	ldr	r2, [pc, #112]	; (23ee4 <get_addresses+0x88>)
   23e72:	4631      	mov	r1, r6
   23e74:	4628      	mov	r0, r5
   23e76:	f7de fbcb 	bl	2610 <snprintk>
}
   23e7a:	b003      	add	sp, #12
   23e7c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   23e80:	4604      	mov	r4, r0
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   23e82:	f8df 9068 	ldr.w	r9, [pc, #104]	; 23eec <get_addresses+0x90>
   23e86:	2328      	movs	r3, #40	; 0x28
   23e88:	464a      	mov	r2, r9
   23e8a:	68c1      	ldr	r1, [r0, #12]
   23e8c:	200a      	movs	r0, #10
   23e8e:	f7f9 fc1d 	bl	1d6cc <net_addr_ntop>
			 ntohs(net_sin6_ptr(&context->local)->sin6_port));
   23e92:	8962      	ldrh	r2, [r4, #10]
   23e94:	0213      	lsls	r3, r2, #8
   23e96:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23e9a:	b29b      	uxth	r3, r3
		snprintk(addr_local, local_len, "[%s]:%u",
   23e9c:	f8df 8050 	ldr.w	r8, [pc, #80]	; 23ef0 <get_addresses+0x94>
   23ea0:	9300      	str	r3, [sp, #0]
   23ea2:	4603      	mov	r3, r0
   23ea4:	4642      	mov	r2, r8
   23ea6:	4631      	mov	r1, r6
   23ea8:	4628      	mov	r0, r5
   23eaa:	f7de fbb1 	bl	2610 <snprintk>
   23eae:	2328      	movs	r3, #40	; 0x28
   23eb0:	464a      	mov	r2, r9
   23eb2:	f104 0118 	add.w	r1, r4, #24
   23eb6:	200a      	movs	r0, #10
   23eb8:	f7f9 fc08 	bl	1d6cc <net_addr_ntop>
			 ntohs(net_sin6(&context->remote)->sin6_port));
   23ebc:	8ae2      	ldrh	r2, [r4, #22]
   23ebe:	0213      	lsls	r3, r2, #8
   23ec0:	ea43 2312 	orr.w	r3, r3, r2, lsr #8
   23ec4:	b29b      	uxth	r3, r3
		snprintk(addr_remote, remote_len, "[%s]:%u",
   23ec6:	9300      	str	r3, [sp, #0]
   23ec8:	4603      	mov	r3, r0
   23eca:	4642      	mov	r2, r8
   23ecc:	990a      	ldr	r1, [sp, #40]	; 0x28
   23ece:	4638      	mov	r0, r7
   23ed0:	f7de fb9e 	bl	2610 <snprintk>
   23ed4:	e7d1      	b.n	23e7a <get_addresses+0x1e>
		snprintk(addr_local, local_len, "AF_UNSPEC");
   23ed6:	4a04      	ldr	r2, [pc, #16]	; (23ee8 <get_addresses+0x8c>)
   23ed8:	4631      	mov	r1, r6
   23eda:	4628      	mov	r0, r5
   23edc:	f7de fb98 	bl	2610 <snprintk>
   23ee0:	e7cb      	b.n	23e7a <get_addresses+0x1e>
   23ee2:	bf00      	nop
   23ee4:	0002dc3c 	.word	0x0002dc3c
   23ee8:	0002dc30 	.word	0x0002dc30
   23eec:	200024c0 	.word	0x200024c0
   23ef0:	0002dc28 	.word	0x0002dc28

00023ef4 <print_connect_info>:
{
   23ef4:	b570      	push	{r4, r5, r6, lr}
	switch (family) {
   23ef6:	2802      	cmp	r0, #2
   23ef8:	d008      	beq.n	23f0c <print_connect_info+0x18>
   23efa:	460d      	mov	r5, r1
   23efc:	4614      	mov	r4, r2
   23efe:	280a      	cmp	r0, #10
   23f00:	d008      	beq.n	23f14 <print_connect_info+0x20>
		printk("Unknown protocol family (%d)\n", family);
   23f02:	4601      	mov	r1, r0
   23f04:	4813      	ldr	r0, [pc, #76]	; (23f54 <print_connect_info+0x60>)
   23f06:	f7de fb75 	bl	25f4 <printk>
   23f0a:	bd70      	pop	{r4, r5, r6, pc}
		printk("IPv4 not supported\n");
   23f0c:	4812      	ldr	r0, [pc, #72]	; (23f58 <print_connect_info+0x64>)
   23f0e:	f7de fb71 	bl	25f4 <printk>
		break;
   23f12:	bd70      	pop	{r4, r5, r6, pc}
   23f14:	4e11      	ldr	r6, [pc, #68]	; (23f5c <print_connect_info+0x68>)
   23f16:	2328      	movs	r3, #40	; 0x28
   23f18:	4632      	mov	r2, r6
   23f1a:	3104      	adds	r1, #4
   23f1c:	200a      	movs	r0, #10
   23f1e:	f7f9 fbd5 	bl	1d6cc <net_addr_ntop>
		       ntohs(net_sin6(myaddr)->sin6_port));
   23f22:	886b      	ldrh	r3, [r5, #2]
   23f24:	021a      	lsls	r2, r3, #8
   23f26:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("Connecting from [%s]:%u ",
   23f2a:	b292      	uxth	r2, r2
   23f2c:	4601      	mov	r1, r0
   23f2e:	480c      	ldr	r0, [pc, #48]	; (23f60 <print_connect_info+0x6c>)
   23f30:	f7de fb60 	bl	25f4 <printk>
   23f34:	2328      	movs	r3, #40	; 0x28
   23f36:	4632      	mov	r2, r6
   23f38:	1d21      	adds	r1, r4, #4
   23f3a:	200a      	movs	r0, #10
   23f3c:	f7f9 fbc6 	bl	1d6cc <net_addr_ntop>
		       ntohs(net_sin6(addr)->sin6_port));
   23f40:	8863      	ldrh	r3, [r4, #2]
   23f42:	021a      	lsls	r2, r3, #8
   23f44:	ea42 2213 	orr.w	r2, r2, r3, lsr #8
		printk("to [%s]:%u\n",
   23f48:	b292      	uxth	r2, r2
   23f4a:	4601      	mov	r1, r0
   23f4c:	4805      	ldr	r0, [pc, #20]	; (23f64 <print_connect_info+0x70>)
   23f4e:	f7de fb51 	bl	25f4 <printk>
		break;
   23f52:	bd70      	pop	{r4, r5, r6, pc}
   23f54:	0002e80c 	.word	0x0002e80c
   23f58:	0002e7d0 	.word	0x0002e7d0
   23f5c:	200024c0 	.word	0x200024c0
   23f60:	0002e7e4 	.word	0x0002e7e4
   23f64:	0002e800 	.word	0x0002e800

00023f68 <context_cb>:
{
   23f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   23f6a:	b09f      	sub	sp, #124	; 0x7c
   23f6c:	4604      	mov	r4, r0
   23f6e:	460d      	mov	r5, r1
	char addr_remote[ADDR_LEN + 7] = "";
   23f70:	2100      	movs	r1, #0
   23f72:	9106      	str	r1, [sp, #24]
   23f74:	222b      	movs	r2, #43	; 0x2b
   23f76:	a807      	add	r0, sp, #28
   23f78:	f005 fd0e 	bl	29998 <memset>
	get_addresses(context, addr_local, sizeof(addr_local),
   23f7c:	222f      	movs	r2, #47	; 0x2f
   23f7e:	9200      	str	r2, [sp, #0]
   23f80:	ab06      	add	r3, sp, #24
   23f82:	a912      	add	r1, sp, #72	; 0x48
   23f84:	4620      	mov	r0, r4
   23f86:	f7ff ff69 	bl	23e5c <get_addresses>
	       (*count) + 1, context,
   23f8a:	682e      	ldr	r6, [r5, #0]
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23f8c:	3601      	adds	r6, #1
	return net_if_get_by_index(context->iface);
   23f8e:	f894 005c 	ldrb.w	r0, [r4, #92]	; 0x5c
   23f92:	f7f7 fd0b 	bl	1b9ac <net_if_get_by_index>
   23f96:	4603      	mov	r3, r0
	if (context->flags & NET_CONTEXT_FAMILY) {
   23f98:	f894 205d 	ldrb.w	r2, [r4, #93]	; 0x5d
   23f9c:	f012 0f10 	tst.w	r2, #16
   23fa0:	d022      	beq.n	23fe8 <context_cb+0x80>
		return AF_INET6;
   23fa2:	210a      	movs	r1, #10
   23fa4:	290a      	cmp	r1, #10
   23fa6:	d021      	beq.n	23fec <context_cb+0x84>
   23fa8:	2134      	movs	r1, #52	; 0x34
	if (context->flags & NET_CONTEXT_TYPE) {
   23faa:	f012 0f20 	tst.w	r2, #32
   23fae:	d01f      	beq.n	23ff0 <context_cb+0x88>
		return SOCK_STREAM;
   23fb0:	2001      	movs	r0, #1
   23fb2:	2802      	cmp	r0, #2
   23fb4:	d01e      	beq.n	23ff4 <context_cb+0x8c>
   23fb6:	2053      	movs	r0, #83	; 0x53
	if (context->flags & NET_CONTEXT_PROTO) {
   23fb8:	f012 0f40 	tst.w	r2, #64	; 0x40
   23fbc:	d01c      	beq.n	23ff8 <context_cb+0x90>
		return IPPROTO_TCP;
   23fbe:	2206      	movs	r2, #6
   23fc0:	2a11      	cmp	r2, #17
   23fc2:	d01b      	beq.n	23ffc <context_cb+0x94>
   23fc4:	2754      	movs	r7, #84	; 0x54
   23fc6:	aa06      	add	r2, sp, #24
   23fc8:	9204      	str	r2, [sp, #16]
   23fca:	aa12      	add	r2, sp, #72	; 0x48
   23fcc:	9203      	str	r2, [sp, #12]
   23fce:	9702      	str	r7, [sp, #8]
   23fd0:	9001      	str	r0, [sp, #4]
   23fd2:	9100      	str	r1, [sp, #0]
   23fd4:	4622      	mov	r2, r4
   23fd6:	4631      	mov	r1, r6
   23fd8:	4809      	ldr	r0, [pc, #36]	; (24000 <context_cb+0x98>)
   23fda:	f7de fb0b 	bl	25f4 <printk>
	(*count)++;
   23fde:	682b      	ldr	r3, [r5, #0]
   23fe0:	3301      	adds	r3, #1
   23fe2:	602b      	str	r3, [r5, #0]
}
   23fe4:	b01f      	add	sp, #124	; 0x7c
   23fe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
	return AF_INET;
   23fe8:	2102      	movs	r1, #2
   23fea:	e7db      	b.n	23fa4 <context_cb+0x3c>
	printk("[%2d] %p\t%p    %c%c%c   %16s\t%16s\n",
   23fec:	2136      	movs	r1, #54	; 0x36
   23fee:	e7dc      	b.n	23faa <context_cb+0x42>
	return SOCK_DGRAM;
   23ff0:	2002      	movs	r0, #2
   23ff2:	e7de      	b.n	23fb2 <context_cb+0x4a>
   23ff4:	2044      	movs	r0, #68	; 0x44
   23ff6:	e7df      	b.n	23fb8 <context_cb+0x50>
	return IPPROTO_UDP;
   23ff8:	2211      	movs	r2, #17
   23ffa:	e7e1      	b.n	23fc0 <context_cb+0x58>
   23ffc:	2755      	movs	r7, #85	; 0x55
   23ffe:	e7e2      	b.n	23fc6 <context_cb+0x5e>
   24000:	0002dbe8 	.word	0x0002dbe8

00024004 <net_shell_cmd_iface>:
{
   24004:	b508      	push	{r3, lr}
	net_if_foreach(iface_cb, NULL);
   24006:	2100      	movs	r1, #0
   24008:	4802      	ldr	r0, [pc, #8]	; (24014 <net_shell_cmd_iface+0x10>)
   2400a:	f7f7 fceb 	bl	1b9e4 <net_if_foreach>
}
   2400e:	2000      	movs	r0, #0
   24010:	bd08      	pop	{r3, pc}
   24012:	bf00      	nop
   24014:	0001ebb5 	.word	0x0001ebb5

00024018 <net_shell_cmd_route>:
{
   24018:	b508      	push	{r3, lr}
	net_if_foreach(iface_per_route_cb, NULL);
   2401a:	2100      	movs	r1, #0
   2401c:	4802      	ldr	r0, [pc, #8]	; (24028 <net_shell_cmd_route+0x10>)
   2401e:	f7f7 fce1 	bl	1b9e4 <net_if_foreach>
}
   24022:	2000      	movs	r0, #0
   24024:	bd08      	pop	{r3, pc}
   24026:	bf00      	nop
   24028:	00024455 	.word	0x00024455

0002402c <net_shell_cmd_mem>:
{
   2402c:	b500      	push	{lr}
   2402e:	b093      	sub	sp, #76	; 0x4c
	net_pkt_get_info(&rx, &tx, &rx_data, &tx_data);
   24030:	ab0e      	add	r3, sp, #56	; 0x38
   24032:	aa0f      	add	r2, sp, #60	; 0x3c
   24034:	a910      	add	r1, sp, #64	; 0x40
   24036:	a811      	add	r0, sp, #68	; 0x44
   24038:	f7f9 f9aa 	bl	1d390 <net_pkt_get_info>
	printk("Fragment length %d bytes\n", CONFIG_NET_BUF_DATA_SIZE);
   2403c:	f44f 7100 	mov.w	r1, #512	; 0x200
   24040:	4819      	ldr	r0, [pc, #100]	; (240a8 <net_shell_cmd_mem+0x7c>)
   24042:	f7de fad7 	bl	25f4 <printk>
	printk("Network buffer pools:\n");
   24046:	4819      	ldr	r0, [pc, #100]	; (240ac <net_shell_cmd_mem+0x80>)
   24048:	f7de fad4 	bl	25f4 <printk>
	printk("(CONFIG_NET_BUF_POOL_USAGE to see free #s)\n");
   2404c:	4818      	ldr	r0, [pc, #96]	; (240b0 <net_shell_cmd_mem+0x84>)
   2404e:	f7de fad1 	bl	25f4 <printk>
	printk("Address\t\tTotal\tName\n");
   24052:	4818      	ldr	r0, [pc, #96]	; (240b4 <net_shell_cmd_mem+0x88>)
   24054:	f7de face 	bl	25f4 <printk>
	printk("%p\t%d\tRX\n", rx, rx->num_blocks);
   24058:	9911      	ldr	r1, [sp, #68]	; 0x44
   2405a:	688a      	ldr	r2, [r1, #8]
   2405c:	4816      	ldr	r0, [pc, #88]	; (240b8 <net_shell_cmd_mem+0x8c>)
   2405e:	f7de fac9 	bl	25f4 <printk>
	printk("%p\t%d\tTX\n", tx, tx->num_blocks);
   24062:	9910      	ldr	r1, [sp, #64]	; 0x40
   24064:	688a      	ldr	r2, [r1, #8]
   24066:	4815      	ldr	r0, [pc, #84]	; (240bc <net_shell_cmd_mem+0x90>)
   24068:	f7de fac4 	bl	25f4 <printk>
	printk("%p\t%d\tRX DATA\n", rx_data, rx_data->buf_count);
   2406c:	990f      	ldr	r1, [sp, #60]	; 0x3c
   2406e:	8a0a      	ldrh	r2, [r1, #16]
   24070:	4813      	ldr	r0, [pc, #76]	; (240c0 <net_shell_cmd_mem+0x94>)
   24072:	f7de fabf 	bl	25f4 <printk>
	printk("%p\t%d\tTX DATA\n", tx_data, tx_data->buf_count);
   24076:	990e      	ldr	r1, [sp, #56]	; 0x38
   24078:	8a0a      	ldrh	r2, [r1, #16]
   2407a:	4812      	ldr	r0, [pc, #72]	; (240c4 <net_shell_cmd_mem+0x98>)
   2407c:	f7de faba 	bl	25f4 <printk>
		memset(&info, 0, sizeof(info));
   24080:	2238      	movs	r2, #56	; 0x38
   24082:	2100      	movs	r1, #0
   24084:	4668      	mov	r0, sp
   24086:	f005 fc87 	bl	29998 <memset>
		net_context_foreach(context_info, &info);
   2408a:	4669      	mov	r1, sp
   2408c:	480e      	ldr	r0, [pc, #56]	; (240c8 <net_shell_cmd_mem+0x9c>)
   2408e:	f7f8 fd8d 	bl	1cbac <net_context_foreach>
		if (!info.are_external_pools) {
   24092:	f89d 3004 	ldrb.w	r3, [sp, #4]
   24096:	b11b      	cbz	r3, 240a0 <net_shell_cmd_mem+0x74>
}
   24098:	2000      	movs	r0, #0
   2409a:	b013      	add	sp, #76	; 0x4c
   2409c:	f85d fb04 	ldr.w	pc, [sp], #4
			printk("No external memory pools found.\n");
   240a0:	480a      	ldr	r0, [pc, #40]	; (240cc <net_shell_cmd_mem+0xa0>)
   240a2:	f7de faa7 	bl	25f4 <printk>
   240a6:	e7f7      	b.n	24098 <net_shell_cmd_mem+0x6c>
   240a8:	0002e18c 	.word	0x0002e18c
   240ac:	0002e1a8 	.word	0x0002e1a8
   240b0:	0002e1c0 	.word	0x0002e1c0
   240b4:	0002e1ec 	.word	0x0002e1ec
   240b8:	0002e204 	.word	0x0002e204
   240bc:	0002e210 	.word	0x0002e210
   240c0:	0002e21c 	.word	0x0002e21c
   240c4:	0002e22c 	.word	0x0002e22c
   240c8:	00023a99 	.word	0x00023a99
   240cc:	0002e23c 	.word	0x0002e23c

000240d0 <net_shell_cmd_nbr>:
{
   240d0:	b510      	push	{r4, lr}
   240d2:	b086      	sub	sp, #24
	int count = 0;
   240d4:	2300      	movs	r3, #0
   240d6:	9305      	str	r3, [sp, #20]
	if (argv[arg]) {
   240d8:	6848      	ldr	r0, [r1, #4]
   240da:	b1d8      	cbz	r0, 24114 <net_shell_cmd_nbr+0x44>
   240dc:	460c      	mov	r4, r1
		if (strcmp(argv[arg], "rm")) {
   240de:	4920      	ldr	r1, [pc, #128]	; (24160 <net_shell_cmd_nbr+0x90>)
   240e0:	f7dc f992 	bl	408 <strcmp>
   240e4:	b9f8      	cbnz	r0, 24126 <net_shell_cmd_nbr+0x56>
		if (!argv[++arg]) {
   240e6:	68a1      	ldr	r1, [r4, #8]
   240e8:	b311      	cbz	r1, 24130 <net_shell_cmd_nbr+0x60>
		ret = net_addr_pton(AF_INET6, argv[arg], &addr);
   240ea:	aa01      	add	r2, sp, #4
   240ec:	200a      	movs	r0, #10
   240ee:	f7f9 fbc4 	bl	1d87a <net_addr_pton>
		if (ret < 0) {
   240f2:	2800      	cmp	r0, #0
   240f4:	db20      	blt.n	24138 <net_shell_cmd_nbr+0x68>
		if (!net_ipv6_nbr_rm(NULL, &addr)) {
   240f6:	a901      	add	r1, sp, #4
   240f8:	2000      	movs	r0, #0
   240fa:	f7fb f83f 	bl	1f17c <net_ipv6_nbr_rm>
   240fe:	bb00      	cbnz	r0, 24142 <net_shell_cmd_nbr+0x72>
   24100:	2328      	movs	r3, #40	; 0x28
   24102:	4a18      	ldr	r2, [pc, #96]	; (24164 <net_shell_cmd_nbr+0x94>)
   24104:	a901      	add	r1, sp, #4
   24106:	200a      	movs	r0, #10
   24108:	f7f9 fae0 	bl	1d6cc <net_addr_ntop>
			printk("Cannot remove neighbor %s\n",
   2410c:	4601      	mov	r1, r0
   2410e:	4816      	ldr	r0, [pc, #88]	; (24168 <net_shell_cmd_nbr+0x98>)
   24110:	f7de fa70 	bl	25f4 <printk>
	net_ipv6_nbr_foreach(nbr_cb, &count);
   24114:	a905      	add	r1, sp, #20
   24116:	4815      	ldr	r0, [pc, #84]	; (2416c <net_shell_cmd_nbr+0x9c>)
   24118:	f7fb f822 	bl	1f160 <net_ipv6_nbr_foreach>
	if (count == 0) {
   2411c:	9b05      	ldr	r3, [sp, #20]
   2411e:	b1db      	cbz	r3, 24158 <net_shell_cmd_nbr+0x88>
}
   24120:	2000      	movs	r0, #0
   24122:	b006      	add	sp, #24
   24124:	bd10      	pop	{r4, pc}
			printk("Unknown command '%s'\n", argv[arg]);
   24126:	6861      	ldr	r1, [r4, #4]
   24128:	4811      	ldr	r0, [pc, #68]	; (24170 <net_shell_cmd_nbr+0xa0>)
   2412a:	f7de fa63 	bl	25f4 <printk>
			return 0;
   2412e:	e7f7      	b.n	24120 <net_shell_cmd_nbr+0x50>
			printk("Neighbor IPv6 address missing.\n");
   24130:	4810      	ldr	r0, [pc, #64]	; (24174 <net_shell_cmd_nbr+0xa4>)
   24132:	f7de fa5f 	bl	25f4 <printk>
			return 0;
   24136:	e7f3      	b.n	24120 <net_shell_cmd_nbr+0x50>
			printk("Cannot parse '%s'\n", argv[arg]);
   24138:	68a1      	ldr	r1, [r4, #8]
   2413a:	480f      	ldr	r0, [pc, #60]	; (24178 <net_shell_cmd_nbr+0xa8>)
   2413c:	f7de fa5a 	bl	25f4 <printk>
			return 0;
   24140:	e7ee      	b.n	24120 <net_shell_cmd_nbr+0x50>
   24142:	2328      	movs	r3, #40	; 0x28
   24144:	4a07      	ldr	r2, [pc, #28]	; (24164 <net_shell_cmd_nbr+0x94>)
   24146:	a901      	add	r1, sp, #4
   24148:	200a      	movs	r0, #10
   2414a:	f7f9 fabf 	bl	1d6cc <net_addr_ntop>
			printk("Neighbor %s removed.\n",
   2414e:	4601      	mov	r1, r0
   24150:	480a      	ldr	r0, [pc, #40]	; (2417c <net_shell_cmd_nbr+0xac>)
   24152:	f7de fa4f 	bl	25f4 <printk>
   24156:	e7dd      	b.n	24114 <net_shell_cmd_nbr+0x44>
		printk("No neighbors.\n");
   24158:	4809      	ldr	r0, [pc, #36]	; (24180 <net_shell_cmd_nbr+0xb0>)
   2415a:	f7de fa4b 	bl	25f4 <printk>
   2415e:	e7df      	b.n	24120 <net_shell_cmd_nbr+0x50>
   24160:	0002e260 	.word	0x0002e260
   24164:	200024c0 	.word	0x200024c0
   24168:	0002e2b0 	.word	0x0002e2b0
   2416c:	00024229 	.word	0x00024229
   24170:	0002e264 	.word	0x0002e264
   24174:	0002e27c 	.word	0x0002e27c
   24178:	0002e29c 	.word	0x0002e29c
   2417c:	0002e2cc 	.word	0x0002e2cc
   24180:	0002e2e4 	.word	0x0002e2e4

00024184 <route_cb>:
{
   24184:	b538      	push	{r3, r4, r5, lr}
	if (entry->iface != iface) {
   24186:	68c3      	ldr	r3, [r0, #12]
   24188:	428b      	cmp	r3, r1
   2418a:	d000      	beq.n	2418e <route_cb+0xa>
   2418c:	bd38      	pop	{r3, r4, r5, pc}
   2418e:	4604      	mov	r4, r0
   24190:	2328      	movs	r3, #40	; 0x28
   24192:	4a1e      	ldr	r2, [pc, #120]	; (2420c <route_cb+0x88>)
   24194:	f100 0110 	add.w	r1, r0, #16
   24198:	200a      	movs	r0, #10
   2419a:	f7f9 fa97 	bl	1d6cc <net_addr_ntop>
	printk("IPv6 prefix : %s/%d\n",
   2419e:	f894 2020 	ldrb.w	r2, [r4, #32]
   241a2:	4601      	mov	r1, r0
   241a4:	481a      	ldr	r0, [pc, #104]	; (24210 <route_cb+0x8c>)
   241a6:	f7de fa25 	bl	25f4 <printk>
	return list->head;
   241aa:	6864      	ldr	r4, [r4, #4]
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241ac:	2500      	movs	r5, #0
   241ae:	e009      	b.n	241c4 <route_cb+0x40>
			printk("addr : <unknown>\n");
   241b0:	4818      	ldr	r0, [pc, #96]	; (24214 <route_cb+0x90>)
   241b2:	f7de fa1f 	bl	25f4 <printk>
		count++;
   241b6:	3501      	adds	r5, #1
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   241b8:	4622      	mov	r2, r4
   241ba:	b1dc      	cbz	r4, 241f4 <route_cb+0x70>
	return node->next;
   241bc:	6823      	ldr	r3, [r4, #0]
   241be:	b1db      	cbz	r3, 241f8 <route_cb+0x74>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241c0:	b1e2      	cbz	r2, 241fc <route_cb+0x78>
	return node->next;
   241c2:	6824      	ldr	r4, [r4, #0]
   241c4:	b1e4      	cbz	r4, 24200 <route_cb+0x7c>
		if (!nexthop_route->nbr) {
   241c6:	6861      	ldr	r1, [r4, #4]
   241c8:	2900      	cmp	r1, #0
   241ca:	d0f5      	beq.n	241b8 <route_cb+0x34>
		printk("\tneighbor : %p\t", nexthop_route->nbr);
   241cc:	4812      	ldr	r0, [pc, #72]	; (24218 <route_cb+0x94>)
   241ce:	f7de fa11 	bl	25f4 <printk>
		if (nexthop_route->nbr->idx == NET_NBR_LLADDR_UNKNOWN) {
   241d2:	6863      	ldr	r3, [r4, #4]
   241d4:	7858      	ldrb	r0, [r3, #1]
   241d6:	28ff      	cmp	r0, #255	; 0xff
   241d8:	d0ea      	beq.n	241b0 <route_cb+0x2c>
			lladdr = net_nbr_get_lladdr(nexthop_route->nbr->idx);
   241da:	f7fa fcc1 	bl	1eb60 <net_nbr_get_lladdr>
	return net_sprint_ll_addr_buf(ll, ll_len, (char *)buf, sizeof(buf));
   241de:	2318      	movs	r3, #24
   241e0:	4a0e      	ldr	r2, [pc, #56]	; (2421c <route_cb+0x98>)
   241e2:	7841      	ldrb	r1, [r0, #1]
   241e4:	3002      	adds	r0, #2
   241e6:	f7f9 fa47 	bl	1d678 <net_sprint_ll_addr_buf>
			printk("addr : %s\n",
   241ea:	4601      	mov	r1, r0
   241ec:	480c      	ldr	r0, [pc, #48]	; (24220 <route_cb+0x9c>)
   241ee:	f7de fa01 	bl	25f4 <printk>
   241f2:	e7e0      	b.n	241b6 <route_cb+0x32>
	return node ? sys_slist_peek_next_no_check(node) : NULL;
   241f4:	4623      	mov	r3, r4
   241f6:	e7e2      	b.n	241be <route_cb+0x3a>
	SYS_SLIST_FOR_EACH_CONTAINER(&entry->nexthop, nexthop_route, node) {
   241f8:	2400      	movs	r4, #0
   241fa:	e7e3      	b.n	241c4 <route_cb+0x40>
   241fc:	2400      	movs	r4, #0
   241fe:	e7e1      	b.n	241c4 <route_cb+0x40>
	if (count == 0) {
   24200:	2d00      	cmp	r5, #0
   24202:	d1c3      	bne.n	2418c <route_cb+0x8>
		printk("\t<none>\n");
   24204:	4807      	ldr	r0, [pc, #28]	; (24224 <route_cb+0xa0>)
   24206:	f7de f9f5 	bl	25f4 <printk>
   2420a:	e7bf      	b.n	2418c <route_cb+0x8>
   2420c:	200024c0 	.word	0x200024c0
   24210:	0002e82c 	.word	0x0002e82c
   24214:	0002e854 	.word	0x0002e854
   24218:	0002e844 	.word	0x0002e844
   2421c:	200024a8 	.word	0x200024a8
   24220:	0002e868 	.word	0x0002e868
   24224:	0002dd68 	.word	0x0002dd68

00024228 <nbr_cb>:
{
   24228:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2422c:	b08f      	sub	sp, #60	; 0x3c
   2422e:	4604      	mov	r4, r0
   24230:	460d      	mov	r5, r1
	if (*count == 0) {
   24232:	680b      	ldr	r3, [r1, #0]
   24234:	2b00      	cmp	r3, #0
   24236:	d052      	beq.n	242de <nbr_cb+0xb6>
	(*count)++;
   24238:	682b      	ldr	r3, [r5, #0]
   2423a:	3301      	adds	r3, #1
   2423c:	602b      	str	r3, [r5, #0]
   2423e:	68e3      	ldr	r3, [r4, #12]
	state_str = net_ipv6_nbr_state2str(net_ipv6_nbr_data(nbr)->state);
   24240:	f893 0064 	ldrb.w	r0, [r3, #100]	; 0x64
   24244:	f7fa ff68 	bl	1f118 <net_ipv6_nbr_state2str>
   24248:	900b      	str	r0, [sp, #44]	; 0x2c
	if (strlen(state_str) == 5) {
   2424a:	f7dc fa59 	bl	700 <strlen>
   2424e:	2805      	cmp	r0, #5
   24250:	d04a      	beq.n	242e8 <nbr_cb+0xc0>
	char *state_pad = "";
   24252:	f8df 90a8 	ldr.w	r9, [pc, #168]	; 242fc <nbr_cb+0xd4>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24256:	682b      	ldr	r3, [r5, #0]
   24258:	930c      	str	r3, [sp, #48]	; 0x30
   2425a:	68a3      	ldr	r3, [r4, #8]
   2425c:	930d      	str	r3, [sp, #52]	; 0x34
   2425e:	68e0      	ldr	r0, [r4, #12]
	       net_ipv6_nbr_data(nbr)->link_metric,
   24260:	f8b0 5066 	ldrh.w	r5, [r0, #102]	; 0x66
	       nbr->ref,
   24264:	7826      	ldrb	r6, [r4, #0]
	       net_ipv6_nbr_data(nbr)->ns_count,
   24266:	f890 7068 	ldrb.w	r7, [r0, #104]	; 0x68
	       net_ipv6_nbr_data(nbr)->is_router,
   2426a:	f890 8069 	ldrb.w	r8, [r0, #105]	; 0x69
	return _timeout_remaining_get(&work->timeout);
   2426e:	3020      	adds	r0, #32
   24270:	f005 f90a 	bl	29488 <_timeout_remaining_get>
   24274:	4682      	mov	sl, r0
	       nbr->idx == NET_NBR_LLADDR_UNKNOWN ? "?" :
   24276:	7860      	ldrb	r0, [r4, #1]
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   24278:	28ff      	cmp	r0, #255	; 0xff
   2427a:	d038      	beq.n	242ee <nbr_cb+0xc6>
		       net_nbr_get_lladdr(nbr->idx)->addr,
   2427c:	f7fa fc70 	bl	1eb60 <net_nbr_get_lladdr>
   24280:	f100 0b02 	add.w	fp, r0, #2
		       net_nbr_get_lladdr(nbr->idx)->len),
   24284:	7860      	ldrb	r0, [r4, #1]
   24286:	f7fa fc6b 	bl	1eb60 <net_nbr_get_lladdr>
   2428a:	2318      	movs	r3, #24
   2428c:	4a19      	ldr	r2, [pc, #100]	; (242f4 <nbr_cb+0xcc>)
   2428e:	7841      	ldrb	r1, [r0, #1]
   24290:	4658      	mov	r0, fp
   24292:	f7f9 f9f1 	bl	1d678 <net_sprint_ll_addr_buf>
   24296:	4683      	mov	fp, r0
	       net_nbr_get_lladdr(nbr->idx)->len == 8 ? "" : padding,
   24298:	7860      	ldrb	r0, [r4, #1]
   2429a:	f7fa fc61 	bl	1eb60 <net_nbr_get_lladdr>
   2429e:	68e1      	ldr	r1, [r4, #12]
	return net_addr_ntop(AF_INET6, addr, (char *)buf, sizeof(buf));
   242a0:	2328      	movs	r3, #40	; 0x28
   242a2:	4a15      	ldr	r2, [pc, #84]	; (242f8 <nbr_cb+0xd0>)
   242a4:	3104      	adds	r1, #4
   242a6:	200a      	movs	r0, #10
   242a8:	f7f9 fa10 	bl	1d6cc <net_addr_ntop>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   242ac:	9009      	str	r0, [sp, #36]	; 0x24
   242ae:	4b13      	ldr	r3, [pc, #76]	; (242fc <nbr_cb+0xd4>)
   242b0:	9308      	str	r3, [sp, #32]
   242b2:	f8cd b01c 	str.w	fp, [sp, #28]
   242b6:	f8cd a018 	str.w	sl, [sp, #24]
   242ba:	f8cd 9014 	str.w	r9, [sp, #20]
   242be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   242c0:	9304      	str	r3, [sp, #16]
   242c2:	f8cd 800c 	str.w	r8, [sp, #12]
   242c6:	9702      	str	r7, [sp, #8]
   242c8:	9601      	str	r6, [sp, #4]
   242ca:	9500      	str	r5, [sp, #0]
   242cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   242ce:	4622      	mov	r2, r4
   242d0:	990c      	ldr	r1, [sp, #48]	; 0x30
   242d2:	480b      	ldr	r0, [pc, #44]	; (24300 <nbr_cb+0xd8>)
   242d4:	f7de f98e 	bl	25f4 <printk>
}
   242d8:	b00f      	add	sp, #60	; 0x3c
   242da:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		printk("     Neighbor   Interface        Flags State     "
   242de:	4907      	ldr	r1, [pc, #28]	; (242fc <nbr_cb+0xd4>)
   242e0:	4808      	ldr	r0, [pc, #32]	; (24304 <nbr_cb+0xdc>)
   242e2:	f7de f987 	bl	25f4 <printk>
   242e6:	e7a7      	b.n	24238 <nbr_cb+0x10>
		state_pad = "    ";
   242e8:	f8df 901c 	ldr.w	r9, [pc, #28]	; 24308 <nbr_cb+0xe0>
   242ec:	e7b3      	b.n	24256 <nbr_cb+0x2e>
	printk("[%2d] %p %p %5d/%d/%d/%d %s%s %6d  %17s%s %s\n",
   242ee:	f8df b01c 	ldr.w	fp, [pc, #28]	; 2430c <nbr_cb+0xe4>
   242f2:	e7d1      	b.n	24298 <nbr_cb+0x70>
   242f4:	200024a8 	.word	0x200024a8
   242f8:	200024c0 	.word	0x200024c0
   242fc:	0002afec 	.word	0x0002afec
   24300:	0002df1c 	.word	0x0002df1c
   24304:	0002dec4 	.word	0x0002dec4
   24308:	0002deb8 	.word	0x0002deb8
   2430c:	0002dec0 	.word	0x0002dec0

00024310 <_ping_ipv6>:
{
   24310:	b570      	push	{r4, r5, r6, lr}
   24312:	b084      	sub	sp, #16
   24314:	4605      	mov	r5, r0
	struct net_if *iface = net_if_get_default();
   24316:	f7f6 fbb1 	bl	1aa7c <net_if_get_default>
   2431a:	4604      	mov	r4, r0
	if (net_addr_pton(AF_INET6, host, &ipv6_target) < 0) {
   2431c:	466a      	mov	r2, sp
   2431e:	4629      	mov	r1, r5
   24320:	200a      	movs	r0, #10
   24322:	f7f9 faaa 	bl	1d87a <net_addr_pton>
   24326:	2800      	cmp	r0, #0
   24328:	db26      	blt.n	24378 <_ping_ipv6+0x68>
	net_icmpv6_register_handler(&ping6_handler);
   2432a:	4815      	ldr	r0, [pc, #84]	; (24380 <_ping_ipv6+0x70>)
   2432c:	f7f9 fe0c 	bl	1df48 <net_icmpv6_register_handler>
	nbr = net_ipv6_nbr_lookup(NULL, &ipv6_target);
   24330:	4669      	mov	r1, sp
   24332:	2000      	movs	r0, #0
   24334:	f7fb fa4c 	bl	1f7d0 <net_ipv6_nbr_lookup>
	if (nbr) {
   24338:	b100      	cbz	r0, 2433c <_ping_ipv6+0x2c>
		iface = nbr->iface;
   2433a:	6884      	ldr	r4, [r0, #8]
	route = net_route_lookup(NULL, &ipv6_target);
   2433c:	4669      	mov	r1, sp
   2433e:	2000      	movs	r0, #0
   24340:	f7fd ffc4 	bl	222cc <net_route_lookup>
	if (route) {
   24344:	b100      	cbz	r0, 24348 <_ping_ipv6+0x38>
		iface = route->iface;
   24346:	68c4      	ldr	r4, [r0, #12]
					   sys_rand32_get(),
   24348:	f7dd f9ba 	bl	16c0 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   2434c:	b286      	uxth	r6, r0
					   sys_rand32_get());
   2434e:	f7dd f9b7 	bl	16c0 <sys_rand32_get>
	ret = net_icmpv6_send_echo_request(iface,
   24352:	b283      	uxth	r3, r0
   24354:	4632      	mov	r2, r6
   24356:	4669      	mov	r1, sp
   24358:	4620      	mov	r0, r4
   2435a:	f7fa fa8f 	bl	1e87c <net_icmpv6_send_echo_request>
	if (ret) {
   2435e:	4604      	mov	r4, r0
   24360:	b930      	cbnz	r0, 24370 <_ping_ipv6+0x60>
		printk("Sent a ping to %s\n", host);
   24362:	4629      	mov	r1, r5
   24364:	4807      	ldr	r0, [pc, #28]	; (24384 <_ping_ipv6+0x74>)
   24366:	f7de f945 	bl	25f4 <printk>
}
   2436a:	4620      	mov	r0, r4
   2436c:	b004      	add	sp, #16
   2436e:	bd70      	pop	{r4, r5, r6, pc}
	net_icmpv6_unregister_handler(&ping6_handler);
   24370:	4803      	ldr	r0, [pc, #12]	; (24380 <_ping_ipv6+0x70>)
   24372:	f7f9 fdf5 	bl	1df60 <net_icmpv6_unregister_handler>
   24376:	e7f8      	b.n	2436a <_ping_ipv6+0x5a>
		return -EINVAL;
   24378:	f06f 0415 	mvn.w	r4, #21
   2437c:	e7f5      	b.n	2436a <_ping_ipv6+0x5a>
   2437e:	bf00      	nop
   24380:	2000c53c 	.word	0x2000c53c
   24384:	0002dbd4 	.word	0x0002dbd4

00024388 <net_shell_cmd_ping>:
{
   24388:	b510      	push	{r4, lr}
   2438a:	460c      	mov	r4, r1
	if (!strcmp(argv[0], "ping")) {
   2438c:	4912      	ldr	r1, [pc, #72]	; (243d8 <net_shell_cmd_ping+0x50>)
   2438e:	6820      	ldr	r0, [r4, #0]
   24390:	f7dc f83a 	bl	408 <strcmp>
   24394:	b958      	cbnz	r0, 243ae <net_shell_cmd_ping+0x26>
		host = argv[1];
   24396:	6860      	ldr	r0, [r4, #4]
	ret = _ping_ipv6(host);
   24398:	f7ff ffba 	bl	24310 <_ping_ipv6>
	if (!ret) {
   2439c:	b168      	cbz	r0, 243ba <net_shell_cmd_ping+0x32>
	} else if (ret == -EIO) {
   2439e:	f110 0f05 	cmn.w	r0, #5
   243a2:	d006      	beq.n	243b2 <net_shell_cmd_ping+0x2a>
			printk("Invalid IP address\n");
   243a4:	480d      	ldr	r0, [pc, #52]	; (243dc <net_shell_cmd_ping+0x54>)
   243a6:	f7de f925 	bl	25f4 <printk>
}
   243aa:	2000      	movs	r0, #0
   243ac:	bd10      	pop	{r4, pc}
		host = argv[2];
   243ae:	68a0      	ldr	r0, [r4, #8]
   243b0:	e7f2      	b.n	24398 <net_shell_cmd_ping+0x10>
		printk("Cannot send IPv6 ping\n");
   243b2:	480b      	ldr	r0, [pc, #44]	; (243e0 <net_shell_cmd_ping+0x58>)
   243b4:	f7de f91e 	bl	25f4 <printk>
		return 0;
   243b8:	e7f7      	b.n	243aa <net_shell_cmd_ping+0x22>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   243ba:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   243be:	4809      	ldr	r0, [pc, #36]	; (243e4 <net_shell_cmd_ping+0x5c>)
   243c0:	f004 fb2a 	bl	28a18 <_impl_k_sem_take>
	if (ret == -EAGAIN) {
   243c4:	f110 0f0b 	cmn.w	r0, #11
   243c8:	d1ef      	bne.n	243aa <net_shell_cmd_ping+0x22>
		printk("Ping timeout\n");
   243ca:	4807      	ldr	r0, [pc, #28]	; (243e8 <net_shell_cmd_ping+0x60>)
   243cc:	f7de f912 	bl	25f4 <printk>
	net_icmpv6_unregister_handler(&ping6_handler);
   243d0:	4806      	ldr	r0, [pc, #24]	; (243ec <net_shell_cmd_ping+0x64>)
   243d2:	f7f9 fdc5 	bl	1df60 <net_icmpv6_unregister_handler>
   243d6:	e7e8      	b.n	243aa <net_shell_cmd_ping+0x22>
   243d8:	0002e2f4 	.word	0x0002e2f4
   243dc:	0002e314 	.word	0x0002e314
   243e0:	0002e2fc 	.word	0x0002e2fc
   243e4:	2000cc78 	.word	0x2000cc78
   243e8:	0002e328 	.word	0x0002e328
   243ec:	2000c53c 	.word	0x2000c53c

000243f0 <_handle_ipv6_echo_reply>:
{
   243f0:	b530      	push	{r4, r5, lr}
   243f2:	b08b      	sub	sp, #44	; 0x2c
   243f4:	4605      	mov	r5, r0
	return pkt->frags->data;
   243f6:	6883      	ldr	r3, [r0, #8]
   243f8:	6899      	ldr	r1, [r3, #8]
   243fa:	4c11      	ldr	r4, [pc, #68]	; (24440 <_handle_ipv6_echo_reply+0x50>)
   243fc:	2328      	movs	r3, #40	; 0x28
   243fe:	4622      	mov	r2, r4
   24400:	3118      	adds	r1, #24
   24402:	200a      	movs	r0, #10
   24404:	f7f9 f962 	bl	1d6cc <net_addr_ntop>
	snprintk(addr, sizeof(addr), "%s",
   24408:	4603      	mov	r3, r0
   2440a:	4a0e      	ldr	r2, [pc, #56]	; (24444 <_handle_ipv6_echo_reply+0x54>)
   2440c:	2128      	movs	r1, #40	; 0x28
   2440e:	4668      	mov	r0, sp
   24410:	f7de f8fe 	bl	2610 <snprintk>
   24414:	68ab      	ldr	r3, [r5, #8]
   24416:	6899      	ldr	r1, [r3, #8]
   24418:	2328      	movs	r3, #40	; 0x28
   2441a:	4622      	mov	r2, r4
   2441c:	3108      	adds	r1, #8
   2441e:	200a      	movs	r0, #10
   24420:	f7f9 f954 	bl	1d6cc <net_addr_ntop>
	printk("Received echo reply from %s to %s\n",
   24424:	466a      	mov	r2, sp
   24426:	4601      	mov	r1, r0
   24428:	4807      	ldr	r0, [pc, #28]	; (24448 <_handle_ipv6_echo_reply+0x58>)
   2442a:	f7de f8e3 	bl	25f4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_SEM_GIVE, k_sem_give, struct k_sem *, sem);
   2442e:	4807      	ldr	r0, [pc, #28]	; (2444c <_handle_ipv6_echo_reply+0x5c>)
   24430:	f004 fadf 	bl	289f2 <_impl_k_sem_give>
	net_icmpv6_unregister_handler(&ping6_handler);
   24434:	4806      	ldr	r0, [pc, #24]	; (24450 <_handle_ipv6_echo_reply+0x60>)
   24436:	f7f9 fd93 	bl	1df60 <net_icmpv6_unregister_handler>
}
   2443a:	2000      	movs	r0, #0
   2443c:	b00b      	add	sp, #44	; 0x2c
   2443e:	bd30      	pop	{r4, r5, pc}
   24440:	200024c0 	.word	0x200024c0
   24444:	0002a6f4 	.word	0x0002a6f4
   24448:	0002dbb0 	.word	0x0002dbb0
   2444c:	2000cc78 	.word	0x2000cc78
   24450:	2000c53c 	.word	0x2000c53c

00024454 <iface_per_route_cb>:
{
   24454:	b510      	push	{r4, lr}
   24456:	b082      	sub	sp, #8
   24458:	4604      	mov	r4, r0
	printk("\nIPv6 routes for interface %p (%s)\n", iface,
   2445a:	a901      	add	r1, sp, #4
   2445c:	f7ff faba 	bl	239d4 <iface2str>
   24460:	4602      	mov	r2, r0
   24462:	4621      	mov	r1, r4
   24464:	4806      	ldr	r0, [pc, #24]	; (24480 <iface_per_route_cb+0x2c>)
   24466:	f7de f8c5 	bl	25f4 <printk>
	printk("=======================================%s\n", extra);
   2446a:	9901      	ldr	r1, [sp, #4]
   2446c:	4805      	ldr	r0, [pc, #20]	; (24484 <iface_per_route_cb+0x30>)
   2446e:	f7de f8c1 	bl	25f4 <printk>
	net_route_foreach(route_cb, iface);
   24472:	4621      	mov	r1, r4
   24474:	4804      	ldr	r0, [pc, #16]	; (24488 <iface_per_route_cb+0x34>)
   24476:	f7fe f829 	bl	224cc <net_route_foreach>
}
   2447a:	b002      	add	sp, #8
   2447c:	bd10      	pop	{r4, pc}
   2447e:	bf00      	nop
   24480:	0002de68 	.word	0x0002de68
   24484:	0002de8c 	.word	0x0002de8c
   24488:	00024185 	.word	0x00024185

0002448c <tcp_connected>:
{
   2448c:	b510      	push	{r4, lr}
	if (status < 0) {
   2448e:	2900      	cmp	r1, #0
   24490:	db03      	blt.n	2449a <tcp_connected+0xe>
		printk("TCP connected\n");
   24492:	4807      	ldr	r0, [pc, #28]	; (244b0 <tcp_connected+0x24>)
   24494:	f7de f8ae 	bl	25f4 <printk>
   24498:	bd10      	pop	{r4, pc}
   2449a:	4604      	mov	r4, r0
		printk("TCP connection failed (%d)\n", status);
   2449c:	4805      	ldr	r0, [pc, #20]	; (244b4 <tcp_connected+0x28>)
   2449e:	f7de f8a9 	bl	25f4 <printk>
		net_context_put(context);
   244a2:	4620      	mov	r0, r4
   244a4:	f7f8 f834 	bl	1c510 <net_context_put>
		tcp_ctx = NULL;
   244a8:	2200      	movs	r2, #0
   244aa:	4b03      	ldr	r3, [pc, #12]	; (244b8 <tcp_connected+0x2c>)
   244ac:	601a      	str	r2, [r3, #0]
   244ae:	bd10      	pop	{r4, pc}
   244b0:	0002e908 	.word	0x0002e908
   244b4:	0002e8ec 	.word	0x0002e8ec
   244b8:	200024e8 	.word	0x200024e8

000244bc <get_my_ipv6_addr>:
{
   244bc:	b538      	push	{r3, r4, r5, lr}
   244be:	460c      	mov	r4, r1
	my6addr = net_if_ipv6_select_src_addr(iface,
   244c0:	1d0d      	adds	r5, r1, #4
   244c2:	4629      	mov	r1, r5
   244c4:	f7f7 f81e 	bl	1b504 <net_if_ipv6_select_src_addr>
	memcpy(&net_sin6(myaddr)->sin6_addr, my6addr, sizeof(struct in6_addr));
   244c8:	2210      	movs	r2, #16
   244ca:	4601      	mov	r1, r0
   244cc:	4628      	mov	r0, r5
   244ce:	f7db fef7 	bl	2c0 <memcpy>
	net_sin6(myaddr)->sin6_port = 0; /* let the IP stack to select */
   244d2:	2300      	movs	r3, #0
   244d4:	8063      	strh	r3, [r4, #2]
   244d6:	bd38      	pop	{r3, r4, r5, pc}

000244d8 <tcp_connect>:
{
   244d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   244da:	b08f      	sub	sp, #60	; 0x3c
   244dc:	4607      	mov	r7, r0
   244de:	460c      	mov	r4, r1
   244e0:	4615      	mov	r5, r2
	struct net_if *iface = net_if_get_default();
   244e2:	f7f6 facb 	bl	1aa7c <net_if_get_default>
   244e6:	4606      	mov	r6, r0
	ret = net_addr_pton(AF_INET6, host, &net_sin6(&addr)->sin6_addr);
   244e8:	aa09      	add	r2, sp, #36	; 0x24
   244ea:	4639      	mov	r1, r7
   244ec:	200a      	movs	r0, #10
   244ee:	f7f9 f9c4 	bl	1d87a <net_addr_pton>
	if (ret < 0) {
   244f2:	2800      	cmp	r0, #0
   244f4:	db34      	blt.n	24560 <tcp_connect+0x88>
	net_sin6(&addr)->sin6_port = htons(port);
   244f6:	0a21      	lsrs	r1, r4, #8
   244f8:	ea41 2104 	orr.w	r1, r1, r4, lsl #8
   244fc:	f8ad 1022 	strh.w	r1, [sp, #34]	; 0x22
	nbr = net_ipv6_nbr_lookup(NULL, &net_sin6(&addr)->sin6_addr);
   24500:	a909      	add	r1, sp, #36	; 0x24
   24502:	2000      	movs	r0, #0
   24504:	f7fb f964 	bl	1f7d0 <net_ipv6_nbr_lookup>
	if (nbr) {
   24508:	b100      	cbz	r0, 2450c <tcp_connect+0x34>
		iface = nbr->iface;
   2450a:	6886      	ldr	r6, [r0, #8]
	get_my_ipv6_addr(iface, &myaddr);
   2450c:	a902      	add	r1, sp, #8
   2450e:	4630      	mov	r0, r6
   24510:	f7ff ffd4 	bl	244bc <get_my_ipv6_addr>
	family = addr.sa_family = myaddr.sa_family = AF_INET6;
   24514:	240a      	movs	r4, #10
   24516:	f8ad 4008 	strh.w	r4, [sp, #8]
   2451a:	aa0e      	add	r2, sp, #56	; 0x38
   2451c:	f822 4d18 	strh.w	r4, [r2, #-24]!
	print_connect_info(family, &myaddr, &addr);
   24520:	a902      	add	r1, sp, #8
   24522:	4620      	mov	r0, r4
   24524:	f7ff fce6 	bl	23ef4 <print_connect_info>
	ret = net_context_get(family, SOCK_STREAM, IPPROTO_TCP, ctx);
   24528:	462b      	mov	r3, r5
   2452a:	2206      	movs	r2, #6
   2452c:	2101      	movs	r1, #1
   2452e:	4620      	mov	r0, r4
   24530:	f7f7 fd82 	bl	1c038 <net_context_get>
	if (ret < 0) {
   24534:	1e04      	subs	r4, r0, #0
   24536:	db18      	blt.n	2456a <tcp_connect+0x92>
	ret = net_context_bind(*ctx, &myaddr, addrlen);
   24538:	2218      	movs	r2, #24
   2453a:	a902      	add	r1, sp, #8
   2453c:	6828      	ldr	r0, [r5, #0]
   2453e:	f7f8 f829 	bl	1c594 <net_context_bind>
	if (ret < 0) {
   24542:	1e04      	subs	r4, r0, #0
   24544:	db16      	blt.n	24574 <tcp_connect+0x9c>
	return net_context_connect(*ctx, &addr, addrlen, tcp_connected,
   24546:	6828      	ldr	r0, [r5, #0]
   24548:	2300      	movs	r3, #0
   2454a:	9301      	str	r3, [sp, #4]
   2454c:	9300      	str	r3, [sp, #0]
   2454e:	4b0c      	ldr	r3, [pc, #48]	; (24580 <tcp_connect+0xa8>)
   24550:	2218      	movs	r2, #24
   24552:	a908      	add	r1, sp, #32
   24554:	f7f8 f9b0 	bl	1c8b8 <net_context_connect>
   24558:	4604      	mov	r4, r0
}
   2455a:	4620      	mov	r0, r4
   2455c:	b00f      	add	sp, #60	; 0x3c
   2455e:	bdf0      	pop	{r4, r5, r6, r7, pc}
		printk("Invalid IPv6 address\n");
   24560:	4808      	ldr	r0, [pc, #32]	; (24584 <tcp_connect+0xac>)
   24562:	f7de f847 	bl	25f4 <printk>
		return 0;
   24566:	2400      	movs	r4, #0
   24568:	e7f7      	b.n	2455a <tcp_connect+0x82>
		printk("Cannot get TCP context (%d)\n", ret);
   2456a:	4621      	mov	r1, r4
   2456c:	4806      	ldr	r0, [pc, #24]	; (24588 <tcp_connect+0xb0>)
   2456e:	f7de f841 	bl	25f4 <printk>
		return ret;
   24572:	e7f2      	b.n	2455a <tcp_connect+0x82>
		printk("Cannot bind TCP (%d)\n", ret);
   24574:	4621      	mov	r1, r4
   24576:	4805      	ldr	r0, [pc, #20]	; (2458c <tcp_connect+0xb4>)
   24578:	f7de f83c 	bl	25f4 <printk>
		return ret;
   2457c:	e7ed      	b.n	2455a <tcp_connect+0x82>
   2457e:	bf00      	nop
   24580:	0002448d 	.word	0x0002448d
   24584:	0002e89c 	.word	0x0002e89c
   24588:	0002e8b4 	.word	0x0002e8b4
   2458c:	0002e8d4 	.word	0x0002e8d4

00024590 <net_shell_cmd_tcp>:
}
#endif

int net_shell_cmd_tcp(int argc, char *argv[])
{
   24590:	b5f0      	push	{r4, r5, r6, r7, lr}
   24592:	b083      	sub	sp, #12
#if defined(CONFIG_NET_TCP)
	int arg = 1;
	int ret;

	if (argv[arg]) {
   24594:	6848      	ldr	r0, [r1, #4]
   24596:	2800      	cmp	r0, #0
   24598:	f000 8099 	beq.w	246ce <net_shell_cmd_tcp+0x13e>
   2459c:	460c      	mov	r4, r1
		if (!strcmp(argv[arg], "connect")) {
   2459e:	4954      	ldr	r1, [pc, #336]	; (246f0 <net_shell_cmd_tcp+0x160>)
   245a0:	f7db ff32 	bl	408 <strcmp>
   245a4:	4605      	mov	r5, r0
   245a6:	bb20      	cbnz	r0, 245f2 <net_shell_cmd_tcp+0x62>
			/* tcp connect <ip> port */
			char *ip;
			u16_t port;

			if (tcp_ctx && net_context_is_used(tcp_ctx)) {
   245a8:	4b52      	ldr	r3, [pc, #328]	; (246f4 <net_shell_cmd_tcp+0x164>)
   245aa:	681b      	ldr	r3, [r3, #0]
   245ac:	b123      	cbz	r3, 245b8 <net_shell_cmd_tcp+0x28>
	return context->flags & NET_CONTEXT_IN_USE;
   245ae:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
   245b2:	f013 0f01 	tst.w	r3, #1
   245b6:	d110      	bne.n	245da <net_shell_cmd_tcp+0x4a>
				printk("Already connected\n");
				return 0;
			}

			if (!argv[++arg]) {
   245b8:	68a6      	ldr	r6, [r4, #8]
   245ba:	b196      	cbz	r6, 245e2 <net_shell_cmd_tcp+0x52>
				return 0;
			}

			ip = argv[arg];

			if (!argv[++arg]) {
   245bc:	68e0      	ldr	r0, [r4, #12]
   245be:	b1a0      	cbz	r0, 245ea <net_shell_cmd_tcp+0x5a>
				printk("Peer port missing.\n");
				return 0;
			}

			port = strtol(argv[arg], NULL, 10);
   245c0:	220a      	movs	r2, #10
   245c2:	2100      	movs	r1, #0
   245c4:	f005 fed6 	bl	2a374 <strtol>

			return tcp_connect(ip, port, &tcp_ctx);
   245c8:	4a4a      	ldr	r2, [pc, #296]	; (246f4 <net_shell_cmd_tcp+0x164>)
   245ca:	b281      	uxth	r1, r0
   245cc:	4630      	mov	r0, r6
   245ce:	f7ff ff83 	bl	244d8 <tcp_connect>
   245d2:	4605      	mov	r5, r0
#else
	printk("TCP not enabled.\n");
#endif /* CONFIG_NET_TCP */

	return 0;
}
   245d4:	4628      	mov	r0, r5
   245d6:	b003      	add	sp, #12
   245d8:	bdf0      	pop	{r4, r5, r6, r7, pc}
				printk("Already connected\n");
   245da:	4847      	ldr	r0, [pc, #284]	; (246f8 <net_shell_cmd_tcp+0x168>)
   245dc:	f7de f80a 	bl	25f4 <printk>
				return 0;
   245e0:	e7f8      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Peer IP address missing.\n");
   245e2:	4846      	ldr	r0, [pc, #280]	; (246fc <net_shell_cmd_tcp+0x16c>)
   245e4:	f7de f806 	bl	25f4 <printk>
				return 0;
   245e8:	e7f4      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Peer port missing.\n");
   245ea:	4845      	ldr	r0, [pc, #276]	; (24700 <net_shell_cmd_tcp+0x170>)
   245ec:	f7de f802 	bl	25f4 <printk>
				return 0;
   245f0:	e7f0      	b.n	245d4 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "send")) {
   245f2:	4944      	ldr	r1, [pc, #272]	; (24704 <net_shell_cmd_tcp+0x174>)
   245f4:	6860      	ldr	r0, [r4, #4]
   245f6:	f7db ff07 	bl	408 <strcmp>
   245fa:	4605      	mov	r5, r0
   245fc:	2800      	cmp	r0, #0
   245fe:	d140      	bne.n	24682 <net_shell_cmd_tcp+0xf2>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   24600:	4b3c      	ldr	r3, [pc, #240]	; (246f4 <net_shell_cmd_tcp+0x164>)
   24602:	6818      	ldr	r0, [r3, #0]
   24604:	b300      	cbz	r0, 24648 <net_shell_cmd_tcp+0xb8>
   24606:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   2460a:	f013 0f01 	tst.w	r3, #1
   2460e:	d01b      	beq.n	24648 <net_shell_cmd_tcp+0xb8>
			if (!argv[++arg]) {
   24610:	68a3      	ldr	r3, [r4, #8]
   24612:	b1eb      	cbz	r3, 24650 <net_shell_cmd_tcp+0xc0>
			pkt = net_pkt_get_tx(tcp_ctx, TCP_TIMEOUT);
   24614:	f44f 61fa 	mov.w	r1, #2000	; 0x7d0
   24618:	f7f8 fbdc 	bl	1cdd4 <net_pkt_get_tx>
			if (!pkt) {
   2461c:	4606      	mov	r6, r0
   2461e:	b1d8      	cbz	r0, 24658 <net_shell_cmd_tcp+0xc8>
			ret = net_pkt_append_all(pkt, strlen(argv[arg]),
   24620:	68a0      	ldr	r0, [r4, #8]
   24622:	f7dc f86d 	bl	700 <strlen>
   24626:	b287      	uxth	r7, r0
	return net_pkt_append(pkt, len, data, timeout) == len;
   24628:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
   2462c:	68a2      	ldr	r2, [r4, #8]
   2462e:	4639      	mov	r1, r7
   24630:	4630      	mov	r0, r6
   24632:	f7f8 fd3a 	bl	1d0aa <net_pkt_append>
			if (!ret) {
   24636:	4287      	cmp	r7, r0
   24638:	d012      	beq.n	24660 <net_shell_cmd_tcp+0xd0>
				printk("Cannot build msg (out of pkts)\n");
   2463a:	4833      	ldr	r0, [pc, #204]	; (24708 <net_shell_cmd_tcp+0x178>)
   2463c:	f7dd ffda 	bl	25f4 <printk>
				net_pkt_unref(pkt);
   24640:	4630      	mov	r0, r6
   24642:	f7f8 fbfa 	bl	1ce3a <net_pkt_unref>
				return 0;
   24646:	e7c5      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Not connected\n");
   24648:	4830      	ldr	r0, [pc, #192]	; (2470c <net_shell_cmd_tcp+0x17c>)
   2464a:	f7dd ffd3 	bl	25f4 <printk>
				return 0;
   2464e:	e7c1      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("No data to send.\n");
   24650:	482f      	ldr	r0, [pc, #188]	; (24710 <net_shell_cmd_tcp+0x180>)
   24652:	f7dd ffcf 	bl	25f4 <printk>
				return 0;
   24656:	e7bd      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Out of pkts, msg cannot be sent.\n");
   24658:	482e      	ldr	r0, [pc, #184]	; (24714 <net_shell_cmd_tcp+0x184>)
   2465a:	f7dd ffcb 	bl	25f4 <printk>
				return 0;
   2465e:	e7b9      	b.n	245d4 <net_shell_cmd_tcp+0x44>
			ret = net_context_send(pkt, tcp_sent_cb, TCP_TIMEOUT,
   24660:	2300      	movs	r3, #0
   24662:	9300      	str	r3, [sp, #0]
   24664:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   24668:	492b      	ldr	r1, [pc, #172]	; (24718 <net_shell_cmd_tcp+0x188>)
   2466a:	4630      	mov	r0, r6
   2466c:	f7f8 fa12 	bl	1ca94 <net_context_send>
			if (ret < 0) {
   24670:	1e01      	subs	r1, r0, #0
   24672:	daaf      	bge.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Cannot send msg (%d)\n", ret);
   24674:	4829      	ldr	r0, [pc, #164]	; (2471c <net_shell_cmd_tcp+0x18c>)
   24676:	f7dd ffbd 	bl	25f4 <printk>
				net_pkt_unref(pkt);
   2467a:	4630      	mov	r0, r6
   2467c:	f7f8 fbdd 	bl	1ce3a <net_pkt_unref>
				return 0;
   24680:	e7a8      	b.n	245d4 <net_shell_cmd_tcp+0x44>
		if (!strcmp(argv[arg], "close")) {
   24682:	4927      	ldr	r1, [pc, #156]	; (24720 <net_shell_cmd_tcp+0x190>)
   24684:	6860      	ldr	r0, [r4, #4]
   24686:	f7db febf 	bl	408 <strcmp>
   2468a:	4605      	mov	r5, r0
   2468c:	b9d0      	cbnz	r0, 246c4 <net_shell_cmd_tcp+0x134>
			if (!tcp_ctx || !net_context_is_used(tcp_ctx)) {
   2468e:	4b19      	ldr	r3, [pc, #100]	; (246f4 <net_shell_cmd_tcp+0x164>)
   24690:	6818      	ldr	r0, [r3, #0]
   24692:	b120      	cbz	r0, 2469e <net_shell_cmd_tcp+0x10e>
   24694:	f890 305d 	ldrb.w	r3, [r0, #93]	; 0x5d
   24698:	f013 0f01 	tst.w	r3, #1
   2469c:	d103      	bne.n	246a6 <net_shell_cmd_tcp+0x116>
				printk("Not connected\n");
   2469e:	481b      	ldr	r0, [pc, #108]	; (2470c <net_shell_cmd_tcp+0x17c>)
   246a0:	f7dd ffa8 	bl	25f4 <printk>
				return 0;
   246a4:	e796      	b.n	245d4 <net_shell_cmd_tcp+0x44>
			ret = net_context_put(tcp_ctx);
   246a6:	f7f7 ff33 	bl	1c510 <net_context_put>
			if (ret < 0) {
   246aa:	1e01      	subs	r1, r0, #0
   246ac:	db06      	blt.n	246bc <net_shell_cmd_tcp+0x12c>
			printk("Connection closed.\n");
   246ae:	481d      	ldr	r0, [pc, #116]	; (24724 <net_shell_cmd_tcp+0x194>)
   246b0:	f7dd ffa0 	bl	25f4 <printk>
			tcp_ctx = NULL;
   246b4:	2200      	movs	r2, #0
   246b6:	4b0f      	ldr	r3, [pc, #60]	; (246f4 <net_shell_cmd_tcp+0x164>)
   246b8:	601a      	str	r2, [r3, #0]
			return 0;
   246ba:	e78b      	b.n	245d4 <net_shell_cmd_tcp+0x44>
				printk("Cannot close the connection (%d)\n",
   246bc:	481a      	ldr	r0, [pc, #104]	; (24728 <net_shell_cmd_tcp+0x198>)
   246be:	f7dd ff99 	bl	25f4 <printk>
				return 0;
   246c2:	e787      	b.n	245d4 <net_shell_cmd_tcp+0x44>
		printk("Unknown command '%s'\n", argv[arg]);
   246c4:	6861      	ldr	r1, [r4, #4]
   246c6:	4819      	ldr	r0, [pc, #100]	; (2472c <net_shell_cmd_tcp+0x19c>)
   246c8:	f7dd ff94 	bl	25f4 <printk>
		goto usage;
   246cc:	e002      	b.n	246d4 <net_shell_cmd_tcp+0x144>
		printk("Invalid command.\n");
   246ce:	4818      	ldr	r0, [pc, #96]	; (24730 <net_shell_cmd_tcp+0x1a0>)
   246d0:	f7dd ff90 	bl	25f4 <printk>
		printk("Usage:\n");
   246d4:	4817      	ldr	r0, [pc, #92]	; (24734 <net_shell_cmd_tcp+0x1a4>)
   246d6:	f7dd ff8d 	bl	25f4 <printk>
		printk("\ttcp connect <ipaddr> port\n");
   246da:	4817      	ldr	r0, [pc, #92]	; (24738 <net_shell_cmd_tcp+0x1a8>)
   246dc:	f7dd ff8a 	bl	25f4 <printk>
		printk("\ttcp send <data>\n");
   246e0:	4816      	ldr	r0, [pc, #88]	; (2473c <net_shell_cmd_tcp+0x1ac>)
   246e2:	f7dd ff87 	bl	25f4 <printk>
		printk("\ttcp close\n");
   246e6:	4816      	ldr	r0, [pc, #88]	; (24740 <net_shell_cmd_tcp+0x1b0>)
   246e8:	f7dd ff84 	bl	25f4 <printk>
	return 0;
   246ec:	2500      	movs	r5, #0
   246ee:	e771      	b.n	245d4 <net_shell_cmd_tcp+0x44>
   246f0:	0002a8a0 	.word	0x0002a8a0
   246f4:	200024e8 	.word	0x200024e8
   246f8:	0002e66c 	.word	0x0002e66c
   246fc:	0002e680 	.word	0x0002e680
   24700:	0002e69c 	.word	0x0002e69c
   24704:	0002e6b0 	.word	0x0002e6b0
   24708:	0002e700 	.word	0x0002e700
   2470c:	0002e6b8 	.word	0x0002e6b8
   24710:	0002e6c8 	.word	0x0002e6c8
   24714:	0002e6dc 	.word	0x0002e6dc
   24718:	00023d7d 	.word	0x00023d7d
   2471c:	0002e720 	.word	0x0002e720
   24720:	0002e738 	.word	0x0002e738
   24724:	0002e764 	.word	0x0002e764
   24728:	0002e740 	.word	0x0002e740
   2472c:	0002e264 	.word	0x0002e264
   24730:	0002e778 	.word	0x0002e778
   24734:	0002e78c 	.word	0x0002e78c
   24738:	0002e794 	.word	0x0002e794
   2473c:	0002e7b0 	.word	0x0002e7b0
   24740:	0002e7c4 	.word	0x0002e7c4

00024744 <find_conn_handler>:
static int find_conn_handler(enum net_ip_protocol proto,
			     const struct sockaddr *remote_addr,
			     const struct sockaddr *local_addr,
			     u16_t remote_port,
			     u16_t local_port)
{
   24744:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   24748:	4605      	mov	r5, r0
   2474a:	460e      	mov	r6, r1
   2474c:	4617      	mov	r7, r2
   2474e:	4699      	mov	r9, r3
   24750:	f8bd 8020 	ldrh.w	r8, [sp, #32]
	int i;

	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24754:	2400      	movs	r4, #0
   24756:	e012      	b.n	2477e <find_conn_handler+0x3a>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24758:	f013 0f02 	tst.w	r3, #2
   2475c:	d10e      	bne.n	2477c <find_conn_handler+0x38>
				continue;
			}
		}

		if (local_addr) {
   2475e:	2f00      	cmp	r7, #0
   24760:	d051      	beq.n	24806 <find_conn_handler+0xc2>
			if (!(conns[i].flags & NET_CONN_LOCAL_ADDR_SET)) {
   24762:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24766:	009a      	lsls	r2, r3, #2
   24768:	4b3c      	ldr	r3, [pc, #240]	; (2485c <find_conn_handler+0x118>)
   2476a:	4413      	add	r3, r2
   2476c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24770:	f013 0f04 	tst.w	r3, #4
   24774:	d002      	beq.n	2477c <find_conn_handler+0x38>
				continue;
			}

#if defined(CONFIG_NET_IPV6)
			if (local_addr->sa_family == AF_INET6 &&
   24776:	883b      	ldrh	r3, [r7, #0]
   24778:	2b0a      	cmp	r3, #10
   2477a:	d030      	beq.n	247de <find_conn_handler+0x9a>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2477c:	3401      	adds	r4, #1
   2477e:	2c03      	cmp	r4, #3
   24780:	dc67      	bgt.n	24852 <find_conn_handler+0x10e>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   24782:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24786:	009a      	lsls	r2, r3, #2
   24788:	4b34      	ldr	r3, [pc, #208]	; (2485c <find_conn_handler+0x118>)
   2478a:	4413      	add	r3, r2
   2478c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24790:	f013 0f01 	tst.w	r3, #1
   24794:	d0f2      	beq.n	2477c <find_conn_handler+0x38>
		if (conns[i].proto != proto) {
   24796:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   2479a:	0091      	lsls	r1, r2, #2
   2479c:	4a2f      	ldr	r2, [pc, #188]	; (2485c <find_conn_handler+0x118>)
   2479e:	440a      	add	r2, r1
   247a0:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   247a4:	42aa      	cmp	r2, r5
   247a6:	d1e9      	bne.n	2477c <find_conn_handler+0x38>
		if (remote_addr) {
   247a8:	2e00      	cmp	r6, #0
   247aa:	d0d5      	beq.n	24758 <find_conn_handler+0x14>
			if (!(conns[i].flags & NET_CONN_REMOTE_ADDR_SET)) {
   247ac:	f013 0f02 	tst.w	r3, #2
   247b0:	d0e4      	beq.n	2477c <find_conn_handler+0x38>
			if (remote_addr->sa_family == AF_INET6 &&
   247b2:	8833      	ldrh	r3, [r6, #0]
   247b4:	2b0a      	cmp	r3, #10
   247b6:	d1e1      	bne.n	2477c <find_conn_handler+0x38>
			    conns[i].remote_addr.sa_family) {
   247b8:	ebc4 1104 	rsb	r1, r4, r4, lsl #4
   247bc:	008a      	lsls	r2, r1, #2
   247be:	4927      	ldr	r1, [pc, #156]	; (2485c <find_conn_handler+0x118>)
   247c0:	5a8a      	ldrh	r2, [r1, r2]
			if (remote_addr->sa_family == AF_INET6 &&
   247c2:	4293      	cmp	r3, r2
   247c4:	d1da      	bne.n	2477c <find_conn_handler+0x38>
					    &net_sin6(&conns[i].remote_addr)->
   247c6:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   247ca:	0093      	lsls	r3, r2, #2
   247cc:	4419      	add	r1, r3
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   247ce:	2210      	movs	r2, #16
   247d0:	3104      	adds	r1, #4
   247d2:	1d30      	adds	r0, r6, #4
   247d4:	f005 f84c 	bl	29870 <memcmp>
				if (!net_ipv6_addr_cmp(
   247d8:	2800      	cmp	r0, #0
   247da:	d1cf      	bne.n	2477c <find_conn_handler+0x38>
   247dc:	e7bf      	b.n	2475e <find_conn_handler+0x1a>
			    local_addr->sa_family ==
			    conns[i].local_addr.sa_family) {
   247de:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   247e2:	0091      	lsls	r1, r2, #2
   247e4:	4a1d      	ldr	r2, [pc, #116]	; (2485c <find_conn_handler+0x118>)
   247e6:	440a      	add	r2, r1
   247e8:	8b12      	ldrh	r2, [r2, #24]
			if (local_addr->sa_family == AF_INET6 &&
   247ea:	4293      	cmp	r3, r2
   247ec:	d1c6      	bne.n	2477c <find_conn_handler+0x38>
				if (!net_ipv6_addr_cmp(
					    &net_sin6(local_addr)->sin6_addr,
					    &net_sin6(&conns[i].local_addr)->
   247ee:	460b      	mov	r3, r1
   247f0:	3318      	adds	r3, #24
   247f2:	4a1a      	ldr	r2, [pc, #104]	; (2485c <find_conn_handler+0x118>)
   247f4:	4413      	add	r3, r2
   247f6:	2210      	movs	r2, #16
   247f8:	1d19      	adds	r1, r3, #4
   247fa:	1d38      	adds	r0, r7, #4
   247fc:	f005 f838 	bl	29870 <memcmp>
				if (!net_ipv6_addr_cmp(
   24800:	2800      	cmp	r0, #0
   24802:	d1bb      	bne.n	2477c <find_conn_handler+0x38>
   24804:	e009      	b.n	2481a <find_conn_handler+0xd6>
#endif
			{
				continue;
			}
		} else {
			if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   24806:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2480a:	009a      	lsls	r2, r3, #2
   2480c:	4b13      	ldr	r3, [pc, #76]	; (2485c <find_conn_handler+0x118>)
   2480e:	4413      	add	r3, r2
   24810:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24814:	f013 0f04 	tst.w	r3, #4
   24818:	d1b0      	bne.n	2477c <find_conn_handler+0x38>
				continue;
			}
		}

		if (net_sin(&conns[i].remote_addr)->sin_port !=
   2481a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2481e:	009a      	lsls	r2, r3, #2
   24820:	4b0e      	ldr	r3, [pc, #56]	; (2485c <find_conn_handler+0x118>)
   24822:	4413      	add	r3, r2
   24824:	885a      	ldrh	r2, [r3, #2]
		    htons(remote_port)) {
   24826:	ea4f 2319 	mov.w	r3, r9, lsr #8
   2482a:	ea43 2309 	orr.w	r3, r3, r9, lsl #8
   2482e:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].remote_addr)->sin_port !=
   24830:	429a      	cmp	r2, r3
   24832:	d1a3      	bne.n	2477c <find_conn_handler+0x38>
			continue;
		}

		if (net_sin(&conns[i].local_addr)->sin_port !=
   24834:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24838:	0093      	lsls	r3, r2, #2
   2483a:	3318      	adds	r3, #24
   2483c:	4a07      	ldr	r2, [pc, #28]	; (2485c <find_conn_handler+0x118>)
   2483e:	4413      	add	r3, r2
   24840:	885a      	ldrh	r2, [r3, #2]
		    htons(local_port)) {
   24842:	ea4f 2318 	mov.w	r3, r8, lsr #8
   24846:	ea43 2308 	orr.w	r3, r3, r8, lsl #8
   2484a:	b29b      	uxth	r3, r3
		if (net_sin(&conns[i].local_addr)->sin_port !=
   2484c:	429a      	cmp	r2, r3
   2484e:	d195      	bne.n	2477c <find_conn_handler+0x38>
   24850:	e001      	b.n	24856 <find_conn_handler+0x112>
		}

		return i;
	}

	return -ENOENT;
   24852:	f06f 0401 	mvn.w	r4, #1
}
   24856:	4620      	mov	r0, r4
   24858:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   2485c:	20000540 	.word	0x20000540

00024860 <check_addr>:
}

static bool check_addr(struct net_pkt *pkt,
		       struct sockaddr *addr,
		       bool is_remote)
{
   24860:	b538      	push	{r3, r4, r5, lr}
	if (addr->sa_family != net_pkt_family(pkt)) {
   24862:	880c      	ldrh	r4, [r1, #0]
	return pkt->family;
   24864:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   24868:	f3c3 03c3 	ubfx	r3, r3, #3, #4
   2486c:	b29d      	uxth	r5, r3
   2486e:	42ac      	cmp	r4, r5
   24870:	d002      	beq.n	24878 <check_addr+0x18>
		return false;
   24872:	2400      	movs	r4, #0
		}
	}
#endif /* CONFIG_NET_IPV4 */

	return true;
}
   24874:	4620      	mov	r0, r4
   24876:	bd38      	pop	{r3, r4, r5, pc}
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24878:	2b0a      	cmp	r3, #10
   2487a:	d001      	beq.n	24880 <check_addr+0x20>
	return true;
   2487c:	2401      	movs	r4, #1
   2487e:	e7f9      	b.n	24874 <check_addr+0x14>
	if (net_pkt_family(pkt) == AF_INET6 && addr->sa_family == AF_INET6) {
   24880:	2c0a      	cmp	r4, #10
   24882:	d001      	beq.n	24888 <check_addr+0x28>
	return true;
   24884:	2401      	movs	r4, #1
   24886:	e7f5      	b.n	24874 <check_addr+0x14>
		if (is_remote) {
   24888:	b162      	cbz	r2, 248a4 <check_addr+0x44>
	return pkt->frags->data;
   2488a:	6883      	ldr	r3, [r0, #8]
   2488c:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->src;
   2488e:	3308      	adds	r3, #8
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24890:	684a      	ldr	r2, [r1, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24892:	b95a      	cbnz	r2, 248ac <check_addr+0x4c>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24894:	688a      	ldr	r2, [r1, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24896:	b9ba      	cbnz	r2, 248c8 <check_addr+0x68>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24898:	68ca      	ldr	r2, [r1, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   2489a:	b9ba      	cbnz	r2, 248cc <check_addr+0x6c>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2489c:	690a      	ldr	r2, [r1, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2489e:	b1ba      	cbz	r2, 248d0 <check_addr+0x70>
   248a0:	2200      	movs	r2, #0
   248a2:	e004      	b.n	248ae <check_addr+0x4e>
   248a4:	6883      	ldr	r3, [r0, #8]
   248a6:	689b      	ldr	r3, [r3, #8]
			addr6 = &NET_IPV6_HDR(pkt)->dst;
   248a8:	3318      	adds	r3, #24
   248aa:	e7f1      	b.n	24890 <check_addr+0x30>
   248ac:	2200      	movs	r2, #0
		if (!net_is_ipv6_addr_unspecified(
   248ae:	4614      	mov	r4, r2
   248b0:	2a00      	cmp	r2, #0
   248b2:	d1df      	bne.n	24874 <check_addr+0x14>
   248b4:	4608      	mov	r0, r1
	return !memcmp(addr1, addr2, sizeof(struct in6_addr));
   248b6:	2210      	movs	r2, #16
   248b8:	4619      	mov	r1, r3
   248ba:	3004      	adds	r0, #4
   248bc:	f004 ffd8 	bl	29870 <memcmp>
			if (!net_ipv6_addr_cmp(&net_sin6(addr)->sin6_addr,
   248c0:	2800      	cmp	r0, #0
   248c2:	d1d7      	bne.n	24874 <check_addr+0x14>
		return true;
   248c4:	2401      	movs	r4, #1
   248c6:	e7d5      	b.n	24874 <check_addr+0x14>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   248c8:	2200      	movs	r2, #0
   248ca:	e7f0      	b.n	248ae <check_addr+0x4e>
   248cc:	2200      	movs	r2, #0
   248ce:	e7ee      	b.n	248ae <check_addr+0x4e>
   248d0:	2201      	movs	r2, #1
   248d2:	e7ec      	b.n	248ae <check_addr+0x4e>

000248d4 <net_conn_unregister>:
{
   248d4:	b508      	push	{r3, lr}
	if (conn < &conns[0] || conn > &conns[CONFIG_NET_MAX_CONN]) {
   248d6:	4b0d      	ldr	r3, [pc, #52]	; (2490c <net_conn_unregister+0x38>)
   248d8:	4298      	cmp	r0, r3
   248da:	d30d      	bcc.n	248f8 <net_conn_unregister+0x24>
   248dc:	33f0      	adds	r3, #240	; 0xf0
   248de:	4298      	cmp	r0, r3
   248e0:	d80d      	bhi.n	248fe <net_conn_unregister+0x2a>
	if (!(conn->flags & NET_CONN_IN_USE)) {
   248e2:	f890 3039 	ldrb.w	r3, [r0, #57]	; 0x39
   248e6:	f013 0f01 	tst.w	r3, #1
   248ea:	d00b      	beq.n	24904 <net_conn_unregister+0x30>
	memset(conn, 0, sizeof(*conn));
   248ec:	223c      	movs	r2, #60	; 0x3c
   248ee:	2100      	movs	r1, #0
   248f0:	f005 f852 	bl	29998 <memset>
	return 0;
   248f4:	2000      	movs	r0, #0
   248f6:	bd08      	pop	{r3, pc}
		return -EINVAL;
   248f8:	f06f 0015 	mvn.w	r0, #21
   248fc:	bd08      	pop	{r3, pc}
   248fe:	f06f 0015 	mvn.w	r0, #21
   24902:	bd08      	pop	{r3, pc}
		return -ENOENT;
   24904:	f06f 0001 	mvn.w	r0, #1
}
   24908:	bd08      	pop	{r3, pc}
   2490a:	bf00      	nop
   2490c:	20000540 	.word	0x20000540

00024910 <net_conn_register>:
{
   24910:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24914:	b082      	sub	sp, #8
   24916:	4681      	mov	r9, r0
   24918:	460d      	mov	r5, r1
   2491a:	4616      	mov	r6, r2
   2491c:	4698      	mov	r8, r3
   2491e:	f8bd 7028 	ldrh.w	r7, [sp, #40]	; 0x28
	i = find_conn_handler(proto, remote_addr, local_addr, remote_port,
   24922:	9700      	str	r7, [sp, #0]
   24924:	f7ff ff0e 	bl	24744 <find_conn_handler>
	if (i != -ENOENT) {
   24928:	f110 0f02 	cmn.w	r0, #2
   2492c:	f040 80ba 	bne.w	24aa4 <net_conn_register+0x194>
   24930:	2400      	movs	r4, #0
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24932:	2c03      	cmp	r4, #3
   24934:	f300 80aa 	bgt.w	24a8c <net_conn_register+0x17c>
		if (conns[i].flags & NET_CONN_IN_USE) {
   24938:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   2493c:	009a      	lsls	r2, r3, #2
   2493e:	4b60      	ldr	r3, [pc, #384]	; (24ac0 <net_conn_register+0x1b0>)
   24940:	4413      	add	r3, r2
   24942:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24946:	f013 0f01 	tst.w	r3, #1
   2494a:	d001      	beq.n	24950 <net_conn_register+0x40>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   2494c:	3401      	adds	r4, #1
   2494e:	e7f0      	b.n	24932 <net_conn_register+0x22>
		if (remote_addr) {
   24950:	2d00      	cmp	r5, #0
   24952:	d04b      	beq.n	249ec <net_conn_register+0xdc>
			if (remote_addr->sa_family == AF_INET6) {
   24954:	882b      	ldrh	r3, [r5, #0]
   24956:	2b0a      	cmp	r3, #10
   24958:	f040 80a7 	bne.w	24aaa <net_conn_register+0x19a>
				memcpy(&conns[i].remote_addr, remote_addr,
   2495c:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24960:	0093      	lsls	r3, r2, #2
   24962:	2218      	movs	r2, #24
   24964:	4629      	mov	r1, r5
   24966:	4856      	ldr	r0, [pc, #344]	; (24ac0 <net_conn_register+0x1b0>)
   24968:	4418      	add	r0, r3
   2496a:	f7db fca9 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   2496e:	686b      	ldr	r3, [r5, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24970:	b93b      	cbnz	r3, 24982 <net_conn_register+0x72>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24972:	68ab      	ldr	r3, [r5, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   24974:	bb8b      	cbnz	r3, 249da <net_conn_register+0xca>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   24976:	68eb      	ldr	r3, [r5, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   24978:	bb8b      	cbnz	r3, 249de <net_conn_register+0xce>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   2497a:	692b      	ldr	r3, [r5, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   2497c:	b38b      	cbz	r3, 249e2 <net_conn_register+0xd2>
   2497e:	2300      	movs	r3, #0
   24980:	e000      	b.n	24984 <net_conn_register+0x74>
   24982:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   24984:	b37b      	cbz	r3, 249e6 <net_conn_register+0xd6>
					rank |= NET_RANK_REMOTE_UNSPEC_ADDR;
   24986:	f04f 0a08 	mov.w	sl, #8
			conns[i].flags |= NET_CONN_REMOTE_ADDR_SET;
   2498a:	0122      	lsls	r2, r4, #4
   2498c:	1b12      	subs	r2, r2, r4
   2498e:	0091      	lsls	r1, r2, #2
   24990:	4b4b      	ldr	r3, [pc, #300]	; (24ac0 <net_conn_register+0x1b0>)
   24992:	440b      	add	r3, r1
   24994:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24998:	f042 0202 	orr.w	r2, r2, #2
   2499c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (local_addr) {
   249a0:	2e00      	cmp	r6, #0
   249a2:	d036      	beq.n	24a12 <net_conn_register+0x102>
			if (local_addr->sa_family == AF_INET6) {
   249a4:	8833      	ldrh	r3, [r6, #0]
   249a6:	2b0a      	cmp	r3, #10
   249a8:	f040 8082 	bne.w	24ab0 <net_conn_register+0x1a0>
				memcpy(&conns[i].local_addr, local_addr,
   249ac:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   249b0:	0098      	lsls	r0, r3, #2
   249b2:	3018      	adds	r0, #24
   249b4:	2218      	movs	r2, #24
   249b6:	4631      	mov	r1, r6
   249b8:	4b41      	ldr	r3, [pc, #260]	; (24ac0 <net_conn_register+0x1b0>)
   249ba:	4418      	add	r0, r3
   249bc:	f7db fc80 	bl	2c0 <memcpy>
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   249c0:	6873      	ldr	r3, [r6, #4]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   249c2:	b9b3      	cbnz	r3, 249f2 <net_conn_register+0xe2>
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   249c4:	68b3      	ldr	r3, [r6, #8]
	return UNALIGNED_GET(&addr->s6_addr32[0]) == 0 &&
   249c6:	2b00      	cmp	r3, #0
   249c8:	d163      	bne.n	24a92 <net_conn_register+0x182>
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   249ca:	68f3      	ldr	r3, [r6, #12]
		UNALIGNED_GET(&addr->s6_addr32[1]) == 0 &&
   249cc:	2b00      	cmp	r3, #0
   249ce:	d162      	bne.n	24a96 <net_conn_register+0x186>
		UNALIGNED_GET(&addr->s6_addr32[3]) == 0;
   249d0:	6933      	ldr	r3, [r6, #16]
		UNALIGNED_GET(&addr->s6_addr32[2]) == 0 &&
   249d2:	2b00      	cmp	r3, #0
   249d4:	d061      	beq.n	24a9a <net_conn_register+0x18a>
   249d6:	2300      	movs	r3, #0
   249d8:	e00c      	b.n	249f4 <net_conn_register+0xe4>
   249da:	2300      	movs	r3, #0
   249dc:	e7d2      	b.n	24984 <net_conn_register+0x74>
   249de:	2300      	movs	r3, #0
   249e0:	e7d0      	b.n	24984 <net_conn_register+0x74>
   249e2:	2301      	movs	r3, #1
   249e4:	e7ce      	b.n	24984 <net_conn_register+0x74>
					rank |= NET_RANK_REMOTE_SPEC_ADDR;
   249e6:	f04f 0a20 	mov.w	sl, #32
   249ea:	e7ce      	b.n	2498a <net_conn_register+0x7a>
	u8_t rank = 0;
   249ec:	f04f 0a00 	mov.w	sl, #0
   249f0:	e7d6      	b.n	249a0 <net_conn_register+0x90>
   249f2:	2300      	movs	r3, #0
				if (net_is_ipv6_addr_unspecified(
   249f4:	2b00      	cmp	r3, #0
   249f6:	d052      	beq.n	24a9e <net_conn_register+0x18e>
					rank |= NET_RANK_LOCAL_UNSPEC_ADDR;
   249f8:	f04a 0a04 	orr.w	sl, sl, #4
			conns[i].flags |= NET_CONN_LOCAL_ADDR_SET;
   249fc:	0122      	lsls	r2, r4, #4
   249fe:	1b12      	subs	r2, r2, r4
   24a00:	0091      	lsls	r1, r2, #2
   24a02:	4b2f      	ldr	r3, [pc, #188]	; (24ac0 <net_conn_register+0x1b0>)
   24a04:	440b      	add	r3, r1
   24a06:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24a0a:	f042 0204 	orr.w	r2, r2, #4
   24a0e:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		if (remote_addr && local_addr) {
   24a12:	b125      	cbz	r5, 24a1e <net_conn_register+0x10e>
   24a14:	b11e      	cbz	r6, 24a1e <net_conn_register+0x10e>
			if (remote_addr->sa_family != local_addr->sa_family) {
   24a16:	882a      	ldrh	r2, [r5, #0]
   24a18:	8833      	ldrh	r3, [r6, #0]
   24a1a:	429a      	cmp	r2, r3
   24a1c:	d14b      	bne.n	24ab6 <net_conn_register+0x1a6>
		if (remote_port) {
   24a1e:	f1b8 0f00 	cmp.w	r8, #0
   24a22:	d00c      	beq.n	24a3e <net_conn_register+0x12e>
			rank |= NET_RANK_REMOTE_PORT;
   24a24:	f04a 0a02 	orr.w	sl, sl, #2
			net_sin(&conns[i].remote_addr)->sin_port =
   24a28:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24a2c:	009a      	lsls	r2, r3, #2
   24a2e:	4b24      	ldr	r3, [pc, #144]	; (24ac0 <net_conn_register+0x1b0>)
   24a30:	4413      	add	r3, r2
				htons(remote_port);
   24a32:	ea4f 2218 	mov.w	r2, r8, lsr #8
   24a36:	ea42 2808 	orr.w	r8, r2, r8, lsl #8
			net_sin(&conns[i].remote_addr)->sin_port =
   24a3a:	f8a3 8002 	strh.w	r8, [r3, #2]
		if (local_port) {
   24a3e:	b15f      	cbz	r7, 24a58 <net_conn_register+0x148>
			rank |= NET_RANK_LOCAL_PORT;
   24a40:	f04a 0a01 	orr.w	sl, sl, #1
			net_sin(&conns[i].local_addr)->sin_port =
   24a44:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24a48:	0093      	lsls	r3, r2, #2
   24a4a:	3318      	adds	r3, #24
   24a4c:	4a1c      	ldr	r2, [pc, #112]	; (24ac0 <net_conn_register+0x1b0>)
   24a4e:	4413      	add	r3, r2
				htons(local_port);
   24a50:	0a3a      	lsrs	r2, r7, #8
   24a52:	ea42 2707 	orr.w	r7, r2, r7, lsl #8
			net_sin(&conns[i].local_addr)->sin_port =
   24a56:	805f      	strh	r7, [r3, #2]
		conns[i].flags |= NET_CONN_IN_USE;
   24a58:	0122      	lsls	r2, r4, #4
   24a5a:	1b12      	subs	r2, r2, r4
   24a5c:	0091      	lsls	r1, r2, #2
   24a5e:	4b18      	ldr	r3, [pc, #96]	; (24ac0 <net_conn_register+0x1b0>)
   24a60:	440b      	add	r3, r1
   24a62:	f893 2039 	ldrb.w	r2, [r3, #57]	; 0x39
   24a66:	f042 0201 	orr.w	r2, r2, #1
   24a6a:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
		conns[i].cb = cb;
   24a6e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
   24a70:	631a      	str	r2, [r3, #48]	; 0x30
		conns[i].user_data = user_data;
   24a72:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   24a74:	635a      	str	r2, [r3, #52]	; 0x34
		conns[i].rank = rank;
   24a76:	f883 a03a 	strb.w	sl, [r3, #58]	; 0x3a
		conns[i].proto = proto;
   24a7a:	f883 9038 	strb.w	r9, [r3, #56]	; 0x38
		if (handle) {
   24a7e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
   24a80:	b1e3      	cbz	r3, 24abc <net_conn_register+0x1ac>
			*handle = (struct net_conn_handle *)&conns[i];
   24a82:	4b0f      	ldr	r3, [pc, #60]	; (24ac0 <net_conn_register+0x1b0>)
   24a84:	440b      	add	r3, r1
   24a86:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   24a88:	6013      	str	r3, [r2, #0]
		return 0;
   24a8a:	2000      	movs	r0, #0
}
   24a8c:	b002      	add	sp, #8
   24a8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   24a92:	2300      	movs	r3, #0
   24a94:	e7ae      	b.n	249f4 <net_conn_register+0xe4>
   24a96:	2300      	movs	r3, #0
   24a98:	e7ac      	b.n	249f4 <net_conn_register+0xe4>
   24a9a:	2301      	movs	r3, #1
   24a9c:	e7aa      	b.n	249f4 <net_conn_register+0xe4>
					rank |= NET_RANK_LOCAL_SPEC_ADDR;
   24a9e:	f04a 0a10 	orr.w	sl, sl, #16
   24aa2:	e7ab      	b.n	249fc <net_conn_register+0xec>
		return -EALREADY;
   24aa4:	f06f 0077 	mvn.w	r0, #119	; 0x77
   24aa8:	e7f0      	b.n	24a8c <net_conn_register+0x17c>
				return -EINVAL;
   24aaa:	f06f 0015 	mvn.w	r0, #21
   24aae:	e7ed      	b.n	24a8c <net_conn_register+0x17c>
				return -EINVAL;
   24ab0:	f06f 0015 	mvn.w	r0, #21
   24ab4:	e7ea      	b.n	24a8c <net_conn_register+0x17c>
				return -EINVAL;
   24ab6:	f06f 0015 	mvn.w	r0, #21
   24aba:	e7e7      	b.n	24a8c <net_conn_register+0x17c>
		return 0;
   24abc:	2000      	movs	r0, #0
   24abe:	e7e5      	b.n	24a8c <net_conn_register+0x17c>
   24ac0:	20000540 	.word	0x20000540

00024ac4 <net_conn_input>:
#endif /* CONFIG_NET_IPV4 */
	}
}

enum net_verdict net_conn_input(enum net_ip_protocol proto, struct net_pkt *pkt)
{
   24ac4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   24ac8:	b089      	sub	sp, #36	; 0x24
   24aca:	4605      	mov	r5, r0
   24acc:	460e      	mov	r6, r1

	/* This is only used for getting source and destination ports.
	 * Because both TCP and UDP header have these in the same
	 * location, we can check them both using the UDP struct.
	 */
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24ace:	2811      	cmp	r0, #17
   24ad0:	d005      	beq.n	24ade <net_conn_input+0x1a>
		}

		src_port = udp_hdr->src_port;
		dst_port = udp_hdr->dst_port;
		chksum = udp_hdr->chksum;
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24ad2:	2806      	cmp	r0, #6
   24ad4:	d015      	beq.n	24b02 <net_conn_input+0x3e>
		src_port = tcp_hdr->src_port;
		dst_port = tcp_hdr->dst_port;
		chksum = tcp_hdr->chksum;
	} else {
		NET_DBG("No UDP or TCP configured, dropping packet.");
		return NET_DROP;
   24ad6:	2002      	movs	r0, #2

drop:
	net_stats_update_per_proto_drop(proto);

	return NET_DROP;
}
   24ad8:	b009      	add	sp, #36	; 0x24
   24ada:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		udp_hdr = net_udp_get_hdr(pkt, &hdr);
   24ade:	a903      	add	r1, sp, #12
   24ae0:	4630      	mov	r0, r6
   24ae2:	f7fd ff73 	bl	229cc <net_udp_get_hdr>
		if (!udp_hdr) {
   24ae6:	b150      	cbz	r0, 24afe <net_conn_input+0x3a>
		src_port = udp_hdr->src_port;
   24ae8:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = udp_hdr->dst_port;
   24aec:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = udp_hdr->chksum;
   24af0:	f8b0 a006 	ldrh.w	sl, [r0, #6]
	s16_t best_rank = -1;
   24af4:	f04f 38ff 	mov.w	r8, #4294967295	; 0xffffffff
	int i, best_match = -1;
   24af8:	4647      	mov	r7, r8
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24afa:	2400      	movs	r4, #0
   24afc:	e01b      	b.n	24b36 <net_conn_input+0x72>
			return NET_DROP;
   24afe:	2002      	movs	r0, #2
   24b00:	e7ea      	b.n	24ad8 <net_conn_input+0x14>
		tcp_hdr = net_tcp_get_hdr(pkt, &hdr);
   24b02:	a903      	add	r1, sp, #12
   24b04:	4630      	mov	r0, r6
   24b06:	f7fe fbcd 	bl	232a4 <net_tcp_get_hdr>
		if (!tcp_hdr) {
   24b0a:	b130      	cbz	r0, 24b1a <net_conn_input+0x56>
		src_port = tcp_hdr->src_port;
   24b0c:	f8b0 9000 	ldrh.w	r9, [r0]
		dst_port = tcp_hdr->dst_port;
   24b10:	f8b0 b002 	ldrh.w	fp, [r0, #2]
		chksum = tcp_hdr->chksum;
   24b14:	f8b0 a010 	ldrh.w	sl, [r0, #16]
   24b18:	e7ec      	b.n	24af4 <net_conn_input+0x30>
			return NET_DROP;
   24b1a:	2002      	movs	r0, #2
   24b1c:	e7dc      	b.n	24ad8 <net_conn_input+0x14>
		if (net_sin(&conns[i].local_addr)->sin_port) {
   24b1e:	ebc4 1004 	rsb	r0, r4, r4, lsl #4
   24b22:	0082      	lsls	r2, r0, #2
   24b24:	3218      	adds	r2, #24
   24b26:	4866      	ldr	r0, [pc, #408]	; (24cc0 <net_conn_input+0x1fc>)
   24b28:	1882      	adds	r2, r0, r2
   24b2a:	9201      	str	r2, [sp, #4]
   24b2c:	8852      	ldrh	r2, [r2, #2]
   24b2e:	b1fa      	cbz	r2, 24b70 <net_conn_input+0xac>
			if (net_sin(&conns[i].local_addr)->sin_port !=
   24b30:	4593      	cmp	fp, r2
   24b32:	d01d      	beq.n	24b70 <net_conn_input+0xac>
	for (i = 0; i < CONFIG_NET_MAX_CONN; i++) {
   24b34:	3401      	adds	r4, #1
   24b36:	2c03      	cmp	r4, #3
   24b38:	dc4d      	bgt.n	24bd6 <net_conn_input+0x112>
		if (!(conns[i].flags & NET_CONN_IN_USE)) {
   24b3a:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24b3e:	009a      	lsls	r2, r3, #2
   24b40:	4b5f      	ldr	r3, [pc, #380]	; (24cc0 <net_conn_input+0x1fc>)
   24b42:	4413      	add	r3, r2
   24b44:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24b48:	f013 0f01 	tst.w	r3, #1
   24b4c:	d0f2      	beq.n	24b34 <net_conn_input+0x70>
		if (conns[i].proto != proto) {
   24b4e:	ebc4 1204 	rsb	r2, r4, r4, lsl #4
   24b52:	0091      	lsls	r1, r2, #2
   24b54:	4a5a      	ldr	r2, [pc, #360]	; (24cc0 <net_conn_input+0x1fc>)
   24b56:	440a      	add	r2, r1
   24b58:	f892 2038 	ldrb.w	r2, [r2, #56]	; 0x38
   24b5c:	4295      	cmp	r5, r2
   24b5e:	d1e9      	bne.n	24b34 <net_conn_input+0x70>
		if (net_sin(&conns[i].remote_addr)->sin_port) {
   24b60:	4a57      	ldr	r2, [pc, #348]	; (24cc0 <net_conn_input+0x1fc>)
   24b62:	4411      	add	r1, r2
   24b64:	884a      	ldrh	r2, [r1, #2]
   24b66:	2a00      	cmp	r2, #0
   24b68:	d0d9      	beq.n	24b1e <net_conn_input+0x5a>
			if (net_sin(&conns[i].remote_addr)->sin_port !=
   24b6a:	4591      	cmp	r9, r2
   24b6c:	d1e2      	bne.n	24b34 <net_conn_input+0x70>
   24b6e:	e7d6      	b.n	24b1e <net_conn_input+0x5a>
		if (conns[i].flags & NET_CONN_REMOTE_ADDR_SET) {
   24b70:	f013 0f02 	tst.w	r3, #2
   24b74:	d120      	bne.n	24bb8 <net_conn_input+0xf4>
		if (conns[i].flags & NET_CONN_LOCAL_ADDR_SET) {
   24b76:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24b7a:	009a      	lsls	r2, r3, #2
   24b7c:	4b50      	ldr	r3, [pc, #320]	; (24cc0 <net_conn_input+0x1fc>)
   24b7e:	4413      	add	r3, r2
   24b80:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
   24b84:	f013 0f04 	tst.w	r3, #4
   24b88:	d11d      	bne.n	24bc6 <net_conn_input+0x102>
		if (best_match >= 0 &&
   24b8a:	2f00      	cmp	r7, #0
   24b8c:	db07      	blt.n	24b9e <net_conn_input+0xda>
		    net_sin(&conns[best_match].remote_addr)->sin_port) {
   24b8e:	ebc7 1307 	rsb	r3, r7, r7, lsl #4
   24b92:	009a      	lsls	r2, r3, #2
   24b94:	4b4a      	ldr	r3, [pc, #296]	; (24cc0 <net_conn_input+0x1fc>)
   24b96:	4413      	add	r3, r2
   24b98:	885b      	ldrh	r3, [r3, #2]
		if (best_match >= 0 &&
   24b9a:	2b00      	cmp	r3, #0
   24b9c:	d1ca      	bne.n	24b34 <net_conn_input+0x70>
		if (best_rank < conns[i].rank) {
   24b9e:	ebc4 1304 	rsb	r3, r4, r4, lsl #4
   24ba2:	009a      	lsls	r2, r3, #2
   24ba4:	4b46      	ldr	r3, [pc, #280]	; (24cc0 <net_conn_input+0x1fc>)
   24ba6:	4413      	add	r3, r2
   24ba8:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
   24bac:	4598      	cmp	r8, r3
   24bae:	dac1      	bge.n	24b34 <net_conn_input+0x70>
			best_rank = conns[i].rank;
   24bb0:	fa0f f883 	sxth.w	r8, r3
			best_match = i;
   24bb4:	4627      	mov	r7, r4
   24bb6:	e7bd      	b.n	24b34 <net_conn_input+0x70>
			if (!check_addr(pkt, &conns[i].remote_addr, true)) {
   24bb8:	2201      	movs	r2, #1
   24bba:	4630      	mov	r0, r6
   24bbc:	f7ff fe50 	bl	24860 <check_addr>
   24bc0:	2800      	cmp	r0, #0
   24bc2:	d0b7      	beq.n	24b34 <net_conn_input+0x70>
   24bc4:	e7d7      	b.n	24b76 <net_conn_input+0xb2>
			if (!check_addr(pkt, &conns[i].local_addr, false)) {
   24bc6:	2200      	movs	r2, #0
   24bc8:	9901      	ldr	r1, [sp, #4]
   24bca:	4630      	mov	r0, r6
   24bcc:	f7ff fe48 	bl	24860 <check_addr>
   24bd0:	2800      	cmp	r0, #0
   24bd2:	d0af      	beq.n	24b34 <net_conn_input+0x70>
   24bd4:	e7d9      	b.n	24b8a <net_conn_input+0xc6>
	if (best_match >= 0) {
   24bd6:	2f00      	cmp	r7, #0
   24bd8:	db44      	blt.n	24c64 <net_conn_input+0x1a0>
		if (IS_ENABLED(CONFIG_NET_UDP_CHECKSUM) &&
   24bda:	2d11      	cmp	r5, #17
   24bdc:	d014      	beq.n	24c08 <net_conn_input+0x144>
		} else if (IS_ENABLED(CONFIG_NET_TCP_CHECKSUM) &&
   24bde:	2d06      	cmp	r5, #6
   24be0:	d023      	beq.n	24c2a <net_conn_input+0x166>
		if (conns[best_match].cb(&conns[best_match], pkt,
   24be2:	4c37      	ldr	r4, [pc, #220]	; (24cc0 <net_conn_input+0x1fc>)
   24be4:	013a      	lsls	r2, r7, #4
   24be6:	1bd1      	subs	r1, r2, r7
   24be8:	008b      	lsls	r3, r1, #2
   24bea:	4423      	add	r3, r4
   24bec:	f8d3 8030 	ldr.w	r8, [r3, #48]	; 0x30
   24bf0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
   24bf2:	4631      	mov	r1, r6
   24bf4:	4618      	mov	r0, r3
   24bf6:	47c0      	blx	r8
   24bf8:	2802      	cmp	r0, #2
   24bfa:	d03d      	beq.n	24c78 <net_conn_input+0x1b4>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24bfc:	2d11      	cmp	r5, #17
   24bfe:	d023      	beq.n	24c48 <net_conn_input+0x184>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24c00:	2d06      	cmp	r5, #6
   24c02:	d029      	beq.n	24c58 <net_conn_input+0x194>
		return NET_OK;
   24c04:	2000      	movs	r0, #0
   24c06:	e767      	b.n	24ad8 <net_conn_input+0x14>
			net_udp_set_chksum(pkt, pkt->frags);
   24c08:	68b1      	ldr	r1, [r6, #8]
   24c0a:	4630      	mov	r0, r6
   24c0c:	f7fd fe6b 	bl	228e6 <net_udp_set_chksum>
			chksum_calc = net_udp_get_chksum(pkt, pkt->frags);
   24c10:	68b1      	ldr	r1, [r6, #8]
   24c12:	4630      	mov	r0, r6
   24c14:	f7fd feb4 	bl	22980 <net_udp_get_chksum>
			if (chksum != chksum_calc) {
   24c18:	4582      	cmp	sl, r0
   24c1a:	d0e2      	beq.n	24be2 <net_conn_input+0x11e>
	net_stats.udp.chkerr++;
   24c1c:	4a29      	ldr	r2, [pc, #164]	; (24cc4 <net_conn_input+0x200>)
   24c1e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
   24c22:	3301      	adds	r3, #1
   24c24:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
   24c28:	e026      	b.n	24c78 <net_conn_input+0x1b4>
			net_tcp_set_chksum(pkt, pkt->frags);
   24c2a:	68b1      	ldr	r1, [r6, #8]
   24c2c:	4630      	mov	r0, r6
   24c2e:	f7fe fc9e 	bl	2356e <net_tcp_set_chksum>
			chksum_calc = net_tcp_get_chksum(pkt, pkt->frags);
   24c32:	68b1      	ldr	r1, [r6, #8]
   24c34:	4630      	mov	r0, r6
   24c36:	f7fe fc74 	bl	23522 <net_tcp_get_chksum>
			if (chksum != chksum_calc) {
   24c3a:	4582      	cmp	sl, r0
   24c3c:	d0d1      	beq.n	24be2 <net_conn_input+0x11e>
	net_stats.tcp.chkerr++;
   24c3e:	4a21      	ldr	r2, [pc, #132]	; (24cc4 <net_conn_input+0x200>)
   24c40:	6e13      	ldr	r3, [r2, #96]	; 0x60
   24c42:	3301      	adds	r3, #1
   24c44:	6613      	str	r3, [r2, #96]	; 0x60
   24c46:	e017      	b.n	24c78 <net_conn_input+0x1b4>
	net_stats.udp.recv++;
   24c48:	4a1e      	ldr	r2, [pc, #120]	; (24cc4 <net_conn_input+0x200>)
   24c4a:	f8d2 3080 	ldr.w	r3, [r2, #128]	; 0x80
   24c4e:	3301      	adds	r3, #1
   24c50:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
		return NET_OK;
   24c54:	2000      	movs	r0, #0
   24c56:	e73f      	b.n	24ad8 <net_conn_input+0x14>
	net_stats.tcp.recv++;
   24c58:	4a1a      	ldr	r2, [pc, #104]	; (24cc4 <net_conn_input+0x200>)
   24c5a:	6d53      	ldr	r3, [r2, #84]	; 0x54
   24c5c:	3301      	adds	r3, #1
   24c5e:	6553      	str	r3, [r2, #84]	; 0x54
   24c60:	2000      	movs	r0, #0
   24c62:	e739      	b.n	24ad8 <net_conn_input+0x14>
	return pkt->family;
   24c64:	f896 3038 	ldrb.w	r3, [r6, #56]	; 0x38
   24c68:	f3c3 03c3 	ubfx	r3, r3, #3, #4
	if (net_pkt_family(pkt) == AF_INET6 &&
   24c6c:	2b0a      	cmp	r3, #10
   24c6e:	d009      	beq.n	24c84 <net_conn_input+0x1c0>
	if (net_pkt_family(pkt) == AF_INET6) {
   24c70:	2b0a      	cmp	r3, #10
   24c72:	d00d      	beq.n	24c90 <net_conn_input+0x1cc>
		if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24c74:	2d06      	cmp	r5, #6
   24c76:	d012      	beq.n	24c9e <net_conn_input+0x1da>
	if (IS_ENABLED(CONFIG_NET_UDP) && proto == IPPROTO_UDP) {
   24c78:	2d11      	cmp	r5, #17
   24c7a:	d015      	beq.n	24ca8 <net_conn_input+0x1e4>
	} else if (IS_ENABLED(CONFIG_NET_TCP) && proto == IPPROTO_TCP) {
   24c7c:	2d06      	cmp	r5, #6
   24c7e:	d019      	beq.n	24cb4 <net_conn_input+0x1f0>
	return NET_DROP;
   24c80:	2002      	movs	r0, #2
   24c82:	e729      	b.n	24ad8 <net_conn_input+0x14>
	return pkt->frags->data;
   24c84:	68b2      	ldr	r2, [r6, #8]
   24c86:	6892      	ldr	r2, [r2, #8]
	return addr->s6_addr[0] == 0xFF;
   24c88:	7e12      	ldrb	r2, [r2, #24]
	if (net_pkt_family(pkt) == AF_INET6 &&
   24c8a:	2aff      	cmp	r2, #255	; 0xff
   24c8c:	d1f0      	bne.n	24c70 <net_conn_input+0x1ac>
   24c8e:	e7f3      	b.n	24c78 <net_conn_input+0x1b4>
		net_icmpv6_send_error(pkt, NET_ICMPV6_DST_UNREACH,
   24c90:	2300      	movs	r3, #0
   24c92:	2204      	movs	r2, #4
   24c94:	2101      	movs	r1, #1
   24c96:	4630      	mov	r0, r6
   24c98:	f7f9 fc94 	bl	1e5c4 <net_icmpv6_send_error>
   24c9c:	e7ea      	b.n	24c74 <net_conn_input+0x1b0>
	net_stats.tcp.connrst++;
   24c9e:	4a09      	ldr	r2, [pc, #36]	; (24cc4 <net_conn_input+0x200>)
   24ca0:	6f93      	ldr	r3, [r2, #120]	; 0x78
   24ca2:	3301      	adds	r3, #1
   24ca4:	6793      	str	r3, [r2, #120]	; 0x78
   24ca6:	e7e7      	b.n	24c78 <net_conn_input+0x1b4>
	net_stats.udp.drop++;
   24ca8:	4a06      	ldr	r2, [pc, #24]	; (24cc4 <net_conn_input+0x200>)
   24caa:	6fd3      	ldr	r3, [r2, #124]	; 0x7c
   24cac:	3301      	adds	r3, #1
   24cae:	67d3      	str	r3, [r2, #124]	; 0x7c
	return NET_DROP;
   24cb0:	2002      	movs	r0, #2
   24cb2:	e711      	b.n	24ad8 <net_conn_input+0x14>
	net_stats.tcp.drop++;
   24cb4:	4a03      	ldr	r2, [pc, #12]	; (24cc4 <net_conn_input+0x200>)
   24cb6:	6dd3      	ldr	r3, [r2, #92]	; 0x5c
   24cb8:	3301      	adds	r3, #1
   24cba:	65d3      	str	r3, [r2, #92]	; 0x5c
   24cbc:	2002      	movs	r0, #2
   24cbe:	e70b      	b.n	24ad8 <net_conn_input+0x14>
   24cc0:	20000540 	.word	0x20000540
   24cc4:	20002ab8 	.word	0x20002ab8

00024cc8 <net_conn_init>:
		cb(&conns[i], user_data);
	}
}

void net_conn_init(void)
{
   24cc8:	4770      	bx	lr

00024cca <compute_rlen_size>:
 * @retval -EINVAL
 */
static
int compute_rlen_size(u16_t *size, u32_t len)
{
	if (len <= 127) {
   24cca:	297f      	cmp	r1, #127	; 0x7f
   24ccc:	d912      	bls.n	24cf4 <compute_rlen_size+0x2a>
		*size = 1;
	} else if (len >= 128 && len <= 16383) {
   24cce:	f1a1 0380 	sub.w	r3, r1, #128	; 0x80
   24cd2:	f5b3 5f7e 	cmp.w	r3, #16256	; 0x3f80
   24cd6:	d311      	bcc.n	24cfc <compute_rlen_size+0x32>
		*size = 2;
	} else if (len >= 16384 && len <= 2097151) {
   24cd8:	f5a1 4380 	sub.w	r3, r1, #16384	; 0x4000
   24cdc:	f5b3 1ffe 	cmp.w	r3, #2080768	; 0x1fc000
   24ce0:	d310      	bcc.n	24d04 <compute_rlen_size+0x3a>
		*size = 3;
	} else if (len >= 2097152 && len <= 268435455) {
   24ce2:	f5a1 1100 	sub.w	r1, r1, #2097152	; 0x200000
   24ce6:	f1b1 6f7e 	cmp.w	r1, #266338304	; 0xfe00000
   24cea:	d20f      	bcs.n	24d0c <compute_rlen_size+0x42>
		*size = 4;
   24cec:	2304      	movs	r3, #4
   24cee:	8003      	strh	r3, [r0, #0]
	} else {
		return -EINVAL;
	}

	return 0;
   24cf0:	2000      	movs	r0, #0
   24cf2:	4770      	bx	lr
		*size = 1;
   24cf4:	2301      	movs	r3, #1
   24cf6:	8003      	strh	r3, [r0, #0]
	return 0;
   24cf8:	2000      	movs	r0, #0
   24cfa:	4770      	bx	lr
		*size = 2;
   24cfc:	2302      	movs	r3, #2
   24cfe:	8003      	strh	r3, [r0, #0]
	return 0;
   24d00:	2000      	movs	r0, #0
   24d02:	4770      	bx	lr
		*size = 3;
   24d04:	2303      	movs	r3, #3
   24d06:	8003      	strh	r3, [r0, #0]
	return 0;
   24d08:	2000      	movs	r0, #0
   24d0a:	4770      	bx	lr
		return -EINVAL;
   24d0c:	f06f 0015 	mvn.w	r0, #21
}
   24d10:	4770      	bx	lr

00024d12 <rlen_encode>:
 * @param [in] len Value to encode
 *
 * @retval 0 always
 */
static int rlen_encode(u8_t *buf, u32_t len)
{
   24d12:	b410      	push	{r4}
	u8_t encoded;
	u8_t i;

	i = 0;
   24d14:	2200      	movs	r2, #0
   24d16:	e004      	b.n	24d22 <rlen_encode+0x10>
		 * set the top bit of this byte
		 */
		if (len > 0) {
			encoded = encoded | 128;
		}
		buf[i++] = encoded;
   24d18:	1c53      	adds	r3, r2, #1
   24d1a:	b2db      	uxtb	r3, r3
   24d1c:	5484      	strb	r4, [r0, r2]
	} while (len > 0);
   24d1e:	b139      	cbz	r1, 24d30 <rlen_encode+0x1e>
		buf[i++] = encoded;
   24d20:	461a      	mov	r2, r3
		encoded = len % 128;
   24d22:	f001 047f 	and.w	r4, r1, #127	; 0x7f
		if (len > 0) {
   24d26:	09c9      	lsrs	r1, r1, #7
   24d28:	d0f6      	beq.n	24d18 <rlen_encode+0x6>
			encoded = encoded | 128;
   24d2a:	f044 0480 	orr.w	r4, r4, #128	; 0x80
   24d2e:	e7f3      	b.n	24d18 <rlen_encode+0x6>

	return 0;
}
   24d30:	2000      	movs	r0, #0
   24d32:	bc10      	pop	{r4}
   24d34:	4770      	bx	lr

00024d36 <rlen_decode>:
 * @retval 0 on success
 * @retval -ENOMEM if size < 4
 */
static int rlen_decode(u32_t *rlen, u16_t *rlen_size,
		       u8_t *buf, u16_t size)
{
   24d36:	b5f0      	push	{r4, r5, r6, r7, lr}
	u32_t value = 0;
	u32_t mult = 1;
	u16_t i = 0;
   24d38:	2400      	movs	r4, #0
	u32_t mult = 1;
   24d3a:	2601      	movs	r6, #1
	u32_t value = 0;
   24d3c:	4627      	mov	r7, r4
   24d3e:	e000      	b.n	24d42 <rlen_decode+0xc>
	do {
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
			return -ENOMEM;
		}

		encoded = buf[i++];
   24d40:	462c      	mov	r4, r5
		if (i >= ENCLENBUF_MAX_SIZE || i >= size) {
   24d42:	2c03      	cmp	r4, #3
   24d44:	d810      	bhi.n	24d68 <rlen_decode+0x32>
   24d46:	429c      	cmp	r4, r3
   24d48:	d211      	bcs.n	24d6e <rlen_decode+0x38>
		encoded = buf[i++];
   24d4a:	1c65      	adds	r5, r4, #1
   24d4c:	b2ad      	uxth	r5, r5
   24d4e:	5d14      	ldrb	r4, [r2, r4]
		value += (encoded & 127) * mult;
   24d50:	f004 0e7f 	and.w	lr, r4, #127	; 0x7f
   24d54:	fb0e 7706 	mla	r7, lr, r6, r7
		mult *= 128;
   24d58:	01f6      	lsls	r6, r6, #7
	} while ((encoded & 128) != 0);
   24d5a:	f014 0f80 	tst.w	r4, #128	; 0x80
   24d5e:	d1ef      	bne.n	24d40 <rlen_decode+0xa>

	*rlen = value;
   24d60:	6007      	str	r7, [r0, #0]
	*rlen_size = i;
   24d62:	800d      	strh	r5, [r1, #0]

	return 0;
   24d64:	2000      	movs	r0, #0
   24d66:	bdf0      	pop	{r4, r5, r6, r7, pc}
			return -ENOMEM;
   24d68:	f06f 000b 	mvn.w	r0, #11
   24d6c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   24d6e:	f06f 000b 	mvn.w	r0, #11
}
   24d72:	bdf0      	pop	{r4, r5, r6, r7, pc}

00024d74 <pack_pkt_id>:
 * @retval -ENOMEM if size < 4
 */
static
int pack_pkt_id(u8_t *buf, u16_t *length, u16_t size,
		enum mqtt_packet type, u8_t reserved, u16_t pkt_id)
{
   24d74:	b410      	push	{r4}
   24d76:	f8bd 4008 	ldrh.w	r4, [sp, #8]
	if (size < MSG_PKTID_ONLY_SIZE) {
   24d7a:	2a03      	cmp	r2, #3
   24d7c:	d912      	bls.n	24da4 <pack_pkt_id+0x30>
		return -ENOMEM;
	}

	buf[0] = (type << 4) + (reserved & 0x0F);
   24d7e:	011b      	lsls	r3, r3, #4
   24d80:	b2db      	uxtb	r3, r3
   24d82:	f89d 2004 	ldrb.w	r2, [sp, #4]
   24d86:	f002 020f 	and.w	r2, r2, #15
   24d8a:	4413      	add	r3, r2
   24d8c:	7003      	strb	r3, [r0, #0]
	buf[1] = PACKET_ID_SIZE;
   24d8e:	2302      	movs	r3, #2
   24d90:	7043      	strb	r3, [r0, #1]
	UNALIGNED_PUT(htons(pkt_id), (u16_t *)(buf + PACKET_ID_SIZE));
   24d92:	0a23      	lsrs	r3, r4, #8
   24d94:	ea43 2304 	orr.w	r3, r3, r4, lsl #8
   24d98:	8043      	strh	r3, [r0, #2]
	*length = MSG_PKTID_ONLY_SIZE;
   24d9a:	2304      	movs	r3, #4
   24d9c:	800b      	strh	r3, [r1, #0]

	return 0;
   24d9e:	2000      	movs	r0, #0
}
   24da0:	bc10      	pop	{r4}
   24da2:	4770      	bx	lr
		return -ENOMEM;
   24da4:	f06f 000b 	mvn.w	r0, #11
   24da8:	e7fa      	b.n	24da0 <pack_pkt_id+0x2c>

00024daa <pack_zerolen>:
 */
static
int pack_zerolen(u8_t *buf, u16_t *length, u16_t size,
		 enum mqtt_packet pkt_type, u8_t reserved)
{
	if (size < MSG_ZEROLEN_SIZE) {
   24daa:	2a01      	cmp	r2, #1
   24dac:	d90d      	bls.n	24dca <pack_zerolen+0x20>
		return -ENOMEM;
	}

	buf[0] = (pkt_type << 4) + (reserved & 0x0F);
   24dae:	011b      	lsls	r3, r3, #4
   24db0:	b2db      	uxtb	r3, r3
   24db2:	f89d 2000 	ldrb.w	r2, [sp]
   24db6:	f002 020f 	and.w	r2, r2, #15
   24dba:	4413      	add	r3, r2
   24dbc:	7003      	strb	r3, [r0, #0]
	buf[1] = 0x00;
   24dbe:	2300      	movs	r3, #0
   24dc0:	7043      	strb	r3, [r0, #1]
	*length = MSG_ZEROLEN_SIZE;
   24dc2:	2202      	movs	r2, #2
   24dc4:	800a      	strh	r2, [r1, #0]

	return 0;
   24dc6:	4618      	mov	r0, r3
   24dc8:	4770      	bx	lr
		return -ENOMEM;
   24dca:	f06f 000b 	mvn.w	r0, #11
}
   24dce:	4770      	bx	lr

00024dd0 <unpack_pktid>:
 */
static
int unpack_pktid(u8_t *buf, u16_t length, enum mqtt_packet *type,
		 u8_t *reserved, u16_t *pkt_id)
{
	if (length < MSG_PKTID_ONLY_SIZE) {
   24dd0:	2903      	cmp	r1, #3
   24dd2:	d911      	bls.n	24df8 <unpack_pktid+0x28>
		return -EINVAL;
	}

	if (buf[1] != PACKET_ID_SIZE) {
   24dd4:	7841      	ldrb	r1, [r0, #1]
   24dd6:	2902      	cmp	r1, #2
   24dd8:	d111      	bne.n	24dfe <unpack_pktid+0x2e>
		return -EINVAL;
	}

	*type = buf[0] >> 4;
   24dda:	7801      	ldrb	r1, [r0, #0]
   24ddc:	0909      	lsrs	r1, r1, #4
   24dde:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24de0:	7802      	ldrb	r2, [r0, #0]
   24de2:	f002 020f 	and.w	r2, r2, #15
   24de6:	701a      	strb	r2, [r3, #0]
	*pkt_id = ntohs(*(u16_t *)(buf + 2));
   24de8:	8842      	ldrh	r2, [r0, #2]
   24dea:	0a13      	lsrs	r3, r2, #8
   24dec:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   24df0:	9a00      	ldr	r2, [sp, #0]
   24df2:	8013      	strh	r3, [r2, #0]

	return 0;
   24df4:	2000      	movs	r0, #0
   24df6:	4770      	bx	lr
		return -EINVAL;
   24df8:	f06f 0015 	mvn.w	r0, #21
   24dfc:	4770      	bx	lr
		return -EINVAL;
   24dfe:	f06f 0015 	mvn.w	r0, #21
}
   24e02:	4770      	bx	lr

00024e04 <unpack_pktid_validate>:
 * @retval -EINVAL
 */
static
int unpack_pktid_validate(u8_t *buf, u16_t length, u16_t *pkt_id,
			  u8_t expected_type, u8_t expected_reserv)
{
   24e04:	b510      	push	{r4, lr}
   24e06:	b084      	sub	sp, #16
   24e08:	461c      	mov	r4, r3
	enum mqtt_packet type;
	u8_t reserved;
	int rc;

	rc = unpack_pktid(buf, length, &type, &reserved, pkt_id);
   24e0a:	9200      	str	r2, [sp, #0]
   24e0c:	f10d 030e 	add.w	r3, sp, #14
   24e10:	f10d 020f 	add.w	r2, sp, #15
   24e14:	f7ff ffdc 	bl	24dd0 <unpack_pktid>
	if (rc != 0) {
   24e18:	4603      	mov	r3, r0
   24e1a:	b948      	cbnz	r0, 24e30 <unpack_pktid_validate+0x2c>
		return rc;
	}

	if (type != expected_type || reserved != expected_reserv) {
   24e1c:	f89d 200f 	ldrb.w	r2, [sp, #15]
   24e20:	42a2      	cmp	r2, r4
   24e22:	d10b      	bne.n	24e3c <unpack_pktid_validate+0x38>
   24e24:	f89d 100e 	ldrb.w	r1, [sp, #14]
   24e28:	f89d 2018 	ldrb.w	r2, [sp, #24]
   24e2c:	4291      	cmp	r1, r2
   24e2e:	d102      	bne.n	24e36 <unpack_pktid_validate+0x32>
		return -EINVAL;
	}

	return 0;
}
   24e30:	4618      	mov	r0, r3
   24e32:	b004      	add	sp, #16
   24e34:	bd10      	pop	{r4, pc}
		return -EINVAL;
   24e36:	f06f 0315 	mvn.w	r3, #21
   24e3a:	e7f9      	b.n	24e30 <unpack_pktid_validate+0x2c>
   24e3c:	f06f 0315 	mvn.w	r3, #21
   24e40:	e7f6      	b.n	24e30 <unpack_pktid_validate+0x2c>

00024e42 <unpack_zerolen>:
 */
static
int unpack_zerolen(u8_t *buf, u16_t length, enum mqtt_packet *pkt_type,
		   u8_t *reserved)
{
	if (length < MSG_ZEROLEN_SIZE) {
   24e42:	2901      	cmp	r1, #1
   24e44:	d90d      	bls.n	24e62 <unpack_zerolen+0x20>
		return -EINVAL;
	}

	*pkt_type = buf[0] >> 4;
   24e46:	7801      	ldrb	r1, [r0, #0]
   24e48:	0909      	lsrs	r1, r1, #4
   24e4a:	7011      	strb	r1, [r2, #0]
	*reserved = buf[0] & 0x0F;
   24e4c:	7802      	ldrb	r2, [r0, #0]
   24e4e:	f002 020f 	and.w	r2, r2, #15
   24e52:	701a      	strb	r2, [r3, #0]

	if (buf[1] != 0) {
   24e54:	7843      	ldrb	r3, [r0, #1]
   24e56:	b90b      	cbnz	r3, 24e5c <unpack_zerolen+0x1a>
		return -EINVAL;
	}

	return 0;
   24e58:	2000      	movs	r0, #0
}
   24e5a:	4770      	bx	lr
		return -EINVAL;
   24e5c:	f06f 0015 	mvn.w	r0, #21
   24e60:	4770      	bx	lr
		return -EINVAL;
   24e62:	f06f 0015 	mvn.w	r0, #21
   24e66:	4770      	bx	lr

00024e68 <unpack_zerolen_validate>:
 */
static
int unpack_zerolen_validate(u8_t *buf, u16_t length,
			    enum mqtt_packet expected_type,
			    u8_t expected_reserved)
{
   24e68:	b530      	push	{r4, r5, lr}
   24e6a:	b083      	sub	sp, #12
   24e6c:	4614      	mov	r4, r2
   24e6e:	461d      	mov	r5, r3
	enum mqtt_packet pkt_type;
	u8_t reserved;
	int rc;

	rc = unpack_zerolen(buf, length, &pkt_type, &reserved);
   24e70:	f10d 0306 	add.w	r3, sp, #6
   24e74:	f10d 0207 	add.w	r2, sp, #7
   24e78:	f7ff ffe3 	bl	24e42 <unpack_zerolen>
	if (rc != 0) {
   24e7c:	4603      	mov	r3, r0
   24e7e:	b938      	cbnz	r0, 24e90 <unpack_zerolen_validate+0x28>
		return rc;
	}

	if (pkt_type != expected_type || reserved != expected_reserved) {
   24e80:	f89d 2007 	ldrb.w	r2, [sp, #7]
   24e84:	42a2      	cmp	r2, r4
   24e86:	d109      	bne.n	24e9c <unpack_zerolen_validate+0x34>
   24e88:	f89d 2006 	ldrb.w	r2, [sp, #6]
   24e8c:	42aa      	cmp	r2, r5
   24e8e:	d102      	bne.n	24e96 <unpack_zerolen_validate+0x2e>
		return -EINVAL;
	}

	return 0;
}
   24e90:	4618      	mov	r0, r3
   24e92:	b003      	add	sp, #12
   24e94:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   24e96:	f06f 0315 	mvn.w	r3, #21
   24e9a:	e7f9      	b.n	24e90 <unpack_zerolen_validate+0x28>
   24e9c:	f06f 0315 	mvn.w	r3, #21
   24ea0:	e7f6      	b.n	24e90 <unpack_zerolen_validate+0x28>

00024ea2 <mqtt_pack_puback>:
{
   24ea2:	b500      	push	{lr}
   24ea4:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBACK, 0, pkt_id);
   24ea6:	9301      	str	r3, [sp, #4]
   24ea8:	2300      	movs	r3, #0
   24eaa:	9300      	str	r3, [sp, #0]
   24eac:	2304      	movs	r3, #4
   24eae:	f7ff ff61 	bl	24d74 <pack_pkt_id>
}
   24eb2:	b003      	add	sp, #12
   24eb4:	f85d fb04 	ldr.w	pc, [sp], #4

00024eb8 <mqtt_pack_pubrec>:
{
   24eb8:	b500      	push	{lr}
   24eba:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREC, 0, pkt_id);
   24ebc:	9301      	str	r3, [sp, #4]
   24ebe:	2300      	movs	r3, #0
   24ec0:	9300      	str	r3, [sp, #0]
   24ec2:	2305      	movs	r3, #5
   24ec4:	f7ff ff56 	bl	24d74 <pack_pkt_id>
}
   24ec8:	b003      	add	sp, #12
   24eca:	f85d fb04 	ldr.w	pc, [sp], #4

00024ece <mqtt_pack_pubrel>:
{
   24ece:	b500      	push	{lr}
   24ed0:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBREL, PUBREL_RESERVED,
   24ed2:	9301      	str	r3, [sp, #4]
   24ed4:	2302      	movs	r3, #2
   24ed6:	9300      	str	r3, [sp, #0]
   24ed8:	2306      	movs	r3, #6
   24eda:	f7ff ff4b 	bl	24d74 <pack_pkt_id>
}
   24ede:	b003      	add	sp, #12
   24ee0:	f85d fb04 	ldr.w	pc, [sp], #4

00024ee4 <mqtt_pack_pubcomp>:
{
   24ee4:	b500      	push	{lr}
   24ee6:	b083      	sub	sp, #12
	return pack_pkt_id(buf, length, size, MQTT_PUBCOMP, 0, pkt_id);
   24ee8:	9301      	str	r3, [sp, #4]
   24eea:	2300      	movs	r3, #0
   24eec:	9300      	str	r3, [sp, #0]
   24eee:	2307      	movs	r3, #7
   24ef0:	f7ff ff40 	bl	24d74 <pack_pkt_id>
}
   24ef4:	b003      	add	sp, #12
   24ef6:	f85d fb04 	ldr.w	pc, [sp], #4

00024efa <mqtt_pack_connect>:
{
   24efa:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   24efe:	b082      	sub	sp, #8
   24f00:	4605      	mov	r5, r0
   24f02:	460e      	mov	r6, r1
   24f04:	4617      	mov	r7, r2
   24f06:	461c      	mov	r4, r3
	pkt_size += msg->client_id_len;
   24f08:	891b      	ldrh	r3, [r3, #8]
   24f0a:	1c99      	adds	r1, r3, #2
   24f0c:	b289      	uxth	r1, r1
	if (msg->will_flag) {
   24f0e:	7aa2      	ldrb	r2, [r4, #10]
   24f10:	f012 0f01 	tst.w	r2, #1
   24f14:	d009      	beq.n	24f2a <mqtt_pack_connect+0x30>
		pkt_size += INT_SIZE;
   24f16:	1d19      	adds	r1, r3, #4
		pkt_size += msg->will_topic_len;
   24f18:	8aa3      	ldrh	r3, [r4, #20]
   24f1a:	fa13 f181 	uxtah	r1, r3, r1
   24f1e:	b289      	uxth	r1, r1
		pkt_size += INT_SIZE;
   24f20:	3102      	adds	r1, #2
		pkt_size += msg->will_msg_len;
   24f22:	8ba3      	ldrh	r3, [r4, #28]
   24f24:	fa13 f181 	uxtah	r1, r3, r1
   24f28:	b289      	uxth	r1, r1
	if (msg->user_name) {
   24f2a:	6a23      	ldr	r3, [r4, #32]
   24f2c:	b123      	cbz	r3, 24f38 <mqtt_pack_connect+0x3e>
		pkt_size += INT_SIZE;
   24f2e:	3102      	adds	r1, #2
		pkt_size += msg->user_name_len;
   24f30:	8ca3      	ldrh	r3, [r4, #36]	; 0x24
   24f32:	fa13 f181 	uxtah	r1, r3, r1
   24f36:	b289      	uxth	r1, r1
	if (msg->password) {
   24f38:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   24f3a:	b123      	cbz	r3, 24f46 <mqtt_pack_connect+0x4c>
		pkt_size += INT_SIZE;
   24f3c:	3102      	adds	r1, #2
		pkt_size += msg->password_len;
   24f3e:	8da3      	ldrh	r3, [r4, #44]	; 0x2c
   24f40:	fa13 f181 	uxtah	r1, r3, r1
   24f44:	b289      	uxth	r1, r1
	pkt_size += CONNECT_VARIABLE_HDR_SIZE;
   24f46:	310a      	adds	r1, #10
   24f48:	fa1f fa81 	uxth.w	sl, r1
	rc = compute_rlen_size(&rlen_size, pkt_size);
   24f4c:	4651      	mov	r1, sl
   24f4e:	f10d 0006 	add.w	r0, sp, #6
   24f52:	f7ff feba 	bl	24cca <compute_rlen_size>
	if (rc != 0) {
   24f56:	4681      	mov	r9, r0
   24f58:	2800      	cmp	r0, #0
   24f5a:	f040 80b6 	bne.w	250ca <mqtt_pack_connect+0x1d0>
	total_buf_size = PACKET_TYPE_SIZE + rlen_size + pkt_size;
   24f5e:	f8bd 8006 	ldrh.w	r8, [sp, #6]
   24f62:	44d0      	add	r8, sl
   24f64:	fa1f f888 	uxth.w	r8, r8
   24f68:	f108 0801 	add.w	r8, r8, #1
   24f6c:	fa1f f888 	uxth.w	r8, r8
	if (total_buf_size > size) {
   24f70:	45b8      	cmp	r8, r7
   24f72:	f200 80ad 	bhi.w	250d0 <mqtt_pack_connect+0x1d6>
	buf[0] = MQTT_CONNECT << 4;
   24f76:	4628      	mov	r0, r5
   24f78:	2310      	movs	r3, #16
   24f7a:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, pkt_size);
   24f7e:	4651      	mov	r1, sl
   24f80:	f7ff fec7 	bl	24d12 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   24f84:	f8bd 0006 	ldrh.w	r0, [sp, #6]
   24f88:	1c43      	adds	r3, r0, #1
   24f8a:	b29b      	uxth	r3, r3
	buf[offset + 0] = 0x00;
   24f8c:	2200      	movs	r2, #0
   24f8e:	54ea      	strb	r2, [r5, r3]
	buf[offset + 1] = 0x04;
   24f90:	1c59      	adds	r1, r3, #1
   24f92:	2204      	movs	r2, #4
   24f94:	546a      	strb	r2, [r5, r1]
	buf[offset + 2] = 'M';
   24f96:	1c99      	adds	r1, r3, #2
   24f98:	274d      	movs	r7, #77	; 0x4d
   24f9a:	546f      	strb	r7, [r5, r1]
	buf[offset + 3] = 'Q';
   24f9c:	1cd9      	adds	r1, r3, #3
   24f9e:	2751      	movs	r7, #81	; 0x51
   24fa0:	546f      	strb	r7, [r5, r1]
	buf[offset + 4] = 'T';
   24fa2:	189f      	adds	r7, r3, r2
   24fa4:	2154      	movs	r1, #84	; 0x54
   24fa6:	55e9      	strb	r1, [r5, r7]
	buf[offset + 5] = 'T';
   24fa8:	1d5f      	adds	r7, r3, #5
   24faa:	55e9      	strb	r1, [r5, r7]
	buf[offset + 6] = 0x04;
   24fac:	1d99      	adds	r1, r3, #6
   24fae:	546a      	strb	r2, [r5, r1]
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24fb0:	1ddf      	adds	r7, r3, #7
   24fb2:	6a22      	ldr	r2, [r4, #32]
   24fb4:	2a00      	cmp	r2, #0
   24fb6:	d05f      	beq.n	25078 <mqtt_pack_connect+0x17e>
   24fb8:	f06f 017f 	mvn.w	r1, #127	; 0x7f
			  (msg->password_len ? 1 << 6 : 0) |
   24fbc:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24fbe:	2a00      	cmp	r2, #0
   24fc0:	d05c      	beq.n	2507c <mqtt_pack_connect+0x182>
   24fc2:	2240      	movs	r2, #64	; 0x40
   24fc4:	4311      	orrs	r1, r2
			  (msg->will_retain ? 1 << 5 : 0) |
   24fc6:	7b22      	ldrb	r2, [r4, #12]
			  (msg->password_len ? 1 << 6 : 0) |
   24fc8:	f012 0f01 	tst.w	r2, #1
   24fcc:	d058      	beq.n	25080 <mqtt_pack_connect+0x186>
   24fce:	2220      	movs	r2, #32
   24fd0:	4311      	orrs	r1, r2
			  ((msg->will_qos & 0x03) << 3) |
   24fd2:	7ae2      	ldrb	r2, [r4, #11]
   24fd4:	00d2      	lsls	r2, r2, #3
   24fd6:	f002 0218 	and.w	r2, r2, #24
			  (msg->will_retain ? 1 << 5 : 0) |
   24fda:	430a      	orrs	r2, r1
			  (msg->will_flag ? 1 << 2 : 0) |
   24fdc:	7aa1      	ldrb	r1, [r4, #10]
			  ((msg->will_qos & 0x03) << 3) |
   24fde:	f011 0f01 	tst.w	r1, #1
   24fe2:	d04f      	beq.n	25084 <mqtt_pack_connect+0x18a>
   24fe4:	2104      	movs	r1, #4
   24fe6:	4311      	orrs	r1, r2
			  (msg->clean_session ? 1 << 1 : 0);
   24fe8:	7822      	ldrb	r2, [r4, #0]
			  (msg->will_flag ? 1 << 2 : 0) |
   24fea:	f012 0f01 	tst.w	r2, #1
   24fee:	d04b      	beq.n	25088 <mqtt_pack_connect+0x18e>
   24ff0:	2202      	movs	r2, #2
   24ff2:	430a      	orrs	r2, r1
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   24ff4:	55ea      	strb	r2, [r5, r7]
	UNALIGNED_PUT(htons(msg->keep_alive), (u16_t *)(buf + offset + 8));
   24ff6:	3308      	adds	r3, #8
   24ff8:	8be1      	ldrh	r1, [r4, #30]
   24ffa:	0a0a      	lsrs	r2, r1, #8
   24ffc:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25000:	52ea      	strh	r2, [r5, r3]
	offset += 8 + INT_SIZE;
   25002:	f100 030b 	add.w	r3, r0, #11
   25006:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->client_id_len),
   25008:	8921      	ldrh	r1, [r4, #8]
   2500a:	0a0a      	lsrs	r2, r1, #8
   2500c:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   25010:	52ea      	strh	r2, [r5, r3]
	offset += INT_SIZE;
   25012:	300d      	adds	r0, #13
   25014:	b287      	uxth	r7, r0
	memcpy(buf + offset, msg->client_id, msg->client_id_len);
   25016:	8922      	ldrh	r2, [r4, #8]
   25018:	6861      	ldr	r1, [r4, #4]
   2501a:	19e8      	adds	r0, r5, r7
   2501c:	f7db f950 	bl	2c0 <memcpy>
	offset += msg->client_id_len;
   25020:	8920      	ldrh	r0, [r4, #8]
   25022:	4438      	add	r0, r7
   25024:	b280      	uxth	r0, r0
	if (msg->will_flag) {
   25026:	7aa3      	ldrb	r3, [r4, #10]
   25028:	f013 0f01 	tst.w	r3, #1
   2502c:	d12e      	bne.n	2508c <mqtt_pack_connect+0x192>
	if (msg->user_name) {
   2502e:	6a23      	ldr	r3, [r4, #32]
   25030:	b173      	cbz	r3, 25050 <mqtt_pack_connect+0x156>
		UNALIGNED_PUT(htons(msg->user_name_len),
   25032:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25034:	0a13      	lsrs	r3, r2, #8
   25036:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2503a:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2503c:	3002      	adds	r0, #2
   2503e:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->user_name, msg->user_name_len);
   25040:	8ca2      	ldrh	r2, [r4, #36]	; 0x24
   25042:	6a21      	ldr	r1, [r4, #32]
   25044:	19e8      	adds	r0, r5, r7
   25046:	f7db f93b 	bl	2c0 <memcpy>
		offset += msg->user_name_len;
   2504a:	8ca0      	ldrh	r0, [r4, #36]	; 0x24
   2504c:	4438      	add	r0, r7
   2504e:	b280      	uxth	r0, r0
	if (msg->password) {
   25050:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   25052:	b15b      	cbz	r3, 2506c <mqtt_pack_connect+0x172>
		UNALIGNED_PUT(htons(msg->password_len),
   25054:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25056:	0a13      	lsrs	r3, r2, #8
   25058:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2505c:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   2505e:	3002      	adds	r0, #2
		memcpy(buf + offset, msg->password, msg->password_len);
   25060:	8da2      	ldrh	r2, [r4, #44]	; 0x2c
   25062:	6aa1      	ldr	r1, [r4, #40]	; 0x28
   25064:	fa15 f080 	uxtah	r0, r5, r0
   25068:	f7db f92a 	bl	2c0 <memcpy>
	*length = total_buf_size;
   2506c:	f8a6 8000 	strh.w	r8, [r6]
}
   25070:	4648      	mov	r0, r9
   25072:	b002      	add	sp, #8
   25074:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	buf[offset + 7] = (msg->user_name ? 1 << 7 : 0) |
   25078:	2100      	movs	r1, #0
   2507a:	e79f      	b.n	24fbc <mqtt_pack_connect+0xc2>
   2507c:	2200      	movs	r2, #0
   2507e:	e7a1      	b.n	24fc4 <mqtt_pack_connect+0xca>
			  (msg->password_len ? 1 << 6 : 0) |
   25080:	2200      	movs	r2, #0
   25082:	e7a5      	b.n	24fd0 <mqtt_pack_connect+0xd6>
			  ((msg->will_qos & 0x03) << 3) |
   25084:	2100      	movs	r1, #0
   25086:	e7ae      	b.n	24fe6 <mqtt_pack_connect+0xec>
			  (msg->will_flag ? 1 << 2 : 0) |
   25088:	2200      	movs	r2, #0
   2508a:	e7b2      	b.n	24ff2 <mqtt_pack_connect+0xf8>
		UNALIGNED_PUT(htons(msg->will_topic_len),
   2508c:	8aa2      	ldrh	r2, [r4, #20]
   2508e:	0a13      	lsrs	r3, r2, #8
   25090:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   25094:	522b      	strh	r3, [r5, r0]
		offset += INT_SIZE;
   25096:	3002      	adds	r0, #2
   25098:	b287      	uxth	r7, r0
		memcpy(buf + offset, msg->will_topic,
   2509a:	8aa2      	ldrh	r2, [r4, #20]
   2509c:	6921      	ldr	r1, [r4, #16]
   2509e:	19e8      	adds	r0, r5, r7
   250a0:	f7db f90e 	bl	2c0 <memcpy>
		offset += msg->will_topic_len;
   250a4:	8aa0      	ldrh	r0, [r4, #20]
   250a6:	4407      	add	r7, r0
   250a8:	b2bf      	uxth	r7, r7
		UNALIGNED_PUT(htons(msg->will_msg_len),
   250aa:	8ba2      	ldrh	r2, [r4, #28]
   250ac:	0a13      	lsrs	r3, r2, #8
   250ae:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   250b2:	53eb      	strh	r3, [r5, r7]
		offset += INT_SIZE;
   250b4:	3702      	adds	r7, #2
   250b6:	b2bf      	uxth	r7, r7
		memcpy(buf + offset, msg->will_msg, msg->will_msg_len);
   250b8:	8ba2      	ldrh	r2, [r4, #28]
   250ba:	69a1      	ldr	r1, [r4, #24]
   250bc:	19e8      	adds	r0, r5, r7
   250be:	f7db f8ff 	bl	2c0 <memcpy>
		offset += msg->will_msg_len;
   250c2:	8ba0      	ldrh	r0, [r4, #28]
   250c4:	4438      	add	r0, r7
   250c6:	b280      	uxth	r0, r0
   250c8:	e7b1      	b.n	2502e <mqtt_pack_connect+0x134>
		return -EINVAL;
   250ca:	f06f 0915 	mvn.w	r9, #21
   250ce:	e7cf      	b.n	25070 <mqtt_pack_connect+0x176>
		return -ENOMEM;
   250d0:	f06f 090b 	mvn.w	r9, #11
   250d4:	e7cc      	b.n	25070 <mqtt_pack_connect+0x176>
	...

000250d8 <mqtt_unpack_suback>:
{
   250d8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   250dc:	b087      	sub	sp, #28
   250de:	461d      	mov	r5, r3
   250e0:	f89d 7038 	ldrb.w	r7, [sp, #56]	; 0x38
   250e4:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
	*pkt_id = 0;
   250e6:	2300      	movs	r3, #0
   250e8:	8013      	strh	r3, [r2, #0]
	*items = 0;
   250ea:	702b      	strb	r3, [r5, #0]
	if (elements <= 0) {
   250ec:	2f00      	cmp	r7, #0
   250ee:	d037      	beq.n	25160 <mqtt_unpack_suback+0x88>
   250f0:	4604      	mov	r4, r0
   250f2:	4689      	mov	r9, r1
   250f4:	4690      	mov	r8, r2
	if ((buf[0] & 0xF0) != (MQTT_SUBACK << 4)) {
   250f6:	7803      	ldrb	r3, [r0, #0]
   250f8:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
   250fc:	2a90      	cmp	r2, #144	; 0x90
   250fe:	d138      	bne.n	25172 <mqtt_unpack_suback+0x9a>
	rc = rlen_decode(&rlen, &rlen_size, buf + PACKET_TYPE_SIZE,
   25100:	1e4b      	subs	r3, r1, #1
   25102:	b29b      	uxth	r3, r3
   25104:	1c42      	adds	r2, r0, #1
   25106:	f10d 0116 	add.w	r1, sp, #22
   2510a:	a804      	add	r0, sp, #16
   2510c:	f7ff fe13 	bl	24d36 <rlen_decode>
	if (rc != 0) {
   25110:	4603      	mov	r3, r0
   25112:	2800      	cmp	r0, #0
   25114:	d136      	bne.n	25184 <mqtt_unpack_suback+0xac>
	if (PACKET_TYPE_SIZE + rlen + rlen_size > length) {
   25116:	f8bd 1016 	ldrh.w	r1, [sp, #22]
   2511a:	9804      	ldr	r0, [sp, #16]
   2511c:	180a      	adds	r2, r1, r0
   2511e:	3201      	adds	r2, #1
   25120:	454a      	cmp	r2, r9
   25122:	d838      	bhi.n	25196 <mqtt_unpack_suback+0xbe>
	offset = PACKET_TYPE_SIZE + rlen_size;
   25124:	1c4a      	adds	r2, r1, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25126:	fa14 f282 	uxtah	r2, r4, r2
   2512a:	8810      	ldrh	r0, [r2, #0]
	*pkt_id = ntohs(val_u16);
   2512c:	0a02      	lsrs	r2, r0, #8
   2512e:	ea42 2200 	orr.w	r2, r2, r0, lsl #8
   25132:	f8a8 2000 	strh.w	r2, [r8]
	offset += PACKET_ID_SIZE;
   25136:	3103      	adds	r1, #3
   25138:	b289      	uxth	r1, r1
	*items = rlen - PACKET_ID_SIZE;
   2513a:	9a04      	ldr	r2, [sp, #16]
   2513c:	3a02      	subs	r2, #2
   2513e:	b2d2      	uxtb	r2, r2
   25140:	702a      	strb	r2, [r5, #0]
	if (*items > elements) {
   25142:	4297      	cmp	r7, r2
   25144:	d335      	bcc.n	251b2 <mqtt_unpack_suback+0xda>
   25146:	2200      	movs	r2, #0
	for (i = 0; i < *items; i++) {
   25148:	7828      	ldrb	r0, [r5, #0]
   2514a:	4282      	cmp	r2, r0
   2514c:	d242      	bcs.n	251d4 <mqtt_unpack_suback+0xfc>
		qos = *(buf + offset);
   2514e:	5c60      	ldrb	r0, [r4, r1]
		if (qos < MQTT_QoS0 || qos > MQTT_QoS2) {
   25150:	2802      	cmp	r0, #2
   25152:	d837      	bhi.n	251c4 <mqtt_unpack_suback+0xec>
		granted_qos[i] = qos;
   25154:	54b0      	strb	r0, [r6, r2]
		offset += QoS_SIZE;
   25156:	3101      	adds	r1, #1
   25158:	b289      	uxth	r1, r1
	for (i = 0; i < *items; i++) {
   2515a:	3201      	adds	r2, #1
   2515c:	b2d2      	uxtb	r2, r2
   2515e:	e7f3      	b.n	25148 <mqtt_unpack_suback+0x70>
		printk("[%s:%d] elements <= 0\n", __func__, __LINE__);
   25160:	f240 321a 	movw	r2, #794	; 0x31a
   25164:	491d      	ldr	r1, [pc, #116]	; (251dc <mqtt_unpack_suback+0x104>)
   25166:	481e      	ldr	r0, [pc, #120]	; (251e0 <mqtt_unpack_suback+0x108>)
   25168:	f7dd fa44 	bl	25f4 <printk>
		return -EINVAL;
   2516c:	f06f 0315 	mvn.w	r3, #21
   25170:	e030      	b.n	251d4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] buf[0](%x) != MQTT_SUBACK << 4\n", __func__, __LINE__, buf[0]);
   25172:	f240 321f 	movw	r2, #799	; 0x31f
   25176:	4919      	ldr	r1, [pc, #100]	; (251dc <mqtt_unpack_suback+0x104>)
   25178:	481a      	ldr	r0, [pc, #104]	; (251e4 <mqtt_unpack_suback+0x10c>)
   2517a:	f7dd fa3b 	bl	25f4 <printk>
		return -EINVAL;
   2517e:	f06f 0315 	mvn.w	r3, #21
   25182:	e027      	b.n	251d4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] rlen_decode returned %d\n", __func__, __LINE__, rc);
   25184:	f240 3226 	movw	r2, #806	; 0x326
   25188:	4914      	ldr	r1, [pc, #80]	; (251dc <mqtt_unpack_suback+0x104>)
   2518a:	4817      	ldr	r0, [pc, #92]	; (251e8 <mqtt_unpack_suback+0x110>)
   2518c:	f7dd fa32 	bl	25f4 <printk>
		return -EINVAL;
   25190:	f06f 0315 	mvn.w	r3, #21
   25194:	e01e      	b.n	251d4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] PACKET_TYPE_SIZE(%d) + rlen(%d) + rlen_size(%d) > length(%d)\n"
   25196:	f8cd 9008 	str.w	r9, [sp, #8]
   2519a:	9101      	str	r1, [sp, #4]
   2519c:	9000      	str	r0, [sp, #0]
   2519e:	2301      	movs	r3, #1
   251a0:	f240 322d 	movw	r2, #813	; 0x32d
   251a4:	490d      	ldr	r1, [pc, #52]	; (251dc <mqtt_unpack_suback+0x104>)
   251a6:	4811      	ldr	r0, [pc, #68]	; (251ec <mqtt_unpack_suback+0x114>)
   251a8:	f7dd fa24 	bl	25f4 <printk>
		return -EINVAL;
   251ac:	f06f 0315 	mvn.w	r3, #21
   251b0:	e010      	b.n	251d4 <mqtt_unpack_suback+0xfc>
		printk("[%s:%d] not enough space to store elements\n", __func__, __LINE__);
   251b2:	f240 323b 	movw	r2, #827	; 0x33b
   251b6:	4909      	ldr	r1, [pc, #36]	; (251dc <mqtt_unpack_suback+0x104>)
   251b8:	480d      	ldr	r0, [pc, #52]	; (251f0 <mqtt_unpack_suback+0x118>)
   251ba:	f7dd fa1b 	bl	25f4 <printk>
		return -EINVAL;
   251be:	f06f 0315 	mvn.w	r3, #21
   251c2:	e007      	b.n	251d4 <mqtt_unpack_suback+0xfc>
			printk("[%s:%d] invalid qos\n", __func__, __LINE__);
   251c4:	f240 3242 	movw	r2, #834	; 0x342
   251c8:	4904      	ldr	r1, [pc, #16]	; (251dc <mqtt_unpack_suback+0x104>)
   251ca:	480a      	ldr	r0, [pc, #40]	; (251f4 <mqtt_unpack_suback+0x11c>)
   251cc:	f7dd fa12 	bl	25f4 <printk>
			return -EINVAL;
   251d0:	f06f 0315 	mvn.w	r3, #21
}
   251d4:	4618      	mov	r0, r3
   251d6:	b007      	add	sp, #28
   251d8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   251dc:	0002e928 	.word	0x0002e928
   251e0:	0002e93c 	.word	0x0002e93c
   251e4:	0002e954 	.word	0x0002e954
   251e8:	0002e97c 	.word	0x0002e97c
   251ec:	0002e9a0 	.word	0x0002e9a0
   251f0:	0002e9e8 	.word	0x0002e9e8
   251f4:	0002ea14 	.word	0x0002ea14

000251f8 <mqtt_pack_publish>:
{
   251f8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   251fc:	b083      	sub	sp, #12
	if (msg->qos < MQTT_QoS0 || msg->qos > MQTT_QoS2) {
   251fe:	785c      	ldrb	r4, [r3, #1]
   25200:	2c02      	cmp	r4, #2
   25202:	d860      	bhi.n	252c6 <mqtt_pack_publish+0xce>
	payload = INT_SIZE + msg->topic_len +
   25204:	f8b3 c00c 	ldrh.w	ip, [r3, #12]
   25208:	2c00      	cmp	r4, #0
   2520a:	d057      	beq.n	252bc <mqtt_pack_publish+0xc4>
   2520c:	f04f 0e02 	mov.w	lr, #2
   25210:	461c      	mov	r4, r3
   25212:	4615      	mov	r5, r2
   25214:	460f      	mov	r7, r1
   25216:	4606      	mov	r6, r0
   25218:	eb0e 030c 	add.w	r3, lr, ip
		  (msg->qos > MQTT_QoS0 ? PACKET_ID_SIZE : 0) + msg->msg_len;
   2521c:	8aa2      	ldrh	r2, [r4, #20]
   2521e:	fa12 f383 	uxtah	r3, r2, r3
   25222:	b29b      	uxth	r3, r3
	payload = INT_SIZE + msg->topic_len +
   25224:	3302      	adds	r3, #2
   25226:	fa1f f983 	uxth.w	r9, r3
	rc = compute_rlen_size(&rlen_size, payload);
   2522a:	4649      	mov	r1, r9
   2522c:	f10d 0006 	add.w	r0, sp, #6
   25230:	f7ff fd4b 	bl	24cca <compute_rlen_size>
	if (rc != 0) {
   25234:	4680      	mov	r8, r0
   25236:	2800      	cmp	r0, #0
   25238:	d148      	bne.n	252cc <mqtt_pack_publish+0xd4>
	if (PACKET_TYPE_SIZE + rlen_size + payload > size) {
   2523a:	f8bd 3006 	ldrh.w	r3, [sp, #6]
   2523e:	3301      	adds	r3, #1
   25240:	444b      	add	r3, r9
   25242:	42ab      	cmp	r3, r5
   25244:	dc45      	bgt.n	252d2 <mqtt_pack_publish+0xda>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25246:	7823      	ldrb	r3, [r4, #0]
   25248:	2b00      	cmp	r3, #0
   2524a:	d03a      	beq.n	252c2 <mqtt_pack_publish+0xca>
   2524c:	2338      	movs	r3, #56	; 0x38
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   2524e:	7862      	ldrb	r2, [r4, #1]
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25250:	ea43 0342 	orr.w	r3, r3, r2, lsl #1
   25254:	b25b      	sxtb	r3, r3
		 (msg->qos << 1) | (msg->retain ? 1 : 0);
   25256:	78a2      	ldrb	r2, [r4, #2]
   25258:	2a00      	cmp	r2, #0
   2525a:	bf18      	it	ne
   2525c:	f043 0301 	orrne.w	r3, r3, #1
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   25260:	4630      	mov	r0, r6
   25262:	f800 3b01 	strb.w	r3, [r0], #1
	rlen_encode(buf + PACKET_TYPE_SIZE, payload);
   25266:	4649      	mov	r1, r9
   25268:	f7ff fd53 	bl	24d12 <rlen_encode>
	offset = PACKET_TYPE_SIZE + rlen_size;
   2526c:	f8bd 5006 	ldrh.w	r5, [sp, #6]
   25270:	1c6b      	adds	r3, r5, #1
   25272:	b29b      	uxth	r3, r3
	UNALIGNED_PUT(htons(msg->topic_len), (u16_t *)(buf + offset));
   25274:	89a1      	ldrh	r1, [r4, #12]
   25276:	0a0a      	lsrs	r2, r1, #8
   25278:	ea42 2201 	orr.w	r2, r2, r1, lsl #8
   2527c:	52f2      	strh	r2, [r6, r3]
	offset += INT_SIZE;
   2527e:	3503      	adds	r5, #3
   25280:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->topic, msg->topic_len);
   25282:	89a2      	ldrh	r2, [r4, #12]
   25284:	68a1      	ldr	r1, [r4, #8]
   25286:	1970      	adds	r0, r6, r5
   25288:	f7db f81a 	bl	2c0 <memcpy>
	offset += msg->topic_len;
   2528c:	89a3      	ldrh	r3, [r4, #12]
   2528e:	441d      	add	r5, r3
   25290:	b2ad      	uxth	r5, r5
	if (msg->qos > MQTT_QoS0) {
   25292:	7863      	ldrb	r3, [r4, #1]
   25294:	b133      	cbz	r3, 252a4 <mqtt_pack_publish+0xac>
		UNALIGNED_PUT(htons(msg->pkt_id), (u16_t *)(buf + offset));
   25296:	88a2      	ldrh	r2, [r4, #4]
   25298:	0a13      	lsrs	r3, r2, #8
   2529a:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
   2529e:	5373      	strh	r3, [r6, r5]
		offset += PACKET_ID_SIZE;
   252a0:	3502      	adds	r5, #2
   252a2:	b2ad      	uxth	r5, r5
	memcpy(buf + offset, msg->msg, msg->msg_len);
   252a4:	8aa2      	ldrh	r2, [r4, #20]
   252a6:	6921      	ldr	r1, [r4, #16]
   252a8:	1970      	adds	r0, r6, r5
   252aa:	f7db f809 	bl	2c0 <memcpy>
	offset += msg->msg_len;
   252ae:	8aa3      	ldrh	r3, [r4, #20]
   252b0:	441d      	add	r5, r3
	*length = offset;
   252b2:	803d      	strh	r5, [r7, #0]
}
   252b4:	4640      	mov	r0, r8
   252b6:	b003      	add	sp, #12
   252b8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	payload = INT_SIZE + msg->topic_len +
   252bc:	f04f 0e00 	mov.w	lr, #0
   252c0:	e7a6      	b.n	25210 <mqtt_pack_publish+0x18>
	buf[0] = (MQTT_PUBLISH << 4) | ((msg->dup ? 1 : 0) << 3) |
   252c2:	2330      	movs	r3, #48	; 0x30
   252c4:	e7c3      	b.n	2524e <mqtt_pack_publish+0x56>
		return -EINVAL;
   252c6:	f06f 0815 	mvn.w	r8, #21
   252ca:	e7f3      	b.n	252b4 <mqtt_pack_publish+0xbc>
		return -EINVAL;
   252cc:	f06f 0815 	mvn.w	r8, #21
   252d0:	e7f0      	b.n	252b4 <mqtt_pack_publish+0xbc>
		return -ENOMEM;
   252d2:	f06f 080b 	mvn.w	r8, #11
   252d6:	e7ed      	b.n	252b4 <mqtt_pack_publish+0xbc>

000252d8 <mqtt_unpack_publish>:
{
   252d8:	b5f0      	push	{r4, r5, r6, r7, lr}
   252da:	b083      	sub	sp, #12
	if (buf[0] >> 4 != MQTT_PUBLISH) {
   252dc:	7807      	ldrb	r7, [r0, #0]
   252de:	093b      	lsrs	r3, r7, #4
   252e0:	2b03      	cmp	r3, #3
   252e2:	d148      	bne.n	25376 <mqtt_unpack_publish+0x9e>
   252e4:	4615      	mov	r5, r2
   252e6:	460e      	mov	r6, r1
   252e8:	4604      	mov	r4, r0
	msg->dup = (buf[0] & 0x08) >> 3;
   252ea:	f3c7 07c0 	ubfx	r7, r7, #3, #1
   252ee:	7017      	strb	r7, [r2, #0]
	msg->qos = (buf[0] & 0x06) >> 1;
   252f0:	7803      	ldrb	r3, [r0, #0]
   252f2:	f3c3 0341 	ubfx	r3, r3, #1, #2
   252f6:	7053      	strb	r3, [r2, #1]
	msg->retain = buf[0] & 0x01;
   252f8:	4602      	mov	r2, r0
   252fa:	f812 3b01 	ldrb.w	r3, [r2], #1
   252fe:	f003 0301 	and.w	r3, r3, #1
   25302:	70ab      	strb	r3, [r5, #2]
	rc = rlen_decode(&rmlen, &rmlen_size, buf + PACKET_TYPE_SIZE,
   25304:	1e4b      	subs	r3, r1, #1
   25306:	b29b      	uxth	r3, r3
   25308:	f10d 0106 	add.w	r1, sp, #6
   2530c:	4668      	mov	r0, sp
   2530e:	f7ff fd12 	bl	24d36 <rlen_decode>
	if (rc != 0) {
   25312:	4607      	mov	r7, r0
   25314:	2800      	cmp	r0, #0
   25316:	d131      	bne.n	2537c <mqtt_unpack_publish+0xa4>
	if ((PACKET_TYPE_SIZE + rmlen_size + rmlen) > length) {
   25318:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   2531c:	9b00      	ldr	r3, [sp, #0]
   2531e:	4413      	add	r3, r2
   25320:	3301      	adds	r3, #1
   25322:	42b3      	cmp	r3, r6
   25324:	d82d      	bhi.n	25382 <mqtt_unpack_publish+0xaa>
	offset = PACKET_TYPE_SIZE + rmlen_size;
   25326:	1c53      	adds	r3, r2, #1
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   25328:	fa14 f383 	uxtah	r3, r4, r3
   2532c:	8819      	ldrh	r1, [r3, #0]
	msg->topic_len = ntohs(val_u16);
   2532e:	0a0b      	lsrs	r3, r1, #8
   25330:	ea43 2301 	orr.w	r3, r3, r1, lsl #8
   25334:	b29b      	uxth	r3, r3
   25336:	81ab      	strh	r3, [r5, #12]
	offset += INT_SIZE;
   25338:	3203      	adds	r2, #3
   2533a:	b292      	uxth	r2, r2
	if (offset + msg->topic_len > length) {
   2533c:	18d1      	adds	r1, r2, r3
   2533e:	42b1      	cmp	r1, r6
   25340:	dc22      	bgt.n	25388 <mqtt_unpack_publish+0xb0>
	msg->topic = (char *)(buf + offset);
   25342:	18a1      	adds	r1, r4, r2
   25344:	60a9      	str	r1, [r5, #8]
	offset += msg->topic_len;
   25346:	4413      	add	r3, r2
   25348:	b29b      	uxth	r3, r3
	val_u16 = UNALIGNED_GET((u16_t *)(buf + offset));
   2534a:	5ae1      	ldrh	r1, [r4, r3]
	if (msg->qos == MQTT_QoS1 || msg->qos == MQTT_QoS2) {
   2534c:	786a      	ldrb	r2, [r5, #1]
   2534e:	3a01      	subs	r2, #1
   25350:	b2d2      	uxtb	r2, r2
   25352:	2a01      	cmp	r2, #1
   25354:	d908      	bls.n	25368 <mqtt_unpack_publish+0x90>
		msg->pkt_id = 0;
   25356:	2200      	movs	r2, #0
   25358:	80aa      	strh	r2, [r5, #4]
	msg->msg_len = length - offset;
   2535a:	1af6      	subs	r6, r6, r3
   2535c:	82ae      	strh	r6, [r5, #20]
	msg->msg = buf + offset;
   2535e:	4423      	add	r3, r4
   25360:	612b      	str	r3, [r5, #16]
}
   25362:	4638      	mov	r0, r7
   25364:	b003      	add	sp, #12
   25366:	bdf0      	pop	{r4, r5, r6, r7, pc}
		msg->pkt_id = ntohs(val_u16);
   25368:	0a0a      	lsrs	r2, r1, #8
   2536a:	ea42 2101 	orr.w	r1, r2, r1, lsl #8
   2536e:	80a9      	strh	r1, [r5, #4]
		offset += PACKET_ID_SIZE;
   25370:	3302      	adds	r3, #2
   25372:	b29b      	uxth	r3, r3
   25374:	e7f1      	b.n	2535a <mqtt_unpack_publish+0x82>
		return -EINVAL;
   25376:	f06f 0715 	mvn.w	r7, #21
   2537a:	e7f2      	b.n	25362 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   2537c:	f06f 0715 	mvn.w	r7, #21
   25380:	e7ef      	b.n	25362 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25382:	f06f 0715 	mvn.w	r7, #21
   25386:	e7ec      	b.n	25362 <mqtt_unpack_publish+0x8a>
		return -EINVAL;
   25388:	f06f 0715 	mvn.w	r7, #21
   2538c:	e7e9      	b.n	25362 <mqtt_unpack_publish+0x8a>

0002538e <mqtt_unpack_connack>:
	if (length < CONNACK_SIZE) {
   2538e:	2903      	cmp	r1, #3
   25390:	d90d      	bls.n	253ae <mqtt_unpack_connack+0x20>
	if (buf[0] != (MQTT_CONNACK << 4) || buf[1] != 2) {
   25392:	7801      	ldrb	r1, [r0, #0]
   25394:	2920      	cmp	r1, #32
   25396:	d10d      	bne.n	253b4 <mqtt_unpack_connack+0x26>
   25398:	7841      	ldrb	r1, [r0, #1]
   2539a:	2902      	cmp	r1, #2
   2539c:	d10d      	bne.n	253ba <mqtt_unpack_connack+0x2c>
	if (buf[2] > 1) {
   2539e:	7881      	ldrb	r1, [r0, #2]
   253a0:	2901      	cmp	r1, #1
   253a2:	d80d      	bhi.n	253c0 <mqtt_unpack_connack+0x32>
	*session = buf[2];
   253a4:	7011      	strb	r1, [r2, #0]
	*connect_rc = buf[3];
   253a6:	78c2      	ldrb	r2, [r0, #3]
   253a8:	701a      	strb	r2, [r3, #0]
	return 0;
   253aa:	2000      	movs	r0, #0
   253ac:	4770      	bx	lr
		return -EINVAL;
   253ae:	f06f 0015 	mvn.w	r0, #21
   253b2:	4770      	bx	lr
		return -EINVAL;
   253b4:	f06f 0015 	mvn.w	r0, #21
   253b8:	4770      	bx	lr
   253ba:	f06f 0015 	mvn.w	r0, #21
   253be:	4770      	bx	lr
		return -EINVAL;
   253c0:	f06f 0015 	mvn.w	r0, #21
}
   253c4:	4770      	bx	lr

000253c6 <mqtt_pack_disconnect>:
{
   253c6:	b500      	push	{lr}
   253c8:	b083      	sub	sp, #12
	return pack_zerolen(buf, length, size, MQTT_DISCONNECT, 0x00);
   253ca:	2300      	movs	r3, #0
   253cc:	9300      	str	r3, [sp, #0]
   253ce:	230e      	movs	r3, #14
   253d0:	f7ff fceb 	bl	24daa <pack_zerolen>
}
   253d4:	b003      	add	sp, #12
   253d6:	f85d fb04 	ldr.w	pc, [sp], #4

000253da <mqtt_unpack_puback>:
{
   253da:	b500      	push	{lr}
   253dc:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBACK,
   253de:	2300      	movs	r3, #0
   253e0:	9300      	str	r3, [sp, #0]
   253e2:	2304      	movs	r3, #4
   253e4:	f7ff fd0e 	bl	24e04 <unpack_pktid_validate>
}
   253e8:	b003      	add	sp, #12
   253ea:	f85d fb04 	ldr.w	pc, [sp], #4

000253ee <mqtt_unpack_pubrec>:
{
   253ee:	b500      	push	{lr}
   253f0:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREC,
   253f2:	2300      	movs	r3, #0
   253f4:	9300      	str	r3, [sp, #0]
   253f6:	2305      	movs	r3, #5
   253f8:	f7ff fd04 	bl	24e04 <unpack_pktid_validate>
}
   253fc:	b003      	add	sp, #12
   253fe:	f85d fb04 	ldr.w	pc, [sp], #4

00025402 <mqtt_unpack_pubrel>:
{
   25402:	b500      	push	{lr}
   25404:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBREL,
   25406:	2302      	movs	r3, #2
   25408:	9300      	str	r3, [sp, #0]
   2540a:	2306      	movs	r3, #6
   2540c:	f7ff fcfa 	bl	24e04 <unpack_pktid_validate>
}
   25410:	b003      	add	sp, #12
   25412:	f85d fb04 	ldr.w	pc, [sp], #4

00025416 <mqtt_unpack_pubcomp>:
{
   25416:	b500      	push	{lr}
   25418:	b083      	sub	sp, #12
	return unpack_pktid_validate(buf, length, pkt_id, MQTT_PUBCOMP,
   2541a:	2300      	movs	r3, #0
   2541c:	9300      	str	r3, [sp, #0]
   2541e:	2307      	movs	r3, #7
   25420:	f7ff fcf0 	bl	24e04 <unpack_pktid_validate>
}
   25424:	b003      	add	sp, #12
   25426:	f85d fb04 	ldr.w	pc, [sp], #4

0002542a <mqtt_unpack_pingresp>:
{
	return unpack_zerolen_validate(buf, length, MQTT_PINGREQ, 0x00);
}

int mqtt_unpack_pingresp(u8_t *buf, u16_t length)
{
   2542a:	b508      	push	{r3, lr}
	return unpack_zerolen_validate(buf, length, MQTT_PINGRESP, 0x00);
   2542c:	2300      	movs	r3, #0
   2542e:	220d      	movs	r2, #13
   25430:	f7ff fd1a 	bl	24e68 <unpack_zerolen_validate>
}
   25434:	bd08      	pop	{r3, pc}
	...

00025438 <mqtt_rx_pub_msgs>:
 * @retval -EINVAL on error
 */
static
int mqtt_rx_pub_msgs(struct mqtt_ctx *ctx, struct net_buf *rx,
		     enum mqtt_packet type)
{
   25438:	b5f0      	push	{r4, r5, r6, r7, lr}
   2543a:	b083      	sub	sp, #12
	u16_t pkt_id;
	u16_t len;
	u8_t *data;
	int rc;

	switch (type) {
   2543c:	1f13      	subs	r3, r2, #4
   2543e:	2b03      	cmp	r3, #3
   25440:	d840      	bhi.n	254c4 <mqtt_rx_pub_msgs+0x8c>
   25442:	e8df f003 	tbb	[pc, r3]
   25446:	0502      	.short	0x0502
   25448:	0b08      	.short	0x0b08
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2544a:	2600      	movs	r6, #0
	case MQTT_PUBACK:
		unpack = mqtt_unpack_puback;
   2544c:	4f22      	ldr	r7, [pc, #136]	; (254d8 <mqtt_rx_pub_msgs+0xa0>)
   2544e:	e007      	b.n	25460 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBCOMP:
		unpack = mqtt_unpack_pubcomp;
		break;
	case MQTT_PUBREC:
		unpack = mqtt_unpack_pubrec;
		response = mqtt_tx_pubrel;
   25450:	4e22      	ldr	r6, [pc, #136]	; (254dc <mqtt_rx_pub_msgs+0xa4>)
		unpack = mqtt_unpack_pubrec;
   25452:	4f23      	ldr	r7, [pc, #140]	; (254e0 <mqtt_rx_pub_msgs+0xa8>)
		break;
   25454:	e004      	b.n	25460 <mqtt_rx_pub_msgs+0x28>
	case MQTT_PUBREL:
		unpack = mqtt_unpack_pubrel;
		response = mqtt_tx_pubcomp;
   25456:	4e23      	ldr	r6, [pc, #140]	; (254e4 <mqtt_rx_pub_msgs+0xac>)
		unpack = mqtt_unpack_pubrel;
   25458:	4f23      	ldr	r7, [pc, #140]	; (254e8 <mqtt_rx_pub_msgs+0xb0>)
		break;
   2545a:	e001      	b.n	25460 <mqtt_rx_pub_msgs+0x28>
	int (*response)(struct mqtt_ctx *, u16_t) = NULL;
   2545c:	2600      	movs	r6, #0
		unpack = mqtt_unpack_pubcomp;
   2545e:	4f23      	ldr	r7, [pc, #140]	; (254ec <mqtt_rx_pub_msgs+0xb4>)
   25460:	4614      	mov	r4, r2
   25462:	460b      	mov	r3, r1
   25464:	4605      	mov	r5, r0

	data = rx->data;
	len = rx->len;

	/* 4 bytes message */
	rc = unpack(data, len, &pkt_id);
   25466:	f10d 0206 	add.w	r2, sp, #6
   2546a:	8989      	ldrh	r1, [r1, #12]
   2546c:	6898      	ldr	r0, [r3, #8]
   2546e:	47b8      	blx	r7
	if (rc != 0) {
   25470:	bb58      	cbnz	r0, 254ca <mqtt_rx_pub_msgs+0x92>
	}

	/* Only MQTT_APP_SUBSCRIBER, MQTT_APP_PUBLISHER_SUBSCRIBER and
	 * MQTT_APP_SERVER apps must receive the MQTT_PUBREL msg.
	 */
	if (type == MQTT_PUBREL) {
   25472:	2c06      	cmp	r4, #6
   25474:	d012      	beq.n	2549c <mqtt_rx_pub_msgs+0x64>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
		} else {
			rc = -EINVAL;
		}
	} else {
		rc = ctx->publish_tx(ctx, pkt_id, type);
   25476:	f8d5 3090 	ldr.w	r3, [r5, #144]	; 0x90
   2547a:	4622      	mov	r2, r4
   2547c:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   25480:	4628      	mov	r0, r5
   25482:	4798      	blx	r3
   25484:	4603      	mov	r3, r0
	}

	if (rc != 0) {
   25486:	bb1b      	cbnz	r3, 254d0 <mqtt_rx_pub_msgs+0x98>
		return -EINVAL;
	}

	if (!response)  {
   25488:	b12e      	cbz	r6, 25496 <mqtt_rx_pub_msgs+0x5e>
		return 0;
	}

	rc = response(ctx, pkt_id);
   2548a:	f8bd 1006 	ldrh.w	r1, [sp, #6]
   2548e:	4628      	mov	r0, r5
   25490:	47b0      	blx	r6
	if (rc != 0) {
   25492:	4603      	mov	r3, r0
   25494:	b998      	cbnz	r0, 254be <mqtt_rx_pub_msgs+0x86>
		return -EINVAL;
	}

	return 0;
}
   25496:	4618      	mov	r0, r3
   25498:	b003      	add	sp, #12
   2549a:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (ctx->app_type != MQTT_APP_PUBLISHER) {
   2549c:	f895 30a8 	ldrb.w	r3, [r5, #168]	; 0xa8
   254a0:	2b01      	cmp	r3, #1
   254a2:	d009      	beq.n	254b8 <mqtt_rx_pub_msgs+0x80>
			rc = ctx->publish_rx(ctx, NULL, pkt_id, MQTT_PUBREL);
   254a4:	f8d5 4094 	ldr.w	r4, [r5, #148]	; 0x94
   254a8:	2306      	movs	r3, #6
   254aa:	f8bd 2006 	ldrh.w	r2, [sp, #6]
   254ae:	2100      	movs	r1, #0
   254b0:	4628      	mov	r0, r5
   254b2:	47a0      	blx	r4
   254b4:	4603      	mov	r3, r0
   254b6:	e7e6      	b.n	25486 <mqtt_rx_pub_msgs+0x4e>
			rc = -EINVAL;
   254b8:	f06f 0315 	mvn.w	r3, #21
   254bc:	e7e3      	b.n	25486 <mqtt_rx_pub_msgs+0x4e>
		return -EINVAL;
   254be:	f06f 0315 	mvn.w	r3, #21
   254c2:	e7e8      	b.n	25496 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   254c4:	f06f 0315 	mvn.w	r3, #21
   254c8:	e7e5      	b.n	25496 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   254ca:	f06f 0315 	mvn.w	r3, #21
   254ce:	e7e2      	b.n	25496 <mqtt_rx_pub_msgs+0x5e>
		return -EINVAL;
   254d0:	f06f 0315 	mvn.w	r3, #21
   254d4:	e7df      	b.n	25496 <mqtt_rx_pub_msgs+0x5e>
   254d6:	bf00      	nop
   254d8:	000253db 	.word	0x000253db
   254dc:	000255cf 	.word	0x000255cf
   254e0:	000253ef 	.word	0x000253ef
   254e4:	000255c5 	.word	0x000255c5
   254e8:	00025403 	.word	0x00025403
   254ec:	00025417 	.word	0x00025417

000254f0 <app_connected>:
	return rc;
}

static
void app_connected(struct net_app_ctx *ctx, int status, void *data)
{
   254f0:	4770      	bx	lr

000254f2 <app_recv>:
	struct mqtt_ctx *mqtt = (struct mqtt_ctx *)data;

	/* net_app_ctx is already referenced to by the mqtt_ctx struct */
	ARG_UNUSED(ctx);

	if (status || !pkt) {
   254f2:	b96a      	cbnz	r2, 25510 <app_recv+0x1e>
   254f4:	b161      	cbz	r1, 25510 <app_recv+0x1e>
{
   254f6:	b510      	push	{r4, lr}
   254f8:	460c      	mov	r4, r1
	return pkt->appdatalen;
   254fa:	8e0a      	ldrh	r2, [r1, #48]	; 0x30
		return;
	}

	if (net_pkt_appdatalen(pkt) == 0) {
   254fc:	b91a      	cbnz	r2, 25506 <app_recv+0x14>
	}

	mqtt->rcv(mqtt, pkt);

lb_exit:
	net_pkt_unref(pkt);
   254fe:	4620      	mov	r0, r4
   25500:	f7f7 fc9b 	bl	1ce3a <net_pkt_unref>
   25504:	bd10      	pop	{r4, pc}
	mqtt->rcv(mqtt, pkt);
   25506:	f8d3 20a4 	ldr.w	r2, [r3, #164]	; 0xa4
   2550a:	4618      	mov	r0, r3
   2550c:	4790      	blx	r2
   2550e:	e7f6      	b.n	254fe <app_recv+0xc>
   25510:	4770      	bx	lr

00025512 <mqtt_tx_pub_msgs>:
{
   25512:	b570      	push	{r4, r5, r6, lr}
   25514:	b084      	sub	sp, #16
   25516:	4604      	mov	r4, r0
	switch (pkt_type) {
   25518:	3a04      	subs	r2, #4
   2551a:	2a03      	cmp	r2, #3
   2551c:	d849      	bhi.n	255b2 <mqtt_tx_pub_msgs+0xa0>
   2551e:	e8df f002 	tbb	[pc, r2]
   25522:	2c02      	.short	0x2c02
   25524:	2434      	.short	0x2434
		rc = mqtt_pack_puback(msg, &len, sizeof(msg), id);
   25526:	460b      	mov	r3, r1
   25528:	2204      	movs	r2, #4
   2552a:	f10d 010a 	add.w	r1, sp, #10
   2552e:	a803      	add	r0, sp, #12
   25530:	f7ff fcb7 	bl	24ea2 <mqtt_pack_puback>
	if (rc != 0) {
   25534:	2800      	cmp	r0, #0
   25536:	d13f      	bne.n	255b8 <mqtt_tx_pub_msgs+0xa6>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25538:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   2553a:	2100      	movs	r1, #0
   2553c:	4620      	mov	r0, r4
   2553e:	f000 fe09 	bl	26154 <net_app_get_net_pkt>
	if (tx == NULL) {
   25542:	4605      	mov	r5, r0
   25544:	2800      	cmp	r0, #0
   25546:	d03a      	beq.n	255be <mqtt_tx_pub_msgs+0xac>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   25548:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   2554c:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2554e:	aa03      	add	r2, sp, #12
   25550:	4631      	mov	r1, r6
   25552:	f7f7 fdaa 	bl	1d0aa <net_pkt_append>
	if (rc != true) {
   25556:	4286      	cmp	r6, r0
   25558:	d01f      	beq.n	2559a <mqtt_tx_pub_msgs+0x88>
		rc = -ENOMEM;
   2555a:	f06f 040b 	mvn.w	r4, #11
	net_pkt_unref(tx);
   2555e:	4628      	mov	r0, r5
   25560:	f7f7 fc6b 	bl	1ce3a <net_pkt_unref>
}
   25564:	4620      	mov	r0, r4
   25566:	b004      	add	sp, #16
   25568:	bd70      	pop	{r4, r5, r6, pc}
		rc = mqtt_pack_pubcomp(msg, &len, sizeof(msg), id);
   2556a:	460b      	mov	r3, r1
   2556c:	2204      	movs	r2, #4
   2556e:	f10d 010a 	add.w	r1, sp, #10
   25572:	a803      	add	r0, sp, #12
   25574:	f7ff fcb6 	bl	24ee4 <mqtt_pack_pubcomp>
		break;
   25578:	e7dc      	b.n	25534 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrec(msg, &len, sizeof(msg), id);
   2557a:	460b      	mov	r3, r1
   2557c:	2204      	movs	r2, #4
   2557e:	f10d 010a 	add.w	r1, sp, #10
   25582:	a803      	add	r0, sp, #12
   25584:	f7ff fc98 	bl	24eb8 <mqtt_pack_pubrec>
		break;
   25588:	e7d4      	b.n	25534 <mqtt_tx_pub_msgs+0x22>
		rc = mqtt_pack_pubrel(msg, &len, sizeof(msg), id);
   2558a:	460b      	mov	r3, r1
   2558c:	2204      	movs	r2, #4
   2558e:	f10d 010a 	add.w	r1, sp, #10
   25592:	a803      	add	r0, sp, #12
   25594:	f7ff fc9b 	bl	24ece <mqtt_pack_pubrel>
		break;
   25598:	e7cc      	b.n	25534 <mqtt_tx_pub_msgs+0x22>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   2559a:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   2559c:	2200      	movs	r2, #0
   2559e:	9201      	str	r2, [sp, #4]
   255a0:	9300      	str	r3, [sp, #0]
   255a2:	4613      	mov	r3, r2
   255a4:	4629      	mov	r1, r5
   255a6:	4620      	mov	r0, r4
   255a8:	f000 fd58 	bl	2605c <net_app_send_pkt>
	if (rc < 0) {
   255ac:	1e04      	subs	r4, r0, #0
   255ae:	dad9      	bge.n	25564 <mqtt_tx_pub_msgs+0x52>
   255b0:	e7d5      	b.n	2555e <mqtt_tx_pub_msgs+0x4c>
		return -EINVAL;
   255b2:	f06f 0415 	mvn.w	r4, #21
   255b6:	e7d5      	b.n	25564 <mqtt_tx_pub_msgs+0x52>
		return -EINVAL;
   255b8:	f06f 0415 	mvn.w	r4, #21
   255bc:	e7d2      	b.n	25564 <mqtt_tx_pub_msgs+0x52>
		return -ENOMEM;
   255be:	f06f 040b 	mvn.w	r4, #11
   255c2:	e7cf      	b.n	25564 <mqtt_tx_pub_msgs+0x52>

000255c4 <mqtt_tx_pubcomp>:
{
   255c4:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBCOMP);
   255c6:	2207      	movs	r2, #7
   255c8:	f7ff ffa3 	bl	25512 <mqtt_tx_pub_msgs>
}
   255cc:	bd08      	pop	{r3, pc}

000255ce <mqtt_tx_pubrel>:
{
   255ce:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREL);
   255d0:	2206      	movs	r2, #6
   255d2:	f7ff ff9e 	bl	25512 <mqtt_tx_pub_msgs>
}
   255d6:	bd08      	pop	{r3, pc}

000255d8 <mqtt_linearize_packet>:
{
   255d8:	b570      	push	{r4, r5, r6, lr}
	return pkt->appdatalen;
   255da:	8e0d      	ldrh	r5, [r1, #48]	; 0x30
	if (data_len < min_size || data_len > CONFIG_MQTT_MSG_MAX_SIZE) {
   255dc:	42aa      	cmp	r2, r5
   255de:	d820      	bhi.n	25622 <mqtt_linearize_packet+0x4a>
   255e0:	2d80      	cmp	r5, #128	; 0x80
   255e2:	d820      	bhi.n	25626 <mqtt_linearize_packet+0x4e>
   255e4:	460c      	mov	r4, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   255e6:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   255e8:	4810      	ldr	r0, [pc, #64]	; (2562c <mqtt_linearize_packet+0x54>)
   255ea:	f7f4 fe49 	bl	1a280 <net_buf_alloc>
	if (data == NULL) {
   255ee:	4606      	mov	r6, r0
   255f0:	b180      	cbz	r0, 25614 <mqtt_linearize_packet+0x3c>
	return net_buf_frags_len(pkt->frags);
   255f2:	68a1      	ldr	r1, [r4, #8]
   255f4:	460c      	mov	r4, r1
	size_t bytes = 0;
   255f6:	2200      	movs	r2, #0
   255f8:	e002      	b.n	25600 <mqtt_linearize_packet+0x28>
		bytes += buf->len;
   255fa:	89a3      	ldrh	r3, [r4, #12]
   255fc:	441a      	add	r2, r3
		buf = buf->frags;
   255fe:	6824      	ldr	r4, [r4, #0]
	while (buf) {
   25600:	2c00      	cmp	r4, #0
   25602:	d1fa      	bne.n	255fa <mqtt_linearize_packet+0x22>
	offset = net_pkt_get_len(rx) - data_len;
   25604:	b292      	uxth	r2, r2
   25606:	1b52      	subs	r2, r2, r5
	rc = net_frag_linear_copy(data, rx->frags, offset, data_len);
   25608:	462b      	mov	r3, r5
   2560a:	b292      	uxth	r2, r2
   2560c:	4630      	mov	r0, r6
   2560e:	f7f7 fcc7 	bl	1cfa0 <net_frag_linear_copy>
	if (rc != 0) {
   25612:	b908      	cbnz	r0, 25618 <mqtt_linearize_packet+0x40>
}
   25614:	4630      	mov	r0, r6
   25616:	bd70      	pop	{r4, r5, r6, pc}
	net_pkt_frag_unref(data);
   25618:	4630      	mov	r0, r6
   2561a:	f7f7 fc08 	bl	1ce2e <net_pkt_frag_unref>
	return NULL;
   2561e:	4626      	mov	r6, r4
   25620:	e7f8      	b.n	25614 <mqtt_linearize_packet+0x3c>
		return NULL;
   25622:	2600      	movs	r6, #0
   25624:	e7f6      	b.n	25614 <mqtt_linearize_packet+0x3c>
   25626:	2600      	movs	r6, #0
   25628:	e7f4      	b.n	25614 <mqtt_linearize_packet+0x3c>
   2562a:	bf00      	nop
   2562c:	2000cd88 	.word	0x2000cd88

00025630 <mqtt_tx_connect>:
{
   25630:	b570      	push	{r4, r5, r6, lr}
   25632:	b082      	sub	sp, #8
   25634:	4604      	mov	r4, r0
   25636:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25638:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   2563a:	481d      	ldr	r0, [pc, #116]	; (256b0 <mqtt_tx_connect+0x80>)
   2563c:	f7f4 fe20 	bl	1a280 <net_buf_alloc>
	if (data == NULL) {
   25640:	b398      	cbz	r0, 256aa <mqtt_tx_connect+0x7a>
   25642:	4605      	mov	r5, r0
	ctx->clean_session = msg->clean_session ? 1 : 0;
   25644:	7832      	ldrb	r2, [r6, #0]
   25646:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   2564a:	f362 0300 	bfi	r3, r2, #0, #1
   2564e:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	rc = mqtt_pack_connect(data->data, &data->len, MSG_SIZE, msg);
   25652:	4633      	mov	r3, r6
   25654:	2280      	movs	r2, #128	; 0x80
   25656:	f100 010c 	add.w	r1, r0, #12
   2565a:	6880      	ldr	r0, [r0, #8]
   2565c:	f7ff fc4d 	bl	24efa <mqtt_pack_connect>
	if (rc != 0) {
   25660:	b9c0      	cbnz	r0, 25694 <mqtt_tx_connect+0x64>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   25662:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   25664:	2100      	movs	r1, #0
   25666:	4620      	mov	r0, r4
   25668:	f000 fd74 	bl	26154 <net_app_get_net_pkt>
	if (tx == NULL) {
   2566c:	4606      	mov	r6, r0
   2566e:	b1c8      	cbz	r0, 256a4 <mqtt_tx_connect+0x74>
	net_pkt_frag_add(tx, data);
   25670:	4629      	mov	r1, r5
   25672:	f7f7 fc0c 	bl	1ce8e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25676:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   25678:	2200      	movs	r2, #0
   2567a:	9201      	str	r2, [sp, #4]
   2567c:	9300      	str	r3, [sp, #0]
   2567e:	4613      	mov	r3, r2
   25680:	4631      	mov	r1, r6
   25682:	4620      	mov	r0, r4
   25684:	f000 fcea 	bl	2605c <net_app_send_pkt>
	if (rc < 0) {
   25688:	1e04      	subs	r4, r0, #0
   2568a:	da08      	bge.n	2569e <mqtt_tx_connect+0x6e>
		net_pkt_unref(tx);
   2568c:	4630      	mov	r0, r6
   2568e:	f7f7 fbd4 	bl	1ce3a <net_pkt_unref>
   25692:	e004      	b.n	2569e <mqtt_tx_connect+0x6e>
		rc = -EINVAL;
   25694:	f06f 0415 	mvn.w	r4, #21
	net_pkt_frag_unref(data);
   25698:	4628      	mov	r0, r5
   2569a:	f7f7 fbc8 	bl	1ce2e <net_pkt_frag_unref>
}
   2569e:	4620      	mov	r0, r4
   256a0:	b002      	add	sp, #8
   256a2:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   256a4:	f06f 040b 	mvn.w	r4, #11
   256a8:	e7f6      	b.n	25698 <mqtt_tx_connect+0x68>
		return -ENOMEM;
   256aa:	f06f 040b 	mvn.w	r4, #11
   256ae:	e7f6      	b.n	2569e <mqtt_tx_connect+0x6e>
   256b0:	2000cd88 	.word	0x2000cd88

000256b4 <mqtt_tx_disconnect>:
{
   256b4:	b570      	push	{r4, r5, r6, lr}
   256b6:	b084      	sub	sp, #16
   256b8:	4604      	mov	r4, r0
	rc = mqtt_pack_disconnect(msg, &len, sizeof(msg));
   256ba:	2202      	movs	r2, #2
   256bc:	f10d 010a 	add.w	r1, sp, #10
   256c0:	a803      	add	r0, sp, #12
   256c2:	f7ff fe80 	bl	253c6 <mqtt_pack_disconnect>
	if (rc != 0) {
   256c6:	bb78      	cbnz	r0, 25728 <mqtt_tx_disconnect+0x74>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   256c8:	6fe2      	ldr	r2, [r4, #124]	; 0x7c
   256ca:	2100      	movs	r1, #0
   256cc:	4620      	mov	r0, r4
   256ce:	f000 fd41 	bl	26154 <net_app_get_net_pkt>
	if (tx == NULL) {
   256d2:	4605      	mov	r5, r0
   256d4:	b358      	cbz	r0, 2572e <mqtt_tx_disconnect+0x7a>
	rc = net_pkt_append_all(tx, len, msg, ctx->net_timeout);
   256d6:	f8bd 600a 	ldrh.w	r6, [sp, #10]
	return net_pkt_append(pkt, len, data, timeout) == len;
   256da:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   256dc:	aa03      	add	r2, sp, #12
   256de:	4631      	mov	r1, r6
   256e0:	f7f7 fce3 	bl	1d0aa <net_pkt_append>
	if (rc != true) {
   256e4:	4286      	cmp	r6, r0
   256e6:	d007      	beq.n	256f8 <mqtt_tx_disconnect+0x44>
		rc = -ENOMEM;
   256e8:	f06f 060b 	mvn.w	r6, #11
	net_pkt_unref(tx);
   256ec:	4628      	mov	r0, r5
   256ee:	f7f7 fba4 	bl	1ce3a <net_pkt_unref>
}
   256f2:	4630      	mov	r0, r6
   256f4:	b004      	add	sp, #16
   256f6:	bd70      	pop	{r4, r5, r6, pc}
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   256f8:	6fe3      	ldr	r3, [r4, #124]	; 0x7c
   256fa:	2200      	movs	r2, #0
   256fc:	9201      	str	r2, [sp, #4]
   256fe:	9300      	str	r3, [sp, #0]
   25700:	4613      	mov	r3, r2
   25702:	4629      	mov	r1, r5
   25704:	4620      	mov	r0, r4
   25706:	f000 fca9 	bl	2605c <net_app_send_pkt>
	if (rc < 0) {
   2570a:	1e06      	subs	r6, r0, #0
   2570c:	dbee      	blt.n	256ec <mqtt_tx_disconnect+0x38>
	ctx->connected = 0;
   2570e:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   25712:	f36f 0341 	bfc	r3, #1, #1
   25716:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->disconnect) {
   2571a:	f8d4 308c 	ldr.w	r3, [r4, #140]	; 0x8c
   2571e:	2b00      	cmp	r3, #0
   25720:	d0e7      	beq.n	256f2 <mqtt_tx_disconnect+0x3e>
		ctx->disconnect(ctx);
   25722:	4620      	mov	r0, r4
   25724:	4798      	blx	r3
   25726:	e7e4      	b.n	256f2 <mqtt_tx_disconnect+0x3e>
		return -EINVAL;
   25728:	f06f 0615 	mvn.w	r6, #21
   2572c:	e7e1      	b.n	256f2 <mqtt_tx_disconnect+0x3e>
		return -ENOMEM;
   2572e:	f06f 060b 	mvn.w	r6, #11
   25732:	e7de      	b.n	256f2 <mqtt_tx_disconnect+0x3e>

00025734 <mqtt_tx_puback>:
{
   25734:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBACK);
   25736:	2204      	movs	r2, #4
   25738:	f7ff feeb 	bl	25512 <mqtt_tx_pub_msgs>
}
   2573c:	bd08      	pop	{r3, pc}

0002573e <mqtt_tx_pubrec>:
{
   2573e:	b508      	push	{r3, lr}
	return mqtt_tx_pub_msgs(ctx, id, MQTT_PUBREC);
   25740:	2205      	movs	r2, #5
   25742:	f7ff fee6 	bl	25512 <mqtt_tx_pub_msgs>
}
   25746:	bd08      	pop	{r3, pc}

00025748 <mqtt_tx_publish>:
{
   25748:	b570      	push	{r4, r5, r6, lr}
   2574a:	b082      	sub	sp, #8
   2574c:	4605      	mov	r5, r0
   2574e:	460e      	mov	r6, r1
	data = net_buf_alloc(&mqtt_msg_pool, ctx->net_timeout);
   25750:	6fc1      	ldr	r1, [r0, #124]	; 0x7c
   25752:	481a      	ldr	r0, [pc, #104]	; (257bc <mqtt_tx_publish+0x74>)
   25754:	f7f4 fd94 	bl	1a280 <net_buf_alloc>
	if (data == NULL) {
   25758:	b360      	cbz	r0, 257b4 <mqtt_tx_publish+0x6c>
   2575a:	4604      	mov	r4, r0
	rc = mqtt_pack_publish(data->data, &data->len, data->size, msg);
   2575c:	4633      	mov	r3, r6
   2575e:	89c2      	ldrh	r2, [r0, #14]
   25760:	f100 010c 	add.w	r1, r0, #12
   25764:	6880      	ldr	r0, [r0, #8]
   25766:	f7ff fd47 	bl	251f8 <mqtt_pack_publish>
	if (rc != 0) {
   2576a:	b9c0      	cbnz	r0, 2579e <mqtt_tx_publish+0x56>
	tx = net_app_get_net_pkt(&ctx->net_app_ctx,
   2576c:	6fea      	ldr	r2, [r5, #124]	; 0x7c
   2576e:	2100      	movs	r1, #0
   25770:	4628      	mov	r0, r5
   25772:	f000 fcef 	bl	26154 <net_app_get_net_pkt>
	if (tx == NULL) {
   25776:	4606      	mov	r6, r0
   25778:	b1c8      	cbz	r0, 257ae <mqtt_tx_publish+0x66>
	net_pkt_frag_add(tx, data);
   2577a:	4621      	mov	r1, r4
   2577c:	f7f7 fb87 	bl	1ce8e <net_pkt_frag_add>
	rc = net_app_send_pkt(&ctx->net_app_ctx,
   25780:	6feb      	ldr	r3, [r5, #124]	; 0x7c
   25782:	2200      	movs	r2, #0
   25784:	9201      	str	r2, [sp, #4]
   25786:	9300      	str	r3, [sp, #0]
   25788:	4613      	mov	r3, r2
   2578a:	4631      	mov	r1, r6
   2578c:	4628      	mov	r0, r5
   2578e:	f000 fc65 	bl	2605c <net_app_send_pkt>
	if (rc < 0) {
   25792:	1e05      	subs	r5, r0, #0
   25794:	da08      	bge.n	257a8 <mqtt_tx_publish+0x60>
		net_pkt_unref(tx);
   25796:	4630      	mov	r0, r6
   25798:	f7f7 fb4f 	bl	1ce3a <net_pkt_unref>
   2579c:	e004      	b.n	257a8 <mqtt_tx_publish+0x60>
		rc = -EINVAL;
   2579e:	f06f 0515 	mvn.w	r5, #21
	net_pkt_frag_unref(data);
   257a2:	4620      	mov	r0, r4
   257a4:	f7f7 fb43 	bl	1ce2e <net_pkt_frag_unref>
}
   257a8:	4628      	mov	r0, r5
   257aa:	b002      	add	sp, #8
   257ac:	bd70      	pop	{r4, r5, r6, pc}
		rc = -ENOMEM;
   257ae:	f06f 050b 	mvn.w	r5, #11
   257b2:	e7f6      	b.n	257a2 <mqtt_tx_publish+0x5a>
		return -ENOMEM;
   257b4:	f06f 050b 	mvn.w	r5, #11
   257b8:	e7f6      	b.n	257a8 <mqtt_tx_publish+0x60>
   257ba:	bf00      	nop
   257bc:	2000cd88 	.word	0x2000cd88

000257c0 <mqtt_rx_connack>:
{
   257c0:	b570      	push	{r4, r5, r6, lr}
   257c2:	b082      	sub	sp, #8
   257c4:	4604      	mov	r4, r0
   257c6:	4608      	mov	r0, r1
   257c8:	4616      	mov	r6, r2
	rc = mqtt_unpack_connack(data, len, &session, &connect_rc);
   257ca:	f10d 0307 	add.w	r3, sp, #7
   257ce:	f10d 0206 	add.w	r2, sp, #6
   257d2:	8989      	ldrh	r1, [r1, #12]
   257d4:	6880      	ldr	r0, [r0, #8]
   257d6:	f7ff fdda 	bl	2538e <mqtt_unpack_connack>
	if (rc != 0) {
   257da:	b998      	cbnz	r0, 25804 <mqtt_rx_connack+0x44>
   257dc:	4605      	mov	r5, r0
	switch (clean_session) {
   257de:	2e01      	cmp	r6, #1
   257e0:	d113      	bne.n	2580a <mqtt_rx_connack+0x4a>
		if (/*session == 0 && */connect_rc == 0) {
   257e2:	f89d 3007 	ldrb.w	r3, [sp, #7]
   257e6:	b99b      	cbnz	r3, 25810 <mqtt_rx_connack+0x50>
	ctx->connected = 1;
   257e8:	f894 30a9 	ldrb.w	r3, [r4, #169]	; 0xa9
   257ec:	f043 0302 	orr.w	r3, r3, #2
   257f0:	f884 30a9 	strb.w	r3, [r4, #169]	; 0xa9
	if (ctx->connect) {
   257f4:	f8d4 3088 	ldr.w	r3, [r4, #136]	; 0x88
   257f8:	b10b      	cbz	r3, 257fe <mqtt_rx_connack+0x3e>
		ctx->connect(ctx);
   257fa:	4620      	mov	r0, r4
   257fc:	4798      	blx	r3
}
   257fe:	4628      	mov	r0, r5
   25800:	b002      	add	sp, #8
   25802:	bd70      	pop	{r4, r5, r6, pc}
		rc = -EINVAL;
   25804:	f06f 0515 	mvn.w	r5, #21
   25808:	e7f9      	b.n	257fe <mqtt_rx_connack+0x3e>
		rc = -EINVAL;
   2580a:	f06f 0515 	mvn.w	r5, #21
   2580e:	e7f6      	b.n	257fe <mqtt_rx_connack+0x3e>
			rc = -EINVAL;
   25810:	f06f 0515 	mvn.w	r5, #21
	return rc;
   25814:	e7f3      	b.n	257fe <mqtt_rx_connack+0x3e>

00025816 <mqtt_rx_puback>:
{
   25816:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBACK);
   25818:	2204      	movs	r2, #4
   2581a:	f7ff fe0d 	bl	25438 <mqtt_rx_pub_msgs>
}
   2581e:	bd08      	pop	{r3, pc}

00025820 <mqtt_rx_pubcomp>:
{
   25820:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBCOMP);
   25822:	2207      	movs	r2, #7
   25824:	f7ff fe08 	bl	25438 <mqtt_rx_pub_msgs>
}
   25828:	bd08      	pop	{r3, pc}

0002582a <mqtt_rx_pubrec>:
{
   2582a:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREC);
   2582c:	2205      	movs	r2, #5
   2582e:	f7ff fe03 	bl	25438 <mqtt_rx_pub_msgs>
}
   25832:	bd08      	pop	{r3, pc}

00025834 <mqtt_rx_pubrel>:
{
   25834:	b508      	push	{r3, lr}
	return mqtt_rx_pub_msgs(ctx, rx, MQTT_PUBREL);
   25836:	2206      	movs	r2, #6
   25838:	f7ff fdfe 	bl	25438 <mqtt_rx_pub_msgs>
}
   2583c:	bd08      	pop	{r3, pc}

0002583e <mqtt_rx_pingresp>:
{
   2583e:	b508      	push	{r3, lr}
   25840:	460b      	mov	r3, r1
	rc = mqtt_unpack_pingresp(rx->data, rx->len);
   25842:	8989      	ldrh	r1, [r1, #12]
   25844:	6898      	ldr	r0, [r3, #8]
   25846:	f7ff fdf0 	bl	2542a <mqtt_unpack_pingresp>
	if (rc != 0) {
   2584a:	4603      	mov	r3, r0
   2584c:	b908      	cbnz	r0, 25852 <mqtt_rx_pingresp+0x14>
}
   2584e:	4618      	mov	r0, r3
   25850:	bd08      	pop	{r3, pc}
		return -EINVAL;
   25852:	f06f 0315 	mvn.w	r3, #21
   25856:	e7fa      	b.n	2584e <mqtt_rx_pingresp+0x10>

00025858 <mqtt_rx_suback>:
{
   25858:	b530      	push	{r4, r5, lr}
   2585a:	b085      	sub	sp, #20
   2585c:	4604      	mov	r4, r0
	data = rx->data;
   2585e:	6888      	ldr	r0, [r1, #8]
	len = rx->len;
   25860:	8989      	ldrh	r1, [r1, #12]
	rc = mqtt_unpack_suback(data, len, &pkt_id, &items,
   25862:	ab03      	add	r3, sp, #12
   25864:	9301      	str	r3, [sp, #4]
   25866:	2301      	movs	r3, #1
   25868:	9300      	str	r3, [sp, #0]
   2586a:	f10d 0309 	add.w	r3, sp, #9
   2586e:	f10d 020a 	add.w	r2, sp, #10
   25872:	f7ff fc31 	bl	250d8 <mqtt_unpack_suback>
	if (rc != 0) {
   25876:	b988      	cbnz	r0, 2589c <mqtt_rx_suback+0x44>
	if (!ctx->subscribe) {
   25878:	f8d4 5098 	ldr.w	r5, [r4, #152]	; 0x98
   2587c:	b18d      	cbz	r5, 258a2 <mqtt_rx_suback+0x4a>
	rc = ctx->subscribe(ctx, pkt_id, items, suback_qos);
   2587e:	ab03      	add	r3, sp, #12
   25880:	f89d 2009 	ldrb.w	r2, [sp, #9]
   25884:	f8bd 100a 	ldrh.w	r1, [sp, #10]
   25888:	4620      	mov	r0, r4
   2588a:	47a8      	blx	r5
	if (rc != 0) {
   2588c:	4603      	mov	r3, r0
   2588e:	b910      	cbnz	r0, 25896 <mqtt_rx_suback+0x3e>
}
   25890:	4618      	mov	r0, r3
   25892:	b005      	add	sp, #20
   25894:	bd30      	pop	{r4, r5, pc}
		return -EINVAL;
   25896:	f06f 0315 	mvn.w	r3, #21
   2589a:	e7f9      	b.n	25890 <mqtt_rx_suback+0x38>
		return -EINVAL;
   2589c:	f06f 0315 	mvn.w	r3, #21
   258a0:	e7f6      	b.n	25890 <mqtt_rx_suback+0x38>
		return -EINVAL;
   258a2:	f06f 0315 	mvn.w	r3, #21
   258a6:	e7f3      	b.n	25890 <mqtt_rx_suback+0x38>

000258a8 <mqtt_rx_publish>:
{
   258a8:	b530      	push	{r4, r5, lr}
   258aa:	b087      	sub	sp, #28
   258ac:	4604      	mov	r4, r0
   258ae:	460b      	mov	r3, r1
	rc = mqtt_unpack_publish(rx->data, rx->len, &msg);
   258b0:	466a      	mov	r2, sp
   258b2:	8989      	ldrh	r1, [r1, #12]
   258b4:	6898      	ldr	r0, [r3, #8]
   258b6:	f7ff fd0f 	bl	252d8 <mqtt_unpack_publish>
	if (rc != 0) {
   258ba:	bb00      	cbnz	r0, 258fe <mqtt_rx_publish+0x56>
	rc = ctx->publish_rx(ctx, &msg, msg.pkt_id, MQTT_PUBLISH);
   258bc:	f8d4 5094 	ldr.w	r5, [r4, #148]	; 0x94
   258c0:	2303      	movs	r3, #3
   258c2:	f8bd 2004 	ldrh.w	r2, [sp, #4]
   258c6:	4669      	mov	r1, sp
   258c8:	4620      	mov	r0, r4
   258ca:	47a8      	blx	r5
	if (rc != 0) {
   258cc:	4602      	mov	r2, r0
   258ce:	b9c8      	cbnz	r0, 25904 <mqtt_rx_publish+0x5c>
	switch (msg.qos) {
   258d0:	f89d 3001 	ldrb.w	r3, [sp, #1]
   258d4:	2b01      	cmp	r3, #1
   258d6:	d00b      	beq.n	258f0 <mqtt_rx_publish+0x48>
   258d8:	b13b      	cbz	r3, 258ea <mqtt_rx_publish+0x42>
   258da:	2b02      	cmp	r3, #2
   258dc:	d115      	bne.n	2590a <mqtt_rx_publish+0x62>
		rc = mqtt_tx_pubrec(ctx, msg.pkt_id);
   258de:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   258e2:	4620      	mov	r0, r4
   258e4:	f7ff ff2b 	bl	2573e <mqtt_tx_pubrec>
   258e8:	4602      	mov	r2, r0
}
   258ea:	4610      	mov	r0, r2
   258ec:	b007      	add	sp, #28
   258ee:	bd30      	pop	{r4, r5, pc}
		rc = mqtt_tx_puback(ctx, msg.pkt_id);
   258f0:	f8bd 1004 	ldrh.w	r1, [sp, #4]
   258f4:	4620      	mov	r0, r4
   258f6:	f7ff ff1d 	bl	25734 <mqtt_tx_puback>
   258fa:	4602      	mov	r2, r0
		break;
   258fc:	e7f5      	b.n	258ea <mqtt_rx_publish+0x42>
		return -EINVAL;
   258fe:	f06f 0215 	mvn.w	r2, #21
   25902:	e7f2      	b.n	258ea <mqtt_rx_publish+0x42>
		return -EINVAL;
   25904:	f06f 0215 	mvn.w	r2, #21
   25908:	e7ef      	b.n	258ea <mqtt_rx_publish+0x42>
		rc = -EINVAL;
   2590a:	f06f 0215 	mvn.w	r2, #21
   2590e:	e7ec      	b.n	258ea <mqtt_rx_publish+0x42>

00025910 <mqtt_parser>:
{
   25910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   25912:	4606      	mov	r6, r0
	data = mqtt_linearize_packet(ctx, rx, MQTT_PUBLISHER_MIN_MSG_SIZE);
   25914:	2202      	movs	r2, #2
   25916:	f7ff fe5f 	bl	255d8 <mqtt_linearize_packet>
	if (!data) {
   2591a:	2800      	cmp	r0, #0
   2591c:	d057      	beq.n	259ce <mqtt_parser+0xbe>
   2591e:	4604      	mov	r4, r0
	pkt_type = MQTT_PACKET_TYPE(data->data[0]);
   25920:	6883      	ldr	r3, [r0, #8]
   25922:	781b      	ldrb	r3, [r3, #0]
   25924:	091b      	lsrs	r3, r3, #4
   25926:	b29f      	uxth	r7, r3
	switch (pkt_type) {
   25928:	3b02      	subs	r3, #2
   2592a:	2b0b      	cmp	r3, #11
   2592c:	d84c      	bhi.n	259c8 <mqtt_parser+0xb8>
   2592e:	e8df f003 	tbb	[pc, r3]
   25932:	3906      	.short	0x3906
   25934:	2d3f2716 	.word	0x2d3f2716
   25938:	4b4b454b 	.word	0x4b4b454b
   2593c:	334b      	.short	0x334b
		if (!ctx->connected) {
   2593e:	f896 30a9 	ldrb.w	r3, [r6, #169]	; 0xa9
   25942:	f013 0f02 	tst.w	r3, #2
   25946:	d002      	beq.n	2594e <mqtt_parser+0x3e>
			rc = -EINVAL;
   25948:	f06f 0515 	mvn.w	r5, #21
   2594c:	e00c      	b.n	25968 <mqtt_parser+0x58>
			rc = mqtt_rx_connack(ctx, data, ctx->clean_session);
   2594e:	f003 0201 	and.w	r2, r3, #1
   25952:	4601      	mov	r1, r0
   25954:	4630      	mov	r0, r6
   25956:	f7ff ff33 	bl	257c0 <mqtt_rx_connack>
   2595a:	4605      	mov	r5, r0
   2595c:	e004      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_puback(ctx, data);
   2595e:	4601      	mov	r1, r0
   25960:	4630      	mov	r0, r6
   25962:	f7ff ff58 	bl	25816 <mqtt_rx_puback>
   25966:	4605      	mov	r5, r0
	if (rc != 0 && ctx->malformed) {
   25968:	b12d      	cbz	r5, 25976 <mqtt_parser+0x66>
   2596a:	f8d6 30a0 	ldr.w	r3, [r6, #160]	; 0xa0
   2596e:	b113      	cbz	r3, 25976 <mqtt_parser+0x66>
		ctx->malformed(ctx, pkt_type);
   25970:	4639      	mov	r1, r7
   25972:	4630      	mov	r0, r6
   25974:	4798      	blx	r3
	net_pkt_frag_unref(data);
   25976:	4620      	mov	r0, r4
   25978:	f7f7 fa59 	bl	1ce2e <net_pkt_frag_unref>
}
   2597c:	4628      	mov	r0, r5
   2597e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		rc = mqtt_rx_pubrec(ctx, data);
   25980:	4601      	mov	r1, r0
   25982:	4630      	mov	r0, r6
   25984:	f7ff ff51 	bl	2582a <mqtt_rx_pubrec>
   25988:	4605      	mov	r5, r0
		break;
   2598a:	e7ed      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_pubcomp(ctx, data);
   2598c:	4601      	mov	r1, r0
   2598e:	4630      	mov	r0, r6
   25990:	f7ff ff46 	bl	25820 <mqtt_rx_pubcomp>
   25994:	4605      	mov	r5, r0
		break;
   25996:	e7e7      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_pingresp(ctx, data);
   25998:	4601      	mov	r1, r0
   2599a:	4630      	mov	r0, r6
   2599c:	f7ff ff4f 	bl	2583e <mqtt_rx_pingresp>
   259a0:	4605      	mov	r5, r0
		break;
   259a2:	e7e1      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_publish(ctx, data);
   259a4:	4601      	mov	r1, r0
   259a6:	4630      	mov	r0, r6
   259a8:	f7ff ff7e 	bl	258a8 <mqtt_rx_publish>
   259ac:	4605      	mov	r5, r0
		break;
   259ae:	e7db      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_pubrel(ctx, data);
   259b0:	4601      	mov	r1, r0
   259b2:	4630      	mov	r0, r6
   259b4:	f7ff ff3e 	bl	25834 <mqtt_rx_pubrel>
   259b8:	4605      	mov	r5, r0
		break;
   259ba:	e7d5      	b.n	25968 <mqtt_parser+0x58>
		rc = mqtt_rx_suback(ctx, data);
   259bc:	4601      	mov	r1, r0
   259be:	4630      	mov	r0, r6
   259c0:	f7ff ff4a 	bl	25858 <mqtt_rx_suback>
   259c4:	4605      	mov	r5, r0
		break;
   259c6:	e7cf      	b.n	25968 <mqtt_parser+0x58>
		rc = -EINVAL;
   259c8:	f06f 0515 	mvn.w	r5, #21
   259cc:	e7cc      	b.n	25968 <mqtt_parser+0x58>
		return -ENOMEM;
   259ce:	f06f 050b 	mvn.w	r5, #11
   259d2:	e7d3      	b.n	2597c <mqtt_parser+0x6c>

000259d4 <mqtt_connect>:
}

int mqtt_connect(struct mqtt_ctx *ctx)
{
   259d4:	b530      	push	{r4, r5, lr}
   259d6:	b087      	sub	sp, #28
	int rc = 0;

	if (!ctx) {
   259d8:	b348      	cbz	r0, 25a2e <mqtt_connect+0x5a>
   259da:	4604      	mov	r4, r0
	}

	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
			NULL,
			NULL,
			ctx->peer_addr_str,
   259dc:	f8d0 3080 	ldr.w	r3, [r0, #128]	; 0x80
	rc = net_app_init_tcp_client(&ctx->net_app_ctx,
   259e0:	f8b0 2084 	ldrh.w	r2, [r0, #132]	; 0x84
   259e4:	6f81      	ldr	r1, [r0, #120]	; 0x78
					  const char *peer_addr_str,
					  u16_t peer_port,
					  s32_t timeout,
					  void *user_data)
{
	return net_app_init_client(ctx,
   259e6:	9004      	str	r0, [sp, #16]
   259e8:	9103      	str	r1, [sp, #12]
   259ea:	9202      	str	r2, [sp, #8]
   259ec:	9301      	str	r3, [sp, #4]
   259ee:	2300      	movs	r3, #0
   259f0:	9300      	str	r3, [sp, #0]
   259f2:	2206      	movs	r2, #6
   259f4:	2101      	movs	r1, #1
   259f6:	f000 f913 	bl	25c20 <net_app_init_client>
			ctx->peer_port,
			ctx->net_init_timeout,
			ctx);
	if (rc < 0) {
   259fa:	1e05      	subs	r5, r0, #0
   259fc:	db0e      	blt.n	25a1c <mqtt_connect+0x48>
		goto error_connect;
	}

	rc = net_app_set_cb(&ctx->net_app_ctx,
   259fe:	2300      	movs	r3, #0
   25a00:	9300      	str	r3, [sp, #0]
   25a02:	4a0c      	ldr	r2, [pc, #48]	; (25a34 <mqtt_connect+0x60>)
   25a04:	490c      	ldr	r1, [pc, #48]	; (25a38 <mqtt_connect+0x64>)
   25a06:	4620      	mov	r0, r4
   25a08:	f000 fb11 	bl	2602e <net_app_set_cb>
			app_connected,
			app_recv,
			NULL,
			NULL);
	if (rc < 0) {
   25a0c:	1e05      	subs	r5, r0, #0
   25a0e:	db05      	blt.n	25a1c <mqtt_connect+0x48>
	if (rc < 0) {
		goto error_connect;
	}
#endif

	rc = net_app_connect(&ctx->net_app_ctx, ctx->net_timeout);
   25a10:	6fe1      	ldr	r1, [r4, #124]	; 0x7c
   25a12:	4620      	mov	r0, r4
   25a14:	f000 f9ec 	bl	25df0 <net_app_connect>
	if (rc < 0) {
   25a18:	1e05      	subs	r5, r0, #0
   25a1a:	da05      	bge.n	25a28 <mqtt_connect+0x54>

	return rc;

error_connect:
	/* clean net app context, so mqtt_connect() can be called repeatedly */
	net_app_close(&ctx->net_app_ctx);
   25a1c:	4620      	mov	r0, r4
   25a1e:	f000 fbbd 	bl	2619c <net_app_close>
	net_app_release(&ctx->net_app_ctx);
   25a22:	4620      	mov	r0, r4
   25a24:	f000 fab8 	bl	25f98 <net_app_release>

	return rc;
}
   25a28:	4628      	mov	r0, r5
   25a2a:	b007      	add	sp, #28
   25a2c:	bd30      	pop	{r4, r5, pc}
		return -EFAULT;
   25a2e:	f06f 050d 	mvn.w	r5, #13
   25a32:	e7f9      	b.n	25a28 <mqtt_connect+0x54>
   25a34:	000254f3 	.word	0x000254f3
   25a38:	000254f1 	.word	0x000254f1

00025a3c <mqtt_init>:

int mqtt_init(struct mqtt_ctx *ctx, enum mqtt_app app_type)
{
	/* So far, only clean session = 1 is supported */
	ctx->clean_session = 1;
   25a3c:	f890 30a9 	ldrb.w	r3, [r0, #169]	; 0xa9
	ctx->connected = 0;
   25a40:	f043 0301 	orr.w	r3, r3, #1
   25a44:	f36f 0341 	bfc	r3, #1, #1
   25a48:	f880 30a9 	strb.w	r3, [r0, #169]	; 0xa9

	ctx->app_type = app_type;
   25a4c:	f880 10a8 	strb.w	r1, [r0, #168]	; 0xa8
	ctx->rcv = mqtt_parser;
   25a50:	4b02      	ldr	r3, [pc, #8]	; (25a5c <mqtt_init+0x20>)
   25a52:	f8c0 30a4 	str.w	r3, [r0, #164]	; 0xa4

	k_sem_init(&ctx->tls_hs_wait, 0, 1);
#endif

	return 0;
}
   25a56:	2000      	movs	r0, #0
   25a58:	4770      	bx	lr
   25a5a:	bf00      	nop
   25a5c:	00025911 	.word	0x00025911

00025a60 <mqtt_close>:

int mqtt_close(struct mqtt_ctx *ctx)
{
	if (!ctx) {
   25a60:	b178      	cbz	r0, 25a82 <mqtt_close+0x22>
{
   25a62:	b510      	push	{r4, lr}
   25a64:	4604      	mov	r4, r0
		return -EFAULT;
	}

	if (ctx->net_app_ctx.is_init) {
   25a66:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25a6a:	f012 0f01 	tst.w	r2, #1
   25a6e:	d101      	bne.n	25a74 <mqtt_close+0x14>
		net_app_close(&ctx->net_app_ctx);
		net_app_release(&ctx->net_app_ctx);
	}

	return 0;
   25a70:	2000      	movs	r0, #0
}
   25a72:	bd10      	pop	{r4, pc}
		net_app_close(&ctx->net_app_ctx);
   25a74:	f000 fb92 	bl	2619c <net_app_close>
		net_app_release(&ctx->net_app_ctx);
   25a78:	4620      	mov	r0, r4
   25a7a:	f000 fa8d 	bl	25f98 <net_app_release>
	return 0;
   25a7e:	2000      	movs	r0, #0
   25a80:	bd10      	pop	{r4, pc}
		return -EFAULT;
   25a82:	f06f 000d 	mvn.w	r0, #13
   25a86:	4770      	bx	lr

00025a88 <net_app_init>:
#else
#define setup_ipv6(...)
#endif /* CONFIG_NET_IPV6 */

int net_app_init(const char *app_info, u32_t flags, s32_t timeout)
{
   25a88:	b570      	push	{r4, r5, r6, lr}
   25a8a:	460c      	mov	r4, r1
   25a8c:	4616      	mov	r6, r2
#define LOOP_DIVIDER 10
	struct net_if *iface = net_if_get_default();
   25a8e:	f7f4 fff5 	bl	1aa7c <net_if_get_default>
	int loop = timeout / LOOP_DIVIDER;
   25a92:	4b20      	ldr	r3, [pc, #128]	; (25b14 <net_app_init+0x8c>)
   25a94:	fb83 2306 	smull	r2, r3, r3, r6
   25a98:	17f5      	asrs	r5, r6, #31
   25a9a:	ebc5 05a3 	rsb	r5, r5, r3, asr #2

	if (app_info) {
		NET_INFO("%s", app_info);
	}

	if (!iface) {
   25a9e:	b380      	cbz	r0, 25b02 <net_app_init+0x7a>
		NET_ERR("No network interfaces");
		return -ENODEV;
	}

	if (flags & NET_APP_NEED_IPV6) {
   25aa0:	f014 0f02 	tst.w	r4, #2
   25aa4:	d114      	bne.n	25ad0 <net_app_init+0x48>
	int count = 0;
   25aa6:	2100      	movs	r1, #0
		count++;
	}

	if (flags & NET_APP_NEED_IPV4) {
   25aa8:	f014 0f04 	tst.w	r4, #4
   25aac:	d000      	beq.n	25ab0 <net_app_init+0x28>
		count++;
   25aae:	3101      	adds	r1, #1
K_SYSCALL_DECLARE3_VOID(K_SYSCALL_K_SEM_INIT, k_sem_init, struct k_sem *, sem, unsigned int, initial_count, unsigned int, limit);
   25ab0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   25ab4:	4818      	ldr	r0, [pc, #96]	; (25b18 <net_app_init+0x90>)
   25ab6:	f002 ff93 	bl	289e0 <_impl_k_sem_init>

	setup_dhcpv4(iface);

	setup_ipv6(iface, flags);

	if (timeout < 0) {
   25aba:	2e00      	cmp	r6, #0
   25abc:	db0a      	blt.n	25ad4 <net_app_init+0x4c>
		count = -1;
	} else if (timeout == 0) {
   25abe:	b166      	cbz	r6, 25ada <net_app_init+0x52>
		count = 0;
	} else {
		count = timeout / 1000 + 1;
   25ac0:	4a16      	ldr	r2, [pc, #88]	; (25b1c <net_app_init+0x94>)
   25ac2:	fb82 3206 	smull	r3, r2, r2, r6
   25ac6:	17f3      	asrs	r3, r6, #31
   25ac8:	ebc3 13a2 	rsb	r3, r3, r2, asr #6
   25acc:	3301      	adds	r3, #1
   25ace:	e007      	b.n	25ae0 <net_app_init+0x58>
		count++;
   25ad0:	2101      	movs	r1, #1
   25ad2:	e7e9      	b.n	25aa8 <net_app_init+0x20>
		count = -1;
   25ad4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   25ad8:	e002      	b.n	25ae0 <net_app_init+0x58>
		count = 0;
   25ada:	2300      	movs	r3, #0
   25adc:	e000      	b.n	25ae0 <net_app_init+0x58>
   25ade:	4623      	mov	r3, r4
	}

	/* Loop here until until we are ready to continue. As we might need
	 * to wait multiple events, sleep smaller amounts of data.
	 */
	while (count--) {
   25ae0:	1e5c      	subs	r4, r3, #1
   25ae2:	b153      	cbz	r3, 25afa <net_app_init+0x72>
K_SYSCALL_DECLARE2(K_SYSCALL_K_SEM_TAKE, k_sem_take, int, struct k_sem *, sem, s32_t, timeout);
   25ae4:	4629      	mov	r1, r5
   25ae6:	480e      	ldr	r0, [pc, #56]	; (25b20 <net_app_init+0x98>)
   25ae8:	f002 ff96 	bl	28a18 <_impl_k_sem_take>
		if (k_sem_take(&waiter, loop)) {
   25aec:	2800      	cmp	r0, #0
   25aee:	d0f6      	beq.n	25ade <net_app_init+0x56>
	return sem->count;
   25af0:	4b09      	ldr	r3, [pc, #36]	; (25b18 <net_app_init+0x90>)
   25af2:	689a      	ldr	r2, [r3, #8]
   25af4:	4623      	mov	r3, r4
			if (!k_sem_count_get(&counter)) {
   25af6:	2a00      	cmp	r2, #0
   25af8:	d1f2      	bne.n	25ae0 <net_app_init+0x58>
				break;
			}
		}
	}

	if (!count && timeout) {
   25afa:	b92c      	cbnz	r4, 25b08 <net_app_init+0x80>
   25afc:	b936      	cbnz	r6, 25b0c <net_app_init+0x84>
		NET_ERR("Timeout while waiting setup");
		return -ETIMEDOUT;
	}

	return 0;
   25afe:	2000      	movs	r0, #0
   25b00:	bd70      	pop	{r4, r5, r6, pc}
		return -ENODEV;
   25b02:	f06f 0012 	mvn.w	r0, #18
   25b06:	bd70      	pop	{r4, r5, r6, pc}
	return 0;
   25b08:	2000      	movs	r0, #0
   25b0a:	bd70      	pop	{r4, r5, r6, pc}
		return -ETIMEDOUT;
   25b0c:	f06f 0073 	mvn.w	r0, #115	; 0x73
}
   25b10:	bd70      	pop	{r4, r5, r6, pc}
   25b12:	bf00      	nop
   25b14:	66666667 	.word	0x66666667
   25b18:	200024ec 	.word	0x200024ec
   25b1c:	10624dd3 	.word	0x10624dd3
   25b20:	2000ccd8 	.word	0x2000ccd8

00025b24 <init_net_app>:

#if defined(CONFIG_NET_APP_AUTO_INIT)
static int init_net_app(struct device *device)
{
   25b24:	b508      	push	{r3, lr}
	ret = _net_app_ieee802154_setup();
	if (ret < 0) {
		NET_ERR("Cannot setup IEEE 802.15.4 interface (%d)", ret);
	}

	ret = _net_app_bt_setup();
   25b26:	f000 fb5b 	bl	261e0 <_net_app_bt_setup>
	if (IS_ENABLED(CONFIG_NET_APP_NEED_IPV4)) {
		flags |= NET_APP_NEED_IPV4;
	}

	/* Initialize the application automatically if needed */
	ret = net_app_init("Initializing network", flags,
   25b2a:	f247 5230 	movw	r2, #30000	; 0x7530
   25b2e:	2100      	movs	r1, #0
   25b30:	4801      	ldr	r0, [pc, #4]	; (25b38 <init_net_app+0x14>)
   25b32:	f7ff ffa9 	bl	25a88 <net_app_init>
	if (ret < 0) {
		NET_ERR("Network initialization failed (%d)", ret);
	}

	return ret;
}
   25b36:	bd08      	pop	{r3, pc}
   25b38:	0002ea2c 	.word	0x0002ea2c

00025b3c <try_resolve>:
		NET_ERR("Cannot resolve %s (%d)", peer_addr_str, ret);
	}

	return ret;
#endif
}
   25b3c:	f06f 0015 	mvn.w	r0, #21
   25b40:	4770      	bx	lr

00025b42 <set_remote_addr>:
static int set_remote_addr(struct net_app_ctx *ctx,
			   struct sockaddr *remote_addr,
			   const char *peer_addr_str,
			   bool peer_addr_ok,
			   s32_t timeout)
{
   25b42:	b510      	push	{r4, lr}
   25b44:	4604      	mov	r4, r0
   25b46:	4610      	mov	r0, r2
	int ret;

	if (peer_addr_ok && remote_addr->sa_family == AF_INET6) {
   25b48:	461a      	mov	r2, r3
   25b4a:	b113      	cbz	r3, 25b52 <set_remote_addr+0x10>
   25b4c:	880b      	ldrh	r3, [r1, #0]
   25b4e:	2b0a      	cmp	r3, #10
   25b50:	d00e      	beq.n	25b70 <set_remote_addr+0x2e>
#else
		return -EAFNOSUPPORT;
#endif
	}

	if (peer_addr_ok && remote_addr->sa_family == AF_INET) {
   25b52:	b112      	cbz	r2, 25b5a <set_remote_addr+0x18>
   25b54:	880b      	ldrh	r3, [r1, #0]
   25b56:	2b02      	cmp	r3, #2
   25b58:	d012      	beq.n	25b80 <set_remote_addr+0x3e>
#endif
	}

#if defined(CONFIG_NET_IPV6) && !defined(CONFIG_NET_IPV4)
	/* Could be hostname, try DNS if configured. */
	ret = try_resolve(ctx, peer_addr_str, DNS_QUERY_TYPE_AAAA, timeout);
   25b5a:	9b02      	ldr	r3, [sp, #8]
   25b5c:	221c      	movs	r2, #28
   25b5e:	4601      	mov	r1, r0
   25b60:	4620      	mov	r0, r4
   25b62:	f7ff ffeb 	bl	25b3c <try_resolve>
	if (ret < 0) {
   25b66:	2800      	cmp	r0, #0
   25b68:	db0c      	blt.n	25b84 <set_remote_addr+0x42>
		return ret;
	}

	ctx->default_ctx = &ctx->ipv6;
   25b6a:	6364      	str	r4, [r4, #52]	; 0x34
	return 0;
   25b6c:	2000      	movs	r0, #0
   25b6e:	bd10      	pop	{r4, pc}
		memcpy(&ctx->ipv6.remote, remote_addr,
   25b70:	2218      	movs	r2, #24
   25b72:	f104 001c 	add.w	r0, r4, #28
   25b76:	f7da fba3 	bl	2c0 <memcpy>
		ctx->default_ctx = &ctx->ipv6;
   25b7a:	6364      	str	r4, [r4, #52]	; 0x34
		return 0;
   25b7c:	2000      	movs	r0, #0
   25b7e:	bd10      	pop	{r4, pc}
		return -EAFNOSUPPORT;
   25b80:	f06f 0069 	mvn.w	r0, #105	; 0x69
	}

	ctx->default_ctx = &ctx->ipv4;
	return 0;
#endif /* IPV4 && IPV6 */
}
   25b84:	bd10      	pop	{r4, pc}

00025b86 <close_net_ctx>:
}

static void close_net_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	if (ctx->ipv6.ctx) {
   25b86:	6803      	ldr	r3, [r0, #0]
   25b88:	b13b      	cbz	r3, 25b9a <close_net_ctx+0x14>
{
   25b8a:	b510      	push	{r4, lr}
   25b8c:	4604      	mov	r4, r0
		net_context_put(ctx->ipv6.ctx);
   25b8e:	4618      	mov	r0, r3
   25b90:	f7f6 fcbe 	bl	1c510 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25b94:	2300      	movs	r3, #0
   25b96:	6023      	str	r3, [r4, #0]
   25b98:	bd10      	pop	{r4, pc}
   25b9a:	4770      	bx	lr

00025b9c <get_port_number>:
	if (peer_addr_str[0] == '[') {
   25b9c:	7803      	ldrb	r3, [r0, #0]
   25b9e:	2b5b      	cmp	r3, #91	; 0x5b
   25ba0:	d002      	beq.n	25ba8 <get_port_number+0xc>
   25ba2:	2300      	movs	r3, #0
   25ba4:	4619      	mov	r1, r3
   25ba6:	e019      	b.n	25bdc <get_port_number+0x40>
{
   25ba8:	b570      	push	{r4, r5, r6, lr}
   25baa:	460d      	mov	r5, r1
   25bac:	4604      	mov	r4, r0
		ptr = strstr(peer_addr_str, "]:");
   25bae:	4913      	ldr	r1, [pc, #76]	; (25bfc <get_port_number+0x60>)
   25bb0:	f004 fa40 	bl	2a034 <strstr>
		if (!ptr) {
   25bb4:	4606      	mov	r6, r0
   25bb6:	b1f0      	cbz	r0, 25bf6 <get_port_number+0x5a>
		end = min(INET6_ADDRSTRLEN, ptr - (peer_addr_str + 1));
   25bb8:	1c61      	adds	r1, r4, #1
   25bba:	1a44      	subs	r4, r0, r1
   25bbc:	2c2e      	cmp	r4, #46	; 0x2e
   25bbe:	bfa8      	it	ge
   25bc0:	242e      	movge	r4, #46	; 0x2e
		memcpy(buf, peer_addr_str + 1, end);
   25bc2:	4622      	mov	r2, r4
   25bc4:	4628      	mov	r0, r5
   25bc6:	f7da fb7b 	bl	2c0 <memcpy>
		buf[end] = '\0';
   25bca:	2100      	movs	r1, #0
   25bcc:	5529      	strb	r1, [r5, r4]
		port = strtol(ptr + 2, NULL, 10);
   25bce:	220a      	movs	r2, #10
   25bd0:	1cb0      	adds	r0, r6, #2
   25bd2:	f004 fbcf 	bl	2a374 <strtol>
   25bd6:	b280      	uxth	r0, r0
		return port;
   25bd8:	bd70      	pop	{r4, r5, r6, pc}
		i++;
   25bda:	3301      	adds	r3, #1
	while (peer_addr_str[i]) {
   25bdc:	5cc2      	ldrb	r2, [r0, r3]
   25bde:	b11a      	cbz	r2, 25be8 <get_port_number+0x4c>
		if (peer_addr_str[i] == ':') {
   25be0:	2a3a      	cmp	r2, #58	; 0x3a
   25be2:	d1fa      	bne.n	25bda <get_port_number+0x3e>
			count++;
   25be4:	3101      	adds	r1, #1
   25be6:	e7f8      	b.n	25bda <get_port_number+0x3e>
	if (count == 1) {
   25be8:	2901      	cmp	r1, #1
   25bea:	d001      	beq.n	25bf0 <get_port_number+0x54>
	return 0;
   25bec:	2000      	movs	r0, #0
   25bee:	4770      	bx	lr
		return -EAFNOSUPPORT;
   25bf0:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25bf4:	4770      	bx	lr
			return -EINVAL;
   25bf6:	f06f 0015 	mvn.w	r0, #21
   25bfa:	bd70      	pop	{r4, r5, r6, pc}
   25bfc:	0002ea44 	.word	0x0002ea44

00025c00 <_app_connected>:
}

static void _app_connected(struct net_context *net_ctx,
			   int status,
			   void *user_data)
{
   25c00:	b538      	push	{r3, r4, r5, lr}
   25c02:	460d      	mov	r5, r1
   25c04:	4614      	mov	r4, r2
	if (ctx->is_tls) {
		k_sem_give(&ctx->client.connect_wait);
	}
#endif

	net_context_recv(net_ctx, ctx->recv_cb, K_NO_WAIT, ctx);
   25c06:	4613      	mov	r3, r2
   25c08:	2200      	movs	r2, #0
   25c0a:	6ce1      	ldr	r1, [r4, #76]	; 0x4c
   25c0c:	f7f6 ff88 	bl	1cb20 <net_context_recv>
		 */
		NET_DBG("Postponing TLS connection cb for ctx %p", ctx);
	} else
#endif
	{
		if (ctx->cb.connect) {
   25c10:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   25c12:	b11b      	cbz	r3, 25c1c <_app_connected+0x1c>
			ctx->cb.connect(ctx, status, ctx->user_data);
   25c14:	6f22      	ldr	r2, [r4, #112]	; 0x70
   25c16:	4629      	mov	r1, r5
   25c18:	4620      	mov	r0, r4
   25c1a:	4798      	blx	r3
   25c1c:	bd38      	pop	{r3, r4, r5, pc}
	...

00025c20 <net_app_init_client>:
{
   25c20:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   25c24:	b09a      	sub	sp, #104	; 0x68
   25c26:	9e22      	ldr	r6, [sp, #136]	; 0x88
   25c28:	f8bd 8090 	ldrh.w	r8, [sp, #144]	; 0x90
	if (!ctx) {
   25c2c:	2800      	cmp	r0, #0
   25c2e:	f000 80c9 	beq.w	25dc4 <net_app_init_client+0x1a4>
   25c32:	4604      	mov	r4, r0
	if (ctx->is_init) {
   25c34:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   25c38:	f010 0f01 	tst.w	r0, #1
   25c3c:	f040 80c5 	bne.w	25dca <net_app_init_client+0x1aa>
   25c40:	4699      	mov	r9, r3
   25c42:	4617      	mov	r7, r2
   25c44:	460d      	mov	r5, r1
	memset(&addr, 0, sizeof(addr));
   25c46:	2218      	movs	r2, #24
   25c48:	2100      	movs	r1, #0
   25c4a:	a802      	add	r0, sp, #8
   25c4c:	f003 fea4 	bl	29998 <memset>
	memset(&remote_addr, 0, sizeof(remote_addr));
   25c50:	2218      	movs	r2, #24
   25c52:	2100      	movs	r1, #0
   25c54:	a808      	add	r0, sp, #32
   25c56:	f003 fe9f 	bl	29998 <memset>
	if (peer_addr) {
   25c5a:	2e00      	cmp	r6, #0
   25c5c:	d03c      	beq.n	25cd8 <net_app_init_client+0xb8>
		memcpy(&remote_addr, peer_addr, sizeof(remote_addr));
   25c5e:	2218      	movs	r2, #24
   25c60:	4631      	mov	r1, r6
   25c62:	a808      	add	r0, sp, #32
   25c64:	f7da fb2c 	bl	2c0 <memcpy>
	int ret, addr_ok = false;
   25c68:	f04f 0a00 	mov.w	sl, #0
	if (client_addr) {
   25c6c:	f1b9 0f00 	cmp.w	r9, #0
   25c70:	d05e      	beq.n	25d30 <net_app_init_client+0x110>
		memcpy(&addr, client_addr, sizeof(addr));
   25c72:	2218      	movs	r2, #24
   25c74:	4649      	mov	r1, r9
   25c76:	a802      	add	r0, sp, #8
   25c78:	f7da fb22 	bl	2c0 <memcpy>
		if (addr.sa_family != remote_addr.sa_family) {
   25c7c:	f8bd 2008 	ldrh.w	r2, [sp, #8]
   25c80:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25c84:	429a      	cmp	r2, r3
   25c86:	f040 80a3 	bne.w	25dd0 <net_app_init_client+0x1b0>
	ctx->app_type = NET_APP_CLIENT;
   25c8a:	2302      	movs	r3, #2
   25c8c:	f884 3076 	strb.w	r3, [r4, #118]	; 0x76
	ctx->user_data = user_data;
   25c90:	9b26      	ldr	r3, [sp, #152]	; 0x98
   25c92:	6723      	str	r3, [r4, #112]	; 0x70
	ctx->send_data = net_context_sendto;
   25c94:	4b54      	ldr	r3, [pc, #336]	; (25de8 <net_app_init_client+0x1c8>)
   25c96:	63a3      	str	r3, [r4, #56]	; 0x38
	ctx->recv_cb = _net_app_received;
   25c98:	4b54      	ldr	r3, [pc, #336]	; (25dec <net_app_init_client+0x1cc>)
   25c9a:	64e3      	str	r3, [r4, #76]	; 0x4c
	ctx->proto = proto;
   25c9c:	f884 7075 	strb.w	r7, [r4, #117]	; 0x75
	ctx->sock_type = sock_type;
   25ca0:	f884 5074 	strb.w	r5, [r4, #116]	; 0x74
	ret = _net_app_config_local_ctx(ctx, sock_type, proto, &addr);
   25ca4:	ab02      	add	r3, sp, #8
   25ca6:	463a      	mov	r2, r7
   25ca8:	4629      	mov	r1, r5
   25caa:	4620      	mov	r0, r4
   25cac:	f000 f949 	bl	25f42 <_net_app_config_local_ctx>
	if (ret < 0) {
   25cb0:	1e05      	subs	r5, r0, #0
   25cb2:	db42      	blt.n	25d3a <net_app_init_client+0x11a>
	if (peer_addr) {
   25cb4:	2e00      	cmp	r6, #0
   25cb6:	d04c      	beq.n	25d52 <net_app_init_client+0x132>
		if (peer_addr->sa_family == AF_INET) {
   25cb8:	8833      	ldrh	r3, [r6, #0]
   25cba:	2b02      	cmp	r3, #2
   25cbc:	f000 808b 	beq.w	25dd6 <net_app_init_client+0x1b6>
		} else if (peer_addr->sa_family == AF_INET6) {
   25cc0:	2b0a      	cmp	r3, #10
   25cc2:	d03e      	beq.n	25d42 <net_app_init_client+0x122>
	ctx->is_init = true;
   25cc4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25cc8:	f043 0301 	orr.w	r3, r3, #1
   25ccc:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
}
   25cd0:	4628      	mov	r0, r5
   25cd2:	b01a      	add	sp, #104	; 0x68
   25cd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
	} else if (peer_addr_str) {
   25cd8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25cda:	b333      	cbz	r3, 25d2a <net_app_init_client+0x10a>
		ret = get_port_number(peer_addr_str, base_addr_str,
   25cdc:	222f      	movs	r2, #47	; 0x2f
   25cde:	a90e      	add	r1, sp, #56	; 0x38
   25ce0:	4618      	mov	r0, r3
   25ce2:	f7ff ff5b 	bl	25b9c <get_port_number>
		if (ret > 0) {
   25ce6:	2800      	cmp	r0, #0
   25ce8:	dd17      	ble.n	25d1a <net_app_init_client+0xfa>
			peer_port = ret;
   25cea:	fa1f f880 	uxth.w	r8, r0
			base_peer_addr = base_addr_str;
   25cee:	f10d 0a38 	add.w	sl, sp, #56	; 0x38
		addr_ok = net_ipaddr_parse(base_peer_addr,
   25cf2:	4650      	mov	r0, sl
   25cf4:	f7da fd04 	bl	700 <strlen>
   25cf8:	aa08      	add	r2, sp, #32
   25cfa:	4601      	mov	r1, r0
   25cfc:	4650      	mov	r0, sl
   25cfe:	f7f7 ff72 	bl	1dbe6 <net_ipaddr_parse>
   25d02:	4682      	mov	sl, r0
		if (remote_addr.sa_family == AF_INET6) {
   25d04:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25d08:	2b0a      	cmp	r3, #10
   25d0a:	d1af      	bne.n	25c6c <net_app_init_client+0x4c>
			net_sin6(&remote_addr)->sin6_port = htons(peer_port);
   25d0c:	ea4f 2318 	mov.w	r3, r8, lsr #8
   25d10:	ea43 2808 	orr.w	r8, r3, r8, lsl #8
   25d14:	f8ad 8022 	strh.w	r8, [sp, #34]	; 0x22
   25d18:	e7a8      	b.n	25c6c <net_app_init_client+0x4c>
			strncpy(base_addr_str, peer_addr_str,
   25d1a:	222e      	movs	r2, #46	; 0x2e
   25d1c:	9923      	ldr	r1, [sp, #140]	; 0x8c
   25d1e:	a80e      	add	r0, sp, #56	; 0x38
   25d20:	f003 ffec 	bl	29cfc <strncpy>
	const char *base_peer_addr = peer_addr_str;
   25d24:	f8dd a08c 	ldr.w	sl, [sp, #140]	; 0x8c
   25d28:	e7e3      	b.n	25cf2 <net_app_init_client+0xd2>
	int ret, addr_ok = false;
   25d2a:	f04f 0a00 	mov.w	sl, #0
   25d2e:	e79d      	b.n	25c6c <net_app_init_client+0x4c>
		addr.sa_family = remote_addr.sa_family;
   25d30:	f8bd 3020 	ldrh.w	r3, [sp, #32]
   25d34:	f8ad 3008 	strh.w	r3, [sp, #8]
   25d38:	e7a7      	b.n	25c8a <net_app_init_client+0x6a>
		close_net_ctx(ctx);
   25d3a:	4620      	mov	r0, r4
   25d3c:	f7ff ff23 	bl	25b86 <close_net_ctx>
		goto fail;
   25d40:	e7c6      	b.n	25cd0 <net_app_init_client+0xb0>
			memcpy(&ctx->ipv6.remote, peer_addr,
   25d42:	2218      	movs	r2, #24
   25d44:	4631      	mov	r1, r6
   25d46:	f104 001c 	add.w	r0, r4, #28
   25d4a:	f7da fab9 	bl	2c0 <memcpy>
			ctx->default_ctx = &ctx->ipv6;
   25d4e:	6364      	str	r4, [r4, #52]	; 0x34
   25d50:	e7b8      	b.n	25cc4 <net_app_init_client+0xa4>
	if (!peer_addr_str) {
   25d52:	9b23      	ldr	r3, [sp, #140]	; 0x8c
   25d54:	b363      	cbz	r3, 25db0 <net_app_init_client+0x190>
	ret = set_remote_addr(ctx, &remote_addr, base_addr_str,
   25d56:	9b25      	ldr	r3, [sp, #148]	; 0x94
   25d58:	9300      	str	r3, [sp, #0]
   25d5a:	f11a 0300 	adds.w	r3, sl, #0
   25d5e:	bf18      	it	ne
   25d60:	2301      	movne	r3, #1
   25d62:	aa0e      	add	r2, sp, #56	; 0x38
   25d64:	a908      	add	r1, sp, #32
   25d66:	4620      	mov	r0, r4
   25d68:	f7ff feeb 	bl	25b42 <set_remote_addr>
	if (ret < 0) {
   25d6c:	1e05      	subs	r5, r0, #0
   25d6e:	db25      	blt.n	25dbc <net_app_init_client+0x19c>
	if (!ctx->default_ctx ||
   25d70:	6b63      	ldr	r3, [r4, #52]	; 0x34
   25d72:	b39b      	cbz	r3, 25ddc <net_app_init_client+0x1bc>
	    ctx->default_ctx->remote.sa_family == AF_UNSPEC) {
   25d74:	8b9b      	ldrh	r3, [r3, #28]
	if (!ctx->default_ctx ||
   25d76:	b3a3      	cbz	r3, 25de2 <net_app_init_client+0x1c2>
	if (ctx->ipv6.remote.sa_family == AF_INET6) {
   25d78:	8ba3      	ldrh	r3, [r4, #28]
   25d7a:	2b0a      	cmp	r3, #10
   25d7c:	d1a2      	bne.n	25cc4 <net_app_init_client+0xa4>
		ctx->ipv6.local.sa_family = AF_INET6;
   25d7e:	4625      	mov	r5, r4
   25d80:	f825 3f04 	strh.w	r3, [r5, #4]!
		_net_app_set_local_addr(&ctx->ipv6.local, NULL,
   25d84:	88e2      	ldrh	r2, [r4, #6]
   25d86:	2100      	movs	r1, #0
   25d88:	4628      	mov	r0, r5
   25d8a:	f000 f8a3 	bl	25ed4 <_net_app_set_local_addr>
		ret = _net_app_set_net_ctx(ctx, ctx->ipv6.ctx,
   25d8e:	6821      	ldr	r1, [r4, #0]
   25d90:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   25d94:	9300      	str	r3, [sp, #0]
   25d96:	2318      	movs	r3, #24
   25d98:	462a      	mov	r2, r5
   25d9a:	4620      	mov	r0, r4
   25d9c:	f000 f886 	bl	25eac <_net_app_set_net_ctx>
		if (ret < 0) {
   25da0:	1e05      	subs	r5, r0, #0
   25da2:	da8f      	bge.n	25cc4 <net_app_init_client+0xa4>
			net_context_put(ctx->ipv6.ctx);
   25da4:	6820      	ldr	r0, [r4, #0]
   25da6:	f7f6 fbb3 	bl	1c510 <net_context_put>
			ctx->ipv6.ctx = NULL;
   25daa:	2300      	movs	r3, #0
   25dac:	6023      	str	r3, [r4, #0]
   25dae:	e789      	b.n	25cc4 <net_app_init_client+0xa4>
		close_net_ctx(ctx);
   25db0:	4620      	mov	r0, r4
   25db2:	f7ff fee8 	bl	25b86 <close_net_ctx>
		ret = -EINVAL;
   25db6:	f06f 0515 	mvn.w	r5, #21
		goto fail;
   25dba:	e789      	b.n	25cd0 <net_app_init_client+0xb0>
		close_net_ctx(ctx);
   25dbc:	4620      	mov	r0, r4
   25dbe:	f7ff fee2 	bl	25b86 <close_net_ctx>
		goto fail;
   25dc2:	e785      	b.n	25cd0 <net_app_init_client+0xb0>
		return -EINVAL;
   25dc4:	f06f 0515 	mvn.w	r5, #21
   25dc8:	e782      	b.n	25cd0 <net_app_init_client+0xb0>
		return -EALREADY;
   25dca:	f06f 0577 	mvn.w	r5, #119	; 0x77
   25dce:	e77f      	b.n	25cd0 <net_app_init_client+0xb0>
			return -EINVAL;
   25dd0:	f06f 0515 	mvn.w	r5, #21
   25dd4:	e77c      	b.n	25cd0 <net_app_init_client+0xb0>
			return -EPROTONOSUPPORT;
   25dd6:	f06f 057a 	mvn.w	r5, #122	; 0x7a
   25dda:	e779      	b.n	25cd0 <net_app_init_client+0xb0>
		return -EPFNOSUPPORT;
   25ddc:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25de0:	e776      	b.n	25cd0 <net_app_init_client+0xb0>
   25de2:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25de6:	e773      	b.n	25cd0 <net_app_init_client+0xb0>
   25de8:	0001cadf 	.word	0x0001cadf
   25dec:	00025e83 	.word	0x00025e83

00025df0 <net_app_connect>:
{
	struct net_context *net_ctx;
	bool started = false;
	int ret;

	if (!ctx) {
   25df0:	b1d0      	cbz	r0, 25e28 <net_app_connect+0x38>
{
   25df2:	b570      	push	{r4, r5, r6, lr}
   25df4:	b082      	sub	sp, #8
   25df6:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   25df8:	f890 2077 	ldrb.w	r2, [r0, #119]	; 0x77
   25dfc:	f012 0f01 	tst.w	r2, #1
   25e00:	d015      	beq.n	25e2e <net_app_connect+0x3e>
		return -ENOENT;
	}

	if (ctx->app_type != NET_APP_CLIENT) {
   25e02:	f890 2076 	ldrb.w	r2, [r0, #118]	; 0x76
   25e06:	2a02      	cmp	r2, #2
   25e08:	d114      	bne.n	25e34 <net_app_connect+0x44>
   25e0a:	460d      	mov	r5, r1
		return -EINVAL;
	}

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   25e0c:	2100      	movs	r1, #0
   25e0e:	f000 f8df 	bl	25fd0 <_net_app_select_net_ctx>
	if (!net_ctx) {
   25e12:	b190      	cbz	r0, 25e3a <net_app_connect+0x4a>
		}
	} else
#endif /* CONFIG_NET_APP_DTLS */
	{
		ret = net_context_connect(net_ctx,
					  &ctx->default_ctx->remote,
   25e14:	6b61      	ldr	r1, [r4, #52]	; 0x34
		ret = net_context_connect(net_ctx,
   25e16:	9401      	str	r4, [sp, #4]
   25e18:	9500      	str	r5, [sp, #0]
   25e1a:	4b09      	ldr	r3, [pc, #36]	; (25e40 <net_app_connect+0x50>)
   25e1c:	2218      	movs	r2, #24
   25e1e:	311c      	adds	r1, #28
   25e20:	f7f6 fd4a 	bl	1c8b8 <net_context_connect>
		}
#endif
	}

	return ret;
}
   25e24:	b002      	add	sp, #8
   25e26:	bd70      	pop	{r4, r5, r6, pc}
		return -EINVAL;
   25e28:	f06f 0015 	mvn.w	r0, #21
   25e2c:	4770      	bx	lr
		return -ENOENT;
   25e2e:	f06f 0001 	mvn.w	r0, #1
   25e32:	e7f7      	b.n	25e24 <net_app_connect+0x34>
		return -EINVAL;
   25e34:	f06f 0015 	mvn.w	r0, #21
   25e38:	e7f4      	b.n	25e24 <net_app_connect+0x34>
		return -EAFNOSUPPORT;
   25e3a:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25e3e:	e7f1      	b.n	25e24 <net_app_connect+0x34>
   25e40:	00025c01 	.word	0x00025c01

00025e44 <select_default_ctx>:

#if defined(CONFIG_NET_APP_SERVER) || defined(CONFIG_NET_APP_CLIENT)
static void select_default_ctx(struct net_app_ctx *ctx)
{
#if defined(CONFIG_NET_IPV6)
	ctx->default_ctx = &ctx->ipv6;
   25e44:	6340      	str	r0, [r0, #52]	; 0x34
   25e46:	4770      	bx	lr

00025e48 <_app_send>:
	struct net_app_ctx *ctx = user_data;

	ARG_UNUSED(ctx);

#if defined(CONFIG_NET_APP_CLIENT)
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25e48:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25e4c:	2802      	cmp	r0, #2
   25e4e:	d000      	beq.n	25e52 <_app_send+0xa>
   25e50:	4770      	bx	lr
{
   25e52:	b510      	push	{r4, lr}
	if (ctx->app_type == NET_APP_CLIENT && ctx->cb.send) {
   25e54:	6c5c      	ldr	r4, [r3, #68]	; 0x44
   25e56:	b114      	cbz	r4, 25e5e <_app_send+0x16>
   25e58:	4618      	mov	r0, r3
		ctx->cb.send(ctx, status, token, ctx->user_data);
   25e5a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25e5c:	47a0      	blx	r4
   25e5e:	bd10      	pop	{r4, pc}

00025e60 <setup_ipv6_ctx>:
{
   25e60:	b510      	push	{r4, lr}
   25e62:	4604      	mov	r4, r0
	ret = net_context_get(AF_INET6, sock_type, proto, &ctx->ipv6.ctx);
   25e64:	4603      	mov	r3, r0
   25e66:	200a      	movs	r0, #10
   25e68:	f7f6 f8e6 	bl	1c038 <net_context_get>
	if (ret < 0) {
   25e6c:	2800      	cmp	r0, #0
   25e6e:	db05      	blt.n	25e7c <setup_ipv6_ctx+0x1c>
	net_context_setup_pools(ctx->ipv6.ctx, ctx->tx_slab,
   25e70:	6823      	ldr	r3, [r4, #0]
   25e72:	6ea1      	ldr	r1, [r4, #104]	; 0x68
   25e74:	6ee2      	ldr	r2, [r4, #108]	; 0x6c
					   net_pkt_get_slab_func_t tx_slab,
					   net_pkt_get_pool_func_t data_pool)
{
	NET_ASSERT(context);

	context->tx_slab = tx_slab;
   25e76:	63d9      	str	r1, [r3, #60]	; 0x3c
	context->data_pool = data_pool;
   25e78:	641a      	str	r2, [r3, #64]	; 0x40
}
   25e7a:	bd10      	pop	{r4, pc}
		ctx->ipv6.ctx = NULL;
   25e7c:	2300      	movs	r3, #0
   25e7e:	6023      	str	r3, [r4, #0]
		return ret;
   25e80:	bd10      	pop	{r4, pc}

00025e82 <_net_app_received>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25e82:	f893 0076 	ldrb.w	r0, [r3, #118]	; 0x76
   25e86:	2802      	cmp	r0, #2
   25e88:	d000      	beq.n	25e8c <_net_app_received+0xa>
   25e8a:	4770      	bx	lr
{
   25e8c:	b538      	push	{r3, r4, r5, lr}
   25e8e:	4618      	mov	r0, r3
   25e90:	4614      	mov	r4, r2
		if (!pkt) {
   25e92:	b121      	cbz	r1, 25e9e <_net_app_received+0x1c>
		if (ctx->cb.recv) {
   25e94:	6c1d      	ldr	r5, [r3, #64]	; 0x40
   25e96:	b10d      	cbz	r5, 25e9c <_net_app_received+0x1a>
			ctx->cb.recv(ctx, pkt, status, ctx->user_data);
   25e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
   25e9a:	47a8      	blx	r5
   25e9c:	bd38      	pop	{r3, r4, r5, pc}
			if (ctx->cb.close) {
   25e9e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   25ea0:	2b00      	cmp	r3, #0
   25ea2:	d0fb      	beq.n	25e9c <_net_app_received+0x1a>
				ctx->cb.close(ctx, status, ctx->user_data);
   25ea4:	6f02      	ldr	r2, [r0, #112]	; 0x70
   25ea6:	4621      	mov	r1, r4
   25ea8:	4798      	blx	r3
   25eaa:	bd38      	pop	{r3, r4, r5, pc}

00025eac <_net_app_set_net_ctx>:
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25eac:	b161      	cbz	r1, 25ec8 <_net_app_set_net_ctx+0x1c>
{
   25eae:	b510      	push	{r4, lr}
   25eb0:	4614      	mov	r4, r2
   25eb2:	4608      	mov	r0, r1
	return context->flags & NET_CONTEXT_IN_USE;
   25eb4:	f891 205d 	ldrb.w	r2, [r1, #93]	; 0x5d
	if (!net_ctx || !net_context_is_used(net_ctx)) {
   25eb8:	f012 0f01 	tst.w	r2, #1
   25ebc:	d007      	beq.n	25ece <_net_app_set_net_ctx+0x22>
   25ebe:	461a      	mov	r2, r3
   25ec0:	4621      	mov	r1, r4
	ret = net_context_bind(net_ctx, addr, socklen);
   25ec2:	f7f6 fb67 	bl	1c594 <net_context_bind>
	return ret;
   25ec6:	bd10      	pop	{r4, pc}
		return -ENOENT;
   25ec8:	f06f 0001 	mvn.w	r0, #1
   25ecc:	4770      	bx	lr
   25ece:	f06f 0001 	mvn.w	r0, #1
}
   25ed2:	bd10      	pop	{r4, pc}

00025ed4 <_net_app_set_local_addr>:
{
   25ed4:	b570      	push	{r4, r5, r6, lr}
   25ed6:	b084      	sub	sp, #16
   25ed8:	4604      	mov	r4, r0
	if (myaddr) {
   25eda:	b169      	cbz	r1, 25ef8 <_net_app_set_local_addr+0x24>
		if (addr->sa_family == AF_INET) {
   25edc:	8800      	ldrh	r0, [r0, #0]
   25ede:	2802      	cmp	r0, #2
   25ee0:	d029      	beq.n	25f36 <_net_app_set_local_addr+0x62>
		} else if (addr->sa_family == AF_INET6) {
   25ee2:	280a      	cmp	r0, #10
   25ee4:	d12a      	bne.n	25f3c <_net_app_set_local_addr+0x68>
			net_sin6(addr)->sin6_port = htons(port);
   25ee6:	0a13      	lsrs	r3, r2, #8
   25ee8:	ea43 2202 	orr.w	r2, r3, r2, lsl #8
   25eec:	8062      	strh	r2, [r4, #2]
		return net_addr_pton(addr->sa_family, myaddr, inaddr);
   25eee:	1d22      	adds	r2, r4, #4
   25ef0:	f7f7 fcc3 	bl	1d87a <net_addr_pton>
}
   25ef4:	b004      	add	sp, #16
   25ef6:	bd70      	pop	{r4, r5, r6, pc}
	if (addr->sa_family == AF_INET6) {
   25ef8:	8803      	ldrh	r3, [r0, #0]
   25efa:	2b0a      	cmp	r3, #10
   25efc:	d003      	beq.n	25f06 <_net_app_set_local_addr+0x32>
	} else if (addr->sa_family == AF_INET) {
   25efe:	2b02      	cmp	r3, #2
   25f00:	d016      	beq.n	25f30 <_net_app_set_local_addr+0x5c>
	return 0;
   25f02:	2000      	movs	r0, #0
   25f04:	e7f6      	b.n	25ef4 <_net_app_set_local_addr+0x20>
		net_ipaddr_copy(&net_sin6(addr)->sin6_addr,
   25f06:	f7f9 f959 	bl	1f1bc <net_ipv6_unspecified_address>
   25f0a:	4601      	mov	r1, r0
   25f0c:	2000      	movs	r0, #0
   25f0e:	f7f5 faf9 	bl	1b504 <net_if_ipv6_select_src_addr>
   25f12:	4603      	mov	r3, r0
   25f14:	466d      	mov	r5, sp
   25f16:	6800      	ldr	r0, [r0, #0]
   25f18:	6859      	ldr	r1, [r3, #4]
   25f1a:	689a      	ldr	r2, [r3, #8]
   25f1c:	68db      	ldr	r3, [r3, #12]
   25f1e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   25f20:	466d      	mov	r5, sp
   25f22:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   25f24:	6060      	str	r0, [r4, #4]
   25f26:	60a1      	str	r1, [r4, #8]
   25f28:	60e2      	str	r2, [r4, #12]
   25f2a:	6123      	str	r3, [r4, #16]
	return 0;
   25f2c:	2000      	movs	r0, #0
   25f2e:	e7e1      	b.n	25ef4 <_net_app_set_local_addr+0x20>
		return -EPFNOSUPPORT;
   25f30:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f34:	e7de      	b.n	25ef4 <_net_app_set_local_addr+0x20>
			return -EPFNOSUPPORT;
   25f36:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   25f3a:	e7db      	b.n	25ef4 <_net_app_set_local_addr+0x20>
			return -EAFNOSUPPORT;
   25f3c:	f06f 0069 	mvn.w	r0, #105	; 0x69
   25f40:	e7d8      	b.n	25ef4 <_net_app_set_local_addr+0x20>

00025f42 <_net_app_config_local_ctx>:
{
   25f42:	b538      	push	{r3, r4, r5, lr}
   25f44:	4604      	mov	r4, r0
	if (!addr) {
   25f46:	b163      	cbz	r3, 25f62 <_net_app_config_local_ctx+0x20>
		if (addr->sa_family == AF_INET6) {
   25f48:	881b      	ldrh	r3, [r3, #0]
   25f4a:	2b0a      	cmp	r3, #10
   25f4c:	d015      	beq.n	25f7a <_net_app_config_local_ctx+0x38>
		} else if (addr->sa_family == AF_INET) {
   25f4e:	2b02      	cmp	r3, #2
   25f50:	d01c      	beq.n	25f8c <_net_app_config_local_ctx+0x4a>
		} else if (addr->sa_family == AF_UNSPEC) {
   25f52:	b9f3      	cbnz	r3, 25f92 <_net_app_config_local_ctx+0x50>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25f54:	4620      	mov	r0, r4
   25f56:	f7ff ff83 	bl	25e60 <setup_ipv6_ctx>
   25f5a:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25f5c:	6364      	str	r4, [r4, #52]	; 0x34
}
   25f5e:	4628      	mov	r0, r5
   25f60:	bd38      	pop	{r3, r4, r5, pc}
		if (ctx->ipv6.local.sa_family == AF_INET6 ||
   25f62:	8883      	ldrh	r3, [r0, #4]
   25f64:	2b0a      	cmp	r3, #10
   25f66:	d000      	beq.n	25f6a <_net_app_config_local_ctx+0x28>
   25f68:	b96b      	cbnz	r3, 25f86 <_net_app_config_local_ctx+0x44>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25f6a:	4620      	mov	r0, r4
   25f6c:	f7ff ff78 	bl	25e60 <setup_ipv6_ctx>
   25f70:	4605      	mov	r5, r0
		select_default_ctx(ctx);
   25f72:	4620      	mov	r0, r4
   25f74:	f7ff ff66 	bl	25e44 <select_default_ctx>
   25f78:	e7f1      	b.n	25f5e <_net_app_config_local_ctx+0x1c>
			ret = setup_ipv6_ctx(ctx, sock_type, proto);
   25f7a:	4620      	mov	r0, r4
   25f7c:	f7ff ff70 	bl	25e60 <setup_ipv6_ctx>
   25f80:	4605      	mov	r5, r0
			ctx->default_ctx = &ctx->ipv6;
   25f82:	6364      	str	r4, [r4, #52]	; 0x34
   25f84:	e7eb      	b.n	25f5e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25f86:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25f8a:	e7e8      	b.n	25f5e <_net_app_config_local_ctx+0x1c>
			ret = -EPFNOSUPPORT;
   25f8c:	f06f 055f 	mvn.w	r5, #95	; 0x5f
   25f90:	e7e5      	b.n	25f5e <_net_app_config_local_ctx+0x1c>
			ret = -EINVAL;
   25f92:	f06f 0515 	mvn.w	r5, #21
	return ret;
   25f96:	e7e2      	b.n	25f5e <_net_app_config_local_ctx+0x1c>

00025f98 <net_app_release>:
	if (!ctx) {
   25f98:	b1a0      	cbz	r0, 25fc4 <net_app_release+0x2c>
{
   25f9a:	b510      	push	{r4, lr}
   25f9c:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   25f9e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25fa2:	f013 0f01 	tst.w	r3, #1
   25fa6:	d010      	beq.n	25fca <net_app_release+0x32>
	if (ctx->ipv6.ctx) {
   25fa8:	6800      	ldr	r0, [r0, #0]
   25faa:	b118      	cbz	r0, 25fb4 <net_app_release+0x1c>
		net_context_put(ctx->ipv6.ctx);
   25fac:	f7f6 fab0 	bl	1c510 <net_context_put>
		ctx->ipv6.ctx = NULL;
   25fb0:	2300      	movs	r3, #0
   25fb2:	6023      	str	r3, [r4, #0]
	ctx->is_init = false;
   25fb4:	f894 3077 	ldrb.w	r3, [r4, #119]	; 0x77
   25fb8:	f36f 0300 	bfc	r3, #0, #1
   25fbc:	f884 3077 	strb.w	r3, [r4, #119]	; 0x77
	return 0;
   25fc0:	2000      	movs	r0, #0
   25fc2:	bd10      	pop	{r4, pc}
		return -EINVAL;
   25fc4:	f06f 0015 	mvn.w	r0, #21
   25fc8:	4770      	bx	lr
		return -ENOENT;
   25fca:	f06f 0001 	mvn.w	r0, #1
}
   25fce:	bd10      	pop	{r4, pc}

00025fd0 <_net_app_select_net_ctx>:
	if (ctx->app_type == NET_APP_CLIENT) {
   25fd0:	f890 3076 	ldrb.w	r3, [r0, #118]	; 0x76
   25fd4:	2b02      	cmp	r3, #2
   25fd6:	d128      	bne.n	2602a <_net_app_select_net_ctx+0x5a>
	if (ctx->proto == IPPROTO_UDP) {
   25fd8:	f890 3075 	ldrb.w	r3, [r0, #117]	; 0x75
   25fdc:	2b11      	cmp	r3, #17
   25fde:	d009      	beq.n	25ff4 <_net_app_select_net_ctx+0x24>
		if (!dst) {
   25fe0:	b1c1      	cbz	r1, 26014 <_net_app_select_net_ctx+0x44>
			if (dst->sa_family == AF_INET) {
   25fe2:	880b      	ldrh	r3, [r1, #0]
   25fe4:	2b02      	cmp	r3, #2
   25fe6:	d01c      	beq.n	26022 <_net_app_select_net_ctx+0x52>
			if (dst->sa_family == AF_INET6) {
   25fe8:	2b0a      	cmp	r3, #10
   25fea:	d016      	beq.n	2601a <_net_app_select_net_ctx+0x4a>
			if (dst->sa_family == AF_UNSPEC) {
   25fec:	b9db      	cbnz	r3, 26026 <_net_app_select_net_ctx+0x56>
				return ctx->default_ctx->ctx;
   25fee:	6b43      	ldr	r3, [r0, #52]	; 0x34
   25ff0:	6818      	ldr	r0, [r3, #0]
   25ff2:	4770      	bx	lr
		if (!dst) {
   25ff4:	b131      	cbz	r1, 26004 <_net_app_select_net_ctx+0x34>
			if (ctx->is_tls) {
   25ff6:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   25ffa:	f013 0f02 	tst.w	r3, #2
   25ffe:	d0f0      	beq.n	25fe2 <_net_app_select_net_ctx+0x12>
				return NULL;
   26000:	2000      	movs	r0, #0
   26002:	4770      	bx	lr
			if (ctx->is_tls) {
   26004:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26008:	f013 0f02 	tst.w	r3, #2
   2600c:	d107      	bne.n	2601e <_net_app_select_net_ctx+0x4e>
				return ctx->default_ctx->ctx;
   2600e:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26010:	6818      	ldr	r0, [r3, #0]
   26012:	4770      	bx	lr
			return ctx->default_ctx->ctx;
   26014:	6b43      	ldr	r3, [r0, #52]	; 0x34
   26016:	6818      	ldr	r0, [r3, #0]
   26018:	4770      	bx	lr
				return ctx->ipv6.ctx;
   2601a:	6800      	ldr	r0, [r0, #0]
   2601c:	4770      	bx	lr
				return NULL;
   2601e:	2000      	movs	r0, #0
   26020:	4770      	bx	lr
				return NULL;
   26022:	2000      	movs	r0, #0
   26024:	4770      	bx	lr
	return NULL;
   26026:	2000      	movs	r0, #0
   26028:	4770      	bx	lr
	struct net_context *net_ctx = NULL;
   2602a:	2000      	movs	r0, #0
}
   2602c:	4770      	bx	lr

0002602e <net_app_set_cb>:
	if (!ctx) {
   2602e:	b170      	cbz	r0, 2604e <net_app_set_cb+0x20>
{
   26030:	b410      	push	{r4}
   26032:	4604      	mov	r4, r0
	if (!ctx->is_init) {
   26034:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   26038:	f010 0f01 	tst.w	r0, #1
   2603c:	d00a      	beq.n	26054 <net_app_set_cb+0x26>
	ctx->cb.connect = connect_cb;
   2603e:	63e1      	str	r1, [r4, #60]	; 0x3c
	ctx->cb.recv = recv_cb;
   26040:	6422      	str	r2, [r4, #64]	; 0x40
	ctx->cb.send = send_cb;
   26042:	6463      	str	r3, [r4, #68]	; 0x44
	ctx->cb.close = close_cb;
   26044:	9b01      	ldr	r3, [sp, #4]
   26046:	64a3      	str	r3, [r4, #72]	; 0x48
	return 0;
   26048:	2000      	movs	r0, #0
}
   2604a:	bc10      	pop	{r4}
   2604c:	4770      	bx	lr
		return -EINVAL;
   2604e:	f06f 0015 	mvn.w	r0, #21
   26052:	4770      	bx	lr
		return -ENOENT;
   26054:	f06f 0001 	mvn.w	r0, #1
   26058:	e7f7      	b.n	2604a <net_app_set_cb+0x1c>
	...

0002605c <net_app_send_pkt>:
		     s32_t timeout,
		     void *user_data_send)
{
	int ret;

	if (!ctx) {
   2605c:	2800      	cmp	r0, #0
   2605e:	d064      	beq.n	2612a <net_app_send_pkt+0xce>
{
   26060:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   26064:	b08a      	sub	sp, #40	; 0x28
   26066:	460d      	mov	r5, r1
   26068:	4616      	mov	r6, r2
   2606a:	461f      	mov	r7, r3
   2606c:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   2606e:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   26072:	f013 0f01 	tst.w	r3, #1
   26076:	d05b      	beq.n	26130 <net_app_send_pkt+0xd4>
	return pkt->appdatalen;
   26078:	8e08      	ldrh	r0, [r1, #48]	; 0x30
	 * will be put back just before sending the packet. Normally the
	 * data that is sent does not contain IP header, but if the caller
	 * replies the packet directly back, the IP header could be there
	 * at this point.
	 */
	if (net_pkt_appdatalen(pkt) > 0) {
   2607a:	b188      	cbz	r0, 260a0 <net_app_send_pkt+0x44>
		int header_len;

		header_len = net_buf_frags_len(pkt->frags) -
   2607c:	f8d1 e008 	ldr.w	lr, [r1, #8]
   26080:	4673      	mov	r3, lr
	size_t bytes = 0;
   26082:	2100      	movs	r1, #0
   26084:	e002      	b.n	2608c <net_app_send_pkt+0x30>
		bytes += buf->len;
   26086:	899a      	ldrh	r2, [r3, #12]
   26088:	4411      	add	r1, r2
		buf = buf->frags;
   2608a:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   2608c:	2b00      	cmp	r3, #0
   2608e:	d1fa      	bne.n	26086 <net_app_send_pkt+0x2a>
   26090:	1a09      	subs	r1, r1, r0
			net_pkt_appdatalen(pkt);
		if (header_len > 0) {
   26092:	2900      	cmp	r1, #0
   26094:	dd0d      	ble.n	260b2 <net_app_send_pkt+0x56>
			net_buf_pull(pkt->frags, header_len);
   26096:	f10e 0008 	add.w	r0, lr, #8
   2609a:	f7f4 f9f8 	bl	1a48e <net_buf_simple_pull>
   2609e:	e008      	b.n	260b2 <net_app_send_pkt+0x56>
		}
	} else {
		net_pkt_set_appdatalen(pkt, net_buf_frags_len(pkt->frags));
   260a0:	688b      	ldr	r3, [r1, #8]
	size_t bytes = 0;
   260a2:	2200      	movs	r2, #0
   260a4:	e002      	b.n	260ac <net_app_send_pkt+0x50>
		bytes += buf->len;
   260a6:	8999      	ldrh	r1, [r3, #12]
   260a8:	440a      	add	r2, r1
		buf = buf->frags;
   260aa:	681b      	ldr	r3, [r3, #0]
	while (buf) {
   260ac:	2b00      	cmp	r3, #0
   260ae:	d1fa      	bne.n	260a6 <net_app_send_pkt+0x4a>
	pkt->appdatalen = len;
   260b0:	862a      	strh	r2, [r5, #48]	; 0x30
	}

	if (ctx->proto == IPPROTO_UDP) {
   260b2:	f894 3075 	ldrb.w	r3, [r4, #117]	; 0x75
   260b6:	2b11      	cmp	r3, #17
   260b8:	d00e      	beq.n	260d8 <net_app_send_pkt+0x7c>
				}
			}
		}
	}

	ret = ctx->send_data(pkt, dst, dst_len, _app_send, timeout,
   260ba:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
   260be:	9402      	str	r4, [sp, #8]
   260c0:	9b11      	ldr	r3, [sp, #68]	; 0x44
   260c2:	9301      	str	r3, [sp, #4]
   260c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
   260c6:	9300      	str	r3, [sp, #0]
   260c8:	4b21      	ldr	r3, [pc, #132]	; (26150 <net_app_send_pkt+0xf4>)
   260ca:	463a      	mov	r2, r7
   260cc:	4631      	mov	r1, r6
   260ce:	4628      	mov	r0, r5
   260d0:	47c0      	blx	r8
	if (ret < 0) {
		NET_DBG("Cannot send to peer (%d)", ret);
	}

	return ret;
}
   260d2:	b00a      	add	sp, #40	; 0x28
   260d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (!dst) {
   260d8:	b1de      	cbz	r6, 26112 <net_app_send_pkt+0xb6>
	return pkt->family;
   260da:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   260de:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   260e2:	2b02      	cmp	r3, #2
   260e4:	d02d      	beq.n	26142 <net_app_send_pkt+0xe6>
				if (net_pkt_family(pkt) == AF_INET6) {
   260e6:	2b0a      	cmp	r3, #10
   260e8:	d12e      	bne.n	26148 <net_app_send_pkt+0xec>
					net_ipaddr_copy(
   260ea:	af04      	add	r7, sp, #16
   260ec:	6830      	ldr	r0, [r6, #0]
   260ee:	6871      	ldr	r1, [r6, #4]
   260f0:	68b2      	ldr	r2, [r6, #8]
   260f2:	68f3      	ldr	r3, [r6, #12]
   260f4:	c70f      	stmia	r7!, {r0, r1, r2, r3}
   260f6:	6930      	ldr	r0, [r6, #16]
   260f8:	6971      	ldr	r1, [r6, #20]
   260fa:	c703      	stmia	r7!, {r0, r1}
   260fc:	af04      	add	r7, sp, #16
   260fe:	cf0f      	ldmia	r7!, {r0, r1, r2, r3}
   26100:	61e0      	str	r0, [r4, #28]
   26102:	6221      	str	r1, [r4, #32]
   26104:	6262      	str	r2, [r4, #36]	; 0x24
   26106:	62a3      	str	r3, [r4, #40]	; 0x28
   26108:	cf03      	ldmia	r7!, {r0, r1}
   2610a:	62e0      	str	r0, [r4, #44]	; 0x2c
   2610c:	6321      	str	r1, [r4, #48]	; 0x30
					dst_len = sizeof(struct sockaddr_in6);
   2610e:	2718      	movs	r7, #24
   26110:	e7d3      	b.n	260ba <net_app_send_pkt+0x5e>
   26112:	f895 3038 	ldrb.w	r3, [r5, #56]	; 0x38
   26116:	f3c3 03c3 	ubfx	r3, r3, #3, #4
			if (net_pkt_family(pkt) == AF_INET) {
   2611a:	2b02      	cmp	r3, #2
   2611c:	d00b      	beq.n	26136 <net_app_send_pkt+0xda>
				if (net_pkt_family(pkt) == AF_INET6) {
   2611e:	2b0a      	cmp	r3, #10
   26120:	d10c      	bne.n	2613c <net_app_send_pkt+0xe0>
					dst = &ctx->ipv6.remote;
   26122:	f104 061c 	add.w	r6, r4, #28
					dst_len = sizeof(struct sockaddr_in6);
   26126:	2718      	movs	r7, #24
   26128:	e7c7      	b.n	260ba <net_app_send_pkt+0x5e>
		return -EINVAL;
   2612a:	f06f 0015 	mvn.w	r0, #21
   2612e:	4770      	bx	lr
		return -ENOENT;
   26130:	f06f 0001 	mvn.w	r0, #1
   26134:	e7cd      	b.n	260d2 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26136:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2613a:	e7ca      	b.n	260d2 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   2613c:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26140:	e7c7      	b.n	260d2 <net_app_send_pkt+0x76>
				return -EPFNOSUPPORT;
   26142:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   26146:	e7c4      	b.n	260d2 <net_app_send_pkt+0x76>
					return -EPFNOSUPPORT;
   26148:	f06f 005f 	mvn.w	r0, #95	; 0x5f
   2614c:	e7c1      	b.n	260d2 <net_app_send_pkt+0x76>
   2614e:	bf00      	nop
   26150:	00025e49 	.word	0x00025e49

00026154 <net_app_get_net_pkt>:
}

struct net_pkt *net_app_get_net_pkt(struct net_app_ctx *ctx,
				    sa_family_t family,
				    s32_t timeout)
{
   26154:	b510      	push	{r4, lr}
   26156:	b086      	sub	sp, #24
	struct net_context *net_ctx;
	struct sockaddr dst = { 0 };
   26158:	2300      	movs	r3, #0
   2615a:	9300      	str	r3, [sp, #0]
   2615c:	9301      	str	r3, [sp, #4]
   2615e:	9302      	str	r3, [sp, #8]
   26160:	9303      	str	r3, [sp, #12]
   26162:	9304      	str	r3, [sp, #16]
   26164:	9305      	str	r3, [sp, #20]

	if (!ctx) {
   26166:	b198      	cbz	r0, 26190 <net_app_get_net_pkt+0x3c>
   26168:	4603      	mov	r3, r0
		return NULL;
	}

	if (!ctx->is_init) {
   2616a:	f890 0077 	ldrb.w	r0, [r0, #119]	; 0x77
   2616e:	f010 0f01 	tst.w	r0, #1
   26172:	d00f      	beq.n	26194 <net_app_get_net_pkt+0x40>
   26174:	4618      	mov	r0, r3
   26176:	4614      	mov	r4, r2
   26178:	460b      	mov	r3, r1
		return NULL;
	}

	dst.sa_family = family;
   2617a:	a906      	add	r1, sp, #24
   2617c:	f821 3d18 	strh.w	r3, [r1, #-24]!

	net_ctx = _net_app_select_net_ctx(ctx, &dst);
   26180:	f7ff ff26 	bl	25fd0 <_net_app_select_net_ctx>
	if (!net_ctx) {
   26184:	b140      	cbz	r0, 26198 <net_app_get_net_pkt+0x44>
		return NULL;
	}

	return net_pkt_get_tx(net_ctx, timeout);
   26186:	4621      	mov	r1, r4
   26188:	f7f6 fe24 	bl	1cdd4 <net_pkt_get_tx>
}
   2618c:	b006      	add	sp, #24
   2618e:	bd10      	pop	{r4, pc}
		return NULL;
   26190:	2000      	movs	r0, #0
   26192:	e7fb      	b.n	2618c <net_app_get_net_pkt+0x38>
		return NULL;
   26194:	2000      	movs	r0, #0
   26196:	e7f9      	b.n	2618c <net_app_get_net_pkt+0x38>
		return NULL;
   26198:	2000      	movs	r0, #0
   2619a:	e7f7      	b.n	2618c <net_app_get_net_pkt+0x38>

0002619c <net_app_close>:

int net_app_close(struct net_app_ctx *ctx)
{
	struct net_context *net_ctx;

	if (!ctx) {
   2619c:	b1c0      	cbz	r0, 261d0 <net_app_close+0x34>
{
   2619e:	b538      	push	{r3, r4, r5, lr}
   261a0:	4604      	mov	r4, r0
		return -EINVAL;
	}

	if (!ctx->is_init) {
   261a2:	f890 3077 	ldrb.w	r3, [r0, #119]	; 0x77
   261a6:	f013 0f01 	tst.w	r3, #1
   261aa:	d014      	beq.n	261d6 <net_app_close+0x3a>
		ctx->tls.close_requested = true;
		return -EINPROGRESS;
	}
#endif

	net_ctx = _net_app_select_net_ctx(ctx, NULL);
   261ac:	2100      	movs	r1, #0
   261ae:	f7ff ff0f 	bl	25fd0 <_net_app_select_net_ctx>
   261b2:	4605      	mov	r5, r0

	if (ctx->cb.close) {
   261b4:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   261b6:	b11b      	cbz	r3, 261c0 <net_app_close+0x24>
		ctx->cb.close(ctx, 0, ctx->user_data);
   261b8:	6f22      	ldr	r2, [r4, #112]	; 0x70
   261ba:	2100      	movs	r1, #0
   261bc:	4620      	mov	r0, r4
   261be:	4798      	blx	r3
			}
		}
	}
#endif

	if (net_ctx) {
   261c0:	b165      	cbz	r5, 261dc <net_app_close+0x40>
		net_ctx->net_app = NULL;
   261c2:	2400      	movs	r4, #0
   261c4:	666c      	str	r4, [r5, #100]	; 0x64
		net_context_put(net_ctx);
   261c6:	4628      	mov	r0, r5
   261c8:	f7f6 f9a2 	bl	1c510 <net_context_put>
	}

	return 0;
   261cc:	4620      	mov	r0, r4
   261ce:	bd38      	pop	{r3, r4, r5, pc}
		return -EINVAL;
   261d0:	f06f 0015 	mvn.w	r0, #21
   261d4:	4770      	bx	lr
		return -ENOENT;
   261d6:	f06f 0001 	mvn.w	r0, #1
   261da:	bd38      	pop	{r3, r4, r5, pc}
	return 0;
   261dc:	2000      	movs	r0, #0
}
   261de:	bd38      	pop	{r3, r4, r5, pc}

000261e0 <_net_app_bt_setup>:

static struct bt_gatt_service ipss_svc = BT_GATT_SERVICE(attrs);
#endif

int _net_app_bt_setup(void)
{
   261e0:	b510      	push	{r4, lr}
	struct net_if *iface;
	struct device *dev;
	int err;

	err = bt_enable(NULL);
   261e2:	2000      	movs	r0, #0
   261e4:	f7df fdea 	bl	5dbc <bt_enable>
	if (err < 0 && err != -EALREADY) {
   261e8:	1e03      	subs	r3, r0, #0
   261ea:	db14      	blt.n	26216 <_net_app_bt_setup+0x36>
		return err;
	}

	dev = device_get_binding("net_bt");
   261ec:	4810      	ldr	r0, [pc, #64]	; (26230 <_net_app_bt_setup+0x50>)
   261ee:	f001 f939 	bl	27464 <device_get_binding>
	if (!dev) {
   261f2:	b1b8      	cbz	r0, 26224 <_net_app_bt_setup+0x44>
		return -ENODEV;
	}

	iface = net_if_lookup_by_dev(dev);
   261f4:	f7f4 fc30 	bl	1aa58 <net_if_lookup_by_dev>
	if (!iface) {
   261f8:	4604      	mov	r4, r0
   261fa:	b1b0      	cbz	r0, 2622a <_net_app_bt_setup+0x4a>
		return -EINVAL;
	}

#if defined(CONFIG_NET_APP_BT_NODE)
	bt_gatt_service_register(&ipss_svc);
   261fc:	480d      	ldr	r0, [pc, #52]	; (26234 <_net_app_bt_setup+0x54>)
   261fe:	f7e3 fcf7 	bl	9bf0 <bt_gatt_service_register>

	if (net_mgmt(NET_REQUEST_BT_ADVERTISE, iface, ADV_STR,
   26202:	2303      	movs	r3, #3
   26204:	4a0c      	ldr	r2, [pc, #48]	; (26238 <_net_app_bt_setup+0x58>)
   26206:	4621      	mov	r1, r4
   26208:	480c      	ldr	r0, [pc, #48]	; (2623c <_net_app_bt_setup+0x5c>)
   2620a:	f7f7 fe6b 	bl	1dee4 <net_mgmt_NET_REQUEST_BT_ADVERTISE>
   2620e:	4603      	mov	r3, r0
   26210:	b928      	cbnz	r0, 2621e <_net_app_bt_setup+0x3e>
		return -EINVAL;
	}
#endif

	return 0;
}
   26212:	4618      	mov	r0, r3
   26214:	bd10      	pop	{r4, pc}
	if (err < 0 && err != -EALREADY) {
   26216:	f113 0f78 	cmn.w	r3, #120	; 0x78
   2621a:	d1fa      	bne.n	26212 <_net_app_bt_setup+0x32>
   2621c:	e7e6      	b.n	261ec <_net_app_bt_setup+0xc>
		return -EINVAL;
   2621e:	f06f 0315 	mvn.w	r3, #21
   26222:	e7f6      	b.n	26212 <_net_app_bt_setup+0x32>
		return -ENODEV;
   26224:	f06f 0312 	mvn.w	r3, #18
   26228:	e7f3      	b.n	26212 <_net_app_bt_setup+0x32>
		return -EINVAL;
   2622a:	f06f 0315 	mvn.w	r3, #21
   2622e:	e7f0      	b.n	26212 <_net_app_bt_setup+0x32>
   26230:	0002d720 	.word	0x0002d720
   26234:	2000c55c 	.word	0x2000c55c
   26238:	0002db48 	.word	0x0002db48
   2623c:	61550001 	.word	0x61550001

00026240 <shell_run>:
#include <init.h>

#define SHELL_PROMPT "shell> "

int shell_run(struct device *dev)
{
   26240:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	shell_init(SHELL_PROMPT);
   26242:	4802      	ldr	r0, [pc, #8]	; (2624c <shell_run+0xc>)
   26244:	f000 fbbe 	bl	269c4 <shell_init>
	return 0;
}
   26248:	2000      	movs	r0, #0
   2624a:	bd08      	pop	{r3, pc}
   2624c:	0002ea48 	.word	0x0002ea48

00026250 <get_prompt>:

static shell_cmd_function_t app_cmd_handler;
static shell_prompt_function_t app_prompt_handler;

static const char *get_prompt(void)
{
   26250:	b508      	push	{r3, lr}
	if (app_prompt_handler) {
   26252:	4b0f      	ldr	r3, [pc, #60]	; (26290 <get_prompt+0x40>)
   26254:	681b      	ldr	r3, [r3, #0]
   26256:	b123      	cbz	r3, 26262 <get_prompt+0x12>
		const char *str;

		str = app_prompt_handler();
   26258:	4798      	blx	r3
		if (str) {
   2625a:	4603      	mov	r3, r0
   2625c:	b108      	cbz	r0, 26262 <get_prompt+0x12>

		return default_module_prompt;
	}

	return prompt;
}
   2625e:	4618      	mov	r0, r3
   26260:	bd08      	pop	{r3, pc}
	if (default_module != -1) {
   26262:	4b0c      	ldr	r3, [pc, #48]	; (26294 <get_prompt+0x44>)
   26264:	681b      	ldr	r3, [r3, #0]
   26266:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2626a:	d00c      	beq.n	26286 <get_prompt+0x36>
		if (__shell_cmd_start[default_module].prompt) {
   2626c:	eb03 0343 	add.w	r3, r3, r3, lsl #1
   26270:	009a      	lsls	r2, r3, #2
   26272:	4b09      	ldr	r3, [pc, #36]	; (26298 <get_prompt+0x48>)
   26274:	4413      	add	r3, r2
   26276:	689b      	ldr	r3, [r3, #8]
   26278:	b143      	cbz	r3, 2628c <get_prompt+0x3c>
			ret = __shell_cmd_start[default_module].prompt();
   2627a:	4798      	blx	r3
			if (ret) {
   2627c:	4603      	mov	r3, r0
   2627e:	2800      	cmp	r0, #0
   26280:	d1ed      	bne.n	2625e <get_prompt+0xe>
		return default_module_prompt;
   26282:	4b06      	ldr	r3, [pc, #24]	; (2629c <get_prompt+0x4c>)
   26284:	e7eb      	b.n	2625e <get_prompt+0xe>
	return prompt;
   26286:	4b06      	ldr	r3, [pc, #24]	; (262a0 <get_prompt+0x50>)
   26288:	681b      	ldr	r3, [r3, #0]
   2628a:	e7e8      	b.n	2625e <get_prompt+0xe>
		return default_module_prompt;
   2628c:	4b03      	ldr	r3, [pc, #12]	; (2629c <get_prompt+0x4c>)
   2628e:	e7e6      	b.n	2625e <get_prompt+0xe>
   26290:	20002508 	.word	0x20002508
   26294:	2000c568 	.word	0x2000c568
   26298:	2000cc1c 	.word	0x2000cc1c
   2629c:	200026b8 	.word	0x200026b8
   262a0:	200026d0 	.word	0x200026d0

000262a4 <exit_module>:
	return set_default_module(argv[1]);
}

static int exit_module(int argc, char *argv[])
{
	if (argc == 1) {
   262a4:	2801      	cmp	r0, #1
   262a6:	d001      	beq.n	262ac <exit_module+0x8>
		default_module = -1;
	}

	return 0;
}
   262a8:	2000      	movs	r0, #0
   262aa:	4770      	bx	lr
		default_module = -1;
   262ac:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   262b0:	4b01      	ldr	r3, [pc, #4]	; (262b8 <exit_module+0x14>)
   262b2:	601a      	str	r2, [r3, #0]
   262b4:	e7f8      	b.n	262a8 <exit_module+0x4>
   262b6:	bf00      	nop
   262b8:	2000c568 	.word	0x2000c568

000262bc <print_module_commands>:
{
   262bc:	b538      	push	{r3, r4, r5, lr}
   262be:	4605      	mov	r5, r0
	printk("help\n");
   262c0:	480a      	ldr	r0, [pc, #40]	; (262ec <print_module_commands+0x30>)
   262c2:	f7dc f997 	bl	25f4 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262c6:	2400      	movs	r4, #0
   262c8:	e003      	b.n	262d2 <print_module_commands+0x16>
		printk("%s\n", shell_module->commands[i].cmd_name);
   262ca:	4809      	ldr	r0, [pc, #36]	; (262f0 <print_module_commands+0x34>)
   262cc:	f7dc f992 	bl	25f4 <printk>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   262d0:	3401      	adds	r4, #1
   262d2:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   262d6:	009a      	lsls	r2, r3, #2
   262d8:	4b06      	ldr	r3, [pc, #24]	; (262f4 <print_module_commands+0x38>)
   262da:	4413      	add	r3, r2
   262dc:	6859      	ldr	r1, [r3, #4]
   262de:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   262e2:	0093      	lsls	r3, r2, #2
   262e4:	58c9      	ldr	r1, [r1, r3]
   262e6:	2900      	cmp	r1, #0
   262e8:	d1ef      	bne.n	262ca <print_module_commands+0xe>
}
   262ea:	bd38      	pop	{r3, r4, r5, pc}
   262ec:	0002eb04 	.word	0x0002eb04
   262f0:	0002dd20 	.word	0x0002dd20
   262f4:	2000cc1c 	.word	0x2000cc1c

000262f8 <line2argv>:
{
   262f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   262fa:	4604      	mov	r4, r0
   262fc:	460e      	mov	r6, r1
   262fe:	4617      	mov	r7, r2
	if (!strlen(str)) {
   26300:	f7da f9fe 	bl	700 <strlen>
   26304:	b918      	cbnz	r0, 2630e <line2argv+0x16>
   26306:	4605      	mov	r5, r0
}
   26308:	4628      	mov	r0, r5
   2630a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		str++;
   2630c:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   2630e:	7823      	ldrb	r3, [r4, #0]
   26310:	2b20      	cmp	r3, #32
   26312:	d0fb      	beq.n	2630c <line2argv+0x14>
	if (!*str) {
   26314:	b30b      	cbz	r3, 2635a <line2argv+0x62>
	argv[argc++] = str;
   26316:	6034      	str	r4, [r6, #0]
   26318:	2501      	movs	r5, #1
	while ((str = strchr(str, ' '))) {
   2631a:	e00a      	b.n	26332 <line2argv+0x3a>
			str++;
   2631c:	3401      	adds	r4, #1
		while (*str && *str == ' ') {
   2631e:	7823      	ldrb	r3, [r4, #0]
   26320:	2b20      	cmp	r3, #32
   26322:	d0fb      	beq.n	2631c <line2argv+0x24>
		if (!*str) {
   26324:	b1ab      	cbz	r3, 26352 <line2argv+0x5a>
		argv[argc++] = str;
   26326:	1c6b      	adds	r3, r5, #1
   26328:	f846 4025 	str.w	r4, [r6, r5, lsl #2]
		if (argc == size) {
   2632c:	42bb      	cmp	r3, r7
   2632e:	d00a      	beq.n	26346 <line2argv+0x4e>
		argv[argc++] = str;
   26330:	461d      	mov	r5, r3
	while ((str = strchr(str, ' '))) {
   26332:	2120      	movs	r1, #32
   26334:	4620      	mov	r0, r4
   26336:	f003 fbbd 	bl	29ab4 <strchr>
   2633a:	4603      	mov	r3, r0
   2633c:	b148      	cbz	r0, 26352 <line2argv+0x5a>
		*str++ = '\0';
   2633e:	1c5c      	adds	r4, r3, #1
   26340:	2200      	movs	r2, #0
   26342:	701a      	strb	r2, [r3, #0]
		while (*str && *str == ' ') {
   26344:	e7eb      	b.n	2631e <line2argv+0x26>
			printk("Too many parameters (max %zu)\n", size - 1);
   26346:	1e79      	subs	r1, r7, #1
   26348:	4805      	ldr	r0, [pc, #20]	; (26360 <line2argv+0x68>)
   2634a:	f7dc f953 	bl	25f4 <printk>
			return 0;
   2634e:	2500      	movs	r5, #0
   26350:	e7da      	b.n	26308 <line2argv+0x10>
	argv[argc] = NULL;
   26352:	2300      	movs	r3, #0
   26354:	f846 3025 	str.w	r3, [r6, r5, lsl #2]
	return argc;
   26358:	e7d6      	b.n	26308 <line2argv+0x10>
		return 0;
   2635a:	2500      	movs	r5, #0
   2635c:	e7d4      	b.n	26308 <line2argv+0x10>
   2635e:	bf00      	nop
   26360:	0002eae4 	.word	0x0002eae4

00026364 <get_destination_module>:
{
   26364:	b538      	push	{r3, r4, r5, lr}
   26366:	4605      	mov	r5, r0
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26368:	2400      	movs	r4, #0
   2636a:	4a0c      	ldr	r2, [pc, #48]	; (2639c <get_destination_module+0x38>)
   2636c:	4b0c      	ldr	r3, [pc, #48]	; (263a0 <get_destination_module+0x3c>)
   2636e:	1a9b      	subs	r3, r3, r2
   26370:	109b      	asrs	r3, r3, #2
   26372:	4a0c      	ldr	r2, [pc, #48]	; (263a4 <get_destination_module+0x40>)
   26374:	fb02 f303 	mul.w	r3, r2, r3
   26378:	429c      	cmp	r4, r3
   2637a:	da0b      	bge.n	26394 <get_destination_module+0x30>
		if (!strncmp(module_str,
   2637c:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26380:	0093      	lsls	r3, r2, #2
   26382:	2214      	movs	r2, #20
   26384:	4905      	ldr	r1, [pc, #20]	; (2639c <get_destination_module+0x38>)
   26386:	58c9      	ldr	r1, [r1, r3]
   26388:	4628      	mov	r0, r5
   2638a:	f003 fc65 	bl	29c58 <strncmp>
   2638e:	b118      	cbz	r0, 26398 <get_destination_module+0x34>
	for (i = 0; i < NUM_OF_SHELL_ENTITIES; i++) {
   26390:	3401      	adds	r4, #1
   26392:	e7ea      	b.n	2636a <get_destination_module+0x6>
	return -1;
   26394:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
}
   26398:	4620      	mov	r0, r4
   2639a:	bd38      	pop	{r3, r4, r5, pc}
   2639c:	2000cc1c 	.word	0x2000cc1c
   263a0:	2000cc28 	.word	0x2000cc28
   263a4:	aaaaaaab 	.word	0xaaaaaaab

000263a8 <set_default_module>:
{
   263a8:	b538      	push	{r3, r4, r5, lr}
   263aa:	4604      	mov	r4, r0
	if (strlen(name) > MODULE_NAME_MAX_LEN) {
   263ac:	f7da f9a8 	bl	700 <strlen>
   263b0:	2814      	cmp	r0, #20
   263b2:	d813      	bhi.n	263dc <set_default_module+0x34>
	module = get_destination_module(name);
   263b4:	4620      	mov	r0, r4
   263b6:	f7ff ffd5 	bl	26364 <get_destination_module>
	if (module == -1) {
   263ba:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   263be:	d014      	beq.n	263ea <set_default_module+0x42>
	default_module = module;
   263c0:	4b0d      	ldr	r3, [pc, #52]	; (263f8 <set_default_module+0x50>)
   263c2:	6018      	str	r0, [r3, #0]
	strncpy(default_module_prompt, name, MODULE_NAME_MAX_LEN);
   263c4:	4d0d      	ldr	r5, [pc, #52]	; (263fc <set_default_module+0x54>)
   263c6:	2214      	movs	r2, #20
   263c8:	4621      	mov	r1, r4
   263ca:	4628      	mov	r0, r5
   263cc:	f003 fc96 	bl	29cfc <strncpy>
	strcat(default_module_prompt, "> ");
   263d0:	490b      	ldr	r1, [pc, #44]	; (26400 <set_default_module+0x58>)
   263d2:	4628      	mov	r0, r5
   263d4:	f003 fb4e 	bl	29a74 <strcat>
	return 0;
   263d8:	2000      	movs	r0, #0
}
   263da:	bd38      	pop	{r3, r4, r5, pc}
		printk("Module name %s is too long, default is not changed\n",
   263dc:	4621      	mov	r1, r4
   263de:	4809      	ldr	r0, [pc, #36]	; (26404 <set_default_module+0x5c>)
   263e0:	f7dc f908 	bl	25f4 <printk>
		return -EINVAL;
   263e4:	f06f 0015 	mvn.w	r0, #21
   263e8:	bd38      	pop	{r3, r4, r5, pc}
		printk("Illegal module %s, default is not changed\n", name);
   263ea:	4621      	mov	r1, r4
   263ec:	4806      	ldr	r0, [pc, #24]	; (26408 <set_default_module+0x60>)
   263ee:	f7dc f901 	bl	25f4 <printk>
		return -EINVAL;
   263f2:	f06f 0015 	mvn.w	r0, #21
   263f6:	bd38      	pop	{r3, r4, r5, pc}
   263f8:	2000c568 	.word	0x2000c568
   263fc:	200026b8 	.word	0x200026b8
   26400:	0002eb6c 	.word	0x0002eb6c
   26404:	0002eb0c 	.word	0x0002eb0c
   26408:	0002eb40 	.word	0x0002eb40

0002640c <select_module>:
{
   2640c:	b508      	push	{r3, lr}
	if (argc == 1) {
   2640e:	2801      	cmp	r0, #1
   26410:	d003      	beq.n	2641a <select_module+0xe>
	return set_default_module(argv[1]);
   26412:	6848      	ldr	r0, [r1, #4]
   26414:	f7ff ffc8 	bl	263a8 <set_default_module>
}
   26418:	bd08      	pop	{r3, pc}
		default_module = -1;
   2641a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2641e:	4b02      	ldr	r3, [pc, #8]	; (26428 <select_module+0x1c>)
   26420:	601a      	str	r2, [r3, #0]
		return 0;
   26422:	2000      	movs	r0, #0
   26424:	bd08      	pop	{r3, pc}
   26426:	bf00      	nop
   26428:	2000c568 	.word	0x2000c568

0002642c <get_command_and_module>:
{
   2642c:	b538      	push	{r3, r4, r5, lr}
   2642e:	4604      	mov	r4, r0
	*module = -1;
   26430:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26434:	600b      	str	r3, [r1, #0]
	if (!argv[0]) {
   26436:	6800      	ldr	r0, [r0, #0]
   26438:	b140      	cbz	r0, 2644c <get_command_and_module+0x20>
   2643a:	460d      	mov	r5, r1
	if (default_module == -1) {
   2643c:	4b12      	ldr	r3, [pc, #72]	; (26488 <get_command_and_module+0x5c>)
   2643e:	681b      	ldr	r3, [r3, #0]
   26440:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26444:	d007      	beq.n	26456 <get_command_and_module+0x2a>
	*module = default_module;
   26446:	600b      	str	r3, [r1, #0]
	return argv[0];
   26448:	6820      	ldr	r0, [r4, #0]
}
   2644a:	bd38      	pop	{r3, r4, r5, pc}
		printk("Unrecognized command\n");
   2644c:	480f      	ldr	r0, [pc, #60]	; (2648c <get_command_and_module+0x60>)
   2644e:	f7dc f8d1 	bl	25f4 <printk>
		return NULL;
   26452:	2000      	movs	r0, #0
   26454:	bd38      	pop	{r3, r4, r5, pc}
		if (!argv[1] || argv[1][0] == '\0') {
   26456:	6863      	ldr	r3, [r4, #4]
   26458:	b14b      	cbz	r3, 2646e <get_command_and_module+0x42>
   2645a:	781b      	ldrb	r3, [r3, #0]
   2645c:	b13b      	cbz	r3, 2646e <get_command_and_module+0x42>
		*module = get_destination_module(argv[0]);
   2645e:	f7ff ff81 	bl	26364 <get_destination_module>
   26462:	6028      	str	r0, [r5, #0]
		if (*module == -1) {
   26464:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26468:	d007      	beq.n	2647a <get_command_and_module+0x4e>
		return argv[1];
   2646a:	6860      	ldr	r0, [r4, #4]
   2646c:	bd38      	pop	{r3, r4, r5, pc}
			printk("Unrecognized command: %s\n", argv[0]);
   2646e:	4601      	mov	r1, r0
   26470:	4807      	ldr	r0, [pc, #28]	; (26490 <get_command_and_module+0x64>)
   26472:	f7dc f8bf 	bl	25f4 <printk>
			return NULL;
   26476:	2000      	movs	r0, #0
   26478:	bd38      	pop	{r3, r4, r5, pc}
			printk("Illegal module %s\n", argv[0]);
   2647a:	6821      	ldr	r1, [r4, #0]
   2647c:	4805      	ldr	r0, [pc, #20]	; (26494 <get_command_and_module+0x68>)
   2647e:	f7dc f8b9 	bl	25f4 <printk>
			return NULL;
   26482:	2000      	movs	r0, #0
   26484:	bd38      	pop	{r3, r4, r5, pc}
   26486:	bf00      	nop
   26488:	2000c568 	.word	0x2000c568
   2648c:	0002ea9c 	.word	0x0002ea9c
   26490:	0002eab4 	.word	0x0002eab4
   26494:	0002ead0 	.word	0x0002ead0

00026498 <get_cb>:

static shell_cmd_function_t get_cb(int *argc, char *argv[], int *module)
{
   26498:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	const char *first_string = argv[0];
   2649a:	680c      	ldr	r4, [r1, #0]
	const struct shell_module *shell_module;
	const char *command;
	int i;

	if (!first_string || first_string[0] == '\0') {
   2649c:	b15c      	cbz	r4, 264b6 <get_cb+0x1e>
   2649e:	4606      	mov	r6, r0
   264a0:	460d      	mov	r5, r1
   264a2:	4617      	mov	r7, r2
   264a4:	7823      	ldrb	r3, [r4, #0]
   264a6:	b133      	cbz	r3, 264b6 <get_cb+0x1e>
		printk("Illegal parameter\n");
		return NULL;
	}

	if (!strcmp(first_string, "help")) {
   264a8:	4929      	ldr	r1, [pc, #164]	; (26550 <get_cb+0xb8>)
   264aa:	4620      	mov	r0, r4
   264ac:	f7d9 ffac 	bl	408 <strcmp>
   264b0:	b930      	cbnz	r0, 264c0 <get_cb+0x28>
		return show_help;
   264b2:	4828      	ldr	r0, [pc, #160]	; (26554 <get_cb+0xbc>)
   264b4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		printk("Illegal parameter\n");
   264b6:	4828      	ldr	r0, [pc, #160]	; (26558 <get_cb+0xc0>)
   264b8:	f7dc f89c 	bl	25f4 <printk>
		return NULL;
   264bc:	2000      	movs	r0, #0
   264be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "select")) {
   264c0:	4926      	ldr	r1, [pc, #152]	; (2655c <get_cb+0xc4>)
   264c2:	4620      	mov	r0, r4
   264c4:	f7d9 ffa0 	bl	408 <strcmp>
   264c8:	b908      	cbnz	r0, 264ce <get_cb+0x36>
		return select_module;
   264ca:	4825      	ldr	r0, [pc, #148]	; (26560 <get_cb+0xc8>)
   264cc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	}

	if (!strcmp(first_string, "exit")) {
   264ce:	4925      	ldr	r1, [pc, #148]	; (26564 <get_cb+0xcc>)
   264d0:	4620      	mov	r0, r4
   264d2:	f7d9 ff99 	bl	408 <strcmp>
   264d6:	2800      	cmp	r0, #0
   264d8:	d034      	beq.n	26544 <get_cb+0xac>
		return exit_module;
	}

	if ((*argc == 1) && (default_module == -1)) {
   264da:	6833      	ldr	r3, [r6, #0]
   264dc:	2b01      	cmp	r3, #1
   264de:	d01c      	beq.n	2651a <get_cb+0x82>
		printk("Missing parameter\n");
		return NULL;
	}

	command = get_command_and_module(argv, module);
   264e0:	4639      	mov	r1, r7
   264e2:	4628      	mov	r0, r5
   264e4:	f7ff ffa2 	bl	2642c <get_command_and_module>
   264e8:	4606      	mov	r6, r0
	if ((*module == -1) || (command == NULL)) {
   264ea:	683d      	ldr	r5, [r7, #0]
   264ec:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   264f0:	d02a      	beq.n	26548 <get_cb+0xb0>
   264f2:	b358      	cbz	r0, 2654c <get_cb+0xb4>
   264f4:	2400      	movs	r4, #0
		return NULL;
	}

	shell_module = &__shell_cmd_start[*module];
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   264f6:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   264fa:	009a      	lsls	r2, r3, #2
   264fc:	4b1a      	ldr	r3, [pc, #104]	; (26568 <get_cb+0xd0>)
   264fe:	4413      	add	r3, r2
   26500:	6859      	ldr	r1, [r3, #4]
   26502:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26506:	0093      	lsls	r3, r2, #2
   26508:	461f      	mov	r7, r3
   2650a:	58c9      	ldr	r1, [r1, r3]
   2650c:	b1c1      	cbz	r1, 26540 <get_cb+0xa8>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   2650e:	4630      	mov	r0, r6
   26510:	f7d9 ff7a 	bl	408 <strcmp>
   26514:	b158      	cbz	r0, 2652e <get_cb+0x96>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   26516:	3401      	adds	r4, #1
   26518:	e7ed      	b.n	264f6 <get_cb+0x5e>
	if ((*argc == 1) && (default_module == -1)) {
   2651a:	4b14      	ldr	r3, [pc, #80]	; (2656c <get_cb+0xd4>)
   2651c:	681b      	ldr	r3, [r3, #0]
   2651e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26522:	d1dd      	bne.n	264e0 <get_cb+0x48>
		printk("Missing parameter\n");
   26524:	4812      	ldr	r0, [pc, #72]	; (26570 <get_cb+0xd8>)
   26526:	f7dc f865 	bl	25f4 <printk>
		return NULL;
   2652a:	2000      	movs	r0, #0
   2652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
			return shell_module->commands[i].cb;
   2652e:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   26532:	00aa      	lsls	r2, r5, #2
   26534:	4b0c      	ldr	r3, [pc, #48]	; (26568 <get_cb+0xd0>)
   26536:	4413      	add	r3, r2
   26538:	685b      	ldr	r3, [r3, #4]
   2653a:	441f      	add	r7, r3
   2653c:	6878      	ldr	r0, [r7, #4]
   2653e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		}
	}

	return NULL;
   26540:	2000      	movs	r0, #0
   26542:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return exit_module;
   26544:	480b      	ldr	r0, [pc, #44]	; (26574 <get_cb+0xdc>)
   26546:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		return NULL;
   26548:	2000      	movs	r0, #0
   2654a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   2654c:	2000      	movs	r0, #0
}
   2654e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   26550:	0002ea70 	.word	0x0002ea70
   26554:	00026619 	.word	0x00026619
   26558:	0002ea5c 	.word	0x0002ea5c
   2655c:	0002ea78 	.word	0x0002ea78
   26560:	0002640d 	.word	0x0002640d
   26564:	0002ea80 	.word	0x0002ea80
   26568:	2000cc1c 	.word	0x2000cc1c
   2656c:	2000c568 	.word	0x2000c568
   26570:	0002ea88 	.word	0x0002ea88
   26574:	000262a5 	.word	0x000262a5

00026578 <show_cmd_help>:
{
   26578:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   2657c:	b083      	sub	sp, #12
   2657e:	4607      	mov	r7, r0
	int module = -1;
   26580:	a902      	add	r1, sp, #8
   26582:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   26586:	f841 3d04 	str.w	r3, [r1, #-4]!
	command = get_command_and_module(argv, &module);
   2658a:	f7ff ff4f 	bl	2642c <get_command_and_module>
	if ((module == -1) || (command == NULL)) {
   2658e:	9d01      	ldr	r5, [sp, #4]
   26590:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   26594:	d031      	beq.n	265fa <show_cmd_help+0x82>
   26596:	4606      	mov	r6, r0
   26598:	b390      	cbz	r0, 26600 <show_cmd_help+0x88>
   2659a:	2400      	movs	r4, #0
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   2659c:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   265a0:	009a      	lsls	r2, r3, #2
   265a2:	4b19      	ldr	r3, [pc, #100]	; (26608 <show_cmd_help+0x90>)
   265a4:	4413      	add	r3, r2
   265a6:	6859      	ldr	r1, [r3, #4]
   265a8:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   265ac:	0093      	lsls	r3, r2, #2
   265ae:	4698      	mov	r8, r3
   265b0:	58c9      	ldr	r1, [r1, r3]
   265b2:	b1c1      	cbz	r1, 265e6 <show_cmd_help+0x6e>
		if (!strcmp(command, shell_module->commands[i].cmd_name)) {
   265b4:	4630      	mov	r0, r6
   265b6:	f7d9 ff27 	bl	408 <strcmp>
   265ba:	4681      	mov	r9, r0
   265bc:	b108      	cbz	r0, 265c2 <show_cmd_help+0x4a>
	for (i = 0; shell_module->commands[i].cmd_name; i++) {
   265be:	3401      	adds	r4, #1
   265c0:	e7ec      	b.n	2659c <show_cmd_help+0x24>
			       shell_module->commands[i].cmd_name,
   265c2:	eb05 0545 	add.w	r5, r5, r5, lsl #1
   265c6:	00aa      	lsls	r2, r5, #2
   265c8:	4b0f      	ldr	r3, [pc, #60]	; (26608 <show_cmd_help+0x90>)
   265ca:	4413      	add	r3, r2
   265cc:	685b      	ldr	r3, [r3, #4]
   265ce:	eb03 0208 	add.w	r2, r3, r8
			printk("%s %s\n",
   265d2:	f853 1008 	ldr.w	r1, [r3, r8]
			       shell_module->commands[i].help ?
   265d6:	6892      	ldr	r2, [r2, #8]
			printk("%s %s\n",
   265d8:	b11a      	cbz	r2, 265e2 <show_cmd_help+0x6a>
   265da:	480c      	ldr	r0, [pc, #48]	; (2660c <show_cmd_help+0x94>)
   265dc:	f7dc f80a 	bl	25f4 <printk>
			return 0;
   265e0:	e007      	b.n	265f2 <show_cmd_help+0x7a>
			printk("%s %s\n",
   265e2:	4a0b      	ldr	r2, [pc, #44]	; (26610 <show_cmd_help+0x98>)
   265e4:	e7f9      	b.n	265da <show_cmd_help+0x62>
	printk("Unrecognized command: %s\n", argv[0]);
   265e6:	6839      	ldr	r1, [r7, #0]
   265e8:	480a      	ldr	r0, [pc, #40]	; (26614 <show_cmd_help+0x9c>)
   265ea:	f7dc f803 	bl	25f4 <printk>
	return -EINVAL;
   265ee:	f06f 0915 	mvn.w	r9, #21
}
   265f2:	4648      	mov	r0, r9
   265f4:	b003      	add	sp, #12
   265f6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
		return 0;
   265fa:	f04f 0900 	mov.w	r9, #0
   265fe:	e7f8      	b.n	265f2 <show_cmd_help+0x7a>
   26600:	f04f 0900 	mov.w	r9, #0
   26604:	e7f5      	b.n	265f2 <show_cmd_help+0x7a>
   26606:	bf00      	nop
   26608:	2000cc1c 	.word	0x2000cc1c
   2660c:	0002eb9c 	.word	0x0002eb9c
   26610:	0002afec 	.word	0x0002afec
   26614:	0002eab4 	.word	0x0002eab4

00026618 <show_help>:
{
   26618:	b510      	push	{r4, lr}
   2661a:	460c      	mov	r4, r1
	if ((argc > 2) || ((default_module != -1) && (argc == 2))) {
   2661c:	2802      	cmp	r0, #2
   2661e:	dc12      	bgt.n	26646 <show_help+0x2e>
   26620:	4b23      	ldr	r3, [pc, #140]	; (266b0 <show_help+0x98>)
   26622:	681b      	ldr	r3, [r3, #0]
   26624:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26628:	d001      	beq.n	2662e <show_help+0x16>
   2662a:	2802      	cmp	r0, #2
   2662c:	d00b      	beq.n	26646 <show_help+0x2e>
	if ((argc == 2) || ((default_module != -1) && (argc == 1))) {
   2662e:	2802      	cmp	r0, #2
   26630:	d00d      	beq.n	2664e <show_help+0x36>
   26632:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26636:	d001      	beq.n	2663c <show_help+0x24>
   26638:	2801      	cmp	r0, #1
   2663a:	d008      	beq.n	2664e <show_help+0x36>
		printk("Available modules:\n");
   2663c:	481d      	ldr	r0, [pc, #116]	; (266b4 <show_help+0x9c>)
   2663e:	f7db ffd9 	bl	25f4 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26642:	2400      	movs	r4, #0
   26644:	e025      	b.n	26692 <show_help+0x7a>
		return show_cmd_help(&argv[1]);
   26646:	1d20      	adds	r0, r4, #4
   26648:	f7ff ff96 	bl	26578 <show_cmd_help>
   2664c:	bd10      	pop	{r4, pc}
		if (default_module == -1) {
   2664e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26652:	d007      	beq.n	26664 <show_help+0x4c>
		print_module_commands(module);
   26654:	4618      	mov	r0, r3
   26656:	f7ff fe31 	bl	262bc <print_module_commands>
		printk("\nEnter 'exit' to leave current module.\n");
   2665a:	4817      	ldr	r0, [pc, #92]	; (266b8 <show_help+0xa0>)
   2665c:	f7db ffca 	bl	25f4 <printk>
	return 0;
   26660:	2000      	movs	r0, #0
		printk("\nEnter 'exit' to leave current module.\n");
   26662:	bd10      	pop	{r4, pc}
			module = get_destination_module(argv[1]);
   26664:	6860      	ldr	r0, [r4, #4]
   26666:	f7ff fe7d 	bl	26364 <get_destination_module>
   2666a:	4603      	mov	r3, r0
			if (module == -1) {
   2666c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26670:	d1f0      	bne.n	26654 <show_help+0x3c>
				printk("Illegal module %s\n", argv[1]);
   26672:	6861      	ldr	r1, [r4, #4]
   26674:	4811      	ldr	r0, [pc, #68]	; (266bc <show_help+0xa4>)
   26676:	f7db ffbd 	bl	25f4 <printk>
				return -EINVAL;
   2667a:	f06f 0015 	mvn.w	r0, #21
   2667e:	bd10      	pop	{r4, pc}
			printk("%s\n", __shell_cmd_start[module].module_name);
   26680:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   26684:	0093      	lsls	r3, r2, #2
   26686:	4a0e      	ldr	r2, [pc, #56]	; (266c0 <show_help+0xa8>)
   26688:	58d1      	ldr	r1, [r2, r3]
   2668a:	480e      	ldr	r0, [pc, #56]	; (266c4 <show_help+0xac>)
   2668c:	f7db ffb2 	bl	25f4 <printk>
		for (module = 0; module < NUM_OF_SHELL_ENTITIES; module++) {
   26690:	3401      	adds	r4, #1
   26692:	4a0b      	ldr	r2, [pc, #44]	; (266c0 <show_help+0xa8>)
   26694:	4b0c      	ldr	r3, [pc, #48]	; (266c8 <show_help+0xb0>)
   26696:	1a9b      	subs	r3, r3, r2
   26698:	109b      	asrs	r3, r3, #2
   2669a:	4a0c      	ldr	r2, [pc, #48]	; (266cc <show_help+0xb4>)
   2669c:	fb02 f303 	mul.w	r3, r2, r3
   266a0:	429c      	cmp	r4, r3
   266a2:	dbed      	blt.n	26680 <show_help+0x68>
		printk("\nTo select a module, enter 'select <module name>'.\n");
   266a4:	480a      	ldr	r0, [pc, #40]	; (266d0 <show_help+0xb8>)
   266a6:	f7db ffa5 	bl	25f4 <printk>
	return 0;
   266aa:	2000      	movs	r0, #0
}
   266ac:	bd10      	pop	{r4, pc}
   266ae:	bf00      	nop
   266b0:	2000c568 	.word	0x2000c568
   266b4:	0002ebcc 	.word	0x0002ebcc
   266b8:	0002eba4 	.word	0x0002eba4
   266bc:	0002ead0 	.word	0x0002ead0
   266c0:	2000cc1c 	.word	0x2000cc1c
   266c4:	0002dd20 	.word	0x0002dd20
   266c8:	2000cc28 	.word	0x2000cc28
   266cc:	aaaaaaab 	.word	0xaaaaaaab
   266d0:	0002ebe0 	.word	0x0002ebe0

000266d4 <get_command_to_complete>:
		k_fifo_put(&avail_queue, cmd);
	}
}

static int get_command_to_complete(char *str, char **command_prefix)
{
   266d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   266d8:	b086      	sub	sp, #24
   266da:	4604      	mov	r4, r0
   266dc:	4688      	mov	r8, r1
	char dest_str[MODULE_NAME_MAX_LEN];
	int dest = -1;
	char *start;

	/* remove ' ' at the beginning of the line */
	while (*str && *str == ' ') {
   266de:	e000      	b.n	266e2 <get_command_to_complete+0xe>
		str++;
   266e0:	3401      	adds	r4, #1
	while (*str && *str == ' ') {
   266e2:	7823      	ldrb	r3, [r4, #0]
   266e4:	2b20      	cmp	r3, #32
   266e6:	d0fb      	beq.n	266e0 <get_command_to_complete+0xc>
	}

	if (!*str) {
   266e8:	b3a3      	cbz	r3, 26754 <get_command_to_complete+0x80>
		return -1;
	}

	start = str;

	if (default_module != -1) {
   266ea:	4b1f      	ldr	r3, [pc, #124]	; (26768 <get_command_to_complete+0x94>)
   266ec:	681d      	ldr	r5, [r3, #0]
   266ee:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   266f2:	d001      	beq.n	266f8 <get_command_to_complete+0x24>
		dest = default_module;
		/* caller function already checks str len and put '\0' */
		*command_prefix = str;
   266f4:	f8c8 4000 	str.w	r4, [r8]

	/*
	 * In case of a default module: only one parameter is possible.
	 * Otherwise, only two parameters are possibles.
	 */
	str = strchr(str, ' ');
   266f8:	2120      	movs	r1, #32
   266fa:	4620      	mov	r0, r4
   266fc:	f003 f9da 	bl	29ab4 <strchr>
   26700:	4606      	mov	r6, r0
	if (default_module != -1) {
   26702:	4b19      	ldr	r3, [pc, #100]	; (26768 <get_command_to_complete+0x94>)
   26704:	681f      	ldr	r7, [r3, #0]
   26706:	f1b7 3fff 	cmp.w	r7, #4294967295	; 0xffffffff
   2670a:	d004      	beq.n	26716 <get_command_to_complete+0x42>
		return (str == NULL) ? dest : -1;
   2670c:	bb28      	cbnz	r0, 2675a <get_command_to_complete+0x86>
	*command_prefix = str;
	str = strchr(str, ' ');

	/* only two parameters are possibles in case of no default module */
	return (str == NULL) ? dest : -1;
}
   2670e:	4628      	mov	r0, r5
   26710:	b006      	add	sp, #24
   26712:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	if (str == NULL) {
   26716:	b318      	cbz	r0, 26760 <get_command_to_complete+0x8c>
	if ((str - start + 1) >= MODULE_NAME_MAX_LEN) {
   26718:	1b05      	subs	r5, r0, r4
   2671a:	1c6a      	adds	r2, r5, #1
   2671c:	2a13      	cmp	r2, #19
   2671e:	dc21      	bgt.n	26764 <get_command_to_complete+0x90>
	strncpy(dest_str, start, (str - start + 1));
   26720:	4621      	mov	r1, r4
   26722:	a801      	add	r0, sp, #4
   26724:	f003 faea 	bl	29cfc <strncpy>
	dest_str[str - start] = '\0';
   26728:	ab06      	add	r3, sp, #24
   2672a:	441d      	add	r5, r3
   2672c:	2300      	movs	r3, #0
   2672e:	f805 3c14 	strb.w	r3, [r5, #-20]
	dest = get_destination_module(dest_str);
   26732:	a801      	add	r0, sp, #4
   26734:	f7ff fe16 	bl	26364 <get_destination_module>
   26738:	4605      	mov	r5, r0
	if (dest == -1) {
   2673a:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   2673e:	d0e6      	beq.n	2670e <get_command_to_complete+0x3a>
	str++;
   26740:	1c70      	adds	r0, r6, #1
	*command_prefix = str;
   26742:	f8c8 0000 	str.w	r0, [r8]
	str = strchr(str, ' ');
   26746:	2120      	movs	r1, #32
   26748:	f003 f9b4 	bl	29ab4 <strchr>
	return (str == NULL) ? dest : -1;
   2674c:	2800      	cmp	r0, #0
   2674e:	d0de      	beq.n	2670e <get_command_to_complete+0x3a>
   26750:	463d      	mov	r5, r7
   26752:	e7dc      	b.n	2670e <get_command_to_complete+0x3a>
		return -1;
   26754:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   26758:	e7d9      	b.n	2670e <get_command_to_complete+0x3a>
		return (str == NULL) ? dest : -1;
   2675a:	f04f 35ff 	mov.w	r5, #4294967295	; 0xffffffff
   2675e:	e7d6      	b.n	2670e <get_command_to_complete+0x3a>
		return -1;
   26760:	463d      	mov	r5, r7
   26762:	e7d4      	b.n	2670e <get_command_to_complete+0x3a>
		return -1;
   26764:	463d      	mov	r5, r7
   26766:	e7d2      	b.n	2670e <get_command_to_complete+0x3a>
   26768:	2000c568 	.word	0x2000c568

0002676c <completion>:

static u8_t completion(char *line, u8_t len)
{
   2676c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   26770:	b087      	sub	sp, #28
   26772:	9002      	str	r0, [sp, #8]
	int common_chars = -1, space = 0;
	int i, dest, command_len;
	const struct shell_module *module;
	char *command_prefix;

	if (len >= (MODULE_NAME_MAX_LEN + COMMAND_MAX_LEN - 1)) {
   26774:	2944      	cmp	r1, #68	; 0x44
   26776:	d903      	bls.n	26780 <completion+0x14>
		return 0;
   26778:	2000      	movs	r0, #0
		printk(" ");
		line[len] = ' ';
	}

	return common_chars - command_len + space;
}
   2677a:	b007      	add	sp, #28
   2677c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   26780:	4689      	mov	r9, r1
	line[len] = '\0';
   26782:	2300      	movs	r3, #0
   26784:	5443      	strb	r3, [r0, r1]
	dest = get_command_to_complete(line, &command_prefix);
   26786:	a905      	add	r1, sp, #20
   26788:	f7ff ffa4 	bl	266d4 <get_command_to_complete>
   2678c:	4605      	mov	r5, r0
	if (dest == -1) {
   2678e:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   26792:	f000 808f 	beq.w	268b4 <completion+0x148>
	command_len = strlen(command_prefix);
   26796:	9805      	ldr	r0, [sp, #20]
   26798:	f7d9 ffb2 	bl	700 <strlen>
   2679c:	9001      	str	r0, [sp, #4]
	for (i = 0; module->commands[i].cmd_name; i++) {
   2679e:	f04f 0b00 	mov.w	fp, #0
	int common_chars = -1, space = 0;
   267a2:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
	const char *first_match = NULL;
   267a6:	465f      	mov	r7, fp
   267a8:	9003      	str	r0, [sp, #12]
	for (i = 0; module->commands[i].cmd_name; i++) {
   267aa:	e01f      	b.n	267ec <completion+0x80>
			first_match = module->commands[i].cmd_name;
   267ac:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   267b0:	009a      	lsls	r2, r3, #2
   267b2:	4b42      	ldr	r3, [pc, #264]	; (268bc <completion+0x150>)
   267b4:	4413      	add	r3, r2
   267b6:	685b      	ldr	r3, [r3, #4]
   267b8:	f853 700a 	ldr.w	r7, [r3, sl]
			continue;
   267bc:	e014      	b.n	267e8 <completion+0x7c>
			printk("\n%s\n", first_match);
   267be:	4639      	mov	r1, r7
   267c0:	483f      	ldr	r0, [pc, #252]	; (268c0 <completion+0x154>)
   267c2:	f7db ff17 	bl	25f4 <printk>
			common_chars = strlen(first_match);
   267c6:	4638      	mov	r0, r7
   267c8:	f7d9 ff9a 	bl	700 <strlen>
   267cc:	4606      	mov	r6, r0
		for (j = 0; j < common_chars; j++) {
   267ce:	e026      	b.n	2681e <completion+0xb2>
		printk("%s\n", module->commands[i].cmd_name);
   267d0:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   267d4:	009a      	lsls	r2, r3, #2
   267d6:	4b39      	ldr	r3, [pc, #228]	; (268bc <completion+0x150>)
   267d8:	4413      	add	r3, r2
   267da:	685b      	ldr	r3, [r3, #4]
   267dc:	f853 100a 	ldr.w	r1, [r3, sl]
   267e0:	4838      	ldr	r0, [pc, #224]	; (268c4 <completion+0x158>)
   267e2:	f7db ff07 	bl	25f4 <printk>
		common_chars = j;
   267e6:	4626      	mov	r6, r4
	for (i = 0; module->commands[i].cmd_name; i++) {
   267e8:	f10b 0b01 	add.w	fp, fp, #1
   267ec:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   267f0:	009a      	lsls	r2, r3, #2
   267f2:	4b32      	ldr	r3, [pc, #200]	; (268bc <completion+0x150>)
   267f4:	4413      	add	r3, r2
   267f6:	685a      	ldr	r2, [r3, #4]
   267f8:	eb0b 034b 	add.w	r3, fp, fp, lsl #1
   267fc:	ea4f 0a83 	mov.w	sl, r3, lsl #2
   26800:	46d0      	mov	r8, sl
   26802:	f852 100a 	ldr.w	r1, [r2, sl]
   26806:	b1d1      	cbz	r1, 2683e <completion+0xd2>
		if (strncmp(command_prefix,
   26808:	9a01      	ldr	r2, [sp, #4]
   2680a:	9805      	ldr	r0, [sp, #20]
   2680c:	f003 fa24 	bl	29c58 <strncmp>
   26810:	4604      	mov	r4, r0
   26812:	2800      	cmp	r0, #0
   26814:	d1e8      	bne.n	267e8 <completion+0x7c>
		if (!first_match) {
   26816:	2f00      	cmp	r7, #0
   26818:	d0c8      	beq.n	267ac <completion+0x40>
		if (first_match && (common_chars < 0)) {
   2681a:	2e00      	cmp	r6, #0
   2681c:	dbcf      	blt.n	267be <completion+0x52>
		for (j = 0; j < common_chars; j++) {
   2681e:	42a6      	cmp	r6, r4
   26820:	ddd6      	ble.n	267d0 <completion+0x64>
			if (first_match[j] != module->commands[i].cmd_name[j]) {
   26822:	5d39      	ldrb	r1, [r7, r4]
   26824:	eb05 0345 	add.w	r3, r5, r5, lsl #1
   26828:	009a      	lsls	r2, r3, #2
   2682a:	4b24      	ldr	r3, [pc, #144]	; (268bc <completion+0x150>)
   2682c:	4413      	add	r3, r2
   2682e:	685b      	ldr	r3, [r3, #4]
   26830:	f853 3008 	ldr.w	r3, [r3, r8]
   26834:	5d1b      	ldrb	r3, [r3, r4]
   26836:	4299      	cmp	r1, r3
   26838:	d1ca      	bne.n	267d0 <completion+0x64>
		for (j = 0; j < common_chars; j++) {
   2683a:	3401      	adds	r4, #1
   2683c:	e7ef      	b.n	2681e <completion+0xb2>
   2683e:	f8dd a00c 	ldr.w	sl, [sp, #12]
	if (!first_match) {
   26842:	2f00      	cmp	r7, #0
   26844:	d038      	beq.n	268b8 <completion+0x14c>
	if (common_chars >= 0) {
   26846:	2e00      	cmp	r6, #0
   26848:	db0d      	blt.n	26866 <completion+0xfa>
		printk("%s", get_prompt());
   2684a:	f7ff fd01 	bl	26250 <get_prompt>
   2684e:	4c1e      	ldr	r4, [pc, #120]	; (268c8 <completion+0x15c>)
   26850:	4601      	mov	r1, r0
   26852:	4620      	mov	r0, r4
   26854:	f7db fece 	bl	25f4 <printk>
		printk("%s", line);
   26858:	9d02      	ldr	r5, [sp, #8]
   2685a:	4629      	mov	r1, r5
   2685c:	4620      	mov	r0, r4
   2685e:	f7db fec9 	bl	25f4 <printk>
	int common_chars = -1, space = 0;
   26862:	2400      	movs	r4, #0
   26864:	e015      	b.n	26892 <completion+0x126>
		common_chars = strlen(first_match);
   26866:	4638      	mov	r0, r7
   26868:	f7d9 ff4a 	bl	700 <strlen>
   2686c:	4606      	mov	r6, r0
		space = 1;
   2686e:	2401      	movs	r4, #1
   26870:	9d02      	ldr	r5, [sp, #8]
	for (i = command_len; i < common_chars; i++) {
   26872:	e00e      	b.n	26892 <completion+0x126>
		printk("%c", first_match[i]);
   26874:	f817 100a 	ldrb.w	r1, [r7, sl]
   26878:	4814      	ldr	r0, [pc, #80]	; (268cc <completion+0x160>)
   2687a:	f7db febb 	bl	25f4 <printk>
		line[len++] = first_match[i];
   2687e:	f109 0301 	add.w	r3, r9, #1
   26882:	f817 200a 	ldrb.w	r2, [r7, sl]
   26886:	f805 2009 	strb.w	r2, [r5, r9]
	for (i = command_len; i < common_chars; i++) {
   2688a:	f10a 0a01 	add.w	sl, sl, #1
		line[len++] = first_match[i];
   2688e:	fa5f f983 	uxtb.w	r9, r3
	for (i = command_len; i < common_chars; i++) {
   26892:	4556      	cmp	r6, sl
   26894:	dcee      	bgt.n	26874 <completion+0x108>
	if (space) {
   26896:	b92c      	cbnz	r4, 268a4 <completion+0x138>
	return common_chars - command_len + space;
   26898:	9b01      	ldr	r3, [sp, #4]
   2689a:	1af0      	subs	r0, r6, r3
   2689c:	fa54 f080 	uxtab	r0, r4, r0
   268a0:	b2c0      	uxtb	r0, r0
   268a2:	e76a      	b.n	2677a <completion+0xe>
		printk(" ");
   268a4:	480a      	ldr	r0, [pc, #40]	; (268d0 <completion+0x164>)
   268a6:	f7db fea5 	bl	25f4 <printk>
		line[len] = ' ';
   268aa:	2320      	movs	r3, #32
   268ac:	9a02      	ldr	r2, [sp, #8]
   268ae:	f802 3009 	strb.w	r3, [r2, r9]
   268b2:	e7f1      	b.n	26898 <completion+0x12c>
		return 0;
   268b4:	2000      	movs	r0, #0
   268b6:	e760      	b.n	2677a <completion+0xe>
		return 0;
   268b8:	2000      	movs	r0, #0
   268ba:	e75e      	b.n	2677a <completion+0xe>
   268bc:	2000cc1c 	.word	0x2000cc1c
   268c0:	0002ea50 	.word	0x0002ea50
   268c4:	0002dd20 	.word	0x0002dd20
   268c8:	0002a6f4 	.word	0x0002a6f4
   268cc:	0002ea58 	.word	0x0002ea58
   268d0:	0002f0a4 	.word	0x0002f0a4

000268d4 <line_queue_init>:
{
   268d4:	b510      	push	{r4, lr}
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   268d6:	2400      	movs	r4, #0
   268d8:	e008      	b.n	268ec <line_queue_init+0x18>
		k_fifo_put(&avail_queue, &buf[i]);
   268da:	eb04 1244 	add.w	r2, r4, r4, lsl #5
   268de:	0093      	lsls	r3, r2, #2
   268e0:	4904      	ldr	r1, [pc, #16]	; (268f4 <line_queue_init+0x20>)
   268e2:	4419      	add	r1, r3
   268e4:	4804      	ldr	r0, [pc, #16]	; (268f8 <line_queue_init+0x24>)
   268e6:	f001 fced 	bl	282c4 <k_queue_append>
	for (i = 0; i < MAX_CMD_QUEUED; i++) {
   268ea:	3401      	adds	r4, #1
   268ec:	2c02      	cmp	r4, #2
   268ee:	ddf4      	ble.n	268da <line_queue_init+0x6>
}
   268f0:	bd10      	pop	{r4, pc}
   268f2:	bf00      	nop
   268f4:	2000251c 	.word	0x2000251c
   268f8:	2000250c 	.word	0x2000250c

000268fc <shell_exec>:
{
   268fc:	b510      	push	{r4, lr}
   268fe:	b08e      	sub	sp, #56	; 0x38
	int module = default_module;
   26900:	4b1e      	ldr	r3, [pc, #120]	; (2697c <shell_exec+0x80>)
   26902:	681b      	ldr	r3, [r3, #0]
   26904:	9301      	str	r3, [sp, #4]
	argc = line2argv(line, argv, ARRAY_SIZE(argv));
   26906:	220b      	movs	r2, #11
   26908:	a903      	add	r1, sp, #12
   2690a:	f7ff fcf5 	bl	262f8 <line2argv>
   2690e:	9002      	str	r0, [sp, #8]
	if (!argc) {
   26910:	2800      	cmp	r0, #0
   26912:	d02f      	beq.n	26974 <shell_exec+0x78>
	cb = get_cb(&argc, argv, &module);
   26914:	aa01      	add	r2, sp, #4
   26916:	a903      	add	r1, sp, #12
   26918:	a802      	add	r0, sp, #8
   2691a:	f7ff fdbd 	bl	26498 <get_cb>
	if (!cb) {
   2691e:	4602      	mov	r2, r0
   26920:	b168      	cbz	r0, 2693e <shell_exec+0x42>
	if (module != -1 && module != default_module) {
   26922:	9b01      	ldr	r3, [sp, #4]
   26924:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   26928:	d017      	beq.n	2695a <shell_exec+0x5e>
   2692a:	4914      	ldr	r1, [pc, #80]	; (2697c <shell_exec+0x80>)
   2692c:	6809      	ldr	r1, [r1, #0]
   2692e:	428b      	cmp	r3, r1
   26930:	d013      	beq.n	2695a <shell_exec+0x5e>
		err = cb(argc - 1, &argv[1]);
   26932:	a904      	add	r1, sp, #16
   26934:	9802      	ldr	r0, [sp, #8]
   26936:	3801      	subs	r0, #1
   26938:	4790      	blx	r2
   2693a:	4604      	mov	r4, r0
   2693c:	e011      	b.n	26962 <shell_exec+0x66>
		if (app_cmd_handler != NULL) {
   2693e:	4b10      	ldr	r3, [pc, #64]	; (26980 <shell_exec+0x84>)
   26940:	681a      	ldr	r2, [r3, #0]
   26942:	2a00      	cmp	r2, #0
   26944:	d1ed      	bne.n	26922 <shell_exec+0x26>
	printk("Unrecognized command: %s\n", argv);
   26946:	9903      	ldr	r1, [sp, #12]
   26948:	480e      	ldr	r0, [pc, #56]	; (26984 <shell_exec+0x88>)
   2694a:	f7db fe53 	bl	25f4 <printk>
	printk("Type 'help' for list of available commands\n");
   2694e:	480e      	ldr	r0, [pc, #56]	; (26988 <shell_exec+0x8c>)
   26950:	f7db fe50 	bl	25f4 <printk>
			return -EINVAL;
   26954:	f06f 0415 	mvn.w	r4, #21
   26958:	e005      	b.n	26966 <shell_exec+0x6a>
		err = cb(argc, argv);
   2695a:	a903      	add	r1, sp, #12
   2695c:	9802      	ldr	r0, [sp, #8]
   2695e:	4790      	blx	r2
   26960:	4604      	mov	r4, r0
	if (err < 0) {
   26962:	2c00      	cmp	r4, #0
   26964:	db02      	blt.n	2696c <shell_exec+0x70>
}
   26966:	4620      	mov	r0, r4
   26968:	b00e      	add	sp, #56	; 0x38
   2696a:	bd10      	pop	{r4, pc}
		show_cmd_help(argv);
   2696c:	a803      	add	r0, sp, #12
   2696e:	f7ff fe03 	bl	26578 <show_cmd_help>
   26972:	e7f8      	b.n	26966 <shell_exec+0x6a>
		return -EINVAL;
   26974:	f06f 0415 	mvn.w	r4, #21
   26978:	e7f5      	b.n	26966 <shell_exec+0x6a>
   2697a:	bf00      	nop
   2697c:	2000c568 	.word	0x2000c568
   26980:	20002504 	.word	0x20002504
   26984:	0002eab4 	.word	0x0002eab4
   26988:	0002eb70 	.word	0x0002eb70

0002698c <shell>:
{
   2698c:	b510      	push	{r4, lr}
		printk("%s", get_prompt());
   2698e:	f7ff fc5f 	bl	26250 <get_prompt>
   26992:	4601      	mov	r1, r0
   26994:	4808      	ldr	r0, [pc, #32]	; (269b8 <shell+0x2c>)
   26996:	f7db fe2d 	bl	25f4 <printk>
		cmd = k_fifo_get(&cmds_queue, K_FOREVER);
   2699a:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2699e:	4807      	ldr	r0, [pc, #28]	; (269bc <shell+0x30>)
   269a0:	f001 fcb8 	bl	28314 <k_queue_get>
   269a4:	4604      	mov	r4, r0
		shell_exec(cmd->line);
   269a6:	3004      	adds	r0, #4
   269a8:	f7ff ffa8 	bl	268fc <shell_exec>
		k_fifo_put(&avail_queue, cmd);
   269ac:	4621      	mov	r1, r4
   269ae:	4804      	ldr	r0, [pc, #16]	; (269c0 <shell+0x34>)
   269b0:	f001 fc88 	bl	282c4 <k_queue_append>
   269b4:	e7eb      	b.n	2698e <shell+0x2>
   269b6:	bf00      	nop
   269b8:	0002a6f4 	.word	0x0002a6f4
   269bc:	200026a8 	.word	0x200026a8
   269c0:	2000250c 	.word	0x2000250c

000269c4 <shell_init>:


void shell_init(const char *str)
{
   269c4:	b510      	push	{r4, lr}
   269c6:	b086      	sub	sp, #24
   269c8:	4604      	mov	r4, r0
	k_fifo_init(&cmds_queue);
   269ca:	4812      	ldr	r0, [pc, #72]	; (26a14 <shell_init+0x50>)
   269cc:	f001 fc47 	bl	2825e <k_queue_init>
	k_fifo_init(&avail_queue);
   269d0:	4811      	ldr	r0, [pc, #68]	; (26a18 <shell_init+0x54>)
   269d2:	f001 fc44 	bl	2825e <k_queue_init>

	line_queue_init();
   269d6:	f7ff ff7d 	bl	268d4 <line_queue_init>

	prompt = str ? str : "";
   269da:	b1c4      	cbz	r4, 26a0e <shell_init+0x4a>
   269dc:	4b0f      	ldr	r3, [pc, #60]	; (26a1c <shell_init+0x58>)
   269de:	601c      	str	r4, [r3, #0]
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   269e0:	2300      	movs	r3, #0
   269e2:	9305      	str	r3, [sp, #20]
   269e4:	9304      	str	r3, [sp, #16]
   269e6:	f06f 0208 	mvn.w	r2, #8
   269ea:	9203      	str	r2, [sp, #12]
   269ec:	9302      	str	r3, [sp, #8]
   269ee:	9301      	str	r3, [sp, #4]
   269f0:	9300      	str	r3, [sp, #0]
   269f2:	4b0b      	ldr	r3, [pc, #44]	; (26a20 <shell_init+0x5c>)
   269f4:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
   269f8:	490a      	ldr	r1, [pc, #40]	; (26a24 <shell_init+0x60>)
   269fa:	480b      	ldr	r0, [pc, #44]	; (26a28 <shell_init+0x64>)
   269fc:	f002 fa78 	bl	28ef0 <_impl_k_thread_create>
	k_thread_create(&shell_thread, stack, STACKSIZE, shell, NULL, NULL,
			NULL, K_PRIO_COOP(7), 0, K_NO_WAIT);

	/* Register serial console handler */
#ifdef CONFIG_UART_CONSOLE
	uart_register_input(&avail_queue, &cmds_queue, completion);
   26a00:	4a0a      	ldr	r2, [pc, #40]	; (26a2c <shell_init+0x68>)
   26a02:	4904      	ldr	r1, [pc, #16]	; (26a14 <shell_init+0x50>)
   26a04:	4804      	ldr	r0, [pc, #16]	; (26a18 <shell_init+0x54>)
   26a06:	f7da fe35 	bl	1674 <uart_register_input>
#endif
#ifdef CONFIG_TELNET_CONSOLE
	telnet_register_input(&avail_queue, &cmds_queue, completion);
#endif
}
   26a0a:	b006      	add	sp, #24
   26a0c:	bd10      	pop	{r4, pc}
	prompt = str ? str : "";
   26a0e:	4c08      	ldr	r4, [pc, #32]	; (26a30 <shell_init+0x6c>)
   26a10:	e7e4      	b.n	269dc <shell_init+0x18>
   26a12:	bf00      	nop
   26a14:	200026a8 	.word	0x200026a8
   26a18:	2000250c 	.word	0x2000250c
   26a1c:	200026d0 	.word	0x200026d0
   26a20:	0002698d 	.word	0x0002698d
   26a24:	20009b90 	.word	0x20009b90
   26a28:	200026d4 	.word	0x200026d4
   26a2c:	0002676d 	.word	0x0002676d
   26a30:	0002afec 	.word	0x0002afec

00026a34 <ftpan_32>:
#define __SYSTEM_CLOCK_64M (64000000UL)

#ifdef CONFIG_SOC_NRF52832
static bool ftpan_32(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26a34:	4b0e      	ldr	r3, [pc, #56]	; (26a70 <ftpan_32+0x3c>)
   26a36:	781b      	ldrb	r3, [r3, #0]
   26a38:	2b06      	cmp	r3, #6
   26a3a:	d001      	beq.n	26a40 <ftpan_32+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26a3c:	2000      	movs	r0, #0
   26a3e:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26a40:	4b0c      	ldr	r3, [pc, #48]	; (26a74 <ftpan_32+0x40>)
   26a42:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26a44:	f013 0f0f 	tst.w	r3, #15
   26a48:	d10e      	bne.n	26a68 <ftpan_32+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26a4a:	4b0b      	ldr	r3, [pc, #44]	; (26a78 <ftpan_32+0x44>)
   26a4c:	681b      	ldr	r3, [r3, #0]
   26a4e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26a52:	2b30      	cmp	r3, #48	; 0x30
   26a54:	d001      	beq.n	26a5a <ftpan_32+0x26>
	return false;
   26a56:	2000      	movs	r0, #0
   26a58:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26a5a:	4b08      	ldr	r3, [pc, #32]	; (26a7c <ftpan_32+0x48>)
   26a5c:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26a5e:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   26a62:	d003      	beq.n	26a6c <ftpan_32+0x38>
	return false;
   26a64:	2000      	movs	r0, #0
   26a66:	4770      	bx	lr
   26a68:	2000      	movs	r0, #0
   26a6a:	4770      	bx	lr
			return true;
   26a6c:	2001      	movs	r0, #1
}
   26a6e:	4770      	bx	lr
   26a70:	f0000fe0 	.word	0xf0000fe0
   26a74:	f0000fe4 	.word	0xf0000fe4
   26a78:	f0000fe8 	.word	0xf0000fe8
   26a7c:	f0000fec 	.word	0xf0000fec

00026a80 <ftpan_37>:

static bool ftpan_37(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26a80:	4b0e      	ldr	r3, [pc, #56]	; (26abc <ftpan_37+0x3c>)
   26a82:	781b      	ldrb	r3, [r3, #0]
   26a84:	2b06      	cmp	r3, #6
   26a86:	d001      	beq.n	26a8c <ftpan_37+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26a88:	2000      	movs	r0, #0
   26a8a:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26a8c:	4b0c      	ldr	r3, [pc, #48]	; (26ac0 <ftpan_37+0x40>)
   26a8e:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26a90:	f013 0f0f 	tst.w	r3, #15
   26a94:	d10e      	bne.n	26ab4 <ftpan_37+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26a96:	4b0b      	ldr	r3, [pc, #44]	; (26ac4 <ftpan_37+0x44>)
   26a98:	681b      	ldr	r3, [r3, #0]
   26a9a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26a9e:	2b30      	cmp	r3, #48	; 0x30
   26aa0:	d001      	beq.n	26aa6 <ftpan_37+0x26>
	return false;
   26aa2:	2000      	movs	r0, #0
   26aa4:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26aa6:	4b08      	ldr	r3, [pc, #32]	; (26ac8 <ftpan_37+0x48>)
   26aa8:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26aaa:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   26aae:	d003      	beq.n	26ab8 <ftpan_37+0x38>
	return false;
   26ab0:	2000      	movs	r0, #0
   26ab2:	4770      	bx	lr
   26ab4:	2000      	movs	r0, #0
   26ab6:	4770      	bx	lr
			return true;
   26ab8:	2001      	movs	r0, #1
}
   26aba:	4770      	bx	lr
   26abc:	f0000fe0 	.word	0xf0000fe0
   26ac0:	f0000fe4 	.word	0xf0000fe4
   26ac4:	f0000fe8 	.word	0xf0000fe8
   26ac8:	f0000fec 	.word	0xf0000fec

00026acc <ftpan_36>:

static bool ftpan_36(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26acc:	4b0e      	ldr	r3, [pc, #56]	; (26b08 <ftpan_36+0x3c>)
   26ace:	781b      	ldrb	r3, [r3, #0]
   26ad0:	2b06      	cmp	r3, #6
   26ad2:	d001      	beq.n	26ad8 <ftpan_36+0xc>
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
			return true;
		}
	}

	return false;
   26ad4:	2000      	movs	r0, #0
   26ad6:	4770      	bx	lr
		(((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26ad8:	4b0c      	ldr	r3, [pc, #48]	; (26b0c <ftpan_36+0x40>)
   26ada:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26adc:	f013 0f0f 	tst.w	r3, #15
   26ae0:	d10e      	bne.n	26b00 <ftpan_36+0x34>
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26ae2:	4b0b      	ldr	r3, [pc, #44]	; (26b10 <ftpan_36+0x44>)
   26ae4:	681b      	ldr	r3, [r3, #0]
   26ae6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26aea:	2b30      	cmp	r3, #48	; 0x30
   26aec:	d001      	beq.n	26af2 <ftpan_36+0x26>
	return false;
   26aee:	2000      	movs	r0, #0
   26af0:	4770      	bx	lr
			(((*(u32_t *)0xF0000FEC) & 0x000000F0) == 0x0)) {
   26af2:	4b08      	ldr	r3, [pc, #32]	; (26b14 <ftpan_36+0x48>)
   26af4:	681b      	ldr	r3, [r3, #0]
		if ((((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) &&
   26af6:	f013 0ff0 	tst.w	r3, #240	; 0xf0
   26afa:	d003      	beq.n	26b04 <ftpan_36+0x38>
	return false;
   26afc:	2000      	movs	r0, #0
   26afe:	4770      	bx	lr
   26b00:	2000      	movs	r0, #0
   26b02:	4770      	bx	lr
			return true;
   26b04:	2001      	movs	r0, #1
}
   26b06:	4770      	bx	lr
   26b08:	f0000fe0 	.word	0xf0000fe0
   26b0c:	f0000fe4 	.word	0xf0000fe4
   26b10:	f0000fe8 	.word	0xf0000fe8
   26b14:	f0000fec 	.word	0xf0000fec

00026b18 <errata_136_nrf52832>:

static bool errata_136_nrf52832(void)
{
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26b18:	4b0f      	ldr	r3, [pc, #60]	; (26b58 <errata_136_nrf52832+0x40>)
   26b1a:	781b      	ldrb	r3, [r3, #0]
   26b1c:	2b06      	cmp	r3, #6
   26b1e:	d001      	beq.n	26b24 <errata_136_nrf52832+0xc>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
			return true;
		}
	}

	return false;
   26b20:	2000      	movs	r0, #0
   26b22:	4770      	bx	lr
	    (((*(u32_t *)0xF0000FE4) & 0x0000000F) == 0x0)) {
   26b24:	4b0d      	ldr	r3, [pc, #52]	; (26b5c <errata_136_nrf52832+0x44>)
   26b26:	681b      	ldr	r3, [r3, #0]
	if ((((*(u32_t *)0xF0000FE0) & 0x000000FF) == 0x6) &&
   26b28:	f013 0f0f 	tst.w	r3, #15
   26b2c:	d10b      	bne.n	26b46 <errata_136_nrf52832+0x2e>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x30) {
   26b2e:	4b0c      	ldr	r3, [pc, #48]	; (26b60 <errata_136_nrf52832+0x48>)
   26b30:	681b      	ldr	r3, [r3, #0]
   26b32:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
   26b36:	2b30      	cmp	r3, #48	; 0x30
   26b38:	d007      	beq.n	26b4a <errata_136_nrf52832+0x32>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x40) {
   26b3a:	2b40      	cmp	r3, #64	; 0x40
   26b3c:	d007      	beq.n	26b4e <errata_136_nrf52832+0x36>
		if (((*(u32_t *)0xF0000FE8) & 0x000000F0) == 0x50) {
   26b3e:	2b50      	cmp	r3, #80	; 0x50
   26b40:	d007      	beq.n	26b52 <errata_136_nrf52832+0x3a>
	return false;
   26b42:	2000      	movs	r0, #0
   26b44:	4770      	bx	lr
   26b46:	2000      	movs	r0, #0
   26b48:	4770      	bx	lr
			return true;
   26b4a:	2001      	movs	r0, #1
   26b4c:	4770      	bx	lr
			return true;
   26b4e:	2001      	movs	r0, #1
   26b50:	4770      	bx	lr
			return true;
   26b52:	2001      	movs	r0, #1
}
   26b54:	4770      	bx	lr
   26b56:	bf00      	nop
   26b58:	f0000fe0 	.word	0xf0000fe0
   26b5c:	f0000fe4 	.word	0xf0000fe4
   26b60:	f0000fe8 	.word	0xf0000fe8

00026b64 <nordicsemi_nrf52832_init>:

static void nordicsemi_nrf52832_init(void)
{
   26b64:	b508      	push	{r3, lr}
	/* Workaround for FTPAN-32 "DIF: Debug session automatically
	* enables TracePort pins" found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_32()) {
   26b66:	f7ff ff65 	bl	26a34 <ftpan_32>
   26b6a:	b120      	cbz	r0, 26b76 <nordicsemi_nrf52832_init+0x12>
		CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
   26b6c:	4a32      	ldr	r2, [pc, #200]	; (26c38 <nordicsemi_nrf52832_init+0xd4>)
   26b6e:	68d3      	ldr	r3, [r2, #12]
   26b70:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
   26b74:	60d3      	str	r3, [r2, #12]

	/* Workaround for FTPAN-37 "AMLI: EasyDMA is slow with Radio,
	* ECB, AAR and CCM." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_37()) {
   26b76:	f7ff ff83 	bl	26a80 <ftpan_37>
   26b7a:	b110      	cbz	r0, 26b82 <nordicsemi_nrf52832_init+0x1e>
		*(volatile u32_t *)0x400005A0 = 0x3;
   26b7c:	2203      	movs	r2, #3
   26b7e:	4b2f      	ldr	r3, [pc, #188]	; (26c3c <nordicsemi_nrf52832_init+0xd8>)
   26b80:	601a      	str	r2, [r3, #0]

	/* Workaround for FTPAN-36 "CLOCK: Some registers are not
	* reset when expected." found at Product Anomaly document
	* for your device located at https://www.nordicsemi.com/
	*/
	if (ftpan_36()) {
   26b82:	f7ff ffa3 	bl	26acc <ftpan_36>
   26b86:	b130      	cbz	r0, 26b96 <nordicsemi_nrf52832_init+0x32>
		NRF_CLOCK->EVENTS_DONE = 0;
   26b88:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26b8c:	2200      	movs	r2, #0
   26b8e:	f8c3 210c 	str.w	r2, [r3, #268]	; 0x10c
		NRF_CLOCK->EVENTS_CTTO = 0;
   26b92:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110

	/* Workaround for Errata 136 "System: Bits in RESETREAS are set when
	 * they should not be" found at the Errata document for your device
	 * located at https://infocenter.nordicsemi.com/
	 */
	if (errata_136_nrf52832()) {
   26b96:	f7ff ffbf 	bl	26b18 <errata_136_nrf52832>
   26b9a:	b160      	cbz	r0, 26bb6 <nordicsemi_nrf52832_init+0x52>
		if (NRF_POWER->RESETREAS & POWER_RESETREAS_RESETPIN_Msk) {
   26b9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26ba0:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26ba4:	f013 0f01 	tst.w	r3, #1
   26ba8:	d005      	beq.n	26bb6 <nordicsemi_nrf52832_init+0x52>
			NRF_POWER->RESETREAS = ~POWER_RESETREAS_RESETPIN_Msk;
   26baa:	f06f 0201 	mvn.w	r2, #1
   26bae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   26bb2:	f8c3 2400 	str.w	r2, [r3, #1024]	; 0x400
	* defined, pin reset will not be available. One GPIO (see
	* Product Specification to see which one) will then be
	* reserved for PinReset and not available as normal GPIO.
	*/
#if defined(CONFIG_GPIO_AS_PINRESET)
	if (((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   26bb6:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26bba:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
   26bbe:	2b00      	cmp	r3, #0
   26bc0:	db06      	blt.n	26bd0 <nordicsemi_nrf52832_init+0x6c>
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
	    ((NRF_UICR->PSELRESET[0] & UICR_PSELRESET_CONNECT_Msk) !=
   26bc2:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26bc6:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos)) ||
   26bca:	2b00      	cmp	r3, #0
   26bcc:	db00      	blt.n	26bd0 <nordicsemi_nrf52832_init+0x6c>
   26bce:	bd08      	pop	{r3, pc}
	     (UICR_PSELRESET_CONNECT_Connected << UICR_PSELRESET_CONNECT_Pos))) {

		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Wen << NVMC_CONFIG_WEN_Pos;
   26bd0:	2201      	movs	r2, #1
   26bd2:	4b1b      	ldr	r3, [pc, #108]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26bd4:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26bd8:	4b19      	ldr	r3, [pc, #100]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26bda:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26bde:	2b00      	cmp	r3, #0
   26be0:	d0fa      	beq.n	26bd8 <nordicsemi_nrf52832_init+0x74>
			;
		}
		NRF_UICR->PSELRESET[0] = 21;
   26be2:	2215      	movs	r2, #21
   26be4:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26be8:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26bec:	4b14      	ldr	r3, [pc, #80]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26bee:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26bf2:	2b00      	cmp	r3, #0
   26bf4:	d0fa      	beq.n	26bec <nordicsemi_nrf52832_init+0x88>
			;
		}
		NRF_UICR->PSELRESET[1] = 21;
   26bf6:	2215      	movs	r2, #21
   26bf8:	f04f 2310 	mov.w	r3, #268439552	; 0x10001000
   26bfc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26c00:	4b0f      	ldr	r3, [pc, #60]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26c02:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26c06:	2b00      	cmp	r3, #0
   26c08:	d0fa      	beq.n	26c00 <nordicsemi_nrf52832_init+0x9c>
			;
		}
		NRF_NVMC->CONFIG = NVMC_CONFIG_WEN_Ren << NVMC_CONFIG_WEN_Pos;
   26c0a:	2200      	movs	r2, #0
   26c0c:	4b0c      	ldr	r3, [pc, #48]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26c0e:	f8c3 2504 	str.w	r2, [r3, #1284]	; 0x504
		while (NRF_NVMC->READY == NVMC_READY_READY_Busy) {
   26c12:	4b0b      	ldr	r3, [pc, #44]	; (26c40 <nordicsemi_nrf52832_init+0xdc>)
   26c14:	f8d3 3400 	ldr.w	r3, [r3, #1024]	; 0x400
   26c18:	2b00      	cmp	r3, #0
   26c1a:	d0fa      	beq.n	26c12 <nordicsemi_nrf52832_init+0xae>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__attribute__((always_inline)) __STATIC_INLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
   26c1c:	f3bf 8f4f 	dsb	sy
__STATIC_INLINE void NVIC_SystemReset(void)
{
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
   26c20:	4908      	ldr	r1, [pc, #32]	; (26c44 <nordicsemi_nrf52832_init+0xe0>)
   26c22:	68ca      	ldr	r2, [r1, #12]
   26c24:	f402 62e0 	and.w	r2, r2, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
   26c28:	4b07      	ldr	r3, [pc, #28]	; (26c48 <nordicsemi_nrf52832_init+0xe4>)
   26c2a:	4313      	orrs	r3, r2
   26c2c:	60cb      	str	r3, [r1, #12]
   26c2e:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("nop");
   26c32:	bf00      	nop
   26c34:	e7fd      	b.n	26c32 <nordicsemi_nrf52832_init+0xce>
   26c36:	bf00      	nop
   26c38:	e000edf0 	.word	0xe000edf0
   26c3c:	400005a0 	.word	0x400005a0
   26c40:	4001e000 	.word	0x4001e000
   26c44:	e000ed00 	.word	0xe000ed00
   26c48:	05fa0004 	.word	0x05fa0004

00026c4c <clock_init>:

uint32_t SystemCoreClock __used = __SYSTEM_CLOCK_64M;

static void clock_init(void)
{
	SystemCoreClock = __SYSTEM_CLOCK_64M;
   26c4c:	4a01      	ldr	r2, [pc, #4]	; (26c54 <clock_init+0x8>)
   26c4e:	4b02      	ldr	r3, [pc, #8]	; (26c58 <clock_init+0xc>)
   26c50:	601a      	str	r2, [r3, #0]
   26c52:	4770      	bx	lr
   26c54:	03d09000 	.word	0x03d09000
   26c58:	2000c56c 	.word	0x2000c56c

00026c5c <nordicsemi_nrf52_init>:
}

static int nordicsemi_nrf52_init(struct device *arg)
{
   26c5c:	b510      	push	{r4, lr}
	__asm__ volatile(
   26c5e:	f04f 0320 	mov.w	r3, #32
   26c62:	f3ef 8411 	mrs	r4, BASEPRI
   26c66:	f383 8811 	msr	BASEPRI, r3
	ARG_UNUSED(arg);

	key = irq_lock();

#ifdef CONFIG_SOC_NRF52832
	nordicsemi_nrf52832_init();
   26c6a:	f7ff ff7b 	bl	26b64 <nordicsemi_nrf52832_init>
static ALWAYS_INLINE void _ClearFaults(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	/* Reset all faults */
	SCB->CFSR = SCB_CFSR_USGFAULTSR_Msk |
   26c6e:	4b05      	ldr	r3, [pc, #20]	; (26c84 <nordicsemi_nrf52_init+0x28>)
   26c70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   26c74:	629a      	str	r2, [r3, #40]	; 0x28
		    SCB_CFSR_MEMFAULTSR_Msk |
		    SCB_CFSR_BUSFAULTSR_Msk;

	/* Clear all Hard Faults - HFSR is write-one-to-clear */
	SCB->HFSR = 0xffffffff;
   26c76:	62da      	str	r2, [r3, #44]	; 0x2c
#endif

	_ClearFaults();

	/* Setup master clock */
	clock_init();
   26c78:	f7ff ffe8 	bl	26c4c <clock_init>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   26c7c:	f384 8811 	msr	BASEPRI, r4
	NMI_INIT();

	irq_unlock(key);

	return 0;
}
   26c80:	2000      	movs	r0, #0
   26c82:	bd10      	pop	{r4, pc}
   26c84:	e000ed00 	.word	0xe000ed00

00026c88 <_ExcExit>:
 */

SECTION_SUBSEC_FUNC(TEXT, _HandlerModeExit, _ExcExit)

#ifdef CONFIG_PREEMPT_ENABLED
    ldr r0, =_kernel
   26c88:	4808      	ldr	r0, [pc, #32]	; (26cac <_EXIT_EXC+0x2>)

    ldr r1, [r0, #_kernel_offset_to_current]
   26c8a:	6881      	ldr	r1, [r0, #8]

    /*
     * Non-preemptible thread ? Do not schedule (see explanation of
     * preempt field in kernel_struct.h).
     */
    ldrh r2, [r1, #_thread_offset_to_preempt]
   26c8c:	894a      	ldrh	r2, [r1, #10]
    cmp r2, #_PREEMPT_THRESHOLD
   26c8e:	2a7f      	cmp	r2, #127	; 0x7f
    bhi _EXIT_EXC
   26c90:	d80b      	bhi.n	26caa <_EXIT_EXC>

    ldr r0, [r0, _kernel_offset_to_ready_q_cache]
   26c92:	6980      	ldr	r0, [r0, #24]
    cmp r0, r1
   26c94:	4288      	cmp	r0, r1
    beq _EXIT_EXC
   26c96:	d008      	beq.n	26caa <_EXIT_EXC>

#ifdef CONFIG_TIMESLICING
    push {lr}
   26c98:	b500      	push	{lr}
    bl _update_time_slice_before_swap
   26c9a:	f001 fd1f 	bl	286dc <_update_time_slice_before_swap>
#if defined(CONFIG_ARMV6_M)
    pop {r0}
    mov lr, r0
#else
    pop {lr}
   26c9e:	f85d eb04 	ldr.w	lr, [sp], #4
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_TIMESLICING */

    /* context switch required, pend the PendSV exception */
    ldr r1, =_SCS_ICSR
   26ca2:	4903      	ldr	r1, [pc, #12]	; (26cb0 <_EXIT_EXC+0x6>)
    ldr r2, =_SCS_ICSR_PENDSV
   26ca4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1]
   26ca8:	600a      	str	r2, [r1, #0]

00026caa <_EXIT_EXC>:
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_STACK_SENTINEL */

    bx lr
   26caa:	4770      	bx	lr
    ldr r0, =_kernel
   26cac:	20002810 	.word	0x20002810
    ldr r1, =_SCS_ICSR
   26cb0:	e000ed04 	.word	0xe000ed04

00026cb4 <_IntLibInit>:
 * @return N/A
 */

void _IntLibInit(void)
{
	int irq = 0;
   26cb4:	2200      	movs	r2, #0

	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26cb6:	e00a      	b.n	26cce <_IntLibInit+0x1a>
		NVIC_SetPriority((IRQn_Type)irq, _IRQ_PRIO_OFFSET);
   26cb8:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) < 0)
   26cba:	2b00      	cmp	r3, #0
   26cbc:	db0a      	blt.n	26cd4 <_IntLibInit+0x20>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26cbe:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   26cc2:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   26cc6:	2120      	movs	r1, #32
   26cc8:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
	for (; irq < CONFIG_NUM_IRQS; irq++) {
   26ccc:	3201      	adds	r2, #1
   26cce:	2a26      	cmp	r2, #38	; 0x26
   26cd0:	ddf2      	ble.n	26cb8 <_IntLibInit+0x4>
	}
}
   26cd2:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   26cd4:	f002 010f 	and.w	r1, r2, #15
   26cd8:	4b02      	ldr	r3, [pc, #8]	; (26ce4 <_IntLibInit+0x30>)
   26cda:	440b      	add	r3, r1
   26cdc:	2120      	movs	r1, #32
   26cde:	7619      	strb	r1, [r3, #24]
   26ce0:	e7f4      	b.n	26ccc <_IntLibInit+0x18>
   26ce2:	bf00      	nop
   26ce4:	e000ecfc 	.word	0xe000ecfc

00026ce8 <__pendsv>:
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_KERNEL_EVENT_LOGGER_CONTEXT_SWITCH  */

    /* load _kernel into r1 and current k_thread into r2 */
    ldr r1, =_kernel
   26ce8:	490e      	ldr	r1, [pc, #56]	; (26d24 <__pendsv+0x3c>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26cea:	688a      	ldr	r2, [r1, #8]

    /* addr of callee-saved regs in thread in r0 */
    ldr r0, =_thread_offset_to_callee_saved
   26cec:	f04f 0028 	mov.w	r0, #40	; 0x28
    add r0, r2
   26cf0:	4410      	add	r0, r2

    /* save callee-saved + psp in thread */
    mrs ip, PSP
   26cf2:	f3ef 8c09 	mrs	ip, PSP
    mov r6, r11
    mov r7, ip
    /* store r8-12 */
    stmea r0!, {r3-r7}
#elif defined(CONFIG_ARMV7_M)
    stmia r0, {v1-v8, ip}
   26cf6:	e880 1ff0 	stmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
     * don't clear it yet. PendSV must not be cleared until
     * the new thread is context-switched in since all decisions
     * to pend PendSV have been taken with the current kernel
     * state and this is what we're handling currently.
     */
    ldr v4, =_SCS_ICSR
   26cfa:	4f0b      	ldr	r7, [pc, #44]	; (26d28 <__pendsv+0x40>)
    ldr v3, =_SCS_ICSR_UNPENDSV
   26cfc:	f04f 6600 	mov.w	r6, #134217728	; 0x8000000

    /* protect the kernel state while we play with the thread lists */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   26d00:	2020      	movs	r0, #32
    msr BASEPRI, r0
   26d02:	f380 8811 	msr	BASEPRI, r0
#endif /* CONFIG_ARMV6_M */

    /* _kernel is still in r1 */

    /* fetch the thread to run from the ready queue cache */
    ldr r2, [r1, _kernel_offset_to_ready_q_cache]
   26d06:	698a      	ldr	r2, [r1, #24]

    str r2, [r1, #_kernel_offset_to_current]
   26d08:	608a      	str	r2, [r1, #8]
     * since they were based on the previous kernel state and this
     * has been handled.
     */

    /* _SCS_ICSR is still in v4 and _SCS_ICSR_UNPENDSV in v3 */
    str v3, [v4, #0]
   26d0a:	603e      	str	r6, [r7, #0]

    /* Restore previous interrupt disable state (irq_lock key) */
    ldr r0, [r2, #_thread_offset_to_basepri]
   26d0c:	6e10      	ldr	r0, [r2, #96]	; 0x60
    movs.n r3, #0
   26d0e:	2300      	movs	r3, #0
    str r3, [r2, #_thread_offset_to_basepri]
   26d10:	6613      	str	r3, [r2, #96]	; 0x60
    /* restore r4-r7, go back 9*4 bytes to the start of the stored block */
    subs r0, #36
    ldmia r0!, {r4-r7}
#elif defined(CONFIG_ARMV7_M)
    /* restore BASEPRI for the incoming thread */
    msr BASEPRI, r0
   26d12:	f380 8811 	msr	BASEPRI, r0
    blx configure_mpu_mem_domain
    pop {r2, lr}
#endif /* CONFIG_USERSPACE */

    /* load callee-saved + psp from thread */
    add r0, r2, #_thread_offset_to_callee_saved
   26d16:	f102 0028 	add.w	r0, r2, #40	; 0x28
    ldmia r0, {v1-v8, ip}
   26d1a:	e890 1ff0 	ldmia.w	r0, {r4, r5, r6, r7, r8, r9, sl, fp, ip}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    msr PSP, ip
   26d1e:	f38c 8809 	msr	PSP, ip
#endif /* CONFIG_ARMV6_M */
    ldm sp!,{r0-r3} /* Load back regs ro to r4 */
#endif /* CONFIG_EXECUTION_BENCHMARKING */

    /* exc return */
    bx lr
   26d22:	4770      	bx	lr
    ldr r1, =_kernel
   26d24:	20002810 	.word	0x20002810
    ldr v4, =_SCS_ICSR
   26d28:	e000ed04 	.word	0xe000ed04

00026d2c <__svc>:
 * @return N/A
 */

SECTION_FUNC(TEXT, __svc)

    tst lr, #0x4    /* did we come from thread mode ? */
   26d2c:	f01e 0f04 	tst.w	lr, #4
    ite eq  /* if zero (equal), came from handler mode */
   26d30:	bf0c      	ite	eq
        mrseq r0, MSP   /* handler mode, stack frame is on MSP */
   26d32:	f3ef 8008 	mrseq	r0, MSP
        mrsne r0, PSP   /* thread mode, stack frame is on PSP */
   26d36:	f3ef 8009 	mrsne	r0, PSP

    ldr r1, [r0, #24]   /* grab address of PC from stack frame */
   26d3a:	6981      	ldr	r1, [r0, #24]
    /* SVC is a two-byte instruction, point to it and read  encoding */
    ldrh r1, [r1, #-2]
   26d3c:	f831 1c02 	ldrh.w	r1, [r1, #-2]
    * 1: irq_offload (if configured)
    * 2: kernel panic or oops (software generated fatal exception)
    * Planned implementation of system calls for memory protection will
    * expand this case.
    */
    ands r1, #0xff
   26d40:	f011 01ff 	ands.w	r1, r1, #255	; 0xff
    beq _context_switch
   26d44:	d001      	beq.n	26d4a <_context_switch>

    cmp r1, #2
   26d46:	2902      	cmp	r1, #2
    beq _oops
   26d48:	d007      	beq.n	26d5a <_oops>

00026d4a <_context_switch>:
    /*
     * Unlock interrupts:
     * - in a SVC call, so protected against context switches
     * - allow PendSV, since it's running at prio 0xff
     */
    eors.n r0, r0
   26d4a:	4040      	eors	r0, r0
    msr BASEPRI, r0
   26d4c:	f380 8811 	msr	BASEPRI, r0

     /* set PENDSV bit, pending the PendSV exception */
    ldr r1, =_SCS_ICSR
   26d50:	4904      	ldr	r1, [pc, #16]	; (26d64 <_oops+0xa>)
    ldr r2, =_SCS_ICSR_PENDSV
   26d52:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
    str r2, [r1, #0]
   26d56:	600a      	str	r2, [r1, #0]

    /* handler mode exit, to PendSV */
    bx lr
   26d58:	4770      	bx	lr

00026d5a <_oops>:

_oops:
    push {lr}
   26d5a:	b500      	push	{lr}
    blx _do_kernel_oops
   26d5c:	f000 fa82 	bl	27264 <_do_kernel_oops>
    pop {pc}
   26d60:	bd00      	pop	{pc}
   26d62:	0000      	.short	0x0000
    ldr r1, =_SCS_ICSR
   26d64:	e000ed04 	.word	0xe000ed04

00026d68 <__swap>:
    mov lr,r3
#else
    pop {lr}
#endif /* CONFIG_ARMV6_M */
#endif /* CONFIG_EXECUTION_BENCHMARKING */
    ldr r1, =_kernel
   26d68:	4904      	ldr	r1, [pc, #16]	; (26d7c <__swap+0x14>)
    ldr r2, [r1, #_kernel_offset_to_current]
   26d6a:	688a      	ldr	r2, [r1, #8]
    str r0, [r2, #_thread_offset_to_basepri]
   26d6c:	6610      	str	r0, [r2, #96]	; 0x60

    /*
     * Set __swap()'s default return code to -EAGAIN. This eliminates the need
     * for the timeout code to set it itself.
     */
    ldr r1, =_k_neg_eagain
   26d6e:	4904      	ldr	r1, [pc, #16]	; (26d80 <__swap+0x18>)
    ldr r1, [r1]
   26d70:	6809      	ldr	r1, [r1, #0]
    str r1, [r2, #_thread_offset_to_swap_return_value]
   26d72:	6651      	str	r1, [r2, #100]	; 0x64
     * PendSV handler will be called if there are no other interrupts
     * of a higher priority pending.
     */
    cpsie i
#elif defined(CONFIG_ARMV7_M)
    svc #0
   26d74:	df00      	svc	0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

    /* coming back from exception, r2 still holds the pointer to _current */
    ldr r0, [r2, #_thread_offset_to_swap_return_value]
   26d76:	6e50      	ldr	r0, [r2, #100]	; 0x64
    bx lr
   26d78:	4770      	bx	lr
   26d7a:	0000      	.short	0x0000
    ldr r1, =_kernel
   26d7c:	20002810 	.word	0x20002810
    ldr r1, =_k_neg_eagain
   26d80:	0002f078 	.word	0x0002f078

00026d84 <_DebugMonitor>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _DebugMonitor(const NANO_ESF *esf)
{
   26d84:	b508      	push	{r3, lr}
	ARG_UNUSED(esf);

	PR_EXC("***** Debug monitor exception (not implemented) *****\n");
   26d86:	4802      	ldr	r0, [pc, #8]	; (26d90 <_DebugMonitor+0xc>)
   26d88:	f7db fc34 	bl	25f4 <printk>
   26d8c:	bd08      	pop	{r3, pc}
   26d8e:	bf00      	nop
   26d90:	0002ecb4 	.word	0x0002ecb4

00026d94 <_ReservedException>:
 * See _FaultDump() for example.
 *
 * @return N/A
 */
static void _ReservedException(const NANO_ESF *esf, int fault)
{
   26d94:	b508      	push	{r3, lr}
   26d96:	460a      	mov	r2, r1
	ARG_UNUSED(esf);

	PR_EXC("***** %s %d) *****\n",
   26d98:	290f      	cmp	r1, #15
   26d9a:	dd05      	ble.n	26da8 <_ReservedException+0x14>
   26d9c:	4903      	ldr	r1, [pc, #12]	; (26dac <_ReservedException+0x18>)
   26d9e:	3a10      	subs	r2, #16
   26da0:	4803      	ldr	r0, [pc, #12]	; (26db0 <_ReservedException+0x1c>)
   26da2:	f7db fc27 	bl	25f4 <printk>
   26da6:	bd08      	pop	{r3, pc}
   26da8:	4902      	ldr	r1, [pc, #8]	; (26db4 <_ReservedException+0x20>)
   26daa:	e7f8      	b.n	26d9e <_ReservedException+0xa>
   26dac:	0002ee3c 	.word	0x0002ee3c
   26db0:	0002ee58 	.word	0x0002ee58
   26db4:	0002ee24 	.word	0x0002ee24

00026db8 <_FaultThreadShow>:
{
   26db8:	b510      	push	{r4, lr}
   26dba:	4604      	mov	r4, r0
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   26dbc:	f001 fc60 	bl	28680 <_impl_k_current_get>
	PR_EXC("  Executing thread ID (thread): %p\n"
   26dc0:	69a2      	ldr	r2, [r4, #24]
   26dc2:	4601      	mov	r1, r0
   26dc4:	4801      	ldr	r0, [pc, #4]	; (26dcc <_FaultThreadShow+0x14>)
   26dc6:	f7db fc15 	bl	25f4 <printk>
   26dca:	bd10      	pop	{r4, pc}
   26dcc:	0002ecec 	.word	0x0002ecec

00026dd0 <_MpuFault>:
{
   26dd0:	b538      	push	{r3, r4, r5, lr}
   26dd2:	4604      	mov	r4, r0
   26dd4:	460d      	mov	r5, r1
	PR_EXC("***** MPU FAULT *****\n");
   26dd6:	481e      	ldr	r0, [pc, #120]	; (26e50 <_MpuFault+0x80>)
   26dd8:	f7db fc0c 	bl	25f4 <printk>
	_FaultThreadShow(esf);
   26ddc:	4620      	mov	r0, r4
   26dde:	f7ff ffeb 	bl	26db8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_MSTKERR_Msk) {
   26de2:	4b1c      	ldr	r3, [pc, #112]	; (26e54 <_MpuFault+0x84>)
   26de4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26de6:	f013 0f10 	tst.w	r3, #16
   26dea:	d10f      	bne.n	26e0c <_MpuFault+0x3c>
	} else if (SCB->CFSR & CFSR_MUNSTKERR_Msk) {
   26dec:	4b19      	ldr	r3, [pc, #100]	; (26e54 <_MpuFault+0x84>)
   26dee:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26df0:	f013 0f08 	tst.w	r3, #8
   26df4:	d10e      	bne.n	26e14 <_MpuFault+0x44>
	} else if (SCB->CFSR & CFSR_DACCVIOL_Msk) {
   26df6:	4b17      	ldr	r3, [pc, #92]	; (26e54 <_MpuFault+0x84>)
   26df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26dfa:	f013 0f02 	tst.w	r3, #2
   26dfe:	d10d      	bne.n	26e1c <_MpuFault+0x4c>
	} else if (SCB->CFSR & CFSR_IACCVIOL_Msk) {
   26e00:	4b14      	ldr	r3, [pc, #80]	; (26e54 <_MpuFault+0x84>)
   26e02:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26e04:	f013 0f01 	tst.w	r3, #1
   26e08:	d11d      	bne.n	26e46 <_MpuFault+0x76>
   26e0a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26e0c:	4812      	ldr	r0, [pc, #72]	; (26e58 <_MpuFault+0x88>)
   26e0e:	f7db fbf1 	bl	25f4 <printk>
   26e12:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26e14:	4811      	ldr	r0, [pc, #68]	; (26e5c <_MpuFault+0x8c>)
   26e16:	f7db fbed 	bl	25f4 <printk>
   26e1a:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Data Access Violation\n");
   26e1c:	4810      	ldr	r0, [pc, #64]	; (26e60 <_MpuFault+0x90>)
   26e1e:	f7db fbe9 	bl	25f4 <printk>
		if (SCB->CFSR & CFSR_MMARVALID_Msk) {
   26e22:	4b0c      	ldr	r3, [pc, #48]	; (26e54 <_MpuFault+0x84>)
   26e24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26e26:	f013 0f80 	tst.w	r3, #128	; 0x80
   26e2a:	d0ee      	beq.n	26e0a <_MpuFault+0x3a>
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->MMFAR);
   26e2c:	4b09      	ldr	r3, [pc, #36]	; (26e54 <_MpuFault+0x84>)
   26e2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
   26e30:	480c      	ldr	r0, [pc, #48]	; (26e64 <_MpuFault+0x94>)
   26e32:	f7db fbdf 	bl	25f4 <printk>
			if (fromHardFault) {
   26e36:	2d00      	cmp	r5, #0
   26e38:	d0e7      	beq.n	26e0a <_MpuFault+0x3a>
				SCB->CFSR &= ~CFSR_MMARVALID_Msk;
   26e3a:	4a06      	ldr	r2, [pc, #24]	; (26e54 <_MpuFault+0x84>)
   26e3c:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26e3e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   26e42:	6293      	str	r3, [r2, #40]	; 0x28
   26e44:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction Access Violation\n");
   26e46:	4808      	ldr	r0, [pc, #32]	; (26e68 <_MpuFault+0x98>)
   26e48:	f7db fbd4 	bl	25f4 <printk>
}
   26e4c:	e7dd      	b.n	26e0a <_MpuFault+0x3a>
   26e4e:	bf00      	nop
   26e50:	0002ed94 	.word	0x0002ed94
   26e54:	e000ed00 	.word	0xe000ed00
   26e58:	0002edac 	.word	0x0002edac
   26e5c:	0002edc0 	.word	0x0002edc0
   26e60:	0002edd4 	.word	0x0002edd4
   26e64:	0002edf0 	.word	0x0002edf0
   26e68:	0002ee04 	.word	0x0002ee04

00026e6c <_BusFault>:
{
   26e6c:	b538      	push	{r3, r4, r5, lr}
   26e6e:	4604      	mov	r4, r0
   26e70:	460d      	mov	r5, r1
	PR_EXC("***** BUS FAULT *****\n");
   26e72:	4827      	ldr	r0, [pc, #156]	; (26f10 <_BusFault+0xa4>)
   26e74:	f7db fbbe 	bl	25f4 <printk>
	_FaultThreadShow(esf);
   26e78:	4620      	mov	r0, r4
   26e7a:	f7ff ff9d 	bl	26db8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_STKERR_Msk) {
   26e7e:	4b25      	ldr	r3, [pc, #148]	; (26f14 <_BusFault+0xa8>)
   26e80:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26e82:	f413 5f80 	tst.w	r3, #4096	; 0x1000
   26e86:	d114      	bne.n	26eb2 <_BusFault+0x46>
	} else if (SCB->CFSR & CFSR_UNSTKERR_Msk) {
   26e88:	4b22      	ldr	r3, [pc, #136]	; (26f14 <_BusFault+0xa8>)
   26e8a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26e8c:	f413 6f00 	tst.w	r3, #2048	; 0x800
   26e90:	d113      	bne.n	26eba <_BusFault+0x4e>
	} else if (SCB->CFSR & CFSR_PRECISERR_Msk) {
   26e92:	4b20      	ldr	r3, [pc, #128]	; (26f14 <_BusFault+0xa8>)
   26e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26e96:	f413 7f00 	tst.w	r3, #512	; 0x200
   26e9a:	d112      	bne.n	26ec2 <_BusFault+0x56>
	} else if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26e9c:	4b1d      	ldr	r3, [pc, #116]	; (26f14 <_BusFault+0xa8>)
   26e9e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ea0:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26ea4:	d12b      	bne.n	26efe <_BusFault+0x92>
	} else if (SCB->CFSR & CFSR_IBUSERR_Msk) {
   26ea6:	4b1b      	ldr	r3, [pc, #108]	; (26f14 <_BusFault+0xa8>)
   26ea8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26eaa:	f413 7f80 	tst.w	r3, #256	; 0x100
   26eae:	d12a      	bne.n	26f06 <_BusFault+0x9a>
   26eb0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Stacking error\n");
   26eb2:	4819      	ldr	r0, [pc, #100]	; (26f18 <_BusFault+0xac>)
   26eb4:	f7db fb9e 	bl	25f4 <printk>
   26eb8:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Unstacking error\n");
   26eba:	4818      	ldr	r0, [pc, #96]	; (26f1c <_BusFault+0xb0>)
   26ebc:	f7db fb9a 	bl	25f4 <printk>
   26ec0:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Precise data bus error\n");
   26ec2:	4817      	ldr	r0, [pc, #92]	; (26f20 <_BusFault+0xb4>)
   26ec4:	f7db fb96 	bl	25f4 <printk>
		if (SCB->CFSR & CFSR_BFARVALID_Msk) {
   26ec8:	4b12      	ldr	r3, [pc, #72]	; (26f14 <_BusFault+0xa8>)
   26eca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ecc:	f413 4f00 	tst.w	r3, #32768	; 0x8000
   26ed0:	d108      	bne.n	26ee4 <_BusFault+0x78>
		if (SCB->CFSR & CFSR_IMPRECISERR_Msk) {
   26ed2:	4b10      	ldr	r3, [pc, #64]	; (26f14 <_BusFault+0xa8>)
   26ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26ed6:	f413 6f80 	tst.w	r3, #1024	; 0x400
   26eda:	d0e9      	beq.n	26eb0 <_BusFault+0x44>
			PR_EXC("  Imprecise data bus error\n");
   26edc:	4811      	ldr	r0, [pc, #68]	; (26f24 <_BusFault+0xb8>)
   26ede:	f7db fb89 	bl	25f4 <printk>
   26ee2:	bd38      	pop	{r3, r4, r5, pc}
			PR_EXC("  Address: 0x%x\n", (u32_t)SCB->BFAR);
   26ee4:	4b0b      	ldr	r3, [pc, #44]	; (26f14 <_BusFault+0xa8>)
   26ee6:	6b99      	ldr	r1, [r3, #56]	; 0x38
   26ee8:	480f      	ldr	r0, [pc, #60]	; (26f28 <_BusFault+0xbc>)
   26eea:	f7db fb83 	bl	25f4 <printk>
			if (fromHardFault) {
   26eee:	2d00      	cmp	r5, #0
   26ef0:	d0ef      	beq.n	26ed2 <_BusFault+0x66>
				SCB->CFSR &= ~CFSR_BFARVALID_Msk;
   26ef2:	4a08      	ldr	r2, [pc, #32]	; (26f14 <_BusFault+0xa8>)
   26ef4:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26ef6:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
   26efa:	6293      	str	r3, [r2, #40]	; 0x28
   26efc:	e7e9      	b.n	26ed2 <_BusFault+0x66>
		PR_EXC("  Imprecise data bus error\n");
   26efe:	4809      	ldr	r0, [pc, #36]	; (26f24 <_BusFault+0xb8>)
   26f00:	f7db fb78 	bl	25f4 <printk>
   26f04:	bd38      	pop	{r3, r4, r5, pc}
		PR_EXC("  Instruction bus error\n");
   26f06:	4809      	ldr	r0, [pc, #36]	; (26f2c <_BusFault+0xc0>)
   26f08:	f7db fb74 	bl	25f4 <printk>
}
   26f0c:	e7d0      	b.n	26eb0 <_BusFault+0x44>
   26f0e:	bf00      	nop
   26f10:	0002ec48 	.word	0x0002ec48
   26f14:	e000ed00 	.word	0xe000ed00
   26f18:	0002edac 	.word	0x0002edac
   26f1c:	0002edc0 	.word	0x0002edc0
   26f20:	0002ec60 	.word	0x0002ec60
   26f24:	0002ec7c 	.word	0x0002ec7c
   26f28:	0002edf0 	.word	0x0002edf0
   26f2c:	0002ec98 	.word	0x0002ec98

00026f30 <_UsageFault>:
{
   26f30:	b510      	push	{r4, lr}
   26f32:	4604      	mov	r4, r0
	PR_EXC("***** USAGE FAULT *****\n");
   26f34:	4821      	ldr	r0, [pc, #132]	; (26fbc <_UsageFault+0x8c>)
   26f36:	f7db fb5d 	bl	25f4 <printk>
	_FaultThreadShow(esf);
   26f3a:	4620      	mov	r0, r4
   26f3c:	f7ff ff3c 	bl	26db8 <_FaultThreadShow>
	if (SCB->CFSR & CFSR_DIVBYZERO_Msk) {
   26f40:	4b1f      	ldr	r3, [pc, #124]	; (26fc0 <_UsageFault+0x90>)
   26f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f44:	f013 7f00 	tst.w	r3, #33554432	; 0x2000000
   26f48:	d120      	bne.n	26f8c <_UsageFault+0x5c>
	if (SCB->CFSR & CFSR_UNALIGNED_Msk) {
   26f4a:	4b1d      	ldr	r3, [pc, #116]	; (26fc0 <_UsageFault+0x90>)
   26f4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f4e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   26f52:	d11f      	bne.n	26f94 <_UsageFault+0x64>
	if (SCB->CFSR & CFSR_NOCP_Msk) {
   26f54:	4b1a      	ldr	r3, [pc, #104]	; (26fc0 <_UsageFault+0x90>)
   26f56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f58:	f413 2f00 	tst.w	r3, #524288	; 0x80000
   26f5c:	d11e      	bne.n	26f9c <_UsageFault+0x6c>
	if (SCB->CFSR & CFSR_INVPC_Msk) {
   26f5e:	4b18      	ldr	r3, [pc, #96]	; (26fc0 <_UsageFault+0x90>)
   26f60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f62:	f413 2f80 	tst.w	r3, #262144	; 0x40000
   26f66:	d11d      	bne.n	26fa4 <_UsageFault+0x74>
	if (SCB->CFSR & CFSR_INVSTATE_Msk) {
   26f68:	4b15      	ldr	r3, [pc, #84]	; (26fc0 <_UsageFault+0x90>)
   26f6a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f6c:	f413 3f00 	tst.w	r3, #131072	; 0x20000
   26f70:	d11c      	bne.n	26fac <_UsageFault+0x7c>
	if (SCB->CFSR & CFSR_UNDEFINSTR_Msk) {
   26f72:	4b13      	ldr	r3, [pc, #76]	; (26fc0 <_UsageFault+0x90>)
   26f74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   26f76:	f413 3f80 	tst.w	r3, #65536	; 0x10000
   26f7a:	d11b      	bne.n	26fb4 <_UsageFault+0x84>
	SCB->CFSR |= SCB_CFSR_USGFAULTSR_Msk;
   26f7c:	4a10      	ldr	r2, [pc, #64]	; (26fc0 <_UsageFault+0x90>)
   26f7e:	6a93      	ldr	r3, [r2, #40]	; 0x28
   26f80:	ea6f 4303 	mvn.w	r3, r3, lsl #16
   26f84:	ea6f 4313 	mvn.w	r3, r3, lsr #16
   26f88:	6293      	str	r3, [r2, #40]	; 0x28
   26f8a:	bd10      	pop	{r4, pc}
		PR_EXC("  Division by zero\n");
   26f8c:	480d      	ldr	r0, [pc, #52]	; (26fc4 <_UsageFault+0x94>)
   26f8e:	f7db fb31 	bl	25f4 <printk>
   26f92:	e7da      	b.n	26f4a <_UsageFault+0x1a>
		PR_EXC("  Unaligned memory access\n");
   26f94:	480c      	ldr	r0, [pc, #48]	; (26fc8 <_UsageFault+0x98>)
   26f96:	f7db fb2d 	bl	25f4 <printk>
   26f9a:	e7db      	b.n	26f54 <_UsageFault+0x24>
		PR_EXC("  No coprocessor instructions\n");
   26f9c:	480b      	ldr	r0, [pc, #44]	; (26fcc <_UsageFault+0x9c>)
   26f9e:	f7db fb29 	bl	25f4 <printk>
   26fa2:	e7dc      	b.n	26f5e <_UsageFault+0x2e>
		PR_EXC("  Illegal load of EXC_RETURN into PC\n");
   26fa4:	480a      	ldr	r0, [pc, #40]	; (26fd0 <_UsageFault+0xa0>)
   26fa6:	f7db fb25 	bl	25f4 <printk>
   26faa:	e7dd      	b.n	26f68 <_UsageFault+0x38>
		PR_EXC("  Illegal use of the EPSR\n");
   26fac:	4809      	ldr	r0, [pc, #36]	; (26fd4 <_UsageFault+0xa4>)
   26fae:	f7db fb21 	bl	25f4 <printk>
   26fb2:	e7de      	b.n	26f72 <_UsageFault+0x42>
		PR_EXC("  Attempt to execute undefined instruction\n");
   26fb4:	4808      	ldr	r0, [pc, #32]	; (26fd8 <_UsageFault+0xa8>)
   26fb6:	f7db fb1d 	bl	25f4 <printk>
   26fba:	e7df      	b.n	26f7c <_UsageFault+0x4c>
   26fbc:	0002ee6c 	.word	0x0002ee6c
   26fc0:	e000ed00 	.word	0xe000ed00
   26fc4:	0002ee88 	.word	0x0002ee88
   26fc8:	0002ee9c 	.word	0x0002ee9c
   26fcc:	0002eeb8 	.word	0x0002eeb8
   26fd0:	0002eed8 	.word	0x0002eed8
   26fd4:	0002ef00 	.word	0x0002ef00
   26fd8:	0002ef1c 	.word	0x0002ef1c

00026fdc <_HardFault>:
{
   26fdc:	b510      	push	{r4, lr}
   26fde:	4604      	mov	r4, r0
	PR_EXC("***** HARD FAULT *****\n");
   26fe0:	4816      	ldr	r0, [pc, #88]	; (2703c <_HardFault+0x60>)
   26fe2:	f7db fb07 	bl	25f4 <printk>
	if (SCB->HFSR & SCB_HFSR_VECTTBL_Msk) {
   26fe6:	4b16      	ldr	r3, [pc, #88]	; (27040 <_HardFault+0x64>)
   26fe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26fea:	f013 0f02 	tst.w	r3, #2
   26fee:	d105      	bne.n	26ffc <_HardFault+0x20>
	} else if (SCB->HFSR & SCB_HFSR_FORCED_Msk) {
   26ff0:	4b13      	ldr	r3, [pc, #76]	; (27040 <_HardFault+0x64>)
   26ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   26ff4:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
   26ff8:	d104      	bne.n	27004 <_HardFault+0x28>
   26ffa:	bd10      	pop	{r4, pc}
		PR_EXC("  Bus fault on vector table read\n");
   26ffc:	4811      	ldr	r0, [pc, #68]	; (27044 <_HardFault+0x68>)
   26ffe:	f7db faf9 	bl	25f4 <printk>
   27002:	bd10      	pop	{r4, pc}
		PR_EXC("  Fault escalation (see below)\n");
   27004:	4810      	ldr	r0, [pc, #64]	; (27048 <_HardFault+0x6c>)
   27006:	f7db faf5 	bl	25f4 <printk>
		if (SCB_MMFSR) {
   2700a:	4b10      	ldr	r3, [pc, #64]	; (2704c <_HardFault+0x70>)
   2700c:	781b      	ldrb	r3, [r3, #0]
   2700e:	b95b      	cbnz	r3, 27028 <_HardFault+0x4c>
		} else if (SCB_BFSR) {
   27010:	4b0f      	ldr	r3, [pc, #60]	; (27050 <_HardFault+0x74>)
   27012:	781b      	ldrb	r3, [r3, #0]
   27014:	b96b      	cbnz	r3, 27032 <_HardFault+0x56>
		} else if (SCB_UFSR) {
   27016:	4b0f      	ldr	r3, [pc, #60]	; (27054 <_HardFault+0x78>)
   27018:	881b      	ldrh	r3, [r3, #0]
   2701a:	b29b      	uxth	r3, r3
   2701c:	2b00      	cmp	r3, #0
   2701e:	d0ec      	beq.n	26ffa <_HardFault+0x1e>
			_UsageFault(esf);
   27020:	4620      	mov	r0, r4
   27022:	f7ff ff85 	bl	26f30 <_UsageFault>
}
   27026:	e7e8      	b.n	26ffa <_HardFault+0x1e>
			_MpuFault(esf, 1);
   27028:	2101      	movs	r1, #1
   2702a:	4620      	mov	r0, r4
   2702c:	f7ff fed0 	bl	26dd0 <_MpuFault>
   27030:	bd10      	pop	{r4, pc}
			_BusFault(esf, 1);
   27032:	2101      	movs	r1, #1
   27034:	4620      	mov	r0, r4
   27036:	f7ff ff19 	bl	26e6c <_BusFault>
   2703a:	bd10      	pop	{r4, pc}
   2703c:	0002ed38 	.word	0x0002ed38
   27040:	e000ed00 	.word	0xe000ed00
   27044:	0002ed50 	.word	0x0002ed50
   27048:	0002ed74 	.word	0x0002ed74
   2704c:	e000ed28 	.word	0xe000ed28
   27050:	e000ed29 	.word	0xe000ed29
   27054:	e000ed2c 	.word	0xe000ed2c

00027058 <_FaultDump>:
 *   Address: 0xff001234
 *
 * @return N/A
 */
static void _FaultDump(const NANO_ESF *esf, int fault)
{
   27058:	b508      	push	{r3, lr}
	switch (fault) {
   2705a:	1ecb      	subs	r3, r1, #3
   2705c:	2b09      	cmp	r3, #9
   2705e:	d817      	bhi.n	27090 <_FaultDump+0x38>
   27060:	e8df f003 	tbb	[pc, r3]
   27064:	100c0805 	.word	0x100c0805
   27068:	16161616 	.word	0x16161616
   2706c:	1316      	.short	0x1316
	case 3:
		_HardFault(esf);
   2706e:	f7ff ffb5 	bl	26fdc <_HardFault>
		break;
   27072:	bd08      	pop	{r3, pc}
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	case 4:
		_MpuFault(esf, 0);
   27074:	2100      	movs	r1, #0
   27076:	f7ff feab 	bl	26dd0 <_MpuFault>
		break;
   2707a:	bd08      	pop	{r3, pc}
	case 5:
		_BusFault(esf, 0);
   2707c:	2100      	movs	r1, #0
   2707e:	f7ff fef5 	bl	26e6c <_BusFault>
		break;
   27082:	bd08      	pop	{r3, pc}
	case 6:
		_UsageFault(esf);
   27084:	f7ff ff54 	bl	26f30 <_UsageFault>
		break;
   27088:	bd08      	pop	{r3, pc}
	case 12:
		_DebugMonitor(esf);
   2708a:	f7ff fe7b 	bl	26d84 <_DebugMonitor>
		break;
   2708e:	bd08      	pop	{r3, pc}
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	default:
		_ReservedException(esf, fault);
   27090:	f7ff fe80 	bl	26d94 <_ReservedException>
   27094:	bd08      	pop	{r3, pc}
	...

00027098 <_Fault>:
 *
 * @param esf ESF on the stack, either MSP or PSP depending at what processor
 *            state the exception was taken.
 */
void _Fault(const NANO_ESF *esf)
{
   27098:	b510      	push	{r4, lr}
   2709a:	4604      	mov	r4, r0
	int fault = SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk;
   2709c:	4b05      	ldr	r3, [pc, #20]	; (270b4 <_Fault+0x1c>)
   2709e:	6859      	ldr	r1, [r3, #4]

	FAULT_DUMP(esf, fault);
   270a0:	f3c1 0108 	ubfx	r1, r1, #0, #9
   270a4:	f7ff ffd8 	bl	27058 <_FaultDump>

	_SysFatalErrorHandler(_NANO_ERR_HW_EXCEPTION, esf);
   270a8:	4621      	mov	r1, r4
   270aa:	2000      	movs	r0, #0
   270ac:	f000 f8e0 	bl	27270 <_SysFatalErrorHandler>
   270b0:	bd10      	pop	{r4, pc}
   270b2:	bf00      	nop
   270b4:	e000ed00 	.word	0xe000ed00

000270b8 <_FaultInit>:
 */
void _FaultInit(void)
{
#if defined(CONFIG_ARMV6_M)
#elif defined(CONFIG_ARMV7_M)
	SCB->CCR |= SCB_CCR_DIV_0_TRP_Msk;
   270b8:	4a02      	ldr	r2, [pc, #8]	; (270c4 <_FaultInit+0xc>)
   270ba:	6953      	ldr	r3, [r2, #20]
   270bc:	f043 0310 	orr.w	r3, r3, #16
   270c0:	6153      	str	r3, [r2, #20]
   270c2:	4770      	bx	lr
   270c4:	e000ed00 	.word	0xe000ed00

000270c8 <_arch_irq_enable>:
 *
 * @return N/A
 */
void _arch_irq_enable(unsigned int irq)
{
	NVIC_EnableIRQ((IRQn_Type)irq);
   270c8:	b243      	sxtb	r3, r0
  NVIC->ISER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   270ca:	095b      	lsrs	r3, r3, #5
   270cc:	f000 001f 	and.w	r0, r0, #31
   270d0:	2201      	movs	r2, #1
   270d2:	fa02 f000 	lsl.w	r0, r2, r0
   270d6:	4a02      	ldr	r2, [pc, #8]	; (270e0 <_arch_irq_enable+0x18>)
   270d8:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   270dc:	4770      	bx	lr
   270de:	bf00      	nop
   270e0:	e000e100 	.word	0xe000e100

000270e4 <_arch_irq_disable>:
 *
 * @return N/A
 */
void _arch_irq_disable(unsigned int irq)
{
	NVIC_DisableIRQ((IRQn_Type)irq);
   270e4:	b243      	sxtb	r3, r0
  NVIC->ICER[(((uint32_t)(int32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)(int32_t)IRQn) & 0x1FUL));
   270e6:	095b      	lsrs	r3, r3, #5
   270e8:	f000 001f 	and.w	r0, r0, #31
   270ec:	2201      	movs	r2, #1
   270ee:	fa02 f000 	lsl.w	r0, r2, r0
   270f2:	3320      	adds	r3, #32
   270f4:	4a01      	ldr	r2, [pc, #4]	; (270fc <_arch_irq_disable+0x18>)
   270f6:	f842 0023 	str.w	r0, [r2, r3, lsl #2]
   270fa:	4770      	bx	lr
   270fc:	e000e100 	.word	0xe000e100

00027100 <_arch_irq_is_enabled>:
 * @param irq IRQ line
 * @return interrupt enable state, true or false
 */
int _arch_irq_is_enabled(unsigned int irq)
{
	return NVIC->ISER[REG_FROM_IRQ(irq)] & (1 << BIT_FROM_IRQ(irq));
   27100:	0942      	lsrs	r2, r0, #5
   27102:	4b05      	ldr	r3, [pc, #20]	; (27118 <_arch_irq_is_enabled+0x18>)
   27104:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
   27108:	f000 001f 	and.w	r0, r0, #31
   2710c:	2301      	movs	r3, #1
   2710e:	fa03 f000 	lsl.w	r0, r3, r0
}
   27112:	4010      	ands	r0, r2
   27114:	4770      	bx	lr
   27116:	bf00      	nop
   27118:	e000e100 	.word	0xe000e100

0002711c <_irq_priority_set>:
	} else {
		prio += _IRQ_PRIO_OFFSET;
	}
#else
	ARG_UNUSED(flags);
	prio += _IRQ_PRIO_OFFSET;
   2711c:	3101      	adds	r1, #1
	 */
	__ASSERT(prio <= ((1 << CONFIG_NUM_IRQ_PRIO_BITS) - 1),
		 "invalid priority %d! values must be less than %d\n",
		 prio - _IRQ_PRIO_OFFSET,
		 (1 << CONFIG_NUM_IRQ_PRIO_BITS) - (_IRQ_PRIO_OFFSET));
	NVIC_SetPriority((IRQn_Type)irq, prio);
   2711e:	b243      	sxtb	r3, r0
  if ((int32_t)(IRQn) < 0)
   27120:	2b00      	cmp	r3, #0
   27122:	db08      	blt.n	27136 <_irq_priority_set+0x1a>
    NVIC->IP[((uint32_t)(int32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27124:	0149      	lsls	r1, r1, #5
   27126:	b2c9      	uxtb	r1, r1
   27128:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   2712c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   27130:	f883 1300 	strb.w	r1, [r3, #768]	; 0x300
   27134:	4770      	bx	lr
    SCB->SHP[(((uint32_t)(int32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
   27136:	f000 000f 	and.w	r0, r0, #15
   2713a:	0149      	lsls	r1, r1, #5
   2713c:	b2c9      	uxtb	r1, r1
   2713e:	4b01      	ldr	r3, [pc, #4]	; (27144 <_irq_priority_set+0x28>)
   27140:	5419      	strb	r1, [r3, r0]
   27142:	4770      	bx	lr
   27144:	e000ed14 	.word	0xe000ed14

00027148 <_irq_spurious>:
 * See __reserved().
 *
 * @return N/A
 */
void _irq_spurious(void *unused)
{
   27148:	b508      	push	{r3, lr}
	ARG_UNUSED(unused);
	__reserved();
   2714a:	f000 f847 	bl	271dc <__bus_fault>
   2714e:	bd08      	pop	{r3, pc}

00027150 <_arch_isr_direct_pm>:
 * See https://jira.zephyrproject.org/browse/ZEP-1595
 */

#ifdef CONFIG_SYS_POWER_MANAGEMENT
void _arch_isr_direct_pm(void)
{
   27150:	b508      	push	{r3, lr}
#elif defined(CONFIG_ARMV7_M)
	/* Lock all interrupts. irq_lock() will on this CPU only disable those
	 * lower than BASEPRI, which is not what we want. See comments in
	 * arch/arm/core/isr_wrapper.S
	 */
	__asm__ volatile("cpsid i" : : : "memory");
   27152:	b672      	cpsid	i
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	if (_kernel.idle) {
   27154:	4b04      	ldr	r3, [pc, #16]	; (27168 <_arch_isr_direct_pm+0x18>)
   27156:	6958      	ldr	r0, [r3, #20]
   27158:	b908      	cbnz	r0, 2715e <_arch_isr_direct_pm+0xe>
	}

#if defined(CONFIG_ARMV6_M)
	irq_unlock(key);
#elif defined(CONFIG_ARMV7_M)
	__asm__ volatile("cpsie i" : : : "memory");
   2715a:	b662      	cpsie	i
   2715c:	bd08      	pop	{r3, pc}
		_kernel.idle = 0;
   2715e:	2200      	movs	r2, #0
   27160:	615a      	str	r2, [r3, #20]
		_sys_power_save_idle_exit(idle_val);
   27162:	f000 f9b5 	bl	274d0 <_sys_power_save_idle_exit>
   27166:	e7f8      	b.n	2715a <_arch_isr_direct_pm+0xa>
   27168:	20002810 	.word	0x20002810

0002716c <_new_thread>:

void _new_thread(struct k_thread *thread, k_thread_stack_t *stack,
		 size_t stackSize, k_thread_entry_t pEntry,
		 void *parameter1, void *parameter2, void *parameter3,
		 int priority, unsigned int options)
{
   2716c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   2716e:	4605      	mov	r5, r0
   27170:	460c      	mov	r4, r1
   27172:	4616      	mov	r6, r2
   27174:	461f      	mov	r7, r3
	ARG_UNUSED(pStack);
	ARG_UNUSED(stackSize);
#endif

#ifdef CONFIG_INIT_STACKS
	memset(pStack, 0xaa, stackSize);
   27176:	21aa      	movs	r1, #170	; 0xaa
   27178:	4620      	mov	r0, r4
   2717a:	f002 fc0d 	bl	29998 <memset>
	 * if it isn't.
	 */
	*((u32_t *)pStack) = STACK_SENTINEL;
#endif /* CONFIG_STACK_SENTINEL */
	/* Initialize various struct k_thread members */
	_init_thread_base(&thread->base, prio, _THREAD_PRESTART, options);
   2717e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   27180:	2204      	movs	r2, #4
   27182:	9909      	ldr	r1, [sp, #36]	; 0x24
   27184:	4628      	mov	r0, r5
   27186:	f001 ff51 	bl	2902c <_init_thread_base>

	/* static threads overwrite it afterwards with real value */
	thread->init_data = NULL;
   2718a:	2300      	movs	r3, #0
   2718c:	64eb      	str	r3, [r5, #76]	; 0x4c
	thread->fn_abort = NULL;
   2718e:	652b      	str	r3, [r5, #80]	; 0x50
#if defined(CONFIG_USERSPACE)
	thread->mem_domain_info.mem_domain = NULL;
#endif /* CONFIG_USERSPACE */

#if defined(CONFIG_THREAD_STACK_INFO)
	thread->stack_info.start = (u32_t)pStack;
   27190:	65ac      	str	r4, [r5, #88]	; 0x58
	thread->stack_info.size = (u32_t)stackSize;
   27192:	65ee      	str	r6, [r5, #92]	; 0x5c
	struct __esf *pInitCtx;
	_new_thread_init(thread, pStackMem, stackSize, priority, options);

	/* carve the thread entry struct from the "base" of the stack */

	pInitCtx = (struct __esf *)(STACK_ROUND_DOWN(stackEnd -
   27194:	f1a6 0120 	sub.w	r1, r6, #32
   27198:	4421      	add	r1, r4
   2719a:	f021 0107 	bic.w	r1, r1, #7
						     sizeof(struct __esf)));

	pInitCtx->pc = ((u32_t)_thread_entry) & 0xfffffffe;
   2719e:	4a08      	ldr	r2, [pc, #32]	; (271c0 <_new_thread+0x54>)
   271a0:	f022 0201 	bic.w	r2, r2, #1
   271a4:	618a      	str	r2, [r1, #24]
	pInitCtx->a1 = (u32_t)pEntry;
   271a6:	600f      	str	r7, [r1, #0]
	pInitCtx->a2 = (u32_t)parameter1;
   271a8:	9a06      	ldr	r2, [sp, #24]
   271aa:	604a      	str	r2, [r1, #4]
	pInitCtx->a3 = (u32_t)parameter2;
   271ac:	9a07      	ldr	r2, [sp, #28]
   271ae:	608a      	str	r2, [r1, #8]
	pInitCtx->a4 = (u32_t)parameter3;
   271b0:	9a08      	ldr	r2, [sp, #32]
   271b2:	60ca      	str	r2, [r1, #12]
	pInitCtx->xpsr =
   271b4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
   271b8:	61ca      	str	r2, [r1, #28]
	 * and the corresponding parameters.
	 */
	thread->entry = (struct __thread_entry *)(pInitCtx);
#endif

	thread->callee_saved.psp = (u32_t)pInitCtx;
   271ba:	64a9      	str	r1, [r5, #72]	; 0x48
	thread->arch.basepri = 0;
   271bc:	662b      	str	r3, [r5, #96]	; 0x60
   271be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   271c0:	00028d15 	.word	0x00028d15

000271c4 <_CpuIdleInit>:
 *
 * void _CpuIdleInit (void);
 */

SECTION_FUNC(TEXT, _CpuIdleInit)
	ldr r1, =_SCB_SCR
   271c4:	4901      	ldr	r1, [pc, #4]	; (271cc <_CpuIdleInit+0x8>)
	movs.n r2, #_SCR_INIT_BITS
   271c6:	2210      	movs	r2, #16
	str r2, [r1]
   271c8:	600a      	str	r2, [r1, #0]
	bx lr
   271ca:	4770      	bx	lr
	ldr r1, =_SCB_SCR
   271cc:	e000ed10 	.word	0xe000ed10

000271d0 <k_cpu_idle>:

#if defined(CONFIG_ARMV6_M)
	cpsie i
#elif defined(CONFIG_ARMV7_M)
	/* clear BASEPRI so wfi is awakened by incoming interrupts */
	eors.n r0, r0
   271d0:	4040      	eors	r0, r0
	msr BASEPRI, r0
   271d2:	f380 8811 	msr	BASEPRI, r0
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	wfi
   271d6:	bf30      	wfi

	bx lr
   271d8:	4770      	bx	lr
   271da:	bf00      	nop

000271dc <__bus_fault>:
	mrs r0, MSP
_stack_frame_endif:

#elif defined(CONFIG_ARMV7_M)
	/* force unlock interrupts */
	eors.n r0, r0
   271dc:	4040      	eors	r0, r0
	msr BASEPRI, r0
   271de:	f380 8811 	msr	BASEPRI, r0

	/* this checks to see if we are in a nested exception */
	ldr ip, =_SCS_ICSR
   271e2:	f8df c01c 	ldr.w	ip, [pc, #28]	; 27200 <__bus_fault+0x24>
	ldr ip, [ip]
   271e6:	f8dc c000 	ldr.w	ip, [ip]
	ands.w ip, #_SCS_ICSR_RETTOBASE
   271ea:	f41c 6c00 	ands.w	ip, ip, #2048	; 0x800

	ite eq			/* is the RETTOBASE bit zero ? */
   271ee:	bf0c      	ite	eq
		mrseq r0, MSP	/* if so, we're not returning to thread mode,
   271f0:	f3ef 8008 	mrseq	r0, MSP
				 * thus this is a nested exception: the stack
				 * frame is on the MSP */
		mrsne r0, PSP	/* if not, we are returning to thread mode, thus
   271f4:	f3ef 8009 	mrsne	r0, PSP
				 * frame is on the PSP */
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	push {lr}
   271f8:	b500      	push	{lr}
	bl _Fault
   271fa:	f7ff ff4d 	bl	27098 <_Fault>

	pop {pc}
   271fe:	bd00      	pop	{pc}
	ldr ip, =_SCS_ICSR
   27200:	e000ed04 	.word	0xe000ed04

00027204 <_NanoFatalErrorHandler>:
 * @param reason the reason that the handler was called
 * @param pEsf pointer to the exception stack frame
 */
void _NanoFatalErrorHandler(unsigned int reason,
					  const NANO_ESF *pEsf)
{
   27204:	b538      	push	{r3, r4, r5, lr}
   27206:	4604      	mov	r4, r0
   27208:	460d      	mov	r5, r1
	switch (reason) {
   2720a:	2804      	cmp	r0, #4
   2720c:	d017      	beq.n	2723e <_NanoFatalErrorHandler+0x3a>
   2720e:	2805      	cmp	r0, #5
   27210:	d019      	beq.n	27246 <_NanoFatalErrorHandler+0x42>
   27212:	2803      	cmp	r0, #3
   27214:	d004      	beq.n	27220 <_NanoFatalErrorHandler+0x1c>
	case _NANO_ERR_KERNEL_PANIC:
		printk("***** Kernel Panic! *****\n");
		break;

	default:
		printk("**** Unknown Fatal Error %d! ****\n", reason);
   27216:	4601      	mov	r1, r0
   27218:	480d      	ldr	r0, [pc, #52]	; (27250 <_NanoFatalErrorHandler+0x4c>)
   2721a:	f7db f9eb 	bl	25f4 <printk>
		break;
   2721e:	e002      	b.n	27226 <_NanoFatalErrorHandler+0x22>
		printk("**** Kernel Allocation Failure! ****\n");
   27220:	480c      	ldr	r0, [pc, #48]	; (27254 <_NanoFatalErrorHandler+0x50>)
   27222:	f7db f9e7 	bl	25f4 <printk>
   27226:	f001 fa2b 	bl	28680 <_impl_k_current_get>
	}
	printk("Current thread ID = %p\n"
   2722a:	69aa      	ldr	r2, [r5, #24]
   2722c:	4601      	mov	r1, r0
   2722e:	480a      	ldr	r0, [pc, #40]	; (27258 <_NanoFatalErrorHandler+0x54>)
   27230:	f7db f9e0 	bl	25f4 <printk>
	 * to respond to the error.  The decisions as to what responses are
	 * appropriate to the various errors are something the customer must
	 * decide.
	 */

	_SysFatalErrorHandler(reason, pEsf);
   27234:	4629      	mov	r1, r5
   27236:	4620      	mov	r0, r4
   27238:	f000 f81a 	bl	27270 <_SysFatalErrorHandler>
   2723c:	bd38      	pop	{r3, r4, r5, pc}
		printk("***** Kernel OOPS! *****\n");
   2723e:	4807      	ldr	r0, [pc, #28]	; (2725c <_NanoFatalErrorHandler+0x58>)
   27240:	f7db f9d8 	bl	25f4 <printk>
		break;
   27244:	e7ef      	b.n	27226 <_NanoFatalErrorHandler+0x22>
		printk("***** Kernel Panic! *****\n");
   27246:	4806      	ldr	r0, [pc, #24]	; (27260 <_NanoFatalErrorHandler+0x5c>)
   27248:	f7db f9d4 	bl	25f4 <printk>
		break;
   2724c:	e7eb      	b.n	27226 <_NanoFatalErrorHandler+0x22>
   2724e:	bf00      	nop
   27250:	0002efa8 	.word	0x0002efa8
   27254:	0002ef48 	.word	0x0002ef48
   27258:	0002efcc 	.word	0x0002efcc
   2725c:	0002ef70 	.word	0x0002ef70
   27260:	0002ef8c 	.word	0x0002ef8c

00027264 <_do_kernel_oops>:
}

void _do_kernel_oops(const NANO_ESF *esf)
{
   27264:	b508      	push	{r3, lr}
	_NanoFatalErrorHandler(esf->r0, esf);
   27266:	4601      	mov	r1, r0
   27268:	6800      	ldr	r0, [r0, #0]
   2726a:	f7ff ffcb 	bl	27204 <_NanoFatalErrorHandler>
   2726e:	bd08      	pop	{r3, pc}

00027270 <_SysFatalErrorHandler>:
 *
 * @return N/A
 */
void __weak _SysFatalErrorHandler(unsigned int reason,
					 const NANO_ESF *pEsf)
{
   27270:	b510      	push	{r4, lr}
#ifdef CONFIG_STACK_SENTINEL
	if (reason == _NANO_ERR_STACK_CHK_FAIL) {
		goto hang_system;
	}
#endif
	if (reason == _NANO_ERR_KERNEL_PANIC) {
   27272:	2805      	cmp	r0, #5
   27274:	d00c      	beq.n	27290 <_SysFatalErrorHandler+0x20>
		goto hang_system;
	}
	if (k_is_in_isr() || _is_thread_essential()) {
   27276:	f001 fd31 	bl	28cdc <k_is_in_isr>
   2727a:	b910      	cbnz	r0, 27282 <_SysFatalErrorHandler+0x12>
   2727c:	f001 fd42 	bl	28d04 <_is_thread_essential>
   27280:	b158      	cbz	r0, 2729a <_SysFatalErrorHandler+0x2a>
		printk("Fatal fault in %s! Spinning...\n",
		       k_is_in_isr() ? "ISR" : "essential thread");
   27282:	f001 fd2b 	bl	28cdc <k_is_in_isr>
		printk("Fatal fault in %s! Spinning...\n",
   27286:	b130      	cbz	r0, 27296 <_SysFatalErrorHandler+0x26>
   27288:	4908      	ldr	r1, [pc, #32]	; (272ac <_SysFatalErrorHandler+0x3c>)
   2728a:	4809      	ldr	r0, [pc, #36]	; (272b0 <_SysFatalErrorHandler+0x40>)
   2728c:	f7db f9b2 	bl	25f4 <printk>
#else
	ARG_UNUSED(reason);
#endif

	for (;;) {
		k_cpu_idle();
   27290:	f7ff ff9e 	bl	271d0 <k_cpu_idle>
   27294:	e7fc      	b.n	27290 <_SysFatalErrorHandler+0x20>
		printk("Fatal fault in %s! Spinning...\n",
   27296:	4907      	ldr	r1, [pc, #28]	; (272b4 <_SysFatalErrorHandler+0x44>)
   27298:	e7f7      	b.n	2728a <_SysFatalErrorHandler+0x1a>
	printk("Fatal fault in thread %p! Aborting.\n", _current);
   2729a:	4c07      	ldr	r4, [pc, #28]	; (272b8 <_SysFatalErrorHandler+0x48>)
   2729c:	68a1      	ldr	r1, [r4, #8]
   2729e:	4807      	ldr	r0, [pc, #28]	; (272bc <_SysFatalErrorHandler+0x4c>)
   272a0:	f7db f9a8 	bl	25f4 <printk>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   272a4:	68a0      	ldr	r0, [r4, #8]
   272a6:	f000 f80b 	bl	272c0 <_impl_k_thread_abort>
	return;
   272aa:	bd10      	pop	{r4, pc}
   272ac:	0002e418 	.word	0x0002e418
   272b0:	0002f01c 	.word	0x0002f01c
   272b4:	0002f008 	.word	0x0002f008
   272b8:	20002810 	.word	0x20002810
   272bc:	0002f03c 	.word	0x0002f03c

000272c0 <_impl_k_thread_abort>:
#include <misc/__assert.h>

extern void _k_thread_single_abort(struct k_thread *thread);

void _impl_k_thread_abort(k_tid_t thread)
{
   272c0:	b538      	push	{r3, r4, r5, lr}
   272c2:	4605      	mov	r5, r0
	__asm__ volatile(
   272c4:	f04f 0320 	mov.w	r3, #32
   272c8:	f3ef 8411 	mrs	r4, BASEPRI
   272cc:	f383 8811 	msr	BASEPRI, r3
	key = irq_lock();

	__ASSERT(!(thread->base.user_options & K_ESSENTIAL),
		 "essential thread aborted");

	_k_thread_single_abort(thread);
   272d0:	f001 fe28 	bl	28f24 <_k_thread_single_abort>
	_thread_monitor_exit(thread);

	if (_current == thread) {
   272d4:	4b0b      	ldr	r3, [pc, #44]	; (27304 <_impl_k_thread_abort+0x44>)
   272d6:	689b      	ldr	r3, [r3, #8]
   272d8:	429d      	cmp	r5, r3
   272da:	d003      	beq.n	272e4 <_impl_k_thread_abort+0x24>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
		}
	}

	/* The abort handler might have altered the ready queue. */
	_reschedule_threads(key);
   272dc:	4620      	mov	r0, r4
   272de:	f001 fa03 	bl	286e8 <_reschedule_threads>
   272e2:	bd38      	pop	{r3, r4, r5, pc}
		if ((SCB->ICSR & SCB_ICSR_VECTACTIVE_Msk) == 0) {
   272e4:	4b08      	ldr	r3, [pc, #32]	; (27308 <_impl_k_thread_abort+0x48>)
   272e6:	685b      	ldr	r3, [r3, #4]
   272e8:	f3c3 0308 	ubfx	r3, r3, #0, #9
   272ec:	b12b      	cbz	r3, 272fa <_impl_k_thread_abort+0x3a>
			SCB->ICSR |= SCB_ICSR_PENDSVSET_Msk;
   272ee:	4a06      	ldr	r2, [pc, #24]	; (27308 <_impl_k_thread_abort+0x48>)
   272f0:	6853      	ldr	r3, [r2, #4]
   272f2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
   272f6:	6053      	str	r3, [r2, #4]
   272f8:	e7f0      	b.n	272dc <_impl_k_thread_abort+0x1c>

#ifdef CONFIG_STACK_SENTINEL
	_check_stack_sentinel();
#endif
#ifdef CONFIG_TIMESLICING
	_update_time_slice_before_swap();
   272fa:	f001 f9ef 	bl	286dc <_update_time_slice_before_swap>
#endif

	return __swap(key);
   272fe:	4620      	mov	r0, r4
   27300:	f7ff fd32 	bl	26d68 <__swap>
   27304:	20002810 	.word	0x20002810
   27308:	e000ed00 	.word	0xe000ed00

0002730c <_isr_wrapper>:
 *
 * @return N/A
 */
SECTION_FUNC(TEXT, _isr_wrapper)

	push {lr}		/* lr is now the first item on the stack */
   2730c:	b500      	push	{lr}
	 * for the next timer deadline is not interrupted.  For non-tickless idle,
	 * this ensures that the clearing of the kernel idle state is not
	 * interrupted.  In each case, _sys_power_save_idle_exit is called with
	 * interrupts disabled.
	 */
	cpsid i  /* PRIMASK = 1 */
   2730e:	b672      	cpsid	i

	/* is this a wakeup from idle ? */
	ldr r2, =_kernel
   27310:	4a0b      	ldr	r2, [pc, #44]	; (27340 <_isr_wrapper+0x34>)
	/* requested idle duration, in ticks */
	ldr r0, [r2, #_kernel_offset_to_idle]
   27312:	6950      	ldr	r0, [r2, #20]
	cmp r0, #0
   27314:	2800      	cmp	r0, #0
	str r1, [r2, #_kernel_offset_to_idle]
	blx _sys_power_save_idle_exit
_idle_state_cleared:

#elif defined(CONFIG_ARMV7_M)
	ittt ne
   27316:	bf1e      	ittt	ne
	movne	r1, #0
   27318:	2100      	movne	r1, #0
		/* clear kernel idle state */
		strne	r1, [r2, #_kernel_offset_to_idle]
   2731a:	6151      	strne	r1, [r2, #20]
		blxne	_sys_power_save_idle_exit
   2731c:	f000 f8d8 	blne	274d0 <_sys_power_save_idle_exit>
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	cpsie i		/* re-enable interrupts (PRIMASK = 0) */
   27320:	b662      	cpsie	i
#endif

	mrs r0, IPSR	/* get exception number */
   27322:	f3ef 8005 	mrs	r0, IPSR
#if defined(CONFIG_ARMV6_M)
	ldr r1, =16
	subs r0, r1	/* get IRQ number */
	lsls r0, #3	/* table is 8-byte wide */
#elif defined(CONFIG_ARMV7_M)
	sub r0, r0, #16	/* get IRQ number */
   27326:	f1a0 0010 	sub.w	r0, r0, #16
	lsl r0, r0, #3	/* table is 8-byte wide */
   2732a:	ea4f 00c0 	mov.w	r0, r0, lsl #3
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */
	ldr r1, =_sw_isr_table
   2732e:	4905      	ldr	r1, [pc, #20]	; (27344 <_isr_wrapper+0x38>)
	add r1, r1, r0	/* table entry: ISRs must have their MSB set to stay
   27330:	4401      	add	r1, r0
			 * in thumb mode */

	ldm r1!,{r0,r3}	/* arg in r0, ISR in r3 */
   27332:	c909      	ldmia	r1!, {r0, r3}
#else
	pop {lr}
#endif
	ldm sp!,{r0-r3} /* Restore r0 to r4 regs */
#endif
	blx r3		/* call ISR */
   27334:	4798      	blx	r3

#if defined(CONFIG_ARMV6_M)
	pop {r3}
	mov lr, r3
#elif defined(CONFIG_ARMV7_M)
	pop {lr}
   27336:	f85d eb04 	ldr.w	lr, [sp], #4
#else
#error Unknown ARM architecture
#endif /* CONFIG_ARMV6_M */

	/* exception return is done in _IntExit() */
	b _IntExit
   2733a:	f7ff bca5 	b.w	26c88 <_ExcExit>
   2733e:	0000      	.short	0x0000
	ldr r2, =_kernel
   27340:	20002810 	.word	0x20002810
	ldr r1, =_sw_isr_table
   27344:	000000dc 	.word	0x000000dc

00027348 <__reset>:

    /* lock interrupts: will get unlocked when switch to main task */
#if defined(CONFIG_ARMV6_M)
    cpsid i
#elif defined(CONFIG_ARMV7_M)
    movs.n r0, #_EXC_IRQ_DEFAULT_PRIO
   27348:	2020      	movs	r0, #32
    msr BASEPRI, r0
   2734a:	f380 8811 	msr	BASEPRI, r0
    /* board-specific watchdog initialization is necessary */
    bl _WdogInit
#endif

#ifdef CONFIG_INIT_STACKS
    ldr r0, =_interrupt_stack
   2734e:	4809      	ldr	r0, [pc, #36]	; (27374 <__reset+0x2c>)
    ldr r1, =0xaa
   27350:	f04f 01aa 	mov.w	r1, #170	; 0xaa
    ldr r2, =CONFIG_ISR_STACK_SIZE
   27354:	f44f 6200 	mov.w	r2, #2048	; 0x800
    bl memset
   27358:	f002 fb1e 	bl	29998 <memset>

    /*
     * Set PSP and use it to boot without using MSP, so that it
     * gets set to _interrupt_stack during nanoInit().
     */
    ldr r0, =_interrupt_stack
   2735c:	4805      	ldr	r0, [pc, #20]	; (27374 <__reset+0x2c>)
    ldr r1, =CONFIG_ISR_STACK_SIZE
   2735e:	f44f 6100 	mov.w	r1, #2048	; 0x800
    adds r0, r0, r1
   27362:	1840      	adds	r0, r0, r1
    msr PSP, r0
   27364:	f380 8809 	msr	PSP, r0
    movs.n r0, #2	/* switch to using PSP (bit1 of CONTROL reg) */
   27368:	2002      	movs	r0, #2
    msr CONTROL, r0
   2736a:	f380 8814 	msr	CONTROL, r0

    b _PrepC
   2736e:	f000 b807 	b.w	27380 <_PrepC>
   27372:	0000      	.short	0x0000
    ldr r0, =_interrupt_stack
   27374:	2000aca0 	.word	0x2000aca0

00027378 <_SysNmiOnReset>:
_ASM_FILE_PROLOGUE

GTEXT(_SysNmiOnReset)

SECTION_FUNC(TEXT, _SysNmiOnReset)
    wfi
   27378:	bf30      	wfi
    b _SysNmiOnReset
   2737a:	f7ff bffd 	b.w	27378 <_SysNmiOnReset>
   2737e:	bf00      	nop

00027380 <_PrepC>:

#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	extern u64_t __start_time_stamp;
#endif
void _PrepC(void)
{
   27380:	b508      	push	{r3, lr}
	SCB->VTOR = VECTOR_ADDRESS & SCB_VTOR_TBLOFF_Msk;
   27382:	4a07      	ldr	r2, [pc, #28]	; (273a0 <_PrepC+0x20>)
   27384:	4b07      	ldr	r3, [pc, #28]	; (273a4 <_PrepC+0x24>)
   27386:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   2738a:	6093      	str	r3, [r2, #8]
  __ASM volatile ("dsb 0xF":::"memory");
   2738c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   27390:	f3bf 8f6f 	isb	sy
	relocate_vector_table();
	enable_floating_point();
	_bss_zero();
   27394:	f000 f9d6 	bl	27744 <_bss_zero>
	_data_copy();
   27398:	f000 f9e0 	bl	2775c <_data_copy>
#ifdef CONFIG_BOOT_TIME_MEASUREMENT
	__start_time_stamp = 0;
#endif
	_Cstart();
   2739c:	f000 fa00 	bl	277a0 <_Cstart>
   273a0:	e000ed00 	.word	0xe000ed00
   273a4:	00000000 	.word	0x00000000

000273a8 <__nmi>:
 *
 * @return N/A
 */

void __nmi(void)
{
   273a8:	b508      	push	{r3, lr}
	handler();
   273aa:	f7ff ffe5 	bl	27378 <_SysNmiOnReset>
	_ExcExit();
   273ae:	f7ff fc6b 	bl	26c88 <_ExcExit>
   273b2:	bd08      	pop	{r3, pc}

000273b4 <_region_init>:

static void _region_init(u32_t index, u32_t region_addr,
			 u32_t region_attr)
{
	/* Select the region you want to access */
	ARM_MPU_DEV->rnr = index;
   273b4:	4b05      	ldr	r3, [pc, #20]	; (273cc <_region_init+0x18>)
   273b6:	6098      	str	r0, [r3, #8]
	/* Configure the region */
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   273b8:	f021 011f 	bic.w	r1, r1, #31
				| REGION_VALID | index;
   273bc:	4308      	orrs	r0, r1
   273be:	f040 0010 	orr.w	r0, r0, #16
	ARM_MPU_DEV->rbar = (region_addr & REGION_BASE_ADDR_MASK)
   273c2:	60d8      	str	r0, [r3, #12]
	ARM_MPU_DEV->rasr = region_attr | REGION_ENABLE;
   273c4:	f042 0201 	orr.w	r2, r2, #1
   273c8:	611a      	str	r2, [r3, #16]
   273ca:	4770      	bx	lr
   273cc:	e000ed90 	.word	0xe000ed90

000273d0 <_arm_mpu_config>:
static void _arm_mpu_config(void)
{
	u32_t r_index;

	/* ARM MPU supports up to 16 Regions */
	if (mpu_config.num_regions > _get_num_regions()) {
   273d0:	4b14      	ldr	r3, [pc, #80]	; (27424 <_arm_mpu_config+0x54>)
   273d2:	681a      	ldr	r2, [r3, #0]
	u32_t type = ARM_MPU_DEV->type;
   273d4:	4b14      	ldr	r3, [pc, #80]	; (27428 <_arm_mpu_config+0x58>)
   273d6:	681b      	ldr	r3, [r3, #0]
	if (mpu_config.num_regions > _get_num_regions()) {
   273d8:	f3c3 2307 	ubfx	r3, r3, #8, #8
   273dc:	429a      	cmp	r2, r3
   273de:	d81f      	bhi.n	27420 <_arm_mpu_config+0x50>
{
   273e0:	b510      	push	{r4, lr}
		return;
	}

	/* Disable MPU */
	ARM_MPU_DEV->ctrl = 0;
   273e2:	2400      	movs	r4, #0
   273e4:	4b10      	ldr	r3, [pc, #64]	; (27428 <_arm_mpu_config+0x58>)
   273e6:	605c      	str	r4, [r3, #4]

	/* Configure regions */
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   273e8:	e00b      	b.n	27402 <_arm_mpu_config+0x32>
		_region_init(r_index,
			     mpu_config.mpu_regions[r_index].base,
   273ea:	4b0e      	ldr	r3, [pc, #56]	; (27424 <_arm_mpu_config+0x54>)
   273ec:	6859      	ldr	r1, [r3, #4]
   273ee:	eb04 0244 	add.w	r2, r4, r4, lsl #1
   273f2:	0093      	lsls	r3, r2, #2
   273f4:	18ca      	adds	r2, r1, r3
		_region_init(r_index,
   273f6:	6892      	ldr	r2, [r2, #8]
   273f8:	58c9      	ldr	r1, [r1, r3]
   273fa:	4620      	mov	r0, r4
   273fc:	f7ff ffda 	bl	273b4 <_region_init>
	for (r_index = 0; r_index < mpu_config.num_regions; r_index++) {
   27400:	3401      	adds	r4, #1
   27402:	4b08      	ldr	r3, [pc, #32]	; (27424 <_arm_mpu_config+0x54>)
   27404:	681b      	ldr	r3, [r3, #0]
   27406:	429c      	cmp	r4, r3
   27408:	d3ef      	bcc.n	273ea <_arm_mpu_config+0x1a>
			     mpu_config.mpu_regions[r_index].attr);
	}

	/* Enable MPU */
	ARM_MPU_DEV->ctrl = ARM_MPU_ENABLE | ARM_MPU_PRIVDEFENA;
   2740a:	2205      	movs	r2, #5
   2740c:	4b06      	ldr	r3, [pc, #24]	; (27428 <_arm_mpu_config+0x58>)
   2740e:	605a      	str	r2, [r3, #4]

	arm_mpu_enabled = 1;
   27410:	2201      	movs	r2, #1
   27412:	4b06      	ldr	r3, [pc, #24]	; (2742c <_arm_mpu_config+0x5c>)
   27414:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
   27416:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
   2741a:	f3bf 8f6f 	isb	sy
   2741e:	bd10      	pop	{r4, pc}
   27420:	4770      	bx	lr
   27422:	bf00      	nop
   27424:	2000c570 	.word	0x2000c570
   27428:	e000ed90 	.word	0xe000ed90
   2742c:	2000273c 	.word	0x2000273c

00027430 <arm_mpu_init>:
	__DSB();
	__ISB();
}

static int arm_mpu_init(struct device *arg)
{
   27430:	b508      	push	{r3, lr}
	ARG_UNUSED(arg);

	_arm_mpu_config();
   27432:	f7ff ffcd 	bl	273d0 <_arm_mpu_config>

	return 0;
}
   27436:	2000      	movs	r0, #0
   27438:	bd08      	pop	{r3, pc}
	...

0002743c <_sys_device_do_config_level>:
 * off and the next one begins.
 *
 * @param level init level to run.
 */
void _sys_device_do_config_level(int level)
{
   2743c:	b538      	push	{r3, r4, r5, lr}
   2743e:	4605      	mov	r5, r0
	struct device *info;

	for (info = config_levels[level]; info < config_levels[level+1];
   27440:	4b07      	ldr	r3, [pc, #28]	; (27460 <_sys_device_do_config_level+0x24>)
   27442:	f853 4020 	ldr.w	r4, [r3, r0, lsl #2]
   27446:	e004      	b.n	27452 <_sys_device_do_config_level+0x16>
								info++) {
		struct device_config *device = info->config;
   27448:	6823      	ldr	r3, [r4, #0]

		device->init(info);
   2744a:	685b      	ldr	r3, [r3, #4]
   2744c:	4620      	mov	r0, r4
   2744e:	4798      	blx	r3
								info++) {
   27450:	340c      	adds	r4, #12
	for (info = config_levels[level]; info < config_levels[level+1];
   27452:	1c6b      	adds	r3, r5, #1
   27454:	4a02      	ldr	r2, [pc, #8]	; (27460 <_sys_device_do_config_level+0x24>)
   27456:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   2745a:	429c      	cmp	r4, r3
   2745c:	d3f4      	bcc.n	27448 <_sys_device_do_config_level+0xc>
		_k_object_init(info);
	}
}
   2745e:	bd38      	pop	{r3, r4, r5, pc}
   27460:	0002f064 	.word	0x0002f064

00027464 <device_get_binding>:

struct device *device_get_binding(const char *name)
{
   27464:	b538      	push	{r3, r4, r5, lr}
   27466:	4605      	mov	r5, r0
	struct device *info;

	for (info = __device_init_start; info != __device_init_end; info++) {
   27468:	4c0a      	ldr	r4, [pc, #40]	; (27494 <device_get_binding+0x30>)
   2746a:	e000      	b.n	2746e <device_get_binding+0xa>
   2746c:	340c      	adds	r4, #12
   2746e:	4b0a      	ldr	r3, [pc, #40]	; (27498 <device_get_binding+0x34>)
   27470:	429c      	cmp	r4, r3
   27472:	d00c      	beq.n	2748e <device_get_binding+0x2a>
		if (!info->driver_api) {
   27474:	6863      	ldr	r3, [r4, #4]
   27476:	2b00      	cmp	r3, #0
   27478:	d0f8      	beq.n	2746c <device_get_binding+0x8>
			continue;
		}

		if (name == info->config->name) {
   2747a:	6823      	ldr	r3, [r4, #0]
   2747c:	6819      	ldr	r1, [r3, #0]
   2747e:	42a9      	cmp	r1, r5
   27480:	d006      	beq.n	27490 <device_get_binding+0x2c>
			return info;
		}

		if (!strcmp(name, info->config->name)) {
   27482:	4628      	mov	r0, r5
   27484:	f7d8 ffc0 	bl	408 <strcmp>
   27488:	2800      	cmp	r0, #0
   2748a:	d1ef      	bne.n	2746c <device_get_binding+0x8>
   2748c:	e000      	b.n	27490 <device_get_binding+0x2c>
			return info;
		}
	}

	return NULL;
   2748e:	2400      	movs	r4, #0
}
   27490:	4620      	mov	r0, r4
   27492:	bd38      	pop	{r3, r4, r5, pc}
   27494:	2000cb5c 	.word	0x2000cb5c
   27498:	2000cc1c 	.word	0x2000cc1c

0002749c <set_kernel_idle_time_in_ticks>:
 *
 * @return N/A
 */
static void set_kernel_idle_time_in_ticks(s32_t ticks)
{
	_kernel.idle = ticks;
   2749c:	4b01      	ldr	r3, [pc, #4]	; (274a4 <set_kernel_idle_time_in_ticks+0x8>)
   2749e:	6158      	str	r0, [r3, #20]
   274a0:	4770      	bx	lr
   274a2:	bf00      	nop
   274a4:	20002810 	.word	0x20002810

000274a8 <_sys_power_save_idle>:
#else
#define set_kernel_idle_time_in_ticks(x) do { } while (0)
#endif

static void _sys_power_save_idle(s32_t ticks)
{
   274a8:	b510      	push	{r4, lr}
   274aa:	4604      	mov	r4, r0
			k_cpu_idle();
			return;
		}
	}
#endif
	if (_must_enter_tickless_idle(ticks)) {
   274ac:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   274b0:	d003      	beq.n	274ba <_sys_power_save_idle+0x12>
   274b2:	4b06      	ldr	r3, [pc, #24]	; (274cc <_sys_power_save_idle+0x24>)
   274b4:	681b      	ldr	r3, [r3, #0]
   274b6:	4298      	cmp	r0, r3
   274b8:	db02      	blt.n	274c0 <_sys_power_save_idle+0x18>
		/*
		 * In the case of tickless kernel, timer driver should
		 * reprogram timer only if the currently programmed time
		 * duration is smaller than the idle time.
		 */
		_timer_idle_enter(ticks);
   274ba:	4620      	mov	r0, r4
   274bc:	f7da fb0e 	bl	1adc <_timer_idle_enter>
	}

	set_kernel_idle_time_in_ticks(ticks);
   274c0:	4620      	mov	r0, r4
   274c2:	f7ff ffeb 	bl	2749c <set_kernel_idle_time_in_ticks>
	if (_sys_soc_suspend(ticks) == SYS_PM_NOT_HANDLED) {
		_sys_pm_idle_exit_notify = 0;
		k_cpu_idle();
	}
#else
	k_cpu_idle();
   274c6:	f7ff fe83 	bl	271d0 <k_cpu_idle>
   274ca:	bd10      	pop	{r4, pc}
   274cc:	2000c5b4 	.word	0x2000c5b4

000274d0 <_sys_power_save_idle_exit>:
#endif
}

void _sys_power_save_idle_exit(s32_t ticks)
{
   274d0:	b508      	push	{r3, lr}
	if (_sys_pm_idle_exit_notify) {
		_sys_soc_resume();
	}
#endif

	if (_must_enter_tickless_idle(ticks)) {
   274d2:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
   274d6:	d003      	beq.n	274e0 <_sys_power_save_idle_exit+0x10>
   274d8:	4b03      	ldr	r3, [pc, #12]	; (274e8 <_sys_power_save_idle_exit+0x18>)
   274da:	681b      	ldr	r3, [r3, #0]
   274dc:	4298      	cmp	r0, r3
   274de:	db01      	blt.n	274e4 <_sys_power_save_idle_exit+0x14>
		/* Resume normal periodic system timer interrupts */
		_timer_idle_exit();
   274e0:	f7da fb12 	bl	1b08 <_timer_idle_exit>
   274e4:	bd08      	pop	{r3, pc}
   274e6:	bf00      	nop
   274e8:	2000c5b4 	.word	0x2000c5b4

000274ec <idle>:
#else
#define IDLE_YIELD_IF_COOP() do { } while ((0))
#endif

void idle(void *unused1, void *unused2, void *unused3)
{
   274ec:	b508      	push	{r3, lr}
   274ee:	e005      	b.n	274fc <idle+0x10>
 * @return a pointer to the head element, NULL if list is empty
 */

static inline sys_dnode_t *sys_dlist_peek_head(sys_dlist_t *list)
{
	return sys_dlist_is_empty(list) ? NULL : list->head;
   274f0:	2300      	movs	r3, #0
   274f2:	e00e      	b.n	27512 <idle+0x26>
static inline s32_t _get_next_timeout_expiry(void)
{
	struct _timeout *t = (struct _timeout *)
			     sys_dlist_peek_head(&_timeout_q);

	return t ? t->delta_ticks_from_prev : K_FOREVER;
   274f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	__idle_time_stamp = (u64_t)k_cycle_get_32();
#endif

	for (;;) {
		(void)irq_lock();
		_sys_power_save_idle(_get_next_timeout_expiry());
   274f8:	f7ff ffd6 	bl	274a8 <_sys_power_save_idle>
   274fc:	f04f 0220 	mov.w	r2, #32
   27500:	f3ef 8311 	mrs	r3, BASEPRI
   27504:	f382 8811 	msr	BASEPRI, r2
	return list->head == list;
   27508:	4a04      	ldr	r2, [pc, #16]	; (2751c <idle+0x30>)
   2750a:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2750e:	4293      	cmp	r3, r2
   27510:	d0ee      	beq.n	274f0 <idle+0x4>
   27512:	2b00      	cmp	r3, #0
   27514:	d0ee      	beq.n	274f4 <idle+0x8>
   27516:	6918      	ldr	r0, [r3, #16]
   27518:	e7ee      	b.n	274f8 <idle+0xc>
   2751a:	bf00      	nop
   2751c:	20002810 	.word	0x20002810

00027520 <switch_to_main_thread>:

	kernel_arch_init();
}

static void switch_to_main_thread(void)
{
   27520:	b480      	push	{r7}
   27522:	af00      	add	r7, sp, #0
	/* get high address of the stack, i.e. its start (stack grows down) */
	char *start_of_main_stack;

	start_of_main_stack =
		K_THREAD_STACK_BUFFER(main_stack) + main_stack_size;
	start_of_main_stack = (void *)STACK_ROUND_DOWN(start_of_main_stack);
   27524:	4b07      	ldr	r3, [pc, #28]	; (27544 <switch_to_main_thread+0x24>)
   27526:	f023 0307 	bic.w	r3, r3, #7

	_current = main_thread;
   2752a:	4907      	ldr	r1, [pc, #28]	; (27548 <switch_to_main_thread+0x28>)
   2752c:	4a07      	ldr	r2, [pc, #28]	; (2754c <switch_to_main_thread+0x2c>)
   2752e:	6091      	str	r1, [r2, #8]

	/* the ready queue cache already contains the main thread */

	__asm__ __volatile__(
   27530:	4c07      	ldr	r4, [pc, #28]	; (27550 <switch_to_main_thread+0x30>)
   27532:	4a08      	ldr	r2, [pc, #32]	; (27554 <switch_to_main_thread+0x34>)
   27534:	f383 8809 	msr	PSP, r3
   27538:	2100      	movs	r1, #0
   2753a:	f381 8811 	msr	BASEPRI, r1
   2753e:	4610      	mov	r0, r2
   27540:	4720      	bx	r4
   27542:	bf00      	nop
   27544:	2000ab60 	.word	0x2000ab60
   27548:	200027a8 	.word	0x200027a8
   2754c:	20002810 	.word	0x20002810
   27550:	00028d15 	.word	0x00028d15
   27554:	00027779 	.word	0x00027779

00027558 <prepare_multithreading>:
{
   27558:	b5f0      	push	{r4, r5, r6, r7, lr}
   2755a:	b087      	sub	sp, #28
	_IntLibInit();
   2755c:	f7ff fbaa 	bl	26cb4 <_IntLibInit>
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27560:	2300      	movs	r3, #0
   27562:	e007      	b.n	27574 <prepare_multithreading+0x1c>
		sys_dlist_init(&_ready_q.q[ii]);
   27564:	1d18      	adds	r0, r3, #4
   27566:	4927      	ldr	r1, [pc, #156]	; (27604 <prepare_multithreading+0xac>)
   27568:	eb01 02c0 	add.w	r2, r1, r0, lsl #3
	list->head = (sys_dnode_t *)list;
   2756c:	f841 2030 	str.w	r2, [r1, r0, lsl #3]
	list->tail = (sys_dnode_t *)list;
   27570:	6052      	str	r2, [r2, #4]
	for (int ii = 0; ii < K_NUM_PRIORITIES; ii++) {
   27572:	3301      	adds	r3, #1
   27574:	2b1f      	cmp	r3, #31
   27576:	ddf5      	ble.n	27564 <prepare_multithreading+0xc>
	_ready_q.cache = _main_thread;
   27578:	4e22      	ldr	r6, [pc, #136]	; (27604 <prepare_multithreading+0xac>)
   2757a:	4d23      	ldr	r5, [pc, #140]	; (27608 <prepare_multithreading+0xb0>)
   2757c:	61b5      	str	r5, [r6, #24]
	_setup_new_thread(_main_thread, _main_stack,
   2757e:	2701      	movs	r7, #1
   27580:	9704      	str	r7, [sp, #16]
   27582:	2400      	movs	r4, #0
   27584:	9403      	str	r4, [sp, #12]
   27586:	9402      	str	r4, [sp, #8]
   27588:	9401      	str	r4, [sp, #4]
   2758a:	9400      	str	r4, [sp, #0]
   2758c:	4b1f      	ldr	r3, [pc, #124]	; (2760c <prepare_multithreading+0xb4>)
   2758e:	f44f 6200 	mov.w	r2, #2048	; 0x800
   27592:	491f      	ldr	r1, [pc, #124]	; (27610 <prepare_multithreading+0xb8>)
   27594:	4628      	mov	r0, r5
   27596:	f001 fc9b 	bl	28ed0 <_setup_new_thread>
 *
 * This routine must be called with interrupts locked.
 */
static inline void _mark_thread_as_started(struct k_thread *thread)
{
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2759a:	7a6b      	ldrb	r3, [r5, #9]
   2759c:	f023 0304 	bic.w	r3, r3, #4
   275a0:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_main_thread);
   275a2:	4628      	mov	r0, r5
   275a4:	f000 ff08 	bl	283b8 <_add_thread_to_ready_q>
	_setup_new_thread(_idle_thread, _idle_stack,
   275a8:	4d1a      	ldr	r5, [pc, #104]	; (27614 <prepare_multithreading+0xbc>)
   275aa:	9704      	str	r7, [sp, #16]
   275ac:	230f      	movs	r3, #15
   275ae:	9303      	str	r3, [sp, #12]
   275b0:	9402      	str	r4, [sp, #8]
   275b2:	9401      	str	r4, [sp, #4]
   275b4:	9400      	str	r4, [sp, #0]
   275b6:	4b18      	ldr	r3, [pc, #96]	; (27618 <prepare_multithreading+0xc0>)
   275b8:	f44f 72a0 	mov.w	r2, #320	; 0x140
   275bc:	4917      	ldr	r1, [pc, #92]	; (2761c <prepare_multithreading+0xc4>)
   275be:	4628      	mov	r0, r5
   275c0:	f001 fc86 	bl	28ed0 <_setup_new_thread>
   275c4:	7a6b      	ldrb	r3, [r5, #9]
   275c6:	f023 0304 	bic.w	r3, r3, #4
   275ca:	726b      	strb	r3, [r5, #9]
	_add_thread_to_ready_q(_idle_thread);
   275cc:	4628      	mov	r0, r5
   275ce:	f000 fef3 	bl	283b8 <_add_thread_to_ready_q>
	list->head = (sys_dnode_t *)list;
   275d2:	f106 030c 	add.w	r3, r6, #12
   275d6:	60f3      	str	r3, [r6, #12]
	list->tail = (sys_dnode_t *)list;
   275d8:	6133      	str	r3, [r6, #16]
 *
 * @return N/A
 */
static ALWAYS_INLINE void _InterruptStackSetup(void)
{
	u32_t msp = (u32_t)(K_THREAD_STACK_BUFFER(_interrupt_stack) +
   275da:	4b11      	ldr	r3, [pc, #68]	; (27620 <prepare_multithreading+0xc8>)
 * @return N/A
 */
static ALWAYS_INLINE void _MspSet(u32_t msp /* value to store in MSP */
				  )
{
	__asm__ volatile("msr MSP, %0\n\t" :  : "r"(msp));
   275dc:	f383 8808 	msr	MSP, r3
   275e0:	4b10      	ldr	r3, [pc, #64]	; (27624 <prepare_multithreading+0xcc>)
   275e2:	22e0      	movs	r2, #224	; 0xe0
   275e4:	f883 2022 	strb.w	r2, [r3, #34]	; 0x22
   275e8:	77dc      	strb	r4, [r3, #31]
   275ea:	761c      	strb	r4, [r3, #24]
   275ec:	765c      	strb	r4, [r3, #25]
   275ee:	769c      	strb	r4, [r3, #26]
	SCB->SHCSR |= SCB_SHCSR_USGFAULTENA_Msk | SCB_SHCSR_MEMFAULTENA_Msk |
   275f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
   275f2:	f442 22e0 	orr.w	r2, r2, #458752	; 0x70000
   275f6:	625a      	str	r2, [r3, #36]	; 0x24
	_FaultInit();
   275f8:	f7ff fd5e 	bl	270b8 <_FaultInit>
	_CpuIdleInit();
   275fc:	f7ff fde2 	bl	271c4 <_CpuIdleInit>
}
   27600:	b007      	add	sp, #28
   27602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   27604:	20002810 	.word	0x20002810
   27608:	200027a8 	.word	0x200027a8
   2760c:	00027779 	.word	0x00027779
   27610:	2000a360 	.word	0x2000a360
   27614:	20002740 	.word	0x20002740
   27618:	000274ed 	.word	0x000274ed
   2761c:	2000ab60 	.word	0x2000ab60
   27620:	2000b4a0 	.word	0x2000b4a0
   27624:	e000ed00 	.word	0xe000ed00

00027628 <k_call_stacks_analyze>:
{
   27628:	b500      	push	{lr}
   2762a:	b085      	sub	sp, #20
	printk("Kernel stacks:\n");
   2762c:	483a      	ldr	r0, [pc, #232]	; (27718 <k_call_stacks_analyze+0xf0>)
   2762e:	f7da ffe1 	bl	25f4 <printk>
   27632:	2200      	movs	r2, #0
	size_t unused = 0;
   27634:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   27636:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   2763a:	d206      	bcs.n	2764a <k_call_stacks_analyze+0x22>
		if ((unsigned char)stack[i] == 0xaa) {
   2763c:	4937      	ldr	r1, [pc, #220]	; (2771c <k_call_stacks_analyze+0xf4>)
   2763e:	5c89      	ldrb	r1, [r1, r2]
   27640:	29aa      	cmp	r1, #170	; 0xaa
   27642:	d102      	bne.n	2764a <k_call_stacks_analyze+0x22>
			unused++;
   27644:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   27646:	3201      	adds	r2, #1
   27648:	e7f5      	b.n	27636 <k_call_stacks_analyze+0xe>
	pcnt = ((size - unused) * 100) / size;
   2764a:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   2764e:	2264      	movs	r2, #100	; 0x64
   27650:	fb02 f201 	mul.w	r2, r2, r1
   27654:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27656:	9202      	str	r2, [sp, #8]
   27658:	f44f 6200 	mov.w	r2, #2048	; 0x800
   2765c:	9201      	str	r2, [sp, #4]
   2765e:	9100      	str	r1, [sp, #0]
   27660:	492f      	ldr	r1, [pc, #188]	; (27720 <k_call_stacks_analyze+0xf8>)
   27662:	4830      	ldr	r0, [pc, #192]	; (27724 <k_call_stacks_analyze+0xfc>)
   27664:	f7da ffc6 	bl	25f4 <printk>
	for (i = 0; i < size; i++) {
   27668:	2200      	movs	r2, #0
	size_t unused = 0;
   2766a:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   2766c:	f5b2 7fa0 	cmp.w	r2, #320	; 0x140
   27670:	d206      	bcs.n	27680 <k_call_stacks_analyze+0x58>
		if ((unsigned char)stack[i] == 0xaa) {
   27672:	492d      	ldr	r1, [pc, #180]	; (27728 <k_call_stacks_analyze+0x100>)
   27674:	5c89      	ldrb	r1, [r1, r2]
   27676:	29aa      	cmp	r1, #170	; 0xaa
   27678:	d102      	bne.n	27680 <k_call_stacks_analyze+0x58>
			unused++;
   2767a:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   2767c:	3201      	adds	r2, #1
   2767e:	e7f5      	b.n	2766c <k_call_stacks_analyze+0x44>
	pcnt = ((size - unused) * 100) / size;
   27680:	f5c3 71a0 	rsb	r1, r3, #320	; 0x140
   27684:	2264      	movs	r2, #100	; 0x64
   27686:	fb02 f201 	mul.w	r2, r2, r1
   2768a:	4828      	ldr	r0, [pc, #160]	; (2772c <k_call_stacks_analyze+0x104>)
   2768c:	fba0 0202 	umull	r0, r2, r0, r2
   27690:	0a12      	lsrs	r2, r2, #8
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   27692:	9202      	str	r2, [sp, #8]
   27694:	f44f 72a0 	mov.w	r2, #320	; 0x140
   27698:	9201      	str	r2, [sp, #4]
   2769a:	9100      	str	r1, [sp, #0]
   2769c:	4924      	ldr	r1, [pc, #144]	; (27730 <k_call_stacks_analyze+0x108>)
   2769e:	4821      	ldr	r0, [pc, #132]	; (27724 <k_call_stacks_analyze+0xfc>)
   276a0:	f7da ffa8 	bl	25f4 <printk>
	for (i = 0; i < size; i++) {
   276a4:	2200      	movs	r2, #0
	size_t unused = 0;
   276a6:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   276a8:	f5b2 6f00 	cmp.w	r2, #2048	; 0x800
   276ac:	d206      	bcs.n	276bc <k_call_stacks_analyze+0x94>
		if ((unsigned char)stack[i] == 0xaa) {
   276ae:	4921      	ldr	r1, [pc, #132]	; (27734 <k_call_stacks_analyze+0x10c>)
   276b0:	5c89      	ldrb	r1, [r1, r2]
   276b2:	29aa      	cmp	r1, #170	; 0xaa
   276b4:	d102      	bne.n	276bc <k_call_stacks_analyze+0x94>
			unused++;
   276b6:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   276b8:	3201      	adds	r2, #1
   276ba:	e7f5      	b.n	276a8 <k_call_stacks_analyze+0x80>
	pcnt = ((size - unused) * 100) / size;
   276bc:	f5c3 6100 	rsb	r1, r3, #2048	; 0x800
   276c0:	2264      	movs	r2, #100	; 0x64
   276c2:	fb02 f201 	mul.w	r2, r2, r1
   276c6:	0ad2      	lsrs	r2, r2, #11
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   276c8:	9202      	str	r2, [sp, #8]
   276ca:	f44f 6200 	mov.w	r2, #2048	; 0x800
   276ce:	9201      	str	r2, [sp, #4]
   276d0:	9100      	str	r1, [sp, #0]
   276d2:	4919      	ldr	r1, [pc, #100]	; (27738 <k_call_stacks_analyze+0x110>)
   276d4:	4813      	ldr	r0, [pc, #76]	; (27724 <k_call_stacks_analyze+0xfc>)
   276d6:	f7da ff8d 	bl	25f4 <printk>
	for (i = 0; i < size; i++) {
   276da:	2200      	movs	r2, #0
	size_t unused = 0;
   276dc:	4613      	mov	r3, r2
	for (i = 0; i < size; i++) {
   276de:	f5b2 6f80 	cmp.w	r2, #1024	; 0x400
   276e2:	d206      	bcs.n	276f2 <k_call_stacks_analyze+0xca>
		if ((unsigned char)stack[i] == 0xaa) {
   276e4:	4915      	ldr	r1, [pc, #84]	; (2773c <k_call_stacks_analyze+0x114>)
   276e6:	5c89      	ldrb	r1, [r1, r2]
   276e8:	29aa      	cmp	r1, #170	; 0xaa
   276ea:	d102      	bne.n	276f2 <k_call_stacks_analyze+0xca>
			unused++;
   276ec:	3301      	adds	r3, #1
	for (i = 0; i < size; i++) {
   276ee:	3201      	adds	r2, #1
   276f0:	e7f5      	b.n	276de <k_call_stacks_analyze+0xb6>
	pcnt = ((size - unused) * 100) / size;
   276f2:	f5c3 6180 	rsb	r1, r3, #1024	; 0x400
   276f6:	2264      	movs	r2, #100	; 0x64
   276f8:	fb02 f201 	mul.w	r2, r2, r1
   276fc:	0a92      	lsrs	r2, r2, #10
	printk("%s (real size %u):\tunused %u\tusage %u / %u (%u %%)\n", name,
   276fe:	9202      	str	r2, [sp, #8]
   27700:	f44f 6280 	mov.w	r2, #1024	; 0x400
   27704:	9201      	str	r2, [sp, #4]
   27706:	9100      	str	r1, [sp, #0]
   27708:	490d      	ldr	r1, [pc, #52]	; (27740 <k_call_stacks_analyze+0x118>)
   2770a:	4806      	ldr	r0, [pc, #24]	; (27724 <k_call_stacks_analyze+0xfc>)
   2770c:	f7da ff72 	bl	25f4 <printk>
}
   27710:	b005      	add	sp, #20
   27712:	f85d fb04 	ldr.w	pc, [sp], #4
   27716:	bf00      	nop
   27718:	0002f080 	.word	0x0002f080
   2771c:	2000a360 	.word	0x2000a360
   27720:	0002f090 	.word	0x0002f090
   27724:	0002d430 	.word	0x0002d430
   27728:	2000ab60 	.word	0x2000ab60
   2772c:	cccccccd 	.word	0xcccccccd
   27730:	0002f09c 	.word	0x0002f09c
   27734:	2000aca0 	.word	0x2000aca0
   27738:	0002f0a8 	.word	0x0002f0a8
   2773c:	2000b4a0 	.word	0x2000b4a0
   27740:	0002f0b4 	.word	0x0002f0b4

00027744 <_bss_zero>:
{
   27744:	b508      	push	{r3, lr}
		 ((u32_t) &__bss_end - (u32_t) &__bss_start));
   27746:	4803      	ldr	r0, [pc, #12]	; (27754 <_bss_zero+0x10>)
	memset(&__bss_start, 0,
   27748:	4a03      	ldr	r2, [pc, #12]	; (27758 <_bss_zero+0x14>)
   2774a:	1a12      	subs	r2, r2, r0
   2774c:	2100      	movs	r1, #0
   2774e:	f002 f923 	bl	29998 <memset>
   27752:	bd08      	pop	{r3, pc}
   27754:	20000000 	.word	0x20000000
   27758:	20002c50 	.word	0x20002c50

0002775c <_data_copy>:
{
   2775c:	b508      	push	{r3, lr}
		 ((u32_t) &__data_ram_end - (u32_t) &__data_ram_start));
   2775e:	4803      	ldr	r0, [pc, #12]	; (2776c <_data_copy+0x10>)
	memcpy(&__data_ram_start, &__data_rom_start,
   27760:	4a03      	ldr	r2, [pc, #12]	; (27770 <_data_copy+0x14>)
   27762:	1a12      	subs	r2, r2, r0
   27764:	4903      	ldr	r1, [pc, #12]	; (27774 <_data_copy+0x18>)
   27766:	f7d8 fdab 	bl	2c0 <memcpy>
   2776a:	bd08      	pop	{r3, pc}
   2776c:	2000b8a0 	.word	0x2000b8a0
   27770:	2000d0f4 	.word	0x2000d0f4
   27774:	0002f1d0 	.word	0x0002f1d0

00027778 <_main>:
{
   27778:	b508      	push	{r3, lr}
	_sys_device_do_config_level(_SYS_INIT_LEVEL_POST_KERNEL);
   2777a:	2002      	movs	r0, #2
   2777c:	f7ff fe5e 	bl	2743c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_APPLICATION);
   27780:	2003      	movs	r0, #3
   27782:	f7ff fe5b 	bl	2743c <_sys_device_do_config_level>
	_init_static_threads();
   27786:	f001 fc11 	bl	28fac <_init_static_threads>
	main();
   2778a:	f7d9 fc6f 	bl	106c <main>
	_main_thread->base.user_options &= ~K_ESSENTIAL;
   2778e:	4a03      	ldr	r2, [pc, #12]	; (2779c <_main+0x24>)
   27790:	7a13      	ldrb	r3, [r2, #8]
   27792:	f023 0301 	bic.w	r3, r3, #1
   27796:	7213      	strb	r3, [r2, #8]
   27798:	bd08      	pop	{r3, pc}
   2779a:	bf00      	nop
   2779c:	200027a8 	.word	0x200027a8

000277a0 <_Cstart>:
 * cleared/zeroed.
 *
 * @return Does not return
 */
FUNC_NORETURN void _Cstart(void)
{
   277a0:	b508      	push	{r3, lr}
	 * Initialize kernel data structures. This step includes
	 * initializing the interrupt subsystem, which must be performed
	 * before the hardware initialization phase.
	 */

	prepare_multithreading(dummy_thread);
   277a2:	2000      	movs	r0, #0
   277a4:	f7ff fed8 	bl	27558 <prepare_multithreading>

	/* perform basic hardware initialization */
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_1);
   277a8:	2000      	movs	r0, #0
   277aa:	f7ff fe47 	bl	2743c <_sys_device_do_config_level>
	_sys_device_do_config_level(_SYS_INIT_LEVEL_PRE_KERNEL_2);
   277ae:	2001      	movs	r0, #1
   277b0:	f7ff fe44 	bl	2743c <_sys_device_do_config_level>
	__stack_chk_guard = (void *)sys_rand32_get();
#endif

	/* display boot banner */

	switch_to_main_thread();
   277b4:	f7ff feb4 	bl	27520 <switch_to_main_thread>

000277b8 <create_free_list>:
static void create_free_list(struct k_mem_slab *slab)
{
	u32_t j;
	char *p;

	slab->free_list = NULL;
   277b8:	2200      	movs	r2, #0
   277ba:	6142      	str	r2, [r0, #20]
	p = slab->buffer;
   277bc:	6903      	ldr	r3, [r0, #16]

	for (j = 0; j < slab->num_blocks; j++) {
   277be:	e005      	b.n	277cc <create_free_list+0x14>
		*(char **)p = slab->free_list;
   277c0:	6941      	ldr	r1, [r0, #20]
   277c2:	6019      	str	r1, [r3, #0]
		slab->free_list = p;
   277c4:	6143      	str	r3, [r0, #20]
		p += slab->block_size;
   277c6:	68c1      	ldr	r1, [r0, #12]
   277c8:	440b      	add	r3, r1
	for (j = 0; j < slab->num_blocks; j++) {
   277ca:	3201      	adds	r2, #1
   277cc:	6881      	ldr	r1, [r0, #8]
   277ce:	428a      	cmp	r2, r1
   277d0:	d3f6      	bcc.n	277c0 <create_free_list+0x8>
	}
}
   277d2:	4770      	bx	lr

000277d4 <init_mem_slab_module>:
 * Perform any initialization that wasn't done at build time.
 *
 * @return N/A
 */
static int init_mem_slab_module(struct device *dev)
{
   277d4:	b510      	push	{r4, lr}
	ARG_UNUSED(dev);

	struct k_mem_slab *slab;

	for (slab = _k_mem_slab_list_start;
   277d6:	4c05      	ldr	r4, [pc, #20]	; (277ec <init_mem_slab_module+0x18>)
   277d8:	e003      	b.n	277e2 <init_mem_slab_module+0xe>
	     slab < _k_mem_slab_list_end;
	     slab++) {
		create_free_list(slab);
   277da:	4620      	mov	r0, r4
   277dc:	f7ff ffec 	bl	277b8 <create_free_list>
	     slab++) {
   277e0:	341c      	adds	r4, #28
	for (slab = _k_mem_slab_list_start;
   277e2:	4b03      	ldr	r3, [pc, #12]	; (277f0 <init_mem_slab_module+0x1c>)
   277e4:	429c      	cmp	r4, r3
   277e6:	d3f8      	bcc.n	277da <init_mem_slab_module+0x6>
		SYS_TRACING_OBJ_INIT(k_mem_slab, slab);
	}
	return 0;
}
   277e8:	2000      	movs	r0, #0
   277ea:	bd10      	pop	{r4, pc}
   277ec:	2000cc28 	.word	0x2000cc28
   277f0:	2000cc60 	.word	0x2000cc60

000277f4 <k_mem_slab_alloc>:

	_k_object_init(slab);
}

int k_mem_slab_alloc(struct k_mem_slab *slab, void **mem, s32_t timeout)
{
   277f4:	b538      	push	{r3, r4, r5, lr}
   277f6:	f04f 0320 	mov.w	r3, #32
   277fa:	f3ef 8411 	mrs	r4, BASEPRI
   277fe:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	int result;

	if (slab->free_list != NULL) {
   27802:	6943      	ldr	r3, [r0, #20]
   27804:	b15b      	cbz	r3, 2781e <k_mem_slab_alloc+0x2a>
		/* take a free block */
		*mem = slab->free_list;
   27806:	600b      	str	r3, [r1, #0]
		slab->free_list = *(char **)(slab->free_list);
   27808:	6943      	ldr	r3, [r0, #20]
   2780a:	681b      	ldr	r3, [r3, #0]
   2780c:	6143      	str	r3, [r0, #20]
		slab->num_used++;
   2780e:	6983      	ldr	r3, [r0, #24]
   27810:	3301      	adds	r3, #1
   27812:	6183      	str	r3, [r0, #24]
		result = 0;
   27814:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27816:	f384 8811 	msr	BASEPRI, r4
	}

	irq_unlock(key);

	return result;
}
   2781a:	4618      	mov	r0, r3
   2781c:	bd38      	pop	{r3, r4, r5, pc}
	} else if (timeout == K_NO_WAIT) {
   2781e:	b922      	cbnz	r2, 2782a <k_mem_slab_alloc+0x36>
		*mem = NULL;
   27820:	2300      	movs	r3, #0
   27822:	600b      	str	r3, [r1, #0]
		result = -ENOMEM;
   27824:	f06f 030b 	mvn.w	r3, #11
   27828:	e7f5      	b.n	27816 <k_mem_slab_alloc+0x22>
   2782a:	460d      	mov	r5, r1
		_pend_current_thread(&slab->wait_q, timeout);
   2782c:	4611      	mov	r1, r2
   2782e:	f000 fed7 	bl	285e0 <_pend_current_thread>
	_update_time_slice_before_swap();
   27832:	f000 ff53 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   27836:	4620      	mov	r0, r4
   27838:	f7ff fa96 	bl	26d68 <__swap>
		if (result == 0) {
   2783c:	4603      	mov	r3, r0
   2783e:	2800      	cmp	r0, #0
   27840:	d1eb      	bne.n	2781a <k_mem_slab_alloc+0x26>
			*mem = _current->base.swap_data;
   27842:	4a02      	ldr	r2, [pc, #8]	; (2784c <k_mem_slab_alloc+0x58>)
   27844:	6892      	ldr	r2, [r2, #8]
   27846:	68d2      	ldr	r2, [r2, #12]
   27848:	602a      	str	r2, [r5, #0]
   2784a:	e7e6      	b.n	2781a <k_mem_slab_alloc+0x26>
   2784c:	20002810 	.word	0x20002810

00027850 <k_mem_slab_free>:

void k_mem_slab_free(struct k_mem_slab *slab, void **mem)
{
   27850:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   27852:	f04f 0320 	mov.w	r3, #32
   27856:	f3ef 8411 	mrs	r4, BASEPRI
   2785a:	f383 8811 	msr	BASEPRI, r3
_find_first_thread_to_unpend(_wait_q_t *wait_q, struct k_thread *from)
{
#ifdef CONFIG_SYS_CLOCK_EXISTS
	extern volatile int _handling_timeouts;

	if (_handling_timeouts) {
   2785e:	4b3d      	ldr	r3, [pc, #244]	; (27954 <k_mem_slab_free+0x104>)
   27860:	681b      	ldr	r3, [r3, #0]
   27862:	2b00      	cmp	r3, #0
   27864:	d13a      	bne.n	278dc <k_mem_slab_free+0x8c>
	return list->head == list;
   27866:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27868:	4298      	cmp	r0, r3
   2786a:	d048      	beq.n	278fe <k_mem_slab_free+0xae>
/* must be called with interrupts locked */
static inline struct k_thread *_unpend_first_thread(_wait_q_t *wait_q)
{
	struct k_thread *thread = _find_first_thread_to_unpend(wait_q, NULL);

	if (thread) {
   2786c:	b14b      	cbz	r3, 27882 <k_mem_slab_free+0x32>
 * @return N/A
 */

static inline void sys_dlist_remove(sys_dnode_t *node)
{
	node->prev->next = node->next;
   2786e:	685a      	ldr	r2, [r3, #4]
   27870:	681d      	ldr	r5, [r3, #0]
   27872:	6015      	str	r5, [r2, #0]
	node->next->prev = node->prev;
   27874:	681a      	ldr	r2, [r3, #0]
   27876:	685d      	ldr	r5, [r3, #4]
   27878:	6055      	str	r5, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   2787a:	7a5a      	ldrb	r2, [r3, #9]
   2787c:	f022 0202 	bic.w	r2, r2, #2
   27880:	725a      	strb	r2, [r3, #9]
	int key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&slab->wait_q);

	if (pending_thread) {
   27882:	2b00      	cmp	r3, #0
   27884:	d05c      	beq.n	27940 <k_mem_slab_free+0xf0>
		_set_thread_return_value_with_data(pending_thread, 0, *mem);
   27886:	680a      	ldr	r2, [r1, #0]
}

static ALWAYS_INLINE void
_set_thread_return_value(struct k_thread *thread, unsigned int value)
{
	thread->arch.swap_return_value = value;
   27888:	2100      	movs	r1, #0
   2788a:	6659      	str	r1, [r3, #100]	; 0x64
	thread->base.swap_data = data;
   2788c:	60da      	str	r2, [r3, #12]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2788e:	6a19      	ldr	r1, [r3, #32]
   27890:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   27894:	d013      	beq.n	278be <k_mem_slab_free+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27896:	f103 0210 	add.w	r2, r3, #16
	return list->tail == node;
   2789a:	482f      	ldr	r0, [pc, #188]	; (27958 <k_mem_slab_free+0x108>)
   2789c:	6900      	ldr	r0, [r0, #16]
   2789e:	4282      	cmp	r2, r0
   278a0:	d004      	beq.n	278ac <k_mem_slab_free+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   278a2:	b102      	cbz	r2, 278a6 <k_mem_slab_free+0x56>
	return (node == list->tail) ? NULL : node->next;
   278a4:	691a      	ldr	r2, [r3, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   278a6:	6910      	ldr	r0, [r2, #16]
   278a8:	4401      	add	r1, r0
   278aa:	6111      	str	r1, [r2, #16]
	node->prev->next = node->next;
   278ac:	695a      	ldr	r2, [r3, #20]
   278ae:	6919      	ldr	r1, [r3, #16]
   278b0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   278b2:	691a      	ldr	r2, [r3, #16]
   278b4:	6959      	ldr	r1, [r3, #20]
   278b6:	6051      	str	r1, [r2, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   278b8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   278bc:	621a      	str	r2, [r3, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   278be:	7a5a      	ldrb	r2, [r3, #9]
   278c0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   278c4:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   278c6:	f012 0f1b 	tst.w	r2, #27
   278ca:	d11c      	bne.n	27906 <k_mem_slab_free+0xb6>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   278cc:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   278ce:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   278d2:	d016      	beq.n	27902 <k_mem_slab_free+0xb2>
   278d4:	2200      	movs	r2, #0
   278d6:	e017      	b.n	27908 <k_mem_slab_free+0xb8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278d8:	2300      	movs	r3, #0
   278da:	e003      	b.n	278e4 <k_mem_slab_free+0x94>
   278dc:	4605      	mov	r5, r0
	return list->head == list;
   278de:	6803      	ldr	r3, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278e0:	4298      	cmp	r0, r3
   278e2:	d0f9      	beq.n	278d8 <k_mem_slab_free+0x88>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   278e4:	2b00      	cmp	r3, #0
   278e6:	d0c1      	beq.n	2786c <k_mem_slab_free+0x1c>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   278e8:	6a1a      	ldr	r2, [r3, #32]
			if (_is_thread_timeout_expired(thread)) {
   278ea:	f112 0f02 	cmn.w	r2, #2
   278ee:	d1bd      	bne.n	2786c <k_mem_slab_free+0x1c>
	return (node == list->tail) ? NULL : node->next;
   278f0:	686a      	ldr	r2, [r5, #4]
   278f2:	4293      	cmp	r3, r2
   278f4:	d001      	beq.n	278fa <k_mem_slab_free+0xaa>
   278f6:	681b      	ldr	r3, [r3, #0]
   278f8:	e7f4      	b.n	278e4 <k_mem_slab_free+0x94>
   278fa:	2300      	movs	r3, #0
   278fc:	e7f2      	b.n	278e4 <k_mem_slab_free+0x94>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   278fe:	2300      	movs	r3, #0
   27900:	e7b4      	b.n	2786c <k_mem_slab_free+0x1c>
	return !(_is_thread_prevented_from_running(thread) ||
   27902:	2201      	movs	r2, #1
   27904:	e000      	b.n	27908 <k_mem_slab_free+0xb8>
   27906:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   27908:	b94a      	cbnz	r2, 2791e <k_mem_slab_free+0xce>
	return _is_preempt(_current) && __must_switch_threads();
   2790a:	4b13      	ldr	r3, [pc, #76]	; (27958 <k_mem_slab_free+0x108>)
   2790c:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   2790e:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   27910:	2b7f      	cmp	r3, #127	; 0x7f
   27912:	d908      	bls.n	27926 <k_mem_slab_free+0xd6>
   27914:	2300      	movs	r3, #0
		_abort_thread_timeout(pending_thread);
		_ready_thread(pending_thread);
		if (_must_switch_threads()) {
   27916:	b96b      	cbnz	r3, 27934 <k_mem_slab_free+0xe4>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27918:	f384 8811 	msr	BASEPRI, r4
   2791c:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   2791e:	4618      	mov	r0, r3
   27920:	f000 fd4a 	bl	283b8 <_add_thread_to_ready_q>
   27924:	e7f1      	b.n	2790a <k_mem_slab_free+0xba>
	return _is_preempt(_current) && __must_switch_threads();
   27926:	f000 fe6b 	bl	28600 <__must_switch_threads>
   2792a:	4603      	mov	r3, r0
   2792c:	2800      	cmp	r0, #0
   2792e:	d0f2      	beq.n	27916 <k_mem_slab_free+0xc6>
   27930:	2301      	movs	r3, #1
   27932:	e7f0      	b.n	27916 <k_mem_slab_free+0xc6>
	_update_time_slice_before_swap();
   27934:	f000 fed2 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   27938:	4620      	mov	r0, r4
   2793a:	f7ff fa15 	bl	26d68 <__swap>
   2793e:	bd38      	pop	{r3, r4, r5, pc}
			_Swap(key);
			return;
		}
	} else {
		**(char ***)mem = slab->free_list;
   27940:	680b      	ldr	r3, [r1, #0]
   27942:	6942      	ldr	r2, [r0, #20]
   27944:	601a      	str	r2, [r3, #0]
		slab->free_list = *(char **)mem;
   27946:	680b      	ldr	r3, [r1, #0]
   27948:	6143      	str	r3, [r0, #20]
		slab->num_used--;
   2794a:	6983      	ldr	r3, [r0, #24]
   2794c:	3b01      	subs	r3, #1
   2794e:	6183      	str	r3, [r0, #24]
   27950:	e7e2      	b.n	27918 <k_mem_slab_free+0xc8>
   27952:	bf00      	nop
   27954:	20002bc8 	.word	0x20002bc8
   27958:	20002810 	.word	0x20002810

0002795c <new_prio_for_inheritance>:
}
#endif

static int new_prio_for_inheritance(int target, int limit)
{
	int new_prio = _is_prio_higher(target, limit) ? target : limit;
   2795c:	4288      	cmp	r0, r1
   2795e:	da00      	bge.n	27962 <new_prio_for_inheritance+0x6>
   27960:	4601      	mov	r1, r0
	return _is_under_prio_ceiling(prio) ? prio : CONFIG_PRIORITY_CEILING;
   27962:	2900      	cmp	r1, #0
   27964:	db01      	blt.n	2796a <new_prio_for_inheritance+0xe>
   27966:	4608      	mov	r0, r1
   27968:	4770      	bx	lr
   2796a:	2000      	movs	r0, #0

	new_prio = _get_new_prio_with_ceiling(new_prio);

	return new_prio;
}
   2796c:	4770      	bx	lr

0002796e <adjust_owner_prio>:

static void adjust_owner_prio(struct k_mutex *mutex, int new_prio)
{
   2796e:	b538      	push	{r3, r4, r5, lr}
	if (mutex->owner->base.prio != new_prio) {
   27970:	6884      	ldr	r4, [r0, #8]
   27972:	f994 300a 	ldrsb.w	r3, [r4, #10]
   27976:	428b      	cmp	r3, r1
   27978:	d00e      	beq.n	27998 <adjust_owner_prio+0x2a>
	u8_t state = thread->base.thread_state;
   2797a:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2797c:	f013 0f1f 	tst.w	r3, #31
   27980:	d107      	bne.n	27992 <adjust_owner_prio+0x24>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27982:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27984:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27988:	d001      	beq.n	2798e <adjust_owner_prio+0x20>
   2798a:	2300      	movs	r3, #0
   2798c:	e002      	b.n	27994 <adjust_owner_prio+0x26>
   2798e:	2301      	movs	r3, #1
   27990:	e000      	b.n	27994 <adjust_owner_prio+0x26>
   27992:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   27994:	b90b      	cbnz	r3, 2799a <adjust_owner_prio+0x2c>
		thread->base.prio = prio;
   27996:	72a1      	strb	r1, [r4, #10]
   27998:	bd38      	pop	{r3, r4, r5, pc}
   2799a:	460d      	mov	r5, r1
		_remove_thread_from_ready_q(thread);
   2799c:	4620      	mov	r0, r4
   2799e:	f000 fd2b 	bl	283f8 <_remove_thread_from_ready_q>
		thread->base.prio = prio;
   279a2:	72a5      	strb	r5, [r4, #10]
		_add_thread_to_ready_q(thread);
   279a4:	4620      	mov	r0, r4
   279a6:	f000 fd07 	bl	283b8 <_add_thread_to_ready_q>
   279aa:	bd38      	pop	{r3, r4, r5, pc}

000279ac <_impl_k_mutex_lock>:
		_thread_priority_set(mutex->owner, new_prio);
	}
}

int _impl_k_mutex_lock(struct k_mutex *mutex, s32_t timeout)
{
   279ac:	b570      	push	{r4, r5, r6, lr}
   279ae:	4604      	mov	r4, r0
	--_current->base.sched_locked;
   279b0:	4b32      	ldr	r3, [pc, #200]	; (27a7c <_impl_k_mutex_lock+0xd0>)
   279b2:	689a      	ldr	r2, [r3, #8]
   279b4:	7ad3      	ldrb	r3, [r2, #11]
   279b6:	3b01      	subs	r3, #1
   279b8:	72d3      	strb	r3, [r2, #11]
	int new_prio, key;

	_sched_lock();

	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   279ba:	68c3      	ldr	r3, [r0, #12]
   279bc:	b97b      	cbnz	r3, 279de <_impl_k_mutex_lock+0x32>

		RECORD_STATE_CHANGE();

		mutex->owner_orig_prio = mutex->lock_count == 0 ?
					_current->base.prio :
   279be:	2b00      	cmp	r3, #0
   279c0:	d133      	bne.n	27a2a <_impl_k_mutex_lock+0x7e>
   279c2:	4a2e      	ldr	r2, [pc, #184]	; (27a7c <_impl_k_mutex_lock+0xd0>)
   279c4:	6892      	ldr	r2, [r2, #8]
   279c6:	f992 200a 	ldrsb.w	r2, [r2, #10]
		mutex->owner_orig_prio = mutex->lock_count == 0 ?
   279ca:	6122      	str	r2, [r4, #16]
					mutex->owner_orig_prio;

		mutex->lock_count++;
   279cc:	3301      	adds	r3, #1
   279ce:	60e3      	str	r3, [r4, #12]
		mutex->owner = _current;
   279d0:	4b2a      	ldr	r3, [pc, #168]	; (27a7c <_impl_k_mutex_lock+0xd0>)
   279d2:	689b      	ldr	r3, [r3, #8]
   279d4:	60a3      	str	r3, [r4, #8]

		K_DEBUG("%p took mutex %p, count: %d, orig prio: %d\n",
			_current, mutex, mutex->lock_count,
			mutex->owner_orig_prio);

		k_sched_unlock();
   279d6:	f000 fea1 	bl	2871c <k_sched_unlock>

		return 0;
   279da:	2000      	movs	r0, #0
   279dc:	bd70      	pop	{r4, r5, r6, pc}
   279de:	460d      	mov	r5, r1
	if (likely(mutex->lock_count == 0 || mutex->owner == _current)) {
   279e0:	6881      	ldr	r1, [r0, #8]
   279e2:	4a26      	ldr	r2, [pc, #152]	; (27a7c <_impl_k_mutex_lock+0xd0>)
   279e4:	6892      	ldr	r2, [r2, #8]
   279e6:	4291      	cmp	r1, r2
   279e8:	d0e9      	beq.n	279be <_impl_k_mutex_lock+0x12>
	}

	RECORD_CONFLICT();

	if (unlikely(timeout == K_NO_WAIT)) {
   279ea:	b305      	cbz	r5, 27a2e <_impl_k_mutex_lock+0x82>
	if (_is_prio_higher(_current->prio, mutex->owner->prio)) {
		new_prio = _current->prio;
	}
	new_prio = _get_new_prio_with_ceiling(new_prio);
#endif
	new_prio = new_prio_for_inheritance(_current->base.prio,
   279ec:	f991 100a 	ldrsb.w	r1, [r1, #10]
   279f0:	f992 000a 	ldrsb.w	r0, [r2, #10]
   279f4:	f7ff ffb2 	bl	2795c <new_prio_for_inheritance>
	__asm__ volatile(
   279f8:	f04f 0320 	mov.w	r3, #32
   279fc:	f3ef 8611 	mrs	r6, BASEPRI
   27a00:	f383 8811 	msr	BASEPRI, r3

	key = irq_lock();

	K_DEBUG("adjusting prio up on mutex %p\n", mutex);

	if (_is_prio_higher(new_prio, mutex->owner->base.prio)) {
   27a04:	68a3      	ldr	r3, [r4, #8]
   27a06:	f993 300a 	ldrsb.w	r3, [r3, #10]
   27a0a:	4298      	cmp	r0, r3
   27a0c:	db14      	blt.n	27a38 <_impl_k_mutex_lock+0x8c>
		adjust_owner_prio(mutex, new_prio);
	}

	_pend_current_thread(&mutex->wait_q, timeout);
   27a0e:	4629      	mov	r1, r5
   27a10:	4620      	mov	r0, r4
   27a12:	f000 fde5 	bl	285e0 <_pend_current_thread>
	_update_time_slice_before_swap();
   27a16:	f000 fe61 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   27a1a:	4630      	mov	r0, r6
   27a1c:	f7ff f9a4 	bl	26d68 <__swap>
	K_DEBUG("on mutex %p got_mutex value: %d\n", mutex, got_mutex);

	K_DEBUG("%p got mutex %p (y/n): %c\n", _current, mutex,
		got_mutex ? 'y' : 'n');

	if (got_mutex == 0) {
   27a20:	b978      	cbnz	r0, 27a42 <_impl_k_mutex_lock+0x96>
		k_sched_unlock();
   27a22:	f000 fe7b 	bl	2871c <k_sched_unlock>
		return 0;
   27a26:	2000      	movs	r0, #0
   27a28:	bd70      	pop	{r4, r5, r6, pc}
					_current->base.prio :
   27a2a:	6922      	ldr	r2, [r4, #16]
   27a2c:	e7cd      	b.n	279ca <_impl_k_mutex_lock+0x1e>
		k_sched_unlock();
   27a2e:	f000 fe75 	bl	2871c <k_sched_unlock>
		return -EBUSY;
   27a32:	f06f 000f 	mvn.w	r0, #15
   27a36:	bd70      	pop	{r4, r5, r6, pc}
		adjust_owner_prio(mutex, new_prio);
   27a38:	4601      	mov	r1, r0
   27a3a:	4620      	mov	r0, r4
   27a3c:	f7ff ff97 	bl	2796e <adjust_owner_prio>
   27a40:	e7e5      	b.n	27a0e <_impl_k_mutex_lock+0x62>
	return list->head == list;
   27a42:	6823      	ldr	r3, [r4, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27a44:	429c      	cmp	r4, r3
   27a46:	d016      	beq.n	27a76 <_impl_k_mutex_lock+0xca>
	K_DEBUG("%p timeout on mutex %p\n", _current, mutex);

	struct k_thread *waiter =
		(struct k_thread *)sys_dlist_peek_head(&mutex->wait_q);

	new_prio = mutex->owner_orig_prio;
   27a48:	6921      	ldr	r1, [r4, #16]
	new_prio = waiter ? new_prio_for_inheritance(waiter->base.prio,
						     new_prio) : new_prio;
   27a4a:	b123      	cbz	r3, 27a56 <_impl_k_mutex_lock+0xaa>
   27a4c:	f993 000a 	ldrsb.w	r0, [r3, #10]
   27a50:	f7ff ff84 	bl	2795c <new_prio_for_inheritance>
   27a54:	4601      	mov	r1, r0
   27a56:	f04f 0320 	mov.w	r3, #32
   27a5a:	f3ef 8511 	mrs	r5, BASEPRI
   27a5e:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("adjusting prio down on mutex %p\n", mutex);

	key = irq_lock();
	adjust_owner_prio(mutex, new_prio);
   27a62:	4620      	mov	r0, r4
   27a64:	f7ff ff83 	bl	2796e <adjust_owner_prio>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27a68:	f385 8811 	msr	BASEPRI, r5
	irq_unlock(key);

	k_sched_unlock();
   27a6c:	f000 fe56 	bl	2871c <k_sched_unlock>

	return -EAGAIN;
   27a70:	f06f 000a 	mvn.w	r0, #10
}
   27a74:	bd70      	pop	{r4, r5, r6, pc}
   27a76:	2300      	movs	r3, #0
   27a78:	e7e6      	b.n	27a48 <_impl_k_mutex_lock+0x9c>
   27a7a:	bf00      	nop
   27a7c:	20002810 	.word	0x20002810

00027a80 <_impl_k_mutex_unlock>:
	return _impl_k_mutex_lock((struct k_mutex *)mutex, (s32_t)timeout);
}
#endif

void _impl_k_mutex_unlock(struct k_mutex *mutex)
{
   27a80:	b570      	push	{r4, r5, r6, lr}
   27a82:	4b40      	ldr	r3, [pc, #256]	; (27b84 <_impl_k_mutex_unlock+0x104>)
   27a84:	689a      	ldr	r2, [r3, #8]
   27a86:	7ad3      	ldrb	r3, [r2, #11]
   27a88:	3b01      	subs	r3, #1
   27a8a:	72d3      	strb	r3, [r2, #11]

	_sched_lock();

	RECORD_STATE_CHANGE();

	mutex->lock_count--;
   27a8c:	68c3      	ldr	r3, [r0, #12]
   27a8e:	3b01      	subs	r3, #1
   27a90:	60c3      	str	r3, [r0, #12]

	K_DEBUG("mutex %p lock_count: %d\n", mutex, mutex->lock_count);

	if (mutex->lock_count != 0) {
   27a92:	2b00      	cmp	r3, #0
   27a94:	d143      	bne.n	27b1e <_impl_k_mutex_unlock+0x9e>
   27a96:	4605      	mov	r5, r0
	__asm__ volatile(
   27a98:	f04f 0320 	mov.w	r3, #32
   27a9c:	f3ef 8611 	mrs	r6, BASEPRI
   27aa0:	f383 8811 	msr	BASEPRI, r3
		return;
	}

	key = irq_lock();

	adjust_owner_prio(mutex, mutex->owner_orig_prio);
   27aa4:	6901      	ldr	r1, [r0, #16]
   27aa6:	f7ff ff62 	bl	2796e <adjust_owner_prio>

	struct k_thread *new_owner = _unpend_first_thread(&mutex->wait_q);
   27aaa:	462a      	mov	r2, r5
	if (_handling_timeouts) {
   27aac:	4b36      	ldr	r3, [pc, #216]	; (27b88 <_impl_k_mutex_unlock+0x108>)
   27aae:	681b      	ldr	r3, [r3, #0]
   27ab0:	2b00      	cmp	r3, #0
   27ab2:	d139      	bne.n	27b28 <_impl_k_mutex_unlock+0xa8>
	return list->head == list;
   27ab4:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27ab6:	42a5      	cmp	r5, r4
   27ab8:	d046      	beq.n	27b48 <_impl_k_mutex_unlock+0xc8>
	if (thread) {
   27aba:	b14c      	cbz	r4, 27ad0 <_impl_k_mutex_unlock+0x50>
	node->prev->next = node->next;
   27abc:	6863      	ldr	r3, [r4, #4]
   27abe:	6822      	ldr	r2, [r4, #0]
   27ac0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27ac2:	6823      	ldr	r3, [r4, #0]
   27ac4:	6862      	ldr	r2, [r4, #4]
   27ac6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27ac8:	7a63      	ldrb	r3, [r4, #9]
   27aca:	f023 0302 	bic.w	r3, r3, #2
   27ace:	7263      	strb	r3, [r4, #9]

	K_DEBUG("new owner of mutex %p: %p (prio: %d)\n",
		mutex, new_owner, new_owner ? new_owner->base.prio : -1000);

	if (new_owner) {
   27ad0:	2c00      	cmp	r4, #0
   27ad2:	d051      	beq.n	27b78 <_impl_k_mutex_unlock+0xf8>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   27ad4:	6a22      	ldr	r2, [r4, #32]
   27ad6:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27ada:	d013      	beq.n	27b04 <_impl_k_mutex_unlock+0x84>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27adc:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   27ae0:	4928      	ldr	r1, [pc, #160]	; (27b84 <_impl_k_mutex_unlock+0x104>)
   27ae2:	6909      	ldr	r1, [r1, #16]
   27ae4:	428b      	cmp	r3, r1
   27ae6:	d004      	beq.n	27af2 <_impl_k_mutex_unlock+0x72>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27ae8:	b103      	cbz	r3, 27aec <_impl_k_mutex_unlock+0x6c>
	return (node == list->tail) ? NULL : node->next;
   27aea:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   27aec:	6919      	ldr	r1, [r3, #16]
   27aee:	440a      	add	r2, r1
   27af0:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   27af2:	6963      	ldr	r3, [r4, #20]
   27af4:	6922      	ldr	r2, [r4, #16]
   27af6:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27af8:	6923      	ldr	r3, [r4, #16]
   27afa:	6962      	ldr	r2, [r4, #20]
   27afc:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   27afe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27b02:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   27b04:	7a63      	ldrb	r3, [r4, #9]
   27b06:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   27b0a:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   27b0c:	f013 0f1b 	tst.w	r3, #27
   27b10:	d11e      	bne.n	27b50 <_impl_k_mutex_unlock+0xd0>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27b12:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27b14:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27b18:	d018      	beq.n	27b4c <_impl_k_mutex_unlock+0xcc>
   27b1a:	2300      	movs	r3, #0
   27b1c:	e019      	b.n	27b52 <_impl_k_mutex_unlock+0xd2>
		k_sched_unlock();
   27b1e:	f000 fdfd 	bl	2871c <k_sched_unlock>
		return;
   27b22:	bd70      	pop	{r4, r5, r6, pc}
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b24:	2400      	movs	r4, #0
   27b26:	e002      	b.n	27b2e <_impl_k_mutex_unlock+0xae>
	return list->head == list;
   27b28:	682c      	ldr	r4, [r5, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b2a:	42a5      	cmp	r5, r4
   27b2c:	d0fa      	beq.n	27b24 <_impl_k_mutex_unlock+0xa4>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   27b2e:	2c00      	cmp	r4, #0
   27b30:	d0c3      	beq.n	27aba <_impl_k_mutex_unlock+0x3a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27b32:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   27b34:	f113 0f02 	cmn.w	r3, #2
   27b38:	d1bf      	bne.n	27aba <_impl_k_mutex_unlock+0x3a>
	return (node == list->tail) ? NULL : node->next;
   27b3a:	6853      	ldr	r3, [r2, #4]
   27b3c:	429c      	cmp	r4, r3
   27b3e:	d001      	beq.n	27b44 <_impl_k_mutex_unlock+0xc4>
   27b40:	6824      	ldr	r4, [r4, #0]
   27b42:	e7f4      	b.n	27b2e <_impl_k_mutex_unlock+0xae>
   27b44:	2400      	movs	r4, #0
   27b46:	e7f2      	b.n	27b2e <_impl_k_mutex_unlock+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27b48:	2400      	movs	r4, #0
   27b4a:	e7b6      	b.n	27aba <_impl_k_mutex_unlock+0x3a>
	return !(_is_thread_prevented_from_running(thread) ||
   27b4c:	2301      	movs	r3, #1
   27b4e:	e000      	b.n	27b52 <_impl_k_mutex_unlock+0xd2>
   27b50:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   27b52:	b96b      	cbnz	r3, 27b70 <_impl_k_mutex_unlock+0xf0>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27b54:	f386 8811 	msr	BASEPRI, r6
   27b58:	2300      	movs	r3, #0
   27b5a:	6663      	str	r3, [r4, #100]	; 0x64
		/*
		 * new owner is already of higher or equal prio than first
		 * waiter since the wait queue is priority-based: no need to
		 * ajust its priority
		 */
		mutex->owner = new_owner;
   27b5c:	60ac      	str	r4, [r5, #8]
		mutex->lock_count++;
   27b5e:	68eb      	ldr	r3, [r5, #12]
   27b60:	3301      	adds	r3, #1
   27b62:	60eb      	str	r3, [r5, #12]
		mutex->owner_orig_prio = new_owner->base.prio;
   27b64:	f994 300a 	ldrsb.w	r3, [r4, #10]
   27b68:	612b      	str	r3, [r5, #16]
	} else {
		irq_unlock(key);
		mutex->owner = NULL;
	}

	k_sched_unlock();
   27b6a:	f000 fdd7 	bl	2871c <k_sched_unlock>
   27b6e:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   27b70:	4620      	mov	r0, r4
   27b72:	f000 fc21 	bl	283b8 <_add_thread_to_ready_q>
   27b76:	e7ed      	b.n	27b54 <_impl_k_mutex_unlock+0xd4>
   27b78:	f386 8811 	msr	BASEPRI, r6
		mutex->owner = NULL;
   27b7c:	2300      	movs	r3, #0
   27b7e:	60ab      	str	r3, [r5, #8]
   27b80:	e7f3      	b.n	27b6a <_impl_k_mutex_unlock+0xea>
   27b82:	bf00      	nop
   27b84:	20002810 	.word	0x20002810
   27b88:	20002bc8 	.word	0x20002bc8

00027b8c <_signal_poll_event>:
}

/* must be called with interrupts locked */
static int _signal_poll_event(struct k_poll_event *event, u32_t state,
			      int *must_reschedule)
{
   27b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   27b8e:	4604      	mov	r4, r0
   27b90:	460d      	mov	r5, r1
	*must_reschedule = 0;
   27b92:	2300      	movs	r3, #0
   27b94:	6013      	str	r3, [r2, #0]

	if (!event->poller) {
   27b96:	6883      	ldr	r3, [r0, #8]
   27b98:	2b00      	cmp	r3, #0
   27b9a:	d042      	beq.n	27c22 <_signal_poll_event+0x96>
   27b9c:	4616      	mov	r6, r2
		goto ready_event;
	}

	struct k_thread *thread = event->poller->thread;
   27b9e:	6818      	ldr	r0, [r3, #0]
	thread->base.thread_state &= ~states;
   27ba0:	7a43      	ldrb	r3, [r0, #9]
   27ba2:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   27ba6:	7243      	strb	r3, [r0, #9]

	__ASSERT(event->poller->thread, "poller should have a thread\n");

	clear_polling_state(thread);

	if (!_is_thread_pending(thread)) {
   27ba8:	f013 0f02 	tst.w	r3, #2
   27bac:	d039      	beq.n	27c22 <_signal_poll_event+0x96>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   27bae:	6a03      	ldr	r3, [r0, #32]
		goto ready_event;
	}

	if (_is_thread_timeout_expired(thread)) {
   27bb0:	f113 0f02 	cmn.w	r3, #2
   27bb4:	d060      	beq.n	27c78 <_signal_poll_event+0xec>
	node->prev->next = node->next;
   27bb6:	6843      	ldr	r3, [r0, #4]
   27bb8:	6802      	ldr	r2, [r0, #0]
   27bba:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27bbc:	6803      	ldr	r3, [r0, #0]
   27bbe:	6842      	ldr	r2, [r0, #4]
   27bc0:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   27bc2:	7a43      	ldrb	r3, [r0, #9]
   27bc4:	f023 0302 	bic.w	r3, r3, #2
   27bc8:	7243      	strb	r3, [r0, #9]
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   27bca:	6a02      	ldr	r2, [r0, #32]
   27bcc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   27bd0:	d013      	beq.n	27bfa <_signal_poll_event+0x6e>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   27bd2:	f100 0310 	add.w	r3, r0, #16
	return list->tail == node;
   27bd6:	492a      	ldr	r1, [pc, #168]	; (27c80 <_signal_poll_event+0xf4>)
   27bd8:	6909      	ldr	r1, [r1, #16]
   27bda:	428b      	cmp	r3, r1
   27bdc:	d004      	beq.n	27be8 <_signal_poll_event+0x5c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27bde:	b103      	cbz	r3, 27be2 <_signal_poll_event+0x56>
	return (node == list->tail) ? NULL : node->next;
   27be0:	6903      	ldr	r3, [r0, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   27be2:	6919      	ldr	r1, [r3, #16]
   27be4:	440a      	add	r2, r1
   27be6:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   27be8:	6943      	ldr	r3, [r0, #20]
   27bea:	6902      	ldr	r2, [r0, #16]
   27bec:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   27bee:	6903      	ldr	r3, [r0, #16]
   27bf0:	6942      	ldr	r2, [r0, #20]
   27bf2:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   27bf4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   27bf8:	6203      	str	r3, [r0, #32]
		return -EAGAIN;
	}

	_unpend_thread(thread);
	_abort_thread_timeout(thread);
	_set_thread_return_value(thread,
   27bfa:	b965      	cbnz	r5, 27c16 <_signal_poll_event+0x8a>
   27bfc:	f06f 0303 	mvn.w	r3, #3
   27c00:	6643      	str	r3, [r0, #100]	; 0x64
	u8_t state = thread->base.thread_state;
   27c02:	7a43      	ldrb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   27c04:	f013 0f1f 	tst.w	r3, #31
   27c08:	d109      	bne.n	27c1e <_signal_poll_event+0x92>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   27c0a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   27c0c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   27c10:	d003      	beq.n	27c1a <_signal_poll_event+0x8e>
   27c12:	2700      	movs	r7, #0
   27c14:	e004      	b.n	27c20 <_signal_poll_event+0x94>
   27c16:	2300      	movs	r3, #0
   27c18:	e7f2      	b.n	27c00 <_signal_poll_event+0x74>
   27c1a:	2701      	movs	r7, #1
   27c1c:	e000      	b.n	27c20 <_signal_poll_event+0x94>
   27c1e:	2700      	movs	r7, #0
				 state == K_POLL_STATE_NOT_READY ? -EINTR : 0);

	if (!_is_thread_ready(thread)) {
   27c20:	b947      	cbnz	r7, 27c34 <_signal_poll_event+0xa8>
	event->poller = NULL;
   27c22:	2000      	movs	r0, #0
   27c24:	60a0      	str	r0, [r4, #8]
	event->state |= state;
   27c26:	7b63      	ldrb	r3, [r4, #13]
   27c28:	ea45 1513 	orr.w	r5, r5, r3, lsr #4
   27c2c:	f365 1307 	bfi	r3, r5, #4, #4
   27c30:	7363      	strb	r3, [r4, #13]
	_add_thread_to_ready_q(thread);
	*must_reschedule = !_is_in_isr() && _must_switch_threads();

ready_event:
	set_event_ready(event, state);
	return 0;
   27c32:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	_add_thread_to_ready_q(thread);
   27c34:	f000 fbc0 	bl	283b8 <_add_thread_to_ready_q>
	__asm__ volatile("mrs %0, IPSR\n\t" : "=r"(vector));
   27c38:	f3ef 8305 	mrs	r3, IPSR
		|| (vector && !(SCB->ICSR & SCB_ICSR_RETTOBASE_Msk))
   27c3c:	2b0d      	cmp	r3, #13
   27c3e:	d807      	bhi.n	27c50 <_signal_poll_event+0xc4>
   27c40:	b19b      	cbz	r3, 27c6a <_signal_poll_event+0xde>
   27c42:	4b10      	ldr	r3, [pc, #64]	; (27c84 <_signal_poll_event+0xf8>)
   27c44:	685b      	ldr	r3, [r3, #4]
   27c46:	f413 6f00 	tst.w	r3, #2048	; 0x800
   27c4a:	d010      	beq.n	27c6e <_signal_poll_event+0xe2>
   27c4c:	2300      	movs	r3, #0
   27c4e:	e000      	b.n	27c52 <_signal_poll_event+0xc6>
   27c50:	463b      	mov	r3, r7
	*must_reschedule = !_is_in_isr() && _must_switch_threads();
   27c52:	b973      	cbnz	r3, 27c72 <_signal_poll_event+0xe6>
	return _is_preempt(_current) && __must_switch_threads();
   27c54:	4a0a      	ldr	r2, [pc, #40]	; (27c80 <_signal_poll_event+0xf4>)
   27c56:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   27c58:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   27c5a:	2a7f      	cmp	r2, #127	; 0x7f
   27c5c:	d80a      	bhi.n	27c74 <_signal_poll_event+0xe8>
   27c5e:	f000 fccf 	bl	28600 <__must_switch_threads>
   27c62:	4603      	mov	r3, r0
   27c64:	b130      	cbz	r0, 27c74 <_signal_poll_event+0xe8>
   27c66:	463b      	mov	r3, r7
   27c68:	e004      	b.n	27c74 <_signal_poll_event+0xe8>
   27c6a:	2300      	movs	r3, #0
   27c6c:	e7f1      	b.n	27c52 <_signal_poll_event+0xc6>
   27c6e:	463b      	mov	r3, r7
   27c70:	e7ef      	b.n	27c52 <_signal_poll_event+0xc6>
   27c72:	2300      	movs	r3, #0
   27c74:	6033      	str	r3, [r6, #0]
   27c76:	e7d4      	b.n	27c22 <_signal_poll_event+0x96>
		return -EAGAIN;
   27c78:	f06f 000a 	mvn.w	r0, #10
}
   27c7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   27c7e:	bf00      	nop
   27c80:	20002810 	.word	0x20002810
   27c84:	e000ed00 	.word	0xe000ed00

00027c88 <k_poll_event_init>:
{
   27c88:	b430      	push	{r4, r5}
	event->poller = NULL;
   27c8a:	2500      	movs	r5, #0
   27c8c:	6085      	str	r5, [r0, #8]
	event->type = type;
   27c8e:	7b44      	ldrb	r4, [r0, #13]
   27c90:	f361 0403 	bfi	r4, r1, #0, #4
	event->state = K_POLL_STATE_NOT_READY;
   27c94:	f365 1407 	bfi	r4, r5, #4, #4
   27c98:	7344      	strb	r4, [r0, #13]
	event->mode = mode;
   27c9a:	7b81      	ldrb	r1, [r0, #14]
   27c9c:	f362 0100 	bfi	r1, r2, #0, #1
   27ca0:	7381      	strb	r1, [r0, #14]
	event->unused = 0;
   27ca2:	89c2      	ldrh	r2, [r0, #14]
   27ca4:	f365 024f 	bfi	r2, r5, #1, #15
   27ca8:	81c2      	strh	r2, [r0, #14]
	event->obj = obj;
   27caa:	6103      	str	r3, [r0, #16]
}
   27cac:	bc30      	pop	{r4, r5}
   27cae:	4770      	bx	lr

00027cb0 <k_poll>:
{
   27cb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   27cb4:	b085      	sub	sp, #20
   27cb6:	4691      	mov	r9, r2
	__asm__ volatile(
   27cb8:	f04f 0320 	mov.w	r3, #32
   27cbc:	f3ef 8511 	mrs	r5, BASEPRI
   27cc0:	f383 8811 	msr	BASEPRI, r3
	set_polling_state(_current);
   27cc4:	4ab7      	ldr	r2, [pc, #732]	; (27fa4 <k_poll+0x2f4>)
   27cc6:	6894      	ldr	r4, [r2, #8]
	thread->base.thread_state |= states;
   27cc8:	7a63      	ldrb	r3, [r4, #9]
   27cca:	f043 0320 	orr.w	r3, r3, #32
   27cce:	7263      	strb	r3, [r4, #9]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   27cd0:	f385 8811 	msr	BASEPRI, r5
	struct _poller poller = { .thread = _current };
   27cd4:	6893      	ldr	r3, [r2, #8]
   27cd6:	9303      	str	r3, [sp, #12]
	for (int ii = 0; ii < num_events; ii++) {
   27cd8:	2300      	movs	r3, #0
	int last_registered = -1, rc;
   27cda:	f04f 34ff 	mov.w	r4, #4294967295	; 0xffffffff
	for (int ii = 0; ii < num_events; ii++) {
   27cde:	e01e      	b.n	27d1e <k_poll+0x6e>
		if (k_sem_count_get(event->sem) > 0) {
   27ce0:	6917      	ldr	r7, [r2, #16]
   27ce2:	68bf      	ldr	r7, [r7, #8]
   27ce4:	b14f      	cbz	r7, 27cfa <k_poll+0x4a>
			*state = K_POLL_STATE_SEM_AVAILABLE;
   27ce6:	f04f 0e02 	mov.w	lr, #2
			return 1;
   27cea:	2701      	movs	r7, #1
   27cec:	e005      	b.n	27cfa <k_poll+0x4a>
		if (!k_queue_is_empty(event->queue)) {
   27cee:	6917      	ldr	r7, [r2, #16]
	return (!list->head);
   27cf0:	683f      	ldr	r7, [r7, #0]
   27cf2:	b117      	cbz	r7, 27cfa <k_poll+0x4a>
			*state = K_POLL_STATE_FIFO_DATA_AVAILABLE;
   27cf4:	f04f 0e04 	mov.w	lr, #4
			return 1;
   27cf8:	2701      	movs	r7, #1
		if (is_condition_met(&events[ii], &state)) {
   27cfa:	b387      	cbz	r7, 27d5e <k_poll+0xae>
	event->poller = NULL;
   27cfc:	2500      	movs	r5, #0
   27cfe:	6095      	str	r5, [r2, #8]
	event->state |= state;
   27d00:	7b55      	ldrb	r5, [r2, #13]
   27d02:	ea4e 1715 	orr.w	r7, lr, r5, lsr #4
   27d06:	f367 1507 	bfi	r5, r7, #4, #4
   27d0a:	7355      	strb	r5, [r2, #13]
			clear_polling_state(_current);
   27d0c:	4aa5      	ldr	r2, [pc, #660]	; (27fa4 <k_poll+0x2f4>)
   27d0e:	6895      	ldr	r5, [r2, #8]
	thread->base.thread_state &= ~states;
   27d10:	7a6a      	ldrb	r2, [r5, #9]
   27d12:	f022 0220 	bic.w	r2, r2, #32
   27d16:	726a      	strb	r2, [r5, #9]
   27d18:	f386 8811 	msr	BASEPRI, r6
	for (int ii = 0; ii < num_events; ii++) {
   27d1c:	3301      	adds	r3, #1
   27d1e:	428b      	cmp	r3, r1
   27d20:	f280 8191 	bge.w	28046 <k_poll+0x396>
	__asm__ volatile(
   27d24:	f04f 0220 	mov.w	r2, #32
   27d28:	f3ef 8611 	mrs	r6, BASEPRI
   27d2c:	f382 8811 	msr	BASEPRI, r2
		if (is_condition_met(&events[ii], &state)) {
   27d30:	eb03 0283 	add.w	r2, r3, r3, lsl #2
   27d34:	0095      	lsls	r5, r2, #2
   27d36:	1942      	adds	r2, r0, r5
	switch (event->type) {
   27d38:	7b57      	ldrb	r7, [r2, #13]
   27d3a:	f007 070f 	and.w	r7, r7, #15
   27d3e:	2f02      	cmp	r7, #2
   27d40:	d0ce      	beq.n	27ce0 <k_poll+0x30>
   27d42:	2f04      	cmp	r7, #4
   27d44:	d0d3      	beq.n	27cee <k_poll+0x3e>
   27d46:	2f01      	cmp	r7, #1
   27d48:	d001      	beq.n	27d4e <k_poll+0x9e>
		return 0;
   27d4a:	2700      	movs	r7, #0
   27d4c:	e7d5      	b.n	27cfa <k_poll+0x4a>
		if (event->signal->signaled) {
   27d4e:	6917      	ldr	r7, [r2, #16]
   27d50:	68bf      	ldr	r7, [r7, #8]
   27d52:	2f00      	cmp	r7, #0
   27d54:	d0d1      	beq.n	27cfa <k_poll+0x4a>
			*state = K_POLL_STATE_SIGNALED;
   27d56:	f04f 0e01 	mov.w	lr, #1
			return 1;
   27d5a:	4677      	mov	r7, lr
   27d5c:	e7cd      	b.n	27cfa <k_poll+0x4a>
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27d5e:	f1b9 0f00 	cmp.w	r9, #0
   27d62:	d0d9      	beq.n	27d18 <k_poll+0x68>
	return _is_thread_polling(_current);
   27d64:	4f8f      	ldr	r7, [pc, #572]	; (27fa4 <k_poll+0x2f4>)
   27d66:	68bf      	ldr	r7, [r7, #8]
	return !!(thread->base.thread_state & state);
   27d68:	7a7f      	ldrb	r7, [r7, #9]
		} else if (timeout != K_NO_WAIT && is_polling()) {
   27d6a:	f017 0f20 	tst.w	r7, #32
   27d6e:	d0d3      	beq.n	27d18 <k_poll+0x68>
	switch (event->type) {
   27d70:	7b57      	ldrb	r7, [r2, #13]
   27d72:	f007 070f 	and.w	r7, r7, #15
   27d76:	2f02      	cmp	r7, #2
   27d78:	d008      	beq.n	27d8c <k_poll+0xdc>
   27d7a:	2f04      	cmp	r7, #4
   27d7c:	d07a      	beq.n	27e74 <k_poll+0x1c4>
   27d7e:	2f01      	cmp	r7, #1
   27d80:	f000 80ec 	beq.w	27f5c <k_poll+0x2ac>
	event->poller = poller;
   27d84:	ad03      	add	r5, sp, #12
   27d86:	6095      	str	r5, [r2, #8]
				++last_registered;
   27d88:	3401      	adds	r4, #1
   27d8a:	e7c5      	b.n	27d18 <k_poll+0x68>
		add_event(&event->sem->poll_events, event, poller);
   27d8c:	6917      	ldr	r7, [r2, #16]
   27d8e:	f107 0c10 	add.w	ip, r7, #16
	return list->head == list;
   27d92:	f8d7 8010 	ldr.w	r8, [r7, #16]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27d96:	45c4      	cmp	ip, r8
   27d98:	d010      	beq.n	27dbc <k_poll+0x10c>
   27d9a:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27d9e:	b17f      	cbz	r7, 27dc0 <k_poll+0x110>
   27da0:	68bf      	ldr	r7, [r7, #8]
   27da2:	683f      	ldr	r7, [r7, #0]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   27da4:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27da8:	9f03      	ldr	r7, [sp, #12]
   27daa:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27dae:	45da      	cmp	sl, fp
   27db0:	db06      	blt.n	27dc0 <k_poll+0x110>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27db2:	45c4      	cmp	ip, r8
   27db4:	d12e      	bne.n	27e14 <k_poll+0x164>
   27db6:	f04f 0800 	mov.w	r8, #0
   27dba:	e02b      	b.n	27e14 <k_poll+0x164>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27dbc:	2700      	movs	r7, #0
   27dbe:	e7ee      	b.n	27d9e <k_poll+0xee>
	node->next = list;
   27dc0:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27dc4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27dc8:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27dca:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27dce:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27dd0:	f8cc 2004 	str.w	r2, [ip, #4]
   27dd4:	e7d6      	b.n	27d84 <k_poll+0xd4>
	if (!insert_point) {
   27dd6:	f1b8 0f00 	cmp.w	r8, #0
   27dda:	d00a      	beq.n	27df2 <k_poll+0x142>
		node->prev = insert_point->prev;
   27ddc:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27de0:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27de2:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27de6:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27dea:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27dec:	f8c8 2004 	str.w	r2, [r8, #4]
   27df0:	e7c8      	b.n	27d84 <k_poll+0xd4>
	node->next = list;
   27df2:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27df6:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27dfa:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27dfc:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27e00:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27e02:	f8cc 2004 	str.w	r2, [ip, #4]
   27e06:	e7bd      	b.n	27d84 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27e08:	4647      	mov	r7, r8
   27e0a:	e017      	b.n	27e3c <k_poll+0x18c>
	return (node == list->tail) ? NULL : node->next;
   27e0c:	2700      	movs	r7, #0
   27e0e:	e015      	b.n	27e3c <k_poll+0x18c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27e10:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27e14:	f1b8 0f00 	cmp.w	r8, #0
   27e18:	d021      	beq.n	27e5e <k_poll+0x1ae>
					       pending->poller->thread)) {
   27e1a:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27e1e:	683f      	ldr	r7, [r7, #0]
   27e20:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27e24:	45bb      	cmp	fp, r7
   27e26:	dbd6      	blt.n	27dd6 <k_poll+0x126>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27e28:	46c2      	mov	sl, r8
   27e2a:	f1b8 0f00 	cmp.w	r8, #0
   27e2e:	d0eb      	beq.n	27e08 <k_poll+0x158>
	return (node == list->tail) ? NULL : node->next;
   27e30:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27e34:	45b8      	cmp	r8, r7
   27e36:	d0e9      	beq.n	27e0c <k_poll+0x15c>
   27e38:	f8d8 7000 	ldr.w	r7, [r8]
   27e3c:	b167      	cbz	r7, 27e58 <k_poll+0x1a8>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27e3e:	f1ba 0f00 	cmp.w	sl, #0
   27e42:	d0e5      	beq.n	27e10 <k_poll+0x160>
	return (node == list->tail) ? NULL : node->next;
   27e44:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27e48:	45ba      	cmp	sl, r7
   27e4a:	d002      	beq.n	27e52 <k_poll+0x1a2>
   27e4c:	f8d8 8000 	ldr.w	r8, [r8]
   27e50:	e7e0      	b.n	27e14 <k_poll+0x164>
   27e52:	f04f 0800 	mov.w	r8, #0
   27e56:	e7dd      	b.n	27e14 <k_poll+0x164>
   27e58:	f04f 0800 	mov.w	r8, #0
   27e5c:	e7da      	b.n	27e14 <k_poll+0x164>
	node->next = list;
   27e5e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27e62:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27e66:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27e68:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27e6c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27e6e:	f8cc 2004 	str.w	r2, [ip, #4]
   27e72:	e787      	b.n	27d84 <k_poll+0xd4>
		add_event(&event->queue->poll_events, event, poller);
   27e74:	6917      	ldr	r7, [r2, #16]
   27e76:	f107 0c08 	add.w	ip, r7, #8
	return list->head == list;
   27e7a:	f8d7 8008 	ldr.w	r8, [r7, #8]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27e7e:	45c4      	cmp	ip, r8
   27e80:	d010      	beq.n	27ea4 <k_poll+0x1f4>
   27e82:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27e86:	b17f      	cbz	r7, 27ea8 <k_poll+0x1f8>
   27e88:	68bf      	ldr	r7, [r7, #8]
   27e8a:	683f      	ldr	r7, [r7, #0]
   27e8c:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27e90:	9f03      	ldr	r7, [sp, #12]
   27e92:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27e96:	45da      	cmp	sl, fp
   27e98:	db06      	blt.n	27ea8 <k_poll+0x1f8>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27e9a:	45c4      	cmp	ip, r8
   27e9c:	d12e      	bne.n	27efc <k_poll+0x24c>
   27e9e:	f04f 0800 	mov.w	r8, #0
   27ea2:	e02b      	b.n	27efc <k_poll+0x24c>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27ea4:	2700      	movs	r7, #0
   27ea6:	e7ee      	b.n	27e86 <k_poll+0x1d6>
	node->next = list;
   27ea8:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27eac:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27eb0:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27eb2:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27eb6:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27eb8:	f8cc 2004 	str.w	r2, [ip, #4]
   27ebc:	e762      	b.n	27d84 <k_poll+0xd4>
	if (!insert_point) {
   27ebe:	f1b8 0f00 	cmp.w	r8, #0
   27ec2:	d00a      	beq.n	27eda <k_poll+0x22a>
		node->prev = insert_point->prev;
   27ec4:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27ec8:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27eca:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27ece:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27ed2:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27ed4:	f8c8 2004 	str.w	r2, [r8, #4]
   27ed8:	e754      	b.n	27d84 <k_poll+0xd4>
	node->next = list;
   27eda:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27ede:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ee2:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27ee4:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27ee8:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27eea:	f8cc 2004 	str.w	r2, [ip, #4]
   27eee:	e749      	b.n	27d84 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27ef0:	4647      	mov	r7, r8
   27ef2:	e017      	b.n	27f24 <k_poll+0x274>
	return (node == list->tail) ? NULL : node->next;
   27ef4:	2700      	movs	r7, #0
   27ef6:	e015      	b.n	27f24 <k_poll+0x274>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27ef8:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27efc:	f1b8 0f00 	cmp.w	r8, #0
   27f00:	d021      	beq.n	27f46 <k_poll+0x296>
					       pending->poller->thread)) {
   27f02:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27f06:	683f      	ldr	r7, [r7, #0]
   27f08:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27f0c:	45bb      	cmp	fp, r7
   27f0e:	dbd6      	blt.n	27ebe <k_poll+0x20e>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27f10:	46c2      	mov	sl, r8
   27f12:	f1b8 0f00 	cmp.w	r8, #0
   27f16:	d0eb      	beq.n	27ef0 <k_poll+0x240>
	return (node == list->tail) ? NULL : node->next;
   27f18:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27f1c:	45b8      	cmp	r8, r7
   27f1e:	d0e9      	beq.n	27ef4 <k_poll+0x244>
   27f20:	f8d8 7000 	ldr.w	r7, [r8]
   27f24:	b167      	cbz	r7, 27f40 <k_poll+0x290>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27f26:	f1ba 0f00 	cmp.w	sl, #0
   27f2a:	d0e5      	beq.n	27ef8 <k_poll+0x248>
	return (node == list->tail) ? NULL : node->next;
   27f2c:	f8dc 7004 	ldr.w	r7, [ip, #4]
   27f30:	45ba      	cmp	sl, r7
   27f32:	d002      	beq.n	27f3a <k_poll+0x28a>
   27f34:	f8d8 8000 	ldr.w	r8, [r8]
   27f38:	e7e0      	b.n	27efc <k_poll+0x24c>
   27f3a:	f04f 0800 	mov.w	r8, #0
   27f3e:	e7dd      	b.n	27efc <k_poll+0x24c>
   27f40:	f04f 0800 	mov.w	r8, #0
   27f44:	e7da      	b.n	27efc <k_poll+0x24c>
	node->next = list;
   27f46:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27f4a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27f4e:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27f50:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27f54:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27f56:	f8cc 2004 	str.w	r2, [ip, #4]
   27f5a:	e713      	b.n	27d84 <k_poll+0xd4>
		add_event(&event->signal->poll_events, event, poller);
   27f5c:	f8d2 c010 	ldr.w	ip, [r2, #16]
	return list->head == list;
   27f60:	f8dc 8000 	ldr.w	r8, [ip]
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27f64:	45c4      	cmp	ip, r8
   27f66:	d010      	beq.n	27f8a <k_poll+0x2da>
   27f68:	f8dc 7004 	ldr.w	r7, [ip, #4]
	if (!pending || _is_t1_higher_prio_than_t2(pending->poller->thread,
   27f6c:	b17f      	cbz	r7, 27f8e <k_poll+0x2de>
   27f6e:	68bf      	ldr	r7, [r7, #8]
   27f70:	683f      	ldr	r7, [r7, #0]
   27f72:	f997 a00a 	ldrsb.w	sl, [r7, #10]
   27f76:	9f03      	ldr	r7, [sp, #12]
   27f78:	f997 b00a 	ldrsb.w	fp, [r7, #10]
   27f7c:	45da      	cmp	sl, fp
   27f7e:	db06      	blt.n	27f8e <k_poll+0x2de>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   27f80:	45c4      	cmp	ip, r8
   27f82:	d130      	bne.n	27fe6 <k_poll+0x336>
   27f84:	f04f 0800 	mov.w	r8, #0
   27f88:	e02d      	b.n	27fe6 <k_poll+0x336>
	return sys_dlist_is_empty(list) ? NULL : list->tail;
   27f8a:	2700      	movs	r7, #0
   27f8c:	e7ee      	b.n	27f6c <k_poll+0x2bc>
	node->next = list;
   27f8e:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27f92:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27f96:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27f98:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27f9c:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27f9e:	f8cc 2004 	str.w	r2, [ip, #4]
   27fa2:	e6ef      	b.n	27d84 <k_poll+0xd4>
   27fa4:	20002810 	.word	0x20002810
	if (!insert_point) {
   27fa8:	f1b8 0f00 	cmp.w	r8, #0
   27fac:	d00a      	beq.n	27fc4 <k_poll+0x314>
		node->prev = insert_point->prev;
   27fae:	f8d8 7004 	ldr.w	r7, [r8, #4]
   27fb2:	6057      	str	r7, [r2, #4]
		node->next = insert_point;
   27fb4:	f840 8005 	str.w	r8, [r0, r5]
		insert_point->prev->next = node;
   27fb8:	f8d8 5004 	ldr.w	r5, [r8, #4]
   27fbc:	602a      	str	r2, [r5, #0]
		insert_point->prev = node;
   27fbe:	f8c8 2004 	str.w	r2, [r8, #4]
   27fc2:	e6df      	b.n	27d84 <k_poll+0xd4>
	node->next = list;
   27fc4:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   27fc8:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27fcc:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   27fce:	f8dc 5004 	ldr.w	r5, [ip, #4]
   27fd2:	602a      	str	r2, [r5, #0]
	list->tail = node;
   27fd4:	f8cc 2004 	str.w	r2, [ip, #4]
   27fd8:	e6d4      	b.n	27d84 <k_poll+0xd4>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27fda:	4647      	mov	r7, r8
   27fdc:	e017      	b.n	2800e <k_poll+0x35e>
	return (node == list->tail) ? NULL : node->next;
   27fde:	2700      	movs	r7, #0
   27fe0:	e015      	b.n	2800e <k_poll+0x35e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   27fe2:	f04f 0800 	mov.w	r8, #0
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27fe6:	f1b8 0f00 	cmp.w	r8, #0
   27fea:	d021      	beq.n	28030 <k_poll+0x380>
					       pending->poller->thread)) {
   27fec:	f8d8 7008 	ldr.w	r7, [r8, #8]
		if (_is_t1_higher_prio_than_t2(poller->thread,
   27ff0:	683f      	ldr	r7, [r7, #0]
   27ff2:	f997 700a 	ldrsb.w	r7, [r7, #10]
   27ff6:	45bb      	cmp	fp, r7
   27ff8:	dbd6      	blt.n	27fa8 <k_poll+0x2f8>
	SYS_DLIST_FOR_EACH_CONTAINER(events, pending, _node) {
   27ffa:	46c2      	mov	sl, r8
   27ffc:	f1b8 0f00 	cmp.w	r8, #0
   28000:	d0eb      	beq.n	27fda <k_poll+0x32a>
	return (node == list->tail) ? NULL : node->next;
   28002:	f8dc 7004 	ldr.w	r7, [ip, #4]
   28006:	45b8      	cmp	r8, r7
   28008:	d0e9      	beq.n	27fde <k_poll+0x32e>
   2800a:	f8d8 7000 	ldr.w	r7, [r8]
   2800e:	b167      	cbz	r7, 2802a <k_poll+0x37a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28010:	f1ba 0f00 	cmp.w	sl, #0
   28014:	d0e5      	beq.n	27fe2 <k_poll+0x332>
	return (node == list->tail) ? NULL : node->next;
   28016:	f8dc 7004 	ldr.w	r7, [ip, #4]
   2801a:	45ba      	cmp	sl, r7
   2801c:	d002      	beq.n	28024 <k_poll+0x374>
   2801e:	f8d8 8000 	ldr.w	r8, [r8]
   28022:	e7e0      	b.n	27fe6 <k_poll+0x336>
   28024:	f04f 0800 	mov.w	r8, #0
   28028:	e7dd      	b.n	27fe6 <k_poll+0x336>
   2802a:	f04f 0800 	mov.w	r8, #0
   2802e:	e7da      	b.n	27fe6 <k_poll+0x336>
	node->next = list;
   28030:	f840 c005 	str.w	ip, [r0, r5]
	node->prev = list->tail;
   28034:	f8dc 5004 	ldr.w	r5, [ip, #4]
   28038:	6055      	str	r5, [r2, #4]
	list->tail->next = node;
   2803a:	f8dc 5004 	ldr.w	r5, [ip, #4]
   2803e:	602a      	str	r2, [r5, #0]
	list->tail = node;
   28040:	f8cc 2004 	str.w	r2, [ip, #4]
   28044:	e69e      	b.n	27d84 <k_poll+0xd4>
   28046:	f04f 0320 	mov.w	r3, #32
   2804a:	f3ef 8511 	mrs	r5, BASEPRI
   2804e:	f383 8811 	msr	BASEPRI, r3
	return _is_thread_polling(_current);
   28052:	4b46      	ldr	r3, [pc, #280]	; (2816c <k_poll+0x4bc>)
   28054:	689a      	ldr	r2, [r3, #8]
	return !!(thread->base.thread_state & state);
   28056:	7a53      	ldrb	r3, [r2, #9]
	if (!is_polling()) {
   28058:	f013 0f20 	tst.w	r3, #32
   2805c:	d047      	beq.n	280ee <k_poll+0x43e>
	thread->base.thread_state &= ~states;
   2805e:	f023 0320 	bic.w	r3, r3, #32
   28062:	7253      	strb	r3, [r2, #9]
	if (timeout == K_NO_WAIT) {
   28064:	f1b9 0f00 	cmp.w	r9, #0
   28068:	d049      	beq.n	280fe <k_poll+0x44e>
   2806a:	4649      	mov	r1, r9
   2806c:	4606      	mov	r6, r0
	_wait_q_t wait_q = _WAIT_Q_INIT(&wait_q);
   2806e:	a801      	add	r0, sp, #4
   28070:	9001      	str	r0, [sp, #4]
   28072:	9002      	str	r0, [sp, #8]
	_pend_current_thread(&wait_q, timeout);
   28074:	f000 fab4 	bl	285e0 <_pend_current_thread>
	_update_time_slice_before_swap();
   28078:	f000 fb30 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   2807c:	4628      	mov	r0, r5
   2807e:	f7fe fe73 	bl	26d68 <__swap>
   28082:	f04f 0320 	mov.w	r3, #32
   28086:	f3ef 8e11 	mrs	lr, BASEPRI
   2808a:	f383 8811 	msr	BASEPRI, r3
   2808e:	4675      	mov	r5, lr
   28090:	e049      	b.n	28126 <k_poll+0x476>
	node->prev->next = node->next;
   28092:	6853      	ldr	r3, [r2, #4]
   28094:	5847      	ldr	r7, [r0, r1]
   28096:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   28098:	5843      	ldr	r3, [r0, r1]
   2809a:	6852      	ldr	r2, [r2, #4]
   2809c:	605a      	str	r2, [r3, #4]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2809e:	f386 8811 	msr	BASEPRI, r6
	__asm__ volatile(
   280a2:	f04f 0320 	mov.w	r3, #32
   280a6:	f3ef 8611 	mrs	r6, BASEPRI
   280aa:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   280ae:	3c01      	subs	r4, #1
   280b0:	2c00      	cmp	r4, #0
   280b2:	db1e      	blt.n	280f2 <k_poll+0x442>
		clear_event_registration(&events[last_registered]);
   280b4:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   280b8:	0099      	lsls	r1, r3, #2
   280ba:	1842      	adds	r2, r0, r1
	event->poller = NULL;
   280bc:	2300      	movs	r3, #0
   280be:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   280c0:	7b53      	ldrb	r3, [r2, #13]
   280c2:	f003 030f 	and.w	r3, r3, #15
   280c6:	2b02      	cmp	r3, #2
   280c8:	d0e3      	beq.n	28092 <k_poll+0x3e2>
   280ca:	2b04      	cmp	r3, #4
   280cc:	d008      	beq.n	280e0 <k_poll+0x430>
   280ce:	2b01      	cmp	r3, #1
   280d0:	d1e5      	bne.n	2809e <k_poll+0x3ee>
	node->prev->next = node->next;
   280d2:	6853      	ldr	r3, [r2, #4]
   280d4:	5847      	ldr	r7, [r0, r1]
   280d6:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   280d8:	5843      	ldr	r3, [r0, r1]
   280da:	6852      	ldr	r2, [r2, #4]
   280dc:	605a      	str	r2, [r3, #4]
   280de:	e7de      	b.n	2809e <k_poll+0x3ee>
	node->prev->next = node->next;
   280e0:	6853      	ldr	r3, [r2, #4]
   280e2:	5847      	ldr	r7, [r0, r1]
   280e4:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   280e6:	5843      	ldr	r3, [r0, r1]
   280e8:	6852      	ldr	r2, [r2, #4]
   280ea:	605a      	str	r2, [r3, #4]
   280ec:	e7d7      	b.n	2809e <k_poll+0x3ee>
   280ee:	462e      	mov	r6, r5
   280f0:	e7de      	b.n	280b0 <k_poll+0x400>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   280f2:	f385 8811 	msr	BASEPRI, r5
		return 0;
   280f6:	2000      	movs	r0, #0
}
   280f8:	b005      	add	sp, #20
   280fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   280fe:	f385 8811 	msr	BASEPRI, r5
		return -EAGAIN;
   28102:	f06f 000a 	mvn.w	r0, #10
   28106:	e7f7      	b.n	280f8 <k_poll+0x448>
	node->prev->next = node->next;
   28108:	6853      	ldr	r3, [r2, #4]
   2810a:	5877      	ldr	r7, [r6, r1]
   2810c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2810e:	5873      	ldr	r3, [r6, r1]
   28110:	6852      	ldr	r2, [r2, #4]
   28112:	605a      	str	r2, [r3, #4]
   28114:	f385 8811 	msr	BASEPRI, r5
	__asm__ volatile(
   28118:	f04f 0320 	mov.w	r3, #32
   2811c:	f3ef 8511 	mrs	r5, BASEPRI
   28120:	f383 8811 	msr	BASEPRI, r3
	for (; last_registered >= 0; last_registered--) {
   28124:	3c01      	subs	r4, #1
   28126:	2c00      	cmp	r4, #0
   28128:	db1c      	blt.n	28164 <k_poll+0x4b4>
		clear_event_registration(&events[last_registered]);
   2812a:	eb04 0384 	add.w	r3, r4, r4, lsl #2
   2812e:	0099      	lsls	r1, r3, #2
   28130:	1872      	adds	r2, r6, r1
	event->poller = NULL;
   28132:	2300      	movs	r3, #0
   28134:	6093      	str	r3, [r2, #8]
	switch (event->type) {
   28136:	7b53      	ldrb	r3, [r2, #13]
   28138:	f003 030f 	and.w	r3, r3, #15
   2813c:	2b02      	cmp	r3, #2
   2813e:	d0e3      	beq.n	28108 <k_poll+0x458>
   28140:	2b04      	cmp	r3, #4
   28142:	d008      	beq.n	28156 <k_poll+0x4a6>
   28144:	2b01      	cmp	r3, #1
   28146:	d1e5      	bne.n	28114 <k_poll+0x464>
	node->prev->next = node->next;
   28148:	6853      	ldr	r3, [r2, #4]
   2814a:	5877      	ldr	r7, [r6, r1]
   2814c:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2814e:	5873      	ldr	r3, [r6, r1]
   28150:	6852      	ldr	r2, [r2, #4]
   28152:	605a      	str	r2, [r3, #4]
   28154:	e7de      	b.n	28114 <k_poll+0x464>
	node->prev->next = node->next;
   28156:	6853      	ldr	r3, [r2, #4]
   28158:	5877      	ldr	r7, [r6, r1]
   2815a:	601f      	str	r7, [r3, #0]
	node->next->prev = node->prev;
   2815c:	5873      	ldr	r3, [r6, r1]
   2815e:	6852      	ldr	r2, [r2, #4]
   28160:	605a      	str	r2, [r3, #4]
   28162:	e7d7      	b.n	28114 <k_poll+0x464>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28164:	f38e 8811 	msr	BASEPRI, lr
	return swap_rc;
   28168:	e7c6      	b.n	280f8 <k_poll+0x448>
   2816a:	bf00      	nop
   2816c:	20002810 	.word	0x20002810

00028170 <_handle_obj_poll_events>:
	return list->head == list;
   28170:	6803      	ldr	r3, [r0, #0]

static inline sys_dnode_t *sys_dlist_get(sys_dlist_t *list)
{
	sys_dnode_t *node;

	if (sys_dlist_is_empty(list)) {
   28172:	4298      	cmp	r0, r3
   28174:	d010      	beq.n	28198 <_handle_obj_poll_events+0x28>
	node->prev->next = node->next;
   28176:	685a      	ldr	r2, [r3, #4]
   28178:	6818      	ldr	r0, [r3, #0]
   2817a:	6010      	str	r0, [r2, #0]
	node->next->prev = node->prev;
   2817c:	681a      	ldr	r2, [r3, #0]
   2817e:	6858      	ldr	r0, [r3, #4]
   28180:	6050      	str	r0, [r2, #4]
{
	struct k_poll_event *poll_event;
	int must_reschedule;

	poll_event = (struct k_poll_event *)sys_dlist_get(events);
	if (!poll_event) {
   28182:	b15b      	cbz	r3, 2819c <_handle_obj_poll_events+0x2c>
{
   28184:	b500      	push	{lr}
   28186:	b083      	sub	sp, #12
		return 0;
	}

	(void)_signal_poll_event(poll_event, state, &must_reschedule);
   28188:	aa01      	add	r2, sp, #4
   2818a:	4618      	mov	r0, r3
   2818c:	f7ff fcfe 	bl	27b8c <_signal_poll_event>
	return must_reschedule;
   28190:	9801      	ldr	r0, [sp, #4]
}
   28192:	b003      	add	sp, #12
   28194:	f85d fb04 	ldr.w	pc, [sp], #4
		return NULL;
   28198:	2300      	movs	r3, #0
   2819a:	e7f2      	b.n	28182 <_handle_obj_poll_events+0x12>
		return 0;
   2819c:	2000      	movs	r0, #0
   2819e:	4770      	bx	lr

000281a0 <k_poll_signal>:
	signal->signaled = 0;
	/* signal->result is left unitialized */
}

int k_poll_signal(struct k_poll_signal *signal, int result)
{
   281a0:	b530      	push	{r4, r5, lr}
   281a2:	b083      	sub	sp, #12
	__asm__ volatile(
   281a4:	f04f 0320 	mov.w	r3, #32
   281a8:	f3ef 8511 	mrs	r5, BASEPRI
   281ac:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	struct k_poll_event *poll_event;
	int must_reschedule;

	signal->result = result;
   281b0:	60c1      	str	r1, [r0, #12]
	signal->signaled = 1;
   281b2:	2301      	movs	r3, #1
   281b4:	6083      	str	r3, [r0, #8]
	return list->head == list;
   281b6:	6803      	ldr	r3, [r0, #0]
	if (sys_dlist_is_empty(list)) {
   281b8:	4298      	cmp	r0, r3
   281ba:	d013      	beq.n	281e4 <k_poll_signal+0x44>
	node->prev->next = node->next;
   281bc:	685a      	ldr	r2, [r3, #4]
   281be:	6819      	ldr	r1, [r3, #0]
   281c0:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   281c2:	681a      	ldr	r2, [r3, #0]
   281c4:	6859      	ldr	r1, [r3, #4]
   281c6:	6051      	str	r1, [r2, #4]

	poll_event = (struct k_poll_event *)sys_dlist_get(&signal->poll_events);
	if (!poll_event) {
   281c8:	b173      	cbz	r3, 281e8 <k_poll_signal+0x48>
		irq_unlock(key);
		return 0;
	}

	int rc = _signal_poll_event(poll_event, K_POLL_STATE_SIGNALED,
   281ca:	aa01      	add	r2, sp, #4
   281cc:	2101      	movs	r1, #1
   281ce:	4618      	mov	r0, r3
   281d0:	f7ff fcdc 	bl	27b8c <_signal_poll_event>
   281d4:	4604      	mov	r4, r0
				    &must_reschedule);

	if (must_reschedule) {
   281d6:	9b01      	ldr	r3, [sp, #4]
   281d8:	b953      	cbnz	r3, 281f0 <k_poll_signal+0x50>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   281da:	f385 8811 	msr	BASEPRI, r5
	} else {
		irq_unlock(key);
	}

	return rc;
}
   281de:	4620      	mov	r0, r4
   281e0:	b003      	add	sp, #12
   281e2:	bd30      	pop	{r4, r5, pc}
		return NULL;
   281e4:	2300      	movs	r3, #0
   281e6:	e7ef      	b.n	281c8 <k_poll_signal+0x28>
   281e8:	f385 8811 	msr	BASEPRI, r5
		return 0;
   281ec:	2400      	movs	r4, #0
   281ee:	e7f6      	b.n	281de <k_poll_signal+0x3e>
	_update_time_slice_before_swap();
   281f0:	f000 fa74 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   281f4:	4628      	mov	r0, r5
   281f6:	f7fe fdb7 	bl	26d68 <__swap>
   281fa:	e7f0      	b.n	281de <k_poll_signal+0x3e>

000281fc <k_queue_poll>:
	sys_slist_init(list);
}

#if defined(CONFIG_POLL)
static void *k_queue_poll(struct k_queue *queue, s32_t timeout)
{
   281fc:	b530      	push	{r4, r5, lr}
   281fe:	b087      	sub	sp, #28
   28200:	4604      	mov	r4, r0
   28202:	460d      	mov	r5, r1
	struct k_poll_event event;
	int err;
	unsigned int key;
	void *val;

	k_poll_event_init(&event, K_POLL_TYPE_FIFO_DATA_AVAILABLE,
   28204:	4603      	mov	r3, r0
   28206:	2200      	movs	r2, #0
   28208:	2104      	movs	r1, #4
   2820a:	eb0d 0001 	add.w	r0, sp, r1
   2820e:	f7ff fd3b 	bl	27c88 <k_poll_event_init>
   28212:	e005      	b.n	28220 <k_queue_poll+0x24>
   28214:	f383 8811 	msr	BASEPRI, r3
		 * irq_lock.
		 */
		key = irq_lock();
		val = sys_slist_get(&queue->data_q);
		irq_unlock(key);
	} while (!val && timeout == K_FOREVER);
   28218:	b9f8      	cbnz	r0, 2825a <k_queue_poll+0x5e>
   2821a:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   2821e:	d11c      	bne.n	2825a <k_queue_poll+0x5e>
		event.state = K_POLL_STATE_NOT_READY;
   28220:	f89d 3011 	ldrb.w	r3, [sp, #17]
   28224:	f36f 1307 	bfc	r3, #4, #4
   28228:	f88d 3011 	strb.w	r3, [sp, #17]
		err = k_poll(&event, 1, timeout);
   2822c:	462a      	mov	r2, r5
   2822e:	2101      	movs	r1, #1
   28230:	a801      	add	r0, sp, #4
   28232:	f7ff fd3d 	bl	27cb0 <k_poll>
		if (err) {
   28236:	b978      	cbnz	r0, 28258 <k_queue_poll+0x5c>
	__asm__ volatile(
   28238:	f04f 0220 	mov.w	r2, #32
   2823c:	f3ef 8311 	mrs	r3, BASEPRI
   28240:	f382 8811 	msr	BASEPRI, r2
   28244:	6820      	ldr	r0, [r4, #0]
	return sys_slist_is_empty(list) ? NULL : sys_slist_get_not_empty(list);
   28246:	2800      	cmp	r0, #0
   28248:	d0e4      	beq.n	28214 <k_queue_poll+0x18>
	list->head = node->next;
   2824a:	6802      	ldr	r2, [r0, #0]
   2824c:	6022      	str	r2, [r4, #0]
	if (list->tail == node) {
   2824e:	6861      	ldr	r1, [r4, #4]
   28250:	4288      	cmp	r0, r1
   28252:	d1df      	bne.n	28214 <k_queue_poll+0x18>
		list->tail = list->head;
   28254:	6062      	str	r2, [r4, #4]
   28256:	e7dd      	b.n	28214 <k_queue_poll+0x18>
			return NULL;
   28258:	2000      	movs	r0, #0

	return val;
}
   2825a:	b007      	add	sp, #28
   2825c:	bd30      	pop	{r4, r5, pc}

0002825e <k_queue_init>:
	list->head = NULL;
   2825e:	2300      	movs	r3, #0
   28260:	6003      	str	r3, [r0, #0]
	list->tail = NULL;
   28262:	6043      	str	r3, [r0, #4]
	sys_dlist_init(&queue->poll_events);
   28264:	f100 0308 	add.w	r3, r0, #8
	list->head = (sys_dnode_t *)list;
   28268:	6083      	str	r3, [r0, #8]
	list->tail = (sys_dnode_t *)list;
   2826a:	60c3      	str	r3, [r0, #12]
   2826c:	4770      	bx	lr

0002826e <k_queue_insert>:
{
   2826e:	b510      	push	{r4, lr}
   28270:	f04f 0320 	mov.w	r3, #32
   28274:	f3ef 8411 	mrs	r4, BASEPRI
   28278:	f383 8811 	msr	BASEPRI, r3
	if (!prev) {
   2827c:	b159      	cbz	r1, 28296 <k_queue_insert+0x28>
	} else if (!prev->next) {
   2827e:	680b      	ldr	r3, [r1, #0]
   28280:	b18b      	cbz	r3, 282a6 <k_queue_insert+0x38>
		node->next = prev->next;
   28282:	6013      	str	r3, [r2, #0]
		prev->next = node;
   28284:	600a      	str	r2, [r1, #0]
	return _handle_obj_poll_events(&queue->poll_events, state);
   28286:	2104      	movs	r1, #4
   28288:	3008      	adds	r0, #8
   2828a:	f7ff ff71 	bl	28170 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   2828e:	b998      	cbnz	r0, 282b8 <k_queue_insert+0x4a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28290:	f384 8811 	msr	BASEPRI, r4
   28294:	bd10      	pop	{r4, pc}
	node->next = list->head;
   28296:	6803      	ldr	r3, [r0, #0]
   28298:	6013      	str	r3, [r2, #0]
	list->head = node;
   2829a:	6002      	str	r2, [r0, #0]
	if (!list->tail) {
   2829c:	6843      	ldr	r3, [r0, #4]
   2829e:	2b00      	cmp	r3, #0
   282a0:	d1f1      	bne.n	28286 <k_queue_insert+0x18>
		list->tail = list->head;
   282a2:	6042      	str	r2, [r0, #4]
   282a4:	e7ef      	b.n	28286 <k_queue_insert+0x18>
	node->next = NULL;
   282a6:	6013      	str	r3, [r2, #0]
	if (!list->tail) {
   282a8:	6843      	ldr	r3, [r0, #4]
   282aa:	b113      	cbz	r3, 282b2 <k_queue_insert+0x44>
		list->tail->next = node;
   282ac:	601a      	str	r2, [r3, #0]
		list->tail = node;
   282ae:	6042      	str	r2, [r0, #4]
   282b0:	e7e9      	b.n	28286 <k_queue_insert+0x18>
		list->tail = node;
   282b2:	6042      	str	r2, [r0, #4]
		list->head = node;
   282b4:	6002      	str	r2, [r0, #0]
   282b6:	e7e6      	b.n	28286 <k_queue_insert+0x18>
	_update_time_slice_before_swap();
   282b8:	f000 fa10 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   282bc:	4620      	mov	r0, r4
   282be:	f7fe fd53 	bl	26d68 <__swap>
   282c2:	bd10      	pop	{r4, pc}

000282c4 <k_queue_append>:
{
   282c4:	b508      	push	{r3, lr}
	return k_queue_insert(queue, queue->data_q.tail, data);
   282c6:	460a      	mov	r2, r1
   282c8:	6841      	ldr	r1, [r0, #4]
   282ca:	f7ff ffd0 	bl	2826e <k_queue_insert>
   282ce:	bd08      	pop	{r3, pc}

000282d0 <k_queue_prepend>:
{
   282d0:	b508      	push	{r3, lr}
	return k_queue_insert(queue, NULL, data);
   282d2:	460a      	mov	r2, r1
   282d4:	2100      	movs	r1, #0
   282d6:	f7ff ffca 	bl	2826e <k_queue_insert>
   282da:	bd08      	pop	{r3, pc}

000282dc <k_queue_append_list>:
{
   282dc:	b510      	push	{r4, lr}
	__asm__ volatile(
   282de:	f04f 0320 	mov.w	r3, #32
   282e2:	f3ef 8411 	mrs	r4, BASEPRI
   282e6:	f383 8811 	msr	BASEPRI, r3
	if (!list->tail) {
   282ea:	6843      	ldr	r3, [r0, #4]
   282ec:	b14b      	cbz	r3, 28302 <k_queue_append_list+0x26>
		list->tail->next = (sys_snode_t *)head;
   282ee:	6019      	str	r1, [r3, #0]
		list->tail = (sys_snode_t *)tail;
   282f0:	6042      	str	r2, [r0, #4]
	return _handle_obj_poll_events(&queue->poll_events, state);
   282f2:	2104      	movs	r1, #4
   282f4:	3008      	adds	r0, #8
   282f6:	f7ff ff3b 	bl	28170 <_handle_obj_poll_events>
	if (handle_poll_events(queue, K_POLL_STATE_DATA_AVAILABLE)) {
   282fa:	b928      	cbnz	r0, 28308 <k_queue_append_list+0x2c>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   282fc:	f384 8811 	msr	BASEPRI, r4
   28300:	bd10      	pop	{r4, pc}
		list->head = (sys_snode_t *)head;
   28302:	6001      	str	r1, [r0, #0]
		list->tail = (sys_snode_t *)tail;
   28304:	6042      	str	r2, [r0, #4]
   28306:	e7f4      	b.n	282f2 <k_queue_append_list+0x16>
	_update_time_slice_before_swap();
   28308:	f000 f9e8 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   2830c:	4620      	mov	r0, r4
   2830e:	f7fe fd2b 	bl	26d68 <__swap>
   28312:	bd10      	pop	{r4, pc}

00028314 <k_queue_get>:
#endif /* CONFIG_POLL */

void *k_queue_get(struct k_queue *queue, s32_t timeout)
{
   28314:	b510      	push	{r4, lr}
	__asm__ volatile(
   28316:	f04f 0320 	mov.w	r3, #32
   2831a:	f3ef 8211 	mrs	r2, BASEPRI
   2831e:	f383 8811 	msr	BASEPRI, r3
	return (!list->head);
   28322:	6803      	ldr	r3, [r0, #0]
	unsigned int key;
	void *data;

	key = irq_lock();

	if (likely(!sys_slist_is_empty(&queue->data_q))) {
   28324:	b153      	cbz	r3, 2833c <k_queue_get+0x28>
	list->head = node->next;
   28326:	6819      	ldr	r1, [r3, #0]
   28328:	6001      	str	r1, [r0, #0]
	if (list->tail == node) {
   2832a:	6844      	ldr	r4, [r0, #4]
   2832c:	42a3      	cmp	r3, r4
   2832e:	d003      	beq.n	28338 <k_queue_get+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28330:	f382 8811 	msr	BASEPRI, r2
		data = sys_slist_get_not_empty(&queue->data_q);
		irq_unlock(key);
		return data;
   28334:	4618      	mov	r0, r3
   28336:	bd10      	pop	{r4, pc}
		list->tail = list->head;
   28338:	6041      	str	r1, [r0, #4]
   2833a:	e7f9      	b.n	28330 <k_queue_get+0x1c>
	}

	if (timeout == K_NO_WAIT) {
   2833c:	b121      	cbz	r1, 28348 <k_queue_get+0x34>
   2833e:	f382 8811 	msr	BASEPRI, r2
	}

#if defined(CONFIG_POLL)
	irq_unlock(key);

	return k_queue_poll(queue, timeout);
   28342:	f7ff ff5b 	bl	281fc <k_queue_poll>
#else
	_pend_current_thread(&queue->wait_q, timeout);

	return _Swap(key) ? NULL : _current->base.swap_data;
#endif /* CONFIG_POLL */
}
   28346:	bd10      	pop	{r4, pc}
   28348:	f382 8811 	msr	BASEPRI, r2
		return NULL;
   2834c:	2000      	movs	r0, #0
   2834e:	bd10      	pop	{r4, pc}

00028350 <_set_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28350:	3010      	adds	r0, #16
   28352:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28354:	f000 001f 	and.w	r0, r0, #31
   28358:	2201      	movs	r2, #1
   2835a:	fa02 f000 	lsl.w	r0, r2, r0
static void _set_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap |= _get_ready_q_prio_bit(prio);
   2835e:	1d9a      	adds	r2, r3, #6
   28360:	4b03      	ldr	r3, [pc, #12]	; (28370 <_set_ready_q_prio_bit+0x20>)
   28362:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   28366:	685a      	ldr	r2, [r3, #4]
   28368:	4302      	orrs	r2, r0
   2836a:	605a      	str	r2, [r3, #4]
   2836c:	4770      	bx	lr
   2836e:	bf00      	nop
   28370:	20002810 	.word	0x20002810

00028374 <_clear_ready_q_prio_bit>:
	return (prio + _NUM_COOP_PRIO) >> 5;
   28374:	3010      	adds	r0, #16
   28376:	1143      	asrs	r3, r0, #5
	return (1 << ((prio + _NUM_COOP_PRIO) & 0x1f));
   28378:	f000 001f 	and.w	r0, r0, #31
   2837c:	2201      	movs	r2, #1
   2837e:	fa02 f000 	lsl.w	r0, r2, r0
static void _clear_ready_q_prio_bit(int prio)
{
	int bmap_index = _get_ready_q_prio_bmap_index(prio);
	u32_t *bmap = &_ready_q.prio_bmap[bmap_index];

	*bmap &= ~_get_ready_q_prio_bit(prio);
   28382:	1d9a      	adds	r2, r3, #6
   28384:	4b03      	ldr	r3, [pc, #12]	; (28394 <_clear_ready_q_prio_bit+0x20>)
   28386:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   2838a:	685a      	ldr	r2, [r3, #4]
   2838c:	ea22 0200 	bic.w	r2, r2, r0
   28390:	605a      	str	r2, [r3, #4]
   28392:	4770      	bx	lr
   28394:	20002810 	.word	0x20002810

00028398 <_get_ready_q_head>:
	ready_range = _ready_q.prio_bmap[0];
   28398:	4b06      	ldr	r3, [pc, #24]	; (283b4 <_get_ready_q_head+0x1c>)
   2839a:	69da      	ldr	r2, [r3, #28]
	return __builtin_ffs(op);
   2839c:	fa92 f3a2 	rbit	r3, r2
   283a0:	fab3 f383 	clz	r3, r3
   283a4:	b90a      	cbnz	r2, 283aa <_get_ready_q_head+0x12>
   283a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	return list->head;
   283aa:	3304      	adds	r3, #4

	struct k_thread *thread =
		(struct k_thread *)sys_dlist_peek_head_not_empty(list);

	return thread;
}
   283ac:	4a01      	ldr	r2, [pc, #4]	; (283b4 <_get_ready_q_head+0x1c>)
   283ae:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   283b2:	4770      	bx	lr
   283b4:	20002810 	.word	0x20002810

000283b8 <_add_thread_to_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _add_thread_to_ready_q(struct k_thread *thread)
{
   283b8:	b570      	push	{r4, r5, r6, lr}
   283ba:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   283bc:	f990 000a 	ldrsb.w	r0, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   283c0:	4e0c      	ldr	r6, [pc, #48]	; (283f4 <_add_thread_to_ready_q+0x3c>)
   283c2:	f100 0514 	add.w	r5, r0, #20
   283c6:	eb06 05c5 	add.w	r5, r6, r5, lsl #3

	_set_ready_q_prio_bit(thread->base.prio);
   283ca:	f7ff ffc1 	bl	28350 <_set_ready_q_prio_bit>
	node->next = list;
   283ce:	6025      	str	r5, [r4, #0]
	node->prev = list->tail;
   283d0:	686b      	ldr	r3, [r5, #4]
   283d2:	6063      	str	r3, [r4, #4]
	list->tail->next = node;
   283d4:	686b      	ldr	r3, [r5, #4]
   283d6:	601c      	str	r4, [r3, #0]
	list->tail = node;
   283d8:	606c      	str	r4, [r5, #4]
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = _is_t1_higher_prio_than_t2(thread, *cache) ? thread : *cache;
   283da:	69b3      	ldr	r3, [r6, #24]
	return _is_prio1_higher_than_prio2(t1->base.prio, t2->base.prio);
   283dc:	f994 200a 	ldrsb.w	r2, [r4, #10]
   283e0:	f993 100a 	ldrsb.w	r1, [r3, #10]
   283e4:	4291      	cmp	r1, r2
   283e6:	dc02      	bgt.n	283ee <_add_thread_to_ready_q+0x36>
   283e8:	4a02      	ldr	r2, [pc, #8]	; (283f4 <_add_thread_to_ready_q+0x3c>)
   283ea:	6193      	str	r3, [r2, #24]
   283ec:	bd70      	pop	{r4, r5, r6, pc}
   283ee:	4623      	mov	r3, r4
   283f0:	e7fa      	b.n	283e8 <_add_thread_to_ready_q+0x30>
   283f2:	bf00      	nop
   283f4:	20002810 	.word	0x20002810

000283f8 <_remove_thread_from_ready_q>:
 *
 * Interrupts must be locked when calling this function.
 */

void _remove_thread_from_ready_q(struct k_thread *thread)
{
   283f8:	b538      	push	{r3, r4, r5, lr}
   283fa:	4604      	mov	r4, r0
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   283fc:	f990 300a 	ldrsb.w	r3, [r0, #10]
	sys_dlist_t *q = &_ready_q.q[q_index];
   28400:	4a0e      	ldr	r2, [pc, #56]	; (2843c <_remove_thread_from_ready_q+0x44>)
   28402:	3314      	adds	r3, #20
   28404:	eb02 01c3 	add.w	r1, r2, r3, lsl #3
	node->prev->next = node->next;
   28408:	6840      	ldr	r0, [r0, #4]
   2840a:	6825      	ldr	r5, [r4, #0]
   2840c:	6005      	str	r5, [r0, #0]
	node->next->prev = node->prev;
   2840e:	6820      	ldr	r0, [r4, #0]
   28410:	6865      	ldr	r5, [r4, #4]
   28412:	6045      	str	r5, [r0, #4]
	return list->head == list;
   28414:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]

	sys_dlist_remove(&thread->base.k_q_node);
	if (sys_dlist_is_empty(q)) {
   28418:	4299      	cmp	r1, r3
   2841a:	d006      	beq.n	2842a <_remove_thread_from_ready_q+0x32>
		_clear_ready_q_prio_bit(thread->base.prio);
	}

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   2841c:	4b07      	ldr	r3, [pc, #28]	; (2843c <_remove_thread_from_ready_q+0x44>)
   2841e:	6998      	ldr	r0, [r3, #24]
   28420:	4284      	cmp	r4, r0
   28422:	d007      	beq.n	28434 <_remove_thread_from_ready_q+0x3c>
   28424:	4b05      	ldr	r3, [pc, #20]	; (2843c <_remove_thread_from_ready_q+0x44>)
   28426:	6198      	str	r0, [r3, #24]
   28428:	bd38      	pop	{r3, r4, r5, pc}
		_clear_ready_q_prio_bit(thread->base.prio);
   2842a:	f994 000a 	ldrsb.w	r0, [r4, #10]
   2842e:	f7ff ffa1 	bl	28374 <_clear_ready_q_prio_bit>
   28432:	e7f3      	b.n	2841c <_remove_thread_from_ready_q+0x24>
	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28434:	f7ff ffb0 	bl	28398 <_get_ready_q_head>
   28438:	e7f4      	b.n	28424 <_remove_thread_from_ready_q+0x2c>
   2843a:	bf00      	nop
   2843c:	20002810 	.word	0x20002810

00028440 <_pend_thread>:
#endif

/* pend the specified thread: it must *not* be in the ready queue */
/* must be called with interrupts locked */
void _pend_thread(struct k_thread *thread, _wait_q_t *wait_q, s32_t timeout)
{
   28440:	b538      	push	{r3, r4, r5, lr}
   28442:	680b      	ldr	r3, [r1, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28444:	4299      	cmp	r1, r3
   28446:	d115      	bne.n	28474 <_pend_thread+0x34>
   28448:	2300      	movs	r3, #0
   2844a:	e013      	b.n	28474 <_pend_thread+0x34>
	if (!insert_point) {
   2844c:	b133      	cbz	r3, 2845c <_pend_thread+0x1c>
		node->prev = insert_point->prev;
   2844e:	685c      	ldr	r4, [r3, #4]
   28450:	6044      	str	r4, [r0, #4]
		node->next = insert_point;
   28452:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   28454:	685c      	ldr	r4, [r3, #4]
   28456:	6020      	str	r0, [r4, #0]
		insert_point->prev = node;
   28458:	6058      	str	r0, [r3, #4]
   2845a:	e02b      	b.n	284b4 <_pend_thread+0x74>
	node->next = list;
   2845c:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   2845e:	684b      	ldr	r3, [r1, #4]
   28460:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   28462:	684b      	ldr	r3, [r1, #4]
   28464:	6018      	str	r0, [r3, #0]
	list->tail = node;
   28466:	6048      	str	r0, [r1, #4]
   28468:	e024      	b.n	284b4 <_pend_thread+0x74>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2846a:	461d      	mov	r5, r3
   2846c:	e010      	b.n	28490 <_pend_thread+0x50>
	return (node == list->tail) ? NULL : node->next;
   2846e:	2500      	movs	r5, #0
   28470:	e00e      	b.n	28490 <_pend_thread+0x50>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28472:	2300      	movs	r3, #0
#ifdef CONFIG_MULTITHREADING
	sys_dlist_t *wait_q_list = (sys_dlist_t *)wait_q;
	struct k_thread *pending;

	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28474:	b1c3      	cbz	r3, 284a8 <_pend_thread+0x68>
   28476:	f990 500a 	ldrsb.w	r5, [r0, #10]
   2847a:	f993 400a 	ldrsb.w	r4, [r3, #10]
		if (_is_t1_higher_prio_than_t2(thread, pending)) {
   2847e:	42a5      	cmp	r5, r4
   28480:	dbe4      	blt.n	2844c <_pend_thread+0xc>
	SYS_DLIST_FOR_EACH_CONTAINER(wait_q_list, pending, base.k_q_node) {
   28482:	461c      	mov	r4, r3
   28484:	2b00      	cmp	r3, #0
   28486:	d0f0      	beq.n	2846a <_pend_thread+0x2a>
	return (node == list->tail) ? NULL : node->next;
   28488:	684d      	ldr	r5, [r1, #4]
   2848a:	42ab      	cmp	r3, r5
   2848c:	d0ef      	beq.n	2846e <_pend_thread+0x2e>
   2848e:	681d      	ldr	r5, [r3, #0]
   28490:	b145      	cbz	r5, 284a4 <_pend_thread+0x64>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28492:	2c00      	cmp	r4, #0
   28494:	d0ed      	beq.n	28472 <_pend_thread+0x32>
	return (node == list->tail) ? NULL : node->next;
   28496:	684d      	ldr	r5, [r1, #4]
   28498:	42ac      	cmp	r4, r5
   2849a:	d001      	beq.n	284a0 <_pend_thread+0x60>
   2849c:	681b      	ldr	r3, [r3, #0]
   2849e:	e7e9      	b.n	28474 <_pend_thread+0x34>
   284a0:	2300      	movs	r3, #0
   284a2:	e7e7      	b.n	28474 <_pend_thread+0x34>
   284a4:	2300      	movs	r3, #0
   284a6:	e7e5      	b.n	28474 <_pend_thread+0x34>
	node->next = list;
   284a8:	6001      	str	r1, [r0, #0]
	node->prev = list->tail;
   284aa:	684b      	ldr	r3, [r1, #4]
   284ac:	6043      	str	r3, [r0, #4]
	list->tail->next = node;
   284ae:	684b      	ldr	r3, [r1, #4]
   284b0:	6018      	str	r0, [r3, #0]
	list->tail = node;
   284b2:	6048      	str	r0, [r1, #4]
	thread->base.thread_state |= _THREAD_PENDING;
   284b4:	7a44      	ldrb	r4, [r0, #9]
   284b6:	f044 0402 	orr.w	r4, r4, #2
   284ba:	7244      	strb	r4, [r0, #9]
	sys_dlist_append(wait_q_list, &thread->base.k_q_node);

inserted:
	_mark_thread_as_pending(thread);

	if (timeout != K_FOREVER) {
   284bc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   284c0:	f000 8089 	beq.w	285d6 <_pend_thread+0x196>
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   284c4:	f102 0309 	add.w	r3, r2, #9
   284c8:	4a43      	ldr	r2, [pc, #268]	; (285d8 <_pend_thread+0x198>)
   284ca:	fba2 2303 	umull	r2, r3, r2, r3
   284ce:	08db      	lsrs	r3, r3, #3
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(timeout);
   284d0:	3301      	adds	r3, #1
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   284d2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   284d6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   284d8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   284da:	60e1      	str	r1, [r4, #12]
	if (!timeout_in_ticks) {
   284dc:	b133      	cbz	r3, 284ec <_pend_thread+0xac>
	return list->head == list;
   284de:	4a3f      	ldr	r2, [pc, #252]	; (285dc <_pend_thread+0x19c>)
   284e0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   284e4:	4293      	cmp	r3, r2
   284e6:	d151      	bne.n	2858c <_pend_thread+0x14c>
   284e8:	2300      	movs	r3, #0
   284ea:	e04f      	b.n	2858c <_pend_thread+0x14c>
	__asm__ volatile(
   284ec:	f04f 0320 	mov.w	r3, #32
   284f0:	f3ef 8511 	mrs	r5, BASEPRI
   284f4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   284f8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   284fc:	6123      	str	r3, [r4, #16]
	if (thread) {
   284fe:	b320      	cbz	r0, 2854a <_pend_thread+0x10a>
	if (timeout_obj->wait_q) {
   28500:	68e3      	ldr	r3, [r4, #12]
   28502:	b15b      	cbz	r3, 2851c <_pend_thread+0xdc>
	node->prev->next = node->next;
   28504:	6843      	ldr	r3, [r0, #4]
   28506:	6802      	ldr	r2, [r0, #0]
   28508:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2850a:	6803      	ldr	r3, [r0, #0]
   2850c:	6842      	ldr	r2, [r0, #4]
   2850e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28510:	7a43      	ldrb	r3, [r0, #9]
   28512:	f023 0302 	bic.w	r3, r3, #2
   28516:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28518:	2300      	movs	r3, #0
   2851a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2851c:	7a43      	ldrb	r3, [r0, #9]
   2851e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28522:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28524:	f013 0f1b 	tst.w	r3, #27
   28528:	d107      	bne.n	2853a <_pend_thread+0xfa>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2852a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2852c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28530:	d001      	beq.n	28536 <_pend_thread+0xf6>
   28532:	2300      	movs	r3, #0
   28534:	e002      	b.n	2853c <_pend_thread+0xfc>
   28536:	2301      	movs	r3, #1
   28538:	e000      	b.n	2853c <_pend_thread+0xfc>
   2853a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   2853c:	b913      	cbnz	r3, 28544 <_pend_thread+0x104>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2853e:	f385 8811 	msr	BASEPRI, r5
   28542:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28544:	f7ff ff38 	bl	283b8 <_add_thread_to_ready_q>
   28548:	e7f9      	b.n	2853e <_pend_thread+0xfe>
   2854a:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   2854e:	6963      	ldr	r3, [r4, #20]
   28550:	2b00      	cmp	r3, #0
   28552:	d040      	beq.n	285d6 <_pend_thread+0x196>
			timeout->func(timeout);
   28554:	4620      	mov	r0, r4
   28556:	4798      	blx	r3
   28558:	bd38      	pop	{r3, r4, r5, pc}
			in_q->delta_ticks_from_prev -= *delta;
   2855a:	1a8a      	subs	r2, r1, r2
   2855c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   2855e:	b133      	cbz	r3, 2856e <_pend_thread+0x12e>
		node->prev = insert_point->prev;
   28560:	685a      	ldr	r2, [r3, #4]
   28562:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28564:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28566:	685a      	ldr	r2, [r3, #4]
   28568:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   2856a:	605c      	str	r4, [r3, #4]
   2856c:	bd38      	pop	{r3, r4, r5, pc}
	node->next = list;
   2856e:	4b1b      	ldr	r3, [pc, #108]	; (285dc <_pend_thread+0x19c>)
   28570:	f103 020c 	add.w	r2, r3, #12
   28574:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   28576:	691a      	ldr	r2, [r3, #16]
   28578:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   2857a:	691a      	ldr	r2, [r3, #16]
   2857c:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2857e:	611c      	str	r4, [r3, #16]
   28580:	bd38      	pop	{r3, r4, r5, pc}
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28582:	4619      	mov	r1, r3
   28584:	e011      	b.n	285aa <_pend_thread+0x16a>
	return (node == list->tail) ? NULL : node->next;
   28586:	2100      	movs	r1, #0
   28588:	e00f      	b.n	285aa <_pend_thread+0x16a>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2858a:	2300      	movs	r3, #0
   2858c:	b1d3      	cbz	r3, 285c4 <_pend_thread+0x184>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2858e:	6922      	ldr	r2, [r4, #16]
   28590:	6919      	ldr	r1, [r3, #16]
   28592:	428a      	cmp	r2, r1
   28594:	dde1      	ble.n	2855a <_pend_thread+0x11a>
		*delta -= in_q->delta_ticks_from_prev;
   28596:	1a52      	subs	r2, r2, r1
   28598:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   2859a:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2859c:	2b00      	cmp	r3, #0
   2859e:	d0f0      	beq.n	28582 <_pend_thread+0x142>
	return (node == list->tail) ? NULL : node->next;
   285a0:	490e      	ldr	r1, [pc, #56]	; (285dc <_pend_thread+0x19c>)
   285a2:	6909      	ldr	r1, [r1, #16]
   285a4:	428b      	cmp	r3, r1
   285a6:	d0ee      	beq.n	28586 <_pend_thread+0x146>
   285a8:	6819      	ldr	r1, [r3, #0]
   285aa:	2900      	cmp	r1, #0
   285ac:	d0ed      	beq.n	2858a <_pend_thread+0x14a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285ae:	b12a      	cbz	r2, 285bc <_pend_thread+0x17c>
	return (node == list->tail) ? NULL : node->next;
   285b0:	490a      	ldr	r1, [pc, #40]	; (285dc <_pend_thread+0x19c>)
   285b2:	6909      	ldr	r1, [r1, #16]
   285b4:	428a      	cmp	r2, r1
   285b6:	d003      	beq.n	285c0 <_pend_thread+0x180>
   285b8:	681b      	ldr	r3, [r3, #0]
   285ba:	e7e7      	b.n	2858c <_pend_thread+0x14c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   285bc:	2300      	movs	r3, #0
   285be:	e7e5      	b.n	2858c <_pend_thread+0x14c>
	return (node == list->tail) ? NULL : node->next;
   285c0:	2300      	movs	r3, #0
   285c2:	e7e3      	b.n	2858c <_pend_thread+0x14c>
	node->next = list;
   285c4:	4b05      	ldr	r3, [pc, #20]	; (285dc <_pend_thread+0x19c>)
   285c6:	f103 020c 	add.w	r2, r3, #12
   285ca:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   285cc:	691a      	ldr	r2, [r3, #16]
   285ce:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   285d0:	691a      	ldr	r2, [r3, #16]
   285d2:	6014      	str	r4, [r2, #0]
	list->tail = node;
   285d4:	611c      	str	r4, [r3, #16]
   285d6:	bd38      	pop	{r3, r4, r5, pc}
   285d8:	cccccccd 	.word	0xcccccccd
   285dc:	20002810 	.word	0x20002810

000285e0 <_pend_current_thread>:
}

/* pend the current thread */
/* must be called with interrupts locked */
void _pend_current_thread(_wait_q_t *wait_q, s32_t timeout)
{
   285e0:	b570      	push	{r4, r5, r6, lr}
   285e2:	4605      	mov	r5, r0
   285e4:	460e      	mov	r6, r1
	_remove_thread_from_ready_q(_current);
   285e6:	4c05      	ldr	r4, [pc, #20]	; (285fc <_pend_current_thread+0x1c>)
   285e8:	68a0      	ldr	r0, [r4, #8]
   285ea:	f7ff ff05 	bl	283f8 <_remove_thread_from_ready_q>
	_pend_thread(_current, wait_q, timeout);
   285ee:	4632      	mov	r2, r6
   285f0:	4629      	mov	r1, r5
   285f2:	68a0      	ldr	r0, [r4, #8]
   285f4:	f7ff ff24 	bl	28440 <_pend_thread>
   285f8:	bd70      	pop	{r4, r5, r6, pc}
   285fa:	bf00      	nop
   285fc:	20002810 	.word	0x20002810

00028600 <__must_switch_threads>:
	ready_range = _ready_q.prio_bmap[0];
   28600:	4b09      	ldr	r3, [pc, #36]	; (28628 <__must_switch_threads+0x28>)
   28602:	69db      	ldr	r3, [r3, #28]
	return __builtin_ffs(op);
   28604:	fa93 f0a3 	rbit	r0, r3
   28608:	fab0 f080 	clz	r0, r0
   2860c:	b90b      	cbnz	r3, 28612 <__must_switch_threads+0x12>
   2860e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
	return abs_prio - _NUM_COOP_PRIO;
   28612:	3810      	subs	r0, #16

#ifdef CONFIG_KERNEL_DEBUG
	_dump_ready_q();
#endif  /* CONFIG_KERNEL_DEBUG */

	return _is_prio_higher(_get_highest_ready_prio(), _current->base.prio);
   28614:	4b04      	ldr	r3, [pc, #16]	; (28628 <__must_switch_threads+0x28>)
   28616:	689b      	ldr	r3, [r3, #8]
   28618:	f993 300a 	ldrsb.w	r3, [r3, #10]
#else
	return 0;
#endif
}
   2861c:	4283      	cmp	r3, r0
   2861e:	bfd4      	ite	le
   28620:	2000      	movle	r0, #0
   28622:	2001      	movgt	r0, #1
   28624:	4770      	bx	lr
   28626:	bf00      	nop
   28628:	20002810 	.word	0x20002810

0002862c <_move_thread_to_end_of_prio_q>:
 * taken off or put on the ready queue.
 */
void _move_thread_to_end_of_prio_q(struct k_thread *thread)
{
#ifdef CONFIG_MULTITHREADING
	int q_index = _get_ready_q_q_index(thread->base.prio);
   2862c:	f990 200a 	ldrsb.w	r2, [r0, #10]
	return prio + _NUM_COOP_PRIO;
   28630:	f102 0310 	add.w	r3, r2, #16
	sys_dlist_t *q = &_ready_q.q[q_index];
   28634:	3214      	adds	r2, #20
   28636:	4911      	ldr	r1, [pc, #68]	; (2867c <_move_thread_to_end_of_prio_q+0x50>)
   28638:	eb01 02c2 	add.w	r2, r1, r2, lsl #3
	return list->tail == node;
   2863c:	6851      	ldr	r1, [r2, #4]

	if (sys_dlist_is_tail(q, &thread->base.k_q_node)) {
   2863e:	4288      	cmp	r0, r1
   28640:	d01a      	beq.n	28678 <_move_thread_to_end_of_prio_q+0x4c>
{
   28642:	b510      	push	{r4, lr}
	node->prev->next = node->next;
   28644:	6841      	ldr	r1, [r0, #4]
   28646:	6804      	ldr	r4, [r0, #0]
   28648:	600c      	str	r4, [r1, #0]
	node->next->prev = node->prev;
   2864a:	6801      	ldr	r1, [r0, #0]
   2864c:	6844      	ldr	r4, [r0, #4]
   2864e:	604c      	str	r4, [r1, #4]
	node->next = list;
   28650:	6002      	str	r2, [r0, #0]
	node->prev = list->tail;
   28652:	4a0a      	ldr	r2, [pc, #40]	; (2867c <_move_thread_to_end_of_prio_q+0x50>)
   28654:	3304      	adds	r3, #4
   28656:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   2865a:	6859      	ldr	r1, [r3, #4]
   2865c:	6041      	str	r1, [r0, #4]
	list->tail->next = node;
   2865e:	6859      	ldr	r1, [r3, #4]
   28660:	6008      	str	r0, [r1, #0]
	list->tail = node;
   28662:	6058      	str	r0, [r3, #4]
	sys_dlist_remove(&thread->base.k_q_node);
	sys_dlist_append(q, &thread->base.k_q_node);

	struct k_thread **cache = &_ready_q.cache;

	*cache = *cache == thread ? _get_ready_q_head() : *cache;
   28664:	6993      	ldr	r3, [r2, #24]
   28666:	4298      	cmp	r0, r3
   28668:	d002      	beq.n	28670 <_move_thread_to_end_of_prio_q+0x44>
   2866a:	4a04      	ldr	r2, [pc, #16]	; (2867c <_move_thread_to_end_of_prio_q+0x50>)
   2866c:	6193      	str	r3, [r2, #24]
   2866e:	bd10      	pop	{r4, pc}
   28670:	f7ff fe92 	bl	28398 <_get_ready_q_head>
   28674:	4603      	mov	r3, r0
   28676:	e7f8      	b.n	2866a <_move_thread_to_end_of_prio_q+0x3e>
   28678:	4770      	bx	lr
   2867a:	bf00      	nop
   2867c:	20002810 	.word	0x20002810

00028680 <_impl_k_current_get>:
#endif

k_tid_t _impl_k_current_get(void)
{
	return _current;
}
   28680:	4b01      	ldr	r3, [pc, #4]	; (28688 <_impl_k_current_get+0x8>)
   28682:	6898      	ldr	r0, [r3, #8]
   28684:	4770      	bx	lr
   28686:	bf00      	nop
   28688:	20002810 	.word	0x20002810

0002868c <_is_thread_time_slicing>:
	 * Should not be the idle thread
	 * Priority should be higher than time slice priority ceiling
	 * There should be multiple threads active with same priority
	 */

	if (!(_time_slice_duration > 0) || (_is_idle_thread_ptr(thread))
   2868c:	4b0f      	ldr	r3, [pc, #60]	; (286cc <_is_thread_time_slicing+0x40>)
   2868e:	681b      	ldr	r3, [r3, #0]
   28690:	2b00      	cmp	r3, #0
   28692:	dd14      	ble.n	286be <_is_thread_time_slicing+0x32>
	return thread == _idle_thread;
   28694:	4b0e      	ldr	r3, [pc, #56]	; (286d0 <_is_thread_time_slicing+0x44>)
   28696:	681b      	ldr	r3, [r3, #0]
   28698:	4298      	cmp	r0, r3
   2869a:	d012      	beq.n	286c2 <_is_thread_time_slicing+0x36>
	    || _is_prio_higher(thread->base.prio, _time_slice_prio_ceiling)) {
   2869c:	f990 300a 	ldrsb.w	r3, [r0, #10]
   286a0:	4a0c      	ldr	r2, [pc, #48]	; (286d4 <_is_thread_time_slicing+0x48>)
   286a2:	6812      	ldr	r2, [r2, #0]
   286a4:	4293      	cmp	r3, r2
   286a6:	db0e      	blt.n	286c6 <_is_thread_time_slicing+0x3a>
	return list->head != list->tail;
   286a8:	4a0b      	ldr	r2, [pc, #44]	; (286d8 <_is_thread_time_slicing+0x4c>)
   286aa:	3314      	adds	r3, #20
   286ac:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
   286b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
   286b4:	685b      	ldr	r3, [r3, #4]
   286b6:	1ac0      	subs	r0, r0, r3
   286b8:	bf18      	it	ne
   286ba:	2001      	movne	r0, #1
	}

	int q_index = _get_ready_q_q_index(thread->base.prio);
	sys_dlist_t *q = &_ready_q.q[q_index];

	return sys_dlist_has_multiple_nodes(q);
   286bc:	4770      	bx	lr
		return 0;
   286be:	2000      	movs	r0, #0
   286c0:	4770      	bx	lr
   286c2:	2000      	movs	r0, #0
   286c4:	4770      	bx	lr
   286c6:	2000      	movs	r0, #0
}
   286c8:	4770      	bx	lr
   286ca:	bf00      	nop
   286cc:	20002930 	.word	0x20002930
   286d0:	0002f07c 	.word	0x0002f07c
   286d4:	20002934 	.word	0x20002934
   286d8:	20002810 	.word	0x20002810

000286dc <_update_time_slice_before_swap>:
		_set_time(remaining);
	}

#endif
	/* Restart time slice count at new thread switch */
	_time_slice_elapsed = 0;
   286dc:	2200      	movs	r2, #0
   286de:	4b01      	ldr	r3, [pc, #4]	; (286e4 <_update_time_slice_before_swap+0x8>)
   286e0:	601a      	str	r2, [r3, #0]
   286e2:	4770      	bx	lr
   286e4:	20002bcc 	.word	0x20002bcc

000286e8 <_reschedule_threads>:
{
   286e8:	b510      	push	{r4, lr}
   286ea:	4604      	mov	r4, r0
	return _is_preempt(_current) && __must_switch_threads();
   286ec:	4b0a      	ldr	r3, [pc, #40]	; (28718 <_reschedule_threads+0x30>)
   286ee:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   286f0:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   286f2:	2b7f      	cmp	r3, #127	; 0x7f
   286f4:	d805      	bhi.n	28702 <_reschedule_threads+0x1a>
   286f6:	f7ff ff83 	bl	28600 <__must_switch_threads>
   286fa:	4603      	mov	r3, r0
   286fc:	b110      	cbz	r0, 28704 <_reschedule_threads+0x1c>
   286fe:	2301      	movs	r3, #1
   28700:	e000      	b.n	28704 <_reschedule_threads+0x1c>
   28702:	2300      	movs	r3, #0
	if (_must_switch_threads()) {
   28704:	b913      	cbnz	r3, 2870c <_reschedule_threads+0x24>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28706:	f384 8811 	msr	BASEPRI, r4
   2870a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   2870c:	f7ff ffe6 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   28710:	4620      	mov	r0, r4
   28712:	f7fe fb29 	bl	26d68 <__swap>
   28716:	bd10      	pop	{r4, pc}
   28718:	20002810 	.word	0x20002810

0002871c <k_sched_unlock>:
{
   2871c:	b508      	push	{r3, lr}
	__asm__ volatile(
   2871e:	f04f 0320 	mov.w	r3, #32
   28722:	f3ef 8011 	mrs	r0, BASEPRI
   28726:	f383 8811 	msr	BASEPRI, r3
	++_current->base.sched_locked;
   2872a:	4b04      	ldr	r3, [pc, #16]	; (2873c <k_sched_unlock+0x20>)
   2872c:	689a      	ldr	r2, [r3, #8]
   2872e:	7ad3      	ldrb	r3, [r2, #11]
   28730:	3301      	adds	r3, #1
   28732:	72d3      	strb	r3, [r2, #11]
	_reschedule_threads(key);
   28734:	f7ff ffd8 	bl	286e8 <_reschedule_threads>
   28738:	bd08      	pop	{r3, pc}
   2873a:	bf00      	nop
   2873c:	20002810 	.word	0x20002810

00028740 <_impl_k_yield>:
{
   28740:	b538      	push	{r3, r4, r5, lr}
   28742:	f04f 0320 	mov.w	r3, #32
   28746:	f3ef 8511 	mrs	r5, BASEPRI
   2874a:	f383 8811 	msr	BASEPRI, r3
	_move_thread_to_end_of_prio_q(_current);
   2874e:	4c08      	ldr	r4, [pc, #32]	; (28770 <_impl_k_yield+0x30>)
   28750:	68a0      	ldr	r0, [r4, #8]
   28752:	f7ff ff6b 	bl	2862c <_move_thread_to_end_of_prio_q>
	if (_current == _get_next_ready_thread()) {
   28756:	68a2      	ldr	r2, [r4, #8]
	return _ready_q.cache;
   28758:	69a3      	ldr	r3, [r4, #24]
   2875a:	429a      	cmp	r2, r3
   2875c:	d005      	beq.n	2876a <_impl_k_yield+0x2a>
	_update_time_slice_before_swap();
   2875e:	f7ff ffbd 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   28762:	4628      	mov	r0, r5
   28764:	f7fe fb00 	bl	26d68 <__swap>
   28768:	bd38      	pop	{r3, r4, r5, pc}
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   2876a:	f385 8811 	msr	BASEPRI, r5
   2876e:	bd38      	pop	{r3, r4, r5, pc}
   28770:	20002810 	.word	0x20002810

00028774 <_impl_k_sleep>:
{
   28774:	b570      	push	{r4, r5, r6, lr}
   28776:	b082      	sub	sp, #8
	if (duration == 0) {
   28778:	b308      	cbz	r0, 287be <_impl_k_sleep+0x4a>
   2877a:	4603      	mov	r3, r0
   2877c:	3309      	adds	r3, #9
   2877e:	4a4f      	ldr	r2, [pc, #316]	; (288bc <_impl_k_sleep+0x148>)
   28780:	fba2 2303 	umull	r2, r3, r2, r3
   28784:	08db      	lsrs	r3, r3, #3
	ticks = _TICK_ALIGN + _ms_to_ticks(duration);
   28786:	3301      	adds	r3, #1
   28788:	9301      	str	r3, [sp, #4]
	__asm__ volatile(
   2878a:	f04f 0320 	mov.w	r3, #32
   2878e:	f3ef 8511 	mrs	r5, BASEPRI
   28792:	f383 8811 	msr	BASEPRI, r3
	_remove_thread_from_ready_q(_current);
   28796:	4c4a      	ldr	r4, [pc, #296]	; (288c0 <_impl_k_sleep+0x14c>)
   28798:	68a0      	ldr	r0, [r4, #8]
   2879a:	f7ff fe2d 	bl	283f8 <_remove_thread_from_ready_q>
	_add_thread_timeout(_current, NULL, ticks);
   2879e:	68a0      	ldr	r0, [r4, #8]
   287a0:	9b01      	ldr	r3, [sp, #4]
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   287a2:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   287a6:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   287a8:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   287aa:	2200      	movs	r2, #0
   287ac:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   287ae:	b14b      	cbz	r3, 287c4 <_impl_k_sleep+0x50>
	return list->head == list;
   287b0:	4a43      	ldr	r2, [pc, #268]	; (288c0 <_impl_k_sleep+0x14c>)
   287b2:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   287b6:	4293      	cmp	r3, r2
   287b8:	d154      	bne.n	28864 <_impl_k_sleep+0xf0>
   287ba:	2300      	movs	r3, #0
   287bc:	e052      	b.n	28864 <_impl_k_sleep+0xf0>
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   287be:	f7ff ffbf 	bl	28740 <_impl_k_yield>
   287c2:	e079      	b.n	288b8 <_impl_k_sleep+0x144>
   287c4:	f04f 0320 	mov.w	r3, #32
   287c8:	f3ef 8611 	mrs	r6, BASEPRI
   287cc:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   287d0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   287d4:	6123      	str	r3, [r4, #16]
	if (thread) {
   287d6:	b320      	cbz	r0, 28822 <_impl_k_sleep+0xae>
	if (timeout_obj->wait_q) {
   287d8:	68e3      	ldr	r3, [r4, #12]
   287da:	b15b      	cbz	r3, 287f4 <_impl_k_sleep+0x80>
	node->prev->next = node->next;
   287dc:	6843      	ldr	r3, [r0, #4]
   287de:	6802      	ldr	r2, [r0, #0]
   287e0:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   287e2:	6803      	ldr	r3, [r0, #0]
   287e4:	6842      	ldr	r2, [r0, #4]
   287e6:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   287e8:	7a43      	ldrb	r3, [r0, #9]
   287ea:	f023 0302 	bic.w	r3, r3, #2
   287ee:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   287f0:	2300      	movs	r3, #0
   287f2:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   287f4:	7a43      	ldrb	r3, [r0, #9]
   287f6:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   287fa:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   287fc:	f013 0f1b 	tst.w	r3, #27
   28800:	d107      	bne.n	28812 <_impl_k_sleep+0x9e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28802:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28804:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28808:	d001      	beq.n	2880e <_impl_k_sleep+0x9a>
   2880a:	2300      	movs	r3, #0
   2880c:	e002      	b.n	28814 <_impl_k_sleep+0xa0>
   2880e:	2301      	movs	r3, #1
   28810:	e000      	b.n	28814 <_impl_k_sleep+0xa0>
   28812:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28814:	b913      	cbnz	r3, 2881c <_impl_k_sleep+0xa8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28816:	f386 8811 	msr	BASEPRI, r6
   2881a:	e048      	b.n	288ae <_impl_k_sleep+0x13a>
		_add_thread_to_ready_q(thread);
   2881c:	f7ff fdcc 	bl	283b8 <_add_thread_to_ready_q>
   28820:	e7f9      	b.n	28816 <_impl_k_sleep+0xa2>
   28822:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28826:	6963      	ldr	r3, [r4, #20]
   28828:	2b00      	cmp	r3, #0
   2882a:	d040      	beq.n	288ae <_impl_k_sleep+0x13a>
			timeout->func(timeout);
   2882c:	4620      	mov	r0, r4
   2882e:	4798      	blx	r3
   28830:	e03d      	b.n	288ae <_impl_k_sleep+0x13a>
			in_q->delta_ticks_from_prev -= *delta;
   28832:	1a8a      	subs	r2, r1, r2
   28834:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28836:	b133      	cbz	r3, 28846 <_impl_k_sleep+0xd2>
		node->prev = insert_point->prev;
   28838:	685a      	ldr	r2, [r3, #4]
   2883a:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   2883c:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   2883e:	685a      	ldr	r2, [r3, #4]
   28840:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28842:	605c      	str	r4, [r3, #4]
   28844:	e033      	b.n	288ae <_impl_k_sleep+0x13a>
	node->next = list;
   28846:	4b1e      	ldr	r3, [pc, #120]	; (288c0 <_impl_k_sleep+0x14c>)
   28848:	f103 020c 	add.w	r2, r3, #12
   2884c:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   2884e:	691a      	ldr	r2, [r3, #16]
   28850:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28852:	691a      	ldr	r2, [r3, #16]
   28854:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28856:	611c      	str	r4, [r3, #16]
   28858:	e029      	b.n	288ae <_impl_k_sleep+0x13a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2885a:	4619      	mov	r1, r3
   2885c:	e011      	b.n	28882 <_impl_k_sleep+0x10e>
	return (node == list->tail) ? NULL : node->next;
   2885e:	2100      	movs	r1, #0
   28860:	e00f      	b.n	28882 <_impl_k_sleep+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28862:	2300      	movs	r3, #0
   28864:	b1d3      	cbz	r3, 2889c <_impl_k_sleep+0x128>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28866:	6922      	ldr	r2, [r4, #16]
   28868:	6919      	ldr	r1, [r3, #16]
   2886a:	428a      	cmp	r2, r1
   2886c:	dde1      	ble.n	28832 <_impl_k_sleep+0xbe>
		*delta -= in_q->delta_ticks_from_prev;
   2886e:	1a52      	subs	r2, r2, r1
   28870:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28872:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28874:	2b00      	cmp	r3, #0
   28876:	d0f0      	beq.n	2885a <_impl_k_sleep+0xe6>
	return (node == list->tail) ? NULL : node->next;
   28878:	4911      	ldr	r1, [pc, #68]	; (288c0 <_impl_k_sleep+0x14c>)
   2887a:	6909      	ldr	r1, [r1, #16]
   2887c:	428b      	cmp	r3, r1
   2887e:	d0ee      	beq.n	2885e <_impl_k_sleep+0xea>
   28880:	6819      	ldr	r1, [r3, #0]
   28882:	2900      	cmp	r1, #0
   28884:	d0ed      	beq.n	28862 <_impl_k_sleep+0xee>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28886:	b12a      	cbz	r2, 28894 <_impl_k_sleep+0x120>
	return (node == list->tail) ? NULL : node->next;
   28888:	490d      	ldr	r1, [pc, #52]	; (288c0 <_impl_k_sleep+0x14c>)
   2888a:	6909      	ldr	r1, [r1, #16]
   2888c:	428a      	cmp	r2, r1
   2888e:	d003      	beq.n	28898 <_impl_k_sleep+0x124>
   28890:	681b      	ldr	r3, [r3, #0]
   28892:	e7e7      	b.n	28864 <_impl_k_sleep+0xf0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28894:	2300      	movs	r3, #0
   28896:	e7e5      	b.n	28864 <_impl_k_sleep+0xf0>
	return (node == list->tail) ? NULL : node->next;
   28898:	2300      	movs	r3, #0
   2889a:	e7e3      	b.n	28864 <_impl_k_sleep+0xf0>
	node->next = list;
   2889c:	4b08      	ldr	r3, [pc, #32]	; (288c0 <_impl_k_sleep+0x14c>)
   2889e:	f103 020c 	add.w	r2, r3, #12
   288a2:	6102      	str	r2, [r0, #16]
	node->prev = list->tail;
   288a4:	691a      	ldr	r2, [r3, #16]
   288a6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   288a8:	691a      	ldr	r2, [r3, #16]
   288aa:	6014      	str	r4, [r2, #0]
	list->tail = node;
   288ac:	611c      	str	r4, [r3, #16]
	_update_time_slice_before_swap();
   288ae:	f7ff ff15 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   288b2:	4628      	mov	r0, r5
   288b4:	f7fe fa58 	bl	26d68 <__swap>
}
   288b8:	b002      	add	sp, #8
   288ba:	bd70      	pop	{r4, r5, r6, pc}
   288bc:	cccccccd 	.word	0xcccccccd
   288c0:	20002810 	.word	0x20002810

000288c4 <do_sem_give>:
	sem->count += (sem->count != sem->limit);
}

/* returns 1 if _Swap() will need to be invoked, 0 otherwise */
static int do_sem_give(struct k_sem *sem)
{
   288c4:	b510      	push	{r4, lr}
	if (_handling_timeouts) {
   288c6:	4b43      	ldr	r3, [pc, #268]	; (289d4 <do_sem_give+0x110>)
   288c8:	681b      	ldr	r3, [r3, #0]
   288ca:	2b00      	cmp	r3, #0
   288cc:	d136      	bne.n	2893c <do_sem_give+0x78>
	return list->head == list;
   288ce:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   288d0:	42a0      	cmp	r0, r4
   288d2:	d044      	beq.n	2895e <do_sem_give+0x9a>
	if (thread) {
   288d4:	b14c      	cbz	r4, 288ea <do_sem_give+0x26>
	node->prev->next = node->next;
   288d6:	6863      	ldr	r3, [r4, #4]
   288d8:	6822      	ldr	r2, [r4, #0]
   288da:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   288dc:	6823      	ldr	r3, [r4, #0]
   288de:	6862      	ldr	r2, [r4, #4]
   288e0:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   288e2:	7a63      	ldrb	r3, [r4, #9]
   288e4:	f023 0302 	bic.w	r3, r3, #2
   288e8:	7263      	strb	r3, [r4, #9]
	struct k_thread *thread = _unpend_first_thread(&sem->wait_q);

	if (!thread) {
   288ea:	2c00      	cmp	r4, #0
   288ec:	d039      	beq.n	28962 <do_sem_give+0x9e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   288ee:	6a22      	ldr	r2, [r4, #32]
   288f0:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   288f4:	d013      	beq.n	2891e <do_sem_give+0x5a>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   288f6:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   288fa:	4937      	ldr	r1, [pc, #220]	; (289d8 <do_sem_give+0x114>)
   288fc:	6909      	ldr	r1, [r1, #16]
   288fe:	428b      	cmp	r3, r1
   28900:	d004      	beq.n	2890c <do_sem_give+0x48>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28902:	b103      	cbz	r3, 28906 <do_sem_give+0x42>
	return (node == list->tail) ? NULL : node->next;
   28904:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28906:	6919      	ldr	r1, [r3, #16]
   28908:	440a      	add	r2, r1
   2890a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2890c:	6963      	ldr	r3, [r4, #20]
   2890e:	6922      	ldr	r2, [r4, #16]
   28910:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28912:	6923      	ldr	r3, [r4, #16]
   28914:	6962      	ldr	r2, [r4, #20]
   28916:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28918:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2891c:	6223      	str	r3, [r4, #32]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2891e:	7a63      	ldrb	r3, [r4, #9]
   28920:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28924:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28926:	f013 0f1b 	tst.w	r3, #27
   2892a:	d128      	bne.n	2897e <do_sem_give+0xba>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   2892c:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   2892e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28932:	d022      	beq.n	2897a <do_sem_give+0xb6>
   28934:	2300      	movs	r3, #0
   28936:	e023      	b.n	28980 <do_sem_give+0xbc>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28938:	2400      	movs	r4, #0
   2893a:	e003      	b.n	28944 <do_sem_give+0x80>
   2893c:	4602      	mov	r2, r0
	return list->head == list;
   2893e:	6804      	ldr	r4, [r0, #0]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28940:	42a0      	cmp	r0, r4
   28942:	d0f9      	beq.n	28938 <do_sem_give+0x74>
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   28944:	2c00      	cmp	r4, #0
   28946:	d0c5      	beq.n	288d4 <do_sem_give+0x10>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   28948:	6a23      	ldr	r3, [r4, #32]
			if (_is_thread_timeout_expired(thread)) {
   2894a:	f113 0f02 	cmn.w	r3, #2
   2894e:	d1c1      	bne.n	288d4 <do_sem_give+0x10>
	return (node == list->tail) ? NULL : node->next;
   28950:	6853      	ldr	r3, [r2, #4]
   28952:	429c      	cmp	r4, r3
   28954:	d001      	beq.n	2895a <do_sem_give+0x96>
   28956:	6824      	ldr	r4, [r4, #0]
   28958:	e7f4      	b.n	28944 <do_sem_give+0x80>
   2895a:	2400      	movs	r4, #0
   2895c:	e7f2      	b.n	28944 <do_sem_give+0x80>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   2895e:	2400      	movs	r4, #0
   28960:	e7b8      	b.n	288d4 <do_sem_give+0x10>
	sem->count += (sem->count != sem->limit);
   28962:	6883      	ldr	r3, [r0, #8]
   28964:	68c2      	ldr	r2, [r0, #12]
   28966:	4293      	cmp	r3, r2
   28968:	bf18      	it	ne
   2896a:	3301      	addne	r3, #1
   2896c:	6083      	str	r3, [r0, #8]
	return _handle_obj_poll_events(&sem->poll_events, state);
   2896e:	2102      	movs	r1, #2
   28970:	3010      	adds	r0, #16
   28972:	f7ff fbfd 	bl	28170 <_handle_obj_poll_events>
   28976:	4603      	mov	r3, r0
		increment_count_up_to_limit(sem);
		return handle_poll_events(sem);
   28978:	e01c      	b.n	289b4 <do_sem_give+0xf0>
	return !(_is_thread_prevented_from_running(thread) ||
   2897a:	2301      	movs	r3, #1
   2897c:	e000      	b.n	28980 <do_sem_give+0xbc>
   2897e:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28980:	b96b      	cbnz	r3, 2899e <do_sem_give+0xda>
   28982:	2300      	movs	r3, #0
   28984:	6663      	str	r3, [r4, #100]	; 0x64
   28986:	f3ef 8305 	mrs	r3, IPSR
   2898a:	2b0d      	cmp	r3, #13
   2898c:	d80b      	bhi.n	289a6 <do_sem_give+0xe2>
   2898e:	b19b      	cbz	r3, 289b8 <do_sem_give+0xf4>
   28990:	4b12      	ldr	r3, [pc, #72]	; (289dc <do_sem_give+0x118>)
   28992:	685b      	ldr	r3, [r3, #4]
   28994:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28998:	d010      	beq.n	289bc <do_sem_give+0xf8>
   2899a:	2300      	movs	r3, #0
   2899c:	e004      	b.n	289a8 <do_sem_give+0xe4>
		_add_thread_to_ready_q(thread);
   2899e:	4620      	mov	r0, r4
   289a0:	f7ff fd0a 	bl	283b8 <_add_thread_to_ready_q>
   289a4:	e7ed      	b.n	28982 <do_sem_give+0xbe>
   289a6:	2301      	movs	r3, #1
	}
	(void)_abort_thread_timeout(thread);
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);

	return !_is_in_isr() && _must_switch_threads();
   289a8:	b98b      	cbnz	r3, 289ce <do_sem_give+0x10a>
	return _is_preempt(_current) && __must_switch_threads();
   289aa:	4a0b      	ldr	r2, [pc, #44]	; (289d8 <do_sem_give+0x114>)
   289ac:	6892      	ldr	r2, [r2, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   289ae:	8952      	ldrh	r2, [r2, #10]
	return _is_preempt(_current) && __must_switch_threads();
   289b0:	2a7f      	cmp	r2, #127	; 0x7f
   289b2:	d905      	bls.n	289c0 <do_sem_give+0xfc>
}
   289b4:	4618      	mov	r0, r3
   289b6:	bd10      	pop	{r4, pc}
   289b8:	2300      	movs	r3, #0
   289ba:	e7f5      	b.n	289a8 <do_sem_give+0xe4>
   289bc:	2301      	movs	r3, #1
   289be:	e7f3      	b.n	289a8 <do_sem_give+0xe4>
   289c0:	f7ff fe1e 	bl	28600 <__must_switch_threads>
   289c4:	4603      	mov	r3, r0
   289c6:	2800      	cmp	r0, #0
   289c8:	d0f4      	beq.n	289b4 <do_sem_give+0xf0>
   289ca:	2301      	movs	r3, #1
   289cc:	e7f2      	b.n	289b4 <do_sem_give+0xf0>
	return !_is_in_isr() && _must_switch_threads();
   289ce:	2300      	movs	r3, #0
   289d0:	e7f0      	b.n	289b4 <do_sem_give+0xf0>
   289d2:	bf00      	nop
   289d4:	20002bc8 	.word	0x20002bc8
   289d8:	20002810 	.word	0x20002810
   289dc:	e000ed00 	.word	0xe000ed00

000289e0 <_impl_k_sem_init>:
	sem->count = initial_count;
   289e0:	6081      	str	r1, [r0, #8]
	sem->limit = limit;
   289e2:	60c2      	str	r2, [r0, #12]
	list->head = (sys_dnode_t *)list;
   289e4:	6000      	str	r0, [r0, #0]
	list->tail = (sys_dnode_t *)list;
   289e6:	6040      	str	r0, [r0, #4]
	sys_dlist_init(&sem->poll_events);
   289e8:	f100 0310 	add.w	r3, r0, #16
	list->head = (sys_dnode_t *)list;
   289ec:	6103      	str	r3, [r0, #16]
	list->tail = (sys_dnode_t *)list;
   289ee:	6143      	str	r3, [r0, #20]
   289f0:	4770      	bx	lr

000289f2 <_impl_k_sem_give>:
	_ready_thread(thread);
	_set_thread_return_value(thread, 0);
}

void _impl_k_sem_give(struct k_sem *sem)
{
   289f2:	b510      	push	{r4, lr}
	__asm__ volatile(
   289f4:	f04f 0320 	mov.w	r3, #32
   289f8:	f3ef 8411 	mrs	r4, BASEPRI
   289fc:	f383 8811 	msr	BASEPRI, r3
	unsigned int key;

	key = irq_lock();

	if (do_sem_give(sem)) {
   28a00:	f7ff ff60 	bl	288c4 <do_sem_give>
   28a04:	b910      	cbnz	r0, 28a0c <_impl_k_sem_give+0x1a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a06:	f384 8811 	msr	BASEPRI, r4
   28a0a:	bd10      	pop	{r4, pc}
	_update_time_slice_before_swap();
   28a0c:	f7ff fe66 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   28a10:	4620      	mov	r0, r4
   28a12:	f7fe f9a9 	bl	26d68 <__swap>
   28a16:	bd10      	pop	{r4, pc}

00028a18 <_impl_k_sem_take>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_sem_give, K_OBJ_SEM, struct k_sem *);
#endif

int _impl_k_sem_take(struct k_sem *sem, s32_t timeout)
{
   28a18:	b510      	push	{r4, lr}
	__asm__ volatile(
   28a1a:	f04f 0320 	mov.w	r3, #32
   28a1e:	f3ef 8411 	mrs	r4, BASEPRI
   28a22:	f383 8811 	msr	BASEPRI, r3
	__ASSERT(!_is_in_isr() || timeout == K_NO_WAIT, "");

	unsigned int key = irq_lock();

	if (likely(sem->count > 0)) {
   28a26:	6883      	ldr	r3, [r0, #8]
   28a28:	b12b      	cbz	r3, 28a36 <_impl_k_sem_take+0x1e>
		sem->count--;
   28a2a:	3b01      	subs	r3, #1
   28a2c:	6083      	str	r3, [r0, #8]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a2e:	f384 8811 	msr	BASEPRI, r4
		irq_unlock(key);
		return 0;
   28a32:	2000      	movs	r0, #0
   28a34:	bd10      	pop	{r4, pc}
	}

	if (timeout == K_NO_WAIT) {
   28a36:	b139      	cbz	r1, 28a48 <_impl_k_sem_take+0x30>
		irq_unlock(key);
		return -EBUSY;
	}

	_pend_current_thread(&sem->wait_q, timeout);
   28a38:	f7ff fdd2 	bl	285e0 <_pend_current_thread>
	_update_time_slice_before_swap();
   28a3c:	f7ff fe4e 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   28a40:	4620      	mov	r0, r4
   28a42:	f7fe f991 	bl	26d68 <__swap>

	return _Swap(key);
}
   28a46:	bd10      	pop	{r4, pc}
   28a48:	f384 8811 	msr	BASEPRI, r4
		return -EBUSY;
   28a4c:	f06f 000f 	mvn.w	r0, #15
   28a50:	bd10      	pop	{r4, pc}
	...

00028a54 <handle_time_slicing>:
 *   in this function and at thread level
 * - _time_slice_duration does not have to be protected, since it can only
 *   change at thread level
 */
static void handle_time_slicing(s32_t ticks)
{
   28a54:	b538      	push	{r3, r4, r5, lr}
   28a56:	4604      	mov	r4, r0
#ifdef CONFIG_TICKLESS_KERNEL
	next_ts = 0;
#endif
	if (!_is_thread_time_slicing(_current)) {
   28a58:	4b0f      	ldr	r3, [pc, #60]	; (28a98 <handle_time_slicing+0x44>)
   28a5a:	6898      	ldr	r0, [r3, #8]
   28a5c:	f7ff fe16 	bl	2868c <_is_thread_time_slicing>
   28a60:	b150      	cbz	r0, 28a78 <handle_time_slicing+0x24>
	return (u64_t)ticks * _ms_per_tick;
   28a62:	00a2      	lsls	r2, r4, #2
   28a64:	1912      	adds	r2, r2, r4
   28a66:	1892      	adds	r2, r2, r2
		return;
	}

	_time_slice_elapsed += __ticks_to_ms(ticks);
   28a68:	490c      	ldr	r1, [pc, #48]	; (28a9c <handle_time_slicing+0x48>)
   28a6a:	680b      	ldr	r3, [r1, #0]
   28a6c:	441a      	add	r2, r3
   28a6e:	600a      	str	r2, [r1, #0]
	if (_time_slice_elapsed >= _time_slice_duration) {
   28a70:	4b0b      	ldr	r3, [pc, #44]	; (28aa0 <handle_time_slicing+0x4c>)
   28a72:	681b      	ldr	r3, [r3, #0]
   28a74:	429a      	cmp	r2, r3
   28a76:	da00      	bge.n	28a7a <handle_time_slicing+0x26>
   28a78:	bd38      	pop	{r3, r4, r5, pc}

		unsigned int key;

		_time_slice_elapsed = 0;
   28a7a:	2200      	movs	r2, #0
   28a7c:	600a      	str	r2, [r1, #0]
	__asm__ volatile(
   28a7e:	f04f 0320 	mov.w	r3, #32
   28a82:	f3ef 8411 	mrs	r4, BASEPRI
   28a86:	f383 8811 	msr	BASEPRI, r3

		key = irq_lock();
		_move_thread_to_end_of_prio_q(_current);
   28a8a:	4b03      	ldr	r3, [pc, #12]	; (28a98 <handle_time_slicing+0x44>)
   28a8c:	6898      	ldr	r0, [r3, #8]
   28a8e:	f7ff fdcd 	bl	2862c <_move_thread_to_end_of_prio_q>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28a92:	f384 8811 	msr	BASEPRI, r4
   28a96:	e7ef      	b.n	28a78 <handle_time_slicing+0x24>
   28a98:	20002810 	.word	0x20002810
   28a9c:	20002bcc 	.word	0x20002bcc
   28aa0:	20002930 	.word	0x20002930

00028aa4 <_tick_get_32>:
	return (u32_t)_sys_clock_tick_count;
   28aa4:	4b01      	ldr	r3, [pc, #4]	; (28aac <_tick_get_32+0x8>)
   28aa6:	e9d3 0100 	ldrd	r0, r1, [r3]
}
   28aaa:	4770      	bx	lr
   28aac:	20002bd0 	.word	0x20002bd0

00028ab0 <_impl_k_uptime_get_32>:
{
   28ab0:	b538      	push	{r3, r4, r5, lr}
	return __ticks_to_ms(_tick_get_32());
   28ab2:	f7ff fff7 	bl	28aa4 <_tick_get_32>
   28ab6:	0082      	lsls	r2, r0, #2
   28ab8:	1810      	adds	r0, r2, r0
   28aba:	1800      	adds	r0, r0, r0
}
   28abc:	bd38      	pop	{r3, r4, r5, pc}
	...

00028ac0 <_tick_get>:
	__asm__ volatile(
   28ac0:	f04f 0220 	mov.w	r2, #32
   28ac4:	f3ef 8311 	mrs	r3, BASEPRI
   28ac8:	f382 8811 	msr	BASEPRI, r2
	tmp_sys_clock_tick_count = _sys_clock_tick_count;
   28acc:	4a02      	ldr	r2, [pc, #8]	; (28ad8 <_tick_get+0x18>)
   28ace:	e9d2 0100 	ldrd	r0, r1, [r2]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28ad2:	f383 8811 	msr	BASEPRI, r3
}
   28ad6:	4770      	bx	lr
   28ad8:	20002bd0 	.word	0x20002bd0

00028adc <_impl_k_uptime_get>:
{
   28adc:	b510      	push	{r4, lr}
	return __ticks_to_ms(_tick_get());
   28ade:	f7ff ffef 	bl	28ac0 <_tick_get>
   28ae2:	008c      	lsls	r4, r1, #2
   28ae4:	0082      	lsls	r2, r0, #2
   28ae6:	ea44 7390 	orr.w	r3, r4, r0, lsr #30
   28aea:	1880      	adds	r0, r0, r2
   28aec:	4159      	adcs	r1, r3
   28aee:	1800      	adds	r0, r0, r0
   28af0:	4149      	adcs	r1, r1
}
   28af2:	bd10      	pop	{r4, pc}

00028af4 <_nano_sys_clock_tick_announce>:
 * timers that have expired and wake up the threads pending on them.
 *
 * @return N/A
 */
void _nano_sys_clock_tick_announce(s32_t ticks)
{
   28af4:	b570      	push	{r4, r5, r6, lr}
   28af6:	b082      	sub	sp, #8
   28af8:	4605      	mov	r5, r0
	__asm__ volatile(
   28afa:	f04f 0320 	mov.w	r3, #32
   28afe:	f3ef 8011 	mrs	r0, BASEPRI
   28b02:	f383 8811 	msr	BASEPRI, r3

	K_DEBUG("ticks: %d\n", ticks);

	/* 64-bit value, ensure atomic access with irq lock */
	key = irq_lock();
	_sys_clock_tick_count += ticks;
   28b06:	496a      	ldr	r1, [pc, #424]	; (28cb0 <_nano_sys_clock_tick_announce+0x1bc>)
   28b08:	e9d1 2300 	ldrd	r2, r3, [r1]
   28b0c:	1952      	adds	r2, r2, r5
   28b0e:	eb43 73e5 	adc.w	r3, r3, r5, asr #31
   28b12:	e9c1 2300 	strd	r2, r3, [r1]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b16:	f380 8811 	msr	BASEPRI, r0
	list->head = (sys_dnode_t *)list;
   28b1a:	f8cd d000 	str.w	sp, [sp]
	list->tail = (sys_dnode_t *)list;
   28b1e:	f8cd d004 	str.w	sp, [sp, #4]
	__asm__ volatile(
   28b22:	f04f 0320 	mov.w	r3, #32
   28b26:	f3ef 8111 	mrs	r1, BASEPRI
   28b2a:	f383 8811 	msr	BASEPRI, r3
   28b2e:	4608      	mov	r0, r1
	return list->head == list;
   28b30:	4b60      	ldr	r3, [pc, #384]	; (28cb4 <_nano_sys_clock_tick_announce+0x1c0>)
   28b32:	f853 2f0c 	ldr.w	r2, [r3, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b36:	429a      	cmp	r2, r3
   28b38:	d02b      	beq.n	28b92 <_nano_sys_clock_tick_announce+0x9e>
	if (!head) {
   28b3a:	b362      	cbz	r2, 28b96 <_nano_sys_clock_tick_announce+0xa2>
	head->delta_ticks_from_prev -= ticks;
   28b3c:	6913      	ldr	r3, [r2, #16]
   28b3e:	1b5b      	subs	r3, r3, r5
   28b40:	6113      	str	r3, [r2, #16]
	sys_dnode_t *next = &head->node;
   28b42:	4613      	mov	r3, r2
	_handling_timeouts = 1;
   28b44:	2101      	movs	r1, #1
   28b46:	4a5c      	ldr	r2, [pc, #368]	; (28cb8 <_nano_sys_clock_tick_announce+0x1c4>)
   28b48:	6011      	str	r1, [r2, #0]
	while (timeout && timeout->delta_ticks_from_prev == 0) {
   28b4a:	b33b      	cbz	r3, 28b9c <_nano_sys_clock_tick_announce+0xa8>
   28b4c:	691a      	ldr	r2, [r3, #16]
   28b4e:	bb2a      	cbnz	r2, 28b9c <_nano_sys_clock_tick_announce+0xa8>
	node->prev->next = node->next;
   28b50:	685a      	ldr	r2, [r3, #4]
   28b52:	6819      	ldr	r1, [r3, #0]
   28b54:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28b56:	681a      	ldr	r2, [r3, #0]
   28b58:	6859      	ldr	r1, [r3, #4]
   28b5a:	6051      	str	r1, [r2, #4]
	node->next = list->head;
   28b5c:	aa02      	add	r2, sp, #8
   28b5e:	f852 1d08 	ldr.w	r1, [r2, #-8]!
   28b62:	6019      	str	r1, [r3, #0]
	node->prev = list;
   28b64:	605a      	str	r2, [r3, #4]
	list->head->prev = node;
   28b66:	9a00      	ldr	r2, [sp, #0]
   28b68:	6053      	str	r3, [r2, #4]
	list->head = node;
   28b6a:	9300      	str	r3, [sp, #0]
		timeout->delta_ticks_from_prev = _EXPIRED;
   28b6c:	f06f 0201 	mvn.w	r2, #1
   28b70:	611a      	str	r2, [r3, #16]
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b72:	f380 8811 	msr	BASEPRI, r0
	__asm__ volatile(
   28b76:	f04f 0220 	mov.w	r2, #32
   28b7a:	f3ef 8311 	mrs	r3, BASEPRI
   28b7e:	f382 8811 	msr	BASEPRI, r2
   28b82:	4618      	mov	r0, r3
	return list->head == list;
   28b84:	4a4b      	ldr	r2, [pc, #300]	; (28cb4 <_nano_sys_clock_tick_announce+0x1c0>)
   28b86:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28b8a:	4293      	cmp	r3, r2
   28b8c:	d1dd      	bne.n	28b4a <_nano_sys_clock_tick_announce+0x56>
   28b8e:	2300      	movs	r3, #0
   28b90:	e7db      	b.n	28b4a <_nano_sys_clock_tick_announce+0x56>
   28b92:	2200      	movs	r2, #0
   28b94:	e7d1      	b.n	28b3a <_nano_sys_clock_tick_announce+0x46>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28b96:	f381 8811 	msr	BASEPRI, r1
   28b9a:	e084      	b.n	28ca6 <_nano_sys_clock_tick_announce+0x1b2>
   28b9c:	f380 8811 	msr	BASEPRI, r0
	return list->head == list;
   28ba0:	aa02      	add	r2, sp, #8
   28ba2:	f852 3d08 	ldr.w	r3, [r2, #-8]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28ba6:	4293      	cmp	r3, r2
   28ba8:	d00d      	beq.n	28bc6 <_nano_sys_clock_tick_announce+0xd2>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   28baa:	b193      	cbz	r3, 28bd2 <_nano_sys_clock_tick_announce+0xde>
   28bac:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bae:	b163      	cbz	r3, 28bca <_nano_sys_clock_tick_announce+0xd6>
	return (node == list->tail) ? NULL : node->next;
   28bb0:	9901      	ldr	r1, [sp, #4]
   28bb2:	428b      	cmp	r3, r1
   28bb4:	d00b      	beq.n	28bce <_nano_sys_clock_tick_announce+0xda>
   28bb6:	6819      	ldr	r1, [r3, #0]
   28bb8:	b169      	cbz	r1, 28bd6 <_nano_sys_clock_tick_announce+0xe2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bba:	b172      	cbz	r2, 28bda <_nano_sys_clock_tick_announce+0xe6>
	return (node == list->tail) ? NULL : node->next;
   28bbc:	9901      	ldr	r1, [sp, #4]
   28bbe:	428a      	cmp	r2, r1
   28bc0:	d00d      	beq.n	28bde <_nano_sys_clock_tick_announce+0xea>
   28bc2:	681c      	ldr	r4, [r3, #0]
   28bc4:	e027      	b.n	28c16 <_nano_sys_clock_tick_announce+0x122>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28bc6:	2300      	movs	r3, #0
   28bc8:	e7ef      	b.n	28baa <_nano_sys_clock_tick_announce+0xb6>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bca:	4619      	mov	r1, r3
   28bcc:	e7f4      	b.n	28bb8 <_nano_sys_clock_tick_announce+0xc4>
	return (node == list->tail) ? NULL : node->next;
   28bce:	2100      	movs	r1, #0
   28bd0:	e7f2      	b.n	28bb8 <_nano_sys_clock_tick_announce+0xc4>
   28bd2:	461c      	mov	r4, r3
   28bd4:	e01f      	b.n	28c16 <_nano_sys_clock_tick_announce+0x122>
   28bd6:	2400      	movs	r4, #0
   28bd8:	e01d      	b.n	28c16 <_nano_sys_clock_tick_announce+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bda:	2400      	movs	r4, #0
   28bdc:	e01b      	b.n	28c16 <_nano_sys_clock_tick_announce+0x122>
	return (node == list->tail) ? NULL : node->next;
   28bde:	2400      	movs	r4, #0
   28be0:	e019      	b.n	28c16 <_nano_sys_clock_tick_announce+0x122>
	return !(_is_thread_prevented_from_running(thread) ||
   28be2:	2301      	movs	r3, #1
   28be4:	e000      	b.n	28be8 <_nano_sys_clock_tick_announce+0xf4>
   28be6:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28be8:	2b00      	cmp	r3, #0
   28bea:	d142      	bne.n	28c72 <_nano_sys_clock_tick_announce+0x17e>
   28bec:	f386 8811 	msr	BASEPRI, r6
   28bf0:	2c00      	cmp	r4, #0
   28bf2:	d04d      	beq.n	28c90 <_nano_sys_clock_tick_announce+0x19c>
   28bf4:	4623      	mov	r3, r4
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28bf6:	2c00      	cmp	r4, #0
   28bf8:	d046      	beq.n	28c88 <_nano_sys_clock_tick_announce+0x194>
	return (node == list->tail) ? NULL : node->next;
   28bfa:	9a01      	ldr	r2, [sp, #4]
   28bfc:	4294      	cmp	r4, r2
   28bfe:	d045      	beq.n	28c8c <_nano_sys_clock_tick_announce+0x198>
   28c00:	6822      	ldr	r2, [r4, #0]
   28c02:	2a00      	cmp	r2, #0
   28c04:	d046      	beq.n	28c94 <_nano_sys_clock_tick_announce+0x1a0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c06:	2b00      	cmp	r3, #0
   28c08:	d046      	beq.n	28c98 <_nano_sys_clock_tick_announce+0x1a4>
	return (node == list->tail) ? NULL : node->next;
   28c0a:	9a01      	ldr	r2, [sp, #4]
   28c0c:	4293      	cmp	r3, r2
   28c0e:	d045      	beq.n	28c9c <_nano_sys_clock_tick_announce+0x1a8>
   28c10:	6822      	ldr	r2, [r4, #0]
   28c12:	4623      	mov	r3, r4
   28c14:	4614      	mov	r4, r2
   28c16:	2b00      	cmp	r3, #0
   28c18:	d042      	beq.n	28ca0 <_nano_sys_clock_tick_announce+0x1ac>
	node->prev->next = node->next;
   28c1a:	685a      	ldr	r2, [r3, #4]
   28c1c:	6819      	ldr	r1, [r3, #0]
   28c1e:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   28c20:	681a      	ldr	r2, [r3, #0]
   28c22:	6859      	ldr	r1, [r3, #4]
   28c24:	6051      	str	r1, [r2, #4]
	struct k_thread *thread = timeout->thread;
   28c26:	6898      	ldr	r0, [r3, #8]
	__asm__ volatile(
   28c28:	f04f 0220 	mov.w	r2, #32
   28c2c:	f3ef 8611 	mrs	r6, BASEPRI
   28c30:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   28c34:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   28c38:	611a      	str	r2, [r3, #16]
	if (thread) {
   28c3a:	b1e8      	cbz	r0, 28c78 <_nano_sys_clock_tick_announce+0x184>
	if (timeout_obj->wait_q) {
   28c3c:	68db      	ldr	r3, [r3, #12]
   28c3e:	b15b      	cbz	r3, 28c58 <_nano_sys_clock_tick_announce+0x164>
	node->prev->next = node->next;
   28c40:	6843      	ldr	r3, [r0, #4]
   28c42:	6802      	ldr	r2, [r0, #0]
   28c44:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28c46:	6803      	ldr	r3, [r0, #0]
   28c48:	6842      	ldr	r2, [r0, #4]
   28c4a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28c4c:	7a43      	ldrb	r3, [r0, #9]
   28c4e:	f023 0302 	bic.w	r3, r3, #2
   28c52:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28c54:	2300      	movs	r3, #0
   28c56:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28c58:	7a43      	ldrb	r3, [r0, #9]
   28c5a:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28c5e:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28c60:	f013 0f1b 	tst.w	r3, #27
   28c64:	d1bf      	bne.n	28be6 <_nano_sys_clock_tick_announce+0xf2>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28c66:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28c68:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28c6c:	d0b9      	beq.n	28be2 <_nano_sys_clock_tick_announce+0xee>
   28c6e:	2300      	movs	r3, #0
   28c70:	e7ba      	b.n	28be8 <_nano_sys_clock_tick_announce+0xf4>
		_add_thread_to_ready_q(thread);
   28c72:	f7ff fba1 	bl	283b8 <_add_thread_to_ready_q>
   28c76:	e7b9      	b.n	28bec <_nano_sys_clock_tick_announce+0xf8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28c78:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28c7c:	695a      	ldr	r2, [r3, #20]
   28c7e:	2a00      	cmp	r2, #0
   28c80:	d0b6      	beq.n	28bf0 <_nano_sys_clock_tick_announce+0xfc>
			timeout->func(timeout);
   28c82:	4618      	mov	r0, r3
   28c84:	4790      	blx	r2
   28c86:	e7b3      	b.n	28bf0 <_nano_sys_clock_tick_announce+0xfc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c88:	4622      	mov	r2, r4
   28c8a:	e7ba      	b.n	28c02 <_nano_sys_clock_tick_announce+0x10e>
	return (node == list->tail) ? NULL : node->next;
   28c8c:	2200      	movs	r2, #0
   28c8e:	e7b8      	b.n	28c02 <_nano_sys_clock_tick_announce+0x10e>
	SYS_DLIST_FOR_EACH_CONTAINER_SAFE(expired, timeout, next, node) {
   28c90:	4622      	mov	r2, r4
   28c92:	e7be      	b.n	28c12 <_nano_sys_clock_tick_announce+0x11e>
   28c94:	2200      	movs	r2, #0
   28c96:	e7bc      	b.n	28c12 <_nano_sys_clock_tick_announce+0x11e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28c98:	2200      	movs	r2, #0
   28c9a:	e7ba      	b.n	28c12 <_nano_sys_clock_tick_announce+0x11e>
	return (node == list->tail) ? NULL : node->next;
   28c9c:	2200      	movs	r2, #0
   28c9e:	e7b8      	b.n	28c12 <_nano_sys_clock_tick_announce+0x11e>
	_handling_timeouts = 0;
   28ca0:	2200      	movs	r2, #0
   28ca2:	4b05      	ldr	r3, [pc, #20]	; (28cb8 <_nano_sys_clock_tick_announce+0x1c4>)
   28ca4:	601a      	str	r2, [r3, #0]
	irq_unlock(key);
#endif
	handle_timeouts(ticks);

	/* time slicing is basically handled like just yet another timeout */
	handle_time_slicing(ticks);
   28ca6:	4628      	mov	r0, r5
   28ca8:	f7ff fed4 	bl	28a54 <handle_time_slicing>
	if ((!remaining && next_to) || (next_to < remaining)) {
		/* Clears current program if next_to = 0 and remaining > 0 */
		_set_time(next_to);
	}
#endif
}
   28cac:	b002      	add	sp, #8
   28cae:	bd70      	pop	{r4, r5, r6, pc}
   28cb0:	20002bd0 	.word	0x20002bd0
   28cb4:	20002810 	.word	0x20002810
   28cb8:	20002bc8 	.word	0x20002bc8

00028cbc <k_sys_work_q_init>:
K_THREAD_STACK_DEFINE(sys_work_q_stack, CONFIG_SYSTEM_WORKQUEUE_STACK_SIZE);

struct k_work_q k_sys_work_q;

static int k_sys_work_q_init(struct device *dev)
{
   28cbc:	b508      	push	{r3, lr}
	ARG_UNUSED(dev);

	k_work_q_start(&k_sys_work_q,
   28cbe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28cc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
   28cc6:	4903      	ldr	r1, [pc, #12]	; (28cd4 <k_sys_work_q_init+0x18>)
   28cc8:	4803      	ldr	r0, [pc, #12]	; (28cd8 <k_sys_work_q_init+0x1c>)
   28cca:	f000 fc49 	bl	29560 <k_work_q_start>
		       sys_work_q_stack,
		       K_THREAD_STACK_SIZEOF(sys_work_q_stack),
		       CONFIG_SYSTEM_WORKQUEUE_PRIORITY);

	return 0;
}
   28cce:	2000      	movs	r0, #0
   28cd0:	bd08      	pop	{r3, pc}
   28cd2:	bf00      	nop
   28cd4:	2000b4a0 	.word	0x2000b4a0
   28cd8:	20002bd8 	.word	0x20002bd8

00028cdc <k_is_in_isr>:
   28cdc:	f3ef 8305 	mrs	r3, IPSR
   28ce0:	2b0d      	cmp	r3, #13
   28ce2:	d807      	bhi.n	28cf4 <k_is_in_isr+0x18>
   28ce4:	b143      	cbz	r3, 28cf8 <k_is_in_isr+0x1c>
   28ce6:	4b06      	ldr	r3, [pc, #24]	; (28d00 <k_is_in_isr+0x24>)
   28ce8:	685b      	ldr	r3, [r3, #4]
   28cea:	f413 6f00 	tst.w	r3, #2048	; 0x800
   28cee:	d005      	beq.n	28cfc <k_is_in_isr+0x20>
   28cf0:	2000      	movs	r0, #0
   28cf2:	4770      	bx	lr
   28cf4:	2001      	movs	r0, #1
   28cf6:	4770      	bx	lr
   28cf8:	2000      	movs	r0, #0
   28cfa:	4770      	bx	lr
   28cfc:	2001      	movs	r0, #1


int k_is_in_isr(void)
{
	return _is_in_isr();
}
   28cfe:	4770      	bx	lr
   28d00:	e000ed00 	.word	0xe000ed00

00028d04 <_is_thread_essential>:
 *
 * Returns non-zero if current thread is essential, zero if it is not.
 */
int _is_thread_essential(void)
{
	return _current->base.user_options & K_ESSENTIAL;
   28d04:	4b02      	ldr	r3, [pc, #8]	; (28d10 <_is_thread_essential+0xc>)
   28d06:	689b      	ldr	r3, [r3, #8]
   28d08:	7a18      	ldrb	r0, [r3, #8]
}
   28d0a:	f000 0001 	and.w	r0, r0, #1
   28d0e:	4770      	bx	lr
   28d10:	20002810 	.word	0x20002810

00028d14 <_thread_entry>:
 * This routine does not return, and is marked as such so the compiler won't
 * generate preamble code that is only used by functions that actually return.
 */
FUNC_NORETURN void _thread_entry(k_thread_entry_t entry,
				 void *p1, void *p2, void *p3)
{
   28d14:	b508      	push	{r3, lr}
   28d16:	4604      	mov	r4, r0
   28d18:	4608      	mov	r0, r1
   28d1a:	4611      	mov	r1, r2
	entry(p1, p2, p3);
   28d1c:	461a      	mov	r2, r3
   28d1e:	47a0      	blx	r4
K_SYSCALL_DECLARE0(K_SYSCALL_K_CURRENT_GET, k_current_get, k_tid_t);
   28d20:	f7ff fcae 	bl	28680 <_impl_k_current_get>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_ABORT, k_thread_abort, k_tid_t, thread);
   28d24:	f7fe facc 	bl	272c0 <_impl_k_thread_abort>

00028d28 <_impl_k_thread_start>:
	CODE_UNREACHABLE;
}

#ifdef CONFIG_MULTITHREADING
void _impl_k_thread_start(struct k_thread *thread)
{
   28d28:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   28d2a:	f04f 0320 	mov.w	r3, #32
   28d2e:	f3ef 8411 	mrs	r4, BASEPRI
   28d32:	f383 8811 	msr	BASEPRI, r3
	return !(thread->base.thread_state & _THREAD_PRESTART);
   28d36:	7a43      	ldrb	r3, [r0, #9]
	int key = irq_lock(); /* protect kernel queues */

	if (_has_thread_started(thread)) {
   28d38:	f013 0f04 	tst.w	r3, #4
   28d3c:	d00b      	beq.n	28d56 <_impl_k_thread_start+0x2e>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28d3e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28d42:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28d44:	f013 0f1b 	tst.w	r3, #27
   28d48:	d10a      	bne.n	28d60 <_impl_k_thread_start+0x38>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28d4a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28d4c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28d50:	d004      	beq.n	28d5c <_impl_k_thread_start+0x34>
   28d52:	2500      	movs	r5, #0
   28d54:	e005      	b.n	28d62 <_impl_k_thread_start+0x3a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28d56:	f384 8811 	msr	BASEPRI, r4
   28d5a:	bd38      	pop	{r3, r4, r5, pc}
   28d5c:	2501      	movs	r5, #1
   28d5e:	e000      	b.n	28d62 <_impl_k_thread_start+0x3a>
   28d60:	2500      	movs	r5, #0
		return;
	}

	_mark_thread_as_started(thread);

	if (_is_thread_ready(thread)) {
   28d62:	b915      	cbnz	r5, 28d6a <_impl_k_thread_start+0x42>
   28d64:	f384 8811 	msr	BASEPRI, r4
   28d68:	bd38      	pop	{r3, r4, r5, pc}
		_add_thread_to_ready_q(thread);
   28d6a:	f7ff fb25 	bl	283b8 <_add_thread_to_ready_q>
	return _is_preempt(_current) && __must_switch_threads();
   28d6e:	4b0a      	ldr	r3, [pc, #40]	; (28d98 <_impl_k_thread_start+0x70>)
   28d70:	689b      	ldr	r3, [r3, #8]
	return thread->base.preempt <= _PREEMPT_THRESHOLD;
   28d72:	895b      	ldrh	r3, [r3, #10]
	return _is_preempt(_current) && __must_switch_threads();
   28d74:	2b7f      	cmp	r3, #127	; 0x7f
   28d76:	d908      	bls.n	28d8a <_impl_k_thread_start+0x62>
   28d78:	2300      	movs	r3, #0
		if (_must_switch_threads()) {
   28d7a:	2b00      	cmp	r3, #0
   28d7c:	d0f2      	beq.n	28d64 <_impl_k_thread_start+0x3c>
	_update_time_slice_before_swap();
   28d7e:	f7ff fcad 	bl	286dc <_update_time_slice_before_swap>
	return __swap(key);
   28d82:	4620      	mov	r0, r4
   28d84:	f7fd fff0 	bl	26d68 <__swap>
   28d88:	bd38      	pop	{r3, r4, r5, pc}
   28d8a:	f7ff fc39 	bl	28600 <__must_switch_threads>
   28d8e:	4603      	mov	r3, r0
   28d90:	2800      	cmp	r0, #0
   28d92:	d0f2      	beq.n	28d7a <_impl_k_thread_start+0x52>
   28d94:	462b      	mov	r3, r5
   28d96:	e7f0      	b.n	28d7a <_impl_k_thread_start+0x52>
   28d98:	20002810 	.word	0x20002810

00028d9c <schedule_new_thread>:
#endif
#endif

#ifdef CONFIG_MULTITHREADING
static void schedule_new_thread(struct k_thread *thread, s32_t delay)
{
   28d9c:	b570      	push	{r4, r5, r6, lr}
#ifdef CONFIG_SYS_CLOCK_EXISTS
	if (delay == 0) {
   28d9e:	b1d1      	cbz	r1, 28dd6 <schedule_new_thread+0x3a>
   28da0:	460b      	mov	r3, r1
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   28da2:	3309      	adds	r3, #9
   28da4:	4a47      	ldr	r2, [pc, #284]	; (28ec4 <schedule_new_thread+0x128>)
   28da6:	fba2 2303 	umull	r2, r3, r2, r3
   28daa:	08db      	lsrs	r3, r3, #3
		k_thread_start(thread);
	} else {
		s32_t ticks = _TICK_ALIGN + _ms_to_ticks(delay);
   28dac:	3301      	adds	r3, #1
	__asm__ volatile(
   28dae:	f04f 0220 	mov.w	r2, #32
   28db2:	f3ef 8511 	mrs	r5, BASEPRI
   28db6:	f382 8811 	msr	BASEPRI, r2
	_add_timeout(thread, &thread->base.timeout, wait_q, timeout_in_ticks);
   28dba:	f100 0410 	add.w	r4, r0, #16
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   28dbe:	6123      	str	r3, [r4, #16]
	timeout->thread = thread;
   28dc0:	60a0      	str	r0, [r4, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   28dc2:	2200      	movs	r2, #0
   28dc4:	60e2      	str	r2, [r4, #12]
	if (!timeout_in_ticks) {
   28dc6:	b14b      	cbz	r3, 28ddc <schedule_new_thread+0x40>
	return list->head == list;
   28dc8:	4a3f      	ldr	r2, [pc, #252]	; (28ec8 <schedule_new_thread+0x12c>)
   28dca:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   28dce:	4293      	cmp	r3, r2
   28dd0:	d152      	bne.n	28e78 <schedule_new_thread+0xdc>
   28dd2:	2300      	movs	r3, #0
   28dd4:	e050      	b.n	28e78 <schedule_new_thread+0xdc>
K_SYSCALL_DECLARE1_VOID(K_SYSCALL_K_THREAD_START, k_thread_start, k_tid_t, thread);
   28dd6:	f7ff ffa7 	bl	28d28 <_impl_k_thread_start>
   28dda:	bd70      	pop	{r4, r5, r6, pc}
   28ddc:	f04f 0320 	mov.w	r3, #32
   28de0:	f3ef 8611 	mrs	r6, BASEPRI
   28de4:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   28de8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28dec:	6123      	str	r3, [r4, #16]
	if (thread) {
   28dee:	b320      	cbz	r0, 28e3a <schedule_new_thread+0x9e>
	if (timeout_obj->wait_q) {
   28df0:	68e3      	ldr	r3, [r4, #12]
   28df2:	b15b      	cbz	r3, 28e0c <schedule_new_thread+0x70>
	node->prev->next = node->next;
   28df4:	6843      	ldr	r3, [r0, #4]
   28df6:	6802      	ldr	r2, [r0, #0]
   28df8:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28dfa:	6803      	ldr	r3, [r0, #0]
   28dfc:	6842      	ldr	r2, [r0, #4]
   28dfe:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28e00:	7a43      	ldrb	r3, [r0, #9]
   28e02:	f023 0302 	bic.w	r3, r3, #2
   28e06:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   28e08:	2300      	movs	r3, #0
   28e0a:	61c3      	str	r3, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   28e0c:	7a43      	ldrb	r3, [r0, #9]
   28e0e:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   28e12:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28e14:	f013 0f1b 	tst.w	r3, #27
   28e18:	d107      	bne.n	28e2a <schedule_new_thread+0x8e>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28e1a:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   28e20:	d001      	beq.n	28e26 <schedule_new_thread+0x8a>
   28e22:	2300      	movs	r3, #0
   28e24:	e002      	b.n	28e2c <schedule_new_thread+0x90>
   28e26:	2301      	movs	r3, #1
   28e28:	e000      	b.n	28e2c <schedule_new_thread+0x90>
   28e2a:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   28e2c:	b913      	cbnz	r3, 28e34 <schedule_new_thread+0x98>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   28e2e:	f386 8811 	msr	BASEPRI, r6
   28e32:	e044      	b.n	28ebe <schedule_new_thread+0x122>
		_add_thread_to_ready_q(thread);
   28e34:	f7ff fac0 	bl	283b8 <_add_thread_to_ready_q>
   28e38:	e7f9      	b.n	28e2e <schedule_new_thread+0x92>
   28e3a:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   28e3e:	6963      	ldr	r3, [r4, #20]
   28e40:	2b00      	cmp	r3, #0
   28e42:	d03c      	beq.n	28ebe <schedule_new_thread+0x122>
			timeout->func(timeout);
   28e44:	4620      	mov	r0, r4
   28e46:	4798      	blx	r3
   28e48:	e039      	b.n	28ebe <schedule_new_thread+0x122>
			in_q->delta_ticks_from_prev -= *delta;
   28e4a:	1a8a      	subs	r2, r1, r2
   28e4c:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   28e4e:	b133      	cbz	r3, 28e5e <schedule_new_thread+0xc2>
		node->prev = insert_point->prev;
   28e50:	685a      	ldr	r2, [r3, #4]
   28e52:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   28e54:	6103      	str	r3, [r0, #16]
		insert_point->prev->next = node;
   28e56:	685a      	ldr	r2, [r3, #4]
   28e58:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   28e5a:	605c      	str	r4, [r3, #4]
   28e5c:	e02f      	b.n	28ebe <schedule_new_thread+0x122>
	node->next = list;
   28e5e:	4b1b      	ldr	r3, [pc, #108]	; (28ecc <schedule_new_thread+0x130>)
   28e60:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28e62:	685a      	ldr	r2, [r3, #4]
   28e64:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28e66:	685a      	ldr	r2, [r3, #4]
   28e68:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28e6a:	605c      	str	r4, [r3, #4]
   28e6c:	e027      	b.n	28ebe <schedule_new_thread+0x122>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e6e:	4619      	mov	r1, r3
   28e70:	e011      	b.n	28e96 <schedule_new_thread+0xfa>
	return (node == list->tail) ? NULL : node->next;
   28e72:	2100      	movs	r1, #0
   28e74:	e00f      	b.n	28e96 <schedule_new_thread+0xfa>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28e76:	2300      	movs	r3, #0
   28e78:	b1d3      	cbz	r3, 28eb0 <schedule_new_thread+0x114>
		if (*delta <= in_q->delta_ticks_from_prev) {
   28e7a:	6922      	ldr	r2, [r4, #16]
   28e7c:	6919      	ldr	r1, [r3, #16]
   28e7e:	428a      	cmp	r2, r1
   28e80:	dde3      	ble.n	28e4a <schedule_new_thread+0xae>
		*delta -= in_q->delta_ticks_from_prev;
   28e82:	1a52      	subs	r2, r2, r1
   28e84:	6122      	str	r2, [r4, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   28e86:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e88:	2b00      	cmp	r3, #0
   28e8a:	d0f0      	beq.n	28e6e <schedule_new_thread+0xd2>
	return (node == list->tail) ? NULL : node->next;
   28e8c:	490e      	ldr	r1, [pc, #56]	; (28ec8 <schedule_new_thread+0x12c>)
   28e8e:	6909      	ldr	r1, [r1, #16]
   28e90:	428b      	cmp	r3, r1
   28e92:	d0ee      	beq.n	28e72 <schedule_new_thread+0xd6>
   28e94:	6819      	ldr	r1, [r3, #0]
   28e96:	2900      	cmp	r1, #0
   28e98:	d0ed      	beq.n	28e76 <schedule_new_thread+0xda>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28e9a:	b12a      	cbz	r2, 28ea8 <schedule_new_thread+0x10c>
	return (node == list->tail) ? NULL : node->next;
   28e9c:	490a      	ldr	r1, [pc, #40]	; (28ec8 <schedule_new_thread+0x12c>)
   28e9e:	6909      	ldr	r1, [r1, #16]
   28ea0:	428a      	cmp	r2, r1
   28ea2:	d003      	beq.n	28eac <schedule_new_thread+0x110>
   28ea4:	681b      	ldr	r3, [r3, #0]
   28ea6:	e7e7      	b.n	28e78 <schedule_new_thread+0xdc>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28ea8:	2300      	movs	r3, #0
   28eaa:	e7e5      	b.n	28e78 <schedule_new_thread+0xdc>
	return (node == list->tail) ? NULL : node->next;
   28eac:	2300      	movs	r3, #0
   28eae:	e7e3      	b.n	28e78 <schedule_new_thread+0xdc>
	node->next = list;
   28eb0:	4b06      	ldr	r3, [pc, #24]	; (28ecc <schedule_new_thread+0x130>)
   28eb2:	6103      	str	r3, [r0, #16]
	node->prev = list->tail;
   28eb4:	685a      	ldr	r2, [r3, #4]
   28eb6:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   28eb8:	685a      	ldr	r2, [r3, #4]
   28eba:	6014      	str	r4, [r2, #0]
	list->tail = node;
   28ebc:	605c      	str	r4, [r3, #4]
   28ebe:	f385 8811 	msr	BASEPRI, r5
   28ec2:	bd70      	pop	{r4, r5, r6, pc}
   28ec4:	cccccccd 	.word	0xcccccccd
   28ec8:	20002810 	.word	0x20002810
   28ecc:	2000281c 	.word	0x2000281c

00028ed0 <_setup_new_thread>:
void _setup_new_thread(struct k_thread *new_thread,
		       k_thread_stack_t *stack, size_t stack_size,
		       k_thread_entry_t entry,
		       void *p1, void *p2, void *p3,
		       int prio, u32_t options)
{
   28ed0:	b510      	push	{r4, lr}
   28ed2:	b086      	sub	sp, #24
	_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28ed4:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   28ed6:	9404      	str	r4, [sp, #16]
   28ed8:	9c0b      	ldr	r4, [sp, #44]	; 0x2c
   28eda:	9403      	str	r4, [sp, #12]
   28edc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   28ede:	9402      	str	r4, [sp, #8]
   28ee0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   28ee2:	9401      	str	r4, [sp, #4]
   28ee4:	9c08      	ldr	r4, [sp, #32]
   28ee6:	9400      	str	r4, [sp, #0]
   28ee8:	f7fe f940 	bl	2716c <_new_thread>

	if (options & K_INHERIT_PERMS) {
		_thread_perms_inherit(_current, new_thread);
	}
#endif
}
   28eec:	b006      	add	sp, #24
   28eee:	bd10      	pop	{r4, pc}

00028ef0 <_impl_k_thread_create>:
k_tid_t _impl_k_thread_create(struct k_thread *new_thread,
			      k_thread_stack_t *stack,
			      size_t stack_size, k_thread_entry_t entry,
			      void *p1, void *p2, void *p3,
			      int prio, u32_t options, s32_t delay)
{
   28ef0:	b570      	push	{r4, r5, r6, lr}
   28ef2:	b086      	sub	sp, #24
   28ef4:	4604      	mov	r4, r0
   28ef6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
	__ASSERT(!_is_in_isr(), "Threads may not be created in ISRs");
	_setup_new_thread(new_thread, stack, stack_size, entry, p1, p2, p3,
   28ef8:	9e0e      	ldr	r6, [sp, #56]	; 0x38
   28efa:	9604      	str	r6, [sp, #16]
   28efc:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   28efe:	9603      	str	r6, [sp, #12]
   28f00:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   28f02:	9602      	str	r6, [sp, #8]
   28f04:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   28f06:	9601      	str	r6, [sp, #4]
   28f08:	9e0a      	ldr	r6, [sp, #40]	; 0x28
   28f0a:	9600      	str	r6, [sp, #0]
   28f0c:	f7ff ffe0 	bl	28ed0 <_setup_new_thread>
			  prio, options);

	if (delay != K_FOREVER) {
   28f10:	f1b5 3fff 	cmp.w	r5, #4294967295	; 0xffffffff
   28f14:	d003      	beq.n	28f1e <_impl_k_thread_create+0x2e>
		schedule_new_thread(new_thread, delay);
   28f16:	4629      	mov	r1, r5
   28f18:	4620      	mov	r0, r4
   28f1a:	f7ff ff3f 	bl	28d9c <schedule_new_thread>
	}
	return new_thread;
}
   28f1e:	4620      	mov	r0, r4
   28f20:	b006      	add	sp, #24
   28f22:	bd70      	pop	{r4, r5, r6, pc}

00028f24 <_k_thread_single_abort>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE_VOID(k_thread_resume, K_OBJ_THREAD, k_tid_t);
#endif

void _k_thread_single_abort(struct k_thread *thread)
{
   28f24:	b510      	push	{r4, lr}
   28f26:	4604      	mov	r4, r0
	if (thread->fn_abort != NULL) {
   28f28:	6d03      	ldr	r3, [r0, #80]	; 0x50
   28f2a:	b103      	cbz	r3, 28f2e <_k_thread_single_abort+0xa>
		thread->fn_abort();
   28f2c:	4798      	blx	r3
	u8_t state = thread->base.thread_state;
   28f2e:	7a63      	ldrb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   28f30:	f013 0f1f 	tst.w	r3, #31
   28f34:	d107      	bne.n	28f46 <_k_thread_single_abort+0x22>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28f36:	6a22      	ldr	r2, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   28f38:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   28f3c:	d001      	beq.n	28f42 <_k_thread_single_abort+0x1e>
   28f3e:	2200      	movs	r2, #0
   28f40:	e002      	b.n	28f48 <_k_thread_single_abort+0x24>
   28f42:	2201      	movs	r2, #1
   28f44:	e000      	b.n	28f48 <_k_thread_single_abort+0x24>
   28f46:	2200      	movs	r2, #0
	}

	if (_is_thread_ready(thread)) {
   28f48:	bb4a      	cbnz	r2, 28f9e <_k_thread_single_abort+0x7a>
		_remove_thread_from_ready_q(thread);
	} else {
		if (_is_thread_pending(thread)) {
   28f4a:	f013 0f02 	tst.w	r3, #2
   28f4e:	d009      	beq.n	28f64 <_k_thread_single_abort+0x40>
	node->prev->next = node->next;
   28f50:	6863      	ldr	r3, [r4, #4]
   28f52:	6822      	ldr	r2, [r4, #0]
   28f54:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f56:	6823      	ldr	r3, [r4, #0]
   28f58:	6862      	ldr	r2, [r4, #4]
   28f5a:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   28f5c:	7a63      	ldrb	r3, [r4, #9]
   28f5e:	f023 0302 	bic.w	r3, r3, #2
   28f62:	7263      	strb	r3, [r4, #9]
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   28f64:	6a21      	ldr	r1, [r4, #32]
			_unpend_thread(thread);
		}
		if (_is_thread_timeout_active(thread)) {
   28f66:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   28f6a:	d013      	beq.n	28f94 <_k_thread_single_abort+0x70>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   28f6c:	f104 0310 	add.w	r3, r4, #16
	return list->tail == node;
   28f70:	4a0d      	ldr	r2, [pc, #52]	; (28fa8 <_k_thread_single_abort+0x84>)
   28f72:	6912      	ldr	r2, [r2, #16]
   28f74:	4293      	cmp	r3, r2
   28f76:	d004      	beq.n	28f82 <_k_thread_single_abort+0x5e>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   28f78:	b103      	cbz	r3, 28f7c <_k_thread_single_abort+0x58>
	return (node == list->tail) ? NULL : node->next;
   28f7a:	6923      	ldr	r3, [r4, #16]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   28f7c:	691a      	ldr	r2, [r3, #16]
   28f7e:	440a      	add	r2, r1
   28f80:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   28f82:	6963      	ldr	r3, [r4, #20]
   28f84:	6922      	ldr	r2, [r4, #16]
   28f86:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   28f88:	6923      	ldr	r3, [r4, #16]
   28f8a:	6962      	ldr	r2, [r4, #20]
   28f8c:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   28f8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   28f92:	6223      	str	r3, [r4, #32]
			_abort_thread_timeout(thread);
		}
	}

	thread->base.thread_state |= _THREAD_DEAD;
   28f94:	7a63      	ldrb	r3, [r4, #9]
   28f96:	f043 0308 	orr.w	r3, r3, #8
   28f9a:	7263      	strb	r3, [r4, #9]
   28f9c:	bd10      	pop	{r4, pc}
		_remove_thread_from_ready_q(thread);
   28f9e:	4620      	mov	r0, r4
   28fa0:	f7ff fa2a 	bl	283f8 <_remove_thread_from_ready_q>
   28fa4:	e7f6      	b.n	28f94 <_k_thread_single_abort+0x70>
   28fa6:	bf00      	nop
   28fa8:	20002810 	.word	0x20002810

00028fac <_init_static_threads>:
	}
}
#endif /* CONFIG_USERSPACE */

void _init_static_threads(void)
{
   28fac:	b530      	push	{r4, r5, lr}
   28fae:	b087      	sub	sp, #28
	unsigned int  key;

	_FOREACH_STATIC_THREAD(thread_data) {
   28fb0:	4c1b      	ldr	r4, [pc, #108]	; (29020 <_init_static_threads+0x74>)
   28fb2:	e012      	b.n	28fda <_init_static_threads+0x2e>
		_setup_new_thread(
   28fb4:	6a23      	ldr	r3, [r4, #32]
   28fb6:	9304      	str	r3, [sp, #16]
   28fb8:	69e3      	ldr	r3, [r4, #28]
   28fba:	9303      	str	r3, [sp, #12]
   28fbc:	69a3      	ldr	r3, [r4, #24]
   28fbe:	9302      	str	r3, [sp, #8]
   28fc0:	6963      	ldr	r3, [r4, #20]
   28fc2:	9301      	str	r3, [sp, #4]
   28fc4:	6923      	ldr	r3, [r4, #16]
   28fc6:	9300      	str	r3, [sp, #0]
   28fc8:	68e3      	ldr	r3, [r4, #12]
   28fca:	68a2      	ldr	r2, [r4, #8]
   28fcc:	6861      	ldr	r1, [r4, #4]
   28fce:	6820      	ldr	r0, [r4, #0]
   28fd0:	f7ff ff7e 	bl	28ed0 <_setup_new_thread>
			thread_data->init_p2,
			thread_data->init_p3,
			thread_data->init_prio,
			thread_data->init_options);

		thread_data->init_thread->init_data = thread_data;
   28fd4:	6823      	ldr	r3, [r4, #0]
   28fd6:	64dc      	str	r4, [r3, #76]	; 0x4c
	_FOREACH_STATIC_THREAD(thread_data) {
   28fd8:	3430      	adds	r4, #48	; 0x30
   28fda:	4b12      	ldr	r3, [pc, #72]	; (29024 <_init_static_threads+0x78>)
   28fdc:	429c      	cmp	r4, r3
   28fde:	d3e9      	bcc.n	28fb4 <_init_static_threads+0x8>
	--_current->base.sched_locked;
   28fe0:	4b11      	ldr	r3, [pc, #68]	; (29028 <_init_static_threads+0x7c>)
   28fe2:	689a      	ldr	r2, [r3, #8]
   28fe4:	7ad3      	ldrb	r3, [r2, #11]
   28fe6:	3b01      	subs	r3, #1
   28fe8:	72d3      	strb	r3, [r2, #11]
	__asm__ volatile(
   28fea:	f04f 0320 	mov.w	r3, #32
   28fee:	f3ef 8511 	mrs	r5, BASEPRI
   28ff2:	f383 8811 	msr	BASEPRI, r3
	 *
	 * Note that static threads defined using the legacy API have a
	 * delay of K_FOREVER.
	 */
	key = irq_lock();
	_FOREACH_STATIC_THREAD(thread_data) {
   28ff6:	4c0a      	ldr	r4, [pc, #40]	; (29020 <_init_static_threads+0x74>)
   28ff8:	e000      	b.n	28ffc <_init_static_threads+0x50>
   28ffa:	3430      	adds	r4, #48	; 0x30
   28ffc:	4b09      	ldr	r3, [pc, #36]	; (29024 <_init_static_threads+0x78>)
   28ffe:	429c      	cmp	r4, r3
   29000:	d207      	bcs.n	29012 <_init_static_threads+0x66>
		if (thread_data->init_delay != K_FOREVER) {
   29002:	6a61      	ldr	r1, [r4, #36]	; 0x24
   29004:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29008:	d0f7      	beq.n	28ffa <_init_static_threads+0x4e>
			schedule_new_thread(thread_data->init_thread,
   2900a:	6820      	ldr	r0, [r4, #0]
   2900c:	f7ff fec6 	bl	28d9c <schedule_new_thread>
   29010:	e7f3      	b.n	28ffa <_init_static_threads+0x4e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29012:	f385 8811 	msr	BASEPRI, r5
					    thread_data->init_delay);
		}
	}
	irq_unlock(key);
	k_sched_unlock();
   29016:	f7ff fb81 	bl	2871c <k_sched_unlock>
}
   2901a:	b007      	add	sp, #28
   2901c:	bd30      	pop	{r4, r5, pc}
   2901e:	bf00      	nop
   29020:	2000cc28 	.word	0x2000cc28
   29024:	2000cc28 	.word	0x2000cc28
   29028:	20002810 	.word	0x20002810

0002902c <_init_thread_base>:
void _init_thread_base(struct _thread_base *thread_base, int priority,
		       u32_t initial_state, unsigned int options)
{
	/* k_q_node is initialized upon first insertion in a list */

	thread_base->user_options = (u8_t)options;
   2902c:	7203      	strb	r3, [r0, #8]
	thread_base->thread_state = (u8_t)initial_state;
   2902e:	7242      	strb	r2, [r0, #9]

	thread_base->prio = priority;
   29030:	7281      	strb	r1, [r0, #10]

	thread_base->sched_locked = 0;
   29032:	2300      	movs	r3, #0
   29034:	72c3      	strb	r3, [r0, #11]
	t->delta_ticks_from_prev = _INACTIVE;
   29036:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   2903a:	6202      	str	r2, [r0, #32]
	t->wait_q = NULL;
   2903c:	61c3      	str	r3, [r0, #28]
	t->thread = NULL;
   2903e:	6183      	str	r3, [r0, #24]
	t->func = func;
   29040:	6243      	str	r3, [r0, #36]	; 0x24
   29042:	4770      	bx	lr

00029044 <_timer_expiration_handler>:
 * @param t  Timeout used by the timer.
 *
 * @return N/A
 */
void _timer_expiration_handler(struct _timeout *t)
{
   29044:	b570      	push	{r4, r5, r6, lr}
   29046:	4604      	mov	r4, r0

	/*
	 * if the timer is periodic, start it again; don't add _TICK_ALIGN
	 * since we're already aligned to a tick boundary
	 */
	if (timer->period > 0) {
   29048:	6a83      	ldr	r3, [r0, #40]	; 0x28
   2904a:	2b00      	cmp	r3, #0
   2904c:	f340 8088 	ble.w	29160 <_timer_expiration_handler+0x11c>
	__asm__ volatile(
   29050:	f04f 0320 	mov.w	r3, #32
   29054:	f3ef 8511 	mrs	r5, BASEPRI
   29058:	f383 8811 	msr	BASEPRI, r3
		key = irq_lock();
		_add_timeout(NULL, &timer->timeout, &timer->wait_q,
   2905c:	f100 0218 	add.w	r2, r0, #24
   29060:	6a83      	ldr	r3, [r0, #40]	; 0x28
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29062:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   29064:	2100      	movs	r1, #0
   29066:	6081      	str	r1, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   29068:	60c2      	str	r2, [r0, #12]
	if (!timeout_in_ticks) {
   2906a:	b133      	cbz	r3, 2907a <_timer_expiration_handler+0x36>
	return list->head == list;
   2906c:	4a59      	ldr	r2, [pc, #356]	; (291d4 <_timer_expiration_handler+0x190>)
   2906e:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29072:	4293      	cmp	r3, r2
   29074:	d14f      	bne.n	29116 <_timer_expiration_handler+0xd2>
   29076:	2300      	movs	r3, #0
   29078:	e04d      	b.n	29116 <_timer_expiration_handler+0xd2>
	struct k_thread *thread = timeout->thread;
   2907a:	4608      	mov	r0, r1
   2907c:	f04f 0320 	mov.w	r3, #32
   29080:	f3ef 8611 	mrs	r6, BASEPRI
   29084:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29088:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2908c:	6123      	str	r3, [r4, #16]
	if (thread) {
   2908e:	b319      	cbz	r1, 290d8 <_timer_expiration_handler+0x94>
	if (timeout_obj->wait_q) {
   29090:	68e3      	ldr	r3, [r4, #12]
   29092:	b153      	cbz	r3, 290aa <_timer_expiration_handler+0x66>
	node->prev->next = node->next;
   29094:	684b      	ldr	r3, [r1, #4]
   29096:	680a      	ldr	r2, [r1, #0]
   29098:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2909a:	680b      	ldr	r3, [r1, #0]
   2909c:	684a      	ldr	r2, [r1, #4]
   2909e:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   290a0:	7a4b      	ldrb	r3, [r1, #9]
   290a2:	f023 0302 	bic.w	r3, r3, #2
   290a6:	724b      	strb	r3, [r1, #9]
		thread->base.timeout.wait_q = NULL;
   290a8:	61c1      	str	r1, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   290aa:	7a43      	ldrb	r3, [r0, #9]
   290ac:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   290b0:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   290b2:	f013 0f1b 	tst.w	r3, #27
   290b6:	d107      	bne.n	290c8 <_timer_expiration_handler+0x84>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   290b8:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   290ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   290be:	d001      	beq.n	290c4 <_timer_expiration_handler+0x80>
   290c0:	2300      	movs	r3, #0
   290c2:	e002      	b.n	290ca <_timer_expiration_handler+0x86>
   290c4:	2301      	movs	r3, #1
   290c6:	e000      	b.n	290ca <_timer_expiration_handler+0x86>
   290c8:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   290ca:	b913      	cbnz	r3, 290d2 <_timer_expiration_handler+0x8e>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   290cc:	f386 8811 	msr	BASEPRI, r6
   290d0:	e044      	b.n	2915c <_timer_expiration_handler+0x118>
		_add_thread_to_ready_q(thread);
   290d2:	f7ff f971 	bl	283b8 <_add_thread_to_ready_q>
   290d6:	e7f9      	b.n	290cc <_timer_expiration_handler+0x88>
   290d8:	f386 8811 	msr	BASEPRI, r6
		if (timeout->func) {
   290dc:	6963      	ldr	r3, [r4, #20]
   290de:	2b00      	cmp	r3, #0
   290e0:	d03c      	beq.n	2915c <_timer_expiration_handler+0x118>
			timeout->func(timeout);
   290e2:	4620      	mov	r0, r4
   290e4:	4798      	blx	r3
   290e6:	e039      	b.n	2915c <_timer_expiration_handler+0x118>
			in_q->delta_ticks_from_prev -= *delta;
   290e8:	1a8a      	subs	r2, r1, r2
   290ea:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   290ec:	b133      	cbz	r3, 290fc <_timer_expiration_handler+0xb8>
		node->prev = insert_point->prev;
   290ee:	685a      	ldr	r2, [r3, #4]
   290f0:	6062      	str	r2, [r4, #4]
		node->next = insert_point;
   290f2:	6023      	str	r3, [r4, #0]
		insert_point->prev->next = node;
   290f4:	685a      	ldr	r2, [r3, #4]
   290f6:	6014      	str	r4, [r2, #0]
		insert_point->prev = node;
   290f8:	605c      	str	r4, [r3, #4]
   290fa:	e02f      	b.n	2915c <_timer_expiration_handler+0x118>
	node->next = list;
   290fc:	4b36      	ldr	r3, [pc, #216]	; (291d8 <_timer_expiration_handler+0x194>)
   290fe:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29100:	685a      	ldr	r2, [r3, #4]
   29102:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29104:	685a      	ldr	r2, [r3, #4]
   29106:	6014      	str	r4, [r2, #0]
	list->tail = node;
   29108:	605c      	str	r4, [r3, #4]
   2910a:	e027      	b.n	2915c <_timer_expiration_handler+0x118>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2910c:	4619      	mov	r1, r3
   2910e:	e011      	b.n	29134 <_timer_expiration_handler+0xf0>
	return (node == list->tail) ? NULL : node->next;
   29110:	2100      	movs	r1, #0
   29112:	e00f      	b.n	29134 <_timer_expiration_handler+0xf0>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29114:	2300      	movs	r3, #0
   29116:	b1d3      	cbz	r3, 2914e <_timer_expiration_handler+0x10a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   29118:	6902      	ldr	r2, [r0, #16]
   2911a:	6919      	ldr	r1, [r3, #16]
   2911c:	428a      	cmp	r2, r1
   2911e:	dde3      	ble.n	290e8 <_timer_expiration_handler+0xa4>
		*delta -= in_q->delta_ticks_from_prev;
   29120:	1a52      	subs	r2, r2, r1
   29122:	6102      	str	r2, [r0, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29124:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29126:	2b00      	cmp	r3, #0
   29128:	d0f0      	beq.n	2910c <_timer_expiration_handler+0xc8>
	return (node == list->tail) ? NULL : node->next;
   2912a:	492a      	ldr	r1, [pc, #168]	; (291d4 <_timer_expiration_handler+0x190>)
   2912c:	6909      	ldr	r1, [r1, #16]
   2912e:	428b      	cmp	r3, r1
   29130:	d0ee      	beq.n	29110 <_timer_expiration_handler+0xcc>
   29132:	6819      	ldr	r1, [r3, #0]
   29134:	2900      	cmp	r1, #0
   29136:	d0ed      	beq.n	29114 <_timer_expiration_handler+0xd0>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29138:	b12a      	cbz	r2, 29146 <_timer_expiration_handler+0x102>
	return (node == list->tail) ? NULL : node->next;
   2913a:	4926      	ldr	r1, [pc, #152]	; (291d4 <_timer_expiration_handler+0x190>)
   2913c:	6909      	ldr	r1, [r1, #16]
   2913e:	428a      	cmp	r2, r1
   29140:	d003      	beq.n	2914a <_timer_expiration_handler+0x106>
   29142:	681b      	ldr	r3, [r3, #0]
   29144:	e7e7      	b.n	29116 <_timer_expiration_handler+0xd2>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29146:	2300      	movs	r3, #0
   29148:	e7e5      	b.n	29116 <_timer_expiration_handler+0xd2>
	return (node == list->tail) ? NULL : node->next;
   2914a:	2300      	movs	r3, #0
   2914c:	e7e3      	b.n	29116 <_timer_expiration_handler+0xd2>
	node->next = list;
   2914e:	4b22      	ldr	r3, [pc, #136]	; (291d8 <_timer_expiration_handler+0x194>)
   29150:	6023      	str	r3, [r4, #0]
	node->prev = list->tail;
   29152:	685a      	ldr	r2, [r3, #4]
   29154:	6062      	str	r2, [r4, #4]
	list->tail->next = node;
   29156:	685a      	ldr	r2, [r3, #4]
   29158:	6014      	str	r4, [r2, #0]
	list->tail = node;
   2915a:	605c      	str	r4, [r3, #4]
   2915c:	f385 8811 	msr	BASEPRI, r5
				timer->period);
		irq_unlock(key);
	}

	/* update timer's status */
	timer->status += 1;
   29160:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   29162:	3301      	adds	r3, #1
   29164:	62e3      	str	r3, [r4, #44]	; 0x2c

	/* invoke timer expiry function */
	if (timer->expiry_fn) {
   29166:	6a23      	ldr	r3, [r4, #32]
   29168:	b10b      	cbz	r3, 2916e <_timer_expiration_handler+0x12a>
		timer->expiry_fn(timer);
   2916a:	4620      	mov	r0, r4
   2916c:	4798      	blx	r3
	}

	thread = (struct k_thread *)sys_dlist_peek_head(&timer->wait_q);
   2916e:	f104 0318 	add.w	r3, r4, #24
	return list->head == list;
   29172:	69a4      	ldr	r4, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29174:	42a3      	cmp	r3, r4
   29176:	d01d      	beq.n	291b4 <_timer_expiration_handler+0x170>

	if (!thread) {
   29178:	b334      	cbz	r4, 291c8 <_timer_expiration_handler+0x184>
	node->prev->next = node->next;
   2917a:	6863      	ldr	r3, [r4, #4]
   2917c:	6822      	ldr	r2, [r4, #0]
   2917e:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29180:	6823      	ldr	r3, [r4, #0]
   29182:	6862      	ldr	r2, [r4, #4]
   29184:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29186:	7a63      	ldrb	r3, [r4, #9]
   29188:	f023 0302 	bic.w	r3, r3, #2
   2918c:	7263      	strb	r3, [r4, #9]
	__asm__ volatile(
   2918e:	f04f 0320 	mov.w	r3, #32
   29192:	f3ef 8511 	mrs	r5, BASEPRI
   29196:	f383 8811 	msr	BASEPRI, r3
	thread->base.thread_state &= ~_THREAD_PRESTART;
   2919a:	7a63      	ldrb	r3, [r4, #9]
   2919c:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   291a0:	7263      	strb	r3, [r4, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   291a2:	f013 0f1b 	tst.w	r3, #27
   291a6:	d109      	bne.n	291bc <_timer_expiration_handler+0x178>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   291a8:	6a23      	ldr	r3, [r4, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   291aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   291ae:	d003      	beq.n	291b8 <_timer_expiration_handler+0x174>
   291b0:	2300      	movs	r3, #0
   291b2:	e004      	b.n	291be <_timer_expiration_handler+0x17a>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   291b4:	2400      	movs	r4, #0
   291b6:	e7df      	b.n	29178 <_timer_expiration_handler+0x134>
   291b8:	2301      	movs	r3, #1
   291ba:	e000      	b.n	291be <_timer_expiration_handler+0x17a>
   291bc:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   291be:	b923      	cbnz	r3, 291ca <_timer_expiration_handler+0x186>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   291c0:	f385 8811 	msr	BASEPRI, r5
   291c4:	2300      	movs	r3, #0
   291c6:	6663      	str	r3, [r4, #100]	; 0x64
   291c8:	bd70      	pop	{r4, r5, r6, pc}
		_add_thread_to_ready_q(thread);
   291ca:	4620      	mov	r0, r4
   291cc:	f7ff f8f4 	bl	283b8 <_add_thread_to_ready_q>
   291d0:	e7f6      	b.n	291c0 <_timer_expiration_handler+0x17c>
   291d2:	bf00      	nop
   291d4:	20002810 	.word	0x20002810
   291d8:	2000281c 	.word	0x2000281c

000291dc <k_timer_init>:

void k_timer_init(struct k_timer *timer,
		  void (*expiry_fn)(struct k_timer *),
		  void (*stop_fn)(struct k_timer *))
{
	timer->expiry_fn = expiry_fn;
   291dc:	6201      	str	r1, [r0, #32]
	timer->stop_fn = stop_fn;
   291de:	6242      	str	r2, [r0, #36]	; 0x24
	timer->status = 0;
   291e0:	2300      	movs	r3, #0
   291e2:	62c3      	str	r3, [r0, #44]	; 0x2c

	sys_dlist_init(&timer->wait_q);
   291e4:	f100 0218 	add.w	r2, r0, #24
	list->head = (sys_dnode_t *)list;
   291e8:	6182      	str	r2, [r0, #24]
	list->tail = (sys_dnode_t *)list;
   291ea:	61c2      	str	r2, [r0, #28]
	t->delta_ticks_from_prev = _INACTIVE;
   291ec:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   291f0:	6102      	str	r2, [r0, #16]
	t->wait_q = NULL;
   291f2:	60c3      	str	r3, [r0, #12]
	t->thread = NULL;
   291f4:	6083      	str	r3, [r0, #8]
	t->func = func;
   291f6:	4a02      	ldr	r2, [pc, #8]	; (29200 <k_timer_init+0x24>)
   291f8:	6142      	str	r2, [r0, #20]
	_init_timeout(&timer->timeout, _timer_expiration_handler);
	SYS_TRACING_OBJ_INIT(k_timer, timer);

	timer->user_data = NULL;
   291fa:	6303      	str	r3, [r0, #48]	; 0x30
   291fc:	4770      	bx	lr
   291fe:	bf00      	nop
   29200:	00029045 	.word	0x00029045

00029204 <_impl_k_timer_start>:
	_k_object_init(timer);
}


void _impl_k_timer_start(struct k_timer *timer, s32_t duration, s32_t period)
{
   29204:	b530      	push	{r4, r5, lr}
   29206:	b083      	sub	sp, #12
   29208:	3209      	adds	r2, #9
   2920a:	4b57      	ldr	r3, [pc, #348]	; (29368 <_impl_k_timer_start+0x164>)
   2920c:	fba3 4202 	umull	r4, r2, r3, r2
   29210:	08d2      	lsrs	r2, r2, #3
	__ASSERT(duration >= 0 && period >= 0 &&
		 (duration != 0 || period != 0), "invalid parameters\n");

	volatile s32_t period_in_ticks, duration_in_ticks;

	period_in_ticks = _ms_to_ticks(period);
   29212:	9201      	str	r2, [sp, #4]
   29214:	3109      	adds	r1, #9
   29216:	fba3 3101 	umull	r3, r1, r3, r1
   2921a:	08c9      	lsrs	r1, r1, #3
	duration_in_ticks = _ms_to_ticks(duration);
   2921c:	9100      	str	r1, [sp, #0]
	__asm__ volatile(
   2921e:	f04f 0320 	mov.w	r3, #32
   29222:	f3ef 8411 	mrs	r4, BASEPRI
   29226:	f383 8811 	msr	BASEPRI, r3

	unsigned int key = irq_lock();

	if (timer->timeout.delta_ticks_from_prev != _INACTIVE) {
   2922a:	6901      	ldr	r1, [r0, #16]
   2922c:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   29230:	d012      	beq.n	29258 <_impl_k_timer_start+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29232:	4603      	mov	r3, r0
	return list->tail == node;
   29234:	4a4d      	ldr	r2, [pc, #308]	; (2936c <_impl_k_timer_start+0x168>)
   29236:	6912      	ldr	r2, [r2, #16]
   29238:	4290      	cmp	r0, r2
   2923a:	d004      	beq.n	29246 <_impl_k_timer_start+0x42>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2923c:	b100      	cbz	r0, 29240 <_impl_k_timer_start+0x3c>
	return (node == list->tail) ? NULL : node->next;
   2923e:	6803      	ldr	r3, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29240:	691a      	ldr	r2, [r3, #16]
   29242:	440a      	add	r2, r1
   29244:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   29246:	6843      	ldr	r3, [r0, #4]
   29248:	6802      	ldr	r2, [r0, #0]
   2924a:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   2924c:	6803      	ldr	r3, [r0, #0]
   2924e:	6842      	ldr	r2, [r0, #4]
   29250:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29252:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29256:	6103      	str	r3, [r0, #16]
		_abort_timeout(&timer->timeout);
	}

	timer->period = period_in_ticks;
   29258:	9b01      	ldr	r3, [sp, #4]
   2925a:	6283      	str	r3, [r0, #40]	; 0x28
	timer->status = 0;
   2925c:	2200      	movs	r2, #0
   2925e:	62c2      	str	r2, [r0, #44]	; 0x2c
	_add_timeout(NULL, &timer->timeout, &timer->wait_q, duration_in_ticks);
   29260:	4605      	mov	r5, r0
   29262:	f100 0118 	add.w	r1, r0, #24
   29266:	9b00      	ldr	r3, [sp, #0]
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   29268:	6103      	str	r3, [r0, #16]
	timeout->thread = thread;
   2926a:	6082      	str	r2, [r0, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   2926c:	60c1      	str	r1, [r0, #12]
	if (!timeout_in_ticks) {
   2926e:	b133      	cbz	r3, 2927e <_impl_k_timer_start+0x7a>
	return list->head == list;
   29270:	4a3e      	ldr	r2, [pc, #248]	; (2936c <_impl_k_timer_start+0x168>)
   29272:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29276:	4293      	cmp	r3, r2
   29278:	d14f      	bne.n	2931a <_impl_k_timer_start+0x116>
   2927a:	2300      	movs	r3, #0
   2927c:	e04d      	b.n	2931a <_impl_k_timer_start+0x116>
	struct k_thread *thread = timeout->thread;
   2927e:	4613      	mov	r3, r2
   29280:	f04f 0220 	mov.w	r2, #32
   29284:	f3ef 8511 	mrs	r5, BASEPRI
   29288:	f382 8811 	msr	BASEPRI, r2
	timeout->delta_ticks_from_prev = _INACTIVE;
   2928c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
   29290:	6102      	str	r2, [r0, #16]
	if (thread) {
   29292:	b323      	cbz	r3, 292de <_impl_k_timer_start+0xda>
	if (timeout_obj->wait_q) {
   29294:	68c2      	ldr	r2, [r0, #12]
   29296:	b152      	cbz	r2, 292ae <_impl_k_timer_start+0xaa>
	node->prev->next = node->next;
   29298:	685a      	ldr	r2, [r3, #4]
   2929a:	6819      	ldr	r1, [r3, #0]
   2929c:	6011      	str	r1, [r2, #0]
	node->next->prev = node->prev;
   2929e:	681a      	ldr	r2, [r3, #0]
   292a0:	6859      	ldr	r1, [r3, #4]
   292a2:	6051      	str	r1, [r2, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   292a4:	7a5a      	ldrb	r2, [r3, #9]
   292a6:	f022 0202 	bic.w	r2, r2, #2
   292aa:	725a      	strb	r2, [r3, #9]
		thread->base.timeout.wait_q = NULL;
   292ac:	61db      	str	r3, [r3, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   292ae:	7a5a      	ldrb	r2, [r3, #9]
   292b0:	f002 02fb 	and.w	r2, r2, #251	; 0xfb
   292b4:	725a      	strb	r2, [r3, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   292b6:	f012 0f1b 	tst.w	r2, #27
   292ba:	d107      	bne.n	292cc <_impl_k_timer_start+0xc8>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   292bc:	6a1a      	ldr	r2, [r3, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   292be:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   292c2:	d001      	beq.n	292c8 <_impl_k_timer_start+0xc4>
   292c4:	2200      	movs	r2, #0
   292c6:	e002      	b.n	292ce <_impl_k_timer_start+0xca>
   292c8:	2201      	movs	r2, #1
   292ca:	e000      	b.n	292ce <_impl_k_timer_start+0xca>
   292cc:	2200      	movs	r2, #0
	if (_is_thread_ready(thread)) {
   292ce:	b912      	cbnz	r2, 292d6 <_impl_k_timer_start+0xd2>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   292d0:	f385 8811 	msr	BASEPRI, r5
   292d4:	e044      	b.n	29360 <_impl_k_timer_start+0x15c>
		_add_thread_to_ready_q(thread);
   292d6:	4618      	mov	r0, r3
   292d8:	f7ff f86e 	bl	283b8 <_add_thread_to_ready_q>
   292dc:	e7f8      	b.n	292d0 <_impl_k_timer_start+0xcc>
   292de:	f385 8811 	msr	BASEPRI, r5
		if (timeout->func) {
   292e2:	6943      	ldr	r3, [r0, #20]
   292e4:	2b00      	cmp	r3, #0
   292e6:	d03b      	beq.n	29360 <_impl_k_timer_start+0x15c>
			timeout->func(timeout);
   292e8:	4798      	blx	r3
   292ea:	e039      	b.n	29360 <_impl_k_timer_start+0x15c>
			in_q->delta_ticks_from_prev -= *delta;
   292ec:	1a8a      	subs	r2, r1, r2
   292ee:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   292f0:	b133      	cbz	r3, 29300 <_impl_k_timer_start+0xfc>
		node->prev = insert_point->prev;
   292f2:	685a      	ldr	r2, [r3, #4]
   292f4:	6042      	str	r2, [r0, #4]
		node->next = insert_point;
   292f6:	6003      	str	r3, [r0, #0]
		insert_point->prev->next = node;
   292f8:	685a      	ldr	r2, [r3, #4]
   292fa:	6010      	str	r0, [r2, #0]
		insert_point->prev = node;
   292fc:	6058      	str	r0, [r3, #4]
   292fe:	e02f      	b.n	29360 <_impl_k_timer_start+0x15c>
	node->next = list;
   29300:	4b1b      	ldr	r3, [pc, #108]	; (29370 <_impl_k_timer_start+0x16c>)
   29302:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29304:	685a      	ldr	r2, [r3, #4]
   29306:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   29308:	685a      	ldr	r2, [r3, #4]
   2930a:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2930c:	6058      	str	r0, [r3, #4]
   2930e:	e027      	b.n	29360 <_impl_k_timer_start+0x15c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29310:	4619      	mov	r1, r3
   29312:	e011      	b.n	29338 <_impl_k_timer_start+0x134>
	return (node == list->tail) ? NULL : node->next;
   29314:	2100      	movs	r1, #0
   29316:	e00f      	b.n	29338 <_impl_k_timer_start+0x134>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29318:	2300      	movs	r3, #0
   2931a:	b1d3      	cbz	r3, 29352 <_impl_k_timer_start+0x14e>
		if (*delta <= in_q->delta_ticks_from_prev) {
   2931c:	692a      	ldr	r2, [r5, #16]
   2931e:	6919      	ldr	r1, [r3, #16]
   29320:	428a      	cmp	r2, r1
   29322:	dde3      	ble.n	292ec <_impl_k_timer_start+0xe8>
		*delta -= in_q->delta_ticks_from_prev;
   29324:	1a52      	subs	r2, r2, r1
   29326:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   29328:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2932a:	2b00      	cmp	r3, #0
   2932c:	d0f0      	beq.n	29310 <_impl_k_timer_start+0x10c>
	return (node == list->tail) ? NULL : node->next;
   2932e:	490f      	ldr	r1, [pc, #60]	; (2936c <_impl_k_timer_start+0x168>)
   29330:	6909      	ldr	r1, [r1, #16]
   29332:	428b      	cmp	r3, r1
   29334:	d0ee      	beq.n	29314 <_impl_k_timer_start+0x110>
   29336:	6819      	ldr	r1, [r3, #0]
   29338:	2900      	cmp	r1, #0
   2933a:	d0ed      	beq.n	29318 <_impl_k_timer_start+0x114>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2933c:	b12a      	cbz	r2, 2934a <_impl_k_timer_start+0x146>
	return (node == list->tail) ? NULL : node->next;
   2933e:	490b      	ldr	r1, [pc, #44]	; (2936c <_impl_k_timer_start+0x168>)
   29340:	6909      	ldr	r1, [r1, #16]
   29342:	428a      	cmp	r2, r1
   29344:	d003      	beq.n	2934e <_impl_k_timer_start+0x14a>
   29346:	681b      	ldr	r3, [r3, #0]
   29348:	e7e7      	b.n	2931a <_impl_k_timer_start+0x116>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   2934a:	2300      	movs	r3, #0
   2934c:	e7e5      	b.n	2931a <_impl_k_timer_start+0x116>
	return (node == list->tail) ? NULL : node->next;
   2934e:	2300      	movs	r3, #0
   29350:	e7e3      	b.n	2931a <_impl_k_timer_start+0x116>
	node->next = list;
   29352:	4b07      	ldr	r3, [pc, #28]	; (29370 <_impl_k_timer_start+0x16c>)
   29354:	6003      	str	r3, [r0, #0]
	node->prev = list->tail;
   29356:	685a      	ldr	r2, [r3, #4]
   29358:	6042      	str	r2, [r0, #4]
	list->tail->next = node;
   2935a:	685a      	ldr	r2, [r3, #4]
   2935c:	6010      	str	r0, [r2, #0]
	list->tail = node;
   2935e:	6058      	str	r0, [r3, #4]
   29360:	f384 8811 	msr	BASEPRI, r4
	irq_unlock(key);
}
   29364:	b003      	add	sp, #12
   29366:	bd30      	pop	{r4, r5, pc}
   29368:	cccccccd 	.word	0xcccccccd
   2936c:	20002810 	.word	0x20002810
   29370:	2000281c 	.word	0x2000281c

00029374 <_impl_k_timer_stop>:
	return 0;
}
#endif

void _impl_k_timer_stop(struct k_timer *timer)
{
   29374:	b538      	push	{r3, r4, r5, lr}
	__asm__ volatile(
   29376:	f04f 0320 	mov.w	r3, #32
   2937a:	f3ef 8411 	mrs	r4, BASEPRI
   2937e:	f383 8811 	msr	BASEPRI, r3
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29382:	6903      	ldr	r3, [r0, #16]
   29384:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29388:	d042      	beq.n	29410 <_impl_k_timer_stop+0x9c>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   2938a:	4602      	mov	r2, r0
	return list->tail == node;
   2938c:	493b      	ldr	r1, [pc, #236]	; (2947c <_impl_k_timer_stop+0x108>)
   2938e:	6909      	ldr	r1, [r1, #16]
   29390:	4288      	cmp	r0, r1
   29392:	d004      	beq.n	2939e <_impl_k_timer_stop+0x2a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29394:	b100      	cbz	r0, 29398 <_impl_k_timer_stop+0x24>
	return (node == list->tail) ? NULL : node->next;
   29396:	6802      	ldr	r2, [r0, #0]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29398:	6911      	ldr	r1, [r2, #16]
   2939a:	440b      	add	r3, r1
   2939c:	6113      	str	r3, [r2, #16]
	node->prev->next = node->next;
   2939e:	6843      	ldr	r3, [r0, #4]
   293a0:	6802      	ldr	r2, [r0, #0]
   293a2:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   293a4:	6803      	ldr	r3, [r0, #0]
   293a6:	6842      	ldr	r2, [r0, #4]
   293a8:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   293aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   293ae:	6103      	str	r3, [r0, #16]
	return 0;
   293b0:	2300      	movs	r3, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   293b2:	f384 8811 	msr	BASEPRI, r4
	int key = irq_lock();
	int inactive = (_abort_timeout(&timer->timeout) == _INACTIVE);

	irq_unlock(key);

	if (inactive) {
   293b6:	2b00      	cmp	r3, #0
   293b8:	d15f      	bne.n	2947a <_impl_k_timer_stop+0x106>
   293ba:	4604      	mov	r4, r0
		return;
	}

	if (timer->stop_fn) {
   293bc:	6a43      	ldr	r3, [r0, #36]	; 0x24
   293be:	b103      	cbz	r3, 293c2 <_impl_k_timer_stop+0x4e>
		timer->stop_fn(timer);
   293c0:	4798      	blx	r3
	__asm__ volatile(
   293c2:	f04f 0320 	mov.w	r3, #32
   293c6:	f3ef 8511 	mrs	r5, BASEPRI
   293ca:	f383 8811 	msr	BASEPRI, r3
	}

	key = irq_lock();
	struct k_thread *pending_thread = _unpend_first_thread(&timer->wait_q);
   293ce:	f104 0218 	add.w	r2, r4, #24
	if (_handling_timeouts) {
   293d2:	4b2b      	ldr	r3, [pc, #172]	; (29480 <_impl_k_timer_stop+0x10c>)
   293d4:	681b      	ldr	r3, [r3, #0]
   293d6:	b9f3      	cbnz	r3, 29416 <_impl_k_timer_stop+0xa2>
	return list->head == list;
   293d8:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   293da:	4282      	cmp	r2, r0
   293dc:	d02c      	beq.n	29438 <_impl_k_timer_stop+0xc4>
	if (thread) {
   293de:	b148      	cbz	r0, 293f4 <_impl_k_timer_stop+0x80>
	node->prev->next = node->next;
   293e0:	6843      	ldr	r3, [r0, #4]
   293e2:	6802      	ldr	r2, [r0, #0]
   293e4:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   293e6:	6803      	ldr	r3, [r0, #0]
   293e8:	6842      	ldr	r2, [r0, #4]
   293ea:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   293ec:	7a43      	ldrb	r3, [r0, #9]
   293ee:	f023 0302 	bic.w	r3, r3, #2
   293f2:	7243      	strb	r3, [r0, #9]

	if (pending_thread) {
   293f4:	b330      	cbz	r0, 29444 <_impl_k_timer_stop+0xd0>
	thread->base.thread_state &= ~_THREAD_PRESTART;
   293f6:	7a43      	ldrb	r3, [r0, #9]
   293f8:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   293fc:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   293fe:	f013 0f1b 	tst.w	r3, #27
   29402:	d11d      	bne.n	29440 <_impl_k_timer_stop+0xcc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29404:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29406:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2940a:	d017      	beq.n	2943c <_impl_k_timer_stop+0xc8>
   2940c:	2300      	movs	r3, #0
   2940e:	e018      	b.n	29442 <_impl_k_timer_stop+0xce>
		return _INACTIVE;
   29410:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29414:	e7cd      	b.n	293b2 <_impl_k_timer_stop+0x3e>
	return list->head == list;
   29416:	69a0      	ldr	r0, [r4, #24]
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29418:	4282      	cmp	r2, r0
   2941a:	d102      	bne.n	29422 <_impl_k_timer_stop+0xae>
   2941c:	2000      	movs	r0, #0
   2941e:	e000      	b.n	29422 <_impl_k_timer_stop+0xae>
	return (node == list->tail) ? NULL : node->next;
   29420:	6800      	ldr	r0, [r0, #0]
		SYS_DLIST_ITERATE_FROM_NODE(q, cur) {
   29422:	2800      	cmp	r0, #0
   29424:	d0db      	beq.n	293de <_impl_k_timer_stop+0x6a>
	return thread->base.timeout.delta_ticks_from_prev == _EXPIRED;
   29426:	6a03      	ldr	r3, [r0, #32]
			if (_is_thread_timeout_expired(thread)) {
   29428:	f113 0f02 	cmn.w	r3, #2
   2942c:	d1d7      	bne.n	293de <_impl_k_timer_stop+0x6a>
   2942e:	6853      	ldr	r3, [r2, #4]
   29430:	4298      	cmp	r0, r3
   29432:	d1f5      	bne.n	29420 <_impl_k_timer_stop+0xac>
   29434:	2000      	movs	r0, #0
   29436:	e7f4      	b.n	29422 <_impl_k_timer_stop+0xae>
	return sys_dlist_is_empty(list) ? NULL : list->head;
   29438:	2000      	movs	r0, #0
   2943a:	e7d0      	b.n	293de <_impl_k_timer_stop+0x6a>
	return !(_is_thread_prevented_from_running(thread) ||
   2943c:	2301      	movs	r3, #1
   2943e:	e000      	b.n	29442 <_impl_k_timer_stop+0xce>
   29440:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29442:	b95b      	cbnz	r3, 2945c <_impl_k_timer_stop+0xe8>
   29444:	f3ef 8305 	mrs	r3, IPSR
   29448:	2b0d      	cmp	r3, #13
   2944a:	d80a      	bhi.n	29462 <_impl_k_timer_stop+0xee>
   2944c:	b173      	cbz	r3, 2946c <_impl_k_timer_stop+0xf8>
   2944e:	4b0d      	ldr	r3, [pc, #52]	; (29484 <_impl_k_timer_stop+0x110>)
   29450:	685b      	ldr	r3, [r3, #4]
   29452:	f413 6f00 	tst.w	r3, #2048	; 0x800
   29456:	d00b      	beq.n	29470 <_impl_k_timer_stop+0xfc>
   29458:	2300      	movs	r3, #0
   2945a:	e003      	b.n	29464 <_impl_k_timer_stop+0xf0>
		_add_thread_to_ready_q(thread);
   2945c:	f7fe ffac 	bl	283b8 <_add_thread_to_ready_q>
   29460:	e7f0      	b.n	29444 <_impl_k_timer_stop+0xd0>
   29462:	2301      	movs	r3, #1
		_ready_thread(pending_thread);
	}

	if (_is_in_isr()) {
   29464:	b133      	cbz	r3, 29474 <_impl_k_timer_stop+0x100>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29466:	f385 8811 	msr	BASEPRI, r5
   2946a:	bd38      	pop	{r3, r4, r5, pc}
   2946c:	2300      	movs	r3, #0
   2946e:	e7f9      	b.n	29464 <_impl_k_timer_stop+0xf0>
   29470:	2301      	movs	r3, #1
   29472:	e7f7      	b.n	29464 <_impl_k_timer_stop+0xf0>
		irq_unlock(key);
	} else {
		_reschedule_threads(key);
   29474:	4628      	mov	r0, r5
   29476:	f7ff f937 	bl	286e8 <_reschedule_threads>
   2947a:	bd38      	pop	{r3, r4, r5, pc}
   2947c:	20002810 	.word	0x20002810
   29480:	20002bc8 	.word	0x20002bc8
   29484:	e000ed00 	.word	0xe000ed00

00029488 <_timeout_remaining_get>:
#ifdef CONFIG_USERSPACE
_SYSCALL_HANDLER1_SIMPLE(k_timer_status_sync, K_OBJ_TIMER, struct k_timer *);
#endif

s32_t _timeout_remaining_get(struct _timeout *timeout)
{
   29488:	b430      	push	{r4, r5}
	__asm__ volatile(
   2948a:	f04f 0320 	mov.w	r3, #32
   2948e:	f3ef 8411 	mrs	r4, BASEPRI
   29492:	f383 8811 	msr	BASEPRI, r3
	unsigned int key = irq_lock();
	s32_t remaining_ticks;

	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   29496:	6903      	ldr	r3, [r0, #16]
   29498:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   2949c:	d017      	beq.n	294ce <_timeout_remaining_get+0x46>
	return list->head == list;
   2949e:	4a10      	ldr	r2, [pc, #64]	; (294e0 <_timeout_remaining_get+0x58>)
   294a0:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   294a4:	4293      	cmp	r3, r2
   294a6:	d001      	beq.n	294ac <_timeout_remaining_get+0x24>
		 * and summing up the various tick deltas involved
		 */
		struct _timeout *t =
			(struct _timeout *)sys_dlist_peek_head(&_timeout_q);

		remaining_ticks = t->delta_ticks_from_prev;
   294a8:	6919      	ldr	r1, [r3, #16]
		while (t != timeout) {
   294aa:	e005      	b.n	294b8 <_timeout_remaining_get+0x30>
   294ac:	2300      	movs	r3, #0
   294ae:	e7fb      	b.n	294a8 <_timeout_remaining_get+0x20>
	return (node == list->tail) ? NULL : node->next;
   294b0:	2200      	movs	r2, #0
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
								   &t->node);
			remaining_ticks += t->delta_ticks_from_prev;
   294b2:	6913      	ldr	r3, [r2, #16]
   294b4:	4419      	add	r1, r3
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   294b6:	4613      	mov	r3, r2
		while (t != timeout) {
   294b8:	4283      	cmp	r3, r0
   294ba:	d009      	beq.n	294d0 <_timeout_remaining_get+0x48>
			t = (struct _timeout *)sys_dlist_peek_next(&_timeout_q,
   294bc:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   294be:	2b00      	cmp	r3, #0
   294c0:	d0f7      	beq.n	294b2 <_timeout_remaining_get+0x2a>
	return (node == list->tail) ? NULL : node->next;
   294c2:	4a07      	ldr	r2, [pc, #28]	; (294e0 <_timeout_remaining_get+0x58>)
   294c4:	6912      	ldr	r2, [r2, #16]
   294c6:	4293      	cmp	r3, r2
   294c8:	d0f2      	beq.n	294b0 <_timeout_remaining_get+0x28>
   294ca:	681a      	ldr	r2, [r3, #0]
   294cc:	e7f1      	b.n	294b2 <_timeout_remaining_get+0x2a>
		remaining_ticks = 0;
   294ce:	2100      	movs	r1, #0
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   294d0:	f384 8811 	msr	BASEPRI, r4
	return (u64_t)ticks * _ms_per_tick;
   294d4:	008a      	lsls	r2, r1, #2
   294d6:	1850      	adds	r0, r2, r1
   294d8:	1800      	adds	r0, r0, r0
		}
	}

	irq_unlock(key);
	return __ticks_to_ms(remaining_ticks);
}
   294da:	bc30      	pop	{r4, r5}
   294dc:	4770      	bx	lr
   294de:	bf00      	nop
   294e0:	20002810 	.word	0x20002810

000294e4 <work_q_main>:
#include <kernel_structs.h>
#include <wait_q.h>
#include <errno.h>

static void work_q_main(void *work_q_ptr, void *p2, void *p3)
{
   294e4:	b538      	push	{r3, r4, r5, lr}
   294e6:	4604      	mov	r4, r0
   294e8:	e003      	b.n	294f2 <work_q_main+0xe>
		handler = work->handler;

		/* Reset pending state so it can be resubmitted by handler */
		if (atomic_test_and_clear_bit(work->flags,
					      K_WORK_STATE_PENDING)) {
			handler(work);
   294ea:	4610      	mov	r0, r2
   294ec:	47a8      	blx	r5
K_SYSCALL_DECLARE0_VOID(K_SYSCALL_K_YIELD, k_yield);
   294ee:	f7ff f927 	bl	28740 <_impl_k_yield>
		work = k_queue_get(&work_q->queue, K_FOREVER);
   294f2:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   294f6:	4620      	mov	r0, r4
   294f8:	f7fe ff0c 	bl	28314 <k_queue_get>
		if (!work) {
   294fc:	4602      	mov	r2, r0
   294fe:	2800      	cmp	r0, #0
   29500:	d0f7      	beq.n	294f2 <work_q_main+0xe>
		handler = work->handler;
   29502:	6845      	ldr	r5, [r0, #4]
		if (atomic_test_and_clear_bit(work->flags,
   29504:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   29508:	f3bf 8f5b 	dmb	ish
   2950c:	e853 1f00 	ldrex	r1, [r3]
   29510:	f021 0001 	bic.w	r0, r1, #1
   29514:	e843 0e00 	strex	lr, r0, [r3]
   29518:	f1be 0f00 	cmp.w	lr, #0
   2951c:	d1f6      	bne.n	2950c <work_q_main+0x28>
   2951e:	f3bf 8f5b 	dmb	ish
   29522:	f011 0f01 	tst.w	r1, #1
   29526:	d0e2      	beq.n	294ee <work_q_main+0xa>
   29528:	e7df      	b.n	294ea <work_q_main+0x6>

0002952a <work_timeout>:
	_k_object_init(work_q);
}

#ifdef CONFIG_SYS_CLOCK_EXISTS
static void work_timeout(struct _timeout *t)
{
   2952a:	b510      	push	{r4, lr}
	struct k_delayed_work *w = CONTAINER_OF(t, struct k_delayed_work,
						   timeout);

	/* submit work to workqueue */
	k_work_submit_to_queue(w->work_q, &w->work);
   2952c:	6984      	ldr	r4, [r0, #24]
   2952e:	f1a0 010c 	sub.w	r1, r0, #12
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   29532:	1f03      	subs	r3, r0, #4
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   29534:	f3bf 8f5b 	dmb	ish
   29538:	e853 2f00 	ldrex	r2, [r3]
   2953c:	f042 0001 	orr.w	r0, r2, #1
   29540:	e843 0e00 	strex	lr, r0, [r3]
   29544:	f1be 0f00 	cmp.w	lr, #0
   29548:	d1f6      	bne.n	29538 <work_timeout+0xe>
   2954a:	f3bf 8f5b 	dmb	ish
   2954e:	f012 0f01 	tst.w	r2, #1
   29552:	d000      	beq.n	29556 <work_timeout+0x2c>
   29554:	bd10      	pop	{r4, pc}
		k_queue_append(&work_q->queue, work);
   29556:	4620      	mov	r0, r4
   29558:	f7fe feb4 	bl	282c4 <k_queue_append>
}
   2955c:	e7fa      	b.n	29554 <work_timeout+0x2a>
	...

00029560 <k_work_q_start>:
{
   29560:	b5f0      	push	{r4, r5, r6, r7, lr}
   29562:	b087      	sub	sp, #28
   29564:	4604      	mov	r4, r0
   29566:	460d      	mov	r5, r1
   29568:	4616      	mov	r6, r2
   2956a:	461f      	mov	r7, r3
	k_queue_init(&work_q->queue);
   2956c:	f7fe fe77 	bl	2825e <k_queue_init>
K_SYSCALL_DECLARE10(K_SYSCALL_K_THREAD_CREATE, k_thread_create, k_tid_t, struct k_thread *, new_thread, k_thread_stack_t *, stack, size_t, stack_size, k_thread_entry_t, entry, void *, p1, void *, p2, void *, p3, int, prio, u32_t, options, s32_t, delay);
   29570:	2300      	movs	r3, #0
   29572:	9305      	str	r3, [sp, #20]
   29574:	9304      	str	r3, [sp, #16]
   29576:	9703      	str	r7, [sp, #12]
   29578:	9302      	str	r3, [sp, #8]
   2957a:	9301      	str	r3, [sp, #4]
   2957c:	9400      	str	r4, [sp, #0]
   2957e:	4b04      	ldr	r3, [pc, #16]	; (29590 <k_work_q_start+0x30>)
   29580:	4632      	mov	r2, r6
   29582:	4629      	mov	r1, r5
   29584:	f104 0010 	add.w	r0, r4, #16
   29588:	f7ff fcb2 	bl	28ef0 <_impl_k_thread_create>
}
   2958c:	b007      	add	sp, #28
   2958e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29590:	000294e5 	.word	0x000294e5

00029594 <k_delayed_work_init>:

void k_delayed_work_init(struct k_delayed_work *work, k_work_handler_t handler)
{
   29594:	b500      	push	{lr}
	atomic_clear_bit(work->flags, K_WORK_STATE_PENDING);
   29596:	f100 0308 	add.w	r3, r0, #8
	return __atomic_fetch_and(target, value, __ATOMIC_SEQ_CST);
   2959a:	f3bf 8f5b 	dmb	ish
   2959e:	e853 2f00 	ldrex	r2, [r3]
   295a2:	f022 0201 	bic.w	r2, r2, #1
   295a6:	e843 2e00 	strex	lr, r2, [r3]
   295aa:	f1be 0f00 	cmp.w	lr, #0
   295ae:	d1f6      	bne.n	2959e <k_delayed_work_init+0xa>
   295b0:	f3bf 8f5b 	dmb	ish
	work->handler = handler;
   295b4:	6041      	str	r1, [r0, #4]
	t->delta_ticks_from_prev = _INACTIVE;
   295b6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   295ba:	61c3      	str	r3, [r0, #28]
	t->wait_q = NULL;
   295bc:	2300      	movs	r3, #0
   295be:	6183      	str	r3, [r0, #24]
	t->thread = NULL;
   295c0:	6143      	str	r3, [r0, #20]
	t->func = func;
   295c2:	4a02      	ldr	r2, [pc, #8]	; (295cc <k_delayed_work_init+0x38>)
   295c4:	6202      	str	r2, [r0, #32]
	k_work_init(&work->work, handler);
	_init_timeout(&work->timeout, work_timeout);
	work->work_q = NULL;
   295c6:	6243      	str	r3, [r0, #36]	; 0x24
   295c8:	f85d fb04 	ldr.w	pc, [sp], #4
   295cc:	0002952b 	.word	0x0002952b

000295d0 <k_delayed_work_cancel>:

	return err;
}

int k_delayed_work_cancel(struct k_delayed_work *work)
{
   295d0:	b430      	push	{r4, r5}
	__asm__ volatile(
   295d2:	f04f 0320 	mov.w	r3, #32
   295d6:	f3ef 8411 	mrs	r4, BASEPRI
   295da:	f383 8811 	msr	BASEPRI, r3
	int key = irq_lock();

	if (!work->work_q) {
   295de:	6a43      	ldr	r3, [r0, #36]	; 0x24
   295e0:	b18b      	cbz	r3, 29606 <k_delayed_work_cancel+0x36>
	return __atomic_load_n(target, __ATOMIC_SEQ_CST);
   295e2:	f3bf 8f5b 	dmb	ish
   295e6:	6883      	ldr	r3, [r0, #8]
   295e8:	f3bf 8f5b 	dmb	ish
		irq_unlock(key);
		return -EINVAL;
	}

	if (k_work_pending(&work->work)) {
   295ec:	f013 0f01 	tst.w	r3, #1
   295f0:	d02d      	beq.n	2964e <k_delayed_work_cancel+0x7e>
		/* Remove from the queue if already submitted */
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   295f2:	6a45      	ldr	r5, [r0, #36]	; 0x24
   295f4:	4601      	mov	r1, r0
	return list->head;
   295f6:	682b      	ldr	r3, [r5, #0]
	sys_snode_t *prev = NULL;
   295f8:	2200      	movs	r2, #0
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   295fa:	b193      	cbz	r3, 29622 <k_delayed_work_cancel+0x52>
		if (test == node) {
   295fc:	4299      	cmp	r1, r3
   295fe:	d007      	beq.n	29610 <k_delayed_work_cancel+0x40>
		prev = test;
   29600:	461a      	mov	r2, r3
	SYS_SLIST_FOR_EACH_NODE(list, test) {
   29602:	681b      	ldr	r3, [r3, #0]
   29604:	e7f9      	b.n	295fa <k_delayed_work_cancel+0x2a>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29606:	f384 8811 	msr	BASEPRI, r4
		return -EINVAL;
   2960a:	f06f 0015 	mvn.w	r0, #21
   2960e:	e00e      	b.n	2962e <k_delayed_work_cancel+0x5e>
	if (!prev_node) {
   29610:	b17a      	cbz	r2, 29632 <k_delayed_work_cancel+0x62>
		prev_node->next = node->next;
   29612:	6803      	ldr	r3, [r0, #0]
   29614:	6013      	str	r3, [r2, #0]
		if (list->tail == node) {
   29616:	686b      	ldr	r3, [r5, #4]
   29618:	4298      	cmp	r0, r3
   2961a:	d011      	beq.n	29640 <k_delayed_work_cancel+0x70>
	node->next = NULL;
   2961c:	2300      	movs	r3, #0
   2961e:	6003      	str	r3, [r0, #0]
			return true;
   29620:	2301      	movs	r3, #1
		if (!k_queue_remove(&work->work_q->queue, &work->work)) {
   29622:	b17b      	cbz	r3, 29644 <k_delayed_work_cancel+0x74>
	} else {
		_abort_timeout(&work->timeout);
	}

	/* Detach from workqueue */
	work->work_q = NULL;
   29624:	2300      	movs	r3, #0
   29626:	6243      	str	r3, [r0, #36]	; 0x24
   29628:	f384 8811 	msr	BASEPRI, r4

	irq_unlock(key);

	return 0;
   2962c:	4618      	mov	r0, r3
}
   2962e:	bc30      	pop	{r4, r5}
   29630:	4770      	bx	lr
		list->head = node->next;
   29632:	6803      	ldr	r3, [r0, #0]
   29634:	602b      	str	r3, [r5, #0]
		if (list->tail == node) {
   29636:	686a      	ldr	r2, [r5, #4]
   29638:	4290      	cmp	r0, r2
   2963a:	d1ef      	bne.n	2961c <k_delayed_work_cancel+0x4c>
			list->tail = list->head;
   2963c:	606b      	str	r3, [r5, #4]
   2963e:	e7ed      	b.n	2961c <k_delayed_work_cancel+0x4c>
			list->tail = prev_node;
   29640:	606a      	str	r2, [r5, #4]
   29642:	e7eb      	b.n	2961c <k_delayed_work_cancel+0x4c>
   29644:	f384 8811 	msr	BASEPRI, r4
			return -EINVAL;
   29648:	f06f 0015 	mvn.w	r0, #21
   2964c:	e7ef      	b.n	2962e <k_delayed_work_cancel+0x5e>
	if (timeout->delta_ticks_from_prev == _INACTIVE) {
   2964e:	69c2      	ldr	r2, [r0, #28]
   29650:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
   29654:	d0e6      	beq.n	29624 <k_delayed_work_cancel+0x54>
	if (!sys_dlist_is_tail(&_timeout_q, &timeout->node)) {
   29656:	f100 030c 	add.w	r3, r0, #12
	return list->tail == node;
   2965a:	4909      	ldr	r1, [pc, #36]	; (29680 <k_delayed_work_cancel+0xb0>)
   2965c:	6909      	ldr	r1, [r1, #16]
   2965e:	428b      	cmp	r3, r1
   29660:	d004      	beq.n	2966c <k_delayed_work_cancel+0x9c>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   29662:	b103      	cbz	r3, 29666 <k_delayed_work_cancel+0x96>
	return (node == list->tail) ? NULL : node->next;
   29664:	68c3      	ldr	r3, [r0, #12]
		next->delta_ticks_from_prev += timeout->delta_ticks_from_prev;
   29666:	6919      	ldr	r1, [r3, #16]
   29668:	440a      	add	r2, r1
   2966a:	611a      	str	r2, [r3, #16]
	node->prev->next = node->next;
   2966c:	6903      	ldr	r3, [r0, #16]
   2966e:	68c2      	ldr	r2, [r0, #12]
   29670:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29672:	68c3      	ldr	r3, [r0, #12]
   29674:	6902      	ldr	r2, [r0, #16]
   29676:	605a      	str	r2, [r3, #4]
	timeout->delta_ticks_from_prev = _INACTIVE;
   29678:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2967c:	61c3      	str	r3, [r0, #28]
   2967e:	e7d1      	b.n	29624 <k_delayed_work_cancel+0x54>
   29680:	20002810 	.word	0x20002810

00029684 <k_delayed_work_submit_to_queue>:
{
   29684:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
	__asm__ volatile(
   29686:	f04f 0320 	mov.w	r3, #32
   2968a:	f3ef 8711 	mrs	r7, BASEPRI
   2968e:	f383 8811 	msr	BASEPRI, r3
	if (work->work_q && work->work_q != work_q) {
   29692:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   29694:	b113      	cbz	r3, 2969c <k_delayed_work_submit_to_queue+0x18>
   29696:	4283      	cmp	r3, r0
   29698:	f040 80b4 	bne.w	29804 <k_delayed_work_submit_to_queue+0x180>
   2969c:	4614      	mov	r4, r2
   2969e:	460e      	mov	r6, r1
   296a0:	4605      	mov	r5, r0
	if (work->work_q == work_q) {
   296a2:	4283      	cmp	r3, r0
   296a4:	d016      	beq.n	296d4 <k_delayed_work_submit_to_queue+0x50>
	work->work_q = work_q;
   296a6:	6275      	str	r5, [r6, #36]	; 0x24
	if (!delay) {
   296a8:	b1d4      	cbz	r4, 296e0 <k_delayed_work_submit_to_queue+0x5c>
		_add_timeout(NULL, &work->timeout, NULL,
   296aa:	f106 050c 	add.w	r5, r6, #12
	return (s32_t)ceiling_fraction((u32_t)ms, _ms_per_tick);
   296ae:	f104 0309 	add.w	r3, r4, #9
   296b2:	4c57      	ldr	r4, [pc, #348]	; (29810 <k_delayed_work_submit_to_queue+0x18c>)
   296b4:	fba4 2303 	umull	r2, r3, r4, r3
   296b8:	08db      	lsrs	r3, r3, #3
   296ba:	3301      	adds	r3, #1
	timeout->delta_ticks_from_prev = timeout_in_ticks;
   296bc:	612b      	str	r3, [r5, #16]
	timeout->thread = thread;
   296be:	2200      	movs	r2, #0
   296c0:	60aa      	str	r2, [r5, #8]
	timeout->wait_q = (sys_dlist_t *)wait_q;
   296c2:	60ea      	str	r2, [r5, #12]
	if (!timeout_in_ticks) {
   296c4:	b32b      	cbz	r3, 29712 <k_delayed_work_submit_to_queue+0x8e>
	return list->head == list;
   296c6:	4a53      	ldr	r2, [pc, #332]	; (29814 <k_delayed_work_submit_to_queue+0x190>)
   296c8:	f852 3f0c 	ldr.w	r3, [r2, #12]!
	return sys_dlist_is_empty(list) ? NULL : list->head;
   296cc:	4293      	cmp	r3, r2
   296ce:	d172      	bne.n	297b6 <k_delayed_work_submit_to_queue+0x132>
   296d0:	2300      	movs	r3, #0
   296d2:	e070      	b.n	297b6 <k_delayed_work_submit_to_queue+0x132>
		err = k_delayed_work_cancel(work);
   296d4:	4608      	mov	r0, r1
   296d6:	f7ff ff7b 	bl	295d0 <k_delayed_work_cancel>
		if (err < 0) {
   296da:	2800      	cmp	r0, #0
   296dc:	dae3      	bge.n	296a6 <k_delayed_work_submit_to_queue+0x22>
   296de:	e08e      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
	if (!atomic_test_and_set_bit(work->flags, K_WORK_STATE_PENDING)) {
   296e0:	f106 0308 	add.w	r3, r6, #8
	return __atomic_fetch_or(target, value, __ATOMIC_SEQ_CST);
   296e4:	f3bf 8f5b 	dmb	ish
   296e8:	e853 2f00 	ldrex	r2, [r3]
   296ec:	f042 0101 	orr.w	r1, r2, #1
   296f0:	e843 1000 	strex	r0, r1, [r3]
   296f4:	2800      	cmp	r0, #0
   296f6:	d1f7      	bne.n	296e8 <k_delayed_work_submit_to_queue+0x64>
   296f8:	f3bf 8f5b 	dmb	ish
   296fc:	f012 0f01 	tst.w	r2, #1
   29700:	d001      	beq.n	29706 <k_delayed_work_submit_to_queue+0x82>
	err = 0;
   29702:	2000      	movs	r0, #0
   29704:	e07b      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
		k_queue_append(&work_q->queue, work);
   29706:	4631      	mov	r1, r6
   29708:	4628      	mov	r0, r5
   2970a:	f7fe fddb 	bl	282c4 <k_queue_append>
   2970e:	2000      	movs	r0, #0
   29710:	e075      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
	struct k_thread *thread = timeout->thread;
   29712:	4610      	mov	r0, r2
   29714:	f04f 0320 	mov.w	r3, #32
   29718:	f3ef 8411 	mrs	r4, BASEPRI
   2971c:	f383 8811 	msr	BASEPRI, r3
	timeout->delta_ticks_from_prev = _INACTIVE;
   29720:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   29724:	612b      	str	r3, [r5, #16]
	if (thread) {
   29726:	b322      	cbz	r2, 29772 <k_delayed_work_submit_to_queue+0xee>
	if (timeout_obj->wait_q) {
   29728:	68eb      	ldr	r3, [r5, #12]
   2972a:	b153      	cbz	r3, 29742 <k_delayed_work_submit_to_queue+0xbe>
	node->prev->next = node->next;
   2972c:	6853      	ldr	r3, [r2, #4]
   2972e:	6812      	ldr	r2, [r2, #0]
   29730:	601a      	str	r2, [r3, #0]
	node->next->prev = node->prev;
   29732:	6803      	ldr	r3, [r0, #0]
   29734:	6842      	ldr	r2, [r0, #4]
   29736:	605a      	str	r2, [r3, #4]
	thread->base.thread_state &= ~_THREAD_PENDING;
   29738:	7a43      	ldrb	r3, [r0, #9]
   2973a:	f023 0302 	bic.w	r3, r3, #2
   2973e:	7243      	strb	r3, [r0, #9]
		thread->base.timeout.wait_q = NULL;
   29740:	61c0      	str	r0, [r0, #28]
	thread->base.thread_state &= ~_THREAD_PRESTART;
   29742:	7a43      	ldrb	r3, [r0, #9]
   29744:	f003 03fb 	and.w	r3, r3, #251	; 0xfb
   29748:	7243      	strb	r3, [r0, #9]
	return !(_is_thread_prevented_from_running(thread) ||
   2974a:	f013 0f1b 	tst.w	r3, #27
   2974e:	d107      	bne.n	29760 <k_delayed_work_submit_to_queue+0xdc>
	return thread->base.timeout.delta_ticks_from_prev != _INACTIVE;
   29750:	6a03      	ldr	r3, [r0, #32]
	return !(_is_thread_prevented_from_running(thread) ||
   29752:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
   29756:	d001      	beq.n	2975c <k_delayed_work_submit_to_queue+0xd8>
   29758:	2300      	movs	r3, #0
   2975a:	e002      	b.n	29762 <k_delayed_work_submit_to_queue+0xde>
   2975c:	2301      	movs	r3, #1
   2975e:	e000      	b.n	29762 <k_delayed_work_submit_to_queue+0xde>
   29760:	2300      	movs	r3, #0
	if (_is_thread_ready(thread)) {
   29762:	b91b      	cbnz	r3, 2976c <k_delayed_work_submit_to_queue+0xe8>
	__asm__ volatile("msr BASEPRI, %0" :  : "r"(key) : "memory");
   29764:	f384 8811 	msr	BASEPRI, r4
   29768:	2000      	movs	r0, #0
   2976a:	e048      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
		_add_thread_to_ready_q(thread);
   2976c:	f7fe fe24 	bl	283b8 <_add_thread_to_ready_q>
   29770:	e7f8      	b.n	29764 <k_delayed_work_submit_to_queue+0xe0>
   29772:	f384 8811 	msr	BASEPRI, r4
		if (timeout->func) {
   29776:	696b      	ldr	r3, [r5, #20]
   29778:	2b00      	cmp	r3, #0
   2977a:	d046      	beq.n	2980a <k_delayed_work_submit_to_queue+0x186>
			timeout->func(timeout);
   2977c:	4628      	mov	r0, r5
   2977e:	4798      	blx	r3
   29780:	2000      	movs	r0, #0
   29782:	e03c      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
			in_q->delta_ticks_from_prev -= *delta;
   29784:	1aa2      	subs	r2, r4, r2
   29786:	611a      	str	r2, [r3, #16]
	if (!insert_point) {
   29788:	b13b      	cbz	r3, 2979a <k_delayed_work_submit_to_queue+0x116>
		node->prev = insert_point->prev;
   2978a:	685a      	ldr	r2, [r3, #4]
   2978c:	606a      	str	r2, [r5, #4]
		node->next = insert_point;
   2978e:	60f3      	str	r3, [r6, #12]
		insert_point->prev->next = node;
   29790:	685a      	ldr	r2, [r3, #4]
   29792:	6015      	str	r5, [r2, #0]
		insert_point->prev = node;
   29794:	605d      	str	r5, [r3, #4]
   29796:	2000      	movs	r0, #0
   29798:	e031      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
	node->next = list;
   2979a:	4b1f      	ldr	r3, [pc, #124]	; (29818 <k_delayed_work_submit_to_queue+0x194>)
   2979c:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   2979e:	685a      	ldr	r2, [r3, #4]
   297a0:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   297a2:	685a      	ldr	r2, [r3, #4]
   297a4:	6015      	str	r5, [r2, #0]
	list->tail = node;
   297a6:	605d      	str	r5, [r3, #4]
   297a8:	2000      	movs	r0, #0
   297aa:	e028      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297ac:	4619      	mov	r1, r3
   297ae:	e011      	b.n	297d4 <k_delayed_work_submit_to_queue+0x150>
	return (node == list->tail) ? NULL : node->next;
   297b0:	2100      	movs	r1, #0
   297b2:	e00f      	b.n	297d4 <k_delayed_work_submit_to_queue+0x150>
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   297b4:	2300      	movs	r3, #0
   297b6:	b1d3      	cbz	r3, 297ee <k_delayed_work_submit_to_queue+0x16a>
		if (*delta <= in_q->delta_ticks_from_prev) {
   297b8:	692a      	ldr	r2, [r5, #16]
   297ba:	691c      	ldr	r4, [r3, #16]
   297bc:	42a2      	cmp	r2, r4
   297be:	dde1      	ble.n	29784 <k_delayed_work_submit_to_queue+0x100>
		*delta -= in_q->delta_ticks_from_prev;
   297c0:	1b12      	subs	r2, r2, r4
   297c2:	612a      	str	r2, [r5, #16]
	SYS_DLIST_FOR_EACH_CONTAINER(&_timeout_q, in_q, node) {
   297c4:	461a      	mov	r2, r3
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297c6:	2b00      	cmp	r3, #0
   297c8:	d0f0      	beq.n	297ac <k_delayed_work_submit_to_queue+0x128>
	return (node == list->tail) ? NULL : node->next;
   297ca:	4912      	ldr	r1, [pc, #72]	; (29814 <k_delayed_work_submit_to_queue+0x190>)
   297cc:	6909      	ldr	r1, [r1, #16]
   297ce:	428b      	cmp	r3, r1
   297d0:	d0ee      	beq.n	297b0 <k_delayed_work_submit_to_queue+0x12c>
   297d2:	6819      	ldr	r1, [r3, #0]
   297d4:	2900      	cmp	r1, #0
   297d6:	d0ed      	beq.n	297b4 <k_delayed_work_submit_to_queue+0x130>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297d8:	b12a      	cbz	r2, 297e6 <k_delayed_work_submit_to_queue+0x162>
	return (node == list->tail) ? NULL : node->next;
   297da:	490e      	ldr	r1, [pc, #56]	; (29814 <k_delayed_work_submit_to_queue+0x190>)
   297dc:	6909      	ldr	r1, [r1, #16]
   297de:	428a      	cmp	r2, r1
   297e0:	d003      	beq.n	297ea <k_delayed_work_submit_to_queue+0x166>
   297e2:	681b      	ldr	r3, [r3, #0]
   297e4:	e7e7      	b.n	297b6 <k_delayed_work_submit_to_queue+0x132>
	return node ? sys_dlist_peek_next_no_check(list, node) : NULL;
   297e6:	2300      	movs	r3, #0
   297e8:	e7e5      	b.n	297b6 <k_delayed_work_submit_to_queue+0x132>
	return (node == list->tail) ? NULL : node->next;
   297ea:	2300      	movs	r3, #0
   297ec:	e7e3      	b.n	297b6 <k_delayed_work_submit_to_queue+0x132>
	node->next = list;
   297ee:	4b0a      	ldr	r3, [pc, #40]	; (29818 <k_delayed_work_submit_to_queue+0x194>)
   297f0:	60f3      	str	r3, [r6, #12]
	node->prev = list->tail;
   297f2:	685a      	ldr	r2, [r3, #4]
   297f4:	606a      	str	r2, [r5, #4]
	list->tail->next = node;
   297f6:	685a      	ldr	r2, [r3, #4]
   297f8:	6015      	str	r5, [r2, #0]
	list->tail = node;
   297fa:	605d      	str	r5, [r3, #4]
   297fc:	2000      	movs	r0, #0
   297fe:	f387 8811 	msr	BASEPRI, r7
}
   29802:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
		err = -EADDRINUSE;
   29804:	f06f 006f 	mvn.w	r0, #111	; 0x6f
   29808:	e7f9      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
	err = 0;
   2980a:	2000      	movs	r0, #0
   2980c:	e7f7      	b.n	297fe <k_delayed_work_submit_to_queue+0x17a>
   2980e:	bf00      	nop
   29810:	cccccccd 	.word	0xcccccccd
   29814:	20002810 	.word	0x20002810
   29818:	2000281c 	.word	0x2000281c

0002981c <_OffsetAbsSyms>:

#ifdef CONFIG_FLOAT
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread) -
					    sizeof(struct _preempt_float));
#else
GEN_ABSOLUTE_SYM(_K_THREAD_NO_FLOAT_SIZEOF, sizeof(struct k_thread));
   2981c:	4770      	bx	lr
	...

00029820 <__locale_ctype_ptr_l>:
   29820:	f8d0 00ec 	ldr.w	r0, [r0, #236]	; 0xec
   29824:	4770      	bx	lr
   29826:	bf00      	nop

00029828 <__locale_ctype_ptr>:
   29828:	4b04      	ldr	r3, [pc, #16]	; (2983c <__locale_ctype_ptr+0x14>)
   2982a:	4a05      	ldr	r2, [pc, #20]	; (29840 <__locale_ctype_ptr+0x18>)
   2982c:	681b      	ldr	r3, [r3, #0]
   2982e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   29830:	2b00      	cmp	r3, #0
   29832:	bf08      	it	eq
   29834:	4613      	moveq	r3, r2
   29836:	f8d3 00ec 	ldr.w	r0, [r3, #236]	; 0xec
   2983a:	4770      	bx	lr
   2983c:	2000c5c0 	.word	0x2000c5c0
   29840:	2000c9f0 	.word	0x2000c9f0

00029844 <__ascii_mbtowc>:
   29844:	b082      	sub	sp, #8
   29846:	b149      	cbz	r1, 2985c <__ascii_mbtowc+0x18>
   29848:	b15a      	cbz	r2, 29862 <__ascii_mbtowc+0x1e>
   2984a:	b16b      	cbz	r3, 29868 <__ascii_mbtowc+0x24>
   2984c:	7813      	ldrb	r3, [r2, #0]
   2984e:	600b      	str	r3, [r1, #0]
   29850:	7812      	ldrb	r2, [r2, #0]
   29852:	1c10      	adds	r0, r2, #0
   29854:	bf18      	it	ne
   29856:	2001      	movne	r0, #1
   29858:	b002      	add	sp, #8
   2985a:	4770      	bx	lr
   2985c:	a901      	add	r1, sp, #4
   2985e:	2a00      	cmp	r2, #0
   29860:	d1f3      	bne.n	2984a <__ascii_mbtowc+0x6>
   29862:	4610      	mov	r0, r2
   29864:	b002      	add	sp, #8
   29866:	4770      	bx	lr
   29868:	f06f 0001 	mvn.w	r0, #1
   2986c:	e7f4      	b.n	29858 <__ascii_mbtowc+0x14>
   2986e:	bf00      	nop

00029870 <memcmp>:
   29870:	2a03      	cmp	r2, #3
   29872:	b470      	push	{r4, r5, r6}
   29874:	d922      	bls.n	298bc <memcmp+0x4c>
   29876:	ea40 0301 	orr.w	r3, r0, r1
   2987a:	079b      	lsls	r3, r3, #30
   2987c:	d011      	beq.n	298a2 <memcmp+0x32>
   2987e:	7803      	ldrb	r3, [r0, #0]
   29880:	780c      	ldrb	r4, [r1, #0]
   29882:	42a3      	cmp	r3, r4
   29884:	d11d      	bne.n	298c2 <memcmp+0x52>
   29886:	440a      	add	r2, r1
   29888:	3101      	adds	r1, #1
   2988a:	e005      	b.n	29898 <memcmp+0x28>
   2988c:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29890:	f811 4b01 	ldrb.w	r4, [r1], #1
   29894:	42a3      	cmp	r3, r4
   29896:	d114      	bne.n	298c2 <memcmp+0x52>
   29898:	4291      	cmp	r1, r2
   2989a:	d1f7      	bne.n	2988c <memcmp+0x1c>
   2989c:	2000      	movs	r0, #0
   2989e:	bc70      	pop	{r4, r5, r6}
   298a0:	4770      	bx	lr
   298a2:	680d      	ldr	r5, [r1, #0]
   298a4:	6806      	ldr	r6, [r0, #0]
   298a6:	42ae      	cmp	r6, r5
   298a8:	460c      	mov	r4, r1
   298aa:	4603      	mov	r3, r0
   298ac:	f101 0104 	add.w	r1, r1, #4
   298b0:	f100 0004 	add.w	r0, r0, #4
   298b4:	d108      	bne.n	298c8 <memcmp+0x58>
   298b6:	3a04      	subs	r2, #4
   298b8:	2a03      	cmp	r2, #3
   298ba:	d8f2      	bhi.n	298a2 <memcmp+0x32>
   298bc:	2a00      	cmp	r2, #0
   298be:	d1de      	bne.n	2987e <memcmp+0xe>
   298c0:	e7ec      	b.n	2989c <memcmp+0x2c>
   298c2:	1b18      	subs	r0, r3, r4
   298c4:	bc70      	pop	{r4, r5, r6}
   298c6:	4770      	bx	lr
   298c8:	4621      	mov	r1, r4
   298ca:	4618      	mov	r0, r3
   298cc:	e7d7      	b.n	2987e <memcmp+0xe>
   298ce:	bf00      	nop

000298d0 <memmove>:
   298d0:	4288      	cmp	r0, r1
   298d2:	b5f0      	push	{r4, r5, r6, r7, lr}
   298d4:	d90d      	bls.n	298f2 <memmove+0x22>
   298d6:	188b      	adds	r3, r1, r2
   298d8:	4298      	cmp	r0, r3
   298da:	d20a      	bcs.n	298f2 <memmove+0x22>
   298dc:	1884      	adds	r4, r0, r2
   298de:	2a00      	cmp	r2, #0
   298e0:	d051      	beq.n	29986 <memmove+0xb6>
   298e2:	4622      	mov	r2, r4
   298e4:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
   298e8:	f802 4d01 	strb.w	r4, [r2, #-1]!
   298ec:	4299      	cmp	r1, r3
   298ee:	d1f9      	bne.n	298e4 <memmove+0x14>
   298f0:	bdf0      	pop	{r4, r5, r6, r7, pc}
   298f2:	2a0f      	cmp	r2, #15
   298f4:	d948      	bls.n	29988 <memmove+0xb8>
   298f6:	ea41 0300 	orr.w	r3, r1, r0
   298fa:	079b      	lsls	r3, r3, #30
   298fc:	d146      	bne.n	2998c <memmove+0xbc>
   298fe:	f100 0410 	add.w	r4, r0, #16
   29902:	f101 0310 	add.w	r3, r1, #16
   29906:	4615      	mov	r5, r2
   29908:	f853 6c10 	ldr.w	r6, [r3, #-16]
   2990c:	f844 6c10 	str.w	r6, [r4, #-16]
   29910:	f853 6c0c 	ldr.w	r6, [r3, #-12]
   29914:	f844 6c0c 	str.w	r6, [r4, #-12]
   29918:	f853 6c08 	ldr.w	r6, [r3, #-8]
   2991c:	f844 6c08 	str.w	r6, [r4, #-8]
   29920:	3d10      	subs	r5, #16
   29922:	f853 6c04 	ldr.w	r6, [r3, #-4]
   29926:	f844 6c04 	str.w	r6, [r4, #-4]
   2992a:	2d0f      	cmp	r5, #15
   2992c:	f103 0310 	add.w	r3, r3, #16
   29930:	f104 0410 	add.w	r4, r4, #16
   29934:	d8e8      	bhi.n	29908 <memmove+0x38>
   29936:	f1a2 0310 	sub.w	r3, r2, #16
   2993a:	f023 030f 	bic.w	r3, r3, #15
   2993e:	f002 0e0f 	and.w	lr, r2, #15
   29942:	3310      	adds	r3, #16
   29944:	f1be 0f03 	cmp.w	lr, #3
   29948:	4419      	add	r1, r3
   2994a:	4403      	add	r3, r0
   2994c:	d921      	bls.n	29992 <memmove+0xc2>
   2994e:	1f1e      	subs	r6, r3, #4
   29950:	460d      	mov	r5, r1
   29952:	4674      	mov	r4, lr
   29954:	3c04      	subs	r4, #4
   29956:	f855 7b04 	ldr.w	r7, [r5], #4
   2995a:	f846 7f04 	str.w	r7, [r6, #4]!
   2995e:	2c03      	cmp	r4, #3
   29960:	d8f8      	bhi.n	29954 <memmove+0x84>
   29962:	f1ae 0404 	sub.w	r4, lr, #4
   29966:	f024 0403 	bic.w	r4, r4, #3
   2996a:	3404      	adds	r4, #4
   2996c:	4421      	add	r1, r4
   2996e:	4423      	add	r3, r4
   29970:	f002 0203 	and.w	r2, r2, #3
   29974:	b162      	cbz	r2, 29990 <memmove+0xc0>
   29976:	3b01      	subs	r3, #1
   29978:	440a      	add	r2, r1
   2997a:	f811 4b01 	ldrb.w	r4, [r1], #1
   2997e:	f803 4f01 	strb.w	r4, [r3, #1]!
   29982:	428a      	cmp	r2, r1
   29984:	d1f9      	bne.n	2997a <memmove+0xaa>
   29986:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29988:	4603      	mov	r3, r0
   2998a:	e7f3      	b.n	29974 <memmove+0xa4>
   2998c:	4603      	mov	r3, r0
   2998e:	e7f2      	b.n	29976 <memmove+0xa6>
   29990:	bdf0      	pop	{r4, r5, r6, r7, pc}
   29992:	4672      	mov	r2, lr
   29994:	e7ee      	b.n	29974 <memmove+0xa4>
   29996:	bf00      	nop

00029998 <memset>:
   29998:	b470      	push	{r4, r5, r6}
   2999a:	0786      	lsls	r6, r0, #30
   2999c:	d046      	beq.n	29a2c <memset+0x94>
   2999e:	1e54      	subs	r4, r2, #1
   299a0:	2a00      	cmp	r2, #0
   299a2:	d041      	beq.n	29a28 <memset+0x90>
   299a4:	b2ca      	uxtb	r2, r1
   299a6:	4603      	mov	r3, r0
   299a8:	e002      	b.n	299b0 <memset+0x18>
   299aa:	f114 34ff 	adds.w	r4, r4, #4294967295	; 0xffffffff
   299ae:	d33b      	bcc.n	29a28 <memset+0x90>
   299b0:	f803 2b01 	strb.w	r2, [r3], #1
   299b4:	079d      	lsls	r5, r3, #30
   299b6:	d1f8      	bne.n	299aa <memset+0x12>
   299b8:	2c03      	cmp	r4, #3
   299ba:	d92e      	bls.n	29a1a <memset+0x82>
   299bc:	b2cd      	uxtb	r5, r1
   299be:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   299c2:	2c0f      	cmp	r4, #15
   299c4:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   299c8:	d919      	bls.n	299fe <memset+0x66>
   299ca:	f103 0210 	add.w	r2, r3, #16
   299ce:	4626      	mov	r6, r4
   299d0:	3e10      	subs	r6, #16
   299d2:	2e0f      	cmp	r6, #15
   299d4:	f842 5c10 	str.w	r5, [r2, #-16]
   299d8:	f842 5c0c 	str.w	r5, [r2, #-12]
   299dc:	f842 5c08 	str.w	r5, [r2, #-8]
   299e0:	f842 5c04 	str.w	r5, [r2, #-4]
   299e4:	f102 0210 	add.w	r2, r2, #16
   299e8:	d8f2      	bhi.n	299d0 <memset+0x38>
   299ea:	f1a4 0210 	sub.w	r2, r4, #16
   299ee:	f022 020f 	bic.w	r2, r2, #15
   299f2:	f004 040f 	and.w	r4, r4, #15
   299f6:	3210      	adds	r2, #16
   299f8:	2c03      	cmp	r4, #3
   299fa:	4413      	add	r3, r2
   299fc:	d90d      	bls.n	29a1a <memset+0x82>
   299fe:	461e      	mov	r6, r3
   29a00:	4622      	mov	r2, r4
   29a02:	3a04      	subs	r2, #4
   29a04:	2a03      	cmp	r2, #3
   29a06:	f846 5b04 	str.w	r5, [r6], #4
   29a0a:	d8fa      	bhi.n	29a02 <memset+0x6a>
   29a0c:	1f22      	subs	r2, r4, #4
   29a0e:	f022 0203 	bic.w	r2, r2, #3
   29a12:	3204      	adds	r2, #4
   29a14:	4413      	add	r3, r2
   29a16:	f004 0403 	and.w	r4, r4, #3
   29a1a:	b12c      	cbz	r4, 29a28 <memset+0x90>
   29a1c:	b2c9      	uxtb	r1, r1
   29a1e:	441c      	add	r4, r3
   29a20:	f803 1b01 	strb.w	r1, [r3], #1
   29a24:	429c      	cmp	r4, r3
   29a26:	d1fb      	bne.n	29a20 <memset+0x88>
   29a28:	bc70      	pop	{r4, r5, r6}
   29a2a:	4770      	bx	lr
   29a2c:	4614      	mov	r4, r2
   29a2e:	4603      	mov	r3, r0
   29a30:	e7c2      	b.n	299b8 <memset+0x20>
   29a32:	bf00      	nop

00029a34 <rand>:
   29a34:	b410      	push	{r4}
   29a36:	4b0c      	ldr	r3, [pc, #48]	; (29a68 <rand+0x34>)
   29a38:	480c      	ldr	r0, [pc, #48]	; (29a6c <rand+0x38>)
   29a3a:	6819      	ldr	r1, [r3, #0]
   29a3c:	4c0c      	ldr	r4, [pc, #48]	; (29a70 <rand+0x3c>)
   29a3e:	f8d1 20a8 	ldr.w	r2, [r1, #168]	; 0xa8
   29a42:	f8d1 30ac 	ldr.w	r3, [r1, #172]	; 0xac
   29a46:	fb00 f002 	mul.w	r0, r0, r2
   29a4a:	fb04 0003 	mla	r0, r4, r3, r0
   29a4e:	fba2 2304 	umull	r2, r3, r2, r4
   29a52:	4403      	add	r3, r0
   29a54:	3201      	adds	r2, #1
   29a56:	f143 0300 	adc.w	r3, r3, #0
   29a5a:	e9c1 232a 	strd	r2, r3, [r1, #168]	; 0xa8
   29a5e:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   29a62:	bc10      	pop	{r4}
   29a64:	4770      	bx	lr
   29a66:	bf00      	nop
   29a68:	2000c5c0 	.word	0x2000c5c0
   29a6c:	5851f42d 	.word	0x5851f42d
   29a70:	4c957f2d 	.word	0x4c957f2d

00029a74 <strcat>:
   29a74:	0783      	lsls	r3, r0, #30
   29a76:	b510      	push	{r4, lr}
   29a78:	4604      	mov	r4, r0
   29a7a:	d110      	bne.n	29a9e <strcat+0x2a>
   29a7c:	6802      	ldr	r2, [r0, #0]
   29a7e:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   29a82:	ea23 0302 	bic.w	r3, r3, r2
   29a86:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   29a8a:	d108      	bne.n	29a9e <strcat+0x2a>
   29a8c:	f850 2f04 	ldr.w	r2, [r0, #4]!
   29a90:	f1a2 3301 	sub.w	r3, r2, #16843009	; 0x1010101
   29a94:	ea23 0302 	bic.w	r3, r3, r2
   29a98:	f013 3f80 	tst.w	r3, #2155905152	; 0x80808080
   29a9c:	d0f6      	beq.n	29a8c <strcat+0x18>
   29a9e:	7803      	ldrb	r3, [r0, #0]
   29aa0:	b11b      	cbz	r3, 29aaa <strcat+0x36>
   29aa2:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29aa6:	2b00      	cmp	r3, #0
   29aa8:	d1fb      	bne.n	29aa2 <strcat+0x2e>
   29aaa:	f000 f877 	bl	29b9c <strcpy>
   29aae:	4620      	mov	r0, r4
   29ab0:	bd10      	pop	{r4, pc}
   29ab2:	bf00      	nop

00029ab4 <strchr>:
   29ab4:	b2c9      	uxtb	r1, r1
   29ab6:	2900      	cmp	r1, #0
   29ab8:	d041      	beq.n	29b3e <strchr+0x8a>
   29aba:	0782      	lsls	r2, r0, #30
   29abc:	b4f0      	push	{r4, r5, r6, r7}
   29abe:	d067      	beq.n	29b90 <strchr+0xdc>
   29ac0:	7803      	ldrb	r3, [r0, #0]
   29ac2:	2b00      	cmp	r3, #0
   29ac4:	d068      	beq.n	29b98 <strchr+0xe4>
   29ac6:	4299      	cmp	r1, r3
   29ac8:	d037      	beq.n	29b3a <strchr+0x86>
   29aca:	1c43      	adds	r3, r0, #1
   29acc:	e004      	b.n	29ad8 <strchr+0x24>
   29ace:	f813 0b01 	ldrb.w	r0, [r3], #1
   29ad2:	b390      	cbz	r0, 29b3a <strchr+0x86>
   29ad4:	4281      	cmp	r1, r0
   29ad6:	d02f      	beq.n	29b38 <strchr+0x84>
   29ad8:	079a      	lsls	r2, r3, #30
   29ada:	461c      	mov	r4, r3
   29adc:	d1f7      	bne.n	29ace <strchr+0x1a>
   29ade:	6825      	ldr	r5, [r4, #0]
   29ae0:	ea41 2301 	orr.w	r3, r1, r1, lsl #8
   29ae4:	ea43 4303 	orr.w	r3, r3, r3, lsl #16
   29ae8:	ea83 0605 	eor.w	r6, r3, r5
   29aec:	f1a6 3001 	sub.w	r0, r6, #16843009	; 0x1010101
   29af0:	f1a5 3201 	sub.w	r2, r5, #16843009	; 0x1010101
   29af4:	ea20 0006 	bic.w	r0, r0, r6
   29af8:	ea22 0205 	bic.w	r2, r2, r5
   29afc:	4302      	orrs	r2, r0
   29afe:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29b02:	d111      	bne.n	29b28 <strchr+0x74>
   29b04:	4620      	mov	r0, r4
   29b06:	f850 6f04 	ldr.w	r6, [r0, #4]!
   29b0a:	ea83 0706 	eor.w	r7, r3, r6
   29b0e:	f1a7 3501 	sub.w	r5, r7, #16843009	; 0x1010101
   29b12:	f1a6 3201 	sub.w	r2, r6, #16843009	; 0x1010101
   29b16:	ea25 0507 	bic.w	r5, r5, r7
   29b1a:	ea22 0206 	bic.w	r2, r2, r6
   29b1e:	432a      	orrs	r2, r5
   29b20:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29b24:	d0ef      	beq.n	29b06 <strchr+0x52>
   29b26:	4604      	mov	r4, r0
   29b28:	7820      	ldrb	r0, [r4, #0]
   29b2a:	b918      	cbnz	r0, 29b34 <strchr+0x80>
   29b2c:	e005      	b.n	29b3a <strchr+0x86>
   29b2e:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   29b32:	b110      	cbz	r0, 29b3a <strchr+0x86>
   29b34:	4281      	cmp	r1, r0
   29b36:	d1fa      	bne.n	29b2e <strchr+0x7a>
   29b38:	4620      	mov	r0, r4
   29b3a:	bcf0      	pop	{r4, r5, r6, r7}
   29b3c:	4770      	bx	lr
   29b3e:	0783      	lsls	r3, r0, #30
   29b40:	d024      	beq.n	29b8c <strchr+0xd8>
   29b42:	7803      	ldrb	r3, [r0, #0]
   29b44:	2b00      	cmp	r3, #0
   29b46:	d0f9      	beq.n	29b3c <strchr+0x88>
   29b48:	1c43      	adds	r3, r0, #1
   29b4a:	e003      	b.n	29b54 <strchr+0xa0>
   29b4c:	7802      	ldrb	r2, [r0, #0]
   29b4e:	3301      	adds	r3, #1
   29b50:	2a00      	cmp	r2, #0
   29b52:	d0f3      	beq.n	29b3c <strchr+0x88>
   29b54:	0799      	lsls	r1, r3, #30
   29b56:	4618      	mov	r0, r3
   29b58:	d1f8      	bne.n	29b4c <strchr+0x98>
   29b5a:	6819      	ldr	r1, [r3, #0]
   29b5c:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   29b60:	ea22 0201 	bic.w	r2, r2, r1
   29b64:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29b68:	d108      	bne.n	29b7c <strchr+0xc8>
   29b6a:	f853 1f04 	ldr.w	r1, [r3, #4]!
   29b6e:	f1a1 3201 	sub.w	r2, r1, #16843009	; 0x1010101
   29b72:	ea22 0201 	bic.w	r2, r2, r1
   29b76:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29b7a:	d0f6      	beq.n	29b6a <strchr+0xb6>
   29b7c:	781a      	ldrb	r2, [r3, #0]
   29b7e:	4618      	mov	r0, r3
   29b80:	b142      	cbz	r2, 29b94 <strchr+0xe0>
   29b82:	f810 3f01 	ldrb.w	r3, [r0, #1]!
   29b86:	2b00      	cmp	r3, #0
   29b88:	d1fb      	bne.n	29b82 <strchr+0xce>
   29b8a:	4770      	bx	lr
   29b8c:	4603      	mov	r3, r0
   29b8e:	e7e4      	b.n	29b5a <strchr+0xa6>
   29b90:	4604      	mov	r4, r0
   29b92:	e7a4      	b.n	29ade <strchr+0x2a>
   29b94:	4618      	mov	r0, r3
   29b96:	4770      	bx	lr
   29b98:	4618      	mov	r0, r3
   29b9a:	e7ce      	b.n	29b3a <strchr+0x86>

00029b9c <strcpy>:
   29b9c:	ea80 0201 	eor.w	r2, r0, r1
   29ba0:	4684      	mov	ip, r0
   29ba2:	f012 0f03 	tst.w	r2, #3
   29ba6:	d14f      	bne.n	29c48 <strcpy+0xac>
   29ba8:	f011 0f03 	tst.w	r1, #3
   29bac:	d132      	bne.n	29c14 <strcpy+0x78>
   29bae:	f84d 4d04 	str.w	r4, [sp, #-4]!
   29bb2:	f011 0f04 	tst.w	r1, #4
   29bb6:	f851 3b04 	ldr.w	r3, [r1], #4
   29bba:	d00b      	beq.n	29bd4 <strcpy+0x38>
   29bbc:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   29bc0:	439a      	bics	r2, r3
   29bc2:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29bc6:	bf04      	itt	eq
   29bc8:	f84c 3b04 	streq.w	r3, [ip], #4
   29bcc:	f851 3b04 	ldreq.w	r3, [r1], #4
   29bd0:	d116      	bne.n	29c00 <strcpy+0x64>
   29bd2:	bf00      	nop
   29bd4:	f851 4b04 	ldr.w	r4, [r1], #4
   29bd8:	f1a3 3201 	sub.w	r2, r3, #16843009	; 0x1010101
   29bdc:	439a      	bics	r2, r3
   29bde:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29be2:	f1a4 3201 	sub.w	r2, r4, #16843009	; 0x1010101
   29be6:	d10b      	bne.n	29c00 <strcpy+0x64>
   29be8:	f84c 3b04 	str.w	r3, [ip], #4
   29bec:	43a2      	bics	r2, r4
   29bee:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   29bf2:	bf04      	itt	eq
   29bf4:	f851 3b04 	ldreq.w	r3, [r1], #4
   29bf8:	f84c 4b04 	streq.w	r4, [ip], #4
   29bfc:	d0ea      	beq.n	29bd4 <strcpy+0x38>
   29bfe:	4623      	mov	r3, r4
   29c00:	f80c 3b01 	strb.w	r3, [ip], #1
   29c04:	f013 0fff 	tst.w	r3, #255	; 0xff
   29c08:	ea4f 2333 	mov.w	r3, r3, ror #8
   29c0c:	d1f8      	bne.n	29c00 <strcpy+0x64>
   29c0e:	f85d 4b04 	ldr.w	r4, [sp], #4
   29c12:	4770      	bx	lr
   29c14:	f011 0f01 	tst.w	r1, #1
   29c18:	d006      	beq.n	29c28 <strcpy+0x8c>
   29c1a:	f811 2b01 	ldrb.w	r2, [r1], #1
   29c1e:	f80c 2b01 	strb.w	r2, [ip], #1
   29c22:	2a00      	cmp	r2, #0
   29c24:	bf08      	it	eq
   29c26:	4770      	bxeq	lr
   29c28:	f011 0f02 	tst.w	r1, #2
   29c2c:	d0bf      	beq.n	29bae <strcpy+0x12>
   29c2e:	f831 2b02 	ldrh.w	r2, [r1], #2
   29c32:	f012 0fff 	tst.w	r2, #255	; 0xff
   29c36:	bf16      	itet	ne
   29c38:	f82c 2b02 	strhne.w	r2, [ip], #2
   29c3c:	f88c 2000 	strbeq.w	r2, [ip]
   29c40:	f412 4f7f 	tstne.w	r2, #65280	; 0xff00
   29c44:	d1b3      	bne.n	29bae <strcpy+0x12>
   29c46:	4770      	bx	lr
   29c48:	f811 2b01 	ldrb.w	r2, [r1], #1
   29c4c:	f80c 2b01 	strb.w	r2, [ip], #1
   29c50:	2a00      	cmp	r2, #0
   29c52:	d1f9      	bne.n	29c48 <strcpy+0xac>
   29c54:	4770      	bx	lr
   29c56:	bf00      	nop

00029c58 <strncmp>:
   29c58:	2a00      	cmp	r2, #0
   29c5a:	d041      	beq.n	29ce0 <strncmp+0x88>
   29c5c:	ea40 0301 	orr.w	r3, r0, r1
   29c60:	f013 0303 	ands.w	r3, r3, #3
   29c64:	b4f0      	push	{r4, r5, r6, r7}
   29c66:	d125      	bne.n	29cb4 <strncmp+0x5c>
   29c68:	2a03      	cmp	r2, #3
   29c6a:	d923      	bls.n	29cb4 <strncmp+0x5c>
   29c6c:	6804      	ldr	r4, [r0, #0]
   29c6e:	680d      	ldr	r5, [r1, #0]
   29c70:	42ac      	cmp	r4, r5
   29c72:	d11f      	bne.n	29cb4 <strncmp+0x5c>
   29c74:	3a04      	subs	r2, #4
   29c76:	d038      	beq.n	29cea <strncmp+0x92>
   29c78:	f1a4 3501 	sub.w	r5, r4, #16843009	; 0x1010101
   29c7c:	ea25 0404 	bic.w	r4, r5, r4
   29c80:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29c84:	d12e      	bne.n	29ce4 <strncmp+0x8c>
   29c86:	3004      	adds	r0, #4
   29c88:	3104      	adds	r1, #4
   29c8a:	e00f      	b.n	29cac <strncmp+0x54>
   29c8c:	f850 3b04 	ldr.w	r3, [r0], #4
   29c90:	680e      	ldr	r6, [r1, #0]
   29c92:	f1a3 3401 	sub.w	r4, r3, #16843009	; 0x1010101
   29c96:	42b3      	cmp	r3, r6
   29c98:	ea24 0403 	bic.w	r4, r4, r3
   29c9c:	f101 0104 	add.w	r1, r1, #4
   29ca0:	d126      	bne.n	29cf0 <strncmp+0x98>
   29ca2:	3a04      	subs	r2, #4
   29ca4:	d021      	beq.n	29cea <strncmp+0x92>
   29ca6:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29caa:	d11b      	bne.n	29ce4 <strncmp+0x8c>
   29cac:	2a03      	cmp	r2, #3
   29cae:	4607      	mov	r7, r0
   29cb0:	460d      	mov	r5, r1
   29cb2:	d8eb      	bhi.n	29c8c <strncmp+0x34>
   29cb4:	7805      	ldrb	r5, [r0, #0]
   29cb6:	780c      	ldrb	r4, [r1, #0]
   29cb8:	42ac      	cmp	r4, r5
   29cba:	f102 33ff 	add.w	r3, r2, #4294967295	; 0xffffffff
   29cbe:	d11a      	bne.n	29cf6 <strncmp+0x9e>
   29cc0:	b183      	cbz	r3, 29ce4 <strncmp+0x8c>
   29cc2:	b914      	cbnz	r4, 29cca <strncmp+0x72>
   29cc4:	e00e      	b.n	29ce4 <strncmp+0x8c>
   29cc6:	b16b      	cbz	r3, 29ce4 <strncmp+0x8c>
   29cc8:	b17a      	cbz	r2, 29cea <strncmp+0x92>
   29cca:	f810 2f01 	ldrb.w	r2, [r0, #1]!
   29cce:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   29cd2:	42a2      	cmp	r2, r4
   29cd4:	f103 33ff 	add.w	r3, r3, #4294967295	; 0xffffffff
   29cd8:	d0f5      	beq.n	29cc6 <strncmp+0x6e>
   29cda:	1b10      	subs	r0, r2, r4
   29cdc:	bcf0      	pop	{r4, r5, r6, r7}
   29cde:	4770      	bx	lr
   29ce0:	4610      	mov	r0, r2
   29ce2:	4770      	bx	lr
   29ce4:	2000      	movs	r0, #0
   29ce6:	bcf0      	pop	{r4, r5, r6, r7}
   29ce8:	4770      	bx	lr
   29cea:	4610      	mov	r0, r2
   29cec:	bcf0      	pop	{r4, r5, r6, r7}
   29cee:	4770      	bx	lr
   29cf0:	4629      	mov	r1, r5
   29cf2:	4638      	mov	r0, r7
   29cf4:	e7de      	b.n	29cb4 <strncmp+0x5c>
   29cf6:	462a      	mov	r2, r5
   29cf8:	e7ef      	b.n	29cda <strncmp+0x82>
   29cfa:	bf00      	nop

00029cfc <strncpy>:
   29cfc:	ea40 0301 	orr.w	r3, r0, r1
   29d00:	f013 0f03 	tst.w	r3, #3
   29d04:	b470      	push	{r4, r5, r6}
   29d06:	4603      	mov	r3, r0
   29d08:	d024      	beq.n	29d54 <strncpy+0x58>
   29d0a:	b1a2      	cbz	r2, 29d36 <strncpy+0x3a>
   29d0c:	780c      	ldrb	r4, [r1, #0]
   29d0e:	701c      	strb	r4, [r3, #0]
   29d10:	3a01      	subs	r2, #1
   29d12:	3301      	adds	r3, #1
   29d14:	3101      	adds	r1, #1
   29d16:	b13c      	cbz	r4, 29d28 <strncpy+0x2c>
   29d18:	b16a      	cbz	r2, 29d36 <strncpy+0x3a>
   29d1a:	f811 4b01 	ldrb.w	r4, [r1], #1
   29d1e:	f803 4b01 	strb.w	r4, [r3], #1
   29d22:	3a01      	subs	r2, #1
   29d24:	2c00      	cmp	r4, #0
   29d26:	d1f7      	bne.n	29d18 <strncpy+0x1c>
   29d28:	b12a      	cbz	r2, 29d36 <strncpy+0x3a>
   29d2a:	441a      	add	r2, r3
   29d2c:	2100      	movs	r1, #0
   29d2e:	f803 1b01 	strb.w	r1, [r3], #1
   29d32:	429a      	cmp	r2, r3
   29d34:	d1fb      	bne.n	29d2e <strncpy+0x32>
   29d36:	bc70      	pop	{r4, r5, r6}
   29d38:	4770      	bx	lr
   29d3a:	460e      	mov	r6, r1
   29d3c:	f851 5b04 	ldr.w	r5, [r1], #4
   29d40:	f1a5 3401 	sub.w	r4, r5, #16843009	; 0x1010101
   29d44:	ea24 0405 	bic.w	r4, r4, r5
   29d48:	f014 3f80 	tst.w	r4, #2155905152	; 0x80808080
   29d4c:	d105      	bne.n	29d5a <strncpy+0x5e>
   29d4e:	f843 5b04 	str.w	r5, [r3], #4
   29d52:	3a04      	subs	r2, #4
   29d54:	2a03      	cmp	r2, #3
   29d56:	d8f0      	bhi.n	29d3a <strncpy+0x3e>
   29d58:	e7d7      	b.n	29d0a <strncpy+0xe>
   29d5a:	4631      	mov	r1, r6
   29d5c:	e7d6      	b.n	29d0c <strncpy+0x10>
   29d5e:	bf00      	nop

00029d60 <strrchr>:
   29d60:	b171      	cbz	r1, 29d80 <strrchr+0x20>
   29d62:	b538      	push	{r3, r4, r5, lr}
   29d64:	4603      	mov	r3, r0
   29d66:	460c      	mov	r4, r1
   29d68:	2500      	movs	r5, #0
   29d6a:	e001      	b.n	29d70 <strrchr+0x10>
   29d6c:	1c43      	adds	r3, r0, #1
   29d6e:	4605      	mov	r5, r0
   29d70:	4618      	mov	r0, r3
   29d72:	4621      	mov	r1, r4
   29d74:	f7ff fe9e 	bl	29ab4 <strchr>
   29d78:	2800      	cmp	r0, #0
   29d7a:	d1f7      	bne.n	29d6c <strrchr+0xc>
   29d7c:	4628      	mov	r0, r5
   29d7e:	bd38      	pop	{r3, r4, r5, pc}
   29d80:	f7ff be98 	b.w	29ab4 <strchr>

00029d84 <critical_factorization>:
   29d84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   29d88:	f04f 0e01 	mov.w	lr, #1
   29d8c:	4674      	mov	r4, lr
   29d8e:	2500      	movs	r5, #0
   29d90:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
   29d94:	192b      	adds	r3, r5, r4
   29d96:	428b      	cmp	r3, r1
   29d98:	eb00 0706 	add.w	r7, r0, r6
   29d9c:	d20d      	bcs.n	29dba <critical_factorization+0x36>
   29d9e:	5d3f      	ldrb	r7, [r7, r4]
   29da0:	f810 c003 	ldrb.w	ip, [r0, r3]
   29da4:	45bc      	cmp	ip, r7
   29da6:	d22d      	bcs.n	29e04 <critical_factorization+0x80>
   29da8:	461d      	mov	r5, r3
   29daa:	2401      	movs	r4, #1
   29dac:	eba3 0e06 	sub.w	lr, r3, r6
   29db0:	192b      	adds	r3, r5, r4
   29db2:	428b      	cmp	r3, r1
   29db4:	eb00 0706 	add.w	r7, r0, r6
   29db8:	d3f1      	bcc.n	29d9e <critical_factorization+0x1a>
   29dba:	f04f 0801 	mov.w	r8, #1
   29dbe:	f8c2 e000 	str.w	lr, [r2]
   29dc2:	4644      	mov	r4, r8
   29dc4:	2500      	movs	r5, #0
   29dc6:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
   29dca:	192b      	adds	r3, r5, r4
   29dcc:	4299      	cmp	r1, r3
   29dce:	eb00 0e07 	add.w	lr, r0, r7
   29dd2:	d90e      	bls.n	29df2 <critical_factorization+0x6e>
   29dd4:	f81e e004 	ldrb.w	lr, [lr, r4]
   29dd8:	f810 c003 	ldrb.w	ip, [r0, r3]
   29ddc:	45f4      	cmp	ip, lr
   29dde:	d918      	bls.n	29e12 <critical_factorization+0x8e>
   29de0:	461d      	mov	r5, r3
   29de2:	2401      	movs	r4, #1
   29de4:	eba3 0807 	sub.w	r8, r3, r7
   29de8:	192b      	adds	r3, r5, r4
   29dea:	4299      	cmp	r1, r3
   29dec:	eb00 0e07 	add.w	lr, r0, r7
   29df0:	d8f0      	bhi.n	29dd4 <critical_factorization+0x50>
   29df2:	3701      	adds	r7, #1
   29df4:	1c70      	adds	r0, r6, #1
   29df6:	4287      	cmp	r7, r0
   29df8:	bf24      	itt	cs
   29dfa:	f8c2 8000 	strcs.w	r8, [r2]
   29dfe:	4638      	movcs	r0, r7
   29e00:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   29e04:	d00c      	beq.n	29e20 <critical_factorization+0x9c>
   29e06:	f04f 0e01 	mov.w	lr, #1
   29e0a:	462e      	mov	r6, r5
   29e0c:	4674      	mov	r4, lr
   29e0e:	4475      	add	r5, lr
   29e10:	e7c0      	b.n	29d94 <critical_factorization+0x10>
   29e12:	d00b      	beq.n	29e2c <critical_factorization+0xa8>
   29e14:	f04f 0801 	mov.w	r8, #1
   29e18:	462f      	mov	r7, r5
   29e1a:	4644      	mov	r4, r8
   29e1c:	4445      	add	r5, r8
   29e1e:	e7d4      	b.n	29dca <critical_factorization+0x46>
   29e20:	4574      	cmp	r4, lr
   29e22:	bf12      	itee	ne
   29e24:	3401      	addne	r4, #1
   29e26:	461d      	moveq	r5, r3
   29e28:	2401      	moveq	r4, #1
   29e2a:	e7b3      	b.n	29d94 <critical_factorization+0x10>
   29e2c:	4544      	cmp	r4, r8
   29e2e:	bf12      	itee	ne
   29e30:	3401      	addne	r4, #1
   29e32:	461d      	moveq	r5, r3
   29e34:	2401      	moveq	r4, #1
   29e36:	e7c8      	b.n	29dca <critical_factorization+0x46>

00029e38 <two_way_long_needle>:
   29e38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   29e3c:	f2ad 4d14 	subw	sp, sp, #1044	; 0x414
   29e40:	4616      	mov	r6, r2
   29e42:	4605      	mov	r5, r0
   29e44:	468b      	mov	fp, r1
   29e46:	4610      	mov	r0, r2
   29e48:	4619      	mov	r1, r3
   29e4a:	aa03      	add	r2, sp, #12
   29e4c:	461c      	mov	r4, r3
   29e4e:	f7ff ff99 	bl	29d84 <critical_factorization>
   29e52:	ab03      	add	r3, sp, #12
   29e54:	4681      	mov	r9, r0
   29e56:	f20d 420c 	addw	r2, sp, #1036	; 0x40c
   29e5a:	f843 4f04 	str.w	r4, [r3, #4]!
   29e5e:	4293      	cmp	r3, r2
   29e60:	d1fb      	bne.n	29e5a <two_way_long_needle+0x22>
   29e62:	b14c      	cbz	r4, 29e78 <two_way_long_needle+0x40>
   29e64:	1e63      	subs	r3, r4, #1
   29e66:	1e72      	subs	r2, r6, #1
   29e68:	a804      	add	r0, sp, #16
   29e6a:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   29e6e:	f840 3021 	str.w	r3, [r0, r1, lsl #2]
   29e72:	f113 33ff 	adds.w	r3, r3, #4294967295	; 0xffffffff
   29e76:	d2f8      	bcs.n	29e6a <two_way_long_needle+0x32>
   29e78:	9903      	ldr	r1, [sp, #12]
   29e7a:	464a      	mov	r2, r9
   29e7c:	4431      	add	r1, r6
   29e7e:	4630      	mov	r0, r6
   29e80:	f7ff fcf6 	bl	29870 <memcmp>
   29e84:	2800      	cmp	r0, #0
   29e86:	d16f      	bne.n	29f68 <two_way_long_needle+0x130>
   29e88:	f109 33ff 	add.w	r3, r9, #4294967295	; 0xffffffff
   29e8c:	9300      	str	r3, [sp, #0]
   29e8e:	18f3      	adds	r3, r6, r3
   29e90:	4682      	mov	sl, r0
   29e92:	9301      	str	r3, [sp, #4]
   29e94:	4623      	mov	r3, r4
   29e96:	4680      	mov	r8, r0
   29e98:	4654      	mov	r4, sl
   29e9a:	4658      	mov	r0, fp
   29e9c:	469a      	mov	sl, r3
   29e9e:	eb08 070a 	add.w	r7, r8, sl
   29ea2:	1a3a      	subs	r2, r7, r0
   29ea4:	2100      	movs	r1, #0
   29ea6:	4428      	add	r0, r5
   29ea8:	f7d6 f9ba 	bl	220 <memchr>
   29eac:	2800      	cmp	r0, #0
   29eae:	d156      	bne.n	29f5e <two_way_long_needle+0x126>
   29eb0:	2f00      	cmp	r7, #0
   29eb2:	d054      	beq.n	29f5e <two_way_long_needle+0x126>
   29eb4:	19eb      	adds	r3, r5, r7
   29eb6:	aa04      	add	r2, sp, #16
   29eb8:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   29ebc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29ec0:	b14b      	cbz	r3, 29ed6 <two_way_long_needle+0x9e>
   29ec2:	b124      	cbz	r4, 29ece <two_way_long_needle+0x96>
   29ec4:	9a03      	ldr	r2, [sp, #12]
   29ec6:	4293      	cmp	r3, r2
   29ec8:	d201      	bcs.n	29ece <two_way_long_needle+0x96>
   29eca:	ebaa 0302 	sub.w	r3, sl, r2
   29ece:	4498      	add	r8, r3
   29ed0:	2400      	movs	r4, #0
   29ed2:	4638      	mov	r0, r7
   29ed4:	e7e3      	b.n	29e9e <two_way_long_needle+0x66>
   29ed6:	454c      	cmp	r4, r9
   29ed8:	4623      	mov	r3, r4
   29eda:	f10a 3eff 	add.w	lr, sl, #4294967295	; 0xffffffff
   29ede:	bf38      	it	cc
   29ee0:	464b      	movcc	r3, r9
   29ee2:	4573      	cmp	r3, lr
   29ee4:	d213      	bcs.n	29f0e <two_way_long_needle+0xd6>
   29ee6:	eb08 0203 	add.w	r2, r8, r3
   29eea:	f816 c003 	ldrb.w	ip, [r6, r3]
   29eee:	5ca8      	ldrb	r0, [r5, r2]
   29ef0:	4584      	cmp	ip, r0
   29ef2:	442a      	add	r2, r5
   29ef4:	eb06 0103 	add.w	r1, r6, r3
   29ef8:	d006      	beq.n	29f08 <two_way_long_needle+0xd0>
   29efa:	e02c      	b.n	29f56 <two_way_long_needle+0x11e>
   29efc:	f811 cf01 	ldrb.w	ip, [r1, #1]!
   29f00:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   29f04:	4584      	cmp	ip, r0
   29f06:	d126      	bne.n	29f56 <two_way_long_needle+0x11e>
   29f08:	3301      	adds	r3, #1
   29f0a:	4573      	cmp	r3, lr
   29f0c:	d3f6      	bcc.n	29efc <two_way_long_needle+0xc4>
   29f0e:	454c      	cmp	r4, r9
   29f10:	9900      	ldr	r1, [sp, #0]
   29f12:	f080 8089 	bcs.w	2a028 <two_way_long_needle+0x1f0>
   29f16:	9b00      	ldr	r3, [sp, #0]
   29f18:	eb08 0203 	add.w	r2, r8, r3
   29f1c:	9b01      	ldr	r3, [sp, #4]
   29f1e:	5ca8      	ldrb	r0, [r5, r2]
   29f20:	781b      	ldrb	r3, [r3, #0]
   29f22:	4298      	cmp	r0, r3
   29f24:	442a      	add	r2, r5
   29f26:	d17f      	bne.n	2a028 <two_way_long_needle+0x1f0>
   29f28:	9801      	ldr	r0, [sp, #4]
   29f2a:	f104 3bff 	add.w	fp, r4, #4294967295	; 0xffffffff
   29f2e:	e006      	b.n	29f3e <two_way_long_needle+0x106>
   29f30:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   29f34:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   29f38:	45f4      	cmp	ip, lr
   29f3a:	d103      	bne.n	29f44 <two_way_long_needle+0x10c>
   29f3c:	4619      	mov	r1, r3
   29f3e:	1e4b      	subs	r3, r1, #1
   29f40:	459b      	cmp	fp, r3
   29f42:	d1f5      	bne.n	29f30 <two_way_long_needle+0xf8>
   29f44:	3401      	adds	r4, #1
   29f46:	428c      	cmp	r4, r1
   29f48:	d870      	bhi.n	2a02c <two_way_long_needle+0x1f4>
   29f4a:	9c03      	ldr	r4, [sp, #12]
   29f4c:	4638      	mov	r0, r7
   29f4e:	44a0      	add	r8, r4
   29f50:	ebaa 0404 	sub.w	r4, sl, r4
   29f54:	e7a3      	b.n	29e9e <two_way_long_needle+0x66>
   29f56:	f1c9 0201 	rsb	r2, r9, #1
   29f5a:	4490      	add	r8, r2
   29f5c:	e7b7      	b.n	29ece <two_way_long_needle+0x96>
   29f5e:	2000      	movs	r0, #0
   29f60:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   29f64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   29f68:	eba4 0309 	sub.w	r3, r4, r9
   29f6c:	454b      	cmp	r3, r9
   29f6e:	bf38      	it	cc
   29f70:	464b      	movcc	r3, r9
   29f72:	3301      	adds	r3, #1
   29f74:	f109 38ff 	add.w	r8, r9, #4294967295	; 0xffffffff
   29f78:	9303      	str	r3, [sp, #12]
   29f7a:	eb06 0308 	add.w	r3, r6, r8
   29f7e:	4658      	mov	r0, fp
   29f80:	f04f 0a00 	mov.w	sl, #0
   29f84:	46cb      	mov	fp, r9
   29f86:	4699      	mov	r9, r3
   29f88:	eb0a 0704 	add.w	r7, sl, r4
   29f8c:	1a3a      	subs	r2, r7, r0
   29f8e:	2100      	movs	r1, #0
   29f90:	4428      	add	r0, r5
   29f92:	f7d6 f945 	bl	220 <memchr>
   29f96:	2800      	cmp	r0, #0
   29f98:	d1e1      	bne.n	29f5e <two_way_long_needle+0x126>
   29f9a:	2f00      	cmp	r7, #0
   29f9c:	d0df      	beq.n	29f5e <two_way_long_needle+0x126>
   29f9e:	19eb      	adds	r3, r5, r7
   29fa0:	aa04      	add	r2, sp, #16
   29fa2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
   29fa6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
   29faa:	bba3      	cbnz	r3, 2a016 <two_way_long_needle+0x1de>
   29fac:	1e61      	subs	r1, r4, #1
   29fae:	458b      	cmp	fp, r1
   29fb0:	d215      	bcs.n	29fde <two_way_long_needle+0x1a6>
   29fb2:	eb0a 020b 	add.w	r2, sl, fp
   29fb6:	f816 300b 	ldrb.w	r3, [r6, fp]
   29fba:	f815 e002 	ldrb.w	lr, [r5, r2]
   29fbe:	459e      	cmp	lr, r3
   29fc0:	442a      	add	r2, r5
   29fc2:	eb06 000b 	add.w	r0, r6, fp
   29fc6:	465b      	mov	r3, fp
   29fc8:	d006      	beq.n	29fd8 <two_way_long_needle+0x1a0>
   29fca:	e027      	b.n	2a01c <two_way_long_needle+0x1e4>
   29fcc:	f810 cf01 	ldrb.w	ip, [r0, #1]!
   29fd0:	f812 ef01 	ldrb.w	lr, [r2, #1]!
   29fd4:	45f4      	cmp	ip, lr
   29fd6:	d121      	bne.n	2a01c <two_way_long_needle+0x1e4>
   29fd8:	3301      	adds	r3, #1
   29fda:	428b      	cmp	r3, r1
   29fdc:	d3f6      	bcc.n	29fcc <two_way_long_needle+0x194>
   29fde:	f1b8 3fff 	cmp.w	r8, #4294967295	; 0xffffffff
   29fe2:	d011      	beq.n	2a008 <two_way_long_needle+0x1d0>
   29fe4:	eb0a 0208 	add.w	r2, sl, r8
   29fe8:	f899 1000 	ldrb.w	r1, [r9]
   29fec:	5cab      	ldrb	r3, [r5, r2]
   29fee:	4299      	cmp	r1, r3
   29ff0:	442a      	add	r2, r5
   29ff2:	d10f      	bne.n	2a014 <two_way_long_needle+0x1dc>
   29ff4:	464b      	mov	r3, r9
   29ff6:	e005      	b.n	2a004 <two_way_long_needle+0x1cc>
   29ff8:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   29ffc:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2a000:	4288      	cmp	r0, r1
   2a002:	d107      	bne.n	2a014 <two_way_long_needle+0x1dc>
   2a004:	42b3      	cmp	r3, r6
   2a006:	d1f7      	bne.n	29ff8 <two_way_long_needle+0x1c0>
   2a008:	eb05 000a 	add.w	r0, r5, sl
   2a00c:	f20d 4d14 	addw	sp, sp, #1044	; 0x414
   2a010:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a014:	9b03      	ldr	r3, [sp, #12]
   2a016:	449a      	add	sl, r3
   2a018:	4638      	mov	r0, r7
   2a01a:	e7b5      	b.n	29f88 <two_way_long_needle+0x150>
   2a01c:	f1cb 0201 	rsb	r2, fp, #1
   2a020:	4492      	add	sl, r2
   2a022:	449a      	add	sl, r3
   2a024:	4638      	mov	r0, r7
   2a026:	e7af      	b.n	29f88 <two_way_long_needle+0x150>
   2a028:	4649      	mov	r1, r9
   2a02a:	e78b      	b.n	29f44 <two_way_long_needle+0x10c>
   2a02c:	eb05 0008 	add.w	r0, r5, r8
   2a030:	e796      	b.n	29f60 <two_way_long_needle+0x128>
   2a032:	bf00      	nop

0002a034 <strstr>:
   2a034:	7802      	ldrb	r2, [r0, #0]
   2a036:	2a00      	cmp	r2, #0
   2a038:	f000 8101 	beq.w	2a23e <strstr+0x20a>
   2a03c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a040:	f891 8000 	ldrb.w	r8, [r1]
   2a044:	b085      	sub	sp, #20
   2a046:	4644      	mov	r4, r8
   2a048:	f1b8 0f00 	cmp.w	r8, #0
   2a04c:	d016      	beq.n	2a07c <strstr+0x48>
   2a04e:	4686      	mov	lr, r0
   2a050:	f101 0c01 	add.w	ip, r1, #1
   2a054:	2701      	movs	r7, #1
   2a056:	e003      	b.n	2a060 <strstr+0x2c>
   2a058:	f813 4b01 	ldrb.w	r4, [r3], #1
   2a05c:	b16c      	cbz	r4, 2a07a <strstr+0x46>
   2a05e:	469c      	mov	ip, r3
   2a060:	42a2      	cmp	r2, r4
   2a062:	bf14      	ite	ne
   2a064:	2700      	movne	r7, #0
   2a066:	f007 0701 	andeq.w	r7, r7, #1
   2a06a:	f81e 2f01 	ldrb.w	r2, [lr, #1]!
   2a06e:	4663      	mov	r3, ip
   2a070:	2a00      	cmp	r2, #0
   2a072:	d1f1      	bne.n	2a058 <strstr+0x24>
   2a074:	f89c 3000 	ldrb.w	r3, [ip]
   2a078:	b9fb      	cbnz	r3, 2a0ba <strstr+0x86>
   2a07a:	b117      	cbz	r7, 2a082 <strstr+0x4e>
   2a07c:	b005      	add	sp, #20
   2a07e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a082:	460e      	mov	r6, r1
   2a084:	4605      	mov	r5, r0
   2a086:	4641      	mov	r1, r8
   2a088:	3001      	adds	r0, #1
   2a08a:	ebac 0406 	sub.w	r4, ip, r6
   2a08e:	f7ff fd11 	bl	29ab4 <strchr>
   2a092:	4607      	mov	r7, r0
   2a094:	b188      	cbz	r0, 2a0ba <strstr+0x86>
   2a096:	2c01      	cmp	r4, #1
   2a098:	d0f0      	beq.n	2a07c <strstr+0x48>
   2a09a:	1928      	adds	r0, r5, r4
   2a09c:	4287      	cmp	r7, r0
   2a09e:	bf94      	ite	ls
   2a0a0:	1bc1      	subls	r1, r0, r7
   2a0a2:	2101      	movhi	r1, #1
   2a0a4:	2c1f      	cmp	r4, #31
   2a0a6:	468b      	mov	fp, r1
   2a0a8:	d90b      	bls.n	2a0c2 <strstr+0x8e>
   2a0aa:	4623      	mov	r3, r4
   2a0ac:	4632      	mov	r2, r6
   2a0ae:	4638      	mov	r0, r7
   2a0b0:	f7ff fec2 	bl	29e38 <two_way_long_needle>
   2a0b4:	b005      	add	sp, #20
   2a0b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0ba:	2000      	movs	r0, #0
   2a0bc:	b005      	add	sp, #20
   2a0be:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a0c2:	aa03      	add	r2, sp, #12
   2a0c4:	4621      	mov	r1, r4
   2a0c6:	4630      	mov	r0, r6
   2a0c8:	f7ff fe5c 	bl	29d84 <critical_factorization>
   2a0cc:	9903      	ldr	r1, [sp, #12]
   2a0ce:	4680      	mov	r8, r0
   2a0d0:	4602      	mov	r2, r0
   2a0d2:	4431      	add	r1, r6
   2a0d4:	4630      	mov	r0, r6
   2a0d6:	f7ff fbcb 	bl	29870 <memcmp>
   2a0da:	2800      	cmp	r0, #0
   2a0dc:	d157      	bne.n	2a18e <strstr+0x15a>
   2a0de:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
   2a0e2:	9300      	str	r3, [sp, #0]
   2a0e4:	18f3      	adds	r3, r6, r3
   2a0e6:	4681      	mov	r9, r0
   2a0e8:	4605      	mov	r5, r0
   2a0ea:	9301      	str	r3, [sp, #4]
   2a0ec:	4658      	mov	r0, fp
   2a0ee:	46b2      	mov	sl, r6
   2a0f0:	1966      	adds	r6, r4, r5
   2a0f2:	1a32      	subs	r2, r6, r0
   2a0f4:	2100      	movs	r1, #0
   2a0f6:	4438      	add	r0, r7
   2a0f8:	f7d6 f892 	bl	220 <memchr>
   2a0fc:	2800      	cmp	r0, #0
   2a0fe:	d1dc      	bne.n	2a0ba <strstr+0x86>
   2a100:	2e00      	cmp	r6, #0
   2a102:	d0da      	beq.n	2a0ba <strstr+0x86>
   2a104:	45c8      	cmp	r8, r9
   2a106:	4643      	mov	r3, r8
   2a108:	bf38      	it	cc
   2a10a:	464b      	movcc	r3, r9
   2a10c:	429c      	cmp	r4, r3
   2a10e:	d912      	bls.n	2a136 <strstr+0x102>
   2a110:	195a      	adds	r2, r3, r5
   2a112:	f81a 1003 	ldrb.w	r1, [sl, r3]
   2a116:	5cb8      	ldrb	r0, [r7, r2]
   2a118:	4281      	cmp	r1, r0
   2a11a:	443a      	add	r2, r7
   2a11c:	eb0a 0e03 	add.w	lr, sl, r3
   2a120:	d006      	beq.n	2a130 <strstr+0xfc>
   2a122:	e02c      	b.n	2a17e <strstr+0x14a>
   2a124:	f81e 0f01 	ldrb.w	r0, [lr, #1]!
   2a128:	f812 1f01 	ldrb.w	r1, [r2, #1]!
   2a12c:	4288      	cmp	r0, r1
   2a12e:	d126      	bne.n	2a17e <strstr+0x14a>
   2a130:	3301      	adds	r3, #1
   2a132:	429c      	cmp	r4, r3
   2a134:	d1f6      	bne.n	2a124 <strstr+0xf0>
   2a136:	45c8      	cmp	r8, r9
   2a138:	9900      	ldr	r1, [sp, #0]
   2a13a:	f240 8083 	bls.w	2a244 <strstr+0x210>
   2a13e:	9b00      	ldr	r3, [sp, #0]
   2a140:	18ea      	adds	r2, r5, r3
   2a142:	9b01      	ldr	r3, [sp, #4]
   2a144:	5cb8      	ldrb	r0, [r7, r2]
   2a146:	781b      	ldrb	r3, [r3, #0]
   2a148:	4298      	cmp	r0, r3
   2a14a:	443a      	add	r2, r7
   2a14c:	d17a      	bne.n	2a244 <strstr+0x210>
   2a14e:	9801      	ldr	r0, [sp, #4]
   2a150:	f109 3bff 	add.w	fp, r9, #4294967295	; 0xffffffff
   2a154:	e006      	b.n	2a164 <strstr+0x130>
   2a156:	f810 cd01 	ldrb.w	ip, [r0, #-1]!
   2a15a:	f812 ed01 	ldrb.w	lr, [r2, #-1]!
   2a15e:	45f4      	cmp	ip, lr
   2a160:	d103      	bne.n	2a16a <strstr+0x136>
   2a162:	4619      	mov	r1, r3
   2a164:	1e4b      	subs	r3, r1, #1
   2a166:	455b      	cmp	r3, fp
   2a168:	d1f5      	bne.n	2a156 <strstr+0x122>
   2a16a:	f109 0901 	add.w	r9, r9, #1
   2a16e:	4589      	cmp	r9, r1
   2a170:	d857      	bhi.n	2a222 <strstr+0x1ee>
   2a172:	9b03      	ldr	r3, [sp, #12]
   2a174:	4630      	mov	r0, r6
   2a176:	441d      	add	r5, r3
   2a178:	eba4 0903 	sub.w	r9, r4, r3
   2a17c:	e7b8      	b.n	2a0f0 <strstr+0xbc>
   2a17e:	f1c8 0201 	rsb	r2, r8, #1
   2a182:	4415      	add	r5, r2
   2a184:	441d      	add	r5, r3
   2a186:	f04f 0900 	mov.w	r9, #0
   2a18a:	4630      	mov	r0, r6
   2a18c:	e7b0      	b.n	2a0f0 <strstr+0xbc>
   2a18e:	eba4 0308 	sub.w	r3, r4, r8
   2a192:	4543      	cmp	r3, r8
   2a194:	bf38      	it	cc
   2a196:	4643      	movcc	r3, r8
   2a198:	3301      	adds	r3, #1
   2a19a:	f108 39ff 	add.w	r9, r8, #4294967295	; 0xffffffff
   2a19e:	9303      	str	r3, [sp, #12]
   2a1a0:	eb06 0309 	add.w	r3, r6, r9
   2a1a4:	4658      	mov	r0, fp
   2a1a6:	2500      	movs	r5, #0
   2a1a8:	46bb      	mov	fp, r7
   2a1aa:	469a      	mov	sl, r3
   2a1ac:	1967      	adds	r7, r4, r5
   2a1ae:	1a3a      	subs	r2, r7, r0
   2a1b0:	2100      	movs	r1, #0
   2a1b2:	4458      	add	r0, fp
   2a1b4:	f7d6 f834 	bl	220 <memchr>
   2a1b8:	2800      	cmp	r0, #0
   2a1ba:	f47f af7e 	bne.w	2a0ba <strstr+0x86>
   2a1be:	2f00      	cmp	r7, #0
   2a1c0:	f43f af7b 	beq.w	2a0ba <strstr+0x86>
   2a1c4:	4544      	cmp	r4, r8
   2a1c6:	d915      	bls.n	2a1f4 <strstr+0x1c0>
   2a1c8:	eb08 0205 	add.w	r2, r8, r5
   2a1cc:	f816 3008 	ldrb.w	r3, [r6, r8]
   2a1d0:	f81b 0002 	ldrb.w	r0, [fp, r2]
   2a1d4:	4298      	cmp	r0, r3
   2a1d6:	445a      	add	r2, fp
   2a1d8:	eb06 0108 	add.w	r1, r6, r8
   2a1dc:	4643      	mov	r3, r8
   2a1de:	d006      	beq.n	2a1ee <strstr+0x1ba>
   2a1e0:	e023      	b.n	2a22a <strstr+0x1f6>
   2a1e2:	f811 ef01 	ldrb.w	lr, [r1, #1]!
   2a1e6:	f812 0f01 	ldrb.w	r0, [r2, #1]!
   2a1ea:	4586      	cmp	lr, r0
   2a1ec:	d11d      	bne.n	2a22a <strstr+0x1f6>
   2a1ee:	3301      	adds	r3, #1
   2a1f0:	429c      	cmp	r4, r3
   2a1f2:	d1f6      	bne.n	2a1e2 <strstr+0x1ae>
   2a1f4:	f1b9 3fff 	cmp.w	r9, #4294967295	; 0xffffffff
   2a1f8:	d012      	beq.n	2a220 <strstr+0x1ec>
   2a1fa:	eb05 0209 	add.w	r2, r5, r9
   2a1fe:	f89a 3000 	ldrb.w	r3, [sl]
   2a202:	f81b 1002 	ldrb.w	r1, [fp, r2]
   2a206:	4299      	cmp	r1, r3
   2a208:	445a      	add	r2, fp
   2a20a:	d114      	bne.n	2a236 <strstr+0x202>
   2a20c:	4653      	mov	r3, sl
   2a20e:	e005      	b.n	2a21c <strstr+0x1e8>
   2a210:	f813 0d01 	ldrb.w	r0, [r3, #-1]!
   2a214:	f812 1d01 	ldrb.w	r1, [r2, #-1]!
   2a218:	4288      	cmp	r0, r1
   2a21a:	d10c      	bne.n	2a236 <strstr+0x202>
   2a21c:	42b3      	cmp	r3, r6
   2a21e:	d1f7      	bne.n	2a210 <strstr+0x1dc>
   2a220:	465f      	mov	r7, fp
   2a222:	1978      	adds	r0, r7, r5
   2a224:	b005      	add	sp, #20
   2a226:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a22a:	f1c8 0201 	rsb	r2, r8, #1
   2a22e:	4415      	add	r5, r2
   2a230:	441d      	add	r5, r3
   2a232:	4638      	mov	r0, r7
   2a234:	e7ba      	b.n	2a1ac <strstr+0x178>
   2a236:	9b03      	ldr	r3, [sp, #12]
   2a238:	4638      	mov	r0, r7
   2a23a:	441d      	add	r5, r3
   2a23c:	e7b6      	b.n	2a1ac <strstr+0x178>
   2a23e:	780b      	ldrb	r3, [r1, #0]
   2a240:	b913      	cbnz	r3, 2a248 <strstr+0x214>
   2a242:	4770      	bx	lr
   2a244:	4641      	mov	r1, r8
   2a246:	e790      	b.n	2a16a <strstr+0x136>
   2a248:	2000      	movs	r0, #0
   2a24a:	4770      	bx	lr

0002a24c <_strtol_l.isra.0>:
   2a24c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a250:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2a254:	460f      	mov	r7, r1
   2a256:	4680      	mov	r8, r0
   2a258:	4616      	mov	r6, r2
   2a25a:	461d      	mov	r5, r3
   2a25c:	468a      	mov	sl, r1
   2a25e:	e000      	b.n	2a262 <_strtol_l.isra.0+0x16>
   2a260:	46a2      	mov	sl, r4
   2a262:	4654      	mov	r4, sl
   2a264:	4648      	mov	r0, r9
   2a266:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a26a:	f7ff fad9 	bl	29820 <__locale_ctype_ptr_l>
   2a26e:	4458      	add	r0, fp
   2a270:	7842      	ldrb	r2, [r0, #1]
   2a272:	f012 0208 	ands.w	r2, r2, #8
   2a276:	d1f3      	bne.n	2a260 <_strtol_l.isra.0+0x14>
   2a278:	f1bb 0f2d 	cmp.w	fp, #45	; 0x2d
   2a27c:	d04f      	beq.n	2a31e <_strtol_l.isra.0+0xd2>
   2a27e:	f1bb 0f2b 	cmp.w	fp, #43	; 0x2b
   2a282:	bf04      	itt	eq
   2a284:	f894 b000 	ldrbeq.w	fp, [r4]
   2a288:	f10a 0402 	addeq.w	r4, sl, #2
   2a28c:	b11d      	cbz	r5, 2a296 <_strtol_l.isra.0+0x4a>
   2a28e:	2d10      	cmp	r5, #16
   2a290:	d056      	beq.n	2a340 <_strtol_l.isra.0+0xf4>
   2a292:	46ac      	mov	ip, r5
   2a294:	e004      	b.n	2a2a0 <_strtol_l.isra.0+0x54>
   2a296:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2a29a:	d060      	beq.n	2a35e <_strtol_l.isra.0+0x112>
   2a29c:	250a      	movs	r5, #10
   2a29e:	46ac      	mov	ip, r5
   2a2a0:	2a00      	cmp	r2, #0
   2a2a2:	bf0c      	ite	eq
   2a2a4:	f06f 4900 	mvneq.w	r9, #2147483648	; 0x80000000
   2a2a8:	f04f 4900 	movne.w	r9, #2147483648	; 0x80000000
   2a2ac:	2100      	movs	r1, #0
   2a2ae:	fbb9 fefc 	udiv	lr, r9, ip
   2a2b2:	4608      	mov	r0, r1
   2a2b4:	fb0c 9a1e 	mls	sl, ip, lr, r9
   2a2b8:	e005      	b.n	2a2c6 <_strtol_l.isra.0+0x7a>
   2a2ba:	d029      	beq.n	2a310 <_strtol_l.isra.0+0xc4>
   2a2bc:	fb0c 3000 	mla	r0, ip, r0, r3
   2a2c0:	2101      	movs	r1, #1
   2a2c2:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a2c6:	f1ab 0330 	sub.w	r3, fp, #48	; 0x30
   2a2ca:	2b09      	cmp	r3, #9
   2a2cc:	d905      	bls.n	2a2da <_strtol_l.isra.0+0x8e>
   2a2ce:	f1ab 0341 	sub.w	r3, fp, #65	; 0x41
   2a2d2:	2b19      	cmp	r3, #25
   2a2d4:	d80b      	bhi.n	2a2ee <_strtol_l.isra.0+0xa2>
   2a2d6:	f1ab 0337 	sub.w	r3, fp, #55	; 0x37
   2a2da:	429d      	cmp	r5, r3
   2a2dc:	dd0f      	ble.n	2a2fe <_strtol_l.isra.0+0xb2>
   2a2de:	f1b1 3fff 	cmp.w	r1, #4294967295	; 0xffffffff
   2a2e2:	d0ee      	beq.n	2a2c2 <_strtol_l.isra.0+0x76>
   2a2e4:	4586      	cmp	lr, r0
   2a2e6:	d2e8      	bcs.n	2a2ba <_strtol_l.isra.0+0x6e>
   2a2e8:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a2ec:	e7e9      	b.n	2a2c2 <_strtol_l.isra.0+0x76>
   2a2ee:	f1ab 0361 	sub.w	r3, fp, #97	; 0x61
   2a2f2:	2b19      	cmp	r3, #25
   2a2f4:	d803      	bhi.n	2a2fe <_strtol_l.isra.0+0xb2>
   2a2f6:	f1ab 0357 	sub.w	r3, fp, #87	; 0x57
   2a2fa:	429d      	cmp	r5, r3
   2a2fc:	dcef      	bgt.n	2a2de <_strtol_l.isra.0+0x92>
   2a2fe:	1c4b      	adds	r3, r1, #1
   2a300:	d013      	beq.n	2a32a <_strtol_l.isra.0+0xde>
   2a302:	b102      	cbz	r2, 2a306 <_strtol_l.isra.0+0xba>
   2a304:	4240      	negs	r0, r0
   2a306:	b146      	cbz	r6, 2a31a <_strtol_l.isra.0+0xce>
   2a308:	b9c1      	cbnz	r1, 2a33c <_strtol_l.isra.0+0xf0>
   2a30a:	6037      	str	r7, [r6, #0]
   2a30c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a310:	459a      	cmp	sl, r3
   2a312:	dad3      	bge.n	2a2bc <_strtol_l.isra.0+0x70>
   2a314:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
   2a318:	e7d3      	b.n	2a2c2 <_strtol_l.isra.0+0x76>
   2a31a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a31e:	f894 b000 	ldrb.w	fp, [r4]
   2a322:	2201      	movs	r2, #1
   2a324:	f10a 0402 	add.w	r4, sl, #2
   2a328:	e7b0      	b.n	2a28c <_strtol_l.isra.0+0x40>
   2a32a:	2322      	movs	r3, #34	; 0x22
   2a32c:	f8c8 3000 	str.w	r3, [r8]
   2a330:	b1ee      	cbz	r6, 2a36e <_strtol_l.isra.0+0x122>
   2a332:	1e67      	subs	r7, r4, #1
   2a334:	4648      	mov	r0, r9
   2a336:	6037      	str	r7, [r6, #0]
   2a338:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a33c:	4681      	mov	r9, r0
   2a33e:	e7f8      	b.n	2a332 <_strtol_l.isra.0+0xe6>
   2a340:	f1bb 0f30 	cmp.w	fp, #48	; 0x30
   2a344:	d1a5      	bne.n	2a292 <_strtol_l.isra.0+0x46>
   2a346:	7823      	ldrb	r3, [r4, #0]
   2a348:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a34c:	2b58      	cmp	r3, #88	; 0x58
   2a34e:	d1a0      	bne.n	2a292 <_strtol_l.isra.0+0x46>
   2a350:	f04f 0c10 	mov.w	ip, #16
   2a354:	f894 b001 	ldrb.w	fp, [r4, #1]
   2a358:	4665      	mov	r5, ip
   2a35a:	3402      	adds	r4, #2
   2a35c:	e7a0      	b.n	2a2a0 <_strtol_l.isra.0+0x54>
   2a35e:	7823      	ldrb	r3, [r4, #0]
   2a360:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a364:	2b58      	cmp	r3, #88	; 0x58
   2a366:	d0f3      	beq.n	2a350 <_strtol_l.isra.0+0x104>
   2a368:	2508      	movs	r5, #8
   2a36a:	46ac      	mov	ip, r5
   2a36c:	e798      	b.n	2a2a0 <_strtol_l.isra.0+0x54>
   2a36e:	4648      	mov	r0, r9
   2a370:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}

0002a374 <strtol>:
   2a374:	b530      	push	{r4, r5, lr}
   2a376:	4c08      	ldr	r4, [pc, #32]	; (2a398 <strtol+0x24>)
   2a378:	4b08      	ldr	r3, [pc, #32]	; (2a39c <strtol+0x28>)
   2a37a:	6825      	ldr	r5, [r4, #0]
   2a37c:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2a37e:	b083      	sub	sp, #12
   2a380:	2c00      	cmp	r4, #0
   2a382:	bf08      	it	eq
   2a384:	461c      	moveq	r4, r3
   2a386:	9400      	str	r4, [sp, #0]
   2a388:	4613      	mov	r3, r2
   2a38a:	460a      	mov	r2, r1
   2a38c:	4601      	mov	r1, r0
   2a38e:	4628      	mov	r0, r5
   2a390:	f7ff ff5c 	bl	2a24c <_strtol_l.isra.0>
   2a394:	b003      	add	sp, #12
   2a396:	bd30      	pop	{r4, r5, pc}
   2a398:	2000c5c0 	.word	0x2000c5c0
   2a39c:	2000c9f0 	.word	0x2000c9f0

0002a3a0 <_strtoul_l.isra.0>:
   2a3a0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   2a3a4:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   2a3a8:	460e      	mov	r6, r1
   2a3aa:	4607      	mov	r7, r0
   2a3ac:	4615      	mov	r5, r2
   2a3ae:	4698      	mov	r8, r3
   2a3b0:	468a      	mov	sl, r1
   2a3b2:	e000      	b.n	2a3b6 <_strtoul_l.isra.0+0x16>
   2a3b4:	46a2      	mov	sl, r4
   2a3b6:	4654      	mov	r4, sl
   2a3b8:	4648      	mov	r0, r9
   2a3ba:	f814 bb01 	ldrb.w	fp, [r4], #1
   2a3be:	f7ff fa2f 	bl	29820 <__locale_ctype_ptr_l>
   2a3c2:	4458      	add	r0, fp
   2a3c4:	7840      	ldrb	r0, [r0, #1]
   2a3c6:	f010 0008 	ands.w	r0, r0, #8
   2a3ca:	d1f3      	bne.n	2a3b4 <_strtoul_l.isra.0+0x14>
   2a3cc:	4659      	mov	r1, fp
   2a3ce:	292d      	cmp	r1, #45	; 0x2d
   2a3d0:	d059      	beq.n	2a486 <_strtoul_l.isra.0+0xe6>
   2a3d2:	292b      	cmp	r1, #43	; 0x2b
   2a3d4:	bf04      	itt	eq
   2a3d6:	7821      	ldrbeq	r1, [r4, #0]
   2a3d8:	f10a 0402 	addeq.w	r4, sl, #2
   2a3dc:	f1b8 0f00 	cmp.w	r8, #0
   2a3e0:	d00c      	beq.n	2a3fc <_strtoul_l.isra.0+0x5c>
   2a3e2:	f1b8 0f10 	cmp.w	r8, #16
   2a3e6:	d053      	beq.n	2a490 <_strtoul_l.isra.0+0xf0>
   2a3e8:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
   2a3ec:	fbbc fcf8 	udiv	ip, ip, r8
   2a3f0:	fb08 fa0c 	mul.w	sl, r8, ip
   2a3f4:	ea6f 0a0a 	mvn.w	sl, sl
   2a3f8:	46c1      	mov	r9, r8
   2a3fa:	e008      	b.n	2a40e <_strtoul_l.isra.0+0x6e>
   2a3fc:	2930      	cmp	r1, #48	; 0x30
   2a3fe:	d058      	beq.n	2a4b2 <_strtoul_l.isra.0+0x112>
   2a400:	f04f 080a 	mov.w	r8, #10
   2a404:	f8df c0dc 	ldr.w	ip, [pc, #220]	; 2a4e4 <_strtoul_l.isra.0+0x144>
   2a408:	46c1      	mov	r9, r8
   2a40a:	f04f 0a05 	mov.w	sl, #5
   2a40e:	2300      	movs	r3, #0
   2a410:	469e      	mov	lr, r3
   2a412:	e005      	b.n	2a420 <_strtoul_l.isra.0+0x80>
   2a414:	d02a      	beq.n	2a46c <_strtoul_l.isra.0+0xcc>
   2a416:	fb09 2e0e 	mla	lr, r9, lr, r2
   2a41a:	2301      	movs	r3, #1
   2a41c:	f814 1b01 	ldrb.w	r1, [r4], #1
   2a420:	f1a1 0230 	sub.w	r2, r1, #48	; 0x30
   2a424:	2a09      	cmp	r2, #9
   2a426:	d905      	bls.n	2a434 <_strtoul_l.isra.0+0x94>
   2a428:	f1a1 0241 	sub.w	r2, r1, #65	; 0x41
   2a42c:	2a19      	cmp	r2, #25
   2a42e:	d80a      	bhi.n	2a446 <_strtoul_l.isra.0+0xa6>
   2a430:	f1a1 0237 	sub.w	r2, r1, #55	; 0x37
   2a434:	4590      	cmp	r8, r2
   2a436:	dd0e      	ble.n	2a456 <_strtoul_l.isra.0+0xb6>
   2a438:	2b00      	cmp	r3, #0
   2a43a:	db01      	blt.n	2a440 <_strtoul_l.isra.0+0xa0>
   2a43c:	45e6      	cmp	lr, ip
   2a43e:	d9e9      	bls.n	2a414 <_strtoul_l.isra.0+0x74>
   2a440:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a444:	e7ea      	b.n	2a41c <_strtoul_l.isra.0+0x7c>
   2a446:	f1a1 0261 	sub.w	r2, r1, #97	; 0x61
   2a44a:	2a19      	cmp	r2, #25
   2a44c:	d803      	bhi.n	2a456 <_strtoul_l.isra.0+0xb6>
   2a44e:	f1a1 0257 	sub.w	r2, r1, #87	; 0x57
   2a452:	4590      	cmp	r8, r2
   2a454:	dcf0      	bgt.n	2a438 <_strtoul_l.isra.0+0x98>
   2a456:	2b00      	cmp	r3, #0
   2a458:	db0d      	blt.n	2a476 <_strtoul_l.isra.0+0xd6>
   2a45a:	b108      	cbz	r0, 2a460 <_strtoul_l.isra.0+0xc0>
   2a45c:	f1ce 0e00 	rsb	lr, lr, #0
   2a460:	b10d      	cbz	r5, 2a466 <_strtoul_l.isra.0+0xc6>
   2a462:	b973      	cbnz	r3, 2a482 <_strtoul_l.isra.0+0xe2>
   2a464:	602e      	str	r6, [r5, #0]
   2a466:	4670      	mov	r0, lr
   2a468:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   2a46c:	4552      	cmp	r2, sl
   2a46e:	ddd2      	ble.n	2a416 <_strtoul_l.isra.0+0x76>
   2a470:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
   2a474:	e7d2      	b.n	2a41c <_strtoul_l.isra.0+0x7c>
   2a476:	2322      	movs	r3, #34	; 0x22
   2a478:	603b      	str	r3, [r7, #0]
   2a47a:	f04f 3eff 	mov.w	lr, #4294967295	; 0xffffffff
   2a47e:	2d00      	cmp	r5, #0
   2a480:	d0f1      	beq.n	2a466 <_strtoul_l.isra.0+0xc6>
   2a482:	1e66      	subs	r6, r4, #1
   2a484:	e7ee      	b.n	2a464 <_strtoul_l.isra.0+0xc4>
   2a486:	7821      	ldrb	r1, [r4, #0]
   2a488:	2001      	movs	r0, #1
   2a48a:	f10a 0402 	add.w	r4, sl, #2
   2a48e:	e7a5      	b.n	2a3dc <_strtoul_l.isra.0+0x3c>
   2a490:	2930      	cmp	r1, #48	; 0x30
   2a492:	d11b      	bne.n	2a4cc <_strtoul_l.isra.0+0x12c>
   2a494:	7823      	ldrb	r3, [r4, #0]
   2a496:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a49a:	2b58      	cmp	r3, #88	; 0x58
   2a49c:	d11c      	bne.n	2a4d8 <_strtoul_l.isra.0+0x138>
   2a49e:	f04f 0910 	mov.w	r9, #16
   2a4a2:	7861      	ldrb	r1, [r4, #1]
   2a4a4:	46c8      	mov	r8, r9
   2a4a6:	f04f 0a0f 	mov.w	sl, #15
   2a4aa:	3402      	adds	r4, #2
   2a4ac:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a4b0:	e7ad      	b.n	2a40e <_strtoul_l.isra.0+0x6e>
   2a4b2:	7823      	ldrb	r3, [r4, #0]
   2a4b4:	f003 03df 	and.w	r3, r3, #223	; 0xdf
   2a4b8:	2b58      	cmp	r3, #88	; 0x58
   2a4ba:	d0f0      	beq.n	2a49e <_strtoul_l.isra.0+0xfe>
   2a4bc:	f04f 0808 	mov.w	r8, #8
   2a4c0:	46c1      	mov	r9, r8
   2a4c2:	f04f 0a07 	mov.w	sl, #7
   2a4c6:	f06f 4c60 	mvn.w	ip, #3758096384	; 0xe0000000
   2a4ca:	e7a0      	b.n	2a40e <_strtoul_l.isra.0+0x6e>
   2a4cc:	f04f 0a0f 	mov.w	sl, #15
   2a4d0:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a4d4:	46c1      	mov	r9, r8
   2a4d6:	e79a      	b.n	2a40e <_strtoul_l.isra.0+0x6e>
   2a4d8:	46c1      	mov	r9, r8
   2a4da:	f06f 4c70 	mvn.w	ip, #4026531840	; 0xf0000000
   2a4de:	f04f 0a0f 	mov.w	sl, #15
   2a4e2:	e794      	b.n	2a40e <_strtoul_l.isra.0+0x6e>
   2a4e4:	19999999 	.word	0x19999999

0002a4e8 <strtoul>:
   2a4e8:	b530      	push	{r4, r5, lr}
   2a4ea:	4c08      	ldr	r4, [pc, #32]	; (2a50c <strtoul+0x24>)
   2a4ec:	4b08      	ldr	r3, [pc, #32]	; (2a510 <strtoul+0x28>)
   2a4ee:	6825      	ldr	r5, [r4, #0]
   2a4f0:	6b6c      	ldr	r4, [r5, #52]	; 0x34
   2a4f2:	b083      	sub	sp, #12
   2a4f4:	2c00      	cmp	r4, #0
   2a4f6:	bf08      	it	eq
   2a4f8:	461c      	moveq	r4, r3
   2a4fa:	9400      	str	r4, [sp, #0]
   2a4fc:	4613      	mov	r3, r2
   2a4fe:	460a      	mov	r2, r1
   2a500:	4601      	mov	r1, r0
   2a502:	4628      	mov	r0, r5
   2a504:	f7ff ff4c 	bl	2a3a0 <_strtoul_l.isra.0>
   2a508:	b003      	add	sp, #12
   2a50a:	bd30      	pop	{r4, r5, pc}
   2a50c:	2000c5c0 	.word	0x2000c5c0
   2a510:	2000c9f0 	.word	0x2000c9f0

0002a514 <__ascii_wctomb>:
   2a514:	b121      	cbz	r1, 2a520 <__ascii_wctomb+0xc>
   2a516:	2aff      	cmp	r2, #255	; 0xff
   2a518:	d804      	bhi.n	2a524 <__ascii_wctomb+0x10>
   2a51a:	700a      	strb	r2, [r1, #0]
   2a51c:	2001      	movs	r0, #1
   2a51e:	4770      	bx	lr
   2a520:	4608      	mov	r0, r1
   2a522:	4770      	bx	lr
   2a524:	238a      	movs	r3, #138	; 0x8a
   2a526:	6003      	str	r3, [r0, #0]
   2a528:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
   2a52c:	4770      	bx	lr
   2a52e:	bf00      	nop
